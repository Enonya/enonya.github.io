{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u7b80\u4ecb \u00b6 \u65e0\u53ef\u5949\u544a\u3002 \u53e6\uff1a\u7981\u6b62\u8f6c\u8f7d\u4efb\u4f55\u6587\u7ae0\u3002 \u5982\u6709\u7279\u6b8a\u9700\u6c42\u9700\u8981\u8f6c\u8f7d\u8bf7\u8054\u7cfb\uff1a black_trees@foxmail.com \u3002 \u6216\u8005\uff1a QQ:1020061231","title":"\u7b80\u4ecb"},{"location":"#_1","text":"\u65e0\u53ef\u5949\u544a\u3002 \u53e6\uff1a\u7981\u6b62\u8f6c\u8f7d\u4efb\u4f55\u6587\u7ae0\u3002 \u5982\u6709\u7279\u6b8a\u9700\u6c42\u9700\u8981\u8f6c\u8f7d\u8bf7\u8054\u7cfb\uff1a black_trees@foxmail.com \u3002 \u6216\u8005\uff1a QQ:1020061231","title":"\u7b80\u4ecb"},{"location":"%E6%80%9D%E8%80%83/20220413B/","text":"B \u7ec4\u6a21\u62df\u8d5b\u90e8\u5206\u9898\u89e3 \u00b6 Apr 13 rd 2022 T3 \u56e2\u4e0d\u8fc7 \u00b6 Description \u00b6 \\(n \\le 10^7\\) Analysis \u00b6 \u4e00\u5b9a\u8981\u6ce8\u610f\u5230\u4e00\u4e2a\u6761\u4ef6\uff1a\u201c\u77f3\u5b50\u6570\u4e92\u4e0d\u76f8\u540c\u201d\uff0c\u6211\u88ab\u8fd9\u4e2a\u5751\u4e86/kk\u3002 \u9996\u5148\u53ef\u4ee5\u8003\u8651\u7b80\u5355\u4e00\u70b9\u7684\u60c5\u51b5\u3002 \u8bbe \\(dp_{i,j}\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u5806\u77f3\u5b50\uff0c\u5f53\u524d\u5f02\u6216\u548c\u4e3a \\(j\\) \u65f6\u5148\u624b\u5fc5\u80dc\u7684\u65b9\u6848\u6570\u3002 \u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5f97\u5230\u8f6c\u79fb\u65b9\u7a0b\uff0c\u7b54\u6848\u4e3a \\(\\sum dp_{n,i},i\\not=0\\) \uff0c\u590d\u6742\u5ea6 \\(\\text{O}(n\\times 2^n \\times 2^n)\\) \u3002 \u671f\u671b\u5f97\u5206\u9ad8\u4e8e \\(20\\) \u4f4e\u4e8e \\(40\\) \u3002 \u53ef\u4ee5\u5bf9\u8fd9\u4e2a DP \u8fdb\u884c\u72b6\u6001\u8f6c\u79fb\u4e0a\u7684\u4f18\u5316\uff0c\u4f46\u662f\u5c31\u7b97\u4f18\u5316\u4e4b\u540e\u4e5f\u8fd8\u662f\u4f1a\u53d1\u73b0\uff0c\u590d\u6742\u5ea6\u65e0\u6cd5\u63a5\u53d7\u3002 \u53d1\u73b0\u95ee\u9898\u51fa\u5728 \\(j\\) \u4e0a\uff0c\u56e0\u4e3a\u5148\u624b\u5fc5\u80dc\u7b49\u4ef7\u4e8e\u5f02\u6216\u548c\u4e0d\u4e3a \\(0\\) \uff0c\u72b6\u6001\u6570\u660e\u663e\u591a\u4e86\u5f88\u591a\u3002 \u800c\u603b\u65b9\u6848\u6570\u51cf\u53bb\u5148\u624b\u5fc5\u8d25\u7684\u65b9\u6848\u6570\u4ecd\u7136\u7b49\u4e8e\u5148\u624b\u5fc5\u80dc\uff0c\u6240\u4ee5\u6c42\u51fa\u5148\u624b\u5fc5\u8d25\u7684\u65b9\u6848\u4e4b\u540e\u7b49\u4ef7\u4e8e\u6c42\u51fa\u4e86\u5148\u624b\u5fc5\u80dc\u7684\u65b9\u6848\u3002 \u5148\u624b\u5fc5\u8d25\u7684\u72b6\u6001\u6570\u76f8\u8f83\u4e8e\u5148\u624b\u5fc5\u80dc\uff0c\u5c11\u4e86\u6700\u540e \\(j\\) \u7684\u8fd9\u4e00\u7ef4\uff0c\u5bf9\u5e94\u5230\u672c\u9898\u5c31\u662f\u5c11\u4e86 \\(2^n\\) \u7ea7\u522b\u4e2a\u72b6\u6001\u3002 \u6240\u4ee5\u72b6\u6001\u6570\u5c31\u53d8\u6210\u4e86 \\(\\text{O}(n)\\) \u4e2a\uff0c\u53ef\u4ee5\u8003\u8651\u8fdb\u884c \\(\\text{O}(n)\\) \u7684\u9012\u63a8\u3002 \u8bbe \\(f_i\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u5806\u77f3\u5b50\uff0c\u5148\u624b\u5fc5\u8d25\u7684\u65b9\u6848\u6570\u3002 \\(p_i\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u5806\u77f3\u5b50\u7684\u603b\u65b9\u6848\u6570\u3002 \u56e0\u4e3a\u77f3\u5b50\u7684\u6570\u91cf\u4e0d\u80fd\u76f8\u540c\uff0c\u6240\u4ee5\u5f97\u5230 \\(p\\) \u7684\u8ba1\u7b97\u5f0f\uff1a \\[p_i = \\prod\\limits_{j = 1}^i((2^n-1)-(j - 1)) = \\prod\\limits_{j = 1}^i(2^n-j)\\] \u5feb\u901f\u5e42 \\(\\text{O}(\\log n)\\) \u6c42\u51fa \\(2^n\\) \u4e4b\u540e\u53ef\u4ee5\u7ebf\u6027\u9012\u63a8\u3002 \u7136\u540e\u8003\u8651\u6c42 \\(f_{i}\\) \u3002 \\(f_i\\) \u7b49\u4ef7\u4e8e\u8fd9\u6837\u4e00\u4e2a\u72b6\u6001\uff1a\u8003\u8651\u524d \\(i\\) \u5806\u77f3\u5b50\uff0c\u5f02\u6216\u548c\u4e3a \\(0\\) \u7684\u6240\u6709\u65b9\u6848\u3002 \u53ef\u4ee5\u5229\u7528 DP \u79cd \u201c\u524d\u4e00\u6bb5\u72b6\u6001 + \u540e\u4e00\u6bb5\u8d21\u732e = \u5927\u6bb5\u72b6\u6001\u201d \u7684\u601d\u60f3\u6765\u601d\u8003\u8f6c\u79fb\u65b9\u7a0b\u3002 \u9996\u5148\u94a6\u5b9a\u524d \\(i - 1\\) \u5806\u7684\u5f02\u6216\u548c\u4e3a \\(0\\) \uff0c\u65b9\u6848\u6570\u52a0\u4e0a \\(p_{i-1}\\) \uff0c\u63a5\u4e0b\u6765\u8981\u505a\u7684\u5c31\u662f\u6392\u9664\u548c \\(i\\) \u76f8\u5173\u7684\u4e0d\u5408\u6cd5\u7684\u65b9\u6848\u3002 \u56e0\u4e3a\u7b2c \\(i\\) \u5806\u4e0d\u80fd\u53d6\u5230 \\(0\\) \uff0c\u6240\u4ee5\u65b9\u6848\u6570\u51cf\u53bb \\(f_{i-1}\\) \u3002 \u5982\u679c\u524d \\(i - 2\\) \u5806\u7684\u5f02\u6216\u548c\u4e3a \\(0\\) \uff0c \u90a3\u4e48 \u4f1a \u5bfc\u81f4\u7b2c \\(i - 1\\) \u5806\u5c31\u8981\u548c\u7b2c \\(i\\) \u5806\u53d6\u5230\u540c\u4e00\u4e2a\u6570\u91cf\uff0c\u4e5f\u662f\u4e0d\u5408\u6cd5\u7684\u3002 \u8fd8\u8981\u4ece\u65b9\u6848\u6570\u91cc\u51cf\u53bb\u8fd9\u79cd\u53ef\u80fd\u7684\u65b9\u6848\u6570 \\(tmp\\) \uff0c \u6c42 \\(tmp\\) \u65f6\uff0c\u679a\u4e3e\u5f02\u6216\u548c\u4e3a \\(0\\) \u7684 \\(i-2\\) \u5806\u5206\u522b\u662f\u54ea\u51e0\u4e2a\uff08 \\(\\text{C}_{i-1}^{i-2}\\) \uff09\uff0c\u4e58\u4e0a\u5bf9\u5e94\u7684\u65b9\u6848\u6570 \\(f_{i-2}\\) \uff0c \u7136\u540e\u518d\u4e58\u4e0a\u7b2c \\(i - 1\\) \u548c\u7b2c \\(i\\) \u5806\u77f3\u5b50\u80fd\u53d6\u5230\u7684\u77f3\u5b50\u4e2a\u6570\u7684\u6240\u6709 \\(2^n-(i-2)\\) \u79cd\u53ef\u80fd\u5373\u53ef\u3002 \\[tmp = f_{i - 2} \\times \\text{C}^{i-2}_{i-1}\\times(2^n - 1 - (i - 2))\\] \\[\\Rightarrow f_{i-2} \\times (i - 1) \\times(2^n-i+1)\\] \u6240\u4ee5\u5f97\u5230\u65b9\u7a0b\uff1a \\[f_{i} = p_{i-1} - f_{i-1} - f_{i-2} \\times (i - 1) \\times(2^n-i+1)\\] Code \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 #include <cstring> #include <iostream> #include <algorithm> using namespace std ; using i64 = long long ; const i64 si = 1e7 + 10 ; constexpr i64 mod = 1e9 + 7 ; i64 qpow ( i64 a , i64 b ) { i64 ans = 1 % mod ; for (; b ; b >>= 1 ) { if ( b & 1 ) ans = ans * a % mod ; a = a * a % mod ; } return ans % mod ; } i64 n , cnt , power ; i64 p [ si ], f [ si ]; int main () { #ifdef ONLINE_JUDGE freopen ( \"yui.in\" , \"r\" , stdin ); freopen ( \"yui.out\" , \"w\" , stdout ); #endif cin >> n ; f [ 1 ] = f [ 2 ] = 0 , p [ 0 ] = 1 ; cnt = power = qpow ( 2 , n ) - 1 ; for ( int i = 1 ; i <= n ; ++ i ) p [ i ] = p [ i - 1 ] * cnt % mod , cnt -= 1 ; for ( int i = 3 ; i <= n ; ++ i ) f [ i ] = ( p [ i - 1 ] - f [ i - 1 ] - ( i - 1 ) * ( power - ( i - 2 )) % mod * f [ i - 2 ] % mod ) % mod ; cout << ((( p [ n ] - f [ n ]) % mod ) + mod ) % mod << endl ; return 0 ; }","title":"20220413B"},{"location":"%E6%80%9D%E8%80%83/20220413B/#b","text":"Apr 13 rd 2022","title":"B \u7ec4\u6a21\u62df\u8d5b\u90e8\u5206\u9898\u89e3"},{"location":"%E6%80%9D%E8%80%83/20220413B/#t3","text":"","title":"T3 \u56e2\u4e0d\u8fc7"},{"location":"%E6%80%9D%E8%80%83/20220413B/#description","text":"\\(n \\le 10^7\\)","title":"Description"},{"location":"%E6%80%9D%E8%80%83/20220413B/#analysis","text":"\u4e00\u5b9a\u8981\u6ce8\u610f\u5230\u4e00\u4e2a\u6761\u4ef6\uff1a\u201c\u77f3\u5b50\u6570\u4e92\u4e0d\u76f8\u540c\u201d\uff0c\u6211\u88ab\u8fd9\u4e2a\u5751\u4e86/kk\u3002 \u9996\u5148\u53ef\u4ee5\u8003\u8651\u7b80\u5355\u4e00\u70b9\u7684\u60c5\u51b5\u3002 \u8bbe \\(dp_{i,j}\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u5806\u77f3\u5b50\uff0c\u5f53\u524d\u5f02\u6216\u548c\u4e3a \\(j\\) \u65f6\u5148\u624b\u5fc5\u80dc\u7684\u65b9\u6848\u6570\u3002 \u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5f97\u5230\u8f6c\u79fb\u65b9\u7a0b\uff0c\u7b54\u6848\u4e3a \\(\\sum dp_{n,i},i\\not=0\\) \uff0c\u590d\u6742\u5ea6 \\(\\text{O}(n\\times 2^n \\times 2^n)\\) \u3002 \u671f\u671b\u5f97\u5206\u9ad8\u4e8e \\(20\\) \u4f4e\u4e8e \\(40\\) \u3002 \u53ef\u4ee5\u5bf9\u8fd9\u4e2a DP \u8fdb\u884c\u72b6\u6001\u8f6c\u79fb\u4e0a\u7684\u4f18\u5316\uff0c\u4f46\u662f\u5c31\u7b97\u4f18\u5316\u4e4b\u540e\u4e5f\u8fd8\u662f\u4f1a\u53d1\u73b0\uff0c\u590d\u6742\u5ea6\u65e0\u6cd5\u63a5\u53d7\u3002 \u53d1\u73b0\u95ee\u9898\u51fa\u5728 \\(j\\) \u4e0a\uff0c\u56e0\u4e3a\u5148\u624b\u5fc5\u80dc\u7b49\u4ef7\u4e8e\u5f02\u6216\u548c\u4e0d\u4e3a \\(0\\) \uff0c\u72b6\u6001\u6570\u660e\u663e\u591a\u4e86\u5f88\u591a\u3002 \u800c\u603b\u65b9\u6848\u6570\u51cf\u53bb\u5148\u624b\u5fc5\u8d25\u7684\u65b9\u6848\u6570\u4ecd\u7136\u7b49\u4e8e\u5148\u624b\u5fc5\u80dc\uff0c\u6240\u4ee5\u6c42\u51fa\u5148\u624b\u5fc5\u8d25\u7684\u65b9\u6848\u4e4b\u540e\u7b49\u4ef7\u4e8e\u6c42\u51fa\u4e86\u5148\u624b\u5fc5\u80dc\u7684\u65b9\u6848\u3002 \u5148\u624b\u5fc5\u8d25\u7684\u72b6\u6001\u6570\u76f8\u8f83\u4e8e\u5148\u624b\u5fc5\u80dc\uff0c\u5c11\u4e86\u6700\u540e \\(j\\) \u7684\u8fd9\u4e00\u7ef4\uff0c\u5bf9\u5e94\u5230\u672c\u9898\u5c31\u662f\u5c11\u4e86 \\(2^n\\) \u7ea7\u522b\u4e2a\u72b6\u6001\u3002 \u6240\u4ee5\u72b6\u6001\u6570\u5c31\u53d8\u6210\u4e86 \\(\\text{O}(n)\\) \u4e2a\uff0c\u53ef\u4ee5\u8003\u8651\u8fdb\u884c \\(\\text{O}(n)\\) \u7684\u9012\u63a8\u3002 \u8bbe \\(f_i\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u5806\u77f3\u5b50\uff0c\u5148\u624b\u5fc5\u8d25\u7684\u65b9\u6848\u6570\u3002 \\(p_i\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u5806\u77f3\u5b50\u7684\u603b\u65b9\u6848\u6570\u3002 \u56e0\u4e3a\u77f3\u5b50\u7684\u6570\u91cf\u4e0d\u80fd\u76f8\u540c\uff0c\u6240\u4ee5\u5f97\u5230 \\(p\\) \u7684\u8ba1\u7b97\u5f0f\uff1a \\[p_i = \\prod\\limits_{j = 1}^i((2^n-1)-(j - 1)) = \\prod\\limits_{j = 1}^i(2^n-j)\\] \u5feb\u901f\u5e42 \\(\\text{O}(\\log n)\\) \u6c42\u51fa \\(2^n\\) \u4e4b\u540e\u53ef\u4ee5\u7ebf\u6027\u9012\u63a8\u3002 \u7136\u540e\u8003\u8651\u6c42 \\(f_{i}\\) \u3002 \\(f_i\\) \u7b49\u4ef7\u4e8e\u8fd9\u6837\u4e00\u4e2a\u72b6\u6001\uff1a\u8003\u8651\u524d \\(i\\) \u5806\u77f3\u5b50\uff0c\u5f02\u6216\u548c\u4e3a \\(0\\) \u7684\u6240\u6709\u65b9\u6848\u3002 \u53ef\u4ee5\u5229\u7528 DP \u79cd \u201c\u524d\u4e00\u6bb5\u72b6\u6001 + \u540e\u4e00\u6bb5\u8d21\u732e = \u5927\u6bb5\u72b6\u6001\u201d \u7684\u601d\u60f3\u6765\u601d\u8003\u8f6c\u79fb\u65b9\u7a0b\u3002 \u9996\u5148\u94a6\u5b9a\u524d \\(i - 1\\) \u5806\u7684\u5f02\u6216\u548c\u4e3a \\(0\\) \uff0c\u65b9\u6848\u6570\u52a0\u4e0a \\(p_{i-1}\\) \uff0c\u63a5\u4e0b\u6765\u8981\u505a\u7684\u5c31\u662f\u6392\u9664\u548c \\(i\\) \u76f8\u5173\u7684\u4e0d\u5408\u6cd5\u7684\u65b9\u6848\u3002 \u56e0\u4e3a\u7b2c \\(i\\) \u5806\u4e0d\u80fd\u53d6\u5230 \\(0\\) \uff0c\u6240\u4ee5\u65b9\u6848\u6570\u51cf\u53bb \\(f_{i-1}\\) \u3002 \u5982\u679c\u524d \\(i - 2\\) \u5806\u7684\u5f02\u6216\u548c\u4e3a \\(0\\) \uff0c \u90a3\u4e48 \u4f1a \u5bfc\u81f4\u7b2c \\(i - 1\\) \u5806\u5c31\u8981\u548c\u7b2c \\(i\\) \u5806\u53d6\u5230\u540c\u4e00\u4e2a\u6570\u91cf\uff0c\u4e5f\u662f\u4e0d\u5408\u6cd5\u7684\u3002 \u8fd8\u8981\u4ece\u65b9\u6848\u6570\u91cc\u51cf\u53bb\u8fd9\u79cd\u53ef\u80fd\u7684\u65b9\u6848\u6570 \\(tmp\\) \uff0c \u6c42 \\(tmp\\) \u65f6\uff0c\u679a\u4e3e\u5f02\u6216\u548c\u4e3a \\(0\\) \u7684 \\(i-2\\) \u5806\u5206\u522b\u662f\u54ea\u51e0\u4e2a\uff08 \\(\\text{C}_{i-1}^{i-2}\\) \uff09\uff0c\u4e58\u4e0a\u5bf9\u5e94\u7684\u65b9\u6848\u6570 \\(f_{i-2}\\) \uff0c \u7136\u540e\u518d\u4e58\u4e0a\u7b2c \\(i - 1\\) \u548c\u7b2c \\(i\\) \u5806\u77f3\u5b50\u80fd\u53d6\u5230\u7684\u77f3\u5b50\u4e2a\u6570\u7684\u6240\u6709 \\(2^n-(i-2)\\) \u79cd\u53ef\u80fd\u5373\u53ef\u3002 \\[tmp = f_{i - 2} \\times \\text{C}^{i-2}_{i-1}\\times(2^n - 1 - (i - 2))\\] \\[\\Rightarrow f_{i-2} \\times (i - 1) \\times(2^n-i+1)\\] \u6240\u4ee5\u5f97\u5230\u65b9\u7a0b\uff1a \\[f_{i} = p_{i-1} - f_{i-1} - f_{i-2} \\times (i - 1) \\times(2^n-i+1)\\]","title":"Analysis"},{"location":"%E6%80%9D%E8%80%83/20220413B/#code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 #include <cstring> #include <iostream> #include <algorithm> using namespace std ; using i64 = long long ; const i64 si = 1e7 + 10 ; constexpr i64 mod = 1e9 + 7 ; i64 qpow ( i64 a , i64 b ) { i64 ans = 1 % mod ; for (; b ; b >>= 1 ) { if ( b & 1 ) ans = ans * a % mod ; a = a * a % mod ; } return ans % mod ; } i64 n , cnt , power ; i64 p [ si ], f [ si ]; int main () { #ifdef ONLINE_JUDGE freopen ( \"yui.in\" , \"r\" , stdin ); freopen ( \"yui.out\" , \"w\" , stdout ); #endif cin >> n ; f [ 1 ] = f [ 2 ] = 0 , p [ 0 ] = 1 ; cnt = power = qpow ( 2 , n ) - 1 ; for ( int i = 1 ; i <= n ; ++ i ) p [ i ] = p [ i - 1 ] * cnt % mod , cnt -= 1 ; for ( int i = 3 ; i <= n ; ++ i ) f [ i ] = ( p [ i - 1 ] - f [ i - 1 ] - ( i - 1 ) * ( power - ( i - 2 )) % mod * f [ i - 2 ] % mod ) % mod ; cout << ((( p [ n ] - f [ n ]) % mod ) + mod ) % mod << endl ; return 0 ; }","title":"Code"},{"location":"%E6%80%9D%E8%80%83/%E4%B8%89%E6%9C%88Tricks/","text":"\u4e09\u6708 Tricks \u6574\u7406 \u00b6 [ZJOI2007] \u6700\u5927\u534a\u8054\u901a\u5b50\u56fe \u00b6 \u7ed9\u5b9a\u4e00\u5f20\u6709\u5411\u56fe \\(G\\) \u3002 \u79f0\u4e00\u4e2a\u5bfc\u51fa\u5b50\u56fe\u662f\u201c\u534a\u8fde\u901a\u7684\u201d\uff0c\u5f53\u4e14\u4ec5\u5f53\u5bf9\u4e8e\u5bfc\u51fa\u5b50\u56fe\u5f53\u4e2d\u7684\u4efb\u610f\u70b9\u5bf9 \\((u,v)\\) \u3002 \u90fd\u6709 \\(u\\) \u53ef\u4ee5\u5230\u8fbe \\(v\\) \u6216\u8005 \\(v\\) \u53ef\u4ee5\u5230\u8fbe \\(u\\) \u3002 \u6c42 \\(G\\) \u7684\u6700\u5927\u534a\u8fde\u901a\u5b50\u56fe\u7684\u5927\u5c0f\uff0c\u548c\u4e2a\u6570\u3002 \u9996\u5148\u53d1\u73b0\u5f3a\u8fde\u901a\u5206\u91cf\u5fc5\u7136\u662f\u4e00\u4e2a\u534a\u8054\u901a\u5b50\u56fe\u3002 \u6240\u4ee5\u5148\u7f29\u70b9\u5f97\u5230\u4e00\u4e2a DAG\u3002 \u53d1\u73b0\u6700\u5927\u534a\u8054\u901a\u5b50\u56fe\u5fc5\u7136\u662f DAG \u4e0a\u7684\u4e00\u6761\u6700\u957f\u94fe\u3002 \u5e76\u4e14\u8fd9\u4e2a\u6700\u957f\u94fe\u4e0d\u80fd\u5206\u5c94\u3002 \u90a3\u4e48\u5728 DAG \u4e0a\u8fdb\u884c\u9012\u63a8\u6c42\u6700\u957f\u8def\u5373\u53ef\u3002 \u56e0\u4e3a Tarjan \u7f29\u70b9\u4f1a\u5f97\u5230\u9006\u62d3\u6251\u5e8f\uff0c\u6240\u4ee5\u4e0d\u7528\u62d3\u6251\u6392\u5e8f\u4e86\uff0c\u5012\u8fc7\u6765\u5c31\u884c\u3002 \u9898\u76ee\u8981\u6c42\u8bb0\u5f55\u65b9\u6848\uff0c\u90a3\u4e48\u5c31\u5728 \\(f_i\\) \u8fdb\u884c\u8f6c\u79fb\u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e2a \\(g_i\\) \u8868\u793a \\(f_i\\) \u8fd9\u4e2a\u72b6\u6001\u5bf9\u5e94\u7684\u65b9\u6848\u3002 \u9898\u76ee\u53ef\u80fd\u6709\u91cd\u8fb9\uff0c\u6240\u4ee5\u9700\u8981\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u8282\u70b9\u4e0a\u4e00\u6b21\u662f\u4ece\u54ea\u91cc\u8f6c\u79fb\u7684\uff0c\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u3002 \u521d\u59cb\u5316 \\(f_i=size_{scc_{i}},g_i=1\\) \u3002 \u6838\u5fc3\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 for ( register int u = cnt ; u >= 1 ; -- u ) f [ u ] = scc [ u ]. size (), g [ u ] = 1 ; for ( register int u = cnt ; u >= 1 ; -- u ){ for ( register int i = ee [ u ]. head ; i ; i = ee [ i ]. Next ){ int v = ee [ i ]. ver ; if ( las [ v ] == u ) continue ; las [ v ] = u ; if ( f [ u ] + ( int ) scc [ v ]. size () > f [ v ]) f [ v ] = f [ u ] + ( int ) scc [ v ]. size (), g [ v ] = g [ u ]; else if ( f [ u ] + ( int ) scc [ v ]. size () == f [ v ]) g [ v ] = ( g [ v ] + g [ u ]) % mod ; } } int res1 = 0 , res2 = 0 ; for ( register int i = 1 ; i <= cnt ; ++ i ){ if ( f [ i ] > res1 ) res1 = f [ i ], res2 = g [ i ]; else if ( f [ i ] == res1 ) res2 = ( res2 + g [ i ]) % mod ; } return printf ( \"%d \\n %d \\n \" , res1 , res2 ), 0 ; Trick: Tarjan \u7f29\u5b8c\u70b9\u5f97\u5230\u7684\u5e8f\u5217\u662f\u9006\u62d3\u6251\u5e8f\u3002 Trick2: DAG \u4e0a DP \u4e00\u822c\u662f\u5f80\u524d\u63a8\u800c\u4e0d\u662f\u5f80\u540e\u627e\u524d\u9a71\u7684\u65b9\u5f0f\u3002 Trick3: DAG \u4e0a DP \u6709\u53ef\u80fd\u9700\u8981\u8003\u8651\u91cd\u8fb9\u3002 \u8fd8\u6709\uff0c\u5982\u679c\u975e\u8981\u5728 SCC \u540e\u5229\u7528\u539f\u56fe\u5efa\u8fb9\uff0c\u4e00\u5b9a\u8981\u624b\u5199\u4e00\u4e2a for \u3002 \u5982\u679c\u662f\u8fd9\u6837\u5199\u53ea\u4f1a\u6e05\u7a7a \\(e_0\\) 1 2 3 4 5 6 struct Edge { int head , ver , Next ; inline void Init (){ head = -1 ; } } e [ si_m ] e -> Init (); \u4e8c\u7ef4\u7684 std::bitset<> \u4e4b\u7c7b\u7684 STL \u53ef\u4ee5\u8fd9\u4e48\u5199\uff08\u4f46\u662f\u5e38\u6570\u5927\uff09\uff0c\u662f\u56e0\u4e3a\u5b83\u91cd\u8f7d\u4e86 [] \uff0c\u672c\u8d28\u4e0a\u5b83\u662f\u4e00\u4e2a \u7c7b\u4f3c \u8fd9\u6837\u7684\u4e1c\u897f\uff1a 1 2 3 4 5 struct Bitset { bool bb [ si ]; inline bool * operator [] ( int idx ){ return & bb [ idx ]; } } b ; // \u4e71\u5199\u7684\uff0c\u7406\u89e3\u5c31\u884c \u4e5f\u5c31\u662f\u8bf4\u5b83\u5e76\u4e0d\u662f\u4e00\u4e2a bitset \u6570\u7ec4\uff0c\u4ecd\u7136\u53ea\u662f\u4e00\u4e2a bitset\u3002 1 Tag : \u5f3a\u8fde\u901a\u5206\u91cf / DAG\u4e0a\u7684DP / \u6c42\u65b9\u6848 Acwing361 \u89c2\u5149\u5976\u725b \u00b6 \u7ed9\u5b9a\u4e00\u5f20\u56fe\uff0c\u6c42\u56fe\u4e0a\u7684\u4e00\u4e2a\u73af\u4f7f\u5f97 \u201c\u73af\u4e0a\u5404\u70b9\u7684\u6743\u503c\u4e4b\u548c\u201d\u9664\u4ee5\u201c\u73af\u4e0a\u5404\u8fb9\u7684\u6743\u503c\u4e4b\u548c\u201d\u6700\u5927\u3002 01\u5206\u6570\u89c4\u5212\uff0c\u628a\u70b9\u6743\u79fb\u52a8\u5230\u8fb9\u6743\u4e0a\uff0c \u56e0\u4e3a\u6c42\u7684\u662f \\(\\max\\{\\dfrac{\\sum f_i}{\\sum t_i}\\}\\) \u3002 \u4e8c\u5206\u7b54\u6848\u4e4b\u540e\u53d8\u6210\u5224\u5b9a \\(mid\\) \u662f\u5426 \\(\\le \\dfrac{\\sum f_i}{\\sum t_i}\\) \u3002 \u4e5f\u5c31\u662f\u5224\u65ad\u73af\u4e0a \\(\\sum (mid\\times t_i -f_i)\\) \u662f\u5426 \\(\\le 0\\) \u3002 \u6240\u4ee5\u628a\u8fb9\u53d8\u6210 \\(t\\times mid-f\\) \u7684\u5f62\u5f0f\u8dd1 SPFA \u6700\u77ed\u8def\u3002 \u5982\u679c\u6709\u8d1f\u73af\u5219 \\(mid\\) \u4e0d\u53ef\u884c\uff0c\u5982\u679c\u6b63\u5e38\u6c42\u51fa\u6700\u77ed\u8def\uff0c\u8bc1\u660e \\(mid\\) \u53ef\u884c\u3002 1 Tag : SPFA / 01 \u5206\u6570\u89c4\u5212 Acwing1165 \u5355\u8bcd\u73af \u00b6 01\u5206\u6570\u89c4\u5212\uff0c\u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u524d\u4e24\u4e2a\u5b57\u6bcd\u548c\u540e\u4e24\u4e2a\u5b57\u6bcd\u8fde\u8fb9\uff0c\u5355\u8bcd\u957f\u5ea6\u770b\u4f5c\u8fb9\u6743\u3002 \u8fd9\u6837\u5b50\u70b9\u7684\u6570\u91cf\u5c31\u964d\u4e0b\u6765\u4e86\u3002 \u8981\u6c42\u7684\u662f \\(\\max\\{\\dfrac{\\sum len}{n}\\}\\) \uff0c \\(n\\) \u662f\u9009\u7684\u5355\u8bcd\u7684\u4e2a\u6570\u3002 \u4e8c\u5206\u7b54\u6848\u540e\u8f6c\u5316\u4e3a\u6c42 \\(mid\\) \u662f\u5426 \\(\\le \\dfrac{\\sum len}{n}\\) \u3002 \u4e5f\u5c31\u662f \\(\\sum len_i- n\\times mid=\\sum(len_i-mid)\\) \u662f\u5426 \\(\\ge 0\\) \u6240\u4ee5\u628a\u8fb9\u6743\u5316\u6210 \\(len-mid\\) \u7684\u5f62\u5f0f\u8dd1 SPFA \u6700\u957f\u8def\u3002 \u5224\u65ad\u6709\u6ca1\u6709\u6b63\u73af\u5373\u53ef\u5224\u5b9a \\(mid\\) \u7684\u53ef\u884c\u6027\u3002 Trick: 01 \u5206\u6570\u89c4\u5212\u7684\u65f6\u5019\u5982\u679c\u7ed3\u5408\u4e86\u56fe\u8bba\uff0c\u53ef\u4ee5\u6839\u636e\u5316\u51fa\u6765\u7684\u548c\u5f0f\u6539\u53d8\u8fb9\u6743\uff08\u5728 SPFA \u91cc\u9762\u6539\u5c31\u884c\uff0c\u4e0d\u7528\u91cd\u65b0\u5efa\u56fe\uff09\u3002 1 Tag : SPFA / 01 \u5206\u6570\u89c4\u5212 Acwing350 \u5de1\u903b \u00b6 \u8003\u8651 \\(K=1\\) \u7684\u60c5\u51b5\u3002 \u53d1\u73b0\u53ea\u9700\u8981\u5728\u76f4\u5f84\u7684\u4e24\u4e2a\u7aef\u70b9\u4e4b\u95f4\u8fde\u63a5\u4e00\u6761\u8fb9\u3002 \u7136\u540e\u8fd9\u6761\u76f4\u5f84\u5c31\u53ef\u4ee5\u53ea\u8d70\u4e00\u6b21\u3002 \u5fc5\u7136\u662f\u6700\u4f18\u7684\u3002 \u8003\u8651 \\(K=2\\) \u7684\u60c5\u51b5\u3002 \u4e3a\u4e86\u4e0d\u91cd\u590d\uff0c\u4e5f\u5c31\u662f\u4f7f\u5f97\u88ab\u51cf\u5c11\u7684\u8fb9\u5c3d\u91cf\u7684\u591a\u3002 \u5728 \u201c\u629b\u6389\u201d \u539f\u6765\u9009\u4e2d\u7684\u76f4\u5f84\u7684\u6811\u4e0a\u518d\u6c42\u4e00\u6b21\u76f4\u5f84\u3002 \u6ce8\u610f\u8fd9\u91cc\u4e0d\u662f\u771f\u7684\u53bb\u9664\uff0c\u800c\u662f\u8bf4\u4f7f\u5f97\u8fd9\u6761\u76f4\u5f84\u4e0d\u4f1a\u88ab\u9009\u3002 \u6240\u4ee5\u4e00\u4e2a Tricky \u7684\u505a\u6cd5\u5c31\u662f\u628a\u9009\u4e2d\u7684\u76f4\u5f84\u4e0a\u7684\u6240\u6709\u8fb9\u5168\u90e8\u8bbe\u7f6e\u6210 \\(-1\\) \u3002 \u4f46\u662f\u6ce8\u610f\uff0c\u5982\u679c\u8bbe\u7f6e\u6210 \\(-1\\) \uff0c\u5c31\u4e0d\u80fd\u7528 2-BFS \u6c42\u76f4\u5f84\u4e86\uff0c\u5c31\u53ea\u80fd DP\u3002 \u4f46\u662f\u4e3a\u4e86\u6c42\u65b9\u6848\u65b9\u4fbf\uff0c\u7b2c\u4e00\u6b21\u6c42\u76f4\u5f84\u8981\u7528 2-BFS \\(\\text{Trick:}\\) \u6c42\u76f4\u5f84\u7684\u65f6\u5019\u5982\u679c\u6709\u8d1f\u8fb9\u6743\u4e0d\u80fd\u4f7f\u7528 2-BFS\u3002 \u4f46\u662f 2-BFS \u76f8\u5bf9\u4e8e dp \u66f4\u5bb9\u6613\u6c42\u65b9\u6848\u3002 1 Tag : \u6811\u7684\u76f4\u5f84 / \u65b9\u6848 Acwing354 \u5929\u5929\u7231\u8dd1\u6b65 \u00b6 \u8fd9\u9898\u548c\u96e8\u5929\u7684\u5c3e\u5df4\u5f88\u50cf\u3002 \u90fd\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u9897\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7136\u540e\u7ebf\u6bb5\u6811\u5408\u5e76\u3002 \u4e0d\u8fc7\u8fd9\u9898\u7684\u7b54\u6848\u4e0d\u662f\u6700\u503c\uff0c\u6709\u533a\u95f4\u53ef\u51cf\u6027\u3002 \u6240\u4ee5\u53ef\u4ee5\u4e0d\u7528\u7ebf\u6bb5\u6811\uff0c\u76f4\u63a5\u5728\u6bcf\u4e2a\u8282\u70b9\u8bb0\u5f55\u76f8\u5173\u7684\u64cd\u4f5c\u3002 \u7136\u540e dfs \u4e00\u6b21\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u9012\u5f52\u8fdb\u5b50\u6811\u5b8c\u4e4b\u540e\u7684\u7b54\u6848\u51cf\u53bb\u9012\u5f52\u4e4b\u524d\u7684\u5c31\u662f\u8fd9\u4e2a\u8282\u70b9\u7684\u7b54\u6848\u3002 1 Tag : \u6811\u4e0a\u5dee\u5206 Acwing369 \u5317\u5927ACM\u961f\u7684\u8fdc\u8db3 \u00b6 \u7ed9\u5b9a\u4e00\u5f20\u6709\u5411\u56fe\uff0c\u6709\u4e24\u6b21\u4e58\u8f66\u7684\u673a\u4f1a\uff0c\u53ef\u4ee5\u518d\u4efb\u610f\u5730\u65b9\u4e0a\u4e0b\u8f66\uff0c\u4f46\u662f\u4e0b\u8f66\u4e86\u5c31\u7528\u4e86\u4e00\u6b21\u673a\u4f1a\u3002 \u6bcf\u6b21\u8fde\u7eed\u4e58\u8f66\u7684\u4e3e\u4f8b\u4e0d\u80fd\u8d85\u8fc7 \\(q\\) \u3002 \u6c42\u4ece \\(s \\to t\\) \u8981\u7ecf\u8fc7\u7684 \u201c\u5371\u9669\u8def\u6bb5\u201d \u7684\u957f\u5ea6\u6700\u5c0f\u662f\u591a\u5c11\u3002 \u201c\u5371\u9669\u8def\u6bb5\u201d\u5b9a\u4e49\u4e3a \\(s\\to t\\) \u7684\u5fc5\u7ecf\u8fb9\u3002 \\(s \\to t\\) \u7684\u5fc5\u7ecf\u8fb9\u7684\u610f\u601d\u5c31\u662f\uff0c\u4efb\u610f\u4e00\u6761\u4ece \\(s\\to t\\) \u7684\u8def\u5f84\uff0c\u4ed6\u4eec\u90fd\u5305\u542b\u7684\u8fb9\u3002 \u9996\u5148\u8003\u8651\u4e00\u4e2a\u6c42\u51fa\u6709\u5411\u56fe\u7684\u6865\uff08\u5fc5\u7ecf\u8fb9\uff09\u7684\u7b97\u6cd5\u3002 \u53ef\u4ee5\u4f7f\u7528\u652f\u914d\u6811\u5148\u6c42\u51fa\u5fc5\u7ecf\u70b9\u96c6\u7136\u540e\u505a\u3002 \u4e0d\u8fc7\u6709\u4e00\u79cd\u6bd4\u8f83\u597d\u5199\u7684 \\(\\text{O}(n)\\) DP \u505a\u6cd5\u3002 \u8bbe \\(dp_s[i]\\) \u8868\u793a\u4ece \\(s\\) \u5230 \\(i\\) \u7684\u8def\u5f84\u6761\u6570\u3002 \\(dp_t[i]\\) \u8868\u793a\u53cd\u56fe\u4e0a\u4ece \\(t\\) \u5230 \\(i\\) \u7684\u8def\u5f84\u6761\u6570\u3002 \u7ecf\u8fc7\u63a8\u5bfc\u4e0d\u96be\u53d1\u73b0\u4e24\u4e2a\u5145\u8981\u6761\u4ef6\uff1a \u4e00\u4e2a\u70b9 \\(x\\) \u662f\u5fc5\u7ecf\u70b9\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(dp_s[i] \\times dp_t[i] = dp_s[t]\\) \u3002 \u4e00\u6761\u8fb9 \\((u\\to v)\\) \u662f\u5fc5\u7ecf\u8fb9\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(dp_s[u] \\times dp_t[v] = dp_s[t]\\) \u3002 \u4f46\u662f \\(dp_s,dp_t\\) \u662f\u6307\u6570\u7ea7\u522b\u7684\uff0c __uint128_t \u90fd\u4e0d\u4e00\u5b9a\u53ef\u4ee5\u5e94\u4ed8\u3002 \u6240\u4ee5\u8003\u8651\u7c7b\u4f3c\u54c8\u5e0c\u7684\u601d\u60f3\uff0c\u7ed9\u4ed6\u4eec\u53d6\u6a21\u3002 \u7528\u7c7b\u4f3c\u53cc\u54c8\u5e0c\u7684\u601d\u60f3\uff0c\u540c\u65f6\u8bb0\u5f55\u4e24\u79cd\u6a21\u6570\u610f\u4e49\u4e0b\u7684\u503c\u3002 \u7136\u540e\u4e24\u4e2a\u503c\u76f8\u7b49\uff0c\u5f53\u4e14\u4ec5\u5f53\u4ed6\u4eec\u5728\u4e24\u79cd\u610f\u4e49\u4e0b\u7684\u503c\u90fd\u4e00\u6837\u3002 \u4e00\u822c\u53d6 \\(mod1=1e9+7,mod2=1e9+9\\) \u3002 \u7136\u540e\u8003\u8651\u6c42\u51fa \\(s \\to t\\) \u7684\u6700\u77ed\u8def\u3002 \u660e\u663e\u7684\uff0c\u8fd9\u4e9b\u5fc5\u7ecf\u8fb9\u80af\u5b9a\u5728\u4efb\u610f\u7684\u4e00\u6761\u6700\u77ed\u8def\u4e0a\u90fd\u51fa\u73b0\u4e86\uff0c\u6240\u4ee5\u968f\u4fbf\u9009\u54ea\u4e00\u6761\u90fd\u4e00\u6837\u3002 \u7136\u540e\u8003\u8651\u5982\u4f55\u7edf\u8ba1\u7b54\u6848\u3002 \u7ecf\u8fc7\u4e25\u8c28\u7684\u4e3e\u4f8b\uff0c\u753b\u56fe\u8bba\u8bc1\u53ef\u4ee5\u53d1\u73b0\uff0c\u76f4\u63a5\u7edf\u8ba1\u7684\u8bdd\u975e\u5e38\u5bb9\u6613\u7b97\u91cd\u590d\u3002 \u610f\u601d\u662f\u4e24\u4e2a\u8fde\u7eed\u6bb5\u91cd\u5408\u7684\u65f6\u5019\u4f1a\u975e\u5e38\u96be\u7b97\uff0c\u8981\u5206\u7279\u522b\u591a\u7c7b\u8ba8\u8bba\u3002 \u6240\u4ee5\u8003\u8651\u4e00\u4e2a\u975e\u5e38\u6709\u610f\u601d\u7684 Trick \uff1a \u4ee5\u6bcf\u4e00\u4e2a\u70b9\u4e3a \u201c\u5206\u5272\u70b9\u201d\uff0c\u5206\u522b DP\uff0c\u8ba1\u7b97\u4e24\u8fb9\u7684\u7b54\u6848 \\(ds,dt\\) \uff0c\u91cd\u5408\u7684\u95ee\u9898\u5c31\u5f97\u5230\u4e86\u89e3\u51b3\u3002 \u7b49\u4ef7\u4e8e\u628a\u95ee\u9898\u8f6c\u5316\u6210\u4e86\u6c42\u53ea\u8986\u76d6\u4e00\u6b21\uff0c\u6865\u8fb9\u603b\u957f\u5ea6\u51cf\u53bb\u53ef\u4ee5\u8986\u76d6\u7684\u6700\u957f\u7684\u6865\u8fb9\u7684\u957f\u5ea6\u3002 \u7136\u540e\u6bcf\u4e00\u4e2a\u70b9\u7684\u7b54\u6848\u5c31\u662f \\(ds_i + dt_i\\) \uff0c\u679a\u4e3e\u6240\u6709\u70b9\u66f4\u65b0\u5373\u53ef\uff0c\u8fd9\u4e2a Trick \u5728 Acwing341 \u6700\u4f18\u8d38\u6613 \u90a3\u4e00\u9898\u4e5f\u7528\u5230\u4e86\u3002 \u672c\u9898\u7ed9\u7684\u4e0d\u662f DAG\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u5148\u62d3\u6251\u6392\u5e8f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 #include <queue> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int N = 1e5 + 10 ; const int M = 2e5 + 10 ; const int mod = 1e9 + 7 ; // \u672c\u9898\u4e0d\u9700\u8981\u53cc\u53d6\u6a21 int ver [ M * 2 ], edge [ M * 2 ], nxt [ M * 2 ], head [ N ], tot ; int f [ 2 ][ N ], deg [ 2 ][ N ], dis [ N ], pre [ N ], n , m , s , t , Q ; bool bri [ M * 2 ]; int a [ N ], b [ N ], cnt ; int sum [ N ], sum_bri [ N ], ds [ N ], dt [ N ], ds_min [ N ]; int occur [ N ], first_occur [ N ]; queue < int > q ; void add ( int u , int v , int w ) { ver [ ++ tot ] = v , edge [ tot ] = w , nxt [ tot ] = head [ u ], head [ u ] = tot ; } void topsort ( int s , int bit ) { if ( bit == 0 ) { memset ( dis , 0x3f , sizeof ( dis )); dis [ s ] = 0 ; } f [ bit ][ s ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) if ( deg [ bit ][ i ] == 0 ) q . push ( i ); while ( ! q . empty ()) { int u = q . front (); q . pop (); for ( int i = head [ u ]; i ; i = nxt [ i ]) if (( i & 1 ) == bit ) { int v = ver [ i ]; f [ bit ][ v ] = ( f [ bit ][ v ] + f [ bit ][ u ]) % mod ; if ( bit == 0 && dis [ v ] > dis [ u ] + edge [ i ]) { dis [ v ] = dis [ u ] + edge [ i ]; pre [ v ] = i ; } if ( -- deg [ bit ][ v ] == 0 ) q . push ( v ); } } } int main () { int T ; cin >> T ; while ( T -- ) { memset ( head , 0 , sizeof ( head )), memset ( deg , 0 , sizeof ( deg )); memset ( f , 0 , sizeof ( f )), tot = 1 ; cnt = 0 ; memset ( bri , 0 , sizeof ( bri )), memset ( occur , 0 , sizeof ( occur )); cin >> n >> m >> s >> t >> Q ; s ++ ; t ++ ; for ( int i = 1 ; i <= m ; i ++ ) { int u , v , w ; cin >> u >> v >> w ; u ++ , v ++ ; add ( u , v , w ), add ( v , u , w ); deg [ 0 ][ v ] ++ , deg [ 1 ][ u ] ++ ; } topsort ( s , 0 ); if ( f [ 0 ][ t ] == 0 ) { puts ( \"-1\" ); continue ; } topsort ( t , 1 ); for ( int i = 2 ; i <= tot ; i += 2 ) { int u = ver [ i ^ 1 ], v = ver [ i ]; if (( long long ) f [ 0 ][ u ] * f [ 1 ][ v ] % mod == f [ 0 ][ t ]) { bri [ i ] = true ; } } for ( int u = 1 ; u <= n ; u ++ ) { for ( int i = head [ u ]; i ; i = nxt [ i ]) { if ( i & 1 ) continue ; int v = ver [ i ]; if ( occur [ v ] == u ) { bri [ i ] = false ; bri [ first_occur [ v ]] = false ; } else { occur [ v ] = u ; first_occur [ v ] = i ; } } } while ( t != s ) { a [ ++ cnt ] = edge [ pre [ t ]]; b [ cnt ] = bri [ pre [ t ]]; t = ver [ pre [ t ] ^ 1 ]; } for ( int i = 1 ; i <= cnt ; i ++ ) { sum [ i ] = sum [ i - 1 ] + a [ i ]; sum_bri [ i ] = sum_bri [ i - 1 ] + ( b [ i ] ? a [ i ] : 0 ); } ds_min [ 0 ] = 1 << 30 ; for ( int i = 1 , j = 0 ; i <= cnt ; i ++ ) { while ( sum [ i ] - sum [ j ] > Q ) j ++ ; ds [ i ] = sum_bri [ j ]; if ( j > 0 && b [ j ]) ds [ i ] -= min ( a [ j ], Q - ( sum [ i ] - sum [ j ])); ds_min [ i ] = min ( ds [ i ], ds_min [ i - 1 ] + ( b [ i ] ? a [ i ] : 0 )); } for ( int i = cnt , j = cnt + 1 ; i ; i -- ) { while ( sum [ j - 1 ] - sum [ i - 1 ] > Q ) j -- ; dt [ i ] = sum_bri [ cnt ] - sum_bri [ j - 1 ]; if ( j <= cnt && b [ j ]) dt [ i ] -= min ( a [ j ], Q - ( sum [ j - 1 ] - sum [ i - 1 ])); } int ans = 1 << 30 ; for ( int i = 1 ; i <= cnt ; i ++ ) ans = min ( ans , dt [ i ] + ds_min [ i - 1 ]); for ( int i = 1 , j = 0 ; i <= cnt ; i ++ ) { while ( sum [ i ] - sum [ j ] > 2 * Q ) j ++ ; int temp = sum_bri [ j ]; if ( j > 0 && b [ j ]) temp -= min ( a [ j ], 2 * Q - ( sum [ i ] - sum [ j ])); ans = min ( ans , temp + sum_bri [ cnt ] - sum_bri [ i ]); } cout << ans << endl ; } } 1 Tag : \u6709\u5411\u56fe\u7684\u5fc5\u7ecf\u8fb9 / DP / \u62d3\u6251\u6392\u5e8f Acwing386 \u793e\u4ea4\u7f51\u7edc \u00b6 \u8981\u6c42\u7684\u5f0f\u5b50\u662f\uff1a \\[I(v) = \\sum\\limits_{s \\not=v,t\\not=v}\\dfrac{C_{s,t}(v)}{C_{s,t}}\\] \u4e0b\u9762\u7684\u662f \\(s \\to t\\) \u7684\u6700\u77ed\u8def\u6761\u6570 \u4e0a\u9762\u7684\u662f \\(s\\to t\\) \u7684\u6700\u77ed\u8def\u7ecf\u8fc7 \\(v\\) \u7684\u6761\u6570\u3002 \u6ce8\u610f\u8fd9\u91cc\u662f\u6709\u5e8f\u70b9\u5bf9\uff0c\u8981\u7b97\u4e24\u6b21\u3002 \u6570\u636e\u8303\u56f4\u662f \\(n = 1e2\\) \u3002 \u7136\u540e \\(s\\to v\\to t\\) \uff0c\u52a0\u4e0a\u591a\u6e90\u8be2\u95ee\uff0c\u4e0d\u96be\u60f3\u5230 Floyd \u89e3\u51b3\u3002 \u5b9e\u9645\u4e0a\u8981\u505a\u7684\u5c31\u662f\u5728 Floyd \u8dd1\u6700\u77ed\u8def\u7684\u65f6\u5019\u6700\u77ed\u8def\u8ba1\u6570\u5373\u53ef\u3002 \u7136\u540e\u4e0a\u9762\u7684\u90e8\u5206\u53ea\u9700\u8981\u5224\u5b9a \\(dis_{s,v} + dis_{v,t} = dis_{s,t}\\) \u5373\u53ef\u3002 \u7136\u540e\u7b54\u6848\u7d2f\u52a0 \\(cnt_{s,v} \\times cnt_{v,t}\\) \u3002 1 Tag : \u6700\u77ed\u8def\u8ba1\u6570 / \u7ecf\u8fc7\u6307\u5b9a\u70b9\u6700\u77ed\u8def\u8ba1\u6570 Acwing389 \u76f4\u5f84 \u00b6 \u6c42\u6811\u7684\u76f4\u5f84\u7684\u5fc5\u7ecf\u8fb9\u3002 \u53d1\u73b0\u8981\u6c42\u7684\u5c31\u662f\u6240\u6709\u76f4\u5f84\u7684\u516c\u5171\u8fb9\u3002 \u53ef\u4ee5\u5148\u6c42\u51fa\u76f4\u5f84\u4e4b\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u5224\u65ad\u5b83\u662f\u4e0d\u662f\u4e24\u6761\u76f4\u5f84\u7684\u4ea4\u70b9\u3002 \u7136\u540e\u5206\u522b\u627e\u6240\u6709\u4ea4\u70b9\u70b9\u5bf9\u91cc\u9762\u6700\u9760\u4e2d\u95f4\u7684\u4e00\u5bf9\u5c31\u884c\u4e86\u3002 \u8fd8\u6709\u4e00\u79cd\u66f4\u597d\u7684\u505a\u6cd5\u3002 \\(dfs\\) \u8bb0\u5f55\u5f53\u524d\u8def\u5f84\u4e0a\u7684\u516c\u5171\u8fb9\u6761\u6570\u3002 \u8bb0 \\(las\\) \u8868\u793a\u6700\u540e\u4f7f\u76f4\u5f84\u66f4\u65b0\u7684\u8282\u70b9\u3002 \u7136\u540e\u5982\u679c\u51fa\u73b0\u7c7b\u4f3c \\(d[u] = x, d[v1] + w1 = y, d[v2] + w2 = y\\) \u7684\u60c5\u51b5 \u5047\u8bbe \\(v1\\) \u662f\u66f4\u5148\u8bbf\u95ee\u7684\uff0c \u5982\u679c \\(x > y\\) , \u90a3\u4e48\u9700\u8981\u628a \\(u -> v1 -> subtree(v1)\\) \u5f53\u4e2d\u7684\u8fb9\u4ece \\(cnt\\) \u91cc\u51cf\u53bb \u3002 \u5982\u679c \\(x \\le y\\) , \u90a3\u4e48\u9700\u8981\u628a \\(d[u]\\) \u5f80\u4e0b\u8d70\u5bf9\u5e94\u7684\u8fb9\u4ece \\(cnt\\) \u91cc\u51cf\u53bb\u3002 \u5177\u4f53\u5b9e\u73b0\u770b\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 #include <queue> #include <vector> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int n , m , cnt , las ; vector < pair < int , int > > G [ si ]; i64 d [ si ], ans ; int dfs ( int u , int fa , int dep ) { int res = dep ; // * ans = \u76f4\u5f84\u957f\u5ea6 // * cnt = \u516c\u5171\u8fb9\u6761\u6570\uff08\u6700\u7ec8\u7b54\u6848\uff09 for ( auto & [ v , w ] : G [ u ]) { if ( v == fa ) continue ; int cur = dfs ( v , u , dep + 1 ); if ( ans < d [ u ] + d [ v ] + w ) { ans = d [ u ] + d [ v ] + w , las = dep , cnt = res + cur - dep * 2 ; // ? \u76f4\u5f84\u88ab\u66f4\u65b0\uff0c\u8bb0\u5f55 las \u5e76\u66f4\u65b0 cnt\u3002 } else if ( ans == d [ u ] + d [ v ] + w ) { if ( d [ v ] + w >= d [ u ]) { cnt = cur - las ; } else { cnt = res - las ; } // ? \u51fa\u73b0\u7c7b\u4f3c d[u] = x, d[v1] + w1 = y, d[v2] + w2 = y \u7684\u60c5\u51b5 // ? \u5047\u8bbe v1 \u662f\u66f4\u5148\u8bbf\u95ee\u7684\uff0c // ? 1. \u5982\u679c x > y, \u90a3\u4e48\u9700\u8981\u628a u -> v1 -> subtree(v1) \u5f53\u4e2d\u7684\u8fb9\u4ece cnt \u91cc\u51cf\u53bb // ? 2. \u5982\u679c x <= y, \u90a3\u4e48\u9700\u8981\u628a d[u] \u5f80\u4e0b\u8d70\u5bf9\u5e94\u7684\u8fb9\u4ece cnt \u91cc\u51cf\u53bb\u3002 // * cur \u662f 2 \u5bf9\u5e94\u7684\u3002 // * res \u662f 1 \u5bf9\u5e94\u7684\u3002 // TODO : \u5177\u4f53\u7684\u53ef\u80fd\u8fd8\u8981\u5206\u6790\u4e00\u4e0b } if ( d [ u ] < d [ v ] + w ) { d [ u ] = d [ v ] + w , res = cur ; } else if ( d [ u ] == d [ v ] + w ) { res = dep ; } } return res ; // ? \u5f53\u524d\u5206\u652f\u7684\u516c\u5171\u8fb9\u957f\u5ea6\u3002 } int main () { cin >> n ; for ( int i = 1 ; i < n ; ++ i ) { int u , v , w ; cin >> u >> v >> w ; G [ u ]. emplace_back ( v , w ); G [ v ]. emplace_back ( u , w ); } dfs ( 1 , 0 , 1 ); cout << ans << endl << cnt << endl ; return 0 ; } 1 Tag : \u6811\u7684\u76f4\u5f84 / \u6811\u7684\u76f4\u5f84\u7684\u5fc5\u7ecf\u8fb9 Acwing390 \u9003\u5b66\u7684\u5c0f\u5b69 \u00b6 \u53ef\u4ee5\u53d1\u73b0\uff0c\u7b54\u6848\u5c31\u662f\u679a\u4e3e\u76f4\u5f84\u4e0a\u6bcf\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u51fa\u53d1\u70b9\u7684\u7b54\u6848\u7684\u6700\u5927\u503c\u3002 \u90a3\u4e48\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\uff0c\u6c42\u5b8c \\(LCA\\) \u4e4b\u540e\uff0c\u5982\u679c\u6811\u662f\u5e26\u6743\u7684\uff0c\u8be5\u5982\u4f55\u5feb\u901f\u8be2\u95ee\u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\uff1f \u4ecd\u65e7\u662f\u500d\u589e\uff0c\u968f\u7740\u500d\u589e \\(LCA\\) \u7684 \\(f[i][j]\\) \u540c\u6b65\u8bb0\u5f55\u4e00\u4e2a \\(dis[i][j]\\) \u5373\u53ef\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 void init () { for ( int j = 1 ; j <= 18 ; ++ j ) { for ( int i = 1 ; i <= n ; ++ i ) { f [ i ][ j ] = f [ f [ i ][ j - 1 ]][ j - 1 ]; dis [ i ][ j ] = dis [ i ][ j - 1 ] + dis [ f [ i ][ j - 1 ]][ j - 1 ]; } } } int dist ( int u , int v ) { i64 ret = 0 ; if ( dep [ u ] < dep [ v ]) swap ( u , v ); for ( int i = 18 ; i >= 0 ; -- i ) { if ( dep [ f [ u ][ i ]] >= dep [ v ]) { u = f [ u ][ i ]; ret += dis [ u ][ i ]; } } if ( u == v ) return ret ; for ( int i = 18 ; i >= 0 ; -- i ) { if ( f [ u ][ i ] != f [ v ][ i ]) { u = f [ u ][ i ], v = f [ v ][ i ]; ret += ( dis [ u ][ i ] + dis [ v ][ i ]); } } return ret + dis [ u ][ 0 ] + dis [ v ][ 0 ]; } \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u8bb0\u5f55\u4e24\u4e2a \\(dep\\) \uff0c\u4e00\u4e2a\u662f\u628a\u6811\u770b\u4f5c\u65e0\u6743\u6811\u65f6\u5019\u7684 \\(dep\\) \uff0c\u53e6\u5916\u4e00\u4e2a\u662f\u628a\u6811\u770b\u4f5c\u5e26\u6743\u6811\u65f6\u5019\u7684 \\(dep\\) \u3002 \u7136\u540e\u5c31\u53ef\u4ee5\u7ee7\u7eed\u7528 \\(d[u] + d[v] - 2d[lca]\\) \u4e86\u3002 1 Tag \uff1a \u6811\u7684\u76f4\u5f84 / \u5e26\u6743\u6811\u4e0a\u70b9\u5bf9\u8ddd\u79bb","title":"\u4e09\u6708Tricks"},{"location":"%E6%80%9D%E8%80%83/%E4%B8%89%E6%9C%88Tricks/#tricks","text":"","title":"\u4e09\u6708 Tricks \u6574\u7406"},{"location":"%E6%80%9D%E8%80%83/%E4%B8%89%E6%9C%88Tricks/#zjoi2007","text":"\u7ed9\u5b9a\u4e00\u5f20\u6709\u5411\u56fe \\(G\\) \u3002 \u79f0\u4e00\u4e2a\u5bfc\u51fa\u5b50\u56fe\u662f\u201c\u534a\u8fde\u901a\u7684\u201d\uff0c\u5f53\u4e14\u4ec5\u5f53\u5bf9\u4e8e\u5bfc\u51fa\u5b50\u56fe\u5f53\u4e2d\u7684\u4efb\u610f\u70b9\u5bf9 \\((u,v)\\) \u3002 \u90fd\u6709 \\(u\\) \u53ef\u4ee5\u5230\u8fbe \\(v\\) \u6216\u8005 \\(v\\) \u53ef\u4ee5\u5230\u8fbe \\(u\\) \u3002 \u6c42 \\(G\\) \u7684\u6700\u5927\u534a\u8fde\u901a\u5b50\u56fe\u7684\u5927\u5c0f\uff0c\u548c\u4e2a\u6570\u3002 \u9996\u5148\u53d1\u73b0\u5f3a\u8fde\u901a\u5206\u91cf\u5fc5\u7136\u662f\u4e00\u4e2a\u534a\u8054\u901a\u5b50\u56fe\u3002 \u6240\u4ee5\u5148\u7f29\u70b9\u5f97\u5230\u4e00\u4e2a DAG\u3002 \u53d1\u73b0\u6700\u5927\u534a\u8054\u901a\u5b50\u56fe\u5fc5\u7136\u662f DAG \u4e0a\u7684\u4e00\u6761\u6700\u957f\u94fe\u3002 \u5e76\u4e14\u8fd9\u4e2a\u6700\u957f\u94fe\u4e0d\u80fd\u5206\u5c94\u3002 \u90a3\u4e48\u5728 DAG \u4e0a\u8fdb\u884c\u9012\u63a8\u6c42\u6700\u957f\u8def\u5373\u53ef\u3002 \u56e0\u4e3a Tarjan \u7f29\u70b9\u4f1a\u5f97\u5230\u9006\u62d3\u6251\u5e8f\uff0c\u6240\u4ee5\u4e0d\u7528\u62d3\u6251\u6392\u5e8f\u4e86\uff0c\u5012\u8fc7\u6765\u5c31\u884c\u3002 \u9898\u76ee\u8981\u6c42\u8bb0\u5f55\u65b9\u6848\uff0c\u90a3\u4e48\u5c31\u5728 \\(f_i\\) \u8fdb\u884c\u8f6c\u79fb\u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e2a \\(g_i\\) \u8868\u793a \\(f_i\\) \u8fd9\u4e2a\u72b6\u6001\u5bf9\u5e94\u7684\u65b9\u6848\u3002 \u9898\u76ee\u53ef\u80fd\u6709\u91cd\u8fb9\uff0c\u6240\u4ee5\u9700\u8981\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u8282\u70b9\u4e0a\u4e00\u6b21\u662f\u4ece\u54ea\u91cc\u8f6c\u79fb\u7684\uff0c\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u3002 \u521d\u59cb\u5316 \\(f_i=size_{scc_{i}},g_i=1\\) \u3002 \u6838\u5fc3\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 for ( register int u = cnt ; u >= 1 ; -- u ) f [ u ] = scc [ u ]. size (), g [ u ] = 1 ; for ( register int u = cnt ; u >= 1 ; -- u ){ for ( register int i = ee [ u ]. head ; i ; i = ee [ i ]. Next ){ int v = ee [ i ]. ver ; if ( las [ v ] == u ) continue ; las [ v ] = u ; if ( f [ u ] + ( int ) scc [ v ]. size () > f [ v ]) f [ v ] = f [ u ] + ( int ) scc [ v ]. size (), g [ v ] = g [ u ]; else if ( f [ u ] + ( int ) scc [ v ]. size () == f [ v ]) g [ v ] = ( g [ v ] + g [ u ]) % mod ; } } int res1 = 0 , res2 = 0 ; for ( register int i = 1 ; i <= cnt ; ++ i ){ if ( f [ i ] > res1 ) res1 = f [ i ], res2 = g [ i ]; else if ( f [ i ] == res1 ) res2 = ( res2 + g [ i ]) % mod ; } return printf ( \"%d \\n %d \\n \" , res1 , res2 ), 0 ; Trick: Tarjan \u7f29\u5b8c\u70b9\u5f97\u5230\u7684\u5e8f\u5217\u662f\u9006\u62d3\u6251\u5e8f\u3002 Trick2: DAG \u4e0a DP \u4e00\u822c\u662f\u5f80\u524d\u63a8\u800c\u4e0d\u662f\u5f80\u540e\u627e\u524d\u9a71\u7684\u65b9\u5f0f\u3002 Trick3: DAG \u4e0a DP \u6709\u53ef\u80fd\u9700\u8981\u8003\u8651\u91cd\u8fb9\u3002 \u8fd8\u6709\uff0c\u5982\u679c\u975e\u8981\u5728 SCC \u540e\u5229\u7528\u539f\u56fe\u5efa\u8fb9\uff0c\u4e00\u5b9a\u8981\u624b\u5199\u4e00\u4e2a for \u3002 \u5982\u679c\u662f\u8fd9\u6837\u5199\u53ea\u4f1a\u6e05\u7a7a \\(e_0\\) 1 2 3 4 5 6 struct Edge { int head , ver , Next ; inline void Init (){ head = -1 ; } } e [ si_m ] e -> Init (); \u4e8c\u7ef4\u7684 std::bitset<> \u4e4b\u7c7b\u7684 STL \u53ef\u4ee5\u8fd9\u4e48\u5199\uff08\u4f46\u662f\u5e38\u6570\u5927\uff09\uff0c\u662f\u56e0\u4e3a\u5b83\u91cd\u8f7d\u4e86 [] \uff0c\u672c\u8d28\u4e0a\u5b83\u662f\u4e00\u4e2a \u7c7b\u4f3c \u8fd9\u6837\u7684\u4e1c\u897f\uff1a 1 2 3 4 5 struct Bitset { bool bb [ si ]; inline bool * operator [] ( int idx ){ return & bb [ idx ]; } } b ; // \u4e71\u5199\u7684\uff0c\u7406\u89e3\u5c31\u884c \u4e5f\u5c31\u662f\u8bf4\u5b83\u5e76\u4e0d\u662f\u4e00\u4e2a bitset \u6570\u7ec4\uff0c\u4ecd\u7136\u53ea\u662f\u4e00\u4e2a bitset\u3002 1 Tag : \u5f3a\u8fde\u901a\u5206\u91cf / DAG\u4e0a\u7684DP / \u6c42\u65b9\u6848","title":"[ZJOI2007] \u6700\u5927\u534a\u8054\u901a\u5b50\u56fe"},{"location":"%E6%80%9D%E8%80%83/%E4%B8%89%E6%9C%88Tricks/#acwing361","text":"\u7ed9\u5b9a\u4e00\u5f20\u56fe\uff0c\u6c42\u56fe\u4e0a\u7684\u4e00\u4e2a\u73af\u4f7f\u5f97 \u201c\u73af\u4e0a\u5404\u70b9\u7684\u6743\u503c\u4e4b\u548c\u201d\u9664\u4ee5\u201c\u73af\u4e0a\u5404\u8fb9\u7684\u6743\u503c\u4e4b\u548c\u201d\u6700\u5927\u3002 01\u5206\u6570\u89c4\u5212\uff0c\u628a\u70b9\u6743\u79fb\u52a8\u5230\u8fb9\u6743\u4e0a\uff0c \u56e0\u4e3a\u6c42\u7684\u662f \\(\\max\\{\\dfrac{\\sum f_i}{\\sum t_i}\\}\\) \u3002 \u4e8c\u5206\u7b54\u6848\u4e4b\u540e\u53d8\u6210\u5224\u5b9a \\(mid\\) \u662f\u5426 \\(\\le \\dfrac{\\sum f_i}{\\sum t_i}\\) \u3002 \u4e5f\u5c31\u662f\u5224\u65ad\u73af\u4e0a \\(\\sum (mid\\times t_i -f_i)\\) \u662f\u5426 \\(\\le 0\\) \u3002 \u6240\u4ee5\u628a\u8fb9\u53d8\u6210 \\(t\\times mid-f\\) \u7684\u5f62\u5f0f\u8dd1 SPFA \u6700\u77ed\u8def\u3002 \u5982\u679c\u6709\u8d1f\u73af\u5219 \\(mid\\) \u4e0d\u53ef\u884c\uff0c\u5982\u679c\u6b63\u5e38\u6c42\u51fa\u6700\u77ed\u8def\uff0c\u8bc1\u660e \\(mid\\) \u53ef\u884c\u3002 1 Tag : SPFA / 01 \u5206\u6570\u89c4\u5212","title":"Acwing361 \u89c2\u5149\u5976\u725b"},{"location":"%E6%80%9D%E8%80%83/%E4%B8%89%E6%9C%88Tricks/#acwing1165","text":"01\u5206\u6570\u89c4\u5212\uff0c\u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u524d\u4e24\u4e2a\u5b57\u6bcd\u548c\u540e\u4e24\u4e2a\u5b57\u6bcd\u8fde\u8fb9\uff0c\u5355\u8bcd\u957f\u5ea6\u770b\u4f5c\u8fb9\u6743\u3002 \u8fd9\u6837\u5b50\u70b9\u7684\u6570\u91cf\u5c31\u964d\u4e0b\u6765\u4e86\u3002 \u8981\u6c42\u7684\u662f \\(\\max\\{\\dfrac{\\sum len}{n}\\}\\) \uff0c \\(n\\) \u662f\u9009\u7684\u5355\u8bcd\u7684\u4e2a\u6570\u3002 \u4e8c\u5206\u7b54\u6848\u540e\u8f6c\u5316\u4e3a\u6c42 \\(mid\\) \u662f\u5426 \\(\\le \\dfrac{\\sum len}{n}\\) \u3002 \u4e5f\u5c31\u662f \\(\\sum len_i- n\\times mid=\\sum(len_i-mid)\\) \u662f\u5426 \\(\\ge 0\\) \u6240\u4ee5\u628a\u8fb9\u6743\u5316\u6210 \\(len-mid\\) \u7684\u5f62\u5f0f\u8dd1 SPFA \u6700\u957f\u8def\u3002 \u5224\u65ad\u6709\u6ca1\u6709\u6b63\u73af\u5373\u53ef\u5224\u5b9a \\(mid\\) \u7684\u53ef\u884c\u6027\u3002 Trick: 01 \u5206\u6570\u89c4\u5212\u7684\u65f6\u5019\u5982\u679c\u7ed3\u5408\u4e86\u56fe\u8bba\uff0c\u53ef\u4ee5\u6839\u636e\u5316\u51fa\u6765\u7684\u548c\u5f0f\u6539\u53d8\u8fb9\u6743\uff08\u5728 SPFA \u91cc\u9762\u6539\u5c31\u884c\uff0c\u4e0d\u7528\u91cd\u65b0\u5efa\u56fe\uff09\u3002 1 Tag : SPFA / 01 \u5206\u6570\u89c4\u5212","title":"Acwing1165 \u5355\u8bcd\u73af"},{"location":"%E6%80%9D%E8%80%83/%E4%B8%89%E6%9C%88Tricks/#acwing350","text":"\u8003\u8651 \\(K=1\\) \u7684\u60c5\u51b5\u3002 \u53d1\u73b0\u53ea\u9700\u8981\u5728\u76f4\u5f84\u7684\u4e24\u4e2a\u7aef\u70b9\u4e4b\u95f4\u8fde\u63a5\u4e00\u6761\u8fb9\u3002 \u7136\u540e\u8fd9\u6761\u76f4\u5f84\u5c31\u53ef\u4ee5\u53ea\u8d70\u4e00\u6b21\u3002 \u5fc5\u7136\u662f\u6700\u4f18\u7684\u3002 \u8003\u8651 \\(K=2\\) \u7684\u60c5\u51b5\u3002 \u4e3a\u4e86\u4e0d\u91cd\u590d\uff0c\u4e5f\u5c31\u662f\u4f7f\u5f97\u88ab\u51cf\u5c11\u7684\u8fb9\u5c3d\u91cf\u7684\u591a\u3002 \u5728 \u201c\u629b\u6389\u201d \u539f\u6765\u9009\u4e2d\u7684\u76f4\u5f84\u7684\u6811\u4e0a\u518d\u6c42\u4e00\u6b21\u76f4\u5f84\u3002 \u6ce8\u610f\u8fd9\u91cc\u4e0d\u662f\u771f\u7684\u53bb\u9664\uff0c\u800c\u662f\u8bf4\u4f7f\u5f97\u8fd9\u6761\u76f4\u5f84\u4e0d\u4f1a\u88ab\u9009\u3002 \u6240\u4ee5\u4e00\u4e2a Tricky \u7684\u505a\u6cd5\u5c31\u662f\u628a\u9009\u4e2d\u7684\u76f4\u5f84\u4e0a\u7684\u6240\u6709\u8fb9\u5168\u90e8\u8bbe\u7f6e\u6210 \\(-1\\) \u3002 \u4f46\u662f\u6ce8\u610f\uff0c\u5982\u679c\u8bbe\u7f6e\u6210 \\(-1\\) \uff0c\u5c31\u4e0d\u80fd\u7528 2-BFS \u6c42\u76f4\u5f84\u4e86\uff0c\u5c31\u53ea\u80fd DP\u3002 \u4f46\u662f\u4e3a\u4e86\u6c42\u65b9\u6848\u65b9\u4fbf\uff0c\u7b2c\u4e00\u6b21\u6c42\u76f4\u5f84\u8981\u7528 2-BFS \\(\\text{Trick:}\\) \u6c42\u76f4\u5f84\u7684\u65f6\u5019\u5982\u679c\u6709\u8d1f\u8fb9\u6743\u4e0d\u80fd\u4f7f\u7528 2-BFS\u3002 \u4f46\u662f 2-BFS \u76f8\u5bf9\u4e8e dp \u66f4\u5bb9\u6613\u6c42\u65b9\u6848\u3002 1 Tag : \u6811\u7684\u76f4\u5f84 / \u65b9\u6848","title":"Acwing350 \u5de1\u903b"},{"location":"%E6%80%9D%E8%80%83/%E4%B8%89%E6%9C%88Tricks/#acwing354","text":"\u8fd9\u9898\u548c\u96e8\u5929\u7684\u5c3e\u5df4\u5f88\u50cf\u3002 \u90fd\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u9897\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7136\u540e\u7ebf\u6bb5\u6811\u5408\u5e76\u3002 \u4e0d\u8fc7\u8fd9\u9898\u7684\u7b54\u6848\u4e0d\u662f\u6700\u503c\uff0c\u6709\u533a\u95f4\u53ef\u51cf\u6027\u3002 \u6240\u4ee5\u53ef\u4ee5\u4e0d\u7528\u7ebf\u6bb5\u6811\uff0c\u76f4\u63a5\u5728\u6bcf\u4e2a\u8282\u70b9\u8bb0\u5f55\u76f8\u5173\u7684\u64cd\u4f5c\u3002 \u7136\u540e dfs \u4e00\u6b21\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u9012\u5f52\u8fdb\u5b50\u6811\u5b8c\u4e4b\u540e\u7684\u7b54\u6848\u51cf\u53bb\u9012\u5f52\u4e4b\u524d\u7684\u5c31\u662f\u8fd9\u4e2a\u8282\u70b9\u7684\u7b54\u6848\u3002 1 Tag : \u6811\u4e0a\u5dee\u5206","title":"Acwing354 \u5929\u5929\u7231\u8dd1\u6b65"},{"location":"%E6%80%9D%E8%80%83/%E4%B8%89%E6%9C%88Tricks/#acwing369-acm","text":"\u7ed9\u5b9a\u4e00\u5f20\u6709\u5411\u56fe\uff0c\u6709\u4e24\u6b21\u4e58\u8f66\u7684\u673a\u4f1a\uff0c\u53ef\u4ee5\u518d\u4efb\u610f\u5730\u65b9\u4e0a\u4e0b\u8f66\uff0c\u4f46\u662f\u4e0b\u8f66\u4e86\u5c31\u7528\u4e86\u4e00\u6b21\u673a\u4f1a\u3002 \u6bcf\u6b21\u8fde\u7eed\u4e58\u8f66\u7684\u4e3e\u4f8b\u4e0d\u80fd\u8d85\u8fc7 \\(q\\) \u3002 \u6c42\u4ece \\(s \\to t\\) \u8981\u7ecf\u8fc7\u7684 \u201c\u5371\u9669\u8def\u6bb5\u201d \u7684\u957f\u5ea6\u6700\u5c0f\u662f\u591a\u5c11\u3002 \u201c\u5371\u9669\u8def\u6bb5\u201d\u5b9a\u4e49\u4e3a \\(s\\to t\\) \u7684\u5fc5\u7ecf\u8fb9\u3002 \\(s \\to t\\) \u7684\u5fc5\u7ecf\u8fb9\u7684\u610f\u601d\u5c31\u662f\uff0c\u4efb\u610f\u4e00\u6761\u4ece \\(s\\to t\\) \u7684\u8def\u5f84\uff0c\u4ed6\u4eec\u90fd\u5305\u542b\u7684\u8fb9\u3002 \u9996\u5148\u8003\u8651\u4e00\u4e2a\u6c42\u51fa\u6709\u5411\u56fe\u7684\u6865\uff08\u5fc5\u7ecf\u8fb9\uff09\u7684\u7b97\u6cd5\u3002 \u53ef\u4ee5\u4f7f\u7528\u652f\u914d\u6811\u5148\u6c42\u51fa\u5fc5\u7ecf\u70b9\u96c6\u7136\u540e\u505a\u3002 \u4e0d\u8fc7\u6709\u4e00\u79cd\u6bd4\u8f83\u597d\u5199\u7684 \\(\\text{O}(n)\\) DP \u505a\u6cd5\u3002 \u8bbe \\(dp_s[i]\\) \u8868\u793a\u4ece \\(s\\) \u5230 \\(i\\) \u7684\u8def\u5f84\u6761\u6570\u3002 \\(dp_t[i]\\) \u8868\u793a\u53cd\u56fe\u4e0a\u4ece \\(t\\) \u5230 \\(i\\) \u7684\u8def\u5f84\u6761\u6570\u3002 \u7ecf\u8fc7\u63a8\u5bfc\u4e0d\u96be\u53d1\u73b0\u4e24\u4e2a\u5145\u8981\u6761\u4ef6\uff1a \u4e00\u4e2a\u70b9 \\(x\\) \u662f\u5fc5\u7ecf\u70b9\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(dp_s[i] \\times dp_t[i] = dp_s[t]\\) \u3002 \u4e00\u6761\u8fb9 \\((u\\to v)\\) \u662f\u5fc5\u7ecf\u8fb9\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(dp_s[u] \\times dp_t[v] = dp_s[t]\\) \u3002 \u4f46\u662f \\(dp_s,dp_t\\) \u662f\u6307\u6570\u7ea7\u522b\u7684\uff0c __uint128_t \u90fd\u4e0d\u4e00\u5b9a\u53ef\u4ee5\u5e94\u4ed8\u3002 \u6240\u4ee5\u8003\u8651\u7c7b\u4f3c\u54c8\u5e0c\u7684\u601d\u60f3\uff0c\u7ed9\u4ed6\u4eec\u53d6\u6a21\u3002 \u7528\u7c7b\u4f3c\u53cc\u54c8\u5e0c\u7684\u601d\u60f3\uff0c\u540c\u65f6\u8bb0\u5f55\u4e24\u79cd\u6a21\u6570\u610f\u4e49\u4e0b\u7684\u503c\u3002 \u7136\u540e\u4e24\u4e2a\u503c\u76f8\u7b49\uff0c\u5f53\u4e14\u4ec5\u5f53\u4ed6\u4eec\u5728\u4e24\u79cd\u610f\u4e49\u4e0b\u7684\u503c\u90fd\u4e00\u6837\u3002 \u4e00\u822c\u53d6 \\(mod1=1e9+7,mod2=1e9+9\\) \u3002 \u7136\u540e\u8003\u8651\u6c42\u51fa \\(s \\to t\\) \u7684\u6700\u77ed\u8def\u3002 \u660e\u663e\u7684\uff0c\u8fd9\u4e9b\u5fc5\u7ecf\u8fb9\u80af\u5b9a\u5728\u4efb\u610f\u7684\u4e00\u6761\u6700\u77ed\u8def\u4e0a\u90fd\u51fa\u73b0\u4e86\uff0c\u6240\u4ee5\u968f\u4fbf\u9009\u54ea\u4e00\u6761\u90fd\u4e00\u6837\u3002 \u7136\u540e\u8003\u8651\u5982\u4f55\u7edf\u8ba1\u7b54\u6848\u3002 \u7ecf\u8fc7\u4e25\u8c28\u7684\u4e3e\u4f8b\uff0c\u753b\u56fe\u8bba\u8bc1\u53ef\u4ee5\u53d1\u73b0\uff0c\u76f4\u63a5\u7edf\u8ba1\u7684\u8bdd\u975e\u5e38\u5bb9\u6613\u7b97\u91cd\u590d\u3002 \u610f\u601d\u662f\u4e24\u4e2a\u8fde\u7eed\u6bb5\u91cd\u5408\u7684\u65f6\u5019\u4f1a\u975e\u5e38\u96be\u7b97\uff0c\u8981\u5206\u7279\u522b\u591a\u7c7b\u8ba8\u8bba\u3002 \u6240\u4ee5\u8003\u8651\u4e00\u4e2a\u975e\u5e38\u6709\u610f\u601d\u7684 Trick \uff1a \u4ee5\u6bcf\u4e00\u4e2a\u70b9\u4e3a \u201c\u5206\u5272\u70b9\u201d\uff0c\u5206\u522b DP\uff0c\u8ba1\u7b97\u4e24\u8fb9\u7684\u7b54\u6848 \\(ds,dt\\) \uff0c\u91cd\u5408\u7684\u95ee\u9898\u5c31\u5f97\u5230\u4e86\u89e3\u51b3\u3002 \u7b49\u4ef7\u4e8e\u628a\u95ee\u9898\u8f6c\u5316\u6210\u4e86\u6c42\u53ea\u8986\u76d6\u4e00\u6b21\uff0c\u6865\u8fb9\u603b\u957f\u5ea6\u51cf\u53bb\u53ef\u4ee5\u8986\u76d6\u7684\u6700\u957f\u7684\u6865\u8fb9\u7684\u957f\u5ea6\u3002 \u7136\u540e\u6bcf\u4e00\u4e2a\u70b9\u7684\u7b54\u6848\u5c31\u662f \\(ds_i + dt_i\\) \uff0c\u679a\u4e3e\u6240\u6709\u70b9\u66f4\u65b0\u5373\u53ef\uff0c\u8fd9\u4e2a Trick \u5728 Acwing341 \u6700\u4f18\u8d38\u6613 \u90a3\u4e00\u9898\u4e5f\u7528\u5230\u4e86\u3002 \u672c\u9898\u7ed9\u7684\u4e0d\u662f DAG\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u5148\u62d3\u6251\u6392\u5e8f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 #include <queue> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int N = 1e5 + 10 ; const int M = 2e5 + 10 ; const int mod = 1e9 + 7 ; // \u672c\u9898\u4e0d\u9700\u8981\u53cc\u53d6\u6a21 int ver [ M * 2 ], edge [ M * 2 ], nxt [ M * 2 ], head [ N ], tot ; int f [ 2 ][ N ], deg [ 2 ][ N ], dis [ N ], pre [ N ], n , m , s , t , Q ; bool bri [ M * 2 ]; int a [ N ], b [ N ], cnt ; int sum [ N ], sum_bri [ N ], ds [ N ], dt [ N ], ds_min [ N ]; int occur [ N ], first_occur [ N ]; queue < int > q ; void add ( int u , int v , int w ) { ver [ ++ tot ] = v , edge [ tot ] = w , nxt [ tot ] = head [ u ], head [ u ] = tot ; } void topsort ( int s , int bit ) { if ( bit == 0 ) { memset ( dis , 0x3f , sizeof ( dis )); dis [ s ] = 0 ; } f [ bit ][ s ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) if ( deg [ bit ][ i ] == 0 ) q . push ( i ); while ( ! q . empty ()) { int u = q . front (); q . pop (); for ( int i = head [ u ]; i ; i = nxt [ i ]) if (( i & 1 ) == bit ) { int v = ver [ i ]; f [ bit ][ v ] = ( f [ bit ][ v ] + f [ bit ][ u ]) % mod ; if ( bit == 0 && dis [ v ] > dis [ u ] + edge [ i ]) { dis [ v ] = dis [ u ] + edge [ i ]; pre [ v ] = i ; } if ( -- deg [ bit ][ v ] == 0 ) q . push ( v ); } } } int main () { int T ; cin >> T ; while ( T -- ) { memset ( head , 0 , sizeof ( head )), memset ( deg , 0 , sizeof ( deg )); memset ( f , 0 , sizeof ( f )), tot = 1 ; cnt = 0 ; memset ( bri , 0 , sizeof ( bri )), memset ( occur , 0 , sizeof ( occur )); cin >> n >> m >> s >> t >> Q ; s ++ ; t ++ ; for ( int i = 1 ; i <= m ; i ++ ) { int u , v , w ; cin >> u >> v >> w ; u ++ , v ++ ; add ( u , v , w ), add ( v , u , w ); deg [ 0 ][ v ] ++ , deg [ 1 ][ u ] ++ ; } topsort ( s , 0 ); if ( f [ 0 ][ t ] == 0 ) { puts ( \"-1\" ); continue ; } topsort ( t , 1 ); for ( int i = 2 ; i <= tot ; i += 2 ) { int u = ver [ i ^ 1 ], v = ver [ i ]; if (( long long ) f [ 0 ][ u ] * f [ 1 ][ v ] % mod == f [ 0 ][ t ]) { bri [ i ] = true ; } } for ( int u = 1 ; u <= n ; u ++ ) { for ( int i = head [ u ]; i ; i = nxt [ i ]) { if ( i & 1 ) continue ; int v = ver [ i ]; if ( occur [ v ] == u ) { bri [ i ] = false ; bri [ first_occur [ v ]] = false ; } else { occur [ v ] = u ; first_occur [ v ] = i ; } } } while ( t != s ) { a [ ++ cnt ] = edge [ pre [ t ]]; b [ cnt ] = bri [ pre [ t ]]; t = ver [ pre [ t ] ^ 1 ]; } for ( int i = 1 ; i <= cnt ; i ++ ) { sum [ i ] = sum [ i - 1 ] + a [ i ]; sum_bri [ i ] = sum_bri [ i - 1 ] + ( b [ i ] ? a [ i ] : 0 ); } ds_min [ 0 ] = 1 << 30 ; for ( int i = 1 , j = 0 ; i <= cnt ; i ++ ) { while ( sum [ i ] - sum [ j ] > Q ) j ++ ; ds [ i ] = sum_bri [ j ]; if ( j > 0 && b [ j ]) ds [ i ] -= min ( a [ j ], Q - ( sum [ i ] - sum [ j ])); ds_min [ i ] = min ( ds [ i ], ds_min [ i - 1 ] + ( b [ i ] ? a [ i ] : 0 )); } for ( int i = cnt , j = cnt + 1 ; i ; i -- ) { while ( sum [ j - 1 ] - sum [ i - 1 ] > Q ) j -- ; dt [ i ] = sum_bri [ cnt ] - sum_bri [ j - 1 ]; if ( j <= cnt && b [ j ]) dt [ i ] -= min ( a [ j ], Q - ( sum [ j - 1 ] - sum [ i - 1 ])); } int ans = 1 << 30 ; for ( int i = 1 ; i <= cnt ; i ++ ) ans = min ( ans , dt [ i ] + ds_min [ i - 1 ]); for ( int i = 1 , j = 0 ; i <= cnt ; i ++ ) { while ( sum [ i ] - sum [ j ] > 2 * Q ) j ++ ; int temp = sum_bri [ j ]; if ( j > 0 && b [ j ]) temp -= min ( a [ j ], 2 * Q - ( sum [ i ] - sum [ j ])); ans = min ( ans , temp + sum_bri [ cnt ] - sum_bri [ i ]); } cout << ans << endl ; } } 1 Tag : \u6709\u5411\u56fe\u7684\u5fc5\u7ecf\u8fb9 / DP / \u62d3\u6251\u6392\u5e8f","title":"Acwing369 \u5317\u5927ACM\u961f\u7684\u8fdc\u8db3"},{"location":"%E6%80%9D%E8%80%83/%E4%B8%89%E6%9C%88Tricks/#acwing386","text":"\u8981\u6c42\u7684\u5f0f\u5b50\u662f\uff1a \\[I(v) = \\sum\\limits_{s \\not=v,t\\not=v}\\dfrac{C_{s,t}(v)}{C_{s,t}}\\] \u4e0b\u9762\u7684\u662f \\(s \\to t\\) \u7684\u6700\u77ed\u8def\u6761\u6570 \u4e0a\u9762\u7684\u662f \\(s\\to t\\) \u7684\u6700\u77ed\u8def\u7ecf\u8fc7 \\(v\\) \u7684\u6761\u6570\u3002 \u6ce8\u610f\u8fd9\u91cc\u662f\u6709\u5e8f\u70b9\u5bf9\uff0c\u8981\u7b97\u4e24\u6b21\u3002 \u6570\u636e\u8303\u56f4\u662f \\(n = 1e2\\) \u3002 \u7136\u540e \\(s\\to v\\to t\\) \uff0c\u52a0\u4e0a\u591a\u6e90\u8be2\u95ee\uff0c\u4e0d\u96be\u60f3\u5230 Floyd \u89e3\u51b3\u3002 \u5b9e\u9645\u4e0a\u8981\u505a\u7684\u5c31\u662f\u5728 Floyd \u8dd1\u6700\u77ed\u8def\u7684\u65f6\u5019\u6700\u77ed\u8def\u8ba1\u6570\u5373\u53ef\u3002 \u7136\u540e\u4e0a\u9762\u7684\u90e8\u5206\u53ea\u9700\u8981\u5224\u5b9a \\(dis_{s,v} + dis_{v,t} = dis_{s,t}\\) \u5373\u53ef\u3002 \u7136\u540e\u7b54\u6848\u7d2f\u52a0 \\(cnt_{s,v} \\times cnt_{v,t}\\) \u3002 1 Tag : \u6700\u77ed\u8def\u8ba1\u6570 / \u7ecf\u8fc7\u6307\u5b9a\u70b9\u6700\u77ed\u8def\u8ba1\u6570","title":"Acwing386 \u793e\u4ea4\u7f51\u7edc"},{"location":"%E6%80%9D%E8%80%83/%E4%B8%89%E6%9C%88Tricks/#acwing389","text":"\u6c42\u6811\u7684\u76f4\u5f84\u7684\u5fc5\u7ecf\u8fb9\u3002 \u53d1\u73b0\u8981\u6c42\u7684\u5c31\u662f\u6240\u6709\u76f4\u5f84\u7684\u516c\u5171\u8fb9\u3002 \u53ef\u4ee5\u5148\u6c42\u51fa\u76f4\u5f84\u4e4b\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u5224\u65ad\u5b83\u662f\u4e0d\u662f\u4e24\u6761\u76f4\u5f84\u7684\u4ea4\u70b9\u3002 \u7136\u540e\u5206\u522b\u627e\u6240\u6709\u4ea4\u70b9\u70b9\u5bf9\u91cc\u9762\u6700\u9760\u4e2d\u95f4\u7684\u4e00\u5bf9\u5c31\u884c\u4e86\u3002 \u8fd8\u6709\u4e00\u79cd\u66f4\u597d\u7684\u505a\u6cd5\u3002 \\(dfs\\) \u8bb0\u5f55\u5f53\u524d\u8def\u5f84\u4e0a\u7684\u516c\u5171\u8fb9\u6761\u6570\u3002 \u8bb0 \\(las\\) \u8868\u793a\u6700\u540e\u4f7f\u76f4\u5f84\u66f4\u65b0\u7684\u8282\u70b9\u3002 \u7136\u540e\u5982\u679c\u51fa\u73b0\u7c7b\u4f3c \\(d[u] = x, d[v1] + w1 = y, d[v2] + w2 = y\\) \u7684\u60c5\u51b5 \u5047\u8bbe \\(v1\\) \u662f\u66f4\u5148\u8bbf\u95ee\u7684\uff0c \u5982\u679c \\(x > y\\) , \u90a3\u4e48\u9700\u8981\u628a \\(u -> v1 -> subtree(v1)\\) \u5f53\u4e2d\u7684\u8fb9\u4ece \\(cnt\\) \u91cc\u51cf\u53bb \u3002 \u5982\u679c \\(x \\le y\\) , \u90a3\u4e48\u9700\u8981\u628a \\(d[u]\\) \u5f80\u4e0b\u8d70\u5bf9\u5e94\u7684\u8fb9\u4ece \\(cnt\\) \u91cc\u51cf\u53bb\u3002 \u5177\u4f53\u5b9e\u73b0\u770b\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 #include <queue> #include <vector> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int n , m , cnt , las ; vector < pair < int , int > > G [ si ]; i64 d [ si ], ans ; int dfs ( int u , int fa , int dep ) { int res = dep ; // * ans = \u76f4\u5f84\u957f\u5ea6 // * cnt = \u516c\u5171\u8fb9\u6761\u6570\uff08\u6700\u7ec8\u7b54\u6848\uff09 for ( auto & [ v , w ] : G [ u ]) { if ( v == fa ) continue ; int cur = dfs ( v , u , dep + 1 ); if ( ans < d [ u ] + d [ v ] + w ) { ans = d [ u ] + d [ v ] + w , las = dep , cnt = res + cur - dep * 2 ; // ? \u76f4\u5f84\u88ab\u66f4\u65b0\uff0c\u8bb0\u5f55 las \u5e76\u66f4\u65b0 cnt\u3002 } else if ( ans == d [ u ] + d [ v ] + w ) { if ( d [ v ] + w >= d [ u ]) { cnt = cur - las ; } else { cnt = res - las ; } // ? \u51fa\u73b0\u7c7b\u4f3c d[u] = x, d[v1] + w1 = y, d[v2] + w2 = y \u7684\u60c5\u51b5 // ? \u5047\u8bbe v1 \u662f\u66f4\u5148\u8bbf\u95ee\u7684\uff0c // ? 1. \u5982\u679c x > y, \u90a3\u4e48\u9700\u8981\u628a u -> v1 -> subtree(v1) \u5f53\u4e2d\u7684\u8fb9\u4ece cnt \u91cc\u51cf\u53bb // ? 2. \u5982\u679c x <= y, \u90a3\u4e48\u9700\u8981\u628a d[u] \u5f80\u4e0b\u8d70\u5bf9\u5e94\u7684\u8fb9\u4ece cnt \u91cc\u51cf\u53bb\u3002 // * cur \u662f 2 \u5bf9\u5e94\u7684\u3002 // * res \u662f 1 \u5bf9\u5e94\u7684\u3002 // TODO : \u5177\u4f53\u7684\u53ef\u80fd\u8fd8\u8981\u5206\u6790\u4e00\u4e0b } if ( d [ u ] < d [ v ] + w ) { d [ u ] = d [ v ] + w , res = cur ; } else if ( d [ u ] == d [ v ] + w ) { res = dep ; } } return res ; // ? \u5f53\u524d\u5206\u652f\u7684\u516c\u5171\u8fb9\u957f\u5ea6\u3002 } int main () { cin >> n ; for ( int i = 1 ; i < n ; ++ i ) { int u , v , w ; cin >> u >> v >> w ; G [ u ]. emplace_back ( v , w ); G [ v ]. emplace_back ( u , w ); } dfs ( 1 , 0 , 1 ); cout << ans << endl << cnt << endl ; return 0 ; } 1 Tag : \u6811\u7684\u76f4\u5f84 / \u6811\u7684\u76f4\u5f84\u7684\u5fc5\u7ecf\u8fb9","title":"Acwing389 \u76f4\u5f84"},{"location":"%E6%80%9D%E8%80%83/%E4%B8%89%E6%9C%88Tricks/#acwing390","text":"\u53ef\u4ee5\u53d1\u73b0\uff0c\u7b54\u6848\u5c31\u662f\u679a\u4e3e\u76f4\u5f84\u4e0a\u6bcf\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u51fa\u53d1\u70b9\u7684\u7b54\u6848\u7684\u6700\u5927\u503c\u3002 \u90a3\u4e48\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\uff0c\u6c42\u5b8c \\(LCA\\) \u4e4b\u540e\uff0c\u5982\u679c\u6811\u662f\u5e26\u6743\u7684\uff0c\u8be5\u5982\u4f55\u5feb\u901f\u8be2\u95ee\u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\uff1f \u4ecd\u65e7\u662f\u500d\u589e\uff0c\u968f\u7740\u500d\u589e \\(LCA\\) \u7684 \\(f[i][j]\\) \u540c\u6b65\u8bb0\u5f55\u4e00\u4e2a \\(dis[i][j]\\) \u5373\u53ef\u3002 \u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 void init () { for ( int j = 1 ; j <= 18 ; ++ j ) { for ( int i = 1 ; i <= n ; ++ i ) { f [ i ][ j ] = f [ f [ i ][ j - 1 ]][ j - 1 ]; dis [ i ][ j ] = dis [ i ][ j - 1 ] + dis [ f [ i ][ j - 1 ]][ j - 1 ]; } } } int dist ( int u , int v ) { i64 ret = 0 ; if ( dep [ u ] < dep [ v ]) swap ( u , v ); for ( int i = 18 ; i >= 0 ; -- i ) { if ( dep [ f [ u ][ i ]] >= dep [ v ]) { u = f [ u ][ i ]; ret += dis [ u ][ i ]; } } if ( u == v ) return ret ; for ( int i = 18 ; i >= 0 ; -- i ) { if ( f [ u ][ i ] != f [ v ][ i ]) { u = f [ u ][ i ], v = f [ v ][ i ]; ret += ( dis [ u ][ i ] + dis [ v ][ i ]); } } return ret + dis [ u ][ 0 ] + dis [ v ][ 0 ]; } \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u8bb0\u5f55\u4e24\u4e2a \\(dep\\) \uff0c\u4e00\u4e2a\u662f\u628a\u6811\u770b\u4f5c\u65e0\u6743\u6811\u65f6\u5019\u7684 \\(dep\\) \uff0c\u53e6\u5916\u4e00\u4e2a\u662f\u628a\u6811\u770b\u4f5c\u5e26\u6743\u6811\u65f6\u5019\u7684 \\(dep\\) \u3002 \u7136\u540e\u5c31\u53ef\u4ee5\u7ee7\u7eed\u7528 \\(d[u] + d[v] - 2d[lca]\\) \u4e86\u3002 1 Tag \uff1a \u6811\u7684\u76f4\u5f84 / \u5e26\u6743\u6811\u4e0a\u70b9\u5bf9\u8ddd\u79bb","title":"Acwing390 \u9003\u5b66\u7684\u5c0f\u5b69"},{"location":"%E6%80%9D%E8%80%83/%E4%B8%89%E6%9C%88%E5%A5%BD%E9%A2%98/","text":"\u4e09\u6708\u597d\u9898\u6539\u9519 \u00b6 CF1646E Power Board \u00b6 \u7ed9\u4f60\u4e00\u4e2a \\(n\\times m\\) \u7684\u77e9\u9635\uff0c\u4e14 \\(a_{i,j}=i^j\\) \u3002\u6c42\u8fd9\u4e2a\u77e9\u9635\u5f53\u4e2d\u6709\u591a\u5c11\u4e0d\u540c\u7684\u6570\u3002 1e6\u3002 \u66b4\u529b\u660e\u663e\u7206\u70b8\u3002 \u8003\u8651\u5bb9\u65a5\u4e4b\u7c7b\u7684\u505a\u6cd5\u6765\u53bb\u91cd\u3002 \u53d1\u73b0\u4e24\u4e2a\u4e0d\u540c\u884c \\((i,j)\\) \u4f1a\u751f\u6210\u91cd\u590d\u7684\u6570\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(\\exist d,a,b \\ |\\ i=d^a,j=d^b\\) \u3002 \u6bd4\u5982 \\(2,4,8\\) \u8fd9\u79cd\u3002 \u5217\u4e00\u4e2a\u8868\uff1a \\[\\begin{bmatrix}2^1&2^2&2^3&\\dots&2^m \\\\4^1&4^2&4^3&\\dots&4^m\\\\8^1&8^2&8^3&\\dots&8^m\\end{bmatrix}\\] \u5316\u6210 \\(2\\) \u7684\u6b21\u5e42\u5f62\u5f0f\uff1a \\[\\begin{bmatrix}2^1&2^2&2^3&\\dots&2^m \\\\2^2&2^4&2^6&\\dots&2^{2m}\\\\2^3&2^6&2^9&\\dots&2^{3m}\\end{bmatrix}\\] \u8003\u8651\u6307\u6570\uff1a \\[\\begin{bmatrix}1&2&3&\\dots&m \\\\2&4&6&\\dots&{2m}\\\\3&6&9&\\dots&{3m}\\end{bmatrix}\\] \u5982\u679c\u53ea\u8003\u8651 \\(2,4,8,16\\) \u8fd9\u79cd\u7684\u8bdd\uff0c\u7b54\u6848\u5c31\u662f\u4e0a\u9762\u7b2c\u4e09\u4e2a\u8868\u5f53\u4e2d\u4e0d\u540c\u7684\u6570\u7684\u4e2a\u6570\u3002 \u56e0\u4e3a\u6211\u4eec\u53bb\u6389\u5e95\u6570\u7684\u8fc7\u7a0b\u5c31\u662f\u6c42\u4e86\u4e00\u4e2a \\(\\log\\) \uff0c\u6240\u4ee5\u8868\u91cc\u9762\u7684\u6570\u662f \\(\\log\\) \u7ea7\u522b\u7684\u3002 \u5199\u4e00\u4e2a\u66b4\u529b\u5373\u53ef\u67e5\u8be2\u3002 \u8f6c\u5316\u5230\u539f\u9898\uff0c\u5c31\u662f\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4e0d\u662f\u67d0\u4e00\u4e2a\u6574\u6570\u7684\u5927\u4e8e\u7b49\u4e8e \\(2\\) \u7684\u6574\u6570\u6b21\u5e42\u7684\u6570\u6c42\u4e00\u6b21\u3002 std::bitset \u5373\u53ef\u3002 \u601d\u8def\u6765\u81ea\uff1a https://codeforces.com/blog/entry/100584?#comment-892898 @Suri429 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int si = 1e6 + 10 ; int s = 1 , n , m ; int a [ si ], b [ si ]; std :: bitset < si * 20 > c ; #undef int int main (){ #define int long long scanf ( \"%lld%lld\" , & n , & m ); for ( register int i = 1 ; i <= 20 ; ++ i ){ for ( register int j = 1 ; j <= m ; ++ j ) c [ i * j ] = 1 ; a [ i ] = c . count (); } for ( register int i = 2 ; i <= n ; ++ i ){ if ( b [ i ] == 1 ) continue ; int k = 1 ; b [ i ] = 1 ; for ( register int j = i * i ; j <= n ; j = j * i ) b [ j ] = 1 , k = k + 1 ; s = s + a [ k ]; } return printf ( \"%lld\" , s ), 0 ; #undef int } 1 Tag : \u66b4\u529b / bitset / \u601d\u7ef4 CF1647E Madoka and the Sixth-graders \u00b6 \u7ed9 \\(n\\) \u5f20\u684c\u5b50\uff0c\u521d\u59cb\u7684\u65f6\u5019\u684c\u5b50\u4e0a\u5750\u7740\u7684\u5b66\u751f\u7684\u7f16\u53f7\u5206\u522b\u4e3a \\(a_1, a_2, \\dots , a_n\\) \u3002 \u4e14 \\(a\\) \u662f\u4e00\u4e2a \\(n\\) \u7684\u6392\u5217\uff0c\u7136\u540e\u7ed9\u5b9a\u51e0\u7ec4\u6709\u5411\u5173\u7cfb \\((i,j)\\) \uff0c\u8868\u793a\u6bcf\u8fc7\u4e00\u8282\u8bfe\uff0c\u684c\u5b50 \\(i\\) \u7684\u5b66\u751f\u4f1a\u79fb\u52a8\u5230\u684c\u5b50 \\(j\\) \u3002 \u5982\u679c\u4e00\u4e2a\u684c\u5b50\u4e0a\u6709\u8d85\u8fc7\u4e00\u4e2a\u4eba\uff0c\u7559\u4e0b\u7f16\u53f7\u6700\u5c0f\u7684\uff0c\u7136\u540e\u8e22\u51fa\u5176\u4ed6\u7684\u3002 \u95e8\u5916\u7684\u5b66\u751f\u7f16\u53f7\u4e3a \\(n+1,n+2,\\dots\\) \u3002 \u5982\u679c\u6709\u7a7a\u7684\u4f4d\u7f6e\uff0c\u6309\u7167\u4f4d\u7f6e\u7f16\u53f7\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u8ba9\u95e8\u5916\u7684\u5b66\u751f\u4f9d\u6b21\u8fdb\u6765\u586b\u4e0a\u3002 \u7ed9\u5b9a\u6700\u7ec8\u7684\u72b6\u6001 \\(b\\) \uff0c\u6c42\u51fa\u6ee1\u8db3\u6761\u4ef6\u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u7684 \\(a\\) \u3002 1e5\u3002 \u4fdd\u8bc1\u6bcf\u8282\u8bfe\u603b\u662f\u6709\u5b66\u751f\u88ab\u8e22\u51fa\uff0c\u5b66\u751f\u7684\u7f16\u53f7\u4e92\u4e0d\u76f8\u540c\u3002 \u53d1\u73b0\u9898\u76ee\u4fdd\u8bc1\u4e86 \\(p\\) \u5f53\u4e2d\u5fc5\u7136\u6709\u91cd\u590d\u5143\u7d20\u3002 \u6240\u4ee5\u6bcf\u4e00\u8f6e\u5fc5\u7136\u4f1a\u6709\u4eba\u88ab\u5f00\u9664\uff0c\u7b49\u4ef7\u4e8e\u6bcf\u4e00\u8f6e\u5fc5\u7136\u6709\u4eba\u8fdb\u5165\u3002 \u6240\u4ee5\u6559\u5ba4\u91cc\u7684\u6240\u6709\u6570\u7684\u6700\u5927\u503c\u4e00\u5b9a\u662f\u5355\u8c03\u4e0a\u5347\u7684\u3002 \u53ef\u4ee5\u6c42\u51fa\u5f53\u524d\u7ecf\u8fc7\u7684\u8f6e\u6570 \\(k =\\) (*max_element(b + 1, b + 1 + n) - n) / (n - set<int>(p + 1, p + 1 + n).size()) \u56e0\u4e3a\u7c7b\u4f3c\u6837\u4f8b\u4e00\u5f53\u4e2d\u7684 \u201c\u53cc\u5411\u8fb9\u201d \u5f88\u4e0d\u597d\u5904\u7406\u3002 \u6240\u4ee5\u5f53\u52a1\u4e4b\u6025\u662f\u7ecf\u8fc7 \\(k\\) \u8f6e\u4e4b\u540e\uff0c\u539f\u6765\u5728\u67d0\u4e00\u4e2a\u70b9\u7684 stu \u4f1a\u5728\u54ea\u4e00\u4e2a\u70b9\u51fa\u73b0\u3002 \u8bbe\u8fd9\u4e2a\u70b9\u4e3a \\(dest[i]\\) \u5e76\u4e14\u5148\u4e0d\u8003\u8651\u88ab\u5f00\u9664\u7684\u60c5\u51b5\u3002 \u8fd9\u4e2a\u5982\u679c\u76f4\u63a5\u9012\u63a8\u662f \\(\\text{O}(nk)\\) \u7684\uff0c\u5fc5\u7136\u4f1a TLE\u3002 \u7136\u540e\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u5173\u4e8e \\(2\\) \u7684\u6b63\u6574\u6570\u6b21\u5e42\u5177\u6709 \u5212\u5206\u6027 \u3002 \u4e5f\u5c31\u662f\u8bbe \\(t[i][j]\\) \u8868\u793a \\(i\\) \u8df3 \\(2^j\\) \u6b65\u53ef\u4ee5\u5230\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u5fc5\u7136\u53ef\u4ee5\u5f97\u5230 \\(t[i][j] = t[ t[i][j - 1] ][j - 1]\\) . \u66f4\u4e00\u822c\u7684\uff0c \\(t[i][j] = t[ t[ t[ t[i][j-3] ][j-3] ][j-2] ][j-1]\\) \uff0c\u8fd9\u6837\u53ef\u4ee5\u4e00\u76f4\u5d4c\u5957\u4e0b\u53bb\u3002 \u90a3\u4e48\u8fd9\u4e2a\u9012\u63a8\u5c31\u53ef\u4ee5\u76f4\u63a5\u5229\u7528 \u500d\u589e\u4f18\u5316 \u3002 \u6240\u4ee5\u628a \\(k\\) \u4e8c\u8fdb\u5236\u62c6\u5206\uff0c\u679a\u4e3e \\(k\\) \u7684\u6bcf\u4e00\u4f4d\uff0c\u5982\u679c\u5f53\u524d\u4f4d\u662f \\(1\\) \uff0c \u90a3\u4e48\u7ed9\u6bcf\u4e00\u4e2a \\(dest\\) \u8df3 \\(2^j\\) \u6b65\uff0c \\(j\\) \u662f\u5f53\u524d\u4f4d\u3002 \u521d\u59cb\u5316 \\(to[i][0] = p[i]\\) \u3002 \u5bf9\u4e8e\u56e0\u4e3a \\(p[i]\\) \u6709\u91cd\u590d\u7684\uff0c\u6240\u4ee5 \\(dest[i]\\) \u4e5f\u5fc5\u7136\u4f1a\u6709\u91cd\u590d\u7684\u3002 \u5047\u8bbe\u67d0\u4e00\u4e2a\u70b9 \\(i\\) \uff0c\u6709\u4e09\u4e2a\u70b9\uff08\u5b9e\u9645\u4e0a\u4e2a\u6570\u4efb\u610f\uff0c\u6b64\u5904\u4e3e\u4f8b\u9700\u8981\uff09 \\(A, B, C\\) \u53ef\u4ee5\u7ecf\u8fc7 \\(k\\) \u8f6e\u5230\u8fbe\u5b83\uff0c \u90a3\u4e48\u7559\u5728\u8fd9\u4e2a\u5730\u65b9\u7684\uff08 \\(b[i]\\) \uff09\u5fc5\u7136\u662f\u8fd9\u4e09\u70b9\u8fc7\u6765\u7684\u5b66\u751f\u5f53\u4e2d\u7f16\u53f7\u6700\u5c0f\u7684\uff0c \u6240\u4ee5\u6700\u5f00\u59cb\uff08 \\(k = 0\\) \uff09\u7684\u65f6\u5019\uff0c \\(A, B, C\\) \u5f53\u4e2d\u5fc5\u7136\u6709\u4e00\u4e2a\u70b9\u7684\u5b66\u751f\u662f \\(b[i]\\) \u3002 \u4e3a\u4e86\u8ba9\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u8003\u8651\u8ba9 \\(A, B, C\\) \u5f53\u4e2d\u7f16\u53f7\u6700\u5c0f\u7684\u4e00\u4e2a\u70b9\u521d\u59cb\u5750\u4e0a \\(b[i]\\) \uff0c\u4e5f\u5c31\u662f\u8ba9\u8fd9\u4e2a\u70b9\u7684 \\(a = b[i]\\) \u3002 \u7136\u540e\u73b0\u5728\u5c31\u5df2\u7ecf\u586b\u597d\u4e86\u4e00\u4e9b\u70b9\u3002 \u7ef4\u62a4\u5269\u4e0b\u7684\uff0c\u7f16\u53f7\u5728 \\(1 \\sim n\\) \u5f53\u4e2d\u7684\u5b66\u751f\u96c6\u5408 \\(S\\) \uff08\u4e3a\u4ec0\u4e48\u662f \\(1 \\sim n\\) \u539f\u56e0\u663e\u7136\uff09\u3002 \u7136\u540e\u4ece\u524d\u5f80\u540e\u626b\u63cf \\(a\\) \u5f53\u4e2d\u6240\u6709\u8fd8\u6ca1\u6709\u7b54\u6848\u7684\u70b9\uff0c\u5bf9\u4e8e\u5f53\u4e2d\u7684\u67d0\u4e00\u4e2a\u70b9 \\(i\\) \uff0c\u5b83\u7ecf\u8fc7 \\(k\\) \u8f6e\u53bb\u5230\u7684\u5730\u65b9\u662f \\(dest[i]\\) \u3002 \u90a3\u4e48\u5b83\u7684 \\(a[i]\\) \u5fc5\u7136\u8981\u5927\u4e8e\u6240\u6709 \\(dest = dest[i]\\) \u7684\u70b9\u5f53\u4e2d\u7f16\u53f7\u6700\u5c0f\u7684\u90a3\u4e2a\u70b9\u521d\u59cb\u7684 \\(a\\) \uff0c\u4e5f\u5c31\u662f \\(b[dest[i]]\\) \u3002 \u6240\u4ee5\u5728\u96c6\u5408 \\(S\\) \u5f53\u4e2d\u4e8c\u5206\u4e00\u4e2a\u5927\u4e8e \\(b[dest[i]]\\) \u7684\uff0c\u6700\u5c0f\u7684\u70b9\u586b\u4e0a\u53bb\u5c31\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 #include <set> #include <cmath> #include <bitset> #include <cstring> #include <iostream> #include <algorithm> #include <unordered_set> using namespace std ; const int si = 1e5 + 10 ; int n ; int a [ si ], b [ si ], p [ si ]; int t [ si ][ 51 ]; int dest [ si ]; int tmp [ si ]; int main () { cin >> n ; int mx = -1 ; bitset < si > vis ; for ( int i = 1 ; i <= n ; ++ i ) cin >> p [ i ], vis [ p [ i ]] = true ; for ( int i = 1 ; i <= n ; ++ i ) cin >> b [ i ], mx = max ( mx , b [ i ]); int k = ( mx - n ) / ( n - vis . count ()); // int k = (*max_element(b + 1, b + 1 + n) - n) / (n - unordered_set<int>(p + 1, p + 1 + n).size()); int lg = ( int )( log ( k ) / log ( 2 )) + 1 ; cerr << k << \" \" << lg << endl ; for ( int i = 1 ; i <= n ; ++ i ) t [ i ][ 0 ] = p [ i ]; for ( int j = 1 ; j <= lg ; ++ j ) { for ( int i = 1 ; i <= n ; ++ i ) { t [ i ][ j ] = t [ t [ i ][ j - 1 ]][ j - 1 ]; } } for ( int i = 1 ; i <= n ; ++ i ) dest [ i ] = i ; for ( int j = lg ; j >= 0 ; -- j ) { if ( k >> j & 1 ) { for ( int i = 1 ; i <= n ; ++ i ) { dest [ i ] = t [ dest [ i ]][ j ]; if ( t [ dest [ i ]][ j ] == 0 ) cerr << \"Error on #\" << i << \", \" << j << endl ; } } } // for(int i = 1; i <= n; ++i) cout << dest[i] << endl; sort ( p + 1 , p + 1 + n ); int m = unique ( p + 1 , p + 1 + n ) - p - 1 ; // cout << m << endl; // for(int i = 1; i <= m; ++i) cout << p[i] << endl; memset ( a , 0x3f , sizeof a ); memset ( tmp , 0x3f , sizeof tmp ); set < int > rest ; for ( int i = 1 ; i <= n ; ++ i ) { if ( tmp [ dest [ i ]] == 0x3f3f3f3f ) tmp [ dest [ i ]] = i ; rest . insert ( i ); } // for(int i = 1; i <= n; ++i) cout << tmp[i] << endl; for ( int i = 1 ; i <= m ; ++ i ) { if ( tmp [ p [ i ]] == 0x3f3f3f3f ) continue ; a [ tmp [ p [ i ]]] = b [ p [ i ]]; // cerr << b[p[i]] << \"$\"; auto pos = rest . find ( b [ p [ i ]]); if ( pos == rest . end ()) cerr << \"Error\" ; rest . erase ( pos ); } for ( int i = 1 ; i <= n ; ++ i ) { if ( a [ i ] == 0x3f3f3f3f ) { auto pos = rest . lower_bound ( b [ dest [ i ]]); // cerr << b[dest[i]] << \"#\"; if ( pos == rest . end ()) cerr << \"Error\" ; a [ i ] = * pos , rest . erase ( pos ); } } for ( int i = 1 ; i <= n ; ++ i ) cout << a [ i ] << \" \" ; cout << endl ; return 0 ; } 1 Tag : \u500d\u589e / \u56fe\u8bba CF1650G Counting Shortcuts \u00b6 \u7ed9\u5b9a\u4e00\u5f20\u65e0\u6743\u65e0\u5411\u56fe\uff0c\u95ee\u9898\u4ece\u67d0\u4e2a\u70b9 \\(s\\) \u5230\u67d0\u4e2a\u70b9 \\(t\\) \u7684\u597d\u8def\u5f84\u7684\u6761\u6570\u5bf9 \\(1e9+7\\) \u53d6\u6a21\u3002 \u4e00\u4e2a\u8def\u5f84\u662f\u597d\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e2a\u8def\u5f84\u7684\u957f\u5ea6\u548c \\(s,t\\) \u4e4b\u95f4\u7684\u6700\u77ed\u8def\u7684\u957f\u5ea6\u5dee\u4e0d\u8d85\u8fc7 \\(1\\) \u3002 \\(n,m\\) 2e5\u3002 \u9996\u5148\u8003\u8651\u6c42\u51fa \\(s\\) \u51fa\u53d1\u5230\u6bcf\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u3002 \u7136\u540e DP \u5373\u53ef\u3002 \u65b9\u7a0b\u76f4\u63a5\u770b\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 dijkstra ( s ); // Bfs(s), ReBfs(s); vector < pair < int , int > > Dis ; for ( int i = 1 ; i <= n ; ++ i ) { Dis . push_back ({ dis [ i ], i }); dp [ i ][ 0 ] = dp [ i ][ 1 ] = 0 ; } sort ( Dis . begin (), Dis . end ()); dp [ s ][ 0 ] = 1 , dp [ s ][ 1 ] = 0 ; for ( auto x : Dis ) { int u = x . second ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( dis [ u ] == dis [ v ] + 1 ) dp [ u ][ 0 ] = ( dp [ u ][ 0 ] + dp [ v ][ 0 ]) % mod ; } } for ( auto x : Dis ) { int u = x . second ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( dis [ u ] == dis [ v ] + 1 ) dp [ u ][ 1 ] = ( dp [ v ][ 1 ] + dp [ u ][ 1 ]) % mod ; else if ( dis [ u ] == dis [ v ]) dp [ u ][ 1 ] = ( dp [ v ][ 0 ] + dp [ u ][ 1 ]) % mod ; } } cout << ( dp [ t ][ 0 ] + dp [ t ][ 1 ]) % mod << endl ; 1 Tag : DP / \u56fe\u8bba / \u6700\u77ed\u8def CF1654E Arithmetic Operations \u00b6 \u7ed9\u4e00\u4e2a\u6570\u5217 \\(a\\) \uff0c\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u4efb\u610f\u4fee\u6539\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e00\u4e2a\u6570\uff0c\u4fee\u6539\u540e\u7684\u6570\u53ef\u4ee5\u662f\u6b63\u6574\u6570\uff0c\u8d1f\u6574\u6570\u548c\u96f6\u3002 \u95ee\u4f7f\u5f97 \\(a\\) \u6210\u4e3a\u7b49\u5dee\u6570\u5217\u7684\u6700\u5c0f\u7684\u64cd\u4f5c\u6b21\u6570\u3002 1e5\u3002 \u628a\u6bcf\u4e2a\u5143\u7d20\u770b\u6210\u4e00\u4e2a\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684\u70b9 \\((i,a_i)\\) \u3002 \u7136\u540e\u8981\u6c42\u7684\u53ef\u4ee5\u8f6c\u5316\u4e3a\u6c42\u8fd9\u4e2a\u5e73\u9762\u4e0a\u6700\u591a\u6709\u591a\u5c11\u4e2a\u70b9\u5171\u7ebf\uff0c\u7136\u540e\u7528 \\(n\\) \u51cf\u53bb\u8fd9\u4e2a\u503c\u5373\u53ef\u3002 \u4f7f\u7528 DP \u5c31\u53ef\u6c42\u51fa\u8fd9\u4e2a\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 #include <map> #include <iostream> #include <algorithm> const int si = 1e5 + 10 ; const int ssi = 70 ; int n , a [ si ]; int b [ si * ssi ]; std :: map < int , int > dp [ si ]; int solve () { int ans = 0 ; for ( int d = 0 ; d < ssi ; ++ d ) { for ( int i = 0 ; i < n ; ++ i ) { ans = std :: max ( ans , ++ b [ a [ i ] + ( n - i ) * d ]); } for ( int i = 0 ; i < n ; ++ i ) { b [ a [ i ] + ( n - i ) * d ] = 0 ; } } for ( int i = 0 ; i < n ; ++ i ) { for ( int j = std :: max ( 0 , i - si / ssi ); j < i ; ++ j ) { int d = ( a [ i ] - a [ j ]) / ( i - j ); int r = ( a [ i ] - a [ j ]) % ( i - j ); if ( r == 0 && d >= ssi ) { dp [ i ][ d ] = std :: max ( dp [ i ][ d ], dp [ j ][ d ] + 1 ); ans = std :: max ( ans , dp [ i ][ d ] + 1 ); } } } for ( int i = 0 ; i < n ; ++ i ) dp [ i ]. clear (); return ans ; } int main () { std :: cin >> n ; for ( int i = 0 ; i < n ; ++ i ) std :: cin >> a [ i ]; int res = solve (); std :: reverse ( a , a + n ); res = std :: max ( res , solve ()); std :: cout << n - res << std :: endl ; } 1 Tag : DP / \u601d\u7ef4 CF1657F Words On Tree \u00b6 \u7ed9\u4e00\u68f5\u6811\uff0c\u7ed9 \\(q\\) \u4e2a\u4e09\u5143\u7ec4 \\((x_i,y_i,s_i)\\) \uff0c \\(x_i,y_i\\) \u662f\u8282\u70b9\u7f16\u53f7\uff0c \\(s_i\\) \u662f\u5b57\u7b26\u4e32\uff0c\u957f\u5ea6\u548c\u6811\u4e0a \\((x_i,y_i)\\) \u7684\u7b80\u5355\u8def\u5f84\u957f\u5ea6\u4e00\u81f4\u3002 \u6784\u9020\u4e00\u68f5\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u4e0a\u6709\u4e00\u4e2a\u5b57\u7b26\uff0c\u4f7f\u5f97\u5b83\u6ee1\u8db3\u8fd9 \\(q\\) \u4e2a\u4e09\u5143\u7ec4\u7684\u7ea6\u675f\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4e09\u5143\u7ec4\uff0c\u9700\u8981\u6ee1\u8db3\uff0c\u8def\u5f84 \\((x_i,y_i)\\) \u4e0a\u7684\u5b57\u7b26\u4e32\u8981\u4e48\u662f \\(s_i\\) \uff0c\u8981\u4e48\u662f \\(reverse(s_i)\\) \u3002 9s, 4e5\u3002 \u8003\u8651\u66b4\u529b 2-SAT\u3002 \u4f46\u662f\u8fd9\u6837\u6bcf\u4e2a\u8282\u70b9\u7684\u5019\u9009\u503c\u6709 26 \u4e2a\uff0c\u6ca1\u6cd5\u505a\u3002 \u90a3\u4e48\u628a\u6bcf\u4e2a\u4e09\u5143\u7ec4\u8fd9\u6837\u5904\u7406\uff1a \u628a \\(s_i\\) \u653e\u5230\u8fd9\u4e2a\u8def\u5f84\u4e0a\uff0c\u7136\u540e\u628a \\(rev(s_i)\\) \u653e\u5230\u8fd9\u4e2a\u8def\u5f84\u4e0a\u3002 \u7136\u540e\u5c31\u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2a\u8282\u70b9\u7684\u5019\u9009\u96c6\u5408\u5927\u5c0f\u6700\u5927\u4e3a \\(2\\) \u3002 \uff08\u5bf9\u6bcf\u4e2a\u8282\u70b9\uff0c\u5bf9\u7ecf\u8fc7\u5b83\u7684\u4e09\u5143\u7ec4\u7559\u4e0b\u7684\u5019\u9009\u96c6\u5408\u6c42\u4ea4\u5c31\u53ef\u4ee5\u5f97\u5230\uff09 \u7136\u540e\u5c31\u53ef\u4ee5 2-SAT \u4e86\u3002 \u4f46\u662f\u8fd9\u6837\u76f4\u63a5\u5b9e\u73b0\u4f1a\u975e\u5e38\u590d\u6742\u3002 \u8003\u8651\u53e6\u5916\u4e00\u79cd\u5199\u6cd5\u3002 \u626b\u63cf\u6bcf\u4e00\u4e2a\u4e32\uff0c\u7136\u540e\u5185\u5c42\u626b\u63cf\u8def\u5f84\u4e0a\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u5f53\u524d\u8282\u70b9\u6ca1\u6709\u5019\u9009\u96c6\u5408\uff0c\u7ed9\u4ed6\u52a0\u4e0a\u3002 \u7136\u540e\u8003\u8651\u8fd9\u6837\u7684\u4e00\u4e2a\u8fc7\u7a0b\uff1a 1 2 3 4 5 cand [ i ][ 0 ] cand [ i ][ 1 ] ( \u5f53\u524d\u8282\u70b9\u7684\u5019\u9009\u96c6\u5408 ) s [ j ] s [ len - j - 1 ] ( rev ( s )[ j ]) ( \u5f53\u524d\u626b\u63cf\u5230\u7684\u4e32\u5728\u8fd9\u4e2a\u70b9\u7684\u5019\u9009\u96c6\u5408 ) \u5982\u679c \\(s_j\\) \u4e0d\u7b49\u4e8e \\(cand[i][0]\\) \uff0c\u90a3\u4e48\u8bc1\u660e\u9009 \\(s[j]\\) \u5c31\u4e0d\u80fd\u9009 \\(cand[i][0]\\) \u3002 \u6240\u4ee5\u94fe\u63a5 \\(s[j] \\to cand[i][1]\\) \uff0c\u7136\u540e\u628a\u9006\u5426\u547d\u9898 \\(cand[i][0] \\to s[len-j-1]\\) \u94fe\u63a5\u4e0a\u3002 \u5176\u5b83\u4e09\u79cd\u60c5\u51b5\u540c\u7406\u3002 \u8fd9\u4e2a\u65f6\u5019\u518d\u8dd1 2-SAT \u5c31\u53ef\u4ee5\u4e86\u3002 \u56e0\u4e3a\u65f6\u9650 \\(9s\\) \u6240\u4ee5\u968f\u4fbf\u641e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 #include <cmath> #include <stack> #include <vector> #include <cstring> #include <iostream> #include <algorithm> #define c0 qwq #define c1 qaq using namespace std ; const int si = 16 * ( 1e5 + 10 ); int n , q ; int head [ si ], tot = 0 ; struct Edge { int ver , Next ; } e [ si << 1 ]; inline void add ( int u , int v ) { e [ tot ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot ++ ; } int dep [ si ], f [ si ][ 20 ]; int lg ; void dfs ( int u , int fa ) { dep [ u ] = dep [ fa ] + 1 , f [ u ][ 0 ] = fa ; for ( int i = 1 ; i <= lg ; ++ i ) f [ u ][ i ] = f [ f [ u ][ i -1 ]][ i -1 ]; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs ( v , u ); } } int Lca ( int u , int v ) { if ( dep [ u ] < dep [ v ]) swap ( u , v ); for ( int i = lg ; i >= 0 ; -- i ) if ( dep [ f [ u ][ i ]] >= dep [ v ]) u = f [ u ][ i ]; if ( u == v ) return u ; for ( int i = lg ; i >= 0 ; -- i ) if ( f [ u ][ i ] != f [ v ][ i ]) u = f [ u ][ i ], v = f [ v ][ i ]; return f [ u ][ 0 ]; } vector < int > G [ si ]; inline void Add ( int u , int v ) { G [ u ]. emplace_back ( v ); } int tim = 0 ; int dfn [ si ], low [ si ]; stack < int > s ; bool ins [ si ]; int cnt = 0 ; int c [ si ]; void tarjan ( int u ) { dfn [ u ] = low [ u ] = ++ tim ; s . push ( u ), ins [ u ] = true ; for ( int v : G [ u ]) { if ( ! dfn [ v ]) tarjan ( v ), low [ u ] = min ( low [ u ], low [ v ]); else if ( ins [ v ]) low [ u ] = min ( low [ u ], dfn [ v ]); } if ( dfn [ u ] == low [ u ]) { int x ; ++ cnt ; do { x = s . top (), s . pop (); c [ x ] = cnt , ins [ x ] = false ; } while ( u != x ); } } int m ; char cand [ si ][ 2 ]; inline int Node ( int u , bool op ) { if ( op ) return u ; else return u + ( n + m ); } int main () { cin >> n >> q , lg = ( int )( log ( n ) / log ( 2 )) + 1 ; memset ( head , -1 , sizeof head ); memset ( ins , false , sizeof ins ); for ( int i = 1 ; i < n ; ++ i ) { int u , v ; cin >> u >> v ; add ( u , v ), add ( v , u ); } dfs ( 1 , 0 ); int now = 0 ; m = q ; while ( q -- ) { ++ now ; int u , v ; string s ; cin >> u >> v , cin >> s ; int len = ( int ) s . size (); int lca = Lca ( u , v ); vector < int > path , tmp ; while ( u != lca ) path . emplace_back ( u ), u = f [ u ][ 0 ]; path . emplace_back ( lca ); while ( v != lca ) tmp . emplace_back ( v ), v = f [ v ][ 0 ]; reverse ( tmp . begin (), tmp . end ()); for ( auto x : tmp ) path . emplace_back ( x ); // for(auto x : path) cout << x << ' '; cout << endl; for ( int i = 0 ; i < len ; ++ i ) { int x = path [ i ]; char c0 = s [ i ], c1 = s [ len - i - 1 ]; if ( ! cand [ x ][ 0 ] && ! cand [ x ][ 1 ]) cand [ x ][ 0 ] = c0 , cand [ x ][ 1 ] = c1 ; if ( cand [ x ][ 0 ] != c0 ) { Add ( Node ( now , 0 ), Node ( x + m , 1 )); Add ( Node ( x + m , 0 ), Node ( now , 1 )); } if ( cand [ x ][ 1 ] != c0 ) { Add ( Node ( now , 0 ), Node ( x + m , 0 )); Add ( Node ( x + m , 1 ), Node ( now , 1 )); } if ( cand [ x ][ 0 ] != c1 ) { Add ( Node ( now , 1 ), Node ( x + m , 1 )); Add ( Node ( x + m , 0 ), Node ( now , 0 )); } if ( cand [ x ][ 1 ] != c1 ) { Add ( Node ( now , 1 ), Node ( x + m , 0 )); Add ( Node ( x + m , 1 ), Node ( now , 0 )); } } } for ( int i = 1 ; i <= 2 * ( n + m ); ++ i ) { if ( ! dfn [ i ]) tarjan ( i ); } for ( int i = 1 ; i <= n ; ++ i ) { if ( ! cand [ i ][ 0 ]) cand [ i ][ 0 ] = cand [ i ][ 1 ] = 'a' ; } for ( int i = 1 ; i <= n + m ; ++ i ) { if ( c [ Node ( i , 0 )] == c [ Node ( i , 1 )]) return puts ( \"NO\" ), 0 ; } puts ( \"YES\" ); for ( int i = 1 ; i <= n ; ++ i ) { putchar ( cand [ i ][ c [ Node ( i + m , 0 )] > c [ Node ( i + m , 1 )] ] ); } puts ( \"\" ); return 0 ; } 1 Tag : LCA / \u601d\u7ef4 / 2 - SAT CF1656D K-good \u00b6 \u4e00\u4e2a\u6b63\u6574\u6570 \\(n\\) \u662f \\(k\\) Good \u7684\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(n\\) \u53ef\u4ee5\u88ab\u5206\u6210 \\(k\\) \u4e2a\u4e0d\u540c\u6b63\u6574\u6570\u7684\u548c\uff0c\u4e14\u8fd9 \\(k\\) \u4e2a\u6b63\u6574\u6570\u6a21 \\(k\\) \u610f\u4e49\u4e0b\u76f8\u4e92\u4e0d\u540c\u4f59\u3002 \u7ed9\u5b9a \\(n\\) \uff081e18\uff09\uff0c\u6c42\u51fa\u4efb\u610f\u4e00\u4e2a\u5408\u6cd5\u7684\uff0c \\(\\ge 2\\) \u7684 \\(k\\) \uff0c\u4f7f\u5f97 \\(n\\) \u662f \\(k\\) Good \u7684\u3002 \u8003\u8651\u628a \\(n\\) \u6309\u7167 \\(1,2,3,4,\\dots\\) \u7684\u65b9\u5f0f\u644a\u5230 \\(k\\) \u4e2a\u5730\u65b9\uff0c\u7136\u540e\u628a\u5269\u4e0b\u7684\u503c\u52a0\u4e0a\uff0c\u4f7f\u5f97\u6761\u4ef6\u6210\u7acb\u3002 \u7136\u540e\u53ef\u4ee5\u5217\u51fa\u4e00\u4e2a\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\uff1a \\(n \\equiv \\dfrac{k(k+1)}{2} (\\operatorname{mod} k)\\) \u3002 \u7136\u540e\u53d1\u73b0 \\(n\\) \u8fd8\u8981\u6ee1\u8db3 \\(\\ge \\dfrac{k(k+1)}{2}\\) \u624d\u53ef\u4ee5\u3002 \u6240\u4ee5\u73b0\u5728\u5c31\u5f97\u5230\u4e86\u5224\u5b9a\u7684\u4e24\u4e2a\u6761\u4ef6\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c \\(2^k\\) \u5f62\u5f0f\u7684\u6570\u5fc5\u7136\u65e0\u89e3\uff0c\u5176\u4ed6\u5fc5\u7136\u6709\u89e3\u3002 \u5947\u6570\u76f4\u63a5\u4ee4 \\(k = 2\\) \u5373\u53ef\u3002 \u7136\u540e\u6709\u4e00\u4e2a\u6211\u8fd8\u6682\u65f6\u4e0d\u4f1a\u8bc1\u660e\u7684\u7ed3\u8bba\u3002 \u6392\u9664\u5b8c\u65e0\u89e3\u60c5\u51b5\u4e4b\u540e\u3002 \u628a\u4e00\u4e2a\u6570\u7684\u6240\u6709 \\(2\\) \u56e0\u5b50\u63d0\u51fa\u6765\u7ec4\u6210 \\(2^k\\) \u3002 \u7136\u540e\u7b54\u6848\u5fc5\u7136\u662f \\(2^{k+1}\\) \u548c \\(\\dfrac{n}{2^k}\\) \u7684\u6700\u5c0f\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #include <cmath> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; using i64 = long long ; using i128 = __uint128_t ; int T ; inline i64 solve ( i64 n ) { i64 tmp = n ; i64 cnt = 1 ; while ( tmp % 2l l == 0l l ) { tmp /= 2l l , cnt *= 2 ; } if ( tmp == 1l l ) return -1ll ; return min ( tmp , 2 * cnt ); } int main () { cin >> T ; while ( T -- ) { i64 n ; cin >> n ; cout << solve ( n ) << endl ; } return 0 ; } 1 Tag : \u6570\u5b66 / \u6570\u8bba / \u540c\u4f59 CF1656E Equal Tree Sums \u00b6 \u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u8981\u6c42\u4f60\u7ed9\u6bcf\u4e2a\u8282\u70b9\u4e00\u4e2a\u6743\u503c\uff0c\u4f7f\u5f97\u53bb\u6389\u6811\u4e2d\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u4e4b\u540e\uff0c \u4efb\u610f\u4e24\u4e2a\u8fde\u901a\u5757\u4e4b\u5185\u7684\u548c\u662f\u76f8\u7b49\u7684\u3002 1e5\u3002 \u7ed3\u8bba\uff1a\u9ed1\u767d\u67d3\u8272\uff0c\u4e00\u79cd\u989c\u8272\u7684\u8282\u70b9\u8d4b\u503c\u4e3a \\(-deg(u)\\) \uff0c\u53e6\u5916\u4e00\u79cd \\(+deg(u)\\) \u3002 \u8003\u8651\u4e00\u4e2a\u70b9\u5bf9\u4e8e\u548c\u5b83\u76f8\u8fde\u7684\u6240\u6709\u9876\u70b9\uff0c\u5728\u5220\u9664\u4e4b\u540e\u505a\u7684\u8d21\u732e\u5373\u53ef\u3002 \u66f4\u597d\u4e00\u70b9\u7684\u8bc1\u660e\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int si = 1e5 + 10 ; int n , T ; int head [ si ], tot = 0 ; struct Edge { int ver , Next ; } e [ si << 1 ]; int deg [ si ]; inline void add ( int u , int v ) { e [ tot ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot ++ ; } int c [ si ]; void dfs ( int u , int fa , int col ) { if ( c [ u ] != -1 ) return ; c [ u ] = col ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs ( v , u , 1 - col ); } } int main () { cin >> T ; while ( T -- ) { cin >> n ; memset ( c , -1 , sizeof c ), memset ( deg , 0 , sizeof deg ); tot = 0 , memset ( head , -1 , sizeof head ); for ( int i = 1 ; i < n ; ++ i ) { int u , v ; cin >> u >> v ; add ( u , v ), add ( v , u ); ++ deg [ u ], ++ deg [ v ]; } dfs ( 1 , 0 , 1 ); for ( int i = 1 ; i <= n ; ++ i ) { if ( c [ i ] == 0 ) cout << - deg [ i ] << \" \" ; else cout << deg [ i ] << \" \" ; } cout << endl ; } return 0 ; } 1 Tag : \u56fe\u8bba / \u601d\u7ef4 ABC243F Lottery \u00b6 Takahashi is participating in a lottery. Each time he takes a draw, he gets one of the \\(N\\) prizes available. Prize \\(i\\) is awarded with probability \\(\\dfrac{w_i}{\\sum^{N}_{j=1} w_j}\\) , The results of the draws are independent of each other. What is the probability that he gets exactly \\(M\\) different prizes from \\(K\\) draws? Find it modulo \\(998244353\\) . \\(1\\le N,M,K \\le 50\\) \u3002 \\(M \\le N\\) \u3002 \u5b9a\u4e49 \\(P(i) = \\dfrac{w_i}{\\sum^{N}_{j=1} w_j}\\) \u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u79cd\u5143\u7d20\u88ab\u9009\u4e86 \\(c_i\\) \u6b21\uff0c\u90a3\u4e48\u5b83\u7684\u6982\u7387\u5c31\u662f \\(P(i)^{c_i}\\) \u7136\u540e\u8003\u8651\u7528\u53ef\u91cd\u96c6\u7684\u6392\u5217\u6570\u516c\u5f0f\u7b97\u3002 \u4f46\u662f\u8fd9\u91cc\u8981\u7a0d\u5fae\u9b54\u6539\u4e00\u4e0b\u3002 \u90a3\u4e48\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u67ff\u5b50\uff1a \\[\\dfrac{K!}{\\prod\\limits_{i = 1}^{N} c_i!} \\times \\prod\\limits_{i=1}^{N} P(i)^{c_i}, \\sum c_i = K, |\\{i\\ |\\ c_i \\not= 0\\}|=M\\] \u8fd9\u4e2a\u5c31\u662f\u7b54\u6848\u3002 \u5176\u4e2d \\(c_i\\) \u8868\u793a \\(i\\) \u8fd9\u79cd\u7269\u54c1\u88ab\u9009\u4e86\u591a\u5c11\u6b21\uff0c\u53ef\u4ee5\u662f \\(0\\) \u3002 \\(K!\\) \u662f\u5e38\u6570\uff0c\u6240\u4ee5\u63d0\u51fa\u6765\uff1a \\[K!\\times \\dfrac{\\prod\\limits_{i=1}^{N} P(i)^{c_i}}{\\prod\\limits_{i = 1}^{N} c_i!}\\] \u53d1\u73b0\u540e\u9762\u8fd9\u4e2a\u90e8\u5206\u53ef\u4ee5\u5316\u6210 \\[\\prod\\limits_{i = 1}^{n} \\dfrac{P(i)^{c_i}}{c_i}\\] \u5fc5\u7136\u53ef\u4ee5\u9012\u63a8\u3002 \u7136\u540e\u8bbe \\(dp[i][j][k]\\) \u8868\u793a \\(N = i, M = j, K = k\\) \u7684\u65f6\u5019\u7684\u8fd9\u4e2a\u4e1c\u897f\u3002 \u8003\u8651\u679a\u4e3e\u6bcf\u4e00\u79cd\u7269\u54c1\u9009\u591a\u5c11\u4e2a\u5373\u53ef\u8f6c\u79fb\u3002 \u590d\u6742\u5ea6 \\(\\text{O}(NMK^2)\\) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 #include <cstring> #include <iostream> #include <algorithm> using namespace std ; using i64 = long long ; const int si = 50 + 10 ; constexpr int mod = 998244353 ; int N , M , K ; i64 dp [ si ][ si ][ si ]; i64 fact [ si ]; int w [ si ], sum = 0 ; inline i64 qpow ( i64 a , int b ) { i64 ans = 1 % mod ; for (; b ; b >>= 1 ) { if ( b & 1 ) ans = ans * a % mod ; a = a * a % mod ; } return ans ; } inline i64 inv ( int a ) { return qpow ( a , mod - 2 ) % mod ; } int p [ si ]; int main () { cin >> N >> M >> K ; for ( int i = 1 ; i <= N ; ++ i ) { cin >> w [ i ]; sum += w [ i ]; } fact [ 0 ] = 1 ; for ( int i = 1 ; i <= K ; ++ i ) { fact [ i ] = fact [ i - 1 ] * i * 1l l % mod ; } for ( int i = 1 ; i <= N ; ++ i ) { p [ i ] = (( 1l l * w [ i ] % mod ) * inv ( sum )) % mod ; } dp [ 0 ][ 0 ][ 0 ] = 1 ; for ( int i = 1 ; i <= N ; ++ i ) { for ( int j = 0 ; j <= M ; ++ j ) { for ( int k = 0 ; k <= K ; ++ k ) { for ( int c = 0 ; c <= k ; ++ c ) { if ( j - ( c > 0 ) >= 0 ) dp [ i ][ j ][ k ] = ( dp [ i ][ j ][ k ] + dp [ i - 1 ][ j - ( c > 0 )][ k - c ] * qpow ( p [ i ], c ) % mod * inv ( fact [ c ]) % mod ) % mod ; } } } } cout << dp [ N ][ M ][ K ] * fact [ K ] % mod << endl ; return 0 ; } 1 Tag : \u7ec4\u5408\u6570\u5b66 / DP / \u9012\u63a8","title":"\u4e09\u6708\u597d\u9898"},{"location":"%E6%80%9D%E8%80%83/%E4%B8%89%E6%9C%88%E5%A5%BD%E9%A2%98/#_1","text":"","title":"\u4e09\u6708\u597d\u9898\u6539\u9519"},{"location":"%E6%80%9D%E8%80%83/%E4%B8%89%E6%9C%88%E5%A5%BD%E9%A2%98/#cf1646e-power-board","text":"\u7ed9\u4f60\u4e00\u4e2a \\(n\\times m\\) \u7684\u77e9\u9635\uff0c\u4e14 \\(a_{i,j}=i^j\\) \u3002\u6c42\u8fd9\u4e2a\u77e9\u9635\u5f53\u4e2d\u6709\u591a\u5c11\u4e0d\u540c\u7684\u6570\u3002 1e6\u3002 \u66b4\u529b\u660e\u663e\u7206\u70b8\u3002 \u8003\u8651\u5bb9\u65a5\u4e4b\u7c7b\u7684\u505a\u6cd5\u6765\u53bb\u91cd\u3002 \u53d1\u73b0\u4e24\u4e2a\u4e0d\u540c\u884c \\((i,j)\\) \u4f1a\u751f\u6210\u91cd\u590d\u7684\u6570\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(\\exist d,a,b \\ |\\ i=d^a,j=d^b\\) \u3002 \u6bd4\u5982 \\(2,4,8\\) \u8fd9\u79cd\u3002 \u5217\u4e00\u4e2a\u8868\uff1a \\[\\begin{bmatrix}2^1&2^2&2^3&\\dots&2^m \\\\4^1&4^2&4^3&\\dots&4^m\\\\8^1&8^2&8^3&\\dots&8^m\\end{bmatrix}\\] \u5316\u6210 \\(2\\) \u7684\u6b21\u5e42\u5f62\u5f0f\uff1a \\[\\begin{bmatrix}2^1&2^2&2^3&\\dots&2^m \\\\2^2&2^4&2^6&\\dots&2^{2m}\\\\2^3&2^6&2^9&\\dots&2^{3m}\\end{bmatrix}\\] \u8003\u8651\u6307\u6570\uff1a \\[\\begin{bmatrix}1&2&3&\\dots&m \\\\2&4&6&\\dots&{2m}\\\\3&6&9&\\dots&{3m}\\end{bmatrix}\\] \u5982\u679c\u53ea\u8003\u8651 \\(2,4,8,16\\) \u8fd9\u79cd\u7684\u8bdd\uff0c\u7b54\u6848\u5c31\u662f\u4e0a\u9762\u7b2c\u4e09\u4e2a\u8868\u5f53\u4e2d\u4e0d\u540c\u7684\u6570\u7684\u4e2a\u6570\u3002 \u56e0\u4e3a\u6211\u4eec\u53bb\u6389\u5e95\u6570\u7684\u8fc7\u7a0b\u5c31\u662f\u6c42\u4e86\u4e00\u4e2a \\(\\log\\) \uff0c\u6240\u4ee5\u8868\u91cc\u9762\u7684\u6570\u662f \\(\\log\\) \u7ea7\u522b\u7684\u3002 \u5199\u4e00\u4e2a\u66b4\u529b\u5373\u53ef\u67e5\u8be2\u3002 \u8f6c\u5316\u5230\u539f\u9898\uff0c\u5c31\u662f\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4e0d\u662f\u67d0\u4e00\u4e2a\u6574\u6570\u7684\u5927\u4e8e\u7b49\u4e8e \\(2\\) \u7684\u6574\u6570\u6b21\u5e42\u7684\u6570\u6c42\u4e00\u6b21\u3002 std::bitset \u5373\u53ef\u3002 \u601d\u8def\u6765\u81ea\uff1a https://codeforces.com/blog/entry/100584?#comment-892898 @Suri429 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int si = 1e6 + 10 ; int s = 1 , n , m ; int a [ si ], b [ si ]; std :: bitset < si * 20 > c ; #undef int int main (){ #define int long long scanf ( \"%lld%lld\" , & n , & m ); for ( register int i = 1 ; i <= 20 ; ++ i ){ for ( register int j = 1 ; j <= m ; ++ j ) c [ i * j ] = 1 ; a [ i ] = c . count (); } for ( register int i = 2 ; i <= n ; ++ i ){ if ( b [ i ] == 1 ) continue ; int k = 1 ; b [ i ] = 1 ; for ( register int j = i * i ; j <= n ; j = j * i ) b [ j ] = 1 , k = k + 1 ; s = s + a [ k ]; } return printf ( \"%lld\" , s ), 0 ; #undef int } 1 Tag : \u66b4\u529b / bitset / \u601d\u7ef4","title":"CF1646E Power Board"},{"location":"%E6%80%9D%E8%80%83/%E4%B8%89%E6%9C%88%E5%A5%BD%E9%A2%98/#cf1647e-madoka-and-the-sixth-graders","text":"\u7ed9 \\(n\\) \u5f20\u684c\u5b50\uff0c\u521d\u59cb\u7684\u65f6\u5019\u684c\u5b50\u4e0a\u5750\u7740\u7684\u5b66\u751f\u7684\u7f16\u53f7\u5206\u522b\u4e3a \\(a_1, a_2, \\dots , a_n\\) \u3002 \u4e14 \\(a\\) \u662f\u4e00\u4e2a \\(n\\) \u7684\u6392\u5217\uff0c\u7136\u540e\u7ed9\u5b9a\u51e0\u7ec4\u6709\u5411\u5173\u7cfb \\((i,j)\\) \uff0c\u8868\u793a\u6bcf\u8fc7\u4e00\u8282\u8bfe\uff0c\u684c\u5b50 \\(i\\) \u7684\u5b66\u751f\u4f1a\u79fb\u52a8\u5230\u684c\u5b50 \\(j\\) \u3002 \u5982\u679c\u4e00\u4e2a\u684c\u5b50\u4e0a\u6709\u8d85\u8fc7\u4e00\u4e2a\u4eba\uff0c\u7559\u4e0b\u7f16\u53f7\u6700\u5c0f\u7684\uff0c\u7136\u540e\u8e22\u51fa\u5176\u4ed6\u7684\u3002 \u95e8\u5916\u7684\u5b66\u751f\u7f16\u53f7\u4e3a \\(n+1,n+2,\\dots\\) \u3002 \u5982\u679c\u6709\u7a7a\u7684\u4f4d\u7f6e\uff0c\u6309\u7167\u4f4d\u7f6e\u7f16\u53f7\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u8ba9\u95e8\u5916\u7684\u5b66\u751f\u4f9d\u6b21\u8fdb\u6765\u586b\u4e0a\u3002 \u7ed9\u5b9a\u6700\u7ec8\u7684\u72b6\u6001 \\(b\\) \uff0c\u6c42\u51fa\u6ee1\u8db3\u6761\u4ef6\u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u7684 \\(a\\) \u3002 1e5\u3002 \u4fdd\u8bc1\u6bcf\u8282\u8bfe\u603b\u662f\u6709\u5b66\u751f\u88ab\u8e22\u51fa\uff0c\u5b66\u751f\u7684\u7f16\u53f7\u4e92\u4e0d\u76f8\u540c\u3002 \u53d1\u73b0\u9898\u76ee\u4fdd\u8bc1\u4e86 \\(p\\) \u5f53\u4e2d\u5fc5\u7136\u6709\u91cd\u590d\u5143\u7d20\u3002 \u6240\u4ee5\u6bcf\u4e00\u8f6e\u5fc5\u7136\u4f1a\u6709\u4eba\u88ab\u5f00\u9664\uff0c\u7b49\u4ef7\u4e8e\u6bcf\u4e00\u8f6e\u5fc5\u7136\u6709\u4eba\u8fdb\u5165\u3002 \u6240\u4ee5\u6559\u5ba4\u91cc\u7684\u6240\u6709\u6570\u7684\u6700\u5927\u503c\u4e00\u5b9a\u662f\u5355\u8c03\u4e0a\u5347\u7684\u3002 \u53ef\u4ee5\u6c42\u51fa\u5f53\u524d\u7ecf\u8fc7\u7684\u8f6e\u6570 \\(k =\\) (*max_element(b + 1, b + 1 + n) - n) / (n - set<int>(p + 1, p + 1 + n).size()) \u56e0\u4e3a\u7c7b\u4f3c\u6837\u4f8b\u4e00\u5f53\u4e2d\u7684 \u201c\u53cc\u5411\u8fb9\u201d \u5f88\u4e0d\u597d\u5904\u7406\u3002 \u6240\u4ee5\u5f53\u52a1\u4e4b\u6025\u662f\u7ecf\u8fc7 \\(k\\) \u8f6e\u4e4b\u540e\uff0c\u539f\u6765\u5728\u67d0\u4e00\u4e2a\u70b9\u7684 stu \u4f1a\u5728\u54ea\u4e00\u4e2a\u70b9\u51fa\u73b0\u3002 \u8bbe\u8fd9\u4e2a\u70b9\u4e3a \\(dest[i]\\) \u5e76\u4e14\u5148\u4e0d\u8003\u8651\u88ab\u5f00\u9664\u7684\u60c5\u51b5\u3002 \u8fd9\u4e2a\u5982\u679c\u76f4\u63a5\u9012\u63a8\u662f \\(\\text{O}(nk)\\) \u7684\uff0c\u5fc5\u7136\u4f1a TLE\u3002 \u7136\u540e\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u5173\u4e8e \\(2\\) \u7684\u6b63\u6574\u6570\u6b21\u5e42\u5177\u6709 \u5212\u5206\u6027 \u3002 \u4e5f\u5c31\u662f\u8bbe \\(t[i][j]\\) \u8868\u793a \\(i\\) \u8df3 \\(2^j\\) \u6b65\u53ef\u4ee5\u5230\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u5fc5\u7136\u53ef\u4ee5\u5f97\u5230 \\(t[i][j] = t[ t[i][j - 1] ][j - 1]\\) . \u66f4\u4e00\u822c\u7684\uff0c \\(t[i][j] = t[ t[ t[ t[i][j-3] ][j-3] ][j-2] ][j-1]\\) \uff0c\u8fd9\u6837\u53ef\u4ee5\u4e00\u76f4\u5d4c\u5957\u4e0b\u53bb\u3002 \u90a3\u4e48\u8fd9\u4e2a\u9012\u63a8\u5c31\u53ef\u4ee5\u76f4\u63a5\u5229\u7528 \u500d\u589e\u4f18\u5316 \u3002 \u6240\u4ee5\u628a \\(k\\) \u4e8c\u8fdb\u5236\u62c6\u5206\uff0c\u679a\u4e3e \\(k\\) \u7684\u6bcf\u4e00\u4f4d\uff0c\u5982\u679c\u5f53\u524d\u4f4d\u662f \\(1\\) \uff0c \u90a3\u4e48\u7ed9\u6bcf\u4e00\u4e2a \\(dest\\) \u8df3 \\(2^j\\) \u6b65\uff0c \\(j\\) \u662f\u5f53\u524d\u4f4d\u3002 \u521d\u59cb\u5316 \\(to[i][0] = p[i]\\) \u3002 \u5bf9\u4e8e\u56e0\u4e3a \\(p[i]\\) \u6709\u91cd\u590d\u7684\uff0c\u6240\u4ee5 \\(dest[i]\\) \u4e5f\u5fc5\u7136\u4f1a\u6709\u91cd\u590d\u7684\u3002 \u5047\u8bbe\u67d0\u4e00\u4e2a\u70b9 \\(i\\) \uff0c\u6709\u4e09\u4e2a\u70b9\uff08\u5b9e\u9645\u4e0a\u4e2a\u6570\u4efb\u610f\uff0c\u6b64\u5904\u4e3e\u4f8b\u9700\u8981\uff09 \\(A, B, C\\) \u53ef\u4ee5\u7ecf\u8fc7 \\(k\\) \u8f6e\u5230\u8fbe\u5b83\uff0c \u90a3\u4e48\u7559\u5728\u8fd9\u4e2a\u5730\u65b9\u7684\uff08 \\(b[i]\\) \uff09\u5fc5\u7136\u662f\u8fd9\u4e09\u70b9\u8fc7\u6765\u7684\u5b66\u751f\u5f53\u4e2d\u7f16\u53f7\u6700\u5c0f\u7684\uff0c \u6240\u4ee5\u6700\u5f00\u59cb\uff08 \\(k = 0\\) \uff09\u7684\u65f6\u5019\uff0c \\(A, B, C\\) \u5f53\u4e2d\u5fc5\u7136\u6709\u4e00\u4e2a\u70b9\u7684\u5b66\u751f\u662f \\(b[i]\\) \u3002 \u4e3a\u4e86\u8ba9\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u8003\u8651\u8ba9 \\(A, B, C\\) \u5f53\u4e2d\u7f16\u53f7\u6700\u5c0f\u7684\u4e00\u4e2a\u70b9\u521d\u59cb\u5750\u4e0a \\(b[i]\\) \uff0c\u4e5f\u5c31\u662f\u8ba9\u8fd9\u4e2a\u70b9\u7684 \\(a = b[i]\\) \u3002 \u7136\u540e\u73b0\u5728\u5c31\u5df2\u7ecf\u586b\u597d\u4e86\u4e00\u4e9b\u70b9\u3002 \u7ef4\u62a4\u5269\u4e0b\u7684\uff0c\u7f16\u53f7\u5728 \\(1 \\sim n\\) \u5f53\u4e2d\u7684\u5b66\u751f\u96c6\u5408 \\(S\\) \uff08\u4e3a\u4ec0\u4e48\u662f \\(1 \\sim n\\) \u539f\u56e0\u663e\u7136\uff09\u3002 \u7136\u540e\u4ece\u524d\u5f80\u540e\u626b\u63cf \\(a\\) \u5f53\u4e2d\u6240\u6709\u8fd8\u6ca1\u6709\u7b54\u6848\u7684\u70b9\uff0c\u5bf9\u4e8e\u5f53\u4e2d\u7684\u67d0\u4e00\u4e2a\u70b9 \\(i\\) \uff0c\u5b83\u7ecf\u8fc7 \\(k\\) \u8f6e\u53bb\u5230\u7684\u5730\u65b9\u662f \\(dest[i]\\) \u3002 \u90a3\u4e48\u5b83\u7684 \\(a[i]\\) \u5fc5\u7136\u8981\u5927\u4e8e\u6240\u6709 \\(dest = dest[i]\\) \u7684\u70b9\u5f53\u4e2d\u7f16\u53f7\u6700\u5c0f\u7684\u90a3\u4e2a\u70b9\u521d\u59cb\u7684 \\(a\\) \uff0c\u4e5f\u5c31\u662f \\(b[dest[i]]\\) \u3002 \u6240\u4ee5\u5728\u96c6\u5408 \\(S\\) \u5f53\u4e2d\u4e8c\u5206\u4e00\u4e2a\u5927\u4e8e \\(b[dest[i]]\\) \u7684\uff0c\u6700\u5c0f\u7684\u70b9\u586b\u4e0a\u53bb\u5c31\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 #include <set> #include <cmath> #include <bitset> #include <cstring> #include <iostream> #include <algorithm> #include <unordered_set> using namespace std ; const int si = 1e5 + 10 ; int n ; int a [ si ], b [ si ], p [ si ]; int t [ si ][ 51 ]; int dest [ si ]; int tmp [ si ]; int main () { cin >> n ; int mx = -1 ; bitset < si > vis ; for ( int i = 1 ; i <= n ; ++ i ) cin >> p [ i ], vis [ p [ i ]] = true ; for ( int i = 1 ; i <= n ; ++ i ) cin >> b [ i ], mx = max ( mx , b [ i ]); int k = ( mx - n ) / ( n - vis . count ()); // int k = (*max_element(b + 1, b + 1 + n) - n) / (n - unordered_set<int>(p + 1, p + 1 + n).size()); int lg = ( int )( log ( k ) / log ( 2 )) + 1 ; cerr << k << \" \" << lg << endl ; for ( int i = 1 ; i <= n ; ++ i ) t [ i ][ 0 ] = p [ i ]; for ( int j = 1 ; j <= lg ; ++ j ) { for ( int i = 1 ; i <= n ; ++ i ) { t [ i ][ j ] = t [ t [ i ][ j - 1 ]][ j - 1 ]; } } for ( int i = 1 ; i <= n ; ++ i ) dest [ i ] = i ; for ( int j = lg ; j >= 0 ; -- j ) { if ( k >> j & 1 ) { for ( int i = 1 ; i <= n ; ++ i ) { dest [ i ] = t [ dest [ i ]][ j ]; if ( t [ dest [ i ]][ j ] == 0 ) cerr << \"Error on #\" << i << \", \" << j << endl ; } } } // for(int i = 1; i <= n; ++i) cout << dest[i] << endl; sort ( p + 1 , p + 1 + n ); int m = unique ( p + 1 , p + 1 + n ) - p - 1 ; // cout << m << endl; // for(int i = 1; i <= m; ++i) cout << p[i] << endl; memset ( a , 0x3f , sizeof a ); memset ( tmp , 0x3f , sizeof tmp ); set < int > rest ; for ( int i = 1 ; i <= n ; ++ i ) { if ( tmp [ dest [ i ]] == 0x3f3f3f3f ) tmp [ dest [ i ]] = i ; rest . insert ( i ); } // for(int i = 1; i <= n; ++i) cout << tmp[i] << endl; for ( int i = 1 ; i <= m ; ++ i ) { if ( tmp [ p [ i ]] == 0x3f3f3f3f ) continue ; a [ tmp [ p [ i ]]] = b [ p [ i ]]; // cerr << b[p[i]] << \"$\"; auto pos = rest . find ( b [ p [ i ]]); if ( pos == rest . end ()) cerr << \"Error\" ; rest . erase ( pos ); } for ( int i = 1 ; i <= n ; ++ i ) { if ( a [ i ] == 0x3f3f3f3f ) { auto pos = rest . lower_bound ( b [ dest [ i ]]); // cerr << b[dest[i]] << \"#\"; if ( pos == rest . end ()) cerr << \"Error\" ; a [ i ] = * pos , rest . erase ( pos ); } } for ( int i = 1 ; i <= n ; ++ i ) cout << a [ i ] << \" \" ; cout << endl ; return 0 ; } 1 Tag : \u500d\u589e / \u56fe\u8bba","title":"CF1647E Madoka and the Sixth-graders"},{"location":"%E6%80%9D%E8%80%83/%E4%B8%89%E6%9C%88%E5%A5%BD%E9%A2%98/#cf1650g-counting-shortcuts","text":"\u7ed9\u5b9a\u4e00\u5f20\u65e0\u6743\u65e0\u5411\u56fe\uff0c\u95ee\u9898\u4ece\u67d0\u4e2a\u70b9 \\(s\\) \u5230\u67d0\u4e2a\u70b9 \\(t\\) \u7684\u597d\u8def\u5f84\u7684\u6761\u6570\u5bf9 \\(1e9+7\\) \u53d6\u6a21\u3002 \u4e00\u4e2a\u8def\u5f84\u662f\u597d\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e2a\u8def\u5f84\u7684\u957f\u5ea6\u548c \\(s,t\\) \u4e4b\u95f4\u7684\u6700\u77ed\u8def\u7684\u957f\u5ea6\u5dee\u4e0d\u8d85\u8fc7 \\(1\\) \u3002 \\(n,m\\) 2e5\u3002 \u9996\u5148\u8003\u8651\u6c42\u51fa \\(s\\) \u51fa\u53d1\u5230\u6bcf\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u3002 \u7136\u540e DP \u5373\u53ef\u3002 \u65b9\u7a0b\u76f4\u63a5\u770b\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 dijkstra ( s ); // Bfs(s), ReBfs(s); vector < pair < int , int > > Dis ; for ( int i = 1 ; i <= n ; ++ i ) { Dis . push_back ({ dis [ i ], i }); dp [ i ][ 0 ] = dp [ i ][ 1 ] = 0 ; } sort ( Dis . begin (), Dis . end ()); dp [ s ][ 0 ] = 1 , dp [ s ][ 1 ] = 0 ; for ( auto x : Dis ) { int u = x . second ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( dis [ u ] == dis [ v ] + 1 ) dp [ u ][ 0 ] = ( dp [ u ][ 0 ] + dp [ v ][ 0 ]) % mod ; } } for ( auto x : Dis ) { int u = x . second ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( dis [ u ] == dis [ v ] + 1 ) dp [ u ][ 1 ] = ( dp [ v ][ 1 ] + dp [ u ][ 1 ]) % mod ; else if ( dis [ u ] == dis [ v ]) dp [ u ][ 1 ] = ( dp [ v ][ 0 ] + dp [ u ][ 1 ]) % mod ; } } cout << ( dp [ t ][ 0 ] + dp [ t ][ 1 ]) % mod << endl ; 1 Tag : DP / \u56fe\u8bba / \u6700\u77ed\u8def","title":"CF1650G Counting Shortcuts"},{"location":"%E6%80%9D%E8%80%83/%E4%B8%89%E6%9C%88%E5%A5%BD%E9%A2%98/#cf1654e-arithmetic-operations","text":"\u7ed9\u4e00\u4e2a\u6570\u5217 \\(a\\) \uff0c\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u4efb\u610f\u4fee\u6539\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e00\u4e2a\u6570\uff0c\u4fee\u6539\u540e\u7684\u6570\u53ef\u4ee5\u662f\u6b63\u6574\u6570\uff0c\u8d1f\u6574\u6570\u548c\u96f6\u3002 \u95ee\u4f7f\u5f97 \\(a\\) \u6210\u4e3a\u7b49\u5dee\u6570\u5217\u7684\u6700\u5c0f\u7684\u64cd\u4f5c\u6b21\u6570\u3002 1e5\u3002 \u628a\u6bcf\u4e2a\u5143\u7d20\u770b\u6210\u4e00\u4e2a\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684\u70b9 \\((i,a_i)\\) \u3002 \u7136\u540e\u8981\u6c42\u7684\u53ef\u4ee5\u8f6c\u5316\u4e3a\u6c42\u8fd9\u4e2a\u5e73\u9762\u4e0a\u6700\u591a\u6709\u591a\u5c11\u4e2a\u70b9\u5171\u7ebf\uff0c\u7136\u540e\u7528 \\(n\\) \u51cf\u53bb\u8fd9\u4e2a\u503c\u5373\u53ef\u3002 \u4f7f\u7528 DP \u5c31\u53ef\u6c42\u51fa\u8fd9\u4e2a\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 #include <map> #include <iostream> #include <algorithm> const int si = 1e5 + 10 ; const int ssi = 70 ; int n , a [ si ]; int b [ si * ssi ]; std :: map < int , int > dp [ si ]; int solve () { int ans = 0 ; for ( int d = 0 ; d < ssi ; ++ d ) { for ( int i = 0 ; i < n ; ++ i ) { ans = std :: max ( ans , ++ b [ a [ i ] + ( n - i ) * d ]); } for ( int i = 0 ; i < n ; ++ i ) { b [ a [ i ] + ( n - i ) * d ] = 0 ; } } for ( int i = 0 ; i < n ; ++ i ) { for ( int j = std :: max ( 0 , i - si / ssi ); j < i ; ++ j ) { int d = ( a [ i ] - a [ j ]) / ( i - j ); int r = ( a [ i ] - a [ j ]) % ( i - j ); if ( r == 0 && d >= ssi ) { dp [ i ][ d ] = std :: max ( dp [ i ][ d ], dp [ j ][ d ] + 1 ); ans = std :: max ( ans , dp [ i ][ d ] + 1 ); } } } for ( int i = 0 ; i < n ; ++ i ) dp [ i ]. clear (); return ans ; } int main () { std :: cin >> n ; for ( int i = 0 ; i < n ; ++ i ) std :: cin >> a [ i ]; int res = solve (); std :: reverse ( a , a + n ); res = std :: max ( res , solve ()); std :: cout << n - res << std :: endl ; } 1 Tag : DP / \u601d\u7ef4","title":"CF1654E Arithmetic Operations"},{"location":"%E6%80%9D%E8%80%83/%E4%B8%89%E6%9C%88%E5%A5%BD%E9%A2%98/#cf1657f-words-on-tree","text":"\u7ed9\u4e00\u68f5\u6811\uff0c\u7ed9 \\(q\\) \u4e2a\u4e09\u5143\u7ec4 \\((x_i,y_i,s_i)\\) \uff0c \\(x_i,y_i\\) \u662f\u8282\u70b9\u7f16\u53f7\uff0c \\(s_i\\) \u662f\u5b57\u7b26\u4e32\uff0c\u957f\u5ea6\u548c\u6811\u4e0a \\((x_i,y_i)\\) \u7684\u7b80\u5355\u8def\u5f84\u957f\u5ea6\u4e00\u81f4\u3002 \u6784\u9020\u4e00\u68f5\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u4e0a\u6709\u4e00\u4e2a\u5b57\u7b26\uff0c\u4f7f\u5f97\u5b83\u6ee1\u8db3\u8fd9 \\(q\\) \u4e2a\u4e09\u5143\u7ec4\u7684\u7ea6\u675f\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4e09\u5143\u7ec4\uff0c\u9700\u8981\u6ee1\u8db3\uff0c\u8def\u5f84 \\((x_i,y_i)\\) \u4e0a\u7684\u5b57\u7b26\u4e32\u8981\u4e48\u662f \\(s_i\\) \uff0c\u8981\u4e48\u662f \\(reverse(s_i)\\) \u3002 9s, 4e5\u3002 \u8003\u8651\u66b4\u529b 2-SAT\u3002 \u4f46\u662f\u8fd9\u6837\u6bcf\u4e2a\u8282\u70b9\u7684\u5019\u9009\u503c\u6709 26 \u4e2a\uff0c\u6ca1\u6cd5\u505a\u3002 \u90a3\u4e48\u628a\u6bcf\u4e2a\u4e09\u5143\u7ec4\u8fd9\u6837\u5904\u7406\uff1a \u628a \\(s_i\\) \u653e\u5230\u8fd9\u4e2a\u8def\u5f84\u4e0a\uff0c\u7136\u540e\u628a \\(rev(s_i)\\) \u653e\u5230\u8fd9\u4e2a\u8def\u5f84\u4e0a\u3002 \u7136\u540e\u5c31\u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2a\u8282\u70b9\u7684\u5019\u9009\u96c6\u5408\u5927\u5c0f\u6700\u5927\u4e3a \\(2\\) \u3002 \uff08\u5bf9\u6bcf\u4e2a\u8282\u70b9\uff0c\u5bf9\u7ecf\u8fc7\u5b83\u7684\u4e09\u5143\u7ec4\u7559\u4e0b\u7684\u5019\u9009\u96c6\u5408\u6c42\u4ea4\u5c31\u53ef\u4ee5\u5f97\u5230\uff09 \u7136\u540e\u5c31\u53ef\u4ee5 2-SAT \u4e86\u3002 \u4f46\u662f\u8fd9\u6837\u76f4\u63a5\u5b9e\u73b0\u4f1a\u975e\u5e38\u590d\u6742\u3002 \u8003\u8651\u53e6\u5916\u4e00\u79cd\u5199\u6cd5\u3002 \u626b\u63cf\u6bcf\u4e00\u4e2a\u4e32\uff0c\u7136\u540e\u5185\u5c42\u626b\u63cf\u8def\u5f84\u4e0a\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u5f53\u524d\u8282\u70b9\u6ca1\u6709\u5019\u9009\u96c6\u5408\uff0c\u7ed9\u4ed6\u52a0\u4e0a\u3002 \u7136\u540e\u8003\u8651\u8fd9\u6837\u7684\u4e00\u4e2a\u8fc7\u7a0b\uff1a 1 2 3 4 5 cand [ i ][ 0 ] cand [ i ][ 1 ] ( \u5f53\u524d\u8282\u70b9\u7684\u5019\u9009\u96c6\u5408 ) s [ j ] s [ len - j - 1 ] ( rev ( s )[ j ]) ( \u5f53\u524d\u626b\u63cf\u5230\u7684\u4e32\u5728\u8fd9\u4e2a\u70b9\u7684\u5019\u9009\u96c6\u5408 ) \u5982\u679c \\(s_j\\) \u4e0d\u7b49\u4e8e \\(cand[i][0]\\) \uff0c\u90a3\u4e48\u8bc1\u660e\u9009 \\(s[j]\\) \u5c31\u4e0d\u80fd\u9009 \\(cand[i][0]\\) \u3002 \u6240\u4ee5\u94fe\u63a5 \\(s[j] \\to cand[i][1]\\) \uff0c\u7136\u540e\u628a\u9006\u5426\u547d\u9898 \\(cand[i][0] \\to s[len-j-1]\\) \u94fe\u63a5\u4e0a\u3002 \u5176\u5b83\u4e09\u79cd\u60c5\u51b5\u540c\u7406\u3002 \u8fd9\u4e2a\u65f6\u5019\u518d\u8dd1 2-SAT \u5c31\u53ef\u4ee5\u4e86\u3002 \u56e0\u4e3a\u65f6\u9650 \\(9s\\) \u6240\u4ee5\u968f\u4fbf\u641e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 #include <cmath> #include <stack> #include <vector> #include <cstring> #include <iostream> #include <algorithm> #define c0 qwq #define c1 qaq using namespace std ; const int si = 16 * ( 1e5 + 10 ); int n , q ; int head [ si ], tot = 0 ; struct Edge { int ver , Next ; } e [ si << 1 ]; inline void add ( int u , int v ) { e [ tot ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot ++ ; } int dep [ si ], f [ si ][ 20 ]; int lg ; void dfs ( int u , int fa ) { dep [ u ] = dep [ fa ] + 1 , f [ u ][ 0 ] = fa ; for ( int i = 1 ; i <= lg ; ++ i ) f [ u ][ i ] = f [ f [ u ][ i -1 ]][ i -1 ]; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs ( v , u ); } } int Lca ( int u , int v ) { if ( dep [ u ] < dep [ v ]) swap ( u , v ); for ( int i = lg ; i >= 0 ; -- i ) if ( dep [ f [ u ][ i ]] >= dep [ v ]) u = f [ u ][ i ]; if ( u == v ) return u ; for ( int i = lg ; i >= 0 ; -- i ) if ( f [ u ][ i ] != f [ v ][ i ]) u = f [ u ][ i ], v = f [ v ][ i ]; return f [ u ][ 0 ]; } vector < int > G [ si ]; inline void Add ( int u , int v ) { G [ u ]. emplace_back ( v ); } int tim = 0 ; int dfn [ si ], low [ si ]; stack < int > s ; bool ins [ si ]; int cnt = 0 ; int c [ si ]; void tarjan ( int u ) { dfn [ u ] = low [ u ] = ++ tim ; s . push ( u ), ins [ u ] = true ; for ( int v : G [ u ]) { if ( ! dfn [ v ]) tarjan ( v ), low [ u ] = min ( low [ u ], low [ v ]); else if ( ins [ v ]) low [ u ] = min ( low [ u ], dfn [ v ]); } if ( dfn [ u ] == low [ u ]) { int x ; ++ cnt ; do { x = s . top (), s . pop (); c [ x ] = cnt , ins [ x ] = false ; } while ( u != x ); } } int m ; char cand [ si ][ 2 ]; inline int Node ( int u , bool op ) { if ( op ) return u ; else return u + ( n + m ); } int main () { cin >> n >> q , lg = ( int )( log ( n ) / log ( 2 )) + 1 ; memset ( head , -1 , sizeof head ); memset ( ins , false , sizeof ins ); for ( int i = 1 ; i < n ; ++ i ) { int u , v ; cin >> u >> v ; add ( u , v ), add ( v , u ); } dfs ( 1 , 0 ); int now = 0 ; m = q ; while ( q -- ) { ++ now ; int u , v ; string s ; cin >> u >> v , cin >> s ; int len = ( int ) s . size (); int lca = Lca ( u , v ); vector < int > path , tmp ; while ( u != lca ) path . emplace_back ( u ), u = f [ u ][ 0 ]; path . emplace_back ( lca ); while ( v != lca ) tmp . emplace_back ( v ), v = f [ v ][ 0 ]; reverse ( tmp . begin (), tmp . end ()); for ( auto x : tmp ) path . emplace_back ( x ); // for(auto x : path) cout << x << ' '; cout << endl; for ( int i = 0 ; i < len ; ++ i ) { int x = path [ i ]; char c0 = s [ i ], c1 = s [ len - i - 1 ]; if ( ! cand [ x ][ 0 ] && ! cand [ x ][ 1 ]) cand [ x ][ 0 ] = c0 , cand [ x ][ 1 ] = c1 ; if ( cand [ x ][ 0 ] != c0 ) { Add ( Node ( now , 0 ), Node ( x + m , 1 )); Add ( Node ( x + m , 0 ), Node ( now , 1 )); } if ( cand [ x ][ 1 ] != c0 ) { Add ( Node ( now , 0 ), Node ( x + m , 0 )); Add ( Node ( x + m , 1 ), Node ( now , 1 )); } if ( cand [ x ][ 0 ] != c1 ) { Add ( Node ( now , 1 ), Node ( x + m , 1 )); Add ( Node ( x + m , 0 ), Node ( now , 0 )); } if ( cand [ x ][ 1 ] != c1 ) { Add ( Node ( now , 1 ), Node ( x + m , 0 )); Add ( Node ( x + m , 1 ), Node ( now , 0 )); } } } for ( int i = 1 ; i <= 2 * ( n + m ); ++ i ) { if ( ! dfn [ i ]) tarjan ( i ); } for ( int i = 1 ; i <= n ; ++ i ) { if ( ! cand [ i ][ 0 ]) cand [ i ][ 0 ] = cand [ i ][ 1 ] = 'a' ; } for ( int i = 1 ; i <= n + m ; ++ i ) { if ( c [ Node ( i , 0 )] == c [ Node ( i , 1 )]) return puts ( \"NO\" ), 0 ; } puts ( \"YES\" ); for ( int i = 1 ; i <= n ; ++ i ) { putchar ( cand [ i ][ c [ Node ( i + m , 0 )] > c [ Node ( i + m , 1 )] ] ); } puts ( \"\" ); return 0 ; } 1 Tag : LCA / \u601d\u7ef4 / 2 - SAT","title":"CF1657F Words On Tree"},{"location":"%E6%80%9D%E8%80%83/%E4%B8%89%E6%9C%88%E5%A5%BD%E9%A2%98/#cf1656d-k-good","text":"\u4e00\u4e2a\u6b63\u6574\u6570 \\(n\\) \u662f \\(k\\) Good \u7684\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(n\\) \u53ef\u4ee5\u88ab\u5206\u6210 \\(k\\) \u4e2a\u4e0d\u540c\u6b63\u6574\u6570\u7684\u548c\uff0c\u4e14\u8fd9 \\(k\\) \u4e2a\u6b63\u6574\u6570\u6a21 \\(k\\) \u610f\u4e49\u4e0b\u76f8\u4e92\u4e0d\u540c\u4f59\u3002 \u7ed9\u5b9a \\(n\\) \uff081e18\uff09\uff0c\u6c42\u51fa\u4efb\u610f\u4e00\u4e2a\u5408\u6cd5\u7684\uff0c \\(\\ge 2\\) \u7684 \\(k\\) \uff0c\u4f7f\u5f97 \\(n\\) \u662f \\(k\\) Good \u7684\u3002 \u8003\u8651\u628a \\(n\\) \u6309\u7167 \\(1,2,3,4,\\dots\\) \u7684\u65b9\u5f0f\u644a\u5230 \\(k\\) \u4e2a\u5730\u65b9\uff0c\u7136\u540e\u628a\u5269\u4e0b\u7684\u503c\u52a0\u4e0a\uff0c\u4f7f\u5f97\u6761\u4ef6\u6210\u7acb\u3002 \u7136\u540e\u53ef\u4ee5\u5217\u51fa\u4e00\u4e2a\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\uff1a \\(n \\equiv \\dfrac{k(k+1)}{2} (\\operatorname{mod} k)\\) \u3002 \u7136\u540e\u53d1\u73b0 \\(n\\) \u8fd8\u8981\u6ee1\u8db3 \\(\\ge \\dfrac{k(k+1)}{2}\\) \u624d\u53ef\u4ee5\u3002 \u6240\u4ee5\u73b0\u5728\u5c31\u5f97\u5230\u4e86\u5224\u5b9a\u7684\u4e24\u4e2a\u6761\u4ef6\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c \\(2^k\\) \u5f62\u5f0f\u7684\u6570\u5fc5\u7136\u65e0\u89e3\uff0c\u5176\u4ed6\u5fc5\u7136\u6709\u89e3\u3002 \u5947\u6570\u76f4\u63a5\u4ee4 \\(k = 2\\) \u5373\u53ef\u3002 \u7136\u540e\u6709\u4e00\u4e2a\u6211\u8fd8\u6682\u65f6\u4e0d\u4f1a\u8bc1\u660e\u7684\u7ed3\u8bba\u3002 \u6392\u9664\u5b8c\u65e0\u89e3\u60c5\u51b5\u4e4b\u540e\u3002 \u628a\u4e00\u4e2a\u6570\u7684\u6240\u6709 \\(2\\) \u56e0\u5b50\u63d0\u51fa\u6765\u7ec4\u6210 \\(2^k\\) \u3002 \u7136\u540e\u7b54\u6848\u5fc5\u7136\u662f \\(2^{k+1}\\) \u548c \\(\\dfrac{n}{2^k}\\) \u7684\u6700\u5c0f\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #include <cmath> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; using i64 = long long ; using i128 = __uint128_t ; int T ; inline i64 solve ( i64 n ) { i64 tmp = n ; i64 cnt = 1 ; while ( tmp % 2l l == 0l l ) { tmp /= 2l l , cnt *= 2 ; } if ( tmp == 1l l ) return -1ll ; return min ( tmp , 2 * cnt ); } int main () { cin >> T ; while ( T -- ) { i64 n ; cin >> n ; cout << solve ( n ) << endl ; } return 0 ; } 1 Tag : \u6570\u5b66 / \u6570\u8bba / \u540c\u4f59","title":"CF1656D K-good"},{"location":"%E6%80%9D%E8%80%83/%E4%B8%89%E6%9C%88%E5%A5%BD%E9%A2%98/#cf1656e-equal-tree-sums","text":"\u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u8981\u6c42\u4f60\u7ed9\u6bcf\u4e2a\u8282\u70b9\u4e00\u4e2a\u6743\u503c\uff0c\u4f7f\u5f97\u53bb\u6389\u6811\u4e2d\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u4e4b\u540e\uff0c \u4efb\u610f\u4e24\u4e2a\u8fde\u901a\u5757\u4e4b\u5185\u7684\u548c\u662f\u76f8\u7b49\u7684\u3002 1e5\u3002 \u7ed3\u8bba\uff1a\u9ed1\u767d\u67d3\u8272\uff0c\u4e00\u79cd\u989c\u8272\u7684\u8282\u70b9\u8d4b\u503c\u4e3a \\(-deg(u)\\) \uff0c\u53e6\u5916\u4e00\u79cd \\(+deg(u)\\) \u3002 \u8003\u8651\u4e00\u4e2a\u70b9\u5bf9\u4e8e\u548c\u5b83\u76f8\u8fde\u7684\u6240\u6709\u9876\u70b9\uff0c\u5728\u5220\u9664\u4e4b\u540e\u505a\u7684\u8d21\u732e\u5373\u53ef\u3002 \u66f4\u597d\u4e00\u70b9\u7684\u8bc1\u660e\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int si = 1e5 + 10 ; int n , T ; int head [ si ], tot = 0 ; struct Edge { int ver , Next ; } e [ si << 1 ]; int deg [ si ]; inline void add ( int u , int v ) { e [ tot ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot ++ ; } int c [ si ]; void dfs ( int u , int fa , int col ) { if ( c [ u ] != -1 ) return ; c [ u ] = col ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs ( v , u , 1 - col ); } } int main () { cin >> T ; while ( T -- ) { cin >> n ; memset ( c , -1 , sizeof c ), memset ( deg , 0 , sizeof deg ); tot = 0 , memset ( head , -1 , sizeof head ); for ( int i = 1 ; i < n ; ++ i ) { int u , v ; cin >> u >> v ; add ( u , v ), add ( v , u ); ++ deg [ u ], ++ deg [ v ]; } dfs ( 1 , 0 , 1 ); for ( int i = 1 ; i <= n ; ++ i ) { if ( c [ i ] == 0 ) cout << - deg [ i ] << \" \" ; else cout << deg [ i ] << \" \" ; } cout << endl ; } return 0 ; } 1 Tag : \u56fe\u8bba / \u601d\u7ef4","title":"CF1656E Equal Tree Sums"},{"location":"%E6%80%9D%E8%80%83/%E4%B8%89%E6%9C%88%E5%A5%BD%E9%A2%98/#abc243f-lottery","text":"Takahashi is participating in a lottery. Each time he takes a draw, he gets one of the \\(N\\) prizes available. Prize \\(i\\) is awarded with probability \\(\\dfrac{w_i}{\\sum^{N}_{j=1} w_j}\\) , The results of the draws are independent of each other. What is the probability that he gets exactly \\(M\\) different prizes from \\(K\\) draws? Find it modulo \\(998244353\\) . \\(1\\le N,M,K \\le 50\\) \u3002 \\(M \\le N\\) \u3002 \u5b9a\u4e49 \\(P(i) = \\dfrac{w_i}{\\sum^{N}_{j=1} w_j}\\) \u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u79cd\u5143\u7d20\u88ab\u9009\u4e86 \\(c_i\\) \u6b21\uff0c\u90a3\u4e48\u5b83\u7684\u6982\u7387\u5c31\u662f \\(P(i)^{c_i}\\) \u7136\u540e\u8003\u8651\u7528\u53ef\u91cd\u96c6\u7684\u6392\u5217\u6570\u516c\u5f0f\u7b97\u3002 \u4f46\u662f\u8fd9\u91cc\u8981\u7a0d\u5fae\u9b54\u6539\u4e00\u4e0b\u3002 \u90a3\u4e48\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u67ff\u5b50\uff1a \\[\\dfrac{K!}{\\prod\\limits_{i = 1}^{N} c_i!} \\times \\prod\\limits_{i=1}^{N} P(i)^{c_i}, \\sum c_i = K, |\\{i\\ |\\ c_i \\not= 0\\}|=M\\] \u8fd9\u4e2a\u5c31\u662f\u7b54\u6848\u3002 \u5176\u4e2d \\(c_i\\) \u8868\u793a \\(i\\) \u8fd9\u79cd\u7269\u54c1\u88ab\u9009\u4e86\u591a\u5c11\u6b21\uff0c\u53ef\u4ee5\u662f \\(0\\) \u3002 \\(K!\\) \u662f\u5e38\u6570\uff0c\u6240\u4ee5\u63d0\u51fa\u6765\uff1a \\[K!\\times \\dfrac{\\prod\\limits_{i=1}^{N} P(i)^{c_i}}{\\prod\\limits_{i = 1}^{N} c_i!}\\] \u53d1\u73b0\u540e\u9762\u8fd9\u4e2a\u90e8\u5206\u53ef\u4ee5\u5316\u6210 \\[\\prod\\limits_{i = 1}^{n} \\dfrac{P(i)^{c_i}}{c_i}\\] \u5fc5\u7136\u53ef\u4ee5\u9012\u63a8\u3002 \u7136\u540e\u8bbe \\(dp[i][j][k]\\) \u8868\u793a \\(N = i, M = j, K = k\\) \u7684\u65f6\u5019\u7684\u8fd9\u4e2a\u4e1c\u897f\u3002 \u8003\u8651\u679a\u4e3e\u6bcf\u4e00\u79cd\u7269\u54c1\u9009\u591a\u5c11\u4e2a\u5373\u53ef\u8f6c\u79fb\u3002 \u590d\u6742\u5ea6 \\(\\text{O}(NMK^2)\\) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 #include <cstring> #include <iostream> #include <algorithm> using namespace std ; using i64 = long long ; const int si = 50 + 10 ; constexpr int mod = 998244353 ; int N , M , K ; i64 dp [ si ][ si ][ si ]; i64 fact [ si ]; int w [ si ], sum = 0 ; inline i64 qpow ( i64 a , int b ) { i64 ans = 1 % mod ; for (; b ; b >>= 1 ) { if ( b & 1 ) ans = ans * a % mod ; a = a * a % mod ; } return ans ; } inline i64 inv ( int a ) { return qpow ( a , mod - 2 ) % mod ; } int p [ si ]; int main () { cin >> N >> M >> K ; for ( int i = 1 ; i <= N ; ++ i ) { cin >> w [ i ]; sum += w [ i ]; } fact [ 0 ] = 1 ; for ( int i = 1 ; i <= K ; ++ i ) { fact [ i ] = fact [ i - 1 ] * i * 1l l % mod ; } for ( int i = 1 ; i <= N ; ++ i ) { p [ i ] = (( 1l l * w [ i ] % mod ) * inv ( sum )) % mod ; } dp [ 0 ][ 0 ][ 0 ] = 1 ; for ( int i = 1 ; i <= N ; ++ i ) { for ( int j = 0 ; j <= M ; ++ j ) { for ( int k = 0 ; k <= K ; ++ k ) { for ( int c = 0 ; c <= k ; ++ c ) { if ( j - ( c > 0 ) >= 0 ) dp [ i ][ j ][ k ] = ( dp [ i ][ j ][ k ] + dp [ i - 1 ][ j - ( c > 0 )][ k - c ] * qpow ( p [ i ], c ) % mod * inv ( fact [ c ]) % mod ) % mod ; } } } } cout << dp [ N ][ M ][ K ] * fact [ K ] % mod << endl ; return 0 ; } 1 Tag : \u7ec4\u5408\u6570\u5b66 / DP / \u9012\u63a8","title":"ABC243F Lottery"},{"location":"%E6%80%9D%E8%80%83/%E4%BA%8C%E6%9C%88Tricks/","text":"\u4e8c\u6708 Tricks \u6574\u7406 \u00b6 Acwing97 \u7ea6\u6570\u4e4b\u548c \u00b6 \u6c42 \\(A^B\\) \u7684\u7ea6\u6570\u4e4b\u548c\uff0c\u8981\u53d6\u6a21\u3002 \u628a \\(A\\) \u5206\u89e3\u8d28\u56e0\u6570\uff0c\u7136\u540e\u6307\u6570\u4e58\u4e0a \\(B\\) \u53ef\u4ee5\u5f97\u5230\u4ee5\u4e0b\u5f0f\u5b50\uff1a \\(sum=(1+p_1+p_1^2+p_1^3+\\dots+p_1^{B\\times c_1})\\times(1+p_2+p_2^2+p_2^3+\\dots+p_2^{B\\times c_2})\\times\\dots \\times (1+p_n+p_n^2+p_n^3+\\dots+p_n^{B\\times c_n})\\) \\(p_i\\) \u8868\u793a \\(A\\) \u7684\u7b2c \\(i\\) \u4e2a\u8d28\u56e0\u5b50\uff0c \\(c_i\\) \u8868\u793a \\(p_i\\) \u5934\u4e0a\u7684\u6307\u6570\u3002 \u6bcf\u4e00\u4e2a\u5c0f\u62ec\u53f7\u91cc\u9762\u53ef\u4ee5\u7528\u7b49\u6bd4\u6570\u5217\u6c42\u548c\uff0c\u4f46\u662f\u53d6\u6a21\uff08\u53ea\uff09\u5bf9\u4e8e\u9664\u6cd5\u6ca1\u6709\u5206\u914d\u5f8b\uff0c\u5206\u5b50\u5206\u6bcd\u4e0d\u80fd\u5206\u5f00\u53d6\u6a21\u7136\u540e\u9664\u3002 \u6240\u4ee5\u8003\u8651\u7528\u5206\u6cbb\u6cd5\u6c42\u6bcf\u4e2a\u5c0f\u62ec\u53f7\u91cc\u7684\u5185\u5bb9\u7136\u540e\u76f8\u4e58\u53d6\u6a21\u3002 \u628a\u6bcf\u4e2a\u5f0f\u5b50\u4ece\u4e2d\u95f4\u62c6\u5f00\uff0c\u7136\u540e\u628a\u540e\u9762\u5927\u4e00\u70b9\u7684\u5f0f\u5b50\u63d0\u53d6\u4e00\u4e2a\u516c\u56e0\u6570\u51fa\u6765\u4f7f\u5f97\u5b83\u548c\u524d\u9762\u7684\u5f0f\u5b50\u4e00\u6837\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5199\u6210\u9012\u5f52\u4e86\u3002 Trick: \u53d6\u6a21\u65f6\u7528\u5206\u6cbb\u6cd5\u5bf9\u7b49\u6bd4\u6570\u5217\u6c42\u548c\u3002 1 Tag : \u5206\u6cbb / \u7b49\u6bd4\u6570\u5217 Acwing11 \u80cc\u5305\u95ee\u9898\u6c42\u65b9\u6848\u6570 \u00b6 \u6c42\u65b9\u6848\u6570\uff0c\u5148\u80cc\u5305\uff0c\u7136\u540e dp \u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e2a \\(g\\) \u6570\u7ec4\uff0c\u8868\u793a\u4f7f\u7528\u4e0d\u8d85\u8fc7\u5f53\u524d\u7684\u7a7a\u95f4\u7684\u65b9\u6848\u6709\u591a\u5c11\u79cd\u3002 \u6839\u636e \\(f\\) \u8f6c\u79fb\u7684\u4e24\u79cd\u60c5\u51b5\u5206\u5f00\u8ba8\u8bba\u5c31\u884c\u3002 \u4e0d\u77e5\u9053\u4e3a\u5565\uff0c\u6211\u5199\u4e2a \\(tmp\\) \u5b58 \\(f\\) \u6ca1\u8f6c\u79fb\u7684 \\(val\\) \u662f\u9519\u7684\u3002 \u4f46\u662f\u5148\u6bd4\u8f83\uff0c\u8bb0\u5f55 \\(g\\) \u4e4b\u540e\u518d\u66f4\u65b0 \\(f\\) \u5c31\u662f\u5bf9\u7684\u3002 Trick: DP \u7c7b\u7684\u95ee\u9898\u8bb0\u5f55\u65b9\u6848\u53ef\u4ee5\u5728\u8f6c\u79fb\u6210\u529f\u7684\u65f6\u5019\u8bb0\u5f55\u5f53\u524d\u72b6\u6001\u7684\u7b56\u7565\u3002 1 Tag : \u80cc\u5305 / \u65b9\u6848\u6570 Acwing 529 [NOIP2017] \u5b9d\u85cf \u00b6 \u53d1\u73b0\u672c\u9898\u7684\u8981\u6c42\u5c31\u662f\u6c42\u51fa\u4e00\u9897\u751f\u6210\u6811\uff0c\u4f7f\u5f97\u6309\u7167\u8981\u6c42\u5f97\u5230\u7684\u6743\u503c\u548c\u6700\u5c0f\u3002 \u5e76\u4e14\uff0c\u9898\u76ee\u4e2d\u8981\u6c42\u7684\u201c\u4ece\u6700\u521d\u7684\u5b9d\u85cf\u5c4b\u5230\u5f53\u524d\u9053\u8def\u7684\u8d77\u70b9\u7ecf\u8fc7\u7684\u5b9d\u85cf\u5c4b\u4e2a\u6570\u201d\uff0c\u5c31\u662f\u4ee5\u6700\u521d\u7684\u5b9d\u85cf\u5c4b\u4e3aroot\uff0c\u5f53\u524d\u9053\u8def\u8d77\u70b9\u7684\u6df1\u5ea6\u3002 \u8bbe \\(f[i,msk]\\) \u8868\u793a\u96c6\u5408\uff1a\u5f53\u524d\u6253\u901a\u7684\u6700\u5927\u6df1\u5ea6\u4e3a \\(i\\) \uff0c\u6253\u901a\u4e86\u72b6\u6001\u4e3a \\(msk\\) \u7684\u5b9d\u85cf\u5c4b\u7684\u6240\u6709\u65b9\u6848\u3002\u5c5e\u6027\u4e3a\u6743\u503c\u548c\u7684 Min\u3002 \u90a3\u4e48\u8003\u8651\u679a\u4e3e \u4e0a\u4e00\u5c42 \uff08\u6309\u7167\u201c\u6700\u540e\u201d\u8fdb\u884c\u96c6\u5408\u5212\u5206\uff09\u7684\u72b6\u6001 \\(qwq\\) \uff0c \u90a3\u4e48\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u8f6c\u79fb\u65b9\u7a0b\uff1a \\(f_{i,msk}=\\min\\{f_{i,msk},f_{i-1,qwq}+(i-1)\\times cost(qwq,msk)\\}\\) \u5176\u4e2d \\(cost(qwq,msk)\\) \u8868\u793a\u4ece \\(qwq\\) \u8f6c\u79fb\u5230 \\(msk\\) \u589e\u52a0\u7684\u9053\u8def\u957f\u5ea6\u7684\u6700\u5c0f\u503c\u3002 \u4f46\u662f\u8fd9\u91cc\u8981\u6c42\u53ea\u80fd\u6269\u5c55\u4e00\u5c42\uff0c\u6240\u4ee5\u8fd8\u8981\u5224 \\(qwq\\) \u662f\u5426\u80fd\u53ea\u901a\u8fc7\u4e00\u5c42\u6269\u5c55\u5f97\u5230 \\(msk\\) \u3002 \u5177\u4f53\u600e\u4e48\u5224\u5b9a\uff1f \\(qwq\\) \u4e00\u5b9a\u8981\u662f \\(msk\\) \u7684\u5b50\u96c6\u3002 \\(msk\\) \u5f53\u4e2d\u7684\u6240\u6709\u5143\u7d20\u4e00\u5b9a\u5904\u4e8e\u96c6\u5408 \\(S_{qwq}\\) \uff0c\u5176\u4e2d \\(S_{qwq}\\) \u8868\u793a \\(qwq\\) \u5f80\u4e0b\u6269\u5c55\u4e00\u5c42\u4e4b\u540e\u6240\u7684\u5230\u7684\u6240\u6709\u65b0\u8282\u70b9\u548c \\(qwq\\) \u672c\u8eab\u7ec4\u6210\u7684\u96c6\u5408\u3002 \u8fd9\u4e2a\u53ef\u4ee5\u9884\u5904\u7406\u505a\u3002 \u7136\u540e\u8003\u8651\u5982\u4f55\u5904\u7406 \\(cost\\) \u3002 \u5f53\u9884\u5904\u7406\u51fa\u6240\u6709\u7684\u53ef\u884c\u72b6\u6001\u7684\u5bf9\u4e4b\u540e\uff0c\u6211\u4eec\u8bb0 \\(r(msk,i)\\) \u8868\u793a\u4ece\u72b6\u6001 \\(msk\\) \u6240\u6709\u7684\u7684\u8282\u70b9\u51fa\u53d1\uff0c\u6269\u5c55\u5230\u8282\u70b9 \\(i\\) \u7684\u6700\u77ed\u8def\u3002 \u8fd9\u4e2a\u53ef\u4ee5\u5728\u5904\u7406\u53ef\u884c\u72b6\u6001\u7684\u65f6\u5019\u8f6c\u79fb\u51fa\u6765\u3002 \u7136\u540e\u8003\u8651\u679a\u4e3e\u6240\u6709\u53ef\u884c\u5bf9\u7684\u72b6\u6001\u4e4b\u95f4\u7684\u5dee\u5f02\uff0c\u6bd4\u5982\u5f53\u524d\u662f \\(i,j\\) \u8fd9\u4e24\u4e2a\u72b6\u6001\uff0c\u53ea\u9700\u8981\u679a\u4e3e\u4ed6\u4eec\u4e4b\u524d\u7684\u5dee\u5f02\uff0c\u7136\u540e\u5bf9\u76f8\u5e94\u7684 \\(r\\) \u6c42\u548c\u5373\u53ef\u3002 \u90a3\u4e48\u5c31\u53ef\u4ee5\u8fdb\u884c\u8f6c\u79fb\u4e86\uff0c\u521d\u59cb\u5316\u8ba9\u6bcf\u4e2a\u8282\u70b9\u5206\u522b\u4e3a\u6839\uff0c\u8ba9\u5bf9\u5e94\u72b6\u6001\u7684\u6743\u503c\u4e3a \\(0\\) \uff0c\u5176\u4ed6\u7684\u8d4b\u503c\u4e3a \\(+\\infty\\) \u5373\u53ef\u3002 Trick: \u5728\u601d\u8003DP\u7c7b\u7684\u95ee\u9898\u65f6\u53ef\u4ee5\u5148\u5217\u51fa\u4e00\u4e2a\u65b9\u7a0b\uff0c\u4e0d\u7ba1\u91cc\u9762\u7684\u67d0\u4e9b\u4e1c\u897f\u600e\u4e48\u6c42\uff0c\u7b49\u786e\u5b9a\u5f0f\u5b50\u662f\u5bf9\u7684\uff08\u65e0\u540e\u6548\u6027\uff09\u4e4b\u540e\u518d\u8003\u8651\u8ba1\u7b97\u8fd9\u4e9b\u4e1c\u897f\u3002 1 Tag : \u751f\u6210\u6811 / \u72b6\u538bDP Acwing1073 \u6811\u7684\u4e2d\u5fc3 \u00b6 \u66b4\u529b\u505a\u5c31\u662f\u6bcf\u4e2a\u70b9 dfs \u7136\u540e\u53d6 max\u3002 \u4f46\u662f\u660e\u663e TLE\uff0c\u6240\u4ee5\u8003\u8651\u6362\u6839DP\u3002 \u7b2c\u4e00\u6b21 dfs \u5904\u7406\u51fa\u4ee5 \\(1\\) \u4e3a\u6839\u7684\u65f6\u5019\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u80fd\u5f80\u4e0b\u8d70\u7684\u8ddd\u79bb\u7684\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u3002\u7136\u540e\u8003\u8651\u5904\u7406\u51fa\u4ece\u6bcf\u4e2a\u8282\u70b9\u5f80\u4e0a\u8d70\u7684\u6700\u5927\u503c\u3002 \u7b2c\u4e8c\u6b21 dfs \u5206\u7c7b\u8ba8\u8bba\u8fdb\u884c\u8f6c\u79fb\u5373\u53ef\u3002 \u7edf\u8ba1\u7684\u65f6\u5019\uff0c\u5982\u679c\u6700\u5927\u503c\u88ab\u66f4\u65b0\uff0c\u90a3\u4e48\u628a\u6b21\u5927\u503c\u66f4\u65b0\u4e3a\u539f\u6765\u7684\u6700\u5927\u503c\u3002 \u53cd\u4e4b\u6b21\u5927\u503c\u548c\u5f53\u524d\u626b\u5230\u7684\u5143\u7d20\u53d6 \\(\\max\\) \u3002 Trick: \u6362\u6839 DP \u7684\u65b9\u7a0b\u5982\u679c\u51fa\u73b0 \\(\\max\\) \uff0c\u6362\u6839\u7684\u65f6\u5019\u9700\u8981\u5229\u7528\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u8fdb\u884c\u8f6c\u79fb\u3002 \u53ef\u4ee5\u5229\u7528 std::multiset \uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8bb0\u5f55\u3002 1 Tag : \u6362\u6839DP CF708C Centroids \u00b6 \u7ed9\u5b9a\u4e00\u9897\u6811\uff0c\u4f60\u6709\u4e00\u6b21\u5c06\u6811\u6539\u9020\u7684\u673a\u4f1a\uff0c\u6539\u9020\u7684\u610f\u601d\u662f\u5220\u53bb\u4e00\u6761\u8fb9\uff0c\u518d\u52a0\u5165\u4e00\u6761\u8fb9\uff0c\u4fdd\u8bc1\u6539\u9020\u540e\u8fd8\u662f\u4e00\u68f5\u6811\u3002 \u8bf7\u95ee\u6709\u591a\u5c11\u70b9\u53ef\u4ee5\u901a\u8fc7\u6539\u9020\uff0c\u6210\u4e3a\u8fd9\u9897\u6811\u7684\u91cd\u5fc3\uff1f\uff08\u5982\u679c\u4ee5\u67d0\u4e2a\u70b9\u4e3a\u6839\uff0c\u6bcf\u4e2a\u5b50\u6811\u7684\u5927\u5c0f\u90fd\u4e0d\u5927\u4e8e \\(\\dfrac{n}{2}\\) \uff0c\u5219\u79f0\u67d0\u4e2a\u70b9\u4e3a\u91cd\u5fc3\uff09 \u9996\u5148\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9 \\(u\\) \u4e0d\u662f\u91cd\u5fc3\uff0c\u90a3\u4e48\u5b83\u7684\u5b50\u6811\u5f53\u4e2d\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u7684\u5927\u5c0f\u4f1a\u8d85\u51fa \\(\\lfloor \\frac{n}{2} \\rfloor\\) \u3002 \u90a3\u4e48\u6211\u4eec\u6539\u9020\u7684\u65f6\u5019\u5c31\u4e00\u5b9a\u662f\u4ece\u8fd9\u4e2a\u8d85\u51fa \\(\\lfloor \\frac{n}{2} \\rfloor\\) \u7684\u5b50\u6811\u5f53\u4e2d\u627e\u5230\u4e00\u4e2a\u5b50\u6811\uff0c\u4f7f\u5b83\u548c \\(u\\) \u76f8\u8fde\uff0c\u6ee1\u8db3\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u6240\u6709\u5b50\u6811\u90fd\u4e0d\u5927\u4e8e \\(\\lfloor \\frac{n}{2} \\rfloor\\) \u3002 \u5e76\u4e14\u8fd9\u4e2a\u627e\u51fa\u6765\u7684\u5b50\u6811\u5927\u5c0f\u5fc5\u987b\u662f \\(\\le \\lfloor \\frac{n}{2} \\rfloor\\) \u5f53\u4e2d\u6700\u5927\u7684\u4e00\u4e2a\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1 \\(u\\) \u88ab\u6539\u9020\u4e3a\u91cd\u5fc3\u4e4b\u540e\u4e0d\u53ef\u80fd\u51fa\u73b0\u77db\u76fe\u3002 \u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u6c42\u51fa\u6bcf\u4e00\u4e2a\u5b50\u6811\u5f53\u4e2d\u7684\uff0c\u5c0f\u4e8e\u7b49\u4e8e \\(\\lfloor \\frac{n}{2} \\rfloor\\) \u7684\u6700\u5927\u5b50\u6811\u7684\u5927\u5c0f\u5c31\u80fd\u5feb\u901f\u8fdb\u884c\u5224\u65ad\u4e86\u3002 \u5148\u8003\u8651\u4e0d\u6362\u6839\u7684\u60c5\u51b5\u3002 \u8bbe \\(f_{u}\\) \u8868\u793a \\(u\\) \u7684\u5b50\u6811\u5f53\u4e2d\u7684\uff0c\u5c0f\u4e8e\u7b49\u4e8e \\(\\lfloor \\frac{n}{2} \\rfloor\\) \u7684\u6700\u5927\u5b50\u6811\u7684\u5927\u5c0f\u3002 \u90a3\u4e48\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5f97\u5230\u8f6c\u79fb\u65b9\u7a0b\uff1a \\(f_{u}=\\begin{cases} \\max\\{siz_v\\} & siz_v \\le \\lfloor \\frac{n}{2} \\rfloor\\\\ \\max\\{f_{v}\\} & \\text{otherwise.} \\end{cases}\\) \u8003\u8651\u6362\u6839\uff0c\u53d1\u73b0\u65b9\u7a0b\u5f53\u4e2d\u6709\u51fa\u73b0 \\(\\max\\) \uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8bb0\u5f55 \\(f\\) \u7684\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u3002 \u8fd9\u4e2a\u65b9\u7a0b\u6bd4\u8f83\u5957\u8def\uff0c\u5c31\u662f\u5728\u539f\u6765\u7684 \\(f\\) \u7684\u57fa\u7840\u4e0a\u548c \\(n-siz_u\\) \u53d6 \\(\\max\\) \uff0c\u7136\u540e\u6ce8\u610f\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u7684\u8ba8\u8bba\u5c31\u53ef\u4ee5\u3002 Trick: \u5148\u8003\u8651\u6709\u6839\u7684\u60c5\u51b5\u5217\u51fa\u65b9\u7a0b\uff0c\u7136\u540e\u518d\u4ece\u6362\u6839\u7684\u89d2\u5ea6\u7406\u89e3\u3002 1 Tag : \u6362\u6839DP Acwing340 \u901a\u4fe1\u7ebf\u8def \u00b6 \u53ef\u4ee5\u5206\u5c42\u56fe\u6700\u77ed\u8def\u3002 \u5b9e\u9645\u4e0a\u5c31\u662f\u5229\u7528 SPFA DP\u3002 \u6216\u8005\u5229\u7528 \\(01\\) \u4e8c\u5206\uff0c\u6bcf\u6b21\u628a\u4e0d\u8d85\u8fc7 \\(mid\\) \u7684\u8bbe\u7f6e\u4e3a \\(0\\) \uff0c\u5176\u5b83\u4e3a \\(1\\) \u3002 \u7136\u540e\u5229\u7528 dijkstra Check \u5373\u53ef\u3002 Trick: \u628a\u6700\u4f18\u95ee\u9898\u8f6c\u5316\u6210\u5224\u5b9a\u95ee\u9898\u65f6\uff0c\u53ef\u4ee5\u8003\u8651\u5229\u7528 01 \u4e8c\u5206\u7684\u601d\u60f3\u66f4\u65b9\u4fbf\u7684 Check\u3002 Trick2: \u5728\u65e0\u5411\u56fe\u4e0a DP \u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u8f6c\u79fb\u53ef\u80fd\u6709\u540e\u6548\u6027\uff0c\u6240\u4ee5\u53ef\u4ee5\u501f\u52a9 SPFA \u8fdb\u884c DP\u3002 Trick3: \u53ef\u4ee5\u628a\u56fe\u4e0a\u7684\u8282\u70b9\u6839\u636e\u4e0d\u540c\u7684\u60c5\u51b5\u62c6\u6210\u591a\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u5728\u65b0\u56fe\u4e0a\u6839\u636e\u6761\u4ef6\u8fde\u8fb9\uff0c\u95ee\u9898\u5c31\u53ef\u4ee5\u88ab\u8f6c\u5316\u4e3a\u6700\u666e\u901a\u7684 SSSP\u3002 1 Tag : SPFA / 01 \u4e8c\u5206 / \u5206\u5c42\u56fe Acwing1148 \u79d8\u5bc6\u7684\u725b\u5976\u8fd0\u8f93 \u00b6 \u6c42\u65e0\u5411\u8054\u901a\u5e26\u6743\u56fe \\(G\\) \u7684\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u3002 \u9996\u5148\u8003\u8651\u975e\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u600e\u4e48\u505a\u3002 \u5148\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7136\u540e\u679a\u4e3e\u6bcf\u4e00\u6761\u975e\u6811\u8fb9 \\((u,v)\\) \uff0c\u628a\u8fd9\u6761\u975e\u6811\u8fb9\u52a0\u5165\u5230\u6700\u5c0f\u751f\u6210\u6811\u5f53\u4e2d\u3002 \u8fd9\u65f6\u5019\u5fc5\u7136\u4f1a\u51fa\u73b0\u4e00\u4e2a\u73af\uff0c\u6240\u4ee5\u628a\u8fd9\u4e2a\u73af\u4e0a\u7684\u6700\u5927\u503c\u5220\u53bb\u5c31\u53ef\u4ee5\u4e86\u3002 \u660e\u663e\u7684\uff0c\u8fd9\u4e2a\u73af\u4e0a\u7684\u6700\u5927\u503c\u5c31\u662f MST \u5f53\u4e2d \\(u \\to v\\) \u7684\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\u3002 \u500d\u589e\u6c42 LCA \u7684\u65f6\u5019\u987a\u4fbf\u8bb0\u5f55\u4e00\u4e0b\u5373\u53ef\u3002 \u7b54\u6848\u5c31\u662f\u679a\u4e3e\u5b8c\u6240\u6709\u975e\u6811\u8fb9\u88ab\u52a0\u5165\u7684\u60c5\u51b5\u7684\u6700\u5c0f\u503c\u3002 \u7136\u540e\u53d1\u73b0\u8fd9\u91cc\u548c\u4e25\u683c\u6b21\u5c0f\u552f\u4e00\u7684\u533a\u522b\u5c31\u662f\u53ef\u80fd\u52a0\u5165\u7684\u8fb9\u7b49\u4e8e\u88ab\u5220\u9664\u7684\u8fb9\u7684\u6743\u503c\u3002 \u6240\u4ee5\u7528\u7c7b\u4f3c\u6362\u6839 DP \u91cc\u7684 trick\u3002 \u8bb0\u5f55\u6700\u5927\u503c\u7684\u540c\u65f6\u8bb0\u5f55\u6b21\u5927\u503c\uff0c\u5982\u679c\u6700\u5927\u503c\u7b49\u4e8e\u88ab\u52a0\u5165\u7684\u975e\u6811\u8fb9\u7684\u6743\u503c\uff0c\u4f7f\u7528\u6b21\u5927\u503c\u4ee3\u66ff\u6700\u5927\u503c\u66f4\u65b0\u5373\u53ef\u3002 Trick: \u5148\u601d\u8003\u975e\u4e25\u683c\uff0c\u518d\u8003\u8651\u4e25\u683c\uff08\u7279\u6b8a \\(\\to\\) \u4e00\u822c\uff09 Trick2: \u975e\u4e25\u683c \\(\\to\\) \u4e25\u683c \u7684\u8fc7\u7a0b\u5c31\u662f\u53bb\u6389\u76f8\u7b49\uff0c\u5728\u8fd9\u79cd\u6700\u503c\u95ee\u9898\u91cc\u53ef\u4ee5\u5229\u7528\u8bb0\u5f55\u6b21\u6700\u503c\u6765\u89e3\u51b3\u3002 1 Tag : \u4e25\u683c\u6b21\u5c0f / \u751f\u6210\u6811 / LCA / \u500d\u589e","title":"\u4e8c\u6708Tricks"},{"location":"%E6%80%9D%E8%80%83/%E4%BA%8C%E6%9C%88Tricks/#tricks","text":"","title":"\u4e8c\u6708 Tricks \u6574\u7406"},{"location":"%E6%80%9D%E8%80%83/%E4%BA%8C%E6%9C%88Tricks/#acwing97","text":"\u6c42 \\(A^B\\) \u7684\u7ea6\u6570\u4e4b\u548c\uff0c\u8981\u53d6\u6a21\u3002 \u628a \\(A\\) \u5206\u89e3\u8d28\u56e0\u6570\uff0c\u7136\u540e\u6307\u6570\u4e58\u4e0a \\(B\\) \u53ef\u4ee5\u5f97\u5230\u4ee5\u4e0b\u5f0f\u5b50\uff1a \\(sum=(1+p_1+p_1^2+p_1^3+\\dots+p_1^{B\\times c_1})\\times(1+p_2+p_2^2+p_2^3+\\dots+p_2^{B\\times c_2})\\times\\dots \\times (1+p_n+p_n^2+p_n^3+\\dots+p_n^{B\\times c_n})\\) \\(p_i\\) \u8868\u793a \\(A\\) \u7684\u7b2c \\(i\\) \u4e2a\u8d28\u56e0\u5b50\uff0c \\(c_i\\) \u8868\u793a \\(p_i\\) \u5934\u4e0a\u7684\u6307\u6570\u3002 \u6bcf\u4e00\u4e2a\u5c0f\u62ec\u53f7\u91cc\u9762\u53ef\u4ee5\u7528\u7b49\u6bd4\u6570\u5217\u6c42\u548c\uff0c\u4f46\u662f\u53d6\u6a21\uff08\u53ea\uff09\u5bf9\u4e8e\u9664\u6cd5\u6ca1\u6709\u5206\u914d\u5f8b\uff0c\u5206\u5b50\u5206\u6bcd\u4e0d\u80fd\u5206\u5f00\u53d6\u6a21\u7136\u540e\u9664\u3002 \u6240\u4ee5\u8003\u8651\u7528\u5206\u6cbb\u6cd5\u6c42\u6bcf\u4e2a\u5c0f\u62ec\u53f7\u91cc\u7684\u5185\u5bb9\u7136\u540e\u76f8\u4e58\u53d6\u6a21\u3002 \u628a\u6bcf\u4e2a\u5f0f\u5b50\u4ece\u4e2d\u95f4\u62c6\u5f00\uff0c\u7136\u540e\u628a\u540e\u9762\u5927\u4e00\u70b9\u7684\u5f0f\u5b50\u63d0\u53d6\u4e00\u4e2a\u516c\u56e0\u6570\u51fa\u6765\u4f7f\u5f97\u5b83\u548c\u524d\u9762\u7684\u5f0f\u5b50\u4e00\u6837\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5199\u6210\u9012\u5f52\u4e86\u3002 Trick: \u53d6\u6a21\u65f6\u7528\u5206\u6cbb\u6cd5\u5bf9\u7b49\u6bd4\u6570\u5217\u6c42\u548c\u3002 1 Tag : \u5206\u6cbb / \u7b49\u6bd4\u6570\u5217","title":"Acwing97 \u7ea6\u6570\u4e4b\u548c"},{"location":"%E6%80%9D%E8%80%83/%E4%BA%8C%E6%9C%88Tricks/#acwing11","text":"\u6c42\u65b9\u6848\u6570\uff0c\u5148\u80cc\u5305\uff0c\u7136\u540e dp \u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e2a \\(g\\) \u6570\u7ec4\uff0c\u8868\u793a\u4f7f\u7528\u4e0d\u8d85\u8fc7\u5f53\u524d\u7684\u7a7a\u95f4\u7684\u65b9\u6848\u6709\u591a\u5c11\u79cd\u3002 \u6839\u636e \\(f\\) \u8f6c\u79fb\u7684\u4e24\u79cd\u60c5\u51b5\u5206\u5f00\u8ba8\u8bba\u5c31\u884c\u3002 \u4e0d\u77e5\u9053\u4e3a\u5565\uff0c\u6211\u5199\u4e2a \\(tmp\\) \u5b58 \\(f\\) \u6ca1\u8f6c\u79fb\u7684 \\(val\\) \u662f\u9519\u7684\u3002 \u4f46\u662f\u5148\u6bd4\u8f83\uff0c\u8bb0\u5f55 \\(g\\) \u4e4b\u540e\u518d\u66f4\u65b0 \\(f\\) \u5c31\u662f\u5bf9\u7684\u3002 Trick: DP \u7c7b\u7684\u95ee\u9898\u8bb0\u5f55\u65b9\u6848\u53ef\u4ee5\u5728\u8f6c\u79fb\u6210\u529f\u7684\u65f6\u5019\u8bb0\u5f55\u5f53\u524d\u72b6\u6001\u7684\u7b56\u7565\u3002 1 Tag : \u80cc\u5305 / \u65b9\u6848\u6570","title":"Acwing11 \u80cc\u5305\u95ee\u9898\u6c42\u65b9\u6848\u6570"},{"location":"%E6%80%9D%E8%80%83/%E4%BA%8C%E6%9C%88Tricks/#acwing-529-noip2017","text":"\u53d1\u73b0\u672c\u9898\u7684\u8981\u6c42\u5c31\u662f\u6c42\u51fa\u4e00\u9897\u751f\u6210\u6811\uff0c\u4f7f\u5f97\u6309\u7167\u8981\u6c42\u5f97\u5230\u7684\u6743\u503c\u548c\u6700\u5c0f\u3002 \u5e76\u4e14\uff0c\u9898\u76ee\u4e2d\u8981\u6c42\u7684\u201c\u4ece\u6700\u521d\u7684\u5b9d\u85cf\u5c4b\u5230\u5f53\u524d\u9053\u8def\u7684\u8d77\u70b9\u7ecf\u8fc7\u7684\u5b9d\u85cf\u5c4b\u4e2a\u6570\u201d\uff0c\u5c31\u662f\u4ee5\u6700\u521d\u7684\u5b9d\u85cf\u5c4b\u4e3aroot\uff0c\u5f53\u524d\u9053\u8def\u8d77\u70b9\u7684\u6df1\u5ea6\u3002 \u8bbe \\(f[i,msk]\\) \u8868\u793a\u96c6\u5408\uff1a\u5f53\u524d\u6253\u901a\u7684\u6700\u5927\u6df1\u5ea6\u4e3a \\(i\\) \uff0c\u6253\u901a\u4e86\u72b6\u6001\u4e3a \\(msk\\) \u7684\u5b9d\u85cf\u5c4b\u7684\u6240\u6709\u65b9\u6848\u3002\u5c5e\u6027\u4e3a\u6743\u503c\u548c\u7684 Min\u3002 \u90a3\u4e48\u8003\u8651\u679a\u4e3e \u4e0a\u4e00\u5c42 \uff08\u6309\u7167\u201c\u6700\u540e\u201d\u8fdb\u884c\u96c6\u5408\u5212\u5206\uff09\u7684\u72b6\u6001 \\(qwq\\) \uff0c \u90a3\u4e48\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u8f6c\u79fb\u65b9\u7a0b\uff1a \\(f_{i,msk}=\\min\\{f_{i,msk},f_{i-1,qwq}+(i-1)\\times cost(qwq,msk)\\}\\) \u5176\u4e2d \\(cost(qwq,msk)\\) \u8868\u793a\u4ece \\(qwq\\) \u8f6c\u79fb\u5230 \\(msk\\) \u589e\u52a0\u7684\u9053\u8def\u957f\u5ea6\u7684\u6700\u5c0f\u503c\u3002 \u4f46\u662f\u8fd9\u91cc\u8981\u6c42\u53ea\u80fd\u6269\u5c55\u4e00\u5c42\uff0c\u6240\u4ee5\u8fd8\u8981\u5224 \\(qwq\\) \u662f\u5426\u80fd\u53ea\u901a\u8fc7\u4e00\u5c42\u6269\u5c55\u5f97\u5230 \\(msk\\) \u3002 \u5177\u4f53\u600e\u4e48\u5224\u5b9a\uff1f \\(qwq\\) \u4e00\u5b9a\u8981\u662f \\(msk\\) \u7684\u5b50\u96c6\u3002 \\(msk\\) \u5f53\u4e2d\u7684\u6240\u6709\u5143\u7d20\u4e00\u5b9a\u5904\u4e8e\u96c6\u5408 \\(S_{qwq}\\) \uff0c\u5176\u4e2d \\(S_{qwq}\\) \u8868\u793a \\(qwq\\) \u5f80\u4e0b\u6269\u5c55\u4e00\u5c42\u4e4b\u540e\u6240\u7684\u5230\u7684\u6240\u6709\u65b0\u8282\u70b9\u548c \\(qwq\\) \u672c\u8eab\u7ec4\u6210\u7684\u96c6\u5408\u3002 \u8fd9\u4e2a\u53ef\u4ee5\u9884\u5904\u7406\u505a\u3002 \u7136\u540e\u8003\u8651\u5982\u4f55\u5904\u7406 \\(cost\\) \u3002 \u5f53\u9884\u5904\u7406\u51fa\u6240\u6709\u7684\u53ef\u884c\u72b6\u6001\u7684\u5bf9\u4e4b\u540e\uff0c\u6211\u4eec\u8bb0 \\(r(msk,i)\\) \u8868\u793a\u4ece\u72b6\u6001 \\(msk\\) \u6240\u6709\u7684\u7684\u8282\u70b9\u51fa\u53d1\uff0c\u6269\u5c55\u5230\u8282\u70b9 \\(i\\) \u7684\u6700\u77ed\u8def\u3002 \u8fd9\u4e2a\u53ef\u4ee5\u5728\u5904\u7406\u53ef\u884c\u72b6\u6001\u7684\u65f6\u5019\u8f6c\u79fb\u51fa\u6765\u3002 \u7136\u540e\u8003\u8651\u679a\u4e3e\u6240\u6709\u53ef\u884c\u5bf9\u7684\u72b6\u6001\u4e4b\u95f4\u7684\u5dee\u5f02\uff0c\u6bd4\u5982\u5f53\u524d\u662f \\(i,j\\) \u8fd9\u4e24\u4e2a\u72b6\u6001\uff0c\u53ea\u9700\u8981\u679a\u4e3e\u4ed6\u4eec\u4e4b\u524d\u7684\u5dee\u5f02\uff0c\u7136\u540e\u5bf9\u76f8\u5e94\u7684 \\(r\\) \u6c42\u548c\u5373\u53ef\u3002 \u90a3\u4e48\u5c31\u53ef\u4ee5\u8fdb\u884c\u8f6c\u79fb\u4e86\uff0c\u521d\u59cb\u5316\u8ba9\u6bcf\u4e2a\u8282\u70b9\u5206\u522b\u4e3a\u6839\uff0c\u8ba9\u5bf9\u5e94\u72b6\u6001\u7684\u6743\u503c\u4e3a \\(0\\) \uff0c\u5176\u4ed6\u7684\u8d4b\u503c\u4e3a \\(+\\infty\\) \u5373\u53ef\u3002 Trick: \u5728\u601d\u8003DP\u7c7b\u7684\u95ee\u9898\u65f6\u53ef\u4ee5\u5148\u5217\u51fa\u4e00\u4e2a\u65b9\u7a0b\uff0c\u4e0d\u7ba1\u91cc\u9762\u7684\u67d0\u4e9b\u4e1c\u897f\u600e\u4e48\u6c42\uff0c\u7b49\u786e\u5b9a\u5f0f\u5b50\u662f\u5bf9\u7684\uff08\u65e0\u540e\u6548\u6027\uff09\u4e4b\u540e\u518d\u8003\u8651\u8ba1\u7b97\u8fd9\u4e9b\u4e1c\u897f\u3002 1 Tag : \u751f\u6210\u6811 / \u72b6\u538bDP","title":"Acwing 529 [NOIP2017] \u5b9d\u85cf"},{"location":"%E6%80%9D%E8%80%83/%E4%BA%8C%E6%9C%88Tricks/#acwing1073","text":"\u66b4\u529b\u505a\u5c31\u662f\u6bcf\u4e2a\u70b9 dfs \u7136\u540e\u53d6 max\u3002 \u4f46\u662f\u660e\u663e TLE\uff0c\u6240\u4ee5\u8003\u8651\u6362\u6839DP\u3002 \u7b2c\u4e00\u6b21 dfs \u5904\u7406\u51fa\u4ee5 \\(1\\) \u4e3a\u6839\u7684\u65f6\u5019\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u80fd\u5f80\u4e0b\u8d70\u7684\u8ddd\u79bb\u7684\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u3002\u7136\u540e\u8003\u8651\u5904\u7406\u51fa\u4ece\u6bcf\u4e2a\u8282\u70b9\u5f80\u4e0a\u8d70\u7684\u6700\u5927\u503c\u3002 \u7b2c\u4e8c\u6b21 dfs \u5206\u7c7b\u8ba8\u8bba\u8fdb\u884c\u8f6c\u79fb\u5373\u53ef\u3002 \u7edf\u8ba1\u7684\u65f6\u5019\uff0c\u5982\u679c\u6700\u5927\u503c\u88ab\u66f4\u65b0\uff0c\u90a3\u4e48\u628a\u6b21\u5927\u503c\u66f4\u65b0\u4e3a\u539f\u6765\u7684\u6700\u5927\u503c\u3002 \u53cd\u4e4b\u6b21\u5927\u503c\u548c\u5f53\u524d\u626b\u5230\u7684\u5143\u7d20\u53d6 \\(\\max\\) \u3002 Trick: \u6362\u6839 DP \u7684\u65b9\u7a0b\u5982\u679c\u51fa\u73b0 \\(\\max\\) \uff0c\u6362\u6839\u7684\u65f6\u5019\u9700\u8981\u5229\u7528\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u8fdb\u884c\u8f6c\u79fb\u3002 \u53ef\u4ee5\u5229\u7528 std::multiset \uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8bb0\u5f55\u3002 1 Tag : \u6362\u6839DP","title":"Acwing1073 \u6811\u7684\u4e2d\u5fc3"},{"location":"%E6%80%9D%E8%80%83/%E4%BA%8C%E6%9C%88Tricks/#cf708c-centroids","text":"\u7ed9\u5b9a\u4e00\u9897\u6811\uff0c\u4f60\u6709\u4e00\u6b21\u5c06\u6811\u6539\u9020\u7684\u673a\u4f1a\uff0c\u6539\u9020\u7684\u610f\u601d\u662f\u5220\u53bb\u4e00\u6761\u8fb9\uff0c\u518d\u52a0\u5165\u4e00\u6761\u8fb9\uff0c\u4fdd\u8bc1\u6539\u9020\u540e\u8fd8\u662f\u4e00\u68f5\u6811\u3002 \u8bf7\u95ee\u6709\u591a\u5c11\u70b9\u53ef\u4ee5\u901a\u8fc7\u6539\u9020\uff0c\u6210\u4e3a\u8fd9\u9897\u6811\u7684\u91cd\u5fc3\uff1f\uff08\u5982\u679c\u4ee5\u67d0\u4e2a\u70b9\u4e3a\u6839\uff0c\u6bcf\u4e2a\u5b50\u6811\u7684\u5927\u5c0f\u90fd\u4e0d\u5927\u4e8e \\(\\dfrac{n}{2}\\) \uff0c\u5219\u79f0\u67d0\u4e2a\u70b9\u4e3a\u91cd\u5fc3\uff09 \u9996\u5148\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9 \\(u\\) \u4e0d\u662f\u91cd\u5fc3\uff0c\u90a3\u4e48\u5b83\u7684\u5b50\u6811\u5f53\u4e2d\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u7684\u5927\u5c0f\u4f1a\u8d85\u51fa \\(\\lfloor \\frac{n}{2} \\rfloor\\) \u3002 \u90a3\u4e48\u6211\u4eec\u6539\u9020\u7684\u65f6\u5019\u5c31\u4e00\u5b9a\u662f\u4ece\u8fd9\u4e2a\u8d85\u51fa \\(\\lfloor \\frac{n}{2} \\rfloor\\) \u7684\u5b50\u6811\u5f53\u4e2d\u627e\u5230\u4e00\u4e2a\u5b50\u6811\uff0c\u4f7f\u5b83\u548c \\(u\\) \u76f8\u8fde\uff0c\u6ee1\u8db3\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u6240\u6709\u5b50\u6811\u90fd\u4e0d\u5927\u4e8e \\(\\lfloor \\frac{n}{2} \\rfloor\\) \u3002 \u5e76\u4e14\u8fd9\u4e2a\u627e\u51fa\u6765\u7684\u5b50\u6811\u5927\u5c0f\u5fc5\u987b\u662f \\(\\le \\lfloor \\frac{n}{2} \\rfloor\\) \u5f53\u4e2d\u6700\u5927\u7684\u4e00\u4e2a\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1 \\(u\\) \u88ab\u6539\u9020\u4e3a\u91cd\u5fc3\u4e4b\u540e\u4e0d\u53ef\u80fd\u51fa\u73b0\u77db\u76fe\u3002 \u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u6c42\u51fa\u6bcf\u4e00\u4e2a\u5b50\u6811\u5f53\u4e2d\u7684\uff0c\u5c0f\u4e8e\u7b49\u4e8e \\(\\lfloor \\frac{n}{2} \\rfloor\\) \u7684\u6700\u5927\u5b50\u6811\u7684\u5927\u5c0f\u5c31\u80fd\u5feb\u901f\u8fdb\u884c\u5224\u65ad\u4e86\u3002 \u5148\u8003\u8651\u4e0d\u6362\u6839\u7684\u60c5\u51b5\u3002 \u8bbe \\(f_{u}\\) \u8868\u793a \\(u\\) \u7684\u5b50\u6811\u5f53\u4e2d\u7684\uff0c\u5c0f\u4e8e\u7b49\u4e8e \\(\\lfloor \\frac{n}{2} \\rfloor\\) \u7684\u6700\u5927\u5b50\u6811\u7684\u5927\u5c0f\u3002 \u90a3\u4e48\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5f97\u5230\u8f6c\u79fb\u65b9\u7a0b\uff1a \\(f_{u}=\\begin{cases} \\max\\{siz_v\\} & siz_v \\le \\lfloor \\frac{n}{2} \\rfloor\\\\ \\max\\{f_{v}\\} & \\text{otherwise.} \\end{cases}\\) \u8003\u8651\u6362\u6839\uff0c\u53d1\u73b0\u65b9\u7a0b\u5f53\u4e2d\u6709\u51fa\u73b0 \\(\\max\\) \uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8bb0\u5f55 \\(f\\) \u7684\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u3002 \u8fd9\u4e2a\u65b9\u7a0b\u6bd4\u8f83\u5957\u8def\uff0c\u5c31\u662f\u5728\u539f\u6765\u7684 \\(f\\) \u7684\u57fa\u7840\u4e0a\u548c \\(n-siz_u\\) \u53d6 \\(\\max\\) \uff0c\u7136\u540e\u6ce8\u610f\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u7684\u8ba8\u8bba\u5c31\u53ef\u4ee5\u3002 Trick: \u5148\u8003\u8651\u6709\u6839\u7684\u60c5\u51b5\u5217\u51fa\u65b9\u7a0b\uff0c\u7136\u540e\u518d\u4ece\u6362\u6839\u7684\u89d2\u5ea6\u7406\u89e3\u3002 1 Tag : \u6362\u6839DP","title":"CF708C Centroids"},{"location":"%E6%80%9D%E8%80%83/%E4%BA%8C%E6%9C%88Tricks/#acwing340","text":"\u53ef\u4ee5\u5206\u5c42\u56fe\u6700\u77ed\u8def\u3002 \u5b9e\u9645\u4e0a\u5c31\u662f\u5229\u7528 SPFA DP\u3002 \u6216\u8005\u5229\u7528 \\(01\\) \u4e8c\u5206\uff0c\u6bcf\u6b21\u628a\u4e0d\u8d85\u8fc7 \\(mid\\) \u7684\u8bbe\u7f6e\u4e3a \\(0\\) \uff0c\u5176\u5b83\u4e3a \\(1\\) \u3002 \u7136\u540e\u5229\u7528 dijkstra Check \u5373\u53ef\u3002 Trick: \u628a\u6700\u4f18\u95ee\u9898\u8f6c\u5316\u6210\u5224\u5b9a\u95ee\u9898\u65f6\uff0c\u53ef\u4ee5\u8003\u8651\u5229\u7528 01 \u4e8c\u5206\u7684\u601d\u60f3\u66f4\u65b9\u4fbf\u7684 Check\u3002 Trick2: \u5728\u65e0\u5411\u56fe\u4e0a DP \u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u8f6c\u79fb\u53ef\u80fd\u6709\u540e\u6548\u6027\uff0c\u6240\u4ee5\u53ef\u4ee5\u501f\u52a9 SPFA \u8fdb\u884c DP\u3002 Trick3: \u53ef\u4ee5\u628a\u56fe\u4e0a\u7684\u8282\u70b9\u6839\u636e\u4e0d\u540c\u7684\u60c5\u51b5\u62c6\u6210\u591a\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u5728\u65b0\u56fe\u4e0a\u6839\u636e\u6761\u4ef6\u8fde\u8fb9\uff0c\u95ee\u9898\u5c31\u53ef\u4ee5\u88ab\u8f6c\u5316\u4e3a\u6700\u666e\u901a\u7684 SSSP\u3002 1 Tag : SPFA / 01 \u4e8c\u5206 / \u5206\u5c42\u56fe","title":"Acwing340 \u901a\u4fe1\u7ebf\u8def"},{"location":"%E6%80%9D%E8%80%83/%E4%BA%8C%E6%9C%88Tricks/#acwing1148","text":"\u6c42\u65e0\u5411\u8054\u901a\u5e26\u6743\u56fe \\(G\\) \u7684\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u3002 \u9996\u5148\u8003\u8651\u975e\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u600e\u4e48\u505a\u3002 \u5148\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7136\u540e\u679a\u4e3e\u6bcf\u4e00\u6761\u975e\u6811\u8fb9 \\((u,v)\\) \uff0c\u628a\u8fd9\u6761\u975e\u6811\u8fb9\u52a0\u5165\u5230\u6700\u5c0f\u751f\u6210\u6811\u5f53\u4e2d\u3002 \u8fd9\u65f6\u5019\u5fc5\u7136\u4f1a\u51fa\u73b0\u4e00\u4e2a\u73af\uff0c\u6240\u4ee5\u628a\u8fd9\u4e2a\u73af\u4e0a\u7684\u6700\u5927\u503c\u5220\u53bb\u5c31\u53ef\u4ee5\u4e86\u3002 \u660e\u663e\u7684\uff0c\u8fd9\u4e2a\u73af\u4e0a\u7684\u6700\u5927\u503c\u5c31\u662f MST \u5f53\u4e2d \\(u \\to v\\) \u7684\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\u3002 \u500d\u589e\u6c42 LCA \u7684\u65f6\u5019\u987a\u4fbf\u8bb0\u5f55\u4e00\u4e0b\u5373\u53ef\u3002 \u7b54\u6848\u5c31\u662f\u679a\u4e3e\u5b8c\u6240\u6709\u975e\u6811\u8fb9\u88ab\u52a0\u5165\u7684\u60c5\u51b5\u7684\u6700\u5c0f\u503c\u3002 \u7136\u540e\u53d1\u73b0\u8fd9\u91cc\u548c\u4e25\u683c\u6b21\u5c0f\u552f\u4e00\u7684\u533a\u522b\u5c31\u662f\u53ef\u80fd\u52a0\u5165\u7684\u8fb9\u7b49\u4e8e\u88ab\u5220\u9664\u7684\u8fb9\u7684\u6743\u503c\u3002 \u6240\u4ee5\u7528\u7c7b\u4f3c\u6362\u6839 DP \u91cc\u7684 trick\u3002 \u8bb0\u5f55\u6700\u5927\u503c\u7684\u540c\u65f6\u8bb0\u5f55\u6b21\u5927\u503c\uff0c\u5982\u679c\u6700\u5927\u503c\u7b49\u4e8e\u88ab\u52a0\u5165\u7684\u975e\u6811\u8fb9\u7684\u6743\u503c\uff0c\u4f7f\u7528\u6b21\u5927\u503c\u4ee3\u66ff\u6700\u5927\u503c\u66f4\u65b0\u5373\u53ef\u3002 Trick: \u5148\u601d\u8003\u975e\u4e25\u683c\uff0c\u518d\u8003\u8651\u4e25\u683c\uff08\u7279\u6b8a \\(\\to\\) \u4e00\u822c\uff09 Trick2: \u975e\u4e25\u683c \\(\\to\\) \u4e25\u683c \u7684\u8fc7\u7a0b\u5c31\u662f\u53bb\u6389\u76f8\u7b49\uff0c\u5728\u8fd9\u79cd\u6700\u503c\u95ee\u9898\u91cc\u53ef\u4ee5\u5229\u7528\u8bb0\u5f55\u6b21\u6700\u503c\u6765\u89e3\u51b3\u3002 1 Tag : \u4e25\u683c\u6b21\u5c0f / \u751f\u6210\u6811 / LCA / \u500d\u589e","title":"Acwing1148 \u79d8\u5bc6\u7684\u725b\u5976\u8fd0\u8f93"},{"location":"%E6%80%9D%E8%80%83/%E4%BA%8C%E6%9C%88%E5%A5%BD%E9%A2%98/","text":"\u4e8c\u6708\u597d\u9898\u6539\u9519 \u00b6 CF1638E Colorful Operations \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u652f\u6301\u4e09\u79cd\u64cd\u4f5c + 0 l r v \u5c06 \\([l,r]\\) \u6d82\u6210\u989c\u8272 \\(v\\) + 1 v x \u5c06\u6240\u6709\u989c\u8272 \\(v\\) \u7684\u5143\u7d20\u52a0\u4e0a \\(x\\) + 2 x \u67e5\u8be2 \\(a_x\\) 1e6. \u6559\u4f1a\u6211ODT\u7684\u9898\u3002 \u9996\u5148\u53ef\u4ee5\u76f4\u63a5\u5229\u7528 ODT \u7ef4\u62a4\u6bcf\u4e2a\u6bb5\u3002 \u64cd\u4f5c0\u5c31\u662f assign \u5bf9\u4e8e\u64cd\u4f5c1\uff0c\u8003\u8651\u5bf9\u6bcf\u4e2a\u989c\u8272\u7ef4\u62a4\u4e00\u4e2a \\(tag\\) \u3002 \u8868\u793a\u8fd9\u4e2a\u989c\u8272\u5f53\u524d\u4e00\u5171\u52a0\u4e86\u591a\u5c11\u3002 \u7136\u540e assign \u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u88ab\u6539\u53d8\u989c\u8272\u7684\u5757\uff0c\u5148\u5229\u7528\u6811\u72b6\u6570\u7ec4\u628a\u4ed6\u7684\u503c\u52a0\u4e0a \\(tag\\) \uff0c\u63a8\u5e73\u4e4b\u540e\u8fd8\u8981\u51cf\u53bb\u65b0\u989c\u8272\u7684 \\(tag\\) \u3002 \u64cd\u4f5c2\u5229\u7528\u6811\u72b6\u6570\u7ec4+\u5dee\u5206\u8be2\u95ee\u4e4b\u540e\u518d\u52a0\u4e0a\u5f53\u524d\u989c\u8272\u7684 \\(tag\\) \u5373\u53ef\u3002 1 Tag : ODT / \u6811\u72b6\u6570\u7ec4 / \u5dee\u5206 CF1635E Cars \u00b6 \u5728\u4e00\u4e2a\u6570\u8f74\u4e0a\u6709\u4e00\u4e9b\u8f66\uff0c\u6bcf\u4e2a\u8f66\u90fd\u6709\u521d\u59cb\u7684\u4f4d\u7f6e\u548c\u65b9\u5411\uff0c\u65b9\u5411\u4e0d\u4f1a\u6539\u53d8\uff0c\u5f00\u59cb\u8fd0\u52a8\u540e\u901f\u5ea6\u4e0d\u53d8\u3002 \u79f0\u4e24\u8f86\u8f66\u76f8\u5173\uff0c\u5f53\u4e14\u4ec5\u5f53\u4ed6\u4eec\u4e00\u5b9a\u4f1a\u76f8\u9047\uff0c \u79f0\u4e24\u8f86\u8f66\u4e0d\u76f8\u5173\uff0c\u5f53\u4e14\u4ec5\u5f53\u4ed6\u4eec\u4e00\u5b9a\u4e0d\u4f1a\u76f8\u9047\u3002 \u7ed9\u4f60 \\(m\\) \u7ec4\u8f66\u4e4b\u95f4\u76f8\u5173\u4e0d\u76f8\u5173\u7684\u5173\u7cfb\uff0c\u6784\u9020\u4e00\u4e2a\u521d\u59cb\u65b9\u6848\uff0c\u65e0\u89e3\u8f93\u51fa-1\u3002 2e5. \u53d1\u73b0\u4e24\u8f86\u8f66\u60f3\u8981\u6709\u5173\u7cfb\uff0c\u5fc5\u987b\u65b9\u5411\u76f8\u53cd\u3002 \u8fd9\u91cc\u7528\u4e8c\u5206\u56fe\u67d3\u8272\u5224\u5b9a\u5373\u53ef\uff08\u9700\u8981\u8003\u8651\u4e0d\u8054\u901a\u7684\u60c5\u51b5\uff09 \u7136\u540e\u6211\u4eec\u8003\u8651\u4efb\u610f\u4e00\u5bf9\u8f66 \\((u,v)\\) \u5047\u8bbe \\(u\\) \u7684\u65b9\u5411\u662f Right\uff0c \\(v\\) \u7684\u65b9\u5411\u662f Left\u3002 \u90a3\u4e48\u5982\u679c \\((u,v)\\) \u76f8\u5173\uff0c\u90a3\u4e48 \\(u\\) \u5728\u6570\u8f74\u4e0a\u9762\u7684\u4f4d\u7f6e\u5fc5\u5b9a\u5c0f\u4e8e \\(v\\) \u5982\u679c\u4e0d\u76f8\u5173\uff0c \\(u\\) \u5728\u6570\u8f74\u4e0a\u9762\u7684\u4f4d\u7f6e\u5fc5\u5b9a\u5927\u4e8e \\(v\\) \u7b2c\u4e00\u79cd\u5173\u7cfb\u8bb0\u4f5c \\(u \\to v\\) \u7b2c\u4e8c\u79cd\u5173\u7cfb\u8bb0\u4f5c \\(v\\to u\\) \u8fd9\u662f\u4e00\u4e2a\u4e25\u683c\u504f\u5e8f\u5173\u7cfb\uff0c\u6240\u4ee5\u53ef\u4ee5\u8054\u7cfb\u5230 DAG\uff0c\u4f7f\u7528\u62d3\u6251\u6392\u5e8f\u5224\u65ad\u8fd9\u4e2a\u4e25\u683c\u504f\u5e8f\u5173\u7cfb\u662f\u5426\u6210\u7acb\u5373\u53ef\u3002 \u504f\u5e8f\uff08\u4e25\u683c\u548c\u975e\u4e25\u683c\uff09\u7684\u5b9a\u4e49\u770b\u53e6\u5916\u7684\u4e00\u4e2ablog\u5373\u53ef\u3002 \u521d\u59cb\u4f4d\u7f6e\u7528\u62d3\u6251\u5e8f\u5c31\u597d\u3002 Trick: \u4e25\u683c\u504f\u5e8f\u5173\u7cfb\u53ef\u4ee5\u5229\u7528\u62d3\u6251\u6392\u5e8f\u6765\u5224\u5b9a/\u6c42\u89e3\u3002 \u53c2\u8003 https://zhuanlan.zhihu.com/p/470044525 1 Tag : \u62d3\u6251\u6392\u5e8f / \u4e8c\u5206\u56fe / \u504f\u5e8f\u5173\u7cfb CF1635F Closest Pair \u00b6 \u7ed9\u4f60\u4e24\u4e2a\u5e8f\u5217 \\(x,w\\) ,\u5b9a\u4e49\u4e00\u4e2a\u70b9\u5bf9 \\((i,j)\\) \u7684\u6743\u503c\u4e3a \\(|x_i-x_j|\\times (w_i+w_j)\\) \\(q\\) \u7ec4\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u533a\u95f4 \\([l,r]\\) \u5f53\u4e2d\u7684\u70b9\u5bf9\u6743\u503c\u7684\u6700\u5c0f\u503c\u3002 3e5. \u8003\u8651\u628a \\(x\\) \u5f53\u4f5c \\(x\\) \u8f74\uff0c \\(w\\) \u5f53\u4f5c \\(y\\) \u8f74\u3002 \u90a3\u4e48\u628a\u6bcf\u4e2a\u70b9 \\((x_i,w_i)\\) \u653e\u5230\u5750\u6807\u7cfb\u91cc\u9762\u3002 \u5982\u679c\u4e24\u4e2a\u70b9\u5f62\u6210\u7684\u6b63\u65b9\u5f62\u5f53\u4e2d\u6709\u522b\u7684\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u70b9\u5fc5\u5b9a\u4e0d\u662f\u6700\u4f18\u7684\u3002 \u5f62\u5f0f\u5316\u7684\uff0c\u5982\u679c\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u5bf9 \\((i,j)\\) \uff0c \\(\\exist k \\ | \\ x_i<x_k<x_y \\ \\land \\ w_i<w_k<w_j\\) \u90a3\u4e48 \\((i,j)\\) \u5fc5\u5b9a\u4e0d\u662f\u6700\u4f18\u7684\u3002 \u53e6\u5916\u4e00\u8fb9\u7684\u60c5\u51b5\u4e00\u6837\u3002 \u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(i\\) \uff0c\u5229\u7528\u5355\u8c03\u6808\u5411\u540e\u5904\u7406\u51fa\u6240\u6709\u7684\u53ef\u80fd\u6700\u4f18\u70b9\u5bf9 \\((i,j)\\) \u3002 \u7136\u540e\u628a\u8fd9\u4e2a\u70b9\u5bf9\u770b\u4f5c\u662f\u4e00\u4e2a\u7b54\u6848\u533a\u95f4 \\([i,j]\\) \uff0c\u6743\u503c\u5c31\u662f\u8fd9\u4e2a\u70b9\u5bf9\u7684\u8d21\u732e\u3002 \u90a3\u4e48\u79bb\u7ebf\u4e4b\u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u5c31\u662f\u6c42\u8be2\u95ee\u7684\u533a\u95f4\u5f53\u4e2d\u5305\u542b\uff08\u6216\u8005\u4ea4\uff09\u7684\u7b54\u6848\u533a\u95f4\u7684\u6743\u503c\u7684\u6700\u5c0f\u503c\u3002 \u53ef\u4ee5\u4f7f\u7528 Fenwick Tree \u6216\u8005 Segment Tree \u7ef4\u62a4\u3002 Trick: \u6700\u4f18\u6027\u95ee\u9898\u7684\u65f6\u5019\u53ef\u4ee5\u8003\u8651\u67d0\u4e2a\u7b54\u6848\u5982\u4f55\u624d\u53ef\u80fd\u662f\u6700\u4f18\u7684\uff0c\u4ee5\u6b64\u6392\u9664\u5197\u6742\u51b3\u7b56\u3002 1 Tag : \u601d\u7ef4 / \u6811\u72b6\u6570\u7ec4 / \u7ebf\u6bb5\u6811 ABC239F Construct Highway \u00b6 \u7ed9\u4f60\u4e00\u9897\u6811\uff0c\u53ea\u544a\u8bc9\u4f60\u4e00\u90e8\u5206\u8fb9\u548c\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u3002 \u6784\u9020\u8fd9\u68f5\u6811\u3002 2e5. \u9996\u5148\uff0c\u5982\u679c\u7ed9\u51fa\u7684\u5ea6\u6570\u4e4b\u548c\u4e0d\u7b49\u4e8e \\(2n-2\\) \uff0c\u660e\u663e\u65e0\u89e3\u3002 \u7136\u540e\u53d1\u73b0\u7ed9\u51fa\u7684\u8fd9\u4e9b\u8fb9\u4f1a\u628a\u6240\u6709\u7684\u8282\u70b9\u5206\u6210\u82e5\u5e72\u4e2a\u8fde\u901a\u5757\u3002 \u6240\u4ee5\u8003\u8651\u5728\u8fde\u901a\u5757\u4e4b\u95f4\u8fde\u8fb9\u3002 \u5982\u679c\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u91cc\u9762\u7684\u4e24\u4e2a\u70b9\u8fde\u8fb9\uff0c\u90a3\u4e5f\u662f\u65e0\u89e3\u7684\u3002 \u6700\u7279\u6b8a\u7684\u662f\u53ea\u9700\u8981\u4e00\u4e2a\u5ea6\u6570\u7684\u8fde\u901a\u5757\uff0c\u56e0\u4e3a\u6700\u540e\u5fc5\u987b\u662f\u4e00\u68f5\u6811\uff0c\u5b83\u60f3\u8981\u8054\u901a\uff0c\u5c31\u5fc5\u5b9a\u4e0d\u80fd\u548c\u53e6\u5916\u4e00\u4e2a\u9700\u8981\u4e00\u4e2a\u5ea6\u6570\u7684\u8fde\u901a\u5757\u8fde\u8fb9\u3002 \u9664\u975e\u53ea\u5269\u6700\u540e\u4e24\u4e2a\u8fde\u901a\u5757\u3002 \u5426\u5219\u6700\u540e\u6784\u9020\u51fa\u6765\u7684\u4f1a\u662f\u4e2a\u68ee\u6797\u3002 \u6240\u4ee5\u628a\u6240\u6709\u8fde\u901a\u5757\u5206\u6210\u4e24\u7ec4\uff0c\u4e00\u7ec4\u662f\u53ea\u9700\u8981\u4e00\u4e2a\u5ea6\u6570\u7684\u8fde\u901a\u5757\uff0c\u53e6\u5916\u4e00\u7ec4\u662f\u9700\u8981\u81f3\u5c11\u4e24\u4e2a\u7684\u3002 \u7136\u540e\u5c31\u8ba9\u7b2c\u4e00\u7ec4\u7684\u4e0d\u65ad\u548c\u7b2c\u4e8c\u7ec4\u7684\u8fde\u8fb9\uff0c\u7b2c\u4e8c\u7ec4\u7ec4\u5185\u6392\u5e8f\u4ece\u5c0f\u5230\u5927\uff0c\u5982\u679c\u7b2c\u4e8c\u7ec4\u7684\u67d0\u4e2a\u8fde\u901a\u5757\u5728\u8fde\u5b8c\u4e4b\u540e\u53d8\u6210\u4e86\u53ea\u9700\u8981\u4e00\u4e2a\u7684\uff0c\u6254\u8fdb\u7b2c\u4e00\u7ec4\u3002 \u5176\u5b83\u60c5\u51b5\u5c31\u662f\u65e0\u89e3\u4e86\u3002 \u5229\u7528 dsu \u7ef4\u62a4\u5373\u53ef\u3002 1 Tag : \u5e76\u67e5\u96c6 / \u6784\u9020 / \u601d\u7ef4 ABC240G Teleporting Takahashi \u00b6 \u5728\u4e00\u4e2a\u4e09\u7ef4\u5750\u6807\u7cfb\u91cc\uff0c\u6bcf\u6b21\u53ef\u4ee5\u628a \\(x,y,z\\) \u5f53\u4e2d\u4efb\u610f\u7684\u4e00\u4e2a \\(+/-1\\) \uff0c \u95ee\u4e0d\u8d85\u8fc7 \\(k\\) \u6b65\uff0c\u4ece \\((0,0,0)\\to (X,Y,Z)\\) \u7684\u65b9\u6848\u6570 1e7. \u4e0d\u592a\u4f1a\u7684\u6570\u5b66\u9898\u3002 CF1642D Repetitions Decoding \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217\uff0c\u6bcf\u6b21\u53ef\u4ee5\u5728\u4e24\u4e2a\u4f4d\u7f6e\u4e2d\u95f4\u63d2\u5165\u4e24\u4e2a\u5b8c\u5168\u76f8\u540c\u7684\u5143\u7d20\uff0c \u5b9a\u4e49\u4e00\u4e2a\u533a\u95f4\u662f\u597d\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u4ed6\u662f \\(ABC..ABC..\\) \u7684\u5f62\u5f0f\u3002 \u95ee\u662f\u5426\u53ef\u4ee5\u628a\u539f\u5e8f\u5217\u7ecf\u8fc7\u64cd\u4f5c\u540e\uff0c\u5206\u5272\u6210\u591a\u4e2a\u597d\u533a\u95f4\u3002 \u8981\u6c42\u4e0d\u8d85\u8fc7 \\(2\\times n^2\\) \u6b21\u64cd\u4f5c\uff0c\u5e76\u6784\u9020\u65b9\u6848\uff0c\u65e0\u89e3 -1\u3002 CF1642E/CF1641C Anonymity Is Important \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u75c5\u4eba\u7684\u5e8f\u5217\uff0c\u521d\u59cb\u4e0d\u77e5\u9053\u4efb\u4f55\u5173\u4e8e\u75c5\u4eba\u7684\u4fe1\u606f\u3002 \u73b0\u5728\u6709 \\(q\\) \u6b21\u64cd\u4f5c\uff0c\u7b2c\u4e00\u79cd\u662f 0 l r 0/1 \u8868\u793a\u786e\u5b9a \\([l,r]\\) \u5f53\u4e2d\u6709\u6ca1\u6709\u75c5\u4eba \u7b2c\u4e8c\u79cd\u662f\u8be2\u95ee 1 x \uff0c\u8981\u6c42\u8f93\u51fa\u5728\u5f53\u524d\u5df2\u77e5\u4fe1\u606f\u4e0b\uff0c\u75c5\u4eba \\(x\\) \u7684\u72b6\u6001\uff08\u6ca1\u75c5\uff0c\u6709\u75c5\uff0c\u4e0d\u786e\u5b9a\uff09\u3002 2e5. \u8fd9\u9898\u6709\u5f88\u591a\u79cd\u505a\u6cd5\uff0c\u6211\u7684\u505a\u6cd5\u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u7c7b\u4f3c jiangly \u505a\u6cd5\u7684\u4e00\u4e2a std::set \u7ef4\u62a4\u3002 \u53e6\u5916\u4e00\u79cd\u662f odt\u3002 \u9996\u5148\u8003\u8651\u5229\u7528 odt \u7ef4\u62a4\u6574\u4e2a\u5e8f\u5217\uff0c\u521d\u59cb\u63d2\u5165\u4e00\u4e2a \\((1,n,-1)\\) \u7684\u8282\u70b9\u8868\u793a\u6574\u4e2a\u5e8f\u5217\u90fd\u4e0d\u786e\u5b9a\u3002 \u53d1\u73b0 \\(0\\) \u7684\u4f18\u5148\u7ea7\u662f\u6700\u9ad8\u7684\uff0c \\(1\\) \u4e0d\u80fd\u8986\u76d6\u5b83\u3002 \u6240\u4ee5\u5982\u679c\u662f 0 l r 0 \uff0c\u76f4\u63a5\u66b4\u529b assign \u5373\u53ef\u3002 \u4f46\u662f\u5982\u679c\u662f 0 l r 1 \uff0c\u5c31\u8981\u8003\u8651\u4e0d\u8986\u76d6 \\((l,r,0)\\) \u7684\u8282\u70b9\u3002 \u76f4\u63a5\u66b4\u529b\u5373\u53ef\uff0c\u7528\u94fe\u8868\u7ef4\u62a4\u7684\u8bdd\u590d\u6742\u5ea6\u5e94\u8be5\u6ca1\u592a\u5927\u95ee\u9898\u3002 \u5982\u679c\u6700\u540e\u8be2\u95ee\u7684\u4f4d\u7f6e\u7684\u989c\u8272\u662f \\(1\\) \u5e76\u4e14\u8fd9\u4e2a\u5757\u7684\u957f\u5ea6\u662f \\(1\\) \uff0c\u7b54\u6848\u5c31\u662f YES \u5982\u679c\u8be2\u95ee\u5230 \\(0\\) \uff0c\u7b54\u6848\u662f NO \u5982\u679c\u8be2\u95ee\u5230 \\(-1\\) \u6216\u8005\u5757\u957f\u4e0d\u4e3a \\(1\\) \u7684\u989c\u8272\u4e3a \\(1\\) \u7684\u5757\uff0c\u7b54\u6848\u662f N/A\u3002 \u53e6\u5916\u4e00\u79cd odt \u5957 odt \u7684\u505a\u6cd5\u4f3c\u4e4e\u6ca1\u6709\u5fc5\u8981\u3002 1 Tag : \u66b4\u529bDS / ODT / \u67d3\u8272 ABC241F Skate \u00b6 \u7ed9\u4e00\u4e2a\u77e9\u9635\uff0c\u67d0\u4e9b\u4f4d\u7f6e\u6709\u969c\u788d\uff0c\u6bcf\u6b21\u79fb\u52a8\u5fc5\u987b\u8981\u5728\u6700\u540e\u649e\u5230\u4e00\u4e2a\u969c\u788d\uff0c \u95ee\u4ece \\((s_x,s_y)\\) \u5230 \\((g_x,g_y)\\) \u7684\u6700\u5c0f\u6b65\u6570\u3002 \u77e9\u96351e9\uff0c\u969c\u788d 1e5 \uff0c\u8d77\u70b9\u7ec8\u70b9\u4e0d\u91cd\u5408\u3002 \u7ec6\u8282\u7565\u5fae\u6709\u70b9\u591a\u7684 BFS\u3002 \u56e0\u4e3a\u6bcf\u4e00\u6b65\u6700\u540e\u53ea\u4f1a\u505c\u5728\u969c\u788d\u7684\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u3002 \u6240\u4ee5\u628a\u969c\u788d\u7684\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u90fd\u5efa\u4e00\u4e2a\u70b9\uff0c\u5206\u522b\u548c\u53ef\u4ee5\u5230\u5b83\u7684\u70b9\u8fde\u8fb9\u3002 \u7136\u540e BFS \u5373\u53ef\u3002 \u6570\u636e\u8303\u56f4\u5df2\u7ecf\u63d0\u793a\u4e86\u8981\u4ece\u969c\u788d\u5165\u624b\u4e86\u3002 Trick: \u591a\u8bfb\u4e00\u8bfb\u6570\u636e\u8303\u56f4 1 Tag : BFS / \u601d\u7ef4","title":"\u4e8c\u6708\u597d\u9898"},{"location":"%E6%80%9D%E8%80%83/%E4%BA%8C%E6%9C%88%E5%A5%BD%E9%A2%98/#_1","text":"","title":"\u4e8c\u6708\u597d\u9898\u6539\u9519"},{"location":"%E6%80%9D%E8%80%83/%E4%BA%8C%E6%9C%88%E5%A5%BD%E9%A2%98/#cf1638e-colorful-operations","text":"\u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u652f\u6301\u4e09\u79cd\u64cd\u4f5c + 0 l r v \u5c06 \\([l,r]\\) \u6d82\u6210\u989c\u8272 \\(v\\) + 1 v x \u5c06\u6240\u6709\u989c\u8272 \\(v\\) \u7684\u5143\u7d20\u52a0\u4e0a \\(x\\) + 2 x \u67e5\u8be2 \\(a_x\\) 1e6. \u6559\u4f1a\u6211ODT\u7684\u9898\u3002 \u9996\u5148\u53ef\u4ee5\u76f4\u63a5\u5229\u7528 ODT \u7ef4\u62a4\u6bcf\u4e2a\u6bb5\u3002 \u64cd\u4f5c0\u5c31\u662f assign \u5bf9\u4e8e\u64cd\u4f5c1\uff0c\u8003\u8651\u5bf9\u6bcf\u4e2a\u989c\u8272\u7ef4\u62a4\u4e00\u4e2a \\(tag\\) \u3002 \u8868\u793a\u8fd9\u4e2a\u989c\u8272\u5f53\u524d\u4e00\u5171\u52a0\u4e86\u591a\u5c11\u3002 \u7136\u540e assign \u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u88ab\u6539\u53d8\u989c\u8272\u7684\u5757\uff0c\u5148\u5229\u7528\u6811\u72b6\u6570\u7ec4\u628a\u4ed6\u7684\u503c\u52a0\u4e0a \\(tag\\) \uff0c\u63a8\u5e73\u4e4b\u540e\u8fd8\u8981\u51cf\u53bb\u65b0\u989c\u8272\u7684 \\(tag\\) \u3002 \u64cd\u4f5c2\u5229\u7528\u6811\u72b6\u6570\u7ec4+\u5dee\u5206\u8be2\u95ee\u4e4b\u540e\u518d\u52a0\u4e0a\u5f53\u524d\u989c\u8272\u7684 \\(tag\\) \u5373\u53ef\u3002 1 Tag : ODT / \u6811\u72b6\u6570\u7ec4 / \u5dee\u5206","title":"CF1638E Colorful Operations"},{"location":"%E6%80%9D%E8%80%83/%E4%BA%8C%E6%9C%88%E5%A5%BD%E9%A2%98/#cf1635e-cars","text":"\u5728\u4e00\u4e2a\u6570\u8f74\u4e0a\u6709\u4e00\u4e9b\u8f66\uff0c\u6bcf\u4e2a\u8f66\u90fd\u6709\u521d\u59cb\u7684\u4f4d\u7f6e\u548c\u65b9\u5411\uff0c\u65b9\u5411\u4e0d\u4f1a\u6539\u53d8\uff0c\u5f00\u59cb\u8fd0\u52a8\u540e\u901f\u5ea6\u4e0d\u53d8\u3002 \u79f0\u4e24\u8f86\u8f66\u76f8\u5173\uff0c\u5f53\u4e14\u4ec5\u5f53\u4ed6\u4eec\u4e00\u5b9a\u4f1a\u76f8\u9047\uff0c \u79f0\u4e24\u8f86\u8f66\u4e0d\u76f8\u5173\uff0c\u5f53\u4e14\u4ec5\u5f53\u4ed6\u4eec\u4e00\u5b9a\u4e0d\u4f1a\u76f8\u9047\u3002 \u7ed9\u4f60 \\(m\\) \u7ec4\u8f66\u4e4b\u95f4\u76f8\u5173\u4e0d\u76f8\u5173\u7684\u5173\u7cfb\uff0c\u6784\u9020\u4e00\u4e2a\u521d\u59cb\u65b9\u6848\uff0c\u65e0\u89e3\u8f93\u51fa-1\u3002 2e5. \u53d1\u73b0\u4e24\u8f86\u8f66\u60f3\u8981\u6709\u5173\u7cfb\uff0c\u5fc5\u987b\u65b9\u5411\u76f8\u53cd\u3002 \u8fd9\u91cc\u7528\u4e8c\u5206\u56fe\u67d3\u8272\u5224\u5b9a\u5373\u53ef\uff08\u9700\u8981\u8003\u8651\u4e0d\u8054\u901a\u7684\u60c5\u51b5\uff09 \u7136\u540e\u6211\u4eec\u8003\u8651\u4efb\u610f\u4e00\u5bf9\u8f66 \\((u,v)\\) \u5047\u8bbe \\(u\\) \u7684\u65b9\u5411\u662f Right\uff0c \\(v\\) \u7684\u65b9\u5411\u662f Left\u3002 \u90a3\u4e48\u5982\u679c \\((u,v)\\) \u76f8\u5173\uff0c\u90a3\u4e48 \\(u\\) \u5728\u6570\u8f74\u4e0a\u9762\u7684\u4f4d\u7f6e\u5fc5\u5b9a\u5c0f\u4e8e \\(v\\) \u5982\u679c\u4e0d\u76f8\u5173\uff0c \\(u\\) \u5728\u6570\u8f74\u4e0a\u9762\u7684\u4f4d\u7f6e\u5fc5\u5b9a\u5927\u4e8e \\(v\\) \u7b2c\u4e00\u79cd\u5173\u7cfb\u8bb0\u4f5c \\(u \\to v\\) \u7b2c\u4e8c\u79cd\u5173\u7cfb\u8bb0\u4f5c \\(v\\to u\\) \u8fd9\u662f\u4e00\u4e2a\u4e25\u683c\u504f\u5e8f\u5173\u7cfb\uff0c\u6240\u4ee5\u53ef\u4ee5\u8054\u7cfb\u5230 DAG\uff0c\u4f7f\u7528\u62d3\u6251\u6392\u5e8f\u5224\u65ad\u8fd9\u4e2a\u4e25\u683c\u504f\u5e8f\u5173\u7cfb\u662f\u5426\u6210\u7acb\u5373\u53ef\u3002 \u504f\u5e8f\uff08\u4e25\u683c\u548c\u975e\u4e25\u683c\uff09\u7684\u5b9a\u4e49\u770b\u53e6\u5916\u7684\u4e00\u4e2ablog\u5373\u53ef\u3002 \u521d\u59cb\u4f4d\u7f6e\u7528\u62d3\u6251\u5e8f\u5c31\u597d\u3002 Trick: \u4e25\u683c\u504f\u5e8f\u5173\u7cfb\u53ef\u4ee5\u5229\u7528\u62d3\u6251\u6392\u5e8f\u6765\u5224\u5b9a/\u6c42\u89e3\u3002 \u53c2\u8003 https://zhuanlan.zhihu.com/p/470044525 1 Tag : \u62d3\u6251\u6392\u5e8f / \u4e8c\u5206\u56fe / \u504f\u5e8f\u5173\u7cfb","title":"CF1635E Cars"},{"location":"%E6%80%9D%E8%80%83/%E4%BA%8C%E6%9C%88%E5%A5%BD%E9%A2%98/#cf1635f-closest-pair","text":"\u7ed9\u4f60\u4e24\u4e2a\u5e8f\u5217 \\(x,w\\) ,\u5b9a\u4e49\u4e00\u4e2a\u70b9\u5bf9 \\((i,j)\\) \u7684\u6743\u503c\u4e3a \\(|x_i-x_j|\\times (w_i+w_j)\\) \\(q\\) \u7ec4\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u533a\u95f4 \\([l,r]\\) \u5f53\u4e2d\u7684\u70b9\u5bf9\u6743\u503c\u7684\u6700\u5c0f\u503c\u3002 3e5. \u8003\u8651\u628a \\(x\\) \u5f53\u4f5c \\(x\\) \u8f74\uff0c \\(w\\) \u5f53\u4f5c \\(y\\) \u8f74\u3002 \u90a3\u4e48\u628a\u6bcf\u4e2a\u70b9 \\((x_i,w_i)\\) \u653e\u5230\u5750\u6807\u7cfb\u91cc\u9762\u3002 \u5982\u679c\u4e24\u4e2a\u70b9\u5f62\u6210\u7684\u6b63\u65b9\u5f62\u5f53\u4e2d\u6709\u522b\u7684\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u70b9\u5fc5\u5b9a\u4e0d\u662f\u6700\u4f18\u7684\u3002 \u5f62\u5f0f\u5316\u7684\uff0c\u5982\u679c\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u5bf9 \\((i,j)\\) \uff0c \\(\\exist k \\ | \\ x_i<x_k<x_y \\ \\land \\ w_i<w_k<w_j\\) \u90a3\u4e48 \\((i,j)\\) \u5fc5\u5b9a\u4e0d\u662f\u6700\u4f18\u7684\u3002 \u53e6\u5916\u4e00\u8fb9\u7684\u60c5\u51b5\u4e00\u6837\u3002 \u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(i\\) \uff0c\u5229\u7528\u5355\u8c03\u6808\u5411\u540e\u5904\u7406\u51fa\u6240\u6709\u7684\u53ef\u80fd\u6700\u4f18\u70b9\u5bf9 \\((i,j)\\) \u3002 \u7136\u540e\u628a\u8fd9\u4e2a\u70b9\u5bf9\u770b\u4f5c\u662f\u4e00\u4e2a\u7b54\u6848\u533a\u95f4 \\([i,j]\\) \uff0c\u6743\u503c\u5c31\u662f\u8fd9\u4e2a\u70b9\u5bf9\u7684\u8d21\u732e\u3002 \u90a3\u4e48\u79bb\u7ebf\u4e4b\u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u5c31\u662f\u6c42\u8be2\u95ee\u7684\u533a\u95f4\u5f53\u4e2d\u5305\u542b\uff08\u6216\u8005\u4ea4\uff09\u7684\u7b54\u6848\u533a\u95f4\u7684\u6743\u503c\u7684\u6700\u5c0f\u503c\u3002 \u53ef\u4ee5\u4f7f\u7528 Fenwick Tree \u6216\u8005 Segment Tree \u7ef4\u62a4\u3002 Trick: \u6700\u4f18\u6027\u95ee\u9898\u7684\u65f6\u5019\u53ef\u4ee5\u8003\u8651\u67d0\u4e2a\u7b54\u6848\u5982\u4f55\u624d\u53ef\u80fd\u662f\u6700\u4f18\u7684\uff0c\u4ee5\u6b64\u6392\u9664\u5197\u6742\u51b3\u7b56\u3002 1 Tag : \u601d\u7ef4 / \u6811\u72b6\u6570\u7ec4 / \u7ebf\u6bb5\u6811","title":"CF1635F Closest Pair"},{"location":"%E6%80%9D%E8%80%83/%E4%BA%8C%E6%9C%88%E5%A5%BD%E9%A2%98/#abc239f-construct-highway","text":"\u7ed9\u4f60\u4e00\u9897\u6811\uff0c\u53ea\u544a\u8bc9\u4f60\u4e00\u90e8\u5206\u8fb9\u548c\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u3002 \u6784\u9020\u8fd9\u68f5\u6811\u3002 2e5. \u9996\u5148\uff0c\u5982\u679c\u7ed9\u51fa\u7684\u5ea6\u6570\u4e4b\u548c\u4e0d\u7b49\u4e8e \\(2n-2\\) \uff0c\u660e\u663e\u65e0\u89e3\u3002 \u7136\u540e\u53d1\u73b0\u7ed9\u51fa\u7684\u8fd9\u4e9b\u8fb9\u4f1a\u628a\u6240\u6709\u7684\u8282\u70b9\u5206\u6210\u82e5\u5e72\u4e2a\u8fde\u901a\u5757\u3002 \u6240\u4ee5\u8003\u8651\u5728\u8fde\u901a\u5757\u4e4b\u95f4\u8fde\u8fb9\u3002 \u5982\u679c\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u91cc\u9762\u7684\u4e24\u4e2a\u70b9\u8fde\u8fb9\uff0c\u90a3\u4e5f\u662f\u65e0\u89e3\u7684\u3002 \u6700\u7279\u6b8a\u7684\u662f\u53ea\u9700\u8981\u4e00\u4e2a\u5ea6\u6570\u7684\u8fde\u901a\u5757\uff0c\u56e0\u4e3a\u6700\u540e\u5fc5\u987b\u662f\u4e00\u68f5\u6811\uff0c\u5b83\u60f3\u8981\u8054\u901a\uff0c\u5c31\u5fc5\u5b9a\u4e0d\u80fd\u548c\u53e6\u5916\u4e00\u4e2a\u9700\u8981\u4e00\u4e2a\u5ea6\u6570\u7684\u8fde\u901a\u5757\u8fde\u8fb9\u3002 \u9664\u975e\u53ea\u5269\u6700\u540e\u4e24\u4e2a\u8fde\u901a\u5757\u3002 \u5426\u5219\u6700\u540e\u6784\u9020\u51fa\u6765\u7684\u4f1a\u662f\u4e2a\u68ee\u6797\u3002 \u6240\u4ee5\u628a\u6240\u6709\u8fde\u901a\u5757\u5206\u6210\u4e24\u7ec4\uff0c\u4e00\u7ec4\u662f\u53ea\u9700\u8981\u4e00\u4e2a\u5ea6\u6570\u7684\u8fde\u901a\u5757\uff0c\u53e6\u5916\u4e00\u7ec4\u662f\u9700\u8981\u81f3\u5c11\u4e24\u4e2a\u7684\u3002 \u7136\u540e\u5c31\u8ba9\u7b2c\u4e00\u7ec4\u7684\u4e0d\u65ad\u548c\u7b2c\u4e8c\u7ec4\u7684\u8fde\u8fb9\uff0c\u7b2c\u4e8c\u7ec4\u7ec4\u5185\u6392\u5e8f\u4ece\u5c0f\u5230\u5927\uff0c\u5982\u679c\u7b2c\u4e8c\u7ec4\u7684\u67d0\u4e2a\u8fde\u901a\u5757\u5728\u8fde\u5b8c\u4e4b\u540e\u53d8\u6210\u4e86\u53ea\u9700\u8981\u4e00\u4e2a\u7684\uff0c\u6254\u8fdb\u7b2c\u4e00\u7ec4\u3002 \u5176\u5b83\u60c5\u51b5\u5c31\u662f\u65e0\u89e3\u4e86\u3002 \u5229\u7528 dsu \u7ef4\u62a4\u5373\u53ef\u3002 1 Tag : \u5e76\u67e5\u96c6 / \u6784\u9020 / \u601d\u7ef4","title":"ABC239F Construct Highway"},{"location":"%E6%80%9D%E8%80%83/%E4%BA%8C%E6%9C%88%E5%A5%BD%E9%A2%98/#abc240g-teleporting-takahashi","text":"\u5728\u4e00\u4e2a\u4e09\u7ef4\u5750\u6807\u7cfb\u91cc\uff0c\u6bcf\u6b21\u53ef\u4ee5\u628a \\(x,y,z\\) \u5f53\u4e2d\u4efb\u610f\u7684\u4e00\u4e2a \\(+/-1\\) \uff0c \u95ee\u4e0d\u8d85\u8fc7 \\(k\\) \u6b65\uff0c\u4ece \\((0,0,0)\\to (X,Y,Z)\\) \u7684\u65b9\u6848\u6570 1e7. \u4e0d\u592a\u4f1a\u7684\u6570\u5b66\u9898\u3002","title":"ABC240G Teleporting Takahashi"},{"location":"%E6%80%9D%E8%80%83/%E4%BA%8C%E6%9C%88%E5%A5%BD%E9%A2%98/#cf1642d-repetitions-decoding","text":"\u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217\uff0c\u6bcf\u6b21\u53ef\u4ee5\u5728\u4e24\u4e2a\u4f4d\u7f6e\u4e2d\u95f4\u63d2\u5165\u4e24\u4e2a\u5b8c\u5168\u76f8\u540c\u7684\u5143\u7d20\uff0c \u5b9a\u4e49\u4e00\u4e2a\u533a\u95f4\u662f\u597d\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u4ed6\u662f \\(ABC..ABC..\\) \u7684\u5f62\u5f0f\u3002 \u95ee\u662f\u5426\u53ef\u4ee5\u628a\u539f\u5e8f\u5217\u7ecf\u8fc7\u64cd\u4f5c\u540e\uff0c\u5206\u5272\u6210\u591a\u4e2a\u597d\u533a\u95f4\u3002 \u8981\u6c42\u4e0d\u8d85\u8fc7 \\(2\\times n^2\\) \u6b21\u64cd\u4f5c\uff0c\u5e76\u6784\u9020\u65b9\u6848\uff0c\u65e0\u89e3 -1\u3002","title":"CF1642D Repetitions Decoding"},{"location":"%E6%80%9D%E8%80%83/%E4%BA%8C%E6%9C%88%E5%A5%BD%E9%A2%98/#cf1642ecf1641c-anonymity-is-important","text":"\u7ed9\u4f60\u4e00\u4e2a\u75c5\u4eba\u7684\u5e8f\u5217\uff0c\u521d\u59cb\u4e0d\u77e5\u9053\u4efb\u4f55\u5173\u4e8e\u75c5\u4eba\u7684\u4fe1\u606f\u3002 \u73b0\u5728\u6709 \\(q\\) \u6b21\u64cd\u4f5c\uff0c\u7b2c\u4e00\u79cd\u662f 0 l r 0/1 \u8868\u793a\u786e\u5b9a \\([l,r]\\) \u5f53\u4e2d\u6709\u6ca1\u6709\u75c5\u4eba \u7b2c\u4e8c\u79cd\u662f\u8be2\u95ee 1 x \uff0c\u8981\u6c42\u8f93\u51fa\u5728\u5f53\u524d\u5df2\u77e5\u4fe1\u606f\u4e0b\uff0c\u75c5\u4eba \\(x\\) \u7684\u72b6\u6001\uff08\u6ca1\u75c5\uff0c\u6709\u75c5\uff0c\u4e0d\u786e\u5b9a\uff09\u3002 2e5. \u8fd9\u9898\u6709\u5f88\u591a\u79cd\u505a\u6cd5\uff0c\u6211\u7684\u505a\u6cd5\u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u7c7b\u4f3c jiangly \u505a\u6cd5\u7684\u4e00\u4e2a std::set \u7ef4\u62a4\u3002 \u53e6\u5916\u4e00\u79cd\u662f odt\u3002 \u9996\u5148\u8003\u8651\u5229\u7528 odt \u7ef4\u62a4\u6574\u4e2a\u5e8f\u5217\uff0c\u521d\u59cb\u63d2\u5165\u4e00\u4e2a \\((1,n,-1)\\) \u7684\u8282\u70b9\u8868\u793a\u6574\u4e2a\u5e8f\u5217\u90fd\u4e0d\u786e\u5b9a\u3002 \u53d1\u73b0 \\(0\\) \u7684\u4f18\u5148\u7ea7\u662f\u6700\u9ad8\u7684\uff0c \\(1\\) \u4e0d\u80fd\u8986\u76d6\u5b83\u3002 \u6240\u4ee5\u5982\u679c\u662f 0 l r 0 \uff0c\u76f4\u63a5\u66b4\u529b assign \u5373\u53ef\u3002 \u4f46\u662f\u5982\u679c\u662f 0 l r 1 \uff0c\u5c31\u8981\u8003\u8651\u4e0d\u8986\u76d6 \\((l,r,0)\\) \u7684\u8282\u70b9\u3002 \u76f4\u63a5\u66b4\u529b\u5373\u53ef\uff0c\u7528\u94fe\u8868\u7ef4\u62a4\u7684\u8bdd\u590d\u6742\u5ea6\u5e94\u8be5\u6ca1\u592a\u5927\u95ee\u9898\u3002 \u5982\u679c\u6700\u540e\u8be2\u95ee\u7684\u4f4d\u7f6e\u7684\u989c\u8272\u662f \\(1\\) \u5e76\u4e14\u8fd9\u4e2a\u5757\u7684\u957f\u5ea6\u662f \\(1\\) \uff0c\u7b54\u6848\u5c31\u662f YES \u5982\u679c\u8be2\u95ee\u5230 \\(0\\) \uff0c\u7b54\u6848\u662f NO \u5982\u679c\u8be2\u95ee\u5230 \\(-1\\) \u6216\u8005\u5757\u957f\u4e0d\u4e3a \\(1\\) \u7684\u989c\u8272\u4e3a \\(1\\) \u7684\u5757\uff0c\u7b54\u6848\u662f N/A\u3002 \u53e6\u5916\u4e00\u79cd odt \u5957 odt \u7684\u505a\u6cd5\u4f3c\u4e4e\u6ca1\u6709\u5fc5\u8981\u3002 1 Tag : \u66b4\u529bDS / ODT / \u67d3\u8272","title":"CF1642E/CF1641C Anonymity Is Important"},{"location":"%E6%80%9D%E8%80%83/%E4%BA%8C%E6%9C%88%E5%A5%BD%E9%A2%98/#abc241f-skate","text":"\u7ed9\u4e00\u4e2a\u77e9\u9635\uff0c\u67d0\u4e9b\u4f4d\u7f6e\u6709\u969c\u788d\uff0c\u6bcf\u6b21\u79fb\u52a8\u5fc5\u987b\u8981\u5728\u6700\u540e\u649e\u5230\u4e00\u4e2a\u969c\u788d\uff0c \u95ee\u4ece \\((s_x,s_y)\\) \u5230 \\((g_x,g_y)\\) \u7684\u6700\u5c0f\u6b65\u6570\u3002 \u77e9\u96351e9\uff0c\u969c\u788d 1e5 \uff0c\u8d77\u70b9\u7ec8\u70b9\u4e0d\u91cd\u5408\u3002 \u7ec6\u8282\u7565\u5fae\u6709\u70b9\u591a\u7684 BFS\u3002 \u56e0\u4e3a\u6bcf\u4e00\u6b65\u6700\u540e\u53ea\u4f1a\u505c\u5728\u969c\u788d\u7684\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u3002 \u6240\u4ee5\u628a\u969c\u788d\u7684\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u90fd\u5efa\u4e00\u4e2a\u70b9\uff0c\u5206\u522b\u548c\u53ef\u4ee5\u5230\u5b83\u7684\u70b9\u8fde\u8fb9\u3002 \u7136\u540e BFS \u5373\u53ef\u3002 \u6570\u636e\u8303\u56f4\u5df2\u7ecf\u63d0\u793a\u4e86\u8981\u4ece\u969c\u788d\u5165\u624b\u4e86\u3002 Trick: \u591a\u8bfb\u4e00\u8bfb\u6570\u636e\u8303\u56f4 1 Tag : BFS / \u601d\u7ef4","title":"ABC241F Skate"},{"location":"%E6%80%9D%E8%80%83/%E5%9B%9B%E6%9C%88Tricks/","text":"\u56db\u6708 Tricks \u6574\u7406 \u00b6 Acwing272 \u6700\u957f\u516c\u5171\u4e0a\u5347\u5b50\u5e8f\u5217 \u00b6 \u6c42\u4e24\u4e2a\u5e8f\u5217 \\(a,b\\) \u7684\u6700\u957f\u516c\u5171\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \\(1\\le n \\le 3000\\) \u8fd9\u9898\u662f LIS \u548c LCS \u7684\u7efc\u5408\u3002 \u9996\u5148\u8003\u8651\u7c7b\u4f3c LCS \u8bbe\u8ba1\u8fd9\u6837\u4e00\u4e2a\u72b6\u6001 \uff1a \\(dp_{i,j}\\) \u8868\u793a \\(a[1 \\sim i],b[1 \\sim j]\\) \u6784\u6210\u7684\u6240\u6709 LCIS\uff0c\u5c5e\u6027\u4e3a \\(\\max\\) \u3002 \u4f46\u662f\u53d1\u73b0\u8fd9\u6837\u65e0\u6cd5\u5904\u7406 \u201c\u4e0a\u5347\u201d \u8fd9\u4e00\u8981\u7d20\uff0c\u6240\u4ee5\u8003\u8651\u589e\u52a0\u8981\u7d20\u3002 \u8bbe \\(dp_{i,j}\\) \u8868\u793a \\(a[1 \\sim i],b[1\\sim j]\\) \u6784\u6210\u7684\uff0c\u4ee5 \\(b_j\\) \u7ed3\u5c3e\u7684\u6240\u6709 LCIS\uff0c\u5c5e\u6027\u4e3a \\(\\max\\) \u3002 \u7136\u540e\u8003\u8651\u5212\u5206 \\(dp_{i,j}\\) \u8fd9\u4e2a\u5b50\u96c6\u3002 \u7c7b\u4f3c LCS \u7684\u5212\u5206\u65b9\u5f0f\uff0c\u628a \\(dp_{i,j}\\) \u5212\u5206\u6210\u4e24\u4e2a\u53ef\u4ee5\u8f6c\u79fb\u5230\u5b83\u7684\u90e8\u5206\uff1a \u201c\u5305\u542b \\(a_i\\) \u7684\u7531 \\(a[1 \\sim i],b[1\\sim j]\\) \u6784\u6210\u7684\uff0c\u4ee5 \\(b_j\\) \u7ed3\u5c3e\u7684\u6240\u6709 LCIS\u201d\u3002 \u201c\u4e0d\u5305\u542b \\(a_i\\) \u7684\u7531 \\(a[1 \\sim i],b[1\\sim j]\\) \u6784\u6210\u7684\uff0c\u4ee5 \\(b_j\\) \u7ed3\u5c3e\u7684\u6240\u6709 LCIS\u201d\u3002 \u7b2c\u4e00\u79cd\u5728 \\(a_i = b_j\\) \u65f6\u8f6c\u79fb\uff0c\u7b2c\u4e8c\u79cd\u5728 \\(a_i \\not= b_j\\) \u65f6\u8f6c\u79fb\u3002 \u7136\u540e\u8003\u8651\u7528\u4e00\u4e2a\u72b6\u6001\u6765\u5206\u522b\u8868\u793a\u3002 \u7b2c\u4e8c\u4e2a\u90e8\u5206\u5b9e\u9645\u4e0a\u662f\u4ece \\(a[1 \\sim i]\\) \u5f53\u4e2d\u53bb\u9664 \\(a_i\\) \uff0c\u6240\u4ee5\u662f\u7531 \\(a[1 \\sim i-1],b[i \\sim j]\\) \u6784\u6210\uff0c\u4ee5 \\(b_j\\) \u7ed3\u5c3e\u7684 LCIS\uff0c\u53ef\u4ee5\u7528 \\(dp_{i-1,j}\\) \u8868\u793a\u3002 \u7136\u540e\u53d1\u73b0\u7b2c\u4e00\u4e2a\u90e8\u5206\u627e\u4e0d\u5230\u4e00\u4e2a\u76f4\u63a5\u7684\u72b6\u6001\u6765\u8868\u793a\uff0c\u6240\u4ee5\u7ee7\u7eed\u5212\u5206\u3002 \u9996\u5148\u56e0\u4e3a \\(a_i = b_j\\) \uff0c\u6240\u4ee5\u5b50\u96c6\u7684\u7b2c\u4e00\u7ef4\u4e0d\u80fd\u53d6\u5230 \\(i\\) \uff0c\u7b2c\u4e8c\u7ef4\u4e0d\u80fd\u53d6\u5230 \\(j\\) \u3002 \u800c\u72b6\u6001\u8bbe\u8ba1\u4e2d\uff0cLIS \u7684\u8981\u7d20\u4f53\u73b0\u5728 \u201c\u4ee5 \\(b_j\\) \u7ed3\u5c3e\u201d\uff0c\u6240\u4ee5\u8003\u8651\u628a\u8fd9\u4e2a\u5b50\u96c6\u7528\u7c7b\u4f3c LIS \u7684\u65b9\u5f0f\u5212\u5206\u3002 \u53d1\u73b0\u5305\u542b \\(a_i\\) \uff0c\u4ee5 \\(b_j\\) \u7ed3\u5c3e\u7684 LCIS \u90fd\u957f\u6210\u8fd9\u6837\uff1a \\[\\begin{matrix}\\dots,las_1,a_i/b_j \\\\ \\dots,las_2,a_i/b_j\\end{matrix}\\] \u53d1\u73b0 \u201d\u6700\u540e\u4e00\u4e2a\u4e0d\u540c\u70b9\u201c \u5c31\u662f\u5012\u6570\u7b2c\u4e8c\u4e2a\u5143\u7d20 \\(las\\) \u3002 \u6240\u4ee5\u679a\u4e3e \\(b\\) \u7684\u4e0a\u4e00\u4e2a\u5143\u7d20 \\(las\\) \uff0c\u5373\u662f\u628a\u8fd9\u4e2a\u5b50\u96c6\u5212\u5206\u6210 \\(dp_{i-1,k},(0 \\le k <j)\\) \u3002 \uff08\u56fe\u4e2d\u6f0f\u5199\u4e86 \u201d\u6240\u6709\u201c \u4e8c\u5b57\uff09 \u5f97\u5230\u8f6c\u79fb\u65b9\u7a0b\uff1a \\[dp_{i,j} = \\begin{cases}dp_{i-1,j} & a_i \\not= b_j \\\\ \\min\\limits_{0 \\le k < j}\\{dp_{i-1,k}\\} + 1 & a_i = b_j\\end{cases}\\] \u53d1\u73b0\u65b9\u7a0b\u662f \\(\\text{O}(n^3)\\) \u7684\uff0c\u4f46\u662f\u53d1\u73b0\uff0c\u5f53 \\(i\\) \u56fa\u5b9a\u7684\u65f6\u5019\uff0c \\(j\\) \u589e\u52a0 \\(1\\) \uff0c\u90a3\u4e48 \\(dp_{i-1,k}\\) \u7684\u201c\u5019\u9009\u96c6\u5408\u201d\u53ea\u4f1a\u589e\u52a0\u4e00\u4e2a\u5143\u7d20 \\(dp_{i-1,j-1}\\) \u3002 \u800c\u6b64\u5904\u6c42\u5f97\u662f\u201c\u5019\u9009\u96c6\u5408\u201d\u5f53\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u62ff\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u5f53\u524d\u7684\u5019\u9009\u96c6\u5408\u7684\u6700\u5c0f\u503c\uff0c\u76f4\u63a5\u5229\u7528\u8fd9\u4e2a\u53d8\u91cf\u8f6c\u79fb\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 f [ 0 ][ 0 ] = a [ 0 ] = b [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { int cand = 0 ; if ( b [ 0 ] < a [ i ]) cand = f [ i - 1 ][ 0 ]; // \u521d\u59cb\u5728\u51b3\u7b56\u5019\u9009\u96c6\u5408\u4e2d\u7684\u6570\u3002 for ( int j = 1 ; j <= n ; ++ j ) { if ( a [ i ] == b [ j ]) f [ i ][ j ] = cand + 1 ; else f [ i ][ j ] = f [ i - 1 ][ j ]; if ( b [ j ] < a [ i ]) cand = max ( cand , f [ i - 1 ][ j ]); } } int res = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { res = max ( f [ n ][ i ], res ); } Trick : \u5982\u679c\u5212\u5206\u72b6\u6001\u96c6\u5408\u7684\u65f6\u5019\uff0c\u53d1\u73b0\u5f53\u524d\u96c6\u5408\u65e0\u6cd5\u4f7f\u7528\u4e00\u4e2a\u72b6\u6001\u76f4\u63a5\u8868\u793a\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u7ee7\u7eed\u5212\u5206\u6216\u8005\u6dfb\u52a0\u8981\u7d20\u3002 Trick : \u5982\u679c\u7528\u4e8e \u201c\u51b3\u7b56\u201d \u7684 \u201c\u5019\u9009\u96c6\u5408\u201d \u5728\u5916\u5c42\u5faa\u73af\u56fa\u5b9a\uff0c\u5185\u5c42\u5faa\u73af\u589e\u52a0\u65f6\u5143\u7d20\u4e2a\u6570 \u201c \u53ea\u589e\u591a\u4e0d\u51cf\u5c11 \u201d\uff0c\u53ef\u4ee5\u8003\u8651\u76f4\u63a5\u4f7f\u7528\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u6700\u4f18\u51b3\u7b56\u3002 Trick : \u4e0d\u7ba1\u662f\u4e0d\u662f\u6b63\u89e3\uff0c\u5148\u6253\u51fa\u6b63\u786e\u7684\u90e8\u5206\u5206\u66b4\u529b\uff0c\u518d\u8003\u8651\u662f\u5426\u53ef\u4ee5\u4f18\u5316\u6210\u66f4\u4f18\u7684\u89e3\u6cd5\u3002 Acwing274 Mobile service \u00b6 \u4e00\u4e2a\u516c\u53f8\u6709\u4e09\u4e2a\u79fb\u52a8\u670d\u52a1\u5458\uff0c\u6700\u521d\u5206\u522b\u5728\u4f4d\u7f6e \\(1\uff0c2\uff0c3\\) \u5904\u3002 \u5982\u679c\u67d0\u4e2a\u4f4d\u7f6e\uff08\u7528\u4e00\u4e2a\u6574\u6570\u8868\u793a\uff09\u6709\u4e00\u4e2a\u8bf7\u6c42\uff0c\u90a3\u4e48\u516c\u53f8\u5fc5\u987b\u6307\u6d3e\u67d0\u540d\u5458\u5de5\u8d76\u5230\u90a3\u4e2a\u5730\u65b9\u53bb\u3002 \u67d0\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u5458\u5de5\u80fd\u79fb\u52a8\uff0c\u4e14\u4e0d\u5141\u8bb8\u5728\u540c\u6837\u7684\u4f4d\u7f6e\u51fa\u73b0\u4e24\u4e2a\u5458\u5de5\u3002 \u4ece \\(p\\) \u5230 \\(q\\) \u79fb\u52a8\u4e00\u4e2a\u5458\u5de5\uff0c\u9700\u8981\u82b1\u8d39 \\(c(p,q)\\) \u3002 \u8fd9\u4e2a\u51fd\u6570\u4e0d\u4e00\u5b9a\u5bf9\u79f0\uff0c\u4f46\u4fdd\u8bc1 \\(c(p,p)=0\\) \u3002 \u7ed9\u51fa \\(N\\) \u4e2a\u8bf7\u6c42\uff0c\u8bf7\u6c42\u53d1\u751f\u7684\u4f4d\u7f6e\u5206\u522b\u4e3a \\(p_1 \\sim p_N\\) \u3002 \u516c\u53f8\u5fc5\u987b\u6309\u987a\u5e8f\u4f9d\u6b21\u6ee1\u8db3\u6240\u6709\u8bf7\u6c42\uff0c\u4e14\u8fc7\u7a0b\u4e2d\u4e0d\u80fd\u53bb\u5176\u4ed6\u989d\u5916\u7684\u4f4d\u7f6e\uff0c\u76ee\u6807\u662f\u6700\u5c0f\u5316\u516c\u53f8\u82b1\u8d39\uff0c\u8bf7\u4f60\u5e2e\u5fd9\u8ba1\u7b97\u8fd9\u4e2a\u6700\u5c0f\u82b1\u8d39\u3002 \\(1\\le L \\le 200, 1\\le N \\le 3000\\) \u3002 \u9996\u5148\u8003\u8651\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u72b6\u6001\u8bbe\u8ba1\uff1a\u8bbe \\(dp_i\\) \u8868\u793a\u5904\u7406\u5b8c\u524d \\(i\\) \u4e2a\u8bf7\u6c42\uff0c\u516c\u53f8\u7684\u6700\u5c0f\u82b1\u8d39\u3002 \u4f46\u662f\u8fd9\u6837\u6839\u672c\u65e0\u6cd5\u8f6c\u79fb\uff0c\u56e0\u4e3a\u4e0d\u77e5\u9053\u6bcf\u4e2a\u5458\u5de5\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u5728\u54ea\u91cc\u3002 \u6240\u4ee5\u8003\u8651\u6dfb\u52a0\u989d\u5916\u7684\u7ef4\u5ea6\u6765\u8bb0\u5f55\u4e09\u4e2a\u5458\u5de5\u7684\u4f4d\u7f6e\u3002 \u8bbe \\(dp_{i,x,y,z}\\) \u8868\u793a\u5904\u7406\u5b8c\u524d \\(i\\) \u4e2a\u8bf7\u6c42\uff0c\u7b2c\u4e00\u4e8c\u4e09\u4e2a\u5458\u5de5\u5206\u522b\u5728 \\(x,y,z\\) \u5904\uff0c\u516c\u53f8\u5f53\u524d\u7684\u6700\u5c0f\u82b1\u8d39\u3002 \u7136\u540e\u8003\u8651\u5bf9\u8fd9\u4e2a\u72b6\u6001\u96c6\u5408\u8fdb\u884c\u5212\u5206\u3002 \u56e0\u4e3a\u72b6\u6001\u662f\u201c\u5904\u7406\u5b8c\u201d\uff0c\u6240\u4ee5\u5f53\u524d\u77e5\u9053\u7684\u4fe1\u606f\u662f\u6700\u7ec8\u7684\u4f4d\u7f6e\uff0c\u4e0d\u4fbf\u4e8e\u627e\u51fa\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u4e0d\u662f\u4ece \\(i - 1\\) \u8f6c\u79fb\u5230\u5f53\u524d\u72b6\u6001\uff0c\u800c\u662f\u4ece\u5f53\u524d\u72b6\u6001\u987a\u63a8\u66f4\u65b0 \\(i+1\\) \u3002 \u679a\u4e3e\u6bcf\u4e00\u4e2a\u5458\u5de5\u53bb\u5904\u7406 \\(p_{i+1}\\) \u7684\u60c5\u51b5\u5373\u53ef\u3002 \u4f46\u662f\u8f6c\u79fb\u4e4b\u524d\u8981\u5224\u5408\u6cd5\u6027\uff0c\u8981\u6c42 \\(x \\not=y\\not=z\\) \u3002 \u4f46\u662f\u8fd9\u6837\u7a7a\u95f4\u660e\u663e\u4f1a\u7206\u70b8\uff0c\u8003\u8651\u4f18\u5316\u3002 \u56e0\u4e3a\u5904\u7406\u5b8c \\(p_i\\) \u4e4b\u540e\uff0c\u5728\u5408\u6cd5\u7684\u72b6\u6001\u4e0b\uff0c \\(x,y,z\\) \u5f53\u4e2d\u5fc5\u7136\u6709\u4e00\u4e2a\u7b49\u4e8e \\(p_i\\) \u3002 \u6240\u4ee5\u53ef\u4ee5\u7701\u53bb\u4e00\u7ef4\uff0c\u8bbe \\(dp_{i,x,y}\\) \u8868\u793a\u5176\u4e2d\u4e00\u4e2a\u4f4d\u4e8e \\(p_i\\) \uff0c\u53e6\u5916\u4e24\u4e2a\u4f4d\u4e8e \\(x,y\\) \u3002 \u7136\u540e\u7528\u7c7b\u4f3c\u7684\u65b9\u5f0f\u8f6c\u79fb\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 memset ( dp , 0x3f , sizeof dp ); dp [ 0 ][ 1 ][ 2 ] = 0 , p [ 0 ] = 3 ; for ( int i = 0 ; i <= n ; ++ i ) { for ( int x = 1 ; x <= l ; ++ x ) { for ( int y = 1 ; y <= l ; ++ y ) { if ( x == y || x == p [ i ] || y == p [ i ]) continue ; dp [ i + 1 ][ x ][ y ] = min ( dp [ i + 1 ][ x ][ y ], dp [ i ][ x ][ y ] + c [ p [ i ]][ p [ i + 1 ]]); dp [ i + 1 ][ p [ i ]][ y ] = min ( dp [ i + 1 ][ p [ i ]][ y ], dp [ i ][ x ][ y ] + c [ x ][ p [ i + 1 ]]); dp [ i + 1 ][ x ][ p [ i ]] = min ( dp [ i + 1 ][ x ][ p [ i ]], dp [ i ][ x ][ y ] + c [ y ][ p [ i + 1 ]]); } } } int res = 0x3f3f3f3f ; for ( int x = 1 ; x <= l ; ++ x ) { for ( int y = 1 ; y <= l ; ++ y ) { if ( x == y || x == p [ n ] || y == p [ n ]) continue ; res = min ( res , dp [ n ][ x ][ y ]); } } cout << res << endl ; \u672c\u9898\u7684\u8f6c\u79fb\u65b9\u5f0f\u76f8\u5f53\u4e8e\u6c42\u5f53\u524d\u96c6\u5408\u662f\u54ea\u51e0\u4e2a\u72b6\u6001\u7684\u5b50\u96c6\uff0c\u7136\u540e\u628a\u5f53\u524d\u96c6\u5408\u8f6c\u79fb\u5230\u5bf9\u5e94\u7684\u5927\u96c6\u5408\u4e2d\u3002 Trick : \u5f53 \u201c\u9636\u6bb5\u201d \u7c7b\u7684\u4fe1\u606f\u7ef4\u5ea6\u65e0\u6cd5\u8868\u793a\u5f53\u524d\u72b6\u6001\uff0c\u6216\u8005\u65e0\u6cd5\u8fdb\u884c\u5212\u5206\u8f6c\u79fb\u65f6\uff0c\u53ef\u4ee5\u8003\u8651\u6dfb\u52a0\u989d\u5916\u7684\u4fe1\u606f\u7ef4\u5ea6\u3002 Trick: \u5f53 \u201c\u9636\u6bb5\u201d \u603b\u662f\u4ece\u4e00\u4e2a\u9636\u6bb5\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u9636\u6bb5\uff0c\u53ef\u4ee5\u4e0d\u7528\u7ba1\u9644\u52a0\u4fe1\u606f\u7ef4\u5ea6\u7684\u5927\u5c0f\u53d8\u5316\u60c5\u51b5\uff0c\u56e0\u4e3a\u65e0\u540e\u6548\u6027\u5df2\u7ecf\u7531\u9636\u6bb5\u89e3\u51b3\u4e86\u3002 Trick: \u5982\u679c\u9009\u62e9\u7684\u4fe1\u606f\u7ef4\u5ea6\u8fc7\u591a\uff0c\u53ef\u4ee5\u8003\u8651\u68c0\u67e5\u5b83\u4eec\u662f\u5426\u53ef\u4ee5\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\u76f8\u4e92\u5f97\u5230\uff0c\u6bd4\u5982\u672c\u9898\uff0c\u77e5\u9053\u53e6\u5916\u4e24\u4e2a\u5458\u5de5\u7684\u4f4d\u7f6e\uff0c\u5c31\u4e00\u5b9a\u80fd\u77e5\u9053\u53e6\u5916\u4e00\u4e2a\u5458\u5de5\u7684\u4f4d\u7f6e\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u4e24\u4e2a\u5458\u5de5\u7684\u4f4d\u7f6e\u4fe1\u606f\u5373\u53ef\u8986\u76d6\u6574\u4e2a\u72b6\u6001\u7a7a\u95f4\u3002 Acwing284 \u91d1\u5b57\u5854 \u00b6 \u91d1\u5b57\u5854\u7531\u82e5\u5e72\u623f\u95f4\u7ec4\u6210\uff0c\u623f\u95f4\u4e4b\u95f4\u8fde\u6709\u901a\u9053\u3002 \u5982\u679c\u628a\u623f\u95f4\u770b\u4f5c\u8282\u70b9\uff0c\u901a\u9053\u770b\u4f5c\u8fb9\u7684\u8bdd\uff0c\u6574\u4e2a\u91d1\u5b57\u5854\u5448\u73b0\u4e00\u4e2a\u6709\u6839\u6811\u7ed3\u6784\uff0c\u8282\u70b9\u7684\u5b50\u6811\u4e4b\u95f4\u6709\u5e8f\uff0c\u91d1\u5b57\u5854\u6709\u552f\u4e00\u7684\u4e00\u4e2a\u5165\u53e3\u901a\u5411\u6811\u6839\u3002 \u5e76\u4e14\uff0c\u6bcf\u4e2a\u623f\u95f4\u7684\u5899\u58c1\u90fd\u6d82\u6709\u82e5\u5e72\u79cd\u989c\u8272\u7684\u4e00\u79cd\u3002 \u673a\u5668\u4eba\u4f1a\u4ece\u5165\u53e3\u8fdb\u5165\u91d1\u5b57\u5854\uff0c\u4e4b\u540e\u5bf9\u91d1\u5b57\u5854\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u3002 \u673a\u5668\u4eba\u6bcf\u8fdb\u5165\u4e00\u4e2a\u623f\u95f4\uff08\u65e0\u8bba\u662f\u7b2c\u4e00\u6b21\u8fdb\u5165\u8fd8\u662f\u8fd4\u56de\uff09\uff0c\u90fd\u4f1a\u8bb0\u5f55\u8fd9\u4e2a\u623f\u95f4\u7684\u989c\u8272\u3002 \u6700\u540e\uff0c\u673a\u5668\u4eba\u4f1a\u4ece\u5165\u53e3\u9000\u51fa\u91d1\u5b57\u5854\u3002 \u663e\u7136\uff0c\u673a\u5668\u4eba\u4f1a\u8bbf\u95ee\u6bcf\u4e2a\u623f\u95f4\u81f3\u5c11\u4e00\u6b21\uff0c\u5e76\u4e14\u7a7f\u8d8a\u6bcf\u6761\u901a\u9053\u6070\u597d\u4e24\u6b21\uff08\u4e24\u4e2a\u65b9\u5411\u5404\u4e00\u6b21\uff09\uff0c \u7136\u540e\uff0c\u673a\u5668\u4eba\u4f1a\u5f97\u5230\u4e00\u4e2a\u989c\u8272\u5e8f\u5217 \\(S\\) \u3002 \u4f46\u662f\uff0c\u63a2\u9669\u961f\u5458\u53d1\u73b0\u8fd9\u4e2a\u989c\u8272\u5e8f\u5217\u5e76\u4e0d\u80fd\u552f\u4e00\u786e\u5b9a\u91d1\u5b57\u5854\u7684\u7ed3\u6784\u3002 \u73b0\u5728\u4ed6\u4eec\u60f3\u8bf7\u4f60\u5e2e\u52a9\u4ed6\u4eec\u8ba1\u7b97\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u989c\u8272\u5e8f\u5217\uff0c\u6709\u591a\u5c11\u79cd\u53ef\u80fd\u7684\u7ed3\u6784\u4f1a\u5f97\u5230\u8fd9\u4e2a\u5e8f\u5217\u3002 \u56e0\u4e3a\u7ed3\u679c\u53ef\u80fd\u4f1a\u975e\u5e38\u5927\uff0c\u4f60\u53ea\u9700\u8981\u8f93\u51fa\u7b54\u6848\u5bf9 \\(10^9\\) \u53d6\u6a21\u4e4b\u540e\u7684\u503c\u3002 \\(|S| \\le 3000\\) \u770b\u5230\u8fd9\u79cd\u7c7b DFS \u5e8f\uff0c\u4e0d\u96be\u60f3\u5230\u4e00\u4e2a Trick\uff1a\u4e00\u9897\u5b50\u6811\u5185\u7684 DFS \u5e8f\u5fc5\u7136\u8fde\u7eed\uff0c\u8fd9\u79cd\u7c7b DFS \u5e8f\u4e5f\u662f\u4e00\u6837\u3002 \u53d1\u73b0\u95ee\u9898\u662f\u7531\u591a\u5c11\u79cd\u53ef\u80fd\u5e8f\u5217\uff0c\u6240\u4ee5\u4e0d\u96be\u60f3\u5230\u4e00\u4e2a\u533a\u95f4 DP \u7684\u72b6\u6001\uff1a \u8bbe \\(dp_{l,r}\\) \u8868\u793a \\(S_{l\\sim r}\\) \u8fd9\u4e00\u6bb5\u989c\u8272\u5e8f\u5217\u8868\u793a\u7684\u5b50\u6811\u6240\u6709\u53ef\u80fd\u7684\u7ed3\u6784\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u6570\u91cf\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c \\(dp_{l,r}\\) \u662f\u5408\u6cd5\u72b6\u6001\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(r-l+1 \\equiv1(\\operatorname{mod} 2)\\) \u4e14 \\(S_l = S_r\\) \u3002 \u5148\u6392\u9664\u6389\u6240\u6709\u4e0d\u5408\u6cd5\u7684\u72b6\u6001\uff0c\u5373\u662f\u5faa\u73af\u65f6 \\(len = 1,3,5,\\dots\\) \u3002 \u7136\u540e\u53ef\u4ee5\u53d1\u73b0\uff0c \\(S_l,S_r\\) \u4ee3\u8868\u7684\u8282\u70b9\u5fc5\u7136\u662f\u540c\u4e00\u4e2a\uff0c\u5c31\u662f\u8fd9\u6bb5 DFS \u5e8f\u8fde\u7eed\u7684\u5b50\u6811\u7684\u6839\uff08\u8fdb\u53bb\u518d\u51fa\u6765\uff09\u3002 \u90a3\u4e48\u4e00\u4e2a\u7ecf\u5178\u7684\u6839\u636e\u4e58\u6cd5\u539f\u7406\u7684\u8ba1\u6570\u6cd5\u5c31\u662f\uff0c\u679a\u4e3e\u8fd9\u4e2a\u8282\u70b9\u7684\u6240\u6709\u513f\u5b50\u8282\u70b9\uff0c\u5c06\u4ee5\u513f\u5b50\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684 DP \u503c\u5168\u90e8\u4e58\u8d77\u6765\u5f97\u5230\u5f53\u524d\u7684\u7b54\u6848\u3002 \u53ea\u9700\u8981\u679a\u4e3e\u6240\u6709\u5212\u5206\u70b9\u7684\u4f4d\u7f6e \\(k\\) \uff0c \u4f46\u662f\u8fd9\u6837\u590d\u6742\u5ea6\u4e0a\u5929\uff0c\u5fc5\u7136\u4e0d\u53ef\u884c\u3002 \u7528\u533a\u95f4 DP \u7684 \u201d\u5408\u5e76\u7c7b\u201c \u60ef\u7528\u5957\u8def\u53ef\u4ee5\u60f3\u5230\u53e6\u5916\u4e00\u4e2a\u505a\u6cd5\uff0c\u679a\u4e3e\u5212\u5206\u70b9 \\(k\\) \uff0c \u90a3\u4e48\u5de6\u8fb9\u548c\u53f3\u8fb9\u90fd\u53ef\u80fd\u662f\u82e5\u5e72\u9897\u5b50\u6811\uff0c\u4f46\u662f\u8fd9\u6837\u5b50\u662f\u4f1a\u7b97\u91cd\u7684\uff0c\u56e0\u4e3a\u4f60\u4e0d\u77e5\u9053\u8fd9\u51e0\u9897\u5b50\u6811\u662f\u4e0d\u662f\u80fd\u91cd\u65b0\u6392\u5217\u4e00\u4e0b\u53d8\u6210\u65b0\u7684\u5b50\u6811\u3002 \u6240\u4ee5\u6b64\u65f6\u8981\u7528\u5230\u533a\u95f4 DP \u201d\u5212\u5206\u7c7b\u201c\u7684\u601d\u60f3\uff0c\u7528\u524d\u4e00\u6bb5\u7684\u72b6\u6001\u548c\u540e\u4e00\u6bb5\u7684\u82b1\u8d39\u5f97\u5230\u6574\u6bb5\u7684\u72b6\u6001\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u63a7\u5236\u5212\u5206\u6210\u4e24\u4e2a\u90e8\u5206\u7684\u540e\u4e00\u4e2a\u90e8\u5206\u53ea\u5305\u542b\u4e00\u68f5\u5b50\u6811\u3002 \u6240\u4ee5\u679a\u4e3e \\(k\\) \u3002 \u4fdd\u8bc1 \\(S_l = S_r = S_k\\) \u4e14 \\(k - l + 1 \\equiv r - (k + 1) - 1 \\equiv 1 (\\operatorname{mod}2)\\) \u3002 \u5219 \\(dp_{l,k}\\) \u662f\u4e00\u4e2a\u5df2\u7ecf\u8ba1\u7b97\u597d\u7684\u72b6\u6001\uff0c\u540e\u4e00\u6bb5\u662f \u4e00\u68f5 \u7531 \\(S_{k+1}\\sim S_{r-1}\\) \u6784\u6210\u7684\u5b50\u6811\u3002 \u90a3\u4e48\u4ee4 \\(dp_{l,r}\\) \u52a0\u4e0a \\(dp_{l,k} \\times dp_{k + 1,r-1}\\) \u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int si = 3e2 + 10 ; constexpr int mod = 1e9 ; int n ; string s ; int dp [ si ][ si ]; int main () { cin >> s ; int n = ( int ) s . size (); s = ' ' + s ; if ( ! ( n & 1 )) return puts ( \"0\" ), 0 ; memset ( dp , 0 , sizeof dp ); // \u72b6\u6001\u4e0d\u5408\u6cd5\u6216\u8005\u672a\u66f4\u65b0\u65f6\uff0cdp = 0\u3002 for ( int i = 1 ; i <= n ; ++ i ) dp [ i ][ i ] = 1 ; for ( int len = 3 ; len <= n ; len += 2 ) { for ( int i = 1 ; i + len - 1 <= n ; ++ i ) { int j = i + len - 1 ; if ( s [ i ] != s [ j ]) continue ; for ( int k = i ; k <= j - 2 ; k += 2 ) { if ( s [ k ] == s [ j ]) dp [ i ][ j ] = ( dp [ i ][ j ] + 1l l * dp [ i ][ k ] * dp [ k + 1 ][ j - 1 ] % mod ) % mod ; } } } cout << dp [ 1 ][ n ] % mod << endl ; return 0 ; } Acwing288 \u4f11\u606f\u65f6\u95f4 \u00b6 \u7cbe\u5999\u7684DP Acwing313 \u82b1\u5e97\u6a71\u7a97 \u00b6 \u65b9\u6848\u9898 Acwing315 \u65c5\u884c \u00b6 LCS \u7684\u65b9\u6848 Acwing317 \u9668\u77f3\u7684\u79d8\u5bc6 \u00b6 \u8ba1\u6570\u9898\uff0c\u5f88\u7cbe\u5999\u3002 Acwing322 \u6d88\u6728\u5757 \u00b6 \u548c\u4e0b\u4e00\u9053\u4e00\u8d77\u603b\u7ed3 CF607B Zuma \u00b6 \u548c\u4e0a\u4e00\u9053\u4e00\u8d77\u603b\u7ed3 Acwing281 Coins\u3001 \u00b6 \u591a\u91cd\u80cc\u5305\u4f18\u5316DP\uff0c\u53ef\u884c\u6027\u3002","title":"\u56db\u6708Tricks"},{"location":"%E6%80%9D%E8%80%83/%E5%9B%9B%E6%9C%88Tricks/#tricks","text":"","title":"\u56db\u6708 Tricks \u6574\u7406"},{"location":"%E6%80%9D%E8%80%83/%E5%9B%9B%E6%9C%88Tricks/#acwing272","text":"\u6c42\u4e24\u4e2a\u5e8f\u5217 \\(a,b\\) \u7684\u6700\u957f\u516c\u5171\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \\(1\\le n \\le 3000\\) \u8fd9\u9898\u662f LIS \u548c LCS \u7684\u7efc\u5408\u3002 \u9996\u5148\u8003\u8651\u7c7b\u4f3c LCS \u8bbe\u8ba1\u8fd9\u6837\u4e00\u4e2a\u72b6\u6001 \uff1a \\(dp_{i,j}\\) \u8868\u793a \\(a[1 \\sim i],b[1 \\sim j]\\) \u6784\u6210\u7684\u6240\u6709 LCIS\uff0c\u5c5e\u6027\u4e3a \\(\\max\\) \u3002 \u4f46\u662f\u53d1\u73b0\u8fd9\u6837\u65e0\u6cd5\u5904\u7406 \u201c\u4e0a\u5347\u201d \u8fd9\u4e00\u8981\u7d20\uff0c\u6240\u4ee5\u8003\u8651\u589e\u52a0\u8981\u7d20\u3002 \u8bbe \\(dp_{i,j}\\) \u8868\u793a \\(a[1 \\sim i],b[1\\sim j]\\) \u6784\u6210\u7684\uff0c\u4ee5 \\(b_j\\) \u7ed3\u5c3e\u7684\u6240\u6709 LCIS\uff0c\u5c5e\u6027\u4e3a \\(\\max\\) \u3002 \u7136\u540e\u8003\u8651\u5212\u5206 \\(dp_{i,j}\\) \u8fd9\u4e2a\u5b50\u96c6\u3002 \u7c7b\u4f3c LCS \u7684\u5212\u5206\u65b9\u5f0f\uff0c\u628a \\(dp_{i,j}\\) \u5212\u5206\u6210\u4e24\u4e2a\u53ef\u4ee5\u8f6c\u79fb\u5230\u5b83\u7684\u90e8\u5206\uff1a \u201c\u5305\u542b \\(a_i\\) \u7684\u7531 \\(a[1 \\sim i],b[1\\sim j]\\) \u6784\u6210\u7684\uff0c\u4ee5 \\(b_j\\) \u7ed3\u5c3e\u7684\u6240\u6709 LCIS\u201d\u3002 \u201c\u4e0d\u5305\u542b \\(a_i\\) \u7684\u7531 \\(a[1 \\sim i],b[1\\sim j]\\) \u6784\u6210\u7684\uff0c\u4ee5 \\(b_j\\) \u7ed3\u5c3e\u7684\u6240\u6709 LCIS\u201d\u3002 \u7b2c\u4e00\u79cd\u5728 \\(a_i = b_j\\) \u65f6\u8f6c\u79fb\uff0c\u7b2c\u4e8c\u79cd\u5728 \\(a_i \\not= b_j\\) \u65f6\u8f6c\u79fb\u3002 \u7136\u540e\u8003\u8651\u7528\u4e00\u4e2a\u72b6\u6001\u6765\u5206\u522b\u8868\u793a\u3002 \u7b2c\u4e8c\u4e2a\u90e8\u5206\u5b9e\u9645\u4e0a\u662f\u4ece \\(a[1 \\sim i]\\) \u5f53\u4e2d\u53bb\u9664 \\(a_i\\) \uff0c\u6240\u4ee5\u662f\u7531 \\(a[1 \\sim i-1],b[i \\sim j]\\) \u6784\u6210\uff0c\u4ee5 \\(b_j\\) \u7ed3\u5c3e\u7684 LCIS\uff0c\u53ef\u4ee5\u7528 \\(dp_{i-1,j}\\) \u8868\u793a\u3002 \u7136\u540e\u53d1\u73b0\u7b2c\u4e00\u4e2a\u90e8\u5206\u627e\u4e0d\u5230\u4e00\u4e2a\u76f4\u63a5\u7684\u72b6\u6001\u6765\u8868\u793a\uff0c\u6240\u4ee5\u7ee7\u7eed\u5212\u5206\u3002 \u9996\u5148\u56e0\u4e3a \\(a_i = b_j\\) \uff0c\u6240\u4ee5\u5b50\u96c6\u7684\u7b2c\u4e00\u7ef4\u4e0d\u80fd\u53d6\u5230 \\(i\\) \uff0c\u7b2c\u4e8c\u7ef4\u4e0d\u80fd\u53d6\u5230 \\(j\\) \u3002 \u800c\u72b6\u6001\u8bbe\u8ba1\u4e2d\uff0cLIS \u7684\u8981\u7d20\u4f53\u73b0\u5728 \u201c\u4ee5 \\(b_j\\) \u7ed3\u5c3e\u201d\uff0c\u6240\u4ee5\u8003\u8651\u628a\u8fd9\u4e2a\u5b50\u96c6\u7528\u7c7b\u4f3c LIS \u7684\u65b9\u5f0f\u5212\u5206\u3002 \u53d1\u73b0\u5305\u542b \\(a_i\\) \uff0c\u4ee5 \\(b_j\\) \u7ed3\u5c3e\u7684 LCIS \u90fd\u957f\u6210\u8fd9\u6837\uff1a \\[\\begin{matrix}\\dots,las_1,a_i/b_j \\\\ \\dots,las_2,a_i/b_j\\end{matrix}\\] \u53d1\u73b0 \u201d\u6700\u540e\u4e00\u4e2a\u4e0d\u540c\u70b9\u201c \u5c31\u662f\u5012\u6570\u7b2c\u4e8c\u4e2a\u5143\u7d20 \\(las\\) \u3002 \u6240\u4ee5\u679a\u4e3e \\(b\\) \u7684\u4e0a\u4e00\u4e2a\u5143\u7d20 \\(las\\) \uff0c\u5373\u662f\u628a\u8fd9\u4e2a\u5b50\u96c6\u5212\u5206\u6210 \\(dp_{i-1,k},(0 \\le k <j)\\) \u3002 \uff08\u56fe\u4e2d\u6f0f\u5199\u4e86 \u201d\u6240\u6709\u201c \u4e8c\u5b57\uff09 \u5f97\u5230\u8f6c\u79fb\u65b9\u7a0b\uff1a \\[dp_{i,j} = \\begin{cases}dp_{i-1,j} & a_i \\not= b_j \\\\ \\min\\limits_{0 \\le k < j}\\{dp_{i-1,k}\\} + 1 & a_i = b_j\\end{cases}\\] \u53d1\u73b0\u65b9\u7a0b\u662f \\(\\text{O}(n^3)\\) \u7684\uff0c\u4f46\u662f\u53d1\u73b0\uff0c\u5f53 \\(i\\) \u56fa\u5b9a\u7684\u65f6\u5019\uff0c \\(j\\) \u589e\u52a0 \\(1\\) \uff0c\u90a3\u4e48 \\(dp_{i-1,k}\\) \u7684\u201c\u5019\u9009\u96c6\u5408\u201d\u53ea\u4f1a\u589e\u52a0\u4e00\u4e2a\u5143\u7d20 \\(dp_{i-1,j-1}\\) \u3002 \u800c\u6b64\u5904\u6c42\u5f97\u662f\u201c\u5019\u9009\u96c6\u5408\u201d\u5f53\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u62ff\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u5f53\u524d\u7684\u5019\u9009\u96c6\u5408\u7684\u6700\u5c0f\u503c\uff0c\u76f4\u63a5\u5229\u7528\u8fd9\u4e2a\u53d8\u91cf\u8f6c\u79fb\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 f [ 0 ][ 0 ] = a [ 0 ] = b [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { int cand = 0 ; if ( b [ 0 ] < a [ i ]) cand = f [ i - 1 ][ 0 ]; // \u521d\u59cb\u5728\u51b3\u7b56\u5019\u9009\u96c6\u5408\u4e2d\u7684\u6570\u3002 for ( int j = 1 ; j <= n ; ++ j ) { if ( a [ i ] == b [ j ]) f [ i ][ j ] = cand + 1 ; else f [ i ][ j ] = f [ i - 1 ][ j ]; if ( b [ j ] < a [ i ]) cand = max ( cand , f [ i - 1 ][ j ]); } } int res = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { res = max ( f [ n ][ i ], res ); } Trick : \u5982\u679c\u5212\u5206\u72b6\u6001\u96c6\u5408\u7684\u65f6\u5019\uff0c\u53d1\u73b0\u5f53\u524d\u96c6\u5408\u65e0\u6cd5\u4f7f\u7528\u4e00\u4e2a\u72b6\u6001\u76f4\u63a5\u8868\u793a\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u7ee7\u7eed\u5212\u5206\u6216\u8005\u6dfb\u52a0\u8981\u7d20\u3002 Trick : \u5982\u679c\u7528\u4e8e \u201c\u51b3\u7b56\u201d \u7684 \u201c\u5019\u9009\u96c6\u5408\u201d \u5728\u5916\u5c42\u5faa\u73af\u56fa\u5b9a\uff0c\u5185\u5c42\u5faa\u73af\u589e\u52a0\u65f6\u5143\u7d20\u4e2a\u6570 \u201c \u53ea\u589e\u591a\u4e0d\u51cf\u5c11 \u201d\uff0c\u53ef\u4ee5\u8003\u8651\u76f4\u63a5\u4f7f\u7528\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u6700\u4f18\u51b3\u7b56\u3002 Trick : \u4e0d\u7ba1\u662f\u4e0d\u662f\u6b63\u89e3\uff0c\u5148\u6253\u51fa\u6b63\u786e\u7684\u90e8\u5206\u5206\u66b4\u529b\uff0c\u518d\u8003\u8651\u662f\u5426\u53ef\u4ee5\u4f18\u5316\u6210\u66f4\u4f18\u7684\u89e3\u6cd5\u3002","title":"Acwing272 \u6700\u957f\u516c\u5171\u4e0a\u5347\u5b50\u5e8f\u5217"},{"location":"%E6%80%9D%E8%80%83/%E5%9B%9B%E6%9C%88Tricks/#acwing274-mobile-service","text":"\u4e00\u4e2a\u516c\u53f8\u6709\u4e09\u4e2a\u79fb\u52a8\u670d\u52a1\u5458\uff0c\u6700\u521d\u5206\u522b\u5728\u4f4d\u7f6e \\(1\uff0c2\uff0c3\\) \u5904\u3002 \u5982\u679c\u67d0\u4e2a\u4f4d\u7f6e\uff08\u7528\u4e00\u4e2a\u6574\u6570\u8868\u793a\uff09\u6709\u4e00\u4e2a\u8bf7\u6c42\uff0c\u90a3\u4e48\u516c\u53f8\u5fc5\u987b\u6307\u6d3e\u67d0\u540d\u5458\u5de5\u8d76\u5230\u90a3\u4e2a\u5730\u65b9\u53bb\u3002 \u67d0\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u5458\u5de5\u80fd\u79fb\u52a8\uff0c\u4e14\u4e0d\u5141\u8bb8\u5728\u540c\u6837\u7684\u4f4d\u7f6e\u51fa\u73b0\u4e24\u4e2a\u5458\u5de5\u3002 \u4ece \\(p\\) \u5230 \\(q\\) \u79fb\u52a8\u4e00\u4e2a\u5458\u5de5\uff0c\u9700\u8981\u82b1\u8d39 \\(c(p,q)\\) \u3002 \u8fd9\u4e2a\u51fd\u6570\u4e0d\u4e00\u5b9a\u5bf9\u79f0\uff0c\u4f46\u4fdd\u8bc1 \\(c(p,p)=0\\) \u3002 \u7ed9\u51fa \\(N\\) \u4e2a\u8bf7\u6c42\uff0c\u8bf7\u6c42\u53d1\u751f\u7684\u4f4d\u7f6e\u5206\u522b\u4e3a \\(p_1 \\sim p_N\\) \u3002 \u516c\u53f8\u5fc5\u987b\u6309\u987a\u5e8f\u4f9d\u6b21\u6ee1\u8db3\u6240\u6709\u8bf7\u6c42\uff0c\u4e14\u8fc7\u7a0b\u4e2d\u4e0d\u80fd\u53bb\u5176\u4ed6\u989d\u5916\u7684\u4f4d\u7f6e\uff0c\u76ee\u6807\u662f\u6700\u5c0f\u5316\u516c\u53f8\u82b1\u8d39\uff0c\u8bf7\u4f60\u5e2e\u5fd9\u8ba1\u7b97\u8fd9\u4e2a\u6700\u5c0f\u82b1\u8d39\u3002 \\(1\\le L \\le 200, 1\\le N \\le 3000\\) \u3002 \u9996\u5148\u8003\u8651\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u72b6\u6001\u8bbe\u8ba1\uff1a\u8bbe \\(dp_i\\) \u8868\u793a\u5904\u7406\u5b8c\u524d \\(i\\) \u4e2a\u8bf7\u6c42\uff0c\u516c\u53f8\u7684\u6700\u5c0f\u82b1\u8d39\u3002 \u4f46\u662f\u8fd9\u6837\u6839\u672c\u65e0\u6cd5\u8f6c\u79fb\uff0c\u56e0\u4e3a\u4e0d\u77e5\u9053\u6bcf\u4e2a\u5458\u5de5\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u5728\u54ea\u91cc\u3002 \u6240\u4ee5\u8003\u8651\u6dfb\u52a0\u989d\u5916\u7684\u7ef4\u5ea6\u6765\u8bb0\u5f55\u4e09\u4e2a\u5458\u5de5\u7684\u4f4d\u7f6e\u3002 \u8bbe \\(dp_{i,x,y,z}\\) \u8868\u793a\u5904\u7406\u5b8c\u524d \\(i\\) \u4e2a\u8bf7\u6c42\uff0c\u7b2c\u4e00\u4e8c\u4e09\u4e2a\u5458\u5de5\u5206\u522b\u5728 \\(x,y,z\\) \u5904\uff0c\u516c\u53f8\u5f53\u524d\u7684\u6700\u5c0f\u82b1\u8d39\u3002 \u7136\u540e\u8003\u8651\u5bf9\u8fd9\u4e2a\u72b6\u6001\u96c6\u5408\u8fdb\u884c\u5212\u5206\u3002 \u56e0\u4e3a\u72b6\u6001\u662f\u201c\u5904\u7406\u5b8c\u201d\uff0c\u6240\u4ee5\u5f53\u524d\u77e5\u9053\u7684\u4fe1\u606f\u662f\u6700\u7ec8\u7684\u4f4d\u7f6e\uff0c\u4e0d\u4fbf\u4e8e\u627e\u51fa\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u4e0d\u662f\u4ece \\(i - 1\\) \u8f6c\u79fb\u5230\u5f53\u524d\u72b6\u6001\uff0c\u800c\u662f\u4ece\u5f53\u524d\u72b6\u6001\u987a\u63a8\u66f4\u65b0 \\(i+1\\) \u3002 \u679a\u4e3e\u6bcf\u4e00\u4e2a\u5458\u5de5\u53bb\u5904\u7406 \\(p_{i+1}\\) \u7684\u60c5\u51b5\u5373\u53ef\u3002 \u4f46\u662f\u8f6c\u79fb\u4e4b\u524d\u8981\u5224\u5408\u6cd5\u6027\uff0c\u8981\u6c42 \\(x \\not=y\\not=z\\) \u3002 \u4f46\u662f\u8fd9\u6837\u7a7a\u95f4\u660e\u663e\u4f1a\u7206\u70b8\uff0c\u8003\u8651\u4f18\u5316\u3002 \u56e0\u4e3a\u5904\u7406\u5b8c \\(p_i\\) \u4e4b\u540e\uff0c\u5728\u5408\u6cd5\u7684\u72b6\u6001\u4e0b\uff0c \\(x,y,z\\) \u5f53\u4e2d\u5fc5\u7136\u6709\u4e00\u4e2a\u7b49\u4e8e \\(p_i\\) \u3002 \u6240\u4ee5\u53ef\u4ee5\u7701\u53bb\u4e00\u7ef4\uff0c\u8bbe \\(dp_{i,x,y}\\) \u8868\u793a\u5176\u4e2d\u4e00\u4e2a\u4f4d\u4e8e \\(p_i\\) \uff0c\u53e6\u5916\u4e24\u4e2a\u4f4d\u4e8e \\(x,y\\) \u3002 \u7136\u540e\u7528\u7c7b\u4f3c\u7684\u65b9\u5f0f\u8f6c\u79fb\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 memset ( dp , 0x3f , sizeof dp ); dp [ 0 ][ 1 ][ 2 ] = 0 , p [ 0 ] = 3 ; for ( int i = 0 ; i <= n ; ++ i ) { for ( int x = 1 ; x <= l ; ++ x ) { for ( int y = 1 ; y <= l ; ++ y ) { if ( x == y || x == p [ i ] || y == p [ i ]) continue ; dp [ i + 1 ][ x ][ y ] = min ( dp [ i + 1 ][ x ][ y ], dp [ i ][ x ][ y ] + c [ p [ i ]][ p [ i + 1 ]]); dp [ i + 1 ][ p [ i ]][ y ] = min ( dp [ i + 1 ][ p [ i ]][ y ], dp [ i ][ x ][ y ] + c [ x ][ p [ i + 1 ]]); dp [ i + 1 ][ x ][ p [ i ]] = min ( dp [ i + 1 ][ x ][ p [ i ]], dp [ i ][ x ][ y ] + c [ y ][ p [ i + 1 ]]); } } } int res = 0x3f3f3f3f ; for ( int x = 1 ; x <= l ; ++ x ) { for ( int y = 1 ; y <= l ; ++ y ) { if ( x == y || x == p [ n ] || y == p [ n ]) continue ; res = min ( res , dp [ n ][ x ][ y ]); } } cout << res << endl ; \u672c\u9898\u7684\u8f6c\u79fb\u65b9\u5f0f\u76f8\u5f53\u4e8e\u6c42\u5f53\u524d\u96c6\u5408\u662f\u54ea\u51e0\u4e2a\u72b6\u6001\u7684\u5b50\u96c6\uff0c\u7136\u540e\u628a\u5f53\u524d\u96c6\u5408\u8f6c\u79fb\u5230\u5bf9\u5e94\u7684\u5927\u96c6\u5408\u4e2d\u3002 Trick : \u5f53 \u201c\u9636\u6bb5\u201d \u7c7b\u7684\u4fe1\u606f\u7ef4\u5ea6\u65e0\u6cd5\u8868\u793a\u5f53\u524d\u72b6\u6001\uff0c\u6216\u8005\u65e0\u6cd5\u8fdb\u884c\u5212\u5206\u8f6c\u79fb\u65f6\uff0c\u53ef\u4ee5\u8003\u8651\u6dfb\u52a0\u989d\u5916\u7684\u4fe1\u606f\u7ef4\u5ea6\u3002 Trick: \u5f53 \u201c\u9636\u6bb5\u201d \u603b\u662f\u4ece\u4e00\u4e2a\u9636\u6bb5\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u9636\u6bb5\uff0c\u53ef\u4ee5\u4e0d\u7528\u7ba1\u9644\u52a0\u4fe1\u606f\u7ef4\u5ea6\u7684\u5927\u5c0f\u53d8\u5316\u60c5\u51b5\uff0c\u56e0\u4e3a\u65e0\u540e\u6548\u6027\u5df2\u7ecf\u7531\u9636\u6bb5\u89e3\u51b3\u4e86\u3002 Trick: \u5982\u679c\u9009\u62e9\u7684\u4fe1\u606f\u7ef4\u5ea6\u8fc7\u591a\uff0c\u53ef\u4ee5\u8003\u8651\u68c0\u67e5\u5b83\u4eec\u662f\u5426\u53ef\u4ee5\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\u76f8\u4e92\u5f97\u5230\uff0c\u6bd4\u5982\u672c\u9898\uff0c\u77e5\u9053\u53e6\u5916\u4e24\u4e2a\u5458\u5de5\u7684\u4f4d\u7f6e\uff0c\u5c31\u4e00\u5b9a\u80fd\u77e5\u9053\u53e6\u5916\u4e00\u4e2a\u5458\u5de5\u7684\u4f4d\u7f6e\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u4e24\u4e2a\u5458\u5de5\u7684\u4f4d\u7f6e\u4fe1\u606f\u5373\u53ef\u8986\u76d6\u6574\u4e2a\u72b6\u6001\u7a7a\u95f4\u3002","title":"Acwing274 Mobile service"},{"location":"%E6%80%9D%E8%80%83/%E5%9B%9B%E6%9C%88Tricks/#acwing284","text":"\u91d1\u5b57\u5854\u7531\u82e5\u5e72\u623f\u95f4\u7ec4\u6210\uff0c\u623f\u95f4\u4e4b\u95f4\u8fde\u6709\u901a\u9053\u3002 \u5982\u679c\u628a\u623f\u95f4\u770b\u4f5c\u8282\u70b9\uff0c\u901a\u9053\u770b\u4f5c\u8fb9\u7684\u8bdd\uff0c\u6574\u4e2a\u91d1\u5b57\u5854\u5448\u73b0\u4e00\u4e2a\u6709\u6839\u6811\u7ed3\u6784\uff0c\u8282\u70b9\u7684\u5b50\u6811\u4e4b\u95f4\u6709\u5e8f\uff0c\u91d1\u5b57\u5854\u6709\u552f\u4e00\u7684\u4e00\u4e2a\u5165\u53e3\u901a\u5411\u6811\u6839\u3002 \u5e76\u4e14\uff0c\u6bcf\u4e2a\u623f\u95f4\u7684\u5899\u58c1\u90fd\u6d82\u6709\u82e5\u5e72\u79cd\u989c\u8272\u7684\u4e00\u79cd\u3002 \u673a\u5668\u4eba\u4f1a\u4ece\u5165\u53e3\u8fdb\u5165\u91d1\u5b57\u5854\uff0c\u4e4b\u540e\u5bf9\u91d1\u5b57\u5854\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u3002 \u673a\u5668\u4eba\u6bcf\u8fdb\u5165\u4e00\u4e2a\u623f\u95f4\uff08\u65e0\u8bba\u662f\u7b2c\u4e00\u6b21\u8fdb\u5165\u8fd8\u662f\u8fd4\u56de\uff09\uff0c\u90fd\u4f1a\u8bb0\u5f55\u8fd9\u4e2a\u623f\u95f4\u7684\u989c\u8272\u3002 \u6700\u540e\uff0c\u673a\u5668\u4eba\u4f1a\u4ece\u5165\u53e3\u9000\u51fa\u91d1\u5b57\u5854\u3002 \u663e\u7136\uff0c\u673a\u5668\u4eba\u4f1a\u8bbf\u95ee\u6bcf\u4e2a\u623f\u95f4\u81f3\u5c11\u4e00\u6b21\uff0c\u5e76\u4e14\u7a7f\u8d8a\u6bcf\u6761\u901a\u9053\u6070\u597d\u4e24\u6b21\uff08\u4e24\u4e2a\u65b9\u5411\u5404\u4e00\u6b21\uff09\uff0c \u7136\u540e\uff0c\u673a\u5668\u4eba\u4f1a\u5f97\u5230\u4e00\u4e2a\u989c\u8272\u5e8f\u5217 \\(S\\) \u3002 \u4f46\u662f\uff0c\u63a2\u9669\u961f\u5458\u53d1\u73b0\u8fd9\u4e2a\u989c\u8272\u5e8f\u5217\u5e76\u4e0d\u80fd\u552f\u4e00\u786e\u5b9a\u91d1\u5b57\u5854\u7684\u7ed3\u6784\u3002 \u73b0\u5728\u4ed6\u4eec\u60f3\u8bf7\u4f60\u5e2e\u52a9\u4ed6\u4eec\u8ba1\u7b97\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u989c\u8272\u5e8f\u5217\uff0c\u6709\u591a\u5c11\u79cd\u53ef\u80fd\u7684\u7ed3\u6784\u4f1a\u5f97\u5230\u8fd9\u4e2a\u5e8f\u5217\u3002 \u56e0\u4e3a\u7ed3\u679c\u53ef\u80fd\u4f1a\u975e\u5e38\u5927\uff0c\u4f60\u53ea\u9700\u8981\u8f93\u51fa\u7b54\u6848\u5bf9 \\(10^9\\) \u53d6\u6a21\u4e4b\u540e\u7684\u503c\u3002 \\(|S| \\le 3000\\) \u770b\u5230\u8fd9\u79cd\u7c7b DFS \u5e8f\uff0c\u4e0d\u96be\u60f3\u5230\u4e00\u4e2a Trick\uff1a\u4e00\u9897\u5b50\u6811\u5185\u7684 DFS \u5e8f\u5fc5\u7136\u8fde\u7eed\uff0c\u8fd9\u79cd\u7c7b DFS \u5e8f\u4e5f\u662f\u4e00\u6837\u3002 \u53d1\u73b0\u95ee\u9898\u662f\u7531\u591a\u5c11\u79cd\u53ef\u80fd\u5e8f\u5217\uff0c\u6240\u4ee5\u4e0d\u96be\u60f3\u5230\u4e00\u4e2a\u533a\u95f4 DP \u7684\u72b6\u6001\uff1a \u8bbe \\(dp_{l,r}\\) \u8868\u793a \\(S_{l\\sim r}\\) \u8fd9\u4e00\u6bb5\u989c\u8272\u5e8f\u5217\u8868\u793a\u7684\u5b50\u6811\u6240\u6709\u53ef\u80fd\u7684\u7ed3\u6784\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u6570\u91cf\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c \\(dp_{l,r}\\) \u662f\u5408\u6cd5\u72b6\u6001\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(r-l+1 \\equiv1(\\operatorname{mod} 2)\\) \u4e14 \\(S_l = S_r\\) \u3002 \u5148\u6392\u9664\u6389\u6240\u6709\u4e0d\u5408\u6cd5\u7684\u72b6\u6001\uff0c\u5373\u662f\u5faa\u73af\u65f6 \\(len = 1,3,5,\\dots\\) \u3002 \u7136\u540e\u53ef\u4ee5\u53d1\u73b0\uff0c \\(S_l,S_r\\) \u4ee3\u8868\u7684\u8282\u70b9\u5fc5\u7136\u662f\u540c\u4e00\u4e2a\uff0c\u5c31\u662f\u8fd9\u6bb5 DFS \u5e8f\u8fde\u7eed\u7684\u5b50\u6811\u7684\u6839\uff08\u8fdb\u53bb\u518d\u51fa\u6765\uff09\u3002 \u90a3\u4e48\u4e00\u4e2a\u7ecf\u5178\u7684\u6839\u636e\u4e58\u6cd5\u539f\u7406\u7684\u8ba1\u6570\u6cd5\u5c31\u662f\uff0c\u679a\u4e3e\u8fd9\u4e2a\u8282\u70b9\u7684\u6240\u6709\u513f\u5b50\u8282\u70b9\uff0c\u5c06\u4ee5\u513f\u5b50\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684 DP \u503c\u5168\u90e8\u4e58\u8d77\u6765\u5f97\u5230\u5f53\u524d\u7684\u7b54\u6848\u3002 \u53ea\u9700\u8981\u679a\u4e3e\u6240\u6709\u5212\u5206\u70b9\u7684\u4f4d\u7f6e \\(k\\) \uff0c \u4f46\u662f\u8fd9\u6837\u590d\u6742\u5ea6\u4e0a\u5929\uff0c\u5fc5\u7136\u4e0d\u53ef\u884c\u3002 \u7528\u533a\u95f4 DP \u7684 \u201d\u5408\u5e76\u7c7b\u201c \u60ef\u7528\u5957\u8def\u53ef\u4ee5\u60f3\u5230\u53e6\u5916\u4e00\u4e2a\u505a\u6cd5\uff0c\u679a\u4e3e\u5212\u5206\u70b9 \\(k\\) \uff0c \u90a3\u4e48\u5de6\u8fb9\u548c\u53f3\u8fb9\u90fd\u53ef\u80fd\u662f\u82e5\u5e72\u9897\u5b50\u6811\uff0c\u4f46\u662f\u8fd9\u6837\u5b50\u662f\u4f1a\u7b97\u91cd\u7684\uff0c\u56e0\u4e3a\u4f60\u4e0d\u77e5\u9053\u8fd9\u51e0\u9897\u5b50\u6811\u662f\u4e0d\u662f\u80fd\u91cd\u65b0\u6392\u5217\u4e00\u4e0b\u53d8\u6210\u65b0\u7684\u5b50\u6811\u3002 \u6240\u4ee5\u6b64\u65f6\u8981\u7528\u5230\u533a\u95f4 DP \u201d\u5212\u5206\u7c7b\u201c\u7684\u601d\u60f3\uff0c\u7528\u524d\u4e00\u6bb5\u7684\u72b6\u6001\u548c\u540e\u4e00\u6bb5\u7684\u82b1\u8d39\u5f97\u5230\u6574\u6bb5\u7684\u72b6\u6001\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u63a7\u5236\u5212\u5206\u6210\u4e24\u4e2a\u90e8\u5206\u7684\u540e\u4e00\u4e2a\u90e8\u5206\u53ea\u5305\u542b\u4e00\u68f5\u5b50\u6811\u3002 \u6240\u4ee5\u679a\u4e3e \\(k\\) \u3002 \u4fdd\u8bc1 \\(S_l = S_r = S_k\\) \u4e14 \\(k - l + 1 \\equiv r - (k + 1) - 1 \\equiv 1 (\\operatorname{mod}2)\\) \u3002 \u5219 \\(dp_{l,k}\\) \u662f\u4e00\u4e2a\u5df2\u7ecf\u8ba1\u7b97\u597d\u7684\u72b6\u6001\uff0c\u540e\u4e00\u6bb5\u662f \u4e00\u68f5 \u7531 \\(S_{k+1}\\sim S_{r-1}\\) \u6784\u6210\u7684\u5b50\u6811\u3002 \u90a3\u4e48\u4ee4 \\(dp_{l,r}\\) \u52a0\u4e0a \\(dp_{l,k} \\times dp_{k + 1,r-1}\\) \u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int si = 3e2 + 10 ; constexpr int mod = 1e9 ; int n ; string s ; int dp [ si ][ si ]; int main () { cin >> s ; int n = ( int ) s . size (); s = ' ' + s ; if ( ! ( n & 1 )) return puts ( \"0\" ), 0 ; memset ( dp , 0 , sizeof dp ); // \u72b6\u6001\u4e0d\u5408\u6cd5\u6216\u8005\u672a\u66f4\u65b0\u65f6\uff0cdp = 0\u3002 for ( int i = 1 ; i <= n ; ++ i ) dp [ i ][ i ] = 1 ; for ( int len = 3 ; len <= n ; len += 2 ) { for ( int i = 1 ; i + len - 1 <= n ; ++ i ) { int j = i + len - 1 ; if ( s [ i ] != s [ j ]) continue ; for ( int k = i ; k <= j - 2 ; k += 2 ) { if ( s [ k ] == s [ j ]) dp [ i ][ j ] = ( dp [ i ][ j ] + 1l l * dp [ i ][ k ] * dp [ k + 1 ][ j - 1 ] % mod ) % mod ; } } } cout << dp [ 1 ][ n ] % mod << endl ; return 0 ; }","title":"Acwing284 \u91d1\u5b57\u5854"},{"location":"%E6%80%9D%E8%80%83/%E5%9B%9B%E6%9C%88Tricks/#acwing288","text":"\u7cbe\u5999\u7684DP","title":"Acwing288 \u4f11\u606f\u65f6\u95f4"},{"location":"%E6%80%9D%E8%80%83/%E5%9B%9B%E6%9C%88Tricks/#acwing313","text":"\u65b9\u6848\u9898","title":"Acwing313 \u82b1\u5e97\u6a71\u7a97"},{"location":"%E6%80%9D%E8%80%83/%E5%9B%9B%E6%9C%88Tricks/#acwing315","text":"LCS \u7684\u65b9\u6848","title":"Acwing315 \u65c5\u884c"},{"location":"%E6%80%9D%E8%80%83/%E5%9B%9B%E6%9C%88Tricks/#acwing317","text":"\u8ba1\u6570\u9898\uff0c\u5f88\u7cbe\u5999\u3002","title":"Acwing317 \u9668\u77f3\u7684\u79d8\u5bc6"},{"location":"%E6%80%9D%E8%80%83/%E5%9B%9B%E6%9C%88Tricks/#acwing322","text":"\u548c\u4e0b\u4e00\u9053\u4e00\u8d77\u603b\u7ed3","title":"Acwing322 \u6d88\u6728\u5757"},{"location":"%E6%80%9D%E8%80%83/%E5%9B%9B%E6%9C%88Tricks/#cf607b-zuma","text":"\u548c\u4e0a\u4e00\u9053\u4e00\u8d77\u603b\u7ed3","title":"CF607B Zuma"},{"location":"%E6%80%9D%E8%80%83/%E5%9B%9B%E6%9C%88Tricks/#acwing281-coins","text":"\u591a\u91cd\u80cc\u5305\u4f18\u5316DP\uff0c\u53ef\u884c\u6027\u3002","title":"Acwing281 Coins\u3001"},{"location":"%E6%80%9D%E8%80%83/%E5%9B%9B%E6%9C%88%E5%A5%BD%E9%A2%98/","text":"","title":"\u56db\u6708\u597d\u9898"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E6%9D%82%E9%A2%98/","text":"CF & AT \u6742\u9898 \u00b6 \u56e0\u4e3a\u6ca1\u5565\u65f6\u95f4\uff0c\u4e5f\u4e0d\u592a\u60f3\u5199\u9898\u89e3\uff0c\u6240\u4ee5\u4e00\u4e9b\u6742\u9898\u4e4b\u7c7b\u7684\u7b80\u5355\u9898\u89e3\u5c31\u653e\u5728\u8fd9\u91cc\u4e86\u3002 \uff08\u662f\u65f6\u5019\u6539\u6539\u5f3a\u8feb\u75c7\u4e86\uff09 \u4e00\u822c\u53ea\u4f1a\u6709CF\u548cAT\u7684\uff0c\u6574\u573a\u6bd4\u8d5b\u7684\u9898\u89e3\u4f1a\u653e\u5728 Codeforces Solution \u91cc\u9762\u3002 \u5176\u5b9e\u5927\u90e8\u5206\u90fd\u662f\u53e3\u80e1\u7684\uff0c\u6ca1\u65f6\u95f4\u5199\u4ee3\u7801\uff0c\u4ee5\u540e\u518d\u8865\uff08 CF 1473E \u00b6 \u5b9a\u4e49\u4e00\u4e2a\u8def\u5f84\u7684\u8d21\u732e\u4e3a\u4e0b\u9762\u7684\u90a3\u4e2a\u5f0f\u5b50\uff0c\u95ee \\(1 \\to \\forall i\\) \u7684\u8def\u5f84\u7684\u8d21\u732e\u7684\u6700\u5c0f\u503c \u53d1\u73b0\u67ff\u5b50\uff1a \\(\\sum\\limits_{i=1}^kw_{e_i} -\\max\\limits_{i=1}^kw_{e_i} + \\min\\limits_{i=1}^kw_{e_i}\\) \u5b9e\u9645\u4e0a\u5c31\u662f\u5728\u7ef4\u62a4\u6240\u6709\u8fb9\u6743\u53bb\u6389\u6700\u5927\u52a0\u4e0a\u4e00\u4e2a\u6700\u5c0f\u3002 \u4e5f\u5c31\u662f\u5c11\u4e00\u4e2a\u8fb9\uff0c\u53e6\u5916\u4e00\u4e2a\u8fb9\u7b97\u4e24\u6b21\u3002 \u90a3\u4e48\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u51b3\u7b56\u90fd\u4f1a\u6709\u53bb\u6389\u4e0d\u52a0\u4e0a\uff0c\u4e0d\u53bb\u6389\u4e0d\u52a0\u4e0a\uff0c\u52a0\u4e0a\u4e0d\u53bb\u6389\uff0c\u52a0\u4e0a\u7136\u540e\u53bb\u6389\u56db\u79cd\u60c5\u51b5\uff0c \u6240\u4ee5\u628a\u6bcf\u4e2a\u70b9\u62c6\u6210 \\(4\\) \u4e2a\u72b6\u6001\uff0c\u95ee\u9898\u5c31\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5728\u5206\u5c42\u56fe\u4e0a\u6c42\u6700\u77ed\u8def\uff0c\u56e0\u4e3a\u4f60\u591a\u52a0\u7684\u662f \\(\\min\\) \u800c\u4e14\u6c42\u7684\u4e5f\u662f \\(\\min\\) \uff0c\u6240\u4ee5\u8fd9\u4e2a\u505a\u6cd5\u662f\u5bf9\u7684\u3002 CF 516E \uff08By \\(\\text{d}\\color{red}{\\text{reamoon}}\\) \uff09 \u00b6 *3100 \u7684\u5927\u6bd2\u7624\u6570\u8bba\u3002 \u4e0d\u592a\u4f1a\uff0c\u4e4b\u540e\u518d\u91cd\u65b0\u95ee\u95ee\u51fa\u9898\u4eba\u548b\u505a\u7684\uff08 ABC 209E \u00b6 \u535a\u5f08\u8bba+\u56fe\u8bba \u5fc5\u987b\u8981\u548c\u4e0a\u4e00\u4e2a\u5355\u8bcd\u91cd\u5408\u4e09\u4e2a\u4ee5\u4e0a\u7684\u5b57\u6bcd\u7684\u5355\u8bcd\u63a5\u9f99\uff0c\u7ed9\u5b9a\u8bcd\u5178\uff0c\u4e14\u5927\u5c0f\u5199\u654f\u611f\u3002 \u95ee\u8f93\u8d62\u6216\u5e73\u3002 \u4f60\u53d1\u73b0\u6211\u4eec\u4e0d\u4f1a\u5173\u5fc3\u9664\u4e86\u524d\u4e09\u4e2a\u6216\u8005\u540e\u4e09\u4e2a\u5b57\u7b26\u4ee5\u5916\u7684\u4e1c\u897f\u3002 \u800c\u4e14\u8981\u63a5\u9f99\u5c31\u5fc5\u987b\u5b8c\u5168\u91cd\u5408\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5148\u5b57\u7b26\u4e32hash\u4e00\u4e0b\u524d\u4e09\u4f4d\u548c\u540e\u4e09\u4f4d\uff0c\u7136\u540e\u628a\u524d\u4e09\u4f4d\u5411\u540e\u4e09\u4f4d\u8fde\u8fb9\u3002 \u7136\u540e\u6211\u4eec\u4f1a\u5f97\u5230\u4e00\u5f20\u6709\u5411\u56fe\u3002 \u8003\u8651\u600e\u4e48\u7ef4\u62a4\u5148\u624b\u5fc5\u80dc\u6001\u548c\u5148\u624b\u5fc5\u8d25\u6001\u3002 \u5982\u679c\u5f53\u524d\u72b6\u6001\u80fd\u53bb\u5f80\u7684\u72b6\u6001\u90fd\u662f\u5fc5\u80dc\u6001\u6216\u8005\u65e0\u6cd5\u53bb\u5f80\u4efb\u610f\u72b6\u6001\uff0c\u5219\u5b83\u662f\u5148\u624b\u5fc5\u8d25\u6001\u3002 \u5982\u679c\u5b83\u80fd\u5230\u8fbe\u81f3\u5c11\u4e00\u4e2a\u5fc5\u8d25\u6001\uff0c\u90a3\u4e48\u4ed6\u662f\u5fc5\u80dc\u6001\u3002 \u5176\u4ed6\u7684\u90fd\u662f\u5e73\u5c40\u3002 \u90a3\u4e48\u5efa\u53cd\u56fe\u62d3\u6251\u66f4\u65b0\u5373\u53ef\uff0c\u66f4\u65b0\u4e0d\u5230\u7684\u90fd\u662f\u5e73\u5c40\u3002 \u53e6\u5916\uff0c\u53ea\u8981\u4e00\u4e2a\u70b9\u786e\u5b9a\u4e86\u5fc5\u80dc\u6216\u8005\u5fc5\u8d25\u6001\uff0c\u90a3\u4e48\u5b83\u4e5f\u53ef\u4ee5\u5165\u961f\uff0c\u56e0\u4e3a\u4e0d\u4f1a\u518d\u88ab\u66f4\u6539\u4e86\u3002 ABC 191D \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5706\uff0c\u95ee\u5706\u4e0a\u548c\u5706\u5185\u6574\u70b9\u4e2a\u6570\u3002 \u662f\u67d0\u4e2aHAOI\u7684\u8d85\u7ea7\u52a0\u5f3a\u7248\uff08 \u8fd9\u9898\u5361\u7cbe\u5ea6\u7279\u522b\u5413\u4eba\uff0cYL\u5f53\u65f6\u5361 \\(1e-14\\) \u8fc7\u4e86\u3002 \u6211\u5361 \\(1e-10\\) \u7206\u4e86\uff0c\u672c\u6765\u662f\u5fd8\u4e86\u8fd9\u4e2a\u9898\u7684\uff0c\u7ed3\u679cDM\u7684\u6bd2\u7624\u5361\u7cbe\u5ea6\u8bfe\u8bb2\u4e86\u8fd9\u4e2a\u3002 \u5c31\u56de\u6765\u5199\u4e00\u4e0b\u3002 \u53d1\u73b0\u5706\u5fc3\u5750\u6807\u548c\u534a\u5f84\u90fd\u662f\u6d6e\u70b9\u6570\uff0c\u4e0d\u8fc7\u4e0d\u8d85\u8fc7 \\(10^5\\) \u800c\u4e14\u6700\u591a\u6709\u56db\u4f4d\u5c0f\u6570\u70b9\u3002 \u6240\u4ee5\u6211\u4eec\u8003\u8651\u5148\u7ed9\u6bcf\u4e2a\u70b9\u7684 \\(x,y\\) \u90fd\u4e58\u4e0a \\(10^4\\) \u53d8\u6210\u6574\u6570\u3002 \u7136\u540e\u8003\u8651\u52fe\u80a1\u5b9a\u7406+\u679a\u4e3e\u5224\u65ad\u5408\u6cd5\u4e0a\u4e0b\u754c\u5c31\u53ef\u4ee5\u4e86\u3002 CF 261D \u00b6 \u6ca1\u505a\uff0c\u7a7a\u7740\u3002 CF 1526C2 \u00b6 \u95ee\u4e00\u4e2a\u5e8f\u5217\u7684\u6700\u957f\u5b50\u5e8f\u5217\uff0c\u4f7f\u5b50\u5e8f\u5217\u7684\u4efb\u610f\u4f4d\u7f6e\u7684\u524d\u7f00\u548c\u4e0d\u5c0f\u4e8e \\(0\\) \u3002 \u5927\u50bb\u903c\u9898\uff0c\u79d2\u4e86\u3002 \u8003\u8651\u7528\u4e00\u4e2a\u4f18\u5148\u961f\u5217\u7ef4\u62a4\uff0c\u4e00\u4e2a\u4e00\u4e2a\u5403\uff0c\u5982\u679c\u5403\u6b7b\u4e86\u5c31\u628a\u6700\u5c0f\u7684\u5410\u51fa\u6765\u7136\u540e\u7ee7\u7eed\u5403\u3002 \u6700\u540e\u8f93\u51fa size \u8d70\u4eba\u3002 CF 1006F \u00b6 dm \u8bb2\u7684\u4e00\u9053\u53cc\u5411BFS\u3002 \u61d2\u5f97\u5199\u6240\u4ee5\u8f6c\u4e86\u522b\u4eba\u7684sol \u9898\u610f\u662f\u6709\u4e00\u4e2a \\(n\\times m\\) \u7684\u5730\u56fe\uff0c\u7136\u540e\u4ece\u5de6\u4e0a\u89d2\u8d70\u5230\u53f3\u4e0b\u89d2\uff0c\u95ee\u6700\u540e\u5f02\u6216\u7684\u503c\u7b49\u4e8e \\(k\\) \u7684\u8def\u5f84\u6709\u591a\u5c11\u6761\u3002 \u601d\u8def\u5c31\u662f\u6298\u534a\u641c\u7d22\uff0c\u53ef\u4ee5\u964d\u4f4e\u5f88\u591a\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u56e0\u4e3a\u5f53\u5730\u56fe\u5c0f\u7684\u65f6\u5019\uff0c \\(n+m\\) \u5c31\u4e0d\u6ee1\u8db3\u6298\u534a\u7684\u6761\u4ef6\u4e86\uff0c \u6240\u4ee5\u8fd9\u91cc\u7528 \\(n+m+2\\) \u4f5c\u4e3a\u6761\u4ef6\uff0c\u9996\u5148\u6211\u4eec\u5148\u641c\u7d22\u6b65\u6570\u4e3a \\(n+m+2\\) \u7684\u4e00\u534a\u7684\u503c\u4e3a\u641c\u7d22\u7ec8\u70b9\uff0c\u8bb0\u5f55\u5f53\u524d\u7684\u5f02\u6216\u503c\uff0c\u7136\u540e\u518d\u4ece\u7ec8\u70b9\u5f00\u59cb\u641c\u7d22\uff0c \u5f53\u641c\u7d22\u5230 \\(n+m+2\\) \u7684\u4e00\u534a\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5224\u65ad\u5f53\u524d\u70b9\u7684\u4e0e \\(k\\) \u7684\u5f02\u6216\u503c\u662f\u5426\u6709\u6807\u8bb0\u8fc7\uff0c\u6709\u7684\u8bdd\u5c31\u8bf4\u660e\u8fd9\u6574\u4e2a\u4e00\u6761\u8def\u7684\u5f02\u6216\u503c\u7b49\u4e8e \\(k\\) \uff0c\u76f4\u63a5\u52a0\u7ed9 \\(ans\\) \u5c31\u597d\u4e86\u3002 \u539f\u6587\u94fe\u63a5\uff1a https://blog.csdn.net/Charles_Zaqdt/article/details/81077919 ARC 084 D/B \u00b6 dm \u8bb2\u7684\u4e00\u9053\u6570\u8bbaBFS\u3002 \u627e\u51fa\u6570\u4f4d\u548c\u6700\u5c0f\u7684 \\(k\\) \u7684\u500d\u6570\u662f\u591a\u5c11\u3002 2e5 \u53d1\u73b0\u53ef\u80fd\u4f1a\u70b8 __int128 . \u6240\u4ee5\u6211\u4eec\u8003\u8651\u5bf9\u6570\u4f4d\u8fdb\u884c\u64cd\u4f5c\u3002 \u53d1\u73b0\u5982\u679c\u4ece \\(1\\) \u5f00\u59cb\uff0c\u53ea\u7528\u4e24\u79cd\u64cd\u4f5c\u5c31\u53ef\u4ee5\u5f97\u5230\u4efb\u610f\u4e00\u4e2a\u6570\uff08\u5176\u5b9e\u771f\u5b9e\u60c5\u51b5\u4e00\u79cd\u5c31\u53ef\u4ee5\u4e86\uff09 \\(+1\\) \u4e14 cost \u4e3a \\(1\\) \\(\\times 10\\) \u4e14 cost \u4e3a \\(0\\) \u3002 \u6240\u4ee5\u5176\u5b9e\u8fd9\u662f\u4e2a 01BFS\u3002 \u4ee4\u6bcf\u4e00\u4e2a\u72b6\u6001\u90fd\u5bf9 \\(k\\) \u53d6\u6a21\uff0c\u7136\u540e\u4ece \\(1\\) \u5f00\u59cb\u3002 \u5982\u679c\u5f53\u524d\u8fd9\u4e2a\u64cd\u4f5c\u662f cost \u4e3a \\(1\\) \u7684\u64cd\u4f5c\uff0c\u6254\u5230\u961f\u5c3e\uff0c\u53cd\u4e4b\u6254\u5230\u961f\u5934\u3002 \u7136\u540e01BFS\u5373\u53ef\u3002 ABC 203D \u00b6 \u4e00\u9053 01 \u4e8c\u5206\u7684\u677f\u5b50\uff1f \u8fd9\u4e2a trick \u4e0d\u662f\u5f88\u5e38\u89c1\uff0c\u4f46\u662f\u53ea\u8981\u4e00\u51fa\u5c31\u80fd\u5361\u5230\u4eba\u3002 \u8fd9\u9053\u9898\u8981\u6c42\u4f60\u6c42\u51fa\u4e00\u4e2a \\(n\\times n\\) \u7684\u77e9\u9635\u5f53\u4e2d\u7684\u6240\u6709 \\(k\\times k\\) \u5927\u5c0f\u7684\u5b50\u77e9\u9635\u7684\u8d21\u732e\u7684\u6700\u5c0f\u503c\u3002 \u4e00\u4e2a\u77e9\u9635\u7684\u8d21\u732e\u5b9a\u4e49\u4e3a\u628a\u77e9\u9635\u6240\u6709\u5143\u7d20\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u4e4b\u540e\u7684\u7b2c \\(\\lfloor \\dfrac{k^2}{2} \\rfloor +1\\) \u5927\u7684\u6570\uff08\u53ef\u4ee5\u7406\u89e3\u4e3a \u4e2d\u4f4d\u6570 \uff09 \u5927\u5c0f\u662f \\(800^2\\) \u3002 \u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u4e8c\u5206\u8f6c\u5316\u4e3a\u5224\u5b9a\uff1a\u5b58\u4e0d\u5b58\u5728\u4e00\u4e2a\u5b50\u77e9\u9635\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u77e9\u9635\u7684\u8d21\u732e\u6bd4 \\(x\\) \u5c0f\uff1f \u7136\u540e\u6211\u4eec\u8ba9 \\(x\\) \u5c3d\u91cf\u5c0f\uff0c\u5f53\u8fd9\u4e2a\u77e9\u9635\u7684\u8d21\u732e\u5c31\u662f \\(x\\) \u7684\u65f6\u5019\uff0c\u7b54\u6848\u5c31\u662f \\(x\\) \u3002 \u4f60\u8003\u8651\u53bb\u4e8c\u5206\u8fd9\u4e2a\u6570\u5b57 \\(x\\) \uff0c\u7136\u540e\u5bf9\u4e8e\u4f60\u4e8c\u5206\u5230\u7684\u77e9\u9635\uff0c\u4ee4\uff1a \\[\\text{submatrix}[i][j]=\\begin{cases}0 & ,\\text{submatrix}[i][j]\\le x\\\\1 & ,\\text{submatrix}[i][j] > x\\end{cases}\\] \u5982\u679c\u8bf4\u8fd9\u4e2a\u5b50\u77e9\u9635\u7684\u548c\u662f \\(<\\lfloor \\dfrac{k^2}{2} \\rfloor +1\\) \u7684\uff0c\u90a3\u4e48\u5f88\u660e\u663e\u6bd4 \\(x\\) \u5927\u7684\u6570\u5c31\u4e00\u5b9a\u5c11\u4e8e \\(\\lfloor \\dfrac{k^2}{2} \\rfloor +1\\) \u4e2a\u3002 \u90a3\u4e48\u5b83\u7684\u8d21\u732e\u80af\u5b9a\u6bd4 \\(x\\) \u5c0f\uff0c\u6ee1\u8db3\u8981\u6c42\uff0c\u53cd\u4e4b\u5219\u4e0d\u6ee1\u8db3\u3002 \u7136\u540e\u5199\u4e2a\u4e8c\u7ef4\u524d\u7f00\u548c\u641e\u641e\u5c31\u884c\u4e86\u3002 CF 1059D \u00b6 \u7ed9\u4e00\u5806\u70b9\uff0c\u662f\u5426\u6709\u4e00\u4e2a\u548c \\(x\\) \u8f74\u76f8\u5207\u7684\u5706\u4f7f\u5f97\u6bcf\u4e00\u4e2a\u70b9\u90fd\u88ab\u5b83\u5305\u542b\u3002 \u95ee\u8fd9\u4e2a\u5706\u7684\u534a\u5f84\u6700\u5c0f\u662f\u591a\u5c11\u3002 \u9996\u5148\u4f60\u53d1\u73b0\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u70b9\u5bf9 \\(((x_1,y_1),(x_2,y_2))\\) \u6ee1\u8db3 \\(y_1\\times y_2 <0\\) \uff0c\u90a3\u4e48\u5c31\u5f88\u660e\u663e\u65e0\u89e3\u3002 \u7136\u540e\u6211\u4eec\u628a\u6240\u6709\u70b9\u8f6c\u5230 \\(x\\) \u8f74\u4e0a\u65b9\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4f60\u4e8c\u5206\u5230\u7684 \\(r\\) \uff0c\u6211\u4eec\u53ef\u4ee5\u626b\u63cf\u4e00\u904d\u70b9\u96c6\u5408\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9 \\((x,y)\\) \u5229\u7528\u52fe\u80a1\u5b9a\u7406\u6c42\u51fa\u4e00\u4e2a\u533a\u95f4\uff0c\u4f7f\u5f97\u533a\u95f4\u91cc\u7684\u6bcf\u4e00\u4e2a\u70b9\u5230 \\((x,y)\\) \u7684\u8ddd\u79bb\u5728\u533a\u95f4 \\([y,r]\\) \u5f53\u4e2d\u3002 \u7136\u540e\u5bf9\u4e8e\u6240\u6709\u7684\u533a\u95f4\u6c42\u4e00\u4e2a\u4ea4\u96c6\uff0c\u5982\u679c\u4ea4\u96c6\u4e3a\u7a7a\u96c6\u90a3\u4e48\u8fd9\u4e2a \\(r\\) \u4e0d\u5408\u6cd5\uff0c\u53cd\u4e4b\u5408\u6cd5\u3002 \u7136\u540e\u6211\u4eec\u4f7f\u7528\u5b9e\u6570\u4e8c\u5206\uff0c\u4f46\u662f\u56e0\u4e3a\u8fd9\u9898\u5361\u7cbe\u5ea6\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u4f7f\u7528 \\(eps\\) \u6765\u5224\u65ad\uff0c\u800c\u662f\u76f4\u63a5\u6309\u6b21\u6570\u5faa\u73af\u3002 \u8fd9\u9898\u7cbe\u5ea6\u8981\u6c42 \\(10^{-6}\\) \uff0c\u6240\u4ee5\u4f60\u5927\u6982\u5faa\u73af\u4e2a \\(10^3\\) \u6b21\u5c31\u5dee\u4e0d\u591a\u4e86\u3002 AGC 006D \u00b6 \u4e5f\u662f\u4e00\u9053\u975e\u5e38\u5999\u7684 01 \u4e8c\u5206\u3002 \u5b9a\u4e49\u4e00\u4e2a\u6570\u5b57\u91d1\u5b57\u5854\uff0c\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u662f\u5b83\u4e0b\u4e00\u5c42\u7684\u4e09\u4e2a\u8282\u70b9\u7684 \u4e2d\u4f4d\u6570 \u3002 \u7ed9\u5b9a\u6700\u540e\u4e00\u5c42\uff0c\u6c42\u7b2c\u4e00\u5c42\u6700\u6709\uff0c \\(2e5\\) \u5c42\u3002 \u53d1\u73b0\u8981 \\(\\text{O}(n \\log n)\\) \u624d\u884c\u3002 \u7136\u540e\u4f60\u8003\u8651\u4e8c\u5206\u9876\u5c42\u8282\u70b9 \\(x\\) \u7684\u6570\u503c\u3002 \u5bf9\u4e8e\u6700\u540e\u4e00\u5c42\u7684\u8282\u70b9\uff0c\u6211\u4eec\u4ee4\u6240\u6709\u7684 \\(\\le x\\) \u7684\u8282\u70b9\u53d8\u6210 \\(0\\) \uff0c\u53cd\u4e4b\u4e3a \\(1\\) \uff08\u548c ABC203D \u4e00\u4e2a\u601d\u8def\uff09\u3002 \u7136\u540e\u4f60\u8003\u8651\u5411\u4e0a\u9012\u63a8\u7684\u8fc7\u7a0b\u3002 \u4f60\u53d1\u73b0\uff0c\u56e0\u4e3a \\(x\\) \u662f\u6700\u9876\u5c42\u8282\u70b9\uff0c\u6240\u4ee5\u5982\u679c\u5e95\u5c42\u6709\u8fde\u7eed\u7684\u4e24\u4e2a \\(1\\) \u6216\u8005\u8fde\u7eed\u7684\u4e24\u4e2a \\(0\\) \uff0c\u4ed6\u4eec\u5c31\u4f1a\u4e00\u76f4\u5411\u4e0a\u8d70\uff0c\u800c\u4e14\u4e0d\u65ad\u5f80\u4e2d\u95f4\u9760\u3002 \u6240\u4ee5\u6700\u9760\u8fd1\u4e2d\u95f4\u7684\u90a3\u4e00\u7ec4\u5c31\u662f\u5854\u9876\u7684 \\(0\\) \u6216\u8005 \\(1\\) \u3002 \u5982\u679c\u4f60\u63a8\u51fa\u6765\u5854\u9876\u662f \\(0\\) ,\u90a3\u4e48\u5c31\u6ee1\u8db3\u60c5\u51b5\uff0c\u53cd\u4e4b\u4e0d\u6ee1\u8db3\u3002 \u7136\u540e\u4f60\u518d\u7279\u5224\u4e00\u4e0b\u6839\u672c\u6ca1\u6709\u8fde\u7eed\u7684\u6570\u5b57\u7684\u60c5\u51b5\u5373\u53ef\u3002 CF 865C \u00b6 \u4e00\u9053\u671f\u671b+\u4e8c\u5206\u3002 \u4e5f\u6bd4\u8f83\u5999\u3002 \u5e2e PWK \u4fee\u4e86\u4ed6\u7684 \u9898\u89e3 \uff0c\u6240\u4ee5\u9898\u610f\u5c31\u7528\u4ed6\u7684\u4e86\uff1a \u4f60\u662f\u4e00\u4e2a up \u4e3b\uff0c\u4f60\u8981\u5f55\u4e00\u6bb5\u901f\u901a RA2YR \u7684\u89c6\u9891\uff0c \u6218\u5f79\u6709 \\(n\\) \u5173\uff0c\u6bcf\u5173\u4f60\u6709 \\(p_i\\%\\) \u7684\u53ef\u80fd\u6027\u82b1 \\(F_i\\) \u7684\u65f6\u95f4\u901a\u8fc7\uff0c \\((1-p_i)\\%\\) \u7684\u53ef\u80fd\u6027\u82b1\u6389 \\(S_i\\) \u7684\u65f6\u95f4\u901a\u8fc7\uff08\u5931\u8bef\u4e86\uff09\uff0c\u5176\u4e2d\u4fdd\u8bc1 \\(F_i>S_i\\) \u3002 \u4f46\u56e0\u4e3a\u4f60\u60f3\u201c\u901f\u901a\u201d\uff0c\u4f60\u4e0d\u5e0c\u671b\u4f60\u7684\u89c6\u9891\u957f\u5ea6\u8d85\u8fc7 \\(m\\) \u3002 \u5f53\u4f60\u8ba4\u4e3a\u81ea\u5df1\u63a5\u4e0b\u6765\u53ef\u80fd\u5f55\u4e0d\u5b8c\uff08\u63a5\u7740\u5f55\u5f55\u5b8c\u4e0d\u5982\u91cd\u65b0\u5f55\uff09\u65f6\uff0c\u4f60\u4f1a\u91cd\u65b0\u5f00\u59cb\u5f55\uff0c\u6c42\u5f55\u5b8c\u6574\u4e2a\u6e38\u620f\u7684\u65f6\u95f4\u671f\u671b\u3002 \u8003\u8651\u8bbe \\(f_{i,j}\\) \u8868\u793a\u6253\u8fc7\u7b2c \\(i\\) \u5173\uff0c\u4f7f\u7528 \\(j\\) \u7684\u65f6\u95f4\u7684\u671f\u671b\u3002 \u7136\u540e\u56e0\u4e3a\u662f\u6709\u65f6\u95f4\u9650\u5236\u7684\uff0c\u6240\u4ee5\u4f60\u4f1a\u63a8\u51fa\u4e00\u4e2a\u8fd9\u6837\u7684\u67ff\u5b50\uff08\u4e5f\u662fPWK\u7684\uff09\uff1a \\[ f(i,j)=\\begin{cases} 0 ,& i=n,j\\le m\\\\ f(0,0),& j >m \\\\ \\min(f(0,0),e1+e2) ,& \\text{otherwise.} \\end{cases} \\] \u5176\u4e2d $e_1=p_{i+1} \\times f(i+1,j+f_{i+1})+f_{i+1})) $\u3002 \\(e_2=p_{i+1}\\times(1-p_{i+1})\\times(f(i+1,j+S_{i+1})+S_{i+1})\\) \u3002 \u7136\u540e\u4f60\u53d1\u73b0 \\(f_{0,0}\\) \u4f1a\u5bfc\u81f4\u8f6c\u79fb\u6709\u73af\uff0c\u6240\u4ee5\u628a \\(f_{0,0}\\) \u5f53\u4f5c\u4e00\u4e2a\u5e38\u6570\uff0c\u4ece \\(n\\) \u5f00\u59cb\u5012\u5e8f\u679a\u4e3e\u3002 \u7136\u540e\u6700\u4f18\u91cd\u5f00\u65f6\u95f4\u4e00\u5b9a\u662f\u7b49\u4e8e\u671f\u671b\u65f6\u95f4\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206\u4ed6\u91cd\u5f00\u7684\u65f6\u95f4\u3002 \u7136\u540e\u5229\u7528 \\(f_{0,0}\\) \u7684\u503c\u5224\u65ad\u53ef\u884c\u6027\u5373\u53ef \uff08 \\(f_{0,0}<mid\\) \uff09\u3002 CF 1203F1 \u00b6 \u6709 \\(i\\) \u4e2a\u9879\u76ee\uff0c\u6bcf\u4e00\u4e2a\u9879\u76ee\u6709\u4e00\u4e2a\u9650\u5236\u548c\u4e00\u4e2a\u6743\u503c\uff08\u6743\u503c\u53ef\u4ee5\u4e3a\u8d1f\u6570\uff09\u3002 \u4f60\u505a\u4e00\u4e2a\u9879\u76ee\u7684\u8bdd\uff0c\u4f60\u7684\u4fe1\u8a89\u9700\u8981\u8fbe\u5230\u9650\u5236 \\(a_i\\) \uff0c\u505a\u5b8c\u4e4b\u540e\u4f60\u7684\u4fe1\u8a89\u4f1a\u52a0\u4e0a\u6743\u503c \\(b_i\\) \u3002 \u505a\u5b8c\u9879\u76ee\u7684\u65f6\u5019\u4fe1\u8a89\u4e0d\u80fd\u4e3a \\(0\\) \uff0c\u4f60\u7684\u521d\u59cb\u4fe1\u8a89\u4e3a \\(r\\) \uff0c\u95ee\u4f60\u80fd\u4e0d\u80fd\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u60c5\u51b5\u4e0b\u505a\u5b8c\u6240\u6709\u9879\u76ee\u3002 \u6211\u4eec\u8003\u8651\u8d2a\u5fc3\u3002 \u4f60\u53d1\u73b0\u505a\u5b8c\u4e00\u4e2a\u9879\u76ee\u4e4b\u540e\uff0c\u4f60\u7684\u4fe1\u8a89\u81f3\u5c11\u662f \\(a_i+b_i\\) \u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6309\u7167 \\(a_i+b_i\\) \u5347\u5e8f\u6392\u5e8f\uff0c\u5e76\u4e14\u5728\u6b64\u57fa\u7840\u4e0a\u8ba9\u9650\u5236 \\(a_i\\) \u66f4\u5927\u7684\u6392\u5728\u524d\u9762\u3002 \u7136\u540e\u4ece\u5934\u5f00\u59cb\u6a21\u62df\u505a\u9879\u76ee\u7684\u8fc7\u7a0b\u5c31\u53ef\u4ee5\u4e86\u3002 \u4f60\u53d1\u73b0 \\(b_i\\) \u7684\u6b63\u8d1f\u4f1a\u5bfc\u81f4\u8d2a\u5fc3\u51fa\u73b0\u5947\u602a\u7684\u9519\u8bef\uff0c\u4f1a WA on test 5\u3002 \u6240\u4ee5\u6211\u4eec\u6b63\u8d1f\u5206\u5f00\u6392\u5e8f\uff0c\u5faa\u73af\u4e24\u6b21\u7136\u540e\u5224\u65ad\u53ef\u884c\u6027\u5c31\u53ef\u4ee5\u4e86\u3002 CF 814D \u00b6 \u6709 \\(n\\) \u4e2a\u5706\uff0c\u4ed6\u4eec\u53ea\u80fd\u662f\u76f8\u4e92\u5305\u542b\uff0c\u76f8\u79bb\u6216\u8005\u76f8\u5207\u7684\u3002 \u5c06\u5176\u5206\u4e3a\u4e24\u7ec4\uff0c\u6bcf\u7ec4\u4e2d\uff0c\u53ea\u6709\u5947\u6570\u6b21\u8986\u76d6\u7684\u624d\u4f1a\u7b97\u5165\u9762\u79ef\uff0c\u6c42\u53ef\u80fd\u7684\u6700\u5927\u9762\u79ef\u3002 \uff08\u7ffb\u8bd1\u662f\u6211\u6254\u5728luogu\u8ba8\u8bba\u533a\u7684\uff09 \u6211\u4eec\u8003\u8651\u4e00\u4e2a\u8d2a\u5fc3\uff0c\u628a\u6240\u6709\u8986\u76d6\u6b21\u6570\u662f \\(2\\) \u7684\u5706\u5168\u90e8\u6254\u5230\u4e00\u7ec4\uff0c\u5269\u4e0b\u7684\u4e00\u7ec4\u3002 \u8bc1\u660e\u7565\uff08 \u7136\u540e\u53c8\u56e0\u4e3a\u5305\u542b\u5173\u7cfb\u662f\u5448\u6811\u5f62\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8ba9\u88ab\u5305\u542b\u7684\u6210\u4e3a\u7236\u4eb2\uff0c\u5916\u5c42\u7684\u6210\u4e3a\u513f\u5b50\uff0c\u7136\u540e\u5728\u6811\u4e0a\u8dd1\u4e00\u904d \\(dfs\\) \u7edf\u8ba1\u5373\u53ef\uff08\u4e0d\u8fc7\u5173\u7cfb\u662f\u6709\u53ef\u80fd\u53d8\u6210\u68ee\u6797\u7684\uff0c\u6240\u4ee5\u8981\u5efa\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\uff09\u3002 CF 954G \u00b6 \u4e00\u5171\u6709 \\(n\\) \u9762\u5899\uff0c\u521d\u59cb\u6709 \\(a_i\\) \u4e2a\u5f13\u7bad\u624b\u5728\u7b2c \\(i\\) \u9762\u5899\u7684\u4f4d\u7f6e\u4e0a\u3002\u4e00\u4e2a\u5728 \\(i\\) \u4f4d\u7f6e\u7684\u5f13\u7bad\u624b\u53ef\u4ee5\u4fdd\u62a4 \\(|i - j| \\leq r\\) \u7684\u6240\u6709\u5899 \\(j\\) \u3002 \u4f60\u73b0\u5728\u53ef\u4ee5\u589e\u6d3e \\(k\\) \u4e2a\u5f13\u7bad\u624b\u5e76\u4e14\u4efb\u610f\u5206\u914d\u5b83\u4eec\u7684\u4f4d\u7f6e\u3002\u4f60\u9700\u8981\u6700\u5927\u5316\u88ab\u6570\u91cf\u6700\u5c11\u7684\u5f13\u7bad\u624b\u4fdd\u62a4\u7684\u5899\u88ab\u5f13\u7bad\u624b\u4fdd\u62a4\u7684\u6570\u91cf\u3002 \\(n \\leq 5 \\times 10^5, 0 \\leq r \\leq n, 0 \\leq k \\leq 10^{18} ,0 \\leq a_i \\leq 10^9\\) \uff08\u9898\u610f\u6765\u81ealuogu\u8ba8\u8bba\u533a\uff09 \u8bbe\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u7684 defence lv \u4e3a \\(d_i\\) \u53d1\u73b0\u8fd9\u4e2a\u9898\u7684\u6761\u4ef6\u662f \u201c\u6700\u5c0f\u503c\u6700\u5927\u201d\u3002 \u6240\u4ee5\u5f88\u660e\u663e\u662f\u4e8c\u5206\u7b54\u6848\u3002 \u8003\u8651\u4e8c\u5206\u8fd9\u4e2a\u503c \\(mid\\) \uff0c\u6bcf\u6b21 check \u7684\u65f6\u5019\u8003\u8651\u8d2a\u5fc3\u3002 \u5982\u679c\u6709\u4e00\u4e2a\u4f4d\u7f6e \\(i\\) \u7684 \\(d_i < mid\\) \u6211\u4eec\u5728\u4f4d\u7f6e \\(\\min(i+r,n)\\) \u653e \\(mid-d_i\\) \u4e2a archer \u5c31\u884c\u4e86\u3002 CF 845E \u00b6 \u6709\u4e00\u4e2a \\(n\\) \u884c \\(m\\) \u5217\u7684\u7f51\u683c\u3002\u5176\u4e2d\u6709 \\(k+1\\) \u4e2a\u683c\u5b50\u7740\u706b\u4e86\u3002\u6bcf\u4e2a\u65f6\u523b\uff0c\u706b\u4f1a\u8513\u5ef6\u81f3\u76f8\u90bb\u7684\u683c\u5b50\uff08\u516b\u8054\u901a\uff09\u3002 \u73b0\u5728\u7ed9\u51fa\u5176\u4e2d \\(k\\) \u4e2a\u7740\u706b\u7684\u683c\u5b50\uff0c\u8bf7\u786e\u5b9a\u7b2c \\(k+1\\) \u683c\u5b50\uff0c\u4f7f\u5f97\u7f51\u683c\u88ab\u70e7\u5b8c\u7684\u7528\u65f6\u6700\u77ed\u3002 \u4f60\u53ea\u9700\u8981\u8f93\u51fa\u6700\u77ed\u7528\u65f6\u3002 \\(n,m \\le 10^9,k\\le 500\\) \u3002 \u53d1\u73b0 \\(n,m\\) \u975e\u5e38\u5927\uff0c\u4f46\u662f \\(k\\) \u975e\u5e38\u5c0f\u3002 \u6240\u4ee5\u6211\u4eec\u4ece \\(k\\) \u5165\u624b\uff0c\u8003\u8651\u53bb\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u65f6\u523b\uff0c\u6bcf\u4e00\u4e2a\u70b9\u80fd\u8513\u5ef6\u5230\u7684\u4f4d\u7f6e\u3002 \u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u6bcf\u79d2\u53ea\u6269\u5c55\u4e00\u5c42\u5e76\u4e14\u662f\u516b\u8054\u901a\uff0c\u6240\u4ee5\u53ef\u4ee5 \\(\\text{O}(1)\\) \u7b97\u8fd9\u4e2a\u77e9\u5f62\u7684\u9876\u70b9\u7684\u5750\u6807\u3002 \u53c8\u53d1\u73b0\u8fd9\u4e2a\u201c\u65f6\u95f4\u201d\u6ca1\u6cd5\u5f88\u597d\u7684\u6c42\u51fa\u6765\uff0c\u4f46\u662f\u521a\u597d\u5177\u6709\u5355\u8c03\u6027\u3002 \u6240\u4ee5\u8003\u8651\u4e8c\u5206\u3002 \u6bcf\u6b21\u4e8c\u5206\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8ba1\u7b97\u51fa\u6240\u6709\u77e9\u5f62\u8986\u76d6\u7684\u9762\u79ef\u3002 \u7136\u540e\u4f60\u53bb\u770b\u6700\u8fb9\u4e0a\u7684\u90a3\u56db\u4e2a\u89d2\uff08\u56e0\u4e3a\u5f88\u660e\u663e\u6269\u5c55\u5230\u4ed6\u4eec\u7684\u65f6\u95f4\u4e00\u5b9a\u662f\u6bcf\u4e2a\u65b9\u5411\u4e0a\u6700\u665a\u7684\uff09\u7684\u7a7a\u4f59\uff08\u5982\u679c\u6709\uff09\u6709\u6ca1\u6709\u529e\u6cd5\u7528\u4e00\u4e2a\u70b9\u5c31\u80fd\u8986\u76d6\u5b8c\u5c31\u884c\u3002 \u56e0\u4e3a\u503c\u57df\u6bd4\u8f83\u5927\u6240\u4ee5\u6211\u4eec\u9700\u8981\u79bb\u6563\u5316\u3002 \u8ba1\u7b97\u9762\u79ef\u53ef\u4ee5\u4f7f\u7528\u4e8c\u7ef4\u5dee\u5206\u6216\u8005\u626b\u63cf\u7ebf\u3002 CF 547D \u00b6 \u7ed9\u5750\u6807\u7cfb\u5f53\u4e2d\u7684 \\(n\\) \u4e2a\u6574\u70b9\u7ea2\u84dd\u67d3\u8272\uff0c\u8981\u6c42\u540c\u4e00\u4e2a\u76f4\u7ebf\uff08 \\(y\\) or \\(x\\) \u65b9\u5411\uff09\u4e0a\u7684\u7ea2\u84dd\u8282\u70b9\u4e2a\u6570\u76f8\u5dee\u4e0d\u8d85\u8fc7\u4e00\u3002 \u95ee\u5982\u4f55\u67d3\u8272\uff0c\u591a\u89e3\u4efb\u610f\u5373\u53ef\u3002 \u4fdd\u8bc1\u6709\u7b54\u6848\u3002 \u9996\u5148\u6211\u4eec\u53d1\u73b0\u4e00\u5b9a\u4f1a\u6709\u7b54\u6848\uff0c\u53c8\u662f\u8981\u6211\u4eec\u628a\u70b9\u5206\u6210\u4e24\u4e2a\u90e8\u5206\u3002 \u6240\u4ee5\u6211\u4eec\u60f3\u5230\u4e86\u4e8c\u5206\u56fe\uff0c\u624b\u5143\u4e00\u4e0b\u6837\u4f8b\u53ef\u4ee5\u53d1\u73b0\u786e\u5b9e\u662f\u4e8c\u5206\u56fe\u3002 \u6240\u4ee5\u76f4\u63a5\u5bf9\u4e8e\u540c\u4e00\u76f4\u7ebf\u4e0a\u7684\u70b9\u5efa\u8fb9\u7136\u540e\u4e8c\u5206\u56fe\u67d3\u8272\u5373\u53ef\u3002 \u53ef\u4ee5\u5148 \\(\\text{O}(n \\log n)\\) \u6392\u5e8f\u518d\u5efa\u8fb9\uff0c\u6216\u8005\u7528\u4e00\u4e2a \\(\\text{O}(n)\\) \u7684\u65b9\u6cd5\u5efa\u8fb9\uff0c\u5177\u4f53\u65b9\u6cd5\u89c1\u63d0\u4ea4\u8bb0\u5f55\uff1a https://codeforces.com/contest/547/submission/131984717","title":"\u65e9\u671fCF\u548cAT\u6742\u9898"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E6%9D%82%E9%A2%98/#cf-at","text":"\u56e0\u4e3a\u6ca1\u5565\u65f6\u95f4\uff0c\u4e5f\u4e0d\u592a\u60f3\u5199\u9898\u89e3\uff0c\u6240\u4ee5\u4e00\u4e9b\u6742\u9898\u4e4b\u7c7b\u7684\u7b80\u5355\u9898\u89e3\u5c31\u653e\u5728\u8fd9\u91cc\u4e86\u3002 \uff08\u662f\u65f6\u5019\u6539\u6539\u5f3a\u8feb\u75c7\u4e86\uff09 \u4e00\u822c\u53ea\u4f1a\u6709CF\u548cAT\u7684\uff0c\u6574\u573a\u6bd4\u8d5b\u7684\u9898\u89e3\u4f1a\u653e\u5728 Codeforces Solution \u91cc\u9762\u3002 \u5176\u5b9e\u5927\u90e8\u5206\u90fd\u662f\u53e3\u80e1\u7684\uff0c\u6ca1\u65f6\u95f4\u5199\u4ee3\u7801\uff0c\u4ee5\u540e\u518d\u8865\uff08","title":"CF &amp; AT \u6742\u9898"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E6%9D%82%E9%A2%98/#cf-1473e","text":"\u5b9a\u4e49\u4e00\u4e2a\u8def\u5f84\u7684\u8d21\u732e\u4e3a\u4e0b\u9762\u7684\u90a3\u4e2a\u5f0f\u5b50\uff0c\u95ee \\(1 \\to \\forall i\\) \u7684\u8def\u5f84\u7684\u8d21\u732e\u7684\u6700\u5c0f\u503c \u53d1\u73b0\u67ff\u5b50\uff1a \\(\\sum\\limits_{i=1}^kw_{e_i} -\\max\\limits_{i=1}^kw_{e_i} + \\min\\limits_{i=1}^kw_{e_i}\\) \u5b9e\u9645\u4e0a\u5c31\u662f\u5728\u7ef4\u62a4\u6240\u6709\u8fb9\u6743\u53bb\u6389\u6700\u5927\u52a0\u4e0a\u4e00\u4e2a\u6700\u5c0f\u3002 \u4e5f\u5c31\u662f\u5c11\u4e00\u4e2a\u8fb9\uff0c\u53e6\u5916\u4e00\u4e2a\u8fb9\u7b97\u4e24\u6b21\u3002 \u90a3\u4e48\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u51b3\u7b56\u90fd\u4f1a\u6709\u53bb\u6389\u4e0d\u52a0\u4e0a\uff0c\u4e0d\u53bb\u6389\u4e0d\u52a0\u4e0a\uff0c\u52a0\u4e0a\u4e0d\u53bb\u6389\uff0c\u52a0\u4e0a\u7136\u540e\u53bb\u6389\u56db\u79cd\u60c5\u51b5\uff0c \u6240\u4ee5\u628a\u6bcf\u4e2a\u70b9\u62c6\u6210 \\(4\\) \u4e2a\u72b6\u6001\uff0c\u95ee\u9898\u5c31\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5728\u5206\u5c42\u56fe\u4e0a\u6c42\u6700\u77ed\u8def\uff0c\u56e0\u4e3a\u4f60\u591a\u52a0\u7684\u662f \\(\\min\\) \u800c\u4e14\u6c42\u7684\u4e5f\u662f \\(\\min\\) \uff0c\u6240\u4ee5\u8fd9\u4e2a\u505a\u6cd5\u662f\u5bf9\u7684\u3002","title":"CF 1473E"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E6%9D%82%E9%A2%98/#cf-516e-by-textdcolorredtextreamoon","text":"*3100 \u7684\u5927\u6bd2\u7624\u6570\u8bba\u3002 \u4e0d\u592a\u4f1a\uff0c\u4e4b\u540e\u518d\u91cd\u65b0\u95ee\u95ee\u51fa\u9898\u4eba\u548b\u505a\u7684\uff08","title":"CF 516E \uff08By \\(\\text{d}\\color{red}{\\text{reamoon}}\\)\uff09"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E6%9D%82%E9%A2%98/#abc-209e","text":"\u535a\u5f08\u8bba+\u56fe\u8bba \u5fc5\u987b\u8981\u548c\u4e0a\u4e00\u4e2a\u5355\u8bcd\u91cd\u5408\u4e09\u4e2a\u4ee5\u4e0a\u7684\u5b57\u6bcd\u7684\u5355\u8bcd\u63a5\u9f99\uff0c\u7ed9\u5b9a\u8bcd\u5178\uff0c\u4e14\u5927\u5c0f\u5199\u654f\u611f\u3002 \u95ee\u8f93\u8d62\u6216\u5e73\u3002 \u4f60\u53d1\u73b0\u6211\u4eec\u4e0d\u4f1a\u5173\u5fc3\u9664\u4e86\u524d\u4e09\u4e2a\u6216\u8005\u540e\u4e09\u4e2a\u5b57\u7b26\u4ee5\u5916\u7684\u4e1c\u897f\u3002 \u800c\u4e14\u8981\u63a5\u9f99\u5c31\u5fc5\u987b\u5b8c\u5168\u91cd\u5408\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5148\u5b57\u7b26\u4e32hash\u4e00\u4e0b\u524d\u4e09\u4f4d\u548c\u540e\u4e09\u4f4d\uff0c\u7136\u540e\u628a\u524d\u4e09\u4f4d\u5411\u540e\u4e09\u4f4d\u8fde\u8fb9\u3002 \u7136\u540e\u6211\u4eec\u4f1a\u5f97\u5230\u4e00\u5f20\u6709\u5411\u56fe\u3002 \u8003\u8651\u600e\u4e48\u7ef4\u62a4\u5148\u624b\u5fc5\u80dc\u6001\u548c\u5148\u624b\u5fc5\u8d25\u6001\u3002 \u5982\u679c\u5f53\u524d\u72b6\u6001\u80fd\u53bb\u5f80\u7684\u72b6\u6001\u90fd\u662f\u5fc5\u80dc\u6001\u6216\u8005\u65e0\u6cd5\u53bb\u5f80\u4efb\u610f\u72b6\u6001\uff0c\u5219\u5b83\u662f\u5148\u624b\u5fc5\u8d25\u6001\u3002 \u5982\u679c\u5b83\u80fd\u5230\u8fbe\u81f3\u5c11\u4e00\u4e2a\u5fc5\u8d25\u6001\uff0c\u90a3\u4e48\u4ed6\u662f\u5fc5\u80dc\u6001\u3002 \u5176\u4ed6\u7684\u90fd\u662f\u5e73\u5c40\u3002 \u90a3\u4e48\u5efa\u53cd\u56fe\u62d3\u6251\u66f4\u65b0\u5373\u53ef\uff0c\u66f4\u65b0\u4e0d\u5230\u7684\u90fd\u662f\u5e73\u5c40\u3002 \u53e6\u5916\uff0c\u53ea\u8981\u4e00\u4e2a\u70b9\u786e\u5b9a\u4e86\u5fc5\u80dc\u6216\u8005\u5fc5\u8d25\u6001\uff0c\u90a3\u4e48\u5b83\u4e5f\u53ef\u4ee5\u5165\u961f\uff0c\u56e0\u4e3a\u4e0d\u4f1a\u518d\u88ab\u66f4\u6539\u4e86\u3002","title":"ABC 209E"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E6%9D%82%E9%A2%98/#abc-191d","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5706\uff0c\u95ee\u5706\u4e0a\u548c\u5706\u5185\u6574\u70b9\u4e2a\u6570\u3002 \u662f\u67d0\u4e2aHAOI\u7684\u8d85\u7ea7\u52a0\u5f3a\u7248\uff08 \u8fd9\u9898\u5361\u7cbe\u5ea6\u7279\u522b\u5413\u4eba\uff0cYL\u5f53\u65f6\u5361 \\(1e-14\\) \u8fc7\u4e86\u3002 \u6211\u5361 \\(1e-10\\) \u7206\u4e86\uff0c\u672c\u6765\u662f\u5fd8\u4e86\u8fd9\u4e2a\u9898\u7684\uff0c\u7ed3\u679cDM\u7684\u6bd2\u7624\u5361\u7cbe\u5ea6\u8bfe\u8bb2\u4e86\u8fd9\u4e2a\u3002 \u5c31\u56de\u6765\u5199\u4e00\u4e0b\u3002 \u53d1\u73b0\u5706\u5fc3\u5750\u6807\u548c\u534a\u5f84\u90fd\u662f\u6d6e\u70b9\u6570\uff0c\u4e0d\u8fc7\u4e0d\u8d85\u8fc7 \\(10^5\\) \u800c\u4e14\u6700\u591a\u6709\u56db\u4f4d\u5c0f\u6570\u70b9\u3002 \u6240\u4ee5\u6211\u4eec\u8003\u8651\u5148\u7ed9\u6bcf\u4e2a\u70b9\u7684 \\(x,y\\) \u90fd\u4e58\u4e0a \\(10^4\\) \u53d8\u6210\u6574\u6570\u3002 \u7136\u540e\u8003\u8651\u52fe\u80a1\u5b9a\u7406+\u679a\u4e3e\u5224\u65ad\u5408\u6cd5\u4e0a\u4e0b\u754c\u5c31\u53ef\u4ee5\u4e86\u3002","title":"ABC 191D"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E6%9D%82%E9%A2%98/#cf-261d","text":"\u6ca1\u505a\uff0c\u7a7a\u7740\u3002","title":"CF 261D"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E6%9D%82%E9%A2%98/#cf-1526c2","text":"\u95ee\u4e00\u4e2a\u5e8f\u5217\u7684\u6700\u957f\u5b50\u5e8f\u5217\uff0c\u4f7f\u5b50\u5e8f\u5217\u7684\u4efb\u610f\u4f4d\u7f6e\u7684\u524d\u7f00\u548c\u4e0d\u5c0f\u4e8e \\(0\\) \u3002 \u5927\u50bb\u903c\u9898\uff0c\u79d2\u4e86\u3002 \u8003\u8651\u7528\u4e00\u4e2a\u4f18\u5148\u961f\u5217\u7ef4\u62a4\uff0c\u4e00\u4e2a\u4e00\u4e2a\u5403\uff0c\u5982\u679c\u5403\u6b7b\u4e86\u5c31\u628a\u6700\u5c0f\u7684\u5410\u51fa\u6765\u7136\u540e\u7ee7\u7eed\u5403\u3002 \u6700\u540e\u8f93\u51fa size \u8d70\u4eba\u3002","title":"CF 1526C2"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E6%9D%82%E9%A2%98/#cf-1006f","text":"dm \u8bb2\u7684\u4e00\u9053\u53cc\u5411BFS\u3002 \u61d2\u5f97\u5199\u6240\u4ee5\u8f6c\u4e86\u522b\u4eba\u7684sol \u9898\u610f\u662f\u6709\u4e00\u4e2a \\(n\\times m\\) \u7684\u5730\u56fe\uff0c\u7136\u540e\u4ece\u5de6\u4e0a\u89d2\u8d70\u5230\u53f3\u4e0b\u89d2\uff0c\u95ee\u6700\u540e\u5f02\u6216\u7684\u503c\u7b49\u4e8e \\(k\\) \u7684\u8def\u5f84\u6709\u591a\u5c11\u6761\u3002 \u601d\u8def\u5c31\u662f\u6298\u534a\u641c\u7d22\uff0c\u53ef\u4ee5\u964d\u4f4e\u5f88\u591a\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u56e0\u4e3a\u5f53\u5730\u56fe\u5c0f\u7684\u65f6\u5019\uff0c \\(n+m\\) \u5c31\u4e0d\u6ee1\u8db3\u6298\u534a\u7684\u6761\u4ef6\u4e86\uff0c \u6240\u4ee5\u8fd9\u91cc\u7528 \\(n+m+2\\) \u4f5c\u4e3a\u6761\u4ef6\uff0c\u9996\u5148\u6211\u4eec\u5148\u641c\u7d22\u6b65\u6570\u4e3a \\(n+m+2\\) \u7684\u4e00\u534a\u7684\u503c\u4e3a\u641c\u7d22\u7ec8\u70b9\uff0c\u8bb0\u5f55\u5f53\u524d\u7684\u5f02\u6216\u503c\uff0c\u7136\u540e\u518d\u4ece\u7ec8\u70b9\u5f00\u59cb\u641c\u7d22\uff0c \u5f53\u641c\u7d22\u5230 \\(n+m+2\\) \u7684\u4e00\u534a\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5224\u65ad\u5f53\u524d\u70b9\u7684\u4e0e \\(k\\) \u7684\u5f02\u6216\u503c\u662f\u5426\u6709\u6807\u8bb0\u8fc7\uff0c\u6709\u7684\u8bdd\u5c31\u8bf4\u660e\u8fd9\u6574\u4e2a\u4e00\u6761\u8def\u7684\u5f02\u6216\u503c\u7b49\u4e8e \\(k\\) \uff0c\u76f4\u63a5\u52a0\u7ed9 \\(ans\\) \u5c31\u597d\u4e86\u3002 \u539f\u6587\u94fe\u63a5\uff1a https://blog.csdn.net/Charles_Zaqdt/article/details/81077919","title":"CF 1006F"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E6%9D%82%E9%A2%98/#arc-084-db","text":"dm \u8bb2\u7684\u4e00\u9053\u6570\u8bbaBFS\u3002 \u627e\u51fa\u6570\u4f4d\u548c\u6700\u5c0f\u7684 \\(k\\) \u7684\u500d\u6570\u662f\u591a\u5c11\u3002 2e5 \u53d1\u73b0\u53ef\u80fd\u4f1a\u70b8 __int128 . \u6240\u4ee5\u6211\u4eec\u8003\u8651\u5bf9\u6570\u4f4d\u8fdb\u884c\u64cd\u4f5c\u3002 \u53d1\u73b0\u5982\u679c\u4ece \\(1\\) \u5f00\u59cb\uff0c\u53ea\u7528\u4e24\u79cd\u64cd\u4f5c\u5c31\u53ef\u4ee5\u5f97\u5230\u4efb\u610f\u4e00\u4e2a\u6570\uff08\u5176\u5b9e\u771f\u5b9e\u60c5\u51b5\u4e00\u79cd\u5c31\u53ef\u4ee5\u4e86\uff09 \\(+1\\) \u4e14 cost \u4e3a \\(1\\) \\(\\times 10\\) \u4e14 cost \u4e3a \\(0\\) \u3002 \u6240\u4ee5\u5176\u5b9e\u8fd9\u662f\u4e2a 01BFS\u3002 \u4ee4\u6bcf\u4e00\u4e2a\u72b6\u6001\u90fd\u5bf9 \\(k\\) \u53d6\u6a21\uff0c\u7136\u540e\u4ece \\(1\\) \u5f00\u59cb\u3002 \u5982\u679c\u5f53\u524d\u8fd9\u4e2a\u64cd\u4f5c\u662f cost \u4e3a \\(1\\) \u7684\u64cd\u4f5c\uff0c\u6254\u5230\u961f\u5c3e\uff0c\u53cd\u4e4b\u6254\u5230\u961f\u5934\u3002 \u7136\u540e01BFS\u5373\u53ef\u3002","title":"ARC 084 D/B"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E6%9D%82%E9%A2%98/#abc-203d","text":"\u4e00\u9053 01 \u4e8c\u5206\u7684\u677f\u5b50\uff1f \u8fd9\u4e2a trick \u4e0d\u662f\u5f88\u5e38\u89c1\uff0c\u4f46\u662f\u53ea\u8981\u4e00\u51fa\u5c31\u80fd\u5361\u5230\u4eba\u3002 \u8fd9\u9053\u9898\u8981\u6c42\u4f60\u6c42\u51fa\u4e00\u4e2a \\(n\\times n\\) \u7684\u77e9\u9635\u5f53\u4e2d\u7684\u6240\u6709 \\(k\\times k\\) \u5927\u5c0f\u7684\u5b50\u77e9\u9635\u7684\u8d21\u732e\u7684\u6700\u5c0f\u503c\u3002 \u4e00\u4e2a\u77e9\u9635\u7684\u8d21\u732e\u5b9a\u4e49\u4e3a\u628a\u77e9\u9635\u6240\u6709\u5143\u7d20\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u4e4b\u540e\u7684\u7b2c \\(\\lfloor \\dfrac{k^2}{2} \\rfloor +1\\) \u5927\u7684\u6570\uff08\u53ef\u4ee5\u7406\u89e3\u4e3a \u4e2d\u4f4d\u6570 \uff09 \u5927\u5c0f\u662f \\(800^2\\) \u3002 \u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u4e8c\u5206\u8f6c\u5316\u4e3a\u5224\u5b9a\uff1a\u5b58\u4e0d\u5b58\u5728\u4e00\u4e2a\u5b50\u77e9\u9635\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u77e9\u9635\u7684\u8d21\u732e\u6bd4 \\(x\\) \u5c0f\uff1f \u7136\u540e\u6211\u4eec\u8ba9 \\(x\\) \u5c3d\u91cf\u5c0f\uff0c\u5f53\u8fd9\u4e2a\u77e9\u9635\u7684\u8d21\u732e\u5c31\u662f \\(x\\) \u7684\u65f6\u5019\uff0c\u7b54\u6848\u5c31\u662f \\(x\\) \u3002 \u4f60\u8003\u8651\u53bb\u4e8c\u5206\u8fd9\u4e2a\u6570\u5b57 \\(x\\) \uff0c\u7136\u540e\u5bf9\u4e8e\u4f60\u4e8c\u5206\u5230\u7684\u77e9\u9635\uff0c\u4ee4\uff1a \\[\\text{submatrix}[i][j]=\\begin{cases}0 & ,\\text{submatrix}[i][j]\\le x\\\\1 & ,\\text{submatrix}[i][j] > x\\end{cases}\\] \u5982\u679c\u8bf4\u8fd9\u4e2a\u5b50\u77e9\u9635\u7684\u548c\u662f \\(<\\lfloor \\dfrac{k^2}{2} \\rfloor +1\\) \u7684\uff0c\u90a3\u4e48\u5f88\u660e\u663e\u6bd4 \\(x\\) \u5927\u7684\u6570\u5c31\u4e00\u5b9a\u5c11\u4e8e \\(\\lfloor \\dfrac{k^2}{2} \\rfloor +1\\) \u4e2a\u3002 \u90a3\u4e48\u5b83\u7684\u8d21\u732e\u80af\u5b9a\u6bd4 \\(x\\) \u5c0f\uff0c\u6ee1\u8db3\u8981\u6c42\uff0c\u53cd\u4e4b\u5219\u4e0d\u6ee1\u8db3\u3002 \u7136\u540e\u5199\u4e2a\u4e8c\u7ef4\u524d\u7f00\u548c\u641e\u641e\u5c31\u884c\u4e86\u3002","title":"ABC 203D"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E6%9D%82%E9%A2%98/#cf-1059d","text":"\u7ed9\u4e00\u5806\u70b9\uff0c\u662f\u5426\u6709\u4e00\u4e2a\u548c \\(x\\) \u8f74\u76f8\u5207\u7684\u5706\u4f7f\u5f97\u6bcf\u4e00\u4e2a\u70b9\u90fd\u88ab\u5b83\u5305\u542b\u3002 \u95ee\u8fd9\u4e2a\u5706\u7684\u534a\u5f84\u6700\u5c0f\u662f\u591a\u5c11\u3002 \u9996\u5148\u4f60\u53d1\u73b0\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u70b9\u5bf9 \\(((x_1,y_1),(x_2,y_2))\\) \u6ee1\u8db3 \\(y_1\\times y_2 <0\\) \uff0c\u90a3\u4e48\u5c31\u5f88\u660e\u663e\u65e0\u89e3\u3002 \u7136\u540e\u6211\u4eec\u628a\u6240\u6709\u70b9\u8f6c\u5230 \\(x\\) \u8f74\u4e0a\u65b9\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4f60\u4e8c\u5206\u5230\u7684 \\(r\\) \uff0c\u6211\u4eec\u53ef\u4ee5\u626b\u63cf\u4e00\u904d\u70b9\u96c6\u5408\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9 \\((x,y)\\) \u5229\u7528\u52fe\u80a1\u5b9a\u7406\u6c42\u51fa\u4e00\u4e2a\u533a\u95f4\uff0c\u4f7f\u5f97\u533a\u95f4\u91cc\u7684\u6bcf\u4e00\u4e2a\u70b9\u5230 \\((x,y)\\) \u7684\u8ddd\u79bb\u5728\u533a\u95f4 \\([y,r]\\) \u5f53\u4e2d\u3002 \u7136\u540e\u5bf9\u4e8e\u6240\u6709\u7684\u533a\u95f4\u6c42\u4e00\u4e2a\u4ea4\u96c6\uff0c\u5982\u679c\u4ea4\u96c6\u4e3a\u7a7a\u96c6\u90a3\u4e48\u8fd9\u4e2a \\(r\\) \u4e0d\u5408\u6cd5\uff0c\u53cd\u4e4b\u5408\u6cd5\u3002 \u7136\u540e\u6211\u4eec\u4f7f\u7528\u5b9e\u6570\u4e8c\u5206\uff0c\u4f46\u662f\u56e0\u4e3a\u8fd9\u9898\u5361\u7cbe\u5ea6\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u4f7f\u7528 \\(eps\\) \u6765\u5224\u65ad\uff0c\u800c\u662f\u76f4\u63a5\u6309\u6b21\u6570\u5faa\u73af\u3002 \u8fd9\u9898\u7cbe\u5ea6\u8981\u6c42 \\(10^{-6}\\) \uff0c\u6240\u4ee5\u4f60\u5927\u6982\u5faa\u73af\u4e2a \\(10^3\\) \u6b21\u5c31\u5dee\u4e0d\u591a\u4e86\u3002","title":"CF 1059D"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E6%9D%82%E9%A2%98/#agc-006d","text":"\u4e5f\u662f\u4e00\u9053\u975e\u5e38\u5999\u7684 01 \u4e8c\u5206\u3002 \u5b9a\u4e49\u4e00\u4e2a\u6570\u5b57\u91d1\u5b57\u5854\uff0c\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u662f\u5b83\u4e0b\u4e00\u5c42\u7684\u4e09\u4e2a\u8282\u70b9\u7684 \u4e2d\u4f4d\u6570 \u3002 \u7ed9\u5b9a\u6700\u540e\u4e00\u5c42\uff0c\u6c42\u7b2c\u4e00\u5c42\u6700\u6709\uff0c \\(2e5\\) \u5c42\u3002 \u53d1\u73b0\u8981 \\(\\text{O}(n \\log n)\\) \u624d\u884c\u3002 \u7136\u540e\u4f60\u8003\u8651\u4e8c\u5206\u9876\u5c42\u8282\u70b9 \\(x\\) \u7684\u6570\u503c\u3002 \u5bf9\u4e8e\u6700\u540e\u4e00\u5c42\u7684\u8282\u70b9\uff0c\u6211\u4eec\u4ee4\u6240\u6709\u7684 \\(\\le x\\) \u7684\u8282\u70b9\u53d8\u6210 \\(0\\) \uff0c\u53cd\u4e4b\u4e3a \\(1\\) \uff08\u548c ABC203D \u4e00\u4e2a\u601d\u8def\uff09\u3002 \u7136\u540e\u4f60\u8003\u8651\u5411\u4e0a\u9012\u63a8\u7684\u8fc7\u7a0b\u3002 \u4f60\u53d1\u73b0\uff0c\u56e0\u4e3a \\(x\\) \u662f\u6700\u9876\u5c42\u8282\u70b9\uff0c\u6240\u4ee5\u5982\u679c\u5e95\u5c42\u6709\u8fde\u7eed\u7684\u4e24\u4e2a \\(1\\) \u6216\u8005\u8fde\u7eed\u7684\u4e24\u4e2a \\(0\\) \uff0c\u4ed6\u4eec\u5c31\u4f1a\u4e00\u76f4\u5411\u4e0a\u8d70\uff0c\u800c\u4e14\u4e0d\u65ad\u5f80\u4e2d\u95f4\u9760\u3002 \u6240\u4ee5\u6700\u9760\u8fd1\u4e2d\u95f4\u7684\u90a3\u4e00\u7ec4\u5c31\u662f\u5854\u9876\u7684 \\(0\\) \u6216\u8005 \\(1\\) \u3002 \u5982\u679c\u4f60\u63a8\u51fa\u6765\u5854\u9876\u662f \\(0\\) ,\u90a3\u4e48\u5c31\u6ee1\u8db3\u60c5\u51b5\uff0c\u53cd\u4e4b\u4e0d\u6ee1\u8db3\u3002 \u7136\u540e\u4f60\u518d\u7279\u5224\u4e00\u4e0b\u6839\u672c\u6ca1\u6709\u8fde\u7eed\u7684\u6570\u5b57\u7684\u60c5\u51b5\u5373\u53ef\u3002","title":"AGC 006D"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E6%9D%82%E9%A2%98/#cf-865c","text":"\u4e00\u9053\u671f\u671b+\u4e8c\u5206\u3002 \u4e5f\u6bd4\u8f83\u5999\u3002 \u5e2e PWK \u4fee\u4e86\u4ed6\u7684 \u9898\u89e3 \uff0c\u6240\u4ee5\u9898\u610f\u5c31\u7528\u4ed6\u7684\u4e86\uff1a \u4f60\u662f\u4e00\u4e2a up \u4e3b\uff0c\u4f60\u8981\u5f55\u4e00\u6bb5\u901f\u901a RA2YR \u7684\u89c6\u9891\uff0c \u6218\u5f79\u6709 \\(n\\) \u5173\uff0c\u6bcf\u5173\u4f60\u6709 \\(p_i\\%\\) \u7684\u53ef\u80fd\u6027\u82b1 \\(F_i\\) \u7684\u65f6\u95f4\u901a\u8fc7\uff0c \\((1-p_i)\\%\\) \u7684\u53ef\u80fd\u6027\u82b1\u6389 \\(S_i\\) \u7684\u65f6\u95f4\u901a\u8fc7\uff08\u5931\u8bef\u4e86\uff09\uff0c\u5176\u4e2d\u4fdd\u8bc1 \\(F_i>S_i\\) \u3002 \u4f46\u56e0\u4e3a\u4f60\u60f3\u201c\u901f\u901a\u201d\uff0c\u4f60\u4e0d\u5e0c\u671b\u4f60\u7684\u89c6\u9891\u957f\u5ea6\u8d85\u8fc7 \\(m\\) \u3002 \u5f53\u4f60\u8ba4\u4e3a\u81ea\u5df1\u63a5\u4e0b\u6765\u53ef\u80fd\u5f55\u4e0d\u5b8c\uff08\u63a5\u7740\u5f55\u5f55\u5b8c\u4e0d\u5982\u91cd\u65b0\u5f55\uff09\u65f6\uff0c\u4f60\u4f1a\u91cd\u65b0\u5f00\u59cb\u5f55\uff0c\u6c42\u5f55\u5b8c\u6574\u4e2a\u6e38\u620f\u7684\u65f6\u95f4\u671f\u671b\u3002 \u8003\u8651\u8bbe \\(f_{i,j}\\) \u8868\u793a\u6253\u8fc7\u7b2c \\(i\\) \u5173\uff0c\u4f7f\u7528 \\(j\\) \u7684\u65f6\u95f4\u7684\u671f\u671b\u3002 \u7136\u540e\u56e0\u4e3a\u662f\u6709\u65f6\u95f4\u9650\u5236\u7684\uff0c\u6240\u4ee5\u4f60\u4f1a\u63a8\u51fa\u4e00\u4e2a\u8fd9\u6837\u7684\u67ff\u5b50\uff08\u4e5f\u662fPWK\u7684\uff09\uff1a \\[ f(i,j)=\\begin{cases} 0 ,& i=n,j\\le m\\\\ f(0,0),& j >m \\\\ \\min(f(0,0),e1+e2) ,& \\text{otherwise.} \\end{cases} \\] \u5176\u4e2d $e_1=p_{i+1} \\times f(i+1,j+f_{i+1})+f_{i+1})) $\u3002 \\(e_2=p_{i+1}\\times(1-p_{i+1})\\times(f(i+1,j+S_{i+1})+S_{i+1})\\) \u3002 \u7136\u540e\u4f60\u53d1\u73b0 \\(f_{0,0}\\) \u4f1a\u5bfc\u81f4\u8f6c\u79fb\u6709\u73af\uff0c\u6240\u4ee5\u628a \\(f_{0,0}\\) \u5f53\u4f5c\u4e00\u4e2a\u5e38\u6570\uff0c\u4ece \\(n\\) \u5f00\u59cb\u5012\u5e8f\u679a\u4e3e\u3002 \u7136\u540e\u6700\u4f18\u91cd\u5f00\u65f6\u95f4\u4e00\u5b9a\u662f\u7b49\u4e8e\u671f\u671b\u65f6\u95f4\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206\u4ed6\u91cd\u5f00\u7684\u65f6\u95f4\u3002 \u7136\u540e\u5229\u7528 \\(f_{0,0}\\) \u7684\u503c\u5224\u65ad\u53ef\u884c\u6027\u5373\u53ef \uff08 \\(f_{0,0}<mid\\) \uff09\u3002","title":"CF 865C"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E6%9D%82%E9%A2%98/#cf-1203f1","text":"\u6709 \\(i\\) \u4e2a\u9879\u76ee\uff0c\u6bcf\u4e00\u4e2a\u9879\u76ee\u6709\u4e00\u4e2a\u9650\u5236\u548c\u4e00\u4e2a\u6743\u503c\uff08\u6743\u503c\u53ef\u4ee5\u4e3a\u8d1f\u6570\uff09\u3002 \u4f60\u505a\u4e00\u4e2a\u9879\u76ee\u7684\u8bdd\uff0c\u4f60\u7684\u4fe1\u8a89\u9700\u8981\u8fbe\u5230\u9650\u5236 \\(a_i\\) \uff0c\u505a\u5b8c\u4e4b\u540e\u4f60\u7684\u4fe1\u8a89\u4f1a\u52a0\u4e0a\u6743\u503c \\(b_i\\) \u3002 \u505a\u5b8c\u9879\u76ee\u7684\u65f6\u5019\u4fe1\u8a89\u4e0d\u80fd\u4e3a \\(0\\) \uff0c\u4f60\u7684\u521d\u59cb\u4fe1\u8a89\u4e3a \\(r\\) \uff0c\u95ee\u4f60\u80fd\u4e0d\u80fd\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u60c5\u51b5\u4e0b\u505a\u5b8c\u6240\u6709\u9879\u76ee\u3002 \u6211\u4eec\u8003\u8651\u8d2a\u5fc3\u3002 \u4f60\u53d1\u73b0\u505a\u5b8c\u4e00\u4e2a\u9879\u76ee\u4e4b\u540e\uff0c\u4f60\u7684\u4fe1\u8a89\u81f3\u5c11\u662f \\(a_i+b_i\\) \u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6309\u7167 \\(a_i+b_i\\) \u5347\u5e8f\u6392\u5e8f\uff0c\u5e76\u4e14\u5728\u6b64\u57fa\u7840\u4e0a\u8ba9\u9650\u5236 \\(a_i\\) \u66f4\u5927\u7684\u6392\u5728\u524d\u9762\u3002 \u7136\u540e\u4ece\u5934\u5f00\u59cb\u6a21\u62df\u505a\u9879\u76ee\u7684\u8fc7\u7a0b\u5c31\u53ef\u4ee5\u4e86\u3002 \u4f60\u53d1\u73b0 \\(b_i\\) \u7684\u6b63\u8d1f\u4f1a\u5bfc\u81f4\u8d2a\u5fc3\u51fa\u73b0\u5947\u602a\u7684\u9519\u8bef\uff0c\u4f1a WA on test 5\u3002 \u6240\u4ee5\u6211\u4eec\u6b63\u8d1f\u5206\u5f00\u6392\u5e8f\uff0c\u5faa\u73af\u4e24\u6b21\u7136\u540e\u5224\u65ad\u53ef\u884c\u6027\u5c31\u53ef\u4ee5\u4e86\u3002","title":"CF 1203F1"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E6%9D%82%E9%A2%98/#cf-814d","text":"\u6709 \\(n\\) \u4e2a\u5706\uff0c\u4ed6\u4eec\u53ea\u80fd\u662f\u76f8\u4e92\u5305\u542b\uff0c\u76f8\u79bb\u6216\u8005\u76f8\u5207\u7684\u3002 \u5c06\u5176\u5206\u4e3a\u4e24\u7ec4\uff0c\u6bcf\u7ec4\u4e2d\uff0c\u53ea\u6709\u5947\u6570\u6b21\u8986\u76d6\u7684\u624d\u4f1a\u7b97\u5165\u9762\u79ef\uff0c\u6c42\u53ef\u80fd\u7684\u6700\u5927\u9762\u79ef\u3002 \uff08\u7ffb\u8bd1\u662f\u6211\u6254\u5728luogu\u8ba8\u8bba\u533a\u7684\uff09 \u6211\u4eec\u8003\u8651\u4e00\u4e2a\u8d2a\u5fc3\uff0c\u628a\u6240\u6709\u8986\u76d6\u6b21\u6570\u662f \\(2\\) \u7684\u5706\u5168\u90e8\u6254\u5230\u4e00\u7ec4\uff0c\u5269\u4e0b\u7684\u4e00\u7ec4\u3002 \u8bc1\u660e\u7565\uff08 \u7136\u540e\u53c8\u56e0\u4e3a\u5305\u542b\u5173\u7cfb\u662f\u5448\u6811\u5f62\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8ba9\u88ab\u5305\u542b\u7684\u6210\u4e3a\u7236\u4eb2\uff0c\u5916\u5c42\u7684\u6210\u4e3a\u513f\u5b50\uff0c\u7136\u540e\u5728\u6811\u4e0a\u8dd1\u4e00\u904d \\(dfs\\) \u7edf\u8ba1\u5373\u53ef\uff08\u4e0d\u8fc7\u5173\u7cfb\u662f\u6709\u53ef\u80fd\u53d8\u6210\u68ee\u6797\u7684\uff0c\u6240\u4ee5\u8981\u5efa\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\uff09\u3002","title":"CF 814D"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E6%9D%82%E9%A2%98/#cf-954g","text":"\u4e00\u5171\u6709 \\(n\\) \u9762\u5899\uff0c\u521d\u59cb\u6709 \\(a_i\\) \u4e2a\u5f13\u7bad\u624b\u5728\u7b2c \\(i\\) \u9762\u5899\u7684\u4f4d\u7f6e\u4e0a\u3002\u4e00\u4e2a\u5728 \\(i\\) \u4f4d\u7f6e\u7684\u5f13\u7bad\u624b\u53ef\u4ee5\u4fdd\u62a4 \\(|i - j| \\leq r\\) \u7684\u6240\u6709\u5899 \\(j\\) \u3002 \u4f60\u73b0\u5728\u53ef\u4ee5\u589e\u6d3e \\(k\\) \u4e2a\u5f13\u7bad\u624b\u5e76\u4e14\u4efb\u610f\u5206\u914d\u5b83\u4eec\u7684\u4f4d\u7f6e\u3002\u4f60\u9700\u8981\u6700\u5927\u5316\u88ab\u6570\u91cf\u6700\u5c11\u7684\u5f13\u7bad\u624b\u4fdd\u62a4\u7684\u5899\u88ab\u5f13\u7bad\u624b\u4fdd\u62a4\u7684\u6570\u91cf\u3002 \\(n \\leq 5 \\times 10^5, 0 \\leq r \\leq n, 0 \\leq k \\leq 10^{18} ,0 \\leq a_i \\leq 10^9\\) \uff08\u9898\u610f\u6765\u81ealuogu\u8ba8\u8bba\u533a\uff09 \u8bbe\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u7684 defence lv \u4e3a \\(d_i\\) \u53d1\u73b0\u8fd9\u4e2a\u9898\u7684\u6761\u4ef6\u662f \u201c\u6700\u5c0f\u503c\u6700\u5927\u201d\u3002 \u6240\u4ee5\u5f88\u660e\u663e\u662f\u4e8c\u5206\u7b54\u6848\u3002 \u8003\u8651\u4e8c\u5206\u8fd9\u4e2a\u503c \\(mid\\) \uff0c\u6bcf\u6b21 check \u7684\u65f6\u5019\u8003\u8651\u8d2a\u5fc3\u3002 \u5982\u679c\u6709\u4e00\u4e2a\u4f4d\u7f6e \\(i\\) \u7684 \\(d_i < mid\\) \u6211\u4eec\u5728\u4f4d\u7f6e \\(\\min(i+r,n)\\) \u653e \\(mid-d_i\\) \u4e2a archer \u5c31\u884c\u4e86\u3002","title":"CF 954G"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E6%9D%82%E9%A2%98/#cf-845e","text":"\u6709\u4e00\u4e2a \\(n\\) \u884c \\(m\\) \u5217\u7684\u7f51\u683c\u3002\u5176\u4e2d\u6709 \\(k+1\\) \u4e2a\u683c\u5b50\u7740\u706b\u4e86\u3002\u6bcf\u4e2a\u65f6\u523b\uff0c\u706b\u4f1a\u8513\u5ef6\u81f3\u76f8\u90bb\u7684\u683c\u5b50\uff08\u516b\u8054\u901a\uff09\u3002 \u73b0\u5728\u7ed9\u51fa\u5176\u4e2d \\(k\\) \u4e2a\u7740\u706b\u7684\u683c\u5b50\uff0c\u8bf7\u786e\u5b9a\u7b2c \\(k+1\\) \u683c\u5b50\uff0c\u4f7f\u5f97\u7f51\u683c\u88ab\u70e7\u5b8c\u7684\u7528\u65f6\u6700\u77ed\u3002 \u4f60\u53ea\u9700\u8981\u8f93\u51fa\u6700\u77ed\u7528\u65f6\u3002 \\(n,m \\le 10^9,k\\le 500\\) \u3002 \u53d1\u73b0 \\(n,m\\) \u975e\u5e38\u5927\uff0c\u4f46\u662f \\(k\\) \u975e\u5e38\u5c0f\u3002 \u6240\u4ee5\u6211\u4eec\u4ece \\(k\\) \u5165\u624b\uff0c\u8003\u8651\u53bb\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u65f6\u523b\uff0c\u6bcf\u4e00\u4e2a\u70b9\u80fd\u8513\u5ef6\u5230\u7684\u4f4d\u7f6e\u3002 \u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u6bcf\u79d2\u53ea\u6269\u5c55\u4e00\u5c42\u5e76\u4e14\u662f\u516b\u8054\u901a\uff0c\u6240\u4ee5\u53ef\u4ee5 \\(\\text{O}(1)\\) \u7b97\u8fd9\u4e2a\u77e9\u5f62\u7684\u9876\u70b9\u7684\u5750\u6807\u3002 \u53c8\u53d1\u73b0\u8fd9\u4e2a\u201c\u65f6\u95f4\u201d\u6ca1\u6cd5\u5f88\u597d\u7684\u6c42\u51fa\u6765\uff0c\u4f46\u662f\u521a\u597d\u5177\u6709\u5355\u8c03\u6027\u3002 \u6240\u4ee5\u8003\u8651\u4e8c\u5206\u3002 \u6bcf\u6b21\u4e8c\u5206\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8ba1\u7b97\u51fa\u6240\u6709\u77e9\u5f62\u8986\u76d6\u7684\u9762\u79ef\u3002 \u7136\u540e\u4f60\u53bb\u770b\u6700\u8fb9\u4e0a\u7684\u90a3\u56db\u4e2a\u89d2\uff08\u56e0\u4e3a\u5f88\u660e\u663e\u6269\u5c55\u5230\u4ed6\u4eec\u7684\u65f6\u95f4\u4e00\u5b9a\u662f\u6bcf\u4e2a\u65b9\u5411\u4e0a\u6700\u665a\u7684\uff09\u7684\u7a7a\u4f59\uff08\u5982\u679c\u6709\uff09\u6709\u6ca1\u6709\u529e\u6cd5\u7528\u4e00\u4e2a\u70b9\u5c31\u80fd\u8986\u76d6\u5b8c\u5c31\u884c\u3002 \u56e0\u4e3a\u503c\u57df\u6bd4\u8f83\u5927\u6240\u4ee5\u6211\u4eec\u9700\u8981\u79bb\u6563\u5316\u3002 \u8ba1\u7b97\u9762\u79ef\u53ef\u4ee5\u4f7f\u7528\u4e8c\u7ef4\u5dee\u5206\u6216\u8005\u626b\u63cf\u7ebf\u3002","title":"CF 845E"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E6%9D%82%E9%A2%98/#cf-547d","text":"\u7ed9\u5750\u6807\u7cfb\u5f53\u4e2d\u7684 \\(n\\) \u4e2a\u6574\u70b9\u7ea2\u84dd\u67d3\u8272\uff0c\u8981\u6c42\u540c\u4e00\u4e2a\u76f4\u7ebf\uff08 \\(y\\) or \\(x\\) \u65b9\u5411\uff09\u4e0a\u7684\u7ea2\u84dd\u8282\u70b9\u4e2a\u6570\u76f8\u5dee\u4e0d\u8d85\u8fc7\u4e00\u3002 \u95ee\u5982\u4f55\u67d3\u8272\uff0c\u591a\u89e3\u4efb\u610f\u5373\u53ef\u3002 \u4fdd\u8bc1\u6709\u7b54\u6848\u3002 \u9996\u5148\u6211\u4eec\u53d1\u73b0\u4e00\u5b9a\u4f1a\u6709\u7b54\u6848\uff0c\u53c8\u662f\u8981\u6211\u4eec\u628a\u70b9\u5206\u6210\u4e24\u4e2a\u90e8\u5206\u3002 \u6240\u4ee5\u6211\u4eec\u60f3\u5230\u4e86\u4e8c\u5206\u56fe\uff0c\u624b\u5143\u4e00\u4e0b\u6837\u4f8b\u53ef\u4ee5\u53d1\u73b0\u786e\u5b9e\u662f\u4e8c\u5206\u56fe\u3002 \u6240\u4ee5\u76f4\u63a5\u5bf9\u4e8e\u540c\u4e00\u76f4\u7ebf\u4e0a\u7684\u70b9\u5efa\u8fb9\u7136\u540e\u4e8c\u5206\u56fe\u67d3\u8272\u5373\u53ef\u3002 \u53ef\u4ee5\u5148 \\(\\text{O}(n \\log n)\\) \u6392\u5e8f\u518d\u5efa\u8fb9\uff0c\u6216\u8005\u7528\u4e00\u4e2a \\(\\text{O}(n)\\) \u7684\u65b9\u6cd5\u5efa\u8fb9\uff0c\u5177\u4f53\u65b9\u6cd5\u89c1\u63d0\u4ea4\u8bb0\u5f55\uff1a https://codeforces.com/contest/547/submission/131984717","title":"CF 547D"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/","text":"\u67d0\u4e9b\u6076\u5fc3\u9898\u5c31\u4e0d\u8865\u4e86\u3002 ATCoder\uff0cNowCoder\uff0cCodeforces\u7684\u6bd4\u8d5b\u5b9e\u9645\u4e0a\u90fd\u4f1a\u653e\u5230\u8fd9\u91cc\u9762\u3002 \u7136\u540eCF\u7684\u601d\u7ef4\u9898\u4e00\u7c7b\u7684\u4e5f\u4f1a\u5728\u8fd9\u513f\u3002 Codeforces #734 \u00b6 Contest ID: 1551 \u5728\u5b66\u6821\u548c\u6574\u4e2a\u673a\u623f\u4e00\u8d77VP\u7684\u3002 A \u00b6 \\(1\\) \u5757\u7684\u786c\u5e01\u7528 \\(c_1\\) \u4e2a, \\(2\\) \u5757\u786c\u5e01\u7528 \\(c_2\\) \u4e2a\u3002 \u95ee\u4f60\u51d1\u51fa \\(n\\) \u5143\u65f6\u7684 \\(\\min(|c_1-c_2|)\\) \u4e00\u773c\u9898\u3002 \u8981 \\(|c_1-c_2|\\) \u6700\u5c0f\u8bf4\u767d\u4e86\u5c31\u662f\u5c3d\u91cf\u5e73\u5747\u3002 \u90a3\u4e48\u5c31\u5c3d\u91cf\u7684\u7528\u4e00\u4e2a \\(1\\) \u7684\u540c\u65f6\u4e5f\u7528\u4e00\u4e2a \\(2\\) \u3002 \u6240\u4ee5\u628a \\(n\\) \u9664\u4ee5 \\(3\\) \uff0c\u5f97\u5230 \\(c_1\\) \u548c \\(c_2\\) \u5404\u81ea\u5fc5\u987b\u8981\u6709\u7684\u4e2a\u6570\uff08\u6b64\u65f6 \\(c_1=c_2\\) \uff09\u3002 \u7136\u540e \\(n\\) \u65e0\u975e\u5c31\u662f\u5269\u4e0b \\(0,1,2\\) \u8fd9\u4e09\u79cd\u60c5\u51b5\u3002 \u5982\u679c\u4e0d\u5269\u90a3\u4e48\u76f4\u63a5\u8f93\u51fa\u3002 \u5982\u679c\u4f59 \\(1\\) \u90a3\u4e48\u591a\u52a0\u4e00\u4e2a \\(1\\) \u5143\u3002 \u5982\u679c\u4f59 \\(2\\) \u90a3\u4e48\u591a\u52a0\u4e00\u4e2a \\(2\\) \u5143\u3002 B1 \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u5b57\u7b26\u53ef\u4ee5\u6d82\u4e0a\u7ea2\u6216\u7eff\uff0c\u6216\u8005\u4e0d\u6d82\u3002 \u6d82\u4e0a\u76f8\u540c\u989c\u8272\u7684\u6240\u6709\u5b57\u6bcd\u76f8\u4e92\u4e0d\u80fd\u76f8\u540c\uff0c\u4e14\u7ea2\u8272\u548c\u7eff\u8272\u7684\u4e2a\u6570\u90fd\u4e3a \\(Q\\) \uff0c\u6c42 \\(\\max\\{Q\\}\\) \u3002 \u9996\u5148\u8003\u8651\u7b2c\u4e00\u4e2a\u6761\u4ef6\u3002 \u8f6c\u5316\u4e00\u4e0b\u4e5f\u5c31\u662f\u8bf4\u6bcf\u4e00\u79cd\u5b57\u6bcd\u6700\u591a\u53ea\u80fd\u6709\u4e24\u4e2a\u88ab\u6d82\u4e0a\u989c\u8272\u3002 \u6240\u4ee5\u6211\u4eec\u5f00\u4e00\u4e2a\u6876\u7edf\u8ba1\u4e00\u4e0b\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u7684\u51fa\u73b0\u6b21\u6570\u5e76\u5bf9\u5176\u8fdb\u884c\u5224\u65ad\u3002 \u518d\u8003\u8651\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u3002 \u56e0\u4e3a\u53ea\u4f1a\u6709\u4e24\u79cd\u989c\u8272\uff0c\u6240\u4ee5\u6d82\u4e0a\u989c\u8272\u7684\u70b9\u7684\u4e2a\u6570\u5fc5\u987b\u662f\u5076\u6570\uff08 \\(2\\) \u7684\u500d\u6570\uff09\u3002 \u90a3\u4e48\u601d\u8def\u5c31\u51fa\u6765\u4e86\uff0c\u7edf\u8ba1\u4e00\u4e0b\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5e76\u4e14\u7edf\u8ba1\u5b83\u6700\u591a\u6709\u591a\u5c11\u4e2a\u5b57\u6bcd\u53ef\u4ee5\u88ab\u6d82\u4e0a\u989c\u8272\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u79cd\u5b57\u6bcd\uff0c\u5982\u679c\u5b83\u7684\u4e2a\u6570\u5c0f\u4e8e\u7b49\u4e8e \\(2\\) \u90a3\u4e48\u5c31\u90fd\u53ef\u4ee5\u88ab\u6d82\u8272\uff0c\u5982\u679c\u5927\u4e8e\u7b49\u4e8e \\(3\\) \u5c31\u53ea\u6709\u4e24\u4e2a\u53ef\u4ee5\u88ab\u6d82\u4e0a\u989c\u8272\u3002 \u56e0\u4e3a\u6709\u4e24\u79cd\u989c\u8272\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u662f\u53ef\u4ee5\u88ab\u6d82\u4e0a\u989c\u8272\u7684\u5b57\u6bcd\u4e2a\u6570\u9664\u4ee5 \\(2\\) \u3002 \u5982\u679c\u6700\u540e\u53ef\u4ee5\u88ab\u6d82\u4e0a\u989c\u8272\u7684\u5b57\u6bcd\u4e2a\u6570\u662f\u4e2a\u5947\u6570\uff0c\u5c31\u9700\u8981\u5148\u51cf \\(1\\) \u518d\u9664 \\(2\\) \u3002 B2 \u00b6 \u5927\u4f53\u540c B1,\u73b0\u5728\u5b57\u7b26\u4e32\u53d8\u6210\u4e86\u5e8f\u5217\uff0c\u800c\u4e14\u6709 \\(k\\) \u79cd\u4e0d\u540c\u989c\u8272\u3002 \u53ea\u8981\u6c42\u4f60\u8f93\u51fa\u65b9\u6848\u5373\u53ef\u3002 \u4eceB1\u7684\u89d2\u5ea6\u8003\u8651\uff0c\u73b0\u5728\u6709 \\(k\\) \u79cd\u4e0d\u540c\u989c\u8272\u3002\u90a3\u4e48\u6211\u4eec\u4ecd\u65e7\u662f\u7edf\u8ba1\u6bcf\u4e00\u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u51fa\u73b0\u591a\u5c11\u6b21\u3002 \u5982\u679c\u5927\u4e8e \\(k\\) \u90a3\u4e48\u5c31\u53ea\u6709 \\(k\\) \u4e2a\u53ef\u4ee5\u88ab\u6d82\u8272\u3002 \u53cd\u4e4b\u90fd\u53ef\u4ee5\u3002 \u7136\u540e\u7edf\u8ba1\u5b8c\u4e4b\u540e\u6211\u4eec\u6309 \\(a[i]\\) \u7684\u5927\u5c0f\u6392\u4e2a\u5e8f\u3002 \u4e5f\u5c31\u662f\u628a\u540c\u4e00\u79cd\u90fd\u6254\u5230\u4e00\u8d77\u5904\u7406\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u79cd\uff0c\u6211\u4eec\u53ea\u6d82\u524d \\(k\\) \u4e2a\uff08\u4fdd\u8bc1\u4e0d\u91cd\u590d\u800c\u4e14\u6d82\u591f\uff09\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002 \u4f46\u662f\u6211\u4eec\u8981\u8f93\u51fa\u65b9\u6848\uff0c\u6240\u4ee5\u9700\u8981\u8bb0\u5f55\u4e00\u4e0b\u5143\u7d20\u7684\u4f4d\u7f6e\u3002 C \u00b6 \u53ea\u7528\u4e94\u4e2a\u5b57\u6bcd \\(\\{a,b,c,d,e\\}\\) \u7ec4\u6210\u4e00\u7bc7\u6587\u7ae0\uff0c \u82e5\u679c\u5176\u4e2d\u4e00\u4e2a\u5b57\u7b26\u7684\u51fa\u73b0\u6b21\u6570\u6bd4\u5176\u5b83\u7684\u52a0\u8d77\u6765\u90fd\u591a\u90a3\u4e48\u8fd9\u7bc7\u6587\u7ae0\u5c31\u662f\u597d\u7684\u3002 \u7ed9\u5b9a\u51e0\u4e2a\u5355\u8bcd\uff0c\u6c42\u6700\u957f\u7684\u597d\u6587\u7ae0\u7684\u5355\u8bcd\u6570\u3002 \u770b\u5230\u53ea\u6709\u4e94\u4e2a\u5b57\u6bcd\uff0c\u6211\u76f4\u63a5\u9ad8\u5174\u4e86\u8d77\u6765\u3002 \u770b\u5230\u65f6\u96504s\uff0c\u6211\u7684\u5634\u89d2\u5c31\u76f4\u63a5\u626c\u4e86\u8d77\u6765\u3002 \u8fd9\u4e0d\u660e\u6446\u7740\u8ba9\u4f60\u6253\u66b4\u529b\u5417\uff1f \u6240\u4ee5\u76f4\u63a5\u7edf\u8ba1\u6bcf\u4e2a\u5b57\u7b26\u7684\u51fa\u73b0\u6b21\u6570\u3002 \u7136\u540e\u5bf9\u4e8e\u6bcf\u79cd\u5b57\u7b26\u6211\u4eec\u6392\u5e8f\u8d2a\u5fc3\u4e00\u4e0b\uff0c\u5982\u679c\u8bf4\u53ef\u4ee5\u9009\u5f53\u524d\u5355\u8bcd\uff0c\u5373\u66f4\u65b0\u7b54\u6848\u3002 \uff08\u8bf4\u662f\u7b80\u5355\u66b4\u529b+\u8d2a\u5fc3\uff0c\u6211\u5374\u5199\u4e86\u534a\u5c0f\u65f6\uff0cwtcl\uff09 D1 D2 E F \u00b6 \u5f85\u8865 Codeforces #735 \u00b6 Contest ID: 1554 \u4e94\u9898\u573a\uff0c\u6211\u5c45\u7136\u6709ABCD\u3002 A \u00b6 \u95ee\u4f60\u4e00\u4e2a\u5e8f\u5217\u7684\u6240\u6709\u957f\u5ea6\u4e0d\u5c0f\u4e8e \\(2\\) \u7684\u5b50\u533a\u95f4\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c \u4e58\u79ef\u7684\u6700\u5927\u503c \u3002 \u4ece\u6570\u636e\u8303\u56f4\u5c31\u80fd\u53d1\u73b0\uff0c\u4e00\u5b9a\u662f\u4e2a \\(\\text{O}(T\\times n)\\) \u7684\u7b97\u6cd5\u3002 \u6240\u4ee5\u60f3\u5230\u4e86\u5355\u8c03\u961f\u5217\u6216\u8005\u5355\u8c03\u6808\u7ef4\u62a4\u3002 \u4f46\u662f\u4ed4\u7ec6\u60f3\u60f3\uff0c\u8fd9\u4e2a\u5b50\u533a\u95f4\u7684\u957f\u5ea6\u53ea\u80fd\u4e3a \\(2\\) \u3002 \u4e3a\u4f55\uff1f \u6211\u4eec\u5c31\u5148\u4ece\u957f\u5ea6\u4e3a \\(2\\) \u7684\u533a\u95f4\u5f00\u59cb\u8003\u8651\u3002 \u90a3\u4e48\u5f88\u660e\u663e\u6743\u503c\u5c31\u662f \\(a[l] \\times a[r]\\) \u3002 \u8003\u8651\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(3\\) \u7684\u533a\u95f4\uff0c\u4e14\u91cc\u9762\u7684\u5143\u7d20\u662f \\(\\{a,b,c\\}\\) \uff08\u6309\u987a\u5e8f\uff09\u3002 \u5047\u8bbe \\(b\\) \u662f\u6700\u5927\u7684\uff0c\u90a3\u4e48\u5b83\u5c31\u4f1a\u548c \\(\\min(a,c)\\) \u7ed3\u5408\uff0c\u90a3\u4e48\u5c31\u548c\u957f\u5ea6\u4e3a \\(2\\) \u7684\u6ca1\u6709\u4efb\u4f55\u533a\u522b\u3002 \u5047\u8bbe \\(a\\) \u662f\u6700\u5927\u7684\uff0c\u90a3\u4e48\u6709\u5982\u4e0b\u4e24\u79cd\u60c5\u51b5\u3002 \\(b\\) \u6bd4 \\(c\\) \u5c0f\uff0c\u90a3\u4e48\u8fd9\u4e2a\u533a\u95f4\u7684\u6743\u503c\u4e00\u5b9a\u662f \\(a \\times b\\) \uff0c\u8f6c\u5316\u6210\u4e86\u957f\u5ea6\u4e3a \\(2\\) \u7684\u60c5\u51b5\u3002 \\(b\\) \u6bd4 \\(c\\) \u5927\uff0c\u90a3\u4e48\u8fd9\u4e2a\u533a\u95f4\u7684\u6743\u503c\u5c31\u662f \\(a \\times c\\) \uff0c\u4f46\u662f\u5f88\u660e\u663e\uff0c $a\\times b $ \u4e5f\u5c31\u662f\u957f\u5ea6\u4e3a \\(2\\) \u7684\u65f6\u5019\u7edd\u5bf9\u6bd4\u8fd9\u4e2a \\(a\\times c\\) \u66f4\u4f18\uff08\u56e0\u4e3a\u6211\u4eec\u6700\u7ec8\u8981\u6c42\u7684\u662f\u6700\u5927\u503c\uff09 \u53cd\u8fc7\u6765\u540c\u7406\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u7ed3\u8bba\u6269\u5c55\u5230 \\(n=4,5,6...\\) \u5c31\u80fd\u8bc1\u660e\u7ed3\u8bba\u6b63\u786e\u3002 \u6240\u4ee5\u73b0\u5728\u53ea\u9700\u8981\u8bfb\u5165\u7684\u65f6\u5019\u8ba9\u76f8\u90bb\u7684\u5143\u7d20\u4e24\u4e24\u76f8\u4e58\uff0c\u6c42\u4e58\u79ef\u7684\u6700\u5927\u503c\uff0c\u8fd9\u4e2a\u6700\u5927\u503c\u5c31\u662f\u7b54\u6848\u3002 B \u00b6 \u6c42\u6240\u6709\u4e00\u4e2a\u5e8f\u5217\u91cc\u6240\u6709\u7684 \\(i\\times j -k\\times(a_i \\operatorname{or} a_j)\\) \u7684 \\(\\max \\ \\ (k \\in [1,\\min(n,100)])\\) \uff08tips\uff1a\u4e00\u4e2a\u6570\u6309\u4f4d\u6216\u4e0a\u53e6\u4e00\u4e2a\u6570\uff0c\u8fd9\u4e2a\u6570\u7edd\u5bf9\u4e0d\u4f1a\u51cf\u5c0f\uff09 \u6211\u662f\u76f4\u63a5\u51ed\u611f\u89c9\u731c\u7684\u7ed3\u8bba\uff1a \\(i\\in [\\max(n-100,1),n),j=i+1\\) \u7136\u540e\u66b4\u529b\u8dd1\u3002 \u8fd9\u91cc\u6709\u4e2a\u4e25\u8c28\u7684\u505a\u6cd5\uff08\u6765\u81ealg\u9898\u89e3\u533a\uff09 C \u00b6 \u6c42\u6700\u5c0f\u7684 \\(k\\) \u6ee1\u8db3 \\(k\\not\\in \\{n \\operatorname{xor}0,n \\operatorname{xor}1...n \\operatorname{xor}m\\}\\) \\(n,m\\) \u662f \\(10^9\\) \u7ea7\u522b\u3002 \u6839\u636e\u5f02\u6216\u7684\u67d0\u4e2a\u6027\u8d28\uff1a \\(n \\operatorname{xor} k >m \\Leftrightarrow n \\operatorname{xor} k \\ge m +1\\) \u8bbe \\(x_i=(m+1)_2\\) \u7684\u7b2c \\(i\\) \u4f4d\u3002 \u8bbe \\(k_i=(k)_2\\) \u7684\u7b2c \\(i\\) \u4f4d\u3002 \u90a3\u4e48\u6709\u56db\u79cd\u60c5\u51b5\uff1a \\(x_i=k_i=1\\Rrightarrow k_i=0\\) \\(x_i=k_i=0\\Rrightarrow k_i=0\\) \\(x_i=1,k_i=0\\Rrightarrow k_i=1\\) \\(x_i=0,k_i=1\\Rrightarrow k_i=0\\) \u7a0d\u5fae\u7528\u4f4d\u8fd0\u7b97\u641e\u4e00\u4e0b\u5c31\u884c\u4e86\u3002 D \u00b6 \u6211\u76ee\u524d\u505a\u8fc7\u6700\u50bb\u903c\u7684\u6784\u9020\u3002 \u5bb9\u6613\u53d1\u73b0 aaba+k \u5f62\u5f0f\u7684\u6784\u9020\u662f\u5bf9\u7684\u3002 \u5c31\u662f\u524d\u9762\u4e00\u6bb5 a \u6bd4\u540e\u9762\u4e00\u6bb5\u591a\u4e00\u4e2a\uff0c\u7136\u540e\u5728\u4e2d\u95f4\u63d2\u4e00\u4e2a b \u5982\u679c n \u662f\u5947\u6570\u5728\u540e\u9762\u8865\u4e00\u4e2a\u975e a\\b \u7684\u5b57\u7b26\u5c31\u884c\u3002 \u6ce8\u610f\u7279\u5224 \\(\\text{length}=1\\) E \u00b6 \u5f85\u8865 Edu #112 \u00b6 Contest ID: 1555 A \u00b6 \u6709 \\(6\\) \u7247\u7684\uff08 \\(15min\\) \uff09 , \\(8\\) \u7247\u7684( \\(20min\\) ), \\(10\\) \u7247\u7684( \\(25min\\) )Pizza\u3002 \u73b0\u5728\u9700\u8981 \u81f3\u5c11 \\(n\\) \u7247 Pizza\uff0c\u95ee\u6700\u5c0f\u7684\u7b49\u5f85\u65f6\u95f4\u3002 \u4e0d\u96be\u53d1\u73b0\u6bcf\u79cd\u5e73\u5747\u4e00\u4e0b\uff0c\u90fd\u662f \\(2.5\\) \u5206\u949f\u4e00\u7247\u3002 \u7136\u540e\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u4f60\u9700\u8981\u7684\u5c0f\u4e8e\u7b49\u4e8e\u516d\u7247\uff0c\u76f4\u63a5 \\(15min\\) \u5c31\u884c\u3002 \u7136\u540e\u8003\u8651\u5927\u4e8e\u516d\u600e\u4e48\u505a\u3002 \u53d1\u73b0\u5176\u5b9e\u8fd9\u4e09\u4e2a\u6570\u53ef\u4ee5\u51d1\u51fa\u6240\u6709\u5927\u4e8e \\(6\\) \u7684\u5076\u6570\u3002 \u53cd\u5411\u601d\u7ef4\u3002 \u5982\u679c\u4f60\u505a\u8fc7\u8fd9\u9053\u9898\uff1a P3951 [NOIP2017 \u63d0\u9ad8\u7ec4] \u5c0f\u51ef\u7684\u7591\u60d1 \u90a3\u4e48\u53ef\u4ee5\u62d3\u5c55\u6210\u4e09\u5143\u7684 \u5076\u6570\u60c5\u51b5 \uff0c\u7136\u540e\u5c31\u80fd\u8bc1\u51fa\u8fd9\u4e09\u4e2a\u6570\u6700\u5927\u4e0d\u80fd\u51d1\u51fa\u7684\u5076\u6570\u662f \\(4\\) \uff0c\u90a3\u4e48\u6700\u5927\u7684\u4e0d\u80fd\u51d1\u51fa\u7684\u6570\u5c31\u662f \\(5\\) \u3002 \u7136\u540e\u5c31\u6574\u5b8c\u4e86\uff0c\u8fd9\u9898\u76f4\u63a5\u7279\u5224\u5c31\u884c\u3002 B \u00b6 \u7ed9\u4e00\u4e2a\u5bbd\u548c\u9ad8\u7ed9\u5b9a\u7684\u623f\u95f4\uff0c\u4e00\u5f20\u5df2\u7ecf\u653e\u597d\u7684\u684c\u5b50\u7684\u5bf9\u89d2\u7ebf\u9876\u70b9\u5750\u6807\u3002 \u518d\u7ed9\u5b9a\u4e00\u5f20\u957f\u5bbd\u56fa\u5b9a\u7684\u684c\u5b50\uff0c\u95ee\u539f\u6765\u7684\u684c\u5b50\u81f3\u5c11\u8981\u79fb\u52a8\u591a\u5c11\u4e2a\u5355\u4f4d\u624d\u80fd\u653e\u4e0b\u65b0\u684c\u5b50\uff08\u66fc\u54c8\u987f\u8ddd\u79bb\uff09\u3002 \u65b0\u7684\u684c\u5b50\u8981\u6700\u4f18\uff0c\u5c31\u53ea\u80fd\u653e\u5728\u56db\u4e2a\u89d2\u4e0a\uff0c\u53ef\u4ee5\u56db\u79cd\u60c5\u51b5\u90fd\u679a\u4e3e\u3002 \u4e5f\u53ef\u4ee5\u7279\u5224\u8d2a\u5fc3\u4e00\u4e0b\uff0c\u6bd4\u8f83\u7b80\u5355\u3002 C \u00b6 Alice \u548c Bob \u5728\u4e00\u4e2a \\(2 \\times m\\) \u7684\u77e9\u5f62\u4e0a\u73a9\u6e38\u620f\uff0c\u77e9\u5f62\u7684\u6bcf\u4e00\u4e2a\u683c\u5b50\u4e0a\u90fd\u6709\u4e00\u4e2a\u6570 $ a_{i,j} $ Alice \u548c Bob \u4e00\u5f00\u59cb\u7ad9\u5728\u5de6\u4e0a\u89d2\u683c\u5b50 \\((1,1)\\) \u4e0a\uff0c\u6bcf\u4e2a\u4eba\u90fd\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u79fb\u52a8\uff0c\u76f4\u5230\u79fb\u52a8\u5230\u7ec8\u70b9 \\((2,m)\\) \u4e0a\uff0c\u7ecf\u8fc7\u4e00\u4e2a\u683c\u5b50\u65f6\u4f1a\u53d6\u8d70\u683c\u5b50\u4e0a\u7684\u6570\uff0c\u8d62\u5f97\u76f8\u5e94\u7684\u5f97\u5206 Alice \u9996\u5148\u5f00\u59cb\u79fb\u52a8\uff0cBob \u4e0d\u80fd\u53d6\u8d70 Alice \u5df2\u7ecf\u53d6\u8d70\u7684\u6570 Alice \u671f\u671b\u6700\u5c0f\u5316 Bob \u7684\u5f97\u5206\uff0cBob \u5219\u5e0c\u671b\u6700\u5927\u5316\u81ea\u5df1\u7684\u5f97\u5206 \u6c42Bob \u7684\u6700\u5927\u5f97\u5206\u3002 \u8bfb\u4e00\u4e0b\u9898\u53d1\u73b0\uff0c\u56e0\u4e3a\u53ea\u6709\u4e24\u884c\u800c\u4e14\u53ea\u80fd\u5411\u53f3\u6216\u8005\u5411\u4e0b\u3002 \u4e5f\u5c31\u662f\u8bf4\u4ed6\u4eec\u90fd\u53ea\u80fd\u5411\u4e0b\u4e00\u6b21\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u5165\u624b\u70b9\u3002 \u6ce8\u610f\u5230Alice\u8d70\u8fc7\u4e4b\u540e\u6570\u5b57\u5c31\u6ca1\u4e86\uff0c\u800c\u4e14Alice\u5148\u624b\uff0c\u6240\u4ee5Bob\u4e00\u5b9a\u8981\u5c3d\u91cf\u907f\u5f00Alice\u8d70\u8fc7\u7684\u8def\u3002 \u6bd4\u5982\u4e0a\u56fe\uff0c\u7c89\u8272\u90e8\u5206\u662fAlice\u8d70\u8fc7\u7684\u8def\uff0c\u90a3\u4e48Bob\u80fd\u53d6\u5230\u6570\u5b57\u7684\u53ea\u6709 \\(R1\\) \u6216 \\(R2\\) \u4e24\u90e8\u5206\u3002 \u4e5f\u5c31\u662f\u4ed6\u4e0d\u662f\u4ece\u4e0a\u9762\u5148\u8d70\u901a\u518d\u4e0b\u53bb\u5c31\u662f\u5148\u4e0b\u53bb\u7136\u540e\u8d70\u901a\u3002 \u90a3\u4e48\u6211\u4eec\u679a\u4e3eAlice\u4e0b\u53bb\u7684\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u5229\u7528\u524d\u7f00\u548c\u7ef4\u62a4\u4e00\u4e0b\u6c42\u4e2a \\(\\max\\) \u5373\u53ef\u3002 D E F \u00b6 \u5f85\u8865 Codeforces #736(div1+2 \u00b6 Contest ID: div1 1548,div2 1549 \u6211\u4f9d\u65e7div2 ABCD\u2026\u2026 \u5176\u4ed6\u7684\u76ee\u524d\u8fd8\u4e0d\u4f1a div2A \u00b6 \u50bb\u903c\u9001\u5206\u9898\u3002 \u8ba9\u4f60\u627e\u4e00\u5bf9 \\((a,b)\\) \u6ee1\u8db3 \\(a \\operatorname{mod} P = b \\operatorname{mod} P\\) \\(P\\) \u662f\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e \\(5\\) \u7684\u8d28\u6570\u3002 \u6240\u4ee5 \\(P\\) \u4e0d\u53ef\u80fd\u662f\u5076\u6570\uff0c\u4e5f\u5c31\u662f\u8bf4 \\(P-1\\) \u4e00\u5b9a\u662f\u5076\u6570\u3002 \u90a3\u4e48\u76f4\u63a5\u627e \\(P-1\\) \u7684\u968f\u4fbf\u4e24\u4e2a\u5927\u4e8e\u7b49\u4e8e\u4e8c\u7684\u56e0\u5b50\u3002 \u4e3a\u4e86\u65b9\u4fbf\u76f4\u63a5\u8f93\u51fa \\(2\\) \u548c \\((p-1)/2\\) \u5373\u53ef\u3002 div2B \u00b6 \u8003\u8651\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\u5bf9\u4e8e\u5728\u7b2c \\(i\\) \u5217\u7684\u5352\u8981\u60f3\u5230\u8fbe\u5bf9\u9762\u4e00\u5b9a\u6ee1\u8db3\u4e00\u4e0b\u4e24\u4e2a\u6761\u4ef6\uff1a \u7b2c\u4e00\u6392\u7684\u7b2c \\(i\\) \u5217\u6ca1\u6709\u654c\u5175\uff0c\u76f4\u63a5\u8d70\u8fc7\u53bb\u5373\u53ef\u3002 \u7b2c\u4e00\u6392\u7684\u7b2c \\(i-1\\) \u6216 \\(i+1\\) \u5217\u6709\u654c\u5175\u4e14\u4e4b\u524d\u6ca1\u6709\u6211\u65b9\u5175\u53bb\u5403\u3002 \u7136\u540e\u7a0d\u5fae\u6a21\u62df\u4e00\u4e0b\u5c31\u884c\u4e86\u3002 div1A \u00b6 \u751a\u81f3\u6bd4 div2A\u8fd8SB\u7684zz\u9898\u3002 \u770b\u8d77\u6765\u662f\u4ec0\u4e48\u9ad8\u5927\u4e0a\u7684\u56fe\u8bba\uff0c\u7136\u800c\u76f4\u63a5\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7684\u51fa\u5ea6\u5c31\u5b8c\u4e86\u3002 \u7ec6\u8282\u7a0d\u5fae\u6709\u70b9\u5361\u4eba\uff0c\u6ce8\u610f\u4e00\u4e0b\u5c31\u884c\u3002 div1B \uff08Great\uff09 \u00b6 \u554a\u8fd9\u9053\u9898\u6709\u70b9\u6bd2\u7624\uff0c\u6211\u8c03\u4e86\u4e00\u4e2a\u5c0f\u65f6\u5de6\u53f3\uff08\u8981\u4e0d\u662f\u6bd4\u8d5b\u5ef6\u65f610min\u6211\u771f\u7684\u505a\u4e0d\u8d77\uff09\u3002 \u7ed9\u4e00\u4e2a\u5e8f\u5217 \\(a[]\\) \u7684\u533a\u95f4 \\(a_i,a_{i+1},...a_j\\) \u3002 \u8fd9\u4e2a\u533a\u95f4\u662f\u597d\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u4e00\u4e2a \\(\\ge 2\\) \u7684 \\(m\\) \uff0c\u4f7f \\(a_i \\operatorname{mod} m=a_{i+1} \\operatorname{mod} m =...=a_j \\operatorname{mod} m\\) \u95ee\u7ed9\u5b9a\u5e8f\u5217 \\(a[]\\) \u7684\u6700\u5927\u597d\u533a\u95f4\u7684\u5927\u5c0f\u3002 \u8bf4\u5b9e\u8bdd\u2026\u2026\u6211\u662f\u771f\u7684\u4e0d\u6e05\u695a\u8fd9\u4e2a\u795e\u4ed9\u601d\u8def\u600e\u4e48\u6765\u7684\u3002 \u5bf9\u4e8e \\(\\forall x \\in(i,j]\\) \uff0c\u4ee4 \\(a[x]\\) \u51cf\u53bb \\(a[x-1]\\) \uff08\u4e4b\u540e\u8981\u53d6\u7edd\u5bf9\u503c\uff09 \u7136\u540e\u4f60\u4f1a\u53d1\u73b0\u51cf\u4e86\u4e4b\u540e\uff0c\u5047\u8bbe \\(a[x] \\operatorname{mod} m=k\\) \u3002 \u90a3\u4e48 \\(k\\) \u5c31\u4f1a\u88ab\u6d88\u6389\u4e86\uff01\uff01\uff01 \u4e5f\u5c31\u662f \\(|a[x]-a[x-1]| \\operatorname{mod} m =0\\) \uff01\uff01\uff01 \u90a3\u4e48\u53cd\u8fc7\u6765\uff0c\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u4e00\u4e2a\u6700\u957f\u7684 \\(\\gcd\\) \u76f8\u540c\uff08\u4e14 \\(\\gcd>1\\) \uff09\u7684\u533a\u95f4\u5c31\u884c\u4e86\uff01\uff01\uff01 \u7136\u540e\u53d1\u73b0 \\(\\gcd\\) \u8fd9\u73a9\u610f\u513f\u4e0d\u592a\u597d\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff08\u5e38\u6570\u592a\u5927\u4e86\uff09\uff0c\u5206\u5757\u7684 \\(\\text{O}(n\\sqrt{n})\\) \u5f88\u5bb9\u6613\u672c\u9898\u7684\u67d0\u4e9b\u795e\u4ed9\u6570\u636e\u5361\u6b7b\u3002 \u7136\u540e\u6211\u4eec\u5c31\u60f3\u5230\u4e86\u597d\u73a9\u7684 \\(\\text{ST}\\) \u8868\uff01\uff01\uff01\uff01 \u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u5229\u7528 \\(\\text{ST}\\) \u8868\u6765\u7ef4\u62a4\u533a\u95f4\u7684 \\(\\gcd\\) \u3002 \u4f46\u662f\u8fd9\u91cc\u8981\u6c42\u7684\u662f\u6700\u957f\u7684\u533a\u95f4\u957f\u5ea6\uff0c\u518d\u5957\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u5c31\u4f1a\u70b8\u3002 \u90a3\u4e48\u5c31\u638f\u51fa \\(\\text{O}(n\\log n)\\) \u7684\u4e8c\u5206\u5427\u3002 \u6240\u4ee5\u5148\u5dee\u5206\u53d6\u4e2a\u7edd\u5bf9\u503c\u518d\u9884\u5904\u7406\u51fa \\(\\log_2\\) \u3002 \u7136\u540e\u5229\u7528 \\(\\text{ST}\\) \u8868\u7ef4\u62a4 \\(\\gcd\\) \u3002 \u4e4b\u540e\u679a\u4e3e\u533a\u95f4\u5de6\u7aef\u70b9\uff0c\u540c\u65f6\u4e8c\u5206\u533a\u95f4\u53f3\u7aef\u70b9\u3002 \u5e76\u7528\u7ef4\u62a4\u7684\u4fe1\u606f\u8fdb\u884ccheck\u5373\u53ef\u3002 \u5e94\u8be5\u662f\u6211\u6700\u8fd1\u505a\u7684\u6700\u6709\u610f\u601d\u7684\u9898\u4e86\u3002 \u6b64\u5904\u4e8c\u5206\u5199\u6cd5\u76f8\u8f83\u4e8e\u6211\u5e73\u65f6\u7684\u5199\u6cd5\u7a0d\u5fae\u6709\u70b9\u602a\uff0c\u4e0d\u8fc7\u4e5f\u662f\u5bf9\u7684\u3002 \u8fd9\u79cd\u5199\u6cd5\u662f\u4e0d\u4f1a\u53d6\u5230 \\(l\\) \u7684\uff0c\u65b9\u4fbf\u672c\u9898\u66f4\u65b0\u7b54\u6848\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 #include <bits/stdc++.h> using namespace std ; const int si = 2e5 + 10 ; #define int long long int st [ si ][ 20 ]; int a [ si ], logt [ si ]; int T , n , res = 0 ; int gcd ( int a , int b ){ if ( ! b ) return a ; return gcd ( b , a % b ); } int check ( int l , int r ){ return gcd ( st [ l ][ logt [ r - l + 1 ]], st [ r - ( 1 << logt [ r - l + 1 ]) + 1 ][ logt [ r - l + 1 ]]); } void STprework (){ for ( register int i = 2 ; i <= n ; ++ i ){ logt [ i ] = logt [ i >> 1 ] + 1 ; } for ( register int i = 1 ; i <= n ; ++ i ){ int o = abs ( a [ i ] - a [ i + 1 ]); st [ i ][ 0 ] = o ; } for ( register int i = 1 ; i <= logt [ n ]; ++ i ){ int toj = ( n + 1 ) - ( 1 << i ); for ( register int j = 1 ; j <= toj ; ++ j ){ st [ j ][ i ] = gcd ( st [ j ][ i -1 ], st [ j + ( 1 << ( i -1 ))][ i -1 ]); } } } signed main (){ scanf ( \"%lld\" , & T ); while ( T -- ){ scanf ( \"%lld\" , & n ); for ( register int i = 1 ; i <= n ; ++ i ){ scanf ( \"%lld\" , & a [ i ]); } n -= 1 ; STprework (); res = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ if ( st [ i ][ 0 ] == 1 ) continue ; int l = i , r = n ; while ( l < r ){ int mid = ( l + r + 1 ) >> 1 ; if ( check ( i , mid ) == 1 ) r = mid -1 ; else l = mid ; } res = max ( res , l - i + 1 ); } res ++ ; printf ( \"%lld \\n \" , res ); } return 0 ; } Codeforces #737(div2) \u00b6 Contest ID: 1557 \u5bf9\u8fd9\u6b21\u6bd4\u8d5b\u7684\u51fa\u9898\u4eba\u975e\u5e38\u65e0\u8bed\u3002 \u6ca1\u6709\u6c34\u5e73\u5c31\u522b\u6765\u51fa\u9898\u597d\u4e0d\u597d\uff1f \u60a8\u53ea\u4f1a\u62ff\u7740\u677f\u5b50\uff0c\u5957\u8def\u9898\u6539\u4e00\u70b9\u70b9\uff0c\u52a0\u52a0\u7801\u91cf\uff0c\u8f93\u51fa\u65b9\u6848\u6765\u6076\u5fc3\u4eba\u5417\uff1f A\u7684\u8d2a\u5fc3\uff0cB\u7684\u79bb\u6563\uff0cC\u7684\u7ec4\u5408\u6570\uff0cD\u7684\u7ebf\u6bb5\u6811\u4f18\u5316DP\uff0c\u90fd\u662f\u8001trick\uff0cE\u51fa\u4e2a\u4ea4\u4e92\uff0c\u70c2\u5230\u5927\u90e8\u5206\u4ea4\u7684\u968f\u673a\u7b97\u6cd5\u90fd\u80fd\u8fc7st\u3002 \u6211\u6ca1AK\uff0c\u53ea\u662f\u60f3\u55b7\u4e00\u55b7\u51fa\u9898\u4eba\uff0c\u53cd\u6b63\u8fd9\u6bd4\u8d5b\u98ce\u8bc4\u633a\u5dee\u7684\u3002 \u4e0d\u5199\u4e86\uff0c\u6d6a\u8d39\u65f6\u95f4\uff0c\u671f\u5f85 #738 \u80fd\u6709\u8d28\u91cf\u4e00\u70b9\u3002 Atcoder Beginning Contest 214 \u00b6 Contest ID: abc_214 \u56e0\u4e3aAT\u6bd4\u8d5b\u6ca1\u6709\u90a3\u4e48\u9891\u7e41\uff0c\u6240\u4ee5AT\u7684\u9898\u89e3\u4e5f\u90fd\u6254\u5230Codeforces Solutions \u6765\u4e86\u3002 \u660e\u660e\u53ef\u4ee5\u5199\u51faEF\u4f46\u662fE\u50bb\u903c\u4e86\u3002 \u6211\u4e0d\u914d 8kyu\u3002 A B C \u00b6 A\u662f\u8bed\u6cd5\u9898\uff0cB\u662f\u66b4\u529b\u679a\u4e3e\uff0cC\u662f\u65ad\u73af\u6210\u94fe\u6a21\u62df D & CF915F \u00b6 \u8fd9\u662f\u4e2a\u7ecf\u5178 trick\uff0c\u4f60\u4f1a\u53d1\u73b0\u8fd9\u4e24\u9898\u7adf\u7136\u548c\u672c\u6b21D\u9898\u60ca\u4eba\u7684\u76f8\u4f3c\uff1a P5351 Ruri Loves Maschera \uff08\u8fd9\u9898\u5b9e\u9645\u4e0a\u662f\u70b9\u5206\u6cbb+BIT\uff0c\u548c\u8fd9\u4e2atrick\u6ca1\u592a\u5927\u5173\u7cfb\uff09 CF915F Imbalance Value of a Tree \u5168\u90e8\u90fd\u662f \\(u,v\\) \u4e4b\u95f4\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u4e00\u4e9b\u4fe1\u606f\u7edf\u8ba1\u3002 \u7279\u522b\u662f CF915F\uff0c\u4f60\u60ca\u5947\u7684\u53d1\u73b0\u4e00\u4e2a \\(\\min,\\max\\) \u505a\u51cf\u6cd5\u540e\u6c42\u548c\uff0c\u4e00\u4e2a\u76f4\u63a5\u5c31\u662f\u5bf9 \\(\\max\\) \u6c42\u548c\u3002 \u6240\u4ee5\u8fd9\u4e24\u9053\u9898\uff0c \u5b8c\u5168\u4e00\u81f4 \u3002 \u6b64 Trick \u7684\u505a\u6cd5\u5c31\u662f\u5229\u7528\u5e76\u67e5\u96c6\u6309\u987a\u5e8f\u5408\u5e76\u7136\u540e\u8ba1\u7b97\u8d21\u732e\u3002 \u8fd9\u9898\u5c31\u662f\u6309\u8fb9\u6743\u503c\u4ece\u5c0f\u5230\u5927\u5408\u5e76\u8fde\u901a\u5757\u7136\u540e\u8ba1\u7b97\u8d21\u732e\u3002 \u9996\u5148\u8003\u8651\u7b80\u5355\u8def\u5f84\u4e0a\u7684 \\(w_{\\max}\\) \u6211\u4eec\u5148\u5bf9\u4e8e\u6240\u6709\u4ee3\u8868\u8fb9\u7684\u4e09\u5143\u7ec4 \\((u,v,w)\\) \u6309\u7167 \\(w\\) \u4ece\u5c0f\u5230\u5927 \u6392\u5e8f\uff0c\u7136\u540e\u4f9d\u6b21\u626b\u63cf\u6bcf\u4e00\u6761\u8fb9\u3002 \u7136\u540e\u4f7f\u7528\u5e76\u67e5\u96c6\u8fdb\u884c\u7ef4\u62a4\u8fde\u901a\u5757\uff0c\u6bcf\u4e00\u6b21\u626b\u63cf\u90fd\u628a \\(u,v\\) \u5408\u5e76\u8d77\u6765\u3002 \u56e0\u4e3a\u73b0\u5728\u6240\u6709\u4e09\u5143\u7ec4\u6309 \\(w\\) \u5355\u8c03\u4e0d\u4e0b\u964d\uff0c\u4e5f\u5c31\u662f\u8bf4\u4f60\u5bf9\u4e8e\u5f53\u524d\u626b\u63cf\u5230\u7684 \\(w\\) \uff0c\u4ed6\u80fd\u505a\u51fa\u8d21\u732e\u7684\u8def\u5f84\u53ea\u6709 \\(siz[\\text{root}(u)]\\times siz[\\text{root}(v)]\\) \u8fd9\u4e48\u591a\u4e2a\u3002 \u4e3a\u5565\uff0c\u4f60\u770b\u540e\u9762\u7684\u6ca1\u6709\u88ab\u52a0\u8fdb\u6765\u7684\u4e09\u5143\u7ec4\uff0c\u6bcf\u4e00\u4e2a\u7684 \\(w\\) \u90fd\u6bd4\u4f60\u5927\uff0c\u90a3\u540e\u9762\u7684\u60c5\u51b5\u4f60\u80af\u5b9a\u6ca1\u6cd5\u505a\u51fa\u8d21\u732e\u3002 \u90a3\u4e48\uff0c\u5728\u6bcf\u4e00\u6b21\u5408\u5e76\u7684\u65f6\u5019\u8ba1\u7b97\u8d21\u732e \\(w \\times siz[\\text{root}(u)]\\times siz[\\text{root}(v)]\\) \u5373\u53ef\u3002 \u7136\u540e CF915F \u5c31\u5b8c\u5168\u4e00\u6837\uff0c\u70b9\u5316\u8fb9\u76f4\u63a5\u6c42\u4e24\u904d\uff0c\u4e00\u6b21\u5347\u5e8f\u4e00\u6b21\u964d\u5e8f\u6392\u5e8f\uff0c\u7136\u540e\u4e24\u4e2a\u603b\u8d21\u732e\u505a\u51cf\u6cd5\u5373\u53ef\u3002 \u90a3\u4e00\u9898\u552f\u4e00\u7684\u65b0 Trick \u5c31\u662f\u5bf9\u4e8e\u8dd1 \\(\\min\\) \u7684 \\(\\texttt{dsu}\\) \u7684\u65f6\u5019\uff0c\u5bf9\u4e8e \\((u,v)\\) \u4e24\u70b9\u4e4b\u95f4\u7684\u8fb9\u6743\u662f \\(\\min(val[u],val[v])\\) \u3002 \\(\\max\\) \u540c\u7406\u5373\u53ef\u3002 E F G H \u00b6 \u5f85\u8865 Codeforces #738 \u00b6 Contest ID: 1559 CN round \uff0c\u4f53\u9a8c\u8fd8\u53ef\u4ee5\u3002 \u53ef\u80fd\u662f\u4eca\u5e74\u7684\u6700\u540e\u4e00\u6b21\u5b9e\u5730CF\u4e86\u3001 A \u00b6 \u7a0d\u5fae\u63a8\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\uff0c\u628a\u6574\u4e2a\u5e8f\u5217\u5168\u90e8 \\(\\&\\) \u8d77\u6765\u53ef\u4ee5\u6700\u4f18\u3002 \u7136\u540e\u968f\u4fbf\u6574\u4e00\u6574\u5c31\u53ef\u4ee5\u53d1\u73b0\u4e00\u5b9a\u80fd\u6784\u9020\u51fa\u8fd9\u79cd\u65b9\u6848\u3002 \uff08\u4e4b\u540e\u5565\u65f6\u95f4\u4ed4\u7ec6\u5199\u4e0b\u5427\uff09 B \u00b6 \u611f\u89c9\u662f\u4e2a\u5f88\u719f\u6089\u7684trick\uff1f \u5c31\u662f\u7ed9\u4f60\u4e00\u4e2a\u5df2\u7ecf\u586b\u4e0a\u4e24\u79cd\u5b57\u7b26 R,B \u7684\u5b57\u7b26\u4e32\uff08\u6709\u4e9b\u5730\u65b9\u7a7a\u7740\uff09\u3002 \u95ee\u4f60\u600e\u4e48\u6837\u8865\u5168\u5269\u4e0b\u7684\u7a7a\u4f59\u80fd\u591f\u4f7f\u76f8\u90bb\u4e24\u4e2a\u5b57\u7b26\u76f8\u7b49\u7684\u60c5\u51b5\u6700\u5c11\u3002 \u4f60\u53ea\u80fd\u586b R,B \u4e24\u4e2a\u5b57\u7b26\u3002 \u5c31\u662f\u8d2a\u5fc3\u4e00\u4e0b\uff0c\u56e0\u4e3a\u9700\u8981\u5c3d\u91cf\u7684\u51fa\u73b0 BRBRB \u8fd9\u79cd\u4ea4\u53c9\u7684\u5f62\u5f0f\u3002 \u6240\u4ee5\u968f\u4fbf\u5224\u4e00\u4e0b\u5c31\u884c\uff0c\u7ec6\u8282\u89c1\u4ee3\u7801\u3002 \u6ce8\u610f\u8981\u5199\u6e05\u695a\u5168\u90e8\u662f ? \u7684\u60c5\u51b5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 while ( T -- ){ scanf ( \"%lld\" , & n ); cin >> s ; s = ' ' + s ; int i = 0 , k = 0 ; for ( i = 1 ; i <= n ; ++ i ) if ( s [ i ] != '?' ){ k = 1 ; break ;} if ( k ){ for ( register int j = i -1 ; j >= 1 ; -- j ){ if ( s [ j + 1 ] == 'R' ) s [ j ] = 'B' ; else s [ j ] = 'R' ; } } else s [ 1 ] = 'B' ; for ( i = 1 ; i <= n ; ++ i ){ if ( s [ i ] == '?' ){ if ( s [ i -1 ] == 'R' ) s [ i ] = 'B' ; else s [ i ] = 'R' ; } } //\u628a\u6ca1\u6709\u8865\u5168\u7684\u5730\u65b9\u8865\u5168 for ( i = 1 ; i <= n ; ++ i ) cout << s [ i ]; puts ( \"\" ); } C \u00b6 \u6bd4\u8f83\u7b80\u5355\u7684\u6784\u9020\uff0c\u76f4\u63a5\u653e\u4ee3\u7801\uff08\u538b\u4e86\u884c\uff0c\u4e0d\u662f\u6211\u7684\u6b63\u5e38\u9a6c\u8702\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 while ( T -- ){ scanf ( \"%lld\" , & n ); for ( register int i = 1 ; i <= n ; ++ i ) scanf ( \"%lld\" , & a [ i ]); if ( a [ 1 ] == 1 ){ printf ( \"%lld \" , n + 1 ); for ( register int i = 1 ; i <= n ; ++ i ) printf ( \"%lld \" , i ); puts ( \"\" ); continue ; } if ( a [ n ] == 0 ){ for ( register int i = 1 ; i <= n ; ++ i ) printf ( \"%lld \" , i ); printf ( \"%lld \" , n + 1 ); puts ( \"\" ); continue ; } for ( register int i = 1 ; i <= n ; ++ i ){ if ( a [ i ] == 0 && a [ i + 1 ] == 1 ){ for ( register int j = 1 ; j <= i ; ++ j ) cout << j << \" \" ; cout << n + 1 << \" \" ; for ( register int j = i + 1 ; j <= n ; ++ j ) cout << j << \" \" ; break ; } } puts ( \"\" ); continue ; } D1 \u00b6 \u7ed9\u4f60\u4e24\u4e2a\u72ec\u7acb\u7684\u68ee\u6797\uff0c\u73b0\u5728\u6bcf\u4e2a\u68ee\u6797\u90fd\u6709\u4e00\u4e9b\u8fb9\u3002 \u7136\u540e\u5982\u679c\u4f60\u8981\u6dfb\u52a0\u4e00\u6761\u8fb9 \\((u,v)\\) \uff0c\u90a3\u4e48\u4e24\u4e2a\u68ee\u6797\u7684 \\((u,v)\\) \u8fd9\u6761\u8fb9\u90fd\u8981\u52a0\u4e0a\u3002 \u95ee\u5728\u6ee1\u8db3\u8fd9\u4e24\u4e2a\u68ee\u6797\u4ecd\u65e7\u662f\u68ee\u6797\u7684\u6761\u4ef6\u4e0b\uff0c\u6700\u591a\u53ef\u4ee5\u52a0\u591a\u5c11\u6761\u8fb9\u3002 \\(n\\le1000\\) \u3002 \u50bb\u903c\u9898\uff0c\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u5757\u7136\u540e\u66b4\u529b\u679a\u4e3e\u6240\u6709\u6ca1\u6709\u8054\u901a\u7684\u70b9\u5bf9\uff0c\u52a0\u8fb9\u5373\u53ef\u3002 D2 \u00b6 \u540c D1 \uff0c \\(n\\le 10^5\\) \u672c\u6b21\u6bd4\u8d5b\u6700\u96be\u7684\u9898\u3002 \u8d5b\u65f6\u6ca1\u505a\u51fa\u6765\uff0c\u8d5b\u540e\u770b\u89c1\u4e00\u4e2a\u795e\u5947\u7684\u505a\u6cd5\uff1a \u5148\u8fde \\(1\\) \uff0c\u7136\u540e\u5bf9\u4e24\u4e2a\u68ee\u6797\u679a\u4e3e\u6bcf\u4e2a\u70b9\u770b\u8ddf \\(1\\) \u6709\u6ca1\u6709\u8fde\uff0c\u5728\u8fd9\u91cc\u9762\u627e\u70b9\u8fde\u7ebf\u3002 \u611f\u89c9\u6709\u70b9\u602a\u4f46\u662f\u80fd\u8fc7\uff08 E \u00b6 \\(\\gcd\\) +\u5927\u529b\u5bb9\u65a5+DP \\(\\because\\gcd(a_1,a_2...a_n)=1 \\Leftrightarrow\\sum_{d|\\gcd(a_1,a_2...a_n)}\\mu(d)\\) . \\(\\therefore\\) \u8ba1\u7b97\u5bf9\u4e8e\u6bcf\u4e2a \\(d\\) , \\(\\mu(d)\\) \u88ab\u7b97\u4e86\u591a\u5c11\u6b21\uff0c\u8fd9\u4e2a\u76f4\u63a5 \\(\\texttt{dp}\\) \u5373\u53ef\u3002 \u4e5f\u5c31\u662f\u679a\u4e3e \\(d\\) \uff0c\u7136\u540e\u8981\u8ba1\u7b97\u6709\u591a\u5c11\u4e2a\u6570\u5217\u6ee1\u8db3 \\(d|a_i\\) \u4e14 \\(\\sum_{i=1}^n a_i\\le m\\) \u601d\u8def\u6765\u81ea lgsdwn(Orz lgd) \u548c Silver187 \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 #include <bits/stdc++.h> using namespace std ; #define int long long const int si = 101000 ; const int mod = 998244353 ; int n , m ; int prime [ si ], mu [ si ]; bool vis [ si ]; void Mobius ( int n ){ memset ( vis , 0 , sizeof ( vis )); mu [ 1 ] = 1 , prime [ 0 ] = 0 ; for ( register int i = 2 ; i <= n ; i ++ ){ if ( ! vis [ i ]) prime [ ++ prime [ 0 ]] = i , mu [ i ] = -1 ; for ( register int j = 1 ; j <= prime [ 0 ] && i <= n / prime [ j ]; j ++ ){ vis [ i * prime [ j ]] = 1 ; if ( i % prime [ j ] == 0 ){ mu [ i * prime [ j ]] = 0 ; break ; } mu [ i * prime [ j ]] =- mu [ i ]; } } } int a [ si ], b [ si ]; int l [ si ], r [ si ]; int f [ si ], s [ si ]; signed main (){ scanf ( \"%lld%lld\" , & n , & m ); Mobius ( m ); for ( register int i = 1 ; i <= n ; ++ i ){ scanf ( \"%lld%lld\" , & a [ i ], & b [ i ]); } int res = 0 ; for ( register int d = 1 ; d <= m ; ++ d ){ if ( mu [ d ]){ for ( register int i = 1 ; i <= n ; ++ i ){ l [ i ] = ( a [ i ] + d -1 ) / d , r [ i ] = b [ i ] / d ; } int qwq = m / d ; for ( register int i = 0 ; i <= qwq ; ++ i ){ s [ i ] = 1 ; } for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= qwq ; ++ j ){ f [ j ] = 0 ; } for ( register int j = l [ i ]; j <= qwq ; ++ j ){ f [ j ] = s [ j - l [ i ]]; if ( j - r [ i ] -1 >= 0 ) f [ j ] = ( f [ j ] + mod - s [ j - r [ i ] -1 ]) % mod ; } s [ 0 ] = 0 ; for ( register int j = 1 ; j <= qwq ; ++ j ){ s [ j ] = ( s [ j -1 ] + f [ j ]) % mod ; } } res = ( res + mu [ d ] * s [ qwq ]) % mod ; } } res = ( res + mod ) % mod ; printf ( \"%lld \\n \" , res ); return 0 ; } Codeforces # 739\uff08div3\uff09 \u00b6 Contest ID: 1560 \u6c34\uff0c\u592a\u6c34\u4e86\uff08\uff09 FST\u7fa4\u7684\u5176\u4e2d\u516b\u4f4d\u7fa4\u53cb\u4e00\u8d77\u6574\u4e86\u4e2a\u6d3b\uff0c\u516c\u7528\u4e00\u4e2a\u795e\u5947\u7684\u540d\u5b57\u7684\u8d26\u53f7\u4e00\u8d77\u51b2rk1\uff0c\uff08\u5f53\u7136\u56e0\u4e3aF1\u7684\u7f5a\u65f6\u6211\u4eec\u662frk3\uff09 1 Demoe,\u5cf0,tjx,tearing,lgd,bmy,monsters \u6211\u5565\u4e5f\u6ca1\u8d21\u732e\uff08\u4ed6\u4eec\u5207\u9898\u592a\u5feb\u4e86\uff09 \u4f46\u662f\u56e0\u4e3a\u5206\u914d\u7684\u539f\u56e0\u6ca1\u670940min\u4ee5\u5185AK\uff08\u545c\u545c\uff09 \u6211\u5c31\u53ea\u80e1\u4e86\u4e00\u4e2aF1\u548cE\uff0c\u7136\u540eE\u8fd8\u5047\u4e86\u3002 \u4e8e\u662f\u540e\u9762\u770b\u5230\u516c\u7528\u53f7AK\u4e86\u4e4b\u540e\u53bb\u5f00A\u9898\u505a\u3002 \u540e\u9762\u5199\u5230 D \u9898\u5c31\u6709\u70b9\u56f0\u4e86\uff0c\u61d2\u5f97\u5199EF12\u4e86\uff0c\uff08\u53cd\u6b63F1F2\u80e1\u51fa\u6765\u4e86\u4e4b\u540e\u518d\u8865\uff0cE\u80e1\u4e0d\u51fa\u6765\u770b\u770b\u9898\u89e3\u628a\uff09 A \u00b6 \u4e00\u4e2a\u6b63\u6574\u6570\u6570\u5217\uff0c\u4ece \\(1\\) \u5f00\u59cb\uff0c\u4e00\u76f4\u5f80\u540e\u4e00\u4e2a\u4e00\u4e2a\u7684\u589e\u52a0 \\(1\\) \uff0c\u4f46\u662f\u6ca1\u6709\u4e09\u7684\u500d\u6570\u548c\u4ee5\u4e09\u7ed3\u5c3e\u7684\u6570\u3002 \u7136\u540e\u95ee\u6570\u5217\u7b2c \\(k\\) \u9879 \\(1\\le k \\le 1000\\) \u3002 \u8bed\u6cd5\u9898\uff1a\u63d0\u524d for \u4e00\u904d\uff0c\u6253\u597d\u4e00\u5343\u9879\u7136\u540e\u76f4\u63a5\u8f93\u51fa\uff0c\u5b8c\u4e86\u3002 \u4e0d\u8fc7\u6628\u665a\u9b54\u6014\u4e86\uff0c\u5c45\u7136\u5fd8\u8bb0\u4e86 % \u7684\u5b58\u5728\uff0c\u76f4\u63a5\u5199\u4e86\u4e00\u4e2a\uff1a 1 2 3 inline int mod ( int x , int p ){ return x < 0 ? ( x + p ) - ((( x + p ) / p ) * p ) : x - (( x / p ) * p ); } \u96be\u602a\u6ca1\u6709\u4e00\u5206\u949fA\u3002 B \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u73af\uff0c\u73af\u4e0a\u4ece \\(1 \\sim n\\) \u4f9d\u6b21\u7ad9\u4e86 \\(n\\) \u4e2a\u4eba\uff08 \\(n\\) \u662f\u5076\u6570\uff09\u3002 \u7136\u540e\u5047\u8bbe\u6709\u4e24\u4e2a\u4eba \\(x,y\\) \u9762\u5bf9\u7740\uff0c\u90a3\u4e48 \\(x,y\\) \u7684\u8fde\u7ebf\u5c31\u4e00\u5b9a\u8fc7\u5706\u5fc3\u3002 \u73b0\u5728\u7ed9\u4f60\u4e00\u4e2a\u9762\u5bf9\u7740\u7684\u4e24\u4e2a\u4eba\u7684\u5e8f\u53f7 \\(a,b\\) \uff0c\u518d\u53e6\u5916\u7ed9\u5b9a\u4e00\u4e2a \\(c\\) \uff0c\u6c42 \\(c\\) \u9762\u5bf9\u7684\u4eba\u7684\u5e8f\u53f7\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u73af\uff0c\u8f93\u51fa \\(-1\\) \u3002 \u53d1\u73b0\u4e24\u4e2a\u76f8\u5bf9\u70b9\u5e8f\u53f7\u4e4b\u5dee\u7684\u7edd\u5bf9\u503c\u7684\u4e24\u500d\u5c31\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u73af\u7684 \\(n\\) \uff0c\u7136\u540e\u968f\u4fbf\u5224\u4e00\u4e0b\u5c31\u884c\u3002 1 2 3 4 5 int R = abs ( a - b ), n = R << 1 ; if ( c > n || ( c + R > n && c <= R ) || c + R == a || c + R == b || c - R == a || c - R == b || b > n || a > n ){ puts ( \"-1\" ); continue ; } else printf ( \"%lld \\n \" , c <= R ? c + R : c - R ); C \u00b6 UPD\uff1a\u8349\uff0c\u8fd9\u9898\u6211\u5b9e\u9645\u4e0aFST\u4e86\uff08\u4e45\u8fdd\u4e86\uff09 \u56e0\u4e3a\u6211\u662funofficial\u53c2\u8d5b\u6240\u4ee5\u6ca1\u6d4bst\u3002 \u9ebb\u4e86\u3002 \u4e4b\u540e\u6709\u65f6\u95f4\u5c31\u8865\u4e00\u53d1\u3002 D \u00b6 \u53d1\u73b0\u6253\u51fa \\(2^k\\) \u7684\u4e00\u4e2a\u8868\uff08 \\(1\\le k \\le 31\\) \uff09\u5c31\u80fd\u5f00\u59cb\u4e71\u641e\u3002 \u7136\u540e\u6839\u636e\u9898\u76ee\u8981\u6c42\u968f\u4fbf\u66b4\u529b\u5339\u914d\u4e00\u4e0b\u5c31\u884c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 int cal ( string s , string ss ){ int res = 0 ; for ( register int i = 0 ; i < ( int ) s . size () && res < ( int ) ss . size (); ++ i ){ if ( s [ i ] == ss [ res ]) ++ res ; } return res ; } int main (){ scanf ( \"%d\" , & T ); while ( T -- ){ cin >> s ; int res = 1e9 ; for ( register int i = 0 ; i < 109 ; ++ i ){ res = min ( res ,( int )( s . size () - cal ( s , a [ i ]) * 2 + a [ i ]. size ())); } printf ( \"%d \\n \" , res ); } return 0 ; } //a\u662f\u6253\u7684\u8868\u3002 \u5176\u5b9e\u6b63\u89e3\u662f\uff1a\u8d2a\u5fc3\uff0c\u786e\u5b9a\u4e86\u53d8\u6210\u7684\u6570 \\(t\\) ,\u7136\u540e\u4e00\u4f4d\u4e00\u4f4d\u5339\u914d\u3002 \u6211\u672c\u6765\u60f3\u5199\u8fd9\u4e2a\uff08 \u4f46\u6211\u611f\u89c9\u6253\u8868\u5f88\u725b\u903c\u554a\uff0c\u5c31\u6253\u4e86\uff08 E \u00b6 \u5de8\u5927\u591a\u7591\u60d1\u9898\uff0c\u4e0d\u4f1a\u3002 F1 && F2 \u00b6 \u5bb3\uff0c\u6211\u611f\u89c9\u8fd9\u4e2aF\u662fd2a\u6c34\u5e73\u3002 \u9ebb\u4e86\uff0cF1\u5c31\u662fF2\u7684\u7279\u6b8a\u60c5\u51b5\uff0cF2\u5927\u66b4\u641c\u52a0\u4e2a\u5c0f\u526a\u679d\u4f18\u5316\u5c31\u8fc7\u4e86\u3002 \u4f46\u662f\uff0c\u5176\u5b9e\u6709\u4e00\u70b9\u4e0d\u592a\u597d\u5199\uff08\uff09 \u9898\u76ee\u8981\u6c42\u4f60\u627e\u5230 \u6700\u5c0f\u7684 \u4e0d\u540c\u6570\u5b57\u7684\u4e2a\u6570\u4e0d\u8d85\u8fc7 \\(k\\) \u4e14\u8fd9\u4e2a\u6570\u5927\u4e8e\u7b49\u4e8e \\(n\\) \u7684\u6570\u3002 \u53d1\u73b0F2\u7684 \\(k\\) \u90fd\u53ea\u6709 \\(10\\) ,\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u5927\u66b4\u641c\uff0c\u4ece\u9ad8\u5230\u4f4e\u4f4d\u4e00\u4e2a\u4e00\u4e2a\u4f4d\u5730\u8bd5\u586b\u3002 \u6bcf\u4e00\u4f4d\u4ece \\(1 \\sim 9\\) \u5f00\u59cb\u586b\uff0c\u5f53\u9ad8\u4f4d\u5408\u6cd5\u7684\u65f6\u5019\u7acb\u9a6c\u5411\u4e0b\u586b\uff0c\u76f4\u5230\u6240\u6709\u4f4d\u90fd\u5408\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include <bits/stdc++.h> using namespace std ; const int si = 1e3 + 10 ; int cnt [ si ], ans [ si ]; int T , k , n ; string s ; bool dfs ( int now , int val , bool tag ){ if ( val > k ) return false ; if ( now == n && val <= k ){ for ( register int i = 0 ; i < n ; ++ i ){ printf ( \"%d\" , ans [ i ]); } puts ( \"\" ); return true ; } for ( register int i = tag ? s [ now ] - '0' : 0 ; i <= 9 ; ++ i ){ ++ cnt [ i ], ans [ now ] = i ; if ( cnt [ i ] == 1 ){ if ( dfs ( now + 1 , val + 1 , tag && i == s [ now ] - '0' )) return true ; } else if ( dfs ( now + 1 , val , tag && i == s [ now ] - '0' )) return true ; -- cnt [ i ]; } return false ; } signed main (){ scanf ( \"%d\" , & T ); while ( T -- ){ for ( register int i = 0 ; i <= 10 ; ++ i ){ cnt [ i ] = ans [ i ] = 0 ; } cin >> s ; scanf ( \"%d\" , & k ); n = ( int ) s . size (); if ( ! dfs ( 0 , 0 , 1 )){ printf ( \"10\" ); for ( register int i = 2 ; i < k ; ++ i ){ printf ( \"%d\" , i ); } puts ( \"\" ); } } return 0 ; } Atcoder Beginning Contest 215 \u00b6 Contest ID\uff1a abc_125 \u90e8\u5206\u8865\u9898\u6709 \u53c2 \u8003 A & B \u00b6 \u8bed\u6cd5\u9898\u3002 B\u7684\u8bdd\u9700\u8981\u624b\u5199 \\(\\log_2\\) \u3002 \u81ea\u5e26\u7684 \\(\\log_2\\) \u4e00\u65e6\u4e0a\u4e86 \\(2^{59}\\) \u5de6\u53f3\u5c31\u4f1a\u51fa\u4e8b\uff0c\u6240\u4ee5\u5efa\u8bae\u624b\u5199\u4e0b\u9762\u7684\uff1a 1 2 3 4 5 6 7 unsigned long long Log2EX ( unsigned long long x ) { unsigned long long i = 0 ; for ( i = 64 ; i >= 0 ; i -- ){ if ( 1 == ( x >> i ) & 0x1 ) break ; } return i ; } C \u00b6 \u95ee\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32\u6309\u5b57\u5178\u5e8f\u7684\u7b2c \\(k\\) \u4e2a\u6392\u5217\u3002 \u6c34\u9898\uff0c\u4f7f\u7528 next_permutation \u5373\u53ef\u3002\u3001 \u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u8fd4\u56de\u4e0b\u4e00\u4e2a\u6392\u5217\uff0c\u4f46\u662f\u5982\u679c\u8981\u5168\u6392\u5217\u7684\u8bdd\u4e00\u5b9a\u8981\u5148 sort 1 2 3 4 5 6 int cnt = 0 ; sort ( s . begin (), s . end ()); //\u4e00\u5b9a\u8981sort do { ++ cnt ; if ( cnt == n ) cout << s << endl ; } while ( next_permutation ( s . begin (), s . end ())); \u5176\u5b9e\u5b8c\u5168\u53ef\u4ee5\u76f4\u63a5 break \uff0c\u4e0d\u8fc7\u6ca1\u4ec0\u4e48\u5f71\u54cd\u3002 D \u00b6 \u7ed9\u4e00\u4e2a\u5e8f\u5217\uff0c\u8981\u6c42\u4f60\u627e\u51fa\u6240\u6709\u5728\u503c\u57df \\([1,m]\\) \u4e4b\u95f4\u7684 \\(k\\) \uff0c\u6ee1\u8db3 \\(k\\) \u548c\u5e8f\u5217\u91cc\u7684\u6240\u6709\u6570\u90fd\u4e92\u8d28\u3002 \u8003\u8651\u8d28\u56e0\u6570\u5206\u89e3\uff0c\u5bf9\u6bcf\u4e2a\u6570\u5206\u89e3\uff0c\u5bf9\u8d28\u6570\u6c42\u5e76\u3002 \u90a3\u4e48\u8003\u8651\u6bcf\u4e00\u4e2a \\(i\\) \uff0c\u540c\u6837\u8d28\u56e0\u6570\u5206\u89e3\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 #include <bits/stdc++.h> using namespace std ; #define int long long const int si = 1e5 + 10 ; int n , m , cnt , res ; int a [ si ], prime [ si ]; bool vis [ si ], ans [ si ]; inline int mod ( int x , int p ){ return x < 0 ? ( x + p ) - ((( x + p ) / p ) * p ) : x - (( x / p ) * p ); } int tp [ si ], pos [ si ]; void Euler ( int n ){ for ( register int i = 2 ; i <= n ; ++ i ){ if ( tp [ i ]) continue ; prime [ ++ cnt ] = i , pos [ i ] = cnt ; for ( register int j = ( i << 1 ); j <= n ; j += i ){ tp [ j ] = 1 ; } } } signed main (){ cin >> n >> m ; Euler ( m ); for ( register int i = 1 ; i <= n ; ++ i ){ cin >> a [ i ]; } for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= cnt && 1l l * prime [ j ] * prime [ j ] <= a [ i ]; ++ j ){ if ( ! mod ( a [ i ], prime [ j ])) vis [ j ] = true ; while ( ! mod ( a [ i ], prime [ j ])) a [ i ] /= prime [ j ]; } if ( a [ i ] != 1 ) vis [ pos [ a [ i ]]] = true ; } memset ( ans , true , sizeof ans ); for ( register int i = 1 ; i <= cnt ; ++ i ){ if ( vis [ i ]) for ( register int j = prime [ i ]; j <= m ; j += prime [ i ]) ans [ j ] = 0 ; } for ( register int i = 1 ; i <= m ; ++ i ){ if ( ans [ i ]) res += 1 ; } cout << res << endl ; for ( register int i = 1 ; i <= m ; ++ i ){ if ( ans [ i ]) cout << i << endl ; } return 0 ; } E \u00b6 \u9898\u9762\u5f88\u602a\uff0c\u8fd9\u91cc\u76f4\u63a5\u7ed9\u4e00\u4e2a\u7b80\u5316\u7248 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u9009\u62e9\u4e00\u4e2a\u5b50\u5e8f\u5217\u51fa\u6765\uff0c\u6ee1\u8db3\u540c\u4e00\u79cd\u5b57\u7b26\u5728\u8fd9\u4e2a\u5b50\u5e8f\u5217\u91cc\u9762\u90fd\u5728\u4e00\u6bb5\u91cc\uff0c\u6c42\u65b9\u6848\u6570\u5bf9 \\(998244353\\) \u53d6\u6a21\u3002 \u4e5f\u5c31\u662f\u4e0d\u4f1a\u6709 BBABB \u8fd9\u79cd\u60c5\u51b5\u3002 \u5b57\u7b26\u79cd\u7c7b\u5c0f\u4e8e\u5341\uff0c\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u8d85\u8fc7\u4e00\u5343\u3002 \u4e00\u4e2a\u6bd4\u8f83\u677f\u5b50\u7684\u72b6\u538b\uff1f \u8003\u573a\u6ca1\u8c03\u51fa\u6765\u3002 \u8bbe \\(f_{i,msk,t}\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u573a\u6bd4\u8d5b\uff0c\u5f53\u524d\u72b6\u6001\u662f \\(msk\\) \uff0c\u6700\u540e\u6253\u7684\u4e00\u573a\u7684\u79cd\u7c7b\u662f \\(t\\) \u3002 \u4e14\u7b2c \\(i\\) \u573a\u6bd4\u8d5b\u7684\u79cd\u7c7b\u662f \\(k\\) \u3002 \u6240\u4ee5\u6709\u8f6c\u79fb\u65b9\u7a0b\uff1a \\(\\begin{cases}f_{i,msk,t}=f_{i-1,msk,t}\\\\f_{i,msk,t}=f_{i,msk,t}+f_{i-1,msk,t},(t=k)\\\\f_{i,u\\ \\text{or}\\ 2^{k},k}+=f_{i-1,u,t}\\\\f_{i,2^{k},k}=f_{i,2^{k},k}+1\\end{cases}\\) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include <bits/stdc++.h> using namespace std ; const int Mod = 998244353 ; const int si = 1028 ; int n , f [ si ][ si ][ 10 ]; inline int mod ( int x ){ return x < 0 ? ( x + Mod ) - ((( x + Mod ) / Mod ) * Mod ) : x - (( x / Mod ) * Mod ); } string s ; int main (){ cin >> n >> s ; s = ' ' + s ; for ( register int i = 1 ; i <= n ; ++ i ){ int k = s [ i ] - 'A' ; for ( register int msk = 1 ; msk <= 1024 ; ++ msk ){ for ( register int j = 0 ; j < 10 ; ++ j ){ f [ i ][ msk ][ j ] = f [ i -1 ][ msk ][ j ]; if ( j == k ) f [ i ][ msk ][ j ] = mod ( f [ i ][ msk ][ j ] + f [ i -1 ][ msk ][ k ]); } } for ( register int msk = 1 ; msk <= 1024 ; ++ msk ){ if ( msk & ( 1 << k )) continue ; for ( register int j = 0 ; j < 10 ; ++ j ){ f [ i ][ msk | ( 1 << k )][ k ] = mod ( f [ i ][ msk | ( 1 << k )][ k ] + f [ i -1 ][ msk ][ j ]); } } f [ i ][ 1 << k ][ k ] = mod ( f [ i ][ 1 << k ][ k ] + 1 ); } int res = 0 ; for ( register int i = 1 ; i <= 1024 ; ++ i ){ for ( register int j = 0 ; j < 10 ; ++ j ){ res = mod ( f [ n ][ i ][ j ] + res ); } } cout << res << endl ; return 0 ; } F \u00b6 \u7ed9\u5b9a \\(n\\) \u4e2a\u70b9\uff0c\u5b9a\u4e49\u4e24\u4e2a\u70b9\u5bf9 \\((x_1,y_1),(x_2,y_2)\\) \u7684\u8ddd\u79bb\u4e3a \\(\\min (|x_1-x_2|,|y_1-y_2|)\\) \u3002 \u6c42\u4efb\u610f\u4e24\u4e2a\u70b9\u5bf9\u4e4b\u95f4\u8ddd\u79bb\u7684\u6700\u5927\u503c\u3002 \\(n\\) \u5728 \\(2\\times 10^5\\) \u7ea7\u522b\uff0c\u5750\u6807\u90fd\u662f \\(10^9\\) \u7ea7\u522b\u3002 \u7b2c\u4e00\u53cd\u5e94\u662f\u76f4\u63a5\u66b4\u529b\uff0c\u7136\u540e\u53d1\u73b0\u662f \\(\\text{O}(n^2)\\) \u7ea7\u522b\uff0c\u7206\u70b8\u3002 \u7136\u540e\u6709\u4e00\u4e2a\u5206\u522b\u4ece \\(x,y\\) \u8f74\u5927\u529b\u7ef4\u62a4\u533a\u95f4\u4fe1\u606f\u7684\u505a\u6cd5\uff0c\u7136\u540e\u53d1\u73b0\u4e0d\u53ef\u505a\u3002 \u4e8e\u662f\u5728\u6781\u5ea6\u7edd\u671b\u7684\u65f6\u5019\uff0c\u6211\u770b\u89c1\u4e86\u4e8c\u5206\u3002 \u6211\u89c9\u5f97\u8fd9\u4e2a\u4e1c\u897f\u4e5f\u8bb8\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5224\u5b9a\u6027\u95ee\u9898\u3002 \u5047\u8bbe \\(\\min (|x_1-x_2|,|y_1-y_2|) \\ge k\\) \u90a3\u4e48\u5f88\u660e\u663e\uff0c \\(|x_1-x_2| \\ge k ,|y_1-y_2| \\ge k\\) \u7136\u540e\u8fd9\u4e1c\u897f\u5f88\u660e\u663e\u5177\u6709\u5355\u8c03\u6027\uff0c\u73b0\u5728\u8003\u8651\u600e\u4e48\u4e8c\u5206 \\(k\\) \u3002 \u9996\u5148\u4f60\u5148\u5bf9 \\(x\\) \u5347\u5e8f\u6392\u5e8f\u65b9\u4fbf\u5904\u7406\u3002 \u5982\u679c\u5728 \\(k\\) \u53ef\u884c\u7684\u524d\u63d0\u4e0b \u7684\u8bdd\uff0c\u5c31\u5047\u8bbe\u6709\u4e00\u4e2a\u70b9 \\((x_i,y_i)\\) \u3002 \u7136\u540e\u518d\u5047\u8bbe \\(y\\) \u6700\u5c0f\u7684\u70b9\u662f \\((x.y)\\) \uff08\u8fd9\u91cc\u7a0d\u5fae\u8d2a\u5fc3\u4e86\u4e00\u4e0b\uff09\u3002 \u7136\u540e\u5982\u679c\u8bf4 \\(x_i-x \\ge k\\) \u4e86\uff0c\u90a3\u4e48\u5f88\u660e\u663e\uff0c\u56e0\u4e3a \\(k\\) \u662f\u53ef\u884c\u7684\uff0c\u6240\u4ee5 \\(y_i-y \\ge k\\) \u4e5f\u5c31\u662f\u6709\uff1a \\(A\\begin{cases}x_i-k \\ge x\\\\y_i-k \\ge y\\end{cases}\\) \u4f46\u662f\u4f60\u53d1\u73b0\u53ef\u80fd\u4f1a\u6709\u8fd9\u79cd\u60c5\u51b5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 y \\ | \u00b7(xx,ymax) | | | | | | \u00b7(x_i,y_i) | | \u00b7(x,ymin) ---------------------------\\x \u4e5f\u5c31\u662f\u8bf4 \\(y\\) \u7684\u6700\u5927\u503c\u53ef\u80fd\u6bd4 \\(y\\) \u7684\u6700\u5c0f\u503c\u505a\u51fa\u7684\u8d21\u732e\u66f4\u5927\uff0c\u6240\u4ee5\u6700\u5927\u7684 \\(y\\) \u4e5f\u8981\u8dd1\u4e00\u904d\u3002 \u540c\u7406\u5c31\u662f \\(B \\begin{cases}x_i+k \\le x\\\\y_i+k \\le y\\end{cases}\\) \u6240\u4ee5\u6211\u4eec\u5728\u4e8c\u5206\u7684\u91cc\u9762\u53bbcheck \\(A,B\\) \u8fd9\u4e24\u4e2a\u6761\u4ef6\u662f\u5426\u6709\u81f3\u5c11\u4e00\u4e2a\u6210\u7acb\u5c31\u53ef\u4ee5\u4e86\u3002 \u7136\u540e\u5177\u4f53\u6765\u8bf4\u5c31\u662f\u6309\u7167 \\(x\\) \u6392\u4e00\u4e2a\u5e8f\uff0c\u7136\u540e\u8fdb\u884c\u5206\u6bb5\u53cc\u6307\u9488\u3002 \u4ee5 \\(i\\) \u4e3a\u53f3\u7aef\u70b9\uff0c \\(j\\) \u4e3a\u5de6\u7aef\u70b9\uff0c\u90a3\u4e48\u4ec0\u4e48\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u53f3\u79fb\u5de6\u7aef\u70b9\uff1f \u5c31\u662f \\(j+1\\) \u8fd9\u4e2a\u70b9\uff0c\u4ed6\u7684\u6a2a\u5750\u6807\u548c \\(i\\) \u7684\u5dee\u503c\u5927\u4e8e\u7b49\u4e8e\u8fd9\u4e2a \\(k\\) \u3002 \u90a3\u4e48\u663e\u7136\u5982\u679c\u6211\u5728 \\(i\\) \u5904\u505a\u5230\u4e86 \\(j\\) \uff0c\u90a3\u4e48\u6240\u6709 \\(i\\) \u53f3\u8fb9\u7684\u70b9\u548c \\(j\\) \u7684\u7ec4\u5408\u90fd\u662f\u5408\u6cd5\u7684\uff0c\u6240\u4ee5\u8fd9\u4e2a \\(j\\) \u4ed6\u5c31\u6c38\u8fdc\u662f\u5408\u6cd5\u7684\u3002 \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8bb0\u5f55\u4e00\u4e0b\u5df2\u505a\u5230\u7684 \\(j\\) \u4ed6\u7684\u7eb5\u5750\u6807\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff0c\u548c\u6bcf\u4e00\u4e2a\u8fdb\u53bb\u7684 \\(i\\) \u7684\u7eb5\u5750\u6807\u51cf\u4e00\u51cf\uff0c \u5982\u679c\u7eb5\u5750\u6807\u4e4b\u5dee\u8981\u5927\u4e8e\u7b49\u4e8e \\(k\\) \uff0c\u800c\u6a2a\u5750\u6807\u6211\u4eec\u5df2\u7ecf\u8bc1\u660e\u4e86\u4ed6\u7684\u5dee\u503c\u5fc5\u5b9a\u5927\u4e8e\u7b49\u4e8e \\(k\\) \uff0c\u90a3\u4e48\u8fd9\u4e2a \\(k\\) \u5c31\u80af\u5b9a\u662f\u6210\u7acb\u7684\u3002 \u4f46\u662f\u8fd9\u4e2a\u9898\uff0c\u5982\u679c\u53ea\u904d\u5386\u4e00\u6b21\u90a3\u4e48\u7b54\u6848\u53ef\u80fd\u4f1a\u88ab\u6f0f\u6389\uff0c\u6240\u4ee5\u8fd8\u5f97\u4ece\u53f3\u5f80\u5de6\u904d\u5386\u4e00\u904d\uff0c\u6b64\u65f6 \\(j\\) \u662f\u53f3\u7aef\u70b9\uff0c \\(i\\) \u662f\u5de6\u7aef\u70b9\u3002 \u56e0\u4e3a\u4e0d\u53ef\u6297\u529b\u56e0\u7d20\u8ba9\u6211\u603b\u662f\u5947\u602a\u7684WA\uff0c\u6240\u4ee5\u5bf9\u7740tutorial \u6539\u4e86\u4e00\u4e9b\u5730\u65b9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 #include <bits/stdc++.h> using namespace std ; #define xi first #define yi second int n ; int main (){ cin >> n ; vector < pair < int , int > > v ( n ); for ( register int i = 0 ; i < n ; ++ i ){ cin >> v [ i ]. xi >> v [ i ]. yi ; } sort ( v . begin (), v . end ()); int l = 0 , r = 1e9 + 7 ; while ( r - l > 1 ){ int mid = ( l + r ) >> 1 ; queue < pair < int , int > > q ; bool f = false ; int mi = 1e9 + 7 , mx = 0 ; for ( auto p : v ){ while ( ! q . empty ()){ int x = q . front (). xi , y = q . front (). yi ; if ( x > p . xi - mid ) break ; mi = min ( mi , y ), mx = max ( mx , y ); q . pop (); } if ( mi <= p . yi - mid || mx >= p . yi + mid ) f = true ; q . push ( p ); } if ( f ) l = mid ; else r = mid ; } cout << l << endl ; return 0 ; } ```` ### G & H > \u4e0d\u4f1a ## Nowcoder PJ 28 Contest ID \uff1a` 11235 ` \u51fa\u9898\u4eba\u662fFST\u7fa4\u7fa4\u53cb \uff1a CSP - Sept ~~~ \u5f88\u6709\u611f\u89c9 \uff0c \u5f00\u573a\u4e00\u4e2a\u5c0f\u65f6\u53ea\u8fc7\u4e86A \uff0c \u7136\u540e\u6700\u540e\u534a\u5c0f\u65f6\u76f4\u63a5AK \uff0c \u523a\u6fc0 \u3002 \u53e6\u5916\u725b\u5ba2\u7684\u5c0f\u767d\u6708\u8d5b36\u5c31\u4e0d\u5199\u4e86 \uff0c \u53ea\u6709E\u611f\u89c9\u6bd4\u8f83\u6709\u4ef7\u503c \u3002 ### A \u53d1\u73b0\u8fd9\u4e2a\u79fb\u52a8\u662f\u6709\u5468\u671f\u6027\u7684 \uff0c \u800c\u4e14\u79fb\u52a8\u6b21\u6570\u662f $10 ^ { 18 } $ \u3002 \u6240\u4ee5\u5c31\u662f\u4e2a\u8bc8\u9a97\u9898 \uff08 \u76f4\u63a5\u628a\u79fb\u52a8\u6b21\u6570\u6a21\u4e0a\u5b57\u7b26\u4e32\u957f\u5ea6 \uff0c \u7136\u540e\u4ece\u8fd9\u4e2a\u4f59\u6570 $ + 1 $ \u4f4d\u5f00\u59cb\u8f93\u51fa \uff0c \u7136\u540e\u5728\u4ece\u7b2c $1$ \u4f4d\u4e00\u76f4\u8f93\u51fa\u5230\u4f59\u6570\u8fd9\u4e00\u4f4d\u5373\u53ef \u3002 1 minAC \uff08 ``` cpp #include <bits/stdc++.h> using namespace std ; #define int long long string s ; int n , x ; signed main (){ cin >> n >> x ; cin >> s ; s = ' ' + s ; int r = x % n ; for ( int i = r + 1 ; i <= n ; ++ i ) cout << s [ i ]; for ( int i = 1 ; i <= r ; ++ i ) cout << s [ i ]; } B \u00b6 \u6700\u540e\u624dAC\u7684\u9898\u3002 \u8fd9\u4e2a\u662f\u5728\u77e9\u9635\u4e0a\u6c42 \\(y\\) \u8f74\u65b9\u5411\u7684 \\(\\texttt{LIS}\\) \uff0c\u7136\u540e\u77e9\u9635\u6700\u5927 \\(5\\times10^3 \\times 10^3\\) \u542c\u4f55\u795e\u8bf4\u6709\u4e00\u79cd \\(\\text{O}(NK)\\) \u7684\u505a\u6cd5\uff0c\u4f46\u662f\u6211\u4e0d\u4f1a\u3002 \u8003\u8651\u8bbe \\(f_i\\) \u8868\u793a\u957f\u5ea6\u4e3a \\(i\\) \u7684 \\(\\texttt{LIS}\\) \u7684\u6700\u5c0f\u7ed3\u5c3e\uff0c\u8fd9\u6837\u5b50\u65b9\u4fbf\u53bb\u8f6c\u79fb\u3002 \u7136\u540e\u53d1\u73b0\u8fd9\u5c31\u662f \\(\\text{O} (n \\log n)\\) \u6c42 \\(\\texttt{LIS}\\) \u7684\u72b6\u6001\u3002 \u6240\u4ee5\u6211\u4eec\u8003\u8651\u76f4\u63a5\u591a\u5faa\u73af\u4e00\u6b21\u7136\u540e\u5957\u4e0a\u677f\u5b50\u3002 \u7136\u540e\u4f60\u53d1\u73b0\u5728 1 2 1 5 1 2 3 4 5 \u7684\u8fd9\u4e2a\u6570\u636e\u4e0a\u4f60\u4f1a\u8f93\u51fa \\(5\\) \u3002 \u4e3a\u5565\u90a3\uff1f \u56e0\u4e3a\u6211\u4eec\u7684\u505a\u6cd5\u4f1a\u5bfc\u81f4\u91cd\u590d\u8986\u76d6\u3002 \u5c31\u548c01\u80cc\u5305\u4e00\u4e2a\u9053\u7406\uff0c\u6240\u4ee5 reverse \u4e00\u4e0b\u5c31\u597d\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #include <bits/stdc++.h> using namespace std ; #define int long long const int si = 1e3 + 10 ; int k , n ; #define pb push_back vector < int > v [ si ]; int f [ si ]; int nlogn_lis (){ int len = 0 ; f [ 0 ] = -1 ; for ( int i = 1 ; i <= n ; ++ i ){ for ( int j = 0 ; j < ( int ) v [ i ]. size (); ++ j ){ if ( v [ i ][ j ] > f [ len ]) f [ ++ len ] = v [ i ][ j ]; else * lower_bound ( f , f + len , v [ i ][ j ]) = v [ i ][ j ]; } } return len ; } signed main (){ scanf ( \"%lld%lld\" , & k , & n ); for ( int i = 1 ; i <= n ; ++ i ){ for ( int j = 1 , q ; j <= k ; ++ j ){ scanf ( \"%lld\" , & q ); v [ i ]. pb ( q ); } reverse ( v [ i ]. begin (), v [ i ]. end ()); } printf ( \"%lld\" , nlogn_lis ()); } C \u00b6 \u5927\u539f\u9898\uff0c\u6d1b\u8c37\u4e0a\u7684\u201c\u56fe\u7684\u904d\u5386\u201d\u5c31\u662f\u57fa\u672c\u4e00\u6837\u7684\u3002 \u6211\u672c\u6765\u5199\u7684\u662f\u7f29\u70b9+DP\uff0c\u4f46\u662f\u6302\u4e86\u597d\u591a\u53d1\u3002 \u7a81\u7136\u60f3\u8d77\u53ef\u4ee5\u201c\u6b63\u96be\u5219\u53cd\u201d\u7684\u601d\u60f3\u505a\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\u80fd\u5230\u8fbe\u7684\u70b9\uff0c \u8bb0\u5f55\u53ef\u4ee5\u5230\u8fd9\u4e2a\u70b9\u6240\u6709\u70b9\u7684\u7f16\u53f7\u7684\u6700\u5c0f\u503c\u3002 \u7136\u540e\u5efa\u53cd\u56fe\u8dd1\u4e00\u904d\u5c31\u884c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <bits/stdc++.h> using namespace std ; const int si = 1e5 + 10 ; int n , m , f [ si ]; vector < int > g [ si ]; vector < int > v ; void dfs ( int x , int d ){ if ( f [ x ]) return ; f [ x ] = d ; for ( int i = 0 ; i < g [ x ]. size (); i ++ ) dfs ( g [ x ][ i ], d ); } int main (){ scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 , u , vv ; i <= m ; i ++ ){ scanf ( \"%d%d\" , & u , & vv ); g [ vv ]. push_back ( u ); } for ( int i = 1 ; i <= n ; i ++ ) dfs ( i , i ); for ( int i = 1 ; i <= n ; i ++ ) v . push_back ( f [ i ]); sort ( v . begin (), v . end ()); v . erase ( unique ( v . begin (), v . end ()), v . end ()); for ( int i = 0 ; i < ( int ) v . size (); ++ i ) cout << v [ i ] << \" \" ; return 0 ; } D \u00b6 \u5f88\u7cbe\u5999\u7684DP\u3002 \u53d1\u73b0\u6b63\u7740\u505a\u5f88\u9ebb\u70e6\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u5e8f\u5217\u5012\u8fc7\u6765\uff0c\u53d1\u73b0\u8fd9\u4e1c\u897f\u5f88\u5e73\u51e1\u3002 \u8bbe \\(f_i\\) \u8868\u793a\u5012\u8fc7\u6765\u4e4b\u540e\u4ece \\([1,i]\\) \u8fd9\u4e2a\u533a\u95f4\u5168\u90e8\u5403\u5b8c\u7684\u6700\u5927\u503c\u3002 \u7136\u540e\u8003\u8651 \\(a_i\\) \uff0c\u4ed6\u4e0d\u662f\u8fd9\u4e2a\u533a\u95f4\u6700\u540e\u4e00\u4e2a\u5403\u7684\u5c31\u662f\u7b2c\u4e00\u4e2a\u5403\u7684\u3002 \u6240\u4ee5\u5904\u7406\u51fa \\(\\Delta\\) \u7684\u524d\u7f00\u548c\uff0c\u6240\u4ee5\u5206\u4e24\u79cd\u60c5\u51b5\u8f6c\u79fb\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #include <bits/stdc++.h> using namespace std ; #define int long long const int si = 2e5 + 10 ; int n ; int a [ si ], delta [ si ]; int f [ si ], sum [ si ]; inline int cal ( int pos ){ return (( pos -1 ) * delta [ pos ]) + a [ pos ]; } signed main (){ scanf ( \"%lld\" , & n ); for ( int i = n ; i >= 1 ; -- i ){ scanf ( \"%lld\" , & a [ i ]); } for ( int i = n ; i >= 1 ; -- i ){ scanf ( \"%lld\" , & delta [ i ]); } for ( int i = 1 ; i <= n ; ++ i ){ sum [ i ] = sum [ i -1 ] + delta [ i ], f [ i ] = -10737418190000000 ; } f [ 1 ] = a [ 1 ]; for ( int i = 2 ; i <= n ; ++ i ){ f [ i ] = max ( f [ i -1 ] + sum [ i -1 ] + a [ i ], f [ i -1 ] + cal ( i )); } return printf ( \"%lld\" , f [ n ]), 0 ; } Atcoder Beginning Contest 216 \u00b6 Contest ID: abc_216 \u5f00\u5b66\u524d\u4e00\u5929\u665a\u4e0a\u6709\u8fde\u7740\u7684ABC\u548c\u4e00\u573aCF\uff0c\u53ef\u4ee5\u4e0a\u5927\u5206\u529b\uff01\u3002 \u56e0\u4e3a\u660e\u5929\u5c31\u5f00\u5b66\u4e86\u6240\u4ee5\u5c31\u5148\u5495\u8fd9\u4e0d\u5199\u3002 \u5230\u65f6\u5019\u8bfe\u8868\u51fa\u6765\u4e4b\u540e\u627e\u7ade\u8d5b\u8bfe\u65f6\u95f4\u4e0a\u6765\u673a\u623f\u5199\u3002 G \u662f\u4e2a\u88f8\u7684\u5dee\u5206\u7ea6\u675f\uff0c\u53ef\u60dc\u6ca1\u5199\uff0c\u4e0d\u7136\u5c31\u53ea\u5dee H \u4e86\u3002 \u6700\u8fd1\u6253\u7684\u6700\u597d\u7684\u4e00\u6b21ABC\uff08\u53ef\u80fd\u662f\u6c34\u4e86\uff1f\uff09 A & B \u00b6 \u90fd\u662f\u8bed\u6cd5\u9898\u3002 A\u7684\u8bdd\u7279\u5224\u4e00\u4e0b\uff0cB\u7684\u8bdd\u6574\u4e2a map<pair<string,string>,bool> \u5c31\u8fc7\u4e86 C \u00b6 \u5f88\u5999\uff0c\u4f60\u6709 \\(120\\) \u6b21\u64cd\u4f5c\uff0c\u53ef\u4ee5\u628a\u7ed9\u5b9a\u7684\u503c\u52a0\u4e00\uff0c\u6216\u8005\u628a\u503c\u4e582. \u95ee\u6784\u9020\u4e00\u4e2a \\(2^{64}\\) \u4ee5\u5185\u7684\u6574\u6570\u7684\u65b9\u6848\u3002 \u53d1\u73b0 \\(120\\) \u6b21\u5b8c\u5168\u591f\u4e86\u3002 \\(120\\) \u4ee5\u5185\u7684\u8bdd\u5c31\u76f4\u63a5\u4e00\u76f4\u52a0\u4e00\u5c31\u53ef\u4ee5\u3002 \u53cd\u4e4b\u5982\u679c \\(n\\) \u662f\u5947\u6570\uff0c\u51cf\u4e00\u7136\u540e\u4e00\u76f4\u9664\u4e8c\uff0c\u7136\u540e\u5982\u679c\u53c8\u662f\u5947\u6570\u90a3\u5c31\u91cd\u590d\u3002 \u76f4\u5230 \\(n\\) \u4e3a \\(0\\) \u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <bits/stdc++.h> using namespace std ; long long n ; int main (){ scanf ( \"%lld\" , & n ); if ( n <= 120 ){ for ( register int i = 1 ; i <= n ; ++ i ){ putchar ( 'A' ); } return 0 ; } else { string s ; bool f = false ; if ( n & 1 ) n -= 1 , f = true ; while ( n ){ if ( n % 2 == 0 ) n /= 2 , s = 'B' + s ; if ( n & 1 ) n -= 1 , s = 'A' + s ; } if ( f ) s += 'A' ; cout << s << endl ; } } D \u00b6 D \u7684\u8bdd\u5c31\u76f4\u63a5\u5f00\u4e00\u4e2a deque \u548c\u4e00\u4e2a queue \u6a21\u62df\u5c31\u53ef\u4ee5\u4e86\u3002 \u5f53\u7136\u4f60\u53ef\u4ee5\u5229\u7528\u62d3\u6251\u7684\u601d\u60f3\u76f4\u63a5\u5efa\u56fe\u7136\u540e\u8dd1\u4e00\u4e2a\u62d3\u6251\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 #define int long long int n , m , sz [ MAXN ], num ; pair < int , int > pos [ MAXN ]; deque < int > a [ MAXN ]; queue < int > q ; void del ( int x ){ a [ x ]. pop_front (); if ( a [ x ]. size ()){ int u = a [ x ]. front (); if ( pos [ u ]. fr == 0 ) pos [ u ]. fr = x ; else pos [ u ]. se = x , q . push ( u ), num ++ ; } } signed main (){ cin >> n >> m ; for ( register int i = 1 ; i <= m ; ++ i ){ cin >> sz [ i ]; for ( register int j = 1 ; j <= sz [ i ]; ++ j ){ int tmp ; cin >> tmp ; a [ i ]. pb ( tmp ); } } for ( register int i = 1 ; i <= m ; ++ i ){ int u = a [ i ][ 0 ]; if ( pos [ u ]. fr == 0 ) pos [ u ]. fr = i ; else pos [ u ]. se = i , q . push ( u ), num ++ ; } while ( ! q . empty ()){ int u = q . front (); q . pop (); del ( pos [ u ]. fr ), del ( pos [ u ]. se ); } if ( num == n ) puts ( \"Yes\" ); else puts ( \"No\" ); return 0 ; } E \u00b6 \u5927\u6bd2\u7624\u8d2a\u5fc3\uff0c\u5efa\u4e00\u4e2a\u5927\u6839\u5806\u7136\u540e\u628a\u6240\u6709\u4e1c\u897f\u4e22\u8fdb\u53bb\u7ef4\u62a4\u3002 \u7136\u540e\u6bcf\u6b21\u628a\u5806\u9876 \\(top\\) \u4e4b\u540e\uff0c\u628a \\(top-1\\) \u6254\u8fdb\u53bb\u5c31\u53ef\u4ee5\u3002 \u8fd9\u6837\u5b50\u8fd8\u4e0d\u592a\u591f\u3002\u9700\u8981\u7a0d\u5fae\u4f18\u5316\u4e00\u4e0b\uff0c\u5c31\u81ea\u5df1\u7406\u89e3\u5427\u3002 \u8fd9\u4e2a\u4e1c\u897f\u6211\u6ca1\u505a\u51fa\u6765\uff0c\u90a3\u4efd\u4ee3\u7801\u662f\u6709\u4e2a\u4eba\u8981\u6211\u5e2e\u4ed6\u5403\u7f5a\u65f6\u4ea4\u7684\uff08 F \u00b6 DP\uff0c\u9996\u5148\u628a \\(a\\) \u964d\u5e8f\u6392\u4e00\u904d\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(j \\in [1,n]\\) \uff0c\u5047\u8bbe \\(f_j\\) \u8868\u793a\u9009\u4e0a \\(a_j\\) \uff0c\u4e0d\u7ba1\u5176\u4ed6\u7684\u600e\u4e48\u9009\u6240\u5f97\u5230\u7684\u89e3\u3002 \u7136\u540e\u4f60\u53d1\u73b0 \\(a_j\\) \u8981\u6ee1\u8db3 \\(\\ge b_k + \\sum\\limits_{i \\subset S} b_i,S=\\{k+1,k+2,...,n\\}\\) \u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u80cc\u5305\uff0c\u4e0d\u8fc7\u9700\u8981\u524d\u7f00\u548c\u4f18\u5316\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 const int limit = 5000 ; sort ( q + 1 , q + 1 + n ); f [ 0 ][ 0 ] = 1 ; for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 0 ; j <= limit ; ++ j ){ f [ i ][ j ] = f [ i -1 ][ j ]; } for ( register int j = q [ i ]. b ; j <= limit ; ++ j ){ f [ i ][ j ] += f [ i -1 ][ j - q [ i ]. b ], mod ( f [ i ][ j ]); } } for ( register int i = 0 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= limit ; ++ j ){ f [ i ][ j ] += f [ i ][ j -1 ], mod ( f [ i ][ j ]); } } for ( register int i = 1 ; i <= n ; ++ i ){ if ( q [ i ]. a < q [ i ]. b ) continue ; ans += f [ i -1 ][ q [ i ]. a - q [ i ]. b ], mod ( ans ); } printf ( \"%lld \\n \" , ans ); G \u00b6 \u88f8\u7684\u5dee\u5206\u7ea6\u675f\u3002 \u4f46\u662f\u5199\u6302\u4e86\u545c\u545c\u545c Reference: https://www.cnblogs.com/registergen/p/abc216_solution.html Deltix Round, Summer 2021 (CF1556) \u00b6 Contest ID: CF1556 \u8fd9\u573a\u6781\u5ea6\u6bd2\u7624\u554a\u554a\u554a\u554a\uff0cD\u51fa\u4e86\u4e2a\u4ea4\u4e92+\u5927\u6bd2\u7624\u6784\u9020\u3002 \u7136\u540eE\u6211\u5f00\u59cb\u5148\u5199\u7684\u66b4\u529b\uff0c\u7136\u540e\u53d1\u73b0\u8981\u7528RMQ\u4f18\u5316\uff0c\u4e8e\u662f\u5199\u4e86\u4e00\u4e2aST\u8868\u3002 \u7136\u540e\u8d5b\u540eCFM\u7ed9\u4e86\u6211\u4e00\u7ec4\u6570\u636e\u628a\u6211\u7684\u9519\u8bef\u505a\u6cd5\u53c9\u6389\u4e86\u3002 \u4f46\u662f\u5e76\u6ca1\u6709\u5728ST\u91cc\u9762\u51fa\u73b0ovo\uff0c\u6211\u5f53\u65f6\u4ee5\u4e3a\u8981FST\u4e86\uff0c\u4e8e\u662f\u6781\u5ea6\u751f\u6c14\u3002 \u65e9\u4e0a\u8d77\u6765\u53d1\u73b0\u5374\u4e0a\u5206\u4e86\uff0c\u56e0\u4e3aE\u7684systest\u592a\u5f31\u4e86\uff01 \u7136\u540e\u8d81\u8d70\u4e4b\u524d\u6539\u4e86\u4e00\u4e0b\uff0c\u628a\u9519\u8bef\u505a\u6cd5\u6539\u5bf9\u4e86\uff0c\u5f88\u6709\u611f\u89c9\uff01 \u6bd4\u8f83\u53ef\u60dc\u7684\u5c31\u662f\u6ca1\u4e0aCM\uff0c\u545c\u545c\uff0c\u8981\u662fD\u4ea4\u4e92\u90e8\u5206\u4e0d\u5199\u6302\u5c31\u4e0aCM\u4e86\u545c\u545c\u3002 \u9898\u89e3\u7684\u8bdd\u4e4b\u540e\u518d\u6765\u5199\uff0c\u4eca\u5929\u5f00\u5b66\u4e86\u6ca1\u65f6\u95f4\u545c\u545c\u545c\u3002 \uff08\u542c\u8bf4 tourist \u53ea\u6709rk22\uff0c\u6bd2\u7624\uff01\uff08\u5176\u5b9e\u662f\u56e0\u4e3a\u4ed6\u6700\u540e\u9762\u4e24\u9053\u4f3c\u4e4e\u56e0\u4e3a\u4ec0\u4e48\u6ca1\u505a\uff09 \u8fd9\u4e0b\u9762\u7a7a\u7740\u7684\u90fd\u662f\u6ca1\u65f6\u95f4\u5199\u7684\uff08ABC\u7684\u90fd\u662f\u5230\u5b66\u6821\u4e4b\u540e\u6e9c\u53bb\u673a\u623f\u5199\u7684\uff09 A \u00b6 \u731c\u4e86\u4e2a\u7ed3\u8bba\u8fc7\u4e86\u3002 \u53d1\u73b0\u5982\u679c \\(c,d\\) \u7684\u5947\u5076\u6027\u4e0d\u540c\uff0c\u80af\u5b9a\u4e0d\u80fd\u6784\u9020\u3002 \u6392\u9664\u65e0\u89e3\u4e4b\u540e\uff0c\u5982\u679c\u5168\u662f \\(0\\) \u5c31\u4e0d\u7528\u6784\u9020\uff0c\u7136\u540e \\(c=d\\) \u5c31\u53ea\u9700\u8981\u4e00\u6b65\u3002 \u5982\u679c \\(c \\not= d\\) \u7684\u8bdd\uff0c\u7b2c\u4e00\u6b65\u6784\u9020 \\([c,d]\\) \u8fd9\u4e2a\u533a\u95f4\u7684\u4e2d\u4f4d\u6570\uff0c\u7136\u540e\u518d\u5411\u4e0a\u5411\u4e0b\u6784\u9020\u4e00\u6b21\u5373\u53ef\u3002 BCDE \u00b6 \u5495\u7740\uff0c\u4e0d\u60f3\u5199\u4e86\u3002 FGH... \u00b6 \u56e0\u4e3a\u662f div1+div2,\u6240\u4ee5\u540e\u4e09\u9898\u73b0\u5728\u771f\u7684\u4e0d\u4f1aqwq Codeforces Round #747 \u00b6 Contest ID : 1594 \u5f88\u4e45\u6ca1\u6253\u4e86\uff0c\u73b0\u5728\u505c\u8bfe\u671f\u95f4\u6709\u65f6\u95f4\u90a3\u4e48\u5c31\u6253\u4e86\u4e00\u4e0b\u3002 \u4f46\u662f\u624b\u611f\u5f88\u4e0d\u597d\uff0cA \u50bb\u903c\u4e86\uff0cB\u50bb\u903c\u4e86\uff0cE1\u50bb\u903c\u4e86\u3002 \u540c\u673a\u623f\u7b2c\u4e00\u6b21\u6253\u7684\u90fd\u540a\u6253\u6211\u3002 \u53ea\u6709 ACD /kk A \u00b6 \u6784\u9020\u4e00\u4e2a\u533a\u95f4 \\(l,r\\) \u4f7f\u5f97\u533a\u95f4\u548c\u4e3a \\(n\\) \u3002 \u56e0\u4e3a\u53ef\u4ee5\u662f\u8d1f\u6570\uff0c\u6240\u4ee5\u76f4\u63a5 \\([1-n,n]\\) \u3002 B \u00b6 \u5927\u7b80\u5355\u9898\uff0c\u50bb\u903c\u4e86\u3002 \u95ee\u4f60\u7531 \\(n\\) \u7684\u6574\u6570\u6b21\u5e42\u7ec4\u6210\u6570\u7684\u7b2c \\(k\\) \u5927\u3002 \u53ef\u4ee5\u7528\u4e8c\u8fdb\u5236\u505a\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include <bits/stdc++.h> using namespace std ; #define int long long int T ; int n , k ; const int p = 1e9 + 7 ; signed main (){ scanf ( \"%lld\" , & T ); while ( T -- ){ int res = 0 ; int delta = 1 ; scanf ( \"%lld%lld\" , & n , & k ); for ( register int j = 1 ; j <= 32 ; ++ j ){ if ( k & ( 1 << ( j -1 ))) res = ( res + delta ) % p ; delta *= n , delta %= p ; } printf ( \"%lld \\n \" , res ); } return 0 ; } C \u00b6 \u8981\u6c42\u4f60\u628a\u5b57\u7b26\u4e32\u6240\u6709\u4f4d\u53d8\u6210\u7ed9\u5b9a\u7684\u5b57\u7b26 \\(ch\\) \u6bcf\u6b21\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u6570 \\(x\\) \uff0c\u5bf9\u4e8e\u6240\u6709\u7684 \\(s[i],x \\not| \\ \\ i\\) \uff0c\u4ee4\u4ed6\u53d8\u6210 \\(ch\\) \u3002 \u95ee\u6700\u5c0f\u64cd\u4f5c\u6b21\u6570\u3002 \u53d1\u73b0\u6700\u591a\u53ea\u9700\u8981\u4e24\u6b21 : \\(x=n-1.x=n\\) \u3002 \u7136\u540e\u4e0d\u7528\u52a8\u4e86\u76f4\u63a5\u7279\u5224 \\(0\\) \u3002 \u7136\u540e\u8003\u8651\u7528 \\(i\\times j\\) \u8fd9\u6837\u7c7b\u4f3c\u6b27\u62c9\u7b5b\u7684\u529e\u6cd5\u53bb\u5224\u65ad\u662f\u5426\u80fd\u4e00\u6b21\u5e72\u5b8c\u5373\u53ef\u3002 D \u00b6 \u662f\u4e2a\u5e76\u67e5\u96c6\uff0c\u6709\u70b9\u50cf\u98df\u7269\u94fe\u90a3\u4e00\u9898\u3002 \u5185\u9b3c\u53ea\u4f1a\u8bf4\u5047\u8bdd\uff0c\u597d\u4eba\u53ea\u4f1a\u8bf4\u771f\u8bdd\u3002 \u7136\u540e\u6bcf\u4e2a\u4eba\u4f1a\u6307\u8ba4\u8c01\u662f\u4ec0\u4e48\u8eab\u4efd\u3002 \u95ee\u4f60\u6700\u591a\u6709\u591a\u5c11\u5185\u9b3c\u3002 \u8003\u8651\u5206\u7c7b\u8ba8\u8bba\u3002 \u5982\u679c A \u8bf4 B \u662f\u597d\u4eba\uff0c\u90a3\u4e48 A \u548c B \u7684\u8eab\u4efd\u80af\u5b9a\u662f\u4e00\u6837\u7684\u3002 \u56e0\u4e3a\u5982\u679c A \u662f\u597d\u4eba\uff0c\u8bf4\u771f\u8bdd\uff0c\u90a3\u4e48 B \u4e5f\u662f\u597d\u4eba\u3002 \u53cd\u4e4b A \u662f\u5185\u9b3c \uff0c\u8bf4\u5047\u8bdd\uff0c\u90a3\u4e48 B \u4e5f\u662f\u5185\u9b3c\u3002 \u5982\u679c A \u8bf4 B \u662f\u5185\u9b3c\uff0c\u90a3\u4e48\u4e5f\u6709\u4e24\u79cd\u60c5\u51b5\u3002 \u5982\u679c A \u662f\u597d\u4eba\uff0c\u90a3\u4e48 B \u5c31\u662f\u5185\u9b3c\u3002 \u5982\u679c A \u662f\u5185\u9b3c\uff0c\u90a3\u4e48 B \u5c31\u662f\u597d\u4eba \u3002 \u7136\u540e\u6211\u4eec\u5c31\u8003\u8651\u5229\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u4ed6\u4eec\u7684\u5173\u7cfb\uff0c\u7136\u540e\u987a\u4fbf\u8fdb\u884c\u5904\u7406\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 #include <bits/stdc++.h> using namespace std ; #define int long long int T ; const int si = 2e5 + 10 ; int pa [ si ], dis [ si ], siz [ si ], res [ si ]; bool vis [ si ]; int n , m , ans ; int root ( int x ){ if ( pa [ x ] == x ) return pa [ x ]; int fa = root ( pa [ x ]); dis [ x ] ^= dis [ pa [ x ]]; return pa [ x ] = fa ; } inline void Union ( int u , int v , int ru , int rv , int w ){ dis [ ru ] = w xor dis [ u ] xor dis [ v ]; siz [ rv ] += siz [ ru ], pa [ ru ] = rv ; } inline void init ( int n ){ for ( register int i = 1 ; i <= n ; ++ i ){ pa [ i ] = i , dis [ i ] = 0 , siz [ i ] = 1 ; vis [ i ] = false , res [ i ] = 0 ; } } signed main (){ scanf ( \"%lld\" , & T ); while ( T -- ){ scanf ( \"%lld%lld\" , & n , & m ); init ( n ); bool print_ck = true ; string sta ; for ( register int i = 1 ; i <= m ; ++ i ){ int u , v , tet ; scanf ( \"%lld%lld\" , & u , & v ); cin >> sta ; if ( sta [ 0 ] == 'c' ) tet = 0 ; else tet = 1 ; int ru = root ( u ), rv = root ( v ); if ( ru == rv ){ if (( dis [ u ] xor dis [ v ]) != tet ){ if ( print_ck ) puts ( \"-1\" ); print_ck = false ; } } else Union ( u , v , ru , rv , tet ); } if ( ! print_ck ) continue ; for ( register int i = 1 ; i <= n ; ++ i ){ int ri = root ( i ); if ( dis [ i ] == 0 ) res [ ri ] ++ ; //pa[i]? } ans = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ if ( root ( i ) != i ) continue ; ans += max ( res [ i ], siz [ i ] - res [ i ]); } printf ( \"%lld \\n \" , ans ); } return 0 ; } E1 \u00b6 \u5927\u7b80\u5355\u9898\uff0c\u50bb\u903c\u4e86\u3002 \u7ed9\u4f60\u4e00\u4e2a\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u8ba9\u5b83\u6d82\u8272\uff0c\u6bcf\u79cd\u6d82\u8272\u6709\u9650\u5236\u3002 \u7b54\u6848\u5c31\u662f \\(6 \\times 4^{2^{k}-2}\\) \u3002 \u5feb\u901f\u5e42\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 signed main (){ int n ; scanf ( \"%lld\" , & n ); int k = ( 1l l << n ) -2ll ; //\u4e00\u5b9a\u8981\u5199 1ll,\u4e0d\u7136 1 \u4f1a\u9ed8\u8ba4 int \u5bfc\u81f4\u7206\u70b8\u3002 int ans = qpow ( 4l l , k , p ); ans = ( ans * 6l l ) % p ; printf ( \"%lld \\n \" , ans ); return 0 ; } E2 & F \u00b6 \u8fd8\u4e0d\u4f1a Atcoder Beginning Contest #222 \u00b6 Contest ID: abc_222 A & B \u00b6 \u8bed\u6cd5\u9898\u5c31\u4e0d\u63d0\u4e86 C \u00b6 \u9898\u76ee\u7406\u89e3\u53ef\u80fd\u6bd4\u8f83\u56f0\u96be\uff08 \u5927\u6982\u662f\u8ba9\u4f60\u5728\u67d0\u79cd\u89c4\u5219\u4e0b\u5224\u65ad\u77f3\u5934\u526a\u5200\u5e03\u7684\u8f93\u8d62\u4e4b\u7c7b\u7684\u3002 \u76f4\u63a5\u5927\u6a21\u62df\u5373\u53ef\u3002 D \u00b6 \u7ed9\u4f60\u4e24\u4e2a\u4e0d\u964d\u7684\u5e8f\u5217 \\(a,b\\) \u3002 \u8981\u6c42\u4f60\u6784\u9020\u4e00\u4e2a\u5e8f\u5217 \\(c\\) \u4f7f\u5f97\u5bf9\u4e8e\u4efb\u610f\u7684 \\(i\\) \u90fd\u6709 \\(c_i \\in [a_i,b_i]\\) \u503c\u57df \\(3000\\) \uff0c\u957f\u5ea6 \\(3000\\) \u3002 \u4e00\u4e2a\u6bd4\u8f83\u57fa\u7840\u7684 dp\u3002 \u8bbe \\(f_i\\) \u8868\u793a\u8003\u8651\u5230\u7b2c \\(i\\) \u4e2a\u4f4d\u7f6e\u7684\u65f6\u5019\u7684\u65b9\u6848\u6570\u3002 \u7136\u540e\u4f60\u53d1\u73b0\u56e0\u4e3a \\([a_i,b_i],[a_{i+1},b_{i+1}]\\) \u662f\u53ef\u80fd\u6709\u91cd\u5408\u7684\u3002 \u4f60\u9700\u8981\u53bb\u679a\u4e3e \\(c_i\\) \u5230\u5e95\u9009\u4ec0\u4e48\u7684\u60c5\u51b5\u3002 \u53d1\u73b0\u503c\u57df\u4e58\u4e0a\u957f\u5ea6\u4e5f\u53ea\u6709 \\(9\\times 10^6\\) \uff0c\u6240\u4ee5\u8003\u8651\u4e00\u4e2a\u6734\u7d20\u7684 dp\u3002 \u8bbe \\(f_{i,j}\\) \u8868\u793a\u8003\u8651\u5230\u7b2c \\(i\\) \u4e2a\u4f4d\u7f6e\u65f6\uff0c \\(c_i=j\\) \uff0c\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u5e8f\u5217\u603b\u6570\u3002 \u90a3\u4e48\u65b9\u7a0b\u5c31\u662f \\[f_{i,j}=\\begin{cases}\\sum\\limits_{k=0}^{j}f_{i-1,k} & i \\ge 1,j\\in [a_i,b_i]\\\\1 & i=j=0\\\\0 & \\text{otherwise.}\\end{cases}\\] \u4f46\u662f\u53d1\u73b0\u8fd9\u6837\u5b50\u662f \\(\\text{O}(nm^2)\\) \u7684\uff08 \\(m\\) \u662f\u503c\u57df\uff09\uff0c\u6240\u4ee5\u8003\u8651\u4f18\u5316\u3002 \u7b2c\u4e00\u79cd\u60c5\u51b5\u4f60\u53d1\u73b0\u662f\u4e2a\u524d\u7f00\u548c\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u4f7f\u7528\u524d\u7f00\u548c\u4f18\u5316\u8fd9\u73a9\u610f\u513f\u3002 \u4ee4 $S_{i,j}=\\sum\\limits_{k=0}^{j}f_{i,k} $\uff0c\u7136\u540e\u7528\u524d\u7f00\u548c\u7684\u5f62\u5f0f\u628a \\(S\\) \u5199\u51fa\u6765\u3002 \u7136\u540e\u56e0\u4e3a\u524d\u7f00\u548c\u662f\u4e2a\u9012\u63a8\u5f0f\uff0c\u6240\u4ee5\u4f60\u5c31\u53ef\u4ee5 \\(\\text{O}(nm)\\) AC\u672c\u9898\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 for ( register int i = a [ 1 ]; i <= b [ 1 ]; ++ i ){ f [ 1 ][ i ] = 1 ; } sum [ 0 ] = f [ 1 ][ 0 ]; for ( register int i = 1 ; i <= si -10 ; ++ i ){ sum [ i ] = sum [ i -1 ] + f [ 1 ][ i ]; } for ( register int i = 2 ; i <= n ; ++ i ){ for ( register int j = a [ i ]; j <= b [ i ]; ++ j ){ f [ i ][ j ] = sum [ j ]; } sum [ 0 ] = f [ i ][ 0 ]; for ( register int j = 1 ; j <= si -10 ; ++ j ){ sum [ j ] = ( sum [ j -1 ] + f [ i ][ j ]) % p ; } } int ans = 0 ; for ( register int i = a [ n ]; i <= b [ n ]; ++ i ){ ans = ( ans + f [ n ][ i ]) % p ; } printf ( \"%d \\n \" , ans % p ); E F \u00b6 \u4fe9DP\uff0c\u4e00\u4e2a\u80cc\u5305+\u6811\u4e0a\u5dee\u5206\u4e00\u4e2a\u6362\u6839\uff0c\u4f46\u662f\u4e0d\u4f1a\u5199\u545c\u545c G \u00b6 \u539f\u9898\uff1a 202. \u6700\u5e78\u8fd0\u7684\u6570\u5b57 - AcWing\u9898\u5e93 3696 -- The Luckiest number (poj.org) H \u00b6 \u4e0d\u4f1a Edu #115 \u00b6 Contest ID : 1598 \u7279\u610f\u63d0\u65e9\u56de\u5b66\u6821\u673a\u623f\u6253\u7684\u3002 \u673a\u623f\u6253\u7684\u4eba\u4e0d\u662f\u5f88\u591a\uff0c\u4e0d\u8fc7\u8fd9\u573a\u786e\u5b9e\u6709\u70b9\u6bd2\u7624\uff1f G \u9898\u5168\u573a\u53ea\u6709\u4e24\u4e2a\u4ebaAC\uff0ctourist \u51b2\u4e86\u4e00\u4e2a\u5c0f\u65f6\u3002 F \u9898 MZX\u795e\u60f3\u4e86\u534a\u5c0f\u65f6\u6ca1\u60f3\u51fa\u6765\uff0cCFM \u548c 45d \u5168\u90e8T\u98de \u4f55\u795e\u7684 D \u548c E\u88ab\u53c9\u7206\u4e86\uff0cYL \u7684 D \u8bfb\u9519\u9898\u4e86\u3002 \u4e0d\u8fc7 wqs \u795e \u968f\u4fbf\u4e71\u5207\uff01\uff01orz A \u00b6 \u5927\u7279\u5224\u9898\uff0c\u53ea\u8981\u6709\u4e00\u5bf9 \\(a_i=b_i=1\\) \u90a3\u4e48\u65e0\u89e3\u3002 B \u00b6 \u8fd8\u662f\u5927\u7279\u5224\u9898\u3002 \u4f60\u5c31\u8003\u8651\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u70b9\u5bf9 \\((i,j)\\) \u3002 \u7136\u540e\u5206 \\((0,0)(0,1)(1,0)\\) \u7684\u60c5\u51b5\u8ba8\u8bba\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include <bits/stdc++.h> using namespace std ; #define int long long int T , n ; const int si = 1e3 + 10 ; int a [ si ][ 10 ]; signed main (){ scanf ( \"%lld\" , & T ); while ( T -- ){ scanf ( \"%lld\" , & n ); for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= 5 ; ++ j ){ scanf ( \"%1lld\" , & a [ i ][ j ]); } } bool f = false ; for ( register int i = 1 ; i < 5 ; ++ i ){ for ( register int j = i + 1 ; j <= 5 ; ++ j ){ int cnt = 0 , cntt = 0 , cnttt = 0 ; for ( register int k = 1 ; k <= n ; ++ k ){ if ( a [ k ][ i ] == 1 && a [ k ][ j ] == 0 ) ++ cnt ; else if ( a [ k ][ i ] == 0 && a [ k ][ j ] == 1 ) ++ cntt ; else if ( a [ k ][ i ] == 1 ) ++ cnttt ; } if ( cnt + cntt + cnttt >= n && cnt + cnttt >= ( n >> 1 ) && cntt + cnttt >= ( n >> 1 )){ f = true ; break ; } if ( ! f ) continue ; } } if ( f ) puts ( \"YES\" ); else puts ( \"NO\" ); } return 0 ; } C \u00b6 \u95ee\u4f60\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u5e8f\u5217\uff0c\u6709\u591a\u5c11\u79cd\u53bb\u6389\u4e24\u4e2a\u6570 \\(a_i,a_j\\) \u7684\u65b9\u6848\uff08 \\(i<j\\) \uff09\u4f7f\u5f97\u5e8f\u5217\u5e73\u5747\u6570\u4e0d\u53d8\u3002 \u76f4\u63a5\u7528\u4e2a unordered_map \u6765\u5904\u7406\u6bcf\u4e00\u4e2a\u6570\u7684\u51fa\u73b0\u6b21\u6570\u3002 \u4f60\u53d1\u73b0\u8981\u6709\u89e3\uff0c\u90a3\u4e48\u5e73\u5747\u6570\u80af\u5b9a\u662f .0 \u6216\u8005 .5 \u7ed3\u5c3e\u3002 \u8bf4\u767d\u4e86 \\(2sum\\ \\text{mod}\\ n=0\\) \u3002 \u7136\u540e\u4e3a\u4e86\u9632\u6b62\u91cd\u590d\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u8fd9\u6837\u5b50\u5199\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #include <bits/stdc++.h> using namespace std ; #define int long long int T ; const int si = 2e5 + 10 ; int n , a [ si ]; long double k = 0 ; unordered_map < int , int > mp ; signed main (){ scanf ( \"%lld\" , & T ); while ( T -- ){ scanf ( \"%lld\" , & n ); mp . clear (); int sum = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ scanf ( \"%lld\" , & a [ i ]); sum += a [ i ]; } if (( sum << 1l l ) % n ){ puts ( \"0\" ); continue ; } int kk = sum * 2 / n ; int res = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ res += mp [ kk - a [ i ]]; mp [ a [ i ]] ++ ; } printf ( \"%lld \\n \" , res ); } return 0 ; } // \u7528 map \u5e94\u8be5\u53ef\u4ee5\uff0c\u6211\u8fd9\u4e2a\u88ab\u4eba\u5361\u4e86\u545c\u545c \u6211\u4eec\u53ef\u4ee5\u5148\u628a\u5e8f\u5217\u770b\u4f5c\u5347\u5e8f\u6392\u5e8f\u7684\u3002 \u7136\u540e\u4f60\u53d1\u73b0\u5339\u914d\u7684\u4e24\u4e2a\u7aef\u70b9\u662f\u5173\u4e8e\u5e73\u5747\u6570\u7684\u4f4d\u7f6e\u8fd1\u4f3c\u5bf9\u79f0\u7684\u3002 \u8fd9\u6837\u5b50\u5199\u4f1a\u8ba9\u6bcf\u4e00\u4e2a\u70b9\u5bf9\u7684\u7b54\u6848\u90fd\u5728\u904d\u5386\u5230\u4f4d\u7f6e\u9760\u540e\u7684\u90a3\u4e2a\u70b9\u7684\u65f6\u5019\u624d\u66f4\u65b0\u3002 \u90a3\u4e48\u5c31\u907f\u514d\u4e86\u70b9\u5bf9\u7684\u91cd\u590d\u8ba1\u7b97\uff08\u6837\u4f8b\u4e00\u7684 8 8 8 8 \u7684\u60c5\u51b5\u4e5f\u80fd\u5b8c\u7f8e\u89e3\u51b3\uff09\u3002 D \u00b6 \u5927\u6570\u5b66\u9898\uff08\u5bb9\u65a5+\u7ec4\u5408\uff09 \u95ee\u7ed9\u5b9a\u7684\u4e24\u4e2a\u5e8f\u5217 \\(a,b\\) \u4e2d\u9009\u51fa\u4e09\u4e2a\u4f4d\u7f6e \\(i,j,k\\) \u4f7f\u5f97\u4e0b\u5217\u6761\u4ef6\u81f3\u5c11\u6709\u4e00\u4e2a\u6210\u7acb\uff1a \\(a[i] \\not= a[j] \\not= a[k]\\) \\(b[i] \\not= b[j] \\not= b[k]\\) \u6709\u591a\u5c11\u79cd\u65b9\u6848\u3002 \u8003\u8651\u628a\u4efb\u610f\u9009\u4e09\u4e2a\u4f4d\u7f6e\u7684\u65b9\u6848\u6570\u7b97\u51fa\u6765\uff1a \\(|U|=\\text{C}^{3}_{n}=\\dfrac{n\\times(n-1)\\times(n-2)}{6}\\) \u7136\u540e\u4f60\u8981\u53bb\u6389\u7684\u5c31\u662f\u4e24\u79cd\u90fd\u4e0d\u6ee1\u8db3\u7684\u65b9\u6848\u6570\u3002 \u6211\u4eec\u8003\u8651\u5206\u522b\u8bb0\u5f55 \\(a,b\\) \u5f53\u4e2d\u7684\u6bcf\u4e2a\u6570\u5206\u522b\u5728\u81ea\u5df1\u6240\u5904\u7684\u5e8f\u5217\u5f53\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 \\(cnta,cntb\\) \u3002 \u4f60\u53d1\u73b0\u4f60\u8981\u5904\u7406\u7684\u4e0d\u6ee1\u8db3\u6761\u4ef6\u7684\u5c31\u662f\u201c\u6709\u76f8\u7b49\u201d\u7684\u60c5\u51b5\u3002 \u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6761\u4ef6\uff0c\u4f60\u90fd\u8981\u5904\u7406\u201c\u6709\u4e24\u4e2a\u76f8\u540c\uff0c\u6709\u4e09\u4e2a\u76f8\u540c\u201d\u7684\u60c5\u51b5\u3002 \u6240\u4ee5\u8fd9\u91cc\u5c31\u53c8\u662f\u5bb9\u65a5\uff0c\u5bf9\u4e8e \\(a\\) \uff08 \\(b\\) \u540c\u7406\uff09\uff0c\u6211\u4eec\u8bbe\u4f4d\u7f6e \\(i,j\\) \u51fa\u73b0\u76f8\u540c\u7684\u60c5\u51b5\u96c6\u5408\u4e3a \\(A\\) \uff0c \\(i,k\\) \u76f8\u540c\u7684\u60c5\u51b5\u96c6\u5408\u4e3a \\(B\\) \uff0c \\(j,k\\) \u76f8\u540c\u7684\u60c5\u51b5\u96c6\u5408\u662f \\(C\\) \uff0c\u90a3\u4e48\u6211\u4eec\u8981\u6c42\u7684\u5c31\u662f \\(A \\cup B \\cup C\\) \uff0c\u8fd9\u91cc\u5c31\u53ef\u4ee5\u7528\u5bb9\u65a5\u7b97\u3002 \u8003\u8651\u4f60\u73b0\u5728\u626b\u5230\u4f4d\u7f6e \\(i\\) \uff0c\u90a3\u4e48\u5728 \\(a\\) \u5f53\u4e2d\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u4f4d\u7f6e\u4ed6\u51fa\u73b0\u4e86 \\(cnta_{a_i}\\) \u6b21\uff0c\u5728 \\(b\\) \u91cc\u9762\u51fa\u73b0 \\(cntb _{b_i}\\) \u6b21\uff0c \u90a3\u4e48\u6839\u636e\u4e58\u6cd5\u539f\u7406\uff0c\u5728\u4e0d\u7ba1\u91cd\u4e0d\u91cd\u590d\u8ba1\u7b97\u7684\u60c5\u51b5\u4e0b\u5c31\u6709 \\(cnta_{a_i} \\times cntb_{b_i}\\) \u79cd\u53ef\u80fd\u3002 \u6211\u4eec\u8003\u8651\u5bf9\u8fd9\u4e2a\u4e1c\u897f\u5bb9\u65a5\u4e00\u4e0b\u6765\u53bb\u91cd\u3002 \u56e0\u4e3a\u4f60\u5728\u5176\u4ed6\u5730\u65b9\u8fd8\u53ef\u80fd\u518d\u53d6\u5230\u8fd9\u4e2a\u4f4d\u7f6e\u7684 \u6570\u5b57 \u6240\u4ee3\u8868\u7684\u60c5\u51b5\uff0c\u800c\u4e14\u6bcf\u626b\u5230\u4e00\u4e2a \\(a_i\\) \u6216\u8005 \\(b_i\\) \u5c31\u4f1a\u591a\u7b97\u4e00\u6b21/ \u90a3\u4e48\u6211\u4eec\u5148\u7ed9\u4ed6\u4eec\u51cf\u53bb \\(cnta_{a_i}+cntb_{b_i}\\) \uff0c \u7136\u540e\u4f60\u53d1\u73b0\u8fd9\u4e2a\u4f4d\u7f6e\u672c\u6765\u7684\u90a3\u4e00\u4e2a\u60c5\u51b5\u88ab\u591a\u51cf\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u518d\u52a0\u4e0a \\(1\\) \u3002 \u6211\u4eec\u628a\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u6240\u80fd\u7ed9\u51fa\u7684\u8d21\u732e\u5199\u51fa\u6765\uff1a \\(S_i=cnta_{a_i}\\times cntb_{b_i}-cnta_{a_i}-cntb_{b_i}+1\\) \u3002 \u6240\u4ee5\u6839\u636e\u52a0\u6cd5\u539f\u7406\uff0c\u6211\u4eec\u8981\u6c42\u7684\u90fd\u4e0d\u6ee1\u8db3\u7684\u60c5\u51b5\u5c31\u662f \\(\\sum\\limits^n_{i=1}S_i=\\sum\\limits^{n}_{i=1}[(cnta_{a_i}-1) \\times (cntb_{b_i}-1)]\\) \u3002 \u6240\u4ee5\u7b54\u6848\u662f \\(\\text{C}^3_n-\\sum\\limits^{n}_{i=1}[(cnta_{a_i}-1) \\times (cntb_{b_i}-1)]\\) \u3002 E \u00b6 \u9898\u610f\u81ea\u5df1\u770b\u539f\u9898\u3002 \u53d1\u73b0\u6bcf\u6b21\u4fee\u6539\u683c\u5b50\u53ea\u4f1a\u5f71\u54cd \\(n\\) \u6761\u8def\u5f84\uff0c\u6240\u4ee5\u4f60\u5c31\u6bcf\u6b21\u7ef4\u62a4\u4e00\u4e0b\u3002 \u7136\u540e\u5c31\u53ef\u4ee5 \\(\\text{O}(nq)\\) \u505a\u3002 F & G \u00b6 \u51b2\u4e0d\u52a8\uff0c\u592a\u96be\u529b/kk Technocup 2022 - Elimination Round 2 \u00b6 Contest Id: 1584,1588,1589 \u5f53\u7ecf\u5386\u8fc7\u4e00\u4e9b\u53d8\u5316\u4e4b\u540e\u6253\u7684\u7b2c\u4e00\u6b21 CF\u3002 \u867d\u7136\u662f VP\u3002 \u53e6\u5916\u4e8c\u53f7\u673a\u623f\u53ea\u6709\u6211\u4e00\u4e2a\u4eba\u60f3\u9898\u7684\u611f\u89c9\u786e\u5b9e\u8212\u670d\u3002 1589A,1584A \u00b6 \u6784\u9020\u65b9\u7a0b \\(\\dfrac{x}{u}+\\dfrac{y}{v}=\\dfrac{x+y}{u+v}\\) \u7684\u89e3\uff0c\u5176\u4e2d \\(u,v\\) \u7ed9\u5b9a\u4e14 $(x,y)\\not= (0,0) $ \u7a0d\u5fae\u4e71\u89e3\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\uff0c \\(x=-u^2,y=v^2\\) \u5373\u53ef\u3002 1589B,1584B \u00b6 \u731c\u7684\u7ed3\u8bba\uff0c\u6211\u89c9\u5f97\u53ea\u8981 \\(n\\times m\\) \u80fd\u88ab \\(3\\) \u6574\u9664\u90a3\u4e48\u53ef\u4ee5\u5168\u90e8\u5207\u6210 \\(1 \\times 3\\) \u6216\u8005 \\(3 \\times 1\\) \u7684\u3002 \u7136\u540e\u5176\u4ed6\u60c5\u51b5\u63a8\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\u662f \\(\\dfrac{n\\times m}{3} +1\\) \u3002 1589C,1584C,1588A \u00b6 \u8003\u8651\u5148\u5bf9 \\(a,b\\) \u6392\u5e8f\u3002 \u7136\u540e\u5012\u7740\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\uff0c\u5224\u65ad\u4e0b\u5217\u6761\u4ef6\u662f\u5426\u4e0d\u6210\u7acb\u5373\u53ef\u3002 b[i]-a[i]>1 || b[i]-a[i]<0 \u6210\u7acb\u8f93\u51fa NO \u8dd1\u8def\uff0c\u53cd\u4e4b\u5faa\u73af\u5b8c\u4e86\u8f93\u51fa YES \u5373\u53ef\u3002 D \u00b6 \u4ea4\u4e92\u9898\uff0c\u6211\u6bd4\u8f83Lazy\u6240\u4ee5\u660e\u5929\u505a\u3002","title":"\u65e9\u671fCF\u548cAT\u9898\u89e3"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#codeforces-734","text":"Contest ID: 1551 \u5728\u5b66\u6821\u548c\u6574\u4e2a\u673a\u623f\u4e00\u8d77VP\u7684\u3002","title":"Codeforces #734"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#a","text":"\\(1\\) \u5757\u7684\u786c\u5e01\u7528 \\(c_1\\) \u4e2a, \\(2\\) \u5757\u786c\u5e01\u7528 \\(c_2\\) \u4e2a\u3002 \u95ee\u4f60\u51d1\u51fa \\(n\\) \u5143\u65f6\u7684 \\(\\min(|c_1-c_2|)\\) \u4e00\u773c\u9898\u3002 \u8981 \\(|c_1-c_2|\\) \u6700\u5c0f\u8bf4\u767d\u4e86\u5c31\u662f\u5c3d\u91cf\u5e73\u5747\u3002 \u90a3\u4e48\u5c31\u5c3d\u91cf\u7684\u7528\u4e00\u4e2a \\(1\\) \u7684\u540c\u65f6\u4e5f\u7528\u4e00\u4e2a \\(2\\) \u3002 \u6240\u4ee5\u628a \\(n\\) \u9664\u4ee5 \\(3\\) \uff0c\u5f97\u5230 \\(c_1\\) \u548c \\(c_2\\) \u5404\u81ea\u5fc5\u987b\u8981\u6709\u7684\u4e2a\u6570\uff08\u6b64\u65f6 \\(c_1=c_2\\) \uff09\u3002 \u7136\u540e \\(n\\) \u65e0\u975e\u5c31\u662f\u5269\u4e0b \\(0,1,2\\) \u8fd9\u4e09\u79cd\u60c5\u51b5\u3002 \u5982\u679c\u4e0d\u5269\u90a3\u4e48\u76f4\u63a5\u8f93\u51fa\u3002 \u5982\u679c\u4f59 \\(1\\) \u90a3\u4e48\u591a\u52a0\u4e00\u4e2a \\(1\\) \u5143\u3002 \u5982\u679c\u4f59 \\(2\\) \u90a3\u4e48\u591a\u52a0\u4e00\u4e2a \\(2\\) \u5143\u3002","title":"A"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#b1","text":"\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u5b57\u7b26\u53ef\u4ee5\u6d82\u4e0a\u7ea2\u6216\u7eff\uff0c\u6216\u8005\u4e0d\u6d82\u3002 \u6d82\u4e0a\u76f8\u540c\u989c\u8272\u7684\u6240\u6709\u5b57\u6bcd\u76f8\u4e92\u4e0d\u80fd\u76f8\u540c\uff0c\u4e14\u7ea2\u8272\u548c\u7eff\u8272\u7684\u4e2a\u6570\u90fd\u4e3a \\(Q\\) \uff0c\u6c42 \\(\\max\\{Q\\}\\) \u3002 \u9996\u5148\u8003\u8651\u7b2c\u4e00\u4e2a\u6761\u4ef6\u3002 \u8f6c\u5316\u4e00\u4e0b\u4e5f\u5c31\u662f\u8bf4\u6bcf\u4e00\u79cd\u5b57\u6bcd\u6700\u591a\u53ea\u80fd\u6709\u4e24\u4e2a\u88ab\u6d82\u4e0a\u989c\u8272\u3002 \u6240\u4ee5\u6211\u4eec\u5f00\u4e00\u4e2a\u6876\u7edf\u8ba1\u4e00\u4e0b\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u7684\u51fa\u73b0\u6b21\u6570\u5e76\u5bf9\u5176\u8fdb\u884c\u5224\u65ad\u3002 \u518d\u8003\u8651\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u3002 \u56e0\u4e3a\u53ea\u4f1a\u6709\u4e24\u79cd\u989c\u8272\uff0c\u6240\u4ee5\u6d82\u4e0a\u989c\u8272\u7684\u70b9\u7684\u4e2a\u6570\u5fc5\u987b\u662f\u5076\u6570\uff08 \\(2\\) \u7684\u500d\u6570\uff09\u3002 \u90a3\u4e48\u601d\u8def\u5c31\u51fa\u6765\u4e86\uff0c\u7edf\u8ba1\u4e00\u4e0b\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5e76\u4e14\u7edf\u8ba1\u5b83\u6700\u591a\u6709\u591a\u5c11\u4e2a\u5b57\u6bcd\u53ef\u4ee5\u88ab\u6d82\u4e0a\u989c\u8272\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u79cd\u5b57\u6bcd\uff0c\u5982\u679c\u5b83\u7684\u4e2a\u6570\u5c0f\u4e8e\u7b49\u4e8e \\(2\\) \u90a3\u4e48\u5c31\u90fd\u53ef\u4ee5\u88ab\u6d82\u8272\uff0c\u5982\u679c\u5927\u4e8e\u7b49\u4e8e \\(3\\) \u5c31\u53ea\u6709\u4e24\u4e2a\u53ef\u4ee5\u88ab\u6d82\u4e0a\u989c\u8272\u3002 \u56e0\u4e3a\u6709\u4e24\u79cd\u989c\u8272\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u662f\u53ef\u4ee5\u88ab\u6d82\u4e0a\u989c\u8272\u7684\u5b57\u6bcd\u4e2a\u6570\u9664\u4ee5 \\(2\\) \u3002 \u5982\u679c\u6700\u540e\u53ef\u4ee5\u88ab\u6d82\u4e0a\u989c\u8272\u7684\u5b57\u6bcd\u4e2a\u6570\u662f\u4e2a\u5947\u6570\uff0c\u5c31\u9700\u8981\u5148\u51cf \\(1\\) \u518d\u9664 \\(2\\) \u3002","title":"B1"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#b2","text":"\u5927\u4f53\u540c B1,\u73b0\u5728\u5b57\u7b26\u4e32\u53d8\u6210\u4e86\u5e8f\u5217\uff0c\u800c\u4e14\u6709 \\(k\\) \u79cd\u4e0d\u540c\u989c\u8272\u3002 \u53ea\u8981\u6c42\u4f60\u8f93\u51fa\u65b9\u6848\u5373\u53ef\u3002 \u4eceB1\u7684\u89d2\u5ea6\u8003\u8651\uff0c\u73b0\u5728\u6709 \\(k\\) \u79cd\u4e0d\u540c\u989c\u8272\u3002\u90a3\u4e48\u6211\u4eec\u4ecd\u65e7\u662f\u7edf\u8ba1\u6bcf\u4e00\u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u51fa\u73b0\u591a\u5c11\u6b21\u3002 \u5982\u679c\u5927\u4e8e \\(k\\) \u90a3\u4e48\u5c31\u53ea\u6709 \\(k\\) \u4e2a\u53ef\u4ee5\u88ab\u6d82\u8272\u3002 \u53cd\u4e4b\u90fd\u53ef\u4ee5\u3002 \u7136\u540e\u7edf\u8ba1\u5b8c\u4e4b\u540e\u6211\u4eec\u6309 \\(a[i]\\) \u7684\u5927\u5c0f\u6392\u4e2a\u5e8f\u3002 \u4e5f\u5c31\u662f\u628a\u540c\u4e00\u79cd\u90fd\u6254\u5230\u4e00\u8d77\u5904\u7406\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u79cd\uff0c\u6211\u4eec\u53ea\u6d82\u524d \\(k\\) \u4e2a\uff08\u4fdd\u8bc1\u4e0d\u91cd\u590d\u800c\u4e14\u6d82\u591f\uff09\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002 \u4f46\u662f\u6211\u4eec\u8981\u8f93\u51fa\u65b9\u6848\uff0c\u6240\u4ee5\u9700\u8981\u8bb0\u5f55\u4e00\u4e0b\u5143\u7d20\u7684\u4f4d\u7f6e\u3002","title":"B2"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#c","text":"\u53ea\u7528\u4e94\u4e2a\u5b57\u6bcd \\(\\{a,b,c,d,e\\}\\) \u7ec4\u6210\u4e00\u7bc7\u6587\u7ae0\uff0c \u82e5\u679c\u5176\u4e2d\u4e00\u4e2a\u5b57\u7b26\u7684\u51fa\u73b0\u6b21\u6570\u6bd4\u5176\u5b83\u7684\u52a0\u8d77\u6765\u90fd\u591a\u90a3\u4e48\u8fd9\u7bc7\u6587\u7ae0\u5c31\u662f\u597d\u7684\u3002 \u7ed9\u5b9a\u51e0\u4e2a\u5355\u8bcd\uff0c\u6c42\u6700\u957f\u7684\u597d\u6587\u7ae0\u7684\u5355\u8bcd\u6570\u3002 \u770b\u5230\u53ea\u6709\u4e94\u4e2a\u5b57\u6bcd\uff0c\u6211\u76f4\u63a5\u9ad8\u5174\u4e86\u8d77\u6765\u3002 \u770b\u5230\u65f6\u96504s\uff0c\u6211\u7684\u5634\u89d2\u5c31\u76f4\u63a5\u626c\u4e86\u8d77\u6765\u3002 \u8fd9\u4e0d\u660e\u6446\u7740\u8ba9\u4f60\u6253\u66b4\u529b\u5417\uff1f \u6240\u4ee5\u76f4\u63a5\u7edf\u8ba1\u6bcf\u4e2a\u5b57\u7b26\u7684\u51fa\u73b0\u6b21\u6570\u3002 \u7136\u540e\u5bf9\u4e8e\u6bcf\u79cd\u5b57\u7b26\u6211\u4eec\u6392\u5e8f\u8d2a\u5fc3\u4e00\u4e0b\uff0c\u5982\u679c\u8bf4\u53ef\u4ee5\u9009\u5f53\u524d\u5355\u8bcd\uff0c\u5373\u66f4\u65b0\u7b54\u6848\u3002 \uff08\u8bf4\u662f\u7b80\u5355\u66b4\u529b+\u8d2a\u5fc3\uff0c\u6211\u5374\u5199\u4e86\u534a\u5c0f\u65f6\uff0cwtcl\uff09","title":"C"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#d1-d2-e-f","text":"\u5f85\u8865","title":"D1 D2 E F"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#codeforces-735","text":"Contest ID: 1554 \u4e94\u9898\u573a\uff0c\u6211\u5c45\u7136\u6709ABCD\u3002","title":"Codeforces #735"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#a_1","text":"\u95ee\u4f60\u4e00\u4e2a\u5e8f\u5217\u7684\u6240\u6709\u957f\u5ea6\u4e0d\u5c0f\u4e8e \\(2\\) \u7684\u5b50\u533a\u95f4\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c \u4e58\u79ef\u7684\u6700\u5927\u503c \u3002 \u4ece\u6570\u636e\u8303\u56f4\u5c31\u80fd\u53d1\u73b0\uff0c\u4e00\u5b9a\u662f\u4e2a \\(\\text{O}(T\\times n)\\) \u7684\u7b97\u6cd5\u3002 \u6240\u4ee5\u60f3\u5230\u4e86\u5355\u8c03\u961f\u5217\u6216\u8005\u5355\u8c03\u6808\u7ef4\u62a4\u3002 \u4f46\u662f\u4ed4\u7ec6\u60f3\u60f3\uff0c\u8fd9\u4e2a\u5b50\u533a\u95f4\u7684\u957f\u5ea6\u53ea\u80fd\u4e3a \\(2\\) \u3002 \u4e3a\u4f55\uff1f \u6211\u4eec\u5c31\u5148\u4ece\u957f\u5ea6\u4e3a \\(2\\) \u7684\u533a\u95f4\u5f00\u59cb\u8003\u8651\u3002 \u90a3\u4e48\u5f88\u660e\u663e\u6743\u503c\u5c31\u662f \\(a[l] \\times a[r]\\) \u3002 \u8003\u8651\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(3\\) \u7684\u533a\u95f4\uff0c\u4e14\u91cc\u9762\u7684\u5143\u7d20\u662f \\(\\{a,b,c\\}\\) \uff08\u6309\u987a\u5e8f\uff09\u3002 \u5047\u8bbe \\(b\\) \u662f\u6700\u5927\u7684\uff0c\u90a3\u4e48\u5b83\u5c31\u4f1a\u548c \\(\\min(a,c)\\) \u7ed3\u5408\uff0c\u90a3\u4e48\u5c31\u548c\u957f\u5ea6\u4e3a \\(2\\) \u7684\u6ca1\u6709\u4efb\u4f55\u533a\u522b\u3002 \u5047\u8bbe \\(a\\) \u662f\u6700\u5927\u7684\uff0c\u90a3\u4e48\u6709\u5982\u4e0b\u4e24\u79cd\u60c5\u51b5\u3002 \\(b\\) \u6bd4 \\(c\\) \u5c0f\uff0c\u90a3\u4e48\u8fd9\u4e2a\u533a\u95f4\u7684\u6743\u503c\u4e00\u5b9a\u662f \\(a \\times b\\) \uff0c\u8f6c\u5316\u6210\u4e86\u957f\u5ea6\u4e3a \\(2\\) \u7684\u60c5\u51b5\u3002 \\(b\\) \u6bd4 \\(c\\) \u5927\uff0c\u90a3\u4e48\u8fd9\u4e2a\u533a\u95f4\u7684\u6743\u503c\u5c31\u662f \\(a \\times c\\) \uff0c\u4f46\u662f\u5f88\u660e\u663e\uff0c $a\\times b $ \u4e5f\u5c31\u662f\u957f\u5ea6\u4e3a \\(2\\) \u7684\u65f6\u5019\u7edd\u5bf9\u6bd4\u8fd9\u4e2a \\(a\\times c\\) \u66f4\u4f18\uff08\u56e0\u4e3a\u6211\u4eec\u6700\u7ec8\u8981\u6c42\u7684\u662f\u6700\u5927\u503c\uff09 \u53cd\u8fc7\u6765\u540c\u7406\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u7ed3\u8bba\u6269\u5c55\u5230 \\(n=4,5,6...\\) \u5c31\u80fd\u8bc1\u660e\u7ed3\u8bba\u6b63\u786e\u3002 \u6240\u4ee5\u73b0\u5728\u53ea\u9700\u8981\u8bfb\u5165\u7684\u65f6\u5019\u8ba9\u76f8\u90bb\u7684\u5143\u7d20\u4e24\u4e24\u76f8\u4e58\uff0c\u6c42\u4e58\u79ef\u7684\u6700\u5927\u503c\uff0c\u8fd9\u4e2a\u6700\u5927\u503c\u5c31\u662f\u7b54\u6848\u3002","title":"A"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#b","text":"\u6c42\u6240\u6709\u4e00\u4e2a\u5e8f\u5217\u91cc\u6240\u6709\u7684 \\(i\\times j -k\\times(a_i \\operatorname{or} a_j)\\) \u7684 \\(\\max \\ \\ (k \\in [1,\\min(n,100)])\\) \uff08tips\uff1a\u4e00\u4e2a\u6570\u6309\u4f4d\u6216\u4e0a\u53e6\u4e00\u4e2a\u6570\uff0c\u8fd9\u4e2a\u6570\u7edd\u5bf9\u4e0d\u4f1a\u51cf\u5c0f\uff09 \u6211\u662f\u76f4\u63a5\u51ed\u611f\u89c9\u731c\u7684\u7ed3\u8bba\uff1a \\(i\\in [\\max(n-100,1),n),j=i+1\\) \u7136\u540e\u66b4\u529b\u8dd1\u3002 \u8fd9\u91cc\u6709\u4e2a\u4e25\u8c28\u7684\u505a\u6cd5\uff08\u6765\u81ealg\u9898\u89e3\u533a\uff09","title":"B"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#c_1","text":"\u6c42\u6700\u5c0f\u7684 \\(k\\) \u6ee1\u8db3 \\(k\\not\\in \\{n \\operatorname{xor}0,n \\operatorname{xor}1...n \\operatorname{xor}m\\}\\) \\(n,m\\) \u662f \\(10^9\\) \u7ea7\u522b\u3002 \u6839\u636e\u5f02\u6216\u7684\u67d0\u4e2a\u6027\u8d28\uff1a \\(n \\operatorname{xor} k >m \\Leftrightarrow n \\operatorname{xor} k \\ge m +1\\) \u8bbe \\(x_i=(m+1)_2\\) \u7684\u7b2c \\(i\\) \u4f4d\u3002 \u8bbe \\(k_i=(k)_2\\) \u7684\u7b2c \\(i\\) \u4f4d\u3002 \u90a3\u4e48\u6709\u56db\u79cd\u60c5\u51b5\uff1a \\(x_i=k_i=1\\Rrightarrow k_i=0\\) \\(x_i=k_i=0\\Rrightarrow k_i=0\\) \\(x_i=1,k_i=0\\Rrightarrow k_i=1\\) \\(x_i=0,k_i=1\\Rrightarrow k_i=0\\) \u7a0d\u5fae\u7528\u4f4d\u8fd0\u7b97\u641e\u4e00\u4e0b\u5c31\u884c\u4e86\u3002","title":"C"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#d","text":"\u6211\u76ee\u524d\u505a\u8fc7\u6700\u50bb\u903c\u7684\u6784\u9020\u3002 \u5bb9\u6613\u53d1\u73b0 aaba+k \u5f62\u5f0f\u7684\u6784\u9020\u662f\u5bf9\u7684\u3002 \u5c31\u662f\u524d\u9762\u4e00\u6bb5 a \u6bd4\u540e\u9762\u4e00\u6bb5\u591a\u4e00\u4e2a\uff0c\u7136\u540e\u5728\u4e2d\u95f4\u63d2\u4e00\u4e2a b \u5982\u679c n \u662f\u5947\u6570\u5728\u540e\u9762\u8865\u4e00\u4e2a\u975e a\\b \u7684\u5b57\u7b26\u5c31\u884c\u3002 \u6ce8\u610f\u7279\u5224 \\(\\text{length}=1\\)","title":"D"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#e","text":"\u5f85\u8865","title":"E"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#edu-112","text":"Contest ID: 1555","title":"Edu #112"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#a_2","text":"\u6709 \\(6\\) \u7247\u7684\uff08 \\(15min\\) \uff09 , \\(8\\) \u7247\u7684( \\(20min\\) ), \\(10\\) \u7247\u7684( \\(25min\\) )Pizza\u3002 \u73b0\u5728\u9700\u8981 \u81f3\u5c11 \\(n\\) \u7247 Pizza\uff0c\u95ee\u6700\u5c0f\u7684\u7b49\u5f85\u65f6\u95f4\u3002 \u4e0d\u96be\u53d1\u73b0\u6bcf\u79cd\u5e73\u5747\u4e00\u4e0b\uff0c\u90fd\u662f \\(2.5\\) \u5206\u949f\u4e00\u7247\u3002 \u7136\u540e\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u4f60\u9700\u8981\u7684\u5c0f\u4e8e\u7b49\u4e8e\u516d\u7247\uff0c\u76f4\u63a5 \\(15min\\) \u5c31\u884c\u3002 \u7136\u540e\u8003\u8651\u5927\u4e8e\u516d\u600e\u4e48\u505a\u3002 \u53d1\u73b0\u5176\u5b9e\u8fd9\u4e09\u4e2a\u6570\u53ef\u4ee5\u51d1\u51fa\u6240\u6709\u5927\u4e8e \\(6\\) \u7684\u5076\u6570\u3002 \u53cd\u5411\u601d\u7ef4\u3002 \u5982\u679c\u4f60\u505a\u8fc7\u8fd9\u9053\u9898\uff1a P3951 [NOIP2017 \u63d0\u9ad8\u7ec4] \u5c0f\u51ef\u7684\u7591\u60d1 \u90a3\u4e48\u53ef\u4ee5\u62d3\u5c55\u6210\u4e09\u5143\u7684 \u5076\u6570\u60c5\u51b5 \uff0c\u7136\u540e\u5c31\u80fd\u8bc1\u51fa\u8fd9\u4e09\u4e2a\u6570\u6700\u5927\u4e0d\u80fd\u51d1\u51fa\u7684\u5076\u6570\u662f \\(4\\) \uff0c\u90a3\u4e48\u6700\u5927\u7684\u4e0d\u80fd\u51d1\u51fa\u7684\u6570\u5c31\u662f \\(5\\) \u3002 \u7136\u540e\u5c31\u6574\u5b8c\u4e86\uff0c\u8fd9\u9898\u76f4\u63a5\u7279\u5224\u5c31\u884c\u3002","title":"A"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#b_1","text":"\u7ed9\u4e00\u4e2a\u5bbd\u548c\u9ad8\u7ed9\u5b9a\u7684\u623f\u95f4\uff0c\u4e00\u5f20\u5df2\u7ecf\u653e\u597d\u7684\u684c\u5b50\u7684\u5bf9\u89d2\u7ebf\u9876\u70b9\u5750\u6807\u3002 \u518d\u7ed9\u5b9a\u4e00\u5f20\u957f\u5bbd\u56fa\u5b9a\u7684\u684c\u5b50\uff0c\u95ee\u539f\u6765\u7684\u684c\u5b50\u81f3\u5c11\u8981\u79fb\u52a8\u591a\u5c11\u4e2a\u5355\u4f4d\u624d\u80fd\u653e\u4e0b\u65b0\u684c\u5b50\uff08\u66fc\u54c8\u987f\u8ddd\u79bb\uff09\u3002 \u65b0\u7684\u684c\u5b50\u8981\u6700\u4f18\uff0c\u5c31\u53ea\u80fd\u653e\u5728\u56db\u4e2a\u89d2\u4e0a\uff0c\u53ef\u4ee5\u56db\u79cd\u60c5\u51b5\u90fd\u679a\u4e3e\u3002 \u4e5f\u53ef\u4ee5\u7279\u5224\u8d2a\u5fc3\u4e00\u4e0b\uff0c\u6bd4\u8f83\u7b80\u5355\u3002","title":"B"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#c_2","text":"Alice \u548c Bob \u5728\u4e00\u4e2a \\(2 \\times m\\) \u7684\u77e9\u5f62\u4e0a\u73a9\u6e38\u620f\uff0c\u77e9\u5f62\u7684\u6bcf\u4e00\u4e2a\u683c\u5b50\u4e0a\u90fd\u6709\u4e00\u4e2a\u6570 $ a_{i,j} $ Alice \u548c Bob \u4e00\u5f00\u59cb\u7ad9\u5728\u5de6\u4e0a\u89d2\u683c\u5b50 \\((1,1)\\) \u4e0a\uff0c\u6bcf\u4e2a\u4eba\u90fd\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u79fb\u52a8\uff0c\u76f4\u5230\u79fb\u52a8\u5230\u7ec8\u70b9 \\((2,m)\\) \u4e0a\uff0c\u7ecf\u8fc7\u4e00\u4e2a\u683c\u5b50\u65f6\u4f1a\u53d6\u8d70\u683c\u5b50\u4e0a\u7684\u6570\uff0c\u8d62\u5f97\u76f8\u5e94\u7684\u5f97\u5206 Alice \u9996\u5148\u5f00\u59cb\u79fb\u52a8\uff0cBob \u4e0d\u80fd\u53d6\u8d70 Alice \u5df2\u7ecf\u53d6\u8d70\u7684\u6570 Alice \u671f\u671b\u6700\u5c0f\u5316 Bob \u7684\u5f97\u5206\uff0cBob \u5219\u5e0c\u671b\u6700\u5927\u5316\u81ea\u5df1\u7684\u5f97\u5206 \u6c42Bob \u7684\u6700\u5927\u5f97\u5206\u3002 \u8bfb\u4e00\u4e0b\u9898\u53d1\u73b0\uff0c\u56e0\u4e3a\u53ea\u6709\u4e24\u884c\u800c\u4e14\u53ea\u80fd\u5411\u53f3\u6216\u8005\u5411\u4e0b\u3002 \u4e5f\u5c31\u662f\u8bf4\u4ed6\u4eec\u90fd\u53ea\u80fd\u5411\u4e0b\u4e00\u6b21\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u5165\u624b\u70b9\u3002 \u6ce8\u610f\u5230Alice\u8d70\u8fc7\u4e4b\u540e\u6570\u5b57\u5c31\u6ca1\u4e86\uff0c\u800c\u4e14Alice\u5148\u624b\uff0c\u6240\u4ee5Bob\u4e00\u5b9a\u8981\u5c3d\u91cf\u907f\u5f00Alice\u8d70\u8fc7\u7684\u8def\u3002 \u6bd4\u5982\u4e0a\u56fe\uff0c\u7c89\u8272\u90e8\u5206\u662fAlice\u8d70\u8fc7\u7684\u8def\uff0c\u90a3\u4e48Bob\u80fd\u53d6\u5230\u6570\u5b57\u7684\u53ea\u6709 \\(R1\\) \u6216 \\(R2\\) \u4e24\u90e8\u5206\u3002 \u4e5f\u5c31\u662f\u4ed6\u4e0d\u662f\u4ece\u4e0a\u9762\u5148\u8d70\u901a\u518d\u4e0b\u53bb\u5c31\u662f\u5148\u4e0b\u53bb\u7136\u540e\u8d70\u901a\u3002 \u90a3\u4e48\u6211\u4eec\u679a\u4e3eAlice\u4e0b\u53bb\u7684\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u5229\u7528\u524d\u7f00\u548c\u7ef4\u62a4\u4e00\u4e0b\u6c42\u4e2a \\(\\max\\) \u5373\u53ef\u3002","title":"C"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#d-e-f","text":"\u5f85\u8865","title":"D E F"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#codeforces-736div12","text":"Contest ID: div1 1548,div2 1549 \u6211\u4f9d\u65e7div2 ABCD\u2026\u2026 \u5176\u4ed6\u7684\u76ee\u524d\u8fd8\u4e0d\u4f1a","title":"Codeforces #736(div1+2"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#div2a","text":"\u50bb\u903c\u9001\u5206\u9898\u3002 \u8ba9\u4f60\u627e\u4e00\u5bf9 \\((a,b)\\) \u6ee1\u8db3 \\(a \\operatorname{mod} P = b \\operatorname{mod} P\\) \\(P\\) \u662f\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e \\(5\\) \u7684\u8d28\u6570\u3002 \u6240\u4ee5 \\(P\\) \u4e0d\u53ef\u80fd\u662f\u5076\u6570\uff0c\u4e5f\u5c31\u662f\u8bf4 \\(P-1\\) \u4e00\u5b9a\u662f\u5076\u6570\u3002 \u90a3\u4e48\u76f4\u63a5\u627e \\(P-1\\) \u7684\u968f\u4fbf\u4e24\u4e2a\u5927\u4e8e\u7b49\u4e8e\u4e8c\u7684\u56e0\u5b50\u3002 \u4e3a\u4e86\u65b9\u4fbf\u76f4\u63a5\u8f93\u51fa \\(2\\) \u548c \\((p-1)/2\\) \u5373\u53ef\u3002","title":"div2A"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#div2b","text":"\u8003\u8651\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\u5bf9\u4e8e\u5728\u7b2c \\(i\\) \u5217\u7684\u5352\u8981\u60f3\u5230\u8fbe\u5bf9\u9762\u4e00\u5b9a\u6ee1\u8db3\u4e00\u4e0b\u4e24\u4e2a\u6761\u4ef6\uff1a \u7b2c\u4e00\u6392\u7684\u7b2c \\(i\\) \u5217\u6ca1\u6709\u654c\u5175\uff0c\u76f4\u63a5\u8d70\u8fc7\u53bb\u5373\u53ef\u3002 \u7b2c\u4e00\u6392\u7684\u7b2c \\(i-1\\) \u6216 \\(i+1\\) \u5217\u6709\u654c\u5175\u4e14\u4e4b\u524d\u6ca1\u6709\u6211\u65b9\u5175\u53bb\u5403\u3002 \u7136\u540e\u7a0d\u5fae\u6a21\u62df\u4e00\u4e0b\u5c31\u884c\u4e86\u3002","title":"div2B"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#div1a","text":"\u751a\u81f3\u6bd4 div2A\u8fd8SB\u7684zz\u9898\u3002 \u770b\u8d77\u6765\u662f\u4ec0\u4e48\u9ad8\u5927\u4e0a\u7684\u56fe\u8bba\uff0c\u7136\u800c\u76f4\u63a5\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7684\u51fa\u5ea6\u5c31\u5b8c\u4e86\u3002 \u7ec6\u8282\u7a0d\u5fae\u6709\u70b9\u5361\u4eba\uff0c\u6ce8\u610f\u4e00\u4e0b\u5c31\u884c\u3002","title":"div1A"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#div1b-great","text":"\u554a\u8fd9\u9053\u9898\u6709\u70b9\u6bd2\u7624\uff0c\u6211\u8c03\u4e86\u4e00\u4e2a\u5c0f\u65f6\u5de6\u53f3\uff08\u8981\u4e0d\u662f\u6bd4\u8d5b\u5ef6\u65f610min\u6211\u771f\u7684\u505a\u4e0d\u8d77\uff09\u3002 \u7ed9\u4e00\u4e2a\u5e8f\u5217 \\(a[]\\) \u7684\u533a\u95f4 \\(a_i,a_{i+1},...a_j\\) \u3002 \u8fd9\u4e2a\u533a\u95f4\u662f\u597d\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u4e00\u4e2a \\(\\ge 2\\) \u7684 \\(m\\) \uff0c\u4f7f \\(a_i \\operatorname{mod} m=a_{i+1} \\operatorname{mod} m =...=a_j \\operatorname{mod} m\\) \u95ee\u7ed9\u5b9a\u5e8f\u5217 \\(a[]\\) \u7684\u6700\u5927\u597d\u533a\u95f4\u7684\u5927\u5c0f\u3002 \u8bf4\u5b9e\u8bdd\u2026\u2026\u6211\u662f\u771f\u7684\u4e0d\u6e05\u695a\u8fd9\u4e2a\u795e\u4ed9\u601d\u8def\u600e\u4e48\u6765\u7684\u3002 \u5bf9\u4e8e \\(\\forall x \\in(i,j]\\) \uff0c\u4ee4 \\(a[x]\\) \u51cf\u53bb \\(a[x-1]\\) \uff08\u4e4b\u540e\u8981\u53d6\u7edd\u5bf9\u503c\uff09 \u7136\u540e\u4f60\u4f1a\u53d1\u73b0\u51cf\u4e86\u4e4b\u540e\uff0c\u5047\u8bbe \\(a[x] \\operatorname{mod} m=k\\) \u3002 \u90a3\u4e48 \\(k\\) \u5c31\u4f1a\u88ab\u6d88\u6389\u4e86\uff01\uff01\uff01 \u4e5f\u5c31\u662f \\(|a[x]-a[x-1]| \\operatorname{mod} m =0\\) \uff01\uff01\uff01 \u90a3\u4e48\u53cd\u8fc7\u6765\uff0c\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u4e00\u4e2a\u6700\u957f\u7684 \\(\\gcd\\) \u76f8\u540c\uff08\u4e14 \\(\\gcd>1\\) \uff09\u7684\u533a\u95f4\u5c31\u884c\u4e86\uff01\uff01\uff01 \u7136\u540e\u53d1\u73b0 \\(\\gcd\\) \u8fd9\u73a9\u610f\u513f\u4e0d\u592a\u597d\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff08\u5e38\u6570\u592a\u5927\u4e86\uff09\uff0c\u5206\u5757\u7684 \\(\\text{O}(n\\sqrt{n})\\) \u5f88\u5bb9\u6613\u672c\u9898\u7684\u67d0\u4e9b\u795e\u4ed9\u6570\u636e\u5361\u6b7b\u3002 \u7136\u540e\u6211\u4eec\u5c31\u60f3\u5230\u4e86\u597d\u73a9\u7684 \\(\\text{ST}\\) \u8868\uff01\uff01\uff01\uff01 \u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u5229\u7528 \\(\\text{ST}\\) \u8868\u6765\u7ef4\u62a4\u533a\u95f4\u7684 \\(\\gcd\\) \u3002 \u4f46\u662f\u8fd9\u91cc\u8981\u6c42\u7684\u662f\u6700\u957f\u7684\u533a\u95f4\u957f\u5ea6\uff0c\u518d\u5957\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u5c31\u4f1a\u70b8\u3002 \u90a3\u4e48\u5c31\u638f\u51fa \\(\\text{O}(n\\log n)\\) \u7684\u4e8c\u5206\u5427\u3002 \u6240\u4ee5\u5148\u5dee\u5206\u53d6\u4e2a\u7edd\u5bf9\u503c\u518d\u9884\u5904\u7406\u51fa \\(\\log_2\\) \u3002 \u7136\u540e\u5229\u7528 \\(\\text{ST}\\) \u8868\u7ef4\u62a4 \\(\\gcd\\) \u3002 \u4e4b\u540e\u679a\u4e3e\u533a\u95f4\u5de6\u7aef\u70b9\uff0c\u540c\u65f6\u4e8c\u5206\u533a\u95f4\u53f3\u7aef\u70b9\u3002 \u5e76\u7528\u7ef4\u62a4\u7684\u4fe1\u606f\u8fdb\u884ccheck\u5373\u53ef\u3002 \u5e94\u8be5\u662f\u6211\u6700\u8fd1\u505a\u7684\u6700\u6709\u610f\u601d\u7684\u9898\u4e86\u3002 \u6b64\u5904\u4e8c\u5206\u5199\u6cd5\u76f8\u8f83\u4e8e\u6211\u5e73\u65f6\u7684\u5199\u6cd5\u7a0d\u5fae\u6709\u70b9\u602a\uff0c\u4e0d\u8fc7\u4e5f\u662f\u5bf9\u7684\u3002 \u8fd9\u79cd\u5199\u6cd5\u662f\u4e0d\u4f1a\u53d6\u5230 \\(l\\) \u7684\uff0c\u65b9\u4fbf\u672c\u9898\u66f4\u65b0\u7b54\u6848\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 #include <bits/stdc++.h> using namespace std ; const int si = 2e5 + 10 ; #define int long long int st [ si ][ 20 ]; int a [ si ], logt [ si ]; int T , n , res = 0 ; int gcd ( int a , int b ){ if ( ! b ) return a ; return gcd ( b , a % b ); } int check ( int l , int r ){ return gcd ( st [ l ][ logt [ r - l + 1 ]], st [ r - ( 1 << logt [ r - l + 1 ]) + 1 ][ logt [ r - l + 1 ]]); } void STprework (){ for ( register int i = 2 ; i <= n ; ++ i ){ logt [ i ] = logt [ i >> 1 ] + 1 ; } for ( register int i = 1 ; i <= n ; ++ i ){ int o = abs ( a [ i ] - a [ i + 1 ]); st [ i ][ 0 ] = o ; } for ( register int i = 1 ; i <= logt [ n ]; ++ i ){ int toj = ( n + 1 ) - ( 1 << i ); for ( register int j = 1 ; j <= toj ; ++ j ){ st [ j ][ i ] = gcd ( st [ j ][ i -1 ], st [ j + ( 1 << ( i -1 ))][ i -1 ]); } } } signed main (){ scanf ( \"%lld\" , & T ); while ( T -- ){ scanf ( \"%lld\" , & n ); for ( register int i = 1 ; i <= n ; ++ i ){ scanf ( \"%lld\" , & a [ i ]); } n -= 1 ; STprework (); res = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ if ( st [ i ][ 0 ] == 1 ) continue ; int l = i , r = n ; while ( l < r ){ int mid = ( l + r + 1 ) >> 1 ; if ( check ( i , mid ) == 1 ) r = mid -1 ; else l = mid ; } res = max ( res , l - i + 1 ); } res ++ ; printf ( \"%lld \\n \" , res ); } return 0 ; }","title":"div1B \uff08Great\uff09"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#codeforces-737div2","text":"Contest ID: 1557 \u5bf9\u8fd9\u6b21\u6bd4\u8d5b\u7684\u51fa\u9898\u4eba\u975e\u5e38\u65e0\u8bed\u3002 \u6ca1\u6709\u6c34\u5e73\u5c31\u522b\u6765\u51fa\u9898\u597d\u4e0d\u597d\uff1f \u60a8\u53ea\u4f1a\u62ff\u7740\u677f\u5b50\uff0c\u5957\u8def\u9898\u6539\u4e00\u70b9\u70b9\uff0c\u52a0\u52a0\u7801\u91cf\uff0c\u8f93\u51fa\u65b9\u6848\u6765\u6076\u5fc3\u4eba\u5417\uff1f A\u7684\u8d2a\u5fc3\uff0cB\u7684\u79bb\u6563\uff0cC\u7684\u7ec4\u5408\u6570\uff0cD\u7684\u7ebf\u6bb5\u6811\u4f18\u5316DP\uff0c\u90fd\u662f\u8001trick\uff0cE\u51fa\u4e2a\u4ea4\u4e92\uff0c\u70c2\u5230\u5927\u90e8\u5206\u4ea4\u7684\u968f\u673a\u7b97\u6cd5\u90fd\u80fd\u8fc7st\u3002 \u6211\u6ca1AK\uff0c\u53ea\u662f\u60f3\u55b7\u4e00\u55b7\u51fa\u9898\u4eba\uff0c\u53cd\u6b63\u8fd9\u6bd4\u8d5b\u98ce\u8bc4\u633a\u5dee\u7684\u3002 \u4e0d\u5199\u4e86\uff0c\u6d6a\u8d39\u65f6\u95f4\uff0c\u671f\u5f85 #738 \u80fd\u6709\u8d28\u91cf\u4e00\u70b9\u3002","title":"Codeforces #737(div2)"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#atcoder-beginning-contest-214","text":"Contest ID: abc_214 \u56e0\u4e3aAT\u6bd4\u8d5b\u6ca1\u6709\u90a3\u4e48\u9891\u7e41\uff0c\u6240\u4ee5AT\u7684\u9898\u89e3\u4e5f\u90fd\u6254\u5230Codeforces Solutions \u6765\u4e86\u3002 \u660e\u660e\u53ef\u4ee5\u5199\u51faEF\u4f46\u662fE\u50bb\u903c\u4e86\u3002 \u6211\u4e0d\u914d 8kyu\u3002","title":"Atcoder Beginning Contest 214"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#a-b-c","text":"A\u662f\u8bed\u6cd5\u9898\uff0cB\u662f\u66b4\u529b\u679a\u4e3e\uff0cC\u662f\u65ad\u73af\u6210\u94fe\u6a21\u62df","title":"A B C"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#d-cf915f","text":"\u8fd9\u662f\u4e2a\u7ecf\u5178 trick\uff0c\u4f60\u4f1a\u53d1\u73b0\u8fd9\u4e24\u9898\u7adf\u7136\u548c\u672c\u6b21D\u9898\u60ca\u4eba\u7684\u76f8\u4f3c\uff1a P5351 Ruri Loves Maschera \uff08\u8fd9\u9898\u5b9e\u9645\u4e0a\u662f\u70b9\u5206\u6cbb+BIT\uff0c\u548c\u8fd9\u4e2atrick\u6ca1\u592a\u5927\u5173\u7cfb\uff09 CF915F Imbalance Value of a Tree \u5168\u90e8\u90fd\u662f \\(u,v\\) \u4e4b\u95f4\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u4e00\u4e9b\u4fe1\u606f\u7edf\u8ba1\u3002 \u7279\u522b\u662f CF915F\uff0c\u4f60\u60ca\u5947\u7684\u53d1\u73b0\u4e00\u4e2a \\(\\min,\\max\\) \u505a\u51cf\u6cd5\u540e\u6c42\u548c\uff0c\u4e00\u4e2a\u76f4\u63a5\u5c31\u662f\u5bf9 \\(\\max\\) \u6c42\u548c\u3002 \u6240\u4ee5\u8fd9\u4e24\u9053\u9898\uff0c \u5b8c\u5168\u4e00\u81f4 \u3002 \u6b64 Trick \u7684\u505a\u6cd5\u5c31\u662f\u5229\u7528\u5e76\u67e5\u96c6\u6309\u987a\u5e8f\u5408\u5e76\u7136\u540e\u8ba1\u7b97\u8d21\u732e\u3002 \u8fd9\u9898\u5c31\u662f\u6309\u8fb9\u6743\u503c\u4ece\u5c0f\u5230\u5927\u5408\u5e76\u8fde\u901a\u5757\u7136\u540e\u8ba1\u7b97\u8d21\u732e\u3002 \u9996\u5148\u8003\u8651\u7b80\u5355\u8def\u5f84\u4e0a\u7684 \\(w_{\\max}\\) \u6211\u4eec\u5148\u5bf9\u4e8e\u6240\u6709\u4ee3\u8868\u8fb9\u7684\u4e09\u5143\u7ec4 \\((u,v,w)\\) \u6309\u7167 \\(w\\) \u4ece\u5c0f\u5230\u5927 \u6392\u5e8f\uff0c\u7136\u540e\u4f9d\u6b21\u626b\u63cf\u6bcf\u4e00\u6761\u8fb9\u3002 \u7136\u540e\u4f7f\u7528\u5e76\u67e5\u96c6\u8fdb\u884c\u7ef4\u62a4\u8fde\u901a\u5757\uff0c\u6bcf\u4e00\u6b21\u626b\u63cf\u90fd\u628a \\(u,v\\) \u5408\u5e76\u8d77\u6765\u3002 \u56e0\u4e3a\u73b0\u5728\u6240\u6709\u4e09\u5143\u7ec4\u6309 \\(w\\) \u5355\u8c03\u4e0d\u4e0b\u964d\uff0c\u4e5f\u5c31\u662f\u8bf4\u4f60\u5bf9\u4e8e\u5f53\u524d\u626b\u63cf\u5230\u7684 \\(w\\) \uff0c\u4ed6\u80fd\u505a\u51fa\u8d21\u732e\u7684\u8def\u5f84\u53ea\u6709 \\(siz[\\text{root}(u)]\\times siz[\\text{root}(v)]\\) \u8fd9\u4e48\u591a\u4e2a\u3002 \u4e3a\u5565\uff0c\u4f60\u770b\u540e\u9762\u7684\u6ca1\u6709\u88ab\u52a0\u8fdb\u6765\u7684\u4e09\u5143\u7ec4\uff0c\u6bcf\u4e00\u4e2a\u7684 \\(w\\) \u90fd\u6bd4\u4f60\u5927\uff0c\u90a3\u540e\u9762\u7684\u60c5\u51b5\u4f60\u80af\u5b9a\u6ca1\u6cd5\u505a\u51fa\u8d21\u732e\u3002 \u90a3\u4e48\uff0c\u5728\u6bcf\u4e00\u6b21\u5408\u5e76\u7684\u65f6\u5019\u8ba1\u7b97\u8d21\u732e \\(w \\times siz[\\text{root}(u)]\\times siz[\\text{root}(v)]\\) \u5373\u53ef\u3002 \u7136\u540e CF915F \u5c31\u5b8c\u5168\u4e00\u6837\uff0c\u70b9\u5316\u8fb9\u76f4\u63a5\u6c42\u4e24\u904d\uff0c\u4e00\u6b21\u5347\u5e8f\u4e00\u6b21\u964d\u5e8f\u6392\u5e8f\uff0c\u7136\u540e\u4e24\u4e2a\u603b\u8d21\u732e\u505a\u51cf\u6cd5\u5373\u53ef\u3002 \u90a3\u4e00\u9898\u552f\u4e00\u7684\u65b0 Trick \u5c31\u662f\u5bf9\u4e8e\u8dd1 \\(\\min\\) \u7684 \\(\\texttt{dsu}\\) \u7684\u65f6\u5019\uff0c\u5bf9\u4e8e \\((u,v)\\) \u4e24\u70b9\u4e4b\u95f4\u7684\u8fb9\u6743\u662f \\(\\min(val[u],val[v])\\) \u3002 \\(\\max\\) \u540c\u7406\u5373\u53ef\u3002","title":"D &amp; CF915F"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#e-f-g-h","text":"\u5f85\u8865","title":"E F G H"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#codeforces-738","text":"Contest ID: 1559 CN round \uff0c\u4f53\u9a8c\u8fd8\u53ef\u4ee5\u3002 \u53ef\u80fd\u662f\u4eca\u5e74\u7684\u6700\u540e\u4e00\u6b21\u5b9e\u5730CF\u4e86\u3001","title":"Codeforces #738"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#a_3","text":"\u7a0d\u5fae\u63a8\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\uff0c\u628a\u6574\u4e2a\u5e8f\u5217\u5168\u90e8 \\(\\&\\) \u8d77\u6765\u53ef\u4ee5\u6700\u4f18\u3002 \u7136\u540e\u968f\u4fbf\u6574\u4e00\u6574\u5c31\u53ef\u4ee5\u53d1\u73b0\u4e00\u5b9a\u80fd\u6784\u9020\u51fa\u8fd9\u79cd\u65b9\u6848\u3002 \uff08\u4e4b\u540e\u5565\u65f6\u95f4\u4ed4\u7ec6\u5199\u4e0b\u5427\uff09","title":"A"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#b_2","text":"\u611f\u89c9\u662f\u4e2a\u5f88\u719f\u6089\u7684trick\uff1f \u5c31\u662f\u7ed9\u4f60\u4e00\u4e2a\u5df2\u7ecf\u586b\u4e0a\u4e24\u79cd\u5b57\u7b26 R,B \u7684\u5b57\u7b26\u4e32\uff08\u6709\u4e9b\u5730\u65b9\u7a7a\u7740\uff09\u3002 \u95ee\u4f60\u600e\u4e48\u6837\u8865\u5168\u5269\u4e0b\u7684\u7a7a\u4f59\u80fd\u591f\u4f7f\u76f8\u90bb\u4e24\u4e2a\u5b57\u7b26\u76f8\u7b49\u7684\u60c5\u51b5\u6700\u5c11\u3002 \u4f60\u53ea\u80fd\u586b R,B \u4e24\u4e2a\u5b57\u7b26\u3002 \u5c31\u662f\u8d2a\u5fc3\u4e00\u4e0b\uff0c\u56e0\u4e3a\u9700\u8981\u5c3d\u91cf\u7684\u51fa\u73b0 BRBRB \u8fd9\u79cd\u4ea4\u53c9\u7684\u5f62\u5f0f\u3002 \u6240\u4ee5\u968f\u4fbf\u5224\u4e00\u4e0b\u5c31\u884c\uff0c\u7ec6\u8282\u89c1\u4ee3\u7801\u3002 \u6ce8\u610f\u8981\u5199\u6e05\u695a\u5168\u90e8\u662f ? \u7684\u60c5\u51b5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 while ( T -- ){ scanf ( \"%lld\" , & n ); cin >> s ; s = ' ' + s ; int i = 0 , k = 0 ; for ( i = 1 ; i <= n ; ++ i ) if ( s [ i ] != '?' ){ k = 1 ; break ;} if ( k ){ for ( register int j = i -1 ; j >= 1 ; -- j ){ if ( s [ j + 1 ] == 'R' ) s [ j ] = 'B' ; else s [ j ] = 'R' ; } } else s [ 1 ] = 'B' ; for ( i = 1 ; i <= n ; ++ i ){ if ( s [ i ] == '?' ){ if ( s [ i -1 ] == 'R' ) s [ i ] = 'B' ; else s [ i ] = 'R' ; } } //\u628a\u6ca1\u6709\u8865\u5168\u7684\u5730\u65b9\u8865\u5168 for ( i = 1 ; i <= n ; ++ i ) cout << s [ i ]; puts ( \"\" ); }","title":"B"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#c_3","text":"\u6bd4\u8f83\u7b80\u5355\u7684\u6784\u9020\uff0c\u76f4\u63a5\u653e\u4ee3\u7801\uff08\u538b\u4e86\u884c\uff0c\u4e0d\u662f\u6211\u7684\u6b63\u5e38\u9a6c\u8702\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 while ( T -- ){ scanf ( \"%lld\" , & n ); for ( register int i = 1 ; i <= n ; ++ i ) scanf ( \"%lld\" , & a [ i ]); if ( a [ 1 ] == 1 ){ printf ( \"%lld \" , n + 1 ); for ( register int i = 1 ; i <= n ; ++ i ) printf ( \"%lld \" , i ); puts ( \"\" ); continue ; } if ( a [ n ] == 0 ){ for ( register int i = 1 ; i <= n ; ++ i ) printf ( \"%lld \" , i ); printf ( \"%lld \" , n + 1 ); puts ( \"\" ); continue ; } for ( register int i = 1 ; i <= n ; ++ i ){ if ( a [ i ] == 0 && a [ i + 1 ] == 1 ){ for ( register int j = 1 ; j <= i ; ++ j ) cout << j << \" \" ; cout << n + 1 << \" \" ; for ( register int j = i + 1 ; j <= n ; ++ j ) cout << j << \" \" ; break ; } } puts ( \"\" ); continue ; }","title":"C"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#d1","text":"\u7ed9\u4f60\u4e24\u4e2a\u72ec\u7acb\u7684\u68ee\u6797\uff0c\u73b0\u5728\u6bcf\u4e2a\u68ee\u6797\u90fd\u6709\u4e00\u4e9b\u8fb9\u3002 \u7136\u540e\u5982\u679c\u4f60\u8981\u6dfb\u52a0\u4e00\u6761\u8fb9 \\((u,v)\\) \uff0c\u90a3\u4e48\u4e24\u4e2a\u68ee\u6797\u7684 \\((u,v)\\) \u8fd9\u6761\u8fb9\u90fd\u8981\u52a0\u4e0a\u3002 \u95ee\u5728\u6ee1\u8db3\u8fd9\u4e24\u4e2a\u68ee\u6797\u4ecd\u65e7\u662f\u68ee\u6797\u7684\u6761\u4ef6\u4e0b\uff0c\u6700\u591a\u53ef\u4ee5\u52a0\u591a\u5c11\u6761\u8fb9\u3002 \\(n\\le1000\\) \u3002 \u50bb\u903c\u9898\uff0c\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u5757\u7136\u540e\u66b4\u529b\u679a\u4e3e\u6240\u6709\u6ca1\u6709\u8054\u901a\u7684\u70b9\u5bf9\uff0c\u52a0\u8fb9\u5373\u53ef\u3002","title":"D1"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#d2","text":"\u540c D1 \uff0c \\(n\\le 10^5\\) \u672c\u6b21\u6bd4\u8d5b\u6700\u96be\u7684\u9898\u3002 \u8d5b\u65f6\u6ca1\u505a\u51fa\u6765\uff0c\u8d5b\u540e\u770b\u89c1\u4e00\u4e2a\u795e\u5947\u7684\u505a\u6cd5\uff1a \u5148\u8fde \\(1\\) \uff0c\u7136\u540e\u5bf9\u4e24\u4e2a\u68ee\u6797\u679a\u4e3e\u6bcf\u4e2a\u70b9\u770b\u8ddf \\(1\\) \u6709\u6ca1\u6709\u8fde\uff0c\u5728\u8fd9\u91cc\u9762\u627e\u70b9\u8fde\u7ebf\u3002 \u611f\u89c9\u6709\u70b9\u602a\u4f46\u662f\u80fd\u8fc7\uff08","title":"D2"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#e_1","text":"\\(\\gcd\\) +\u5927\u529b\u5bb9\u65a5+DP \\(\\because\\gcd(a_1,a_2...a_n)=1 \\Leftrightarrow\\sum_{d|\\gcd(a_1,a_2...a_n)}\\mu(d)\\) . \\(\\therefore\\) \u8ba1\u7b97\u5bf9\u4e8e\u6bcf\u4e2a \\(d\\) , \\(\\mu(d)\\) \u88ab\u7b97\u4e86\u591a\u5c11\u6b21\uff0c\u8fd9\u4e2a\u76f4\u63a5 \\(\\texttt{dp}\\) \u5373\u53ef\u3002 \u4e5f\u5c31\u662f\u679a\u4e3e \\(d\\) \uff0c\u7136\u540e\u8981\u8ba1\u7b97\u6709\u591a\u5c11\u4e2a\u6570\u5217\u6ee1\u8db3 \\(d|a_i\\) \u4e14 \\(\\sum_{i=1}^n a_i\\le m\\) \u601d\u8def\u6765\u81ea lgsdwn(Orz lgd) \u548c Silver187 \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 #include <bits/stdc++.h> using namespace std ; #define int long long const int si = 101000 ; const int mod = 998244353 ; int n , m ; int prime [ si ], mu [ si ]; bool vis [ si ]; void Mobius ( int n ){ memset ( vis , 0 , sizeof ( vis )); mu [ 1 ] = 1 , prime [ 0 ] = 0 ; for ( register int i = 2 ; i <= n ; i ++ ){ if ( ! vis [ i ]) prime [ ++ prime [ 0 ]] = i , mu [ i ] = -1 ; for ( register int j = 1 ; j <= prime [ 0 ] && i <= n / prime [ j ]; j ++ ){ vis [ i * prime [ j ]] = 1 ; if ( i % prime [ j ] == 0 ){ mu [ i * prime [ j ]] = 0 ; break ; } mu [ i * prime [ j ]] =- mu [ i ]; } } } int a [ si ], b [ si ]; int l [ si ], r [ si ]; int f [ si ], s [ si ]; signed main (){ scanf ( \"%lld%lld\" , & n , & m ); Mobius ( m ); for ( register int i = 1 ; i <= n ; ++ i ){ scanf ( \"%lld%lld\" , & a [ i ], & b [ i ]); } int res = 0 ; for ( register int d = 1 ; d <= m ; ++ d ){ if ( mu [ d ]){ for ( register int i = 1 ; i <= n ; ++ i ){ l [ i ] = ( a [ i ] + d -1 ) / d , r [ i ] = b [ i ] / d ; } int qwq = m / d ; for ( register int i = 0 ; i <= qwq ; ++ i ){ s [ i ] = 1 ; } for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= qwq ; ++ j ){ f [ j ] = 0 ; } for ( register int j = l [ i ]; j <= qwq ; ++ j ){ f [ j ] = s [ j - l [ i ]]; if ( j - r [ i ] -1 >= 0 ) f [ j ] = ( f [ j ] + mod - s [ j - r [ i ] -1 ]) % mod ; } s [ 0 ] = 0 ; for ( register int j = 1 ; j <= qwq ; ++ j ){ s [ j ] = ( s [ j -1 ] + f [ j ]) % mod ; } } res = ( res + mu [ d ] * s [ qwq ]) % mod ; } } res = ( res + mod ) % mod ; printf ( \"%lld \\n \" , res ); return 0 ; }","title":"E"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#codeforces-739div3","text":"Contest ID: 1560 \u6c34\uff0c\u592a\u6c34\u4e86\uff08\uff09 FST\u7fa4\u7684\u5176\u4e2d\u516b\u4f4d\u7fa4\u53cb\u4e00\u8d77\u6574\u4e86\u4e2a\u6d3b\uff0c\u516c\u7528\u4e00\u4e2a\u795e\u5947\u7684\u540d\u5b57\u7684\u8d26\u53f7\u4e00\u8d77\u51b2rk1\uff0c\uff08\u5f53\u7136\u56e0\u4e3aF1\u7684\u7f5a\u65f6\u6211\u4eec\u662frk3\uff09 1 Demoe,\u5cf0,tjx,tearing,lgd,bmy,monsters \u6211\u5565\u4e5f\u6ca1\u8d21\u732e\uff08\u4ed6\u4eec\u5207\u9898\u592a\u5feb\u4e86\uff09 \u4f46\u662f\u56e0\u4e3a\u5206\u914d\u7684\u539f\u56e0\u6ca1\u670940min\u4ee5\u5185AK\uff08\u545c\u545c\uff09 \u6211\u5c31\u53ea\u80e1\u4e86\u4e00\u4e2aF1\u548cE\uff0c\u7136\u540eE\u8fd8\u5047\u4e86\u3002 \u4e8e\u662f\u540e\u9762\u770b\u5230\u516c\u7528\u53f7AK\u4e86\u4e4b\u540e\u53bb\u5f00A\u9898\u505a\u3002 \u540e\u9762\u5199\u5230 D \u9898\u5c31\u6709\u70b9\u56f0\u4e86\uff0c\u61d2\u5f97\u5199EF12\u4e86\uff0c\uff08\u53cd\u6b63F1F2\u80e1\u51fa\u6765\u4e86\u4e4b\u540e\u518d\u8865\uff0cE\u80e1\u4e0d\u51fa\u6765\u770b\u770b\u9898\u89e3\u628a\uff09","title":"Codeforces # 739\uff08div3\uff09"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#a_4","text":"\u4e00\u4e2a\u6b63\u6574\u6570\u6570\u5217\uff0c\u4ece \\(1\\) \u5f00\u59cb\uff0c\u4e00\u76f4\u5f80\u540e\u4e00\u4e2a\u4e00\u4e2a\u7684\u589e\u52a0 \\(1\\) \uff0c\u4f46\u662f\u6ca1\u6709\u4e09\u7684\u500d\u6570\u548c\u4ee5\u4e09\u7ed3\u5c3e\u7684\u6570\u3002 \u7136\u540e\u95ee\u6570\u5217\u7b2c \\(k\\) \u9879 \\(1\\le k \\le 1000\\) \u3002 \u8bed\u6cd5\u9898\uff1a\u63d0\u524d for \u4e00\u904d\uff0c\u6253\u597d\u4e00\u5343\u9879\u7136\u540e\u76f4\u63a5\u8f93\u51fa\uff0c\u5b8c\u4e86\u3002 \u4e0d\u8fc7\u6628\u665a\u9b54\u6014\u4e86\uff0c\u5c45\u7136\u5fd8\u8bb0\u4e86 % \u7684\u5b58\u5728\uff0c\u76f4\u63a5\u5199\u4e86\u4e00\u4e2a\uff1a 1 2 3 inline int mod ( int x , int p ){ return x < 0 ? ( x + p ) - ((( x + p ) / p ) * p ) : x - (( x / p ) * p ); } \u96be\u602a\u6ca1\u6709\u4e00\u5206\u949fA\u3002","title":"A"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#b_3","text":"\u7ed9\u5b9a\u4e00\u4e2a\u73af\uff0c\u73af\u4e0a\u4ece \\(1 \\sim n\\) \u4f9d\u6b21\u7ad9\u4e86 \\(n\\) \u4e2a\u4eba\uff08 \\(n\\) \u662f\u5076\u6570\uff09\u3002 \u7136\u540e\u5047\u8bbe\u6709\u4e24\u4e2a\u4eba \\(x,y\\) \u9762\u5bf9\u7740\uff0c\u90a3\u4e48 \\(x,y\\) \u7684\u8fde\u7ebf\u5c31\u4e00\u5b9a\u8fc7\u5706\u5fc3\u3002 \u73b0\u5728\u7ed9\u4f60\u4e00\u4e2a\u9762\u5bf9\u7740\u7684\u4e24\u4e2a\u4eba\u7684\u5e8f\u53f7 \\(a,b\\) \uff0c\u518d\u53e6\u5916\u7ed9\u5b9a\u4e00\u4e2a \\(c\\) \uff0c\u6c42 \\(c\\) \u9762\u5bf9\u7684\u4eba\u7684\u5e8f\u53f7\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u73af\uff0c\u8f93\u51fa \\(-1\\) \u3002 \u53d1\u73b0\u4e24\u4e2a\u76f8\u5bf9\u70b9\u5e8f\u53f7\u4e4b\u5dee\u7684\u7edd\u5bf9\u503c\u7684\u4e24\u500d\u5c31\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u73af\u7684 \\(n\\) \uff0c\u7136\u540e\u968f\u4fbf\u5224\u4e00\u4e0b\u5c31\u884c\u3002 1 2 3 4 5 int R = abs ( a - b ), n = R << 1 ; if ( c > n || ( c + R > n && c <= R ) || c + R == a || c + R == b || c - R == a || c - R == b || b > n || a > n ){ puts ( \"-1\" ); continue ; } else printf ( \"%lld \\n \" , c <= R ? c + R : c - R );","title":"B"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#c_4","text":"UPD\uff1a\u8349\uff0c\u8fd9\u9898\u6211\u5b9e\u9645\u4e0aFST\u4e86\uff08\u4e45\u8fdd\u4e86\uff09 \u56e0\u4e3a\u6211\u662funofficial\u53c2\u8d5b\u6240\u4ee5\u6ca1\u6d4bst\u3002 \u9ebb\u4e86\u3002 \u4e4b\u540e\u6709\u65f6\u95f4\u5c31\u8865\u4e00\u53d1\u3002","title":"C"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#d_1","text":"\u53d1\u73b0\u6253\u51fa \\(2^k\\) \u7684\u4e00\u4e2a\u8868\uff08 \\(1\\le k \\le 31\\) \uff09\u5c31\u80fd\u5f00\u59cb\u4e71\u641e\u3002 \u7136\u540e\u6839\u636e\u9898\u76ee\u8981\u6c42\u968f\u4fbf\u66b4\u529b\u5339\u914d\u4e00\u4e0b\u5c31\u884c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 int cal ( string s , string ss ){ int res = 0 ; for ( register int i = 0 ; i < ( int ) s . size () && res < ( int ) ss . size (); ++ i ){ if ( s [ i ] == ss [ res ]) ++ res ; } return res ; } int main (){ scanf ( \"%d\" , & T ); while ( T -- ){ cin >> s ; int res = 1e9 ; for ( register int i = 0 ; i < 109 ; ++ i ){ res = min ( res ,( int )( s . size () - cal ( s , a [ i ]) * 2 + a [ i ]. size ())); } printf ( \"%d \\n \" , res ); } return 0 ; } //a\u662f\u6253\u7684\u8868\u3002 \u5176\u5b9e\u6b63\u89e3\u662f\uff1a\u8d2a\u5fc3\uff0c\u786e\u5b9a\u4e86\u53d8\u6210\u7684\u6570 \\(t\\) ,\u7136\u540e\u4e00\u4f4d\u4e00\u4f4d\u5339\u914d\u3002 \u6211\u672c\u6765\u60f3\u5199\u8fd9\u4e2a\uff08 \u4f46\u6211\u611f\u89c9\u6253\u8868\u5f88\u725b\u903c\u554a\uff0c\u5c31\u6253\u4e86\uff08","title":"D"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#e_2","text":"\u5de8\u5927\u591a\u7591\u60d1\u9898\uff0c\u4e0d\u4f1a\u3002","title":"E"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#f1-f2","text":"\u5bb3\uff0c\u6211\u611f\u89c9\u8fd9\u4e2aF\u662fd2a\u6c34\u5e73\u3002 \u9ebb\u4e86\uff0cF1\u5c31\u662fF2\u7684\u7279\u6b8a\u60c5\u51b5\uff0cF2\u5927\u66b4\u641c\u52a0\u4e2a\u5c0f\u526a\u679d\u4f18\u5316\u5c31\u8fc7\u4e86\u3002 \u4f46\u662f\uff0c\u5176\u5b9e\u6709\u4e00\u70b9\u4e0d\u592a\u597d\u5199\uff08\uff09 \u9898\u76ee\u8981\u6c42\u4f60\u627e\u5230 \u6700\u5c0f\u7684 \u4e0d\u540c\u6570\u5b57\u7684\u4e2a\u6570\u4e0d\u8d85\u8fc7 \\(k\\) \u4e14\u8fd9\u4e2a\u6570\u5927\u4e8e\u7b49\u4e8e \\(n\\) \u7684\u6570\u3002 \u53d1\u73b0F2\u7684 \\(k\\) \u90fd\u53ea\u6709 \\(10\\) ,\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u5927\u66b4\u641c\uff0c\u4ece\u9ad8\u5230\u4f4e\u4f4d\u4e00\u4e2a\u4e00\u4e2a\u4f4d\u5730\u8bd5\u586b\u3002 \u6bcf\u4e00\u4f4d\u4ece \\(1 \\sim 9\\) \u5f00\u59cb\u586b\uff0c\u5f53\u9ad8\u4f4d\u5408\u6cd5\u7684\u65f6\u5019\u7acb\u9a6c\u5411\u4e0b\u586b\uff0c\u76f4\u5230\u6240\u6709\u4f4d\u90fd\u5408\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include <bits/stdc++.h> using namespace std ; const int si = 1e3 + 10 ; int cnt [ si ], ans [ si ]; int T , k , n ; string s ; bool dfs ( int now , int val , bool tag ){ if ( val > k ) return false ; if ( now == n && val <= k ){ for ( register int i = 0 ; i < n ; ++ i ){ printf ( \"%d\" , ans [ i ]); } puts ( \"\" ); return true ; } for ( register int i = tag ? s [ now ] - '0' : 0 ; i <= 9 ; ++ i ){ ++ cnt [ i ], ans [ now ] = i ; if ( cnt [ i ] == 1 ){ if ( dfs ( now + 1 , val + 1 , tag && i == s [ now ] - '0' )) return true ; } else if ( dfs ( now + 1 , val , tag && i == s [ now ] - '0' )) return true ; -- cnt [ i ]; } return false ; } signed main (){ scanf ( \"%d\" , & T ); while ( T -- ){ for ( register int i = 0 ; i <= 10 ; ++ i ){ cnt [ i ] = ans [ i ] = 0 ; } cin >> s ; scanf ( \"%d\" , & k ); n = ( int ) s . size (); if ( ! dfs ( 0 , 0 , 1 )){ printf ( \"10\" ); for ( register int i = 2 ; i < k ; ++ i ){ printf ( \"%d\" , i ); } puts ( \"\" ); } } return 0 ; }","title":"F1 &amp;&amp; F2"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#atcoder-beginning-contest-215","text":"Contest ID\uff1a abc_125 \u90e8\u5206\u8865\u9898\u6709 \u53c2 \u8003","title":"Atcoder Beginning Contest 215"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#a-b","text":"\u8bed\u6cd5\u9898\u3002 B\u7684\u8bdd\u9700\u8981\u624b\u5199 \\(\\log_2\\) \u3002 \u81ea\u5e26\u7684 \\(\\log_2\\) \u4e00\u65e6\u4e0a\u4e86 \\(2^{59}\\) \u5de6\u53f3\u5c31\u4f1a\u51fa\u4e8b\uff0c\u6240\u4ee5\u5efa\u8bae\u624b\u5199\u4e0b\u9762\u7684\uff1a 1 2 3 4 5 6 7 unsigned long long Log2EX ( unsigned long long x ) { unsigned long long i = 0 ; for ( i = 64 ; i >= 0 ; i -- ){ if ( 1 == ( x >> i ) & 0x1 ) break ; } return i ; }","title":"A &amp; B"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#c_5","text":"\u95ee\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32\u6309\u5b57\u5178\u5e8f\u7684\u7b2c \\(k\\) \u4e2a\u6392\u5217\u3002 \u6c34\u9898\uff0c\u4f7f\u7528 next_permutation \u5373\u53ef\u3002\u3001 \u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u8fd4\u56de\u4e0b\u4e00\u4e2a\u6392\u5217\uff0c\u4f46\u662f\u5982\u679c\u8981\u5168\u6392\u5217\u7684\u8bdd\u4e00\u5b9a\u8981\u5148 sort 1 2 3 4 5 6 int cnt = 0 ; sort ( s . begin (), s . end ()); //\u4e00\u5b9a\u8981sort do { ++ cnt ; if ( cnt == n ) cout << s << endl ; } while ( next_permutation ( s . begin (), s . end ())); \u5176\u5b9e\u5b8c\u5168\u53ef\u4ee5\u76f4\u63a5 break \uff0c\u4e0d\u8fc7\u6ca1\u4ec0\u4e48\u5f71\u54cd\u3002","title":"C"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#d_2","text":"\u7ed9\u4e00\u4e2a\u5e8f\u5217\uff0c\u8981\u6c42\u4f60\u627e\u51fa\u6240\u6709\u5728\u503c\u57df \\([1,m]\\) \u4e4b\u95f4\u7684 \\(k\\) \uff0c\u6ee1\u8db3 \\(k\\) \u548c\u5e8f\u5217\u91cc\u7684\u6240\u6709\u6570\u90fd\u4e92\u8d28\u3002 \u8003\u8651\u8d28\u56e0\u6570\u5206\u89e3\uff0c\u5bf9\u6bcf\u4e2a\u6570\u5206\u89e3\uff0c\u5bf9\u8d28\u6570\u6c42\u5e76\u3002 \u90a3\u4e48\u8003\u8651\u6bcf\u4e00\u4e2a \\(i\\) \uff0c\u540c\u6837\u8d28\u56e0\u6570\u5206\u89e3\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 #include <bits/stdc++.h> using namespace std ; #define int long long const int si = 1e5 + 10 ; int n , m , cnt , res ; int a [ si ], prime [ si ]; bool vis [ si ], ans [ si ]; inline int mod ( int x , int p ){ return x < 0 ? ( x + p ) - ((( x + p ) / p ) * p ) : x - (( x / p ) * p ); } int tp [ si ], pos [ si ]; void Euler ( int n ){ for ( register int i = 2 ; i <= n ; ++ i ){ if ( tp [ i ]) continue ; prime [ ++ cnt ] = i , pos [ i ] = cnt ; for ( register int j = ( i << 1 ); j <= n ; j += i ){ tp [ j ] = 1 ; } } } signed main (){ cin >> n >> m ; Euler ( m ); for ( register int i = 1 ; i <= n ; ++ i ){ cin >> a [ i ]; } for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= cnt && 1l l * prime [ j ] * prime [ j ] <= a [ i ]; ++ j ){ if ( ! mod ( a [ i ], prime [ j ])) vis [ j ] = true ; while ( ! mod ( a [ i ], prime [ j ])) a [ i ] /= prime [ j ]; } if ( a [ i ] != 1 ) vis [ pos [ a [ i ]]] = true ; } memset ( ans , true , sizeof ans ); for ( register int i = 1 ; i <= cnt ; ++ i ){ if ( vis [ i ]) for ( register int j = prime [ i ]; j <= m ; j += prime [ i ]) ans [ j ] = 0 ; } for ( register int i = 1 ; i <= m ; ++ i ){ if ( ans [ i ]) res += 1 ; } cout << res << endl ; for ( register int i = 1 ; i <= m ; ++ i ){ if ( ans [ i ]) cout << i << endl ; } return 0 ; }","title":"D"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#e_3","text":"\u9898\u9762\u5f88\u602a\uff0c\u8fd9\u91cc\u76f4\u63a5\u7ed9\u4e00\u4e2a\u7b80\u5316\u7248 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u9009\u62e9\u4e00\u4e2a\u5b50\u5e8f\u5217\u51fa\u6765\uff0c\u6ee1\u8db3\u540c\u4e00\u79cd\u5b57\u7b26\u5728\u8fd9\u4e2a\u5b50\u5e8f\u5217\u91cc\u9762\u90fd\u5728\u4e00\u6bb5\u91cc\uff0c\u6c42\u65b9\u6848\u6570\u5bf9 \\(998244353\\) \u53d6\u6a21\u3002 \u4e5f\u5c31\u662f\u4e0d\u4f1a\u6709 BBABB \u8fd9\u79cd\u60c5\u51b5\u3002 \u5b57\u7b26\u79cd\u7c7b\u5c0f\u4e8e\u5341\uff0c\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u8d85\u8fc7\u4e00\u5343\u3002 \u4e00\u4e2a\u6bd4\u8f83\u677f\u5b50\u7684\u72b6\u538b\uff1f \u8003\u573a\u6ca1\u8c03\u51fa\u6765\u3002 \u8bbe \\(f_{i,msk,t}\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u573a\u6bd4\u8d5b\uff0c\u5f53\u524d\u72b6\u6001\u662f \\(msk\\) \uff0c\u6700\u540e\u6253\u7684\u4e00\u573a\u7684\u79cd\u7c7b\u662f \\(t\\) \u3002 \u4e14\u7b2c \\(i\\) \u573a\u6bd4\u8d5b\u7684\u79cd\u7c7b\u662f \\(k\\) \u3002 \u6240\u4ee5\u6709\u8f6c\u79fb\u65b9\u7a0b\uff1a \\(\\begin{cases}f_{i,msk,t}=f_{i-1,msk,t}\\\\f_{i,msk,t}=f_{i,msk,t}+f_{i-1,msk,t},(t=k)\\\\f_{i,u\\ \\text{or}\\ 2^{k},k}+=f_{i-1,u,t}\\\\f_{i,2^{k},k}=f_{i,2^{k},k}+1\\end{cases}\\) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include <bits/stdc++.h> using namespace std ; const int Mod = 998244353 ; const int si = 1028 ; int n , f [ si ][ si ][ 10 ]; inline int mod ( int x ){ return x < 0 ? ( x + Mod ) - ((( x + Mod ) / Mod ) * Mod ) : x - (( x / Mod ) * Mod ); } string s ; int main (){ cin >> n >> s ; s = ' ' + s ; for ( register int i = 1 ; i <= n ; ++ i ){ int k = s [ i ] - 'A' ; for ( register int msk = 1 ; msk <= 1024 ; ++ msk ){ for ( register int j = 0 ; j < 10 ; ++ j ){ f [ i ][ msk ][ j ] = f [ i -1 ][ msk ][ j ]; if ( j == k ) f [ i ][ msk ][ j ] = mod ( f [ i ][ msk ][ j ] + f [ i -1 ][ msk ][ k ]); } } for ( register int msk = 1 ; msk <= 1024 ; ++ msk ){ if ( msk & ( 1 << k )) continue ; for ( register int j = 0 ; j < 10 ; ++ j ){ f [ i ][ msk | ( 1 << k )][ k ] = mod ( f [ i ][ msk | ( 1 << k )][ k ] + f [ i -1 ][ msk ][ j ]); } } f [ i ][ 1 << k ][ k ] = mod ( f [ i ][ 1 << k ][ k ] + 1 ); } int res = 0 ; for ( register int i = 1 ; i <= 1024 ; ++ i ){ for ( register int j = 0 ; j < 10 ; ++ j ){ res = mod ( f [ n ][ i ][ j ] + res ); } } cout << res << endl ; return 0 ; }","title":"E"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#f","text":"\u7ed9\u5b9a \\(n\\) \u4e2a\u70b9\uff0c\u5b9a\u4e49\u4e24\u4e2a\u70b9\u5bf9 \\((x_1,y_1),(x_2,y_2)\\) \u7684\u8ddd\u79bb\u4e3a \\(\\min (|x_1-x_2|,|y_1-y_2|)\\) \u3002 \u6c42\u4efb\u610f\u4e24\u4e2a\u70b9\u5bf9\u4e4b\u95f4\u8ddd\u79bb\u7684\u6700\u5927\u503c\u3002 \\(n\\) \u5728 \\(2\\times 10^5\\) \u7ea7\u522b\uff0c\u5750\u6807\u90fd\u662f \\(10^9\\) \u7ea7\u522b\u3002 \u7b2c\u4e00\u53cd\u5e94\u662f\u76f4\u63a5\u66b4\u529b\uff0c\u7136\u540e\u53d1\u73b0\u662f \\(\\text{O}(n^2)\\) \u7ea7\u522b\uff0c\u7206\u70b8\u3002 \u7136\u540e\u6709\u4e00\u4e2a\u5206\u522b\u4ece \\(x,y\\) \u8f74\u5927\u529b\u7ef4\u62a4\u533a\u95f4\u4fe1\u606f\u7684\u505a\u6cd5\uff0c\u7136\u540e\u53d1\u73b0\u4e0d\u53ef\u505a\u3002 \u4e8e\u662f\u5728\u6781\u5ea6\u7edd\u671b\u7684\u65f6\u5019\uff0c\u6211\u770b\u89c1\u4e86\u4e8c\u5206\u3002 \u6211\u89c9\u5f97\u8fd9\u4e2a\u4e1c\u897f\u4e5f\u8bb8\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5224\u5b9a\u6027\u95ee\u9898\u3002 \u5047\u8bbe \\(\\min (|x_1-x_2|,|y_1-y_2|) \\ge k\\) \u90a3\u4e48\u5f88\u660e\u663e\uff0c \\(|x_1-x_2| \\ge k ,|y_1-y_2| \\ge k\\) \u7136\u540e\u8fd9\u4e1c\u897f\u5f88\u660e\u663e\u5177\u6709\u5355\u8c03\u6027\uff0c\u73b0\u5728\u8003\u8651\u600e\u4e48\u4e8c\u5206 \\(k\\) \u3002 \u9996\u5148\u4f60\u5148\u5bf9 \\(x\\) \u5347\u5e8f\u6392\u5e8f\u65b9\u4fbf\u5904\u7406\u3002 \u5982\u679c\u5728 \\(k\\) \u53ef\u884c\u7684\u524d\u63d0\u4e0b \u7684\u8bdd\uff0c\u5c31\u5047\u8bbe\u6709\u4e00\u4e2a\u70b9 \\((x_i,y_i)\\) \u3002 \u7136\u540e\u518d\u5047\u8bbe \\(y\\) \u6700\u5c0f\u7684\u70b9\u662f \\((x.y)\\) \uff08\u8fd9\u91cc\u7a0d\u5fae\u8d2a\u5fc3\u4e86\u4e00\u4e0b\uff09\u3002 \u7136\u540e\u5982\u679c\u8bf4 \\(x_i-x \\ge k\\) \u4e86\uff0c\u90a3\u4e48\u5f88\u660e\u663e\uff0c\u56e0\u4e3a \\(k\\) \u662f\u53ef\u884c\u7684\uff0c\u6240\u4ee5 \\(y_i-y \\ge k\\) \u4e5f\u5c31\u662f\u6709\uff1a \\(A\\begin{cases}x_i-k \\ge x\\\\y_i-k \\ge y\\end{cases}\\) \u4f46\u662f\u4f60\u53d1\u73b0\u53ef\u80fd\u4f1a\u6709\u8fd9\u79cd\u60c5\u51b5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 y \\ | \u00b7(xx,ymax) | | | | | | \u00b7(x_i,y_i) | | \u00b7(x,ymin) ---------------------------\\x \u4e5f\u5c31\u662f\u8bf4 \\(y\\) \u7684\u6700\u5927\u503c\u53ef\u80fd\u6bd4 \\(y\\) \u7684\u6700\u5c0f\u503c\u505a\u51fa\u7684\u8d21\u732e\u66f4\u5927\uff0c\u6240\u4ee5\u6700\u5927\u7684 \\(y\\) \u4e5f\u8981\u8dd1\u4e00\u904d\u3002 \u540c\u7406\u5c31\u662f \\(B \\begin{cases}x_i+k \\le x\\\\y_i+k \\le y\\end{cases}\\) \u6240\u4ee5\u6211\u4eec\u5728\u4e8c\u5206\u7684\u91cc\u9762\u53bbcheck \\(A,B\\) \u8fd9\u4e24\u4e2a\u6761\u4ef6\u662f\u5426\u6709\u81f3\u5c11\u4e00\u4e2a\u6210\u7acb\u5c31\u53ef\u4ee5\u4e86\u3002 \u7136\u540e\u5177\u4f53\u6765\u8bf4\u5c31\u662f\u6309\u7167 \\(x\\) \u6392\u4e00\u4e2a\u5e8f\uff0c\u7136\u540e\u8fdb\u884c\u5206\u6bb5\u53cc\u6307\u9488\u3002 \u4ee5 \\(i\\) \u4e3a\u53f3\u7aef\u70b9\uff0c \\(j\\) \u4e3a\u5de6\u7aef\u70b9\uff0c\u90a3\u4e48\u4ec0\u4e48\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u53f3\u79fb\u5de6\u7aef\u70b9\uff1f \u5c31\u662f \\(j+1\\) \u8fd9\u4e2a\u70b9\uff0c\u4ed6\u7684\u6a2a\u5750\u6807\u548c \\(i\\) \u7684\u5dee\u503c\u5927\u4e8e\u7b49\u4e8e\u8fd9\u4e2a \\(k\\) \u3002 \u90a3\u4e48\u663e\u7136\u5982\u679c\u6211\u5728 \\(i\\) \u5904\u505a\u5230\u4e86 \\(j\\) \uff0c\u90a3\u4e48\u6240\u6709 \\(i\\) \u53f3\u8fb9\u7684\u70b9\u548c \\(j\\) \u7684\u7ec4\u5408\u90fd\u662f\u5408\u6cd5\u7684\uff0c\u6240\u4ee5\u8fd9\u4e2a \\(j\\) \u4ed6\u5c31\u6c38\u8fdc\u662f\u5408\u6cd5\u7684\u3002 \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8bb0\u5f55\u4e00\u4e0b\u5df2\u505a\u5230\u7684 \\(j\\) \u4ed6\u7684\u7eb5\u5750\u6807\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff0c\u548c\u6bcf\u4e00\u4e2a\u8fdb\u53bb\u7684 \\(i\\) \u7684\u7eb5\u5750\u6807\u51cf\u4e00\u51cf\uff0c \u5982\u679c\u7eb5\u5750\u6807\u4e4b\u5dee\u8981\u5927\u4e8e\u7b49\u4e8e \\(k\\) \uff0c\u800c\u6a2a\u5750\u6807\u6211\u4eec\u5df2\u7ecf\u8bc1\u660e\u4e86\u4ed6\u7684\u5dee\u503c\u5fc5\u5b9a\u5927\u4e8e\u7b49\u4e8e \\(k\\) \uff0c\u90a3\u4e48\u8fd9\u4e2a \\(k\\) \u5c31\u80af\u5b9a\u662f\u6210\u7acb\u7684\u3002 \u4f46\u662f\u8fd9\u4e2a\u9898\uff0c\u5982\u679c\u53ea\u904d\u5386\u4e00\u6b21\u90a3\u4e48\u7b54\u6848\u53ef\u80fd\u4f1a\u88ab\u6f0f\u6389\uff0c\u6240\u4ee5\u8fd8\u5f97\u4ece\u53f3\u5f80\u5de6\u904d\u5386\u4e00\u904d\uff0c\u6b64\u65f6 \\(j\\) \u662f\u53f3\u7aef\u70b9\uff0c \\(i\\) \u662f\u5de6\u7aef\u70b9\u3002 \u56e0\u4e3a\u4e0d\u53ef\u6297\u529b\u56e0\u7d20\u8ba9\u6211\u603b\u662f\u5947\u602a\u7684WA\uff0c\u6240\u4ee5\u5bf9\u7740tutorial \u6539\u4e86\u4e00\u4e9b\u5730\u65b9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 #include <bits/stdc++.h> using namespace std ; #define xi first #define yi second int n ; int main (){ cin >> n ; vector < pair < int , int > > v ( n ); for ( register int i = 0 ; i < n ; ++ i ){ cin >> v [ i ]. xi >> v [ i ]. yi ; } sort ( v . begin (), v . end ()); int l = 0 , r = 1e9 + 7 ; while ( r - l > 1 ){ int mid = ( l + r ) >> 1 ; queue < pair < int , int > > q ; bool f = false ; int mi = 1e9 + 7 , mx = 0 ; for ( auto p : v ){ while ( ! q . empty ()){ int x = q . front (). xi , y = q . front (). yi ; if ( x > p . xi - mid ) break ; mi = min ( mi , y ), mx = max ( mx , y ); q . pop (); } if ( mi <= p . yi - mid || mx >= p . yi + mid ) f = true ; q . push ( p ); } if ( f ) l = mid ; else r = mid ; } cout << l << endl ; return 0 ; } ```` ### G & H > \u4e0d\u4f1a ## Nowcoder PJ 28 Contest ID \uff1a` 11235 ` \u51fa\u9898\u4eba\u662fFST\u7fa4\u7fa4\u53cb \uff1a CSP - Sept ~~~ \u5f88\u6709\u611f\u89c9 \uff0c \u5f00\u573a\u4e00\u4e2a\u5c0f\u65f6\u53ea\u8fc7\u4e86A \uff0c \u7136\u540e\u6700\u540e\u534a\u5c0f\u65f6\u76f4\u63a5AK \uff0c \u523a\u6fc0 \u3002 \u53e6\u5916\u725b\u5ba2\u7684\u5c0f\u767d\u6708\u8d5b36\u5c31\u4e0d\u5199\u4e86 \uff0c \u53ea\u6709E\u611f\u89c9\u6bd4\u8f83\u6709\u4ef7\u503c \u3002 ### A \u53d1\u73b0\u8fd9\u4e2a\u79fb\u52a8\u662f\u6709\u5468\u671f\u6027\u7684 \uff0c \u800c\u4e14\u79fb\u52a8\u6b21\u6570\u662f $10 ^ { 18 } $ \u3002 \u6240\u4ee5\u5c31\u662f\u4e2a\u8bc8\u9a97\u9898 \uff08 \u76f4\u63a5\u628a\u79fb\u52a8\u6b21\u6570\u6a21\u4e0a\u5b57\u7b26\u4e32\u957f\u5ea6 \uff0c \u7136\u540e\u4ece\u8fd9\u4e2a\u4f59\u6570 $ + 1 $ \u4f4d\u5f00\u59cb\u8f93\u51fa \uff0c \u7136\u540e\u5728\u4ece\u7b2c $1$ \u4f4d\u4e00\u76f4\u8f93\u51fa\u5230\u4f59\u6570\u8fd9\u4e00\u4f4d\u5373\u53ef \u3002 1 minAC \uff08 ``` cpp #include <bits/stdc++.h> using namespace std ; #define int long long string s ; int n , x ; signed main (){ cin >> n >> x ; cin >> s ; s = ' ' + s ; int r = x % n ; for ( int i = r + 1 ; i <= n ; ++ i ) cout << s [ i ]; for ( int i = 1 ; i <= r ; ++ i ) cout << s [ i ]; }","title":"F"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#b_4","text":"\u6700\u540e\u624dAC\u7684\u9898\u3002 \u8fd9\u4e2a\u662f\u5728\u77e9\u9635\u4e0a\u6c42 \\(y\\) \u8f74\u65b9\u5411\u7684 \\(\\texttt{LIS}\\) \uff0c\u7136\u540e\u77e9\u9635\u6700\u5927 \\(5\\times10^3 \\times 10^3\\) \u542c\u4f55\u795e\u8bf4\u6709\u4e00\u79cd \\(\\text{O}(NK)\\) \u7684\u505a\u6cd5\uff0c\u4f46\u662f\u6211\u4e0d\u4f1a\u3002 \u8003\u8651\u8bbe \\(f_i\\) \u8868\u793a\u957f\u5ea6\u4e3a \\(i\\) \u7684 \\(\\texttt{LIS}\\) \u7684\u6700\u5c0f\u7ed3\u5c3e\uff0c\u8fd9\u6837\u5b50\u65b9\u4fbf\u53bb\u8f6c\u79fb\u3002 \u7136\u540e\u53d1\u73b0\u8fd9\u5c31\u662f \\(\\text{O} (n \\log n)\\) \u6c42 \\(\\texttt{LIS}\\) \u7684\u72b6\u6001\u3002 \u6240\u4ee5\u6211\u4eec\u8003\u8651\u76f4\u63a5\u591a\u5faa\u73af\u4e00\u6b21\u7136\u540e\u5957\u4e0a\u677f\u5b50\u3002 \u7136\u540e\u4f60\u53d1\u73b0\u5728 1 2 1 5 1 2 3 4 5 \u7684\u8fd9\u4e2a\u6570\u636e\u4e0a\u4f60\u4f1a\u8f93\u51fa \\(5\\) \u3002 \u4e3a\u5565\u90a3\uff1f \u56e0\u4e3a\u6211\u4eec\u7684\u505a\u6cd5\u4f1a\u5bfc\u81f4\u91cd\u590d\u8986\u76d6\u3002 \u5c31\u548c01\u80cc\u5305\u4e00\u4e2a\u9053\u7406\uff0c\u6240\u4ee5 reverse \u4e00\u4e0b\u5c31\u597d\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #include <bits/stdc++.h> using namespace std ; #define int long long const int si = 1e3 + 10 ; int k , n ; #define pb push_back vector < int > v [ si ]; int f [ si ]; int nlogn_lis (){ int len = 0 ; f [ 0 ] = -1 ; for ( int i = 1 ; i <= n ; ++ i ){ for ( int j = 0 ; j < ( int ) v [ i ]. size (); ++ j ){ if ( v [ i ][ j ] > f [ len ]) f [ ++ len ] = v [ i ][ j ]; else * lower_bound ( f , f + len , v [ i ][ j ]) = v [ i ][ j ]; } } return len ; } signed main (){ scanf ( \"%lld%lld\" , & k , & n ); for ( int i = 1 ; i <= n ; ++ i ){ for ( int j = 1 , q ; j <= k ; ++ j ){ scanf ( \"%lld\" , & q ); v [ i ]. pb ( q ); } reverse ( v [ i ]. begin (), v [ i ]. end ()); } printf ( \"%lld\" , nlogn_lis ()); }","title":"B"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#c_6","text":"\u5927\u539f\u9898\uff0c\u6d1b\u8c37\u4e0a\u7684\u201c\u56fe\u7684\u904d\u5386\u201d\u5c31\u662f\u57fa\u672c\u4e00\u6837\u7684\u3002 \u6211\u672c\u6765\u5199\u7684\u662f\u7f29\u70b9+DP\uff0c\u4f46\u662f\u6302\u4e86\u597d\u591a\u53d1\u3002 \u7a81\u7136\u60f3\u8d77\u53ef\u4ee5\u201c\u6b63\u96be\u5219\u53cd\u201d\u7684\u601d\u60f3\u505a\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\u80fd\u5230\u8fbe\u7684\u70b9\uff0c \u8bb0\u5f55\u53ef\u4ee5\u5230\u8fd9\u4e2a\u70b9\u6240\u6709\u70b9\u7684\u7f16\u53f7\u7684\u6700\u5c0f\u503c\u3002 \u7136\u540e\u5efa\u53cd\u56fe\u8dd1\u4e00\u904d\u5c31\u884c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <bits/stdc++.h> using namespace std ; const int si = 1e5 + 10 ; int n , m , f [ si ]; vector < int > g [ si ]; vector < int > v ; void dfs ( int x , int d ){ if ( f [ x ]) return ; f [ x ] = d ; for ( int i = 0 ; i < g [ x ]. size (); i ++ ) dfs ( g [ x ][ i ], d ); } int main (){ scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 , u , vv ; i <= m ; i ++ ){ scanf ( \"%d%d\" , & u , & vv ); g [ vv ]. push_back ( u ); } for ( int i = 1 ; i <= n ; i ++ ) dfs ( i , i ); for ( int i = 1 ; i <= n ; i ++ ) v . push_back ( f [ i ]); sort ( v . begin (), v . end ()); v . erase ( unique ( v . begin (), v . end ()), v . end ()); for ( int i = 0 ; i < ( int ) v . size (); ++ i ) cout << v [ i ] << \" \" ; return 0 ; }","title":"C"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#d_3","text":"\u5f88\u7cbe\u5999\u7684DP\u3002 \u53d1\u73b0\u6b63\u7740\u505a\u5f88\u9ebb\u70e6\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u5e8f\u5217\u5012\u8fc7\u6765\uff0c\u53d1\u73b0\u8fd9\u4e1c\u897f\u5f88\u5e73\u51e1\u3002 \u8bbe \\(f_i\\) \u8868\u793a\u5012\u8fc7\u6765\u4e4b\u540e\u4ece \\([1,i]\\) \u8fd9\u4e2a\u533a\u95f4\u5168\u90e8\u5403\u5b8c\u7684\u6700\u5927\u503c\u3002 \u7136\u540e\u8003\u8651 \\(a_i\\) \uff0c\u4ed6\u4e0d\u662f\u8fd9\u4e2a\u533a\u95f4\u6700\u540e\u4e00\u4e2a\u5403\u7684\u5c31\u662f\u7b2c\u4e00\u4e2a\u5403\u7684\u3002 \u6240\u4ee5\u5904\u7406\u51fa \\(\\Delta\\) \u7684\u524d\u7f00\u548c\uff0c\u6240\u4ee5\u5206\u4e24\u79cd\u60c5\u51b5\u8f6c\u79fb\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #include <bits/stdc++.h> using namespace std ; #define int long long const int si = 2e5 + 10 ; int n ; int a [ si ], delta [ si ]; int f [ si ], sum [ si ]; inline int cal ( int pos ){ return (( pos -1 ) * delta [ pos ]) + a [ pos ]; } signed main (){ scanf ( \"%lld\" , & n ); for ( int i = n ; i >= 1 ; -- i ){ scanf ( \"%lld\" , & a [ i ]); } for ( int i = n ; i >= 1 ; -- i ){ scanf ( \"%lld\" , & delta [ i ]); } for ( int i = 1 ; i <= n ; ++ i ){ sum [ i ] = sum [ i -1 ] + delta [ i ], f [ i ] = -10737418190000000 ; } f [ 1 ] = a [ 1 ]; for ( int i = 2 ; i <= n ; ++ i ){ f [ i ] = max ( f [ i -1 ] + sum [ i -1 ] + a [ i ], f [ i -1 ] + cal ( i )); } return printf ( \"%lld\" , f [ n ]), 0 ; }","title":"D"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#atcoder-beginning-contest-216","text":"Contest ID: abc_216 \u5f00\u5b66\u524d\u4e00\u5929\u665a\u4e0a\u6709\u8fde\u7740\u7684ABC\u548c\u4e00\u573aCF\uff0c\u53ef\u4ee5\u4e0a\u5927\u5206\u529b\uff01\u3002 \u56e0\u4e3a\u660e\u5929\u5c31\u5f00\u5b66\u4e86\u6240\u4ee5\u5c31\u5148\u5495\u8fd9\u4e0d\u5199\u3002 \u5230\u65f6\u5019\u8bfe\u8868\u51fa\u6765\u4e4b\u540e\u627e\u7ade\u8d5b\u8bfe\u65f6\u95f4\u4e0a\u6765\u673a\u623f\u5199\u3002 G \u662f\u4e2a\u88f8\u7684\u5dee\u5206\u7ea6\u675f\uff0c\u53ef\u60dc\u6ca1\u5199\uff0c\u4e0d\u7136\u5c31\u53ea\u5dee H \u4e86\u3002 \u6700\u8fd1\u6253\u7684\u6700\u597d\u7684\u4e00\u6b21ABC\uff08\u53ef\u80fd\u662f\u6c34\u4e86\uff1f\uff09","title":"Atcoder Beginning Contest 216"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#a-b_1","text":"\u90fd\u662f\u8bed\u6cd5\u9898\u3002 A\u7684\u8bdd\u7279\u5224\u4e00\u4e0b\uff0cB\u7684\u8bdd\u6574\u4e2a map<pair<string,string>,bool> \u5c31\u8fc7\u4e86","title":"A &amp; B"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#c_7","text":"\u5f88\u5999\uff0c\u4f60\u6709 \\(120\\) \u6b21\u64cd\u4f5c\uff0c\u53ef\u4ee5\u628a\u7ed9\u5b9a\u7684\u503c\u52a0\u4e00\uff0c\u6216\u8005\u628a\u503c\u4e582. \u95ee\u6784\u9020\u4e00\u4e2a \\(2^{64}\\) \u4ee5\u5185\u7684\u6574\u6570\u7684\u65b9\u6848\u3002 \u53d1\u73b0 \\(120\\) \u6b21\u5b8c\u5168\u591f\u4e86\u3002 \\(120\\) \u4ee5\u5185\u7684\u8bdd\u5c31\u76f4\u63a5\u4e00\u76f4\u52a0\u4e00\u5c31\u53ef\u4ee5\u3002 \u53cd\u4e4b\u5982\u679c \\(n\\) \u662f\u5947\u6570\uff0c\u51cf\u4e00\u7136\u540e\u4e00\u76f4\u9664\u4e8c\uff0c\u7136\u540e\u5982\u679c\u53c8\u662f\u5947\u6570\u90a3\u5c31\u91cd\u590d\u3002 \u76f4\u5230 \\(n\\) \u4e3a \\(0\\) \u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <bits/stdc++.h> using namespace std ; long long n ; int main (){ scanf ( \"%lld\" , & n ); if ( n <= 120 ){ for ( register int i = 1 ; i <= n ; ++ i ){ putchar ( 'A' ); } return 0 ; } else { string s ; bool f = false ; if ( n & 1 ) n -= 1 , f = true ; while ( n ){ if ( n % 2 == 0 ) n /= 2 , s = 'B' + s ; if ( n & 1 ) n -= 1 , s = 'A' + s ; } if ( f ) s += 'A' ; cout << s << endl ; } }","title":"C"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#d_4","text":"D \u7684\u8bdd\u5c31\u76f4\u63a5\u5f00\u4e00\u4e2a deque \u548c\u4e00\u4e2a queue \u6a21\u62df\u5c31\u53ef\u4ee5\u4e86\u3002 \u5f53\u7136\u4f60\u53ef\u4ee5\u5229\u7528\u62d3\u6251\u7684\u601d\u60f3\u76f4\u63a5\u5efa\u56fe\u7136\u540e\u8dd1\u4e00\u4e2a\u62d3\u6251\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 #define int long long int n , m , sz [ MAXN ], num ; pair < int , int > pos [ MAXN ]; deque < int > a [ MAXN ]; queue < int > q ; void del ( int x ){ a [ x ]. pop_front (); if ( a [ x ]. size ()){ int u = a [ x ]. front (); if ( pos [ u ]. fr == 0 ) pos [ u ]. fr = x ; else pos [ u ]. se = x , q . push ( u ), num ++ ; } } signed main (){ cin >> n >> m ; for ( register int i = 1 ; i <= m ; ++ i ){ cin >> sz [ i ]; for ( register int j = 1 ; j <= sz [ i ]; ++ j ){ int tmp ; cin >> tmp ; a [ i ]. pb ( tmp ); } } for ( register int i = 1 ; i <= m ; ++ i ){ int u = a [ i ][ 0 ]; if ( pos [ u ]. fr == 0 ) pos [ u ]. fr = i ; else pos [ u ]. se = i , q . push ( u ), num ++ ; } while ( ! q . empty ()){ int u = q . front (); q . pop (); del ( pos [ u ]. fr ), del ( pos [ u ]. se ); } if ( num == n ) puts ( \"Yes\" ); else puts ( \"No\" ); return 0 ; }","title":"D"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#e_4","text":"\u5927\u6bd2\u7624\u8d2a\u5fc3\uff0c\u5efa\u4e00\u4e2a\u5927\u6839\u5806\u7136\u540e\u628a\u6240\u6709\u4e1c\u897f\u4e22\u8fdb\u53bb\u7ef4\u62a4\u3002 \u7136\u540e\u6bcf\u6b21\u628a\u5806\u9876 \\(top\\) \u4e4b\u540e\uff0c\u628a \\(top-1\\) \u6254\u8fdb\u53bb\u5c31\u53ef\u4ee5\u3002 \u8fd9\u6837\u5b50\u8fd8\u4e0d\u592a\u591f\u3002\u9700\u8981\u7a0d\u5fae\u4f18\u5316\u4e00\u4e0b\uff0c\u5c31\u81ea\u5df1\u7406\u89e3\u5427\u3002 \u8fd9\u4e2a\u4e1c\u897f\u6211\u6ca1\u505a\u51fa\u6765\uff0c\u90a3\u4efd\u4ee3\u7801\u662f\u6709\u4e2a\u4eba\u8981\u6211\u5e2e\u4ed6\u5403\u7f5a\u65f6\u4ea4\u7684\uff08","title":"E"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#f_1","text":"DP\uff0c\u9996\u5148\u628a \\(a\\) \u964d\u5e8f\u6392\u4e00\u904d\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(j \\in [1,n]\\) \uff0c\u5047\u8bbe \\(f_j\\) \u8868\u793a\u9009\u4e0a \\(a_j\\) \uff0c\u4e0d\u7ba1\u5176\u4ed6\u7684\u600e\u4e48\u9009\u6240\u5f97\u5230\u7684\u89e3\u3002 \u7136\u540e\u4f60\u53d1\u73b0 \\(a_j\\) \u8981\u6ee1\u8db3 \\(\\ge b_k + \\sum\\limits_{i \\subset S} b_i,S=\\{k+1,k+2,...,n\\}\\) \u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u80cc\u5305\uff0c\u4e0d\u8fc7\u9700\u8981\u524d\u7f00\u548c\u4f18\u5316\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 const int limit = 5000 ; sort ( q + 1 , q + 1 + n ); f [ 0 ][ 0 ] = 1 ; for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 0 ; j <= limit ; ++ j ){ f [ i ][ j ] = f [ i -1 ][ j ]; } for ( register int j = q [ i ]. b ; j <= limit ; ++ j ){ f [ i ][ j ] += f [ i -1 ][ j - q [ i ]. b ], mod ( f [ i ][ j ]); } } for ( register int i = 0 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= limit ; ++ j ){ f [ i ][ j ] += f [ i ][ j -1 ], mod ( f [ i ][ j ]); } } for ( register int i = 1 ; i <= n ; ++ i ){ if ( q [ i ]. a < q [ i ]. b ) continue ; ans += f [ i -1 ][ q [ i ]. a - q [ i ]. b ], mod ( ans ); } printf ( \"%lld \\n \" , ans );","title":"F"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#g","text":"\u88f8\u7684\u5dee\u5206\u7ea6\u675f\u3002 \u4f46\u662f\u5199\u6302\u4e86\u545c\u545c\u545c Reference: https://www.cnblogs.com/registergen/p/abc216_solution.html","title":"G"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#deltix-round-summer-2021-cf1556","text":"Contest ID: CF1556 \u8fd9\u573a\u6781\u5ea6\u6bd2\u7624\u554a\u554a\u554a\u554a\uff0cD\u51fa\u4e86\u4e2a\u4ea4\u4e92+\u5927\u6bd2\u7624\u6784\u9020\u3002 \u7136\u540eE\u6211\u5f00\u59cb\u5148\u5199\u7684\u66b4\u529b\uff0c\u7136\u540e\u53d1\u73b0\u8981\u7528RMQ\u4f18\u5316\uff0c\u4e8e\u662f\u5199\u4e86\u4e00\u4e2aST\u8868\u3002 \u7136\u540e\u8d5b\u540eCFM\u7ed9\u4e86\u6211\u4e00\u7ec4\u6570\u636e\u628a\u6211\u7684\u9519\u8bef\u505a\u6cd5\u53c9\u6389\u4e86\u3002 \u4f46\u662f\u5e76\u6ca1\u6709\u5728ST\u91cc\u9762\u51fa\u73b0ovo\uff0c\u6211\u5f53\u65f6\u4ee5\u4e3a\u8981FST\u4e86\uff0c\u4e8e\u662f\u6781\u5ea6\u751f\u6c14\u3002 \u65e9\u4e0a\u8d77\u6765\u53d1\u73b0\u5374\u4e0a\u5206\u4e86\uff0c\u56e0\u4e3aE\u7684systest\u592a\u5f31\u4e86\uff01 \u7136\u540e\u8d81\u8d70\u4e4b\u524d\u6539\u4e86\u4e00\u4e0b\uff0c\u628a\u9519\u8bef\u505a\u6cd5\u6539\u5bf9\u4e86\uff0c\u5f88\u6709\u611f\u89c9\uff01 \u6bd4\u8f83\u53ef\u60dc\u7684\u5c31\u662f\u6ca1\u4e0aCM\uff0c\u545c\u545c\uff0c\u8981\u662fD\u4ea4\u4e92\u90e8\u5206\u4e0d\u5199\u6302\u5c31\u4e0aCM\u4e86\u545c\u545c\u3002 \u9898\u89e3\u7684\u8bdd\u4e4b\u540e\u518d\u6765\u5199\uff0c\u4eca\u5929\u5f00\u5b66\u4e86\u6ca1\u65f6\u95f4\u545c\u545c\u545c\u3002 \uff08\u542c\u8bf4 tourist \u53ea\u6709rk22\uff0c\u6bd2\u7624\uff01\uff08\u5176\u5b9e\u662f\u56e0\u4e3a\u4ed6\u6700\u540e\u9762\u4e24\u9053\u4f3c\u4e4e\u56e0\u4e3a\u4ec0\u4e48\u6ca1\u505a\uff09 \u8fd9\u4e0b\u9762\u7a7a\u7740\u7684\u90fd\u662f\u6ca1\u65f6\u95f4\u5199\u7684\uff08ABC\u7684\u90fd\u662f\u5230\u5b66\u6821\u4e4b\u540e\u6e9c\u53bb\u673a\u623f\u5199\u7684\uff09","title":"Deltix Round, Summer 2021 (CF1556)"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#a_5","text":"\u731c\u4e86\u4e2a\u7ed3\u8bba\u8fc7\u4e86\u3002 \u53d1\u73b0\u5982\u679c \\(c,d\\) \u7684\u5947\u5076\u6027\u4e0d\u540c\uff0c\u80af\u5b9a\u4e0d\u80fd\u6784\u9020\u3002 \u6392\u9664\u65e0\u89e3\u4e4b\u540e\uff0c\u5982\u679c\u5168\u662f \\(0\\) \u5c31\u4e0d\u7528\u6784\u9020\uff0c\u7136\u540e \\(c=d\\) \u5c31\u53ea\u9700\u8981\u4e00\u6b65\u3002 \u5982\u679c \\(c \\not= d\\) \u7684\u8bdd\uff0c\u7b2c\u4e00\u6b65\u6784\u9020 \\([c,d]\\) \u8fd9\u4e2a\u533a\u95f4\u7684\u4e2d\u4f4d\u6570\uff0c\u7136\u540e\u518d\u5411\u4e0a\u5411\u4e0b\u6784\u9020\u4e00\u6b21\u5373\u53ef\u3002","title":"A"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#bcde","text":"\u5495\u7740\uff0c\u4e0d\u60f3\u5199\u4e86\u3002","title":"BCDE"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#fgh","text":"\u56e0\u4e3a\u662f div1+div2,\u6240\u4ee5\u540e\u4e09\u9898\u73b0\u5728\u771f\u7684\u4e0d\u4f1aqwq","title":"FGH..."},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#codeforces-round-747","text":"Contest ID : 1594 \u5f88\u4e45\u6ca1\u6253\u4e86\uff0c\u73b0\u5728\u505c\u8bfe\u671f\u95f4\u6709\u65f6\u95f4\u90a3\u4e48\u5c31\u6253\u4e86\u4e00\u4e0b\u3002 \u4f46\u662f\u624b\u611f\u5f88\u4e0d\u597d\uff0cA \u50bb\u903c\u4e86\uff0cB\u50bb\u903c\u4e86\uff0cE1\u50bb\u903c\u4e86\u3002 \u540c\u673a\u623f\u7b2c\u4e00\u6b21\u6253\u7684\u90fd\u540a\u6253\u6211\u3002 \u53ea\u6709 ACD /kk","title":"Codeforces Round #747"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#a_6","text":"\u6784\u9020\u4e00\u4e2a\u533a\u95f4 \\(l,r\\) \u4f7f\u5f97\u533a\u95f4\u548c\u4e3a \\(n\\) \u3002 \u56e0\u4e3a\u53ef\u4ee5\u662f\u8d1f\u6570\uff0c\u6240\u4ee5\u76f4\u63a5 \\([1-n,n]\\) \u3002","title":"A"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#b_5","text":"\u5927\u7b80\u5355\u9898\uff0c\u50bb\u903c\u4e86\u3002 \u95ee\u4f60\u7531 \\(n\\) \u7684\u6574\u6570\u6b21\u5e42\u7ec4\u6210\u6570\u7684\u7b2c \\(k\\) \u5927\u3002 \u53ef\u4ee5\u7528\u4e8c\u8fdb\u5236\u505a\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include <bits/stdc++.h> using namespace std ; #define int long long int T ; int n , k ; const int p = 1e9 + 7 ; signed main (){ scanf ( \"%lld\" , & T ); while ( T -- ){ int res = 0 ; int delta = 1 ; scanf ( \"%lld%lld\" , & n , & k ); for ( register int j = 1 ; j <= 32 ; ++ j ){ if ( k & ( 1 << ( j -1 ))) res = ( res + delta ) % p ; delta *= n , delta %= p ; } printf ( \"%lld \\n \" , res ); } return 0 ; }","title":"B"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#c_8","text":"\u8981\u6c42\u4f60\u628a\u5b57\u7b26\u4e32\u6240\u6709\u4f4d\u53d8\u6210\u7ed9\u5b9a\u7684\u5b57\u7b26 \\(ch\\) \u6bcf\u6b21\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u6570 \\(x\\) \uff0c\u5bf9\u4e8e\u6240\u6709\u7684 \\(s[i],x \\not| \\ \\ i\\) \uff0c\u4ee4\u4ed6\u53d8\u6210 \\(ch\\) \u3002 \u95ee\u6700\u5c0f\u64cd\u4f5c\u6b21\u6570\u3002 \u53d1\u73b0\u6700\u591a\u53ea\u9700\u8981\u4e24\u6b21 : \\(x=n-1.x=n\\) \u3002 \u7136\u540e\u4e0d\u7528\u52a8\u4e86\u76f4\u63a5\u7279\u5224 \\(0\\) \u3002 \u7136\u540e\u8003\u8651\u7528 \\(i\\times j\\) \u8fd9\u6837\u7c7b\u4f3c\u6b27\u62c9\u7b5b\u7684\u529e\u6cd5\u53bb\u5224\u65ad\u662f\u5426\u80fd\u4e00\u6b21\u5e72\u5b8c\u5373\u53ef\u3002","title":"C"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#d_5","text":"\u662f\u4e2a\u5e76\u67e5\u96c6\uff0c\u6709\u70b9\u50cf\u98df\u7269\u94fe\u90a3\u4e00\u9898\u3002 \u5185\u9b3c\u53ea\u4f1a\u8bf4\u5047\u8bdd\uff0c\u597d\u4eba\u53ea\u4f1a\u8bf4\u771f\u8bdd\u3002 \u7136\u540e\u6bcf\u4e2a\u4eba\u4f1a\u6307\u8ba4\u8c01\u662f\u4ec0\u4e48\u8eab\u4efd\u3002 \u95ee\u4f60\u6700\u591a\u6709\u591a\u5c11\u5185\u9b3c\u3002 \u8003\u8651\u5206\u7c7b\u8ba8\u8bba\u3002 \u5982\u679c A \u8bf4 B \u662f\u597d\u4eba\uff0c\u90a3\u4e48 A \u548c B \u7684\u8eab\u4efd\u80af\u5b9a\u662f\u4e00\u6837\u7684\u3002 \u56e0\u4e3a\u5982\u679c A \u662f\u597d\u4eba\uff0c\u8bf4\u771f\u8bdd\uff0c\u90a3\u4e48 B \u4e5f\u662f\u597d\u4eba\u3002 \u53cd\u4e4b A \u662f\u5185\u9b3c \uff0c\u8bf4\u5047\u8bdd\uff0c\u90a3\u4e48 B \u4e5f\u662f\u5185\u9b3c\u3002 \u5982\u679c A \u8bf4 B \u662f\u5185\u9b3c\uff0c\u90a3\u4e48\u4e5f\u6709\u4e24\u79cd\u60c5\u51b5\u3002 \u5982\u679c A \u662f\u597d\u4eba\uff0c\u90a3\u4e48 B \u5c31\u662f\u5185\u9b3c\u3002 \u5982\u679c A \u662f\u5185\u9b3c\uff0c\u90a3\u4e48 B \u5c31\u662f\u597d\u4eba \u3002 \u7136\u540e\u6211\u4eec\u5c31\u8003\u8651\u5229\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u4ed6\u4eec\u7684\u5173\u7cfb\uff0c\u7136\u540e\u987a\u4fbf\u8fdb\u884c\u5904\u7406\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 #include <bits/stdc++.h> using namespace std ; #define int long long int T ; const int si = 2e5 + 10 ; int pa [ si ], dis [ si ], siz [ si ], res [ si ]; bool vis [ si ]; int n , m , ans ; int root ( int x ){ if ( pa [ x ] == x ) return pa [ x ]; int fa = root ( pa [ x ]); dis [ x ] ^= dis [ pa [ x ]]; return pa [ x ] = fa ; } inline void Union ( int u , int v , int ru , int rv , int w ){ dis [ ru ] = w xor dis [ u ] xor dis [ v ]; siz [ rv ] += siz [ ru ], pa [ ru ] = rv ; } inline void init ( int n ){ for ( register int i = 1 ; i <= n ; ++ i ){ pa [ i ] = i , dis [ i ] = 0 , siz [ i ] = 1 ; vis [ i ] = false , res [ i ] = 0 ; } } signed main (){ scanf ( \"%lld\" , & T ); while ( T -- ){ scanf ( \"%lld%lld\" , & n , & m ); init ( n ); bool print_ck = true ; string sta ; for ( register int i = 1 ; i <= m ; ++ i ){ int u , v , tet ; scanf ( \"%lld%lld\" , & u , & v ); cin >> sta ; if ( sta [ 0 ] == 'c' ) tet = 0 ; else tet = 1 ; int ru = root ( u ), rv = root ( v ); if ( ru == rv ){ if (( dis [ u ] xor dis [ v ]) != tet ){ if ( print_ck ) puts ( \"-1\" ); print_ck = false ; } } else Union ( u , v , ru , rv , tet ); } if ( ! print_ck ) continue ; for ( register int i = 1 ; i <= n ; ++ i ){ int ri = root ( i ); if ( dis [ i ] == 0 ) res [ ri ] ++ ; //pa[i]? } ans = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ if ( root ( i ) != i ) continue ; ans += max ( res [ i ], siz [ i ] - res [ i ]); } printf ( \"%lld \\n \" , ans ); } return 0 ; }","title":"D"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#e1","text":"\u5927\u7b80\u5355\u9898\uff0c\u50bb\u903c\u4e86\u3002 \u7ed9\u4f60\u4e00\u4e2a\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u8ba9\u5b83\u6d82\u8272\uff0c\u6bcf\u79cd\u6d82\u8272\u6709\u9650\u5236\u3002 \u7b54\u6848\u5c31\u662f \\(6 \\times 4^{2^{k}-2}\\) \u3002 \u5feb\u901f\u5e42\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 signed main (){ int n ; scanf ( \"%lld\" , & n ); int k = ( 1l l << n ) -2ll ; //\u4e00\u5b9a\u8981\u5199 1ll,\u4e0d\u7136 1 \u4f1a\u9ed8\u8ba4 int \u5bfc\u81f4\u7206\u70b8\u3002 int ans = qpow ( 4l l , k , p ); ans = ( ans * 6l l ) % p ; printf ( \"%lld \\n \" , ans ); return 0 ; }","title":"E1"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#e2-f","text":"\u8fd8\u4e0d\u4f1a","title":"E2 &amp; F"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#atcoder-beginning-contest-222","text":"Contest ID: abc_222","title":"Atcoder Beginning Contest #222"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#a-b_2","text":"\u8bed\u6cd5\u9898\u5c31\u4e0d\u63d0\u4e86","title":"A &amp; B"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#c_9","text":"\u9898\u76ee\u7406\u89e3\u53ef\u80fd\u6bd4\u8f83\u56f0\u96be\uff08 \u5927\u6982\u662f\u8ba9\u4f60\u5728\u67d0\u79cd\u89c4\u5219\u4e0b\u5224\u65ad\u77f3\u5934\u526a\u5200\u5e03\u7684\u8f93\u8d62\u4e4b\u7c7b\u7684\u3002 \u76f4\u63a5\u5927\u6a21\u62df\u5373\u53ef\u3002","title":"C"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#d_6","text":"\u7ed9\u4f60\u4e24\u4e2a\u4e0d\u964d\u7684\u5e8f\u5217 \\(a,b\\) \u3002 \u8981\u6c42\u4f60\u6784\u9020\u4e00\u4e2a\u5e8f\u5217 \\(c\\) \u4f7f\u5f97\u5bf9\u4e8e\u4efb\u610f\u7684 \\(i\\) \u90fd\u6709 \\(c_i \\in [a_i,b_i]\\) \u503c\u57df \\(3000\\) \uff0c\u957f\u5ea6 \\(3000\\) \u3002 \u4e00\u4e2a\u6bd4\u8f83\u57fa\u7840\u7684 dp\u3002 \u8bbe \\(f_i\\) \u8868\u793a\u8003\u8651\u5230\u7b2c \\(i\\) \u4e2a\u4f4d\u7f6e\u7684\u65f6\u5019\u7684\u65b9\u6848\u6570\u3002 \u7136\u540e\u4f60\u53d1\u73b0\u56e0\u4e3a \\([a_i,b_i],[a_{i+1},b_{i+1}]\\) \u662f\u53ef\u80fd\u6709\u91cd\u5408\u7684\u3002 \u4f60\u9700\u8981\u53bb\u679a\u4e3e \\(c_i\\) \u5230\u5e95\u9009\u4ec0\u4e48\u7684\u60c5\u51b5\u3002 \u53d1\u73b0\u503c\u57df\u4e58\u4e0a\u957f\u5ea6\u4e5f\u53ea\u6709 \\(9\\times 10^6\\) \uff0c\u6240\u4ee5\u8003\u8651\u4e00\u4e2a\u6734\u7d20\u7684 dp\u3002 \u8bbe \\(f_{i,j}\\) \u8868\u793a\u8003\u8651\u5230\u7b2c \\(i\\) \u4e2a\u4f4d\u7f6e\u65f6\uff0c \\(c_i=j\\) \uff0c\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u5e8f\u5217\u603b\u6570\u3002 \u90a3\u4e48\u65b9\u7a0b\u5c31\u662f \\[f_{i,j}=\\begin{cases}\\sum\\limits_{k=0}^{j}f_{i-1,k} & i \\ge 1,j\\in [a_i,b_i]\\\\1 & i=j=0\\\\0 & \\text{otherwise.}\\end{cases}\\] \u4f46\u662f\u53d1\u73b0\u8fd9\u6837\u5b50\u662f \\(\\text{O}(nm^2)\\) \u7684\uff08 \\(m\\) \u662f\u503c\u57df\uff09\uff0c\u6240\u4ee5\u8003\u8651\u4f18\u5316\u3002 \u7b2c\u4e00\u79cd\u60c5\u51b5\u4f60\u53d1\u73b0\u662f\u4e2a\u524d\u7f00\u548c\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u4f7f\u7528\u524d\u7f00\u548c\u4f18\u5316\u8fd9\u73a9\u610f\u513f\u3002 \u4ee4 $S_{i,j}=\\sum\\limits_{k=0}^{j}f_{i,k} $\uff0c\u7136\u540e\u7528\u524d\u7f00\u548c\u7684\u5f62\u5f0f\u628a \\(S\\) \u5199\u51fa\u6765\u3002 \u7136\u540e\u56e0\u4e3a\u524d\u7f00\u548c\u662f\u4e2a\u9012\u63a8\u5f0f\uff0c\u6240\u4ee5\u4f60\u5c31\u53ef\u4ee5 \\(\\text{O}(nm)\\) AC\u672c\u9898\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 for ( register int i = a [ 1 ]; i <= b [ 1 ]; ++ i ){ f [ 1 ][ i ] = 1 ; } sum [ 0 ] = f [ 1 ][ 0 ]; for ( register int i = 1 ; i <= si -10 ; ++ i ){ sum [ i ] = sum [ i -1 ] + f [ 1 ][ i ]; } for ( register int i = 2 ; i <= n ; ++ i ){ for ( register int j = a [ i ]; j <= b [ i ]; ++ j ){ f [ i ][ j ] = sum [ j ]; } sum [ 0 ] = f [ i ][ 0 ]; for ( register int j = 1 ; j <= si -10 ; ++ j ){ sum [ j ] = ( sum [ j -1 ] + f [ i ][ j ]) % p ; } } int ans = 0 ; for ( register int i = a [ n ]; i <= b [ n ]; ++ i ){ ans = ( ans + f [ n ][ i ]) % p ; } printf ( \"%d \\n \" , ans % p );","title":"D"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#e-f","text":"\u4fe9DP\uff0c\u4e00\u4e2a\u80cc\u5305+\u6811\u4e0a\u5dee\u5206\u4e00\u4e2a\u6362\u6839\uff0c\u4f46\u662f\u4e0d\u4f1a\u5199\u545c\u545c","title":"E F"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#g_1","text":"\u539f\u9898\uff1a 202. \u6700\u5e78\u8fd0\u7684\u6570\u5b57 - AcWing\u9898\u5e93 3696 -- The Luckiest number (poj.org)","title":"G"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#h","text":"\u4e0d\u4f1a","title":"H"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#edu-115","text":"Contest ID : 1598 \u7279\u610f\u63d0\u65e9\u56de\u5b66\u6821\u673a\u623f\u6253\u7684\u3002 \u673a\u623f\u6253\u7684\u4eba\u4e0d\u662f\u5f88\u591a\uff0c\u4e0d\u8fc7\u8fd9\u573a\u786e\u5b9e\u6709\u70b9\u6bd2\u7624\uff1f G \u9898\u5168\u573a\u53ea\u6709\u4e24\u4e2a\u4ebaAC\uff0ctourist \u51b2\u4e86\u4e00\u4e2a\u5c0f\u65f6\u3002 F \u9898 MZX\u795e\u60f3\u4e86\u534a\u5c0f\u65f6\u6ca1\u60f3\u51fa\u6765\uff0cCFM \u548c 45d \u5168\u90e8T\u98de \u4f55\u795e\u7684 D \u548c E\u88ab\u53c9\u7206\u4e86\uff0cYL \u7684 D \u8bfb\u9519\u9898\u4e86\u3002 \u4e0d\u8fc7 wqs \u795e \u968f\u4fbf\u4e71\u5207\uff01\uff01orz","title":"Edu #115"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#a_7","text":"\u5927\u7279\u5224\u9898\uff0c\u53ea\u8981\u6709\u4e00\u5bf9 \\(a_i=b_i=1\\) \u90a3\u4e48\u65e0\u89e3\u3002","title":"A"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#b_6","text":"\u8fd8\u662f\u5927\u7279\u5224\u9898\u3002 \u4f60\u5c31\u8003\u8651\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u70b9\u5bf9 \\((i,j)\\) \u3002 \u7136\u540e\u5206 \\((0,0)(0,1)(1,0)\\) \u7684\u60c5\u51b5\u8ba8\u8bba\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include <bits/stdc++.h> using namespace std ; #define int long long int T , n ; const int si = 1e3 + 10 ; int a [ si ][ 10 ]; signed main (){ scanf ( \"%lld\" , & T ); while ( T -- ){ scanf ( \"%lld\" , & n ); for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= 5 ; ++ j ){ scanf ( \"%1lld\" , & a [ i ][ j ]); } } bool f = false ; for ( register int i = 1 ; i < 5 ; ++ i ){ for ( register int j = i + 1 ; j <= 5 ; ++ j ){ int cnt = 0 , cntt = 0 , cnttt = 0 ; for ( register int k = 1 ; k <= n ; ++ k ){ if ( a [ k ][ i ] == 1 && a [ k ][ j ] == 0 ) ++ cnt ; else if ( a [ k ][ i ] == 0 && a [ k ][ j ] == 1 ) ++ cntt ; else if ( a [ k ][ i ] == 1 ) ++ cnttt ; } if ( cnt + cntt + cnttt >= n && cnt + cnttt >= ( n >> 1 ) && cntt + cnttt >= ( n >> 1 )){ f = true ; break ; } if ( ! f ) continue ; } } if ( f ) puts ( \"YES\" ); else puts ( \"NO\" ); } return 0 ; }","title":"B"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#c_10","text":"\u95ee\u4f60\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u5e8f\u5217\uff0c\u6709\u591a\u5c11\u79cd\u53bb\u6389\u4e24\u4e2a\u6570 \\(a_i,a_j\\) \u7684\u65b9\u6848\uff08 \\(i<j\\) \uff09\u4f7f\u5f97\u5e8f\u5217\u5e73\u5747\u6570\u4e0d\u53d8\u3002 \u76f4\u63a5\u7528\u4e2a unordered_map \u6765\u5904\u7406\u6bcf\u4e00\u4e2a\u6570\u7684\u51fa\u73b0\u6b21\u6570\u3002 \u4f60\u53d1\u73b0\u8981\u6709\u89e3\uff0c\u90a3\u4e48\u5e73\u5747\u6570\u80af\u5b9a\u662f .0 \u6216\u8005 .5 \u7ed3\u5c3e\u3002 \u8bf4\u767d\u4e86 \\(2sum\\ \\text{mod}\\ n=0\\) \u3002 \u7136\u540e\u4e3a\u4e86\u9632\u6b62\u91cd\u590d\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u8fd9\u6837\u5b50\u5199\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #include <bits/stdc++.h> using namespace std ; #define int long long int T ; const int si = 2e5 + 10 ; int n , a [ si ]; long double k = 0 ; unordered_map < int , int > mp ; signed main (){ scanf ( \"%lld\" , & T ); while ( T -- ){ scanf ( \"%lld\" , & n ); mp . clear (); int sum = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ scanf ( \"%lld\" , & a [ i ]); sum += a [ i ]; } if (( sum << 1l l ) % n ){ puts ( \"0\" ); continue ; } int kk = sum * 2 / n ; int res = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ res += mp [ kk - a [ i ]]; mp [ a [ i ]] ++ ; } printf ( \"%lld \\n \" , res ); } return 0 ; } // \u7528 map \u5e94\u8be5\u53ef\u4ee5\uff0c\u6211\u8fd9\u4e2a\u88ab\u4eba\u5361\u4e86\u545c\u545c \u6211\u4eec\u53ef\u4ee5\u5148\u628a\u5e8f\u5217\u770b\u4f5c\u5347\u5e8f\u6392\u5e8f\u7684\u3002 \u7136\u540e\u4f60\u53d1\u73b0\u5339\u914d\u7684\u4e24\u4e2a\u7aef\u70b9\u662f\u5173\u4e8e\u5e73\u5747\u6570\u7684\u4f4d\u7f6e\u8fd1\u4f3c\u5bf9\u79f0\u7684\u3002 \u8fd9\u6837\u5b50\u5199\u4f1a\u8ba9\u6bcf\u4e00\u4e2a\u70b9\u5bf9\u7684\u7b54\u6848\u90fd\u5728\u904d\u5386\u5230\u4f4d\u7f6e\u9760\u540e\u7684\u90a3\u4e2a\u70b9\u7684\u65f6\u5019\u624d\u66f4\u65b0\u3002 \u90a3\u4e48\u5c31\u907f\u514d\u4e86\u70b9\u5bf9\u7684\u91cd\u590d\u8ba1\u7b97\uff08\u6837\u4f8b\u4e00\u7684 8 8 8 8 \u7684\u60c5\u51b5\u4e5f\u80fd\u5b8c\u7f8e\u89e3\u51b3\uff09\u3002","title":"C"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#d_7","text":"\u5927\u6570\u5b66\u9898\uff08\u5bb9\u65a5+\u7ec4\u5408\uff09 \u95ee\u7ed9\u5b9a\u7684\u4e24\u4e2a\u5e8f\u5217 \\(a,b\\) \u4e2d\u9009\u51fa\u4e09\u4e2a\u4f4d\u7f6e \\(i,j,k\\) \u4f7f\u5f97\u4e0b\u5217\u6761\u4ef6\u81f3\u5c11\u6709\u4e00\u4e2a\u6210\u7acb\uff1a \\(a[i] \\not= a[j] \\not= a[k]\\) \\(b[i] \\not= b[j] \\not= b[k]\\) \u6709\u591a\u5c11\u79cd\u65b9\u6848\u3002 \u8003\u8651\u628a\u4efb\u610f\u9009\u4e09\u4e2a\u4f4d\u7f6e\u7684\u65b9\u6848\u6570\u7b97\u51fa\u6765\uff1a \\(|U|=\\text{C}^{3}_{n}=\\dfrac{n\\times(n-1)\\times(n-2)}{6}\\) \u7136\u540e\u4f60\u8981\u53bb\u6389\u7684\u5c31\u662f\u4e24\u79cd\u90fd\u4e0d\u6ee1\u8db3\u7684\u65b9\u6848\u6570\u3002 \u6211\u4eec\u8003\u8651\u5206\u522b\u8bb0\u5f55 \\(a,b\\) \u5f53\u4e2d\u7684\u6bcf\u4e2a\u6570\u5206\u522b\u5728\u81ea\u5df1\u6240\u5904\u7684\u5e8f\u5217\u5f53\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 \\(cnta,cntb\\) \u3002 \u4f60\u53d1\u73b0\u4f60\u8981\u5904\u7406\u7684\u4e0d\u6ee1\u8db3\u6761\u4ef6\u7684\u5c31\u662f\u201c\u6709\u76f8\u7b49\u201d\u7684\u60c5\u51b5\u3002 \u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6761\u4ef6\uff0c\u4f60\u90fd\u8981\u5904\u7406\u201c\u6709\u4e24\u4e2a\u76f8\u540c\uff0c\u6709\u4e09\u4e2a\u76f8\u540c\u201d\u7684\u60c5\u51b5\u3002 \u6240\u4ee5\u8fd9\u91cc\u5c31\u53c8\u662f\u5bb9\u65a5\uff0c\u5bf9\u4e8e \\(a\\) \uff08 \\(b\\) \u540c\u7406\uff09\uff0c\u6211\u4eec\u8bbe\u4f4d\u7f6e \\(i,j\\) \u51fa\u73b0\u76f8\u540c\u7684\u60c5\u51b5\u96c6\u5408\u4e3a \\(A\\) \uff0c \\(i,k\\) \u76f8\u540c\u7684\u60c5\u51b5\u96c6\u5408\u4e3a \\(B\\) \uff0c \\(j,k\\) \u76f8\u540c\u7684\u60c5\u51b5\u96c6\u5408\u662f \\(C\\) \uff0c\u90a3\u4e48\u6211\u4eec\u8981\u6c42\u7684\u5c31\u662f \\(A \\cup B \\cup C\\) \uff0c\u8fd9\u91cc\u5c31\u53ef\u4ee5\u7528\u5bb9\u65a5\u7b97\u3002 \u8003\u8651\u4f60\u73b0\u5728\u626b\u5230\u4f4d\u7f6e \\(i\\) \uff0c\u90a3\u4e48\u5728 \\(a\\) \u5f53\u4e2d\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u4f4d\u7f6e\u4ed6\u51fa\u73b0\u4e86 \\(cnta_{a_i}\\) \u6b21\uff0c\u5728 \\(b\\) \u91cc\u9762\u51fa\u73b0 \\(cntb _{b_i}\\) \u6b21\uff0c \u90a3\u4e48\u6839\u636e\u4e58\u6cd5\u539f\u7406\uff0c\u5728\u4e0d\u7ba1\u91cd\u4e0d\u91cd\u590d\u8ba1\u7b97\u7684\u60c5\u51b5\u4e0b\u5c31\u6709 \\(cnta_{a_i} \\times cntb_{b_i}\\) \u79cd\u53ef\u80fd\u3002 \u6211\u4eec\u8003\u8651\u5bf9\u8fd9\u4e2a\u4e1c\u897f\u5bb9\u65a5\u4e00\u4e0b\u6765\u53bb\u91cd\u3002 \u56e0\u4e3a\u4f60\u5728\u5176\u4ed6\u5730\u65b9\u8fd8\u53ef\u80fd\u518d\u53d6\u5230\u8fd9\u4e2a\u4f4d\u7f6e\u7684 \u6570\u5b57 \u6240\u4ee3\u8868\u7684\u60c5\u51b5\uff0c\u800c\u4e14\u6bcf\u626b\u5230\u4e00\u4e2a \\(a_i\\) \u6216\u8005 \\(b_i\\) \u5c31\u4f1a\u591a\u7b97\u4e00\u6b21/ \u90a3\u4e48\u6211\u4eec\u5148\u7ed9\u4ed6\u4eec\u51cf\u53bb \\(cnta_{a_i}+cntb_{b_i}\\) \uff0c \u7136\u540e\u4f60\u53d1\u73b0\u8fd9\u4e2a\u4f4d\u7f6e\u672c\u6765\u7684\u90a3\u4e00\u4e2a\u60c5\u51b5\u88ab\u591a\u51cf\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u518d\u52a0\u4e0a \\(1\\) \u3002 \u6211\u4eec\u628a\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u6240\u80fd\u7ed9\u51fa\u7684\u8d21\u732e\u5199\u51fa\u6765\uff1a \\(S_i=cnta_{a_i}\\times cntb_{b_i}-cnta_{a_i}-cntb_{b_i}+1\\) \u3002 \u6240\u4ee5\u6839\u636e\u52a0\u6cd5\u539f\u7406\uff0c\u6211\u4eec\u8981\u6c42\u7684\u90fd\u4e0d\u6ee1\u8db3\u7684\u60c5\u51b5\u5c31\u662f \\(\\sum\\limits^n_{i=1}S_i=\\sum\\limits^{n}_{i=1}[(cnta_{a_i}-1) \\times (cntb_{b_i}-1)]\\) \u3002 \u6240\u4ee5\u7b54\u6848\u662f \\(\\text{C}^3_n-\\sum\\limits^{n}_{i=1}[(cnta_{a_i}-1) \\times (cntb_{b_i}-1)]\\) \u3002","title":"D"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#e_5","text":"\u9898\u610f\u81ea\u5df1\u770b\u539f\u9898\u3002 \u53d1\u73b0\u6bcf\u6b21\u4fee\u6539\u683c\u5b50\u53ea\u4f1a\u5f71\u54cd \\(n\\) \u6761\u8def\u5f84\uff0c\u6240\u4ee5\u4f60\u5c31\u6bcf\u6b21\u7ef4\u62a4\u4e00\u4e0b\u3002 \u7136\u540e\u5c31\u53ef\u4ee5 \\(\\text{O}(nq)\\) \u505a\u3002","title":"E"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#f-g","text":"\u51b2\u4e0d\u52a8\uff0c\u592a\u96be\u529b/kk","title":"F &amp; G"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#technocup-2022-elimination-round-2","text":"Contest Id: 1584,1588,1589 \u5f53\u7ecf\u5386\u8fc7\u4e00\u4e9b\u53d8\u5316\u4e4b\u540e\u6253\u7684\u7b2c\u4e00\u6b21 CF\u3002 \u867d\u7136\u662f VP\u3002 \u53e6\u5916\u4e8c\u53f7\u673a\u623f\u53ea\u6709\u6211\u4e00\u4e2a\u4eba\u60f3\u9898\u7684\u611f\u89c9\u786e\u5b9e\u8212\u670d\u3002","title":"Technocup 2022 - Elimination Round 2"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#1589a1584a","text":"\u6784\u9020\u65b9\u7a0b \\(\\dfrac{x}{u}+\\dfrac{y}{v}=\\dfrac{x+y}{u+v}\\) \u7684\u89e3\uff0c\u5176\u4e2d \\(u,v\\) \u7ed9\u5b9a\u4e14 $(x,y)\\not= (0,0) $ \u7a0d\u5fae\u4e71\u89e3\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\uff0c \\(x=-u^2,y=v^2\\) \u5373\u53ef\u3002","title":"1589A,1584A"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#1589b1584b","text":"\u731c\u7684\u7ed3\u8bba\uff0c\u6211\u89c9\u5f97\u53ea\u8981 \\(n\\times m\\) \u80fd\u88ab \\(3\\) \u6574\u9664\u90a3\u4e48\u53ef\u4ee5\u5168\u90e8\u5207\u6210 \\(1 \\times 3\\) \u6216\u8005 \\(3 \\times 1\\) \u7684\u3002 \u7136\u540e\u5176\u4ed6\u60c5\u51b5\u63a8\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\u662f \\(\\dfrac{n\\times m}{3} +1\\) \u3002","title":"1589B,1584B"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#1589c1584c1588a","text":"\u8003\u8651\u5148\u5bf9 \\(a,b\\) \u6392\u5e8f\u3002 \u7136\u540e\u5012\u7740\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\uff0c\u5224\u65ad\u4e0b\u5217\u6761\u4ef6\u662f\u5426\u4e0d\u6210\u7acb\u5373\u53ef\u3002 b[i]-a[i]>1 || b[i]-a[i]<0 \u6210\u7acb\u8f93\u51fa NO \u8dd1\u8def\uff0c\u53cd\u4e4b\u5faa\u73af\u5b8c\u4e86\u8f93\u51fa YES \u5373\u53ef\u3002","title":"1589C,1584C,1588A"},{"location":"%E6%80%9D%E8%80%83/%E6%97%A9%E6%9C%9FCF%E5%92%8CAT%E9%A2%98%E8%A7%A3/#d_8","text":"\u4ea4\u4e92\u9898\uff0c\u6211\u6bd4\u8f83Lazy\u6240\u4ee5\u660e\u5929\u505a\u3002","title":"D"},{"location":"%E6%80%BB%E7%BB%93/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/","text":"\u6700\u91cd\u8981\u7684\u4e09\u70b9\uff1a\u4e0d\u6d6e\u8e81\uff0c\u7a33\u5b9a\u5fc3\u6001\uff0c\u6295\u5165->\u6df1\u5165\u601d\u8003\u3002 \u505a\u9898 \u00b6 \u9898\u89e3 \u00b6 \u5584\u7528\u9898\u89e3\u548c\u9898\u89e3\u4ee3\u7801\u3002 \u771f\u6b63\u6df1\u5ea6\u601d\u8003\u6ca1\u6709\u6536\u83b7\u4e4b\u540e\u624d\u53ef\u4ee5\u770b\u9898\u89e3\u3002 \u770b\u5b8c\u4e86 \u4e0d\u8981\u5077\u61d2 \u8d3a\u4ee3\u7801\uff0c\u81ea\u5df1\u5199\u3002 \u5982\u679c\u8fd9\u6837\u8fd8\u662f\u8c03\u4e0d\u51fa\u6765\uff0c\u624d\u53ef\u4ee5\u8d3a\u4ee3\u7801\u770b\u770b\u522b\u4eba\u7684\u5b9e\u73b0\u3002 \u5982\u679c\u505a\u5b8c\u4e4b\u540e\u53d1\u73b0\u522b\u4eba\u6709\u66f4\u597d\u7684\u505a\u6cd5\u8981\u5b66\u4e60\u3002 \u8bfb\u9898 \u00b6 \u6ce8\u610f\u9898\u76ee\u4e2d\u7684\u5173\u952e\u5b57\uff08\u6bd4\u5982\u201c\u6700\u957f\u201d\uff0c\u201c\u4e0d\u91cd\u590d\u201d\uff0c\u201c\u4fdd\u8bc1\u201d\uff0c\u201c\u5355\u8c03\u201d\uff09 \u6ce8\u610f\u6570\u636e\u8303\u56f4\uff0c\u5e76\u5c06\u5176\u5199\u5728\u8349\u7a3f\u7eb8\u5bf9\u5e94\u9898\u76ee\u6240\u5c5e\u4f4d\u7f6e\u7684\u5f00\u5934\u3002 \u8349\u7a3f \u00b6 \u4e0d\u8981\u5077\u61d2 \uff0c\u60f3\u5230\u4ec0\u4e48\u5c31\u5199\u4e0b\u6765 \u628a\u81ea\u5df1\u7684\u60f3\u6cd5\u8f6c\u5316\u6210\u6e05\u6670\u7684\u6587\u5b57\u548c\u56fe\u793a\u3002 \u63a7\u5236\u5b57\u4f53\u5927\u5c0f\uff0c\u4e66\u5199\u533a\u57df\u3002 \u5bf9\u4e8e\u5f53\u524d\u9047\u5230\u7684\u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u5199\u4e0b\u5b83\u7684\u672c\u56e0\uff0c\u4ee5\u53ca\u671f\u671b\u89e3\u51b3\u65b9\u6848\u3002 \u5982\u679c\u6709\u89e3\u51b3\u65b9\u6848\uff0c\u8be6\u7ec6\u7684\u5199\u5728\u4e0b\u9762\u3002 \u628a\u731c\u6d4b\u6216\u8005\u5f97\u5230\u7684\u7ed3\u8bba\u5199\u4e0b\u6765\uff0c\u5c3d\u91cf\u8bc1\u660e\u5b83\u7684\u6b63\u786e\u6027\u3002 \u53ef\u4ee5\u4e3e\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\uff0c\u5f53\u7136\uff0c\u6bcf\u4e00\u6b65\u662f\u4e3a\u4ec0\u4e48\u4e5f\u8981\u5199\u4e0b\u6765\u3002 \u5c3d\u91cf\u591a\u7528\u6570\u5b66\u7b49\u5f0f\u800c\u4e0d\u662f\u7eaf\u601d\u8003\u7ed9\u51fa\u7ed3\u8bba/\u8bc1\u660e\u3002 \u5982\u679c\u9047\u5230\u5361\u4f4f\u7684\u5730\u65b9\uff0c\u5343\u4e07\u4e0d\u8981\u5206\u5fc3\uff0c\u5982\u679c\u5b9e\u5728\u60f3\u4e0d\u5230\uff0c \u90a3\u4e48\u5c31\u6d17\u4e2a\u8138\u6216\u8005\u559d\u53e3\u6c34\uff0c\u7136\u540e\u7ee7\u7eed\u3002 \u4e0d\u80fd\u786e\u5b9a\u7684\u4e1c\u897f\u7528 ? \u6807\u8bb0\uff0c\u786e\u5b9a\u6b63\u786e\u7684\u7528 ! \u6807\u8bb0\uff0c\u9648\u8ff0\u4f5c\u7528\u7528 * \u6807\u8bb0 \uff08\u4ee3\u7801\u548c\u8349\u7a3f\u90fd\u4e00\u6837\uff09 \u5b9e\u73b0 \u00b6 \u4e00\u4e9b\u7ec6\u8282\u95ee\u9898\u5148\u5728\u8349\u7a3f\u4e0a\u6574\u7406\u6e05\u695a\u3002 \u6309\u5c42\u9012\u8fdb\uff0c\u5148\u5199\u57fa\u7840\u53d8\u91cf\uff0c\u8981\u7528\u5230\u67d0\u4e9b\u51fd\u6570/\u5934\u6587\u4ef6/\u53d8\u91cf\u7684\u65f6\u5019\u518d\u8df3\u51fa\u5b9a\u4e49\u3002 \u535a\u5ba2 \u00b6 \u9898\u89e3 \u00b6 \u9898\u76ee\u63cf\u8ff0 \u601d\u8def/\u601d\u8003 \u4ee3\u7801 TAG Trick \u5728\u601d\u8003\u4e2d\u4f53\u73b0\u3002 \u9898\u76ee\u603b\u7ed3 \u00b6 \u7c7b\u4f3c\u9898\u89e3\uff0c\u5c3d\u91cf\u7b80\u77ed\u3002 \u5217\u51fa Trick\u3002 \u6253\u4e0a TAG\u3002 \u4ee3\u7801\u662f\u5426\u5c55\u793a\u770b\u60c5\u51b5\u800c\u5b9a \u7b14\u8bb0 \u00b6 \u7b97\u6cd5\u7684\u4f5c\u7528 \u7b97\u6cd5\u7684\u539f\u7406 \u7b97\u6cd5\u7684\u5b9e\u73b0 \u7b97\u6cd5\u7684\u5e94\u7528 \u7b97\u6cd5\u7684\u4e00\u4e9b Trick \u6709\u5fc5\u8981\u7684\u8bdd\u5728\u5bf9\u5e94\u677f\u5757\u4e0b\u52a0\u4e0a\u4e00\u5b9a\u4f8b\u9898 \u65e5\u7a0b \u00b6 \u8bb0\u5f55 \u00b6 \u6bcf\u5929\u665a\u4e0a 9:05 \u7edf\u8ba1\u5f53\u5929\u7684\u8fdb\u5ea6\uff0c\u586b\u5199 Record.xlsx \u3002 \u9898\u76ee \u603b\u7ed3 \u6bd4\u8d5b \u5e76\u622a\u56fe\u53d1\u7ed9 C \u8001\u5e08 \u4f7f\u7528 MSNotes \u8bb0\u5f55 Task list\u3002 \u8ba1\u5212 \u00b6 \u5de5\u4f5c\u65e5\u665a\u4e0a \uff1a\u7edf\u8ba1\u8fdb\u5ea6\uff0c\u56de\u987e\u5f53\u5929\u8fdb\u5ea6 \u5468\u516d \uff1a\u7b97\u6cd5\u56de\u987e \u5468\u65e5 \uff1a\u9898\u76ee\u56de\u987e \u6bcf\u5929\u7761\u524d \uff1a\u53cd\u601d\uff0c\u603b\u7ed3\u5f53\u5929\u6240\u505a\uff0c\u5fc5\u8981\u65f6\u62ff\u4e00\u4e2a\u4fbf\u7b7e\u8bb0\u4e0b\u6765 \u6bcf\u5929\u7b2c\u4e00\u6b21\u5f00\u7535\u8111 \uff1a\u770b\u4e00\u904d\u603b\u7ed3\u6587\u4ef6\u5939\u91cc\u7684\u4e09\u4e2a\u6587\u6863\u3002 \u505a\u5b8c\u4e00\u4e2a\u9636\u6bb5\u7684\u9898\u76ee\u4e4b\u540e\uff0c\u9002\u5f53\u7684\u5bf9\u4e00\u4e9b\u7b14\u8bb0\u8fdb\u884c\u8865\u5145\u3002 \u6bcf\u5929 6:10 \u5de6\u53f3 \uff1a\u5199\u90ae\u4ef6\uff0c\u770b\u90ae\u4ef6\u3002 \u5468\u65e5 \uff1a \u6e05\u7a7a Task list\uff0c\u51c6\u5907\u4e0b\u4e00\u5468\u7684 Task\u3002 \u5fc3\u6001\u76f8\u5173 \u00b6 \u8d70\u795e\u7684\u65f6\u5019\u63d0\u9192\u81ea\u5df1\uff0c\u81ea\u5df1\u662f\u6765\u673a\u623f\u5e72\u4ec0\u4e48\u7684\u3002 \u60f3\u6e05\u695a\u81ea\u5df1\u8981\u60f3\u7a81\u7834\uff0c\u7b2c\u4e00\u6b65\u662f\u4ec0\u4e48\u3002 \u5148\u8d70\u597d\u57fa\u7840\u7684\u8def\uff0c\u518d\u8bf4\u7a81\u7834\u3002","title":"\u65e5\u5e38\u603b\u7ed3"},{"location":"%E6%80%BB%E7%BB%93/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/#_1","text":"","title":"\u505a\u9898"},{"location":"%E6%80%BB%E7%BB%93/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/#_2","text":"\u5584\u7528\u9898\u89e3\u548c\u9898\u89e3\u4ee3\u7801\u3002 \u771f\u6b63\u6df1\u5ea6\u601d\u8003\u6ca1\u6709\u6536\u83b7\u4e4b\u540e\u624d\u53ef\u4ee5\u770b\u9898\u89e3\u3002 \u770b\u5b8c\u4e86 \u4e0d\u8981\u5077\u61d2 \u8d3a\u4ee3\u7801\uff0c\u81ea\u5df1\u5199\u3002 \u5982\u679c\u8fd9\u6837\u8fd8\u662f\u8c03\u4e0d\u51fa\u6765\uff0c\u624d\u53ef\u4ee5\u8d3a\u4ee3\u7801\u770b\u770b\u522b\u4eba\u7684\u5b9e\u73b0\u3002 \u5982\u679c\u505a\u5b8c\u4e4b\u540e\u53d1\u73b0\u522b\u4eba\u6709\u66f4\u597d\u7684\u505a\u6cd5\u8981\u5b66\u4e60\u3002","title":"\u9898\u89e3"},{"location":"%E6%80%BB%E7%BB%93/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/#_3","text":"\u6ce8\u610f\u9898\u76ee\u4e2d\u7684\u5173\u952e\u5b57\uff08\u6bd4\u5982\u201c\u6700\u957f\u201d\uff0c\u201c\u4e0d\u91cd\u590d\u201d\uff0c\u201c\u4fdd\u8bc1\u201d\uff0c\u201c\u5355\u8c03\u201d\uff09 \u6ce8\u610f\u6570\u636e\u8303\u56f4\uff0c\u5e76\u5c06\u5176\u5199\u5728\u8349\u7a3f\u7eb8\u5bf9\u5e94\u9898\u76ee\u6240\u5c5e\u4f4d\u7f6e\u7684\u5f00\u5934\u3002","title":"\u8bfb\u9898"},{"location":"%E6%80%BB%E7%BB%93/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/#_4","text":"\u4e0d\u8981\u5077\u61d2 \uff0c\u60f3\u5230\u4ec0\u4e48\u5c31\u5199\u4e0b\u6765 \u628a\u81ea\u5df1\u7684\u60f3\u6cd5\u8f6c\u5316\u6210\u6e05\u6670\u7684\u6587\u5b57\u548c\u56fe\u793a\u3002 \u63a7\u5236\u5b57\u4f53\u5927\u5c0f\uff0c\u4e66\u5199\u533a\u57df\u3002 \u5bf9\u4e8e\u5f53\u524d\u9047\u5230\u7684\u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u5199\u4e0b\u5b83\u7684\u672c\u56e0\uff0c\u4ee5\u53ca\u671f\u671b\u89e3\u51b3\u65b9\u6848\u3002 \u5982\u679c\u6709\u89e3\u51b3\u65b9\u6848\uff0c\u8be6\u7ec6\u7684\u5199\u5728\u4e0b\u9762\u3002 \u628a\u731c\u6d4b\u6216\u8005\u5f97\u5230\u7684\u7ed3\u8bba\u5199\u4e0b\u6765\uff0c\u5c3d\u91cf\u8bc1\u660e\u5b83\u7684\u6b63\u786e\u6027\u3002 \u53ef\u4ee5\u4e3e\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\uff0c\u5f53\u7136\uff0c\u6bcf\u4e00\u6b65\u662f\u4e3a\u4ec0\u4e48\u4e5f\u8981\u5199\u4e0b\u6765\u3002 \u5c3d\u91cf\u591a\u7528\u6570\u5b66\u7b49\u5f0f\u800c\u4e0d\u662f\u7eaf\u601d\u8003\u7ed9\u51fa\u7ed3\u8bba/\u8bc1\u660e\u3002 \u5982\u679c\u9047\u5230\u5361\u4f4f\u7684\u5730\u65b9\uff0c\u5343\u4e07\u4e0d\u8981\u5206\u5fc3\uff0c\u5982\u679c\u5b9e\u5728\u60f3\u4e0d\u5230\uff0c \u90a3\u4e48\u5c31\u6d17\u4e2a\u8138\u6216\u8005\u559d\u53e3\u6c34\uff0c\u7136\u540e\u7ee7\u7eed\u3002 \u4e0d\u80fd\u786e\u5b9a\u7684\u4e1c\u897f\u7528 ? \u6807\u8bb0\uff0c\u786e\u5b9a\u6b63\u786e\u7684\u7528 ! \u6807\u8bb0\uff0c\u9648\u8ff0\u4f5c\u7528\u7528 * \u6807\u8bb0 \uff08\u4ee3\u7801\u548c\u8349\u7a3f\u90fd\u4e00\u6837\uff09","title":"\u8349\u7a3f"},{"location":"%E6%80%BB%E7%BB%93/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/#_5","text":"\u4e00\u4e9b\u7ec6\u8282\u95ee\u9898\u5148\u5728\u8349\u7a3f\u4e0a\u6574\u7406\u6e05\u695a\u3002 \u6309\u5c42\u9012\u8fdb\uff0c\u5148\u5199\u57fa\u7840\u53d8\u91cf\uff0c\u8981\u7528\u5230\u67d0\u4e9b\u51fd\u6570/\u5934\u6587\u4ef6/\u53d8\u91cf\u7684\u65f6\u5019\u518d\u8df3\u51fa\u5b9a\u4e49\u3002","title":"\u5b9e\u73b0"},{"location":"%E6%80%BB%E7%BB%93/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/#_6","text":"","title":"\u535a\u5ba2"},{"location":"%E6%80%BB%E7%BB%93/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/#_7","text":"\u9898\u76ee\u63cf\u8ff0 \u601d\u8def/\u601d\u8003 \u4ee3\u7801 TAG Trick \u5728\u601d\u8003\u4e2d\u4f53\u73b0\u3002","title":"\u9898\u89e3"},{"location":"%E6%80%BB%E7%BB%93/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/#_8","text":"\u7c7b\u4f3c\u9898\u89e3\uff0c\u5c3d\u91cf\u7b80\u77ed\u3002 \u5217\u51fa Trick\u3002 \u6253\u4e0a TAG\u3002 \u4ee3\u7801\u662f\u5426\u5c55\u793a\u770b\u60c5\u51b5\u800c\u5b9a","title":"\u9898\u76ee\u603b\u7ed3"},{"location":"%E6%80%BB%E7%BB%93/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/#_9","text":"\u7b97\u6cd5\u7684\u4f5c\u7528 \u7b97\u6cd5\u7684\u539f\u7406 \u7b97\u6cd5\u7684\u5b9e\u73b0 \u7b97\u6cd5\u7684\u5e94\u7528 \u7b97\u6cd5\u7684\u4e00\u4e9b Trick \u6709\u5fc5\u8981\u7684\u8bdd\u5728\u5bf9\u5e94\u677f\u5757\u4e0b\u52a0\u4e0a\u4e00\u5b9a\u4f8b\u9898","title":"\u7b14\u8bb0"},{"location":"%E6%80%BB%E7%BB%93/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/#_10","text":"","title":"\u65e5\u7a0b"},{"location":"%E6%80%BB%E7%BB%93/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/#_11","text":"\u6bcf\u5929\u665a\u4e0a 9:05 \u7edf\u8ba1\u5f53\u5929\u7684\u8fdb\u5ea6\uff0c\u586b\u5199 Record.xlsx \u3002 \u9898\u76ee \u603b\u7ed3 \u6bd4\u8d5b \u5e76\u622a\u56fe\u53d1\u7ed9 C \u8001\u5e08 \u4f7f\u7528 MSNotes \u8bb0\u5f55 Task list\u3002","title":"\u8bb0\u5f55"},{"location":"%E6%80%BB%E7%BB%93/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/#_12","text":"\u5de5\u4f5c\u65e5\u665a\u4e0a \uff1a\u7edf\u8ba1\u8fdb\u5ea6\uff0c\u56de\u987e\u5f53\u5929\u8fdb\u5ea6 \u5468\u516d \uff1a\u7b97\u6cd5\u56de\u987e \u5468\u65e5 \uff1a\u9898\u76ee\u56de\u987e \u6bcf\u5929\u7761\u524d \uff1a\u53cd\u601d\uff0c\u603b\u7ed3\u5f53\u5929\u6240\u505a\uff0c\u5fc5\u8981\u65f6\u62ff\u4e00\u4e2a\u4fbf\u7b7e\u8bb0\u4e0b\u6765 \u6bcf\u5929\u7b2c\u4e00\u6b21\u5f00\u7535\u8111 \uff1a\u770b\u4e00\u904d\u603b\u7ed3\u6587\u4ef6\u5939\u91cc\u7684\u4e09\u4e2a\u6587\u6863\u3002 \u505a\u5b8c\u4e00\u4e2a\u9636\u6bb5\u7684\u9898\u76ee\u4e4b\u540e\uff0c\u9002\u5f53\u7684\u5bf9\u4e00\u4e9b\u7b14\u8bb0\u8fdb\u884c\u8865\u5145\u3002 \u6bcf\u5929 6:10 \u5de6\u53f3 \uff1a\u5199\u90ae\u4ef6\uff0c\u770b\u90ae\u4ef6\u3002 \u5468\u65e5 \uff1a \u6e05\u7a7a Task list\uff0c\u51c6\u5907\u4e0b\u4e00\u5468\u7684 Task\u3002","title":"\u8ba1\u5212"},{"location":"%E6%80%BB%E7%BB%93/%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93/#_13","text":"\u8d70\u795e\u7684\u65f6\u5019\u63d0\u9192\u81ea\u5df1\uff0c\u81ea\u5df1\u662f\u6765\u673a\u623f\u5e72\u4ec0\u4e48\u7684\u3002 \u60f3\u6e05\u695a\u81ea\u5df1\u8981\u60f3\u7a81\u7834\uff0c\u7b2c\u4e00\u6b65\u662f\u4ec0\u4e48\u3002 \u5148\u8d70\u597d\u57fa\u7840\u7684\u8def\uff0c\u518d\u8bf4\u7a81\u7834\u3002","title":"\u5fc3\u6001\u76f8\u5173"},{"location":"%E6%80%BB%E7%BB%93/%E6%AF%94%E8%B5%9B%E6%80%BB%E7%BB%93/","text":"\u5fc3\u7406 \u00b6 \u300e\u5fc3\u6001\u300f\u88ab\u9898\u76ee\u5361\u6b7b\u7684\u65f6\u5019\u4e0d\u8981\u7126\u8e81\uff0c\u53ef\u4ee5\u6709\u4ee5\u4e0b\u4e24\u79cd\u9009\u62e9 \u6df1\u547c\u5438 \u4fdd\u5b58\u5f53\u524d\u7684\u601d\u8003\uff0c\u6362\u4e00\u9053\u9898 \u300e\u5fc3\u6001\u300f\uff08OI\uff09\u4e0d\u8981\u88ab\u522b\u4eba\u7684\u52a8\u4f5c\u5f71\u54cd\u4e86\uff0c\u4ed6\u4eec\u952e\u76d8\u6572\u7684\u5feb\u4e0d\u4e00\u5b9a\u662f\u4f1a\u4e86\uff0c\u4e00\u5b9a\u662f\u5728\u5199\u5047\u7684\u505a\u6cd5 \u300e\u5fc3\u6001\u300f\uff08CF\uff09\u6bd4\u8d5b\u7684\u65f6\u5019\u4e0d\u770b\u699c\uff0c\u9664\u975e\u9700\u8981\u770b\u770b\u662f\u4e0d\u662f\u6709\u4ec0\u4e48\u5947\u602a\u7684\u7b80\u5355\u9898\u5728\u540e\u9762\u3002 \u300e\u6df1\u5165\u300f\u4e0d\u8981\u88ab\u9898\u76ee\u80cc\u666f\u7b49\u65e0\u7528\u4fe1\u606f\u5e26\u98de\u4e86\uff0c\u6bd4\u5982\u5947\u7279\u7684\u4eba\u540d\u6216\u8005\u5947\u7279\u7684\u884c\u4e3a\u3002 \u505a\u9898 \u00b6 \u901a\u8bfb\u6240\u6709\u9898\u76ee\uff0c\u9009\u4e00\u9053\u601d\u8def\u6700\u6e05\u695a\u7684\u4e0b\u624b\uff08OI\uff09 \u6309\u987a\u5e8f\u5f00\u9898\uff0c\u5f53\u4e00\u9053\u9898\u8ba4\u771f\u601d\u8003 10min \u5de6\u53f3\u5b8c\u5168\u6ca1\u6709\u601d\u8def\u7684\u65f6\u5019\u5207\u6362\uff08CF\uff09\uff08\u6216\u8005\u610f\u8bc6\u5230\u77ed\u65f6\u95f4\u5185\u80af\u5b9a\u6ca1\u6cd5\u89e3\u51b3\u7684\u65f6\u5019\uff0c\u5148\u4fdd\u5b58\u5f53\u524d\u8fdb\u5ea6\u7136\u540e\u6362\u9898\uff09 \u8bfb\u9898\u7684\u65f6\u5019\u628a\u91cd\u70b9\uff08\u6570\u636e\u8303\u56f4\uff0c\u7279\u6b8a\u6761\u4ef6\uff09\u5199\u5728\u8349\u7a3f\u4e0a\u9762\uff08\u7528\u4e00\u4e2a\u5708\u9694\u5f00\uff09 \u4fdd\u6301\u8349\u7a3f\u7eb8\u7684\u6709\u5e8f\uff08\u7bad\u5934\uff0c\u60f3\u6cd5\uff0c\u6761\u4ef6\uff0c\u95ee\u9898\u7684\u7ed3\u5408\uff09 \u5f53\u524d\u53d1\u73b0\u4e86\u4ec0\u4e48\u6027\u8d28\uff0c\u7531\u4ec0\u4e48\u6761\u4ef6\u63a8\u51fa\u6765\uff08\u4e00\u4e2a\u533a\u57df\uff09 \u5f53\u524d\u7684\u601d\u8003\u662f\u4ec0\u4e48\uff0c\u76ee\u524d\u4e3a\u4e86\u89e3\u51b3\u5b58\u5728\u7684\u4ec0\u4e48\u95ee\u9898\u9700\u8981\u505a\u4ec0\u4e48 \u660e\u786e\u95ee\u9898\u4e4b\u540e\u5148\u5bfb\u627e\u6027\u8d28\uff0c\u6bd4\u5982\u6709\u5229\u4e8e\u4f18\u5316\u66b4\u529b\u590d\u6742\u5ea6\u7684\uff08\u7c7b\u4f3c\u526a\u679d\uff09\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u8f6c\u6362\u95ee\u9898\u6865\u6881\u7684\uff08\u7c7b\u4f3c\u5173\u7cfb\u4f20\u9012\u6027->\u52a0\u8fb9\uff09 \u4e0d\u8981\u88ab\u9898\u76ee\u63cf\u8ff0\u9650\u5236\u4f4f\uff0c\u591a\u8f6c\u4e2a\u5f2f\u3002 \u5982\u679c\u76f4\u63a5\u6c42\u89e3\u4e0d\u597d\u641e\uff0c\u8003\u8651\u8f6c\u5316\uff08\u6bd4\u5982\u628a\u6700\u4f18\u5316\u95ee\u9898\u8f6c\u5316\u6210\u5224\u5b9a\u95ee\u9898\uff09 \u7279\u6b8a\u60c5\u51b5\u4e00\u5b9a\u5148\u5199\u4e0b\u6765\u641e\u6e05\u695a\u3002 \u8c03\u8bd5 \u00b6 \u4e00\u4e9b\u5e38\u89c1 BUG\uff1a \u68c0\u67e5\u51fd\u6570\u8fd4\u56de\u503c \u68c0\u67e5\u521d\u59cb\u5316\u662f\u5426\u5b8c\u5907 \u68c0\u67e5\u53d8\u91cf\u662f\u5426\u6df7\u6dc6 \u68c0\u67e5\u662f\u5426\u8c03\u7528\u51fd\u6570 \u8c03\u8bd5\u7684\u65f6\u5019\uff1a \u8f93\u51fa\u4e2d\u95f4\u53d8\u91cf\uff0c\u6700\u597d\u5229\u7528 cerr \u800c\u4e0d\u662f cout \u5229\u7528 exit() \u51fd\u6570\u68c0\u67e5\u9000\u51fa\u4f4d\u7f6e \u5229\u7528 cerr \u8f93\u51fa\u9519\u8bef\u4fe1\u606f \u6784\u9020 Hack \u6570\u636e\uff1a \u7279\u6b8a\u60c5\u51b5\uff08\u6bd4\u5982 n = 1 \uff0c n & 1 \u8fd9\u79cd\uff09 \u6781\u9650\u6570\u636e\uff08\u6bd4\u5982\u83ca\u82b1\u56fe\uff0c\u8d85\u957f\u94fe\uff09 \u5bf9\u62cd\uff1a \u5982\u679c\u5199\u4e86\u66b4\u529b\uff0c\u6709\u65f6\u95f4\u5c31\u5199\u53e6\u5916\u7684\u66b4\u529b\u5bf9\u62cd \u5982\u679c\u5199\u4e86\u201c\u6b63\u89e3\u201d\uff0c\u7528\u6b63\u786e\u7684\u66b4\u529b\u80fd\u63a5\u53d7\u7684\u6570\u636e\u53bb\u5bf9\u62cd\u3002 \u5982\u679c\u5bf9\u62cd\u51fa\u9519\uff0c\u4e0d\u8981\u7740\u6025\uff0c\u5148\u68c0\u67e5\u66b4\u529b\u6709\u6ca1\u6709\u5199\u9519\uff0c\u7136\u540e\u68c0\u67e5\u6b63\u89e3\u662f\u5426\u5199\u9519\u3002 \u68c0\u67e5\u7a0b\u5e8f\u7684\u65f6\u5019\u4e00\u5b9a\u591a\u6253\u8349\u7a3f\u3002","title":"\u6bd4\u8d5b\u603b\u7ed3"},{"location":"%E6%80%BB%E7%BB%93/%E6%AF%94%E8%B5%9B%E6%80%BB%E7%BB%93/#_1","text":"\u300e\u5fc3\u6001\u300f\u88ab\u9898\u76ee\u5361\u6b7b\u7684\u65f6\u5019\u4e0d\u8981\u7126\u8e81\uff0c\u53ef\u4ee5\u6709\u4ee5\u4e0b\u4e24\u79cd\u9009\u62e9 \u6df1\u547c\u5438 \u4fdd\u5b58\u5f53\u524d\u7684\u601d\u8003\uff0c\u6362\u4e00\u9053\u9898 \u300e\u5fc3\u6001\u300f\uff08OI\uff09\u4e0d\u8981\u88ab\u522b\u4eba\u7684\u52a8\u4f5c\u5f71\u54cd\u4e86\uff0c\u4ed6\u4eec\u952e\u76d8\u6572\u7684\u5feb\u4e0d\u4e00\u5b9a\u662f\u4f1a\u4e86\uff0c\u4e00\u5b9a\u662f\u5728\u5199\u5047\u7684\u505a\u6cd5 \u300e\u5fc3\u6001\u300f\uff08CF\uff09\u6bd4\u8d5b\u7684\u65f6\u5019\u4e0d\u770b\u699c\uff0c\u9664\u975e\u9700\u8981\u770b\u770b\u662f\u4e0d\u662f\u6709\u4ec0\u4e48\u5947\u602a\u7684\u7b80\u5355\u9898\u5728\u540e\u9762\u3002 \u300e\u6df1\u5165\u300f\u4e0d\u8981\u88ab\u9898\u76ee\u80cc\u666f\u7b49\u65e0\u7528\u4fe1\u606f\u5e26\u98de\u4e86\uff0c\u6bd4\u5982\u5947\u7279\u7684\u4eba\u540d\u6216\u8005\u5947\u7279\u7684\u884c\u4e3a\u3002","title":"\u5fc3\u7406"},{"location":"%E6%80%BB%E7%BB%93/%E6%AF%94%E8%B5%9B%E6%80%BB%E7%BB%93/#_2","text":"\u901a\u8bfb\u6240\u6709\u9898\u76ee\uff0c\u9009\u4e00\u9053\u601d\u8def\u6700\u6e05\u695a\u7684\u4e0b\u624b\uff08OI\uff09 \u6309\u987a\u5e8f\u5f00\u9898\uff0c\u5f53\u4e00\u9053\u9898\u8ba4\u771f\u601d\u8003 10min \u5de6\u53f3\u5b8c\u5168\u6ca1\u6709\u601d\u8def\u7684\u65f6\u5019\u5207\u6362\uff08CF\uff09\uff08\u6216\u8005\u610f\u8bc6\u5230\u77ed\u65f6\u95f4\u5185\u80af\u5b9a\u6ca1\u6cd5\u89e3\u51b3\u7684\u65f6\u5019\uff0c\u5148\u4fdd\u5b58\u5f53\u524d\u8fdb\u5ea6\u7136\u540e\u6362\u9898\uff09 \u8bfb\u9898\u7684\u65f6\u5019\u628a\u91cd\u70b9\uff08\u6570\u636e\u8303\u56f4\uff0c\u7279\u6b8a\u6761\u4ef6\uff09\u5199\u5728\u8349\u7a3f\u4e0a\u9762\uff08\u7528\u4e00\u4e2a\u5708\u9694\u5f00\uff09 \u4fdd\u6301\u8349\u7a3f\u7eb8\u7684\u6709\u5e8f\uff08\u7bad\u5934\uff0c\u60f3\u6cd5\uff0c\u6761\u4ef6\uff0c\u95ee\u9898\u7684\u7ed3\u5408\uff09 \u5f53\u524d\u53d1\u73b0\u4e86\u4ec0\u4e48\u6027\u8d28\uff0c\u7531\u4ec0\u4e48\u6761\u4ef6\u63a8\u51fa\u6765\uff08\u4e00\u4e2a\u533a\u57df\uff09 \u5f53\u524d\u7684\u601d\u8003\u662f\u4ec0\u4e48\uff0c\u76ee\u524d\u4e3a\u4e86\u89e3\u51b3\u5b58\u5728\u7684\u4ec0\u4e48\u95ee\u9898\u9700\u8981\u505a\u4ec0\u4e48 \u660e\u786e\u95ee\u9898\u4e4b\u540e\u5148\u5bfb\u627e\u6027\u8d28\uff0c\u6bd4\u5982\u6709\u5229\u4e8e\u4f18\u5316\u66b4\u529b\u590d\u6742\u5ea6\u7684\uff08\u7c7b\u4f3c\u526a\u679d\uff09\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u8f6c\u6362\u95ee\u9898\u6865\u6881\u7684\uff08\u7c7b\u4f3c\u5173\u7cfb\u4f20\u9012\u6027->\u52a0\u8fb9\uff09 \u4e0d\u8981\u88ab\u9898\u76ee\u63cf\u8ff0\u9650\u5236\u4f4f\uff0c\u591a\u8f6c\u4e2a\u5f2f\u3002 \u5982\u679c\u76f4\u63a5\u6c42\u89e3\u4e0d\u597d\u641e\uff0c\u8003\u8651\u8f6c\u5316\uff08\u6bd4\u5982\u628a\u6700\u4f18\u5316\u95ee\u9898\u8f6c\u5316\u6210\u5224\u5b9a\u95ee\u9898\uff09 \u7279\u6b8a\u60c5\u51b5\u4e00\u5b9a\u5148\u5199\u4e0b\u6765\u641e\u6e05\u695a\u3002","title":"\u505a\u9898"},{"location":"%E6%80%BB%E7%BB%93/%E6%AF%94%E8%B5%9B%E6%80%BB%E7%BB%93/#_3","text":"\u4e00\u4e9b\u5e38\u89c1 BUG\uff1a \u68c0\u67e5\u51fd\u6570\u8fd4\u56de\u503c \u68c0\u67e5\u521d\u59cb\u5316\u662f\u5426\u5b8c\u5907 \u68c0\u67e5\u53d8\u91cf\u662f\u5426\u6df7\u6dc6 \u68c0\u67e5\u662f\u5426\u8c03\u7528\u51fd\u6570 \u8c03\u8bd5\u7684\u65f6\u5019\uff1a \u8f93\u51fa\u4e2d\u95f4\u53d8\u91cf\uff0c\u6700\u597d\u5229\u7528 cerr \u800c\u4e0d\u662f cout \u5229\u7528 exit() \u51fd\u6570\u68c0\u67e5\u9000\u51fa\u4f4d\u7f6e \u5229\u7528 cerr \u8f93\u51fa\u9519\u8bef\u4fe1\u606f \u6784\u9020 Hack \u6570\u636e\uff1a \u7279\u6b8a\u60c5\u51b5\uff08\u6bd4\u5982 n = 1 \uff0c n & 1 \u8fd9\u79cd\uff09 \u6781\u9650\u6570\u636e\uff08\u6bd4\u5982\u83ca\u82b1\u56fe\uff0c\u8d85\u957f\u94fe\uff09 \u5bf9\u62cd\uff1a \u5982\u679c\u5199\u4e86\u66b4\u529b\uff0c\u6709\u65f6\u95f4\u5c31\u5199\u53e6\u5916\u7684\u66b4\u529b\u5bf9\u62cd \u5982\u679c\u5199\u4e86\u201c\u6b63\u89e3\u201d\uff0c\u7528\u6b63\u786e\u7684\u66b4\u529b\u80fd\u63a5\u53d7\u7684\u6570\u636e\u53bb\u5bf9\u62cd\u3002 \u5982\u679c\u5bf9\u62cd\u51fa\u9519\uff0c\u4e0d\u8981\u7740\u6025\uff0c\u5148\u68c0\u67e5\u66b4\u529b\u6709\u6ca1\u6709\u5199\u9519\uff0c\u7136\u540e\u68c0\u67e5\u6b63\u89e3\u662f\u5426\u5199\u9519\u3002 \u68c0\u67e5\u7a0b\u5e8f\u7684\u65f6\u5019\u4e00\u5b9a\u591a\u6253\u8349\u7a3f\u3002","title":"\u8c03\u8bd5"},{"location":"%E6%80%BB%E7%BB%93/%E9%94%99%E8%AF%AF%E5%88%97%E8%A1%A8/","text":"\u524d\u8a00 \u00b6 2021/7/24\uff1aStart\u3002 2021/10/21 \uff1a CSP2021\u8003\u524d\uff0c\u4f18\u5316\u6392\u7248\u3002 \u6839\u636e\u4e2a\u4eba\u5199\u9898\u7684\u9519\u8bef\u7d2f\u8ba1\u66f4\u65b0\uff0c\u611f\u8c22 Imakf \uff0c\u4ed6\u6240\u64b0\u5199\u7684\u535a\u5ba2\u6fc0\u53d1\u4e86\u6211\u7684\u8fd9\u4e2a\u60f3\u6cd5\u3002 \u8f6c\u8f7d\uff0c\u5f15\u7528\u6ce8\u660e\u94fe\u63a5\uff08qwq\uff09 \u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\uff1a https://www.cnblogs.com/BTeqwq/p/unaccepted-why.html \u5982\u679c\u6709\u81ea\u5df1\u72af\u8fc7\u7684SB\u9519\u8bef\u90fd\u53ef\u4ee5\u8bc4\u8bba\u5728\u4e0b\u9762\uff0c\u4e00\u8d77\u5b66\u4e60\uff08 \u7075\u611f\u6765\u6e90\uff1a https://www.luogu.com.cn/blog/Imakf/oier-cuo-wu-ge-ji \uff08\u4eba\u5bb6\u2191\u662f\u901a\u7528\u7248\uff0c\u6211\u5c31\u53ea\u80fd\u5199\u8fd9\u79cd\u83dc\u9e21\u624d\u4f1a\u72af\u7684\u9519\u8bef\uff09 \u6709\u4e00\u4e9b\u5f15\u7528\u6ce8\u660e\u4e86\u63d0\u51fa\u9519\u8bef\u7684OIer\u3010\u4e00\u90e8\u5206\u6765\u81eaImakf\u7684\u535a\u5ba2\u8bc4\u8bba\u533a\u3011\u3002 \u5982\u679c\u60a8\u7684\u540d\u5b57\u5728\u4e0a\u9762\u5e76\u4e14\u60a8\u4e0d\u5e0c\u671b\u88ab\u5199\u5728\u4e0a\u9762\u53ef\u4ee5\u8054\u7cfb\u6211\uff0c\u6211\u4f1a\u7b2c\u4e00\u65f6\u95f4\u5220\u9664\u3002 \u6587\u7ae0\u9898\u76ee\u7684\u201c\u4f1e\u5175\u201d\u5c31\u662f \u501f\u4ee3 OIer\u7684\u7cbe\u9510\u4e2d\u7684\u7cbe\u9510\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5f88\u591a\u7cbe\u9510OIer\u90fd\u5bb9\u6613\u72af\u7684\u9519\u8bef\u3002 \u5e76\u6ca1\u6709\u5bf9\u201c\u4f1e\u5175\u201d\u8fd9\u4e00\u5149\u8f89\u800c\u53c8\u4f1f\u5927\u7684\u5f62\u8c61\u8fdb\u884c\u4efb\u4f55\u6c61\u540d\u5316\uff01 \u89e3\u51b3\u7684\u6700\u597d\u65b9\u6848 \u00b6 \u6253\u5f00 -Wall \uff0c\u6253\u4ee3\u7801\u7684\u65f6\u5019\u7a33\u4e00\u70b9\u3002 \u591a\u82b1\u65f6\u95f4\u8bfb\u9898\uff0c\u9632\u6b62\u770b\u9519\u9898\u5bfc\u81f4\u6d6a\u8d39\u65f6\u95f4\u4ee5\u53ca\u5fc3\u6001\u7206\u70b8\u3002 \u4f60\u591a\u82b1 5min \u8bfb\u9898\u53ef\u6bd4\u4f60 1h \u90fd\u56f0\u60d1\u6761\u4ef6\u597d\u3002 \u5728\u8349\u7a3f\u7eb8\u4e0a\u7406\u6e05\u695a\u601d\u8def\u518d\u5f00\u59cb\u5199\uff0c\u6709\u4e9b\u5730\u65b9\u52a0\u4e0a\u6ce8\u91ca\u8bf4\u660e\u7528\u9014\uff0c\u65b9\u4fbf\u8c03\u8bd5\u3002 \u6536\u5377\u4e4b\u524d10min\u68c0\u67e5\u81ea\u5df1\u7684\u6587\u4ef6\uff0c freopen \uff0c\u8def\u5f84\uff0c\u683c\u5f0f\u3002 \u6700\u597d\u6253\u5f00\u81ea\u52a8\u4fdd\u5b58\u9632\u6b62\u4ee3\u7801\u4e22\u5931 \u4fdd\u7559\u4e00\u4e9bBF\uff0c\u6709\u95ee\u9898\u7684\u6b63\u89e3\uff0c\u5e76 \u6807\u8bb0 \uff0c\u65b9\u4fbf\u5524\u8d77\u65b0\u7684\u601d\u8def\u5e76\u63d0\u9192\u81ea\u5df1\uff0c\u8bf4\u4e0d\u5b9a\u8fc7\u4e00\u4f1a\u770b\u4e00\u770b\u4e4b\u524d\u7684Code\u5c31\u53d1\u73b0\u9519\u8bef\u4e86\u5462\uff1f \u6ca1\u5199\u51fa\u6765\u4e0d\u8981\u5fc3\u6001\u7206\u70b8\uff0c\u7a33\u91cd\u51fa\u7701\u4e00\u3002 \u548c OPJ \u5199\u6cd5\u4e00\u6837\u7684\u62fc\u97f3\u53d8\u91cf\u867d\u7136\u5f88 low\uff0c\u4f46\u662fdebug\u5374\u5f88\u5b9e\u7528\u3002\uff08\u602a\u4e0d\u5f97OPJ\u7684debug\u90a3\u4e48\u5389\u5bb3\uff09 \u6216\u8005\u6709\u591a\u4e2a\u7c7b\u4f3c\u53d8\u91cf\u7684\u65f6\u5019\u7528\u4e0b\u5212\u7ebf+\u529f\u80fd\u6807\u8bb0\u4e00\u4e0b\u3002 \u628a\u4f60\u5df2\u7ecf\u62ff\u5230\u7684\u90e8\u5206\u5206\u5229\u7528 if \u6846\u8d77\u6765\uff0c\u9632\u6b62\u4f60\u5199\u7684\u4f2a\u6b63\u89e3\uff0c\u8986\u76d6\u4e86\u4f60\u672c\u6765\u80fd\u62ff\u5230\u7684\u5206\u3002 \u505a\u4e86\u603b\u6bd4\u4e0d\u505a\u597d\uff0c\u5e76\u4e14\u4fdd\u6301\u601d\u7ef4\u7684\u6e05\u6670\u6709\u5e8f\u3002\uff08\u6765\u81ea Benq\uff09 \u5173\u4e8e\u90a3\u4e9b\u7206\u96f6\u6280\u5de7\uff1a \u00b6 \u5927\u90e8\u5206\u662f\u6211\u72af\u8fc7\u7684 /qd \u9e23\u8c22\uff1a@Imakf ,@leexzq,@\u5929\u673a\u661f,@\u8def\u5361\u5229\u6b27,@tongyf,@NGC5457,@AC_OIer,@Thujoars \u4e00\u4efd\u547d\u540d\u4e3a \u300aNOI\u8d5b\u5236\u4e2d\u5e38\u72af\u7684\u9519\u8bef\u53ca\u89e3\u51b3\u65b9\u6848\u300b\u7684\u6587\u6863\uff0c\u4f5c\u8005\u672a\u77e5\uff0c\u82e5\u60a8\u770b\u5230\u8bf7\u8054\u7cfb\u6211\u3002 \u63d0\u4f9b\u4e86\u4e00\u4e9b\u9519\u8bef\uff08 \u5bb9\u6613\u624b\u6ed1\u5199\u9519\uff08\u6f0f\uff09\u7684 \u00b6 \u5f53\u4f60\u904d\u5386\u94fe\u5f0f\u524d\u5411\u661f\u7684\u65f6\u5019\uff1a for(int i=e[u].head;i;i=e[u].Next) \u628a \\(u\\) \u548c \\(i\\) \u641e\u6df7 \u5f53\u6709\u591a\u5c42\u5faa\u73af\u7684\u65f6\u5019\uff1a 1 2 for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= m ; ++ i ) \u5728\u8be5\u5199 ++j \u7684\u65f6\u5019\u5199 ++i \u5f53\u4f60\u8bfb\u5165\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635\u7684\u65f6\u5019\uff1a 1 2 for ( i ; 1 -> n ) for ( j ; 1 -> n ) for(int i=1;i<=n;--i) printf \u5199\u4e86\u4e00\u4e2a & \u3002 int a[siz][0]; mod 0 printf(\"%d\",x/0); \u8981\u6c42\u53d6 \\(\\min\\) \u5374 res=INT_MIN ,\u8981\u6c42 \\(\\max\\) \u5374 res=INT_MAX \u3002 \u4f4d\u8fd0\u7b97\u4e0d\u77e5\u9053\u8fd0\u7b97\u4f18\u5148\u7ea7\u7684\u60c5\u51b5\u4e0b\u4e0d\u6253\u62ec\u53f7\u3002 for(int i=1;i<=strlen(s);++i) \uff08\u591a\u6b21\u8c03\u7528 strlen \u5bfc\u81f4TLE\uff09 return gcd(b,b%a) \uff08\u628a\u6b27\u51e0\u91cc\u5f97\u7684\u7ed3\u8bba\u80cc\u53cd\uff09\u3002 \u5199\u4e09\u76ee\u8fd0\u7b97\u7b26\u7684\u65f6\u5019\u4ee5\u4e3a\u4e0d\u6ee1\u8db3\u6761\u4ef6\u624d\u4f1a\u6267\u884c : \u524d\u9762\u7684\u3002 \u6bd4\u5982 min(int &a,int b){ return a<b?a=b:a;} : \u628a int \u8bb0\u6210 2 \u4e2abit \uff0c long long \u8bb0\u6210 4 \u4e2a bit \uff0c\u5bfc\u81f4\u7a7a\u95f4\u7b97\u9519\u3002 \u4e3b\u51fd\u6570\u7684\u6700\u540e\u538b\u884c\u5374\u5199\uff1a return printf(\"%lld\\n\",res); \uff0c\u76f4\u63a5 return\u4e86 printf\u7684\u8fd4\u56de\u503c\uff0c\u5bfc\u81f4RE\u3002 \u60f3\u8981\u53d6\u51fa \\(s\\) \u7684 \\([0,i-1]\\) \uff0c\u5374\u5199\u4e86 s.substr(0,i-1) \u3002 (\u5fd8\u8bb0\u4e86 substr \u7684\u7b2c\u4e8c\u4f4d\u662f\u8bf4\u53d6\u51fa\u6765\u7684\u8fd9\u4e2a\u5b50\u4e32\u7684 \u957f\u5ea6 )\u3002 int p[si];p[0]=1; \u548c int p[si]={1}; \u524d\u8005 \\(\\text{O}(1)\\) \uff0c\u540e\u8005 \\(\\text{O}(n)\\) \u6811\u94fe\u5256\u5206\u7684\u65f6\u5019\uff1a dfs2(hx[i][i]); \uff08\u6811 \u70b9 \u5256 \u5206\uff09 \u7ebf\u6bb5\u6811\u533a\u95f4\u52a0\u7684\u65f6\u5019\uff0c pushdown \u91cc\u7528 = \uff0c\u533a\u95f4\u4fee\u53c8\u53bb\u7528 += \u3002\uff08\u6ca1\u641e\u6e05\u695a\u5230\u5e95\u8981\u5e72\u4ec0\u4e48\uff09 \u4e0d\u8981\u5199 a[++cnt]=b[cnt]=d; \uff08\u4f1aUB\uff09 long long n;scanf(\"%d\",&n); \uff08\u683c\u5f0f\u63a7\u5236\u7b26\u5199\u9519\uff09\uff08\u5f88\u5bb9\u6613\u67e5\u4e0d\u51fa\u6765\uff09 unsigned long long qwq; \u7136\u540e printf(\"%ull\",qwq); \uff08\u5b9e\u9645\u4e0a\u662f %llu \uff09 \u641e\u53cd\u6570\u7ec4\u7684\u7ef4\u5ea6\u5206\u522b\u4ee3\u8868\u4ec0\u4e48\u3002 \u5355\u8c03\u961f\u5217\u7684 head \u548c tail \u5199\u53cd\u3002 UB\uff1a tmp[i]++=cnt[j]-- \u540d\u5b57\u6bd4\u8f83\u50cf\u7684\u53d8\u91cf\u6df7\u7740\u4f7f\u7528\u3002 \u6bd4\u8f83\u5927\u7684\u6570\u7528\u4e00\u4e9b\u6d6e\u70b9\u6570\u8fd4\u56de\u503c\u51fd\u6570\u8ba1\u7b97\u7684\u65f6\u5019\u5fd8\u8bb0\u5f3a\u5236\u8f6c\u6210 ll \u5bfc\u81f4\u8f93\u51fa\u79d1\u5b66\u8ba1\u6570\u6cd5\u3002 \u6bd4\u5982 pow(3,19) \u8fd9\u79cd\u5f88\u5927\u7684\uff0c\u90fd\u8981\u5f3a\u5236\u8f6c\u6362\u3002 \u4e00\u4e2a\u4f8b\u5b50\uff1a 1 2 3 4 5 6 struct Edge { int head , ver , Next ; inline void init (){ head = -1 ; } } e [ si_m << 1 ]; e -> init () // \u8fd9\u6837\u5199\u53ea\u4f1a\u6e05\u7a7a e[0] \u800c\u4e0d\u662f\u6240\u6709\u7684\u3002 // STL \u80fd\u8fd9\u6837\u5199\uff0c\u5b9e\u9645\u4e0a\u662f\u56e0\u4e3a STL \u91cd\u8f7d\u4e86 [] \u6240\u4ee5\u8ba9\u5b83\u770b\u8d77\u6765\u7c7b\u4f3c\u4e00\u4e2a\u6570\u7ec4\u3002 \u5c11\u5199 std::bitset<int>b[si]; b->reset() \uff0c\u5e38\u6570\u5f88\u5927\u3002 \u500d\u589e\u7684\u65f6\u5019\u5efa\u8bae\u5148\u5faa\u73af\u7b2c\u4e8c\u7ef4\uff0c\u56e0\u4e3a\u8981\u5c0f\u5fc3\u7b2c\u4e00\u4f4d\u4e0d\u662f\u6309\u7167\u6b63\u5e38\u987a\u5e8f\u8f6c\u79fb\u5bfc\u81f4\u51fa\u73b0\u540e\u6548\u6027\u3002 \u6709\u9664\u6cd5\u4e14 1.0 \u00d7 \u67d0\u4e2a\u6570\u7684\u65f6\u5019\u8981\u7528\u62ec\u53f7\u62ec\u8d77\u6765\uff0c\u4e0d\u7136\u4f1a /1.0 \u7136\u540e\u4e58\u4e0a\u539f\u6765\u8981\u9664\u7684\u6570\u3002 \u5bb9\u6613\u5fd8\u8bb0\uff08\u5199\uff0c\u7b97\uff0c\u67e5\uff09\u7684\u7ec6\u8282 \u00b6 \u591a\u7ec4\u6570\u636e\u4e0d\u6e05\u7a7a\u578b \u56fe\u8bba\u9898\u4e0d\u6e05 cnt \uff0c head \u6570\u7ec4\u4e0d\u6e05 0 vector \u4e0d clear() \u7ebf\u6bb5\u6811 tag() \u4e0d\u6e05\u96f6\u3002 \u7528 for(1->n) \u6e05\u96f6\uff0cinit \u5374\u5199\u5728\u8bfb\u5165 n \u7684\u524d\u9762\u3002 \u4e0a\u9762\u8fd9\u4e2a\u7528\u6784\u9020\u51fd\u6570\u7684\u65f6\u5019\u4e5f\u662f\u540c\u7406\u3002 \u6240\u4ee5\u5982\u679c\u6709\u6784\u9020\u51fd\u6570\u5efa\u8bae\u5355\u72ec\u5b9a\u4e49\u51fa\u6765\u800c\u4e0d\u662f\u8ddf\u5728 struct \u4e4b\u540e\u3002 \u6bb5\u9519\u8bef\uff08RE\uff09\u578b \u6570\u7ec4\u5f00\u5c0f \u7ebf\u6bb5\u6811\u56db\u500d\u7a7a\u95f4 \u6811\u7684\u4e24\u500d\u7a7a\u95f4 \u65e0\u5411\u56fe\u7684\u4e24\u500d\u7a7a\u95f4 scanf() \u4e0d\u662f\u8bfb\u5b57\u7b26\u6570\u7ec4\u4f46\u662f\u4e0d\u5199 & long long \u8d1f\u6570\u8003\u8651\u4e86\u4e48\uff1f \u6700\u7b80\u5355\u7684\u77e9\u9635\u7c7b\u578bdfs\u4e0d\u5199 continue \u548c return \uff08\u6ca1\u5199\u8fb9\u754c\uff09 /0 \uff0c erase(end()) \u3002 queue \u548c stack \u4e0d\u5199 pop operator \u4e0d\u5199 const vector \u7684 size() \u4e0d\u5199 (int) \u7136\u540e\u5c31\u51cf\u4e86\u4e00\u4e2a\u6570\u3002 \u4f60\u5199\u7ebf\u6bb5\u6811\u533a\u95f4\u64cd\u4f5c\u5728 update \uff0c query \u91cc\u9762 pushdown \u4e86\u5417\uff1f bitset<si>vis[si]; ... vis.reset() \uff08\u5e94\u8be5\u7528 -> reset() \uff0c\u4f46\u662f\u5e38\u6570\u5927\uff0c\u5efa\u8bae for+.reset() \uff09 \u5199\u6811\u5f62DP\u7684\u65f6\u5019\u4e0d\u5199 vis \u6216\u8005 if(v==fa) continue; \u500d\u589eLCA\uff0c dep[1] \u6ca1\u8bbe\u4e3a 1 \uff0cdfs\u7684\u65f6\u5019\u5fd8\u8bb0 dep[v]=dep[u]+1 \u81ea\u73af\u548c\u91cd\u8fb9\u5224\u4e86\u5417\uff1f \u5230\u5e95\u662f scanf(\"%d%d%d\",&n,&m,&q); \u8fd8\u662f scanf(\"%d%d%d\",&m,&n,&q); \u8fd8\u662f scanf(\"%d%d%d\",&q,&n,&m); \uff1f\uff1f\uff08\u6ce8\u610f\u8bfb\u9898\u7684\u8f93\u5165\u683c\u5f0f\uff09\u3002 \u5f53\u53d8\u91cf\u540d\u7279\u522b\u591a\uff0c\u6bd4\u5982\u8f93\u5165\u91cc\u6709\u4e2a \\(k\\) \uff0c\u5faa\u73af\u53c8\u6709\u4e09\u5c42\u7684\u65f6\u5019\uff1a 1 2 3 4 5 6 7 8 int n , k ; cin >> n >> k ; for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= n ; ++ j ) for ( int k = 1 ; k <= n ; ++ k ) { //\u5728\u8fd9\u91cc\u5fd8\u8bb0\u5faa\u73af\u53d8\u91cf\uff0c\u8bd5\u56fe\u8c03\u7528\u8f93\u5165\u7684k } 1ll \u548c 1.0 \u4e58\u4e86\u5417\uff1f \u6709\u6ca1\u6709\u8003\u8651\u7cfb\u7edf\u51fd\u6570\u7684\u7cbe\u5ea6\u5bfc\u81f4\u7684\u9519\u8bef\uff1f \u6bd4\u5982\uff1a\u5f53\u4f60\u9700\u8981\u5bf9\u4e00\u4e2a\u5728 \\(2^{32}\\) \u4ee5\u4e0a\u7684\u6570\u7b97 \\(\\log_2\\) \u7684\u65f6\u5019\uff0c\u7cbe\u5ea6\u5f88\u5bb9\u6613\u70b8\uff0c\u5efa\u8bae\u624b\u5199\uff1a 1 2 3 4 5 6 ull Extra_log2 ( ull x ){ for ( ull i = 64 ; i >= 0 ; i -- ){ if ( 1 == ( x >> i ) & 0x1 ) break ; } return i ; } \u8fd8\u6709\u6d6e\u70b9\u6570\u4e8c\u5206\u7684\u65f6\u5019\uff0c\u6709\u6ca1\u6709\u8003\u8651 \\(eps\\) \u5e26\u6765\u7684\u8bef\u5dee\uff1f \u8fd9\u91cc\u5efa\u8bae\u7b97\u597d\u6b21\u6570\uff0c\u624b\u52a8\u5faa\u73af\u3002 \u7edf\u8ba1\u7b54\u6848\u5fd8\u8bb0\u53d6\u6a21\u3002 \u5206\u7c7b\u8ba8\u8bba\u9898\u4e0d\u8003\u8651\u50cf \\(n=1\\) \u4e4b\u7c7b\u7684\u7279\u6b8a\u89e3\u5bfc\u81f4\u7684\u505a\u6cd5\u51fa\u9519\u3002 \u5728\u4e25\u683c\u5339\u914d\u8f93\u51fa\u7684\u65f6\u5019\u591a\u8f93\u51fa\u4e00\u4e2a\u7a7a\u683c\uff0c\u591a\u8f93\u51fa\u4e00\u4e2a\u6362\u884c\u3002 \u7b97\u6982\u7387\u5fd8\u8bb0\u6837\u672c\u7a7a\u95f4\uff0c\u7b97\u671f\u671b\u5fd8\u8bb0\u53d8\u91cf\u53d6\u503c\uff0c\u671f\u671bDP\u6b63\u7740\u63a8\u5374\u6ca1\u5904\u7406\u597d\u540e\u6548\u6027\u95ee\u9898\u3002 Dp \u6ca1\u521d\u59cb\u5316\uff0c\u5c11\u8f6c\u79fb\uff0c\u6ca1\u8003\u8651\u540e\u6548\u6027\uff0c\u8fc7\u4e86\u5927\u6837\u4f8b\u76f4\u63a5\u8dd1\u8def\u3002 unsigned long long x=1-2;unsigned long long y=abs(x); \uff08\u5fd8\u8bb0 unsigned \u4e0d\u5e26\u7b26\u53f7\uff09\u3002 \u5199\u4e86\u4e2a\u51fd\u6570\u4f46\u662f\u4f60\u6ca1\u8c03\u7528\u3002 \u5199\u7684 int \u7c7b\u578b\u7684\u51fd\u6570\u4f46\u662f\u4f60\u6ca1\u5199\u8fd4\u56de\u503c\u3002 const int mod=99824353 \uff08\u51c9\u5fc3\u51fa\u9898\u4eba\u7684\u5751\u6a21\u65701\uff09 const int mod=998244533 \uff08\u51c9\u5fc3\u51fa\u9898\u4eba\u7684\u5751\u6a21\u65702\uff09 \u5fd8\u8bb0\u5e94\u8be5\u8d4b\u503c\u7684\u987a\u5e8f\uff0c\u4f4d\u7f6e\uff1a 1 2 3 4 5 int n ; int tot = n ; int main (){ cin >> n ; } // \u5728 n=0 \u7684\u65f6\u5019\u7ed9 tot \u8d4b\u503c\u4e3a n \u5728\u6570\u636e\u5f88\u5927\u7684\u65f6\u5019\u4e00\u5b9a\u4e0d\u8981\u4f7f\u7528 % \uff0c\u76f4\u63a5\u624b\u5199\u5373\u53ef\u3002 \u53d6\u6a21\u7684\u65f6\u5019\u5982\u679c\u91cc\u9762\u53ef\u80fd\u6709\u8d1f\u6570\u8981 \u5148\u819c\u518d\u52a0\u518d\u819c: ((a+b)%mod+mod)%mod \u5982\u679c\u6ca1\u6709\u8d1f\u6570\u5c31 (a+b)%mod \u5e93\u51fd\u6570\u81ea\u5e26 \u7684 max \uff0c min \u8981\u6c42\u4e24\u4e2a\u53c2\u6570\u53d8\u91cf\u7c7b\u578b\u76f8\u540c\u3002 heap-dijkstra \u4e0d\u5199 -dis[v] \uff08\u8d2a\u5fc3\u53d8\u8c26\u865a\uff09 \u7f29\u5b8c\u70b9\u4e4b\u540e\u5982\u679c\u53ef\u80fd\u6709\u91cd\u8fb9\u5224\u4e86\u5417\uff1f\uff1f\uff01\uff01\uff01 \u4f60\u8981\u5904\u7406\u7684\u5230\u5e95\u662f\u8fde\u901a\u56fe\u8fd8\u662f\u597d\u51e0\u4e2a\u8fde\u901a\u5757\uff1f \u4f60\u5728\u5904\u7406\u68ee\u6797\u7684\u65f6\u5019\u662f\u4e0d\u662f\u5199\u9519\u6210\u6811\u7684\u60c5\u51b5\u4e86\uff1f string \u7684\u4e00\u4e2a\u7279\u6027 1 2 3 4 5 6 7 8 9 10 11 12 13 int main (){ s [ 0 ] = 'a' ; cout << s . size (); } //\u4f60\u4f1a\u53d1\u73b0\u8fd9\u6837\u5b50 $s$ \u7684 $size$ \u662f $0$ \u800c\u4e14 $s[0]\\not=a$! //\u56e0\u4e3a\u6211\u4eec\u5f00\u59cb\u7684\u65f6\u5019\u6ca1\u6709\u7ed9 $s$ \u5206\u914d\u7a7a\u95f4\u3002 //\u6240\u4ee5\u53ef\u4ee5\u8fd9\u6837\u5b50\u5199 string s ( 6 , '\\0' ); int main (){ s [ 0 ] = 'a' ; cout << s . size (); } //\u6216\u8005\u4f60\u76f4\u63a5\u7528 += \u548c push_back \u5fd8\u8bb0 && \u548c || \u662f\u77ed\u8def\u8fd0\u7b97\u7b26\u3002 \u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u65f6\u5019\uff0c\u5982\u679c\u4f60\u7684 merge \u8fd4\u56de\u7c7b\u578b\u662f int \u90a3\u4e48\u4e00\u5b9a\u8bb0\u5f97 root[x]=merge(root[x],root[y]) \uff0c\u5fc5\u987b\u52a0\u524d\u9762\u7684 root[x]= \u53d6 vector \u7684 back \u7684\u65f6\u5019\uff08\u6216 queue \u7684 front\uff09\u6ca1\u6709\u5224\u957f\u5ea6\u4e3a 0 \u5c11\u7528 memset \u3002 *next_permutation \u6216\u8005 lower_bound \u8c03\u7528\u4e4b\u524d\u6ca1\u6709\u6392\u5e8f. \u5fd8\u8bb0\u7b97\u7a7a\u95f4\u5bfc\u81f4 MLE\uff0c\u4e00\u5206\u90fd\u6ca1\u6709\u3002 \u6ce8\u610f\u9898\u76ee\u4e2d\u7b97\u7684\u662f\u6709\u5e8f\u6570\u5bf9\u8fd8\u662f\u65e0\u5e8f\u6570\u5bf9\u3002 \u5bb9\u6613\u56e0\u4e3a\u6587\u4ef6\uff0c\u7cfb\u7edf\u548c\u73af\u5883\u51fa\u9519\u7684 \u00b6 int time,y1; \uff08Linux \u4e0b\u7684\u5173\u952e\u5b57\uff09 Linux\\POJ \u4e0b\u4f7f\u7528 INT_MAX \u4f46\u4e0d\u5199 #include<climits> \uff08\u4e07\u80fd\u5934\u7684\u8bdd\uff0c\u518d\u89c1\uff09 \u5728 c++14 \u6807\u51c6\u4f7f\u7528\u6ca1\u6709\u7684 gets \uff0c\u4f46\u4f60\u8003\u8bd5\u5199\u547d\u4ee4\u7684\u65f6\u5019\u4e0d\u5c0f\u5fc3\u6ca1\u5199 -std=c++14 \uff0c\u5bfc\u81f4\u4f60\u4ee5\u4e3a\u4f60\u6ca1\u6709\u95ee\u9898\uff0c\u4ea4\u4e0a\u53bb\u53d8\u6210CE\u3002 \u56e0\u4e3a\u6837\u4f8b\u4e00\u822c\u4f7f\u7528 Linux \u683c\u5f0f\uff0c\u6240\u4ee5\u8981\u6ce8\u610f\uff1a Windows(Dos):\u6362\u884c\u7b26\u662f \\r\\n Linux(\u7c7bUnix):\u6362\u884c\u7b26\u662f \\n . 5. \u4e00\u9053\u9898\u5199\u4e86\u591a\u79cd\u90e8\u5206\u5206\u505a\u6cd5\u4f46\u662f\u6ca1\u6807\u8bb0\u54ea\u4e2a\u662f\u54ea\u4e2a\uff0c\u6536\u7684\u65f6\u5019\u4e00\u4e0d\u5c0f\u5fc3\u4ea4\u4e86\u5206\u6700\u5c11\u7684\u90a3\u4e2a\u3002 6. \u628a freopen \u6ce8\u91ca\u4e86\u4ea4\u4e0a\u53bb\u3002 7. \uff08w,r\uff09 \u5199\u53cd\u3002 1 2 freopen ( \"xx.in\" , \"w\" , stdin ); freopen ( \"xx.out\" , \"r\" , stdout ); 8. \u4e0d\u5220\u9664\u8c03\u8bd5\u7528\u7684\u4ee3\u7801 9. \u5efacpp\u7684\u65f6\u5019\u4e0d\u8981\u9690\u85cf\u540e\u7f00\uff0c\u8fd9\u6837\u5bb9\u6613\u6253\u4e24\u4e2acpp","title":"\u9519\u8bef\u5217\u8868"},{"location":"%E6%80%BB%E7%BB%93/%E9%94%99%E8%AF%AF%E5%88%97%E8%A1%A8/#_1","text":"2021/7/24\uff1aStart\u3002 2021/10/21 \uff1a CSP2021\u8003\u524d\uff0c\u4f18\u5316\u6392\u7248\u3002 \u6839\u636e\u4e2a\u4eba\u5199\u9898\u7684\u9519\u8bef\u7d2f\u8ba1\u66f4\u65b0\uff0c\u611f\u8c22 Imakf \uff0c\u4ed6\u6240\u64b0\u5199\u7684\u535a\u5ba2\u6fc0\u53d1\u4e86\u6211\u7684\u8fd9\u4e2a\u60f3\u6cd5\u3002 \u8f6c\u8f7d\uff0c\u5f15\u7528\u6ce8\u660e\u94fe\u63a5\uff08qwq\uff09 \u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\uff1a https://www.cnblogs.com/BTeqwq/p/unaccepted-why.html \u5982\u679c\u6709\u81ea\u5df1\u72af\u8fc7\u7684SB\u9519\u8bef\u90fd\u53ef\u4ee5\u8bc4\u8bba\u5728\u4e0b\u9762\uff0c\u4e00\u8d77\u5b66\u4e60\uff08 \u7075\u611f\u6765\u6e90\uff1a https://www.luogu.com.cn/blog/Imakf/oier-cuo-wu-ge-ji \uff08\u4eba\u5bb6\u2191\u662f\u901a\u7528\u7248\uff0c\u6211\u5c31\u53ea\u80fd\u5199\u8fd9\u79cd\u83dc\u9e21\u624d\u4f1a\u72af\u7684\u9519\u8bef\uff09 \u6709\u4e00\u4e9b\u5f15\u7528\u6ce8\u660e\u4e86\u63d0\u51fa\u9519\u8bef\u7684OIer\u3010\u4e00\u90e8\u5206\u6765\u81eaImakf\u7684\u535a\u5ba2\u8bc4\u8bba\u533a\u3011\u3002 \u5982\u679c\u60a8\u7684\u540d\u5b57\u5728\u4e0a\u9762\u5e76\u4e14\u60a8\u4e0d\u5e0c\u671b\u88ab\u5199\u5728\u4e0a\u9762\u53ef\u4ee5\u8054\u7cfb\u6211\uff0c\u6211\u4f1a\u7b2c\u4e00\u65f6\u95f4\u5220\u9664\u3002 \u6587\u7ae0\u9898\u76ee\u7684\u201c\u4f1e\u5175\u201d\u5c31\u662f \u501f\u4ee3 OIer\u7684\u7cbe\u9510\u4e2d\u7684\u7cbe\u9510\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5f88\u591a\u7cbe\u9510OIer\u90fd\u5bb9\u6613\u72af\u7684\u9519\u8bef\u3002 \u5e76\u6ca1\u6709\u5bf9\u201c\u4f1e\u5175\u201d\u8fd9\u4e00\u5149\u8f89\u800c\u53c8\u4f1f\u5927\u7684\u5f62\u8c61\u8fdb\u884c\u4efb\u4f55\u6c61\u540d\u5316\uff01","title":"\u524d\u8a00"},{"location":"%E6%80%BB%E7%BB%93/%E9%94%99%E8%AF%AF%E5%88%97%E8%A1%A8/#_2","text":"\u6253\u5f00 -Wall \uff0c\u6253\u4ee3\u7801\u7684\u65f6\u5019\u7a33\u4e00\u70b9\u3002 \u591a\u82b1\u65f6\u95f4\u8bfb\u9898\uff0c\u9632\u6b62\u770b\u9519\u9898\u5bfc\u81f4\u6d6a\u8d39\u65f6\u95f4\u4ee5\u53ca\u5fc3\u6001\u7206\u70b8\u3002 \u4f60\u591a\u82b1 5min \u8bfb\u9898\u53ef\u6bd4\u4f60 1h \u90fd\u56f0\u60d1\u6761\u4ef6\u597d\u3002 \u5728\u8349\u7a3f\u7eb8\u4e0a\u7406\u6e05\u695a\u601d\u8def\u518d\u5f00\u59cb\u5199\uff0c\u6709\u4e9b\u5730\u65b9\u52a0\u4e0a\u6ce8\u91ca\u8bf4\u660e\u7528\u9014\uff0c\u65b9\u4fbf\u8c03\u8bd5\u3002 \u6536\u5377\u4e4b\u524d10min\u68c0\u67e5\u81ea\u5df1\u7684\u6587\u4ef6\uff0c freopen \uff0c\u8def\u5f84\uff0c\u683c\u5f0f\u3002 \u6700\u597d\u6253\u5f00\u81ea\u52a8\u4fdd\u5b58\u9632\u6b62\u4ee3\u7801\u4e22\u5931 \u4fdd\u7559\u4e00\u4e9bBF\uff0c\u6709\u95ee\u9898\u7684\u6b63\u89e3\uff0c\u5e76 \u6807\u8bb0 \uff0c\u65b9\u4fbf\u5524\u8d77\u65b0\u7684\u601d\u8def\u5e76\u63d0\u9192\u81ea\u5df1\uff0c\u8bf4\u4e0d\u5b9a\u8fc7\u4e00\u4f1a\u770b\u4e00\u770b\u4e4b\u524d\u7684Code\u5c31\u53d1\u73b0\u9519\u8bef\u4e86\u5462\uff1f \u6ca1\u5199\u51fa\u6765\u4e0d\u8981\u5fc3\u6001\u7206\u70b8\uff0c\u7a33\u91cd\u51fa\u7701\u4e00\u3002 \u548c OPJ \u5199\u6cd5\u4e00\u6837\u7684\u62fc\u97f3\u53d8\u91cf\u867d\u7136\u5f88 low\uff0c\u4f46\u662fdebug\u5374\u5f88\u5b9e\u7528\u3002\uff08\u602a\u4e0d\u5f97OPJ\u7684debug\u90a3\u4e48\u5389\u5bb3\uff09 \u6216\u8005\u6709\u591a\u4e2a\u7c7b\u4f3c\u53d8\u91cf\u7684\u65f6\u5019\u7528\u4e0b\u5212\u7ebf+\u529f\u80fd\u6807\u8bb0\u4e00\u4e0b\u3002 \u628a\u4f60\u5df2\u7ecf\u62ff\u5230\u7684\u90e8\u5206\u5206\u5229\u7528 if \u6846\u8d77\u6765\uff0c\u9632\u6b62\u4f60\u5199\u7684\u4f2a\u6b63\u89e3\uff0c\u8986\u76d6\u4e86\u4f60\u672c\u6765\u80fd\u62ff\u5230\u7684\u5206\u3002 \u505a\u4e86\u603b\u6bd4\u4e0d\u505a\u597d\uff0c\u5e76\u4e14\u4fdd\u6301\u601d\u7ef4\u7684\u6e05\u6670\u6709\u5e8f\u3002\uff08\u6765\u81ea Benq\uff09","title":"\u89e3\u51b3\u7684\u6700\u597d\u65b9\u6848"},{"location":"%E6%80%BB%E7%BB%93/%E9%94%99%E8%AF%AF%E5%88%97%E8%A1%A8/#_3","text":"\u5927\u90e8\u5206\u662f\u6211\u72af\u8fc7\u7684 /qd \u9e23\u8c22\uff1a@Imakf ,@leexzq,@\u5929\u673a\u661f,@\u8def\u5361\u5229\u6b27,@tongyf,@NGC5457,@AC_OIer,@Thujoars \u4e00\u4efd\u547d\u540d\u4e3a \u300aNOI\u8d5b\u5236\u4e2d\u5e38\u72af\u7684\u9519\u8bef\u53ca\u89e3\u51b3\u65b9\u6848\u300b\u7684\u6587\u6863\uff0c\u4f5c\u8005\u672a\u77e5\uff0c\u82e5\u60a8\u770b\u5230\u8bf7\u8054\u7cfb\u6211\u3002 \u63d0\u4f9b\u4e86\u4e00\u4e9b\u9519\u8bef\uff08","title":"\u5173\u4e8e\u90a3\u4e9b\u7206\u96f6\u6280\u5de7\uff1a"},{"location":"%E6%80%BB%E7%BB%93/%E9%94%99%E8%AF%AF%E5%88%97%E8%A1%A8/#_4","text":"\u5f53\u4f60\u904d\u5386\u94fe\u5f0f\u524d\u5411\u661f\u7684\u65f6\u5019\uff1a for(int i=e[u].head;i;i=e[u].Next) \u628a \\(u\\) \u548c \\(i\\) \u641e\u6df7 \u5f53\u6709\u591a\u5c42\u5faa\u73af\u7684\u65f6\u5019\uff1a 1 2 for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= m ; ++ i ) \u5728\u8be5\u5199 ++j \u7684\u65f6\u5019\u5199 ++i \u5f53\u4f60\u8bfb\u5165\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635\u7684\u65f6\u5019\uff1a 1 2 for ( i ; 1 -> n ) for ( j ; 1 -> n ) for(int i=1;i<=n;--i) printf \u5199\u4e86\u4e00\u4e2a & \u3002 int a[siz][0]; mod 0 printf(\"%d\",x/0); \u8981\u6c42\u53d6 \\(\\min\\) \u5374 res=INT_MIN ,\u8981\u6c42 \\(\\max\\) \u5374 res=INT_MAX \u3002 \u4f4d\u8fd0\u7b97\u4e0d\u77e5\u9053\u8fd0\u7b97\u4f18\u5148\u7ea7\u7684\u60c5\u51b5\u4e0b\u4e0d\u6253\u62ec\u53f7\u3002 for(int i=1;i<=strlen(s);++i) \uff08\u591a\u6b21\u8c03\u7528 strlen \u5bfc\u81f4TLE\uff09 return gcd(b,b%a) \uff08\u628a\u6b27\u51e0\u91cc\u5f97\u7684\u7ed3\u8bba\u80cc\u53cd\uff09\u3002 \u5199\u4e09\u76ee\u8fd0\u7b97\u7b26\u7684\u65f6\u5019\u4ee5\u4e3a\u4e0d\u6ee1\u8db3\u6761\u4ef6\u624d\u4f1a\u6267\u884c : \u524d\u9762\u7684\u3002 \u6bd4\u5982 min(int &a,int b){ return a<b?a=b:a;} : \u628a int \u8bb0\u6210 2 \u4e2abit \uff0c long long \u8bb0\u6210 4 \u4e2a bit \uff0c\u5bfc\u81f4\u7a7a\u95f4\u7b97\u9519\u3002 \u4e3b\u51fd\u6570\u7684\u6700\u540e\u538b\u884c\u5374\u5199\uff1a return printf(\"%lld\\n\",res); \uff0c\u76f4\u63a5 return\u4e86 printf\u7684\u8fd4\u56de\u503c\uff0c\u5bfc\u81f4RE\u3002 \u60f3\u8981\u53d6\u51fa \\(s\\) \u7684 \\([0,i-1]\\) \uff0c\u5374\u5199\u4e86 s.substr(0,i-1) \u3002 (\u5fd8\u8bb0\u4e86 substr \u7684\u7b2c\u4e8c\u4f4d\u662f\u8bf4\u53d6\u51fa\u6765\u7684\u8fd9\u4e2a\u5b50\u4e32\u7684 \u957f\u5ea6 )\u3002 int p[si];p[0]=1; \u548c int p[si]={1}; \u524d\u8005 \\(\\text{O}(1)\\) \uff0c\u540e\u8005 \\(\\text{O}(n)\\) \u6811\u94fe\u5256\u5206\u7684\u65f6\u5019\uff1a dfs2(hx[i][i]); \uff08\u6811 \u70b9 \u5256 \u5206\uff09 \u7ebf\u6bb5\u6811\u533a\u95f4\u52a0\u7684\u65f6\u5019\uff0c pushdown \u91cc\u7528 = \uff0c\u533a\u95f4\u4fee\u53c8\u53bb\u7528 += \u3002\uff08\u6ca1\u641e\u6e05\u695a\u5230\u5e95\u8981\u5e72\u4ec0\u4e48\uff09 \u4e0d\u8981\u5199 a[++cnt]=b[cnt]=d; \uff08\u4f1aUB\uff09 long long n;scanf(\"%d\",&n); \uff08\u683c\u5f0f\u63a7\u5236\u7b26\u5199\u9519\uff09\uff08\u5f88\u5bb9\u6613\u67e5\u4e0d\u51fa\u6765\uff09 unsigned long long qwq; \u7136\u540e printf(\"%ull\",qwq); \uff08\u5b9e\u9645\u4e0a\u662f %llu \uff09 \u641e\u53cd\u6570\u7ec4\u7684\u7ef4\u5ea6\u5206\u522b\u4ee3\u8868\u4ec0\u4e48\u3002 \u5355\u8c03\u961f\u5217\u7684 head \u548c tail \u5199\u53cd\u3002 UB\uff1a tmp[i]++=cnt[j]-- \u540d\u5b57\u6bd4\u8f83\u50cf\u7684\u53d8\u91cf\u6df7\u7740\u4f7f\u7528\u3002 \u6bd4\u8f83\u5927\u7684\u6570\u7528\u4e00\u4e9b\u6d6e\u70b9\u6570\u8fd4\u56de\u503c\u51fd\u6570\u8ba1\u7b97\u7684\u65f6\u5019\u5fd8\u8bb0\u5f3a\u5236\u8f6c\u6210 ll \u5bfc\u81f4\u8f93\u51fa\u79d1\u5b66\u8ba1\u6570\u6cd5\u3002 \u6bd4\u5982 pow(3,19) \u8fd9\u79cd\u5f88\u5927\u7684\uff0c\u90fd\u8981\u5f3a\u5236\u8f6c\u6362\u3002 \u4e00\u4e2a\u4f8b\u5b50\uff1a 1 2 3 4 5 6 struct Edge { int head , ver , Next ; inline void init (){ head = -1 ; } } e [ si_m << 1 ]; e -> init () // \u8fd9\u6837\u5199\u53ea\u4f1a\u6e05\u7a7a e[0] \u800c\u4e0d\u662f\u6240\u6709\u7684\u3002 // STL \u80fd\u8fd9\u6837\u5199\uff0c\u5b9e\u9645\u4e0a\u662f\u56e0\u4e3a STL \u91cd\u8f7d\u4e86 [] \u6240\u4ee5\u8ba9\u5b83\u770b\u8d77\u6765\u7c7b\u4f3c\u4e00\u4e2a\u6570\u7ec4\u3002 \u5c11\u5199 std::bitset<int>b[si]; b->reset() \uff0c\u5e38\u6570\u5f88\u5927\u3002 \u500d\u589e\u7684\u65f6\u5019\u5efa\u8bae\u5148\u5faa\u73af\u7b2c\u4e8c\u7ef4\uff0c\u56e0\u4e3a\u8981\u5c0f\u5fc3\u7b2c\u4e00\u4f4d\u4e0d\u662f\u6309\u7167\u6b63\u5e38\u987a\u5e8f\u8f6c\u79fb\u5bfc\u81f4\u51fa\u73b0\u540e\u6548\u6027\u3002 \u6709\u9664\u6cd5\u4e14 1.0 \u00d7 \u67d0\u4e2a\u6570\u7684\u65f6\u5019\u8981\u7528\u62ec\u53f7\u62ec\u8d77\u6765\uff0c\u4e0d\u7136\u4f1a /1.0 \u7136\u540e\u4e58\u4e0a\u539f\u6765\u8981\u9664\u7684\u6570\u3002","title":"\u5bb9\u6613\u624b\u6ed1\u5199\u9519\uff08\u6f0f\uff09\u7684"},{"location":"%E6%80%BB%E7%BB%93/%E9%94%99%E8%AF%AF%E5%88%97%E8%A1%A8/#_5","text":"\u591a\u7ec4\u6570\u636e\u4e0d\u6e05\u7a7a\u578b \u56fe\u8bba\u9898\u4e0d\u6e05 cnt \uff0c head \u6570\u7ec4\u4e0d\u6e05 0 vector \u4e0d clear() \u7ebf\u6bb5\u6811 tag() \u4e0d\u6e05\u96f6\u3002 \u7528 for(1->n) \u6e05\u96f6\uff0cinit \u5374\u5199\u5728\u8bfb\u5165 n \u7684\u524d\u9762\u3002 \u4e0a\u9762\u8fd9\u4e2a\u7528\u6784\u9020\u51fd\u6570\u7684\u65f6\u5019\u4e5f\u662f\u540c\u7406\u3002 \u6240\u4ee5\u5982\u679c\u6709\u6784\u9020\u51fd\u6570\u5efa\u8bae\u5355\u72ec\u5b9a\u4e49\u51fa\u6765\u800c\u4e0d\u662f\u8ddf\u5728 struct \u4e4b\u540e\u3002 \u6bb5\u9519\u8bef\uff08RE\uff09\u578b \u6570\u7ec4\u5f00\u5c0f \u7ebf\u6bb5\u6811\u56db\u500d\u7a7a\u95f4 \u6811\u7684\u4e24\u500d\u7a7a\u95f4 \u65e0\u5411\u56fe\u7684\u4e24\u500d\u7a7a\u95f4 scanf() \u4e0d\u662f\u8bfb\u5b57\u7b26\u6570\u7ec4\u4f46\u662f\u4e0d\u5199 & long long \u8d1f\u6570\u8003\u8651\u4e86\u4e48\uff1f \u6700\u7b80\u5355\u7684\u77e9\u9635\u7c7b\u578bdfs\u4e0d\u5199 continue \u548c return \uff08\u6ca1\u5199\u8fb9\u754c\uff09 /0 \uff0c erase(end()) \u3002 queue \u548c stack \u4e0d\u5199 pop operator \u4e0d\u5199 const vector \u7684 size() \u4e0d\u5199 (int) \u7136\u540e\u5c31\u51cf\u4e86\u4e00\u4e2a\u6570\u3002 \u4f60\u5199\u7ebf\u6bb5\u6811\u533a\u95f4\u64cd\u4f5c\u5728 update \uff0c query \u91cc\u9762 pushdown \u4e86\u5417\uff1f bitset<si>vis[si]; ... vis.reset() \uff08\u5e94\u8be5\u7528 -> reset() \uff0c\u4f46\u662f\u5e38\u6570\u5927\uff0c\u5efa\u8bae for+.reset() \uff09 \u5199\u6811\u5f62DP\u7684\u65f6\u5019\u4e0d\u5199 vis \u6216\u8005 if(v==fa) continue; \u500d\u589eLCA\uff0c dep[1] \u6ca1\u8bbe\u4e3a 1 \uff0cdfs\u7684\u65f6\u5019\u5fd8\u8bb0 dep[v]=dep[u]+1 \u81ea\u73af\u548c\u91cd\u8fb9\u5224\u4e86\u5417\uff1f \u5230\u5e95\u662f scanf(\"%d%d%d\",&n,&m,&q); \u8fd8\u662f scanf(\"%d%d%d\",&m,&n,&q); \u8fd8\u662f scanf(\"%d%d%d\",&q,&n,&m); \uff1f\uff1f\uff08\u6ce8\u610f\u8bfb\u9898\u7684\u8f93\u5165\u683c\u5f0f\uff09\u3002 \u5f53\u53d8\u91cf\u540d\u7279\u522b\u591a\uff0c\u6bd4\u5982\u8f93\u5165\u91cc\u6709\u4e2a \\(k\\) \uff0c\u5faa\u73af\u53c8\u6709\u4e09\u5c42\u7684\u65f6\u5019\uff1a 1 2 3 4 5 6 7 8 int n , k ; cin >> n >> k ; for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= n ; ++ j ) for ( int k = 1 ; k <= n ; ++ k ) { //\u5728\u8fd9\u91cc\u5fd8\u8bb0\u5faa\u73af\u53d8\u91cf\uff0c\u8bd5\u56fe\u8c03\u7528\u8f93\u5165\u7684k } 1ll \u548c 1.0 \u4e58\u4e86\u5417\uff1f \u6709\u6ca1\u6709\u8003\u8651\u7cfb\u7edf\u51fd\u6570\u7684\u7cbe\u5ea6\u5bfc\u81f4\u7684\u9519\u8bef\uff1f \u6bd4\u5982\uff1a\u5f53\u4f60\u9700\u8981\u5bf9\u4e00\u4e2a\u5728 \\(2^{32}\\) \u4ee5\u4e0a\u7684\u6570\u7b97 \\(\\log_2\\) \u7684\u65f6\u5019\uff0c\u7cbe\u5ea6\u5f88\u5bb9\u6613\u70b8\uff0c\u5efa\u8bae\u624b\u5199\uff1a 1 2 3 4 5 6 ull Extra_log2 ( ull x ){ for ( ull i = 64 ; i >= 0 ; i -- ){ if ( 1 == ( x >> i ) & 0x1 ) break ; } return i ; } \u8fd8\u6709\u6d6e\u70b9\u6570\u4e8c\u5206\u7684\u65f6\u5019\uff0c\u6709\u6ca1\u6709\u8003\u8651 \\(eps\\) \u5e26\u6765\u7684\u8bef\u5dee\uff1f \u8fd9\u91cc\u5efa\u8bae\u7b97\u597d\u6b21\u6570\uff0c\u624b\u52a8\u5faa\u73af\u3002 \u7edf\u8ba1\u7b54\u6848\u5fd8\u8bb0\u53d6\u6a21\u3002 \u5206\u7c7b\u8ba8\u8bba\u9898\u4e0d\u8003\u8651\u50cf \\(n=1\\) \u4e4b\u7c7b\u7684\u7279\u6b8a\u89e3\u5bfc\u81f4\u7684\u505a\u6cd5\u51fa\u9519\u3002 \u5728\u4e25\u683c\u5339\u914d\u8f93\u51fa\u7684\u65f6\u5019\u591a\u8f93\u51fa\u4e00\u4e2a\u7a7a\u683c\uff0c\u591a\u8f93\u51fa\u4e00\u4e2a\u6362\u884c\u3002 \u7b97\u6982\u7387\u5fd8\u8bb0\u6837\u672c\u7a7a\u95f4\uff0c\u7b97\u671f\u671b\u5fd8\u8bb0\u53d8\u91cf\u53d6\u503c\uff0c\u671f\u671bDP\u6b63\u7740\u63a8\u5374\u6ca1\u5904\u7406\u597d\u540e\u6548\u6027\u95ee\u9898\u3002 Dp \u6ca1\u521d\u59cb\u5316\uff0c\u5c11\u8f6c\u79fb\uff0c\u6ca1\u8003\u8651\u540e\u6548\u6027\uff0c\u8fc7\u4e86\u5927\u6837\u4f8b\u76f4\u63a5\u8dd1\u8def\u3002 unsigned long long x=1-2;unsigned long long y=abs(x); \uff08\u5fd8\u8bb0 unsigned \u4e0d\u5e26\u7b26\u53f7\uff09\u3002 \u5199\u4e86\u4e2a\u51fd\u6570\u4f46\u662f\u4f60\u6ca1\u8c03\u7528\u3002 \u5199\u7684 int \u7c7b\u578b\u7684\u51fd\u6570\u4f46\u662f\u4f60\u6ca1\u5199\u8fd4\u56de\u503c\u3002 const int mod=99824353 \uff08\u51c9\u5fc3\u51fa\u9898\u4eba\u7684\u5751\u6a21\u65701\uff09 const int mod=998244533 \uff08\u51c9\u5fc3\u51fa\u9898\u4eba\u7684\u5751\u6a21\u65702\uff09 \u5fd8\u8bb0\u5e94\u8be5\u8d4b\u503c\u7684\u987a\u5e8f\uff0c\u4f4d\u7f6e\uff1a 1 2 3 4 5 int n ; int tot = n ; int main (){ cin >> n ; } // \u5728 n=0 \u7684\u65f6\u5019\u7ed9 tot \u8d4b\u503c\u4e3a n \u5728\u6570\u636e\u5f88\u5927\u7684\u65f6\u5019\u4e00\u5b9a\u4e0d\u8981\u4f7f\u7528 % \uff0c\u76f4\u63a5\u624b\u5199\u5373\u53ef\u3002 \u53d6\u6a21\u7684\u65f6\u5019\u5982\u679c\u91cc\u9762\u53ef\u80fd\u6709\u8d1f\u6570\u8981 \u5148\u819c\u518d\u52a0\u518d\u819c: ((a+b)%mod+mod)%mod \u5982\u679c\u6ca1\u6709\u8d1f\u6570\u5c31 (a+b)%mod \u5e93\u51fd\u6570\u81ea\u5e26 \u7684 max \uff0c min \u8981\u6c42\u4e24\u4e2a\u53c2\u6570\u53d8\u91cf\u7c7b\u578b\u76f8\u540c\u3002 heap-dijkstra \u4e0d\u5199 -dis[v] \uff08\u8d2a\u5fc3\u53d8\u8c26\u865a\uff09 \u7f29\u5b8c\u70b9\u4e4b\u540e\u5982\u679c\u53ef\u80fd\u6709\u91cd\u8fb9\u5224\u4e86\u5417\uff1f\uff1f\uff01\uff01\uff01 \u4f60\u8981\u5904\u7406\u7684\u5230\u5e95\u662f\u8fde\u901a\u56fe\u8fd8\u662f\u597d\u51e0\u4e2a\u8fde\u901a\u5757\uff1f \u4f60\u5728\u5904\u7406\u68ee\u6797\u7684\u65f6\u5019\u662f\u4e0d\u662f\u5199\u9519\u6210\u6811\u7684\u60c5\u51b5\u4e86\uff1f string \u7684\u4e00\u4e2a\u7279\u6027 1 2 3 4 5 6 7 8 9 10 11 12 13 int main (){ s [ 0 ] = 'a' ; cout << s . size (); } //\u4f60\u4f1a\u53d1\u73b0\u8fd9\u6837\u5b50 $s$ \u7684 $size$ \u662f $0$ \u800c\u4e14 $s[0]\\not=a$! //\u56e0\u4e3a\u6211\u4eec\u5f00\u59cb\u7684\u65f6\u5019\u6ca1\u6709\u7ed9 $s$ \u5206\u914d\u7a7a\u95f4\u3002 //\u6240\u4ee5\u53ef\u4ee5\u8fd9\u6837\u5b50\u5199 string s ( 6 , '\\0' ); int main (){ s [ 0 ] = 'a' ; cout << s . size (); } //\u6216\u8005\u4f60\u76f4\u63a5\u7528 += \u548c push_back \u5fd8\u8bb0 && \u548c || \u662f\u77ed\u8def\u8fd0\u7b97\u7b26\u3002 \u7ebf\u6bb5\u6811\u5408\u5e76\u7684\u65f6\u5019\uff0c\u5982\u679c\u4f60\u7684 merge \u8fd4\u56de\u7c7b\u578b\u662f int \u90a3\u4e48\u4e00\u5b9a\u8bb0\u5f97 root[x]=merge(root[x],root[y]) \uff0c\u5fc5\u987b\u52a0\u524d\u9762\u7684 root[x]= \u53d6 vector \u7684 back \u7684\u65f6\u5019\uff08\u6216 queue \u7684 front\uff09\u6ca1\u6709\u5224\u957f\u5ea6\u4e3a 0 \u5c11\u7528 memset \u3002 *next_permutation \u6216\u8005 lower_bound \u8c03\u7528\u4e4b\u524d\u6ca1\u6709\u6392\u5e8f. \u5fd8\u8bb0\u7b97\u7a7a\u95f4\u5bfc\u81f4 MLE\uff0c\u4e00\u5206\u90fd\u6ca1\u6709\u3002 \u6ce8\u610f\u9898\u76ee\u4e2d\u7b97\u7684\u662f\u6709\u5e8f\u6570\u5bf9\u8fd8\u662f\u65e0\u5e8f\u6570\u5bf9\u3002","title":"\u5bb9\u6613\u5fd8\u8bb0\uff08\u5199\uff0c\u7b97\uff0c\u67e5\uff09\u7684\u7ec6\u8282"},{"location":"%E6%80%BB%E7%BB%93/%E9%94%99%E8%AF%AF%E5%88%97%E8%A1%A8/#_6","text":"int time,y1; \uff08Linux \u4e0b\u7684\u5173\u952e\u5b57\uff09 Linux\\POJ \u4e0b\u4f7f\u7528 INT_MAX \u4f46\u4e0d\u5199 #include<climits> \uff08\u4e07\u80fd\u5934\u7684\u8bdd\uff0c\u518d\u89c1\uff09 \u5728 c++14 \u6807\u51c6\u4f7f\u7528\u6ca1\u6709\u7684 gets \uff0c\u4f46\u4f60\u8003\u8bd5\u5199\u547d\u4ee4\u7684\u65f6\u5019\u4e0d\u5c0f\u5fc3\u6ca1\u5199 -std=c++14 \uff0c\u5bfc\u81f4\u4f60\u4ee5\u4e3a\u4f60\u6ca1\u6709\u95ee\u9898\uff0c\u4ea4\u4e0a\u53bb\u53d8\u6210CE\u3002 \u56e0\u4e3a\u6837\u4f8b\u4e00\u822c\u4f7f\u7528 Linux \u683c\u5f0f\uff0c\u6240\u4ee5\u8981\u6ce8\u610f\uff1a Windows(Dos):\u6362\u884c\u7b26\u662f \\r\\n Linux(\u7c7bUnix):\u6362\u884c\u7b26\u662f \\n . 5. \u4e00\u9053\u9898\u5199\u4e86\u591a\u79cd\u90e8\u5206\u5206\u505a\u6cd5\u4f46\u662f\u6ca1\u6807\u8bb0\u54ea\u4e2a\u662f\u54ea\u4e2a\uff0c\u6536\u7684\u65f6\u5019\u4e00\u4e0d\u5c0f\u5fc3\u4ea4\u4e86\u5206\u6700\u5c11\u7684\u90a3\u4e2a\u3002 6. \u628a freopen \u6ce8\u91ca\u4e86\u4ea4\u4e0a\u53bb\u3002 7. \uff08w,r\uff09 \u5199\u53cd\u3002 1 2 freopen ( \"xx.in\" , \"w\" , stdin ); freopen ( \"xx.out\" , \"r\" , stdout ); 8. \u4e0d\u5220\u9664\u8c03\u8bd5\u7528\u7684\u4ee3\u7801 9. \u5efacpp\u7684\u65f6\u5019\u4e0d\u8981\u9690\u85cf\u540e\u7f00\uff0c\u8fd9\u6837\u5bb9\u6613\u6253\u4e24\u4e2acpp","title":"\u5bb9\u6613\u56e0\u4e3a\u6587\u4ef6\uff0c\u7cfb\u7edf\u548c\u73af\u5883\u51fa\u9519\u7684"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%8E%E9%9B%86%E5%90%88%E8%A7%92%E5%BA%A6%E8%80%83%E8%99%91DP/","text":"\u4ece\u96c6\u5408\u89d2\u5ea6\u770bDP\u95ee\u9898 \u00b6 \u548c\u4e00\u822c DP \u5206\u6790\u65b9\u5f0f\u4e0d\u4e00\u6837\u7684\u5730\u65b9\u5728\u4e8e\uff0c \u8fd9\u79cd DP \u5206\u6790\u65b9\u5f0f\u628a DP \u7684\u72b6\u6001\u7a7a\u95f4\u770b\u4f5c\u5168\u96c6\uff0c\u4e00\u4e2a\u4e2a DP \u72b6\u6001\u770b\u4f5c\u4e00\u4e2a\u4e2a\u5c0f\u96c6\u5408\u3002 \u628a\u51b3\u7b56\u8f6c\u79fb\u53d8\u6210\u4e86\u96c6\u5408\u7684\u5212\u5206\uff0c\u4ee5\u8fbe\u5230\u4e0d\u91cd\u4e0d\u6f0f\uff0c\u5e76\u628a DP \u72b6\u6001\u62c6\u5206\u4e3a\u4e86\u4e24\u79cd\u5c5e\u6027\u3002 \u7528\u4e09\u4e2a\u7ebf\u6027 DP \u7684\u7ecf\u5178\u6a21\u578b\u4f5c\u4f8b\u5b50\u8bf4\u660e\u3002 LIS \u95ee\u9898 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u6c42\u5b83\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \\(|a| \\le 3000\\) \u3002 \u672c\u7740\u95ee\u5565\u8bbe\u5565\u7684\u539f\u5219\uff0c\u6211\u4eec\u8bbe\u8ba1\u7684\u72b6\u6001\u9700\u8981\u5305\u542b\u8981\u7d20\uff1a\u201d\u4e0a\u5347\u81ea\u5e8f\u5217\uff0c\u6700\u957f\u201c\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u7528\u6765\u8bbe\u8ba1\u72b6\u6001\u7684 \u201d\u6807\u5fd7\u201c\u90fd\u662f \u201d\u5f53\u524d\uff0c\u6700\u540e\u201c\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u72b6\u6001\u4e00\u822c\u90fd\u4f1a\u8bbe\u8ba1\u6210\uff1a\u201c\u5f53\u524d\u72b6\u6001\u7684\u4ec0\u4e48\u4ec0\u4e48\u4fe1\u606f\uff0c\u6709\u4ec0\u4e48\u4ec0\u4e48\u5c5e\u6027\u201d\uff0c\u6216\u8005 \u201c\u6700\u540e\u4e00\u4e2a\u72b6\u6001\u7684\u4fe1\u606f\u662f\u4ec0\u4e48\u4ec0\u4e48\uff0c\u5c5e\u6027\u662f\u4ec0\u4e48\u4ec0\u4e48\u201d \u7684\u6837\u5b50\u3002 \u6240\u4ee5\uff0c\u8bbe \\(dp_{i}\\) \u8868\u793a \u6240\u6709 \u4ee5 \\(a_i\\) \u7ed3\u5c3e\u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u7ec4\u6210\u7684 \u96c6\u5408 \uff0c\u5c5e\u6027\u4e3a Max\u3002 \u90a3\u4e48\u5982\u4f55\u5904\u7406\u8f6c\u79fb\uff1f \u5c06 \\(dp_i\\) \u6240\u4ee3\u8868\u7684\u96c6\u5408\u5212\u5206\u4e3a\u591a\u4e2a\u5b50\u96c6\uff0c\u5e76\u4e14\u8fd9\u4e9b\u5b50\u96c6\u90fd\u53ef\u4ee5\u5229 \u7528\u4e00\u4e2a\u72b6\u6001\u6765\u8868\u793a \u3002 \u5212\u5206\u7684\u4f9d\u636e\u5219\u662f \u201c \u6700\u540e\u4e00\u4e2a\u4e0d\u540c\u7684\u70b9 \u201d\u3002 \u9996\u5148\u5199\u51fa \\(dp_i\\) \u4ee3\u8868\u7684\u96c6\u5408\u662f\u4ec0\u4e48\uff1a\u201c\u6240\u6709\u4ee5 \\(a_i\\) \u7ed3\u5c3e\u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u201d\u3002 \u628a \\(dp_i\\) \u8fd9\u4e2a\u96c6\u5408\u5305\u542b\u7684\u6240\u6709\u5b50\u5e8f\u5217\u5c55\u5f00\uff0c\u53ef\u4ee5\u53d1\u73b0\u4ed6\u4eec\u5168\u90e8\u957f\u6210\u8fd9\u6837\uff1a \\[\\begin{matrix}\\dots & las_1 & a_i \\\\ \\dots & las_2 & a_i \\\\ \\dots & las_3 & a_i \\end{matrix}\\] \u5176\u4e2d \\(las\\) \u8868\u793a\u8fd9\u4e2a\u5b50\u5e8f\u5217\u7684\u5012\u6570\u7b2c\u4e8c\u4e2a\u5143\u7d20\u3002 \u53d1\u73b0 \u201c\u6700\u540e\u4e00\u4e2a\u4e0d\u540c\u7684\u70b9\u201d \u5c31\u662f\u8fd9\u4e9b\u5012\u6570\u7b2c\u4e8c\u4e2a\u5143\u7d20 \\(las\\) \uff0c\u56e0\u4e3a\u6240\u6709\u5b50\u5e8f\u5217\u7684\u5012\u6570\u7b2c\u4e00\u4e2a\u5143\u7d20\u90fd\u662f\u76f8\u540c\u7684\u3002 \u6240\u4ee5\u5c31\u4ee5\u8fd9\u4e9b \\(las\\) \u4f5c\u4e3a\u5212\u5206\u4f9d\u636e\uff0c\u53ef\u4ee5\u5c06\u96c6\u5408 \\(dp_i\\) \u5212\u5206\u5982\u4e0b\uff1a \u56fe\u4e2d\u6a59\u8272\u5b57\u4f53\u662f\u4ee3\u8868\u4e86\u8fd9\u4e2a\u5b50\u96c6\u7684\u72b6\u6001\uff0c\u7eff\u8272\u5b57\u4f53\u8bf4\u660e\u4e86\u8fd9\u4e2a\u5b50\u96c6\u4ee3\u8868\u4e86\u4ec0\u4e48\u3002 \u5212\u5206\u5b8c\u4e4b\u540e\uff0c\u89c2\u5bdf \\(dp_i\\) \u8fd9\u4e2a\u96c6\u5408\u5bf9\u5e94\u7684\u5c5e\u6027\uff0c\u662f \\(\\max\\) \uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5728\u6240\u6709\u5212\u5206\u51fa\u6765\u7684\u96c6\u5408\u5bf9\u5e94\u7684\u72b6\u6001\u5f53\u4e2d\u53d6\u6700\u5927\u503c\u3002 \u53ef\u4ee5\u5f97\u5230\u65b9\u7a0b\uff1a \\[dp_{i} = \\max\\{dp_j\\} + 1\\] \u4f46\u662f\u6ce8\u610f\u5230\u8fd9\u4e9b\u5212\u5206\u51fa\u6765\u7684\u96c6\u5408\u4e0d\u4e00\u5b9a\u90fd\u80fd\u591f\u8f6c\u79fb\u5230\u96c6\u5408\uff0c\u6bd4\u5982\u5b58\u5728\u4e00\u4e2a \\(a_j > a_i,j < i\\) \u7684\u9006\u5e8f\u5bf9\uff0c \u90a3\u4e48 \\(dp_j\\) \u8fd9\u4e2a\u96c6\u5408\u5c31\u4e0d\u53ef\u80fd\u8f6c\u79fb\u5230 \\(dp_i\\) \uff0c\u56e0\u4e3a \\(dp_j\\) \u4ee3\u8868\u4e86 \u201d\u6240\u6709\u4ee5 \\(a_j\\) \u7ed3\u5c3e\u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u6784\u6210\u7684\u96c6\u5408\u201c\u3002 \u800c\u8fd9\u4e2a\u96c6\u5408\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u5b50\u5e8f\u5217\u63d0\u51fa\u6765\uff0c\u5728\u540e\u9762\u63a5\u4e0a \\(a_i\\) \u540e\uff0c\u5b83\u90fd\u4e0d\u4f1a\u518d\u662f\u4e00\u4e2a\u4e0a\u5347\u5b50\u5e8f\u5217\u4e86\u3002 \u6240\u4ee5\u6211\u4eec\u8fd8\u9700\u8981\u5224\u65ad\u5212\u5206\u51fa\u6765\u7684\u96c6\u5408\u662f\u5426\u5408\u6cd5\uff0c\u65b9\u7a0b\u53d8\u4e3a\uff1a \\[dp_i = \\max\\{dp_j\\} + 1,a_i > a_j\\] \u800c\u5212\u5206\u96c6\u5408\u7684\u65f6\u5019\u53d1\u73b0\uff0c \\(a_i\\) \u672c\u8eab\u4e5f\u80fd\u4f5c\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u51fa\u73b0\uff0c\u6240\u4ee5\u521d\u59cb\u5316\u7684\u65f6\u5019\u8981\u4ee4 \\(dp_i = 1\\) \u3002 \u65b9\u7a0b\u53d8\u4e3a\uff1a \\[dp_i = \\max\\{dp_j + 1\\},a_i > a_j,dp_i =1(\\text{initially})\\] \u628a \\(+1\\) \u653e\u8fdb \\(\\max\\) \u91cc\u662f\u4e3a\u4e86\u65b9\u4fbf\u8f6c\u79fb\u3002 \u6839\u636e\u5b9a\u4e49\uff0c\u7b54\u6848\u662f \\(\\max\\{dp_i\\}\\) \u3002 \u53ef\u4ee5\u5199\u51fa\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 for ( int i = 1 ; i <= n ; ++ i ) dp [ i ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j < i ; ++ j ) { if ( a [ i ] > a [ j ]) dp [ i ] = max ( dp [ i ], dp [ j ] + 1 ); } } int res = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { res = max ( res , dp [ i ]); } \u590d\u6742\u5ea6 \\(\\text{O}(n^2)\\) \uff0c\u6bcf\u6b21\u5212\u5206\u679a\u4e3e\u5b50\u96c6\u8f6c\u79fb\u6d88\u8017 \\(\\text{O}(n)\\) \uff0c\u679a\u4e3e\u4ee5\u6240\u6709\u70b9\u4f5c\u4e3a\u7ed3\u5c3e\u7684\u60c5\u51b5\u6d88\u8017 \\(\\text{O}(n)\\) \u3002 \u672c\u9898\u6240\u7ed9\u7684\u542f\u793a\uff1a DP \u7684\u672c\u8d28\u662f \u201d\u806a\u660e\u201c \u5730\u5212\u5206\u96c6\u5408\u3002 DP \u7684\u521d\u59cb\u5316\u8981\u6839\u636e\u72b6\u6001\u672c\u8eab\u7684\u5b9a\u4e49\u548c\u8f6c\u79fb\u9700\u6c42\u6765\u8bbe\u7f6e\u3002 DP \u5212\u5206\u7684\u91cd\u8981\u4f9d\u636e\u662f \u201d\u6700\u540e\u4e00\u4e2a\u4e0d\u540c\u70b9\u201c\uff0c\u601d\u8003\u65f6\u9700\u8981\u8003\u8651\u628a\u5f53\u524d\u96c6\u5408 \u5c55\u5f00 \u3002 \u5212\u5206\u51fa\u7684\u5b50\u96c6\u4e0d\u4e00\u5b9a\u90fd\u80fd\u7528\u6765\u8f6c\u79fb\uff0c\u8981\u8fdb\u884c\u53ef\u884c\u6027\u7684\u5224\u65ad\u3002 LCS \u95ee\u9898 \u00b6 \u7ed9\u5b9a\u4e24\u4e2a\u5e8f\u5217 \\(a\uff0cb\\) \uff0c\u6c42\u4ed6\u4eec\u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u3002 \\(|a|,|b| \\le 3000\\) \u3002 \u672c\u9898\u7684\u8981\u7d20\u662f \u201d\u516c\u5171\uff0c\u6700\u957f\u201c\u3002 \u8003\u8651\u5982\u4f55\u5904\u7406\u8fd9\u4e2a \u201d\u516c\u5171\u201c\uff0c\u53d1\u73b0\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\uff0c\u627e\u5230\u4e00\u7ec4 \\(i,j\\) \u4f7f\u5f97 \\(a_i = b_j\\) \uff0c\u7136\u540e\u8fdb\u884c\u8f6c\u79fb\u3002 \u6240\u4ee5\u8bbe \\(dp_{i,j}\\) \u8868\u793a\u7531 \\(a[1\\sim i],b[1 \\sim j]\\) \u6784\u6210\u7684\u6240\u6709\u516c\u5171\u5b50\u5e8f\u5217\uff0c\u5c5e\u6027\u4e3a \\(\\max\\) \u3002 \u53d1\u73b0\u96c6\u5408\u53ef\u4ee5\u5212\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff0c\u7b2c\u4e00\u4e2a\u90e8\u5206\u662f \\(a_i \\not = b_j\\) \u65f6\uff0c\u7531 \\(a[1 \\sim i],b[1\\sim j]\\) \u6784\u6210\u7684\u516c\u5171\u5b50\u5e8f\u5217\u3002 \u7b2c\u4e8c\u90e8\u5206\u662f\u5f53 \\(a_i = b_j\\) \u65f6\uff0c\u7531 \\(a[1 \\sim i-1],b[1\\sim j-1]\\) \u6784\u6210\u7684\u516c\u5171\u5b50\u5e8f\u5217\u3002 \u4e3a\u4ec0\u4e48\u662f\u7531 \\(a[1\\sim i-1],b[1 \\sim j-1]\\) \u6784\u6210\u7684\u5462\uff1f\u56e0\u4e3a\u6b64\u65f6 \\(a_i = b_j\\) \uff0c\u6240\u4ee5\u8fd9\u534a\u90e8\u5206\u6240\u4ee3\u8868\u7684\u96c6\u5408\u4e2d\u7684\u516c\u5171\u5b50\u5e8f\u5217\u90fd\u957f\u6210\u8fd9\u6837\uff1a \\[\\begin{matrix}\\dots & ... & a_i/b_j \\\\ \\dots & ... & a_i/b_j \\\\ \\dots & ... & a_i/b_j\\end{matrix}\\] \u90a3\u4e48\u6b64\u65f6\u7684\u7b54\u6848\u5c31\u662f\u524d\u9762\u90e8\u5206\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c \\(+1\\) \uff0c\u800c\u524d\u9762\u90a3\u90e8\u5206\u957f\u5ea6\u7684\u6700\u5927\u503c\u5b9e\u9645\u4e0a\u5c31\u662f\u7531 \\(a[1\\sim i-1],b[1\\sim j-1]\\) \u6784\u6210\u7684\u6240\u6709\u516c\u5171\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u6700\u5927\u503c\uff0c\u96c6\u5408 \\(dp_{i-1,j-1}\\) \u5373\u53ef\u8868\u793a\u8fd9\u4e00\u90e8\u5206\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u8fd9\u90e8\u5206\u662f\u7531 \\(a[1\\sim i-1],b[1\\sim j-1]\\) \u6784\u6210\u7684\uff0c\u53ea\u662f\u8f6c\u79fb\u65f6 \\(a_i,b_j\\) \u4f1a\u6709\u8d21\u732e\u800c\u5df2\u3002 \u7136\u540e\u8003\u8651\u7b2c\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u529e\u6cd5\u5bf9\u5b83\u7528\u4e00\u4e2a\u72b6\u6001\u76f4\u63a5\u8868\u793a\uff0c\u6240\u4ee5\u518d\u6b21\u5bf9\u4ed6\u8fdb\u884c\u5212\u5206\u3002 \u56e0\u4e3a \\(a_i \\not= b_j\\) \uff0c\u6240\u4ee5\u6211\u4eec\u5206\u522b\u628a \\(a_i,b_j\\) \u8e22\u51fa\u53bb\uff0c\u7136\u540e\u8fdb\u884c\u8f6c\u79fb\u3002 \u90a3\u4e48\u7b2c\u4e00\u90e8\u5206\u5c31\u53ef\u4ee5\u5212\u5206\u6210 \\(dp_{i,j-1},dp_{i-1,j}\\) \u4e24\u4e2a\u5b50\u96c6\uff0c\u56e0\u4e3a \\(dp_{i,j}\\) \u7684\u5c5e\u6027\u662f \\(\\max\\) \uff0c\u800c\u8f6c\u79fb\u65f6 \\(a_i \\not= b_j\\) \uff0c\u4e0d\u80fd\u63d0\u4f9b\u8d21\u732e\uff0c\u6240\u4ee5\u76f4\u63a5\u8ba9 \\(dp_{i, j}\\) \u7ee7\u627f \\(\\max\\{dp_{i,j-1},dp_{i-1,j}\\}\\) \u5373\u53ef\u3002 \u5212\u5206\u5982\u4e0b\uff1a \u53ef\u4ee5\u5f97\u5230\u65b9\u7a0b\uff1a \\[dp_{i,j} = \\begin{cases}\\max(dp_{i-1,j},dp_{i,j-1}) & a_i \\not= b_j\\\\ dp_{i-1,j-1} + 1 & a_i = b_j\\end{cases}\\] \u6839\u636e\u72b6\u6001\u5b9a\u4e49\uff0c \\(dp\\) \u5e94\u5f53\u5168\u90e8\u521d\u59cb\u5316\u4e3a \\(0\\) \uff0c\u7b54\u6848\u4e3a \\(dp_{n,n}\\) 1 2 3 4 5 6 7 8 9 10 11 12 13 memset ( dp , 0 , sizeof dp ); for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { if ( a [ i ] == b [ j ]) dp [ i ][ j ] = dp [ i - 1 ][ j - 1 ] + 1 ; else dp [ i ][ j ] = max ( dp [ i ][ j - 1 ], dp [ i - 1 ][ j ]); } } cout << dp [ n ][ n ] << endl ; // \u8fd9\u4e2a\u5199\u6cd5\u4fdd\u8bc1 |a| = |b| = n\u3002 \u590d\u6742\u5ea6 \\(\\text{O}(n^2)\\) \u3002 \u672c\u9898\u6240\u7ed9\u7684\u542f\u793a\uff1a \u5212\u5206\u540e\u7684\u8f6c\u79fb\u5b9e\u9645\u4e0a\u662f\u5229\u7528 \u201d\u5b50\u96c6\u201c \u548c \u201d\u5f53\u524d\u4fe1\u606f\u201c \u7684\u7ed3\u5408\u3002 \u5982\u679c\u5f53\u524d\u4fe1\u606f\u5360\u7528\u4e86\u96c6\u5408\u7684\u4e00\u90e8\u5206\uff0c\u5212\u5206\u65f6\u5e94\u5f53\u628a\u5b83\u5228\u6389\u3002 \u6570\u5b57\u4e09\u89d2\u5f62\u95ee\u9898 \u00b6 \u4e3a\u4e86\u65b9\u4fbf\u53d9\u8ff0\uff0c\u6b64\u5904\u6362\u6210\u4e86\u68cb\u76d8\u7c7b DP \u7684\u6a21\u677f\u3002 \u7ed9\u5b9a\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635\uff0c\u521d\u59cb\u4f60\u5728 \\((1,1)\\) \uff0c\u6bcf\u6b21\u53ef\u4ee5\u5f80\u4e0b\u6216\u8005\u5f80\u53f3\u8d70\u4e00\u6b65\u3002 \u95ee\u8d70\u5230 \\((n,m)\\) \u7684\u65b9\u6848\u6570\u3002 \u8bbe \\(dp_{i,j}\\) \u8868\u793a\u4ece \\((1,1)\\) \u8d70\u5230 \\((i,j)\\) \u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u6570\u91cf\uff08\u6ce8\u610f\u8fd9\u91cc\u53d8\u4e3a\u4e86\u6570\u91cf\uff09\u3002 \u8003\u8651\u5212\u5206\u96c6\u5408 \\(dp_{i,j}\\) \u3002 \u5c55\u5f00 \\(dp_{i,j}\\) \u4e2d\u7684\u6240\u6709\u65b9\u6848\uff0c\u53d1\u73b0\u4ed6\u4eec\u90fd\u957f\u8fd9\u6837\uff1a \\[\\begin{matrix}(1,1) \\to \\dots \\to (x_1,y_1) \\to (i,j) \\\\ (1,1) \\to \\dots \\to (x_2,y_2) \\to (i,j)\\end{matrix}\\] \u53d1\u73b0 \u201d\u6700\u540e\u4e00\u4e2a\u4e0d\u540c\u70b9\u201c \u5c31\u662f \u201d\u4e0a\u4e00\u6b65\u201c \u6240\u5904\u7684\u4f4d\u7f6e \\((x,y)\\) \u3002 \u800c\u672c\u9898\u8981\u6c42\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\uff0c\u6240\u4ee5\u53ea\u6709\u4ece\u4e0a\u9762\u548c\u5de6\u9762\u8d70\u8fc7\u6765\u4e24\u79cd\u60c5\u51b5\u3002 \u6240\u4ee5\u96c6\u5408\u53ef\u4ee5\u5212\u5206\u6210 \\(dp_{i,j-1},dp_{i-1,j}\\) \u8fd9\u4e24\u90e8\u5206\u3002 \u53ef\u4ee5\u5217\u51fa\u65b9\u7a0b\uff1a \\[dp_{i,j} = dp_{i,j} + (dp_{i-1,j} + dp_{i, j-1})\\] \u5176\u4e2d\u6839\u636e\u72b6\u6001\u5b9a\u4e49\uff0c \\(dp_{1,1}\\) \u5e94\u5f53\u521d\u59cb\u5316\u4e3a \\(1\\) \uff0c\u5176\u5b83\u7684\u5e94\u5f53\u4e3a \\(0\\) \u3002 \u4f46\u662f\u8981\u6ce8\u610f\u5224\u65ad\u662f\u5426\u8d8a\u754c\uff0c\u6240\u4ee5\u6b64\u65f6\u53ef\u4ee5\u5229\u7528\u53e6\u4e00\u79cd DP \u65b9\u5f0f\uff0c\u987a\u63a8\u3002 \u4e5f\u5c31\u662f\u8003\u8651\u628a\u5f53\u524d\u96c6\u5408\u7684\u65b9\u6848\u6570\u52a0\u5230\u6240\u6709\u5212\u5206\u540e \u76f4\u63a5 \u542b\u6709\u5b83\u7684\u96c6\u5408\u7684\u65b9\u6848\u6570\u5f53\u4e2d\u3002 \u5f00\u5927\u6570\u7ec4\u540e\u5c31\u4e0d\u7528\u5224\u8fb9\u754c\u4e86\u3002 \u6240\u4ee5\u53ef\u4ee5\u5f97\u5230\u65b0\u7684\u65b9\u7a0b\uff1a \\( \\(dp_{i+1,j} = dp_{i+1,j}+dp_{i,j},dp_{i,j+1} = dp_{i,j+1} + dp_{i,j}\\) \\) \u3002 \u521d\u59cb\u5316\u4e0d\u53d8\u3002 \u53ef\u4ee5\u5199\u51fa\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 memset ( dp , 0 , sizeof dp ); dp [ 1 ][ 1 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= m ; ++ j ) { dp [ i + 1 ][ j ] += dp [ i ][ j ]; dp [ i ][ j + 1 ] += dp [ i ][ j ]; } } cout << dp [ n ][ m ] << endl ; \u672c\u9898\u6240\u7ed9\u7684\u542f\u793a\uff1a \u4e0d\u6b62\u53ef\u4ee5\u5212\u5206\u540e\u7528\u5b50\u96c6\u6765\u66f4\u65b0\u5f53\u524d\u96c6\u5408\uff0c\u4e5f\u53ef\u4ee5\u5212\u5206\u540e\u7528\u5f53\u524d\u96c6\u5408\u53bb\u66f4\u65b0\u8ba9\u5f53\u524d\u72b6\u6001\u4f5c\u4e3a\u5b50\u96c6\u7684\u96c6\u5408\u3002 DP \u7684\u5c5e\u6027\u4e0d\u6b62 \\(\\min,\\max\\) \uff0c\u8fd8\u6709\u6570\u91cf\uff0c\u671f\u671b\uff0c\u6982\u7387\u7b49\u3002","title":"\u4ece\u96c6\u5408\u89d2\u5ea6\u8003\u8651DP"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%8E%E9%9B%86%E5%90%88%E8%A7%92%E5%BA%A6%E8%80%83%E8%99%91DP/#dp","text":"\u548c\u4e00\u822c DP \u5206\u6790\u65b9\u5f0f\u4e0d\u4e00\u6837\u7684\u5730\u65b9\u5728\u4e8e\uff0c \u8fd9\u79cd DP \u5206\u6790\u65b9\u5f0f\u628a DP \u7684\u72b6\u6001\u7a7a\u95f4\u770b\u4f5c\u5168\u96c6\uff0c\u4e00\u4e2a\u4e2a DP \u72b6\u6001\u770b\u4f5c\u4e00\u4e2a\u4e2a\u5c0f\u96c6\u5408\u3002 \u628a\u51b3\u7b56\u8f6c\u79fb\u53d8\u6210\u4e86\u96c6\u5408\u7684\u5212\u5206\uff0c\u4ee5\u8fbe\u5230\u4e0d\u91cd\u4e0d\u6f0f\uff0c\u5e76\u628a DP \u72b6\u6001\u62c6\u5206\u4e3a\u4e86\u4e24\u79cd\u5c5e\u6027\u3002 \u7528\u4e09\u4e2a\u7ebf\u6027 DP \u7684\u7ecf\u5178\u6a21\u578b\u4f5c\u4f8b\u5b50\u8bf4\u660e\u3002","title":"\u4ece\u96c6\u5408\u89d2\u5ea6\u770bDP\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%8E%E9%9B%86%E5%90%88%E8%A7%92%E5%BA%A6%E8%80%83%E8%99%91DP/#lis","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u6c42\u5b83\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \\(|a| \\le 3000\\) \u3002 \u672c\u7740\u95ee\u5565\u8bbe\u5565\u7684\u539f\u5219\uff0c\u6211\u4eec\u8bbe\u8ba1\u7684\u72b6\u6001\u9700\u8981\u5305\u542b\u8981\u7d20\uff1a\u201d\u4e0a\u5347\u81ea\u5e8f\u5217\uff0c\u6700\u957f\u201c\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u7528\u6765\u8bbe\u8ba1\u72b6\u6001\u7684 \u201d\u6807\u5fd7\u201c\u90fd\u662f \u201d\u5f53\u524d\uff0c\u6700\u540e\u201c\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u72b6\u6001\u4e00\u822c\u90fd\u4f1a\u8bbe\u8ba1\u6210\uff1a\u201c\u5f53\u524d\u72b6\u6001\u7684\u4ec0\u4e48\u4ec0\u4e48\u4fe1\u606f\uff0c\u6709\u4ec0\u4e48\u4ec0\u4e48\u5c5e\u6027\u201d\uff0c\u6216\u8005 \u201c\u6700\u540e\u4e00\u4e2a\u72b6\u6001\u7684\u4fe1\u606f\u662f\u4ec0\u4e48\u4ec0\u4e48\uff0c\u5c5e\u6027\u662f\u4ec0\u4e48\u4ec0\u4e48\u201d \u7684\u6837\u5b50\u3002 \u6240\u4ee5\uff0c\u8bbe \\(dp_{i}\\) \u8868\u793a \u6240\u6709 \u4ee5 \\(a_i\\) \u7ed3\u5c3e\u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u7ec4\u6210\u7684 \u96c6\u5408 \uff0c\u5c5e\u6027\u4e3a Max\u3002 \u90a3\u4e48\u5982\u4f55\u5904\u7406\u8f6c\u79fb\uff1f \u5c06 \\(dp_i\\) \u6240\u4ee3\u8868\u7684\u96c6\u5408\u5212\u5206\u4e3a\u591a\u4e2a\u5b50\u96c6\uff0c\u5e76\u4e14\u8fd9\u4e9b\u5b50\u96c6\u90fd\u53ef\u4ee5\u5229 \u7528\u4e00\u4e2a\u72b6\u6001\u6765\u8868\u793a \u3002 \u5212\u5206\u7684\u4f9d\u636e\u5219\u662f \u201c \u6700\u540e\u4e00\u4e2a\u4e0d\u540c\u7684\u70b9 \u201d\u3002 \u9996\u5148\u5199\u51fa \\(dp_i\\) \u4ee3\u8868\u7684\u96c6\u5408\u662f\u4ec0\u4e48\uff1a\u201c\u6240\u6709\u4ee5 \\(a_i\\) \u7ed3\u5c3e\u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u201d\u3002 \u628a \\(dp_i\\) \u8fd9\u4e2a\u96c6\u5408\u5305\u542b\u7684\u6240\u6709\u5b50\u5e8f\u5217\u5c55\u5f00\uff0c\u53ef\u4ee5\u53d1\u73b0\u4ed6\u4eec\u5168\u90e8\u957f\u6210\u8fd9\u6837\uff1a \\[\\begin{matrix}\\dots & las_1 & a_i \\\\ \\dots & las_2 & a_i \\\\ \\dots & las_3 & a_i \\end{matrix}\\] \u5176\u4e2d \\(las\\) \u8868\u793a\u8fd9\u4e2a\u5b50\u5e8f\u5217\u7684\u5012\u6570\u7b2c\u4e8c\u4e2a\u5143\u7d20\u3002 \u53d1\u73b0 \u201c\u6700\u540e\u4e00\u4e2a\u4e0d\u540c\u7684\u70b9\u201d \u5c31\u662f\u8fd9\u4e9b\u5012\u6570\u7b2c\u4e8c\u4e2a\u5143\u7d20 \\(las\\) \uff0c\u56e0\u4e3a\u6240\u6709\u5b50\u5e8f\u5217\u7684\u5012\u6570\u7b2c\u4e00\u4e2a\u5143\u7d20\u90fd\u662f\u76f8\u540c\u7684\u3002 \u6240\u4ee5\u5c31\u4ee5\u8fd9\u4e9b \\(las\\) \u4f5c\u4e3a\u5212\u5206\u4f9d\u636e\uff0c\u53ef\u4ee5\u5c06\u96c6\u5408 \\(dp_i\\) \u5212\u5206\u5982\u4e0b\uff1a \u56fe\u4e2d\u6a59\u8272\u5b57\u4f53\u662f\u4ee3\u8868\u4e86\u8fd9\u4e2a\u5b50\u96c6\u7684\u72b6\u6001\uff0c\u7eff\u8272\u5b57\u4f53\u8bf4\u660e\u4e86\u8fd9\u4e2a\u5b50\u96c6\u4ee3\u8868\u4e86\u4ec0\u4e48\u3002 \u5212\u5206\u5b8c\u4e4b\u540e\uff0c\u89c2\u5bdf \\(dp_i\\) \u8fd9\u4e2a\u96c6\u5408\u5bf9\u5e94\u7684\u5c5e\u6027\uff0c\u662f \\(\\max\\) \uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5728\u6240\u6709\u5212\u5206\u51fa\u6765\u7684\u96c6\u5408\u5bf9\u5e94\u7684\u72b6\u6001\u5f53\u4e2d\u53d6\u6700\u5927\u503c\u3002 \u53ef\u4ee5\u5f97\u5230\u65b9\u7a0b\uff1a \\[dp_{i} = \\max\\{dp_j\\} + 1\\] \u4f46\u662f\u6ce8\u610f\u5230\u8fd9\u4e9b\u5212\u5206\u51fa\u6765\u7684\u96c6\u5408\u4e0d\u4e00\u5b9a\u90fd\u80fd\u591f\u8f6c\u79fb\u5230\u96c6\u5408\uff0c\u6bd4\u5982\u5b58\u5728\u4e00\u4e2a \\(a_j > a_i,j < i\\) \u7684\u9006\u5e8f\u5bf9\uff0c \u90a3\u4e48 \\(dp_j\\) \u8fd9\u4e2a\u96c6\u5408\u5c31\u4e0d\u53ef\u80fd\u8f6c\u79fb\u5230 \\(dp_i\\) \uff0c\u56e0\u4e3a \\(dp_j\\) \u4ee3\u8868\u4e86 \u201d\u6240\u6709\u4ee5 \\(a_j\\) \u7ed3\u5c3e\u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u6784\u6210\u7684\u96c6\u5408\u201c\u3002 \u800c\u8fd9\u4e2a\u96c6\u5408\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u5b50\u5e8f\u5217\u63d0\u51fa\u6765\uff0c\u5728\u540e\u9762\u63a5\u4e0a \\(a_i\\) \u540e\uff0c\u5b83\u90fd\u4e0d\u4f1a\u518d\u662f\u4e00\u4e2a\u4e0a\u5347\u5b50\u5e8f\u5217\u4e86\u3002 \u6240\u4ee5\u6211\u4eec\u8fd8\u9700\u8981\u5224\u65ad\u5212\u5206\u51fa\u6765\u7684\u96c6\u5408\u662f\u5426\u5408\u6cd5\uff0c\u65b9\u7a0b\u53d8\u4e3a\uff1a \\[dp_i = \\max\\{dp_j\\} + 1,a_i > a_j\\] \u800c\u5212\u5206\u96c6\u5408\u7684\u65f6\u5019\u53d1\u73b0\uff0c \\(a_i\\) \u672c\u8eab\u4e5f\u80fd\u4f5c\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u51fa\u73b0\uff0c\u6240\u4ee5\u521d\u59cb\u5316\u7684\u65f6\u5019\u8981\u4ee4 \\(dp_i = 1\\) \u3002 \u65b9\u7a0b\u53d8\u4e3a\uff1a \\[dp_i = \\max\\{dp_j + 1\\},a_i > a_j,dp_i =1(\\text{initially})\\] \u628a \\(+1\\) \u653e\u8fdb \\(\\max\\) \u91cc\u662f\u4e3a\u4e86\u65b9\u4fbf\u8f6c\u79fb\u3002 \u6839\u636e\u5b9a\u4e49\uff0c\u7b54\u6848\u662f \\(\\max\\{dp_i\\}\\) \u3002 \u53ef\u4ee5\u5199\u51fa\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 for ( int i = 1 ; i <= n ; ++ i ) dp [ i ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j < i ; ++ j ) { if ( a [ i ] > a [ j ]) dp [ i ] = max ( dp [ i ], dp [ j ] + 1 ); } } int res = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { res = max ( res , dp [ i ]); } \u590d\u6742\u5ea6 \\(\\text{O}(n^2)\\) \uff0c\u6bcf\u6b21\u5212\u5206\u679a\u4e3e\u5b50\u96c6\u8f6c\u79fb\u6d88\u8017 \\(\\text{O}(n)\\) \uff0c\u679a\u4e3e\u4ee5\u6240\u6709\u70b9\u4f5c\u4e3a\u7ed3\u5c3e\u7684\u60c5\u51b5\u6d88\u8017 \\(\\text{O}(n)\\) \u3002 \u672c\u9898\u6240\u7ed9\u7684\u542f\u793a\uff1a DP \u7684\u672c\u8d28\u662f \u201d\u806a\u660e\u201c \u5730\u5212\u5206\u96c6\u5408\u3002 DP \u7684\u521d\u59cb\u5316\u8981\u6839\u636e\u72b6\u6001\u672c\u8eab\u7684\u5b9a\u4e49\u548c\u8f6c\u79fb\u9700\u6c42\u6765\u8bbe\u7f6e\u3002 DP \u5212\u5206\u7684\u91cd\u8981\u4f9d\u636e\u662f \u201d\u6700\u540e\u4e00\u4e2a\u4e0d\u540c\u70b9\u201c\uff0c\u601d\u8003\u65f6\u9700\u8981\u8003\u8651\u628a\u5f53\u524d\u96c6\u5408 \u5c55\u5f00 \u3002 \u5212\u5206\u51fa\u7684\u5b50\u96c6\u4e0d\u4e00\u5b9a\u90fd\u80fd\u7528\u6765\u8f6c\u79fb\uff0c\u8981\u8fdb\u884c\u53ef\u884c\u6027\u7684\u5224\u65ad\u3002","title":"LIS \u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%8E%E9%9B%86%E5%90%88%E8%A7%92%E5%BA%A6%E8%80%83%E8%99%91DP/#lcs","text":"\u7ed9\u5b9a\u4e24\u4e2a\u5e8f\u5217 \\(a\uff0cb\\) \uff0c\u6c42\u4ed6\u4eec\u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u3002 \\(|a|,|b| \\le 3000\\) \u3002 \u672c\u9898\u7684\u8981\u7d20\u662f \u201d\u516c\u5171\uff0c\u6700\u957f\u201c\u3002 \u8003\u8651\u5982\u4f55\u5904\u7406\u8fd9\u4e2a \u201d\u516c\u5171\u201c\uff0c\u53d1\u73b0\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\uff0c\u627e\u5230\u4e00\u7ec4 \\(i,j\\) \u4f7f\u5f97 \\(a_i = b_j\\) \uff0c\u7136\u540e\u8fdb\u884c\u8f6c\u79fb\u3002 \u6240\u4ee5\u8bbe \\(dp_{i,j}\\) \u8868\u793a\u7531 \\(a[1\\sim i],b[1 \\sim j]\\) \u6784\u6210\u7684\u6240\u6709\u516c\u5171\u5b50\u5e8f\u5217\uff0c\u5c5e\u6027\u4e3a \\(\\max\\) \u3002 \u53d1\u73b0\u96c6\u5408\u53ef\u4ee5\u5212\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff0c\u7b2c\u4e00\u4e2a\u90e8\u5206\u662f \\(a_i \\not = b_j\\) \u65f6\uff0c\u7531 \\(a[1 \\sim i],b[1\\sim j]\\) \u6784\u6210\u7684\u516c\u5171\u5b50\u5e8f\u5217\u3002 \u7b2c\u4e8c\u90e8\u5206\u662f\u5f53 \\(a_i = b_j\\) \u65f6\uff0c\u7531 \\(a[1 \\sim i-1],b[1\\sim j-1]\\) \u6784\u6210\u7684\u516c\u5171\u5b50\u5e8f\u5217\u3002 \u4e3a\u4ec0\u4e48\u662f\u7531 \\(a[1\\sim i-1],b[1 \\sim j-1]\\) \u6784\u6210\u7684\u5462\uff1f\u56e0\u4e3a\u6b64\u65f6 \\(a_i = b_j\\) \uff0c\u6240\u4ee5\u8fd9\u534a\u90e8\u5206\u6240\u4ee3\u8868\u7684\u96c6\u5408\u4e2d\u7684\u516c\u5171\u5b50\u5e8f\u5217\u90fd\u957f\u6210\u8fd9\u6837\uff1a \\[\\begin{matrix}\\dots & ... & a_i/b_j \\\\ \\dots & ... & a_i/b_j \\\\ \\dots & ... & a_i/b_j\\end{matrix}\\] \u90a3\u4e48\u6b64\u65f6\u7684\u7b54\u6848\u5c31\u662f\u524d\u9762\u90e8\u5206\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c \\(+1\\) \uff0c\u800c\u524d\u9762\u90a3\u90e8\u5206\u957f\u5ea6\u7684\u6700\u5927\u503c\u5b9e\u9645\u4e0a\u5c31\u662f\u7531 \\(a[1\\sim i-1],b[1\\sim j-1]\\) \u6784\u6210\u7684\u6240\u6709\u516c\u5171\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u6700\u5927\u503c\uff0c\u96c6\u5408 \\(dp_{i-1,j-1}\\) \u5373\u53ef\u8868\u793a\u8fd9\u4e00\u90e8\u5206\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u8fd9\u90e8\u5206\u662f\u7531 \\(a[1\\sim i-1],b[1\\sim j-1]\\) \u6784\u6210\u7684\uff0c\u53ea\u662f\u8f6c\u79fb\u65f6 \\(a_i,b_j\\) \u4f1a\u6709\u8d21\u732e\u800c\u5df2\u3002 \u7136\u540e\u8003\u8651\u7b2c\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u529e\u6cd5\u5bf9\u5b83\u7528\u4e00\u4e2a\u72b6\u6001\u76f4\u63a5\u8868\u793a\uff0c\u6240\u4ee5\u518d\u6b21\u5bf9\u4ed6\u8fdb\u884c\u5212\u5206\u3002 \u56e0\u4e3a \\(a_i \\not= b_j\\) \uff0c\u6240\u4ee5\u6211\u4eec\u5206\u522b\u628a \\(a_i,b_j\\) \u8e22\u51fa\u53bb\uff0c\u7136\u540e\u8fdb\u884c\u8f6c\u79fb\u3002 \u90a3\u4e48\u7b2c\u4e00\u90e8\u5206\u5c31\u53ef\u4ee5\u5212\u5206\u6210 \\(dp_{i,j-1},dp_{i-1,j}\\) \u4e24\u4e2a\u5b50\u96c6\uff0c\u56e0\u4e3a \\(dp_{i,j}\\) \u7684\u5c5e\u6027\u662f \\(\\max\\) \uff0c\u800c\u8f6c\u79fb\u65f6 \\(a_i \\not= b_j\\) \uff0c\u4e0d\u80fd\u63d0\u4f9b\u8d21\u732e\uff0c\u6240\u4ee5\u76f4\u63a5\u8ba9 \\(dp_{i, j}\\) \u7ee7\u627f \\(\\max\\{dp_{i,j-1},dp_{i-1,j}\\}\\) \u5373\u53ef\u3002 \u5212\u5206\u5982\u4e0b\uff1a \u53ef\u4ee5\u5f97\u5230\u65b9\u7a0b\uff1a \\[dp_{i,j} = \\begin{cases}\\max(dp_{i-1,j},dp_{i,j-1}) & a_i \\not= b_j\\\\ dp_{i-1,j-1} + 1 & a_i = b_j\\end{cases}\\] \u6839\u636e\u72b6\u6001\u5b9a\u4e49\uff0c \\(dp\\) \u5e94\u5f53\u5168\u90e8\u521d\u59cb\u5316\u4e3a \\(0\\) \uff0c\u7b54\u6848\u4e3a \\(dp_{n,n}\\) 1 2 3 4 5 6 7 8 9 10 11 12 13 memset ( dp , 0 , sizeof dp ); for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { if ( a [ i ] == b [ j ]) dp [ i ][ j ] = dp [ i - 1 ][ j - 1 ] + 1 ; else dp [ i ][ j ] = max ( dp [ i ][ j - 1 ], dp [ i - 1 ][ j ]); } } cout << dp [ n ][ n ] << endl ; // \u8fd9\u4e2a\u5199\u6cd5\u4fdd\u8bc1 |a| = |b| = n\u3002 \u590d\u6742\u5ea6 \\(\\text{O}(n^2)\\) \u3002 \u672c\u9898\u6240\u7ed9\u7684\u542f\u793a\uff1a \u5212\u5206\u540e\u7684\u8f6c\u79fb\u5b9e\u9645\u4e0a\u662f\u5229\u7528 \u201d\u5b50\u96c6\u201c \u548c \u201d\u5f53\u524d\u4fe1\u606f\u201c \u7684\u7ed3\u5408\u3002 \u5982\u679c\u5f53\u524d\u4fe1\u606f\u5360\u7528\u4e86\u96c6\u5408\u7684\u4e00\u90e8\u5206\uff0c\u5212\u5206\u65f6\u5e94\u5f53\u628a\u5b83\u5228\u6389\u3002","title":"LCS \u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E4%BB%8E%E9%9B%86%E5%90%88%E8%A7%92%E5%BA%A6%E8%80%83%E8%99%91DP/#_1","text":"\u4e3a\u4e86\u65b9\u4fbf\u53d9\u8ff0\uff0c\u6b64\u5904\u6362\u6210\u4e86\u68cb\u76d8\u7c7b DP \u7684\u6a21\u677f\u3002 \u7ed9\u5b9a\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635\uff0c\u521d\u59cb\u4f60\u5728 \\((1,1)\\) \uff0c\u6bcf\u6b21\u53ef\u4ee5\u5f80\u4e0b\u6216\u8005\u5f80\u53f3\u8d70\u4e00\u6b65\u3002 \u95ee\u8d70\u5230 \\((n,m)\\) \u7684\u65b9\u6848\u6570\u3002 \u8bbe \\(dp_{i,j}\\) \u8868\u793a\u4ece \\((1,1)\\) \u8d70\u5230 \\((i,j)\\) \u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u6570\u91cf\uff08\u6ce8\u610f\u8fd9\u91cc\u53d8\u4e3a\u4e86\u6570\u91cf\uff09\u3002 \u8003\u8651\u5212\u5206\u96c6\u5408 \\(dp_{i,j}\\) \u3002 \u5c55\u5f00 \\(dp_{i,j}\\) \u4e2d\u7684\u6240\u6709\u65b9\u6848\uff0c\u53d1\u73b0\u4ed6\u4eec\u90fd\u957f\u8fd9\u6837\uff1a \\[\\begin{matrix}(1,1) \\to \\dots \\to (x_1,y_1) \\to (i,j) \\\\ (1,1) \\to \\dots \\to (x_2,y_2) \\to (i,j)\\end{matrix}\\] \u53d1\u73b0 \u201d\u6700\u540e\u4e00\u4e2a\u4e0d\u540c\u70b9\u201c \u5c31\u662f \u201d\u4e0a\u4e00\u6b65\u201c \u6240\u5904\u7684\u4f4d\u7f6e \\((x,y)\\) \u3002 \u800c\u672c\u9898\u8981\u6c42\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\uff0c\u6240\u4ee5\u53ea\u6709\u4ece\u4e0a\u9762\u548c\u5de6\u9762\u8d70\u8fc7\u6765\u4e24\u79cd\u60c5\u51b5\u3002 \u6240\u4ee5\u96c6\u5408\u53ef\u4ee5\u5212\u5206\u6210 \\(dp_{i,j-1},dp_{i-1,j}\\) \u8fd9\u4e24\u90e8\u5206\u3002 \u53ef\u4ee5\u5217\u51fa\u65b9\u7a0b\uff1a \\[dp_{i,j} = dp_{i,j} + (dp_{i-1,j} + dp_{i, j-1})\\] \u5176\u4e2d\u6839\u636e\u72b6\u6001\u5b9a\u4e49\uff0c \\(dp_{1,1}\\) \u5e94\u5f53\u521d\u59cb\u5316\u4e3a \\(1\\) \uff0c\u5176\u5b83\u7684\u5e94\u5f53\u4e3a \\(0\\) \u3002 \u4f46\u662f\u8981\u6ce8\u610f\u5224\u65ad\u662f\u5426\u8d8a\u754c\uff0c\u6240\u4ee5\u6b64\u65f6\u53ef\u4ee5\u5229\u7528\u53e6\u4e00\u79cd DP \u65b9\u5f0f\uff0c\u987a\u63a8\u3002 \u4e5f\u5c31\u662f\u8003\u8651\u628a\u5f53\u524d\u96c6\u5408\u7684\u65b9\u6848\u6570\u52a0\u5230\u6240\u6709\u5212\u5206\u540e \u76f4\u63a5 \u542b\u6709\u5b83\u7684\u96c6\u5408\u7684\u65b9\u6848\u6570\u5f53\u4e2d\u3002 \u5f00\u5927\u6570\u7ec4\u540e\u5c31\u4e0d\u7528\u5224\u8fb9\u754c\u4e86\u3002 \u6240\u4ee5\u53ef\u4ee5\u5f97\u5230\u65b0\u7684\u65b9\u7a0b\uff1a \\( \\(dp_{i+1,j} = dp_{i+1,j}+dp_{i,j},dp_{i,j+1} = dp_{i,j+1} + dp_{i,j}\\) \\) \u3002 \u521d\u59cb\u5316\u4e0d\u53d8\u3002 \u53ef\u4ee5\u5199\u51fa\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 memset ( dp , 0 , sizeof dp ); dp [ 1 ][ 1 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= m ; ++ j ) { dp [ i + 1 ][ j ] += dp [ i ][ j ]; dp [ i ][ j + 1 ] += dp [ i ][ j ]; } } cout << dp [ n ][ m ] << endl ; \u672c\u9898\u6240\u7ed9\u7684\u542f\u793a\uff1a \u4e0d\u6b62\u53ef\u4ee5\u5212\u5206\u540e\u7528\u5b50\u96c6\u6765\u66f4\u65b0\u5f53\u524d\u96c6\u5408\uff0c\u4e5f\u53ef\u4ee5\u5212\u5206\u540e\u7528\u5f53\u524d\u96c6\u5408\u53bb\u66f4\u65b0\u8ba9\u5f53\u524d\u72b6\u6001\u4f5c\u4e3a\u5b50\u96c6\u7684\u96c6\u5408\u3002 DP \u7684\u5c5e\u6027\u4e0d\u6b62 \\(\\min,\\max\\) \uff0c\u8fd8\u6709\u6570\u91cf\uff0c\u671f\u671b\uff0c\u6982\u7387\u7b49\u3002","title":"\u6570\u5b57\u4e09\u89d2\u5f62\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/","text":"\u533a\u95f4DP \u00b6 \u533a\u95f4\u4f5c\u4e3a\u9636\u6bb5 \u00b6 \u5178\u578b\u7684\u9898\u76ee\u5c31\u662f\u5408\u5e76\u77f3\u5b50\uff0c\u80fd\u91cf\u9879\u94fe\u8fd9\u79cd\u3002 \u9898\u9762\u4e00\u822c\u4f1a\u8bf4 \u201c\u5408\u5e76\u201d \u4e4b\u7c7b\u7684\u8bcd\uff0c\u72b6\u6001\u4e00\u822c\u4f1a\u662f \\(f_{l,r}\\) \u8868\u793a\u5c06\u533a\u95f4 \\(l,r\\) \u5168\u90e8\u5408\u5e76\u7684\u6700\u4f18\u4ef7\u503c\u3002 \u5f53\u7136\u4e5f\u6709\u53ef\u80fd\u662f \u201c\u5904\u7406\u5b8c\u8fd9\u4e2a\u533a\u95f4\u7684\u6700\u4f18\u201d\uff0c\u90a3\u4e48\u505a\u6cd5\u76f8\u5e94\u7684\u4f1a\u6709\u4e00\u70b9\u53d8\u5316\uff08\u6bd4\u5982 CQOI\u7684\u6d82\u8272\uff0c\u548c\u8001\u738b\u53bb\u5173\u8def\u706f\u90a3\u4e2a\u9898\uff09 \u505a\u6cd5\u662f\u4ee5\u533a\u95f4\u4f5c\u4e3a\u9636\u6bb5\uff0c\u7136\u540e\u679a\u4e3e\u533a\u95f4\u5de6\u7aef\u70b9\u3002 \u518d\u5728\u6bcf\u4e00\u4e2a\u533a\u95f4\u91cc\u627e\u5230\u4e00\u4e2a\u201c\u5206\u5272\u70b9\u201d\uff0c\u628a\u524d\u540e\u4e24\u4e2a\u90e8\u5206\u5408\u5e76\u8d77\u6765\u5e76\u52a0\u4e0a\u64cd\u4f5c\u7684\u6743\u503c\u5373\u53ef\u3002 \u4ee3\u7801\u4e00\u822c\u957f\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 8 9 init (); //\u9884\u5904\u7406\u957f\u5ea6\u4e3a 1,...,a \u7684\u533a\u95f4 for ( register int len = a + 1 ; len <= n ; ++ len ){ for ( register int i = 1 ; i + len -1 <= n ; ++ i ){ register int j = i + len -1 ; for ( register int k = i ; k < j ; ++ k ){ f [ i ][ j ] = min / max ( f [ i ][ j ], f [ i ][ k ] + f [ k + 1 ][ j ] + calc ( k )); //calc(k) \u662f\u4ece k,k+1 \u8fd9\u91cc\u65ad\u5f00\u7684\u64cd\u4f5c\u4ef7\u503c\u3002 } // k \u8868\u793a \u4ece k,k+1 \u8fd9\u4e24\u4e2a\u70b9\u4e2d\u95f4\u65ad\u5f00\uff0c\u6240\u4ee5 k<j\u3002 } } \u65ad\u73af\u6210\u94fe \u00b6 \u5f53\u533a\u95f4DP\u95ee\u9898\u88ab\u653e\u5230\u73af\u4e0a\u7684\u65f6\u5019\u53ef\u4ee5\u91c7\u53d6\u3002 \u53ea\u9700\u8981\u628a\u539f\u5e8f\u5217\u590d\u5236\u4e00\u8fb9\u6254\u5230\u540e\u9762\u5373\u53ef\u3002 1 a1 , a2 , a3 , a4 , a5 ,... an , a1 , a2 , a3 ,...... an \u76f8\u5e94\u7684\uff0c\u521d\u59cb\u5316\u548c\u8bfb\u5165\u64cd\u4f5c\u9700\u8981\u7684\u6570\u7684\u65f6\u5019\u4e5f\u9700\u8981\u590d\u5236\u5e76\u6269\u5c55\u4e00\u500d\u3002 \u5047\u8bbe\u95ee\u9898\u8981\u6c42\u7684\u662f\u6574\u4e2a\u73af\u5408\u5e76\u8d77\u6765\u7684\u6700\u4f18\u89e3\uff0c\u90a3\u4e48\u5faa\u73af\u6c42\u6700\u4f18\u89e3\u9700\u8981\u8fd9\u4e48\u5199\uff1a 1 2 3 4 5 int res = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ register int j = i + n -1 ; // [i,j] \u662f\u65ad\u73af\u6210\u94fe\u4e4b\u540e\u6240\u6709\u957f\u5ea6\u4e3a n \u7684\u533a\u95f4 res = max ( res , f [ i ][ j ]); } \u5206\u5272\u578b \u00b6 \u95ee\u9898\u4e00\u822c\u662f\u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217\uff0c\u8981\u6c42\u4f60\u628a\u4ed6\u5206\u6210 \\(m\\) \u4e2a\u90e8\u5206\uff0c\u4f7f\u5f97\u6743\u503c\u548c\u6700\u5927\u3002 \u8fd9\u91cc\u7684\u6743\u503c\u548c\u4f1a\u968f\u7740\u5206\u5272\u90e8\u5206\u7684\u4e0d\u540c\u800c\u53d8\u5316\u3002 \u90a3\u4e48\u8bbe \\(f_{i,j}\\) \u4ece \\(1\\to i\\) \u6784\u6210\u7684\u5e8f\u5217\uff0c\u5206\u5272\u6210 \\(j\\) \u90e8\u5206\u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u6743\u503c\u548c\u7684\u6700\u503c\u3002 \u8003\u8651\u4ece \u201c\u6700\u540e\u4e00\u4e2a\u201d \u4e0b\u624b\uff0c\u4e5f\u5c31\u662f \u201c\u6700\u540e\u4e00\u4e2a\u90e8\u5206\u201d\u3002 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5728 \\(1 \\to i\\) \u8fd9\u4e00\u6bb5\u4e0a\u679a\u4e3e\u4e00\u4e2a\u5206\u5272\u70b9 \\(k\\) \u3002 \u4f7f\u5f97 \\([k+1,i]\\) \u6784\u6210\u7b2c \\(j\\) \u90e8\u5206\uff08\u56e0\u4e3a\u662f \\(k+1\\) \uff0c\u5e76\u4e14\u524d\u9762\u8981\u5206\u5272\u6210 \\(j-1\\) \u4e2a\u90e8\u5206\uff0c\u6240\u4ee5\u5b9e\u9645\u679a\u4e3e\u7684\u65f6\u5019 \\(k \\in [j-1,i)\\) \uff09\u3002 \u6240\u4ee5\u53ef\u4ee5\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \\(f_{i,j}=\\max\\{f_{k,j-1}+w_{k+1,i}\\}\\) \uff08 \\(\\max()\\) \u662f\u76f4\u63a5\u5728\u51fd\u6570\u91cc\u7684\u6240\u6709\u53d8\u91cf\u5f53\u4e2d\u53d6 \\(\\max\\) \uff0c\u800c \\(\\max\\{\\}\\) \u8868\u793a\u5728\u6240\u6709\u7684\u53ef\u80fd\u91cc\u53d6\u6700\u5927\u503c\uff09 \uff08\u6b64\u5904\u7684\u51b3\u7b56\u53d8\u91cf\u662f \\(k\\) \uff0c\u6240\u4ee5\u662f\u5728\u6240\u6709\u7684 \\(k\\) \u4ee3\u8868\u7684 \\(f_{k,j-1}+w_{k+1,i}\\) \uff09 \u5f53\u4e2d\u53d6\u6700\u5927\u503c\u3002 \\(w\\) \u4e00\u822c\u53ef\u4ee5\u901a\u8fc7\u9884\u5904\u7406\u5f97\u5230\u3002 \u65b9\u7a0b\u76f4\u63a5\u6839\u636e\u9898\u9b54\u6539\u5373\u53ef\u3002 1 2 3 4 5 6 7 for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= m ; ++ j ){ for ( register int k = j -1 ; k < i ; ++ k ){ f [ i ][ j ] = max ( f [ i ][ j ], f [ k ][ j -1 ] + w ( k + 1 , i )); } } } ans = f [ n ][ m ]; \u5178\u578b\u9898\u6709 IOI2000 \u7684\u90ae\u5c40\u548c IOI1999 \u7684\u82b1\u5e97\u6a71\u7a97\u5e03\u7f6e\u3002","title":"\u533a\u95f4DP"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/#dp","text":"","title":"\u533a\u95f4DP"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/#_1","text":"\u5178\u578b\u7684\u9898\u76ee\u5c31\u662f\u5408\u5e76\u77f3\u5b50\uff0c\u80fd\u91cf\u9879\u94fe\u8fd9\u79cd\u3002 \u9898\u9762\u4e00\u822c\u4f1a\u8bf4 \u201c\u5408\u5e76\u201d \u4e4b\u7c7b\u7684\u8bcd\uff0c\u72b6\u6001\u4e00\u822c\u4f1a\u662f \\(f_{l,r}\\) \u8868\u793a\u5c06\u533a\u95f4 \\(l,r\\) \u5168\u90e8\u5408\u5e76\u7684\u6700\u4f18\u4ef7\u503c\u3002 \u5f53\u7136\u4e5f\u6709\u53ef\u80fd\u662f \u201c\u5904\u7406\u5b8c\u8fd9\u4e2a\u533a\u95f4\u7684\u6700\u4f18\u201d\uff0c\u90a3\u4e48\u505a\u6cd5\u76f8\u5e94\u7684\u4f1a\u6709\u4e00\u70b9\u53d8\u5316\uff08\u6bd4\u5982 CQOI\u7684\u6d82\u8272\uff0c\u548c\u8001\u738b\u53bb\u5173\u8def\u706f\u90a3\u4e2a\u9898\uff09 \u505a\u6cd5\u662f\u4ee5\u533a\u95f4\u4f5c\u4e3a\u9636\u6bb5\uff0c\u7136\u540e\u679a\u4e3e\u533a\u95f4\u5de6\u7aef\u70b9\u3002 \u518d\u5728\u6bcf\u4e00\u4e2a\u533a\u95f4\u91cc\u627e\u5230\u4e00\u4e2a\u201c\u5206\u5272\u70b9\u201d\uff0c\u628a\u524d\u540e\u4e24\u4e2a\u90e8\u5206\u5408\u5e76\u8d77\u6765\u5e76\u52a0\u4e0a\u64cd\u4f5c\u7684\u6743\u503c\u5373\u53ef\u3002 \u4ee3\u7801\u4e00\u822c\u957f\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 8 9 init (); //\u9884\u5904\u7406\u957f\u5ea6\u4e3a 1,...,a \u7684\u533a\u95f4 for ( register int len = a + 1 ; len <= n ; ++ len ){ for ( register int i = 1 ; i + len -1 <= n ; ++ i ){ register int j = i + len -1 ; for ( register int k = i ; k < j ; ++ k ){ f [ i ][ j ] = min / max ( f [ i ][ j ], f [ i ][ k ] + f [ k + 1 ][ j ] + calc ( k )); //calc(k) \u662f\u4ece k,k+1 \u8fd9\u91cc\u65ad\u5f00\u7684\u64cd\u4f5c\u4ef7\u503c\u3002 } // k \u8868\u793a \u4ece k,k+1 \u8fd9\u4e24\u4e2a\u70b9\u4e2d\u95f4\u65ad\u5f00\uff0c\u6240\u4ee5 k<j\u3002 } }","title":"\u533a\u95f4\u4f5c\u4e3a\u9636\u6bb5"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/#_2","text":"\u5f53\u533a\u95f4DP\u95ee\u9898\u88ab\u653e\u5230\u73af\u4e0a\u7684\u65f6\u5019\u53ef\u4ee5\u91c7\u53d6\u3002 \u53ea\u9700\u8981\u628a\u539f\u5e8f\u5217\u590d\u5236\u4e00\u8fb9\u6254\u5230\u540e\u9762\u5373\u53ef\u3002 1 a1 , a2 , a3 , a4 , a5 ,... an , a1 , a2 , a3 ,...... an \u76f8\u5e94\u7684\uff0c\u521d\u59cb\u5316\u548c\u8bfb\u5165\u64cd\u4f5c\u9700\u8981\u7684\u6570\u7684\u65f6\u5019\u4e5f\u9700\u8981\u590d\u5236\u5e76\u6269\u5c55\u4e00\u500d\u3002 \u5047\u8bbe\u95ee\u9898\u8981\u6c42\u7684\u662f\u6574\u4e2a\u73af\u5408\u5e76\u8d77\u6765\u7684\u6700\u4f18\u89e3\uff0c\u90a3\u4e48\u5faa\u73af\u6c42\u6700\u4f18\u89e3\u9700\u8981\u8fd9\u4e48\u5199\uff1a 1 2 3 4 5 int res = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ register int j = i + n -1 ; // [i,j] \u662f\u65ad\u73af\u6210\u94fe\u4e4b\u540e\u6240\u6709\u957f\u5ea6\u4e3a n \u7684\u533a\u95f4 res = max ( res , f [ i ][ j ]); }","title":"\u65ad\u73af\u6210\u94fe"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8C%BA%E9%97%B4DP/#_3","text":"\u95ee\u9898\u4e00\u822c\u662f\u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217\uff0c\u8981\u6c42\u4f60\u628a\u4ed6\u5206\u6210 \\(m\\) \u4e2a\u90e8\u5206\uff0c\u4f7f\u5f97\u6743\u503c\u548c\u6700\u5927\u3002 \u8fd9\u91cc\u7684\u6743\u503c\u548c\u4f1a\u968f\u7740\u5206\u5272\u90e8\u5206\u7684\u4e0d\u540c\u800c\u53d8\u5316\u3002 \u90a3\u4e48\u8bbe \\(f_{i,j}\\) \u4ece \\(1\\to i\\) \u6784\u6210\u7684\u5e8f\u5217\uff0c\u5206\u5272\u6210 \\(j\\) \u90e8\u5206\u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u6743\u503c\u548c\u7684\u6700\u503c\u3002 \u8003\u8651\u4ece \u201c\u6700\u540e\u4e00\u4e2a\u201d \u4e0b\u624b\uff0c\u4e5f\u5c31\u662f \u201c\u6700\u540e\u4e00\u4e2a\u90e8\u5206\u201d\u3002 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5728 \\(1 \\to i\\) \u8fd9\u4e00\u6bb5\u4e0a\u679a\u4e3e\u4e00\u4e2a\u5206\u5272\u70b9 \\(k\\) \u3002 \u4f7f\u5f97 \\([k+1,i]\\) \u6784\u6210\u7b2c \\(j\\) \u90e8\u5206\uff08\u56e0\u4e3a\u662f \\(k+1\\) \uff0c\u5e76\u4e14\u524d\u9762\u8981\u5206\u5272\u6210 \\(j-1\\) \u4e2a\u90e8\u5206\uff0c\u6240\u4ee5\u5b9e\u9645\u679a\u4e3e\u7684\u65f6\u5019 \\(k \\in [j-1,i)\\) \uff09\u3002 \u6240\u4ee5\u53ef\u4ee5\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \\(f_{i,j}=\\max\\{f_{k,j-1}+w_{k+1,i}\\}\\) \uff08 \\(\\max()\\) \u662f\u76f4\u63a5\u5728\u51fd\u6570\u91cc\u7684\u6240\u6709\u53d8\u91cf\u5f53\u4e2d\u53d6 \\(\\max\\) \uff0c\u800c \\(\\max\\{\\}\\) \u8868\u793a\u5728\u6240\u6709\u7684\u53ef\u80fd\u91cc\u53d6\u6700\u5927\u503c\uff09 \uff08\u6b64\u5904\u7684\u51b3\u7b56\u53d8\u91cf\u662f \\(k\\) \uff0c\u6240\u4ee5\u662f\u5728\u6240\u6709\u7684 \\(k\\) \u4ee3\u8868\u7684 \\(f_{k,j-1}+w_{k+1,i}\\) \uff09 \u5f53\u4e2d\u53d6\u6700\u5927\u503c\u3002 \\(w\\) \u4e00\u822c\u53ef\u4ee5\u901a\u8fc7\u9884\u5904\u7406\u5f97\u5230\u3002 \u65b9\u7a0b\u76f4\u63a5\u6839\u636e\u9898\u9b54\u6539\u5373\u53ef\u3002 1 2 3 4 5 6 7 for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= m ; ++ j ){ for ( register int k = j -1 ; k < i ; ++ k ){ f [ i ][ j ] = max ( f [ i ][ j ], f [ k ][ j -1 ] + w ( k + 1 , i )); } } } ans = f [ n ][ m ]; \u5178\u578b\u9898\u6709 IOI2000 \u7684\u90ae\u5c40\u548c IOI1999 \u7684\u82b1\u5e97\u6a71\u7a97\u5e03\u7f6e\u3002","title":"\u5206\u5272\u578b"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP/","text":"\u5355\u8c03\u961f\u5217\u4f18\u5316DP \u00b6 Introduction \u00b6 \u8fd9\u4e00\u7c7b\u95ee\u9898\u7684\u5e38\u89c1\u7279\u5f81\u662f 1D1D\uff0c \u4e5f\u5c31\u662f\u4e00\u7ef4\u72b6\u6001\u4e00\u7ef4\u8f6c\u79fb\u3002 \u5185\u5c42\u5faa\u73af\u7684\u53d6\u503c\u8303\u56f4\u7531\u5916\u5c42\u5faa\u73af\u51b3\u5b9a\u3002 \u5e76\u4e14\u5728\u5916\u5c42\u5faa\u73af\u53d8\u91cf\u5355\u8c03\u53d8\u5316\u7684\u60c5\u51b5\u4e0b\uff0c\u5185\u5c42\u5faa\u73af\u53d8\u91cf\u7684\u53d6\u503c\u533a\u95f4\u662f\u5355\u8c03\u53d8\u5316\u7684\u3002 \u4e0d\u4e00\u5b9a\u975e\u7684\u8981\u5934\u548c\u5c3e\u589e\u52a0\uff08\u51cf\u5c11\uff09\u7684\u4e00\u6a21\u4e00\u6837\uff0c\u53ea\u8981\u4fdd\u8bc1\u7ecf\u8fc7\u7684\u4f4d\u7f6e\u4e0d\u4f1a\u518d\u88ab\u7ecf\u8fc7\u4e00\u6b21\u5c31\u597d\uff08\u751a\u81f3\u53ef\u4ee5\u662f\u5934\u4e00\u76f4\u4e0d\u52a8\uff0c\u5c3e\u4e00\u76f4\u589e\u52a0\uff09\u3002 \u8fd9\u65f6\u5019\uff0c\u56e0\u4e3a\u5185\u5c42\u5faa\u73af\u53d8\u91cf\u7684\u53d6\u503c\u533a\u95f4\u5355\u8c03\u53d8\u5316\uff0c\u5c31\u53ef\u4ee5\u5229\u7528\u5355\u8c03\u961f\u5217\u7684\u601d\u60f3\u8fdb\u884c\u4f18\u5316\u3002 \u4f7f\u7528\u4e00\u4e2a\u5355\u8c03\u961f\u5217\u7ef4\u62a4\u51b3\u7b56\u70b9\u7684\u53ef\u80fd\u53d6\u503c\uff0c\u5e76\u4e14\u4fdd\u6301\u961f\u5934\u662f\u6700\u4f18\u89e3\uff0c\u5982\u679c\u961f\u5934\u8d85\u8fc7\u4e86\u9650\u5236\uff0c\u5f39\u51fa\uff0c\u5982\u679c\u961f\u5c3e\u65b0\u52a0\u5165\u7684\u5143\u7d20\u6bd4\u5df2\u7ecf\u5728\u961f\u5217\u91cc\u9762\u7684\u66f4\u52a0\u4f18\u79c0\uff0c\u6392\u9664\u5197\u6742\u51b3\u7b56\u3002 \u7136\u540e\u5229\u7528\u961f\u5934\u5143\u7d20\u8fdb\u884c\u51b3\u7b56\u5373\u53ef\u3002 \u9644\uff1a\u8fd9\u4e00\u7c7b\u95ee\u9898\u7684\u4e00\u822c\u65b9\u7a0b\u5f62\u5f0f\uff1a \\[f_i=\\min\\limits_{L(i)\\le j \\le R(i)}\\{f_j+val(i,j)\\}\\] \u5176\u4e2d \\(L(i),R(i)\\) \u662f\u5173\u4e8e \\(i\\) \u7684\u4e00\u6b21\u51fd\u6570\uff0c\u7528\u6765\u9650\u5236\u51b3\u7b56\u70b9 \\(j\\) \u7684\u8303\u56f4\u3002 \\(val\\) \u662f\u5173\u4e8e \\(i,j\\) \u7684\u4e00\u4e2a\u591a\u9879\u5f0f\uff0c\u5e76\u4e14\u53ef\u4ee5\u628a\u5b83 \u5206\u6210\u4e24\u4e2a\u90e8\u5206 \uff0c\u4e00\u4e2a\u53ea\u4e0e \\(i\\) \u76f8\u5173\uff0c\u4e00\u4e2a\u53ea\u4e0e \\(j\\) \u76f8\u5173\u3002 \u524d\u4e00\u90e8\u5206\u5728 \\(i\\) \u56fa\u5b9a\u7684\u65f6\u5019\u662f\u5e38\u91cf\uff0c\u540e\u4e00\u90e8\u5206\u5229\u7528\u5355\u8c03\u961f\u5217\u7ef4\u62a4\u5373\u53ef\u3002 Problem \u00b6 Problem 1 \u00b6 \u95ee\u98981\uff1a\u5355\u8c03\u961f\u5217\u4f18\u5316\u591a\u91cd\u80cc\u5305 \u89c1\u300a\u80cc\u5305DP\u300b\u3002 Problem 2 \u00b6 \u95ee\u98982 [POJ1821 Fence]\uff1a\u4f60\u6709 \\(P\\) \u4e2a\u5de5\u5320\uff0c\u7b2c \\(i\\) \u4e2a\u5de5\u5320\u53ea\u80fd\u7c89\u5237\u5305\u62ec \\(S_i\\) \u8fd9\u4e00\u6bb5\u6728\u677f\uff0c\u957f\u5ea6\u4e3a \\(L_i\\) \u7684\u533a\u95f4\uff0c\u5e76\u83b7\u5f97 \\(L_i \\times p_i\\) \u7684\u62a5\u916c\uff0c\u73b0\u5728\u6709 \\(n\\) \u5757\u6728\u677f\uff0c\u95ee\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u62a5\u916c\u3002 \\(1\\le n \\le 16000,1\\le m\\le 100\\) \u9996\u5148\u628a\u5de5\u5320\u6309 \\(S_i\\) \u6392\u5e8f\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5de5\u5320\u7c89\u5237\u7684\u6728\u677f\u5728\u4e0a\u4e00\u4e2a\u7684 \u540e\u9762 \u3002 \u8fd9\u6837\u5c31\u53ef\u4ee5\u65b9\u4fbf\u7684\u8fdb\u884c DP\u3002 \u8bbe \\(f_{i,j}\\) \u8868\u793a\u524d \\(j\\) \u5757\u6728\u677f\uff0c\u524d \\(i\\) \u4e2a\u4eba\u7c89\u5237\u7684\u6240\u6709\u60c5\u51b5\uff0c\u5c5e\u6027\u4e3a\u62a5\u916c\u7684\u6700\u5927\u503c\u3002 \u5148\u8003\u8651\u7279\u6b8a\u7684\u3002 \u5982\u679c\u7b2c \\(i\\) \u4e2a\u4eba\u4e0d\u7c89\u5237\uff0c \\(f_{i,j}=f_{i-1,j}\\) \\(j\\) \u7a7a\u7740\u4e0d\u7c89\u5237\uff0c \\(f_{i,j}=f_{i,j-1}\\) \u3002 \u200b \u9700\u8981\u8003\u8651\u7a7a\u7740\u4e0d\u7c89\u5237\u7684\u60c5\u51b5\u662f\u56e0\u4e3a \\(\\sum L_i\\) \u6709\u53ef\u80fd\u5c0f\u4e8e \\(n\\) \uff08\u9898\u76ee\u6ca1\u6709\u4fdd\u8bc1\u5927\u4e8e\u7b49\u4e8e\uff09\u3002 \u200b \u56e0\u4e3aDP\u4e00\u822c\u662f\u4ee5last\u4f5c\u4e3a\u5206\u754c\u7684\uff0c\u8003\u8651last\u5c31\u53ef\uff0c\u524d\u9762\u7684\u4f1a\u88ab\u4f9d\u6b21\u9012\u63a8\u3002 \u7136\u540e\u8003\u8651\u679a\u4e3e\u4e0a\u4e00\u4e2a\u4eba\u6700\u540e\u5237\u5230\u4e86\u54ea\u91cc\uff0c\u8bbe\u8fd9\u4e2a\u4f4d\u7f6e\u4e3a \\(k\\) \u3002 \u7136\u540e \\([k+1,j]\\) \u5c31\u5fc5\u987b\u662f\u7b2c \\(i\\) \u4e2a\u4eba\u6765\u5904\u7406\u3002 \u56e0\u4e3a\u9898\u76ee\u6709\u9650\u5236\uff0c\u6240\u4ee5 \\(k\\) \u662f\u6709\u53d6\u503c\u8303\u56f4\u7684\u3002 \u53ef\u4ee5\u5f97\u5230\u65b9\u7a0b\uff1a \\[f_{i,j}=\\max\\limits_{j-L_i\\le k \\le S_i-1}\\{f_{i-1,k}+P_i\\times(j-k)\\},j \\ge S_i\\] \u9996\u5148\u53d1\u73b0 \\(k\\) \u7684\u53d6\u503c\u968f\u7740 \\(j\\) \u5355\u8c03\u53d8\u5316\uff08\u6b64\u65f6\u9ed8\u8ba4 \\(i\\) \u4e0d\u53d8\uff09 \u5e76\u4e14 \\(P_i\\times(j-k)\\) \u8fd9\u4e2a\u591a\u9879\u5f0f\u662f\u5173\u4e8e \\(j,k\\) \u7684\uff0c\u8fd8\u53ef\u4ee5\u62c6\u5206\u6210\u4e24\u90e8\u5206\u3002 \u4e8e\u662f\u628a\u8fd9\u4e00\u90e8\u5206\u62c6\u5f00 \\[f_{i,j}=P_i\\times j + \\max\\limits_{j-L_i\\le k \\le S_i-1}\\{f_{i-1,k}-P_i\\times k\\},j \\ge L_i\\] \u968f\u4fbf\u627e\u4e24\u4e2a \\(k\\) \u8fdb\u884c\u8ba8\u8bba\uff0c\u53d1\u73b0\u8fd9\u91cc\u786e\u5b9e\u53ef\u4ee5\u5355\u8c03\u961f\u5217\u4f18\u5316\u3002 \u6240\u4ee5\u7ef4\u62a4\u4e00\u4e2a \\(f_{i-1,k}-P_i\\times k\\) \u7684\u6700\u5927\u503c\u7684\u961f\u5217\uff0c\u5e76\u4e14 \\(k\\) \u5355\u8c03\u9012\u589e\u3002 \u5f00\u59cb\u7684\u65f6\u5019\u628a\u521d\u59cb\u7684\u51b3\u7b56\u5148\u63d2\u5165\u8fdb\u53bb\uff0c\u7136\u540e\u518d\u8fdb\u884c\u8f6c\u79fb\u3002 \u56e0\u4e3a\u6bcf\u4e2a\u5143\u7d20\u53ea\u4f1a\u5165\u961f\u51fa\u961f\u4e00\u6b21\uff0c\u590d\u6742\u5ea6 \\(\\text{O}(nP)\\) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include <cstdio> #include <iostream> #include <algorithm> #include <cmath> #include <deque> using namespace std ; const int si_n = 16000 + 100 ; const int si_m = 110 ; int n , m , i , j , k , f [ si_m ][ si_n ]; struct node { int p , l , s ; bool operator < ( const node & b ) const { return s < b . s ; } } a [ si_n ]; deque < int > q ; // \u5077\u61d2 deque, \u6570\u7ec4\u5199\u6cd5\u4e5f\u662f\u4e00\u6837\u7684\u3002 inline void init (){ ios :: sync_with_stdio ( false ), cin >> m >> n ; for ( register int i = 1 ; i <= n ; i ++ ) cin >> a [ i ]. l >> a [ i ]. p >> a [ i ]. s ; sort ( a + 1 , a + 1 + n ); } inline int cal ( int i , int k ){ return f [ i -1 ][ k ] - a [ i ]. p * k ; } inline void work (){ for ( register int i = 1 ; i <= n ; i ++ ){ for ( register int k = max ( 0 , a [ i ]. s - a [ i ]. l ); k < a [ i ]. s ; k ++ ){ while ( q . size () && cal ( i , q . back ()) <= cal ( i , k )) q . pop_back (); q . push_back ( k ); } // \u63d2\u5165\u521d\u59cb\u51b3\u7b56 for ( register int j = 1 ; j <= m ; j ++ ) { f [ i ][ j ] = max ( f [ i -1 ][ j ], f [ i ][ j -1 ]); // \u7279\u6b8a\u60c5\u51b5 if ( j >= a [ i ]. s ){ while ( q . size () && q . front () < j - a [ i ]. l ) q . pop_front (); if ( q . size ()) f [ i ][ j ] = max ( f [ i ][ j ], a [ i ]. p * j + cal ( i , q . front ())); // \u961f\u5217\u975e\u7a7a\u624d\u53ef\u4ee5\u8f6c\u79fb } // \u8f6c\u79fb } } cout << f [ n ][ m ]; return ; } int main (){ init (), work (); return 0 ; } Template \u00b6 \u4e00\u822c\u5355\u8c03\u961f\u5217\u4f18\u5316\u8f6c\u79fb\u7684\u65f6\u5019\u7684\u6a21\u677f\uff1a 1 2 3 4 5 6 for () \u63d2\u5165\u521d\u59cb\u51b3\u7b56 for () \u5148\u628a\u8fc7\u65f6\u7684\u5220\u9664 \u5982\u679c\u961f\u5217\u975e\u7a7a \u8f6c\u79fb \uff0c \u6392\u9664\u5197\u6742 \uff0c \u52a0\u5165\u65b0\u72b6\u6001 \uff08 \u540e\u4e24\u6b65\u6709\u7684\u65f6\u5019\u4e0d\u9700\u8981 \uff0c \u6bd4\u5982\u8fd9\u4e2a\u9898 \uff09","title":"\u5355\u8c03\u961f\u5217\u4f18\u5316DP"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP/#dp","text":"","title":"\u5355\u8c03\u961f\u5217\u4f18\u5316DP"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP/#introduction","text":"\u8fd9\u4e00\u7c7b\u95ee\u9898\u7684\u5e38\u89c1\u7279\u5f81\u662f 1D1D\uff0c \u4e5f\u5c31\u662f\u4e00\u7ef4\u72b6\u6001\u4e00\u7ef4\u8f6c\u79fb\u3002 \u5185\u5c42\u5faa\u73af\u7684\u53d6\u503c\u8303\u56f4\u7531\u5916\u5c42\u5faa\u73af\u51b3\u5b9a\u3002 \u5e76\u4e14\u5728\u5916\u5c42\u5faa\u73af\u53d8\u91cf\u5355\u8c03\u53d8\u5316\u7684\u60c5\u51b5\u4e0b\uff0c\u5185\u5c42\u5faa\u73af\u53d8\u91cf\u7684\u53d6\u503c\u533a\u95f4\u662f\u5355\u8c03\u53d8\u5316\u7684\u3002 \u4e0d\u4e00\u5b9a\u975e\u7684\u8981\u5934\u548c\u5c3e\u589e\u52a0\uff08\u51cf\u5c11\uff09\u7684\u4e00\u6a21\u4e00\u6837\uff0c\u53ea\u8981\u4fdd\u8bc1\u7ecf\u8fc7\u7684\u4f4d\u7f6e\u4e0d\u4f1a\u518d\u88ab\u7ecf\u8fc7\u4e00\u6b21\u5c31\u597d\uff08\u751a\u81f3\u53ef\u4ee5\u662f\u5934\u4e00\u76f4\u4e0d\u52a8\uff0c\u5c3e\u4e00\u76f4\u589e\u52a0\uff09\u3002 \u8fd9\u65f6\u5019\uff0c\u56e0\u4e3a\u5185\u5c42\u5faa\u73af\u53d8\u91cf\u7684\u53d6\u503c\u533a\u95f4\u5355\u8c03\u53d8\u5316\uff0c\u5c31\u53ef\u4ee5\u5229\u7528\u5355\u8c03\u961f\u5217\u7684\u601d\u60f3\u8fdb\u884c\u4f18\u5316\u3002 \u4f7f\u7528\u4e00\u4e2a\u5355\u8c03\u961f\u5217\u7ef4\u62a4\u51b3\u7b56\u70b9\u7684\u53ef\u80fd\u53d6\u503c\uff0c\u5e76\u4e14\u4fdd\u6301\u961f\u5934\u662f\u6700\u4f18\u89e3\uff0c\u5982\u679c\u961f\u5934\u8d85\u8fc7\u4e86\u9650\u5236\uff0c\u5f39\u51fa\uff0c\u5982\u679c\u961f\u5c3e\u65b0\u52a0\u5165\u7684\u5143\u7d20\u6bd4\u5df2\u7ecf\u5728\u961f\u5217\u91cc\u9762\u7684\u66f4\u52a0\u4f18\u79c0\uff0c\u6392\u9664\u5197\u6742\u51b3\u7b56\u3002 \u7136\u540e\u5229\u7528\u961f\u5934\u5143\u7d20\u8fdb\u884c\u51b3\u7b56\u5373\u53ef\u3002 \u9644\uff1a\u8fd9\u4e00\u7c7b\u95ee\u9898\u7684\u4e00\u822c\u65b9\u7a0b\u5f62\u5f0f\uff1a \\[f_i=\\min\\limits_{L(i)\\le j \\le R(i)}\\{f_j+val(i,j)\\}\\] \u5176\u4e2d \\(L(i),R(i)\\) \u662f\u5173\u4e8e \\(i\\) \u7684\u4e00\u6b21\u51fd\u6570\uff0c\u7528\u6765\u9650\u5236\u51b3\u7b56\u70b9 \\(j\\) \u7684\u8303\u56f4\u3002 \\(val\\) \u662f\u5173\u4e8e \\(i,j\\) \u7684\u4e00\u4e2a\u591a\u9879\u5f0f\uff0c\u5e76\u4e14\u53ef\u4ee5\u628a\u5b83 \u5206\u6210\u4e24\u4e2a\u90e8\u5206 \uff0c\u4e00\u4e2a\u53ea\u4e0e \\(i\\) \u76f8\u5173\uff0c\u4e00\u4e2a\u53ea\u4e0e \\(j\\) \u76f8\u5173\u3002 \u524d\u4e00\u90e8\u5206\u5728 \\(i\\) \u56fa\u5b9a\u7684\u65f6\u5019\u662f\u5e38\u91cf\uff0c\u540e\u4e00\u90e8\u5206\u5229\u7528\u5355\u8c03\u961f\u5217\u7ef4\u62a4\u5373\u53ef\u3002","title":"Introduction"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP/#problem","text":"","title":"Problem"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP/#problem-1","text":"\u95ee\u98981\uff1a\u5355\u8c03\u961f\u5217\u4f18\u5316\u591a\u91cd\u80cc\u5305 \u89c1\u300a\u80cc\u5305DP\u300b\u3002","title":"Problem 1"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP/#problem-2","text":"\u95ee\u98982 [POJ1821 Fence]\uff1a\u4f60\u6709 \\(P\\) \u4e2a\u5de5\u5320\uff0c\u7b2c \\(i\\) \u4e2a\u5de5\u5320\u53ea\u80fd\u7c89\u5237\u5305\u62ec \\(S_i\\) \u8fd9\u4e00\u6bb5\u6728\u677f\uff0c\u957f\u5ea6\u4e3a \\(L_i\\) \u7684\u533a\u95f4\uff0c\u5e76\u83b7\u5f97 \\(L_i \\times p_i\\) \u7684\u62a5\u916c\uff0c\u73b0\u5728\u6709 \\(n\\) \u5757\u6728\u677f\uff0c\u95ee\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u62a5\u916c\u3002 \\(1\\le n \\le 16000,1\\le m\\le 100\\) \u9996\u5148\u628a\u5de5\u5320\u6309 \\(S_i\\) \u6392\u5e8f\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5de5\u5320\u7c89\u5237\u7684\u6728\u677f\u5728\u4e0a\u4e00\u4e2a\u7684 \u540e\u9762 \u3002 \u8fd9\u6837\u5c31\u53ef\u4ee5\u65b9\u4fbf\u7684\u8fdb\u884c DP\u3002 \u8bbe \\(f_{i,j}\\) \u8868\u793a\u524d \\(j\\) \u5757\u6728\u677f\uff0c\u524d \\(i\\) \u4e2a\u4eba\u7c89\u5237\u7684\u6240\u6709\u60c5\u51b5\uff0c\u5c5e\u6027\u4e3a\u62a5\u916c\u7684\u6700\u5927\u503c\u3002 \u5148\u8003\u8651\u7279\u6b8a\u7684\u3002 \u5982\u679c\u7b2c \\(i\\) \u4e2a\u4eba\u4e0d\u7c89\u5237\uff0c \\(f_{i,j}=f_{i-1,j}\\) \\(j\\) \u7a7a\u7740\u4e0d\u7c89\u5237\uff0c \\(f_{i,j}=f_{i,j-1}\\) \u3002 \u200b \u9700\u8981\u8003\u8651\u7a7a\u7740\u4e0d\u7c89\u5237\u7684\u60c5\u51b5\u662f\u56e0\u4e3a \\(\\sum L_i\\) \u6709\u53ef\u80fd\u5c0f\u4e8e \\(n\\) \uff08\u9898\u76ee\u6ca1\u6709\u4fdd\u8bc1\u5927\u4e8e\u7b49\u4e8e\uff09\u3002 \u200b \u56e0\u4e3aDP\u4e00\u822c\u662f\u4ee5last\u4f5c\u4e3a\u5206\u754c\u7684\uff0c\u8003\u8651last\u5c31\u53ef\uff0c\u524d\u9762\u7684\u4f1a\u88ab\u4f9d\u6b21\u9012\u63a8\u3002 \u7136\u540e\u8003\u8651\u679a\u4e3e\u4e0a\u4e00\u4e2a\u4eba\u6700\u540e\u5237\u5230\u4e86\u54ea\u91cc\uff0c\u8bbe\u8fd9\u4e2a\u4f4d\u7f6e\u4e3a \\(k\\) \u3002 \u7136\u540e \\([k+1,j]\\) \u5c31\u5fc5\u987b\u662f\u7b2c \\(i\\) \u4e2a\u4eba\u6765\u5904\u7406\u3002 \u56e0\u4e3a\u9898\u76ee\u6709\u9650\u5236\uff0c\u6240\u4ee5 \\(k\\) \u662f\u6709\u53d6\u503c\u8303\u56f4\u7684\u3002 \u53ef\u4ee5\u5f97\u5230\u65b9\u7a0b\uff1a \\[f_{i,j}=\\max\\limits_{j-L_i\\le k \\le S_i-1}\\{f_{i-1,k}+P_i\\times(j-k)\\},j \\ge S_i\\] \u9996\u5148\u53d1\u73b0 \\(k\\) \u7684\u53d6\u503c\u968f\u7740 \\(j\\) \u5355\u8c03\u53d8\u5316\uff08\u6b64\u65f6\u9ed8\u8ba4 \\(i\\) \u4e0d\u53d8\uff09 \u5e76\u4e14 \\(P_i\\times(j-k)\\) \u8fd9\u4e2a\u591a\u9879\u5f0f\u662f\u5173\u4e8e \\(j,k\\) \u7684\uff0c\u8fd8\u53ef\u4ee5\u62c6\u5206\u6210\u4e24\u90e8\u5206\u3002 \u4e8e\u662f\u628a\u8fd9\u4e00\u90e8\u5206\u62c6\u5f00 \\[f_{i,j}=P_i\\times j + \\max\\limits_{j-L_i\\le k \\le S_i-1}\\{f_{i-1,k}-P_i\\times k\\},j \\ge L_i\\] \u968f\u4fbf\u627e\u4e24\u4e2a \\(k\\) \u8fdb\u884c\u8ba8\u8bba\uff0c\u53d1\u73b0\u8fd9\u91cc\u786e\u5b9e\u53ef\u4ee5\u5355\u8c03\u961f\u5217\u4f18\u5316\u3002 \u6240\u4ee5\u7ef4\u62a4\u4e00\u4e2a \\(f_{i-1,k}-P_i\\times k\\) \u7684\u6700\u5927\u503c\u7684\u961f\u5217\uff0c\u5e76\u4e14 \\(k\\) \u5355\u8c03\u9012\u589e\u3002 \u5f00\u59cb\u7684\u65f6\u5019\u628a\u521d\u59cb\u7684\u51b3\u7b56\u5148\u63d2\u5165\u8fdb\u53bb\uff0c\u7136\u540e\u518d\u8fdb\u884c\u8f6c\u79fb\u3002 \u56e0\u4e3a\u6bcf\u4e2a\u5143\u7d20\u53ea\u4f1a\u5165\u961f\u51fa\u961f\u4e00\u6b21\uff0c\u590d\u6742\u5ea6 \\(\\text{O}(nP)\\) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include <cstdio> #include <iostream> #include <algorithm> #include <cmath> #include <deque> using namespace std ; const int si_n = 16000 + 100 ; const int si_m = 110 ; int n , m , i , j , k , f [ si_m ][ si_n ]; struct node { int p , l , s ; bool operator < ( const node & b ) const { return s < b . s ; } } a [ si_n ]; deque < int > q ; // \u5077\u61d2 deque, \u6570\u7ec4\u5199\u6cd5\u4e5f\u662f\u4e00\u6837\u7684\u3002 inline void init (){ ios :: sync_with_stdio ( false ), cin >> m >> n ; for ( register int i = 1 ; i <= n ; i ++ ) cin >> a [ i ]. l >> a [ i ]. p >> a [ i ]. s ; sort ( a + 1 , a + 1 + n ); } inline int cal ( int i , int k ){ return f [ i -1 ][ k ] - a [ i ]. p * k ; } inline void work (){ for ( register int i = 1 ; i <= n ; i ++ ){ for ( register int k = max ( 0 , a [ i ]. s - a [ i ]. l ); k < a [ i ]. s ; k ++ ){ while ( q . size () && cal ( i , q . back ()) <= cal ( i , k )) q . pop_back (); q . push_back ( k ); } // \u63d2\u5165\u521d\u59cb\u51b3\u7b56 for ( register int j = 1 ; j <= m ; j ++ ) { f [ i ][ j ] = max ( f [ i -1 ][ j ], f [ i ][ j -1 ]); // \u7279\u6b8a\u60c5\u51b5 if ( j >= a [ i ]. s ){ while ( q . size () && q . front () < j - a [ i ]. l ) q . pop_front (); if ( q . size ()) f [ i ][ j ] = max ( f [ i ][ j ], a [ i ]. p * j + cal ( i , q . front ())); // \u961f\u5217\u975e\u7a7a\u624d\u53ef\u4ee5\u8f6c\u79fb } // \u8f6c\u79fb } } cout << f [ n ][ m ]; return ; } int main (){ init (), work (); return 0 ; }","title":"Problem 2"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP/#template","text":"\u4e00\u822c\u5355\u8c03\u961f\u5217\u4f18\u5316\u8f6c\u79fb\u7684\u65f6\u5019\u7684\u6a21\u677f\uff1a 1 2 3 4 5 6 for () \u63d2\u5165\u521d\u59cb\u51b3\u7b56 for () \u5148\u628a\u8fc7\u65f6\u7684\u5220\u9664 \u5982\u679c\u961f\u5217\u975e\u7a7a \u8f6c\u79fb \uff0c \u6392\u9664\u5197\u6742 \uff0c \u52a0\u5165\u65b0\u72b6\u6001 \uff08 \u540e\u4e24\u6b65\u6709\u7684\u65f6\u5019\u4e0d\u9700\u8981 \uff0c \u6bd4\u5982\u8fd9\u4e2a\u9898 \uff09","title":"Template"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%80%8E%E4%B9%88%E8%AE%BE%E8%AE%A1%E7%8A%B6%E6%80%81%E5%92%8C%E6%96%B9%E7%A8%8B/","text":"\u5982\u4f55\u8bbe\u8ba1\u72b6\u6001\u548c\u8f6c\u79fb\u65b9\u7a0b \u00b6 \u5206\u6790 \u00b6 \u6700\u91cd\u8981\u7684\u662f\u63d0\u53d6\u51fa\u9898\u76ee\u4e2d\u7684\u6240\u6709\u8981\u7d20\uff0c\u5e76\u5c3d\u53ef\u80fd\u7684\u5c06\u5176\u8f6c\u5316\u4e3a\u72b6\u6001\u7684\u4fe1\u606f\u7ef4\u5ea6\u6216\u8005\u72b6\u6001\u6240\u8868\u793a\u7684\u4fe1\u606f\u3002 \u5c31\u662f\u672c\u7740\u201c\u95ee\u5565\u8bbe\u5565\u201d\u7684\u7406\u5ff5\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff1a \u4e00\u4e2a\u516c\u53f8\u6709\u4e09\u4e2a\u79fb\u52a8\u670d\u52a1\u5458\uff0c\u6700\u521d\u5206\u522b\u5728\u4f4d\u7f6e \\(1\uff0c2\uff0c3\\) \u5904\u3002 \u5982\u679c\u67d0\u4e2a\u4f4d\u7f6e\uff08\u7528\u4e00\u4e2a\u6574\u6570\u8868\u793a\uff09\u6709\u4e00\u4e2a\u8bf7\u6c42\uff0c\u90a3\u4e48\u516c\u53f8\u5fc5\u987b\u6307\u6d3e\u67d0\u540d\u5458\u5de5\u8d76\u5230\u90a3\u4e2a\u5730\u65b9\u53bb\u3002 \u67d0\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u5458\u5de5\u80fd\u79fb\u52a8\uff0c\u4e14\u4e0d\u5141\u8bb8\u5728\u540c\u6837\u7684\u4f4d\u7f6e\u51fa\u73b0\u4e24\u4e2a\u5458\u5de5\u3002 \u4ece \\(p\\) \u5230 \\(q\\) \u79fb\u52a8\u4e00\u4e2a\u5458\u5de5\uff0c\u9700\u8981\u82b1\u8d39 \\(c(p,q)\\) \u3002 \u8fd9\u4e2a\u51fd\u6570\u4e0d\u4e00\u5b9a\u5bf9\u79f0\uff0c\u4f46\u4fdd\u8bc1 \\(c(p,p)=0\\) \u3002 \u7ed9\u51fa \\(N\\) \u4e2a\u8bf7\u6c42\uff0c\u8bf7\u6c42\u53d1\u751f\u7684\u4f4d\u7f6e\u5206\u522b\u4e3a \\(p_1 \\sim p_N\\) \u3002 \u516c\u53f8\u5fc5\u987b\u6309\u987a\u5e8f\u4f9d\u6b21\u6ee1\u8db3\u6240\u6709\u8bf7\u6c42\uff0c\u4e14\u8fc7\u7a0b\u4e2d\u4e0d\u80fd\u53bb\u5176\u4ed6\u989d\u5916\u7684\u4f4d\u7f6e\uff0c\u76ee\u6807\u662f\u6700\u5c0f\u5316\u516c\u53f8\u82b1\u8d39\uff0c\u8bf7\u4f60\u5e2e\u5fd9\u8ba1\u7b97\u8fd9\u4e2a\u6700\u5c0f\u82b1\u8d39\u3002 \\(1\\le L \\le 200, 1\\le N \\le 3000\\) \u3002 \u9996\u5148\u627e DP \u7684\u201d\u9636\u6bb5\u201c\uff0c\u4e5f\u5c31\u662f\u6700\u5916\u5c42\u5faa\u73af\u5e94\u8be5\u662f\u7531\u4ec0\u4e48\u51b3\u5b9a\u7684\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u662f\u4e00\u4e2a\u7ebf\u6027 DP \u95ee\u9898\uff0c\u90a3\u4e48\u8981\u627e\u7684\u5c31\u662f\u201c\u6309\u987a\u5e8f\u6210\u4e00\u6761\u7ebf\u201c\u7684\u8981\u7d20\u3002 \uff08\u6811\u5f62 DP \u5c31\u662f\u627e\u4ee5 xxx \u4e3a\u6839\u7684\u5b50\u6811\uff0c\u533a\u95f4 DP \u662f\u627e\u5212\u5206\u548c\u533a\u95f4\u957f\u5ea6\uff09 \u4ed4\u7ec6\u9605\u8bfb\u80fd\u53d1\u73b0\uff1a \u987a\u5e8f\u4f9d\u6b21\u6ee1\u8db3\u6240\u6709\u8bf7\u6c42 \u6240\u4ee5\u201d\u8bf7\u6c42\u201c\u5c31\u6784\u6210\u4e86 DP \u72b6\u6001\u4fe1\u606f\u7ef4\u5ea6\u7684\u201d\u9636\u6bb5\u201c\u8fd9\u4e00\u7ef4\u3002 \u7136\u540e\u6240\u4ee5\u53ef\u4ee5\u5148\u8bbe\u8ba1\u51fa\u4e00\u7ef4\u72b6\u6001\uff1a \\(dp_i\\) \u8868\u793a\u5904\u7406 \u524d \\(i\\) \u4e2a\u8bf7\u6c42\uff0c\u4ec0\u4e48\u4ec0\u4e48\u4e1c\u897f\u3002 \u9636\u6bb5\u7c7b\u7684\u4fe1\u606f\u4e00\u822c\u90fd\u5e26\u6709 \u201d\u524d\uff08 \\(i\\) \u4e2a\uff09\uff0c\u5f53\u524d\uff08\u7b2c \\(i\\) \u4e2a\uff09\u201c \u7684\u5b57\u6837\u3002 \u672c\u9898\u662f\u8981 \u5904\u7406\u5b8c\u8bf7\u6c42 \uff0c\u6240\u4ee5\u9009\u62e9 \u201d\u524d\u201c \u4f5c\u4e3a\u8981\u7d20\u3002 \u7136\u540e\u8bbe\u8ba1 DP \u72b6\u6001\u7684\u51b3\u7b56\u4fe1\u606f\u7ef4\u5ea6\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u6700\u7ec8 DP \u72b6\u6001\u6240\u8868\u793a\u7684\u4e1c\u897f\u5e94\u5f53\u548c \u201d\u82b1\u8d39\u201c \u6709\u5173\uff0c\u4e14\u5c5e\u6027\u5e94\u4e3a\u6700\u5c0f\u503c\u3002 \u51b3\u7b56\u7ef4\u5ea6\u662f\u7528\u4e8e\u201d\u51b3\u5b9a/\u786e\u5b9a\u201c DP \u72b6\u6001\u6700\u7ec8\u8868\u793a\u7684\u4e1c\u897f\u5e94\u5f53\u662f\u591a\u5c11\u7684\u3002 \u6240\u4ee5\u672c\u9898\u7684\u51b3\u7b56\u7ef4\u5ea6\u9700\u8981\u80fd\u591f \u51b3\u5b9a \u201d\u82b1\u8d39\u201c\u7684\u503c\u3002 \u800c\u53d1\u73b0\u672c\u9898\u7684\u201d\u82b1\u8d39\u201c\u662f\u7531 \u51fd\u6570 \\(c()\\) \u51b3\u5b9a\u7684\uff0c\u800c\u51fd\u6570 \\(c\\) \u7684 \u81ea\u53d8\u91cf \u5219\u662f\u201d \u5458\u5de5\u7684\u4f4d\u7f6e \u201c\u3002 \u6240\u4ee5\u53ef\u4ee5\u77e5\u9053\uff0cDP \u72b6\u6001\u7684\u51b3\u7b56\u4fe1\u606f\u7ef4\u5ea6\u5e94\u5f53\u542b\u6709 \u201d\u5458\u5de5\u7684\u4f4d\u7f6e\u201c \u8fd9\u4e00\u8981\u7d20\u3002 \u6211\u4eec\u5c06\u4e09\u4e2a\u5458\u5de5\u6240\u5904\u7684\u4f4d\u7f6e\u90fd\u8bbe\u8ba1\u8fdb\u72b6\u6001\uff0c\u56e0\u4e3a\u65e0\u540e\u6548\u6027\u5df2\u7ecf\u7531\u9636\u6bb5\u4fdd\u8bc1\uff0c\u6240\u4ee5\u201d\u4f4d\u7f6e\u201c\u8fd9\u4e00\u72b6\u6001\u4e0d\u9700\u8981\u4ece\u5c0f\u5230\u5927\u987a\u5e8f\u8f6c\u79fb\u3002 \u90a3\u4e48\u8bbe\u8ba1\u51fa DP \u72b6\u6001\uff1a \u8bbe \\(dp_{i,x,y,z}\\) \u8868\u793a \u5904\u7406\u5b8c \u524d \\(i\\) \u4e2a\u8bf7\u6c42\uff0c\u5458\u5de5 \\(1,2,3\\) \u5206\u522b\u5728\u4f4d\u7f6e \\(x,y,z\\) \u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u82b1\u8d39\u7684\u6700\u5c0f\u503c\u3002 \u7136\u540e\u8f6c\u79fb\u65b9\u7a0b\u5c31\u9700\u8981\u6839\u636e\u51b3\u7b56\u4fe1\u606f\u7ef4\u5ea6\u548c\u4ee3\u4ef7\u51fd\u6570\u6765\u8bbe\u8ba1\u3002 \u5e76\u4e14\uff0c\u56e0\u4e3a\u9898\u76ee\u4e2d\u63d0\u5230\uff1a \u4e0d\u5141\u8bb8\u5728\u540c\u6837\u7684\u4f4d\u7f6e\u51fa\u73b0\u4e24\u4e2a\u5458\u5de5 \u6240\u4ee5\u8f6c\u79fb\u65f6\u8fd8\u8981\u4fdd\u8bc1\u72b6\u6001\u7684\u5408\u6cd5\u6027\uff0c\u5373 \\(x\\not=y\\not=z\\) \u3002 \u4f46\u662f\u8fd9\u4e2a\u65b9\u7a0b\u5fc5\u7136\u65e0\u6cd5\u901a\u8fc7\u6240\u6709\u6570\u636e\uff0c\u56e0\u4e3a\u7a7a\u95f4\u5f00\u9500\u592a\u5927\u4e86\uff08 \\(3000 \\times 200 \\times 200 \\times 200\\) \uff09\u3002 \u6240\u4ee5\u6211\u4eec\u8981\u5728\u9898\u76ee\u8981\u7d20\u4e2d\u5bfb\u627e\u80fd\u591f\u51cf\u5c11\u7a7a\u95f4\u5f00\u9500\u7684\u8981\u7d20\u3002 \u4f46\u662f\u53d1\u73b0\u6211\u4eec\u8981\u60f3\u8f6c\u79fb\uff0c\u5c31\u5fc5\u987b\u540c\u65f6\u77e5\u9053\u4e09\u4e2a\u4eba\u7684\u4f4d\u7f6e\u3002 \u6240\u4ee5\u6b64\u5904\u8003\u8651\u7684\u662f \u901a\u8fc7\u66f4\u5c11\u7684\u4fe1\u606f\u53ef\u4ee5\u63a8\u51fa\u5b8c\u6574\u7684\u4fe1\u606f \u7684\u4f18\u5316\u3002 \u4e5f\u5c31\u662f\u8981\u60f3\u529e\u6cd5\u53ea\u7528\u4e00\u4e2a\u4eba\u6216\u8005\u4e24\u4e2a\u4eba\u7684\u4f4d\u7f6e\u786e\u5b9a\u4e09\u4e2a\u4eba\u7684\u4f4d\u7f6e\u3002 \u53d1\u73b0\u9898\u76ee\u4e2d\u8bf4\uff1a \u4e14\u8fc7\u7a0b\u4e2d\u4e0d\u80fd\u53bb\u5176\u4ed6\u989d\u5916\u7684\u4f4d\u7f6e \u90a3\u4e48\u4f18\u5316\u65b9\u5f0f\u5c31\u660e\u4e86\u4e86\uff0c\u5229\u7528\u53e6\u5916\u4e24\u4e2a\u4eba\u7684\u4f4d\u7f6e \\(x,y\\) \uff0c\u548c\u6700\u540e\u5904\u7406\u7684\u8bf7\u6c42\u4f4d\u7f6e\uff08 \\(p_{i}\\) \uff09\uff0c\u63a8\u51fa\u5904\u7406\u7b2c \\(i\\) \u4e2a\u8bf7\u6c42\u7684\u5458\u5de5\u7684\u4f4d\u7f6e \\(z=p_i\\) \u5373\u53ef\u3002 \u6240\u4ee5\u53ef\u4ee5\u5199\u51fa Code 1 2 3 4 5 6 7 8 9 10 11 12 memset ( dp , 0x3f , sizeof dp ); dp [ 0 ][ 1 ][ 2 ] = 0 , p [ 0 ] = 3 ; for ( int i = 0 ; i <= n ; ++ i ) { for ( int x = 1 ; x <= l ; ++ x ) { for ( int y = 1 ; y <= l ; ++ y ) { if ( x == y || x == p [ i ] || y == p [ i ]) continue ; dp [ i + 1 ][ x ][ y ] = min ( dp [ i + 1 ][ x ][ y ], dp [ i ][ x ][ y ] + c [ p [ i ]][ p [ i + 1 ]]); dp [ i + 1 ][ p [ i ]][ y ] = min ( dp [ i + 1 ][ p [ i ]][ y ], dp [ i ][ x ][ y ] + c [ x ][ p [ i + 1 ]]); dp [ i + 1 ][ x ][ p [ i ]] = min ( dp [ i + 1 ][ x ][ p [ i ]], dp [ i ][ x ][ y ] + c [ y ][ p [ i + 1 ]]); } } } \u72b6\u6001\u7684\u521d\u59cb\u5316\u4e5f\u662f\u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u95ee\u9898\u3002 \u4e00\u822c\u6765\u8bf4\u90fd\u9700\u8981 \u6839\u636e\u9898\u76ee\u8981\u6c42 \u521d\u59cb\u5316\u6240\u6709\u7684\u72b6\u6001\uff0c\u7136\u540e\u5355\u72ec\u7ed9\u7c7b\u4f3c \"0\" \u8fd9\u79cd\u8fb9\u754c\u72b6\u6001\u8d4b\u503c\u3002 \u6bd4\u5982\u672c\u9898\uff0c\u56e0\u4e3a\u6c42\u7684\u662f\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u81ea\u7136\u53ef\u4ee5\u60f3\u5230\u7ed9\u6240\u6709 DP \u503c\u8d4b\u503c\u4e3a \\(+\\infty\\) \u3002 \u4f46\u662f\u5982\u679c\u76f4\u63a5\u8d4b\u503c\u4e4b\u540e\u4ec0\u4e48\u90fd\u4e0d\u5e72\uff0c\u90a3\u6240\u6709\u7684 DP \u503c\u90fd\u4e0d\u4f1a\u88ab\u66f4\u65b0\u3002 \u6240\u4ee5\u6211\u4eec\u8f6c\u79fb\u7684\u65f6\u5019\u8981\u8ba9 \\(dp_{0}\\) \u8fd9\u79cd\u72b6\u6001\u6d3e\u4e0a\u7528\u573a\uff0c\u4e00\u822c\u6765\u8bf4\u8fd9\u79cd\u72b6\u6001\u90fd\u4f1a\u8bbe\u8ba1\u4e3a \\(0\\) \uff0c\u4fbf\u4e8e\u8f6c\u79fb\u3002 \u672c\u9898\u8bf4\uff0c\u521d\u59cb\u4e09\u4e2a\u5458\u5de5\u5206\u522b\u5728 \\(1,2,3\\) \uff0c\u90a3\u4e48\u65e0\u4f18\u5316\u7684\u72b6\u6001\u4e0b\uff0c\u5c31\u9700\u8981\u4ee4 \\(dp_{0,1,2,3} = 0\\) \u3002 \u4f46\u662f\u5f53\u524d\u5df2\u7ecf\u4f18\u5316\u4e86\uff0c\u7b2c\u4e09\u4e2a\u5458\u5de5\u7684\u4f4d\u7f6e\u662f\u8981\u63a8\u51fa\u6765\u7684\uff0c\u90a3\u5c31\u5047\u8bbe\u6700\u5f00\u59cb\u6709\u4e00\u4e2a \\(0\\) \u53f7\u8bf7\u6c42\uff0c \u8fd9\u4e2a\u8bf7\u6c42\u7531 \\(3\\) \u53f7\u5458\u5de5\u5b8c\u6210\uff0c\u4e14\u5b83\u7684\u4f4d\u7f6e\u662f \\(p_0 =3\\) \u3002 \u540c\u65f6\u4ee4 \\(dp_{0,1,2}=0\\) \u5373\u53ef\u5b8c\u6210\u521d\u59cb\u5316\u3002 \u5f53\u7136\uff0c\u5faa\u73af\u65f6\u4e0d\u8981\u5fd8\u8bb0\u4ee4 \\(i = 0\\) \uff0c\u8981\u4e0d\u7136\u521d\u59cb\u5316\u90fd\u6ca1\u7528\u4e86\u3002 \u603b\u7ed3 \u00b6 \u8bbe\u8ba1\u72b6\u6001\uff1a\u6293\u9898\u76ee\u8981\u7d20\uff0c\u6309\u7167\u201d\u9636\u6bb5->\u51b3\u7b56->\u610f\u4e49\u201c \u7684\u987a\u5e8f\u53bb\u51b3\u5b9a DP \u72b6\u6001\u3002 \u5176\u4e2d\uff0c\u201d\u9636\u6bb5\u201c\u7531 DP \u79cd\u7c7b\u51b3\u5b9a\uff0c\u201d\u51b3\u7b56\u201c\u7531\u8ba1\u7b97\u82b1\u8d39\u7684\u51fd\u6570\u7684\u81ea\u53d8\u91cf\u51b3\u5b9a\uff0c\u201d\u610f\u4e49\u201c\u7531\u9898\u76ee\u8981\u6c42\u51b3\u5b9a\u3002 \u8bbe\u8ba1\u65b9\u7a0b\uff1a\u6839\u636e\u72b6\u6001\u8f6c\u79fb\uff0c\u6ce8\u610f\u65e0\u540e\u6548\u6027\uff0c\u5408\u6cd5\u6027\uff0c\u53ef\u884c\u6027\u3002 \u72b6\u6001\u521d\u59cb\u5316\uff1a\u6839\u636e\u8981\u6c42\uff0c\u5355\u72ec\u5904\u7406\u8fb9\u754c\u3002","title":"\u600e\u4e48\u8bbe\u8ba1\u72b6\u6001\u548c\u65b9\u7a0b"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%80%8E%E4%B9%88%E8%AE%BE%E8%AE%A1%E7%8A%B6%E6%80%81%E5%92%8C%E6%96%B9%E7%A8%8B/#_1","text":"","title":"\u5982\u4f55\u8bbe\u8ba1\u72b6\u6001\u548c\u8f6c\u79fb\u65b9\u7a0b"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%80%8E%E4%B9%88%E8%AE%BE%E8%AE%A1%E7%8A%B6%E6%80%81%E5%92%8C%E6%96%B9%E7%A8%8B/#_2","text":"\u6700\u91cd\u8981\u7684\u662f\u63d0\u53d6\u51fa\u9898\u76ee\u4e2d\u7684\u6240\u6709\u8981\u7d20\uff0c\u5e76\u5c3d\u53ef\u80fd\u7684\u5c06\u5176\u8f6c\u5316\u4e3a\u72b6\u6001\u7684\u4fe1\u606f\u7ef4\u5ea6\u6216\u8005\u72b6\u6001\u6240\u8868\u793a\u7684\u4fe1\u606f\u3002 \u5c31\u662f\u672c\u7740\u201c\u95ee\u5565\u8bbe\u5565\u201d\u7684\u7406\u5ff5\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff1a \u4e00\u4e2a\u516c\u53f8\u6709\u4e09\u4e2a\u79fb\u52a8\u670d\u52a1\u5458\uff0c\u6700\u521d\u5206\u522b\u5728\u4f4d\u7f6e \\(1\uff0c2\uff0c3\\) \u5904\u3002 \u5982\u679c\u67d0\u4e2a\u4f4d\u7f6e\uff08\u7528\u4e00\u4e2a\u6574\u6570\u8868\u793a\uff09\u6709\u4e00\u4e2a\u8bf7\u6c42\uff0c\u90a3\u4e48\u516c\u53f8\u5fc5\u987b\u6307\u6d3e\u67d0\u540d\u5458\u5de5\u8d76\u5230\u90a3\u4e2a\u5730\u65b9\u53bb\u3002 \u67d0\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u5458\u5de5\u80fd\u79fb\u52a8\uff0c\u4e14\u4e0d\u5141\u8bb8\u5728\u540c\u6837\u7684\u4f4d\u7f6e\u51fa\u73b0\u4e24\u4e2a\u5458\u5de5\u3002 \u4ece \\(p\\) \u5230 \\(q\\) \u79fb\u52a8\u4e00\u4e2a\u5458\u5de5\uff0c\u9700\u8981\u82b1\u8d39 \\(c(p,q)\\) \u3002 \u8fd9\u4e2a\u51fd\u6570\u4e0d\u4e00\u5b9a\u5bf9\u79f0\uff0c\u4f46\u4fdd\u8bc1 \\(c(p,p)=0\\) \u3002 \u7ed9\u51fa \\(N\\) \u4e2a\u8bf7\u6c42\uff0c\u8bf7\u6c42\u53d1\u751f\u7684\u4f4d\u7f6e\u5206\u522b\u4e3a \\(p_1 \\sim p_N\\) \u3002 \u516c\u53f8\u5fc5\u987b\u6309\u987a\u5e8f\u4f9d\u6b21\u6ee1\u8db3\u6240\u6709\u8bf7\u6c42\uff0c\u4e14\u8fc7\u7a0b\u4e2d\u4e0d\u80fd\u53bb\u5176\u4ed6\u989d\u5916\u7684\u4f4d\u7f6e\uff0c\u76ee\u6807\u662f\u6700\u5c0f\u5316\u516c\u53f8\u82b1\u8d39\uff0c\u8bf7\u4f60\u5e2e\u5fd9\u8ba1\u7b97\u8fd9\u4e2a\u6700\u5c0f\u82b1\u8d39\u3002 \\(1\\le L \\le 200, 1\\le N \\le 3000\\) \u3002 \u9996\u5148\u627e DP \u7684\u201d\u9636\u6bb5\u201c\uff0c\u4e5f\u5c31\u662f\u6700\u5916\u5c42\u5faa\u73af\u5e94\u8be5\u662f\u7531\u4ec0\u4e48\u51b3\u5b9a\u7684\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u662f\u4e00\u4e2a\u7ebf\u6027 DP \u95ee\u9898\uff0c\u90a3\u4e48\u8981\u627e\u7684\u5c31\u662f\u201c\u6309\u987a\u5e8f\u6210\u4e00\u6761\u7ebf\u201c\u7684\u8981\u7d20\u3002 \uff08\u6811\u5f62 DP \u5c31\u662f\u627e\u4ee5 xxx \u4e3a\u6839\u7684\u5b50\u6811\uff0c\u533a\u95f4 DP \u662f\u627e\u5212\u5206\u548c\u533a\u95f4\u957f\u5ea6\uff09 \u4ed4\u7ec6\u9605\u8bfb\u80fd\u53d1\u73b0\uff1a \u987a\u5e8f\u4f9d\u6b21\u6ee1\u8db3\u6240\u6709\u8bf7\u6c42 \u6240\u4ee5\u201d\u8bf7\u6c42\u201c\u5c31\u6784\u6210\u4e86 DP \u72b6\u6001\u4fe1\u606f\u7ef4\u5ea6\u7684\u201d\u9636\u6bb5\u201c\u8fd9\u4e00\u7ef4\u3002 \u7136\u540e\u6240\u4ee5\u53ef\u4ee5\u5148\u8bbe\u8ba1\u51fa\u4e00\u7ef4\u72b6\u6001\uff1a \\(dp_i\\) \u8868\u793a\u5904\u7406 \u524d \\(i\\) \u4e2a\u8bf7\u6c42\uff0c\u4ec0\u4e48\u4ec0\u4e48\u4e1c\u897f\u3002 \u9636\u6bb5\u7c7b\u7684\u4fe1\u606f\u4e00\u822c\u90fd\u5e26\u6709 \u201d\u524d\uff08 \\(i\\) \u4e2a\uff09\uff0c\u5f53\u524d\uff08\u7b2c \\(i\\) \u4e2a\uff09\u201c \u7684\u5b57\u6837\u3002 \u672c\u9898\u662f\u8981 \u5904\u7406\u5b8c\u8bf7\u6c42 \uff0c\u6240\u4ee5\u9009\u62e9 \u201d\u524d\u201c \u4f5c\u4e3a\u8981\u7d20\u3002 \u7136\u540e\u8bbe\u8ba1 DP \u72b6\u6001\u7684\u51b3\u7b56\u4fe1\u606f\u7ef4\u5ea6\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u6700\u7ec8 DP \u72b6\u6001\u6240\u8868\u793a\u7684\u4e1c\u897f\u5e94\u5f53\u548c \u201d\u82b1\u8d39\u201c \u6709\u5173\uff0c\u4e14\u5c5e\u6027\u5e94\u4e3a\u6700\u5c0f\u503c\u3002 \u51b3\u7b56\u7ef4\u5ea6\u662f\u7528\u4e8e\u201d\u51b3\u5b9a/\u786e\u5b9a\u201c DP \u72b6\u6001\u6700\u7ec8\u8868\u793a\u7684\u4e1c\u897f\u5e94\u5f53\u662f\u591a\u5c11\u7684\u3002 \u6240\u4ee5\u672c\u9898\u7684\u51b3\u7b56\u7ef4\u5ea6\u9700\u8981\u80fd\u591f \u51b3\u5b9a \u201d\u82b1\u8d39\u201c\u7684\u503c\u3002 \u800c\u53d1\u73b0\u672c\u9898\u7684\u201d\u82b1\u8d39\u201c\u662f\u7531 \u51fd\u6570 \\(c()\\) \u51b3\u5b9a\u7684\uff0c\u800c\u51fd\u6570 \\(c\\) \u7684 \u81ea\u53d8\u91cf \u5219\u662f\u201d \u5458\u5de5\u7684\u4f4d\u7f6e \u201c\u3002 \u6240\u4ee5\u53ef\u4ee5\u77e5\u9053\uff0cDP \u72b6\u6001\u7684\u51b3\u7b56\u4fe1\u606f\u7ef4\u5ea6\u5e94\u5f53\u542b\u6709 \u201d\u5458\u5de5\u7684\u4f4d\u7f6e\u201c \u8fd9\u4e00\u8981\u7d20\u3002 \u6211\u4eec\u5c06\u4e09\u4e2a\u5458\u5de5\u6240\u5904\u7684\u4f4d\u7f6e\u90fd\u8bbe\u8ba1\u8fdb\u72b6\u6001\uff0c\u56e0\u4e3a\u65e0\u540e\u6548\u6027\u5df2\u7ecf\u7531\u9636\u6bb5\u4fdd\u8bc1\uff0c\u6240\u4ee5\u201d\u4f4d\u7f6e\u201c\u8fd9\u4e00\u72b6\u6001\u4e0d\u9700\u8981\u4ece\u5c0f\u5230\u5927\u987a\u5e8f\u8f6c\u79fb\u3002 \u90a3\u4e48\u8bbe\u8ba1\u51fa DP \u72b6\u6001\uff1a \u8bbe \\(dp_{i,x,y,z}\\) \u8868\u793a \u5904\u7406\u5b8c \u524d \\(i\\) \u4e2a\u8bf7\u6c42\uff0c\u5458\u5de5 \\(1,2,3\\) \u5206\u522b\u5728\u4f4d\u7f6e \\(x,y,z\\) \u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u82b1\u8d39\u7684\u6700\u5c0f\u503c\u3002 \u7136\u540e\u8f6c\u79fb\u65b9\u7a0b\u5c31\u9700\u8981\u6839\u636e\u51b3\u7b56\u4fe1\u606f\u7ef4\u5ea6\u548c\u4ee3\u4ef7\u51fd\u6570\u6765\u8bbe\u8ba1\u3002 \u5e76\u4e14\uff0c\u56e0\u4e3a\u9898\u76ee\u4e2d\u63d0\u5230\uff1a \u4e0d\u5141\u8bb8\u5728\u540c\u6837\u7684\u4f4d\u7f6e\u51fa\u73b0\u4e24\u4e2a\u5458\u5de5 \u6240\u4ee5\u8f6c\u79fb\u65f6\u8fd8\u8981\u4fdd\u8bc1\u72b6\u6001\u7684\u5408\u6cd5\u6027\uff0c\u5373 \\(x\\not=y\\not=z\\) \u3002 \u4f46\u662f\u8fd9\u4e2a\u65b9\u7a0b\u5fc5\u7136\u65e0\u6cd5\u901a\u8fc7\u6240\u6709\u6570\u636e\uff0c\u56e0\u4e3a\u7a7a\u95f4\u5f00\u9500\u592a\u5927\u4e86\uff08 \\(3000 \\times 200 \\times 200 \\times 200\\) \uff09\u3002 \u6240\u4ee5\u6211\u4eec\u8981\u5728\u9898\u76ee\u8981\u7d20\u4e2d\u5bfb\u627e\u80fd\u591f\u51cf\u5c11\u7a7a\u95f4\u5f00\u9500\u7684\u8981\u7d20\u3002 \u4f46\u662f\u53d1\u73b0\u6211\u4eec\u8981\u60f3\u8f6c\u79fb\uff0c\u5c31\u5fc5\u987b\u540c\u65f6\u77e5\u9053\u4e09\u4e2a\u4eba\u7684\u4f4d\u7f6e\u3002 \u6240\u4ee5\u6b64\u5904\u8003\u8651\u7684\u662f \u901a\u8fc7\u66f4\u5c11\u7684\u4fe1\u606f\u53ef\u4ee5\u63a8\u51fa\u5b8c\u6574\u7684\u4fe1\u606f \u7684\u4f18\u5316\u3002 \u4e5f\u5c31\u662f\u8981\u60f3\u529e\u6cd5\u53ea\u7528\u4e00\u4e2a\u4eba\u6216\u8005\u4e24\u4e2a\u4eba\u7684\u4f4d\u7f6e\u786e\u5b9a\u4e09\u4e2a\u4eba\u7684\u4f4d\u7f6e\u3002 \u53d1\u73b0\u9898\u76ee\u4e2d\u8bf4\uff1a \u4e14\u8fc7\u7a0b\u4e2d\u4e0d\u80fd\u53bb\u5176\u4ed6\u989d\u5916\u7684\u4f4d\u7f6e \u90a3\u4e48\u4f18\u5316\u65b9\u5f0f\u5c31\u660e\u4e86\u4e86\uff0c\u5229\u7528\u53e6\u5916\u4e24\u4e2a\u4eba\u7684\u4f4d\u7f6e \\(x,y\\) \uff0c\u548c\u6700\u540e\u5904\u7406\u7684\u8bf7\u6c42\u4f4d\u7f6e\uff08 \\(p_{i}\\) \uff09\uff0c\u63a8\u51fa\u5904\u7406\u7b2c \\(i\\) \u4e2a\u8bf7\u6c42\u7684\u5458\u5de5\u7684\u4f4d\u7f6e \\(z=p_i\\) \u5373\u53ef\u3002 \u6240\u4ee5\u53ef\u4ee5\u5199\u51fa Code 1 2 3 4 5 6 7 8 9 10 11 12 memset ( dp , 0x3f , sizeof dp ); dp [ 0 ][ 1 ][ 2 ] = 0 , p [ 0 ] = 3 ; for ( int i = 0 ; i <= n ; ++ i ) { for ( int x = 1 ; x <= l ; ++ x ) { for ( int y = 1 ; y <= l ; ++ y ) { if ( x == y || x == p [ i ] || y == p [ i ]) continue ; dp [ i + 1 ][ x ][ y ] = min ( dp [ i + 1 ][ x ][ y ], dp [ i ][ x ][ y ] + c [ p [ i ]][ p [ i + 1 ]]); dp [ i + 1 ][ p [ i ]][ y ] = min ( dp [ i + 1 ][ p [ i ]][ y ], dp [ i ][ x ][ y ] + c [ x ][ p [ i + 1 ]]); dp [ i + 1 ][ x ][ p [ i ]] = min ( dp [ i + 1 ][ x ][ p [ i ]], dp [ i ][ x ][ y ] + c [ y ][ p [ i + 1 ]]); } } } \u72b6\u6001\u7684\u521d\u59cb\u5316\u4e5f\u662f\u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u95ee\u9898\u3002 \u4e00\u822c\u6765\u8bf4\u90fd\u9700\u8981 \u6839\u636e\u9898\u76ee\u8981\u6c42 \u521d\u59cb\u5316\u6240\u6709\u7684\u72b6\u6001\uff0c\u7136\u540e\u5355\u72ec\u7ed9\u7c7b\u4f3c \"0\" \u8fd9\u79cd\u8fb9\u754c\u72b6\u6001\u8d4b\u503c\u3002 \u6bd4\u5982\u672c\u9898\uff0c\u56e0\u4e3a\u6c42\u7684\u662f\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u81ea\u7136\u53ef\u4ee5\u60f3\u5230\u7ed9\u6240\u6709 DP \u503c\u8d4b\u503c\u4e3a \\(+\\infty\\) \u3002 \u4f46\u662f\u5982\u679c\u76f4\u63a5\u8d4b\u503c\u4e4b\u540e\u4ec0\u4e48\u90fd\u4e0d\u5e72\uff0c\u90a3\u6240\u6709\u7684 DP \u503c\u90fd\u4e0d\u4f1a\u88ab\u66f4\u65b0\u3002 \u6240\u4ee5\u6211\u4eec\u8f6c\u79fb\u7684\u65f6\u5019\u8981\u8ba9 \\(dp_{0}\\) \u8fd9\u79cd\u72b6\u6001\u6d3e\u4e0a\u7528\u573a\uff0c\u4e00\u822c\u6765\u8bf4\u8fd9\u79cd\u72b6\u6001\u90fd\u4f1a\u8bbe\u8ba1\u4e3a \\(0\\) \uff0c\u4fbf\u4e8e\u8f6c\u79fb\u3002 \u672c\u9898\u8bf4\uff0c\u521d\u59cb\u4e09\u4e2a\u5458\u5de5\u5206\u522b\u5728 \\(1,2,3\\) \uff0c\u90a3\u4e48\u65e0\u4f18\u5316\u7684\u72b6\u6001\u4e0b\uff0c\u5c31\u9700\u8981\u4ee4 \\(dp_{0,1,2,3} = 0\\) \u3002 \u4f46\u662f\u5f53\u524d\u5df2\u7ecf\u4f18\u5316\u4e86\uff0c\u7b2c\u4e09\u4e2a\u5458\u5de5\u7684\u4f4d\u7f6e\u662f\u8981\u63a8\u51fa\u6765\u7684\uff0c\u90a3\u5c31\u5047\u8bbe\u6700\u5f00\u59cb\u6709\u4e00\u4e2a \\(0\\) \u53f7\u8bf7\u6c42\uff0c \u8fd9\u4e2a\u8bf7\u6c42\u7531 \\(3\\) \u53f7\u5458\u5de5\u5b8c\u6210\uff0c\u4e14\u5b83\u7684\u4f4d\u7f6e\u662f \\(p_0 =3\\) \u3002 \u540c\u65f6\u4ee4 \\(dp_{0,1,2}=0\\) \u5373\u53ef\u5b8c\u6210\u521d\u59cb\u5316\u3002 \u5f53\u7136\uff0c\u5faa\u73af\u65f6\u4e0d\u8981\u5fd8\u8bb0\u4ee4 \\(i = 0\\) \uff0c\u8981\u4e0d\u7136\u521d\u59cb\u5316\u90fd\u6ca1\u7528\u4e86\u3002","title":"\u5206\u6790"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%80%8E%E4%B9%88%E8%AE%BE%E8%AE%A1%E7%8A%B6%E6%80%81%E5%92%8C%E6%96%B9%E7%A8%8B/#_3","text":"\u8bbe\u8ba1\u72b6\u6001\uff1a\u6293\u9898\u76ee\u8981\u7d20\uff0c\u6309\u7167\u201d\u9636\u6bb5->\u51b3\u7b56->\u610f\u4e49\u201c \u7684\u987a\u5e8f\u53bb\u51b3\u5b9a DP \u72b6\u6001\u3002 \u5176\u4e2d\uff0c\u201d\u9636\u6bb5\u201c\u7531 DP \u79cd\u7c7b\u51b3\u5b9a\uff0c\u201d\u51b3\u7b56\u201c\u7531\u8ba1\u7b97\u82b1\u8d39\u7684\u51fd\u6570\u7684\u81ea\u53d8\u91cf\u51b3\u5b9a\uff0c\u201d\u610f\u4e49\u201c\u7531\u9898\u76ee\u8981\u6c42\u51b3\u5b9a\u3002 \u8bbe\u8ba1\u65b9\u7a0b\uff1a\u6839\u636e\u72b6\u6001\u8f6c\u79fb\uff0c\u6ce8\u610f\u65e0\u540e\u6548\u6027\uff0c\u5408\u6cd5\u6027\uff0c\u53ef\u884c\u6027\u3002 \u72b6\u6001\u521d\u59cb\u5316\uff1a\u6839\u636e\u8981\u6c42\uff0c\u5355\u72ec\u5904\u7406\u8fb9\u754c\u3002","title":"\u603b\u7ed3"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E4%BD%8DDP/","text":"\u6570\u4f4dDP \u00b6 Introduction \u00b6 \u8fd9\u4e00\u7c7b\u95ee\u9898\u90fd\u662f\u8be2\u95ee\u67d0\u4e2a\u533a\u95f4 \\([L,R]\\) \u5f53\u4e2d\u6ee1\u8db3\u67d0\u4e2a\u6761\u4ef6\u7684\u6570\u7684\u4e2a\u6570\u3002 \u5e38\u89c1\u7684\u9650\u5236\u6709\uff1a \u5404\u4f4d\u6570\u5b57\u548c\u4e0d\u80fd\u662f\u67d0\u4e2a\u6574\u6570\u7684\u500d\u6570 \u67d0\u4e00\u4e2a\u6570\u5b57\u4e0d\u80fd\u51fa\u73b0 \u6570\u5b57\u5fc5\u987b\u6309\u7167\u5347\u5e8f\u6392\u5217 \u4e0d\u80fd\u51fa\u73b0\u67d0\u4e24\u4e2a\u8fde\u7eed\u7684\u6570\u5b57 Trick \u00b6 \u5957\u8def\u65e0\u975e\u4e24\u6b65\uff1a \u5148\u628a \\(F(L),F(R)\\) \u7b97\u51fa\u6765\uff0c\u7b54\u6848\u5c31\u662f \\(F(R)-F(L-1)\\) \u3002 \u5176\u4e2d \\(F(X)\\) \u8868\u793a \\([1,X]\\) \u5f53\u4e2d\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u7684\u4e2a\u6570\u3002 \u8003\u8651\u6bcf\u4e00\u4f4d\u600e\u4e48\u586b\uff0c\u662f\u5426\u6709\u4e0a\u754c\u9650\u5236\uff08\u5229\u7528\u6811\u7684\u601d\u60f3\uff09 \u4e0a\u754c\u9650\u5236\u662f\u8fd9\u6837\u7684\uff1a\u6bd4\u5982\u4f60\u73b0\u5728\u8981\u6c42 \\(F(n)\\) \u3002 \u5e76\u4e14 \\(n=12345678\\) \u6211\u4eec\u4ece\u6700\u9ad8\u4f4d\uff0c\u4e5f\u5c31\u662f \\(8\\) \u6240\u5904\u7684\u4f4d\u7f6e\u5f00\u59cb\u5904\u7406\u3002 \u90a3\u4e48\u8fd9\u4e00\u4f4d\u5c31\u6709\u4e24\u79cd\u60c5\u51b5\uff1a \u8fd9\u4e00\u4f4d\u586b \\(8\\) \uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0b\u4e00\u4f4d\u53ea\u80fd\u586b \\(0 \\sim 7\\) \u3002 \u8fd9\u4e00\u4f4d\u586b \\(0\\sim 7\\) \u7684\u67d0\u4e00\u4e2a\u6570\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0b\u4e00\u4f4d\uff0c\u5305\u62ec\u4e4b\u540e\u7684\u6240\u6709\u4f4d\u60f3\u600e\u4e48\u586b\u600e\u4e48\u586b\uff08 \\(0 \\sim 9\\) \uff09 \u200b \u7b2c\u4e00\u79cd\u60c5\u51b5\u5c31\u662f\u6709\u4e0a\u754c\u9650\u5236\u7684\u3002 \u5f53\u7136\uff0c\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u7ec6\u8282\uff0c\u5c31\u76f4\u63a5\u770b\u4e00\u4efd\u4f2a\u4ee3\u7801\u5427 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 1 function dfs ( \u5f53\u524d\u4f4d\u6570 x , \u5f53\u524d\u72b6\u6001 y , \u524d\u5bfc\u96f6\u9650\u5236 st , \u4e0a\u754c\u9650\u5236 limit ) : 2 if \u5230\u8fbe\u8fb9\u754c then 3 \u8fd4\u56de\u8fb9\u754c\u7684\u7b54\u6848 4 5 if \u6ca1\u6709\u4e0a\u754c\u9650\u5236 and \u5f53\u524d\u7684\u72b6\u6001\u5df2\u7ecf\u8bb0\u5fc6\u5316\u8fc7 then 6 \u8fd4\u56de\u8bb0\u5f55\u7684\u7b54\u6848 7 8 variable result = 0 # \u8bb0\u5f55\u7b54\u6848 9 10 variable up = 9 # \u5f53\u524d\u4f4d\u586b\u6570\u7684\u4e0a\u9650 11 if \u6709\u4e0a\u754c\u9650\u5236 then 12 up = \u5f53\u524d\u4f4d\u5728 n \u5f53\u4e2d\u7684\u6570\u5b57 # n \u662f\u8981\u6c42\u7684 F ( n ) \u7684\u81ea\u53d8\u91cf 13 14 for \u679a\u4e3e\u5f53\u524d\u4f4d\u7684\u586b\u6570\u503c from 0 to up : 15 if \u5f53\u524d\u4f4d\u586b\u7684\u6570\u4e0d\u7b26\u5408\u9650\u5236 then 16 continue 17 if \u6709\u524d\u5bfc\u96f6\u9650\u5236 and \u5f53\u524d\u586b\u5199\u7684\u662f 0 then 18 result += dfs ( x - 1 , \u4e0b\u4e00\u4e2a\u72b6\u6001 , true , \u662f\u5426\u89e6\u78b0\u4e0a\u754c\u9650\u5236 ) 19 else then 20 result += dfs ( x - 1 , \u4e0b\u4e00\u4e2a\u72b6\u6001 , false , \u662f\u5426\u89e6\u78b0\u4e0a\u754c\u9650\u5236 ) 21 22 if \u6ca1\u6709\u524d\u5bfc\u96f6\u9650\u5236 and \u6ca1\u6709\u4e0a\u754c\u9650\u5236 then 23 \u8bb0\u5f55\u5f53\u524d\u72b6\u6001\u7684\u7b54\u6848 f [ x ][ y ] 24 25 \u8fd4\u56de\u7b54\u6848 result 26 27 28 29 function solve ( \u8981\u6c42\u7684 F \u7684\u81ea\u53d8\u91cf n ) 30 \u5b58\u50a8\u6bcf\u4e00\u4f4d\u6570\u5b57\u7684 vector \u6e05\u7a7a 31 while n ! = 0 then 32 vector <== n % base # base \u8868\u793a\u662f\u54ea\u4e00\u4e2a\u8fdb\u5236 33 n /= base 34 \u8fd4\u56de\u5bf9\u5e94\u72b6\u6001\u7684\u7b54\u6848\uff08\u8c03\u7528 dfs \uff09 \u4ece\u4e0a\u5230\u4e0b\u89e3\u91ca\u4e00\u4e0b\uff1a Line1 \uff1a\u5f53\u524d\u72b6\u6001 \\(y\\) \u9700\u8981\u7531\u9898\u76ee\u7684\u9650\u5236\u51b3\u5b9a\uff0c\u6bd4\u5982 \u4e0a\u4e00\u4e2a\u586b\u5199\u7684/\u5f53\u524d\u7684\u6570\u4f4d\u603b\u548c/\u5df2\u7ecf\u586b\u4e86\u591a\u5c11\u4f4d \u8fd9\u79cd\u9650\u5236 Line2 \uff1a\u8fb9\u754c\u4e00\u822c\u662f \\(x=0\\) \uff0c\u6709\u7684\u65f6\u5019\u9700\u8981\u5224\u65ad\u5f53\u524d\u72b6\u6001\u662f\u5426\u5408\u6cd5\uff08\u6bd4\u5982\u662f\u5426\u662f\u67d0\u4e2a\u6570\u7684\u500d\u6570\u4e4b\u7c7b\u7684\uff09 Line3 \uff1a\u8fb9\u754c\u7684\u7b54\u6848\u8981\u770b\u60c5\u51b5\u800c\u5b9a\uff0c\u6709\u7684\u65f6\u5019\u662f \\(0,1\\) \u6709\u7684\u65f6\u5019\u662f\u5f53\u524d\u586b\u51fa\u6765\u7684\u8fd9\u4e2a\u6570\u7684\u5e73\u65b9\u3002 Line5 \uff1a\u8fd9\u91cc\u4e00\u822c\u4f7f\u7528\u4e24\u4e2a bool \u53d8\u91cf \\(st,limit\\) \uff0c\u76f4\u63a5\u5224\u65ad\u5c31\u53ef\u4ee5\u4e86\u3002 Line12 \uff1a\u6211\u8bb0\u5f55\u6bcf\u4e00\u4f4d\u7684\u6570\u5b57\u4e00\u822c\u7528 vector \u76f4\u63a5 pb\uff0c\u6240\u4ee5\u5982\u679c\u5f53\u524d\u4f4d\u662f \\(x\\) \uff0c\u90a3\u4e48\u8fd9\u91cc \\(up=dight_{x-1}\\) \u5373\u53ef\u3002 Line15 \uff1a\u8fd9\u4e2a\u9700\u8981\u770b\u9898\u76ee\u9650\u5236\uff0c\u6bd4\u5982\u6709\u6ca1\u6709\u54ea\u4e00\u4e2a\u6570\u4e0d\u80fd\u51fa\u73b0\uff0c\u54ea\u4e24\u4e2a\u6570\u4e0d\u80fd\u8fde\u7eed\u51fa\u73b0\uff08\u8fd9\u4e2a\u9700\u8981\u5728\u5f00\u59cb\u7684\u65f6\u5019\u8bb0\u5f55\u4e0a\u4e00\u4f4d\uff09 Line18 \uff1a\u4f7f\u7528 limit && i==up \u8fd9\u4e2a\u8bed\u53e5\u5373\u53ef\u3002 Line34 \uff1a\u8fd9\u4e2a\u4e5f\u662f\u8981\u770b\u9898\u76ee\u9650\u5236\u800c\u5b9a\uff0c\u4e0d\u8fc7\u6709\u51e0\u4e2a\u901a\u7528\u7684\u7ec6\u8282\u9700\u8981\u6ce8\u610f\u3002 \u6700\u5f00\u59cb\uff0c\u5982\u679c\u662f\u4ece\u9ad8\u4f4d\u5f00\u59cb\u641c\u7d22\uff0c\u9700\u8981\u628a limit \u8bbe\u7f6e\u4e3a true \u3002 \u56e0\u4e3a\u6700\u9ad8\u4f4d\u672c\u5c31\u6709\u9650\u5236\uff08\u540e\u9762\u7684\u5927\u5c0f\u4e0d\u80fd\u968f\u4fbf\u586b\u4e86\uff09\u3002 \u4ece\u9ad8\u4f4d\u5f00\u59cb\u641c\u7d22\uff0c\u90a3\u4e48\u5f00\u59cb\u7684\u65f6\u5019\u8981\u8bbe\u7f6e\u524d\u5bfc\u96f6\u9650\u5236\u4e3a true\u3002 \u56e0\u4e3a\u524d\u5bfc\u96f6\u672c\u6765\u5c31\u4f1a\u5b58\u5728\u4e8e\u6700\u9ad8\u4f4d\u3002 \u5982\u679c \\(y\\) \u8bb0\u5f55\u7684\u662f\u4e0a\u4e00\u6b65\u586b\u7684\u662f\u4ec0\u4e48\uff0c\u4e00\u822c\u4f1a\u586b \\(0\\) \uff0c\u5f53\u7136\uff0c\u6709\u4e2a\u9898\u586b\u7684\u662f \\(-2\\) \uff0c\u8fd9\u4e2a\u6280\u5de7\u5230\u65f6\u5019\u518d\u8bf4\u3002 Problem \u00b6 \u6765\u4e00\u9053\u7ecf\u5178\u9898\uff08\u5305\u542b\u6240\u6709\u8981\u7d20\uff09\uff1a [SCOI2009] Windy\u6570\uff1a\u4e0d\u542b\u524d\u5bfc\u96f6\u4e14\u76f8\u90bb\u4e24\u4e2a\u6570\u5b57\u4e4b\u5dee\u81f3\u5c11\u4e3a \\(2\\) \u7684\u6b63\u6574\u6570\u88ab\u79f0\u4e3a Windy \u6570\u3002 \u95ee\u4f60 \\(L \\sim R\\) \u5f53\u4e2d\u6709\u591a\u5c11\u4e2a Windy \u6570\u3002 \\(1\\le L \\le R \\le 2\\times 10^9\\) \uff08\u6211\u6700\u5f00\u59cb\u6709\u4e2a\u9519\uff0c\u533a\u95f4\u662f\u9ed8\u8ba4 \\(L\\not=R\\) \u7684\uff0c\u6240\u4ee5\u5982\u679c\u8981\u76f8\u7b49\u5c31\u4e0d\u80fd\u5199\u201c\u533a\u95f4\u201d\uff0c\u67d0\u6b21\u6a21\u62df\u8d5b\u7684\u9898\u4e5f\u56e0\u4e3a\u8fd9\u4e2a\u5dee\u70b9\u88ab\u55b7\uff08 \u5957\u677f\u5b50\u5c31\u884c\u4e86\uff0c\u6839\u672c\u4e0d\u9700\u8981\u8fc7\u591a\u7684\u601d\u8003\u3002 \u76f4\u63a5\u4e0a\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 /* * @Author: black_trees <black_trees@foxmail.com> * @Date: 2022-02-12 16:32:04 * @Last Modified by: black_trees <black_trees@foxmail.com> * @Last Modified time: 2022-02-12 17:08:53 */ /* * READ THIS BEFORE YOU WRITE YOUR CODE * ==================================== * @ Read the description carefully! * @ Pay attention to the data domain. * @ Keep calm. * @ Write down your thought on your draft. * @ Keep your mind clear. * @ Stabilize the coding speed. * ==================================== * READ THIS AGAIN BEFORE YOU START !!! */ #include <bits/stdc++.h> using namespace std ; constexpr int si = 15 ; int L , R ; std :: vector < int > dight ; int f [ si ][ si ]; inline int dfs ( int x , int y , int st , int limit ){ if ( ! x ) return 1 ; if ( ! limit && f [ x ][ y ] != -1 ) return f [ x ][ y ]; int res = 0 , up = 9 ; if ( limit ) up = dight [ x -1 ]; for ( register int i = 0 ; i <= up ; ++ i ){ if ( abs ( i - y ) < 2 ) continue ; if ( st && i == 0 ) res += dfs ( x -1 , -2 , 1 , limit && i == up ); else res += dfs ( x -1 , i , 0 , limit && i == up ); } if ( ! st && ! limit ) f [ x ][ y ] = res ; return res ; } inline int solve ( int n ){ dight . clear (); while ( n ) dight . push_back ( n % 10 ), n /= 10 ; return dfs ( dight . size (), -2 , 1 , 1 ); // \u586b -2 \u662f\u4e3a\u4e86\u8ba9\u5f00\u59cb\u7684\u65f6\u5019\u4e0d\u7ba1\u9009\u4ec0\u4e48\u6570\u90fd\u53ef\u4ee5\u6ee1\u8db3\u5dee\u5927\u4e8e2\u7684\u6761\u4ef6\u3002 } int main (){ memset ( f , -1 , sizeof f ), scanf ( \"%d%d\" , & L , & R ); return printf ( \"%d \\n \" , solve ( R ) - solve ( L -1 )), 0 ; } \u8fd8\u6709\u51e0\u4e2a\u9700\u8981\u7279\u6b8a\u6ce8\u610f\u7684\u70b9\uff1a \u6839\u636e\u72b6\u6001\u6765\u5f00\u8bb0\u5fc6\u5316\u7684\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u4e0d\u8981\u5f00\u5c0f\u4e86\u3002 \u6e05\u7a7a\u8bb0\u5fc6\u5316\u6570\u7ec4\u7684\u65f6\u673a\u4e5f\u9700\u8981\u628a\u63e1\u3002 \u5982\u679c\u4e0d\u7ba1\u600e\u4e48\u8be2\u95ee\u9700\u8981\u7684\u72b6\u6001\u662f\u4e00\u6837\u7684\uff0c\u90a3\u4e48\u53ef\u4ee5\u5728 main() \u7684\u6700\u5f00\u5934\u5199 memset \u5982\u679c\u6bcf\u4e00\u4e2a\u8be2\u95ee\u5e95\u4e0b\u4f1a\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u8981\u5728 solve \u6216\u8005\u5f53\u524d\u8be2\u95ee\u5e95\u4e0b\u5199 memset \u3002","title":"\u6570\u4f4dDP"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E4%BD%8DDP/#dp","text":"","title":"\u6570\u4f4dDP"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E4%BD%8DDP/#introduction","text":"\u8fd9\u4e00\u7c7b\u95ee\u9898\u90fd\u662f\u8be2\u95ee\u67d0\u4e2a\u533a\u95f4 \\([L,R]\\) \u5f53\u4e2d\u6ee1\u8db3\u67d0\u4e2a\u6761\u4ef6\u7684\u6570\u7684\u4e2a\u6570\u3002 \u5e38\u89c1\u7684\u9650\u5236\u6709\uff1a \u5404\u4f4d\u6570\u5b57\u548c\u4e0d\u80fd\u662f\u67d0\u4e2a\u6574\u6570\u7684\u500d\u6570 \u67d0\u4e00\u4e2a\u6570\u5b57\u4e0d\u80fd\u51fa\u73b0 \u6570\u5b57\u5fc5\u987b\u6309\u7167\u5347\u5e8f\u6392\u5217 \u4e0d\u80fd\u51fa\u73b0\u67d0\u4e24\u4e2a\u8fde\u7eed\u7684\u6570\u5b57","title":"Introduction"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E4%BD%8DDP/#trick","text":"\u5957\u8def\u65e0\u975e\u4e24\u6b65\uff1a \u5148\u628a \\(F(L),F(R)\\) \u7b97\u51fa\u6765\uff0c\u7b54\u6848\u5c31\u662f \\(F(R)-F(L-1)\\) \u3002 \u5176\u4e2d \\(F(X)\\) \u8868\u793a \\([1,X]\\) \u5f53\u4e2d\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u7684\u4e2a\u6570\u3002 \u8003\u8651\u6bcf\u4e00\u4f4d\u600e\u4e48\u586b\uff0c\u662f\u5426\u6709\u4e0a\u754c\u9650\u5236\uff08\u5229\u7528\u6811\u7684\u601d\u60f3\uff09 \u4e0a\u754c\u9650\u5236\u662f\u8fd9\u6837\u7684\uff1a\u6bd4\u5982\u4f60\u73b0\u5728\u8981\u6c42 \\(F(n)\\) \u3002 \u5e76\u4e14 \\(n=12345678\\) \u6211\u4eec\u4ece\u6700\u9ad8\u4f4d\uff0c\u4e5f\u5c31\u662f \\(8\\) \u6240\u5904\u7684\u4f4d\u7f6e\u5f00\u59cb\u5904\u7406\u3002 \u90a3\u4e48\u8fd9\u4e00\u4f4d\u5c31\u6709\u4e24\u79cd\u60c5\u51b5\uff1a \u8fd9\u4e00\u4f4d\u586b \\(8\\) \uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0b\u4e00\u4f4d\u53ea\u80fd\u586b \\(0 \\sim 7\\) \u3002 \u8fd9\u4e00\u4f4d\u586b \\(0\\sim 7\\) \u7684\u67d0\u4e00\u4e2a\u6570\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0b\u4e00\u4f4d\uff0c\u5305\u62ec\u4e4b\u540e\u7684\u6240\u6709\u4f4d\u60f3\u600e\u4e48\u586b\u600e\u4e48\u586b\uff08 \\(0 \\sim 9\\) \uff09 \u200b \u7b2c\u4e00\u79cd\u60c5\u51b5\u5c31\u662f\u6709\u4e0a\u754c\u9650\u5236\u7684\u3002 \u5f53\u7136\uff0c\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u7ec6\u8282\uff0c\u5c31\u76f4\u63a5\u770b\u4e00\u4efd\u4f2a\u4ee3\u7801\u5427 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 1 function dfs ( \u5f53\u524d\u4f4d\u6570 x , \u5f53\u524d\u72b6\u6001 y , \u524d\u5bfc\u96f6\u9650\u5236 st , \u4e0a\u754c\u9650\u5236 limit ) : 2 if \u5230\u8fbe\u8fb9\u754c then 3 \u8fd4\u56de\u8fb9\u754c\u7684\u7b54\u6848 4 5 if \u6ca1\u6709\u4e0a\u754c\u9650\u5236 and \u5f53\u524d\u7684\u72b6\u6001\u5df2\u7ecf\u8bb0\u5fc6\u5316\u8fc7 then 6 \u8fd4\u56de\u8bb0\u5f55\u7684\u7b54\u6848 7 8 variable result = 0 # \u8bb0\u5f55\u7b54\u6848 9 10 variable up = 9 # \u5f53\u524d\u4f4d\u586b\u6570\u7684\u4e0a\u9650 11 if \u6709\u4e0a\u754c\u9650\u5236 then 12 up = \u5f53\u524d\u4f4d\u5728 n \u5f53\u4e2d\u7684\u6570\u5b57 # n \u662f\u8981\u6c42\u7684 F ( n ) \u7684\u81ea\u53d8\u91cf 13 14 for \u679a\u4e3e\u5f53\u524d\u4f4d\u7684\u586b\u6570\u503c from 0 to up : 15 if \u5f53\u524d\u4f4d\u586b\u7684\u6570\u4e0d\u7b26\u5408\u9650\u5236 then 16 continue 17 if \u6709\u524d\u5bfc\u96f6\u9650\u5236 and \u5f53\u524d\u586b\u5199\u7684\u662f 0 then 18 result += dfs ( x - 1 , \u4e0b\u4e00\u4e2a\u72b6\u6001 , true , \u662f\u5426\u89e6\u78b0\u4e0a\u754c\u9650\u5236 ) 19 else then 20 result += dfs ( x - 1 , \u4e0b\u4e00\u4e2a\u72b6\u6001 , false , \u662f\u5426\u89e6\u78b0\u4e0a\u754c\u9650\u5236 ) 21 22 if \u6ca1\u6709\u524d\u5bfc\u96f6\u9650\u5236 and \u6ca1\u6709\u4e0a\u754c\u9650\u5236 then 23 \u8bb0\u5f55\u5f53\u524d\u72b6\u6001\u7684\u7b54\u6848 f [ x ][ y ] 24 25 \u8fd4\u56de\u7b54\u6848 result 26 27 28 29 function solve ( \u8981\u6c42\u7684 F \u7684\u81ea\u53d8\u91cf n ) 30 \u5b58\u50a8\u6bcf\u4e00\u4f4d\u6570\u5b57\u7684 vector \u6e05\u7a7a 31 while n ! = 0 then 32 vector <== n % base # base \u8868\u793a\u662f\u54ea\u4e00\u4e2a\u8fdb\u5236 33 n /= base 34 \u8fd4\u56de\u5bf9\u5e94\u72b6\u6001\u7684\u7b54\u6848\uff08\u8c03\u7528 dfs \uff09 \u4ece\u4e0a\u5230\u4e0b\u89e3\u91ca\u4e00\u4e0b\uff1a Line1 \uff1a\u5f53\u524d\u72b6\u6001 \\(y\\) \u9700\u8981\u7531\u9898\u76ee\u7684\u9650\u5236\u51b3\u5b9a\uff0c\u6bd4\u5982 \u4e0a\u4e00\u4e2a\u586b\u5199\u7684/\u5f53\u524d\u7684\u6570\u4f4d\u603b\u548c/\u5df2\u7ecf\u586b\u4e86\u591a\u5c11\u4f4d \u8fd9\u79cd\u9650\u5236 Line2 \uff1a\u8fb9\u754c\u4e00\u822c\u662f \\(x=0\\) \uff0c\u6709\u7684\u65f6\u5019\u9700\u8981\u5224\u65ad\u5f53\u524d\u72b6\u6001\u662f\u5426\u5408\u6cd5\uff08\u6bd4\u5982\u662f\u5426\u662f\u67d0\u4e2a\u6570\u7684\u500d\u6570\u4e4b\u7c7b\u7684\uff09 Line3 \uff1a\u8fb9\u754c\u7684\u7b54\u6848\u8981\u770b\u60c5\u51b5\u800c\u5b9a\uff0c\u6709\u7684\u65f6\u5019\u662f \\(0,1\\) \u6709\u7684\u65f6\u5019\u662f\u5f53\u524d\u586b\u51fa\u6765\u7684\u8fd9\u4e2a\u6570\u7684\u5e73\u65b9\u3002 Line5 \uff1a\u8fd9\u91cc\u4e00\u822c\u4f7f\u7528\u4e24\u4e2a bool \u53d8\u91cf \\(st,limit\\) \uff0c\u76f4\u63a5\u5224\u65ad\u5c31\u53ef\u4ee5\u4e86\u3002 Line12 \uff1a\u6211\u8bb0\u5f55\u6bcf\u4e00\u4f4d\u7684\u6570\u5b57\u4e00\u822c\u7528 vector \u76f4\u63a5 pb\uff0c\u6240\u4ee5\u5982\u679c\u5f53\u524d\u4f4d\u662f \\(x\\) \uff0c\u90a3\u4e48\u8fd9\u91cc \\(up=dight_{x-1}\\) \u5373\u53ef\u3002 Line15 \uff1a\u8fd9\u4e2a\u9700\u8981\u770b\u9898\u76ee\u9650\u5236\uff0c\u6bd4\u5982\u6709\u6ca1\u6709\u54ea\u4e00\u4e2a\u6570\u4e0d\u80fd\u51fa\u73b0\uff0c\u54ea\u4e24\u4e2a\u6570\u4e0d\u80fd\u8fde\u7eed\u51fa\u73b0\uff08\u8fd9\u4e2a\u9700\u8981\u5728\u5f00\u59cb\u7684\u65f6\u5019\u8bb0\u5f55\u4e0a\u4e00\u4f4d\uff09 Line18 \uff1a\u4f7f\u7528 limit && i==up \u8fd9\u4e2a\u8bed\u53e5\u5373\u53ef\u3002 Line34 \uff1a\u8fd9\u4e2a\u4e5f\u662f\u8981\u770b\u9898\u76ee\u9650\u5236\u800c\u5b9a\uff0c\u4e0d\u8fc7\u6709\u51e0\u4e2a\u901a\u7528\u7684\u7ec6\u8282\u9700\u8981\u6ce8\u610f\u3002 \u6700\u5f00\u59cb\uff0c\u5982\u679c\u662f\u4ece\u9ad8\u4f4d\u5f00\u59cb\u641c\u7d22\uff0c\u9700\u8981\u628a limit \u8bbe\u7f6e\u4e3a true \u3002 \u56e0\u4e3a\u6700\u9ad8\u4f4d\u672c\u5c31\u6709\u9650\u5236\uff08\u540e\u9762\u7684\u5927\u5c0f\u4e0d\u80fd\u968f\u4fbf\u586b\u4e86\uff09\u3002 \u4ece\u9ad8\u4f4d\u5f00\u59cb\u641c\u7d22\uff0c\u90a3\u4e48\u5f00\u59cb\u7684\u65f6\u5019\u8981\u8bbe\u7f6e\u524d\u5bfc\u96f6\u9650\u5236\u4e3a true\u3002 \u56e0\u4e3a\u524d\u5bfc\u96f6\u672c\u6765\u5c31\u4f1a\u5b58\u5728\u4e8e\u6700\u9ad8\u4f4d\u3002 \u5982\u679c \\(y\\) \u8bb0\u5f55\u7684\u662f\u4e0a\u4e00\u6b65\u586b\u7684\u662f\u4ec0\u4e48\uff0c\u4e00\u822c\u4f1a\u586b \\(0\\) \uff0c\u5f53\u7136\uff0c\u6709\u4e2a\u9898\u586b\u7684\u662f \\(-2\\) \uff0c\u8fd9\u4e2a\u6280\u5de7\u5230\u65f6\u5019\u518d\u8bf4\u3002","title":"Trick"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%95%B0%E4%BD%8DDP/#problem","text":"\u6765\u4e00\u9053\u7ecf\u5178\u9898\uff08\u5305\u542b\u6240\u6709\u8981\u7d20\uff09\uff1a [SCOI2009] Windy\u6570\uff1a\u4e0d\u542b\u524d\u5bfc\u96f6\u4e14\u76f8\u90bb\u4e24\u4e2a\u6570\u5b57\u4e4b\u5dee\u81f3\u5c11\u4e3a \\(2\\) \u7684\u6b63\u6574\u6570\u88ab\u79f0\u4e3a Windy \u6570\u3002 \u95ee\u4f60 \\(L \\sim R\\) \u5f53\u4e2d\u6709\u591a\u5c11\u4e2a Windy \u6570\u3002 \\(1\\le L \\le R \\le 2\\times 10^9\\) \uff08\u6211\u6700\u5f00\u59cb\u6709\u4e2a\u9519\uff0c\u533a\u95f4\u662f\u9ed8\u8ba4 \\(L\\not=R\\) \u7684\uff0c\u6240\u4ee5\u5982\u679c\u8981\u76f8\u7b49\u5c31\u4e0d\u80fd\u5199\u201c\u533a\u95f4\u201d\uff0c\u67d0\u6b21\u6a21\u62df\u8d5b\u7684\u9898\u4e5f\u56e0\u4e3a\u8fd9\u4e2a\u5dee\u70b9\u88ab\u55b7\uff08 \u5957\u677f\u5b50\u5c31\u884c\u4e86\uff0c\u6839\u672c\u4e0d\u9700\u8981\u8fc7\u591a\u7684\u601d\u8003\u3002 \u76f4\u63a5\u4e0a\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 /* * @Author: black_trees <black_trees@foxmail.com> * @Date: 2022-02-12 16:32:04 * @Last Modified by: black_trees <black_trees@foxmail.com> * @Last Modified time: 2022-02-12 17:08:53 */ /* * READ THIS BEFORE YOU WRITE YOUR CODE * ==================================== * @ Read the description carefully! * @ Pay attention to the data domain. * @ Keep calm. * @ Write down your thought on your draft. * @ Keep your mind clear. * @ Stabilize the coding speed. * ==================================== * READ THIS AGAIN BEFORE YOU START !!! */ #include <bits/stdc++.h> using namespace std ; constexpr int si = 15 ; int L , R ; std :: vector < int > dight ; int f [ si ][ si ]; inline int dfs ( int x , int y , int st , int limit ){ if ( ! x ) return 1 ; if ( ! limit && f [ x ][ y ] != -1 ) return f [ x ][ y ]; int res = 0 , up = 9 ; if ( limit ) up = dight [ x -1 ]; for ( register int i = 0 ; i <= up ; ++ i ){ if ( abs ( i - y ) < 2 ) continue ; if ( st && i == 0 ) res += dfs ( x -1 , -2 , 1 , limit && i == up ); else res += dfs ( x -1 , i , 0 , limit && i == up ); } if ( ! st && ! limit ) f [ x ][ y ] = res ; return res ; } inline int solve ( int n ){ dight . clear (); while ( n ) dight . push_back ( n % 10 ), n /= 10 ; return dfs ( dight . size (), -2 , 1 , 1 ); // \u586b -2 \u662f\u4e3a\u4e86\u8ba9\u5f00\u59cb\u7684\u65f6\u5019\u4e0d\u7ba1\u9009\u4ec0\u4e48\u6570\u90fd\u53ef\u4ee5\u6ee1\u8db3\u5dee\u5927\u4e8e2\u7684\u6761\u4ef6\u3002 } int main (){ memset ( f , -1 , sizeof f ), scanf ( \"%d%d\" , & L , & R ); return printf ( \"%d \\n \" , solve ( R ) - solve ( L -1 )), 0 ; } \u8fd8\u6709\u51e0\u4e2a\u9700\u8981\u7279\u6b8a\u6ce8\u610f\u7684\u70b9\uff1a \u6839\u636e\u72b6\u6001\u6765\u5f00\u8bb0\u5fc6\u5316\u7684\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u4e0d\u8981\u5f00\u5c0f\u4e86\u3002 \u6e05\u7a7a\u8bb0\u5fc6\u5316\u6570\u7ec4\u7684\u65f6\u673a\u4e5f\u9700\u8981\u628a\u63e1\u3002 \u5982\u679c\u4e0d\u7ba1\u600e\u4e48\u8be2\u95ee\u9700\u8981\u7684\u72b6\u6001\u662f\u4e00\u6837\u7684\uff0c\u90a3\u4e48\u53ef\u4ee5\u5728 main() \u7684\u6700\u5f00\u5934\u5199 memset \u5982\u679c\u6bcf\u4e00\u4e2a\u8be2\u95ee\u5e95\u4e0b\u4f1a\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u8981\u5728 solve \u6216\u8005\u5f53\u524d\u8be2\u95ee\u5e95\u4e0b\u5199 memset \u3002","title":"Problem"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/","text":"\u659c\u7387\u4f18\u5316DP \u00b6 \u8fd9\u4e00\u7c7b\u95ee\u9898\u548c\u5355\u8c03\u961f\u5217\u4f18\u5316DP\u6709\u5171\u540c\u7684\u5730\u65b9\u3002 \u53ef\u4ee5\u7528\u7c7b\u4f3c\u7684\u601d\u60f3\u601d\u8003\u5176\u4e2d\u7684\u4e00\u90e8\u5206\u5185\u5bb9\u3002 \u8003\u8651\u5355\u8c03\u961f\u5217\u4f18\u5316DP\u91cc\u9762\u90a3\u4e2a 1D1D \u7684\u5f0f\u5b50\u3002 \\[f_{i}=\\min\\limits_{L(i)\\le j \\le R(i)}\\{f_j+val(i,j)\\}\\] \u5176\u4e2d \\(val(i,j)\\) \u662f\u5173\u4e8e \\(i,j\\) \u7684\u591a\u9879\u5f0f\u3002 \u5e76\u4e14\u53ef\u4ee5\u5206\u88c2\u4e3a\u4e24\u4e2a\u5206\u522b\u53ea\u548c \\(i,j\\) \u76f8\u5173\u7684\u90e8\u5206\u3002 \u4f46\u5982\u679c \\(val(i,j)\\) \u5f53\u4e2d\u6709\u540c\u65f6\u548c \\(i,j\\) \u76f8\u5173\u7684\u90e8\u5206\uff08\u4e58\u79ef\u548c\u505a\u9664\u6cd5\uff09\uff0c\u90a3\u4e48\u5355\u8c03\u961f\u5217\u4f18\u5316DP\u5c31\u4e0d\u518d\u9002\u7528\u3002 \u6b64\u65f6\u9700\u8981\u4f7f\u7528\u659c\u7387\u4f18\u5316DP\u3002 \u95ee\u9898\uff1a \u00b6 \\(n\\) \u4e2a\u4efb\u52a1\u6392\u6210\u4e00\u4e2a\u5e8f\u5217\u5728\u4e00\u53f0\u673a\u5668\u4e0a\u7b49\u5f85\u5b8c\u6210\uff08\u987a\u5e8f\u4e0d\u5f97\u6539\u53d8\uff09\uff0c\u8fd9 \\(n\\) \u4e2a\u4efb\u52a1\u88ab\u5206\u6210\u82e5\u5e72\u6279\uff0c\u6bcf\u6279\u5305\u542b\u76f8\u90bb\u7684\u82e5\u5e72\u4efb\u52a1\u3002 \u4ece\u96f6\u65f6\u523b\u5f00\u59cb\uff0c\u8fd9\u4e9b\u4efb\u52a1\u88ab\u5206\u6279\u52a0\u5de5\uff0c\u7b2c \\(i\\) \u4e2a\u4efb\u52a1\u5355\u72ec\u5b8c\u6210\u6240\u9700\u7684\u65f6\u95f4\u4e3a \\(t_i\\) \u3002\u5728\u6bcf\u6279\u4efb\u52a1\u5f00\u59cb\u524d\uff0c\u673a\u5668\u9700\u8981\u542f\u52a8\u65f6\u95f4 \\(s\\) \uff0c\u800c\u5b8c\u6210\u8fd9\u6279\u4efb\u52a1\u6240\u9700\u7684\u65f6\u95f4\u662f\u5404\u4e2a\u4efb\u52a1\u9700\u8981\u65f6\u95f4\u7684\u603b\u548c\uff08\u540c\u4e00\u6279\u4efb\u52a1\u5c06\u5728\u540c\u4e00\u65f6\u523b\u5b8c\u6210\uff09\u3002 \u6bcf\u4e2a\u4efb\u52a1\u7684\u8d39\u7528\u662f\u5b83\u7684\u5b8c\u6210\u65f6\u523b\u4e58\u4ee5\u4e00\u4e2a\u8d39\u7528\u7cfb\u6570 \\(c_i\\) \u3002\u8bf7\u786e\u5b9a\u4e00\u4e2a\u5206\u7ec4\u65b9\u6848\uff0c\u4f7f\u5f97\u603b\u8d39\u7528\u6700\u5c0f\u3002 \u505a\u6cd51 - \u66b4\u529b \u00b6 \u4fdd\u8bc1 \\(n \\le 500,1\\le s \\le 50,1\\le t_i,c_i \\le 100\\) \u8003\u8651\u6700\u66b4\u529b\u7684\u65b9\u5f0f\uff0c\u8bbe \\(f_{i,j}\\) \u8868\u793a\u524d \\(i\\) \u4e2a\u4efb\u52a1\uff0c\u5206\u6210 \\(j\\) \u6279\u6267\u884c\u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u662f\u603b\u8d39\u7528\u6700\u5c0f\u3002 \u679a\u4e3e\u4e0a\u4e00\u6279\u4efb\u52a1\u7684\u6700\u540e\u4e00\u4e2a\u70b9\u5373\u53ef\u3002 \\(f_{i,j}=\\min\\limits_{0\\le k < i}\\{f_{k,j-1}+c[k+1\\sim i]\\times (t[k+1\\sim i]+s\\times j)\\}\\) \u5904\u7406\u524d\u7f00\u548c\u53ef\u4ee5\u505a\u5230 \\(\\text{O}(n^3)\\) \u505a\u6cd52 - \u8d39\u7528\u63d0\u524d\u8ba1\u7b97 \u00b6 \u4fdd\u8bc1 \\(n\\le 5000,1\\le s \\le 50,1\\le t_i,c_i \\le 100\\) \u53d1\u73b0\u4e0a\u4e00\u4e2a\u65b9\u7a0b\u7684\u74f6\u9888\u5728\u4e8e \\(j\\) \uff0c\u9700\u8981\u77e5\u9053\u542f\u52a8\u4e86\u591a\u5c11\u6b21\uff0c\u56e0\u4e3a \\(s\\) \u9020\u6210\u7684\u8d21\u732e\u4f1a\u548c\u542f\u52a8\u6b21\u6570\u6210\u6b63\u6bd4\u3002 \u53d1\u73b0\u5982\u679c\u4e00\u6279\u4efb\u52a1\u786e\u5b9a\u88ab\u5206\u5728\u4e00\u8d77\uff0c\u90a3\u4e48\u4e4b\u540e\u7684\u6240\u6709\u4efb\u52a1\u7684\u7ed3\u675f\u65f6\u95f4\u81ea\u7136\u90fd\u4f1a\u589e\u52a0 \\(s\\) \u3002 \u6240\u4ee5\u53ef\u4ee5\u5728\u8f6c\u79fb\u7684\u65f6\u5019\u5148\u628a\u8fd9\u4e2a \\(s\\) \u52a0\u5230\u540e\u9762\uff08\u8d39\u7528\u63d0\u524d\u8ba1\u7b97\uff09 \u56e0\u4e3a\u9898\u76ee\u6ca1\u6709\u5206\u591a\u5c11\u7ec4\u7684\u9650\u5236\uff0c\u8bbe \\(f_i\\) \u8868\u793a\u628a\u524d \\(i\\) \u4e2a\u4efb\u52a1\u5206\u6210\u82e5\u5e72\u4e2a\u6279\u6b21\u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u6700\u5c0f\u82b1\u8d39\u3002 \u679a\u4e3e\u4e0a\u4e00\u7ec4\u7684\u6700\u540e\u7aef\u70b9\u53ef\u4ee5\u5f97\u5230\uff1a \\(f_i=\\min\\limits_{0\\le j < i}\\{f_j+s\\times c[j+1\\sim n]+t[1\\sim i] \\times c[j+1 \\sim i]\\}\\) \u9884\u5904\u7406\u524d\u7f00\u548c\u53ef\u4ee5\u505a\u5230 \\(\\text{O}(n^2)\\) \u505a\u6cd53 - \u659c\u7387\u4f18\u5316 \u00b6 \u4fdd\u8bc1 \\(n \\le 3\\times 10^5,1\\le s \\le 512,1\\le t_i,c_i \\le 512\\) \u8981\u6c42\u65f6\u95f4\u590d\u6742\u5ea6 \\(\\text{O}(n)\\) \u3002 \u53d1\u73b0\u8fd9\u4e2a\u65b9\u7a0b\u5c31\u662f 1D1D \u7684\u5f62\u5f0f\uff0c\u7528\u524d\u7f00\u548c\u7684\u65b9\u5f0f\u91cd\u65b0\u5199\u4e00\u4e0b\u8fd9\u4e2a\u65b9\u7a0b\uff1a \\(f_i=\\min\\limits_{0\\le j < i}\\{f_j+s\\times (sumc[n]-sumc[j])+sumt[i]\\times(sumc[i]-sumc[j])\\}\\) \u53d1\u73b0\u540e\u9762\u7684 \\(val(i,j)\\) \u8fd9\u4e2a\u591a\u9879\u5f0f\u662f \\(s\\times (sumc[n]-sumc[j])+sumt[i]\\times(sumc[i]-sumc[j])\\) \u628a \\(i\\) \u76f8\u5173\u9879\uff0c \\(j\\) \u76f8\u5173#\u9879\uff0c \\(i,j\\) \u76f8\u5173\u9879\u5206\u79bb\uff1a \u5e38\u9879\uff1a \\(s\\times sumc[n]\\) \\(i\\) \u76f8\u5173\u9879\uff1a \\(sumt[i]\\times sumc[i]\\) \\(j\\) \u76f8\u5173\u9879\uff1a$ -s\\times sumc[j]$ \\(i,j\\) \u76f8\u5173\u9879\uff1a \\(-sumt[i]\\times sumc[j]\\) \u628a\u5916\u5c42\u5faa\u73af\u56fa\u5b9a\u65f6\u5019\u7684\u5e38\u91cf\u63d0\u51fa\u53bb \\(f_i=s\\times sumc[n]+sumt[i]\\times sumc[i]+\\min\\limits_{0 \\le j < i}\\{f_j -s\\times sumc[j]-sumt[i]\\times sumc[j]\\}\\) \u628a \\(\\min\\) \u53bb\u6389\uff0c\u628a\u5173\u4e8e \u51b3\u7b56\u70b9 \\(j\\) \u7684\u770b\u4f5c \u53d8\u91cf \u3002 \\(f_j=(s+sumt[i])\\times sumc[j]+f_i-sumt[i]\\times sumc[i]-s\\times sumc[n]\\) \u5982\u679c\u628a \\(f_j\\) \u5f53\u4f5c \\(y\\) \uff0c \\(sumc[j]\\) \u770b\u4f5c \\(x\\) \u3002 \u53ef\u4ee5\u5f97\u5230\u4e00\u6761\u76f4\u7ebf \\(y=kx+b\\) \u5176\u4e2d \\(b=f_i-sumt[i]\\times sumc[i]-s\\times sumc[n]\\) \u628a \\(j=0\\to n-1\\) \u7684 \u6bcf\u4e2a \u4e8c\u5143\u7ec4 \\((sumc[j],f_j)\\) \u5f53\u4f5c\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e0a\u7684\u4e00\u4e2a\u70b9\uff08\u8fd9\u5c31\u662f\u8981\u53bb\u6389 \\(\\min\\) \u7684\u539f\u56e0\uff09 \u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u8fd9\u6837\u7684\u4e00\u4e2a\u4e1c\u897f\uff1a \u53d1\u73b0\u76f4\u7ebf \\(y=kx+b\\) \u7684\u659c\u7387\u662f \\((s+sumt[i])\\) \u662f\u4e00\u4e2a\u5173\u4e8e \\(i\\) \u7684\u53d8\u91cf\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u4e0d\u540c\u7684 \\(i\\) \uff0c\u6211\u4eec\u5f97\u5230\u7684\u659c\u7387\u662f\u4e0d\u4e00\u6837\u7684\u3002 \u5f53\u7136\u5982\u679c\u51fa\u73b0 \\(sumt[i]\\) \u5148\u589e\u518d\u51cf\u5c11\u5bfc\u81f4\u6709\u4e24\u4e2a\u4e0d\u540c\u7684 \\(i\\) \u7684 \\(sumt[i]\\) \u4e00\u6837\uff0c\u662f\u6ca1\u6709\u5f71\u54cd\u7684\u3002 \u56de\u60f3\u4e00\u4e0b\u95ee\u9898\uff1a\u6700\u5c0f\u5316 \\(f_n\\) \uff0c\u5bf9\u5e94\u5230\u6bcf\u4e2a\u51b3\u7b56\u7684\u95ee\u9898\u5c31\u662f\u6700\u5c0f\u5316 \\(f_i\\) \u3002 \u800c \\(f_i\\) \u5904\u4e8e\u622a\u8ddd \\(b\\) \u4e4b\u4e2d\uff0c\u5f53 \\(y,x,k\\) \u56fa\u5b9a\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u8ba9 \\(b\\) \u6700\u5c0f\uff0c \\(f_i\\) \u5c31\u6700\u5c0f\u3002 \u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(i\\) \uff0c\u62ff\u4e00\u6761\u659c\u7387\u4e3a \\(k\\) \u7684\u76f4\u7ebf\u4ece\u4e0b\u5f80\u4e0a\u5e73\u79fb\uff0c\u9047\u5230\u7684\u7b2c\u4e00\u4e2a\u70b9\u4e00\u5b9a\u662f\u6700\u4f18\u89e3\u3002 \u4f46\u662f\u5c31\u7b97\u8fd9\u6837\uff0c\u8fd8\u662f\u9700\u8981\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684 \\(j\\) \uff0c\u590d\u6742\u5ea6\u4f9d\u65e7\u662f \\(n^2\\) \u7ea7\u522b\u3002 \u90a3\u4e48\u600e\u4e48\u4f18\u5316\uff1f \u968f\u4fbf\u627e\u4e09\u4e2a \\(x\\) \u5750\u6807\u9012\u589e\u7684\u70b9 \\(i,j,k\\) \u8fde\u63a5 \\(i\\to j,j \\to k\\) \u53d1\u73b0\u53ea\u53ef\u80fd\u6709\u5982\u4e0b\u7684\u4e24\u79cd\u60c5\u51b5\uff08\u4e09\u70b9\u5171\u7ebf\u7684\u4e0d\u7b97\uff09\u3002 \u53d1\u73b0\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c \\(j\\) \u65e0\u8bba\u5982\u4f55\u90fd\u4e0d\u53ef\u80fd\u6210\u4e3a\u6700\u4f18\u51b3\u7b56\u3002 \u5f62\u5f0f\u5316\u7684\u63cf\u8ff0\u5c31\u662f \\(k_{i,j}>k_{j,k}\\) \uff0c\u90a3\u4e48 \\(j\\) \u4e0d\u53ef\u80fd\u6210\u4e3a\u6700\u4f18\u51b3\u7b56\u3002 \u6240\u4ee5\u53ef\u4ee5\u5904\u7406\u51fa\u6240\u6709\u7684\u4e0d\u53ef\u80fd\u6210\u4e3a\u6700\u4f18\u51b3\u7b56\u7684\u51b3\u7b56\u70b9\uff0c\u7136\u540e\u8f6c\u79fb\u5c31\u5728\u5269\u4e0b\u7684\u90e8\u5206\u8fdb\u884c\u5373\u53ef\u3002 \u5b9e\u9645\u4e0a\uff0c\u5728\u672c\u9898\u5c31\u662f\u5728\u7ef4\u62a4\u4e00\u4e2a \\(x\\) \u5355\u8c03\u9012\u589e\uff0c \\(k\\) \u5355\u8c03\u9012\u589e\u7684 \u4e0b\u51f8\u58f3 \uff0c \u5177\u4f53\u5982\u4f55\u7ef4\u62a4\u8fd9\u4e2a\u4e0b\u51f8\u58f3\u5462\uff1f \u8003\u8651\u4ece \\(0 \\to n-1\\) \u66b4\u529b\u626b\u4e00\u6b21\uff0c\u6bcf\u6b21\u65b0\u589e\u4e00\u4e2a\u70b9\u90fd\u9700\u8981\u628a\u5b83\u548c\u4e0a\u4e00\u4e2a\u88ab\u52a0\u5165\u7684\u70b9\uff0c\u4e0a\u4e0a\u4e2a\u88ab\u52a0\u5165\u7684\u70b9\u76f8\u4e92\u4e4b\u95f4\u8fde\u8fb9\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u66f4\u4f18\uff0c\u53bb\u6389\u4e0a\u4e00\u4e2a\uff0c\u628a\u8fd9\u4e2a\u70b9\u653e\u8fdb\u6765\u3002 GIF\uff1a \u56e0\u4e3a\u5728\u672c\u9898\uff0c\u659c\u7387\u5728 \\(i\\) \u589e\u52a0\u7684\u65f6\u5019\u4e00\u5b9a\u589e\u52a0\uff08\u56e0\u4e3a \\(sumt[i]\\) \u80af\u5b9a\u5355\u8c03\u4e0a\u5347\uff09 \u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a\u5355\u8c03\u961f\u5217\uff0c\u628a\u524d\u9762\u5df2\u7ecf\u51b3\u7b56\u8fc7\u7684\u5220\u9664\uff0c\u5728\u540e\u9762\u8fdb\u884c\u51b3\u7b56\u3002 \u4e5f\u5c31\u662f\u961f\u5934\u548c\u961f\u5934\u52a0\u4e00\u7684\u659c\u7387\u5c0f\u4e8e \\(s+sumt[i]\\) \uff0c\u5c31\u628a\u961f\u5934\u5f39\u51fa\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include <bits/stdc++.h> using namespace std ; constexpr int si = 3e5 + 10 ; #define ll long long ll f [ si ], sumt [ si ], sumc [ si ]; int q [ si ], n , S ; int main () { scanf ( \"%d%d\" , & n , & S ); for ( register int i = 1 ; i <= n ; i ++ ){ int t , c ; scanf ( \"%d%d\" , & t , & c ); sumt [ i ] = sumt [ i -1 ] + t , sumc [ i ] = sumc [ i -1 ] + c ; } memset ( f , 0x3f , sizeof ( f )), f [ 0 ] = 0 ; int head = 1 , tail = 1 ; q [ 1 ] = 0 ; for ( register int i = 1 ; i <= n ; i ++ ){ while ( head < tail && ( f [ q [ head + 1 ]] - f [ q [ head ]]) <= ( S + sumt [ i ]) * ( sumc [ q [ head + 1 ]] - sumc [ q [ head ]])) head ++ ; f [ i ] = f [ q [ head ]] - ( S + sumt [ i ]) * sumc [ q [ head ]] + sumt [ i ] * sumc [ i ] + S * sumc [ n ]; while ( head < tail && ( f [ q [ tail ]] - f [ q [ tail -1 ]]) * ( sumc [ i ] - sumc [ q [ tail ]]) >= ( f [ i ] - f [ q [ tail ]]) * ( sumc [ q [ tail ]] - sumc [ q [ tail -1 ]])) tail -- ; q [ ++ tail ] = i ; } return printf ( \"%lld \\n \" , f [ n ]), 0 ; } \u6211\u8fd9\u4efd\u4ee3\u7801\u5982\u679c\u7528 \\(head=1,tail=0,head\\le tail\\) \u7684\u65b9\u5f0f\u5199\u4e0d\u77e5\u5230\u4e3a\u5565\u4f1a\u6302\uff0c\u4e4b\u540e\u518d\u8003\u8651\u5f97\u4e86\u3002 \u590d\u6742\u5ea6 \\(\\text{O}(n)\\) \u505a\u6cd54 - \u4e8c\u5206 + \u659c\u7387\u4f18\u5316 \u00b6 \u6761\u4ef6\u540c3\uff0c \\(t_i\\) \u53ef\u80fd\u662f\u8d1f\u6570\u3002 \u53d1\u73b0 \\(sumt\\) \u4e0d\u518d\u662f\u5355\u8c03\u4e0a\u5347\u7684\uff0c\u6240\u4ee5\u4e0d\u80fd\u5229\u7528\u5355\u8c03\u961f\u5217\u76f4\u63a5\u5f39\u6389\u961f\u5934\u5197\u6742\u3002 \u51b3\u7b56\u7684\u65f6\u5019\u5c31\u9700\u8981\u5728\u6574\u4e2a\u51f8\u58f3\u4e0a\u4e8c\u5206\u3002 \u53ea\u9700\u8981\u627e\u5230\u8fd9\u6837\u7684\u4e00\u4e2a\u8282\u70b9\u5373\u53ef\uff1a \u5982\u679c\u67d0\u4e2a\u9876\u70b9\u5de6\u4fa7\u7684\u7ebf\u6bb5\u659c\u7387\u6bd4 \\(k\\) \u5c0f\uff0c\u53f3\u4fa7\u6bd4 \\(k\\) \u5927\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c31\u662f\u6700\u4f18\u51b3\u7b56\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 #include <bits/stdc++.h> using namespace std ; constexpr int si = 3e5 + 10 ; inline __int128 read (){ __int128 x = 0 , f = 1 ; char ch = getchar (); while ( ch < '0' || ch > '9' ){ if ( ch == '-' ) f = -1 ; ch = getchar (); } while ( ch >= '0' && ch <= '9' ) x = ( x << 1 ) + ( x << 3 ) + ( ch ^ 48 ), ch = getchar (); return x * f ; } inline void write ( __int128 x ){ if ( x < 0 ) putchar ( '-' ), x =- x ; if ( x > 9 ) write ( x / 10 ); putchar ( x % 10 + '0' ); } __int128 f [ si ], sumt [ si ], sumc [ si ]; int q [ si ], n , S , head , tail ; inline int Mylower_bound ( int slope ){ if ( head == tail ) return q [ head ]; int l = head , r = tail ; while ( l < r ){ int mid = ( l + r ) >> 1 ; if ( f [ q [ mid + 1 ]] - f [ q [ mid ]] <= slope * ( sumc [ q [ mid + 1 ]] - sumc [ q [ mid ]])) l = mid + 1 ; else r = mid ; } return q [ l ]; } int main () { scanf ( \"%d%d\" , & n , & S ); for ( register int i = 1 ; i <= n ; i ++ ){ __int128 t , c ; t = read (), c = read (); sumt [ i ] = sumt [ i -1 ] + t , sumc [ i ] = sumc [ i -1 ] + c ; } memset ( f , 0x3f , sizeof ( f )), f [ 0 ] = 0 ; head = 1 , tail = 1 , q [ 1 ] = 0 ; for ( register int i = 1 ; i <= n ; i ++ ){ int qwq = Mylower_bound ( S + sumt [ i ]); f [ i ] = f [ qwq ] - ( S + sumt [ i ]) * sumc [ qwq ] + sumt [ i ] * sumc [ i ] + S * sumc [ n ]; while ( head < tail && ( f [ q [ tail ]] - f [ q [ tail -1 ]]) * ( sumc [ i ] - sumc [ q [ tail ]]) >= ( f [ i ] - f [ q [ tail ]]) * ( sumc [ q [ tail ]] - sumc [ q [ tail -1 ]])) tail -- ; q [ ++ tail ] = i ; } return write ( f [ n ]), 0 ; } // \u672c\u9898\u4f1a\u7206 long long, use __int128. \u505a\u6cd55 - \u5e73\u8861\u6811 + \u659c\u7387\u4f18\u5316 \u00b6 \u5982\u679c \\(c_i\\) \u4e5f\u6709\u53ef\u80fd\u662f\u8d1f\u6570\uff1f \u9700\u8981\u5728\u51f8\u58f3\u7684\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\uff0c\u67e5\u8be2\uff0c\u6240\u4ee5\u9700\u8981\u5e73\u8861\u6811\u3002 \u8fd8\u4e0d\u592a\u4f1a\u3002","title":"\u659c\u7387\u4f18\u5316"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/#dp","text":"\u8fd9\u4e00\u7c7b\u95ee\u9898\u548c\u5355\u8c03\u961f\u5217\u4f18\u5316DP\u6709\u5171\u540c\u7684\u5730\u65b9\u3002 \u53ef\u4ee5\u7528\u7c7b\u4f3c\u7684\u601d\u60f3\u601d\u8003\u5176\u4e2d\u7684\u4e00\u90e8\u5206\u5185\u5bb9\u3002 \u8003\u8651\u5355\u8c03\u961f\u5217\u4f18\u5316DP\u91cc\u9762\u90a3\u4e2a 1D1D \u7684\u5f0f\u5b50\u3002 \\[f_{i}=\\min\\limits_{L(i)\\le j \\le R(i)}\\{f_j+val(i,j)\\}\\] \u5176\u4e2d \\(val(i,j)\\) \u662f\u5173\u4e8e \\(i,j\\) \u7684\u591a\u9879\u5f0f\u3002 \u5e76\u4e14\u53ef\u4ee5\u5206\u88c2\u4e3a\u4e24\u4e2a\u5206\u522b\u53ea\u548c \\(i,j\\) \u76f8\u5173\u7684\u90e8\u5206\u3002 \u4f46\u5982\u679c \\(val(i,j)\\) \u5f53\u4e2d\u6709\u540c\u65f6\u548c \\(i,j\\) \u76f8\u5173\u7684\u90e8\u5206\uff08\u4e58\u79ef\u548c\u505a\u9664\u6cd5\uff09\uff0c\u90a3\u4e48\u5355\u8c03\u961f\u5217\u4f18\u5316DP\u5c31\u4e0d\u518d\u9002\u7528\u3002 \u6b64\u65f6\u9700\u8981\u4f7f\u7528\u659c\u7387\u4f18\u5316DP\u3002","title":"\u659c\u7387\u4f18\u5316DP"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/#_1","text":"\\(n\\) \u4e2a\u4efb\u52a1\u6392\u6210\u4e00\u4e2a\u5e8f\u5217\u5728\u4e00\u53f0\u673a\u5668\u4e0a\u7b49\u5f85\u5b8c\u6210\uff08\u987a\u5e8f\u4e0d\u5f97\u6539\u53d8\uff09\uff0c\u8fd9 \\(n\\) \u4e2a\u4efb\u52a1\u88ab\u5206\u6210\u82e5\u5e72\u6279\uff0c\u6bcf\u6279\u5305\u542b\u76f8\u90bb\u7684\u82e5\u5e72\u4efb\u52a1\u3002 \u4ece\u96f6\u65f6\u523b\u5f00\u59cb\uff0c\u8fd9\u4e9b\u4efb\u52a1\u88ab\u5206\u6279\u52a0\u5de5\uff0c\u7b2c \\(i\\) \u4e2a\u4efb\u52a1\u5355\u72ec\u5b8c\u6210\u6240\u9700\u7684\u65f6\u95f4\u4e3a \\(t_i\\) \u3002\u5728\u6bcf\u6279\u4efb\u52a1\u5f00\u59cb\u524d\uff0c\u673a\u5668\u9700\u8981\u542f\u52a8\u65f6\u95f4 \\(s\\) \uff0c\u800c\u5b8c\u6210\u8fd9\u6279\u4efb\u52a1\u6240\u9700\u7684\u65f6\u95f4\u662f\u5404\u4e2a\u4efb\u52a1\u9700\u8981\u65f6\u95f4\u7684\u603b\u548c\uff08\u540c\u4e00\u6279\u4efb\u52a1\u5c06\u5728\u540c\u4e00\u65f6\u523b\u5b8c\u6210\uff09\u3002 \u6bcf\u4e2a\u4efb\u52a1\u7684\u8d39\u7528\u662f\u5b83\u7684\u5b8c\u6210\u65f6\u523b\u4e58\u4ee5\u4e00\u4e2a\u8d39\u7528\u7cfb\u6570 \\(c_i\\) \u3002\u8bf7\u786e\u5b9a\u4e00\u4e2a\u5206\u7ec4\u65b9\u6848\uff0c\u4f7f\u5f97\u603b\u8d39\u7528\u6700\u5c0f\u3002","title":"\u95ee\u9898\uff1a"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/#1-","text":"\u4fdd\u8bc1 \\(n \\le 500,1\\le s \\le 50,1\\le t_i,c_i \\le 100\\) \u8003\u8651\u6700\u66b4\u529b\u7684\u65b9\u5f0f\uff0c\u8bbe \\(f_{i,j}\\) \u8868\u793a\u524d \\(i\\) \u4e2a\u4efb\u52a1\uff0c\u5206\u6210 \\(j\\) \u6279\u6267\u884c\u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u662f\u603b\u8d39\u7528\u6700\u5c0f\u3002 \u679a\u4e3e\u4e0a\u4e00\u6279\u4efb\u52a1\u7684\u6700\u540e\u4e00\u4e2a\u70b9\u5373\u53ef\u3002 \\(f_{i,j}=\\min\\limits_{0\\le k < i}\\{f_{k,j-1}+c[k+1\\sim i]\\times (t[k+1\\sim i]+s\\times j)\\}\\) \u5904\u7406\u524d\u7f00\u548c\u53ef\u4ee5\u505a\u5230 \\(\\text{O}(n^3)\\)","title":"\u505a\u6cd51 - \u66b4\u529b"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/#2-","text":"\u4fdd\u8bc1 \\(n\\le 5000,1\\le s \\le 50,1\\le t_i,c_i \\le 100\\) \u53d1\u73b0\u4e0a\u4e00\u4e2a\u65b9\u7a0b\u7684\u74f6\u9888\u5728\u4e8e \\(j\\) \uff0c\u9700\u8981\u77e5\u9053\u542f\u52a8\u4e86\u591a\u5c11\u6b21\uff0c\u56e0\u4e3a \\(s\\) \u9020\u6210\u7684\u8d21\u732e\u4f1a\u548c\u542f\u52a8\u6b21\u6570\u6210\u6b63\u6bd4\u3002 \u53d1\u73b0\u5982\u679c\u4e00\u6279\u4efb\u52a1\u786e\u5b9a\u88ab\u5206\u5728\u4e00\u8d77\uff0c\u90a3\u4e48\u4e4b\u540e\u7684\u6240\u6709\u4efb\u52a1\u7684\u7ed3\u675f\u65f6\u95f4\u81ea\u7136\u90fd\u4f1a\u589e\u52a0 \\(s\\) \u3002 \u6240\u4ee5\u53ef\u4ee5\u5728\u8f6c\u79fb\u7684\u65f6\u5019\u5148\u628a\u8fd9\u4e2a \\(s\\) \u52a0\u5230\u540e\u9762\uff08\u8d39\u7528\u63d0\u524d\u8ba1\u7b97\uff09 \u56e0\u4e3a\u9898\u76ee\u6ca1\u6709\u5206\u591a\u5c11\u7ec4\u7684\u9650\u5236\uff0c\u8bbe \\(f_i\\) \u8868\u793a\u628a\u524d \\(i\\) \u4e2a\u4efb\u52a1\u5206\u6210\u82e5\u5e72\u4e2a\u6279\u6b21\u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u6700\u5c0f\u82b1\u8d39\u3002 \u679a\u4e3e\u4e0a\u4e00\u7ec4\u7684\u6700\u540e\u7aef\u70b9\u53ef\u4ee5\u5f97\u5230\uff1a \\(f_i=\\min\\limits_{0\\le j < i}\\{f_j+s\\times c[j+1\\sim n]+t[1\\sim i] \\times c[j+1 \\sim i]\\}\\) \u9884\u5904\u7406\u524d\u7f00\u548c\u53ef\u4ee5\u505a\u5230 \\(\\text{O}(n^2)\\)","title":"\u505a\u6cd52 - \u8d39\u7528\u63d0\u524d\u8ba1\u7b97"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/#3-","text":"\u4fdd\u8bc1 \\(n \\le 3\\times 10^5,1\\le s \\le 512,1\\le t_i,c_i \\le 512\\) \u8981\u6c42\u65f6\u95f4\u590d\u6742\u5ea6 \\(\\text{O}(n)\\) \u3002 \u53d1\u73b0\u8fd9\u4e2a\u65b9\u7a0b\u5c31\u662f 1D1D \u7684\u5f62\u5f0f\uff0c\u7528\u524d\u7f00\u548c\u7684\u65b9\u5f0f\u91cd\u65b0\u5199\u4e00\u4e0b\u8fd9\u4e2a\u65b9\u7a0b\uff1a \\(f_i=\\min\\limits_{0\\le j < i}\\{f_j+s\\times (sumc[n]-sumc[j])+sumt[i]\\times(sumc[i]-sumc[j])\\}\\) \u53d1\u73b0\u540e\u9762\u7684 \\(val(i,j)\\) \u8fd9\u4e2a\u591a\u9879\u5f0f\u662f \\(s\\times (sumc[n]-sumc[j])+sumt[i]\\times(sumc[i]-sumc[j])\\) \u628a \\(i\\) \u76f8\u5173\u9879\uff0c \\(j\\) \u76f8\u5173#\u9879\uff0c \\(i,j\\) \u76f8\u5173\u9879\u5206\u79bb\uff1a \u5e38\u9879\uff1a \\(s\\times sumc[n]\\) \\(i\\) \u76f8\u5173\u9879\uff1a \\(sumt[i]\\times sumc[i]\\) \\(j\\) \u76f8\u5173\u9879\uff1a$ -s\\times sumc[j]$ \\(i,j\\) \u76f8\u5173\u9879\uff1a \\(-sumt[i]\\times sumc[j]\\) \u628a\u5916\u5c42\u5faa\u73af\u56fa\u5b9a\u65f6\u5019\u7684\u5e38\u91cf\u63d0\u51fa\u53bb \\(f_i=s\\times sumc[n]+sumt[i]\\times sumc[i]+\\min\\limits_{0 \\le j < i}\\{f_j -s\\times sumc[j]-sumt[i]\\times sumc[j]\\}\\) \u628a \\(\\min\\) \u53bb\u6389\uff0c\u628a\u5173\u4e8e \u51b3\u7b56\u70b9 \\(j\\) \u7684\u770b\u4f5c \u53d8\u91cf \u3002 \\(f_j=(s+sumt[i])\\times sumc[j]+f_i-sumt[i]\\times sumc[i]-s\\times sumc[n]\\) \u5982\u679c\u628a \\(f_j\\) \u5f53\u4f5c \\(y\\) \uff0c \\(sumc[j]\\) \u770b\u4f5c \\(x\\) \u3002 \u53ef\u4ee5\u5f97\u5230\u4e00\u6761\u76f4\u7ebf \\(y=kx+b\\) \u5176\u4e2d \\(b=f_i-sumt[i]\\times sumc[i]-s\\times sumc[n]\\) \u628a \\(j=0\\to n-1\\) \u7684 \u6bcf\u4e2a \u4e8c\u5143\u7ec4 \\((sumc[j],f_j)\\) \u5f53\u4f5c\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e0a\u7684\u4e00\u4e2a\u70b9\uff08\u8fd9\u5c31\u662f\u8981\u53bb\u6389 \\(\\min\\) \u7684\u539f\u56e0\uff09 \u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u8fd9\u6837\u7684\u4e00\u4e2a\u4e1c\u897f\uff1a \u53d1\u73b0\u76f4\u7ebf \\(y=kx+b\\) \u7684\u659c\u7387\u662f \\((s+sumt[i])\\) \u662f\u4e00\u4e2a\u5173\u4e8e \\(i\\) \u7684\u53d8\u91cf\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u4e0d\u540c\u7684 \\(i\\) \uff0c\u6211\u4eec\u5f97\u5230\u7684\u659c\u7387\u662f\u4e0d\u4e00\u6837\u7684\u3002 \u5f53\u7136\u5982\u679c\u51fa\u73b0 \\(sumt[i]\\) \u5148\u589e\u518d\u51cf\u5c11\u5bfc\u81f4\u6709\u4e24\u4e2a\u4e0d\u540c\u7684 \\(i\\) \u7684 \\(sumt[i]\\) \u4e00\u6837\uff0c\u662f\u6ca1\u6709\u5f71\u54cd\u7684\u3002 \u56de\u60f3\u4e00\u4e0b\u95ee\u9898\uff1a\u6700\u5c0f\u5316 \\(f_n\\) \uff0c\u5bf9\u5e94\u5230\u6bcf\u4e2a\u51b3\u7b56\u7684\u95ee\u9898\u5c31\u662f\u6700\u5c0f\u5316 \\(f_i\\) \u3002 \u800c \\(f_i\\) \u5904\u4e8e\u622a\u8ddd \\(b\\) \u4e4b\u4e2d\uff0c\u5f53 \\(y,x,k\\) \u56fa\u5b9a\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u8ba9 \\(b\\) \u6700\u5c0f\uff0c \\(f_i\\) \u5c31\u6700\u5c0f\u3002 \u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(i\\) \uff0c\u62ff\u4e00\u6761\u659c\u7387\u4e3a \\(k\\) \u7684\u76f4\u7ebf\u4ece\u4e0b\u5f80\u4e0a\u5e73\u79fb\uff0c\u9047\u5230\u7684\u7b2c\u4e00\u4e2a\u70b9\u4e00\u5b9a\u662f\u6700\u4f18\u89e3\u3002 \u4f46\u662f\u5c31\u7b97\u8fd9\u6837\uff0c\u8fd8\u662f\u9700\u8981\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684 \\(j\\) \uff0c\u590d\u6742\u5ea6\u4f9d\u65e7\u662f \\(n^2\\) \u7ea7\u522b\u3002 \u90a3\u4e48\u600e\u4e48\u4f18\u5316\uff1f \u968f\u4fbf\u627e\u4e09\u4e2a \\(x\\) \u5750\u6807\u9012\u589e\u7684\u70b9 \\(i,j,k\\) \u8fde\u63a5 \\(i\\to j,j \\to k\\) \u53d1\u73b0\u53ea\u53ef\u80fd\u6709\u5982\u4e0b\u7684\u4e24\u79cd\u60c5\u51b5\uff08\u4e09\u70b9\u5171\u7ebf\u7684\u4e0d\u7b97\uff09\u3002 \u53d1\u73b0\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c \\(j\\) \u65e0\u8bba\u5982\u4f55\u90fd\u4e0d\u53ef\u80fd\u6210\u4e3a\u6700\u4f18\u51b3\u7b56\u3002 \u5f62\u5f0f\u5316\u7684\u63cf\u8ff0\u5c31\u662f \\(k_{i,j}>k_{j,k}\\) \uff0c\u90a3\u4e48 \\(j\\) \u4e0d\u53ef\u80fd\u6210\u4e3a\u6700\u4f18\u51b3\u7b56\u3002 \u6240\u4ee5\u53ef\u4ee5\u5904\u7406\u51fa\u6240\u6709\u7684\u4e0d\u53ef\u80fd\u6210\u4e3a\u6700\u4f18\u51b3\u7b56\u7684\u51b3\u7b56\u70b9\uff0c\u7136\u540e\u8f6c\u79fb\u5c31\u5728\u5269\u4e0b\u7684\u90e8\u5206\u8fdb\u884c\u5373\u53ef\u3002 \u5b9e\u9645\u4e0a\uff0c\u5728\u672c\u9898\u5c31\u662f\u5728\u7ef4\u62a4\u4e00\u4e2a \\(x\\) \u5355\u8c03\u9012\u589e\uff0c \\(k\\) \u5355\u8c03\u9012\u589e\u7684 \u4e0b\u51f8\u58f3 \uff0c \u5177\u4f53\u5982\u4f55\u7ef4\u62a4\u8fd9\u4e2a\u4e0b\u51f8\u58f3\u5462\uff1f \u8003\u8651\u4ece \\(0 \\to n-1\\) \u66b4\u529b\u626b\u4e00\u6b21\uff0c\u6bcf\u6b21\u65b0\u589e\u4e00\u4e2a\u70b9\u90fd\u9700\u8981\u628a\u5b83\u548c\u4e0a\u4e00\u4e2a\u88ab\u52a0\u5165\u7684\u70b9\uff0c\u4e0a\u4e0a\u4e2a\u88ab\u52a0\u5165\u7684\u70b9\u76f8\u4e92\u4e4b\u95f4\u8fde\u8fb9\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u66f4\u4f18\uff0c\u53bb\u6389\u4e0a\u4e00\u4e2a\uff0c\u628a\u8fd9\u4e2a\u70b9\u653e\u8fdb\u6765\u3002 GIF\uff1a \u56e0\u4e3a\u5728\u672c\u9898\uff0c\u659c\u7387\u5728 \\(i\\) \u589e\u52a0\u7684\u65f6\u5019\u4e00\u5b9a\u589e\u52a0\uff08\u56e0\u4e3a \\(sumt[i]\\) \u80af\u5b9a\u5355\u8c03\u4e0a\u5347\uff09 \u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a\u5355\u8c03\u961f\u5217\uff0c\u628a\u524d\u9762\u5df2\u7ecf\u51b3\u7b56\u8fc7\u7684\u5220\u9664\uff0c\u5728\u540e\u9762\u8fdb\u884c\u51b3\u7b56\u3002 \u4e5f\u5c31\u662f\u961f\u5934\u548c\u961f\u5934\u52a0\u4e00\u7684\u659c\u7387\u5c0f\u4e8e \\(s+sumt[i]\\) \uff0c\u5c31\u628a\u961f\u5934\u5f39\u51fa\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include <bits/stdc++.h> using namespace std ; constexpr int si = 3e5 + 10 ; #define ll long long ll f [ si ], sumt [ si ], sumc [ si ]; int q [ si ], n , S ; int main () { scanf ( \"%d%d\" , & n , & S ); for ( register int i = 1 ; i <= n ; i ++ ){ int t , c ; scanf ( \"%d%d\" , & t , & c ); sumt [ i ] = sumt [ i -1 ] + t , sumc [ i ] = sumc [ i -1 ] + c ; } memset ( f , 0x3f , sizeof ( f )), f [ 0 ] = 0 ; int head = 1 , tail = 1 ; q [ 1 ] = 0 ; for ( register int i = 1 ; i <= n ; i ++ ){ while ( head < tail && ( f [ q [ head + 1 ]] - f [ q [ head ]]) <= ( S + sumt [ i ]) * ( sumc [ q [ head + 1 ]] - sumc [ q [ head ]])) head ++ ; f [ i ] = f [ q [ head ]] - ( S + sumt [ i ]) * sumc [ q [ head ]] + sumt [ i ] * sumc [ i ] + S * sumc [ n ]; while ( head < tail && ( f [ q [ tail ]] - f [ q [ tail -1 ]]) * ( sumc [ i ] - sumc [ q [ tail ]]) >= ( f [ i ] - f [ q [ tail ]]) * ( sumc [ q [ tail ]] - sumc [ q [ tail -1 ]])) tail -- ; q [ ++ tail ] = i ; } return printf ( \"%lld \\n \" , f [ n ]), 0 ; } \u6211\u8fd9\u4efd\u4ee3\u7801\u5982\u679c\u7528 \\(head=1,tail=0,head\\le tail\\) \u7684\u65b9\u5f0f\u5199\u4e0d\u77e5\u5230\u4e3a\u5565\u4f1a\u6302\uff0c\u4e4b\u540e\u518d\u8003\u8651\u5f97\u4e86\u3002 \u590d\u6742\u5ea6 \\(\\text{O}(n)\\)","title":"\u505a\u6cd53 - \u659c\u7387\u4f18\u5316"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/#4-","text":"\u6761\u4ef6\u540c3\uff0c \\(t_i\\) \u53ef\u80fd\u662f\u8d1f\u6570\u3002 \u53d1\u73b0 \\(sumt\\) \u4e0d\u518d\u662f\u5355\u8c03\u4e0a\u5347\u7684\uff0c\u6240\u4ee5\u4e0d\u80fd\u5229\u7528\u5355\u8c03\u961f\u5217\u76f4\u63a5\u5f39\u6389\u961f\u5934\u5197\u6742\u3002 \u51b3\u7b56\u7684\u65f6\u5019\u5c31\u9700\u8981\u5728\u6574\u4e2a\u51f8\u58f3\u4e0a\u4e8c\u5206\u3002 \u53ea\u9700\u8981\u627e\u5230\u8fd9\u6837\u7684\u4e00\u4e2a\u8282\u70b9\u5373\u53ef\uff1a \u5982\u679c\u67d0\u4e2a\u9876\u70b9\u5de6\u4fa7\u7684\u7ebf\u6bb5\u659c\u7387\u6bd4 \\(k\\) \u5c0f\uff0c\u53f3\u4fa7\u6bd4 \\(k\\) \u5927\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c31\u662f\u6700\u4f18\u51b3\u7b56\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 #include <bits/stdc++.h> using namespace std ; constexpr int si = 3e5 + 10 ; inline __int128 read (){ __int128 x = 0 , f = 1 ; char ch = getchar (); while ( ch < '0' || ch > '9' ){ if ( ch == '-' ) f = -1 ; ch = getchar (); } while ( ch >= '0' && ch <= '9' ) x = ( x << 1 ) + ( x << 3 ) + ( ch ^ 48 ), ch = getchar (); return x * f ; } inline void write ( __int128 x ){ if ( x < 0 ) putchar ( '-' ), x =- x ; if ( x > 9 ) write ( x / 10 ); putchar ( x % 10 + '0' ); } __int128 f [ si ], sumt [ si ], sumc [ si ]; int q [ si ], n , S , head , tail ; inline int Mylower_bound ( int slope ){ if ( head == tail ) return q [ head ]; int l = head , r = tail ; while ( l < r ){ int mid = ( l + r ) >> 1 ; if ( f [ q [ mid + 1 ]] - f [ q [ mid ]] <= slope * ( sumc [ q [ mid + 1 ]] - sumc [ q [ mid ]])) l = mid + 1 ; else r = mid ; } return q [ l ]; } int main () { scanf ( \"%d%d\" , & n , & S ); for ( register int i = 1 ; i <= n ; i ++ ){ __int128 t , c ; t = read (), c = read (); sumt [ i ] = sumt [ i -1 ] + t , sumc [ i ] = sumc [ i -1 ] + c ; } memset ( f , 0x3f , sizeof ( f )), f [ 0 ] = 0 ; head = 1 , tail = 1 , q [ 1 ] = 0 ; for ( register int i = 1 ; i <= n ; i ++ ){ int qwq = Mylower_bound ( S + sumt [ i ]); f [ i ] = f [ qwq ] - ( S + sumt [ i ]) * sumc [ qwq ] + sumt [ i ] * sumc [ i ] + S * sumc [ n ]; while ( head < tail && ( f [ q [ tail ]] - f [ q [ tail -1 ]]) * ( sumc [ i ] - sumc [ q [ tail ]]) >= ( f [ i ] - f [ q [ tail ]]) * ( sumc [ q [ tail ]] - sumc [ q [ tail -1 ]])) tail -- ; q [ ++ tail ] = i ; } return write ( f [ n ]), 0 ; } // \u672c\u9898\u4f1a\u7206 long long, use __int128.","title":"\u505a\u6cd54 - \u4e8c\u5206 + \u659c\u7387\u4f18\u5316"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/#5-","text":"\u5982\u679c \\(c_i\\) \u4e5f\u6709\u53ef\u80fd\u662f\u8d1f\u6570\uff1f \u9700\u8981\u5728\u51f8\u58f3\u7684\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\uff0c\u67e5\u8be2\uff0c\u6240\u4ee5\u9700\u8981\u5e73\u8861\u6811\u3002 \u8fd8\u4e0d\u592a\u4f1a\u3002","title":"\u505a\u6cd55 - \u5e73\u8861\u6811 + \u659c\u7387\u4f18\u5316"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/","text":"\u6811\u5f62DP \u00b6 \u666e\u901a\u6811\u5f62DP \u00b6 \u6811\u5f62DP\u7684\u56fa\u6709\u7279\u5f81\u5c31\u662f\u4f7f\u7528 dfs \u9012\u5f52\u5b9e\u73b0\u3002 \u4e00\u822c\u6765\u8bf4\u90fd\u662f dfs \u5230\u513f\u5b50\uff0c\u7136\u540e\u4e0a\u4f20\u4fe1\u606f\u66f4\u65b0\u7236\u4eb2\uff0c\u6700\u540e\u5f97\u51fa\u7b54\u6848\u3002 \u5e38\u89c1\u7684\u8f85\u52a9\u6570\u7ec4\u662f\uff1a siz[u] \uff1a\u8bb0\u5f55\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u7684\u5927\u5c0f dep[u] \uff1a\u8bb0\u5f55\u4ee5\u67d0\u4e2a\u8282\u70b9\uff08\u901a\u5e38\u662f \\(1\\) \uff09\u4e3a\u6839\u7684\u65f6\u5019 \\(u\\) \u7684\u6df1\u5ea6\u3002 dis[u] \uff1a \\(u\\) \u80fd\u5411\u4e0b\u8d70\u7684\u6700\u8fdc\u8ddd\u79bb / \u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u5f53\u4e2d\u6240\u6709\u8282\u70b9\u5230 \\(u\\) \u7684\u8ddd\u79bb\u548c\u3002 \uff08\u9664\u4e86\u6362\u6839DP\u4f1a\u5728\u7b2c\u4e8c\u6b21 dfs \u7684\u65f6\u5019\u7528\u7236\u4eb2\u66f4\u65b0\u513f\u5b50\uff09 \u4e00\u822c\u6765\u8bf4\uff0c\u72b6\u6001\u90fd\u662f\u8bbe\u8ba1\u6210\u8fd9\u79cd \uff1a \\(f_{u}\\) \u8868\u793a\u8282\u70b9 \\(u\\) blablabla\uff0c\u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811 blablabla\u2026\u2026 \u6765\u4e00\u4e2a\u4f8b\u5b50\uff1a \u6ca1\u6709\u4e0a\u53f8\u7684\u821e\u4f1a\uff1a\u7ed9\u4f60\u4e00\u68f5\u6811\uff0c\u5982\u679c\u9009\u4e86\u67d0\u4e00\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\u8282\u70b9\uff0c\u90a3\u4e48\u5c31\u4e0d\u80fd\u9009\u8fd9\u4e2a\u8282\u70b9\uff0c\u8282\u70b9\u6709\u70b9\u6743\uff0c\u95ee\u4f60\u53ef\u4ee5\u9009\u62e9\u7684\u70b9\u6743\u548c\u7684\u6700\u5927\u503c\u3002 \u8bbe \\(f[u][0/1]\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\uff0c \\(u\\) \u53c2\u52a0\u6216\u8005\u4e0d\u53c2\u52a0\u821e\u4f1a\u7684\u6240\u6709\u60c5\u51b5\uff0c\u5c5e\u6027\u4e3a\uff1a\u53d6\u5f97\u7684\u6700\u5927\u6743\u503c\u3002 \u8fd9\u6837\u5b50\u8bbe\u8ba1\u624d\u80fd\u591f\u8868\u793a\u51fa\u9898\u76ee\u4e2d \u6240\u6709\u7684\u9650\u5236\u5173\u7cfb \uff1a\u4ece\u5c5e\uff0c\u662f\u5426\u53c2\u52a0\u3002 \u6839\u636e\u72b6\u6001\u8bbe\u8ba1\uff0c\u5206 \\(f[u][0]\\) \u548c \\(f[u][1]\\) \u4e24\u79cd\u60c5\u51b5\u6765\u8ba8\u8bba\u3002 \u5982\u679c \\(u\\) \u4e0d\u53c2\u52a0\u821e\u4f1a\uff0c\u90a3\u4e48\u5b83\u7684\u513f\u5b50\u4eec\u90fd\u53ef\u4ee5\u53c2\u52a0\u821e\u4f1a\u3002 \u6ce8\u610f\u5230 \\(r_i\\) \u53ef\u80fd\u662f\u8d1f\u6570\uff0c\u6240\u4ee5\u8981\u5728\u513f\u5b50\u53c2\u52a0\u548c\u4e0d\u53c2\u52a0\u91cc\u9762\u53d6\u4e2a\u6700\u5927\u503c\u7136\u540e\u518d\u6c42\u548c\u3002 \\(f[u][0]=\\sum \\max(f[v][1],f[v][0])\\) \u7136\u540e\u5982\u679c \\(u\\) \u53c2\u52a0\u4e86\u821e\u4f1a\uff0c\u90a3\u4e48\u5b83\u7684\u513f\u5b50\u8282\u70b9\u5c31\u90fd\u4e0d\u4f1a\u53c2\u52a0\uff0c\u4f46\u662f\u5b83\u81ea\u5df1\u8981\u53c2\u52a0\u3002 \u6240\u4ee5 \\(f[u][1]=\\sum f[v][0]+r_u\\) \u7136\u540e\u6211\u4eecDP\u5b8c\u4e86\u4e4b\u540e\u5c31\u5728 \\(f[root][0]\\) \u548c \\(f[root][1]\\) \u4e4b\u95f4\u53d6\u4e2a\u6700\u5927\u503c\u5373\u53ef\u3002 \u4ece\u8fd9\u9053\u9898\u4e0d\u96be\u53d1\u73b0\uff0c\u6811\u5f62DP\u7684\u91cd\u70b9\u5c31\u5728\u4e8e\u5982\u4f55\u5229\u7528\u72b6\u6001\u8868\u793a\u8282\u70b9\u548c\u8282\u70b9\u4e4b\u95f4\u7684\u4ece\u5c5e\uff0c\u9650\u5236\u7b49\u5173\u7cfb\u3002 \u5e76\u4e14\u8bbe\u8ba1\u72b6\u6001\u7684\u65f6\u5019\u4e00\u822c\u90fd\u662f\u95ee\u4ec0\u4e48\u8bbe\u4ec0\u4e48\uff08\u548c\u7ebf\u6027DP\u5dee\u4e0d\u591a\uff09\u3002 \u6811\u4e0a\u80cc\u5305 \u00b6 \u8fd9\u4e2a\u89c1 \u80cc\u5305\u95ee\u9898 \u3002 \u6362\u6839DP \u00b6 \u8fd9\u7c7b\u95ee\u9898\u7684\u663e\u8457\u7279\u70b9\u662f\u4e24\u6b21dfs\uff0c\u4e00\u6b21\u6536\u96c6\u4fe1\u606f\uff0c\u4e00\u6b21\u8fdb\u884c\u8f6c\u79fb\u3002 \u6709\u7684\u65f6\u5019\u66b4\u529b\u9700\u8981\u6bcf\u4e2a\u70b9\u8fdb\u884c\u4e00\u6b21 \\(\\text{O}(n)\\) \u7684 dfs\uff0c\u590d\u6742\u5ea6 \\(\\text{O}(n^2)\\) \u3002 \u6b64\u65f6\u4e00\u822c\u90fd\u53ef\u4ee5\u4f7f\u7528\u6362\u6839DP\u8fdb\u884c \\(\\text{O}(n)\\) \u7684\u8ba1\u7b97\u3002 \u89e3\u51b3\u65f6\u4e00\u822c\u5206\u4e09\u6b65\uff1a \u786e\u5b9a\u4e00\u4e2a\u6839\u8282\u70b9 \u4ece\u8fd9\u4e2a\u6839\u8282\u70b9\u51fa\u53d1\uff0c\u5411\u4e0b dfs\uff0c\u5e76\u7528\u513f\u5b50\u66f4\u65b0\u7236\u4eb2\u7684\u4fe1\u606f\u3002 \u7b2c\u4e8c\u6b21 dfs\uff0c\u4e00\u822c\u8fd8\u662f\u4ece\u6700\u5f00\u59cb\u786e\u5b9a\u7684\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u65f6\u5019\u9700\u8981\u7528\u7236\u4eb2\u7684 \u72b6\u6001 \uff0c\u7ed3\u5408\u4fe1\u606f\u6765\u66f4\u65b0\u513f\u5b50\u7684\u72b6\u6001\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u6b64\u65f6\u8fdb\u884c\u6362\u6839DP\u7684\u65f6\u5019\uff0c\u4f1a\u8bbe \\(f_u\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u65f6\u5019\u7684\u7b54\u6848\uff0c\u90a3\u4e48\u4ece\u6700\u5f00\u59cb\u9009\u5b9a\u7684\u6839\u8282\u70b9\u5411\u4e0b\u8f6c\u79fb\u3002 \u56e0\u4e3a\u6bcf\u6b21\u53ea\u4f1a\u5411\u5f53\u524d\u8282\u70b9\u7684\u513f\u5b50\u8282\u70b9\u8f6c\u79fb\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5bf9\u4fe1\u606f\u8fdb\u884c\u4e00\u4e9b\u6574\u5408\uff0c\u8ba1\u7b97\u5c31\u53ef\u4ee5\u5f97\u5230\u513f\u5b50\u8282\u70b9\u7684\u72b6\u6001\u3002 \uff08\u6b64\u5904\u6240\u8bf4\u7684\u201c\u7236\u4eb2\u201d\uff0c\u201c\u513f\u5b50\u201d\uff0c\u90fd\u662f\u5728\u6700\u5f00\u59cb\u9009\u5b9a\u7684\u6839\u8282\u70b9\u7684\u60c5\u51b5\u4e0b\u5b9a\u4e49\u7684\uff09 \u4e3e\u4e2a\u4f8b\u5b50\uff1a [POI2008]STA-Station\uff1a\u7ed9\u4f60\u4e00\u9897\u65e0\u6839\u65e0\u6743\u6811\uff0c\u8bf7\u4f60\u627e\u5230\u4e00\u4e2a\u8282\u70b9\uff0c\u4f7f\u5f97\u4ee5\u8fd9\u4e2a\u8282\u70b9\u4e3a\u6839\u7684\u65f6\u5019\uff0c\u6811\u7684\u8282\u70b9\u7684\u6df1\u5ea6\u4e4b\u548c\u6700\u5927\u3002 \u9996\u5148\u4ee5 \\(1\\) \u4e3a\u6839\uff0c\u8003\u8651\u8fdb\u884c\u4e00\u6b21 dfs\uff0c\u6c42\u51fa\u6b64\u65f6\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6 \\(depth\\) \uff0c\u5b50\u6811\u5927\u5c0f \\(siz\\) \uff0c\u5b50\u6811\u5230\u8fd9\u4e2a\u70b9\u7684\u8ddd\u79bb\u548c \\(dis\\) \u3002 \u90a3\u4e48\u8bbe \\(f_u\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u65f6\u5019\uff0c\u6811\u7684\u6240\u6709\u8282\u70b9\u7684\u6df1\u5ea6\u4e4b\u548c\u3002 \u8003\u8651\u4ece \\(u\\) \u7684\u7236\u4eb2 \\(fa\\) \u8f6c\u79fb\u8fc7\u6765\u3002 \u9996\u5148\uff0c \\(f_u\\) \u80af\u5b9a\u8981\u5148\u52a0\u4e0a \\(dis_u\\) \uff0c\u8fd9\u4e00\u90e8\u5206\u672c\u6765\u5c31\u662f\u4ee5 \\(u\\) \u4e3a\u6839\uff0c\u6240\u4ee5\u6df1\u5ea6\u548c\u81ea\u7136\u662f\u5230 \\(u\\) \u7684\u8ddd\u79bb\u548c\uff08\u56e0\u4e3a\u65e0\u6743\uff09\u3002 \u7136\u540e\u53d1\u73b0 \\(u\\) \u7684\u4e0a\u9762\u90a3\u90e8\u5206\u9700\u8981\u7edf\u8ba1\u3002 \u660e\u663e\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528 \\(f_{fa}\\) \u6c42\u51fa\u4e0a\u9762\u7684\u90e8\u5206\uff0c\u4f46\u662f \\(f_{fa}\\) \u672c\u8eab\u5c31\u5305\u542b\u4e86 \\(u\\) \u7684\u5b50\u6811\u4fe1\u606f\u3002 \u6240\u4ee5\u8981\u7ed9 \\(f_{fa}\\) \u51cf\u53bb \\(dis_u\\) \uff0c\u4e0d\u8fc7 \\(fa\\) \u548c \\(u\\) \u5728\u4ee5 \\(1\\) \u4e3a\u6839\u7684\u65f6\u5019\u662f\u6709\u6df1\u5ea6\u5dee\u7684\uff0c\u6240\u4ee5\u8981\u518d\u51cf\u53bb \\(siz_u(\\times 1)\\) \u3002 \u521a\u597d\uff0c\u8fd9\u4e2a\u6df1\u5ea6\u5dee\u53c8\u4f1a\u9020\u6210\u4e0a\u9762\u7684\u90a3\u4e00\u90e8\u5206\u5728\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u65f6\u5019\u7684\u6df1\u5ea6\u6bd4\u4ee5 \\(fa\\) \u4e3a\u6839\u7684\u65f6\u5019\u589e\u52a0 \\(1\\) \u3002 \u6240\u4ee5\u8981\u52a0\u4e0a \\(siz_1-siz_u\\) \u3002 \u6574\u7406\u4e0b\u5f0f\u5b50\uff1a \\(f_u=f_{fa}-dis_u+dis_u-siz_u+siz_1-siz_u=f_{fa}+siz_1-2siz_u\\) \u3002 \u6240\u4ee5\u5b9e\u9645\u4e0a\u53ea\u9700\u8981\u8bb0\u5f55 \\(siz\\) \u5c31\u53ef\u4ee5\u4e86\u3002 \u4f46\u662f\u4f60\u4e3a\u4e86\u8f6c\u79fb\uff0c\u80af\u5b9a\u8981\u5148\u6c42\u51fa \\(f_1\\) \u3002\u8fd9\u4e2a\u5229\u7528 \\(depth\\) \u66b4\u529b\u52a0\u5373\u53ef\u3002 \u518d\u603b\u7ed3\u4e00\u4e0b\uff1a \u627e\u4e00\u4e2a\u6839\u8282\u70b9 \u7edf\u8ba1\u6b64\u65f6\u7684\u4fe1\u606f \u6362\u6839\uff0c\u5229\u7528\u7236\u4eb2\u66f4\u65b0\u513f\u5b50\u7684\u72b6\u6001\uff0c\u8f6c\u79fb\u4e4b\u524d\u8981\u5148\u521d\u59cb\u5316\u5f00\u59cb\u627e\u7684\u6839\u8282\u70b9\u7684\u72b6\u6001\u3002 \u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\uff1a [USACO12FEB]Nearby Cows G\uff1a\u7ed9\u4f60\u4e00\u68f5 \\(n\\) \u4e2a\u70b9\u7684\u6811\uff0c\u70b9\u5e26\u6743\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u6c42\u51fa\u8ddd\u79bb\u5b83\u4e0d\u8d85\u8fc7 \\(K\\) \u7684\u6240\u6709\u8282\u70b9\u6743\u503c\u548c \\(m_i\\) \uff0c \\(K\\) \u7ed9\u5b9a\u3002 \u6211\u4eec\u4ecd\u7136\u8003\u8651\u5148 dfs \u4e00\u904d \u6c42\u51fa\u6240\u9700\u8981\u7684\u4fe1\u606f\uff0c\u8fd9\u91cc\u95ee\u7684\u662f\u8282\u70b9\u6743\u503c\u548c\uff0c\u53c8\u6709 \\(K\\) \u7684\u9650\u5236\uff0c\u5e76\u4e14 \\(n\\times K \\le 2\\times 10^6\\) \u3002 \u6240\u4ee5\u5148\u627e\u4e00\u4e2a\u6839\u8282\u70b9 \\(1\\) \uff0c\u8bbe \\(dis_{u,k}\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u5f53\u4e2d\uff0c\u548c \\(u\\) \u7684\u8ddd\u79bb\u4e0d\u8d85\u8fc7 \\(k\\) \u7684\u8282\u70b9\u7684\u6743\u503c\u548c\u3002 \u8fd9\u91cc \\(dis_{u,k}=\\sum dis_{v,k-1}\\) \u3002\u521d\u59cb\u5316 \\(dis_{u,0}=a_u\\) \u3002 \u7136\u540e\u8003\u8651\u8fdb\u884c\u6362\u6839\u3002 \u8bbe \\(f_{u,k}\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u65f6\u5019\uff0c \\(K=k\\) \u7684\u65f6\u5019\u7684 \\(m_u\\) \u3002 \u90a3\u4e48\u8003\u8651\u4ece \\(f_{fa}\\) \u8f6c\u79fb\u3002 \u5bb9\u65a5\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\uff0c \\(f_{u,k}=dis_{u,k}+f_{fa,k-1}-dis_{u,k-2}\\) \u3002 \u7136\u540e\u6211\u4eec\u5904\u7406\u51fa \\(dis\\) \u4e4b\u540e\uff0c\u5148\u628a \\(dis\\) \u590d\u5236\u7ed9 \\(f\\) \uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019 \\(f_1\\) \u5176\u5b9e\u5c31\u5df2\u7ecf\u7b97\u51fa\u6765\u4e86\uff0cDP\u5b8c\u540e\u8f93\u51fa\u5373\u53ef\u3002 \u4e0d\u8fc7\u8981\u6ce8\u610f\u7684\u4e00\u4e2a\u70b9\u662f\uff0c\u5982\u679c\u662f\u7528\u513f\u5b50\u66f4\u65b0\u7236\u4eb2\u7684\u4fe1\u606f \uff08 dfs1 \uff09 \uff0c\u90a3\u4e48\u8981\u5148 dfs \u7136\u540e\u518d\u66f4\u65b0\u3002 \u5982\u679c\u662f\u7528\u7236\u4eb2\u66f4\u65b0\u513f\u5b50\u7684\u4fe1\u606f\uff08 dfs2 \uff09\uff0c\u9700\u8981\u5148\u66f4\u65b0\u518d dfs\u3002","title":"\u6811\u5f62DP"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/#dp","text":"","title":"\u6811\u5f62DP"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/#dp_1","text":"\u6811\u5f62DP\u7684\u56fa\u6709\u7279\u5f81\u5c31\u662f\u4f7f\u7528 dfs \u9012\u5f52\u5b9e\u73b0\u3002 \u4e00\u822c\u6765\u8bf4\u90fd\u662f dfs \u5230\u513f\u5b50\uff0c\u7136\u540e\u4e0a\u4f20\u4fe1\u606f\u66f4\u65b0\u7236\u4eb2\uff0c\u6700\u540e\u5f97\u51fa\u7b54\u6848\u3002 \u5e38\u89c1\u7684\u8f85\u52a9\u6570\u7ec4\u662f\uff1a siz[u] \uff1a\u8bb0\u5f55\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u7684\u5927\u5c0f dep[u] \uff1a\u8bb0\u5f55\u4ee5\u67d0\u4e2a\u8282\u70b9\uff08\u901a\u5e38\u662f \\(1\\) \uff09\u4e3a\u6839\u7684\u65f6\u5019 \\(u\\) \u7684\u6df1\u5ea6\u3002 dis[u] \uff1a \\(u\\) \u80fd\u5411\u4e0b\u8d70\u7684\u6700\u8fdc\u8ddd\u79bb / \u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u5f53\u4e2d\u6240\u6709\u8282\u70b9\u5230 \\(u\\) \u7684\u8ddd\u79bb\u548c\u3002 \uff08\u9664\u4e86\u6362\u6839DP\u4f1a\u5728\u7b2c\u4e8c\u6b21 dfs \u7684\u65f6\u5019\u7528\u7236\u4eb2\u66f4\u65b0\u513f\u5b50\uff09 \u4e00\u822c\u6765\u8bf4\uff0c\u72b6\u6001\u90fd\u662f\u8bbe\u8ba1\u6210\u8fd9\u79cd \uff1a \\(f_{u}\\) \u8868\u793a\u8282\u70b9 \\(u\\) blablabla\uff0c\u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811 blablabla\u2026\u2026 \u6765\u4e00\u4e2a\u4f8b\u5b50\uff1a \u6ca1\u6709\u4e0a\u53f8\u7684\u821e\u4f1a\uff1a\u7ed9\u4f60\u4e00\u68f5\u6811\uff0c\u5982\u679c\u9009\u4e86\u67d0\u4e00\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\u8282\u70b9\uff0c\u90a3\u4e48\u5c31\u4e0d\u80fd\u9009\u8fd9\u4e2a\u8282\u70b9\uff0c\u8282\u70b9\u6709\u70b9\u6743\uff0c\u95ee\u4f60\u53ef\u4ee5\u9009\u62e9\u7684\u70b9\u6743\u548c\u7684\u6700\u5927\u503c\u3002 \u8bbe \\(f[u][0/1]\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\uff0c \\(u\\) \u53c2\u52a0\u6216\u8005\u4e0d\u53c2\u52a0\u821e\u4f1a\u7684\u6240\u6709\u60c5\u51b5\uff0c\u5c5e\u6027\u4e3a\uff1a\u53d6\u5f97\u7684\u6700\u5927\u6743\u503c\u3002 \u8fd9\u6837\u5b50\u8bbe\u8ba1\u624d\u80fd\u591f\u8868\u793a\u51fa\u9898\u76ee\u4e2d \u6240\u6709\u7684\u9650\u5236\u5173\u7cfb \uff1a\u4ece\u5c5e\uff0c\u662f\u5426\u53c2\u52a0\u3002 \u6839\u636e\u72b6\u6001\u8bbe\u8ba1\uff0c\u5206 \\(f[u][0]\\) \u548c \\(f[u][1]\\) \u4e24\u79cd\u60c5\u51b5\u6765\u8ba8\u8bba\u3002 \u5982\u679c \\(u\\) \u4e0d\u53c2\u52a0\u821e\u4f1a\uff0c\u90a3\u4e48\u5b83\u7684\u513f\u5b50\u4eec\u90fd\u53ef\u4ee5\u53c2\u52a0\u821e\u4f1a\u3002 \u6ce8\u610f\u5230 \\(r_i\\) \u53ef\u80fd\u662f\u8d1f\u6570\uff0c\u6240\u4ee5\u8981\u5728\u513f\u5b50\u53c2\u52a0\u548c\u4e0d\u53c2\u52a0\u91cc\u9762\u53d6\u4e2a\u6700\u5927\u503c\u7136\u540e\u518d\u6c42\u548c\u3002 \\(f[u][0]=\\sum \\max(f[v][1],f[v][0])\\) \u7136\u540e\u5982\u679c \\(u\\) \u53c2\u52a0\u4e86\u821e\u4f1a\uff0c\u90a3\u4e48\u5b83\u7684\u513f\u5b50\u8282\u70b9\u5c31\u90fd\u4e0d\u4f1a\u53c2\u52a0\uff0c\u4f46\u662f\u5b83\u81ea\u5df1\u8981\u53c2\u52a0\u3002 \u6240\u4ee5 \\(f[u][1]=\\sum f[v][0]+r_u\\) \u7136\u540e\u6211\u4eecDP\u5b8c\u4e86\u4e4b\u540e\u5c31\u5728 \\(f[root][0]\\) \u548c \\(f[root][1]\\) \u4e4b\u95f4\u53d6\u4e2a\u6700\u5927\u503c\u5373\u53ef\u3002 \u4ece\u8fd9\u9053\u9898\u4e0d\u96be\u53d1\u73b0\uff0c\u6811\u5f62DP\u7684\u91cd\u70b9\u5c31\u5728\u4e8e\u5982\u4f55\u5229\u7528\u72b6\u6001\u8868\u793a\u8282\u70b9\u548c\u8282\u70b9\u4e4b\u95f4\u7684\u4ece\u5c5e\uff0c\u9650\u5236\u7b49\u5173\u7cfb\u3002 \u5e76\u4e14\u8bbe\u8ba1\u72b6\u6001\u7684\u65f6\u5019\u4e00\u822c\u90fd\u662f\u95ee\u4ec0\u4e48\u8bbe\u4ec0\u4e48\uff08\u548c\u7ebf\u6027DP\u5dee\u4e0d\u591a\uff09\u3002","title":"\u666e\u901a\u6811\u5f62DP"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/#_1","text":"\u8fd9\u4e2a\u89c1 \u80cc\u5305\u95ee\u9898 \u3002","title":"\u6811\u4e0a\u80cc\u5305"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2DP/#dp_2","text":"\u8fd9\u7c7b\u95ee\u9898\u7684\u663e\u8457\u7279\u70b9\u662f\u4e24\u6b21dfs\uff0c\u4e00\u6b21\u6536\u96c6\u4fe1\u606f\uff0c\u4e00\u6b21\u8fdb\u884c\u8f6c\u79fb\u3002 \u6709\u7684\u65f6\u5019\u66b4\u529b\u9700\u8981\u6bcf\u4e2a\u70b9\u8fdb\u884c\u4e00\u6b21 \\(\\text{O}(n)\\) \u7684 dfs\uff0c\u590d\u6742\u5ea6 \\(\\text{O}(n^2)\\) \u3002 \u6b64\u65f6\u4e00\u822c\u90fd\u53ef\u4ee5\u4f7f\u7528\u6362\u6839DP\u8fdb\u884c \\(\\text{O}(n)\\) \u7684\u8ba1\u7b97\u3002 \u89e3\u51b3\u65f6\u4e00\u822c\u5206\u4e09\u6b65\uff1a \u786e\u5b9a\u4e00\u4e2a\u6839\u8282\u70b9 \u4ece\u8fd9\u4e2a\u6839\u8282\u70b9\u51fa\u53d1\uff0c\u5411\u4e0b dfs\uff0c\u5e76\u7528\u513f\u5b50\u66f4\u65b0\u7236\u4eb2\u7684\u4fe1\u606f\u3002 \u7b2c\u4e8c\u6b21 dfs\uff0c\u4e00\u822c\u8fd8\u662f\u4ece\u6700\u5f00\u59cb\u786e\u5b9a\u7684\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u65f6\u5019\u9700\u8981\u7528\u7236\u4eb2\u7684 \u72b6\u6001 \uff0c\u7ed3\u5408\u4fe1\u606f\u6765\u66f4\u65b0\u513f\u5b50\u7684\u72b6\u6001\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u6b64\u65f6\u8fdb\u884c\u6362\u6839DP\u7684\u65f6\u5019\uff0c\u4f1a\u8bbe \\(f_u\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u65f6\u5019\u7684\u7b54\u6848\uff0c\u90a3\u4e48\u4ece\u6700\u5f00\u59cb\u9009\u5b9a\u7684\u6839\u8282\u70b9\u5411\u4e0b\u8f6c\u79fb\u3002 \u56e0\u4e3a\u6bcf\u6b21\u53ea\u4f1a\u5411\u5f53\u524d\u8282\u70b9\u7684\u513f\u5b50\u8282\u70b9\u8f6c\u79fb\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5bf9\u4fe1\u606f\u8fdb\u884c\u4e00\u4e9b\u6574\u5408\uff0c\u8ba1\u7b97\u5c31\u53ef\u4ee5\u5f97\u5230\u513f\u5b50\u8282\u70b9\u7684\u72b6\u6001\u3002 \uff08\u6b64\u5904\u6240\u8bf4\u7684\u201c\u7236\u4eb2\u201d\uff0c\u201c\u513f\u5b50\u201d\uff0c\u90fd\u662f\u5728\u6700\u5f00\u59cb\u9009\u5b9a\u7684\u6839\u8282\u70b9\u7684\u60c5\u51b5\u4e0b\u5b9a\u4e49\u7684\uff09 \u4e3e\u4e2a\u4f8b\u5b50\uff1a [POI2008]STA-Station\uff1a\u7ed9\u4f60\u4e00\u9897\u65e0\u6839\u65e0\u6743\u6811\uff0c\u8bf7\u4f60\u627e\u5230\u4e00\u4e2a\u8282\u70b9\uff0c\u4f7f\u5f97\u4ee5\u8fd9\u4e2a\u8282\u70b9\u4e3a\u6839\u7684\u65f6\u5019\uff0c\u6811\u7684\u8282\u70b9\u7684\u6df1\u5ea6\u4e4b\u548c\u6700\u5927\u3002 \u9996\u5148\u4ee5 \\(1\\) \u4e3a\u6839\uff0c\u8003\u8651\u8fdb\u884c\u4e00\u6b21 dfs\uff0c\u6c42\u51fa\u6b64\u65f6\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6 \\(depth\\) \uff0c\u5b50\u6811\u5927\u5c0f \\(siz\\) \uff0c\u5b50\u6811\u5230\u8fd9\u4e2a\u70b9\u7684\u8ddd\u79bb\u548c \\(dis\\) \u3002 \u90a3\u4e48\u8bbe \\(f_u\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u65f6\u5019\uff0c\u6811\u7684\u6240\u6709\u8282\u70b9\u7684\u6df1\u5ea6\u4e4b\u548c\u3002 \u8003\u8651\u4ece \\(u\\) \u7684\u7236\u4eb2 \\(fa\\) \u8f6c\u79fb\u8fc7\u6765\u3002 \u9996\u5148\uff0c \\(f_u\\) \u80af\u5b9a\u8981\u5148\u52a0\u4e0a \\(dis_u\\) \uff0c\u8fd9\u4e00\u90e8\u5206\u672c\u6765\u5c31\u662f\u4ee5 \\(u\\) \u4e3a\u6839\uff0c\u6240\u4ee5\u6df1\u5ea6\u548c\u81ea\u7136\u662f\u5230 \\(u\\) \u7684\u8ddd\u79bb\u548c\uff08\u56e0\u4e3a\u65e0\u6743\uff09\u3002 \u7136\u540e\u53d1\u73b0 \\(u\\) \u7684\u4e0a\u9762\u90a3\u90e8\u5206\u9700\u8981\u7edf\u8ba1\u3002 \u660e\u663e\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528 \\(f_{fa}\\) \u6c42\u51fa\u4e0a\u9762\u7684\u90e8\u5206\uff0c\u4f46\u662f \\(f_{fa}\\) \u672c\u8eab\u5c31\u5305\u542b\u4e86 \\(u\\) \u7684\u5b50\u6811\u4fe1\u606f\u3002 \u6240\u4ee5\u8981\u7ed9 \\(f_{fa}\\) \u51cf\u53bb \\(dis_u\\) \uff0c\u4e0d\u8fc7 \\(fa\\) \u548c \\(u\\) \u5728\u4ee5 \\(1\\) \u4e3a\u6839\u7684\u65f6\u5019\u662f\u6709\u6df1\u5ea6\u5dee\u7684\uff0c\u6240\u4ee5\u8981\u518d\u51cf\u53bb \\(siz_u(\\times 1)\\) \u3002 \u521a\u597d\uff0c\u8fd9\u4e2a\u6df1\u5ea6\u5dee\u53c8\u4f1a\u9020\u6210\u4e0a\u9762\u7684\u90a3\u4e00\u90e8\u5206\u5728\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u65f6\u5019\u7684\u6df1\u5ea6\u6bd4\u4ee5 \\(fa\\) \u4e3a\u6839\u7684\u65f6\u5019\u589e\u52a0 \\(1\\) \u3002 \u6240\u4ee5\u8981\u52a0\u4e0a \\(siz_1-siz_u\\) \u3002 \u6574\u7406\u4e0b\u5f0f\u5b50\uff1a \\(f_u=f_{fa}-dis_u+dis_u-siz_u+siz_1-siz_u=f_{fa}+siz_1-2siz_u\\) \u3002 \u6240\u4ee5\u5b9e\u9645\u4e0a\u53ea\u9700\u8981\u8bb0\u5f55 \\(siz\\) \u5c31\u53ef\u4ee5\u4e86\u3002 \u4f46\u662f\u4f60\u4e3a\u4e86\u8f6c\u79fb\uff0c\u80af\u5b9a\u8981\u5148\u6c42\u51fa \\(f_1\\) \u3002\u8fd9\u4e2a\u5229\u7528 \\(depth\\) \u66b4\u529b\u52a0\u5373\u53ef\u3002 \u518d\u603b\u7ed3\u4e00\u4e0b\uff1a \u627e\u4e00\u4e2a\u6839\u8282\u70b9 \u7edf\u8ba1\u6b64\u65f6\u7684\u4fe1\u606f \u6362\u6839\uff0c\u5229\u7528\u7236\u4eb2\u66f4\u65b0\u513f\u5b50\u7684\u72b6\u6001\uff0c\u8f6c\u79fb\u4e4b\u524d\u8981\u5148\u521d\u59cb\u5316\u5f00\u59cb\u627e\u7684\u6839\u8282\u70b9\u7684\u72b6\u6001\u3002 \u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\uff1a [USACO12FEB]Nearby Cows G\uff1a\u7ed9\u4f60\u4e00\u68f5 \\(n\\) \u4e2a\u70b9\u7684\u6811\uff0c\u70b9\u5e26\u6743\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u6c42\u51fa\u8ddd\u79bb\u5b83\u4e0d\u8d85\u8fc7 \\(K\\) \u7684\u6240\u6709\u8282\u70b9\u6743\u503c\u548c \\(m_i\\) \uff0c \\(K\\) \u7ed9\u5b9a\u3002 \u6211\u4eec\u4ecd\u7136\u8003\u8651\u5148 dfs \u4e00\u904d \u6c42\u51fa\u6240\u9700\u8981\u7684\u4fe1\u606f\uff0c\u8fd9\u91cc\u95ee\u7684\u662f\u8282\u70b9\u6743\u503c\u548c\uff0c\u53c8\u6709 \\(K\\) \u7684\u9650\u5236\uff0c\u5e76\u4e14 \\(n\\times K \\le 2\\times 10^6\\) \u3002 \u6240\u4ee5\u5148\u627e\u4e00\u4e2a\u6839\u8282\u70b9 \\(1\\) \uff0c\u8bbe \\(dis_{u,k}\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u5f53\u4e2d\uff0c\u548c \\(u\\) \u7684\u8ddd\u79bb\u4e0d\u8d85\u8fc7 \\(k\\) \u7684\u8282\u70b9\u7684\u6743\u503c\u548c\u3002 \u8fd9\u91cc \\(dis_{u,k}=\\sum dis_{v,k-1}\\) \u3002\u521d\u59cb\u5316 \\(dis_{u,0}=a_u\\) \u3002 \u7136\u540e\u8003\u8651\u8fdb\u884c\u6362\u6839\u3002 \u8bbe \\(f_{u,k}\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u65f6\u5019\uff0c \\(K=k\\) \u7684\u65f6\u5019\u7684 \\(m_u\\) \u3002 \u90a3\u4e48\u8003\u8651\u4ece \\(f_{fa}\\) \u8f6c\u79fb\u3002 \u5bb9\u65a5\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\uff0c \\(f_{u,k}=dis_{u,k}+f_{fa,k-1}-dis_{u,k-2}\\) \u3002 \u7136\u540e\u6211\u4eec\u5904\u7406\u51fa \\(dis\\) \u4e4b\u540e\uff0c\u5148\u628a \\(dis\\) \u590d\u5236\u7ed9 \\(f\\) \uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019 \\(f_1\\) \u5176\u5b9e\u5c31\u5df2\u7ecf\u7b97\u51fa\u6765\u4e86\uff0cDP\u5b8c\u540e\u8f93\u51fa\u5373\u53ef\u3002 \u4e0d\u8fc7\u8981\u6ce8\u610f\u7684\u4e00\u4e2a\u70b9\u662f\uff0c\u5982\u679c\u662f\u7528\u513f\u5b50\u66f4\u65b0\u7236\u4eb2\u7684\u4fe1\u606f \uff08 dfs1 \uff09 \uff0c\u90a3\u4e48\u8981\u5148 dfs \u7136\u540e\u518d\u66f4\u65b0\u3002 \u5982\u679c\u662f\u7528\u7236\u4eb2\u66f4\u65b0\u513f\u5b50\u7684\u4fe1\u606f\uff08 dfs2 \uff09\uff0c\u9700\u8981\u5148\u66f4\u65b0\u518d dfs\u3002","title":"\u6362\u6839DP"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E5%8E%8BDP/","text":"\u72b6\u538bDP \u00b6 Introduction \u00b6 \u601d\u60f3\u5c31\u662f\u628a\u4e00\u4e2a\u8868\u793a\u201c\u5b58\u5728\u201d\u7684 \u201c\u96c6\u5408\u201d \u8f6c\u6362\u6210\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u3002 \u7136\u540e\u8fdb\u884c\u5bf9\u5e94\u7684\u8f6c\u79fb\u3002 \u6bd4\u5982\u8bbe \\(f_{msk}\\) \u8868\u793a\u83b7\u5f97\u72b6\u6001\u4e3a \\(msk\\) \u7684\u7269\u54c1\u6240\u9700\u7684\u4ee3\u4ef7\u3002 \u5176\u4e2d\u5982\u679c \\(msk\\) \u7684\u7b2c \\(i\\) \u4f4d\u662f \\(1\\) \uff0c\u90a3\u4e48\u8868\u793a\u7b2c \\(i\\) \u4e2a\u7269\u54c1\u5df2\u7ecf\u88ab\u53d6\u5f97\u3002 \u901a\u5e38\u9700\u8981\u5bf9 \\(msk\\) \u8fdb\u884c\u4e00\u4e9b\u4f4d\u8fd0\u7b97\u7684\u64cd\u4f5c\uff1a \u68c0\u67e5 \\(msk\\) \u7684\u7b2c \\(i\\) \u4f4d\u662f\u4e0d\u662f \\(1\\) \uff1a (msk>>(i-1)&1)==1 \u5219\u4e3a \\(1\\) \u3002 (msk&(1<<(i-1)))!=0 \u5219\u4e3a \\(1\\) \u3002 \u5c06 \\(msk\\) \u7684\u7b2c \\(i\\) \u4f4d\u8bbe\u7f6e\u4e3a \\(1\\) \uff1a msk|=(1<<(i-1)) \u5c06 \\(msk\\) \u7684\u7b2c \\(i\\) \u4f4d\u8bbe\u7f6e\u4e3a \\(0\\) \uff1a msk&=(~(1<<(i-1))) \u5c06 \\(msk\\) \u7684\u7b2c \\(i\\) \u4f4d\u53d6\u53cd\uff1a msk^=(1<<(i-1)) \u3002 \u5176\u5b83\u7684\u53ef\u4ee5\u770b\u4f4d\u8fd0\u7b97\u7684\u90e8\u5206\u3002\u6bd4\u5982 lowbit \u548c popcnt \u4e4b\u7c7b\u7684\u3002 \u679a\u4e3e\u72b6\u6001\u4e00\u822c\u8fd9\u4e48\u5199\uff1a 1 for ( register int msk = 0 ; msk < ( 1 << n ); ++ msk ) // n \u662f\u4f4d\u6570\u3002 \u4e00\u79cd\u5e38\u89c1\u7684\u7684\u4f18\u5316\u590d\u6742\u5ea6\u7684\u65b9\u5f0f\u5c31\u662f\u628a\u5408\u6cd5\u7684\u72b6\u6001\uff08\u51b3\u7b56\uff09\u5168\u90e8\u5904\u7406\u51fa\u6765\u5b58\u5230\u4e00\u4e2a\u8f85\u52a9\u6570\u7ec4\u91cc\u9762\u3002 \u5faa\u73af\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u8fd9\u6837\uff1a 1 for ( register int i = 1 ; i <= cnt ; ++ i ) // cnt \u662f\u5408\u6cd5\u72b6\u6001\u4e2a\u6570\u3002 \u666e\u901a\u72b6\u538b\u4e00\u822c\u5206\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u57fa\u4e8e\u8054\u901a\u6027\u7684\u72b6\u538bDP\uff08\u68cb\u76d8\u7c7b\uff09\uff0c\u4e00\u79cd\u662f\u96c6\u5408\u7c7b\u7684\u72b6\u538bDP\u3002 \u524d\u4e00\u79cd\u7684\u5178\u578b\u5c31\u662f\u201c[POJ2411]\u83ab\u5fb7\u91cc\u5b89\u7684\u68a6\u60f3\u201c\uff0c\u201c[SCOI2005]\u4e92\u4e0d\u4fb5\u72af\u201d\u548c\u201c[NOI2001]\u70ae\u5175\u9635\u5730\u201d\u3002 \u8fd9\u7c7b\u95ee\u9898\u4e00\u822c\u90fd\u9700\u8981\u5904\u7406\u6bcf\u4e00\u884c\u7684\u5408\u6cd5\u72b6\u6001\uff0c\u7136\u540e\u8fdb\u884c\u8f6c\u79fb\uff0c\u8f6c\u79fb\u7684\u9636\u6bb5 \u4e00\u822c \u90fd\u662f \u201c\u884c\u201d\u3002 \u540e\u4e00\u79cd\u7684\u5178\u578b\u5c31\u662f\u201c[NOIP2016]\u6124\u6012\u7684\u5c0f\u9e1f\u201d\uff0c\u201c[NOIP2017]\u5b9d\u85cf\u201d \u8fd9\u7c7b\u95ee\u9898\u4e00\u822c\u9700\u8981\u8bb0\u5f55\u5f53\u524d\u72b6\u6001\u5df2\u7ecf\u5904\u7406\u4e86\u54ea\u4e9b\u4e8b\u4ef6\uff0c\u8f6c\u79fb\u7684\u65f6\u5019 \u4e00\u822c \u4ee5\u72b6\u6001 \\(msk\\) \u4f5c\u4e3a\u9636\u6bb5\u3002 \u7528\u4e24\u9053\u677f\u5b50\u9898\u8bf4\u660e\uff1a P1879 [USACO06NOV]Corn Fields G \u00b6 \u68cb\u76d8\u7c7b\uff0c\u6700\u597d\u5199\u4e5f\u662f\u6700\u7ecf\u5178\u7684\u72b6\u538b\u9898\u4e4b\u4e00\u3002 \u9898\u610f\uff1a\u8981\u6c42\u4f60\u5728 \\(n \\times m\\) \u7684\u77e9\u9635\u4e0a\u653e\u4e00\u4e9b\u7269\u54c1\uff0c\u6709\u4e9b\u4f4d\u7f6e\u4e0d\u80fd\u653e\uff0c\u4f60\u4e0d\u80fd\u8ba9\u4e24\u4e2a\u7269\u54c1\u6328\u7740\uff0c\u6c42\u65b9\u6848\u6570\u5e76\u53d6\u6a21\u3002 \\(n,m \\le 13\\) \u9996\u5148\u53d1\u73b0\u8fd9\u4e00\u9898\u7684 \\(n,m\\) \u90fd\u662f \\(\\le 13\\) \u7684\u3002 \u6240\u4ee5\u6211\u4eec\u8003\u8651\u72b6\u538b\u3002 \u5148\u8003\u8651\u6ca1\u6709\u4e0d\u80fd\u653e\u7684\u9650\u5236\uff0c\u6211\u4eec\u7528\u4e8c\u8fdb\u5236 \u9884\u5904\u7406 \u51fa\u4e00\u884c\u91cc\u6240\u6709\u7684 \u53ef\u884c \u72b6\u6001 \\(sta\\) \u3002 \u8fd9\u6837\u5b50\u53ef\u4ee5\u5c11\u679a\u4e3e\u4e00\u5c42\uff0c\u4e0d\u7136\u4f1a\u7206\u70b8\u3002 \u5982\u679c\u8bf4\u6211\u4eec\u5904\u7406\u51fa\u6765\u7684\u60c5\u51b5\u662f\u6211\u4eec\u5904\u7406\u5230\u7684\u90a3\u4e00\u884c\u7684\u539f\u6765\u7684\u72b6\u6001\u7684\u5b50\u96c6\uff0c\u90a3\u4e48\u8fd9\u4e2a\u72b6\u6001\u5c31\u662f\u53ef\u884c\u7684\u3002 \u610f\u601d\u5c31\u662f\u8bf4\uff0c\u6bd4\u5982\u4f60\u662f\u8fd9\u6837\u5b50\u7684\uff1a 1 2 \u539f\u6765\u7684\u72b6\u6001\uff1a 1 0 1 1 0 0 1 0 0 1 1 1 \u5904\u7406\u7684\u72b6\u6001\uff1a 1 0 1 0 0 0 1 0 0 1 0 1 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5904\u7406\u7684\u72b6\u6001\u5f53\u4e2d\u653e\u4e86\u8349\u7684\u4f4d\u7f6e\u5728\u539f\u6765\u7684\u5730\u65b9\u90fd\u662f\u53ef\u4ee5\u79cd\u8349\u7684\u3002\u90a3\u4e48\u5c31\u662f\u53ef\u884c\u7684\u3002 \u7136\u540e\u6211\u4eec\u8bbe \\(f_{i,j}\\) \u8868\u793a\u8003\u8651\u7b2c \\(i\\) \u884c\uff0c\u4f60\u8003\u8651\u5904\u7406\u51fa\u6765\u7684\u7b2c \\(j\\) \u4e2a\u72b6\u6001\u7684\u65b9\u6848\u6570\u3002 \u5982\u679c\u8bf4\u8fd9\u7b2c \\(j\\) \u4e2a\u72b6\u6001\u662f\u53ef\u884c\u7684\uff0c\u90a3\u4e48\u8fd9\u91cc\u5c31\u4f1a\u6709\u65b9\u6848\u3002 \u53cd\u4e4b\u5982\u679c\u4e0d\u53ef\u884c\uff0c\u90a3\u4e48\u5c31\u4e0d\u4f1a\u8f6c\u79fb\u5230\u5b83\uff0c\u65b9\u6848\u6570\u662f \\(0\\) \u3002 \u8003\u8651\u679a\u4e3e\u4e0a\u4e00\u884c\u7684\u6240\u6709\u53ef\u884c\u72b6\u6001 \\(k\\) \uff0c\u7136\u540e\u65b9\u7a0b\u5c31\u662f \\(f_{i,j}=f_{i,j}+f_{i-1,k} , \\text{if} \\ sta(j)\\& sta (k) =0\\) \u3002 \\(\\ sta(j)\\& sta (k) =0\\) \u662f\u56e0\u4e3a\u4f60\u9700\u8981\u5224\u65ad\u4e0a\u4e0b\u6709\u6ca1\u6709\u76f8\u90bb\u7684\u3002 \u5904\u7406\u53ef\u884c\u72b6\u6001 \\(sta\\) \u7684\u8bdd\u53ea\u9700\u8981\u679a\u4e3e\u6240\u6709\u7684 \\(2^n\\) \u4e2a\u72b6\u6001\uff0c\u770b\u4ed6\u6709\u6ca1\u6709\u4e24\u4f4d\u662f\u76f8\u90bb\u7684\u5373\u53ef\u3002 Code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 #include <bits/stdc++.h> using namespace std ; const int si = 14 ; const int stasi = 4096 + 10 ; // \u53ef\u884c\u72b6\u6001\u4e00\u5b9a\u5728 2n \u8303\u56f4\u4ee5\u5185. const int bitsi = 4096 + 10 ; const int p = 100000000 ; inline int mod ( int x , int p ){ return x < 0 ? ( x + p ) - ((( x + p ) / p ) * p ) : x - (( x / p ) * p );} int n , m , cnt = 0 ; int f [ si ][ stasi ]; int sta [ stasi ], yard [ si ]; inline void init ( int n ){ for ( register int i = 0 ; i <= n ; ++ i ){ // \u4e0d\u8981\u5fd8\u4e86\u90fd\u4e0d\u653e (0) \u4e5f\u662f\u53ef\u884c\u7684 if (( i & ( i << 1 )) != 0 || ( i & ( i >> 1 )) != 0 ) continue ; // \u8bb0\u5f97\u6253\u62ec\u53f7 sta [ ++ cnt ] = i ; // \u5408\u6cd5\u72b6\u6001 // printf(\"%d\\n\",sta[cnt]); } } inline bool valid ( int l , int s ){ if ( ! (( yard [ l ] & sta [ s ]) == sta [ s ])) return false ; // \u72b6\u6001\u7b26\u5408\u7b2c l \u884c\u7684\u60c5\u51b5 return true ; } int main (){ memset ( f , 0 , sizeof f ), scanf ( \"%d%d\" , & n , & m ); for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 , k ; j <= m ; ++ j ){ scanf ( \"%1d\" , & k ); if ( k ) yard [ i ] += ( 1 << ( m - j )); // \u628a\u6bcf\u4e00\u884c\u7684\u72b6\u6001\u8f6c\u6210\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570 } // printf(\"%d\\n\",yard[i]); } init (( 1 << m ) -1 ); // \u53bb\u6389\u6700\u540e\u7684\u7684\u4e00\u4e2a\uff0c\u4e0d\u7136\u4f1a\u591a\u4e00\u4e2a\u72b6\u6001\u3002 for ( register int i = 1 ; i <= cnt ; ++ i ){ if ( valid ( 1 , i )) f [ 1 ][ i ] = mod ( 1 , p ); // \u4e0d\u8981\u5fd8\u8bb0\u8fd9\u91cc\u4e5f\u8981\u5224\u5408\u6cd5 } for ( register int i = 2 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= cnt ; ++ j ){ // \u679a\u4e3e\u5f53\u524d\u5c42\u72b6\u6001 if ( ! valid ( i , j )) continue ; // \u72b6\u6001\u662f\u5426\u7b26\u5408\u5f53\u524d\u884c\u7684\u60c5\u51b5 for ( register int k = 1 ; k <= cnt ; ++ k ){ // \u679a\u4e3e\u4e0a\u4e00\u5c42\u72b6\u6001 if (( sta [ j ] & sta [ k ]) != 0 ) continue ; // \u4e0a\u4e0b\u4e0d\u5408\u6cd5 f [ i ][ j ] = mod ( f [ i ][ j ] + f [ i -1 ][ k ], p ); } } } int res = 0 ; for ( register int i = 1 ; i <= cnt ; ++ i ){ res = mod ( res + f [ n ][ i ], p ); } return printf ( \"%d \\n \" , mod ( res , p )), 0 ; } POJ2411 Mondriaan's Dream \u00b6 \u68cb\u76d8\u7c7b\u3002 \u7ed9\u4f60\u4e00\u4e2a \\(n\\times m\\) \u7684\u77e9\u9635\u3002 \u4f60\u53ef\u4ee5\u7528 \\(1\\times 2\\) \u7684\u957f\u65b9\u5f62\u53bb\u586b\u5145\u5b83\uff0c\u53ef\u4ee5\u7ad6\u7740\u4e5f\u53ef\u4ee5\u6a2a\u7740\u3002 \u95ee\u6070\u597d\u586b\u6ee1\u7684\u65b9\u6848\u6570\u3002 \\(1\\le n,m\\le 11\\) \u3002 \u4ed4\u7ec6\u601d\u8003\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u5f53\u524d\u53ea\u8003\u8651\u7b2c \\(i\\) \u884c\uff0c\u90a3\u4e48\u65e0\u975e\u5c31\u662f\u4e09\u79cd\u60c5\u51b5\uff1a \u7528 \\(1\\times 2\\) \u7684\uff08 == \uff09 \u586b\u5145 \u7528 \\(2\\times 1\\) \u7684\u4e0a\u4e00\u534a\u586b\u5145\u3002 \u7528 \\(2\\times 1\\) \u7684\u4e0b\u534a\u90e8\u5206\u586b\u5145\uff08\u5e76\u4e14\u4e0a\u4e00\u884c\u7684\u5bf9\u5e94\u4f4d\u7f6e\u662f \\(2\\times 1\\) \u7684\u4e0a\u4e00\u534a\uff09\u3002 \u6700\u9ebb\u70e6\u7684\u5c31\u662f\u7b2c\u4e8c\u79cd\u60c5\u51b5\u3002 \u6240\u4ee5\u8003\u8651\u72b6\u538b\uff0c\u8bbe \\(msk\\) \u8868\u793a\u67d0\u4e00\u884c\u7684\u72b6\u6001\uff0c\u7b2c \\(i\\) \u4f4d\u4e3a \\(1\\) \u5219\u8868\u793a\u5bf9\u5e94\u7684\u4f4d\u7f6e\u4e0a\u653e\u7684\u662f \\(2\\times 1\\) \u7684\u4e0a\u4e00\u534a\u3002 \u6240\u4ee5\uff0c\u4e0a\u4e00\u884c\u7684\u72b6\u6001 \\(msk_{i-1}\\) \u8981\u60f3\u8f6c\u79fb\u5230\u5f53\u524d\u884c \\(msk_i\\) \uff0c\u5fc5\u987b\u6ee1\u8db3 \\(msk_{i-1} \\operatorname{and} msk_i =0\\) \u3002 \u4f46\u662f\u4e5f\u9700\u8981\u8003\u8651\u7b2c\u4e00\u79cd\u60c5\u51b5\u653e\u4e0d\u653e\u7684\u4e86\u3002\u90a3\u4e48\u5148\u628a\u4e0a\u4e00\u884c\u7684\u72b6\u6001 \\(\\operatorname{or}\\) \u8fc7\u6765\uff0c\u90a3\u4e48\u4e0b\u534a\u90e8\u5206\u7684\u4f4d\u7f6e\u5c31\u786e\u5b9a\u4e86\u3002 \u56e0\u4e3a\u662f \\(1\\times 2\\) \u7684\uff0c\u6240\u4ee5\u4e0a\u4e0b\u4e24\u4e2a\u72b6\u6001\u8fdb\u884c\u6309\u4f4d\u6216\u4e4b\u540e\uff0c\u9700\u8981\u6ee1\u8db3\uff1a\u4efb\u610f \\(0\\) \u7684\u8fde\u901a\u5757\u91cc\uff0c \\(0\\) \u7684\u4e2a\u6570\u662f\u5076\u6570\u4e2a\u3002 \u90a3\u4e48\u5148\u9884\u5904\u7406\u6240\u6709\u884c\u5185\u5408\u6cd5\u7684\u72b6\u6001\u3002 \u7136\u540e\u679a\u4e3e\u884c\uff0c\u518d\u679a\u4e3e\u4e0a\u4e00\u884c\u7684\u72b6\u6001\u548c\u5f53\u524d\u884c\u7684\u72b6\u6001\u8fdb\u884c\u8f6c\u79fb\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int si = 20 ; constexpr int stasi = 1 << 12 ; int n , m ; int f [ si ][ stasi ]; bool vis [ stasi ]; signed main (){ while ( scanf ( \"%lld%lld\" , & n , & m ) != EOF && n && m ){ for ( register int msk = 0 ; msk < ( 1 << m ); ++ msk ){ bool ff = false , cnt = false ; for ( register int i = 1 ; i <= m ; ++ i ){ if ( msk >> ( i -1 ) & 1 ) ff |= cnt , cnt = false ; else cnt ^= 1 ; } vis [ msk ] = ff | cnt ? 0 : 1 ; } memset ( f , 0 , sizeof f ), f [ 0 ][ 0 ] = 1 ; for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 0 ; j < ( 1 << m ); ++ j ){ for ( register int k = 0 ; k < ( 1 << m ); ++ k ){ if (( j & k ) != 0 || ! vis [ j | k ]) continue ; f [ i ][ j ] += f [ i -1 ][ k ]; } } } printf ( \"%lld \\n \" , f [ n ][ 0 ]); } return 0 ; }","title":"\u72b6\u538bDP"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E5%8E%8BDP/#dp","text":"","title":"\u72b6\u538bDP"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E5%8E%8BDP/#introduction","text":"\u601d\u60f3\u5c31\u662f\u628a\u4e00\u4e2a\u8868\u793a\u201c\u5b58\u5728\u201d\u7684 \u201c\u96c6\u5408\u201d \u8f6c\u6362\u6210\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u3002 \u7136\u540e\u8fdb\u884c\u5bf9\u5e94\u7684\u8f6c\u79fb\u3002 \u6bd4\u5982\u8bbe \\(f_{msk}\\) \u8868\u793a\u83b7\u5f97\u72b6\u6001\u4e3a \\(msk\\) \u7684\u7269\u54c1\u6240\u9700\u7684\u4ee3\u4ef7\u3002 \u5176\u4e2d\u5982\u679c \\(msk\\) \u7684\u7b2c \\(i\\) \u4f4d\u662f \\(1\\) \uff0c\u90a3\u4e48\u8868\u793a\u7b2c \\(i\\) \u4e2a\u7269\u54c1\u5df2\u7ecf\u88ab\u53d6\u5f97\u3002 \u901a\u5e38\u9700\u8981\u5bf9 \\(msk\\) \u8fdb\u884c\u4e00\u4e9b\u4f4d\u8fd0\u7b97\u7684\u64cd\u4f5c\uff1a \u68c0\u67e5 \\(msk\\) \u7684\u7b2c \\(i\\) \u4f4d\u662f\u4e0d\u662f \\(1\\) \uff1a (msk>>(i-1)&1)==1 \u5219\u4e3a \\(1\\) \u3002 (msk&(1<<(i-1)))!=0 \u5219\u4e3a \\(1\\) \u3002 \u5c06 \\(msk\\) \u7684\u7b2c \\(i\\) \u4f4d\u8bbe\u7f6e\u4e3a \\(1\\) \uff1a msk|=(1<<(i-1)) \u5c06 \\(msk\\) \u7684\u7b2c \\(i\\) \u4f4d\u8bbe\u7f6e\u4e3a \\(0\\) \uff1a msk&=(~(1<<(i-1))) \u5c06 \\(msk\\) \u7684\u7b2c \\(i\\) \u4f4d\u53d6\u53cd\uff1a msk^=(1<<(i-1)) \u3002 \u5176\u5b83\u7684\u53ef\u4ee5\u770b\u4f4d\u8fd0\u7b97\u7684\u90e8\u5206\u3002\u6bd4\u5982 lowbit \u548c popcnt \u4e4b\u7c7b\u7684\u3002 \u679a\u4e3e\u72b6\u6001\u4e00\u822c\u8fd9\u4e48\u5199\uff1a 1 for ( register int msk = 0 ; msk < ( 1 << n ); ++ msk ) // n \u662f\u4f4d\u6570\u3002 \u4e00\u79cd\u5e38\u89c1\u7684\u7684\u4f18\u5316\u590d\u6742\u5ea6\u7684\u65b9\u5f0f\u5c31\u662f\u628a\u5408\u6cd5\u7684\u72b6\u6001\uff08\u51b3\u7b56\uff09\u5168\u90e8\u5904\u7406\u51fa\u6765\u5b58\u5230\u4e00\u4e2a\u8f85\u52a9\u6570\u7ec4\u91cc\u9762\u3002 \u5faa\u73af\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u8fd9\u6837\uff1a 1 for ( register int i = 1 ; i <= cnt ; ++ i ) // cnt \u662f\u5408\u6cd5\u72b6\u6001\u4e2a\u6570\u3002 \u666e\u901a\u72b6\u538b\u4e00\u822c\u5206\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u57fa\u4e8e\u8054\u901a\u6027\u7684\u72b6\u538bDP\uff08\u68cb\u76d8\u7c7b\uff09\uff0c\u4e00\u79cd\u662f\u96c6\u5408\u7c7b\u7684\u72b6\u538bDP\u3002 \u524d\u4e00\u79cd\u7684\u5178\u578b\u5c31\u662f\u201c[POJ2411]\u83ab\u5fb7\u91cc\u5b89\u7684\u68a6\u60f3\u201c\uff0c\u201c[SCOI2005]\u4e92\u4e0d\u4fb5\u72af\u201d\u548c\u201c[NOI2001]\u70ae\u5175\u9635\u5730\u201d\u3002 \u8fd9\u7c7b\u95ee\u9898\u4e00\u822c\u90fd\u9700\u8981\u5904\u7406\u6bcf\u4e00\u884c\u7684\u5408\u6cd5\u72b6\u6001\uff0c\u7136\u540e\u8fdb\u884c\u8f6c\u79fb\uff0c\u8f6c\u79fb\u7684\u9636\u6bb5 \u4e00\u822c \u90fd\u662f \u201c\u884c\u201d\u3002 \u540e\u4e00\u79cd\u7684\u5178\u578b\u5c31\u662f\u201c[NOIP2016]\u6124\u6012\u7684\u5c0f\u9e1f\u201d\uff0c\u201c[NOIP2017]\u5b9d\u85cf\u201d \u8fd9\u7c7b\u95ee\u9898\u4e00\u822c\u9700\u8981\u8bb0\u5f55\u5f53\u524d\u72b6\u6001\u5df2\u7ecf\u5904\u7406\u4e86\u54ea\u4e9b\u4e8b\u4ef6\uff0c\u8f6c\u79fb\u7684\u65f6\u5019 \u4e00\u822c \u4ee5\u72b6\u6001 \\(msk\\) \u4f5c\u4e3a\u9636\u6bb5\u3002 \u7528\u4e24\u9053\u677f\u5b50\u9898\u8bf4\u660e\uff1a","title":"Introduction"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E5%8E%8BDP/#p1879-usaco06novcorn-fields-g","text":"\u68cb\u76d8\u7c7b\uff0c\u6700\u597d\u5199\u4e5f\u662f\u6700\u7ecf\u5178\u7684\u72b6\u538b\u9898\u4e4b\u4e00\u3002 \u9898\u610f\uff1a\u8981\u6c42\u4f60\u5728 \\(n \\times m\\) \u7684\u77e9\u9635\u4e0a\u653e\u4e00\u4e9b\u7269\u54c1\uff0c\u6709\u4e9b\u4f4d\u7f6e\u4e0d\u80fd\u653e\uff0c\u4f60\u4e0d\u80fd\u8ba9\u4e24\u4e2a\u7269\u54c1\u6328\u7740\uff0c\u6c42\u65b9\u6848\u6570\u5e76\u53d6\u6a21\u3002 \\(n,m \\le 13\\) \u9996\u5148\u53d1\u73b0\u8fd9\u4e00\u9898\u7684 \\(n,m\\) \u90fd\u662f \\(\\le 13\\) \u7684\u3002 \u6240\u4ee5\u6211\u4eec\u8003\u8651\u72b6\u538b\u3002 \u5148\u8003\u8651\u6ca1\u6709\u4e0d\u80fd\u653e\u7684\u9650\u5236\uff0c\u6211\u4eec\u7528\u4e8c\u8fdb\u5236 \u9884\u5904\u7406 \u51fa\u4e00\u884c\u91cc\u6240\u6709\u7684 \u53ef\u884c \u72b6\u6001 \\(sta\\) \u3002 \u8fd9\u6837\u5b50\u53ef\u4ee5\u5c11\u679a\u4e3e\u4e00\u5c42\uff0c\u4e0d\u7136\u4f1a\u7206\u70b8\u3002 \u5982\u679c\u8bf4\u6211\u4eec\u5904\u7406\u51fa\u6765\u7684\u60c5\u51b5\u662f\u6211\u4eec\u5904\u7406\u5230\u7684\u90a3\u4e00\u884c\u7684\u539f\u6765\u7684\u72b6\u6001\u7684\u5b50\u96c6\uff0c\u90a3\u4e48\u8fd9\u4e2a\u72b6\u6001\u5c31\u662f\u53ef\u884c\u7684\u3002 \u610f\u601d\u5c31\u662f\u8bf4\uff0c\u6bd4\u5982\u4f60\u662f\u8fd9\u6837\u5b50\u7684\uff1a 1 2 \u539f\u6765\u7684\u72b6\u6001\uff1a 1 0 1 1 0 0 1 0 0 1 1 1 \u5904\u7406\u7684\u72b6\u6001\uff1a 1 0 1 0 0 0 1 0 0 1 0 1 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5904\u7406\u7684\u72b6\u6001\u5f53\u4e2d\u653e\u4e86\u8349\u7684\u4f4d\u7f6e\u5728\u539f\u6765\u7684\u5730\u65b9\u90fd\u662f\u53ef\u4ee5\u79cd\u8349\u7684\u3002\u90a3\u4e48\u5c31\u662f\u53ef\u884c\u7684\u3002 \u7136\u540e\u6211\u4eec\u8bbe \\(f_{i,j}\\) \u8868\u793a\u8003\u8651\u7b2c \\(i\\) \u884c\uff0c\u4f60\u8003\u8651\u5904\u7406\u51fa\u6765\u7684\u7b2c \\(j\\) \u4e2a\u72b6\u6001\u7684\u65b9\u6848\u6570\u3002 \u5982\u679c\u8bf4\u8fd9\u7b2c \\(j\\) \u4e2a\u72b6\u6001\u662f\u53ef\u884c\u7684\uff0c\u90a3\u4e48\u8fd9\u91cc\u5c31\u4f1a\u6709\u65b9\u6848\u3002 \u53cd\u4e4b\u5982\u679c\u4e0d\u53ef\u884c\uff0c\u90a3\u4e48\u5c31\u4e0d\u4f1a\u8f6c\u79fb\u5230\u5b83\uff0c\u65b9\u6848\u6570\u662f \\(0\\) \u3002 \u8003\u8651\u679a\u4e3e\u4e0a\u4e00\u884c\u7684\u6240\u6709\u53ef\u884c\u72b6\u6001 \\(k\\) \uff0c\u7136\u540e\u65b9\u7a0b\u5c31\u662f \\(f_{i,j}=f_{i,j}+f_{i-1,k} , \\text{if} \\ sta(j)\\& sta (k) =0\\) \u3002 \\(\\ sta(j)\\& sta (k) =0\\) \u662f\u56e0\u4e3a\u4f60\u9700\u8981\u5224\u65ad\u4e0a\u4e0b\u6709\u6ca1\u6709\u76f8\u90bb\u7684\u3002 \u5904\u7406\u53ef\u884c\u72b6\u6001 \\(sta\\) \u7684\u8bdd\u53ea\u9700\u8981\u679a\u4e3e\u6240\u6709\u7684 \\(2^n\\) \u4e2a\u72b6\u6001\uff0c\u770b\u4ed6\u6709\u6ca1\u6709\u4e24\u4f4d\u662f\u76f8\u90bb\u7684\u5373\u53ef\u3002 Code: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 #include <bits/stdc++.h> using namespace std ; const int si = 14 ; const int stasi = 4096 + 10 ; // \u53ef\u884c\u72b6\u6001\u4e00\u5b9a\u5728 2n \u8303\u56f4\u4ee5\u5185. const int bitsi = 4096 + 10 ; const int p = 100000000 ; inline int mod ( int x , int p ){ return x < 0 ? ( x + p ) - ((( x + p ) / p ) * p ) : x - (( x / p ) * p );} int n , m , cnt = 0 ; int f [ si ][ stasi ]; int sta [ stasi ], yard [ si ]; inline void init ( int n ){ for ( register int i = 0 ; i <= n ; ++ i ){ // \u4e0d\u8981\u5fd8\u4e86\u90fd\u4e0d\u653e (0) \u4e5f\u662f\u53ef\u884c\u7684 if (( i & ( i << 1 )) != 0 || ( i & ( i >> 1 )) != 0 ) continue ; // \u8bb0\u5f97\u6253\u62ec\u53f7 sta [ ++ cnt ] = i ; // \u5408\u6cd5\u72b6\u6001 // printf(\"%d\\n\",sta[cnt]); } } inline bool valid ( int l , int s ){ if ( ! (( yard [ l ] & sta [ s ]) == sta [ s ])) return false ; // \u72b6\u6001\u7b26\u5408\u7b2c l \u884c\u7684\u60c5\u51b5 return true ; } int main (){ memset ( f , 0 , sizeof f ), scanf ( \"%d%d\" , & n , & m ); for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 , k ; j <= m ; ++ j ){ scanf ( \"%1d\" , & k ); if ( k ) yard [ i ] += ( 1 << ( m - j )); // \u628a\u6bcf\u4e00\u884c\u7684\u72b6\u6001\u8f6c\u6210\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570 } // printf(\"%d\\n\",yard[i]); } init (( 1 << m ) -1 ); // \u53bb\u6389\u6700\u540e\u7684\u7684\u4e00\u4e2a\uff0c\u4e0d\u7136\u4f1a\u591a\u4e00\u4e2a\u72b6\u6001\u3002 for ( register int i = 1 ; i <= cnt ; ++ i ){ if ( valid ( 1 , i )) f [ 1 ][ i ] = mod ( 1 , p ); // \u4e0d\u8981\u5fd8\u8bb0\u8fd9\u91cc\u4e5f\u8981\u5224\u5408\u6cd5 } for ( register int i = 2 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= cnt ; ++ j ){ // \u679a\u4e3e\u5f53\u524d\u5c42\u72b6\u6001 if ( ! valid ( i , j )) continue ; // \u72b6\u6001\u662f\u5426\u7b26\u5408\u5f53\u524d\u884c\u7684\u60c5\u51b5 for ( register int k = 1 ; k <= cnt ; ++ k ){ // \u679a\u4e3e\u4e0a\u4e00\u5c42\u72b6\u6001 if (( sta [ j ] & sta [ k ]) != 0 ) continue ; // \u4e0a\u4e0b\u4e0d\u5408\u6cd5 f [ i ][ j ] = mod ( f [ i ][ j ] + f [ i -1 ][ k ], p ); } } } int res = 0 ; for ( register int i = 1 ; i <= cnt ; ++ i ){ res = mod ( res + f [ n ][ i ], p ); } return printf ( \"%d \\n \" , mod ( res , p )), 0 ; }","title":"P1879 [USACO06NOV]Corn Fields G"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E5%8E%8BDP/#poj2411-mondriaans-dream","text":"\u68cb\u76d8\u7c7b\u3002 \u7ed9\u4f60\u4e00\u4e2a \\(n\\times m\\) \u7684\u77e9\u9635\u3002 \u4f60\u53ef\u4ee5\u7528 \\(1\\times 2\\) \u7684\u957f\u65b9\u5f62\u53bb\u586b\u5145\u5b83\uff0c\u53ef\u4ee5\u7ad6\u7740\u4e5f\u53ef\u4ee5\u6a2a\u7740\u3002 \u95ee\u6070\u597d\u586b\u6ee1\u7684\u65b9\u6848\u6570\u3002 \\(1\\le n,m\\le 11\\) \u3002 \u4ed4\u7ec6\u601d\u8003\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u5f53\u524d\u53ea\u8003\u8651\u7b2c \\(i\\) \u884c\uff0c\u90a3\u4e48\u65e0\u975e\u5c31\u662f\u4e09\u79cd\u60c5\u51b5\uff1a \u7528 \\(1\\times 2\\) \u7684\uff08 == \uff09 \u586b\u5145 \u7528 \\(2\\times 1\\) \u7684\u4e0a\u4e00\u534a\u586b\u5145\u3002 \u7528 \\(2\\times 1\\) \u7684\u4e0b\u534a\u90e8\u5206\u586b\u5145\uff08\u5e76\u4e14\u4e0a\u4e00\u884c\u7684\u5bf9\u5e94\u4f4d\u7f6e\u662f \\(2\\times 1\\) \u7684\u4e0a\u4e00\u534a\uff09\u3002 \u6700\u9ebb\u70e6\u7684\u5c31\u662f\u7b2c\u4e8c\u79cd\u60c5\u51b5\u3002 \u6240\u4ee5\u8003\u8651\u72b6\u538b\uff0c\u8bbe \\(msk\\) \u8868\u793a\u67d0\u4e00\u884c\u7684\u72b6\u6001\uff0c\u7b2c \\(i\\) \u4f4d\u4e3a \\(1\\) \u5219\u8868\u793a\u5bf9\u5e94\u7684\u4f4d\u7f6e\u4e0a\u653e\u7684\u662f \\(2\\times 1\\) \u7684\u4e0a\u4e00\u534a\u3002 \u6240\u4ee5\uff0c\u4e0a\u4e00\u884c\u7684\u72b6\u6001 \\(msk_{i-1}\\) \u8981\u60f3\u8f6c\u79fb\u5230\u5f53\u524d\u884c \\(msk_i\\) \uff0c\u5fc5\u987b\u6ee1\u8db3 \\(msk_{i-1} \\operatorname{and} msk_i =0\\) \u3002 \u4f46\u662f\u4e5f\u9700\u8981\u8003\u8651\u7b2c\u4e00\u79cd\u60c5\u51b5\u653e\u4e0d\u653e\u7684\u4e86\u3002\u90a3\u4e48\u5148\u628a\u4e0a\u4e00\u884c\u7684\u72b6\u6001 \\(\\operatorname{or}\\) \u8fc7\u6765\uff0c\u90a3\u4e48\u4e0b\u534a\u90e8\u5206\u7684\u4f4d\u7f6e\u5c31\u786e\u5b9a\u4e86\u3002 \u56e0\u4e3a\u662f \\(1\\times 2\\) \u7684\uff0c\u6240\u4ee5\u4e0a\u4e0b\u4e24\u4e2a\u72b6\u6001\u8fdb\u884c\u6309\u4f4d\u6216\u4e4b\u540e\uff0c\u9700\u8981\u6ee1\u8db3\uff1a\u4efb\u610f \\(0\\) \u7684\u8fde\u901a\u5757\u91cc\uff0c \\(0\\) \u7684\u4e2a\u6570\u662f\u5076\u6570\u4e2a\u3002 \u90a3\u4e48\u5148\u9884\u5904\u7406\u6240\u6709\u884c\u5185\u5408\u6cd5\u7684\u72b6\u6001\u3002 \u7136\u540e\u679a\u4e3e\u884c\uff0c\u518d\u679a\u4e3e\u4e0a\u4e00\u884c\u7684\u72b6\u6001\u548c\u5f53\u524d\u884c\u7684\u72b6\u6001\u8fdb\u884c\u8f6c\u79fb\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int si = 20 ; constexpr int stasi = 1 << 12 ; int n , m ; int f [ si ][ stasi ]; bool vis [ stasi ]; signed main (){ while ( scanf ( \"%lld%lld\" , & n , & m ) != EOF && n && m ){ for ( register int msk = 0 ; msk < ( 1 << m ); ++ msk ){ bool ff = false , cnt = false ; for ( register int i = 1 ; i <= m ; ++ i ){ if ( msk >> ( i -1 ) & 1 ) ff |= cnt , cnt = false ; else cnt ^= 1 ; } vis [ msk ] = ff | cnt ? 0 : 1 ; } memset ( f , 0 , sizeof f ), f [ 0 ][ 0 ] = 1 ; for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 0 ; j < ( 1 << m ); ++ j ){ for ( register int k = 0 ; k < ( 1 << m ); ++ k ){ if (( j & k ) != 0 || ! vis [ j | k ]) continue ; f [ i ][ j ] += f [ i -1 ][ k ]; } } } printf ( \"%lld \\n \" , f [ n ][ 0 ]); } return 0 ; }","title":"POJ2411 Mondriaan's Dream"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%83%8C%E5%8C%85DP/","text":"\u80cc\u5305\u95ee\u9898 \u00b6 01\u80cc\u5305 \u00b6 \u7ed9\u4f60 \\(n\\) \u4e2a\u7269\u54c1\uff0c \\(m\\) \u7684\u5bb9\u91cf\uff0c\u6bcf\u4e2a\u7269\u54c1\u6709\u4f53\u79ef \\(v_i\\) \u548c\u4ef7\u503c \\(w_i\\) \uff0c\u95ee\u4f60\u80fd\u83b7\u5f97\u7684\u4ef7\u503c \\(\\max\\) \u3002 \u8003\u8651\u8bbe\u72b6\u6001 \\(f_{i,j}\\) \uff0c\u5176\u8868\u793a\u96c6\u5408\uff1a\u201c\u53ea\u4ece\u524d \\(i\\) \u4e2a\u91cc\u9762\u9009\uff0c\u7528\u7684\u7a7a\u95f4\u4e0d\u8d85\u8fc7 \\(j\\) \u7684\u6240\u6709\u65b9\u6848\u201d\uff0c\u5c5e\u6027\u4e3a\u9009\u62e9\u7684 \\(\\sum w_i\\) \u7684 Max \u90a3\u4e48\u96c6\u5408 \\(f_{i,j}\\) \u5c31\u53ef\u4ee5\u5212\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u524d \\(i\\) \u4e2a\u5f53\u4e2d\u9009\u7b2c \\(i\\) \u4e2a\u7269\u54c1\u7684\u6240\u6709\u60c5\u51b5\u548c\u524d \\(i\\) \u4e2a\u5f53\u4e2d\u4e0d\u9009\u7b2c \\(i\\) \u4e2a\u7269\u54c1\u7684\u6240\u6709\u60c5\u51b5\u3002 \u524d\u8005\u662f \\(f_{i-1,j-v_{i}}+w_i\\) \uff0c\u540e\u8005\u662f \\(f_{i-1,j}\\) \u3002 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \\(f_{i,j}=\\max\\limits_{1 \\le i \\le n,0 \\le j \\le m} \\begin{cases}f_{i-1,j-v_{i}}+w_i & j \\ge v_i\\\\ f_{i-1,j} & \\text{otherwise.}\\end{cases}\\) 1 2 3 4 5 6 7 8 9 10 // \u6ce8\u610f\u8fd9\u91cc\u7684\u72b6\u6001\u8bbe\u8ba1\u4e3a \u201c\u81f3\u591a\u201d\uff0c\u6240\u4ee5f\u7684\u521d\u503c\u5168\u90e8\u4e3a0\u3002 // \u5982\u679c\u662f f[0][0]=0,memset(f,0xcf,sizeof f) \u90a3\u5c31\u662f\u201c\u6070\u597d\u201d\uff0c\u9700\u8981\u5728\u6700\u540e\u626b\u63cf\u53d6\u6700\u5927\u503c\u3002 for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 0 ; j <= m ; ++ j ){ f [ i ][ j ] = f [ i -1 ][ j ]; } for ( register int j = v [ i ]; j <= m ; ++ j ){ f [ i ][ j ] = max ( f [ i ][ j ], f [ i -1 ][ j - v [ i ]] + w [ i ]); } } return printf ( \"%d \\n \" , f [ n ][ m ]), 0 ; \u8fd9\u91cc\u8981\u7279\u522b\u5f3a\u8c03\u65b9\u7a0b\u91cc\u7684 \\(j \\ge v_i\\) \u8fd9\u4e2a\u6761\u4ef6\uff0c\u5b83\u662f\u96c6\u5408 \\(f_{i,j}\\) \u5b58\u5728\u9009\u62e9\u5f53\u524d\u7269\u54c1\u8fd9\u4e2a\u5b50\u96c6\u7684\u5145\u8981\u6761\u4ef6\u3002 \u4e0d\u7136\u7684\u8bdd \\(f_{i,j}\\) \u8fde\u8fd9\u4e2a\u5b50\u96c6\u90fd\u6ca1\u6709\uff0c\u600e\u4e48\u8f6c\u79fb\uff1f \u4f46\u662f\u4e5f\u4e0d\u80fd\u4e0d\u8f6c\u79fb\uff0c\u53e6\u5916\u4e00\u4e2a\u5b50\u96c6\u662f\u65e0\u8bba\u5982\u4f55\u90fd\u5b58\u5728\u7684\uff0c\u6240\u4ee5\u5b83\u662f\u80af\u5b9a\u9700\u8981\u8f6c\u79fb\u7684\u554a\u3002 \u6240\u4ee5\u8fd9\u91cc\u6709\u79cd\u66f4\u597d\u7406\u89e3\u7684\u5199\u6cd5\uff1a 1 2 3 4 5 6 for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 0 ; j <= m ; ++ j ){ f [ i ][ j ] = f [ i -1 ][ j ]; if ( j >= v [ i ]) f [ i ][ j ] = max ( f [ i ][ j ], f [ i -1 ][ j - v [ i ]] + w [ i ]); } } return printf ( \"%d \\n \" , f [ n ][ m ]), 0 ; \u53e6\u5916\u4e0d\u8981\u5fd8\u4e86\uff0c \\(j\\) \u662f\u5df2\u7ecf\u4f7f\u7528\u7684\u7a7a\u95f4\uff0c\u662f\u53ef\u80fd\u4e3a \\(0\\) \u7684\uff0c\u4e0d\u8981\u6f0f\u4e86\u3002\u300e \u6761\u4ef6\u7684\u53d6\u503c\u8303\u56f4 \u300f \u8fd8\u6709\u72b6\u6001\u7684\u521d\u503c\uff08\u8fb9\u754c\uff0c\u6bd4\u5982\u4e0b\u6807\u4e3a \\(0\\) \u7684\u4e00\u7cfb\u5217\u4e1c\u897f\u662f\u4e0d\u662f\u4f1a\u6709\u7279\u6b8a\u7684\u5904\u7406\uff09\u300e \u72b6\u6001\u7684\u8fb9\u754c \u300f \u7136\u540e\u8fd9\u4e2a\u4e1c\u897f\u662f\u53ef\u4ee5\u4f18\u5316\u7684\uff0c\u6839\u636e\u7b2c\u4e8c\u79cd\u5199\u6cd5\u4e0d\u96be\u53d1\u73b0\uff0c\u6bcf\u6b21 \\(f_{i,j}\\) \u90fd\u4f1a\u7ee7\u627f\u4e0a\u4e00\u4e2a\u72b6\u6001 \\(f_{i-1,j}\\) \u3002 \u5e76\u4e14 \\(f_{i}\\) \u7cfb\u7684\u72b6\u6001\u53ea\u548c \\(f_{i-1}\\) \u7cfb\u7684\u72b6\u6001\u6709\u5173\u7cfb\uff0c\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u53bb\u6389\u7b2c\u4e00\u7ef4\u3002 \u4f46\u662f\u4e3a\u4e86\u4fdd\u8bc1\u65e0\u540e\u6548\u6027\uff0c\u4e5f\u5c31\u662f\u4fdd\u8bc1\u4e0d\u4f1a\u51fa\u73b0\u6574\u4e2a\u96c6\u5408\u63a8\u5b50\u96c6\u7684\u60c5\u51b5\u3002 \u6211\u4eec\u9700\u8981\u7814\u7a76\u4e0b\u65b9\u7a0b\u3002 \u8003\u8651\u5f53\u524d\u5faa\u73af\u5230 \\(j\\) \uff0c\u90a3\u4e48\u9700\u8981\u7684\u662f\u4e0a\u4e00\u6bb5\u72b6\u6001 \\(f_{i-1}\\) \u5f53\u4e2d\u7684 \\(j-v_i\\) \uff0c\u4e5f\u5c31\u662f\u5728 \\(j\\) \u7684\u524d\u9762\u3002 \u6211\u4eec\u9700\u8981\u8ba9\u6bcf\u4e2a\u7269\u54c1\u90fd\u53ea\u88ab\u62ff\u4e00\u6b21\uff0c\u6240\u4ee5\u8981\u4f7f\u7528 \u5012\u5e8f\u5faa\u73af \u3002 \u8fd9\u6837\uff0c \\(j\\) \u524d\u9762\u7684\u90e8\u5206\u90fd\u662f \\(i-1\\) \u9636\u6bb5\u7684\uff0c\u540e\u9762\u7684\u90fd\u662f \\(i\\) \u9636\u6bb5\u7684\u3002 1 2 3 4 5 for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = m ; j >= v [ i ]; -- j ){ f [ j ] = max ( f [ j ], f [ j - v [ i ]] + w [ i ]); } } return printf ( \"%d \\n \" , f [ m ]), 0 ; \u8fd9\u6837\u5b50\u4f60\u751a\u81f3\u4e0d\u9700\u8981\u521d\u59cb\u5316\uff0c\u53ea\u9700\u8981\u8ba9 \\(f[0]=0\\) \u5373\u53ef\uff0c\u56e0\u4e3a\u4e4b\u540e\u7684\u90fd\u4f1a\u8986\u76d6\u3002 \u5b8c\u5168\u80cc\u5305 \u00b6 \u7ed9\u4f60 \\(n\\) \u79cd\u7269\u54c1\uff0c \\(m\\) \u7684\u5bb9\u91cf\uff0c\u6bcf\u79cd\u7269\u54c1\u6709\u4f53\u79ef \\(v_i\\) \u548c\u4ef7\u503c \\(w_i\\) \uff0c\u6bcf\u79cd\u7269\u54c1\u53ef\u4ee5\u6709\u65e0\u7a77\u591a\u4e2a\uff0c\u95ee\u4f60\u80fd\u83b7\u5f97\u7684\u4ef7\u503c \\(\\max\\) \u3002 \u72b6\u6001\u5c5e\u6027\u548c\u8868\u793a\u96c6\u5408\u4e0e 01 \u80cc\u5305\u4e00\u6837\uff0c\u4e0d\u540c\u7684\u5730\u65b9\u518d\u4e8e\u96c6\u5408\u7684\u5212\u5206\u3002 \u8fd9\u6b21\u4e0d\u662f\u9009\u6216\u8005\u4e0d\u9009\u4e86\uff0c\u800c\u662f\u7b2c \\(i\\) \u79cd\u7269\u54c1\u9009 \\(n\\) \u4e2a\uff0c\uff08\u80af\u5b9a\u4e0d\u4f1a\u62ff\u65e0\u7a77\u591a\u4e2a\uff0c\u6bcf\u79cd\u6700\u591a\u4e5f\u5c31 \\(\\lfloor \\frac{m}{v_i} \\rfloor = s\\) \u4e2a\uff09\u3002 \u66b4\u529b\u505a\u6cd5\u5c31\u662f\u679a\u4e3e \\(s\\) \u6b21\u8fdb\u884c\u51b3\u7b56\uff0c \\(\\text{O}(n^3)\\) \u3002 \u65b9\u7a0b\uff1a \\[f_{i,j} = \\max\\limits_{0\\le k\\le s}\\{f_{i-1,j-kv_i}+kw_i\\}\\] \u53ef\u4ee5\u8003\u8651\u628a\u6bcf\u4e2a\u5b50\u96c6\u7684\u5f0f\u5b50\u5c55\u5f00\uff1a \u6574\u4e2a\u96c6\u5408 \\(f_{i,j}\\) \uff1a \\[f_{i,j} = \\max(f_{i-1,j},f_{i-1,j-v_i}+w_i,f_{i-1,j-2v_i}+2w_i,\\dots f_{i-1,j-sv_i}+sw_i)\\cdots \\text{Formula A}\\] \u9009\u4e00\u4e2a \\(i\\) \u4e4b\u540e\u7684\u5b50\u96c6 \\(f_{i,j-v_i}\\) \uff1a \\[f_{i,j-v_i} = \\max(f_{i-1,j-v_i},f_{i-1,j-2v_i}+w_i,\\dots,f_{i-1,j-sv_i}+(s-1)w_i)\\cdots \\text{Formula B}\\] \u540e\u9762\u7684\u5f0f\u5b50\u4e5f\u662f\u4e00\u6837\u9012\u63a8\u5b9a\u4e49\uff0c\u6211\u4eec\u73b0\u5728\u53ea\u8003\u8651\u8fd9\u4e24\u4e2a\u5f0f\u5b50 \\(\\text{A,B}\\) \u3002 \u53d1\u73b0\u62ec\u53f7\u91cc\u7684\u5f0f\u5b50\u975e\u5e38\u7684\u7c7b\u4f3c\uff0c\u7ed9\u5f0f\u5b50 \\(\\text{B}\\) \u7684 \\(\\max\\) \u4e2d\u7684\u6bcf\u4e00\u9879\u52a0\u4e0a \\(w_i\\) \u5c31\u53d8\u6210\u4e86\u5f0f\u5b50 \\(\\text{A}\\) \uff0c \u6240\u4ee5\u53ef\u4ee5\u6709\uff1a \\[f_{i,j}=\\max \\begin{cases}f_{i,j-v_i}+w_i & j \\ge v_i \\\\ f_{i-1,j} & \\text{otherwise.}\\end{cases}\\] \u6ce8\u610f\u7b2c\u4e00\u79cd\u60c5\u51b5\u662f \\(f_{i,j-v_i}\\) \u800c\u4e0d\u662f \\(f_{i-1,j-v_i}\\) \u3002 \u7c7b\u4f3c\u4e8e01\u80cc\u5305\uff0c\u5b83\u53ef\u4ee5\u5316\u6210\u4e00\u7ef4\u7684\uff0c\u4e0d\u8fc7\u56e0\u4e3a\u6bcf\u4e2a\u7269\u54c1\u53ef\u4ee5\u65e0\u9650\u4f7f\u7528\uff0c\u5e76\u4e14\u72b6\u6001\u53ef\u80fd\u5728\u540c\u9636\u6bb5\u8fdb\u884c\u8f6c\u79fb\u3002\u6240\u4ee5 \u6b63\u5e8f\u5faa\u73af \u3002\uff08\u548c01\u80cc\u5305\u7565\u6709\u4e0d\u540c\uff0c\u753b\u56fe\u5373\u53ef\uff09 1 2 3 4 5 for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = v [ i ]; j <= m ; ++ j ){ f [ j ] = max ( f [ j ], f [ j - v [ i ]] + w [ i ]); } } return printf ( \"%d \\n \" , f [ m ]), 0 ; \u591a\u91cd\u80cc\u5305 \u00b6 \u7ed9\u4f60 \\(n\\) \u79cd\u7269\u54c1\uff0c\u4f60\u6709 \\(m\\) \u7684\u5bb9\u91cf\uff0c\u6bcf\u79cd\u7269\u54c1\u6709 \\(c_i\\) \u4e2a\uff0c\u4f53\u79ef \\(v_i\\) \uff0c\u4ef7\u503c \\(w_i\\) \uff0c\u95ee\u4f60\u80fd\u591f\u83b7\u5f97\u7684\u4ef7\u503c Max \u7b2c\u4e00\u79cd\u65b9\u6cd5\u662f\u8003\u8651\u76f4\u63a5\u628a\u6bcf\u79cd\u7269\u54c1\u62c6\u6210 \\(c_i\\) \u4e2a\u4e0d\u540c\u7269\u54c1\u8fdb\u884c 01\u80cc\u5305\u3002 1 2 3 4 5 6 7 for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= c [ i ]; ++ j ){ for ( register int k = m ; k >= v [ i ]; -- k ){ f [ k ] = max ( f [ k ], f [ k - v [ i ]] + w [ i ]); } } } return printf ( \"%d \\n \" , f [ m ]), 0 ; \u548c\u5b8c\u5168\u80cc\u5305\u7684\u7b2c\u4e00\u79cd\u66b4\u529b\u505a\u6cd5\u57fa\u672c\u4e00\u6837\u3002 \u6211\u4eec\u5148\u628a\u8fd9\u79cd\u5f62\u5f0f\u4e0b\u7684\u65b9\u7a0b\u5199\u51fa\u6765\uff1a \\(f_{i,j}\\) \u8868\u793a\u5728\u524d \\(i\\) \u79cd\u7269\u54c1\u91cc\u9009\uff0c\u7a7a\u95f4\u4e0d\u8d85\u8fc7 \\(j\\) \u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u4ef7\u503c\u548c Max\u3002 \u90a3\u4e48\u8003\u8651\u679a\u4e3e\u7684\u5c31\u662f\u6bcf\u79cd\u7269\u54c1\u9009\u591a\u5c11\u4e2a \uff08 \\(cnt\\) \uff09\u3002 \u6240\u4ee5\u6709\u65b9\u7a0b\uff1a \\[f_{i,j}=\\max\\limits_{0 \\le cnt \\le c_i}\\{f_{i-1,j-cnt\\times v_i}+cnt\\times w_i\\}\\] \u6eda\u52a8\u6570\u7ec4\u4e4b\u540e\u53ef\u4ee5\u5f97\u5230\u65b9\u7a0b\uff08 \\(f_{i-1,j}\\) \u76f4\u63a5\u88ab\u7ee7\u627f\u4e86\uff0c\u6240\u4ee5\u4e0d\u7528\u8ba9 \\(cnt=0\\) \u4e86\uff09\uff1a \\[f_j = \\max\\limits_{1\\le cnt \\le c_i}\\{f_{j-cnt\\times v_i} + cnt \\times w_i\\}\\] \u628a\u5f0f\u5b50\u5c55\u5f00\uff1a \\[f_{j}=\\max(f_{j},f_{j-v_i}+w_i,\\dots,f_{j-c_i\\times v_i}+c_i \\times w_i) \\cdots \\text{Formula A}\\] \u4f9d\u65e7\u89c2\u5bdf \\(f_{j-v_i}\\) \u9879\uff0c\u770b\u662f\u5426\u53ef\u4ee5\u4f18\u5316\uff1a \uff08\u628a \\(f_{j-v_i}\\) \u5f53\u4f5c \\(f_{j}\\) \u4ee3\u5165\u6700\u4e0a\u9762\u7684\u65b9\u7a0b\uff0c\u6b64\u5904\u5148\u4e0d\u8003\u8651\u80cc\u5305\u591f\u4e0d\u591f\u7528 \uff09 \\[f_{j-v_i}=\\max\\limits_{1 \\le cnt \\le c_i} \\{f_{j-v_i-cnt\\times v_i}+cnt\\times w_i\\}\\] \\[\\Rightarrow f_{j-v_i}=\\max(f_{j-v_i},f_{j-2v_i}+w_i,\\dots,f_{j-c_i\\times v_i}+(c_i-1)\\times w_i,f_{j-(c_i+1)v_i}+c_i\\times w_i) \\cdots \\text{Formula B}\\] \u7136\u540e\u4f60\u4f1a\u53d1\u73b0\uff0c\u8fd9\u91cc\u6ca1\u6cd5\u50cf\u5b8c\u5168\u80cc\u5305\u90a3\u6837\u4f18\u5316\u4e86\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u5f0f\u5b50 \\(\\text{B}\\) \u4e0d\u53ea\u662f\u6bd4\u5f0f\u5b50 \\(\\text{A}\\) \u6bcf\u9879\u5c11\u4e86 \\(w_i\\) \u3002 \u56e0\u4e3a\u5f0f\u5b50 \\(\\text{B}\\) \u7684\u51b3\u7b56\u96c6\u5408\u91cc\u6ca1\u6709 \\(f_{j}\\) \u8fd9\u4e00\u9879\uff0c\u5374\u591a\u4e86 \\(f_{j-(c_i+1)v_i}\\) \u8fd9\u4e00\u9879\uff0c \u6240\u4ee5\u6211\u4eec\u662f\u6ca1\u529e\u6cd5\u76f4\u63a5\u4ece\u5f0f\u5b50 \\(\\text{B}\\) \u63a8\u5230\u5f0f\u5b50 \\(\\text{A}\\) \u53bb\u7684\u3002 \u4f46\u662f\u6ce8\u610f\u5230\u6eda\u52a8\u6570\u7ec4\u4e4b\u540e\uff0c\u65b9\u7a0b\u7684\u6837\u5b50\u5f88\u7c7b\u4f3c \\(f_i = \\max\\limits_{L(i)\\le j \\le R(i)}{f_j + val(i,j)}\\) \u7684\u5f62\u5f0f\u3002 \u6211\u4eec\u53c8\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u5f88\u6709\u610f\u601d\u7684\u6027\u8d28\uff1a \u51b3\u7b56\u96c6\u5408\u7684\u53d8\u5316\u957f\u7684\u548b\u8fd9\u4e48\u50cf\u5355\u8c03\u961f\u5217\u5462\uff1f \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u6eda\u52a8\u6570\u7ec4\u4e4b\u540e\u5229\u7528\u5355\u8c03\u961f\u5217\u4f18\u5316\u3002 \u56e0\u4e3a\u6eda\u52a8\u6570\u7ec4\u4e4b\u540e\u662f\u5012\u63a8\u7684\uff0c\u6240\u4ee5\u88ab\u5355\u8c03\u961f\u5217\u5148\u5f39\u51fa\u7684\u662f \\(f_j\\) \uff0c\u8fdb\u6765\u7684\u662f\u7684 \\(f_{j-(c_i+1)v_i}\\) \u3002 \u7136\u540e\u4f60\u53d1\u73b0\uff0c\u5bf9\u4e8e\u540c\u4e00\u4e2a \\(i\\) \u53ef\u4ee5\u628a\u6240\u6709\u7684 \\(j\\) \u5206\u6210 \\(v_i\\) \u7ec4\uff0c\u4f9d\u636e\u662f\u9664\u4ee5 \\(v_i\\) \u7684\u4f59\u6570 \\(\\overline{0}\\) \u5269\u4f59\u7cfb\uff1a \\(\\{0,v_i,2v_i\\dots\\}\\) \\(\\overline{1}\\) \u5269\u4f59\u7cfb\uff1a \\(\\{1,v_i+1,2v_i+1\\}\\) \\(\\dots\\) \\(\\overline{v_i-1}\\) \u5269\u4f59\u7cfb \\(\\{v_i-1,2v_i-1,3v_i-1\\dots\\}\\) \u7136\u540e\u5728\u6bcf\u4e00\u4e2a\u5269\u4f59\u7cfb\u91cc\u9762\u5229\u7528\u5355\u8c03\u961f\u5217\u5355\u72ec\u8f6c\u79fb\uff0c\u53ef\u4ee5\u53d1\u73b0\u4ed6\u4eec\u4e92\u4e0d\u5e72\u6270\u3002 \u7b80\u5355\u6765\u8bf4\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(i\\) \uff0c\u5faa\u73af\u4f59\u6570 \\(u \\in [0,v_i)\\) \u3002 \u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u56fa\u5b9a\u7684 \\(u\\) \uff0c\u5012\u5e8f\u5faa\u73af\u500d\u6570 \\(p=\\lfloor \\frac{m-u}{v_i}\\rfloor \\to 0\\) \u5047\u8bbe\u5f53\u524d\u72b6\u6001\u662f \\(j=u+p\\times v_i\\) \uff0c\u90a3\u4e48 \\(f_{j}=\\max\\limits_{p-c_i\\le k \\le p-1}\\{f_{u+k\\times v_i}+(p-k)\\times w_i\\}\\) \u4e0b\u754c\u662f \\(p-c_i\\) \u5f88\u597d\u7406\u89e3\uff0c\u56e0\u4e3a\u4f60\u53ea\u80fd\u62ff \\(c_i\\) \u4e2a\uff0c\u4f46\u662f\u4e3a\u5565\u4e0a\u9650\u662f \\(p-1\\) \u800c\u4e0d\u662f \\(p\\) \u5462\uff1f \u56e0\u4e3a\u8fd9\u91cc\u6eda\u52a8\u6570\u7ec4\u4e86\uff0c\u76f8\u5f53\u4e8e \\(f_{i,j}\\) \u76f4\u63a5\u7ee7\u627f\u4e86 \\(f_{i-1,j}\\) \u7136\u540e\u5f00\u59cb\u53d6 \\(\\max\\) \u3002 \u73b0\u5728\u628a \\(i,u\\) \u770b\u6210\u5b9a\u503c \uff0c\u4e5f\u5c31\u662f\u53ea\u8003\u8651\u5185\u5c42\u5faa\u73af \\(p\\) \u3002\u5012\u5e8f\u679a\u4e3e\u7684\u65f6\u5019\uff0c\u5982\u679c \\(p\\) \u51cf\u5c11 \\(1\\) \uff0c\u90a3\u4e48 \\(k\\) \u7684\u8303\u56f4\u4e5f\u4f1a\u76f8\u5bf9\u5411\u4f4e\u65b9\u5411\u6ed1\u52a8\u4e00\u4e2a\u5355\u4f4d\u3002 \u7136\u540e\u518d\u770b\u65b9\u7a0b\u91cc\u9762\uff1a \\(f_{u+k\\times v_i}-kw_i+pw_i\\) \uff0c\u52a0\u53f7\u524d\u9762\u7684\u90e8\u5206\u662f \u5173\u4e8e \\(k\\) \u7684 \uff0c\u540e\u534a\u90e8\u5206\u662f \u5173\u4e8e \\(p\\) \u7684 \u3002 \u56e0\u4e3a \\(k\\) \u662f\u5728 \u5355\u8c03\u9012\u51cf \uff0c\u6240\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u51b3\u7b56\u70b9 \\(k\\) \u5355\u8c03\u9012\u51cf\uff0c\u961f\u5934\u4e3a \\(f_{u+k\\times v_i}-kw_i\\) \u7684 \u6700\u5927\u503c \u7684\u5355\u8c03\u961f\u5217\u3002 \u6bcf\u6b21\u5355\u8c03\u961f\u5217\u7684\u65f6\u5019\uff0c\u5148\u628a\u961f\u5934\u8d85\u8fc7 \\(p-1\\) \u7684\u5f39\u6389\uff0c\u7136\u540e\u53d6\u961f\u5934\u4e3a\u6700\u4f18\u51b3\u7b56\u8fdb\u884c\u8f6c\u79fb\u3002 \u6700\u540e\u628a\u65b0\u52a0\u5165\u7684\u51b3\u7b56 \\(k=p-c_i-1\\) \u63d2\u5165\u961f\u5217\u7684\u5c3e\u90e8\uff0c\u68c0\u67e5\u5355\u8c03\u6027\uff0c\u6392\u9664\u5197\u6742\u3002 \u4e3a\u4ec0\u4e48\u662f \\(k = p-c_i -1\\) \u5462\uff1f\u56e0\u4e3a\u539f\u6765\u7684\u4e0b\u754c\u662f \\(p - c_i\\) \uff0c\u800c\u6bcf\u6b21\u5165\u961f\u7684\u90fd\u662f \\(cnt\\) \u5c0f \\(1\\) \u7684\uff0c\u4e5f\u5c31\u662f\u500d\u6570 \\(k\\) \u5c0f \\(1\\) \u7684\uff0c\u81ea\u7136\u5c31\u662f \\(p-c_i-1\\) \u3002 \u56e0\u4e3a\u91cc\u9762\u4e24\u5c42\u7684\u5faa\u73af\u76f8\u5f53\u4e8e\u904d\u5386\u4e86 \\([0,m]\\) \uff0c\u6240\u4ee5\u590d\u6742\u5ea6 \\(\\text{O}(nm)\\) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 /* * @Author: black_trees * @Date: 2022-02-01 12:49:34 * @Last Modified by: black_trees * @Last Modified time: 2022-02-01 13:21:38 */ #include <bits/stdc++.h> using namespace std ; constexpr int si_n = 1e3 + 10 ; constexpr int si_v = 2e4 + 10 ; int n , m ; int v [ si_n ], w [ si_n ], c [ si_n ]; int f [ si_v ], q [ si_v ]; int main (){ #ifndef ONLINE_JUDGE freopen ( \"Input.txt\" , \"r\" , stdin ); freopen ( \"Output.txt\" , \"w\" , stdout ); #endif scanf ( \"%d%d\" , & n , & m ); for ( register int i = 1 ; i <= n ; ++ i ){ scanf ( \"%d%d%d\" , & v [ i ], & w [ i ], & c [ i ]); } auto calc = [ & ]( int u , int i , int k ) -> int { return f [ u + k * v [ i ]] - k * w [ i ]; }; for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int u = 0 ; u < v [ i ]; ++ u ){ int head = 1 , tail = 0 ; memset ( q , 0 , sizeof q ); int mxp = ( m - u ) / v [ i ]; // \u4ece\u8fd9\u5f00\u59cb\uff0c\u5728\u7b2c\u4e09\u5c42\u4ee5\u5185\uff0c\u8ba4\u4e3a i \u548c u \u662f\u56fa\u5b9a\u7684 for ( register int k = mxp -1 ; k >= max ( mxp - c [ i ], 0 ); -- k ){ while ( head <= tail && calc ( u , i , q [ tail ]) <= calc ( u , i , k )) -- tail ; q [ ++ tail ] = k ; } // \u628a\u521d\u59cb\u7684\u51b3\u7b56\u96c6\u5408\u63d2\u5165 // \u6b64\u5904\u7684\u51b3\u7b56\u96c6\u5408\u53ef\u4ee5\u7406\u89e3\u4e3a\u56fe\u4e2d \"f[j]\" \u7cfb\u7684\u51b3\u7b56\u5019\u9009\u96c6\u5408\u3002 for ( register int p = ( m - u ) / v [ i ]; p >= 0 ; -- p ){ while ( head <= tail && q [ head ] > p -1 ) ++ head ; // \u8fc7\u671f\u7684\u5f39\u6389 if ( head <= tail ) f [ u + p * v [ i ]] = max ( f [ u + p * v [ i ]], calc ( u , i , q [ head ]) + p * w [ i ]); // \u5355\u8c03\u961f\u5217\u975e\u7a7a\u7684\u65f6\u5019\u624d\u53ef\u4ee5\u6709max\u6765\u8f6c\u79fb\u3002 if ( p - c [ i ] -1 >= 0 ){ while ( head <= tail && calc ( u , i , q [ tail ]) <= calc ( u , i , p - c [ i ] -1 )) -- tail ; q [ ++ tail ] = p - c [ i ] -1 ; } // \u5982\u679c\u65b0\u52a0\u5165\u7684\u51b3\u7b56\u5c0f\u4e8e0\u4e86\uff0c\u90a3\u4e48\u5c31\u4e0d\u7528\u52a0\u4e86\uff08\u90fd\u6ca1\u4e86\u8fd8\u52a0\u5565\uff09 } } } return printf ( \"%d \\n \" , f [ m ]), 0 ; } \u4e0a\u9762\u5199\u7684\u4f3c\u4e4e\u6709\u70b9\u7455\u75b5 \uff08 \\(f_{j-(c_i+1)v_i}\\) \u8fd9\u4e2a\u72b6\u6001\u4f3c\u4e4e\u4e0d\u80fd\u5b58\u5728\uff09\uff0c\u4e0d\u8fc7\u80fd\u7406\u89e3\u201c\u51b3\u7b56\u96c6\u5408\u7684\u5355\u8c03\u53d8\u5316\u201d\u5c31\u884c\u4e86\u3002 \u5206\u7ec4\u80cc\u5305 \u00b6 \u7ed9\u4f60 \\(n\\) \u7ec4\u7269\u54c1\uff0c\u6bcf\u7ec4\u6709 \\(c_i\\) \u4e2a\uff0c\u4f53\u79ef\u5206\u522b\u4e3a \\(v_{i,j}\\) \uff0c\u4ef7\u503c\u5206\u522b\u4e3a \\(w_{i,j}\\) \uff0c\u4f60\u6709 \\(m\\) \u7684\u7a7a\u95f4\uff0c\u6bcf\u7ec4\u6700\u591a\u9009\u4e00\u4e2a\uff0c\u6c42\u4ef7\u503cMax \u53d1\u73b0\u5c31\u662f01\u80cc\u5305\u548c\u591a\u91cd\u80cc\u5305\u7684\u53d8\u4f53\u3002 \u6211\u4eec\u8003\u8651\u5148\u5957\u4e0a 01 \u80cc\u5305\u7684\u677f\u5b50\uff0c\u7136\u540e\u5728\u91cc\u9762\u8fdb\u884c\u51b3\u7b56\u3002 1 2 3 4 5 for \u7ec4 \uff08 \u7269\u54c1 \uff09 for \u4f53\u79ef for \u51b3\u7b56 if \u6ee1\u8db3\u6761\u4ef6 \u8f6c\u79fb \u4e0d\u8fc7\u8fd9\u91cc\u4e00\u5b9a\u8981\u6ce8\u610f\uff0c \\(j\\) \u8981\u5168\u90e8\u626b\u4e00\u904d\uff0c\u56e0\u4e3a\u51b3\u7b56\u91cc\u9762\u7684\u90a3\u51e0\u4e2a\u7269\u54c1\u7684\u4f53\u79ef\u662f\u4f1a\u53d8\u7684\u3002 \u5982\u679c\u662f\u4e8c\u7ef4\u72b6\u6001\uff0c\u5c31\u5728\u7b2c\u4e09\u5c42\u5faa\u73af\u5916\u9762\u5148 f[i][j]=f[i-1][j]; \u3002 \u5982\u679c\u662f\u4e00\u7ef4\u72b6\u6001\uff0c\u5c31\u53ea\u9700\u8981\u5728\u7b2c\u4e09\u5c42\u91cc\u591a\u4e00\u4e2a\u7279\u5224\uff0c\u5e76\u8c03\u6574\u7b2c\u4e8c\u5c42\u5faa\u73af\u3002 1 2 3 4 5 6 7 for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = m ; j >= 0 ; -- j ){ for ( register int k = 1 ; k <= c [ i ]; ++ k ){ if ( j >= v [ i ][ k ]) f [ j ] = max ( f [ j ], f [ j - v [ i ][ k ]] + w [ i ][ k ]); } } } return printf ( \"%d \\n \" , f [ m ]), 0 ; \u6811\u4e0a\u80cc\u5305 \u00b6 \u7269\u54c1\u4e4b\u95f4\u5177\u6709\u4f9d\u8d56\u5173\u7cfb\uff0c\u4e14\u4f9d\u8d56\u5173\u7cfb\u7ec4\u6210\u4e00\u68f5\u6811\u7684\u5f62\u72b6\u3002\u5982\u679c\u9009\u62e9\u4e00\u4e2a\u7269\u54c1\uff0c\u5219\u5fc5\u987b\u9009\u62e9\u5b83\u7684\u7236\u8282\u70b9\u3002 \u4f60\u6709 \\(n\\) \u4e2a\u7269\u54c1\uff0c \\(m\\) \u7684\u7a7a\u95f4\uff0c\u95ee\u4ef7\u503c Max \u8003\u8651\u8bbe\u72b6\u6001 \\(f_{u,j}\\) \uff0c\u8868\u793a\u7684\u96c6\u5408\u4e3a \"\u5728\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u5f53\u4e2d\uff0c\u7a7a\u95f4\u4e0d\u8d85\u8fc7 \\(j\\) \u7684\u6240\u6709\u65b9\u6848\"\uff0c\u5c5e\u6027\u4e3a\u4ef7\u503c\u7684 Max \\(u\\) \u80af\u5b9a\u4e5f\u4f1a\u6709\u5f88\u591a\u5b50\u6811\uff08\u9664\u975e\u5b83\u662f\u53f6\u5b50\uff09 \uff0c\u90a3\u4e48\u5c31\u9700\u8981\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b50\u6811\u8fdb\u884c\u8ba8\u8bba\uff0c\u770b\u7ed9\u5b83\u5206\u914d\u591a\u5c11\u7a7a\u95f4\u3002 \u6240\u4ee5\u72b6\u6001\u5212\u5206\u4e3a \\(u\\) \u7684\u513f\u5b50\u4e2a\u6570\u4e2a\u5927\u5b50\u96c6\uff0c\u5206\u522b\u4ee3\u8868\u9009\u5bf9\u5e94\u7684\u5b50\u6811\u7684\u60c5\u51b5\u3002 \u6bcf\u4e00\u4e2a\u5927\u5b50\u96c6\u53c8\u5206\u6210\u591a\u4e2a\u5c0f\u5b50\u96c6\uff0c\u8868\u793a\u7ed9\u8fd9\u4e2a\u5b50\u6811\u5206\u914d\u7684\u7a7a\u95f4\u3002 \u8fd9\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u5206\u7ec4\u80cc\u5305\uff0c\u95ee\u9898\u7b49\u4ef7\u4e8e\uff1a \u6709 \\(|son(u)|\\) \u7ec4\u7269\u54c1\uff08\u6bcf\u4e2a\u513f\u5b50\u7684\u5b50\u6811\u7b97\u4e00\u7ec4\uff09\uff0c\u6bcf\u7ec4\u7269\u54c1\u90fd\u6709 \\(j - v_u\\) \u4e2a\u3002 \u5176\u4e2d\u7b2c \\(i\\) \u7ec4\u7b2c \\(x\\) \u4e2a\u7269\u54c1\u7684\u4f53\u79ef\u662f \\(x\\) \uff0c\u4ef7\u503c\u662f \\(f_{son(u)_i,x}\\) \uff0c\u80cc\u5305\u7684\u603b\u5bb9\u79ef\u662f \\(j-v_u\\) \u3002 \u8981\u4ece\u6bcf\u7ec4\u5f53\u4e2d\u9009\u51fa\u4e0d\u8d85\u8fc7\u4e00\u4e2a\u7269\u54c1\uff08\u6bcf\u4e2a\u5b50\u8282\u70b9 \\(son(u)_i\\) \u53ea\u80fd\u9009\u62e9\u4e00\u4e2a\u72b6\u6001\uff08\u5206\u914d\u7684\u7a7a\u95f4 \\(x\\) \uff09\u8f6c\u79fb\u5230 \\(u\\) \u3002\uff09\u3002 \u5e76\u4e14\u9009\u51fa\u7684\u603b\u4f53\u79ef\u4e0d\u80fd\u8d85\u8fc7 \\(j - v_u\\) \uff08\u5fc5\u987b\u5148\u9009 \\(u\\) \uff09\uff0c\u6c42\u6700\u5927\u4ef7\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 inline void dfs ( int u , int fa ){ for ( register int i = 0 ; i < ( int ) g [ u ]. size (); ++ i ){ int ver = g [ u ][ i ]; if ( ver == fa ) continue ; dfs ( ver , u ); for ( register int j = m - v [ u ]; j >= 0 ; -- j ){ // \u679a\u4e3e\u6392\u9664 u \u81ea\u5df1\u7684\uff0c\u603b\u5171\u53ef\u4ee5\u5f80\u4e0b\u5206\u914d\u7684\u7a7a\u95f4 for ( register int k = 0 ; k <= j ; ++ k ){ // \u53ef\u4ee5\u7ed9\u5f53\u524d\u5b50\u6811\u5206\u914d\u7684\u7a7a\u95f4 f [ u ][ j ] = max ( f [ u ][ j ], f [ u ][ j - k ] + f [ ver ][ k ]); } } } for ( register int i = m ; i >= v [ u ]; -- i ){ // \u628a u \u52a0\u4e0a f [ u ][ i ] = f [ u ][ i - v [ u ]] + w [ u ]; } for ( register int i = 0 ; i < v [ u ]; ++ i ){ // \u8fde u \u7684\u7a7a\u95f4\u90fd\u65e0\u6cd5\u6ee1\u8db3\uff0c0 f [ u ][ i ] = 0 ; } } ### \u72b6\u6001\u7684 \u201c\u6070\u597d\u201d\u201c\u81f3\u591a\u201d\u201c\u81f3\u5c11\u201d \u6700\u4e3b\u8981\u7684\u533a\u522b\u5c31\u662f\u4ed6\u4eec\u7684\u5b57\u9762\u610f\u601d\uff0c\u4f7f\u7528\u5bf9\u5e94\u72b6\u6001\u7684\u65f6\u5019\u8981\u60f3\u6e05\u695a\u8fd9\u79cd\u5bf9\u5e94\u7684\u72b6\u6001\u8981\u600e\u4e48\u5199\u3002 \u521d\u59cb\u503c\u548c\u7ec8\u6001\u8981\u6839\u636e\u72b6\u6001\u672c\u8eab\u7684 \u5b9a\u4e49 \u6765\u5199\u3002 \u8fd9\u91cc\u5047\u5b9a\u9700\u8981\u6c42\u89e3\u7684\u95ee\u9898\u662f\u666e\u901a\u768401\u80cc\u5305\uff0c\u72b6\u6001\u8bbe\u8ba1\u4e3a\u4e8c\u7ef4\uff0c\u65e0\u6eda\u52a8\u6570\u7ec4\uff0c\u53ea\u9700\u8981\u4ef7\u503c\u6700\u5927\u5373\u53ef\uff0c\u6ca1\u6709\u6070\u597d\u88c5\u6ee1\u7684\u6761\u4ef6\u3002 \u6070\u597d \u5b8c\u6574\u7684\u72b6\u6001\u662f\uff1a\u8003\u8651\u4ece \u524d \\(i\\) \u4e2a\u7269\u54c1\u91cc\u9762\u9009\uff0c\u6070\u597d\u7528 \\(j\\) \u7684\u7a7a\u95f4\u7684\u6240\u6709\u65b9\u6848\uff0c\u6743\u503c\u548c\u7684\u6700\u5927\u503c\u3002 \u56e0\u4e3a \\(f_0\\) \u7cfb\u7684\u72b6\u6001\u5c31\u662f\u6240\u6709\u7684\u8003\u8651\u4ece\u524d \\(0\\) \u4e2a\u7269\u54c1\u91cc\u9009\uff08\u4e0d\u9009\uff09\u7684\u60c5\u51b5\u3002 \u6240\u4ee5\u5728\u201c\u6070\u597d\u201d\u7684\u7ea6\u675f\u4e0b\uff0c\u53ea\u6709 \\(f_{0,0}=0\\) ,\u4e5f\u5c31\u662f\u6070\u597d\u7528 \\(0\\) \u7684\u7a7a\u95f4\u624d\u662f\u5408\u6cd5\u7684\u3002 \u5176\u4ed6\u7684\u4e0d\u5408\u6cd5\u6761\u4ef6\u90fd\u8981\u8bbe\u7f6e\u4e3a \\(-\\infty\\) \uff0c\uff08\u4e0d\u4ec5\u8868\u793a\u201c\u4e0d\u5408\u6cd5\u201d\uff0c\u4e5f\u662f\u4e3a\u4e86\u4e4b\u540e\u8f6c\u79fb\uff09 \u6240\u4ee5\u4f1a\u8fd9\u4e48\u5199\uff1a 1 memset ( f , 0xcf , sizeof f ), f [ 0 ][ 0 ] = 0 ; \u90a3\u4e48\uff0c\u5728dp\u5b8c\u4e86\u4e4b\u540e\uff0c\u6211\u4eec\u9700\u8981\u626b\u63cf \\(f_n\\) \u7cfb\u7684\u72b6\u6001\uff0c\u56e0\u4e3a\u88c5\u4e0d\u6ee1\u4e5f\u6709\u53ef\u80fd\u662f\u6700\u503c\uff08\u5f53\u524d\u95ee\u9898\u6ca1\u6709\u6070\u597d\u7684\u9650\u5236\uff0c\u5982\u679c\u6709\uff0c\u76f4\u63a5\u8f93\u51fa\u7ec8\u6001\u5373\u53ef\uff09\u3002 \uff08\u4e0d\u8bba\u6709\u6ca1\u6709\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\u90fd\u9700\u8981\uff09 \u81f3\u591a \u5b8c\u6574\u7684\u72b6\u6001\u662f\uff1a\u8003\u8651\u4ece\u524d \\(i\\) \u4e2a\u7269\u54c1\u91cc\u9762\u9009\uff0c\u7528\u4e0d\u8d85\u8fc7 \\(j\\) \u7684\u7a7a\u95f4\u7684\u6240\u6709\u65b9\u6848\uff0c\u6743\u503c\u548c\u7684\u6700\u5927\u503c\u3002 \u56e0\u4e3a\u8fd9\u91cc\u7684\u9650\u5236\u662f\u4e0d\u8d85\u8fc7\uff0c\u6240\u4ee5 \\(f_0\\) \u7cfb\u7684\u6240\u6709\u72b6\u6001\u90fd\u662f\u5408\u6cd5\u7684\u3002 \u4f60\u60f3\uff0c\u4f60\u4e0d\u9009\u4efb\u4f55\u7269\u54c1\uff0c\u90a3\u81ea\u7136\u6240\u6709\u53ef\u80fd\u7684\u7a7a\u95f4\u7684\u4e0d\u4f1a\u8d85\u8fc7\u554a\u3002 \u6240\u4ee5\u521d\u59cb\u503c\u5168\u90e8\u8bbe\u7f6e\u4e3a \\(0\\) \u3002 \u90a3\u4e48\uff0c\u5728dp\u5b8c\u4e86\u4e4b\u540e\uff0c\u76f4\u63a5\u8f93\u51fa\u7ec8\u6001 \\(f_{n,m}\\) \u5373\u53ef\uff0c\uff08\u6bd5\u7adf\u72b6\u6001\u8bbe\u8ba1\u7684\u662f\u201c\u6240\u6709\u65b9\u6848\u201d\uff09 \u56e0\u4e3a\u81f3\u591a\u548c\u6070\u597d\u90fd\u9002\u7528\u4e8e \u201c\u6700\u5927\u201d\uff0c\u6240\u4ee5\u653e\u5728\u4e0a\u9762\uff0c\u800c\u81f3\u5c11\u9002\u7528\u4e8e\u201c\u6700\u5c0f\u201d\uff0c\u6240\u4ee5\u5355\u72ec\u5206\u79bb\uff08\u4e0d\u8fc7\u6070\u597d\u4e5f\u662f\u53ef\u4ee5\u505a\u7684\uff0c\u9053\u7406\u4e00\u6837\uff09 \u95ee\u9898\uff1a\u4f60\u81f3\u5c11\u9700\u8981\u7528 \\(j\\) \u7684\u7a7a\u95f4\uff0c\u6c42\u4ef7\u503c\u7684\u6700\u5c0f\u503c\u3002 \u81f3\u5c11 \u5b8c\u6574\u7684\u72b6\u6001\u662f\uff1a\u8003\u8651\u4ece\u524d \\(i\\) \u4e2a\u7269\u54c1\u5f53\u4e2d\u9009\uff0c\u81f3\u5c11\u7528 \\(j\\) \u7684\u7a7a\u95f4\u7684\u6240\u6709\u65b9\u6848\uff0c\u6743\u503c\u548c\u7684\u6700\u5c0f\u503c\u3002 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u662f\u548c\u4e0a\u9762\u5dee\u4e0d\u591a\u7684\uff0c\u4e0d\u8fc7\u521d\u59cb\u5316\u548c\u8f6c\u79fb\u65b9\u5f0f\u9700\u8981\u6539\u53d8\u3002 \u56e0\u4e3a\u5f53\u4f60\u4e0d\u9009\u7684\u65f6\u5019\uff0c\u53ea\u6709 \\(f_{0,0}=0\\) \u662f\u5408\u6cd5\u7684\uff0c\u6240\u4ee5\u5176\u4ed6\u7684\u8bbe\u7f6e\u4e3a \\(+\\infty\\) \u3002 1 memset ( f , 0x3f , sizeof f ), f [ 0 ][ 0 ] = 0 ; \u4f46\u662f\u8f6c\u79fb\u5c31\u7565\u6709\u4e0d\u540c\u4e86\u3002 \u5982\u679c\u8bf4\uff0c\u4f60\u679a\u4e3e\u5230\u7684 \\(j\\) \u6ca1\u6709\u529e\u6cd5\u6ee1\u8db3\u5f53\u524d \\(v_i\\) \u7684\u9700\u6c42\uff0c\u4e0d\u5e94\u8be5\u53ea\u662f\u7ee7\u627f\u4e0a\u4e00\u8f6e\u7684\u72b6\u6001\u3002 \u56e0\u4e3a\uff0c\u5728\u4e0d\u8003\u8651\u8bbf\u95ee\u65e0\u6548\u4e0b\u6807\u7684\u60c5\u51b5\u4e0b\uff0c \\(f_{i,j}=\\max\\{f_{i-1,j-v_i}\\},(j-v_i<0)\\) \u4e5f\u662f\u5408\u6cd5\u7684\u8f6c\u79fb\u3002 \u81f3\u5c11\u9700\u8981\u8d1f\u6570\u7684\u7a7a\u95f4\uff0c\u90a3\u4f60\u4e0d\u9009\u4e5f\u662f\u6ee1\u8db3\u7684\u554a\uff0c \\(f\\) \u53c8\u662f\u8bb0\u5f55\u6700\u5c0f\u503c\uff0c\u81ea\u7136\u9700\u8981\u628a \\(f_{i-1,j-v_i}=0\\) \u554a\u3002 \u6240\u4ee5\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u9700\u8981\u53d8\u6210\u8fd9\u6837\uff1a\uff08\u4ee3\u7801\u5199\u7684\u662f\u4e8c\u7ef4\u80cc\u5305\u4e0d\u6eda\u52a8\u7684\u60c5\u51b5\uff0c\u5176\u4ed6\u9053\u7406\u4e00\u6837\uff09 1 2 3 4 5 6 7 8 9 memset ( f , 0x3f , sizeof f ), f [ 0 ][ 0 ][ 0 ] = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 0 ; j <= O2_need ; ++ j ){ for ( register int k = 0 ; k <= N_need ; ++ k ){ f [ i ][ j ][ k ] = f [ i -1 ][ j ][ k ]; f [ i ][ j ][ k ] = min ( f [ i ][ j ][ k ], f [ i -1 ][ max ( 0 , j - a [ i ])][ max ( 0 , k - b [ i ])] + c [ i ]); } } } return printf ( \"%d \\n \" , f [ n ][ O2_need ][ N_need ]), 0 ;","title":"\u80cc\u5305DP"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%83%8C%E5%8C%85DP/#_1","text":"","title":"\u80cc\u5305\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%83%8C%E5%8C%85DP/#01","text":"\u7ed9\u4f60 \\(n\\) \u4e2a\u7269\u54c1\uff0c \\(m\\) \u7684\u5bb9\u91cf\uff0c\u6bcf\u4e2a\u7269\u54c1\u6709\u4f53\u79ef \\(v_i\\) \u548c\u4ef7\u503c \\(w_i\\) \uff0c\u95ee\u4f60\u80fd\u83b7\u5f97\u7684\u4ef7\u503c \\(\\max\\) \u3002 \u8003\u8651\u8bbe\u72b6\u6001 \\(f_{i,j}\\) \uff0c\u5176\u8868\u793a\u96c6\u5408\uff1a\u201c\u53ea\u4ece\u524d \\(i\\) \u4e2a\u91cc\u9762\u9009\uff0c\u7528\u7684\u7a7a\u95f4\u4e0d\u8d85\u8fc7 \\(j\\) \u7684\u6240\u6709\u65b9\u6848\u201d\uff0c\u5c5e\u6027\u4e3a\u9009\u62e9\u7684 \\(\\sum w_i\\) \u7684 Max \u90a3\u4e48\u96c6\u5408 \\(f_{i,j}\\) \u5c31\u53ef\u4ee5\u5212\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u524d \\(i\\) \u4e2a\u5f53\u4e2d\u9009\u7b2c \\(i\\) \u4e2a\u7269\u54c1\u7684\u6240\u6709\u60c5\u51b5\u548c\u524d \\(i\\) \u4e2a\u5f53\u4e2d\u4e0d\u9009\u7b2c \\(i\\) \u4e2a\u7269\u54c1\u7684\u6240\u6709\u60c5\u51b5\u3002 \u524d\u8005\u662f \\(f_{i-1,j-v_{i}}+w_i\\) \uff0c\u540e\u8005\u662f \\(f_{i-1,j}\\) \u3002 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \\(f_{i,j}=\\max\\limits_{1 \\le i \\le n,0 \\le j \\le m} \\begin{cases}f_{i-1,j-v_{i}}+w_i & j \\ge v_i\\\\ f_{i-1,j} & \\text{otherwise.}\\end{cases}\\) 1 2 3 4 5 6 7 8 9 10 // \u6ce8\u610f\u8fd9\u91cc\u7684\u72b6\u6001\u8bbe\u8ba1\u4e3a \u201c\u81f3\u591a\u201d\uff0c\u6240\u4ee5f\u7684\u521d\u503c\u5168\u90e8\u4e3a0\u3002 // \u5982\u679c\u662f f[0][0]=0,memset(f,0xcf,sizeof f) \u90a3\u5c31\u662f\u201c\u6070\u597d\u201d\uff0c\u9700\u8981\u5728\u6700\u540e\u626b\u63cf\u53d6\u6700\u5927\u503c\u3002 for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 0 ; j <= m ; ++ j ){ f [ i ][ j ] = f [ i -1 ][ j ]; } for ( register int j = v [ i ]; j <= m ; ++ j ){ f [ i ][ j ] = max ( f [ i ][ j ], f [ i -1 ][ j - v [ i ]] + w [ i ]); } } return printf ( \"%d \\n \" , f [ n ][ m ]), 0 ; \u8fd9\u91cc\u8981\u7279\u522b\u5f3a\u8c03\u65b9\u7a0b\u91cc\u7684 \\(j \\ge v_i\\) \u8fd9\u4e2a\u6761\u4ef6\uff0c\u5b83\u662f\u96c6\u5408 \\(f_{i,j}\\) \u5b58\u5728\u9009\u62e9\u5f53\u524d\u7269\u54c1\u8fd9\u4e2a\u5b50\u96c6\u7684\u5145\u8981\u6761\u4ef6\u3002 \u4e0d\u7136\u7684\u8bdd \\(f_{i,j}\\) \u8fde\u8fd9\u4e2a\u5b50\u96c6\u90fd\u6ca1\u6709\uff0c\u600e\u4e48\u8f6c\u79fb\uff1f \u4f46\u662f\u4e5f\u4e0d\u80fd\u4e0d\u8f6c\u79fb\uff0c\u53e6\u5916\u4e00\u4e2a\u5b50\u96c6\u662f\u65e0\u8bba\u5982\u4f55\u90fd\u5b58\u5728\u7684\uff0c\u6240\u4ee5\u5b83\u662f\u80af\u5b9a\u9700\u8981\u8f6c\u79fb\u7684\u554a\u3002 \u6240\u4ee5\u8fd9\u91cc\u6709\u79cd\u66f4\u597d\u7406\u89e3\u7684\u5199\u6cd5\uff1a 1 2 3 4 5 6 for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 0 ; j <= m ; ++ j ){ f [ i ][ j ] = f [ i -1 ][ j ]; if ( j >= v [ i ]) f [ i ][ j ] = max ( f [ i ][ j ], f [ i -1 ][ j - v [ i ]] + w [ i ]); } } return printf ( \"%d \\n \" , f [ n ][ m ]), 0 ; \u53e6\u5916\u4e0d\u8981\u5fd8\u4e86\uff0c \\(j\\) \u662f\u5df2\u7ecf\u4f7f\u7528\u7684\u7a7a\u95f4\uff0c\u662f\u53ef\u80fd\u4e3a \\(0\\) \u7684\uff0c\u4e0d\u8981\u6f0f\u4e86\u3002\u300e \u6761\u4ef6\u7684\u53d6\u503c\u8303\u56f4 \u300f \u8fd8\u6709\u72b6\u6001\u7684\u521d\u503c\uff08\u8fb9\u754c\uff0c\u6bd4\u5982\u4e0b\u6807\u4e3a \\(0\\) \u7684\u4e00\u7cfb\u5217\u4e1c\u897f\u662f\u4e0d\u662f\u4f1a\u6709\u7279\u6b8a\u7684\u5904\u7406\uff09\u300e \u72b6\u6001\u7684\u8fb9\u754c \u300f \u7136\u540e\u8fd9\u4e2a\u4e1c\u897f\u662f\u53ef\u4ee5\u4f18\u5316\u7684\uff0c\u6839\u636e\u7b2c\u4e8c\u79cd\u5199\u6cd5\u4e0d\u96be\u53d1\u73b0\uff0c\u6bcf\u6b21 \\(f_{i,j}\\) \u90fd\u4f1a\u7ee7\u627f\u4e0a\u4e00\u4e2a\u72b6\u6001 \\(f_{i-1,j}\\) \u3002 \u5e76\u4e14 \\(f_{i}\\) \u7cfb\u7684\u72b6\u6001\u53ea\u548c \\(f_{i-1}\\) \u7cfb\u7684\u72b6\u6001\u6709\u5173\u7cfb\uff0c\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u53bb\u6389\u7b2c\u4e00\u7ef4\u3002 \u4f46\u662f\u4e3a\u4e86\u4fdd\u8bc1\u65e0\u540e\u6548\u6027\uff0c\u4e5f\u5c31\u662f\u4fdd\u8bc1\u4e0d\u4f1a\u51fa\u73b0\u6574\u4e2a\u96c6\u5408\u63a8\u5b50\u96c6\u7684\u60c5\u51b5\u3002 \u6211\u4eec\u9700\u8981\u7814\u7a76\u4e0b\u65b9\u7a0b\u3002 \u8003\u8651\u5f53\u524d\u5faa\u73af\u5230 \\(j\\) \uff0c\u90a3\u4e48\u9700\u8981\u7684\u662f\u4e0a\u4e00\u6bb5\u72b6\u6001 \\(f_{i-1}\\) \u5f53\u4e2d\u7684 \\(j-v_i\\) \uff0c\u4e5f\u5c31\u662f\u5728 \\(j\\) \u7684\u524d\u9762\u3002 \u6211\u4eec\u9700\u8981\u8ba9\u6bcf\u4e2a\u7269\u54c1\u90fd\u53ea\u88ab\u62ff\u4e00\u6b21\uff0c\u6240\u4ee5\u8981\u4f7f\u7528 \u5012\u5e8f\u5faa\u73af \u3002 \u8fd9\u6837\uff0c \\(j\\) \u524d\u9762\u7684\u90e8\u5206\u90fd\u662f \\(i-1\\) \u9636\u6bb5\u7684\uff0c\u540e\u9762\u7684\u90fd\u662f \\(i\\) \u9636\u6bb5\u7684\u3002 1 2 3 4 5 for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = m ; j >= v [ i ]; -- j ){ f [ j ] = max ( f [ j ], f [ j - v [ i ]] + w [ i ]); } } return printf ( \"%d \\n \" , f [ m ]), 0 ; \u8fd9\u6837\u5b50\u4f60\u751a\u81f3\u4e0d\u9700\u8981\u521d\u59cb\u5316\uff0c\u53ea\u9700\u8981\u8ba9 \\(f[0]=0\\) \u5373\u53ef\uff0c\u56e0\u4e3a\u4e4b\u540e\u7684\u90fd\u4f1a\u8986\u76d6\u3002","title":"01\u80cc\u5305"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%83%8C%E5%8C%85DP/#_2","text":"\u7ed9\u4f60 \\(n\\) \u79cd\u7269\u54c1\uff0c \\(m\\) \u7684\u5bb9\u91cf\uff0c\u6bcf\u79cd\u7269\u54c1\u6709\u4f53\u79ef \\(v_i\\) \u548c\u4ef7\u503c \\(w_i\\) \uff0c\u6bcf\u79cd\u7269\u54c1\u53ef\u4ee5\u6709\u65e0\u7a77\u591a\u4e2a\uff0c\u95ee\u4f60\u80fd\u83b7\u5f97\u7684\u4ef7\u503c \\(\\max\\) \u3002 \u72b6\u6001\u5c5e\u6027\u548c\u8868\u793a\u96c6\u5408\u4e0e 01 \u80cc\u5305\u4e00\u6837\uff0c\u4e0d\u540c\u7684\u5730\u65b9\u518d\u4e8e\u96c6\u5408\u7684\u5212\u5206\u3002 \u8fd9\u6b21\u4e0d\u662f\u9009\u6216\u8005\u4e0d\u9009\u4e86\uff0c\u800c\u662f\u7b2c \\(i\\) \u79cd\u7269\u54c1\u9009 \\(n\\) \u4e2a\uff0c\uff08\u80af\u5b9a\u4e0d\u4f1a\u62ff\u65e0\u7a77\u591a\u4e2a\uff0c\u6bcf\u79cd\u6700\u591a\u4e5f\u5c31 \\(\\lfloor \\frac{m}{v_i} \\rfloor = s\\) \u4e2a\uff09\u3002 \u66b4\u529b\u505a\u6cd5\u5c31\u662f\u679a\u4e3e \\(s\\) \u6b21\u8fdb\u884c\u51b3\u7b56\uff0c \\(\\text{O}(n^3)\\) \u3002 \u65b9\u7a0b\uff1a \\[f_{i,j} = \\max\\limits_{0\\le k\\le s}\\{f_{i-1,j-kv_i}+kw_i\\}\\] \u53ef\u4ee5\u8003\u8651\u628a\u6bcf\u4e2a\u5b50\u96c6\u7684\u5f0f\u5b50\u5c55\u5f00\uff1a \u6574\u4e2a\u96c6\u5408 \\(f_{i,j}\\) \uff1a \\[f_{i,j} = \\max(f_{i-1,j},f_{i-1,j-v_i}+w_i,f_{i-1,j-2v_i}+2w_i,\\dots f_{i-1,j-sv_i}+sw_i)\\cdots \\text{Formula A}\\] \u9009\u4e00\u4e2a \\(i\\) \u4e4b\u540e\u7684\u5b50\u96c6 \\(f_{i,j-v_i}\\) \uff1a \\[f_{i,j-v_i} = \\max(f_{i-1,j-v_i},f_{i-1,j-2v_i}+w_i,\\dots,f_{i-1,j-sv_i}+(s-1)w_i)\\cdots \\text{Formula B}\\] \u540e\u9762\u7684\u5f0f\u5b50\u4e5f\u662f\u4e00\u6837\u9012\u63a8\u5b9a\u4e49\uff0c\u6211\u4eec\u73b0\u5728\u53ea\u8003\u8651\u8fd9\u4e24\u4e2a\u5f0f\u5b50 \\(\\text{A,B}\\) \u3002 \u53d1\u73b0\u62ec\u53f7\u91cc\u7684\u5f0f\u5b50\u975e\u5e38\u7684\u7c7b\u4f3c\uff0c\u7ed9\u5f0f\u5b50 \\(\\text{B}\\) \u7684 \\(\\max\\) \u4e2d\u7684\u6bcf\u4e00\u9879\u52a0\u4e0a \\(w_i\\) \u5c31\u53d8\u6210\u4e86\u5f0f\u5b50 \\(\\text{A}\\) \uff0c \u6240\u4ee5\u53ef\u4ee5\u6709\uff1a \\[f_{i,j}=\\max \\begin{cases}f_{i,j-v_i}+w_i & j \\ge v_i \\\\ f_{i-1,j} & \\text{otherwise.}\\end{cases}\\] \u6ce8\u610f\u7b2c\u4e00\u79cd\u60c5\u51b5\u662f \\(f_{i,j-v_i}\\) \u800c\u4e0d\u662f \\(f_{i-1,j-v_i}\\) \u3002 \u7c7b\u4f3c\u4e8e01\u80cc\u5305\uff0c\u5b83\u53ef\u4ee5\u5316\u6210\u4e00\u7ef4\u7684\uff0c\u4e0d\u8fc7\u56e0\u4e3a\u6bcf\u4e2a\u7269\u54c1\u53ef\u4ee5\u65e0\u9650\u4f7f\u7528\uff0c\u5e76\u4e14\u72b6\u6001\u53ef\u80fd\u5728\u540c\u9636\u6bb5\u8fdb\u884c\u8f6c\u79fb\u3002\u6240\u4ee5 \u6b63\u5e8f\u5faa\u73af \u3002\uff08\u548c01\u80cc\u5305\u7565\u6709\u4e0d\u540c\uff0c\u753b\u56fe\u5373\u53ef\uff09 1 2 3 4 5 for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = v [ i ]; j <= m ; ++ j ){ f [ j ] = max ( f [ j ], f [ j - v [ i ]] + w [ i ]); } } return printf ( \"%d \\n \" , f [ m ]), 0 ;","title":"\u5b8c\u5168\u80cc\u5305"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%83%8C%E5%8C%85DP/#_3","text":"\u7ed9\u4f60 \\(n\\) \u79cd\u7269\u54c1\uff0c\u4f60\u6709 \\(m\\) \u7684\u5bb9\u91cf\uff0c\u6bcf\u79cd\u7269\u54c1\u6709 \\(c_i\\) \u4e2a\uff0c\u4f53\u79ef \\(v_i\\) \uff0c\u4ef7\u503c \\(w_i\\) \uff0c\u95ee\u4f60\u80fd\u591f\u83b7\u5f97\u7684\u4ef7\u503c Max \u7b2c\u4e00\u79cd\u65b9\u6cd5\u662f\u8003\u8651\u76f4\u63a5\u628a\u6bcf\u79cd\u7269\u54c1\u62c6\u6210 \\(c_i\\) \u4e2a\u4e0d\u540c\u7269\u54c1\u8fdb\u884c 01\u80cc\u5305\u3002 1 2 3 4 5 6 7 for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= c [ i ]; ++ j ){ for ( register int k = m ; k >= v [ i ]; -- k ){ f [ k ] = max ( f [ k ], f [ k - v [ i ]] + w [ i ]); } } } return printf ( \"%d \\n \" , f [ m ]), 0 ; \u548c\u5b8c\u5168\u80cc\u5305\u7684\u7b2c\u4e00\u79cd\u66b4\u529b\u505a\u6cd5\u57fa\u672c\u4e00\u6837\u3002 \u6211\u4eec\u5148\u628a\u8fd9\u79cd\u5f62\u5f0f\u4e0b\u7684\u65b9\u7a0b\u5199\u51fa\u6765\uff1a \\(f_{i,j}\\) \u8868\u793a\u5728\u524d \\(i\\) \u79cd\u7269\u54c1\u91cc\u9009\uff0c\u7a7a\u95f4\u4e0d\u8d85\u8fc7 \\(j\\) \u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u4ef7\u503c\u548c Max\u3002 \u90a3\u4e48\u8003\u8651\u679a\u4e3e\u7684\u5c31\u662f\u6bcf\u79cd\u7269\u54c1\u9009\u591a\u5c11\u4e2a \uff08 \\(cnt\\) \uff09\u3002 \u6240\u4ee5\u6709\u65b9\u7a0b\uff1a \\[f_{i,j}=\\max\\limits_{0 \\le cnt \\le c_i}\\{f_{i-1,j-cnt\\times v_i}+cnt\\times w_i\\}\\] \u6eda\u52a8\u6570\u7ec4\u4e4b\u540e\u53ef\u4ee5\u5f97\u5230\u65b9\u7a0b\uff08 \\(f_{i-1,j}\\) \u76f4\u63a5\u88ab\u7ee7\u627f\u4e86\uff0c\u6240\u4ee5\u4e0d\u7528\u8ba9 \\(cnt=0\\) \u4e86\uff09\uff1a \\[f_j = \\max\\limits_{1\\le cnt \\le c_i}\\{f_{j-cnt\\times v_i} + cnt \\times w_i\\}\\] \u628a\u5f0f\u5b50\u5c55\u5f00\uff1a \\[f_{j}=\\max(f_{j},f_{j-v_i}+w_i,\\dots,f_{j-c_i\\times v_i}+c_i \\times w_i) \\cdots \\text{Formula A}\\] \u4f9d\u65e7\u89c2\u5bdf \\(f_{j-v_i}\\) \u9879\uff0c\u770b\u662f\u5426\u53ef\u4ee5\u4f18\u5316\uff1a \uff08\u628a \\(f_{j-v_i}\\) \u5f53\u4f5c \\(f_{j}\\) \u4ee3\u5165\u6700\u4e0a\u9762\u7684\u65b9\u7a0b\uff0c\u6b64\u5904\u5148\u4e0d\u8003\u8651\u80cc\u5305\u591f\u4e0d\u591f\u7528 \uff09 \\[f_{j-v_i}=\\max\\limits_{1 \\le cnt \\le c_i} \\{f_{j-v_i-cnt\\times v_i}+cnt\\times w_i\\}\\] \\[\\Rightarrow f_{j-v_i}=\\max(f_{j-v_i},f_{j-2v_i}+w_i,\\dots,f_{j-c_i\\times v_i}+(c_i-1)\\times w_i,f_{j-(c_i+1)v_i}+c_i\\times w_i) \\cdots \\text{Formula B}\\] \u7136\u540e\u4f60\u4f1a\u53d1\u73b0\uff0c\u8fd9\u91cc\u6ca1\u6cd5\u50cf\u5b8c\u5168\u80cc\u5305\u90a3\u6837\u4f18\u5316\u4e86\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u5f0f\u5b50 \\(\\text{B}\\) \u4e0d\u53ea\u662f\u6bd4\u5f0f\u5b50 \\(\\text{A}\\) \u6bcf\u9879\u5c11\u4e86 \\(w_i\\) \u3002 \u56e0\u4e3a\u5f0f\u5b50 \\(\\text{B}\\) \u7684\u51b3\u7b56\u96c6\u5408\u91cc\u6ca1\u6709 \\(f_{j}\\) \u8fd9\u4e00\u9879\uff0c\u5374\u591a\u4e86 \\(f_{j-(c_i+1)v_i}\\) \u8fd9\u4e00\u9879\uff0c \u6240\u4ee5\u6211\u4eec\u662f\u6ca1\u529e\u6cd5\u76f4\u63a5\u4ece\u5f0f\u5b50 \\(\\text{B}\\) \u63a8\u5230\u5f0f\u5b50 \\(\\text{A}\\) \u53bb\u7684\u3002 \u4f46\u662f\u6ce8\u610f\u5230\u6eda\u52a8\u6570\u7ec4\u4e4b\u540e\uff0c\u65b9\u7a0b\u7684\u6837\u5b50\u5f88\u7c7b\u4f3c \\(f_i = \\max\\limits_{L(i)\\le j \\le R(i)}{f_j + val(i,j)}\\) \u7684\u5f62\u5f0f\u3002 \u6211\u4eec\u53c8\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u5f88\u6709\u610f\u601d\u7684\u6027\u8d28\uff1a \u51b3\u7b56\u96c6\u5408\u7684\u53d8\u5316\u957f\u7684\u548b\u8fd9\u4e48\u50cf\u5355\u8c03\u961f\u5217\u5462\uff1f \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u6eda\u52a8\u6570\u7ec4\u4e4b\u540e\u5229\u7528\u5355\u8c03\u961f\u5217\u4f18\u5316\u3002 \u56e0\u4e3a\u6eda\u52a8\u6570\u7ec4\u4e4b\u540e\u662f\u5012\u63a8\u7684\uff0c\u6240\u4ee5\u88ab\u5355\u8c03\u961f\u5217\u5148\u5f39\u51fa\u7684\u662f \\(f_j\\) \uff0c\u8fdb\u6765\u7684\u662f\u7684 \\(f_{j-(c_i+1)v_i}\\) \u3002 \u7136\u540e\u4f60\u53d1\u73b0\uff0c\u5bf9\u4e8e\u540c\u4e00\u4e2a \\(i\\) \u53ef\u4ee5\u628a\u6240\u6709\u7684 \\(j\\) \u5206\u6210 \\(v_i\\) \u7ec4\uff0c\u4f9d\u636e\u662f\u9664\u4ee5 \\(v_i\\) \u7684\u4f59\u6570 \\(\\overline{0}\\) \u5269\u4f59\u7cfb\uff1a \\(\\{0,v_i,2v_i\\dots\\}\\) \\(\\overline{1}\\) \u5269\u4f59\u7cfb\uff1a \\(\\{1,v_i+1,2v_i+1\\}\\) \\(\\dots\\) \\(\\overline{v_i-1}\\) \u5269\u4f59\u7cfb \\(\\{v_i-1,2v_i-1,3v_i-1\\dots\\}\\) \u7136\u540e\u5728\u6bcf\u4e00\u4e2a\u5269\u4f59\u7cfb\u91cc\u9762\u5229\u7528\u5355\u8c03\u961f\u5217\u5355\u72ec\u8f6c\u79fb\uff0c\u53ef\u4ee5\u53d1\u73b0\u4ed6\u4eec\u4e92\u4e0d\u5e72\u6270\u3002 \u7b80\u5355\u6765\u8bf4\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(i\\) \uff0c\u5faa\u73af\u4f59\u6570 \\(u \\in [0,v_i)\\) \u3002 \u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u56fa\u5b9a\u7684 \\(u\\) \uff0c\u5012\u5e8f\u5faa\u73af\u500d\u6570 \\(p=\\lfloor \\frac{m-u}{v_i}\\rfloor \\to 0\\) \u5047\u8bbe\u5f53\u524d\u72b6\u6001\u662f \\(j=u+p\\times v_i\\) \uff0c\u90a3\u4e48 \\(f_{j}=\\max\\limits_{p-c_i\\le k \\le p-1}\\{f_{u+k\\times v_i}+(p-k)\\times w_i\\}\\) \u4e0b\u754c\u662f \\(p-c_i\\) \u5f88\u597d\u7406\u89e3\uff0c\u56e0\u4e3a\u4f60\u53ea\u80fd\u62ff \\(c_i\\) \u4e2a\uff0c\u4f46\u662f\u4e3a\u5565\u4e0a\u9650\u662f \\(p-1\\) \u800c\u4e0d\u662f \\(p\\) \u5462\uff1f \u56e0\u4e3a\u8fd9\u91cc\u6eda\u52a8\u6570\u7ec4\u4e86\uff0c\u76f8\u5f53\u4e8e \\(f_{i,j}\\) \u76f4\u63a5\u7ee7\u627f\u4e86 \\(f_{i-1,j}\\) \u7136\u540e\u5f00\u59cb\u53d6 \\(\\max\\) \u3002 \u73b0\u5728\u628a \\(i,u\\) \u770b\u6210\u5b9a\u503c \uff0c\u4e5f\u5c31\u662f\u53ea\u8003\u8651\u5185\u5c42\u5faa\u73af \\(p\\) \u3002\u5012\u5e8f\u679a\u4e3e\u7684\u65f6\u5019\uff0c\u5982\u679c \\(p\\) \u51cf\u5c11 \\(1\\) \uff0c\u90a3\u4e48 \\(k\\) \u7684\u8303\u56f4\u4e5f\u4f1a\u76f8\u5bf9\u5411\u4f4e\u65b9\u5411\u6ed1\u52a8\u4e00\u4e2a\u5355\u4f4d\u3002 \u7136\u540e\u518d\u770b\u65b9\u7a0b\u91cc\u9762\uff1a \\(f_{u+k\\times v_i}-kw_i+pw_i\\) \uff0c\u52a0\u53f7\u524d\u9762\u7684\u90e8\u5206\u662f \u5173\u4e8e \\(k\\) \u7684 \uff0c\u540e\u534a\u90e8\u5206\u662f \u5173\u4e8e \\(p\\) \u7684 \u3002 \u56e0\u4e3a \\(k\\) \u662f\u5728 \u5355\u8c03\u9012\u51cf \uff0c\u6240\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u51b3\u7b56\u70b9 \\(k\\) \u5355\u8c03\u9012\u51cf\uff0c\u961f\u5934\u4e3a \\(f_{u+k\\times v_i}-kw_i\\) \u7684 \u6700\u5927\u503c \u7684\u5355\u8c03\u961f\u5217\u3002 \u6bcf\u6b21\u5355\u8c03\u961f\u5217\u7684\u65f6\u5019\uff0c\u5148\u628a\u961f\u5934\u8d85\u8fc7 \\(p-1\\) \u7684\u5f39\u6389\uff0c\u7136\u540e\u53d6\u961f\u5934\u4e3a\u6700\u4f18\u51b3\u7b56\u8fdb\u884c\u8f6c\u79fb\u3002 \u6700\u540e\u628a\u65b0\u52a0\u5165\u7684\u51b3\u7b56 \\(k=p-c_i-1\\) \u63d2\u5165\u961f\u5217\u7684\u5c3e\u90e8\uff0c\u68c0\u67e5\u5355\u8c03\u6027\uff0c\u6392\u9664\u5197\u6742\u3002 \u4e3a\u4ec0\u4e48\u662f \\(k = p-c_i -1\\) \u5462\uff1f\u56e0\u4e3a\u539f\u6765\u7684\u4e0b\u754c\u662f \\(p - c_i\\) \uff0c\u800c\u6bcf\u6b21\u5165\u961f\u7684\u90fd\u662f \\(cnt\\) \u5c0f \\(1\\) \u7684\uff0c\u4e5f\u5c31\u662f\u500d\u6570 \\(k\\) \u5c0f \\(1\\) \u7684\uff0c\u81ea\u7136\u5c31\u662f \\(p-c_i-1\\) \u3002 \u56e0\u4e3a\u91cc\u9762\u4e24\u5c42\u7684\u5faa\u73af\u76f8\u5f53\u4e8e\u904d\u5386\u4e86 \\([0,m]\\) \uff0c\u6240\u4ee5\u590d\u6742\u5ea6 \\(\\text{O}(nm)\\) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 /* * @Author: black_trees * @Date: 2022-02-01 12:49:34 * @Last Modified by: black_trees * @Last Modified time: 2022-02-01 13:21:38 */ #include <bits/stdc++.h> using namespace std ; constexpr int si_n = 1e3 + 10 ; constexpr int si_v = 2e4 + 10 ; int n , m ; int v [ si_n ], w [ si_n ], c [ si_n ]; int f [ si_v ], q [ si_v ]; int main (){ #ifndef ONLINE_JUDGE freopen ( \"Input.txt\" , \"r\" , stdin ); freopen ( \"Output.txt\" , \"w\" , stdout ); #endif scanf ( \"%d%d\" , & n , & m ); for ( register int i = 1 ; i <= n ; ++ i ){ scanf ( \"%d%d%d\" , & v [ i ], & w [ i ], & c [ i ]); } auto calc = [ & ]( int u , int i , int k ) -> int { return f [ u + k * v [ i ]] - k * w [ i ]; }; for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int u = 0 ; u < v [ i ]; ++ u ){ int head = 1 , tail = 0 ; memset ( q , 0 , sizeof q ); int mxp = ( m - u ) / v [ i ]; // \u4ece\u8fd9\u5f00\u59cb\uff0c\u5728\u7b2c\u4e09\u5c42\u4ee5\u5185\uff0c\u8ba4\u4e3a i \u548c u \u662f\u56fa\u5b9a\u7684 for ( register int k = mxp -1 ; k >= max ( mxp - c [ i ], 0 ); -- k ){ while ( head <= tail && calc ( u , i , q [ tail ]) <= calc ( u , i , k )) -- tail ; q [ ++ tail ] = k ; } // \u628a\u521d\u59cb\u7684\u51b3\u7b56\u96c6\u5408\u63d2\u5165 // \u6b64\u5904\u7684\u51b3\u7b56\u96c6\u5408\u53ef\u4ee5\u7406\u89e3\u4e3a\u56fe\u4e2d \"f[j]\" \u7cfb\u7684\u51b3\u7b56\u5019\u9009\u96c6\u5408\u3002 for ( register int p = ( m - u ) / v [ i ]; p >= 0 ; -- p ){ while ( head <= tail && q [ head ] > p -1 ) ++ head ; // \u8fc7\u671f\u7684\u5f39\u6389 if ( head <= tail ) f [ u + p * v [ i ]] = max ( f [ u + p * v [ i ]], calc ( u , i , q [ head ]) + p * w [ i ]); // \u5355\u8c03\u961f\u5217\u975e\u7a7a\u7684\u65f6\u5019\u624d\u53ef\u4ee5\u6709max\u6765\u8f6c\u79fb\u3002 if ( p - c [ i ] -1 >= 0 ){ while ( head <= tail && calc ( u , i , q [ tail ]) <= calc ( u , i , p - c [ i ] -1 )) -- tail ; q [ ++ tail ] = p - c [ i ] -1 ; } // \u5982\u679c\u65b0\u52a0\u5165\u7684\u51b3\u7b56\u5c0f\u4e8e0\u4e86\uff0c\u90a3\u4e48\u5c31\u4e0d\u7528\u52a0\u4e86\uff08\u90fd\u6ca1\u4e86\u8fd8\u52a0\u5565\uff09 } } } return printf ( \"%d \\n \" , f [ m ]), 0 ; } \u4e0a\u9762\u5199\u7684\u4f3c\u4e4e\u6709\u70b9\u7455\u75b5 \uff08 \\(f_{j-(c_i+1)v_i}\\) \u8fd9\u4e2a\u72b6\u6001\u4f3c\u4e4e\u4e0d\u80fd\u5b58\u5728\uff09\uff0c\u4e0d\u8fc7\u80fd\u7406\u89e3\u201c\u51b3\u7b56\u96c6\u5408\u7684\u5355\u8c03\u53d8\u5316\u201d\u5c31\u884c\u4e86\u3002","title":"\u591a\u91cd\u80cc\u5305"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%83%8C%E5%8C%85DP/#_4","text":"\u7ed9\u4f60 \\(n\\) \u7ec4\u7269\u54c1\uff0c\u6bcf\u7ec4\u6709 \\(c_i\\) \u4e2a\uff0c\u4f53\u79ef\u5206\u522b\u4e3a \\(v_{i,j}\\) \uff0c\u4ef7\u503c\u5206\u522b\u4e3a \\(w_{i,j}\\) \uff0c\u4f60\u6709 \\(m\\) \u7684\u7a7a\u95f4\uff0c\u6bcf\u7ec4\u6700\u591a\u9009\u4e00\u4e2a\uff0c\u6c42\u4ef7\u503cMax \u53d1\u73b0\u5c31\u662f01\u80cc\u5305\u548c\u591a\u91cd\u80cc\u5305\u7684\u53d8\u4f53\u3002 \u6211\u4eec\u8003\u8651\u5148\u5957\u4e0a 01 \u80cc\u5305\u7684\u677f\u5b50\uff0c\u7136\u540e\u5728\u91cc\u9762\u8fdb\u884c\u51b3\u7b56\u3002 1 2 3 4 5 for \u7ec4 \uff08 \u7269\u54c1 \uff09 for \u4f53\u79ef for \u51b3\u7b56 if \u6ee1\u8db3\u6761\u4ef6 \u8f6c\u79fb \u4e0d\u8fc7\u8fd9\u91cc\u4e00\u5b9a\u8981\u6ce8\u610f\uff0c \\(j\\) \u8981\u5168\u90e8\u626b\u4e00\u904d\uff0c\u56e0\u4e3a\u51b3\u7b56\u91cc\u9762\u7684\u90a3\u51e0\u4e2a\u7269\u54c1\u7684\u4f53\u79ef\u662f\u4f1a\u53d8\u7684\u3002 \u5982\u679c\u662f\u4e8c\u7ef4\u72b6\u6001\uff0c\u5c31\u5728\u7b2c\u4e09\u5c42\u5faa\u73af\u5916\u9762\u5148 f[i][j]=f[i-1][j]; \u3002 \u5982\u679c\u662f\u4e00\u7ef4\u72b6\u6001\uff0c\u5c31\u53ea\u9700\u8981\u5728\u7b2c\u4e09\u5c42\u91cc\u591a\u4e00\u4e2a\u7279\u5224\uff0c\u5e76\u8c03\u6574\u7b2c\u4e8c\u5c42\u5faa\u73af\u3002 1 2 3 4 5 6 7 for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = m ; j >= 0 ; -- j ){ for ( register int k = 1 ; k <= c [ i ]; ++ k ){ if ( j >= v [ i ][ k ]) f [ j ] = max ( f [ j ], f [ j - v [ i ][ k ]] + w [ i ][ k ]); } } } return printf ( \"%d \\n \" , f [ m ]), 0 ;","title":"\u5206\u7ec4\u80cc\u5305"},{"location":"%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%83%8C%E5%8C%85DP/#_5","text":"\u7269\u54c1\u4e4b\u95f4\u5177\u6709\u4f9d\u8d56\u5173\u7cfb\uff0c\u4e14\u4f9d\u8d56\u5173\u7cfb\u7ec4\u6210\u4e00\u68f5\u6811\u7684\u5f62\u72b6\u3002\u5982\u679c\u9009\u62e9\u4e00\u4e2a\u7269\u54c1\uff0c\u5219\u5fc5\u987b\u9009\u62e9\u5b83\u7684\u7236\u8282\u70b9\u3002 \u4f60\u6709 \\(n\\) \u4e2a\u7269\u54c1\uff0c \\(m\\) \u7684\u7a7a\u95f4\uff0c\u95ee\u4ef7\u503c Max \u8003\u8651\u8bbe\u72b6\u6001 \\(f_{u,j}\\) \uff0c\u8868\u793a\u7684\u96c6\u5408\u4e3a \"\u5728\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u5f53\u4e2d\uff0c\u7a7a\u95f4\u4e0d\u8d85\u8fc7 \\(j\\) \u7684\u6240\u6709\u65b9\u6848\"\uff0c\u5c5e\u6027\u4e3a\u4ef7\u503c\u7684 Max \\(u\\) \u80af\u5b9a\u4e5f\u4f1a\u6709\u5f88\u591a\u5b50\u6811\uff08\u9664\u975e\u5b83\u662f\u53f6\u5b50\uff09 \uff0c\u90a3\u4e48\u5c31\u9700\u8981\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b50\u6811\u8fdb\u884c\u8ba8\u8bba\uff0c\u770b\u7ed9\u5b83\u5206\u914d\u591a\u5c11\u7a7a\u95f4\u3002 \u6240\u4ee5\u72b6\u6001\u5212\u5206\u4e3a \\(u\\) \u7684\u513f\u5b50\u4e2a\u6570\u4e2a\u5927\u5b50\u96c6\uff0c\u5206\u522b\u4ee3\u8868\u9009\u5bf9\u5e94\u7684\u5b50\u6811\u7684\u60c5\u51b5\u3002 \u6bcf\u4e00\u4e2a\u5927\u5b50\u96c6\u53c8\u5206\u6210\u591a\u4e2a\u5c0f\u5b50\u96c6\uff0c\u8868\u793a\u7ed9\u8fd9\u4e2a\u5b50\u6811\u5206\u914d\u7684\u7a7a\u95f4\u3002 \u8fd9\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u5206\u7ec4\u80cc\u5305\uff0c\u95ee\u9898\u7b49\u4ef7\u4e8e\uff1a \u6709 \\(|son(u)|\\) \u7ec4\u7269\u54c1\uff08\u6bcf\u4e2a\u513f\u5b50\u7684\u5b50\u6811\u7b97\u4e00\u7ec4\uff09\uff0c\u6bcf\u7ec4\u7269\u54c1\u90fd\u6709 \\(j - v_u\\) \u4e2a\u3002 \u5176\u4e2d\u7b2c \\(i\\) \u7ec4\u7b2c \\(x\\) \u4e2a\u7269\u54c1\u7684\u4f53\u79ef\u662f \\(x\\) \uff0c\u4ef7\u503c\u662f \\(f_{son(u)_i,x}\\) \uff0c\u80cc\u5305\u7684\u603b\u5bb9\u79ef\u662f \\(j-v_u\\) \u3002 \u8981\u4ece\u6bcf\u7ec4\u5f53\u4e2d\u9009\u51fa\u4e0d\u8d85\u8fc7\u4e00\u4e2a\u7269\u54c1\uff08\u6bcf\u4e2a\u5b50\u8282\u70b9 \\(son(u)_i\\) \u53ea\u80fd\u9009\u62e9\u4e00\u4e2a\u72b6\u6001\uff08\u5206\u914d\u7684\u7a7a\u95f4 \\(x\\) \uff09\u8f6c\u79fb\u5230 \\(u\\) \u3002\uff09\u3002 \u5e76\u4e14\u9009\u51fa\u7684\u603b\u4f53\u79ef\u4e0d\u80fd\u8d85\u8fc7 \\(j - v_u\\) \uff08\u5fc5\u987b\u5148\u9009 \\(u\\) \uff09\uff0c\u6c42\u6700\u5927\u4ef7\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 inline void dfs ( int u , int fa ){ for ( register int i = 0 ; i < ( int ) g [ u ]. size (); ++ i ){ int ver = g [ u ][ i ]; if ( ver == fa ) continue ; dfs ( ver , u ); for ( register int j = m - v [ u ]; j >= 0 ; -- j ){ // \u679a\u4e3e\u6392\u9664 u \u81ea\u5df1\u7684\uff0c\u603b\u5171\u53ef\u4ee5\u5f80\u4e0b\u5206\u914d\u7684\u7a7a\u95f4 for ( register int k = 0 ; k <= j ; ++ k ){ // \u53ef\u4ee5\u7ed9\u5f53\u524d\u5b50\u6811\u5206\u914d\u7684\u7a7a\u95f4 f [ u ][ j ] = max ( f [ u ][ j ], f [ u ][ j - k ] + f [ ver ][ k ]); } } } for ( register int i = m ; i >= v [ u ]; -- i ){ // \u628a u \u52a0\u4e0a f [ u ][ i ] = f [ u ][ i - v [ u ]] + w [ u ]; } for ( register int i = 0 ; i < v [ u ]; ++ i ){ // \u8fde u \u7684\u7a7a\u95f4\u90fd\u65e0\u6cd5\u6ee1\u8db3\uff0c0 f [ u ][ i ] = 0 ; } } ### \u72b6\u6001\u7684 \u201c\u6070\u597d\u201d\u201c\u81f3\u591a\u201d\u201c\u81f3\u5c11\u201d \u6700\u4e3b\u8981\u7684\u533a\u522b\u5c31\u662f\u4ed6\u4eec\u7684\u5b57\u9762\u610f\u601d\uff0c\u4f7f\u7528\u5bf9\u5e94\u72b6\u6001\u7684\u65f6\u5019\u8981\u60f3\u6e05\u695a\u8fd9\u79cd\u5bf9\u5e94\u7684\u72b6\u6001\u8981\u600e\u4e48\u5199\u3002 \u521d\u59cb\u503c\u548c\u7ec8\u6001\u8981\u6839\u636e\u72b6\u6001\u672c\u8eab\u7684 \u5b9a\u4e49 \u6765\u5199\u3002 \u8fd9\u91cc\u5047\u5b9a\u9700\u8981\u6c42\u89e3\u7684\u95ee\u9898\u662f\u666e\u901a\u768401\u80cc\u5305\uff0c\u72b6\u6001\u8bbe\u8ba1\u4e3a\u4e8c\u7ef4\uff0c\u65e0\u6eda\u52a8\u6570\u7ec4\uff0c\u53ea\u9700\u8981\u4ef7\u503c\u6700\u5927\u5373\u53ef\uff0c\u6ca1\u6709\u6070\u597d\u88c5\u6ee1\u7684\u6761\u4ef6\u3002 \u6070\u597d \u5b8c\u6574\u7684\u72b6\u6001\u662f\uff1a\u8003\u8651\u4ece \u524d \\(i\\) \u4e2a\u7269\u54c1\u91cc\u9762\u9009\uff0c\u6070\u597d\u7528 \\(j\\) \u7684\u7a7a\u95f4\u7684\u6240\u6709\u65b9\u6848\uff0c\u6743\u503c\u548c\u7684\u6700\u5927\u503c\u3002 \u56e0\u4e3a \\(f_0\\) \u7cfb\u7684\u72b6\u6001\u5c31\u662f\u6240\u6709\u7684\u8003\u8651\u4ece\u524d \\(0\\) \u4e2a\u7269\u54c1\u91cc\u9009\uff08\u4e0d\u9009\uff09\u7684\u60c5\u51b5\u3002 \u6240\u4ee5\u5728\u201c\u6070\u597d\u201d\u7684\u7ea6\u675f\u4e0b\uff0c\u53ea\u6709 \\(f_{0,0}=0\\) ,\u4e5f\u5c31\u662f\u6070\u597d\u7528 \\(0\\) \u7684\u7a7a\u95f4\u624d\u662f\u5408\u6cd5\u7684\u3002 \u5176\u4ed6\u7684\u4e0d\u5408\u6cd5\u6761\u4ef6\u90fd\u8981\u8bbe\u7f6e\u4e3a \\(-\\infty\\) \uff0c\uff08\u4e0d\u4ec5\u8868\u793a\u201c\u4e0d\u5408\u6cd5\u201d\uff0c\u4e5f\u662f\u4e3a\u4e86\u4e4b\u540e\u8f6c\u79fb\uff09 \u6240\u4ee5\u4f1a\u8fd9\u4e48\u5199\uff1a 1 memset ( f , 0xcf , sizeof f ), f [ 0 ][ 0 ] = 0 ; \u90a3\u4e48\uff0c\u5728dp\u5b8c\u4e86\u4e4b\u540e\uff0c\u6211\u4eec\u9700\u8981\u626b\u63cf \\(f_n\\) \u7cfb\u7684\u72b6\u6001\uff0c\u56e0\u4e3a\u88c5\u4e0d\u6ee1\u4e5f\u6709\u53ef\u80fd\u662f\u6700\u503c\uff08\u5f53\u524d\u95ee\u9898\u6ca1\u6709\u6070\u597d\u7684\u9650\u5236\uff0c\u5982\u679c\u6709\uff0c\u76f4\u63a5\u8f93\u51fa\u7ec8\u6001\u5373\u53ef\uff09\u3002 \uff08\u4e0d\u8bba\u6709\u6ca1\u6709\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\u90fd\u9700\u8981\uff09 \u81f3\u591a \u5b8c\u6574\u7684\u72b6\u6001\u662f\uff1a\u8003\u8651\u4ece\u524d \\(i\\) \u4e2a\u7269\u54c1\u91cc\u9762\u9009\uff0c\u7528\u4e0d\u8d85\u8fc7 \\(j\\) \u7684\u7a7a\u95f4\u7684\u6240\u6709\u65b9\u6848\uff0c\u6743\u503c\u548c\u7684\u6700\u5927\u503c\u3002 \u56e0\u4e3a\u8fd9\u91cc\u7684\u9650\u5236\u662f\u4e0d\u8d85\u8fc7\uff0c\u6240\u4ee5 \\(f_0\\) \u7cfb\u7684\u6240\u6709\u72b6\u6001\u90fd\u662f\u5408\u6cd5\u7684\u3002 \u4f60\u60f3\uff0c\u4f60\u4e0d\u9009\u4efb\u4f55\u7269\u54c1\uff0c\u90a3\u81ea\u7136\u6240\u6709\u53ef\u80fd\u7684\u7a7a\u95f4\u7684\u4e0d\u4f1a\u8d85\u8fc7\u554a\u3002 \u6240\u4ee5\u521d\u59cb\u503c\u5168\u90e8\u8bbe\u7f6e\u4e3a \\(0\\) \u3002 \u90a3\u4e48\uff0c\u5728dp\u5b8c\u4e86\u4e4b\u540e\uff0c\u76f4\u63a5\u8f93\u51fa\u7ec8\u6001 \\(f_{n,m}\\) \u5373\u53ef\uff0c\uff08\u6bd5\u7adf\u72b6\u6001\u8bbe\u8ba1\u7684\u662f\u201c\u6240\u6709\u65b9\u6848\u201d\uff09 \u56e0\u4e3a\u81f3\u591a\u548c\u6070\u597d\u90fd\u9002\u7528\u4e8e \u201c\u6700\u5927\u201d\uff0c\u6240\u4ee5\u653e\u5728\u4e0a\u9762\uff0c\u800c\u81f3\u5c11\u9002\u7528\u4e8e\u201c\u6700\u5c0f\u201d\uff0c\u6240\u4ee5\u5355\u72ec\u5206\u79bb\uff08\u4e0d\u8fc7\u6070\u597d\u4e5f\u662f\u53ef\u4ee5\u505a\u7684\uff0c\u9053\u7406\u4e00\u6837\uff09 \u95ee\u9898\uff1a\u4f60\u81f3\u5c11\u9700\u8981\u7528 \\(j\\) \u7684\u7a7a\u95f4\uff0c\u6c42\u4ef7\u503c\u7684\u6700\u5c0f\u503c\u3002 \u81f3\u5c11 \u5b8c\u6574\u7684\u72b6\u6001\u662f\uff1a\u8003\u8651\u4ece\u524d \\(i\\) \u4e2a\u7269\u54c1\u5f53\u4e2d\u9009\uff0c\u81f3\u5c11\u7528 \\(j\\) \u7684\u7a7a\u95f4\u7684\u6240\u6709\u65b9\u6848\uff0c\u6743\u503c\u548c\u7684\u6700\u5c0f\u503c\u3002 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u662f\u548c\u4e0a\u9762\u5dee\u4e0d\u591a\u7684\uff0c\u4e0d\u8fc7\u521d\u59cb\u5316\u548c\u8f6c\u79fb\u65b9\u5f0f\u9700\u8981\u6539\u53d8\u3002 \u56e0\u4e3a\u5f53\u4f60\u4e0d\u9009\u7684\u65f6\u5019\uff0c\u53ea\u6709 \\(f_{0,0}=0\\) \u662f\u5408\u6cd5\u7684\uff0c\u6240\u4ee5\u5176\u4ed6\u7684\u8bbe\u7f6e\u4e3a \\(+\\infty\\) \u3002 1 memset ( f , 0x3f , sizeof f ), f [ 0 ][ 0 ] = 0 ; \u4f46\u662f\u8f6c\u79fb\u5c31\u7565\u6709\u4e0d\u540c\u4e86\u3002 \u5982\u679c\u8bf4\uff0c\u4f60\u679a\u4e3e\u5230\u7684 \\(j\\) \u6ca1\u6709\u529e\u6cd5\u6ee1\u8db3\u5f53\u524d \\(v_i\\) \u7684\u9700\u6c42\uff0c\u4e0d\u5e94\u8be5\u53ea\u662f\u7ee7\u627f\u4e0a\u4e00\u8f6e\u7684\u72b6\u6001\u3002 \u56e0\u4e3a\uff0c\u5728\u4e0d\u8003\u8651\u8bbf\u95ee\u65e0\u6548\u4e0b\u6807\u7684\u60c5\u51b5\u4e0b\uff0c \\(f_{i,j}=\\max\\{f_{i-1,j-v_i}\\},(j-v_i<0)\\) \u4e5f\u662f\u5408\u6cd5\u7684\u8f6c\u79fb\u3002 \u81f3\u5c11\u9700\u8981\u8d1f\u6570\u7684\u7a7a\u95f4\uff0c\u90a3\u4f60\u4e0d\u9009\u4e5f\u662f\u6ee1\u8db3\u7684\u554a\uff0c \\(f\\) \u53c8\u662f\u8bb0\u5f55\u6700\u5c0f\u503c\uff0c\u81ea\u7136\u9700\u8981\u628a \\(f_{i-1,j-v_i}=0\\) \u554a\u3002 \u6240\u4ee5\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u9700\u8981\u53d8\u6210\u8fd9\u6837\uff1a\uff08\u4ee3\u7801\u5199\u7684\u662f\u4e8c\u7ef4\u80cc\u5305\u4e0d\u6eda\u52a8\u7684\u60c5\u51b5\uff0c\u5176\u4ed6\u9053\u7406\u4e00\u6837\uff09 1 2 3 4 5 6 7 8 9 memset ( f , 0x3f , sizeof f ), f [ 0 ][ 0 ][ 0 ] = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 0 ; j <= O2_need ; ++ j ){ for ( register int k = 0 ; k <= N_need ; ++ k ){ f [ i ][ j ][ k ] = f [ i -1 ][ j ][ k ]; f [ i ][ j ][ k ] = min ( f [ i ][ j ][ k ], f [ i -1 ][ max ( 0 , j - a [ i ])][ max ( 0 , k - b [ i ])] + c [ i ]); } } } return printf ( \"%d \\n \" , f [ n ][ O2_need ][ N_need ]), 0 ;","title":"\u6811\u4e0a\u80cc\u5305"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/2-SAT/","text":"2-SAT \u00b6 Introduction \u00b6 Definition1 \u00b6 \u7ed9\u4f60 \\(n\\) \u4e2a\u4e8c\u5143\u7ec4 \\((x_0,x_1)\\) \uff0c\u6709 \\(m\\) \u4e2a\u9650\u5236\u6761\u4ef6\uff0c\u5f62\u5982 \\(<a,b>\\) \uff0c\u8868\u793a \\(a,b\\) \u76f8\u4e92\u77db\u76fe\uff0c\u4e0d\u80fd\u540c\u65f6\u9009\u4e2d \\(a,b\\) \u8fd9\u4e24\u8005\u3002 \u4e14 \\(a,b\\) \u5c5e\u4e8e\u4e0d\u540c\u7684\u4e8c\u5143\u7ec4\u3002 \u95ee\u662f\u5426\u5b58\u5728\u4e00\u79cd\u65b9\u6848\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u4e8c\u5143\u7ec4\u91cc\u90fd\u6070\u597d\u6709\u4e00\u4e2a\u5143\u7d20\u88ab\u9009\u62e9\uff0c\u4e14\u6240\u6709\u6761\u4ef6\u4e0d\u4f1a\u88ab\u8fdd\u80cc\u3002 \u5982\u679c\u6709\uff0c\u9700\u8981\u6784\u9020\u65b9\u6848\u3002 Definition2 \u00b6 \u7ed9\u4f60 \\(n\\) \u4e2a\u5143\u7d20\uff0c\u6709 \\(m\\) \u4e2a\u9650\u5236\u6761\u4ef6\uff0c\u5f62\u5982 \\(<a,b>,<f_a,f_b>\\) \uff0c\u5373\uff0c\u5982\u679c \\(a\\) \u7684\u72b6\u6001\u662f \\(f_a\\) \uff0c\u90a3\u4e48 \\(b\\) \u7684\u72b6\u6001\u5fc5\u987b\u662f \\(f_b\\) \u3002 \\(f_i\\) \u7684\u503c\u53ea\u53ef\u80fd\u662f \\(0,1\\) \uff0c\u8868\u793a\u9009\u6216\u8005\u4e0d\u9009 \\(i\\) \u8fd9\u4e2a\u5143\u7d20\u3002 \u95ee\u662f\u5426\u5b58\u5728\u4e00\u79cd\u4f7f\u5f97\u6240\u6709\u9650\u5236\u88ab\u6ee1\u8db3\u3002 \u5982\u679c\u6709\uff0c\u9700\u8981\u6784\u9020\u65b9\u6848\u3002 \u4ee5\u4e0a\u4e24\u79cd\u5b9a\u4e49\u672c\u8d28\u4e0a\u662f\u5b8c\u5168\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u8bf4\u6cd5\u4e0d\u592a\u76f8\u540c\u3002 Method \u00b6 \u53d1\u73b0\u6240\u6709\u7684\u7ea6\u675f\u6761\u4ef6\u90fd\u53ef\u4ee5\u5f52\u5316\u6210\u8fd9\u6837\u7684\u4e00\u4e2a\u547d\u9898\uff1a \u82e5 \\(p\\) \uff0c\u5219 \\(q\\) \u3002 \u4e5f\u5c31\u662f \\(p \\Rightarrow q\\) \u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u628a\u8fd9\u4e2a\u547d\u9898\u770b\u4f5c\u6709\u5411\u8fb9\uff0c\u5c31\u53ef\u4ee5\u8f6c\u5316\u6210\u56fe\u8bba\u7684\u6a21\u578b\u3002 \u4ece\u7b2c\u4e8c\u79cd\u5b9a\u4e49\u8003\u8651\uff0c \\(p,q\\) \u5c31\u8868\u793a\u4e24\u4e2a\u5143\u7d20\u7684\u9009\u6216\u8005\u4e0d\u9009\u7684\u72b6\u6001\u3002 \u8003\u8651\u62c6\u70b9\uff0c\u628a\u4e00\u4e2a\u5143\u7d20 \\(x\\) \u62c6\u6210 \\((x_0,x_1)\\) \u4e24\u4e2a\u5143\u7d20\uff0c\u5206\u522b\u8868\u793a\u5143\u7d20 \\(x\\) \u4e0d\u9009\u8fd8\u662f\u9009\u3002 \u5b9e\u73b0\u7684\u65f6\u5019\u53ef\u4ee5\u628a\u56fe\u5206\u6210\u8282\u70b9\u5bf9\u79f0\u7684\u4e24\u90e8\u5206 \\(1\\to n\\) \u548c \\(n+1 \\to 2n\\) \u3002 \u5b9e\u9645\u4e0a\u8fb9\u4e5f\u5e94\u5f53\u662f\u5bf9\u79f0\u7684\uff0c\u4e4b\u540e\u4f1a\u8bf4\u3002 \u7136\u540e\u5c31\u53ef\u4ee5\u6bd4\u8f83\u65b9\u4fbf\u7684\u8fde\u8fb9\u4e86\u3002 \u6bd4\u5982\uff0c\u5982\u679c\u9009\u4e86 \\(a\\) \u5c31\u4e0d\u80fd\u9009 \\(b\\) \u8fd9\u4e2a\u7ea6\u675f\u6761\u4ef6\u3002 \u5c31\u53ef\u4ee5\u8fde\u4e00\u6761\u6709\u5411\u8fb9 \\(a_1 \\to b_0\\) \u3002 \u4f46\u662f\u8fd9\u4e2a\u4e1c\u897f\u662f\u4e00\u4e2a\u547d\u9898 \\(p \\Rightarrow q\\) \u554a\uff0c\u6240\u4ee5\u5b83\u7684 \u9006\u5426\u547d\u9898 \\(\\lnot q \\Rightarrow \\lnot p\\) \u4e5f\u662f\u6210\u7acb\u7684\u3002 \u90a3\u4e48\u5728\u8fde \\(a_1 \\to b_0\\) \u7684\u540c\u65f6\u4e5f\u9700\u8981\u8fde\u4e0a \\(b_1 \\to a_0\\) \u3002 \u6240\u4ee5\u5982\u679c\u628a\u6709\u5411\u8fb9\u770b\u6210\u65e0\u5411\u8fb9\uff0c\u56fe\u4e5f\u662f\u5bf9\u79f0\u7684\u3002 \u4e0d\u8fc7\u6709\u4e00\u79cd\u7279\u6b8a\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u9700\u8981\u5f3a\u5236\u9009 \\(a\\) \uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u5c31\u9700\u8981\u8fde\u4e00\u6761\u8fb9 \\(a_0 \\to a_1\\) \u3002 \u8fd9\u6837\u7684\u8bdd\uff0c\u5982\u679c\u9009 \\(a_0\\) \u5c31\u4f1a\u77db\u76fe\uff08\u5177\u4f53\u770b\u4e0b\u9762\uff09\uff0c\u5c31\u8fbe\u5230\u53ef\u5f3a\u5236\u9009 \\(a_1\\) \u7684\u76ee\u7684\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u7684\u6240\u6709\u53d8\u91cf\u7684\u53d6\u503c\u662f\u76f8\u540c\u7684\u3002 \u6bd4\u5982\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u957f\u8fd9\u6837\uff08\u53ef\u80fd\u4e0d\u4e00\u5b9a\u4f1a\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u4e0d\u8fc7\u611f\u6027\u7406\u89e3\u5c31\u884c\uff09\uff1a \\(a_0 \\to b_1 \\to c_0 \\to a_0\\) \u3002 \u90a3\u4e48 \\(a_0\\) \u7684\u53d6\u503c\u5982\u679c\u4e3a \\(\\text{true}\\) \uff08\u4e0d\u9009\u62e9 \\(a\\) \uff09\uff0c\u90a3\u4e48 \\(b_1\\) \u7684\u53d6\u503c\u4e5f\u5e94\u5f53\u4e3a \\(\\text{true}\\) \uff0c\u540c\u7406 \\(c_0\\) \u7684\u53d6\u503c\u4e5f\u662f \\(\\text{true}\\) \u3002 \u6240\u4ee5\u8003\u8651\u7f29\u70b9\uff0c \u53d1\u73b0\u5982\u679c\u4e00\u4e2a\u5143\u7d20\u7684\u4e24\u79cd\u72b6\u6001\u5904\u4e8e\u540c\u4e00\u4e2a\u96c6\u5408\uff0c\u90a3\u4e48\u5fc5\u7136\u662f\u65e0\u89e3\u7684\uff0c\u56e0\u4e3a\u4f60\u4e0d\u53ef\u80fd\u9009\u4e00\u4e2a\u7269\u54c1\u53c8\u4e0d\u9009\u4e00\u4e2a\u7269\u54c1\u3002 \u7f29\u70b9\u5b8c\u4e4b\u540e\uff0c\u8fd9\u4e2a\u56fe\u4f1a\u6210\u4e00\u4e2a DAG\u3002 \u4f46\u662f\u5b83\u4ecd\u7136\u53ef\u4ee5\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff0c\u65b0\u56fe\u4e0a \\(c[x_0]\\) \u548c \\(c[x_1]\\) \u7684\u5173\u7cfb\u5c31\u53ef\u4ee5\u770b\u6210 \\(x_0\\) \u548c \\(x_1\\) \u7684\u5173\u7cfb\u3002 \u5bf9\u4e8e\u539f\u6765\u6709\u7684\u4e00\u6761\u8fb9 \\((x,y)\\) \uff0c\u5728\u65b0\u56fe\u4e0a\u8fde\u63a5 \\((c[x],c[y])\\) \u5373\u53ef\u3002 \u53d1\u73b0\u5728\u65b0\u56fe\u4e0a\u9009\u62e9\u4e00\u4e2a\u96f6\u51fa\u5ea6\u70b9\u4e0d\u4f1a\u5bf9\u5176\u4ed6\u7684\u70b9\u9020\u6210\u4ec0\u4e48\u5f71\u54cd\uff0c\u90a3\u4e48\u5c31\u4e0d\u65ad\u7684\u627e\u96f6\u51fa\u5ea6\u70b9\u5373\u53ef\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u662f\u53cd\u7740\u7684\u62d3\u6251\u6392\u5e8f\u3002 \u90a3\u4e48\u5728\u8fd9\u4e2a\u65b0\u56fe\u7684\u53cd\u56fe\u4e0a\u8dd1\u62d3\u6251\u6392\u5e8f\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u6253\u4e00\u4e2a\u6807\u8bb0 \\(color\\) \uff0c\u8868\u793a\u8fd9\u4e2a SCC \u5f53\u4e2d\u7684\u6240\u6709\u53d8\u91cf\u7684\u53d6\u503c\u3002 \u5982\u679c\u5f53\u524d\u70b9 \\(u\\) \u7684 \\(color\\) \u6ca1\u6709\u88ab\u6807\u8bb0\u8fc7\uff0c\u90a3\u4e48\u7ed9\u4ed6\u6807\u8bb0\u4e3a \\(0\\) \uff0c\u5e76\u628a\u8fd9\u4e2a\u70b9\u5bf9\u5e94\u7684\u70b9 \\(v\\) \u6807\u8bb0\u4e3a \\(1\\) \u3002 \u5bf9\u5e94\u7684\u70b9\u5c31\u662f\u6ee1\u8db3\u7c7b\u4f3c\u539f\u56fe \\(x_0\\) \u548c \\(x_1\\) \u7684\u5173\u7cfb\u7684\u70b9\u3002 \u7136\u540e\u5c31\u5f97\u5230\u4e86\u4e00\u7ec4\u53ef\u884c\u89e3\u3002 \u4f46\u662f\u56e0\u4e3a Tarjan \u5b8c\u4e4b\u540e\u7684 SCC \u7f16\u53f7\u5c31\u662f\u9006\u62d3\u6251\u5e8f\uff0c\u6240\u4ee5\u76f4\u63a5\u6b63\u5e8f\u626b\u63cf\u6240\u6709 SCC \u5c31\u884c\u4e86\u3002 \u7ed9\u4e00\u7ec4\u5bf9\u5e94\u70b9\u5f53\u4e2d\u62d3\u6251\u5e8f\u66f4\u5927\uff0c\u4e5f\u5c31\u662f\u7f16\u53f7\u66f4\u5c0f\u7684\u7684\u4e00\u4e2a\u70b9\u67d3\u8272\u6210 \\(0\\) \uff0c\u53e6\u5916\u4e00\u4e2a\u67d3\u8272\u6210 \\(1\\) \u5373\u53ef\u3002 \u5b9e\u73b0\u53ef\u4ee5\u4e0d\u7528\u5224\u6bcf\u4e2a\u5143\u7d20\u7684\u72b6\u6001\u53d8\u91cf\u6240\u5728\u7684 SCC \u7684\u989c\u8272\uff0c\u53ea\u9700\u8981\u6bd4\u8f83\u7f16\u53f7\u5927\u5c0f\u5c31\u884c\u3002 1 2 3 4 5 6 7 8 9 10 11 for ( int i = 1 ; i <= 2 * n ; ++ i ) if ( ! dfn [ i ]) tarjan ( i ); for ( int i = 1 ; i <= n ; ++ i ) if ( c [ i ] == c [ i + n ]) return puts ( \"NO\" ), 0 ; for ( int i = 1 ; i <= n ; ++ i ) opp [ i ] = i + n , opp [ i + n ] = i ; for ( int i = 1 ; i <= 2 * n ; ++ i ) val [ i ] = c [ i ] > c [ opp [ i ]]; \u8fd8\u6709\u4e00\u79cd\u7206\u641c\u505a\u6cd5\uff0c\u4f46\u662f\u89c9\u5f97\u4e0d\u559c\u6b22\uff08 \u6bd5\u7adf Tarjan \u5199\u8d77\u6765\u65b9\u4fbf\uff0c\u5e38\u6570\u4e5f\u5c0f\u3002 \u6ce8\u610f\uff0c\u70b9\u76f8\u5173\u7684\u6570\u7ec4\u4e00\u5b9a\u8981\u5f00\u4e24\u500d\uff0c\u8fb9\u76f8\u5173\u7684\u9700\u8981\u8ba1\u7b97\u7136\u540e\u5f00\u5bf9\u5e94\u500d\u6570\u3002 \u5982\u679c\u4e24\u4e2a\u53d8\u91cf\u7684\u56db\u79cd\u53d6\u503c\u4e4b\u95f4\u6ca1\u6709\u4efb\u4f55\u7684\u7ea6\u675f\u5173\u7cfb\uff08\u4e5f\u53ef\u4ee5\u7406\u89e3\u6210\u4e0d\u77db\u76fe\uff09\uff0c\u662f\u4e0d\u7528\u8fde\u8fb9\u7684\u3002","title":"2 SAT"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/2-SAT/#2-sat","text":"","title":"2-SAT"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/2-SAT/#introduction","text":"","title":"Introduction"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/2-SAT/#definition1","text":"\u7ed9\u4f60 \\(n\\) \u4e2a\u4e8c\u5143\u7ec4 \\((x_0,x_1)\\) \uff0c\u6709 \\(m\\) \u4e2a\u9650\u5236\u6761\u4ef6\uff0c\u5f62\u5982 \\(<a,b>\\) \uff0c\u8868\u793a \\(a,b\\) \u76f8\u4e92\u77db\u76fe\uff0c\u4e0d\u80fd\u540c\u65f6\u9009\u4e2d \\(a,b\\) \u8fd9\u4e24\u8005\u3002 \u4e14 \\(a,b\\) \u5c5e\u4e8e\u4e0d\u540c\u7684\u4e8c\u5143\u7ec4\u3002 \u95ee\u662f\u5426\u5b58\u5728\u4e00\u79cd\u65b9\u6848\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u4e8c\u5143\u7ec4\u91cc\u90fd\u6070\u597d\u6709\u4e00\u4e2a\u5143\u7d20\u88ab\u9009\u62e9\uff0c\u4e14\u6240\u6709\u6761\u4ef6\u4e0d\u4f1a\u88ab\u8fdd\u80cc\u3002 \u5982\u679c\u6709\uff0c\u9700\u8981\u6784\u9020\u65b9\u6848\u3002","title":"Definition1"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/2-SAT/#definition2","text":"\u7ed9\u4f60 \\(n\\) \u4e2a\u5143\u7d20\uff0c\u6709 \\(m\\) \u4e2a\u9650\u5236\u6761\u4ef6\uff0c\u5f62\u5982 \\(<a,b>,<f_a,f_b>\\) \uff0c\u5373\uff0c\u5982\u679c \\(a\\) \u7684\u72b6\u6001\u662f \\(f_a\\) \uff0c\u90a3\u4e48 \\(b\\) \u7684\u72b6\u6001\u5fc5\u987b\u662f \\(f_b\\) \u3002 \\(f_i\\) \u7684\u503c\u53ea\u53ef\u80fd\u662f \\(0,1\\) \uff0c\u8868\u793a\u9009\u6216\u8005\u4e0d\u9009 \\(i\\) \u8fd9\u4e2a\u5143\u7d20\u3002 \u95ee\u662f\u5426\u5b58\u5728\u4e00\u79cd\u4f7f\u5f97\u6240\u6709\u9650\u5236\u88ab\u6ee1\u8db3\u3002 \u5982\u679c\u6709\uff0c\u9700\u8981\u6784\u9020\u65b9\u6848\u3002 \u4ee5\u4e0a\u4e24\u79cd\u5b9a\u4e49\u672c\u8d28\u4e0a\u662f\u5b8c\u5168\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u8bf4\u6cd5\u4e0d\u592a\u76f8\u540c\u3002","title":"Definition2"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/2-SAT/#method","text":"\u53d1\u73b0\u6240\u6709\u7684\u7ea6\u675f\u6761\u4ef6\u90fd\u53ef\u4ee5\u5f52\u5316\u6210\u8fd9\u6837\u7684\u4e00\u4e2a\u547d\u9898\uff1a \u82e5 \\(p\\) \uff0c\u5219 \\(q\\) \u3002 \u4e5f\u5c31\u662f \\(p \\Rightarrow q\\) \u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u628a\u8fd9\u4e2a\u547d\u9898\u770b\u4f5c\u6709\u5411\u8fb9\uff0c\u5c31\u53ef\u4ee5\u8f6c\u5316\u6210\u56fe\u8bba\u7684\u6a21\u578b\u3002 \u4ece\u7b2c\u4e8c\u79cd\u5b9a\u4e49\u8003\u8651\uff0c \\(p,q\\) \u5c31\u8868\u793a\u4e24\u4e2a\u5143\u7d20\u7684\u9009\u6216\u8005\u4e0d\u9009\u7684\u72b6\u6001\u3002 \u8003\u8651\u62c6\u70b9\uff0c\u628a\u4e00\u4e2a\u5143\u7d20 \\(x\\) \u62c6\u6210 \\((x_0,x_1)\\) \u4e24\u4e2a\u5143\u7d20\uff0c\u5206\u522b\u8868\u793a\u5143\u7d20 \\(x\\) \u4e0d\u9009\u8fd8\u662f\u9009\u3002 \u5b9e\u73b0\u7684\u65f6\u5019\u53ef\u4ee5\u628a\u56fe\u5206\u6210\u8282\u70b9\u5bf9\u79f0\u7684\u4e24\u90e8\u5206 \\(1\\to n\\) \u548c \\(n+1 \\to 2n\\) \u3002 \u5b9e\u9645\u4e0a\u8fb9\u4e5f\u5e94\u5f53\u662f\u5bf9\u79f0\u7684\uff0c\u4e4b\u540e\u4f1a\u8bf4\u3002 \u7136\u540e\u5c31\u53ef\u4ee5\u6bd4\u8f83\u65b9\u4fbf\u7684\u8fde\u8fb9\u4e86\u3002 \u6bd4\u5982\uff0c\u5982\u679c\u9009\u4e86 \\(a\\) \u5c31\u4e0d\u80fd\u9009 \\(b\\) \u8fd9\u4e2a\u7ea6\u675f\u6761\u4ef6\u3002 \u5c31\u53ef\u4ee5\u8fde\u4e00\u6761\u6709\u5411\u8fb9 \\(a_1 \\to b_0\\) \u3002 \u4f46\u662f\u8fd9\u4e2a\u4e1c\u897f\u662f\u4e00\u4e2a\u547d\u9898 \\(p \\Rightarrow q\\) \u554a\uff0c\u6240\u4ee5\u5b83\u7684 \u9006\u5426\u547d\u9898 \\(\\lnot q \\Rightarrow \\lnot p\\) \u4e5f\u662f\u6210\u7acb\u7684\u3002 \u90a3\u4e48\u5728\u8fde \\(a_1 \\to b_0\\) \u7684\u540c\u65f6\u4e5f\u9700\u8981\u8fde\u4e0a \\(b_1 \\to a_0\\) \u3002 \u6240\u4ee5\u5982\u679c\u628a\u6709\u5411\u8fb9\u770b\u6210\u65e0\u5411\u8fb9\uff0c\u56fe\u4e5f\u662f\u5bf9\u79f0\u7684\u3002 \u4e0d\u8fc7\u6709\u4e00\u79cd\u7279\u6b8a\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u9700\u8981\u5f3a\u5236\u9009 \\(a\\) \uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u5c31\u9700\u8981\u8fde\u4e00\u6761\u8fb9 \\(a_0 \\to a_1\\) \u3002 \u8fd9\u6837\u7684\u8bdd\uff0c\u5982\u679c\u9009 \\(a_0\\) \u5c31\u4f1a\u77db\u76fe\uff08\u5177\u4f53\u770b\u4e0b\u9762\uff09\uff0c\u5c31\u8fbe\u5230\u53ef\u5f3a\u5236\u9009 \\(a_1\\) \u7684\u76ee\u7684\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u7684\u6240\u6709\u53d8\u91cf\u7684\u53d6\u503c\u662f\u76f8\u540c\u7684\u3002 \u6bd4\u5982\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u957f\u8fd9\u6837\uff08\u53ef\u80fd\u4e0d\u4e00\u5b9a\u4f1a\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u4e0d\u8fc7\u611f\u6027\u7406\u89e3\u5c31\u884c\uff09\uff1a \\(a_0 \\to b_1 \\to c_0 \\to a_0\\) \u3002 \u90a3\u4e48 \\(a_0\\) \u7684\u53d6\u503c\u5982\u679c\u4e3a \\(\\text{true}\\) \uff08\u4e0d\u9009\u62e9 \\(a\\) \uff09\uff0c\u90a3\u4e48 \\(b_1\\) \u7684\u53d6\u503c\u4e5f\u5e94\u5f53\u4e3a \\(\\text{true}\\) \uff0c\u540c\u7406 \\(c_0\\) \u7684\u53d6\u503c\u4e5f\u662f \\(\\text{true}\\) \u3002 \u6240\u4ee5\u8003\u8651\u7f29\u70b9\uff0c \u53d1\u73b0\u5982\u679c\u4e00\u4e2a\u5143\u7d20\u7684\u4e24\u79cd\u72b6\u6001\u5904\u4e8e\u540c\u4e00\u4e2a\u96c6\u5408\uff0c\u90a3\u4e48\u5fc5\u7136\u662f\u65e0\u89e3\u7684\uff0c\u56e0\u4e3a\u4f60\u4e0d\u53ef\u80fd\u9009\u4e00\u4e2a\u7269\u54c1\u53c8\u4e0d\u9009\u4e00\u4e2a\u7269\u54c1\u3002 \u7f29\u70b9\u5b8c\u4e4b\u540e\uff0c\u8fd9\u4e2a\u56fe\u4f1a\u6210\u4e00\u4e2a DAG\u3002 \u4f46\u662f\u5b83\u4ecd\u7136\u53ef\u4ee5\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff0c\u65b0\u56fe\u4e0a \\(c[x_0]\\) \u548c \\(c[x_1]\\) \u7684\u5173\u7cfb\u5c31\u53ef\u4ee5\u770b\u6210 \\(x_0\\) \u548c \\(x_1\\) \u7684\u5173\u7cfb\u3002 \u5bf9\u4e8e\u539f\u6765\u6709\u7684\u4e00\u6761\u8fb9 \\((x,y)\\) \uff0c\u5728\u65b0\u56fe\u4e0a\u8fde\u63a5 \\((c[x],c[y])\\) \u5373\u53ef\u3002 \u53d1\u73b0\u5728\u65b0\u56fe\u4e0a\u9009\u62e9\u4e00\u4e2a\u96f6\u51fa\u5ea6\u70b9\u4e0d\u4f1a\u5bf9\u5176\u4ed6\u7684\u70b9\u9020\u6210\u4ec0\u4e48\u5f71\u54cd\uff0c\u90a3\u4e48\u5c31\u4e0d\u65ad\u7684\u627e\u96f6\u51fa\u5ea6\u70b9\u5373\u53ef\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u662f\u53cd\u7740\u7684\u62d3\u6251\u6392\u5e8f\u3002 \u90a3\u4e48\u5728\u8fd9\u4e2a\u65b0\u56fe\u7684\u53cd\u56fe\u4e0a\u8dd1\u62d3\u6251\u6392\u5e8f\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u6253\u4e00\u4e2a\u6807\u8bb0 \\(color\\) \uff0c\u8868\u793a\u8fd9\u4e2a SCC \u5f53\u4e2d\u7684\u6240\u6709\u53d8\u91cf\u7684\u53d6\u503c\u3002 \u5982\u679c\u5f53\u524d\u70b9 \\(u\\) \u7684 \\(color\\) \u6ca1\u6709\u88ab\u6807\u8bb0\u8fc7\uff0c\u90a3\u4e48\u7ed9\u4ed6\u6807\u8bb0\u4e3a \\(0\\) \uff0c\u5e76\u628a\u8fd9\u4e2a\u70b9\u5bf9\u5e94\u7684\u70b9 \\(v\\) \u6807\u8bb0\u4e3a \\(1\\) \u3002 \u5bf9\u5e94\u7684\u70b9\u5c31\u662f\u6ee1\u8db3\u7c7b\u4f3c\u539f\u56fe \\(x_0\\) \u548c \\(x_1\\) \u7684\u5173\u7cfb\u7684\u70b9\u3002 \u7136\u540e\u5c31\u5f97\u5230\u4e86\u4e00\u7ec4\u53ef\u884c\u89e3\u3002 \u4f46\u662f\u56e0\u4e3a Tarjan \u5b8c\u4e4b\u540e\u7684 SCC \u7f16\u53f7\u5c31\u662f\u9006\u62d3\u6251\u5e8f\uff0c\u6240\u4ee5\u76f4\u63a5\u6b63\u5e8f\u626b\u63cf\u6240\u6709 SCC \u5c31\u884c\u4e86\u3002 \u7ed9\u4e00\u7ec4\u5bf9\u5e94\u70b9\u5f53\u4e2d\u62d3\u6251\u5e8f\u66f4\u5927\uff0c\u4e5f\u5c31\u662f\u7f16\u53f7\u66f4\u5c0f\u7684\u7684\u4e00\u4e2a\u70b9\u67d3\u8272\u6210 \\(0\\) \uff0c\u53e6\u5916\u4e00\u4e2a\u67d3\u8272\u6210 \\(1\\) \u5373\u53ef\u3002 \u5b9e\u73b0\u53ef\u4ee5\u4e0d\u7528\u5224\u6bcf\u4e2a\u5143\u7d20\u7684\u72b6\u6001\u53d8\u91cf\u6240\u5728\u7684 SCC \u7684\u989c\u8272\uff0c\u53ea\u9700\u8981\u6bd4\u8f83\u7f16\u53f7\u5927\u5c0f\u5c31\u884c\u3002 1 2 3 4 5 6 7 8 9 10 11 for ( int i = 1 ; i <= 2 * n ; ++ i ) if ( ! dfn [ i ]) tarjan ( i ); for ( int i = 1 ; i <= n ; ++ i ) if ( c [ i ] == c [ i + n ]) return puts ( \"NO\" ), 0 ; for ( int i = 1 ; i <= n ; ++ i ) opp [ i ] = i + n , opp [ i + n ] = i ; for ( int i = 1 ; i <= 2 * n ; ++ i ) val [ i ] = c [ i ] > c [ opp [ i ]]; \u8fd8\u6709\u4e00\u79cd\u7206\u641c\u505a\u6cd5\uff0c\u4f46\u662f\u89c9\u5f97\u4e0d\u559c\u6b22\uff08 \u6bd5\u7adf Tarjan \u5199\u8d77\u6765\u65b9\u4fbf\uff0c\u5e38\u6570\u4e5f\u5c0f\u3002 \u6ce8\u610f\uff0c\u70b9\u76f8\u5173\u7684\u6570\u7ec4\u4e00\u5b9a\u8981\u5f00\u4e24\u500d\uff0c\u8fb9\u76f8\u5173\u7684\u9700\u8981\u8ba1\u7b97\u7136\u540e\u5f00\u5bf9\u5e94\u500d\u6570\u3002 \u5982\u679c\u4e24\u4e2a\u53d8\u91cf\u7684\u56db\u79cd\u53d6\u503c\u4e4b\u95f4\u6ca1\u6709\u4efb\u4f55\u7684\u7ea6\u675f\u5173\u7cfb\uff08\u4e5f\u53ef\u4ee5\u7406\u89e3\u6210\u4e0d\u77db\u76fe\uff09\uff0c\u662f\u4e0d\u7528\u8fde\u8fb9\u7684\u3002","title":"Method"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E4%BA%8C%E5%88%86%E5%9B%BE/","text":"\u4e8c\u5206\u56fe \u00b6 \u5b9a\u4e49\uff1a\u5982\u679c\u4e00\u5f20\u65e0\u5411\u56fe \\(G\\) \u53ef\u4ee5\u5206\u6210\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u7684\u70b9\u96c6 \\(A,B\\) \uff0c\u4e14\u70b9\u96c6\u5f53\u4e2d\u7684\u70b9\u76f8\u4e92\u4e4b\u95f4\u6ca1\u6709\u8fde\u8fb9\uff0c\u5219\u79f0 \\(G\\) \u4e3a\u4e00\u5f20\u4e8c\u5206\u56fe\u3002 \\(A,B\\) \u5206\u522b\u79f0\u4e3a \\(G\\) \u7684\u5de6\u90e8\u548c\u53f3\u90e8\u3002 \u5224\u5b9a \u00b6 \u5b9a\u7406\uff1a\u65e0\u5411\u56fe \\(G\\) \u662f\u4e8c\u5206\u56fe\uff0c \u5f53\u4e14\u4ec5\u5f53 \u56fe\u4e2d\u4e0d\u5b58\u5728\u5947\u73af\u3002 \u6240\u4ee5\u53ef\u4ee5\u7528\u67d3\u8272\u6cd5\u5224\u5b9a\u65e0\u5411\u56fe \\(G\\) \u662f\u4e0d\u662f\u4e8c\u5206\u56fe\u3002 \u8fdb\u884c\u9ed1\u767d\u7684\u95f4\u9694\u67d3\u8272\uff0c\u5982\u679c\u51fa\u73b0\u51b2\u7a81\uff0c\u90a3\u4e48\u56fe\u4e2d\u5fc5\u7136\u5b58\u5728\u5947\u73af\uff0c \\(G\\) \u4e0d\u662f\u4e8c\u5206\u56fe\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 int color [ si_n ]; bool ok = true ; inline void dfs ( int u , int col ){ color [ u ] = col ; for ( register int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( ! color [ v ]) dfs ( v , 3 - col ); else if ( color [ v ] == col ) ok = false ; } } // in main() memset ( color , 0 , sizeof color ); for ( register int i = 1 ; i <= n ; ++ i ) if ( ! color [ i ]) dfs ( i , 1 ); \u590d\u6742\u5ea6 \\(\\text{O}(n+m)\\) \u3002 \u6700\u5927\u5339\u914d \u00b6 \u5339\u914d\uff1a\u4efb\u610f\u4e24\u6761\u8fb9\u90fd\u6ca1\u6709\u516c\u5171\u7aef\u70b9\u7684\u8fb9\u96c6\u79f0\u4e3a\u56fe\u7684\u4e00\u7ec4\u5339\u914d \\(S\\) \u3002 \u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\uff1a\u4e8c\u5206\u56fe\u5f53\u4e2d\uff0c\u8fb9\u6570\u6700\u591a\u7684\u4e00\u7ec4\u5339\u914d\u4e3a\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u3002 \u5728 \\(S\\) \u5f53\u4e2d\u7684\u8fb9\u88ab\u79f0\u4e3a\u5339\u914d\u8fb9\uff0c\u5176\u5b83\u7684\u8fb9\u79f0\u4e3a\u975e\u5339\u914d\u8fb9\uff0c\u5339\u914d\u8fb9\u7684\u7aef\u70b9\u662f\u5339\u914d\u70b9\uff0c \u5176\u5b83 \u8282\u70b9\u88ab\u79f0\u4e3a\u975e\u5339\u914d\u70b9\u3002 \u5982\u679c\u4e8c\u5206\u56fe\u4e0a\u5b58\u5728\u4e00\u6761\u8def\u5f84 \\(\\delta(u,v)\\) \uff0c\u8fde\u63a5 \\(u,v\\) \u8fd9\u4e24\u4e2a\u975e\u5339\u914d\u70b9\uff0c\u4f7f\u5f97 \\(S\\) \u7684\u5339\u914d\u8fb9\u548c\u975e\u5339\u914d\u8fb9\u5728\u8def\u5f84\u4e0a\u4ea4\u66ff\u51fa\u73b0\uff0c\u79f0 \\(\\delta(u,v)\\) \u4e3a\u5339\u914d \\(S\\) \u7684\u589e\u5e7f\u8def\u3002 \u5982\u56fe\uff0c \\(\\delta(u,v)\\) \u5373\u4e3a\u4e00\u6761\u589e\u5e7f\u8def\uff1a \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5148\u5b9a\u4e49\u7684\u662f\u5339\u914d\u70b9\u548c\u5339\u914d\u8fb9\uff0c\u5269\u4e0b\u7684\u624d\u662f\u975e\u5339\u914d\u8fb9\u548c\u5339\u914d\u70b9\u3002 \u6240\u4ee5 \u8fde\u63a5\u4e24\u4e2a\u5339\u914d\u70b9\u7684\u4e0d\u4e00\u5b9a\u662f\u5339\u914d\u8fb9\uff0c\u4f46\u7aef\u70b9\u5e26\u6709\u975e\u5339\u914d\u70b9\u7684\u8fb9\u4e00\u5b9a\u662f\u975e\u5339\u914d\u8fb9 \u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u589e\u5e7f\u8def\u5177\u6709\u4ee5\u4e0b\u6027\u8d28\uff1a \u8fb9\u6570\u4e3a\u5947\u6570 \u7b2c \\(1,3,5,...\\) \u6761\u8fb9\u662f\u975e\u5339\u914d\u8fb9\uff0c\u7b2c \\(2,4,6,...\\) \u6761\u8fb9\u662f\u5339\u914d\u8fb9\u3002 \u6240\u4ee5\uff0c\u53ef\u4ee5\u5bf9\u589e\u5e7f\u8def\u4e0a\u7684\u8fb9\u7684\u72b6\u6001\u53d6\u53cd\uff0c\u5f97\u5230\u7684\u5339\u914d\u6570\u5fc5\u7136\u4f1a\u589e\u52a0 \\(1\\) \u3002 \u4ece\u800c\u53ef\u4ee5\u5f97\u5230\u5b9a\u7406\uff1a \u4e8c\u5206\u56fe\u7684\u4e00\u7ec4\u5339\u914d \\(S\\) \u662f\u6700\u5927\u5339\u914d\uff0c \u5f53\u4e14\u4ec5\u5f53 \u56fe\u4e2d\u4e0d\u5b58\u5728 \\(S\\) \u7684\u589e\u5e7f\u8def\u3002 \u5bf9\u5e94\u7684\u6709\u4e00\u4e2a\u5308\u7259\u5229\u7b97\u6cd5\uff0c\u53ef\u4ee5\u5229\u7528\u589e\u5e7f\u8def\u6c42\u51fa\u4e8c\u5206\u56fe \\(G\\) \u7684\u6700\u5927\u5339\u914d\u3002 \u601d\u8def\u662f\uff1a \u6700\u5f00\u59cb\u5148\u4ee4 \\(S=\\emptyset\\) \uff0c\u7136\u540e\u5bfb\u627e\u4e00\u4e2a\u589e\u5e7f\u8def\uff0c\u53d6\u53cd\uff0c\u5f97\u5230\u65b0\u5339\u914d \\(S\\prime\\) \u3002 \u91cd\u590d\u76f4\u5230\u4e0d\u5b58\u5728\u589e\u5e7f\u8def\u3002 \u5bfb\u627e\u589e\u5e7f\u8def\u7684\u65f6\u5019\u5206\u4e24\u79cd\u60c5\u51b5\u7ed9\u4e00\u4e2a\u5de6\u90e8\u8282\u70b9 \\(x\\) \u5bfb\u627e\u4e00\u4e2a\u5339\u914d\u7684\u53f3\u90e8\u8282\u70b9 \\(y\\) \uff1a \\(y\\) \u5c31\u662f\u975e\u5339\u914d\u70b9\uff0c \\((x,y)\\) \u672c\u8eab\u5c31\u662f\u589e\u5e7f\u8def\u3002 \\(y\\) \u5df2\u7ecf\u548c\u53e6\u5916\u4e00\u4e2a\u5de6\u90e8\u8282\u70b9\u5339\u914d\uff0c\u4f46\u662f\u8fd9\u4e2a\u5de6\u90e8\u8282\u70b9 \\(u\\) \u8fd8\u80fd\u627e\u5230\u53e6\u5916\u7684\u53f3\u90e8\u8282\u70b9 \\(v\\) \u5339\u914d\u3002 \u5219 \\(x\\to y \\to u \\to v\\) \u662f\u4e00\u6761\u589e\u5e7f\u8def . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 bool vis [ si_n ]; int match [ si_n ]; inline bool dfs ( int u ){ for ( register int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( ! vis [ v ]){ vis [ v ] = true ; if ( ! match [ v ] || dfs ( match [ v ])){ match [ v ] = u ; return true ; } // \u5bfb\u627e\u589e\u5e7f\u8def\u7684\u4e24\u79cd\u60c5\u51b5 } } return false ; } // in main() int res = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ memset ( vis , false , sizeof vis ); if ( dfs ( i )) res ++ ; } // \u53ea\u7528\u4ece\u5de6\u90e8\u5f00\u59cb // \u8fde\u8fb9\u7684\u65f6\u5019\u4f3c\u4e4e\u53ef\u4ee5\u53ea\u8fde\u4ece\u5de6\u90e8\u5230\u53f3\u90e8\u7684\u6709\u5411\u8fb9 \u590d\u6742\u5ea6 \\(\\text{O}(nm)\\) \uff0c\u4f46\u4e00\u822c\u5361\u4e0d\u6ee1\u3002 \u5efa\u56fe\u8fde\u8fb9\u7684\u65f6\u5019\u4f3c\u4e4e\u53ef\u4ee5\u53ea\u8fde\u4ece\u5de6\u90e8\u5230\u53f3\u90e8\u7684\u6709\u5411\u8fb9\uff1f \u5982\u679c\u8fde\u65e0\u5411\u8fb9\u4f3c\u4e4e\u4e5f\u4e00\u6837\u3002 [CH6801] \u68cb\u76d8\u8986\u76d6 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a \\(n\\times m\\) \u7684\u68cb\u76d8\uff0c\u6709\u4e9b\u5730\u65b9\u4e0d\u80fd\u653e\uff0c\u6c42\u6700\u591a\u80fd\u653e\u591a\u5c11\u4e2a \\(1\\times 2\\) \u6216\u8005 \\(2\\times 1\\) \u7684\u9aa8\u724c\u3002 \u4e14\u9aa8\u724c\u4e0d\u80fd\u91cd\u53e0\u3002 \\(n,m\\le 100\\) \u3002 \u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u7684\u6a21\u578b\u9700\u8981\u627e\u5230\u4e24\u4e2a\u8981\u7d20\uff1a \\(0\\) \u8981\u7d20\uff1a\u8282\u70b9\u80fd\u5206\u6210\u4e24\u4e2a\u72ec\u7acb\u7684\u96c6\u5408\uff0c\u4e14\u96c6\u5408\u5185\u90e8\u6ca1\u6709\u8fb9 \\(1\\) \u8981\u7d20\uff1a\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u548c\u4e00\u6761\u5339\u914d\u8fb9\u76f8\u8fde\u3002 \u9aa8\u724c\u4e0d\u80fd\u91cd\u590d\uff0c\u5bf9\u5e94\u7684\u5c31\u662f \\(1\\) \u8981\u7d20\uff0c\u6240\u4ee5\u53ef\u4ee5\u628a\u9aa8\u724c\u770b\u4f5c\u8fb9\uff0c\u9aa8\u724c\u53ef\u4ee5\u5360\u7528\u7684\u4e24\u4e2a\u683c\u5b50\u5206\u522b\u5f53\u4f5c\u5de6\u90e8\u548c\u53f3\u90e8\u8282\u70b9\u3002 \u6240\u4ee5\u5bf9\u68cb\u76d8 \u9ed1\u767d\u67d3\u8272 \uff0c\u90a3\u4e0d\u7ba1\u600e\u4e48\u6837\uff0c\u9aa8\u724c\u5fc5\u7136\u8fde\u63a5\u7684\u662f\u5de6\u53f3\u90e8\u5404\u4e00\u4e2a\u8282\u70b9\u3002 \u628a ban \u6389\u7684\u683c\u5b50\u9664\u5916\u5c31\u53ef\u4ee5\u4e86\u3002 \uff08\u7528\u6a2a\u7eb5\u5750\u6807\u7684\u548c\u7684\u5947\u5076\u6027\u53d6\u5206\u5de6\u53f3\u90e8\u8282\u70b9\u5373\u53ef\uff09 \u8fde\u8fb9\u7684\u65f6\u5019\u53ea\u9700\u8981\u4ece\u5de6\u90e8\u8fde\u5230\u53f3\u90e8\u5c31\u884c\u3002 \u6c42\u51fa\u7684\u6700\u5927\u5339\u914d\u5c31\u662f\u7b54\u6848\u3002 [CH6802] \u8eca\u7684\u653e\u7f6e \u00b6 \u7ed9\u5b9a\u4e00\u4e2a \\(n \\times m\\) \u7684\u68cb\u76d8\uff0c\u6709\u4e00\u4e9b\u683c\u5b50\u4e0d\u80fd\u653e\u3002 \u95ee\u6700\u591a\u53ef\u4ee5\u653e\u591a\u5c11\u4e2a\u4e92\u4e0d\u653b\u51fb\u7684\u8eca\uff0c \\(n,m \\le 200\\) \u3002 \u53d1\u73b0\u4e00\u4e2a\u8eca\u7684\u653b\u51fb\u8303\u56f4\u662f\u4e00\u884c\u548c\u4e00\u5217\u3002 \u6240\u4ee5\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a \\(1\\) \u8981\u7d20\uff1a\u6bcf\u884c\u6bcf\u5217\u6700\u591a\u4e00\u4e2a\u8eca\u3002 \u7136\u540e\u53ef\u4ee5\u8003\u8651\u628a \u884c\u548c\u5217\u770b\u4f5c\u70b9\uff0c\u68cb\u5b50\u770b\u4f5c\u8fb9 \uff0c\u56e0\u4e3a\u4e00\u4e2a\u68cb\u5b50\u4e0d\u53ef\u80fd\u540c\u65f6\u51fa\u73b0\u5728\u4e24\u884c\u6216\u8005\u4e24\u5217\uff0c\u6240\u4ee5\u8fd9\u5c31\u662f \\(0\\) \u8981\u7d20\u3002 \u90a3\u4e48\u6574\u5f20\u56fe\u5c31\u662f\u4e8c\u5206\u56fe\uff0c\u8dd1\u6700\u5927\u5339\u914d\u5373\u53ef\u3002 \u6700\u5c0f\u70b9\u8986\u76d6 \u00b6 \u7ed9\u5b9a\u4e00\u5f20\u4e8c\u5206\u56fe \\(G\\) \uff0c\u6c42\u51fa\u4e00\u4e2a\u6700\u5c0f\u7684\u70b9\u96c6 \\(S\\) \uff0c\u4f7f\u5f97\u56fe\u4e2d\u4efb\u610f\u7684\u4e00\u6761\u8fb9\u90fd\u81f3\u5c11\u6709\u4e00\u4e2a\u7aef\u70b9\u5c5e\u4e8e \\(S\\) \u3002 \u5219\u79f0 \\(S\\) \u4e3a\u4e8c\u5206\u56fe \\(G\\) \u7684\u6700\u5c0f\u70b9\u8986\u76d6\u3002 \u6709 \\(K\\ddot{o}nig\\) \u5b9a\u7406\uff1a\u4e8c\u5206\u56fe \\(G\\) \u7684\u6700\u5c0f\u70b9\u8986\u76d6\u5305\u542b\u7684\u70b9\u6570\u7b49\u4e8e \\(G\\) \u7684\u6700\u5927\u5339\u914d\u5305\u542b\u7684\u8fb9\u6570\u3002 \u8bc1\u660e\u7565\uff0c\u4f46\u662f\u63d0\u4e00\u4e2a\u6784\u9020\u65b9\u5f0f\uff1a \u5148\u6c42\u6700\u5927\u5339\u914d \\(S\\) \u3002 \u4ece\u5de6\u90e8\u7684\u6bcf\u4e00\u4e2a\u975e\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u518d\u505a\u4e00\u6b21 dfs \u627e\u589e\u5e7f\u8def\u5e76\u6807\u8bb0\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\u3002 \u6700\u540e\u5de6\u90e8\u6ca1\u6709\u88ab\u6807\u8bb0\u7684\u70b9\uff0c\u53f3\u90e8\u88ab\u6807\u8bb0\u7684\u70b9\u5c31\u662f\u6700\u5c0f\u70b9\u8986\u76d6\u3002 [POJ1325] Machine Schedule \u00b6 \u7ed9\u4e24\u53f0\u521d\u59cb\u4e3a\u6a21\u5f0f \\(0\\) \u7684\u673a\u5668 \\(A,B\\) \uff0c\u5206\u522b\u6709 \\(0\\sim N-1,0 \\sim M-1\\) \u8fd9\u51e0\u79cd\u6a21\u5f0f\u3002 \u7ed9\u5b9a \\(K\\) \u4e2a \\(a[i],b[i]\\) \u8868\u793a\u7b2c \\(i\\) \u4e2a\u4efb\u52a1\u5728 \\(A/B\\) \u4e0a\u8fd0\u884c\u6240\u9700\u8981\u7684\u6a21\u5f0f\u3002 \u4efb\u52a1\u6267\u884c\u987a\u5e8f\u4efb\u610f\uff0c\u4f46\u662f\u673a\u5668\u53ea\u8981\u8f6c\u6362\u6a21\u5f0f\u5c31\u8981\u91cd\u542f\u3002 \u6c42\u6700\u5c11\u91cd\u542f\u6b21\u6570\u3002 \\(N,M,K \\le 100\\) \u3002 \u4e8c\u5206\u56fe\u6700\u5c0f\u70b9\u8986\u76d6\u7684\u8981\u7d20\u53ea\u6709\u4e00\u4e2a \\(2\\) \u8981\u7d20\uff1a\u6bcf\u6761\u8fb9\u6709\u4e24\u4e2a\u7aef\u70b9\uff0c\u4e8c\u8005 \u81f3\u5c11 \u9009\u4e00\u4e2a\u3002 \u672c\u9898\u7684\u9009\u62e9\u54ea\u4e00\u4e2a\u673a\u5668\u5c31\u662f\u7aef\u70b9\uff0c\u4efb\u52a1\u5c31\u662f\u8fb9\u3002 \u6240\u4ee5\u628a\u4efb\u52a1\u4f5c\u4e3a\u8fb9\uff0c \\(A\\) \u7684\u6a21\u5f0f \\(0 \\sim N-1\\) \u4f5c\u4e3a\u5de6\u90e8\uff0c \\(B\\) \u7684\u6a21\u5f0f \\(0 \\sim M-1\\) \u4f5c\u4e3a\u53f3\u90e8\u8282\u70b9\u3002 \u7136\u540e\u6c42\u6700\u5c0f\u70b9\u8986\u76d6\u5373\u53ef\u3002 \u56e0\u4e3a\u521d\u59cb\u662f \\(0\\) \uff0c\u6240\u4ee5 \\(a[i],b[i]\\) \u53ea\u8981\u6709\u4e00\u4e2a\u662f \\(0\\) \u5c31\u53ef\u4ee5\u4e0d\u7528\u7ba1\u8fd9\u4e2a\u4efb\u52a1\u4e86\u3002 [POJ2226] Muddy Fields \u00b6 \u7ed9\u4e00\u4e2a \\(n\\times m\\) \u7684\u683c\u5b50\u56fe\uff0c\u6709\u4e9b\u5730\u65b9\u662f\u810f\u7684\u3002 \u7528\u82e5\u5e72\u4e2a\u53ef\u4ee5\u91cd\u590d\u8986\u76d6\u7684\uff0c\u53ef\u4ee5 90 \u5ea6\u65cb\u8f6c\u7684\uff0c\u5bbd\u4e3a \\(1\\) \uff0c\u957f\u5ea6\u4efb\u610f\u7684\u677f\u5b50\u8986\u76d6\u6240\u6709\u810f\u7684\u683c\u5b50\u3002 \u4e14\u4e0d\u80fd\u8986\u76d6\u5e72\u51c0\u7684\u683c\u5b50\uff0c\u6c42\u6700\u5c0f\u9700\u8981\u591a\u5c11\u4e2a\u677f\u5b50\u3002 \\(n,m \\le 50\\) \u3002 \u8fd9\u9898\u5982\u679c\u76f4\u63a5\u4ece\u683c\u5b50\u4f5c\u4e3a\u70b9\u6765\u5339\u914d\u662f\u627e\u4e0d\u5230\u4ec0\u4e48\u601d\u8def\u7684\u3002 \u53d1\u73b0\u9898\u76ee\u4e2d\u8bf4\u53ef\u4ee5\u65cb\u8f6c 90 \u5ea6\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e2a\u683c\u5b50\uff0c\u8986\u76d6\u5b83\u7684\u4e0d\u662f\u4e0a\u4e0b\u65b9\u5411\u7684\u5c31\u662f\u5de6\u53f3\u65b9\u5411\u7684\u677f\u5b50\u3002 \u5e76\u4e14\u9898\u76ee\u4e2d\u8bf4\u53ef\u4ee5\u91cd\u590d\u8986\u76d6\uff0c\u53ea\u8981\u88ab\u8986\u76d6\u8fc7\u90fd\u884c\u3002 \u8fd9\u53e5\u8bdd\u6697\u793a\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u4f4d\u8fd0\u7b97\u7684 \u201c\u6216\u201d \u7684\u6761\u4ef6\uff0c\u53ef\u4ee5\u628a\u4ed6\u8f6c\u5316\u6210 \u201c\u81f3\u5c11\u201d\u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u628a\u884c\u548c\u5217\u770b\u4f5c\u8282\u70b9\uff0c\u683c\u5b50\u4f5c\u4e3a\u8fb9\uff0c\u7c7b\u4f3c\u4e0a\u9762\u7684 \u201c\u8eca\u7684\u653e\u7f6e\u201d\u3002 \u4f46\u662f\u53d1\u73b0\u76f4\u63a5\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u5982\u679c\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\u5c31\u4f1a\u51fa\u4e8b \uff1a .*.*.*. \u3002 \u4e0a\u8ff0\u505a\u6cd5\u4f1a\u76f4\u63a5\u5728\u8fd9\u4e00\u884c\u653e\u4e00\u4e2a\uff0c\u800c\u5ffd\u7565\u4e86\u4e0d\u80fd\u8986\u76d6\u5e72\u51c0\u7684\u683c\u5b50\u7684\u6761\u4ef6\u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e2a\u810f\u683c\u5b50\u7684\u8fde\u901a\u5757\u5355\u72ec\u8dd1\u6700\u5c0f\u70b9\u8986\u76d6\u3002 \u4f46\u662f\u590d\u6742\u5ea6\u4f1a\u7206\u70b8\uff0c\u6240\u4ee5\u8003\u8651\u80fd\u8fbe\u5230\u540c\u6837\u6548\u679c\u7684\u53e6\u4e00\u4e2a\u505a\u6cd5\uff1a \u5bf9\u4e8e\u6bcf\u4e2a\u810f\u8fde\u901a\u5757\uff0c\u628a\u5b83\u5206\u6210\u5bbd\u5ea6\u4e3a \\(1\\) \u7684 \u201c\u884c\u810f\u8fde\u901a\u5757\u201d\u548c\u201c\u5217\u810f\u8fde\u901a\u5757\u201d\uff0c\u53ef\u4ee5\u770b\u4f5c\u76f4\u63a5\u653e\u4e86\u5757\u540c\u7b49\u5927\u5c0f\u7684\u677f\u5b50\u4e0a\u53bb\u3002 \u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u8fde\u63a5\u5b83\u6240\u5728\u7684\u201c\u884c\u810f\u8fde\u901a\u5757\u201d\u548c\u201c\u5217\u810f\u8fde\u901a\u5757\u201d\uff0c\u8dd1\u6700\u5c0f\u70b9\u8986\u76d6\u5373\u53ef\u3002 \u6700\u5927\u72ec\u7acb\u96c6 \u00b6 \u7ed9\u4e00\u5f20\u4e8c\u5206\u56fe \\(G\\) \uff0c\u6c42\u51fa\u4e00\u4e2a\u70b9\u96c6 \\(S\\) \u4f7f\u5f97 \\(S\\) \u5f53\u4e2d\u7684\u70b9\u90fd\u6ca1\u6709\u8fb9\u76f8\u8fde\u3002 \u6700\u5927\u7684 \\(S\\) \u5219\u79f0\u4e3a \\(G\\) \u7684\u6700\u5927\u72ec\u7acb\u96c6\u3002 \u6700\u5927\u56e2\u5b9a\u4e49\u76f8\u53cd\uff0c\u662f\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u90fd\u6709\u8fde\u8fb9\u7684\u4e00\u4e2a\u5b50\u56fe\u3002 \u5b9a\u7406\uff1a\u65e0\u5411\u56fe \\(G\\) \u7684\u6700\u5927\u56e2\u7b49\u4e8e\u5176\u8865\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6\u3002 \u4e00\u822c\u65e0\u5411\u56fe\u7684\u6700\u5927\u56e2\u548c\u6700\u5927\u72ec\u7acb\u96c6\u662f NPC\u3002 \u5b9a\u7406\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u4e8c\u5206\u56fe \\(G\\) \uff0c \\(G\\) \u7684\u6700\u5927\u72ec\u7acb\u96c6\u7684\u5927\u5c0f\u7b49\u4e8e\u8282\u70b9\u4e2a\u6570\u51cf\u53bb\u6700\u5c0f\u70b9\u8986\u76d6\u6570\u3002 \u5229\u7528\u5b9a\u4e49\u5373\u53ef\u8bc1\u660e\u3002 [CH6901] \u9a91\u58eb\u653e\u7f6e \u00b6 \u7ed9\u4e00\u4e2a \\(n\\times m\\) \u7684\u68cb\u76d8\u3002\u6709\u4e00\u4e9b\u70b9\u4e0d\u80fd\u653e\uff0c\u95ee\u6700\u591a\u53ef\u4ee5\u653e\u591a\u5c11\u4e2a\u56fd\u9645\u8c61\u68cb\u7684\u9a91\u58eb\u3002 \u9a91\u58eb\u5728\u683c\u5b50\u4e0a\u6309\u7167\u65e5\u5b57\u653b\u51fb\uff0c\u548c\u4e2d\u56fd\u8c61\u68cb\u7684\u9a6c\u6709\u4e00\u5b9a\u533a\u522b\uff08\u6ca1\u6709\u522b\u9a6c\u817f\uff09\u3002 \u53ef\u4ee5\u53d1\u73b0\u76f8\u4e92\u4e0d\u80fd\u653b\u51fb\u5c31\u662f\u6c42\u6700\u5927\u72ec\u7acb\u96c6\u3002 \u6240\u4ee5\u53ef\u4ee5\u628a\u6bcf\u4e00\u4e2a\u53ef\u4ee5\u9632\u6b62\u7684\u8282\u70b9\u5f53\u4f5c\u4e00\u4e2a\u8282\u70b9\u548c\u5b83\u80fd\u5230\u8fbe\u7684\u8282\u70b9\u8fde\u8fb9\u3002 \u9ed1\u767d\u67d3\u8272\u4e4b\u540e\u53ef\u4ee5\u53d1\u73b0\u6784\u9020\u7684\u56fe\u5fc5\u7136\u662f\u4e8c\u5206\u56fe\u3002 \u6240\u4ee5\u627e\u5230\u6240\u6709\u5de6\u90e8\u8282\u70b9\uff0c\u8fde\u8fb9\uff0c\u6c42\u6700\u5927\u72ec\u7acb\u96c6\u5373\u53ef\u3002 \u6700\u5c0f\u8def\u5f84\u70b9\u8986\u76d6 \u00b6 \u7ed9\u5b9a\u4e00\u5f20 DAG\uff0c\u8981\u6c42\u7528\u5c3d\u91cf\u5c11\u7684 \u4e0d\u76f8\u4ea4 \u8def\u5f84\u8986\u76d6\u6574\u5f20\u56fe\u7684\u6240\u6709\u9876\u70b9\u3002 \u8fd9\u5c31\u662f\u6700\u5c0f\u8def\u5f84\u70b9\u8986\u76d6\u3002 \u62c6\u70b9\u4e8c\u5206\u56fe\uff1a\u5bf9\u4e8e\u4e00\u5f20 DAG\uff0c\u8bbe\u5b83\u6709 \\(N\\) \u4e2a\u8282\u70b9\uff0c\u628a\u539f\u56fe\u7684\u6bcf\u4e2a\u8282\u70b9\u62c6\u6210\u4e24\u4e2a\u8282\u70b9\uff0c\u5de6\u90e8\u7684\u7f16\u53f7\u4e3a\u539f\u7f16\u53f7\uff0c\u53f3\u90e8\u7684\u7f16\u53f7\u4e3a\u539f\u7f16\u53f7 \\(+N\\) \u3002 \u5bf9\u4e8e\u539f\u56fe\u7684\u4e00\u6761\u6709\u5411\u8fb9 \\((x,y)\\) \uff0c\u8fde\u63a5\u65b0\u56fe\u4e0a\u7684 \\((x,y+n)\\) \u3002 \u5f97\u5230\u7684\u4e8c\u5206\u56fe\u79f0\u4e3a\u8fd9\u4e2a DAG \u7684\u62c6\u70b9\u4e8c\u5206\u56fe\uff0c\u4e00\u822c\u8bb0\u4f5c \\(G_2\\) \u3002 \u5b9a\u7406\uff1a\u4e00\u5f20 DAG \u7684\u6700\u5c0f\u8def\u5f84\u70b9\u8986\u76d6\u5305\u542b\u7684\u8def\u5f84\u6761\u6570\u7b49\u4e8e\u5b83\u7684\u70b9\u6570\u51cf\u53bb\u5b83\u7684\u62c6\u70b9\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u6570\u3002 \u8bc1\u660e\u7528\u5b9a\u4e49+ \u4e00\u4e9b\u8ba8\u8bba\u5373\u53ef\u3002 \u6700\u5c0f\u8def\u5f84\u53ef\u91cd\u590d\u70b9\u8986\u76d6 \u00b6 \u8def\u5f84\u53ef\u4ee5\u76f8\u4ea4\u3002 \u90a3\u4e48\u5148\u5bf9\u8fd9\u4e2a DAG \u505a\u4f20\u9012\u95ed\u5305\u5f97\u5230\u4e00\u5f20\u65b0\u7684 DAG\uff0c\u8fd9\u4e2a\u65b0 DAG \u7684\u6700\u5c0f\u8def\u5f84\u70b9\u8986\u76d6\u5c31\u662f\u539f DAG \u7684\u6700\u5c0f\u8def\u5f84\u53ef\u91cd\u590d\u70b9\u8986\u76d6\u3002 [Bzoj2718/1143] Vani \u548c Cl2 \u6349\u8ff7\u85cf \u00b6 Vani \u548c cl2 \u5728\u4e00\u7247\u6811\u6797\u91cc\u6349\u8ff7\u85cf\u3002 \u8fd9\u7247\u6811\u6797\u91cc\u6709 \\(N\\) \u5ea7\u623f\u5b50\uff0c \\(M\\) \u6761\u6709\u5411\u9053\u8def\uff0c\u7ec4\u6210\u4e86\u4e00\u5f20\u6709\u5411\u65e0\u73af\u56fe\u3002 \u6811\u6797\u91cc\u7684\u6811\u975e\u5e38\u8302\u5bc6\uff0c\u8db3\u4ee5\u906e\u6321\u89c6\u7ebf\uff0c\u4f46\u662f\u6cbf\u7740\u9053\u8def\u671b\u53bb\uff0c\u5374\u662f\u89c6\u91ce\u5f00\u9614\u3002 \u5982\u679c\u4ece\u623f\u5b50 \\(A\\) \u6cbf\u7740\u8def\u8d70\u4e0b\u53bb\u80fd\u591f\u5230\u8fbe \\(B\\) \uff0c\u90a3\u4e48\u5728 \\(A\\) \u548c \\(B\\) \u91cc\u7684\u4eba\u662f\u80fd\u591f\u76f8\u4e92\u671b\u89c1\u7684\u3002 \u73b0\u5728 cl2 \u8981\u5728\u8fd9 \\(N\\) \u5ea7\u623f\u5b50\u91cc\u9009\u62e9 \\(K\\) \u5ea7\u4f5c\u4e3a\u85cf\u8eab\u70b9\uff0c\u540c\u65f6 Vani \u4e5f\u4e13\u6311 cl2 \u4f5c\u4e3a\u85cf\u8eab\u70b9\u7684\u623f\u8fdb\u53bb\u5bfb\u627e\uff0c\u4e3a\u4e86\u907f\u514d\u88ab Vani \u770b\u89c1\uff0ccl2 \u8981\u6c42\u8fd9 \\(K\\) \u4e2a\u85cf\u8eab\u70b9\u7684\u4efb\u610f\u4e24\u4e2a\u4e4b\u95f4\u90fd\u6ca1\u6709\u8def\u5f84\u76f8\u8fde\u3002 \u4e3a\u4e86\u8ba9 Vani \u66f4\u96be\u627e\u5230\u81ea\u5df1\uff0ccl2 \u60f3\u77e5\u9053\u6700\u591a\u80fd\u9009\u51fa\u591a\u5c11\u4e2a\u85cf\u8eab\u70b9\u3002 \u660e\u663e\u5c31\u662f\u8981\u6c42\u6700\u5c0f\u8def\u5f84\u53ef\u91cd\u590d\u70b9\u8986\u76d6\u3002 \u6240\u4ee5\u5148\u505a\u4e00\u4e2a\u4f20\u9012\u95ed\u5305\uff0c\u7136\u540e\u62c6\u70b9\uff0c\u6c42\u6700\u5c0f\u8def\u5f84\u70b9\u8986\u76d6\u5373\u53ef\u3002","title":"\u4e8c\u5206\u56fe"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E4%BA%8C%E5%88%86%E5%9B%BE/#_1","text":"\u5b9a\u4e49\uff1a\u5982\u679c\u4e00\u5f20\u65e0\u5411\u56fe \\(G\\) \u53ef\u4ee5\u5206\u6210\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u7684\u70b9\u96c6 \\(A,B\\) \uff0c\u4e14\u70b9\u96c6\u5f53\u4e2d\u7684\u70b9\u76f8\u4e92\u4e4b\u95f4\u6ca1\u6709\u8fde\u8fb9\uff0c\u5219\u79f0 \\(G\\) \u4e3a\u4e00\u5f20\u4e8c\u5206\u56fe\u3002 \\(A,B\\) \u5206\u522b\u79f0\u4e3a \\(G\\) \u7684\u5de6\u90e8\u548c\u53f3\u90e8\u3002","title":"\u4e8c\u5206\u56fe"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E4%BA%8C%E5%88%86%E5%9B%BE/#_2","text":"\u5b9a\u7406\uff1a\u65e0\u5411\u56fe \\(G\\) \u662f\u4e8c\u5206\u56fe\uff0c \u5f53\u4e14\u4ec5\u5f53 \u56fe\u4e2d\u4e0d\u5b58\u5728\u5947\u73af\u3002 \u6240\u4ee5\u53ef\u4ee5\u7528\u67d3\u8272\u6cd5\u5224\u5b9a\u65e0\u5411\u56fe \\(G\\) \u662f\u4e0d\u662f\u4e8c\u5206\u56fe\u3002 \u8fdb\u884c\u9ed1\u767d\u7684\u95f4\u9694\u67d3\u8272\uff0c\u5982\u679c\u51fa\u73b0\u51b2\u7a81\uff0c\u90a3\u4e48\u56fe\u4e2d\u5fc5\u7136\u5b58\u5728\u5947\u73af\uff0c \\(G\\) \u4e0d\u662f\u4e8c\u5206\u56fe\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 int color [ si_n ]; bool ok = true ; inline void dfs ( int u , int col ){ color [ u ] = col ; for ( register int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( ! color [ v ]) dfs ( v , 3 - col ); else if ( color [ v ] == col ) ok = false ; } } // in main() memset ( color , 0 , sizeof color ); for ( register int i = 1 ; i <= n ; ++ i ) if ( ! color [ i ]) dfs ( i , 1 ); \u590d\u6742\u5ea6 \\(\\text{O}(n+m)\\) \u3002","title":"\u5224\u5b9a"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E4%BA%8C%E5%88%86%E5%9B%BE/#_3","text":"\u5339\u914d\uff1a\u4efb\u610f\u4e24\u6761\u8fb9\u90fd\u6ca1\u6709\u516c\u5171\u7aef\u70b9\u7684\u8fb9\u96c6\u79f0\u4e3a\u56fe\u7684\u4e00\u7ec4\u5339\u914d \\(S\\) \u3002 \u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\uff1a\u4e8c\u5206\u56fe\u5f53\u4e2d\uff0c\u8fb9\u6570\u6700\u591a\u7684\u4e00\u7ec4\u5339\u914d\u4e3a\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u3002 \u5728 \\(S\\) \u5f53\u4e2d\u7684\u8fb9\u88ab\u79f0\u4e3a\u5339\u914d\u8fb9\uff0c\u5176\u5b83\u7684\u8fb9\u79f0\u4e3a\u975e\u5339\u914d\u8fb9\uff0c\u5339\u914d\u8fb9\u7684\u7aef\u70b9\u662f\u5339\u914d\u70b9\uff0c \u5176\u5b83 \u8282\u70b9\u88ab\u79f0\u4e3a\u975e\u5339\u914d\u70b9\u3002 \u5982\u679c\u4e8c\u5206\u56fe\u4e0a\u5b58\u5728\u4e00\u6761\u8def\u5f84 \\(\\delta(u,v)\\) \uff0c\u8fde\u63a5 \\(u,v\\) \u8fd9\u4e24\u4e2a\u975e\u5339\u914d\u70b9\uff0c\u4f7f\u5f97 \\(S\\) \u7684\u5339\u914d\u8fb9\u548c\u975e\u5339\u914d\u8fb9\u5728\u8def\u5f84\u4e0a\u4ea4\u66ff\u51fa\u73b0\uff0c\u79f0 \\(\\delta(u,v)\\) \u4e3a\u5339\u914d \\(S\\) \u7684\u589e\u5e7f\u8def\u3002 \u5982\u56fe\uff0c \\(\\delta(u,v)\\) \u5373\u4e3a\u4e00\u6761\u589e\u5e7f\u8def\uff1a \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5148\u5b9a\u4e49\u7684\u662f\u5339\u914d\u70b9\u548c\u5339\u914d\u8fb9\uff0c\u5269\u4e0b\u7684\u624d\u662f\u975e\u5339\u914d\u8fb9\u548c\u5339\u914d\u70b9\u3002 \u6240\u4ee5 \u8fde\u63a5\u4e24\u4e2a\u5339\u914d\u70b9\u7684\u4e0d\u4e00\u5b9a\u662f\u5339\u914d\u8fb9\uff0c\u4f46\u7aef\u70b9\u5e26\u6709\u975e\u5339\u914d\u70b9\u7684\u8fb9\u4e00\u5b9a\u662f\u975e\u5339\u914d\u8fb9 \u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u589e\u5e7f\u8def\u5177\u6709\u4ee5\u4e0b\u6027\u8d28\uff1a \u8fb9\u6570\u4e3a\u5947\u6570 \u7b2c \\(1,3,5,...\\) \u6761\u8fb9\u662f\u975e\u5339\u914d\u8fb9\uff0c\u7b2c \\(2,4,6,...\\) \u6761\u8fb9\u662f\u5339\u914d\u8fb9\u3002 \u6240\u4ee5\uff0c\u53ef\u4ee5\u5bf9\u589e\u5e7f\u8def\u4e0a\u7684\u8fb9\u7684\u72b6\u6001\u53d6\u53cd\uff0c\u5f97\u5230\u7684\u5339\u914d\u6570\u5fc5\u7136\u4f1a\u589e\u52a0 \\(1\\) \u3002 \u4ece\u800c\u53ef\u4ee5\u5f97\u5230\u5b9a\u7406\uff1a \u4e8c\u5206\u56fe\u7684\u4e00\u7ec4\u5339\u914d \\(S\\) \u662f\u6700\u5927\u5339\u914d\uff0c \u5f53\u4e14\u4ec5\u5f53 \u56fe\u4e2d\u4e0d\u5b58\u5728 \\(S\\) \u7684\u589e\u5e7f\u8def\u3002 \u5bf9\u5e94\u7684\u6709\u4e00\u4e2a\u5308\u7259\u5229\u7b97\u6cd5\uff0c\u53ef\u4ee5\u5229\u7528\u589e\u5e7f\u8def\u6c42\u51fa\u4e8c\u5206\u56fe \\(G\\) \u7684\u6700\u5927\u5339\u914d\u3002 \u601d\u8def\u662f\uff1a \u6700\u5f00\u59cb\u5148\u4ee4 \\(S=\\emptyset\\) \uff0c\u7136\u540e\u5bfb\u627e\u4e00\u4e2a\u589e\u5e7f\u8def\uff0c\u53d6\u53cd\uff0c\u5f97\u5230\u65b0\u5339\u914d \\(S\\prime\\) \u3002 \u91cd\u590d\u76f4\u5230\u4e0d\u5b58\u5728\u589e\u5e7f\u8def\u3002 \u5bfb\u627e\u589e\u5e7f\u8def\u7684\u65f6\u5019\u5206\u4e24\u79cd\u60c5\u51b5\u7ed9\u4e00\u4e2a\u5de6\u90e8\u8282\u70b9 \\(x\\) \u5bfb\u627e\u4e00\u4e2a\u5339\u914d\u7684\u53f3\u90e8\u8282\u70b9 \\(y\\) \uff1a \\(y\\) \u5c31\u662f\u975e\u5339\u914d\u70b9\uff0c \\((x,y)\\) \u672c\u8eab\u5c31\u662f\u589e\u5e7f\u8def\u3002 \\(y\\) \u5df2\u7ecf\u548c\u53e6\u5916\u4e00\u4e2a\u5de6\u90e8\u8282\u70b9\u5339\u914d\uff0c\u4f46\u662f\u8fd9\u4e2a\u5de6\u90e8\u8282\u70b9 \\(u\\) \u8fd8\u80fd\u627e\u5230\u53e6\u5916\u7684\u53f3\u90e8\u8282\u70b9 \\(v\\) \u5339\u914d\u3002 \u5219 \\(x\\to y \\to u \\to v\\) \u662f\u4e00\u6761\u589e\u5e7f\u8def . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 bool vis [ si_n ]; int match [ si_n ]; inline bool dfs ( int u ){ for ( register int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( ! vis [ v ]){ vis [ v ] = true ; if ( ! match [ v ] || dfs ( match [ v ])){ match [ v ] = u ; return true ; } // \u5bfb\u627e\u589e\u5e7f\u8def\u7684\u4e24\u79cd\u60c5\u51b5 } } return false ; } // in main() int res = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ memset ( vis , false , sizeof vis ); if ( dfs ( i )) res ++ ; } // \u53ea\u7528\u4ece\u5de6\u90e8\u5f00\u59cb // \u8fde\u8fb9\u7684\u65f6\u5019\u4f3c\u4e4e\u53ef\u4ee5\u53ea\u8fde\u4ece\u5de6\u90e8\u5230\u53f3\u90e8\u7684\u6709\u5411\u8fb9 \u590d\u6742\u5ea6 \\(\\text{O}(nm)\\) \uff0c\u4f46\u4e00\u822c\u5361\u4e0d\u6ee1\u3002 \u5efa\u56fe\u8fde\u8fb9\u7684\u65f6\u5019\u4f3c\u4e4e\u53ef\u4ee5\u53ea\u8fde\u4ece\u5de6\u90e8\u5230\u53f3\u90e8\u7684\u6709\u5411\u8fb9\uff1f \u5982\u679c\u8fde\u65e0\u5411\u8fb9\u4f3c\u4e4e\u4e5f\u4e00\u6837\u3002","title":"\u6700\u5927\u5339\u914d"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E4%BA%8C%E5%88%86%E5%9B%BE/#ch6801","text":"\u7ed9\u5b9a\u4e00\u4e2a \\(n\\times m\\) \u7684\u68cb\u76d8\uff0c\u6709\u4e9b\u5730\u65b9\u4e0d\u80fd\u653e\uff0c\u6c42\u6700\u591a\u80fd\u653e\u591a\u5c11\u4e2a \\(1\\times 2\\) \u6216\u8005 \\(2\\times 1\\) \u7684\u9aa8\u724c\u3002 \u4e14\u9aa8\u724c\u4e0d\u80fd\u91cd\u53e0\u3002 \\(n,m\\le 100\\) \u3002 \u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u7684\u6a21\u578b\u9700\u8981\u627e\u5230\u4e24\u4e2a\u8981\u7d20\uff1a \\(0\\) \u8981\u7d20\uff1a\u8282\u70b9\u80fd\u5206\u6210\u4e24\u4e2a\u72ec\u7acb\u7684\u96c6\u5408\uff0c\u4e14\u96c6\u5408\u5185\u90e8\u6ca1\u6709\u8fb9 \\(1\\) \u8981\u7d20\uff1a\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u548c\u4e00\u6761\u5339\u914d\u8fb9\u76f8\u8fde\u3002 \u9aa8\u724c\u4e0d\u80fd\u91cd\u590d\uff0c\u5bf9\u5e94\u7684\u5c31\u662f \\(1\\) \u8981\u7d20\uff0c\u6240\u4ee5\u53ef\u4ee5\u628a\u9aa8\u724c\u770b\u4f5c\u8fb9\uff0c\u9aa8\u724c\u53ef\u4ee5\u5360\u7528\u7684\u4e24\u4e2a\u683c\u5b50\u5206\u522b\u5f53\u4f5c\u5de6\u90e8\u548c\u53f3\u90e8\u8282\u70b9\u3002 \u6240\u4ee5\u5bf9\u68cb\u76d8 \u9ed1\u767d\u67d3\u8272 \uff0c\u90a3\u4e0d\u7ba1\u600e\u4e48\u6837\uff0c\u9aa8\u724c\u5fc5\u7136\u8fde\u63a5\u7684\u662f\u5de6\u53f3\u90e8\u5404\u4e00\u4e2a\u8282\u70b9\u3002 \u628a ban \u6389\u7684\u683c\u5b50\u9664\u5916\u5c31\u53ef\u4ee5\u4e86\u3002 \uff08\u7528\u6a2a\u7eb5\u5750\u6807\u7684\u548c\u7684\u5947\u5076\u6027\u53d6\u5206\u5de6\u53f3\u90e8\u8282\u70b9\u5373\u53ef\uff09 \u8fde\u8fb9\u7684\u65f6\u5019\u53ea\u9700\u8981\u4ece\u5de6\u90e8\u8fde\u5230\u53f3\u90e8\u5c31\u884c\u3002 \u6c42\u51fa\u7684\u6700\u5927\u5339\u914d\u5c31\u662f\u7b54\u6848\u3002","title":"[CH6801] \u68cb\u76d8\u8986\u76d6"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E4%BA%8C%E5%88%86%E5%9B%BE/#ch6802","text":"\u7ed9\u5b9a\u4e00\u4e2a \\(n \\times m\\) \u7684\u68cb\u76d8\uff0c\u6709\u4e00\u4e9b\u683c\u5b50\u4e0d\u80fd\u653e\u3002 \u95ee\u6700\u591a\u53ef\u4ee5\u653e\u591a\u5c11\u4e2a\u4e92\u4e0d\u653b\u51fb\u7684\u8eca\uff0c \\(n,m \\le 200\\) \u3002 \u53d1\u73b0\u4e00\u4e2a\u8eca\u7684\u653b\u51fb\u8303\u56f4\u662f\u4e00\u884c\u548c\u4e00\u5217\u3002 \u6240\u4ee5\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a \\(1\\) \u8981\u7d20\uff1a\u6bcf\u884c\u6bcf\u5217\u6700\u591a\u4e00\u4e2a\u8eca\u3002 \u7136\u540e\u53ef\u4ee5\u8003\u8651\u628a \u884c\u548c\u5217\u770b\u4f5c\u70b9\uff0c\u68cb\u5b50\u770b\u4f5c\u8fb9 \uff0c\u56e0\u4e3a\u4e00\u4e2a\u68cb\u5b50\u4e0d\u53ef\u80fd\u540c\u65f6\u51fa\u73b0\u5728\u4e24\u884c\u6216\u8005\u4e24\u5217\uff0c\u6240\u4ee5\u8fd9\u5c31\u662f \\(0\\) \u8981\u7d20\u3002 \u90a3\u4e48\u6574\u5f20\u56fe\u5c31\u662f\u4e8c\u5206\u56fe\uff0c\u8dd1\u6700\u5927\u5339\u914d\u5373\u53ef\u3002","title":"[CH6802] \u8eca\u7684\u653e\u7f6e"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E4%BA%8C%E5%88%86%E5%9B%BE/#_4","text":"\u7ed9\u5b9a\u4e00\u5f20\u4e8c\u5206\u56fe \\(G\\) \uff0c\u6c42\u51fa\u4e00\u4e2a\u6700\u5c0f\u7684\u70b9\u96c6 \\(S\\) \uff0c\u4f7f\u5f97\u56fe\u4e2d\u4efb\u610f\u7684\u4e00\u6761\u8fb9\u90fd\u81f3\u5c11\u6709\u4e00\u4e2a\u7aef\u70b9\u5c5e\u4e8e \\(S\\) \u3002 \u5219\u79f0 \\(S\\) \u4e3a\u4e8c\u5206\u56fe \\(G\\) \u7684\u6700\u5c0f\u70b9\u8986\u76d6\u3002 \u6709 \\(K\\ddot{o}nig\\) \u5b9a\u7406\uff1a\u4e8c\u5206\u56fe \\(G\\) \u7684\u6700\u5c0f\u70b9\u8986\u76d6\u5305\u542b\u7684\u70b9\u6570\u7b49\u4e8e \\(G\\) \u7684\u6700\u5927\u5339\u914d\u5305\u542b\u7684\u8fb9\u6570\u3002 \u8bc1\u660e\u7565\uff0c\u4f46\u662f\u63d0\u4e00\u4e2a\u6784\u9020\u65b9\u5f0f\uff1a \u5148\u6c42\u6700\u5927\u5339\u914d \\(S\\) \u3002 \u4ece\u5de6\u90e8\u7684\u6bcf\u4e00\u4e2a\u975e\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u518d\u505a\u4e00\u6b21 dfs \u627e\u589e\u5e7f\u8def\u5e76\u6807\u8bb0\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\u3002 \u6700\u540e\u5de6\u90e8\u6ca1\u6709\u88ab\u6807\u8bb0\u7684\u70b9\uff0c\u53f3\u90e8\u88ab\u6807\u8bb0\u7684\u70b9\u5c31\u662f\u6700\u5c0f\u70b9\u8986\u76d6\u3002","title":"\u6700\u5c0f\u70b9\u8986\u76d6"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E4%BA%8C%E5%88%86%E5%9B%BE/#poj1325-machine-schedule","text":"\u7ed9\u4e24\u53f0\u521d\u59cb\u4e3a\u6a21\u5f0f \\(0\\) \u7684\u673a\u5668 \\(A,B\\) \uff0c\u5206\u522b\u6709 \\(0\\sim N-1,0 \\sim M-1\\) \u8fd9\u51e0\u79cd\u6a21\u5f0f\u3002 \u7ed9\u5b9a \\(K\\) \u4e2a \\(a[i],b[i]\\) \u8868\u793a\u7b2c \\(i\\) \u4e2a\u4efb\u52a1\u5728 \\(A/B\\) \u4e0a\u8fd0\u884c\u6240\u9700\u8981\u7684\u6a21\u5f0f\u3002 \u4efb\u52a1\u6267\u884c\u987a\u5e8f\u4efb\u610f\uff0c\u4f46\u662f\u673a\u5668\u53ea\u8981\u8f6c\u6362\u6a21\u5f0f\u5c31\u8981\u91cd\u542f\u3002 \u6c42\u6700\u5c11\u91cd\u542f\u6b21\u6570\u3002 \\(N,M,K \\le 100\\) \u3002 \u4e8c\u5206\u56fe\u6700\u5c0f\u70b9\u8986\u76d6\u7684\u8981\u7d20\u53ea\u6709\u4e00\u4e2a \\(2\\) \u8981\u7d20\uff1a\u6bcf\u6761\u8fb9\u6709\u4e24\u4e2a\u7aef\u70b9\uff0c\u4e8c\u8005 \u81f3\u5c11 \u9009\u4e00\u4e2a\u3002 \u672c\u9898\u7684\u9009\u62e9\u54ea\u4e00\u4e2a\u673a\u5668\u5c31\u662f\u7aef\u70b9\uff0c\u4efb\u52a1\u5c31\u662f\u8fb9\u3002 \u6240\u4ee5\u628a\u4efb\u52a1\u4f5c\u4e3a\u8fb9\uff0c \\(A\\) \u7684\u6a21\u5f0f \\(0 \\sim N-1\\) \u4f5c\u4e3a\u5de6\u90e8\uff0c \\(B\\) \u7684\u6a21\u5f0f \\(0 \\sim M-1\\) \u4f5c\u4e3a\u53f3\u90e8\u8282\u70b9\u3002 \u7136\u540e\u6c42\u6700\u5c0f\u70b9\u8986\u76d6\u5373\u53ef\u3002 \u56e0\u4e3a\u521d\u59cb\u662f \\(0\\) \uff0c\u6240\u4ee5 \\(a[i],b[i]\\) \u53ea\u8981\u6709\u4e00\u4e2a\u662f \\(0\\) \u5c31\u53ef\u4ee5\u4e0d\u7528\u7ba1\u8fd9\u4e2a\u4efb\u52a1\u4e86\u3002","title":"[POJ1325] Machine Schedule"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E4%BA%8C%E5%88%86%E5%9B%BE/#poj2226-muddy-fields","text":"\u7ed9\u4e00\u4e2a \\(n\\times m\\) \u7684\u683c\u5b50\u56fe\uff0c\u6709\u4e9b\u5730\u65b9\u662f\u810f\u7684\u3002 \u7528\u82e5\u5e72\u4e2a\u53ef\u4ee5\u91cd\u590d\u8986\u76d6\u7684\uff0c\u53ef\u4ee5 90 \u5ea6\u65cb\u8f6c\u7684\uff0c\u5bbd\u4e3a \\(1\\) \uff0c\u957f\u5ea6\u4efb\u610f\u7684\u677f\u5b50\u8986\u76d6\u6240\u6709\u810f\u7684\u683c\u5b50\u3002 \u4e14\u4e0d\u80fd\u8986\u76d6\u5e72\u51c0\u7684\u683c\u5b50\uff0c\u6c42\u6700\u5c0f\u9700\u8981\u591a\u5c11\u4e2a\u677f\u5b50\u3002 \\(n,m \\le 50\\) \u3002 \u8fd9\u9898\u5982\u679c\u76f4\u63a5\u4ece\u683c\u5b50\u4f5c\u4e3a\u70b9\u6765\u5339\u914d\u662f\u627e\u4e0d\u5230\u4ec0\u4e48\u601d\u8def\u7684\u3002 \u53d1\u73b0\u9898\u76ee\u4e2d\u8bf4\u53ef\u4ee5\u65cb\u8f6c 90 \u5ea6\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e2a\u683c\u5b50\uff0c\u8986\u76d6\u5b83\u7684\u4e0d\u662f\u4e0a\u4e0b\u65b9\u5411\u7684\u5c31\u662f\u5de6\u53f3\u65b9\u5411\u7684\u677f\u5b50\u3002 \u5e76\u4e14\u9898\u76ee\u4e2d\u8bf4\u53ef\u4ee5\u91cd\u590d\u8986\u76d6\uff0c\u53ea\u8981\u88ab\u8986\u76d6\u8fc7\u90fd\u884c\u3002 \u8fd9\u53e5\u8bdd\u6697\u793a\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u4f4d\u8fd0\u7b97\u7684 \u201c\u6216\u201d \u7684\u6761\u4ef6\uff0c\u53ef\u4ee5\u628a\u4ed6\u8f6c\u5316\u6210 \u201c\u81f3\u5c11\u201d\u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u628a\u884c\u548c\u5217\u770b\u4f5c\u8282\u70b9\uff0c\u683c\u5b50\u4f5c\u4e3a\u8fb9\uff0c\u7c7b\u4f3c\u4e0a\u9762\u7684 \u201c\u8eca\u7684\u653e\u7f6e\u201d\u3002 \u4f46\u662f\u53d1\u73b0\u76f4\u63a5\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u5982\u679c\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\u5c31\u4f1a\u51fa\u4e8b \uff1a .*.*.*. \u3002 \u4e0a\u8ff0\u505a\u6cd5\u4f1a\u76f4\u63a5\u5728\u8fd9\u4e00\u884c\u653e\u4e00\u4e2a\uff0c\u800c\u5ffd\u7565\u4e86\u4e0d\u80fd\u8986\u76d6\u5e72\u51c0\u7684\u683c\u5b50\u7684\u6761\u4ef6\u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e2a\u810f\u683c\u5b50\u7684\u8fde\u901a\u5757\u5355\u72ec\u8dd1\u6700\u5c0f\u70b9\u8986\u76d6\u3002 \u4f46\u662f\u590d\u6742\u5ea6\u4f1a\u7206\u70b8\uff0c\u6240\u4ee5\u8003\u8651\u80fd\u8fbe\u5230\u540c\u6837\u6548\u679c\u7684\u53e6\u4e00\u4e2a\u505a\u6cd5\uff1a \u5bf9\u4e8e\u6bcf\u4e2a\u810f\u8fde\u901a\u5757\uff0c\u628a\u5b83\u5206\u6210\u5bbd\u5ea6\u4e3a \\(1\\) \u7684 \u201c\u884c\u810f\u8fde\u901a\u5757\u201d\u548c\u201c\u5217\u810f\u8fde\u901a\u5757\u201d\uff0c\u53ef\u4ee5\u770b\u4f5c\u76f4\u63a5\u653e\u4e86\u5757\u540c\u7b49\u5927\u5c0f\u7684\u677f\u5b50\u4e0a\u53bb\u3002 \u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u8fde\u63a5\u5b83\u6240\u5728\u7684\u201c\u884c\u810f\u8fde\u901a\u5757\u201d\u548c\u201c\u5217\u810f\u8fde\u901a\u5757\u201d\uff0c\u8dd1\u6700\u5c0f\u70b9\u8986\u76d6\u5373\u53ef\u3002","title":"[POJ2226] Muddy Fields"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E4%BA%8C%E5%88%86%E5%9B%BE/#_5","text":"\u7ed9\u4e00\u5f20\u4e8c\u5206\u56fe \\(G\\) \uff0c\u6c42\u51fa\u4e00\u4e2a\u70b9\u96c6 \\(S\\) \u4f7f\u5f97 \\(S\\) \u5f53\u4e2d\u7684\u70b9\u90fd\u6ca1\u6709\u8fb9\u76f8\u8fde\u3002 \u6700\u5927\u7684 \\(S\\) \u5219\u79f0\u4e3a \\(G\\) \u7684\u6700\u5927\u72ec\u7acb\u96c6\u3002 \u6700\u5927\u56e2\u5b9a\u4e49\u76f8\u53cd\uff0c\u662f\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u90fd\u6709\u8fde\u8fb9\u7684\u4e00\u4e2a\u5b50\u56fe\u3002 \u5b9a\u7406\uff1a\u65e0\u5411\u56fe \\(G\\) \u7684\u6700\u5927\u56e2\u7b49\u4e8e\u5176\u8865\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6\u3002 \u4e00\u822c\u65e0\u5411\u56fe\u7684\u6700\u5927\u56e2\u548c\u6700\u5927\u72ec\u7acb\u96c6\u662f NPC\u3002 \u5b9a\u7406\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u4e8c\u5206\u56fe \\(G\\) \uff0c \\(G\\) \u7684\u6700\u5927\u72ec\u7acb\u96c6\u7684\u5927\u5c0f\u7b49\u4e8e\u8282\u70b9\u4e2a\u6570\u51cf\u53bb\u6700\u5c0f\u70b9\u8986\u76d6\u6570\u3002 \u5229\u7528\u5b9a\u4e49\u5373\u53ef\u8bc1\u660e\u3002","title":"\u6700\u5927\u72ec\u7acb\u96c6"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E4%BA%8C%E5%88%86%E5%9B%BE/#ch6901","text":"\u7ed9\u4e00\u4e2a \\(n\\times m\\) \u7684\u68cb\u76d8\u3002\u6709\u4e00\u4e9b\u70b9\u4e0d\u80fd\u653e\uff0c\u95ee\u6700\u591a\u53ef\u4ee5\u653e\u591a\u5c11\u4e2a\u56fd\u9645\u8c61\u68cb\u7684\u9a91\u58eb\u3002 \u9a91\u58eb\u5728\u683c\u5b50\u4e0a\u6309\u7167\u65e5\u5b57\u653b\u51fb\uff0c\u548c\u4e2d\u56fd\u8c61\u68cb\u7684\u9a6c\u6709\u4e00\u5b9a\u533a\u522b\uff08\u6ca1\u6709\u522b\u9a6c\u817f\uff09\u3002 \u53ef\u4ee5\u53d1\u73b0\u76f8\u4e92\u4e0d\u80fd\u653b\u51fb\u5c31\u662f\u6c42\u6700\u5927\u72ec\u7acb\u96c6\u3002 \u6240\u4ee5\u53ef\u4ee5\u628a\u6bcf\u4e00\u4e2a\u53ef\u4ee5\u9632\u6b62\u7684\u8282\u70b9\u5f53\u4f5c\u4e00\u4e2a\u8282\u70b9\u548c\u5b83\u80fd\u5230\u8fbe\u7684\u8282\u70b9\u8fde\u8fb9\u3002 \u9ed1\u767d\u67d3\u8272\u4e4b\u540e\u53ef\u4ee5\u53d1\u73b0\u6784\u9020\u7684\u56fe\u5fc5\u7136\u662f\u4e8c\u5206\u56fe\u3002 \u6240\u4ee5\u627e\u5230\u6240\u6709\u5de6\u90e8\u8282\u70b9\uff0c\u8fde\u8fb9\uff0c\u6c42\u6700\u5927\u72ec\u7acb\u96c6\u5373\u53ef\u3002","title":"[CH6901] \u9a91\u58eb\u653e\u7f6e"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E4%BA%8C%E5%88%86%E5%9B%BE/#_6","text":"\u7ed9\u5b9a\u4e00\u5f20 DAG\uff0c\u8981\u6c42\u7528\u5c3d\u91cf\u5c11\u7684 \u4e0d\u76f8\u4ea4 \u8def\u5f84\u8986\u76d6\u6574\u5f20\u56fe\u7684\u6240\u6709\u9876\u70b9\u3002 \u8fd9\u5c31\u662f\u6700\u5c0f\u8def\u5f84\u70b9\u8986\u76d6\u3002 \u62c6\u70b9\u4e8c\u5206\u56fe\uff1a\u5bf9\u4e8e\u4e00\u5f20 DAG\uff0c\u8bbe\u5b83\u6709 \\(N\\) \u4e2a\u8282\u70b9\uff0c\u628a\u539f\u56fe\u7684\u6bcf\u4e2a\u8282\u70b9\u62c6\u6210\u4e24\u4e2a\u8282\u70b9\uff0c\u5de6\u90e8\u7684\u7f16\u53f7\u4e3a\u539f\u7f16\u53f7\uff0c\u53f3\u90e8\u7684\u7f16\u53f7\u4e3a\u539f\u7f16\u53f7 \\(+N\\) \u3002 \u5bf9\u4e8e\u539f\u56fe\u7684\u4e00\u6761\u6709\u5411\u8fb9 \\((x,y)\\) \uff0c\u8fde\u63a5\u65b0\u56fe\u4e0a\u7684 \\((x,y+n)\\) \u3002 \u5f97\u5230\u7684\u4e8c\u5206\u56fe\u79f0\u4e3a\u8fd9\u4e2a DAG \u7684\u62c6\u70b9\u4e8c\u5206\u56fe\uff0c\u4e00\u822c\u8bb0\u4f5c \\(G_2\\) \u3002 \u5b9a\u7406\uff1a\u4e00\u5f20 DAG \u7684\u6700\u5c0f\u8def\u5f84\u70b9\u8986\u76d6\u5305\u542b\u7684\u8def\u5f84\u6761\u6570\u7b49\u4e8e\u5b83\u7684\u70b9\u6570\u51cf\u53bb\u5b83\u7684\u62c6\u70b9\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u6570\u3002 \u8bc1\u660e\u7528\u5b9a\u4e49+ \u4e00\u4e9b\u8ba8\u8bba\u5373\u53ef\u3002","title":"\u6700\u5c0f\u8def\u5f84\u70b9\u8986\u76d6"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E4%BA%8C%E5%88%86%E5%9B%BE/#_7","text":"\u8def\u5f84\u53ef\u4ee5\u76f8\u4ea4\u3002 \u90a3\u4e48\u5148\u5bf9\u8fd9\u4e2a DAG \u505a\u4f20\u9012\u95ed\u5305\u5f97\u5230\u4e00\u5f20\u65b0\u7684 DAG\uff0c\u8fd9\u4e2a\u65b0 DAG \u7684\u6700\u5c0f\u8def\u5f84\u70b9\u8986\u76d6\u5c31\u662f\u539f DAG \u7684\u6700\u5c0f\u8def\u5f84\u53ef\u91cd\u590d\u70b9\u8986\u76d6\u3002","title":"\u6700\u5c0f\u8def\u5f84\u53ef\u91cd\u590d\u70b9\u8986\u76d6"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E4%BA%8C%E5%88%86%E5%9B%BE/#bzoj27181143-vani-cl2","text":"Vani \u548c cl2 \u5728\u4e00\u7247\u6811\u6797\u91cc\u6349\u8ff7\u85cf\u3002 \u8fd9\u7247\u6811\u6797\u91cc\u6709 \\(N\\) \u5ea7\u623f\u5b50\uff0c \\(M\\) \u6761\u6709\u5411\u9053\u8def\uff0c\u7ec4\u6210\u4e86\u4e00\u5f20\u6709\u5411\u65e0\u73af\u56fe\u3002 \u6811\u6797\u91cc\u7684\u6811\u975e\u5e38\u8302\u5bc6\uff0c\u8db3\u4ee5\u906e\u6321\u89c6\u7ebf\uff0c\u4f46\u662f\u6cbf\u7740\u9053\u8def\u671b\u53bb\uff0c\u5374\u662f\u89c6\u91ce\u5f00\u9614\u3002 \u5982\u679c\u4ece\u623f\u5b50 \\(A\\) \u6cbf\u7740\u8def\u8d70\u4e0b\u53bb\u80fd\u591f\u5230\u8fbe \\(B\\) \uff0c\u90a3\u4e48\u5728 \\(A\\) \u548c \\(B\\) \u91cc\u7684\u4eba\u662f\u80fd\u591f\u76f8\u4e92\u671b\u89c1\u7684\u3002 \u73b0\u5728 cl2 \u8981\u5728\u8fd9 \\(N\\) \u5ea7\u623f\u5b50\u91cc\u9009\u62e9 \\(K\\) \u5ea7\u4f5c\u4e3a\u85cf\u8eab\u70b9\uff0c\u540c\u65f6 Vani \u4e5f\u4e13\u6311 cl2 \u4f5c\u4e3a\u85cf\u8eab\u70b9\u7684\u623f\u8fdb\u53bb\u5bfb\u627e\uff0c\u4e3a\u4e86\u907f\u514d\u88ab Vani \u770b\u89c1\uff0ccl2 \u8981\u6c42\u8fd9 \\(K\\) \u4e2a\u85cf\u8eab\u70b9\u7684\u4efb\u610f\u4e24\u4e2a\u4e4b\u95f4\u90fd\u6ca1\u6709\u8def\u5f84\u76f8\u8fde\u3002 \u4e3a\u4e86\u8ba9 Vani \u66f4\u96be\u627e\u5230\u81ea\u5df1\uff0ccl2 \u60f3\u77e5\u9053\u6700\u591a\u80fd\u9009\u51fa\u591a\u5c11\u4e2a\u85cf\u8eab\u70b9\u3002 \u660e\u663e\u5c31\u662f\u8981\u6c42\u6700\u5c0f\u8def\u5f84\u53ef\u91cd\u590d\u70b9\u8986\u76d6\u3002 \u6240\u4ee5\u5148\u505a\u4e00\u4e2a\u4f20\u9012\u95ed\u5305\uff0c\u7136\u540e\u62c6\u70b9\uff0c\u6c42\u6700\u5c0f\u8def\u5f84\u70b9\u8986\u76d6\u5373\u53ef\u3002","title":"[Bzoj2718/1143] Vani \u548c Cl2 \u6349\u8ff7\u85cf"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E5%8F%8C%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/","text":"\u53cc\u8054\u901a\u5206\u91cf \u00b6 \u8fb9\u53cc\u8054\u901a\u5206\u91cf e-DCC \u00b6 \u5272\u8fb9/\u6865\uff1a\u5982\u679c\u5728\u65e0\u5411\u56fe \\(G=(V,E)\\) \u5f53\u4e2d\u53bb\u6389\u4e00\u6761\u8fb9 \\((u,v)\\) \u540e\uff0c \\(G\\) \u5206\u88c2\u4e3a\u4e24\u4e2a\u4e0d\u8054\u901a\u7684\u5b50\u56fe\uff0c\u5219\u79f0\u8fb9 \\((u,v)\\) \u662f\u65e0\u5411\u56fe \\(G\\) \u7684\u4e00\u4e2a\u6865\u3002 \u8fb9\u53cc\u8054\u901a\u5206\u91cf\uff1a\u4e0d\u542b\u6865\u8fb9\u7684\u6781\u5927\u8054\u901a\u5b50\u56fe\u3002 \u7c7b\u4f3c SCC\uff0c\u5f15\u5165 \\(G\\) \u7684\u4e00\u9897\u641c\u7d22\u6811 \\(T\\) \u548c \\(dfn,low\\) \u3002 \\(low\\) \u7684\u5b9a\u4e49\u4e5f\u662f\u4ece\u67d0\u4e2a\u8282\u70b9\u5411\u4e0a\u6700\u9ad8\uff08\u5728 \\(T\\) \u5f53\u4e2d\uff09\u80fd\u5230\u8fbe\u7684\u8282\u70b9\u7684 \\(dfn\\) \u3002 \u90a3\u4e48\u8981\u627e\u5230\u6865\u8fb9\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u627e\u5230\u641c\u7d22\u6811\u4e0a\u76f8\u90bb\u7684\u4e24\u4e2a\u8282\u70b9 \\((u,v)\\) \uff0c\u4f7f\u5f97 \\(u\\) \u662f \\(v\\) \u7684\u7236\u4eb2\u4e14 \\(dfn_u<low_v\\) \uff0c\u4e5f\u5c31\u662f \\(v\\) \u65e0\u8bba\u5982\u4f55\u90fd\u6ca1\u6709\u529e\u6cd5\u8d70\u5230 \\(u\\) \u6216\u8005 \\(u\\) \u66f4\u4e0a\u9762\u7684\u8282\u70b9\u3002 \u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u6240\u4ee5 \\(v\\) \u548c \\(v\\) \u7684\u5b50\u6811\u90fd\u662f\u6ca1\u6709\u8fb9\u80fd\u5230\u8fbe \\(u\\) \u4ee5\u53ca\u66f4\u4e0a\u9762\u7684\u5b50\u56fe\u7684\u3002 \u90a3\u4e48\u5fc5\u7136\u53ef\u4ee5\u8bc1\u660e\uff0c \\((u,v)\\) \u4e00\u5b9a\u662f\u6865\u8fb9\u3002 \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u540c\u65f6\u5f97\u5230\u4e00\u4e2a\u6027\u8d28\uff0c \u6865\u8fb9\u4e00\u5b9a\u662f\u6811\u8fb9 \u3002 \u800c\u4e14\uff0c \u4efb\u610f\u4e00\u4e2a\u7b80\u5355\u73af\u4e2d\u7684\u8fb9\u90fd\u4e0d\u662f\u6865\u8fb9 \u3002 \u53bb\u6389\u6865\u8fb9\u4e4b\u540e\uff0c\u5269\u4e0b\u7684\u8fde\u901a\u5757\u5c31\u662f\u4e00\u4e2a\u4e2a e-DCC\u3002 \u7f29\u70b9\u4e5f\u6bd4\u8f83\u5bb9\u6613\uff0c\u76f4\u63a5\u628a\u6240\u6709\u53bb\u6389\u6865\u8fb9\u4e4b\u540e\u7684\u8fde\u901a\u5757\u5206\u522b\u5408\u5e76\u6210\u4e00\u4e2a\u8282\u70b9\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int si = 2e5 + 10 ; int n , m , q ; // \u539f\u56fe int head [ si ], tot1 = 0 ; struct Edge { int ver , Next ; } e [ si << 2 ]; inline void add1 ( int u , int v ) { e [ tot1 ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot1 ++ ; } // \u7f29\u5b8c\u70b9\u4e4b\u540e\u7684\u56fe // \u5982\u679c\u539f\u6765\u7684\u56fe\u662f\u8fde\u901a\u56fe\u7684\u8bdd // \u53ef\u4ee5\u8bc1\u660e\u7f29\u5b8c\u70b9\u4e4b\u540e\u5fc5\u7136\u662f\u4e00\u68f5\u6811\u3002 int Head [ si ], tot2 = 0 ; struct Tree { int ver , Next ; } t [ si << 2 ]; inline void add2 ( int u , int v ) { t [ tot2 ] = ( Tree ){ v , Head [ u ]}, Head [ u ] = tot2 ++ ; } // E-dcc \u7684\u4e2a\u6570. int cnt = 0 ; int dfn [ si ], low [ si ], tim = 0 ; // \u662f\u5426\u662f\u6865 bool bridge [ si << 2 ]; int c [ si ]; // in_edge \u662f\u7528\u6765\u6d88\u9664\u91cd\u8fb9\u7684\u5f71\u54cd\u7684\u3002 // \u8868\u793a\u5f53\u524d\u72b6\u6001\u662f\u4ece\u54ea\u4e00\u6761\u8fb9\u8fc7\u6765\u7684\u3002 void tarjan ( int u , int in_edge ) { dfn [ u ] = low [ u ] = ++ tim ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( ! dfn [ v ]) { tarjan ( v , i ); low [ u ] = min ( low [ u ], low [ v ]); if ( dfn [ u ] < low [ v ]) bridge [ i ] = bridge [ i ^ 1 ] = true ; } else if (( i ^ 1 ) != in_edge ) low [ u ] = min ( low [ u ], dfn [ v ]); } } // \u53bb\u6389\u6865\u8fb9\u7684\u8fde\u901a\u5757\u67d3\u8272 void dfs ( int u , int col ) { c [ u ] = col ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( c [ v ] || bridge [ i ]) continue ; dfs ( v , col ); } } void Construct () { for ( int i = 1 ; i <= n ; ++ i ){ for ( int j = head [ i ]; ~ j ; j = e [ j ]. Next ) { int v = e [ j ]. ver ; if ( c [ i ] == c [ v ]) continue ; // \u53ea\u9700\u8981\u52a0\u4e00\u6b21\uff0c\u904d\u5386\u5230\u53cd\u5411\u8fb9\u7684\u65f6\u5019\u4f1a\u81ea\u52a8\u8865\u5168\u6210\u65e0\u5411\u8fb9 add2 ( c [ i ], c [ v ]); } } } int main () { memset ( head , -1 , sizeof head ); memset ( Head , -1 , sizeof Head ); memset ( bridge , false , sizeof bridge ); cin >> n >> m ; for ( int i = 1 ; i <= m ; ++ i ) { int u , v ; cin >> u >> v ; add1 ( u , v ), add1 ( v , u ); } for ( int i = 1 ; i <= n ; ++ i ) if ( ! dfn [ i ]) tarjan ( i , -1 ); for ( int i = 1 ; i <= n ; ++ i ) if ( ! c [ i ]) ++ cnt , dfs ( i , cnt ); Construct (); } \\(in\\_edge\\) \u8868\u793a\u9012\u5f52\u5230\u5f53\u524d\u8282\u70b9\u6240\u7ecf\u8fc7\u7684\u90a3\u4e00\u6761\u8fb9\u7684\u7f16\u53f7\u3002 \\(in\\_edge\\) \u5b58\u5728\u7684\u539f\u56e0\u662f\uff0c\u5982\u679c\u6309\u7167\u6b63\u5e38\u641c\u7d22\u6811\u7684\u66f4\u65b0\u65b9\u5f0f\uff0c \\(fa_u\\) \u7684 \\(dfn\\) \u5fc5\u7136\u4e0d\u4f1a\u7528\u6765\u66f4\u65b0 \\(u\\) \u7684 \\(low\\) \u3002 \u4f46\u662f\u5982\u679c\u51fa\u73b0\u91cd\u8fb9\u7684\u8bdd\uff0c\u90a3 \\((fa_u,u)\\) \u5fc5\u7136\u4e0d\u662f\u6865\u8fb9\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u7528 \\(fa_u\\) \u7684 \\(dfn\\) \u66f4\u65b0 \\(low_u\\) \u3002 \u53ef\u4ee5\u8bc1\u660e\u7684\u4e00\u4e2a\u63a8\u8bba\uff1a \u5bf9\u4e8e\u4e00\u4e2a\u65e0\u5411\u8fde\u901a\u56fe\uff0cEdcc \u7f29\u5b8c\u70b9\u4e4b\u540e\u5fc5\u7136\u4f1a\u5f62\u6210\u4e00\u68f5\u6811 \u3002 \u56e0\u4e3a\u53ea\u8981\u56fe\u4e0a\u5e26\u73af\uff0c\u5c31\u53ef\u4ee5\u7ee7\u7eed\u7f29\u70b9\uff0c\u800c\u6811\u662f\u65e0\u5411\u8fde\u901a\u65e0\u73af\u56fe\uff0c\u6240\u4ee5\u5f97\u8bc1\u3002 \u70b9\u53cc\u8054\u901a\u5206\u91cf v-DCC \u00b6 \u5272\u70b9\uff1a\u5982\u679c\u5bf9\u4e8e\u65e0\u5411\u56fe \\(G=(V,E)\\) \uff0c \\(\\exist x \\in V\\) \uff0c\u4f7f\u5f97\u5220\u9664 \\(x\\) \u4e4b\u540e\uff0c \\(G\\) \u5206\u88c2\u6210\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u7684\u4e0d\u8054\u901a\u7684\u5b50\u56fe\uff0c\u5219\u79f0\u8282\u70b9 \\(x\\) \u662f\u65e0\u5411\u56fe \\(G\\) \u7684\u4e00\u4e2a\u5272\u70b9\u3002 \u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff1a\u4e0d\u542b\u5272\u70b9\u7684\u6781\u5927\u8054\u901a\u5b50\u56fe\uff0c\u4f46\u662f\u6ce8\u610f\uff0c\u8fd9\u91cc \u4e0d\u80fd\u76f4\u63a5\u6c42\u51fa\u5272\u70b9\u4e4b\u540e\u53bb\u6389\u5272\u70b9\u628a\u8fde\u901a\u5757\u5408\u5e76 \u3002 \u56e0\u4e3a\u5272\u70b9\u672c\u8eab\u5c31\u5c5e\u4e8e\u5b83\u8fde\u63a5\u7684\u70b9\u53cc\u8054\u901a\u5206\u91cf\uff08\u540c\u65f6\u5c5e\u4e8e\uff09\u3002 \u6240\u4ee5\u8981\u7279\u522b\u6ce8\u610f\u3002 \u4ecd\u7136\u5f15\u5165 \\(T\\) \uff0c \\(dfn\\) \u548c \\(low\\) \u3002 \u8003\u8651\u4e00\u4e2a\u8282\u70b9 \\(u\\) \u600e\u4e48\u624d\u53ef\u80fd\u6210\u4e3a\u5272\u70b9\u3002 \u5982\u679c\u5b58\u5728\u4e00\u6761\u6811\u8fb9 \\((u,v)\\) \u4e14 \\(u\\) \u662f \\(v\\) \u7684\u7236\u4eb2\u8282\u70b9\uff0c\u4e14\u6ee1\u8db3 \\(dfn_u \\le low_v\\) \uff0c \\(u\\) \u4e0d\u662f\u6839\u8282\u70b9\u3002 \u5982\u679c \\(u\\) \u662f\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u9700\u8981\u6ee1\u8db3\u4e24\u6b21\u4ee5\u4e0a \\(dfn_u \\le low_v\\) \u3002 \u4e5f\u5c31\u662f \\(v\\) \u548c \\(v\\) \u7684\u5b50\u6811\u91cc\u7684\u8282\u70b9\u6700\u9ad8\u53ea\u80fd\u5230 \\(u\\) \uff0c\u5230\u4e0d\u4e86 \\(u\\) \u66f4\u4e0a\u5c42\u7684\u8282\u70b9\uff0c\u90a3\u4e48 \\(u\\) \u5fc5\u7136\u4f1a\u628a \\(v\\) \u548c \\(v\\) \u7684\u5b50\u6811\u4ee5\u53ca \\(u\\) \u4e0a\u9762\u7684\u5b50\u56fe\u5206\u5f00\u3002 \u6240\u4ee5\u6b64\u65f6 \\(u\\) \u5c31\u662f\u4e00\u4e2a\u5272\u70b9\u3002 \u9012\u5f52\u7684\u540c\u65f6\u7ef4\u62a4\u4e00\u4e2a\u6808\uff0c\u539f\u7406\u7c7b\u4f3c SCC\u3002 \u7136\u540e\u6bcf\u6b21\u6ee1\u8db3 \\(dfn_u \\le low_v\\) \u7684\u65f6\u5019\u5c31\u5f39\u51fa\uff0c\u76f4\u5230 \\(v\\) \u51fa\u6808\uff0c\u88ab\u5f39\u51fa\u7684\u8282\u70b9\u5c31\u7ec4\u6210\u4e00\u4e2a v-DCC\u3002 \uff08\u8fd9\u91cc\u4e0d\u9700\u8981\u5224\u6839\uff0c\u53ef\u4ee5\u81ea\u5df1\u753b\u56fe\uff09 \u4e0d\u8981\u628a \\(u\\) \u5f39\u51fa\u53bb\u4e86\uff0c\u5982\u679c \\(u\\) \u662f\u5272\u70b9\uff0c\u90a3\u4e48\u4e4b\u540e\u8bbf\u95ee\u5230\u7684 v-DCC \u91cc\u9762\u5c31\u4f1a\u5c11 \\(u\\) \u8fd9\u4e2a\u70b9\u3002 \u56e0\u4e3a\u5224\u5b9a\u6761\u4ef6\u91cc\u9762\u6709 \\(=\\) \uff0c\u6240\u4ee5\u5c31\u4e0d\u9700\u8981\u518d\u5224 \\(in\\_edge\\) \u4e86\uff0c\u4e0d\u8fc7\u5728\u6ca1\u6709\u7279\u6b8a\u8bf4\u660e\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u5b9a\u8981\u8bb0\u4f4f\u628a\u91cd\u8fb9\u76f4\u63a5\u5728\u8bfb\u5165\u7684\u65f6\u5019\u5224\u6389\u3002 \u7f29\u70b9\u7684\u8bdd\u552f\u4e00\u8981\u6ce8\u610f\u7684\u5c31\u662f\u8981\u628a\u5272\u70b9\u5355\u72ec\u5206\u88c2\u51fa\u6765\uff0c\u4f46\u662f\u5272\u70b9\u53c8\u8981\u5b58\u5728\u4e8e\u5b83\u8fde\u63a5\u7684\u6240\u6709v-DCC \u5f53\u4e2d\u3002 \u6240\u4ee5\u8981\u7ed9\u5272\u70b9\u4e00\u4e2a\u65b0\u7f16\u53f7\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 #include <stack> #include <vector> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int si = 1e5 + 10 ; int n , m , root ; // \u539f\u56fe int head [ si ], tot1 = 0 ; // \u65b0\u56fe int Head [ si ], tot2 = 0 ; struct Edge { int ver , Next ; } e [ si << 2 ], g [ si << 2 ]; inline void add1 ( int u , int v ) { e [ tot1 ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot1 ++ ; } inline void add2 ( int u , int v ) { g [ tot2 ] = ( Edge ){ v , Head [ u ]}, Head [ u ] = tot2 ++ ; } // Vdcc \u7684\u4e2a\u6570 int cnt = 0 ; int dfn [ si ], low [ si ]; int c [ si ], tim ; // \u5272\u70b9\u7684\u65b0\u7f16\u53f7 int new_id [ si ]; // \u662f\u5426\u662f\u5272\u70b9 bool cut [ si ]; stack < int > s ; vector < int > vdcc [ si ]; void tarjan ( int u ) { dfn [ u ] = low [ u ] = ++ tim ; s . push ( u ); // \u5b64\u7acb\u70b9 if ( u == root && head [ u ] == -1 ) { vdcc [ ++ cnt ]. emplace_back ( u ); return ; } int flag = 0 ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( ! dfn [ v ]) { tarjan ( v ), low [ u ] = min ( low [ u ], low [ v ]); if ( dfn [ u ] <= low [ v ]) { ++ flag ; // \u6839\u8282\u70b9\u7279\u5224 if ( u != root || flag > 1 ) { cut [ u ] = true ; } int x ; ++ cnt ; do { x = s . top (), s . pop (); vdcc [ cnt ]. emplace_back ( x ); } while ( v != x ); // \u6ce8\u610f\u8fd9\u91cc\u8981\u662f v \u4e0d\u662f u // \u5982\u679c u \u88ab\u5f39\u51fa\u4e86\uff0c\u4e4b\u540e\u7684\u8fde\u901a\u5757\u5c31\u4f1a\u5c11 u\u3002 vdcc [ cnt ]. emplace_back ( u ); } } else low [ u ] = min ( low [ u ], dfn [ v ]); } } int num ; void Construct () { num = cnt ; for ( int u = 1 ; u <= n ; ++ u ) { if ( cut [ u ]) new_id [ u ] = ++ num ; } for ( int i = 1 ; i <= cnt ; ++ i ) { for ( int j : vdcc [ i ]) { if ( cut [ j ]) add2 ( i , new_id [ j ]), add2 ( new_id [ j ], i ); else c [ j ] = i ; } // \u5982\u679c\u662f\u5272\u70b9\uff0c\u5c31\u548c\u8fd9\u4e2a\u5272\u70b9\u6240\u5728\u7684 v-Dcc \u8fde\u8fb9 // \u53cd\u4e4b\u67d3\u8272\u3002 } // \u7f16\u53f7 1~cnt \u7684\u662f v-Dcc, \u7f16\u53f7 > cnt \u7684\u662f\u539f\u56fe\u5272\u70b9 } int main () { memset ( head , -1 , sizeof head ); memset ( Head , -1 , sizeof Head ); cin >> n >> m ; for ( int i = 1 ; i <= m ; ++ i ) { int u , v ; cin >> u >> v ; // \u5224\u91cd\u8fb9 if ( u == v ) continue ; add1 ( u , v ), add1 ( v , u ); } for ( int i = 1 ; i <= n ; ++ i ) { if ( ! dfn [ i ]) root = i , tarjan ( i ); } Construct (); return 0 ; } \u5176\u5b9e\uff0c\u5982\u679c\u539f\u56fe\u662f \u65e0\u5411\u8fde\u901a\u56fe\u7684\u8bdd \uff0c vdcc \u7f29\u5b8c\u70b9\u4e4b\u540e\u5f97\u5230\u7684\u4e5f\u5fc5\u7136\u662f\u4e00\u68f5\u6811 \u3002 \u5e76\u4e14\uff0c\u5982\u679c\u628a\u5272\u70b9\u770b\u4f5c\u767d\u70b9\uff0c vdcc \u770b\u4f5c\u9ed1\u70b9\uff0c\u90a3\u4e48\u8fd9\u9897\u6811\u5fc5\u7136\u662f \u9ed1\u767d\u76f8\u95f4 \u7684\u3002 \u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002 \u8bc1\u660e\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u8bc1\u660e\u662f\u6811\u7684\u8bdd\u7c7b\u4f3c edcc\u3002 \u7136\u540e\u95ee\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\uff0c\u6811\u4e2d\u7684\u6240\u6709\u8fb9\u90fd\u662f\u4e00\u8fb9\u662f\u5272\u70b9\uff0c\u4e00\u8fb9\u662f\u4e00\u4e2a vdcc\u3002 \u8bc1\u660e\u5176\u5b83\u60c5\u51b5\u4e0d\u5b58\u5728\u5373\u53ef\u3002 \uff08\u5176\u5b9e\u770b Construct \u91cc\u7684\u52a0\u8fb9\u4e5f\u80fd\u770b\u51fa\u6765\uff09","title":"\u53cc\u8fde\u901a\u5206\u91cf"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E5%8F%8C%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/#_1","text":"","title":"\u53cc\u8054\u901a\u5206\u91cf"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E5%8F%8C%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/#e-dcc","text":"\u5272\u8fb9/\u6865\uff1a\u5982\u679c\u5728\u65e0\u5411\u56fe \\(G=(V,E)\\) \u5f53\u4e2d\u53bb\u6389\u4e00\u6761\u8fb9 \\((u,v)\\) \u540e\uff0c \\(G\\) \u5206\u88c2\u4e3a\u4e24\u4e2a\u4e0d\u8054\u901a\u7684\u5b50\u56fe\uff0c\u5219\u79f0\u8fb9 \\((u,v)\\) \u662f\u65e0\u5411\u56fe \\(G\\) \u7684\u4e00\u4e2a\u6865\u3002 \u8fb9\u53cc\u8054\u901a\u5206\u91cf\uff1a\u4e0d\u542b\u6865\u8fb9\u7684\u6781\u5927\u8054\u901a\u5b50\u56fe\u3002 \u7c7b\u4f3c SCC\uff0c\u5f15\u5165 \\(G\\) \u7684\u4e00\u9897\u641c\u7d22\u6811 \\(T\\) \u548c \\(dfn,low\\) \u3002 \\(low\\) \u7684\u5b9a\u4e49\u4e5f\u662f\u4ece\u67d0\u4e2a\u8282\u70b9\u5411\u4e0a\u6700\u9ad8\uff08\u5728 \\(T\\) \u5f53\u4e2d\uff09\u80fd\u5230\u8fbe\u7684\u8282\u70b9\u7684 \\(dfn\\) \u3002 \u90a3\u4e48\u8981\u627e\u5230\u6865\u8fb9\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u627e\u5230\u641c\u7d22\u6811\u4e0a\u76f8\u90bb\u7684\u4e24\u4e2a\u8282\u70b9 \\((u,v)\\) \uff0c\u4f7f\u5f97 \\(u\\) \u662f \\(v\\) \u7684\u7236\u4eb2\u4e14 \\(dfn_u<low_v\\) \uff0c\u4e5f\u5c31\u662f \\(v\\) \u65e0\u8bba\u5982\u4f55\u90fd\u6ca1\u6709\u529e\u6cd5\u8d70\u5230 \\(u\\) \u6216\u8005 \\(u\\) \u66f4\u4e0a\u9762\u7684\u8282\u70b9\u3002 \u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u6240\u4ee5 \\(v\\) \u548c \\(v\\) \u7684\u5b50\u6811\u90fd\u662f\u6ca1\u6709\u8fb9\u80fd\u5230\u8fbe \\(u\\) \u4ee5\u53ca\u66f4\u4e0a\u9762\u7684\u5b50\u56fe\u7684\u3002 \u90a3\u4e48\u5fc5\u7136\u53ef\u4ee5\u8bc1\u660e\uff0c \\((u,v)\\) \u4e00\u5b9a\u662f\u6865\u8fb9\u3002 \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u540c\u65f6\u5f97\u5230\u4e00\u4e2a\u6027\u8d28\uff0c \u6865\u8fb9\u4e00\u5b9a\u662f\u6811\u8fb9 \u3002 \u800c\u4e14\uff0c \u4efb\u610f\u4e00\u4e2a\u7b80\u5355\u73af\u4e2d\u7684\u8fb9\u90fd\u4e0d\u662f\u6865\u8fb9 \u3002 \u53bb\u6389\u6865\u8fb9\u4e4b\u540e\uff0c\u5269\u4e0b\u7684\u8fde\u901a\u5757\u5c31\u662f\u4e00\u4e2a\u4e2a e-DCC\u3002 \u7f29\u70b9\u4e5f\u6bd4\u8f83\u5bb9\u6613\uff0c\u76f4\u63a5\u628a\u6240\u6709\u53bb\u6389\u6865\u8fb9\u4e4b\u540e\u7684\u8fde\u901a\u5757\u5206\u522b\u5408\u5e76\u6210\u4e00\u4e2a\u8282\u70b9\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int si = 2e5 + 10 ; int n , m , q ; // \u539f\u56fe int head [ si ], tot1 = 0 ; struct Edge { int ver , Next ; } e [ si << 2 ]; inline void add1 ( int u , int v ) { e [ tot1 ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot1 ++ ; } // \u7f29\u5b8c\u70b9\u4e4b\u540e\u7684\u56fe // \u5982\u679c\u539f\u6765\u7684\u56fe\u662f\u8fde\u901a\u56fe\u7684\u8bdd // \u53ef\u4ee5\u8bc1\u660e\u7f29\u5b8c\u70b9\u4e4b\u540e\u5fc5\u7136\u662f\u4e00\u68f5\u6811\u3002 int Head [ si ], tot2 = 0 ; struct Tree { int ver , Next ; } t [ si << 2 ]; inline void add2 ( int u , int v ) { t [ tot2 ] = ( Tree ){ v , Head [ u ]}, Head [ u ] = tot2 ++ ; } // E-dcc \u7684\u4e2a\u6570. int cnt = 0 ; int dfn [ si ], low [ si ], tim = 0 ; // \u662f\u5426\u662f\u6865 bool bridge [ si << 2 ]; int c [ si ]; // in_edge \u662f\u7528\u6765\u6d88\u9664\u91cd\u8fb9\u7684\u5f71\u54cd\u7684\u3002 // \u8868\u793a\u5f53\u524d\u72b6\u6001\u662f\u4ece\u54ea\u4e00\u6761\u8fb9\u8fc7\u6765\u7684\u3002 void tarjan ( int u , int in_edge ) { dfn [ u ] = low [ u ] = ++ tim ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( ! dfn [ v ]) { tarjan ( v , i ); low [ u ] = min ( low [ u ], low [ v ]); if ( dfn [ u ] < low [ v ]) bridge [ i ] = bridge [ i ^ 1 ] = true ; } else if (( i ^ 1 ) != in_edge ) low [ u ] = min ( low [ u ], dfn [ v ]); } } // \u53bb\u6389\u6865\u8fb9\u7684\u8fde\u901a\u5757\u67d3\u8272 void dfs ( int u , int col ) { c [ u ] = col ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( c [ v ] || bridge [ i ]) continue ; dfs ( v , col ); } } void Construct () { for ( int i = 1 ; i <= n ; ++ i ){ for ( int j = head [ i ]; ~ j ; j = e [ j ]. Next ) { int v = e [ j ]. ver ; if ( c [ i ] == c [ v ]) continue ; // \u53ea\u9700\u8981\u52a0\u4e00\u6b21\uff0c\u904d\u5386\u5230\u53cd\u5411\u8fb9\u7684\u65f6\u5019\u4f1a\u81ea\u52a8\u8865\u5168\u6210\u65e0\u5411\u8fb9 add2 ( c [ i ], c [ v ]); } } } int main () { memset ( head , -1 , sizeof head ); memset ( Head , -1 , sizeof Head ); memset ( bridge , false , sizeof bridge ); cin >> n >> m ; for ( int i = 1 ; i <= m ; ++ i ) { int u , v ; cin >> u >> v ; add1 ( u , v ), add1 ( v , u ); } for ( int i = 1 ; i <= n ; ++ i ) if ( ! dfn [ i ]) tarjan ( i , -1 ); for ( int i = 1 ; i <= n ; ++ i ) if ( ! c [ i ]) ++ cnt , dfs ( i , cnt ); Construct (); } \\(in\\_edge\\) \u8868\u793a\u9012\u5f52\u5230\u5f53\u524d\u8282\u70b9\u6240\u7ecf\u8fc7\u7684\u90a3\u4e00\u6761\u8fb9\u7684\u7f16\u53f7\u3002 \\(in\\_edge\\) \u5b58\u5728\u7684\u539f\u56e0\u662f\uff0c\u5982\u679c\u6309\u7167\u6b63\u5e38\u641c\u7d22\u6811\u7684\u66f4\u65b0\u65b9\u5f0f\uff0c \\(fa_u\\) \u7684 \\(dfn\\) \u5fc5\u7136\u4e0d\u4f1a\u7528\u6765\u66f4\u65b0 \\(u\\) \u7684 \\(low\\) \u3002 \u4f46\u662f\u5982\u679c\u51fa\u73b0\u91cd\u8fb9\u7684\u8bdd\uff0c\u90a3 \\((fa_u,u)\\) \u5fc5\u7136\u4e0d\u662f\u6865\u8fb9\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u7528 \\(fa_u\\) \u7684 \\(dfn\\) \u66f4\u65b0 \\(low_u\\) \u3002 \u53ef\u4ee5\u8bc1\u660e\u7684\u4e00\u4e2a\u63a8\u8bba\uff1a \u5bf9\u4e8e\u4e00\u4e2a\u65e0\u5411\u8fde\u901a\u56fe\uff0cEdcc \u7f29\u5b8c\u70b9\u4e4b\u540e\u5fc5\u7136\u4f1a\u5f62\u6210\u4e00\u68f5\u6811 \u3002 \u56e0\u4e3a\u53ea\u8981\u56fe\u4e0a\u5e26\u73af\uff0c\u5c31\u53ef\u4ee5\u7ee7\u7eed\u7f29\u70b9\uff0c\u800c\u6811\u662f\u65e0\u5411\u8fde\u901a\u65e0\u73af\u56fe\uff0c\u6240\u4ee5\u5f97\u8bc1\u3002","title":"\u8fb9\u53cc\u8054\u901a\u5206\u91cf e-DCC"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E5%8F%8C%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/#v-dcc","text":"\u5272\u70b9\uff1a\u5982\u679c\u5bf9\u4e8e\u65e0\u5411\u56fe \\(G=(V,E)\\) \uff0c \\(\\exist x \\in V\\) \uff0c\u4f7f\u5f97\u5220\u9664 \\(x\\) \u4e4b\u540e\uff0c \\(G\\) \u5206\u88c2\u6210\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u7684\u4e0d\u8054\u901a\u7684\u5b50\u56fe\uff0c\u5219\u79f0\u8282\u70b9 \\(x\\) \u662f\u65e0\u5411\u56fe \\(G\\) \u7684\u4e00\u4e2a\u5272\u70b9\u3002 \u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff1a\u4e0d\u542b\u5272\u70b9\u7684\u6781\u5927\u8054\u901a\u5b50\u56fe\uff0c\u4f46\u662f\u6ce8\u610f\uff0c\u8fd9\u91cc \u4e0d\u80fd\u76f4\u63a5\u6c42\u51fa\u5272\u70b9\u4e4b\u540e\u53bb\u6389\u5272\u70b9\u628a\u8fde\u901a\u5757\u5408\u5e76 \u3002 \u56e0\u4e3a\u5272\u70b9\u672c\u8eab\u5c31\u5c5e\u4e8e\u5b83\u8fde\u63a5\u7684\u70b9\u53cc\u8054\u901a\u5206\u91cf\uff08\u540c\u65f6\u5c5e\u4e8e\uff09\u3002 \u6240\u4ee5\u8981\u7279\u522b\u6ce8\u610f\u3002 \u4ecd\u7136\u5f15\u5165 \\(T\\) \uff0c \\(dfn\\) \u548c \\(low\\) \u3002 \u8003\u8651\u4e00\u4e2a\u8282\u70b9 \\(u\\) \u600e\u4e48\u624d\u53ef\u80fd\u6210\u4e3a\u5272\u70b9\u3002 \u5982\u679c\u5b58\u5728\u4e00\u6761\u6811\u8fb9 \\((u,v)\\) \u4e14 \\(u\\) \u662f \\(v\\) \u7684\u7236\u4eb2\u8282\u70b9\uff0c\u4e14\u6ee1\u8db3 \\(dfn_u \\le low_v\\) \uff0c \\(u\\) \u4e0d\u662f\u6839\u8282\u70b9\u3002 \u5982\u679c \\(u\\) \u662f\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u9700\u8981\u6ee1\u8db3\u4e24\u6b21\u4ee5\u4e0a \\(dfn_u \\le low_v\\) \u3002 \u4e5f\u5c31\u662f \\(v\\) \u548c \\(v\\) \u7684\u5b50\u6811\u91cc\u7684\u8282\u70b9\u6700\u9ad8\u53ea\u80fd\u5230 \\(u\\) \uff0c\u5230\u4e0d\u4e86 \\(u\\) \u66f4\u4e0a\u5c42\u7684\u8282\u70b9\uff0c\u90a3\u4e48 \\(u\\) \u5fc5\u7136\u4f1a\u628a \\(v\\) \u548c \\(v\\) \u7684\u5b50\u6811\u4ee5\u53ca \\(u\\) \u4e0a\u9762\u7684\u5b50\u56fe\u5206\u5f00\u3002 \u6240\u4ee5\u6b64\u65f6 \\(u\\) \u5c31\u662f\u4e00\u4e2a\u5272\u70b9\u3002 \u9012\u5f52\u7684\u540c\u65f6\u7ef4\u62a4\u4e00\u4e2a\u6808\uff0c\u539f\u7406\u7c7b\u4f3c SCC\u3002 \u7136\u540e\u6bcf\u6b21\u6ee1\u8db3 \\(dfn_u \\le low_v\\) \u7684\u65f6\u5019\u5c31\u5f39\u51fa\uff0c\u76f4\u5230 \\(v\\) \u51fa\u6808\uff0c\u88ab\u5f39\u51fa\u7684\u8282\u70b9\u5c31\u7ec4\u6210\u4e00\u4e2a v-DCC\u3002 \uff08\u8fd9\u91cc\u4e0d\u9700\u8981\u5224\u6839\uff0c\u53ef\u4ee5\u81ea\u5df1\u753b\u56fe\uff09 \u4e0d\u8981\u628a \\(u\\) \u5f39\u51fa\u53bb\u4e86\uff0c\u5982\u679c \\(u\\) \u662f\u5272\u70b9\uff0c\u90a3\u4e48\u4e4b\u540e\u8bbf\u95ee\u5230\u7684 v-DCC \u91cc\u9762\u5c31\u4f1a\u5c11 \\(u\\) \u8fd9\u4e2a\u70b9\u3002 \u56e0\u4e3a\u5224\u5b9a\u6761\u4ef6\u91cc\u9762\u6709 \\(=\\) \uff0c\u6240\u4ee5\u5c31\u4e0d\u9700\u8981\u518d\u5224 \\(in\\_edge\\) \u4e86\uff0c\u4e0d\u8fc7\u5728\u6ca1\u6709\u7279\u6b8a\u8bf4\u660e\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u5b9a\u8981\u8bb0\u4f4f\u628a\u91cd\u8fb9\u76f4\u63a5\u5728\u8bfb\u5165\u7684\u65f6\u5019\u5224\u6389\u3002 \u7f29\u70b9\u7684\u8bdd\u552f\u4e00\u8981\u6ce8\u610f\u7684\u5c31\u662f\u8981\u628a\u5272\u70b9\u5355\u72ec\u5206\u88c2\u51fa\u6765\uff0c\u4f46\u662f\u5272\u70b9\u53c8\u8981\u5b58\u5728\u4e8e\u5b83\u8fde\u63a5\u7684\u6240\u6709v-DCC \u5f53\u4e2d\u3002 \u6240\u4ee5\u8981\u7ed9\u5272\u70b9\u4e00\u4e2a\u65b0\u7f16\u53f7\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 #include <stack> #include <vector> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int si = 1e5 + 10 ; int n , m , root ; // \u539f\u56fe int head [ si ], tot1 = 0 ; // \u65b0\u56fe int Head [ si ], tot2 = 0 ; struct Edge { int ver , Next ; } e [ si << 2 ], g [ si << 2 ]; inline void add1 ( int u , int v ) { e [ tot1 ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot1 ++ ; } inline void add2 ( int u , int v ) { g [ tot2 ] = ( Edge ){ v , Head [ u ]}, Head [ u ] = tot2 ++ ; } // Vdcc \u7684\u4e2a\u6570 int cnt = 0 ; int dfn [ si ], low [ si ]; int c [ si ], tim ; // \u5272\u70b9\u7684\u65b0\u7f16\u53f7 int new_id [ si ]; // \u662f\u5426\u662f\u5272\u70b9 bool cut [ si ]; stack < int > s ; vector < int > vdcc [ si ]; void tarjan ( int u ) { dfn [ u ] = low [ u ] = ++ tim ; s . push ( u ); // \u5b64\u7acb\u70b9 if ( u == root && head [ u ] == -1 ) { vdcc [ ++ cnt ]. emplace_back ( u ); return ; } int flag = 0 ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( ! dfn [ v ]) { tarjan ( v ), low [ u ] = min ( low [ u ], low [ v ]); if ( dfn [ u ] <= low [ v ]) { ++ flag ; // \u6839\u8282\u70b9\u7279\u5224 if ( u != root || flag > 1 ) { cut [ u ] = true ; } int x ; ++ cnt ; do { x = s . top (), s . pop (); vdcc [ cnt ]. emplace_back ( x ); } while ( v != x ); // \u6ce8\u610f\u8fd9\u91cc\u8981\u662f v \u4e0d\u662f u // \u5982\u679c u \u88ab\u5f39\u51fa\u4e86\uff0c\u4e4b\u540e\u7684\u8fde\u901a\u5757\u5c31\u4f1a\u5c11 u\u3002 vdcc [ cnt ]. emplace_back ( u ); } } else low [ u ] = min ( low [ u ], dfn [ v ]); } } int num ; void Construct () { num = cnt ; for ( int u = 1 ; u <= n ; ++ u ) { if ( cut [ u ]) new_id [ u ] = ++ num ; } for ( int i = 1 ; i <= cnt ; ++ i ) { for ( int j : vdcc [ i ]) { if ( cut [ j ]) add2 ( i , new_id [ j ]), add2 ( new_id [ j ], i ); else c [ j ] = i ; } // \u5982\u679c\u662f\u5272\u70b9\uff0c\u5c31\u548c\u8fd9\u4e2a\u5272\u70b9\u6240\u5728\u7684 v-Dcc \u8fde\u8fb9 // \u53cd\u4e4b\u67d3\u8272\u3002 } // \u7f16\u53f7 1~cnt \u7684\u662f v-Dcc, \u7f16\u53f7 > cnt \u7684\u662f\u539f\u56fe\u5272\u70b9 } int main () { memset ( head , -1 , sizeof head ); memset ( Head , -1 , sizeof Head ); cin >> n >> m ; for ( int i = 1 ; i <= m ; ++ i ) { int u , v ; cin >> u >> v ; // \u5224\u91cd\u8fb9 if ( u == v ) continue ; add1 ( u , v ), add1 ( v , u ); } for ( int i = 1 ; i <= n ; ++ i ) { if ( ! dfn [ i ]) root = i , tarjan ( i ); } Construct (); return 0 ; } \u5176\u5b9e\uff0c\u5982\u679c\u539f\u56fe\u662f \u65e0\u5411\u8fde\u901a\u56fe\u7684\u8bdd \uff0c vdcc \u7f29\u5b8c\u70b9\u4e4b\u540e\u5f97\u5230\u7684\u4e5f\u5fc5\u7136\u662f\u4e00\u68f5\u6811 \u3002 \u5e76\u4e14\uff0c\u5982\u679c\u628a\u5272\u70b9\u770b\u4f5c\u767d\u70b9\uff0c vdcc \u770b\u4f5c\u9ed1\u70b9\uff0c\u90a3\u4e48\u8fd9\u9897\u6811\u5fc5\u7136\u662f \u9ed1\u767d\u76f8\u95f4 \u7684\u3002 \u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002 \u8bc1\u660e\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u8bc1\u660e\u662f\u6811\u7684\u8bdd\u7c7b\u4f3c edcc\u3002 \u7136\u540e\u95ee\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\uff0c\u6811\u4e2d\u7684\u6240\u6709\u8fb9\u90fd\u662f\u4e00\u8fb9\u662f\u5272\u70b9\uff0c\u4e00\u8fb9\u662f\u4e00\u4e2a vdcc\u3002 \u8bc1\u660e\u5176\u5b83\u60c5\u51b5\u4e0d\u5b58\u5728\u5373\u53ef\u3002 \uff08\u5176\u5b9e\u770b Construct \u91cc\u7684\u52a0\u8fb9\u4e5f\u80fd\u770b\u51fa\u6765\uff09","title":"\u70b9\u53cc\u8054\u901a\u5206\u91cf v-DCC"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/","text":"\u5f3a\u8fde\u901a\u5206\u91cf \u00b6 Definition \u00b6 \u8054\u901a\u5206\u91cf\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u6709\u5411\u56fe\u7684\u5206\u91cf\u5f53\u4e2d\u7684\u4efb\u610f\u4e24\u70b9 \\((u,v)\\) \uff0c \\(\\exist \\delta (u,v) \\and \\delta (v,u)\\) \uff0c\u5219\u79f0\u8fd9\u4e2a\u5206\u91cf\u4e3a\u8054\u901a\u5206\u91cf \u5f3a\u8054\u901a\u5206\u91cf SCC\uff1a\u6709\u5411\u56fe\u7684\u4e00\u4e2a\u6781\u5927\u8fde\u901a\u5206\u91cf\u88ab\u79f0\u4f5c\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u6781\u5927\u7684\u7406\u89e3\u5c31\u662f\uff0c\u4e0d\u7ba1\u518d\u52a0\u4e0a\u54ea\u4e00\u4e2a\u8fb9\u548c\u54ea\u4e00\u4e2a\u8282\u70b9\uff0c\u4ed6\u90fd\u4e0d\u518d\u662f\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\uff0c\u4e5f\u5c31\u662f\u201c\u5927\u7684\u4e0d\u80fd\u518d\u5927\u201d\u3002 \u6d41\u56fe\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u6709\u5411\u56fe \\(G=(V,E)\\) \uff0c \\(\\exist r \\in V\\) \uff0c\u6ee1\u8db3 \\(r\\) \u53ef\u4ee5\u5230\u8fbe \\(V\\) \u4e2d\u7684\u4efb\u610f\u8282\u70b9\uff0c\u5219\u79f0 \\(G\\) \u4e3a\u4e00\u4e2a\u6d41\u56fe\u3002 \\(r\\) \u79f0\u4f5c\u6d41\u56fe\u7684\u6e90\u70b9\u3002 \u641c\u7d22\u6811\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u6d41\u56fe \\(G\\) \u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u5f97\u5230\u7684\u4e00\u68f5\u751f\u6210\u6811 \\(T\\) \u3002 \u65f6\u95f4\u6233 \\(dfn\\) \uff1a\u5bf9\u4e8e \\(G\\) \u4e2d\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u5b83\u5728 \\(T\\) \u4e2d\u88ab\u641c\u7d22\u5230\u7684\u987a\u5e8f\uff08\u65f6\u95f4\uff09\u3002 \u4e3a\u4e86\u65b9\u4fbf\u53d9\u8ff0\uff0c\u8fd9\u91cc\u518d\u5b9a\u4e49\u56db\u79cd\u8fb9\uff0c\u6d41\u56fe \\(G\\) \u7684\u6240\u6709\u8fb9\u5fc5\u7136\u662f\u8fd9\u56db\u79cd\u8fb9\u4e4b\u4e00 \u6811\u8fb9\uff1a\u5728\u641c\u7d22\u6811\u91cc\u7684\u8fb9\uff0c\u4ece \\(u \\to v\\) \uff0c\u4e14 \\(u\\) \u662f \\(v\\) \u7684\u7236\u4eb2\u3002 \u524d\u5411\u8fb9\uff1a\u4ece \\(u \\to v\\) \uff0c\u4e14 \\(u\\) \u662f \\(v\\) \u5728 \\(T\\) \u4e0a\u7684\u7956\u5148\u3002 \u540e\u5411\u8fb9\uff1a\u4ece \\(u \\to v\\) \uff0c\u4e14 \\(v\\) \u662f \\(u\\) \u5728 \\(T\\) \u4e0a\u7684\u7956\u5148 \u6a2a\u53c9\u8fb9\uff1a\u9664\u4e86 123 \u7684\u6240\u6709\u8fb9\uff0c\u5fc5\u7136\u6ee1\u8db3 \\(u \\to v,dfn_v<dfn_u\\) \u3002 Tarjan Algorithm \u00b6 \u8003\u8651\u641c\u7d22\u6811\u4e0a\u7684\u8282\u70b9\u5982\u4f55\u624d\u80fd\u6210\u4e3a SCC \u5f53\u4e2d\u7684\u8282\u70b9\u3002 \u9996\u5148\uff0c\u4e00\u4e2a\u5b64\u7acb\u7684\u70b9\uff08\u8fd9\u91cc\u6307\u8d70\u51fa\u53bb\u4e86\u5c31\u6ca1\u6cd5\u56de\u6765\uff09\u5fc5\u7136\u662f\u4e00\u4e2a SCC\u3002 \u5982\u679c\u60f3\u8981\u66f4\u591a\u70b9\u52a0\u5165\u8fd9\u4e2a SCC\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u8981\u627e\u5230\u4e00\u4e2a\u73af\u3002 \u90a3\u4e48\u540e\u5411\u8fb9\u5fc5\u7136\u662f\u6709\u7528\u7684\uff0c\u5047\u8bbe \\(v\\) \u662f \\(u\\) \u7684\u7956\u5148\uff0c\u90a3\u4e48\u5fc5\u7136\u5b58\u5728\u4e00\u4e2a\u8def\u5f84\u4ece \\(v \\to u\\) \u3002 \u800c\u8fd9\u91cc\u53c8\u5b58\u5728\u4e00\u6761\u540e\u5411\u8fb9 \\(u \\to v\\) \uff0c\u90a3\u4e48\u5fc5\u7136\u4f1a\u51fa\u73b0\u4e00\u4e2a\u73af\uff0c\u4e5f\u5c31\u51fa\u73b0\u4e86\u4e00\u4e2a\u8054\u901a\u5206\u91cf\u3002 \u800c\u6a2a\u53c9\u8fb9\u4e5f\u8bb8\u4f1a\u6709\u7528\uff0c\u53ea\u8981\u4ece \\(u\\) \u7ecf\u8fc7\u4e00\u4e2a\u6a2a\u53c9\u8fb9\u8d70\u5230 \\(v\\) \uff0c\u4e14 \\(v\\) \u53ef\u4ee5\u5230\u8fbe \\(u\\) \u7684\u7956\u5148\u8282\u70b9\uff0c\u90a3\u4e48\u4e5f\u4f1a\u51fa\u73b0\u4e00\u4e2a\u73af\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u8054\u901a\u5206\u91cf\u3002 \u90a3\u4e48\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u5728\u6d41\u56fe\u4e0a\u627e\u5230\u5c3d\u53ef\u80fd\u5927\u7684\uff0c\u7531 \\(T\\) \u7ecf\u8fc7\u6dfb\u52a0\u51e0\u6761\u540e\u5411\u8fb9\u548c\u6a2a\u53c9\u8fb9\u6784\u6210\u7684\u73af\u3002 \u6240\u4ee5\u5f15\u5165\u4e00\u4e2a\u65b0\u7684\u503c \\(low_u\\) \uff0c\u8868\u793a \\(u\\) \u548c\u5b83\u5b50\u6811\u5f53\u4e2d\u7684\u8282\u70b9\u80fd\u5f80\u4e0a\uff08\u5728 \\(T\\) \u5f53\u4e2d\u7684\u4e0a\uff09\u8d70\u5230\u7684\u6700\u9ad8\uff08\u5728 \\(T\\) \u5f53\u4e2d\u6df1\u5ea6\u66f4\u4f4e\uff09\u7684\u8282\u70b9\u7684\u65f6\u95f4\u6233 \\(dfn\\) \u3002 \u5982\u679c\u51fa\u73b0 \\(low_u=dfn_u\\) \uff0c\u4e5f\u5c31\u662f \\(u\\) \u4e0d\u53ef\u80fd\u518d\u5f80\u4e0a\u8d70\uff0c\u5b83\u7684 \\(low\\) \u5c31\u662f\u81ea\u5df1\u7684 \\(dfn\\) \u7684\u65f6\u5019\uff0c\u90a3\u4e48 \\(u\\) \u5fc5\u7136\u662f\u5b83\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u5728 \\(T\\) \u4e0a\u6700\u9ad8\u7684\u70b9\u3002 \u7136\u540e\u5728\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u65f6\u5019\u540c\u65f6\u7ef4\u62a4\u4e00\u4e2a\u6808\uff0c\u4fdd\u5b58\u5f53\u524d\u80fd\u4e0e\u4ece\u8fd9\u4e2a\u8282\u70b9\u51fa\u53d1\u7684\u540e\u5411\u8fb9\u548c\u6a2a\u53c9\u8fb9\u6784\u6210\u73af\u7684\u6240\u6709\u8282\u70b9\u3002 \u8bb0 \\(anc_u\\) \u8868\u793a \\(u\\) \u5728 \\(T\\) \u4e0a\u7684\u6240\u6709\u7956\u5148\u8282\u70b9\uff0c\u90a3\u4e48\u6808\u4e2d\u4fdd\u5b58\u7684\u5b9e\u9645\u4e0a\u5c31\u662f\u8fd9\u4e24\u7c7b\u8282\u70b9\uff1a \\(v \\in anc_u\\) \uff0c\u4e14\u6709\u53ef\u80fd\u5b58\u5728\u540e\u5411\u8fb9 \\(u \\to v\\) \u3002 \\(v \\in V\\) \uff0c\u4e14\u5b58\u5728\u8def\u5f84 \\(\\delta(v\\to w),w\\in anc_u\\) \u3002 \u5728\u6ee1\u8db3 \\(low_u=dfn_u\\) \u7684\u65f6\u5019\uff0c\u628a\u6808\u7684\u8282\u70b9\u4e0d\u65ad\u5f39\u51fa\uff0c\u76f4\u5230 \\(u\\) \u51fa\u6808\uff0c\u6b64\u65f6\u5f53\u524d\u88ab\u5f39\u51fa\u7684\u6240\u6709\u8282\u70b9\u5c31\u6784\u6210\u4e00\u4e2a SCC\u3002 \u8fd9\u65f6\u5019\u5f39\u51fa\u7684\u4e00\u5b9a\u662f\u7b2c\u4e8c\u7c7b\u8282\u70b9\uff0c\u539f\u56e0\u663e\u7136\u3002 \u5177\u4f53\u5b9e\u73b0\uff1a \u6bcf\u6b21\u65b0\u8bbf\u95ee\u4e00\u4e2a\u8282\u70b9\u7684\u65f6\u5019\u521d\u59cb\u5316 \\(dfn=++time,low=dfn\\) \u3002 \u7136\u540e\u8bbf\u95ee\u5b83\u7684\u6240\u6709\u51fa\u8fb9 \\((u,v)\\) \uff0c\u5982\u679c\u51fa\u8fb9\u5bf9\u5e94\u7684\u8282\u70b9 \\(v\\) \u6ca1\u6709\u8bbf\u95ee\u8fc7\uff08\u5f53\u524d\u8bbf\u95ee\u7684\u662f\u6811\u8fb9\uff09\uff0c\u90a3\u4e48\u5c31\u9012\u5f52\u7136\u540e\u7528 \\(low_v\\) \u66f4\u65b0 \\(low_u\\) \u3002 \u53cd\u4e4b\uff0c\u5982\u679c \\(v\\) \u5df2\u7ecf\u5728\u6808\u4e2d\u4e86\uff0c\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b58\u5728\u4e00\u6761\u540e\u5411\u8fb9\u6216\u8005\u6a2a\u53c9\u8fb9\u4ece \\(u\\) \u51fa\u53d1\u80fd\u5230\u66f4\u4e0a\u9762\u3002 \u6839\u636e\u6808\u4e2d\u8282\u70b9\u7684\u6027\u8d28\uff0c\u7528 \\(dfn_v\\) \u66f4\u65b0 \\(low_u\\) \u5373\u53ef\u3002 \uff08\u6ce8\u610f\u8fd9\u91cc\u8981\u662f \\(dfn_v\\) \u800c\u4e0d\u662f \\(low_v\\) \uff0cTarjan \u8001\u7237\u5b50\u4eb2\u81ea\u8bf4\u8fc7\uff09\u3002 \u5982\u679c\u628a\u6bcf\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u770b\u4f5c\u4e00\u4e2a\u70b9\u3002 \u90a3\u4e48\u7f29\u5b8c\u70b9\u4e4b\u540e\u7684\u56fe\u5c31\u662f\u4e00\u4e2a DAG\u3002 \u5e76\u4e14 SCC \u7f16\u53f7\u7684\u987a\u5e8f\u5c31\u662f \u9006\u62d3\u6251\u5e8f \u3002 \u7f29\u70b9\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u80fd\u975e\u5e38\u65b9\u4fbf\u5730\u8fdb\u884c DP\uff0c\u56e0\u4e3a\u6b63\u5e38 DP \u7684\u987a\u5e8f\u672c\u6765\u5c31\u662f\u62d3\u6251\u5e8f\u3002 \u4e00\u822c\u90fd\u662f\u76f4\u63a5\u9012\u63a8\u6c42\u89e3\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 std :: stack < int > s ; bool ins [ si_n ]; // in the stack or not int c [ si_n ]; //c[x] = the num of SCC which is x iside std :: vector < int > scc [ si_n ]; // scc[i] -> all node in i-th scc (information of i-th scc) // \u5982\u679c\u6ca1\u6709\u5fc5\u8981\u7684\u8bdd\u53ef\u4ee5\u4e0d\u8981 vector int dfn [ si_n ], low [ si_n ]; int n , m , cnt_t = 0 , tot = 0 ; // tot = how many scc in the graph. void tarjan ( int u ){ dfn [ u ] = low [ u ] =++ cnt_t ; s . push ( u ), ins [ u ] = true ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( ! dfn [ v ]){ tarjan ( v ); low [ u ] = min ( low [ u ], low [ v ]); } // \u6ca1\u6709\u8bbf\u95ee\u8fc7\uff0c\u9012\u5f52\u641c\u7d22\u7136\u540e\u66f4\u65b0 low\u3002 else if ( ins [ v ]) low [ u ] = min ( low [ u ], dfn [ v ]); // \u5df2\u7ecf\u5728\u6808\u4e2d\u4e86\uff0c\u7528 dfn[v] \u6765\u66f4\u65b0 low[u]\u3002 } if ( dfn [ u ] == low [ u ]){ ++ tot ; int x ; do { x = s . top (), s . pop (), ins [ x ] = false ; c [ x ] = tot , scc [ tot ]. pb ( x ); } while ( u != x ); } // \u51fa\u73b0\u4e86\u4e00\u4e2a SCC\u3002 } Edge edag [ si_m ]; int cnt_d = 0 ; void add_n ( int u , int v ){ edag [ ++ cnt_d ]. ver = v , edag [ cnt_d ]. Next = edag [ u ]. head ; edag [ u ]. head = cnt_d ; } void contract (){ for ( register int u = 1 ; u <= n ; ++ u ){ for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( c [ u ] == c [ v ]) continue ; add_n ( c [ u ], c [ v ]); } } // \u7f29\u70b9\u3002 } Tarjan \u7f29\u5b8c\u70b9\u4e4b\u540e\u7ed9 SCC \u6807\u8bb0\u7684\u987a\u5e8f\u662f\u9006\u62d3\u6251\u5e8f\u7684\u539f\u56e0\u975e\u5e38\u7b80\u5355\uff1b \uff08\u56fe\u6709\u70b9\u95ee\u9898\uff0c\u540c\u4e00\u4e2a SCC \u5f53\u4e2d\u7684\u8282\u70b9\u7684\u8fb9\u5e94\u8be5\u753b\u6210\u53cc\u5411\uff0c\u4f46\u662f\u8fd9\u91cc\u753b\u6210\u4e86\u5355\u5411\uff09 \u56e0\u4e3a Tarjan \u7684\u8bbf\u95ee\u987a\u5e8f\u662f\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u987a\u5e8f\uff08\u56e0\u4e3a\u4f7f\u7528\u4e86\u6808\uff09\u3002 \u90a3\u4e48\u4ece\u5c42\u7684\u89d2\u5ea6\u6765\u8bf4\uff0c\u66f4\u9760\u4e0a\u7684 SCC \u88ab\u6807\u8bb0\u5230\u7684\u65f6\u95f4\u5fc5\u7136\u66f4\u665a\uff0c\u800c Tarjan \u7f29\u5b8c\u70b9\u4e4b\u540e SCC \u6784\u6210\u7684\u56fe\u5fc5\u7136\u662f\u4e00\u4e2a DAG\u3002 \u800c\u62d3\u6251\u6392\u5e8f\u7684\u5b9e\u73b0\u4e00\u822c\u90fd\u662f\u6309\u5c42\u6392\u5e8f\u7684\uff0c\u6240\u4ee5 SCC \u5e8f\u5217\u5fc5\u7136\u662f\u9006\u62d3\u6251\u5e8f\u5217\uff08\u6b64\u5904\u662f\u611f\u6027\u7406\u89e3\uff09\u3002","title":"\u5f3a\u8fde\u901a\u5206\u91cf"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/#_1","text":"","title":"\u5f3a\u8fde\u901a\u5206\u91cf"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/#definition","text":"\u8054\u901a\u5206\u91cf\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u6709\u5411\u56fe\u7684\u5206\u91cf\u5f53\u4e2d\u7684\u4efb\u610f\u4e24\u70b9 \\((u,v)\\) \uff0c \\(\\exist \\delta (u,v) \\and \\delta (v,u)\\) \uff0c\u5219\u79f0\u8fd9\u4e2a\u5206\u91cf\u4e3a\u8054\u901a\u5206\u91cf \u5f3a\u8054\u901a\u5206\u91cf SCC\uff1a\u6709\u5411\u56fe\u7684\u4e00\u4e2a\u6781\u5927\u8fde\u901a\u5206\u91cf\u88ab\u79f0\u4f5c\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u6781\u5927\u7684\u7406\u89e3\u5c31\u662f\uff0c\u4e0d\u7ba1\u518d\u52a0\u4e0a\u54ea\u4e00\u4e2a\u8fb9\u548c\u54ea\u4e00\u4e2a\u8282\u70b9\uff0c\u4ed6\u90fd\u4e0d\u518d\u662f\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\uff0c\u4e5f\u5c31\u662f\u201c\u5927\u7684\u4e0d\u80fd\u518d\u5927\u201d\u3002 \u6d41\u56fe\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u6709\u5411\u56fe \\(G=(V,E)\\) \uff0c \\(\\exist r \\in V\\) \uff0c\u6ee1\u8db3 \\(r\\) \u53ef\u4ee5\u5230\u8fbe \\(V\\) \u4e2d\u7684\u4efb\u610f\u8282\u70b9\uff0c\u5219\u79f0 \\(G\\) \u4e3a\u4e00\u4e2a\u6d41\u56fe\u3002 \\(r\\) \u79f0\u4f5c\u6d41\u56fe\u7684\u6e90\u70b9\u3002 \u641c\u7d22\u6811\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u6d41\u56fe \\(G\\) \u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u5f97\u5230\u7684\u4e00\u68f5\u751f\u6210\u6811 \\(T\\) \u3002 \u65f6\u95f4\u6233 \\(dfn\\) \uff1a\u5bf9\u4e8e \\(G\\) \u4e2d\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u5b83\u5728 \\(T\\) \u4e2d\u88ab\u641c\u7d22\u5230\u7684\u987a\u5e8f\uff08\u65f6\u95f4\uff09\u3002 \u4e3a\u4e86\u65b9\u4fbf\u53d9\u8ff0\uff0c\u8fd9\u91cc\u518d\u5b9a\u4e49\u56db\u79cd\u8fb9\uff0c\u6d41\u56fe \\(G\\) \u7684\u6240\u6709\u8fb9\u5fc5\u7136\u662f\u8fd9\u56db\u79cd\u8fb9\u4e4b\u4e00 \u6811\u8fb9\uff1a\u5728\u641c\u7d22\u6811\u91cc\u7684\u8fb9\uff0c\u4ece \\(u \\to v\\) \uff0c\u4e14 \\(u\\) \u662f \\(v\\) \u7684\u7236\u4eb2\u3002 \u524d\u5411\u8fb9\uff1a\u4ece \\(u \\to v\\) \uff0c\u4e14 \\(u\\) \u662f \\(v\\) \u5728 \\(T\\) \u4e0a\u7684\u7956\u5148\u3002 \u540e\u5411\u8fb9\uff1a\u4ece \\(u \\to v\\) \uff0c\u4e14 \\(v\\) \u662f \\(u\\) \u5728 \\(T\\) \u4e0a\u7684\u7956\u5148 \u6a2a\u53c9\u8fb9\uff1a\u9664\u4e86 123 \u7684\u6240\u6709\u8fb9\uff0c\u5fc5\u7136\u6ee1\u8db3 \\(u \\to v,dfn_v<dfn_u\\) \u3002","title":"Definition"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/#tarjan-algorithm","text":"\u8003\u8651\u641c\u7d22\u6811\u4e0a\u7684\u8282\u70b9\u5982\u4f55\u624d\u80fd\u6210\u4e3a SCC \u5f53\u4e2d\u7684\u8282\u70b9\u3002 \u9996\u5148\uff0c\u4e00\u4e2a\u5b64\u7acb\u7684\u70b9\uff08\u8fd9\u91cc\u6307\u8d70\u51fa\u53bb\u4e86\u5c31\u6ca1\u6cd5\u56de\u6765\uff09\u5fc5\u7136\u662f\u4e00\u4e2a SCC\u3002 \u5982\u679c\u60f3\u8981\u66f4\u591a\u70b9\u52a0\u5165\u8fd9\u4e2a SCC\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u8981\u627e\u5230\u4e00\u4e2a\u73af\u3002 \u90a3\u4e48\u540e\u5411\u8fb9\u5fc5\u7136\u662f\u6709\u7528\u7684\uff0c\u5047\u8bbe \\(v\\) \u662f \\(u\\) \u7684\u7956\u5148\uff0c\u90a3\u4e48\u5fc5\u7136\u5b58\u5728\u4e00\u4e2a\u8def\u5f84\u4ece \\(v \\to u\\) \u3002 \u800c\u8fd9\u91cc\u53c8\u5b58\u5728\u4e00\u6761\u540e\u5411\u8fb9 \\(u \\to v\\) \uff0c\u90a3\u4e48\u5fc5\u7136\u4f1a\u51fa\u73b0\u4e00\u4e2a\u73af\uff0c\u4e5f\u5c31\u51fa\u73b0\u4e86\u4e00\u4e2a\u8054\u901a\u5206\u91cf\u3002 \u800c\u6a2a\u53c9\u8fb9\u4e5f\u8bb8\u4f1a\u6709\u7528\uff0c\u53ea\u8981\u4ece \\(u\\) \u7ecf\u8fc7\u4e00\u4e2a\u6a2a\u53c9\u8fb9\u8d70\u5230 \\(v\\) \uff0c\u4e14 \\(v\\) \u53ef\u4ee5\u5230\u8fbe \\(u\\) \u7684\u7956\u5148\u8282\u70b9\uff0c\u90a3\u4e48\u4e5f\u4f1a\u51fa\u73b0\u4e00\u4e2a\u73af\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u8054\u901a\u5206\u91cf\u3002 \u90a3\u4e48\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u5728\u6d41\u56fe\u4e0a\u627e\u5230\u5c3d\u53ef\u80fd\u5927\u7684\uff0c\u7531 \\(T\\) \u7ecf\u8fc7\u6dfb\u52a0\u51e0\u6761\u540e\u5411\u8fb9\u548c\u6a2a\u53c9\u8fb9\u6784\u6210\u7684\u73af\u3002 \u6240\u4ee5\u5f15\u5165\u4e00\u4e2a\u65b0\u7684\u503c \\(low_u\\) \uff0c\u8868\u793a \\(u\\) \u548c\u5b83\u5b50\u6811\u5f53\u4e2d\u7684\u8282\u70b9\u80fd\u5f80\u4e0a\uff08\u5728 \\(T\\) \u5f53\u4e2d\u7684\u4e0a\uff09\u8d70\u5230\u7684\u6700\u9ad8\uff08\u5728 \\(T\\) \u5f53\u4e2d\u6df1\u5ea6\u66f4\u4f4e\uff09\u7684\u8282\u70b9\u7684\u65f6\u95f4\u6233 \\(dfn\\) \u3002 \u5982\u679c\u51fa\u73b0 \\(low_u=dfn_u\\) \uff0c\u4e5f\u5c31\u662f \\(u\\) \u4e0d\u53ef\u80fd\u518d\u5f80\u4e0a\u8d70\uff0c\u5b83\u7684 \\(low\\) \u5c31\u662f\u81ea\u5df1\u7684 \\(dfn\\) \u7684\u65f6\u5019\uff0c\u90a3\u4e48 \\(u\\) \u5fc5\u7136\u662f\u5b83\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u5728 \\(T\\) \u4e0a\u6700\u9ad8\u7684\u70b9\u3002 \u7136\u540e\u5728\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u65f6\u5019\u540c\u65f6\u7ef4\u62a4\u4e00\u4e2a\u6808\uff0c\u4fdd\u5b58\u5f53\u524d\u80fd\u4e0e\u4ece\u8fd9\u4e2a\u8282\u70b9\u51fa\u53d1\u7684\u540e\u5411\u8fb9\u548c\u6a2a\u53c9\u8fb9\u6784\u6210\u73af\u7684\u6240\u6709\u8282\u70b9\u3002 \u8bb0 \\(anc_u\\) \u8868\u793a \\(u\\) \u5728 \\(T\\) \u4e0a\u7684\u6240\u6709\u7956\u5148\u8282\u70b9\uff0c\u90a3\u4e48\u6808\u4e2d\u4fdd\u5b58\u7684\u5b9e\u9645\u4e0a\u5c31\u662f\u8fd9\u4e24\u7c7b\u8282\u70b9\uff1a \\(v \\in anc_u\\) \uff0c\u4e14\u6709\u53ef\u80fd\u5b58\u5728\u540e\u5411\u8fb9 \\(u \\to v\\) \u3002 \\(v \\in V\\) \uff0c\u4e14\u5b58\u5728\u8def\u5f84 \\(\\delta(v\\to w),w\\in anc_u\\) \u3002 \u5728\u6ee1\u8db3 \\(low_u=dfn_u\\) \u7684\u65f6\u5019\uff0c\u628a\u6808\u7684\u8282\u70b9\u4e0d\u65ad\u5f39\u51fa\uff0c\u76f4\u5230 \\(u\\) \u51fa\u6808\uff0c\u6b64\u65f6\u5f53\u524d\u88ab\u5f39\u51fa\u7684\u6240\u6709\u8282\u70b9\u5c31\u6784\u6210\u4e00\u4e2a SCC\u3002 \u8fd9\u65f6\u5019\u5f39\u51fa\u7684\u4e00\u5b9a\u662f\u7b2c\u4e8c\u7c7b\u8282\u70b9\uff0c\u539f\u56e0\u663e\u7136\u3002 \u5177\u4f53\u5b9e\u73b0\uff1a \u6bcf\u6b21\u65b0\u8bbf\u95ee\u4e00\u4e2a\u8282\u70b9\u7684\u65f6\u5019\u521d\u59cb\u5316 \\(dfn=++time,low=dfn\\) \u3002 \u7136\u540e\u8bbf\u95ee\u5b83\u7684\u6240\u6709\u51fa\u8fb9 \\((u,v)\\) \uff0c\u5982\u679c\u51fa\u8fb9\u5bf9\u5e94\u7684\u8282\u70b9 \\(v\\) \u6ca1\u6709\u8bbf\u95ee\u8fc7\uff08\u5f53\u524d\u8bbf\u95ee\u7684\u662f\u6811\u8fb9\uff09\uff0c\u90a3\u4e48\u5c31\u9012\u5f52\u7136\u540e\u7528 \\(low_v\\) \u66f4\u65b0 \\(low_u\\) \u3002 \u53cd\u4e4b\uff0c\u5982\u679c \\(v\\) \u5df2\u7ecf\u5728\u6808\u4e2d\u4e86\uff0c\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b58\u5728\u4e00\u6761\u540e\u5411\u8fb9\u6216\u8005\u6a2a\u53c9\u8fb9\u4ece \\(u\\) \u51fa\u53d1\u80fd\u5230\u66f4\u4e0a\u9762\u3002 \u6839\u636e\u6808\u4e2d\u8282\u70b9\u7684\u6027\u8d28\uff0c\u7528 \\(dfn_v\\) \u66f4\u65b0 \\(low_u\\) \u5373\u53ef\u3002 \uff08\u6ce8\u610f\u8fd9\u91cc\u8981\u662f \\(dfn_v\\) \u800c\u4e0d\u662f \\(low_v\\) \uff0cTarjan \u8001\u7237\u5b50\u4eb2\u81ea\u8bf4\u8fc7\uff09\u3002 \u5982\u679c\u628a\u6bcf\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u770b\u4f5c\u4e00\u4e2a\u70b9\u3002 \u90a3\u4e48\u7f29\u5b8c\u70b9\u4e4b\u540e\u7684\u56fe\u5c31\u662f\u4e00\u4e2a DAG\u3002 \u5e76\u4e14 SCC \u7f16\u53f7\u7684\u987a\u5e8f\u5c31\u662f \u9006\u62d3\u6251\u5e8f \u3002 \u7f29\u70b9\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u80fd\u975e\u5e38\u65b9\u4fbf\u5730\u8fdb\u884c DP\uff0c\u56e0\u4e3a\u6b63\u5e38 DP \u7684\u987a\u5e8f\u672c\u6765\u5c31\u662f\u62d3\u6251\u5e8f\u3002 \u4e00\u822c\u90fd\u662f\u76f4\u63a5\u9012\u63a8\u6c42\u89e3\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 std :: stack < int > s ; bool ins [ si_n ]; // in the stack or not int c [ si_n ]; //c[x] = the num of SCC which is x iside std :: vector < int > scc [ si_n ]; // scc[i] -> all node in i-th scc (information of i-th scc) // \u5982\u679c\u6ca1\u6709\u5fc5\u8981\u7684\u8bdd\u53ef\u4ee5\u4e0d\u8981 vector int dfn [ si_n ], low [ si_n ]; int n , m , cnt_t = 0 , tot = 0 ; // tot = how many scc in the graph. void tarjan ( int u ){ dfn [ u ] = low [ u ] =++ cnt_t ; s . push ( u ), ins [ u ] = true ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( ! dfn [ v ]){ tarjan ( v ); low [ u ] = min ( low [ u ], low [ v ]); } // \u6ca1\u6709\u8bbf\u95ee\u8fc7\uff0c\u9012\u5f52\u641c\u7d22\u7136\u540e\u66f4\u65b0 low\u3002 else if ( ins [ v ]) low [ u ] = min ( low [ u ], dfn [ v ]); // \u5df2\u7ecf\u5728\u6808\u4e2d\u4e86\uff0c\u7528 dfn[v] \u6765\u66f4\u65b0 low[u]\u3002 } if ( dfn [ u ] == low [ u ]){ ++ tot ; int x ; do { x = s . top (), s . pop (), ins [ x ] = false ; c [ x ] = tot , scc [ tot ]. pb ( x ); } while ( u != x ); } // \u51fa\u73b0\u4e86\u4e00\u4e2a SCC\u3002 } Edge edag [ si_m ]; int cnt_d = 0 ; void add_n ( int u , int v ){ edag [ ++ cnt_d ]. ver = v , edag [ cnt_d ]. Next = edag [ u ]. head ; edag [ u ]. head = cnt_d ; } void contract (){ for ( register int u = 1 ; u <= n ; ++ u ){ for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( c [ u ] == c [ v ]) continue ; add_n ( c [ u ], c [ v ]); } } // \u7f29\u70b9\u3002 } Tarjan \u7f29\u5b8c\u70b9\u4e4b\u540e\u7ed9 SCC \u6807\u8bb0\u7684\u987a\u5e8f\u662f\u9006\u62d3\u6251\u5e8f\u7684\u539f\u56e0\u975e\u5e38\u7b80\u5355\uff1b \uff08\u56fe\u6709\u70b9\u95ee\u9898\uff0c\u540c\u4e00\u4e2a SCC \u5f53\u4e2d\u7684\u8282\u70b9\u7684\u8fb9\u5e94\u8be5\u753b\u6210\u53cc\u5411\uff0c\u4f46\u662f\u8fd9\u91cc\u753b\u6210\u4e86\u5355\u5411\uff09 \u56e0\u4e3a Tarjan \u7684\u8bbf\u95ee\u987a\u5e8f\u662f\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u987a\u5e8f\uff08\u56e0\u4e3a\u4f7f\u7528\u4e86\u6808\uff09\u3002 \u90a3\u4e48\u4ece\u5c42\u7684\u89d2\u5ea6\u6765\u8bf4\uff0c\u66f4\u9760\u4e0a\u7684 SCC \u88ab\u6807\u8bb0\u5230\u7684\u65f6\u95f4\u5fc5\u7136\u66f4\u665a\uff0c\u800c Tarjan \u7f29\u5b8c\u70b9\u4e4b\u540e SCC \u6784\u6210\u7684\u56fe\u5fc5\u7136\u662f\u4e00\u4e2a DAG\u3002 \u800c\u62d3\u6251\u6392\u5e8f\u7684\u5b9e\u73b0\u4e00\u822c\u90fd\u662f\u6309\u5c42\u6392\u5e8f\u7684\uff0c\u6240\u4ee5 SCC \u5e8f\u5217\u5fc5\u7136\u662f\u9006\u62d3\u6251\u5e8f\u5217\uff08\u6b64\u5904\u662f\u611f\u6027\u7406\u89e3\uff09\u3002","title":"Tarjan Algorithm"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/","text":"## \u6700\u5c0f\u751f\u6210\u6811 Definition \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u5e26\u6743\u65e0\u5411\u56fe\uff0c\u6c42\u5b83\u7684\u6240\u6709\u751f\u6210\u6811\u5f53\u4e2d\u6743\u503c\u548c\u6700\u5c0f\u7684\u4e00\u4e2a\u3002 \u5e26\u6743\u65e0\u5411\u56fe \\(G\\) \u7684\u751f\u6210\u6811 \\(T\\) \u5b9a\u4e49\u4e3a\u5305\u542b \\(G\\) \u7684\u6240\u6709\u8282\u70b9\uff0c\u7531 \\(G\\) \u5f53\u4e2d\u8fde\u63a5\u5b83\u4eec\u7684 \\(n-1\\) \u6761\u8fb9\u6784\u6210\u7684\u65e0\u5411\u8054\u901a\u5b50\u56fe\u3002 Two theory \u00b6 \u4efb\u610f\u4e00\u9897\u6700\u5c0f\u751f\u6210\u6811\u4e00\u5b9a\u5305\u542b \\(G\\) \u4e2d\u6700\u5c0f\u7684\u8fb9\uff08\u53cd\u8bc1\u6cd5\u5373\u53ef\uff09\u3002 \u8bbe\u4e00\u5f20\u65e0\u5411\u56fe \\(G=(V,E)\\) \uff0c\u4ece \\(E\\) \u4e2d\u9009\u51fa \\(k<|V|-1\\) \u6761\u8fb9\u6784\u6210 \\(G\\) \u7684\u4e00\u4e2a\u751f\u6210\u68ee\u6797\uff0c\u7136\u540e\u518d\u4ece\u5269\u4f59\u7684 \\(|E|-k\\) \u6761\u8fb9\u4e2d\u9009\u51fa \\(|V|-1-k\\) \u6761\u8fb9\u52a0\u5165\u68ee\u6797\u4e2d\uff0c\u8ba9\u5b83\u6210\u4e3a \\(G\\) \u7684\u751f\u6210\u6811\uff0c\u5e76\u4e14\u9009\u51fa\u7684 \\(\\sum w\\) \u6700\u5c0f\u3002 \u90a3\u4e48\uff0c\u8fd9\u4e2a\u751f\u6210\u6811\u4e00\u5b9a\u5305\u542b \\(|E|-k\\) \u6761\u8fb9\u91cc\u9762\u8fde\u63a5\u751f\u6210\u68ee\u6797\u7684\u4e24\u4e2a\u4e0d\u8fde\u901a\u8282\u70b9\u7684\u6743\u503c\u6700\u5c0f\u7684\u8fb9\u3002 \u8bc1\u660e\u53ef\u4ee5\u5728 zhihu \u770b\u770b @ciwei \u795e\u4ed9\u7684\u4e13\u680f\uff0c\u5176\u4e2d\u5305\u62ec\u7b97\u6cd5\u6b63\u786e\u6027\u7684\u8bc1\u660e\u3002 Kruskal \u00b6 \u57fa\u672c\u601d\u60f3\u662f\u7ef4\u62a4\u56fe\u7684\u6700\u5c0f\u751f\u6210\u68ee\u6797\u3002 \u5f00\u59cb\u7684\u65f6\u5019\u751f\u6210\u68ee\u6797\u662f\u7a7a\u7684\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u9897\u72ec\u7acb\u7684\u6811\u3002 \u7136\u540e\u7528\u7ed3\u8bba \\(2\\) \u7ef4\u62a4\u68ee\u6797\uff0c\u5229\u7528 dsu \u7ef4\u62a4\u8054\u901a\u6027\u3002 \u6309\u7167\u8fb9\u6743\u5347\u5e8f\u6392\u4e2a\u5e8f\uff0c\u7136\u540e\u626b\u4e00\u904d\u6bcf\u4e2a\u8fb9\u3002 \u5982\u679c\u5f53\u524d\u626b\u5230\u7684\u8fd9\u6761\u8fb9\u6240\u8fde\u7684\u4e24\u4e2a\u70b9 \\((u,v)\\) \u5df2\u7ecf\u8054\u901a\u4e86\u3002\u90a3\u4e48\u8df3\u8fc7\u3002 \u5982\u679c\u4e0d\u662f\u8054\u901a\u7684\uff0c\u6839\u636e\u8fd9\u4e00\u6761\uff1a \u8fd9\u4e2a\u751f\u6210\u6811\u4e00\u5b9a\u5305\u542b \\(|E|-k\\) \u6761\u8fb9\u91cc\u9762\u8fde\u63a5\u751f\u6210\u68ee\u6797\u7684 \u4e24\u4e2a\u4e0d\u8fde\u901a\u8282\u70b9 \u7684\u6743\u503c\u6700\u5c0f\u7684\u8fb9\u3002 \u628a\u8fd9\u4e00\u6761\u8fb9\u52a0\u5165\u5230\u6700\u5c0f\u751f\u6210\u6811\u91cc\uff0c\u987a\u4fbf\u5408\u5e76\u4e00\u4e0b \\((u,v)\\) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 struct Edge { int x , y , z ; inline bool operator < ( const Edge & b ) const { return z < b . z ; } } a [ si_m ]; struct Dsu { int pa [ si_n ]; Dsu (){ for ( register int i = 1 ; i <= 1e2 + 10 ; ++ i ) pa [ i ] = i ; } inline int root ( int x ){ if ( pa [ x ] != x ) return pa [ x ] = root ( pa [ x ]); return pa [ x ]; } inline bool same ( int x , int y ){ return root ( x ) == root ( y ); } inline void Union ( int x , int y ){ int rx = root ( x ), ry = root ( y ); if ( rx == ry ) return ; pa [ rx ] = ry ; } } dsu ; int main (){ cin >> n >> m ; for ( register int i = 1 ; i <= m ; ++ i ){ cin >> a [ i ]. x >> a [ i ]. y >> a [ i ]. z ; } sort ( a + 1 , a + 1 + m ); int ans = 0 ; for ( register int i = 1 ; i <= m ; ++ i ){ if ( dsu . same ( a [ i ]. x , a [ i ]. y )) continue ; dsu . Union ( a [ i ]. x , a [ i ]. y ), ans += a [ i ]. z ; } cout << ans << endl ; return 0 ; } \u590d\u6742\u5ea6 \\(\\text{O}(m \\log m)\\) \u3002 Prim \u00b6 \u4e00\u822c\u7528\u4e8e\u7a20\u5bc6\u56fe\u3002 \u6700\u5f00\u59cb\u786e\u5b9a \\(1\\) \u53f7\u8282\u70b9\u5c5e\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u3002 \u6bcf\u4e00\u6b21\u627e\u5230\u4e00\u6761\u6743\u503c\u6700\u5c0f\u7684\uff0c\u4e14\u6ee1\u8db3\u5b83\u8fde\u63a5\u7684\u5176\u4e2d\u4e00\u4e2a\u70b9 \\(u\\) \u5df2\u7ecf\u88ab\u9009\u5165\u6700\u5c0f\u751f\u6210\u6811\u91cc\uff0c\u53e6\u4e00\u4e2a\u70b9 \\(v\\) \u5219\u672a\u88ab\u9009\u4e2d\u7684\u8fb9\u3002 \u5177\u4f53\u5b9e\u73b0\uff1a \u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4 \\(dis\\) ,\u5982\u679c \\(u\\) \u6ca1\u6709\u88ab\u9009\u5165\uff0c\u90a3\u4e48 \\(dis_u\\) \u5c31\u7b49\u4e8e \\(u\\) \u548c\u5df2\u7ecf\u88ab\u9009\u4e2d\u70b9\u4e4b\u95f4\u7684\u8fde\u8fb9\u4e2d\u6743\u503c\u6700\u5c0f\u7684\u8fb9\u7684\u6743\u503c\u3002 \u53cd\u4e4b \\(dis_u\\) \u5c31\u7b49\u4e8e \\(u\\) \u88ab\u9009\u4e2d\u7684\u65f6\u5019\u9009\u51fa\u6765\u90a3\u6761\u6743\u503c\u6700\u5c0f\u8fb9\u7684\u6743\u503c\u3002 \u5982\u4f55\u5224\u662f\u5426\u9009\u4e2d\u5462\uff1f \u7ef4\u62a4\u4e00\u4e2a \\(vis\\) \u5373\u53ef\u3002\u4ece\u6ca1\u6709\u88ab\u9009\u4e2d\u7684\u8282\u70b9\u5f53\u4e2d\u9009\u51fa\u4e00\u4e2a \\(dis\\) \u6700\u5c0f\u7684\uff0c\u6807\u8bb0\u5b83\u3002 \u626b\u63cf\u548c\u8fd9\u4e2a\u88ab\u9009\u70b9\u7684\u6240\u6709\u51fa\u8fb9\uff0c\u66f4\u65b0\u53e6\u5916\u4e00\u4e2a\u7aef\u70b9\u7684 \\(dis\\) \u3002 \u6700\u540e\u751f\u6210\u6811\u7684\u6743\u503c\u548c\u5c31\u662f \\(\\sum\\limits^{n}_{i=2} dis_i\\) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 inline void Prim (){ memset ( vis , false , sizeof vis ), memset ( dis , 0x3f , sizeof dis ); dis [ 1 ] = 0 ; for ( register int i = 1 ; i < n ; ++ i ){ int x = 0 ; for ( register int j = 1 ; j <= n ; ++ j ){ if ( ! vis [ j ] && ( x == 0 || dis [ j ] < dis [ x ])) x = j ; } vis [ x ] = true ; for ( register int y = 1 ; y <= n ; ++ y ) if ( ! vis [ y ]) dis [ y ] = min ( dis [ y ], a [ x ][ y ]); } } int main (){ cin >> n ; memset ( a , 0x3f , sizeof a ); for ( register int i = 1 ; i < n ; ++ i ){ a [ i ][ i ] = 0 ; for ( register int j = 1 ; j <= n ; ++ j ){ int value ; cin >> value ; a [ i ][ j ] = a [ j ][ i ] = min ( a [ i ][ j ], value ); } } Prim (); int ans = 0 ; for ( register int i = 2 ; i <= n ; ++ i ) ans += dis [ i ]; return printf ( \"%d \\n \" , ans ), 0 ; } \u590d\u6742\u5ea6 \\(\\text{O}(n^2)\\) \uff0c\u53ef\u4ee5\u7528\u4e8c\u53c9\u5806\u4f18\u5316\u5230 \\(\\text{O}(m \\log n)\\) \uff0c\u4f46\u4e0d\u5982\u76f4\u63a5 Kruskal\u3002","title":"\u6700\u5c0f\u751f\u6210\u6811"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#definition","text":"\u7ed9\u4f60\u4e00\u4e2a\u5e26\u6743\u65e0\u5411\u56fe\uff0c\u6c42\u5b83\u7684\u6240\u6709\u751f\u6210\u6811\u5f53\u4e2d\u6743\u503c\u548c\u6700\u5c0f\u7684\u4e00\u4e2a\u3002 \u5e26\u6743\u65e0\u5411\u56fe \\(G\\) \u7684\u751f\u6210\u6811 \\(T\\) \u5b9a\u4e49\u4e3a\u5305\u542b \\(G\\) \u7684\u6240\u6709\u8282\u70b9\uff0c\u7531 \\(G\\) \u5f53\u4e2d\u8fde\u63a5\u5b83\u4eec\u7684 \\(n-1\\) \u6761\u8fb9\u6784\u6210\u7684\u65e0\u5411\u8054\u901a\u5b50\u56fe\u3002","title":"Definition"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#two-theory","text":"\u4efb\u610f\u4e00\u9897\u6700\u5c0f\u751f\u6210\u6811\u4e00\u5b9a\u5305\u542b \\(G\\) \u4e2d\u6700\u5c0f\u7684\u8fb9\uff08\u53cd\u8bc1\u6cd5\u5373\u53ef\uff09\u3002 \u8bbe\u4e00\u5f20\u65e0\u5411\u56fe \\(G=(V,E)\\) \uff0c\u4ece \\(E\\) \u4e2d\u9009\u51fa \\(k<|V|-1\\) \u6761\u8fb9\u6784\u6210 \\(G\\) \u7684\u4e00\u4e2a\u751f\u6210\u68ee\u6797\uff0c\u7136\u540e\u518d\u4ece\u5269\u4f59\u7684 \\(|E|-k\\) \u6761\u8fb9\u4e2d\u9009\u51fa \\(|V|-1-k\\) \u6761\u8fb9\u52a0\u5165\u68ee\u6797\u4e2d\uff0c\u8ba9\u5b83\u6210\u4e3a \\(G\\) \u7684\u751f\u6210\u6811\uff0c\u5e76\u4e14\u9009\u51fa\u7684 \\(\\sum w\\) \u6700\u5c0f\u3002 \u90a3\u4e48\uff0c\u8fd9\u4e2a\u751f\u6210\u6811\u4e00\u5b9a\u5305\u542b \\(|E|-k\\) \u6761\u8fb9\u91cc\u9762\u8fde\u63a5\u751f\u6210\u68ee\u6797\u7684\u4e24\u4e2a\u4e0d\u8fde\u901a\u8282\u70b9\u7684\u6743\u503c\u6700\u5c0f\u7684\u8fb9\u3002 \u8bc1\u660e\u53ef\u4ee5\u5728 zhihu \u770b\u770b @ciwei \u795e\u4ed9\u7684\u4e13\u680f\uff0c\u5176\u4e2d\u5305\u62ec\u7b97\u6cd5\u6b63\u786e\u6027\u7684\u8bc1\u660e\u3002","title":"Two theory"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#kruskal","text":"\u57fa\u672c\u601d\u60f3\u662f\u7ef4\u62a4\u56fe\u7684\u6700\u5c0f\u751f\u6210\u68ee\u6797\u3002 \u5f00\u59cb\u7684\u65f6\u5019\u751f\u6210\u68ee\u6797\u662f\u7a7a\u7684\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u9897\u72ec\u7acb\u7684\u6811\u3002 \u7136\u540e\u7528\u7ed3\u8bba \\(2\\) \u7ef4\u62a4\u68ee\u6797\uff0c\u5229\u7528 dsu \u7ef4\u62a4\u8054\u901a\u6027\u3002 \u6309\u7167\u8fb9\u6743\u5347\u5e8f\u6392\u4e2a\u5e8f\uff0c\u7136\u540e\u626b\u4e00\u904d\u6bcf\u4e2a\u8fb9\u3002 \u5982\u679c\u5f53\u524d\u626b\u5230\u7684\u8fd9\u6761\u8fb9\u6240\u8fde\u7684\u4e24\u4e2a\u70b9 \\((u,v)\\) \u5df2\u7ecf\u8054\u901a\u4e86\u3002\u90a3\u4e48\u8df3\u8fc7\u3002 \u5982\u679c\u4e0d\u662f\u8054\u901a\u7684\uff0c\u6839\u636e\u8fd9\u4e00\u6761\uff1a \u8fd9\u4e2a\u751f\u6210\u6811\u4e00\u5b9a\u5305\u542b \\(|E|-k\\) \u6761\u8fb9\u91cc\u9762\u8fde\u63a5\u751f\u6210\u68ee\u6797\u7684 \u4e24\u4e2a\u4e0d\u8fde\u901a\u8282\u70b9 \u7684\u6743\u503c\u6700\u5c0f\u7684\u8fb9\u3002 \u628a\u8fd9\u4e00\u6761\u8fb9\u52a0\u5165\u5230\u6700\u5c0f\u751f\u6210\u6811\u91cc\uff0c\u987a\u4fbf\u5408\u5e76\u4e00\u4e0b \\((u,v)\\) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 struct Edge { int x , y , z ; inline bool operator < ( const Edge & b ) const { return z < b . z ; } } a [ si_m ]; struct Dsu { int pa [ si_n ]; Dsu (){ for ( register int i = 1 ; i <= 1e2 + 10 ; ++ i ) pa [ i ] = i ; } inline int root ( int x ){ if ( pa [ x ] != x ) return pa [ x ] = root ( pa [ x ]); return pa [ x ]; } inline bool same ( int x , int y ){ return root ( x ) == root ( y ); } inline void Union ( int x , int y ){ int rx = root ( x ), ry = root ( y ); if ( rx == ry ) return ; pa [ rx ] = ry ; } } dsu ; int main (){ cin >> n >> m ; for ( register int i = 1 ; i <= m ; ++ i ){ cin >> a [ i ]. x >> a [ i ]. y >> a [ i ]. z ; } sort ( a + 1 , a + 1 + m ); int ans = 0 ; for ( register int i = 1 ; i <= m ; ++ i ){ if ( dsu . same ( a [ i ]. x , a [ i ]. y )) continue ; dsu . Union ( a [ i ]. x , a [ i ]. y ), ans += a [ i ]. z ; } cout << ans << endl ; return 0 ; } \u590d\u6742\u5ea6 \\(\\text{O}(m \\log m)\\) \u3002","title":"Kruskal"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/#prim","text":"\u4e00\u822c\u7528\u4e8e\u7a20\u5bc6\u56fe\u3002 \u6700\u5f00\u59cb\u786e\u5b9a \\(1\\) \u53f7\u8282\u70b9\u5c5e\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u3002 \u6bcf\u4e00\u6b21\u627e\u5230\u4e00\u6761\u6743\u503c\u6700\u5c0f\u7684\uff0c\u4e14\u6ee1\u8db3\u5b83\u8fde\u63a5\u7684\u5176\u4e2d\u4e00\u4e2a\u70b9 \\(u\\) \u5df2\u7ecf\u88ab\u9009\u5165\u6700\u5c0f\u751f\u6210\u6811\u91cc\uff0c\u53e6\u4e00\u4e2a\u70b9 \\(v\\) \u5219\u672a\u88ab\u9009\u4e2d\u7684\u8fb9\u3002 \u5177\u4f53\u5b9e\u73b0\uff1a \u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4 \\(dis\\) ,\u5982\u679c \\(u\\) \u6ca1\u6709\u88ab\u9009\u5165\uff0c\u90a3\u4e48 \\(dis_u\\) \u5c31\u7b49\u4e8e \\(u\\) \u548c\u5df2\u7ecf\u88ab\u9009\u4e2d\u70b9\u4e4b\u95f4\u7684\u8fde\u8fb9\u4e2d\u6743\u503c\u6700\u5c0f\u7684\u8fb9\u7684\u6743\u503c\u3002 \u53cd\u4e4b \\(dis_u\\) \u5c31\u7b49\u4e8e \\(u\\) \u88ab\u9009\u4e2d\u7684\u65f6\u5019\u9009\u51fa\u6765\u90a3\u6761\u6743\u503c\u6700\u5c0f\u8fb9\u7684\u6743\u503c\u3002 \u5982\u4f55\u5224\u662f\u5426\u9009\u4e2d\u5462\uff1f \u7ef4\u62a4\u4e00\u4e2a \\(vis\\) \u5373\u53ef\u3002\u4ece\u6ca1\u6709\u88ab\u9009\u4e2d\u7684\u8282\u70b9\u5f53\u4e2d\u9009\u51fa\u4e00\u4e2a \\(dis\\) \u6700\u5c0f\u7684\uff0c\u6807\u8bb0\u5b83\u3002 \u626b\u63cf\u548c\u8fd9\u4e2a\u88ab\u9009\u70b9\u7684\u6240\u6709\u51fa\u8fb9\uff0c\u66f4\u65b0\u53e6\u5916\u4e00\u4e2a\u7aef\u70b9\u7684 \\(dis\\) \u3002 \u6700\u540e\u751f\u6210\u6811\u7684\u6743\u503c\u548c\u5c31\u662f \\(\\sum\\limits^{n}_{i=2} dis_i\\) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 inline void Prim (){ memset ( vis , false , sizeof vis ), memset ( dis , 0x3f , sizeof dis ); dis [ 1 ] = 0 ; for ( register int i = 1 ; i < n ; ++ i ){ int x = 0 ; for ( register int j = 1 ; j <= n ; ++ j ){ if ( ! vis [ j ] && ( x == 0 || dis [ j ] < dis [ x ])) x = j ; } vis [ x ] = true ; for ( register int y = 1 ; y <= n ; ++ y ) if ( ! vis [ y ]) dis [ y ] = min ( dis [ y ], a [ x ][ y ]); } } int main (){ cin >> n ; memset ( a , 0x3f , sizeof a ); for ( register int i = 1 ; i < n ; ++ i ){ a [ i ][ i ] = 0 ; for ( register int j = 1 ; j <= n ; ++ j ){ int value ; cin >> value ; a [ i ][ j ] = a [ j ][ i ] = min ( a [ i ][ j ], value ); } } Prim (); int ans = 0 ; for ( register int i = 2 ; i <= n ; ++ i ) ans += dis [ i ]; return printf ( \"%d \\n \" , ans ), 0 ; } \u590d\u6742\u5ea6 \\(\\text{O}(n^2)\\) \uff0c\u53ef\u4ee5\u7528\u4e8c\u53c9\u5806\u4f18\u5316\u5230 \\(\\text{O}(m \\log n)\\) \uff0c\u4f46\u4e0d\u5982\u76f4\u63a5 Kruskal\u3002","title":"Prim"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/","text":"\u6700\u77ed\u8def \u00b6 \u7ed9\u4e00\u5f20\u5e26\u6743\u56fe\uff0c\u95ee\u4ece\u67d0\u4e2a\u70b9\u5230\u5176\u5b83\u6240\u6709\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u3002 \u5982\u679c\u662f\u65e0\u6743\u56fe\u53ef\u4ee5\u7528 BFS\u3002 \u5982\u679c\u662f\u53ea\u6709 0/1 \u8fb9\u6743\u7684\u53ef\u4ee5\u4f7f\u7528\u53cc\u7aef\u961f\u5217 BFS\u3002 \u5982\u679c\u662f\u5e26\u6743\u7684\u5355\u6e90\u6700\u77ed\u8def\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u6839\u636e\u56fe\u7684\u6027\u8d28\u9009\u62e9 Dijkstra, Spfa, BellmanFord\u3002 \u5982\u679c\u662f\u7a20\u5bc6\u56fe\uff0c\u5e76\u4e14\u8981\u6c42\u5168\u6e90\u6700\u77ed\u8def\uff0c\u5728 \\(n\\) \u6bd4\u8f83\u5c0f\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528 Floyd. Johnson \u4e0d\u5e38\u7528\uff0c\u4e0d\u63d0\u4e86\u3002 \u5355\u6e90\u6700\u77ed\u8def\u7684\u65f6\u5019\u4e00\u822c\u4f7f\u7528 \\(dis_i\\) \u8868\u793a\u4ece\u8d77\u70b9 \\(s\\) \u5230 \\(i\\) \u7684\u6700\u77ed\u8def\u3002 \u5168\u6e90\u7684\u65f6\u5019\u4e00\u822c\u7528 \\(dis_{i,j}\\) \u8868\u793a\u4ece \\(i\\to j\\) \u7684\u6700\u77ed\u8def\u3002 \u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\u662f \\(dis_v>dis_u+w(u,v)\\) \u3002 \u4e00\u822c\u4f1a\u5728\u6ee1\u8db3\u4e0d\u7b49\u5f0f\u7684\u65f6\u5019\u4ee4 \\(dis_v=dis_u+w(u,v)\\) \u3002 dijkstra \u00b6 \u601d\u8def\u5f88\u7b80\u5355\uff0c\u9996\u5148\u7528\u4e00\u4e2a\u6570\u7ec4 \\(vis\\) \u6807\u8bb0\u67d0\u4e2a\u8282\u70b9\u662f\u5426\u88ab\u66f4\u65b0\u8fc7\u3002 \u521d\u59cb\u5316\u4ee4 \\(dis_s=0\\) \uff0c\u5176\u5b83\u7684\u8bbe\u6210 \\(+ \\infty\\) \u3002 \u6bcf\u6b21\u627e\u627e\u5230\u4e00\u4e2a\u6ca1\u6709\u88ab\u6807\u8bb0\u7684\uff0c \\(dis\\) \u6700\u5c0f\u7684\u8282\u70b9 \\(x\\) \uff0c\u6807\u8bb0\u8fd9\u4e2a\u8282\u70b9\u3002 \u7136\u540e\u626b\u63cf \\(x\\) \u7684\u6240\u6709\u51fa\u8fb9\uff0c\u5229\u7528\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\u66f4\u65b0\u5b83\u80fd\u5230\u8fbe\u7684\u6240\u6709\u8282\u70b9\u7684 \\(dis\\) \u3002 \u76f4\u5230\u6240\u6709\u8282\u70b9\u88ab\u6807\u8bb0\u5b8c\u4e3a\u6b62\u3002 \u590d\u6742\u5ea6 \\(\\text{O}(n^2)\\) \u3002 \u4f18\u5316\uff1a\u8003\u8651\u5229\u7528\u4e00\u4e2a\u5c0f\u6839\u5806\uff0c\u6bcf\u6b21\u53d6\u51fa\u6839\u8fdb\u884c\u66f4\u65b0\u5373\u53ef\uff0c\u5f53\u67d0\u4e2a\u8282\u70b9\u88ab\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\u66f4\u65b0\u7684\u65f6\u5019\u5c06\u5176\u653e\u5165\u5806\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 std :: priority_queue < pair < int , int >> q ; inline void dijkstra ( int s ){ memset ( vis , false , sizeof vis ), memset ( dis , 0x3f , sizeof dis ); dis [ s ] = 0 , q . push ({ dis [ s ], s }); while ( ! q . empty ()){ int u = q . top (). second ; q . pop (); if ( vis [ u ]) continue ; vis [ u ] = true ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( dis [ v ] > dis [ u ] + w ) dis [ v ] = dis [ u ] + w , q . push ({ - dis [ v ], v }); //\u5229\u7528\u76f8\u53cd\u6570\u628a\u5927\u6839\u5806->\u5c0f\u6839\u5806 // \u4e00\u5b9a\u8981\u5148\u66f4\u65b0 dis[v] \u518d q.push } } } \u5728\u975e DAG \u4e0a\u51fa\u73b0\u8d1f\u8fb9\u6743\u5c31\u4e0d\u80fd\u7528\u3002 BellmanFord \u00b6 \u601d\u60f3\u4e5f\u5f88\u7b80\u5355\u3002 \u626b\u63cf\u6240\u6709\u8fb9\uff0c\u5982\u679c\u626b\u63cf\u5230\u7684\u8fd9\u6761\u8fb9\u6ee1\u8db3\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\uff0c\u66f4\u65b0\u5bf9\u5e94\u8282\u70b9\u7684 \\(dis\\) \u3002 \u91cd\u590d\u8fed\u4ee3\uff0c\u76f4\u5230\u6ca1\u6709\u66f4\u65b0\u64cd\u4f5c\u53d1\u751f\uff0c\u590d\u6742\u5ea6 \\(\\text{O}(nm)\\) \u3002 Spfa \u00b6 \u961f\u5217\u4f18\u5316\u7684 BellmanFord\uff0c\u6709\u8d1f\u8fb9\u6743\u4e5f\u6ca1\u6709\u5f71\u54cd\u3002 \u8003\u8651\u4f7f\u7528\u4e00\u4e2a\u961f\u5217\uff0c\u6700\u5f00\u59cb\u7684\u65f6\u5019\u961f\u5217\u53ea\u5305\u542b\u8d77\u70b9\u3002 \u6bcf\u6b21\u53d6\u51fa\u961f\u5934\uff0c\u626b\u63cf\u961f\u5934\u7684\u6240\u6709\u51fa\u8fb9\uff0c\u5982\u679c\u6ee1\u8db3\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\u5219\u66f4\u65b0\u3002 \u5982\u679c\u88ab\u66f4\u65b0\u7684\u8282\u70b9\u4e0d\u5728\u961f\u5217\u91cc\u9762\uff0c\u628a\u88ab\u66f4\u65b0\u7684\u8282\u70b9\u63d2\u5165\u961f\u5c3e\u3002 \u76f4\u5230\u961f\u5217\u4e3a\u7a7a\uff0c\u590d\u6742\u5ea6 \\(\\text{O}(km)\\) \u3002 \\(k\\) \u662f\u4e2a\u6bd4\u8f83\u5c0f\u7684\u5e38\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 std :: queue < int > q ; inline void spfa ( int s ){ memset ( vis , false , sizeof vis ), memset ( dis , 0x3f , sizeof dis ); dis [ s ] = 0 , q . push ( s ), vis [ s ] = true ; while ( ! q . empty ()){ int u = q . front (); q . pop (); vis [ u ] = false ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( dis [ v ] > dis [ u ] + w ){ dis [ v ] = dis [ u ] + w ; if ( ! vis [ v ]) q . push ( v ), vis [ v ] = true ; } } } } \u8fd9\u4e2a\u7b97\u6cd5\u5bb9\u6613\u88ab\u5361\uff0c\u6bd4\u5982\u83ca\u82b1\u56fe\u548c\u84b2\u516c\u82f1\u5c31\u968f\u4fbf\u5361SPFA\u3002 \u6240\u4ee5\u7ed9\u4e00\u4e2a\u4f18\u5316\u3002 Spfa+SLF+Swap \u00b6 \u81f3\u5c11\u662f\u6211\u89c9\u5f97\u6700\u6709\u6548\u7684\u4f18\u5316\u3002 \u867d\u7136\u8fd8\u662f\u88ab @fstqwq \u5b66\u957f\u5728 zhihu \u4e0a\u548c\u4e00\u5806\u795e\u4ed9\u53c9\u7206\u4e86\u3002 \u8003\u8651\u7528\u4e00\u4e2a\u53cc\u7aef\u961f\u5217\u4f18\u5316\uff0c\u6bcf\u6b21\u5c06\u5165\u961f\u7ed3\u70b9\u7684 \\(dis\\) \u548c\u961f\u9996\u6bd4\u8f83\uff0c\u5982\u679c\u66f4\u5927\u5219\u63d2\u5165\u81f3\u961f\u5c3e\uff0c\u5426\u5219\u63d2\u5165\u961f\u9996\u3002 \u8fd9\u662f\u666e\u901a\u7684 SLF\uff0c\u66f4\u52a0\u4f18\u79c0\u7684\u65b9\u5f0f\u662f\u52a0\u4e0a swap\uff0c\u6bcf\u6b21\u68c0\u67e5\u961f\u5934\u662f\u5426\u5c0f\u4e8e\u961f\u5c3e\uff0c\u5982\u679c\u4e0d\u662f\u7684\u8bdd\u4ea4\u6362\u961f\u5934\u548c\u961f\u5c3e\u3002 \u76f4\u63a5\u6539\u4e00\u4e0b\u961f\u5217\u7684\u5b9e\u73b0\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 struct SLF_Swap { std :: deque < int > dq ; SLF_Swap (){ dq . clear (); } inline void push ( int x ){ if ( ! dq . empty ()){ if ( dis [ x ] < dis [ dq . front ()]) dq . push_front ( x ); else dq . push_back ( x ); if ( dis [ dq . front ()] > dis [ dq . back ()]) swap ( dq . front (), dq . back ()); // \u8fd9\u91cc\u7684\u4e24\u91cd if \u53ef\u4ee5\u4fdd\u8bc1\u53ea\u4f1a\u5728\u81f3\u5c11\u6709\u4e24\u4e2a\u5143\u7d20\u7684\u65f6\u5019\u624d\u4ea4\u6362\u3002 } else dq . push_back ( x ); } inline void pop (){ dq . pop_front (); if ( ! dq . empty () && dis [ dq . front ()] > dis [ dq . back ()]) swap ( dq . front (), dq . back ()); } inline int size (){ return dq . size (); } inline int front (){ return dq . front (); } inline bool empty (){ return ! dq . size (); } } q ; Floyd \u00b6 \u4e0d\u80fd\u6709\u8d1f\u73af\uff0c\u56e0\u4e3a Floyd \u8981\u6c42\u6700\u77ed\u8def\u5fc5\u987b\u5b58\u5728\u3002 \u4f46\u662f Floyd \u53ef\u4ee5\u5224\u65ad\u8d1f\u73af\uff0c \u5148\u521d\u59cb\u5316\u6240\u6709 \\(dis = +\\infty,dis[i][i] = 0\\) \u3002 \u53ea\u8981\u8dd1\u5b8c\u4e4b\u540e\u5b58\u5728 \\(dis[i][i] < 0\\) \uff0c\u5373\u5b58\u5728\u8d1f\u73af\u3002 \u8003\u8651\u52a8\u6001\u89c4\u5212\u3002 \u8bbe \\(dis_{i,j,k}\\) \u8868\u793a\u4ece \\(i \\to j\\) \uff0c\u7ecf\u8fc7\u82e5\u5e72\u4e2a\u6807\u53f7\u4e0d\u8d85\u8fc7 \\(k\\) \u7684\u8282\u70b9\u7684\u6700\u77ed\u8def\u957f\u5ea6\u3002 \u53ef\u4ee5\u5206\u4e24\u4e2a\u90e8\u5206\u8f6c\u79fb\uff0c\u7b2c\u4e00\u4e2a\u90e8\u5206\u662f \\(dis_{i,j,k-1}\\) \uff0c\u7b2c\u4e8c\u4e2a\u90e8\u5206\u662f \\(i\\to k \\to j\\) \u524d\u8005\u662f\u76f4\u63a5\u4ece \\(i \\to j\\) \uff0c\u7ecf\u8fc7\u8282\u70b9\u7f16\u53f7\u4e0d\u8d85\u8fc7 \\(k-1\\) \uff0c\u540e\u8005\u662f\u5148\u4ece \\(i\\) \u5230 \\(k\\) \u4e4b\u540e\u518d\u5230 \\(j\\) \u3002 \u6240\u4ee5 \\(dis_{i,j,k}=\\min(dis_{i,j,k-1},dis_{i,k,k-1}+dis_{k,j,k-1})\\) \u8fd9\u91cc \\(k\\) \u662f\u9636\u6bb5\uff0c\u6240\u4ee5\u653e\u5728\u6700\u5916\u5c42\u3002 \u53d1\u73b0\u8fd9\u73a9\u610f\u513f\u53ea\u548c\u4e0a\u4e00\u5c42\u6709\u5173\uff0c\u7ecf\u8fc7\u5206\u6790\u53ef\u4ee5\u53d1\u73b0\uff0c\u80fd\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\uff0c\u53ef\u4ee5\u76f4\u63a5\u53bb\u6389\u7b2c\u4e09\u7ef4\u3002 \u4f46\u662f\u65b9\u7a0b\u8981\u7a0d\u5fae\u6539\u53d8\u4e00\u4e0b 1 2 3 4 5 6 7 for ( register int k = 1 ; k <= n ; ++ k ){ for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= n ; ++ j ){ dis [ i ][ j ] = min ( dis [ i ][ j ], dis [ i ][ k ] + dis [ k ][ j ]); } } } // \u4e0d\u8981\u5fd8\u8bb0\u521d\u59cb\u5316. \u4e00\u822c\u9700\u8981\u7528\u5230\u975e\u677f\u5b50\u7684Floyd \u7684\u65f6\u5019\uff0c\u90fd\u9700\u8981\u8003\u8651\u4f7f\u7528 \\(k\\) \u8fd9\u4e2a\u4e1c\u897f\u7684\u6027\u8d28\u3002 \u6bd4\u5982\u8981\u6c42\u6700\u5c0f\u73af\uff0c\u6070\u597d \\(X\\) \u6761\u8fb9\u7684\u6700\u77ed\u8def\u7684\u65f6\u5019\u5c31\u9700\u8981\u7528\u8fd9\u4e2a\u8003\u8651\u3002 \u66f4\u591a\u7684\u65f6\u5019\u662f\u628a \\(k\\) \u5f53\u4f5c \u4e2d\u95f4 \u70b9\u3002 \u6700\u77ed\u8def\u7684\u4e00\u4e9b\u6269\u5c55\u5e94\u7528 \u00b6 \u6216\u8005\u8bf4\u662f\u4e00\u4e9b\u6bd4\u8f83\u6709\u610f\u601d\u7684\u6280\u5de7\u3002 \u53e6\u5916\u4e00\u90e8\u5206\u4f1a\u5728\u9898\u76ee\u603b\u7ed3\u91cc\u9762\u63d0\u5230\u3002 Floyd \u5904\u7406\u4f20\u9012\u95ed\u5305 \u00b6 \u7ed9\u4f60\u4e00\u4e9b\u5143\u7d20\u548c\u4e00\u4e9b\u5177\u6709\u4f20\u9012\u6027\u7684\u4e8c\u5143\u5173\u7cfb\uff0c\u901a\u8fc7\u4f20\u9012\u6027\u63a8\u5bfc\u51fa\u66f4\u591a\u7684\u5173\u7cfb\u3002 \u6700\u7b80\u5355\u7684\u4f8b\u5b50\u5c31\u662f \\(A<B\\) \u8fd9\u79cd\u5173\u7cfb\u3002 \u8bbe \\(f_{i,j}\\) \u8868\u793a \\(i,j\\) \u4e4b\u95f4\u662f\u5426\u6709\u8fd9\u79cd\u4e8c\u5143\u7684\u4f20\u9012\u5173\u7cfb\u3002 \u5982\u679c\u6ee1\u8db3 \\(i < j\\) \uff08\u6b64\u5904\u7684\u5c0f\u4e8e\u4ee3\u6307\u4e8c\u5143\u5173\u7cfb\uff09\u3002 \u90a3\u4e48 \\(f_{i,j}=true\\) \uff0c\u53cd\u4e4b \\(f_{i,j}=false\\) \u3002 \u8dd1\u4e00\u904d Floyd \u5c31\u53ef\u4ee5\u5f97\u5230\u6240\u6709\u80fd\u63a8\u51fa\u7684\u5173\u7cfb\u3002 1 2 3 4 5 6 7 for ( register int k = 1 ; k <= n ; ++ k ){ for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= n ; ++ j ){ f [ i ][ j ] |= ( f [ i ][ k ] && f [ k ][ j ]); } } } Floyd \u5904\u7406\u65e0\u5411\u56fe\u6700\u5c0f\u73af \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u6c42\u56fe\u4e0a\u7684\u6700\u5c0f\u73af\uff0c\u8981\u6c42\u73af\u81f3\u5c11\u662f\u4e09\u5143\u73af\u3002 \u8003\u8651 Floyd \u5916\u5c42\u5faa\u73af\u521a\u521a\u5f00\u59cb\u7684\u65f6\u5019 \\(dis_{i,j}\\) \u662f\u4ec0\u4e48\u3002 \u660e\u663e\uff0c\u662f\uff1a\u201c\u7ecf\u8fc7\u82e5\u5e72\u4e2a\u7f16\u53f7\u4e0d\u8d85\u8fc7 \\(k-1\\) \u7684\u8282\u70b9\uff0c\u7531 \\(i \\to j\\) \u7684\u6700\u77ed\u8def\u201d\u3002 \u628a \\(k\\) \u5f53\u4f5c\u4e2d\u95f4\u70b9\uff0c\u4ece \\(i\\to j \\to k \\to i\\) \u5c31\u662f\u4e00\u4e2a\u73af\u3002 \u7528\u5f0f\u5b50\u8868\u8fbe\u8fd9\u4e2a\u5c31\u662f \\(dis_{i,j}+a_{j,k}+a_{k,i}\\) \uff08\u6b64\u65f6\u8fd8\u6ca1\u6709\u5bf9 \\(k\\) \u8fd9\u4e00\u5c42\u7684 \\(dis\\) \u8fdb\u884c\u66f4\u65b0\uff09 \u5bf9\u6240\u6709\u7684\u8fd9\u4e2a\u5f0f\u5b50\u53d6\u6700\u5c0f\u503c\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u3002 \u867d\u7136\u5bf9\u4e8e\u6bcf\u4e2a \\(k\\) \uff0c\u8fd9\u4e2a\u7b97\u6cd5\u53ea\u6c42\u7684\u6807\u53f7\u4e0d\u8d85\u8fc7 \\(k\\) \u7684\u8282\u70b9\u6784\u6210\u7684\u6700\u5c0f\u73af\uff0c\u4f46\u662f\u4e4b\u540e\u7684 \\(k\\) \u662f\u4f1a\u8003\u8651\u5230\u7684\uff0c\u6240\u4ee5\u7b97\u6cd5\u662f\u6b63\u786e\u7684\u3002 \u5982\u679c\u8981\u8f93\u51fa\u65b9\u6848\u7684\u8bdd\uff0c\u8bb0\u5f55 \\(pos_{i,j}\\) \u8868\u793a\u4f7f \\(dis_{i,j}\\) \u6700\u540e\u53d1\u751f\u66f4\u65b0\u7684 \\(k\\) \uff0c dp \u5b8c\u4e4b\u540e\u641e\u4e00\u4e0b\u9012\u5f52\u8f93\u51fa\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 std :: vector < int > ans_path ; inline void gopath ( int u , int v ){ if ( pos [ u ][ v ] == 0 ) return ; gopath ( u , pos [ u ][ v ]), ans_path . push_back ( pos [ u ][ v ]), gopath ( pos [ u ][ v ], v ); } // go through the path from u to v; signed main (){ cin >> n >> m ; memset ( a , 0x3f , sizeof a ); for ( register int i = 1 ; i <= n ; ++ i ) a [ i ][ i ] = 0 ; for ( register int i = 1 ; i <= m ; ++ i ){ int u , v , w ; cin >> u >> v >> w ; a [ u ][ v ] = min ( a [ u ][ v ], w ), a [ v ][ u ] = a [ u ][ v ]; } memcpy ( dis , a , sizeof a ); int ans = 0x3f3f3f3f3f3f3f3f , tmp = ans ; for ( register int k = 1 ; k <= n ; ++ k ){ for ( register int i = 1 ; i < k ; ++ i ){ // \u6ce8\u610f\u662fdp\u4e4b\u524d\uff0c\u6b64\u65f6 dis \u8fd8\u662f k-1 \u7684\u65f6\u5019\u7684\u72b6\u6001\u3002 for ( register int j = i + 1 ; j < k ; ++ j ){ if ( a [ j ][ k ] < tmp / 2 && a [ k ][ i ] < tmp / 2 && ans > dis [ i ][ j ] + a [ j ][ k ] + a [ k ][ i ]){ ans = dis [ i ][ j ] + a [ j ][ k ] + a [ k ][ i ]; ans_path . clear (), ans_path . push_back ( i ), gopath ( i , j ); ans_path . push_back ( j ), ans_path . push_back ( k ); } // \u4e0d\u5224\u7684\u8bdd a[j][k]+a[k][i] \u6709\u53ef\u80fd\u7206\uff0c\u5bfc\u81f4\u7b54\u6848\u51fa\u9519\u3002 } } // \u66f4\u65b0\u6700\u5c0f\u73af\u53d6min\u7684\u8fc7\u7a0b for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= n ; ++ j ){ if ( dis [ i ][ j ] > dis [ i ][ k ] + dis [ k ][ j ]) pos [ i ][ j ] = k , dis [ i ][ j ] = dis [ i ][ k ] + dis [ k ][ j ]; } } // \u6b63\u5e38\u7684 Floyd } if ( ans == 0x3f3f3f3f3f3f3f3f ) return puts ( \"No solution.\" ), 0 ; for ( auto x : ans_path ) cout << x << \" \" ; return puts ( \"\" ), 0 ; } \u7ecf\u8fc7\u6070\u597d K \u6761\u8fb9\u6700\u77ed\u8def \u00b6 \u9996\u5148\u7528\u90bb\u63a5\u77e9\u9635 \\(A\\) \u5b58\u56fe\u3002 \u7136\u540e \\(A[i,j]\\) \u5c31\u53ef\u4ee5\u770b\u505a \\(i \\to j\\) \u7ecf\u8fc7\u6070\u597d\u4e00\u6761\u8fb9\u7684\u6700\u77ed\u8def\u3002 \u8003\u8651\u6c42\u51fa\u7ecf\u8fc7\u6070\u597d\u4e24\u6761\u8fb9\u7684\u6700\u77ed\u8def \\(B\\) \u3002 \u53ef\u4ee5\u53d1\u73b0 \\(B[i,j]=\\min\\limits_{1\\le k \\le n}\\{A[i,k]+A[k,j]\\}\\) \u8fd9\u91cc\u5c31\u662f\u7528\u4e86\u7c7b\u4f3c Floyd \u7684\u679a\u4e3e\u4e2d\u95f4\u70b9\u601d\u60f3\u3002 \u7c7b\u4f3c\u7684\u53ef\u4ee5\u5f97\u5230\u7ecf\u8fc7\u6070\u597d \\(K\\) \u6761\u8fb9\u7684\u6700\u77ed\u8def\u3002 \u8bbe \\(A^{qwq}\\) \u8868\u793a\u7ecf\u8fc7\u6070\u597d \\(qwq\\) \u6761\u8fb9\u7684\u6700\u77ed\u8def\u3002 \u53ef\u4ee5\u5f97\u5230 \\(A^{qwq}[i,j]=\\min\\limits_{1\\le k \\le n}\\{A^p[i,k]+A^q[k,j]\\},qwq=p+q\\) \u53d1\u73b0\u8fd9\u73a9\u610f\u513f\u5c31\u662f\u4e2a\u7c7b\u4f3c\u4e8e\u77e9\u9635\u4e58\u6cd5\u7684\u4e1c\u897f\u3002 \u628a \\(\\sum\\) \u6362\u6210 \\(\\min\\) \uff0c\u628a \\(\\times\\) \u6362\u6210 \\(+\\) \u3002 \u521a\u597d\u8fd9\u4e2a\u4e1c\u897f\u4ecd\u7136\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u77e9\u9635\u5feb\u901f\u5e42 \\(n^3\\log K\\) \u6c42 \\(A^K\\) \u3002 \u6700\u77ed\u8def\u8ba1\u6570 \u00b6 \u8fd9\u4e2a\u73a9\u610f\u513f Floyd\uff0cSPFA\uff0cDijkstra \u90fd\u662f\u53ef\u4ee5\u505a\u7684\u3002 \u5728\u8dd1\u6700\u77ed\u8def\u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e2a\u6570\u7ec4 \\(cnt[v]\\) \u8868\u793a\u4ece \\(s \\to v\\) \u7684\u6700\u77ed\u8def\u5f84\u6761\u6570\u3002 \u7136\u540e\u6bcf\u6b21\u6700\u77ed\u8def\u88ab\u66f4\u65b0\u7684\u65f6\u5019\u5c31\u66f4\u65b0 \\(cnt\\) \u3002 \u989d\u5916\u7684\uff0c\u5982\u679c\u6700\u77ed\u8def\u957f\u5ea6\u6ca1\u6709\u88ab\u66f4\u65b0\uff0c\u4f46\u662f\u4e09\u89d2\u4e0d\u7b49\u5f0f\u4e2d\u7684 \\(>\\) \u53d8\u6210\u4e86 \\(=\\) \uff0c \u90a3\u4e48\u7ed9 \\(cnt\\) \u52a0\u4e0a\u5f53\u524d\u8f6c\u79fb\u8fc7\u6765\u7684\u70b9\u7684 \\(cnt\\) \u3002 \u8fd9\u4e1c\u897f\u548cDAG\u4e0a\u7684\u8def\u5f84\u8ba1\u6570\u6bd4\u8f83\u50cf\uff0c\u53ea\u4e0d\u8fc7\u6709\u6700\u77ed\u8def\u7684\u9650\u5236\u3002 \u5f53\u7136\uff0c\u8def\u5f84\u6761\u6570\u8fd9\u4e2a\u73a9\u610f\u513f\u662f\u6307\u6570\u7ea7\u522b\u7684\uff0c\u4e00\u822c\u90fd\u4f1a\u8981\u6c42\u53d6\u6a21\u3002 \\(Floyd\\) \u7684\u5b9e\u73b0\u7565\u5fae\u6709\u70b9\u4e0d\u540c\uff0c\u56e0\u4e3a\u662f\u679a\u4e3e\u4e2d\u95f4\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u518d\u7528\u4e00\u6b21\u4e58\u6cd5\u539f\u7406\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 Floyd : ============================================== memset ( dis , 0x3f , sizeof dis ); memset ( cnt , 0 , sizeof cnt ); cin >> n >> m ; for ( int i = 1 ; i <= m ; ++ i ) { int u , v , w ; cin >> u >> v >> w ; dis [ u ][ v ] = dis [ v ][ u ] = min ( dis [ u ][ v ], w ); cnt [ u ][ v ] = cnt [ v ][ u ] = 1 ; } for ( int i = 1 ; i <= n ; ++ i ) dis [ i ][ i ] = 0 ; for ( int k = 1 ; k <= n ; ++ k ) { for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { if ( dis [ i ][ j ] > dis [ i ][ k ] + dis [ k ][ j ]) { dis [ i ][ j ] = dis [ i ][ k ] + dis [ k ][ j ]; cnt [ i ][ j ] = 1l l * cnt [ i ][ k ] * cnt [ k ][ j ]; } else if ( dis [ i ][ j ] == dis [ i ][ k ] + dis [ k ][ j ]) { cnt [ i ][ j ] += 1l l * cnt [ i ][ k ] * cnt [ k ][ j ]; } // \u4e58\u6cd5\u539f\u7406\u8ba1\u6570\u3002 } } } Dijkstra : ============================================== void dijkstra ( int s ) { memset ( vis , false , sizeof vis ); memset ( dis , 0x3f , sizeof dis ); q . push ({ dis [ s ] = 0 , s }), cnt [ 1 ] = 1 ; while ( ! q . empty ()) { int u = q . top (). second ; q . pop (); if ( vis [ u ]) continue ; vis [ u ] = true ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver , w = e [ i ]. w ; if ( dis [ v ] > dis [ u ] + w ) { dis [ v ] = dis [ u ] + w ; cnt [ v ] = cnt [ u ] % mod ; q . push ({ - dis [ v ], v }); } else if ( dis [ v ] == dis [ u ] + w ) { cnt [ v ] = ( cnt [ v ] + cnt [ u ]) % mod ; } } } } int main () { memset ( head , -1 , sizeof head ); memset ( cnt , 0 , sizeof cnt ); cin >> n >> m ; for ( int i = 1 ; i <= m ; ++ i ) { int u , v ; cin >> u >> v ; add ( u , v ), add ( v , u ); } dijkstra ( 1 ); for ( int i = 1 ; i <= n ; ++ i ) { cout << cnt [ i ] << endl ; } return 0 ; }","title":"\u6700\u77ed\u8def"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#_1","text":"\u7ed9\u4e00\u5f20\u5e26\u6743\u56fe\uff0c\u95ee\u4ece\u67d0\u4e2a\u70b9\u5230\u5176\u5b83\u6240\u6709\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u3002 \u5982\u679c\u662f\u65e0\u6743\u56fe\u53ef\u4ee5\u7528 BFS\u3002 \u5982\u679c\u662f\u53ea\u6709 0/1 \u8fb9\u6743\u7684\u53ef\u4ee5\u4f7f\u7528\u53cc\u7aef\u961f\u5217 BFS\u3002 \u5982\u679c\u662f\u5e26\u6743\u7684\u5355\u6e90\u6700\u77ed\u8def\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u6839\u636e\u56fe\u7684\u6027\u8d28\u9009\u62e9 Dijkstra, Spfa, BellmanFord\u3002 \u5982\u679c\u662f\u7a20\u5bc6\u56fe\uff0c\u5e76\u4e14\u8981\u6c42\u5168\u6e90\u6700\u77ed\u8def\uff0c\u5728 \\(n\\) \u6bd4\u8f83\u5c0f\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528 Floyd. Johnson \u4e0d\u5e38\u7528\uff0c\u4e0d\u63d0\u4e86\u3002 \u5355\u6e90\u6700\u77ed\u8def\u7684\u65f6\u5019\u4e00\u822c\u4f7f\u7528 \\(dis_i\\) \u8868\u793a\u4ece\u8d77\u70b9 \\(s\\) \u5230 \\(i\\) \u7684\u6700\u77ed\u8def\u3002 \u5168\u6e90\u7684\u65f6\u5019\u4e00\u822c\u7528 \\(dis_{i,j}\\) \u8868\u793a\u4ece \\(i\\to j\\) \u7684\u6700\u77ed\u8def\u3002 \u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\u662f \\(dis_v>dis_u+w(u,v)\\) \u3002 \u4e00\u822c\u4f1a\u5728\u6ee1\u8db3\u4e0d\u7b49\u5f0f\u7684\u65f6\u5019\u4ee4 \\(dis_v=dis_u+w(u,v)\\) \u3002","title":"\u6700\u77ed\u8def"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#dijkstra","text":"\u601d\u8def\u5f88\u7b80\u5355\uff0c\u9996\u5148\u7528\u4e00\u4e2a\u6570\u7ec4 \\(vis\\) \u6807\u8bb0\u67d0\u4e2a\u8282\u70b9\u662f\u5426\u88ab\u66f4\u65b0\u8fc7\u3002 \u521d\u59cb\u5316\u4ee4 \\(dis_s=0\\) \uff0c\u5176\u5b83\u7684\u8bbe\u6210 \\(+ \\infty\\) \u3002 \u6bcf\u6b21\u627e\u627e\u5230\u4e00\u4e2a\u6ca1\u6709\u88ab\u6807\u8bb0\u7684\uff0c \\(dis\\) \u6700\u5c0f\u7684\u8282\u70b9 \\(x\\) \uff0c\u6807\u8bb0\u8fd9\u4e2a\u8282\u70b9\u3002 \u7136\u540e\u626b\u63cf \\(x\\) \u7684\u6240\u6709\u51fa\u8fb9\uff0c\u5229\u7528\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\u66f4\u65b0\u5b83\u80fd\u5230\u8fbe\u7684\u6240\u6709\u8282\u70b9\u7684 \\(dis\\) \u3002 \u76f4\u5230\u6240\u6709\u8282\u70b9\u88ab\u6807\u8bb0\u5b8c\u4e3a\u6b62\u3002 \u590d\u6742\u5ea6 \\(\\text{O}(n^2)\\) \u3002 \u4f18\u5316\uff1a\u8003\u8651\u5229\u7528\u4e00\u4e2a\u5c0f\u6839\u5806\uff0c\u6bcf\u6b21\u53d6\u51fa\u6839\u8fdb\u884c\u66f4\u65b0\u5373\u53ef\uff0c\u5f53\u67d0\u4e2a\u8282\u70b9\u88ab\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\u66f4\u65b0\u7684\u65f6\u5019\u5c06\u5176\u653e\u5165\u5806\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 std :: priority_queue < pair < int , int >> q ; inline void dijkstra ( int s ){ memset ( vis , false , sizeof vis ), memset ( dis , 0x3f , sizeof dis ); dis [ s ] = 0 , q . push ({ dis [ s ], s }); while ( ! q . empty ()){ int u = q . top (). second ; q . pop (); if ( vis [ u ]) continue ; vis [ u ] = true ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( dis [ v ] > dis [ u ] + w ) dis [ v ] = dis [ u ] + w , q . push ({ - dis [ v ], v }); //\u5229\u7528\u76f8\u53cd\u6570\u628a\u5927\u6839\u5806->\u5c0f\u6839\u5806 // \u4e00\u5b9a\u8981\u5148\u66f4\u65b0 dis[v] \u518d q.push } } } \u5728\u975e DAG \u4e0a\u51fa\u73b0\u8d1f\u8fb9\u6743\u5c31\u4e0d\u80fd\u7528\u3002","title":"dijkstra"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#bellmanford","text":"\u601d\u60f3\u4e5f\u5f88\u7b80\u5355\u3002 \u626b\u63cf\u6240\u6709\u8fb9\uff0c\u5982\u679c\u626b\u63cf\u5230\u7684\u8fd9\u6761\u8fb9\u6ee1\u8db3\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\uff0c\u66f4\u65b0\u5bf9\u5e94\u8282\u70b9\u7684 \\(dis\\) \u3002 \u91cd\u590d\u8fed\u4ee3\uff0c\u76f4\u5230\u6ca1\u6709\u66f4\u65b0\u64cd\u4f5c\u53d1\u751f\uff0c\u590d\u6742\u5ea6 \\(\\text{O}(nm)\\) \u3002","title":"BellmanFord"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#spfa","text":"\u961f\u5217\u4f18\u5316\u7684 BellmanFord\uff0c\u6709\u8d1f\u8fb9\u6743\u4e5f\u6ca1\u6709\u5f71\u54cd\u3002 \u8003\u8651\u4f7f\u7528\u4e00\u4e2a\u961f\u5217\uff0c\u6700\u5f00\u59cb\u7684\u65f6\u5019\u961f\u5217\u53ea\u5305\u542b\u8d77\u70b9\u3002 \u6bcf\u6b21\u53d6\u51fa\u961f\u5934\uff0c\u626b\u63cf\u961f\u5934\u7684\u6240\u6709\u51fa\u8fb9\uff0c\u5982\u679c\u6ee1\u8db3\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\u5219\u66f4\u65b0\u3002 \u5982\u679c\u88ab\u66f4\u65b0\u7684\u8282\u70b9\u4e0d\u5728\u961f\u5217\u91cc\u9762\uff0c\u628a\u88ab\u66f4\u65b0\u7684\u8282\u70b9\u63d2\u5165\u961f\u5c3e\u3002 \u76f4\u5230\u961f\u5217\u4e3a\u7a7a\uff0c\u590d\u6742\u5ea6 \\(\\text{O}(km)\\) \u3002 \\(k\\) \u662f\u4e2a\u6bd4\u8f83\u5c0f\u7684\u5e38\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 std :: queue < int > q ; inline void spfa ( int s ){ memset ( vis , false , sizeof vis ), memset ( dis , 0x3f , sizeof dis ); dis [ s ] = 0 , q . push ( s ), vis [ s ] = true ; while ( ! q . empty ()){ int u = q . front (); q . pop (); vis [ u ] = false ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( dis [ v ] > dis [ u ] + w ){ dis [ v ] = dis [ u ] + w ; if ( ! vis [ v ]) q . push ( v ), vis [ v ] = true ; } } } } \u8fd9\u4e2a\u7b97\u6cd5\u5bb9\u6613\u88ab\u5361\uff0c\u6bd4\u5982\u83ca\u82b1\u56fe\u548c\u84b2\u516c\u82f1\u5c31\u968f\u4fbf\u5361SPFA\u3002 \u6240\u4ee5\u7ed9\u4e00\u4e2a\u4f18\u5316\u3002","title":"Spfa"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#spfaslfswap","text":"\u81f3\u5c11\u662f\u6211\u89c9\u5f97\u6700\u6709\u6548\u7684\u4f18\u5316\u3002 \u867d\u7136\u8fd8\u662f\u88ab @fstqwq \u5b66\u957f\u5728 zhihu \u4e0a\u548c\u4e00\u5806\u795e\u4ed9\u53c9\u7206\u4e86\u3002 \u8003\u8651\u7528\u4e00\u4e2a\u53cc\u7aef\u961f\u5217\u4f18\u5316\uff0c\u6bcf\u6b21\u5c06\u5165\u961f\u7ed3\u70b9\u7684 \\(dis\\) \u548c\u961f\u9996\u6bd4\u8f83\uff0c\u5982\u679c\u66f4\u5927\u5219\u63d2\u5165\u81f3\u961f\u5c3e\uff0c\u5426\u5219\u63d2\u5165\u961f\u9996\u3002 \u8fd9\u662f\u666e\u901a\u7684 SLF\uff0c\u66f4\u52a0\u4f18\u79c0\u7684\u65b9\u5f0f\u662f\u52a0\u4e0a swap\uff0c\u6bcf\u6b21\u68c0\u67e5\u961f\u5934\u662f\u5426\u5c0f\u4e8e\u961f\u5c3e\uff0c\u5982\u679c\u4e0d\u662f\u7684\u8bdd\u4ea4\u6362\u961f\u5934\u548c\u961f\u5c3e\u3002 \u76f4\u63a5\u6539\u4e00\u4e0b\u961f\u5217\u7684\u5b9e\u73b0\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 struct SLF_Swap { std :: deque < int > dq ; SLF_Swap (){ dq . clear (); } inline void push ( int x ){ if ( ! dq . empty ()){ if ( dis [ x ] < dis [ dq . front ()]) dq . push_front ( x ); else dq . push_back ( x ); if ( dis [ dq . front ()] > dis [ dq . back ()]) swap ( dq . front (), dq . back ()); // \u8fd9\u91cc\u7684\u4e24\u91cd if \u53ef\u4ee5\u4fdd\u8bc1\u53ea\u4f1a\u5728\u81f3\u5c11\u6709\u4e24\u4e2a\u5143\u7d20\u7684\u65f6\u5019\u624d\u4ea4\u6362\u3002 } else dq . push_back ( x ); } inline void pop (){ dq . pop_front (); if ( ! dq . empty () && dis [ dq . front ()] > dis [ dq . back ()]) swap ( dq . front (), dq . back ()); } inline int size (){ return dq . size (); } inline int front (){ return dq . front (); } inline bool empty (){ return ! dq . size (); } } q ;","title":"Spfa+SLF+Swap"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#floyd","text":"\u4e0d\u80fd\u6709\u8d1f\u73af\uff0c\u56e0\u4e3a Floyd \u8981\u6c42\u6700\u77ed\u8def\u5fc5\u987b\u5b58\u5728\u3002 \u4f46\u662f Floyd \u53ef\u4ee5\u5224\u65ad\u8d1f\u73af\uff0c \u5148\u521d\u59cb\u5316\u6240\u6709 \\(dis = +\\infty,dis[i][i] = 0\\) \u3002 \u53ea\u8981\u8dd1\u5b8c\u4e4b\u540e\u5b58\u5728 \\(dis[i][i] < 0\\) \uff0c\u5373\u5b58\u5728\u8d1f\u73af\u3002 \u8003\u8651\u52a8\u6001\u89c4\u5212\u3002 \u8bbe \\(dis_{i,j,k}\\) \u8868\u793a\u4ece \\(i \\to j\\) \uff0c\u7ecf\u8fc7\u82e5\u5e72\u4e2a\u6807\u53f7\u4e0d\u8d85\u8fc7 \\(k\\) \u7684\u8282\u70b9\u7684\u6700\u77ed\u8def\u957f\u5ea6\u3002 \u53ef\u4ee5\u5206\u4e24\u4e2a\u90e8\u5206\u8f6c\u79fb\uff0c\u7b2c\u4e00\u4e2a\u90e8\u5206\u662f \\(dis_{i,j,k-1}\\) \uff0c\u7b2c\u4e8c\u4e2a\u90e8\u5206\u662f \\(i\\to k \\to j\\) \u524d\u8005\u662f\u76f4\u63a5\u4ece \\(i \\to j\\) \uff0c\u7ecf\u8fc7\u8282\u70b9\u7f16\u53f7\u4e0d\u8d85\u8fc7 \\(k-1\\) \uff0c\u540e\u8005\u662f\u5148\u4ece \\(i\\) \u5230 \\(k\\) \u4e4b\u540e\u518d\u5230 \\(j\\) \u3002 \u6240\u4ee5 \\(dis_{i,j,k}=\\min(dis_{i,j,k-1},dis_{i,k,k-1}+dis_{k,j,k-1})\\) \u8fd9\u91cc \\(k\\) \u662f\u9636\u6bb5\uff0c\u6240\u4ee5\u653e\u5728\u6700\u5916\u5c42\u3002 \u53d1\u73b0\u8fd9\u73a9\u610f\u513f\u53ea\u548c\u4e0a\u4e00\u5c42\u6709\u5173\uff0c\u7ecf\u8fc7\u5206\u6790\u53ef\u4ee5\u53d1\u73b0\uff0c\u80fd\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\uff0c\u53ef\u4ee5\u76f4\u63a5\u53bb\u6389\u7b2c\u4e09\u7ef4\u3002 \u4f46\u662f\u65b9\u7a0b\u8981\u7a0d\u5fae\u6539\u53d8\u4e00\u4e0b 1 2 3 4 5 6 7 for ( register int k = 1 ; k <= n ; ++ k ){ for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= n ; ++ j ){ dis [ i ][ j ] = min ( dis [ i ][ j ], dis [ i ][ k ] + dis [ k ][ j ]); } } } // \u4e0d\u8981\u5fd8\u8bb0\u521d\u59cb\u5316. \u4e00\u822c\u9700\u8981\u7528\u5230\u975e\u677f\u5b50\u7684Floyd \u7684\u65f6\u5019\uff0c\u90fd\u9700\u8981\u8003\u8651\u4f7f\u7528 \\(k\\) \u8fd9\u4e2a\u4e1c\u897f\u7684\u6027\u8d28\u3002 \u6bd4\u5982\u8981\u6c42\u6700\u5c0f\u73af\uff0c\u6070\u597d \\(X\\) \u6761\u8fb9\u7684\u6700\u77ed\u8def\u7684\u65f6\u5019\u5c31\u9700\u8981\u7528\u8fd9\u4e2a\u8003\u8651\u3002 \u66f4\u591a\u7684\u65f6\u5019\u662f\u628a \\(k\\) \u5f53\u4f5c \u4e2d\u95f4 \u70b9\u3002","title":"Floyd"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#_2","text":"\u6216\u8005\u8bf4\u662f\u4e00\u4e9b\u6bd4\u8f83\u6709\u610f\u601d\u7684\u6280\u5de7\u3002 \u53e6\u5916\u4e00\u90e8\u5206\u4f1a\u5728\u9898\u76ee\u603b\u7ed3\u91cc\u9762\u63d0\u5230\u3002","title":"\u6700\u77ed\u8def\u7684\u4e00\u4e9b\u6269\u5c55\u5e94\u7528"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#floyd_1","text":"\u7ed9\u4f60\u4e00\u4e9b\u5143\u7d20\u548c\u4e00\u4e9b\u5177\u6709\u4f20\u9012\u6027\u7684\u4e8c\u5143\u5173\u7cfb\uff0c\u901a\u8fc7\u4f20\u9012\u6027\u63a8\u5bfc\u51fa\u66f4\u591a\u7684\u5173\u7cfb\u3002 \u6700\u7b80\u5355\u7684\u4f8b\u5b50\u5c31\u662f \\(A<B\\) \u8fd9\u79cd\u5173\u7cfb\u3002 \u8bbe \\(f_{i,j}\\) \u8868\u793a \\(i,j\\) \u4e4b\u95f4\u662f\u5426\u6709\u8fd9\u79cd\u4e8c\u5143\u7684\u4f20\u9012\u5173\u7cfb\u3002 \u5982\u679c\u6ee1\u8db3 \\(i < j\\) \uff08\u6b64\u5904\u7684\u5c0f\u4e8e\u4ee3\u6307\u4e8c\u5143\u5173\u7cfb\uff09\u3002 \u90a3\u4e48 \\(f_{i,j}=true\\) \uff0c\u53cd\u4e4b \\(f_{i,j}=false\\) \u3002 \u8dd1\u4e00\u904d Floyd \u5c31\u53ef\u4ee5\u5f97\u5230\u6240\u6709\u80fd\u63a8\u51fa\u7684\u5173\u7cfb\u3002 1 2 3 4 5 6 7 for ( register int k = 1 ; k <= n ; ++ k ){ for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= n ; ++ j ){ f [ i ][ j ] |= ( f [ i ][ k ] && f [ k ][ j ]); } } }","title":"Floyd \u5904\u7406\u4f20\u9012\u95ed\u5305"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#floyd_2","text":"\u7ed9\u4f60\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u6c42\u56fe\u4e0a\u7684\u6700\u5c0f\u73af\uff0c\u8981\u6c42\u73af\u81f3\u5c11\u662f\u4e09\u5143\u73af\u3002 \u8003\u8651 Floyd \u5916\u5c42\u5faa\u73af\u521a\u521a\u5f00\u59cb\u7684\u65f6\u5019 \\(dis_{i,j}\\) \u662f\u4ec0\u4e48\u3002 \u660e\u663e\uff0c\u662f\uff1a\u201c\u7ecf\u8fc7\u82e5\u5e72\u4e2a\u7f16\u53f7\u4e0d\u8d85\u8fc7 \\(k-1\\) \u7684\u8282\u70b9\uff0c\u7531 \\(i \\to j\\) \u7684\u6700\u77ed\u8def\u201d\u3002 \u628a \\(k\\) \u5f53\u4f5c\u4e2d\u95f4\u70b9\uff0c\u4ece \\(i\\to j \\to k \\to i\\) \u5c31\u662f\u4e00\u4e2a\u73af\u3002 \u7528\u5f0f\u5b50\u8868\u8fbe\u8fd9\u4e2a\u5c31\u662f \\(dis_{i,j}+a_{j,k}+a_{k,i}\\) \uff08\u6b64\u65f6\u8fd8\u6ca1\u6709\u5bf9 \\(k\\) \u8fd9\u4e00\u5c42\u7684 \\(dis\\) \u8fdb\u884c\u66f4\u65b0\uff09 \u5bf9\u6240\u6709\u7684\u8fd9\u4e2a\u5f0f\u5b50\u53d6\u6700\u5c0f\u503c\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u3002 \u867d\u7136\u5bf9\u4e8e\u6bcf\u4e2a \\(k\\) \uff0c\u8fd9\u4e2a\u7b97\u6cd5\u53ea\u6c42\u7684\u6807\u53f7\u4e0d\u8d85\u8fc7 \\(k\\) \u7684\u8282\u70b9\u6784\u6210\u7684\u6700\u5c0f\u73af\uff0c\u4f46\u662f\u4e4b\u540e\u7684 \\(k\\) \u662f\u4f1a\u8003\u8651\u5230\u7684\uff0c\u6240\u4ee5\u7b97\u6cd5\u662f\u6b63\u786e\u7684\u3002 \u5982\u679c\u8981\u8f93\u51fa\u65b9\u6848\u7684\u8bdd\uff0c\u8bb0\u5f55 \\(pos_{i,j}\\) \u8868\u793a\u4f7f \\(dis_{i,j}\\) \u6700\u540e\u53d1\u751f\u66f4\u65b0\u7684 \\(k\\) \uff0c dp \u5b8c\u4e4b\u540e\u641e\u4e00\u4e0b\u9012\u5f52\u8f93\u51fa\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 std :: vector < int > ans_path ; inline void gopath ( int u , int v ){ if ( pos [ u ][ v ] == 0 ) return ; gopath ( u , pos [ u ][ v ]), ans_path . push_back ( pos [ u ][ v ]), gopath ( pos [ u ][ v ], v ); } // go through the path from u to v; signed main (){ cin >> n >> m ; memset ( a , 0x3f , sizeof a ); for ( register int i = 1 ; i <= n ; ++ i ) a [ i ][ i ] = 0 ; for ( register int i = 1 ; i <= m ; ++ i ){ int u , v , w ; cin >> u >> v >> w ; a [ u ][ v ] = min ( a [ u ][ v ], w ), a [ v ][ u ] = a [ u ][ v ]; } memcpy ( dis , a , sizeof a ); int ans = 0x3f3f3f3f3f3f3f3f , tmp = ans ; for ( register int k = 1 ; k <= n ; ++ k ){ for ( register int i = 1 ; i < k ; ++ i ){ // \u6ce8\u610f\u662fdp\u4e4b\u524d\uff0c\u6b64\u65f6 dis \u8fd8\u662f k-1 \u7684\u65f6\u5019\u7684\u72b6\u6001\u3002 for ( register int j = i + 1 ; j < k ; ++ j ){ if ( a [ j ][ k ] < tmp / 2 && a [ k ][ i ] < tmp / 2 && ans > dis [ i ][ j ] + a [ j ][ k ] + a [ k ][ i ]){ ans = dis [ i ][ j ] + a [ j ][ k ] + a [ k ][ i ]; ans_path . clear (), ans_path . push_back ( i ), gopath ( i , j ); ans_path . push_back ( j ), ans_path . push_back ( k ); } // \u4e0d\u5224\u7684\u8bdd a[j][k]+a[k][i] \u6709\u53ef\u80fd\u7206\uff0c\u5bfc\u81f4\u7b54\u6848\u51fa\u9519\u3002 } } // \u66f4\u65b0\u6700\u5c0f\u73af\u53d6min\u7684\u8fc7\u7a0b for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= n ; ++ j ){ if ( dis [ i ][ j ] > dis [ i ][ k ] + dis [ k ][ j ]) pos [ i ][ j ] = k , dis [ i ][ j ] = dis [ i ][ k ] + dis [ k ][ j ]; } } // \u6b63\u5e38\u7684 Floyd } if ( ans == 0x3f3f3f3f3f3f3f3f ) return puts ( \"No solution.\" ), 0 ; for ( auto x : ans_path ) cout << x << \" \" ; return puts ( \"\" ), 0 ; }","title":"Floyd \u5904\u7406\u65e0\u5411\u56fe\u6700\u5c0f\u73af"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#k","text":"\u9996\u5148\u7528\u90bb\u63a5\u77e9\u9635 \\(A\\) \u5b58\u56fe\u3002 \u7136\u540e \\(A[i,j]\\) \u5c31\u53ef\u4ee5\u770b\u505a \\(i \\to j\\) \u7ecf\u8fc7\u6070\u597d\u4e00\u6761\u8fb9\u7684\u6700\u77ed\u8def\u3002 \u8003\u8651\u6c42\u51fa\u7ecf\u8fc7\u6070\u597d\u4e24\u6761\u8fb9\u7684\u6700\u77ed\u8def \\(B\\) \u3002 \u53ef\u4ee5\u53d1\u73b0 \\(B[i,j]=\\min\\limits_{1\\le k \\le n}\\{A[i,k]+A[k,j]\\}\\) \u8fd9\u91cc\u5c31\u662f\u7528\u4e86\u7c7b\u4f3c Floyd \u7684\u679a\u4e3e\u4e2d\u95f4\u70b9\u601d\u60f3\u3002 \u7c7b\u4f3c\u7684\u53ef\u4ee5\u5f97\u5230\u7ecf\u8fc7\u6070\u597d \\(K\\) \u6761\u8fb9\u7684\u6700\u77ed\u8def\u3002 \u8bbe \\(A^{qwq}\\) \u8868\u793a\u7ecf\u8fc7\u6070\u597d \\(qwq\\) \u6761\u8fb9\u7684\u6700\u77ed\u8def\u3002 \u53ef\u4ee5\u5f97\u5230 \\(A^{qwq}[i,j]=\\min\\limits_{1\\le k \\le n}\\{A^p[i,k]+A^q[k,j]\\},qwq=p+q\\) \u53d1\u73b0\u8fd9\u73a9\u610f\u513f\u5c31\u662f\u4e2a\u7c7b\u4f3c\u4e8e\u77e9\u9635\u4e58\u6cd5\u7684\u4e1c\u897f\u3002 \u628a \\(\\sum\\) \u6362\u6210 \\(\\min\\) \uff0c\u628a \\(\\times\\) \u6362\u6210 \\(+\\) \u3002 \u521a\u597d\u8fd9\u4e2a\u4e1c\u897f\u4ecd\u7136\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u77e9\u9635\u5feb\u901f\u5e42 \\(n^3\\log K\\) \u6c42 \\(A^K\\) \u3002","title":"\u7ecf\u8fc7\u6070\u597d K \u6761\u8fb9\u6700\u77ed\u8def"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF/#_3","text":"\u8fd9\u4e2a\u73a9\u610f\u513f Floyd\uff0cSPFA\uff0cDijkstra \u90fd\u662f\u53ef\u4ee5\u505a\u7684\u3002 \u5728\u8dd1\u6700\u77ed\u8def\u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e2a\u6570\u7ec4 \\(cnt[v]\\) \u8868\u793a\u4ece \\(s \\to v\\) \u7684\u6700\u77ed\u8def\u5f84\u6761\u6570\u3002 \u7136\u540e\u6bcf\u6b21\u6700\u77ed\u8def\u88ab\u66f4\u65b0\u7684\u65f6\u5019\u5c31\u66f4\u65b0 \\(cnt\\) \u3002 \u989d\u5916\u7684\uff0c\u5982\u679c\u6700\u77ed\u8def\u957f\u5ea6\u6ca1\u6709\u88ab\u66f4\u65b0\uff0c\u4f46\u662f\u4e09\u89d2\u4e0d\u7b49\u5f0f\u4e2d\u7684 \\(>\\) \u53d8\u6210\u4e86 \\(=\\) \uff0c \u90a3\u4e48\u7ed9 \\(cnt\\) \u52a0\u4e0a\u5f53\u524d\u8f6c\u79fb\u8fc7\u6765\u7684\u70b9\u7684 \\(cnt\\) \u3002 \u8fd9\u4e1c\u897f\u548cDAG\u4e0a\u7684\u8def\u5f84\u8ba1\u6570\u6bd4\u8f83\u50cf\uff0c\u53ea\u4e0d\u8fc7\u6709\u6700\u77ed\u8def\u7684\u9650\u5236\u3002 \u5f53\u7136\uff0c\u8def\u5f84\u6761\u6570\u8fd9\u4e2a\u73a9\u610f\u513f\u662f\u6307\u6570\u7ea7\u522b\u7684\uff0c\u4e00\u822c\u90fd\u4f1a\u8981\u6c42\u53d6\u6a21\u3002 \\(Floyd\\) \u7684\u5b9e\u73b0\u7565\u5fae\u6709\u70b9\u4e0d\u540c\uff0c\u56e0\u4e3a\u662f\u679a\u4e3e\u4e2d\u95f4\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u518d\u7528\u4e00\u6b21\u4e58\u6cd5\u539f\u7406\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 Floyd : ============================================== memset ( dis , 0x3f , sizeof dis ); memset ( cnt , 0 , sizeof cnt ); cin >> n >> m ; for ( int i = 1 ; i <= m ; ++ i ) { int u , v , w ; cin >> u >> v >> w ; dis [ u ][ v ] = dis [ v ][ u ] = min ( dis [ u ][ v ], w ); cnt [ u ][ v ] = cnt [ v ][ u ] = 1 ; } for ( int i = 1 ; i <= n ; ++ i ) dis [ i ][ i ] = 0 ; for ( int k = 1 ; k <= n ; ++ k ) { for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { if ( dis [ i ][ j ] > dis [ i ][ k ] + dis [ k ][ j ]) { dis [ i ][ j ] = dis [ i ][ k ] + dis [ k ][ j ]; cnt [ i ][ j ] = 1l l * cnt [ i ][ k ] * cnt [ k ][ j ]; } else if ( dis [ i ][ j ] == dis [ i ][ k ] + dis [ k ][ j ]) { cnt [ i ][ j ] += 1l l * cnt [ i ][ k ] * cnt [ k ][ j ]; } // \u4e58\u6cd5\u539f\u7406\u8ba1\u6570\u3002 } } } Dijkstra : ============================================== void dijkstra ( int s ) { memset ( vis , false , sizeof vis ); memset ( dis , 0x3f , sizeof dis ); q . push ({ dis [ s ] = 0 , s }), cnt [ 1 ] = 1 ; while ( ! q . empty ()) { int u = q . top (). second ; q . pop (); if ( vis [ u ]) continue ; vis [ u ] = true ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver , w = e [ i ]. w ; if ( dis [ v ] > dis [ u ] + w ) { dis [ v ] = dis [ u ] + w ; cnt [ v ] = cnt [ u ] % mod ; q . push ({ - dis [ v ], v }); } else if ( dis [ v ] == dis [ u ] + w ) { cnt [ v ] = ( cnt [ v ] + cnt [ u ]) % mod ; } } } } int main () { memset ( head , -1 , sizeof head ); memset ( cnt , 0 , sizeof cnt ); cin >> n >> m ; for ( int i = 1 ; i <= m ; ++ i ) { int u , v ; cin >> u >> v ; add ( u , v ), add ( v , u ); } dijkstra ( 1 ); for ( int i = 1 ; i <= n ; ++ i ) { cout << cnt [ i ] << endl ; } return 0 ; }","title":"\u6700\u77ed\u8def\u8ba1\u6570"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/","text":"\u6700\u8fd1\u516c\u5171\u7956\u5148 \u00b6 \u5927\u6982\u5c31\u662f\u7ed9\u4f60\u6811\u4e0a\u7684\u4e24\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u95ee\u4ed6\u4eec\u5171\u540c\u7684\u7956\u5148\u91cc\u6df1\u5ea6\u6700\u5927\u7684\u90a3\u4e00\u4e2a\u3002 \u500d\u589e \u00b6 \u8003\u8651\u8bbe \\(f_{i,j}\\) \u8868\u793a \\(i\\) \u7684 \\(2^j\\) \u7ea7\u7956\u5148\u3002 \u8fd9\u4e2a\u53ef\u4ee5\u9012\u63a8 \u3002 \\(f_{i,j}=f_{f_{i,j-1},j-1}\\) \u3002 \u7136\u540e\u73b0\u5728\u7ed9\u5b9a\u4e00\u4e2a\u8be2\u95ee \\(lca(u,v)\\) \uff0c\u8003\u8651\u628a\u6df1\u5ea6\u8f83\u5927\u7684\u90a3\u4e00\u4e2a\u5f80\u4e0a\u8df3\u5230\u5b83\u7684 \\(2\\) \u7684 \\(\\log_2n,\\log_2n-1,\\dots 0\\) \u7ea7\u7956\u5148\uff08\u6bcf\u4e2a\u90fd\u8bd5\u4e00\u8bd5\uff0c\u5982\u679c\u8fd9\u4e2a\u7956\u5148\u7684\u6df1\u5ea6\u5927\u4e8e\u7b49\u4e8e\u539f\u6765\u6df1\u5ea6\u66f4\u5c0f\u7684\u70b9\uff0c\u5c31\u8df3\u5230\u8fd9\u4e2a\u7956\u5148\uff09\u3002 \u5982\u679c\u6b64\u65f6\u4e24\u4e2a\u8282\u70b9\u91cd\u5408\u4e86\uff0cLCA \u5c31\u662f\u539f\u6765\u6df1\u5ea6\u5c0f\u7684\u8282\u70b9\u3002 \u5426\u5219\u4fdd\u6301\u4e24\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\u4e00\u81f4\uff0c\u7136\u540e\u5404\u81ea\u5f80\u4e0a\u8df3 \\(2\\) \u7684 \\(\\log_2n,\\log_2n-1,\\dots 0\\) \u6b21\u5e42\u6b65\uff0c\u5e76\u4e14\u4fdd\u6301\u4e0a\u8df3\u4e4b\u540e\u4ecd\u7136\u4e0d\u76f8\u9047\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u7ed3\u675f\u4e4b\u540e\uff0c \\(u,v\\) \u5f53\u524d\u7684\u7236\u4eb2\u5fc5\u7136\u76f8\u540c\uff0c\u8fd9\u5c31\u662f\u8981\u6c42\u7684 LCA\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 int dep [ si_n ], f [ si_n ][ 20 ]; inline void dfs ( int u , int fa ){ dep [ u ] = dep [ fa ] + 1 , f [ u ][ 0 ] = fa ; for ( register int i = 1 ; i <= 19 ; -- i ) f [ u ][ i ] = f [ f [ u ][ i -1 ]][ i -1 ]; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs ( v , u ); } } inline void lca ( int x , int y ){ if ( dep [ x ] < dep [ y ]) swap ( x , y ); for ( register int i = 19 ; i >= 0 ; -- i ) if ( dep [ f [ x ][ i ]] >= dep [ y ]) x = f [ x ][ i ]; if ( x == y ) return x ; for ( register int i = 19 ; i >= 0 ; -- i ) if ( f [ x ][ i ] != f [ y ][ i ]) x = f [ x ][ i ], y = f [ y ][ i ]; return f [ x ][ 0 ]; } \u5355\u6b21\u8be2\u95ee \\(\\text{O}(\\log n)\\) \u3002 \u4f46\u662f\u8fd9\u79cd\u65b9\u5f0f\u662f\u66b4\u529b\u8df3\uff0c\u4e5f\u5c31\u662f\u76f4\u63a5\u201c\u8bd5\u201d\u3002 \u7528\u7c7b\u4f3c\u5feb\u901f\u5e42\u7684\u601d\u60f3\uff0c\u76f4\u63a5\u628a\u6570\u5b57\u4e8c\u8fdb\u5236\u62c6\u5206\uff0c\u53ea\u6709\u5f53\u524d\u4f4d \\(i\\) \u4e3a \\(1\\) \u7684\u65f6\u5019 \uff0c\u624d\u8df3 \\(2^i\\) \u7ea7\u7956\u5148\u3002 1 // \u5495\u5495\u5495 Tarjan \u00b6 \u9996\u5148\u79bb\u7ebf\u6240\u6709\u7684 Query\uff0c \u5728\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u65f6\u5019\uff0c\u7ed9\u6bcf\u4e2a\u8282\u70b9\u6253\u4e0a\u4e00\u4e2a\u6807\u8bb0 \u6ca1\u6709\u8bbf\u95ee\u7684\u8282\u70b9 \u5f53\u524d\u6b63\u5728\u8bbf\u95ee\u7684\u5206\u652f\u4e0a\u7684\u8282\u70b9 \u5df2\u7ecf\u8bbf\u95ee\u5b8c\u5e76\u4e14\u56de\u6eaf\u5b8c\u7684\u8282\u70b9 \u5982\u56fe\uff1a \u6211\u4eec\u8003\u8651\u5904\u7406\u6240\u6709\u548c \\(now\\) \u76f8\u5173\u7684\u8be2\u95ee\u3002 \u53d1\u73b0\u6240\u6709 2 \u7c7b\u578b\u7684\u8282\u70b9\u548c \\(now\\) \u7684 LCA \u90fd\u662f 1 \u7c7b\u578b\u7684\u8282\u70b9\u5e76\u4e14\u548c \\(now\\) \u5728\u540c\u4e00\u5206\u652f\uff0c\u6bd4 \\(now\\) \u5148\u8bbf\u95ee\uff1a \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u628a\u8fd9\u4e9b 2 \u7c7b\u578b\u7684\u8282\u70b9\u548c\u5f53\u524d\u5206\u652f\u7684\u8282\u70b9\u5408\u5e76\uff0c\u7136\u540e\u6bcf\u6b21\u8be2\u95ee\u5c31\u80fd\u76f4\u63a5\u5904\u7406\u4e86\u3002 \u8fd9\u4e2a\u5408\u5e76\u548c\u8be2\u95ee\u64cd\u4f5c\u53ef\u4ee5\u5229\u7528 dsu\u3002 \u590d\u6742\u5ea6 \\(\\text{O}(n+m)\\) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #include <bits/stdc++.h> using namespace std ; #define pb push_back const int si_n = 5e5 + 10 ; const int si_m = 5e5 + 10 ; struct Tree { int ver , Next , head ; } e [ si_m << 1 ]; int cnt = 0 ; void add ( int u , int v ){ e [ ++ cnt ]. ver = v , e [ cnt ]. Next = e [ u ]. head ; e [ u ]. head = cnt ; } int pa [ si_n ]; int root ( int x ){ if ( pa [ x ] != x ){ return pa [ x ] = root ( pa [ x ]); } return pa [ x ]; } vector < int > que [ si_n ], pos [ si_n ]; int lca [ si_n ]; bool vis [ si_n ]; int n , q , s ; void tarjan ( int u ){ vis [ u ] = true ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( vis [ v ] == true ) continue ; tarjan ( v ), pa [ v ] = root ( u ); } for ( register int i = 0 ; i < ( int ) que [ u ]. size (); ++ i ){ int v = que [ u ][ i ], po = pos [ u ][ i ]; if ( vis [ v ] == true ) lca [ po ] = root ( v ); } } int main (){ scanf ( \"%d%d%d\" , & n , & q , & s ); for ( register int i = 1 ; i <= n ; ++ i ){ pa [ i ] = i , vis [ i ] = false ; que [ i ]. clear (), pos [ i ]. clear (); } for ( register int i = 1 ; i < n ; ++ i ){ int u , v ; scanf ( \"%d%d\" , & u , & v ); add ( u , v ), add ( v , u ); } for ( register int i = 1 ; i <= q ; ++ i ){ int u , v ; scanf ( \"%d%d\" , & u , & v ); if ( u == v ) lca [ i ] = u ; else { que [ u ]. pb ( v ), que [ v ]. pb ( u ); pos [ u ]. pb ( i ), pos [ v ]. pb ( i ); } } tarjan ( s ); for ( register int i = 1 ; i <= q ; ++ i ){ printf ( \"%d \\n \" , lca [ i ]); } return 0 ; } \u70b9\u5dee\u5206 \u00b6 \u7ed9\u4f60\u4e00\u68f5\u6811 \\(T\\) \uff0c\u4e14 \\(\\forall u \\in T\\) \u90fd\u6709\u4e00\u4e2a\u6743\u503c \\(val[u]\\) \u73b0\u5728\u6709 \\(q\\) \u6b21\u64cd\u4f5c\uff0c\u6bcf\u4e00\u6b21\u64cd\u4f5c \\(\\operatorname{change}(u,v,d)\\) \u9700\u8981\u4f60\u4fee\u6539 \\(u \\to v\\) \u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u7684\u6743\u503c\uff0c\u5373\u4ee4 \\(\\forall val[u]+d,(u\\in \\delta(u,v))\\) \u3002 \u5c06\u4e00\u6761\u6811\u94fe\u62c6\u6210 \\(A:(u,lca(u,v)),B:(v,lca(u,v))\\) \u8fd9\u4e24\u90e8\u5206\u3002 \u8bbe \\(c[u]\\) \u8868\u793a \\([u]\\) \u8fd9\u4e2a\u8282\u70b9\u7684\u589e\u91cf\uff08\u5dee\u5206\u6570\u7ec4\uff09\u3002 \u5bf9\u4e8e \\(A,B\\) \u7684\u7aef\u70b9\u5206\u522b\u5dee\u5206\u4e00\u4e0b\uff1a \\(c[u]=d,c[v]=d,c[lca]=-2\\times d\\) \u3002 \u4f46\u662f\u8fd9\u4e2a \\(\\texttt{LCA}\\) \u672c\u8eab\u5c31\u5728\u6811\u94fe \\(\\delta(u,v)\\) \u4e0a\u3002 \u6240\u4ee5\u5b83\u81ea\u5df1\u4e5f\u8981\u52a0 \\(d\\) \uff0c\u90a3\u4e48 \\(c[u]=d,c[v]=d,c[lca]=-d\\) \u3002 \u56e0\u4e3a\u7236\u8282\u70b9\u7684\u503c\u662f\u4f1a\u88ab\u5b50\u6811\u5f71\u54cd\u7684\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u7ed9 \\(father(lca(u,v))-d\\) \u3002 \u8fb9\u5dee\u5206 \u00b6 P3627 [APIO2009]\u62a2\u63a0\u8ba1\u5212 \u7528\u4e86\u4e00\u4e2a\u601d\u60f3\u53eb\u201c\u70b9\u6743\u5316\u8fb9\u6743\u201d\uff0c\u5728\u8fd9\u91cc\u53cd\u8fc7\u6765\uff0c\u201c\u8fb9\u6743\u5316\u70b9\u6743\u201d\u3002 \u8003\u8651\u4efb\u610f\u7684\u4e00\u6761\u6811\u8fb9 \\((u,v)\\) \uff0c\u4e00\u5b9a\u6ee1\u8db3\u5b83\u8fde\u63a5\u7684\u662f\u7236\u4eb2\u548c\u513f\u5b50\u3002 \u90a3\u4e48\u8fd9\u4e2a\u8fb9\u7684\u201c\u6307\u5411\u201d\u5c31\u6709\u552f\u4e00\u6027\uff0c\u6240\u4ee5\u628a\u6bcf\u4e00\u6761\u6811\u8fb9\u7684\u6743\u503c\u538b\u5230\u5b83\u6307\u5411\u7684\u201c\u513f\u5b50\u8282\u70b9\u201d\u3002 \u7279\u522b\u7684\uff0c\u56e0\u4e3a\u6811\u6839\u6ca1\u6709\u7236\u4eb2\uff0c\u6240\u4ee5\u5b83\u7684\u6743\u503c\u4e3a \\(0\\) \u65e2\u7136\u8fb9\u6743\u5316\u70b9\u6743\u4e86\uff0c\u90a3\u80fd\u4e0d\u80fd\u76f4\u63a5\u8dd1\u70b9\u5dee\u5206\uff1f \u4e0d\u884c\u3002 ( \\(u\\) \u6253\u9519\u6210 \\(x\\) \u4e86\uff09 \u6ce8\u610f\u5230 \\(\\texttt{LCA}\\) \u7684\u6743\u503c\u662f \\(\\delta(lca,root)\\) \u7684\u6743\u503c\uff0c\u6240\u4ee5\u76f8\u5f53\u4e8e\u662f\u5728\u8dd1\u4e00\u4e2a\u53bb\u6389 \\(\\texttt{LCA}\\) \u7684\u70b9\u5dee\u5206\u3002 \u4e8e\u662f\u5c31\u4e0d\u9700\u8981\u8003\u8651 \\(\\texttt{LCA}\\) \u7684\u6743\u503c\u548c\u5b83\u5bf9 \\(father({\\texttt{LCA}})\\) \u7684\u5f71\u54cd\u3002 \u76f4\u63a5 \\(c[u]+d,c[v]+d,c[lca]-2\\times d\\) \u5373\u53ef\u3002","title":"\u6700\u8fd1\u516c\u5171\u7956\u5148"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/#_1","text":"\u5927\u6982\u5c31\u662f\u7ed9\u4f60\u6811\u4e0a\u7684\u4e24\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u95ee\u4ed6\u4eec\u5171\u540c\u7684\u7956\u5148\u91cc\u6df1\u5ea6\u6700\u5927\u7684\u90a3\u4e00\u4e2a\u3002","title":"\u6700\u8fd1\u516c\u5171\u7956\u5148"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/#_2","text":"\u8003\u8651\u8bbe \\(f_{i,j}\\) \u8868\u793a \\(i\\) \u7684 \\(2^j\\) \u7ea7\u7956\u5148\u3002 \u8fd9\u4e2a\u53ef\u4ee5\u9012\u63a8 \u3002 \\(f_{i,j}=f_{f_{i,j-1},j-1}\\) \u3002 \u7136\u540e\u73b0\u5728\u7ed9\u5b9a\u4e00\u4e2a\u8be2\u95ee \\(lca(u,v)\\) \uff0c\u8003\u8651\u628a\u6df1\u5ea6\u8f83\u5927\u7684\u90a3\u4e00\u4e2a\u5f80\u4e0a\u8df3\u5230\u5b83\u7684 \\(2\\) \u7684 \\(\\log_2n,\\log_2n-1,\\dots 0\\) \u7ea7\u7956\u5148\uff08\u6bcf\u4e2a\u90fd\u8bd5\u4e00\u8bd5\uff0c\u5982\u679c\u8fd9\u4e2a\u7956\u5148\u7684\u6df1\u5ea6\u5927\u4e8e\u7b49\u4e8e\u539f\u6765\u6df1\u5ea6\u66f4\u5c0f\u7684\u70b9\uff0c\u5c31\u8df3\u5230\u8fd9\u4e2a\u7956\u5148\uff09\u3002 \u5982\u679c\u6b64\u65f6\u4e24\u4e2a\u8282\u70b9\u91cd\u5408\u4e86\uff0cLCA \u5c31\u662f\u539f\u6765\u6df1\u5ea6\u5c0f\u7684\u8282\u70b9\u3002 \u5426\u5219\u4fdd\u6301\u4e24\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\u4e00\u81f4\uff0c\u7136\u540e\u5404\u81ea\u5f80\u4e0a\u8df3 \\(2\\) \u7684 \\(\\log_2n,\\log_2n-1,\\dots 0\\) \u6b21\u5e42\u6b65\uff0c\u5e76\u4e14\u4fdd\u6301\u4e0a\u8df3\u4e4b\u540e\u4ecd\u7136\u4e0d\u76f8\u9047\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u7ed3\u675f\u4e4b\u540e\uff0c \\(u,v\\) \u5f53\u524d\u7684\u7236\u4eb2\u5fc5\u7136\u76f8\u540c\uff0c\u8fd9\u5c31\u662f\u8981\u6c42\u7684 LCA\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 int dep [ si_n ], f [ si_n ][ 20 ]; inline void dfs ( int u , int fa ){ dep [ u ] = dep [ fa ] + 1 , f [ u ][ 0 ] = fa ; for ( register int i = 1 ; i <= 19 ; -- i ) f [ u ][ i ] = f [ f [ u ][ i -1 ]][ i -1 ]; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs ( v , u ); } } inline void lca ( int x , int y ){ if ( dep [ x ] < dep [ y ]) swap ( x , y ); for ( register int i = 19 ; i >= 0 ; -- i ) if ( dep [ f [ x ][ i ]] >= dep [ y ]) x = f [ x ][ i ]; if ( x == y ) return x ; for ( register int i = 19 ; i >= 0 ; -- i ) if ( f [ x ][ i ] != f [ y ][ i ]) x = f [ x ][ i ], y = f [ y ][ i ]; return f [ x ][ 0 ]; } \u5355\u6b21\u8be2\u95ee \\(\\text{O}(\\log n)\\) \u3002 \u4f46\u662f\u8fd9\u79cd\u65b9\u5f0f\u662f\u66b4\u529b\u8df3\uff0c\u4e5f\u5c31\u662f\u76f4\u63a5\u201c\u8bd5\u201d\u3002 \u7528\u7c7b\u4f3c\u5feb\u901f\u5e42\u7684\u601d\u60f3\uff0c\u76f4\u63a5\u628a\u6570\u5b57\u4e8c\u8fdb\u5236\u62c6\u5206\uff0c\u53ea\u6709\u5f53\u524d\u4f4d \\(i\\) \u4e3a \\(1\\) \u7684\u65f6\u5019 \uff0c\u624d\u8df3 \\(2^i\\) \u7ea7\u7956\u5148\u3002 1 // \u5495\u5495\u5495","title":"\u500d\u589e"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/#tarjan","text":"\u9996\u5148\u79bb\u7ebf\u6240\u6709\u7684 Query\uff0c \u5728\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u65f6\u5019\uff0c\u7ed9\u6bcf\u4e2a\u8282\u70b9\u6253\u4e0a\u4e00\u4e2a\u6807\u8bb0 \u6ca1\u6709\u8bbf\u95ee\u7684\u8282\u70b9 \u5f53\u524d\u6b63\u5728\u8bbf\u95ee\u7684\u5206\u652f\u4e0a\u7684\u8282\u70b9 \u5df2\u7ecf\u8bbf\u95ee\u5b8c\u5e76\u4e14\u56de\u6eaf\u5b8c\u7684\u8282\u70b9 \u5982\u56fe\uff1a \u6211\u4eec\u8003\u8651\u5904\u7406\u6240\u6709\u548c \\(now\\) \u76f8\u5173\u7684\u8be2\u95ee\u3002 \u53d1\u73b0\u6240\u6709 2 \u7c7b\u578b\u7684\u8282\u70b9\u548c \\(now\\) \u7684 LCA \u90fd\u662f 1 \u7c7b\u578b\u7684\u8282\u70b9\u5e76\u4e14\u548c \\(now\\) \u5728\u540c\u4e00\u5206\u652f\uff0c\u6bd4 \\(now\\) \u5148\u8bbf\u95ee\uff1a \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u628a\u8fd9\u4e9b 2 \u7c7b\u578b\u7684\u8282\u70b9\u548c\u5f53\u524d\u5206\u652f\u7684\u8282\u70b9\u5408\u5e76\uff0c\u7136\u540e\u6bcf\u6b21\u8be2\u95ee\u5c31\u80fd\u76f4\u63a5\u5904\u7406\u4e86\u3002 \u8fd9\u4e2a\u5408\u5e76\u548c\u8be2\u95ee\u64cd\u4f5c\u53ef\u4ee5\u5229\u7528 dsu\u3002 \u590d\u6742\u5ea6 \\(\\text{O}(n+m)\\) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #include <bits/stdc++.h> using namespace std ; #define pb push_back const int si_n = 5e5 + 10 ; const int si_m = 5e5 + 10 ; struct Tree { int ver , Next , head ; } e [ si_m << 1 ]; int cnt = 0 ; void add ( int u , int v ){ e [ ++ cnt ]. ver = v , e [ cnt ]. Next = e [ u ]. head ; e [ u ]. head = cnt ; } int pa [ si_n ]; int root ( int x ){ if ( pa [ x ] != x ){ return pa [ x ] = root ( pa [ x ]); } return pa [ x ]; } vector < int > que [ si_n ], pos [ si_n ]; int lca [ si_n ]; bool vis [ si_n ]; int n , q , s ; void tarjan ( int u ){ vis [ u ] = true ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( vis [ v ] == true ) continue ; tarjan ( v ), pa [ v ] = root ( u ); } for ( register int i = 0 ; i < ( int ) que [ u ]. size (); ++ i ){ int v = que [ u ][ i ], po = pos [ u ][ i ]; if ( vis [ v ] == true ) lca [ po ] = root ( v ); } } int main (){ scanf ( \"%d%d%d\" , & n , & q , & s ); for ( register int i = 1 ; i <= n ; ++ i ){ pa [ i ] = i , vis [ i ] = false ; que [ i ]. clear (), pos [ i ]. clear (); } for ( register int i = 1 ; i < n ; ++ i ){ int u , v ; scanf ( \"%d%d\" , & u , & v ); add ( u , v ), add ( v , u ); } for ( register int i = 1 ; i <= q ; ++ i ){ int u , v ; scanf ( \"%d%d\" , & u , & v ); if ( u == v ) lca [ i ] = u ; else { que [ u ]. pb ( v ), que [ v ]. pb ( u ); pos [ u ]. pb ( i ), pos [ v ]. pb ( i ); } } tarjan ( s ); for ( register int i = 1 ; i <= q ; ++ i ){ printf ( \"%d \\n \" , lca [ i ]); } return 0 ; }","title":"Tarjan"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/#_3","text":"\u7ed9\u4f60\u4e00\u68f5\u6811 \\(T\\) \uff0c\u4e14 \\(\\forall u \\in T\\) \u90fd\u6709\u4e00\u4e2a\u6743\u503c \\(val[u]\\) \u73b0\u5728\u6709 \\(q\\) \u6b21\u64cd\u4f5c\uff0c\u6bcf\u4e00\u6b21\u64cd\u4f5c \\(\\operatorname{change}(u,v,d)\\) \u9700\u8981\u4f60\u4fee\u6539 \\(u \\to v\\) \u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u7684\u6743\u503c\uff0c\u5373\u4ee4 \\(\\forall val[u]+d,(u\\in \\delta(u,v))\\) \u3002 \u5c06\u4e00\u6761\u6811\u94fe\u62c6\u6210 \\(A:(u,lca(u,v)),B:(v,lca(u,v))\\) \u8fd9\u4e24\u90e8\u5206\u3002 \u8bbe \\(c[u]\\) \u8868\u793a \\([u]\\) \u8fd9\u4e2a\u8282\u70b9\u7684\u589e\u91cf\uff08\u5dee\u5206\u6570\u7ec4\uff09\u3002 \u5bf9\u4e8e \\(A,B\\) \u7684\u7aef\u70b9\u5206\u522b\u5dee\u5206\u4e00\u4e0b\uff1a \\(c[u]=d,c[v]=d,c[lca]=-2\\times d\\) \u3002 \u4f46\u662f\u8fd9\u4e2a \\(\\texttt{LCA}\\) \u672c\u8eab\u5c31\u5728\u6811\u94fe \\(\\delta(u,v)\\) \u4e0a\u3002 \u6240\u4ee5\u5b83\u81ea\u5df1\u4e5f\u8981\u52a0 \\(d\\) \uff0c\u90a3\u4e48 \\(c[u]=d,c[v]=d,c[lca]=-d\\) \u3002 \u56e0\u4e3a\u7236\u8282\u70b9\u7684\u503c\u662f\u4f1a\u88ab\u5b50\u6811\u5f71\u54cd\u7684\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u7ed9 \\(father(lca(u,v))-d\\) \u3002","title":"\u70b9\u5dee\u5206"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/#_4","text":"P3627 [APIO2009]\u62a2\u63a0\u8ba1\u5212 \u7528\u4e86\u4e00\u4e2a\u601d\u60f3\u53eb\u201c\u70b9\u6743\u5316\u8fb9\u6743\u201d\uff0c\u5728\u8fd9\u91cc\u53cd\u8fc7\u6765\uff0c\u201c\u8fb9\u6743\u5316\u70b9\u6743\u201d\u3002 \u8003\u8651\u4efb\u610f\u7684\u4e00\u6761\u6811\u8fb9 \\((u,v)\\) \uff0c\u4e00\u5b9a\u6ee1\u8db3\u5b83\u8fde\u63a5\u7684\u662f\u7236\u4eb2\u548c\u513f\u5b50\u3002 \u90a3\u4e48\u8fd9\u4e2a\u8fb9\u7684\u201c\u6307\u5411\u201d\u5c31\u6709\u552f\u4e00\u6027\uff0c\u6240\u4ee5\u628a\u6bcf\u4e00\u6761\u6811\u8fb9\u7684\u6743\u503c\u538b\u5230\u5b83\u6307\u5411\u7684\u201c\u513f\u5b50\u8282\u70b9\u201d\u3002 \u7279\u522b\u7684\uff0c\u56e0\u4e3a\u6811\u6839\u6ca1\u6709\u7236\u4eb2\uff0c\u6240\u4ee5\u5b83\u7684\u6743\u503c\u4e3a \\(0\\) \u65e2\u7136\u8fb9\u6743\u5316\u70b9\u6743\u4e86\uff0c\u90a3\u80fd\u4e0d\u80fd\u76f4\u63a5\u8dd1\u70b9\u5dee\u5206\uff1f \u4e0d\u884c\u3002 ( \\(u\\) \u6253\u9519\u6210 \\(x\\) \u4e86\uff09 \u6ce8\u610f\u5230 \\(\\texttt{LCA}\\) \u7684\u6743\u503c\u662f \\(\\delta(lca,root)\\) \u7684\u6743\u503c\uff0c\u6240\u4ee5\u76f8\u5f53\u4e8e\u662f\u5728\u8dd1\u4e00\u4e2a\u53bb\u6389 \\(\\texttt{LCA}\\) \u7684\u70b9\u5dee\u5206\u3002 \u4e8e\u662f\u5c31\u4e0d\u9700\u8981\u8003\u8651 \\(\\texttt{LCA}\\) \u7684\u6743\u503c\u548c\u5b83\u5bf9 \\(father({\\texttt{LCA}})\\) \u7684\u5f71\u54cd\u3002 \u76f4\u63a5 \\(c[u]+d,c[v]+d,c[lca]-2\\times d\\) \u5373\u53ef\u3002","title":"\u8fb9\u5dee\u5206"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E7%AE%80%E5%8D%95%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/","text":"\u62d3\u6251\u6392\u5e8f \u00b6 \u7528\u6765\u7ed9\u4e00\u4e2a DAG \u6392\u5e8f\u3002 \u6392\u5e8f\u8fc7\u540e\uff0c\u5bf9\u4e8e\u6240\u6709\u6709\u5411\u8fb9 \\((u\\to v)\\) \u6ee1\u8db3\uff0c \\(v\\) \u4e00\u5b9a\u5728 \\(u\\) \u7684\u540e\u9762\u3002 \u505a\u6cd5\u5f88\u7b80\u5355\uff0c\u5148\u628a\u6240\u6709 \\(0\\) \u5165\u5ea6\u7684\u70b9\u5165\u961f\u3002 \u7136\u540e\u505a\u4e00\u4e2a\u7c7b\u4f3c BFS \u7684\u8fc7\u7a0b\uff0c\u8fc7\u7a0b\u5f53\u4e2d\u8981\u8bb0\u5f97\u5220\u8fb9\u548c\u70b9\uff0c\u5982\u679c\u51fa\u73b0\u4e86\u65b0\u7684 \\(0\\) \u5165\u5ea6\u70b9\uff0c\u5c31\u5165\u961f\u3002 \u5728\u5224\u5b9a\u4e25\u683c\u504f\u5e8f\u8fd9\u79cd\u5bf9\u5e94 DAG \u7684\u5173\u7cfb\u6210\u4e0d\u6210\u7acb\u7684\u65f6\u5019\u4e5f\u53ef\u4ee5\u4f7f\u7528\u62d3\u6251\u6392\u5e8f\u5224\u5b9a\u548c\u6784\u9020\u89e3\u3002 \uff08\u5982\u679c\u6709\u73af\u5c31\u662f\u65e0\u89e3\uff0c\u5bf9\u5e94\u5230\u62d3\u6251\u6392\u5e8f\u5c31\u662f\u6700\u540e\u59cb\u7ec8\u5b58\u5728\u975e \\(0\\) \u5165\u5ea6\u70b9\u3002\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 #include <bits/stdc++.h> using namespace std ; const int si = 100010 ; int n /*\u8fb9\u6570*/ , m /*\u70b9\u6570*/ ; vector < int > g [ si ]; //\u90bb\u63a5\u8868\u5b58\u56fe int deg [ si ]; //\u5165\u5ea6 int ord [ si ]; //\u62d3\u6251\u5e8f\uff08\u4e00\u822c\u5b83\u7684\u53cd\u5e8f\u7528\u6765\u8f6c\u79fbDP\uff09 int cnt ; queue < int > q ; int main (){ cin >> n >> m ; for ( register int i = 1 , x , y ; i <= m ; ++ i ){ cin >> x >> y ; g [ x ]. push_back ( y ); deg [ y ] ++ ; //\u5165\u5ea6\u52a0\u4e00 } for ( register int i = 1 ; i <= n ; ++ i ){ if ( ! deg [ i ]){ q . push ( i ); //\u5165\u5ea6\u4e3a0\u5165\u961f } } while ( ! q . empty ()){ register int x , y ; x = q . front (); //\u53d6\u51fa q . pop (); ord [ ++ cnt ] = x ; //\u8bb0\u5f55\u7b54\u6848 for ( register int i = 0 , to ; i < g [ x ]. size (); ++ i ){ to = g [ x ][ i ]; deg [ to ] -- ; if ( ! deg [ to ]){ q . push ( to ); } } //\u5220\u9664\u70b9\u548c\u8fb9 } return 0 ; } \u62d3\u6251\u5e8f\u8fd8\u53ef\u4ee5\u7528\u6765\u8f6c\u79fb DP\u3002 \u4e00\u822c\u8f6c\u79fb\u7684\u65f6\u5019\u4e0d\u662f\u627e\u4e0a\u4e00\u4e2a\uff08\u524d\u9a71\uff09\uff0c\u800c\u662f\u4ece\u5f53\u524d\u7684\u63a8\u5230\u540e\u4e00\u4e2a\uff08\u540e\u7ee7\uff09\u3002 \u6309\u62d3\u6251\u5e8f\u679a\u4e3e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u518d\u679a\u4e3e\u5b83\u7684\u6bcf\u4e00\u4e2a\u51fa\u8fb9\uff0c\u8fdb\u884c\u9012\u63a8\u5373\u53ef\u3002 \u6b27\u62c9\u8def \u00b6 \u5c31\u662f\u4e00\u7b14\u753b\u95ee\u9898\u3002 \u6709\u5411\u8054\u901a\u56fe\u5b58\u5728\u6b27\u62c9\u8def\u7684\u5145\u8981\u6761\u4ef6 \u00b6 \u8981\u4e48\u6240\u6709\u70b9\u7684\u51fa\u5ea6\u5747\u7b49\u4e8e\u5165\u5ea6 \u8981\u4e48\u9664\u4e86\u4e24\u4e2a\u70b9\u4e4b\u5916\uff0c\u5176\u4f59\u6240\u6709\u70b9\u7684\u51fa\u5ea6\u5747\u7b49\u4e8e\u5165\u5ea6 \u3002 \u5269\u4f59\u7684\u4e24\u4e2a\u70b9:\u4e00\u4e2a\u6ee1\u8db3\u51fa\u5ea6\u51cf\u53bb\u5165\u5ea6\u7b49\u4e8e \\(1\\) (\u8d77\u70b9) \uff0c\u4e00\u4e2a\u6ee1\u8db3\u5165\u5ea6\u51cf\u53bb\u51fa\u5ea6\u7b49\u4e8e \\(1\\) (\u7ec8\u70b9)\u3002 \u65e0\u5411\u8054\u901a\u56fe\u5b58\u5728\u6b27\u62c9\u8def\u7684\u5145\u8981\u6761\u4ef6 \u00b6 \u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\u53ea\u80fd\u67090\u62162\u4e2a\u3002 \u6b27\u62c9\u56de\u8def \u00b6 \u5c31\u662f\u4e00\u7b14\u753b\u4e14\u8981\u6c42\u56de\u5230\u8d77\u70b9\u3002 \u6709\u5411\u8054\u901a\u56fe\u5b58\u5728\u6b27\u62c9\u56de\u8def\u7684\u5145\u8981\u6761\u4ef6 \u00b6 \u6240\u6709\u70b9\u7684\u51fa\u5ea6\u5747\u7b49\u4e8e\u5165\u5ea6\u3002 \u65e0\u5411\u8054\u901a\u56fe\u5b58\u5728\u6b27\u62c9\u56de\u8def\u7684\u5145\u8981\u6761\u4ef6 \u00b6 \u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\u53ea\u80fd\u67090\u4e2a\u3002 \u5177\u4f53\u65b9\u6848 \u00b6 \u7528 dfs \u5c31\u884c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 std :: stack < int > s ; inline void dfs ( int u ){ for ( register int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( ! vis [ i ]){ // \u5f53\u524d\u8fb9\u6ca1\u6709\u8bbf\u95ee\u8fc7 vis [ i ] = true ; dfs ( v ), s . push ( v ) } } } // in main() dfs ( 1 ); // \u56e0\u4e3a\u6709\u6b27\u62c9\u56de\u8def\uff0c\u6240\u4ee5\u5176\u5b9e\u4ece\u54ea\u4e2a\u70b9\u5f00\u59cb\u90fd\u4e00\u6837\u3002 vector < int > ans ; while ( ! s . empty ()) ans . push_back ( s . top ()), s . pop (); reverse ( ans . begin (), ans . end ()); for ( auto x : ans ) cout << x << \" \" ; // \u5012\u5e8f\u8f93\u51fa\u3002 \u6b27\u62c9\u8def\u53ef\u80fd\u8981\u6bcf\u4e2a\u70b9 dfs \u4e00\u8fb9\u7136\u540e\u770b\u662f\u4e0d\u662f\u8bbf\u95ee\u5b8c\u4e86\uff1f","title":"\u7b80\u5355\u56fe\u8bba\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E7%AE%80%E5%8D%95%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/#_1","text":"\u7528\u6765\u7ed9\u4e00\u4e2a DAG \u6392\u5e8f\u3002 \u6392\u5e8f\u8fc7\u540e\uff0c\u5bf9\u4e8e\u6240\u6709\u6709\u5411\u8fb9 \\((u\\to v)\\) \u6ee1\u8db3\uff0c \\(v\\) \u4e00\u5b9a\u5728 \\(u\\) \u7684\u540e\u9762\u3002 \u505a\u6cd5\u5f88\u7b80\u5355\uff0c\u5148\u628a\u6240\u6709 \\(0\\) \u5165\u5ea6\u7684\u70b9\u5165\u961f\u3002 \u7136\u540e\u505a\u4e00\u4e2a\u7c7b\u4f3c BFS \u7684\u8fc7\u7a0b\uff0c\u8fc7\u7a0b\u5f53\u4e2d\u8981\u8bb0\u5f97\u5220\u8fb9\u548c\u70b9\uff0c\u5982\u679c\u51fa\u73b0\u4e86\u65b0\u7684 \\(0\\) \u5165\u5ea6\u70b9\uff0c\u5c31\u5165\u961f\u3002 \u5728\u5224\u5b9a\u4e25\u683c\u504f\u5e8f\u8fd9\u79cd\u5bf9\u5e94 DAG \u7684\u5173\u7cfb\u6210\u4e0d\u6210\u7acb\u7684\u65f6\u5019\u4e5f\u53ef\u4ee5\u4f7f\u7528\u62d3\u6251\u6392\u5e8f\u5224\u5b9a\u548c\u6784\u9020\u89e3\u3002 \uff08\u5982\u679c\u6709\u73af\u5c31\u662f\u65e0\u89e3\uff0c\u5bf9\u5e94\u5230\u62d3\u6251\u6392\u5e8f\u5c31\u662f\u6700\u540e\u59cb\u7ec8\u5b58\u5728\u975e \\(0\\) \u5165\u5ea6\u70b9\u3002\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 #include <bits/stdc++.h> using namespace std ; const int si = 100010 ; int n /*\u8fb9\u6570*/ , m /*\u70b9\u6570*/ ; vector < int > g [ si ]; //\u90bb\u63a5\u8868\u5b58\u56fe int deg [ si ]; //\u5165\u5ea6 int ord [ si ]; //\u62d3\u6251\u5e8f\uff08\u4e00\u822c\u5b83\u7684\u53cd\u5e8f\u7528\u6765\u8f6c\u79fbDP\uff09 int cnt ; queue < int > q ; int main (){ cin >> n >> m ; for ( register int i = 1 , x , y ; i <= m ; ++ i ){ cin >> x >> y ; g [ x ]. push_back ( y ); deg [ y ] ++ ; //\u5165\u5ea6\u52a0\u4e00 } for ( register int i = 1 ; i <= n ; ++ i ){ if ( ! deg [ i ]){ q . push ( i ); //\u5165\u5ea6\u4e3a0\u5165\u961f } } while ( ! q . empty ()){ register int x , y ; x = q . front (); //\u53d6\u51fa q . pop (); ord [ ++ cnt ] = x ; //\u8bb0\u5f55\u7b54\u6848 for ( register int i = 0 , to ; i < g [ x ]. size (); ++ i ){ to = g [ x ][ i ]; deg [ to ] -- ; if ( ! deg [ to ]){ q . push ( to ); } } //\u5220\u9664\u70b9\u548c\u8fb9 } return 0 ; } \u62d3\u6251\u5e8f\u8fd8\u53ef\u4ee5\u7528\u6765\u8f6c\u79fb DP\u3002 \u4e00\u822c\u8f6c\u79fb\u7684\u65f6\u5019\u4e0d\u662f\u627e\u4e0a\u4e00\u4e2a\uff08\u524d\u9a71\uff09\uff0c\u800c\u662f\u4ece\u5f53\u524d\u7684\u63a8\u5230\u540e\u4e00\u4e2a\uff08\u540e\u7ee7\uff09\u3002 \u6309\u62d3\u6251\u5e8f\u679a\u4e3e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u518d\u679a\u4e3e\u5b83\u7684\u6bcf\u4e00\u4e2a\u51fa\u8fb9\uff0c\u8fdb\u884c\u9012\u63a8\u5373\u53ef\u3002","title":"\u62d3\u6251\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E7%AE%80%E5%8D%95%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/#_2","text":"\u5c31\u662f\u4e00\u7b14\u753b\u95ee\u9898\u3002","title":"\u6b27\u62c9\u8def"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E7%AE%80%E5%8D%95%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/#_3","text":"\u8981\u4e48\u6240\u6709\u70b9\u7684\u51fa\u5ea6\u5747\u7b49\u4e8e\u5165\u5ea6 \u8981\u4e48\u9664\u4e86\u4e24\u4e2a\u70b9\u4e4b\u5916\uff0c\u5176\u4f59\u6240\u6709\u70b9\u7684\u51fa\u5ea6\u5747\u7b49\u4e8e\u5165\u5ea6 \u3002 \u5269\u4f59\u7684\u4e24\u4e2a\u70b9:\u4e00\u4e2a\u6ee1\u8db3\u51fa\u5ea6\u51cf\u53bb\u5165\u5ea6\u7b49\u4e8e \\(1\\) (\u8d77\u70b9) \uff0c\u4e00\u4e2a\u6ee1\u8db3\u5165\u5ea6\u51cf\u53bb\u51fa\u5ea6\u7b49\u4e8e \\(1\\) (\u7ec8\u70b9)\u3002","title":"\u6709\u5411\u8054\u901a\u56fe\u5b58\u5728\u6b27\u62c9\u8def\u7684\u5145\u8981\u6761\u4ef6"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E7%AE%80%E5%8D%95%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/#_4","text":"\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\u53ea\u80fd\u67090\u62162\u4e2a\u3002","title":"\u65e0\u5411\u8054\u901a\u56fe\u5b58\u5728\u6b27\u62c9\u8def\u7684\u5145\u8981\u6761\u4ef6"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E7%AE%80%E5%8D%95%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/#_5","text":"\u5c31\u662f\u4e00\u7b14\u753b\u4e14\u8981\u6c42\u56de\u5230\u8d77\u70b9\u3002","title":"\u6b27\u62c9\u56de\u8def"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E7%AE%80%E5%8D%95%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/#_6","text":"\u6240\u6709\u70b9\u7684\u51fa\u5ea6\u5747\u7b49\u4e8e\u5165\u5ea6\u3002","title":"\u6709\u5411\u8054\u901a\u56fe\u5b58\u5728\u6b27\u62c9\u56de\u8def\u7684\u5145\u8981\u6761\u4ef6"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E7%AE%80%E5%8D%95%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/#_7","text":"\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\u53ea\u80fd\u67090\u4e2a\u3002","title":"\u65e0\u5411\u8054\u901a\u56fe\u5b58\u5728\u6b27\u62c9\u56de\u8def\u7684\u5145\u8981\u6761\u4ef6"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E7%AE%80%E5%8D%95%E5%9B%BE%E8%AE%BA%E9%97%AE%E9%A2%98/#_8","text":"\u7528 dfs \u5c31\u884c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 std :: stack < int > s ; inline void dfs ( int u ){ for ( register int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( ! vis [ i ]){ // \u5f53\u524d\u8fb9\u6ca1\u6709\u8bbf\u95ee\u8fc7 vis [ i ] = true ; dfs ( v ), s . push ( v ) } } } // in main() dfs ( 1 ); // \u56e0\u4e3a\u6709\u6b27\u62c9\u56de\u8def\uff0c\u6240\u4ee5\u5176\u5b9e\u4ece\u54ea\u4e2a\u70b9\u5f00\u59cb\u90fd\u4e00\u6837\u3002 vector < int > ans ; while ( ! s . empty ()) ans . push_back ( s . top ()), s . pop (); reverse ( ans . begin (), ans . end ()); for ( auto x : ans ) cout << x << \" \" ; // \u5012\u5e8f\u8f93\u51fa\u3002 \u6b27\u62c9\u8def\u53ef\u80fd\u8981\u6bcf\u4e2a\u70b9 dfs \u4e00\u8fb9\u7136\u540e\u770b\u662f\u4e0d\u662f\u8bbf\u95ee\u5b8c\u4e86\uff1f","title":"\u5177\u4f53\u65b9\u6848"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E8%B4%9F%E7%8E%AF%E5%92%8C%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F/","text":"\u8d1f\u73af/\u5dee\u5206\u7ea6\u675f \u00b6 \u8d1f\u73af \u00b6 \u5927\u6982\u5c31\u662f\u56fe\u4e0a\u7684\u4e00\u4e2a\u73af\uff0c\u73af\u4e0a\u6240\u6709\u8fb9\u7684\u6743\u503c\u4e4b\u548c\u662f\u8d1f\u6570\u3002 \u6b63\u5e38\u8dd1\u6700\u77ed\u8def\u7684\u8bdd\u5c31\u4f1a\u5728\u4e0a\u9762\u65e0\u9650\u8f6c\u4e0b\u53bb\u3002 \u5904\u7406\u7684\u65f6\u5019\u53ef\u4ee5\u5229\u7528 Bellmanford \u548c SPFA \u7684\u6027\u8d28\u6765\u5224\u65ad\u3002 \u73b0\u5728\u5728\u6b63\u5e38\u7684\u6700\u77ed\u8def\u4e0a\u7528\u4e0b\u9762\u7684\u4e24\u79cd\u65b9\u5f0f\u4e4b\u4e00\u8fdb\u884c\u5224\u5b9a\uff1a \u5982\u679c\u6709\u4e00\u4e2a\u70b9\u88ab\u8fed\u4ee3\u4e86\u4e0d\u5c11\u4e8e \\(n\\) \u6b21\uff08\u5165\u961f\u4e0d\u5c11\u4e8e \\(n\\) \u6b21\uff09\uff0c\u90a3\u4e48\u56fe\u4e2d\u5fc5\u7136\u5b58\u5728\u8d1f\u73af\u3002 \u5982\u679c\u6e90\u70b9\u5230\u67d0\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u6709\u4e0d\u5c11\u4e8e \\(n\\) \u6761\u8fb9\uff0c\u90a3\u4e48\u56fe\u4e2d\u5fc5\u7136\u5b58\u5728\u8d1f\u73af\u3002 1 \u5f88\u597d\u7406\u89e3\uff0c\u88ab\u5165\u961f\u4e86\u4e0d\u5c11\u4e8e \\(n\\) \u6b21\uff0c\u5c31\u8bf4\u660e\u65e0\u8bba\u5982\u4f55\u8fed\u4ee3\uff0c\u59cb\u7ec8\u5b58\u5728\u81f3\u5c11\u4e00\u6761\u8fb9\u6ee1\u8db3\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\uff0c\u5728\u6700\u77ed\u8def\u5f53\u4e2d\u5bf9\u5e94\u7684\u5c31\u662f\u8d1f\u73af\u3002 2 \u4e5f\u5dee\u4e0d\u591a\uff0c\u4e00\u4e2a \\(n\\) \u4e2a\u70b9\uff0c \\(n\\) \u6761\u8fb9\u7684\u8054\u901a\u56fe\u5fc5\u7136\u662f\u5b58\u5728\u73af\u7684\uff08\u597d\u50cf\u63cf\u8ff0\u6709\u70b9\u95ee\u9898\uff09\uff0c\u6700\u77ed\u8def\u662f\u4e2a\u73af\uff0c\u90a3\u4e48\u5fc5\u7136\u662f\u51fa\u73b0\u4e86\u8d1f\u73af\u3002 \u901a\u5e38\u6765\u8bf4\u7b2c\u4e8c\u79cd\u505a\u6cd5\u6548\u7387\u66f4\u9ad8\uff0c\u6bd4\u5982 1 1 -> 2 , 2 -> 3 , 3 -> 4 , 4 -> 5 , ..., n -1 -> n , n -> 1 \u8fd9\u79cd\u56fe\uff0c1 \u7684\u505a\u6cd5\u5c31\u8981\u8fed\u4ee3 \\(\\text{O}(n^2)\\) \u7ea7\u522b\u6b21\uff0c2 \u53ea\u9700\u8981 \\(n\\) \u6b21\u3002 \u8fd8\u6709\u4e00\u79cd\u4f18\u5316\u662f\u628a std::queue \u6362\u6210 std::stack \u3002 \u53e6\u5916\u4e00\u79cd \u4e0d\u4e00\u5b9a\u6b63\u786e \u7684\u5361\u65f6 trick \u662f\uff0c\u5f53\u6240\u6709\u8282\u70b9\u7684\u603b\u5165\u961f\u6b21\u6570\u8d85\u8fc7\u67d0\u4e2a\u8bbe\u5b9a\u503c\u7684\u65f6\u5019\uff0c\u5c31\u76f4\u63a5 \u8ba4\u4e3a \u56fe\u4e2d\u5b58\u5728\u8d1f\u73af\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include <bits/stdc++.h> using namespace std ; constexpr int si_n = 5e2 + 10 ; constexpr int si_m = 5e3 + 2e2 + 10 ; int n , m , q ; int T , tot = 0 ; struct Edge { int head , Next , ver , w ; } e [ si_m ]; inline void add ( int u , int v , int w ){ e [ ++ tot ]. ver = v , e [ tot ]. Next = e [ u ]. head , e [ u ]. head = tot , e [ tot ]. w = w ; } int dis [ si_n ], cnt [ si_n ]; bool vis [ si_n ]; std :: queue < int > Q ; inline bool spfa ( int s ){ memset ( dis , 0 , sizeof dis ), memset ( cnt , 0 , sizeof cnt ), memset ( vis , false , sizeof vis ); for ( register int i = 1 ; i <= n ; ++ i ){ Q . push ( i ), vis [ i ] = true ; } cnt [ s ] = 0 ; // \u5168\u90e8\u5165\u961f\uff0c\u76f8\u5f53\u4e8e\u5efa\u7acb\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\u3002 while ( ! Q . empty ()){ int u = Q . front (); Q . pop (); vis [ u ] = false ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( dis [ v ] > dis [ u ] + w ){ dis [ v ] = dis [ u ] + w ; cnt [ v ] = cnt [ u ] + 1 ; if ( cnt [ v ] >= n ) return true ; if ( ! vis [ v ]) Q . push ( v ), vis [ v ] = true ; } } } return false ; } \u8fd8\u6709\uff0c\u5982\u679c\u53ea\u662f\u5224\u5b9a\u8d1f\u73af\u7684\u8bdd\uff0c \\(dis\\) \u521d\u59cb\u5316\u6210\u591a\u5c11\u90fd\u662f\u6ca1\u6709\u95ee\u9898\u7684\u3002 \u6362\u6210\u5224\u65ad\u6b63\u73af\u7684\u8bdd\uff0c\u6c42\u6700\u957f\u8def\u5373\u53ef\u3002 \u5dee\u5206\u7ea6\u675f \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u4e0d\u7b49\u5f0f\u7ec4\uff0c\u6bcf\u4e2a\u4e0d\u7b49\u5f0f\u5f62\u5982 \\(x_i \\le x_j +C_k\\) \uff0c\u5176\u4e2d \\(C_k\\) \u662f\u5e38\u6570\uff08\u6b63\u8d1f\u5747\u53ef\uff09\uff0c \\(i,j\\) \u662f\u81ea\u53d8\u91cf\u3002 \u95ee\u4e00\u7ec4\u53ef\u884c\u89e3 \\(x_1,x_2 \\dots x_n\\) \u3002 \u4e0d\u7b49\u5f0f\u957f\u7684\u5f88\u50cf\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\uff0c\u6240\u4ee5\u8003\u8651\u5229\u7528\u56fe\u8bba\u5206\u6790\u3002 \u6bd4\u5982 \\(x_i\\le x_j +C_k\\) \uff0c\u53ef\u4ee5\u770b\u4f5c \\(j\\to i\\) \u7684\u8def\u5f84\u4e0a\u6709\u4e00\u6761\u6743\u503c\u662f \\(C_k\\) \u7684\u8fb9\u3002 \u6700\u7ec8\u6ee1\u8db3\u6761\u4ef6\u65f6\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u6240\u6709\u7c7b\u4f3c \\(x_i > x_j+C_k\\) \u7684\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\u90fd\u4e0d\u6210\u7acb\uff0c\u4e5f\u5c31\u662f\u6c42\u5b8c\u6700\u77ed\u8def\u4e4b\u540e\u7684\u60c5\u51b5\u3002 \u6b64\u65f6\uff0c\u4ece\u6e90\u70b9\u51fa\u53d1\u5230\u6bcf\u4e2a\u70b9\u7684 \\(dis_i\\) \u5c31\u662f\u5bf9\u5e94\u7684 \\(x_i\\) \uff0c \\(dis\\) \u5c31\u662f\u4e00\u7ec4\u53ef\u884c\u89e3\u3002 \u5982\u679c\u56fe\u4e2d\u5b58\u5728\u8d1f\u73af\uff0c\u90a3\u4e48\u5728\u73af\u4e0a\u8f6c\u4e00\u5708\u4e4b\u540e\u5fc5\u7136\u4f1a\u51fa\u73b0 \\(x_i \\le x_i +\\sum C_k , \\sum C_k <0\\) \u7684\u60c5\u51b5\uff0c\u6b64\u65f6\u77db\u76fe\uff08\u8fd9\u4e2a\u4e0d\u7b49\u5f0f\u76f8\u5f53\u4e8e \\(x_i < x_i\\) \uff09\uff0c\u65e0\u89e3\u3002 \u5982\u679c\u73b0\u5728\u8981\u6c42\u7684\u4e0d\u7b49\u5f0f\u53d8\u6210\u4e86 \\(x_i \\ge x_j + C_k\\) \uff0c\u8dd1\u6700\u957f\u8def\u5373\u53ef\uff0c\u65e0\u89e3\u53d8\u6210\u5224\u65ad\u6b63\u73af\u3002 \u5f53\u7136\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6240\u6709\u7684\u4e0d\u7b49\u5f0f\u90fd\u7684\u5f97\u5230\u6ee1\u8db3\uff0c\u9700\u8981\u627e\u5230\u4e00\u4e2a\u80fd\u591f\u4ece\u5b83\u51fa\u53d1\uff0c\u7ecf\u8fc7\u6240\u6709 \u8fb9 \u7684\u6e90\u70b9\u8fdb\u884c SPFA\uff0c\u8fd9\u4e2a\u5efa\u7acb\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\u5c31\u884c\u4e86\u3002 \u4e0d\u8fc7\uff0c\u5982\u679c\u9898\u76ee\u8981\u6c42\u4e86\u7c7b\u4f3c \\(\\forall i,x_i>0\\) \u7684\u8981\u6c42\uff0c\u4e14\u8fd8\u8981\u6c42\u6700\u5c0f\u7684\u8bdd\uff0c\u5c31\u9700\u8981\u8fde\u8fb9\u800c\u4e0d\u662f\u5168\u90e8\u653e\u5230\u961f\u5217\u91cc\u9762\u4e86\uff0c\u8fb9\u6743\u6839\u636e\u9898\u76ee\u5224\u65ad\uff0c\u6bd4\u5982\u524d\u9762\u7684\u4f8b\u5b50\u5c31\u9700\u8981\u7ed9\u6bcf\u4e00\u4e2a\u70b9\u8fde \\(0 \\to i,w=1\\) \uff0c\u7136\u540e\u8ba9 \\(dis_0=0\\) \u3002 \u5982\u679c\u51fa\u73b0 \\(x_i \\le C_k\\) \u8fd9\u79cd\u6761\u4ef6\uff0c\u8ba9 \\(x_i\\) \u548c\u8d85\u7ea7\u6e90\u70b9\u8fde \\(C_k\\) \u7684\u8fb9\u5c31\u53ef\u4ee5\u4e86\u3002 $$ \u53ef\u4ee5\u7528 \\(+-1\\) \u6765\u53d8\u5316\u6210 \\(\\le \\ge\\) \u3002 \\(=\\) \u7b49\u4ef7\u4e8e \\(\\le \\land\\ge\\) \u3002 \u5982\u679c\u5728\u9898\u76ee\u91cc\u9047\u5230 \\(\\ge \\le\\) \u540c\u65f6\u51fa\u73b0\uff0c\u53d8\u6362\u65b9\u5411\uff0c\u79fb\u52a8 \\(C_k\\) \u5373\u53ef\u3002","title":"\u8d1f\u73af\u548c\u5dee\u5206\u7ea6\u675f"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E8%B4%9F%E7%8E%AF%E5%92%8C%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F/#_1","text":"","title":"\u8d1f\u73af/\u5dee\u5206\u7ea6\u675f"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E8%B4%9F%E7%8E%AF%E5%92%8C%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F/#_2","text":"\u5927\u6982\u5c31\u662f\u56fe\u4e0a\u7684\u4e00\u4e2a\u73af\uff0c\u73af\u4e0a\u6240\u6709\u8fb9\u7684\u6743\u503c\u4e4b\u548c\u662f\u8d1f\u6570\u3002 \u6b63\u5e38\u8dd1\u6700\u77ed\u8def\u7684\u8bdd\u5c31\u4f1a\u5728\u4e0a\u9762\u65e0\u9650\u8f6c\u4e0b\u53bb\u3002 \u5904\u7406\u7684\u65f6\u5019\u53ef\u4ee5\u5229\u7528 Bellmanford \u548c SPFA \u7684\u6027\u8d28\u6765\u5224\u65ad\u3002 \u73b0\u5728\u5728\u6b63\u5e38\u7684\u6700\u77ed\u8def\u4e0a\u7528\u4e0b\u9762\u7684\u4e24\u79cd\u65b9\u5f0f\u4e4b\u4e00\u8fdb\u884c\u5224\u5b9a\uff1a \u5982\u679c\u6709\u4e00\u4e2a\u70b9\u88ab\u8fed\u4ee3\u4e86\u4e0d\u5c11\u4e8e \\(n\\) \u6b21\uff08\u5165\u961f\u4e0d\u5c11\u4e8e \\(n\\) \u6b21\uff09\uff0c\u90a3\u4e48\u56fe\u4e2d\u5fc5\u7136\u5b58\u5728\u8d1f\u73af\u3002 \u5982\u679c\u6e90\u70b9\u5230\u67d0\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u6709\u4e0d\u5c11\u4e8e \\(n\\) \u6761\u8fb9\uff0c\u90a3\u4e48\u56fe\u4e2d\u5fc5\u7136\u5b58\u5728\u8d1f\u73af\u3002 1 \u5f88\u597d\u7406\u89e3\uff0c\u88ab\u5165\u961f\u4e86\u4e0d\u5c11\u4e8e \\(n\\) \u6b21\uff0c\u5c31\u8bf4\u660e\u65e0\u8bba\u5982\u4f55\u8fed\u4ee3\uff0c\u59cb\u7ec8\u5b58\u5728\u81f3\u5c11\u4e00\u6761\u8fb9\u6ee1\u8db3\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\uff0c\u5728\u6700\u77ed\u8def\u5f53\u4e2d\u5bf9\u5e94\u7684\u5c31\u662f\u8d1f\u73af\u3002 2 \u4e5f\u5dee\u4e0d\u591a\uff0c\u4e00\u4e2a \\(n\\) \u4e2a\u70b9\uff0c \\(n\\) \u6761\u8fb9\u7684\u8054\u901a\u56fe\u5fc5\u7136\u662f\u5b58\u5728\u73af\u7684\uff08\u597d\u50cf\u63cf\u8ff0\u6709\u70b9\u95ee\u9898\uff09\uff0c\u6700\u77ed\u8def\u662f\u4e2a\u73af\uff0c\u90a3\u4e48\u5fc5\u7136\u662f\u51fa\u73b0\u4e86\u8d1f\u73af\u3002 \u901a\u5e38\u6765\u8bf4\u7b2c\u4e8c\u79cd\u505a\u6cd5\u6548\u7387\u66f4\u9ad8\uff0c\u6bd4\u5982 1 1 -> 2 , 2 -> 3 , 3 -> 4 , 4 -> 5 , ..., n -1 -> n , n -> 1 \u8fd9\u79cd\u56fe\uff0c1 \u7684\u505a\u6cd5\u5c31\u8981\u8fed\u4ee3 \\(\\text{O}(n^2)\\) \u7ea7\u522b\u6b21\uff0c2 \u53ea\u9700\u8981 \\(n\\) \u6b21\u3002 \u8fd8\u6709\u4e00\u79cd\u4f18\u5316\u662f\u628a std::queue \u6362\u6210 std::stack \u3002 \u53e6\u5916\u4e00\u79cd \u4e0d\u4e00\u5b9a\u6b63\u786e \u7684\u5361\u65f6 trick \u662f\uff0c\u5f53\u6240\u6709\u8282\u70b9\u7684\u603b\u5165\u961f\u6b21\u6570\u8d85\u8fc7\u67d0\u4e2a\u8bbe\u5b9a\u503c\u7684\u65f6\u5019\uff0c\u5c31\u76f4\u63a5 \u8ba4\u4e3a \u56fe\u4e2d\u5b58\u5728\u8d1f\u73af\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include <bits/stdc++.h> using namespace std ; constexpr int si_n = 5e2 + 10 ; constexpr int si_m = 5e3 + 2e2 + 10 ; int n , m , q ; int T , tot = 0 ; struct Edge { int head , Next , ver , w ; } e [ si_m ]; inline void add ( int u , int v , int w ){ e [ ++ tot ]. ver = v , e [ tot ]. Next = e [ u ]. head , e [ u ]. head = tot , e [ tot ]. w = w ; } int dis [ si_n ], cnt [ si_n ]; bool vis [ si_n ]; std :: queue < int > Q ; inline bool spfa ( int s ){ memset ( dis , 0 , sizeof dis ), memset ( cnt , 0 , sizeof cnt ), memset ( vis , false , sizeof vis ); for ( register int i = 1 ; i <= n ; ++ i ){ Q . push ( i ), vis [ i ] = true ; } cnt [ s ] = 0 ; // \u5168\u90e8\u5165\u961f\uff0c\u76f8\u5f53\u4e8e\u5efa\u7acb\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\u3002 while ( ! Q . empty ()){ int u = Q . front (); Q . pop (); vis [ u ] = false ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( dis [ v ] > dis [ u ] + w ){ dis [ v ] = dis [ u ] + w ; cnt [ v ] = cnt [ u ] + 1 ; if ( cnt [ v ] >= n ) return true ; if ( ! vis [ v ]) Q . push ( v ), vis [ v ] = true ; } } } return false ; } \u8fd8\u6709\uff0c\u5982\u679c\u53ea\u662f\u5224\u5b9a\u8d1f\u73af\u7684\u8bdd\uff0c \\(dis\\) \u521d\u59cb\u5316\u6210\u591a\u5c11\u90fd\u662f\u6ca1\u6709\u95ee\u9898\u7684\u3002 \u6362\u6210\u5224\u65ad\u6b63\u73af\u7684\u8bdd\uff0c\u6c42\u6700\u957f\u8def\u5373\u53ef\u3002","title":"\u8d1f\u73af"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E8%B4%9F%E7%8E%AF%E5%92%8C%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F/#_3","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e0d\u7b49\u5f0f\u7ec4\uff0c\u6bcf\u4e2a\u4e0d\u7b49\u5f0f\u5f62\u5982 \\(x_i \\le x_j +C_k\\) \uff0c\u5176\u4e2d \\(C_k\\) \u662f\u5e38\u6570\uff08\u6b63\u8d1f\u5747\u53ef\uff09\uff0c \\(i,j\\) \u662f\u81ea\u53d8\u91cf\u3002 \u95ee\u4e00\u7ec4\u53ef\u884c\u89e3 \\(x_1,x_2 \\dots x_n\\) \u3002 \u4e0d\u7b49\u5f0f\u957f\u7684\u5f88\u50cf\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\uff0c\u6240\u4ee5\u8003\u8651\u5229\u7528\u56fe\u8bba\u5206\u6790\u3002 \u6bd4\u5982 \\(x_i\\le x_j +C_k\\) \uff0c\u53ef\u4ee5\u770b\u4f5c \\(j\\to i\\) \u7684\u8def\u5f84\u4e0a\u6709\u4e00\u6761\u6743\u503c\u662f \\(C_k\\) \u7684\u8fb9\u3002 \u6700\u7ec8\u6ee1\u8db3\u6761\u4ef6\u65f6\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u6240\u6709\u7c7b\u4f3c \\(x_i > x_j+C_k\\) \u7684\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\u90fd\u4e0d\u6210\u7acb\uff0c\u4e5f\u5c31\u662f\u6c42\u5b8c\u6700\u77ed\u8def\u4e4b\u540e\u7684\u60c5\u51b5\u3002 \u6b64\u65f6\uff0c\u4ece\u6e90\u70b9\u51fa\u53d1\u5230\u6bcf\u4e2a\u70b9\u7684 \\(dis_i\\) \u5c31\u662f\u5bf9\u5e94\u7684 \\(x_i\\) \uff0c \\(dis\\) \u5c31\u662f\u4e00\u7ec4\u53ef\u884c\u89e3\u3002 \u5982\u679c\u56fe\u4e2d\u5b58\u5728\u8d1f\u73af\uff0c\u90a3\u4e48\u5728\u73af\u4e0a\u8f6c\u4e00\u5708\u4e4b\u540e\u5fc5\u7136\u4f1a\u51fa\u73b0 \\(x_i \\le x_i +\\sum C_k , \\sum C_k <0\\) \u7684\u60c5\u51b5\uff0c\u6b64\u65f6\u77db\u76fe\uff08\u8fd9\u4e2a\u4e0d\u7b49\u5f0f\u76f8\u5f53\u4e8e \\(x_i < x_i\\) \uff09\uff0c\u65e0\u89e3\u3002 \u5982\u679c\u73b0\u5728\u8981\u6c42\u7684\u4e0d\u7b49\u5f0f\u53d8\u6210\u4e86 \\(x_i \\ge x_j + C_k\\) \uff0c\u8dd1\u6700\u957f\u8def\u5373\u53ef\uff0c\u65e0\u89e3\u53d8\u6210\u5224\u65ad\u6b63\u73af\u3002 \u5f53\u7136\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6240\u6709\u7684\u4e0d\u7b49\u5f0f\u90fd\u7684\u5f97\u5230\u6ee1\u8db3\uff0c\u9700\u8981\u627e\u5230\u4e00\u4e2a\u80fd\u591f\u4ece\u5b83\u51fa\u53d1\uff0c\u7ecf\u8fc7\u6240\u6709 \u8fb9 \u7684\u6e90\u70b9\u8fdb\u884c SPFA\uff0c\u8fd9\u4e2a\u5efa\u7acb\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\u5c31\u884c\u4e86\u3002 \u4e0d\u8fc7\uff0c\u5982\u679c\u9898\u76ee\u8981\u6c42\u4e86\u7c7b\u4f3c \\(\\forall i,x_i>0\\) \u7684\u8981\u6c42\uff0c\u4e14\u8fd8\u8981\u6c42\u6700\u5c0f\u7684\u8bdd\uff0c\u5c31\u9700\u8981\u8fde\u8fb9\u800c\u4e0d\u662f\u5168\u90e8\u653e\u5230\u961f\u5217\u91cc\u9762\u4e86\uff0c\u8fb9\u6743\u6839\u636e\u9898\u76ee\u5224\u65ad\uff0c\u6bd4\u5982\u524d\u9762\u7684\u4f8b\u5b50\u5c31\u9700\u8981\u7ed9\u6bcf\u4e00\u4e2a\u70b9\u8fde \\(0 \\to i,w=1\\) \uff0c\u7136\u540e\u8ba9 \\(dis_0=0\\) \u3002 \u5982\u679c\u51fa\u73b0 \\(x_i \\le C_k\\) \u8fd9\u79cd\u6761\u4ef6\uff0c\u8ba9 \\(x_i\\) \u548c\u8d85\u7ea7\u6e90\u70b9\u8fde \\(C_k\\) \u7684\u8fb9\u5c31\u53ef\u4ee5\u4e86\u3002 $$ \u53ef\u4ee5\u7528 \\(+-1\\) \u6765\u53d8\u5316\u6210 \\(\\le \\ge\\) \u3002 \\(=\\) \u7b49\u4ef7\u4e8e \\(\\le \\land\\ge\\) \u3002 \u5982\u679c\u5728\u9898\u76ee\u91cc\u9047\u5230 \\(\\ge \\le\\) \u540c\u65f6\u51fa\u73b0\uff0c\u53d8\u6362\u65b9\u5411\uff0c\u79fb\u52a8 \\(C_k\\) \u5373\u53ef\u3002","title":"\u5dee\u5206\u7ea6\u675f"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E9%93%BE%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F/","text":"\u5173\u4e8e\u94fe\u5f0f\u524d\u5411\u661f \u00b6 \u6211\u7684\u5199\u6cd5\u5f88\u5947\u602a\uff0c\u5de8 TM \u5947\u602a\uff1a 1 2 3 4 5 6 7 8 9 10 11 int tot = 0 ; struct Edge { int head , ver , Next , w ; } e [ si_m << 1 ]; inline void add ( int u , int v , int w ){ e [ ++ tot ]. ver = v , e [ tot ]. Next = e [ u ]. head , e [ u ]. head = tot , e [ tot ]. w = w ; } // \u8fb9\u7684\u7f16\u53f7\u4ece 1 \u5f00\u59cb // in main or other function: for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ //... } // clear for ( register int i = 0 ; i <= tot ; ++ i ) e [ i ]. head = 0 ; tot = 0 ; \u6b63\u5e38\u4eba\u4e00\u822c\u4f1a\u628a head \u63d0\u51fa\u6765\u65b9\u4fbf\u591a\u6d4b\u7684\u6e05\u7a7a\u3002 \u4f46\u662f\u6211\u4f1a\u5199 for(register int i=0;i<=tot;++i) e[i].head=0; \u8fd9\u6837\u5b50\u662f\u6ca1\u95ee\u9898\u7684\uff0c\u4f46\u6211\u4e4b\u524d\u72af\u8fc7\u4e00\u4e2a\u9519\u8bef\uff0c\u6211 for \u6e05\u7a7a\u7684\u65f6\u5019\u5199\u7684\u662f e[i].head=-1 \u3002 \u4f46\u662f\u904d\u5386\u7684\u65f6\u5019\u662f i=...;i;i=... \u8fd9\u79cd\u3002 \u7136\u540e\u5c31\u6302\u4e86\uff0c\u8c03\u4e86\u4e00\u4e2a\u4e0b\u5348\uff0c\u7528 GDB \u53d1\u73b0\u524d\u5411\u661f\u7684\u5199\u6cd5\u81ed\u4e86\uff08\u4e24\u4e09\u5e74\u4e86\u90fd\u6ca1\u51fa\u4e8b\uff0c\u4e5f\u6ca1\u53d1\u73b0\u2026\u2026 /ch \u7528 e[i].head=-1 \u6e05\u7a7a\u7684\u8bdd\u8fd9\u4e48\u5199\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 int tot = 0 ; int head [ si_n ]; struct Edge { int ver , Next , w ; } e [ si_m << 1 ]; inline void add ( int u , int v , int w ){ e [ tot ] = ( Edge ){ v , head [ u ], w }, head [ u ] = tot ++ ; } // \u8fb9\u7684\u7f16\u53f7\u4ece 0 \u5f00\u59cb // for ( register int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ //... } // clear memset ( head , -1 , sizeof head ); tot = 0 ; // \u4e0d\u7ba1\u6709\u6ca1\u6709\u591a\u6d4b\u90fd\u8981memset -1. \u7f51\u7edc\u6d41\u7684\u65f6\u5019\u8981\u6210\u5bf9\u53d8\u6362\uff0c\u6b63\u5e38\u4eba\u5e94\u8be5\u4f1a\u50cf\u4e0a\u9762\u8fd9\u6837\u5b50\u5199\u3002 \u5982\u679c\u975e\u8981\u7528\u7b2c\u4e00\u79cd\uff0c\u5c31\u521d\u59cb\u5316 tot=1 \uff0c\u4ece 2 \u5f00\u59cb\u7ed9\u8fb9\u7f16\u53f7\u3002","title":"\u94fe\u5f0f\u524d\u5411\u661f"},{"location":"%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/%E9%93%BE%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F/#_1","text":"\u6211\u7684\u5199\u6cd5\u5f88\u5947\u602a\uff0c\u5de8 TM \u5947\u602a\uff1a 1 2 3 4 5 6 7 8 9 10 11 int tot = 0 ; struct Edge { int head , ver , Next , w ; } e [ si_m << 1 ]; inline void add ( int u , int v , int w ){ e [ ++ tot ]. ver = v , e [ tot ]. Next = e [ u ]. head , e [ u ]. head = tot , e [ tot ]. w = w ; } // \u8fb9\u7684\u7f16\u53f7\u4ece 1 \u5f00\u59cb // in main or other function: for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ //... } // clear for ( register int i = 0 ; i <= tot ; ++ i ) e [ i ]. head = 0 ; tot = 0 ; \u6b63\u5e38\u4eba\u4e00\u822c\u4f1a\u628a head \u63d0\u51fa\u6765\u65b9\u4fbf\u591a\u6d4b\u7684\u6e05\u7a7a\u3002 \u4f46\u662f\u6211\u4f1a\u5199 for(register int i=0;i<=tot;++i) e[i].head=0; \u8fd9\u6837\u5b50\u662f\u6ca1\u95ee\u9898\u7684\uff0c\u4f46\u6211\u4e4b\u524d\u72af\u8fc7\u4e00\u4e2a\u9519\u8bef\uff0c\u6211 for \u6e05\u7a7a\u7684\u65f6\u5019\u5199\u7684\u662f e[i].head=-1 \u3002 \u4f46\u662f\u904d\u5386\u7684\u65f6\u5019\u662f i=...;i;i=... \u8fd9\u79cd\u3002 \u7136\u540e\u5c31\u6302\u4e86\uff0c\u8c03\u4e86\u4e00\u4e2a\u4e0b\u5348\uff0c\u7528 GDB \u53d1\u73b0\u524d\u5411\u661f\u7684\u5199\u6cd5\u81ed\u4e86\uff08\u4e24\u4e09\u5e74\u4e86\u90fd\u6ca1\u51fa\u4e8b\uff0c\u4e5f\u6ca1\u53d1\u73b0\u2026\u2026 /ch \u7528 e[i].head=-1 \u6e05\u7a7a\u7684\u8bdd\u8fd9\u4e48\u5199\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 int tot = 0 ; int head [ si_n ]; struct Edge { int ver , Next , w ; } e [ si_m << 1 ]; inline void add ( int u , int v , int w ){ e [ tot ] = ( Edge ){ v , head [ u ], w }, head [ u ] = tot ++ ; } // \u8fb9\u7684\u7f16\u53f7\u4ece 0 \u5f00\u59cb // for ( register int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ //... } // clear memset ( head , -1 , sizeof head ); tot = 0 ; // \u4e0d\u7ba1\u6709\u6ca1\u6709\u591a\u6d4b\u90fd\u8981memset -1. \u7f51\u7edc\u6d41\u7684\u65f6\u5019\u8981\u6210\u5bf9\u53d8\u6362\uff0c\u6b63\u5e38\u4eba\u5e94\u8be5\u4f1a\u50cf\u4e0a\u9762\u8fd9\u6837\u5b50\u5199\u3002 \u5982\u679c\u975e\u8981\u7528\u7b2c\u4e00\u79cd\uff0c\u5c31\u521d\u59cb\u5316 tot=1 \uff0c\u4ece 2 \u5f00\u59cb\u7ed9\u8fb9\u7f16\u53f7\u3002","title":"\u5173\u4e8e\u94fe\u5f0f\u524d\u5411\u661f"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6/%E5%81%8F%E5%BA%8F%E5%85%B3%E7%B3%BB/","text":"\u504f\u5e8f\u5173\u7cfb \u00b6 \u975e\u4e25\u683c\u504f\u5e8f\uff0c\u81ea\u53cd\u504f\u5e8f \u00b6 \u8bbe \\(\\preccurlyeq\\) \u662f\u96c6\u5408 \\(S\\) \u4e0a\u7684\u4e8c\u5143\u5173\u7cfb\uff0c\u5982\u679c \\(\\preccurlyeq\\) \u6ee1\u8db3\uff1a \u81ea\u53cd\u6027\uff1a \\(\\forall a \\in S,\\) \u6709 \\(a \\preccurlyeq a\\) \u53cd\u5bf9\u79f0\u6027\uff1a \\(\\forall a,b \\in S,a\\preccurlyeq b \\land b \\preccurlyeq a,\\) \u5219 \\(a=b\\) \u3002 \u4f20\u9012\u6027\uff1a \\(\\forall a,b,c \\in S, a \\preccurlyeq b \\land b \\preccurlyeq c,\\) \u5219 \\(a \\preccurlyeq c\\) \u5219\u79f0 \\(\\preccurlyeq\\) \u662f \\(S\\) \u4e0a\u7684\u975e\u4e25\u683c\u504f\u5e8f\u6216\u81ea\u53cd\u504f\u5e8f\u3002 \u7c7b\u4f3c\u56fe\u8bba\u91cc\u7684\u81ea\u73af\u548c\u65e0\u5411\u8fb9\u3002 \u4e25\u683c\u504f\u5e8f\uff0c\u53cd\u81ea\u53cd\u504f\u5e8f \u00b6 \u8bbe \\(\\prec\\) \u662f\u96c6\u5408 \\(S\\) \u4e0a\u7684\u4e8c\u5143\u5173\u7cfb\uff0c\u5982\u679c \\(\\prec\\) \u6ee1\u8db3\uff1a \u53cd\u81ea\u53cd\u6027\uff1a \\(\\forall a \\in S,\\) \u6709 \\(a \\not\\prec a\\) \u975e\u5bf9\u79f0\u6027\uff1a \\(\\forall a,b \\in S,a\\prec b \\Rightarrow b \\not\\prec a,\\) \u3002 \u4f20\u9012\u6027\uff1a \\(\\forall a,b,c \\in S, a \\prec b \\land b \\prec c,\\) \u5219 \\(a \\prec c\\) \u5219\u79f0 \\(\\prec\\) \u662f \\(S\\) \u4e0a\u7684\u4e25\u683c\u504f\u5e8f\u6216\u53cd\u81ea\u53cd\u504f\u5e8f\u3002 \u7c7b\u4f3c\u56fe\u8bba\u91cc\u7684\u6709\u5411\u8fb9\u3002 \u4e00\u4e2a\u96c6\u5408\u4e0a\u7684\u4e25\u683c\u504f\u5e8f\u5173\u7cfb\u56fe\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u4e2a DAG\uff08\u6709\u5411\u65e0\u73af\uff09\u3002 \u5e76\u4e14\u8fd9\u4e2a\u56fe\u7684\u4f20\u9012\u95ed\u5305\u662f\u5b83\u81ea\u5df1\u3002 \u6240\u4ee5\u9047\u5230\u4e25\u683c\u504f\u5e8f\u7684\u5224\u5b9a\uff08\u662f\u5426\u6210\u7acb\uff09\u65f6\uff0c\u53ef\u4ee5\u5229\u7528\u62d3\u6251\u6392\u5e8f\u89e3\u51b3\u3002 \u5982\u679c\u6392\u5e8f\u5b8c\u4e86\u4e4b\u540e\uff0c\u4ecd\u6709 \\(deg \\not= 0\\) \u7684\u70b9\uff0c\u5219\u8fd9\u4e2a\u4e25\u683c\u504f\u5e8f\u5173\u7cfb\u4e0d\u6210\u7acb\u3002 \u5982\u679c\u6210\u7acb\uff0c\u8981\u6c42\u6784\u9020\u65b9\u6848\u65f6\uff0c\u4e00\u822c\u9700\u8981\u7528\u5230\u62d3\u6251\u5e8f\u3002","title":"\u504f\u5e8f\u5173\u7cfb"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6/%E5%81%8F%E5%BA%8F%E5%85%B3%E7%B3%BB/#_1","text":"","title":"\u504f\u5e8f\u5173\u7cfb"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6/%E5%81%8F%E5%BA%8F%E5%85%B3%E7%B3%BB/#_2","text":"\u8bbe \\(\\preccurlyeq\\) \u662f\u96c6\u5408 \\(S\\) \u4e0a\u7684\u4e8c\u5143\u5173\u7cfb\uff0c\u5982\u679c \\(\\preccurlyeq\\) \u6ee1\u8db3\uff1a \u81ea\u53cd\u6027\uff1a \\(\\forall a \\in S,\\) \u6709 \\(a \\preccurlyeq a\\) \u53cd\u5bf9\u79f0\u6027\uff1a \\(\\forall a,b \\in S,a\\preccurlyeq b \\land b \\preccurlyeq a,\\) \u5219 \\(a=b\\) \u3002 \u4f20\u9012\u6027\uff1a \\(\\forall a,b,c \\in S, a \\preccurlyeq b \\land b \\preccurlyeq c,\\) \u5219 \\(a \\preccurlyeq c\\) \u5219\u79f0 \\(\\preccurlyeq\\) \u662f \\(S\\) \u4e0a\u7684\u975e\u4e25\u683c\u504f\u5e8f\u6216\u81ea\u53cd\u504f\u5e8f\u3002 \u7c7b\u4f3c\u56fe\u8bba\u91cc\u7684\u81ea\u73af\u548c\u65e0\u5411\u8fb9\u3002","title":"\u975e\u4e25\u683c\u504f\u5e8f\uff0c\u81ea\u53cd\u504f\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6/%E5%81%8F%E5%BA%8F%E5%85%B3%E7%B3%BB/#_3","text":"\u8bbe \\(\\prec\\) \u662f\u96c6\u5408 \\(S\\) \u4e0a\u7684\u4e8c\u5143\u5173\u7cfb\uff0c\u5982\u679c \\(\\prec\\) \u6ee1\u8db3\uff1a \u53cd\u81ea\u53cd\u6027\uff1a \\(\\forall a \\in S,\\) \u6709 \\(a \\not\\prec a\\) \u975e\u5bf9\u79f0\u6027\uff1a \\(\\forall a,b \\in S,a\\prec b \\Rightarrow b \\not\\prec a,\\) \u3002 \u4f20\u9012\u6027\uff1a \\(\\forall a,b,c \\in S, a \\prec b \\land b \\prec c,\\) \u5219 \\(a \\prec c\\) \u5219\u79f0 \\(\\prec\\) \u662f \\(S\\) \u4e0a\u7684\u4e25\u683c\u504f\u5e8f\u6216\u53cd\u81ea\u53cd\u504f\u5e8f\u3002 \u7c7b\u4f3c\u56fe\u8bba\u91cc\u7684\u6709\u5411\u8fb9\u3002 \u4e00\u4e2a\u96c6\u5408\u4e0a\u7684\u4e25\u683c\u504f\u5e8f\u5173\u7cfb\u56fe\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u4e2a DAG\uff08\u6709\u5411\u65e0\u73af\uff09\u3002 \u5e76\u4e14\u8fd9\u4e2a\u56fe\u7684\u4f20\u9012\u95ed\u5305\u662f\u5b83\u81ea\u5df1\u3002 \u6240\u4ee5\u9047\u5230\u4e25\u683c\u504f\u5e8f\u7684\u5224\u5b9a\uff08\u662f\u5426\u6210\u7acb\uff09\u65f6\uff0c\u53ef\u4ee5\u5229\u7528\u62d3\u6251\u6392\u5e8f\u89e3\u51b3\u3002 \u5982\u679c\u6392\u5e8f\u5b8c\u4e86\u4e4b\u540e\uff0c\u4ecd\u6709 \\(deg \\not= 0\\) \u7684\u70b9\uff0c\u5219\u8fd9\u4e2a\u4e25\u683c\u504f\u5e8f\u5173\u7cfb\u4e0d\u6210\u7acb\u3002 \u5982\u679c\u6210\u7acb\uff0c\u8981\u6c42\u6784\u9020\u65b9\u6848\u65f6\uff0c\u4e00\u822c\u9700\u8981\u7528\u5230\u62d3\u6251\u5e8f\u3002","title":"\u4e25\u683c\u504f\u5e8f\uff0c\u53cd\u81ea\u53cd\u504f\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/","text":"\u77e9\u9635 \u00b6 Definition \u00b6 \u77e9\u9635\u662f\u5565\u5e94\u8be5\u4e0d\u7528\u8bf4\u4e86\u5427\u3002 \u4e00\u822c\u8868\u793a\u7684\u65f6\u5019\u7528\u5927\u5199\u5b57\u6bcd\u8868\u793a\u77e9\u9635\u3002\u7528\u5c0f\u5199\u5b57\u6bcd\u52a0\u4e00\u4e2a\u4e8c\u5143\u7ec4\u4e0b\u6807\u8868\u793a\u77e9\u9635\u91cc\u7684\u5143\u7d20\u3002 \u6bd4\u5982 \\(A\\) \u4e3a\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635\uff1a \u8fd9\u91cc \\(n\\times m\\) \u6307 \\(n\\) \u884c \\(m\\) \u5217\u3002 \\[A=\\begin{bmatrix} a_{1,1} & \\cdots & a_{1,m} \\\\ \\vdots & \\ddots & \\vdots \\\\ a_{n,1} & \\cdots & a_{n,m}\\end{bmatrix}\\] \\(a_{i,j}\\) \u5c31\u8868\u793a\u77e9\u9635 \\(A\\) \u5f53\u4e2d\u7b2c \\(i\\) \u884c\u7b2c \\(j\\) \u5217\u7684\u5143\u7d20\u3002 \uff08\u7ebf\u6027\u4ee3\u6570\u91cc\u4e0d\u662f\u7ecf\u5e38\u8bf4\u884c\u5217\u5f0f\u5417\uff0c\u6240\u4ee5\u662f \u884c \\(\\times\\) \u5217 \u554a\uff08\u5212\u6389\uff09\uff09 \u4e5f\u53ef\u4ee5\u7b80\u8bb0\u4e3a \\(A=(a_{i,j})\\) \u3002 \u5411\u91cf\uff1a\u6ce8\u610f\u8fd9\u91cc\u7684\u5411\u91cf\u548c\u51e0\u4f55\u91cc\u7684\u5411\u91cf\u7684\u4e0d\u540c\u3002 \u4e00\u822c\u628a \\(n\\) \u4e2a\u5b9e\u6570\u7ec4\u6210\u7684 \\(n\\) \u5143\u7ec4\u79f0\u4e3a\u5411\u91cf\u3002 \u5982\u679c\u5b83\u8868\u793a\u4e3a\u4e00\u4e2a \\(1\\times n\\) \u7684\u77e9\u9635\uff0c\u5219\u79f0\u4e3a\u884c\u5411\u91cf\uff0c\u5982\u679c\u662f \\(n \\times 1\\) \uff0c\u5219\u79f0\u4e3a\u5217\u5411\u91cf\uff1a \u884c\u5411\u91cf\uff1a \\((a_1,a_2,a_3,...,a_n)\\) \u5217\u5411\u91cf\uff1a \\(\\begin{bmatrix}a_1 \\\\ a_2 \\\\ \\vdots \\\\ a_n \\end{bmatrix}\\) \u4e00\u822c\u90fd\u662f\u7528\u5217\u5411\u91cf\uff08\u65b9\u4fbf\u4e00\u70b9\uff09\uff0c\u4e00\u822c\u4f1a\u7528\u9ed1\u4f53\u659c\u4f53\u8868\u793a\u5217\u5411\u91cf\u3002 \u6709\u5174\u8da3\u7684\u53ef\u4ee5\u4e86\u89e3\u4e00\u4e0b \\(n\\) \u7ef4\u6b27\u51e0\u91cc\u5fb7\u7a7a\u95f4\uff08\u53ef\u4ee5\u8003\u8651\u770b\u770b\u300a\u7ebf\u6027\u4ee3\u6570\u300b\uff09\u3002 \u5355\u4f4d\u77e9\u9635\uff08 \\(I\\) \uff09\uff1a \u5bf9\u4e8e\u4e00\u4e2a \\(n \\times n\\) \u7684\u77e9\u9635 \\(A\\) \uff0c\u5982\u679c\u6ee1\u8db3 \\(\\forall i ,a_{i,i}=1,\\text{Others}=0\\) \uff0c\u90a3\u4e48\u79f0 \\(A\\) \u662f\u4e00\u4e2a\u5355\u4f4d\u77e9\u9635\uff0c\u4e00\u822c\u8bb0\u4f5c \\(I\\) \u6bd4\u5982\uff1a \\[I=\\begin{bmatrix}1 &0 & 0 \\\\ 0& 1 & 0 \\\\ 0 & 0& 1\\end{bmatrix}\\] \u6807\u91cf\u4e58\u6cd5 \u00b6 \\(\\alpha\\) \u662f\u4e00\u4e2a\u6807\u91cf\uff0c \\(A\\) \u662f\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635\uff0c \u5219 \\(\\alpha A=B\\) \u662f\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635\uff0c\u4e14 \\(B_{i,j}=\\alpha\\times A_{i,j}\\) \u3002 \u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u5206\u914d\u5f8b\u3002 \u77e9\u9635\u52a0\u6cd5 \u00b6 \\(A\\) \u662f\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635\uff0c \\(B\\) \u662f\u4e00\u4e2a \\(n\\times m\\) \u7684\u77e9\u9635\uff0c \u5219\u4ed6\u4eec\u8fdb\u884c\u77e9\u9635\u52a0\u6cd5 \\(A+B\\) \u5f97\u5230\u7684\u7ed3\u679c\u77e9\u9635 \\(C\\) \u662f\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635\u3002 \u4e14 \\(C_{i,j}=A_{i,j}+B_{i,j}\\) \u3002 \u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u4ea4\u6362\u5f8b\u3002 \u77e9\u9635\u4e58\u6cd5 \u00b6 \u91cd\u5934\u620f\u3002 \\(A\\) \u662f\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635\uff0c \\(B\\) \u662f\u4e00\u4e2a \\(m \\times k\\) \u7684\u77e9\u9635\u3002 \u6ce8\u610f\uff0c \\(A\\) \u7684\u5217\u6570\u548c \\(B\\) \u7684\u884c\u6570\u5fc5\u987b\u76f8\u7b49\uff01 \u90a3\u4e48\u4ed6\u4eec\u8fdb\u884c\u77e9\u9635\u4e58\u6cd5 \\(A \\times B\\) \u7684\u5230\u7684\u7ed3\u679c\u77e9\u9635 \\(C\\) \u662f\u4e00\u4e2a \\(n \\times k\\) \u7684\u77e9\u9635\u3002 \u4e14\u6ee1\u8db3\uff1a \\[C_{i,j}=\\sum\\limits_{k=1}^m A_{i,k}\\times B_{k,j}\\] \u5f62\u8c61\u7684\u89e3\u91ca\u5c31\u662f\uff0c \\(C_{i,j}\\) \u7b49\u4e8e \\(A\\) \u7684\u7b2c \\(i\\) \u884c\u548c \\(B\\) \u7684\u7b2c \\(j\\) \u5217\u4e00\u4e00\u5bf9\u5e94\u5730\u4e58\u8d77\u6765\u3002 \u6ce8\u610f\uff1a\u77e9\u9635\u4e58\u6cd5 \u4e0d\u4e00\u5b9a \u6ee1\u8db3\u4ea4\u6362\u5f8b\uff01\uff01 \u4f46\u662f\u5b83\u6ee1\u8db3 \u7ed3\u5408\u5f8b \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 struct Matrix { int a [ si ][ si ]; Matrix (){ memset ( a , 0 , sizeof a ); } inline Matrix operator * ( const Matrix & B ) const { Matrix C , A =* this ; for ( register int i = 1 ; i <= cnt_n ; ++ i ){ for ( register int j = 1 ; j <= cnt_k ; ++ j ){ for ( register int k = 1 ; k <= cnt_m ; ++ k ){ C . a [ i ][ j ] += A . a [ i ][ k ] * B . a [ k ][ j ]; } } } return C ; // \u6700\u597d\u5faa\u73af\u7684\u65f6\u5019\u4e0d\u8981\u7528 si\u3002 // \u7528\u4e00\u4e2a\u8bbe\u5b9a\u597d\u7684\u5e38\u6570\u6216\u8005\u9898\u76ee\u7ed9\u7684\u53d8\u91cf\u4f1a\u6bd4\u8f83\u597d\u3002 } }; \u5982\u679c\u88ab\u5361\u5e38\u4e86\uff0c\u53ef\u4ee5\u8003\u8651\u624b\u52a8\u5c55\u5f00\u5185\u5c42\u5faa\u73af\u3002 \u8981\u6c42\u53d6\u6a21\u7684\u8bdd\u624b\u52a8\u52a0\u4e0a\u5c31\u884c\u3002 \u77e9\u9635\u5feb\u901f\u5e42 \u00b6 \u56e0\u4e3a\u77e9\u9635\u4e58\u6cd5\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u6240\u4ee5\u4e00\u4e2a\u77e9\u9635\u7684 \\(k\\) \u6b21\u5e42\u5b9a\u4e49\u4e3a\uff1a \\[A^k=\\begin{matrix}\\underbrace{A \\times A\\times A \\dots \\times A}\\\\k \\text{ times}\\end{matrix}\\] \u56e0\u4e3a\u6240\u6709\u6ee1\u8db3\u7ed3\u5408\u5f8b\u7684\u5143\u7b97\u90fd\u53ef\u4ee5\u4f7f\u7528\u5feb\u901f\u5e42\u6c42\u89e3\u3002 \u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u77e9\u9635\u4e58\u6cd5\u7684\u7ed3\u5408\u5f8b\u5199\u51fa\u4e00\u4e2a\u77e9\u9635\u5feb\u901f\u5e42\u7b97\u6cd5\uff1a 1 2 3 4 5 6 7 Matrix Ans , A ; inline Matrix Qpow ( int b ){ for (; b ; b >>= 1 ){ if ( b & 1 ) Ans = Ans * A ; A = A * A ; } return Ans ; } // \u6709\u7684\u65f6\u5019\u6839\u636e\u60c5\u51b5\u9700\u8981\u521d\u59cb\u5316\u4e00\u4e0b Ans. \u77e9\u9635\u4e58\u6cd5\u4f18\u5316\u9012\u63a8 \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u6570\u5b57 \\(n\\) \uff0c\u6c42\u51fa \\(Fib_n \\text{ mod }998244353 ,n \\le 1e18\\) \u3002 \\(Fib\\) \u662f\u6590\u6ce2\u90a3\u5951\u6570\u5217\u3002 \u770b\u5230 \\(n\\) \u7684\u8303\u56f4\u53d1\u73b0\u76f4\u63a5\u9012\u63a8\u660e\u663e\u7206\u70b8\u3002 \u6240\u4ee5\u8003\u8651\u628a \\(Fib_i,Fib_{i-1}\\) \u8868\u793a\u6210\u4e00\u4e2a\u884c\u5411\u91cf \\(\\begin{bmatrix} Fib_i & Fib_{i-1} \\end{bmatrix}\\) \u7136\u540e\u6211\u4eec\u60f3\u628a\u9012\u63a8\u5f0f\u5b50\u8868\u793a\u6210\u77e9\u9635\u4e58\u6cd5\u7684\u5f62\u5f0f\u518d\u5229\u7528\u77e9\u9635\u5feb\u901f\u5e42\u8fdb\u884c\u9ad8\u901f\u9012\u63a8\uff1a \\(\\begin{bmatrix} Fib_{i-1} & Fib_{i-2} \\end{bmatrix} \\times ? = \\begin{bmatrix} Fib_i & Fib_{i-1} \\end{bmatrix}\\) \u4e0d\u59a8\u8bbe\u8fd9\u4e2a \\(?\\) \u4e3a\u4e00\u4e2a\u77e9\u9635 \\(base\\) \u3002 \u6839\u636e\u77e9\u9635\u4e58\u6cd5\u7684\u5b9a\u4e49\uff0c \\(base\\) \u5e94\u8be5\u662f\u4e00\u4e2a \\(2\\times 2\\) \u7684\u77e9\u9635\u3002 \u8003\u8651\u5217\u51fa\u539f\u6765\u7684\u9012\u63a8\u5f0f\uff1a \\(Fib_{n}=Fib_{n-1}+Fib_{n-2}\\) \u3002 \u53d1\u73b0\u7ed3\u679c\u77e9\u9635\u7684 \\((1,1)\\) \u8fd9\u4e2a\u4f4d\u7f6e\u662f \\(Fib_i\\) \uff0c\u800c\u8fd9\u4e2a\u4f4d\u7f6e \\(C_{1,1}\\) \u5e94\u8be5\u662f\u7b49\u4e8e \\(A_{1,1}\\times B_{1,1}+A_{1,2}\\times B_{2,1}\\) \u4e5f\u5c31\u662f \\(Fib_{i-1} \\times B_{1,1}+Fib_{i-2}\\times B_{2,1}\\) \u6240\u4ee5 \\(B_{1,1}\\) \u548c \\(B_{2,1}\\) \u90fd\u662f \\(1\\) \uff1a \\(\\begin{bmatrix}1\\\\1\\end{bmatrix}\\) \u540c\u7406\u53ef\u4ee5\u5f97\u5230 \\(B_{2,1}\\) \u548c \\(B_{2,2}\\) \uff1a \\(\\begin{bmatrix}1\\\\0\\end{bmatrix}\\) \u6240\u4ee5 \\(base=\\begin{bmatrix}1 & 1\\\\ 1 & 0\\end{bmatrix}\\) \u539f\u5f0f\u53ef\u4ee5\u5316\u4e3a \\(\\begin{bmatrix} Fib_{i-1} & Fib_{i-2} \\end{bmatrix} \\times \\begin{bmatrix}1 & 1\\\\ 1 & 0\\end{bmatrix} = \\begin{bmatrix} Fib_i & Fib_{i-1} \\end{bmatrix}\\) \u3002 \u90a3\u4e48\u8bbe \\(Ans=\\begin{bmatrix} 1 & 1 \\end{bmatrix}=\\begin{bmatrix} Fib_2 & Fib_1\\end{bmatrix}\\) \u6240\u4ee5 \\(Fib_n\\) \u5c31\u662f \\(Ans \\times base^{n-2}\\) \u7684 \\((1,1)\\) \u3002 \u5199\u4e00\u4e2a\u77e9\u9635\u5feb\u901f\u5e42\u5373\u53ef\u3002 \u5e7f\u4e49\u6590\u6ce2\u90a3\u5951\u6570\u5217\u4e5f\u662f\u4e00\u6837\u7684\u3002 \u7136\u540e\u4e3e\u4e00\u4e2a OI-Wiki \u4e0a\u7684\u4f8b\u5b50 \\[ f_{1} = f_{2} = 0\\\\ f_{n} = 7f_{n-1}+6f_{n-2}+5n+4\\times 3^n \\] \u53d1\u73b0 \\(f_n\\) \u548c \\(f_{n-1}, f_{n-2}, n\\) \u6709\u5173\uff0c\u4e8e\u662f\u8003\u8651\u6784\u9020\u4e00\u4e2a\u77e9\u9635\u63cf\u8ff0\u72b6\u6001\u3002 \u4f46\u662f\u5982\u679c\u77e9\u9635\u4ec5\u6709\u8fd9\u4e09\u4e2a\u5143\u7d20 \\(\\begin{bmatrix}f_n& f_{n-1}& n\\end{bmatrix}\\) \u662f\u96be\u4ee5\u6784\u9020\u51fa\u8f6c\u79fb\u65b9\u7a0b\u7684\uff0c\u56e0\u4e3a\u4e58\u65b9\u8fd0\u7b97\u548c \\(+1\\) \u65e0\u6cd5\u7528\u77e9\u9635\u63cf\u8ff0\u3002 \u4e8e\u662f\u8003\u8651\u6784\u9020\u4e00\u4e2a\u66f4\u5927\u7684\u77e9\u9635\u3002 \\[ \\begin{bmatrix}f_n& f_{n-1}& n& 3^n & 1\\end{bmatrix} \\] \u6211\u4eec\u5e0c\u671b\u6784\u9020\u4e00\u4e2a\u9012\u63a8\u77e9\u9635\u53ef\u4ee5\u8f6c\u79fb\u5230 \\[ \\begin{bmatrix} f_{n+1}& f_{n}& n+1& 3^{n+1} & 1 \\end{bmatrix} \\] \u8f6c\u79fb\u77e9\u9635\u5373\u4e3a \\[ \\begin{bmatrix} 7 & 1 & 0 & 0 & 0\\\\ 6 & 0 & 0 & 0 & 0\\\\ 5 & 0 & 1 & 0 & 0\\\\ 12 & 0 & 0 & 3 & 0\\\\ 5 & 0 & 1 & 0 & 1 \\end{bmatrix} \\] \u77e9\u9635\u7684\u4e00\u4e9b\u5e38\u89c1\u5e94\u7528 \u00b6 \u6070\u597d K \u6761\u8fb9 \u6700\u77ed\u8def \u00b6 \u9996\u5148\u7528\u90bb\u63a5\u77e9\u9635 \\(A\\) \u5b58\u56fe\u3002 \u7136\u540e \\(A[i,j]\\) \u5c31\u53ef\u4ee5\u770b\u505a \\(i \\to j\\) \u7ecf\u8fc7\u6070\u597d\u4e00\u6761\u8fb9\u7684\u6700\u77ed\u8def\u3002 \u8003\u8651\u6c42\u51fa\u7ecf\u8fc7\u6070\u597d\u4e24\u6761\u8fb9\u7684\u6700\u77ed\u8def \\(B\\) \u3002 \u53ef\u4ee5\u53d1\u73b0 \\(B[i,j]=\\min\\limits_{1\\le k \\le n}\\{A[i,k]+A[k,j]\\}\\) \u8fd9\u91cc\u5c31\u662f\u7528\u4e86\u7c7b\u4f3c Floyd \u7684\u679a\u4e3e\u4e2d\u95f4\u70b9\u601d\u60f3\u3002 \u7c7b\u4f3c\u7684\u53ef\u4ee5\u5f97\u5230\u7ecf\u8fc7\u6070\u597d \\(K\\) \u6761\u8fb9\u7684\u6700\u77ed\u8def\u3002 \u8bbe \\(A^{qwq}\\) \u8868\u793a\u7ecf\u8fc7\u6070\u597d \\(qwq\\) \u6761\u8fb9\u7684\u6700\u77ed\u8def\u3002 \u53ef\u4ee5\u5f97\u5230 \\(A^{qwq}[i,j]=\\min\\limits_{1\\le k \\le n}\\{A^p[i,k]+A^q[k,j]\\},qwq=p+q\\) \u53d1\u73b0\u8fd9\u73a9\u610f\u513f\u5c31\u662f\u4e2a\u7c7b\u4f3c\u4e8e\u77e9\u9635\u4e58\u6cd5\u7684\u4e1c\u897f\u3002 \u628a \\(\\sum\\) \u6362\u6210 \\(\\min\\) \uff0c\u628a \\(\\times\\) \u6362\u6210 \\(+\\) \u3002 \u521a\u597d\u8fd9\u4e2a\u4e1c\u897f\u4ecd\u7136\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u77e9\u9635\u5feb\u901f\u5e42 \\(n^3\\log K\\) \u6c42 \\(A^K\\) \u3002 \u77e9\u9635\u8868\u8fbe\u4fee\u6539 \u00b6 \u8fd9\u91cc\u8fd8\u662f\u76f4\u63a5\u8d34\u7684 OI-Wiki \u7684\u4f8b\u5b50\uff0c\u56e0\u4e3a\u6211\u61d2\u5f97\u5199\u4e86\u3002 \u300cTHUSCH 2017\u300d\u5927\u9b54\u6cd5\u5e08 \u00b6 \u5927\u9b54\u6cd5\u5e08\u5c0f L \u5236\u4f5c\u4e86 \\(n\\) \u4e2a\u9b54\u529b\u6c34\u6676\u7403\uff0c\u6bcf\u4e2a\u6c34\u6676\u7403\u6709\u6c34\u3001\u706b\u3001\u571f\u4e09\u4e2a\u5c5e\u6027\u7684\u80fd\u91cf\u503c\u3002 \u5c0f L \u628a\u8fd9 \\(n\\) \u4e2a\u6c34\u6676\u7403\u5728\u5730\u4e0a\u4ece\u524d\u5411\u540e\u6392\u6210\u4e00\u884c\uff0c\u7136\u540e\u5f00\u59cb\u4eca\u5929\u7684\u9b54\u6cd5\u8868\u6f14\u3002 \u6211\u4eec\u7528 \\(A_i,\\ B_i,\\ C_i\\) \u5206\u522b\u8868\u793a\u4ece\u524d\u5411\u540e\u7b2c \\(i\\) \u4e2a\u6c34\u6676\u7403\uff08\u4e0b\u6807\u4ece \\(1\\) \u5f00\u59cb\uff09\u7684\u6c34\u3001\u706b\u3001\u571f\u7684\u80fd\u91cf\u503c\u3002 \u5c0f L \u8ba1\u5212\u65bd\u5c55 \\(m\\) \u6b21\u9b54\u6cd5\u3002\u6bcf\u6b21\uff0c\u4ed6\u4f1a\u9009\u62e9\u4e00\u4e2a\u533a\u95f4 \\([l, r]\\) \uff0c\u7136\u540e\u65bd\u5c55\u4ee5\u4e0b \\(3\\) \u5927\u7c7b\u3001 \\(7\\) \u79cd\u9b54\u6cd5\u4e4b\u4e00\uff1a \u9b54\u529b\u6fc0\u53d1\uff1a\u4ee4\u533a\u95f4\u91cc\u6bcf\u4e2a\u6c34\u6676\u7403\u4e2d \u7279\u5b9a\u5c5e\u6027 \u7684\u80fd\u91cf\u7206\u53d1\uff0c\u4ece\u800c\u4f7f\u53e6\u4e00\u4e2a \u7279\u5b9a\u5c5e\u6027 \u7684\u80fd\u91cf\u589e\u5f3a\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6709\u4ee5\u4e0b\u4e09\u79cd\u53ef\u80fd\u7684\u8868\u73b0\u5f62\u5f0f\uff1a \u706b\u5143\u7d20\u6fc0\u53d1\u6c34\u5143\u7d20\u80fd\u91cf\uff1a\u4ee4 \\(A_i = A_i + B_i\\) \u3002 \u571f\u5143\u7d20\u6fc0\u53d1\u706b\u5143\u7d20\u80fd\u91cf\uff1a\u4ee4 \\(B_i = B_i + C_i\\) \u3002 \u6c34\u5143\u7d20\u6fc0\u53d1\u571f\u5143\u7d20\u80fd\u91cf\uff1a\u4ee4 \\(C_i = C_i + A_i\\) \u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u589e\u5f3a\u4e00\u79cd\u5c5e\u6027\u7684\u80fd\u91cf\u5e76\u4e0d\u4f1a\u6539\u53d8\u53e6\u4e00\u79cd\u5c5e\u6027\u7684\u80fd\u91cf\uff0c\u4f8b\u5982 \\(A_i = A_i + B_i\\) \u5e76\u4e0d\u4f1a\u4f7f \\(B_i\\) \u589e\u52a0\u6216\u51cf\u5c11\u3002 \u9b54\u529b\u589e\u5f3a\uff1a\u5c0f L \u6325\u821e\u6cd5\u6756\uff0c\u6d88\u8017\u81ea\u8eab \\(v\\) \u70b9\u6cd5\u529b\u503c\uff0c\u6765\u6539\u53d8\u533a\u95f4\u91cc\u6bcf\u4e2a\u6c34\u6676\u7403\u7684 \u7279\u5b9a\u5c5e\u6027 \u7684\u80fd\u91cf\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6709\u4ee5\u4e0b\u4e09\u79cd\u53ef\u80fd\u7684\u8868\u73b0\u5f62\u5f0f\uff1a \u706b\u5143\u7d20\u80fd\u91cf\u5b9a\u503c\u589e\u5f3a\uff1a\u4ee4 \\(A_i = A_i + v\\) \u3002 \u6c34\u5143\u7d20\u80fd\u91cf\u7ffb\u500d\u589e\u5f3a\uff1a\u4ee4 \\(B_i=B_i \\cdot v\\) \u3002 \u571f\u5143\u7d20\u80fd\u91cf\u5438\u6536\u878d\u5408\uff1a\u4ee4 \\(C_i = v\\) \u3002 \u9b54\u529b\u91ca\u653e\uff1a\u5c0f L \u5c06\u533a\u95f4\u91cc\u6240\u6709\u6c34\u6676\u7403\u7684\u80fd\u91cf\u805a\u96c6\u5728\u4e00\u8d77\uff0c\u878d\u5408\u6210\u4e00\u4e2a\u65b0\u7684\u6c34\u6676\u7403\uff0c\u7136\u540e\u9001\u7ed9\u573a\u5916\u89c2\u4f17\u3002 \u751f\u6210\u7684\u6c34\u6676\u7403\u6bcf\u79cd\u5c5e\u6027\u7684\u80fd\u91cf\u503c\u7b49\u4e8e\u533a\u95f4\u5185\u6240\u6709\u6c34\u6676\u7403\u5bf9\u5e94\u80fd\u91cf\u503c\u7684\u4ee3\u6570\u548c\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u9b54\u529b\u91ca\u653e\u7684\u8fc7\u7a0b\u4e0d\u4f1a\u771f\u6b63\u6539\u53d8\u533a\u95f4\u5185\u6c34\u6676\u7403\u7684\u80fd\u91cf \u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u5c0f L \u5236\u9020\u548c\u878d\u5408\u7684\u6c34\u6676\u7403\u7684\u539f\u6750\u6599\u90fd\u662f\u5b9a\u5236\u7248\u7684 OI \u5de5\u5382\u6c34\u6676\uff0c\u6240\u4ee5\u8fd9\u4e9b\u6c34\u6676\u7403\u6709\u4e00\u4e2a\u80fd\u91cf\u9608\u503c \\(998244353\\) \u3002\u5f53\u6c34\u6676\u7403\u4e2d\u67d0\u79cd\u5c5e\u6027\u7684\u80fd\u91cf\u503c\u5927\u4e8e\u7b49\u4e8e\u8fd9\u4e2a\u9608\u503c\u65f6\uff0c\u80fd\u91cf\u503c\u4f1a\u81ea\u52a8\u5bf9\u9608\u503c\u53d6\u6a21\uff0c\u4ece\u800c\u907f\u514d\u6c34\u6676\u7403\u7206\u70b8\u3002 \u5c0f W \u4e3a\u5c0f L\uff08\u552f\u4e00\u7684\uff09\u89c2\u4f17\uff0c\u56f4\u89c2\u4e86\u6574\u4e2a\u8868\u6f14\uff0c\u5e76\u4e14\u6536\u5230\u4e86\u5c0f L \u5728\u8868\u6f14\u4e2d\u878d\u5408\u7684\u6bcf\u4e2a\u6c34\u6676\u7403\u3002\u5c0f W \u60f3\u77e5\u9053\uff0c\u8fd9\u4e9b\u6c34\u6676\u7403\u8574\u6db5\u7684\u4e09\u79cd\u5c5e\u6027\u7684\u80fd\u91cf\u503c\u5206\u522b\u662f\u591a\u5c11\u3002 \u7531\u4e8e\u77e9\u9635\u7684\u7ed3\u5408\u5f8b\u548c\u5206\u914d\u5f8b\u6210\u7acb\uff0c\u5355\u70b9\u4fee\u6539\u53ef\u4ee5\u81ea\u7136\u5730\u63a8\u5e7f\u5230\u533a\u95f4\uff0c\u5373\u63a8\u51fa\u77e9\u9635\u540e\u76f4\u63a5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u77e9\u9635\u4e58\u79ef\u5373\u53ef\u3002 \u4e0b\u9762\u5c06\u4e3e\u51e0\u4e2a\u4f8b\u5b50\u3002 \\(A_i = A_i + v\\) \u7684\u8f6c\u79fb \\[ \\begin{bmatrix} A & B & C & 1 \\end{bmatrix} \\begin{bmatrix} 1 & 0 & 0 & 0\\\\ 0 & 1 & 0 & 0\\\\ 0 & 0 & 1 & 0\\\\ v & 0 & 0 & 1\\\\ \\end{bmatrix}= \\begin{bmatrix} A+v & B & C & 1\\\\ \\end{bmatrix} \\] \\(B_i=B_i \\cdot v\\) \u7684\u8f6c\u79fb \\[ \\begin{bmatrix} A & B & C & 1\\end{bmatrix}\\begin{bmatrix}1 & 0 & 0 & 0\\\\0 & v & 0 & 0\\\\0 & 0 &1& 0\\\\0 & 0 & 0 & 1\\\\\\end{bmatrix}=\\begin{bmatrix}A & B \\cdot v & C & 1\\\\\\end{bmatrix}\\] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 #include <cstdio> #include <iostream> #include <cstring> using namespace std ; constexpr int mod = 998244353 ; constexpr int maxn = 260000 ; int n , m ; template < class T > inline void read ( T & a ){ register char ch ; while ( ch = getchar (),( ch < '0' || ch > '9' ) && ch != '-' ); register bool f = ( ch == '-' ); register T x = f ? 0 : ch - '0' ; while ( ch = getchar (), ch >= '0' && ch <= '9' ) x = ( x << 3 ) + ( x << 1 ) + ( ch ^ 48 ); a = f ?- x : x ; } struct Matrix { int a [ 5 ][ 5 ]; Matrix (){ memset ( a , 0 , sizeof ( a )); } inline void unit_init (){ memset ( a , 0 , sizeof ( a )); for ( register int i = 1 ; i <= 4 ; i ++ ) a [ i ][ i ] = 1 ; } inline Matrix operator * ( const Matrix & M ){ Matrix res ; for ( register int i = 1 ; i <= 4 ; i ++ ){ for ( register int j = 1 ; j <= 4 ; j ++ ){ res . a [ i ][ j ] = ( res . a [ i ][ j ] + 1l l * a [ i ][ 1 ] * M . a [ 1 ][ j ]) % mod ; res . a [ i ][ j ] = ( res . a [ i ][ j ] + 1l l * a [ i ][ 2 ] * M . a [ 2 ][ j ]) % mod ; res . a [ i ][ j ] = ( res . a [ i ][ j ] + 1l l * a [ i ][ 3 ] * M . a [ 3 ][ j ]) % mod ; res . a [ i ][ j ] = ( res . a [ i ][ j ] + 1l l * a [ i ][ 4 ] * M . a [ 4 ][ j ]) % mod ; } } return res ; } inline Matrix operator + ( const Matrix & M ){ Matrix res ; for ( register int i = 1 ; i <= 4 ; i ++ ){ for ( register int j = 1 ; j <= 4 ; j ++ ){ res . a [ i ][ j ] = ( M . a [ i ][ j ] + a [ i ][ j ]) % mod ; } } return res ; } } ans , unit , ex_unit ; struct Segment_Tree { Matrix Mat , tag ; } t [ maxn << 2 ]; inline void init_1 (){ unit . a [ 2 ][ 1 ] = 1 ; } inline void init_2 (){ unit . a [ 3 ][ 2 ] = 1 ; } inline void init_3 (){ unit . a [ 1 ][ 3 ] = 1 ; } inline void init_4 ( int v ){ unit . a [ 4 ][ 1 ] = v ; } inline void init_5 ( int v ){ unit . a [ 2 ][ 2 ] = v ; } inline void init_6 ( int v ){ unit . a [ 3 ][ 3 ] = 0 , unit . a [ 4 ][ 3 ] = v ; } inline void pushdown ( int p ){ t [ p << 1 ]. tag = t [ p << 1 ]. tag * t [ p ]. tag ; t [ p << 1 | 1 ]. tag = t [ p << 1 | 1 ]. tag * t [ p ]. tag ; t [ p << 1 ]. Mat = t [ p << 1 ]. Mat * t [ p ]. tag ; t [ p << 1 | 1 ]. Mat = t [ p << 1 | 1 ]. Mat * t [ p ]. tag ; t [ p ]. tag . unit_init (); } inline void pushup ( int p ){ for ( register int i = 1 ; i <= 4 ; i ++ ){ t [ p ]. Mat . a [ 1 ][ i ] = 1l l * ( t [ p << 1 ]. Mat . a [ 1 ][ i ] + t [ p << 1 | 1 ]. Mat . a [ 1 ][ i ]); t [ p ]. Mat . a [ 1 ][ i ] -= ( t [ p ]. Mat . a [ 1 ][ i ] >= mod ) ? mod : 0 ; } } inline void built ( int l , int r , int p ){ t [ p ]. tag = ex_unit ; if ( l == r ){ read ( t [ p ]. Mat . a [ 1 ][ 1 ]); read ( t [ p ]. Mat . a [ 1 ][ 2 ]); read ( t [ p ]. Mat . a [ 1 ][ 3 ]); t [ p ]. Mat . a [ 1 ][ 4 ] = 1 ; return ; } int mid = ( l + r ) / 2 ; built ( l , mid , p << 1 ), built ( mid + 1 , r , p << 1 | 1 ), pushup ( p ); } inline void update ( int l , int r , int ql , int qr , int p , Matrix M ){ if ( ql <= l && r <= qr ){ t [ p ]. Mat = t [ p ]. Mat * M ; t [ p ]. tag = t [ p ]. tag * M ; return ; } pushdown ( p ); int mid = ( r + l ) >> 1 ; if ( mid >= ql ) update ( l , mid , ql , qr , p << 1 , M ); if ( qr > mid ) update ( mid + 1 , r , ql , qr , p << 1 | 1 , M ); pushup ( p ); } inline void query ( int l , int r , int ql , int qr , int p ){ if ( ql <= l && r <= qr ){ for ( register int i = 1 ; i <= 3 ; i ++ ){ ans . a [ 1 ][ i ] = ans . a [ 1 ][ i ] + t [ p ]. Mat . a [ 1 ][ i ]; ans . a [ 1 ][ i ] -= ( ans . a [ 1 ][ i ] >= mod ) ? mod : 0 ; } return ; } int mid = ( l + r ) >> 1 ; pushdown ( p ); if ( mid >= ql ) query ( l , mid , ql , qr , p << 1 ); if ( qr > mid ) query ( mid + 1 , r , ql , qr , p << 1 | 1 ); } int main (){ ex_unit . unit_init (), read ( n ), built ( 1 , n , 1 ), read ( m ); for ( register int i = 1 ; i <= m ; i ++ ){ unit = ex_unit ; int opt , l , r , v ; read ( opt ); read ( l ); read ( r ); if ( opt == 1 ) init_1 (), update ( 1 , n , l , r , 1 , unit ); if ( opt == 2 ) init_2 (), update ( 1 , n , l , r , 1 , unit ); if ( opt == 3 ) init_3 (), update ( 1 , n , l , r , 1 , unit ); if ( opt == 4 ) read ( v ), init_4 ( v ), update ( 1 , n , l , r , 1 , unit ); if ( opt == 5 ) read ( v ), init_5 ( v ), update ( 1 , n , l , r , 1 , unit ); if ( opt == 6 ) read ( v ), init_6 ( v ), update ( 1 , n , l , r , 1 , unit ); if ( opt == 7 ) memset ( ans . a , 0 , sizeof ( ans . a )), query ( 1 , n , l , r , 1 ), printf ( \"%d %d %d \\n \" , ans . a [ 1 ][ 1 ], ans . a [ 1 ][ 2 ], ans . a [ 1 ][ 3 ]); } return 0 ; } \u300cLibreOJ 6208\u300d\u6811\u4e0a\u8be2\u95ee \u00b6 \u6709\u4e00\u68f5 \\(n\\) \u8282\u70b9\u7684\u6811\uff0c\u6839\u4e3a \\(1\\) \u53f7\u8282\u70b9\u3002\u6bcf\u4e2a\u8282\u70b9\u6709\u4e24\u4e2a\u6743\u503c \\(k_i, t_i\\) \uff0c\u521d\u59cb\u503c\u5747\u4e3a \\(0\\) \u3002 \u7ed9\u51fa\u4e09\u79cd\u64cd\u4f5c\uff1a \\(\\operatorname{Add}( x , d )\\) \u64cd\u4f5c\uff1a\u5c06 \\(x\\) \u5230\u6839\u7684\u8def\u5f84\u4e0a\u6240\u6709\u70b9\u7684 \\(k_i\\leftarrow k_i + d\\) \\(\\operatorname{Mul}( x , d )\\) \u64cd\u4f5c\uff1a\u5c06 \\(x\\) \u5230\u6839\u7684\u8def\u5f84\u4e0a\u6240\u6709\u70b9\u7684 \\(t_i\\leftarrow t_i + d \\times k_i\\) \\(\\operatorname{Query}( x )\\) \u64cd\u4f5c\uff1a\u8be2\u95ee\u70b9 \\(x\\) \u7684\u6743\u503c \\(t_x\\) \\(n,~m \\leq 100000, ~-10 \\leq d \\leq 10\\) \u82e5\u76f4\u63a5\u601d\u8003\uff0c\u4e0b\u653e\u64cd\u4f5c\u548c\u7ef4\u62a4\u4fe1\u606f\u5e76\u4e0d\u662f\u5f88\u597d\u60f3\u3002\u4f46\u662f\u77e9\u9635\u53ef\u4ee5\u8f7b\u677e\u5730\u8868\u8fbe\u3002 \\[ \\begin{aligned} \\begin{bmatrix}k & t & 1 \\end{bmatrix} \\begin{bmatrix} 1 & 0 & 0 \\\\ 0 & 1 & 0 \\\\ d & 0 & 1 \\end{bmatrix} &= \\begin{bmatrix}k+d & t & 1 \\end{bmatrix}\\\\ \\begin{bmatrix}k & t & 1 \\end{bmatrix} \\begin{bmatrix} 1 & d & 0 \\\\ 0 & 1 & 0 \\\\ 0 & 0 & 1 \\end{bmatrix} &= \\begin{bmatrix}k & t+d \\times k & 1 \\end{bmatrix} \\end{aligned} \\]","title":"\u77e9\u9635\u4e58\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/#_1","text":"","title":"\u77e9\u9635"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/#definition","text":"\u77e9\u9635\u662f\u5565\u5e94\u8be5\u4e0d\u7528\u8bf4\u4e86\u5427\u3002 \u4e00\u822c\u8868\u793a\u7684\u65f6\u5019\u7528\u5927\u5199\u5b57\u6bcd\u8868\u793a\u77e9\u9635\u3002\u7528\u5c0f\u5199\u5b57\u6bcd\u52a0\u4e00\u4e2a\u4e8c\u5143\u7ec4\u4e0b\u6807\u8868\u793a\u77e9\u9635\u91cc\u7684\u5143\u7d20\u3002 \u6bd4\u5982 \\(A\\) \u4e3a\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635\uff1a \u8fd9\u91cc \\(n\\times m\\) \u6307 \\(n\\) \u884c \\(m\\) \u5217\u3002 \\[A=\\begin{bmatrix} a_{1,1} & \\cdots & a_{1,m} \\\\ \\vdots & \\ddots & \\vdots \\\\ a_{n,1} & \\cdots & a_{n,m}\\end{bmatrix}\\] \\(a_{i,j}\\) \u5c31\u8868\u793a\u77e9\u9635 \\(A\\) \u5f53\u4e2d\u7b2c \\(i\\) \u884c\u7b2c \\(j\\) \u5217\u7684\u5143\u7d20\u3002 \uff08\u7ebf\u6027\u4ee3\u6570\u91cc\u4e0d\u662f\u7ecf\u5e38\u8bf4\u884c\u5217\u5f0f\u5417\uff0c\u6240\u4ee5\u662f \u884c \\(\\times\\) \u5217 \u554a\uff08\u5212\u6389\uff09\uff09 \u4e5f\u53ef\u4ee5\u7b80\u8bb0\u4e3a \\(A=(a_{i,j})\\) \u3002 \u5411\u91cf\uff1a\u6ce8\u610f\u8fd9\u91cc\u7684\u5411\u91cf\u548c\u51e0\u4f55\u91cc\u7684\u5411\u91cf\u7684\u4e0d\u540c\u3002 \u4e00\u822c\u628a \\(n\\) \u4e2a\u5b9e\u6570\u7ec4\u6210\u7684 \\(n\\) \u5143\u7ec4\u79f0\u4e3a\u5411\u91cf\u3002 \u5982\u679c\u5b83\u8868\u793a\u4e3a\u4e00\u4e2a \\(1\\times n\\) \u7684\u77e9\u9635\uff0c\u5219\u79f0\u4e3a\u884c\u5411\u91cf\uff0c\u5982\u679c\u662f \\(n \\times 1\\) \uff0c\u5219\u79f0\u4e3a\u5217\u5411\u91cf\uff1a \u884c\u5411\u91cf\uff1a \\((a_1,a_2,a_3,...,a_n)\\) \u5217\u5411\u91cf\uff1a \\(\\begin{bmatrix}a_1 \\\\ a_2 \\\\ \\vdots \\\\ a_n \\end{bmatrix}\\) \u4e00\u822c\u90fd\u662f\u7528\u5217\u5411\u91cf\uff08\u65b9\u4fbf\u4e00\u70b9\uff09\uff0c\u4e00\u822c\u4f1a\u7528\u9ed1\u4f53\u659c\u4f53\u8868\u793a\u5217\u5411\u91cf\u3002 \u6709\u5174\u8da3\u7684\u53ef\u4ee5\u4e86\u89e3\u4e00\u4e0b \\(n\\) \u7ef4\u6b27\u51e0\u91cc\u5fb7\u7a7a\u95f4\uff08\u53ef\u4ee5\u8003\u8651\u770b\u770b\u300a\u7ebf\u6027\u4ee3\u6570\u300b\uff09\u3002 \u5355\u4f4d\u77e9\u9635\uff08 \\(I\\) \uff09\uff1a \u5bf9\u4e8e\u4e00\u4e2a \\(n \\times n\\) \u7684\u77e9\u9635 \\(A\\) \uff0c\u5982\u679c\u6ee1\u8db3 \\(\\forall i ,a_{i,i}=1,\\text{Others}=0\\) \uff0c\u90a3\u4e48\u79f0 \\(A\\) \u662f\u4e00\u4e2a\u5355\u4f4d\u77e9\u9635\uff0c\u4e00\u822c\u8bb0\u4f5c \\(I\\) \u6bd4\u5982\uff1a \\[I=\\begin{bmatrix}1 &0 & 0 \\\\ 0& 1 & 0 \\\\ 0 & 0& 1\\end{bmatrix}\\]","title":"Definition"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/#_2","text":"\\(\\alpha\\) \u662f\u4e00\u4e2a\u6807\u91cf\uff0c \\(A\\) \u662f\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635\uff0c \u5219 \\(\\alpha A=B\\) \u662f\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635\uff0c\u4e14 \\(B_{i,j}=\\alpha\\times A_{i,j}\\) \u3002 \u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u5206\u914d\u5f8b\u3002","title":"\u6807\u91cf\u4e58\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/#_3","text":"\\(A\\) \u662f\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635\uff0c \\(B\\) \u662f\u4e00\u4e2a \\(n\\times m\\) \u7684\u77e9\u9635\uff0c \u5219\u4ed6\u4eec\u8fdb\u884c\u77e9\u9635\u52a0\u6cd5 \\(A+B\\) \u5f97\u5230\u7684\u7ed3\u679c\u77e9\u9635 \\(C\\) \u662f\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635\u3002 \u4e14 \\(C_{i,j}=A_{i,j}+B_{i,j}\\) \u3002 \u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u4ea4\u6362\u5f8b\u3002","title":"\u77e9\u9635\u52a0\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/#_4","text":"\u91cd\u5934\u620f\u3002 \\(A\\) \u662f\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635\uff0c \\(B\\) \u662f\u4e00\u4e2a \\(m \\times k\\) \u7684\u77e9\u9635\u3002 \u6ce8\u610f\uff0c \\(A\\) \u7684\u5217\u6570\u548c \\(B\\) \u7684\u884c\u6570\u5fc5\u987b\u76f8\u7b49\uff01 \u90a3\u4e48\u4ed6\u4eec\u8fdb\u884c\u77e9\u9635\u4e58\u6cd5 \\(A \\times B\\) \u7684\u5230\u7684\u7ed3\u679c\u77e9\u9635 \\(C\\) \u662f\u4e00\u4e2a \\(n \\times k\\) \u7684\u77e9\u9635\u3002 \u4e14\u6ee1\u8db3\uff1a \\[C_{i,j}=\\sum\\limits_{k=1}^m A_{i,k}\\times B_{k,j}\\] \u5f62\u8c61\u7684\u89e3\u91ca\u5c31\u662f\uff0c \\(C_{i,j}\\) \u7b49\u4e8e \\(A\\) \u7684\u7b2c \\(i\\) \u884c\u548c \\(B\\) \u7684\u7b2c \\(j\\) \u5217\u4e00\u4e00\u5bf9\u5e94\u5730\u4e58\u8d77\u6765\u3002 \u6ce8\u610f\uff1a\u77e9\u9635\u4e58\u6cd5 \u4e0d\u4e00\u5b9a \u6ee1\u8db3\u4ea4\u6362\u5f8b\uff01\uff01 \u4f46\u662f\u5b83\u6ee1\u8db3 \u7ed3\u5408\u5f8b \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 struct Matrix { int a [ si ][ si ]; Matrix (){ memset ( a , 0 , sizeof a ); } inline Matrix operator * ( const Matrix & B ) const { Matrix C , A =* this ; for ( register int i = 1 ; i <= cnt_n ; ++ i ){ for ( register int j = 1 ; j <= cnt_k ; ++ j ){ for ( register int k = 1 ; k <= cnt_m ; ++ k ){ C . a [ i ][ j ] += A . a [ i ][ k ] * B . a [ k ][ j ]; } } } return C ; // \u6700\u597d\u5faa\u73af\u7684\u65f6\u5019\u4e0d\u8981\u7528 si\u3002 // \u7528\u4e00\u4e2a\u8bbe\u5b9a\u597d\u7684\u5e38\u6570\u6216\u8005\u9898\u76ee\u7ed9\u7684\u53d8\u91cf\u4f1a\u6bd4\u8f83\u597d\u3002 } }; \u5982\u679c\u88ab\u5361\u5e38\u4e86\uff0c\u53ef\u4ee5\u8003\u8651\u624b\u52a8\u5c55\u5f00\u5185\u5c42\u5faa\u73af\u3002 \u8981\u6c42\u53d6\u6a21\u7684\u8bdd\u624b\u52a8\u52a0\u4e0a\u5c31\u884c\u3002","title":"\u77e9\u9635\u4e58\u6cd5"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/#_5","text":"\u56e0\u4e3a\u77e9\u9635\u4e58\u6cd5\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u6240\u4ee5\u4e00\u4e2a\u77e9\u9635\u7684 \\(k\\) \u6b21\u5e42\u5b9a\u4e49\u4e3a\uff1a \\[A^k=\\begin{matrix}\\underbrace{A \\times A\\times A \\dots \\times A}\\\\k \\text{ times}\\end{matrix}\\] \u56e0\u4e3a\u6240\u6709\u6ee1\u8db3\u7ed3\u5408\u5f8b\u7684\u5143\u7b97\u90fd\u53ef\u4ee5\u4f7f\u7528\u5feb\u901f\u5e42\u6c42\u89e3\u3002 \u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u77e9\u9635\u4e58\u6cd5\u7684\u7ed3\u5408\u5f8b\u5199\u51fa\u4e00\u4e2a\u77e9\u9635\u5feb\u901f\u5e42\u7b97\u6cd5\uff1a 1 2 3 4 5 6 7 Matrix Ans , A ; inline Matrix Qpow ( int b ){ for (; b ; b >>= 1 ){ if ( b & 1 ) Ans = Ans * A ; A = A * A ; } return Ans ; } // \u6709\u7684\u65f6\u5019\u6839\u636e\u60c5\u51b5\u9700\u8981\u521d\u59cb\u5316\u4e00\u4e0b Ans.","title":"\u77e9\u9635\u5feb\u901f\u5e42"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/#_6","text":"\u7ed9\u4f60\u4e00\u4e2a\u6570\u5b57 \\(n\\) \uff0c\u6c42\u51fa \\(Fib_n \\text{ mod }998244353 ,n \\le 1e18\\) \u3002 \\(Fib\\) \u662f\u6590\u6ce2\u90a3\u5951\u6570\u5217\u3002 \u770b\u5230 \\(n\\) \u7684\u8303\u56f4\u53d1\u73b0\u76f4\u63a5\u9012\u63a8\u660e\u663e\u7206\u70b8\u3002 \u6240\u4ee5\u8003\u8651\u628a \\(Fib_i,Fib_{i-1}\\) \u8868\u793a\u6210\u4e00\u4e2a\u884c\u5411\u91cf \\(\\begin{bmatrix} Fib_i & Fib_{i-1} \\end{bmatrix}\\) \u7136\u540e\u6211\u4eec\u60f3\u628a\u9012\u63a8\u5f0f\u5b50\u8868\u793a\u6210\u77e9\u9635\u4e58\u6cd5\u7684\u5f62\u5f0f\u518d\u5229\u7528\u77e9\u9635\u5feb\u901f\u5e42\u8fdb\u884c\u9ad8\u901f\u9012\u63a8\uff1a \\(\\begin{bmatrix} Fib_{i-1} & Fib_{i-2} \\end{bmatrix} \\times ? = \\begin{bmatrix} Fib_i & Fib_{i-1} \\end{bmatrix}\\) \u4e0d\u59a8\u8bbe\u8fd9\u4e2a \\(?\\) \u4e3a\u4e00\u4e2a\u77e9\u9635 \\(base\\) \u3002 \u6839\u636e\u77e9\u9635\u4e58\u6cd5\u7684\u5b9a\u4e49\uff0c \\(base\\) \u5e94\u8be5\u662f\u4e00\u4e2a \\(2\\times 2\\) \u7684\u77e9\u9635\u3002 \u8003\u8651\u5217\u51fa\u539f\u6765\u7684\u9012\u63a8\u5f0f\uff1a \\(Fib_{n}=Fib_{n-1}+Fib_{n-2}\\) \u3002 \u53d1\u73b0\u7ed3\u679c\u77e9\u9635\u7684 \\((1,1)\\) \u8fd9\u4e2a\u4f4d\u7f6e\u662f \\(Fib_i\\) \uff0c\u800c\u8fd9\u4e2a\u4f4d\u7f6e \\(C_{1,1}\\) \u5e94\u8be5\u662f\u7b49\u4e8e \\(A_{1,1}\\times B_{1,1}+A_{1,2}\\times B_{2,1}\\) \u4e5f\u5c31\u662f \\(Fib_{i-1} \\times B_{1,1}+Fib_{i-2}\\times B_{2,1}\\) \u6240\u4ee5 \\(B_{1,1}\\) \u548c \\(B_{2,1}\\) \u90fd\u662f \\(1\\) \uff1a \\(\\begin{bmatrix}1\\\\1\\end{bmatrix}\\) \u540c\u7406\u53ef\u4ee5\u5f97\u5230 \\(B_{2,1}\\) \u548c \\(B_{2,2}\\) \uff1a \\(\\begin{bmatrix}1\\\\0\\end{bmatrix}\\) \u6240\u4ee5 \\(base=\\begin{bmatrix}1 & 1\\\\ 1 & 0\\end{bmatrix}\\) \u539f\u5f0f\u53ef\u4ee5\u5316\u4e3a \\(\\begin{bmatrix} Fib_{i-1} & Fib_{i-2} \\end{bmatrix} \\times \\begin{bmatrix}1 & 1\\\\ 1 & 0\\end{bmatrix} = \\begin{bmatrix} Fib_i & Fib_{i-1} \\end{bmatrix}\\) \u3002 \u90a3\u4e48\u8bbe \\(Ans=\\begin{bmatrix} 1 & 1 \\end{bmatrix}=\\begin{bmatrix} Fib_2 & Fib_1\\end{bmatrix}\\) \u6240\u4ee5 \\(Fib_n\\) \u5c31\u662f \\(Ans \\times base^{n-2}\\) \u7684 \\((1,1)\\) \u3002 \u5199\u4e00\u4e2a\u77e9\u9635\u5feb\u901f\u5e42\u5373\u53ef\u3002 \u5e7f\u4e49\u6590\u6ce2\u90a3\u5951\u6570\u5217\u4e5f\u662f\u4e00\u6837\u7684\u3002 \u7136\u540e\u4e3e\u4e00\u4e2a OI-Wiki \u4e0a\u7684\u4f8b\u5b50 \\[ f_{1} = f_{2} = 0\\\\ f_{n} = 7f_{n-1}+6f_{n-2}+5n+4\\times 3^n \\] \u53d1\u73b0 \\(f_n\\) \u548c \\(f_{n-1}, f_{n-2}, n\\) \u6709\u5173\uff0c\u4e8e\u662f\u8003\u8651\u6784\u9020\u4e00\u4e2a\u77e9\u9635\u63cf\u8ff0\u72b6\u6001\u3002 \u4f46\u662f\u5982\u679c\u77e9\u9635\u4ec5\u6709\u8fd9\u4e09\u4e2a\u5143\u7d20 \\(\\begin{bmatrix}f_n& f_{n-1}& n\\end{bmatrix}\\) \u662f\u96be\u4ee5\u6784\u9020\u51fa\u8f6c\u79fb\u65b9\u7a0b\u7684\uff0c\u56e0\u4e3a\u4e58\u65b9\u8fd0\u7b97\u548c \\(+1\\) \u65e0\u6cd5\u7528\u77e9\u9635\u63cf\u8ff0\u3002 \u4e8e\u662f\u8003\u8651\u6784\u9020\u4e00\u4e2a\u66f4\u5927\u7684\u77e9\u9635\u3002 \\[ \\begin{bmatrix}f_n& f_{n-1}& n& 3^n & 1\\end{bmatrix} \\] \u6211\u4eec\u5e0c\u671b\u6784\u9020\u4e00\u4e2a\u9012\u63a8\u77e9\u9635\u53ef\u4ee5\u8f6c\u79fb\u5230 \\[ \\begin{bmatrix} f_{n+1}& f_{n}& n+1& 3^{n+1} & 1 \\end{bmatrix} \\] \u8f6c\u79fb\u77e9\u9635\u5373\u4e3a \\[ \\begin{bmatrix} 7 & 1 & 0 & 0 & 0\\\\ 6 & 0 & 0 & 0 & 0\\\\ 5 & 0 & 1 & 0 & 0\\\\ 12 & 0 & 0 & 3 & 0\\\\ 5 & 0 & 1 & 0 & 1 \\end{bmatrix} \\]","title":"\u77e9\u9635\u4e58\u6cd5\u4f18\u5316\u9012\u63a8"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/#_7","text":"","title":"\u77e9\u9635\u7684\u4e00\u4e9b\u5e38\u89c1\u5e94\u7528"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/#k","text":"\u9996\u5148\u7528\u90bb\u63a5\u77e9\u9635 \\(A\\) \u5b58\u56fe\u3002 \u7136\u540e \\(A[i,j]\\) \u5c31\u53ef\u4ee5\u770b\u505a \\(i \\to j\\) \u7ecf\u8fc7\u6070\u597d\u4e00\u6761\u8fb9\u7684\u6700\u77ed\u8def\u3002 \u8003\u8651\u6c42\u51fa\u7ecf\u8fc7\u6070\u597d\u4e24\u6761\u8fb9\u7684\u6700\u77ed\u8def \\(B\\) \u3002 \u53ef\u4ee5\u53d1\u73b0 \\(B[i,j]=\\min\\limits_{1\\le k \\le n}\\{A[i,k]+A[k,j]\\}\\) \u8fd9\u91cc\u5c31\u662f\u7528\u4e86\u7c7b\u4f3c Floyd \u7684\u679a\u4e3e\u4e2d\u95f4\u70b9\u601d\u60f3\u3002 \u7c7b\u4f3c\u7684\u53ef\u4ee5\u5f97\u5230\u7ecf\u8fc7\u6070\u597d \\(K\\) \u6761\u8fb9\u7684\u6700\u77ed\u8def\u3002 \u8bbe \\(A^{qwq}\\) \u8868\u793a\u7ecf\u8fc7\u6070\u597d \\(qwq\\) \u6761\u8fb9\u7684\u6700\u77ed\u8def\u3002 \u53ef\u4ee5\u5f97\u5230 \\(A^{qwq}[i,j]=\\min\\limits_{1\\le k \\le n}\\{A^p[i,k]+A^q[k,j]\\},qwq=p+q\\) \u53d1\u73b0\u8fd9\u73a9\u610f\u513f\u5c31\u662f\u4e2a\u7c7b\u4f3c\u4e8e\u77e9\u9635\u4e58\u6cd5\u7684\u4e1c\u897f\u3002 \u628a \\(\\sum\\) \u6362\u6210 \\(\\min\\) \uff0c\u628a \\(\\times\\) \u6362\u6210 \\(+\\) \u3002 \u521a\u597d\u8fd9\u4e2a\u4e1c\u897f\u4ecd\u7136\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u77e9\u9635\u5feb\u901f\u5e42 \\(n^3\\log K\\) \u6c42 \\(A^K\\) \u3002","title":"\u6070\u597d K \u6761\u8fb9 \u6700\u77ed\u8def"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/#_8","text":"\u8fd9\u91cc\u8fd8\u662f\u76f4\u63a5\u8d34\u7684 OI-Wiki \u7684\u4f8b\u5b50\uff0c\u56e0\u4e3a\u6211\u61d2\u5f97\u5199\u4e86\u3002","title":"\u77e9\u9635\u8868\u8fbe\u4fee\u6539"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/#thusch-2017","text":"\u5927\u9b54\u6cd5\u5e08\u5c0f L \u5236\u4f5c\u4e86 \\(n\\) \u4e2a\u9b54\u529b\u6c34\u6676\u7403\uff0c\u6bcf\u4e2a\u6c34\u6676\u7403\u6709\u6c34\u3001\u706b\u3001\u571f\u4e09\u4e2a\u5c5e\u6027\u7684\u80fd\u91cf\u503c\u3002 \u5c0f L \u628a\u8fd9 \\(n\\) \u4e2a\u6c34\u6676\u7403\u5728\u5730\u4e0a\u4ece\u524d\u5411\u540e\u6392\u6210\u4e00\u884c\uff0c\u7136\u540e\u5f00\u59cb\u4eca\u5929\u7684\u9b54\u6cd5\u8868\u6f14\u3002 \u6211\u4eec\u7528 \\(A_i,\\ B_i,\\ C_i\\) \u5206\u522b\u8868\u793a\u4ece\u524d\u5411\u540e\u7b2c \\(i\\) \u4e2a\u6c34\u6676\u7403\uff08\u4e0b\u6807\u4ece \\(1\\) \u5f00\u59cb\uff09\u7684\u6c34\u3001\u706b\u3001\u571f\u7684\u80fd\u91cf\u503c\u3002 \u5c0f L \u8ba1\u5212\u65bd\u5c55 \\(m\\) \u6b21\u9b54\u6cd5\u3002\u6bcf\u6b21\uff0c\u4ed6\u4f1a\u9009\u62e9\u4e00\u4e2a\u533a\u95f4 \\([l, r]\\) \uff0c\u7136\u540e\u65bd\u5c55\u4ee5\u4e0b \\(3\\) \u5927\u7c7b\u3001 \\(7\\) \u79cd\u9b54\u6cd5\u4e4b\u4e00\uff1a \u9b54\u529b\u6fc0\u53d1\uff1a\u4ee4\u533a\u95f4\u91cc\u6bcf\u4e2a\u6c34\u6676\u7403\u4e2d \u7279\u5b9a\u5c5e\u6027 \u7684\u80fd\u91cf\u7206\u53d1\uff0c\u4ece\u800c\u4f7f\u53e6\u4e00\u4e2a \u7279\u5b9a\u5c5e\u6027 \u7684\u80fd\u91cf\u589e\u5f3a\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6709\u4ee5\u4e0b\u4e09\u79cd\u53ef\u80fd\u7684\u8868\u73b0\u5f62\u5f0f\uff1a \u706b\u5143\u7d20\u6fc0\u53d1\u6c34\u5143\u7d20\u80fd\u91cf\uff1a\u4ee4 \\(A_i = A_i + B_i\\) \u3002 \u571f\u5143\u7d20\u6fc0\u53d1\u706b\u5143\u7d20\u80fd\u91cf\uff1a\u4ee4 \\(B_i = B_i + C_i\\) \u3002 \u6c34\u5143\u7d20\u6fc0\u53d1\u571f\u5143\u7d20\u80fd\u91cf\uff1a\u4ee4 \\(C_i = C_i + A_i\\) \u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u589e\u5f3a\u4e00\u79cd\u5c5e\u6027\u7684\u80fd\u91cf\u5e76\u4e0d\u4f1a\u6539\u53d8\u53e6\u4e00\u79cd\u5c5e\u6027\u7684\u80fd\u91cf\uff0c\u4f8b\u5982 \\(A_i = A_i + B_i\\) \u5e76\u4e0d\u4f1a\u4f7f \\(B_i\\) \u589e\u52a0\u6216\u51cf\u5c11\u3002 \u9b54\u529b\u589e\u5f3a\uff1a\u5c0f L \u6325\u821e\u6cd5\u6756\uff0c\u6d88\u8017\u81ea\u8eab \\(v\\) \u70b9\u6cd5\u529b\u503c\uff0c\u6765\u6539\u53d8\u533a\u95f4\u91cc\u6bcf\u4e2a\u6c34\u6676\u7403\u7684 \u7279\u5b9a\u5c5e\u6027 \u7684\u80fd\u91cf\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6709\u4ee5\u4e0b\u4e09\u79cd\u53ef\u80fd\u7684\u8868\u73b0\u5f62\u5f0f\uff1a \u706b\u5143\u7d20\u80fd\u91cf\u5b9a\u503c\u589e\u5f3a\uff1a\u4ee4 \\(A_i = A_i + v\\) \u3002 \u6c34\u5143\u7d20\u80fd\u91cf\u7ffb\u500d\u589e\u5f3a\uff1a\u4ee4 \\(B_i=B_i \\cdot v\\) \u3002 \u571f\u5143\u7d20\u80fd\u91cf\u5438\u6536\u878d\u5408\uff1a\u4ee4 \\(C_i = v\\) \u3002 \u9b54\u529b\u91ca\u653e\uff1a\u5c0f L \u5c06\u533a\u95f4\u91cc\u6240\u6709\u6c34\u6676\u7403\u7684\u80fd\u91cf\u805a\u96c6\u5728\u4e00\u8d77\uff0c\u878d\u5408\u6210\u4e00\u4e2a\u65b0\u7684\u6c34\u6676\u7403\uff0c\u7136\u540e\u9001\u7ed9\u573a\u5916\u89c2\u4f17\u3002 \u751f\u6210\u7684\u6c34\u6676\u7403\u6bcf\u79cd\u5c5e\u6027\u7684\u80fd\u91cf\u503c\u7b49\u4e8e\u533a\u95f4\u5185\u6240\u6709\u6c34\u6676\u7403\u5bf9\u5e94\u80fd\u91cf\u503c\u7684\u4ee3\u6570\u548c\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u9b54\u529b\u91ca\u653e\u7684\u8fc7\u7a0b\u4e0d\u4f1a\u771f\u6b63\u6539\u53d8\u533a\u95f4\u5185\u6c34\u6676\u7403\u7684\u80fd\u91cf \u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u5c0f L \u5236\u9020\u548c\u878d\u5408\u7684\u6c34\u6676\u7403\u7684\u539f\u6750\u6599\u90fd\u662f\u5b9a\u5236\u7248\u7684 OI \u5de5\u5382\u6c34\u6676\uff0c\u6240\u4ee5\u8fd9\u4e9b\u6c34\u6676\u7403\u6709\u4e00\u4e2a\u80fd\u91cf\u9608\u503c \\(998244353\\) \u3002\u5f53\u6c34\u6676\u7403\u4e2d\u67d0\u79cd\u5c5e\u6027\u7684\u80fd\u91cf\u503c\u5927\u4e8e\u7b49\u4e8e\u8fd9\u4e2a\u9608\u503c\u65f6\uff0c\u80fd\u91cf\u503c\u4f1a\u81ea\u52a8\u5bf9\u9608\u503c\u53d6\u6a21\uff0c\u4ece\u800c\u907f\u514d\u6c34\u6676\u7403\u7206\u70b8\u3002 \u5c0f W \u4e3a\u5c0f L\uff08\u552f\u4e00\u7684\uff09\u89c2\u4f17\uff0c\u56f4\u89c2\u4e86\u6574\u4e2a\u8868\u6f14\uff0c\u5e76\u4e14\u6536\u5230\u4e86\u5c0f L \u5728\u8868\u6f14\u4e2d\u878d\u5408\u7684\u6bcf\u4e2a\u6c34\u6676\u7403\u3002\u5c0f W \u60f3\u77e5\u9053\uff0c\u8fd9\u4e9b\u6c34\u6676\u7403\u8574\u6db5\u7684\u4e09\u79cd\u5c5e\u6027\u7684\u80fd\u91cf\u503c\u5206\u522b\u662f\u591a\u5c11\u3002 \u7531\u4e8e\u77e9\u9635\u7684\u7ed3\u5408\u5f8b\u548c\u5206\u914d\u5f8b\u6210\u7acb\uff0c\u5355\u70b9\u4fee\u6539\u53ef\u4ee5\u81ea\u7136\u5730\u63a8\u5e7f\u5230\u533a\u95f4\uff0c\u5373\u63a8\u51fa\u77e9\u9635\u540e\u76f4\u63a5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u77e9\u9635\u4e58\u79ef\u5373\u53ef\u3002 \u4e0b\u9762\u5c06\u4e3e\u51e0\u4e2a\u4f8b\u5b50\u3002 \\(A_i = A_i + v\\) \u7684\u8f6c\u79fb \\[ \\begin{bmatrix} A & B & C & 1 \\end{bmatrix} \\begin{bmatrix} 1 & 0 & 0 & 0\\\\ 0 & 1 & 0 & 0\\\\ 0 & 0 & 1 & 0\\\\ v & 0 & 0 & 1\\\\ \\end{bmatrix}= \\begin{bmatrix} A+v & B & C & 1\\\\ \\end{bmatrix} \\] \\(B_i=B_i \\cdot v\\) \u7684\u8f6c\u79fb \\[ \\begin{bmatrix} A & B & C & 1\\end{bmatrix}\\begin{bmatrix}1 & 0 & 0 & 0\\\\0 & v & 0 & 0\\\\0 & 0 &1& 0\\\\0 & 0 & 0 & 1\\\\\\end{bmatrix}=\\begin{bmatrix}A & B \\cdot v & C & 1\\\\\\end{bmatrix}\\] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 #include <cstdio> #include <iostream> #include <cstring> using namespace std ; constexpr int mod = 998244353 ; constexpr int maxn = 260000 ; int n , m ; template < class T > inline void read ( T & a ){ register char ch ; while ( ch = getchar (),( ch < '0' || ch > '9' ) && ch != '-' ); register bool f = ( ch == '-' ); register T x = f ? 0 : ch - '0' ; while ( ch = getchar (), ch >= '0' && ch <= '9' ) x = ( x << 3 ) + ( x << 1 ) + ( ch ^ 48 ); a = f ?- x : x ; } struct Matrix { int a [ 5 ][ 5 ]; Matrix (){ memset ( a , 0 , sizeof ( a )); } inline void unit_init (){ memset ( a , 0 , sizeof ( a )); for ( register int i = 1 ; i <= 4 ; i ++ ) a [ i ][ i ] = 1 ; } inline Matrix operator * ( const Matrix & M ){ Matrix res ; for ( register int i = 1 ; i <= 4 ; i ++ ){ for ( register int j = 1 ; j <= 4 ; j ++ ){ res . a [ i ][ j ] = ( res . a [ i ][ j ] + 1l l * a [ i ][ 1 ] * M . a [ 1 ][ j ]) % mod ; res . a [ i ][ j ] = ( res . a [ i ][ j ] + 1l l * a [ i ][ 2 ] * M . a [ 2 ][ j ]) % mod ; res . a [ i ][ j ] = ( res . a [ i ][ j ] + 1l l * a [ i ][ 3 ] * M . a [ 3 ][ j ]) % mod ; res . a [ i ][ j ] = ( res . a [ i ][ j ] + 1l l * a [ i ][ 4 ] * M . a [ 4 ][ j ]) % mod ; } } return res ; } inline Matrix operator + ( const Matrix & M ){ Matrix res ; for ( register int i = 1 ; i <= 4 ; i ++ ){ for ( register int j = 1 ; j <= 4 ; j ++ ){ res . a [ i ][ j ] = ( M . a [ i ][ j ] + a [ i ][ j ]) % mod ; } } return res ; } } ans , unit , ex_unit ; struct Segment_Tree { Matrix Mat , tag ; } t [ maxn << 2 ]; inline void init_1 (){ unit . a [ 2 ][ 1 ] = 1 ; } inline void init_2 (){ unit . a [ 3 ][ 2 ] = 1 ; } inline void init_3 (){ unit . a [ 1 ][ 3 ] = 1 ; } inline void init_4 ( int v ){ unit . a [ 4 ][ 1 ] = v ; } inline void init_5 ( int v ){ unit . a [ 2 ][ 2 ] = v ; } inline void init_6 ( int v ){ unit . a [ 3 ][ 3 ] = 0 , unit . a [ 4 ][ 3 ] = v ; } inline void pushdown ( int p ){ t [ p << 1 ]. tag = t [ p << 1 ]. tag * t [ p ]. tag ; t [ p << 1 | 1 ]. tag = t [ p << 1 | 1 ]. tag * t [ p ]. tag ; t [ p << 1 ]. Mat = t [ p << 1 ]. Mat * t [ p ]. tag ; t [ p << 1 | 1 ]. Mat = t [ p << 1 | 1 ]. Mat * t [ p ]. tag ; t [ p ]. tag . unit_init (); } inline void pushup ( int p ){ for ( register int i = 1 ; i <= 4 ; i ++ ){ t [ p ]. Mat . a [ 1 ][ i ] = 1l l * ( t [ p << 1 ]. Mat . a [ 1 ][ i ] + t [ p << 1 | 1 ]. Mat . a [ 1 ][ i ]); t [ p ]. Mat . a [ 1 ][ i ] -= ( t [ p ]. Mat . a [ 1 ][ i ] >= mod ) ? mod : 0 ; } } inline void built ( int l , int r , int p ){ t [ p ]. tag = ex_unit ; if ( l == r ){ read ( t [ p ]. Mat . a [ 1 ][ 1 ]); read ( t [ p ]. Mat . a [ 1 ][ 2 ]); read ( t [ p ]. Mat . a [ 1 ][ 3 ]); t [ p ]. Mat . a [ 1 ][ 4 ] = 1 ; return ; } int mid = ( l + r ) / 2 ; built ( l , mid , p << 1 ), built ( mid + 1 , r , p << 1 | 1 ), pushup ( p ); } inline void update ( int l , int r , int ql , int qr , int p , Matrix M ){ if ( ql <= l && r <= qr ){ t [ p ]. Mat = t [ p ]. Mat * M ; t [ p ]. tag = t [ p ]. tag * M ; return ; } pushdown ( p ); int mid = ( r + l ) >> 1 ; if ( mid >= ql ) update ( l , mid , ql , qr , p << 1 , M ); if ( qr > mid ) update ( mid + 1 , r , ql , qr , p << 1 | 1 , M ); pushup ( p ); } inline void query ( int l , int r , int ql , int qr , int p ){ if ( ql <= l && r <= qr ){ for ( register int i = 1 ; i <= 3 ; i ++ ){ ans . a [ 1 ][ i ] = ans . a [ 1 ][ i ] + t [ p ]. Mat . a [ 1 ][ i ]; ans . a [ 1 ][ i ] -= ( ans . a [ 1 ][ i ] >= mod ) ? mod : 0 ; } return ; } int mid = ( l + r ) >> 1 ; pushdown ( p ); if ( mid >= ql ) query ( l , mid , ql , qr , p << 1 ); if ( qr > mid ) query ( mid + 1 , r , ql , qr , p << 1 | 1 ); } int main (){ ex_unit . unit_init (), read ( n ), built ( 1 , n , 1 ), read ( m ); for ( register int i = 1 ; i <= m ; i ++ ){ unit = ex_unit ; int opt , l , r , v ; read ( opt ); read ( l ); read ( r ); if ( opt == 1 ) init_1 (), update ( 1 , n , l , r , 1 , unit ); if ( opt == 2 ) init_2 (), update ( 1 , n , l , r , 1 , unit ); if ( opt == 3 ) init_3 (), update ( 1 , n , l , r , 1 , unit ); if ( opt == 4 ) read ( v ), init_4 ( v ), update ( 1 , n , l , r , 1 , unit ); if ( opt == 5 ) read ( v ), init_5 ( v ), update ( 1 , n , l , r , 1 , unit ); if ( opt == 6 ) read ( v ), init_6 ( v ), update ( 1 , n , l , r , 1 , unit ); if ( opt == 7 ) memset ( ans . a , 0 , sizeof ( ans . a )), query ( 1 , n , l , r , 1 ), printf ( \"%d %d %d \\n \" , ans . a [ 1 ][ 1 ], ans . a [ 1 ][ 2 ], ans . a [ 1 ][ 3 ]); } return 0 ; }","title":"\u300cTHUSCH 2017\u300d\u5927\u9b54\u6cd5\u5e08"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6/%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/#libreoj-6208","text":"\u6709\u4e00\u68f5 \\(n\\) \u8282\u70b9\u7684\u6811\uff0c\u6839\u4e3a \\(1\\) \u53f7\u8282\u70b9\u3002\u6bcf\u4e2a\u8282\u70b9\u6709\u4e24\u4e2a\u6743\u503c \\(k_i, t_i\\) \uff0c\u521d\u59cb\u503c\u5747\u4e3a \\(0\\) \u3002 \u7ed9\u51fa\u4e09\u79cd\u64cd\u4f5c\uff1a \\(\\operatorname{Add}( x , d )\\) \u64cd\u4f5c\uff1a\u5c06 \\(x\\) \u5230\u6839\u7684\u8def\u5f84\u4e0a\u6240\u6709\u70b9\u7684 \\(k_i\\leftarrow k_i + d\\) \\(\\operatorname{Mul}( x , d )\\) \u64cd\u4f5c\uff1a\u5c06 \\(x\\) \u5230\u6839\u7684\u8def\u5f84\u4e0a\u6240\u6709\u70b9\u7684 \\(t_i\\leftarrow t_i + d \\times k_i\\) \\(\\operatorname{Query}( x )\\) \u64cd\u4f5c\uff1a\u8be2\u95ee\u70b9 \\(x\\) \u7684\u6743\u503c \\(t_x\\) \\(n,~m \\leq 100000, ~-10 \\leq d \\leq 10\\) \u82e5\u76f4\u63a5\u601d\u8003\uff0c\u4e0b\u653e\u64cd\u4f5c\u548c\u7ef4\u62a4\u4fe1\u606f\u5e76\u4e0d\u662f\u5f88\u597d\u60f3\u3002\u4f46\u662f\u77e9\u9635\u53ef\u4ee5\u8f7b\u677e\u5730\u8868\u8fbe\u3002 \\[ \\begin{aligned} \\begin{bmatrix}k & t & 1 \\end{bmatrix} \\begin{bmatrix} 1 & 0 & 0 \\\\ 0 & 1 & 0 \\\\ d & 0 & 1 \\end{bmatrix} &= \\begin{bmatrix}k+d & t & 1 \\end{bmatrix}\\\\ \\begin{bmatrix}k & t & 1 \\end{bmatrix} \\begin{bmatrix} 1 & d & 0 \\\\ 0 & 1 & 0 \\\\ 0 & 0 & 1 \\end{bmatrix} &= \\begin{bmatrix}k & t+d \\times k & 1 \\end{bmatrix} \\end{aligned} \\]","title":"\u300cLibreOJ 6208\u300d\u6811\u4e0a\u8be2\u95ee"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/","text":"\u5355\u8c03\u961f\u5217 \u00b6 Introduction \u00b6 \u5355\u8c03\u961f\u5217\u4e00\u822c\u7528\u6765\u4f18\u5316\u8fd9\u4e00\u7c7b\u51b3\u7b56\u6709\u5355\u8c03\u6027\u7684\u95ee\u9898\uff1a \u6bd4\u5982\uff1a\u4e00\u4e2a\u5143\u7d20\u5f88\u660e\u663e\u4e0d\u53ef\u80fd\u8fdb\u5165\u51b3\u7b56\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5355\u8c03\u961f\u5217\u6765\u505a\u5230 \\(\\text{O}(1)\\) \u7684\u51b3\u7b56\u3002 Example \u00b6 \u8fd9\u91cc\u6765\u4e00\u9053\u9898\uff08\u6765\u81eaWC2016 by \u5b8b\u65b0\u6ce2\uff09 \u8fd9\u91cc\u76f8\u5f53\u4e8e\u662f\u5728\u4fdd\u8d28\u671f\u4e4b\u5185\uff0c\u6c42\u6bcf\u4e00\u5929\u6700\u5927\u80fd\u5403\u5230\u7684\u503c\u3002 \u8fd9\u91cc\u8003\u8651\u7ef4\u62a4\u4e00\u4e2a\u961f\u5217\uff0c\u961f\u5217\u5f53\u4e2d\u5355\u8c03\u4e0d\u4e0a\u5347\u3002 \u90a3\u4e48\u961f\u5934\u5c31\u662f\u6211\u4eec\u6240\u60f3\u8981\u7684\u7ed3\u679c\uff08\u6700\u4f18\uff09\u3002 Day1\uff1a 1 2 3 -------------- 80 -------------- \u8fd9\u91cc\u961f\u5934\u662f80. Day2: 1 2 3 ------------- 80 75 ------------- \u8fd9\u91cc\u961f\u5934\u4ecd\u7136\u662f80. Day3 \u8fd9\u91cc\u5f00\u59cb\u5c31\u8981\u6ce8\u610f\u4e86\uff0c\u6211\u4eec\u653e\u516578\uff0c\u4f46\u662f\u653e\u8fdb\u53bb\u4e4b\u540e\u5c31\u4e0d\u6ee1\u8db3\u6761\u4ef6\u4e86\u3002 \u4e3a\u4ec0\u4e48\uff1f \u4e0d\u662f\u56e0\u4e3a\u540e\u9762\u5c0f\u4e86\u5c31\u662f\u524d\u9762\u5927\u4e86\uff08\u8fd9\u91cc\u662f\u5355\u8c03\u4e0d\u4e0a\u5347\u6240\u4ee5\u662f\u8fd9\u6837\uff0c\u5176\u4ed6\u540c\u7406\uff09\u3002 \u4e0d\u8fc7\u6211\u4eec\u4e00\u822c\u8003\u8651\u540e\u9762\u5c0f\u4e86\uff08\u4ece\u540e\u9762\u8fdb\u961f\u51fa\u961f\uff09\u3002 \u90a3\u4e48\u5728\u63d2\u516578 \u4e4b\u524d\uff0c\u6211\u4eec\u5c31\u8981\u5f39\u51fa75 \uff08\u4ece\u540e\u65b9\uff09 1 2 3 4 5 6 7 8 9 10 11 ------------- 80 75(pop) ---> ------------- ------------- 80 <------ 78(push) ------------- ------------- 80 78 ------------- \u6b64\u65f6\u961f\u5934\u4ecd\u7136\u662f 80\u3002 \u8fd9\u91cc\u6211\u4eec\u4e0d\u96be\u770b\u51fa\uff0c\u5982\u679c\u5b58\u5728 \\(a_i <a_j\\) \u90a3\u4e48 \\(a_i\\) \u4e00\u5b9a\u4f1a\u88ab \\(a_j\\) \u66ff\u6362\u6389\u3002 \u56e0\u4e3a \\(a_i\\) \u4e0d\u4ec5\u65f6\u95f4\u9760\u524d\uff08\u66f4\u5feb\u8fc7\u671f\uff09\uff0c\u4ef7\u503c\u4e5f\u4e0d\u5927\u3002 \u6240\u4ee5 \\(a_i\\) \u5c31\u662f \u5197\u6742\u7684\u591a\u4f59\u51b3\u7b56\u3002 \u90a3\u4e48\u5355\u8c03\u961f\u5217\u5728\u7ef4\u62a4\u7684\u65f6\u5019\u7684\u610f\u4e49\u5c31\u662f\u53bb\u9664\u8fd9\u4e9b\u5197\u6742\u7684\u5143\u7d20\u3002 \u56e0\u4e3a\u6bcf\u4e2a\u5143\u7d20 \u53ea\u4f1a\u5165\u961f\u4e00\u6b21 \uff08\u6240\u4ee5\u8981\u5c0f\u5fc3\u67d0\u4e9b\u9898\u7684\u6761\u4ef6\uff09\uff0c\u6240\u4ee5 \u590d\u6742\u5ea6\u662f \\(\\text{O}(n)\\) \u7684\u3002 Day 4 1 2 3 ------------- 80 78 73 ------------- Day 5 \u8fd9\u91cc\u6839\u636e Day3\uff0c\u6211\u4eec\u9700\u8981\u628a78,73\u5f39\u51fa\u6765\u8ba9\u66f4\u597d\u7684 79 \u5165\u961f\u3002 \u6240\u4ee5\u961f\u5217\u5c31\u53d8\u6210\u4e86\u8fd9\u6837\uff1a 1 2 3 4 ------------- 80 79 ------------- poped:78 73 \u4f46\u662f\u6ce8\u610f\uff01\u8fd9\u91cc80\u8fc7\u671f\u4e86\uff0c\u6240\u4ee5\u8981\u628a80\u4e5f\u5f39\u51fa\uff08\u4ece\u961f\u5934\u5f39\u51fa\uff09 \u90a3\u4e48\u5c31\u662f\u8fd9\u6837\u7684\uff1a 1 2 3 ------------- <---80 79 ------------- \u6240\u4ee5\u7b2c\u4e94\u5929\u5c31\u662f 79 \u4e3a\u6700\u503c\u3002 \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\uff0c\u5728\u8fd9\u9053\u9898\u4f7f\u7528\u5355\u8c03\u961f\u5217\u65f6\uff0c\u8981\u6ce8\u610f\u4e00\u4e0b\u51e0\u70b9\uff1a \u961f\u5217\u4e2d\u59cb\u7ec8\u5355\u8c03 \u961f\u9996\u4e3a\u6700\u4f18\u60c5\u51b5 \u53ca\u65f6\u53bb\u9664\u5197\u6742\u60c5\u51b5 \u90a3\u4e48\u6211\u4eec\u6bcf\u4e00\u6b21\u5faa\u73af\u7684\u65f6\u5019\uff0c\u90fd\u68c0\u67e5\u4e00\u4e0b\u961f\u9996\u662f\u5426\u8fc7\u671f\u8fd8\u6709\u65b0\u5165\u961f\u5143\u7d20\u4f1a\u4e0d\u4f1a\u9020\u6210\u66f4\u65b0\u5c31\u597d\u4e86\u3002 Summary \u00b6 \u603b\u7ed3\u4e00\u4e0b\uff1a\u4e5f\u5c31\u662f\u8fd9\u6837\u7684 \u8fd9\u91cc\u7ed9\u51fa\u7ef4\u62a4\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(k\\) \u7684\u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u503c\u7684\u4ee3\u7801\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #include <bits/stdc++.h> using namespace std ; const int si = 1e6 + 10 ; int n , k ; int a [ si ]; int q1 [ si ], head1 = 1 , tail1 = 0 ; //\u8fd9\u6837\u5b50\u8d4b\u503c\u662f\u4e3a\u4e86\u8ba9\u7b2c\u4e00\u4e2a\u5143\u7d20\u80fd\u5165\u961f\u3002 int q2 [ si ], head2 = 1 , tail2 = 0 ; int ans [ si ][ 2 ]; //0->min 1->max int main (){ scanf ( \"%d%d\" , & n , & k ); for ( register int i = 1 ; i <= n ; ++ i ){ scanf ( \"%d\" , & a [ i ]); } for ( register int i = 1 ; i <= n ; ++ i ){ while ( head1 <= tail1 && q1 [ head1 ] + k <= i ) head1 ++ ; //\u6392\u9664\u961f\u5934\u8fc7\u671f while ( head1 <= tail1 && a [ i ] <= a [ q1 [ tail1 ]]) tail1 -- ; //\u6392\u9664\u961f\u5c3e\u5197\u6742\u3002 q1 [ ++ tail1 ] = i ; while ( head2 <= tail2 && q2 [ head2 ] + k <= i ) head2 ++ ; while ( head2 <= tail2 && a [ i ] >= a [ q2 [ tail2 ]]) tail2 -- ; q2 [ ++ tail2 ] = i ; ans [ i ][ 0 ] = a [ q1 [ head1 ]], ans [ i ][ 1 ] = a [ q2 [ head2 ]]; //\u6ce8\u610f\u8fd9\u91ccq\u5b58\u7684\u662f\u4e0b\u6807\uff0c\u6240\u4ee5\u8981\u5c06\u5176\u4f5c\u4e3a\u4e0b\u6807\u3002 } for ( register int i = k ; i <= n ; ++ i ){ //k\u662f\u56e0\u4e3a\u5b83\u7684\u533a\u95f4\u957f\u5ea6\u5df2\u7ecf\u56fa\u5b9a\uff0c\u6240\u4ee5\u524d\u9762\u7684\u90a3\u4e9b\u957f\u5ea6\u4e0d\u6ee1\u8db3\uff0c\u8981\u53bb\u6389\u3002 printf ( \"%d \" , ans [ i ][ 0 ]); } puts ( \"\" ); for ( register int i = k ; i <= n ; ++ i ){ printf ( \"%d \" , ans [ i ][ 1 ]); } return 0 ; } \u5728\u6bcf\u9053\u9898\u4f7f\u7528\u5355\u8c03\u961f\u5217\u4e4b\u524d\u9700\u8981\u770b\u6e05\u9898\u76ee\u7684\u7aef\u70b9\u53d6\u820d\u548c\u6761\u4ef6\u3002 \u6bd4\u5982 \u6c42m\u533a\u95f4\u5185\u7684\u6700\u5c0f\u503c \u90a3\u9053\u9898\u5c31\u662f\u6c42 \\([i-k-1,i)\\) \u7684\u6700\u5c0f\u503c. \u6240\u4ee5\u8bf4\u6700\u597d\u5728\u7528\u4e4b\u524d\u624b\u73a9\u4e00\u4e0b\u6570\u636e\u3002","title":"\u5355\u8c03\u961f\u5217"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/#_1","text":"","title":"\u5355\u8c03\u961f\u5217"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/#introduction","text":"\u5355\u8c03\u961f\u5217\u4e00\u822c\u7528\u6765\u4f18\u5316\u8fd9\u4e00\u7c7b\u51b3\u7b56\u6709\u5355\u8c03\u6027\u7684\u95ee\u9898\uff1a \u6bd4\u5982\uff1a\u4e00\u4e2a\u5143\u7d20\u5f88\u660e\u663e\u4e0d\u53ef\u80fd\u8fdb\u5165\u51b3\u7b56\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5355\u8c03\u961f\u5217\u6765\u505a\u5230 \\(\\text{O}(1)\\) \u7684\u51b3\u7b56\u3002","title":"Introduction"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/#example","text":"\u8fd9\u91cc\u6765\u4e00\u9053\u9898\uff08\u6765\u81eaWC2016 by \u5b8b\u65b0\u6ce2\uff09 \u8fd9\u91cc\u76f8\u5f53\u4e8e\u662f\u5728\u4fdd\u8d28\u671f\u4e4b\u5185\uff0c\u6c42\u6bcf\u4e00\u5929\u6700\u5927\u80fd\u5403\u5230\u7684\u503c\u3002 \u8fd9\u91cc\u8003\u8651\u7ef4\u62a4\u4e00\u4e2a\u961f\u5217\uff0c\u961f\u5217\u5f53\u4e2d\u5355\u8c03\u4e0d\u4e0a\u5347\u3002 \u90a3\u4e48\u961f\u5934\u5c31\u662f\u6211\u4eec\u6240\u60f3\u8981\u7684\u7ed3\u679c\uff08\u6700\u4f18\uff09\u3002 Day1\uff1a 1 2 3 -------------- 80 -------------- \u8fd9\u91cc\u961f\u5934\u662f80. Day2: 1 2 3 ------------- 80 75 ------------- \u8fd9\u91cc\u961f\u5934\u4ecd\u7136\u662f80. Day3 \u8fd9\u91cc\u5f00\u59cb\u5c31\u8981\u6ce8\u610f\u4e86\uff0c\u6211\u4eec\u653e\u516578\uff0c\u4f46\u662f\u653e\u8fdb\u53bb\u4e4b\u540e\u5c31\u4e0d\u6ee1\u8db3\u6761\u4ef6\u4e86\u3002 \u4e3a\u4ec0\u4e48\uff1f \u4e0d\u662f\u56e0\u4e3a\u540e\u9762\u5c0f\u4e86\u5c31\u662f\u524d\u9762\u5927\u4e86\uff08\u8fd9\u91cc\u662f\u5355\u8c03\u4e0d\u4e0a\u5347\u6240\u4ee5\u662f\u8fd9\u6837\uff0c\u5176\u4ed6\u540c\u7406\uff09\u3002 \u4e0d\u8fc7\u6211\u4eec\u4e00\u822c\u8003\u8651\u540e\u9762\u5c0f\u4e86\uff08\u4ece\u540e\u9762\u8fdb\u961f\u51fa\u961f\uff09\u3002 \u90a3\u4e48\u5728\u63d2\u516578 \u4e4b\u524d\uff0c\u6211\u4eec\u5c31\u8981\u5f39\u51fa75 \uff08\u4ece\u540e\u65b9\uff09 1 2 3 4 5 6 7 8 9 10 11 ------------- 80 75(pop) ---> ------------- ------------- 80 <------ 78(push) ------------- ------------- 80 78 ------------- \u6b64\u65f6\u961f\u5934\u4ecd\u7136\u662f 80\u3002 \u8fd9\u91cc\u6211\u4eec\u4e0d\u96be\u770b\u51fa\uff0c\u5982\u679c\u5b58\u5728 \\(a_i <a_j\\) \u90a3\u4e48 \\(a_i\\) \u4e00\u5b9a\u4f1a\u88ab \\(a_j\\) \u66ff\u6362\u6389\u3002 \u56e0\u4e3a \\(a_i\\) \u4e0d\u4ec5\u65f6\u95f4\u9760\u524d\uff08\u66f4\u5feb\u8fc7\u671f\uff09\uff0c\u4ef7\u503c\u4e5f\u4e0d\u5927\u3002 \u6240\u4ee5 \\(a_i\\) \u5c31\u662f \u5197\u6742\u7684\u591a\u4f59\u51b3\u7b56\u3002 \u90a3\u4e48\u5355\u8c03\u961f\u5217\u5728\u7ef4\u62a4\u7684\u65f6\u5019\u7684\u610f\u4e49\u5c31\u662f\u53bb\u9664\u8fd9\u4e9b\u5197\u6742\u7684\u5143\u7d20\u3002 \u56e0\u4e3a\u6bcf\u4e2a\u5143\u7d20 \u53ea\u4f1a\u5165\u961f\u4e00\u6b21 \uff08\u6240\u4ee5\u8981\u5c0f\u5fc3\u67d0\u4e9b\u9898\u7684\u6761\u4ef6\uff09\uff0c\u6240\u4ee5 \u590d\u6742\u5ea6\u662f \\(\\text{O}(n)\\) \u7684\u3002 Day 4 1 2 3 ------------- 80 78 73 ------------- Day 5 \u8fd9\u91cc\u6839\u636e Day3\uff0c\u6211\u4eec\u9700\u8981\u628a78,73\u5f39\u51fa\u6765\u8ba9\u66f4\u597d\u7684 79 \u5165\u961f\u3002 \u6240\u4ee5\u961f\u5217\u5c31\u53d8\u6210\u4e86\u8fd9\u6837\uff1a 1 2 3 4 ------------- 80 79 ------------- poped:78 73 \u4f46\u662f\u6ce8\u610f\uff01\u8fd9\u91cc80\u8fc7\u671f\u4e86\uff0c\u6240\u4ee5\u8981\u628a80\u4e5f\u5f39\u51fa\uff08\u4ece\u961f\u5934\u5f39\u51fa\uff09 \u90a3\u4e48\u5c31\u662f\u8fd9\u6837\u7684\uff1a 1 2 3 ------------- <---80 79 ------------- \u6240\u4ee5\u7b2c\u4e94\u5929\u5c31\u662f 79 \u4e3a\u6700\u503c\u3002 \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053\uff0c\u5728\u8fd9\u9053\u9898\u4f7f\u7528\u5355\u8c03\u961f\u5217\u65f6\uff0c\u8981\u6ce8\u610f\u4e00\u4e0b\u51e0\u70b9\uff1a \u961f\u5217\u4e2d\u59cb\u7ec8\u5355\u8c03 \u961f\u9996\u4e3a\u6700\u4f18\u60c5\u51b5 \u53ca\u65f6\u53bb\u9664\u5197\u6742\u60c5\u51b5 \u90a3\u4e48\u6211\u4eec\u6bcf\u4e00\u6b21\u5faa\u73af\u7684\u65f6\u5019\uff0c\u90fd\u68c0\u67e5\u4e00\u4e0b\u961f\u9996\u662f\u5426\u8fc7\u671f\u8fd8\u6709\u65b0\u5165\u961f\u5143\u7d20\u4f1a\u4e0d\u4f1a\u9020\u6210\u66f4\u65b0\u5c31\u597d\u4e86\u3002","title":"Example"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/#summary","text":"\u603b\u7ed3\u4e00\u4e0b\uff1a\u4e5f\u5c31\u662f\u8fd9\u6837\u7684 \u8fd9\u91cc\u7ed9\u51fa\u7ef4\u62a4\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(k\\) \u7684\u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u503c\u7684\u4ee3\u7801\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #include <bits/stdc++.h> using namespace std ; const int si = 1e6 + 10 ; int n , k ; int a [ si ]; int q1 [ si ], head1 = 1 , tail1 = 0 ; //\u8fd9\u6837\u5b50\u8d4b\u503c\u662f\u4e3a\u4e86\u8ba9\u7b2c\u4e00\u4e2a\u5143\u7d20\u80fd\u5165\u961f\u3002 int q2 [ si ], head2 = 1 , tail2 = 0 ; int ans [ si ][ 2 ]; //0->min 1->max int main (){ scanf ( \"%d%d\" , & n , & k ); for ( register int i = 1 ; i <= n ; ++ i ){ scanf ( \"%d\" , & a [ i ]); } for ( register int i = 1 ; i <= n ; ++ i ){ while ( head1 <= tail1 && q1 [ head1 ] + k <= i ) head1 ++ ; //\u6392\u9664\u961f\u5934\u8fc7\u671f while ( head1 <= tail1 && a [ i ] <= a [ q1 [ tail1 ]]) tail1 -- ; //\u6392\u9664\u961f\u5c3e\u5197\u6742\u3002 q1 [ ++ tail1 ] = i ; while ( head2 <= tail2 && q2 [ head2 ] + k <= i ) head2 ++ ; while ( head2 <= tail2 && a [ i ] >= a [ q2 [ tail2 ]]) tail2 -- ; q2 [ ++ tail2 ] = i ; ans [ i ][ 0 ] = a [ q1 [ head1 ]], ans [ i ][ 1 ] = a [ q2 [ head2 ]]; //\u6ce8\u610f\u8fd9\u91ccq\u5b58\u7684\u662f\u4e0b\u6807\uff0c\u6240\u4ee5\u8981\u5c06\u5176\u4f5c\u4e3a\u4e0b\u6807\u3002 } for ( register int i = k ; i <= n ; ++ i ){ //k\u662f\u56e0\u4e3a\u5b83\u7684\u533a\u95f4\u957f\u5ea6\u5df2\u7ecf\u56fa\u5b9a\uff0c\u6240\u4ee5\u524d\u9762\u7684\u90a3\u4e9b\u957f\u5ea6\u4e0d\u6ee1\u8db3\uff0c\u8981\u53bb\u6389\u3002 printf ( \"%d \" , ans [ i ][ 0 ]); } puts ( \"\" ); for ( register int i = k ; i <= n ; ++ i ){ printf ( \"%d \" , ans [ i ][ 1 ]); } return 0 ; } \u5728\u6bcf\u9053\u9898\u4f7f\u7528\u5355\u8c03\u961f\u5217\u4e4b\u524d\u9700\u8981\u770b\u6e05\u9898\u76ee\u7684\u7aef\u70b9\u53d6\u820d\u548c\u6761\u4ef6\u3002 \u6bd4\u5982 \u6c42m\u533a\u95f4\u5185\u7684\u6700\u5c0f\u503c \u90a3\u9053\u9898\u5c31\u662f\u6c42 \\([i-k-1,i)\\) \u7684\u6700\u5c0f\u503c. \u6240\u4ee5\u8bf4\u6700\u597d\u5728\u7528\u4e4b\u524d\u624b\u73a9\u4e00\u4e0b\u6570\u636e\u3002","title":"Summary"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%8F%82%E6%9C%B5%E8%8E%89%E6%A0%91/","text":"\u73c2\u6735\u8389\u6811\uff08ODT\uff09 \u00b6 \u4e00\u79cd\u66b4\u529b\u6570\u636e\u7ed3\u6784\uff0c\u57fa\u4e8e std::set \u6216\u8005\u94fe\u8868 \u57fa\u672c\u7684\u601d\u60f3\u662f\u628a\u6240\u6709\u76f8\u540c\u7684\u5143\u7d20\u5408\u5e76\u6210\u4e00\u4e2a\u533a\u95f4\u7ef4\u62a4\u3002 \u5982\u679c\u9047\u5230\u533a\u95f4\u7c7b\u7684\u64cd\u4f5c\u5c31\u5206\u88c2\u66b4\u529b\u5904\u7406\u3002 \u5728\u968f\u673a\u6570\u636e\u4e0b\u53ef\u4ee5\u505a\u5230\u4f18\u79c0\u7684 \\(\\text{O}(n \\log \\log n)\\) \uff0c\u94fe\u8868\u5b9e\u73b0\u53ef\u4ee5 \\(\\text{O}(n \\log n)\\) \u3002 \u590d\u6742\u5ea6\u8bc1\u660e\u53ef\u4ee5\u770b @hqztrue \u7684\uff1a https://zhuanlan.zhihu.com/p/102786071 Initialization \u00b6 \u73c2\u6735\u8389\u6811\u7684\u8282\u70b9\u7531\u4e09\u4e2a\u5143\u7d20\u6784\u6210\uff0c \\((l,r,v)\\) \u3002 \u5206\u522b\u8868\u793a\u8fd9\u4e2a\u8282\u70b9\u7ef4\u62a4\u7684\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\u548c\u6743\u503c\u3002 \u56e0\u4e3a\u9700\u8981\u7528 std::set \u5b9e\u73b0\uff0c\u6240\u4ee5\u8fd8\u8981\u91cd\u8f7d\u8fd0\u7b97\u7b26\u3002 1 2 3 4 5 6 struct node { int l , r ; mutable int val ; // if we need change a node's value which already in the set by using iterator, we have to use mutable. node ( const int & il , const int & ir , const int & iv ) : l ( il ), r ( ir ), val ( iv ){} inline bool operator < ( const node & b ) const { return l < b . l ; } }; std :: set < node > odt ; \u521d\u59cb\u5316\u76f4\u63a5\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\u7ef4\u62a4 \\([1,n]\\) \u5373\u53ef\uff0c\u6743\u503c\u6839\u636e\u9898\u76ee\u5224\u65ad\u3002 Split \u00b6 \u57fa\u672c\u64cd\u4f5c\u4e4b\u4e00\uff0c\u628a \\([l,r]\\) \u5206\u5272\u6210 \\([l,pos),[pos,r]\\) \u5e76\u8fd4\u56de\u4ee3\u8868\u540e\u9762\u90a3\u4e2a\u533a\u95f4\u7684\u8282\u70b9\u7684\u8fed\u4ee3\u5668\u3002 \u5148\u4e8c\u5206\u4e00\u4e0b \\(pos\\) \u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u5220\u9664\u539f\u6765\u7684\u8282\u70b9\uff0c\u65b0\u52a0\u5165\u4e24\u4e2a\u8282\u70b9\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 inline std :: set < node >:: iterator split ( int pos ){ if ( pos > n ) return odt . end (); // the position doesn't exist. std :: set < node >:: iterator it =-- odt . upper_bound (( node ){ pos , 0 , 0 }); // find the node that pos in; if ( it -> l == pos ) return it ; // if pos is the begin of the node, return; int l = it -> l , r = it -> r , v = it -> val ; odt . erase ( it ), odt . insert (( node ){ l , pos -1 , v }); return odt . insert (( node ){ pos , r , v }). first ; // erase the original node, insert two node and return the left one's iterator. } // split the node [l,r] to two smaller node [l,pos),[pos,r]; \u8fd9\u91cc \\(it\\) \u662f\u4e2a\u8fed\u4ee3\u5668\uff0c\u6240\u4ee5\u8981\u7528\u6307\u9488\u8bbf\u95ee\u91cc\u9762\u7684\u6210\u5458\u3002 std::set \u5f53\u4e2d\u7684 insert() \u662f\u6709\u8fd4\u56de\u503c\u7684\u3002 \u662f\u4e00\u4e2a std::pair<std::set<Template>::iterator,bool> \u524d\u8005\u662f\u88ab\u63d2\u5165\u7684\u503c\u7684\u8fed\u4ee3\u5668\uff0c\u540e\u8005\u8868\u793a\u662f\u5426\u63d2\u5165\u6210\u529f\u3002 --upper_bound \u90a3\u91cc\u4e5f\u53ef\u4ee5\u4f7f\u7528 std::prev Assign \u00b6 \u63a8\u5e73\u4e00\u6bb5\u533a\u95f4\uff0c\u4e5f\u5c31\u662f\u7ed9\u67d0\u4e2a\u533a\u95f4\u5168\u90e8\u8d4b\u503c\u6210\u67d0\u4e2a\u503c \\(v\\) \u3002 \u5982\u679c\u6ca1\u6709\u989d\u5916\u9650\u5236\u7684\u8bdd\uff0c\u5148\u628a \\(l,r\\) \u4ece\u4ed6\u4eec\u5404\u81ea\u6240\u5c5e\u7684\u8282\u70b9\u5f53\u4e2d split \u51fa\u6765\uff0c\u7136\u540e\u628a\u4ed6\u4eec\u4e2d\u95f4\u7684\u8fd9\u4e00\u6bb5\u5168\u90e8\u5220\u9664\uff0c\u518d\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u8282\u70b9 \\((l,r,v)\\) \u7ef4\u62a4\u8fd9\u4e2a\u533a\u95f4\u5373\u53ef\u3002 1 2 3 4 inline void assign ( int l , int r , int v ){ std :: set < node >:: iterator itr = split ( r + 1 ), itl = split ( l ); // because of [), so r+1. and **Remember, split(r+1) first. then split(l)** odt . erase ( itl , itr ), odt . insert (( node ){ l , r , v }); } // change all element in the interval [l,r] to v; \u6ce8\u610f\u4e00\u5b9a\u8981\u5148 split(r+1) \uff0c\u4e0d\u7136 \\(l\\) \u539f\u6765\u6240\u5c5e\u7684\u8282\u70b9\u6709\u53ef\u80fd\u88ab\u5220\u9664\u5bfc\u81f4 Runtime Error\u3002 Others \u00b6 \u5176\u5b83\u7684\u64cd\u4f5c\u5229\u7528 split \u548c assign \u66b4\u529b\u641e\u5c31\u597d\u3002 \u57fa\u672c\u90fd\u662f\u8fd9\u6837\uff1a 1 2 3 4 5 6 inline void example ( int l , int r , int v ){ std :: set < node >:: iterator itr = split ( r + 1 ), itl = split ( l ); for (; itl != itr ; ++ itl ){ // blablabla... } return ; }","title":"\u73c2\u6735\u8389\u6811"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%8F%82%E6%9C%B5%E8%8E%89%E6%A0%91/#odt","text":"\u4e00\u79cd\u66b4\u529b\u6570\u636e\u7ed3\u6784\uff0c\u57fa\u4e8e std::set \u6216\u8005\u94fe\u8868 \u57fa\u672c\u7684\u601d\u60f3\u662f\u628a\u6240\u6709\u76f8\u540c\u7684\u5143\u7d20\u5408\u5e76\u6210\u4e00\u4e2a\u533a\u95f4\u7ef4\u62a4\u3002 \u5982\u679c\u9047\u5230\u533a\u95f4\u7c7b\u7684\u64cd\u4f5c\u5c31\u5206\u88c2\u66b4\u529b\u5904\u7406\u3002 \u5728\u968f\u673a\u6570\u636e\u4e0b\u53ef\u4ee5\u505a\u5230\u4f18\u79c0\u7684 \\(\\text{O}(n \\log \\log n)\\) \uff0c\u94fe\u8868\u5b9e\u73b0\u53ef\u4ee5 \\(\\text{O}(n \\log n)\\) \u3002 \u590d\u6742\u5ea6\u8bc1\u660e\u53ef\u4ee5\u770b @hqztrue \u7684\uff1a https://zhuanlan.zhihu.com/p/102786071","title":"\u73c2\u6735\u8389\u6811\uff08ODT\uff09"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%8F%82%E6%9C%B5%E8%8E%89%E6%A0%91/#initialization","text":"\u73c2\u6735\u8389\u6811\u7684\u8282\u70b9\u7531\u4e09\u4e2a\u5143\u7d20\u6784\u6210\uff0c \\((l,r,v)\\) \u3002 \u5206\u522b\u8868\u793a\u8fd9\u4e2a\u8282\u70b9\u7ef4\u62a4\u7684\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\u548c\u6743\u503c\u3002 \u56e0\u4e3a\u9700\u8981\u7528 std::set \u5b9e\u73b0\uff0c\u6240\u4ee5\u8fd8\u8981\u91cd\u8f7d\u8fd0\u7b97\u7b26\u3002 1 2 3 4 5 6 struct node { int l , r ; mutable int val ; // if we need change a node's value which already in the set by using iterator, we have to use mutable. node ( const int & il , const int & ir , const int & iv ) : l ( il ), r ( ir ), val ( iv ){} inline bool operator < ( const node & b ) const { return l < b . l ; } }; std :: set < node > odt ; \u521d\u59cb\u5316\u76f4\u63a5\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\u7ef4\u62a4 \\([1,n]\\) \u5373\u53ef\uff0c\u6743\u503c\u6839\u636e\u9898\u76ee\u5224\u65ad\u3002","title":"Initialization"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%8F%82%E6%9C%B5%E8%8E%89%E6%A0%91/#split","text":"\u57fa\u672c\u64cd\u4f5c\u4e4b\u4e00\uff0c\u628a \\([l,r]\\) \u5206\u5272\u6210 \\([l,pos),[pos,r]\\) \u5e76\u8fd4\u56de\u4ee3\u8868\u540e\u9762\u90a3\u4e2a\u533a\u95f4\u7684\u8282\u70b9\u7684\u8fed\u4ee3\u5668\u3002 \u5148\u4e8c\u5206\u4e00\u4e0b \\(pos\\) \u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u5220\u9664\u539f\u6765\u7684\u8282\u70b9\uff0c\u65b0\u52a0\u5165\u4e24\u4e2a\u8282\u70b9\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 inline std :: set < node >:: iterator split ( int pos ){ if ( pos > n ) return odt . end (); // the position doesn't exist. std :: set < node >:: iterator it =-- odt . upper_bound (( node ){ pos , 0 , 0 }); // find the node that pos in; if ( it -> l == pos ) return it ; // if pos is the begin of the node, return; int l = it -> l , r = it -> r , v = it -> val ; odt . erase ( it ), odt . insert (( node ){ l , pos -1 , v }); return odt . insert (( node ){ pos , r , v }). first ; // erase the original node, insert two node and return the left one's iterator. } // split the node [l,r] to two smaller node [l,pos),[pos,r]; \u8fd9\u91cc \\(it\\) \u662f\u4e2a\u8fed\u4ee3\u5668\uff0c\u6240\u4ee5\u8981\u7528\u6307\u9488\u8bbf\u95ee\u91cc\u9762\u7684\u6210\u5458\u3002 std::set \u5f53\u4e2d\u7684 insert() \u662f\u6709\u8fd4\u56de\u503c\u7684\u3002 \u662f\u4e00\u4e2a std::pair<std::set<Template>::iterator,bool> \u524d\u8005\u662f\u88ab\u63d2\u5165\u7684\u503c\u7684\u8fed\u4ee3\u5668\uff0c\u540e\u8005\u8868\u793a\u662f\u5426\u63d2\u5165\u6210\u529f\u3002 --upper_bound \u90a3\u91cc\u4e5f\u53ef\u4ee5\u4f7f\u7528 std::prev","title":"Split"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%8F%82%E6%9C%B5%E8%8E%89%E6%A0%91/#assign","text":"\u63a8\u5e73\u4e00\u6bb5\u533a\u95f4\uff0c\u4e5f\u5c31\u662f\u7ed9\u67d0\u4e2a\u533a\u95f4\u5168\u90e8\u8d4b\u503c\u6210\u67d0\u4e2a\u503c \\(v\\) \u3002 \u5982\u679c\u6ca1\u6709\u989d\u5916\u9650\u5236\u7684\u8bdd\uff0c\u5148\u628a \\(l,r\\) \u4ece\u4ed6\u4eec\u5404\u81ea\u6240\u5c5e\u7684\u8282\u70b9\u5f53\u4e2d split \u51fa\u6765\uff0c\u7136\u540e\u628a\u4ed6\u4eec\u4e2d\u95f4\u7684\u8fd9\u4e00\u6bb5\u5168\u90e8\u5220\u9664\uff0c\u518d\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u8282\u70b9 \\((l,r,v)\\) \u7ef4\u62a4\u8fd9\u4e2a\u533a\u95f4\u5373\u53ef\u3002 1 2 3 4 inline void assign ( int l , int r , int v ){ std :: set < node >:: iterator itr = split ( r + 1 ), itl = split ( l ); // because of [), so r+1. and **Remember, split(r+1) first. then split(l)** odt . erase ( itl , itr ), odt . insert (( node ){ l , r , v }); } // change all element in the interval [l,r] to v; \u6ce8\u610f\u4e00\u5b9a\u8981\u5148 split(r+1) \uff0c\u4e0d\u7136 \\(l\\) \u539f\u6765\u6240\u5c5e\u7684\u8282\u70b9\u6709\u53ef\u80fd\u88ab\u5220\u9664\u5bfc\u81f4 Runtime Error\u3002","title":"Assign"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%8F%82%E6%9C%B5%E8%8E%89%E6%A0%91/#others","text":"\u5176\u5b83\u7684\u64cd\u4f5c\u5229\u7528 split \u548c assign \u66b4\u529b\u641e\u5c31\u597d\u3002 \u57fa\u672c\u90fd\u662f\u8fd9\u6837\uff1a 1 2 3 4 5 6 inline void example ( int l , int r , int v ){ std :: set < node >:: iterator itr = split ( r + 1 ), itl = split ( l ); for (; itl != itr ; ++ itl ){ // blablabla... } return ; }","title":"Others"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/","text":"\u94fe\u8868 \u00b6 \u8fd9\u91cc\u8bf4\u7684\u94fe\u8868\u662f\u53cc\u5411\u94fe\u8868\uff0c\u5b83\u652f\u6301\u5728\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u6216\u8005\u5220\u9664\u5143\u7d20\uff0c\u4f46\u662f\u53ea\u80fd\u6309\u7167\u987a\u5e8f\u8bbf\u95ee\u3002 \u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u7684\u7ed3\u70b9\u901a\u5e38\u7531\u5143\u7d20\u503c \\(val\\) \uff0c\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488 \\(next\\) \u548c\u6307\u5411\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488 \\(prev\\) \u4e00\u822c\u6765\u8bf4\u6211\u4eec\u4f1a\u989d\u5916\u5efa\u7acb\u8868\u5934 \\(head\\) \u548c\u8868\u5c3e \\(tail\\) \u6307\u9488\uff0c\u5e76\u5c06\u5b83\u4eec\u9996\u5c3e\u76f8\u8fde\uff0c\u6765\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u95ee\u9898\u3002 Initialization \u00b6 \u521d\u59cb\u5316\u94fe\u8868\u53ea\u9700\u8981\u628a \\(head\\) \u7684 \\(next\\) \u6307\u5411 \\(tail\\) \uff0c \\(tail\\) \u7684 \\(prev\\) \u6307\u5411 \\(head\\) \u5373\u53ef 1 2 3 4 inline void init (){ head = new node (), tail = new node (); head -> next = tail , tail -> prev = head ; } // init new List Insert \u00b6 \u5728\u8282\u70b9 \\(p\\) \u4e4b\u540e\u63d2\u5165\u4e00\u4e2a\u8282\u70b9 \\(q\\) \uff0c\u5e76\u4e14\u8282\u70b9\u503c\u4e3a \\(val\\) \u3002 \u6211\u4eec\u53ea\u9700\u8981\u8ba9 \\(p\\) \u7684 \\(next\\) \u8282\u70b9\u7684 \\(prev\\) \u6307\u5411 \\(q\\) \uff0c\u8ba9 \\(q\\) \u548c \\(p\\) \u4ee5\u53ca\u539f\u6765\u7684 \\(p.next\\) \u76f8\u8fde\u5373\u53ef\u3002 \u6700\u540e\u628a \\(p\\) \u7684 \\(next\\) \u6307\u5411 \\(q\\) \uff0c\u6ce8\u610f\u662f\u6700\u540e\uff0c\u4e0d\u7136\u4f60\u5728\u524d\u9762\u64cd\u4f5c\u7684\u65f6\u5019\u5c31\u4f1a\u8ba9 \\(q\\) \u7684 \\(prev\\) \u6307\u5411\u81ea\u5df1\u7684\u3002 1 2 3 4 5 inline void insert ( node * p , int val ){ node * q ; q = new node (); q -> val = val , p -> next -> prev = q ; q -> next = p -> next , q -> prev = p , p -> next = q ; } // insert a element ,value is val, after p Remove \u00b6 \u5220\u9664\u4e00\u4e2a\u8282\u70b9 \\(p\\) \u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u53ea\u9700\u8981\u628a \\(p\\) \u7684 \\(prev\\) \u4ee5\u53ca \\(next\\) \u94fe\u63a5\u8d77\u6765\u5373\u53ef\u3002 1 2 3 4 inline void remove ( node * p ){ p -> prev -> next = p -> next , p -> next -> prev = p -> prev ; delete p ; } // remove p Reset \u00b6 \u56de\u6536\u94fe\u8868\u5185\u5b58\u7684\u8bdd\u53ea\u9700\u8981\u8ba9 \\(head\\) \u4e00\u6b65\u6b65\u903c\u8fd1 \\(tail\\) \uff0c\u5728\u903c\u8fd1\u7684\u8fc7\u7a0b\u4e2d\u628a\u8bbf\u95ee\u8fc7\u7684 \\(head.prev\\) \u5220\u9664\u5373\u53ef\u3002 \u6ce8\u610f\u8fd9\u91cc\u8981\u5148\u8df3 \\(next\\) \u4e4b\u540e\u518d\u5220\u9664 \\(prev\\) \uff0c\u4e0d\u7136\u5f88\u5bb9\u6613\u4f1a\u8bbf\u95ee\u65e0\u6548\u5185\u5b58\u7684\uff0c\u4f46\u662f\u6211\u4eec\u5f00\u5934\u7684\u8fde\u63a5\u94fe\u8868\u7684\u9996\u5c3e\u5c31\u5b8c\u7f8e\u7684\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002 1 2 3 4 5 6 inline void reset (){ while ( head != tail ){ head = head -> next ; delete head -> prev ; } delete tail ; } // clear","title":"\u94fe\u8868"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#_1","text":"\u8fd9\u91cc\u8bf4\u7684\u94fe\u8868\u662f\u53cc\u5411\u94fe\u8868\uff0c\u5b83\u652f\u6301\u5728\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u6216\u8005\u5220\u9664\u5143\u7d20\uff0c\u4f46\u662f\u53ea\u80fd\u6309\u7167\u987a\u5e8f\u8bbf\u95ee\u3002 \u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u7684\u7ed3\u70b9\u901a\u5e38\u7531\u5143\u7d20\u503c \\(val\\) \uff0c\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488 \\(next\\) \u548c\u6307\u5411\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488 \\(prev\\) \u4e00\u822c\u6765\u8bf4\u6211\u4eec\u4f1a\u989d\u5916\u5efa\u7acb\u8868\u5934 \\(head\\) \u548c\u8868\u5c3e \\(tail\\) \u6307\u9488\uff0c\u5e76\u5c06\u5b83\u4eec\u9996\u5c3e\u76f8\u8fde\uff0c\u6765\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u95ee\u9898\u3002","title":"\u94fe\u8868"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#initialization","text":"\u521d\u59cb\u5316\u94fe\u8868\u53ea\u9700\u8981\u628a \\(head\\) \u7684 \\(next\\) \u6307\u5411 \\(tail\\) \uff0c \\(tail\\) \u7684 \\(prev\\) \u6307\u5411 \\(head\\) \u5373\u53ef 1 2 3 4 inline void init (){ head = new node (), tail = new node (); head -> next = tail , tail -> prev = head ; } // init new List","title":"Initialization"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#insert","text":"\u5728\u8282\u70b9 \\(p\\) \u4e4b\u540e\u63d2\u5165\u4e00\u4e2a\u8282\u70b9 \\(q\\) \uff0c\u5e76\u4e14\u8282\u70b9\u503c\u4e3a \\(val\\) \u3002 \u6211\u4eec\u53ea\u9700\u8981\u8ba9 \\(p\\) \u7684 \\(next\\) \u8282\u70b9\u7684 \\(prev\\) \u6307\u5411 \\(q\\) \uff0c\u8ba9 \\(q\\) \u548c \\(p\\) \u4ee5\u53ca\u539f\u6765\u7684 \\(p.next\\) \u76f8\u8fde\u5373\u53ef\u3002 \u6700\u540e\u628a \\(p\\) \u7684 \\(next\\) \u6307\u5411 \\(q\\) \uff0c\u6ce8\u610f\u662f\u6700\u540e\uff0c\u4e0d\u7136\u4f60\u5728\u524d\u9762\u64cd\u4f5c\u7684\u65f6\u5019\u5c31\u4f1a\u8ba9 \\(q\\) \u7684 \\(prev\\) \u6307\u5411\u81ea\u5df1\u7684\u3002 1 2 3 4 5 inline void insert ( node * p , int val ){ node * q ; q = new node (); q -> val = val , p -> next -> prev = q ; q -> next = p -> next , q -> prev = p , p -> next = q ; } // insert a element ,value is val, after p","title":"Insert"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#remove","text":"\u5220\u9664\u4e00\u4e2a\u8282\u70b9 \\(p\\) \u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u53ea\u9700\u8981\u628a \\(p\\) \u7684 \\(prev\\) \u4ee5\u53ca \\(next\\) \u94fe\u63a5\u8d77\u6765\u5373\u53ef\u3002 1 2 3 4 inline void remove ( node * p ){ p -> prev -> next = p -> next , p -> next -> prev = p -> prev ; delete p ; } // remove p","title":"Remove"},{"location":"%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%93%BE%E8%A1%A8/#reset","text":"\u56de\u6536\u94fe\u8868\u5185\u5b58\u7684\u8bdd\u53ea\u9700\u8981\u8ba9 \\(head\\) \u4e00\u6b65\u6b65\u903c\u8fd1 \\(tail\\) \uff0c\u5728\u903c\u8fd1\u7684\u8fc7\u7a0b\u4e2d\u628a\u8bbf\u95ee\u8fc7\u7684 \\(head.prev\\) \u5220\u9664\u5373\u53ef\u3002 \u6ce8\u610f\u8fd9\u91cc\u8981\u5148\u8df3 \\(next\\) \u4e4b\u540e\u518d\u5220\u9664 \\(prev\\) \uff0c\u4e0d\u7136\u5f88\u5bb9\u6613\u4f1a\u8bbf\u95ee\u65e0\u6548\u5185\u5b58\u7684\uff0c\u4f46\u662f\u6211\u4eec\u5f00\u5934\u7684\u8fde\u63a5\u94fe\u8868\u7684\u9996\u5c3e\u5c31\u5b8c\u7f8e\u7684\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002 1 2 3 4 5 6 inline void reset (){ while ( head != tail ){ head = head -> next ; delete head -> prev ; } delete tail ; } // clear","title":"Reset"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E4%BA%8C%E5%88%86/","text":"\u4e8c\u5206 \u00b6 \u4f5c\u7528\u662f\u5728\u5355\u8c03\u7684\u5e8f\u5217\u6216\u8005\u5355\u8c03\u7684\u51fd\u6570\u5f53\u4e2d\u8fdb\u884c\u67e5\u627e\u3002 \u4e5f\u53ef\u4ee5\u5c06\u6700\u4f18\u5316\u95ee\u9898\u8f6c\u5316\u4e3a\u53ef\u884c\u6027\u95ee\u9898\u4e4b\u540e\u8fdb\u884c\u5224\u5b9a\u6c42\u89e3\u3002 \u6574\u6570\u57df \u00b6 \u95ee\u9898\uff1a\u5728\u5355\u8c03\u9012\u589e\u7684\u5e8f\u5217\u5f53\u4e2d\u67e5\u627e\u5927\u4e8e\u7b49\u4e8e \\(x\\) \u7684\u6700\u5c0f\u7684\u4e00\u4e2a\u6570 \u5f00\u59cb\u4ee4\u4e24\u4e2a\u6307\u9488 \\(l=1,r=n\\) \u3002 \u6bcf\u6b21\u53d6 \\(mid=\\lfloor(l+r)/2\\rfloor\\) \u5982\u679c \\(a_{mid} \\ge x\\) \uff0c\u8bc1\u660e \u53ef\u884c\u533a\u95f4 \u5728 \\(mid\\) \u5de6\u4fa7\uff0c\u7f29\u5c0f\u4e8c\u5206\u533a\u95f4\u5230\u53ef\u884c\u533a\u95f4\uff0c\u5c06 \\(r=mid\\) \u3002 \u53cd\u4e4b\u5c06 \\(l=mid+1\\) \uff0c\u76f4\u5230 \\(l=r\\) \u65f6\uff0c \\(a_l\\) \u5c31\u662f\u7b54\u6848\u3002 1 2 3 4 5 6 int l = 1 , r = n ; while ( l < r ){ int mid = ( l + r ) >> 1 ; if ( a [ mid ] >= x ) r = mid ; // mid \u4e5f\u53ef\u80fd\u662f\u7b54\u6848\uff0c\u4e5f\u8981\u53d6\u3002 else l = mid + 1 ; } ans = l ; \u5982\u679c\u9700\u8981\u5224\u65ad\u65e0\u89e3\uff0c\u4ee4 \\(r=n+1\\) \uff0c\u5982\u679c\u6700\u540e \\(l=r=n+1\\) \uff0c\u90a3\u4e48\u65e0\u89e3\u3002 \u56e0\u4e3a\u8fd9\u79cd\u5199\u6cd5\u4e0b \\(mid\\) \u6c38\u8fdc\u4e0d\u4f1a\u53d6\u5230 \\(r\\) \u3002 \u5982\u679c\u95ee\u5c0f\u4e8e\u7b49\u4e8e\uff0c\u4e5f\u5c31\u662f\u53ef\u884c\u533a\u95f4\u5728 \\(mid\\) \u53f3\u4fa7\uff0c\u53cd\u8fc7\u6765\u5373\u53ef\uff1a 1 2 3 4 5 6 int l = 1 , r = n ; // \u5224\u65e0\u89e3\u5219\u4ee4 l=0\uff0c\u8fd9\u79cd\u5199\u6cd5 mid \u6c38\u8fdc\u4e0d\u4f1a\u53d6\u5230 l while ( l < r ){ int mid = ( l + r + 1 ) >> 1 ; if ( a [ mid ] <= x ) l = mid ; else r = mid -1 ; } ans = l ; \u4e00\u5f20\u56fe\u7406\u89e3\uff0c\u4e0b\u56fe\u7ea2\u8272\u4e3a\u53ef\u884c\u533a\u95f4\uff1a \u5b9e\u6570\u57df \u00b6 \u548c\u6574\u6570\u57df\u6bd4\u8f83\u7c7b\u4f3c\uff0c\u4e0d\u8fc7\u8bbe\u7f6e \\(eps\\) \u5373\u53ef\u3002 1 2 3 4 5 6 double l = 0.0 , r = ( double )( 1e9 + 7 ), ans ; while ( l + eps < r ){ double mid = ( l + r ) / 2 ; if ( valid ( mid )) r = mid , ans = mid ; else l = mid ; } // \u4e5f\u9700\u8981\u6839\u636e\u53ef\u884c\u533a\u95f4\u7684\u4f4d\u7f6e\u5224\u65ad\u5199\u6cd5\u3002 \u4e5f\u53ef\u4ee5\u8ba1\u7b97\u4e4b\u540e\u8bbe\u7f6e\u6b21\u6570\u4e8c\u5206\u3002 \u4e8c\u5206\u7b54\u6848 \u00b6 \u5982\u679c\u4e00\u4e2a\u6700\u4f18\u89e3\u95ee\u9898\u7684\u6700\u4f18\u89e3\u662f \\(x\\) \uff0c\u5e76\u4e14 \\(x\\) \u7684\u4e00\u8fb9\u4e0d\u5408\u6cd5\uff0c\u4e00\u8fb9\u5408\u6cd5\uff0c\u5219\u8fd9\u4e2a\u95ee\u9898\u5177\u6709\u5355\u8c03\u6027\u3002 \u53ef\u4ee5\u5728\u6bcf\u6b21\u4e8c\u5206\u7684\u65f6\u5019\u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u65b9\u6848\uff0c\u4f7f\u5f97\u89e3\u4e3a \\(mid\\) \u3002 \u4e8c\u5206\u7b54\u6848 \\(x\\) \u5e76\u8fdb\u884c\u5224\u5b9a\u3002 \u7136\u540e\u6839\u636e\u53ef\u884c\u533a\u95f4\u7684\u65b9\u5f0f\u9009\u62e9\u4e8c\u5206\u65b9\u5f0f\u5373\u53ef\u3002 \u6b64\u7c7b\u95ee\u9898\u7684\u663e\u8457\u7279\u70b9\u5c31\u662f\u201c\u6700\u5c0f\u503c\u6700\u5927\u201d\uff0c\u201c\u6700\u5927\u503c\u6700\u5c0f\u201d\u3002 \u4e0d\u8fc7\u4e5f\u6709\u4f8b\u5916\uff0c\u6bd4\u5982AGC004D\u3002 STL \u00b6 lower_bound \uff1a\u5728\u6709\u5e8f\u5e8f\u5217\u67e5\u627e\u5927\u4e8e\u7b49\u4e8e \\(x\\) \u7684\u7b2c\u4e00\u4e2a\u3002 upper_bound \uff1a\u5927\u4e8e \\(x\\) \u3002 \u5982\u679c\u7c7b\u4f3c set \uff0c\u81ea\u5df1\u5e26\u6709 lower_bound \u3002 \u5c31\u4e00\u5b9a\u9009\u62e9\u5bb9\u5668 \u81ea\u8eab \u7684\uff1a s.lower_bound(x) \u800c\u4e0d\u662f lower_bound(s.begin(),s.end(),x) \u3002 \u8fd9\u6837\u6548\u7387\u66f4\u9ad8\u3002","title":"\u4e8c\u5206"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E4%BA%8C%E5%88%86/#_1","text":"\u4f5c\u7528\u662f\u5728\u5355\u8c03\u7684\u5e8f\u5217\u6216\u8005\u5355\u8c03\u7684\u51fd\u6570\u5f53\u4e2d\u8fdb\u884c\u67e5\u627e\u3002 \u4e5f\u53ef\u4ee5\u5c06\u6700\u4f18\u5316\u95ee\u9898\u8f6c\u5316\u4e3a\u53ef\u884c\u6027\u95ee\u9898\u4e4b\u540e\u8fdb\u884c\u5224\u5b9a\u6c42\u89e3\u3002","title":"\u4e8c\u5206"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E4%BA%8C%E5%88%86/#_2","text":"\u95ee\u9898\uff1a\u5728\u5355\u8c03\u9012\u589e\u7684\u5e8f\u5217\u5f53\u4e2d\u67e5\u627e\u5927\u4e8e\u7b49\u4e8e \\(x\\) \u7684\u6700\u5c0f\u7684\u4e00\u4e2a\u6570 \u5f00\u59cb\u4ee4\u4e24\u4e2a\u6307\u9488 \\(l=1,r=n\\) \u3002 \u6bcf\u6b21\u53d6 \\(mid=\\lfloor(l+r)/2\\rfloor\\) \u5982\u679c \\(a_{mid} \\ge x\\) \uff0c\u8bc1\u660e \u53ef\u884c\u533a\u95f4 \u5728 \\(mid\\) \u5de6\u4fa7\uff0c\u7f29\u5c0f\u4e8c\u5206\u533a\u95f4\u5230\u53ef\u884c\u533a\u95f4\uff0c\u5c06 \\(r=mid\\) \u3002 \u53cd\u4e4b\u5c06 \\(l=mid+1\\) \uff0c\u76f4\u5230 \\(l=r\\) \u65f6\uff0c \\(a_l\\) \u5c31\u662f\u7b54\u6848\u3002 1 2 3 4 5 6 int l = 1 , r = n ; while ( l < r ){ int mid = ( l + r ) >> 1 ; if ( a [ mid ] >= x ) r = mid ; // mid \u4e5f\u53ef\u80fd\u662f\u7b54\u6848\uff0c\u4e5f\u8981\u53d6\u3002 else l = mid + 1 ; } ans = l ; \u5982\u679c\u9700\u8981\u5224\u65ad\u65e0\u89e3\uff0c\u4ee4 \\(r=n+1\\) \uff0c\u5982\u679c\u6700\u540e \\(l=r=n+1\\) \uff0c\u90a3\u4e48\u65e0\u89e3\u3002 \u56e0\u4e3a\u8fd9\u79cd\u5199\u6cd5\u4e0b \\(mid\\) \u6c38\u8fdc\u4e0d\u4f1a\u53d6\u5230 \\(r\\) \u3002 \u5982\u679c\u95ee\u5c0f\u4e8e\u7b49\u4e8e\uff0c\u4e5f\u5c31\u662f\u53ef\u884c\u533a\u95f4\u5728 \\(mid\\) \u53f3\u4fa7\uff0c\u53cd\u8fc7\u6765\u5373\u53ef\uff1a 1 2 3 4 5 6 int l = 1 , r = n ; // \u5224\u65e0\u89e3\u5219\u4ee4 l=0\uff0c\u8fd9\u79cd\u5199\u6cd5 mid \u6c38\u8fdc\u4e0d\u4f1a\u53d6\u5230 l while ( l < r ){ int mid = ( l + r + 1 ) >> 1 ; if ( a [ mid ] <= x ) l = mid ; else r = mid -1 ; } ans = l ; \u4e00\u5f20\u56fe\u7406\u89e3\uff0c\u4e0b\u56fe\u7ea2\u8272\u4e3a\u53ef\u884c\u533a\u95f4\uff1a","title":"\u6574\u6570\u57df"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E4%BA%8C%E5%88%86/#_3","text":"\u548c\u6574\u6570\u57df\u6bd4\u8f83\u7c7b\u4f3c\uff0c\u4e0d\u8fc7\u8bbe\u7f6e \\(eps\\) \u5373\u53ef\u3002 1 2 3 4 5 6 double l = 0.0 , r = ( double )( 1e9 + 7 ), ans ; while ( l + eps < r ){ double mid = ( l + r ) / 2 ; if ( valid ( mid )) r = mid , ans = mid ; else l = mid ; } // \u4e5f\u9700\u8981\u6839\u636e\u53ef\u884c\u533a\u95f4\u7684\u4f4d\u7f6e\u5224\u65ad\u5199\u6cd5\u3002 \u4e5f\u53ef\u4ee5\u8ba1\u7b97\u4e4b\u540e\u8bbe\u7f6e\u6b21\u6570\u4e8c\u5206\u3002","title":"\u5b9e\u6570\u57df"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E4%BA%8C%E5%88%86/#_4","text":"\u5982\u679c\u4e00\u4e2a\u6700\u4f18\u89e3\u95ee\u9898\u7684\u6700\u4f18\u89e3\u662f \\(x\\) \uff0c\u5e76\u4e14 \\(x\\) \u7684\u4e00\u8fb9\u4e0d\u5408\u6cd5\uff0c\u4e00\u8fb9\u5408\u6cd5\uff0c\u5219\u8fd9\u4e2a\u95ee\u9898\u5177\u6709\u5355\u8c03\u6027\u3002 \u53ef\u4ee5\u5728\u6bcf\u6b21\u4e8c\u5206\u7684\u65f6\u5019\u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u65b9\u6848\uff0c\u4f7f\u5f97\u89e3\u4e3a \\(mid\\) \u3002 \u4e8c\u5206\u7b54\u6848 \\(x\\) \u5e76\u8fdb\u884c\u5224\u5b9a\u3002 \u7136\u540e\u6839\u636e\u53ef\u884c\u533a\u95f4\u7684\u65b9\u5f0f\u9009\u62e9\u4e8c\u5206\u65b9\u5f0f\u5373\u53ef\u3002 \u6b64\u7c7b\u95ee\u9898\u7684\u663e\u8457\u7279\u70b9\u5c31\u662f\u201c\u6700\u5c0f\u503c\u6700\u5927\u201d\uff0c\u201c\u6700\u5927\u503c\u6700\u5c0f\u201d\u3002 \u4e0d\u8fc7\u4e5f\u6709\u4f8b\u5916\uff0c\u6bd4\u5982AGC004D\u3002","title":"\u4e8c\u5206\u7b54\u6848"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E4%BA%8C%E5%88%86/#stl","text":"lower_bound \uff1a\u5728\u6709\u5e8f\u5e8f\u5217\u67e5\u627e\u5927\u4e8e\u7b49\u4e8e \\(x\\) \u7684\u7b2c\u4e00\u4e2a\u3002 upper_bound \uff1a\u5927\u4e8e \\(x\\) \u3002 \u5982\u679c\u7c7b\u4f3c set \uff0c\u81ea\u5df1\u5e26\u6709 lower_bound \u3002 \u5c31\u4e00\u5b9a\u9009\u62e9\u5bb9\u5668 \u81ea\u8eab \u7684\uff1a s.lower_bound(x) \u800c\u4e0d\u662f lower_bound(s.begin(),s.end(),x) \u3002 \u8fd9\u6837\u6548\u7387\u66f4\u9ad8\u3002","title":"STL"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/","text":"\u4f4d\u8fd0\u7b97 \u00b6 \u57fa\u7840\u8fd0\u7b97\u7b26 \u00b6 and,or,xor \u7684\u663e\u8457\u7279\u70b9\u5c31\u662f\u4e8c\u8fdb\u5236\u4e0b\u4e0d\u8fdb\u4f4d\u3002 \u6309\u4f4d\u4e0e & \uff0c and \u7279\u70b9\uff1a\u4e8c\u5143\u8fd0\u7b97\u7b26\uff0c\u4e8c\u8fdb\u5236\u4e0b\u6309\u4f4d\u8fdb\u884c\u8fd0\u7b97\uff0c\u5168 \\(1\\) \u5219 \\(1\\) \uff0c\u53cd\u4e4b\u4e3a \\(0\\) \u3002 \u6027\u8d28\uff1a \\(a \\& b \\le \\min(a,b)\\) \uff08\u624b\u63a8\u5373\u53ef\uff09\u3002 \u6309\u4f4d\u6216 | \uff0c or \u7279\u70b9\uff1a\u4e8c\u5143\u8fd0\u7b97\u7b26\uff0c\u4e8c\u8fdb\u5236\u4e0b\u6309\u4f4d\u8fdb\u884c\u8fd0\u7b97\uff0c\u6709 \\(1\\) \u5219 \\(1\\) \uff0c\u5168 \\(0\\) \u5219 \\(0\\) \u3002 \u6027\u8d28\uff1a \\(a | b \\ge \\max(a,b)\\) \u6709\u4e2a\u602a\u60f3\u6cd5\uff1a\u65e2\u7136\u4e0d\u7ba1\u662f\u5565 | 1 \u90fd\u662f 1\uff0c\u90a3\u662f\u4e0d\u662f\u53ef\u4ee5\u5f88\u5feb\u7684\u628a\u67d0\u4e2a\u6570\u53d8\u6210 \\(2^n-1\\) \u7684\u5f62\u5f0f\uff1f \u6309\u4f4d\u5f02\u6216 ^ \uff0c xor \u7279\u70b9\uff1a\u4e8c\u5143\u8fd0\u7b97\u7b26\uff0c\u4e8c\u8fdb\u5236\u4e0b\u6309\u4f4d\u8fdb\u884c\u8fd0\u7b97\uff0c\u76f8\u53cd\u5219 \\(1\\) \uff0c\u53cd\u4e4b\u5219 \\(0\\) \u3002 \u76f8\u5f53\u4e8e\u4e8c\u8fdb\u5236\u4e0b\u7684\u4e0d\u8fdb\u4f4d\u52a0\u6cd5\u3002 \\(x \\operatorname{xor} y = k \\ \\Rightarrow x \\operatorname{xor} k =y \\ \\Rightarrow y \\operatorname{xor} k=x\\) \u53ef\u4ee5\u7528\u4e8e\u6210\u5bf9\u53d8\u6362\uff08\u56fe\u8bba\u5f53\u4e2d\u5e38\u7528\uff09\u3002 \u4ee4 \\(n\\) \u4e3a\u5076\u6570\uff0c\u90a3\u4e48 \\(n \\operatorname{xor} 1 = n+1\\) \u3002 \u4ee4 \\(n\\) \u4e3a\u5947\u6570\uff0c\u90a3\u4e48 \\(n \\operatorname{xor} 1 =n-1\\) \u3002 \u6309\u4f4d\u53d6\u53cd ~ \uff0c not \u7279\u70b9\uff1a\u4e00\u5143\u8fd0\u7b97\u7b26\uff0c\u4e8c\u8fdb\u5236\u4e0b\u7684\u6bcf\u4e00\u4f4d\u90fd\u53d6\u53cd\uff08\u5305\u62ec\u7b26\u53f7\u4f4d\uff09\u3002 \u5de6\u79fb << \u7279\u70b9\uff1a\u4e00\u5143\u8fd0\u7b97\u7b26\uff0c\u4e8c\u8fdb\u5236\u4e0b\u628a\u6bcf\u4e00\u4f4d\u5411\u5de6\u5e73\u79fb\uff0c\u9ad8\u4f4d\u8d8a\u754c\u5219\u820d\u5f03\uff0c\u4f4e\u4f4d\u7528 \\(0\\) \u8865\u8db3\u3002 \u516c\u5f0f \\(1 << n =2^n,x<<n=x\\times 2^n\\) \u516c\u5f0f \u7b97\u672f\u53f3\u79fb >> \u7279\u70b9\uff1a\u4e00\u5143\u8fd0\u7b97\u7b26\uff0c\u4e8c\u8fdb\u5236\u4e0b\u628a\u6bcf\u4e00\u4f4d\u5411\u53f3\u5e73\u79fb\uff0c\u4f4e\u4f4d\u8d8a\u754c\u5219\u820d\u5f03\uff0c\u9ad8\u4f4d\u7528 \u7b26\u53f7\u4f4d \u8865\u8db3\u3002 \\(n>>1=\\lfloor \\frac{n}{2}\\rfloor\\) \u3002 GNU \u7684 GCC\u548cG++\u90fd\u4f7f\u7528\u7b97\u672f\u53f3\u79fb\uff0c\u903b\u8f91\u53f3\u79fb\u9ad8\u4f4d\u7528 \\(0\\) \u8865\u8db3\u3002 \u6280\u5de7 \u00b6 lowbit \u00b6 \\(\\operatorname{lowbit}(n)\\) \u8868\u793a\u4e8c\u8fdb\u5236\u4e0b \\(n\\) \u7684\u6700\u4f4e\u7684\u4e00\u4e2a \\(1\\) \u548c\u5b83\u540e\u9762\u7684 \\(0\\) \u7ec4\u6210\u7684\u6570\u3002 \u516c\u5f0f\uff1a \\(\\operatorname{lowbit}(n)=n \\& -n\\) \u3002 popcnt \u00b6 \\(\\operatorname{popcnt}(n)\\) \u8868\u793a\u4e8c\u8fdb\u5236\u4e0b \\(n\\) \u6709\u591a\u5c11\u4f4d\u662f \\(1\\) \u3002 \u53ef\u4ee5\u76f4\u63a5\u7528 1 2 int __builtin_popcount ( unsigned int x ) int __builtin_popcountll ( unsigned long long x ) \u6bd5\u7adf\u73b0\u5728\u7684 NOI Linux 2.0 \u652f\u6301 C++14 \u548c G++ 9.8.3\u3002 \u4e0d\u8fc7\u4e5f\u53ef\u4ee5\u624b\u5199 1 2 3 4 5 int res = 0 ; while ( n ){ ++ res ; n -= lowbit ( n ); } \u72b6\u538b \u00b6 \u628a\u72b6\u6001\u8868\u793a\u4e3a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u4e4b\u540e\u8fdb\u884c\u64cd\u4f5c\uff08\u5f53\u7136\u53ef\u4ee5\u7528 bitset\uff0c\u4f46\u662f\u80af\u5b9a\u6ca1\u6709\u76f4\u63a5\u62ff\u4e00\u4e2a\u6570\u6765\u505a\u597d\uff09\u3002 \u5047\u8bbe\u6700\u4f4e\u4f4d\u4e3a\u7b2c\u4e00\u4f4d\u3002 1 2 3 4 5 ( highest ) ( lowest ) | | V V bit : 9 8 7 6 5 4 3 2 1 num : 0 1 1 1 0 0 0 1 1 \u90a3\u4e48\u53ef\u4ee5\u6709\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u68c0\u6d4b\u7b2c \\(k\\) \u4f4d\u662f \\(0/1\\) \uff1a (n&(1<<(k-1)))!=0 -> 1 \u7ed9\u7b2c \\(k\\) \u4f4d\u53d6\u53cd\uff1a n^=(1<<(k-1)) \u5c06\u7b2c \\(k\\) \u4f4d\u8d4b\u503c\u4e3a \\(1\\) \uff1a n|=(1<<(k-1)) \u5c06\u7b2c \\(k\\) \u4f4d\u8d4b\u503c\u4e3a \\(0\\) \uff1a n&=(~(1<<(k-1))) \u56e0\u4e3a C++ \u9ed8\u8ba4\u662f \\(0\\) \u5f00\u5934\u7684\uff0c\u6240\u4ee5\u8981 \\(-1\\) \u3002 \u4e0d\u8fc7\u7ec8\u6001\u4ecd\u65e7\u662f \\(1<<n\\) \uff08\u548c\u6700\u4f4e\u4f4d\u4e3a \\(0\\) \u7684\u4e0d\u51cf\u4e00\u5199\u6cd5\u662f\u4e00\u6837\u7684\uff09 \u8bf4\u767d\u4e86\uff0c\u5982\u679c\u4ee5 \\(0\\) \u505a\u6700\u4f4e\u4f4d\uff0c\u4e0d \\(-1\\) \u3002\u4ee5 \\(1\\) \u505a\u6700\u4f4e\u4f4d\uff0c\u8981 \\(-1\\) \uff0c\u4f46\u662f\uff1b\u8fd9\u4e24\u79cd\u5199\u6cd5\u5199\u7684\u65f6\u5019\uff0c\u5bf9\u5e94\u7684\u4f4d\u7f6e\u5b9e\u9645\u4e0a\u662f\u4e00\u6837\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // C++ Version bool isPowerOfTwo ( int n ) { return n > 0 && ( n & ( n - 1 )) == 0 ; } // C++ Version int modPowerOfTwo ( int x , int mod ) { return x & ( mod - 1 ); } // C++ Version int Abs ( int n ) { return ( n ^ ( n >> 31 )) - ( n >> 31 ); /* n>>31 \u53d6\u5f97 n \u7684\u7b26\u53f7\uff0c\u82e5 n \u4e3a\u6b63\u6570\uff0cn>>31 \u7b49\u4e8e 0\uff0c\u82e5 n \u4e3a\u8d1f\u6570\uff0cn>>31 \u7b49\u4e8e -1 \u82e5 n \u4e3a\u6b63\u6570 n^0=n, \u6570\u4e0d\u53d8\uff0c\u82e5 n \u4e3a\u8d1f\u6570\u6709 n^(-1) \u9700\u8981\u8ba1\u7b97 n \u548c -1 \u7684\u8865\u7801\uff0c\u7136\u540e\u8fdb\u884c\u5f02\u6216\u8fd0\u7b97\uff0c \u7ed3\u679c n \u53d8\u53f7\u5e76\u4e14\u4e3a n \u7684\u7edd\u5bf9\u503c\u51cf 1\uff0c\u518d\u51cf\u53bb -1 \u5c31\u662f\u7edd\u5bf9\u503c */ } // C++ Version // \u5982\u679c a>=b,(a-b)>>31 \u4e3a 0\uff0c\u5426\u5219\u4e3a -1 int max ( int a , int b ) { return b & (( a - b ) >> 31 ) | a & ( ~ ( a - b ) >> 31 ); } int min ( int a , int b ) { return a & (( a - b ) >> 31 ) | b & ( ~ ( a - b ) >> 31 ); } \u5feb\u901f\u5e42 \u00b6 \u7ed9\u5b9a \\(a,b \\le 10^{9}\\) \uff0c \\(p\\) \u4e3a\u4e00\u4e2a\u5927\u8d28\u6570\uff0c\u6c42 \\(a^b \\operatorname{mod} p\\) \u3002 \u8003\u8651\u4e8c\u8fdb\u5236\u62c6\u5206\u601d\u60f3\uff0c\u628a \\(b\\) \u5728\u4e8c\u8fdb\u5236\u4e0b\uff08\u4e00\u5171 \\(k\\) \u4f4d\uff09\u7684\u6bcf\u4e00\u4e2a \\(1\\) \u5355\u72ec\u62c6\u5f00\uff1a \\(b= \\sum\\limits_{i=1}^k c_i \\times 2^{i-1}\\) \u628a\u5f0f\u5b50\u5c55\u5f00\u4e4b\u540e\u653e\u5230\u6307\u6570\u4f4d\u7f6e\uff1a \\(a^b=\\prod\\limits_{i=1}^{k} a^{c_k\\times2^{k-1}}\\) \u7136\u540e\u53d1\u73b0 \\(a^{2^i}=(a^{2^{i-1}})^2\\) \uff0c\u6240\u4ee5\u8fd9\u4e2a\u5f0f\u5b50\u53ef\u4ee5\u9012\u63a8\u3002 \u56e0\u4e3a \\(k \\le \\log(b)\\) \uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u662f \\(\\text{O}(\\log(b))\\) \u3002 1 2 3 4 5 6 7 inline int qpow ( int a , int b , int p ){ int ans = 1 % p ; // attention for (; b ; b >>= 1 ){ if ( b & 1 ) ans = ( long long ) ans * a % p ; // b \u7684\u5f53\u524d\u4f4d\u662f 1 \uff0c\u7d2f\u4e58\u7b54\u6848\u3002 a = ( long long ) a * a % p ; // \u9012\u63a8\u3002 } return ans ; } \u9f9f\u901f\u4e58 \u00b6 \u5982\u679c \\(10^{18}\\) \uff1f \u53d1\u73b0\u5feb\u901f\u5e42\u7684\u65f6\u5019\u4e58\u6cd5\u5bb9\u6613\u7206\uff0c\u6240\u4ee5\u8003\u8651\u5199\u4e00\u4e2a\u7c7b\u4f3c\u201c64\u4f4d\u6574\u6570\u4e58\u6cd5\u201d\u7684\u4e1c\u897f\u3002 \u4ecd\u7136\u8003\u8651\u4e8c\u8fdb\u5236\u62c6\u5206\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u9012\u63a8\uff0c\u4e0d\u8fc7\u4e0a\u9762\u662f\u4e58\uff0c\u8fd9\u91cc\u662f\u7d2f\u52a0\u3002 1 2 3 4 5 6 7 8 9 #define int long long inline int turtle_mul ( int a , int b , int p ){ int ans = 0 ; for (; b ; b >>= 1 ){ if ( b & 1 ) ans = ( ans + a ) % p ; a = a * 2 % p ; } return ans ; } #undef int \u5feb\u901f\u4e58 \u00b6 \u53d1\u73b0\u9f9f\u901f\u4e58\u7684\u65f6\u5019\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(\\log\\) \u7684\u3002 \u6240\u4ee5\u6211\u4eec\u60f3\u4e00\u60f3\u53c8\u6ca1\u6709\u66f4\u4f18\u79c0\u7684\u505a\u6cd5\u3002 \u9a86\u53ef\u5f3a\u795e\u4ed9\u57282009\u5e74\u7684\u96c6\u8bad\u961f\u8bba\u6587\u91cc\u63d0\u5230\u4e86\u4e00\u4e2a\u6709\u610f\u601d\u7684\u505a\u6cd5\u3002 \u56e0\u4e3a \\(a\\times b \\operatorname{mod} p=a\\times b -\\lfloor \\frac{a\\times b}{p} \\rfloor \\times p\\) \u3002 \u8003\u8651\u7528 long double \u5b58 \\(\\frac{a\\times b}{p}\\) \uff0c\u90a3\u4e48\u76f4\u63a5\u770b\u6574\u6570\u90e8\u5206\u5373\u53ef\u3002 \u7136\u540e\u53d1\u73b0\u4e0a\u9762\u7684\u51cf\u6cd5\u5f53\u4e2d\uff0c\u524d\u8005\u548c\u540e\u8005\u7684\u5dee\u4e0d\u4f1a\u5927\u4e8e \\(p\\) \uff0c\u6240\u4ee5\u5206\u522b\u7528 long long \u5b58\uff0c\u53ea\u9700\u8981\u5173\u5fc3\u8f83\u4f4e\u4f4d\u5c31\u884c\u3002 \u6574\u6570\u8fd0\u7b97\u6ea2\u51fa\u5c31\u76f8\u5f53\u4e8e\u53d6\u6a21\uff0c\u6240\u4ee5\u5b8c\u5168\u53ef\u4ee5\u8fd9\u4e48\u5e72\uff08\u4e0d\u8fc7\u5728 \\(p\\) \u5927\u4e86\u4e4b\u540e\u4f1a\u6709\u7cbe\u5ea6\u95ee\u9898\uff09\u3002 1 2 3 4 5 6 7 8 9 10 #define int long long inline int qmul ( int a , int b , int p ){ a %= p , b %= p ; int c = ( a * b ) / p ; int ans = a * b - c * p ; if ( ans < 0 ) ans += p ; else if ( ans >= p ) ans -= p ; return ans ; } #undef int","title":"\u4f4d\u8fd0\u7b97"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#_1","text":"","title":"\u4f4d\u8fd0\u7b97"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#_2","text":"and,or,xor \u7684\u663e\u8457\u7279\u70b9\u5c31\u662f\u4e8c\u8fdb\u5236\u4e0b\u4e0d\u8fdb\u4f4d\u3002 \u6309\u4f4d\u4e0e & \uff0c and \u7279\u70b9\uff1a\u4e8c\u5143\u8fd0\u7b97\u7b26\uff0c\u4e8c\u8fdb\u5236\u4e0b\u6309\u4f4d\u8fdb\u884c\u8fd0\u7b97\uff0c\u5168 \\(1\\) \u5219 \\(1\\) \uff0c\u53cd\u4e4b\u4e3a \\(0\\) \u3002 \u6027\u8d28\uff1a \\(a \\& b \\le \\min(a,b)\\) \uff08\u624b\u63a8\u5373\u53ef\uff09\u3002 \u6309\u4f4d\u6216 | \uff0c or \u7279\u70b9\uff1a\u4e8c\u5143\u8fd0\u7b97\u7b26\uff0c\u4e8c\u8fdb\u5236\u4e0b\u6309\u4f4d\u8fdb\u884c\u8fd0\u7b97\uff0c\u6709 \\(1\\) \u5219 \\(1\\) \uff0c\u5168 \\(0\\) \u5219 \\(0\\) \u3002 \u6027\u8d28\uff1a \\(a | b \\ge \\max(a,b)\\) \u6709\u4e2a\u602a\u60f3\u6cd5\uff1a\u65e2\u7136\u4e0d\u7ba1\u662f\u5565 | 1 \u90fd\u662f 1\uff0c\u90a3\u662f\u4e0d\u662f\u53ef\u4ee5\u5f88\u5feb\u7684\u628a\u67d0\u4e2a\u6570\u53d8\u6210 \\(2^n-1\\) \u7684\u5f62\u5f0f\uff1f \u6309\u4f4d\u5f02\u6216 ^ \uff0c xor \u7279\u70b9\uff1a\u4e8c\u5143\u8fd0\u7b97\u7b26\uff0c\u4e8c\u8fdb\u5236\u4e0b\u6309\u4f4d\u8fdb\u884c\u8fd0\u7b97\uff0c\u76f8\u53cd\u5219 \\(1\\) \uff0c\u53cd\u4e4b\u5219 \\(0\\) \u3002 \u76f8\u5f53\u4e8e\u4e8c\u8fdb\u5236\u4e0b\u7684\u4e0d\u8fdb\u4f4d\u52a0\u6cd5\u3002 \\(x \\operatorname{xor} y = k \\ \\Rightarrow x \\operatorname{xor} k =y \\ \\Rightarrow y \\operatorname{xor} k=x\\) \u53ef\u4ee5\u7528\u4e8e\u6210\u5bf9\u53d8\u6362\uff08\u56fe\u8bba\u5f53\u4e2d\u5e38\u7528\uff09\u3002 \u4ee4 \\(n\\) \u4e3a\u5076\u6570\uff0c\u90a3\u4e48 \\(n \\operatorname{xor} 1 = n+1\\) \u3002 \u4ee4 \\(n\\) \u4e3a\u5947\u6570\uff0c\u90a3\u4e48 \\(n \\operatorname{xor} 1 =n-1\\) \u3002 \u6309\u4f4d\u53d6\u53cd ~ \uff0c not \u7279\u70b9\uff1a\u4e00\u5143\u8fd0\u7b97\u7b26\uff0c\u4e8c\u8fdb\u5236\u4e0b\u7684\u6bcf\u4e00\u4f4d\u90fd\u53d6\u53cd\uff08\u5305\u62ec\u7b26\u53f7\u4f4d\uff09\u3002 \u5de6\u79fb << \u7279\u70b9\uff1a\u4e00\u5143\u8fd0\u7b97\u7b26\uff0c\u4e8c\u8fdb\u5236\u4e0b\u628a\u6bcf\u4e00\u4f4d\u5411\u5de6\u5e73\u79fb\uff0c\u9ad8\u4f4d\u8d8a\u754c\u5219\u820d\u5f03\uff0c\u4f4e\u4f4d\u7528 \\(0\\) \u8865\u8db3\u3002 \u516c\u5f0f \\(1 << n =2^n,x<<n=x\\times 2^n\\) \u516c\u5f0f \u7b97\u672f\u53f3\u79fb >> \u7279\u70b9\uff1a\u4e00\u5143\u8fd0\u7b97\u7b26\uff0c\u4e8c\u8fdb\u5236\u4e0b\u628a\u6bcf\u4e00\u4f4d\u5411\u53f3\u5e73\u79fb\uff0c\u4f4e\u4f4d\u8d8a\u754c\u5219\u820d\u5f03\uff0c\u9ad8\u4f4d\u7528 \u7b26\u53f7\u4f4d \u8865\u8db3\u3002 \\(n>>1=\\lfloor \\frac{n}{2}\\rfloor\\) \u3002 GNU \u7684 GCC\u548cG++\u90fd\u4f7f\u7528\u7b97\u672f\u53f3\u79fb\uff0c\u903b\u8f91\u53f3\u79fb\u9ad8\u4f4d\u7528 \\(0\\) \u8865\u8db3\u3002","title":"\u57fa\u7840\u8fd0\u7b97\u7b26"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#_3","text":"","title":"\u6280\u5de7"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#lowbit","text":"\\(\\operatorname{lowbit}(n)\\) \u8868\u793a\u4e8c\u8fdb\u5236\u4e0b \\(n\\) \u7684\u6700\u4f4e\u7684\u4e00\u4e2a \\(1\\) \u548c\u5b83\u540e\u9762\u7684 \\(0\\) \u7ec4\u6210\u7684\u6570\u3002 \u516c\u5f0f\uff1a \\(\\operatorname{lowbit}(n)=n \\& -n\\) \u3002","title":"lowbit"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#popcnt","text":"\\(\\operatorname{popcnt}(n)\\) \u8868\u793a\u4e8c\u8fdb\u5236\u4e0b \\(n\\) \u6709\u591a\u5c11\u4f4d\u662f \\(1\\) \u3002 \u53ef\u4ee5\u76f4\u63a5\u7528 1 2 int __builtin_popcount ( unsigned int x ) int __builtin_popcountll ( unsigned long long x ) \u6bd5\u7adf\u73b0\u5728\u7684 NOI Linux 2.0 \u652f\u6301 C++14 \u548c G++ 9.8.3\u3002 \u4e0d\u8fc7\u4e5f\u53ef\u4ee5\u624b\u5199 1 2 3 4 5 int res = 0 ; while ( n ){ ++ res ; n -= lowbit ( n ); }","title":"popcnt"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#_4","text":"\u628a\u72b6\u6001\u8868\u793a\u4e3a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u4e4b\u540e\u8fdb\u884c\u64cd\u4f5c\uff08\u5f53\u7136\u53ef\u4ee5\u7528 bitset\uff0c\u4f46\u662f\u80af\u5b9a\u6ca1\u6709\u76f4\u63a5\u62ff\u4e00\u4e2a\u6570\u6765\u505a\u597d\uff09\u3002 \u5047\u8bbe\u6700\u4f4e\u4f4d\u4e3a\u7b2c\u4e00\u4f4d\u3002 1 2 3 4 5 ( highest ) ( lowest ) | | V V bit : 9 8 7 6 5 4 3 2 1 num : 0 1 1 1 0 0 0 1 1 \u90a3\u4e48\u53ef\u4ee5\u6709\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u68c0\u6d4b\u7b2c \\(k\\) \u4f4d\u662f \\(0/1\\) \uff1a (n&(1<<(k-1)))!=0 -> 1 \u7ed9\u7b2c \\(k\\) \u4f4d\u53d6\u53cd\uff1a n^=(1<<(k-1)) \u5c06\u7b2c \\(k\\) \u4f4d\u8d4b\u503c\u4e3a \\(1\\) \uff1a n|=(1<<(k-1)) \u5c06\u7b2c \\(k\\) \u4f4d\u8d4b\u503c\u4e3a \\(0\\) \uff1a n&=(~(1<<(k-1))) \u56e0\u4e3a C++ \u9ed8\u8ba4\u662f \\(0\\) \u5f00\u5934\u7684\uff0c\u6240\u4ee5\u8981 \\(-1\\) \u3002 \u4e0d\u8fc7\u7ec8\u6001\u4ecd\u65e7\u662f \\(1<<n\\) \uff08\u548c\u6700\u4f4e\u4f4d\u4e3a \\(0\\) \u7684\u4e0d\u51cf\u4e00\u5199\u6cd5\u662f\u4e00\u6837\u7684\uff09 \u8bf4\u767d\u4e86\uff0c\u5982\u679c\u4ee5 \\(0\\) \u505a\u6700\u4f4e\u4f4d\uff0c\u4e0d \\(-1\\) \u3002\u4ee5 \\(1\\) \u505a\u6700\u4f4e\u4f4d\uff0c\u8981 \\(-1\\) \uff0c\u4f46\u662f\uff1b\u8fd9\u4e24\u79cd\u5199\u6cd5\u5199\u7684\u65f6\u5019\uff0c\u5bf9\u5e94\u7684\u4f4d\u7f6e\u5b9e\u9645\u4e0a\u662f\u4e00\u6837\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // C++ Version bool isPowerOfTwo ( int n ) { return n > 0 && ( n & ( n - 1 )) == 0 ; } // C++ Version int modPowerOfTwo ( int x , int mod ) { return x & ( mod - 1 ); } // C++ Version int Abs ( int n ) { return ( n ^ ( n >> 31 )) - ( n >> 31 ); /* n>>31 \u53d6\u5f97 n \u7684\u7b26\u53f7\uff0c\u82e5 n \u4e3a\u6b63\u6570\uff0cn>>31 \u7b49\u4e8e 0\uff0c\u82e5 n \u4e3a\u8d1f\u6570\uff0cn>>31 \u7b49\u4e8e -1 \u82e5 n \u4e3a\u6b63\u6570 n^0=n, \u6570\u4e0d\u53d8\uff0c\u82e5 n \u4e3a\u8d1f\u6570\u6709 n^(-1) \u9700\u8981\u8ba1\u7b97 n \u548c -1 \u7684\u8865\u7801\uff0c\u7136\u540e\u8fdb\u884c\u5f02\u6216\u8fd0\u7b97\uff0c \u7ed3\u679c n \u53d8\u53f7\u5e76\u4e14\u4e3a n \u7684\u7edd\u5bf9\u503c\u51cf 1\uff0c\u518d\u51cf\u53bb -1 \u5c31\u662f\u7edd\u5bf9\u503c */ } // C++ Version // \u5982\u679c a>=b,(a-b)>>31 \u4e3a 0\uff0c\u5426\u5219\u4e3a -1 int max ( int a , int b ) { return b & (( a - b ) >> 31 ) | a & ( ~ ( a - b ) >> 31 ); } int min ( int a , int b ) { return a & (( a - b ) >> 31 ) | b & ( ~ ( a - b ) >> 31 ); }","title":"\u72b6\u538b"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#_5","text":"\u7ed9\u5b9a \\(a,b \\le 10^{9}\\) \uff0c \\(p\\) \u4e3a\u4e00\u4e2a\u5927\u8d28\u6570\uff0c\u6c42 \\(a^b \\operatorname{mod} p\\) \u3002 \u8003\u8651\u4e8c\u8fdb\u5236\u62c6\u5206\u601d\u60f3\uff0c\u628a \\(b\\) \u5728\u4e8c\u8fdb\u5236\u4e0b\uff08\u4e00\u5171 \\(k\\) \u4f4d\uff09\u7684\u6bcf\u4e00\u4e2a \\(1\\) \u5355\u72ec\u62c6\u5f00\uff1a \\(b= \\sum\\limits_{i=1}^k c_i \\times 2^{i-1}\\) \u628a\u5f0f\u5b50\u5c55\u5f00\u4e4b\u540e\u653e\u5230\u6307\u6570\u4f4d\u7f6e\uff1a \\(a^b=\\prod\\limits_{i=1}^{k} a^{c_k\\times2^{k-1}}\\) \u7136\u540e\u53d1\u73b0 \\(a^{2^i}=(a^{2^{i-1}})^2\\) \uff0c\u6240\u4ee5\u8fd9\u4e2a\u5f0f\u5b50\u53ef\u4ee5\u9012\u63a8\u3002 \u56e0\u4e3a \\(k \\le \\log(b)\\) \uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u662f \\(\\text{O}(\\log(b))\\) \u3002 1 2 3 4 5 6 7 inline int qpow ( int a , int b , int p ){ int ans = 1 % p ; // attention for (; b ; b >>= 1 ){ if ( b & 1 ) ans = ( long long ) ans * a % p ; // b \u7684\u5f53\u524d\u4f4d\u662f 1 \uff0c\u7d2f\u4e58\u7b54\u6848\u3002 a = ( long long ) a * a % p ; // \u9012\u63a8\u3002 } return ans ; }","title":"\u5feb\u901f\u5e42"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#_6","text":"\u5982\u679c \\(10^{18}\\) \uff1f \u53d1\u73b0\u5feb\u901f\u5e42\u7684\u65f6\u5019\u4e58\u6cd5\u5bb9\u6613\u7206\uff0c\u6240\u4ee5\u8003\u8651\u5199\u4e00\u4e2a\u7c7b\u4f3c\u201c64\u4f4d\u6574\u6570\u4e58\u6cd5\u201d\u7684\u4e1c\u897f\u3002 \u4ecd\u7136\u8003\u8651\u4e8c\u8fdb\u5236\u62c6\u5206\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u9012\u63a8\uff0c\u4e0d\u8fc7\u4e0a\u9762\u662f\u4e58\uff0c\u8fd9\u91cc\u662f\u7d2f\u52a0\u3002 1 2 3 4 5 6 7 8 9 #define int long long inline int turtle_mul ( int a , int b , int p ){ int ans = 0 ; for (; b ; b >>= 1 ){ if ( b & 1 ) ans = ( ans + a ) % p ; a = a * 2 % p ; } return ans ; } #undef int","title":"\u9f9f\u901f\u4e58"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E4%BD%8D%E8%BF%90%E7%AE%97/#_7","text":"\u53d1\u73b0\u9f9f\u901f\u4e58\u7684\u65f6\u5019\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(\\log\\) \u7684\u3002 \u6240\u4ee5\u6211\u4eec\u60f3\u4e00\u60f3\u53c8\u6ca1\u6709\u66f4\u4f18\u79c0\u7684\u505a\u6cd5\u3002 \u9a86\u53ef\u5f3a\u795e\u4ed9\u57282009\u5e74\u7684\u96c6\u8bad\u961f\u8bba\u6587\u91cc\u63d0\u5230\u4e86\u4e00\u4e2a\u6709\u610f\u601d\u7684\u505a\u6cd5\u3002 \u56e0\u4e3a \\(a\\times b \\operatorname{mod} p=a\\times b -\\lfloor \\frac{a\\times b}{p} \\rfloor \\times p\\) \u3002 \u8003\u8651\u7528 long double \u5b58 \\(\\frac{a\\times b}{p}\\) \uff0c\u90a3\u4e48\u76f4\u63a5\u770b\u6574\u6570\u90e8\u5206\u5373\u53ef\u3002 \u7136\u540e\u53d1\u73b0\u4e0a\u9762\u7684\u51cf\u6cd5\u5f53\u4e2d\uff0c\u524d\u8005\u548c\u540e\u8005\u7684\u5dee\u4e0d\u4f1a\u5927\u4e8e \\(p\\) \uff0c\u6240\u4ee5\u5206\u522b\u7528 long long \u5b58\uff0c\u53ea\u9700\u8981\u5173\u5fc3\u8f83\u4f4e\u4f4d\u5c31\u884c\u3002 \u6574\u6570\u8fd0\u7b97\u6ea2\u51fa\u5c31\u76f8\u5f53\u4e8e\u53d6\u6a21\uff0c\u6240\u4ee5\u5b8c\u5168\u53ef\u4ee5\u8fd9\u4e48\u5e72\uff08\u4e0d\u8fc7\u5728 \\(p\\) \u5927\u4e86\u4e4b\u540e\u4f1a\u6709\u7cbe\u5ea6\u95ee\u9898\uff09\u3002 1 2 3 4 5 6 7 8 9 10 #define int long long inline int qmul ( int a , int b , int p ){ a %= p , b %= p ; int c = ( a * b ) / p ; int ans = a * b - c * p ; if ( ans < 0 ) ans += p ; else if ( ans >= p ) ans -= p ; return ans ; } #undef int","title":"\u5feb\u901f\u4e58"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E5%80%8D%E5%A2%9E/","text":"\u500d\u589e \u00b6 \u7528\u6210\u500d\u589e\u957f\u548c\u4e8c\u8fdb\u5236\u62c6\u5206\u7684\u601d\u60f3\u4f18\u5316\u7c7b\u4f3c\u9012\u63a8\u7684\u65b9\u6cd5\u3002 \u5e38\u89c1\u7684\u5e94\u7528\u662f LCA \u548c ST table\u3002 \u63a8\u5bfc\u7684\u67ff\u5b50\u662f \\(to[i][j] = to[to[i][j-1]][j-1]\\) \u3002 \u5176\u4e2d \\(to[i][j]\\) \u8868\u793a \\(i\\) \u8fd9\u4e2a\u5143\u7d20\u7ecf\u8fc7 \\(2^j\\) \u6b21\u64cd\u4f5c\u5f97\u5230\u7684\u4ec0\u4e48\u4e1c\u897f\u3002 \u4f7f\u7528\u7684\u65f6\u5019\u53ef\u4ee5\u628a\u72b6\u6001\u7a7a\u95f4\u5173\u4e8e \\(2\\) \u7684\u6b63\u6574\u6570\u6b21\u5e42\u6709\u53ef\u5212\u5206\u6027\u7684\u7c7b\u9012\u63a8\u95ee\u9898\u4ece \\(\\text{O}(n)\\) \u4f18\u5316\u5230 \\(\\text{O}(\\log n)\\) \u3002 \u6709\u53ef\u5212\u5206\u6027\u7684\u4e00\u79cd\u8868\u73b0\u662f\uff1a \\(to[i][j] = to[ to[ to[ to[i][j-3] ][j-3] ][j-2] ][j-1]\\) \uff0c\u5e76\u4e14\u8fd9\u6837\u53ef\u4ee5\u4e00\u76f4\u5d4c\u5957\u4e0b\u53bb\u3002 \u7136\u540e\u4e00\u822c\u5bf9\u4e8e\u4e00\u4e2a\u6570 \\(k\\) \uff0c\u8981\u60f3\u77e5\u9053 \\(i\\) \u7ecf\u8fc7 \\(k\\) \u6b21\u64cd\u4f5c\u7684\u7ed3\u679c\u662f\u4ec0\u4e48\u3002 \u5229\u7528\u6240\u6709\u6b63\u6574\u6570\u90fd\u53ef\u4ee5\u8868\u793a\u4e3a\u82e5\u5e72\u4e2a \\(2\\) \u7684\u6b21\u5e42\u9879\u7684\u548c\u8fd9\u4e2a\u6027\u8d28\u3002 \u5148\u6c42\u51fa \\(to\\) \u3002 \u7136\u540e\u628a \\(k\\) \u8f6c\u6210\u4e8c\u8fdb\u5236\uff0c\u5bf9\u5b83\u8fdb\u884c\u4e8c\u8fdb\u5236\u62c6\u5206\u3002 \u5177\u4f53\u6765\u8bf4\uff0c \u4ece\u5927\u5f80\u5c0f \u679a\u4e3e \\(k\\) \u5728\u4e8c\u8fdb\u5236\u4e0b\u7684\u6bcf\u4e00\u4f4d\uff0c\u5982\u679c\u5f53\u524d\u4f4d \\(j\\) \u662f \\(1\\) \uff0c\u90a3\u4e48\u4f7f \\(ans = to[ans][j]\\) \u3002 \u7136\u540e\u8fd9\u6837\u4e0d\u65ad\u8df3\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u3002 \u63a8\u8350\u6c42 \\(to\\) \u7684\u65f6\u5019\u628a \\(j\\) \u653e\u5728\u5916\u9762\uff0c\u56e0\u4e3a\u5982\u679c\u6240\u6709\u7684 \\(i\\) \u4f9d\u6b21\u7ec4\u6210\u7684\u4e0d\u662f\u4e00\u4e2a\u5355\u8c03\u7684\u5e8f\u5217\uff0c\u8f6c\u79fb\u7684\u65f6\u5019\u53ef\u80fd\u51fa\u73b0\u4ece \\(to[3] \\to to[1]\\) \u8fd9\u79cd\u3002 \u90a3\u4e48\u628a \\(i\\) \u653e\u5728\u5916\u9762\u5c31\u4f1a\u6709\u95ee\u9898\uff0c\u5982\u679c \\(i\\) \u662f\u5355\u8c03\u7684\uff0c\u90a3\u4e48\u600e\u6837\u90fd\u884c\u3002 \u4ee5 CF1647E \u4e3a\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 lg = ( int )( log ( k ) / log ( 2 )) + 1 ; for ( int i = 1 ; i <= n ; ++ i ) t [ i ][ 0 ] = p [ i ]; for ( int j = 1 ; j <= lg ; ++ j ) { for ( int i = 1 ; i <= n ; ++ i ) { t [ i ][ j ] = t [ t [ i ][ j - 1 ]][ j - 1 ]; } } // \u8fd9\u91cc\u5982\u679c i \u5728\u5916\u9762\u4f1a\u5bfc\u81f4\u51fa\u73b0 t[i][j] = 0\u3002 // \u56e0\u4e3a\u8fd9\u4e00\u9898\u7684 i \u4e0d\u662f\u6309\u7167\u5347\u5e8f\u6392\u5217\u6765 DP \u7684\uff0c\u5982\u679c i \u5728\u5916\u9762\u5c31\u6709\u540e\u6548\u6027\u3002 for ( int i = 1 ; i <= n ; ++ i ) dest [ i ] = i ; // dest[i] \u6700\u7ec8\u662f\u7ecf\u8fc7 k \u8f6e, \u539f\u6765\u5728 i \u7684\u4eba\u6240\u5728\u7684\u4f4d\u7f6e\u3002 for ( int j = lg ; j >= 0 ; -- j ) { if ( k >> j & 1 ) { for ( int i = 1 ; i <= n ; ++ i ) { dest [ i ] = t [ dest [ i ]][ j ]; if ( t [ dest [ i ]][ j ] == 0 ) cerr << \"Error on #\" << i << \", \" << j << endl ; } } // \u4e8c\u8fdb\u5236\u62c6\u5206 }","title":"\u500d\u589e"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E5%80%8D%E5%A2%9E/#_1","text":"\u7528\u6210\u500d\u589e\u957f\u548c\u4e8c\u8fdb\u5236\u62c6\u5206\u7684\u601d\u60f3\u4f18\u5316\u7c7b\u4f3c\u9012\u63a8\u7684\u65b9\u6cd5\u3002 \u5e38\u89c1\u7684\u5e94\u7528\u662f LCA \u548c ST table\u3002 \u63a8\u5bfc\u7684\u67ff\u5b50\u662f \\(to[i][j] = to[to[i][j-1]][j-1]\\) \u3002 \u5176\u4e2d \\(to[i][j]\\) \u8868\u793a \\(i\\) \u8fd9\u4e2a\u5143\u7d20\u7ecf\u8fc7 \\(2^j\\) \u6b21\u64cd\u4f5c\u5f97\u5230\u7684\u4ec0\u4e48\u4e1c\u897f\u3002 \u4f7f\u7528\u7684\u65f6\u5019\u53ef\u4ee5\u628a\u72b6\u6001\u7a7a\u95f4\u5173\u4e8e \\(2\\) \u7684\u6b63\u6574\u6570\u6b21\u5e42\u6709\u53ef\u5212\u5206\u6027\u7684\u7c7b\u9012\u63a8\u95ee\u9898\u4ece \\(\\text{O}(n)\\) \u4f18\u5316\u5230 \\(\\text{O}(\\log n)\\) \u3002 \u6709\u53ef\u5212\u5206\u6027\u7684\u4e00\u79cd\u8868\u73b0\u662f\uff1a \\(to[i][j] = to[ to[ to[ to[i][j-3] ][j-3] ][j-2] ][j-1]\\) \uff0c\u5e76\u4e14\u8fd9\u6837\u53ef\u4ee5\u4e00\u76f4\u5d4c\u5957\u4e0b\u53bb\u3002 \u7136\u540e\u4e00\u822c\u5bf9\u4e8e\u4e00\u4e2a\u6570 \\(k\\) \uff0c\u8981\u60f3\u77e5\u9053 \\(i\\) \u7ecf\u8fc7 \\(k\\) \u6b21\u64cd\u4f5c\u7684\u7ed3\u679c\u662f\u4ec0\u4e48\u3002 \u5229\u7528\u6240\u6709\u6b63\u6574\u6570\u90fd\u53ef\u4ee5\u8868\u793a\u4e3a\u82e5\u5e72\u4e2a \\(2\\) \u7684\u6b21\u5e42\u9879\u7684\u548c\u8fd9\u4e2a\u6027\u8d28\u3002 \u5148\u6c42\u51fa \\(to\\) \u3002 \u7136\u540e\u628a \\(k\\) \u8f6c\u6210\u4e8c\u8fdb\u5236\uff0c\u5bf9\u5b83\u8fdb\u884c\u4e8c\u8fdb\u5236\u62c6\u5206\u3002 \u5177\u4f53\u6765\u8bf4\uff0c \u4ece\u5927\u5f80\u5c0f \u679a\u4e3e \\(k\\) \u5728\u4e8c\u8fdb\u5236\u4e0b\u7684\u6bcf\u4e00\u4f4d\uff0c\u5982\u679c\u5f53\u524d\u4f4d \\(j\\) \u662f \\(1\\) \uff0c\u90a3\u4e48\u4f7f \\(ans = to[ans][j]\\) \u3002 \u7136\u540e\u8fd9\u6837\u4e0d\u65ad\u8df3\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u3002 \u63a8\u8350\u6c42 \\(to\\) \u7684\u65f6\u5019\u628a \\(j\\) \u653e\u5728\u5916\u9762\uff0c\u56e0\u4e3a\u5982\u679c\u6240\u6709\u7684 \\(i\\) \u4f9d\u6b21\u7ec4\u6210\u7684\u4e0d\u662f\u4e00\u4e2a\u5355\u8c03\u7684\u5e8f\u5217\uff0c\u8f6c\u79fb\u7684\u65f6\u5019\u53ef\u80fd\u51fa\u73b0\u4ece \\(to[3] \\to to[1]\\) \u8fd9\u79cd\u3002 \u90a3\u4e48\u628a \\(i\\) \u653e\u5728\u5916\u9762\u5c31\u4f1a\u6709\u95ee\u9898\uff0c\u5982\u679c \\(i\\) \u662f\u5355\u8c03\u7684\uff0c\u90a3\u4e48\u600e\u6837\u90fd\u884c\u3002 \u4ee5 CF1647E \u4e3a\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 lg = ( int )( log ( k ) / log ( 2 )) + 1 ; for ( int i = 1 ; i <= n ; ++ i ) t [ i ][ 0 ] = p [ i ]; for ( int j = 1 ; j <= lg ; ++ j ) { for ( int i = 1 ; i <= n ; ++ i ) { t [ i ][ j ] = t [ t [ i ][ j - 1 ]][ j - 1 ]; } } // \u8fd9\u91cc\u5982\u679c i \u5728\u5916\u9762\u4f1a\u5bfc\u81f4\u51fa\u73b0 t[i][j] = 0\u3002 // \u56e0\u4e3a\u8fd9\u4e00\u9898\u7684 i \u4e0d\u662f\u6309\u7167\u5347\u5e8f\u6392\u5217\u6765 DP \u7684\uff0c\u5982\u679c i \u5728\u5916\u9762\u5c31\u6709\u540e\u6548\u6027\u3002 for ( int i = 1 ; i <= n ; ++ i ) dest [ i ] = i ; // dest[i] \u6700\u7ec8\u662f\u7ecf\u8fc7 k \u8f6e, \u539f\u6765\u5728 i \u7684\u4eba\u6240\u5728\u7684\u4f4d\u7f6e\u3002 for ( int j = lg ; j >= 0 ; -- j ) { if ( k >> j & 1 ) { for ( int i = 1 ; i <= n ; ++ i ) { dest [ i ] = t [ dest [ i ]][ j ]; if ( t [ dest [ i ]][ j ] == 0 ) cerr << \"Error on #\" << i << \", \" << j << endl ; } } // \u4e8c\u8fdb\u5236\u62c6\u5206 }","title":"\u500d\u589e"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E5%85%B3%E4%BA%8Emt19937/","text":"\u5173\u4e8e mt19937 \u00b6 Introduction \u00b6 \u88ab\u677e\u672c\u5148\u751f\u548c\u897f\u6751\u5148\u751f\u4e8e 1998 \u5e74\u8bbe\u8ba1\u51fa\u6765\u3002 \u662f\u4e00\u4e2a\u751f\u6210\u9ad8\u8d28\u91cf\uff0c\u5206\u5e03\u5747\u5300\u7684\u968f\u673a\u6570\u7684\u7b97\u6cd5\uff08\u867d\u7136\u5728 C++11 \u5f53\u4e2d\u662f\u4e00\u4e2a class\uff09 \u9996\u5148\u6211\u4eec\u53ef\u4ee5\u641e\u5230 rand() \u7684\u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 static unsigned long next = 1 ; /* RAND_MAX assumed to be 32767 */ int myrand ( void ) { next = next * 1103515245 + 12345 ; return (( unsigned )( next / 65536 ) % 32768 ); } void mysrand ( unsigned seed ) { next = seed ; } // \u5229\u7528\u7ebf\u6027\u540c\u540c\u4f59\u6cd5\u5b9e\u73b0 \u53d1\u73b0\u8fd9\u4e2a\u73a9\u610f\u513f\u7684\u5faa\u73af\u8282\u53ea\u6709 \\(32767\\) \u3002 \u4ec0\u4e48\u610f\u601d\uff1f \u5c31\u662f\u5728\u5f53\u4f60\u9700\u8981\u751f\u6210\u5f88\u5927\u7684\u968f\u673a\u6570\u7684\u65f6\u5019\uff08\u6bd4\u5982\u6a21\u62df\u9000\u706b\uff09\uff0c\u4ed6\u5f88\u5bb9\u6613\u751f\u6210\u7684\u65f6\u5019\u5faa\u73af\u51fa\u73b0\u67d0\u4e2a\u6570\u3002 \u56de\u6765\u770b mt19937\u3002 \u4e3a\u5565\u8981\u53eb mt19937 \u5462\uff1f \u56e0\u4e3a\u5b83\u7684\u5faa\u73af\u8282\u662f \\(2^{19937}-1\\) \uff0c\u4e5f\u5c31\u662f\u6885\u68ee\uff08mt\uff09\u6570\u3002 \u7528\u5b83\uff0c\u4f60\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e9b\u5f88\u6709\u8d28\u91cf\u7684\uff0c\u5206\u5e03\u5747\u5300\u7684\u968f\u673a\u6570\u3002 Usage \u00b6 \u7528\u6cd5\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <random> #include <iostream> using namespace std ; int main (){ std :: random_device seedgen ; // \u975e\u786e\u5b9a\u7684\u5747\u5300\u968f\u673a\u4f4d\u751f\u6210\u5668 // \u5728\u71b5\u6c60\u8017\u5c3d\u4e4b\u524d\u975e\u5e38\u9ad8\u6548 // \u6240\u4ee5\u7528\u6765\u5f53\u79cd\u5b50\u751f\u6210\u5668 // NOIP \u8003\u573a\u6700\u597d\u4e0d\u7528\uff1f std :: mt19937 Myrand ( seedgen ()); // \u81ea\u5b9a\u4e49\u51fd\u6570 std :: uniform_int_distribution < long long > RangeInt ( 0 , 114514 ); // \u6307\u5b9a\u6574\u6570\u8303\u56f4 std :: uniform_real_distribution < long double > RangeReal ( 0.0 , 1919810.0 ); // \u6307\u5b9a\u5b9e\u6570\u8303\u56f4 cout << Myrand () << endl ; // \u6ca1\u6709\u8303\u56f4,\u4f46\u662f mt19937 \u662f 32 \u4f4d\u7684\uff0c\u6240\u4ee5\u4f1a\u5728 int \u4ee5\u5185\u3002 cout << RangeInt ( Myrand ) << endl ; // \u6709\u8303\u56f4\u7684\u5747\u5300\u6574\u6570 cout << RangeReal ( Myrand ) << endl ; // \u6709\u8303\u56f4\u7684\u5747\u5300\u5b9e\u6570 return 0 ; } \u8fd8\u6709\u4e00\u4e2a\u7528\u4e8e 64 \u4f4d\u6574\u6570\u7248\u7684 mt19937 \uff1a mt19937_64 \u7528\u6cd5\u4e00\u6837\uff0c\u590d\u6742\u5ea6\u5747\u644a \\(\\text{O}(1)\\) \u3002","title":"\u5173\u4e8emt19937"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E5%85%B3%E4%BA%8Emt19937/#mt19937","text":"","title":"\u5173\u4e8e mt19937"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E5%85%B3%E4%BA%8Emt19937/#introduction","text":"\u88ab\u677e\u672c\u5148\u751f\u548c\u897f\u6751\u5148\u751f\u4e8e 1998 \u5e74\u8bbe\u8ba1\u51fa\u6765\u3002 \u662f\u4e00\u4e2a\u751f\u6210\u9ad8\u8d28\u91cf\uff0c\u5206\u5e03\u5747\u5300\u7684\u968f\u673a\u6570\u7684\u7b97\u6cd5\uff08\u867d\u7136\u5728 C++11 \u5f53\u4e2d\u662f\u4e00\u4e2a class\uff09 \u9996\u5148\u6211\u4eec\u53ef\u4ee5\u641e\u5230 rand() \u7684\u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 static unsigned long next = 1 ; /* RAND_MAX assumed to be 32767 */ int myrand ( void ) { next = next * 1103515245 + 12345 ; return (( unsigned )( next / 65536 ) % 32768 ); } void mysrand ( unsigned seed ) { next = seed ; } // \u5229\u7528\u7ebf\u6027\u540c\u540c\u4f59\u6cd5\u5b9e\u73b0 \u53d1\u73b0\u8fd9\u4e2a\u73a9\u610f\u513f\u7684\u5faa\u73af\u8282\u53ea\u6709 \\(32767\\) \u3002 \u4ec0\u4e48\u610f\u601d\uff1f \u5c31\u662f\u5728\u5f53\u4f60\u9700\u8981\u751f\u6210\u5f88\u5927\u7684\u968f\u673a\u6570\u7684\u65f6\u5019\uff08\u6bd4\u5982\u6a21\u62df\u9000\u706b\uff09\uff0c\u4ed6\u5f88\u5bb9\u6613\u751f\u6210\u7684\u65f6\u5019\u5faa\u73af\u51fa\u73b0\u67d0\u4e2a\u6570\u3002 \u56de\u6765\u770b mt19937\u3002 \u4e3a\u5565\u8981\u53eb mt19937 \u5462\uff1f \u56e0\u4e3a\u5b83\u7684\u5faa\u73af\u8282\u662f \\(2^{19937}-1\\) \uff0c\u4e5f\u5c31\u662f\u6885\u68ee\uff08mt\uff09\u6570\u3002 \u7528\u5b83\uff0c\u4f60\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e9b\u5f88\u6709\u8d28\u91cf\u7684\uff0c\u5206\u5e03\u5747\u5300\u7684\u968f\u673a\u6570\u3002","title":"Introduction"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E5%85%B3%E4%BA%8Emt19937/#usage","text":"\u7528\u6cd5\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <random> #include <iostream> using namespace std ; int main (){ std :: random_device seedgen ; // \u975e\u786e\u5b9a\u7684\u5747\u5300\u968f\u673a\u4f4d\u751f\u6210\u5668 // \u5728\u71b5\u6c60\u8017\u5c3d\u4e4b\u524d\u975e\u5e38\u9ad8\u6548 // \u6240\u4ee5\u7528\u6765\u5f53\u79cd\u5b50\u751f\u6210\u5668 // NOIP \u8003\u573a\u6700\u597d\u4e0d\u7528\uff1f std :: mt19937 Myrand ( seedgen ()); // \u81ea\u5b9a\u4e49\u51fd\u6570 std :: uniform_int_distribution < long long > RangeInt ( 0 , 114514 ); // \u6307\u5b9a\u6574\u6570\u8303\u56f4 std :: uniform_real_distribution < long double > RangeReal ( 0.0 , 1919810.0 ); // \u6307\u5b9a\u5b9e\u6570\u8303\u56f4 cout << Myrand () << endl ; // \u6ca1\u6709\u8303\u56f4,\u4f46\u662f mt19937 \u662f 32 \u4f4d\u7684\uff0c\u6240\u4ee5\u4f1a\u5728 int \u4ee5\u5185\u3002 cout << RangeInt ( Myrand ) << endl ; // \u6709\u8303\u56f4\u7684\u5747\u5300\u6574\u6570 cout << RangeReal ( Myrand ) << endl ; // \u6709\u8303\u56f4\u7684\u5747\u5300\u5b9e\u6570 return 0 ; } \u8fd8\u6709\u4e00\u4e2a\u7528\u4e8e 64 \u4f4d\u6574\u6570\u7248\u7684 mt19937 \uff1a mt19937_64 \u7528\u6cd5\u4e00\u6837\uff0c\u590d\u6742\u5ea6\u5747\u644a \\(\\text{O}(1)\\) \u3002","title":"Usage"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E5%8C%BA%E9%97%B4%E6%9C%80%E5%80%BC%E9%97%AE%E9%A2%98/","text":"RMQ \u00b6 \u533a\u95f4\u6700\u503c\u95ee\u9898\u3002 \u53ef\u4ee5\u8003\u8651\u7ebf\u6bb5\u6811\u89e3\u51b3\u3002 \u4e0d\u8fc7\u6709\u4e00\u4e2a\u66f4\u597d\u5199\u4e00\u70b9\u7684\u65b9\u6cd5\uff0c \\(\\text{O}(n \\log n)\\) \u9884\u5904\u7406\uff0c \\(\\text{O}(1)\\) \u8be2\u95ee\uff0c\u4f46\u662f\u4e0d\u80fd\u5e26\u4fee\u3002 \u8fd9\u5c31\u662f ST \u8868\u3002 \u5229\u7528\u500d\u589e\u7684\u601d\u60f3\u8003\u8651\uff1a \u8bbe \\(f_{i,j}\\) \u8868\u793a\u4ece \\(i\\) \u5f00\u59cb\u7684 \\(2^j\\) \u4e2a\u6570\u5f53\u4e2d\u7684\u6700\u503c\u3002 \u7c7b\u4f3c\u7ebf\u6bb5\u6811\uff0c\u628a\u4e24\u4e2a\u534a\u533a\u95f4\u7684\u4fe1\u606f\u4e0a\u4f20\u5230\u5927\u533a\u95f4\u3002 \u90a3\u4e48 \\(f_{i,j}=\\max(f_{i,j-1},f_{i+2^{j-1},j-1})\\) \u8be2\u95ee\u533a\u95f4 \\([l,r]\\) \u7684\u6700\u503c\u7684\u65f6\u5019\uff0c\u627e\u5230\u4e00\u4e2a \\(k\\) \u4f7f\u5f97 \\(2^k \\le r-l+1 \\le 2^{k+1}\\) \u3002 \u90a3\u4e48 \\(ans=\\max(f_{l,k},f_{r-2^k+1,k})\\) \u3002\u8fd9\u4e24\u4e2a\u533a\u95f4\u4f1a\u8986\u76d6\uff0c\u4f46\u662f\u6ca1\u6709\u5f71\u54cd\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 const int si = 1e5 + 10 ; int st [ si ][ 20 ]; int a [ si ], Log [ si ]; inline void ST_prework (){ for ( register int i = 2 ; i <= n ; ++ i ){ Log [ i ] = Log [ i >> 1 ] + 1 ; } for ( register int i = 1 ; i <= n ; ++ i ){ st [ i ][ 0 ] = a [ i ]; } for ( register int j = 1 ; j <= Log [ n ]; ++ j ){ for ( register int i = 1 ; i <= ( n + 1 ) - ( 1 << j ); ++ i ){ // \u6ce8\u610f\u5faa\u5e8f st [ i ][ j ] = max ( st [ i ][ j -1 ], st [ i + ( 1 << ( j -1 ))][ j -1 ]); } } } inline int query ( int l , int r ){ int k = Log [ r - l + 1 ]; return max ( f [ l ][ k ], f [ r - ( 1 << k ) + 1 ][ k ]); }","title":"\u533a\u95f4\u6700\u503c\u95ee\u9898"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E5%8C%BA%E9%97%B4%E6%9C%80%E5%80%BC%E9%97%AE%E9%A2%98/#rmq","text":"\u533a\u95f4\u6700\u503c\u95ee\u9898\u3002 \u53ef\u4ee5\u8003\u8651\u7ebf\u6bb5\u6811\u89e3\u51b3\u3002 \u4e0d\u8fc7\u6709\u4e00\u4e2a\u66f4\u597d\u5199\u4e00\u70b9\u7684\u65b9\u6cd5\uff0c \\(\\text{O}(n \\log n)\\) \u9884\u5904\u7406\uff0c \\(\\text{O}(1)\\) \u8be2\u95ee\uff0c\u4f46\u662f\u4e0d\u80fd\u5e26\u4fee\u3002 \u8fd9\u5c31\u662f ST \u8868\u3002 \u5229\u7528\u500d\u589e\u7684\u601d\u60f3\u8003\u8651\uff1a \u8bbe \\(f_{i,j}\\) \u8868\u793a\u4ece \\(i\\) \u5f00\u59cb\u7684 \\(2^j\\) \u4e2a\u6570\u5f53\u4e2d\u7684\u6700\u503c\u3002 \u7c7b\u4f3c\u7ebf\u6bb5\u6811\uff0c\u628a\u4e24\u4e2a\u534a\u533a\u95f4\u7684\u4fe1\u606f\u4e0a\u4f20\u5230\u5927\u533a\u95f4\u3002 \u90a3\u4e48 \\(f_{i,j}=\\max(f_{i,j-1},f_{i+2^{j-1},j-1})\\) \u8be2\u95ee\u533a\u95f4 \\([l,r]\\) \u7684\u6700\u503c\u7684\u65f6\u5019\uff0c\u627e\u5230\u4e00\u4e2a \\(k\\) \u4f7f\u5f97 \\(2^k \\le r-l+1 \\le 2^{k+1}\\) \u3002 \u90a3\u4e48 \\(ans=\\max(f_{l,k},f_{r-2^k+1,k})\\) \u3002\u8fd9\u4e24\u4e2a\u533a\u95f4\u4f1a\u8986\u76d6\uff0c\u4f46\u662f\u6ca1\u6709\u5f71\u54cd\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 const int si = 1e5 + 10 ; int st [ si ][ 20 ]; int a [ si ], Log [ si ]; inline void ST_prework (){ for ( register int i = 2 ; i <= n ; ++ i ){ Log [ i ] = Log [ i >> 1 ] + 1 ; } for ( register int i = 1 ; i <= n ; ++ i ){ st [ i ][ 0 ] = a [ i ]; } for ( register int j = 1 ; j <= Log [ n ]; ++ j ){ for ( register int i = 1 ; i <= ( n + 1 ) - ( 1 << j ); ++ i ){ // \u6ce8\u610f\u5faa\u5e8f st [ i ][ j ] = max ( st [ i ][ j -1 ], st [ i + ( 1 << ( j -1 ))][ j -1 ]); } } } inline int query ( int l , int r ){ int k = Log [ r - l + 1 ]; return max ( f [ l ][ k ], f [ r - ( 1 << k ) + 1 ][ k ]); }","title":"RMQ"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E5%B7%AE%E5%88%86%E5%89%8D%E7%BC%80%E5%92%8C/","text":"\u5dee\u5206\u524d\u7f00\u548c \u00b6 \u4e00\u7ef4\u524d\u7f00\u548c \u00b6 \u53ef\u4ee5\u5b9e\u73b0 \\(\\text{O}(n)\\) \u9884\u5904\u7406\uff0c \\(\\text{O}(1)\\) \u8be2\u95ee\u533a\u95f4\u548c\u3002 \u4ee4 \\(sum_i\\) \u8868\u793a\u533a\u95f4 \\([0,i]\\) \u7684\u524d\u7f00\u548c\u3002 \u7279\u522b\u7684\uff0c \\(a_0=0\\) \u3002 \u90a3\u4e48\u6bcf\u6b21\u7d2f\u52a0\u5373\u53ef\uff0c\u67e5\u8be2\u533a\u95f4 \\([l,r]\\) \u7684\u548c\u53ea\u9700\u8981\u8f93\u51fa \\(sum_r-sum_{l-1}\\) \u3002 1 2 3 4 int a [ si ], sum [ si ]; a [ 0 ] = sum [ 0 ] = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ scanf ( \"%d\" , & a [ i ]), sum [ i ] = sum [ i -1 ] + a [ i ]; } int l , r ; scanf ( \"%d%d\" , & l , & r ), printf ( \"%d \\n \" , sum [ r ] - sum [ l -1 ]); \u4e8c\u7ef4\u524d\u7f00\u548c \u00b6 \u53ef\u4ee5\u5b9e\u73b0 \\(\\text{O}(n^2)\\) \u9884\u5904\u7406\uff0c \\(\\text{O}(1)\\) \u8be2\u95ee\u77e9\u9635\u548c\u3002 \u4ee4 \\(sum_{i,j}\\) \u8868\u793a\u5de6\u4e0a\u89d2\u4e3a \\((1,1)\\) \uff0c\u53f3\u4e0b\u89d2\u4e3a \\((i,j)\\) \u7684\u77e9\u9635\u548c\u3002 \u8003\u8651\u5bb9\u65a5\uff0c\u9884\u5904\u7406\u7684\u65f6\u5019\u4ee4 \\(sum_{i,j}=sum_{i-1,j}+sum_{i,j-1}-sum_{i-1,j-1}+a[i][j]\\) \u3002 \u4ecd\u7136\u8003\u8651\u5bb9\u65a5\uff0c\u8be2\u95ee\u5de6\u4e0a\u89d2\u4e3a \\((x_1,y_1)\\) \uff0c\u53f3\u4e0b\u89d2\u4e3a \\((x_2,y_2)\\) \u7684\u5b50\u77e9\u9635\u5219\u53ea\u9700\u8981\uff1a \\(ans=sum_{x_2,y_2}-sum_{x_1,y_2}-sum_{x_2,y_1}+sum_{x_1,y_1}\\) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int a [ si ][ si ], sum [ si ][ si ]; memset ( sum , 0 , sizeof sum ); for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= m ; ++ j ){ scanf ( \"%d\" , & a [ i ][ j ]), sum [ i ][ j ] += a [ i ][ j ]; } } for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= m ; ++ j ){ sum [ i ][ j ] += sum [ i -1 ][ j ] + sum [ i ][ j -1 ] - sum [ i -1 ][ j -1 ]; } } int x , xx , y , yy ; scanf ( \"%d%d%d%d\" , & x , & y , & xx , & yy ); printf ( \"%d \\n \" , sum [ xx ][ yy ] - sum [ x ][ yy ] - sum [ xx ][ y ] + sum [ x ][ y ]); \u4e00\u7ef4\u5dee\u5206 \u00b6 \u53ef\u4ee5\u5b9e\u73b0 \\(\\text{O}(1)\\) \u4fee\u6539\uff0c \\(\\text{O}(n)\\) \u67e5\u8be2\u3002 \u4e00\u4e2a\u4fbf\u4e8e\u7406\u89e3\u7684\u7279\u70b9\u5c31\u662f\uff0c \u539f\u6570\u7ec4\u5c31\u662f\u5dee\u5206\u5e8f\u5217\u7684\u524d\u7f00\u548c \u3002 \u5b9a\u4e49\u5dee\u5206\u5e8f\u5217 \\(c_i=\\begin{cases}a_1 & i=1 \\\\ a_i-a_{i-1} & \\text{otherwise.}\\end{cases}\\) \u7136\u540e\u5982\u679c\u8981\u4fee\u6539 \\([l,r]\\) \uff0c\u90a3\u4e48\u7ed9 \\(c[l]\\) \u52a0\u4e0a \\(d\\) \uff0c \\(c[r+1]\\) \u51cf\u53bb \\(d\\) \u3002 \u5176\u5b9e\u5f88\u597d\u7406\u89e3\uff0c\u8981\u8ba9 \\(c\\) \u7684\u524d\u7f00\u548c\u6570\u7ec4\u7684 \\([l,r]\\) \u6539\u53d8\uff0c\u90a3\u5148\u5728 \\(l\\) \u8fd9\u513f\u52a0\u4e0a \\(d\\) \uff0c\u8ba9 \\(a[l]\\to a[n]\\) \u90fd\u591a\u4e00\u4e2a \\(d\\) \u3002 \u7136\u540e\u5728 \\(r+1\\) \u8fd9\u513f\u51cf\u53bb \\(d\\) \uff0c\u8ba9 \\(a[r+1] \\to a[n]\\) \u90fd\u5c11\u4e00\u4e2a \\(d\\) \u5c31\u53ef\u4ee5\u4e86\u3002 1 2 3 4 5 6 7 8 int a [ si ], c [ si ]; scanf ( \"%d\" , & a [ 1 ]), c [ 0 ] = 0 , c [ 1 ] = a [ 1 ]; for ( register int i = 2 ; i <= n ; ++ i ){ scanf ( \"%d\" , & a [ i ]), c [ i ] = a [ i ] - a [ i -1 ]; } int l , r , d ; scanf ( \"%d%d%d\" , & l , & r , & d ), c [ l ] += d , c [ r + 1 ] -= d ; for ( register int i = 1 ; i <= n ; ++ i ){ c [ i ] += c [ i -1 ], printf ( \"%d \\n \" , c [ i ]); } // \u505a\u524d\u7f00\u548c\u6062\u590d\u5e8f\u5217\u3002 \u4e8c\u7ef4\u5dee\u5206 \u00b6 \u53ef\u4ee5\u5b9e\u73b0 \\(\\text{O}(1)\\) \u4fee\u6539\uff0c \\(\\text{O}(n^2)\\) \u67e5\u8be2\u3002 \u5b9a\u4e49\u5dee\u5206\u77e9\u9635 \\(c_{i,j}\\) \uff0c\u6ee1\u8db3 \\(a_{i,j}\\) \u4e3a \\(c_{i,j}\\) \u7684\u524d\u7f00\u548c\u77e9\u9635\u3002 \u7528\u4e8c\u7ef4\u524d\u7f00\u548c\u7684\u601d\u60f3\u53ef\u4ee5\u5f97\u5230\uff1a \\(a_{i,j}=a_{i-1,j}+a_{i,j-1}-a_{i-1,j-1}+c_{i,j}\\) \u3002 \u90a3\u4e48 \\(c_{i,j}=a_{i,j}-a_{i-1,j}-a_{i,j-1}+a_{i-1,j-1}\\) \u3002 \u7136\u540e\u8003\u8651\u600e\u4e48\u6837\u8fdb\u884c\u77e9\u9635\u7ef4\u62a4\u3002 \u7c7b\u4f3c\u4e00\u7ef4\u5dee\u5206\u7684\u601d\u60f3\uff0c\u6211\u6253\u7b97\u5728\u7aef\u70b9\u5904\u8fdb\u884c\u7ef4\u62a4\u3002 \u6bd4\u5982\u7ed9 \\((x_1,y_1)\\) \u4e3a\u5de6\u4e0a\u89d2\uff0c \\((x_2,y_2)\\) \u4e3a\u53f3\u4e0b\u89d2\u7684\u5b50\u77e9\u9635\u5168\u90e8\u52a0\u4e0a \\(d\\) \uff0c\u53ef\u4ee5\u7528\u4e8c\u7ef4\u7ebf\u6bb5\u6811\uff0c\u4f46\u662f\u8fd9\u91cc\u8003\u8651\u5dee\u5206\u3002 \u9996\u5148\u5c1d\u8bd5\u7ed9 \\(c_{x_1,y_1}\\) \u52a0\u4e0a \\(d\\) \uff0c\u90a3\u4e48\u53d1\u73b0\u4ece \\((x_1,y_1)\\) \u4e00\u76f4\u5230\u6574\u4e2a\u77e9\u9635\u7684\u53f3\u4e0b\u89d2\u90fd\u88ab\u52a0\u4e86 \\(d\\) \uff0c\u7136\u540e\u6211\u4eec\u53c8\u9700\u8981\u4fdd\u7559 \\((x_1,y_1) \\to (x_2,y_2)\\) \u3002 \u90a3\u4e48\u7528\u5bb9\u65a5\u601d\u60f3\uff0c\u8ba9 \\(c_{x_1,y_2+1}\\) \uff0c\u548c \\(c_{x_2+1,y_1}\\) \u5168\u90e8\u51cf\u53bb \\(d\\) \uff0c\u7136\u540e\u53d1\u73b0\u6709\u4e2a\u90e8\u5206\u88ab\u591a\u51cf\u53bb\u4e86\uff0c\u662f \\(c_{x_2+1,y_2+1}\\) \uff0c\u6240\u4ee5\u7ed9\u5b83\u52a0\u56de\u6765\u3002 \u90a3\u4e48\u4fee\u6539\u5c31\u5316\u4e3a\u4e86\u56db\u6b65\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 int a [ si ][ si ], c [ si ][ si ]; for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= m ; ++ j ){ scanf ( \"%d\" , & a [ i ][ j ]); c [ i ][ j ] = a [ i ][ j ] - a [ i -1 ][ j ] - a [ i ][ j -1 ] + a [ i -1 ][ j -1 ]; } } int x , xx , y , yy , d ; scanf ( \"%d%d%d%d%d\" , & x , & y , & xx , & yy , & d ); c [ x ][ y ] += d , c [ x ][ yy + 1 ] -= d , c [ xx + 1 ][ y ] -= d , c [ xx + 1 ][ yy + 1 ] += d ; for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= m ; ++ j ){ a [ i ][ j ] = a [ i -1 ][ j ] + a [ i ][ j -1 ] - a [ i -1 ][ j -1 ] + c [ i ][ j ]; } } // \u505a\u4e8c\u7ef4\u524d\u7f00\u548c\u8fd8\u539f\u77e9\u9635\u3002 \u53ea\u8981\u6ce8\u610f\u5dee\u5206\u548c\u524d\u7f00\u548c\u7684\u7d27\u5bc6\u5173\u7cfb\uff0c\u73b0\u63a8\u90fd\u662f\u53ef\u4ee5\u7684\u3002","title":"\u5dee\u5206\u524d\u7f00\u548c"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E5%B7%AE%E5%88%86%E5%89%8D%E7%BC%80%E5%92%8C/#_1","text":"","title":"\u5dee\u5206\u524d\u7f00\u548c"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E5%B7%AE%E5%88%86%E5%89%8D%E7%BC%80%E5%92%8C/#_2","text":"\u53ef\u4ee5\u5b9e\u73b0 \\(\\text{O}(n)\\) \u9884\u5904\u7406\uff0c \\(\\text{O}(1)\\) \u8be2\u95ee\u533a\u95f4\u548c\u3002 \u4ee4 \\(sum_i\\) \u8868\u793a\u533a\u95f4 \\([0,i]\\) \u7684\u524d\u7f00\u548c\u3002 \u7279\u522b\u7684\uff0c \\(a_0=0\\) \u3002 \u90a3\u4e48\u6bcf\u6b21\u7d2f\u52a0\u5373\u53ef\uff0c\u67e5\u8be2\u533a\u95f4 \\([l,r]\\) \u7684\u548c\u53ea\u9700\u8981\u8f93\u51fa \\(sum_r-sum_{l-1}\\) \u3002 1 2 3 4 int a [ si ], sum [ si ]; a [ 0 ] = sum [ 0 ] = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ scanf ( \"%d\" , & a [ i ]), sum [ i ] = sum [ i -1 ] + a [ i ]; } int l , r ; scanf ( \"%d%d\" , & l , & r ), printf ( \"%d \\n \" , sum [ r ] - sum [ l -1 ]);","title":"\u4e00\u7ef4\u524d\u7f00\u548c"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E5%B7%AE%E5%88%86%E5%89%8D%E7%BC%80%E5%92%8C/#_3","text":"\u53ef\u4ee5\u5b9e\u73b0 \\(\\text{O}(n^2)\\) \u9884\u5904\u7406\uff0c \\(\\text{O}(1)\\) \u8be2\u95ee\u77e9\u9635\u548c\u3002 \u4ee4 \\(sum_{i,j}\\) \u8868\u793a\u5de6\u4e0a\u89d2\u4e3a \\((1,1)\\) \uff0c\u53f3\u4e0b\u89d2\u4e3a \\((i,j)\\) \u7684\u77e9\u9635\u548c\u3002 \u8003\u8651\u5bb9\u65a5\uff0c\u9884\u5904\u7406\u7684\u65f6\u5019\u4ee4 \\(sum_{i,j}=sum_{i-1,j}+sum_{i,j-1}-sum_{i-1,j-1}+a[i][j]\\) \u3002 \u4ecd\u7136\u8003\u8651\u5bb9\u65a5\uff0c\u8be2\u95ee\u5de6\u4e0a\u89d2\u4e3a \\((x_1,y_1)\\) \uff0c\u53f3\u4e0b\u89d2\u4e3a \\((x_2,y_2)\\) \u7684\u5b50\u77e9\u9635\u5219\u53ea\u9700\u8981\uff1a \\(ans=sum_{x_2,y_2}-sum_{x_1,y_2}-sum_{x_2,y_1}+sum_{x_1,y_1}\\) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int a [ si ][ si ], sum [ si ][ si ]; memset ( sum , 0 , sizeof sum ); for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= m ; ++ j ){ scanf ( \"%d\" , & a [ i ][ j ]), sum [ i ][ j ] += a [ i ][ j ]; } } for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= m ; ++ j ){ sum [ i ][ j ] += sum [ i -1 ][ j ] + sum [ i ][ j -1 ] - sum [ i -1 ][ j -1 ]; } } int x , xx , y , yy ; scanf ( \"%d%d%d%d\" , & x , & y , & xx , & yy ); printf ( \"%d \\n \" , sum [ xx ][ yy ] - sum [ x ][ yy ] - sum [ xx ][ y ] + sum [ x ][ y ]);","title":"\u4e8c\u7ef4\u524d\u7f00\u548c"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E5%B7%AE%E5%88%86%E5%89%8D%E7%BC%80%E5%92%8C/#_4","text":"\u53ef\u4ee5\u5b9e\u73b0 \\(\\text{O}(1)\\) \u4fee\u6539\uff0c \\(\\text{O}(n)\\) \u67e5\u8be2\u3002 \u4e00\u4e2a\u4fbf\u4e8e\u7406\u89e3\u7684\u7279\u70b9\u5c31\u662f\uff0c \u539f\u6570\u7ec4\u5c31\u662f\u5dee\u5206\u5e8f\u5217\u7684\u524d\u7f00\u548c \u3002 \u5b9a\u4e49\u5dee\u5206\u5e8f\u5217 \\(c_i=\\begin{cases}a_1 & i=1 \\\\ a_i-a_{i-1} & \\text{otherwise.}\\end{cases}\\) \u7136\u540e\u5982\u679c\u8981\u4fee\u6539 \\([l,r]\\) \uff0c\u90a3\u4e48\u7ed9 \\(c[l]\\) \u52a0\u4e0a \\(d\\) \uff0c \\(c[r+1]\\) \u51cf\u53bb \\(d\\) \u3002 \u5176\u5b9e\u5f88\u597d\u7406\u89e3\uff0c\u8981\u8ba9 \\(c\\) \u7684\u524d\u7f00\u548c\u6570\u7ec4\u7684 \\([l,r]\\) \u6539\u53d8\uff0c\u90a3\u5148\u5728 \\(l\\) \u8fd9\u513f\u52a0\u4e0a \\(d\\) \uff0c\u8ba9 \\(a[l]\\to a[n]\\) \u90fd\u591a\u4e00\u4e2a \\(d\\) \u3002 \u7136\u540e\u5728 \\(r+1\\) \u8fd9\u513f\u51cf\u53bb \\(d\\) \uff0c\u8ba9 \\(a[r+1] \\to a[n]\\) \u90fd\u5c11\u4e00\u4e2a \\(d\\) \u5c31\u53ef\u4ee5\u4e86\u3002 1 2 3 4 5 6 7 8 int a [ si ], c [ si ]; scanf ( \"%d\" , & a [ 1 ]), c [ 0 ] = 0 , c [ 1 ] = a [ 1 ]; for ( register int i = 2 ; i <= n ; ++ i ){ scanf ( \"%d\" , & a [ i ]), c [ i ] = a [ i ] - a [ i -1 ]; } int l , r , d ; scanf ( \"%d%d%d\" , & l , & r , & d ), c [ l ] += d , c [ r + 1 ] -= d ; for ( register int i = 1 ; i <= n ; ++ i ){ c [ i ] += c [ i -1 ], printf ( \"%d \\n \" , c [ i ]); } // \u505a\u524d\u7f00\u548c\u6062\u590d\u5e8f\u5217\u3002","title":"\u4e00\u7ef4\u5dee\u5206"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E5%B7%AE%E5%88%86%E5%89%8D%E7%BC%80%E5%92%8C/#_5","text":"\u53ef\u4ee5\u5b9e\u73b0 \\(\\text{O}(1)\\) \u4fee\u6539\uff0c \\(\\text{O}(n^2)\\) \u67e5\u8be2\u3002 \u5b9a\u4e49\u5dee\u5206\u77e9\u9635 \\(c_{i,j}\\) \uff0c\u6ee1\u8db3 \\(a_{i,j}\\) \u4e3a \\(c_{i,j}\\) \u7684\u524d\u7f00\u548c\u77e9\u9635\u3002 \u7528\u4e8c\u7ef4\u524d\u7f00\u548c\u7684\u601d\u60f3\u53ef\u4ee5\u5f97\u5230\uff1a \\(a_{i,j}=a_{i-1,j}+a_{i,j-1}-a_{i-1,j-1}+c_{i,j}\\) \u3002 \u90a3\u4e48 \\(c_{i,j}=a_{i,j}-a_{i-1,j}-a_{i,j-1}+a_{i-1,j-1}\\) \u3002 \u7136\u540e\u8003\u8651\u600e\u4e48\u6837\u8fdb\u884c\u77e9\u9635\u7ef4\u62a4\u3002 \u7c7b\u4f3c\u4e00\u7ef4\u5dee\u5206\u7684\u601d\u60f3\uff0c\u6211\u6253\u7b97\u5728\u7aef\u70b9\u5904\u8fdb\u884c\u7ef4\u62a4\u3002 \u6bd4\u5982\u7ed9 \\((x_1,y_1)\\) \u4e3a\u5de6\u4e0a\u89d2\uff0c \\((x_2,y_2)\\) \u4e3a\u53f3\u4e0b\u89d2\u7684\u5b50\u77e9\u9635\u5168\u90e8\u52a0\u4e0a \\(d\\) \uff0c\u53ef\u4ee5\u7528\u4e8c\u7ef4\u7ebf\u6bb5\u6811\uff0c\u4f46\u662f\u8fd9\u91cc\u8003\u8651\u5dee\u5206\u3002 \u9996\u5148\u5c1d\u8bd5\u7ed9 \\(c_{x_1,y_1}\\) \u52a0\u4e0a \\(d\\) \uff0c\u90a3\u4e48\u53d1\u73b0\u4ece \\((x_1,y_1)\\) \u4e00\u76f4\u5230\u6574\u4e2a\u77e9\u9635\u7684\u53f3\u4e0b\u89d2\u90fd\u88ab\u52a0\u4e86 \\(d\\) \uff0c\u7136\u540e\u6211\u4eec\u53c8\u9700\u8981\u4fdd\u7559 \\((x_1,y_1) \\to (x_2,y_2)\\) \u3002 \u90a3\u4e48\u7528\u5bb9\u65a5\u601d\u60f3\uff0c\u8ba9 \\(c_{x_1,y_2+1}\\) \uff0c\u548c \\(c_{x_2+1,y_1}\\) \u5168\u90e8\u51cf\u53bb \\(d\\) \uff0c\u7136\u540e\u53d1\u73b0\u6709\u4e2a\u90e8\u5206\u88ab\u591a\u51cf\u53bb\u4e86\uff0c\u662f \\(c_{x_2+1,y_2+1}\\) \uff0c\u6240\u4ee5\u7ed9\u5b83\u52a0\u56de\u6765\u3002 \u90a3\u4e48\u4fee\u6539\u5c31\u5316\u4e3a\u4e86\u56db\u6b65\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 int a [ si ][ si ], c [ si ][ si ]; for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= m ; ++ j ){ scanf ( \"%d\" , & a [ i ][ j ]); c [ i ][ j ] = a [ i ][ j ] - a [ i -1 ][ j ] - a [ i ][ j -1 ] + a [ i -1 ][ j -1 ]; } } int x , xx , y , yy , d ; scanf ( \"%d%d%d%d%d\" , & x , & y , & xx , & yy , & d ); c [ x ][ y ] += d , c [ x ][ yy + 1 ] -= d , c [ xx + 1 ][ y ] -= d , c [ xx + 1 ][ yy + 1 ] += d ; for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= m ; ++ j ){ a [ i ][ j ] = a [ i -1 ][ j ] + a [ i ][ j -1 ] - a [ i -1 ][ j -1 ] + c [ i ][ j ]; } } // \u505a\u4e8c\u7ef4\u524d\u7f00\u548c\u8fd8\u539f\u77e9\u9635\u3002 \u53ea\u8981\u6ce8\u610f\u5dee\u5206\u548c\u524d\u7f00\u548c\u7684\u7d27\u5bc6\u5173\u7cfb\uff0c\u73b0\u63a8\u90fd\u662f\u53ef\u4ee5\u7684\u3002","title":"\u4e8c\u7ef4\u5dee\u5206"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E6%8E%92%E5%BA%8F/","text":"\u6392\u5e8f \u00b6 \u4e00\u822c\u90fd\u76f4\u63a5\u7528 sort() \u3002 \u79bb\u6563\u5316 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 vector < int > v ; int main (){ for ( register int i = 1 ; i <= n ; ++ i ){ scanf ( \"%d\" , & a [ i ]); v . push_back ( a [ i ]); } sort ( v . begin (), v . end ()); v . erase ( unique ( v . begin (), v . end ()), v . end ()); for ( register int i = 1 ; i <= n ; ++ i ){ a [ i ] = lower_bound ( v . begin (), v . end (), a [ i ]) - v . begin () + 1 ; } } \u601d\u60f3\u5c31\u662f\u628a\u4e00\u4e9b\u7279\u522b\u5927\u7684\u6570\u6620\u5c04\u5230\u4e00\u4e2a\u6bd4\u8f83\u5c0f\u7684\u8303\u56f4\u4e4b\u5185\u3002 \u9700\u8981\u7684\u8bdd\u53ef\u4ee5\u53e6\u5916\u65b0\u5f00\u4e00\u4e2a\u6570\u7ec4\u5b58\u79bb\u6563\u4e4b\u540e\u7684\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // \u4e8c\u7ef4 vector < int > v ; int main (){ for ( register int i = 1 ; i <= n ; i ++ ){ scanf ( \"%d%d%d\" , & x [ i ], & y [ i ], & e [ i ]); v . push_back ( x [ i ]); v . push_back ( y [ i ]); } sort ( v . begin (), v . end ()); // \u6392\u5e8f v . erase ( unique ( v . begin (), v . end ()), v . end ()); // \u53bb\u91cd for ( register int i = 1 ; i <= n ; i ++ ){ x [ i ] = lower_bound ( v . begin (), v . end (), x [ i ]) - v . begin () + 1 ; y [ i ] = lower_bound ( v . begin (), v . end (), y [ i ]) - v . begin () + 1 ; } // \u53ea\u7528\u4e00\u4e2a vector \u4f1a\u7701\u7a7a\u95f4 } \u5bf9\u9876\u5806 \u00b6 \u7ef4\u62a4\u52a8\u6001\u4e2d\u4f4d\u6570\u95ee\u9898\u3002 \u5047\u8bbe\u6bcf\u4e2a\u65f6\u523b\u5e8f\u5217 \\(a\\) \u7684\u957f\u5ea6 \\(n\\) \u90fd\u662f\u5947\u6570\u3002 \u90a3\u4e48\u8ba9\u6392\u540d\u5728 \\(1 \\to \\lfloor m/2 \\rfloor\\) \u7684\u6254\u5230\u5927\u6839\u5806\uff0c\u5176\u4ed6\u7684\u6254\u5230\u5c0f\u6839\u5806\u3002 \u5982\u679c\u67d0\u4e2a\u5806\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u90a3\u4e48\u628a\u5b83\u7684\u5806\u9876\u6254\u5230\u53e6\u5916\u4e00\u4e2a\u5806\u53bb\u3002 \u7b54\u6848\u5c31\u662f\u5c0f\u6839\u5806\u7684\u5806\u9876\u3002 \u9006\u5e8f\u5bf9 \u00b6 \u53ef\u4ee5\u6811\u72b6\u6570\u7ec4\u3002 \u6b64\u5904\u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\u3002","title":"\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E6%8E%92%E5%BA%8F/#_1","text":"\u4e00\u822c\u90fd\u76f4\u63a5\u7528 sort() \u3002","title":"\u6392\u5e8f"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E6%8E%92%E5%BA%8F/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 vector < int > v ; int main (){ for ( register int i = 1 ; i <= n ; ++ i ){ scanf ( \"%d\" , & a [ i ]); v . push_back ( a [ i ]); } sort ( v . begin (), v . end ()); v . erase ( unique ( v . begin (), v . end ()), v . end ()); for ( register int i = 1 ; i <= n ; ++ i ){ a [ i ] = lower_bound ( v . begin (), v . end (), a [ i ]) - v . begin () + 1 ; } } \u601d\u60f3\u5c31\u662f\u628a\u4e00\u4e9b\u7279\u522b\u5927\u7684\u6570\u6620\u5c04\u5230\u4e00\u4e2a\u6bd4\u8f83\u5c0f\u7684\u8303\u56f4\u4e4b\u5185\u3002 \u9700\u8981\u7684\u8bdd\u53ef\u4ee5\u53e6\u5916\u65b0\u5f00\u4e00\u4e2a\u6570\u7ec4\u5b58\u79bb\u6563\u4e4b\u540e\u7684\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // \u4e8c\u7ef4 vector < int > v ; int main (){ for ( register int i = 1 ; i <= n ; i ++ ){ scanf ( \"%d%d%d\" , & x [ i ], & y [ i ], & e [ i ]); v . push_back ( x [ i ]); v . push_back ( y [ i ]); } sort ( v . begin (), v . end ()); // \u6392\u5e8f v . erase ( unique ( v . begin (), v . end ()), v . end ()); // \u53bb\u91cd for ( register int i = 1 ; i <= n ; i ++ ){ x [ i ] = lower_bound ( v . begin (), v . end (), x [ i ]) - v . begin () + 1 ; y [ i ] = lower_bound ( v . begin (), v . end (), y [ i ]) - v . begin () + 1 ; } // \u53ea\u7528\u4e00\u4e2a vector \u4f1a\u7701\u7a7a\u95f4 }","title":"\u79bb\u6563\u5316"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E6%8E%92%E5%BA%8F/#_3","text":"\u7ef4\u62a4\u52a8\u6001\u4e2d\u4f4d\u6570\u95ee\u9898\u3002 \u5047\u8bbe\u6bcf\u4e2a\u65f6\u523b\u5e8f\u5217 \\(a\\) \u7684\u957f\u5ea6 \\(n\\) \u90fd\u662f\u5947\u6570\u3002 \u90a3\u4e48\u8ba9\u6392\u540d\u5728 \\(1 \\to \\lfloor m/2 \\rfloor\\) \u7684\u6254\u5230\u5927\u6839\u5806\uff0c\u5176\u4ed6\u7684\u6254\u5230\u5c0f\u6839\u5806\u3002 \u5982\u679c\u67d0\u4e2a\u5806\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u90a3\u4e48\u628a\u5b83\u7684\u5806\u9876\u6254\u5230\u53e6\u5916\u4e00\u4e2a\u5806\u53bb\u3002 \u7b54\u6848\u5c31\u662f\u5c0f\u6839\u5806\u7684\u5806\u9876\u3002","title":"\u5bf9\u9876\u5806"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E6%8E%92%E5%BA%8F/#_4","text":"\u53ef\u4ee5\u6811\u72b6\u6570\u7ec4\u3002 \u6b64\u5904\u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\u3002","title":"\u9006\u5e8f\u5bf9"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E8%B4%AA%E5%BF%83/","text":"\u8d2a\u5fc3 \u00b6 \u653e\u4e00\u4e9b\u76f8\u5173\u7684\u601d\u8def\u3002 \u6392\u5e8f\u4e0d\u7b49\u5f0f \u00b6 \u82e5\u6709\u5e8f\u5217 \\(f\\) \uff0c\u6ee1\u8db3 \\(0 \\le f_1 \\le f_2 \\le f_3 \\le \\dots \\le f_n\\) \u3002 \u5e76\u6709\u5b66\u5217 \\(g\\) \uff0c\u6ee1\u8db3 \\(0\\le g_1\\le g_2 \\le g_3 \\le \\dots \\le g_n\\) \u3002 \u8bbe\u4ee3\u4ef7\u51fd\u6570 \\(c(f,g) = \\sum (f_i\\times g_j)\\) \uff0c\u5176\u4e2d \\((i,j)\\) \u8868\u793a\u4e00\u7ec4\u9009\u62e9\u3002 \u5373\u662f\uff0c\u4ece \\(g\\) \u4e2d\u5206\u522b\u7ed9\u6bcf\u4e00\u4e2a \\(f_i\\) \u5206\u914d\u67d0\u4e00\u4e2a \\(g_j\\) \u3002 \u5219\u5f97\u5230\u7684\u6700\u5927\u4ef7\u503c\u5fc5\u7136\u662f\uff1a \\[\\max= f_1g_1 +f_2g_2 + \\dots +f_ng_n\\] \u5f97\u5230\u7684\u6700\u5c0f\u4ef7\u503c\u662f\uff1a \\[\\min = f_1g_n+f_2g_{n-1} + \\dots + f_ng_1\\] \u8bc1\u660e\u53ef\u4ee5\u4f7f\u7528\u201d\u5fae\u6270\u201c\u6cd5\u3002 \u5373\u662f\u8bc1\u660e\u4efb\u4f55\u6270\u52a8\u90fd\u4f1a\u4f7f\u7ed3\u679c\u53d8\u5dee/\u4f18\u3002 \u8bbe \\(f_i < f_j,g_i < g_j,i < j\\) \u3002 \u5219\uff1a \\[(f_ig_i +f_jg_j)-(f_ig_j+f_jg_i)\\] \\[= f_i(g_i-g_j)+f_j(g_j-g_i)\\] \\[=f_i(g_i-g_j)-f_j(g_i-g_j)\\] \\[=(f_i-f_j)(g_i-g_j) > 0\\] \\(\\therefore (f_ig_i +f_jg_j) > (f_ig_j+f_jg_i)\\) \u5f52\u7eb3\u540e\u53ef\u8bc1\u660e\u6392\u5e8f\u4e0d\u7b49\u5f0f\u3002 \u4e00\u822c\u7528\u4e8e\u548c\u201d\u6392\u5e8f\u201c\u76f8\u5173\u7684\u8d2a\u5fc3\u95ee\u9898\u3002","title":"\u8d2a\u5fc3"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E8%B4%AA%E5%BF%83/#_1","text":"\u653e\u4e00\u4e9b\u76f8\u5173\u7684\u601d\u8def\u3002","title":"\u8d2a\u5fc3"},{"location":"%E7%AE%97%E6%B3%95/%E6%9D%82%E9%A1%B9/%E8%B4%AA%E5%BF%83/#_2","text":"\u82e5\u6709\u5e8f\u5217 \\(f\\) \uff0c\u6ee1\u8db3 \\(0 \\le f_1 \\le f_2 \\le f_3 \\le \\dots \\le f_n\\) \u3002 \u5e76\u6709\u5b66\u5217 \\(g\\) \uff0c\u6ee1\u8db3 \\(0\\le g_1\\le g_2 \\le g_3 \\le \\dots \\le g_n\\) \u3002 \u8bbe\u4ee3\u4ef7\u51fd\u6570 \\(c(f,g) = \\sum (f_i\\times g_j)\\) \uff0c\u5176\u4e2d \\((i,j)\\) \u8868\u793a\u4e00\u7ec4\u9009\u62e9\u3002 \u5373\u662f\uff0c\u4ece \\(g\\) \u4e2d\u5206\u522b\u7ed9\u6bcf\u4e00\u4e2a \\(f_i\\) \u5206\u914d\u67d0\u4e00\u4e2a \\(g_j\\) \u3002 \u5219\u5f97\u5230\u7684\u6700\u5927\u4ef7\u503c\u5fc5\u7136\u662f\uff1a \\[\\max= f_1g_1 +f_2g_2 + \\dots +f_ng_n\\] \u5f97\u5230\u7684\u6700\u5c0f\u4ef7\u503c\u662f\uff1a \\[\\min = f_1g_n+f_2g_{n-1} + \\dots + f_ng_1\\] \u8bc1\u660e\u53ef\u4ee5\u4f7f\u7528\u201d\u5fae\u6270\u201c\u6cd5\u3002 \u5373\u662f\u8bc1\u660e\u4efb\u4f55\u6270\u52a8\u90fd\u4f1a\u4f7f\u7ed3\u679c\u53d8\u5dee/\u4f18\u3002 \u8bbe \\(f_i < f_j,g_i < g_j,i < j\\) \u3002 \u5219\uff1a \\[(f_ig_i +f_jg_j)-(f_ig_j+f_jg_i)\\] \\[= f_i(g_i-g_j)+f_j(g_j-g_i)\\] \\[=f_i(g_i-g_j)-f_j(g_i-g_j)\\] \\[=(f_i-f_j)(g_i-g_j) > 0\\] \\(\\therefore (f_ig_i +f_jg_j) > (f_ig_j+f_jg_i)\\) \u5f52\u7eb3\u540e\u53ef\u8bc1\u660e\u6392\u5e8f\u4e0d\u7b49\u5f0f\u3002 \u4e00\u822c\u7528\u4e8e\u548c\u201d\u6392\u5e8f\u201c\u76f8\u5173\u7684\u8d2a\u5fc3\u95ee\u9898\u3002","title":"\u6392\u5e8f\u4e0d\u7b49\u5f0f"},{"location":"%E9%A2%98%E8%A7%A3/Acwing277/","text":"Acwing277 \u997c\u5e72 \u00b6 Description \u00b6 \u5723\u8bde\u8001\u4eba\u5171\u6709 \\(M\\) \u4e2a\u997c\u5e72\uff0c\u51c6\u5907\u5168\u90e8\u5206\u7ed9 \\(N\\) \u4e2a\u5b69\u5b50\u3002 \u6bcf\u4e2a\u5b69\u5b50\u6709\u4e00\u4e2a\u8d2a\u5a6a\u5ea6\uff0c\u7b2c \\(i\\) \u4e2a\u5b69\u5b50\u7684\u8d2a\u5a6a\u5ea6\u4e3a \\(g[i]\\) \u3002 \u5982\u679c\u6709 \\(a[i]\\) \u4e2a\u5b69\u5b50\u62ff\u5230\u7684\u997c\u5e72\u6570\u6bd4\u7b2c \\(i\\) \u4e2a\u5b69\u5b50\u591a\uff0c\u90a3\u4e48\u7b2c \\(i\\) \u4e2a\u5b69\u5b50\u4f1a\u4ea7\u751f \\(g[i] \\times a[i]\\) \u7684\u6028\u6c14\u3002 \u7ed9\u5b9a \\(N\u3001M\\) \u548c\u5e8f\u5217 \\(g\\) \uff0c\u5723\u8bde\u8001\u4eba\u8bf7\u4f60\u5e2e\u4ed6\u5b89\u6392\u4e00\u79cd\u5206\u914d\u65b9\u5f0f\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5b69\u5b50\u81f3\u5c11\u5206\u5230\u4e00\u5757\u997c\u5e72\uff0c\u5e76\u4e14\u6240\u6709\u5b69\u5b50\u7684\u6028\u6c14\u603b\u548c\u6700\u5c0f\u3002 \\(1 \\le N \\le 30\\) \uff0c \\(N \\le M \\le 5000\\) \uff0c \\(1 \\le g_i \\le 10^7\\) \u8981\u6c42\u8f93\u51fa\u65b9\u6848\u3002 Analysis \u00b6 \u53d1\u73b0\u76f4\u63a5\u6c42\u89e3\u7684\u8bdd\u5f88\u4e0d\u597d\u641e\uff0c\u56e0\u4e3a\u6bcf\u53d1\u51fa\u4e00\u5757\u997c\u5e72\u7684\u65f6\u5019\uff0c\u4f60\u90fd\u8981\u626b\u4e00\u904d\u8fdb\u884c\u7edf\u8ba1\uff0c\u800c\u4e14\u968f\u7740\u997c\u5e72\u7684\u53d1\u51fa\uff0c\u6028\u6c14\u503c\u662f\u6709\u53ef\u80fd\u51cf\u5c11\u7684\u3002 \u56e0\u4e3a\uff0c\u5982\u679c\u7ed9\u7b2c \\(i\\) \u4e2a\u5b69\u5b50\u591a\u5206\u914d\u4e86\u4e00\u4e2a\u7cd6\u679c\uff0c\u5728\u4ed6\u524d\u540e\u7684\u5b69\u5b50\u7684\u6028\u6c14\u503c\u90fd\u662f\u4f1a\u53d7\u5230\u5f71\u54cd\u800c\u6539\u53d8\u7684\uff0c\u627e\u4e0d\u5230\u4e00\u4e2a\u53ef\u4ee5\u53ea\u5f71\u54cd \\(i\\) \u524d\u9762\u6216\u8005\u540e\u9762\u7684 \u201d\u9636\u6bb5\u201c\u3002 \u6240\u4ee5\u8003\u8651\u4e00\u4e2a\u6bd4\u8f83\u660e\u663e\u7684\u8d2a\u5fc3\uff0c\u5bf9 \\(g\\) \u964d\u5e8f\u6392\u5e8f\uff0c\u5219\u4ece\u524d\u5f80\u540e\u5206\u914d\u7684\u997c\u5e72\u6570\u91cf\u5fc5\u7136\u5355\u8c03\u4e0d\u4e0a\u5347\u3002 \u8fd9\u4e2a\u8bc1\u660e\u53ef\u4ee5\u5229\u7528\u8d2a\u5fc3\u7b97\u6cd5\u4e2d\u7684\u4e00\u4e2a\u7ecf\u5178\u4e0d\u7b49\u5f0f\uff1a\u6392\u5e8f\u4e0d\u7b49\u5f0f\u3002 \u5177\u4f53\u8bc1\u660e\u8fc7\u7a0b\u7565\u3002 \u6392\u5e8f\u8fc7\u540e\uff0c\u56e0\u4e3a\u4ece\u524d\u5f80\u540e\u5206\u914d\u7684\u997c\u5e72\u6570\u91cf\u5355\u8c03\u4e0d\u4e0a\u5347\uff0c\u90a3\u4e48\u5f53\u524d\u9762\u7684\u5b69\u5b50\u5206\u914d\u7684\u997c\u5e72\u6570\u4e0d\u6539\u53d8\u7684\u65f6\u5019\uff0c \u5982\u679c\u540e\u9762\u7684\u5b69\u5b50\u5206\u914d\u7684\u997c\u5e72\u6570\u91cf\u589e\u52a0\uff0c\u5bf9\u524d\u9762\u7684\u5b69\u5b50\u7684\u6028\u6c14\u503c\u662f\u6ca1\u6709\u5f71\u54cd\u7684\u3002 \u6240\u4ee5\uff0cDP \u7684\u201d\u9636\u6bb5\u201c\u5c31\u6d6e\u73b0\u51fa\u6765\u4e86\uff0c\u5c31\u662f \u201d\u524d \\(i\\) \u4e2a\u5b69\u5b50\u201c \uff08\u6392\u5e8f\u8fc7\u540e\uff09\u3002 \u800c\u9898\u76ee\u4e2d\u8fd8\u6709\u4e00\u4e2a\u8981\u7d20 \\(M\\) \uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u628a\u8fd9\u4e24\u4e2a\u8981\u7d20\u7ed3\u5408\u8d77\u6765\u5f97\u5230\u4e00\u4e2a DP \u72b6\u6001\uff1a \u8bbe \\(dp_{i,j}\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\u5b69\u5b50\uff0c\u603b\u5171\u5206\u914d\u4e86 \\(j\\) \u5757\u997c\u5e72\u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u6028\u6c14\u603b\u548c\u7684 \\(\\min\\) \u3002 \u5982\u679c\u76f4\u63a5\u8003\u8651\u5212\u5206\u5b50\u96c6\u7684\u8bdd\uff0c\u662f\u975e\u5e38\u9ebb\u70e6\uff0c\u4e0d\u4fbf\u4e8e\u8f6c\u79fb\u7684\u3002 \u8bbe \\(b_i\\) \u4e3a\u6392\u5e8f\u540e\u5904\u5728\u4f4d\u7f6e \\(i\\) \u7684\u5b69\u5b50\u5f53\u524d\u62ff\u5230\u7684\u997c\u5e72\u6570\u91cf\uff0c\u8003\u8651\u5982\u4e0b\u7684\u4e24\u79cd\u60c5\u51b5\uff1a \\(b_i = b_{i-1}\\) \uff0c\u90a3\u4e48\u8f6c\u79fb\u7684\u65f6\u5019 \\(a_i = a_{i-1}\\) \uff0c\u9700\u8981\u63d0\u524d\u77e5\u9053 \\(a_{i-1}\\) \u3002 \\(b_i = b_{i-1}\\) \uff0c\u90a3\u4e48\u8f6c\u79fb\u7684\u65f6\u5019 \\(a_i = a_{i-1} +1\\) \uff0c\u8fd8\u662f\u9700\u8981\u63d0\u524d\u77e5\u9053 \\(a_{i-1}\\) \u3002 \u4f46\u662f\u8fd9\u4e2a\u65f6\u5019\u662f\u5728 DP\uff0c\u4f60\u8981\u77e5\u9053 \\(a_{i-1}\\) \uff0c\u5c31\u5fc5\u987b\u8981\u77e5\u9053\u524d\u9762\u6709\u591a\u5c11\u4e2a\u5b69\u5b50\u83b7\u5f97\u7684\u997c\u5e72\u6570\u91cf\u548c \\(i-1\\) \u4e00\u6837\u3002 \u8fd9\u6837\u5c31\u9700\u8981\u8bdd\u989d\u5916\u7684\u65f6\u95f4\u53bb\u679a\u4e3e\u53ef\u80fd\u7684\u60c5\u51b5\uff0c\u5982\u679c\u6309\u7167\u8fd9\u6837\u63a8\u4e0b\u53bb\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5c06\u4f1a\u7206\u70b8\uff0c\u65e0\u6cd5\u63a5\u53d7\u3002 \u5c31\u50cf\u4e0b\u56fe\u6240\u793a\uff0c\u4f60\u4e0d\u77e5\u9053 \\(?\\) \u7684\u8ddd\u79bb\u5230\u5e95\u6709\u591a\u957f\uff0c\u6240\u4ee5\u9700\u8981\u679a\u4e3e\u3002 \u4f46\u662f\u89c2\u5bdf\u4e00\u4e0b\uff0c\u5047\u8bbe \\(b_i > 1\\) \uff0c\u4e5f\u5c31\u662f\u4e0b\u56fe\u6240\u793a\u7684\u5de6\u8fb9\u7684\u60c5\u51b5\u3002 \u5982\u679c\u6211\u4eec\u7ed9\u524d\u9762\u7684 \\(b\\) \u90fd\u51cf\u53bb \\(1\\) \uff0c \u76f8\u5bf9\u5927\u5c0f\u662f\u6ca1\u6709\u53d8\u7684\uff0c\u6028\u6c14\u503c\u4e5f\u662f\u6ca1\u6709\u589e\u52a0 \u7684\u3002 \u6240\u4ee5\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b \\(dp_{i,j} = dp_{i,j - i}\\) \u3002 \u800c\u4f60\u679a\u4e3e\u66f4\u65b0\u7684\u65f6\u5019\u4e0d\u53ef\u80fd\u4ece\u4e00\u4e2a\u5206\u914d\u4e86\u66f4\u591a\u997c\u5e72\u7684\u72b6\u6001\u8f6c\u79fb\u5230\u5206\u914d\u4e86\u66f4\u5c11\u7684\u72b6\u6001\u3002 \u6240\u4ee5 \\(dp_{i,j - 1}\\) \u4e00\u5b9a\u662f \\(dp_{i,j}\\) \u7684\u5b50\u96c6\uff0c\u5c31\u6ca1\u6709\u540e\u6548\u6027\u4e86\uff0c\u53ef\u4ee5\u76f4\u63a5\u8f6c\u79fb\u3002 \u5982\u679c\u662f\u4e0a\u56fe\u53f3\u8fb9\u7684\u60c5\u51b5\uff0c \\(b_i\\) \u7b49\u4e8e \\(1\\) \uff0c\u6211\u4eec\u5c31\u9700\u8981\u77e5\u9053\u524d\u9762\u6709\u591a\u5c11\u4e2a\u5b69\u5b50\u548c \\(b_i\\) \u4e00\u6837\u4e5f\u53ea\u62ff\u5230\u4e86 \\(1\\) \u5757\u3002 \u56e0\u4e3a\u6bcf\u4e2a\u5b69\u5b50\u81f3\u5c11\u8981\u62ff\u5230\u4e00\u5757\uff0c\u6240\u4ee5\u4e0d\u80fd\u518d\u51cf\u4e86\u3002 \u90a3\u4e48\u5c31\u627e\u5230\u4e00\u4e2a\u4f4d\u7f6e \\(k\\) \uff0c\u4f7f\u5f97 \\(b_k >1,b[k + 1 \\sim i] = 1\\) \u3002 \u7136\u540e\u628a \\(b[1\\sim k]\\) \u7684\u90e8\u5206\u8f6c\u5316\u6210\u5de6\u8fb9\u7684\u60c5\u51b5\uff0c \\(b[k+1 \\sim i]\\) \u7684\u90e8\u5206\u5355\u72ec\u8ba1\u7b97\u3002 \u56e0\u4e3a\u4f60\u4e0d\u77e5\u9053\u5177\u4f53 \\(k\\) \u5230\u5e95\u662f\u591a\u5c11\uff0c\u6240\u4ee5\u679a\u4e3e\u6240\u6709\u60c5\u51b5\u53d6\u6700\u5c0f\u503c\u5373\u53ef\uff08\u8fd9\u91cc\u5c31\u662f\u5728\u5212\u5206 \\(dp_{i,j}\\) \uff09\u3002 \u6240\u4ee5\u53ef\u4ee5\u5f97\u5230\u8fd9\u79cd\u60c5\u51b5\u7684\u8f6c\u79fb\u65b9\u7a0b\uff1a \\[dp_{i,j} = \\min\\limits_{0 \\le k < i}\\{dp_{k,j-(i-k)}+k\\times\\sum\\limits_{l = k+1}^{i} g_l\\}\\] \u540e\u9762\u7684 \\(\\sum\\) \u53ef\u4ee5\u76f4\u63a5\u524d\u7f00\u548c\u505a\u3002 \u5f97\u5230\u8fd9\u6837\u7684\u5212\u5206\u65b9\u5f0f\uff08\u7eff\u5b57\u662f\u5bf9\u5e94\u5b50\u96c6\u7684\u610f\u4e49\uff0c\u6a59\u5b57\u662f\u5b50\u96c6\u5bf9\u5e94\u7684\u72b6\u6001\uff09\uff1a \u6240\u4ee5\u53ef\u4ee5\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \\[dp_{i,j} = \\min\\begin{cases}dp_{i,j - i} \\\\ \\min\\{dp_{k,j-(i-k)} + k\\times \\sum\\limits_{l = k + 1}^i g_l\\}\\end{cases}\\] \u521d\u59cb\u5316 \\(dp_{0,0} = 0\\) \uff0c\u5176\u4f59\u4e3a \\(+\\infty\\) \uff0c\u7b54\u6848\u4e3a \\(dp_{n,m}\\) \u3002 \u672c\u9898\u8fd8\u8981\u6c42\u8f93\u51fa\u65b9\u6848\uff0c\u6240\u4ee5\u8003\u8651\u8bb0\u5f55\u4e00\u4e2a pair \u6570\u7ec4 \\(pre_{i,j}\\) \uff0c\u8868\u793a\u4f7f \\(dp_{i,j}\\) \u53d1\u751f\u66f4\u65b0\u7684\u72b6\u6001\u7684 \\(i,j\\) \u5206\u522b\u662f\u4ec0\u4e48\u3002 \u5728 \\(dp_{i,j}\\) \u53d1\u751f\u66f4\u65b0\u7684\u65f6\u5019\u8bb0\u5f55\u5bf9\u5e94\u7684 \\(pre_{i,j}\\) \u5373\u53ef\u3002 \u7136\u540e\u6784\u9020\u65b9\u6848\u7684\u65f6\u5019\u5229\u7528\u9012\u5f52\u6784\u9020\uff0c\u8bbe \\(solve(x,y)\\) \u8868\u793a\u5904\u7406 \\(dp_{x,y}\\) \u5bf9\u7b54\u6848\u9020\u6210\u7684\u5f71\u54cd\u3002 \u90a3\u4e48\u5148\u9012\u5f52\u5904\u7406 \\(solve(pre_{x,y}.first,pre_{x,y}.second)\\) \u3002 \u9012\u5f52\u5230\u8fb9\u754c \\(x = 0\\) \u5c31\u8fd4\u56de\u3002 \u5b9e\u9645\u4e0a\u5c31\u662f\u63a8\u5230\u6700\u524d\u9762\uff08 \\(dp_{1,blabla}\\) \u7684\u72b6\u6001\uff09\uff0c\u7136\u540e\u5f80\u540e\u6839\u636e\u4ece\u54ea\u91cc\u8f6c\u79fb\u8fc7\u6765\u8ba1\u7b97\u7b54\u6848\u3002 \u4e5f\u5c31\u662f\u518d\u6b21\u6a21\u62df\u4e00\u904d\u8f6c\u79fb\u3002 \u5177\u4f53\u5b9e\u73b0\u770b\u4ee3\u7801\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int si = 30 + 10 ; const int sii = 5e3 + 10 ; int n , m ; int dp [ si ][ sii ]; pair < int , int > g [ si ]; pair < int , int > pre [ si ][ sii ]; int sum [ si ], ans [ si ]; void solve ( int x , int y ) { if ( ! x ) return ; // \u5230\u8fbe\u8fb9\u754c auto [ px , py ] = pre [ x ][ y ]; solve ( px , py ); // \u5148\u9012\u5f52\u5904\u7406 pre[x][y] if ( px == x ) for ( int i = 1 ; i <= x ; ++ i ) ans [ g [ i ]. second ] += 1 ; // from dp[x][y - x]; // \u6b64\u65f6\u7ed9 1 ~ x \u6240\u6709\u6570\u90fd\u52a0\u4e0a 1, \u56e0\u4e3a\u8f6c\u79fb\u7684\u65f6\u5019\u5b83\u4eec\u90fd\u51cf\u53bb\u4e86 1\u3002 else for ( int i = px + 1 ; i <= x ; ++ i ) ans [ g [ i ]. second ] = 1 ; // from dp[px][y - (x - px)]; // \u6b64\u65f6\u628a\u72b6\u6001\u5bf9\u5e94\u7684 k + 1 ~ i \u7684\u90e8\u5206\u8bbe\u7f6e\u4e3a 1\u3002 } int main () { cin >> n >> m ; for ( int i = 1 ; i <= n ; ++ i ) { cin >> g [ i ]. first ; g [ i ]. second = i ; } sort ( g + 1 , g + 1 + n ); reverse ( g + 1 , g + 1 + n ); sum [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) sum [ i ] = sum [ i - 1 ] + g [ i ]. first ; memset ( ans , 0 , sizeof ans ); memset ( dp , 0x3f , sizeof dp ); dp [ 0 ][ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = i ; j <= m ; ++ j ) { // \u6ce8\u610f j \u662f\u4ece i \u5f00\u59cb\u679a\u4e3e\u7684\uff0c\u4e5f\u5c31\u662f\u5148\u4fdd\u8bc1 1 ~ i \u7684\u6bcf\u4e2a\u5b69\u5b50\u81f3\u5c11\u90fd\u6709\u4e00\u5757\u3002 dp [ i ][ j ] = dp [ i ][ j - i ], pre [ i ][ j ] = { i , j - i }; for ( int k = 0 ; k < i ; ++ k ) { int trans = dp [ k ][ j - ( i - k )] + k * ( sum [ i ] - sum [ k ]); if ( dp [ i ][ j ] > trans ) { dp [ i ][ j ] = trans ; pre [ i ][ j ] = { k , j - ( i - k )}; } } // \u4f60\u521d\u59cb\u5316\u53ea\u521d\u59cb\u5316\u4e86 dp[0][0]\uff0c\u90a3\u4e48\u8981\u8f6c\u79fb\u4e0b\u53bb\u5fc5\u7136\u8981\u5229\u7528\u5230\u5b83\u3002 // i = j, k = 0 \u7684\u65f6\u5019\u5c31\u4f1a\u5229\u7528\u5230\u3002 // \u6240\u4ee5\u4e0d\u8981\u5fd8\u8bb0 k \u53ef\u4ee5\u7b49\u4e8e 0\u3002 } } cout << dp [ n ][ m ] << endl ; solve ( n , m ); for ( int i = 1 ; i <= n ; ++ i ) cout << ans [ i ] << \" \" ; return 0 ; } \uff0c \u590d\u6742\u5ea6 \\(\\text{O}(n^2\\times m)\\) \u3002 1 Tag : \u7ebf\u6027DP / \u6784\u9020\u65b9\u6848 / \u601d\u7ef4 / \u6392\u5e8f\u4e0d\u7b49\u5f0f","title":"Acwing277"},{"location":"%E9%A2%98%E8%A7%A3/Acwing277/#acwing277","text":"","title":"Acwing277 \u997c\u5e72"},{"location":"%E9%A2%98%E8%A7%A3/Acwing277/#description","text":"\u5723\u8bde\u8001\u4eba\u5171\u6709 \\(M\\) \u4e2a\u997c\u5e72\uff0c\u51c6\u5907\u5168\u90e8\u5206\u7ed9 \\(N\\) \u4e2a\u5b69\u5b50\u3002 \u6bcf\u4e2a\u5b69\u5b50\u6709\u4e00\u4e2a\u8d2a\u5a6a\u5ea6\uff0c\u7b2c \\(i\\) \u4e2a\u5b69\u5b50\u7684\u8d2a\u5a6a\u5ea6\u4e3a \\(g[i]\\) \u3002 \u5982\u679c\u6709 \\(a[i]\\) \u4e2a\u5b69\u5b50\u62ff\u5230\u7684\u997c\u5e72\u6570\u6bd4\u7b2c \\(i\\) \u4e2a\u5b69\u5b50\u591a\uff0c\u90a3\u4e48\u7b2c \\(i\\) \u4e2a\u5b69\u5b50\u4f1a\u4ea7\u751f \\(g[i] \\times a[i]\\) \u7684\u6028\u6c14\u3002 \u7ed9\u5b9a \\(N\u3001M\\) \u548c\u5e8f\u5217 \\(g\\) \uff0c\u5723\u8bde\u8001\u4eba\u8bf7\u4f60\u5e2e\u4ed6\u5b89\u6392\u4e00\u79cd\u5206\u914d\u65b9\u5f0f\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5b69\u5b50\u81f3\u5c11\u5206\u5230\u4e00\u5757\u997c\u5e72\uff0c\u5e76\u4e14\u6240\u6709\u5b69\u5b50\u7684\u6028\u6c14\u603b\u548c\u6700\u5c0f\u3002 \\(1 \\le N \\le 30\\) \uff0c \\(N \\le M \\le 5000\\) \uff0c \\(1 \\le g_i \\le 10^7\\) \u8981\u6c42\u8f93\u51fa\u65b9\u6848\u3002","title":"Description"},{"location":"%E9%A2%98%E8%A7%A3/Acwing277/#analysis","text":"\u53d1\u73b0\u76f4\u63a5\u6c42\u89e3\u7684\u8bdd\u5f88\u4e0d\u597d\u641e\uff0c\u56e0\u4e3a\u6bcf\u53d1\u51fa\u4e00\u5757\u997c\u5e72\u7684\u65f6\u5019\uff0c\u4f60\u90fd\u8981\u626b\u4e00\u904d\u8fdb\u884c\u7edf\u8ba1\uff0c\u800c\u4e14\u968f\u7740\u997c\u5e72\u7684\u53d1\u51fa\uff0c\u6028\u6c14\u503c\u662f\u6709\u53ef\u80fd\u51cf\u5c11\u7684\u3002 \u56e0\u4e3a\uff0c\u5982\u679c\u7ed9\u7b2c \\(i\\) \u4e2a\u5b69\u5b50\u591a\u5206\u914d\u4e86\u4e00\u4e2a\u7cd6\u679c\uff0c\u5728\u4ed6\u524d\u540e\u7684\u5b69\u5b50\u7684\u6028\u6c14\u503c\u90fd\u662f\u4f1a\u53d7\u5230\u5f71\u54cd\u800c\u6539\u53d8\u7684\uff0c\u627e\u4e0d\u5230\u4e00\u4e2a\u53ef\u4ee5\u53ea\u5f71\u54cd \\(i\\) \u524d\u9762\u6216\u8005\u540e\u9762\u7684 \u201d\u9636\u6bb5\u201c\u3002 \u6240\u4ee5\u8003\u8651\u4e00\u4e2a\u6bd4\u8f83\u660e\u663e\u7684\u8d2a\u5fc3\uff0c\u5bf9 \\(g\\) \u964d\u5e8f\u6392\u5e8f\uff0c\u5219\u4ece\u524d\u5f80\u540e\u5206\u914d\u7684\u997c\u5e72\u6570\u91cf\u5fc5\u7136\u5355\u8c03\u4e0d\u4e0a\u5347\u3002 \u8fd9\u4e2a\u8bc1\u660e\u53ef\u4ee5\u5229\u7528\u8d2a\u5fc3\u7b97\u6cd5\u4e2d\u7684\u4e00\u4e2a\u7ecf\u5178\u4e0d\u7b49\u5f0f\uff1a\u6392\u5e8f\u4e0d\u7b49\u5f0f\u3002 \u5177\u4f53\u8bc1\u660e\u8fc7\u7a0b\u7565\u3002 \u6392\u5e8f\u8fc7\u540e\uff0c\u56e0\u4e3a\u4ece\u524d\u5f80\u540e\u5206\u914d\u7684\u997c\u5e72\u6570\u91cf\u5355\u8c03\u4e0d\u4e0a\u5347\uff0c\u90a3\u4e48\u5f53\u524d\u9762\u7684\u5b69\u5b50\u5206\u914d\u7684\u997c\u5e72\u6570\u4e0d\u6539\u53d8\u7684\u65f6\u5019\uff0c \u5982\u679c\u540e\u9762\u7684\u5b69\u5b50\u5206\u914d\u7684\u997c\u5e72\u6570\u91cf\u589e\u52a0\uff0c\u5bf9\u524d\u9762\u7684\u5b69\u5b50\u7684\u6028\u6c14\u503c\u662f\u6ca1\u6709\u5f71\u54cd\u7684\u3002 \u6240\u4ee5\uff0cDP \u7684\u201d\u9636\u6bb5\u201c\u5c31\u6d6e\u73b0\u51fa\u6765\u4e86\uff0c\u5c31\u662f \u201d\u524d \\(i\\) \u4e2a\u5b69\u5b50\u201c \uff08\u6392\u5e8f\u8fc7\u540e\uff09\u3002 \u800c\u9898\u76ee\u4e2d\u8fd8\u6709\u4e00\u4e2a\u8981\u7d20 \\(M\\) \uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u628a\u8fd9\u4e24\u4e2a\u8981\u7d20\u7ed3\u5408\u8d77\u6765\u5f97\u5230\u4e00\u4e2a DP \u72b6\u6001\uff1a \u8bbe \\(dp_{i,j}\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\u5b69\u5b50\uff0c\u603b\u5171\u5206\u914d\u4e86 \\(j\\) \u5757\u997c\u5e72\u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u6028\u6c14\u603b\u548c\u7684 \\(\\min\\) \u3002 \u5982\u679c\u76f4\u63a5\u8003\u8651\u5212\u5206\u5b50\u96c6\u7684\u8bdd\uff0c\u662f\u975e\u5e38\u9ebb\u70e6\uff0c\u4e0d\u4fbf\u4e8e\u8f6c\u79fb\u7684\u3002 \u8bbe \\(b_i\\) \u4e3a\u6392\u5e8f\u540e\u5904\u5728\u4f4d\u7f6e \\(i\\) \u7684\u5b69\u5b50\u5f53\u524d\u62ff\u5230\u7684\u997c\u5e72\u6570\u91cf\uff0c\u8003\u8651\u5982\u4e0b\u7684\u4e24\u79cd\u60c5\u51b5\uff1a \\(b_i = b_{i-1}\\) \uff0c\u90a3\u4e48\u8f6c\u79fb\u7684\u65f6\u5019 \\(a_i = a_{i-1}\\) \uff0c\u9700\u8981\u63d0\u524d\u77e5\u9053 \\(a_{i-1}\\) \u3002 \\(b_i = b_{i-1}\\) \uff0c\u90a3\u4e48\u8f6c\u79fb\u7684\u65f6\u5019 \\(a_i = a_{i-1} +1\\) \uff0c\u8fd8\u662f\u9700\u8981\u63d0\u524d\u77e5\u9053 \\(a_{i-1}\\) \u3002 \u4f46\u662f\u8fd9\u4e2a\u65f6\u5019\u662f\u5728 DP\uff0c\u4f60\u8981\u77e5\u9053 \\(a_{i-1}\\) \uff0c\u5c31\u5fc5\u987b\u8981\u77e5\u9053\u524d\u9762\u6709\u591a\u5c11\u4e2a\u5b69\u5b50\u83b7\u5f97\u7684\u997c\u5e72\u6570\u91cf\u548c \\(i-1\\) \u4e00\u6837\u3002 \u8fd9\u6837\u5c31\u9700\u8981\u8bdd\u989d\u5916\u7684\u65f6\u95f4\u53bb\u679a\u4e3e\u53ef\u80fd\u7684\u60c5\u51b5\uff0c\u5982\u679c\u6309\u7167\u8fd9\u6837\u63a8\u4e0b\u53bb\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5c06\u4f1a\u7206\u70b8\uff0c\u65e0\u6cd5\u63a5\u53d7\u3002 \u5c31\u50cf\u4e0b\u56fe\u6240\u793a\uff0c\u4f60\u4e0d\u77e5\u9053 \\(?\\) \u7684\u8ddd\u79bb\u5230\u5e95\u6709\u591a\u957f\uff0c\u6240\u4ee5\u9700\u8981\u679a\u4e3e\u3002 \u4f46\u662f\u89c2\u5bdf\u4e00\u4e0b\uff0c\u5047\u8bbe \\(b_i > 1\\) \uff0c\u4e5f\u5c31\u662f\u4e0b\u56fe\u6240\u793a\u7684\u5de6\u8fb9\u7684\u60c5\u51b5\u3002 \u5982\u679c\u6211\u4eec\u7ed9\u524d\u9762\u7684 \\(b\\) \u90fd\u51cf\u53bb \\(1\\) \uff0c \u76f8\u5bf9\u5927\u5c0f\u662f\u6ca1\u6709\u53d8\u7684\uff0c\u6028\u6c14\u503c\u4e5f\u662f\u6ca1\u6709\u589e\u52a0 \u7684\u3002 \u6240\u4ee5\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b \\(dp_{i,j} = dp_{i,j - i}\\) \u3002 \u800c\u4f60\u679a\u4e3e\u66f4\u65b0\u7684\u65f6\u5019\u4e0d\u53ef\u80fd\u4ece\u4e00\u4e2a\u5206\u914d\u4e86\u66f4\u591a\u997c\u5e72\u7684\u72b6\u6001\u8f6c\u79fb\u5230\u5206\u914d\u4e86\u66f4\u5c11\u7684\u72b6\u6001\u3002 \u6240\u4ee5 \\(dp_{i,j - 1}\\) \u4e00\u5b9a\u662f \\(dp_{i,j}\\) \u7684\u5b50\u96c6\uff0c\u5c31\u6ca1\u6709\u540e\u6548\u6027\u4e86\uff0c\u53ef\u4ee5\u76f4\u63a5\u8f6c\u79fb\u3002 \u5982\u679c\u662f\u4e0a\u56fe\u53f3\u8fb9\u7684\u60c5\u51b5\uff0c \\(b_i\\) \u7b49\u4e8e \\(1\\) \uff0c\u6211\u4eec\u5c31\u9700\u8981\u77e5\u9053\u524d\u9762\u6709\u591a\u5c11\u4e2a\u5b69\u5b50\u548c \\(b_i\\) \u4e00\u6837\u4e5f\u53ea\u62ff\u5230\u4e86 \\(1\\) \u5757\u3002 \u56e0\u4e3a\u6bcf\u4e2a\u5b69\u5b50\u81f3\u5c11\u8981\u62ff\u5230\u4e00\u5757\uff0c\u6240\u4ee5\u4e0d\u80fd\u518d\u51cf\u4e86\u3002 \u90a3\u4e48\u5c31\u627e\u5230\u4e00\u4e2a\u4f4d\u7f6e \\(k\\) \uff0c\u4f7f\u5f97 \\(b_k >1,b[k + 1 \\sim i] = 1\\) \u3002 \u7136\u540e\u628a \\(b[1\\sim k]\\) \u7684\u90e8\u5206\u8f6c\u5316\u6210\u5de6\u8fb9\u7684\u60c5\u51b5\uff0c \\(b[k+1 \\sim i]\\) \u7684\u90e8\u5206\u5355\u72ec\u8ba1\u7b97\u3002 \u56e0\u4e3a\u4f60\u4e0d\u77e5\u9053\u5177\u4f53 \\(k\\) \u5230\u5e95\u662f\u591a\u5c11\uff0c\u6240\u4ee5\u679a\u4e3e\u6240\u6709\u60c5\u51b5\u53d6\u6700\u5c0f\u503c\u5373\u53ef\uff08\u8fd9\u91cc\u5c31\u662f\u5728\u5212\u5206 \\(dp_{i,j}\\) \uff09\u3002 \u6240\u4ee5\u53ef\u4ee5\u5f97\u5230\u8fd9\u79cd\u60c5\u51b5\u7684\u8f6c\u79fb\u65b9\u7a0b\uff1a \\[dp_{i,j} = \\min\\limits_{0 \\le k < i}\\{dp_{k,j-(i-k)}+k\\times\\sum\\limits_{l = k+1}^{i} g_l\\}\\] \u540e\u9762\u7684 \\(\\sum\\) \u53ef\u4ee5\u76f4\u63a5\u524d\u7f00\u548c\u505a\u3002 \u5f97\u5230\u8fd9\u6837\u7684\u5212\u5206\u65b9\u5f0f\uff08\u7eff\u5b57\u662f\u5bf9\u5e94\u5b50\u96c6\u7684\u610f\u4e49\uff0c\u6a59\u5b57\u662f\u5b50\u96c6\u5bf9\u5e94\u7684\u72b6\u6001\uff09\uff1a \u6240\u4ee5\u53ef\u4ee5\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \\[dp_{i,j} = \\min\\begin{cases}dp_{i,j - i} \\\\ \\min\\{dp_{k,j-(i-k)} + k\\times \\sum\\limits_{l = k + 1}^i g_l\\}\\end{cases}\\] \u521d\u59cb\u5316 \\(dp_{0,0} = 0\\) \uff0c\u5176\u4f59\u4e3a \\(+\\infty\\) \uff0c\u7b54\u6848\u4e3a \\(dp_{n,m}\\) \u3002 \u672c\u9898\u8fd8\u8981\u6c42\u8f93\u51fa\u65b9\u6848\uff0c\u6240\u4ee5\u8003\u8651\u8bb0\u5f55\u4e00\u4e2a pair \u6570\u7ec4 \\(pre_{i,j}\\) \uff0c\u8868\u793a\u4f7f \\(dp_{i,j}\\) \u53d1\u751f\u66f4\u65b0\u7684\u72b6\u6001\u7684 \\(i,j\\) \u5206\u522b\u662f\u4ec0\u4e48\u3002 \u5728 \\(dp_{i,j}\\) \u53d1\u751f\u66f4\u65b0\u7684\u65f6\u5019\u8bb0\u5f55\u5bf9\u5e94\u7684 \\(pre_{i,j}\\) \u5373\u53ef\u3002 \u7136\u540e\u6784\u9020\u65b9\u6848\u7684\u65f6\u5019\u5229\u7528\u9012\u5f52\u6784\u9020\uff0c\u8bbe \\(solve(x,y)\\) \u8868\u793a\u5904\u7406 \\(dp_{x,y}\\) \u5bf9\u7b54\u6848\u9020\u6210\u7684\u5f71\u54cd\u3002 \u90a3\u4e48\u5148\u9012\u5f52\u5904\u7406 \\(solve(pre_{x,y}.first,pre_{x,y}.second)\\) \u3002 \u9012\u5f52\u5230\u8fb9\u754c \\(x = 0\\) \u5c31\u8fd4\u56de\u3002 \u5b9e\u9645\u4e0a\u5c31\u662f\u63a8\u5230\u6700\u524d\u9762\uff08 \\(dp_{1,blabla}\\) \u7684\u72b6\u6001\uff09\uff0c\u7136\u540e\u5f80\u540e\u6839\u636e\u4ece\u54ea\u91cc\u8f6c\u79fb\u8fc7\u6765\u8ba1\u7b97\u7b54\u6848\u3002 \u4e5f\u5c31\u662f\u518d\u6b21\u6a21\u62df\u4e00\u904d\u8f6c\u79fb\u3002 \u5177\u4f53\u5b9e\u73b0\u770b\u4ee3\u7801\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int si = 30 + 10 ; const int sii = 5e3 + 10 ; int n , m ; int dp [ si ][ sii ]; pair < int , int > g [ si ]; pair < int , int > pre [ si ][ sii ]; int sum [ si ], ans [ si ]; void solve ( int x , int y ) { if ( ! x ) return ; // \u5230\u8fbe\u8fb9\u754c auto [ px , py ] = pre [ x ][ y ]; solve ( px , py ); // \u5148\u9012\u5f52\u5904\u7406 pre[x][y] if ( px == x ) for ( int i = 1 ; i <= x ; ++ i ) ans [ g [ i ]. second ] += 1 ; // from dp[x][y - x]; // \u6b64\u65f6\u7ed9 1 ~ x \u6240\u6709\u6570\u90fd\u52a0\u4e0a 1, \u56e0\u4e3a\u8f6c\u79fb\u7684\u65f6\u5019\u5b83\u4eec\u90fd\u51cf\u53bb\u4e86 1\u3002 else for ( int i = px + 1 ; i <= x ; ++ i ) ans [ g [ i ]. second ] = 1 ; // from dp[px][y - (x - px)]; // \u6b64\u65f6\u628a\u72b6\u6001\u5bf9\u5e94\u7684 k + 1 ~ i \u7684\u90e8\u5206\u8bbe\u7f6e\u4e3a 1\u3002 } int main () { cin >> n >> m ; for ( int i = 1 ; i <= n ; ++ i ) { cin >> g [ i ]. first ; g [ i ]. second = i ; } sort ( g + 1 , g + 1 + n ); reverse ( g + 1 , g + 1 + n ); sum [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) sum [ i ] = sum [ i - 1 ] + g [ i ]. first ; memset ( ans , 0 , sizeof ans ); memset ( dp , 0x3f , sizeof dp ); dp [ 0 ][ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = i ; j <= m ; ++ j ) { // \u6ce8\u610f j \u662f\u4ece i \u5f00\u59cb\u679a\u4e3e\u7684\uff0c\u4e5f\u5c31\u662f\u5148\u4fdd\u8bc1 1 ~ i \u7684\u6bcf\u4e2a\u5b69\u5b50\u81f3\u5c11\u90fd\u6709\u4e00\u5757\u3002 dp [ i ][ j ] = dp [ i ][ j - i ], pre [ i ][ j ] = { i , j - i }; for ( int k = 0 ; k < i ; ++ k ) { int trans = dp [ k ][ j - ( i - k )] + k * ( sum [ i ] - sum [ k ]); if ( dp [ i ][ j ] > trans ) { dp [ i ][ j ] = trans ; pre [ i ][ j ] = { k , j - ( i - k )}; } } // \u4f60\u521d\u59cb\u5316\u53ea\u521d\u59cb\u5316\u4e86 dp[0][0]\uff0c\u90a3\u4e48\u8981\u8f6c\u79fb\u4e0b\u53bb\u5fc5\u7136\u8981\u5229\u7528\u5230\u5b83\u3002 // i = j, k = 0 \u7684\u65f6\u5019\u5c31\u4f1a\u5229\u7528\u5230\u3002 // \u6240\u4ee5\u4e0d\u8981\u5fd8\u8bb0 k \u53ef\u4ee5\u7b49\u4e8e 0\u3002 } } cout << dp [ n ][ m ] << endl ; solve ( n , m ); for ( int i = 1 ; i <= n ; ++ i ) cout << ans [ i ] << \" \" ; return 0 ; } \uff0c \u590d\u6742\u5ea6 \\(\\text{O}(n^2\\times m)\\) \u3002 1 Tag : \u7ebf\u6027DP / \u6784\u9020\u65b9\u6848 / \u601d\u7ef4 / \u6392\u5e8f\u4e0d\u7b49\u5f0f","title":"Analysis"},{"location":"%E9%A2%98%E8%A7%A3/Acwing355/","text":"Acwing355 \u5f02\u8c61\u77f3 \u00b6 \u8865\u5145\u7ed3\u8bba\u7684\u4e24\u79cd\u8bc1\u660e\u3002 \\(\\text{Question}\\) \u00b6 \u52a8\u6001\u7ef4\u62a4\u6811\u4e0a\u4f7f\u5f97\u88ab\u9009\u4e2d\u70b9\u8054\u901a\u7684\u8fb9\u96c6\u957f\u5ea6\u4e4b\u548c\u7684\u6700\u5c0f\u503c\uff0c\u652f\u6301\u9009\u4e2d\uff0c\u53d6\u6d88\u9009\u4e2d\u67d0\u4e2a\u8282\u70b9\u3002 1e5. \\(\\text{Lemma}\\) \u00b6 \u5c06\u6240\u6709\u88ab\u9009\u4e2d\u7684\u8282\u70b9\u6309\u7167\u65f6\u95f4\u6233\u6392\u5e8f\u6210\u4e00\u5708\uff0c\u7b54\u6848\u5c31\u662f\u76f8\u90bb\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u957f\u5ea6\u503c\u548c\u7684\u4e8c\u5206\u4e4b\u4e00\u3002 \\(\\text{Proof1}\\) \u00b6 \u5206\u7c7b\u8ba8\u8bba\u8bc1\u6cd5\u3002 \u9996\u5148\u6709\u4e00\u4e2a\u7ed3\u8bba\uff0c\u4e00\u4e2a\u5b50\u6811\u5f53\u4e2d\u7684\u6240\u6709\u8282\u70b9\u7684\u65f6\u95f4\u6233\uff08 dfs \u5e8f\uff09\u5fc5\u7136\u662f\u8fde\u7eed\u7684\u4e00\u6bb5\uff0c\u53cd\u8fc7\u6765\u4e5f\u4e00\u6837\u3002 \u8003\u8651\u6700\u7b80\u5355\u7684\u4e00\u79cd\u60c5\u51b5\uff1a\u88ab\u9009\u4e2d\u7684\u53ea\u6709\u4e09\u4e2a\u8282\u70b9 \\(a,b,c\\) \uff08\u5df2\u7ecf\u6392\u597d\u5e8f\uff09 \u5148\u8d70\u4e00\u904d \\(\\delta(a,b)\\) \uff08\u5bf9\u5e94\u5230\u4ee3\u7801\u91cc\u5c31\u662f\u7ed9\u7b54\u6848\u7d2f\u52a0 \\(\\delta(a,b)\\) \u7684\u957f\u5ea6\uff09\uff0c\u6b64\u65f6 \\(\\delta(a,b)\\) \u88ab\u8986\u76d6\u4e86\u4e00\u6b21\uff0c\u5c06 \\(\\delta(a,b)\\) \u7684\u957f\u5ea6\u7d2f\u52a0\u5230\u7b54\u6848\u5f53\u4e2d\u3002 \u6b64\u65f6\u8d70 \\(\\delta(b,c)\\) \uff0c\u6709\u4e24\u79cd\u60c5\u51b5\uff1a \\(\\delta(b,c)\\) \u4e0d\u7ecf\u8fc7 \\(a\\) \uff0c\u8fd9\u65f6\u53ea\u80fd\u6709\u4e24\u79cd\u60c5\u51b5\uff08\u5176\u5b83\u7684\u53ef\u4ee5\u5f52\u5316\u5230\u8fd9\u4e24\u79cd\uff09 \u56fe\u4e2d\u60c5\u51b5 \\(A\\) \uff0c\u6b64\u65f6 \\(\\delta(a,\\text{LCA}(b,c))\\) \u88ab\u8986\u76d6\u4e00\u6b21\uff0c \\(\\delta(b,\\text{LCA}(b,c))\\) \u88ab\u8986\u76d6\u4e24\u6b21 \uff08\u5982\u679c \\(\\text{LCA}(b,c)=b\\) \u5c31\u53ea\u7b97\u4e00\u6b21\uff0c\u4e4b\u540e\u7684\u540c\u7406\uff09\uff0c \\(\\delta(\\text{LCA}(b,c),c)\\) \u88ab\u8986\u76d6\u4e00\u6b21\u3002 \u56fe\u4e2d\u60c5\u51b5 \\(B\\) \uff0c\u6b64\u65f6 \\(\\delta(a,\\text{LCA}(a,b))\\) \u88ab\u8986\u76d6\u4e00\u6b21\uff0c \\(\\delta(b,\\text{LCA}(a,b))\\) \u88ab\u8986\u76d6\u4e24\u6b21\uff0c \\(\\delta(\\text{LCA}(a,b),c)\\) \u88ab\u8986\u76d6\u4e00\u6b21\u3002 \\(\\delta(b,c)\\) \u7ecf\u8fc7 \\(a\\) \uff0c\u8fd9\u65f6\u53ea\u80fd\u6709\u4e00\u79cd\u60c5\u51b5\uff08\u5176\u5b83\u7684\u4ecd\u7136\u53ef\u4ee5\u5f52\u5316\uff09 \u56fe\u4e2d\u60c5\u51b5 \\(C\\) \uff0c\u6b64\u65f6 \\(\\delta(a,b)\\) \u88ab\u8986\u76d6\u4e24\u6b21\uff0c \\(\\delta(a,c)\\) \u88ab\u8986\u76d6\u4e00\u6b21\u3002 \u6700\u540e\u8d70\u4e00\u904d \\(\\delta(a,c)\\) \u5bf9\u4e8e\u4e0a\u9762\u7684 1.1 \uff1a \\(\\delta(a,\\text{LCA}(b,c))\\) \u4ece\u88ab\u8986\u76d6\u4e00\u6b21\u5230\u4e24\u6b21\uff0c \\(\\delta(\\text{LCA}(b,c),c)\\) \u4ece\u4e00\u6b21\u5230\u4e24\u6b21\uff0c \\(\\delta(b,\\text{LCA}(b,c))\\) \u4ecd\u65e7\u662f\u4e24\u6b21\u3002 \u5bf9\u4e8e\u4e0a\u9762\u7684 1.2 \uff1a \\(\\delta(a,\\text{LCA}(a,b))\\) \u4ece\u88ab\u8986\u76d6\u4e00\u6b21\u5230\u4e24\u6b21\uff0c \\(\\delta(b,\\text{LCA}(a,b))\\) \u4ecd\u65e7\u662f\u4e24\u6b21\uff0c \\(\\delta(\\text{LCA}(a,b),c)\\) \u4ece\u4e00\u6b21\u5230\u4e24\u6b21\u3002 \u5bf9\u4e8e\u4e0a\u9762\u7684 2.1 \uff1a \\(\\delta(a,b)\\) \u4ecd\u65e7\u662f\u4e24\u6b21\uff0c \\(\\delta(a,c)\\) \u4ece\u4e00\u6b21\u5230\u4e24\u6b21\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u5728\u53ea\u6709\u4e09\u4e2a\u88ab\u9009\u4e2d\u70b9\u7684\u65f6\u5019\uff0c \\(\\text{Lemma}\\) \u4e00\u5b9a\u6210\u7acb\u3002 \u6839\u636e\u6570\u5b66\u5f52\u7eb3\u6cd5\u53ef\u4ee5\u5f97\u5230\u4efb\u610f\u591a\u4e2a\u88ab\u9009\u4e2d\u70b9\u7684\u60c5\u51b5\uff0c \\(\\text{Lemma}\\) \u5f97\u8bc1\u3002 \\(\\text{Proof2}\\) \u00b6 \u56e0\u4e3a dfn \u8fde\u7eed\u7684\u4e00\u6bb5\u5fc5\u7136\u5728\u540c\u4e00\u4e2a\u5b50\u6811\u5f53\u4e2d\u3002 \u8003\u8651 \\(\\text{Lemma}\\) \u7684\u8fc7\u7a0b\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u5728\u4e0d\u65ad\u7684\u8bbf\u95ee\u67d0\u4e2a\u5b50\u6811\uff0c\u5904\u7406\u5b8c\u8fd9\u4e2a\u5b50\u6811\u5f53\u4e2d\u4f1a\u88ab\u7edf\u8ba1\u7684\u8fb9\uff0c\u7136\u540e\u9000\u51fa\u8fd9\u4e2a\u5b50\u6811\u3002 \u90a3\u5c31\u76f4\u63a5\u770b\u8fd9\u4e2a\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u8fc7\u7a0b\u672c\u8eab\uff0c\u5047\u8bbe\u4f60\u8fdb\u5165\u5230\u4e86\u4e00\u4e2a\u4ee5 \\(fa\\) \u4e3a\u6839\u7684\u5b50\u6811\uff0c\u5f53\u524d\u8d70\u5230\u4e86\u4e00\u4e2a\u6709\u5f02\u8c61\u77f3\u7684\u8282\u70b9 \\(u\\) \u3002 \u90a3\u4e48\u4f60\u8fdb\u5165\u8fd9\u4e2a\u5b50\u6811\u7684\u65f6\u5019\uff08\u4e5f\u5c31\u662f\u5904\u7406\u524d\u9762\u7684\u7b54\u6848\u7684\u65f6\u5019\uff09\uff0c \\(fa \\to u\\) \u5b9e\u9645\u4e0a\u5df2\u7ecf\u88ab\u7b97\u8fc7\u4e00\u6b21\u4e86\uff0c\u5f53\u4f60\u7ed9 \\(u\\) \u8fdb\u884c\u7edf\u8ba1\uff08\u4e5f\u5c31\u662f\u8981\u9000\u51fa\u5b50\u6811\u7684\u65f6\u5019\uff09\uff0c \\(fa \\to u\\) \u5c31\u4f1a\u88ab\u518d\u7b97\u4e00\u6b21\uff0c\u5e76\u4e14\u4e4b\u540e\u4e0d\u4f1a\u56de\u6765\u518d\u6b21\u8ba1\u7b97\u3002 \u63a8\u5e7f\u8fc7\u540e\u5f97\u5230\uff1a\u4e00\u6761\u8fde\u63a5\u4e24\u4e2a\u6709\u5f02\u8c61\u77f3\u7684\u8282\u70b9\u7684\u8def\u5f84\u5fc5\u7136\u4f1a\u88ab\u8ba1\u7b97\u4e24\u6b21\u3002 \u53ef\u4ee5\u77e5\u9053 \\(\\text{Lemma}\\) \u662f\u6b63\u786e\u7684\u3002 \\(\\text{Code}\\) \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 #include <set> #include <cstring> #include <iostream> using namespace std ; using i128 = __int128 ; inline void write ( i128 x ){ if ( x < 0 ) putchar ( '-' ), x =- x ; if ( x > 9 ) write ( x / 10 ); putchar ( x % 10 + 48 ); } constexpr int si = 1e5 + 10 ; constexpr int inf = 0x3f3f3f3f ; int n , m , tot = 0 , tim = 0 ; int head [ si ]; struct Edge { int ver , Next , w ; } e [ si << 1 ]; inline void add ( int u , int v , int w ){ e [ tot ] = ( Edge ){ v , head [ u ], w }, head [ u ] = tot ++ ; } int dep [ si ], f [ si ][ 20 ], dfn [ si ]; i128 dis [ si ]; inline void dfs ( int u , int fa ){ dep [ u ] = dep [ fa ] + 1 , f [ u ][ 0 ] = fa , dfn [ u ] =++ tim ; for ( register int i = 1 ; i <= 19 ; ++ i ) f [ u ][ i ] = f [ f [ u ][ i -1 ]][ i -1 ]; for ( register int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( v == fa ) continue ; dis [ v ] = dis [ u ] + w , dfs ( v , u ); } return ; } inline int Lca ( int u , int v ){ if ( dep [ u ] < dep [ v ]) swap ( u , v ); for ( register int i = 19 ; i >= 0 ; -- i ){ if ( dep [ f [ u ][ i ]] >= dep [ v ]) u = f [ u ][ i ]; } if ( u == v ) return u ; for ( register int i = 19 ; i >= 0 ; -- i ){ if ( f [ u ][ i ] != f [ v ][ i ]) u = f [ u ][ i ], v = f [ v ][ i ]; } return f [ u ][ 0 ]; } inline i128 path ( int u , int v ){ return 1l l * dis [ u ] + 1l l * dis [ v ] -2ll * ( dis [ Lca ( u , v )]); } std :: set < std :: pair < int , int >> s ; i128 ans = 0 ; inline void Insert ( int x ){ if ( s . size () == 2 ) return ( void ) s . insert ({ dfn [ x ], x }); auto now = s . insert ({ dfn [ x ], x }). first ; auto Pre = std :: prev ( now ), Nex = std :: next ( now ); if ( Pre == s . begin ()) Pre =-- ( s . find ({ inf , inf })); if ( Nex == ( -- s . end ())) Nex =++ ( s . begin ()); std :: pair < int , int > u =* Pre , v =* Nex ; ans -= path ( u . second , v . second ); ans += path ( u . second , x ) + path ( x , v . second ); } inline void Delete ( int x ){ if ( s . size () == 3 ) return ( void ) s . erase ( s . find ({ dfn [ x ], x })); auto now = s . find ({ dfn [ x ], x }); auto Pre = std :: prev ( now ), Nex = std :: next ( now ); if ( Pre == s . begin ()) Pre =-- ( s . find ({ inf , inf })); if ( Nex == ( -- s . end ())) Nex =++ ( s . begin ()); std :: pair < int , int > u =* Pre , v =* Nex ; ans += path ( u . second , v . second ); ans -= path ( u . second , x ) + path ( x , v . second ); s . erase ( now ); } int main (){ memset ( head , -1 , sizeof head ); cin >> n , s . insert ({ -1 , -1 }), s . insert ({ inf , inf }); //\u5de6\u53f3\u5404\u585e\u4e00\u4e2a\u7a7a\u4f59\u8282\u70b9\u9632\u6b62\u8d8a\u754c // \u8fd9\u62db\u662f\u6253 CF \u7684\u65f6\u5019\u8ddf jiangly \u5b66\u7684 for ( register int i = 1 ; i < n ; ++ i ){ int u , v , w ; cin >> u >> v >> w ; add ( u , v , w ), add ( v , u , w ); } dfs ( 1 , 0 ); cin >> m ; while ( m -- ){ char op ; cin >> op ; int x ; if ( op == '+' ) cin >> x , Insert ( x ); if ( op == '-' ) cin >> x , Delete ( x ); if ( op == '?' ) write ( ans / 2 ), putchar ( '\\n' ); } return 0 ; } 1 Tag : LCA / \u6811\u4e0a\u5dee\u5206 / dfs \u5e8f","title":"Acwing355"},{"location":"%E9%A2%98%E8%A7%A3/Acwing355/#acwing355","text":"\u8865\u5145\u7ed3\u8bba\u7684\u4e24\u79cd\u8bc1\u660e\u3002","title":"Acwing355 \u5f02\u8c61\u77f3"},{"location":"%E9%A2%98%E8%A7%A3/Acwing355/#textquestion","text":"\u52a8\u6001\u7ef4\u62a4\u6811\u4e0a\u4f7f\u5f97\u88ab\u9009\u4e2d\u70b9\u8054\u901a\u7684\u8fb9\u96c6\u957f\u5ea6\u4e4b\u548c\u7684\u6700\u5c0f\u503c\uff0c\u652f\u6301\u9009\u4e2d\uff0c\u53d6\u6d88\u9009\u4e2d\u67d0\u4e2a\u8282\u70b9\u3002 1e5.","title":"\\(\\text{Question}\\)"},{"location":"%E9%A2%98%E8%A7%A3/Acwing355/#textlemma","text":"\u5c06\u6240\u6709\u88ab\u9009\u4e2d\u7684\u8282\u70b9\u6309\u7167\u65f6\u95f4\u6233\u6392\u5e8f\u6210\u4e00\u5708\uff0c\u7b54\u6848\u5c31\u662f\u76f8\u90bb\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u957f\u5ea6\u503c\u548c\u7684\u4e8c\u5206\u4e4b\u4e00\u3002","title":"\\(\\text{Lemma}\\)"},{"location":"%E9%A2%98%E8%A7%A3/Acwing355/#textproof1","text":"\u5206\u7c7b\u8ba8\u8bba\u8bc1\u6cd5\u3002 \u9996\u5148\u6709\u4e00\u4e2a\u7ed3\u8bba\uff0c\u4e00\u4e2a\u5b50\u6811\u5f53\u4e2d\u7684\u6240\u6709\u8282\u70b9\u7684\u65f6\u95f4\u6233\uff08 dfs \u5e8f\uff09\u5fc5\u7136\u662f\u8fde\u7eed\u7684\u4e00\u6bb5\uff0c\u53cd\u8fc7\u6765\u4e5f\u4e00\u6837\u3002 \u8003\u8651\u6700\u7b80\u5355\u7684\u4e00\u79cd\u60c5\u51b5\uff1a\u88ab\u9009\u4e2d\u7684\u53ea\u6709\u4e09\u4e2a\u8282\u70b9 \\(a,b,c\\) \uff08\u5df2\u7ecf\u6392\u597d\u5e8f\uff09 \u5148\u8d70\u4e00\u904d \\(\\delta(a,b)\\) \uff08\u5bf9\u5e94\u5230\u4ee3\u7801\u91cc\u5c31\u662f\u7ed9\u7b54\u6848\u7d2f\u52a0 \\(\\delta(a,b)\\) \u7684\u957f\u5ea6\uff09\uff0c\u6b64\u65f6 \\(\\delta(a,b)\\) \u88ab\u8986\u76d6\u4e86\u4e00\u6b21\uff0c\u5c06 \\(\\delta(a,b)\\) \u7684\u957f\u5ea6\u7d2f\u52a0\u5230\u7b54\u6848\u5f53\u4e2d\u3002 \u6b64\u65f6\u8d70 \\(\\delta(b,c)\\) \uff0c\u6709\u4e24\u79cd\u60c5\u51b5\uff1a \\(\\delta(b,c)\\) \u4e0d\u7ecf\u8fc7 \\(a\\) \uff0c\u8fd9\u65f6\u53ea\u80fd\u6709\u4e24\u79cd\u60c5\u51b5\uff08\u5176\u5b83\u7684\u53ef\u4ee5\u5f52\u5316\u5230\u8fd9\u4e24\u79cd\uff09 \u56fe\u4e2d\u60c5\u51b5 \\(A\\) \uff0c\u6b64\u65f6 \\(\\delta(a,\\text{LCA}(b,c))\\) \u88ab\u8986\u76d6\u4e00\u6b21\uff0c \\(\\delta(b,\\text{LCA}(b,c))\\) \u88ab\u8986\u76d6\u4e24\u6b21 \uff08\u5982\u679c \\(\\text{LCA}(b,c)=b\\) \u5c31\u53ea\u7b97\u4e00\u6b21\uff0c\u4e4b\u540e\u7684\u540c\u7406\uff09\uff0c \\(\\delta(\\text{LCA}(b,c),c)\\) \u88ab\u8986\u76d6\u4e00\u6b21\u3002 \u56fe\u4e2d\u60c5\u51b5 \\(B\\) \uff0c\u6b64\u65f6 \\(\\delta(a,\\text{LCA}(a,b))\\) \u88ab\u8986\u76d6\u4e00\u6b21\uff0c \\(\\delta(b,\\text{LCA}(a,b))\\) \u88ab\u8986\u76d6\u4e24\u6b21\uff0c \\(\\delta(\\text{LCA}(a,b),c)\\) \u88ab\u8986\u76d6\u4e00\u6b21\u3002 \\(\\delta(b,c)\\) \u7ecf\u8fc7 \\(a\\) \uff0c\u8fd9\u65f6\u53ea\u80fd\u6709\u4e00\u79cd\u60c5\u51b5\uff08\u5176\u5b83\u7684\u4ecd\u7136\u53ef\u4ee5\u5f52\u5316\uff09 \u56fe\u4e2d\u60c5\u51b5 \\(C\\) \uff0c\u6b64\u65f6 \\(\\delta(a,b)\\) \u88ab\u8986\u76d6\u4e24\u6b21\uff0c \\(\\delta(a,c)\\) \u88ab\u8986\u76d6\u4e00\u6b21\u3002 \u6700\u540e\u8d70\u4e00\u904d \\(\\delta(a,c)\\) \u5bf9\u4e8e\u4e0a\u9762\u7684 1.1 \uff1a \\(\\delta(a,\\text{LCA}(b,c))\\) \u4ece\u88ab\u8986\u76d6\u4e00\u6b21\u5230\u4e24\u6b21\uff0c \\(\\delta(\\text{LCA}(b,c),c)\\) \u4ece\u4e00\u6b21\u5230\u4e24\u6b21\uff0c \\(\\delta(b,\\text{LCA}(b,c))\\) \u4ecd\u65e7\u662f\u4e24\u6b21\u3002 \u5bf9\u4e8e\u4e0a\u9762\u7684 1.2 \uff1a \\(\\delta(a,\\text{LCA}(a,b))\\) \u4ece\u88ab\u8986\u76d6\u4e00\u6b21\u5230\u4e24\u6b21\uff0c \\(\\delta(b,\\text{LCA}(a,b))\\) \u4ecd\u65e7\u662f\u4e24\u6b21\uff0c \\(\\delta(\\text{LCA}(a,b),c)\\) \u4ece\u4e00\u6b21\u5230\u4e24\u6b21\u3002 \u5bf9\u4e8e\u4e0a\u9762\u7684 2.1 \uff1a \\(\\delta(a,b)\\) \u4ecd\u65e7\u662f\u4e24\u6b21\uff0c \\(\\delta(a,c)\\) \u4ece\u4e00\u6b21\u5230\u4e24\u6b21\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u5728\u53ea\u6709\u4e09\u4e2a\u88ab\u9009\u4e2d\u70b9\u7684\u65f6\u5019\uff0c \\(\\text{Lemma}\\) \u4e00\u5b9a\u6210\u7acb\u3002 \u6839\u636e\u6570\u5b66\u5f52\u7eb3\u6cd5\u53ef\u4ee5\u5f97\u5230\u4efb\u610f\u591a\u4e2a\u88ab\u9009\u4e2d\u70b9\u7684\u60c5\u51b5\uff0c \\(\\text{Lemma}\\) \u5f97\u8bc1\u3002","title":"\\(\\text{Proof1}\\)"},{"location":"%E9%A2%98%E8%A7%A3/Acwing355/#textproof2","text":"\u56e0\u4e3a dfn \u8fde\u7eed\u7684\u4e00\u6bb5\u5fc5\u7136\u5728\u540c\u4e00\u4e2a\u5b50\u6811\u5f53\u4e2d\u3002 \u8003\u8651 \\(\\text{Lemma}\\) \u7684\u8fc7\u7a0b\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u5728\u4e0d\u65ad\u7684\u8bbf\u95ee\u67d0\u4e2a\u5b50\u6811\uff0c\u5904\u7406\u5b8c\u8fd9\u4e2a\u5b50\u6811\u5f53\u4e2d\u4f1a\u88ab\u7edf\u8ba1\u7684\u8fb9\uff0c\u7136\u540e\u9000\u51fa\u8fd9\u4e2a\u5b50\u6811\u3002 \u90a3\u5c31\u76f4\u63a5\u770b\u8fd9\u4e2a\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u8fc7\u7a0b\u672c\u8eab\uff0c\u5047\u8bbe\u4f60\u8fdb\u5165\u5230\u4e86\u4e00\u4e2a\u4ee5 \\(fa\\) \u4e3a\u6839\u7684\u5b50\u6811\uff0c\u5f53\u524d\u8d70\u5230\u4e86\u4e00\u4e2a\u6709\u5f02\u8c61\u77f3\u7684\u8282\u70b9 \\(u\\) \u3002 \u90a3\u4e48\u4f60\u8fdb\u5165\u8fd9\u4e2a\u5b50\u6811\u7684\u65f6\u5019\uff08\u4e5f\u5c31\u662f\u5904\u7406\u524d\u9762\u7684\u7b54\u6848\u7684\u65f6\u5019\uff09\uff0c \\(fa \\to u\\) \u5b9e\u9645\u4e0a\u5df2\u7ecf\u88ab\u7b97\u8fc7\u4e00\u6b21\u4e86\uff0c\u5f53\u4f60\u7ed9 \\(u\\) \u8fdb\u884c\u7edf\u8ba1\uff08\u4e5f\u5c31\u662f\u8981\u9000\u51fa\u5b50\u6811\u7684\u65f6\u5019\uff09\uff0c \\(fa \\to u\\) \u5c31\u4f1a\u88ab\u518d\u7b97\u4e00\u6b21\uff0c\u5e76\u4e14\u4e4b\u540e\u4e0d\u4f1a\u56de\u6765\u518d\u6b21\u8ba1\u7b97\u3002 \u63a8\u5e7f\u8fc7\u540e\u5f97\u5230\uff1a\u4e00\u6761\u8fde\u63a5\u4e24\u4e2a\u6709\u5f02\u8c61\u77f3\u7684\u8282\u70b9\u7684\u8def\u5f84\u5fc5\u7136\u4f1a\u88ab\u8ba1\u7b97\u4e24\u6b21\u3002 \u53ef\u4ee5\u77e5\u9053 \\(\\text{Lemma}\\) \u662f\u6b63\u786e\u7684\u3002","title":"\\(\\text{Proof2}\\)"},{"location":"%E9%A2%98%E8%A7%A3/Acwing355/#textcode","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 #include <set> #include <cstring> #include <iostream> using namespace std ; using i128 = __int128 ; inline void write ( i128 x ){ if ( x < 0 ) putchar ( '-' ), x =- x ; if ( x > 9 ) write ( x / 10 ); putchar ( x % 10 + 48 ); } constexpr int si = 1e5 + 10 ; constexpr int inf = 0x3f3f3f3f ; int n , m , tot = 0 , tim = 0 ; int head [ si ]; struct Edge { int ver , Next , w ; } e [ si << 1 ]; inline void add ( int u , int v , int w ){ e [ tot ] = ( Edge ){ v , head [ u ], w }, head [ u ] = tot ++ ; } int dep [ si ], f [ si ][ 20 ], dfn [ si ]; i128 dis [ si ]; inline void dfs ( int u , int fa ){ dep [ u ] = dep [ fa ] + 1 , f [ u ][ 0 ] = fa , dfn [ u ] =++ tim ; for ( register int i = 1 ; i <= 19 ; ++ i ) f [ u ][ i ] = f [ f [ u ][ i -1 ]][ i -1 ]; for ( register int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( v == fa ) continue ; dis [ v ] = dis [ u ] + w , dfs ( v , u ); } return ; } inline int Lca ( int u , int v ){ if ( dep [ u ] < dep [ v ]) swap ( u , v ); for ( register int i = 19 ; i >= 0 ; -- i ){ if ( dep [ f [ u ][ i ]] >= dep [ v ]) u = f [ u ][ i ]; } if ( u == v ) return u ; for ( register int i = 19 ; i >= 0 ; -- i ){ if ( f [ u ][ i ] != f [ v ][ i ]) u = f [ u ][ i ], v = f [ v ][ i ]; } return f [ u ][ 0 ]; } inline i128 path ( int u , int v ){ return 1l l * dis [ u ] + 1l l * dis [ v ] -2ll * ( dis [ Lca ( u , v )]); } std :: set < std :: pair < int , int >> s ; i128 ans = 0 ; inline void Insert ( int x ){ if ( s . size () == 2 ) return ( void ) s . insert ({ dfn [ x ], x }); auto now = s . insert ({ dfn [ x ], x }). first ; auto Pre = std :: prev ( now ), Nex = std :: next ( now ); if ( Pre == s . begin ()) Pre =-- ( s . find ({ inf , inf })); if ( Nex == ( -- s . end ())) Nex =++ ( s . begin ()); std :: pair < int , int > u =* Pre , v =* Nex ; ans -= path ( u . second , v . second ); ans += path ( u . second , x ) + path ( x , v . second ); } inline void Delete ( int x ){ if ( s . size () == 3 ) return ( void ) s . erase ( s . find ({ dfn [ x ], x })); auto now = s . find ({ dfn [ x ], x }); auto Pre = std :: prev ( now ), Nex = std :: next ( now ); if ( Pre == s . begin ()) Pre =-- ( s . find ({ inf , inf })); if ( Nex == ( -- s . end ())) Nex =++ ( s . begin ()); std :: pair < int , int > u =* Pre , v =* Nex ; ans += path ( u . second , v . second ); ans -= path ( u . second , x ) + path ( x , v . second ); s . erase ( now ); } int main (){ memset ( head , -1 , sizeof head ); cin >> n , s . insert ({ -1 , -1 }), s . insert ({ inf , inf }); //\u5de6\u53f3\u5404\u585e\u4e00\u4e2a\u7a7a\u4f59\u8282\u70b9\u9632\u6b62\u8d8a\u754c // \u8fd9\u62db\u662f\u6253 CF \u7684\u65f6\u5019\u8ddf jiangly \u5b66\u7684 for ( register int i = 1 ; i < n ; ++ i ){ int u , v , w ; cin >> u >> v >> w ; add ( u , v , w ), add ( v , u , w ); } dfs ( 1 , 0 ); cin >> m ; while ( m -- ){ char op ; cin >> op ; int x ; if ( op == '+' ) cin >> x , Insert ( x ); if ( op == '-' ) cin >> x , Delete ( x ); if ( op == '?' ) write ( ans / 2 ), putchar ( '\\n' ); } return 0 ; } 1 Tag : LCA / \u6811\u4e0a\u5dee\u5206 / dfs \u5e8f","title":"\\(\\text{Code}\\)"},{"location":"%E9%A2%98%E8%A7%A3/Bzoj3307/","text":"Bzoj3307 \u96e8\u5929\u7684\u5c3e\u5df4 \u00b6 \\(\\text{Question}\\) \u00b6 \u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u6bcf\u6b21\u7ed9 \\((x,y)\\) \u7684\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u53d1\u653e\u4e00\u4e2a\u7b2c \\(z\\) \u79cd\u7269\u54c1\u3002 \\(M\\) \u6b21\u64cd\u4f5c\uff0c\u6700\u540e\u8be2\u95ee\u6bcf\u4e2a\u70b9\u6700\u591a\u7684\u662f\u54ea\u4e00\u79cd\u7269\u54c1\u3002 \\(1\\le N,M \\le 10^5,1\\le z\\le 10^9\\) \\(\\text{Brute force}\\) \u00b6 \u5148\u79bb\u6563\u5316 \\(z\\) \u3002 \u8003\u8651\u8bbe\u4e00\u4e2a\u8ba1\u6570\u6570\u7ec4 \\(d\\) \uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9 \\(x\\) \uff0c\u5206\u522b\u7ef4\u62a4\u7b2c \\(z\\) \u79cd\u7269\u54c1\u5728 \\(x\\) \u4e0a\u6709\u591a\u5c11\u4e2a\u3002 \u5148\u6c42\u51fa \\(\\text{LCA}\\) \uff0c\u6bcf\u6b21\u64cd\u4f5c\u4ece \\(x \\to \\text{LCA} \\to y\\) \uff0c\u7136\u540e\u628a\u8def\u5f84\u4e0a\u76f8\u5e94\u7684\u8282\u70b9\u7684 \\(d[x][z]\\) \u52a0\u4e00\u3002 \u590d\u6742\u5ea6 \\(\\text{O}(NM)\\) \u3002 \u6216\u8005\u53ef\u4ee5\u5229\u7528\u6811\u4e0a\u5dee\u5206\u5bf9\u6bcf\u79cd\u7269\u54c1\u7684\u60c5\u51b5\u5206\u522b\u8fdb\u884c\u4fee\u6539\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u8bbe \\(c\\) \u4e3a \\(d\\) \u7684\u5dee\u5206\u6570\u7ec4\uff0c\u6bcf\u6b21\u64cd\u4f5c \\((x,y,z)\\) \uff0c\u4f7f \uff1a \\[c[x][z]+1,c[y][z]+1,c[\\text{LCA(x,y)}][z]-1,c[\\text{Father}(\\text{LCA(x,y)})][z]-1\\] \u6700\u540e\u8fdb\u884c \\(cnt_z\\) \u6b21 dfs\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9 \\(u\\) \uff0c \\(d\\) \u5c31\u7b49\u4e8e \\(c\\) \u7684\u5b50\u6811\u548c \u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u6c42\u7269\u54c1\u51fa\u73b0\u6b21\u6570\u7684\u6700\u503c\u5373\u53ef\u3002 \u590d\u6742\u5ea6 \\(\\text{O}(N\\times cnt_z)\\) \uff0c \\(cnt_z\\) \u662f\u4e0d\u540c\u7684\u7269\u54c1\u7684\u6570\u91cf\u3002 \u8fd9\u4e2a\u505a\u6cd5\u662f\u5bf9\u6bcf\u79cd\u7269\u54c1\u90fd\u7ef4\u62a4\u4e86\u4e00\u4e2a\u5dee\u5206\u5e8f\u5217\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u5dee\u5206\u5e8f\u5217\u662f\u5728\u6811\u4e0a\u7684\u3002 \\(\\text{Solution}\\) \u00b6 \u5b9e\u9645\u4e0a \\(\\text{O}(N\\times cnt_z)\\) \u505a\u6cd5\u662f\u5bf9\u6bcf\u4e2a\u8282\u70b9 \\(u\\) \u7ef4\u62a4\u4e86\u4e00\u4e2a\u5e8f\u5217 \\(c[u]\\) \uff0c \\(c[u][z]\\) \u5c31\u8868\u793a \\(z\\) \u8fd9\u79cd\u7269\u54c1\u7684\u5dee\u5206\u5e8f\u5217\u5728 \\(u\\) \u8fd9\u91cc\u7684\u8fd9\u4e00\u9879\u3002 \u90a3\u4e48\u4e00\u4e2a\u8282\u70b9 \\(u\\) \u7684\u7b54\u6848\u5c31\u662f\u5b83\u5b50\u6811\u5f53\u4e2d\u6240\u6709\u8282\u70b9\u7684 \\(c[v]\\) \u7684\u5408\u5e76\u8d77\u6765\u4e4b\u540e\u5f97\u5230\u7684\u65b0\u5e8f\u5217\u7684 \\(\\text{max\\_element}\\) \u3002 \u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9 \\(u\\) \u5f00\u4e00\u9897\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u4ee3\u66ff \\(c[u]\\) \uff0c\u540c\u65f6\u652f\u6301\u7ef4\u62a4 \\(c[u]\\) \u5f53\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5927\u503c\u7684\u4f4d\u7f6e\u3002 \u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2a\u8282\u70b9\u7684\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u503c\u57df\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f \\([1,cnt_z]\\) \u3002 \u8fdb\u884c\u4e00\u6b21 dfs\uff0c\u90a3\u4e48\u8ba1\u7b97 \\(u\\) \u7684\u7b54\u6848\u7684\u65f6\u5019\uff0c\u5c31\u53ea\u9700\u8981\u628a \\(u\\) \u7684\u6240\u6709\u513f\u5b50\u8282\u70b9\u7684\u7ebf\u6bb5\u6811\u548c \\(u\\) \u7684\u7ebf\u6bb5\u6811\u8fdb\u884c\u7ebf\u6bb5\u6811\u5408\u5e76\u5373\u53ef\u5feb\u901f\u5f97\u5230 \\(u\\) \u7684\u7b54\u6848\u3002 \u590d\u6742\u5ea6 \\(\\text{O}((N+M)\\log(N+M))\\) \\(\\text{Trick:}\\) \u5bf9\u4e8e\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a\u4fe1\u606f\u5e8f\u5217\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8282\u70b9\u7684\u7b54\u6848\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c\u5b50\u6811\u548c\u7684\u65b9\u5f0f\u5f97\u5230\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u4e00\u9897\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u4ee3\u66ff\u6bcf\u4e2a\u8282\u70b9\u7684\u4fe1\u606f\u5e8f\u5217\uff0c\u7136\u540e\u4f7f\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u8ba1\u7b97\u7b54\u6848\u3002 \\(\\text{Code}\\) \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 #include <cmath> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int si = 1e5 + 10 ; int n , m ; int tot = 0 , head [ si ]; struct Edge { int ver , Next ; } e [ si << 1 ]; inline void add ( int u , int v ) { e [ tot ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot ++ ; } int dep [ si ], f [ si ][ 20 ]; int lg ; inline void dfs1 ( int u , int fa ) { dep [ u ] = dep [ fa ] + 1 , f [ u ][ 0 ] = fa ; for ( int i = 1 ; i <= lg ; ++ i ) f [ u ][ i ] = f [ f [ u ][ i -1 ] ][ i -1 ]; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs1 ( v , u ); } } inline int Lca ( int u , int v ) { if ( dep [ u ] < dep [ v ]) swap ( u , v ); for ( int i = lg ; i >= 0 ; -- i ) if ( dep [ f [ u ][ i ]] >= dep [ v ]) u = f [ u ][ i ]; if ( u == v ) return u ; for ( int i = lg ; i >= 0 ; -- i ) if ( f [ u ][ i ] != f [ v ][ i ]) u = f [ u ][ i ], v = f [ v ][ i ]; return f [ u ][ 0 ]; } int root [ si ], cnt = 0 ; struct segment_tree { int ls , rs ; int mx , id ; } t [ si * 80 ]; inline void pushup ( int p ) { int lc = t [ p ]. ls , rc = t [ p ]. rs ; if ( t [ lc ]. mx >= t [ rc ]. mx ) t [ p ]. mx = t [ lc ]. mx , t [ p ]. id = t [ lc ]. id ; else t [ p ]. mx = t [ rc ]. mx , t [ p ]. id = t [ rc ]. id ; } inline void change ( int & p , int l , int r , int pos , int val ) { if ( ! p ) p = ++ cnt ; if ( l == r ){ t [ p ]. mx += val ; t [ p ]. id = l ; return ; } int mid = l + r >> 1 ; if ( pos <= mid ) change ( t [ p ]. ls , l , mid , pos , val ); else change ( t [ p ]. rs , mid + 1 , r , pos , val ); pushup ( p ); } int merge ( int p , int q , int l , int r ) { if ( ! p ) return q ; if ( ! q ) return p ; if ( l == r ){ t [ p ]. mx += t [ q ]. mx ; return p ; } int mid = l + r >> 1 ; t [ p ]. ls = merge ( t [ p ]. ls , t [ q ]. ls , l , mid ); t [ p ]. rs = merge ( t [ p ]. rs , t [ q ]. rs , mid + 1 , r ); pushup ( p ); return p ; } int cntz = 0 ; int ans [ si ]; int u [ si ], v [ si ], z [ si ], idz [ si ]; void dfs2 ( int u , int fa ) { for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs2 ( v , u ); root [ u ] = merge ( root [ u ], root [ v ], 1 , cntz ); } ans [ u ] = t [ root [ u ]]. mx == 0 ? 0 : t [ root [ u ]]. id ; return ; } int main () { cin >> n >> m , lg = ( int )( log ( n ) / log ( 2 )) + 1 ; memset ( head , -1 , sizeof head ); for ( int i = 1 ; i < n ; ++ i ) { int u , v ; cin >> u >> v ; add ( u , v ), add ( v , u ); } dfs1 ( 1 , 0 ); for ( int i = 1 ; i <= m ; ++ i ) { cin >> u [ i ] >> v [ i ] >> z [ i ]; idz [ i ] = z [ i ]; } sort ( idz + 1 , idz + 1 + m ); cntz = unique ( idz + 1 , idz + 1 + m ) - idz - 1 ; for ( int i = 1 ; i <= m ; ++ i ) { int nz = lower_bound ( idz + 1 , idz + 1 + cntz , z [ i ]) - idz ; int lca = Lca ( u [ i ], v [ i ]); int fat = f [ lca ][ 0 ]; change ( root [ u [ i ]], 1 , cntz , nz , 1 ); change ( root [ v [ i ]], 1 , cntz , nz , 1 ); change ( root [ lca ], 1 , cntz , nz , -1 ); change ( root [ fat ], 1 , cntz , nz , -1 ); } dfs2 ( 1 , 0 ); for ( int i = 1 ; i <= n ; ++ i ) cout << idz [ ans [ i ]] << endl ; return 0 ; } 1 Tag : \u7ebf\u6bb5\u6811\u5408\u5e76 / LCA / \u6811\u4e0a\u5dee\u5206","title":"Bzoj3307"},{"location":"%E9%A2%98%E8%A7%A3/Bzoj3307/#bzoj3307","text":"","title":"Bzoj3307 \u96e8\u5929\u7684\u5c3e\u5df4"},{"location":"%E9%A2%98%E8%A7%A3/Bzoj3307/#textquestion","text":"\u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u6bcf\u6b21\u7ed9 \\((x,y)\\) \u7684\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u53d1\u653e\u4e00\u4e2a\u7b2c \\(z\\) \u79cd\u7269\u54c1\u3002 \\(M\\) \u6b21\u64cd\u4f5c\uff0c\u6700\u540e\u8be2\u95ee\u6bcf\u4e2a\u70b9\u6700\u591a\u7684\u662f\u54ea\u4e00\u79cd\u7269\u54c1\u3002 \\(1\\le N,M \\le 10^5,1\\le z\\le 10^9\\)","title":"\\(\\text{Question}\\)"},{"location":"%E9%A2%98%E8%A7%A3/Bzoj3307/#textbrute-force","text":"\u5148\u79bb\u6563\u5316 \\(z\\) \u3002 \u8003\u8651\u8bbe\u4e00\u4e2a\u8ba1\u6570\u6570\u7ec4 \\(d\\) \uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9 \\(x\\) \uff0c\u5206\u522b\u7ef4\u62a4\u7b2c \\(z\\) \u79cd\u7269\u54c1\u5728 \\(x\\) \u4e0a\u6709\u591a\u5c11\u4e2a\u3002 \u5148\u6c42\u51fa \\(\\text{LCA}\\) \uff0c\u6bcf\u6b21\u64cd\u4f5c\u4ece \\(x \\to \\text{LCA} \\to y\\) \uff0c\u7136\u540e\u628a\u8def\u5f84\u4e0a\u76f8\u5e94\u7684\u8282\u70b9\u7684 \\(d[x][z]\\) \u52a0\u4e00\u3002 \u590d\u6742\u5ea6 \\(\\text{O}(NM)\\) \u3002 \u6216\u8005\u53ef\u4ee5\u5229\u7528\u6811\u4e0a\u5dee\u5206\u5bf9\u6bcf\u79cd\u7269\u54c1\u7684\u60c5\u51b5\u5206\u522b\u8fdb\u884c\u4fee\u6539\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u8bbe \\(c\\) \u4e3a \\(d\\) \u7684\u5dee\u5206\u6570\u7ec4\uff0c\u6bcf\u6b21\u64cd\u4f5c \\((x,y,z)\\) \uff0c\u4f7f \uff1a \\[c[x][z]+1,c[y][z]+1,c[\\text{LCA(x,y)}][z]-1,c[\\text{Father}(\\text{LCA(x,y)})][z]-1\\] \u6700\u540e\u8fdb\u884c \\(cnt_z\\) \u6b21 dfs\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9 \\(u\\) \uff0c \\(d\\) \u5c31\u7b49\u4e8e \\(c\\) \u7684\u5b50\u6811\u548c \u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u6c42\u7269\u54c1\u51fa\u73b0\u6b21\u6570\u7684\u6700\u503c\u5373\u53ef\u3002 \u590d\u6742\u5ea6 \\(\\text{O}(N\\times cnt_z)\\) \uff0c \\(cnt_z\\) \u662f\u4e0d\u540c\u7684\u7269\u54c1\u7684\u6570\u91cf\u3002 \u8fd9\u4e2a\u505a\u6cd5\u662f\u5bf9\u6bcf\u79cd\u7269\u54c1\u90fd\u7ef4\u62a4\u4e86\u4e00\u4e2a\u5dee\u5206\u5e8f\u5217\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u5dee\u5206\u5e8f\u5217\u662f\u5728\u6811\u4e0a\u7684\u3002","title":"\\(\\text{Brute force}\\)"},{"location":"%E9%A2%98%E8%A7%A3/Bzoj3307/#textsolution","text":"\u5b9e\u9645\u4e0a \\(\\text{O}(N\\times cnt_z)\\) \u505a\u6cd5\u662f\u5bf9\u6bcf\u4e2a\u8282\u70b9 \\(u\\) \u7ef4\u62a4\u4e86\u4e00\u4e2a\u5e8f\u5217 \\(c[u]\\) \uff0c \\(c[u][z]\\) \u5c31\u8868\u793a \\(z\\) \u8fd9\u79cd\u7269\u54c1\u7684\u5dee\u5206\u5e8f\u5217\u5728 \\(u\\) \u8fd9\u91cc\u7684\u8fd9\u4e00\u9879\u3002 \u90a3\u4e48\u4e00\u4e2a\u8282\u70b9 \\(u\\) \u7684\u7b54\u6848\u5c31\u662f\u5b83\u5b50\u6811\u5f53\u4e2d\u6240\u6709\u8282\u70b9\u7684 \\(c[v]\\) \u7684\u5408\u5e76\u8d77\u6765\u4e4b\u540e\u5f97\u5230\u7684\u65b0\u5e8f\u5217\u7684 \\(\\text{max\\_element}\\) \u3002 \u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9 \\(u\\) \u5f00\u4e00\u9897\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u4ee3\u66ff \\(c[u]\\) \uff0c\u540c\u65f6\u652f\u6301\u7ef4\u62a4 \\(c[u]\\) \u5f53\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5927\u503c\u7684\u4f4d\u7f6e\u3002 \u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2a\u8282\u70b9\u7684\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u503c\u57df\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f \\([1,cnt_z]\\) \u3002 \u8fdb\u884c\u4e00\u6b21 dfs\uff0c\u90a3\u4e48\u8ba1\u7b97 \\(u\\) \u7684\u7b54\u6848\u7684\u65f6\u5019\uff0c\u5c31\u53ea\u9700\u8981\u628a \\(u\\) \u7684\u6240\u6709\u513f\u5b50\u8282\u70b9\u7684\u7ebf\u6bb5\u6811\u548c \\(u\\) \u7684\u7ebf\u6bb5\u6811\u8fdb\u884c\u7ebf\u6bb5\u6811\u5408\u5e76\u5373\u53ef\u5feb\u901f\u5f97\u5230 \\(u\\) \u7684\u7b54\u6848\u3002 \u590d\u6742\u5ea6 \\(\\text{O}((N+M)\\log(N+M))\\) \\(\\text{Trick:}\\) \u5bf9\u4e8e\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a\u4fe1\u606f\u5e8f\u5217\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8282\u70b9\u7684\u7b54\u6848\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c\u5b50\u6811\u548c\u7684\u65b9\u5f0f\u5f97\u5230\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u4e00\u9897\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u4ee3\u66ff\u6bcf\u4e2a\u8282\u70b9\u7684\u4fe1\u606f\u5e8f\u5217\uff0c\u7136\u540e\u4f7f\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u8ba1\u7b97\u7b54\u6848\u3002","title":"\\(\\text{Solution}\\)"},{"location":"%E9%A2%98%E8%A7%A3/Bzoj3307/#textcode","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 #include <cmath> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int si = 1e5 + 10 ; int n , m ; int tot = 0 , head [ si ]; struct Edge { int ver , Next ; } e [ si << 1 ]; inline void add ( int u , int v ) { e [ tot ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot ++ ; } int dep [ si ], f [ si ][ 20 ]; int lg ; inline void dfs1 ( int u , int fa ) { dep [ u ] = dep [ fa ] + 1 , f [ u ][ 0 ] = fa ; for ( int i = 1 ; i <= lg ; ++ i ) f [ u ][ i ] = f [ f [ u ][ i -1 ] ][ i -1 ]; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs1 ( v , u ); } } inline int Lca ( int u , int v ) { if ( dep [ u ] < dep [ v ]) swap ( u , v ); for ( int i = lg ; i >= 0 ; -- i ) if ( dep [ f [ u ][ i ]] >= dep [ v ]) u = f [ u ][ i ]; if ( u == v ) return u ; for ( int i = lg ; i >= 0 ; -- i ) if ( f [ u ][ i ] != f [ v ][ i ]) u = f [ u ][ i ], v = f [ v ][ i ]; return f [ u ][ 0 ]; } int root [ si ], cnt = 0 ; struct segment_tree { int ls , rs ; int mx , id ; } t [ si * 80 ]; inline void pushup ( int p ) { int lc = t [ p ]. ls , rc = t [ p ]. rs ; if ( t [ lc ]. mx >= t [ rc ]. mx ) t [ p ]. mx = t [ lc ]. mx , t [ p ]. id = t [ lc ]. id ; else t [ p ]. mx = t [ rc ]. mx , t [ p ]. id = t [ rc ]. id ; } inline void change ( int & p , int l , int r , int pos , int val ) { if ( ! p ) p = ++ cnt ; if ( l == r ){ t [ p ]. mx += val ; t [ p ]. id = l ; return ; } int mid = l + r >> 1 ; if ( pos <= mid ) change ( t [ p ]. ls , l , mid , pos , val ); else change ( t [ p ]. rs , mid + 1 , r , pos , val ); pushup ( p ); } int merge ( int p , int q , int l , int r ) { if ( ! p ) return q ; if ( ! q ) return p ; if ( l == r ){ t [ p ]. mx += t [ q ]. mx ; return p ; } int mid = l + r >> 1 ; t [ p ]. ls = merge ( t [ p ]. ls , t [ q ]. ls , l , mid ); t [ p ]. rs = merge ( t [ p ]. rs , t [ q ]. rs , mid + 1 , r ); pushup ( p ); return p ; } int cntz = 0 ; int ans [ si ]; int u [ si ], v [ si ], z [ si ], idz [ si ]; void dfs2 ( int u , int fa ) { for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs2 ( v , u ); root [ u ] = merge ( root [ u ], root [ v ], 1 , cntz ); } ans [ u ] = t [ root [ u ]]. mx == 0 ? 0 : t [ root [ u ]]. id ; return ; } int main () { cin >> n >> m , lg = ( int )( log ( n ) / log ( 2 )) + 1 ; memset ( head , -1 , sizeof head ); for ( int i = 1 ; i < n ; ++ i ) { int u , v ; cin >> u >> v ; add ( u , v ), add ( v , u ); } dfs1 ( 1 , 0 ); for ( int i = 1 ; i <= m ; ++ i ) { cin >> u [ i ] >> v [ i ] >> z [ i ]; idz [ i ] = z [ i ]; } sort ( idz + 1 , idz + 1 + m ); cntz = unique ( idz + 1 , idz + 1 + m ) - idz - 1 ; for ( int i = 1 ; i <= m ; ++ i ) { int nz = lower_bound ( idz + 1 , idz + 1 + cntz , z [ i ]) - idz ; int lca = Lca ( u [ i ], v [ i ]); int fat = f [ lca ][ 0 ]; change ( root [ u [ i ]], 1 , cntz , nz , 1 ); change ( root [ v [ i ]], 1 , cntz , nz , 1 ); change ( root [ lca ], 1 , cntz , nz , -1 ); change ( root [ fat ], 1 , cntz , nz , -1 ); } dfs2 ( 1 , 0 ); for ( int i = 1 ; i <= n ; ++ i ) cout << idz [ ans [ i ]] << endl ; return 0 ; } 1 Tag : \u7ebf\u6bb5\u6811\u5408\u5e76 / LCA / \u6811\u4e0a\u5dee\u5206","title":"\\(\\text{Code}\\)"},{"location":"%E9%A2%98%E8%A7%A3/CF1637F/","text":"CF1637F Towers \u00b6 \u6bd4\u8f83\u6709\u610f\u601d\u7684\u4e00\u4e2a\u70b9\u662f\uff0c\u6211\u6628\u5929\u7ed9\u521d\u4e00\u7684\u795e\u4ed9\u8bb2\u4e86\u4e24\u9053\u6362\u6839\uff08CF708C\uff0cuoj105\uff09\uff0c\u987a\u4fbf\u603b\u7ed3\u4e86\u4e2a\u5957\u8def\u3002 \u7136\u540e\u4eca\u5929\u65e9\u4e0a\u6253 VP \u5c31\u9047\u5230\u4e86 =_= \\(\\text{Descrption}\\) \u00b6 You are given a tree which has \\(n\\) vertices with a height \\(h\\) on it. You could put any numbers of tower on vertices, and you could choose the value of the tower \\(e\\) . If vertex \\(x\\) is on the path of \\((u,v)\\) ,and \\(e_u,e_v\\) satisfy \\(\\min(e_u,e_v) \\ge h_x\\) , we call vertex \\(x\\) is good. Your goal is to let all vertex become good vertex,and minumim your cost. If you put a tower and its \\(e=value\\) , then your total cost will be added \\(value\\) . \\(\\text{Solution}\\) \u00b6 \u9996\u5148\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u7ed3\u8bba\uff0c\u5982\u679c\u5047\u5b9a\u4e86\u6811\u7684\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u6bcf\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u90fd\u5fc5\u987b\u653e\u4e00\u4e2a tower\u3002 \u7136\u540e\u53c8\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u7ed3\u8bba\uff0c\u5728\u5047\u5b9a\u4e86\u6839\u8282\u70b9\u7684\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u8282\u70b9 \\(u\\) \u662f\u6709\u4fe1\u53f7\u7684\u7684\uff0c\u90a3\u4e48 \\(u\\) \u7684\u5b50\u6811\u5f53\u4e2d\u5fc5\u7136\u6709\u81f3\u5c11\u4e00\u4e2a tower\uff0c\u6ee1\u8db3\u8fd9\u4e2a tower \u7684 \\(e\\ge h_u\\) \u3002 \u4e0a\u9762\u7684\u7ed3\u8bba\u5168\u90e8\u57fa\u4e8e \u201c\u6839\u8282\u70b9\u5047\u5b9a\u201d \u7684\u60c5\u51b5\u3002 \u4f46\u662f\u672c\u9898\u7ed9\u51fa\u7684\u660e\u663e\u662f\u4e00\u9897\u65e0\u6839\u6811\uff0c\u6240\u4ee5\u6211\u4eec\u5f88\u81ea\u7136\u7684\u60f3\u5230\u4e86\u6362\u6839DP\u3002 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8bbe \\(f_u\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u8282\u70b9\u7684\u65f6\u5019\uff0c\u4f7f\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u53d8\u6210\u6709\u4fe1\u53f7\u7684\u8282\u70b9\u7684\u6700\u5c0f\u82b1\u8d39\u3002 \u7136\u540e\u53d1\u73b0\u8fd9\u4e2a\u6362\u6839\u4e0d\u662f\u5f88\u597d\u5199\u3002 \u53c8\u53d1\u73b0\uff0c\u5982\u679c\u8ba9 \\(h\\) \u6700\u5927\u7684\u90a3\u4e00\u4e2a\uff08\u6216\u8005\u5176\u4e2d\u7684\u4e00\u4e2a\uff09\u4f5c\u4e3a\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u5f80\u4e0b\u53d6\u503c\u4e00\u5b9a\u662f\u6700\u4f18\u7684\u3002 \u56e0\u4e3a\u4f60\u73b0\u5728\u8981\u505a\u7684\u5c31\u662f\u8ba9\u6bcf\u4e2a\u5b50\u6811\u5f53\u4e2d\u90fd\u6709\u4e00\u4e2a \\(e\\) \u5927\u4e8e\u7b49\u4e8e\u8fd9\u4e2a\u5b50\u6811\u7684\u6839\u7684 \\(h\\) \u7684 tower\u3002 \u7136\u540e\u5bf9\u4e8e\u6839\u8282\u70b9\uff0c\u53ea\u9700\u8981\u8ba9\u5b83\u7684\u4e24\u4e2a\u4e92\u4e0d\u76f8\u540c\u7684\u5b50\u6811\u5f53\u4e2d\u6709\u4e24\u4e2a tower \u7684 \\(e=h_{root}\\) \u5373\u53ef\u3002 \u5982\u679c\u8bf4\u8fd9\u4e2a \\(h\\) \u6700\u5927\u7684\u70b9\u4e0d\u662f \\(root\\) \uff0c\u90a3\u4e48\u5b83\u5c31\u4f1a\u5728\u67d0\u4e2a\u5b50\u6811\u91cc\u9762\uff0c\u5c31\u4f1a\u5bfc\u81f4\u5b50\u6811\u91cc\u9700\u8981\u591a\u653e\u51e0\u4e2a \\(e=h_{max}\\) \u7684 tower\uff0c\u660e\u663e\u4e0d\u662f\u6700\u4f18\u7684\u3002 \u6240\u4ee5\u6211\u4eec\u5c31\u76f4\u63a5\u4ee4\u8fd9\u4e2a \\(h\\) \u6700\u5927\u7684\u70b9\u4e3a \\(root\\) \uff0c\u7136\u540e\u9012\u5f52\u4e0b\u53bb\u5904\u7406\u5c31\u884c\u4e86\u3002 \\(\\text{Code}\\) \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int inf = 1e18 + 1 , si = 2e5 + 10 ; int n , height [ si ], res ; struct Edge { int head , ver , Next ; } e [ si << 1 ]; int tot = 0 , root = 0 , rt [ si ]; inline void add ( int u , int v ){ e [ ++ tot ]. ver = v , e [ tot ]. Next = e [ u ]. head , e [ u ]. head = tot ; } inline pair < int , int > dfs ( int u , int fa ){ int max1 , max2 ; max1 = max2 = 0 ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( v == fa ) continue ; int now = dfs ( v , u ). first ; if ( now > max1 ) max2 = max ( max2 , max1 ), max1 = now ; else max2 = max ( max2 , now ); } if ( fa != 0 ) res += max ( height [ u ] - max1 , 0l l ), max1 += max ( height [ u ] - max1 , 0l l ); else res += max ( height [ u ] - max1 , 0l l ) + max ( height [ u ] - max2 , 0l l ); return make_pair ( max1 , max2 ); } signed main (){ scanf ( \"%lld\" , & n ); for ( register int i = 1 ; i <= n ; ++ i ) scanf ( \"%lld\" , & height [ i ]); for ( register int i = 1 , u , v ; i < n ; ++ i ) scanf ( \"%lld%lld\" , & u , & v ), add ( u , v ), add ( v , u ); for ( register int i = 1 ; i <= n ; ++ i ) root = height [ i ] > height [ root ] ? i : root ; dfs ( root , 0 ); return printf ( \"%lld \\n \" , res ), 0 ; // } 1 Tag : \u6811 / \u6811\u5f62DP / \u6362\u6839DP","title":"CF1637F"},{"location":"%E9%A2%98%E8%A7%A3/CF1637F/#cf1637f-towers","text":"\u6bd4\u8f83\u6709\u610f\u601d\u7684\u4e00\u4e2a\u70b9\u662f\uff0c\u6211\u6628\u5929\u7ed9\u521d\u4e00\u7684\u795e\u4ed9\u8bb2\u4e86\u4e24\u9053\u6362\u6839\uff08CF708C\uff0cuoj105\uff09\uff0c\u987a\u4fbf\u603b\u7ed3\u4e86\u4e2a\u5957\u8def\u3002 \u7136\u540e\u4eca\u5929\u65e9\u4e0a\u6253 VP \u5c31\u9047\u5230\u4e86 =_=","title":"CF1637F Towers"},{"location":"%E9%A2%98%E8%A7%A3/CF1637F/#textdescrption","text":"You are given a tree which has \\(n\\) vertices with a height \\(h\\) on it. You could put any numbers of tower on vertices, and you could choose the value of the tower \\(e\\) . If vertex \\(x\\) is on the path of \\((u,v)\\) ,and \\(e_u,e_v\\) satisfy \\(\\min(e_u,e_v) \\ge h_x\\) , we call vertex \\(x\\) is good. Your goal is to let all vertex become good vertex,and minumim your cost. If you put a tower and its \\(e=value\\) , then your total cost will be added \\(value\\) .","title":"\\(\\text{Descrption}\\)"},{"location":"%E9%A2%98%E8%A7%A3/CF1637F/#textsolution","text":"\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u7ed3\u8bba\uff0c\u5982\u679c\u5047\u5b9a\u4e86\u6811\u7684\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u6bcf\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u90fd\u5fc5\u987b\u653e\u4e00\u4e2a tower\u3002 \u7136\u540e\u53c8\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u7ed3\u8bba\uff0c\u5728\u5047\u5b9a\u4e86\u6839\u8282\u70b9\u7684\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u8282\u70b9 \\(u\\) \u662f\u6709\u4fe1\u53f7\u7684\u7684\uff0c\u90a3\u4e48 \\(u\\) \u7684\u5b50\u6811\u5f53\u4e2d\u5fc5\u7136\u6709\u81f3\u5c11\u4e00\u4e2a tower\uff0c\u6ee1\u8db3\u8fd9\u4e2a tower \u7684 \\(e\\ge h_u\\) \u3002 \u4e0a\u9762\u7684\u7ed3\u8bba\u5168\u90e8\u57fa\u4e8e \u201c\u6839\u8282\u70b9\u5047\u5b9a\u201d \u7684\u60c5\u51b5\u3002 \u4f46\u662f\u672c\u9898\u7ed9\u51fa\u7684\u660e\u663e\u662f\u4e00\u9897\u65e0\u6839\u6811\uff0c\u6240\u4ee5\u6211\u4eec\u5f88\u81ea\u7136\u7684\u60f3\u5230\u4e86\u6362\u6839DP\u3002 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8bbe \\(f_u\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u8282\u70b9\u7684\u65f6\u5019\uff0c\u4f7f\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u53d8\u6210\u6709\u4fe1\u53f7\u7684\u8282\u70b9\u7684\u6700\u5c0f\u82b1\u8d39\u3002 \u7136\u540e\u53d1\u73b0\u8fd9\u4e2a\u6362\u6839\u4e0d\u662f\u5f88\u597d\u5199\u3002 \u53c8\u53d1\u73b0\uff0c\u5982\u679c\u8ba9 \\(h\\) \u6700\u5927\u7684\u90a3\u4e00\u4e2a\uff08\u6216\u8005\u5176\u4e2d\u7684\u4e00\u4e2a\uff09\u4f5c\u4e3a\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u5f80\u4e0b\u53d6\u503c\u4e00\u5b9a\u662f\u6700\u4f18\u7684\u3002 \u56e0\u4e3a\u4f60\u73b0\u5728\u8981\u505a\u7684\u5c31\u662f\u8ba9\u6bcf\u4e2a\u5b50\u6811\u5f53\u4e2d\u90fd\u6709\u4e00\u4e2a \\(e\\) \u5927\u4e8e\u7b49\u4e8e\u8fd9\u4e2a\u5b50\u6811\u7684\u6839\u7684 \\(h\\) \u7684 tower\u3002 \u7136\u540e\u5bf9\u4e8e\u6839\u8282\u70b9\uff0c\u53ea\u9700\u8981\u8ba9\u5b83\u7684\u4e24\u4e2a\u4e92\u4e0d\u76f8\u540c\u7684\u5b50\u6811\u5f53\u4e2d\u6709\u4e24\u4e2a tower \u7684 \\(e=h_{root}\\) \u5373\u53ef\u3002 \u5982\u679c\u8bf4\u8fd9\u4e2a \\(h\\) \u6700\u5927\u7684\u70b9\u4e0d\u662f \\(root\\) \uff0c\u90a3\u4e48\u5b83\u5c31\u4f1a\u5728\u67d0\u4e2a\u5b50\u6811\u91cc\u9762\uff0c\u5c31\u4f1a\u5bfc\u81f4\u5b50\u6811\u91cc\u9700\u8981\u591a\u653e\u51e0\u4e2a \\(e=h_{max}\\) \u7684 tower\uff0c\u660e\u663e\u4e0d\u662f\u6700\u4f18\u7684\u3002 \u6240\u4ee5\u6211\u4eec\u5c31\u76f4\u63a5\u4ee4\u8fd9\u4e2a \\(h\\) \u6700\u5927\u7684\u70b9\u4e3a \\(root\\) \uff0c\u7136\u540e\u9012\u5f52\u4e0b\u53bb\u5904\u7406\u5c31\u884c\u4e86\u3002","title":"\\(\\text{Solution}\\)"},{"location":"%E9%A2%98%E8%A7%A3/CF1637F/#textcode","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int inf = 1e18 + 1 , si = 2e5 + 10 ; int n , height [ si ], res ; struct Edge { int head , ver , Next ; } e [ si << 1 ]; int tot = 0 , root = 0 , rt [ si ]; inline void add ( int u , int v ){ e [ ++ tot ]. ver = v , e [ tot ]. Next = e [ u ]. head , e [ u ]. head = tot ; } inline pair < int , int > dfs ( int u , int fa ){ int max1 , max2 ; max1 = max2 = 0 ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( v == fa ) continue ; int now = dfs ( v , u ). first ; if ( now > max1 ) max2 = max ( max2 , max1 ), max1 = now ; else max2 = max ( max2 , now ); } if ( fa != 0 ) res += max ( height [ u ] - max1 , 0l l ), max1 += max ( height [ u ] - max1 , 0l l ); else res += max ( height [ u ] - max1 , 0l l ) + max ( height [ u ] - max2 , 0l l ); return make_pair ( max1 , max2 ); } signed main (){ scanf ( \"%lld\" , & n ); for ( register int i = 1 ; i <= n ; ++ i ) scanf ( \"%lld\" , & height [ i ]); for ( register int i = 1 , u , v ; i < n ; ++ i ) scanf ( \"%lld%lld\" , & u , & v ), add ( u , v ), add ( v , u ); for ( register int i = 1 ; i <= n ; ++ i ) root = height [ i ] > height [ root ] ? i : root ; dfs ( root , 0 ); return printf ( \"%lld \\n \" , res ), 0 ; // } 1 Tag : \u6811 / \u6811\u5f62DP / \u6362\u6839DP","title":"\\(\\text{Code}\\)"},{"location":"%E9%A2%98%E8%A7%A3/CF1651E/","text":"CF1651E Sum of Matchings \u00b6 \\(\\text{Description}\\) \u00b6 \u5b9a\u4e49\u4e00\u5f20\u56fe \\(G\\) \u7684\u6700\u5927\u5339\u914d\u5f53\u4e2d\u7684\u8fb9\u6570\u662f \\(MM(G)\\) \u3002 \u7ed9\u4f60\u4e00\u5f20\u4e8c\u5206\u56fe\uff0c\u5de6\u90e8\u8282\u70b9\u7f16\u53f7 \\(1 \\sim n\\) \uff0c\u53f3\u90e8\u8282\u70b9\u7f16\u53f7 \\(n+1 \\sim 2n\\) \uff0c\u4fdd\u8bc1\u6bcf\u4e2a\u8282\u70b9\u7684 \u5ea6\u6570\u5fc5\u7136\u4e3a \\(2\\) \u3002 \u8bbe \\(G(l,r,L,R)\\) \u8868\u793a\u5de6\u90e8\u8282\u70b9\u7f16\u53f7\u5728 \\([l,r]\\) \uff0c\u53f3\u90e8\u8282\u70b9\u7f16\u53f7\u5728 \\([L,R]\\) \u4e4b\u95f4\u7684\u8282\u70b9\u548c\u4ed6\u4eec\u76f8\u5173\u7684\u8fb9\u7ec4\u6210\u7684\u5bfc\u51fa\u5b50\u56fe\u3002 \u6c42 \\(\\sum MM(G(l,r,L,R))\\) \uff0c\u4fdd\u8bc1 \\(2\\le n\\le 1500\\) \u3002 \\(\\text{Solution}\\) \u00b6 \u8003\u8651\u6574\u5f20\u56fe\u7684\u5f62\u6001\uff0c\u56e0\u4e3a\u662f\u4e8c\u5206\u56fe\uff08\u4e0d\u542b\u5947\u73af\uff09\uff0c\u4e14\u6bcf\u4e2a\u8282\u70b9\u7684\u5ea6\u6570\u5fc5\u7136\u662f \\(2\\) \u3002 \u90a3\u4e48\u8fd9\u5f20\u56fe\u5fc5\u7136\u5168\u90e8\u7531\u4e00\u4e9b\u7b80\u5355\u73af\u7ec4\u6210\uff0c\u4e14\u8fd9\u4e9b\u7b80\u5355\u73af\u90fd\u662f\u5076\u73af\u3002 \u8003\u8651\u4e00\u4e2a\u5076\u73af \\(R\\) \u5982\u679c\u88ab\u5305\u542b\u5728\u4e00\u4e2a\u5bfc\u51fa\u5b50\u56fe \\(G\\prime\\) \u5f53\u4e2d\uff0c\u4ed6\u80fd\u5bf9 \\(MM(G\\prime)\\) \u505a\u7684\u8d21\u732e\u662f\u4ec0\u4e48\u3002 \u663e\u7136\u662f \\(\\lceil\\dfrac{edge}{2}\\rceil\\) \uff0c \\(edge\\) \u662f\u8fd9\u4e2a\u5076\u73af \\(R\\) \u5305\u542b\u7684\u8fb9\u6570\uff0c\u8fd9\u4e2a\u7528\u7c7b\u4f3c\u5308\u7259\u5229\u7b97\u6cd5\u7684\u601d\u60f3\u5373\u53ef\u5f97\u5230\u3002 \u90a3\u4e48\u8fd9\u4e2a\u5076\u73af \\(R\\) \u5fc5\u7136\u4f1a\u88ab\u4e00\u5806\u5b50\u56fe\u6240\u5305\u542b\uff0c\u8bbe\u8fd9\u6837\u7684\u5b50\u56fe\u6570\u91cf\u662f \\(cnt\\) \uff0c\u90a3\u4e48\u4ed6\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u5c31\u662f \\(\\lceil\\dfrac{edge}{2}\\rceil\\times cnt\\) \u3002 \\(cnt\\) \u4e5f\u6bd4\u8f83\u597d\u7b97\uff0c\u8bb0\u5f55\u5076\u73af\u4e0a\u5c5e\u4e8e\u5de6\u90e8\u548c\u53f3\u90e8\u5206\u522b\u7684\u8282\u70b9\u7f16\u53f7\u6700\u5927\u6700\u5c0f\u503c \\(Lmax,Lmin,Rmax,Rmin\\) \uff08\u53f3\u90e8\u7684\u7b97\u5b8c\u4e4b\u540e\u8981\u51cf\u53bb \\(n\\) \uff09\u3002 \u90a3 \\(cnt\\) \u5c31\u5e94\u8be5\u662f\uff1a \\(Lmin\\times(n-Lmax+1)\\times Rmin\\times(n-Rmax+1)\\) \u3002 \u5c31\u662f\u4e58\u6cd5\u539f\u7406\u3002 \u4f46\u662f\u8fd8\u8981\u8003\u8651\u53e6\u5916\u7684\u4e00\u79cd\u60c5\u51b5\uff0c\u5982\u679c\u88ab\u8fd9\u4e2a\u5b50\u56fe\u5305\u542b\u7684\u4e0d\u662f\u8fd9\u4e2a\u5076\u73af\uff0c\u800c\u662f\u8fd9\u4e2a\u5076\u73af\u4e0a\u7684\u4e00\u6761\u94fe \\((u,v)\\) \u3002 \u90a3\u4e48\u8fd9\u6761\u94fe \\((u,v)\\) \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5305\u542b\u5b83\u7684\u5b50\u56fe\u7684 \\(MM\\) \u7684\u8d21\u732e\u5fc5\u7136\u4ecd\u65e7\u662f \\(\\lceil\\dfrac{edge}{2}\\rceil\\) \uff0c \\(edge\\) \u662f\u8fd9\u6761\u94fe \\((u,v)\\) \u5305\u542b\u7684\u8fb9\u6570\u3002 \u8fd8\u662f\u9700\u8981\u8ba1\u7b97\u4ed6\u88ab\u591a\u5c11\u4e2a\u5b50\u56fe\u5305\u542b\uff0c\u5e76\u8bb0\u5f55\u94fe\u4e0a\u5de6\u90e8\u548c\u53f3\u90e8\u5206\u522b\u7684\u8282\u70b9\u7f16\u53f7\u6700\u5927\u6700\u5c0f\u503c \\(Lmax,Lmin,Rmax,Rmin\\) \uff08\u53f3\u90e8\u7684\u7b97\u5b8c\u4e4b\u540e\u8fd8\u662f\u8981\u51cf\u53bb \\(n\\) \uff09\u3002 \u4f46\u662f\u8fd9\u4e2a\u65f6\u5019\u94fe\u4e0a\u7684\u8282\u70b9\u7f16\u53f7\u5c31\u4e0d\u4e00\u5b9a\u662f\u8fde\u7eed\u7684\u4e86\uff0c\u9700\u8981\u53bb\u6389\u5076\u73af\u5f53\u4e2d\u4e0d\u5728\u8fd9\u4e2a\u94fe\u4e0a\u7684\u8282\u70b9\u3002 \u90a3\u4e48\u5bf9\u4e8e\u5076\u73af \\(R\\) \u53bb\u6389\u8fd9\u4e2a\u94fe \\((u,v)\\) \u4e4b\u540e\u7684\u5230\u7684\u94fe \\(R-(u,v)\\) \u518d\u8bb0\u5f55\u5b83\u7684 \\(Lmax,Lmin,Rmax,Rmin\\) \u5c31\u53ef\u4ee5\u4e86\u3002 \\(\\text{Code}\\) \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 #include <bits/stdc++.h> using namespace std ; using i64 = long long ; constexpr int si = 3e3 + 10 , inf = 0x3f3f3f3f ; int n , vis [ si ]; i64 a [ si ], cur , ans = 0 ; std :: vector < int > G [ si ]; inline int d ( int x ){ return x << 1 ; } inline void dfs ( int u ){ a [ cur ++ ] = u , vis [ u ] = 1 ; for ( auto v : G [ u ]) if ( ! vis [ v ]) dfs ( v ); } inline void add ( int u , int v ){ G [ u ]. push_back ( v ); G [ v ]. push_back ( u ); } int main (){ cin >> n ; for ( register int i = 1 , u , v ; i <= d ( n ); ++ i ) cin >> u >> v , add ( u , v ); for ( register int i = 1 ; i <= d ( n ); ++ i ){ if ( ! G [ i ]. size () || vis [ i ]) continue ; cur = 0 , dfs ( i ); i64 Lmin = inf , Rmin = inf , Lmax = 0 , Rmax = 0 ; // \u5076\u73af\u7684\u60c5\u51b5 for ( register int j = 0 ; j < cur ; ++ j ){ if ( a [ j ] <= n ) Lmin = min ( Lmin , a [ j ]), Lmax = max ( Lmax , a [ j ]); else Rmin = min ( Rmin , a [ j ] - n ), Rmax = max ( Rmax , a [ j ] - n ); } i64 cnt = Lmin * ( n - Lmax + 1 ) * Rmin * ( n - Rmax + 1 ); ans += cnt * ( cur / 2 ); // \u5076\u73af\u4e0a\u7684\u94fe\u7684\u60c5\u51b5 for ( register int u = 0 ; u < cur ; ++ u ){ i64 Lmin = inf , Rmin = inf , Lmax = 0 , Rmax = 0 ; if ( a [ u ] <= n ) Lmin = min ( Lmin , a [ u ]), Lmax = max ( Lmax , a [ u ]); else Rmin = min ( Rmin , a [ u ] - n ), Rmax = max ( Rmax , a [ u ] - n ); int pos = ( u + 1 ) % cur , edge_cnt = 0 ; while ( pos != u ){ edge_cnt ++ ; if ( a [ pos ] <= n ) Lmin = min ( Lmin , a [ pos ]), Lmax = max ( Lmax , a [ pos ]); else Rmin = min ( Rmin , a [ pos ] - n ), Rmax = max ( Rmax , a [ pos ] - n ); int Prev = ( u -1 + cur ) % cur , ff = true ; i64 O_Lmin = 0 , O_Rmin = 0 , O_Lmax = n + 1 , O_Rmax = n + 1 ; if ( a [ Prev ] <= n ){ if ( a [ Prev ] < Lmin ) O_Lmin = max ( O_Lmin , a [ Prev ]); else if ( a [ Prev ] > Lmax ) O_Lmax = min ( O_Lmax , a [ Prev ]); else ff = false ; } else { if ( a [ Prev ] - n < Rmin ) O_Rmin = max ( O_Rmin , a [ Prev ] - n ); else if ( a [ Prev ] - n > Rmax ) O_Rmax = min ( O_Rmax , a [ Prev ] - n ); else ff = false ; } Prev = ( pos + 1 ) % cur ; if ( a [ Prev ] <= n ){ if ( a [ Prev ] < Lmin ) O_Lmin = max ( O_Lmin , a [ Prev ]); else if ( a [ Prev ] > Lmax ) O_Lmax = min ( O_Lmax , a [ Prev ]); else ff = false ; } else { if ( a [ Prev ] - n < Rmin ) O_Rmin = max ( O_Rmin , a [ Prev ] - n ); else if ( a [ Prev ] - n > Rmax ) O_Rmax = min ( O_Rmax , a [ Prev ] - n ); else ff = false ; } if ( ff ) ans += ( Lmin - O_Lmin ) * ( O_Lmax - Lmax ) * ( Rmin - O_Rmin ) * ( O_Rmax - Rmax ) * (( edge_cnt + 1 ) / 2 ); pos = ( pos + 1 ) % cur ; } } } cout << ans << endl ; return 0 ; } 1 Tag : \u601d\u7ef4 / \u8ba1\u6570 / \u4e8c\u5206\u56fe","title":"CF1651E"},{"location":"%E9%A2%98%E8%A7%A3/CF1651E/#cf1651e-sum-of-matchings","text":"","title":"CF1651E Sum of Matchings"},{"location":"%E9%A2%98%E8%A7%A3/CF1651E/#textdescription","text":"\u5b9a\u4e49\u4e00\u5f20\u56fe \\(G\\) \u7684\u6700\u5927\u5339\u914d\u5f53\u4e2d\u7684\u8fb9\u6570\u662f \\(MM(G)\\) \u3002 \u7ed9\u4f60\u4e00\u5f20\u4e8c\u5206\u56fe\uff0c\u5de6\u90e8\u8282\u70b9\u7f16\u53f7 \\(1 \\sim n\\) \uff0c\u53f3\u90e8\u8282\u70b9\u7f16\u53f7 \\(n+1 \\sim 2n\\) \uff0c\u4fdd\u8bc1\u6bcf\u4e2a\u8282\u70b9\u7684 \u5ea6\u6570\u5fc5\u7136\u4e3a \\(2\\) \u3002 \u8bbe \\(G(l,r,L,R)\\) \u8868\u793a\u5de6\u90e8\u8282\u70b9\u7f16\u53f7\u5728 \\([l,r]\\) \uff0c\u53f3\u90e8\u8282\u70b9\u7f16\u53f7\u5728 \\([L,R]\\) \u4e4b\u95f4\u7684\u8282\u70b9\u548c\u4ed6\u4eec\u76f8\u5173\u7684\u8fb9\u7ec4\u6210\u7684\u5bfc\u51fa\u5b50\u56fe\u3002 \u6c42 \\(\\sum MM(G(l,r,L,R))\\) \uff0c\u4fdd\u8bc1 \\(2\\le n\\le 1500\\) \u3002","title":"\\(\\text{Description}\\)"},{"location":"%E9%A2%98%E8%A7%A3/CF1651E/#textsolution","text":"\u8003\u8651\u6574\u5f20\u56fe\u7684\u5f62\u6001\uff0c\u56e0\u4e3a\u662f\u4e8c\u5206\u56fe\uff08\u4e0d\u542b\u5947\u73af\uff09\uff0c\u4e14\u6bcf\u4e2a\u8282\u70b9\u7684\u5ea6\u6570\u5fc5\u7136\u662f \\(2\\) \u3002 \u90a3\u4e48\u8fd9\u5f20\u56fe\u5fc5\u7136\u5168\u90e8\u7531\u4e00\u4e9b\u7b80\u5355\u73af\u7ec4\u6210\uff0c\u4e14\u8fd9\u4e9b\u7b80\u5355\u73af\u90fd\u662f\u5076\u73af\u3002 \u8003\u8651\u4e00\u4e2a\u5076\u73af \\(R\\) \u5982\u679c\u88ab\u5305\u542b\u5728\u4e00\u4e2a\u5bfc\u51fa\u5b50\u56fe \\(G\\prime\\) \u5f53\u4e2d\uff0c\u4ed6\u80fd\u5bf9 \\(MM(G\\prime)\\) \u505a\u7684\u8d21\u732e\u662f\u4ec0\u4e48\u3002 \u663e\u7136\u662f \\(\\lceil\\dfrac{edge}{2}\\rceil\\) \uff0c \\(edge\\) \u662f\u8fd9\u4e2a\u5076\u73af \\(R\\) \u5305\u542b\u7684\u8fb9\u6570\uff0c\u8fd9\u4e2a\u7528\u7c7b\u4f3c\u5308\u7259\u5229\u7b97\u6cd5\u7684\u601d\u60f3\u5373\u53ef\u5f97\u5230\u3002 \u90a3\u4e48\u8fd9\u4e2a\u5076\u73af \\(R\\) \u5fc5\u7136\u4f1a\u88ab\u4e00\u5806\u5b50\u56fe\u6240\u5305\u542b\uff0c\u8bbe\u8fd9\u6837\u7684\u5b50\u56fe\u6570\u91cf\u662f \\(cnt\\) \uff0c\u90a3\u4e48\u4ed6\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u5c31\u662f \\(\\lceil\\dfrac{edge}{2}\\rceil\\times cnt\\) \u3002 \\(cnt\\) \u4e5f\u6bd4\u8f83\u597d\u7b97\uff0c\u8bb0\u5f55\u5076\u73af\u4e0a\u5c5e\u4e8e\u5de6\u90e8\u548c\u53f3\u90e8\u5206\u522b\u7684\u8282\u70b9\u7f16\u53f7\u6700\u5927\u6700\u5c0f\u503c \\(Lmax,Lmin,Rmax,Rmin\\) \uff08\u53f3\u90e8\u7684\u7b97\u5b8c\u4e4b\u540e\u8981\u51cf\u53bb \\(n\\) \uff09\u3002 \u90a3 \\(cnt\\) \u5c31\u5e94\u8be5\u662f\uff1a \\(Lmin\\times(n-Lmax+1)\\times Rmin\\times(n-Rmax+1)\\) \u3002 \u5c31\u662f\u4e58\u6cd5\u539f\u7406\u3002 \u4f46\u662f\u8fd8\u8981\u8003\u8651\u53e6\u5916\u7684\u4e00\u79cd\u60c5\u51b5\uff0c\u5982\u679c\u88ab\u8fd9\u4e2a\u5b50\u56fe\u5305\u542b\u7684\u4e0d\u662f\u8fd9\u4e2a\u5076\u73af\uff0c\u800c\u662f\u8fd9\u4e2a\u5076\u73af\u4e0a\u7684\u4e00\u6761\u94fe \\((u,v)\\) \u3002 \u90a3\u4e48\u8fd9\u6761\u94fe \\((u,v)\\) \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5305\u542b\u5b83\u7684\u5b50\u56fe\u7684 \\(MM\\) \u7684\u8d21\u732e\u5fc5\u7136\u4ecd\u65e7\u662f \\(\\lceil\\dfrac{edge}{2}\\rceil\\) \uff0c \\(edge\\) \u662f\u8fd9\u6761\u94fe \\((u,v)\\) \u5305\u542b\u7684\u8fb9\u6570\u3002 \u8fd8\u662f\u9700\u8981\u8ba1\u7b97\u4ed6\u88ab\u591a\u5c11\u4e2a\u5b50\u56fe\u5305\u542b\uff0c\u5e76\u8bb0\u5f55\u94fe\u4e0a\u5de6\u90e8\u548c\u53f3\u90e8\u5206\u522b\u7684\u8282\u70b9\u7f16\u53f7\u6700\u5927\u6700\u5c0f\u503c \\(Lmax,Lmin,Rmax,Rmin\\) \uff08\u53f3\u90e8\u7684\u7b97\u5b8c\u4e4b\u540e\u8fd8\u662f\u8981\u51cf\u53bb \\(n\\) \uff09\u3002 \u4f46\u662f\u8fd9\u4e2a\u65f6\u5019\u94fe\u4e0a\u7684\u8282\u70b9\u7f16\u53f7\u5c31\u4e0d\u4e00\u5b9a\u662f\u8fde\u7eed\u7684\u4e86\uff0c\u9700\u8981\u53bb\u6389\u5076\u73af\u5f53\u4e2d\u4e0d\u5728\u8fd9\u4e2a\u94fe\u4e0a\u7684\u8282\u70b9\u3002 \u90a3\u4e48\u5bf9\u4e8e\u5076\u73af \\(R\\) \u53bb\u6389\u8fd9\u4e2a\u94fe \\((u,v)\\) \u4e4b\u540e\u7684\u5230\u7684\u94fe \\(R-(u,v)\\) \u518d\u8bb0\u5f55\u5b83\u7684 \\(Lmax,Lmin,Rmax,Rmin\\) \u5c31\u53ef\u4ee5\u4e86\u3002","title":"\\(\\text{Solution}\\)"},{"location":"%E9%A2%98%E8%A7%A3/CF1651E/#textcode","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 #include <bits/stdc++.h> using namespace std ; using i64 = long long ; constexpr int si = 3e3 + 10 , inf = 0x3f3f3f3f ; int n , vis [ si ]; i64 a [ si ], cur , ans = 0 ; std :: vector < int > G [ si ]; inline int d ( int x ){ return x << 1 ; } inline void dfs ( int u ){ a [ cur ++ ] = u , vis [ u ] = 1 ; for ( auto v : G [ u ]) if ( ! vis [ v ]) dfs ( v ); } inline void add ( int u , int v ){ G [ u ]. push_back ( v ); G [ v ]. push_back ( u ); } int main (){ cin >> n ; for ( register int i = 1 , u , v ; i <= d ( n ); ++ i ) cin >> u >> v , add ( u , v ); for ( register int i = 1 ; i <= d ( n ); ++ i ){ if ( ! G [ i ]. size () || vis [ i ]) continue ; cur = 0 , dfs ( i ); i64 Lmin = inf , Rmin = inf , Lmax = 0 , Rmax = 0 ; // \u5076\u73af\u7684\u60c5\u51b5 for ( register int j = 0 ; j < cur ; ++ j ){ if ( a [ j ] <= n ) Lmin = min ( Lmin , a [ j ]), Lmax = max ( Lmax , a [ j ]); else Rmin = min ( Rmin , a [ j ] - n ), Rmax = max ( Rmax , a [ j ] - n ); } i64 cnt = Lmin * ( n - Lmax + 1 ) * Rmin * ( n - Rmax + 1 ); ans += cnt * ( cur / 2 ); // \u5076\u73af\u4e0a\u7684\u94fe\u7684\u60c5\u51b5 for ( register int u = 0 ; u < cur ; ++ u ){ i64 Lmin = inf , Rmin = inf , Lmax = 0 , Rmax = 0 ; if ( a [ u ] <= n ) Lmin = min ( Lmin , a [ u ]), Lmax = max ( Lmax , a [ u ]); else Rmin = min ( Rmin , a [ u ] - n ), Rmax = max ( Rmax , a [ u ] - n ); int pos = ( u + 1 ) % cur , edge_cnt = 0 ; while ( pos != u ){ edge_cnt ++ ; if ( a [ pos ] <= n ) Lmin = min ( Lmin , a [ pos ]), Lmax = max ( Lmax , a [ pos ]); else Rmin = min ( Rmin , a [ pos ] - n ), Rmax = max ( Rmax , a [ pos ] - n ); int Prev = ( u -1 + cur ) % cur , ff = true ; i64 O_Lmin = 0 , O_Rmin = 0 , O_Lmax = n + 1 , O_Rmax = n + 1 ; if ( a [ Prev ] <= n ){ if ( a [ Prev ] < Lmin ) O_Lmin = max ( O_Lmin , a [ Prev ]); else if ( a [ Prev ] > Lmax ) O_Lmax = min ( O_Lmax , a [ Prev ]); else ff = false ; } else { if ( a [ Prev ] - n < Rmin ) O_Rmin = max ( O_Rmin , a [ Prev ] - n ); else if ( a [ Prev ] - n > Rmax ) O_Rmax = min ( O_Rmax , a [ Prev ] - n ); else ff = false ; } Prev = ( pos + 1 ) % cur ; if ( a [ Prev ] <= n ){ if ( a [ Prev ] < Lmin ) O_Lmin = max ( O_Lmin , a [ Prev ]); else if ( a [ Prev ] > Lmax ) O_Lmax = min ( O_Lmax , a [ Prev ]); else ff = false ; } else { if ( a [ Prev ] - n < Rmin ) O_Rmin = max ( O_Rmin , a [ Prev ] - n ); else if ( a [ Prev ] - n > Rmax ) O_Rmax = min ( O_Rmax , a [ Prev ] - n ); else ff = false ; } if ( ff ) ans += ( Lmin - O_Lmin ) * ( O_Lmax - Lmax ) * ( Rmin - O_Rmin ) * ( O_Rmax - Rmax ) * (( edge_cnt + 1 ) / 2 ); pos = ( pos + 1 ) % cur ; } } } cout << ans << endl ; return 0 ; } 1 Tag : \u601d\u7ef4 / \u8ba1\u6570 / \u4e8c\u5206\u56fe","title":"\\(\\text{Code}\\)"},{"location":"%E9%A2%98%E8%A7%A3/CF713C/","text":"Description \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u957f\u5ea6\u4e3a \\(n\\) \u3002 \u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u628a \\(a\\) \u4e2d\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\u52a0\u4e00\u6216\u8005\u51cf\u4e00\uff0c\u4ee3\u4ef7\u4e3a \\(1\\) \u3002 \u6c42\u4f7f\u5f97\u539f\u5e8f\u5217\u4e25\u683c\u5355\u8c03\u9012\u589e\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002 \\(1\\le n \\le 3\\times10^3, 1\\le a_i \\le 10^9\\) \u3002 Analysis \u00b6 \u672c\u9898\u548c POJ3666 \u5341\u5206\u7c7b\u4f3c\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f\uff0c\u672c\u9898\u8981\u6c42\u7684\u662f\u4e25\u683c\u5355\u8c03\u9012\u589e\uff0c\u800c POJ3666 \u5219\u8981\u6c42\u975e\u4e25\u683c\u5355\u8c03\u9012\u589e\u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u4e00\u4e2a\u7ecf\u5178 Trick\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(a_i\\) \uff0c\u8ba9\u5b83\u51cf\u53bb \\(i\\) \uff0c\u672c\u9898\u7684\u4e25\u683c\u5355\u8c03\u9012\u589e\u5c31\u8f6c\u5316\u4e3a\u4e86\u975e\u4e25\u683c\u5355\u8c03\u9012\u589e\u3002 \u7ecf\u8fc7\u5206\u6790\u4e4b\u540e\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5f15\u7406\uff08\u8f6c\u5316\u4e3a\u975e\u4e25\u683c\u4e4b\u540e\uff09\uff1a Lemma \u00b6 \u8bbe\u6700\u540e\u5f97\u5230\u7684\u5e8f\u5217\u4e3a \\(b\\) \uff0c \\(S_a,S_b\\) \u5206\u522b\u4e3a \\(a,b\\) \u5f53\u4e2d\u51fa\u73b0\u7684\u6240\u6709\u6570\u7ec4\u6210\u7684\u96c6\u5408\u3002 \u5fc5\u7136\u5b58\u5728\u4e00\u7ec4\u6700\u4f18\u89e3\uff0c\u4f7f\u5f97 \\(S_b \\subset S_a\\) \u3002 Proof \u00b6 \u9996\u5148\u53ef\u4ee5\u628a\u95ee\u9898\u8f6c\u5316\u4e3a\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u6784\u9020\u4e00\u4e2a\u975e\u4e25\u683c\u5355\u8c03\u9012\u589e\u7684\u5e8f\u5217 \\(b\\) \uff0c\u4f7f\u5f97 \\(\\sum\\limits_{i=1}^{n} |a_i -b_i|\\) \u6700\u5c0f\u3002 \u8003\u8651\u8fd9\u6837\u7684\u4e00\u5f20\u56fe\uff0c\u5176\u4e2d \\(re\\) \u8868\u793a\u5bf9 \\(a\\) \u6392\u5e8f\u4e4b\u540e\u5f97\u5230\u7684\u5e8f\u5217\uff0c\u6a59\u8272\u70b9\u8868\u793a \\(b\\) \u3002 \u5bf9\u4e8e\u6bcf\u4e2a \\(re_i,re_{i+1}\\) \uff0c\u628a\u6240\u6709\u5728 \\([re_i,re_{i+1}]\\) \u8fd9\u4e2a\u533a\u95f4\u7684 \\(b\\) \u90fd\u627e\u51fa\u6765\uff08\u4e0a\u56fe\u88ab\u6846\u8d77\u6765\u7684\u90e8\u5206\uff09\u3002 \u7edf\u8ba1 \\(b_i\\) \u5bf9\u5e94\u7684 \\(a_i\\) \u5927\u4e8e\u7b49\u4e8e \\(re_{i+1}\\) \u7684\u4e2a\u6570 \\(y\\) \uff0c\u5c0f\u4e8e\u7b49\u4e8e \\(re_i\\) \u7684\u4e2a\u6570 \\(x\\) \u3002 \u5982\u679c \\(x > y\\) \uff0c\u90a3\u4e48\u628a\u88ab\u6846\u8d77\u6765\u7684\u8fd9\u90e8\u5206\u6574\u4f53\u5411\u4e0b\u5e73\u79fb \\(d\\) \u4e2a\u5355\u4f4d\uff0c\u4f7f\u5f97\u5b83\u4eec\u5f53\u4e2d\u7684\u6700\u4f4e\u70b9\u7b49\u4e8e \\(re_i\\) \uff0c\u603b\u4ee3\u4ef7\u5c31\u4f1a\u589e\u52a0 \\(d(y-x)\\) \uff0c\u56e0\u4e3a \\(x >y\\) \uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u603b\u4ee3\u4ef7\u4f1a\u51cf\u5c0f\uff0c\u5c31\u4f1a\u66f4\u4f18\u3002 \\(x < y\\) \u7684\u65f6\u5019\u540c\u7406\uff0c \\(x=y\\) \u7684\u65f6\u5019\u4efb\u610f\u9009\u4e00\u4e2a\u65b9\u5f0f\u5e73\u79fb\u5373\u53ef\u3002 \u5f52\u7eb3\u4e4b\u540e\u53ef\u4ee5\u53d1\u73b0\uff0c\u4efb\u4f55\u4e00\u4e2a \\(b_i\\) \uff0c\u53ea\u8981\u5b83\u4e0d\u5c5e\u4e8e \\(S_a\\) \uff0c\u603b\u662f\u53ef\u4ee5\u628a\u5b83\u53d8\u6210 \\(S_a\\) \u5f53\u4e2d\u7684\u67d0\u4e00\u4e2a\u6570\uff0c\u4e14\u6700\u7ec8\u7b54\u6848\u4e0d\u4f1a\u66f4\u52a3\u3002 \u5f15\u7406\u5f97\u8bc1\u3002 Method \u00b6 \u6839\u636e\u5f15\u7406\u4ee5\u53ca\u5176\u8bc1\u660e\u8fc7\u7a0b\uff0c\u4e0d\u96be\u60f3\u5230\u4e00\u4e2a DP \u72b6\u6001\uff1a \u8bbe \\(dp_{i,j}\\) \u8868\u793a\uff0c\u8003\u8651\u4f7f \\(a_1 \\sim a_i\\) \u5168\u90e8\u6ee1\u8db3\u6761\u4ef6\uff0c\u4e14\u4f7f \\(a_i\\) \u53d8\u4e3a \\(re_j\\) \u65f6\u7684\u72b6\u6001\u96c6\u5408\u3002 \\(dp_{i,j}\\) \u7684\u5c5e\u6027\u662f\uff1a\u201c\u603b\u4ee3\u4ef7\u7684\u6700\u5c0f\u503c\u201d\u3002 \u6700\u7ec8\u7b54\u6848\u662f\u6240\u6709 \\(dp_{n,i}\\) \u7684\u6700\u5c0f\u503c\uff0c\u5176\u4e2d \\(i \\in [1, n]\\) \u3002 \u8003\u8651\u4ece\u201c\u4e0a\u4e00\u6b21\u51b3\u7b56\u201d\u8fdb\u884c\u8f6c\u79fb\uff08\u5373\u662f\u679a\u4e3e\u4e0a\u4e00\u6b21\u51b3\u7b56\u9009\u4e86\u4ec0\u4e48\uff09\uff0c\u53ef\u4ee5\u5c06\u72b6\u6001\u96c6\u5408\u5212\u5206\u5982\u4e0b\uff1a \u90a3\u4e48\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u65b9\u7a0b\uff1a \\[dp_{i,j} = \\min\\limits_{0\\le k \\le j}\\{dp_{i-1,k}\\} + |a_i - re_j|\\] \u5199\u51fa\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 memset ( dp , 0x3f , sizeof dp ), dp [ 0 ][ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { for ( int k = 0 ; k <= j ; ++ k ) { dp [ i ][ j ] = min ( dp [ i ][ j ], dp [ i - 1 ][ k ]); dp [ i ][ j ] += abs ( a [ i ] - re [ j ]); } // \u56e0\u4e3a\u521d\u59cb\u5316\u53ea\u521d\u59cb\u5316\u4e86 dp[0][0]\uff0c\u6240\u4ee5 k \u8981\u4ece 0 \u5f00\u59cb\u3002 // \u5426\u5219\u4ece dp[1][1] \u5f00\u59cb\u7684 dp \u503c\u5c31\u4e0d\u4f1a\u88ab\u66f4\u65b0\uff0c\u4f1a\u5f97\u5230\u9519\u8bef\u7684\u7b54\u6848\u3002 } } \u590d\u6742\u5ea6\u662f \\(\\text{O}(n^3)\\) \u7684\uff0c\u9700\u8981\u4f18\u5316\u3002 \u74f6\u9888\u5728\u4e8e\u6bcf\u6b21\u679a\u4e3e \\(k\\) \u6c42\u51fa \\(dp_{i - 1,k}\\) \u7684\u201c\u5019\u9009\u96c6\u5408\u201d\u4e2d\u7684\u6700\u5c0f\u503c\u3002 \u53d1\u73b0\u5f53\u5916\u5c42\u5faa\u73af\u7684 \\(i\\) \u56fa\u5b9a\uff0c \\(j\\) \u6bcf\u6b21\u589e\u5927 \\(1\\) \u7684\u65f6\u5019\uff0c \\(dp_{i-1,k}\\) \u7684\u5019\u9009\u96c6\u5408\u53ea\u4f1a\u65b0\u52a0\u5165\u4e00\u4e2a\u503c\uff1a \\(dp_{i-1,j}\\) \u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u5f53\u524d\u5019\u9009\u96c6\u5408\u5f53\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u6bcf\u6b21\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf\u8fdb\u884c\u8f6c\u79fb\u3002 \u90a3\u4e48\u6bcf\u6b21\u8f6c\u79fb\u7684\u590d\u6742\u5ea6\u5c31\u4ece \\(\\text{O}(n)\\) \u4f18\u5316\u5230\u4e86 \\(\\text{O}(1)\\) \uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u53d8\u4e3a \\(\\text{O}(n^2)\\) \uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 int main () { cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { cin >> a [ i ]; a [ i ] -= i , re [ i ] = a [ i ]; } sort ( re + 1 , re + 1 + n ); // \u521d\u59cb\u5316\u5199\u6cd5\u548c n^3 \u505a\u6cd5\u7565\u6709\u4e0d\u540c\uff0c\u4f46\u672c\u8d28\u4e00\u6837\u3002 for ( int i = 1 ; i <= n ; ++ i ) { dp [ 1 ][ i ] = abs ( a [ 1 ] - re [ i ]); } for ( int i = 2 ; i <= n ; ++ i ) { i64 minv = 2e18 ; for ( int j = 1 ; j <= n ; ++ j ) { minv = min ( minv , dp [ i - 1 ][ j ]); dp [ i ][ j ] = minv + abs ( a [ i ] - re [ j ]); } } i64 res = 2e18 ; for ( int i = 1 ; i <= n ; ++ i ) { res = min ( res , dp [ n ][ i ]); } cout << res << endl ; return 0 ; } \u5f53\u7136\uff0c\u5b9e\u9645\u4e0a\u53ef\u4ee5\u5bf9 \\(re\\) \u8fdb\u884c\u4e00\u6b21\u53bb\u91cd\uff0c\u8fd9\u6837\u590d\u6742\u5ea6\u53ef\u4ee5\u964d\u5230 \\(\\text{O}(n \\times |S_a|)\\) \u3002","title":"CF713C"},{"location":"%E9%A2%98%E8%A7%A3/CF713C/#description","text":"\u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u957f\u5ea6\u4e3a \\(n\\) \u3002 \u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u628a \\(a\\) \u4e2d\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\u52a0\u4e00\u6216\u8005\u51cf\u4e00\uff0c\u4ee3\u4ef7\u4e3a \\(1\\) \u3002 \u6c42\u4f7f\u5f97\u539f\u5e8f\u5217\u4e25\u683c\u5355\u8c03\u9012\u589e\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002 \\(1\\le n \\le 3\\times10^3, 1\\le a_i \\le 10^9\\) \u3002","title":"Description"},{"location":"%E9%A2%98%E8%A7%A3/CF713C/#analysis","text":"\u672c\u9898\u548c POJ3666 \u5341\u5206\u7c7b\u4f3c\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f\uff0c\u672c\u9898\u8981\u6c42\u7684\u662f\u4e25\u683c\u5355\u8c03\u9012\u589e\uff0c\u800c POJ3666 \u5219\u8981\u6c42\u975e\u4e25\u683c\u5355\u8c03\u9012\u589e\u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u4e00\u4e2a\u7ecf\u5178 Trick\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(a_i\\) \uff0c\u8ba9\u5b83\u51cf\u53bb \\(i\\) \uff0c\u672c\u9898\u7684\u4e25\u683c\u5355\u8c03\u9012\u589e\u5c31\u8f6c\u5316\u4e3a\u4e86\u975e\u4e25\u683c\u5355\u8c03\u9012\u589e\u3002 \u7ecf\u8fc7\u5206\u6790\u4e4b\u540e\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5f15\u7406\uff08\u8f6c\u5316\u4e3a\u975e\u4e25\u683c\u4e4b\u540e\uff09\uff1a","title":"Analysis"},{"location":"%E9%A2%98%E8%A7%A3/CF713C/#lemma","text":"\u8bbe\u6700\u540e\u5f97\u5230\u7684\u5e8f\u5217\u4e3a \\(b\\) \uff0c \\(S_a,S_b\\) \u5206\u522b\u4e3a \\(a,b\\) \u5f53\u4e2d\u51fa\u73b0\u7684\u6240\u6709\u6570\u7ec4\u6210\u7684\u96c6\u5408\u3002 \u5fc5\u7136\u5b58\u5728\u4e00\u7ec4\u6700\u4f18\u89e3\uff0c\u4f7f\u5f97 \\(S_b \\subset S_a\\) \u3002","title":"Lemma"},{"location":"%E9%A2%98%E8%A7%A3/CF713C/#proof","text":"\u9996\u5148\u53ef\u4ee5\u628a\u95ee\u9898\u8f6c\u5316\u4e3a\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u6784\u9020\u4e00\u4e2a\u975e\u4e25\u683c\u5355\u8c03\u9012\u589e\u7684\u5e8f\u5217 \\(b\\) \uff0c\u4f7f\u5f97 \\(\\sum\\limits_{i=1}^{n} |a_i -b_i|\\) \u6700\u5c0f\u3002 \u8003\u8651\u8fd9\u6837\u7684\u4e00\u5f20\u56fe\uff0c\u5176\u4e2d \\(re\\) \u8868\u793a\u5bf9 \\(a\\) \u6392\u5e8f\u4e4b\u540e\u5f97\u5230\u7684\u5e8f\u5217\uff0c\u6a59\u8272\u70b9\u8868\u793a \\(b\\) \u3002 \u5bf9\u4e8e\u6bcf\u4e2a \\(re_i,re_{i+1}\\) \uff0c\u628a\u6240\u6709\u5728 \\([re_i,re_{i+1}]\\) \u8fd9\u4e2a\u533a\u95f4\u7684 \\(b\\) \u90fd\u627e\u51fa\u6765\uff08\u4e0a\u56fe\u88ab\u6846\u8d77\u6765\u7684\u90e8\u5206\uff09\u3002 \u7edf\u8ba1 \\(b_i\\) \u5bf9\u5e94\u7684 \\(a_i\\) \u5927\u4e8e\u7b49\u4e8e \\(re_{i+1}\\) \u7684\u4e2a\u6570 \\(y\\) \uff0c\u5c0f\u4e8e\u7b49\u4e8e \\(re_i\\) \u7684\u4e2a\u6570 \\(x\\) \u3002 \u5982\u679c \\(x > y\\) \uff0c\u90a3\u4e48\u628a\u88ab\u6846\u8d77\u6765\u7684\u8fd9\u90e8\u5206\u6574\u4f53\u5411\u4e0b\u5e73\u79fb \\(d\\) \u4e2a\u5355\u4f4d\uff0c\u4f7f\u5f97\u5b83\u4eec\u5f53\u4e2d\u7684\u6700\u4f4e\u70b9\u7b49\u4e8e \\(re_i\\) \uff0c\u603b\u4ee3\u4ef7\u5c31\u4f1a\u589e\u52a0 \\(d(y-x)\\) \uff0c\u56e0\u4e3a \\(x >y\\) \uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u603b\u4ee3\u4ef7\u4f1a\u51cf\u5c0f\uff0c\u5c31\u4f1a\u66f4\u4f18\u3002 \\(x < y\\) \u7684\u65f6\u5019\u540c\u7406\uff0c \\(x=y\\) \u7684\u65f6\u5019\u4efb\u610f\u9009\u4e00\u4e2a\u65b9\u5f0f\u5e73\u79fb\u5373\u53ef\u3002 \u5f52\u7eb3\u4e4b\u540e\u53ef\u4ee5\u53d1\u73b0\uff0c\u4efb\u4f55\u4e00\u4e2a \\(b_i\\) \uff0c\u53ea\u8981\u5b83\u4e0d\u5c5e\u4e8e \\(S_a\\) \uff0c\u603b\u662f\u53ef\u4ee5\u628a\u5b83\u53d8\u6210 \\(S_a\\) \u5f53\u4e2d\u7684\u67d0\u4e00\u4e2a\u6570\uff0c\u4e14\u6700\u7ec8\u7b54\u6848\u4e0d\u4f1a\u66f4\u52a3\u3002 \u5f15\u7406\u5f97\u8bc1\u3002","title":"Proof"},{"location":"%E9%A2%98%E8%A7%A3/CF713C/#method","text":"\u6839\u636e\u5f15\u7406\u4ee5\u53ca\u5176\u8bc1\u660e\u8fc7\u7a0b\uff0c\u4e0d\u96be\u60f3\u5230\u4e00\u4e2a DP \u72b6\u6001\uff1a \u8bbe \\(dp_{i,j}\\) \u8868\u793a\uff0c\u8003\u8651\u4f7f \\(a_1 \\sim a_i\\) \u5168\u90e8\u6ee1\u8db3\u6761\u4ef6\uff0c\u4e14\u4f7f \\(a_i\\) \u53d8\u4e3a \\(re_j\\) \u65f6\u7684\u72b6\u6001\u96c6\u5408\u3002 \\(dp_{i,j}\\) \u7684\u5c5e\u6027\u662f\uff1a\u201c\u603b\u4ee3\u4ef7\u7684\u6700\u5c0f\u503c\u201d\u3002 \u6700\u7ec8\u7b54\u6848\u662f\u6240\u6709 \\(dp_{n,i}\\) \u7684\u6700\u5c0f\u503c\uff0c\u5176\u4e2d \\(i \\in [1, n]\\) \u3002 \u8003\u8651\u4ece\u201c\u4e0a\u4e00\u6b21\u51b3\u7b56\u201d\u8fdb\u884c\u8f6c\u79fb\uff08\u5373\u662f\u679a\u4e3e\u4e0a\u4e00\u6b21\u51b3\u7b56\u9009\u4e86\u4ec0\u4e48\uff09\uff0c\u53ef\u4ee5\u5c06\u72b6\u6001\u96c6\u5408\u5212\u5206\u5982\u4e0b\uff1a \u90a3\u4e48\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u65b9\u7a0b\uff1a \\[dp_{i,j} = \\min\\limits_{0\\le k \\le j}\\{dp_{i-1,k}\\} + |a_i - re_j|\\] \u5199\u51fa\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 memset ( dp , 0x3f , sizeof dp ), dp [ 0 ][ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { for ( int k = 0 ; k <= j ; ++ k ) { dp [ i ][ j ] = min ( dp [ i ][ j ], dp [ i - 1 ][ k ]); dp [ i ][ j ] += abs ( a [ i ] - re [ j ]); } // \u56e0\u4e3a\u521d\u59cb\u5316\u53ea\u521d\u59cb\u5316\u4e86 dp[0][0]\uff0c\u6240\u4ee5 k \u8981\u4ece 0 \u5f00\u59cb\u3002 // \u5426\u5219\u4ece dp[1][1] \u5f00\u59cb\u7684 dp \u503c\u5c31\u4e0d\u4f1a\u88ab\u66f4\u65b0\uff0c\u4f1a\u5f97\u5230\u9519\u8bef\u7684\u7b54\u6848\u3002 } } \u590d\u6742\u5ea6\u662f \\(\\text{O}(n^3)\\) \u7684\uff0c\u9700\u8981\u4f18\u5316\u3002 \u74f6\u9888\u5728\u4e8e\u6bcf\u6b21\u679a\u4e3e \\(k\\) \u6c42\u51fa \\(dp_{i - 1,k}\\) \u7684\u201c\u5019\u9009\u96c6\u5408\u201d\u4e2d\u7684\u6700\u5c0f\u503c\u3002 \u53d1\u73b0\u5f53\u5916\u5c42\u5faa\u73af\u7684 \\(i\\) \u56fa\u5b9a\uff0c \\(j\\) \u6bcf\u6b21\u589e\u5927 \\(1\\) \u7684\u65f6\u5019\uff0c \\(dp_{i-1,k}\\) \u7684\u5019\u9009\u96c6\u5408\u53ea\u4f1a\u65b0\u52a0\u5165\u4e00\u4e2a\u503c\uff1a \\(dp_{i-1,j}\\) \u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u5f53\u524d\u5019\u9009\u96c6\u5408\u5f53\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u6bcf\u6b21\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf\u8fdb\u884c\u8f6c\u79fb\u3002 \u90a3\u4e48\u6bcf\u6b21\u8f6c\u79fb\u7684\u590d\u6742\u5ea6\u5c31\u4ece \\(\\text{O}(n)\\) \u4f18\u5316\u5230\u4e86 \\(\\text{O}(1)\\) \uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u53d8\u4e3a \\(\\text{O}(n^2)\\) \uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 int main () { cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { cin >> a [ i ]; a [ i ] -= i , re [ i ] = a [ i ]; } sort ( re + 1 , re + 1 + n ); // \u521d\u59cb\u5316\u5199\u6cd5\u548c n^3 \u505a\u6cd5\u7565\u6709\u4e0d\u540c\uff0c\u4f46\u672c\u8d28\u4e00\u6837\u3002 for ( int i = 1 ; i <= n ; ++ i ) { dp [ 1 ][ i ] = abs ( a [ 1 ] - re [ i ]); } for ( int i = 2 ; i <= n ; ++ i ) { i64 minv = 2e18 ; for ( int j = 1 ; j <= n ; ++ j ) { minv = min ( minv , dp [ i - 1 ][ j ]); dp [ i ][ j ] = minv + abs ( a [ i ] - re [ j ]); } } i64 res = 2e18 ; for ( int i = 1 ; i <= n ; ++ i ) { res = min ( res , dp [ n ][ i ]); } cout << res << endl ; return 0 ; } \u5f53\u7136\uff0c\u5b9e\u9645\u4e0a\u53ef\u4ee5\u5bf9 \\(re\\) \u8fdb\u884c\u4e00\u6b21\u53bb\u91cd\uff0c\u8fd9\u6837\u590d\u6742\u5ea6\u53ef\u4ee5\u964d\u5230 \\(\\text{O}(n \\times |S_a|)\\) \u3002","title":"Method"},{"location":"%E9%A2%98%E8%A7%A3/Uoj105/","text":"UOJ105 Beads and wires \u00b6 \u4e00\u9053\u4e2a\u4eba\u8ba4\u4e3a\u975e\u5e38\u68d2\u7684\u9898\uff0c\u5361\u4e86\u6211\u63a5\u8fd1\u4e00\u5929\u7684\u65f6\u95f4\u3002 \u867d\u7136YL\u6012\u65a5\u8fd9\u9898\u5957\u8def \uff0c\u4e0d\u8fc7\u4ed6\u4e5f\u8bf4\u8fd9\u9898\u60f3\u8d77\u6765\u5bb9\u6613\uff0c\u63a8\u8d77\u6765\u4e00\u822c\uff0c\u5b9e\u73b0\u5f88\u6076\u5fc3\uff08 \\(\\text{Decription}\\) \u00b6 \u95ee\u9898\uff1a\u4f60\u6709 \\(n\\) \u4e2a\u73e0\u5b50\uff0c\u521d\u59cb\u4f60\u53ef\u4ee5\u9009\u4efb\u610f\u7684\u4e00\u4e2a\u73e0\u5b50\uff0c\u4e4b\u540e\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u7684\u64cd\u4f5c\uff1a 1. \u628a\u4e00\u9897\u65b0\u7684\u73e0\u5b50 \\(v\\) \u548c\u5df2\u7ecf\u9009\u4e86\u7684\u67d0\u4e00\u4e2a\u73e0\u5b50 \\(u\\) \u7528\u7ea2\u8272\u8fb9 (u,v) \u76f8\u8fde\u3002 2. \u628a\u4e00\u9897\u65b0\u7684\u73e0\u5b50 \\(w\\) \u63d2\u5165\u5230\u7528\u7ea2\u8272\u8fb9\u94fe\u63a5\u7684\u4e24\u4e2a\u8282\u70b9 \\(u,v\\) \u5f53\u4e2d\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u5c06 \\(u,w\\) \u548c \\(v,w\\) \u5206\u522b\u7528\u84dd\u8272\u8fb9\u76f8\u8fde\uff0c\u7136\u540e\u5220\u9664 \\((u,v)\\) \u8fd9\u6761\u7ea2\u8272\u8fb9\u3002 \u73b0\u5728\u7ed9\u5b9a\u4f60\u6240\u6709\u64cd\u4f5c\u5b8c\u4e86\u4e4b\u540e\u7684\u60c5\u51b5\uff0c\u5e76\u8bf4\u660e\u4e24\u4e2a\u76f8\u4e92\u94fe\u63a5\u7684\u70b9\u4e4b\u95f4\u7684\u8fb9\u6743\uff0c\u4f46\u662f\u4f60\u4e0d\u77e5\u9053\u8fb9\u7684\u989c\u8272\u3002 \u8981\u4f60\u627e\u5230\u4e00\u79cd\u53ef\u80fd\u7684\u65b9\u6848\u4f7f\u5f97\u4f60\u7684\u5f97\u5206\u6700\u5927\uff0c\u5b9a\u4e49\u4f60\u7684\u5f97\u5206\u4e3a\u6240\u6709\u64cd\u4f5c\u5b8c\u4e86\u4e4b\u540e\u7684\u84dd\u8272\u8fb9\u6743\u503c\u4e4b\u548c\u3002 \u8f93\u51fa\u8fd9\u4e2a\u6700\u5927\u7684\u5f97\u5206\u3002 \\(n \\le 5\\times 10^5\\) \u3002 \\(\\text{Solution}\\) \u00b6 \u9996\u5148\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u6700\u540e\u7ed9\u51fa\u7684\u60c5\u51b5\u4e00\u5b9a\u662f\u4e00\u9897\u65e0\u6839\u7684\u5e26\u6743\u6811\u3002 \u7136\u540e\u53d1\u73b0\u84dd\u8272\u7684\u8fb9\u4e00\u5b9a\u662f\u4e00\u6761\u7531\u4e09\u4e2a\u8fde\u7eed\u8282\u70b9\u548c\u94fe\u63a5\u4ed6\u4eec\u7684\u4e24\u6761\u8fb9\u6784\u6210\u7684\u4e00\u6761\u94fe\u3002 \u6ce8\u610f\u5230\u9898\u76ee\u4e2d\u8bf4\u84dd\u8272\u8fb9\u53ea\u80fd\u5728\u7ea2\u8272\u8fb9\u7684\u57fa\u7840\u4e0a\u201c\u63d2\u5165\u201d\u6765\u751f\u6210\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u73b0\u5728\u94a6\u5b9a\u4e00\u6761\u84dd\u8272\u94fe \\((u,v,w)\\) \u4e14 \\(w\\) \u662f\u88ab\u63d2\u5165\u5230 \\((u,v)\\) \u7684\u90a3\u4e2a\u8282\u70b9\uff0c \\(w\\) \u4e00\u5b9a\u4e0d\u80fd\u662f\u53e6\u5916\u4e00\u6761\u84dd\u8272\u94fe\u4e2d\u88ab\u201c\u63d2\u5165\u201d\u7684\u70b9\uff08\u6211\u4eec\u79f0\u8fd9\u4e2a\u70b9\u4e3a\u84dd\u8272\u94fe\u7684\u4e2d\u70b9\uff09\u3002 \u6240\u4ee5\uff0c\u5982\u679c\u4e24\u6761\u84dd\u8272\u7684\u94fe\u6709\u91cd\u53e0\u90e8\u5206\uff0c\u65e0\u975e\u4e24\u79cd\u60c5\u51b5\uff1a \u8fd9\u4e24\u6761\u94fe\u5f53\u4e2d\u5206\u522b\u6709\u4e00\u4e2a\u7aef\u70b9\u548c\u53e6\u5916\u4e00\u6761\u94fe\u7684\u90a3\u4e2a\u7aef\u70b9\u662f\u76f8\u8fde\u7684\uff08\u4e24\u7aef\u76f8\u4ea4\uff09\u3002 \u8fd9\u4e24\u6761\u94fe\u5f53\u4e2d\u6709\u4e00\u4e2a\u6761\u94fe\u7684\u4e2d\u70b9\u662f\u53e6\u5916\u4e00\u6761\u94fe\u7684\u7aef\u70b9\uff08\u4e5f\u5c31\u662f\u6ca1\u6709\u4e00\u4e2a\u8282\u70b9\u662f\u540c\u65f6\u505a\u4e24\u6761\u84dd\u8272\u94fe\u7684\u7aef\u70b9\u7684\uff09\u3002 \u6839\u636e\u8fd9\u4e2a\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u63a8\u51fa\u5047\u5b9a\u4e86\u4e00\u4e2a\u6839\u8282\u70b9\u7684\u65f6\u5019\u7684\u7b54\u6848\uff0c\u5e76\u8003\u8651\u4e00\u4e2a \\(\\text{O}(n^2)\\) \u7684\u505a\u6cd5\uff08\u6bcf\u4e2a\u70b9\u8dd1\u4e00\u6b21 dfs\uff09\u3002 \u5047\u8bbe \\(f_{u,0/1}\\) \u8868\u793a \\(u\\) \u4e0d\u662f/\u662f\u4e00\u6761\u84dd\u8272\u94fe\u7684\u4e2d\u70b9\uff0c\u5728\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u5f53\u4e2d\u80fd\u83b7\u5f97\u7684\u6700\u5927\u5206\u6570\u3002 \\(f_{u,0}\\) \u5f88\u597d\u63a8\uff0c\u65e2\u7136\u5b83\u4e0d\u662f\u4e00\u6761\u84dd\u8272\u94fe\u7684\u4e2d\u70b9\uff0c\u5e76\u4e14\u73b0\u5728\u662f\u5728 \\(u\\) \u7684\u5b50\u6811\u5f53\u4e2d\u8003\u8651\uff0c\u90a3\u4e48\u6211\u4eec\u679a\u4e3e \\(u\\) \u7684\u6bcf\u4e00\u4e2a\u513f\u5b50\u4e3a\u4e2d\u70b9\u7684\u60c5\u51b5\u8fdb\u884c\u8f6c\u79fb\u5373\u53ef\uff0c\u5f53\u7136\u4e0d\u8981\u5fd8\u8bb0\u8003\u8651 \\(u\\) \u548c \\(v\\) \u8fde\u7684\u662f\u7ea2\u8272\u8fb9\u7684\u60c5\u51b5\u3002 \\(f_{u,0}=\\sum \\max(f_{v,0},f_{v,1}+w_{u,v})\\) \\(f_{u,1}\\) \u4e5f\u5f88\u597d\u8003\u8651\uff0c\u56e0\u4e3a \\(u\\) \u53ea\u80fd\u662f\u4e00\u6761\u84dd\u8272\u94fe\u7684\u4e2d\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u679a\u4e3e\u4f5c\u4e3a\u8fd9\u4e00\u6761\u84dd\u8272\u94fe\u7684\u7aef\u70b9\u7684\u513f\u5b50 \\(v\\) \uff0c\u5176\u4ed6\u7684\u513f\u5b50\u53ef\u4ee5\u7528 \\(u\\) \u4e0d\u662f\u4e2d\u70b9\u7684\u60c5\u51b5\u8f6c\u79fb\uff08\u6839\u636e\u4e0a\u9762\u7684\u60c5\u51b52\uff09\u3002 \u6240\u4ee5\u8f6c\u79fb\u7684\u65f6\u5019\u53ef\u4ee5\u5229\u7528 \\(f_{u,0}\\) \u6263\u6389\u5f53\u524d\u513f\u5b50 \\(v\\) \u5728 \\(f_{u,0}\\) \u5f53\u4e2d\u505a\u7684\u8d21\u732e \\(\\max(f_{v,0},f_{v,1}+w_{u,v})\\) \uff0c\u518d\u52a0\u4e0a \\(v\\) \u5728\u5f53\u524d\u60c5\u51b5\u505a\u7684\u8d21\u732e \\(f_{v,0}+w_{u,v}\\) \u3002 \\(f_{u,1}=f_{u,0}+\\max\\{f_{v,0}+w_{u,v}-\\max(f_{v,0},f_{v,1}+w_{u,v})\\}\\) \u597d\uff0c\u73b0\u5728\u6211\u4eec\u5bf9\u6bcf\u4e00\u4e2a\u70b9\u4e3a\u6839\u7684\u60c5\u51b5\u90fd\u505a\u4e00\u6b21DP\uff0c\u5c31\u53ef\u4ee5\u62ff\u5230 57pts \u7684\u597d\u6210\u7ee9\u4e86\u3002 \u53d1\u73b0\u8fd9\u4e2a\u505a\u6cd5\u975e\u5e38\u7b26\u5408\u6362\u6839DP\u7684\u5f62\u5f0f\uff0c\u6839\u8282\u70b9\u7684\u53d8\u5316\u4f1a\u5bf9\u7b54\u6848\u9020\u6210\u5f71\u54cd\uff0c\u5e76\u4e14\u66b4\u529b\u505a\u6cd5\u662f\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6839\u8fdb\u884cDP\u3002 \u6240\u4ee5\u8003\u8651\u628a\u539f\u672c \\(\\text{O}(n)\\) \u7684\u66b4\u529b\u6362\u6839\u4f18\u5316\u5230 \\(\\text{O}(1)\\) \u3002 \u73b0\u5728\uff0c\u5047\u8bbe\u6839\u4ece\u7236\u4eb2\u8282\u70b9 \\(u\\) \u53d8\u6210\u4e86\u513f\u5b50\u8282\u70b9 \\(v\\) \uff0c\u4f1a\u6709\u4ec0\u4e48\u5f71\u54cd\u5462\uff1f \u660e\u663e\uff0c \\(v\\) \u5728\u7b2c\u4e00\u6b21 dfs \u7684\u65f6\u5019\u5bf9 \\(u\\) \u7684\u8d21\u732e\u6ca1\u6709\u4e86\uff0c\u800c\u8f6c\u79fb\u65b9\u7a0b\u91cc\u9762\u53c8\u6709\u6700\u5927\u503c\u3002 \u6240\u4ee5\u6211\u4eec\u4e3a\u4e86\u8f6c\u79fb\uff0c\u9700\u8981\u8bb0\u5f55\u6b21\u5927\u503c\uff08\u8fd9\u662f\u4e00\u4e2a\u5f88\u7ecf\u5178\u7684 trick\uff09\u3002\u4e5f\u5c31\u662f\u5728\u629b\u6389 \\(v\\) \u4e4b\u540e\uff0c\u5728 \\(u\\) \u7684\u513f\u5b50\u5f53\u4e2d\u8d21\u732e\u6700\u5927\u7684\u90a3\u4e00\u4e2a\u3002 \u56e0\u4e3a\u6362\u6839\u4e4b\u540e\uff0c \\(u\\) \u4f1a\u53d8\u6210 \\(v\\) \u7684\u7236\u4eb2\uff0c\u90a3\u4e48\u76f8\u5bf9\u7684\uff0c\u4ece \\(u\\) \u7684\u72b6\u6001\u8f6c\u79fb\u5230 \\(v\\) \uff0c\u8ba1\u7b97 \\(u\\) \u73b0\u5728\u5bf9 \\(v\\) \u7684\u8d21\u732e\u65f6\uff0c\u9700\u8981\u53bb\u9664 \\(v\\) \u7ed9 \\(u\\) \u7684\u8d21\u732e\uff0c\u76f4\u63a5\u505a\u52a0\u51cf\u6cd5\u4e0d\u597d\u7ef4\u62a4\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u76f4\u63a5\u7ef4\u62a4\u6263\u6389\u8d21\u732e\u4e4b\u540e\u7684\u503c\u3002 \u6211\u4eec\u8bbe \\(dp_{u,0/1,v}\\) \u8868\u793a\u5728\u8f6c\u79fb \\(f_{u,0/1}\\) \u8fd9\u4e2a\u72b6\u6001\u7684\u65f6\u5019\uff0c\u4e0d\u8003\u8651\u4ee5 \\(v\\) \u4e3a\u6839\u7684\u5b50\u6811 \uff0c\u5728 \\(u\\) \u7684\u5b50\u6811\u5f53\u4e2d\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u5206\u6570\u3002 \u56e0\u4e3a\u5728 \\(f_{u,0}\\) \u8fd9\u4e2a\u72b6\u6001\u7684\u65f6\u5019\uff0c \\(v\\) \u7684\u8d21\u732e\u5c31\u662f \\(\\max(f_{v,0},f_{v,1}+w_{u,v})\\) \uff0c\u5e76\u4e14 \\(f_{u,0}\\) \u662f\u5bf9\u6bcf\u4e2a\u513f\u5b50\u7684\u8d21\u732e\u6c42\u548c\uff0c\u6240\u4ee5\u4e0d\u6d89\u53ca\u5230\u6700\u5927\u503c\u53d8\u5316\u7684\u95ee\u9898\uff0c\u76f4\u63a5\u5728 \\(f_{u,0}\\) \u5f53\u4e2d\u51cf\u53bb\u5373\u53ef\u3002 \\(dp_{u,0/1,v}=f_{u,0}-\\max(f_{v,0},f_{v,1}+w_{u,v})\\) \u800c\u8003\u8651 \\(f_{u,1}\\) \u7684\u65f6\u5019\uff0c \\(v\\) \u6709\u53ef\u80fd\u7ed9 \\(f_{u,1}\\) \u8d21\u732e\u6700\u5927\u7684 \\(f_{v,0}+w_{u,v}-\\max(f_{v,0},f_{v,1}+w_{u,v})\\) \u3002 \u6240\u4ee5\u8fd8\u9700\u8981\u8bb0\u5f55\u6700\u5927\u503c\u6b21\u5927\u503c\u6765\u8fdb\u884c\u8f6c\u79fb\u3002 \\(dp_{u,0/1,v}=\\begin{cases} dp_{u,0,v}+max_1 & \\text{trans}_v \\ \\text{is not the max contribute}\\\\ dp_{u,0,v}+max_2 & \\text{otherwise.}\\end{cases}\\) \u5176\u4e2d \\(trans_v=f_{v,0}+w_{u,v}-\\max(f_{v,0},f_{v,1}+w_{u,v})\\) \\(max_1,max_2\\) \u662f\u5728\u7b2c\u4e00\u6b21 dfs \u7684\u65f6\u5019\u8bb0\u5f55\u7684 \\(u\\) \u6240\u6709\u7684\u513f\u5b50 \\(trans_v\\) \u7684\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u3002 \u7136\u540e\u6362\u6839\u7684\u65f6\u5019\u679a\u4e3e\u6bcf\u4e00\u4e2a\u70b9\u7684\u513f\u5b50\uff0c\u5148\u628a \\(f_{u,0} = dp_{u,0,v},f_{u,1} = dp_{u,1,v}\\) \u3002 \u7136\u540e\u91cd\u65b0\u8ba1\u7b97 \\(u\\) \u5bf9 \\(v\\) \u7684\u8d21\u732e\uff08\u6362\u6839\uff09\uff0c\u4e0d\u8fc7\u56e0\u4e3a \\(fa\\) \u5728\u5f53\u524d\u60c5\u51b5\u53d8\u6210\u4e86 \\(u\\) \u7684\u513f\u5b50\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5148\u628a \\(fa\\) \u5bf9 \\(u\\) \u7684\u8d21\u732e\u8ba1\u7b97\u51fa\u6765\u3002 \u8ba1\u7b97\u5b8c\u4e86\u4e4b\u540e\u5728\u7b54\u6848\u91cc\u53d6\u4e2a\u6700\u5927\u503c\u5373\u53ef\u3002 \\(\\text{Code}\\) \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 #include <bits/stdc++.h> using namespace std ; constexpr int si = 5e5 + 10 ; constexpr int inf = 0x3f3f3f3f ; int n ; struct Tree { int head , ver , Next , w ; } e [ si << 1 ]; int tot = 0 ; inline void add ( int u , int v , int w ){ e [ ++ tot ]. ver = v , e [ tot ]. Next = e [ u ]. head ; e [ tot ]. w = w , e [ u ]. head = tot ; } int father [ si ], len [ si ]; // father \u548c len \u662f\u65b9\u4fbf dfs2 \u7684\u8f6c\u79fb\u7528\u7684\u3002 int f [ si ][ 2 ]; std :: vector < int > son [ si ]; // \u8bb0\u5f55\u513f\u5b50\uff0c\u4fbf\u4e8e\u8f6c\u79fb std :: vector < int > dp [ si ][ 2 ]; std :: vector < int > mx [ si ]; // \u8bb0\u5f55 u \u7684\u6bcf\u4e00\u4e2a\u513f\u5b50\u7684 trans\uff0c\u5982\u679c\u5f53\u524d\u513f\u5b50\u7684 trans \u662f\u6700\u5927\u7684\uff0c\u90a3\u4e48\u66ff\u6362\u6210\u6b21\u5927\u503c\u518d\u8ba1\u7b97\u3002 inline void dfs1 ( int u , int fa ){ int max1 , max2 ; max1 = max2 =- inf ; f [ u ][ 0 ] = 0 , f [ u ][ 1 ] =- inf ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( v == fa ) continue ; len [ v ] = w , father [ v ] = u , son [ u ]. push_back ( v ); // \u8bb0\u5f55\u4fe1\u606f dfs1 ( v , u ), f [ u ][ 0 ] += max ( f [ v ][ 0 ], f [ v ][ 1 ] + w ); // \u8f6c\u79fb int trans = f [ v ][ 0 ] + w - max ( f [ v ][ 0 ], f [ v ][ 1 ] + len [ v ]); if ( trans > max1 ) max2 = max ( max2 , max1 ), max1 = trans ; else max2 = max ( trans , max2 ); // \u8bb0\u5f55\u6b21\u5927\u503c\u3002 } f [ u ][ 1 ] = f [ u ][ 0 ] + max1 ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( v == fa ) continue ; dp [ u ][ 0 ]. push_back ( f [ u ][ 0 ] - max ( f [ v ][ 0 ], f [ v ][ 1 ] + w )); int trans = f [ v ][ 0 ] + w - max ( f [ v ][ 0 ], f [ v ][ 1 ] + len [ v ]); if ( trans == max1 ) dp [ u ][ 1 ]. push_back ( dp [ u ][ 0 ]. back () + max2 ), mx [ u ]. push_back ( max2 ); else dp [ u ][ 1 ]. push_back ( dp [ u ][ 0 ]. back () + max1 ), mx [ u ]. push_back ( max1 ); } return ; } int res = 0 ; inline void dfs2 ( int u ){ for ( register unsigned i = 0 ; i < son [ u ]. size (); ++ i ){ f [ u ][ 0 ] = dp [ u ][ 0 ][ i ], f [ u ][ 1 ] = dp [ u ][ 1 ][ i ]; if ( father [ u ]){ f [ u ][ 0 ] += max ( f [ father [ u ]][ 0 ], f [ father [ u ]][ 1 ] + len [ u ]); f [ u ][ 1 ] = f [ u ][ 0 ] + max ( mx [ u ][ i ], f [ father [ u ]][ 0 ] + len [ u ] - max ( f [ father [ u ]][ 0 ], f [ father [ u ]][ 1 ] + len [ u ])); // \u6bcf\u6b21\u90fd\u9700\u8981\u518d\u7b97\u4e00\u904d\uff08\u5f53\u7136\u4e5f\u53ef\u4ee5\u53ea\u7b97\u4e00\u6b21\u7136\u540e\u8bb0\u4e0b\u6765\uff09 // \u73b0\u5728\u4e3a\u4e86\u8ba1\u7b97 fa \u5bf9 u \u7684\u8d21\u732e\uff0c\u5148\u628a u \u6682\u65f6\u5f53\u4f5c\u6839\u8282\u70b9\uff0c\u4ece\u5b83\u7684\u7236\u4eb2\u548c\u539f\u6765\u7684\u513f\u5b50\u5f53\u4e2d\u8f6c\u79fb\u3002 // \u76f8\u5f53\u4e8e\u662f\u628a fa \u6dfb\u52a0\u5230\u4e86 u \u7684\u513f\u5b50\u5f53\u4e2d\uff0c\u518d\u8dd1\u4e00\u6b21\u7c7b\u4f3c dfs1 \u91cc\u9762\u7684 dp \u7684\u8fc7\u7a0b\u6765\u66f4\u65b0\u3002 } res = max ( res , f [ son [ u ][ i ]][ 0 ] + max ( f [ u ][ 0 ], f [ u ][ 1 ] + len [ son [ u ][ i ]])); // \u8bb0\u5f55\u5f53\u524d\u60c5\u51b5\u7684\u7b54\u6848 dfs2 ( son [ u ][ i ]); } return ; } int main (){ scanf ( \"%d\" , & n ); for ( register int i = 1 , u , v , w ; i < n ; ++ i ){ scanf ( \"%d%d%d\" , & u , & v , & w ); add ( u , v , w ), add ( v , u , w ); } dfs1 ( 1 , 0 ), dfs2 ( 1 ); return printf ( \"%d \\n \" , res ), 0 ; } \u8bb0\u5f55\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u7684\u65f6\u5019\u4e5f\u53ef\u4ee5\u5229\u7528 std::multiset \uff0c\u628a\u4ece\u4e0b\u5230\u4e0a\u7684\u65f6\u5019\u628a\u6240\u6709 \\(trans\\) \u6254\u8fdb\u53bb\uff0c\u7136\u540e\u4ece\u4e0a\u5230\u4e0b\u8f6c\u79fb\u7684\u65f6\u5019\u5224\u5f53\u524d\u7684 \\(trans\\) \u662f\u4e0d\u662f multiset \u5f53\u524d\u7684\u6700\u5927\u503c\u5c31\u53ef\u4ee5\uff0c\u5982\u679c\u662f\uff0c\u90a3\u4e48\u5220\u9664\u8fd9\u4e2a\u503c\u5e76\u7528\u6b21\u5927\u503c\u66f4\u65b0\uff0c\u53cd\u4e4b\u76f4\u63a5\u7528\u6700\u5927\u503c\u66f4\u65b0\u5373\u53ef\u3002 \u4e0d\u8fc7\u590d\u6742\u5ea6\u4f1a\u591a\u4e00\u4e2a \\(\\log\\) \u3002 1 Tag : \u6811 / \u6811\u5f62DP / \u6362\u6839DP","title":"Uoj105"},{"location":"%E9%A2%98%E8%A7%A3/Uoj105/#uoj105-beads-and-wires","text":"\u4e00\u9053\u4e2a\u4eba\u8ba4\u4e3a\u975e\u5e38\u68d2\u7684\u9898\uff0c\u5361\u4e86\u6211\u63a5\u8fd1\u4e00\u5929\u7684\u65f6\u95f4\u3002 \u867d\u7136YL\u6012\u65a5\u8fd9\u9898\u5957\u8def \uff0c\u4e0d\u8fc7\u4ed6\u4e5f\u8bf4\u8fd9\u9898\u60f3\u8d77\u6765\u5bb9\u6613\uff0c\u63a8\u8d77\u6765\u4e00\u822c\uff0c\u5b9e\u73b0\u5f88\u6076\u5fc3\uff08","title":"UOJ105 Beads and wires"},{"location":"%E9%A2%98%E8%A7%A3/Uoj105/#textdecription","text":"\u95ee\u9898\uff1a\u4f60\u6709 \\(n\\) \u4e2a\u73e0\u5b50\uff0c\u521d\u59cb\u4f60\u53ef\u4ee5\u9009\u4efb\u610f\u7684\u4e00\u4e2a\u73e0\u5b50\uff0c\u4e4b\u540e\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u7684\u64cd\u4f5c\uff1a 1. \u628a\u4e00\u9897\u65b0\u7684\u73e0\u5b50 \\(v\\) \u548c\u5df2\u7ecf\u9009\u4e86\u7684\u67d0\u4e00\u4e2a\u73e0\u5b50 \\(u\\) \u7528\u7ea2\u8272\u8fb9 (u,v) \u76f8\u8fde\u3002 2. \u628a\u4e00\u9897\u65b0\u7684\u73e0\u5b50 \\(w\\) \u63d2\u5165\u5230\u7528\u7ea2\u8272\u8fb9\u94fe\u63a5\u7684\u4e24\u4e2a\u8282\u70b9 \\(u,v\\) \u5f53\u4e2d\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u5c06 \\(u,w\\) \u548c \\(v,w\\) \u5206\u522b\u7528\u84dd\u8272\u8fb9\u76f8\u8fde\uff0c\u7136\u540e\u5220\u9664 \\((u,v)\\) \u8fd9\u6761\u7ea2\u8272\u8fb9\u3002 \u73b0\u5728\u7ed9\u5b9a\u4f60\u6240\u6709\u64cd\u4f5c\u5b8c\u4e86\u4e4b\u540e\u7684\u60c5\u51b5\uff0c\u5e76\u8bf4\u660e\u4e24\u4e2a\u76f8\u4e92\u94fe\u63a5\u7684\u70b9\u4e4b\u95f4\u7684\u8fb9\u6743\uff0c\u4f46\u662f\u4f60\u4e0d\u77e5\u9053\u8fb9\u7684\u989c\u8272\u3002 \u8981\u4f60\u627e\u5230\u4e00\u79cd\u53ef\u80fd\u7684\u65b9\u6848\u4f7f\u5f97\u4f60\u7684\u5f97\u5206\u6700\u5927\uff0c\u5b9a\u4e49\u4f60\u7684\u5f97\u5206\u4e3a\u6240\u6709\u64cd\u4f5c\u5b8c\u4e86\u4e4b\u540e\u7684\u84dd\u8272\u8fb9\u6743\u503c\u4e4b\u548c\u3002 \u8f93\u51fa\u8fd9\u4e2a\u6700\u5927\u7684\u5f97\u5206\u3002 \\(n \\le 5\\times 10^5\\) \u3002","title":"\\(\\text{Decription}\\)"},{"location":"%E9%A2%98%E8%A7%A3/Uoj105/#textsolution","text":"\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u6700\u540e\u7ed9\u51fa\u7684\u60c5\u51b5\u4e00\u5b9a\u662f\u4e00\u9897\u65e0\u6839\u7684\u5e26\u6743\u6811\u3002 \u7136\u540e\u53d1\u73b0\u84dd\u8272\u7684\u8fb9\u4e00\u5b9a\u662f\u4e00\u6761\u7531\u4e09\u4e2a\u8fde\u7eed\u8282\u70b9\u548c\u94fe\u63a5\u4ed6\u4eec\u7684\u4e24\u6761\u8fb9\u6784\u6210\u7684\u4e00\u6761\u94fe\u3002 \u6ce8\u610f\u5230\u9898\u76ee\u4e2d\u8bf4\u84dd\u8272\u8fb9\u53ea\u80fd\u5728\u7ea2\u8272\u8fb9\u7684\u57fa\u7840\u4e0a\u201c\u63d2\u5165\u201d\u6765\u751f\u6210\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u73b0\u5728\u94a6\u5b9a\u4e00\u6761\u84dd\u8272\u94fe \\((u,v,w)\\) \u4e14 \\(w\\) \u662f\u88ab\u63d2\u5165\u5230 \\((u,v)\\) \u7684\u90a3\u4e2a\u8282\u70b9\uff0c \\(w\\) \u4e00\u5b9a\u4e0d\u80fd\u662f\u53e6\u5916\u4e00\u6761\u84dd\u8272\u94fe\u4e2d\u88ab\u201c\u63d2\u5165\u201d\u7684\u70b9\uff08\u6211\u4eec\u79f0\u8fd9\u4e2a\u70b9\u4e3a\u84dd\u8272\u94fe\u7684\u4e2d\u70b9\uff09\u3002 \u6240\u4ee5\uff0c\u5982\u679c\u4e24\u6761\u84dd\u8272\u7684\u94fe\u6709\u91cd\u53e0\u90e8\u5206\uff0c\u65e0\u975e\u4e24\u79cd\u60c5\u51b5\uff1a \u8fd9\u4e24\u6761\u94fe\u5f53\u4e2d\u5206\u522b\u6709\u4e00\u4e2a\u7aef\u70b9\u548c\u53e6\u5916\u4e00\u6761\u94fe\u7684\u90a3\u4e2a\u7aef\u70b9\u662f\u76f8\u8fde\u7684\uff08\u4e24\u7aef\u76f8\u4ea4\uff09\u3002 \u8fd9\u4e24\u6761\u94fe\u5f53\u4e2d\u6709\u4e00\u4e2a\u6761\u94fe\u7684\u4e2d\u70b9\u662f\u53e6\u5916\u4e00\u6761\u94fe\u7684\u7aef\u70b9\uff08\u4e5f\u5c31\u662f\u6ca1\u6709\u4e00\u4e2a\u8282\u70b9\u662f\u540c\u65f6\u505a\u4e24\u6761\u84dd\u8272\u94fe\u7684\u7aef\u70b9\u7684\uff09\u3002 \u6839\u636e\u8fd9\u4e2a\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u63a8\u51fa\u5047\u5b9a\u4e86\u4e00\u4e2a\u6839\u8282\u70b9\u7684\u65f6\u5019\u7684\u7b54\u6848\uff0c\u5e76\u8003\u8651\u4e00\u4e2a \\(\\text{O}(n^2)\\) \u7684\u505a\u6cd5\uff08\u6bcf\u4e2a\u70b9\u8dd1\u4e00\u6b21 dfs\uff09\u3002 \u5047\u8bbe \\(f_{u,0/1}\\) \u8868\u793a \\(u\\) \u4e0d\u662f/\u662f\u4e00\u6761\u84dd\u8272\u94fe\u7684\u4e2d\u70b9\uff0c\u5728\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u5f53\u4e2d\u80fd\u83b7\u5f97\u7684\u6700\u5927\u5206\u6570\u3002 \\(f_{u,0}\\) \u5f88\u597d\u63a8\uff0c\u65e2\u7136\u5b83\u4e0d\u662f\u4e00\u6761\u84dd\u8272\u94fe\u7684\u4e2d\u70b9\uff0c\u5e76\u4e14\u73b0\u5728\u662f\u5728 \\(u\\) \u7684\u5b50\u6811\u5f53\u4e2d\u8003\u8651\uff0c\u90a3\u4e48\u6211\u4eec\u679a\u4e3e \\(u\\) \u7684\u6bcf\u4e00\u4e2a\u513f\u5b50\u4e3a\u4e2d\u70b9\u7684\u60c5\u51b5\u8fdb\u884c\u8f6c\u79fb\u5373\u53ef\uff0c\u5f53\u7136\u4e0d\u8981\u5fd8\u8bb0\u8003\u8651 \\(u\\) \u548c \\(v\\) \u8fde\u7684\u662f\u7ea2\u8272\u8fb9\u7684\u60c5\u51b5\u3002 \\(f_{u,0}=\\sum \\max(f_{v,0},f_{v,1}+w_{u,v})\\) \\(f_{u,1}\\) \u4e5f\u5f88\u597d\u8003\u8651\uff0c\u56e0\u4e3a \\(u\\) \u53ea\u80fd\u662f\u4e00\u6761\u84dd\u8272\u94fe\u7684\u4e2d\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u679a\u4e3e\u4f5c\u4e3a\u8fd9\u4e00\u6761\u84dd\u8272\u94fe\u7684\u7aef\u70b9\u7684\u513f\u5b50 \\(v\\) \uff0c\u5176\u4ed6\u7684\u513f\u5b50\u53ef\u4ee5\u7528 \\(u\\) \u4e0d\u662f\u4e2d\u70b9\u7684\u60c5\u51b5\u8f6c\u79fb\uff08\u6839\u636e\u4e0a\u9762\u7684\u60c5\u51b52\uff09\u3002 \u6240\u4ee5\u8f6c\u79fb\u7684\u65f6\u5019\u53ef\u4ee5\u5229\u7528 \\(f_{u,0}\\) \u6263\u6389\u5f53\u524d\u513f\u5b50 \\(v\\) \u5728 \\(f_{u,0}\\) \u5f53\u4e2d\u505a\u7684\u8d21\u732e \\(\\max(f_{v,0},f_{v,1}+w_{u,v})\\) \uff0c\u518d\u52a0\u4e0a \\(v\\) \u5728\u5f53\u524d\u60c5\u51b5\u505a\u7684\u8d21\u732e \\(f_{v,0}+w_{u,v}\\) \u3002 \\(f_{u,1}=f_{u,0}+\\max\\{f_{v,0}+w_{u,v}-\\max(f_{v,0},f_{v,1}+w_{u,v})\\}\\) \u597d\uff0c\u73b0\u5728\u6211\u4eec\u5bf9\u6bcf\u4e00\u4e2a\u70b9\u4e3a\u6839\u7684\u60c5\u51b5\u90fd\u505a\u4e00\u6b21DP\uff0c\u5c31\u53ef\u4ee5\u62ff\u5230 57pts \u7684\u597d\u6210\u7ee9\u4e86\u3002 \u53d1\u73b0\u8fd9\u4e2a\u505a\u6cd5\u975e\u5e38\u7b26\u5408\u6362\u6839DP\u7684\u5f62\u5f0f\uff0c\u6839\u8282\u70b9\u7684\u53d8\u5316\u4f1a\u5bf9\u7b54\u6848\u9020\u6210\u5f71\u54cd\uff0c\u5e76\u4e14\u66b4\u529b\u505a\u6cd5\u662f\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6839\u8fdb\u884cDP\u3002 \u6240\u4ee5\u8003\u8651\u628a\u539f\u672c \\(\\text{O}(n)\\) \u7684\u66b4\u529b\u6362\u6839\u4f18\u5316\u5230 \\(\\text{O}(1)\\) \u3002 \u73b0\u5728\uff0c\u5047\u8bbe\u6839\u4ece\u7236\u4eb2\u8282\u70b9 \\(u\\) \u53d8\u6210\u4e86\u513f\u5b50\u8282\u70b9 \\(v\\) \uff0c\u4f1a\u6709\u4ec0\u4e48\u5f71\u54cd\u5462\uff1f \u660e\u663e\uff0c \\(v\\) \u5728\u7b2c\u4e00\u6b21 dfs \u7684\u65f6\u5019\u5bf9 \\(u\\) \u7684\u8d21\u732e\u6ca1\u6709\u4e86\uff0c\u800c\u8f6c\u79fb\u65b9\u7a0b\u91cc\u9762\u53c8\u6709\u6700\u5927\u503c\u3002 \u6240\u4ee5\u6211\u4eec\u4e3a\u4e86\u8f6c\u79fb\uff0c\u9700\u8981\u8bb0\u5f55\u6b21\u5927\u503c\uff08\u8fd9\u662f\u4e00\u4e2a\u5f88\u7ecf\u5178\u7684 trick\uff09\u3002\u4e5f\u5c31\u662f\u5728\u629b\u6389 \\(v\\) \u4e4b\u540e\uff0c\u5728 \\(u\\) \u7684\u513f\u5b50\u5f53\u4e2d\u8d21\u732e\u6700\u5927\u7684\u90a3\u4e00\u4e2a\u3002 \u56e0\u4e3a\u6362\u6839\u4e4b\u540e\uff0c \\(u\\) \u4f1a\u53d8\u6210 \\(v\\) \u7684\u7236\u4eb2\uff0c\u90a3\u4e48\u76f8\u5bf9\u7684\uff0c\u4ece \\(u\\) \u7684\u72b6\u6001\u8f6c\u79fb\u5230 \\(v\\) \uff0c\u8ba1\u7b97 \\(u\\) \u73b0\u5728\u5bf9 \\(v\\) \u7684\u8d21\u732e\u65f6\uff0c\u9700\u8981\u53bb\u9664 \\(v\\) \u7ed9 \\(u\\) \u7684\u8d21\u732e\uff0c\u76f4\u63a5\u505a\u52a0\u51cf\u6cd5\u4e0d\u597d\u7ef4\u62a4\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u76f4\u63a5\u7ef4\u62a4\u6263\u6389\u8d21\u732e\u4e4b\u540e\u7684\u503c\u3002 \u6211\u4eec\u8bbe \\(dp_{u,0/1,v}\\) \u8868\u793a\u5728\u8f6c\u79fb \\(f_{u,0/1}\\) \u8fd9\u4e2a\u72b6\u6001\u7684\u65f6\u5019\uff0c\u4e0d\u8003\u8651\u4ee5 \\(v\\) \u4e3a\u6839\u7684\u5b50\u6811 \uff0c\u5728 \\(u\\) \u7684\u5b50\u6811\u5f53\u4e2d\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u5206\u6570\u3002 \u56e0\u4e3a\u5728 \\(f_{u,0}\\) \u8fd9\u4e2a\u72b6\u6001\u7684\u65f6\u5019\uff0c \\(v\\) \u7684\u8d21\u732e\u5c31\u662f \\(\\max(f_{v,0},f_{v,1}+w_{u,v})\\) \uff0c\u5e76\u4e14 \\(f_{u,0}\\) \u662f\u5bf9\u6bcf\u4e2a\u513f\u5b50\u7684\u8d21\u732e\u6c42\u548c\uff0c\u6240\u4ee5\u4e0d\u6d89\u53ca\u5230\u6700\u5927\u503c\u53d8\u5316\u7684\u95ee\u9898\uff0c\u76f4\u63a5\u5728 \\(f_{u,0}\\) \u5f53\u4e2d\u51cf\u53bb\u5373\u53ef\u3002 \\(dp_{u,0/1,v}=f_{u,0}-\\max(f_{v,0},f_{v,1}+w_{u,v})\\) \u800c\u8003\u8651 \\(f_{u,1}\\) \u7684\u65f6\u5019\uff0c \\(v\\) \u6709\u53ef\u80fd\u7ed9 \\(f_{u,1}\\) \u8d21\u732e\u6700\u5927\u7684 \\(f_{v,0}+w_{u,v}-\\max(f_{v,0},f_{v,1}+w_{u,v})\\) \u3002 \u6240\u4ee5\u8fd8\u9700\u8981\u8bb0\u5f55\u6700\u5927\u503c\u6b21\u5927\u503c\u6765\u8fdb\u884c\u8f6c\u79fb\u3002 \\(dp_{u,0/1,v}=\\begin{cases} dp_{u,0,v}+max_1 & \\text{trans}_v \\ \\text{is not the max contribute}\\\\ dp_{u,0,v}+max_2 & \\text{otherwise.}\\end{cases}\\) \u5176\u4e2d \\(trans_v=f_{v,0}+w_{u,v}-\\max(f_{v,0},f_{v,1}+w_{u,v})\\) \\(max_1,max_2\\) \u662f\u5728\u7b2c\u4e00\u6b21 dfs \u7684\u65f6\u5019\u8bb0\u5f55\u7684 \\(u\\) \u6240\u6709\u7684\u513f\u5b50 \\(trans_v\\) \u7684\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u3002 \u7136\u540e\u6362\u6839\u7684\u65f6\u5019\u679a\u4e3e\u6bcf\u4e00\u4e2a\u70b9\u7684\u513f\u5b50\uff0c\u5148\u628a \\(f_{u,0} = dp_{u,0,v},f_{u,1} = dp_{u,1,v}\\) \u3002 \u7136\u540e\u91cd\u65b0\u8ba1\u7b97 \\(u\\) \u5bf9 \\(v\\) \u7684\u8d21\u732e\uff08\u6362\u6839\uff09\uff0c\u4e0d\u8fc7\u56e0\u4e3a \\(fa\\) \u5728\u5f53\u524d\u60c5\u51b5\u53d8\u6210\u4e86 \\(u\\) \u7684\u513f\u5b50\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5148\u628a \\(fa\\) \u5bf9 \\(u\\) \u7684\u8d21\u732e\u8ba1\u7b97\u51fa\u6765\u3002 \u8ba1\u7b97\u5b8c\u4e86\u4e4b\u540e\u5728\u7b54\u6848\u91cc\u53d6\u4e2a\u6700\u5927\u503c\u5373\u53ef\u3002","title":"\\(\\text{Solution}\\)"},{"location":"%E9%A2%98%E8%A7%A3/Uoj105/#textcode","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 #include <bits/stdc++.h> using namespace std ; constexpr int si = 5e5 + 10 ; constexpr int inf = 0x3f3f3f3f ; int n ; struct Tree { int head , ver , Next , w ; } e [ si << 1 ]; int tot = 0 ; inline void add ( int u , int v , int w ){ e [ ++ tot ]. ver = v , e [ tot ]. Next = e [ u ]. head ; e [ tot ]. w = w , e [ u ]. head = tot ; } int father [ si ], len [ si ]; // father \u548c len \u662f\u65b9\u4fbf dfs2 \u7684\u8f6c\u79fb\u7528\u7684\u3002 int f [ si ][ 2 ]; std :: vector < int > son [ si ]; // \u8bb0\u5f55\u513f\u5b50\uff0c\u4fbf\u4e8e\u8f6c\u79fb std :: vector < int > dp [ si ][ 2 ]; std :: vector < int > mx [ si ]; // \u8bb0\u5f55 u \u7684\u6bcf\u4e00\u4e2a\u513f\u5b50\u7684 trans\uff0c\u5982\u679c\u5f53\u524d\u513f\u5b50\u7684 trans \u662f\u6700\u5927\u7684\uff0c\u90a3\u4e48\u66ff\u6362\u6210\u6b21\u5927\u503c\u518d\u8ba1\u7b97\u3002 inline void dfs1 ( int u , int fa ){ int max1 , max2 ; max1 = max2 =- inf ; f [ u ][ 0 ] = 0 , f [ u ][ 1 ] =- inf ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( v == fa ) continue ; len [ v ] = w , father [ v ] = u , son [ u ]. push_back ( v ); // \u8bb0\u5f55\u4fe1\u606f dfs1 ( v , u ), f [ u ][ 0 ] += max ( f [ v ][ 0 ], f [ v ][ 1 ] + w ); // \u8f6c\u79fb int trans = f [ v ][ 0 ] + w - max ( f [ v ][ 0 ], f [ v ][ 1 ] + len [ v ]); if ( trans > max1 ) max2 = max ( max2 , max1 ), max1 = trans ; else max2 = max ( trans , max2 ); // \u8bb0\u5f55\u6b21\u5927\u503c\u3002 } f [ u ][ 1 ] = f [ u ][ 0 ] + max1 ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( v == fa ) continue ; dp [ u ][ 0 ]. push_back ( f [ u ][ 0 ] - max ( f [ v ][ 0 ], f [ v ][ 1 ] + w )); int trans = f [ v ][ 0 ] + w - max ( f [ v ][ 0 ], f [ v ][ 1 ] + len [ v ]); if ( trans == max1 ) dp [ u ][ 1 ]. push_back ( dp [ u ][ 0 ]. back () + max2 ), mx [ u ]. push_back ( max2 ); else dp [ u ][ 1 ]. push_back ( dp [ u ][ 0 ]. back () + max1 ), mx [ u ]. push_back ( max1 ); } return ; } int res = 0 ; inline void dfs2 ( int u ){ for ( register unsigned i = 0 ; i < son [ u ]. size (); ++ i ){ f [ u ][ 0 ] = dp [ u ][ 0 ][ i ], f [ u ][ 1 ] = dp [ u ][ 1 ][ i ]; if ( father [ u ]){ f [ u ][ 0 ] += max ( f [ father [ u ]][ 0 ], f [ father [ u ]][ 1 ] + len [ u ]); f [ u ][ 1 ] = f [ u ][ 0 ] + max ( mx [ u ][ i ], f [ father [ u ]][ 0 ] + len [ u ] - max ( f [ father [ u ]][ 0 ], f [ father [ u ]][ 1 ] + len [ u ])); // \u6bcf\u6b21\u90fd\u9700\u8981\u518d\u7b97\u4e00\u904d\uff08\u5f53\u7136\u4e5f\u53ef\u4ee5\u53ea\u7b97\u4e00\u6b21\u7136\u540e\u8bb0\u4e0b\u6765\uff09 // \u73b0\u5728\u4e3a\u4e86\u8ba1\u7b97 fa \u5bf9 u \u7684\u8d21\u732e\uff0c\u5148\u628a u \u6682\u65f6\u5f53\u4f5c\u6839\u8282\u70b9\uff0c\u4ece\u5b83\u7684\u7236\u4eb2\u548c\u539f\u6765\u7684\u513f\u5b50\u5f53\u4e2d\u8f6c\u79fb\u3002 // \u76f8\u5f53\u4e8e\u662f\u628a fa \u6dfb\u52a0\u5230\u4e86 u \u7684\u513f\u5b50\u5f53\u4e2d\uff0c\u518d\u8dd1\u4e00\u6b21\u7c7b\u4f3c dfs1 \u91cc\u9762\u7684 dp \u7684\u8fc7\u7a0b\u6765\u66f4\u65b0\u3002 } res = max ( res , f [ son [ u ][ i ]][ 0 ] + max ( f [ u ][ 0 ], f [ u ][ 1 ] + len [ son [ u ][ i ]])); // \u8bb0\u5f55\u5f53\u524d\u60c5\u51b5\u7684\u7b54\u6848 dfs2 ( son [ u ][ i ]); } return ; } int main (){ scanf ( \"%d\" , & n ); for ( register int i = 1 , u , v , w ; i < n ; ++ i ){ scanf ( \"%d%d%d\" , & u , & v , & w ); add ( u , v , w ), add ( v , u , w ); } dfs1 ( 1 , 0 ), dfs2 ( 1 ); return printf ( \"%d \\n \" , res ), 0 ; } \u8bb0\u5f55\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u7684\u65f6\u5019\u4e5f\u53ef\u4ee5\u5229\u7528 std::multiset \uff0c\u628a\u4ece\u4e0b\u5230\u4e0a\u7684\u65f6\u5019\u628a\u6240\u6709 \\(trans\\) \u6254\u8fdb\u53bb\uff0c\u7136\u540e\u4ece\u4e0a\u5230\u4e0b\u8f6c\u79fb\u7684\u65f6\u5019\u5224\u5f53\u524d\u7684 \\(trans\\) \u662f\u4e0d\u662f multiset \u5f53\u524d\u7684\u6700\u5927\u503c\u5c31\u53ef\u4ee5\uff0c\u5982\u679c\u662f\uff0c\u90a3\u4e48\u5220\u9664\u8fd9\u4e2a\u503c\u5e76\u7528\u6b21\u5927\u503c\u66f4\u65b0\uff0c\u53cd\u4e4b\u76f4\u63a5\u7528\u6700\u5927\u503c\u66f4\u65b0\u5373\u53ef\u3002 \u4e0d\u8fc7\u590d\u6742\u5ea6\u4f1a\u591a\u4e00\u4e2a \\(\\log\\) \u3002 1 Tag : \u6811 / \u6811\u5f62DP / \u6362\u6839DP","title":"\\(\\text{Code}\\)"}]}