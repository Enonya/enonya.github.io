{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u03c8(\uff40\u2207\u00b4)\u03c8 GO BACK TO 2019. Yuyuko is watching you.jpg About Me \u03c8(\uff40\u2207\u00b4)\u03c8 Enonya is a CNs-based human-like creature who is currently studying in OI (Olympiad for Informatics) with OIers in Chengdu Foreign Languages school. As a basketball player, he is used to be like an auxiliary Power Forward, but sometimes he will shoot some 3-points shots with the aim of showing respect to his hero, Reggie Miller. While she was in Gensokyo, she would like to stay at Hakugyokurou, having an afternoon-tea with Yuyuko Saigyouji. If some friend of Enonya invited him to have something fun with them, then you must find her playing Touhou STG/FTG or BMS. Enonya must be a person who chooses String over ad-hoc problems like antontrygub-style constructive problems, About this site \u03c8(\uff40\u2207\u00b4)\u03c8 Like what you see above, here is Gensokyo Algorithm Research Institute. So, of course, most of the content inside is about algorithms. I have set up the comment system with giscus. I'm willing to see others post their opinions here. Some posts have been protected by passwords, you can try to find the password in the index of that page, or have a contact with me if you must.","title":"Homepage"},{"location":"#introduction","text":"GO BACK TO 2019. Yuyuko is watching you.jpg","title":"Introduction"},{"location":"#about-me","text":"Enonya is a CNs-based human-like creature who is currently studying in OI (Olympiad for Informatics) with OIers in Chengdu Foreign Languages school. As a basketball player, he is used to be like an auxiliary Power Forward, but sometimes he will shoot some 3-points shots with the aim of showing respect to his hero, Reggie Miller. While she was in Gensokyo, she would like to stay at Hakugyokurou, having an afternoon-tea with Yuyuko Saigyouji. If some friend of Enonya invited him to have something fun with them, then you must find her playing Touhou STG/FTG or BMS. Enonya must be a person who chooses String over ad-hoc problems like antontrygub-style constructive problems,","title":"About Me"},{"location":"#about-this-site","text":"Like what you see above, here is Gensokyo Algorithm Research Institute. So, of course, most of the content inside is about algorithms. I have set up the comment system with giscus. I'm willing to see others post their opinions here. Some posts have been protected by passwords, you can try to find the password in the index of that page, or have a contact with me if you must.","title":"About this site"},{"location":"links/","text":"\u8fd9\u4e9b\u662f\u53cb\u94fe\uff0c\u6b22\u8fce\u4ea4\u6362\uff0c\u5177\u4f53\u53ef\u4ee5 E-mail \u6211\u6216\u8005\u76f4\u63a5 +q\u3002 \u65e5\u540e\u4f1a\u8003\u8651\u5f04\u4e00\u4e0b Gitalk\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u5728\u8bc4\u8bba\u533a\u91cc\u9762\u641e\u4e86\uff08upd:\u5f04\u4e86\uff09\u3002 Shmilyty - hb \u52bf\u529b CharlesWu - cw \u52bf\u529b Islauso - cw \u52bf\u529b ETK - \u6da6\u6da6\u52bf\u529b \u6478\u9c7c\u9171 - \u9b54\u6014\u52bf\u529b Hyl\u5929\u68a6 - \u540c\u540d\u52bf\u529b \u5e7b\u5f71\u5f6d - cw \u52bf\u529b \u65e5\u8bed\u9171 - \u53ef\u7231\u52bf\u529b FrancisDrake - cw \u52bf\u529b Eray - cw \u52bf\u529b(github) Eray - cw \u52bf\u529b(gitlab) Fat-Old-Eight - cw \u52bf\u529b 10circle - \u672a\u77e5\u52bf\u529b","title":"Friendlinks"},{"location":"algor/","text":"\u8fd9\u4e2a\u5b50\u76ee\u5f55 Algorithm \u4e0b\u53ef\u80fd\u4f1a\u51fa\u73b0\u7684\u5185\u5bb9\uff1a \u7b97\u6cd5\u7684\u57fa\u7840/\u8fdb\u9636\u77e5\u8bc6 \u7b97\u6cd5\u7684\u57fa\u7840/\u6269\u5c55\u8fd0\u7528 Trick \u7c7b\u7684\u4e1c\u897f\u4e0d\u4f1a\u7279\u522b\u591a\uff0c\u5927\u90e8\u5206 Tricks \u90fd\u653e\u5728 Record \u91cc\u9762\u3002 \u4e5f\u53ef\u4ee5\u4e0d\u662f\u7b97\u6cd5\uff0c\u6bd4\u5982\u7ec4\u5408\u6570\u5b66\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002","title":"Index"},{"location":"algor/basic/binary-lifting/","text":"\u6982\u8ff0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5e8f\u5217\u500d\u589e\u672c\u8d28\u4e0a\u662f\u5bf9\u4e8e\u9012\u63a8\u7684\u4e00\u79cd\u4f18\u5316\uff0c\u901a\u5e38\u548c\u4e8c\u8fdb\u5236\u62c6\u5206\uff08\u4efb\u610f\u4e00\u4e2a\u6b63\u6574\u6570\u90fd\u53ef\u4ee5\u88ab\u62c6\u6210 \\(2\\) \u7684\u6574\u6570\u6b21\u5e42\u7684\u548c\uff09\u642d\u914d\u4f7f\u7528\u3002 \u987e\u540d\u601d\u4e49\uff0c\u500d\u589e\uff0c\u5c31\u662f\u6210\u500d\u589e\u957f\uff0c\u6bcf\u6b21\u5c06\u8303\u56f4\u6269\u5927\u6216\u8005\u51cf\u5c0f\u4e00\u500d\u3002 \u5f62\u5f0f\u5316\u7684\u8bf4\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u64cd\u4f5c \\(f^n(x)\\) \u7684\u6c42\u503c\uff0c\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5bf9 \\(f^1(x),f^2(x),f^4(x),f^{2^k}(x)\\) \u7684\u6c42\u503c\u3002 \u5982\u679c\u8bf4\u6c42 \\(f(x)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(1)\\) \uff0c\u90a3\u4e48\u6c42 \\(f^n(x)\\) \u7684\u590d\u6742\u5ea6\u53ef\u4ee5\u4ece\u539f\u672c\u7684 \\(O(n)\\) \u53d8\u4e3a \\(O(\\log n)\\) \u3002 \u500d\u589e\u7684\u601d\u60f3\u548c\u53ef\u4ee5\u7528\u4e00\u4e2a\u7ecf\u5178\u7684\u4f8b\u5b50\uff0c \u5154\u5b50\u8df3 \u6765\u8bf4\u660e\u3002 \u4f60\u73b0\u5728\u8981\u4ece \\(1\\) \u5f00\u59cb\u8df3\u5230\u67d0\u4e00\u4e2a\u683c\u5b50 \\(t\\) \uff0c\u6bcf\u6b21\u53ea\u80fd\u5411\u524d\u8df3 \\(2^k\\) \u6b65\uff0c\u4f60\u4e0d\u77e5\u9053\u8fd9\u4e2a\u683c\u5b50\u662f\u591a\u5c11\u3002 \u7136\u540e\u4f60\u6bcf\u6b21\u53ef\u4ee5\u8be2\u95ee\u4ea4\u4e92\u5e93\u4e00\u4e2a\u975e\u8d1f\u6574\u6570 \\(k\\) \uff0c\u4ea4\u4e92\u5e93\u4f1a\u544a\u8bc9\u4f60\u4f60\u4ece\u5f53\u524d\u4f4d\u7f6e\u8df3 \\(2^k\\) \u6b65\u662f\u591a\u4e86\u8fd8\u662f\u5c11\u4e86\u6216\u8005\u5230\u4e86\u3002 \u4f60\u9700\u8981\u5728\u5c3d\u91cf\u5c11\u7684\u8be2\u95ee\u6b21\u6570\u5185\u5230\u8fbe \\(t\\) \uff0c\u4fdd\u8bc1 \\(k \\le limit\\) \u3002 \u6bd4\u5982\u4ee4 \\(limit = 8, t = 23\\) \u3002 \u5148\u4ece\u5927\u7684\u5f00\u59cb\u95ee\uff0c \\(k = 8\\) \uff0c \\(2^8 = 256 > 23\\) \u8fc7\u4e86\uff0c\u4e00\u76f4\u5230 \\(2^5 = 32 > 23\\) \u90fd\u662f\u8fc7\u4e86\u3002 \u7136\u540e\u5230\u4e86 \\(k = 4, 2^4 = 16 < 23\\) \uff0c\u53d1\u73b0\u5c11\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u80fd\u65ad\u5b9a \\(t\\) \u5728 \\((16,32)\\) \u4e4b\u95f4\u3002 \u6b64\u65f6\u8df3\u5230 \\(16\\) \uff0c\u6211\u4eec\u7ee7\u7eed\u95ee\uff0c\u663e\u7136 \\(k \\ge 4\\) \u7684\u90fd\u4e0d\u4f1a\u518d\u95ee\u4e86\uff0c\u56e0\u4e3a\u5f53\u524d\u5c31\u662f \\(2^4\\) \uff0c\u518d\u591a\u54ea\u6015\u4e00\u4e2a \\(2^4\\) \uff0c\u5c31\u8df3\u8fc7\u4e86\u3002 \u6240\u4ee5\u4ece \\(k = 3\\) \u5f00\u59cb\u95ee\uff0c \\(16 + 2^3 = 24 > 23\\) \uff0c\u8fc7\u4e86\uff0c\u518d\u95ee \\(k = 2\\) \uff0c \\(16 + 2^2 = 20\\) \uff0c\u5c11\u4e86\uff0c\u6240\u4ee5\u8df3\u5230 \\(20\\) \u3002 \u663e\u7136\u6b64\u65f6 \\(k \\ge 2\\) \u7684\u6211\u4eec\u90fd\u4e0d\u4f1a\u95ee\u4e86\uff0c\u56e0\u4e3a\u5982\u679c\u518d\u95ee\u4e00\u4e2a \\(k = 2\\) \uff0c\u90a3\u4e48\u5c31\u4f1a\u591a \\(2^2\\) \uff0c\u7136\u540e\u8df3\u5230 \\(24\\) \uff0c\u5c31\u8df3\u8fc7\u4e86\u3002 \u6240\u4ee5\u6211\u4eec\u9009\u62e9\u95ee \\(k = 1\\) \uff0c \\(20 + 2^1 = 22 < 23\\) \uff0c\u5c11\u4e86\uff0c\u6240\u4ee5\u8df3\u5230 \\(22\\) \uff0c\u6b64\u65f6\u6700\u540e\u95ee \\(k = 0\\) \uff0c\u7136\u540e\u5c31\u8df3\u5230\u4e86 \\(23\\) \u3002 \u770b\u8d77\u6765\u6709\u70b9\u9ebb\u70e6\uff1f\u4e0d\u8fc7\u8fd9\u4e2a\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u662f \\(O(\\log n)\\) \u7684\uff0c\u5728\u6570\u636e\u5927\u8d77\u6765\u4e4b\u540e\u662f\u975e\u5e38\u597d\u7528\u7684\uff01\uff01 \u6211\u4eec\u603b\u7ed3\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b \uff1a \u53ef\u4ee5\u53d1\u73b0 \\(23 = 2^4 + 2^2 + 2^1 + 2^0\\) \uff0c\u8fd9\u662f\u4e8c\u8fdb\u5236\u62c6\u5206\uff0c\u800c\u51fa\u73b0\u7684\u6307\u6570\uff0c\u6070\u597d\u90fd\u662f\u95ee\u4ea4\u4e92\u5e93\u4e86\u4e4b\u540e\u6211\u4eec\u8df3\u4e86\u7684 \\(k\\) \uff0c\u6240\u4ee5\u500d\u589e\u6709\u65f6\u4e5f\u53ef\u4ee5\u770b\u4f5c\u4e00\u79cd\u4e8c\u8fdb\u5236\u62c6\u5206\u3002 \u6211\u4eec\u6bcf\u6b21\u8df3\u4e86\u8fc7\u540e\uff0c\u5047\u8bbe\u4e4b\u524d\u95ee\u4e86 \\(k\\) \uff0c\u90a3\u4e48\u4e0b\u4e00\u6b21\u7edd\u5bf9\u4e0d\u4f1a\u95ee \\(\\ge k\\) \u7684\u4e86\uff0c\u8fd9\u4e2a\u9053\u7406\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u6b64\u65f6\u518d\u591a\u52a0\u4e00\u4e2a \\(2^k\\) \uff0c\u5c31\u8df3\u5230\u4e86 \\(2^{k + 1}\\) \uff0c\u5df2\u7ecf\u8df3\u5230\u4e86\u4e0a\u754c\uff08\u5f00\u533a\u95f4\uff09\u4e86\uff0c\u80af\u5b9a\u4e0d\u884c\u3002\uff08\u8fd9\u4e2a\u70b9\u5728\u6211\u4eec\u5199\u5faa\u73af\u7684\u65f6\u5019\u4f1a\u7528\u5230\uff09 \u500d\u589e\u5c31\u662f\u6bcf\u6b21\u770b\u201c\u591a\u4e86\u6ca1\u6709\uff1f\u5c11\u4e86\u6ca1\u6709\uff1f\u201d\uff0c\u7136\u540e\u505a\u51fa\u5bf9\u4e8e\u8303\u56f4\u7684\u6269\u5927\u6216\u8005\u7f29\u5c0f\uff0c\u5229\u7528\u4e8c\u8fdb\u5236\u62c6\u5206\uff0c\u901a\u8fc7 \\(2\\) \u7684\u6574\u6570\u6b21\u5e42\u6765\u6784\u9020\u4efb\u610f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u7684\u7b54\u6848\u3002 \u5199\u4e00\u4efd\u7b80\u5355\u7684\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 auto ask_over_or_not = []( int x ) -> bool { cout << \"? \" << x << endl ; int xx ; cin >> xx ; return xx ; }; int nowpos = 1 ; for ( int j = 6 ; j >= 0 ; -- j ) { // \u6839\u636e\u603b\u7ed3\u7684\u7b2c\u4e8c\u70b9\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5012\u5e8f\u5faa\u73af\u4e00\u4e0b\u5c31\u884c\u4e86\u3002 bool status = ask_over_or_not ( j ); if ( status == 0 ) nowpos += ( 1 << j ); } cout << \"! \" << nowpos << endl ; \u5f53\u7136\uff0c\u4f60\u540c\u6837\u53ef\u4ee5\u4ece\u5c0f\u5f00\u59cb\u8df3\uff0c\u672c\u8d28\u4e0a\u6ca1\u6709\u4efb\u4f55\u533a\u522b\uff0c\u53ea\u662f\u6211\u4eec\u4ee3\u7801\u5b9e\u73b0\u7684\u65f6\u5019\u679a\u4e3e\u6307\u6570\u7684\u987a\u5e8f\u4ece\u964d\u5e8f\u53d8\u6210\u4e86\u5347\u5e8f\u3002 \u4f8b\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 CF1647E \uff0c \u9898\u89e3 \u3002 Warning \u63a8\u8350\u6c42 \\(to\\) \u7684\u65f6\u5019\u628a \\(j\\) \u653e\u5728\u5916\u9762\uff0c\u56e0\u4e3a\u5982\u679c\u6240\u6709\u7684 \\(i\\) \u4f9d\u6b21\u7ec4\u6210\u7684\u4e0d\u662f\u4e00\u4e2a\u5355\u8c03\u7684\u5e8f\u5217\uff0c\u8f6c\u79fb\u7684\u65f6\u5019\u53ef\u80fd\u51fa\u73b0\u4ece \\(to(3) \\to to(1)\\) \u8fd9\u79cd\u3002 \u90a3\u4e48\u628a \\(i\\) \u653e\u5728\u5916\u9762\u5c31\u4f1a\u6709\u95ee\u9898\uff0c\u5982\u679c \\(i\\) \u662f\u5355\u8c03\u7684\uff0c\u90a3\u4e48\u600e\u6837\u90fd\u884c\u3002 \u8fd9\u5c31\u662f\u500d\u589e\uff0c\u5f88\u6709\u610f\u601d\u5427\uff0c\u500d\u589e\u8fd8\u6709\u5f88\u591a\u6bd4\u8f83\u6709\u610f\u601d\u7684\u5e94\u7528\uff0c \u5e94\u7528 \u03c8(\uff40\u2207\u00b4)\u03c8 ST \u8868 \u03c8(\uff40\u2207\u00b4)\u03c8 \u533a\u95f4\u6700\u503c\u95ee\u9898\u53ef\u4ee5\u8003\u8651\u7ebf\u6bb5\u6811\u89e3\u51b3\u3002 \u4e0d\u8fc7\u6709\u4e00\u4e2a\u66f4\u597d\u5199\u4e00\u70b9\u7684\u65b9\u6cd5\uff0c \\(\\text{O}(n \\log n)\\) \u9884\u5904\u7406\uff0c \\(\\text{O}(1)\\) \u8be2\u95ee\uff0c\u4f46\u662f\u4e0d\u80fd\u5e26\u4fee\u3002 \u8fd9\u5c31\u662f ST \u8868\uff0c\u5229\u7528\u500d\u589e\u7684\u601d\u60f3\u8003\u8651\uff1a \u8bbe \\(f_{i,j}\\) \u8868\u793a\u4ece \\(i\\) \u5f00\u59cb\u7684 \\(2^j\\) \u4e2a\u6570\u5f53\u4e2d\u7684\u6700\u503c\u3002 \u7c7b\u4f3c\u7ebf\u6bb5\u6811\uff0c\u628a\u4e24\u4e2a\u534a\u533a\u95f4\u7684\u4fe1\u606f\u4e0a\u4f20\u5230\u5927\u533a\u95f4\u3002 \u90a3\u4e48 \\(f_{i,j}=\\max(f_{i,j-1},f_{i+2^{j-1},j-1})\\) \u8be2\u95ee\u533a\u95f4 \\([l,r]\\) \u7684\u6700\u503c\u7684\u65f6\u5019\uff0c\u627e\u5230\u4e00\u4e2a \\(k\\) \u4f7f\u5f97 \\(2^k \\le r-l+1 \\le 2^{k+1}\\) \uff08\u7c7b\u4f3c\u6211\u4eec\u4e0a\u9762\u5154\u5b50\u8df3\u8bf4\u7684\u4e0a\u754c\u548c\u4e0b\u754c\uff09\u3002 \u90a3\u4e48 \\(ans=\\max(f_{l,k},f_{r-2^k+1,k})\\) \u3002\u8fd9\u4e24\u4e2a\u533a\u95f4\u4f1a\u8986\u76d6\uff0c\u4f46\u662f\u6ca1\u6709\u5f71\u54cd\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 const int si = 1e5 + 10 ; int st [ si ][ 20 ]; int a [ si ], Log [ si ]; void ST_prework () { for ( int i = 2 ; i <= n ; ++ i ) { Log [ i ] = Log [ i >> 1 ] + 1 ; } for ( int i = 1 ; i <= n ; ++ i ) { st [ i ][ 0 ] = a [ i ]; } for ( int j = 1 ; j <= Log [ n ]; ++ j ) { for ( int i = 1 ; i <= ( n + 1 ) - ( 1 << j ); ++ i ) { // \u6ce8\u610f\u5faa\u5e8f\uff0c\u6b64\u5904\u4e3a\u4e86\u65e0\u540e\u6548\u6027\u5fc5\u987b\u8fd9\u4e48\u5199. st [ i ][ j ] = max ( st [ i ][ j - 1 ], st [ i + ( 1 << ( j - 1 ))][ j - 1 ]); } } } inline int query ( int l , int r ) { int k = Log [ r - l + 1 ]; return max ( f [ l ][ k ], f [ r - ( 1 << k ) + 1 ][ k ]); } ST \u8868\u672c\u8d28\u4e0a\u662f\u5bf9 \u533a\u95f4\u53ef\u91cd\u590d\u8d21\u732e\u95ee\u9898 \u7684\u6c42\u89e3\u3002 \u53ef\u91cd\u590d\u8d21\u732e\u95ee\u9898\u662f\u5565\uff1f\uff08\u6765\u6e90 OI-wiki \uff09 \u53ef\u91cd\u590d\u8d21\u732e\u95ee\u9898 \u662f\u6307\u5bf9\u4e8e\u8fd0\u7b97 \\(\\operatorname{opt}\\) \uff0c\u6ee1\u8db3 \\(x\\operatorname{opt} x=x\\) \uff0c\u5219\u5bf9\u5e94\u7684\u533a\u95f4\u8be2\u95ee\u5c31\u662f\u4e00\u4e2a\u53ef\u91cd\u590d\u8d21\u732e\u95ee\u9898\u3002\u4f8b\u5982\uff0c\u6700\u5927\u503c\u6709 \\(\\max(x,x)=x\\) \uff0cgcd \u6709 \\(\\operatorname{gcd}(x,x)=x\\) \uff0c\u6240\u4ee5 RMQ \u548c\u533a\u95f4 GCD \u5c31\u662f\u4e00\u4e2a\u53ef\u91cd\u590d\u8d21\u732e\u95ee\u9898\u3002\u50cf\u533a\u95f4\u548c\u5c31\u4e0d\u5177\u6709\u8fd9\u4e2a\u6027\u8d28\uff0c\u5982\u679c\u6c42\u533a\u95f4\u548c\u7684\u65f6\u5019\u91c7\u7528\u7684\u9884\u5904\u7406\u533a\u95f4\u91cd\u53e0\u4e86\uff0c\u5219\u4f1a\u5bfc\u81f4\u91cd\u53e0\u90e8\u5206\u88ab\u8ba1\u7b97\u4e24\u6b21\uff0c\u8fd9\u662f\u6211\u4eec\u6240\u4e0d\u613f\u610f\u770b\u5230\u7684\u3002\u53e6\u5916\uff0c \\(\\operatorname{opt}\\) \u8fd8\u5fc5\u987b\u6ee1\u8db3\u7ed3\u5408\u5f8b\u624d\u80fd\u4f7f\u7528 ST \u8868\u6c42\u89e3\u3002 \u500d\u589e\u6c42 LCA \u03c8(\uff40\u2207\u00b4)\u03c8 \u89c1 \u6700\u8fd1\u516c\u5171\u7956\u5148 \u3002 \u500d\u589e\u6c42 Suffix Array \u03c8(\uff40\u2207\u00b4)\u03c8 SA \u8fd8\u6ca1\u5b66\u3002","title":"\u500d\u589e"},{"location":"algor/basic/binary-lifting/#_1","text":"\u5e8f\u5217\u500d\u589e\u672c\u8d28\u4e0a\u662f\u5bf9\u4e8e\u9012\u63a8\u7684\u4e00\u79cd\u4f18\u5316\uff0c\u901a\u5e38\u548c\u4e8c\u8fdb\u5236\u62c6\u5206\uff08\u4efb\u610f\u4e00\u4e2a\u6b63\u6574\u6570\u90fd\u53ef\u4ee5\u88ab\u62c6\u6210 \\(2\\) \u7684\u6574\u6570\u6b21\u5e42\u7684\u548c\uff09\u642d\u914d\u4f7f\u7528\u3002 \u987e\u540d\u601d\u4e49\uff0c\u500d\u589e\uff0c\u5c31\u662f\u6210\u500d\u589e\u957f\uff0c\u6bcf\u6b21\u5c06\u8303\u56f4\u6269\u5927\u6216\u8005\u51cf\u5c0f\u4e00\u500d\u3002 \u5f62\u5f0f\u5316\u7684\u8bf4\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u64cd\u4f5c \\(f^n(x)\\) \u7684\u6c42\u503c\uff0c\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5bf9 \\(f^1(x),f^2(x),f^4(x),f^{2^k}(x)\\) \u7684\u6c42\u503c\u3002 \u5982\u679c\u8bf4\u6c42 \\(f(x)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(1)\\) \uff0c\u90a3\u4e48\u6c42 \\(f^n(x)\\) \u7684\u590d\u6742\u5ea6\u53ef\u4ee5\u4ece\u539f\u672c\u7684 \\(O(n)\\) \u53d8\u4e3a \\(O(\\log n)\\) \u3002 \u500d\u589e\u7684\u601d\u60f3\u548c\u53ef\u4ee5\u7528\u4e00\u4e2a\u7ecf\u5178\u7684\u4f8b\u5b50\uff0c \u5154\u5b50\u8df3 \u6765\u8bf4\u660e\u3002 \u4f60\u73b0\u5728\u8981\u4ece \\(1\\) \u5f00\u59cb\u8df3\u5230\u67d0\u4e00\u4e2a\u683c\u5b50 \\(t\\) \uff0c\u6bcf\u6b21\u53ea\u80fd\u5411\u524d\u8df3 \\(2^k\\) \u6b65\uff0c\u4f60\u4e0d\u77e5\u9053\u8fd9\u4e2a\u683c\u5b50\u662f\u591a\u5c11\u3002 \u7136\u540e\u4f60\u6bcf\u6b21\u53ef\u4ee5\u8be2\u95ee\u4ea4\u4e92\u5e93\u4e00\u4e2a\u975e\u8d1f\u6574\u6570 \\(k\\) \uff0c\u4ea4\u4e92\u5e93\u4f1a\u544a\u8bc9\u4f60\u4f60\u4ece\u5f53\u524d\u4f4d\u7f6e\u8df3 \\(2^k\\) \u6b65\u662f\u591a\u4e86\u8fd8\u662f\u5c11\u4e86\u6216\u8005\u5230\u4e86\u3002 \u4f60\u9700\u8981\u5728\u5c3d\u91cf\u5c11\u7684\u8be2\u95ee\u6b21\u6570\u5185\u5230\u8fbe \\(t\\) \uff0c\u4fdd\u8bc1 \\(k \\le limit\\) \u3002 \u6bd4\u5982\u4ee4 \\(limit = 8, t = 23\\) \u3002 \u5148\u4ece\u5927\u7684\u5f00\u59cb\u95ee\uff0c \\(k = 8\\) \uff0c \\(2^8 = 256 > 23\\) \u8fc7\u4e86\uff0c\u4e00\u76f4\u5230 \\(2^5 = 32 > 23\\) \u90fd\u662f\u8fc7\u4e86\u3002 \u7136\u540e\u5230\u4e86 \\(k = 4, 2^4 = 16 < 23\\) \uff0c\u53d1\u73b0\u5c11\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u80fd\u65ad\u5b9a \\(t\\) \u5728 \\((16,32)\\) \u4e4b\u95f4\u3002 \u6b64\u65f6\u8df3\u5230 \\(16\\) \uff0c\u6211\u4eec\u7ee7\u7eed\u95ee\uff0c\u663e\u7136 \\(k \\ge 4\\) \u7684\u90fd\u4e0d\u4f1a\u518d\u95ee\u4e86\uff0c\u56e0\u4e3a\u5f53\u524d\u5c31\u662f \\(2^4\\) \uff0c\u518d\u591a\u54ea\u6015\u4e00\u4e2a \\(2^4\\) \uff0c\u5c31\u8df3\u8fc7\u4e86\u3002 \u6240\u4ee5\u4ece \\(k = 3\\) \u5f00\u59cb\u95ee\uff0c \\(16 + 2^3 = 24 > 23\\) \uff0c\u8fc7\u4e86\uff0c\u518d\u95ee \\(k = 2\\) \uff0c \\(16 + 2^2 = 20\\) \uff0c\u5c11\u4e86\uff0c\u6240\u4ee5\u8df3\u5230 \\(20\\) \u3002 \u663e\u7136\u6b64\u65f6 \\(k \\ge 2\\) \u7684\u6211\u4eec\u90fd\u4e0d\u4f1a\u95ee\u4e86\uff0c\u56e0\u4e3a\u5982\u679c\u518d\u95ee\u4e00\u4e2a \\(k = 2\\) \uff0c\u90a3\u4e48\u5c31\u4f1a\u591a \\(2^2\\) \uff0c\u7136\u540e\u8df3\u5230 \\(24\\) \uff0c\u5c31\u8df3\u8fc7\u4e86\u3002 \u6240\u4ee5\u6211\u4eec\u9009\u62e9\u95ee \\(k = 1\\) \uff0c \\(20 + 2^1 = 22 < 23\\) \uff0c\u5c11\u4e86\uff0c\u6240\u4ee5\u8df3\u5230 \\(22\\) \uff0c\u6b64\u65f6\u6700\u540e\u95ee \\(k = 0\\) \uff0c\u7136\u540e\u5c31\u8df3\u5230\u4e86 \\(23\\) \u3002 \u770b\u8d77\u6765\u6709\u70b9\u9ebb\u70e6\uff1f\u4e0d\u8fc7\u8fd9\u4e2a\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u662f \\(O(\\log n)\\) \u7684\uff0c\u5728\u6570\u636e\u5927\u8d77\u6765\u4e4b\u540e\u662f\u975e\u5e38\u597d\u7528\u7684\uff01\uff01 \u6211\u4eec\u603b\u7ed3\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b \uff1a \u53ef\u4ee5\u53d1\u73b0 \\(23 = 2^4 + 2^2 + 2^1 + 2^0\\) \uff0c\u8fd9\u662f\u4e8c\u8fdb\u5236\u62c6\u5206\uff0c\u800c\u51fa\u73b0\u7684\u6307\u6570\uff0c\u6070\u597d\u90fd\u662f\u95ee\u4ea4\u4e92\u5e93\u4e86\u4e4b\u540e\u6211\u4eec\u8df3\u4e86\u7684 \\(k\\) \uff0c\u6240\u4ee5\u500d\u589e\u6709\u65f6\u4e5f\u53ef\u4ee5\u770b\u4f5c\u4e00\u79cd\u4e8c\u8fdb\u5236\u62c6\u5206\u3002 \u6211\u4eec\u6bcf\u6b21\u8df3\u4e86\u8fc7\u540e\uff0c\u5047\u8bbe\u4e4b\u524d\u95ee\u4e86 \\(k\\) \uff0c\u90a3\u4e48\u4e0b\u4e00\u6b21\u7edd\u5bf9\u4e0d\u4f1a\u95ee \\(\\ge k\\) \u7684\u4e86\uff0c\u8fd9\u4e2a\u9053\u7406\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u6b64\u65f6\u518d\u591a\u52a0\u4e00\u4e2a \\(2^k\\) \uff0c\u5c31\u8df3\u5230\u4e86 \\(2^{k + 1}\\) \uff0c\u5df2\u7ecf\u8df3\u5230\u4e86\u4e0a\u754c\uff08\u5f00\u533a\u95f4\uff09\u4e86\uff0c\u80af\u5b9a\u4e0d\u884c\u3002\uff08\u8fd9\u4e2a\u70b9\u5728\u6211\u4eec\u5199\u5faa\u73af\u7684\u65f6\u5019\u4f1a\u7528\u5230\uff09 \u500d\u589e\u5c31\u662f\u6bcf\u6b21\u770b\u201c\u591a\u4e86\u6ca1\u6709\uff1f\u5c11\u4e86\u6ca1\u6709\uff1f\u201d\uff0c\u7136\u540e\u505a\u51fa\u5bf9\u4e8e\u8303\u56f4\u7684\u6269\u5927\u6216\u8005\u7f29\u5c0f\uff0c\u5229\u7528\u4e8c\u8fdb\u5236\u62c6\u5206\uff0c\u901a\u8fc7 \\(2\\) \u7684\u6574\u6570\u6b21\u5e42\u6765\u6784\u9020\u4efb\u610f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u7684\u7b54\u6848\u3002 \u5199\u4e00\u4efd\u7b80\u5355\u7684\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 auto ask_over_or_not = []( int x ) -> bool { cout << \"? \" << x << endl ; int xx ; cin >> xx ; return xx ; }; int nowpos = 1 ; for ( int j = 6 ; j >= 0 ; -- j ) { // \u6839\u636e\u603b\u7ed3\u7684\u7b2c\u4e8c\u70b9\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5012\u5e8f\u5faa\u73af\u4e00\u4e0b\u5c31\u884c\u4e86\u3002 bool status = ask_over_or_not ( j ); if ( status == 0 ) nowpos += ( 1 << j ); } cout << \"! \" << nowpos << endl ; \u5f53\u7136\uff0c\u4f60\u540c\u6837\u53ef\u4ee5\u4ece\u5c0f\u5f00\u59cb\u8df3\uff0c\u672c\u8d28\u4e0a\u6ca1\u6709\u4efb\u4f55\u533a\u522b\uff0c\u53ea\u662f\u6211\u4eec\u4ee3\u7801\u5b9e\u73b0\u7684\u65f6\u5019\u679a\u4e3e\u6307\u6570\u7684\u987a\u5e8f\u4ece\u964d\u5e8f\u53d8\u6210\u4e86\u5347\u5e8f\u3002","title":"\u6982\u8ff0"},{"location":"algor/basic/binary-lifting/#_2","text":"CF1647E \uff0c \u9898\u89e3 \u3002 Warning \u63a8\u8350\u6c42 \\(to\\) \u7684\u65f6\u5019\u628a \\(j\\) \u653e\u5728\u5916\u9762\uff0c\u56e0\u4e3a\u5982\u679c\u6240\u6709\u7684 \\(i\\) \u4f9d\u6b21\u7ec4\u6210\u7684\u4e0d\u662f\u4e00\u4e2a\u5355\u8c03\u7684\u5e8f\u5217\uff0c\u8f6c\u79fb\u7684\u65f6\u5019\u53ef\u80fd\u51fa\u73b0\u4ece \\(to(3) \\to to(1)\\) \u8fd9\u79cd\u3002 \u90a3\u4e48\u628a \\(i\\) \u653e\u5728\u5916\u9762\u5c31\u4f1a\u6709\u95ee\u9898\uff0c\u5982\u679c \\(i\\) \u662f\u5355\u8c03\u7684\uff0c\u90a3\u4e48\u600e\u6837\u90fd\u884c\u3002 \u8fd9\u5c31\u662f\u500d\u589e\uff0c\u5f88\u6709\u610f\u601d\u5427\uff0c\u500d\u589e\u8fd8\u6709\u5f88\u591a\u6bd4\u8f83\u6709\u610f\u601d\u7684\u5e94\u7528\uff0c","title":"\u4f8b\u9898"},{"location":"algor/basic/binary-lifting/#_3","text":"","title":"\u5e94\u7528"},{"location":"algor/basic/binary-lifting/#st","text":"\u533a\u95f4\u6700\u503c\u95ee\u9898\u53ef\u4ee5\u8003\u8651\u7ebf\u6bb5\u6811\u89e3\u51b3\u3002 \u4e0d\u8fc7\u6709\u4e00\u4e2a\u66f4\u597d\u5199\u4e00\u70b9\u7684\u65b9\u6cd5\uff0c \\(\\text{O}(n \\log n)\\) \u9884\u5904\u7406\uff0c \\(\\text{O}(1)\\) \u8be2\u95ee\uff0c\u4f46\u662f\u4e0d\u80fd\u5e26\u4fee\u3002 \u8fd9\u5c31\u662f ST \u8868\uff0c\u5229\u7528\u500d\u589e\u7684\u601d\u60f3\u8003\u8651\uff1a \u8bbe \\(f_{i,j}\\) \u8868\u793a\u4ece \\(i\\) \u5f00\u59cb\u7684 \\(2^j\\) \u4e2a\u6570\u5f53\u4e2d\u7684\u6700\u503c\u3002 \u7c7b\u4f3c\u7ebf\u6bb5\u6811\uff0c\u628a\u4e24\u4e2a\u534a\u533a\u95f4\u7684\u4fe1\u606f\u4e0a\u4f20\u5230\u5927\u533a\u95f4\u3002 \u90a3\u4e48 \\(f_{i,j}=\\max(f_{i,j-1},f_{i+2^{j-1},j-1})\\) \u8be2\u95ee\u533a\u95f4 \\([l,r]\\) \u7684\u6700\u503c\u7684\u65f6\u5019\uff0c\u627e\u5230\u4e00\u4e2a \\(k\\) \u4f7f\u5f97 \\(2^k \\le r-l+1 \\le 2^{k+1}\\) \uff08\u7c7b\u4f3c\u6211\u4eec\u4e0a\u9762\u5154\u5b50\u8df3\u8bf4\u7684\u4e0a\u754c\u548c\u4e0b\u754c\uff09\u3002 \u90a3\u4e48 \\(ans=\\max(f_{l,k},f_{r-2^k+1,k})\\) \u3002\u8fd9\u4e24\u4e2a\u533a\u95f4\u4f1a\u8986\u76d6\uff0c\u4f46\u662f\u6ca1\u6709\u5f71\u54cd\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 const int si = 1e5 + 10 ; int st [ si ][ 20 ]; int a [ si ], Log [ si ]; void ST_prework () { for ( int i = 2 ; i <= n ; ++ i ) { Log [ i ] = Log [ i >> 1 ] + 1 ; } for ( int i = 1 ; i <= n ; ++ i ) { st [ i ][ 0 ] = a [ i ]; } for ( int j = 1 ; j <= Log [ n ]; ++ j ) { for ( int i = 1 ; i <= ( n + 1 ) - ( 1 << j ); ++ i ) { // \u6ce8\u610f\u5faa\u5e8f\uff0c\u6b64\u5904\u4e3a\u4e86\u65e0\u540e\u6548\u6027\u5fc5\u987b\u8fd9\u4e48\u5199. st [ i ][ j ] = max ( st [ i ][ j - 1 ], st [ i + ( 1 << ( j - 1 ))][ j - 1 ]); } } } inline int query ( int l , int r ) { int k = Log [ r - l + 1 ]; return max ( f [ l ][ k ], f [ r - ( 1 << k ) + 1 ][ k ]); } ST \u8868\u672c\u8d28\u4e0a\u662f\u5bf9 \u533a\u95f4\u53ef\u91cd\u590d\u8d21\u732e\u95ee\u9898 \u7684\u6c42\u89e3\u3002 \u53ef\u91cd\u590d\u8d21\u732e\u95ee\u9898\u662f\u5565\uff1f\uff08\u6765\u6e90 OI-wiki \uff09 \u53ef\u91cd\u590d\u8d21\u732e\u95ee\u9898 \u662f\u6307\u5bf9\u4e8e\u8fd0\u7b97 \\(\\operatorname{opt}\\) \uff0c\u6ee1\u8db3 \\(x\\operatorname{opt} x=x\\) \uff0c\u5219\u5bf9\u5e94\u7684\u533a\u95f4\u8be2\u95ee\u5c31\u662f\u4e00\u4e2a\u53ef\u91cd\u590d\u8d21\u732e\u95ee\u9898\u3002\u4f8b\u5982\uff0c\u6700\u5927\u503c\u6709 \\(\\max(x,x)=x\\) \uff0cgcd \u6709 \\(\\operatorname{gcd}(x,x)=x\\) \uff0c\u6240\u4ee5 RMQ \u548c\u533a\u95f4 GCD \u5c31\u662f\u4e00\u4e2a\u53ef\u91cd\u590d\u8d21\u732e\u95ee\u9898\u3002\u50cf\u533a\u95f4\u548c\u5c31\u4e0d\u5177\u6709\u8fd9\u4e2a\u6027\u8d28\uff0c\u5982\u679c\u6c42\u533a\u95f4\u548c\u7684\u65f6\u5019\u91c7\u7528\u7684\u9884\u5904\u7406\u533a\u95f4\u91cd\u53e0\u4e86\uff0c\u5219\u4f1a\u5bfc\u81f4\u91cd\u53e0\u90e8\u5206\u88ab\u8ba1\u7b97\u4e24\u6b21\uff0c\u8fd9\u662f\u6211\u4eec\u6240\u4e0d\u613f\u610f\u770b\u5230\u7684\u3002\u53e6\u5916\uff0c \\(\\operatorname{opt}\\) \u8fd8\u5fc5\u987b\u6ee1\u8db3\u7ed3\u5408\u5f8b\u624d\u80fd\u4f7f\u7528 ST \u8868\u6c42\u89e3\u3002","title":"ST \u8868"},{"location":"algor/basic/binary-lifting/#lca","text":"\u89c1 \u6700\u8fd1\u516c\u5171\u7956\u5148 \u3002","title":"\u500d\u589e\u6c42 LCA"},{"location":"algor/basic/binary-lifting/#suffix-array","text":"SA \u8fd8\u6ca1\u5b66\u3002","title":"\u500d\u589e\u6c42 Suffix Array"},{"location":"algor/basic/binary-operation/","text":"\u57fa\u7840\u8fd0\u7b97\u7b26 \u03c8(\uff40\u2207\u00b4)\u03c8 and,or,xor \u7684\u663e\u8457\u7279\u70b9\u5c31\u662f \u4e8c\u8fdb\u5236\u4e0b\u4e0d\u8fdb\u4f4d \u3002 \u4e0b\u9762\u8bf4\u7684\u201c\u6309\u4f4d\u201d\uff0c\u6307\u7684\u662f\u628a\u53c2\u52a0\u8fd0\u7b97\u7684\u4e24\u4e2a\u4e8c\u8fdb\u5236\u6570\u53d8\u6210\u540c\u4f4d\u6570\u7684\uff0c\u7136\u540e\u6bcf\u4e00\u4f4d\u5bf9\u5e94\u8fdb\u884c\u64cd\u4f5c\u3002 \u6309\u4f4d\u4e0e & \uff0c bitand \u7279\u70b9\uff1a\u4e8c\u5143\u8fd0\u7b97\u7b26\uff0c\u4e8c\u8fdb\u5236\u4e0b\u6309\u4f4d\u8fdb\u884c\u8fd0\u7b97\uff0c\u5168 \\(1\\) \u5219 \\(1\\) \uff0c\u53cd\u4e4b\u4e3a \\(0\\) \u3002 \u6027\u8d28\uff1a \\(a \\& b \\le \\min(a,b)\\) \uff08\u624b\u63a8\u5373\u53ef\uff09\u3002 \u6309\u4f4d\u6216 | \uff0c bitor \u7279\u70b9\uff1a\u4e8c\u5143\u8fd0\u7b97\u7b26\uff0c\u4e8c\u8fdb\u5236\u4e0b\u6309\u4f4d\u8fdb\u884c\u8fd0\u7b97\uff0c\u6709 \\(1\\) \u5219 \\(1\\) \uff0c\u5168 \\(0\\) \u5219 \\(0\\) \u3002 \u6027\u8d28\uff1a \\(a | b \\ge \\max(a,b)\\) \u6709\u4e2a\u602a\u60f3\u6cd5\uff1a\u65e2\u7136\u4e0d\u7ba1\u662f\u5565 | 1 \u90fd\u662f 1\uff0c\u90a3\u662f\u4e0d\u662f\u53ef\u4ee5\u5f88\u5feb\u7684\u628a\u67d0\u4e2a\u6570\u53d8\u6210 \\(2^n-1\\) \u7684\u5f62\u5f0f\uff1f \u6309\u4f4d\u5f02\u6216 ^ \uff0c xor \u7279\u70b9\uff1a\u4e8c\u5143\u8fd0\u7b97\u7b26\uff0c\u4e8c\u8fdb\u5236\u4e0b\u6309\u4f4d\u8fdb\u884c\u8fd0\u7b97\uff0c\u76f8\u53cd\u5219 \\(1\\) \uff0c\u53cd\u4e4b\u5219 \\(0\\) \u3002 \u76f8\u5f53\u4e8e\u4e8c\u8fdb\u5236\u4e0b\u7684\u4e0d\u8fdb\u4f4d\u52a0\u6cd5\u3002 \\(x \\operatorname{xor} y = k \\ \\Rightarrow x \\operatorname{xor} k =y \\ \\Rightarrow y \\operatorname{xor} k=x\\) \u53ef\u4ee5\u7528\u4e8e\u6210\u5bf9\u53d8\u6362\uff08\u56fe\u8bba\u5f53\u4e2d\u5e38\u7528\uff09\u3002 \u4ee4 \\(n\\) \u4e3a\u5076\u6570\uff0c\u90a3\u4e48 \\(n \\operatorname{xor} 1 = n+1\\) \u3002 \u4ee4 \\(n\\) \u4e3a\u5947\u6570\uff0c\u90a3\u4e48 \\(n \\operatorname{xor} 1 =n-1\\) \u3002 \u6309\u4f4d\u53d6\u53cd ~ \uff0c not \u7279\u70b9\uff1a\u4e00\u5143\u8fd0\u7b97\u7b26\uff0c\u4e8c\u8fdb\u5236\u4e0b\u7684\u6bcf\u4e00\u4f4d\u90fd\u53d6\u53cd\uff08\u5305\u62ec\u7b26\u53f7\u4f4d\uff09\u3002 \u5de6\u79fb << \u7279\u70b9\uff1a\u4e00\u5143\u8fd0\u7b97\u7b26\uff0c\u4e8c\u8fdb\u5236\u4e0b\u628a\u6bcf\u4e00\u4f4d\u5411\u5de6\u5e73\u79fb\uff0c\u9ad8\u4f4d\u8d8a\u754c\u5219\u820d\u5f03\uff0c\u4f4e\u4f4d\u7528 \\(0\\) \u8865\u8db3\u3002 \u516c\u5f0f \\(1 << n =2^n,x<<n=x\\times 2^n\\) \u516c\u5f0f \u7b97\u672f\u53f3\u79fb >> \u7279\u70b9\uff1a\u4e00\u5143\u8fd0\u7b97\u7b26\uff0c\u4e8c\u8fdb\u5236\u4e0b\u628a\u6bcf\u4e00\u4f4d\u5411\u53f3\u5e73\u79fb\uff0c\u4f4e\u4f4d\u8d8a\u754c\u5219\u820d\u5f03\uff0c\u9ad8\u4f4d\u7528 \u7b26\u53f7\u4f4d \u8865\u8db3\u3002 \\(n>>1=\\lfloor \\frac{n}{2}\\rfloor\\) \u3002 GNU \u7684 GCC\u548cG++\u90fd\u4f7f\u7528\u7b97\u672f\u53f3\u79fb\uff0c\u903b\u8f91\u53f3\u79fb\u9ad8\u4f4d\u7528 \\(0\\) \u8865\u8db3\u3002 \u4e00\u4e9b\u6280\u5de7 \u03c8(\uff40\u2207\u00b4)\u03c8 lowbit \u03c8(\uff40\u2207\u00b4)\u03c8 \\(\\operatorname{lowbit}(n)\\) \u8868\u793a\u4e8c\u8fdb\u5236\u4e0b \\(n\\) \u7684\u6700\u4f4e\u7684\u4e00\u4e2a \\(1\\) \u548c\u5b83\u540e\u9762\u7684 \\(0\\) \u7ec4\u6210\u7684\u6570\u3002 \u516c\u5f0f\uff1a \\(\\operatorname{lowbit}(n)=n \\& -n\\) \u3002 popcnt \u03c8(\uff40\u2207\u00b4)\u03c8 \\(\\operatorname{popcnt}(n)\\) \u8868\u793a\u4e8c\u8fdb\u5236\u4e0b \\(n\\) \u6709\u591a\u5c11\u4f4d\u662f \\(1\\) \u3002 \u53ef\u4ee5\u76f4\u63a5\u7528 1 2 int __builtin_popcount ( unsigned int x ) int __builtin_popcountll ( unsigned long long x ) \u6bd5\u7adf\u73b0\u5728\u7684 NOI Linux 2.0 \u652f\u6301 C++14 \u548c G++ 9.8.3\u3002 \u4e0d\u8fc7\u4e5f\u53ef\u4ee5\u624b\u5199 1 2 3 4 5 int res = 0 ; while ( n ){ ++ res ; n -= lowbit ( n ); } \u72b6\u538b \u03c8(\uff40\u2207\u00b4)\u03c8 \u628a\u72b6\u6001\u8868\u793a\u4e3a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u4e4b\u540e\u8fdb\u884c\u64cd\u4f5c\uff08\u5f53\u7136\u53ef\u4ee5\u7528 bitset\uff0c\u4f46\u662f\u80af\u5b9a\u6ca1\u6709\u76f4\u63a5\u62ff\u4e00\u4e2a\u6570\u6765\u505a\u597d\uff09\u3002 \u5047\u8bbe\u6700\u4f4e\u4f4d\u4e3a\u7b2c\u4e00\u4f4d\u3002 1 2 3 4 5 ( highest ) ( lowest ) | | V V bit : 9 8 7 6 5 4 3 2 1 num : 0 1 1 1 0 0 0 1 1 \u90a3\u4e48\u53ef\u4ee5\u6709\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u68c0\u6d4b\u7b2c \\(k\\) \u4f4d\u662f \\(0/1\\) \uff1a (n&(1<<(k-1)))!=0 -> 1 \u7ed9\u7b2c \\(k\\) \u4f4d\u53d6\u53cd\uff1a n^=(1<<(k-1)) \u5c06\u7b2c \\(k\\) \u4f4d\u8d4b\u503c\u4e3a \\(1\\) \uff1a n|=(1<<(k-1)) \u5c06\u7b2c \\(k\\) \u4f4d\u8d4b\u503c\u4e3a \\(0\\) \uff1a n&=(~(1<<(k-1))) \u56e0\u4e3a C++ \u9ed8\u8ba4\u662f \\(0\\) \u5f00\u5934\u7684\uff0c\u6240\u4ee5\u8981 \\(-1\\) \u3002 \u4e0d\u8fc7\u7ec8\u6001\u4ecd\u65e7\u662f \\(1<<n\\) \uff08\u548c\u6700\u4f4e\u4f4d\u4e3a \\(0\\) \u7684\u4e0d\u51cf\u4e00\u5199\u6cd5\u662f\u4e00\u6837\u7684\uff09 \u8bf4\u767d\u4e86\uff0c\u5982\u679c\u4ee5 \\(0\\) \u505a\u6700\u4f4e\u4f4d\uff0c\u4e0d \\(-1\\) \u3002\u4ee5 \\(1\\) \u505a\u6700\u4f4e\u4f4d\uff0c\u8981 \\(-1\\) \uff0c\u4f46\u662f\uff1b\u8fd9\u4e24\u79cd\u5199\u6cd5\u5199\u7684\u65f6\u5019\uff0c\u5bf9\u5e94\u7684\u4f4d\u7f6e\u5b9e\u9645\u4e0a\u662f\u4e00\u6837\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // C++ Version bool isPowerOfTwo ( int n ) { return n > 0 && ( n & ( n - 1 )) == 0 ; } // C++ Version int modPowerOfTwo ( int x , int mod ) { return x & ( mod - 1 ); } // C++ Version int Abs ( int n ) { return ( n ^ ( n >> 31 )) - ( n >> 31 ); /* n>>31 \u53d6\u5f97 n \u7684\u7b26\u53f7\uff0c\u82e5 n \u4e3a\u6b63\u6570\uff0cn>>31 \u7b49\u4e8e 0\uff0c\u82e5 n \u4e3a\u8d1f\u6570\uff0cn>>31 \u7b49\u4e8e -1 \u82e5 n \u4e3a\u6b63\u6570 n^0=n, \u6570\u4e0d\u53d8\uff0c\u82e5 n \u4e3a\u8d1f\u6570\u6709 n^(-1) \u9700\u8981\u8ba1\u7b97 n \u548c -1 \u7684\u8865\u7801\uff0c\u7136\u540e\u8fdb\u884c\u5f02\u6216\u8fd0\u7b97\uff0c \u7ed3\u679c n \u53d8\u53f7\u5e76\u4e14\u4e3a n \u7684\u7edd\u5bf9\u503c\u51cf 1\uff0c\u518d\u51cf\u53bb -1 \u5c31\u662f\u7edd\u5bf9\u503c */ } // C++ Version // \u5982\u679c a>=b,(a-b)>>31 \u4e3a 0\uff0c\u5426\u5219\u4e3a -1 int max ( int a , int b ) { return b & (( a - b ) >> 31 ) | a & ( ~ ( a - b ) >> 31 ); } int min ( int a , int b ) { return a & (( a - b ) >> 31 ) | b & ( ~ ( a - b ) >> 31 ); } \u5feb\u901f\u5e42 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a \\(a,b \\le 10^{9}\\) \uff0c \\(p\\) \u4e3a\u4e00\u4e2a\u5927\u8d28\u6570\uff0c\u6c42 \\(a^b \\operatorname{mod} p\\) \u3002 \u8003\u8651\u4e8c\u8fdb\u5236\u62c6\u5206\u601d\u60f3\uff0c\u628a \\(b\\) \u5728\u4e8c\u8fdb\u5236\u4e0b\uff08\u4e00\u5171 \\(k\\) \u4f4d\uff09\u7684\u6bcf\u4e00\u4e2a \\(1\\) \u5355\u72ec\u62c6\u5f00\uff1a \\(b= \\sum\\limits_{i=1}^k c_i \\times 2^{i-1}\\) \u628a\u5f0f\u5b50\u5c55\u5f00\u4e4b\u540e\u653e\u5230\u6307\u6570\u4f4d\u7f6e\uff1a \\(a^b=\\prod\\limits_{i=1}^{k} a^{c_k\\times2^{k-1}}\\) \u7136\u540e\u53d1\u73b0 \\(a^{2^i}=(a^{2^{i-1}})^2\\) \uff0c\u6240\u4ee5\u8fd9\u4e2a\u5f0f\u5b50\u53ef\u4ee5\u9012\u63a8\u3002 \u56e0\u4e3a \\(k \\le \\log(b)\\) \uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u662f \\(\\text{O}(\\log(b))\\) \u3002 1 2 3 4 5 6 7 inline int qpow ( int a , int b , int p ){ int ans = 1 % p ; // attention for (; b ; b >>= 1 ){ if ( b & 1 ) ans = ( long long ) ans * a % p ; // b \u7684\u5f53\u524d\u4f4d\u662f 1 \uff0c\u7d2f\u4e58\u7b54\u6848\u3002 a = ( long long ) a * a % p ; // \u9012\u63a8\u3002 } return ans ; } \u9f9f\u901f\u4e58 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5982\u679c \\(10^{18}\\) \uff1f \u53d1\u73b0\u5feb\u901f\u5e42\u7684\u65f6\u5019\u4e58\u6cd5\u5bb9\u6613\u7206\uff0c\u6240\u4ee5\u8003\u8651\u5199\u4e00\u4e2a\u7c7b\u4f3c\u201c64\u4f4d\u6574\u6570\u4e58\u6cd5\u201d\u7684\u4e1c\u897f\u3002 \u4ecd\u7136\u8003\u8651\u4e8c\u8fdb\u5236\u62c6\u5206\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u9012\u63a8\uff0c\u4e0d\u8fc7\u4e0a\u9762\u662f\u4e58\uff0c\u8fd9\u91cc\u662f\u7d2f\u52a0\u3002 1 2 3 4 5 6 7 8 9 #define int long long inline int turtle_mul ( int a , int b , int p ){ int ans = 0 ; for (; b ; b >>= 1 ){ if ( b & 1 ) ans = ( ans + a ) % p ; a = a * 2 % p ; } return ans ; } #undef int \u5feb\u901f\u4e58 \u03c8(\uff40\u2207\u00b4)\u03c8 \u53d1\u73b0\u9f9f\u901f\u4e58\u7684\u65f6\u5019\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(\\log\\) \u7684\u3002 \u6240\u4ee5\u6211\u4eec\u60f3\u4e00\u60f3\u53c8\u6ca1\u6709\u66f4\u4f18\u79c0\u7684\u505a\u6cd5\u3002 \u9a86\u53ef\u5f3a\u795e\u4ed9\u57282009\u5e74\u7684\u96c6\u8bad\u961f\u8bba\u6587\u91cc\u63d0\u5230\u4e86\u4e00\u4e2a\u6709\u610f\u601d\u7684\u505a\u6cd5\u3002 \u56e0\u4e3a \\(a\\times b \\operatorname{mod} p=a\\times b -\\lfloor \\frac{a\\times b}{p} \\rfloor \\times p\\) \u3002 \u8003\u8651\u7528 long double \u5b58 \\(\\frac{a\\times b}{p}\\) \uff0c\u90a3\u4e48\u76f4\u63a5\u770b\u6574\u6570\u90e8\u5206\u5373\u53ef\u3002 \u7136\u540e\u53d1\u73b0\u4e0a\u9762\u7684\u51cf\u6cd5\u5f53\u4e2d\uff0c\u524d\u8005\u548c\u540e\u8005\u7684\u5dee\u4e0d\u4f1a\u5927\u4e8e \\(p\\) \uff0c\u6240\u4ee5\u5206\u522b\u7528 long long \u5b58\uff0c\u53ea\u9700\u8981\u5173\u5fc3\u8f83\u4f4e\u4f4d\u5c31\u884c\u3002 \u6574\u6570\u8fd0\u7b97\u6ea2\u51fa\u5c31\u76f8\u5f53\u4e8e\u53d6\u6a21\uff0c\u6240\u4ee5\u5b8c\u5168\u53ef\u4ee5\u8fd9\u4e48\u5e72\uff08\u4e0d\u8fc7\u5728 \\(p\\) \u5927\u4e86\u4e4b\u540e\u4f1a\u6709\u7cbe\u5ea6\u95ee\u9898\uff09\u3002 1 2 3 4 5 6 7 8 9 10 #define int long long inline int qmul ( int a , int b , int p ){ a %= p , b %= p ; int c = ( a * b ) / p ; int ans = a * b - c * p ; if ( ans < 0 ) ans += p ; else if ( ans >= p ) ans -= p ; return ans ; } #undef int","title":"\u4f4d\u8fd0\u7b97"},{"location":"algor/basic/binary-operation/#_1","text":"and,or,xor \u7684\u663e\u8457\u7279\u70b9\u5c31\u662f \u4e8c\u8fdb\u5236\u4e0b\u4e0d\u8fdb\u4f4d \u3002 \u4e0b\u9762\u8bf4\u7684\u201c\u6309\u4f4d\u201d\uff0c\u6307\u7684\u662f\u628a\u53c2\u52a0\u8fd0\u7b97\u7684\u4e24\u4e2a\u4e8c\u8fdb\u5236\u6570\u53d8\u6210\u540c\u4f4d\u6570\u7684\uff0c\u7136\u540e\u6bcf\u4e00\u4f4d\u5bf9\u5e94\u8fdb\u884c\u64cd\u4f5c\u3002 \u6309\u4f4d\u4e0e & \uff0c bitand \u7279\u70b9\uff1a\u4e8c\u5143\u8fd0\u7b97\u7b26\uff0c\u4e8c\u8fdb\u5236\u4e0b\u6309\u4f4d\u8fdb\u884c\u8fd0\u7b97\uff0c\u5168 \\(1\\) \u5219 \\(1\\) \uff0c\u53cd\u4e4b\u4e3a \\(0\\) \u3002 \u6027\u8d28\uff1a \\(a \\& b \\le \\min(a,b)\\) \uff08\u624b\u63a8\u5373\u53ef\uff09\u3002 \u6309\u4f4d\u6216 | \uff0c bitor \u7279\u70b9\uff1a\u4e8c\u5143\u8fd0\u7b97\u7b26\uff0c\u4e8c\u8fdb\u5236\u4e0b\u6309\u4f4d\u8fdb\u884c\u8fd0\u7b97\uff0c\u6709 \\(1\\) \u5219 \\(1\\) \uff0c\u5168 \\(0\\) \u5219 \\(0\\) \u3002 \u6027\u8d28\uff1a \\(a | b \\ge \\max(a,b)\\) \u6709\u4e2a\u602a\u60f3\u6cd5\uff1a\u65e2\u7136\u4e0d\u7ba1\u662f\u5565 | 1 \u90fd\u662f 1\uff0c\u90a3\u662f\u4e0d\u662f\u53ef\u4ee5\u5f88\u5feb\u7684\u628a\u67d0\u4e2a\u6570\u53d8\u6210 \\(2^n-1\\) \u7684\u5f62\u5f0f\uff1f \u6309\u4f4d\u5f02\u6216 ^ \uff0c xor \u7279\u70b9\uff1a\u4e8c\u5143\u8fd0\u7b97\u7b26\uff0c\u4e8c\u8fdb\u5236\u4e0b\u6309\u4f4d\u8fdb\u884c\u8fd0\u7b97\uff0c\u76f8\u53cd\u5219 \\(1\\) \uff0c\u53cd\u4e4b\u5219 \\(0\\) \u3002 \u76f8\u5f53\u4e8e\u4e8c\u8fdb\u5236\u4e0b\u7684\u4e0d\u8fdb\u4f4d\u52a0\u6cd5\u3002 \\(x \\operatorname{xor} y = k \\ \\Rightarrow x \\operatorname{xor} k =y \\ \\Rightarrow y \\operatorname{xor} k=x\\) \u53ef\u4ee5\u7528\u4e8e\u6210\u5bf9\u53d8\u6362\uff08\u56fe\u8bba\u5f53\u4e2d\u5e38\u7528\uff09\u3002 \u4ee4 \\(n\\) \u4e3a\u5076\u6570\uff0c\u90a3\u4e48 \\(n \\operatorname{xor} 1 = n+1\\) \u3002 \u4ee4 \\(n\\) \u4e3a\u5947\u6570\uff0c\u90a3\u4e48 \\(n \\operatorname{xor} 1 =n-1\\) \u3002 \u6309\u4f4d\u53d6\u53cd ~ \uff0c not \u7279\u70b9\uff1a\u4e00\u5143\u8fd0\u7b97\u7b26\uff0c\u4e8c\u8fdb\u5236\u4e0b\u7684\u6bcf\u4e00\u4f4d\u90fd\u53d6\u53cd\uff08\u5305\u62ec\u7b26\u53f7\u4f4d\uff09\u3002 \u5de6\u79fb << \u7279\u70b9\uff1a\u4e00\u5143\u8fd0\u7b97\u7b26\uff0c\u4e8c\u8fdb\u5236\u4e0b\u628a\u6bcf\u4e00\u4f4d\u5411\u5de6\u5e73\u79fb\uff0c\u9ad8\u4f4d\u8d8a\u754c\u5219\u820d\u5f03\uff0c\u4f4e\u4f4d\u7528 \\(0\\) \u8865\u8db3\u3002 \u516c\u5f0f \\(1 << n =2^n,x<<n=x\\times 2^n\\) \u516c\u5f0f \u7b97\u672f\u53f3\u79fb >> \u7279\u70b9\uff1a\u4e00\u5143\u8fd0\u7b97\u7b26\uff0c\u4e8c\u8fdb\u5236\u4e0b\u628a\u6bcf\u4e00\u4f4d\u5411\u53f3\u5e73\u79fb\uff0c\u4f4e\u4f4d\u8d8a\u754c\u5219\u820d\u5f03\uff0c\u9ad8\u4f4d\u7528 \u7b26\u53f7\u4f4d \u8865\u8db3\u3002 \\(n>>1=\\lfloor \\frac{n}{2}\\rfloor\\) \u3002 GNU \u7684 GCC\u548cG++\u90fd\u4f7f\u7528\u7b97\u672f\u53f3\u79fb\uff0c\u903b\u8f91\u53f3\u79fb\u9ad8\u4f4d\u7528 \\(0\\) \u8865\u8db3\u3002","title":"\u57fa\u7840\u8fd0\u7b97\u7b26"},{"location":"algor/basic/binary-operation/#_2","text":"","title":"\u4e00\u4e9b\u6280\u5de7"},{"location":"algor/basic/binary-operation/#lowbit","text":"\\(\\operatorname{lowbit}(n)\\) \u8868\u793a\u4e8c\u8fdb\u5236\u4e0b \\(n\\) \u7684\u6700\u4f4e\u7684\u4e00\u4e2a \\(1\\) \u548c\u5b83\u540e\u9762\u7684 \\(0\\) \u7ec4\u6210\u7684\u6570\u3002 \u516c\u5f0f\uff1a \\(\\operatorname{lowbit}(n)=n \\& -n\\) \u3002","title":"lowbit"},{"location":"algor/basic/binary-operation/#popcnt","text":"\\(\\operatorname{popcnt}(n)\\) \u8868\u793a\u4e8c\u8fdb\u5236\u4e0b \\(n\\) \u6709\u591a\u5c11\u4f4d\u662f \\(1\\) \u3002 \u53ef\u4ee5\u76f4\u63a5\u7528 1 2 int __builtin_popcount ( unsigned int x ) int __builtin_popcountll ( unsigned long long x ) \u6bd5\u7adf\u73b0\u5728\u7684 NOI Linux 2.0 \u652f\u6301 C++14 \u548c G++ 9.8.3\u3002 \u4e0d\u8fc7\u4e5f\u53ef\u4ee5\u624b\u5199 1 2 3 4 5 int res = 0 ; while ( n ){ ++ res ; n -= lowbit ( n ); }","title":"popcnt"},{"location":"algor/basic/binary-operation/#_3","text":"\u628a\u72b6\u6001\u8868\u793a\u4e3a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u4e4b\u540e\u8fdb\u884c\u64cd\u4f5c\uff08\u5f53\u7136\u53ef\u4ee5\u7528 bitset\uff0c\u4f46\u662f\u80af\u5b9a\u6ca1\u6709\u76f4\u63a5\u62ff\u4e00\u4e2a\u6570\u6765\u505a\u597d\uff09\u3002 \u5047\u8bbe\u6700\u4f4e\u4f4d\u4e3a\u7b2c\u4e00\u4f4d\u3002 1 2 3 4 5 ( highest ) ( lowest ) | | V V bit : 9 8 7 6 5 4 3 2 1 num : 0 1 1 1 0 0 0 1 1 \u90a3\u4e48\u53ef\u4ee5\u6709\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u68c0\u6d4b\u7b2c \\(k\\) \u4f4d\u662f \\(0/1\\) \uff1a (n&(1<<(k-1)))!=0 -> 1 \u7ed9\u7b2c \\(k\\) \u4f4d\u53d6\u53cd\uff1a n^=(1<<(k-1)) \u5c06\u7b2c \\(k\\) \u4f4d\u8d4b\u503c\u4e3a \\(1\\) \uff1a n|=(1<<(k-1)) \u5c06\u7b2c \\(k\\) \u4f4d\u8d4b\u503c\u4e3a \\(0\\) \uff1a n&=(~(1<<(k-1))) \u56e0\u4e3a C++ \u9ed8\u8ba4\u662f \\(0\\) \u5f00\u5934\u7684\uff0c\u6240\u4ee5\u8981 \\(-1\\) \u3002 \u4e0d\u8fc7\u7ec8\u6001\u4ecd\u65e7\u662f \\(1<<n\\) \uff08\u548c\u6700\u4f4e\u4f4d\u4e3a \\(0\\) \u7684\u4e0d\u51cf\u4e00\u5199\u6cd5\u662f\u4e00\u6837\u7684\uff09 \u8bf4\u767d\u4e86\uff0c\u5982\u679c\u4ee5 \\(0\\) \u505a\u6700\u4f4e\u4f4d\uff0c\u4e0d \\(-1\\) \u3002\u4ee5 \\(1\\) \u505a\u6700\u4f4e\u4f4d\uff0c\u8981 \\(-1\\) \uff0c\u4f46\u662f\uff1b\u8fd9\u4e24\u79cd\u5199\u6cd5\u5199\u7684\u65f6\u5019\uff0c\u5bf9\u5e94\u7684\u4f4d\u7f6e\u5b9e\u9645\u4e0a\u662f\u4e00\u6837\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // C++ Version bool isPowerOfTwo ( int n ) { return n > 0 && ( n & ( n - 1 )) == 0 ; } // C++ Version int modPowerOfTwo ( int x , int mod ) { return x & ( mod - 1 ); } // C++ Version int Abs ( int n ) { return ( n ^ ( n >> 31 )) - ( n >> 31 ); /* n>>31 \u53d6\u5f97 n \u7684\u7b26\u53f7\uff0c\u82e5 n \u4e3a\u6b63\u6570\uff0cn>>31 \u7b49\u4e8e 0\uff0c\u82e5 n \u4e3a\u8d1f\u6570\uff0cn>>31 \u7b49\u4e8e -1 \u82e5 n \u4e3a\u6b63\u6570 n^0=n, \u6570\u4e0d\u53d8\uff0c\u82e5 n \u4e3a\u8d1f\u6570\u6709 n^(-1) \u9700\u8981\u8ba1\u7b97 n \u548c -1 \u7684\u8865\u7801\uff0c\u7136\u540e\u8fdb\u884c\u5f02\u6216\u8fd0\u7b97\uff0c \u7ed3\u679c n \u53d8\u53f7\u5e76\u4e14\u4e3a n \u7684\u7edd\u5bf9\u503c\u51cf 1\uff0c\u518d\u51cf\u53bb -1 \u5c31\u662f\u7edd\u5bf9\u503c */ } // C++ Version // \u5982\u679c a>=b,(a-b)>>31 \u4e3a 0\uff0c\u5426\u5219\u4e3a -1 int max ( int a , int b ) { return b & (( a - b ) >> 31 ) | a & ( ~ ( a - b ) >> 31 ); } int min ( int a , int b ) { return a & (( a - b ) >> 31 ) | b & ( ~ ( a - b ) >> 31 ); }","title":"\u72b6\u538b"},{"location":"algor/basic/binary-operation/#_4","text":"\u7ed9\u5b9a \\(a,b \\le 10^{9}\\) \uff0c \\(p\\) \u4e3a\u4e00\u4e2a\u5927\u8d28\u6570\uff0c\u6c42 \\(a^b \\operatorname{mod} p\\) \u3002 \u8003\u8651\u4e8c\u8fdb\u5236\u62c6\u5206\u601d\u60f3\uff0c\u628a \\(b\\) \u5728\u4e8c\u8fdb\u5236\u4e0b\uff08\u4e00\u5171 \\(k\\) \u4f4d\uff09\u7684\u6bcf\u4e00\u4e2a \\(1\\) \u5355\u72ec\u62c6\u5f00\uff1a \\(b= \\sum\\limits_{i=1}^k c_i \\times 2^{i-1}\\) \u628a\u5f0f\u5b50\u5c55\u5f00\u4e4b\u540e\u653e\u5230\u6307\u6570\u4f4d\u7f6e\uff1a \\(a^b=\\prod\\limits_{i=1}^{k} a^{c_k\\times2^{k-1}}\\) \u7136\u540e\u53d1\u73b0 \\(a^{2^i}=(a^{2^{i-1}})^2\\) \uff0c\u6240\u4ee5\u8fd9\u4e2a\u5f0f\u5b50\u53ef\u4ee5\u9012\u63a8\u3002 \u56e0\u4e3a \\(k \\le \\log(b)\\) \uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u662f \\(\\text{O}(\\log(b))\\) \u3002 1 2 3 4 5 6 7 inline int qpow ( int a , int b , int p ){ int ans = 1 % p ; // attention for (; b ; b >>= 1 ){ if ( b & 1 ) ans = ( long long ) ans * a % p ; // b \u7684\u5f53\u524d\u4f4d\u662f 1 \uff0c\u7d2f\u4e58\u7b54\u6848\u3002 a = ( long long ) a * a % p ; // \u9012\u63a8\u3002 } return ans ; }","title":"\u5feb\u901f\u5e42"},{"location":"algor/basic/binary-operation/#_5","text":"\u5982\u679c \\(10^{18}\\) \uff1f \u53d1\u73b0\u5feb\u901f\u5e42\u7684\u65f6\u5019\u4e58\u6cd5\u5bb9\u6613\u7206\uff0c\u6240\u4ee5\u8003\u8651\u5199\u4e00\u4e2a\u7c7b\u4f3c\u201c64\u4f4d\u6574\u6570\u4e58\u6cd5\u201d\u7684\u4e1c\u897f\u3002 \u4ecd\u7136\u8003\u8651\u4e8c\u8fdb\u5236\u62c6\u5206\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u9012\u63a8\uff0c\u4e0d\u8fc7\u4e0a\u9762\u662f\u4e58\uff0c\u8fd9\u91cc\u662f\u7d2f\u52a0\u3002 1 2 3 4 5 6 7 8 9 #define int long long inline int turtle_mul ( int a , int b , int p ){ int ans = 0 ; for (; b ; b >>= 1 ){ if ( b & 1 ) ans = ( ans + a ) % p ; a = a * 2 % p ; } return ans ; } #undef int","title":"\u9f9f\u901f\u4e58"},{"location":"algor/basic/binary-operation/#_6","text":"\u53d1\u73b0\u9f9f\u901f\u4e58\u7684\u65f6\u5019\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(\\log\\) \u7684\u3002 \u6240\u4ee5\u6211\u4eec\u60f3\u4e00\u60f3\u53c8\u6ca1\u6709\u66f4\u4f18\u79c0\u7684\u505a\u6cd5\u3002 \u9a86\u53ef\u5f3a\u795e\u4ed9\u57282009\u5e74\u7684\u96c6\u8bad\u961f\u8bba\u6587\u91cc\u63d0\u5230\u4e86\u4e00\u4e2a\u6709\u610f\u601d\u7684\u505a\u6cd5\u3002 \u56e0\u4e3a \\(a\\times b \\operatorname{mod} p=a\\times b -\\lfloor \\frac{a\\times b}{p} \\rfloor \\times p\\) \u3002 \u8003\u8651\u7528 long double \u5b58 \\(\\frac{a\\times b}{p}\\) \uff0c\u90a3\u4e48\u76f4\u63a5\u770b\u6574\u6570\u90e8\u5206\u5373\u53ef\u3002 \u7136\u540e\u53d1\u73b0\u4e0a\u9762\u7684\u51cf\u6cd5\u5f53\u4e2d\uff0c\u524d\u8005\u548c\u540e\u8005\u7684\u5dee\u4e0d\u4f1a\u5927\u4e8e \\(p\\) \uff0c\u6240\u4ee5\u5206\u522b\u7528 long long \u5b58\uff0c\u53ea\u9700\u8981\u5173\u5fc3\u8f83\u4f4e\u4f4d\u5c31\u884c\u3002 \u6574\u6570\u8fd0\u7b97\u6ea2\u51fa\u5c31\u76f8\u5f53\u4e8e\u53d6\u6a21\uff0c\u6240\u4ee5\u5b8c\u5168\u53ef\u4ee5\u8fd9\u4e48\u5e72\uff08\u4e0d\u8fc7\u5728 \\(p\\) \u5927\u4e86\u4e4b\u540e\u4f1a\u6709\u7cbe\u5ea6\u95ee\u9898\uff09\u3002 1 2 3 4 5 6 7 8 9 10 #define int long long inline int qmul ( int a , int b , int p ){ a %= p , b %= p ; int c = ( a * b ) / p ; int ans = a * b - c * p ; if ( ans < 0 ) ans += p ; else if ( ans >= p ) ans -= p ; return ans ; } #undef int","title":"\u5feb\u901f\u4e58"},{"location":"algor/basic/binary-search/","text":"\u6cdb\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4f5c\u7528\u662f\u5728\u5355\u8c03\u7684\u5e8f\u5217\u6216\u8005\u5355\u8c03\u7684\u51fd\u6570\u5f53\u4e2d\u8fdb\u884c\u67e5\u627e\u3002 \u4e5f\u53ef\u4ee5\u5c06\u6700\u4f18\u5316\u95ee\u9898\u8f6c\u5316\u4e3a\u53ef\u884c\u6027\u95ee\u9898\u4e4b\u540e\u8fdb\u884c\u5224\u5b9a\u6c42\u89e3\u3002 \u5e94\u7528 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6574\u6570\u57df\u4e8c\u5206 \u03c8(\uff40\u2207\u00b4)\u03c8 \u95ee\u9898\uff1a\u5728\u5355\u8c03\u9012\u589e\u7684\u5e8f\u5217\u5f53\u4e2d\u67e5\u627e\u5927\u4e8e\u7b49\u4e8e \\(x\\) \u7684\u6700\u5c0f\u7684\u4e00\u4e2a\u6570 \u5f00\u59cb\u4ee4\u4e24\u4e2a\u6307\u9488 \\(l = 1, r = n\\) \uff0c\u8868\u793a\u6211\u4eec\u5f53\u524d\u80fd\u786e\u5b9a\u7684\u7b54\u6848\u6240\u5728\u7684\u533a\u95f4\u3002 \u6211\u4eec\u79f0 \\([1, l)\\) \u4e3a\u4e0d\u53ef\u884c\u533a\u95f4\uff0c \\([r, n]\\) \u4e3a\u53ef\u884c\u533a\u95f4\uff08\u95ed\u5f00\u7684\u539f\u56e0\u4e4b\u540e\u4f1a\u8bf4\uff09\uff0c\u53ef\u884c\u533a\u95f4\u6307\u7684\u662f\u6ee1\u8db3\u95ee\u9898\u7ea6\u675f\u7684\u533a\u95f4\u3002 \u6bcf\u6b21\u53d6 \\(mid = \\lfloor (l + r) / 2 \\rfloor\\) \u3002 \u5982\u679c \\(a_{mid} \\ge x\\) \uff0c\u90a3\u4e48\u8bc1\u660e \\([mid, n]\\) \u5c31\u4e00\u5b9a\u662f\u53ef\u884c\u533a\u95f4\uff0c\u56e0\u4e3a\u5e8f\u5217\u5355\u8c03\u9012\u589e\uff0c\u8bc1\u660e \\(mid\\) \u4e4b\u540e\u7684 \\(a\\) \u90fd\u5fc5\u7136 \\(\\ge x\\) \u3002 \u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u7f29\u5c0f\u7b54\u6848\u533a\u95f4\uff0c\u4ee4 \\(r = mid\\) \u3002 \u53cd\u4e4b\uff0c\u8bc1\u660e \\([1, mid]\\) \u90fd\u662f\u4e0d\u53ef\u884c\u7684\uff0c\u6240\u4ee5\u7b54\u6848\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u80af\u5b9a\u4e0d\u662f \\(mid\\) \uff0c\u6240\u4ee5\u4ee4 \\(l = mid + 1\\) \u3002 \u5f53 \\(l = r\\) \uff0c\u5373\u7b54\u6848\u533a\u95f4\u7f29\u5c0f\u4e3a\u4e00\u4e2a\u70b9\u7684\u65f6\u5019\uff0c\u6b64\u65f6\u7684 \\(a_l\\) \u5c31\u662f\u7b54\u6848\u3002 \u5982\u679c\u9700\u8981\u5224\u65ad\u65e0\u89e3\uff0c\u5f00\u59cb\u65f6\u4ee4 \\(r = n + 1\\) \uff0c\u5982\u679c\u6700\u540e \\(l = r = n + 1\\) \uff0c\u90a3\u4e48\u65e0\u89e3\u3002 \u8fd9\u79cd\u5199\u6cd5\u4e0b \\(mid\\) \u6c38\u8fdc\u4e0d\u4f1a\u53d6\u5230 \\(r\\) \uff0c\u56e0\u4e3a\u5982\u679c \\(mid\\) \u8981\u53d6\u5230 \\(r\\) \uff0c\u5c31\u5fc5\u987b\u8ba9 \\(l\\) \u4e0d\u65ad\u6536\u7f29\u8fc7\u6765\uff0c\u800c\u5f53 \\(l = r\\) \u65f6\uff0c\u5faa\u73af\u5df2\u7ecf\u7ed3\u675f\u4e86\uff0c\u6240\u4ee5 \\(mid\\) \u4e0d\u53ef\u80fd\u53d6\u5230 \\(r\\) \u3002 \u539f\u672c\u7684\u4e8c\u5206\u533a\u95f4\u662f \\([1, n]\\) \uff0c\u73b0\u5728\u5c06\u5176\u6269\u5927\u4e00\u683c\u53d8\u4e3a \\([1, n + 1]\\) \uff0c\u90a3\u4e48\u8fd9\u4e2a\u8d8a\u754c\u7684\u4e0b\u6807\u672c\u8eab\u7684\u610f\u4e49\u5c31\u662f\u201c\u65e0\u89e3\u201d\uff0c\u7c7b\u4f3c stl \u5bb9\u5668\u7684 end() \u3002 1 2 3 4 5 6 7 int l = 1 , r = n ; // \u5224\u65e0\u89e3\u5219\u4ee4 r = n + 1\uff0c\u8fd9\u79cd\u5199\u6cd5 mid \u6c38\u8fdc\u4e0d\u4f1a\u53d6\u5230 r while ( l < r ) { int mid = ( l + r ) >> 1 ; if ( a [ mid ] >= x ) r = mid ; // mid \u4e5f\u53ef\u80fd\u662f\u7b54\u6848\uff0c\u4e5f\u8981\u53d6\u3002 else l = mid + 1 ; } ans = a [ l ]; \u5982\u679c\u95ee\u5c0f\u4e8e\u7b49\u4e8e\uff0c\u4e5f\u5c31\u662f\u53ef\u884c\u533a\u95f4\u5728 \\(mid\\) \u5de6\u4fa7\uff0c\u53cd\u8fc7\u6765\u5373\u53ef\uff1a \u53ea\u4e0d\u8fc7\u4e3a\u4e86\u8ba9\u8d8a\u754c\u503c\u4e3a \\(0\\) \uff0c\u9700\u8981\u8ba9 \\(mid = \\lfloor (l + r + 1) / 2 \\rfloor\\) \u3002 \u7406\u89e3\u65b9\u5f0f\u540c\u4e0a\u3002 1 2 3 4 5 6 7 int l = 1 , r = n ; // \u5224\u65e0\u89e3\u5219\u4ee4 l = 0\uff0c\u8fd9\u79cd\u5199\u6cd5 mid \u6c38\u8fdc\u4e0d\u4f1a\u53d6\u5230 l while ( l < r ) { int mid = ( l + r + 1 ) >> 1 ; if ( a [ mid ] <= x ) l = mid ; // mid \u4e5f\u53ef\u80fd\u662f\u7b54\u6848\uff0c\u4e5f\u8981\u53d6\u3002 else r = mid - 1 ; } ans = a [ l ]; \u4e00\u5f20\u56fe\u7406\u89e3\uff0c\u4e0b\u56fe\u7eff\u8272\u4e3a\u53ef\u884c\u533a\u95f4\uff1a upd on 01.23.23\uff1a\u6628\u5929\u5728 uoj \u7fa4\u91cc\u56de\u7b54\u4e86\u4e00\u4f4d\u5c0f\u670b\u53cb\u7684\u95ee\u9898\u3002 \u4e5f\u7b97\u662f\u6709\u4e9b\u65b0\u7684\u60f3\u6cd5\u5427\uff0c\u5c31\u662f\u5176\u5b9e\u4e8c\u5206\u7684\u5199\u6cd5\u6709\u5f88\u591a\u79cd\uff0c\u533a\u522b\u4e00\u822c\u5728\u4e8e\u5bf9\u7b54\u6848\u533a\u95f4\u7684\u6536\u7f29\u4e0a\u3002 \u6709\u7684\u5199\u6cd5\u662f\u4e0d\u7ba1 mid \u662f\u5426 valid \u90fd\u8981\u53d6 mid\uff0c\u6709\u7684\u5199\u6cd5\u662f\u5de6\u95ed\u53f3\u5f00\uff0c\u6709\u7684\u5199\u6cd5\u662f\u5de6\u5f00\u53f3\u95ed\u3002 \u7136\u540e\u5faa\u73af\u505c\u6b62\u7684\u9650\u5236\u4e5f\u4e0d\u4e00\u6837\uff0c\u6240\u4ee5\u5bfc\u81f4\u8bb0\u5f55\u7b54\u6848\u7684\u65b9\u5f0f\u4e0d\u4e00\u6837\uff0c\u8fd9\u4e2a\u8981\u81ea\u5df1\u53bb\u533a\u5206\uff0c\u4e0d\u80fd\u778e\u5199\uff08 \u867d\u7136\u6211\u7528\u7684\u5199\u6cd5\u533a\u5206\u4e86\u4e24\u79cd\u65b9\u5f0f\uff0c\u4f46\u662f\u76f8\u5bf9\u6765\u8bf4\u4e0d\u90a3\u4e48\u5bb9\u6613\u7406\u89e3\u51fa\u9519\uff1f \u602a\u4e0d\u5f97 Programming Pearl \u8bf4\u53ea\u6709 \\(20\\%\\) \u7684\u7a0b\u5e8f\u5458\u80fd\u5199\u5bf9\u4e8c\u5206\uff08\uff08\u56e0\u4e3a\u5f88\u591a\u7a0b\u5e8f\u5458\u90fd\u662f\u7f3a\u4e4f\u601d\u8003\u7684\u5427\uff01 \u5b9e\u6570\u57df\u4e8c\u5206 \u03c8(\uff40\u2207\u00b4)\u03c8 \u548c\u6574\u6570\u57df\u6bd4\u8f83\u7c7b\u4f3c\uff0c\u4e0d\u8fc7\u8fd8\u9700\u8981\u8bbe\u7f6e \\(eps\\) \u6765\u907f\u514d\u7cbe\u5ea6\u8bef\u5dee\u3002 \u56e0\u4e3a\u662f\u5b9e\u6570\u57df\u4e0a\u7684\u4e8c\u5206\u4e86\uff0c\u7528\u4e4b\u524d\u90a3\u79cd +-1 \u7684\u65b9\u5f0f\u7cbe\u5ea6\u662f\u5b8c\u5168\u4e0d\u591f\u7684\uff08 \u6240\u4ee5\u5c31\u4e0d\u7ba1\u662f\u5426\u5408\u6cd5\u90fd\u6536\u7f29\u5230 mid\uff0c\u6240\u4ee5\u8981\u8bb0\u5f55\u7b54\u6848\u800c\u4e0d\u662f\u53ef\u4ee5\u76f4\u63a5\u7528\u4e0b\u6807\u8f93\u51fa\u3002 1 2 3 4 5 6 double l = 0.0 , r = ( double )( 1e9 + 7 ), ans ; while ( l + eps < r ){ double mid = ( l + r ) / 2 ; if ( valid ( mid )) r = mid , ans = mid ; else l = mid ; } \u4e5f\u53ef\u4ee5\u8ba1\u7b97\u4e4b\u540e\u8bbe\u7f6e\u6b21\u6570\u4e8c\u5206\u3002 \u4e8c\u5206\u7b54\u6848 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5982\u679c\u4e00\u4e2a\u6700\u4f18\u89e3\u95ee\u9898\u7684\u6700\u4f18\u89e3\u662f \\(x\\) \uff0c\u5e76\u4e14 \\(x\\) \u7684\u4e00\u8fb9\u4e0d\u5408\u6cd5\uff0c\u4e00\u8fb9\u5408\u6cd5\uff0c\u5219\u8fd9\u4e2a\u95ee\u9898\u5177\u6709\u5355\u8c03\u6027\u3002 \u53ef\u4ee5\u5728\u6bcf\u6b21\u4e8c\u5206\u7684\u65f6\u5019\u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u65b9\u6848\uff0c\u4f7f\u5f97\u89e3\u4e3a \\(mid\\) \u3002 \u4e8c\u5206\u7b54\u6848 \\(x\\) \u5e76\u8fdb\u884c\u5224\u5b9a\u3002 \u7136\u540e\u6839\u636e\u53ef\u884c\u533a\u95f4\u7684\u65b9\u5f0f\u9009\u62e9\u4e8c\u5206\u65b9\u5f0f\u5373\u53ef\u3002 \u6b64\u7c7b\u95ee\u9898\u7684\u663e\u8457\u7279\u70b9\u5c31\u662f\u201c\u6700\u5c0f\u503c\u6700\u5927\u201d\uff0c\u201c\u6700\u5927\u503c\u6700\u5c0f\u201d\u3002 \u4e0d\u8fc7\u4e5f\u6709\u4f8b\u5916\uff0c\u6bd4\u5982 AGC006D\u3002 STL \u4e8c\u5206 \u03c8(\uff40\u2207\u00b4)\u03c8 lower_bound \uff1a\u5728\u6709\u5e8f\u5e8f\u5217\u67e5\u627e\u5927\u4e8e\u7b49\u4e8e \\(x\\) \u7684\u7b2c\u4e00\u4e2a\u3002 upper_bound \uff1a\u5927\u4e8e \\(x\\) \u3002 \u5982\u679c\u7c7b\u4f3c set \uff0c\u81ea\u5df1\u5e26\u6709 lower_bound \u3002 \u5c31\u4e00\u5b9a\u9009\u62e9\u5bb9\u5668 \u81ea\u8eab \u7684\uff1a s.lower_bound(x) \u800c\u4e0d\u662f lower_bound(s.begin(),s.end(),x) \u3002 \u8fd9\u6837\u6548\u7387\u66f4\u9ad8\uff0c\u56e0\u4e3a \\(s\\) \u672c\u8eab\u4e0d\u662f\u7c7b\u4f3c\u6570\u7ec4\u90a3\u6837\u7684\u968f\u673a\u8bbf\u95ee\uff08\u4ed6\u6ca1\u6709\u652f\u6301\u968f\u673a\u8bbf\u95ee\u7684\u8fed\u4ee3\u5668\uff09\uff0c\u4ed6\u662f\u4e00\u4e2a\u6811\u5f62\u7ed3\u6784\uff0c\u6240\u4ee5\u8981\u7528 STL \u5728\u6811\u4e0a\u7ed9\u4f60\u5b9e\u73b0\u7684 lower_bound \u3002","title":"\u4e8c\u5206"},{"location":"algor/basic/binary-search/#_1","text":"\u4f5c\u7528\u662f\u5728\u5355\u8c03\u7684\u5e8f\u5217\u6216\u8005\u5355\u8c03\u7684\u51fd\u6570\u5f53\u4e2d\u8fdb\u884c\u67e5\u627e\u3002 \u4e5f\u53ef\u4ee5\u5c06\u6700\u4f18\u5316\u95ee\u9898\u8f6c\u5316\u4e3a\u53ef\u884c\u6027\u95ee\u9898\u4e4b\u540e\u8fdb\u884c\u5224\u5b9a\u6c42\u89e3\u3002","title":"\u6cdb\u5316"},{"location":"algor/basic/binary-search/#_2","text":"","title":"\u5e94\u7528"},{"location":"algor/basic/binary-search/#_3","text":"\u95ee\u9898\uff1a\u5728\u5355\u8c03\u9012\u589e\u7684\u5e8f\u5217\u5f53\u4e2d\u67e5\u627e\u5927\u4e8e\u7b49\u4e8e \\(x\\) \u7684\u6700\u5c0f\u7684\u4e00\u4e2a\u6570 \u5f00\u59cb\u4ee4\u4e24\u4e2a\u6307\u9488 \\(l = 1, r = n\\) \uff0c\u8868\u793a\u6211\u4eec\u5f53\u524d\u80fd\u786e\u5b9a\u7684\u7b54\u6848\u6240\u5728\u7684\u533a\u95f4\u3002 \u6211\u4eec\u79f0 \\([1, l)\\) \u4e3a\u4e0d\u53ef\u884c\u533a\u95f4\uff0c \\([r, n]\\) \u4e3a\u53ef\u884c\u533a\u95f4\uff08\u95ed\u5f00\u7684\u539f\u56e0\u4e4b\u540e\u4f1a\u8bf4\uff09\uff0c\u53ef\u884c\u533a\u95f4\u6307\u7684\u662f\u6ee1\u8db3\u95ee\u9898\u7ea6\u675f\u7684\u533a\u95f4\u3002 \u6bcf\u6b21\u53d6 \\(mid = \\lfloor (l + r) / 2 \\rfloor\\) \u3002 \u5982\u679c \\(a_{mid} \\ge x\\) \uff0c\u90a3\u4e48\u8bc1\u660e \\([mid, n]\\) \u5c31\u4e00\u5b9a\u662f\u53ef\u884c\u533a\u95f4\uff0c\u56e0\u4e3a\u5e8f\u5217\u5355\u8c03\u9012\u589e\uff0c\u8bc1\u660e \\(mid\\) \u4e4b\u540e\u7684 \\(a\\) \u90fd\u5fc5\u7136 \\(\\ge x\\) \u3002 \u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u7f29\u5c0f\u7b54\u6848\u533a\u95f4\uff0c\u4ee4 \\(r = mid\\) \u3002 \u53cd\u4e4b\uff0c\u8bc1\u660e \\([1, mid]\\) \u90fd\u662f\u4e0d\u53ef\u884c\u7684\uff0c\u6240\u4ee5\u7b54\u6848\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u80af\u5b9a\u4e0d\u662f \\(mid\\) \uff0c\u6240\u4ee5\u4ee4 \\(l = mid + 1\\) \u3002 \u5f53 \\(l = r\\) \uff0c\u5373\u7b54\u6848\u533a\u95f4\u7f29\u5c0f\u4e3a\u4e00\u4e2a\u70b9\u7684\u65f6\u5019\uff0c\u6b64\u65f6\u7684 \\(a_l\\) \u5c31\u662f\u7b54\u6848\u3002 \u5982\u679c\u9700\u8981\u5224\u65ad\u65e0\u89e3\uff0c\u5f00\u59cb\u65f6\u4ee4 \\(r = n + 1\\) \uff0c\u5982\u679c\u6700\u540e \\(l = r = n + 1\\) \uff0c\u90a3\u4e48\u65e0\u89e3\u3002 \u8fd9\u79cd\u5199\u6cd5\u4e0b \\(mid\\) \u6c38\u8fdc\u4e0d\u4f1a\u53d6\u5230 \\(r\\) \uff0c\u56e0\u4e3a\u5982\u679c \\(mid\\) \u8981\u53d6\u5230 \\(r\\) \uff0c\u5c31\u5fc5\u987b\u8ba9 \\(l\\) \u4e0d\u65ad\u6536\u7f29\u8fc7\u6765\uff0c\u800c\u5f53 \\(l = r\\) \u65f6\uff0c\u5faa\u73af\u5df2\u7ecf\u7ed3\u675f\u4e86\uff0c\u6240\u4ee5 \\(mid\\) \u4e0d\u53ef\u80fd\u53d6\u5230 \\(r\\) \u3002 \u539f\u672c\u7684\u4e8c\u5206\u533a\u95f4\u662f \\([1, n]\\) \uff0c\u73b0\u5728\u5c06\u5176\u6269\u5927\u4e00\u683c\u53d8\u4e3a \\([1, n + 1]\\) \uff0c\u90a3\u4e48\u8fd9\u4e2a\u8d8a\u754c\u7684\u4e0b\u6807\u672c\u8eab\u7684\u610f\u4e49\u5c31\u662f\u201c\u65e0\u89e3\u201d\uff0c\u7c7b\u4f3c stl \u5bb9\u5668\u7684 end() \u3002 1 2 3 4 5 6 7 int l = 1 , r = n ; // \u5224\u65e0\u89e3\u5219\u4ee4 r = n + 1\uff0c\u8fd9\u79cd\u5199\u6cd5 mid \u6c38\u8fdc\u4e0d\u4f1a\u53d6\u5230 r while ( l < r ) { int mid = ( l + r ) >> 1 ; if ( a [ mid ] >= x ) r = mid ; // mid \u4e5f\u53ef\u80fd\u662f\u7b54\u6848\uff0c\u4e5f\u8981\u53d6\u3002 else l = mid + 1 ; } ans = a [ l ]; \u5982\u679c\u95ee\u5c0f\u4e8e\u7b49\u4e8e\uff0c\u4e5f\u5c31\u662f\u53ef\u884c\u533a\u95f4\u5728 \\(mid\\) \u5de6\u4fa7\uff0c\u53cd\u8fc7\u6765\u5373\u53ef\uff1a \u53ea\u4e0d\u8fc7\u4e3a\u4e86\u8ba9\u8d8a\u754c\u503c\u4e3a \\(0\\) \uff0c\u9700\u8981\u8ba9 \\(mid = \\lfloor (l + r + 1) / 2 \\rfloor\\) \u3002 \u7406\u89e3\u65b9\u5f0f\u540c\u4e0a\u3002 1 2 3 4 5 6 7 int l = 1 , r = n ; // \u5224\u65e0\u89e3\u5219\u4ee4 l = 0\uff0c\u8fd9\u79cd\u5199\u6cd5 mid \u6c38\u8fdc\u4e0d\u4f1a\u53d6\u5230 l while ( l < r ) { int mid = ( l + r + 1 ) >> 1 ; if ( a [ mid ] <= x ) l = mid ; // mid \u4e5f\u53ef\u80fd\u662f\u7b54\u6848\uff0c\u4e5f\u8981\u53d6\u3002 else r = mid - 1 ; } ans = a [ l ]; \u4e00\u5f20\u56fe\u7406\u89e3\uff0c\u4e0b\u56fe\u7eff\u8272\u4e3a\u53ef\u884c\u533a\u95f4\uff1a upd on 01.23.23\uff1a\u6628\u5929\u5728 uoj \u7fa4\u91cc\u56de\u7b54\u4e86\u4e00\u4f4d\u5c0f\u670b\u53cb\u7684\u95ee\u9898\u3002 \u4e5f\u7b97\u662f\u6709\u4e9b\u65b0\u7684\u60f3\u6cd5\u5427\uff0c\u5c31\u662f\u5176\u5b9e\u4e8c\u5206\u7684\u5199\u6cd5\u6709\u5f88\u591a\u79cd\uff0c\u533a\u522b\u4e00\u822c\u5728\u4e8e\u5bf9\u7b54\u6848\u533a\u95f4\u7684\u6536\u7f29\u4e0a\u3002 \u6709\u7684\u5199\u6cd5\u662f\u4e0d\u7ba1 mid \u662f\u5426 valid \u90fd\u8981\u53d6 mid\uff0c\u6709\u7684\u5199\u6cd5\u662f\u5de6\u95ed\u53f3\u5f00\uff0c\u6709\u7684\u5199\u6cd5\u662f\u5de6\u5f00\u53f3\u95ed\u3002 \u7136\u540e\u5faa\u73af\u505c\u6b62\u7684\u9650\u5236\u4e5f\u4e0d\u4e00\u6837\uff0c\u6240\u4ee5\u5bfc\u81f4\u8bb0\u5f55\u7b54\u6848\u7684\u65b9\u5f0f\u4e0d\u4e00\u6837\uff0c\u8fd9\u4e2a\u8981\u81ea\u5df1\u53bb\u533a\u5206\uff0c\u4e0d\u80fd\u778e\u5199\uff08 \u867d\u7136\u6211\u7528\u7684\u5199\u6cd5\u533a\u5206\u4e86\u4e24\u79cd\u65b9\u5f0f\uff0c\u4f46\u662f\u76f8\u5bf9\u6765\u8bf4\u4e0d\u90a3\u4e48\u5bb9\u6613\u7406\u89e3\u51fa\u9519\uff1f \u602a\u4e0d\u5f97 Programming Pearl \u8bf4\u53ea\u6709 \\(20\\%\\) \u7684\u7a0b\u5e8f\u5458\u80fd\u5199\u5bf9\u4e8c\u5206\uff08\uff08\u56e0\u4e3a\u5f88\u591a\u7a0b\u5e8f\u5458\u90fd\u662f\u7f3a\u4e4f\u601d\u8003\u7684\u5427\uff01","title":"\u6574\u6570\u57df\u4e8c\u5206"},{"location":"algor/basic/binary-search/#_4","text":"\u548c\u6574\u6570\u57df\u6bd4\u8f83\u7c7b\u4f3c\uff0c\u4e0d\u8fc7\u8fd8\u9700\u8981\u8bbe\u7f6e \\(eps\\) \u6765\u907f\u514d\u7cbe\u5ea6\u8bef\u5dee\u3002 \u56e0\u4e3a\u662f\u5b9e\u6570\u57df\u4e0a\u7684\u4e8c\u5206\u4e86\uff0c\u7528\u4e4b\u524d\u90a3\u79cd +-1 \u7684\u65b9\u5f0f\u7cbe\u5ea6\u662f\u5b8c\u5168\u4e0d\u591f\u7684\uff08 \u6240\u4ee5\u5c31\u4e0d\u7ba1\u662f\u5426\u5408\u6cd5\u90fd\u6536\u7f29\u5230 mid\uff0c\u6240\u4ee5\u8981\u8bb0\u5f55\u7b54\u6848\u800c\u4e0d\u662f\u53ef\u4ee5\u76f4\u63a5\u7528\u4e0b\u6807\u8f93\u51fa\u3002 1 2 3 4 5 6 double l = 0.0 , r = ( double )( 1e9 + 7 ), ans ; while ( l + eps < r ){ double mid = ( l + r ) / 2 ; if ( valid ( mid )) r = mid , ans = mid ; else l = mid ; } \u4e5f\u53ef\u4ee5\u8ba1\u7b97\u4e4b\u540e\u8bbe\u7f6e\u6b21\u6570\u4e8c\u5206\u3002","title":"\u5b9e\u6570\u57df\u4e8c\u5206"},{"location":"algor/basic/binary-search/#_5","text":"\u5982\u679c\u4e00\u4e2a\u6700\u4f18\u89e3\u95ee\u9898\u7684\u6700\u4f18\u89e3\u662f \\(x\\) \uff0c\u5e76\u4e14 \\(x\\) \u7684\u4e00\u8fb9\u4e0d\u5408\u6cd5\uff0c\u4e00\u8fb9\u5408\u6cd5\uff0c\u5219\u8fd9\u4e2a\u95ee\u9898\u5177\u6709\u5355\u8c03\u6027\u3002 \u53ef\u4ee5\u5728\u6bcf\u6b21\u4e8c\u5206\u7684\u65f6\u5019\u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u65b9\u6848\uff0c\u4f7f\u5f97\u89e3\u4e3a \\(mid\\) \u3002 \u4e8c\u5206\u7b54\u6848 \\(x\\) \u5e76\u8fdb\u884c\u5224\u5b9a\u3002 \u7136\u540e\u6839\u636e\u53ef\u884c\u533a\u95f4\u7684\u65b9\u5f0f\u9009\u62e9\u4e8c\u5206\u65b9\u5f0f\u5373\u53ef\u3002 \u6b64\u7c7b\u95ee\u9898\u7684\u663e\u8457\u7279\u70b9\u5c31\u662f\u201c\u6700\u5c0f\u503c\u6700\u5927\u201d\uff0c\u201c\u6700\u5927\u503c\u6700\u5c0f\u201d\u3002 \u4e0d\u8fc7\u4e5f\u6709\u4f8b\u5916\uff0c\u6bd4\u5982 AGC006D\u3002","title":"\u4e8c\u5206\u7b54\u6848"},{"location":"algor/basic/binary-search/#stl","text":"lower_bound \uff1a\u5728\u6709\u5e8f\u5e8f\u5217\u67e5\u627e\u5927\u4e8e\u7b49\u4e8e \\(x\\) \u7684\u7b2c\u4e00\u4e2a\u3002 upper_bound \uff1a\u5927\u4e8e \\(x\\) \u3002 \u5982\u679c\u7c7b\u4f3c set \uff0c\u81ea\u5df1\u5e26\u6709 lower_bound \u3002 \u5c31\u4e00\u5b9a\u9009\u62e9\u5bb9\u5668 \u81ea\u8eab \u7684\uff1a s.lower_bound(x) \u800c\u4e0d\u662f lower_bound(s.begin(),s.end(),x) \u3002 \u8fd9\u6837\u6548\u7387\u66f4\u9ad8\uff0c\u56e0\u4e3a \\(s\\) \u672c\u8eab\u4e0d\u662f\u7c7b\u4f3c\u6570\u7ec4\u90a3\u6837\u7684\u968f\u673a\u8bbf\u95ee\uff08\u4ed6\u6ca1\u6709\u652f\u6301\u968f\u673a\u8bbf\u95ee\u7684\u8fed\u4ee3\u5668\uff09\uff0c\u4ed6\u662f\u4e00\u4e2a\u6811\u5f62\u7ed3\u6784\uff0c\u6240\u4ee5\u8981\u7528 STL \u5728\u6811\u4e0a\u7ed9\u4f60\u5b9e\u73b0\u7684 lower_bound \u3002","title":"STL \u4e8c\u5206"},{"location":"algor/basic/difference-and-prefix-sum/","text":"\u524d\u7f00\u548c \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e00\u7ef4\u524d\u7f00\u548c \u03c8(\uff40\u2207\u00b4)\u03c8 \u53ef\u4ee5\u5b9e\u73b0 \\(\\text{O}(n)\\) \u9884\u5904\u7406\uff0c \\(\\text{O}(1)\\) \u8be2\u95ee\u533a\u95f4\u548c\u3002 \u4ee4 \\(sum_i\\) \u8868\u793a\u533a\u95f4 \\([0,i]\\) \u7684\u524d\u7f00\u548c\u3002 \u7279\u522b\u7684\uff0c \\(a_0=0\\) \u3002 \u90a3\u4e48\u6bcf\u6b21\u7d2f\u52a0\u5373\u53ef\uff0c\u67e5\u8be2\u533a\u95f4 \\([l,r]\\) \u7684\u548c\u53ea\u9700\u8981\u8f93\u51fa \\(sum_r-sum_{l-1}\\) \u3002 1 2 3 4 int a [ si ], sum [ si ]; a [ 0 ] = sum [ 0 ] = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ scanf ( \"%d\" , & a [ i ]), sum [ i ] = sum [ i -1 ] + a [ i ]; } int l , r ; scanf ( \"%d%d\" , & l , & r ), printf ( \"%d \\n \" , sum [ r ] - sum [ l -1 ]); \u4e8c\u7ef4\u524d\u7f00\u548c \u03c8(\uff40\u2207\u00b4)\u03c8 \u53ef\u4ee5\u5b9e\u73b0 \\(\\text{O}(n^2)\\) \u9884\u5904\u7406\uff0c \\(\\text{O}(1)\\) \u8be2\u95ee\u77e9\u9635\u548c\u3002 \u4ee4 \\(sum_{i,j}\\) \u8868\u793a\u5de6\u4e0a\u89d2\u4e3a \\((1,1)\\) \uff0c\u53f3\u4e0b\u89d2\u4e3a \\((i,j)\\) \u7684\u77e9\u9635\u548c\u3002 \u8003\u8651\u5bb9\u65a5\uff0c\u9884\u5904\u7406\u7684\u65f6\u5019\u4ee4 \\(sum_{i,j}=sum_{i-1,j}+sum_{i,j-1}-sum_{i-1,j-1}+a[i][j]\\) \u3002 \u4ecd\u7136\u8003\u8651\u5bb9\u65a5\uff0c\u8be2\u95ee\u5de6\u4e0a\u89d2\u4e3a \\((x_1,y_1)\\) \uff0c\u53f3\u4e0b\u89d2\u4e3a \\((x_2,y_2)\\) \u7684\u5b50\u77e9\u9635\u5219\u53ea\u9700\u8981\uff1a \\(ans=sum_{x_2,y_2}-sum_{x_1,y_2}-sum_{x_2,y_1}+sum_{x_1,y_1}\\) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int a [ si ][ si ], sum [ si ][ si ]; memset ( sum , 0 , sizeof sum ); for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= m ; ++ j ){ scanf ( \"%d\" , & a [ i ][ j ]), sum [ i ][ j ] += a [ i ][ j ]; } } for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= m ; ++ j ){ sum [ i ][ j ] += sum [ i -1 ][ j ] + sum [ i ][ j -1 ] - sum [ i -1 ][ j -1 ]; } } int x , xx , y , yy ; scanf ( \"%d%d%d%d\" , & x , & y , & xx , & yy ); printf ( \"%d \\n \" , sum [ xx ][ yy ] - sum [ x ][ yy ] - sum [ xx ][ y ] + sum [ x ][ y ]); \u5dee\u5206 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e00\u7ef4\u5dee\u5206 \u03c8(\uff40\u2207\u00b4)\u03c8 \u53ef\u4ee5\u5b9e\u73b0 \\(\\text{O}(1)\\) \u4fee\u6539\uff0c \\(\\text{O}(n)\\) \u67e5\u8be2\u3002 \u4e00\u4e2a\u4fbf\u4e8e\u7406\u89e3\u7684\u7279\u70b9\u5c31\u662f\uff0c \u539f\u6570\u7ec4\u5c31\u662f\u5dee\u5206\u5e8f\u5217\u7684\u524d\u7f00\u548c \u3002 \u5b9a\u4e49\u5dee\u5206\u5e8f\u5217 \\(c_i=\\begin{cases}a_1 & i=1 \\\\ a_i-a_{i-1} & \\text{otherwise.}\\end{cases}\\) \u7136\u540e\u5982\u679c\u8981\u4fee\u6539 \\([l,r]\\) \uff0c\u90a3\u4e48\u7ed9 \\(c[l]\\) \u52a0\u4e0a \\(d\\) \uff0c \\(c[r+1]\\) \u51cf\u53bb \\(d\\) \u3002 \u5176\u5b9e\u5f88\u597d\u7406\u89e3\uff0c\u8981\u8ba9 \\(c\\) \u7684\u524d\u7f00\u548c\u6570\u7ec4\u7684 \\([l,r]\\) \u6539\u53d8\uff0c\u90a3\u5148\u5728 \\(l\\) \u8fd9\u513f\u52a0\u4e0a \\(d\\) \uff0c\u8ba9 \\(a[l]\\to a[n]\\) \u90fd\u591a\u4e00\u4e2a \\(d\\) \u3002 \u7136\u540e\u5728 \\(r+1\\) \u8fd9\u513f\u51cf\u53bb \\(d\\) \uff0c\u8ba9 \\(a[r+1] \\to a[n]\\) \u90fd\u5c11\u4e00\u4e2a \\(d\\) \u5c31\u53ef\u4ee5\u4e86\u3002 1 2 3 4 5 6 7 8 int a [ si ], c [ si ]; scanf ( \"%d\" , & a [ 1 ]), c [ 0 ] = 0 , c [ 1 ] = a [ 1 ]; for ( register int i = 2 ; i <= n ; ++ i ){ scanf ( \"%d\" , & a [ i ]), c [ i ] = a [ i ] - a [ i -1 ]; } int l , r , d ; scanf ( \"%d%d%d\" , & l , & r , & d ), c [ l ] += d , c [ r + 1 ] -= d ; for ( register int i = 1 ; i <= n ; ++ i ){ c [ i ] += c [ i -1 ], printf ( \"%d \\n \" , c [ i ]); } // \u505a\u524d\u7f00\u548c\u6062\u590d\u5e8f\u5217\u3002 \u4e8c\u7ef4\u5dee\u5206 \u03c8(\uff40\u2207\u00b4)\u03c8 \u53ef\u4ee5\u5b9e\u73b0 \\(\\text{O}(1)\\) \u4fee\u6539\uff0c \\(\\text{O}(n^2)\\) \u67e5\u8be2\u3002 \u5b9a\u4e49\u5dee\u5206\u77e9\u9635 \\(c_{i,j}\\) \uff0c\u6ee1\u8db3 \\(a_{i,j}\\) \u4e3a \\(c_{i,j}\\) \u7684\u524d\u7f00\u548c\u77e9\u9635\u3002 \u7528\u4e8c\u7ef4\u524d\u7f00\u548c\u7684\u601d\u60f3\u53ef\u4ee5\u5f97\u5230\uff1a \\(a_{i,j}=a_{i-1,j}+a_{i,j-1}-a_{i-1,j-1}+c_{i,j}\\) \u3002 \u90a3\u4e48 \\(c_{i,j}=a_{i,j}-a_{i-1,j}-a_{i,j-1}+a_{i-1,j-1}\\) \u3002 \u7136\u540e\u8003\u8651\u600e\u4e48\u6837\u8fdb\u884c\u77e9\u9635\u7ef4\u62a4\u3002 \u7c7b\u4f3c\u4e00\u7ef4\u5dee\u5206\u7684\u601d\u60f3\uff0c\u6211\u6253\u7b97\u5728\u7aef\u70b9\u5904\u8fdb\u884c\u7ef4\u62a4\u3002 \u6bd4\u5982\u7ed9 \\((x_1,y_1)\\) \u4e3a\u5de6\u4e0a\u89d2\uff0c \\((x_2,y_2)\\) \u4e3a\u53f3\u4e0b\u89d2\u7684\u5b50\u77e9\u9635\u5168\u90e8\u52a0\u4e0a \\(d\\) \uff0c\u53ef\u4ee5\u7528\u4e8c\u7ef4\u7ebf\u6bb5\u6811\uff0c\u4f46\u662f\u8fd9\u91cc\u8003\u8651\u5dee\u5206\u3002 \u9996\u5148\u5c1d\u8bd5\u7ed9 \\(c_{x_1,y_1}\\) \u52a0\u4e0a \\(d\\) \uff0c\u90a3\u4e48\u53d1\u73b0\u4ece \\((x_1,y_1)\\) \u4e00\u76f4\u5230\u6574\u4e2a\u77e9\u9635\u7684\u53f3\u4e0b\u89d2\u90fd\u88ab\u52a0\u4e86 \\(d\\) \uff0c\u7136\u540e\u6211\u4eec\u53c8\u9700\u8981\u4fdd\u7559 \\((x_1,y_1) \\to (x_2,y_2)\\) \u3002 \u90a3\u4e48\u7528\u5bb9\u65a5\u601d\u60f3\uff0c\u8ba9 \\(c_{x_1,y_2+1}\\) \uff0c\u548c \\(c_{x_2+1,y_1}\\) \u5168\u90e8\u51cf\u53bb \\(d\\) \uff0c\u7136\u540e\u53d1\u73b0\u6709\u4e2a\u90e8\u5206\u88ab\u591a\u51cf\u53bb\u4e86\uff0c\u662f \\(c_{x_2+1,y_2+1}\\) \uff0c\u6240\u4ee5\u7ed9\u5b83\u52a0\u56de\u6765\u3002 \u90a3\u4e48\u4fee\u6539\u5c31\u5316\u4e3a\u4e86\u56db\u6b65\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 int a [ si ][ si ], c [ si ][ si ]; for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= m ; ++ j ){ scanf ( \"%d\" , & a [ i ][ j ]); c [ i ][ j ] = a [ i ][ j ] - a [ i -1 ][ j ] - a [ i ][ j -1 ] + a [ i -1 ][ j -1 ]; } } int x , xx , y , yy , d ; scanf ( \"%d%d%d%d%d\" , & x , & y , & xx , & yy , & d ); c [ x ][ y ] += d , c [ x ][ yy + 1 ] -= d , c [ xx + 1 ][ y ] -= d , c [ xx + 1 ][ yy + 1 ] += d ; for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= m ; ++ j ){ a [ i ][ j ] = a [ i -1 ][ j ] + a [ i ][ j -1 ] - a [ i -1 ][ j -1 ] + c [ i ][ j ]; } } // \u505a\u4e8c\u7ef4\u524d\u7f00\u548c\u8fd8\u539f\u77e9\u9635\u3002 \u53ea\u8981\u6ce8\u610f\u5dee\u5206\u548c\u524d\u7f00\u548c\u7684\u7d27\u5bc6\u5173\u7cfb\uff0c\u73b0\u63a8\u90fd\u662f\u53ef\u4ee5\u7684\u3002","title":"\u524d\u7f00\u548c & \u5dee\u5206"},{"location":"algor/basic/difference-and-prefix-sum/#_1","text":"","title":"\u524d\u7f00\u548c"},{"location":"algor/basic/difference-and-prefix-sum/#_2","text":"\u53ef\u4ee5\u5b9e\u73b0 \\(\\text{O}(n)\\) \u9884\u5904\u7406\uff0c \\(\\text{O}(1)\\) \u8be2\u95ee\u533a\u95f4\u548c\u3002 \u4ee4 \\(sum_i\\) \u8868\u793a\u533a\u95f4 \\([0,i]\\) \u7684\u524d\u7f00\u548c\u3002 \u7279\u522b\u7684\uff0c \\(a_0=0\\) \u3002 \u90a3\u4e48\u6bcf\u6b21\u7d2f\u52a0\u5373\u53ef\uff0c\u67e5\u8be2\u533a\u95f4 \\([l,r]\\) \u7684\u548c\u53ea\u9700\u8981\u8f93\u51fa \\(sum_r-sum_{l-1}\\) \u3002 1 2 3 4 int a [ si ], sum [ si ]; a [ 0 ] = sum [ 0 ] = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ scanf ( \"%d\" , & a [ i ]), sum [ i ] = sum [ i -1 ] + a [ i ]; } int l , r ; scanf ( \"%d%d\" , & l , & r ), printf ( \"%d \\n \" , sum [ r ] - sum [ l -1 ]);","title":"\u4e00\u7ef4\u524d\u7f00\u548c"},{"location":"algor/basic/difference-and-prefix-sum/#_3","text":"\u53ef\u4ee5\u5b9e\u73b0 \\(\\text{O}(n^2)\\) \u9884\u5904\u7406\uff0c \\(\\text{O}(1)\\) \u8be2\u95ee\u77e9\u9635\u548c\u3002 \u4ee4 \\(sum_{i,j}\\) \u8868\u793a\u5de6\u4e0a\u89d2\u4e3a \\((1,1)\\) \uff0c\u53f3\u4e0b\u89d2\u4e3a \\((i,j)\\) \u7684\u77e9\u9635\u548c\u3002 \u8003\u8651\u5bb9\u65a5\uff0c\u9884\u5904\u7406\u7684\u65f6\u5019\u4ee4 \\(sum_{i,j}=sum_{i-1,j}+sum_{i,j-1}-sum_{i-1,j-1}+a[i][j]\\) \u3002 \u4ecd\u7136\u8003\u8651\u5bb9\u65a5\uff0c\u8be2\u95ee\u5de6\u4e0a\u89d2\u4e3a \\((x_1,y_1)\\) \uff0c\u53f3\u4e0b\u89d2\u4e3a \\((x_2,y_2)\\) \u7684\u5b50\u77e9\u9635\u5219\u53ea\u9700\u8981\uff1a \\(ans=sum_{x_2,y_2}-sum_{x_1,y_2}-sum_{x_2,y_1}+sum_{x_1,y_1}\\) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int a [ si ][ si ], sum [ si ][ si ]; memset ( sum , 0 , sizeof sum ); for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= m ; ++ j ){ scanf ( \"%d\" , & a [ i ][ j ]), sum [ i ][ j ] += a [ i ][ j ]; } } for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= m ; ++ j ){ sum [ i ][ j ] += sum [ i -1 ][ j ] + sum [ i ][ j -1 ] - sum [ i -1 ][ j -1 ]; } } int x , xx , y , yy ; scanf ( \"%d%d%d%d\" , & x , & y , & xx , & yy ); printf ( \"%d \\n \" , sum [ xx ][ yy ] - sum [ x ][ yy ] - sum [ xx ][ y ] + sum [ x ][ y ]);","title":"\u4e8c\u7ef4\u524d\u7f00\u548c"},{"location":"algor/basic/difference-and-prefix-sum/#_4","text":"","title":"\u5dee\u5206"},{"location":"algor/basic/difference-and-prefix-sum/#_5","text":"\u53ef\u4ee5\u5b9e\u73b0 \\(\\text{O}(1)\\) \u4fee\u6539\uff0c \\(\\text{O}(n)\\) \u67e5\u8be2\u3002 \u4e00\u4e2a\u4fbf\u4e8e\u7406\u89e3\u7684\u7279\u70b9\u5c31\u662f\uff0c \u539f\u6570\u7ec4\u5c31\u662f\u5dee\u5206\u5e8f\u5217\u7684\u524d\u7f00\u548c \u3002 \u5b9a\u4e49\u5dee\u5206\u5e8f\u5217 \\(c_i=\\begin{cases}a_1 & i=1 \\\\ a_i-a_{i-1} & \\text{otherwise.}\\end{cases}\\) \u7136\u540e\u5982\u679c\u8981\u4fee\u6539 \\([l,r]\\) \uff0c\u90a3\u4e48\u7ed9 \\(c[l]\\) \u52a0\u4e0a \\(d\\) \uff0c \\(c[r+1]\\) \u51cf\u53bb \\(d\\) \u3002 \u5176\u5b9e\u5f88\u597d\u7406\u89e3\uff0c\u8981\u8ba9 \\(c\\) \u7684\u524d\u7f00\u548c\u6570\u7ec4\u7684 \\([l,r]\\) \u6539\u53d8\uff0c\u90a3\u5148\u5728 \\(l\\) \u8fd9\u513f\u52a0\u4e0a \\(d\\) \uff0c\u8ba9 \\(a[l]\\to a[n]\\) \u90fd\u591a\u4e00\u4e2a \\(d\\) \u3002 \u7136\u540e\u5728 \\(r+1\\) \u8fd9\u513f\u51cf\u53bb \\(d\\) \uff0c\u8ba9 \\(a[r+1] \\to a[n]\\) \u90fd\u5c11\u4e00\u4e2a \\(d\\) \u5c31\u53ef\u4ee5\u4e86\u3002 1 2 3 4 5 6 7 8 int a [ si ], c [ si ]; scanf ( \"%d\" , & a [ 1 ]), c [ 0 ] = 0 , c [ 1 ] = a [ 1 ]; for ( register int i = 2 ; i <= n ; ++ i ){ scanf ( \"%d\" , & a [ i ]), c [ i ] = a [ i ] - a [ i -1 ]; } int l , r , d ; scanf ( \"%d%d%d\" , & l , & r , & d ), c [ l ] += d , c [ r + 1 ] -= d ; for ( register int i = 1 ; i <= n ; ++ i ){ c [ i ] += c [ i -1 ], printf ( \"%d \\n \" , c [ i ]); } // \u505a\u524d\u7f00\u548c\u6062\u590d\u5e8f\u5217\u3002","title":"\u4e00\u7ef4\u5dee\u5206"},{"location":"algor/basic/difference-and-prefix-sum/#_6","text":"\u53ef\u4ee5\u5b9e\u73b0 \\(\\text{O}(1)\\) \u4fee\u6539\uff0c \\(\\text{O}(n^2)\\) \u67e5\u8be2\u3002 \u5b9a\u4e49\u5dee\u5206\u77e9\u9635 \\(c_{i,j}\\) \uff0c\u6ee1\u8db3 \\(a_{i,j}\\) \u4e3a \\(c_{i,j}\\) \u7684\u524d\u7f00\u548c\u77e9\u9635\u3002 \u7528\u4e8c\u7ef4\u524d\u7f00\u548c\u7684\u601d\u60f3\u53ef\u4ee5\u5f97\u5230\uff1a \\(a_{i,j}=a_{i-1,j}+a_{i,j-1}-a_{i-1,j-1}+c_{i,j}\\) \u3002 \u90a3\u4e48 \\(c_{i,j}=a_{i,j}-a_{i-1,j}-a_{i,j-1}+a_{i-1,j-1}\\) \u3002 \u7136\u540e\u8003\u8651\u600e\u4e48\u6837\u8fdb\u884c\u77e9\u9635\u7ef4\u62a4\u3002 \u7c7b\u4f3c\u4e00\u7ef4\u5dee\u5206\u7684\u601d\u60f3\uff0c\u6211\u6253\u7b97\u5728\u7aef\u70b9\u5904\u8fdb\u884c\u7ef4\u62a4\u3002 \u6bd4\u5982\u7ed9 \\((x_1,y_1)\\) \u4e3a\u5de6\u4e0a\u89d2\uff0c \\((x_2,y_2)\\) \u4e3a\u53f3\u4e0b\u89d2\u7684\u5b50\u77e9\u9635\u5168\u90e8\u52a0\u4e0a \\(d\\) \uff0c\u53ef\u4ee5\u7528\u4e8c\u7ef4\u7ebf\u6bb5\u6811\uff0c\u4f46\u662f\u8fd9\u91cc\u8003\u8651\u5dee\u5206\u3002 \u9996\u5148\u5c1d\u8bd5\u7ed9 \\(c_{x_1,y_1}\\) \u52a0\u4e0a \\(d\\) \uff0c\u90a3\u4e48\u53d1\u73b0\u4ece \\((x_1,y_1)\\) \u4e00\u76f4\u5230\u6574\u4e2a\u77e9\u9635\u7684\u53f3\u4e0b\u89d2\u90fd\u88ab\u52a0\u4e86 \\(d\\) \uff0c\u7136\u540e\u6211\u4eec\u53c8\u9700\u8981\u4fdd\u7559 \\((x_1,y_1) \\to (x_2,y_2)\\) \u3002 \u90a3\u4e48\u7528\u5bb9\u65a5\u601d\u60f3\uff0c\u8ba9 \\(c_{x_1,y_2+1}\\) \uff0c\u548c \\(c_{x_2+1,y_1}\\) \u5168\u90e8\u51cf\u53bb \\(d\\) \uff0c\u7136\u540e\u53d1\u73b0\u6709\u4e2a\u90e8\u5206\u88ab\u591a\u51cf\u53bb\u4e86\uff0c\u662f \\(c_{x_2+1,y_2+1}\\) \uff0c\u6240\u4ee5\u7ed9\u5b83\u52a0\u56de\u6765\u3002 \u90a3\u4e48\u4fee\u6539\u5c31\u5316\u4e3a\u4e86\u56db\u6b65\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 int a [ si ][ si ], c [ si ][ si ]; for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= m ; ++ j ){ scanf ( \"%d\" , & a [ i ][ j ]); c [ i ][ j ] = a [ i ][ j ] - a [ i -1 ][ j ] - a [ i ][ j -1 ] + a [ i -1 ][ j -1 ]; } } int x , xx , y , yy , d ; scanf ( \"%d%d%d%d%d\" , & x , & y , & xx , & yy , & d ); c [ x ][ y ] += d , c [ x ][ yy + 1 ] -= d , c [ xx + 1 ][ y ] -= d , c [ xx + 1 ][ yy + 1 ] += d ; for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= m ; ++ j ){ a [ i ][ j ] = a [ i -1 ][ j ] + a [ i ][ j -1 ] - a [ i -1 ][ j -1 ] + c [ i ][ j ]; } } // \u505a\u4e8c\u7ef4\u524d\u7f00\u548c\u8fd8\u539f\u77e9\u9635\u3002 \u53ea\u8981\u6ce8\u610f\u5dee\u5206\u548c\u524d\u7f00\u548c\u7684\u7d27\u5bc6\u5173\u7cfb\uff0c\u73b0\u63a8\u90fd\u662f\u53ef\u4ee5\u7684\u3002","title":"\u4e8c\u7ef4\u5dee\u5206"},{"location":"algor/basic/greedy/","text":"\u6982\u8ff0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8d2a\u5fc3\uff0c\u4e3b\u8981\u7684\u601d\u60f3\u5c31\u662f\u201c\u53ea\u770b\u773c\u524d\u7684\u6700\u4f18\u5229\u76ca\u201d\u3002 \u4e2a\u4eba\u8ba4\u4e3a\u8d2a\u5fc3\u7b97\u6cd5\u7684\u91cd\u70b9\u5c31\u5728\u4e8e\u731c\u3002 \u5c31\u662f\u8981\u5148\u53bb\u5927\u80c6\u731c\u6d4b\u201c\u5c40\u90e8\u6700\u4f18\u80fd\u63a8\u5e7f\u5230\u5168\u5c40\u6700\u4f18\u201d\uff0c\u7136\u540e\u53bb\u627e\u51fa\u201c\u5c40\u90e8\u6700\u4f18\u201d\u3002 \u7136\u540e\u5229\u7528\u4e0b\u9762\u63d0\u5230\u7684\u65b9\u5f0f\u53bb\u8bc1\u660e/\u8bc1\u4f2a\u3002 \u8303\u56f4\u7f29\u653e\u6cd5 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e00\u822c\u9700\u8981\u8bc1\u660e\u4efb\u4f55\u5bf9\u4e8e\u5c40\u90e8\u201c\u6700\u4f18\u201d\u51b3\u7b56\u7684\u4f5c\u7528\u8303\u56f4\u7684\u6269\u5c55\u4e0d\u4f1a\u5f71\u54cd\u5168\u5c40\u6700\u4f18\u89e3\uff08\u4e0d\u9020\u6210\u6574\u4f53\u7ed3\u679c\u53d8\u5dee\uff09\u3002 \u5e38\u7528\u4e8e\u4e00\u4e9b\u51b3\u7b56\u5177\u6709\u524d\u540e\u5173\u8054\u7684\u95ee\u9898\u5f53\u4e2d\uff08\u8fd9\u79cd\u8981\u7279\u522b\u5c0f\u5fc3\uff0c\u5bb9\u6613\u548c DP \u641e\u6df7\u6dc6\u3002\uff09 \u4f8b\u9898\uff1a POJ3614 Sunscreen To avoid unsightly burns while tanning, each of the C (1 \u2264 C \u2264 2500) cows must cover her hide with sunscreen when they're at the beach. Cow i has a minimum and maximum SPF rating (1 \u2264 minSPFi \u2264 1,000; minSPFi \u2264 maxSPFi \u2264 1,000) that will work. If the SPF rating is too low, the cow suffers sunburn; if the SPF rating is too high, the cow doesn't tan at all........ The cows have a picnic basket with L (1 \u2264 L \u2264 2500) bottles of sunscreen lotion, each bottle i with an SPF rating SPFi (1 \u2264 SPFi \u2264 1,000). Lotion bottle i can cover coveri cows with lotion. A cow may lotion from only one bottle. What is the maximum number of cows that can protect themselves while tanning given the available lotions? \u9898\u89e3 \u6211\u4eec\u8003\u8651\u8fd9\u6837\u4e00\u4e2a\u60f3\u6cd5\uff1a\u524d\u9762\u7684\u725b\u6d82\u9632\u6652\u971c\u7684\u65f6\u5019\uff0c\u8981\u5c3d\u91cf\u8ba9\u540e\u9762\u80fd\u66f4\u591a\u7684\u6d82\uff0c\u8fd9\u6837\u7b54\u6848\u624d\u80fd\u66f4\u4f18\u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u8fdb\u884c\u6392\u5e8f\uff0c\u4e00\u4e2a\u6bd4\u8f83 naive \u7684\u60f3\u6cd5\u662f\uff0c\u6309\u7167 \\(\\text{minSPF}\\) \u5347\u5e8f\u6392\u5e8f\uff0c\u7136\u540e\u6bcf\u6b21\u5c3d\u91cf\u9009\u80fd\u7528\u7684\u9632\u6652\u971c\u91cc\u9762\u6700\u5c0f\u7684\u4e00\u4e2a\u3002 \u8fd9\u6837\u770b\u8d77\u6765\u53ef\u4ee5\u8ba9\u540e\u9762\u7684\u6709\u66f4\u591a\u9009\u62e9\uff0c\u4f46\u662f\u80fd\u4e25\u8c28\u8bc1\u660e\u5417\uff1f \u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u70b9\u7684\u51b3\u7b56\u4f1a\u5f71\u54cd\u5230\u4e4b\u540e\u7684\u51b3\u7b56\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u4f7f\u7528\u8303\u56f4\u653e\u7f29\u6cd5\u8bc1\u660e\u8fd9\u4e2a\u7ed3\u8bba\u3002 \u4e5f\u5c31\u662f\u53bb\u8bc1\u660e\u6309\u7167\u8fd9\u79cd\u65b9\u5f0f\u6392\u5e8f\u4e4b\u540e\uff0c\u6bcf\u6b21\u9009\u53d6\u80fd\u7528\u7684\u91cc\u9762\u6700\u5c0f\u7684\u4e00\u4e2a\uff0c\u4e0d\u4f1a\u8ba9\u540e\u9762\u7684\u7ed3\u679c\u53d8\u5dee\u3002 \u8003\u8651\u5f53\u524d\u4e3a\u7b2c \\(i\\) \u5934\u725b\uff0c\u5bf9\u4e8e\u5b83\u80fd\u4f7f\u7528\u7684\u4efb\u610f\u4e24\u79cd\u9632\u6652\u971c \\(x,y\\) \uff0c\u5047\u8bbe \\(\\text{SPF}(x) < \\text{SPF}(y)\\) \u3002 \u90a3\u4e48\u6211\u4eec\u5c31\u8981\u53bb\u9009\u62e9 \\(x\\) \uff0c\u770b\u4e00\u4e0b\u5bf9\u4e8e\u540e\u9762\u4f1a\u4e0d\u4f1a\u6709\u4ec0\u4e48\u5f71\u54cd\uff0c\u663e\u7136\uff0c\u5bf9\u4e8e\u540e\u9762\u7684\u725b\uff0c\u6709\uff1a \\(x,y\\) \u90fd\u6ca1\u6cd5\u9002\u5408 \\(x,y\\) \u90fd\u80fd\u9002\u5408 \\(x\\) \u9002\u5408\u800c \\(y\\) \u4e0d\u9002\u5408 \\(y\\) \u9002\u5408\u800c \\(x\\) \u4e0d\u9002\u5408 \u8fd9\u56db\u79cd\u60c5\u51b5\uff0c\u7b2c\u4e00\u79cd\u548c\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e0d\u7ba1\u6211\u4eec\u662f\u9009 \\(x\\) \u8fd8\u662f\u9009 \\(y\\) \uff0c\u7ed3\u679c\u90fd\u4e0d\u4f1a\u53d8\u5dee\uff0c\u53ef\u4ee5\u4e0d\u7528\u7ba1\u3002 \u7b2c\u56db\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9009\u4e86 \\(x\\) \uff0c\u5bf9\u540e\u9762\u4e5f\u4e0d\u4f1a\u6709\u5f71\u54cd\uff0c\u552f\u4e00\u4f1a\u9020\u6210\u5f71\u54cd\u7684\u5c31\u662f\u7b2c\u4e09\u79cd\u60c5\u51b5\uff0c\u5176\u5b83\u4e09\u8005\u90fd\u6709\u6bd4\u8f83\u663e\u7136\u7684\u4f8b\u5b50\u80fd\u8bc1\u660e\u4ed6\u4eec\u4f1a\u51fa\u73b0\uff0c\u73b0\u5728\u8003\u8651\u7b2c\u4e09\u79cd\u60c5\u51b5\u4f1a\u4e0d\u4f1a\u51fa\u73b0 \uff0c\u597d\u5224\u65ad\u8fd9\u4e2a\u8d2a\u5fc3\u65b9\u5f0f\u662f\u5426\u6b63\u786e\u3002 \u73b0\u5728 \\(\\text{minSPF}\\) \u7684\u5355\u8c03\u6027\u5df2\u7ecf\u786e\u5b9a\u4e86\uff0c\u5047\u8bbe \\(\\text{maxSPF}\\) \u4e5f\u5355\u8c03\u9012\u589e\u7684\u8bdd\uff0c\u90a3\u4e48\u7b2c\u4e09\u79cd\u60c5\u51b5\u5c31\u4e0d\u5b58\u5728\uff0c\u6240\u4ee5\u770b\u8d77\u6765\u8fd9\u4e2a\u8d2a\u5fc3\u662f\u5bf9\u7684\u3002 \u4f46\u662f\u95ee\u9898\u5c31\u5728\u4e8e\uff0c \\(\\text{maxSPF}\\) \u4e0d\u4e00\u5b9a\u5355\u8c03\u9012\u589e\u554a\uff01\u6709\u53ef\u80fd\u7a81\u7136\u201c\u7f29\u56de\u6765\u201d\u4e86\u3002 \u6bd4\u5982\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 1 2 3 4 5 6 | _________ | | ___ | | ___ | \u725b \uff1a [ 1 , 6 ]; [ 2 , 4 ]; [ 3 , 5 ]. \u9632\u6652\u971c : SPF = 3 , cover = 1 ; SPF = 6 , cover = 1 ; \u7136\u540e\u4f60\u5c31\u53d1\u73b0\uff0c\u7b2c\u4e09\u79cd\u60c5\u51b5\u662f\u5b58\u5728\u7684\uff0c\u6240\u4ee5\u8fd9\u79cd\u8d2a\u5fc3\u4e0d\u662f\u6700\u4f18\u7684\uff0c\u56e0\u4e3a\u8fd9\u6837\u7684\u51b3\u7b56\u4f1a\u5bfc\u81f4\u540e\u9762\u7684\u5168\u5c40\u7b54\u6848\u53d8\u5dee\u3002 \u6709\u6ca1\u6709\u66f4\u4f18\u79c0\u7684\u8d2a\u5fc3\u65b9\u5f0f\uff1f\u663e\u7136\u4e00\u76f4\u9009\u6700\u5c0f\u7684\u80fd\u9009\u7684\u9632\u6652\u971c\uff0c\u5728 \\(\\text{minSPF}\\) \u6216\u8005 \\(\\text{maxSPF}\\) \u5347\u5e8f\u6392\u5e8f\u7684\u65f6\u5019\u7684\u5927\u65b9\u5411\u4e00\u5b9a\u662f\u5bf9\u7684\u3002 \u8fd9\u91cc\u6392 \\(\\text{minSPF}\\) \u4e0d\u884c\uff0c\u4e3a\u5565\u4e0d\u6392 \\(\\text{maxSPF}\\) \u5462\uff1f\u6240\u4ee5\u73b0\u5728\u8003\u8651\uff0c\u6309\u7167 \\(\\text{maxSPF}\\) \u5347\u5e8f\u6392\u5e8f\uff0c\u6bcf\u6b21\u8003\u8651\u9009\u9002\u5408\u7684\u9632\u6652\u971c\u91cc\u9762 \\(\\text{SPF}\\) \u6700\u5c0f\u7684\u3002 \u4eff\u7167\u4e0a\u9762\u7684\u65b9\u5f0f\uff0c\u8003\u8651\u6bcf\u4e00\u4e2a\u70b9\u4efb\u610f\u7684\u4e24\u79cd\u51b3\u7b56 \\(x,y\\) \u3002\u53d1\u73b0\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4ecd\u65e7\u4e0d\u7528\u7ba1\u3002 \u7b2c\u56db\u79cd\u60c5\u51b5\u4e5f\u53ef\u80fd\u51fa\u73b0\uff0c\u4e0d\u8fc7\u4e5f\u4e0d\u7528\u62c5\u5fc3\uff0c\u7136\u540e\u7b2c\u4e09\u79cd\u60c5\u51b5\u5c31\u4e0d\u4f1a\u51fa\u73b0\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u62ff\u4e0a\u9762\u7684\u53cd\u4f8b\u6765\u4e3e\u4e2a\u4f8b\u5b50\u3002 1 2 3 4 5 6 7 1 2 3 4 5 6 | ___ | | ___ | | _________ | \u725b \uff1a [ 1 , 6 ]; [ 2 , 4 ]; [ 3 , 5 ]. \u9632\u6652\u971c : SPF = 3 , cover = 1 ; SPF = 6 , cover = 1 ; \u7528\u8303\u56f4\u7f29\u653e\u6cd5\uff0c\u53ef\u4ee5\u77e5\u9053\u7b2c\u4e8c\u79cd\u8d2a\u5fc3\u7684\u6b63\u786e\u6027\u3002 \u5f53\u7136\uff0c\u5982\u679c\u8003\u8651\u9009\u5927\u7684\uff0c\u90a3\u5c31\u662f \\(\\text{minSPF}\\) \u964d\u5e8f\u6392\u5e8f\uff0c\u9053\u7406\u4e00\u6837\uff0c\u4e0d\u8fc7\u5c31\u662f\u6392\u5217\u4e00\u4e0b \\(\\text{min/maxSPF}\\) \u548c \\(\\text{SPF}\\) \u7684\u6392\u5217\u65b9\u5f0f\u800c\u5df2\u3002 \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define meow(x) cerr << #x << \" = \" << x using namespace std ; // using i64 = long long; const int si = 3e4 + 10 ; int C , L ; struct Cows { int maxSPF , minSPF ; bool operator < ( const Cows & b ) const { if ( maxSPF == b . maxSPF ) return minSPF < b . minSPF ; return maxSPF < b . maxSPF ; } } a [ si ]; struct Fk { int SPF , cover ; bool operator < ( const Fk & b ) const { return SPF < b . SPF ; } } b [ si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> C >> L ; for ( int i = 1 ; i <= C ; ++ i ) cin >> a [ i ]. minSPF >> a [ i ]. maxSPF ; for ( int i = 1 ; i <= L ; ++ i ) cin >> b [ i ]. SPF >> b [ i ]. cover ; sort ( a + 1 , a + 1 + C ); sort ( b + 1 , b + 1 + L ); int ans = 0 ; // int current = 1; for ( int i = 1 ; i <= C ; ++ i ) { for ( int j = 1 ; j <= L ; ++ j ) { if ( a [ i ]. minSPF <= b [ j ]. SPF && b [ j ]. SPF <= a [ i ]. maxSPF && b [ j ]. cover != 0 ) { ans ++ , b [ j ]. cover -- ; break ; } } } cout << ans << endl ; return 0 ; } \u4f8b\u9898\uff1a POJ3190 Stall Reservations Oh those picky N (1 <= N <= 50,000) cows! They are so picky that each one will only be milked over some precise time interval A..B (1 <= A <= B <= 1,000,000), which includes both times A and B. Obviously, FJ must create a reservation system to determine which stall each cow can be assigned for her milking time. Of course, no cow will share such a private moment with other cows. Help FJ by determining: The minimum number of stalls required in the barn so that each cow can have her private milking period An assignment of cows to these stalls over time Many answers are correct for each test dataset; a program will grade your answer. \u9898\u89e3 \u8fd9\u9898\u672c\u8d28\u4e0a\u5c31\u662f\u7ed9\u4f60\u82e5\u5e72\u4e2a\u533a\u95f4\uff0c\u8981\u4f60\u628a\u5b83\u4eec\u5206\u6210\u82e5\u5e72\u4e2a\u7ec4\uff0c\u4fdd\u8bc1\u6bcf\u4e00\u4e2a\u7ec4\u91cc\u9762\u533a\u95f4\u4e0d\u76f8\u4ea4\uff0c\u6c42\u6700\u5c0f\u7684\u533a\u95f4\u6570\uff0c\u6784\u9020\u65b9\u6848\u3002 \u548c CSPS2021T1 \u6781\u5ea6\u7c7b\u4f3c\uff0c\u6211\u5f53\u65f6\u5728\u573a\u4e0a\u60f3\u4e86\u65e0\u6570\u505a\u6cd5\uff0c\u5f88\u53ef\u60dc\u8d2a\u5fc3\u6ca1\u5b66\u597d\uff0c\u5bc4\u6389\u4e86\uff0c\u73b0\u5728\u771f\u7684\u662f\u6094\u6b7b\u4e86\u3002 \u4e0d\u96be\u60f3\u5230\u4e00\u4e2a\u66b4\u529b\uff1a\u76f4\u63a5\u7ef4\u62a4\u5f53\u524d\u755c\u680f\u7684\u4e2a\u6570 \\(tot\\) \uff0c\u5e76\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u755c\u680f\u5f53\u524d\u653e\u8fdb\u53bb\u7684\u725b\u7684\u7ed3\u675f\u65f6\u95f4\u3002 \u7136\u540e\u8003\u8651\u5bf9\u4e8e\u725b\uff0c\u6309\u7167\u5f00\u59cb\u65f6\u95f4\u5347\u5e8f\u6392\u5e8f\uff0c\u6bcf\u6b21\u5982\u679c\u5f53\u524d\u6709\u755c\u680f\u53ef\u7528\uff0c\u5c31\u653e\u8fdb\u53bb\uff0c\u5426\u5219\u65b0\u5efa\u4e00\u4e2a\u755c\u680f\u3002 \u7136\u540e\u7528 std::priority_queue \u53ef\u4ee5\u76f4\u63a5\u7ef4\u62a4\u5230\u5f53\u524d\u6700\u65e9\u7ed3\u675f\u7684\u4e00\u4e2a\uff0c\u628a\u725b\u5c1d\u8bd5\u5f80\u8fd9\u4e2a\u91cc\u9762\u653e\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n\\log n)\\) \u3002 \u8fd9\u662f\u4e00\u4e2a\u6bd4\u8f83\u7ecf\u5178\u7684\u8d2a\u5fc3\uff0c\u601d\u8003\u51fa\u6765\u5e94\u8be5\u4e0d\u96be\uff0c\u8003\u8651\u5982\u4f55\u8bc1\u660e\u8fd9\u4e2a\u8d2a\u5fc3\u3002 \u5176\u5b9e\u5c31\u662f\uff0c\u56e0\u4e3a\u4f60\u6392\u8fc7\u5e8f\u4e86\uff0c\u6240\u4ee5\u7ed3\u675f\u7684\u65e9\u7684\u80fd\u5c3d\u91cf\u65e9\u7684\u653e\u4e00\u5934\u725b\u8fdb\u53bb\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u6d6a\u8d39\u65f6\u95f4\uff0c\u5bf9\u540e\u9762\u4e0d\u4f1a\u9020\u6210\u4efb\u4f55\u5f71\u54cd\u3002 \u6709\u4e00\u4e2a\u611f\u89c9\u662f\u53cd\u4f8b\u7684\u4e1c\u897f\uff1a\u4e07\u4e00\u6392\u5e8f\u8fc7\u540e\u524d\u4e00\u4e2a\u662f [3, 6] \uff0c\u540e\u4e00\u4e2a\u662f [3,5] \u600e\u4e48\u529e\uff1f \u5443\uff0c\u76f4\u63a5\u628a\u7ed3\u675f\u65f6\u95f4\u4e5f\u8ba1\u5165\u5173\u952e\u5b57\u5c31\u5b8c\u4e8b\u513f\u4e86\uff0c\u8fd9\u6837\u505a\u5c31\u80fd\u5c3d\u91cf\u8282\u7701\u65f6\u95f4\uff0c\u63d0\u5347\u6548\u7387\u3002 \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 // author : black_trees #include <queue> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define meow(x) cerr << #x << \" = \" << x using namespace std ; // using i64 = long long; const int si = 5e4 + 10 ; int n ; struct Cow { int l , r , id ; bool operator < ( const Cow & b ) const { if ( l == b . l ) return r < b . r ; return l < b . l ; } } a [ si ]; int ans [ si ]; int tot = 0 ; struct Stall { int id , ed ; bool operator < ( const Stall & b ) const { return ed > b . ed ; } }; std :: priority_queue < Stall > q ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]. l >> a [ i ]. r , a [ i ]. id = i ; sort ( a + 1 , a + 1 + n ); // for(int i = 1; i <= n; ++i) // meow(i) << \" \", meow(a[i].l) << \" \", meow(a[i].r) << endl; tot ++ ; Stall tmp ; tmp . id = tot , tmp . ed = a [ 1 ]. r ; q . push ( tmp ), ans [ a [ 1 ]. id ] = 1 ; for ( int i = 2 ; i <= n ; ++ i ) { Stall tp = q . top (); // meow(i) << \" \", meow(q.top().id) << \" \", meow(q.top().ed) << endl; if ( tp . ed < a [ i ]. l ) { ans [ a [ i ]. id ] = tp . id ; q . pop (), tp . ed = a [ i ]. r , q . push ( tp ); } else tmp . id = ++ tot , tmp . ed = a [ i ]. r , ans [ a [ i ]. id ] = tot , q . push ( tmp ); } cout << tot << endl ; for ( int i = 1 ; i <= n ; ++ i ) cout << ans [ i ] << endl ; return 0 ; } \u51b3\u7b56\u5305\u5bb9\u6027 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e00\u822c\u662f\u8bc1\u660e\u5728\u4efb\u610f\u7684\u5c40\u9762\u4e0b\uff0c\u505a\u51fa\u5c40\u90e8\u6700\u4f18\u51b3\u7b56\u4e4b\u540e\uff0c\u8fd9\u4e2a\u51b3\u7b56\u5728\u95ee\u9898\u72b6\u6001\u7a7a\u95f4\u91cc\u7684\u53ef\u8fbe\u96c6\u5408\u5305\u542b\u4e86\u6240\u6709\u8fd9\u4e00\u6b65\u505a\u51fa\u5176\u5b83\u4efb\u610f\u51b3\u7b56\u7684\u53ef\u8fbe\u96c6\u5408\u3002 \u4e5f\u5c31\u662f\u8fd9\u4e2a\u5c40\u90e8\u6700\u4f18\u51b3\u7b56\u63d0\u4f9b\u7684\u53ef\u80fd\u6027\u5305\u542b\u4e86\u5176\u5b83\u6240\u6709\u7b56\u7565\u7684\u53ef\u80fd\u6027\u3002 \u4f8b\u9898\uff1a POJ1328 Radar Installation Assume the coasting is an infinite straight line. Land is in one side of coasting, sea in the other. Each small island is a point locating in the sea side. And any radar installation, locating on the coasting, can only cover d distance, so an island in the sea can be covered by a radius installation, if the distance between them is at most d. We use Cartesian coordinate system, defining the coasting is the x-axis. The sea side is above x-axis, and the land side below. Given the position of each island in the sea, and given the distance of the coverage of the radar installation, your task is to write a program to find the minimal number of radar installations to cover all the islands. Note that the position of an island is represented by its x-y coordinates. \u9898\u89e3 \u5148\u7528\u52fe\u80a1\u5b9a\u7406\u628a\u6bcf\u4e2a Building \u5904\u7406\u4e00\u4e0b\uff0c\u4e5f\u5c31\u662f\u5904\u7406\u4e00\u4e0b \\(x\\) \u8f74\u4e0a\u7684\u54ea\u4e00\u4e2a\u533a\u95f4\u53ef\u4ee5\u8986\u76d6\u5b83\u3002 \u95ee\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\uff0c\u7ed9\u5b9a \\(n\\) \u4e2a\u533a\u95f4\uff0c\u7528\u6700\u5c11\u7684\u70b9\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u533a\u95f4\u90fd\u6709\u4e00\u4e2a\u70b9\u3002 \u8003\u8651\u4e00\u4e2a\u8d2a\u5fc3\uff1a\u6309\u7167\u533a\u95f4\u5de6\u7aef\u70b9 \\(l\\) \u5347\u5e8f\u6392\u5e8f\uff0c\u7ef4\u62a4\u5f53\u524d\u6700\u540e\u4e00\u4e2a\u653e\u7684\u70b9\u7684\u5750\u6807 \\(p\\) \u3002 \u5982\u679c\u5f53\u524d\u626b\u5230\u7684\u533a\u95f4\u4e0d\u80fd\u88ab\u8fd9\u4e2a\u70b9\u63a7\u5236\u5230\uff0c\u4e5f\u5c31\u662f \\(l > p\\) \uff0c\u90a3\u4e48\u65b0\u653e\u4e00\u4e2a\u70b9\u5728 \\(r\\) \u3002 \u5426\u5219\u8ba9 \\(p = \\min(p, r)\\) \uff0c\u4e5f\u5c31\u662f\u76f4\u63a5\u8ba9\u5f53\u524d\u533a\u95f4\u88ab\u4e0a\u4e00\u4e2a\u7ba1\u8f96\u3002 \u6700\u540e\u8f93\u51fa\u65b0\u653e\u7684\u6570\u91cf\u5373\u53ef\uff08\u521d\u59cb \\(p = -\\infty\\) \uff09\u3002 \u8bc1\u660e\uff1a \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u533a\u95f4 \\([l_i,r_i]\\) \uff0c\u6709\u4e24\u79cd\u9009\u62e9\uff1a1. \u88ab\u4e4b\u524d\u653e\u7684\u70b9\u63a7\u5236\u30022. \u65b0\u5efa\u4e00\u4e2a\u70b9\u63a7\u5236\u5b83\u3002 \u4e0a\u9762\u7684\u8d2a\u5fc3\u7b56\u7565\u662f\uff0c\u5982\u679c\u80fd \\(1\\) \u5c31\u4f7f\u7528 \\(1\\) \uff0c\u8fd9\u6837\u4e4b\u540e\u968f\u4fbf\u5728\u54ea\u91cc\u653e\u90fd\u884c\uff0c\u56e0\u4e3a \\(i\\) \u548c\u5b83\u4ee5\u524d\u7684\u90fd\u6709\u70b9\u63a7\u5236\u4e86\u3002 \u5426\u5219\u4f7f\u7528 \\(2\\) \uff0c\u8fd9\u6837\u9700\u8981\u5728 \\([l_i, r_i]\\) \u4e0a\u653e\u70b9\uff0c\u53ef\u4ee5\u53d1\u73b0 \\(1\\) \u80fd\u5230\u8fbe\u7684\u51b3\u7b56\u96c6\u5408\u5305\u62ec\u4e86 \\(2\\) \u7684\u3002 \u56e0\u4e3a 1 \u7684\u65f6\u5019\uff0c\u4e0b\u4e00\u4e2a\u53ef\u4ee5\u4efb\u610f\u653e\u3002 \u7136\u540e\u5982\u679c\u9009\u62e9 1\uff0c\u628a\u4e0a\u4e00\u4e2a\u70b9\u653e\u5230 \\(min(r_i,p)\\) \u7684\u4f4d\u7f6e\uff0c\u5c31\u662f\u5c3d\u91cf\u5f80\u540e\u653e\u3002 \u8fd9\u4e2a\u201c\u5c3d\u91cf\u5f80\u540e\u653e\u201d\u7684\u7b56\u7565\u663e\u7136\u5305\u542b\u4e86\u201c\u653e\u5728\u66f4\u524d\u9762\u7684\u4f4d\u7f6e\u201d \u672a\u6765\u4f1a\u5230\u8fbe\u7684\u72b6\u6001\u3002\u3002 \u4e4b\u524d\u5df2\u7ecf\u6392\u8fc7\u5e8f\u4e86\uff0c\u6240\u4ee5\u8c03\u6574\u662f\u4e0d\u4f1a\u5f71\u54cd\u524d\u9762\u7684\u51b3\u7b56\u7684\uff0c\u8fd9\u4e2a\u8d2a\u5fc3\u5c31\u662f\u6b63\u786e\u7684\u3002 \u56e0\u4e3a\u8fd9\u4e2a\u8d2a\u5fc3\u7684\u51b3\u7b56\u5728\u95ee\u9898\u72b6\u6001\u7a7a\u95f4\u91cc\u7684\u53ef\u8fbe\u96c6\u5408\u5305\u542b\u4e86\u6240\u6709\u8fd9\u4e00\u6b65\u505a\u51fa\u5176\u5b83\u4efb\u610f\u51b3\u7b56\u7684\u53ef\u8fbe\u96c6\u5408\u3002 \u6211\u7684\u601d\u8def \u5904\u7406\u51fa\u4e00\u4e9b\u533a\u95f4\uff0c \u7528\u52fe\u80a1\u5b9a\u7406\u7b97\u4e00\u4e0b\u3002 \u7136\u540e\u95ee\u9898\u8f6c\u5316\u4e3a\uff1a\u6c42\u6700\u5c11\u7528\u591a\u5c11\u4e2a\u70b9\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u533a\u95f4\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u70b9\u3002 \u611f\u89c9\u6709\u70b9\u7c7b\u4f3c\u4e4b\u524d CF \u4e0a\u4e00\u5806\u5706\uff0c\u5305\u542b\uff0c\u76f8\u5207\uff0c\u76f8\u79bb\u7684\u67d0\u4e2a\u6811\u5f62DP\u9898\u3002 \u4e0d\u8fc7\u9053\u7406\u4e0d\u4e00\u81f4\uff0c\u8fd9\u4e00\u9898\u533a\u95f4\u53ef\u4ee5\u76f8\u4ea4\uff0cCF\u90a3\u9898\u4e0d\u884c\uff0c\uff08\u6211\u8fd8\u4ea4\u8fc7\u7ffb\u8bd1\uff09 \u753b\u4e86\u4e00\u4e2a\u56fe\uff0c\u521a\u597d\u662f\u6309\u7167\u5de6\u7aef\u70b9\u6392\u8fc7\u5e8f\u7684\u3002 \u8003\u8651\u80fd\u4e0d\u80fd\u8d2a\u5fc3\u3002 \u5148\u770b\u770b\u6570\u636e\u8303\u56f4\uff0c\u662f\u4e0d\u662f \\(n \\log n\\) \u5806\uff0c\u6216\u8005 on \u5355\u8c03\u6808/\u961f\u5217 \u4e4b\u7c7b\u7684\u3002 \\(1e3\\) , \\(n^2\\) \u53ef\u4ee5\u8fc7\u3002 \u8003\u8651 \\(n^2\\) \u5427\u3002 \u600e\u4e48\u8d2a\u5fc3\u554a\u3002 \u662f\u4e0d\u662f\u8981\u8003\u8651\u4e00\u4e0b\u5c40\u90e8\u6700\u4f18\u7b56\u7565\u662f\u5565\uff0c\u7136\u540e\u76f4\u63a5\u5c1d\u8bd5\u8bc1\u660e\u6b63\u786e\u6027\uff1f \u5c40\u90e8\u6700\u4f18\u5e94\u8be5\u5c31\u662f\u8003\u8651\u9009\u80fd\u8986\u76d6\u5230\u533a\u95f4\u5c3d\u91cf\u591a\u7684\u4f4d\u7f6e\uff1f \u6bd4\u5982\u6211\u8003\u8651\u7ef4\u62a4\u5f53\u524d\u5bf9\u4e8e\u8c01\u8fdb\u884c\u64cd\u4f5c\uff08\u5c31\u662f\u8bb0\u5f55\u4e00\u4e0b\u54ea\u4e00\u4e9b\u5df2\u7ecf\u88ab\u653e\u8fc7\u4e86\uff09 \u7136\u540e\u5728\u8fd9\u4e2a\u533a\u95f4\u7684\u6240\u6709\u5bf9\u5e94\u7b56\u7565\u91cc\u9009\u62e9\u80fd\u8986\u76d6\u533a\u95f4\u6700\u591a\u7684\u4e00\u4e2a\uff1f \u518d\u628a\u5bf9\u5e94\u7684\u9009\u62e9\u8986\u76d6\u5230\u7684\u533a\u95f4\u5168\u90e8\u6807\u8bb0\uff1f \u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u533a\u95f4\u90fd\u626b\u4e00\u6b21\u5c31\u662f \\(O(n)\\) \u4e86\uff0c\u7136\u540e\u6bcf\u4e2a\u533a\u95f4\u8d2a\u5fc3\u505a\u51b3\u5b9a\u7684\u65f6\u5019\u5c31\u662f \\(O(n)\\) \u3002\u590d\u6742 \\(n^2\\) \u53ef\u4ee5\u8fc7\u3002 \u5c1d\u8bd5\u8bc1\u660e\u6b63\u786e\u6027\uff1f\u4e4b\u524d\u7684\u8d2a\u5fc3\u90fd\u6ca1\u81ea\u5df1\u8bc1\u660e\u8fc7\u6765\u7740\u3002 \u8fd9\u4e2a\u95ee\u9898\u5e94\u8be5\u5c5e\u4e8e\u51b3\u7b56\u4f1a\u5f71\u54cd\u540e\u9762\u7684\uff1f\u8003\u8651\u7528\u6269\u5c55\u6cd5\u8bc1\u660e\uff1f \u7b49\u4e0b\uff0c\u8fd9\u4e2a\u6700\u591a\uff0c\u662f\u4e0d\u662f\u8981\u8003\u8651\u6392\u9664\u4e00\u79cd\u60c5\u51b5\uff1f\u56fe\u4f8b\u91cc\u9762 \u201c\u7ea2\u8272\u586b\u5145\u8868\u8986\u76d6\u8fc7\u4e86\u201d \u90a3\u4e00\u5757\u3002 ==== \u5982\u679c\u6211\u9009\u62e9\u524d\u9762\u7684\u51b3\u7b56\uff0c\u770b\u8d77\u6765\u80fd\u8986\u76d6\u4e09\u4e2a\uff0c\u4f46\u662f\u540e\u9762\u53c8\u6709\u56db\u4e2a\u7684\uff0c\u6309\u7167\u8fd9\u79cd\u60f3\u6cd5\u5e94\u8be5\u662f\u9009\u540e\u9762\uff0c \u4f46\u662f\u540e\u9762\u7684\u80af\u5b9a\u73b0\u5728\u4e0d\u4f1a\u66f4\u65b0\u554a\uff08\u56e0\u4e3a\u6211\u6392\u4e86\u5e8f\uff09\uff0c\u800c\u4e14\u5982\u679c\u6211\u5c40\u90e8\u5c31\u662f\u8fd9\u6837\uff0c\u4f60\u524d\u540e\u6700\u7ec8\u90fd\u662f\u8981\u9009\u7684\u3002 \u6240\u4ee5\u6ca1\u6709\u5f71\u54cd\uff0c\u6700\u591a\u8fd9\u4e2a\u64cd\u4f5c\u5c31\u6ca1\u95ee\u9898\u3002 ==== \u56de\u5230\u8bc1\u660e\uff0c\u6b38 \u611f\u89c9\u4e0a\u9762\u8fd9\u4e2a\u60f3\u6cd5\u5df2\u7ecf\u5f88\u5bf9\u4e86\uff0c\u5c31\u662f\u7a81\u7136\u60f3\u5230\u8fd9\u4e2a\u6700\u591a\u5e94\u8be5\u662f\u600e\u6837\u6700\u591a\u3002 \u56e0\u4e3a\u4f60\u8fdf\u65e9\u90fd\u8981\u9009\u7684\u554a\uff0c\u4f60\u8fd8\u4e0d\u5982\u5c3d\u91cf\u591a\u641e\u4e00\u70b9\u3002 \u5443\uff0c\u6240\u4ee5\u601d\u8def\u5c31\u8fd9\u6837\u4e86\uff0c\u770b\u770b\u5bf9\u4e0d\u5bf9\u5427\u3002 \u548c lyd \u60f3\u6cd5\u4e0d\u592a\u4e00\u81f4\uff1f\uff1f \u4f46\u6211\u89c9\u5f97\u6211\u7684\u601d\u8def\u672c\u8d28\u4e0a\u548c\u4ed6\u7684\u76f8\u540c\uff0c\u53ea\u4e0d\u8fc7\u4ed6\u7684\u66f4\u597d\u5b9e\u73b0\u4e00\u70b9\u3002 \u6211\u7684\u60f3\u6cd5\u91cc\u9762\u90a3\u4e2a \"\u56e0\u4e3a\u4f60\u8fdf\u65e9\u90fd\u8981\u9009\u7684\u554a\uff0c\u4f60\u8fd8\u4e0d\u5982\u5c3d\u91cf\u591a\u641e\u4e00\u70b9\" \u5c31\u7b49\u540c\u4e8e lyd \u505a\u6cd5\u91cc\u9762\u7684\u5c3d\u91cf\u4f7f\u7528 \"1\"\u3002 \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 #include <cmath> #include <cstdio> #include <iostream> #include <algorithm> #define ld long double using namespace std ; const int N = 1006 ; const double INF = -0x3f3f3f3f , eps = 0.000001 ; int n , d , num = 0 ; struct Point { int x , y ; double l , r ; bool operator < ( const Point x ) const { return l < x . l ; } } p [ N ]; void Solve () { for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d %d\" , & p [ i ]. x , & p [ i ]. y ); bool b = 1 ; for ( int i = 1 ; i <= n ; i ++ ) if ( p [ i ]. y > d ) { b = 0 ; break ; } if ( ! b ) { cout << \"Case \" << ++ num << \": -1\" << endl ; return ; } for ( int i = 1 ; i <= n ; i ++ ) { ld k = sqrt (( ld ) d * d - ( ld ) p [ i ]. y * p [ i ]. y ); p [ i ]. l = p [ i ]. x - k , p [ i ]. r = p [ i ]. x + k ; } sort ( p + 1 , p + n + 1 ); int ans = 1 ; double pos = - INF ; for ( int i = 1 ; i <= n ; i ++ ) { if ( pos + eps < p [ i ]. l ) { ans ++ ; pos = p [ i ]. r ; } else pos = min ( p [ i ]. r , pos ); } cout << \"Case \" << ++ num << \": \" << ans << endl ; } int main () { while ( cin >> n >> d && n && d ) Solve (); return 0 ; } Exchange Argument \u03c8(\uff40\u2207\u00b4)\u03c8 \u53ef\u4ee5\u7528\u6765\u8bc1\u660e\u67d0\u4e2a\u8d2a\u5fc3\u7b97\u6cd5\u662f\u5426\u662f\u6700\u4f18\u7684\uff0c\u6216\u8005\u8bf4\u63a8\u5bfc\u51fa\u4e00\u4e2a\u6700\u4f18\u7684\u8d2a\u5fc3\u7b97\u6cd5\u5e94\u5f53\u4ee5\u4f55\u79cd\u7b56\u7565\u8d2a\u5fc3\u3002 \u4e00\u822c\u662f\u8981\u6c42\u4f60\u5728\u4e00\u4e2a\u64cd\u4f5c\u5e8f\u5217\u4e0a\u627e\u5230\u4e00\u4e2a\u6700\u4f18\u7684\u64cd\u4f5c\u987a\u5e8f\uff08\u4e0d\u540c\u7684\u4f4d\u7f6e\uff0c\u9009\u62e9\u987a\u5e8f\u4e0d\u540c\u65f6\u7684\u4ee3\u4ef7\u4e0d\u76f8\u540c\uff09\u3002 \u601d\u8def\u901a\u5e38\u90fd\u662f\u62ff\u67d0\u4e24\u4e2a\u76f8\u90bb\u7684\u9879\u51fa\u6765\uff0c\u7136\u540e\u8003\u8651\u5982\u4f55\u5224\u5b9a\u4ed6\u4eec\u7684\u9009\u53d6\u987a\u5e8f\u662f\u4e0d\u662f\u6700\u4f18\u7684\u3002 \u6bd4\u5982\u6211\u6709\u4e00\u4e2a\u7b97\u6cd5 \\(\\mathcal{O}\\) \uff0c\u5b83\u5bf9\u4e8e \\(i, i + 1\\) \u8fd9\u4e24\u9879\u7684\u9009\u62e9\u987a\u5e8f\u5c31\u662f \\(i \\to i + 1\\) \u3002 \u7136\u540e\u73b0\u5728\u9700\u8981\u8bc1\u660e\u6216\u8005\u8bc1\u4f2a\u8fd9\u4e2a \\(\\mathcal{O}\\) \u662f\u6700\u4f18\u7684\u3002 \u663e\u7136\u8fd8\u6709\u4e00\u79cd\u53ef\u80fd \\(\\mathcal{A}\\) \uff0c\u9009\u53d6\u7684\u987a\u5e8f\u662f \\(i + 1 \\to i\\) \uff0c\u6211\u4eec\u5c31\u9700\u8981\u6bd4\u8f83 \\(\\mathcal{O, A}\\) \u7684\u64cd\u4f5c\u4ee3\u4ef7\u3002 \u5047\u8bbe \\(\\mathcal{O}\\) \u662f\u6700\u4f18\u7684\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4e0d\u7b49\u5f0f\u5c31\u9700\u8981\u6210\u7acb\uff1a \\[ (\\texttt{cost}_{i} \\times \\texttt{order}_{1}) + (\\texttt{cost}_{i + 1} \\times \\texttt{order}_{2}) < (\\texttt{cost}_{i} \\times \\texttt{order}_{2}) + (\\texttt{cost}_{i + 1} \\times \\texttt{order}_{1}) \\] \u5176\u4e2d \\(\\texttt{cost}_{x}\\) \u8868\u793a \\(x\\) \u8fd9\u4e2a\u5143\u7d20\u7684\u6743\u503c\uff0c \\(\\texttt{order}_{1,2}\\) \u8868\u793a\u5148\uff08\u540e\uff09\u9009\u53d6\u6240\u4e58\u4e0a\u7684\u4ee3\u4ef7\u56e0\u5b50\u3002 \u5982\u679c\u628a\u5206\u522b\u5173\u4e8e \\(\\texttt{cost}\\) \u548c\u5173\u4e8e \\(\\texttt{order}\\) \u7684\u4e24\u4e2a\u4e0d\u7b49\u5173\u7cfb\u4ee3\u5165\u4e0a\u9762\u7684\u4e0d\u7b49\u5f0f\uff0c\u5f97\u5230\u4e86\u77db\u76fe\u7684\u7ed3\u679c\uff0c\u8bf4\u660e \\(\\mathcal{O}\\) \u5e76\u4e0d\u662f\u6700\u4f18\u7684\u7b97\u6cd5\uff0c \\(\\mathcal{A}\\) \u624d\u662f\uff0c\u53cd\u4e4b\u5219\u8bc1\u660e \\(\\mathcal{O}\\) \u624d\u662f\u6700\u4f18\u7684\u7b97\u6cd5\u3002 \u6e05\u695a\u4e86\u8c01\u662f\u6700\u4f18\u7684\u4e4b\u540e\uff0c\u6211\u4eec\u628a\u8fd9\u4e2a\u4e0d\u7b49\u5f0f\u7a0d\u5fae\u6539\u5199\u4e00\u4e0b\uff0c\u5c3d\u53ef\u80fd\u6d88\u53bb \\(\\texttt{order}\\) \uff0c\u5f97\u5230\u4e00\u4e2a\u5173\u4e8e \\(\\texttt{cost}\\) \u7684\u4e0d\u7b49\u5f0f\uff0c\u4e14\u5c06\u5173\u4e8e \\(i\\) \u7684\u53d8\u91cf\u653e\u5728\u4e0d\u7b49\u53f7\u4e00\u7aef\uff0c\u5173\u4e8e \\(i + 1\\) \u7684\u653e\u5728\u53e6\u4e00\u7aef\uff0c\u8fd9\u4e2a\u5c31\u662f\u6700\u4f18\u7b97\u6cd5\u7684\u8d2a\u5fc3\uff08\u6392\u5e8f\uff09\u7b56\u7565\uff08\u56e0\u4e3a\u6211\u4eec\u8981\u6c42\u7684\u5c31\u662f\u6700\u4f18\u7684\u987a\u5e8f\uff08\u672a\u77e5\u91cf\uff09\uff0c\u6240\u4ee5\u9700\u8981\u5c3d\u91cf\u6d88\u53bb\u8d2a\u5fc3\u7b56\u7565\u91cc\u5173\u4e8e\u987a\u5e8f\u7684\u53d8\u91cf\uff09\u3002 \u5f53\u7136\u5b9e\u9645\u5e94\u7528\u7684\u65f6\u5019 \\(\\texttt{cost}\\) \u53ef\u80fd\u9700\u8981\u7528\u66f4\u590d\u6742\u4e00\u70b9\u7684\u65b9\u5f0f\u8ba1\u7b97\uff0c\u4e0d\u8fc7\u90fd\u662f\u4e00\u6837\u7684\u3002 \u4f46\u6709\u4e00\u5b9a\u53ef\u80fd\u662f\u641e\u4e0d\u51fa\u6765\u7684\uff08\u6240\u4ee5\u5f97\u5177\u4f53\u95ee\u9898\u5177\u4f53\u5206\u6790/oh \u5f88\u591a\u65f6\u5019\u601d\u8003\u201c\u5b89\u6392\u987a\u5e8f\u201d\u7c7b\u7684\u95ee\u9898\u90fd\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b Exchange Argument\u3002 \u4e00\u4e2a\u6bd4\u8f83\u57fa\u672c\u7684\u5e94\u7528\u5c31\u662f\u6392\u5e8f\u4e0d\u7b49\u5f0f\uff1a \u6392\u5e8f\u4e0d\u7b49\u5f0f \u82e5\u6709\u5e8f\u5217 \\(f\\) \uff0c\u6ee1\u8db3 \\(0 \\le f_1 \\le f_2 \\le f_3 \\le \\dots \\le f_n\\) \u3002 \u5e76\u6709\u5b66\u5217 \\(g\\) \uff0c\u6ee1\u8db3 \\(0\\le g_1\\le g_2 \\le g_3 \\le \\dots \\le g_n\\) \u3002 \u8bbe\u4ee3\u4ef7\u51fd\u6570 \\(c(f,g) = \\sum (f_i\\times g_j)\\) \uff0c\u5176\u4e2d \\((i,j)\\) \u8868\u793a\u4e00\u7ec4\u9009\u62e9\u3002 \u5373\u662f\uff0c\u4ece \\(g\\) \u4e2d\u5206\u522b\u7ed9\u6bcf\u4e00\u4e2a \\(f_i\\) \u5206\u914d\u67d0\u4e00\u4e2a \\(g_j\\) \u3002 \u5219\u5f97\u5230\u7684\u6700\u5927\u4ef7\u503c\u5fc5\u7136\u662f\uff1a \\[\\max= f_1g_1 +f_2g_2 + \\dots +f_ng_n\\] \u5f97\u5230\u7684\u6700\u5c0f\u4ef7\u503c\u662f\uff1a \\[\\min = f_1g_n+f_2g_{n-1} + \\dots + f_ng_1\\] Proof \u8bbe \\(f_i < f_j,g_i < g_j,i < j\\) \u3002 \u5219\uff1a \\[(f_ig_i +f_jg_j)-(f_ig_j+f_jg_i)\\] \\[= f_i(g_i-g_j)+f_j(g_j-g_i)\\] \\[=f_i(g_i-g_j)-f_j(g_i-g_j)\\] \\[=(f_i-f_j)(g_i-g_j) > 0\\] \\(\\therefore (f_ig_i +f_jg_j) > (f_ig_j+f_jg_i)\\) \u5f52\u7eb3\u540e\u53ef\u8bc1\u660e\u6392\u5e8f\u4e0d\u7b49\u5f0f\u3002 \u5148\u770b\u4e00\u4e2a\u5e8f\u5217\u4e0a\u7684 Exc Arg\uff1a \u4f8b\u9898\uff1a NOIP2012TG \u56fd\u738b\u6e38\u620f \u6070\u9022 H \u56fd\u56fd\u5e86\uff0c\u56fd\u738b\u9080\u8bf7 \\(n\\) \u4f4d\u5927\u81e3\u6765\u73a9\u4e00\u4e2a\u6709\u5956\u6e38\u620f\u3002\u9996\u5148\uff0c\u4ed6\u8ba9\u6bcf\u4e2a\u5927\u81e3\u5728\u5de6\u3001\u53f3\u624b\u4e0a\u9762\u5206\u522b\u5199\u4e0b\u4e00\u4e2a\u6574\u6570\uff0c\u56fd\u738b\u81ea\u5df1\u4e5f\u5728\u5de6\u3001\u53f3\u624b\u4e0a\u5404\u5199\u4e00\u4e2a\u6574\u6570\u3002\u7136\u540e\uff0c\u8ba9\u8fd9 \\(n\\) \u4f4d\u5927\u81e3\u6392\u6210\u4e00\u6392\uff0c\u56fd\u738b\u7ad9\u5728\u961f\u4f0d\u7684\u6700\u524d\u9762\u3002\u6392\u597d\u961f\u540e\uff0c\u6240\u6709\u7684\u5927\u81e3\u90fd\u4f1a\u83b7\u5f97\u56fd\u738b\u5956\u8d4f\u7684\u82e5\u5e72\u91d1\u5e01\uff0c\u6bcf\u4f4d\u5927\u81e3\u83b7\u5f97\u7684\u91d1\u5e01\u6570\u5206\u522b\u662f\uff1a\u6392\u5728\u8be5\u5927\u81e3\u524d\u9762\u7684\u6240\u6709\u4eba\u7684\u5de6\u624b\u4e0a\u7684\u6570\u7684\u4e58\u79ef\u9664\u4ee5\u4ed6\u81ea\u5df1\u53f3\u624b\u4e0a\u7684\u6570\uff0c\u7136\u540e\u5411\u4e0b\u53d6\u6574\u5f97\u5230\u7684\u7ed3\u679c\u3002 \u56fd\u738b\u4e0d\u5e0c\u671b\u67d0\u4e00\u4e2a\u5927\u81e3\u83b7\u5f97\u7279\u522b\u591a\u7684\u5956\u8d4f\uff0c\u6240\u4ee5\u4ed6\u60f3\u8bf7\u4f60\u5e2e\u4ed6\u91cd\u65b0\u5b89\u6392\u4e00\u4e0b\u961f\u4f0d\u7684\u987a\u5e8f\uff0c\u4f7f\u5f97\u83b7\u5f97\u5956\u8d4f\u6700\u591a\u7684\u5927\u81e3\uff0c\u6240\u83b7\u5956\u8d4f\u5c3d\u53ef\u80fd\u7684\u5c11\u3002\u6ce8\u610f\uff0c\u56fd\u738b\u7684\u4f4d\u7f6e\u59cb\u7ec8\u5728\u961f\u4f0d\u7684\u6700\u524d\u9762\u3002 \u9898\u89e3 \u4f7f\u7528 Exchange Argument\u3002 \u6211\u4eec\u5047\u8bbe\u5df2\u7ecf\u6709\u4e00\u4e9b\u5927\u81e3\u548c\u56fd\u738b\u4e00\u8d77\u7ad9\u5728\u524d\u9762\uff0c\u4e14\u5df2\u7ecf\u662f\u6700\u4f18\u51b3\u7b56\uff0c\u5047\u8bbe\u73b0\u5728\u6709\u4e24\u4e2a\u4eba\u5019\u9009\uff0c\u6211\u4eec\u8981\u901a\u8fc7\u7b97\u6cd5 \\(\\mathcal{A}\\) \u5b89\u6392\u4ed6\u4eec\u5728\u961f\u5c3e\u7684\u4f4d\u7f6e\u3002 \\(\\mathcal{O}\\) \u5219\u662f\u4e00\u4e2a\u6700\u4f18\u7b97\u6cd5\uff0c\u5e76\u4e14 \\(\\mathcal{O}\\) \u548c \\(\\mathcal{A}\\) \u552f\u4e00\u7684\u533a\u522b\u5c31\u662f\u5bf9\u4e8e\u8fd9\u4e24\u4e2a\u4eba\u7684\u6392\u5e8f\uff0c\u4e4b\u524d\u7684\uff08\u5904\u7406\u73b0\u5728\u5df2\u7ecf\u6392\u597d\u4e86\u7684\u4eba\u7684\u65b9\u5f0f\uff09\u90fd\u4e00\u6a21\u4e00\u6837\u3002 \u7b2c\u4e00\u4e2a\u4eba\u7528 \\((a_1, b_1)\\) \u8868\u793a\uff08\u5de6\u53f3\u624b\u4e0a\u7684\u6570\uff09\uff0c\u7b2c\u4e8c\u4e2a\u4eba\u7528 \\((a_2, b_2)\\) \u8868\u793a\u3002 \u4e0d\u96be\u53d1\u73b0\u53ef\u9009\u7684\u7b97\u6cd5\u53ea\u6709 \\(\\mathcal{A}: \\{1, 2\\}\\) \u548c \\(\\mathcal{A}\\prime: \\{2, 1\\}\\) \u4e24\u79cd\u3002 \uff08 \\(\\mathcal{A}\\prime\\) \u5c31\u662f \\(\\mathcal{A}\\) \u901a\u8fc7\u4e00\u4e2a Exchange \u4e4b\u540e\u5f97\u5230\u7684\u65b0\u7b97\u6cd5\uff09\u3002 \u4e5f\u5c31\u662f\u8bf4 \\(\\mathcal{O}\\) \u53ea\u80fd\u662f \\(\\mathcal{A,A}\\prime\\) \u4e8c\u8005\u4e4b\u4e00\uff0c\u6240\u4ee5\u6211\u4eec\u6bd4\u8f83 \\(\\mathcal{A,A}\\prime\\) \u5c31\u884c\u4e86\u3002 \u8bbe\u4e4b\u524d\u6240\u6709\u4eba\u5de6\u624b\u4e0a\u7684\u6570\u7684\u4e58\u79ef\u4e3a \\(\\pi\\) \u3002 \u5047\u8bbe \\(\\mathcal{A}\\) \u4e25\u683c\u4f18\u79c0\u4e8e \\(\\mathcal{A}\\prime\\) \uff0c\u5373\u662f \\(\\max(\\dfrac{\\pi}{b_1}, \\dfrac{\\pi \\times a_1}{b_2}) < \\max(\\dfrac{\\pi}{b_2}, \\dfrac{\\pi \\times a_2}{b_1})\\cdots (*)\\) \u56e0\u4e3a\u6240\u6709\u53d8\u91cf\u90fd\u662f\u6b63\u6574\u6570\uff0c\u6240\u4ee5 \\(\\dfrac{\\pi}{b_2} \\le \\dfrac{\\pi \\times a_1}{b_2} \\cdots (**)\\) \u3002 \u7136\u540e\u6211\u4eec\u5047\u8bbe \\(\\dfrac{\\pi \\times a_1}{b_2} \\ge \\dfrac{\\pi \\times a_2}{b_1}\\) \uff0c\u7531 \\((**)\\) \u4f1a\u63a8\u51fa \\(\\max(\\dfrac{\\pi}{b_1}, \\dfrac{\\pi \\times a_1}{b_2}) \\ge \\max(\\dfrac{\\pi}{b_2}, \\dfrac{\\pi \\times a_2}{b_1}) \\cdots (***)\\) \uff08\u56e0\u4e3a \\(\\dfrac{\\pi \\times a_1}{b_2}\\) \u4e0d\u5c0f\u4e8e\u53f3\u8fb9\u7684\u4efb\u4f55\u4e00\u9879\uff09\u3002 \u663e\u7136 \\((*)\\) \u662f \\((***)\\) \u7684\u5426\u5b9a\uff0c\u77db\u76fe\u3002 \u6240\u4ee5 \\(\\dfrac{\\pi \\times a_1}{b_2} < \\dfrac{\\pi \\times a_2}{b_1}\\) \uff0c\u8fd9\u4e2a\u6761\u4ef6\u548c \\(\\dfrac{\\pi \\times a_1}{b_2} \\ge \\dfrac{\\pi \\times a_2}{b_1}\\) \u6784\u6210\u4e86\u5168\u96c6\uff0c\u6240\u4ee5\u5982\u679c\u540e\u8005\u9519\u4e86\uff0c\u6839\u636e\u524d\u9762\u7684\u5047\u8bbe\u548c\u7ea6\u675f\uff0c\u524d\u8005\u5fc5\u7136\u5bf9\u3002 \u90a3\u4e48\u6839\u636e \\(\\dfrac{\\pi \\times a_1}{b_2} < \\dfrac{\\pi \\times a_2}{b_1}\\) \uff0c\u53ef\u4ee5\u5f97\u5230 \\(a_1b_1 < a_2b_2\\) \u3002 \u4e5f\u5c31\u662f\u6700\u4f18\u7b97\u6cd5 \\(\\mathcal{O}\\) \u5e94\u5f53\u6ee1\u8db3 \\(a_1b_1 < a_2b_2\\) \u3002 \u6240\u4ee5\u6700\u4f18\u7684\u8d2a\u5fc3\u7b56\u7565\u662f\u6309\u7167 \\(a_i\\times b_i\\) \u5347\u5e8f\u6392\u5e8f\uff0c\u8ba9\u8fd9\u4e2a\u503c\u5c0f\u7684\u5c3d\u91cf\u653e\u5728\u524d\u9762\u3002 \u9700\u8981\u5199\u9ad8\u7cbe\u5ea6\u3002 \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 N = int ( input ()) s = input () . split () S = int ( s [ 0 ]) T = int ( s [ 1 ]) a = [] for i in range ( 1 , N + 1 ): k = input () . split () a . append (( int ( k [ 0 ]), int ( k [ 1 ]))) a . sort ( key = lambda x : x [ 0 ] * x [ 1 ]) ans = 0 for i in range ( 0 , N ): if ( S // ( a [ i ])[ 1 ] > ans ): ans = S // ( a [ i ])[ 1 ] S *= ( a [ i ])[ 0 ] print ( ans ) Exc Arg \u4e5f\u53ef\u4ee5\u653e\u5230\u6811\u4e0a\uff1a \u4f8b\u9898\uff1a POJ2054 Color a Tree \u7ed9\u4f60\u4e00\u68f5\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u6709\u4e2a\u6743\u503c \\(C_i\\) \uff0c\u8981\u67d3\u8272\u4e00\u4e2a\u8282\u70b9\u5fc5\u987b\u5148\u67d3\u8272\u5b83\u7684\u7236\u4eb2\u3002 \u67d3\u8272\u82b1\u8d39\u662f \\(T_i \\times C_i\\) \uff0c \\(T_i\\) \u662f\u67d3\u8272 \\(i\\) \u7684\u65f6\u95f4\u6233\u3002 \u6c42 \\(\\min\\{\\sum T_iC_i\\}\\) \uff0c \\(N \\le 1000\\) \uff0c\u6307\u5b9a\u6839\u8282\u70b9\u3002 \u9898\u89e3 \u8003\u8651\u6ca1\u6709\u6811\u7684\u9650\u5236\u600e\u4e48\u505a\uff0c\u5f88\u663e\u7136\u5c31\u662f\u4ece\u5927\u5230\u5c0f\u9009\uff08\u672c\u8d28\u4e0a\u662f\u6392\u5e8f\u4e0d\u7b49\u5f0f\uff09\u3002 \u7136\u540e\u8fd9\u91cc\u6709\u5148\u9009\u7236\u4eb2\u7684\u9650\u5236\u4e86\uff0c\u6240\u4ee5\u5047\u8bbe\u6811\u4e2d\u6700\u5927\u7684\u70b9 \\(u\\) \u7684\u7236\u4eb2\u4e3a \\(fa\\) \uff0c\u5728 \\(fa\\) \u67d3\u8272\u540e\u6211\u4e0b\u4e00\u6b65\u5fc5\u7136\u67d3\u8272 \\(u\\) \u3002 \u6240\u4ee5\u6211\u4eec\u5047\u8bbe\u8fd8\u6709\u53e6\u5916\u4e00\u4e2a\u70b9 \\(v\\) \uff0c\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u5148\u67d3\u8272 \\(u, fa\\) \u7684\u6761\u4ef6\u5e94\u8be5\u662f\u5565\uff08\u8fd9\u91cc\u5f00\u59cb exc arg \u4e86\uff09\u3002 \u5982\u679c\u5148\u67d3\u8272 \\(v\\) \uff0c\u82b1\u8d39 \\(p = C_v + 2\\times C_{fa} + 3\\times C_u\\) \u3002 \u5982\u679c\u5148\u67d3\u8272 \\(fa \\to u\\) \uff0c\u82b1\u8d39 \\(q = C_{fa} + 2\\times C_u + 3\\times C_v\\) \u3002 \u90a3\u4e48\u5c31\u9700\u8981 \\(q < p\\) \uff0c\u5373\u662f \\(C_v + 2\\times C_{fa} + 3\\times C_u < C_{fa} + 2\\times C_u + 3\\times C_v\\) \u3002 \u8fd9\u91cc\u53ea\u5173\u5fc3\u5927\u5c0f\u5173\u7cfb\uff0c\u6240\u4ee5\u60f3\u529e\u6cd5\u5316\u7b80\u4e00\u4e0b\uff0c\u4e24\u8fb9\u540c\u65f6\u52a0\u4e0a \\(C_v - C_u\\) \u7136\u540e\u9664\u4ee5 \\(2\\) \u3002 \u5f97\u5230\uff1a \\((C_u + C_{fa})/2 + 2\\times C_v < C_v + 2\\times ((C_u + C_{fa}) / 2)\\) \u5c31\u76f8\u5f53\u4e8e\u6bd4\u8f83 \\(v\\) \u548c\u4e00\u4e2a\u6743\u503c\u4e3a \\((C_u + C_{fa})/2\\) \u7684\u8282\u70b9\u7684\u5148\u540e\u67d3\u8272\u987a\u5e8f\u3002 \u6240\u4ee5\u53ef\u4ee5\u628a \\(u, fa\\) \u5408\u5e76\uff0c\u770b\u6210\u4e00\u4e2a\u70b9\uff0c\u4ee4\u4ed6\u4eec\u7684\u7b49\u6548\u6743\u503c\u4e3a \\((C_u + C_{fa})/2\\) \u3002 \u7136\u540e\u63a8\u5e7f\u53ef\u4ee5\u5f97\u5230\uff0c\u4e00\u4e2a\u7531 \\(n\\) \u4e2a\u70b9\u7ec4\u6210\u7684\u7b49\u6548\u70b9\uff0c\u5b83\u7684\u7b49\u6548\u6743\u503c\u4e3a \\(\\dfrac{\\sum C}{n}\\) \u3002 \u6240\u4ee5\u6bcf\u6b21\u53d6\u7b49\u6548\u6743\u503c\u6700\u5927\u7684\u7b49\u6548\u70b9 \\(u\\) \uff0c\u62ff\u51fa\u6765\u548c\u5b83\u7684 \\(\\text{father}\\) \u5408\u5e76\uff0c\u5e76\u8bb0\u5f55\u4e00\u4e0b\uff0c\u67d3\u8272\u5b8c \\(\\text{father}\\) \u5f53\u524d\u6240\u5305\u542b\u7684\u6240\u6709\u539f\u6811\u4e0a\u8282\u70b9\u4e4b\u540e\uff0c\u5e94\u8be5\u67d3\u8272 \\(u.top\\) \uff08 \\(u\\) \u672c\u8d28\u4e0a\u662f\u4e00\u9897\u5b50\u6811\uff0c\u6211\u4eec\u4e00\u822c\u7528\u5b83\u7684\u6811\u6839 \\(u.top\\) \u6765\u6307\u4ee3\u8fd9\u9897\u5b50\u6811\uff0c\u7c7b\u4f3c\u5e76\u67e5\u96c6\uff09\u3002 \u5b9e\u73b0\u5c31\u662f\u8ba9\u6bcf\u4e00\u4e2a\u70b9\uff08\u53ef\u4ee5\u662f\u539f\u59cb\u4e5f\u53ef\u4ee5\u662f\u5408\u5e76\u540e\u7684\uff09\u7684\u6743\u503c\u7b49\u4ef7\u4e8e\u5b83\u7684\u6240\u6709\u8282\u70b9\u7684\u6743\u503c\u603b\u548c\u9664\u4ee5\u70b9\u7684\u4e2a\u6570\u3002 \u7528\u4e00\u4e2a\u5806\u7ef4\u62a4\uff0c\u6bcf\u6b21\u53d6\u7b49\u6548\u6743\u503c\u6700\u5927\u7684\u70b9\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u548c\u4ed6\u7684 \\(\\text{father}\\) \u5408\u5e76\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff08\u6811\u4e0a\u539f\u59cb\u7ed3\u70b9\uff09\u8bb0\u5f55\u4e00\u4e2a \\(\\text{nxt}\\) \u8868\u793a\u67d3\u5b8c\u5b83\u4e4b\u540e\u4f1a\u67d3\u54ea\u4e00\u4e2a\u8282\u70b9\u3002 \u8bb0\u5f55\u6bcf\u4e2a\u65b0\u8282\u70b9\u7684\u7b49\u6548\u6743\u503c\u4ee5\u53ca\u201c\u9876\u201d \\(\\text{top}\\) \uff0c\u5c31\u662f\u6700\u4e0a\u9762\u7684\u90a3\u4e2a\u8282\u70b9\uff08\u6216\u8005\u8bf4\u770b\u6210\u5e76\u67e5\u96c6\u7684 pa\uff09\uff0c\u8fd8\u6709\u201c\u5e95\u201d\uff0c\u5c31\u662f\u6700\u4e0b\u9762\u65b0\u5408\u5e76\u8fdb\u6765\u7684\u8282\u70b9 \\(\\text{but}\\) \u3002 \u5806\u91cc\u9762\u653e\u7684\u5c31\u662f\u8fd9\u4e9b\u6240\u8c13\u201c\u65b0\u8282\u70b9\u201d\u3002\u6240\u4ee5 merge(u, fa) \u53ef\u4ee5\u8868\u793a\u6210 \u5148\u4e0d\u65ad\u8df3 fa.top \u5230\u4e00\u4e2a\u6ca1\u6709\u5f80\u4e0a\u5408\u5e76\u8fc7\u7684\u8282\u70b9 fafa \u4e0a\u3002 \uff08\u5982\u679c fafa \u5411\u4e0a\u5408\u5e76\u8fc7\uff0c\u90a3\u4e48\u5b83\u7684 top \u5fc5\u7136\u4e0d\u4f1a\u662f\u5b83\u672c\u8eab\uff0c\u5728\u540e\u9762\u5408\u5e76\u7684\u65f6\u5019\u5c31\u4f1a\u6709\u95ee\u9898\uff09 \u7136\u540e\u4ee4 fafa.but.nxt = u.top, fafa.but = u.but u.vis = true, u.top = fafa \uff08\u6ce8\u610f\u987a\u5e8f\uff09\u3002 \u6700\u540e\u628a fafa \u6254\u8fdb\u5806\u91cc\u9762\uff0c\u5806\u91cc\u4e0d\u80fd\u6709 \\(\\text{root}\\) . \u7edf\u8ba1\u7b54\u6848\u626b\u4e00\u904d\u5c31\u884c\u4e86\u3002 \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 // author : black_trees #include <queue> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define meow(x) cerr << #x << \" = \" << x using namespace std ; // using i64 = long long; const int si = 1e3 + 10 ; const long double eps = 1e-7 ; int Fa [ si ]; struct node { bool vis ; // \u6807\u8bb0 int val , tot , sum ; // \u8bb0\u5f55\u539f\u6743\u503c\uff0c\u7b49\u6548\u6743\u503c int top , but , nxt ; // \u9876\uff0c\u5e95\uff0c\u4e0b\u4e00\u4e2a\u67d3\u8272\u7684\u539f\u8282\u70b9\u7684\u7f16\u53f7 } a [ si ]; struct Node { int id ; long double w ; bool operator < ( const Node & b ) const { return ( w - b . w ) < eps ; } }; priority_queue < Node > q ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int n , rt ; while ( cin >> n >> rt && n && rt ) { for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]. val , a [ i ]. sum = a [ i ]. val , a [ i ]. top = a [ i ]. but = i , a [ i ]. tot = 1 , a [ i ]. vis = false ; for ( int i = 1 ; i < n ; ++ i ) { int u , v ; cin >> u >> v , Fa [ v ] = u ; } Node tmp ; for ( int i = 1 ; i <= n ; ++ i ) { tmp . id = i , tmp . w = ( 1.0 * a [ i ]. val ); if ( i != rt ) q . push ( tmp ); } while ( ! q . empty ()) { tmp = q . top (); q . pop (); if ( a [ tmp . id ]. vis ) continue ; a [ tmp . id ]. vis = true ; int fa = Fa [ tmp . id ]; while ( fa != rt && a [ fa ]. vis == true ) fa = a [ fa ]. top ; a [ a [ fa ]. but ]. nxt = a [ tmp . id ]. top , a [ fa ]. but = a [ tmp . id ]. but , a [ tmp . id ]. top = fa ; a [ fa ]. sum += a [ tmp . id ]. sum , a [ fa ]. tot += a [ tmp . id ]. tot ; tmp . id = fa , tmp . w = ( 1.0 * a [ fa ]. sum ) / ( 1.0 * a [ fa ]. tot ); if ( fa != rt ) q . push ( tmp ); } int ans = 0 ; for ( int dfn = 1 , u = rt ; dfn <= n ; ++ dfn , u = a [ u ]. nxt ) ans += dfn * a [ u ]. val ; cout << ans << endl ; } return 0 ; } \u8fd8\u6709\u4e00\u79cd\u5e94\u7528\u662f\uff0c\u5bf9\u4e8e\u67d0\u4e2a dp \u95ee\u9898\uff0c\u4f60\u76f4\u63a5\u5728\u539f\u5e8f\u5217\u4e0a dp \u4f1a\u6709\u540e\u6548\u6027\uff0c\u4f46\u662f\u6309\u7167\u67d0\u79cd\u987a\u5e8f\u6392\u5e8f\u4e4b\u540e\uff0cdp\u5c31\u6ca1\u6709\u540e\u6548\u6027\u4e86\u3002 \u4f8b\u9898\uff1a CODE FESTIVAL 2017 Problem D \u6709 \\(n\\) \u4e2a\u4eba\uff0c\u6bcf\u4e2a\u4eba\u624b\u4e0a\u6709 \\(a_i\\) \u4e2a\u77f3\u5934\uff0c\u8eab\u9ad8\u4e3a \\(b_i\\) \uff0c \u5982\u679c\u8f6e\u5230\u7b2c \\(i\\) \u4e2a\u4eba\u653e\u77f3\u5934\u7684\u65f6\u5019\uff0c\u77f3\u5934\u5806\u91cc\u7684\u77f3\u5934\u4e2a\u6570\u5c0f\u4e8e\u7b49\u4e8e \\(b_i\\) \uff0c\u8fd9\u4e2a\u4eba\u5c31\u4f1a\u653e \\(a_i\\) \u4e2a\u77f3\u5934\u8fdb\u53bb\uff0c\u5426\u5219\u6446\u70c2 \u95ee\u600e\u4e48\u6837\uff08\u4ee5\u67d0\u79cd\u987a\u5e8f\uff09\u624d\u80fd\u8ba9 \u653e\u4e86\u77f3\u5934\u7684\u4eba\u6700\u591a \uff0c\u6700\u591a\u662f\u591a\u5c11\u3002 \\(n \\le 5000, 0 \\le b_i \\le 1e9, 1 \\le a_i \\le 1e9\\) \u3002 Bonus : \\(n \\le 1e5\\) \uff0c\uff08\u76ee\u524d\u4e0d\u4f1a\uff0c cf blog \u4e0a\u6709\u63d0\u5230\uff09 \u9898\u89e3 \u76f4\u63a5 DP \u663e\u7136\u6709\u95ee\u9898\uff0c\u5c31\u662f\u5982\u679c\u76f4\u63a5\u6309\u7167\u8f93\u5165\u7684\u987a\u5e8f\u641e\u7684\u8bdd\u3002 \u8fd9\u6837\u5b50\u53ea\u80fd\u8003\u8651\u5728 \\(1, 2, 3, 4\\) \u7684\u5b50\u5e8f\u5217\u5f53\u4e2d\u9009\u53d6\uff0c\u6240\u4ee5\u662f\u6709\u5c40\u9650\u6027\u7684\uff0c\u56e0\u4e3a\u4f60\u6ca1\u6cd5\u8986\u76d6\u9009\u62e9 \\(4, 2, 1, 3\\) \u8fd9\u6837\u201c\u4e71\u5e8f\u201d\u7684\u60c5\u51b5\u3002 \u8fd9\u9053\u9898\u672c\u8eab\u5c31\u662f\u5728\u201c\u5b89\u6392\u987a\u5e8f\u201d\uff0c\u5c31\u662f Exc arg \u7684\u4e00\u4e2a Key\u3002 \u5f88\u660e\u663e \\(1,2,4,3 \\ | \\ 2, 4, 1, 3\\ |\\ 4, 1, 2, 3 \\dots\\) \u8fd9\u4e9b\u5404\u79cd\u987a\u5e8f\u91cc\u9762\u5927\u90e8\u5206\u90fd\u4e0d\u53ef\u80fd\u6210\u4e3a\u6700\u4f18\u51b3\u7b56\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7528 Exc arg \u5206\u6790\u4e00\u4e0b\uff0c\u7136\u540e\u518d DP\u3002 \u5047\u8bbe\u6211\u4eec\u6709\u4e24\u4e2a\u4eba \\(i,j\\) \u9700\u8981\u786e\u5b9a\u4e00\u4e2a\u57fa\u672c\u987a\u5e8f\u3002 \u8003\u8651\u5230\u5982\u679c \\(i\\) \u653e\u4e86\u4e4b\u540e\uff0c\u9ad8\u5ea6\u81f3\u591a\u662f \\(a_i + b_i\\) \uff0c \\(j\\) \u653e\u4e86\u4e4b\u540e\uff0c\u9ad8\u5ea6\u81f3\u591a\u662f \\(a_j + b_j\\) \u3002 \u6211\u4eec\u5e0c\u671b\u8ba9\u80fd\u653e\u77f3\u5b50\u7684\u4eba\u66f4\u591a\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8ba9\u5148\u653e\u7684\u90a3\u4e00\u4e2a\u4eba\u653e\u5b8c\u4e4b\u540e\u7684\u6700\u5927\u9ad8\u5ea6\u5c3d\u53ef\u80fd\u7684\u5c0f\u3002 \u5047\u8bbe \\(i\\) \u5e94\u5f53\u6bd4 \\(j\\) \u5148\u653e\uff0c\u90a3\u4e48\u4e00\u5b9a\u8981\u6ee1\u8db3\u4e0d\u7b49\u5f0f\uff1a \\(a_i+b_i < a_j+b_j\\) \u3002 \u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u6309\u7167 \\(a+b\\) \u6392\u5e8f\u5c31\u80fd\u5f97\u5230\u4e00\u4e2a\u6700\u4f18\u7684\uff0c\u53ef\u4ee5\u7528\u6765 dp \u7684\u987a\u5e8f\u3002 \u6392\u5b8c\u5e8f\u4e4b\u540e\u76f4\u63a5\u4e00\u4e2a\u7b80\u5355\u7684 \\(O(n^2)\\) dp \u5c31\u53ef\u4ee5\u4e86\u3002 \u8bbe \\(dp(i)\\) \u8868\u793a\u524d \\(i\\) \u4e2a\u4eba\uff08\u6392\u5e8f\u540e\uff09\uff0c\u80fd\u53d6\u5230\u7684\u9ad8\u5ea6\u6700\u5c0f\u503c\uff0c\u7136\u540e\u5728\u6240\u6709\u53ef\u884c\u7684 \\(dp\\) \u91cc\u9762\u53d6\u4eba\u6570\u6700\u5927\u503c\u5373\u53ef\u3002 Tips \u8fd9\u91cc\u7684 Exchange Argument \u91cc\u7684 \u201d\u4ee3\u4ef7\u201c \u5c31\u6bd4\u8f83 \u201c\u5e7f\u4e49\u201d \u4e86\uff0c\u662f \u201c\u8ba9\u64cd\u4f5c\u8fc7\u540e\u7684\u9ad8\u5ea6\u5c3d\u91cf\u5c0f\u201d\u3002 \u4e0d\u8fc7\u8fd8\u662f\u7167\u6837\u53ef\u4ee5\u5f52\u5316\u5230\u4e0a\u9762\u8bf4\u7684 Observation\u3002 \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int si = 5e3 + 10 ; struct zabuton { i64 a , b ; bool operator < ( const zabuton & c ) const { return ( a + b ) < ( c . a + c . b ); } } arr [ si ]; i64 dp [ si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int n ; cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) cin >> arr [ i ]. b >> arr [ i ]. a ; sort ( arr + 1 , arr + 1 + n ); memset ( dp , 0x3f , sizeof dp ); dp [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) for ( int j = i ; j ; -- j ) if ( dp [ j - 1 ] <= arr [ i ]. b ) dp [ j ] = min ( dp [ j ], dp [ j - 1 ] + arr [ i ]. a * 1l l ); i64 mx = -1 ; for ( int i = 1 ; i <= n ; ++ i ) if ( dp [ i ] < 1e18 ) mx = max ( mx , 1l l * i ); cout << mx << endl ; return 0 ; } // ref : https://blog.csdn.net/Leo_Nasir/article/details/81228924 \u8fdb\u9636\u53ef\u4ee5\u770b\u770b ZJK \u7237\u7237\u7684 Paper \u3002 ref: https://www.cnblogs.com/Gavin_Liu/archive/2011/04/10/2011108.html \u53cd\u8bc1\u6cd5 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5495\u5495\u5495 \u6570\u5b66\u5f52\u7eb3\u6cd5 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5495\u5495\u5495 \u53cd\u6094\u8d2a\u5fc3 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5495\u5495\u5495","title":"\u8d2a\u5fc3"},{"location":"algor/basic/greedy/#_1","text":"\u8d2a\u5fc3\uff0c\u4e3b\u8981\u7684\u601d\u60f3\u5c31\u662f\u201c\u53ea\u770b\u773c\u524d\u7684\u6700\u4f18\u5229\u76ca\u201d\u3002 \u4e2a\u4eba\u8ba4\u4e3a\u8d2a\u5fc3\u7b97\u6cd5\u7684\u91cd\u70b9\u5c31\u5728\u4e8e\u731c\u3002 \u5c31\u662f\u8981\u5148\u53bb\u5927\u80c6\u731c\u6d4b\u201c\u5c40\u90e8\u6700\u4f18\u80fd\u63a8\u5e7f\u5230\u5168\u5c40\u6700\u4f18\u201d\uff0c\u7136\u540e\u53bb\u627e\u51fa\u201c\u5c40\u90e8\u6700\u4f18\u201d\u3002 \u7136\u540e\u5229\u7528\u4e0b\u9762\u63d0\u5230\u7684\u65b9\u5f0f\u53bb\u8bc1\u660e/\u8bc1\u4f2a\u3002","title":"\u6982\u8ff0"},{"location":"algor/basic/greedy/#_2","text":"\u4e00\u822c\u9700\u8981\u8bc1\u660e\u4efb\u4f55\u5bf9\u4e8e\u5c40\u90e8\u201c\u6700\u4f18\u201d\u51b3\u7b56\u7684\u4f5c\u7528\u8303\u56f4\u7684\u6269\u5c55\u4e0d\u4f1a\u5f71\u54cd\u5168\u5c40\u6700\u4f18\u89e3\uff08\u4e0d\u9020\u6210\u6574\u4f53\u7ed3\u679c\u53d8\u5dee\uff09\u3002 \u5e38\u7528\u4e8e\u4e00\u4e9b\u51b3\u7b56\u5177\u6709\u524d\u540e\u5173\u8054\u7684\u95ee\u9898\u5f53\u4e2d\uff08\u8fd9\u79cd\u8981\u7279\u522b\u5c0f\u5fc3\uff0c\u5bb9\u6613\u548c DP \u641e\u6df7\u6dc6\u3002\uff09 \u4f8b\u9898\uff1a POJ3614 Sunscreen To avoid unsightly burns while tanning, each of the C (1 \u2264 C \u2264 2500) cows must cover her hide with sunscreen when they're at the beach. Cow i has a minimum and maximum SPF rating (1 \u2264 minSPFi \u2264 1,000; minSPFi \u2264 maxSPFi \u2264 1,000) that will work. If the SPF rating is too low, the cow suffers sunburn; if the SPF rating is too high, the cow doesn't tan at all........ The cows have a picnic basket with L (1 \u2264 L \u2264 2500) bottles of sunscreen lotion, each bottle i with an SPF rating SPFi (1 \u2264 SPFi \u2264 1,000). Lotion bottle i can cover coveri cows with lotion. A cow may lotion from only one bottle. What is the maximum number of cows that can protect themselves while tanning given the available lotions? \u9898\u89e3 \u6211\u4eec\u8003\u8651\u8fd9\u6837\u4e00\u4e2a\u60f3\u6cd5\uff1a\u524d\u9762\u7684\u725b\u6d82\u9632\u6652\u971c\u7684\u65f6\u5019\uff0c\u8981\u5c3d\u91cf\u8ba9\u540e\u9762\u80fd\u66f4\u591a\u7684\u6d82\uff0c\u8fd9\u6837\u7b54\u6848\u624d\u80fd\u66f4\u4f18\u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u8fdb\u884c\u6392\u5e8f\uff0c\u4e00\u4e2a\u6bd4\u8f83 naive \u7684\u60f3\u6cd5\u662f\uff0c\u6309\u7167 \\(\\text{minSPF}\\) \u5347\u5e8f\u6392\u5e8f\uff0c\u7136\u540e\u6bcf\u6b21\u5c3d\u91cf\u9009\u80fd\u7528\u7684\u9632\u6652\u971c\u91cc\u9762\u6700\u5c0f\u7684\u4e00\u4e2a\u3002 \u8fd9\u6837\u770b\u8d77\u6765\u53ef\u4ee5\u8ba9\u540e\u9762\u7684\u6709\u66f4\u591a\u9009\u62e9\uff0c\u4f46\u662f\u80fd\u4e25\u8c28\u8bc1\u660e\u5417\uff1f \u6211\u4eec\u53d1\u73b0\u4e00\u4e2a\u70b9\u7684\u51b3\u7b56\u4f1a\u5f71\u54cd\u5230\u4e4b\u540e\u7684\u51b3\u7b56\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u4f7f\u7528\u8303\u56f4\u653e\u7f29\u6cd5\u8bc1\u660e\u8fd9\u4e2a\u7ed3\u8bba\u3002 \u4e5f\u5c31\u662f\u53bb\u8bc1\u660e\u6309\u7167\u8fd9\u79cd\u65b9\u5f0f\u6392\u5e8f\u4e4b\u540e\uff0c\u6bcf\u6b21\u9009\u53d6\u80fd\u7528\u7684\u91cc\u9762\u6700\u5c0f\u7684\u4e00\u4e2a\uff0c\u4e0d\u4f1a\u8ba9\u540e\u9762\u7684\u7ed3\u679c\u53d8\u5dee\u3002 \u8003\u8651\u5f53\u524d\u4e3a\u7b2c \\(i\\) \u5934\u725b\uff0c\u5bf9\u4e8e\u5b83\u80fd\u4f7f\u7528\u7684\u4efb\u610f\u4e24\u79cd\u9632\u6652\u971c \\(x,y\\) \uff0c\u5047\u8bbe \\(\\text{SPF}(x) < \\text{SPF}(y)\\) \u3002 \u90a3\u4e48\u6211\u4eec\u5c31\u8981\u53bb\u9009\u62e9 \\(x\\) \uff0c\u770b\u4e00\u4e0b\u5bf9\u4e8e\u540e\u9762\u4f1a\u4e0d\u4f1a\u6709\u4ec0\u4e48\u5f71\u54cd\uff0c\u663e\u7136\uff0c\u5bf9\u4e8e\u540e\u9762\u7684\u725b\uff0c\u6709\uff1a \\(x,y\\) \u90fd\u6ca1\u6cd5\u9002\u5408 \\(x,y\\) \u90fd\u80fd\u9002\u5408 \\(x\\) \u9002\u5408\u800c \\(y\\) \u4e0d\u9002\u5408 \\(y\\) \u9002\u5408\u800c \\(x\\) \u4e0d\u9002\u5408 \u8fd9\u56db\u79cd\u60c5\u51b5\uff0c\u7b2c\u4e00\u79cd\u548c\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e0d\u7ba1\u6211\u4eec\u662f\u9009 \\(x\\) \u8fd8\u662f\u9009 \\(y\\) \uff0c\u7ed3\u679c\u90fd\u4e0d\u4f1a\u53d8\u5dee\uff0c\u53ef\u4ee5\u4e0d\u7528\u7ba1\u3002 \u7b2c\u56db\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9009\u4e86 \\(x\\) \uff0c\u5bf9\u540e\u9762\u4e5f\u4e0d\u4f1a\u6709\u5f71\u54cd\uff0c\u552f\u4e00\u4f1a\u9020\u6210\u5f71\u54cd\u7684\u5c31\u662f\u7b2c\u4e09\u79cd\u60c5\u51b5\uff0c\u5176\u5b83\u4e09\u8005\u90fd\u6709\u6bd4\u8f83\u663e\u7136\u7684\u4f8b\u5b50\u80fd\u8bc1\u660e\u4ed6\u4eec\u4f1a\u51fa\u73b0\uff0c\u73b0\u5728\u8003\u8651\u7b2c\u4e09\u79cd\u60c5\u51b5\u4f1a\u4e0d\u4f1a\u51fa\u73b0 \uff0c\u597d\u5224\u65ad\u8fd9\u4e2a\u8d2a\u5fc3\u65b9\u5f0f\u662f\u5426\u6b63\u786e\u3002 \u73b0\u5728 \\(\\text{minSPF}\\) \u7684\u5355\u8c03\u6027\u5df2\u7ecf\u786e\u5b9a\u4e86\uff0c\u5047\u8bbe \\(\\text{maxSPF}\\) \u4e5f\u5355\u8c03\u9012\u589e\u7684\u8bdd\uff0c\u90a3\u4e48\u7b2c\u4e09\u79cd\u60c5\u51b5\u5c31\u4e0d\u5b58\u5728\uff0c\u6240\u4ee5\u770b\u8d77\u6765\u8fd9\u4e2a\u8d2a\u5fc3\u662f\u5bf9\u7684\u3002 \u4f46\u662f\u95ee\u9898\u5c31\u5728\u4e8e\uff0c \\(\\text{maxSPF}\\) \u4e0d\u4e00\u5b9a\u5355\u8c03\u9012\u589e\u554a\uff01\u6709\u53ef\u80fd\u7a81\u7136\u201c\u7f29\u56de\u6765\u201d\u4e86\u3002 \u6bd4\u5982\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 1 2 3 4 5 6 | _________ | | ___ | | ___ | \u725b \uff1a [ 1 , 6 ]; [ 2 , 4 ]; [ 3 , 5 ]. \u9632\u6652\u971c : SPF = 3 , cover = 1 ; SPF = 6 , cover = 1 ; \u7136\u540e\u4f60\u5c31\u53d1\u73b0\uff0c\u7b2c\u4e09\u79cd\u60c5\u51b5\u662f\u5b58\u5728\u7684\uff0c\u6240\u4ee5\u8fd9\u79cd\u8d2a\u5fc3\u4e0d\u662f\u6700\u4f18\u7684\uff0c\u56e0\u4e3a\u8fd9\u6837\u7684\u51b3\u7b56\u4f1a\u5bfc\u81f4\u540e\u9762\u7684\u5168\u5c40\u7b54\u6848\u53d8\u5dee\u3002 \u6709\u6ca1\u6709\u66f4\u4f18\u79c0\u7684\u8d2a\u5fc3\u65b9\u5f0f\uff1f\u663e\u7136\u4e00\u76f4\u9009\u6700\u5c0f\u7684\u80fd\u9009\u7684\u9632\u6652\u971c\uff0c\u5728 \\(\\text{minSPF}\\) \u6216\u8005 \\(\\text{maxSPF}\\) \u5347\u5e8f\u6392\u5e8f\u7684\u65f6\u5019\u7684\u5927\u65b9\u5411\u4e00\u5b9a\u662f\u5bf9\u7684\u3002 \u8fd9\u91cc\u6392 \\(\\text{minSPF}\\) \u4e0d\u884c\uff0c\u4e3a\u5565\u4e0d\u6392 \\(\\text{maxSPF}\\) \u5462\uff1f\u6240\u4ee5\u73b0\u5728\u8003\u8651\uff0c\u6309\u7167 \\(\\text{maxSPF}\\) \u5347\u5e8f\u6392\u5e8f\uff0c\u6bcf\u6b21\u8003\u8651\u9009\u9002\u5408\u7684\u9632\u6652\u971c\u91cc\u9762 \\(\\text{SPF}\\) \u6700\u5c0f\u7684\u3002 \u4eff\u7167\u4e0a\u9762\u7684\u65b9\u5f0f\uff0c\u8003\u8651\u6bcf\u4e00\u4e2a\u70b9\u4efb\u610f\u7684\u4e24\u79cd\u51b3\u7b56 \\(x,y\\) \u3002\u53d1\u73b0\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4ecd\u65e7\u4e0d\u7528\u7ba1\u3002 \u7b2c\u56db\u79cd\u60c5\u51b5\u4e5f\u53ef\u80fd\u51fa\u73b0\uff0c\u4e0d\u8fc7\u4e5f\u4e0d\u7528\u62c5\u5fc3\uff0c\u7136\u540e\u7b2c\u4e09\u79cd\u60c5\u51b5\u5c31\u4e0d\u4f1a\u51fa\u73b0\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u62ff\u4e0a\u9762\u7684\u53cd\u4f8b\u6765\u4e3e\u4e2a\u4f8b\u5b50\u3002 1 2 3 4 5 6 7 1 2 3 4 5 6 | ___ | | ___ | | _________ | \u725b \uff1a [ 1 , 6 ]; [ 2 , 4 ]; [ 3 , 5 ]. \u9632\u6652\u971c : SPF = 3 , cover = 1 ; SPF = 6 , cover = 1 ; \u7528\u8303\u56f4\u7f29\u653e\u6cd5\uff0c\u53ef\u4ee5\u77e5\u9053\u7b2c\u4e8c\u79cd\u8d2a\u5fc3\u7684\u6b63\u786e\u6027\u3002 \u5f53\u7136\uff0c\u5982\u679c\u8003\u8651\u9009\u5927\u7684\uff0c\u90a3\u5c31\u662f \\(\\text{minSPF}\\) \u964d\u5e8f\u6392\u5e8f\uff0c\u9053\u7406\u4e00\u6837\uff0c\u4e0d\u8fc7\u5c31\u662f\u6392\u5217\u4e00\u4e0b \\(\\text{min/maxSPF}\\) \u548c \\(\\text{SPF}\\) \u7684\u6392\u5217\u65b9\u5f0f\u800c\u5df2\u3002 \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define meow(x) cerr << #x << \" = \" << x using namespace std ; // using i64 = long long; const int si = 3e4 + 10 ; int C , L ; struct Cows { int maxSPF , minSPF ; bool operator < ( const Cows & b ) const { if ( maxSPF == b . maxSPF ) return minSPF < b . minSPF ; return maxSPF < b . maxSPF ; } } a [ si ]; struct Fk { int SPF , cover ; bool operator < ( const Fk & b ) const { return SPF < b . SPF ; } } b [ si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> C >> L ; for ( int i = 1 ; i <= C ; ++ i ) cin >> a [ i ]. minSPF >> a [ i ]. maxSPF ; for ( int i = 1 ; i <= L ; ++ i ) cin >> b [ i ]. SPF >> b [ i ]. cover ; sort ( a + 1 , a + 1 + C ); sort ( b + 1 , b + 1 + L ); int ans = 0 ; // int current = 1; for ( int i = 1 ; i <= C ; ++ i ) { for ( int j = 1 ; j <= L ; ++ j ) { if ( a [ i ]. minSPF <= b [ j ]. SPF && b [ j ]. SPF <= a [ i ]. maxSPF && b [ j ]. cover != 0 ) { ans ++ , b [ j ]. cover -- ; break ; } } } cout << ans << endl ; return 0 ; } \u4f8b\u9898\uff1a POJ3190 Stall Reservations Oh those picky N (1 <= N <= 50,000) cows! They are so picky that each one will only be milked over some precise time interval A..B (1 <= A <= B <= 1,000,000), which includes both times A and B. Obviously, FJ must create a reservation system to determine which stall each cow can be assigned for her milking time. Of course, no cow will share such a private moment with other cows. Help FJ by determining: The minimum number of stalls required in the barn so that each cow can have her private milking period An assignment of cows to these stalls over time Many answers are correct for each test dataset; a program will grade your answer. \u9898\u89e3 \u8fd9\u9898\u672c\u8d28\u4e0a\u5c31\u662f\u7ed9\u4f60\u82e5\u5e72\u4e2a\u533a\u95f4\uff0c\u8981\u4f60\u628a\u5b83\u4eec\u5206\u6210\u82e5\u5e72\u4e2a\u7ec4\uff0c\u4fdd\u8bc1\u6bcf\u4e00\u4e2a\u7ec4\u91cc\u9762\u533a\u95f4\u4e0d\u76f8\u4ea4\uff0c\u6c42\u6700\u5c0f\u7684\u533a\u95f4\u6570\uff0c\u6784\u9020\u65b9\u6848\u3002 \u548c CSPS2021T1 \u6781\u5ea6\u7c7b\u4f3c\uff0c\u6211\u5f53\u65f6\u5728\u573a\u4e0a\u60f3\u4e86\u65e0\u6570\u505a\u6cd5\uff0c\u5f88\u53ef\u60dc\u8d2a\u5fc3\u6ca1\u5b66\u597d\uff0c\u5bc4\u6389\u4e86\uff0c\u73b0\u5728\u771f\u7684\u662f\u6094\u6b7b\u4e86\u3002 \u4e0d\u96be\u60f3\u5230\u4e00\u4e2a\u66b4\u529b\uff1a\u76f4\u63a5\u7ef4\u62a4\u5f53\u524d\u755c\u680f\u7684\u4e2a\u6570 \\(tot\\) \uff0c\u5e76\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u755c\u680f\u5f53\u524d\u653e\u8fdb\u53bb\u7684\u725b\u7684\u7ed3\u675f\u65f6\u95f4\u3002 \u7136\u540e\u8003\u8651\u5bf9\u4e8e\u725b\uff0c\u6309\u7167\u5f00\u59cb\u65f6\u95f4\u5347\u5e8f\u6392\u5e8f\uff0c\u6bcf\u6b21\u5982\u679c\u5f53\u524d\u6709\u755c\u680f\u53ef\u7528\uff0c\u5c31\u653e\u8fdb\u53bb\uff0c\u5426\u5219\u65b0\u5efa\u4e00\u4e2a\u755c\u680f\u3002 \u7136\u540e\u7528 std::priority_queue \u53ef\u4ee5\u76f4\u63a5\u7ef4\u62a4\u5230\u5f53\u524d\u6700\u65e9\u7ed3\u675f\u7684\u4e00\u4e2a\uff0c\u628a\u725b\u5c1d\u8bd5\u5f80\u8fd9\u4e2a\u91cc\u9762\u653e\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n\\log n)\\) \u3002 \u8fd9\u662f\u4e00\u4e2a\u6bd4\u8f83\u7ecf\u5178\u7684\u8d2a\u5fc3\uff0c\u601d\u8003\u51fa\u6765\u5e94\u8be5\u4e0d\u96be\uff0c\u8003\u8651\u5982\u4f55\u8bc1\u660e\u8fd9\u4e2a\u8d2a\u5fc3\u3002 \u5176\u5b9e\u5c31\u662f\uff0c\u56e0\u4e3a\u4f60\u6392\u8fc7\u5e8f\u4e86\uff0c\u6240\u4ee5\u7ed3\u675f\u7684\u65e9\u7684\u80fd\u5c3d\u91cf\u65e9\u7684\u653e\u4e00\u5934\u725b\u8fdb\u53bb\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u6d6a\u8d39\u65f6\u95f4\uff0c\u5bf9\u540e\u9762\u4e0d\u4f1a\u9020\u6210\u4efb\u4f55\u5f71\u54cd\u3002 \u6709\u4e00\u4e2a\u611f\u89c9\u662f\u53cd\u4f8b\u7684\u4e1c\u897f\uff1a\u4e07\u4e00\u6392\u5e8f\u8fc7\u540e\u524d\u4e00\u4e2a\u662f [3, 6] \uff0c\u540e\u4e00\u4e2a\u662f [3,5] \u600e\u4e48\u529e\uff1f \u5443\uff0c\u76f4\u63a5\u628a\u7ed3\u675f\u65f6\u95f4\u4e5f\u8ba1\u5165\u5173\u952e\u5b57\u5c31\u5b8c\u4e8b\u513f\u4e86\uff0c\u8fd9\u6837\u505a\u5c31\u80fd\u5c3d\u91cf\u8282\u7701\u65f6\u95f4\uff0c\u63d0\u5347\u6548\u7387\u3002 \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 // author : black_trees #include <queue> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define meow(x) cerr << #x << \" = \" << x using namespace std ; // using i64 = long long; const int si = 5e4 + 10 ; int n ; struct Cow { int l , r , id ; bool operator < ( const Cow & b ) const { if ( l == b . l ) return r < b . r ; return l < b . l ; } } a [ si ]; int ans [ si ]; int tot = 0 ; struct Stall { int id , ed ; bool operator < ( const Stall & b ) const { return ed > b . ed ; } }; std :: priority_queue < Stall > q ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]. l >> a [ i ]. r , a [ i ]. id = i ; sort ( a + 1 , a + 1 + n ); // for(int i = 1; i <= n; ++i) // meow(i) << \" \", meow(a[i].l) << \" \", meow(a[i].r) << endl; tot ++ ; Stall tmp ; tmp . id = tot , tmp . ed = a [ 1 ]. r ; q . push ( tmp ), ans [ a [ 1 ]. id ] = 1 ; for ( int i = 2 ; i <= n ; ++ i ) { Stall tp = q . top (); // meow(i) << \" \", meow(q.top().id) << \" \", meow(q.top().ed) << endl; if ( tp . ed < a [ i ]. l ) { ans [ a [ i ]. id ] = tp . id ; q . pop (), tp . ed = a [ i ]. r , q . push ( tp ); } else tmp . id = ++ tot , tmp . ed = a [ i ]. r , ans [ a [ i ]. id ] = tot , q . push ( tmp ); } cout << tot << endl ; for ( int i = 1 ; i <= n ; ++ i ) cout << ans [ i ] << endl ; return 0 ; }","title":"\u8303\u56f4\u7f29\u653e\u6cd5"},{"location":"algor/basic/greedy/#_3","text":"\u4e00\u822c\u662f\u8bc1\u660e\u5728\u4efb\u610f\u7684\u5c40\u9762\u4e0b\uff0c\u505a\u51fa\u5c40\u90e8\u6700\u4f18\u51b3\u7b56\u4e4b\u540e\uff0c\u8fd9\u4e2a\u51b3\u7b56\u5728\u95ee\u9898\u72b6\u6001\u7a7a\u95f4\u91cc\u7684\u53ef\u8fbe\u96c6\u5408\u5305\u542b\u4e86\u6240\u6709\u8fd9\u4e00\u6b65\u505a\u51fa\u5176\u5b83\u4efb\u610f\u51b3\u7b56\u7684\u53ef\u8fbe\u96c6\u5408\u3002 \u4e5f\u5c31\u662f\u8fd9\u4e2a\u5c40\u90e8\u6700\u4f18\u51b3\u7b56\u63d0\u4f9b\u7684\u53ef\u80fd\u6027\u5305\u542b\u4e86\u5176\u5b83\u6240\u6709\u7b56\u7565\u7684\u53ef\u80fd\u6027\u3002 \u4f8b\u9898\uff1a POJ1328 Radar Installation Assume the coasting is an infinite straight line. Land is in one side of coasting, sea in the other. Each small island is a point locating in the sea side. And any radar installation, locating on the coasting, can only cover d distance, so an island in the sea can be covered by a radius installation, if the distance between them is at most d. We use Cartesian coordinate system, defining the coasting is the x-axis. The sea side is above x-axis, and the land side below. Given the position of each island in the sea, and given the distance of the coverage of the radar installation, your task is to write a program to find the minimal number of radar installations to cover all the islands. Note that the position of an island is represented by its x-y coordinates. \u9898\u89e3 \u5148\u7528\u52fe\u80a1\u5b9a\u7406\u628a\u6bcf\u4e2a Building \u5904\u7406\u4e00\u4e0b\uff0c\u4e5f\u5c31\u662f\u5904\u7406\u4e00\u4e0b \\(x\\) \u8f74\u4e0a\u7684\u54ea\u4e00\u4e2a\u533a\u95f4\u53ef\u4ee5\u8986\u76d6\u5b83\u3002 \u95ee\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\uff0c\u7ed9\u5b9a \\(n\\) \u4e2a\u533a\u95f4\uff0c\u7528\u6700\u5c11\u7684\u70b9\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u533a\u95f4\u90fd\u6709\u4e00\u4e2a\u70b9\u3002 \u8003\u8651\u4e00\u4e2a\u8d2a\u5fc3\uff1a\u6309\u7167\u533a\u95f4\u5de6\u7aef\u70b9 \\(l\\) \u5347\u5e8f\u6392\u5e8f\uff0c\u7ef4\u62a4\u5f53\u524d\u6700\u540e\u4e00\u4e2a\u653e\u7684\u70b9\u7684\u5750\u6807 \\(p\\) \u3002 \u5982\u679c\u5f53\u524d\u626b\u5230\u7684\u533a\u95f4\u4e0d\u80fd\u88ab\u8fd9\u4e2a\u70b9\u63a7\u5236\u5230\uff0c\u4e5f\u5c31\u662f \\(l > p\\) \uff0c\u90a3\u4e48\u65b0\u653e\u4e00\u4e2a\u70b9\u5728 \\(r\\) \u3002 \u5426\u5219\u8ba9 \\(p = \\min(p, r)\\) \uff0c\u4e5f\u5c31\u662f\u76f4\u63a5\u8ba9\u5f53\u524d\u533a\u95f4\u88ab\u4e0a\u4e00\u4e2a\u7ba1\u8f96\u3002 \u6700\u540e\u8f93\u51fa\u65b0\u653e\u7684\u6570\u91cf\u5373\u53ef\uff08\u521d\u59cb \\(p = -\\infty\\) \uff09\u3002 \u8bc1\u660e\uff1a \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u533a\u95f4 \\([l_i,r_i]\\) \uff0c\u6709\u4e24\u79cd\u9009\u62e9\uff1a1. \u88ab\u4e4b\u524d\u653e\u7684\u70b9\u63a7\u5236\u30022. \u65b0\u5efa\u4e00\u4e2a\u70b9\u63a7\u5236\u5b83\u3002 \u4e0a\u9762\u7684\u8d2a\u5fc3\u7b56\u7565\u662f\uff0c\u5982\u679c\u80fd \\(1\\) \u5c31\u4f7f\u7528 \\(1\\) \uff0c\u8fd9\u6837\u4e4b\u540e\u968f\u4fbf\u5728\u54ea\u91cc\u653e\u90fd\u884c\uff0c\u56e0\u4e3a \\(i\\) \u548c\u5b83\u4ee5\u524d\u7684\u90fd\u6709\u70b9\u63a7\u5236\u4e86\u3002 \u5426\u5219\u4f7f\u7528 \\(2\\) \uff0c\u8fd9\u6837\u9700\u8981\u5728 \\([l_i, r_i]\\) \u4e0a\u653e\u70b9\uff0c\u53ef\u4ee5\u53d1\u73b0 \\(1\\) \u80fd\u5230\u8fbe\u7684\u51b3\u7b56\u96c6\u5408\u5305\u62ec\u4e86 \\(2\\) \u7684\u3002 \u56e0\u4e3a 1 \u7684\u65f6\u5019\uff0c\u4e0b\u4e00\u4e2a\u53ef\u4ee5\u4efb\u610f\u653e\u3002 \u7136\u540e\u5982\u679c\u9009\u62e9 1\uff0c\u628a\u4e0a\u4e00\u4e2a\u70b9\u653e\u5230 \\(min(r_i,p)\\) \u7684\u4f4d\u7f6e\uff0c\u5c31\u662f\u5c3d\u91cf\u5f80\u540e\u653e\u3002 \u8fd9\u4e2a\u201c\u5c3d\u91cf\u5f80\u540e\u653e\u201d\u7684\u7b56\u7565\u663e\u7136\u5305\u542b\u4e86\u201c\u653e\u5728\u66f4\u524d\u9762\u7684\u4f4d\u7f6e\u201d \u672a\u6765\u4f1a\u5230\u8fbe\u7684\u72b6\u6001\u3002\u3002 \u4e4b\u524d\u5df2\u7ecf\u6392\u8fc7\u5e8f\u4e86\uff0c\u6240\u4ee5\u8c03\u6574\u662f\u4e0d\u4f1a\u5f71\u54cd\u524d\u9762\u7684\u51b3\u7b56\u7684\uff0c\u8fd9\u4e2a\u8d2a\u5fc3\u5c31\u662f\u6b63\u786e\u7684\u3002 \u56e0\u4e3a\u8fd9\u4e2a\u8d2a\u5fc3\u7684\u51b3\u7b56\u5728\u95ee\u9898\u72b6\u6001\u7a7a\u95f4\u91cc\u7684\u53ef\u8fbe\u96c6\u5408\u5305\u542b\u4e86\u6240\u6709\u8fd9\u4e00\u6b65\u505a\u51fa\u5176\u5b83\u4efb\u610f\u51b3\u7b56\u7684\u53ef\u8fbe\u96c6\u5408\u3002 \u6211\u7684\u601d\u8def \u5904\u7406\u51fa\u4e00\u4e9b\u533a\u95f4\uff0c \u7528\u52fe\u80a1\u5b9a\u7406\u7b97\u4e00\u4e0b\u3002 \u7136\u540e\u95ee\u9898\u8f6c\u5316\u4e3a\uff1a\u6c42\u6700\u5c11\u7528\u591a\u5c11\u4e2a\u70b9\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u533a\u95f4\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u70b9\u3002 \u611f\u89c9\u6709\u70b9\u7c7b\u4f3c\u4e4b\u524d CF \u4e0a\u4e00\u5806\u5706\uff0c\u5305\u542b\uff0c\u76f8\u5207\uff0c\u76f8\u79bb\u7684\u67d0\u4e2a\u6811\u5f62DP\u9898\u3002 \u4e0d\u8fc7\u9053\u7406\u4e0d\u4e00\u81f4\uff0c\u8fd9\u4e00\u9898\u533a\u95f4\u53ef\u4ee5\u76f8\u4ea4\uff0cCF\u90a3\u9898\u4e0d\u884c\uff0c\uff08\u6211\u8fd8\u4ea4\u8fc7\u7ffb\u8bd1\uff09 \u753b\u4e86\u4e00\u4e2a\u56fe\uff0c\u521a\u597d\u662f\u6309\u7167\u5de6\u7aef\u70b9\u6392\u8fc7\u5e8f\u7684\u3002 \u8003\u8651\u80fd\u4e0d\u80fd\u8d2a\u5fc3\u3002 \u5148\u770b\u770b\u6570\u636e\u8303\u56f4\uff0c\u662f\u4e0d\u662f \\(n \\log n\\) \u5806\uff0c\u6216\u8005 on \u5355\u8c03\u6808/\u961f\u5217 \u4e4b\u7c7b\u7684\u3002 \\(1e3\\) , \\(n^2\\) \u53ef\u4ee5\u8fc7\u3002 \u8003\u8651 \\(n^2\\) \u5427\u3002 \u600e\u4e48\u8d2a\u5fc3\u554a\u3002 \u662f\u4e0d\u662f\u8981\u8003\u8651\u4e00\u4e0b\u5c40\u90e8\u6700\u4f18\u7b56\u7565\u662f\u5565\uff0c\u7136\u540e\u76f4\u63a5\u5c1d\u8bd5\u8bc1\u660e\u6b63\u786e\u6027\uff1f \u5c40\u90e8\u6700\u4f18\u5e94\u8be5\u5c31\u662f\u8003\u8651\u9009\u80fd\u8986\u76d6\u5230\u533a\u95f4\u5c3d\u91cf\u591a\u7684\u4f4d\u7f6e\uff1f \u6bd4\u5982\u6211\u8003\u8651\u7ef4\u62a4\u5f53\u524d\u5bf9\u4e8e\u8c01\u8fdb\u884c\u64cd\u4f5c\uff08\u5c31\u662f\u8bb0\u5f55\u4e00\u4e0b\u54ea\u4e00\u4e9b\u5df2\u7ecf\u88ab\u653e\u8fc7\u4e86\uff09 \u7136\u540e\u5728\u8fd9\u4e2a\u533a\u95f4\u7684\u6240\u6709\u5bf9\u5e94\u7b56\u7565\u91cc\u9009\u62e9\u80fd\u8986\u76d6\u533a\u95f4\u6700\u591a\u7684\u4e00\u4e2a\uff1f \u518d\u628a\u5bf9\u5e94\u7684\u9009\u62e9\u8986\u76d6\u5230\u7684\u533a\u95f4\u5168\u90e8\u6807\u8bb0\uff1f \u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u533a\u95f4\u90fd\u626b\u4e00\u6b21\u5c31\u662f \\(O(n)\\) \u4e86\uff0c\u7136\u540e\u6bcf\u4e2a\u533a\u95f4\u8d2a\u5fc3\u505a\u51b3\u5b9a\u7684\u65f6\u5019\u5c31\u662f \\(O(n)\\) \u3002\u590d\u6742 \\(n^2\\) \u53ef\u4ee5\u8fc7\u3002 \u5c1d\u8bd5\u8bc1\u660e\u6b63\u786e\u6027\uff1f\u4e4b\u524d\u7684\u8d2a\u5fc3\u90fd\u6ca1\u81ea\u5df1\u8bc1\u660e\u8fc7\u6765\u7740\u3002 \u8fd9\u4e2a\u95ee\u9898\u5e94\u8be5\u5c5e\u4e8e\u51b3\u7b56\u4f1a\u5f71\u54cd\u540e\u9762\u7684\uff1f\u8003\u8651\u7528\u6269\u5c55\u6cd5\u8bc1\u660e\uff1f \u7b49\u4e0b\uff0c\u8fd9\u4e2a\u6700\u591a\uff0c\u662f\u4e0d\u662f\u8981\u8003\u8651\u6392\u9664\u4e00\u79cd\u60c5\u51b5\uff1f\u56fe\u4f8b\u91cc\u9762 \u201c\u7ea2\u8272\u586b\u5145\u8868\u8986\u76d6\u8fc7\u4e86\u201d \u90a3\u4e00\u5757\u3002 ==== \u5982\u679c\u6211\u9009\u62e9\u524d\u9762\u7684\u51b3\u7b56\uff0c\u770b\u8d77\u6765\u80fd\u8986\u76d6\u4e09\u4e2a\uff0c\u4f46\u662f\u540e\u9762\u53c8\u6709\u56db\u4e2a\u7684\uff0c\u6309\u7167\u8fd9\u79cd\u60f3\u6cd5\u5e94\u8be5\u662f\u9009\u540e\u9762\uff0c \u4f46\u662f\u540e\u9762\u7684\u80af\u5b9a\u73b0\u5728\u4e0d\u4f1a\u66f4\u65b0\u554a\uff08\u56e0\u4e3a\u6211\u6392\u4e86\u5e8f\uff09\uff0c\u800c\u4e14\u5982\u679c\u6211\u5c40\u90e8\u5c31\u662f\u8fd9\u6837\uff0c\u4f60\u524d\u540e\u6700\u7ec8\u90fd\u662f\u8981\u9009\u7684\u3002 \u6240\u4ee5\u6ca1\u6709\u5f71\u54cd\uff0c\u6700\u591a\u8fd9\u4e2a\u64cd\u4f5c\u5c31\u6ca1\u95ee\u9898\u3002 ==== \u56de\u5230\u8bc1\u660e\uff0c\u6b38 \u611f\u89c9\u4e0a\u9762\u8fd9\u4e2a\u60f3\u6cd5\u5df2\u7ecf\u5f88\u5bf9\u4e86\uff0c\u5c31\u662f\u7a81\u7136\u60f3\u5230\u8fd9\u4e2a\u6700\u591a\u5e94\u8be5\u662f\u600e\u6837\u6700\u591a\u3002 \u56e0\u4e3a\u4f60\u8fdf\u65e9\u90fd\u8981\u9009\u7684\u554a\uff0c\u4f60\u8fd8\u4e0d\u5982\u5c3d\u91cf\u591a\u641e\u4e00\u70b9\u3002 \u5443\uff0c\u6240\u4ee5\u601d\u8def\u5c31\u8fd9\u6837\u4e86\uff0c\u770b\u770b\u5bf9\u4e0d\u5bf9\u5427\u3002 \u548c lyd \u60f3\u6cd5\u4e0d\u592a\u4e00\u81f4\uff1f\uff1f \u4f46\u6211\u89c9\u5f97\u6211\u7684\u601d\u8def\u672c\u8d28\u4e0a\u548c\u4ed6\u7684\u76f8\u540c\uff0c\u53ea\u4e0d\u8fc7\u4ed6\u7684\u66f4\u597d\u5b9e\u73b0\u4e00\u70b9\u3002 \u6211\u7684\u60f3\u6cd5\u91cc\u9762\u90a3\u4e2a \"\u56e0\u4e3a\u4f60\u8fdf\u65e9\u90fd\u8981\u9009\u7684\u554a\uff0c\u4f60\u8fd8\u4e0d\u5982\u5c3d\u91cf\u591a\u641e\u4e00\u70b9\" \u5c31\u7b49\u540c\u4e8e lyd \u505a\u6cd5\u91cc\u9762\u7684\u5c3d\u91cf\u4f7f\u7528 \"1\"\u3002 \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 #include <cmath> #include <cstdio> #include <iostream> #include <algorithm> #define ld long double using namespace std ; const int N = 1006 ; const double INF = -0x3f3f3f3f , eps = 0.000001 ; int n , d , num = 0 ; struct Point { int x , y ; double l , r ; bool operator < ( const Point x ) const { return l < x . l ; } } p [ N ]; void Solve () { for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d %d\" , & p [ i ]. x , & p [ i ]. y ); bool b = 1 ; for ( int i = 1 ; i <= n ; i ++ ) if ( p [ i ]. y > d ) { b = 0 ; break ; } if ( ! b ) { cout << \"Case \" << ++ num << \": -1\" << endl ; return ; } for ( int i = 1 ; i <= n ; i ++ ) { ld k = sqrt (( ld ) d * d - ( ld ) p [ i ]. y * p [ i ]. y ); p [ i ]. l = p [ i ]. x - k , p [ i ]. r = p [ i ]. x + k ; } sort ( p + 1 , p + n + 1 ); int ans = 1 ; double pos = - INF ; for ( int i = 1 ; i <= n ; i ++ ) { if ( pos + eps < p [ i ]. l ) { ans ++ ; pos = p [ i ]. r ; } else pos = min ( p [ i ]. r , pos ); } cout << \"Case \" << ++ num << \": \" << ans << endl ; } int main () { while ( cin >> n >> d && n && d ) Solve (); return 0 ; }","title":"\u51b3\u7b56\u5305\u5bb9\u6027"},{"location":"algor/basic/greedy/#exchange-argument","text":"\u53ef\u4ee5\u7528\u6765\u8bc1\u660e\u67d0\u4e2a\u8d2a\u5fc3\u7b97\u6cd5\u662f\u5426\u662f\u6700\u4f18\u7684\uff0c\u6216\u8005\u8bf4\u63a8\u5bfc\u51fa\u4e00\u4e2a\u6700\u4f18\u7684\u8d2a\u5fc3\u7b97\u6cd5\u5e94\u5f53\u4ee5\u4f55\u79cd\u7b56\u7565\u8d2a\u5fc3\u3002 \u4e00\u822c\u662f\u8981\u6c42\u4f60\u5728\u4e00\u4e2a\u64cd\u4f5c\u5e8f\u5217\u4e0a\u627e\u5230\u4e00\u4e2a\u6700\u4f18\u7684\u64cd\u4f5c\u987a\u5e8f\uff08\u4e0d\u540c\u7684\u4f4d\u7f6e\uff0c\u9009\u62e9\u987a\u5e8f\u4e0d\u540c\u65f6\u7684\u4ee3\u4ef7\u4e0d\u76f8\u540c\uff09\u3002 \u601d\u8def\u901a\u5e38\u90fd\u662f\u62ff\u67d0\u4e24\u4e2a\u76f8\u90bb\u7684\u9879\u51fa\u6765\uff0c\u7136\u540e\u8003\u8651\u5982\u4f55\u5224\u5b9a\u4ed6\u4eec\u7684\u9009\u53d6\u987a\u5e8f\u662f\u4e0d\u662f\u6700\u4f18\u7684\u3002 \u6bd4\u5982\u6211\u6709\u4e00\u4e2a\u7b97\u6cd5 \\(\\mathcal{O}\\) \uff0c\u5b83\u5bf9\u4e8e \\(i, i + 1\\) \u8fd9\u4e24\u9879\u7684\u9009\u62e9\u987a\u5e8f\u5c31\u662f \\(i \\to i + 1\\) \u3002 \u7136\u540e\u73b0\u5728\u9700\u8981\u8bc1\u660e\u6216\u8005\u8bc1\u4f2a\u8fd9\u4e2a \\(\\mathcal{O}\\) \u662f\u6700\u4f18\u7684\u3002 \u663e\u7136\u8fd8\u6709\u4e00\u79cd\u53ef\u80fd \\(\\mathcal{A}\\) \uff0c\u9009\u53d6\u7684\u987a\u5e8f\u662f \\(i + 1 \\to i\\) \uff0c\u6211\u4eec\u5c31\u9700\u8981\u6bd4\u8f83 \\(\\mathcal{O, A}\\) \u7684\u64cd\u4f5c\u4ee3\u4ef7\u3002 \u5047\u8bbe \\(\\mathcal{O}\\) \u662f\u6700\u4f18\u7684\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4e0d\u7b49\u5f0f\u5c31\u9700\u8981\u6210\u7acb\uff1a \\[ (\\texttt{cost}_{i} \\times \\texttt{order}_{1}) + (\\texttt{cost}_{i + 1} \\times \\texttt{order}_{2}) < (\\texttt{cost}_{i} \\times \\texttt{order}_{2}) + (\\texttt{cost}_{i + 1} \\times \\texttt{order}_{1}) \\] \u5176\u4e2d \\(\\texttt{cost}_{x}\\) \u8868\u793a \\(x\\) \u8fd9\u4e2a\u5143\u7d20\u7684\u6743\u503c\uff0c \\(\\texttt{order}_{1,2}\\) \u8868\u793a\u5148\uff08\u540e\uff09\u9009\u53d6\u6240\u4e58\u4e0a\u7684\u4ee3\u4ef7\u56e0\u5b50\u3002 \u5982\u679c\u628a\u5206\u522b\u5173\u4e8e \\(\\texttt{cost}\\) \u548c\u5173\u4e8e \\(\\texttt{order}\\) \u7684\u4e24\u4e2a\u4e0d\u7b49\u5173\u7cfb\u4ee3\u5165\u4e0a\u9762\u7684\u4e0d\u7b49\u5f0f\uff0c\u5f97\u5230\u4e86\u77db\u76fe\u7684\u7ed3\u679c\uff0c\u8bf4\u660e \\(\\mathcal{O}\\) \u5e76\u4e0d\u662f\u6700\u4f18\u7684\u7b97\u6cd5\uff0c \\(\\mathcal{A}\\) \u624d\u662f\uff0c\u53cd\u4e4b\u5219\u8bc1\u660e \\(\\mathcal{O}\\) \u624d\u662f\u6700\u4f18\u7684\u7b97\u6cd5\u3002 \u6e05\u695a\u4e86\u8c01\u662f\u6700\u4f18\u7684\u4e4b\u540e\uff0c\u6211\u4eec\u628a\u8fd9\u4e2a\u4e0d\u7b49\u5f0f\u7a0d\u5fae\u6539\u5199\u4e00\u4e0b\uff0c\u5c3d\u53ef\u80fd\u6d88\u53bb \\(\\texttt{order}\\) \uff0c\u5f97\u5230\u4e00\u4e2a\u5173\u4e8e \\(\\texttt{cost}\\) \u7684\u4e0d\u7b49\u5f0f\uff0c\u4e14\u5c06\u5173\u4e8e \\(i\\) \u7684\u53d8\u91cf\u653e\u5728\u4e0d\u7b49\u53f7\u4e00\u7aef\uff0c\u5173\u4e8e \\(i + 1\\) \u7684\u653e\u5728\u53e6\u4e00\u7aef\uff0c\u8fd9\u4e2a\u5c31\u662f\u6700\u4f18\u7b97\u6cd5\u7684\u8d2a\u5fc3\uff08\u6392\u5e8f\uff09\u7b56\u7565\uff08\u56e0\u4e3a\u6211\u4eec\u8981\u6c42\u7684\u5c31\u662f\u6700\u4f18\u7684\u987a\u5e8f\uff08\u672a\u77e5\u91cf\uff09\uff0c\u6240\u4ee5\u9700\u8981\u5c3d\u91cf\u6d88\u53bb\u8d2a\u5fc3\u7b56\u7565\u91cc\u5173\u4e8e\u987a\u5e8f\u7684\u53d8\u91cf\uff09\u3002 \u5f53\u7136\u5b9e\u9645\u5e94\u7528\u7684\u65f6\u5019 \\(\\texttt{cost}\\) \u53ef\u80fd\u9700\u8981\u7528\u66f4\u590d\u6742\u4e00\u70b9\u7684\u65b9\u5f0f\u8ba1\u7b97\uff0c\u4e0d\u8fc7\u90fd\u662f\u4e00\u6837\u7684\u3002 \u4f46\u6709\u4e00\u5b9a\u53ef\u80fd\u662f\u641e\u4e0d\u51fa\u6765\u7684\uff08\u6240\u4ee5\u5f97\u5177\u4f53\u95ee\u9898\u5177\u4f53\u5206\u6790/oh \u5f88\u591a\u65f6\u5019\u601d\u8003\u201c\u5b89\u6392\u987a\u5e8f\u201d\u7c7b\u7684\u95ee\u9898\u90fd\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b Exchange Argument\u3002 \u4e00\u4e2a\u6bd4\u8f83\u57fa\u672c\u7684\u5e94\u7528\u5c31\u662f\u6392\u5e8f\u4e0d\u7b49\u5f0f\uff1a \u6392\u5e8f\u4e0d\u7b49\u5f0f \u82e5\u6709\u5e8f\u5217 \\(f\\) \uff0c\u6ee1\u8db3 \\(0 \\le f_1 \\le f_2 \\le f_3 \\le \\dots \\le f_n\\) \u3002 \u5e76\u6709\u5b66\u5217 \\(g\\) \uff0c\u6ee1\u8db3 \\(0\\le g_1\\le g_2 \\le g_3 \\le \\dots \\le g_n\\) \u3002 \u8bbe\u4ee3\u4ef7\u51fd\u6570 \\(c(f,g) = \\sum (f_i\\times g_j)\\) \uff0c\u5176\u4e2d \\((i,j)\\) \u8868\u793a\u4e00\u7ec4\u9009\u62e9\u3002 \u5373\u662f\uff0c\u4ece \\(g\\) \u4e2d\u5206\u522b\u7ed9\u6bcf\u4e00\u4e2a \\(f_i\\) \u5206\u914d\u67d0\u4e00\u4e2a \\(g_j\\) \u3002 \u5219\u5f97\u5230\u7684\u6700\u5927\u4ef7\u503c\u5fc5\u7136\u662f\uff1a \\[\\max= f_1g_1 +f_2g_2 + \\dots +f_ng_n\\] \u5f97\u5230\u7684\u6700\u5c0f\u4ef7\u503c\u662f\uff1a \\[\\min = f_1g_n+f_2g_{n-1} + \\dots + f_ng_1\\] Proof \u8bbe \\(f_i < f_j,g_i < g_j,i < j\\) \u3002 \u5219\uff1a \\[(f_ig_i +f_jg_j)-(f_ig_j+f_jg_i)\\] \\[= f_i(g_i-g_j)+f_j(g_j-g_i)\\] \\[=f_i(g_i-g_j)-f_j(g_i-g_j)\\] \\[=(f_i-f_j)(g_i-g_j) > 0\\] \\(\\therefore (f_ig_i +f_jg_j) > (f_ig_j+f_jg_i)\\) \u5f52\u7eb3\u540e\u53ef\u8bc1\u660e\u6392\u5e8f\u4e0d\u7b49\u5f0f\u3002 \u5148\u770b\u4e00\u4e2a\u5e8f\u5217\u4e0a\u7684 Exc Arg\uff1a \u4f8b\u9898\uff1a NOIP2012TG \u56fd\u738b\u6e38\u620f \u6070\u9022 H \u56fd\u56fd\u5e86\uff0c\u56fd\u738b\u9080\u8bf7 \\(n\\) \u4f4d\u5927\u81e3\u6765\u73a9\u4e00\u4e2a\u6709\u5956\u6e38\u620f\u3002\u9996\u5148\uff0c\u4ed6\u8ba9\u6bcf\u4e2a\u5927\u81e3\u5728\u5de6\u3001\u53f3\u624b\u4e0a\u9762\u5206\u522b\u5199\u4e0b\u4e00\u4e2a\u6574\u6570\uff0c\u56fd\u738b\u81ea\u5df1\u4e5f\u5728\u5de6\u3001\u53f3\u624b\u4e0a\u5404\u5199\u4e00\u4e2a\u6574\u6570\u3002\u7136\u540e\uff0c\u8ba9\u8fd9 \\(n\\) \u4f4d\u5927\u81e3\u6392\u6210\u4e00\u6392\uff0c\u56fd\u738b\u7ad9\u5728\u961f\u4f0d\u7684\u6700\u524d\u9762\u3002\u6392\u597d\u961f\u540e\uff0c\u6240\u6709\u7684\u5927\u81e3\u90fd\u4f1a\u83b7\u5f97\u56fd\u738b\u5956\u8d4f\u7684\u82e5\u5e72\u91d1\u5e01\uff0c\u6bcf\u4f4d\u5927\u81e3\u83b7\u5f97\u7684\u91d1\u5e01\u6570\u5206\u522b\u662f\uff1a\u6392\u5728\u8be5\u5927\u81e3\u524d\u9762\u7684\u6240\u6709\u4eba\u7684\u5de6\u624b\u4e0a\u7684\u6570\u7684\u4e58\u79ef\u9664\u4ee5\u4ed6\u81ea\u5df1\u53f3\u624b\u4e0a\u7684\u6570\uff0c\u7136\u540e\u5411\u4e0b\u53d6\u6574\u5f97\u5230\u7684\u7ed3\u679c\u3002 \u56fd\u738b\u4e0d\u5e0c\u671b\u67d0\u4e00\u4e2a\u5927\u81e3\u83b7\u5f97\u7279\u522b\u591a\u7684\u5956\u8d4f\uff0c\u6240\u4ee5\u4ed6\u60f3\u8bf7\u4f60\u5e2e\u4ed6\u91cd\u65b0\u5b89\u6392\u4e00\u4e0b\u961f\u4f0d\u7684\u987a\u5e8f\uff0c\u4f7f\u5f97\u83b7\u5f97\u5956\u8d4f\u6700\u591a\u7684\u5927\u81e3\uff0c\u6240\u83b7\u5956\u8d4f\u5c3d\u53ef\u80fd\u7684\u5c11\u3002\u6ce8\u610f\uff0c\u56fd\u738b\u7684\u4f4d\u7f6e\u59cb\u7ec8\u5728\u961f\u4f0d\u7684\u6700\u524d\u9762\u3002 \u9898\u89e3 \u4f7f\u7528 Exchange Argument\u3002 \u6211\u4eec\u5047\u8bbe\u5df2\u7ecf\u6709\u4e00\u4e9b\u5927\u81e3\u548c\u56fd\u738b\u4e00\u8d77\u7ad9\u5728\u524d\u9762\uff0c\u4e14\u5df2\u7ecf\u662f\u6700\u4f18\u51b3\u7b56\uff0c\u5047\u8bbe\u73b0\u5728\u6709\u4e24\u4e2a\u4eba\u5019\u9009\uff0c\u6211\u4eec\u8981\u901a\u8fc7\u7b97\u6cd5 \\(\\mathcal{A}\\) \u5b89\u6392\u4ed6\u4eec\u5728\u961f\u5c3e\u7684\u4f4d\u7f6e\u3002 \\(\\mathcal{O}\\) \u5219\u662f\u4e00\u4e2a\u6700\u4f18\u7b97\u6cd5\uff0c\u5e76\u4e14 \\(\\mathcal{O}\\) \u548c \\(\\mathcal{A}\\) \u552f\u4e00\u7684\u533a\u522b\u5c31\u662f\u5bf9\u4e8e\u8fd9\u4e24\u4e2a\u4eba\u7684\u6392\u5e8f\uff0c\u4e4b\u524d\u7684\uff08\u5904\u7406\u73b0\u5728\u5df2\u7ecf\u6392\u597d\u4e86\u7684\u4eba\u7684\u65b9\u5f0f\uff09\u90fd\u4e00\u6a21\u4e00\u6837\u3002 \u7b2c\u4e00\u4e2a\u4eba\u7528 \\((a_1, b_1)\\) \u8868\u793a\uff08\u5de6\u53f3\u624b\u4e0a\u7684\u6570\uff09\uff0c\u7b2c\u4e8c\u4e2a\u4eba\u7528 \\((a_2, b_2)\\) \u8868\u793a\u3002 \u4e0d\u96be\u53d1\u73b0\u53ef\u9009\u7684\u7b97\u6cd5\u53ea\u6709 \\(\\mathcal{A}: \\{1, 2\\}\\) \u548c \\(\\mathcal{A}\\prime: \\{2, 1\\}\\) \u4e24\u79cd\u3002 \uff08 \\(\\mathcal{A}\\prime\\) \u5c31\u662f \\(\\mathcal{A}\\) \u901a\u8fc7\u4e00\u4e2a Exchange \u4e4b\u540e\u5f97\u5230\u7684\u65b0\u7b97\u6cd5\uff09\u3002 \u4e5f\u5c31\u662f\u8bf4 \\(\\mathcal{O}\\) \u53ea\u80fd\u662f \\(\\mathcal{A,A}\\prime\\) \u4e8c\u8005\u4e4b\u4e00\uff0c\u6240\u4ee5\u6211\u4eec\u6bd4\u8f83 \\(\\mathcal{A,A}\\prime\\) \u5c31\u884c\u4e86\u3002 \u8bbe\u4e4b\u524d\u6240\u6709\u4eba\u5de6\u624b\u4e0a\u7684\u6570\u7684\u4e58\u79ef\u4e3a \\(\\pi\\) \u3002 \u5047\u8bbe \\(\\mathcal{A}\\) \u4e25\u683c\u4f18\u79c0\u4e8e \\(\\mathcal{A}\\prime\\) \uff0c\u5373\u662f \\(\\max(\\dfrac{\\pi}{b_1}, \\dfrac{\\pi \\times a_1}{b_2}) < \\max(\\dfrac{\\pi}{b_2}, \\dfrac{\\pi \\times a_2}{b_1})\\cdots (*)\\) \u56e0\u4e3a\u6240\u6709\u53d8\u91cf\u90fd\u662f\u6b63\u6574\u6570\uff0c\u6240\u4ee5 \\(\\dfrac{\\pi}{b_2} \\le \\dfrac{\\pi \\times a_1}{b_2} \\cdots (**)\\) \u3002 \u7136\u540e\u6211\u4eec\u5047\u8bbe \\(\\dfrac{\\pi \\times a_1}{b_2} \\ge \\dfrac{\\pi \\times a_2}{b_1}\\) \uff0c\u7531 \\((**)\\) \u4f1a\u63a8\u51fa \\(\\max(\\dfrac{\\pi}{b_1}, \\dfrac{\\pi \\times a_1}{b_2}) \\ge \\max(\\dfrac{\\pi}{b_2}, \\dfrac{\\pi \\times a_2}{b_1}) \\cdots (***)\\) \uff08\u56e0\u4e3a \\(\\dfrac{\\pi \\times a_1}{b_2}\\) \u4e0d\u5c0f\u4e8e\u53f3\u8fb9\u7684\u4efb\u4f55\u4e00\u9879\uff09\u3002 \u663e\u7136 \\((*)\\) \u662f \\((***)\\) \u7684\u5426\u5b9a\uff0c\u77db\u76fe\u3002 \u6240\u4ee5 \\(\\dfrac{\\pi \\times a_1}{b_2} < \\dfrac{\\pi \\times a_2}{b_1}\\) \uff0c\u8fd9\u4e2a\u6761\u4ef6\u548c \\(\\dfrac{\\pi \\times a_1}{b_2} \\ge \\dfrac{\\pi \\times a_2}{b_1}\\) \u6784\u6210\u4e86\u5168\u96c6\uff0c\u6240\u4ee5\u5982\u679c\u540e\u8005\u9519\u4e86\uff0c\u6839\u636e\u524d\u9762\u7684\u5047\u8bbe\u548c\u7ea6\u675f\uff0c\u524d\u8005\u5fc5\u7136\u5bf9\u3002 \u90a3\u4e48\u6839\u636e \\(\\dfrac{\\pi \\times a_1}{b_2} < \\dfrac{\\pi \\times a_2}{b_1}\\) \uff0c\u53ef\u4ee5\u5f97\u5230 \\(a_1b_1 < a_2b_2\\) \u3002 \u4e5f\u5c31\u662f\u6700\u4f18\u7b97\u6cd5 \\(\\mathcal{O}\\) \u5e94\u5f53\u6ee1\u8db3 \\(a_1b_1 < a_2b_2\\) \u3002 \u6240\u4ee5\u6700\u4f18\u7684\u8d2a\u5fc3\u7b56\u7565\u662f\u6309\u7167 \\(a_i\\times b_i\\) \u5347\u5e8f\u6392\u5e8f\uff0c\u8ba9\u8fd9\u4e2a\u503c\u5c0f\u7684\u5c3d\u91cf\u653e\u5728\u524d\u9762\u3002 \u9700\u8981\u5199\u9ad8\u7cbe\u5ea6\u3002 \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 N = int ( input ()) s = input () . split () S = int ( s [ 0 ]) T = int ( s [ 1 ]) a = [] for i in range ( 1 , N + 1 ): k = input () . split () a . append (( int ( k [ 0 ]), int ( k [ 1 ]))) a . sort ( key = lambda x : x [ 0 ] * x [ 1 ]) ans = 0 for i in range ( 0 , N ): if ( S // ( a [ i ])[ 1 ] > ans ): ans = S // ( a [ i ])[ 1 ] S *= ( a [ i ])[ 0 ] print ( ans ) Exc Arg \u4e5f\u53ef\u4ee5\u653e\u5230\u6811\u4e0a\uff1a \u4f8b\u9898\uff1a POJ2054 Color a Tree \u7ed9\u4f60\u4e00\u68f5\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u6709\u4e2a\u6743\u503c \\(C_i\\) \uff0c\u8981\u67d3\u8272\u4e00\u4e2a\u8282\u70b9\u5fc5\u987b\u5148\u67d3\u8272\u5b83\u7684\u7236\u4eb2\u3002 \u67d3\u8272\u82b1\u8d39\u662f \\(T_i \\times C_i\\) \uff0c \\(T_i\\) \u662f\u67d3\u8272 \\(i\\) \u7684\u65f6\u95f4\u6233\u3002 \u6c42 \\(\\min\\{\\sum T_iC_i\\}\\) \uff0c \\(N \\le 1000\\) \uff0c\u6307\u5b9a\u6839\u8282\u70b9\u3002 \u9898\u89e3 \u8003\u8651\u6ca1\u6709\u6811\u7684\u9650\u5236\u600e\u4e48\u505a\uff0c\u5f88\u663e\u7136\u5c31\u662f\u4ece\u5927\u5230\u5c0f\u9009\uff08\u672c\u8d28\u4e0a\u662f\u6392\u5e8f\u4e0d\u7b49\u5f0f\uff09\u3002 \u7136\u540e\u8fd9\u91cc\u6709\u5148\u9009\u7236\u4eb2\u7684\u9650\u5236\u4e86\uff0c\u6240\u4ee5\u5047\u8bbe\u6811\u4e2d\u6700\u5927\u7684\u70b9 \\(u\\) \u7684\u7236\u4eb2\u4e3a \\(fa\\) \uff0c\u5728 \\(fa\\) \u67d3\u8272\u540e\u6211\u4e0b\u4e00\u6b65\u5fc5\u7136\u67d3\u8272 \\(u\\) \u3002 \u6240\u4ee5\u6211\u4eec\u5047\u8bbe\u8fd8\u6709\u53e6\u5916\u4e00\u4e2a\u70b9 \\(v\\) \uff0c\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u5148\u67d3\u8272 \\(u, fa\\) \u7684\u6761\u4ef6\u5e94\u8be5\u662f\u5565\uff08\u8fd9\u91cc\u5f00\u59cb exc arg \u4e86\uff09\u3002 \u5982\u679c\u5148\u67d3\u8272 \\(v\\) \uff0c\u82b1\u8d39 \\(p = C_v + 2\\times C_{fa} + 3\\times C_u\\) \u3002 \u5982\u679c\u5148\u67d3\u8272 \\(fa \\to u\\) \uff0c\u82b1\u8d39 \\(q = C_{fa} + 2\\times C_u + 3\\times C_v\\) \u3002 \u90a3\u4e48\u5c31\u9700\u8981 \\(q < p\\) \uff0c\u5373\u662f \\(C_v + 2\\times C_{fa} + 3\\times C_u < C_{fa} + 2\\times C_u + 3\\times C_v\\) \u3002 \u8fd9\u91cc\u53ea\u5173\u5fc3\u5927\u5c0f\u5173\u7cfb\uff0c\u6240\u4ee5\u60f3\u529e\u6cd5\u5316\u7b80\u4e00\u4e0b\uff0c\u4e24\u8fb9\u540c\u65f6\u52a0\u4e0a \\(C_v - C_u\\) \u7136\u540e\u9664\u4ee5 \\(2\\) \u3002 \u5f97\u5230\uff1a \\((C_u + C_{fa})/2 + 2\\times C_v < C_v + 2\\times ((C_u + C_{fa}) / 2)\\) \u5c31\u76f8\u5f53\u4e8e\u6bd4\u8f83 \\(v\\) \u548c\u4e00\u4e2a\u6743\u503c\u4e3a \\((C_u + C_{fa})/2\\) \u7684\u8282\u70b9\u7684\u5148\u540e\u67d3\u8272\u987a\u5e8f\u3002 \u6240\u4ee5\u53ef\u4ee5\u628a \\(u, fa\\) \u5408\u5e76\uff0c\u770b\u6210\u4e00\u4e2a\u70b9\uff0c\u4ee4\u4ed6\u4eec\u7684\u7b49\u6548\u6743\u503c\u4e3a \\((C_u + C_{fa})/2\\) \u3002 \u7136\u540e\u63a8\u5e7f\u53ef\u4ee5\u5f97\u5230\uff0c\u4e00\u4e2a\u7531 \\(n\\) \u4e2a\u70b9\u7ec4\u6210\u7684\u7b49\u6548\u70b9\uff0c\u5b83\u7684\u7b49\u6548\u6743\u503c\u4e3a \\(\\dfrac{\\sum C}{n}\\) \u3002 \u6240\u4ee5\u6bcf\u6b21\u53d6\u7b49\u6548\u6743\u503c\u6700\u5927\u7684\u7b49\u6548\u70b9 \\(u\\) \uff0c\u62ff\u51fa\u6765\u548c\u5b83\u7684 \\(\\text{father}\\) \u5408\u5e76\uff0c\u5e76\u8bb0\u5f55\u4e00\u4e0b\uff0c\u67d3\u8272\u5b8c \\(\\text{father}\\) \u5f53\u524d\u6240\u5305\u542b\u7684\u6240\u6709\u539f\u6811\u4e0a\u8282\u70b9\u4e4b\u540e\uff0c\u5e94\u8be5\u67d3\u8272 \\(u.top\\) \uff08 \\(u\\) \u672c\u8d28\u4e0a\u662f\u4e00\u9897\u5b50\u6811\uff0c\u6211\u4eec\u4e00\u822c\u7528\u5b83\u7684\u6811\u6839 \\(u.top\\) \u6765\u6307\u4ee3\u8fd9\u9897\u5b50\u6811\uff0c\u7c7b\u4f3c\u5e76\u67e5\u96c6\uff09\u3002 \u5b9e\u73b0\u5c31\u662f\u8ba9\u6bcf\u4e00\u4e2a\u70b9\uff08\u53ef\u4ee5\u662f\u539f\u59cb\u4e5f\u53ef\u4ee5\u662f\u5408\u5e76\u540e\u7684\uff09\u7684\u6743\u503c\u7b49\u4ef7\u4e8e\u5b83\u7684\u6240\u6709\u8282\u70b9\u7684\u6743\u503c\u603b\u548c\u9664\u4ee5\u70b9\u7684\u4e2a\u6570\u3002 \u7528\u4e00\u4e2a\u5806\u7ef4\u62a4\uff0c\u6bcf\u6b21\u53d6\u7b49\u6548\u6743\u503c\u6700\u5927\u7684\u70b9\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u548c\u4ed6\u7684 \\(\\text{father}\\) \u5408\u5e76\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff08\u6811\u4e0a\u539f\u59cb\u7ed3\u70b9\uff09\u8bb0\u5f55\u4e00\u4e2a \\(\\text{nxt}\\) \u8868\u793a\u67d3\u5b8c\u5b83\u4e4b\u540e\u4f1a\u67d3\u54ea\u4e00\u4e2a\u8282\u70b9\u3002 \u8bb0\u5f55\u6bcf\u4e2a\u65b0\u8282\u70b9\u7684\u7b49\u6548\u6743\u503c\u4ee5\u53ca\u201c\u9876\u201d \\(\\text{top}\\) \uff0c\u5c31\u662f\u6700\u4e0a\u9762\u7684\u90a3\u4e2a\u8282\u70b9\uff08\u6216\u8005\u8bf4\u770b\u6210\u5e76\u67e5\u96c6\u7684 pa\uff09\uff0c\u8fd8\u6709\u201c\u5e95\u201d\uff0c\u5c31\u662f\u6700\u4e0b\u9762\u65b0\u5408\u5e76\u8fdb\u6765\u7684\u8282\u70b9 \\(\\text{but}\\) \u3002 \u5806\u91cc\u9762\u653e\u7684\u5c31\u662f\u8fd9\u4e9b\u6240\u8c13\u201c\u65b0\u8282\u70b9\u201d\u3002\u6240\u4ee5 merge(u, fa) \u53ef\u4ee5\u8868\u793a\u6210 \u5148\u4e0d\u65ad\u8df3 fa.top \u5230\u4e00\u4e2a\u6ca1\u6709\u5f80\u4e0a\u5408\u5e76\u8fc7\u7684\u8282\u70b9 fafa \u4e0a\u3002 \uff08\u5982\u679c fafa \u5411\u4e0a\u5408\u5e76\u8fc7\uff0c\u90a3\u4e48\u5b83\u7684 top \u5fc5\u7136\u4e0d\u4f1a\u662f\u5b83\u672c\u8eab\uff0c\u5728\u540e\u9762\u5408\u5e76\u7684\u65f6\u5019\u5c31\u4f1a\u6709\u95ee\u9898\uff09 \u7136\u540e\u4ee4 fafa.but.nxt = u.top, fafa.but = u.but u.vis = true, u.top = fafa \uff08\u6ce8\u610f\u987a\u5e8f\uff09\u3002 \u6700\u540e\u628a fafa \u6254\u8fdb\u5806\u91cc\u9762\uff0c\u5806\u91cc\u4e0d\u80fd\u6709 \\(\\text{root}\\) . \u7edf\u8ba1\u7b54\u6848\u626b\u4e00\u904d\u5c31\u884c\u4e86\u3002 \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 // author : black_trees #include <queue> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define meow(x) cerr << #x << \" = \" << x using namespace std ; // using i64 = long long; const int si = 1e3 + 10 ; const long double eps = 1e-7 ; int Fa [ si ]; struct node { bool vis ; // \u6807\u8bb0 int val , tot , sum ; // \u8bb0\u5f55\u539f\u6743\u503c\uff0c\u7b49\u6548\u6743\u503c int top , but , nxt ; // \u9876\uff0c\u5e95\uff0c\u4e0b\u4e00\u4e2a\u67d3\u8272\u7684\u539f\u8282\u70b9\u7684\u7f16\u53f7 } a [ si ]; struct Node { int id ; long double w ; bool operator < ( const Node & b ) const { return ( w - b . w ) < eps ; } }; priority_queue < Node > q ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int n , rt ; while ( cin >> n >> rt && n && rt ) { for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]. val , a [ i ]. sum = a [ i ]. val , a [ i ]. top = a [ i ]. but = i , a [ i ]. tot = 1 , a [ i ]. vis = false ; for ( int i = 1 ; i < n ; ++ i ) { int u , v ; cin >> u >> v , Fa [ v ] = u ; } Node tmp ; for ( int i = 1 ; i <= n ; ++ i ) { tmp . id = i , tmp . w = ( 1.0 * a [ i ]. val ); if ( i != rt ) q . push ( tmp ); } while ( ! q . empty ()) { tmp = q . top (); q . pop (); if ( a [ tmp . id ]. vis ) continue ; a [ tmp . id ]. vis = true ; int fa = Fa [ tmp . id ]; while ( fa != rt && a [ fa ]. vis == true ) fa = a [ fa ]. top ; a [ a [ fa ]. but ]. nxt = a [ tmp . id ]. top , a [ fa ]. but = a [ tmp . id ]. but , a [ tmp . id ]. top = fa ; a [ fa ]. sum += a [ tmp . id ]. sum , a [ fa ]. tot += a [ tmp . id ]. tot ; tmp . id = fa , tmp . w = ( 1.0 * a [ fa ]. sum ) / ( 1.0 * a [ fa ]. tot ); if ( fa != rt ) q . push ( tmp ); } int ans = 0 ; for ( int dfn = 1 , u = rt ; dfn <= n ; ++ dfn , u = a [ u ]. nxt ) ans += dfn * a [ u ]. val ; cout << ans << endl ; } return 0 ; } \u8fd8\u6709\u4e00\u79cd\u5e94\u7528\u662f\uff0c\u5bf9\u4e8e\u67d0\u4e2a dp \u95ee\u9898\uff0c\u4f60\u76f4\u63a5\u5728\u539f\u5e8f\u5217\u4e0a dp \u4f1a\u6709\u540e\u6548\u6027\uff0c\u4f46\u662f\u6309\u7167\u67d0\u79cd\u987a\u5e8f\u6392\u5e8f\u4e4b\u540e\uff0cdp\u5c31\u6ca1\u6709\u540e\u6548\u6027\u4e86\u3002 \u4f8b\u9898\uff1a CODE FESTIVAL 2017 Problem D \u6709 \\(n\\) \u4e2a\u4eba\uff0c\u6bcf\u4e2a\u4eba\u624b\u4e0a\u6709 \\(a_i\\) \u4e2a\u77f3\u5934\uff0c\u8eab\u9ad8\u4e3a \\(b_i\\) \uff0c \u5982\u679c\u8f6e\u5230\u7b2c \\(i\\) \u4e2a\u4eba\u653e\u77f3\u5934\u7684\u65f6\u5019\uff0c\u77f3\u5934\u5806\u91cc\u7684\u77f3\u5934\u4e2a\u6570\u5c0f\u4e8e\u7b49\u4e8e \\(b_i\\) \uff0c\u8fd9\u4e2a\u4eba\u5c31\u4f1a\u653e \\(a_i\\) \u4e2a\u77f3\u5934\u8fdb\u53bb\uff0c\u5426\u5219\u6446\u70c2 \u95ee\u600e\u4e48\u6837\uff08\u4ee5\u67d0\u79cd\u987a\u5e8f\uff09\u624d\u80fd\u8ba9 \u653e\u4e86\u77f3\u5934\u7684\u4eba\u6700\u591a \uff0c\u6700\u591a\u662f\u591a\u5c11\u3002 \\(n \\le 5000, 0 \\le b_i \\le 1e9, 1 \\le a_i \\le 1e9\\) \u3002 Bonus : \\(n \\le 1e5\\) \uff0c\uff08\u76ee\u524d\u4e0d\u4f1a\uff0c cf blog \u4e0a\u6709\u63d0\u5230\uff09 \u9898\u89e3 \u76f4\u63a5 DP \u663e\u7136\u6709\u95ee\u9898\uff0c\u5c31\u662f\u5982\u679c\u76f4\u63a5\u6309\u7167\u8f93\u5165\u7684\u987a\u5e8f\u641e\u7684\u8bdd\u3002 \u8fd9\u6837\u5b50\u53ea\u80fd\u8003\u8651\u5728 \\(1, 2, 3, 4\\) \u7684\u5b50\u5e8f\u5217\u5f53\u4e2d\u9009\u53d6\uff0c\u6240\u4ee5\u662f\u6709\u5c40\u9650\u6027\u7684\uff0c\u56e0\u4e3a\u4f60\u6ca1\u6cd5\u8986\u76d6\u9009\u62e9 \\(4, 2, 1, 3\\) \u8fd9\u6837\u201c\u4e71\u5e8f\u201d\u7684\u60c5\u51b5\u3002 \u8fd9\u9053\u9898\u672c\u8eab\u5c31\u662f\u5728\u201c\u5b89\u6392\u987a\u5e8f\u201d\uff0c\u5c31\u662f Exc arg \u7684\u4e00\u4e2a Key\u3002 \u5f88\u660e\u663e \\(1,2,4,3 \\ | \\ 2, 4, 1, 3\\ |\\ 4, 1, 2, 3 \\dots\\) \u8fd9\u4e9b\u5404\u79cd\u987a\u5e8f\u91cc\u9762\u5927\u90e8\u5206\u90fd\u4e0d\u53ef\u80fd\u6210\u4e3a\u6700\u4f18\u51b3\u7b56\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7528 Exc arg \u5206\u6790\u4e00\u4e0b\uff0c\u7136\u540e\u518d DP\u3002 \u5047\u8bbe\u6211\u4eec\u6709\u4e24\u4e2a\u4eba \\(i,j\\) \u9700\u8981\u786e\u5b9a\u4e00\u4e2a\u57fa\u672c\u987a\u5e8f\u3002 \u8003\u8651\u5230\u5982\u679c \\(i\\) \u653e\u4e86\u4e4b\u540e\uff0c\u9ad8\u5ea6\u81f3\u591a\u662f \\(a_i + b_i\\) \uff0c \\(j\\) \u653e\u4e86\u4e4b\u540e\uff0c\u9ad8\u5ea6\u81f3\u591a\u662f \\(a_j + b_j\\) \u3002 \u6211\u4eec\u5e0c\u671b\u8ba9\u80fd\u653e\u77f3\u5b50\u7684\u4eba\u66f4\u591a\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8ba9\u5148\u653e\u7684\u90a3\u4e00\u4e2a\u4eba\u653e\u5b8c\u4e4b\u540e\u7684\u6700\u5927\u9ad8\u5ea6\u5c3d\u53ef\u80fd\u7684\u5c0f\u3002 \u5047\u8bbe \\(i\\) \u5e94\u5f53\u6bd4 \\(j\\) \u5148\u653e\uff0c\u90a3\u4e48\u4e00\u5b9a\u8981\u6ee1\u8db3\u4e0d\u7b49\u5f0f\uff1a \\(a_i+b_i < a_j+b_j\\) \u3002 \u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u6309\u7167 \\(a+b\\) \u6392\u5e8f\u5c31\u80fd\u5f97\u5230\u4e00\u4e2a\u6700\u4f18\u7684\uff0c\u53ef\u4ee5\u7528\u6765 dp \u7684\u987a\u5e8f\u3002 \u6392\u5b8c\u5e8f\u4e4b\u540e\u76f4\u63a5\u4e00\u4e2a\u7b80\u5355\u7684 \\(O(n^2)\\) dp \u5c31\u53ef\u4ee5\u4e86\u3002 \u8bbe \\(dp(i)\\) \u8868\u793a\u524d \\(i\\) \u4e2a\u4eba\uff08\u6392\u5e8f\u540e\uff09\uff0c\u80fd\u53d6\u5230\u7684\u9ad8\u5ea6\u6700\u5c0f\u503c\uff0c\u7136\u540e\u5728\u6240\u6709\u53ef\u884c\u7684 \\(dp\\) \u91cc\u9762\u53d6\u4eba\u6570\u6700\u5927\u503c\u5373\u53ef\u3002 Tips \u8fd9\u91cc\u7684 Exchange Argument \u91cc\u7684 \u201d\u4ee3\u4ef7\u201c \u5c31\u6bd4\u8f83 \u201c\u5e7f\u4e49\u201d \u4e86\uff0c\u662f \u201c\u8ba9\u64cd\u4f5c\u8fc7\u540e\u7684\u9ad8\u5ea6\u5c3d\u91cf\u5c0f\u201d\u3002 \u4e0d\u8fc7\u8fd8\u662f\u7167\u6837\u53ef\u4ee5\u5f52\u5316\u5230\u4e0a\u9762\u8bf4\u7684 Observation\u3002 \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int si = 5e3 + 10 ; struct zabuton { i64 a , b ; bool operator < ( const zabuton & c ) const { return ( a + b ) < ( c . a + c . b ); } } arr [ si ]; i64 dp [ si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int n ; cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) cin >> arr [ i ]. b >> arr [ i ]. a ; sort ( arr + 1 , arr + 1 + n ); memset ( dp , 0x3f , sizeof dp ); dp [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) for ( int j = i ; j ; -- j ) if ( dp [ j - 1 ] <= arr [ i ]. b ) dp [ j ] = min ( dp [ j ], dp [ j - 1 ] + arr [ i ]. a * 1l l ); i64 mx = -1 ; for ( int i = 1 ; i <= n ; ++ i ) if ( dp [ i ] < 1e18 ) mx = max ( mx , 1l l * i ); cout << mx << endl ; return 0 ; } // ref : https://blog.csdn.net/Leo_Nasir/article/details/81228924 \u8fdb\u9636\u53ef\u4ee5\u770b\u770b ZJK \u7237\u7237\u7684 Paper \u3002 ref: https://www.cnblogs.com/Gavin_Liu/archive/2011/04/10/2011108.html","title":"Exchange Argument"},{"location":"algor/basic/greedy/#_4","text":"\u5495\u5495\u5495","title":"\u53cd\u8bc1\u6cd5"},{"location":"algor/basic/greedy/#_5","text":"\u5495\u5495\u5495","title":"\u6570\u5b66\u5f52\u7eb3\u6cd5"},{"location":"algor/basic/greedy/#_6","text":"\u5495\u5495\u5495","title":"\u53cd\u6094\u8d2a\u5fc3"},{"location":"algor/basic/hash-table/","text":"Hash \u03c8(\uff40\u2207\u00b4)\u03c8 \u8bf4 Hash table \u4e4b\u524d\u5148\u7b80\u5355\u7684\u63d0\u4e00\u5634 Hash\u3002 Hash \u7684\u601d\u60f3\u5c31\u662f mapping\uff0c\u6216\u8005\u8bf4 \u201c\u6620\u5c04\u201d\u3002 \u5b83\u7684\u4f5c\u7528\u5c31\u662f \u201c\u7f29\u5c0f\u4fe1\u606f\u57df\u201d\uff0c\u628a\u539f\u6765\u5f88\u5206\u6563\u6216\u8005\u8303\u56f4\u5f88\u5927\u7684\u4e1c\u897f\u538b\u7f29\u4e00\u4e0b\uff0c\u65b9\u4fbf\u5904\u7406\u3002 \u6700\u5e38\u89c1\u7684\u5e94\u7528\u5c31\u662f\u79bb\u6563\u5316\uff0c\u628a \\(a_i\\) \u6620\u5c04\u6210 \\(val(a_i)\\) \uff0c\u90a3\u4ece \\(\\{a\\} \\to val\\) \u7684\u8fd9\u4e2a\u6620\u5c04\u5c31\u5229\u7528\u4e86 Hash \u7684\u601d\u60f3\u3002 \u4e00\u822c Hash \u90fd\u4f1a\u6709\u4e00\u4e2a Hash function\uff0c\u7528\u6765\u628a\u5bf9\u5e94\u503c\u6620\u5c04\u5230\u4e00\u4e2a\u65b0\u7684\u4f4d\u7f6e\u4e0a\u53bb\uff0c\u6bd4\u5982\u79bb\u6563\u5316\u5f53\u4e2d\u7684 Hash function \u5c31\u662f \\(val\\) \u3002 Hash table \u03c8(\uff40\u2207\u00b4)\u03c8 \u8003\u8651\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff0c\u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u7edf\u8ba1\u6bcf\u4e2a\u6570\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff0c \\(0\\le a_i \\le 1e5\\) \u3002 \u663e\u7136\u4f1a\u60f3\u5230\u76f4\u63a5\u7528\u6876\u8ba1\u6570\uff0c\u90a3\u4e48\u6269\u5c55\u4e00\u4e0b\u95ee\u9898\uff0c\u4ee4 \\(a_i \\in [-10^{18},10^{18}]\\) \uff1f \u76f4\u63a5\u7edf\u8ba1\u6ca1\u6cd5\u505a\u4e86\uff0c\u5f53\u7136\u4f60\u53ef\u4ee5\u79bb\u6563\u5316\u4e4b\u540e\u626b\u4e00\u904d\uff0c\u6216\u8005\u76f4\u63a5\u5229\u7528 STL Map \u6765\u5b9e\u73b0\u3002 STL Map \u672c\u8d28\u4e0a\u662f\u4e00\u9897\u7ea2\u9ed1\u6811\uff0c\u4f46\u662f gnu_pbds \u91cc\u9762\u6709\u4e24\u4e2a\u6570\u636e\u7ed3\u6784\u53eb cc/gp_hash_table\uff0c\u8fd9\u4e24\u4e2a\u4e1c\u897f\u5c31\u662f Hash table \u4f5c\u4e3a\u5e95\u5c42\u7684\uff0c\u53ea\u4e0d\u8fc7\u5e94\u5bf9 Hash \u51b2\u7a81\u7684\u65b9\u6cd5\u4e0d\u540c\u3002 \u8003\u8651\u8bbe Hash function : \\(H(x) = (x \\mod p) + 1\\) \uff0c \\(p\\) \u662f\u4e00\u4e2a\u8f83\u5927\u7684\u4f46\u662f\u5c0f\u4e8e \\(n\\) \u7684\u8d28\u6570\u3002 \u8fd9\u4e2a Hash function \u4f1a\u628a\u5e8f\u5217\u5206\u6210 \\(p\\) \u7ec4\uff0c\u5728\u5e8f\u5217\u968f\u673a\u7ed9\u51fa\u7684\u60c5\u51b5\u4e0b\u6bcf\u7ec4\u7684\u5927\u5c0f\u662f\u5747\u5300\u7684\u3002 \u6211\u4eec\u628a\u8fd9 \\(p\\) \u7ec4\u6570\u6254\u5230\u90bb\u63a5\u8868\u4e0a\u3002 \u5bf9\u4e8e\u5e8f\u5217 \\(a\\) \uff0c\u6211\u4eec\u4ece\u5934\u5f00\u59cb\u4e00\u4e2a\u4e00\u4e2a\u63d2\u5165\uff0c\u5bf9\u4e8e \\(a_i\\) \uff0c\u6211\u4eec\u4ece \\(head(H(a_i))\\) \u8fd9\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u627e\uff0c\u7136\u540e\u5728\u8fd9\u4e2a\u94fe\u8868\u91cc\u9762\u5f00\u59cb\u627e\uff0c\u5982\u679c\u627e\u4e0d\u5230 \\(a_i\\) \uff0c\u6211\u4eec\u5c31\u5728\u8fd9\u7ec4\u94fe\u8868\u7684\u5f00\u5934\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\u5e76\u5c06\u5176\u50a8\u5b58\u7684\u503c\u52a0\u4e00\uff0c\u627e\u5230\u4e86\u5c31\u76f4\u63a5\u5728\u5bf9\u5e94\u4f4d\u7f6e\u52a0\u4e00\u3002 \u56e0\u4e3a\u6570\u636e\u968f\u673a\uff0c\u6240\u4ee5\u8fd9\u4e2a\u7684\u671f\u671b\u590d\u6742\u5ea6\u8fd1\u4f3c \\(O(n)\\) \uff0c\u4e5f\u5c31\u662f\u8bf4\u6bcf\u6b21\u63d2\u5165\u64cd\u4f5c\u5747\u644a \\(O(1)\\) \u4e2a\u4eba\u611f\u89c9\u5728\u5c3e\u90e8\u63d2\u5165\u4e5f\u5dee\u4e0d\u591a\uff1f\u4e0d\u8fc7\u5728\u5934\u90e8\u63d2\u5165\u4f1a\u597d\u5199\u4e00\u70b9\uff08\u6bd5\u7adf\u94fe\u5f0f\u524d\u5411\u661f\u5c31\u8fd9\u4e48\u5199\uff09\u3002 \u8fd9\u79cd\u65b9\u6cd5\u53eb\u62c9\u94fe\u6cd5\uff0c\u4e5f\u53eb\u5f00\u6563\u5217\u6cd5\uff0c\u5b83\u7684\u601d\u60f3\u662f\u628a\u6240\u6709 Hash \u51b2\u7a81\u7684\u5143\u7d20\u6254\u5230\u4e00\u4e2a\u7ec4\u91cc\u9762\u3002 \u8fd8\u6709\u4e00\u79cd\u65b9\u6cd5\u662f\u63a2\u67e5\u6cd5\uff0c\u76f4\u63a5\u628a\u6240\u6709\u5143\u7d20\u5b58\u5728\u4e00\u4e2a\u8868\u5f53\u4e2d\uff0c\u5982\u679c\u53d1\u751f Hash \u51b2\u7a81\u5219\u6839\u636e\u67d0\u79cd\u65b9\u5f0f\u7ee7\u7eed\u8fdb\u884c\u63a2\u67e5\uff0c\u627e\u5230\u4e00\u4e2a\u7a7a\u7684\u4f4d\u7f6e\u628a\u5b83\u653e\u8fdb\u53bb\u3002 \u5e38\u7528\u7684\u63a2\u67e5\u65b9\u6cd5\u662f\u7ebf\u6027\u63a2\u67e5\u6cd5\uff0c\u5c31\u662f\u5982\u679c\u5728 \\(pos\\) \u53d1\u751f\u51b2\u7a81\uff0c\u5c31\u4e0d\u65ad\u627e \\(pos + 1, pos + 2, \\dots\\) \u76f4\u5230\u4e0d\u51b2\u7a81\u3002 \u8fd9\u91cc\u53ea\u5b9e\u73b0\u4e86\u62c9\u94fe\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // \u778e\u5199\u7684\uff0c\u6ca1\u7f16\u8bd1\u6ca1\u6d4b\u8fc7\uff0c\u4ec5\u4f9b\u53c2\u8003\u3002 const int si = 1e5 + 10 ; int n , a [ si ], tot = 0 ; int head [ si ], val [ si ], cnt [ si ], Next [ si ]; int H ( int x ) { return ( x % p ) + 1 ; } bool insert ( int x ) { bool exist = false ; int u = H ( x ); for ( int i = head [ u ]; ~ i ; i = Next [ i ]) { if ( val [ i ] == x ) { cnt [ i ] ++ , exist = true ; break ; } } if ( exist ) return true ; ++ tot , Next [ tot ] = head [ u ], val [ tot ] = x , cnt [ tot ] = 1 , head [ u ] = tot ; return false ; } int query ( int x ) { int u = H ( x ); for ( int i = head [ u ]; ~ i ; i = Next [ i ]) if ( val [ i ] == x ) return cnt [ i ]; return 0 ; } // \u8bb0\u5f97\u521d\u59cb\u5316\u3002","title":"\u54c8\u5e0c\u8868"},{"location":"algor/basic/hash-table/#hash","text":"\u8bf4 Hash table \u4e4b\u524d\u5148\u7b80\u5355\u7684\u63d0\u4e00\u5634 Hash\u3002 Hash \u7684\u601d\u60f3\u5c31\u662f mapping\uff0c\u6216\u8005\u8bf4 \u201c\u6620\u5c04\u201d\u3002 \u5b83\u7684\u4f5c\u7528\u5c31\u662f \u201c\u7f29\u5c0f\u4fe1\u606f\u57df\u201d\uff0c\u628a\u539f\u6765\u5f88\u5206\u6563\u6216\u8005\u8303\u56f4\u5f88\u5927\u7684\u4e1c\u897f\u538b\u7f29\u4e00\u4e0b\uff0c\u65b9\u4fbf\u5904\u7406\u3002 \u6700\u5e38\u89c1\u7684\u5e94\u7528\u5c31\u662f\u79bb\u6563\u5316\uff0c\u628a \\(a_i\\) \u6620\u5c04\u6210 \\(val(a_i)\\) \uff0c\u90a3\u4ece \\(\\{a\\} \\to val\\) \u7684\u8fd9\u4e2a\u6620\u5c04\u5c31\u5229\u7528\u4e86 Hash \u7684\u601d\u60f3\u3002 \u4e00\u822c Hash \u90fd\u4f1a\u6709\u4e00\u4e2a Hash function\uff0c\u7528\u6765\u628a\u5bf9\u5e94\u503c\u6620\u5c04\u5230\u4e00\u4e2a\u65b0\u7684\u4f4d\u7f6e\u4e0a\u53bb\uff0c\u6bd4\u5982\u79bb\u6563\u5316\u5f53\u4e2d\u7684 Hash function \u5c31\u662f \\(val\\) \u3002","title":"Hash"},{"location":"algor/basic/hash-table/#hash-table","text":"\u8003\u8651\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\uff0c\u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u7edf\u8ba1\u6bcf\u4e2a\u6570\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff0c \\(0\\le a_i \\le 1e5\\) \u3002 \u663e\u7136\u4f1a\u60f3\u5230\u76f4\u63a5\u7528\u6876\u8ba1\u6570\uff0c\u90a3\u4e48\u6269\u5c55\u4e00\u4e0b\u95ee\u9898\uff0c\u4ee4 \\(a_i \\in [-10^{18},10^{18}]\\) \uff1f \u76f4\u63a5\u7edf\u8ba1\u6ca1\u6cd5\u505a\u4e86\uff0c\u5f53\u7136\u4f60\u53ef\u4ee5\u79bb\u6563\u5316\u4e4b\u540e\u626b\u4e00\u904d\uff0c\u6216\u8005\u76f4\u63a5\u5229\u7528 STL Map \u6765\u5b9e\u73b0\u3002 STL Map \u672c\u8d28\u4e0a\u662f\u4e00\u9897\u7ea2\u9ed1\u6811\uff0c\u4f46\u662f gnu_pbds \u91cc\u9762\u6709\u4e24\u4e2a\u6570\u636e\u7ed3\u6784\u53eb cc/gp_hash_table\uff0c\u8fd9\u4e24\u4e2a\u4e1c\u897f\u5c31\u662f Hash table \u4f5c\u4e3a\u5e95\u5c42\u7684\uff0c\u53ea\u4e0d\u8fc7\u5e94\u5bf9 Hash \u51b2\u7a81\u7684\u65b9\u6cd5\u4e0d\u540c\u3002 \u8003\u8651\u8bbe Hash function : \\(H(x) = (x \\mod p) + 1\\) \uff0c \\(p\\) \u662f\u4e00\u4e2a\u8f83\u5927\u7684\u4f46\u662f\u5c0f\u4e8e \\(n\\) \u7684\u8d28\u6570\u3002 \u8fd9\u4e2a Hash function \u4f1a\u628a\u5e8f\u5217\u5206\u6210 \\(p\\) \u7ec4\uff0c\u5728\u5e8f\u5217\u968f\u673a\u7ed9\u51fa\u7684\u60c5\u51b5\u4e0b\u6bcf\u7ec4\u7684\u5927\u5c0f\u662f\u5747\u5300\u7684\u3002 \u6211\u4eec\u628a\u8fd9 \\(p\\) \u7ec4\u6570\u6254\u5230\u90bb\u63a5\u8868\u4e0a\u3002 \u5bf9\u4e8e\u5e8f\u5217 \\(a\\) \uff0c\u6211\u4eec\u4ece\u5934\u5f00\u59cb\u4e00\u4e2a\u4e00\u4e2a\u63d2\u5165\uff0c\u5bf9\u4e8e \\(a_i\\) \uff0c\u6211\u4eec\u4ece \\(head(H(a_i))\\) \u8fd9\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u627e\uff0c\u7136\u540e\u5728\u8fd9\u4e2a\u94fe\u8868\u91cc\u9762\u5f00\u59cb\u627e\uff0c\u5982\u679c\u627e\u4e0d\u5230 \\(a_i\\) \uff0c\u6211\u4eec\u5c31\u5728\u8fd9\u7ec4\u94fe\u8868\u7684\u5f00\u5934\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\u5e76\u5c06\u5176\u50a8\u5b58\u7684\u503c\u52a0\u4e00\uff0c\u627e\u5230\u4e86\u5c31\u76f4\u63a5\u5728\u5bf9\u5e94\u4f4d\u7f6e\u52a0\u4e00\u3002 \u56e0\u4e3a\u6570\u636e\u968f\u673a\uff0c\u6240\u4ee5\u8fd9\u4e2a\u7684\u671f\u671b\u590d\u6742\u5ea6\u8fd1\u4f3c \\(O(n)\\) \uff0c\u4e5f\u5c31\u662f\u8bf4\u6bcf\u6b21\u63d2\u5165\u64cd\u4f5c\u5747\u644a \\(O(1)\\) \u4e2a\u4eba\u611f\u89c9\u5728\u5c3e\u90e8\u63d2\u5165\u4e5f\u5dee\u4e0d\u591a\uff1f\u4e0d\u8fc7\u5728\u5934\u90e8\u63d2\u5165\u4f1a\u597d\u5199\u4e00\u70b9\uff08\u6bd5\u7adf\u94fe\u5f0f\u524d\u5411\u661f\u5c31\u8fd9\u4e48\u5199\uff09\u3002 \u8fd9\u79cd\u65b9\u6cd5\u53eb\u62c9\u94fe\u6cd5\uff0c\u4e5f\u53eb\u5f00\u6563\u5217\u6cd5\uff0c\u5b83\u7684\u601d\u60f3\u662f\u628a\u6240\u6709 Hash \u51b2\u7a81\u7684\u5143\u7d20\u6254\u5230\u4e00\u4e2a\u7ec4\u91cc\u9762\u3002 \u8fd8\u6709\u4e00\u79cd\u65b9\u6cd5\u662f\u63a2\u67e5\u6cd5\uff0c\u76f4\u63a5\u628a\u6240\u6709\u5143\u7d20\u5b58\u5728\u4e00\u4e2a\u8868\u5f53\u4e2d\uff0c\u5982\u679c\u53d1\u751f Hash \u51b2\u7a81\u5219\u6839\u636e\u67d0\u79cd\u65b9\u5f0f\u7ee7\u7eed\u8fdb\u884c\u63a2\u67e5\uff0c\u627e\u5230\u4e00\u4e2a\u7a7a\u7684\u4f4d\u7f6e\u628a\u5b83\u653e\u8fdb\u53bb\u3002 \u5e38\u7528\u7684\u63a2\u67e5\u65b9\u6cd5\u662f\u7ebf\u6027\u63a2\u67e5\u6cd5\uff0c\u5c31\u662f\u5982\u679c\u5728 \\(pos\\) \u53d1\u751f\u51b2\u7a81\uff0c\u5c31\u4e0d\u65ad\u627e \\(pos + 1, pos + 2, \\dots\\) \u76f4\u5230\u4e0d\u51b2\u7a81\u3002 \u8fd9\u91cc\u53ea\u5b9e\u73b0\u4e86\u62c9\u94fe\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // \u778e\u5199\u7684\uff0c\u6ca1\u7f16\u8bd1\u6ca1\u6d4b\u8fc7\uff0c\u4ec5\u4f9b\u53c2\u8003\u3002 const int si = 1e5 + 10 ; int n , a [ si ], tot = 0 ; int head [ si ], val [ si ], cnt [ si ], Next [ si ]; int H ( int x ) { return ( x % p ) + 1 ; } bool insert ( int x ) { bool exist = false ; int u = H ( x ); for ( int i = head [ u ]; ~ i ; i = Next [ i ]) { if ( val [ i ] == x ) { cnt [ i ] ++ , exist = true ; break ; } } if ( exist ) return true ; ++ tot , Next [ tot ] = head [ u ], val [ tot ] = x , cnt [ tot ] = 1 , head [ u ] = tot ; return false ; } int query ( int x ) { int u = H ( x ); for ( int i = head [ u ]; ~ i ; i = Next [ i ]) if ( val [ i ] == x ) return cnt [ i ]; return 0 ; } // \u8bb0\u5f97\u521d\u59cb\u5316\u3002","title":"Hash table"},{"location":"algor/basic/sorting/","text":"\u7a33\u5b9a\u6027 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5c31\u662f\u8bf4\uff0c\u5047\u8bbe\u539f\u5e8f\u5217\u5f53\u4e2d\u6709\u4e24\u4e2a\u76f8\u540c\u7684\u5143\u7d20 \\(a_i, a_j\\) \u3002 \u5982\u679c\u8fd9\u4e2a\u6392\u5e8f\u7b97\u6cd5\u6ca1\u6709\u6539\u53d8 \\(a_i, a_j\\) \u7684\u76f8\u5bf9\u4f4d\u7f6e\u3002 \u90a3\u4e48\u8fd9\u4e2a\u6392\u5e8f\u7b97\u6cd5\u5c31\u662f\u7a33\u5b9a\u7684\u3002 \u57fa\u6570\u6392\u5e8f\u3001\u8ba1\u6570\u6392\u5e8f\u3001\u63d2\u5165\u6392\u5e8f\u3001\u5192\u6ce1\u6392\u5e8f\u3001\u5f52\u5e76\u6392\u5e8f\u662f\u7a33\u5b9a\u6392\u5e8f\u3002 \u9009\u62e9\u6392\u5e8f\u3001\u5806\u6392\u5e8f\u3001\u5feb\u901f\u6392\u5e8f\u4e0d\u662f\u7a33\u5b9a\u6392\u5e8f\u3002 \u9009\u62e9\u6392\u5e8f \u03c8(\uff40\u2207\u00b4)\u03c8 \u5c31\u662f\u904d\u5386 \\(n\\) \u8f6e \\(1 \\to n\\) \uff0c\u7b2c \\(i\\) \u8f6e\u627e\u5230\u7b2c \\(i\\) \u5c0f\u7684\u6570\uff0c\u7136\u540e\u653e\u5230\u4f4d\u7f6e \\(i\\) \u4e0a\uff08\u5b9e\u73b0\u65f6\u628a\u8fd9\u4e2a\u6570\u548c \\(a_i\\) \u4ea4\u6362\uff09\u3002 \u5e73\u5747\uff0c\u6700\u574f\uff0c\u6700\u4f18\uff0c\u590d\u6742\u5ea6 \\(O(n^2)\\) \uff0c\u56e0\u4e3a\u6bcf\u6b21\u5faa\u73af\u6b21\u6570\u662f\u56fa\u5b9a\u7684\u3002 1 2 3 4 5 6 7 for ( int i = 1 ; i < n ; ++ i ) { int ith = i ; for ( int j = i + 1 ; j <= n ; ++ j ) { if ( a [ j ] < a [ ith ]) ith = j ; } swap ( a [ i ], a [ ith ]); } \u63d2\u5165\u6392\u5e8f \u03c8(\uff40\u2207\u00b4)\u03c8 \u7c7b\u4f3c\u6253\u724c\u7684\u65f6\u5019\u7684\u6392\u5e8f\u65b9\u6cd5\u3002 \u628a\u539f\u5e8f\u5217\u5206\u6210\u3010\u6ca1\u6709\u6392\u5e8f\u3011\u548c\u3010\u6392\u5e8f\u8fc7\u3011\u4e24\u90e8\u5206\u3002 \u6bcf\u6b21\u4ece\u3010\u6ca1\u6709\u6392\u5e8f\u3011\u7684\u91cc\u9762\u6293\u4e00\u5f20\uff0c\u6254\u5230\u3010\u6392\u5e8f\u8fc7\u3011\u7684\u4e00\u4e2a\u5408\u9002\u4f4d\u7f6e\uff08\u7b2c\u4e00\u4e2a\u5927\u4e8e\u5b83\u7684\u5143\u7d20\uff09\u524d\u9762\u3002 \u5177\u4f53\u5b9e\u73b0\u662f\uff0c\u4ece \\(2\\) \u5f00\u59cb\uff0c\u5047\u8bbe \\([1, i)\\) \u662f\u5df2\u7ecf\u6392\u5e8f\u8fc7\u7684\uff0c\u7136\u540e\u5bf9\u4e8e \\(a_i\\) \uff0c\u4e0d\u65ad\u8ba9\u524d\u9762\u7684\u5143\u7d20\u540e\u79fb\uff0c\u76f4\u5230\u627e\u5230\u5408\u9002\u7684\u4f4d\u7f6e\uff0c\u5c31\u628a \\(a_i\\) \u653e\u8fdb\u53bb\u3002 1 2 3 4 5 6 7 for ( int i = 2 ; i <= n ; ++ i ) { int key = a [ i ]; // \u6ce8\u610f\u8981\u63d0\u524d\u50a8\u5b58 a[i]\uff0c\u4e0d\u7136\u7b2c\u4e00\u6b21\u540e\u79fb a[i] = a[i - 1] \u5c31\u628a a[i] \u8986\u76d6\u6389\u4e86\u3002 int j = i - 1 ; while ( j > 0 && a [ j ] > key ) a [ j + 1 ] = a [ j ], -- j ; a [ j + 1 ] = key ; } \u6700\u4f18\u590d\u6742\u5ea6 \\(O(n)\\) \uff0c\u5c31\u662f\u5982\u679c\u5e8f\u5217\u5df2\u7ecf\u6392\u597d\u4e86\u5c31\u5b8c\u5168\u4e0d\u4f1a\u540e\u79fb\uff0c\u662f\u7a33\u5b9a\u7684\u6392\u5e8f\u3002 \u6700\u574f\u590d\u6742\u5ea6 \\(O(n^2)\\) \uff0c\u5982\u679c\u5e8f\u5217\u7ffb\u8f6c\u8fc7\u6765\uff0c\u603b\u5171\u8981\u8dd1\u7684\u8ddd\u79bb\u5c31\u662f \\(\\sum\\limits_{i = 1}^{n} (i - 1) = O(n^2)\\) \u3002 \u5e73\u5747\u590d\u6742\u5ea6\u662f \\(O(n^2)\\) \u3002 \u5192\u6ce1\u6392\u5e8f \u03c8(\uff40\u2207\u00b4)\u03c8 \u626b\u7279\u522b\u591a\u904d\uff0c\u6bcf\u6b21\u626b\u63cf\u90fd\u4ea4\u6362\u770b\u5230\u7684\u9006\u5e8f\u5bf9\u3002 \u7136\u540e\u53ef\u4ee5\u8bc1\u660e\uff0c\u626b\u5b8c\u7b2c \\(i\\) \u8f6e\u4e4b\u540e\uff0c\u540e \\(i\\) \u9879\u662f\u6700\u5927\u7684 \\(i\\) \u9879\u3002 \u8fd9\u4e2a\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\u5c31\u80fd\u8bc1\u660e\u3002 \u5c31\u662f\u4f60\u8003\u8651\u7b2c\u4e00\u8f6e\uff0c\u5047\u8bbe\u5728\u4f4d\u7f6e \\(x\\) \u627e\u5230\u4e86\u6700\u5927\u7684\u5143\u7d20\uff0c\u5b83\u5fc5\u7136\u4f1a\u88ab\u4e00\u76f4\u4ea4\u6362\u4ea4\u6362\u4ea4\u6362\uff0c\u7136\u540e\u4e00\u76f4\u4ea4\u6362\u5230\u6700\u540e\u3002 \u7b2c\u4e8c\u8f6e\u5fc5\u7136\u4f1a\u628a\u7b2c\u4e8c\u5927\u7684\u5143\u7d20\u4ea4\u6362\u4ea4\u6362\u5230 \\(n-1\\) \u3002 \u4ee5\u6b64\u7c7b\u63a8\u53ef\u4ee5\u8bc1\u660e\u5192\u6ce1\u6392\u5e8f\u7684\u6b63\u786e\u6027\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u597d\u6bd4\u6ce1\u6ce1\u5192\u4e0a\u53bb\u4e00\u6837\uff0c\u6240\u4ee5\u53eb\u5192\u6ce1\u6392\u5e8f\u3002 1 2 3 4 5 6 7 8 bool ff = true ; while ( ff ) { ff = false ; for ( int i = 1 ; i < n ; ++ i ) { if ( a [ i ] > a [ i + 1 ]) ff = true , swap ( a [ i ], a [ i + 1 ]); } } \u6700\u4f18\u590d\u6742\u5ea6\u5c31\u662f\u5df2\u7ecf\u6392\u5e8f\u8fc7\u7684\u60c5\u51b5\uff0c\u626b\u4e00\u904d\u5c31\u5b8c\u4e86\uff0c\u590d\u6742\u5ea6 \\(O(n)\\) \u3002 \u6700\u574f\u60c5\u51b5\uff0c\u5c31\u662f\u7ffb\u8f6c\u8fc7\u6765\uff0c\u8981\u4ea4\u6362 \\(\\dfrac{n(n - 1)}{2} = O(n^2)\\) \u6b21\u3002 \u5e73\u5747\u590d\u6742\u5ea6\u662f \\(O(n^2)\\) \u3002 \u663e\u7136\u662f\u7a33\u5b9a\u7684\uff0c\u56e0\u4e3a\u8003\u8651\u4e24\u4e2a\u76f8\u540c\u7684\u5143\u7d20 \\(a_x, a_y, x < y\\) \uff0c\u90a3\u4e48 \\(a_x\\) \u88ab\u4ea4\u6362\u5230 \\(y - 1\\) \u7684\u4f4d\u7f6e\u7684\u65f6\u5019\u5c31\u4e0d\u4f1a\u88ab\u4ea4\u6362\u5230\u540e\u9762\u4e86\uff08\u56e0\u4e3a\u5199\u7684 \\(a_i > a_{i + 1}\\) \u624d\u4ea4\u6362\uff09\uff0c\u90a3 \\(a_y\\) \u5fc5\u7136\u5148\u88ab\u6362\u5230\u540e\u9762\uff0c\u76f8\u5bf9\u987a\u5e8f\u6ca1\u6709\u6539\u53d8\u3002 \u5173\u4e8e\u5192\u6ce1\u6392\u5e8f\u6709\u4e00\u4e2a\u7ed3\u8bba\uff08\u6765\u81ea POJ2299 - Ultra-QuickSort\uff09 \u5c31\u662f\uff0c\u5982\u679c\u53ea\u5141\u8bb8\u8fdb\u884c\u6bd4\u8f83\u548c\u4ea4\u6362\u76f8\u90bb\u4e24\u9879\u7684\u64cd\u4f5c\uff08\u5c31\u662f\u5192\u6ce1\u6392\u5e8f\uff09\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u5e8f\u5217 \\(a\\) \uff0c\u8ba9\u4ed6\u6709\u5e8f\uff0c\u6700\u5c11\u9700\u8981\u7684\u64cd\u4f5c\u6b21\u6570\u5c31\u662f \\(a\\) \u7684\u9006\u5e8f\u5bf9\u4e2a\u6570\u3002 \u6240\u4ee5\u5192\u6ce1\u6392\u5e8f\u4f7f\u4e00\u4e2a\u5e8f\u5217\u6709\u5e8f\u7684\u4ea4\u6362\u6b21\u6570\u5e94\u5f53\u662f \\(a\\) \u7684\u9006\u5e8f\u5bf9\u4e2a\u6570 \u3002 \uff08\u56e0\u4e3a\u5192\u6ce1\u6bcf\u6267\u884c\u4e00\u6b21\u4ea4\u6362\u64cd\u4f5c\uff0c\u5c31\u76f8\u5f53\u4e8e\u6d88\u9664\u4e86\u4e00\u4e2a\u9006\u5e8f\u5bf9\uff0c\u5e76\u4e14\u4e4b\u540e\u4e0d\u4f1a\u518d\u8ba9\u8fd9\u4e2a\u9006\u5e8f\u5bf9\u51fa\u73b0\uff09 \u8ba1\u6570\u6392\u5e8f \u03c8(\uff40\u2207\u00b4)\u03c8 \u5f00\u4e00\u4e2a\u6876\uff0c\u7ef4\u62a4\u503c\u57df \\(|w|\\) \uff0c\uff08\u6ce8\u610f\u8fd9\u4e2a\u4e0d\u662f\u6876\u6392\u662f\u8ba1\u6570\uff09\u3002 \u7136\u540e \\(O(n)\\) \u626b\u4e00\u904d\u628a\u6240\u6709\u5143\u7d20\u6254\u8fdb\u6876\u91cc\u9762\u3002 \u7136\u540e\u4ece\u5c0f\u5230\u5927\u62ff\u51fa\u6765\u5c31\u884c\u4e86\uff0c\u663e\u7136\u662f\u7a33\u5b9a\u7684\uff0c\u56e0\u4e3a\u5148\u51fa\u73b0\u7684\u4f1a\u88ab\u5148\u653e\u8fdb\u6876\uff0c\u4f60\u53ef\u4ee5\u628a\u6876\u7406\u89e3\u4e3a\u4e00\u4e2a\u961f\u5217\u3002 \u4f46\u8fd9\u6837\u8fd8\u4e0d\u591f\u5feb\uff0c\u56e0\u4e3a\u503c\u57df\u91cc\u9762\u4e0d\u4e00\u5b9a\u90fd\u4f1a\u51fa\u73b0\u3002 \u6240\u4ee5\u7ed9\u6876\u505a\u4e00\u4e2a\u524d\u7f00\u548c\uff0c\u5012\u8fc7\u6765\u8ba1\u7b97\u4e00\u4e0b\u6392\u540d\u5c31\u884c\u4e86\u3002 1 2 3 4 5 6 for ( int i = 1 ; i <= n ; ++ i ) cnt [ a [ i ]] ++ ; for ( int i = 1 ; i <= w ; ++ i ) cnt [ i ] += cnt [ i - 1 ]; for ( int i = n ; i >= 1 ; -- i ) b [ cnt [ a [ i ]] -- ] = a [ i ]; \u590d\u6742\u5ea6\u7a33\u5b9a \\(O(n + w)\\) \u3002 \u5feb\u901f\u6392\u5e8f \u03c8(\uff40\u2207\u00b4)\u03c8 \u6bcf\u6b21\u628a\u5e8f\u5217\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5b50\u5e8f\u5217\u7684\u6570\u90fd\u5c0f\u4e8e\u540e\u4e00\u4e2a\u5b50\u5e8f\u5217\u7684\u6570\u3002 \u7136\u540e\u9012\u5f52\u5230\u6bcf\u4e2a\u5b50\u5e8f\u5217\u91cc\u9762\u5728\u641e\u3002 \u6700\u540e\u9012\u5f52\u5b8c\u4e86\u5c31\u76f4\u63a5\u6709\u5e8f\u4e86\uff0c\u4e00\u822c\u5b9e\u73b0\u7684\u65f6\u5019\u4f1a\u968f\u673a\u9009\u4e00\u4e2a\u5206\u754c \\(key\\) \uff0c\u5927\u4e8e \\(key\\) \u7684\u6254\u5230\u540e\u9762\uff0c\u5c0f\u4e8e\u7b49\u4e8e \\(key\\) \u7684\u6254\u5230\u524d\u9762\u3002 \u7136\u540e\u6709\u4e00\u79cd\u53eb\u4e09\u8def\u5feb\u6392\u7684\u4f18\u5316\uff0c\u5c31\u662f\u628a\u7b49\u4e8e\u7684\u5355\u72ec\u6254\u5230\u57fa\u51c6\u5206\u754c\u503c\u9644\u8fd1\uff0c\u8fd9\u6837\u591a\u4e2a\u76f8\u7b49\u7684\u5143\u7d20\u5c31\u4f1a\u805a\u96c6\u5728\u4e00\u8d77\uff0c\u51cf\u5c0f\u4e4b\u540e\u591a\u6b21\u5904\u7406\u7684\u5e38\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 void Qsort ( int a [], int len ) { if ( len <= 1 ) return ; int key = a [ 1 + rand () % len ]; // i\uff1a\u5f53\u524d\u64cd\u4f5c\u7684\u5143\u7d20 // j\uff1a\u7b2c\u4e00\u4e2a\u7b49\u4e8e key \u7684\u5143\u7d20 // k\uff1a\u7b2c\u4e00\u4e2a\u5927\u4e8e key \u7684\u5143\u7d20 int i = 1 , j = 1 , k = len + 1 ; // \u5b8c\u6210\u4e00\u8d9f\u4e09\u8def\u5feb\u6392\uff0c\u5c06\u5e8f\u5217\u5206\u4e3a\uff1a // \u5c0f\u4e8e pivot \u7684\u5143\u7d20\uff5c \u7b49\u4e8e pivot \u7684\u5143\u7d20 \uff5c \u5927\u4e8e pivot \u7684\u5143\u7d20 while ( i < k ) { if ( a [ i ] < key ) swap ( a [ i ++ ], a [ j ++ ]); else if ( a [ i ] > key ) swap ( a [ i ], a [ -- k ]); else ++ i ; } Qsort ( a , j - 1 ), Qsort ( a + k - 1 , len - k + 1 ); } \u660e\u663e\u4e0d\u7a33\u5b9a\uff0c\u539f\u59cb\u5feb\u6392\u6700\u574f \\(O(n^2)\\) \uff0c\u5e73\u5747\u6700\u4f18\u90fd\u662f \\(O(n \\log n)\\) \u3002 \u56e0\u4e3a\u6bcf\u6b21\u53d6 key \u7684\u65f6\u5019\uff0c\u5982\u679c\u6bcf\u6b21\u90fd\u80fd\u53d6\u5230\u4e2d\u4f4d\u6570\u4f5c\u4e3a\u5206\u754c\uff0c\u9012\u5f52\u5f0f\u662f \\(T(n) = 2T(n/2) + \\Theta(n)\\) \uff0c\u4e3b\u5b9a\u7406\u53ef\u4ee5\u5f97\u5230\u3002 \u5982\u679c\u6bcf\u6b21\u90fd\u53d6\u5230\u6700\u5927\u503c\uff0c\u9012\u5f52\u5f0f\u5c31\u662f \\(T(n) = T(n - 1) + \\Theta(n)\\) \uff08\u957f\u5ea6\u7b49\u4e8e\u4e00\u4e0d\u7528\u9012\u5f52\uff09\uff0c\u7d2f\u52a0\u53ef\u4ee5\u5f97\u5230\u3002 \u5f52\u5e76\u6392\u5e8f \u03c8(\uff40\u2207\u00b4)\u03c8 \u5f88\u6709\u610f\u601d\u7684\u4e00\u4e2a\u7b97\u6cd5\u3002 \u5c31\u662f\u628a\u5e8f\u5217\u5148\u4ece\u4e2d\u95f4\u5206\u5f00\uff0c\u7136\u540e\u9012\u5f52\u4e0b\u53bb\u5bf9\u4e24\u5757\u5757\u5185\u6392\u5e8f\uff0c \u9012\u5f52\u56de\u6765\uff0c\u5047\u8bbe\u6b64\u65f6\u5e8f\u5217\u5de6\u53f3\u4e24\u534a\u90fd\u5df2\u7ecf\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u597d\uff08\u5148\u4e0d\u7ba1\u5b83\u600e\u4e48\u6392\u7684\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u9012\u5f52\uff0c\u6700\u540e\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u65f6\u5019\u5c31\u662f\u6392\u5e8f\u597d\u7684\uff0c\u7136\u540e\u4e00\u5c42\u4e00\u5c42\u8fd4\u56de\u4e0a\u6765\u5408\u5e76\u7684\u65f6\u5019\u5c31\u6392\u597d\u5e8f\u4e86\uff09\u3002 \u7136\u540e\u76f4\u63a5\u4e0d\u65ad\u53d6\u4e24\u5757\u7684\u201c\u5934\u201d\u7684\u6700\u5c0f\u503c\uff0c\u6254\u8fdb\u4e00\u4e2a\u8f85\u52a9\u6570\u7ec4\u3002 \u6700\u540e\u8d4b\u503c\u4e00\u4e0b\u5c31\u884c\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 void MergeSort ( int l , int r ) { if ( l >= r ) return ; // length == 1 or < 1 int mid = ( l + r ) >> 1 ; MergeSort ( l , mid ), MergeSort ( mid + 1 , r ); for ( int i = l , j = mid + 1 , k = l ; k <= r ; ++ k ) { if (( j > r ) || ( i <= mid && a [ i ] <= a [ j ])) // \u6ce8\u610f\u7528 <= \u4fdd\u8bc1\u7a33\u5b9a\u6027 tmp [ k ] = a [ i ++ ]; else tmp [ k ] = a [ j ++ ]; } for ( int i = l ; i <= r ; ++ i ) a [ i ] = tmp [ i ]; } \u7a33\u5b9a\u7684 \\(O(n \\log n)\\) \u7684\u6392\u5e8f\u3002 \u7136\u540e\u8fd9\u4e2a\u662f\u53ef\u4ee5\u62ff\u6765\u505a\u9006\u5e8f\u5bf9\u7684\u3002 \u56e0\u4e3a\u9009\u540e\u4e00\u6bb5\u7684\u65f6\u5019\u5c31\u76f8\u5f53\u4e8e\u6d88\u9664\u4e86\u9006\u5e8f\u5bf9\uff0c\u4e2a\u6570\u662f\u524d\u4e00\u6bb5\u5f53\u524d\u6ca1\u6709\u52a0\u8fdb\u53bb\u7684\u6570\u7684\u4e2a\u6570\u3002 \u5c31\u662f mid - i + 1 \u4e2a\u3002 \u4ee3\u7801\u89c1\u4e0b\u9762\u9006\u5e8f\u5bf9\u677f\u5757\u3002 \u8fd8\u6709\u4e00\u79cd\u5229\u7528\u5b83\u7ebf\u6027\u627e\u7b2c \\(k\\) \u5927\u7684\u7b97\u6cd5\uff0c\u56e0\u4e3a\u4e0d\u662f\u7a33\u5b9a\u7684\uff0c\u6240\u4ee5\u627e\u4e0d\u5230\u6700\u524d\u7684\u4e00\u4e2a\u7b2c \\(k\\) \u5927\u3002 \u4f46\u662f Median of Median \u53ef\u4ee5\u6700\u574f \\(O(n)\\) \u505a\u7a33\u5b9a\u7684\u7b2c \\(k\\) \u5927\u3002 \u4e00\u4e9b\u7b80\u5355\u5e94\u7528 \u03c8(\uff40\u2207\u00b4)\u03c8 \u79bb\u6563\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 1 2 3 4 5 6 7 8 9 10 11 12 vector < int > v ; int main (){ for ( register int i = 1 ; i <= n ; ++ i ){ scanf ( \"%d\" , & a [ i ]); v . push_back ( a [ i ]); } sort ( v . begin (), v . end ()); v . erase ( unique ( v . begin (), v . end ()), v . end ()); for ( register int i = 1 ; i <= n ; ++ i ){ a [ i ] = lower_bound ( v . begin (), v . end (), a [ i ]) - v . begin () + 1 ; } } \u601d\u60f3\u5c31\u662f\u628a\u4e00\u4e9b\u7279\u522b\u5927\u7684\u6570\u6620\u5c04\u5230\u4e00\u4e2a\u6bd4\u8f83\u5c0f\u7684\u8303\u56f4\u4e4b\u5185\u3002 \u9700\u8981\u7684\u8bdd\u53ef\u4ee5\u53e6\u5916\u65b0\u5f00\u4e00\u4e2a\u6570\u7ec4\u5b58\u79bb\u6563\u4e4b\u540e\u7684\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // \u4e8c\u7ef4 vector < int > v ; int main (){ for ( register int i = 1 ; i <= n ; i ++ ){ scanf ( \"%d%d%d\" , & x [ i ], & y [ i ], & e [ i ]); v . push_back ( x [ i ]); v . push_back ( y [ i ]); } sort ( v . begin (), v . end ()); // \u6392\u5e8f v . erase ( unique ( v . begin (), v . end ()), v . end ()); // \u53bb\u91cd for ( register int i = 1 ; i <= n ; i ++ ){ x [ i ] = lower_bound ( v . begin (), v . end (), x [ i ]) - v . begin () + 1 ; y [ i ] = lower_bound ( v . begin (), v . end (), y [ i ]) - v . begin () + 1 ; } // \u53ea\u7528\u4e00\u4e2a vector \u4f1a\u7701\u7a7a\u95f4 } \u5bf9\u9876\u5806 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ef4\u62a4\u52a8\u6001\u4e2d\u4f4d\u6570\u95ee\u9898\u3002 \u5047\u8bbe\u6bcf\u4e2a\u65f6\u523b\u5e8f\u5217 \\(a\\) \u7684\u957f\u5ea6 \\(n\\) \u90fd\u662f\u5947\u6570\u3002 \u90a3\u4e48\u8ba9\u6392\u540d\u5728 \\(1 \\to \\lfloor m/2 \\rfloor\\) \u7684\u6254\u5230\u5927\u6839\u5806\uff0c\u5176\u4ed6\u7684\u6254\u5230\u5c0f\u6839\u5806\u3002 \u5982\u679c\u67d0\u4e2a\u5806\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u90a3\u4e48\u628a\u5b83\u7684\u5806\u9876\u6254\u5230\u53e6\u5916\u4e00\u4e2a\u5806\u53bb\u3002 \u7b54\u6848\u5c31\u662f\u5c0f\u6839\u5806\u7684\u5806\u9876\u3002 \u9006\u5e8f\u5bf9 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5b9a\u4e49\u9006\u5e8f\u5bf9\u4e3a\u5f62\u5982 (i, j)\uff0c\u4fdd\u8bc1 \\(i < j, a_i > a_j\\) \u7684\u70b9\u5bf9\u3002 \u6c42\u4e00\u4e2a\u5e8f\u5217\u7684\u9006\u5e8f\u5bf9\u4e2a\u6570\u3002 \u6700\u7b80\u5355\u7684\u505a\u6cd5\u5c31\u662f\u66b4\u529b \\(O(n^2)\\) \u3002 \\(\\log\\) \u505a\u6cd5\u53ef\u4ee5\u6811\u72b6\u6570\u7ec4\uff0c\u4e5f\u53ef\u4ee5\u5f52\u5e76\u6392\u5e8f\u3002 \u6811\u72b6\u6570\u7ec4\u505a\u6cd5\u53ef\u80fd\u66f4\u7b80\u5355\u4e00\u70b9\u3002 \u53ea\u9700\u8981\u79bb\u6563\u5316\uff0c\u7136\u540e\u52a8\u6001\u52a0\u5165\uff0c\u6bcf\u6b21\u52a0\u5165\u7684\u65f6\u5019\u67e5\u4e00\u67e5\u524d\u9762\u6bd4\u4ed6\u5927\u7684\u6570\u6709\u591a\u5c11\u4e2a\u5373\u53ef\u3002 \u5f52\u5e76\u6392\u5e8f\u7684\u8bdd\uff1a \u4ee3\u7801\u5b9e\u73b0\u4e2d\u7684 ans += mid - i + 1 \u5c31\u662f\u5728\u7edf\u8ba1\u9006\u5e8f\u5bf9\u4e2a\u6570\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u7b97\u6cd5\u628a\u9760\u540e\u7684\u6570\u653e\u5230\u524d\u9762\u4e86\uff08\u8f83\u5c0f\u7684\u6570\u653e\u5728\u524d\u9762\uff09\uff0c\u6240\u4ee5\u5728\u8fd9\u4e2a\u6570\u539f\u6765\u4f4d\u7f6e\u4e4b\u524d\u7684\u3001\u6bd4\u5b83\u5927\u7684\u6570\u90fd\u4f1a\u548c\u5b83\u5f62\u6210\u9006\u5e8f\u5bf9\uff0c\u800c\u8fd9\u4e2a\u4e2a\u6570\u5c31\u662f\u8fd8\u6ca1\u6709\u5408\u5e76\u8fdb\u53bb\u7684\u6570\u7684\u4e2a\u6570\uff0c\u5373 mid - i + 1 \u3002 1 2 3 4 5 6 7 8 9 10 void MergeSort ( int l , int r ) { if ( l >= r ) return ; MergeSort ( l , mid ), MergeSort ( mid + 1 , r ); for ( int i = l , j = mid + 1 , k = l ; k <= r ; ++ k ) { if (( j > r ) || ( i <= mid && a [ i ] <= a [ j ])) tmp [ k ] = a [ i ++ ]; else tmp [ k ] = a [ j ++ ], ans += ( mid - i + 1 ); } for ( int i = l ; i <= r ; ++ i ) a [ i ] = tmp [ i ]; }","title":"\u6392\u5e8f"},{"location":"algor/basic/sorting/#_1","text":"\u5c31\u662f\u8bf4\uff0c\u5047\u8bbe\u539f\u5e8f\u5217\u5f53\u4e2d\u6709\u4e24\u4e2a\u76f8\u540c\u7684\u5143\u7d20 \\(a_i, a_j\\) \u3002 \u5982\u679c\u8fd9\u4e2a\u6392\u5e8f\u7b97\u6cd5\u6ca1\u6709\u6539\u53d8 \\(a_i, a_j\\) \u7684\u76f8\u5bf9\u4f4d\u7f6e\u3002 \u90a3\u4e48\u8fd9\u4e2a\u6392\u5e8f\u7b97\u6cd5\u5c31\u662f\u7a33\u5b9a\u7684\u3002 \u57fa\u6570\u6392\u5e8f\u3001\u8ba1\u6570\u6392\u5e8f\u3001\u63d2\u5165\u6392\u5e8f\u3001\u5192\u6ce1\u6392\u5e8f\u3001\u5f52\u5e76\u6392\u5e8f\u662f\u7a33\u5b9a\u6392\u5e8f\u3002 \u9009\u62e9\u6392\u5e8f\u3001\u5806\u6392\u5e8f\u3001\u5feb\u901f\u6392\u5e8f\u4e0d\u662f\u7a33\u5b9a\u6392\u5e8f\u3002","title":"\u7a33\u5b9a\u6027"},{"location":"algor/basic/sorting/#_2","text":"\u5c31\u662f\u904d\u5386 \\(n\\) \u8f6e \\(1 \\to n\\) \uff0c\u7b2c \\(i\\) \u8f6e\u627e\u5230\u7b2c \\(i\\) \u5c0f\u7684\u6570\uff0c\u7136\u540e\u653e\u5230\u4f4d\u7f6e \\(i\\) \u4e0a\uff08\u5b9e\u73b0\u65f6\u628a\u8fd9\u4e2a\u6570\u548c \\(a_i\\) \u4ea4\u6362\uff09\u3002 \u5e73\u5747\uff0c\u6700\u574f\uff0c\u6700\u4f18\uff0c\u590d\u6742\u5ea6 \\(O(n^2)\\) \uff0c\u56e0\u4e3a\u6bcf\u6b21\u5faa\u73af\u6b21\u6570\u662f\u56fa\u5b9a\u7684\u3002 1 2 3 4 5 6 7 for ( int i = 1 ; i < n ; ++ i ) { int ith = i ; for ( int j = i + 1 ; j <= n ; ++ j ) { if ( a [ j ] < a [ ith ]) ith = j ; } swap ( a [ i ], a [ ith ]); }","title":"\u9009\u62e9\u6392\u5e8f"},{"location":"algor/basic/sorting/#_3","text":"\u7c7b\u4f3c\u6253\u724c\u7684\u65f6\u5019\u7684\u6392\u5e8f\u65b9\u6cd5\u3002 \u628a\u539f\u5e8f\u5217\u5206\u6210\u3010\u6ca1\u6709\u6392\u5e8f\u3011\u548c\u3010\u6392\u5e8f\u8fc7\u3011\u4e24\u90e8\u5206\u3002 \u6bcf\u6b21\u4ece\u3010\u6ca1\u6709\u6392\u5e8f\u3011\u7684\u91cc\u9762\u6293\u4e00\u5f20\uff0c\u6254\u5230\u3010\u6392\u5e8f\u8fc7\u3011\u7684\u4e00\u4e2a\u5408\u9002\u4f4d\u7f6e\uff08\u7b2c\u4e00\u4e2a\u5927\u4e8e\u5b83\u7684\u5143\u7d20\uff09\u524d\u9762\u3002 \u5177\u4f53\u5b9e\u73b0\u662f\uff0c\u4ece \\(2\\) \u5f00\u59cb\uff0c\u5047\u8bbe \\([1, i)\\) \u662f\u5df2\u7ecf\u6392\u5e8f\u8fc7\u7684\uff0c\u7136\u540e\u5bf9\u4e8e \\(a_i\\) \uff0c\u4e0d\u65ad\u8ba9\u524d\u9762\u7684\u5143\u7d20\u540e\u79fb\uff0c\u76f4\u5230\u627e\u5230\u5408\u9002\u7684\u4f4d\u7f6e\uff0c\u5c31\u628a \\(a_i\\) \u653e\u8fdb\u53bb\u3002 1 2 3 4 5 6 7 for ( int i = 2 ; i <= n ; ++ i ) { int key = a [ i ]; // \u6ce8\u610f\u8981\u63d0\u524d\u50a8\u5b58 a[i]\uff0c\u4e0d\u7136\u7b2c\u4e00\u6b21\u540e\u79fb a[i] = a[i - 1] \u5c31\u628a a[i] \u8986\u76d6\u6389\u4e86\u3002 int j = i - 1 ; while ( j > 0 && a [ j ] > key ) a [ j + 1 ] = a [ j ], -- j ; a [ j + 1 ] = key ; } \u6700\u4f18\u590d\u6742\u5ea6 \\(O(n)\\) \uff0c\u5c31\u662f\u5982\u679c\u5e8f\u5217\u5df2\u7ecf\u6392\u597d\u4e86\u5c31\u5b8c\u5168\u4e0d\u4f1a\u540e\u79fb\uff0c\u662f\u7a33\u5b9a\u7684\u6392\u5e8f\u3002 \u6700\u574f\u590d\u6742\u5ea6 \\(O(n^2)\\) \uff0c\u5982\u679c\u5e8f\u5217\u7ffb\u8f6c\u8fc7\u6765\uff0c\u603b\u5171\u8981\u8dd1\u7684\u8ddd\u79bb\u5c31\u662f \\(\\sum\\limits_{i = 1}^{n} (i - 1) = O(n^2)\\) \u3002 \u5e73\u5747\u590d\u6742\u5ea6\u662f \\(O(n^2)\\) \u3002","title":"\u63d2\u5165\u6392\u5e8f"},{"location":"algor/basic/sorting/#_4","text":"\u626b\u7279\u522b\u591a\u904d\uff0c\u6bcf\u6b21\u626b\u63cf\u90fd\u4ea4\u6362\u770b\u5230\u7684\u9006\u5e8f\u5bf9\u3002 \u7136\u540e\u53ef\u4ee5\u8bc1\u660e\uff0c\u626b\u5b8c\u7b2c \\(i\\) \u8f6e\u4e4b\u540e\uff0c\u540e \\(i\\) \u9879\u662f\u6700\u5927\u7684 \\(i\\) \u9879\u3002 \u8fd9\u4e2a\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\u5c31\u80fd\u8bc1\u660e\u3002 \u5c31\u662f\u4f60\u8003\u8651\u7b2c\u4e00\u8f6e\uff0c\u5047\u8bbe\u5728\u4f4d\u7f6e \\(x\\) \u627e\u5230\u4e86\u6700\u5927\u7684\u5143\u7d20\uff0c\u5b83\u5fc5\u7136\u4f1a\u88ab\u4e00\u76f4\u4ea4\u6362\u4ea4\u6362\u4ea4\u6362\uff0c\u7136\u540e\u4e00\u76f4\u4ea4\u6362\u5230\u6700\u540e\u3002 \u7b2c\u4e8c\u8f6e\u5fc5\u7136\u4f1a\u628a\u7b2c\u4e8c\u5927\u7684\u5143\u7d20\u4ea4\u6362\u4ea4\u6362\u5230 \\(n-1\\) \u3002 \u4ee5\u6b64\u7c7b\u63a8\u53ef\u4ee5\u8bc1\u660e\u5192\u6ce1\u6392\u5e8f\u7684\u6b63\u786e\u6027\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u597d\u6bd4\u6ce1\u6ce1\u5192\u4e0a\u53bb\u4e00\u6837\uff0c\u6240\u4ee5\u53eb\u5192\u6ce1\u6392\u5e8f\u3002 1 2 3 4 5 6 7 8 bool ff = true ; while ( ff ) { ff = false ; for ( int i = 1 ; i < n ; ++ i ) { if ( a [ i ] > a [ i + 1 ]) ff = true , swap ( a [ i ], a [ i + 1 ]); } } \u6700\u4f18\u590d\u6742\u5ea6\u5c31\u662f\u5df2\u7ecf\u6392\u5e8f\u8fc7\u7684\u60c5\u51b5\uff0c\u626b\u4e00\u904d\u5c31\u5b8c\u4e86\uff0c\u590d\u6742\u5ea6 \\(O(n)\\) \u3002 \u6700\u574f\u60c5\u51b5\uff0c\u5c31\u662f\u7ffb\u8f6c\u8fc7\u6765\uff0c\u8981\u4ea4\u6362 \\(\\dfrac{n(n - 1)}{2} = O(n^2)\\) \u6b21\u3002 \u5e73\u5747\u590d\u6742\u5ea6\u662f \\(O(n^2)\\) \u3002 \u663e\u7136\u662f\u7a33\u5b9a\u7684\uff0c\u56e0\u4e3a\u8003\u8651\u4e24\u4e2a\u76f8\u540c\u7684\u5143\u7d20 \\(a_x, a_y, x < y\\) \uff0c\u90a3\u4e48 \\(a_x\\) \u88ab\u4ea4\u6362\u5230 \\(y - 1\\) \u7684\u4f4d\u7f6e\u7684\u65f6\u5019\u5c31\u4e0d\u4f1a\u88ab\u4ea4\u6362\u5230\u540e\u9762\u4e86\uff08\u56e0\u4e3a\u5199\u7684 \\(a_i > a_{i + 1}\\) \u624d\u4ea4\u6362\uff09\uff0c\u90a3 \\(a_y\\) \u5fc5\u7136\u5148\u88ab\u6362\u5230\u540e\u9762\uff0c\u76f8\u5bf9\u987a\u5e8f\u6ca1\u6709\u6539\u53d8\u3002 \u5173\u4e8e\u5192\u6ce1\u6392\u5e8f\u6709\u4e00\u4e2a\u7ed3\u8bba\uff08\u6765\u81ea POJ2299 - Ultra-QuickSort\uff09 \u5c31\u662f\uff0c\u5982\u679c\u53ea\u5141\u8bb8\u8fdb\u884c\u6bd4\u8f83\u548c\u4ea4\u6362\u76f8\u90bb\u4e24\u9879\u7684\u64cd\u4f5c\uff08\u5c31\u662f\u5192\u6ce1\u6392\u5e8f\uff09\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u5e8f\u5217 \\(a\\) \uff0c\u8ba9\u4ed6\u6709\u5e8f\uff0c\u6700\u5c11\u9700\u8981\u7684\u64cd\u4f5c\u6b21\u6570\u5c31\u662f \\(a\\) \u7684\u9006\u5e8f\u5bf9\u4e2a\u6570\u3002 \u6240\u4ee5\u5192\u6ce1\u6392\u5e8f\u4f7f\u4e00\u4e2a\u5e8f\u5217\u6709\u5e8f\u7684\u4ea4\u6362\u6b21\u6570\u5e94\u5f53\u662f \\(a\\) \u7684\u9006\u5e8f\u5bf9\u4e2a\u6570 \u3002 \uff08\u56e0\u4e3a\u5192\u6ce1\u6bcf\u6267\u884c\u4e00\u6b21\u4ea4\u6362\u64cd\u4f5c\uff0c\u5c31\u76f8\u5f53\u4e8e\u6d88\u9664\u4e86\u4e00\u4e2a\u9006\u5e8f\u5bf9\uff0c\u5e76\u4e14\u4e4b\u540e\u4e0d\u4f1a\u518d\u8ba9\u8fd9\u4e2a\u9006\u5e8f\u5bf9\u51fa\u73b0\uff09","title":"\u5192\u6ce1\u6392\u5e8f"},{"location":"algor/basic/sorting/#_5","text":"\u5f00\u4e00\u4e2a\u6876\uff0c\u7ef4\u62a4\u503c\u57df \\(|w|\\) \uff0c\uff08\u6ce8\u610f\u8fd9\u4e2a\u4e0d\u662f\u6876\u6392\u662f\u8ba1\u6570\uff09\u3002 \u7136\u540e \\(O(n)\\) \u626b\u4e00\u904d\u628a\u6240\u6709\u5143\u7d20\u6254\u8fdb\u6876\u91cc\u9762\u3002 \u7136\u540e\u4ece\u5c0f\u5230\u5927\u62ff\u51fa\u6765\u5c31\u884c\u4e86\uff0c\u663e\u7136\u662f\u7a33\u5b9a\u7684\uff0c\u56e0\u4e3a\u5148\u51fa\u73b0\u7684\u4f1a\u88ab\u5148\u653e\u8fdb\u6876\uff0c\u4f60\u53ef\u4ee5\u628a\u6876\u7406\u89e3\u4e3a\u4e00\u4e2a\u961f\u5217\u3002 \u4f46\u8fd9\u6837\u8fd8\u4e0d\u591f\u5feb\uff0c\u56e0\u4e3a\u503c\u57df\u91cc\u9762\u4e0d\u4e00\u5b9a\u90fd\u4f1a\u51fa\u73b0\u3002 \u6240\u4ee5\u7ed9\u6876\u505a\u4e00\u4e2a\u524d\u7f00\u548c\uff0c\u5012\u8fc7\u6765\u8ba1\u7b97\u4e00\u4e0b\u6392\u540d\u5c31\u884c\u4e86\u3002 1 2 3 4 5 6 for ( int i = 1 ; i <= n ; ++ i ) cnt [ a [ i ]] ++ ; for ( int i = 1 ; i <= w ; ++ i ) cnt [ i ] += cnt [ i - 1 ]; for ( int i = n ; i >= 1 ; -- i ) b [ cnt [ a [ i ]] -- ] = a [ i ]; \u590d\u6742\u5ea6\u7a33\u5b9a \\(O(n + w)\\) \u3002","title":"\u8ba1\u6570\u6392\u5e8f"},{"location":"algor/basic/sorting/#_6","text":"\u6bcf\u6b21\u628a\u5e8f\u5217\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5b50\u5e8f\u5217\u7684\u6570\u90fd\u5c0f\u4e8e\u540e\u4e00\u4e2a\u5b50\u5e8f\u5217\u7684\u6570\u3002 \u7136\u540e\u9012\u5f52\u5230\u6bcf\u4e2a\u5b50\u5e8f\u5217\u91cc\u9762\u5728\u641e\u3002 \u6700\u540e\u9012\u5f52\u5b8c\u4e86\u5c31\u76f4\u63a5\u6709\u5e8f\u4e86\uff0c\u4e00\u822c\u5b9e\u73b0\u7684\u65f6\u5019\u4f1a\u968f\u673a\u9009\u4e00\u4e2a\u5206\u754c \\(key\\) \uff0c\u5927\u4e8e \\(key\\) \u7684\u6254\u5230\u540e\u9762\uff0c\u5c0f\u4e8e\u7b49\u4e8e \\(key\\) \u7684\u6254\u5230\u524d\u9762\u3002 \u7136\u540e\u6709\u4e00\u79cd\u53eb\u4e09\u8def\u5feb\u6392\u7684\u4f18\u5316\uff0c\u5c31\u662f\u628a\u7b49\u4e8e\u7684\u5355\u72ec\u6254\u5230\u57fa\u51c6\u5206\u754c\u503c\u9644\u8fd1\uff0c\u8fd9\u6837\u591a\u4e2a\u76f8\u7b49\u7684\u5143\u7d20\u5c31\u4f1a\u805a\u96c6\u5728\u4e00\u8d77\uff0c\u51cf\u5c0f\u4e4b\u540e\u591a\u6b21\u5904\u7406\u7684\u5e38\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 void Qsort ( int a [], int len ) { if ( len <= 1 ) return ; int key = a [ 1 + rand () % len ]; // i\uff1a\u5f53\u524d\u64cd\u4f5c\u7684\u5143\u7d20 // j\uff1a\u7b2c\u4e00\u4e2a\u7b49\u4e8e key \u7684\u5143\u7d20 // k\uff1a\u7b2c\u4e00\u4e2a\u5927\u4e8e key \u7684\u5143\u7d20 int i = 1 , j = 1 , k = len + 1 ; // \u5b8c\u6210\u4e00\u8d9f\u4e09\u8def\u5feb\u6392\uff0c\u5c06\u5e8f\u5217\u5206\u4e3a\uff1a // \u5c0f\u4e8e pivot \u7684\u5143\u7d20\uff5c \u7b49\u4e8e pivot \u7684\u5143\u7d20 \uff5c \u5927\u4e8e pivot \u7684\u5143\u7d20 while ( i < k ) { if ( a [ i ] < key ) swap ( a [ i ++ ], a [ j ++ ]); else if ( a [ i ] > key ) swap ( a [ i ], a [ -- k ]); else ++ i ; } Qsort ( a , j - 1 ), Qsort ( a + k - 1 , len - k + 1 ); } \u660e\u663e\u4e0d\u7a33\u5b9a\uff0c\u539f\u59cb\u5feb\u6392\u6700\u574f \\(O(n^2)\\) \uff0c\u5e73\u5747\u6700\u4f18\u90fd\u662f \\(O(n \\log n)\\) \u3002 \u56e0\u4e3a\u6bcf\u6b21\u53d6 key \u7684\u65f6\u5019\uff0c\u5982\u679c\u6bcf\u6b21\u90fd\u80fd\u53d6\u5230\u4e2d\u4f4d\u6570\u4f5c\u4e3a\u5206\u754c\uff0c\u9012\u5f52\u5f0f\u662f \\(T(n) = 2T(n/2) + \\Theta(n)\\) \uff0c\u4e3b\u5b9a\u7406\u53ef\u4ee5\u5f97\u5230\u3002 \u5982\u679c\u6bcf\u6b21\u90fd\u53d6\u5230\u6700\u5927\u503c\uff0c\u9012\u5f52\u5f0f\u5c31\u662f \\(T(n) = T(n - 1) + \\Theta(n)\\) \uff08\u957f\u5ea6\u7b49\u4e8e\u4e00\u4e0d\u7528\u9012\u5f52\uff09\uff0c\u7d2f\u52a0\u53ef\u4ee5\u5f97\u5230\u3002","title":"\u5feb\u901f\u6392\u5e8f"},{"location":"algor/basic/sorting/#_7","text":"\u5f88\u6709\u610f\u601d\u7684\u4e00\u4e2a\u7b97\u6cd5\u3002 \u5c31\u662f\u628a\u5e8f\u5217\u5148\u4ece\u4e2d\u95f4\u5206\u5f00\uff0c\u7136\u540e\u9012\u5f52\u4e0b\u53bb\u5bf9\u4e24\u5757\u5757\u5185\u6392\u5e8f\uff0c \u9012\u5f52\u56de\u6765\uff0c\u5047\u8bbe\u6b64\u65f6\u5e8f\u5217\u5de6\u53f3\u4e24\u534a\u90fd\u5df2\u7ecf\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u597d\uff08\u5148\u4e0d\u7ba1\u5b83\u600e\u4e48\u6392\u7684\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u9012\u5f52\uff0c\u6700\u540e\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u65f6\u5019\u5c31\u662f\u6392\u5e8f\u597d\u7684\uff0c\u7136\u540e\u4e00\u5c42\u4e00\u5c42\u8fd4\u56de\u4e0a\u6765\u5408\u5e76\u7684\u65f6\u5019\u5c31\u6392\u597d\u5e8f\u4e86\uff09\u3002 \u7136\u540e\u76f4\u63a5\u4e0d\u65ad\u53d6\u4e24\u5757\u7684\u201c\u5934\u201d\u7684\u6700\u5c0f\u503c\uff0c\u6254\u8fdb\u4e00\u4e2a\u8f85\u52a9\u6570\u7ec4\u3002 \u6700\u540e\u8d4b\u503c\u4e00\u4e0b\u5c31\u884c\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 void MergeSort ( int l , int r ) { if ( l >= r ) return ; // length == 1 or < 1 int mid = ( l + r ) >> 1 ; MergeSort ( l , mid ), MergeSort ( mid + 1 , r ); for ( int i = l , j = mid + 1 , k = l ; k <= r ; ++ k ) { if (( j > r ) || ( i <= mid && a [ i ] <= a [ j ])) // \u6ce8\u610f\u7528 <= \u4fdd\u8bc1\u7a33\u5b9a\u6027 tmp [ k ] = a [ i ++ ]; else tmp [ k ] = a [ j ++ ]; } for ( int i = l ; i <= r ; ++ i ) a [ i ] = tmp [ i ]; } \u7a33\u5b9a\u7684 \\(O(n \\log n)\\) \u7684\u6392\u5e8f\u3002 \u7136\u540e\u8fd9\u4e2a\u662f\u53ef\u4ee5\u62ff\u6765\u505a\u9006\u5e8f\u5bf9\u7684\u3002 \u56e0\u4e3a\u9009\u540e\u4e00\u6bb5\u7684\u65f6\u5019\u5c31\u76f8\u5f53\u4e8e\u6d88\u9664\u4e86\u9006\u5e8f\u5bf9\uff0c\u4e2a\u6570\u662f\u524d\u4e00\u6bb5\u5f53\u524d\u6ca1\u6709\u52a0\u8fdb\u53bb\u7684\u6570\u7684\u4e2a\u6570\u3002 \u5c31\u662f mid - i + 1 \u4e2a\u3002 \u4ee3\u7801\u89c1\u4e0b\u9762\u9006\u5e8f\u5bf9\u677f\u5757\u3002 \u8fd8\u6709\u4e00\u79cd\u5229\u7528\u5b83\u7ebf\u6027\u627e\u7b2c \\(k\\) \u5927\u7684\u7b97\u6cd5\uff0c\u56e0\u4e3a\u4e0d\u662f\u7a33\u5b9a\u7684\uff0c\u6240\u4ee5\u627e\u4e0d\u5230\u6700\u524d\u7684\u4e00\u4e2a\u7b2c \\(k\\) \u5927\u3002 \u4f46\u662f Median of Median \u53ef\u4ee5\u6700\u574f \\(O(n)\\) \u505a\u7a33\u5b9a\u7684\u7b2c \\(k\\) \u5927\u3002","title":"\u5f52\u5e76\u6392\u5e8f"},{"location":"algor/basic/sorting/#_8","text":"","title":"\u4e00\u4e9b\u7b80\u5355\u5e94\u7528"},{"location":"algor/basic/sorting/#_9","text":"1 2 3 4 5 6 7 8 9 10 11 12 vector < int > v ; int main (){ for ( register int i = 1 ; i <= n ; ++ i ){ scanf ( \"%d\" , & a [ i ]); v . push_back ( a [ i ]); } sort ( v . begin (), v . end ()); v . erase ( unique ( v . begin (), v . end ()), v . end ()); for ( register int i = 1 ; i <= n ; ++ i ){ a [ i ] = lower_bound ( v . begin (), v . end (), a [ i ]) - v . begin () + 1 ; } } \u601d\u60f3\u5c31\u662f\u628a\u4e00\u4e9b\u7279\u522b\u5927\u7684\u6570\u6620\u5c04\u5230\u4e00\u4e2a\u6bd4\u8f83\u5c0f\u7684\u8303\u56f4\u4e4b\u5185\u3002 \u9700\u8981\u7684\u8bdd\u53ef\u4ee5\u53e6\u5916\u65b0\u5f00\u4e00\u4e2a\u6570\u7ec4\u5b58\u79bb\u6563\u4e4b\u540e\u7684\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // \u4e8c\u7ef4 vector < int > v ; int main (){ for ( register int i = 1 ; i <= n ; i ++ ){ scanf ( \"%d%d%d\" , & x [ i ], & y [ i ], & e [ i ]); v . push_back ( x [ i ]); v . push_back ( y [ i ]); } sort ( v . begin (), v . end ()); // \u6392\u5e8f v . erase ( unique ( v . begin (), v . end ()), v . end ()); // \u53bb\u91cd for ( register int i = 1 ; i <= n ; i ++ ){ x [ i ] = lower_bound ( v . begin (), v . end (), x [ i ]) - v . begin () + 1 ; y [ i ] = lower_bound ( v . begin (), v . end (), y [ i ]) - v . begin () + 1 ; } // \u53ea\u7528\u4e00\u4e2a vector \u4f1a\u7701\u7a7a\u95f4 }","title":"\u79bb\u6563\u5316"},{"location":"algor/basic/sorting/#_10","text":"\u7ef4\u62a4\u52a8\u6001\u4e2d\u4f4d\u6570\u95ee\u9898\u3002 \u5047\u8bbe\u6bcf\u4e2a\u65f6\u523b\u5e8f\u5217 \\(a\\) \u7684\u957f\u5ea6 \\(n\\) \u90fd\u662f\u5947\u6570\u3002 \u90a3\u4e48\u8ba9\u6392\u540d\u5728 \\(1 \\to \\lfloor m/2 \\rfloor\\) \u7684\u6254\u5230\u5927\u6839\u5806\uff0c\u5176\u4ed6\u7684\u6254\u5230\u5c0f\u6839\u5806\u3002 \u5982\u679c\u67d0\u4e2a\u5806\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u90a3\u4e48\u628a\u5b83\u7684\u5806\u9876\u6254\u5230\u53e6\u5916\u4e00\u4e2a\u5806\u53bb\u3002 \u7b54\u6848\u5c31\u662f\u5c0f\u6839\u5806\u7684\u5806\u9876\u3002","title":"\u5bf9\u9876\u5806"},{"location":"algor/basic/sorting/#_11","text":"\u5b9a\u4e49\u9006\u5e8f\u5bf9\u4e3a\u5f62\u5982 (i, j)\uff0c\u4fdd\u8bc1 \\(i < j, a_i > a_j\\) \u7684\u70b9\u5bf9\u3002 \u6c42\u4e00\u4e2a\u5e8f\u5217\u7684\u9006\u5e8f\u5bf9\u4e2a\u6570\u3002 \u6700\u7b80\u5355\u7684\u505a\u6cd5\u5c31\u662f\u66b4\u529b \\(O(n^2)\\) \u3002 \\(\\log\\) \u505a\u6cd5\u53ef\u4ee5\u6811\u72b6\u6570\u7ec4\uff0c\u4e5f\u53ef\u4ee5\u5f52\u5e76\u6392\u5e8f\u3002 \u6811\u72b6\u6570\u7ec4\u505a\u6cd5\u53ef\u80fd\u66f4\u7b80\u5355\u4e00\u70b9\u3002 \u53ea\u9700\u8981\u79bb\u6563\u5316\uff0c\u7136\u540e\u52a8\u6001\u52a0\u5165\uff0c\u6bcf\u6b21\u52a0\u5165\u7684\u65f6\u5019\u67e5\u4e00\u67e5\u524d\u9762\u6bd4\u4ed6\u5927\u7684\u6570\u6709\u591a\u5c11\u4e2a\u5373\u53ef\u3002 \u5f52\u5e76\u6392\u5e8f\u7684\u8bdd\uff1a \u4ee3\u7801\u5b9e\u73b0\u4e2d\u7684 ans += mid - i + 1 \u5c31\u662f\u5728\u7edf\u8ba1\u9006\u5e8f\u5bf9\u4e2a\u6570\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u7b97\u6cd5\u628a\u9760\u540e\u7684\u6570\u653e\u5230\u524d\u9762\u4e86\uff08\u8f83\u5c0f\u7684\u6570\u653e\u5728\u524d\u9762\uff09\uff0c\u6240\u4ee5\u5728\u8fd9\u4e2a\u6570\u539f\u6765\u4f4d\u7f6e\u4e4b\u524d\u7684\u3001\u6bd4\u5b83\u5927\u7684\u6570\u90fd\u4f1a\u548c\u5b83\u5f62\u6210\u9006\u5e8f\u5bf9\uff0c\u800c\u8fd9\u4e2a\u4e2a\u6570\u5c31\u662f\u8fd8\u6ca1\u6709\u5408\u5e76\u8fdb\u53bb\u7684\u6570\u7684\u4e2a\u6570\uff0c\u5373 mid - i + 1 \u3002 1 2 3 4 5 6 7 8 9 10 void MergeSort ( int l , int r ) { if ( l >= r ) return ; MergeSort ( l , mid ), MergeSort ( mid + 1 , r ); for ( int i = l , j = mid + 1 , k = l ; k <= r ; ++ k ) { if (( j > r ) || ( i <= mid && a [ i ] <= a [ j ])) tmp [ k ] = a [ i ++ ]; else tmp [ k ] = a [ j ++ ], ans += ( mid - i + 1 ); } for ( int i = l ; i <= r ; ++ i ) a [ i ] = tmp [ i ]; }","title":"\u9006\u5e8f\u5bf9"},{"location":"algor/basic/time-complexity/","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790 \u03c8(\uff40\u2207\u00b4)\u03c8 \u57fa\u672c\u64cd\u4f5c\u6570 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8ba1\u7b97\u673a\u6267\u884c\u7684\u4e00\u6b21\u8d4b\u503c\uff0c\u4e00\u6b21\u8fd0\u7b97\uff0c\u4e00\u6b21\u5bf9\u5185\u5b58\u7684\u8bbf\u95ee\u90fd\u53eb\u505a\u4e00\u6b21\u57fa\u672c\u64cd\u4f5c\u3002 \u4e00\u822c\u90fd\u4f1a\u7528\u4e00\u4e2a\u7b97\u6cd5\u5728\u67d0\u4e2a\u6570\u636e\u89c4\u6a21\u4e0b\u7684\u57fa\u672c\u64cd\u4f5c\u6570\u8fdb\u884c\u8ba1\u6570\u4ee5\u63cf\u8ff0\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e00\u822c\u6765\u8bf4\uff0c\u8861\u91cf\u4e00\u4e2a\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u90fd\u9700\u8981\u5728\u6570\u636e\u89c4\u6a21\u4e0b\u770b\u4ed6\u7684\u8fd0\u884c\u65f6\u95f4\u589e\u957f\u8d8b\u52bf\u3002 \u8bf4\u767d\u4e86\uff0c\u5c31\u662f\u7528\u4e00\u4e2a\u51fd\u6570 \\(f\\) \uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7b97\u6cd5\u5efa\u7acb\u8d77\u4ece\u6570\u636e\u89c4\u6a21\u5230\u8fd0\u884c\u65f6\u95f4\u7684\u6620\u5c04\u3002 \u800c\u8fd0\u884c\u65f6\u95f4\u4e00\u822c\u90fd\u4f7f\u7528\u57fa\u672c\u64cd\u4f5c\u7684\u6570\u91cf\u6765\u63cf\u8ff0\uff0c\u518d\u6839\u636e\u8ba1\u7b97\u673a\u5b9e\u9645\u7684\u786c\u4ef6\u914d\u7f6e\uff08\u5355\u4f4d\u65f6\u95f4\u80fd\u8fdb\u884c\u591a\u5c11\u6b21\u57fa\u672c\u64cd\u4f5c\uff09\u6765\u770b\u5728\u8ba1\u7b97\u673a\u4e0a\u5b9e\u9645\u7684\u8fd0\u884c\u65f6\u95f4\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3b\u8981\u5206\u56db\u79cd\uff1a \u6700\u574f\u590d\u6742\u5ea6\uff0c\u63cf\u8ff0\u7b97\u6cd5\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u8fd0\u884c\u6548\u7387\uff0c\u76f4\u63a5\u8bf4\u65f6\u95f4\u590d\u6742\u5ea6\u4e00\u822c\u90fd\u6307\u6700\u574f\u590d\u6742\u5ea6\u3002 \u6700\u4f18\u590d\u6742\u5ea6\uff0c\u63cf\u8ff0\u7b97\u6cd5\u6700\u597d\u60c5\u51b5\u4e0b\u7684\u8fd0\u884c\u6548\u7387\uff0c\u4e0d\u5e38\u7528\u3002 \u5e73\u5747\u590d\u6742\u5ea6\uff08\u671f\u671b\u590d\u6742\u5ea6\uff09\uff0c\u5f53\u8f93\u5165\u6570\u636e\u89c4\u6a21\u968f\u673a\u7684\u65f6\u5019\u7684\u590d\u6742\u5ea6\uff0c\u5c31\u662f\u5404\u4e2a\u6570\u636e\u89c4\u6a21\u4e0b\u590d\u6742\u5ea6\u7684\u5e73\u5747\u3002 \u5747\u644a\u590d\u6742\u5ea6\uff0c\u591a\u6b21\u64cd\u4f5c\u7684\u603b\u590d\u6742\u5ea6\u9664\u4ee5\u64cd\u4f5c\u6b21\u6570\uff0c\u5c31\u662f\u5355\u6b21\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\uff0c\uff08\u6ce8\u610f\u548c\u5e73\u5747\u590d\u6742\u5ea6\u505a\u533a\u5206\uff09 \u6e10\u8fdb\u8bb0\u53f7 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6e10\u8fdb\u7b26\u53f7\u662f\u51fd\u6570\u7684\u9636\u7684\u89c4\u8303\u63cf\u8ff0\u3002\u7b80\u5355\u6765\u8bf4\uff0c\u6e10\u8fdb\u7b26\u53f7\u5ffd\u7565\u4e86\u4e00\u4e2a\u51fd\u6570\u4e2d\u589e\u957f\u8f83\u6162\u7684\u90e8\u5206\u4ee5\u53ca\u5404\u9879\u7684\u7cfb\u6570\uff08\u5728\u65f6\u95f4\u590d\u6742\u5ea6\u76f8\u5173\u5206\u6790\u4e2d\uff0c\u7cfb\u6570\u4e00\u822c\u88ab\u79f0\u4f5c\u201c\u5e38\u6570\u201d\uff09\uff0c\u800c\u4fdd\u7559\u4e86\u53ef\u4ee5\u7528\u6765\u8868\u660e\u8be5\u51fd\u6570\u589e\u957f\u8d8b\u52bf\u7684\u91cd\u8981\u90e8\u5206\u3002 \u6240\u4ee5\u8bf4\u5728\u8ba1\u7b97\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u65f6\u5019\uff08\u5728\u6e10\u8fdb\u610f\u4e49\u4e0a\uff09\u4e00\u822c\u90fd\u662f\u76f4\u63a5\u5ffd\u7565\u6389\u63cf\u8ff0\u57fa\u672c\u64cd\u4f5c\u6570\u7684\u591a\u9879\u5f0f\u7684\u5e38\u6570\u9879\u8fd8\u6709\u4e00\u4e9b\u4f4e\u6b21\u9879\u5bf9\u4e8e\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u5f71\u54cd\u7684\u3002 \u5982\u679c\u4f60\u60f3\u8981\u5361\u5e38\uff0c\u4e0d\u5ffd\u7565\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u4e0d\u8fc7\u8fd9\u5c31\u4e0d\u662f\u4e25\u8c28\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u8bb0\u6cd5\u4e86\u3002 \\(\\Theta\\) \uff1a\u5bf9\u4e8e\u4e24\u4e2a\u51fd\u6570 \\(f(n), g(n)\\) \uff0c\u5982\u679c\u5b58\u5728 \\(c_1,c_2,n_0 > 0\\) \uff0c\u4f7f\u5f97 \\(\\forall n\\ge n_0, 0 \\le c_1 \\cdot g(n) \\le f(n) \\le c_2 \\cdot g(n)\\) \uff0c\u5219\u8bb0\u4e3a \\(f(n) = \\Theta(g(n))\\) \uff0c\u7528\u4e8e\u63cf\u8ff0\u7b97\u6cd5\u7684\u4e0a\u4e0b\u754c\u3002 \\(O\\) \uff1a\u5bf9\u4e8e\u4e24\u4e2a\u51fd\u6570 \\(f(n), g(n)\\) \uff0c\u5982\u679c\u5b58\u5728 \\(c, n_0 > 0\\) \uff0c\u4f7f\u5f97 \\(\\forall n\\ge n_0,0 \\le f(n) \\le c \\cdot g(n)\\) \uff0c\u5219\u8bb0\u4e3a \\(f(n) = O(g(n))\\) \uff0c\u7528\u4e8e\u63cf\u8ff0\u7b97\u6cd5\u7684\u4e0a\u754c\uff0c\u5927\u90e8\u5206\u65f6\u5019\u90fd\u7528\u8fd9\u4e2a\u63cf\u8ff0\uff0c\u4e0d\u8fc7\u7b97\u6cd5\u4f7f\u7528\u7684\u65f6\u5019\u7684\u6700\u574f\u590d\u6742\u5ea6\u4e0d\u662f\u5927 \\(O\\) \u8bb0\u53f7\uff0c\u7528 \\(\\Theta\\) \u8868\u793a\u6700\u574f\u590d\u6742\u5ea6\u662f\u5b8c\u5168\u53ef\u4ee5\u7684\uff0c\u53ea\u4e0d\u8fc7\u5927\u90e8\u5206\u65f6\u5019\u90fd\u53ea\u6bd4\u8f83\u65b9\u4fbf\u8bc1\u660e\u51fa\u4e0a\u754c\uff0c\u6240\u4ee5\u7528\u5927 \\(O\\) \u7528\u7684\u591a\uff0c\u5c31\u662f\u8bf4\uff0c\u5728\u4e00\u5b9a\u60c5\u51b5\u4e0b \\(O\\) \u53ef\u4ee5\u8868\u793a\u6700\u574f\u590d\u6742\u5ea6\u3002 \\(o\\) \uff1a\u5c31\u662f \\(O\\) \u53bb\u6389\u7b49\u53f7\u53d8\u6210 \\(<\\) \u3002 \\(\\Omega\\) \uff1a \\(\\ge\\) \u3002 \\(\\omega\\) \uff1a \\(>\\) \u3002 \u4e00\u4e9b\u6027\u8d28\uff1a \\(f1(n) + f2(n) = O(\\max(f1(n), f2(n)))\\) \uff08\u4e24\u4e2a\u51fd\u6570\u4e4b\u548c\u7684\u4e0a\u754c\u662f\u4ed6\u4eec\u5f53\u4e2d\u5728 \u6e10\u8fdb\u610f\u4e49\u4e0a \u8f83\u5927\u7684\u51fd\u6570\uff09\u3002 \\(f1(n)\\cdot f2(n) = O(f1(n) \\times f2(n))\\) \u3002 \\(\\forall a \\not=1, \\log_a(n) = O(\\log_2(n))\\) \uff0c\u6240\u4ee5\u6e10\u8fdb\u65f6\u95f4\u590d\u6742\u5ea6\u7684 \\(\\log\\) \u90fd\u8868\u793a \\(\\log_2\\) \uff0c\u56e0\u4e3a\u5bf9\u4e8e\u6240\u6709\u5bf9\u6570\u51fd\u6570\uff0c\u4e0d\u7ba1\u5e95\u6570\u5982\u4f55\uff0c\u589e\u957f\u7387 ( \\(\\Theta\\) ) \u90fd\u662f\u76f8\u540c\u7684\uff0c\u4e3a\u4e86\u8ba8\u8bba\u65b9\u4fbf\uff0c\u90fd\u6362\u6210\u5e95\u6570\u4e3a \\(2\\) \u7684\u5bf9\u6570\u3002 Extend \u7531\u6362\u5e95\u516c\u5f0f \\(\\log_ab = \\dfrac{\\log_cb}{\\log_ca}\\) \u53ef\u4ee5\u77e5\u9053\uff1a \\(\\log_a n=\\log_2 n\\times\\log_a2\\) \u3002 \u800c \\(\\log_a2\\) \u662f\u4e00\u4e2a\u5e38\u6570\uff0c\u5728\u6e10\u8fdb\u610f\u4e49\u4e0b\u5c31\u88ab\u5ffd\u7565\u4e86\u3002 \u5e38\u6570\u56e0\u5b50 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e00\u822c\u8bf4\u4e00\u4e2a\u7b97\u6cd5\u6709\u51e0\u500d\u5e38\u6570\u7684\u65f6\u5019\uff0c\u4e00\u822c\u662f\u8bf4\u5b9e\u9645\u8dd1\u8d77\u6765\u7684\u57fa\u672c\u64cd\u4f5c\u6570\u7684\u6570\u91cf\u7ea7\u662f\u7b97\u51fa\u6765\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u51e0\u500d\u3002 \u6bd4\u5982\u6211\u6709\u4e00\u4e2a\u7b97\u6cd5\u662f \\(O(n)\\) \u7684\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u8dd1\u51fa\u6765\u7684\u57fa\u672c\u64cd\u4f5c\u6570\u662f \\(4n\\) \u7ea7\u522b\u7684\uff0c\u90a3\u6211\u5c31\u4f1a\u8bf4\u6211\u7684\u7b97\u6cd5\u6709 4 \u500d\u5e38\u6570\u3002 \u4e0d\u8fc7\u611f\u89c9\u8fd9\u4e2a\u662f\u4e00\u4e2a\u6bd4\u8f83\u6c11\u95f4\u7684\u53eb\u6cd5\u3002 \u5206\u6790\u65f6\u95f4\u590d\u6742\u5ea6 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5c31\u662f\u770b\u4e00\u770b\u8fdb\u884c\u4e86\u591a\u5c11\u6b21\u57fa\u7840\u64cd\u4f5c\u5c31\u884c\u4e86\u3002 \u9012\u5f52\u7b97\u6cd5\u753b\u9012\u5f52\u6811\u7b97\u6bcf\u5c42\u6bcf\u4e2a\u8282\u70b9\u590d\u6742\u5ea6\u6bd4\u8f83\u597d\uff0c\u4e5f\u53ef\u4ee5\u89c6\u60c5\u51b5\u7528\u4e3b\u5b9a\u7406\uff0c\u4f46\u662f\u4e3b\u5b9a\u7406\u5c31\u662f\u9012\u5f52\u6811\u8bc1\u660e\u7684\uff08\u3002 \u7136\u540e\u9012\u63a8\uff0cDP \u554a\u4e4b\u7c7b\u7684\u5c31\u770b\u5faa\u73af\u5c42\u6570\u548c\u5faa\u73af\u533a\u95f4\u4e58\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002 \u5927\u90e8\u5206\u90fd\u662f\uff0c\u7b97\u6bcf\u4e00\u8f6e\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\uff0c\u7136\u540e\u4e58\u4e0a\u8f6e\u6570\u3002 \u6216\u8005\u662f\u7b97\u6bcf\u4e00\u5c42\u7684\u590d\u6742\u5ea6\u3002 \u4e3b\u5b9a\u7406 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5bf9\u4e8e\u4e00\u4e2a\u9012\u5f52\u5f0f\u7b97\u6cd5 \\(T(n) = aT(\\dfrac{n}{b}) + f(n)\\) \uff0c \u5176\u4e2d \\(n\\) \u662f\u95ee\u9898\u89c4\u6a21\u5927\u5c0f\uff0c \\(a\\) \u662f\u5b50\u95ee\u9898\u7684\u4e2a\u6570\uff0c \\(\\dfrac{n}{b}\\) \u662f\u6bcf\u4e2a\u5b50\u95ee\u9898\u7684\u5927\u5c0f\uff08\u89c4\u6a21\uff09\uff0c \\(f(n)\\) \u662f\u5c06\u539f\u95ee\u9898\u5206\u6210\u5b50\u95ee\u9898\u548c\u5c06\u5b50\u95ee\u9898\u7684\u89e3\u5408\u5e76\u7684\u65f6\u95f4\u3002 \u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5f0f\u5b50\uff1a \u4e3e\u51e0\u4e2a\u4f8b\u5b50\uff1a \u5e94\u75281 \u5bf9\u4e8e\u4e8c\u5206\uff0c \u90a3\u4e48 \\(T(n) = T(n/2) + \\Theta(1)\\) \uff0c \u89e3\u91ca\uff1a\u4e8c\u5206\u6bcf\u6b21\u628a\u5b50\u95ee\u9898\u89c4\u6a21\u7f29\u5c0f\u4e00\u534a\uff0c\u6bcf\u6b21\u53ea\u9012\u5f52\u4e00\u904d\uff0c\u6240\u4ee5\uff08\u5904\u7406\u7684\uff09\u5b50\u95ee\u9898\u4e2a\u6570\u662f \\(a = 1\\) \u3002 \u5bf9\u4e8e condition 1\uff0c\u663e\u7136 \\(\\displaystyle n^{\\log_b(a-\\epsilon)}\\) \u5728 \\(\\epsilon > 0\\) \u65f6\u65e0\u610f\u4e49\uff0c\u80af\u5b9a\u4e0d\u662f \u5bf9\u4e8e condition 2\uff0c\u56e0\u4e3a \\(\\displaystyle n^{\\log_b(a)} = 1\\) \uff0c\u4e14 \\(f(n) = \\Theta(1)\\) \uff0c\u6211\u4eec\u53ef\u4ee5\u4ee4 \\(k = 0\\) \uff0c\u7136\u540e\u53d1\u73b0 \\(\\displaystyle n^{\\log_b(a)}\\log^k n\\) \u8fd9\u5768\u5c31\u7b49\u4e8e \\(\\Theta(1)\\) \uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u662f \\(\\Theta(\\log^{0 + 1} n) = \\Theta(\\log n)\\) \u3002 \u7136\u540e\u5982\u679c\u5e26\u4e00\u4e2a \\(Check\\) \u7684\u8bdd\uff0c\u4f60\u53ef\u80fd\u4f1a\u5199\u51fa \\(T(n) = T(n/2) + \\Theta(n)\\) \uff0c\u4f46\u8fd9\u4e2a\u4e0d\u5b8c\u5168\u5bf9\u7684\u3002 \u56e0\u4e3a\u4f60\u6bcf\u6b21 \\(n\\) \u4f1a\u7f29\u5c0f\uff0cCheck \u7684\u89c4\u6a21\u5c31\u53d8\u4e86\uff0c\u8ba1\u7b97\u65b9\u5f0f\u5e94\u8be5\u662f\u76f4\u63a5\u8ba1\u6570\u3002 \u4e8c\u5206\u6700\u591a\u8c03\u7528 \\(O(\\log n)\\) \u6b21 check\uff0ccheck \u7684\u603b\u590d\u6742\u5ea6\u662f \\(n + n/2 + n/4 + .... = 2n\\) \u3002 \u7136\u540e \\(\\sum (\\log n \\times \\text{check}) = \\log n \\times \\sum \\text{check} = n \\log n\\) \u3002 \u5e94\u75282 \u5bf9\u4e8e\u5f52\u5e76\u6392\u5e8f\uff0c \\(T(n) = 2T(n / 2) + \\Theta(n)\\) \u3002 \u89e3\u91ca\uff1a\u6bcf\u6b21\u628a\u5b50\u95ee\u9898\u4e8c\u5206\uff0c\u89c4\u6a21\u7f29\u5c0f\u4e00\u534a\uff0c\u6bcf\u6b21\u9012\u5f52\u4e24\u8fb9\uff0c\u6240\u4ee5\uff08\u5904\u7406\u7684\uff09\u5b50\u95ee\u9898\u4e2a\u6570\u662f \\(a = 2\\) \u3002 \u7136\u540e\u8fd8\u662f\u4e00\u4e2a condition \u4e00\u4e2a condition \u7684\u770b\u3002 \u53d1\u73b0 \\(\\displaystyle n^{\\log_b(a)} = \\Theta(n)\\) \uff0c\u4f60\u53d1\u73b0\u548c\u4e8c\u5206\u7684\u6709\u70b9\u50cf\uff0c\u90fd\u662f \\(\\displaystyle n^{\\log_b(a)} = f(n)\\) \uff0c\u7136\u540e\u4ee4 \\(k = 0\\) . \u6240\u4ee5\u590d\u6742\u5ea6 \\(\\Theta(n\\log n)\\) \u3002 \u5e94\u75283 \\(T(n) = 9T(n/3) + n\\) . \u53d1\u73b0 \\(\\displaystyle n^{\\log_b(a)} = 2\\) \uff0c \\(n^2 > n\\) \uff0c\u6240\u4ee5\u590d\u6742\u5ea6 \\(\\Theta(n^2)\\) \u3002 Warning \u5bf9\u4e8e \\(a\\) \u7684\u786e\u5b9a\uff0c\u4e8c\u5206\u548c\u5f52\u5e76\u6392\u5e8f\u7528\u201c\u9012\u5f52\u4e86\u90a3\u51e0\u8fb9\u201d\u662f\u53ef\u884c\u7684\u3002 \u5bf9\u4e8e\u7ebf\u6bb5\u6811\u5355\u70b9\u6539\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u5bf9\u4e8e\u7ebf\u6bb5\u533a\u95f4\u67e5\u5c31\u4e0d\u884c\u4e86\uff0c\u56e0\u4e3a\u7ebf\u6bb5\u6811\u533a\u95f4\u67e5\u6709\u4e00\u4e2a \\([l, r]\\subset [ql, qr]\\) \u7684\u526a\u679d\u3002 \u9700\u8981\u5355\u72ec\u5206\u8ba8\u5206\u6790\uff0c\u4e0d\u80fd\u4e3b\u5b9a\u7406\u3002","title":"\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790"},{"location":"algor/basic/time-complexity/#_1","text":"","title":"\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790"},{"location":"algor/basic/time-complexity/#_2","text":"\u8ba1\u7b97\u673a\u6267\u884c\u7684\u4e00\u6b21\u8d4b\u503c\uff0c\u4e00\u6b21\u8fd0\u7b97\uff0c\u4e00\u6b21\u5bf9\u5185\u5b58\u7684\u8bbf\u95ee\u90fd\u53eb\u505a\u4e00\u6b21\u57fa\u672c\u64cd\u4f5c\u3002 \u4e00\u822c\u90fd\u4f1a\u7528\u4e00\u4e2a\u7b97\u6cd5\u5728\u67d0\u4e2a\u6570\u636e\u89c4\u6a21\u4e0b\u7684\u57fa\u672c\u64cd\u4f5c\u6570\u8fdb\u884c\u8ba1\u6570\u4ee5\u63cf\u8ff0\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u3002","title":"\u57fa\u672c\u64cd\u4f5c\u6570"},{"location":"algor/basic/time-complexity/#_3","text":"\u4e00\u822c\u6765\u8bf4\uff0c\u8861\u91cf\u4e00\u4e2a\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u90fd\u9700\u8981\u5728\u6570\u636e\u89c4\u6a21\u4e0b\u770b\u4ed6\u7684\u8fd0\u884c\u65f6\u95f4\u589e\u957f\u8d8b\u52bf\u3002 \u8bf4\u767d\u4e86\uff0c\u5c31\u662f\u7528\u4e00\u4e2a\u51fd\u6570 \\(f\\) \uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7b97\u6cd5\u5efa\u7acb\u8d77\u4ece\u6570\u636e\u89c4\u6a21\u5230\u8fd0\u884c\u65f6\u95f4\u7684\u6620\u5c04\u3002 \u800c\u8fd0\u884c\u65f6\u95f4\u4e00\u822c\u90fd\u4f7f\u7528\u57fa\u672c\u64cd\u4f5c\u7684\u6570\u91cf\u6765\u63cf\u8ff0\uff0c\u518d\u6839\u636e\u8ba1\u7b97\u673a\u5b9e\u9645\u7684\u786c\u4ef6\u914d\u7f6e\uff08\u5355\u4f4d\u65f6\u95f4\u80fd\u8fdb\u884c\u591a\u5c11\u6b21\u57fa\u672c\u64cd\u4f5c\uff09\u6765\u770b\u5728\u8ba1\u7b97\u673a\u4e0a\u5b9e\u9645\u7684\u8fd0\u884c\u65f6\u95f4\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\u4e3b\u8981\u5206\u56db\u79cd\uff1a \u6700\u574f\u590d\u6742\u5ea6\uff0c\u63cf\u8ff0\u7b97\u6cd5\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u8fd0\u884c\u6548\u7387\uff0c\u76f4\u63a5\u8bf4\u65f6\u95f4\u590d\u6742\u5ea6\u4e00\u822c\u90fd\u6307\u6700\u574f\u590d\u6742\u5ea6\u3002 \u6700\u4f18\u590d\u6742\u5ea6\uff0c\u63cf\u8ff0\u7b97\u6cd5\u6700\u597d\u60c5\u51b5\u4e0b\u7684\u8fd0\u884c\u6548\u7387\uff0c\u4e0d\u5e38\u7528\u3002 \u5e73\u5747\u590d\u6742\u5ea6\uff08\u671f\u671b\u590d\u6742\u5ea6\uff09\uff0c\u5f53\u8f93\u5165\u6570\u636e\u89c4\u6a21\u968f\u673a\u7684\u65f6\u5019\u7684\u590d\u6742\u5ea6\uff0c\u5c31\u662f\u5404\u4e2a\u6570\u636e\u89c4\u6a21\u4e0b\u590d\u6742\u5ea6\u7684\u5e73\u5747\u3002 \u5747\u644a\u590d\u6742\u5ea6\uff0c\u591a\u6b21\u64cd\u4f5c\u7684\u603b\u590d\u6742\u5ea6\u9664\u4ee5\u64cd\u4f5c\u6b21\u6570\uff0c\u5c31\u662f\u5355\u6b21\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\uff0c\uff08\u6ce8\u610f\u548c\u5e73\u5747\u590d\u6742\u5ea6\u505a\u533a\u5206\uff09","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"algor/basic/time-complexity/#_4","text":"\u6e10\u8fdb\u7b26\u53f7\u662f\u51fd\u6570\u7684\u9636\u7684\u89c4\u8303\u63cf\u8ff0\u3002\u7b80\u5355\u6765\u8bf4\uff0c\u6e10\u8fdb\u7b26\u53f7\u5ffd\u7565\u4e86\u4e00\u4e2a\u51fd\u6570\u4e2d\u589e\u957f\u8f83\u6162\u7684\u90e8\u5206\u4ee5\u53ca\u5404\u9879\u7684\u7cfb\u6570\uff08\u5728\u65f6\u95f4\u590d\u6742\u5ea6\u76f8\u5173\u5206\u6790\u4e2d\uff0c\u7cfb\u6570\u4e00\u822c\u88ab\u79f0\u4f5c\u201c\u5e38\u6570\u201d\uff09\uff0c\u800c\u4fdd\u7559\u4e86\u53ef\u4ee5\u7528\u6765\u8868\u660e\u8be5\u51fd\u6570\u589e\u957f\u8d8b\u52bf\u7684\u91cd\u8981\u90e8\u5206\u3002 \u6240\u4ee5\u8bf4\u5728\u8ba1\u7b97\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u65f6\u5019\uff08\u5728\u6e10\u8fdb\u610f\u4e49\u4e0a\uff09\u4e00\u822c\u90fd\u662f\u76f4\u63a5\u5ffd\u7565\u6389\u63cf\u8ff0\u57fa\u672c\u64cd\u4f5c\u6570\u7684\u591a\u9879\u5f0f\u7684\u5e38\u6570\u9879\u8fd8\u6709\u4e00\u4e9b\u4f4e\u6b21\u9879\u5bf9\u4e8e\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u5f71\u54cd\u7684\u3002 \u5982\u679c\u4f60\u60f3\u8981\u5361\u5e38\uff0c\u4e0d\u5ffd\u7565\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u4e0d\u8fc7\u8fd9\u5c31\u4e0d\u662f\u4e25\u8c28\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u8bb0\u6cd5\u4e86\u3002 \\(\\Theta\\) \uff1a\u5bf9\u4e8e\u4e24\u4e2a\u51fd\u6570 \\(f(n), g(n)\\) \uff0c\u5982\u679c\u5b58\u5728 \\(c_1,c_2,n_0 > 0\\) \uff0c\u4f7f\u5f97 \\(\\forall n\\ge n_0, 0 \\le c_1 \\cdot g(n) \\le f(n) \\le c_2 \\cdot g(n)\\) \uff0c\u5219\u8bb0\u4e3a \\(f(n) = \\Theta(g(n))\\) \uff0c\u7528\u4e8e\u63cf\u8ff0\u7b97\u6cd5\u7684\u4e0a\u4e0b\u754c\u3002 \\(O\\) \uff1a\u5bf9\u4e8e\u4e24\u4e2a\u51fd\u6570 \\(f(n), g(n)\\) \uff0c\u5982\u679c\u5b58\u5728 \\(c, n_0 > 0\\) \uff0c\u4f7f\u5f97 \\(\\forall n\\ge n_0,0 \\le f(n) \\le c \\cdot g(n)\\) \uff0c\u5219\u8bb0\u4e3a \\(f(n) = O(g(n))\\) \uff0c\u7528\u4e8e\u63cf\u8ff0\u7b97\u6cd5\u7684\u4e0a\u754c\uff0c\u5927\u90e8\u5206\u65f6\u5019\u90fd\u7528\u8fd9\u4e2a\u63cf\u8ff0\uff0c\u4e0d\u8fc7\u7b97\u6cd5\u4f7f\u7528\u7684\u65f6\u5019\u7684\u6700\u574f\u590d\u6742\u5ea6\u4e0d\u662f\u5927 \\(O\\) \u8bb0\u53f7\uff0c\u7528 \\(\\Theta\\) \u8868\u793a\u6700\u574f\u590d\u6742\u5ea6\u662f\u5b8c\u5168\u53ef\u4ee5\u7684\uff0c\u53ea\u4e0d\u8fc7\u5927\u90e8\u5206\u65f6\u5019\u90fd\u53ea\u6bd4\u8f83\u65b9\u4fbf\u8bc1\u660e\u51fa\u4e0a\u754c\uff0c\u6240\u4ee5\u7528\u5927 \\(O\\) \u7528\u7684\u591a\uff0c\u5c31\u662f\u8bf4\uff0c\u5728\u4e00\u5b9a\u60c5\u51b5\u4e0b \\(O\\) \u53ef\u4ee5\u8868\u793a\u6700\u574f\u590d\u6742\u5ea6\u3002 \\(o\\) \uff1a\u5c31\u662f \\(O\\) \u53bb\u6389\u7b49\u53f7\u53d8\u6210 \\(<\\) \u3002 \\(\\Omega\\) \uff1a \\(\\ge\\) \u3002 \\(\\omega\\) \uff1a \\(>\\) \u3002 \u4e00\u4e9b\u6027\u8d28\uff1a \\(f1(n) + f2(n) = O(\\max(f1(n), f2(n)))\\) \uff08\u4e24\u4e2a\u51fd\u6570\u4e4b\u548c\u7684\u4e0a\u754c\u662f\u4ed6\u4eec\u5f53\u4e2d\u5728 \u6e10\u8fdb\u610f\u4e49\u4e0a \u8f83\u5927\u7684\u51fd\u6570\uff09\u3002 \\(f1(n)\\cdot f2(n) = O(f1(n) \\times f2(n))\\) \u3002 \\(\\forall a \\not=1, \\log_a(n) = O(\\log_2(n))\\) \uff0c\u6240\u4ee5\u6e10\u8fdb\u65f6\u95f4\u590d\u6742\u5ea6\u7684 \\(\\log\\) \u90fd\u8868\u793a \\(\\log_2\\) \uff0c\u56e0\u4e3a\u5bf9\u4e8e\u6240\u6709\u5bf9\u6570\u51fd\u6570\uff0c\u4e0d\u7ba1\u5e95\u6570\u5982\u4f55\uff0c\u589e\u957f\u7387 ( \\(\\Theta\\) ) \u90fd\u662f\u76f8\u540c\u7684\uff0c\u4e3a\u4e86\u8ba8\u8bba\u65b9\u4fbf\uff0c\u90fd\u6362\u6210\u5e95\u6570\u4e3a \\(2\\) \u7684\u5bf9\u6570\u3002 Extend \u7531\u6362\u5e95\u516c\u5f0f \\(\\log_ab = \\dfrac{\\log_cb}{\\log_ca}\\) \u53ef\u4ee5\u77e5\u9053\uff1a \\(\\log_a n=\\log_2 n\\times\\log_a2\\) \u3002 \u800c \\(\\log_a2\\) \u662f\u4e00\u4e2a\u5e38\u6570\uff0c\u5728\u6e10\u8fdb\u610f\u4e49\u4e0b\u5c31\u88ab\u5ffd\u7565\u4e86\u3002","title":"\u6e10\u8fdb\u8bb0\u53f7"},{"location":"algor/basic/time-complexity/#_5","text":"\u4e00\u822c\u8bf4\u4e00\u4e2a\u7b97\u6cd5\u6709\u51e0\u500d\u5e38\u6570\u7684\u65f6\u5019\uff0c\u4e00\u822c\u662f\u8bf4\u5b9e\u9645\u8dd1\u8d77\u6765\u7684\u57fa\u672c\u64cd\u4f5c\u6570\u7684\u6570\u91cf\u7ea7\u662f\u7b97\u51fa\u6765\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u51e0\u500d\u3002 \u6bd4\u5982\u6211\u6709\u4e00\u4e2a\u7b97\u6cd5\u662f \\(O(n)\\) \u7684\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u8dd1\u51fa\u6765\u7684\u57fa\u672c\u64cd\u4f5c\u6570\u662f \\(4n\\) \u7ea7\u522b\u7684\uff0c\u90a3\u6211\u5c31\u4f1a\u8bf4\u6211\u7684\u7b97\u6cd5\u6709 4 \u500d\u5e38\u6570\u3002 \u4e0d\u8fc7\u611f\u89c9\u8fd9\u4e2a\u662f\u4e00\u4e2a\u6bd4\u8f83\u6c11\u95f4\u7684\u53eb\u6cd5\u3002","title":"\u5e38\u6570\u56e0\u5b50"},{"location":"algor/basic/time-complexity/#_6","text":"\u5c31\u662f\u770b\u4e00\u770b\u8fdb\u884c\u4e86\u591a\u5c11\u6b21\u57fa\u7840\u64cd\u4f5c\u5c31\u884c\u4e86\u3002 \u9012\u5f52\u7b97\u6cd5\u753b\u9012\u5f52\u6811\u7b97\u6bcf\u5c42\u6bcf\u4e2a\u8282\u70b9\u590d\u6742\u5ea6\u6bd4\u8f83\u597d\uff0c\u4e5f\u53ef\u4ee5\u89c6\u60c5\u51b5\u7528\u4e3b\u5b9a\u7406\uff0c\u4f46\u662f\u4e3b\u5b9a\u7406\u5c31\u662f\u9012\u5f52\u6811\u8bc1\u660e\u7684\uff08\u3002 \u7136\u540e\u9012\u63a8\uff0cDP \u554a\u4e4b\u7c7b\u7684\u5c31\u770b\u5faa\u73af\u5c42\u6570\u548c\u5faa\u73af\u533a\u95f4\u4e58\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002 \u5927\u90e8\u5206\u90fd\u662f\uff0c\u7b97\u6bcf\u4e00\u8f6e\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\uff0c\u7136\u540e\u4e58\u4e0a\u8f6e\u6570\u3002 \u6216\u8005\u662f\u7b97\u6bcf\u4e00\u5c42\u7684\u590d\u6742\u5ea6\u3002","title":"\u5206\u6790\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"algor/basic/time-complexity/#_7","text":"\u5bf9\u4e8e\u4e00\u4e2a\u9012\u5f52\u5f0f\u7b97\u6cd5 \\(T(n) = aT(\\dfrac{n}{b}) + f(n)\\) \uff0c \u5176\u4e2d \\(n\\) \u662f\u95ee\u9898\u89c4\u6a21\u5927\u5c0f\uff0c \\(a\\) \u662f\u5b50\u95ee\u9898\u7684\u4e2a\u6570\uff0c \\(\\dfrac{n}{b}\\) \u662f\u6bcf\u4e2a\u5b50\u95ee\u9898\u7684\u5927\u5c0f\uff08\u89c4\u6a21\uff09\uff0c \\(f(n)\\) \u662f\u5c06\u539f\u95ee\u9898\u5206\u6210\u5b50\u95ee\u9898\u548c\u5c06\u5b50\u95ee\u9898\u7684\u89e3\u5408\u5e76\u7684\u65f6\u95f4\u3002 \u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5f0f\u5b50\uff1a \u4e3e\u51e0\u4e2a\u4f8b\u5b50\uff1a \u5e94\u75281 \u5bf9\u4e8e\u4e8c\u5206\uff0c \u90a3\u4e48 \\(T(n) = T(n/2) + \\Theta(1)\\) \uff0c \u89e3\u91ca\uff1a\u4e8c\u5206\u6bcf\u6b21\u628a\u5b50\u95ee\u9898\u89c4\u6a21\u7f29\u5c0f\u4e00\u534a\uff0c\u6bcf\u6b21\u53ea\u9012\u5f52\u4e00\u904d\uff0c\u6240\u4ee5\uff08\u5904\u7406\u7684\uff09\u5b50\u95ee\u9898\u4e2a\u6570\u662f \\(a = 1\\) \u3002 \u5bf9\u4e8e condition 1\uff0c\u663e\u7136 \\(\\displaystyle n^{\\log_b(a-\\epsilon)}\\) \u5728 \\(\\epsilon > 0\\) \u65f6\u65e0\u610f\u4e49\uff0c\u80af\u5b9a\u4e0d\u662f \u5bf9\u4e8e condition 2\uff0c\u56e0\u4e3a \\(\\displaystyle n^{\\log_b(a)} = 1\\) \uff0c\u4e14 \\(f(n) = \\Theta(1)\\) \uff0c\u6211\u4eec\u53ef\u4ee5\u4ee4 \\(k = 0\\) \uff0c\u7136\u540e\u53d1\u73b0 \\(\\displaystyle n^{\\log_b(a)}\\log^k n\\) \u8fd9\u5768\u5c31\u7b49\u4e8e \\(\\Theta(1)\\) \uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u662f \\(\\Theta(\\log^{0 + 1} n) = \\Theta(\\log n)\\) \u3002 \u7136\u540e\u5982\u679c\u5e26\u4e00\u4e2a \\(Check\\) \u7684\u8bdd\uff0c\u4f60\u53ef\u80fd\u4f1a\u5199\u51fa \\(T(n) = T(n/2) + \\Theta(n)\\) \uff0c\u4f46\u8fd9\u4e2a\u4e0d\u5b8c\u5168\u5bf9\u7684\u3002 \u56e0\u4e3a\u4f60\u6bcf\u6b21 \\(n\\) \u4f1a\u7f29\u5c0f\uff0cCheck \u7684\u89c4\u6a21\u5c31\u53d8\u4e86\uff0c\u8ba1\u7b97\u65b9\u5f0f\u5e94\u8be5\u662f\u76f4\u63a5\u8ba1\u6570\u3002 \u4e8c\u5206\u6700\u591a\u8c03\u7528 \\(O(\\log n)\\) \u6b21 check\uff0ccheck \u7684\u603b\u590d\u6742\u5ea6\u662f \\(n + n/2 + n/4 + .... = 2n\\) \u3002 \u7136\u540e \\(\\sum (\\log n \\times \\text{check}) = \\log n \\times \\sum \\text{check} = n \\log n\\) \u3002 \u5e94\u75282 \u5bf9\u4e8e\u5f52\u5e76\u6392\u5e8f\uff0c \\(T(n) = 2T(n / 2) + \\Theta(n)\\) \u3002 \u89e3\u91ca\uff1a\u6bcf\u6b21\u628a\u5b50\u95ee\u9898\u4e8c\u5206\uff0c\u89c4\u6a21\u7f29\u5c0f\u4e00\u534a\uff0c\u6bcf\u6b21\u9012\u5f52\u4e24\u8fb9\uff0c\u6240\u4ee5\uff08\u5904\u7406\u7684\uff09\u5b50\u95ee\u9898\u4e2a\u6570\u662f \\(a = 2\\) \u3002 \u7136\u540e\u8fd8\u662f\u4e00\u4e2a condition \u4e00\u4e2a condition \u7684\u770b\u3002 \u53d1\u73b0 \\(\\displaystyle n^{\\log_b(a)} = \\Theta(n)\\) \uff0c\u4f60\u53d1\u73b0\u548c\u4e8c\u5206\u7684\u6709\u70b9\u50cf\uff0c\u90fd\u662f \\(\\displaystyle n^{\\log_b(a)} = f(n)\\) \uff0c\u7136\u540e\u4ee4 \\(k = 0\\) . \u6240\u4ee5\u590d\u6742\u5ea6 \\(\\Theta(n\\log n)\\) \u3002 \u5e94\u75283 \\(T(n) = 9T(n/3) + n\\) . \u53d1\u73b0 \\(\\displaystyle n^{\\log_b(a)} = 2\\) \uff0c \\(n^2 > n\\) \uff0c\u6240\u4ee5\u590d\u6742\u5ea6 \\(\\Theta(n^2)\\) \u3002 Warning \u5bf9\u4e8e \\(a\\) \u7684\u786e\u5b9a\uff0c\u4e8c\u5206\u548c\u5f52\u5e76\u6392\u5e8f\u7528\u201c\u9012\u5f52\u4e86\u90a3\u51e0\u8fb9\u201d\u662f\u53ef\u884c\u7684\u3002 \u5bf9\u4e8e\u7ebf\u6bb5\u6811\u5355\u70b9\u6539\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u5bf9\u4e8e\u7ebf\u6bb5\u533a\u95f4\u67e5\u5c31\u4e0d\u884c\u4e86\uff0c\u56e0\u4e3a\u7ebf\u6bb5\u6811\u533a\u95f4\u67e5\u6709\u4e00\u4e2a \\([l, r]\\subset [ql, qr]\\) \u7684\u526a\u679d\u3002 \u9700\u8981\u5355\u72ec\u5206\u8ba8\u5206\u6790\uff0c\u4e0d\u80fd\u4e3b\u5b9a\u7406\u3002","title":"\u4e3b\u5b9a\u7406"},{"location":"algor/dp/digit-dp/","text":"\u6cdb\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e00\u7c7b\u95ee\u9898\u90fd\u662f\u8be2\u95ee\u67d0\u4e2a\u533a\u95f4 \\([L,R]\\) \u5f53\u4e2d \u6ee1\u8db3\u67d0\u4e2a\u6761\u4ef6\u7684\u6570 \u7684\u4e2a\u6570\u3002 \u5e76\u4e14 \\(L,R\\) \u7684 \u8303\u56f4\u4e00\u822c\u5f88\u5927 \u5e38\u89c1\u7684\u9650\u5236\u6709\uff1a \u5404\u4f4d\u6570\u5b57\u548c\u4e0d\u80fd\u662f\u67d0\u4e2a\u6574\u6570\u7684\u500d\u6570 \u67d0\u4e00\u4e2a\u6570\u5b57\u4e0d\u80fd\u51fa\u73b0 \u6570\u5b57\u5fc5\u987b\u6309\u7167\u5347\u5e8f\u6392\u5217 \u4e0d\u80fd\u51fa\u73b0\u67d0\u4e24\u4e2a\u8fde\u7eed\u7684\u6570\u5b57 \u5b9e\u73b0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5957\u8def\u65e0\u975e\u4e24\u6b65\uff1a \u5148\u628a \\(F(L),F(R)\\) \u7b97\u51fa\u6765\uff0c\u7b54\u6848\u5c31\u662f \\(F(R)-F(L-1)\\) \u3002 \u5176\u4e2d \\(F(X)\\) \u8868\u793a \\([1,X]\\) \u5f53\u4e2d\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u7684\u4e2a\u6570\u3002 \u8003\u8651\u6bcf\u4e00\u4f4d\u600e\u4e48\u586b\uff0c\u662f\u5426\u6709\u4e0a\u754c\u9650\u5236\u6216\u8005\u524d\u5bfc\u96f6\u9650\u5236\u3002 \u4e0a\u754c\u9650\u5236\u662f\u8fd9\u6837\u7684\uff1a\u6bd4\u5982\u4f60\u73b0\u5728\u8981\u6c42 \\(F(n)\\) \u3002 \u5e76\u4e14 \\(n=12345678\\) \u6211\u4eec\u4ece\u6700\u9ad8\u4f4d\uff0c\u4e5f\u5c31\u662f \\(8\\) \u6240\u5904\u7684\u4f4d\u7f6e\u5f00\u59cb\u5904\u7406\u3002 \u90a3\u4e48\u8fd9\u4e00\u4f4d\u5c31\u6709\u4e24\u79cd\u60c5\u51b5\uff1a \u8fd9\u4e00\u4f4d\u586b \\(8\\) \uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0b\u4e00\u4f4d\u53ea\u80fd\u586b \\(0 \\sim 7\\) \u3002 \u8fd9\u4e00\u4f4d\u586b \\(0\\sim 7\\) \u7684\u67d0\u4e00\u4e2a\u6570\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0b\u4e00\u4f4d\uff0c\u5305\u62ec\u4e4b\u540e\u7684\u6240\u6709\u4f4d\u60f3\u600e\u4e48\u586b\u600e\u4e48\u586b\uff08 \\(0 \\sim 9\\) \uff09 \u8fd9\u4e2a\u5c31\u76f4\u63a5\u5f00\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u4e00\u4e0b\uff0c\u6765\u786e\u5b9a\u5f53\u524d\u7684\u51b3\u7b56\u96c6\u5408\u662f\u4ec0\u4e48\uff08\u53ef\u4ee5\u9009\u62e9\u7684\u6570\u5b57\u6709\u54ea\u4e9b\uff09\u3002 \u7136\u540e\u524d\u5bfc\u96f6\u9650\u5236\u4e5f\u662f\u76f4\u63a5\u8bb0\u5f55\u4e00\u4e0b\u5373\u53ef\uff08\u5982\u679c\u524d\u5bfc\u96f6\u6807\u8bb0\u4e3a True \u5219\u8868\u793a\u4ece\u5f00\u59cb\u641c\u7d22\u4e00\u76f4\u5230\u73b0\u5728\u90fd\u586b\u7684\u662f \\(0\\) \uff09\u3002 \u8fd9\u4e2a\u5c31\u662f\u5728 DP\uff0c\u8bbe \\(dp(x, y, 0/1, 0/1)\\) \u8868\u793a\u6ee1\u8db3\u4ec0\u4e48\u6761\u4ef6\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\u7684\u7b54\u6848\uff0c\u4e0d\u8fc7\u4e3a\u4e86\u5b9e\u73b0\u65b9\u4fbf\uff0c\u901a\u5e38\u4f1a\u5199\u8bb0\u5fc6\u5316\u641c\u7d22\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 function dfs ( \u5f53\u524d\u4f4d\u6570 x , \u5f53\u524d\u72b6\u6001 y , \u524d\u5bfc\u96f6\u9650\u5236 st , \u4e0a\u754c\u9650\u5236 limit ) : if \u5230\u8fbe\u8fb9\u754c and \u7b26\u5408\u8981\u6c42 then \u8fd4\u56de\u8fb9\u754c\u7684\u5408\u6cd5\u7b54\u6848 if \u5230\u8fbe\u8fb9\u754c and \u4e0d\u7b26\u5408\u8981\u6c42 then \u8fd4\u56de\u8fb9\u754c\u7684\u4e0d\u5408\u6cd5\u7b54\u6848 # \u8fd9\u4e2a\u4e00\u822c\u4e0d\u4f1a\u6709\uff0c\u4e00\u822c\u679a\u4e3e\u586b\u6570\u7684\u65f6\u5019\u5982\u679c\u6ca1\u6709\u9650\u5236\u5c31\u4f1a\u6709\uff08\u53ea\u8981\u4f1a\u8bbf\u95ee\u5230\u8fb9\u754c\u4e0d\u5408\u6cd5\u60c5\u51b5\u5c31\u8981\u52a0\u4e0a\uff09\u3002 if \u5f53\u524d\u7684\u72b6\u6001\u5df2\u7ecf\u8bb0\u5fc6\u5316\u8fc7 then \u8fd4\u56de\u8bb0\u5f55\u7684\u7b54\u6848 var result = 0 # \u8bb0\u5f55\u7b54\u6848 var up = 9 # \u5f53\u524d\u4f4d\u586b\u6570\u7684\u4e0a\u9650 if \u6709\u4e0a\u754c\u9650\u5236 then up = \u5f53\u524d\u4f4d\u5728 n \u5f53\u4e2d\u7684\u6570\u5b57 # n \u662f\u8981\u6c42\u7684 F ( n ) \u7684\u81ea\u53d8\u91cf for \u679a\u4e3e\u5f53\u524d\u4f4d\u7684\u586b\u6570\u503c from 0 to up : if \u5f53\u524d\u4f4d\u586b\u7684\u6570\u4e0d\u7b26\u5408\u9650\u5236 then continue if \u6709\u524d\u5bfc\u96f6\u9650\u5236 and \u5f53\u524d\u586b\u5199\u7684\u662f 0 then result += dfs ( x - 1 , \u4e0b\u4e00\u4e2a\u72b6\u6001 , true , \u662f\u5426\u89e6\u78b0\u4e0a\u754c\u9650\u5236 ) else then result += dfs ( x - 1 , \u4e0b\u4e00\u4e2a\u72b6\u6001 , false , \u662f\u5426\u89e6\u78b0\u4e0a\u754c\u9650\u5236 ) \u8bb0\u5f55\u5f53\u524d\u72b6\u6001\u7684\u7b54\u6848 f [ x ][ y ] = result \u8fd4\u56de\u7b54\u6848 result function solve ( \u8981\u6c42\u7684 F \u7684\u81ea\u53d8\u91cf n ) \u5b58\u50a8\u6bcf\u4e00\u4f4d\u6570\u5b57\u7684 vector \u6e05\u7a7a while n ! = 0 then vector <== n % base # base \u8868\u793a\u662f\u54ea\u4e00\u4e2a\u8fdb\u5236 n /= base \u6e05\u7a7a\u72b6\u6001\u6570\u7ec4 \u8fd4\u56de\u5bf9\u5e94\u72b6\u6001\u7684\u7b54\u6848\uff08\u8c03\u7528 dfs \uff09 \u6709\u51e0\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u70b9\uff1a \u5f53\u524d\u72b6\u6001 \\(y\\) \u9700\u8981\u7531\u9898\u76ee\u7684\u9650\u5236\u51b3\u5b9a\uff0c\u6bd4\u5982 \u4e0a\u4e00\u4e2a\u586b\u5199\u7684/\u5f53\u524d\u7684\u6570\u4f4d\u603b\u548c/\u5df2\u7ecf\u586b\u4e86\u591a\u5c11\u4f4d \u8fd9\u79cd\u9650\u5236\u3002 \u8fb9\u754c\u4e00\u822c\u662f \\(x=0\\) \uff0c\u6709\u7684\u65f6\u5019\u9700\u8981\u5224\u65ad\u5f53\u524d\u72b6\u6001\u662f\u5426\u5408\u6cd5\uff08\u6bd4\u5982\u662f\u5426\u662f\u67d0\u4e2a\u6570\u7684\u500d\u6570\u4e4b\u7c7b\u7684\uff09\uff0c\u800c\u4e14\u8fb9\u754c\u7684\u7b54\u6848\u8981\u770b\u60c5\u51b5\u800c\u5b9a\u3002 \u7b2c 15 \u884c\u7684\u201c\u9650\u5236\u201d\uff0c\u8fd9\u4e2a\u9700\u8981\u770b\u9898\u76ee\u8981\u6c42\uff0c\u6bd4\u5982\u6709\u6ca1\u6709\u54ea\u4e00\u4e2a\u6570\u4e0d\u80fd\u51fa\u73b0\uff0c\u54ea\u4e24\u4e2a\u6570\u4e0d\u80fd\u8fde\u7eed\u51fa\u73b0\uff08\u8fd9\u4e2a\u9700\u8981\u5728\u5f00\u59cb\u7684\u65f6\u5019\u8bb0\u5f55\u4e0a\u4e00\u4f4d\uff09\u7684\u8981\u6c42\u3002 \u524d\u5bfc\u96f6\u9650\u5236\u4e0d\u662f\u6240\u6709\u9898\u90fd\u4f1a\u6709\uff0c\u5982\u679c\u6709\u524d\u5bfc\u96f6\u9650\u5236\uff0c\u5728\u9012\u5f52\u4e0b\u4e00\u4e2a\u72b6\u6001\u7684\u65f6\u5019\u8bb0\u5f97\u8ba9\u4e0b\u4e00\u4e2a\u72b6\u6001\u5f3a\u5236\u5408\u6cd5\uff08\u56e0\u4e3a\u5728\u524d\u5bfc\u96f6\u9650\u5236\u4e0b\uff0c\u5b9e\u9645\u4e0a\u8fd9\u4e00\u4f4d\u662f\u6ca1\u6709\u586b\u6570\u5b57\u7684\uff0c\u800c\u4e0d\u662f\u586b\u4e86 0\uff09\u3002 \u4f8b\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6765\u4e00\u9053\u7ecf\u5178\u9898\uff08\u5305\u542b\u6240\u6709\u8981\u7d20\uff09\uff1a [SCOI2009] Windy\u6570\uff1a\u4e0d\u542b\u524d\u5bfc\u96f6\u4e14\u76f8\u90bb\u4e24\u4e2a\u6570\u5b57\u4e4b\u5dee\u81f3\u5c11\u4e3a \\(2\\) \u7684\u6b63\u6574\u6570\u88ab\u79f0\u4e3a Windy \u6570\u3002 \u95ee\u4f60 \\(L \\sim R\\) \u5f53\u4e2d\u6709\u591a\u5c11\u4e2a Windy \u6570\u3002 \\(1\\le L \\le R \\le 2\\times 10^9\\) \uff08\u6211\u6700\u5f00\u59cb\u6709\u4e2a\u9519\uff0c\u533a\u95f4\u662f\u9ed8\u8ba4 \\(L\\not=R\\) \u7684\uff0c\u6240\u4ee5\u5982\u679c\u8981\u76f8\u7b49\u5c31\u4e0d\u80fd\u5199\u201c\u533a\u95f4\u201d\uff0c\u67d0\u6b21\u6a21\u62df\u8d5b\u7684\u9898\u4e5f\u56e0\u4e3a\u8fd9\u4e2a\u5dee\u70b9\u88ab\u55b7\uff08 \u5957\u677f\u5b50\u5c31\u884c\u4e86\uff0c\u6839\u672c\u4e0d\u9700\u8981\u8fc7\u591a\u7684\u601d\u8003\u3002 \u6ce8\u610f\u8fd9\u4e2a\u4e0d\u542b\u524d\u5bfc\u96f6\u7684\u610f\u601d\u662f\uff0c 0012 , 012 , 12 \u7b97\u4f5c\u540c\u4e00\u4e2a\u65b9\u6848\u3002 \u76f4\u63a5\u4e0a\u4ee3\u7801\uff0c\u6709\u51e0\u4e2a\u5c0f\u7684\u6ce8\u610f\u70b9\u5df2\u7ecf\u5199\u5728\u91cc\u9762\u4e86\uff1a Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 // author : black_trees #include <cstdio> #include <vector> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 15 + 10 ; int L , R ; std :: vector < int > dight ; int f [ si ][ si ][ 2 ][ 2 ]; int dfs ( int x , int y , int st , int limit ) { if ( ! x ) return 1 ; if ( ~ f [ x ][ y ][ st ][ limit ]) return f [ x ][ y ][ st ][ limit ]; int ret = 0 , up = 9 ; if ( limit ) up = dight [ x - 1 ]; for ( int i = 0 ; i <= up ; ++ i ) { if ( abs ( i - y ) < 2 ) continue ; // \u4e0d\u5408\u6cd5 if ( st && i == 0 ) ret += dfs ( x - 1 , 11 , 1 , limit && i == up ); // \u5f3a\u5236\u5408\u6cd5 else ret += dfs ( x - 1 , i , 0 , limit && i == up ); } f [ x ][ y ][ st ][ limit ] = ret ; return ret ; } int solve ( int n ) { dight . clear (); while ( n ) dight . push_back ( n % 10 ), n /= 10 ; memset ( f , -1 , sizeof f ); // \u6ce8\u610f\u6e05\u7a7a return dfs ( dight . size (), 11 , 1 , 1 ); // \u5f3a\u5236\u5408\u6cd5 } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> L >> R ; cout << solve ( R ) - solve ( L - 1 ) << endl ; return 0 ; } \u8fd8\u6709\u51e0\u4e2a\u9700\u8981\u7279\u6b8a\u6ce8\u610f\u7684\u70b9\uff1a Warning \u6839\u636e\u72b6\u6001\u6765\u5f00\u8bb0\u5fc6\u5316\u7684\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u4e0d\u8981\u5f00\u5c0f\u4e86\uff0c\u4e5f\u8981\u5c0f\u5fc3\u8d1f\u4e0b\u6807\uff01\u3002 \u6e05\u7a7a\u8bb0\u5fc6\u5316\u6570\u7ec4\u7684\u65f6\u673a\u4e5f\u9700\u8981\u628a\u63e1\u3002 \u5982\u679c\u4e0d\u7ba1\u600e\u4e48\u8be2\u95ee\u9700\u8981\u7684\u72b6\u6001\u662f\u4e00\u6837\u7684\uff0c\u90a3\u4e48\u53ef\u4ee5\u5728 main() \u7684\u6700\u5f00\u5934\u5199 memset \u5982\u679c\u6bcf\u4e00\u4e2a\u8be2\u95ee\u5e95\u4e0b\u4f1a\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u8981\u5728 solve \u6216\u8005\u5f53\u524d\u8be2\u95ee\u5e95\u4e0b\u5199 memset \uff08\u8fd9\u79cd\u5e38\u89c1\u4e00\u70b9\uff09\u3002","title":"\u6570\u4f4d DP"},{"location":"algor/dp/digit-dp/#_1","text":"\u8fd9\u4e00\u7c7b\u95ee\u9898\u90fd\u662f\u8be2\u95ee\u67d0\u4e2a\u533a\u95f4 \\([L,R]\\) \u5f53\u4e2d \u6ee1\u8db3\u67d0\u4e2a\u6761\u4ef6\u7684\u6570 \u7684\u4e2a\u6570\u3002 \u5e76\u4e14 \\(L,R\\) \u7684 \u8303\u56f4\u4e00\u822c\u5f88\u5927 \u5e38\u89c1\u7684\u9650\u5236\u6709\uff1a \u5404\u4f4d\u6570\u5b57\u548c\u4e0d\u80fd\u662f\u67d0\u4e2a\u6574\u6570\u7684\u500d\u6570 \u67d0\u4e00\u4e2a\u6570\u5b57\u4e0d\u80fd\u51fa\u73b0 \u6570\u5b57\u5fc5\u987b\u6309\u7167\u5347\u5e8f\u6392\u5217 \u4e0d\u80fd\u51fa\u73b0\u67d0\u4e24\u4e2a\u8fde\u7eed\u7684\u6570\u5b57","title":"\u6cdb\u5316"},{"location":"algor/dp/digit-dp/#_2","text":"\u5957\u8def\u65e0\u975e\u4e24\u6b65\uff1a \u5148\u628a \\(F(L),F(R)\\) \u7b97\u51fa\u6765\uff0c\u7b54\u6848\u5c31\u662f \\(F(R)-F(L-1)\\) \u3002 \u5176\u4e2d \\(F(X)\\) \u8868\u793a \\([1,X]\\) \u5f53\u4e2d\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u7684\u4e2a\u6570\u3002 \u8003\u8651\u6bcf\u4e00\u4f4d\u600e\u4e48\u586b\uff0c\u662f\u5426\u6709\u4e0a\u754c\u9650\u5236\u6216\u8005\u524d\u5bfc\u96f6\u9650\u5236\u3002 \u4e0a\u754c\u9650\u5236\u662f\u8fd9\u6837\u7684\uff1a\u6bd4\u5982\u4f60\u73b0\u5728\u8981\u6c42 \\(F(n)\\) \u3002 \u5e76\u4e14 \\(n=12345678\\) \u6211\u4eec\u4ece\u6700\u9ad8\u4f4d\uff0c\u4e5f\u5c31\u662f \\(8\\) \u6240\u5904\u7684\u4f4d\u7f6e\u5f00\u59cb\u5904\u7406\u3002 \u90a3\u4e48\u8fd9\u4e00\u4f4d\u5c31\u6709\u4e24\u79cd\u60c5\u51b5\uff1a \u8fd9\u4e00\u4f4d\u586b \\(8\\) \uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0b\u4e00\u4f4d\u53ea\u80fd\u586b \\(0 \\sim 7\\) \u3002 \u8fd9\u4e00\u4f4d\u586b \\(0\\sim 7\\) \u7684\u67d0\u4e00\u4e2a\u6570\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0b\u4e00\u4f4d\uff0c\u5305\u62ec\u4e4b\u540e\u7684\u6240\u6709\u4f4d\u60f3\u600e\u4e48\u586b\u600e\u4e48\u586b\uff08 \\(0 \\sim 9\\) \uff09 \u8fd9\u4e2a\u5c31\u76f4\u63a5\u5f00\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u4e00\u4e0b\uff0c\u6765\u786e\u5b9a\u5f53\u524d\u7684\u51b3\u7b56\u96c6\u5408\u662f\u4ec0\u4e48\uff08\u53ef\u4ee5\u9009\u62e9\u7684\u6570\u5b57\u6709\u54ea\u4e9b\uff09\u3002 \u7136\u540e\u524d\u5bfc\u96f6\u9650\u5236\u4e5f\u662f\u76f4\u63a5\u8bb0\u5f55\u4e00\u4e0b\u5373\u53ef\uff08\u5982\u679c\u524d\u5bfc\u96f6\u6807\u8bb0\u4e3a True \u5219\u8868\u793a\u4ece\u5f00\u59cb\u641c\u7d22\u4e00\u76f4\u5230\u73b0\u5728\u90fd\u586b\u7684\u662f \\(0\\) \uff09\u3002 \u8fd9\u4e2a\u5c31\u662f\u5728 DP\uff0c\u8bbe \\(dp(x, y, 0/1, 0/1)\\) \u8868\u793a\u6ee1\u8db3\u4ec0\u4e48\u6761\u4ef6\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\u7684\u7b54\u6848\uff0c\u4e0d\u8fc7\u4e3a\u4e86\u5b9e\u73b0\u65b9\u4fbf\uff0c\u901a\u5e38\u4f1a\u5199\u8bb0\u5fc6\u5316\u641c\u7d22\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 function dfs ( \u5f53\u524d\u4f4d\u6570 x , \u5f53\u524d\u72b6\u6001 y , \u524d\u5bfc\u96f6\u9650\u5236 st , \u4e0a\u754c\u9650\u5236 limit ) : if \u5230\u8fbe\u8fb9\u754c and \u7b26\u5408\u8981\u6c42 then \u8fd4\u56de\u8fb9\u754c\u7684\u5408\u6cd5\u7b54\u6848 if \u5230\u8fbe\u8fb9\u754c and \u4e0d\u7b26\u5408\u8981\u6c42 then \u8fd4\u56de\u8fb9\u754c\u7684\u4e0d\u5408\u6cd5\u7b54\u6848 # \u8fd9\u4e2a\u4e00\u822c\u4e0d\u4f1a\u6709\uff0c\u4e00\u822c\u679a\u4e3e\u586b\u6570\u7684\u65f6\u5019\u5982\u679c\u6ca1\u6709\u9650\u5236\u5c31\u4f1a\u6709\uff08\u53ea\u8981\u4f1a\u8bbf\u95ee\u5230\u8fb9\u754c\u4e0d\u5408\u6cd5\u60c5\u51b5\u5c31\u8981\u52a0\u4e0a\uff09\u3002 if \u5f53\u524d\u7684\u72b6\u6001\u5df2\u7ecf\u8bb0\u5fc6\u5316\u8fc7 then \u8fd4\u56de\u8bb0\u5f55\u7684\u7b54\u6848 var result = 0 # \u8bb0\u5f55\u7b54\u6848 var up = 9 # \u5f53\u524d\u4f4d\u586b\u6570\u7684\u4e0a\u9650 if \u6709\u4e0a\u754c\u9650\u5236 then up = \u5f53\u524d\u4f4d\u5728 n \u5f53\u4e2d\u7684\u6570\u5b57 # n \u662f\u8981\u6c42\u7684 F ( n ) \u7684\u81ea\u53d8\u91cf for \u679a\u4e3e\u5f53\u524d\u4f4d\u7684\u586b\u6570\u503c from 0 to up : if \u5f53\u524d\u4f4d\u586b\u7684\u6570\u4e0d\u7b26\u5408\u9650\u5236 then continue if \u6709\u524d\u5bfc\u96f6\u9650\u5236 and \u5f53\u524d\u586b\u5199\u7684\u662f 0 then result += dfs ( x - 1 , \u4e0b\u4e00\u4e2a\u72b6\u6001 , true , \u662f\u5426\u89e6\u78b0\u4e0a\u754c\u9650\u5236 ) else then result += dfs ( x - 1 , \u4e0b\u4e00\u4e2a\u72b6\u6001 , false , \u662f\u5426\u89e6\u78b0\u4e0a\u754c\u9650\u5236 ) \u8bb0\u5f55\u5f53\u524d\u72b6\u6001\u7684\u7b54\u6848 f [ x ][ y ] = result \u8fd4\u56de\u7b54\u6848 result function solve ( \u8981\u6c42\u7684 F \u7684\u81ea\u53d8\u91cf n ) \u5b58\u50a8\u6bcf\u4e00\u4f4d\u6570\u5b57\u7684 vector \u6e05\u7a7a while n ! = 0 then vector <== n % base # base \u8868\u793a\u662f\u54ea\u4e00\u4e2a\u8fdb\u5236 n /= base \u6e05\u7a7a\u72b6\u6001\u6570\u7ec4 \u8fd4\u56de\u5bf9\u5e94\u72b6\u6001\u7684\u7b54\u6848\uff08\u8c03\u7528 dfs \uff09 \u6709\u51e0\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u70b9\uff1a \u5f53\u524d\u72b6\u6001 \\(y\\) \u9700\u8981\u7531\u9898\u76ee\u7684\u9650\u5236\u51b3\u5b9a\uff0c\u6bd4\u5982 \u4e0a\u4e00\u4e2a\u586b\u5199\u7684/\u5f53\u524d\u7684\u6570\u4f4d\u603b\u548c/\u5df2\u7ecf\u586b\u4e86\u591a\u5c11\u4f4d \u8fd9\u79cd\u9650\u5236\u3002 \u8fb9\u754c\u4e00\u822c\u662f \\(x=0\\) \uff0c\u6709\u7684\u65f6\u5019\u9700\u8981\u5224\u65ad\u5f53\u524d\u72b6\u6001\u662f\u5426\u5408\u6cd5\uff08\u6bd4\u5982\u662f\u5426\u662f\u67d0\u4e2a\u6570\u7684\u500d\u6570\u4e4b\u7c7b\u7684\uff09\uff0c\u800c\u4e14\u8fb9\u754c\u7684\u7b54\u6848\u8981\u770b\u60c5\u51b5\u800c\u5b9a\u3002 \u7b2c 15 \u884c\u7684\u201c\u9650\u5236\u201d\uff0c\u8fd9\u4e2a\u9700\u8981\u770b\u9898\u76ee\u8981\u6c42\uff0c\u6bd4\u5982\u6709\u6ca1\u6709\u54ea\u4e00\u4e2a\u6570\u4e0d\u80fd\u51fa\u73b0\uff0c\u54ea\u4e24\u4e2a\u6570\u4e0d\u80fd\u8fde\u7eed\u51fa\u73b0\uff08\u8fd9\u4e2a\u9700\u8981\u5728\u5f00\u59cb\u7684\u65f6\u5019\u8bb0\u5f55\u4e0a\u4e00\u4f4d\uff09\u7684\u8981\u6c42\u3002 \u524d\u5bfc\u96f6\u9650\u5236\u4e0d\u662f\u6240\u6709\u9898\u90fd\u4f1a\u6709\uff0c\u5982\u679c\u6709\u524d\u5bfc\u96f6\u9650\u5236\uff0c\u5728\u9012\u5f52\u4e0b\u4e00\u4e2a\u72b6\u6001\u7684\u65f6\u5019\u8bb0\u5f97\u8ba9\u4e0b\u4e00\u4e2a\u72b6\u6001\u5f3a\u5236\u5408\u6cd5\uff08\u56e0\u4e3a\u5728\u524d\u5bfc\u96f6\u9650\u5236\u4e0b\uff0c\u5b9e\u9645\u4e0a\u8fd9\u4e00\u4f4d\u662f\u6ca1\u6709\u586b\u6570\u5b57\u7684\uff0c\u800c\u4e0d\u662f\u586b\u4e86 0\uff09\u3002","title":"\u5b9e\u73b0"},{"location":"algor/dp/digit-dp/#_3","text":"\u6765\u4e00\u9053\u7ecf\u5178\u9898\uff08\u5305\u542b\u6240\u6709\u8981\u7d20\uff09\uff1a [SCOI2009] Windy\u6570\uff1a\u4e0d\u542b\u524d\u5bfc\u96f6\u4e14\u76f8\u90bb\u4e24\u4e2a\u6570\u5b57\u4e4b\u5dee\u81f3\u5c11\u4e3a \\(2\\) \u7684\u6b63\u6574\u6570\u88ab\u79f0\u4e3a Windy \u6570\u3002 \u95ee\u4f60 \\(L \\sim R\\) \u5f53\u4e2d\u6709\u591a\u5c11\u4e2a Windy \u6570\u3002 \\(1\\le L \\le R \\le 2\\times 10^9\\) \uff08\u6211\u6700\u5f00\u59cb\u6709\u4e2a\u9519\uff0c\u533a\u95f4\u662f\u9ed8\u8ba4 \\(L\\not=R\\) \u7684\uff0c\u6240\u4ee5\u5982\u679c\u8981\u76f8\u7b49\u5c31\u4e0d\u80fd\u5199\u201c\u533a\u95f4\u201d\uff0c\u67d0\u6b21\u6a21\u62df\u8d5b\u7684\u9898\u4e5f\u56e0\u4e3a\u8fd9\u4e2a\u5dee\u70b9\u88ab\u55b7\uff08 \u5957\u677f\u5b50\u5c31\u884c\u4e86\uff0c\u6839\u672c\u4e0d\u9700\u8981\u8fc7\u591a\u7684\u601d\u8003\u3002 \u6ce8\u610f\u8fd9\u4e2a\u4e0d\u542b\u524d\u5bfc\u96f6\u7684\u610f\u601d\u662f\uff0c 0012 , 012 , 12 \u7b97\u4f5c\u540c\u4e00\u4e2a\u65b9\u6848\u3002 \u76f4\u63a5\u4e0a\u4ee3\u7801\uff0c\u6709\u51e0\u4e2a\u5c0f\u7684\u6ce8\u610f\u70b9\u5df2\u7ecf\u5199\u5728\u91cc\u9762\u4e86\uff1a Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 // author : black_trees #include <cstdio> #include <vector> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 15 + 10 ; int L , R ; std :: vector < int > dight ; int f [ si ][ si ][ 2 ][ 2 ]; int dfs ( int x , int y , int st , int limit ) { if ( ! x ) return 1 ; if ( ~ f [ x ][ y ][ st ][ limit ]) return f [ x ][ y ][ st ][ limit ]; int ret = 0 , up = 9 ; if ( limit ) up = dight [ x - 1 ]; for ( int i = 0 ; i <= up ; ++ i ) { if ( abs ( i - y ) < 2 ) continue ; // \u4e0d\u5408\u6cd5 if ( st && i == 0 ) ret += dfs ( x - 1 , 11 , 1 , limit && i == up ); // \u5f3a\u5236\u5408\u6cd5 else ret += dfs ( x - 1 , i , 0 , limit && i == up ); } f [ x ][ y ][ st ][ limit ] = ret ; return ret ; } int solve ( int n ) { dight . clear (); while ( n ) dight . push_back ( n % 10 ), n /= 10 ; memset ( f , -1 , sizeof f ); // \u6ce8\u610f\u6e05\u7a7a return dfs ( dight . size (), 11 , 1 , 1 ); // \u5f3a\u5236\u5408\u6cd5 } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> L >> R ; cout << solve ( R ) - solve ( L - 1 ) << endl ; return 0 ; } \u8fd8\u6709\u51e0\u4e2a\u9700\u8981\u7279\u6b8a\u6ce8\u610f\u7684\u70b9\uff1a Warning \u6839\u636e\u72b6\u6001\u6765\u5f00\u8bb0\u5fc6\u5316\u7684\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u4e0d\u8981\u5f00\u5c0f\u4e86\uff0c\u4e5f\u8981\u5c0f\u5fc3\u8d1f\u4e0b\u6807\uff01\u3002 \u6e05\u7a7a\u8bb0\u5fc6\u5316\u6570\u7ec4\u7684\u65f6\u673a\u4e5f\u9700\u8981\u628a\u63e1\u3002 \u5982\u679c\u4e0d\u7ba1\u600e\u4e48\u8be2\u95ee\u9700\u8981\u7684\u72b6\u6001\u662f\u4e00\u6837\u7684\uff0c\u90a3\u4e48\u53ef\u4ee5\u5728 main() \u7684\u6700\u5f00\u5934\u5199 memset \u5982\u679c\u6bcf\u4e00\u4e2a\u8be2\u95ee\u5e95\u4e0b\u4f1a\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u8981\u5728 solve \u6216\u8005\u5f53\u524d\u8be2\u95ee\u5e95\u4e0b\u5199 memset \uff08\u8fd9\u79cd\u5e38\u89c1\u4e00\u70b9\uff09\u3002","title":"\u4f8b\u9898"},{"location":"algor/dp/expectation/","text":"\u57fa\u672c\u7684\u4e00\u4e9b\u4e1c\u897f\u53ef\u4ee5\u770b \u8fd9\u91cc \u671f\u671b dp \u03c8(\uff40\u2207\u00b4)\u03c8 \u671f\u671b dp \u548c\u6982\u7387 dp \u7684\u533a\u522b\u5c31\u5728\u4e8e\uff0c\u671f\u671b dp \u8fd8\u9700\u8981\u8003\u8651\u53d6\u503c\u95ee\u9898\u3002 \u6240\u4ee5\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u671f\u671b dp \u7684\u5904\u7406\u90fd\u6bd4\u6982\u7387 dp \u7a0d\u8981\u590d\u6742\u4e00\u4e9b\uff0c\u4e0d\u8fc7\u5176\u5b9e\u4e5f\u4e0d\u7b97\u592a\u96be\u3002 ABC280E Critical Hit \u03c8(\uff40\u2207\u00b4)\u03c8 \u6709\u4e00\u4e2a \\(n\\) \u6ef4\u8840\u7684\u602a\u7269\u3002\u6bcf\u4e00\u6b21\u653b\u51fb\u4f60\u6709 \\(P\\%\\) \u7684\u6982\u7387\u8ba9\u5b83\u5931\u53bb \\(2\\) \u6ef4\u8840\uff0c\u6709 \\((100-P)\\%\\) \u7684\u6982\u7387\u8ba9\u5b83\u5931\u53bb \\(1\\) \u6ef4\u8840\u3002 \u5982\u679c\u653b\u51fb\u8fc7\u540e\u602a\u7269\u7684\u8840\u91cf \\(\\leq 0\\) \uff0c\u5b83\u5c31\u6b7b\u4e86\u3002\u4f60\u9700\u8981\u4e00\u76f4\u653b\u51fb\u602a\u7269\u76f4\u5230\u5b83\u6b7b\u4ea1\u3002\u8f93\u51fa\u653b\u51fb\u6b21\u6570\u7684\u671f\u671b\u5bf9 \\(998244353\\) \u53d6\u6a21\u7684\u503c\u3002 \\(1\\leq n\\leq 2\\times10^5,0\\leq P\\leq 100\\) \u3002 \u8bbe \\(dp(i)\\) \u8868\u793a\u6253\u6b7b\u4e00\u53ea\u8840\u91cf\u4e3a \\(i\\) \u7684\u602a\u7269\u7684\u6b65\u6570\u671f\u671b\u3002 \u56e0\u4e3a\u8840\u91cf\u4e3a \\(1\\) \u7684\u65f6\u5019\u600e\u4e48\u6253\u90fd\u662f gg\uff0c\u6240\u4ee5 \\(dp(1) = 1\\) \u3002 \u65b9\u7a0b\u6bd4\u8f83\u663e\u7136\uff0c\u5982\u679c\u5f53\u524d\u6253\u6389\u4e86 \\(1\\) \u6ef4\u8840\uff0c\u90a3\u4e48\u5e94\u5f53\u4ece \\(dp(i - 1)\\) \u8f6c\u79fb\u8fc7\u6765\uff0c\u6982\u7387\u4e3a \\(\\dfrac{100 - P}{100}\\) \uff0c\u653b\u51fb\u6b21\u6570\u52a0\u4e00\u3002 \u5426\u5219\u4ece \\(dp(i - 2)\\) \u8f6c\u79fb\u8fc7\u6765\uff0c\u6982\u7387\u4e3a \\(\\dfrac{P}{100}\\) \u3002 \u53ef\u4ee5\u5f97\u5230\u65b9\u7a0b\uff1a \\[dp(i) = \\dfrac{100 - P}{100}dp(i - 1) + \\dfrac{P}{100}dp(i - 2) + 1\\] \u6211\u4eec\u8fd9\u91cc\u7701\u53bb\u4e86\u76f4\u63a5\u4ee3\u5165\u671f\u671b\u7684\u5b9a\u4e49\u7684\u8fc7\u7a0b\uff0c\u53ea\u9700\u8981\u4e58\u6cd5\u5206\u914d\u5f8b\u4e00\u4e0b\u5c31\u53ef\u4ee5\u77e5\u9053\u5f0f\u5b50\u7684\u6b63\u786e\u6027\u4e86\u3002 \u4f60\u53ef\u4ee5\u628a\u4e0a\u4e00\u4e2a\u72b6\u6001 \u770b\u4f5c \u8fd9\u4e2a\u72b6\u6001\u7684\u4e00\u4e2a\u53d6\u503c\uff0c\u4e0d\u8fc7\u5176\u672c\u8d28\u8fd8\u662f\u63a8\u5f0f\u5b50\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; // using i64 = long long; #define int long long const int si = 2e5 + 10 ; const int mod = 998244353 ; int n , p ; int dp [ si ]; int qpow ( int a , int b ) { int ret = 1 % mod ; for (; b ; b >>= 1 ) { if ( b & 1 ) ret = ret * a % mod ; a = a * a % mod ; } return ret % mod ; } int inv ( int x ) { return qpow ( x , mod - 2 ); } const int iv = inv ( 100 ); signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> p ; dp [ 0 ] = 0 , dp [ 1 ] = 1 ; for ( int i = 2 ; i <= n + 1 ; ++ i ) dp [ i ] = (( dp [ i - 1 ] * ( 100 - p + mod ) % mod * iv % mod ) + ( dp [ i - 2 ] * p % mod * iv % mod ) + 1 % mod + mod ) % mod ; cout << dp [ n ] << endl ; return 0 ; } Acwing217. \u7eff\u8c46\u86d9\u7684\u5f52\u5bbf \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u51fa\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u7684\u8fde\u901a\u56fe\uff0c\u8d77\u70b9\u4e3a \\(1\\) \uff0c\u7ec8\u70b9\u4e3a \\(N\\) \uff0c\u6bcf\u6761\u8fb9\u90fd\u6709\u4e00\u4e2a\u957f\u5ea6\u3002 \u6570\u636e\u4fdd\u8bc1\u4ece\u8d77\u70b9\u51fa\u53d1\u80fd\u591f\u5230\u8fbe\u56fe\u4e2d\u6240\u6709\u7684\u70b9\uff0c\u56fe\u4e2d\u6240\u6709\u7684\u70b9\u4e5f\u90fd\u80fd\u591f\u5230\u8fbe\u7ec8\u70b9\u3002 \u7eff\u8c46\u86d9\u4ece\u8d77\u70b9\u51fa\u53d1\uff0c\u8d70\u5411\u7ec8\u70b9\u3002 \u5230\u8fbe\u6bcf\u4e00\u4e2a\u9876\u70b9\u65f6\uff0c\u5982\u679c\u6709 \\(K\\) \u6761\u79bb\u5f00\u8be5\u70b9\u7684\u9053\u8def\uff0c\u7eff\u8c46\u86d9\u53ef\u4ee5\u9009\u62e9\u4efb\u610f\u4e00\u6761\u9053\u8def\u79bb\u5f00\u8be5\u70b9\uff0c\u5e76\u4e14\u8d70\u5411\u6bcf\u6761\u8def\u7684\u6982\u7387\u4e3a \\(\\dfrac{1}{K}\\) \u3002 \u73b0\u5728\u7eff\u8c46\u86d9\u60f3\u77e5\u9053\uff0c\u4ece\u8d77\u70b9\u8d70\u5230\u7ec8\u70b9\u6240\u7ecf\u8fc7\u7684\u8def\u5f84\u603b\u957f\u5ea6\u7684\u671f\u671b\u662f\u591a\u5c11\uff1f \\(1\\le n \\le 1e5, 1\\le m \\le 2e5\\) \u3002 \u9996\u5148\u6211\u4eec\u6ce8\u610f\u5230\u8981\u6c42\u7684\u662f\u4ece \\(1 \\to n\\) \u7684\u8def\u5f84\u957f\u5ea6\u7684\u671f\u671b\uff0c\u4e5f\u5c31\u662f\u6240\u6709\u53ef\u80fd\u7684\u8def\u5f84\u957f\u5ea6\u4e58\u4e0a\u5bf9\u5e94\u7684\u6982\u7387\u3002 \u663e\u7136\u6211\u4eec\u4e0d\u53ef\u80fd\u76f4\u63a5\u4e00\u4e2a\u5f0f\u5b50\u5c31\u628a\u8fd9\u4e2a\u4e1c\u897f\u5199\u51fa\u6765\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u671f\u671b\u9012\u63a8/dp\u3002 \u8bbe \\(dp(u)\\) \u8868\u793a\u4ece \\(1 \\to u\\) \u7684\u8def\u5f84\u957f\u5ea6\u7684\u671f\u671b\u3002 \u6211\u4eec\u6839\u636e\u5b9a\u4e49\u5c1d\u8bd5\u63a8\u4e00\u4e0b\u5f0f\u5b50\uff0c\u5047\u8bbe \\(u\\) \u662f\u4ece \\(v_1 \\dots v_r\\) \u8fd9\u4e9b\u8282\u70b9\u53ef\u4ee5\u5230\u8fbe\u7684\u3002 \u5047\u8bbe \\(x(v_i)_j\\) \u8868\u793a\u4ece \\(1 \\to v_i\\) \u7684\u8def\u5f84\u7684\u67d0\u4e00\u79cd\u53ef\u80fd\u957f\u5ea6\uff0c \\(p(v_i)_j\\) \u8868\u793a\u51fa\u73b0 \\(x(v_i)_j\\) \u8fd9\u79cd\u60c5\u51b5\u7684\u6982\u7387\u3002 \u90a3\u4e48\u5c31\u6709\uff1a \\[ \\begin{aligned} dp(u) &= \\sum\\limits_i\\sum\\limits_j(p(v_i)_j \\times \\dfrac{1}{deg(v_i)} \\times (x(v_i)_j + w(u, v_i))) \\\\ &= \\sum\\limits_i(\\dfrac{1}{deg(v_i)} \\times \\sum\\limits_j (p(v_i)_j \\times x(v_i)_j + p(v_i)_j \\times w(u, v_i))) \\\\ &= \\sum\\limits_i(\\dfrac{1}{deg(v_i)} \\times (dp(v_i) + w(u, v_i) \\times \\sum\\limits_j p(v_i)_j)) \\end{aligned} \\] \u6ce8\u610f\u5230 \\(\\sum\\limits_j (p(v_i)_j)\\) \u5c31\u662f\u4ece \\(1\\) \u51fa\u53d1\uff0c\u8d70\u5230 \\(v_i\\) \u7684\u6982\u7387\u3002 \u6240\u4ee5\u6211\u4eec\u8f6c\u79fb dp \u7684\u65f6\u5019\u987a\u5e26\u7740\u5904\u7406\u4e00\u4e2a\u6570\u7ec4 \\(P(v_i)\\) \u8868\u793a\u4ece \\(1 \\to v_i\\) \u7684\u6982\u7387\u5c31\u884c\u4e86\u3002 \u521d\u59cb\u5316 \\(dp(1) = 0\\) \uff0c\u7ec8\u6001 \\(dp(n)\\) \u3002 \u5176\u5b9e\u8fd9\u79cd\u201c\u6b63\u63a8\u201d\u7684\u65b9\u6cd5\u6bd4\u8f83\u9ebb\u70e6\uff0c\u5176\u539f\u56e0\u5728\u5728\u4e8e\u9700\u8981\u5904\u7406 \\(P\\) \u8fd9\u4e2a\u6570\u7ec4\uff0c\u56e0\u4e3a\u4ece \\(1 \\to v_i\\) \u7684\u6982\u7387\u662f\u4e0d\u80fd\u76f4\u63a5\u786e\u5b9a\u7684\u3002 \u6ce8\u610f\u5230\u6211\u4eec\u6700\u540e\u4e00\u5b9a\u4f1a\u8d70\u5230 \\(n\\) \uff0c\u4e5f\u5c31\u662f\u8bf4\u4ece \\(\\forall u \\not= n, P(u \\to n) = 1\\) \uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u8003\u8651\u5012\u63a8\u4f1a\u600e\u6837\u5462\uff1f \u8bbe \\(dp(u)\\) \u8868\u793a\u4ece \\(u \\to n\\) \u7684\u8def\u5f84\u957f\u5ea6\u671f\u671b\uff0c\u5e76\u4e14 \\(u\\) \u53ef\u4ee5\u5230\u8fbe \\(v_1 \\dots v_r\\) \u3002 \u6839\u636e\u5b9a\u4e49\uff0c\u7c7b\u4f3c\u6b63\u63a8\uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u51fa\uff1a \\[ \\begin{aligned} dp(u) = \\dfrac{1}{deg(u)}\\sum\\limits_i(dp(v_i) + w(u, v_i) \\times \\sum\\limits_j p(v_i)_j) \\end{aligned} \\] \u662f\u4e0d\u662f\u57fa\u672c\u4e00\u6837\uff1f\u5e76\u4e0d\uff0c\u6ce8\u610f\u5230\u8fd9\u91cc\u7684 \\(\\sum\\limits_jp(v_i)_j\\) \u8868\u793a\u7684\u662f\u4ece \\(v_i\\) \u51fa\u53d1\u8d70\u5230 \\(n\\) \u7684\u6982\u7387\uff0c\u8fd9\u4e2a\u6982\u7387 \u4e00\u5b9a\u662f \\(1\\) \uff0c\u6240\u4ee5\u72b6\u6001\u8f6c\u79fb\u53d8\u4e3a\uff1a \\[ \\begin{aligned} dp(u) = \\dfrac{1}{deg(v_i)} \\sum\\limits_i(dp(v_i) + w(u, v_i)) \\end{aligned} \\] \u7136\u540e\u8f6c\u79fb\u5c31\u4e0d\u7528\u989d\u5916\u7ef4\u62a4\u4fe1\u606f\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 // author : black_trees #include <cmath> #include <queue> #include <cstdio> #include <cstring> #include <iomanip> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; using ldb = long double ; const int si = 1e5 + 10 ; int n , m ; int tot = 0 , head [ si ]; struct Edge { int ver , Next , w ; } e [ si << 1 ]; inline void add ( int u , int v , int w ) { e [ tot ] = ( Edge ) { v , head [ u ], w }, head [ u ] = tot ++ ; } std :: queue < int > q ; int deg [ si ], k [ si ]; ldb dp [ si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); memset ( head , -1 , sizeof head ); cin >> n >> m , dp [ n ] = 0 ; for ( int i = 1 ; i <= m ; ++ i ) { int u , v , w ; cin >> u >> v >> w ; add ( v , u , w ), deg [ u ] ++ , k [ u ] ++ ; } q . push ( n ); while ( ! q . empty ()) { int u = q . front (); q . pop (); for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver , w = e [ i ]. w ; deg [ v ] -- ; dp [ v ] += ( dp [ u ] + 1.0 * w ) / ( 1.0 * k [ v ]); if ( ! deg [ v ]) q . push ( v ); } } cout << fixed << setprecision ( 2 ) << dp [ 1 ] << endl ; return 0 ; } [HNOI2013] \u6e38\u8d70 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5c0f Z \u5728\u8be5\u56fe\u4e0a\u8fdb\u884c\u968f\u673a\u6e38\u8d70\uff0c\u521d\u59cb\u65f6\u5c0f Z \u5728 \\(1\\) \u53f7\u9876\u70b9\uff0c\u6bcf\u4e00\u6b65\u5c0f Z \u4ee5\u76f8\u7b49\u7684\u6982\u7387\u968f\u673a\u9009\u62e9\u5f53\u524d\u9876\u70b9\u7684\u67d0\u6761\u8fb9\uff0c\u6cbf\u7740\u8fd9\u6761\u8fb9\u8d70\u5230\u4e0b\u4e00\u4e2a\u9876\u70b9\uff0c\u83b7\u5f97\u7b49\u4e8e\u8fd9\u6761\u8fb9\u7684\u7f16\u53f7\u7684\u5206\u6570\u3002\u5f53\u5c0f Z \u5230\u8fbe \\(n\\) \u53f7\u9876\u70b9\u65f6\u6e38\u8d70\u7ed3\u675f\uff0c\u603b\u5206\u4e3a\u6240\u6709\u83b7\u5f97\u7684\u5206\u6570\u4e4b\u548c\u3002 \u73b0\u5728\uff0c\u8bf7\u4f60\u5bf9\u8fd9 \\(m\\) \u6761\u8fb9\u8fdb\u884c\u7f16\u53f7\uff0c\u4f7f\u5f97\u5c0f Z \u83b7\u5f97\u7684\u603b\u5206\u7684\u671f\u671b\u503c\u6700\u5c0f\u3002 \u4fdd\u8bc1 \\(2\\leq n \\leq 500\\) \uff0c \\(1 \\leq m \\leq 125000\\) \uff0c \\(1 \\leq u, v \\leq n\\) \uff0c\u7ed9\u51fa\u7684\u56fe\u65e0\u91cd\u8fb9\u548c\u81ea\u73af\uff0c\u4e14\u4ece \\(1\\) \u51fa\u53d1\u53ef\u4ee5\u5230\u8fbe\u6240\u6709\u7684\u8282\u70b9\u3002 \u5148\u76f4\u63a5\u8003\u8651\u7b97\u8fb9\u7684\u8d21\u732e\uff0c\u76f4\u63a5\u7b97\u7684\u8bdd\uff0c\u6ca1\u6cd5 \\(O(m)\\) \u7684\uff0c\u6ce8\u610f\u5230 \\(n \\le 500\\) \uff0c\u6211\u4eec\u4ece \\(n\\) \u5165\u624b\u3002 \u53ef\u4ee5\u8bbe \\(g(i)\\) \u8868\u793a\u7f16\u53f7\u4e3a \\(i\\) \u7684\u8fb9\u88ab\u7ecf\u8fc7\u7684\u671f\u671b\u6b21\u6570\uff0c\u6211\u4eec\u8ba9 \\(g(i)\\) \u5927\u7684\u7f16\u53f7\u5c0f\u5373\u53ef\uff0c\u8fd9\u4e2a\u662f\u6392\u5e8f\u4e0d\u7b49\u5f0f\u3002 \u5982\u679c \\(f(i)\\) \u8868\u793a\u70b9 \\(i\\) \u88ab\u7ecf\u8fc7\u7684\u6b21\u6570\uff0c\u90a3\u4e48 \\(g(u \\to v) = \\dfrac{f(u)}{d(u)} + \\dfrac{f(v)}{d(v)}\\) \u3002 \u5176\u4e2d \\(d\\) \u8868\u793a\u5ea6\u6570\uff0c\u800c \\(f(i) = \\sum\\limits_{v \\to u\\land v\\not=n} \\dfrac{f(v)}{d(v)},(i \\not= 1)\\) \u3002 \u5982\u679c \\(i = 1, f(i) = \\sum\\limits_{v \\to u \\land v\\not= n} \\dfrac{f(v)}{d(v)} + 1\\) \u3002 \u7136\u540e\u8fd9\u5c31\u662f\u4e00\u4e2a\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff0c\u9ad8\u65af\u6d88\u5143\u5373\u53ef\uff0c\u590d\u6742\u5ea6 \\(O(n^3)\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iomanip> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; using ldb = long double ; const ldb eps = 1e-5 ; const int si = 5e2 + 10 ; const int sim = 5e5 + 10 ; int n , m ; int tot = 0 , head [ si ]; struct Edge { int ver , Next ; } e [ sim ]; inline void add ( int u , int v ) { e [ tot ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot ++ ; } int from [ sim ], to [ sim ]; ldb f [ sim ], deg [ si ]; namespace Gauss { ldb x [ si ]; ldb c [ si ][ si ], d [ si ]; void fill () { for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) c [ i ][ j ] = 0.0 ; d [ i ] = 0.0 , x [ i ] = 0.0 ; } for ( int u = 1 ; u < n ; ++ u ) { for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == u ) continue ; c [ u ][ v ] = ( 1.0 / deg [ v ]); } c [ u ][ u ] = -1.0 , d [ u ] = -0.0 ; } d [ 1 ] = -1.0 , x [ n ] = 0.0 ; } void solve () { for ( int i = 1 ; i < n ; ++ i ) { int l = i ; for ( int j = i + 1 ; j < n ; ++ j ) if ( fabs ( c [ j ][ i ]) - fabs ( c [ l ][ i ]) > eps ) l = j ; if ( l != i ) { for ( int j = 1 ; j <= n ; ++ j ) swap ( c [ l ][ j ], c [ i ][ j ]); swap ( d [ l ], d [ i ]); } if ( fabs ( c [ i ][ i ]) >= eps ) { for ( int j = 1 ; j < n ; ++ j ) { if ( i == j ) continue ; ldb rate = c [ j ][ i ] / c [ i ][ i ]; for ( int k = 1 ; k <= n ; ++ k ) c [ j ][ k ] -= c [ i ][ k ] * rate ; d [ j ] -= rate * d [ i ]; } } } for ( int i = n - 1 ; i >= 1 ; -- i ) { for ( int j = i + 1 ; j < n ; ++ j ) d [ i ] -= x [ j ] * c [ i ][ j ]; x [ i ] = d [ i ] / c [ i ][ i ]; } } } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); memset ( head , -1 , sizeof head ); cin >> n >> m ; for ( int i = 1 ; i <= m ; ++ i ) { int u , v ; cin >> u >> v ; add ( u , v ), add ( v , u ); from [ i ] = u , to [ i ] = v ; deg [ u ] += 1.0 , deg [ v ] += 1.0 ; } Gauss :: fill (), Gauss :: solve (); for ( int i = 1 ; i <= m ; ++ i ) { if ( from [ i ] != n ) f [ i ] += Gauss :: x [ from [ i ]] / deg [ from [ i ]]; if ( to [ i ] != n ) f [ i ] += Gauss :: x [ to [ i ]] / deg [ to [ i ]]; } ldb ans = 0.0 ; sort ( f + 1 , f + 1 + m ); for ( int i = 1 ; i <= m ; ++ i ) ans += f [ i ] * ( m - i + 1 ); cout << fixed << setprecision ( 3 ) << ans << endl ; return 0 ; } CF24D Broken Robot \u03c8(\uff40\u2207\u00b4)\u03c8 \\(n\\) \u884c \\(m\\) \u5217\u7684\u77e9\u9635\uff0c\u73b0\u5728\u5728 \\((x,y)\\) \uff0c\u6bcf\u6b21\u7b49\u6982\u7387\u5411\u5de6\uff0c\u53f3\uff0c\u4e0b\u8d70\u6216\u539f\u5730\u4e0d\u52a8\uff0c\u4f46\u4e0d\u80fd\u8d70\u51fa\u53bb\uff0c\u95ee\u8d70\u5230\u6700\u540e\u4e00\u884c\u671f\u671b\u7684\u6b65\u6570\u3002 \u6ce8\u610f\uff0c \\((1,1)\\) \u662f\u6728\u677f\u7684\u5de6\u4e0a\u89d2\uff0c \\((n,m)\\) \u662f\u6728\u677f\u7684\u53f3\u4e0b\u89d2\u3002 \\(1\\le n,m\\le 10^3\\) \uff0c \\(1\\le x\\le n\\) \uff0c \\(1\\le y\\le m\\) \u3002 \u65b9\u7a0b\u662f\u6bd4\u8f83\u663e\u7136\u7684\uff0c\u5982\u679c\u8bbe \\(dp(x, y)\\) \u8868\u793a\u4ece \\(x, y\\) \u8d70\u5230\u6700\u540e\u4e00\u884c\u7684\u671f\u671b\u3002 \u7136\u540e\u8003\u8651\u8fb9\u754c\u5206\u5f00\u8f6c\u79fb\uff0c\u65b9\u7a0b\u7565\uff0c\u53ef\u4ee5\u5199\u6210\u9ad8\u65af\u6d88\u5143\u7684\u5f62\u5f0f\uff0c\u6ce8\u610f\u5230\u7cfb\u6570\u77e9\u9635\u6bd4\u8f83\u7279\u6b8a\uff1a \\[ \\begin{bmatrix} &-\\frac{2}{3} &\\frac{1}{3} &0 &0 \\\\ &\\frac{1}{4} &-\\frac{3}{4} &\\frac{1}{4} &0 \\\\ &0 &\\frac{1}{4} &-\\frac{3}{4} &\\frac{1}{4} \\\\ &0 &0 &\\frac{1}{3} &-\\frac{2}{3} \\end{bmatrix} \\] \u76f4\u63a5\u4ece\u4e0b\u5f80\u4e0a\u56de\u4ee3\u5c31\u662f \\(O(n^2)\\) \u7684\u4e86\uff0c\u7c7b\u4f3c\u7684\u8fd8\u6709\uff1a \u5206\u624b\u662f\u795d\u613f \u3002 \u8fd9\u4e2a\u4e1c\u897f\u5f88\u597d\u73a9\u7684\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iomanip> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; using ldb = long double ; const int si = 1e3 + 10 ; ldb dp [ si ][ si ]; int n , m , x , y ; namespace Gauss { ldb c [ si ][ si ]; void solve () { for ( int j = n - 1 ; j >= 1 ; -- j ) { for ( int i = 1 ; i <= m ; ++ i ) { c [ i ][ i ] = 3 , c [ i ][ i - 1 ] = c [ i ][ i + 1 ] = -1 ; c [ i ][ m + 1 ] = 4 + dp [ j + 1 ][ i ]; if ( i == 1 ) c [ i ][ m + 1 ] -- , c [ i ][ i ] -- ; if ( i == m ) c [ i ][ m + 1 ] -- , c [ i ][ i ] -- ; } for ( int i = 1 ; i <= m ; ++ i ) { if ( c [ i ][ i ] == 0 ) { cout << \"No Solution\" << endl ; exit ( 0 ); } else { if ( i != m ) c [ i ][ i + 1 ] = c [ i ][ i + 1 ] / c [ i ][ i ]; c [ i ][ m + 1 ] = c [ i ][ m + 1 ] / c [ i ][ i ], c [ i ][ i ] = 1 ; if ( i != m ) { c [ i + 1 ][ i + 1 ] = c [ i + 1 ][ i + 1 ] - c [ i + 1 ][ i ] * c [ i ][ i + 1 ]; c [ i + 1 ][ m + 1 ] = c [ i + 1 ][ m + 1 ] - c [ i + 1 ][ i ] * c [ i ][ m + 1 ]; c [ i + 1 ][ i ] = 0 ; } } } for ( int i = m ; i >= 1 ; -- i ) { dp [ j ][ i ] = c [ i ][ m + 1 ]; if ( i != 1 ) c [ i - 1 ][ m + 1 ] -= c [ i - 1 ][ i ] * dp [ j ][ i ]; } } } } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> m >> x >> y ; for ( int i = 1 ; i <= m ; ++ i ) dp [ n ][ i ] = 0.0 ; Gauss :: solve (), cout << fixed << setprecision ( 10 ) << dp [ x ][ y ]; return 0 ; } \u603b\u7ed3 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6c42\u89e3\u671f\u671b DP \u65f6\uff0c\u53ef\u4ee5\u5c06\u4e0a\u4e00\u4e2a\u72b6\u6001 \u5f53\u4f5c \u4e0b\u4e00\u4e2a\u72b6\u6001\u7684\u968f\u673a\u53d8\u91cf\u7684\u53d6\u503c\uff0c\u8fdb\u800c\u7b80\u5316\u8f6c\u79fb\u3002 \u5176\u672c\u8d28\u7c7b\u4f3c\uff1a \\(\\sum (x_ip_i\\times P) = P \\times \\sum(x_ip_i)\\) \u3002 \u5f88\u591a\u65f6\u5019\uff0c\u6b63\u63a8\u9700\u8981\u989d\u5916\u5904\u7406\u6982\u7387\uff0c\u5728\u786e\u5b9a\u7ec8\u6001\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5012\u63a8\uff0c\u501f\u6b64\u6765\u7701\u53bb\u5904\u7406\u6982\u7387\u7684\u7e41\u7410\u6b65\u9aa4\u3002 \u5982\u679c\u65b9\u7a0b\u6709\u540e\u6548\u6027\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd8\u9700\u8981\u5957\u4e0a\u4e00\u4e2a\u9ad8\u65af\u6d88\u5143\u3002","title":"\u671f\u671b DP"},{"location":"algor/dp/expectation/#dp","text":"\u671f\u671b dp \u548c\u6982\u7387 dp \u7684\u533a\u522b\u5c31\u5728\u4e8e\uff0c\u671f\u671b dp \u8fd8\u9700\u8981\u8003\u8651\u53d6\u503c\u95ee\u9898\u3002 \u6240\u4ee5\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u671f\u671b dp \u7684\u5904\u7406\u90fd\u6bd4\u6982\u7387 dp \u7a0d\u8981\u590d\u6742\u4e00\u4e9b\uff0c\u4e0d\u8fc7\u5176\u5b9e\u4e5f\u4e0d\u7b97\u592a\u96be\u3002","title":"\u671f\u671b dp"},{"location":"algor/dp/expectation/#abc280e-critical-hit","text":"\u6709\u4e00\u4e2a \\(n\\) \u6ef4\u8840\u7684\u602a\u7269\u3002\u6bcf\u4e00\u6b21\u653b\u51fb\u4f60\u6709 \\(P\\%\\) \u7684\u6982\u7387\u8ba9\u5b83\u5931\u53bb \\(2\\) \u6ef4\u8840\uff0c\u6709 \\((100-P)\\%\\) \u7684\u6982\u7387\u8ba9\u5b83\u5931\u53bb \\(1\\) \u6ef4\u8840\u3002 \u5982\u679c\u653b\u51fb\u8fc7\u540e\u602a\u7269\u7684\u8840\u91cf \\(\\leq 0\\) \uff0c\u5b83\u5c31\u6b7b\u4e86\u3002\u4f60\u9700\u8981\u4e00\u76f4\u653b\u51fb\u602a\u7269\u76f4\u5230\u5b83\u6b7b\u4ea1\u3002\u8f93\u51fa\u653b\u51fb\u6b21\u6570\u7684\u671f\u671b\u5bf9 \\(998244353\\) \u53d6\u6a21\u7684\u503c\u3002 \\(1\\leq n\\leq 2\\times10^5,0\\leq P\\leq 100\\) \u3002 \u8bbe \\(dp(i)\\) \u8868\u793a\u6253\u6b7b\u4e00\u53ea\u8840\u91cf\u4e3a \\(i\\) \u7684\u602a\u7269\u7684\u6b65\u6570\u671f\u671b\u3002 \u56e0\u4e3a\u8840\u91cf\u4e3a \\(1\\) \u7684\u65f6\u5019\u600e\u4e48\u6253\u90fd\u662f gg\uff0c\u6240\u4ee5 \\(dp(1) = 1\\) \u3002 \u65b9\u7a0b\u6bd4\u8f83\u663e\u7136\uff0c\u5982\u679c\u5f53\u524d\u6253\u6389\u4e86 \\(1\\) \u6ef4\u8840\uff0c\u90a3\u4e48\u5e94\u5f53\u4ece \\(dp(i - 1)\\) \u8f6c\u79fb\u8fc7\u6765\uff0c\u6982\u7387\u4e3a \\(\\dfrac{100 - P}{100}\\) \uff0c\u653b\u51fb\u6b21\u6570\u52a0\u4e00\u3002 \u5426\u5219\u4ece \\(dp(i - 2)\\) \u8f6c\u79fb\u8fc7\u6765\uff0c\u6982\u7387\u4e3a \\(\\dfrac{P}{100}\\) \u3002 \u53ef\u4ee5\u5f97\u5230\u65b9\u7a0b\uff1a \\[dp(i) = \\dfrac{100 - P}{100}dp(i - 1) + \\dfrac{P}{100}dp(i - 2) + 1\\] \u6211\u4eec\u8fd9\u91cc\u7701\u53bb\u4e86\u76f4\u63a5\u4ee3\u5165\u671f\u671b\u7684\u5b9a\u4e49\u7684\u8fc7\u7a0b\uff0c\u53ea\u9700\u8981\u4e58\u6cd5\u5206\u914d\u5f8b\u4e00\u4e0b\u5c31\u53ef\u4ee5\u77e5\u9053\u5f0f\u5b50\u7684\u6b63\u786e\u6027\u4e86\u3002 \u4f60\u53ef\u4ee5\u628a\u4e0a\u4e00\u4e2a\u72b6\u6001 \u770b\u4f5c \u8fd9\u4e2a\u72b6\u6001\u7684\u4e00\u4e2a\u53d6\u503c\uff0c\u4e0d\u8fc7\u5176\u672c\u8d28\u8fd8\u662f\u63a8\u5f0f\u5b50\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; // using i64 = long long; #define int long long const int si = 2e5 + 10 ; const int mod = 998244353 ; int n , p ; int dp [ si ]; int qpow ( int a , int b ) { int ret = 1 % mod ; for (; b ; b >>= 1 ) { if ( b & 1 ) ret = ret * a % mod ; a = a * a % mod ; } return ret % mod ; } int inv ( int x ) { return qpow ( x , mod - 2 ); } const int iv = inv ( 100 ); signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> p ; dp [ 0 ] = 0 , dp [ 1 ] = 1 ; for ( int i = 2 ; i <= n + 1 ; ++ i ) dp [ i ] = (( dp [ i - 1 ] * ( 100 - p + mod ) % mod * iv % mod ) + ( dp [ i - 2 ] * p % mod * iv % mod ) + 1 % mod + mod ) % mod ; cout << dp [ n ] << endl ; return 0 ; }","title":"ABC280E Critical Hit"},{"location":"algor/dp/expectation/#acwing217","text":"\u7ed9\u51fa\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u7684\u8fde\u901a\u56fe\uff0c\u8d77\u70b9\u4e3a \\(1\\) \uff0c\u7ec8\u70b9\u4e3a \\(N\\) \uff0c\u6bcf\u6761\u8fb9\u90fd\u6709\u4e00\u4e2a\u957f\u5ea6\u3002 \u6570\u636e\u4fdd\u8bc1\u4ece\u8d77\u70b9\u51fa\u53d1\u80fd\u591f\u5230\u8fbe\u56fe\u4e2d\u6240\u6709\u7684\u70b9\uff0c\u56fe\u4e2d\u6240\u6709\u7684\u70b9\u4e5f\u90fd\u80fd\u591f\u5230\u8fbe\u7ec8\u70b9\u3002 \u7eff\u8c46\u86d9\u4ece\u8d77\u70b9\u51fa\u53d1\uff0c\u8d70\u5411\u7ec8\u70b9\u3002 \u5230\u8fbe\u6bcf\u4e00\u4e2a\u9876\u70b9\u65f6\uff0c\u5982\u679c\u6709 \\(K\\) \u6761\u79bb\u5f00\u8be5\u70b9\u7684\u9053\u8def\uff0c\u7eff\u8c46\u86d9\u53ef\u4ee5\u9009\u62e9\u4efb\u610f\u4e00\u6761\u9053\u8def\u79bb\u5f00\u8be5\u70b9\uff0c\u5e76\u4e14\u8d70\u5411\u6bcf\u6761\u8def\u7684\u6982\u7387\u4e3a \\(\\dfrac{1}{K}\\) \u3002 \u73b0\u5728\u7eff\u8c46\u86d9\u60f3\u77e5\u9053\uff0c\u4ece\u8d77\u70b9\u8d70\u5230\u7ec8\u70b9\u6240\u7ecf\u8fc7\u7684\u8def\u5f84\u603b\u957f\u5ea6\u7684\u671f\u671b\u662f\u591a\u5c11\uff1f \\(1\\le n \\le 1e5, 1\\le m \\le 2e5\\) \u3002 \u9996\u5148\u6211\u4eec\u6ce8\u610f\u5230\u8981\u6c42\u7684\u662f\u4ece \\(1 \\to n\\) \u7684\u8def\u5f84\u957f\u5ea6\u7684\u671f\u671b\uff0c\u4e5f\u5c31\u662f\u6240\u6709\u53ef\u80fd\u7684\u8def\u5f84\u957f\u5ea6\u4e58\u4e0a\u5bf9\u5e94\u7684\u6982\u7387\u3002 \u663e\u7136\u6211\u4eec\u4e0d\u53ef\u80fd\u76f4\u63a5\u4e00\u4e2a\u5f0f\u5b50\u5c31\u628a\u8fd9\u4e2a\u4e1c\u897f\u5199\u51fa\u6765\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u671f\u671b\u9012\u63a8/dp\u3002 \u8bbe \\(dp(u)\\) \u8868\u793a\u4ece \\(1 \\to u\\) \u7684\u8def\u5f84\u957f\u5ea6\u7684\u671f\u671b\u3002 \u6211\u4eec\u6839\u636e\u5b9a\u4e49\u5c1d\u8bd5\u63a8\u4e00\u4e0b\u5f0f\u5b50\uff0c\u5047\u8bbe \\(u\\) \u662f\u4ece \\(v_1 \\dots v_r\\) \u8fd9\u4e9b\u8282\u70b9\u53ef\u4ee5\u5230\u8fbe\u7684\u3002 \u5047\u8bbe \\(x(v_i)_j\\) \u8868\u793a\u4ece \\(1 \\to v_i\\) \u7684\u8def\u5f84\u7684\u67d0\u4e00\u79cd\u53ef\u80fd\u957f\u5ea6\uff0c \\(p(v_i)_j\\) \u8868\u793a\u51fa\u73b0 \\(x(v_i)_j\\) \u8fd9\u79cd\u60c5\u51b5\u7684\u6982\u7387\u3002 \u90a3\u4e48\u5c31\u6709\uff1a \\[ \\begin{aligned} dp(u) &= \\sum\\limits_i\\sum\\limits_j(p(v_i)_j \\times \\dfrac{1}{deg(v_i)} \\times (x(v_i)_j + w(u, v_i))) \\\\ &= \\sum\\limits_i(\\dfrac{1}{deg(v_i)} \\times \\sum\\limits_j (p(v_i)_j \\times x(v_i)_j + p(v_i)_j \\times w(u, v_i))) \\\\ &= \\sum\\limits_i(\\dfrac{1}{deg(v_i)} \\times (dp(v_i) + w(u, v_i) \\times \\sum\\limits_j p(v_i)_j)) \\end{aligned} \\] \u6ce8\u610f\u5230 \\(\\sum\\limits_j (p(v_i)_j)\\) \u5c31\u662f\u4ece \\(1\\) \u51fa\u53d1\uff0c\u8d70\u5230 \\(v_i\\) \u7684\u6982\u7387\u3002 \u6240\u4ee5\u6211\u4eec\u8f6c\u79fb dp \u7684\u65f6\u5019\u987a\u5e26\u7740\u5904\u7406\u4e00\u4e2a\u6570\u7ec4 \\(P(v_i)\\) \u8868\u793a\u4ece \\(1 \\to v_i\\) \u7684\u6982\u7387\u5c31\u884c\u4e86\u3002 \u521d\u59cb\u5316 \\(dp(1) = 0\\) \uff0c\u7ec8\u6001 \\(dp(n)\\) \u3002 \u5176\u5b9e\u8fd9\u79cd\u201c\u6b63\u63a8\u201d\u7684\u65b9\u6cd5\u6bd4\u8f83\u9ebb\u70e6\uff0c\u5176\u539f\u56e0\u5728\u5728\u4e8e\u9700\u8981\u5904\u7406 \\(P\\) \u8fd9\u4e2a\u6570\u7ec4\uff0c\u56e0\u4e3a\u4ece \\(1 \\to v_i\\) \u7684\u6982\u7387\u662f\u4e0d\u80fd\u76f4\u63a5\u786e\u5b9a\u7684\u3002 \u6ce8\u610f\u5230\u6211\u4eec\u6700\u540e\u4e00\u5b9a\u4f1a\u8d70\u5230 \\(n\\) \uff0c\u4e5f\u5c31\u662f\u8bf4\u4ece \\(\\forall u \\not= n, P(u \\to n) = 1\\) \uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u8003\u8651\u5012\u63a8\u4f1a\u600e\u6837\u5462\uff1f \u8bbe \\(dp(u)\\) \u8868\u793a\u4ece \\(u \\to n\\) \u7684\u8def\u5f84\u957f\u5ea6\u671f\u671b\uff0c\u5e76\u4e14 \\(u\\) \u53ef\u4ee5\u5230\u8fbe \\(v_1 \\dots v_r\\) \u3002 \u6839\u636e\u5b9a\u4e49\uff0c\u7c7b\u4f3c\u6b63\u63a8\uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u51fa\uff1a \\[ \\begin{aligned} dp(u) = \\dfrac{1}{deg(u)}\\sum\\limits_i(dp(v_i) + w(u, v_i) \\times \\sum\\limits_j p(v_i)_j) \\end{aligned} \\] \u662f\u4e0d\u662f\u57fa\u672c\u4e00\u6837\uff1f\u5e76\u4e0d\uff0c\u6ce8\u610f\u5230\u8fd9\u91cc\u7684 \\(\\sum\\limits_jp(v_i)_j\\) \u8868\u793a\u7684\u662f\u4ece \\(v_i\\) \u51fa\u53d1\u8d70\u5230 \\(n\\) \u7684\u6982\u7387\uff0c\u8fd9\u4e2a\u6982\u7387 \u4e00\u5b9a\u662f \\(1\\) \uff0c\u6240\u4ee5\u72b6\u6001\u8f6c\u79fb\u53d8\u4e3a\uff1a \\[ \\begin{aligned} dp(u) = \\dfrac{1}{deg(v_i)} \\sum\\limits_i(dp(v_i) + w(u, v_i)) \\end{aligned} \\] \u7136\u540e\u8f6c\u79fb\u5c31\u4e0d\u7528\u989d\u5916\u7ef4\u62a4\u4fe1\u606f\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 // author : black_trees #include <cmath> #include <queue> #include <cstdio> #include <cstring> #include <iomanip> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; using ldb = long double ; const int si = 1e5 + 10 ; int n , m ; int tot = 0 , head [ si ]; struct Edge { int ver , Next , w ; } e [ si << 1 ]; inline void add ( int u , int v , int w ) { e [ tot ] = ( Edge ) { v , head [ u ], w }, head [ u ] = tot ++ ; } std :: queue < int > q ; int deg [ si ], k [ si ]; ldb dp [ si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); memset ( head , -1 , sizeof head ); cin >> n >> m , dp [ n ] = 0 ; for ( int i = 1 ; i <= m ; ++ i ) { int u , v , w ; cin >> u >> v >> w ; add ( v , u , w ), deg [ u ] ++ , k [ u ] ++ ; } q . push ( n ); while ( ! q . empty ()) { int u = q . front (); q . pop (); for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver , w = e [ i ]. w ; deg [ v ] -- ; dp [ v ] += ( dp [ u ] + 1.0 * w ) / ( 1.0 * k [ v ]); if ( ! deg [ v ]) q . push ( v ); } } cout << fixed << setprecision ( 2 ) << dp [ 1 ] << endl ; return 0 ; }","title":"Acwing217. \u7eff\u8c46\u86d9\u7684\u5f52\u5bbf"},{"location":"algor/dp/expectation/#hnoi2013","text":"\u5c0f Z \u5728\u8be5\u56fe\u4e0a\u8fdb\u884c\u968f\u673a\u6e38\u8d70\uff0c\u521d\u59cb\u65f6\u5c0f Z \u5728 \\(1\\) \u53f7\u9876\u70b9\uff0c\u6bcf\u4e00\u6b65\u5c0f Z \u4ee5\u76f8\u7b49\u7684\u6982\u7387\u968f\u673a\u9009\u62e9\u5f53\u524d\u9876\u70b9\u7684\u67d0\u6761\u8fb9\uff0c\u6cbf\u7740\u8fd9\u6761\u8fb9\u8d70\u5230\u4e0b\u4e00\u4e2a\u9876\u70b9\uff0c\u83b7\u5f97\u7b49\u4e8e\u8fd9\u6761\u8fb9\u7684\u7f16\u53f7\u7684\u5206\u6570\u3002\u5f53\u5c0f Z \u5230\u8fbe \\(n\\) \u53f7\u9876\u70b9\u65f6\u6e38\u8d70\u7ed3\u675f\uff0c\u603b\u5206\u4e3a\u6240\u6709\u83b7\u5f97\u7684\u5206\u6570\u4e4b\u548c\u3002 \u73b0\u5728\uff0c\u8bf7\u4f60\u5bf9\u8fd9 \\(m\\) \u6761\u8fb9\u8fdb\u884c\u7f16\u53f7\uff0c\u4f7f\u5f97\u5c0f Z \u83b7\u5f97\u7684\u603b\u5206\u7684\u671f\u671b\u503c\u6700\u5c0f\u3002 \u4fdd\u8bc1 \\(2\\leq n \\leq 500\\) \uff0c \\(1 \\leq m \\leq 125000\\) \uff0c \\(1 \\leq u, v \\leq n\\) \uff0c\u7ed9\u51fa\u7684\u56fe\u65e0\u91cd\u8fb9\u548c\u81ea\u73af\uff0c\u4e14\u4ece \\(1\\) \u51fa\u53d1\u53ef\u4ee5\u5230\u8fbe\u6240\u6709\u7684\u8282\u70b9\u3002 \u5148\u76f4\u63a5\u8003\u8651\u7b97\u8fb9\u7684\u8d21\u732e\uff0c\u76f4\u63a5\u7b97\u7684\u8bdd\uff0c\u6ca1\u6cd5 \\(O(m)\\) \u7684\uff0c\u6ce8\u610f\u5230 \\(n \\le 500\\) \uff0c\u6211\u4eec\u4ece \\(n\\) \u5165\u624b\u3002 \u53ef\u4ee5\u8bbe \\(g(i)\\) \u8868\u793a\u7f16\u53f7\u4e3a \\(i\\) \u7684\u8fb9\u88ab\u7ecf\u8fc7\u7684\u671f\u671b\u6b21\u6570\uff0c\u6211\u4eec\u8ba9 \\(g(i)\\) \u5927\u7684\u7f16\u53f7\u5c0f\u5373\u53ef\uff0c\u8fd9\u4e2a\u662f\u6392\u5e8f\u4e0d\u7b49\u5f0f\u3002 \u5982\u679c \\(f(i)\\) \u8868\u793a\u70b9 \\(i\\) \u88ab\u7ecf\u8fc7\u7684\u6b21\u6570\uff0c\u90a3\u4e48 \\(g(u \\to v) = \\dfrac{f(u)}{d(u)} + \\dfrac{f(v)}{d(v)}\\) \u3002 \u5176\u4e2d \\(d\\) \u8868\u793a\u5ea6\u6570\uff0c\u800c \\(f(i) = \\sum\\limits_{v \\to u\\land v\\not=n} \\dfrac{f(v)}{d(v)},(i \\not= 1)\\) \u3002 \u5982\u679c \\(i = 1, f(i) = \\sum\\limits_{v \\to u \\land v\\not= n} \\dfrac{f(v)}{d(v)} + 1\\) \u3002 \u7136\u540e\u8fd9\u5c31\u662f\u4e00\u4e2a\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff0c\u9ad8\u65af\u6d88\u5143\u5373\u53ef\uff0c\u590d\u6742\u5ea6 \\(O(n^3)\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iomanip> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; using ldb = long double ; const ldb eps = 1e-5 ; const int si = 5e2 + 10 ; const int sim = 5e5 + 10 ; int n , m ; int tot = 0 , head [ si ]; struct Edge { int ver , Next ; } e [ sim ]; inline void add ( int u , int v ) { e [ tot ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot ++ ; } int from [ sim ], to [ sim ]; ldb f [ sim ], deg [ si ]; namespace Gauss { ldb x [ si ]; ldb c [ si ][ si ], d [ si ]; void fill () { for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) c [ i ][ j ] = 0.0 ; d [ i ] = 0.0 , x [ i ] = 0.0 ; } for ( int u = 1 ; u < n ; ++ u ) { for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == u ) continue ; c [ u ][ v ] = ( 1.0 / deg [ v ]); } c [ u ][ u ] = -1.0 , d [ u ] = -0.0 ; } d [ 1 ] = -1.0 , x [ n ] = 0.0 ; } void solve () { for ( int i = 1 ; i < n ; ++ i ) { int l = i ; for ( int j = i + 1 ; j < n ; ++ j ) if ( fabs ( c [ j ][ i ]) - fabs ( c [ l ][ i ]) > eps ) l = j ; if ( l != i ) { for ( int j = 1 ; j <= n ; ++ j ) swap ( c [ l ][ j ], c [ i ][ j ]); swap ( d [ l ], d [ i ]); } if ( fabs ( c [ i ][ i ]) >= eps ) { for ( int j = 1 ; j < n ; ++ j ) { if ( i == j ) continue ; ldb rate = c [ j ][ i ] / c [ i ][ i ]; for ( int k = 1 ; k <= n ; ++ k ) c [ j ][ k ] -= c [ i ][ k ] * rate ; d [ j ] -= rate * d [ i ]; } } } for ( int i = n - 1 ; i >= 1 ; -- i ) { for ( int j = i + 1 ; j < n ; ++ j ) d [ i ] -= x [ j ] * c [ i ][ j ]; x [ i ] = d [ i ] / c [ i ][ i ]; } } } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); memset ( head , -1 , sizeof head ); cin >> n >> m ; for ( int i = 1 ; i <= m ; ++ i ) { int u , v ; cin >> u >> v ; add ( u , v ), add ( v , u ); from [ i ] = u , to [ i ] = v ; deg [ u ] += 1.0 , deg [ v ] += 1.0 ; } Gauss :: fill (), Gauss :: solve (); for ( int i = 1 ; i <= m ; ++ i ) { if ( from [ i ] != n ) f [ i ] += Gauss :: x [ from [ i ]] / deg [ from [ i ]]; if ( to [ i ] != n ) f [ i ] += Gauss :: x [ to [ i ]] / deg [ to [ i ]]; } ldb ans = 0.0 ; sort ( f + 1 , f + 1 + m ); for ( int i = 1 ; i <= m ; ++ i ) ans += f [ i ] * ( m - i + 1 ); cout << fixed << setprecision ( 3 ) << ans << endl ; return 0 ; }","title":"[HNOI2013] \u6e38\u8d70"},{"location":"algor/dp/expectation/#cf24d-broken-robot","text":"\\(n\\) \u884c \\(m\\) \u5217\u7684\u77e9\u9635\uff0c\u73b0\u5728\u5728 \\((x,y)\\) \uff0c\u6bcf\u6b21\u7b49\u6982\u7387\u5411\u5de6\uff0c\u53f3\uff0c\u4e0b\u8d70\u6216\u539f\u5730\u4e0d\u52a8\uff0c\u4f46\u4e0d\u80fd\u8d70\u51fa\u53bb\uff0c\u95ee\u8d70\u5230\u6700\u540e\u4e00\u884c\u671f\u671b\u7684\u6b65\u6570\u3002 \u6ce8\u610f\uff0c \\((1,1)\\) \u662f\u6728\u677f\u7684\u5de6\u4e0a\u89d2\uff0c \\((n,m)\\) \u662f\u6728\u677f\u7684\u53f3\u4e0b\u89d2\u3002 \\(1\\le n,m\\le 10^3\\) \uff0c \\(1\\le x\\le n\\) \uff0c \\(1\\le y\\le m\\) \u3002 \u65b9\u7a0b\u662f\u6bd4\u8f83\u663e\u7136\u7684\uff0c\u5982\u679c\u8bbe \\(dp(x, y)\\) \u8868\u793a\u4ece \\(x, y\\) \u8d70\u5230\u6700\u540e\u4e00\u884c\u7684\u671f\u671b\u3002 \u7136\u540e\u8003\u8651\u8fb9\u754c\u5206\u5f00\u8f6c\u79fb\uff0c\u65b9\u7a0b\u7565\uff0c\u53ef\u4ee5\u5199\u6210\u9ad8\u65af\u6d88\u5143\u7684\u5f62\u5f0f\uff0c\u6ce8\u610f\u5230\u7cfb\u6570\u77e9\u9635\u6bd4\u8f83\u7279\u6b8a\uff1a \\[ \\begin{bmatrix} &-\\frac{2}{3} &\\frac{1}{3} &0 &0 \\\\ &\\frac{1}{4} &-\\frac{3}{4} &\\frac{1}{4} &0 \\\\ &0 &\\frac{1}{4} &-\\frac{3}{4} &\\frac{1}{4} \\\\ &0 &0 &\\frac{1}{3} &-\\frac{2}{3} \\end{bmatrix} \\] \u76f4\u63a5\u4ece\u4e0b\u5f80\u4e0a\u56de\u4ee3\u5c31\u662f \\(O(n^2)\\) \u7684\u4e86\uff0c\u7c7b\u4f3c\u7684\u8fd8\u6709\uff1a \u5206\u624b\u662f\u795d\u613f \u3002 \u8fd9\u4e2a\u4e1c\u897f\u5f88\u597d\u73a9\u7684\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iomanip> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; using ldb = long double ; const int si = 1e3 + 10 ; ldb dp [ si ][ si ]; int n , m , x , y ; namespace Gauss { ldb c [ si ][ si ]; void solve () { for ( int j = n - 1 ; j >= 1 ; -- j ) { for ( int i = 1 ; i <= m ; ++ i ) { c [ i ][ i ] = 3 , c [ i ][ i - 1 ] = c [ i ][ i + 1 ] = -1 ; c [ i ][ m + 1 ] = 4 + dp [ j + 1 ][ i ]; if ( i == 1 ) c [ i ][ m + 1 ] -- , c [ i ][ i ] -- ; if ( i == m ) c [ i ][ m + 1 ] -- , c [ i ][ i ] -- ; } for ( int i = 1 ; i <= m ; ++ i ) { if ( c [ i ][ i ] == 0 ) { cout << \"No Solution\" << endl ; exit ( 0 ); } else { if ( i != m ) c [ i ][ i + 1 ] = c [ i ][ i + 1 ] / c [ i ][ i ]; c [ i ][ m + 1 ] = c [ i ][ m + 1 ] / c [ i ][ i ], c [ i ][ i ] = 1 ; if ( i != m ) { c [ i + 1 ][ i + 1 ] = c [ i + 1 ][ i + 1 ] - c [ i + 1 ][ i ] * c [ i ][ i + 1 ]; c [ i + 1 ][ m + 1 ] = c [ i + 1 ][ m + 1 ] - c [ i + 1 ][ i ] * c [ i ][ m + 1 ]; c [ i + 1 ][ i ] = 0 ; } } } for ( int i = m ; i >= 1 ; -- i ) { dp [ j ][ i ] = c [ i ][ m + 1 ]; if ( i != 1 ) c [ i - 1 ][ m + 1 ] -= c [ i - 1 ][ i ] * dp [ j ][ i ]; } } } } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> m >> x >> y ; for ( int i = 1 ; i <= m ; ++ i ) dp [ n ][ i ] = 0.0 ; Gauss :: solve (), cout << fixed << setprecision ( 10 ) << dp [ x ][ y ]; return 0 ; }","title":"CF24D Broken Robot"},{"location":"algor/dp/expectation/#_1","text":"\u6c42\u89e3\u671f\u671b DP \u65f6\uff0c\u53ef\u4ee5\u5c06\u4e0a\u4e00\u4e2a\u72b6\u6001 \u5f53\u4f5c \u4e0b\u4e00\u4e2a\u72b6\u6001\u7684\u968f\u673a\u53d8\u91cf\u7684\u53d6\u503c\uff0c\u8fdb\u800c\u7b80\u5316\u8f6c\u79fb\u3002 \u5176\u672c\u8d28\u7c7b\u4f3c\uff1a \\(\\sum (x_ip_i\\times P) = P \\times \\sum(x_ip_i)\\) \u3002 \u5f88\u591a\u65f6\u5019\uff0c\u6b63\u63a8\u9700\u8981\u989d\u5916\u5904\u7406\u6982\u7387\uff0c\u5728\u786e\u5b9a\u7ec8\u6001\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5012\u63a8\uff0c\u501f\u6b64\u6765\u7701\u53bb\u5904\u7406\u6982\u7387\u7684\u7e41\u7410\u6b65\u9aa4\u3002 \u5982\u679c\u65b9\u7a0b\u6709\u540e\u6548\u6027\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd8\u9700\u8981\u5957\u4e0a\u4e00\u4e2a\u9ad8\u65af\u6d88\u5143\u3002","title":"\u603b\u7ed3"},{"location":"algor/dp/interval-dp/","text":"\u533a\u95f4\u4f5c\u4e3a\u9636\u6bb5 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5178\u578b\u7684\u9898\u76ee\u5c31\u662f\u5408\u5e76\u77f3\u5b50\uff0c\u80fd\u91cf\u9879\u94fe\u8fd9\u79cd\u3002 \u9898\u9762\u4e00\u822c\u4f1a\u8bf4 \u201c \u5408\u5e76 \u201d \u4e4b\u7c7b\u7684\u8bcd\uff0c\u72b6\u6001\u4e00\u822c\u4f1a\u662f \\(f_{l,r}\\) \u8868\u793a\u5c06\u533a\u95f4 \\(l,r\\) \u5168\u90e8\u5408\u5e76\u7684\u6700\u4f18\u4ef7\u503c\u3002 \u5f53\u7136\u4e5f\u6709\u53ef\u80fd\u662f \u201c\u5904\u7406\u5b8c\u8fd9\u4e2a\u533a\u95f4\u7684\u6700\u4f18\u201d\uff0c\u90a3\u4e48\u505a\u6cd5\u76f8\u5e94\u7684\u4f1a\u6709\u4e00\u70b9\u53d8\u5316\uff08\u6bd4\u5982 CQOI\u7684\u6d82\u8272\uff0c\u548c\u8001\u738b\u53bb\u5173\u8def\u706f\u90a3\u4e2a\u9898\uff09 \u505a\u6cd5\u662f\u4ee5\u533a\u95f4\u4f5c\u4e3a\u9636\u6bb5\uff0c\u7136\u540e\u679a\u4e3e\u533a\u95f4\u5de6\u7aef\u70b9\u3002 \u518d\u5728\u6bcf\u4e00\u4e2a\u533a\u95f4\u91cc\u627e\u5230\u4e00\u4e2a\u201c\u5206\u5272\u70b9\u201d\uff0c\u628a\u524d\u540e\u4e24\u4e2a\u90e8\u5206\u5408\u5e76\u8d77\u6765\u5e76\u52a0\u4e0a\u64cd\u4f5c\u7684\u6743\u503c\u5373\u53ef\u3002 \u4ee3\u7801\u4e00\u822c\u957f\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 8 9 10 11 init (); //\u9884\u5904\u7406\u957f\u5ea6\u4e3a 1,...,a \u7684\u533a\u95f4 for ( int len = a + 1 ; len <= n ; ++ len ) { for ( int i = 1 ; i + len - 1 <= n ; ++ i ) { int j = i + len - 1 ; for ( int k = i ; k < j ; ++ k ) { f [ i ][ j ] = min / max ( f [ i ][ j ], f [ i ][ k ] + f [ k + 1 ][ j ] + calc ( k )); //calc(k) \u662f\u4ece k, k+ 1 \u8fd9\u91cc\u65ad\u5f00\u7684\u64cd\u4f5c\u4ef7\u503c\u3002 } // k \u8868\u793a \u4ece k, k + 1 \u8fd9\u4e24\u4e2a\u70b9\u4e2d\u95f4\u65ad\u5f00\uff0c\u6240\u4ee5 k < j\u3002 } } \u65ad\u73af\u6210\u94fe \u03c8(\uff40\u2207\u00b4)\u03c8 \u5f53\u533a\u95f4DP\u95ee\u9898\u88ab\u653e\u5230\u73af\u4e0a\u7684\u65f6\u5019\u53ef\u4ee5\u91c7\u53d6\u3002 \u53ea\u9700\u8981\u628a\u539f\u5e8f\u5217\u590d\u5236\u4e00\u8fb9\u6254\u5230\u540e\u9762\u5373\u53ef\u3002 1 a1 , a2 , a3 , a4 , a5 ,... an , a1 , a2 , a3 ,...... an \u76f8\u5e94\u7684\uff0c\u521d\u59cb\u5316\u548c\u8bfb\u5165\u64cd\u4f5c\u9700\u8981\u7684\u6570\u7684\u65f6\u5019\u4e5f\u9700\u8981\u590d\u5236\u5e76\u6269\u5c55\u4e00\u500d\u3002 \u5047\u8bbe\u95ee\u9898\u8981\u6c42\u7684\u662f\u6574\u4e2a\u73af\u5408\u5e76\u8d77\u6765\u7684\u6700\u4f18\u89e3\uff0c\u90a3\u4e48\u5faa\u73af\u6c42\u6700\u4f18\u89e3\u9700\u8981\u8fd9\u4e48\u5199\uff1a 1 2 3 4 5 int res = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { int j = i + n - 1 ; // [i,j] \u662f\u65ad\u73af\u6210\u94fe\u4e4b\u540e\u6240\u6709\u957f\u5ea6\u4e3a n \u7684\u533a\u95f4 res = max ( res , f [ i ][ j ]); } \u5206\u5272\u578b \u03c8(\uff40\u2207\u00b4)\u03c8 \u95ee\u9898\u4e00\u822c\u662f\u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217\uff0c\u8981\u6c42\u4f60\u628a\u4ed6\u5206\u6210 \\(m\\) \u4e2a\u90e8\u5206\uff0c\u4f7f\u5f97\u6743\u503c\u548c\u6700\u5927\u3002 \u8fd9\u91cc\u7684 \u6743\u503c\u548c\u4f1a\u968f\u7740\u5206\u5272\u90e8\u5206\u7684\u4e0d\u540c\u800c\u53d8\u5316 \u3002 \u90a3\u4e48\u8bbe \\(f_{i,j}\\) \u4ece \\(1\\to i\\) \u6784\u6210\u7684\u5e8f\u5217\uff0c\u5206\u5272\u6210 \\(j\\) \u90e8\u5206\u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u6743\u503c\u548c\u7684\u6700\u503c\u3002 \u8003\u8651\u4ece \u201c\u6700\u540e\u4e00\u4e2a\u201d \u4e0b\u624b\uff0c\u4e5f\u5c31\u662f \u201c\u6700\u540e\u4e00\u4e2a\u90e8\u5206\u201d\u3002 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5728 \\(1 \\to i\\) \u8fd9\u4e00\u6bb5\u4e0a\u679a\u4e3e\u4e00\u4e2a\u5206\u5272\u70b9 \\(k\\) \u3002 \u4f7f\u5f97 \\([k+1,i]\\) \u6784\u6210\u7b2c \\(j\\) \u90e8\u5206\u3002 \u56e0\u4e3a\u524d\u9762\u5fc5\u987b\u8981\u5206\u5272\u6210 \\(j-1\\) \u4e2a\u90e8\u5206\uff0c\u6240\u4ee5 \\(1 \\to k\\) \u8d77\u7801\u8981\u6709 \\(j - 1\\) \u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u5b9e\u9645\u679a\u4e3e\u7684\u65f6\u5019 \\(k \\in [j-1,i)\\) \u624d\u884c\u3002 \u6240\u4ee5\u53ef\u4ee5\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \\(f_{i,j}=\\max\\limits_{j - 1\\le k < i}\\{f_{k,j-1}+w_{k+1,i}\\}\\) \\(\\max()\\) \u662f\u76f4\u63a5\u5728\u51fd\u6570\u91cc\u7684\u6240\u6709\u53d8\u91cf\u5f53\u4e2d\u53d6 \\(\\max\\) \uff0c\u800c \\(\\max\\{\\}\\) \u8868\u793a\u5728\u6240\u6709\u7684\u53ef\u80fd\u91cc\u53d6\u6700\u5927\u503c\u3002 \u6b64\u5904\u7684\u51b3\u7b56\u53d8\u91cf\u662f \\(k\\) \uff0c\u6240\u4ee5\u662f\u5728\u6240\u6709\u7684 \\(k\\) \u4ee3\u8868\u7684 \\(f_{k,j-1}+w_{k+1,i}\\) \u5f53\u4e2d\u53d6\u6700\u5927\u503c\uff08\u5728\u51b3\u7b56\u96c6\u5408\u4e2d\u53d6\u6700\u5927\u503c\uff09\u3002 \\(w\\) \u4e00\u822c\u53ef\u4ee5\u901a\u8fc7\u9884\u5904\u7406\u5f97\u5230\u3002 \u65b9\u7a0b\u76f4\u63a5\u6839\u636e\u9898\u9b54\u6539\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 memset ( f , 0 , sizeof f ); for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= m ; ++ j ) { for ( int k = j - 1 ; k < i ; ++ k ) { f [ i ][ j ] = max ( f [ i ][ j ], f [ k ][ j - 1 ] + w ( k + 1 , i )); } } } ans = f [ n ][ m ]; \u5178\u578b\u9898\u6709 IOI2000 \u7684\u90ae\u5c40\u548c IOI1999 \u7684\u82b1\u5e97\u6a71\u7a97\u5e03\u7f6e\u3002 \u4e00\u4e9b\u60f3\u6cd5 \u6700\u8fd1\uff08 May/05/2022 \uff09\u53d1\u73b0\u8fd9\u4e2a\u65b9\u7a0b\u633a\u5e38\u89c1\u7684\uff08 \u800c\u4e14\u8fd8\u6709\u5f88\u591a\u53d8\u5f0f\uff0c\u6bd4\u5982\u8fd9\u4e1c\u897f\u5b9e\u9645\u4e0a\u53ef\u4ee5\u6eda\u52a8\u6570\u7ec4\uff0c \\(i, j\\) \u5206\u522b\u4f5c\u4e3a\u9636\u6bb5\u90fd\u662f\u53ef\u4ee5\u4fdd\u8bc1\u540e\u6548\u6027\u7684\u3002 \u5982\u679c\u9898\u76ee\u6ca1\u6709\u8981\u6c42\u4f60\u5177\u4f53\u8981\u5206\u591a\u5c11\u6bb5\uff0c\u53ef\u4ee5\u7701\u53bb\u7b2c\u4e8c\u7ef4\u548c \\(j\\) \u7684\u679a\u4e3e\uff0c\u5e76\u4e14 \\(k\\) \u7684\u53d6\u503c\u8303\u56f4\u5c06\u4f1a\u53d8\u6210 \\(0 \\le k < i\\) \u3002 \u5f88\u591a\u6570\u636e\u7ed3\u6784\u4f18\u5316 DP \u9898\u90fd\u4f1a\u9047\u5230\u8fd9\u4e2a\u65b9\u7a0b(\u7684\u53d8\u5f0f)\u3002 \u6bd4\u5982 The battle of chibi\uff0cThe Bakery\uff0cOptimal Partition \u90fd\u662f\u3002 \u4efb\u52a1\u5b89\u63921 \u4e5f\u7528\u4e86\u540c\u6837\u7684\u601d\u60f3\u3002 \u7b2c\u4e00\u9898\u548c\u7b2c\u4e09\u3001\u56db\u9898\u662f\u6ca1\u6709\u8981\u6c42\u5206\u591a\u5c11\u6bb5\uff0c\u7136\u540e\u53ef\u4ee5\u5229\u7528\u7ef4\u62a4\u503c\u57df\u7684\u6811\u72b6\u6570\u7ec4\u4ee3\u66ff\u5e73\u8861\u6811\u63d2\u5165\u51b3\u7b56\uff0c\u5e76\u4ee5\u52a8\u6001\u63d2\u5165\u7684\u65b9\u5f0f\u4fdd\u8bc1\u65b9\u7a0b\u7684\u4e00\u4e2a\u6761\u4ef6 \\(j < i\\) \u6210\u7acb\u3002 \u7b2c\u4e8c\u9898\u662f\u8981\u6c42\u4e86\u5206\u591a\u5c11\u6bb5\uff0c\u6211\u601d\u8003\u65f6\u4e3a\u4e86\u7edf\u4e00\u4f18\u5316\u65b9\u5f0f\uff0c\u628a \\(i,j\\) \u4ea4\u6362\u4e86\uff0c\u4f46\u4e8b\u540e\u53d1\u73b0\u5176\u5b9e\u4e24\u4e2a\u90fd\u4e00\u6837\uff08 \u5bf9\u8fd9\u4e2a\u65b9\u7a0b\u7684\u4f18\u5316\u90fd\u662f\u4e00\u4e2a\u5957\u8def\uff1a\u56fa\u5b9a\u5916\u5c42\u5faa\u73af\uff0c\u7136\u540e\u770b\u5185\u5c42\u5faa\u73af\u51b3\u7b56\u96c6\u5408\u7684\u53d8\u5316\uff0c\u6839\u636e\u4e0d\u540c\u60c5\u51b5\u9009\u62e9\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u7ef4\u62a4\u3002 \u800c\u4e14\u6570\u636e\u7ed3\u6784\u8d77\u7684\u4f5c\u7528\u90fd\u662f\u5feb\u901f\u5730\u76f4\u63a5\u5f97\u5230\u51b3\u7b56\u96c6\u5408\u7684\u8f6c\u79fb\u4fe1\u606f\uff08\u6700\u503c\uff08\u7ebf\u6bb5\u6811/\u6811\u72b6\u6570\u7ec4\uff09\uff0c\u603b\u548c\uff08\u6811\u72b6\u6570\u7ec4\uff09\uff09\u3002","title":"\u533a\u95f4 DP"},{"location":"algor/dp/interval-dp/#_1","text":"\u5178\u578b\u7684\u9898\u76ee\u5c31\u662f\u5408\u5e76\u77f3\u5b50\uff0c\u80fd\u91cf\u9879\u94fe\u8fd9\u79cd\u3002 \u9898\u9762\u4e00\u822c\u4f1a\u8bf4 \u201c \u5408\u5e76 \u201d \u4e4b\u7c7b\u7684\u8bcd\uff0c\u72b6\u6001\u4e00\u822c\u4f1a\u662f \\(f_{l,r}\\) \u8868\u793a\u5c06\u533a\u95f4 \\(l,r\\) \u5168\u90e8\u5408\u5e76\u7684\u6700\u4f18\u4ef7\u503c\u3002 \u5f53\u7136\u4e5f\u6709\u53ef\u80fd\u662f \u201c\u5904\u7406\u5b8c\u8fd9\u4e2a\u533a\u95f4\u7684\u6700\u4f18\u201d\uff0c\u90a3\u4e48\u505a\u6cd5\u76f8\u5e94\u7684\u4f1a\u6709\u4e00\u70b9\u53d8\u5316\uff08\u6bd4\u5982 CQOI\u7684\u6d82\u8272\uff0c\u548c\u8001\u738b\u53bb\u5173\u8def\u706f\u90a3\u4e2a\u9898\uff09 \u505a\u6cd5\u662f\u4ee5\u533a\u95f4\u4f5c\u4e3a\u9636\u6bb5\uff0c\u7136\u540e\u679a\u4e3e\u533a\u95f4\u5de6\u7aef\u70b9\u3002 \u518d\u5728\u6bcf\u4e00\u4e2a\u533a\u95f4\u91cc\u627e\u5230\u4e00\u4e2a\u201c\u5206\u5272\u70b9\u201d\uff0c\u628a\u524d\u540e\u4e24\u4e2a\u90e8\u5206\u5408\u5e76\u8d77\u6765\u5e76\u52a0\u4e0a\u64cd\u4f5c\u7684\u6743\u503c\u5373\u53ef\u3002 \u4ee3\u7801\u4e00\u822c\u957f\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 8 9 10 11 init (); //\u9884\u5904\u7406\u957f\u5ea6\u4e3a 1,...,a \u7684\u533a\u95f4 for ( int len = a + 1 ; len <= n ; ++ len ) { for ( int i = 1 ; i + len - 1 <= n ; ++ i ) { int j = i + len - 1 ; for ( int k = i ; k < j ; ++ k ) { f [ i ][ j ] = min / max ( f [ i ][ j ], f [ i ][ k ] + f [ k + 1 ][ j ] + calc ( k )); //calc(k) \u662f\u4ece k, k+ 1 \u8fd9\u91cc\u65ad\u5f00\u7684\u64cd\u4f5c\u4ef7\u503c\u3002 } // k \u8868\u793a \u4ece k, k + 1 \u8fd9\u4e24\u4e2a\u70b9\u4e2d\u95f4\u65ad\u5f00\uff0c\u6240\u4ee5 k < j\u3002 } }","title":"\u533a\u95f4\u4f5c\u4e3a\u9636\u6bb5"},{"location":"algor/dp/interval-dp/#_2","text":"\u5f53\u533a\u95f4DP\u95ee\u9898\u88ab\u653e\u5230\u73af\u4e0a\u7684\u65f6\u5019\u53ef\u4ee5\u91c7\u53d6\u3002 \u53ea\u9700\u8981\u628a\u539f\u5e8f\u5217\u590d\u5236\u4e00\u8fb9\u6254\u5230\u540e\u9762\u5373\u53ef\u3002 1 a1 , a2 , a3 , a4 , a5 ,... an , a1 , a2 , a3 ,...... an \u76f8\u5e94\u7684\uff0c\u521d\u59cb\u5316\u548c\u8bfb\u5165\u64cd\u4f5c\u9700\u8981\u7684\u6570\u7684\u65f6\u5019\u4e5f\u9700\u8981\u590d\u5236\u5e76\u6269\u5c55\u4e00\u500d\u3002 \u5047\u8bbe\u95ee\u9898\u8981\u6c42\u7684\u662f\u6574\u4e2a\u73af\u5408\u5e76\u8d77\u6765\u7684\u6700\u4f18\u89e3\uff0c\u90a3\u4e48\u5faa\u73af\u6c42\u6700\u4f18\u89e3\u9700\u8981\u8fd9\u4e48\u5199\uff1a 1 2 3 4 5 int res = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { int j = i + n - 1 ; // [i,j] \u662f\u65ad\u73af\u6210\u94fe\u4e4b\u540e\u6240\u6709\u957f\u5ea6\u4e3a n \u7684\u533a\u95f4 res = max ( res , f [ i ][ j ]); }","title":"\u65ad\u73af\u6210\u94fe"},{"location":"algor/dp/interval-dp/#_3","text":"\u95ee\u9898\u4e00\u822c\u662f\u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217\uff0c\u8981\u6c42\u4f60\u628a\u4ed6\u5206\u6210 \\(m\\) \u4e2a\u90e8\u5206\uff0c\u4f7f\u5f97\u6743\u503c\u548c\u6700\u5927\u3002 \u8fd9\u91cc\u7684 \u6743\u503c\u548c\u4f1a\u968f\u7740\u5206\u5272\u90e8\u5206\u7684\u4e0d\u540c\u800c\u53d8\u5316 \u3002 \u90a3\u4e48\u8bbe \\(f_{i,j}\\) \u4ece \\(1\\to i\\) \u6784\u6210\u7684\u5e8f\u5217\uff0c\u5206\u5272\u6210 \\(j\\) \u90e8\u5206\u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u6743\u503c\u548c\u7684\u6700\u503c\u3002 \u8003\u8651\u4ece \u201c\u6700\u540e\u4e00\u4e2a\u201d \u4e0b\u624b\uff0c\u4e5f\u5c31\u662f \u201c\u6700\u540e\u4e00\u4e2a\u90e8\u5206\u201d\u3002 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5728 \\(1 \\to i\\) \u8fd9\u4e00\u6bb5\u4e0a\u679a\u4e3e\u4e00\u4e2a\u5206\u5272\u70b9 \\(k\\) \u3002 \u4f7f\u5f97 \\([k+1,i]\\) \u6784\u6210\u7b2c \\(j\\) \u90e8\u5206\u3002 \u56e0\u4e3a\u524d\u9762\u5fc5\u987b\u8981\u5206\u5272\u6210 \\(j-1\\) \u4e2a\u90e8\u5206\uff0c\u6240\u4ee5 \\(1 \\to k\\) \u8d77\u7801\u8981\u6709 \\(j - 1\\) \u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u5b9e\u9645\u679a\u4e3e\u7684\u65f6\u5019 \\(k \\in [j-1,i)\\) \u624d\u884c\u3002 \u6240\u4ee5\u53ef\u4ee5\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \\(f_{i,j}=\\max\\limits_{j - 1\\le k < i}\\{f_{k,j-1}+w_{k+1,i}\\}\\) \\(\\max()\\) \u662f\u76f4\u63a5\u5728\u51fd\u6570\u91cc\u7684\u6240\u6709\u53d8\u91cf\u5f53\u4e2d\u53d6 \\(\\max\\) \uff0c\u800c \\(\\max\\{\\}\\) \u8868\u793a\u5728\u6240\u6709\u7684\u53ef\u80fd\u91cc\u53d6\u6700\u5927\u503c\u3002 \u6b64\u5904\u7684\u51b3\u7b56\u53d8\u91cf\u662f \\(k\\) \uff0c\u6240\u4ee5\u662f\u5728\u6240\u6709\u7684 \\(k\\) \u4ee3\u8868\u7684 \\(f_{k,j-1}+w_{k+1,i}\\) \u5f53\u4e2d\u53d6\u6700\u5927\u503c\uff08\u5728\u51b3\u7b56\u96c6\u5408\u4e2d\u53d6\u6700\u5927\u503c\uff09\u3002 \\(w\\) \u4e00\u822c\u53ef\u4ee5\u901a\u8fc7\u9884\u5904\u7406\u5f97\u5230\u3002 \u65b9\u7a0b\u76f4\u63a5\u6839\u636e\u9898\u9b54\u6539\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 memset ( f , 0 , sizeof f ); for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= m ; ++ j ) { for ( int k = j - 1 ; k < i ; ++ k ) { f [ i ][ j ] = max ( f [ i ][ j ], f [ k ][ j - 1 ] + w ( k + 1 , i )); } } } ans = f [ n ][ m ]; \u5178\u578b\u9898\u6709 IOI2000 \u7684\u90ae\u5c40\u548c IOI1999 \u7684\u82b1\u5e97\u6a71\u7a97\u5e03\u7f6e\u3002 \u4e00\u4e9b\u60f3\u6cd5 \u6700\u8fd1\uff08 May/05/2022 \uff09\u53d1\u73b0\u8fd9\u4e2a\u65b9\u7a0b\u633a\u5e38\u89c1\u7684\uff08 \u800c\u4e14\u8fd8\u6709\u5f88\u591a\u53d8\u5f0f\uff0c\u6bd4\u5982\u8fd9\u4e1c\u897f\u5b9e\u9645\u4e0a\u53ef\u4ee5\u6eda\u52a8\u6570\u7ec4\uff0c \\(i, j\\) \u5206\u522b\u4f5c\u4e3a\u9636\u6bb5\u90fd\u662f\u53ef\u4ee5\u4fdd\u8bc1\u540e\u6548\u6027\u7684\u3002 \u5982\u679c\u9898\u76ee\u6ca1\u6709\u8981\u6c42\u4f60\u5177\u4f53\u8981\u5206\u591a\u5c11\u6bb5\uff0c\u53ef\u4ee5\u7701\u53bb\u7b2c\u4e8c\u7ef4\u548c \\(j\\) \u7684\u679a\u4e3e\uff0c\u5e76\u4e14 \\(k\\) \u7684\u53d6\u503c\u8303\u56f4\u5c06\u4f1a\u53d8\u6210 \\(0 \\le k < i\\) \u3002 \u5f88\u591a\u6570\u636e\u7ed3\u6784\u4f18\u5316 DP \u9898\u90fd\u4f1a\u9047\u5230\u8fd9\u4e2a\u65b9\u7a0b(\u7684\u53d8\u5f0f)\u3002 \u6bd4\u5982 The battle of chibi\uff0cThe Bakery\uff0cOptimal Partition \u90fd\u662f\u3002 \u4efb\u52a1\u5b89\u63921 \u4e5f\u7528\u4e86\u540c\u6837\u7684\u601d\u60f3\u3002 \u7b2c\u4e00\u9898\u548c\u7b2c\u4e09\u3001\u56db\u9898\u662f\u6ca1\u6709\u8981\u6c42\u5206\u591a\u5c11\u6bb5\uff0c\u7136\u540e\u53ef\u4ee5\u5229\u7528\u7ef4\u62a4\u503c\u57df\u7684\u6811\u72b6\u6570\u7ec4\u4ee3\u66ff\u5e73\u8861\u6811\u63d2\u5165\u51b3\u7b56\uff0c\u5e76\u4ee5\u52a8\u6001\u63d2\u5165\u7684\u65b9\u5f0f\u4fdd\u8bc1\u65b9\u7a0b\u7684\u4e00\u4e2a\u6761\u4ef6 \\(j < i\\) \u6210\u7acb\u3002 \u7b2c\u4e8c\u9898\u662f\u8981\u6c42\u4e86\u5206\u591a\u5c11\u6bb5\uff0c\u6211\u601d\u8003\u65f6\u4e3a\u4e86\u7edf\u4e00\u4f18\u5316\u65b9\u5f0f\uff0c\u628a \\(i,j\\) \u4ea4\u6362\u4e86\uff0c\u4f46\u4e8b\u540e\u53d1\u73b0\u5176\u5b9e\u4e24\u4e2a\u90fd\u4e00\u6837\uff08 \u5bf9\u8fd9\u4e2a\u65b9\u7a0b\u7684\u4f18\u5316\u90fd\u662f\u4e00\u4e2a\u5957\u8def\uff1a\u56fa\u5b9a\u5916\u5c42\u5faa\u73af\uff0c\u7136\u540e\u770b\u5185\u5c42\u5faa\u73af\u51b3\u7b56\u96c6\u5408\u7684\u53d8\u5316\uff0c\u6839\u636e\u4e0d\u540c\u60c5\u51b5\u9009\u62e9\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u7ef4\u62a4\u3002 \u800c\u4e14\u6570\u636e\u7ed3\u6784\u8d77\u7684\u4f5c\u7528\u90fd\u662f\u5feb\u901f\u5730\u76f4\u63a5\u5f97\u5230\u51b3\u7b56\u96c6\u5408\u7684\u8f6c\u79fb\u4fe1\u606f\uff08\u6700\u503c\uff08\u7ebf\u6bb5\u6811/\u6811\u72b6\u6570\u7ec4\uff09\uff0c\u603b\u548c\uff08\u6811\u72b6\u6570\u7ec4\uff09\uff09\u3002","title":"\u5206\u5272\u578b"},{"location":"algor/dp/knapsack-dp/","text":"01 \u80cc\u5305 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60 \\(n\\) \u4e2a\u7269\u54c1\uff0c \\(m\\) \u7684\u5bb9\u91cf\uff0c\u6bcf\u4e2a\u7269\u54c1\u6709\u4f53\u79ef \\(v_i\\) \u548c\u4ef7\u503c \\(w_i\\) \uff0c\u95ee\u4f60\u80fd\u83b7\u5f97\u7684\u4ef7\u503c \\(\\max\\) \u3002 \u8003\u8651\u8bbe\u8ba1\u4e00\u4e2a\u72b6\u6001 \\(dp(i, j)\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\u7269\u54c1\uff0c\u81f3\u591a\u4f7f\u7528\u4e86 \\(j\\) \u7684\u7a7a\u95f4\u7684\u6700\u5927\u4ef7\u503c\u3002 \u8003\u8651\u5bf9\u4e8e \\(i\\) \u7684\u51b3\u7b56\u6709\u4ec0\u4e48\uff0c\u65e0\u975e\u5c31\u662f\u9009 \\(i\\) \u6216\u8005\u4e0d\u9009 \\(i\\) \uff0c\u4ee5\u6b64\u4e3a\u4f9d\u636e\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u6ee1\u8db3\u5728\u524d \\(i\\) \u4e2a\u7269\u54c1\u91cc\u9762\u81f3\u591a\u7528 \\(j\\) \u7684\u7a7a\u95f4\u7684\u6240\u6709\u51b3\u7b56\u5206\u7c7b\u3002 \u7b2c\u4e00\u7c7b\u5c31\u662f\u4e0d\u9009 \\(i\\) \u8fd9\u4e2a\u7269\u54c1\u7684\uff0c\u7b2c\u4e8c\u7c7b\u5c31\u662f\u9009 \\(i\\) \u8fd9\u4e2a\u7269\u54c1\u7684\u3002 \u90a3\u4e48\u4ece\u7b2c\u4e00\u7c7b\u8f6c\u79fb\u8fc7\u6765\u5c31\u662f \\(dp(i - 1, j) \\to dp(i, j)\\) \u3002 \u4ece\u7b2c\u4e8c\u7c7b\u8f6c\u79fb\u8fc7\u6765\uff0c\u56e0\u4e3a\u7b2c\u4e8c\u7c7b\u90fd\u9009\u4e86 \\(i\\) \u8fd9\u4e2a\u7269\u54c1\uff0c\u6240\u4ee5\u662f \\(dp(i - 1, j - v_i) + w_i \\to dp(i, j)\\) \u3002 \u90a3\u4e48\u56e0\u4e3a\u5c5e\u6027\u662f\u4ee3\u4ef7\u7684\u6700\u5927\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5728\u8fd9\u4e24\u79cd\u51b3\u7b56\u91cc\u9762\u9009\u6700\u5927\u503c\u5373\u53ef\u3002 \u53ef\u4ee5\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \\[ dp(i, j) = \\max(dp(i - 1, j), dp(i - 1, j - v_i) + w_i (\\text{if } j \\ge v_i.)) \\] \u53ef\u4ee5\u68c0\u67e5\u4e00\u4e0b\uff0c\u53d1\u73b0\u5f53\u524d\u9636\u6bb5\uff08\u8003\u8651\u7269\u54c1 \\(i\\) \u7684\uff09\u72b6\u6001\u90fd\u7531 \\(i - 1\\) \u9636\u6bb5\u8f6c\u79fb\u8fc7\u6765\uff0c\u90a3\u4e48\u72b6\u6001\u8f6c\u79fb\u662f\u4e0d\u6210\u73af\u7684\uff0c\u663e\u7136\u65e0\u540e\u6548\u6027\u3002 \u8fd9\u91cc\u4f7f\u7528\u4e86\u96c6\u5408\u7684\u601d\u60f3\u8003\u8651\u51b3\u7b56\uff0c\u53ef\u4ee5\u53d1\u73b0\u663e\u7136\u8986\u76d6\u4e86\u5b8c\u6574\u7684\u72b6\u6001\u7a7a\u95f4\uff0c\u6b63\u786e\u6027\u6ca1\u6709\u95ee\u9898\u3002 \u7136\u540e\u8003\u8651\u600e\u4e48\u521d\u59cb\u5316\uff0c\u6839\u636e\u72b6\u6001\u7684\u5b9a\u4e49\uff0c\u8fd9\u91cc\u4e0d\u662f\u6070\u597d\u662f\u81f3\u591a\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u4ee4\u6240\u6709\u72b6\u6001\u521d\u59cb\u5747\u4e3a \\(0\\) \u5373\u53ef\uff0c\uff08\u5728\u6ca1\u6709\u51b3\u7b56\u4e4b\u524d\uff0c\u81f3\u591a\u4f7f\u7528\u4efb\u610f\u7684\u7a7a\u95f4\u80fd\u83b7\u5f97\u7684\u6700\u5927\u4ef7\u503c\u90fd\u662f \\(0\\) \u3002\uff09 \u7b54\u6848\uff08\u76ee\u6807\u72b6\u6001\uff09\uff0c\u6839\u636e\u5b9a\u4e49\u5c31\u662f \\(dp(n, m)\\) \u3002 \u90a3\u4e48\u5c31\u53ef\u4ee5\u6109\u5feb\u7684\u5199\u4ee3\u7801\u4e86\u3002 1 2 3 4 5 6 7 memset ( dp , 0 , sizeof dp ); for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 0 ; j <= m ; ++ j ) { dp [ i ][ j ] = dp [ i - 1 ][ j ]; if ( j >= v [ i ]) dp [ i ][ j ] = max ( dp [ i ][ j ], dp [ i - 1 ][ j - v [ i ]] + w [ i ]); } cout << dp [ n ][ m ] << endl ; \u7136\u540e\u6ce8\u610f\u5230\u8fd9\u4e2a\u72b6\u6001\u7684\u5f53\u524d\u9636\u6bb5\u53ea\u4f9d\u8d56\u4e8e\u4e0a\u4e00\u4e2a\u9636\u6bb5\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a\u53eb\u6eda\u52a8\u6570\u7ec4\u7684\u6280\u5de7\uff0c\u6bcf\u6b21\u53ea\u4fdd\u5b58\u4e0a\u4e00\u4e2a\u9636\u6bb5\u548c\u8fd9\u4e00\u4e2a\u9636\u6bb5\u7684\u72b6\u6001\uff0c\u5728\u8fd9\u4e24\u4e2a\u6570\u7ec4\u91cc\u9762\u4e0d\u65ad\u8f6c\u79fb\u5373\u53ef\uff1a 1 2 3 4 5 6 7 8 9 10 11 int dp [ 2 ][ si ]; memset ( dp , 0 , sizeof dp ); for ( int i = 1 ; i <= n ; ++ i ) { int now = i & 1 , last = ( i & 1 ) ^ 1 ; for ( int j = 0 ; j <= m ; ++ j ) { dp [ now ][ j ] = dp [ last ][ j ]; if ( j >= v [ i ]) dp [ now ][ j ] = max ( dp [ now ][ j ], dp [ last ][ j - v [ i ]] + w [ i ]); } } cout << dp [ n & 1 ][ m ] << endl ; \u53d1\u73b0\u5176\u5b9e\u8fd8\u80fd\u518d\u4f18\u5316\uff0c\u6ce8\u610f\u5230\u6211\u4eec\u6bcf\u79cd\u7269\u54c1\u53ea\u6709\u4e00\u4e2a\uff0c\u6240\u4ee5 \\(dp(i, j)\\) \u5fc5\u7136\u662f\u4ece\u4e0a\u4e00\u4e2a\u9636\u6bb5\u7684\u4e00\u4e2a \\(j^\\prime < j\\) \u8f6c\u79fb\u8fc7\u6765\u7684\uff08 \\(v_i > 0\\) \uff09\u3002 \u5982\u679c\u6211\u4eec\u628a\u8fd9\u4e24\u7ef4\u538b\u7f29\u5230\u4e00\u8d77\uff0c\u867d\u7136\u662f\u76f4\u63a5\u7ee7\u627f\u4e0a\u4e00\u4e2a\u9636\u6bb5\u4e86\uff0c\u4f46\u662f\u76f4\u63a5\u8f6c\u79fb\u663e\u7136\u6709\u95ee\u9898\uff0c\u56e0\u4e3a \\(dp(j)\\) \u4f1a\u4f9d\u8d56 \\(dp(j - v_i)\\) \uff0c\u800c\u6b63\u7740\u5faa\u73af \\(j\\) \u4f1a\u5bfc\u81f4 \\(dp(j -v_i)\\) \u63d0\u524d\u88ab\u66f4\u65b0\u6210 \\(i\\) \u9636\u6bb5\u7684 \\(dp(j - v_i)\\) \uff0c\u6240\u4ee5\u9700\u8981\u4f7f\u7528\u5012\u5e8f\u5faa\u73af\u6765\u4fdd\u8bc1\u8f6c\u79fb\u4e0d\u6210\u73af\u3002 \u90a3\u4e48\u53ef\u4ee5\u5199\u51fa\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 int dp [ si ]; memset ( dp , 0 , sizeof dp ); for ( int i = 1 ; i <= n ; ++ i ) for ( int j = m ; j >= v [ i ]; -- j ) dp [ j ] = max ( dp [ j ], dp [ j - v [ i ]] + w [ i ]); // \u56e0\u4e3a\u76f4\u63a5\u5171\u7528\u4e00\u4e2a\u6570\u7ec4\u4e86\uff0c\u6240\u4ee5\u4e0d\u7528\u624b\u52a8\u7ee7\u627f\u4e0a\u4e00\u4e2a\u9636\u6bb5\u4e86\u3002 cout << dp [ m ] << endl ; \u5b8c\u5168\u80cc\u5305 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60 \\(n\\) \u79cd\u7269\u54c1\uff0c \\(m\\) \u7684\u5bb9\u91cf\uff0c\u6bcf\u79cd\u7269\u54c1\u6709\u4f53\u79ef \\(v_i\\) \u548c\u4ef7\u503c \\(w_i\\) \uff0c\u6bcf\u79cd\u7269\u54c1\u53ef\u4ee5\u6709\u65e0\u7a77\u591a\u4e2a\uff0c\u95ee\u4f60\u80fd\u83b7\u5f97\u7684\u4ef7\u503c \\(\\max\\) \u3002 \u4f9d\u65e7\u8003\u8651\u6cbf\u7528 01 \u80cc\u5305\u7684\u72b6\u6001\uff0c\u8bbe \\(dp(i, j)\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\u7269\u54c1\uff0c\u81f3\u591a\u4f7f\u7528\u4e86 \\(j\\) \u7684\u7a7a\u95f4\u7684\u6700\u5927\u4ef7\u503c\u3002 \u4f46\u663e\u7136\u8fd9\u91cc\u7684\u51b3\u7b56\u4e0d\u592a\u4e00\u6837\u4e86\uff0c\u56e0\u4e3a\u6bcf\u79cd\u7269\u54c1\u90fd\u6709\u65e0\u9650\u591a\u4e2a\uff0c\u6240\u4ee5\u51b3\u7b56\u53ef\u80fd\u4f1a\u5728\u67d0\u79cd\u7269\u54c1\u4e0a\u51b3\u7b56\u591a\u6b21\uff0c\u8f6c\u79fb\u5c31\u53ef\u80fd\u5728\u540c\u9636\u6bb5\u8f6c\u79fb\u3002 \u90a3\u4e48\u5206\u7c7b\u8ba8\u8bba\u770b\u770b\u80fd\u4ece\u4ec0\u4e48\u5730\u65b9\u8f6c\u79fb\u8fc7\u6765\u3002 \u9996\u5148\u5982\u679c\u6211\u4eec\u4e0d\u9009\u8fd9\u79cd\u7269\u54c1\u7684\u4efb\u610f\u4e00\u4e2a\uff0c\u7b97\u662f\u4e00\u79cd\uff0c\u8f6c\u79fb\u4f1a\u53d8\u6210 \\(dp(i - 1,j) \\to dp(i, j)\\) \u3002 \u7136\u540e\u5982\u679c\u6211\u4eec\u9009\u4e86\u8fd9\u79cd\u7269\u54c1\u7684\u4e00\u4e2a\uff0c\u8f6c\u79fb\u4f1a\u53d8\u6210 \\(dp(i - 1, j - v_i) + w_i\\to dp(i, j)\\) \u3002 \u5982\u679c\u9009\u4e86\u4e24\u4e2a\uff0c\u8f6c\u79fb\u4f1a\u53d8\u6210 \\(dp(i - 1, j - 2v_i) + w_i \\to dp(i, j - v_i) + w_i \\to dp(i, j)\\) \u3002 \u6211\u4eec\u4e0d\u5e0c\u671b\u4e00\u6b21\u51b3\u7b56\u4e24\u4e2a\u72b6\u6001\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u9009\u4e24\u4e2a\u662f\u4ee5\u9009\u4e86\u4e00\u4e2a\u7684\u72b6\u6001\u4f5c\u4e3a\u57fa\u7840\u518d\u9009\u4e00\u4e2a\u7684\u3002 \u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e2a \\(j\\) \u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u8f6c\u79fb\uff1a\u4ece\u4e0a\u4e00\u9636\u6bb5\u7684 \\(dp(j)\\) \u6216\u8005 \\(dp(j - v_i)\\) \u8f6c\u79fb\u8fc7\u6765\uff0c\u4ece\u8fd9\u4e00\u9636\u6bb5\u7684 \\(dp(j - v_i)\\) \u8f6c\u79fb\u8fc7\u6765\u3002 \u7136\u540e\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u8f6c\u79fb\u663e\u7136\u4f1a\u91cd\u590d\u8f6c\u79fb\u5f88\u591a\uff0c\u753b\u56fe\u53ef\u4ee5\u53d1\u73b0\u7701\u53bb \\(dp(i - 1,j - v_i)\\) \u4e4b\u540e\u72b6\u6001\u7a7a\u95f4\u4ecd\u7136\u80fd\u88ab\u8986\u76d6\u6ee1\uff0c\u6240\u4ee5\u6700\u7ec8\u65b9\u7a0b\u53d8\u4e3a\uff1a \\[ dp(i, j) = \\max(dp(i - 1, j), dp(i, j - v_i) + w_i(\\text{if } j \\ge v_i.)) \\] \uff08\u5728\u8bbe\u8ba1\u666e\u901a\u7684 dp \u7684\u65f6\u5019\u72b6\u6001\u8f6c\u79fb\u53ef\u4ee5\u6709\u91cd\u590d\uff08\u6c42 max/min \u7684\u65f6\u5019\uff09\uff0c\u4f46\u662f\u4e0d\u80fd\u6f0f\u6389\u72b6\u6001\uff0c\u4f46\u662f\u8ba1\u6570 dp \u5c31\u4e0d\u4e00\u6837\u4e86\uff0c\u8981\u540c\u65f6\u6ee1\u8db3\u4e0d\u91cd\u4e0d\u6f0f\uff01\uff09 \u7c7b\u4f3c 01 \u80cc\u5305\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u6eda\u52a8\u6570\u7ec4\uff0c\u7136\u540e\u518d\u7f29\u6389\u4e00\u4e2a\u7ef4\u5ea6\u3002 \u56e0\u4e3a\u6211\u4eec\u6709\u540c\u5c42\u7684\u8f6c\u79fb\uff0c\u6240\u4ee5\u5e94\u5f53\u662f\u6b63\u5e8f\u5faa\u73af\uff0c\u5426\u5219\u8f6c\u79fb\u4f1a\u6210\u73af\u3002 \u90a3\u4e48\u53ef\u4ee5\u5199\u51fa\u4ee3\u7801\uff1a 1 2 3 4 5 memset ( dp , 0 , sizeof dp ); for ( int i = 1 ; i <= n ; ++ i ) for ( int j = v [ i ]; j <= m ; ++ j ) dp [ j ] = max ( dp [ j ], dp [ j - v [ i ]] + w [ i ]); cout << dp [ m ] << endl ; \u591a\u91cd\u80cc\u5305 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5495\u5495\u5495\u6389\u4e86 \u5206\u7ec4\u80cc\u5305 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5495\u5495\u5495\u6389\u4e86 \u6811\u4e0a\u80cc\u5305 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5495\u5495\u5495\u6389\u4e86 \u72b6\u6001\u7684\u81f3\u591a\uff0c\u6070\u597d\uff0c\u81f3\u5c11 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6700\u4e3b\u8981\u7684\u533a\u522b\u5c31\u662f\u4ed6\u4eec\u7684\u5b57\u9762\u610f\u601d\uff0c\u4f7f\u7528\u5bf9\u5e94\u72b6\u6001\u7684\u65f6\u5019\u8981\u60f3\u6e05\u695a\u8fd9\u79cd\u5bf9\u5e94\u7684\u72b6\u6001\u8981\u600e\u4e48\u5199\u3002 \u521d\u59cb\u503c\u548c\u7ec8\u6001\u8981\u6839\u636e\u72b6\u6001\u672c\u8eab\u7684 \u5b9a\u4e49 \u6765\u5199\u3002 \u8fd9\u91cc\u5047\u5b9a\u9700\u8981\u6c42\u89e3\u7684\u95ee\u9898\u662f\u666e\u901a\u768401\u80cc\u5305\uff0c\u72b6\u6001\u8bbe\u8ba1\u4e3a\u4e8c\u7ef4\uff0c\u65e0\u6eda\u52a8\u6570\u7ec4\uff0c\u53ea\u9700\u8981\u4ef7\u503c\u6700\u5927\u5373\u53ef\uff0c\u6ca1\u6709\u6070\u597d\u88c5\u6ee1\u7684\u6761\u4ef6\u3002 \u6070\u597d \u5b8c\u6574\u7684\u72b6\u6001\u662f\uff1a\u8003\u8651\u4ece \u524d \\(i\\) \u4e2a\u7269\u54c1\u91cc\u9762\u9009\uff0c\u6070\u597d\u7528 \\(j\\) \u7684\u7a7a\u95f4\u7684\u6240\u6709\u65b9\u6848\uff0c\u6743\u503c\u548c\u7684\u6700\u5927\u503c\u3002 \u56e0\u4e3a \\(f_0\\) \u7cfb\u7684\u72b6\u6001\u5c31\u662f\u6240\u6709\u7684\u8003\u8651\u4ece\u524d \\(0\\) \u4e2a\u7269\u54c1\u91cc\u9009\uff08\u4e0d\u9009\uff09\u7684\u60c5\u51b5\u3002 \u6240\u4ee5\u5728\u201c\u6070\u597d\u201d\u7684\u7ea6\u675f\u4e0b\uff0c\u53ea\u6709 \\(f_{0,0}=0\\) ,\u4e5f\u5c31\u662f\u6070\u597d\u7528 \\(0\\) \u7684\u7a7a\u95f4\u624d\u662f\u5408\u6cd5\u7684\u3002 \u5176\u4ed6\u7684\u4e0d\u5408\u6cd5\u6761\u4ef6\u90fd\u8981\u8bbe\u7f6e\u4e3a \\(-\\infty\\) \uff0c\uff08\u4e0d\u4ec5\u8868\u793a\u201c\u4e0d\u5408\u6cd5\u201d\uff0c\u4e5f\u662f\u4e3a\u4e86\u4e4b\u540e\u8f6c\u79fb\uff09 \u6240\u4ee5\u4f1a\u8fd9\u4e48\u5199\uff1a 1 memset ( f , 0xcf , sizeof f ), f [ 0 ][ 0 ] = 0 ; \u90a3\u4e48\uff0c\u5728dp\u5b8c\u4e86\u4e4b\u540e\uff0c\u6211\u4eec\u9700\u8981\u626b\u63cf \\(f_n\\) \u7cfb\u7684\u72b6\u6001\uff0c\u56e0\u4e3a\u88c5\u4e0d\u6ee1\u4e5f\u6709\u53ef\u80fd\u662f\u6700\u503c\uff08\u5f53\u524d\u95ee\u9898\u6ca1\u6709\u6070\u597d\u7684\u9650\u5236\uff0c\u5982\u679c\u6709\uff0c\u76f4\u63a5\u8f93\u51fa\u7ec8\u6001\u5373\u53ef\uff09\u3002 \uff08\u4e0d\u8bba\u6709\u6ca1\u6709\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\u90fd\u9700\u8981\uff09 \u81f3\u591a \u5b8c\u6574\u7684\u72b6\u6001\u662f\uff1a\u8003\u8651\u4ece\u524d \\(i\\) \u4e2a\u7269\u54c1\u91cc\u9762\u9009\uff0c\u7528\u4e0d\u8d85\u8fc7 \\(j\\) \u7684\u7a7a\u95f4\u7684\u6240\u6709\u65b9\u6848\uff0c\u6743\u503c\u548c\u7684\u6700\u5927\u503c\u3002 \u56e0\u4e3a\u8fd9\u91cc\u7684\u9650\u5236\u662f\u4e0d\u8d85\u8fc7\uff0c\u6240\u4ee5 \\(f_0\\) \u7cfb\u7684\u6240\u6709\u72b6\u6001\u90fd\u662f\u5408\u6cd5\u7684\u3002 \u4f60\u60f3\uff0c\u4f60\u4e0d\u9009\u4efb\u4f55\u7269\u54c1\uff0c\u90a3\u81ea\u7136\u6240\u6709\u53ef\u80fd\u7684\u7a7a\u95f4\u7684\u4e0d\u4f1a\u8d85\u8fc7\u554a\u3002 \u6240\u4ee5\u521d\u59cb\u503c\u5168\u90e8\u8bbe\u7f6e\u4e3a \\(0\\) \u3002 \u90a3\u4e48\uff0c\u5728dp\u5b8c\u4e86\u4e4b\u540e\uff0c\u76f4\u63a5\u8f93\u51fa\u7ec8\u6001 \\(f_{n,m}\\) \u5373\u53ef\uff0c\uff08\u6bd5\u7adf\u72b6\u6001\u8bbe\u8ba1\u7684\u662f\u201c\u6240\u6709\u65b9\u6848\u201d\uff09 \u56e0\u4e3a\u81f3\u591a\u548c\u6070\u597d\u90fd\u9002\u7528\u4e8e \u201c\u6700\u5927\u201d\uff0c\u6240\u4ee5\u653e\u5728\u4e0a\u9762\uff0c\u800c\u81f3\u5c11\u9002\u7528\u4e8e\u201c\u6700\u5c0f\u201d\uff0c\u6240\u4ee5\u5355\u72ec\u5206\u79bb\uff08\u4e0d\u8fc7\u6070\u597d\u4e5f\u662f\u53ef\u4ee5\u505a\u7684\uff0c\u9053\u7406\u4e00\u6837\uff09 \u95ee\u9898\uff1a\u4f60\u81f3\u5c11\u9700\u8981\u7528 \\(j\\) \u7684\u7a7a\u95f4\uff0c\u6c42\u4ef7\u503c\u7684\u6700\u5c0f\u503c\u3002 \u81f3\u5c11 \u5b8c\u6574\u7684\u72b6\u6001\u662f\uff1a\u8003\u8651\u4ece\u524d \\(i\\) \u4e2a\u7269\u54c1\u5f53\u4e2d\u9009\uff0c\u81f3\u5c11\u7528 \\(j\\) \u7684\u7a7a\u95f4\u7684\u6240\u6709\u65b9\u6848\uff0c\u6743\u503c\u548c\u7684\u6700\u5c0f\u503c\u3002 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u662f\u548c\u4e0a\u9762\u5dee\u4e0d\u591a\u7684\uff0c\u4e0d\u8fc7\u521d\u59cb\u5316\u548c\u8f6c\u79fb\u65b9\u5f0f\u9700\u8981\u6539\u53d8\u3002 \u56e0\u4e3a\u5f53\u4f60\u4e0d\u9009\u7684\u65f6\u5019\uff0c\u53ea\u6709 \\(f_{0,0}=0\\) \u662f\u5408\u6cd5\u7684\uff0c\u6240\u4ee5\u5176\u4ed6\u7684\u8bbe\u7f6e\u4e3a \\(+\\infty\\) \u3002 1 memset ( f , 0x3f , sizeof f ), f [ 0 ][ 0 ] = 0 ; \u4f46\u662f\u8f6c\u79fb\u5c31\u7565\u6709\u4e0d\u540c\u4e86\u3002 \u5982\u679c\u8bf4\uff0c\u4f60\u679a\u4e3e\u5230\u7684 \\(j\\) \u6ca1\u6709\u529e\u6cd5\u6ee1\u8db3\u5f53\u524d \\(v_i\\) \u7684\u9700\u6c42\uff0c\u4e0d\u5e94\u8be5\u53ea\u662f\u7ee7\u627f\u4e0a\u4e00\u8f6e\u7684\u72b6\u6001\u3002 \u56e0\u4e3a\uff0c\u5728\u4e0d\u8003\u8651\u8bbf\u95ee\u65e0\u6548\u4e0b\u6807\u7684\u60c5\u51b5\u4e0b\uff0c \\(f_{i,j}=\\min\\{f_{i-1,j-v_i}\\},(j-v_i<0)\\) \u4e5f\u662f\u5408\u6cd5\u7684\u8f6c\u79fb\u3002 \u81f3\u5c11\u9700\u8981\u8d1f\u6570\u7684\u7a7a\u95f4\uff0c\u90a3\u4f60\u4e0d\u9009\u4e5f\u662f\u6ee1\u8db3\u7684\u554a\uff0c \\(f\\) \u53c8\u662f\u8bb0\u5f55\u6700\u5c0f\u503c\uff0c\u81ea\u7136\u9700\u8981\u628a \\(f_{i-1,j-v_i}=0\\) \u554a\u3002 \u6240\u4ee5\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u9700\u8981\u53d8\u6210\u8fd9\u6837\uff1a\uff08\u4ee3\u7801\u5199\u7684\u662f\u4e8c\u7ef4\u80cc\u5305\u4e0d\u6eda\u52a8\u7684\u60c5\u51b5\uff0c\u5176\u4ed6\u9053\u7406\u4e00\u6837\uff09 1 2 3 4 5 6 7 8 9 memset ( f , 0x3f , sizeof f ), f [ 0 ][ 0 ][ 0 ] = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 0 ; j <= O2_need ; ++ j ){ for ( register int k = 0 ; k <= N_need ; ++ k ){ f [ i ][ j ][ k ] = f [ i -1 ][ j ][ k ]; f [ i ][ j ][ k ] = min ( f [ i ][ j ][ k ], f [ i -1 ][ max ( 0 , j - a [ i ])][ max ( 0 , k - b [ i ])] + c [ i ]); } } } return printf ( \"%d \\n \" , f [ n ][ O2_need ][ N_need ]), 0 ;","title":"\u80cc\u5305 DP"},{"location":"algor/dp/knapsack-dp/#01","text":"\u7ed9\u4f60 \\(n\\) \u4e2a\u7269\u54c1\uff0c \\(m\\) \u7684\u5bb9\u91cf\uff0c\u6bcf\u4e2a\u7269\u54c1\u6709\u4f53\u79ef \\(v_i\\) \u548c\u4ef7\u503c \\(w_i\\) \uff0c\u95ee\u4f60\u80fd\u83b7\u5f97\u7684\u4ef7\u503c \\(\\max\\) \u3002 \u8003\u8651\u8bbe\u8ba1\u4e00\u4e2a\u72b6\u6001 \\(dp(i, j)\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\u7269\u54c1\uff0c\u81f3\u591a\u4f7f\u7528\u4e86 \\(j\\) \u7684\u7a7a\u95f4\u7684\u6700\u5927\u4ef7\u503c\u3002 \u8003\u8651\u5bf9\u4e8e \\(i\\) \u7684\u51b3\u7b56\u6709\u4ec0\u4e48\uff0c\u65e0\u975e\u5c31\u662f\u9009 \\(i\\) \u6216\u8005\u4e0d\u9009 \\(i\\) \uff0c\u4ee5\u6b64\u4e3a\u4f9d\u636e\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u6ee1\u8db3\u5728\u524d \\(i\\) \u4e2a\u7269\u54c1\u91cc\u9762\u81f3\u591a\u7528 \\(j\\) \u7684\u7a7a\u95f4\u7684\u6240\u6709\u51b3\u7b56\u5206\u7c7b\u3002 \u7b2c\u4e00\u7c7b\u5c31\u662f\u4e0d\u9009 \\(i\\) \u8fd9\u4e2a\u7269\u54c1\u7684\uff0c\u7b2c\u4e8c\u7c7b\u5c31\u662f\u9009 \\(i\\) \u8fd9\u4e2a\u7269\u54c1\u7684\u3002 \u90a3\u4e48\u4ece\u7b2c\u4e00\u7c7b\u8f6c\u79fb\u8fc7\u6765\u5c31\u662f \\(dp(i - 1, j) \\to dp(i, j)\\) \u3002 \u4ece\u7b2c\u4e8c\u7c7b\u8f6c\u79fb\u8fc7\u6765\uff0c\u56e0\u4e3a\u7b2c\u4e8c\u7c7b\u90fd\u9009\u4e86 \\(i\\) \u8fd9\u4e2a\u7269\u54c1\uff0c\u6240\u4ee5\u662f \\(dp(i - 1, j - v_i) + w_i \\to dp(i, j)\\) \u3002 \u90a3\u4e48\u56e0\u4e3a\u5c5e\u6027\u662f\u4ee3\u4ef7\u7684\u6700\u5927\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5728\u8fd9\u4e24\u79cd\u51b3\u7b56\u91cc\u9762\u9009\u6700\u5927\u503c\u5373\u53ef\u3002 \u53ef\u4ee5\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \\[ dp(i, j) = \\max(dp(i - 1, j), dp(i - 1, j - v_i) + w_i (\\text{if } j \\ge v_i.)) \\] \u53ef\u4ee5\u68c0\u67e5\u4e00\u4e0b\uff0c\u53d1\u73b0\u5f53\u524d\u9636\u6bb5\uff08\u8003\u8651\u7269\u54c1 \\(i\\) \u7684\uff09\u72b6\u6001\u90fd\u7531 \\(i - 1\\) \u9636\u6bb5\u8f6c\u79fb\u8fc7\u6765\uff0c\u90a3\u4e48\u72b6\u6001\u8f6c\u79fb\u662f\u4e0d\u6210\u73af\u7684\uff0c\u663e\u7136\u65e0\u540e\u6548\u6027\u3002 \u8fd9\u91cc\u4f7f\u7528\u4e86\u96c6\u5408\u7684\u601d\u60f3\u8003\u8651\u51b3\u7b56\uff0c\u53ef\u4ee5\u53d1\u73b0\u663e\u7136\u8986\u76d6\u4e86\u5b8c\u6574\u7684\u72b6\u6001\u7a7a\u95f4\uff0c\u6b63\u786e\u6027\u6ca1\u6709\u95ee\u9898\u3002 \u7136\u540e\u8003\u8651\u600e\u4e48\u521d\u59cb\u5316\uff0c\u6839\u636e\u72b6\u6001\u7684\u5b9a\u4e49\uff0c\u8fd9\u91cc\u4e0d\u662f\u6070\u597d\u662f\u81f3\u591a\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u4ee4\u6240\u6709\u72b6\u6001\u521d\u59cb\u5747\u4e3a \\(0\\) \u5373\u53ef\uff0c\uff08\u5728\u6ca1\u6709\u51b3\u7b56\u4e4b\u524d\uff0c\u81f3\u591a\u4f7f\u7528\u4efb\u610f\u7684\u7a7a\u95f4\u80fd\u83b7\u5f97\u7684\u6700\u5927\u4ef7\u503c\u90fd\u662f \\(0\\) \u3002\uff09 \u7b54\u6848\uff08\u76ee\u6807\u72b6\u6001\uff09\uff0c\u6839\u636e\u5b9a\u4e49\u5c31\u662f \\(dp(n, m)\\) \u3002 \u90a3\u4e48\u5c31\u53ef\u4ee5\u6109\u5feb\u7684\u5199\u4ee3\u7801\u4e86\u3002 1 2 3 4 5 6 7 memset ( dp , 0 , sizeof dp ); for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 0 ; j <= m ; ++ j ) { dp [ i ][ j ] = dp [ i - 1 ][ j ]; if ( j >= v [ i ]) dp [ i ][ j ] = max ( dp [ i ][ j ], dp [ i - 1 ][ j - v [ i ]] + w [ i ]); } cout << dp [ n ][ m ] << endl ; \u7136\u540e\u6ce8\u610f\u5230\u8fd9\u4e2a\u72b6\u6001\u7684\u5f53\u524d\u9636\u6bb5\u53ea\u4f9d\u8d56\u4e8e\u4e0a\u4e00\u4e2a\u9636\u6bb5\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a\u53eb\u6eda\u52a8\u6570\u7ec4\u7684\u6280\u5de7\uff0c\u6bcf\u6b21\u53ea\u4fdd\u5b58\u4e0a\u4e00\u4e2a\u9636\u6bb5\u548c\u8fd9\u4e00\u4e2a\u9636\u6bb5\u7684\u72b6\u6001\uff0c\u5728\u8fd9\u4e24\u4e2a\u6570\u7ec4\u91cc\u9762\u4e0d\u65ad\u8f6c\u79fb\u5373\u53ef\uff1a 1 2 3 4 5 6 7 8 9 10 11 int dp [ 2 ][ si ]; memset ( dp , 0 , sizeof dp ); for ( int i = 1 ; i <= n ; ++ i ) { int now = i & 1 , last = ( i & 1 ) ^ 1 ; for ( int j = 0 ; j <= m ; ++ j ) { dp [ now ][ j ] = dp [ last ][ j ]; if ( j >= v [ i ]) dp [ now ][ j ] = max ( dp [ now ][ j ], dp [ last ][ j - v [ i ]] + w [ i ]); } } cout << dp [ n & 1 ][ m ] << endl ; \u53d1\u73b0\u5176\u5b9e\u8fd8\u80fd\u518d\u4f18\u5316\uff0c\u6ce8\u610f\u5230\u6211\u4eec\u6bcf\u79cd\u7269\u54c1\u53ea\u6709\u4e00\u4e2a\uff0c\u6240\u4ee5 \\(dp(i, j)\\) \u5fc5\u7136\u662f\u4ece\u4e0a\u4e00\u4e2a\u9636\u6bb5\u7684\u4e00\u4e2a \\(j^\\prime < j\\) \u8f6c\u79fb\u8fc7\u6765\u7684\uff08 \\(v_i > 0\\) \uff09\u3002 \u5982\u679c\u6211\u4eec\u628a\u8fd9\u4e24\u7ef4\u538b\u7f29\u5230\u4e00\u8d77\uff0c\u867d\u7136\u662f\u76f4\u63a5\u7ee7\u627f\u4e0a\u4e00\u4e2a\u9636\u6bb5\u4e86\uff0c\u4f46\u662f\u76f4\u63a5\u8f6c\u79fb\u663e\u7136\u6709\u95ee\u9898\uff0c\u56e0\u4e3a \\(dp(j)\\) \u4f1a\u4f9d\u8d56 \\(dp(j - v_i)\\) \uff0c\u800c\u6b63\u7740\u5faa\u73af \\(j\\) \u4f1a\u5bfc\u81f4 \\(dp(j -v_i)\\) \u63d0\u524d\u88ab\u66f4\u65b0\u6210 \\(i\\) \u9636\u6bb5\u7684 \\(dp(j - v_i)\\) \uff0c\u6240\u4ee5\u9700\u8981\u4f7f\u7528\u5012\u5e8f\u5faa\u73af\u6765\u4fdd\u8bc1\u8f6c\u79fb\u4e0d\u6210\u73af\u3002 \u90a3\u4e48\u53ef\u4ee5\u5199\u51fa\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 int dp [ si ]; memset ( dp , 0 , sizeof dp ); for ( int i = 1 ; i <= n ; ++ i ) for ( int j = m ; j >= v [ i ]; -- j ) dp [ j ] = max ( dp [ j ], dp [ j - v [ i ]] + w [ i ]); // \u56e0\u4e3a\u76f4\u63a5\u5171\u7528\u4e00\u4e2a\u6570\u7ec4\u4e86\uff0c\u6240\u4ee5\u4e0d\u7528\u624b\u52a8\u7ee7\u627f\u4e0a\u4e00\u4e2a\u9636\u6bb5\u4e86\u3002 cout << dp [ m ] << endl ;","title":"01 \u80cc\u5305"},{"location":"algor/dp/knapsack-dp/#_1","text":"\u7ed9\u4f60 \\(n\\) \u79cd\u7269\u54c1\uff0c \\(m\\) \u7684\u5bb9\u91cf\uff0c\u6bcf\u79cd\u7269\u54c1\u6709\u4f53\u79ef \\(v_i\\) \u548c\u4ef7\u503c \\(w_i\\) \uff0c\u6bcf\u79cd\u7269\u54c1\u53ef\u4ee5\u6709\u65e0\u7a77\u591a\u4e2a\uff0c\u95ee\u4f60\u80fd\u83b7\u5f97\u7684\u4ef7\u503c \\(\\max\\) \u3002 \u4f9d\u65e7\u8003\u8651\u6cbf\u7528 01 \u80cc\u5305\u7684\u72b6\u6001\uff0c\u8bbe \\(dp(i, j)\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\u7269\u54c1\uff0c\u81f3\u591a\u4f7f\u7528\u4e86 \\(j\\) \u7684\u7a7a\u95f4\u7684\u6700\u5927\u4ef7\u503c\u3002 \u4f46\u663e\u7136\u8fd9\u91cc\u7684\u51b3\u7b56\u4e0d\u592a\u4e00\u6837\u4e86\uff0c\u56e0\u4e3a\u6bcf\u79cd\u7269\u54c1\u90fd\u6709\u65e0\u9650\u591a\u4e2a\uff0c\u6240\u4ee5\u51b3\u7b56\u53ef\u80fd\u4f1a\u5728\u67d0\u79cd\u7269\u54c1\u4e0a\u51b3\u7b56\u591a\u6b21\uff0c\u8f6c\u79fb\u5c31\u53ef\u80fd\u5728\u540c\u9636\u6bb5\u8f6c\u79fb\u3002 \u90a3\u4e48\u5206\u7c7b\u8ba8\u8bba\u770b\u770b\u80fd\u4ece\u4ec0\u4e48\u5730\u65b9\u8f6c\u79fb\u8fc7\u6765\u3002 \u9996\u5148\u5982\u679c\u6211\u4eec\u4e0d\u9009\u8fd9\u79cd\u7269\u54c1\u7684\u4efb\u610f\u4e00\u4e2a\uff0c\u7b97\u662f\u4e00\u79cd\uff0c\u8f6c\u79fb\u4f1a\u53d8\u6210 \\(dp(i - 1,j) \\to dp(i, j)\\) \u3002 \u7136\u540e\u5982\u679c\u6211\u4eec\u9009\u4e86\u8fd9\u79cd\u7269\u54c1\u7684\u4e00\u4e2a\uff0c\u8f6c\u79fb\u4f1a\u53d8\u6210 \\(dp(i - 1, j - v_i) + w_i\\to dp(i, j)\\) \u3002 \u5982\u679c\u9009\u4e86\u4e24\u4e2a\uff0c\u8f6c\u79fb\u4f1a\u53d8\u6210 \\(dp(i - 1, j - 2v_i) + w_i \\to dp(i, j - v_i) + w_i \\to dp(i, j)\\) \u3002 \u6211\u4eec\u4e0d\u5e0c\u671b\u4e00\u6b21\u51b3\u7b56\u4e24\u4e2a\u72b6\u6001\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u9009\u4e24\u4e2a\u662f\u4ee5\u9009\u4e86\u4e00\u4e2a\u7684\u72b6\u6001\u4f5c\u4e3a\u57fa\u7840\u518d\u9009\u4e00\u4e2a\u7684\u3002 \u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e2a \\(j\\) \u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u8f6c\u79fb\uff1a\u4ece\u4e0a\u4e00\u9636\u6bb5\u7684 \\(dp(j)\\) \u6216\u8005 \\(dp(j - v_i)\\) \u8f6c\u79fb\u8fc7\u6765\uff0c\u4ece\u8fd9\u4e00\u9636\u6bb5\u7684 \\(dp(j - v_i)\\) \u8f6c\u79fb\u8fc7\u6765\u3002 \u7136\u540e\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u8f6c\u79fb\u663e\u7136\u4f1a\u91cd\u590d\u8f6c\u79fb\u5f88\u591a\uff0c\u753b\u56fe\u53ef\u4ee5\u53d1\u73b0\u7701\u53bb \\(dp(i - 1,j - v_i)\\) \u4e4b\u540e\u72b6\u6001\u7a7a\u95f4\u4ecd\u7136\u80fd\u88ab\u8986\u76d6\u6ee1\uff0c\u6240\u4ee5\u6700\u7ec8\u65b9\u7a0b\u53d8\u4e3a\uff1a \\[ dp(i, j) = \\max(dp(i - 1, j), dp(i, j - v_i) + w_i(\\text{if } j \\ge v_i.)) \\] \uff08\u5728\u8bbe\u8ba1\u666e\u901a\u7684 dp \u7684\u65f6\u5019\u72b6\u6001\u8f6c\u79fb\u53ef\u4ee5\u6709\u91cd\u590d\uff08\u6c42 max/min \u7684\u65f6\u5019\uff09\uff0c\u4f46\u662f\u4e0d\u80fd\u6f0f\u6389\u72b6\u6001\uff0c\u4f46\u662f\u8ba1\u6570 dp \u5c31\u4e0d\u4e00\u6837\u4e86\uff0c\u8981\u540c\u65f6\u6ee1\u8db3\u4e0d\u91cd\u4e0d\u6f0f\uff01\uff09 \u7c7b\u4f3c 01 \u80cc\u5305\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u6eda\u52a8\u6570\u7ec4\uff0c\u7136\u540e\u518d\u7f29\u6389\u4e00\u4e2a\u7ef4\u5ea6\u3002 \u56e0\u4e3a\u6211\u4eec\u6709\u540c\u5c42\u7684\u8f6c\u79fb\uff0c\u6240\u4ee5\u5e94\u5f53\u662f\u6b63\u5e8f\u5faa\u73af\uff0c\u5426\u5219\u8f6c\u79fb\u4f1a\u6210\u73af\u3002 \u90a3\u4e48\u53ef\u4ee5\u5199\u51fa\u4ee3\u7801\uff1a 1 2 3 4 5 memset ( dp , 0 , sizeof dp ); for ( int i = 1 ; i <= n ; ++ i ) for ( int j = v [ i ]; j <= m ; ++ j ) dp [ j ] = max ( dp [ j ], dp [ j - v [ i ]] + w [ i ]); cout << dp [ m ] << endl ;","title":"\u5b8c\u5168\u80cc\u5305"},{"location":"algor/dp/knapsack-dp/#_2","text":"\u5495\u5495\u5495\u6389\u4e86","title":"\u591a\u91cd\u80cc\u5305"},{"location":"algor/dp/knapsack-dp/#_3","text":"\u5495\u5495\u5495\u6389\u4e86","title":"\u5206\u7ec4\u80cc\u5305"},{"location":"algor/dp/knapsack-dp/#_4","text":"\u5495\u5495\u5495\u6389\u4e86","title":"\u6811\u4e0a\u80cc\u5305"},{"location":"algor/dp/knapsack-dp/#_5","text":"\u6700\u4e3b\u8981\u7684\u533a\u522b\u5c31\u662f\u4ed6\u4eec\u7684\u5b57\u9762\u610f\u601d\uff0c\u4f7f\u7528\u5bf9\u5e94\u72b6\u6001\u7684\u65f6\u5019\u8981\u60f3\u6e05\u695a\u8fd9\u79cd\u5bf9\u5e94\u7684\u72b6\u6001\u8981\u600e\u4e48\u5199\u3002 \u521d\u59cb\u503c\u548c\u7ec8\u6001\u8981\u6839\u636e\u72b6\u6001\u672c\u8eab\u7684 \u5b9a\u4e49 \u6765\u5199\u3002 \u8fd9\u91cc\u5047\u5b9a\u9700\u8981\u6c42\u89e3\u7684\u95ee\u9898\u662f\u666e\u901a\u768401\u80cc\u5305\uff0c\u72b6\u6001\u8bbe\u8ba1\u4e3a\u4e8c\u7ef4\uff0c\u65e0\u6eda\u52a8\u6570\u7ec4\uff0c\u53ea\u9700\u8981\u4ef7\u503c\u6700\u5927\u5373\u53ef\uff0c\u6ca1\u6709\u6070\u597d\u88c5\u6ee1\u7684\u6761\u4ef6\u3002 \u6070\u597d \u5b8c\u6574\u7684\u72b6\u6001\u662f\uff1a\u8003\u8651\u4ece \u524d \\(i\\) \u4e2a\u7269\u54c1\u91cc\u9762\u9009\uff0c\u6070\u597d\u7528 \\(j\\) \u7684\u7a7a\u95f4\u7684\u6240\u6709\u65b9\u6848\uff0c\u6743\u503c\u548c\u7684\u6700\u5927\u503c\u3002 \u56e0\u4e3a \\(f_0\\) \u7cfb\u7684\u72b6\u6001\u5c31\u662f\u6240\u6709\u7684\u8003\u8651\u4ece\u524d \\(0\\) \u4e2a\u7269\u54c1\u91cc\u9009\uff08\u4e0d\u9009\uff09\u7684\u60c5\u51b5\u3002 \u6240\u4ee5\u5728\u201c\u6070\u597d\u201d\u7684\u7ea6\u675f\u4e0b\uff0c\u53ea\u6709 \\(f_{0,0}=0\\) ,\u4e5f\u5c31\u662f\u6070\u597d\u7528 \\(0\\) \u7684\u7a7a\u95f4\u624d\u662f\u5408\u6cd5\u7684\u3002 \u5176\u4ed6\u7684\u4e0d\u5408\u6cd5\u6761\u4ef6\u90fd\u8981\u8bbe\u7f6e\u4e3a \\(-\\infty\\) \uff0c\uff08\u4e0d\u4ec5\u8868\u793a\u201c\u4e0d\u5408\u6cd5\u201d\uff0c\u4e5f\u662f\u4e3a\u4e86\u4e4b\u540e\u8f6c\u79fb\uff09 \u6240\u4ee5\u4f1a\u8fd9\u4e48\u5199\uff1a 1 memset ( f , 0xcf , sizeof f ), f [ 0 ][ 0 ] = 0 ; \u90a3\u4e48\uff0c\u5728dp\u5b8c\u4e86\u4e4b\u540e\uff0c\u6211\u4eec\u9700\u8981\u626b\u63cf \\(f_n\\) \u7cfb\u7684\u72b6\u6001\uff0c\u56e0\u4e3a\u88c5\u4e0d\u6ee1\u4e5f\u6709\u53ef\u80fd\u662f\u6700\u503c\uff08\u5f53\u524d\u95ee\u9898\u6ca1\u6709\u6070\u597d\u7684\u9650\u5236\uff0c\u5982\u679c\u6709\uff0c\u76f4\u63a5\u8f93\u51fa\u7ec8\u6001\u5373\u53ef\uff09\u3002 \uff08\u4e0d\u8bba\u6709\u6ca1\u6709\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\u90fd\u9700\u8981\uff09 \u81f3\u591a \u5b8c\u6574\u7684\u72b6\u6001\u662f\uff1a\u8003\u8651\u4ece\u524d \\(i\\) \u4e2a\u7269\u54c1\u91cc\u9762\u9009\uff0c\u7528\u4e0d\u8d85\u8fc7 \\(j\\) \u7684\u7a7a\u95f4\u7684\u6240\u6709\u65b9\u6848\uff0c\u6743\u503c\u548c\u7684\u6700\u5927\u503c\u3002 \u56e0\u4e3a\u8fd9\u91cc\u7684\u9650\u5236\u662f\u4e0d\u8d85\u8fc7\uff0c\u6240\u4ee5 \\(f_0\\) \u7cfb\u7684\u6240\u6709\u72b6\u6001\u90fd\u662f\u5408\u6cd5\u7684\u3002 \u4f60\u60f3\uff0c\u4f60\u4e0d\u9009\u4efb\u4f55\u7269\u54c1\uff0c\u90a3\u81ea\u7136\u6240\u6709\u53ef\u80fd\u7684\u7a7a\u95f4\u7684\u4e0d\u4f1a\u8d85\u8fc7\u554a\u3002 \u6240\u4ee5\u521d\u59cb\u503c\u5168\u90e8\u8bbe\u7f6e\u4e3a \\(0\\) \u3002 \u90a3\u4e48\uff0c\u5728dp\u5b8c\u4e86\u4e4b\u540e\uff0c\u76f4\u63a5\u8f93\u51fa\u7ec8\u6001 \\(f_{n,m}\\) \u5373\u53ef\uff0c\uff08\u6bd5\u7adf\u72b6\u6001\u8bbe\u8ba1\u7684\u662f\u201c\u6240\u6709\u65b9\u6848\u201d\uff09 \u56e0\u4e3a\u81f3\u591a\u548c\u6070\u597d\u90fd\u9002\u7528\u4e8e \u201c\u6700\u5927\u201d\uff0c\u6240\u4ee5\u653e\u5728\u4e0a\u9762\uff0c\u800c\u81f3\u5c11\u9002\u7528\u4e8e\u201c\u6700\u5c0f\u201d\uff0c\u6240\u4ee5\u5355\u72ec\u5206\u79bb\uff08\u4e0d\u8fc7\u6070\u597d\u4e5f\u662f\u53ef\u4ee5\u505a\u7684\uff0c\u9053\u7406\u4e00\u6837\uff09 \u95ee\u9898\uff1a\u4f60\u81f3\u5c11\u9700\u8981\u7528 \\(j\\) \u7684\u7a7a\u95f4\uff0c\u6c42\u4ef7\u503c\u7684\u6700\u5c0f\u503c\u3002 \u81f3\u5c11 \u5b8c\u6574\u7684\u72b6\u6001\u662f\uff1a\u8003\u8651\u4ece\u524d \\(i\\) \u4e2a\u7269\u54c1\u5f53\u4e2d\u9009\uff0c\u81f3\u5c11\u7528 \\(j\\) \u7684\u7a7a\u95f4\u7684\u6240\u6709\u65b9\u6848\uff0c\u6743\u503c\u548c\u7684\u6700\u5c0f\u503c\u3002 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u662f\u548c\u4e0a\u9762\u5dee\u4e0d\u591a\u7684\uff0c\u4e0d\u8fc7\u521d\u59cb\u5316\u548c\u8f6c\u79fb\u65b9\u5f0f\u9700\u8981\u6539\u53d8\u3002 \u56e0\u4e3a\u5f53\u4f60\u4e0d\u9009\u7684\u65f6\u5019\uff0c\u53ea\u6709 \\(f_{0,0}=0\\) \u662f\u5408\u6cd5\u7684\uff0c\u6240\u4ee5\u5176\u4ed6\u7684\u8bbe\u7f6e\u4e3a \\(+\\infty\\) \u3002 1 memset ( f , 0x3f , sizeof f ), f [ 0 ][ 0 ] = 0 ; \u4f46\u662f\u8f6c\u79fb\u5c31\u7565\u6709\u4e0d\u540c\u4e86\u3002 \u5982\u679c\u8bf4\uff0c\u4f60\u679a\u4e3e\u5230\u7684 \\(j\\) \u6ca1\u6709\u529e\u6cd5\u6ee1\u8db3\u5f53\u524d \\(v_i\\) \u7684\u9700\u6c42\uff0c\u4e0d\u5e94\u8be5\u53ea\u662f\u7ee7\u627f\u4e0a\u4e00\u8f6e\u7684\u72b6\u6001\u3002 \u56e0\u4e3a\uff0c\u5728\u4e0d\u8003\u8651\u8bbf\u95ee\u65e0\u6548\u4e0b\u6807\u7684\u60c5\u51b5\u4e0b\uff0c \\(f_{i,j}=\\min\\{f_{i-1,j-v_i}\\},(j-v_i<0)\\) \u4e5f\u662f\u5408\u6cd5\u7684\u8f6c\u79fb\u3002 \u81f3\u5c11\u9700\u8981\u8d1f\u6570\u7684\u7a7a\u95f4\uff0c\u90a3\u4f60\u4e0d\u9009\u4e5f\u662f\u6ee1\u8db3\u7684\u554a\uff0c \\(f\\) \u53c8\u662f\u8bb0\u5f55\u6700\u5c0f\u503c\uff0c\u81ea\u7136\u9700\u8981\u628a \\(f_{i-1,j-v_i}=0\\) \u554a\u3002 \u6240\u4ee5\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u9700\u8981\u53d8\u6210\u8fd9\u6837\uff1a\uff08\u4ee3\u7801\u5199\u7684\u662f\u4e8c\u7ef4\u80cc\u5305\u4e0d\u6eda\u52a8\u7684\u60c5\u51b5\uff0c\u5176\u4ed6\u9053\u7406\u4e00\u6837\uff09 1 2 3 4 5 6 7 8 9 memset ( f , 0x3f , sizeof f ), f [ 0 ][ 0 ][ 0 ] = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 0 ; j <= O2_need ; ++ j ){ for ( register int k = 0 ; k <= N_need ; ++ k ){ f [ i ][ j ][ k ] = f [ i -1 ][ j ][ k ]; f [ i ][ j ][ k ] = min ( f [ i ][ j ][ k ], f [ i -1 ][ max ( 0 , j - a [ i ])][ max ( 0 , k - b [ i ])] + c [ i ]); } } } return printf ( \"%d \\n \" , f [ n ][ O2_need ][ N_need ]), 0 ;","title":"\u72b6\u6001\u7684\u81f3\u591a\uff0c\u6070\u597d\uff0c\u81f3\u5c11"},{"location":"algor/dp/sos-dp/","text":"\u8fd9\u4e2a\u4e1c\u897f\u4e5f\u53eb \u9ad8\u7ef4\u524d\u7f00\u548c \u6216\u8005 \u5b50\u96c6\u6c42\u548c\u3002 \u5230\u7701\u9009\u4ee5\u4e0a\u5e38\u5e38\u4f1a\u7ed3\u5408 FWT \uff08\u5feb\u901f\u6c83\u5c14\u4ec0\u53d8\u6362\uff09\u7b97\u6cd5\u3002 \u5168\u79f0 Sum Over Subset Dynamic Programming. \u6cdb\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 SOSDP \u4e3b\u8981\u7528\u4e8e\u89e3\u51b3\u8fd9\u6837\u7684\u4e00\u7c7b\u95ee\u9898\uff1a \u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(a_0,a_1,a_2,\\dots,a_{2^n - 1}\\) \u3002 \u8981\u4f60\u6c42 \\(b_i = \\sum\\limits_{j \\ \\texttt{and}\\ i = j} a_j\\) \u3002 \uff08\u6b64\u5904\u7684 \\(\\sum\\) \u4e5f\u53ef\u4ee5\u6362\u6210 \\(\\min,\\max,\\bigoplus\\) \uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u6ee1\u8db3\u7ed3\u5408\u5f8b\u548c\u4ea4\u6362\u5f8b\uff1f\uff09 \u53ef\u80fd\u6709\u70b9\u770b\u4e0d\u61c2\uff0c\u7a0d\u5fae\u89e3\u91ca\u4e00\u4e0b\uff0c\u6b64\u5904\u628a \\(a\\) \u548c \\(b\\) \u7684\u4e0b\u6807\u90fd\u770b\u4f5c\u4e86\u4e00\u4e2a\u4e2a\u4e8c\u8fdb\u5236\u6570\uff08\u4e0b\u6807\u4ece 0 \u5f00\u59cb\uff09\uff0c \u4e5f\u5c31\u662f\u8bf4\uff0c \\(a\\) \u548c \\(b\\) \u7684\u4e0b\u6807\u8868\u793a\u7684\u662f\u4e00\u4e2a\u5927\u5c0f\u4e3a \\(n\\) \u7684\u96c6\u5408\u3002 \u90a3\u4e48\u4e0a\u9762\u7684\u5f0f\u5b50\u4e5f\u53ef\u4ee5\u5199\u6210 \\(\\sum\\limits_{j \\subset i} a_j\\) \u3002 \u8fd9\u4e2a\u5f0f\u5b50\u5728\u5e72\u5565\u5462\uff1f \u6211\u4eec\u8bbe \\(a_i\\) \u4e3a\u4e8c\u8fdb\u5236\u4e0b\u8868\u793a\u4e3a \\(i\\) \u7684\u96c6\u5408 \uff08\u672c\u6587\u4e2d\u8bb0\u4f5c \\(S(i)\\) \uff09 \u7684\u6743\u503c\u3002 \\(b_i\\) \u5c31\u8868\u793a\u7684\u662f \\(S(i)\\) \u7684\u6240\u6709\u5b50\u96c6\u7684\u6743\u503c\u548c\uff0c\u6240\u4ee5\u8fd9\u4e2a\u95ee\u9898\u4e5f\u53eb \u5b50\u96c6\u6c42\u548c \u3002 \u800c\u6362\u4e00\u4e2a\u89d2\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u4e0b\u6807\u770b\u6210 \\(n\\) \u7ef4\u7a7a\u95f4\u91cc\u7684\u4e00\u4e2a\u5750\u6807 \\((x_0, x_1, x_2, \\dots, x_{n - 1}), x_i \\in \\{0, 1\\}\\) \u3002 \u90a3\u4e48\u8fd9\u4e2a \\(b_i\\) \u5176\u5b9e\u5c31\u662f\u4e00\u4e2a \u9ad8\u7ef4\u524d\u7f00\u548c \u3002 \u505a\u6cd5 \u03c8(\uff40\u2207\u00b4)\u03c8 \u9996\u5148\u8003\u8651\u4e00\u4e2a\u66b4\u529b\uff0c\u6211\u4eec\u76f4\u63a5\u679a\u4e3e\u6240\u6709\u5b50\u96c6\u7136\u540e\u8ba1\u7b97\u6743\u503c\u548c\u3002 \u7136\u540e\u8fd9\u73a9\u610f\u513f\u662f \\(\\text{O}(3^{n})\\) \u7684\u3002 \u6211\u4eec\u628a\u8fd9\u4e2a\u5f0f\u5b50\u518d\u62ff\u51fa\u6765\u770b\u770b\uff1a \\[b_i = \\sum\\limits_{j \\ \\texttt{and}\\ i = j} a_j\\] \u65e2\u7136\u521a\u624d\u90fd\u8bf4\u4e86\u4e8c\u8fdb\u5236\u4e0b\u8003\u8651\uff0c\u90a3\u6211\u4eec\u5c31\u76f4\u63a5\u4e8c\u8fdb\u5236\u62c6\u5f00\uff1a \\(b_i\\) \u53ef\u4ee5\u5199\u4f5c \\(b_{(x_0, x_1, \\dots x_{n - 1})}\\) \uff0c\u7136\u540e\u6709\uff1a \\[b_{(x_0, x_1, \\dots x_{n - 1})} = \\sum\\limits_{y_0 \\le x_0}\\sum\\limits_{y_1 \\le x_1}\\dots \\sum\\limits_{y_{n - 1} \\le x_{n - 1}} a_{(y_0, y_1, \\dots y_{n - 1})}\\] \u8fd9\u662f\u9ad8\u7ef4\u524d\u7f00\u548c\u7684\u76f4\u63a5\u8868\u793a\u6cd5\u3002 \u8003\u8651\u4e00\u4e2a DP\uff0c\u8bbe \\(dp(msk, i)\\) \u8868\u793a\u8003\u8651\u6c42 \\(msk\\) \u8fd9\u4e2a\u96c6\u5408\u7684\u5b50\u96c6\u548c\uff0c\u5f53\u524d\u5df2\u7ecf\u505a\u5230\u4e86\u7b2c \\(i\\) \u4f4d\uff0c\u76ee\u524d\u7684\u548c\u662f\u591a\u5c11\u3002 \u6211\u4eec\u628a \\(msk\\) \u770b\u4f5c \\((x_0, x_1, \\dots x_{n - 1})\\) \u3002 \u7528\u76f4\u63a5\u8868\u793a\u7684\u65b9\u6cd5\u5199\u51fa \\(dp(msk, i)\\) \u3002 \\[dp(msk, i) = \\sum\\limits_{y_0 \\le x_0}\\sum\\limits_{y_1 \\le x_1} \\dots \\sum\\limits_{y_{i - 1} \\le x_{i - 1}} a_(y_0, y_1 \\dots y_{i - 1}, x_i, x_{i + 1}, \\dots x_{n - 1})\\] \u8003\u8651\u600e\u4e48\u8f6c\u79fb\uff0c \u5c31\u662f\u8003\u8651 \\(x_i\\) \u662f \\(0\\) \u8fd8\u662f \\(1\\) \uff0c\u5982\u679c\u662f \\(0\\) \uff0c\u90a3\u4e48\u8fd9\u4e00\u7ef4\u5c31\u76f4\u63a5\u7ee7\u627f\u4e0a\u4e00\u4f4d\u7684\u5373\u53ef \uff08\u56e0\u4e3a\u5f0f\u5b50\u662f\u957f\u6210 \\(\\sum\\limits_{y_i \\le x_i}\\) \u8fd9\u6837\u7684\uff0c\u5982\u679c \\(x_i\\) \u662f \\(0\\) \u5c31\u76f4\u63a5\u52a0\u4e0a\u524d\u4e00\u4f4d\u7684\u72b6\u6001\uff09\u3002 \u5982\u679c\u662f \\(1\\) \uff0c\u76f8\u5f53\u4e8e\u5bf9\u7740\u4e0a\u4e00\u4f4d\u7684\u4e24\u79cd\u60c5\u51b5\u90fd\u6c42\u4e86\u548c\uff0c\u6240\u4ee5\u7528\u4e0a\u4e00\u4f4d\u662f \\(0/1\\) \u7684\u4e24\u79cd\u60c5\u51b5\u52a0\u8d77\u6765\u5373\u53ef\uff1a \u5f97\u5230\u65b9\u7a0b\uff1a \\[dp(\\{x_0,x_1,\\dots,x_{n - 1}\\},i) = \\begin{cases} dp(\\{x_0,x_1,\\dots x_{i - 1}, 0, x_{i + 1}, \\dots x_{n - 1}\\}, i - 1) & x_i = 0 \\\\ \\sum\\limits_{bit \\in \\{0, 1\\}}dp(\\{x_0, x_1, \\dots, x_{i - 1}, bit, x_{i + 1}, \\dots x_{n - 1}\\}, i - 1) & x_i = 1 \\end{cases}\\] \u521d\u59cb\u5316 \\(dp(msk, 0) = a_{msk}\\) \u3002 \u53d1\u73b0\u8fd9\u91cc \\(dp(?,i)\\) \u7684\u72b6\u6001\u53ea\u548c \\(dp(?, i- 1)\\) \u6709\u5173\uff0c\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u6eda\u52a8\u6570\u7ec4\u3002 \u7136\u540e\u53d1\u73b0\u6211\u4eec\u76f4\u63a5\u4ece \\(0 \\sim 2^n - 1\\) \u679a\u4e3e \\(msk\\) \u7684\u8bdd\uff0c\u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u53bb\u6389\u6700\u540e\u4e00\u7ef4\uff0c\u56e0\u4e3a\u65b9\u7a0b\u672c\u8eab\u7684\u7279\u6b8a\u6027\uff0c\u8fd9\u6837\u4ecd\u7136\u662f\u65e0\u540e\u6548\u6027\u7684\u3002 \u53ef\u4ee5\u81ea\u5df1\u753b\u56fe\u624b\u63a8\uff0c\u539f\u56e0\u7c7b\u4f3c 01 \u80cc\u5305\u3002 \u53ef\u4ee5\u76f4\u63a5\u5199\u51fa\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 for ( int msk = 0 ; msk < ( 1 << n ); ++ msk ) dp [ msk ] = a [ msk ]; for ( int i = 0 ; i < n ; ++ i ) { for ( int msk = 0 ; msk < ( 1 << n ); ++ msk ) { if ( msk & ( 1 << i )) dp [ msk ] += dp [ msk ^ ( 1 << i )]; } } \u8fd9\u4e2a\u505a\u6cd5\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u5206\u5f00\u5bf9\u6bcf\u4e00\u7ef4\u5206\u522b\u505a\u524d\u7f00\u548c\u7136\u540e\u518d\u5408\u8d77\u6765\u3002 \u6bd4\u5982\u4e8c\u7ef4\u524d\u7f00\u548c\u5c31\u662f\u5148\u5bf9\u4e8e \\(\\forall i, s(i,j) \\gets s(i, j - 1) + a(j)\\) \uff0c\u7136\u540e \\(\\forall i, s(i,j) \\gets s(i - 1, j) + s(i, j)\\)","title":"\u9ad8\u7ef4\u524d\u7f00\u548c"},{"location":"algor/dp/sos-dp/#_1","text":"SOSDP \u4e3b\u8981\u7528\u4e8e\u89e3\u51b3\u8fd9\u6837\u7684\u4e00\u7c7b\u95ee\u9898\uff1a \u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(a_0,a_1,a_2,\\dots,a_{2^n - 1}\\) \u3002 \u8981\u4f60\u6c42 \\(b_i = \\sum\\limits_{j \\ \\texttt{and}\\ i = j} a_j\\) \u3002 \uff08\u6b64\u5904\u7684 \\(\\sum\\) \u4e5f\u53ef\u4ee5\u6362\u6210 \\(\\min,\\max,\\bigoplus\\) \uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u6ee1\u8db3\u7ed3\u5408\u5f8b\u548c\u4ea4\u6362\u5f8b\uff1f\uff09 \u53ef\u80fd\u6709\u70b9\u770b\u4e0d\u61c2\uff0c\u7a0d\u5fae\u89e3\u91ca\u4e00\u4e0b\uff0c\u6b64\u5904\u628a \\(a\\) \u548c \\(b\\) \u7684\u4e0b\u6807\u90fd\u770b\u4f5c\u4e86\u4e00\u4e2a\u4e2a\u4e8c\u8fdb\u5236\u6570\uff08\u4e0b\u6807\u4ece 0 \u5f00\u59cb\uff09\uff0c \u4e5f\u5c31\u662f\u8bf4\uff0c \\(a\\) \u548c \\(b\\) \u7684\u4e0b\u6807\u8868\u793a\u7684\u662f\u4e00\u4e2a\u5927\u5c0f\u4e3a \\(n\\) \u7684\u96c6\u5408\u3002 \u90a3\u4e48\u4e0a\u9762\u7684\u5f0f\u5b50\u4e5f\u53ef\u4ee5\u5199\u6210 \\(\\sum\\limits_{j \\subset i} a_j\\) \u3002 \u8fd9\u4e2a\u5f0f\u5b50\u5728\u5e72\u5565\u5462\uff1f \u6211\u4eec\u8bbe \\(a_i\\) \u4e3a\u4e8c\u8fdb\u5236\u4e0b\u8868\u793a\u4e3a \\(i\\) \u7684\u96c6\u5408 \uff08\u672c\u6587\u4e2d\u8bb0\u4f5c \\(S(i)\\) \uff09 \u7684\u6743\u503c\u3002 \\(b_i\\) \u5c31\u8868\u793a\u7684\u662f \\(S(i)\\) \u7684\u6240\u6709\u5b50\u96c6\u7684\u6743\u503c\u548c\uff0c\u6240\u4ee5\u8fd9\u4e2a\u95ee\u9898\u4e5f\u53eb \u5b50\u96c6\u6c42\u548c \u3002 \u800c\u6362\u4e00\u4e2a\u89d2\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u4e0b\u6807\u770b\u6210 \\(n\\) \u7ef4\u7a7a\u95f4\u91cc\u7684\u4e00\u4e2a\u5750\u6807 \\((x_0, x_1, x_2, \\dots, x_{n - 1}), x_i \\in \\{0, 1\\}\\) \u3002 \u90a3\u4e48\u8fd9\u4e2a \\(b_i\\) \u5176\u5b9e\u5c31\u662f\u4e00\u4e2a \u9ad8\u7ef4\u524d\u7f00\u548c \u3002","title":"\u6cdb\u5316"},{"location":"algor/dp/sos-dp/#_2","text":"\u9996\u5148\u8003\u8651\u4e00\u4e2a\u66b4\u529b\uff0c\u6211\u4eec\u76f4\u63a5\u679a\u4e3e\u6240\u6709\u5b50\u96c6\u7136\u540e\u8ba1\u7b97\u6743\u503c\u548c\u3002 \u7136\u540e\u8fd9\u73a9\u610f\u513f\u662f \\(\\text{O}(3^{n})\\) \u7684\u3002 \u6211\u4eec\u628a\u8fd9\u4e2a\u5f0f\u5b50\u518d\u62ff\u51fa\u6765\u770b\u770b\uff1a \\[b_i = \\sum\\limits_{j \\ \\texttt{and}\\ i = j} a_j\\] \u65e2\u7136\u521a\u624d\u90fd\u8bf4\u4e86\u4e8c\u8fdb\u5236\u4e0b\u8003\u8651\uff0c\u90a3\u6211\u4eec\u5c31\u76f4\u63a5\u4e8c\u8fdb\u5236\u62c6\u5f00\uff1a \\(b_i\\) \u53ef\u4ee5\u5199\u4f5c \\(b_{(x_0, x_1, \\dots x_{n - 1})}\\) \uff0c\u7136\u540e\u6709\uff1a \\[b_{(x_0, x_1, \\dots x_{n - 1})} = \\sum\\limits_{y_0 \\le x_0}\\sum\\limits_{y_1 \\le x_1}\\dots \\sum\\limits_{y_{n - 1} \\le x_{n - 1}} a_{(y_0, y_1, \\dots y_{n - 1})}\\] \u8fd9\u662f\u9ad8\u7ef4\u524d\u7f00\u548c\u7684\u76f4\u63a5\u8868\u793a\u6cd5\u3002 \u8003\u8651\u4e00\u4e2a DP\uff0c\u8bbe \\(dp(msk, i)\\) \u8868\u793a\u8003\u8651\u6c42 \\(msk\\) \u8fd9\u4e2a\u96c6\u5408\u7684\u5b50\u96c6\u548c\uff0c\u5f53\u524d\u5df2\u7ecf\u505a\u5230\u4e86\u7b2c \\(i\\) \u4f4d\uff0c\u76ee\u524d\u7684\u548c\u662f\u591a\u5c11\u3002 \u6211\u4eec\u628a \\(msk\\) \u770b\u4f5c \\((x_0, x_1, \\dots x_{n - 1})\\) \u3002 \u7528\u76f4\u63a5\u8868\u793a\u7684\u65b9\u6cd5\u5199\u51fa \\(dp(msk, i)\\) \u3002 \\[dp(msk, i) = \\sum\\limits_{y_0 \\le x_0}\\sum\\limits_{y_1 \\le x_1} \\dots \\sum\\limits_{y_{i - 1} \\le x_{i - 1}} a_(y_0, y_1 \\dots y_{i - 1}, x_i, x_{i + 1}, \\dots x_{n - 1})\\] \u8003\u8651\u600e\u4e48\u8f6c\u79fb\uff0c \u5c31\u662f\u8003\u8651 \\(x_i\\) \u662f \\(0\\) \u8fd8\u662f \\(1\\) \uff0c\u5982\u679c\u662f \\(0\\) \uff0c\u90a3\u4e48\u8fd9\u4e00\u7ef4\u5c31\u76f4\u63a5\u7ee7\u627f\u4e0a\u4e00\u4f4d\u7684\u5373\u53ef \uff08\u56e0\u4e3a\u5f0f\u5b50\u662f\u957f\u6210 \\(\\sum\\limits_{y_i \\le x_i}\\) \u8fd9\u6837\u7684\uff0c\u5982\u679c \\(x_i\\) \u662f \\(0\\) \u5c31\u76f4\u63a5\u52a0\u4e0a\u524d\u4e00\u4f4d\u7684\u72b6\u6001\uff09\u3002 \u5982\u679c\u662f \\(1\\) \uff0c\u76f8\u5f53\u4e8e\u5bf9\u7740\u4e0a\u4e00\u4f4d\u7684\u4e24\u79cd\u60c5\u51b5\u90fd\u6c42\u4e86\u548c\uff0c\u6240\u4ee5\u7528\u4e0a\u4e00\u4f4d\u662f \\(0/1\\) \u7684\u4e24\u79cd\u60c5\u51b5\u52a0\u8d77\u6765\u5373\u53ef\uff1a \u5f97\u5230\u65b9\u7a0b\uff1a \\[dp(\\{x_0,x_1,\\dots,x_{n - 1}\\},i) = \\begin{cases} dp(\\{x_0,x_1,\\dots x_{i - 1}, 0, x_{i + 1}, \\dots x_{n - 1}\\}, i - 1) & x_i = 0 \\\\ \\sum\\limits_{bit \\in \\{0, 1\\}}dp(\\{x_0, x_1, \\dots, x_{i - 1}, bit, x_{i + 1}, \\dots x_{n - 1}\\}, i - 1) & x_i = 1 \\end{cases}\\] \u521d\u59cb\u5316 \\(dp(msk, 0) = a_{msk}\\) \u3002 \u53d1\u73b0\u8fd9\u91cc \\(dp(?,i)\\) \u7684\u72b6\u6001\u53ea\u548c \\(dp(?, i- 1)\\) \u6709\u5173\uff0c\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u6eda\u52a8\u6570\u7ec4\u3002 \u7136\u540e\u53d1\u73b0\u6211\u4eec\u76f4\u63a5\u4ece \\(0 \\sim 2^n - 1\\) \u679a\u4e3e \\(msk\\) \u7684\u8bdd\uff0c\u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u53bb\u6389\u6700\u540e\u4e00\u7ef4\uff0c\u56e0\u4e3a\u65b9\u7a0b\u672c\u8eab\u7684\u7279\u6b8a\u6027\uff0c\u8fd9\u6837\u4ecd\u7136\u662f\u65e0\u540e\u6548\u6027\u7684\u3002 \u53ef\u4ee5\u81ea\u5df1\u753b\u56fe\u624b\u63a8\uff0c\u539f\u56e0\u7c7b\u4f3c 01 \u80cc\u5305\u3002 \u53ef\u4ee5\u76f4\u63a5\u5199\u51fa\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 for ( int msk = 0 ; msk < ( 1 << n ); ++ msk ) dp [ msk ] = a [ msk ]; for ( int i = 0 ; i < n ; ++ i ) { for ( int msk = 0 ; msk < ( 1 << n ); ++ msk ) { if ( msk & ( 1 << i )) dp [ msk ] += dp [ msk ^ ( 1 << i )]; } } \u8fd9\u4e2a\u505a\u6cd5\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u5206\u5f00\u5bf9\u6bcf\u4e00\u7ef4\u5206\u522b\u505a\u524d\u7f00\u548c\u7136\u540e\u518d\u5408\u8d77\u6765\u3002 \u6bd4\u5982\u4e8c\u7ef4\u524d\u7f00\u548c\u5c31\u662f\u5148\u5bf9\u4e8e \\(\\forall i, s(i,j) \\gets s(i, j - 1) + a(j)\\) \uff0c\u7136\u540e \\(\\forall i, s(i,j) \\gets s(i - 1, j) + s(i, j)\\)","title":"\u505a\u6cd5"},{"location":"algor/dp/states-compressing-dp/","text":"\u6cdb\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 \u601d\u60f3\u5c31\u662f\u628a \u4e00\u4e2a\u8868\u793a\u201c\u5b58\u5728\u201d\u7684 \u201c\u96c6\u5408\u201d \u8f6c\u6362\u6210\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570 \u3002 \u7136\u540e\u8fdb\u884c\u5bf9\u5e94\u7684\u8f6c\u79fb\u3002 \u5177\u4f53\u7ec6\u8282 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6bd4\u5982\u8bbe \\(f_{msk}\\) \u8868\u793a\u83b7\u5f97\u72b6\u6001\u4e3a \\(msk\\) \u7684\u7269\u54c1\u6240\u9700\u7684\u4ee3\u4ef7\u3002 \u5176\u4e2d\u5982\u679c \\(msk\\) \u7684\u7b2c \\(i\\) \u4f4d\u662f \\(1\\) \uff0c\u90a3\u4e48\u8868\u793a\u7b2c \\(i\\) \u4e2a\u7269\u54c1\u5df2\u7ecf\u88ab\u53d6\u5f97\u3002 \u901a\u5e38\u9700\u8981\u5bf9 \\(msk\\) \u8fdb\u884c\u4e00\u4e9b\u4f4d\u8fd0\u7b97\u7684\u64cd\u4f5c\uff1a \u68c0\u67e5 \\(msk\\) \u7684\u7b2c \\(i\\) \u4f4d\u662f\u4e0d\u662f \\(1\\) \uff1a (msk>>(i-1)&1)==1 \u5219\u4e3a \\(1\\) \u3002 (msk&(1<<(i-1)))!=0 \u5219\u4e3a \\(1\\) \u3002 \u5c06 \\(msk\\) \u7684\u7b2c \\(i\\) \u4f4d\u8bbe\u7f6e\u4e3a \\(1\\) \uff1a msk|=(1<<(i-1)) \u5c06 \\(msk\\) \u7684\u7b2c \\(i\\) \u4f4d\u8bbe\u7f6e\u4e3a \\(0\\) \uff1a msk&=(~(1<<(i-1))) \u5c06 \\(msk\\) \u7684\u7b2c \\(i\\) \u4f4d\u53d6\u53cd\uff1a msk^=(1<<(i-1)) \u3002 \u5176\u5b83\u7684\u53ef\u4ee5\u770b\u4f4d\u8fd0\u7b97\u7684\u90e8\u5206\u3002\u6bd4\u5982 lowbit \u548c popcnt \u4e4b\u7c7b\u7684\u3002 \u679a\u4e3e\u72b6\u6001\u4e00\u822c\u8fd9\u4e48\u5199\uff1a 1 for ( register int msk = 0 ; msk < ( 1 << n ); ++ msk ) // n \u662f\u4f4d\u6570\u3002 \u4e00\u79cd\u5e38\u89c1\u7684\u7684\u4f18\u5316\u590d\u6742\u5ea6\u7684\u65b9\u5f0f\u5c31\u662f\u628a\u5408\u6cd5\u7684\u72b6\u6001\uff08\u51b3\u7b56\uff09\u5168\u90e8\u5904\u7406\u51fa\u6765\u5b58\u5230\u4e00\u4e2a\u8f85\u52a9\u6570\u7ec4\u91cc\u9762\u3002 \u5faa\u73af\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u8fd9\u6837\uff1a 1 for ( register int i = 1 ; i <= cnt ; ++ i ) // cnt \u662f\u5408\u6cd5\u72b6\u6001\u4e2a\u6570\u3002 \u666e\u901a\u72b6\u538b\u4e00\u822c\u5206\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u57fa\u4e8e\u8054\u901a\u6027\u7684\u72b6\u538bDP\uff08\u68cb\u76d8\u7c7b\uff09\uff0c\u4e00\u79cd\u662f\u96c6\u5408\u7c7b\u7684\u72b6\u538bDP\u3002 \u524d\u4e00\u79cd\u7684\u5178\u578b\u5c31\u662f\u201c[POJ2411]\u83ab\u5fb7\u91cc\u5b89\u7684\u68a6\u60f3\u201c\uff0c\u201c[SCOI2005]\u4e92\u4e0d\u4fb5\u72af\u201d\u548c\u201c[NOI2001]\u70ae\u5175\u9635\u5730\u201d\u3002 \u8fd9\u7c7b\u95ee\u9898\u4e00\u822c\u90fd\u9700\u8981\u5904\u7406\u6bcf\u4e00\u884c\u7684\u5408\u6cd5\u72b6\u6001\uff0c\u7136\u540e\u8fdb\u884c\u8f6c\u79fb\uff0c\u8f6c\u79fb\u7684\u9636\u6bb5 \u4e00\u822c \u90fd\u662f \u201c\u884c\u201d\u3002 \u540e\u4e00\u79cd\u7684\u5178\u578b\u5c31\u662f\u201c[NOIP2016]\u6124\u6012\u7684\u5c0f\u9e1f\u201d\uff0c\u201c[NOIP2017]\u5b9d\u85cf\u201d \u8fd9\u7c7b\u95ee\u9898\u4e00\u822c\u9700\u8981\u8bb0\u5f55\u5f53\u524d\u72b6\u6001\u5df2\u7ecf\u5904\u7406\u4e86\u54ea\u4e9b\u4e8b\u4ef6\uff0c\u8f6c\u79fb\u7684\u65f6\u5019 \u4e00\u822c \u4ee5\u72b6\u6001 \\(msk\\) \u4f5c\u4e3a\u9636\u6bb5\u3002 \u8fd9\u4e24\u79cd\u7684\u5171\u540c\u70b9\u5c31\u662f\uff0c \u67d0\u4e2a\u53d8\u91cf\u7684\u6570\u636e\u8303\u56f4\u4e00\u822c\u4f1a\u5f88\u5c0f \u3002 \u4f8b\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 P1879 [USACO06NOV]Corn Fields G \u03c8(\uff40\u2207\u00b4)\u03c8 \u68cb\u76d8\u7c7b\uff0c\u6700\u597d\u5199\u4e5f\u662f\u6700\u7ecf\u5178\u7684\u72b6\u538b\u9898\u4e4b\u4e00\u3002 \u9898\u610f\uff1a\u8981\u6c42\u4f60\u5728 \\(n \\times m\\) \u7684\u77e9\u9635\u4e0a\u653e\u4e00\u4e9b\u7269\u54c1\uff0c\u6709\u4e9b\u4f4d\u7f6e\u4e0d\u80fd\u653e\uff0c\u4f60\u4e0d\u80fd\u8ba9\u4e24\u4e2a\u7269\u54c1\u6328\u7740\uff0c\u6c42\u65b9\u6848\u6570\u5e76\u53d6\u6a21\u3002 \\(n,m \\le 13\\) \u9996\u5148\u53d1\u73b0\u8fd9\u4e00\u9898\u7684 \\(n,m\\) \u90fd\u662f \\(\\le 13\\) \u7684\u3002 \u6240\u4ee5\u6211\u4eec\u8003\u8651\u72b6\u538b\u3002 \u5148\u8003\u8651\u6ca1\u6709\u4e0d\u80fd\u653e\u7684\u9650\u5236\uff0c\u6211\u4eec\u7528\u4e8c\u8fdb\u5236 \u9884\u5904\u7406 \u51fa\u4e00\u884c\u91cc\u6240\u6709\u7684 \u53ef\u884c \u72b6\u6001 \\(sta\\) \u3002 \u8fd9\u6837\u5b50\u53ef\u4ee5\u5c11\u679a\u4e3e\u4e00\u5c42\uff0c\u4e0d\u7136\u4f1a\u7206\u70b8\u3002 \u5982\u679c\u8bf4\u6211\u4eec\u5904\u7406\u51fa\u6765\u7684\u60c5\u51b5\u662f\u6211\u4eec\u5904\u7406\u5230\u7684\u90a3\u4e00\u884c\u7684\u539f\u6765\u7684\u72b6\u6001\u7684\u5b50\u96c6\uff0c\u90a3\u4e48\u8fd9\u4e2a\u72b6\u6001\u5c31\u662f\u53ef\u884c\u7684\u3002 \u610f\u601d\u5c31\u662f\u8bf4\uff0c\u6bd4\u5982\u4f60\u662f\u8fd9\u6837\u5b50\u7684\uff1a 1 2 \u539f\u6765\u7684\u72b6\u6001\uff1a 1 0 1 1 0 0 1 0 0 1 1 1 \u5904\u7406\u7684\u72b6\u6001\uff1a 1 0 1 0 0 0 1 0 0 1 0 1 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5904\u7406\u7684\u72b6\u6001\u5f53\u4e2d\u653e\u4e86\u8349\u7684\u4f4d\u7f6e\u5728\u539f\u6765\u7684\u5730\u65b9\u90fd\u662f\u53ef\u4ee5\u79cd\u8349\u7684\u3002\u90a3\u4e48\u5c31\u662f\u53ef\u884c\u7684\u3002 \u7136\u540e\u6211\u4eec\u8bbe \\(f_{i,j}\\) \u8868\u793a\u8003\u8651\u7b2c \\(i\\) \u884c\uff0c\u4f60\u8003\u8651\u5904\u7406\u51fa\u6765\u7684\u7b2c \\(j\\) \u4e2a\u72b6\u6001\u7684\u65b9\u6848\u6570\u3002 \u5982\u679c\u8bf4\u8fd9\u7b2c \\(j\\) \u4e2a\u72b6\u6001\u662f\u53ef\u884c\u7684\uff0c\u90a3\u4e48\u8fd9\u91cc\u5c31\u4f1a\u6709\u65b9\u6848\u3002 \u53cd\u4e4b\u5982\u679c\u4e0d\u53ef\u884c\uff0c\u90a3\u4e48\u5c31\u4e0d\u4f1a\u8f6c\u79fb\u5230\u5b83\uff0c\u65b9\u6848\u6570\u662f \\(0\\) \u3002 \u8003\u8651\u679a\u4e3e\u4e0a\u4e00\u884c\u7684\u6240\u6709\u53ef\u884c\u72b6\u6001 \\(k\\) \uff0c\u7136\u540e\u65b9\u7a0b\u5c31\u662f \\(f_{i,j}=f_{i,j}+f_{i-1,k} , \\text{if} \\ sta(j)\\& sta (k) =0\\) \u3002 \\(\\ sta(j)\\& sta (k) =0\\) \u662f\u56e0\u4e3a\u4f60\u9700\u8981\u5224\u65ad\u4e0a\u4e0b\u6709\u6ca1\u6709\u76f8\u90bb\u7684\u3002 \u5904\u7406\u53ef\u884c\u72b6\u6001 \\(sta\\) \u7684\u8bdd\u53ea\u9700\u8981\u679a\u4e3e\u6240\u6709\u7684 \\(2^n\\) \u4e2a\u72b6\u6001\uff0c\u770b\u4ed6\u6709\u6ca1\u6709\u4e24\u4f4d\u662f\u76f8\u90bb\u7684\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 #include <bits/stdc++.h> using namespace std ; const int si = 14 ; const int stasi = 4096 + 10 ; // \u53ef\u884c\u72b6\u6001\u4e00\u5b9a\u5728 2n \u8303\u56f4\u4ee5\u5185. const int bitsi = 4096 + 10 ; const int p = 100000000 ; inline int mod ( int x , int p ){ return x < 0 ? ( x + p ) - ((( x + p ) / p ) * p ) : x - (( x / p ) * p );} int n , m , cnt = 0 ; int f [ si ][ stasi ]; int sta [ stasi ], yard [ si ]; inline void init ( int n ){ for ( register int i = 0 ; i <= n ; ++ i ){ // \u4e0d\u8981\u5fd8\u4e86\u90fd\u4e0d\u653e (0) \u4e5f\u662f\u53ef\u884c\u7684 if (( i & ( i << 1 )) != 0 || ( i & ( i >> 1 )) != 0 ) continue ; // \u8bb0\u5f97\u6253\u62ec\u53f7 sta [ ++ cnt ] = i ; // \u5408\u6cd5\u72b6\u6001 // printf(\"%d\\n\",sta[cnt]); } } inline bool valid ( int l , int s ){ if ( ! (( yard [ l ] & sta [ s ]) == sta [ s ])) return false ; // \u72b6\u6001\u7b26\u5408\u7b2c l \u884c\u7684\u60c5\u51b5 return true ; } int main (){ memset ( f , 0 , sizeof f ), scanf ( \"%d%d\" , & n , & m ); for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 , k ; j <= m ; ++ j ){ scanf ( \"%1d\" , & k ); if ( k ) yard [ i ] += ( 1 << ( m - j )); // \u628a\u6bcf\u4e00\u884c\u7684\u72b6\u6001\u8f6c\u6210\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570 } // printf(\"%d\\n\",yard[i]); } init (( 1 << m ) -1 ); // \u53bb\u6389\u6700\u540e\u7684\u7684\u4e00\u4e2a\uff0c\u4e0d\u7136\u4f1a\u591a\u4e00\u4e2a\u72b6\u6001\u3002 for ( register int i = 1 ; i <= cnt ; ++ i ){ if ( valid ( 1 , i )) f [ 1 ][ i ] = mod ( 1 , p ); // \u4e0d\u8981\u5fd8\u8bb0\u8fd9\u91cc\u4e5f\u8981\u5224\u5408\u6cd5 } for ( register int i = 2 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= cnt ; ++ j ){ // \u679a\u4e3e\u5f53\u524d\u5c42\u72b6\u6001 if ( ! valid ( i , j )) continue ; // \u72b6\u6001\u662f\u5426\u7b26\u5408\u5f53\u524d\u884c\u7684\u60c5\u51b5 for ( register int k = 1 ; k <= cnt ; ++ k ){ // \u679a\u4e3e\u4e0a\u4e00\u5c42\u72b6\u6001 if (( sta [ j ] & sta [ k ]) != 0 ) continue ; // \u4e0a\u4e0b\u4e0d\u5408\u6cd5 f [ i ][ j ] = mod ( f [ i ][ j ] + f [ i -1 ][ k ], p ); } } } int res = 0 ; for ( register int i = 1 ; i <= cnt ; ++ i ){ res = mod ( res + f [ n ][ i ], p ); } return printf ( \"%d \\n \" , mod ( res , p )), 0 ; } POJ2411 Mondriaan's Dream \u03c8(\uff40\u2207\u00b4)\u03c8 \u68cb\u76d8\u7c7b\u3002 \u7ed9\u4f60\u4e00\u4e2a \\(n\\times m\\) \u7684\u77e9\u9635\u3002 \u4f60\u53ef\u4ee5\u7528 \\(1\\times 2\\) \u7684\u957f\u65b9\u5f62\u53bb\u586b\u5145\u5b83\uff0c\u53ef\u4ee5\u7ad6\u7740\u4e5f\u53ef\u4ee5\u6a2a\u7740\u3002 \u95ee\u6070\u597d\u586b\u6ee1\u7684\u65b9\u6848\u6570\u3002 \\(1\\le n,m\\le 11\\) \u3002 \u4ed4\u7ec6\u601d\u8003\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u5f53\u524d\u53ea\u8003\u8651\u7b2c \\(i\\) \u884c\uff0c\u90a3\u4e48\u65e0\u975e\u5c31\u662f\u4e09\u79cd\u60c5\u51b5\uff1a \u7528 \\(1\\times 2\\) \u7684\uff08 == \uff09 \u586b\u5145 \u7528 \\(2\\times 1\\) \u7684\u4e0a\u4e00\u534a\u586b\u5145\u3002 \u7528 \\(2\\times 1\\) \u7684\u4e0b\u534a\u90e8\u5206\u586b\u5145\uff08\u5e76\u4e14\u4e0a\u4e00\u884c\u7684\u5bf9\u5e94\u4f4d\u7f6e\u662f \\(2\\times 1\\) \u7684\u4e0a\u4e00\u534a\uff09\u3002 \u6700\u9ebb\u70e6\u7684\u5c31\u662f\u7b2c\u4e8c\u79cd\u60c5\u51b5\u3002 \u6240\u4ee5\u8003\u8651\u72b6\u538b\uff0c\u8bbe \\(msk\\) \u8868\u793a\u67d0\u4e00\u884c\u7684\u72b6\u6001\uff0c\u7b2c \\(i\\) \u4f4d\u4e3a \\(1\\) \u5219\u8868\u793a\u5bf9\u5e94\u7684\u4f4d\u7f6e\u4e0a\u653e\u7684\u662f \\(2\\times 1\\) \u7684\u4e0a\u4e00\u534a\u3002 \u6240\u4ee5\uff0c\u4e0a\u4e00\u884c\u7684\u72b6\u6001 \\(msk_{i-1}\\) \u8981\u60f3\u8f6c\u79fb\u5230\u5f53\u524d\u884c \\(msk_i\\) \uff0c\u5fc5\u987b\u6ee1\u8db3 \\(msk_{i-1} \\operatorname{and} msk_i =0\\) \u3002 \u4f46\u662f\u4e5f\u9700\u8981\u8003\u8651\u7b2c\u4e00\u79cd\u60c5\u51b5\u653e\u4e0d\u653e\u7684\u4e86\u3002\u90a3\u4e48\u5148\u628a\u4e0a\u4e00\u884c\u7684\u72b6\u6001 \\(\\operatorname{or}\\) \u8fc7\u6765\uff0c\u90a3\u4e48\u4e0b\u534a\u90e8\u5206\u7684\u4f4d\u7f6e\u5c31\u786e\u5b9a\u4e86\u3002 \u56e0\u4e3a\u662f \\(1\\times 2\\) \u7684\uff0c\u6240\u4ee5\u4e0a\u4e0b\u4e24\u4e2a\u72b6\u6001\u8fdb\u884c\u6309\u4f4d\u6216\u4e4b\u540e\uff0c\u9700\u8981\u6ee1\u8db3\uff1a\u4efb\u610f \\(0\\) \u7684\u8fde\u901a\u5757\u91cc\uff0c \\(0\\) \u7684\u4e2a\u6570\u662f\u5076\u6570\u4e2a\u3002 \u90a3\u4e48\u5148\u9884\u5904\u7406\u6240\u6709\u884c\u5185\u5408\u6cd5\u7684\u72b6\u6001\u3002 \u7136\u540e\u679a\u4e3e\u884c\uff0c\u518d\u679a\u4e3e\u4e0a\u4e00\u884c\u7684\u72b6\u6001\u548c\u5f53\u524d\u884c\u7684\u72b6\u6001\u8fdb\u884c\u8f6c\u79fb\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int si = 20 ; constexpr int stasi = 1 << 12 ; int n , m ; int f [ si ][ stasi ]; bool vis [ stasi ]; signed main (){ while ( scanf ( \"%lld%lld\" , & n , & m ) != EOF && n && m ){ for ( register int msk = 0 ; msk < ( 1 << m ); ++ msk ){ bool ff = false , cnt = false ; for ( register int i = 1 ; i <= m ; ++ i ){ if ( msk >> ( i -1 ) & 1 ) ff |= cnt , cnt = false ; else cnt ^= 1 ; } vis [ msk ] = ff | cnt ? 0 : 1 ; } memset ( f , 0 , sizeof f ), f [ 0 ][ 0 ] = 1 ; for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 0 ; j < ( 1 << m ); ++ j ){ for ( register int k = 0 ; k < ( 1 << m ); ++ k ){ if (( j & k ) != 0 || ! vis [ j | k ]) continue ; f [ i ][ j ] += f [ i -1 ][ k ]; } } } printf ( \"%lld \\n \" , f [ n ][ 0 ]); } return 0 ; }","title":"\u72b6\u538b DP"},{"location":"algor/dp/states-compressing-dp/#_1","text":"\u601d\u60f3\u5c31\u662f\u628a \u4e00\u4e2a\u8868\u793a\u201c\u5b58\u5728\u201d\u7684 \u201c\u96c6\u5408\u201d \u8f6c\u6362\u6210\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570 \u3002 \u7136\u540e\u8fdb\u884c\u5bf9\u5e94\u7684\u8f6c\u79fb\u3002","title":"\u6cdb\u5316"},{"location":"algor/dp/states-compressing-dp/#_2","text":"\u6bd4\u5982\u8bbe \\(f_{msk}\\) \u8868\u793a\u83b7\u5f97\u72b6\u6001\u4e3a \\(msk\\) \u7684\u7269\u54c1\u6240\u9700\u7684\u4ee3\u4ef7\u3002 \u5176\u4e2d\u5982\u679c \\(msk\\) \u7684\u7b2c \\(i\\) \u4f4d\u662f \\(1\\) \uff0c\u90a3\u4e48\u8868\u793a\u7b2c \\(i\\) \u4e2a\u7269\u54c1\u5df2\u7ecf\u88ab\u53d6\u5f97\u3002 \u901a\u5e38\u9700\u8981\u5bf9 \\(msk\\) \u8fdb\u884c\u4e00\u4e9b\u4f4d\u8fd0\u7b97\u7684\u64cd\u4f5c\uff1a \u68c0\u67e5 \\(msk\\) \u7684\u7b2c \\(i\\) \u4f4d\u662f\u4e0d\u662f \\(1\\) \uff1a (msk>>(i-1)&1)==1 \u5219\u4e3a \\(1\\) \u3002 (msk&(1<<(i-1)))!=0 \u5219\u4e3a \\(1\\) \u3002 \u5c06 \\(msk\\) \u7684\u7b2c \\(i\\) \u4f4d\u8bbe\u7f6e\u4e3a \\(1\\) \uff1a msk|=(1<<(i-1)) \u5c06 \\(msk\\) \u7684\u7b2c \\(i\\) \u4f4d\u8bbe\u7f6e\u4e3a \\(0\\) \uff1a msk&=(~(1<<(i-1))) \u5c06 \\(msk\\) \u7684\u7b2c \\(i\\) \u4f4d\u53d6\u53cd\uff1a msk^=(1<<(i-1)) \u3002 \u5176\u5b83\u7684\u53ef\u4ee5\u770b\u4f4d\u8fd0\u7b97\u7684\u90e8\u5206\u3002\u6bd4\u5982 lowbit \u548c popcnt \u4e4b\u7c7b\u7684\u3002 \u679a\u4e3e\u72b6\u6001\u4e00\u822c\u8fd9\u4e48\u5199\uff1a 1 for ( register int msk = 0 ; msk < ( 1 << n ); ++ msk ) // n \u662f\u4f4d\u6570\u3002 \u4e00\u79cd\u5e38\u89c1\u7684\u7684\u4f18\u5316\u590d\u6742\u5ea6\u7684\u65b9\u5f0f\u5c31\u662f\u628a\u5408\u6cd5\u7684\u72b6\u6001\uff08\u51b3\u7b56\uff09\u5168\u90e8\u5904\u7406\u51fa\u6765\u5b58\u5230\u4e00\u4e2a\u8f85\u52a9\u6570\u7ec4\u91cc\u9762\u3002 \u5faa\u73af\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u8fd9\u6837\uff1a 1 for ( register int i = 1 ; i <= cnt ; ++ i ) // cnt \u662f\u5408\u6cd5\u72b6\u6001\u4e2a\u6570\u3002 \u666e\u901a\u72b6\u538b\u4e00\u822c\u5206\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u57fa\u4e8e\u8054\u901a\u6027\u7684\u72b6\u538bDP\uff08\u68cb\u76d8\u7c7b\uff09\uff0c\u4e00\u79cd\u662f\u96c6\u5408\u7c7b\u7684\u72b6\u538bDP\u3002 \u524d\u4e00\u79cd\u7684\u5178\u578b\u5c31\u662f\u201c[POJ2411]\u83ab\u5fb7\u91cc\u5b89\u7684\u68a6\u60f3\u201c\uff0c\u201c[SCOI2005]\u4e92\u4e0d\u4fb5\u72af\u201d\u548c\u201c[NOI2001]\u70ae\u5175\u9635\u5730\u201d\u3002 \u8fd9\u7c7b\u95ee\u9898\u4e00\u822c\u90fd\u9700\u8981\u5904\u7406\u6bcf\u4e00\u884c\u7684\u5408\u6cd5\u72b6\u6001\uff0c\u7136\u540e\u8fdb\u884c\u8f6c\u79fb\uff0c\u8f6c\u79fb\u7684\u9636\u6bb5 \u4e00\u822c \u90fd\u662f \u201c\u884c\u201d\u3002 \u540e\u4e00\u79cd\u7684\u5178\u578b\u5c31\u662f\u201c[NOIP2016]\u6124\u6012\u7684\u5c0f\u9e1f\u201d\uff0c\u201c[NOIP2017]\u5b9d\u85cf\u201d \u8fd9\u7c7b\u95ee\u9898\u4e00\u822c\u9700\u8981\u8bb0\u5f55\u5f53\u524d\u72b6\u6001\u5df2\u7ecf\u5904\u7406\u4e86\u54ea\u4e9b\u4e8b\u4ef6\uff0c\u8f6c\u79fb\u7684\u65f6\u5019 \u4e00\u822c \u4ee5\u72b6\u6001 \\(msk\\) \u4f5c\u4e3a\u9636\u6bb5\u3002 \u8fd9\u4e24\u79cd\u7684\u5171\u540c\u70b9\u5c31\u662f\uff0c \u67d0\u4e2a\u53d8\u91cf\u7684\u6570\u636e\u8303\u56f4\u4e00\u822c\u4f1a\u5f88\u5c0f \u3002","title":"\u5177\u4f53\u7ec6\u8282"},{"location":"algor/dp/states-compressing-dp/#_3","text":"","title":"\u4f8b\u9898"},{"location":"algor/dp/states-compressing-dp/#p1879-usaco06novcorn-fields-g","text":"\u68cb\u76d8\u7c7b\uff0c\u6700\u597d\u5199\u4e5f\u662f\u6700\u7ecf\u5178\u7684\u72b6\u538b\u9898\u4e4b\u4e00\u3002 \u9898\u610f\uff1a\u8981\u6c42\u4f60\u5728 \\(n \\times m\\) \u7684\u77e9\u9635\u4e0a\u653e\u4e00\u4e9b\u7269\u54c1\uff0c\u6709\u4e9b\u4f4d\u7f6e\u4e0d\u80fd\u653e\uff0c\u4f60\u4e0d\u80fd\u8ba9\u4e24\u4e2a\u7269\u54c1\u6328\u7740\uff0c\u6c42\u65b9\u6848\u6570\u5e76\u53d6\u6a21\u3002 \\(n,m \\le 13\\) \u9996\u5148\u53d1\u73b0\u8fd9\u4e00\u9898\u7684 \\(n,m\\) \u90fd\u662f \\(\\le 13\\) \u7684\u3002 \u6240\u4ee5\u6211\u4eec\u8003\u8651\u72b6\u538b\u3002 \u5148\u8003\u8651\u6ca1\u6709\u4e0d\u80fd\u653e\u7684\u9650\u5236\uff0c\u6211\u4eec\u7528\u4e8c\u8fdb\u5236 \u9884\u5904\u7406 \u51fa\u4e00\u884c\u91cc\u6240\u6709\u7684 \u53ef\u884c \u72b6\u6001 \\(sta\\) \u3002 \u8fd9\u6837\u5b50\u53ef\u4ee5\u5c11\u679a\u4e3e\u4e00\u5c42\uff0c\u4e0d\u7136\u4f1a\u7206\u70b8\u3002 \u5982\u679c\u8bf4\u6211\u4eec\u5904\u7406\u51fa\u6765\u7684\u60c5\u51b5\u662f\u6211\u4eec\u5904\u7406\u5230\u7684\u90a3\u4e00\u884c\u7684\u539f\u6765\u7684\u72b6\u6001\u7684\u5b50\u96c6\uff0c\u90a3\u4e48\u8fd9\u4e2a\u72b6\u6001\u5c31\u662f\u53ef\u884c\u7684\u3002 \u610f\u601d\u5c31\u662f\u8bf4\uff0c\u6bd4\u5982\u4f60\u662f\u8fd9\u6837\u5b50\u7684\uff1a 1 2 \u539f\u6765\u7684\u72b6\u6001\uff1a 1 0 1 1 0 0 1 0 0 1 1 1 \u5904\u7406\u7684\u72b6\u6001\uff1a 1 0 1 0 0 0 1 0 0 1 0 1 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5904\u7406\u7684\u72b6\u6001\u5f53\u4e2d\u653e\u4e86\u8349\u7684\u4f4d\u7f6e\u5728\u539f\u6765\u7684\u5730\u65b9\u90fd\u662f\u53ef\u4ee5\u79cd\u8349\u7684\u3002\u90a3\u4e48\u5c31\u662f\u53ef\u884c\u7684\u3002 \u7136\u540e\u6211\u4eec\u8bbe \\(f_{i,j}\\) \u8868\u793a\u8003\u8651\u7b2c \\(i\\) \u884c\uff0c\u4f60\u8003\u8651\u5904\u7406\u51fa\u6765\u7684\u7b2c \\(j\\) \u4e2a\u72b6\u6001\u7684\u65b9\u6848\u6570\u3002 \u5982\u679c\u8bf4\u8fd9\u7b2c \\(j\\) \u4e2a\u72b6\u6001\u662f\u53ef\u884c\u7684\uff0c\u90a3\u4e48\u8fd9\u91cc\u5c31\u4f1a\u6709\u65b9\u6848\u3002 \u53cd\u4e4b\u5982\u679c\u4e0d\u53ef\u884c\uff0c\u90a3\u4e48\u5c31\u4e0d\u4f1a\u8f6c\u79fb\u5230\u5b83\uff0c\u65b9\u6848\u6570\u662f \\(0\\) \u3002 \u8003\u8651\u679a\u4e3e\u4e0a\u4e00\u884c\u7684\u6240\u6709\u53ef\u884c\u72b6\u6001 \\(k\\) \uff0c\u7136\u540e\u65b9\u7a0b\u5c31\u662f \\(f_{i,j}=f_{i,j}+f_{i-1,k} , \\text{if} \\ sta(j)\\& sta (k) =0\\) \u3002 \\(\\ sta(j)\\& sta (k) =0\\) \u662f\u56e0\u4e3a\u4f60\u9700\u8981\u5224\u65ad\u4e0a\u4e0b\u6709\u6ca1\u6709\u76f8\u90bb\u7684\u3002 \u5904\u7406\u53ef\u884c\u72b6\u6001 \\(sta\\) \u7684\u8bdd\u53ea\u9700\u8981\u679a\u4e3e\u6240\u6709\u7684 \\(2^n\\) \u4e2a\u72b6\u6001\uff0c\u770b\u4ed6\u6709\u6ca1\u6709\u4e24\u4f4d\u662f\u76f8\u90bb\u7684\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 #include <bits/stdc++.h> using namespace std ; const int si = 14 ; const int stasi = 4096 + 10 ; // \u53ef\u884c\u72b6\u6001\u4e00\u5b9a\u5728 2n \u8303\u56f4\u4ee5\u5185. const int bitsi = 4096 + 10 ; const int p = 100000000 ; inline int mod ( int x , int p ){ return x < 0 ? ( x + p ) - ((( x + p ) / p ) * p ) : x - (( x / p ) * p );} int n , m , cnt = 0 ; int f [ si ][ stasi ]; int sta [ stasi ], yard [ si ]; inline void init ( int n ){ for ( register int i = 0 ; i <= n ; ++ i ){ // \u4e0d\u8981\u5fd8\u4e86\u90fd\u4e0d\u653e (0) \u4e5f\u662f\u53ef\u884c\u7684 if (( i & ( i << 1 )) != 0 || ( i & ( i >> 1 )) != 0 ) continue ; // \u8bb0\u5f97\u6253\u62ec\u53f7 sta [ ++ cnt ] = i ; // \u5408\u6cd5\u72b6\u6001 // printf(\"%d\\n\",sta[cnt]); } } inline bool valid ( int l , int s ){ if ( ! (( yard [ l ] & sta [ s ]) == sta [ s ])) return false ; // \u72b6\u6001\u7b26\u5408\u7b2c l \u884c\u7684\u60c5\u51b5 return true ; } int main (){ memset ( f , 0 , sizeof f ), scanf ( \"%d%d\" , & n , & m ); for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 , k ; j <= m ; ++ j ){ scanf ( \"%1d\" , & k ); if ( k ) yard [ i ] += ( 1 << ( m - j )); // \u628a\u6bcf\u4e00\u884c\u7684\u72b6\u6001\u8f6c\u6210\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570 } // printf(\"%d\\n\",yard[i]); } init (( 1 << m ) -1 ); // \u53bb\u6389\u6700\u540e\u7684\u7684\u4e00\u4e2a\uff0c\u4e0d\u7136\u4f1a\u591a\u4e00\u4e2a\u72b6\u6001\u3002 for ( register int i = 1 ; i <= cnt ; ++ i ){ if ( valid ( 1 , i )) f [ 1 ][ i ] = mod ( 1 , p ); // \u4e0d\u8981\u5fd8\u8bb0\u8fd9\u91cc\u4e5f\u8981\u5224\u5408\u6cd5 } for ( register int i = 2 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= cnt ; ++ j ){ // \u679a\u4e3e\u5f53\u524d\u5c42\u72b6\u6001 if ( ! valid ( i , j )) continue ; // \u72b6\u6001\u662f\u5426\u7b26\u5408\u5f53\u524d\u884c\u7684\u60c5\u51b5 for ( register int k = 1 ; k <= cnt ; ++ k ){ // \u679a\u4e3e\u4e0a\u4e00\u5c42\u72b6\u6001 if (( sta [ j ] & sta [ k ]) != 0 ) continue ; // \u4e0a\u4e0b\u4e0d\u5408\u6cd5 f [ i ][ j ] = mod ( f [ i ][ j ] + f [ i -1 ][ k ], p ); } } } int res = 0 ; for ( register int i = 1 ; i <= cnt ; ++ i ){ res = mod ( res + f [ n ][ i ], p ); } return printf ( \"%d \\n \" , mod ( res , p )), 0 ; }","title":"P1879 [USACO06NOV]Corn Fields G"},{"location":"algor/dp/states-compressing-dp/#poj2411-mondriaans-dream","text":"\u68cb\u76d8\u7c7b\u3002 \u7ed9\u4f60\u4e00\u4e2a \\(n\\times m\\) \u7684\u77e9\u9635\u3002 \u4f60\u53ef\u4ee5\u7528 \\(1\\times 2\\) \u7684\u957f\u65b9\u5f62\u53bb\u586b\u5145\u5b83\uff0c\u53ef\u4ee5\u7ad6\u7740\u4e5f\u53ef\u4ee5\u6a2a\u7740\u3002 \u95ee\u6070\u597d\u586b\u6ee1\u7684\u65b9\u6848\u6570\u3002 \\(1\\le n,m\\le 11\\) \u3002 \u4ed4\u7ec6\u601d\u8003\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u5f53\u524d\u53ea\u8003\u8651\u7b2c \\(i\\) \u884c\uff0c\u90a3\u4e48\u65e0\u975e\u5c31\u662f\u4e09\u79cd\u60c5\u51b5\uff1a \u7528 \\(1\\times 2\\) \u7684\uff08 == \uff09 \u586b\u5145 \u7528 \\(2\\times 1\\) \u7684\u4e0a\u4e00\u534a\u586b\u5145\u3002 \u7528 \\(2\\times 1\\) \u7684\u4e0b\u534a\u90e8\u5206\u586b\u5145\uff08\u5e76\u4e14\u4e0a\u4e00\u884c\u7684\u5bf9\u5e94\u4f4d\u7f6e\u662f \\(2\\times 1\\) \u7684\u4e0a\u4e00\u534a\uff09\u3002 \u6700\u9ebb\u70e6\u7684\u5c31\u662f\u7b2c\u4e8c\u79cd\u60c5\u51b5\u3002 \u6240\u4ee5\u8003\u8651\u72b6\u538b\uff0c\u8bbe \\(msk\\) \u8868\u793a\u67d0\u4e00\u884c\u7684\u72b6\u6001\uff0c\u7b2c \\(i\\) \u4f4d\u4e3a \\(1\\) \u5219\u8868\u793a\u5bf9\u5e94\u7684\u4f4d\u7f6e\u4e0a\u653e\u7684\u662f \\(2\\times 1\\) \u7684\u4e0a\u4e00\u534a\u3002 \u6240\u4ee5\uff0c\u4e0a\u4e00\u884c\u7684\u72b6\u6001 \\(msk_{i-1}\\) \u8981\u60f3\u8f6c\u79fb\u5230\u5f53\u524d\u884c \\(msk_i\\) \uff0c\u5fc5\u987b\u6ee1\u8db3 \\(msk_{i-1} \\operatorname{and} msk_i =0\\) \u3002 \u4f46\u662f\u4e5f\u9700\u8981\u8003\u8651\u7b2c\u4e00\u79cd\u60c5\u51b5\u653e\u4e0d\u653e\u7684\u4e86\u3002\u90a3\u4e48\u5148\u628a\u4e0a\u4e00\u884c\u7684\u72b6\u6001 \\(\\operatorname{or}\\) \u8fc7\u6765\uff0c\u90a3\u4e48\u4e0b\u534a\u90e8\u5206\u7684\u4f4d\u7f6e\u5c31\u786e\u5b9a\u4e86\u3002 \u56e0\u4e3a\u662f \\(1\\times 2\\) \u7684\uff0c\u6240\u4ee5\u4e0a\u4e0b\u4e24\u4e2a\u72b6\u6001\u8fdb\u884c\u6309\u4f4d\u6216\u4e4b\u540e\uff0c\u9700\u8981\u6ee1\u8db3\uff1a\u4efb\u610f \\(0\\) \u7684\u8fde\u901a\u5757\u91cc\uff0c \\(0\\) \u7684\u4e2a\u6570\u662f\u5076\u6570\u4e2a\u3002 \u90a3\u4e48\u5148\u9884\u5904\u7406\u6240\u6709\u884c\u5185\u5408\u6cd5\u7684\u72b6\u6001\u3002 \u7136\u540e\u679a\u4e3e\u884c\uff0c\u518d\u679a\u4e3e\u4e0a\u4e00\u884c\u7684\u72b6\u6001\u548c\u5f53\u524d\u884c\u7684\u72b6\u6001\u8fdb\u884c\u8f6c\u79fb\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int si = 20 ; constexpr int stasi = 1 << 12 ; int n , m ; int f [ si ][ stasi ]; bool vis [ stasi ]; signed main (){ while ( scanf ( \"%lld%lld\" , & n , & m ) != EOF && n && m ){ for ( register int msk = 0 ; msk < ( 1 << m ); ++ msk ){ bool ff = false , cnt = false ; for ( register int i = 1 ; i <= m ; ++ i ){ if ( msk >> ( i -1 ) & 1 ) ff |= cnt , cnt = false ; else cnt ^= 1 ; } vis [ msk ] = ff | cnt ? 0 : 1 ; } memset ( f , 0 , sizeof f ), f [ 0 ][ 0 ] = 1 ; for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 0 ; j < ( 1 << m ); ++ j ){ for ( register int k = 0 ; k < ( 1 << m ); ++ k ){ if (( j & k ) != 0 || ! vis [ j | k ]) continue ; f [ i ][ j ] += f [ i -1 ][ k ]; } } } printf ( \"%lld \\n \" , f [ n ][ 0 ]); } return 0 ; }","title":"POJ2411 Mondriaan's Dream"},{"location":"algor/dp/tree-dp/","text":"\u666e\u901a\u6811\u5f62DP \u03c8(\uff40\u2207\u00b4)\u03c8 \u6811\u5f62DP\u7684\u56fa\u6709\u7279\u5f81\u5c31\u662f\u4f7f\u7528 dfs \u9012\u5f52\u5b9e\u73b0\u3002 \u4e00\u822c\u6765\u8bf4\u90fd\u662f dfs \u5230\u513f\u5b50\uff0c\u7136\u540e \u4e0a\u4f20\u4fe1\u606f \u66f4\u65b0\u7236\u4eb2\uff0c\u6700\u540e\u5f97\u51fa\u7b54\u6848\u3002 \u5e38\u89c1\u7684\u8f85\u52a9\u6570\u7ec4\u662f\uff1a siz[u] \uff1a\u8bb0\u5f55\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u7684\u5927\u5c0f dep[u] \uff1a\u8bb0\u5f55\u4ee5\u67d0\u4e2a\u8282\u70b9\uff08\u901a\u5e38\u662f \\(1\\) \uff09\u4e3a\u6839\u7684\u65f6\u5019 \\(u\\) \u7684\u6df1\u5ea6\u3002 dis[u] \uff1a \\(u\\) \u80fd\u5411\u4e0b\u8d70\u7684\u6700\u8fdc\u8ddd\u79bb / \u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u5f53\u4e2d\u6240\u6709\u8282\u70b9\u5230 \\(u\\) \u7684\u8ddd\u79bb\u548c\u3002 \uff08\u9664\u4e86\u6362\u6839DP\u4f1a\u5728\u7b2c\u4e8c\u6b21 dfs \u7684\u65f6\u5019\u7528\u7236\u4eb2\u66f4\u65b0\u513f\u5b50\uff09 \u4e00\u822c\u6765\u8bf4\uff0c\u72b6\u6001\u90fd\u662f\u8bbe\u8ba1\u6210\u8fd9\u79cd \uff1a \\(f_{u}\\) \u8868\u793a\u8282\u70b9 \\(u\\) blablabla\uff0c\u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811 blablabla\u2026\u2026 \u4f8b\u5b50 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6ca1\u6709\u4e0a\u53f8\u7684\u821e\u4f1a\uff1a\u7ed9\u4f60\u4e00\u68f5\u6811\uff0c\u5982\u679c\u9009\u4e86\u67d0\u4e00\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\u8282\u70b9\uff0c\u90a3\u4e48\u5c31\u4e0d\u80fd\u9009\u8fd9\u4e2a\u8282\u70b9\uff0c\u8282\u70b9\u6709\u70b9\u6743\uff0c\u95ee\u4f60\u53ef\u4ee5\u9009\u62e9\u7684\u70b9\u6743\u548c\u7684\u6700\u5927\u503c\u3002 \u8bbe \\(f[u][0/1]\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\uff0c \\(u\\) \u53c2\u52a0\u6216\u8005\u4e0d\u53c2\u52a0\u821e\u4f1a\u7684\u6240\u6709\u60c5\u51b5\uff0c\u5c5e\u6027\u4e3a\uff1a\u53d6\u5f97\u7684\u6700\u5927\u6743\u503c\u3002 \u8fd9\u6837\u5b50\u8bbe\u8ba1\u624d\u80fd\u591f\u8868\u793a\u51fa\u9898\u76ee\u4e2d \u6240\u6709\u7684\u9650\u5236\u5173\u7cfb \uff1a\u4ece\u5c5e\uff0c\u662f\u5426\u53c2\u52a0\u3002 \u6839\u636e\u72b6\u6001\u8bbe\u8ba1\uff0c\u5206 \\(f[u][0]\\) \u548c \\(f[u][1]\\) \u4e24\u79cd\u60c5\u51b5\u6765\u8ba8\u8bba\u3002 \u5982\u679c \\(u\\) \u4e0d\u53c2\u52a0\u821e\u4f1a\uff0c\u90a3\u4e48\u5b83\u7684\u513f\u5b50\u4eec\u90fd\u53ef\u4ee5\u53c2\u52a0\u821e\u4f1a\u3002 \u6ce8\u610f\u5230 \\(r_i\\) \u53ef\u80fd\u662f\u8d1f\u6570\uff0c\u6240\u4ee5\u8981\u5728\u513f\u5b50\u53c2\u52a0\u548c\u4e0d\u53c2\u52a0\u91cc\u9762\u53d6\u4e2a\u6700\u5927\u503c\u7136\u540e\u518d\u6c42\u548c\u3002 \\(f[u][0]=\\sum \\max(f[v][1],f[v][0])\\) \u7136\u540e\u5982\u679c \\(u\\) \u53c2\u52a0\u4e86\u821e\u4f1a\uff0c\u90a3\u4e48\u5b83\u7684\u513f\u5b50\u8282\u70b9\u5c31\u90fd\u4e0d\u4f1a\u53c2\u52a0\uff0c\u4f46\u662f\u5b83\u81ea\u5df1\u8981\u53c2\u52a0\u3002 \u6240\u4ee5 \\(f[u][1]=\\sum f[v][0]+r_u\\) \u7136\u540e\u6211\u4eecDP\u5b8c\u4e86\u4e4b\u540e\u5c31\u5728 \\(f[root][0]\\) \u548c \\(f[root][1]\\) \u4e4b\u95f4\u53d6\u4e2a\u6700\u5927\u503c\u5373\u53ef\u3002 \u4ece\u8fd9\u9053\u9898\u4e0d\u96be\u53d1\u73b0\uff0c\u6811\u5f62DP\u7684\u91cd\u70b9\u5c31\u5728\u4e8e\u5982\u4f55\u5229\u7528\u72b6\u6001\u8868\u793a\u8282\u70b9\u548c\u8282\u70b9\u4e4b\u95f4\u7684\u4ece\u5c5e\uff0c\u9650\u5236\u7b49\u5173\u7cfb\u3002 \u5e76\u4e14\u8bbe\u8ba1\u72b6\u6001\u7684\u65f6\u5019\u4e00\u822c\u90fd\u662f\u95ee\u4ec0\u4e48\u8bbe\u4ec0\u4e48\uff08\u548c\u7ebf\u6027DP\u5dee\u4e0d\u591a\uff09\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #include <bits/stdc++.h> using namespace std ; const int si = 6e3 + 10 ; struct Tree { int ver , head , Next ; } e [ si * 2 ]; int root = 0 , cnt = 0 ; void add ( int u , int v ){ e [ ++ cnt ]. ver = v , e [ cnt ]. Next = e [ u ]. head ; e [ u ]. head = cnt ; } int r [ si ]; int f [ si ][ 2 ]; bool nrt [ si ]; void dp ( int u , int fa ){ f [ u ][ 0 ] = 0 ; f [ u ][ 1 ] = r [ u ]; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( v == fa ) continue ; dp ( v , u ); f [ u ][ 0 ] += max ( f [ v ][ 1 ], f [ v ][ 0 ]); f [ u ][ 1 ] += f [ v ][ 0 ]; } } int n ; int main (){ scanf ( \"%d\" , & n ); for ( register int i = 1 ; i <= n ; ++ i ){ scanf ( \"%d\" , & r [ i ]); } for ( register int i = 1 ; i < n ; ++ i ){ int u , v ; scanf ( \"%d%d\" , & u , & v ); add ( u , v ), add ( v , u ); nrt [ v ] = true ; } for ( register int i = 1 ; i <= n ; ++ i ){ if ( ! nrt [ i ]){ root = i ; break ; } } dp ( root , 0 ); int res = max ( f [ root ][ 0 ], f [ root ][ 1 ]); printf ( \"%d \\n \" , res ); } \u6811\u4e0a\u80cc\u5305 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e2a\u89c1 \u80cc\u5305\u95ee\u9898 \u3002 \u6362\u6839DP \u03c8(\uff40\u2207\u00b4)\u03c8 \u6cdb\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u7c7b\u95ee\u9898\u7684\u663e\u8457\u7279\u70b9\u662f\u4e24\u6b21dfs\uff0c\u4e00\u6b21\u6536\u96c6\u4fe1\u606f\uff0c\u4e00\u6b21\u8fdb\u884c\u8f6c\u79fb\u3002 \u6709\u7684\u65f6\u5019\u66b4\u529b\u9700\u8981\u6bcf\u4e2a\u70b9\u8fdb\u884c\u4e00\u6b21 \\(\\text{O}(n)\\) \u7684 dfs\uff0c\u590d\u6742\u5ea6 \\(\\text{O}(n^2)\\) \u3002 \u6b64\u65f6\u4e00\u822c\u90fd\u53ef\u4ee5\u4f7f\u7528\u6362\u6839DP\u8fdb\u884c \\(\\text{O}(n)\\) \u7684\u8ba1\u7b97\u3002 \u89e3\u51b3\u65f6\u4e00\u822c\u5206\u4e09\u6b65\uff1a \u786e\u5b9a\u4e00\u4e2a\u6839\u8282\u70b9 \\(rt\\) \u4ece \\(rt\\) \u51fa\u53d1\uff0c\u5411\u4e0b dfs\uff0c\u5e76\u7528\u513f\u5b50\u66f4\u65b0\u7236\u4eb2\u7684\u4fe1\u606f\u3002 \u7b2c\u4e8c\u6b21 dfs\uff0c\u4e00\u822c\u8fd8\u662f\u4ece\u6700\u5f00\u59cb\u786e\u5b9a\u7684\u6839\u8282\u70b9 \\(rt\\) \u5f00\u59cb\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u65f6\u5019\u9700\u8981\u7528 \u4ee5\u7236\u4eb2 \\(u\\) \u4e3a\u6574\u68f5\u6811\u7684\u6839\u7684\u7b54\u6848 \uff0c\u7ed3\u5408\u4fe1\u606f\u6765\u66f4\u65b0 \u4ee5\u513f\u5b50 \\(v\\) \u4e3a\u6574\u68f5\u6811\u7684\u6839\u7684\u7b54\u6848 \u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u6b64\u65f6\u8fdb\u884c\u6362\u6839DP\u7684\u65f6\u5019\uff0c\u4f1a\u8bbe \\(f_u\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u65f6\u5019\u7684\u7b54\u6848\uff0c\u7136\u540e\u4ece\u6700\u5f00\u59cb\u9009\u5b9a\u7684\u6839\u8282\u70b9\u5411\u4e0b\u8f6c\u79fb\u3002 \u56e0\u4e3a\u6bcf\u6b21\u53ea\u4f1a\u5411\u5f53\u524d\u8282\u70b9\u7684\u513f\u5b50\u8282\u70b9\u8f6c\u79fb\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5bf9\u4fe1\u606f\u8fdb\u884c\u4e00\u4e9b\u6574\u5408\u3001\u8ba1\u7b97\u5c31\u53ef\u4ee5\u5f97\u5230\u513f\u5b50\u8282\u70b9\u7684\u7b54\u6848\u3002 \uff08\u6b64\u5904\u6240\u8bf4\u7684\u201c\u7236\u4eb2\u201d\uff0c\u201c\u513f\u5b50\u201d\uff0c\u90fd\u662f\u5728\u6700\u5f00\u59cb\u9009\u5b9a\u7684\u6839\u8282\u70b9 \\(rt\\) \u4e3a\u6574\u68f5\u6811\u7684\u6839\u7684\u60c5\u51b5\u4e0b\u5b9a\u4e49\u7684\uff09 \u4f8b\u5b50 \u03c8(\uff40\u2207\u00b4)\u03c8 [POI2008]STA-Station\uff1a\u7ed9\u4f60\u4e00\u9897\u65e0\u6839\u65e0\u6743\u6811\uff0c\u8bf7\u4f60\u627e\u5230\u4e00\u4e2a\u8282\u70b9\uff0c\u4f7f\u5f97\u4ee5\u8fd9\u4e2a\u8282\u70b9\u4e3a\u6839\u7684\u65f6\u5019\uff0c\u6811\u7684\u8282\u70b9\u7684\u6df1\u5ea6\u4e4b\u548c\u6700\u5927\u3002 \u9996\u5148\u4ee5 \\(1\\) \u4e3a\u6839\uff0c\u8003\u8651\u8fdb\u884c\u4e00\u6b21 dfs\uff0c\u6c42\u51fa\u6b64\u65f6\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6 \\(depth\\) \uff0c\u5b50\u6811\u5927\u5c0f \\(siz\\) \uff0c\u5b50\u6811\u5230\u8fd9\u4e2a\u70b9\u7684\u8ddd\u79bb\u548c \\(dis\\) \u3002 \u90a3\u4e48\u8bbe \\(f_u\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u65f6\u5019\uff0c\u6811\u7684\u6240\u6709\u8282\u70b9\u7684\u6df1\u5ea6\u4e4b\u548c\u3002 \u8003\u8651\u4ece \\(u\\) \u7684\u7236\u4eb2 \\(fa\\) \u8f6c\u79fb\u8fc7\u6765\u3002 \u9996\u5148\uff0c \\(f_u\\) \u80af\u5b9a\u8981\u5148\u52a0\u4e0a \\(dis_u\\) \uff0c\u8fd9\u4e00\u90e8\u5206\u672c\u6765\u5c31\u662f\u4ee5 \\(u\\) \u4e3a\u6839\uff0c\u6240\u4ee5\u6df1\u5ea6\u548c\u81ea\u7136\u662f\u5230 \\(u\\) \u7684\u8ddd\u79bb\u548c\uff08\u56e0\u4e3a\u65e0\u6743\uff09\u3002 \u7136\u540e\u53d1\u73b0 \\(u\\) \u7684\u4e0a\u9762\u90a3\u90e8\u5206\u9700\u8981\u7edf\u8ba1\u3002 \u660e\u663e\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528 \\(f_{fa}\\) \u6c42\u51fa\u4e0a\u9762\u7684\u90e8\u5206\uff0c\u4f46\u662f \\(f_{fa}\\) \u672c\u8eab\u5c31\u5305\u542b\u4e86 \\(u\\) \u7684\u5b50\u6811\u4fe1\u606f\u3002 \u6240\u4ee5\u8981\u7ed9 \\(f_{fa}\\) \u51cf\u53bb \\(dis_u\\) \uff0c\u4e0d\u8fc7 \\(fa\\) \u548c \\(u\\) \u5728\u4ee5 \\(1\\) \u4e3a\u6839\u7684\u65f6\u5019\u662f\u6709\u6df1\u5ea6\u5dee\u7684\uff0c\u6240\u4ee5\u8981\u518d\u51cf\u53bb \\(siz_u(\\times 1)\\) \u3002 \u521a\u597d\uff0c\u8fd9\u4e2a\u6df1\u5ea6\u5dee\u53c8\u4f1a\u9020\u6210\u4e0a\u9762\u7684\u90a3\u4e00\u90e8\u5206\u5728\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u65f6\u5019\u7684\u6df1\u5ea6\u6bd4\u4ee5 \\(fa\\) \u4e3a\u6839\u7684\u65f6\u5019\u589e\u52a0 \\(1\\) \u3002 \u6240\u4ee5\u8981\u52a0\u4e0a \\(siz_1-siz_u\\) \u3002 \u6574\u7406\u4e0b\u5f0f\u5b50\uff1a \\(f_u=f_{fa}-dis_u+dis_u-siz_u+siz_1-siz_u=f_{fa}+siz_1-2siz_u\\) \u3002 \u6240\u4ee5\u5b9e\u9645\u4e0a\u53ea\u9700\u8981\u8bb0\u5f55 \\(siz\\) \u5c31\u53ef\u4ee5\u4e86\u3002 \u4f46\u662f\u4f60\u4e3a\u4e86\u8f6c\u79fb\uff0c\u80af\u5b9a\u8981\u5728\u6362\u6839\u4e4b\u524d\u5148\u6c42\u51fa \\(f_1\\) \u3002\u8fd9\u4e2a\u5229\u7528 \\(depth\\) \u66b4\u529b\u52a0\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int si = 1e6 + 10 ; int n ; struct Tree { int head , ver , Next ; } e [ si << 1 ]; int tot = 0 ; inline void add ( int u , int v ){ e [ ++ tot ]. ver = v , e [ tot ]. Next = e [ u ]. head ; e [ u ]. head = tot ; } int f [ si ], siz [ si ], depth [ si ]; inline void dfs1 ( int u , int fa ){ siz [ u ] = 1 ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( v == fa ) continue ; depth [ v ] = depth [ u ] + 1 ; dfs1 ( v , u ), siz [ u ] += siz [ v ]; } return ; } inline void dfs2 ( int u , int fa ){ for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( v == fa ) continue ; f [ v ] = f [ u ] + siz [ 1 ] -2 * siz [ v ]; dfs2 ( v , u ); } return ; } signed main (){ scanf ( \"%lld\" , & n ); for ( register int i = 1 ; i < n ; ++ i ){ int u , v ; scanf ( \"%lld%lld\" , & u , & v ); add ( u , v ), add ( v , u ); } depth [ 1 ] = 0 ; dfs1 ( 1 , 0 ); for ( register int i = 1 ; i <= n ; ++ i ){ f [ 1 ] += depth [ i ]; } dfs2 ( 1 , 0 ); int res = 0 , ans = -114514 ; for ( register int i = 1 ; i <= n ; ++ i ){ if ( f [ i ] > ans ) ans = f [ i ], res = i ; } return printf ( \"%lld \\n \" , res ), 0 ; } \u518d\u603b\u7ed3\u4e00\u4e0b\uff1a \u627e\u4e00\u4e2a\u6839\u8282\u70b9 \\(rt\\) \u7edf\u8ba1\u6b64\u65f6\u7684\u4fe1\u606f \u6362\u6839\uff0c\u5229\u7528\u7236\u4eb2\u66f4\u65b0\u513f\u5b50\u7684\u7b54\u6848\uff0c\u8f6c\u79fb\u4e4b\u524d\u8981\u5148\u521d\u59cb\u5316\u7b2c\u4e00\u904d dfs \u65f6\u5019\u7684\u6839 \\(rt\\) \u7684\u7b54\u6848\u3002 \u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50 \u03c8(\uff40\u2207\u00b4)\u03c8 [USACO12FEB]Nearby Cows G\uff1a\u7ed9\u4f60\u4e00\u68f5 \\(n\\) \u4e2a\u70b9\u7684\u6811\uff0c\u70b9\u5e26\u6743\uff0c \u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9 \\(i\\) \uff0c\u6c42\u51fa\u8ddd\u79bb\u5b83\u4e0d\u8d85\u8fc7 \\(K\\) \u7684\u6240\u6709\u8282\u70b9\u7684\u6743\u503c\u548c \\(m_i\\) \uff0c \\(K\\) \u7ed9\u5b9a\uff0c\u5e76\u4e14 \\(n\\times K \\le 2\\times 10^6, K \\le 20\\) \u3002 \u6211\u4eec\u4ecd\u7136\u8003\u8651\u5148 dfs \u4e00\u904d \u6c42\u51fa\u6240\u9700\u8981\u7684\u4fe1\u606f\uff0c\u800c\u8fd9\u91cc\u95ee\u7684\u662f\u8282\u70b9\u6743\u503c\u548c\uff0c\u53c8\u6709 \\(K\\) \u7684\u9650\u5236\u3002 \u90a3\u4e48\u5148\u627e\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u6bd4\u5982 \\(1\\) \uff0c\u7136\u540e\u8bbe \\(f_{u,k}\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u5f53\u4e2d\uff0c\u548c \\(u\\) \u7684\u8ddd\u79bb\u4e0d\u8d85\u8fc7 \\(k\\) \u7684\u8282\u70b9\u7684\u6743\u503c\u548c\u3002 \u8fd9\u91cc \\(f_{u,k}=\\sum f_{v,k-1}\\) \uff0c\u521d\u59cb\u5316 \\(\\forall f_{u,i}=a_u\\) \u3002 \u7136\u540e\u8003\u8651\u8fdb\u884c\u6362\u6839\u3002 \u8bbe \\(dis_{u,k}\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u65f6\u5019\uff0c \\(K=k\\) \u7684\u65f6\u5019\u7684 \\(m_u\\) \u3002 \u90a3\u4e48\u8003\u8651\u4ece \\(dis_{fa}\\) \u8f6c\u79fb\u3002 \u7b80\u5355\u63a8\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\uff0c \\(dis_{u,k}=f_{u,k}+dis_{fa,k-1}-f_{u,k-2}\\) \u3002 \u7136\u540e\u6211\u4eec\u5904\u7406\u51fa \\(f\\) \u4e4b\u540e\uff0c\u5148\u628a \\(f\\) \u590d\u5236\u7ed9 \\(dis\\) \uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019 \\(dis_1\\) \u5176\u5b9e\u5c31\u5df2\u7ecf\u7b97\u51fa\u6765\u4e86\uff0c\u6362\u6839\u5b8c\u540e\u8f93\u51fa\u5373\u53ef\u3002 \u4e0d\u8fc7\u8981\u6ce8\u610f\u7684\u4e00\u4e2a\u70b9\u662f\uff0c\u5982\u679c\u662f\u7528\u513f\u5b50\u66f4\u65b0\u7236\u4eb2\u7684\u4fe1\u606f \uff08 dfs1 \uff09 \uff0c\u90a3\u4e48\u8981\u5148 dfs \u7136\u540e\u518d\u66f4\u65b0\u3002 \u5982\u679c\u662f\u7528\u7236\u4eb2\u66f4\u65b0\u513f\u5b50\u7684\u4fe1\u606f\uff08 dfs2 \uff09\uff0c\u9700\u8981\u5148\u66f4\u65b0\u518d dfs\u3002 Code1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int si = 1e5 + 10 ; int n , k ; struct Tree { int head , ver , Next ; } e [ si << 1 ]; int tot = 0 ; inline void add ( int u , int v ){ e [ ++ tot ]. ver = v , e [ tot ]. Next = e [ u ]. head ; e [ u ]. head = tot ; } int f [ si ][ 22 ], dis [ si ][ 22 ]; int a [ si ]; inline void dfs1 ( int u , int fa ){ for ( register int i = 0 ; i <= k ; ++ i ){ f [ u ][ i ] = a [ u ]; } for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs1 ( v , u ); for ( register int j = 1 ; j <= k ; ++ j ){ f [ u ][ j ] += f [ v ][ j -1 ]; } } } inline void dfs2 ( int u , int fa ){ for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( v == fa ) continue ; dis [ v ][ 1 ] += f [ u ][ 0 ]; for ( register int j = 2 ; j <= k ; ++ j ){ dis [ v ][ j ] += dis [ u ][ j -1 ] - f [ v ][ j -2 ]; } dfs2 ( v , u ); } } signed main (){ scanf ( \"%lld%lld\" , & n , & k ); for ( register int i = 1 ; i < n ; ++ i ){ int u , v ; scanf ( \"%lld%lld\" , & u , & v ); add ( u , v ), add ( v , u ); } for ( register int i = 1 ; i <= n ; ++ i ){ scanf ( \"%lld\" , & a [ i ]); } dfs1 ( 1 , 0 ); for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 0 ; j <= k ; ++ j ){ dis [ i ][ j ] = f [ i ][ j ]; } } dfs2 ( 1 , 0 ); for ( register int i = 1 ; i <= n ; ++ i ){ printf ( \"%lld \\n \" , dis [ i ][ k ]); } return 0 ; } \u5f53\u7136 \\(f\\) \u4e5f\u53ef\u4ee5\u8fd9\u4e48\u6c42\uff1a \u521d\u59cb\u5316 \\(f_{u, 0} = a_u\\) \uff0c\u7136\u540e \\(f_{u,k}=\\sum f_{v,k-1}\\) \u3002 \u6b64\u65f6\u6c42\u7684\u662f\u8ddd\u79bb\u6070\u597d\u4e3a \\(k\\) \uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u505a\u4e00\u904d\u524d\u7f00\u548c\u3002 \u8fd9\u79cd\u5199\u6cd5\u7684\u5b9e\u73b0\uff1a Code2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 int dp [ si ][ 22 ]; // \u4ee5 1 \u4e3a\u6839, u \u7684\u5b50\u6811\uff0c\u8ddd\u79bb\u4e0d\u8d85\u8fc7 i\uff0ccnt\u3002 // \u521d\u59cb\u662f\u6070\u597d\uff0c\u4e4b\u540e\u505a\u524d\u7f00\u548c\u3002 int ans [ si ][ 22 ]; // \u4ee5 u \u4e3a\u6839\u7684\u7b54\u6848\uff0cans[u][1] \u76f4\u63a5\u9884\u5904\u7406\uff0cans[u][2] \u5f00\u59cb\u518d\u6362\u6839 dp\u3002 // \u7b2c\u4e00\u904d dfs void dfs1 ( int u , int fa ) { dp [ u ][ 0 ] = a [ u ]; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs1 ( v , u ); for ( int j = 1 ; j <= k ; ++ j ) dp [ u ][ j ] += dp [ v ][ j - 1 ]; } } // \u524d\u7f00\u548c\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u7528 dfs\u3002 void dfs2 ( int u , int fa ) { for ( int i = 1 ; i <= k ; ++ i ) dp [ u ][ i ] += dp [ u ][ i - 1 ]; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs2 ( v , u ); } } // \u6362\u6839 void dfs3 ( int u , int fa ) { for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; ans [ v ][ 1 ] = dp [ v ][ 1 ] + a [ u ]; for ( int j = 2 ; j <= k ; ++ j ) ans [ v ][ j ] = dp [ v ][ j ] + ans [ u ][ j - 1 ] - dp [ v ][ j - 2 ]; dfs3 ( v , u ); } } void solve () { memset ( dp , 0 , sizeof dp ); memset ( ans , 0 , sizeof ans ); dfs1 ( 1 , 0 ), dfs2 ( 1 , 0 ); memcpy ( ans [ 1 ], dp [ 1 ], sizeof ans [ 1 ]); dfs3 ( 1 , 0 ); for ( int i = 1 ; i <= n ; ++ i ) cout << ans [ i ][ k ] << \" \" [ i != n ]; cout << endl ; return ; }","title":"\u6811\u5f62 DP"},{"location":"algor/dp/tree-dp/#dp","text":"\u6811\u5f62DP\u7684\u56fa\u6709\u7279\u5f81\u5c31\u662f\u4f7f\u7528 dfs \u9012\u5f52\u5b9e\u73b0\u3002 \u4e00\u822c\u6765\u8bf4\u90fd\u662f dfs \u5230\u513f\u5b50\uff0c\u7136\u540e \u4e0a\u4f20\u4fe1\u606f \u66f4\u65b0\u7236\u4eb2\uff0c\u6700\u540e\u5f97\u51fa\u7b54\u6848\u3002 \u5e38\u89c1\u7684\u8f85\u52a9\u6570\u7ec4\u662f\uff1a siz[u] \uff1a\u8bb0\u5f55\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u7684\u5927\u5c0f dep[u] \uff1a\u8bb0\u5f55\u4ee5\u67d0\u4e2a\u8282\u70b9\uff08\u901a\u5e38\u662f \\(1\\) \uff09\u4e3a\u6839\u7684\u65f6\u5019 \\(u\\) \u7684\u6df1\u5ea6\u3002 dis[u] \uff1a \\(u\\) \u80fd\u5411\u4e0b\u8d70\u7684\u6700\u8fdc\u8ddd\u79bb / \u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u5f53\u4e2d\u6240\u6709\u8282\u70b9\u5230 \\(u\\) \u7684\u8ddd\u79bb\u548c\u3002 \uff08\u9664\u4e86\u6362\u6839DP\u4f1a\u5728\u7b2c\u4e8c\u6b21 dfs \u7684\u65f6\u5019\u7528\u7236\u4eb2\u66f4\u65b0\u513f\u5b50\uff09 \u4e00\u822c\u6765\u8bf4\uff0c\u72b6\u6001\u90fd\u662f\u8bbe\u8ba1\u6210\u8fd9\u79cd \uff1a \\(f_{u}\\) \u8868\u793a\u8282\u70b9 \\(u\\) blablabla\uff0c\u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811 blablabla\u2026\u2026","title":"\u666e\u901a\u6811\u5f62DP"},{"location":"algor/dp/tree-dp/#_1","text":"\u6ca1\u6709\u4e0a\u53f8\u7684\u821e\u4f1a\uff1a\u7ed9\u4f60\u4e00\u68f5\u6811\uff0c\u5982\u679c\u9009\u4e86\u67d0\u4e00\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\u8282\u70b9\uff0c\u90a3\u4e48\u5c31\u4e0d\u80fd\u9009\u8fd9\u4e2a\u8282\u70b9\uff0c\u8282\u70b9\u6709\u70b9\u6743\uff0c\u95ee\u4f60\u53ef\u4ee5\u9009\u62e9\u7684\u70b9\u6743\u548c\u7684\u6700\u5927\u503c\u3002 \u8bbe \\(f[u][0/1]\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\uff0c \\(u\\) \u53c2\u52a0\u6216\u8005\u4e0d\u53c2\u52a0\u821e\u4f1a\u7684\u6240\u6709\u60c5\u51b5\uff0c\u5c5e\u6027\u4e3a\uff1a\u53d6\u5f97\u7684\u6700\u5927\u6743\u503c\u3002 \u8fd9\u6837\u5b50\u8bbe\u8ba1\u624d\u80fd\u591f\u8868\u793a\u51fa\u9898\u76ee\u4e2d \u6240\u6709\u7684\u9650\u5236\u5173\u7cfb \uff1a\u4ece\u5c5e\uff0c\u662f\u5426\u53c2\u52a0\u3002 \u6839\u636e\u72b6\u6001\u8bbe\u8ba1\uff0c\u5206 \\(f[u][0]\\) \u548c \\(f[u][1]\\) \u4e24\u79cd\u60c5\u51b5\u6765\u8ba8\u8bba\u3002 \u5982\u679c \\(u\\) \u4e0d\u53c2\u52a0\u821e\u4f1a\uff0c\u90a3\u4e48\u5b83\u7684\u513f\u5b50\u4eec\u90fd\u53ef\u4ee5\u53c2\u52a0\u821e\u4f1a\u3002 \u6ce8\u610f\u5230 \\(r_i\\) \u53ef\u80fd\u662f\u8d1f\u6570\uff0c\u6240\u4ee5\u8981\u5728\u513f\u5b50\u53c2\u52a0\u548c\u4e0d\u53c2\u52a0\u91cc\u9762\u53d6\u4e2a\u6700\u5927\u503c\u7136\u540e\u518d\u6c42\u548c\u3002 \\(f[u][0]=\\sum \\max(f[v][1],f[v][0])\\) \u7136\u540e\u5982\u679c \\(u\\) \u53c2\u52a0\u4e86\u821e\u4f1a\uff0c\u90a3\u4e48\u5b83\u7684\u513f\u5b50\u8282\u70b9\u5c31\u90fd\u4e0d\u4f1a\u53c2\u52a0\uff0c\u4f46\u662f\u5b83\u81ea\u5df1\u8981\u53c2\u52a0\u3002 \u6240\u4ee5 \\(f[u][1]=\\sum f[v][0]+r_u\\) \u7136\u540e\u6211\u4eecDP\u5b8c\u4e86\u4e4b\u540e\u5c31\u5728 \\(f[root][0]\\) \u548c \\(f[root][1]\\) \u4e4b\u95f4\u53d6\u4e2a\u6700\u5927\u503c\u5373\u53ef\u3002 \u4ece\u8fd9\u9053\u9898\u4e0d\u96be\u53d1\u73b0\uff0c\u6811\u5f62DP\u7684\u91cd\u70b9\u5c31\u5728\u4e8e\u5982\u4f55\u5229\u7528\u72b6\u6001\u8868\u793a\u8282\u70b9\u548c\u8282\u70b9\u4e4b\u95f4\u7684\u4ece\u5c5e\uff0c\u9650\u5236\u7b49\u5173\u7cfb\u3002 \u5e76\u4e14\u8bbe\u8ba1\u72b6\u6001\u7684\u65f6\u5019\u4e00\u822c\u90fd\u662f\u95ee\u4ec0\u4e48\u8bbe\u4ec0\u4e48\uff08\u548c\u7ebf\u6027DP\u5dee\u4e0d\u591a\uff09\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #include <bits/stdc++.h> using namespace std ; const int si = 6e3 + 10 ; struct Tree { int ver , head , Next ; } e [ si * 2 ]; int root = 0 , cnt = 0 ; void add ( int u , int v ){ e [ ++ cnt ]. ver = v , e [ cnt ]. Next = e [ u ]. head ; e [ u ]. head = cnt ; } int r [ si ]; int f [ si ][ 2 ]; bool nrt [ si ]; void dp ( int u , int fa ){ f [ u ][ 0 ] = 0 ; f [ u ][ 1 ] = r [ u ]; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( v == fa ) continue ; dp ( v , u ); f [ u ][ 0 ] += max ( f [ v ][ 1 ], f [ v ][ 0 ]); f [ u ][ 1 ] += f [ v ][ 0 ]; } } int n ; int main (){ scanf ( \"%d\" , & n ); for ( register int i = 1 ; i <= n ; ++ i ){ scanf ( \"%d\" , & r [ i ]); } for ( register int i = 1 ; i < n ; ++ i ){ int u , v ; scanf ( \"%d%d\" , & u , & v ); add ( u , v ), add ( v , u ); nrt [ v ] = true ; } for ( register int i = 1 ; i <= n ; ++ i ){ if ( ! nrt [ i ]){ root = i ; break ; } } dp ( root , 0 ); int res = max ( f [ root ][ 0 ], f [ root ][ 1 ]); printf ( \"%d \\n \" , res ); }","title":"\u4f8b\u5b50"},{"location":"algor/dp/tree-dp/#_2","text":"\u8fd9\u4e2a\u89c1 \u80cc\u5305\u95ee\u9898 \u3002","title":"\u6811\u4e0a\u80cc\u5305"},{"location":"algor/dp/tree-dp/#dp_1","text":"","title":"\u6362\u6839DP"},{"location":"algor/dp/tree-dp/#_3","text":"\u8fd9\u7c7b\u95ee\u9898\u7684\u663e\u8457\u7279\u70b9\u662f\u4e24\u6b21dfs\uff0c\u4e00\u6b21\u6536\u96c6\u4fe1\u606f\uff0c\u4e00\u6b21\u8fdb\u884c\u8f6c\u79fb\u3002 \u6709\u7684\u65f6\u5019\u66b4\u529b\u9700\u8981\u6bcf\u4e2a\u70b9\u8fdb\u884c\u4e00\u6b21 \\(\\text{O}(n)\\) \u7684 dfs\uff0c\u590d\u6742\u5ea6 \\(\\text{O}(n^2)\\) \u3002 \u6b64\u65f6\u4e00\u822c\u90fd\u53ef\u4ee5\u4f7f\u7528\u6362\u6839DP\u8fdb\u884c \\(\\text{O}(n)\\) \u7684\u8ba1\u7b97\u3002 \u89e3\u51b3\u65f6\u4e00\u822c\u5206\u4e09\u6b65\uff1a \u786e\u5b9a\u4e00\u4e2a\u6839\u8282\u70b9 \\(rt\\) \u4ece \\(rt\\) \u51fa\u53d1\uff0c\u5411\u4e0b dfs\uff0c\u5e76\u7528\u513f\u5b50\u66f4\u65b0\u7236\u4eb2\u7684\u4fe1\u606f\u3002 \u7b2c\u4e8c\u6b21 dfs\uff0c\u4e00\u822c\u8fd8\u662f\u4ece\u6700\u5f00\u59cb\u786e\u5b9a\u7684\u6839\u8282\u70b9 \\(rt\\) \u5f00\u59cb\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u65f6\u5019\u9700\u8981\u7528 \u4ee5\u7236\u4eb2 \\(u\\) \u4e3a\u6574\u68f5\u6811\u7684\u6839\u7684\u7b54\u6848 \uff0c\u7ed3\u5408\u4fe1\u606f\u6765\u66f4\u65b0 \u4ee5\u513f\u5b50 \\(v\\) \u4e3a\u6574\u68f5\u6811\u7684\u6839\u7684\u7b54\u6848 \u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u6b64\u65f6\u8fdb\u884c\u6362\u6839DP\u7684\u65f6\u5019\uff0c\u4f1a\u8bbe \\(f_u\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u65f6\u5019\u7684\u7b54\u6848\uff0c\u7136\u540e\u4ece\u6700\u5f00\u59cb\u9009\u5b9a\u7684\u6839\u8282\u70b9\u5411\u4e0b\u8f6c\u79fb\u3002 \u56e0\u4e3a\u6bcf\u6b21\u53ea\u4f1a\u5411\u5f53\u524d\u8282\u70b9\u7684\u513f\u5b50\u8282\u70b9\u8f6c\u79fb\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u5bf9\u4fe1\u606f\u8fdb\u884c\u4e00\u4e9b\u6574\u5408\u3001\u8ba1\u7b97\u5c31\u53ef\u4ee5\u5f97\u5230\u513f\u5b50\u8282\u70b9\u7684\u7b54\u6848\u3002 \uff08\u6b64\u5904\u6240\u8bf4\u7684\u201c\u7236\u4eb2\u201d\uff0c\u201c\u513f\u5b50\u201d\uff0c\u90fd\u662f\u5728\u6700\u5f00\u59cb\u9009\u5b9a\u7684\u6839\u8282\u70b9 \\(rt\\) \u4e3a\u6574\u68f5\u6811\u7684\u6839\u7684\u60c5\u51b5\u4e0b\u5b9a\u4e49\u7684\uff09","title":"\u6cdb\u5316"},{"location":"algor/dp/tree-dp/#_4","text":"[POI2008]STA-Station\uff1a\u7ed9\u4f60\u4e00\u9897\u65e0\u6839\u65e0\u6743\u6811\uff0c\u8bf7\u4f60\u627e\u5230\u4e00\u4e2a\u8282\u70b9\uff0c\u4f7f\u5f97\u4ee5\u8fd9\u4e2a\u8282\u70b9\u4e3a\u6839\u7684\u65f6\u5019\uff0c\u6811\u7684\u8282\u70b9\u7684\u6df1\u5ea6\u4e4b\u548c\u6700\u5927\u3002 \u9996\u5148\u4ee5 \\(1\\) \u4e3a\u6839\uff0c\u8003\u8651\u8fdb\u884c\u4e00\u6b21 dfs\uff0c\u6c42\u51fa\u6b64\u65f6\u6bcf\u4e2a\u70b9\u7684\u6df1\u5ea6 \\(depth\\) \uff0c\u5b50\u6811\u5927\u5c0f \\(siz\\) \uff0c\u5b50\u6811\u5230\u8fd9\u4e2a\u70b9\u7684\u8ddd\u79bb\u548c \\(dis\\) \u3002 \u90a3\u4e48\u8bbe \\(f_u\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u65f6\u5019\uff0c\u6811\u7684\u6240\u6709\u8282\u70b9\u7684\u6df1\u5ea6\u4e4b\u548c\u3002 \u8003\u8651\u4ece \\(u\\) \u7684\u7236\u4eb2 \\(fa\\) \u8f6c\u79fb\u8fc7\u6765\u3002 \u9996\u5148\uff0c \\(f_u\\) \u80af\u5b9a\u8981\u5148\u52a0\u4e0a \\(dis_u\\) \uff0c\u8fd9\u4e00\u90e8\u5206\u672c\u6765\u5c31\u662f\u4ee5 \\(u\\) \u4e3a\u6839\uff0c\u6240\u4ee5\u6df1\u5ea6\u548c\u81ea\u7136\u662f\u5230 \\(u\\) \u7684\u8ddd\u79bb\u548c\uff08\u56e0\u4e3a\u65e0\u6743\uff09\u3002 \u7136\u540e\u53d1\u73b0 \\(u\\) \u7684\u4e0a\u9762\u90a3\u90e8\u5206\u9700\u8981\u7edf\u8ba1\u3002 \u660e\u663e\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528 \\(f_{fa}\\) \u6c42\u51fa\u4e0a\u9762\u7684\u90e8\u5206\uff0c\u4f46\u662f \\(f_{fa}\\) \u672c\u8eab\u5c31\u5305\u542b\u4e86 \\(u\\) \u7684\u5b50\u6811\u4fe1\u606f\u3002 \u6240\u4ee5\u8981\u7ed9 \\(f_{fa}\\) \u51cf\u53bb \\(dis_u\\) \uff0c\u4e0d\u8fc7 \\(fa\\) \u548c \\(u\\) \u5728\u4ee5 \\(1\\) \u4e3a\u6839\u7684\u65f6\u5019\u662f\u6709\u6df1\u5ea6\u5dee\u7684\uff0c\u6240\u4ee5\u8981\u518d\u51cf\u53bb \\(siz_u(\\times 1)\\) \u3002 \u521a\u597d\uff0c\u8fd9\u4e2a\u6df1\u5ea6\u5dee\u53c8\u4f1a\u9020\u6210\u4e0a\u9762\u7684\u90a3\u4e00\u90e8\u5206\u5728\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u65f6\u5019\u7684\u6df1\u5ea6\u6bd4\u4ee5 \\(fa\\) \u4e3a\u6839\u7684\u65f6\u5019\u589e\u52a0 \\(1\\) \u3002 \u6240\u4ee5\u8981\u52a0\u4e0a \\(siz_1-siz_u\\) \u3002 \u6574\u7406\u4e0b\u5f0f\u5b50\uff1a \\(f_u=f_{fa}-dis_u+dis_u-siz_u+siz_1-siz_u=f_{fa}+siz_1-2siz_u\\) \u3002 \u6240\u4ee5\u5b9e\u9645\u4e0a\u53ea\u9700\u8981\u8bb0\u5f55 \\(siz\\) \u5c31\u53ef\u4ee5\u4e86\u3002 \u4f46\u662f\u4f60\u4e3a\u4e86\u8f6c\u79fb\uff0c\u80af\u5b9a\u8981\u5728\u6362\u6839\u4e4b\u524d\u5148\u6c42\u51fa \\(f_1\\) \u3002\u8fd9\u4e2a\u5229\u7528 \\(depth\\) \u66b4\u529b\u52a0\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int si = 1e6 + 10 ; int n ; struct Tree { int head , ver , Next ; } e [ si << 1 ]; int tot = 0 ; inline void add ( int u , int v ){ e [ ++ tot ]. ver = v , e [ tot ]. Next = e [ u ]. head ; e [ u ]. head = tot ; } int f [ si ], siz [ si ], depth [ si ]; inline void dfs1 ( int u , int fa ){ siz [ u ] = 1 ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( v == fa ) continue ; depth [ v ] = depth [ u ] + 1 ; dfs1 ( v , u ), siz [ u ] += siz [ v ]; } return ; } inline void dfs2 ( int u , int fa ){ for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( v == fa ) continue ; f [ v ] = f [ u ] + siz [ 1 ] -2 * siz [ v ]; dfs2 ( v , u ); } return ; } signed main (){ scanf ( \"%lld\" , & n ); for ( register int i = 1 ; i < n ; ++ i ){ int u , v ; scanf ( \"%lld%lld\" , & u , & v ); add ( u , v ), add ( v , u ); } depth [ 1 ] = 0 ; dfs1 ( 1 , 0 ); for ( register int i = 1 ; i <= n ; ++ i ){ f [ 1 ] += depth [ i ]; } dfs2 ( 1 , 0 ); int res = 0 , ans = -114514 ; for ( register int i = 1 ; i <= n ; ++ i ){ if ( f [ i ] > ans ) ans = f [ i ], res = i ; } return printf ( \"%lld \\n \" , res ), 0 ; } \u518d\u603b\u7ed3\u4e00\u4e0b\uff1a \u627e\u4e00\u4e2a\u6839\u8282\u70b9 \\(rt\\) \u7edf\u8ba1\u6b64\u65f6\u7684\u4fe1\u606f \u6362\u6839\uff0c\u5229\u7528\u7236\u4eb2\u66f4\u65b0\u513f\u5b50\u7684\u7b54\u6848\uff0c\u8f6c\u79fb\u4e4b\u524d\u8981\u5148\u521d\u59cb\u5316\u7b2c\u4e00\u904d dfs \u65f6\u5019\u7684\u6839 \\(rt\\) \u7684\u7b54\u6848\u3002","title":"\u4f8b\u5b50"},{"location":"algor/dp/tree-dp/#_5","text":"[USACO12FEB]Nearby Cows G\uff1a\u7ed9\u4f60\u4e00\u68f5 \\(n\\) \u4e2a\u70b9\u7684\u6811\uff0c\u70b9\u5e26\u6743\uff0c \u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9 \\(i\\) \uff0c\u6c42\u51fa\u8ddd\u79bb\u5b83\u4e0d\u8d85\u8fc7 \\(K\\) \u7684\u6240\u6709\u8282\u70b9\u7684\u6743\u503c\u548c \\(m_i\\) \uff0c \\(K\\) \u7ed9\u5b9a\uff0c\u5e76\u4e14 \\(n\\times K \\le 2\\times 10^6, K \\le 20\\) \u3002 \u6211\u4eec\u4ecd\u7136\u8003\u8651\u5148 dfs \u4e00\u904d \u6c42\u51fa\u6240\u9700\u8981\u7684\u4fe1\u606f\uff0c\u800c\u8fd9\u91cc\u95ee\u7684\u662f\u8282\u70b9\u6743\u503c\u548c\uff0c\u53c8\u6709 \\(K\\) \u7684\u9650\u5236\u3002 \u90a3\u4e48\u5148\u627e\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u6bd4\u5982 \\(1\\) \uff0c\u7136\u540e\u8bbe \\(f_{u,k}\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u5f53\u4e2d\uff0c\u548c \\(u\\) \u7684\u8ddd\u79bb\u4e0d\u8d85\u8fc7 \\(k\\) \u7684\u8282\u70b9\u7684\u6743\u503c\u548c\u3002 \u8fd9\u91cc \\(f_{u,k}=\\sum f_{v,k-1}\\) \uff0c\u521d\u59cb\u5316 \\(\\forall f_{u,i}=a_u\\) \u3002 \u7136\u540e\u8003\u8651\u8fdb\u884c\u6362\u6839\u3002 \u8bbe \\(dis_{u,k}\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u65f6\u5019\uff0c \\(K=k\\) \u7684\u65f6\u5019\u7684 \\(m_u\\) \u3002 \u90a3\u4e48\u8003\u8651\u4ece \\(dis_{fa}\\) \u8f6c\u79fb\u3002 \u7b80\u5355\u63a8\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\uff0c \\(dis_{u,k}=f_{u,k}+dis_{fa,k-1}-f_{u,k-2}\\) \u3002 \u7136\u540e\u6211\u4eec\u5904\u7406\u51fa \\(f\\) \u4e4b\u540e\uff0c\u5148\u628a \\(f\\) \u590d\u5236\u7ed9 \\(dis\\) \uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019 \\(dis_1\\) \u5176\u5b9e\u5c31\u5df2\u7ecf\u7b97\u51fa\u6765\u4e86\uff0c\u6362\u6839\u5b8c\u540e\u8f93\u51fa\u5373\u53ef\u3002 \u4e0d\u8fc7\u8981\u6ce8\u610f\u7684\u4e00\u4e2a\u70b9\u662f\uff0c\u5982\u679c\u662f\u7528\u513f\u5b50\u66f4\u65b0\u7236\u4eb2\u7684\u4fe1\u606f \uff08 dfs1 \uff09 \uff0c\u90a3\u4e48\u8981\u5148 dfs \u7136\u540e\u518d\u66f4\u65b0\u3002 \u5982\u679c\u662f\u7528\u7236\u4eb2\u66f4\u65b0\u513f\u5b50\u7684\u4fe1\u606f\uff08 dfs2 \uff09\uff0c\u9700\u8981\u5148\u66f4\u65b0\u518d dfs\u3002 Code1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int si = 1e5 + 10 ; int n , k ; struct Tree { int head , ver , Next ; } e [ si << 1 ]; int tot = 0 ; inline void add ( int u , int v ){ e [ ++ tot ]. ver = v , e [ tot ]. Next = e [ u ]. head ; e [ u ]. head = tot ; } int f [ si ][ 22 ], dis [ si ][ 22 ]; int a [ si ]; inline void dfs1 ( int u , int fa ){ for ( register int i = 0 ; i <= k ; ++ i ){ f [ u ][ i ] = a [ u ]; } for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs1 ( v , u ); for ( register int j = 1 ; j <= k ; ++ j ){ f [ u ][ j ] += f [ v ][ j -1 ]; } } } inline void dfs2 ( int u , int fa ){ for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( v == fa ) continue ; dis [ v ][ 1 ] += f [ u ][ 0 ]; for ( register int j = 2 ; j <= k ; ++ j ){ dis [ v ][ j ] += dis [ u ][ j -1 ] - f [ v ][ j -2 ]; } dfs2 ( v , u ); } } signed main (){ scanf ( \"%lld%lld\" , & n , & k ); for ( register int i = 1 ; i < n ; ++ i ){ int u , v ; scanf ( \"%lld%lld\" , & u , & v ); add ( u , v ), add ( v , u ); } for ( register int i = 1 ; i <= n ; ++ i ){ scanf ( \"%lld\" , & a [ i ]); } dfs1 ( 1 , 0 ); for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 0 ; j <= k ; ++ j ){ dis [ i ][ j ] = f [ i ][ j ]; } } dfs2 ( 1 , 0 ); for ( register int i = 1 ; i <= n ; ++ i ){ printf ( \"%lld \\n \" , dis [ i ][ k ]); } return 0 ; } \u5f53\u7136 \\(f\\) \u4e5f\u53ef\u4ee5\u8fd9\u4e48\u6c42\uff1a \u521d\u59cb\u5316 \\(f_{u, 0} = a_u\\) \uff0c\u7136\u540e \\(f_{u,k}=\\sum f_{v,k-1}\\) \u3002 \u6b64\u65f6\u6c42\u7684\u662f\u8ddd\u79bb\u6070\u597d\u4e3a \\(k\\) \uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u505a\u4e00\u904d\u524d\u7f00\u548c\u3002 \u8fd9\u79cd\u5199\u6cd5\u7684\u5b9e\u73b0\uff1a Code2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 int dp [ si ][ 22 ]; // \u4ee5 1 \u4e3a\u6839, u \u7684\u5b50\u6811\uff0c\u8ddd\u79bb\u4e0d\u8d85\u8fc7 i\uff0ccnt\u3002 // \u521d\u59cb\u662f\u6070\u597d\uff0c\u4e4b\u540e\u505a\u524d\u7f00\u548c\u3002 int ans [ si ][ 22 ]; // \u4ee5 u \u4e3a\u6839\u7684\u7b54\u6848\uff0cans[u][1] \u76f4\u63a5\u9884\u5904\u7406\uff0cans[u][2] \u5f00\u59cb\u518d\u6362\u6839 dp\u3002 // \u7b2c\u4e00\u904d dfs void dfs1 ( int u , int fa ) { dp [ u ][ 0 ] = a [ u ]; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs1 ( v , u ); for ( int j = 1 ; j <= k ; ++ j ) dp [ u ][ j ] += dp [ v ][ j - 1 ]; } } // \u524d\u7f00\u548c\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u7528 dfs\u3002 void dfs2 ( int u , int fa ) { for ( int i = 1 ; i <= k ; ++ i ) dp [ u ][ i ] += dp [ u ][ i - 1 ]; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs2 ( v , u ); } } // \u6362\u6839 void dfs3 ( int u , int fa ) { for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; ans [ v ][ 1 ] = dp [ v ][ 1 ] + a [ u ]; for ( int j = 2 ; j <= k ; ++ j ) ans [ v ][ j ] = dp [ v ][ j ] + ans [ u ][ j - 1 ] - dp [ v ][ j - 2 ]; dfs3 ( v , u ); } } void solve () { memset ( dp , 0 , sizeof dp ); memset ( ans , 0 , sizeof ans ); dfs1 ( 1 , 0 ), dfs2 ( 1 , 0 ); memcpy ( ans [ 1 ], dp [ 1 ], sizeof ans [ 1 ]); dfs3 ( 1 , 0 ); for ( int i = 1 ; i <= n ; ++ i ) cout << ans [ i ][ k ] << \" \" [ i != n ]; cout << endl ; return ; }","title":"\u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50"},{"location":"algor/dp/basic/how-to-think/","text":"\u5206\u6790 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6700\u91cd\u8981\u7684\u662f\u63d0\u53d6\u51fa\u9898\u76ee\u4e2d\u7684\u6240\u6709\u8981\u7d20\uff0c\u5e76\u5c3d\u53ef\u80fd\u7684\u5c06\u5176\u8f6c\u5316\u4e3a\u72b6\u6001\u7684\u4fe1\u606f\u7ef4\u5ea6\u6216\u8005\u72b6\u6001\u6240\u8868\u793a\u7684\u4fe1\u606f\u3002 \u5c31\u662f\u672c\u7740\u201c\u95ee\u5565\u8bbe\u5565\u201d\u7684\u7406\u5ff5\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff1a \u4e00\u4e2a\u516c\u53f8\u6709\u4e09\u4e2a\u79fb\u52a8\u670d\u52a1\u5458\uff0c\u6700\u521d\u5206\u522b\u5728\u4f4d\u7f6e \\(1\uff0c2\uff0c3\\) \u5904\u3002 \u5982\u679c\u67d0\u4e2a\u4f4d\u7f6e\uff08\u7528\u4e00\u4e2a\u6574\u6570\u8868\u793a\uff09\u6709\u4e00\u4e2a\u8bf7\u6c42\uff0c\u90a3\u4e48\u516c\u53f8\u5fc5\u987b\u6307\u6d3e\u67d0\u540d\u5458\u5de5\u8d76\u5230\u90a3\u4e2a\u5730\u65b9\u53bb\u3002 \u67d0\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u5458\u5de5\u80fd\u79fb\u52a8\uff0c\u4e14\u4e0d\u5141\u8bb8\u5728\u540c\u6837\u7684\u4f4d\u7f6e\u51fa\u73b0\u4e24\u4e2a\u5458\u5de5\u3002 \u4ece \\(p\\) \u5230 \\(q\\) \u79fb\u52a8\u4e00\u4e2a\u5458\u5de5\uff0c\u9700\u8981\u82b1\u8d39 \\(c(p,q)\\) \u3002 \u8fd9\u4e2a\u51fd\u6570\u4e0d\u4e00\u5b9a\u5bf9\u79f0\uff0c\u4f46\u4fdd\u8bc1 \\(c(p,p)=0\\) \u3002 \u7ed9\u51fa \\(N\\) \u4e2a\u8bf7\u6c42\uff0c\u8bf7\u6c42\u53d1\u751f\u7684\u4f4d\u7f6e\u5206\u522b\u4e3a \\(p_1 \\sim p_N\\) \u3002 \u516c\u53f8\u5fc5\u987b\u6309\u987a\u5e8f\u4f9d\u6b21\u6ee1\u8db3\u6240\u6709\u8bf7\u6c42\uff0c\u4e14\u8fc7\u7a0b\u4e2d\u4e0d\u80fd\u53bb\u5176\u4ed6\u989d\u5916\u7684\u4f4d\u7f6e\uff0c\u76ee\u6807\u662f\u6700\u5c0f\u5316\u516c\u53f8\u82b1\u8d39\uff0c\u8bf7\u4f60\u5e2e\u5fd9\u8ba1\u7b97\u8fd9\u4e2a\u6700\u5c0f\u82b1\u8d39\u3002 \\(1\\le L \\le 200, 1\\le N \\le 3000\\) \u3002 \u9996\u5148\u627e DP \u7684\u201d\u9636\u6bb5\u201c\uff0c\u4e5f\u5c31\u662f\u6700\u5916\u5c42\u5faa\u73af\u5e94\u8be5\u662f\u7531\u4ec0\u4e48\u51b3\u5b9a\u7684\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u662f\u4e00\u4e2a\u7ebf\u6027 DP \u95ee\u9898\uff0c\u90a3\u4e48\u8981\u627e\u7684\u5c31\u662f\u201c\u6309\u987a\u5e8f\u6210\u4e00\u6761\u7ebf\u201c\u7684\u8981\u7d20\u3002 \uff08\u6811\u5f62 DP \u5c31\u662f\u627e\u4ee5 xxx \u4e3a\u6839\u7684\u5b50\u6811\uff0c\u533a\u95f4 DP \u662f\u627e\u5212\u5206\u548c\u533a\u95f4\u957f\u5ea6\uff09 \u4ed4\u7ec6\u9605\u8bfb\u80fd\u53d1\u73b0\uff1a \u987a\u5e8f\u4f9d\u6b21\u6ee1\u8db3\u6240\u6709\u8bf7\u6c42 \u6240\u4ee5\u201d\u8bf7\u6c42\u201c\u5c31\u6784\u6210\u4e86 DP \u72b6\u6001\u4fe1\u606f\u7ef4\u5ea6\u7684\u201d\u9636\u6bb5\u201c\u8fd9\u4e00\u7ef4\u3002 \u7136\u540e\u6240\u4ee5\u53ef\u4ee5\u5148\u8bbe\u8ba1\u51fa\u4e00\u7ef4\u72b6\u6001\uff1a \\(dp_i\\) \u8868\u793a\u5904\u7406 \u524d \\(i\\) \u4e2a\u8bf7\u6c42\uff0c\u4ec0\u4e48\u4ec0\u4e48\u4e1c\u897f\u3002 \u9636\u6bb5\u7c7b\u7684\u4fe1\u606f\u4e00\u822c\u90fd\u5e26\u6709 \u201d\u524d\uff08 \\(i\\) \u4e2a\uff09\uff0c\u5f53\u524d\uff08\u7b2c \\(i\\) \u4e2a\uff09\u201c \u7684\u5b57\u6837\u3002 \u672c\u9898\u662f\u8981 \u5904\u7406\u5b8c\u8bf7\u6c42 \uff0c\u6240\u4ee5\u9009\u62e9 \u201d\u524d\u201c \u4f5c\u4e3a\u8981\u7d20\u3002 \u7136\u540e\u8bbe\u8ba1 DP \u72b6\u6001\u7684\u51b3\u7b56\u4fe1\u606f\u7ef4\u5ea6\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u6700\u7ec8 DP \u72b6\u6001\u6240\u8868\u793a\u7684\u4e1c\u897f\u5e94\u5f53\u548c \u201d\u82b1\u8d39\u201c \u6709\u5173\uff0c\u4e14\u5c5e\u6027\u5e94\u4e3a\u6700\u5c0f\u503c\u3002 \u51b3\u7b56\u7ef4\u5ea6\u662f\u7528\u4e8e\u201d\u51b3\u5b9a/\u786e\u5b9a\u201c DP \u72b6\u6001\u6700\u7ec8\u8868\u793a\u7684\u4e1c\u897f\u5e94\u5f53\u662f\u591a\u5c11\u7684\u3002 \u6240\u4ee5\u672c\u9898\u7684\u51b3\u7b56\u7ef4\u5ea6\u9700\u8981\u80fd\u591f \u51b3\u5b9a \u201d\u82b1\u8d39\u201c\u7684\u503c\u3002 \u800c\u53d1\u73b0\u672c\u9898\u7684\u201d\u82b1\u8d39\u201c\u662f\u7531 \u51fd\u6570 \\(c()\\) \u51b3\u5b9a\u7684\uff0c\u800c\u51fd\u6570 \\(c\\) \u7684 \u81ea\u53d8\u91cf \u5219\u662f\u201d \u5458\u5de5\u7684\u4f4d\u7f6e \u201c\u3002 \u6240\u4ee5\u53ef\u4ee5\u77e5\u9053\uff0cDP \u72b6\u6001\u7684\u51b3\u7b56\u4fe1\u606f\u7ef4\u5ea6\u5e94\u5f53\u542b\u6709 \u201d\u5458\u5de5\u7684\u4f4d\u7f6e\u201c \u8fd9\u4e00\u8981\u7d20\u3002 \u6211\u4eec\u5c06\u4e09\u4e2a\u5458\u5de5\u6240\u5904\u7684\u4f4d\u7f6e\u90fd\u8bbe\u8ba1\u8fdb\u72b6\u6001\uff0c\u56e0\u4e3a\u65e0\u540e\u6548\u6027\u5df2\u7ecf\u7531\u9636\u6bb5\u4fdd\u8bc1\uff0c\u6240\u4ee5\u201d\u4f4d\u7f6e\u201c\u8fd9\u4e00\u72b6\u6001\u4e0d\u9700\u8981\u4ece\u5c0f\u5230\u5927\u987a\u5e8f\u8f6c\u79fb\u3002 \u90a3\u4e48\u8bbe\u8ba1\u51fa DP \u72b6\u6001\uff1a \u8bbe \\(dp_{i,x,y,z}\\) \u8868\u793a \u5904\u7406\u5b8c \u524d \\(i\\) \u4e2a\u8bf7\u6c42\uff0c\u5458\u5de5 \\(1,2,3\\) \u5206\u522b\u5728\u4f4d\u7f6e \\(x,y,z\\) \u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u82b1\u8d39\u7684\u6700\u5c0f\u503c\u3002 \u7136\u540e\u8f6c\u79fb\u65b9\u7a0b\u5c31\u9700\u8981\u6839\u636e\u51b3\u7b56\u4fe1\u606f\u7ef4\u5ea6\u548c\u4ee3\u4ef7\u51fd\u6570\u6765\u8bbe\u8ba1\u3002 \u5e76\u4e14\uff0c\u56e0\u4e3a\u9898\u76ee\u4e2d\u63d0\u5230\uff1a \u4e0d\u5141\u8bb8\u5728\u540c\u6837\u7684\u4f4d\u7f6e\u51fa\u73b0\u4e24\u4e2a\u5458\u5de5 \u6240\u4ee5\u8f6c\u79fb\u65f6\u8fd8\u8981\u4fdd\u8bc1\u72b6\u6001\u7684\u5408\u6cd5\u6027\uff0c\u5373 \\(x\\not=y\\not=z\\) \u3002 \u4f46\u662f\u8fd9\u4e2a\u65b9\u7a0b\u5fc5\u7136\u65e0\u6cd5\u901a\u8fc7\u6240\u6709\u6570\u636e\uff0c\u56e0\u4e3a\u7a7a\u95f4\u5f00\u9500\u592a\u5927\u4e86\uff08 \\(3000 \\times 200 \\times 200 \\times 200\\) \uff09\u3002 \u6240\u4ee5\u6211\u4eec\u8981\u5728\u9898\u76ee\u8981\u7d20\u4e2d\u5bfb\u627e\u80fd\u591f\u51cf\u5c11\u7a7a\u95f4\u5f00\u9500\u7684\u8981\u7d20\u3002 \u4f46\u662f\u53d1\u73b0\u6211\u4eec\u8981\u60f3\u8f6c\u79fb\uff0c\u5c31\u5fc5\u987b\u540c\u65f6\u77e5\u9053\u4e09\u4e2a\u4eba\u7684\u4f4d\u7f6e\u3002 \u6240\u4ee5\u6b64\u5904\u8003\u8651\u7684\u662f \u901a\u8fc7\u66f4\u5c11\u7684\u4fe1\u606f\u53ef\u4ee5\u63a8\u51fa\u5b8c\u6574\u7684\u4fe1\u606f \u7684\u4f18\u5316\u3002 \u4e5f\u5c31\u662f\u8981\u60f3\u529e\u6cd5\u53ea\u7528\u4e00\u4e2a\u4eba\u6216\u8005\u4e24\u4e2a\u4eba\u7684\u4f4d\u7f6e\u786e\u5b9a\u4e09\u4e2a\u4eba\u7684\u4f4d\u7f6e\u3002 \u53d1\u73b0\u9898\u76ee\u4e2d\u8bf4\uff1a \u4e14\u8fc7\u7a0b\u4e2d\u4e0d\u80fd\u53bb\u5176\u4ed6\u989d\u5916\u7684\u4f4d\u7f6e \u90a3\u4e48\u4f18\u5316\u65b9\u5f0f\u5c31\u660e\u4e86\u4e86\uff0c\u5229\u7528\u53e6\u5916\u4e24\u4e2a\u4eba\u7684\u4f4d\u7f6e \\(x,y\\) \uff0c\u548c\u6700\u540e\u5904\u7406\u7684\u8bf7\u6c42\u4f4d\u7f6e\uff08 \\(p_{i}\\) \uff09\uff0c\u63a8\u51fa\u5904\u7406\u7b2c \\(i\\) \u4e2a\u8bf7\u6c42\u7684\u5458\u5de5\u7684\u4f4d\u7f6e \\(z=p_i\\) \u5373\u53ef\u3002 \u6240\u4ee5\u53ef\u4ee5\u5199\u51fa Code 1 2 3 4 5 6 7 8 9 10 11 12 memset ( dp , 0x3f , sizeof dp ); dp [ 0 ][ 1 ][ 2 ] = 0 , p [ 0 ] = 3 ; for ( int i = 0 ; i <= n ; ++ i ) { for ( int x = 1 ; x <= l ; ++ x ) { for ( int y = 1 ; y <= l ; ++ y ) { if ( x == y || x == p [ i ] || y == p [ i ]) continue ; dp [ i + 1 ][ x ][ y ] = min ( dp [ i + 1 ][ x ][ y ], dp [ i ][ x ][ y ] + c [ p [ i ]][ p [ i + 1 ]]); dp [ i + 1 ][ p [ i ]][ y ] = min ( dp [ i + 1 ][ p [ i ]][ y ], dp [ i ][ x ][ y ] + c [ x ][ p [ i + 1 ]]); dp [ i + 1 ][ x ][ p [ i ]] = min ( dp [ i + 1 ][ x ][ p [ i ]], dp [ i ][ x ][ y ] + c [ y ][ p [ i + 1 ]]); } } } \u72b6\u6001\u7684\u521d\u59cb\u5316\u4e5f\u662f\u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u95ee\u9898\u3002 \u4e00\u822c\u6765\u8bf4\u90fd\u9700\u8981 \u6839\u636e\u9898\u76ee\u8981\u6c42 \u521d\u59cb\u5316\u6240\u6709\u7684\u72b6\u6001\uff0c\u7136\u540e\u5355\u72ec\u7ed9\u7c7b\u4f3c \"0\" \u8fd9\u79cd\u8fb9\u754c\u72b6\u6001\u8d4b\u503c\u3002 \u6bd4\u5982\u672c\u9898\uff0c\u56e0\u4e3a\u6c42\u7684\u662f\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u81ea\u7136\u53ef\u4ee5\u60f3\u5230\u7ed9\u6240\u6709 DP \u503c\u8d4b\u503c\u4e3a \\(+\\infty\\) \u3002 \u4f46\u662f\u5982\u679c\u76f4\u63a5\u8d4b\u503c\u4e4b\u540e\u4ec0\u4e48\u90fd\u4e0d\u5e72\uff0c\u90a3\u6240\u6709\u7684 DP \u503c\u90fd\u4e0d\u4f1a\u88ab\u66f4\u65b0\u3002 \u6240\u4ee5\u6211\u4eec\u8f6c\u79fb\u7684\u65f6\u5019\u8981\u8ba9 \\(dp_{0}\\) \u8fd9\u79cd\u72b6\u6001\u6d3e\u4e0a\u7528\u573a\uff0c\u4e00\u822c\u6765\u8bf4\u8fd9\u79cd\u72b6\u6001\u90fd\u4f1a\u8bbe\u8ba1\u4e3a \\(0\\) \uff0c\u4fbf\u4e8e\u8f6c\u79fb\u3002 \u672c\u9898\u8bf4\uff0c\u521d\u59cb\u4e09\u4e2a\u5458\u5de5\u5206\u522b\u5728 \\(1,2,3\\) \uff0c\u90a3\u4e48\u65e0\u4f18\u5316\u7684\u72b6\u6001\u4e0b\uff0c\u5c31\u9700\u8981\u4ee4 \\(dp_{0,1,2,3} = 0\\) \u3002 \u4f46\u662f\u5f53\u524d\u5df2\u7ecf\u4f18\u5316\u4e86\uff0c\u7b2c\u4e09\u4e2a\u5458\u5de5\u7684\u4f4d\u7f6e\u662f\u8981\u63a8\u51fa\u6765\u7684\uff0c\u90a3\u5c31\u5047\u8bbe\u6700\u5f00\u59cb\u6709\u4e00\u4e2a \\(0\\) \u53f7\u8bf7\u6c42\uff0c \u8fd9\u4e2a\u8bf7\u6c42\u7531 \\(3\\) \u53f7\u5458\u5de5\u5b8c\u6210\uff0c\u4e14\u5b83\u7684\u4f4d\u7f6e\u662f \\(p_0 =3\\) \u3002 \u540c\u65f6\u4ee4 \\(dp_{0,1,2}=0\\) \u5373\u53ef\u5b8c\u6210\u521d\u59cb\u5316\u3002 \u5f53\u7136\uff0c\u5faa\u73af\u65f6\u4e0d\u8981\u5fd8\u8bb0\u4ee4 \\(i = 0\\) \uff0c\u8981\u4e0d\u7136\u521d\u59cb\u5316\u90fd\u6ca1\u7528\u4e86\u3002 \u603b\u7ed3 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8bbe\u8ba1\u72b6\u6001\uff1a\u6293\u9898\u76ee\u8981\u7d20\uff0c\u6309\u7167\u201d\u9636\u6bb5->\u51b3\u7b56->\u610f\u4e49\u201c \u7684\u987a\u5e8f\u53bb\u51b3\u5b9a DP \u72b6\u6001\u3002 \u5176\u4e2d\uff0c\u201d\u9636\u6bb5\u201c\u7531 DP \u79cd\u7c7b\u51b3\u5b9a\uff0c\u201d\u51b3\u7b56\u201c\u7531\u8ba1\u7b97\u82b1\u8d39\u7684\u51fd\u6570\u7684\u81ea\u53d8\u91cf\u51b3\u5b9a\uff0c\u201d\u610f\u4e49\u201c\u7531\u9898\u76ee\u8981\u6c42\u51b3\u5b9a\u3002 \u8bbe\u8ba1\u65b9\u7a0b\uff1a\u6839\u636e\u72b6\u6001\u8f6c\u79fb\uff0c\u6ce8\u610f\u65e0\u540e\u6548\u6027\uff0c\u5408\u6cd5\u6027\uff0c\u53ef\u884c\u6027\u3002 \u72b6\u6001\u521d\u59cb\u5316\uff1a\u6839\u636e\u8981\u6c42\uff0c\u5355\u72ec\u5904\u7406\u8fb9\u754c\u3002","title":"\u5982\u4f55\u8bbe\u8ba1\u72b6\u6001 & \u65b9\u7a0b"},{"location":"algor/dp/basic/how-to-think/#_1","text":"\u6700\u91cd\u8981\u7684\u662f\u63d0\u53d6\u51fa\u9898\u76ee\u4e2d\u7684\u6240\u6709\u8981\u7d20\uff0c\u5e76\u5c3d\u53ef\u80fd\u7684\u5c06\u5176\u8f6c\u5316\u4e3a\u72b6\u6001\u7684\u4fe1\u606f\u7ef4\u5ea6\u6216\u8005\u72b6\u6001\u6240\u8868\u793a\u7684\u4fe1\u606f\u3002 \u5c31\u662f\u672c\u7740\u201c\u95ee\u5565\u8bbe\u5565\u201d\u7684\u7406\u5ff5\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff1a \u4e00\u4e2a\u516c\u53f8\u6709\u4e09\u4e2a\u79fb\u52a8\u670d\u52a1\u5458\uff0c\u6700\u521d\u5206\u522b\u5728\u4f4d\u7f6e \\(1\uff0c2\uff0c3\\) \u5904\u3002 \u5982\u679c\u67d0\u4e2a\u4f4d\u7f6e\uff08\u7528\u4e00\u4e2a\u6574\u6570\u8868\u793a\uff09\u6709\u4e00\u4e2a\u8bf7\u6c42\uff0c\u90a3\u4e48\u516c\u53f8\u5fc5\u987b\u6307\u6d3e\u67d0\u540d\u5458\u5de5\u8d76\u5230\u90a3\u4e2a\u5730\u65b9\u53bb\u3002 \u67d0\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u5458\u5de5\u80fd\u79fb\u52a8\uff0c\u4e14\u4e0d\u5141\u8bb8\u5728\u540c\u6837\u7684\u4f4d\u7f6e\u51fa\u73b0\u4e24\u4e2a\u5458\u5de5\u3002 \u4ece \\(p\\) \u5230 \\(q\\) \u79fb\u52a8\u4e00\u4e2a\u5458\u5de5\uff0c\u9700\u8981\u82b1\u8d39 \\(c(p,q)\\) \u3002 \u8fd9\u4e2a\u51fd\u6570\u4e0d\u4e00\u5b9a\u5bf9\u79f0\uff0c\u4f46\u4fdd\u8bc1 \\(c(p,p)=0\\) \u3002 \u7ed9\u51fa \\(N\\) \u4e2a\u8bf7\u6c42\uff0c\u8bf7\u6c42\u53d1\u751f\u7684\u4f4d\u7f6e\u5206\u522b\u4e3a \\(p_1 \\sim p_N\\) \u3002 \u516c\u53f8\u5fc5\u987b\u6309\u987a\u5e8f\u4f9d\u6b21\u6ee1\u8db3\u6240\u6709\u8bf7\u6c42\uff0c\u4e14\u8fc7\u7a0b\u4e2d\u4e0d\u80fd\u53bb\u5176\u4ed6\u989d\u5916\u7684\u4f4d\u7f6e\uff0c\u76ee\u6807\u662f\u6700\u5c0f\u5316\u516c\u53f8\u82b1\u8d39\uff0c\u8bf7\u4f60\u5e2e\u5fd9\u8ba1\u7b97\u8fd9\u4e2a\u6700\u5c0f\u82b1\u8d39\u3002 \\(1\\le L \\le 200, 1\\le N \\le 3000\\) \u3002 \u9996\u5148\u627e DP \u7684\u201d\u9636\u6bb5\u201c\uff0c\u4e5f\u5c31\u662f\u6700\u5916\u5c42\u5faa\u73af\u5e94\u8be5\u662f\u7531\u4ec0\u4e48\u51b3\u5b9a\u7684\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u662f\u4e00\u4e2a\u7ebf\u6027 DP \u95ee\u9898\uff0c\u90a3\u4e48\u8981\u627e\u7684\u5c31\u662f\u201c\u6309\u987a\u5e8f\u6210\u4e00\u6761\u7ebf\u201c\u7684\u8981\u7d20\u3002 \uff08\u6811\u5f62 DP \u5c31\u662f\u627e\u4ee5 xxx \u4e3a\u6839\u7684\u5b50\u6811\uff0c\u533a\u95f4 DP \u662f\u627e\u5212\u5206\u548c\u533a\u95f4\u957f\u5ea6\uff09 \u4ed4\u7ec6\u9605\u8bfb\u80fd\u53d1\u73b0\uff1a \u987a\u5e8f\u4f9d\u6b21\u6ee1\u8db3\u6240\u6709\u8bf7\u6c42 \u6240\u4ee5\u201d\u8bf7\u6c42\u201c\u5c31\u6784\u6210\u4e86 DP \u72b6\u6001\u4fe1\u606f\u7ef4\u5ea6\u7684\u201d\u9636\u6bb5\u201c\u8fd9\u4e00\u7ef4\u3002 \u7136\u540e\u6240\u4ee5\u53ef\u4ee5\u5148\u8bbe\u8ba1\u51fa\u4e00\u7ef4\u72b6\u6001\uff1a \\(dp_i\\) \u8868\u793a\u5904\u7406 \u524d \\(i\\) \u4e2a\u8bf7\u6c42\uff0c\u4ec0\u4e48\u4ec0\u4e48\u4e1c\u897f\u3002 \u9636\u6bb5\u7c7b\u7684\u4fe1\u606f\u4e00\u822c\u90fd\u5e26\u6709 \u201d\u524d\uff08 \\(i\\) \u4e2a\uff09\uff0c\u5f53\u524d\uff08\u7b2c \\(i\\) \u4e2a\uff09\u201c \u7684\u5b57\u6837\u3002 \u672c\u9898\u662f\u8981 \u5904\u7406\u5b8c\u8bf7\u6c42 \uff0c\u6240\u4ee5\u9009\u62e9 \u201d\u524d\u201c \u4f5c\u4e3a\u8981\u7d20\u3002 \u7136\u540e\u8bbe\u8ba1 DP \u72b6\u6001\u7684\u51b3\u7b56\u4fe1\u606f\u7ef4\u5ea6\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u6700\u7ec8 DP \u72b6\u6001\u6240\u8868\u793a\u7684\u4e1c\u897f\u5e94\u5f53\u548c \u201d\u82b1\u8d39\u201c \u6709\u5173\uff0c\u4e14\u5c5e\u6027\u5e94\u4e3a\u6700\u5c0f\u503c\u3002 \u51b3\u7b56\u7ef4\u5ea6\u662f\u7528\u4e8e\u201d\u51b3\u5b9a/\u786e\u5b9a\u201c DP \u72b6\u6001\u6700\u7ec8\u8868\u793a\u7684\u4e1c\u897f\u5e94\u5f53\u662f\u591a\u5c11\u7684\u3002 \u6240\u4ee5\u672c\u9898\u7684\u51b3\u7b56\u7ef4\u5ea6\u9700\u8981\u80fd\u591f \u51b3\u5b9a \u201d\u82b1\u8d39\u201c\u7684\u503c\u3002 \u800c\u53d1\u73b0\u672c\u9898\u7684\u201d\u82b1\u8d39\u201c\u662f\u7531 \u51fd\u6570 \\(c()\\) \u51b3\u5b9a\u7684\uff0c\u800c\u51fd\u6570 \\(c\\) \u7684 \u81ea\u53d8\u91cf \u5219\u662f\u201d \u5458\u5de5\u7684\u4f4d\u7f6e \u201c\u3002 \u6240\u4ee5\u53ef\u4ee5\u77e5\u9053\uff0cDP \u72b6\u6001\u7684\u51b3\u7b56\u4fe1\u606f\u7ef4\u5ea6\u5e94\u5f53\u542b\u6709 \u201d\u5458\u5de5\u7684\u4f4d\u7f6e\u201c \u8fd9\u4e00\u8981\u7d20\u3002 \u6211\u4eec\u5c06\u4e09\u4e2a\u5458\u5de5\u6240\u5904\u7684\u4f4d\u7f6e\u90fd\u8bbe\u8ba1\u8fdb\u72b6\u6001\uff0c\u56e0\u4e3a\u65e0\u540e\u6548\u6027\u5df2\u7ecf\u7531\u9636\u6bb5\u4fdd\u8bc1\uff0c\u6240\u4ee5\u201d\u4f4d\u7f6e\u201c\u8fd9\u4e00\u72b6\u6001\u4e0d\u9700\u8981\u4ece\u5c0f\u5230\u5927\u987a\u5e8f\u8f6c\u79fb\u3002 \u90a3\u4e48\u8bbe\u8ba1\u51fa DP \u72b6\u6001\uff1a \u8bbe \\(dp_{i,x,y,z}\\) \u8868\u793a \u5904\u7406\u5b8c \u524d \\(i\\) \u4e2a\u8bf7\u6c42\uff0c\u5458\u5de5 \\(1,2,3\\) \u5206\u522b\u5728\u4f4d\u7f6e \\(x,y,z\\) \u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u82b1\u8d39\u7684\u6700\u5c0f\u503c\u3002 \u7136\u540e\u8f6c\u79fb\u65b9\u7a0b\u5c31\u9700\u8981\u6839\u636e\u51b3\u7b56\u4fe1\u606f\u7ef4\u5ea6\u548c\u4ee3\u4ef7\u51fd\u6570\u6765\u8bbe\u8ba1\u3002 \u5e76\u4e14\uff0c\u56e0\u4e3a\u9898\u76ee\u4e2d\u63d0\u5230\uff1a \u4e0d\u5141\u8bb8\u5728\u540c\u6837\u7684\u4f4d\u7f6e\u51fa\u73b0\u4e24\u4e2a\u5458\u5de5 \u6240\u4ee5\u8f6c\u79fb\u65f6\u8fd8\u8981\u4fdd\u8bc1\u72b6\u6001\u7684\u5408\u6cd5\u6027\uff0c\u5373 \\(x\\not=y\\not=z\\) \u3002 \u4f46\u662f\u8fd9\u4e2a\u65b9\u7a0b\u5fc5\u7136\u65e0\u6cd5\u901a\u8fc7\u6240\u6709\u6570\u636e\uff0c\u56e0\u4e3a\u7a7a\u95f4\u5f00\u9500\u592a\u5927\u4e86\uff08 \\(3000 \\times 200 \\times 200 \\times 200\\) \uff09\u3002 \u6240\u4ee5\u6211\u4eec\u8981\u5728\u9898\u76ee\u8981\u7d20\u4e2d\u5bfb\u627e\u80fd\u591f\u51cf\u5c11\u7a7a\u95f4\u5f00\u9500\u7684\u8981\u7d20\u3002 \u4f46\u662f\u53d1\u73b0\u6211\u4eec\u8981\u60f3\u8f6c\u79fb\uff0c\u5c31\u5fc5\u987b\u540c\u65f6\u77e5\u9053\u4e09\u4e2a\u4eba\u7684\u4f4d\u7f6e\u3002 \u6240\u4ee5\u6b64\u5904\u8003\u8651\u7684\u662f \u901a\u8fc7\u66f4\u5c11\u7684\u4fe1\u606f\u53ef\u4ee5\u63a8\u51fa\u5b8c\u6574\u7684\u4fe1\u606f \u7684\u4f18\u5316\u3002 \u4e5f\u5c31\u662f\u8981\u60f3\u529e\u6cd5\u53ea\u7528\u4e00\u4e2a\u4eba\u6216\u8005\u4e24\u4e2a\u4eba\u7684\u4f4d\u7f6e\u786e\u5b9a\u4e09\u4e2a\u4eba\u7684\u4f4d\u7f6e\u3002 \u53d1\u73b0\u9898\u76ee\u4e2d\u8bf4\uff1a \u4e14\u8fc7\u7a0b\u4e2d\u4e0d\u80fd\u53bb\u5176\u4ed6\u989d\u5916\u7684\u4f4d\u7f6e \u90a3\u4e48\u4f18\u5316\u65b9\u5f0f\u5c31\u660e\u4e86\u4e86\uff0c\u5229\u7528\u53e6\u5916\u4e24\u4e2a\u4eba\u7684\u4f4d\u7f6e \\(x,y\\) \uff0c\u548c\u6700\u540e\u5904\u7406\u7684\u8bf7\u6c42\u4f4d\u7f6e\uff08 \\(p_{i}\\) \uff09\uff0c\u63a8\u51fa\u5904\u7406\u7b2c \\(i\\) \u4e2a\u8bf7\u6c42\u7684\u5458\u5de5\u7684\u4f4d\u7f6e \\(z=p_i\\) \u5373\u53ef\u3002 \u6240\u4ee5\u53ef\u4ee5\u5199\u51fa Code 1 2 3 4 5 6 7 8 9 10 11 12 memset ( dp , 0x3f , sizeof dp ); dp [ 0 ][ 1 ][ 2 ] = 0 , p [ 0 ] = 3 ; for ( int i = 0 ; i <= n ; ++ i ) { for ( int x = 1 ; x <= l ; ++ x ) { for ( int y = 1 ; y <= l ; ++ y ) { if ( x == y || x == p [ i ] || y == p [ i ]) continue ; dp [ i + 1 ][ x ][ y ] = min ( dp [ i + 1 ][ x ][ y ], dp [ i ][ x ][ y ] + c [ p [ i ]][ p [ i + 1 ]]); dp [ i + 1 ][ p [ i ]][ y ] = min ( dp [ i + 1 ][ p [ i ]][ y ], dp [ i ][ x ][ y ] + c [ x ][ p [ i + 1 ]]); dp [ i + 1 ][ x ][ p [ i ]] = min ( dp [ i + 1 ][ x ][ p [ i ]], dp [ i ][ x ][ y ] + c [ y ][ p [ i + 1 ]]); } } } \u72b6\u6001\u7684\u521d\u59cb\u5316\u4e5f\u662f\u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u95ee\u9898\u3002 \u4e00\u822c\u6765\u8bf4\u90fd\u9700\u8981 \u6839\u636e\u9898\u76ee\u8981\u6c42 \u521d\u59cb\u5316\u6240\u6709\u7684\u72b6\u6001\uff0c\u7136\u540e\u5355\u72ec\u7ed9\u7c7b\u4f3c \"0\" \u8fd9\u79cd\u8fb9\u754c\u72b6\u6001\u8d4b\u503c\u3002 \u6bd4\u5982\u672c\u9898\uff0c\u56e0\u4e3a\u6c42\u7684\u662f\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u81ea\u7136\u53ef\u4ee5\u60f3\u5230\u7ed9\u6240\u6709 DP \u503c\u8d4b\u503c\u4e3a \\(+\\infty\\) \u3002 \u4f46\u662f\u5982\u679c\u76f4\u63a5\u8d4b\u503c\u4e4b\u540e\u4ec0\u4e48\u90fd\u4e0d\u5e72\uff0c\u90a3\u6240\u6709\u7684 DP \u503c\u90fd\u4e0d\u4f1a\u88ab\u66f4\u65b0\u3002 \u6240\u4ee5\u6211\u4eec\u8f6c\u79fb\u7684\u65f6\u5019\u8981\u8ba9 \\(dp_{0}\\) \u8fd9\u79cd\u72b6\u6001\u6d3e\u4e0a\u7528\u573a\uff0c\u4e00\u822c\u6765\u8bf4\u8fd9\u79cd\u72b6\u6001\u90fd\u4f1a\u8bbe\u8ba1\u4e3a \\(0\\) \uff0c\u4fbf\u4e8e\u8f6c\u79fb\u3002 \u672c\u9898\u8bf4\uff0c\u521d\u59cb\u4e09\u4e2a\u5458\u5de5\u5206\u522b\u5728 \\(1,2,3\\) \uff0c\u90a3\u4e48\u65e0\u4f18\u5316\u7684\u72b6\u6001\u4e0b\uff0c\u5c31\u9700\u8981\u4ee4 \\(dp_{0,1,2,3} = 0\\) \u3002 \u4f46\u662f\u5f53\u524d\u5df2\u7ecf\u4f18\u5316\u4e86\uff0c\u7b2c\u4e09\u4e2a\u5458\u5de5\u7684\u4f4d\u7f6e\u662f\u8981\u63a8\u51fa\u6765\u7684\uff0c\u90a3\u5c31\u5047\u8bbe\u6700\u5f00\u59cb\u6709\u4e00\u4e2a \\(0\\) \u53f7\u8bf7\u6c42\uff0c \u8fd9\u4e2a\u8bf7\u6c42\u7531 \\(3\\) \u53f7\u5458\u5de5\u5b8c\u6210\uff0c\u4e14\u5b83\u7684\u4f4d\u7f6e\u662f \\(p_0 =3\\) \u3002 \u540c\u65f6\u4ee4 \\(dp_{0,1,2}=0\\) \u5373\u53ef\u5b8c\u6210\u521d\u59cb\u5316\u3002 \u5f53\u7136\uff0c\u5faa\u73af\u65f6\u4e0d\u8981\u5fd8\u8bb0\u4ee4 \\(i = 0\\) \uff0c\u8981\u4e0d\u7136\u521d\u59cb\u5316\u90fd\u6ca1\u7528\u4e86\u3002","title":"\u5206\u6790"},{"location":"algor/dp/basic/how-to-think/#_2","text":"\u8bbe\u8ba1\u72b6\u6001\uff1a\u6293\u9898\u76ee\u8981\u7d20\uff0c\u6309\u7167\u201d\u9636\u6bb5->\u51b3\u7b56->\u610f\u4e49\u201c \u7684\u987a\u5e8f\u53bb\u51b3\u5b9a DP \u72b6\u6001\u3002 \u5176\u4e2d\uff0c\u201d\u9636\u6bb5\u201c\u7531 DP \u79cd\u7c7b\u51b3\u5b9a\uff0c\u201d\u51b3\u7b56\u201c\u7531\u8ba1\u7b97\u82b1\u8d39\u7684\u51fd\u6570\u7684\u81ea\u53d8\u91cf\u51b3\u5b9a\uff0c\u201d\u610f\u4e49\u201c\u7531\u9898\u76ee\u8981\u6c42\u51b3\u5b9a\u3002 \u8bbe\u8ba1\u65b9\u7a0b\uff1a\u6839\u636e\u72b6\u6001\u8f6c\u79fb\uff0c\u6ce8\u610f\u65e0\u540e\u6548\u6027\uff0c\u5408\u6cd5\u6027\uff0c\u53ef\u884c\u6027\u3002 \u72b6\u6001\u521d\u59cb\u5316\uff1a\u6839\u636e\u8981\u6c42\uff0c\u5355\u72ec\u5904\u7406\u8fb9\u754c\u3002","title":"\u603b\u7ed3"},{"location":"algor/dp/basic/set-analytical-method/","text":"\u6982\u8ff0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u79cd\u65b9\u5f0f\u548c\u4e00\u822c DP \u5206\u6790\u65b9\u5f0f\u4e0d\u4e00\u6837\u7684\u5730\u65b9\u5728\u4e8e\uff0c \u8fd9\u79cd DP \u5206\u6790\u65b9\u5f0f\u628a DP \u7684 \u72b6\u6001\u7a7a\u95f4\u770b\u4f5c\u5168\u96c6 \uff0c\u4e00\u4e2a\u4e2a DP \u72b6\u6001\u770b\u4f5c\u4e00\u4e2a\u4e2a\u5c0f\u96c6\u5408\u3002 \u628a\u51b3\u7b56\u8f6c\u79fb\u53d8\u6210\u4e86 \u96c6\u5408\u7684\u5212\u5206 \uff0c\u4ee5\u8fbe\u5230 \u4e0d\u91cd\u4e0d\u6f0f \uff0c\u5e76\u628a DP \u72b6\u6001\u62c6\u5206\u4e3a\u4e86\u4e24\u79cd\u5c5e\u6027\u3002 \u7528\u4e09\u4e2a\u7ebf\u6027 DP \u7684\u7ecf\u5178\u6a21\u578b\u4f5c\u4f8b\u5b50\u8bf4\u660e\u3002 LIS \u95ee\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u6c42\u5b83\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \\(|a| \\le 3000\\) \u3002 \u672c\u7740\u95ee\u5565\u8bbe\u5565\u7684\u539f\u5219\uff0c\u6211\u4eec\u8bbe\u8ba1\u7684\u72b6\u6001\u9700\u8981\u5305\u542b\u8981\u7d20\uff1a\u201d\u4e0a\u5347\u81ea\u5e8f\u5217\uff0c\u6700\u957f\u201c\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u7528\u6765\u8bbe\u8ba1\u72b6\u6001\u7684 \u201d\u6807\u5fd7\u201c\u90fd\u662f \u201d\u5f53\u524d\uff0c\u6700\u540e\u201c\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u72b6\u6001\u4e00\u822c\u90fd\u4f1a\u8bbe\u8ba1\u6210\uff1a\u201c\u5f53\u524d\u72b6\u6001\u7684\u4ec0\u4e48\u4ec0\u4e48\u4fe1\u606f\uff0c\u6709\u4ec0\u4e48\u4ec0\u4e48\u5c5e\u6027\u201d\uff0c\u6216\u8005 \u201c\u6700\u540e\u4e00\u4e2a\u72b6\u6001\u7684\u4fe1\u606f\u662f\u4ec0\u4e48\u4ec0\u4e48\uff0c\u5c5e\u6027\u662f\u4ec0\u4e48\u4ec0\u4e48\u201d \u7684\u6837\u5b50\u3002 \u6240\u4ee5\uff0c\u8bbe \\(dp_{i}\\) \u8868\u793a \u6240\u6709 \u4ee5 \\(a_i\\) \u7ed3\u5c3e\u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u7ec4\u6210\u7684 \u96c6\u5408 \uff0c\u5c5e\u6027\u4e3a Max\u3002 \u90a3\u4e48\u5982\u4f55\u5904\u7406\u8f6c\u79fb\uff1f \u5c06 \\(dp_i\\) \u6240\u4ee3\u8868\u7684\u96c6\u5408\u5212\u5206\u4e3a\u591a\u4e2a\u5b50\u96c6\uff0c\u5e76\u4e14\u8fd9\u4e9b\u5b50\u96c6\u90fd\u53ef\u4ee5\u5229 \u7528\u4e00\u4e2a\u72b6\u6001\u6765\u8868\u793a \u3002 \u5212\u5206\u7684\u4f9d\u636e\u5219\u662f \u201c \u6700\u540e\u4e00\u4e2a\u4e0d\u540c\u7684\u70b9 \u201d\u3002 \u9996\u5148\u5199\u51fa \\(dp_i\\) \u4ee3\u8868\u7684\u96c6\u5408\u662f\u4ec0\u4e48\uff1a\u201c\u6240\u6709\u4ee5 \\(a_i\\) \u7ed3\u5c3e\u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u201d\u3002 \u628a \\(dp_i\\) \u8fd9\u4e2a\u96c6\u5408\u5305\u542b\u7684\u6240\u6709\u5b50\u5e8f\u5217\u5c55\u5f00\uff0c\u53ef\u4ee5\u53d1\u73b0\u4ed6\u4eec\u5168\u90e8\u957f\u6210\u8fd9\u6837\uff1a \\[ \\begin{matrix}\\dots & las_1 & a_i \\\\ \\dots & las_2 & a_i \\\\ \\dots & las_3 & a_i \\end{matrix} \\] \u5176\u4e2d \\(las\\) \u8868\u793a\u8fd9\u4e2a\u5b50\u5e8f\u5217\u7684\u5012\u6570\u7b2c\u4e8c\u4e2a\u5143\u7d20\u3002 \u53d1\u73b0 \u201c\u6700\u540e\u4e00\u4e2a\u4e0d\u540c\u7684\u70b9\u201d \u5c31\u662f\u8fd9\u4e9b\u5012\u6570\u7b2c\u4e8c\u4e2a\u5143\u7d20 \\(las\\) \uff0c\u56e0\u4e3a\u6240\u6709\u5b50\u5e8f\u5217\u7684\u5012\u6570\u7b2c\u4e00\u4e2a\u5143\u7d20\u90fd\u662f\u76f8\u540c\u7684\u3002 \u6240\u4ee5\u5c31\u4ee5\u8fd9\u4e9b \\(las\\) \u4f5c\u4e3a\u5212\u5206\u4f9d\u636e\uff0c\u53ef\u4ee5\u5c06\u96c6\u5408 \\(dp_i\\) \u5212\u5206\u5982\u4e0b\uff1a \u56fe\u4e2d\u6a59\u8272\u5b57\u4f53\u662f\u4ee3\u8868\u4e86\u8fd9\u4e2a\u5b50\u96c6\u7684\u72b6\u6001\uff0c\u7eff\u8272\u5b57\u4f53\u8bf4\u660e\u4e86\u8fd9\u4e2a\u5b50\u96c6\u4ee3\u8868\u4e86\u4ec0\u4e48\u3002 \u5212\u5206\u5b8c\u4e4b\u540e\uff0c\u89c2\u5bdf \\(dp_i\\) \u8fd9\u4e2a\u96c6\u5408\u5bf9\u5e94\u7684\u5c5e\u6027\uff0c\u662f \\(\\max\\) \uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5728\u6240\u6709\u5212\u5206\u51fa\u6765\u7684\u96c6\u5408\u5bf9\u5e94\u7684\u72b6\u6001\u5f53\u4e2d\u53d6\u6700\u5927\u503c\u3002 \u53ef\u4ee5\u5f97\u5230\u65b9\u7a0b\uff1a \\[ dp_{i} = \\max\\{dp_j\\} + 1 \\] \u4f46\u662f\u6ce8\u610f\u5230\u8fd9\u4e9b\u5212\u5206\u51fa\u6765\u7684\u96c6\u5408\u4e0d\u4e00\u5b9a\u90fd\u80fd\u591f\u8f6c\u79fb\u5230\u96c6\u5408\uff0c\u6bd4\u5982\u5b58\u5728\u4e00\u4e2a \\(a_j > a_i,j < i\\) \u7684\u9006\u5e8f\u5bf9\uff0c \u90a3\u4e48 \\(dp_j\\) \u8fd9\u4e2a\u96c6\u5408\u5c31\u4e0d\u53ef\u80fd\u8f6c\u79fb\u5230 \\(dp_i\\) \uff0c\u56e0\u4e3a \\(dp_j\\) \u4ee3\u8868\u4e86 \u201d\u6240\u6709\u4ee5 \\(a_j\\) \u7ed3\u5c3e\u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u6784\u6210\u7684\u96c6\u5408\u201c\u3002 \u800c\u8fd9\u4e2a\u96c6\u5408\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u5b50\u5e8f\u5217\u63d0\u51fa\u6765\uff0c\u5728\u540e\u9762\u63a5\u4e0a \\(a_i\\) \u540e\uff0c\u5b83\u90fd\u4e0d\u4f1a\u518d\u662f\u4e00\u4e2a\u4e0a\u5347\u5b50\u5e8f\u5217\u4e86\u3002 \u6240\u4ee5\u6211\u4eec\u8fd8\u9700\u8981\u5224\u65ad\u5212\u5206\u51fa\u6765\u7684\u96c6\u5408\u662f\u5426\u5408\u6cd5\uff0c\u65b9\u7a0b\u53d8\u4e3a\uff1a \\[ dp_i = \\max\\{dp_j\\} + 1,a_i > a_j \\] \u800c\u5212\u5206\u96c6\u5408\u7684\u65f6\u5019\u53d1\u73b0\uff0c \\(a_i\\) \u672c\u8eab\u4e5f\u80fd\u4f5c\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u51fa\u73b0\uff0c\u6240\u4ee5\u521d\u59cb\u5316\u7684\u65f6\u5019\u8981\u4ee4 \\(dp_i = 1\\) \u3002 \u65b9\u7a0b\u53d8\u4e3a\uff1a \\[ dp_i = \\max\\{dp_j + 1\\},a_i > a_j,dp_i =1(\\text{initially}) \\] \u628a \\(+1\\) \u653e\u8fdb \\(\\max\\) \u91cc\u662f\u4e3a\u4e86\u65b9\u4fbf\u8f6c\u79fb\u3002 \u6839\u636e\u5b9a\u4e49\uff0c\u7b54\u6848\u662f \\(\\max\\{dp_i\\}\\) \u3002 \u53ef\u4ee5\u5199\u51fa\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 for ( int i = 1 ; i <= n ; ++ i ) dp [ i ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j < i ; ++ j ) { if ( a [ i ] > a [ j ]) dp [ i ] = max ( dp [ i ], dp [ j ] + 1 ); } } int res = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { res = max ( res , dp [ i ]); } \u590d\u6742\u5ea6 \\(\\text{O}(n^2)\\) \uff0c\u6bcf\u6b21\u5212\u5206\u679a\u4e3e\u5b50\u96c6\u8f6c\u79fb\u6d88\u8017 \\(\\text{O}(n)\\) \uff0c\u679a\u4e3e\u4ee5\u6240\u6709\u70b9\u4f5c\u4e3a\u7ed3\u5c3e\u7684\u60c5\u51b5\u6d88\u8017 \\(\\text{O}(n)\\) \u3002 \u672c\u9898\u6240\u7ed9\u7684\u542f\u793a\uff1a DP \u7684\u672c\u8d28\u662f \u201d\u806a\u660e\u201c \u5730\u5212\u5206\u96c6\u5408\u3002 DP \u7684\u521d\u59cb\u5316\u8981\u6839\u636e\u72b6\u6001\u672c\u8eab\u7684\u5b9a\u4e49\u548c\u8f6c\u79fb\u9700\u6c42\u6765\u8bbe\u7f6e\u3002 DP \u5212\u5206\u7684\u91cd\u8981\u4f9d\u636e\u662f \u201d\u6700\u540e\u4e00\u4e2a\u4e0d\u540c\u70b9\u201c\uff0c\u601d\u8003\u65f6\u9700\u8981\u8003\u8651\u628a\u5f53\u524d\u96c6\u5408 \u5c55\u5f00 \u3002 \u5212\u5206\u51fa\u7684\u5b50\u96c6\u4e0d\u4e00\u5b9a\u90fd\u80fd\u7528\u6765\u8f6c\u79fb\uff0c\u8981\u8fdb\u884c\u53ef\u884c\u6027\u7684\u5224\u65ad\u3002 LCS \u95ee\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e24\u4e2a\u5e8f\u5217 \\(a\uff0cb\\) \uff0c\u6c42\u4ed6\u4eec\u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u3002 \\(|a|,|b| \\le 3000\\) \u3002 \u672c\u9898\u7684\u8981\u7d20\u662f \u201d\u516c\u5171\uff0c\u6700\u957f\u201c\u3002 \u8003\u8651\u5982\u4f55\u5904\u7406\u8fd9\u4e2a \u201d\u516c\u5171\u201c\uff0c\u53d1\u73b0\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\uff0c\u627e\u5230\u4e00\u7ec4 \\(i,j\\) \u4f7f\u5f97 \\(a_i = b_j\\) \uff0c\u7136\u540e\u8fdb\u884c\u8f6c\u79fb\u3002 \u6240\u4ee5\u8bbe \\(dp_{i,j}\\) \u8868\u793a\u7531 \\(a[1\\sim i],b[1 \\sim j]\\) \u6784\u6210\u7684\u6240\u6709\u516c\u5171\u5b50\u5e8f\u5217\uff0c\u5c5e\u6027\u4e3a \\(\\max\\) \u3002 \u53d1\u73b0\u96c6\u5408\u53ef\u4ee5\u5212\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff0c\u7b2c\u4e00\u4e2a\u90e8\u5206\u662f \\(a_i \\not = b_j\\) \u65f6\uff0c\u7531 \\(a[1 \\sim i],b[1\\sim j]\\) \u6784\u6210\u7684\u516c\u5171\u5b50\u5e8f\u5217\u3002 \u7b2c\u4e8c\u90e8\u5206\u662f\u5f53 \\(a_i = b_j\\) \u65f6\uff0c\u7531 \\(a[1 \\sim i-1],b[1\\sim j-1]\\) \u6784\u6210\u7684\u516c\u5171\u5b50\u5e8f\u5217\u3002 \u4e3a\u4ec0\u4e48\u662f\u7531 \\(a[1\\sim i-1],b[1 \\sim j-1]\\) \u6784\u6210\u7684\u5462\uff1f\u56e0\u4e3a\u6b64\u65f6 \\(a_i = b_j\\) \uff0c\u6240\u4ee5\u8fd9\u534a\u90e8\u5206\u6240\u4ee3\u8868\u7684\u96c6\u5408\u4e2d\u7684\u516c\u5171\u5b50\u5e8f\u5217\u90fd\u957f\u6210\u8fd9\u6837\uff1a \\[ \\begin{matrix}\\dots & ... & a_i/b_j \\\\ \\dots & ... & a_i/b_j \\\\ \\dots & ... & a_i/b_j\\end{matrix} \\] \u90a3\u4e48\u6b64\u65f6\u7684\u7b54\u6848\u5c31\u662f\u524d\u9762\u90e8\u5206\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c \\(+1\\) \uff0c\u800c\u524d\u9762\u90a3\u90e8\u5206\u957f\u5ea6\u7684\u6700\u5927\u503c\u5b9e\u9645\u4e0a\u5c31\u662f\u7531 \\(a[1\\sim i-1],b[1\\sim j-1]\\) \u6784\u6210\u7684\u6240\u6709\u516c\u5171\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u6700\u5927\u503c\uff0c\u96c6\u5408 \\(dp_{i-1,j-1}\\) \u5373\u53ef\u8868\u793a\u8fd9\u4e00\u90e8\u5206\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u8fd9\u90e8\u5206\u662f\u7531 \\(a[1\\sim i-1],b[1\\sim j-1]\\) \u6784\u6210\u7684\uff0c\u53ea\u662f\u8f6c\u79fb\u65f6 \\(a_i,b_j\\) \u4f1a\u6709\u8d21\u732e\u800c\u5df2\u3002 \u7136\u540e\u8003\u8651\u7b2c\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u529e\u6cd5\u5bf9\u5b83\u7528\u4e00\u4e2a\u72b6\u6001\u76f4\u63a5\u8868\u793a\uff0c\u6240\u4ee5\u518d\u6b21\u5bf9\u4ed6\u8fdb\u884c\u5212\u5206\u3002 \u56e0\u4e3a \\(a_i \\not= b_j\\) \uff0c\u6240\u4ee5\u6211\u4eec\u5206\u522b\u628a \\(a_i,b_j\\) \u8e22\u51fa\u53bb\uff0c\u7136\u540e\u8fdb\u884c\u8f6c\u79fb\u3002 \u90a3\u4e48\u7b2c\u4e00\u90e8\u5206\u5c31\u53ef\u4ee5\u5212\u5206\u6210 \\(dp_{i,j-1},dp_{i-1,j}\\) \u4e24\u4e2a\u5b50\u96c6\uff0c\u56e0\u4e3a \\(dp_{i,j}\\) \u7684\u5c5e\u6027\u662f \\(\\max\\) \uff0c\u800c\u8f6c\u79fb\u65f6 \\(a_i \\not= b_j\\) \uff0c\u4e0d\u80fd\u63d0\u4f9b\u8d21\u732e\uff0c\u6240\u4ee5\u76f4\u63a5\u8ba9 \\(dp_{i, j}\\) \u7ee7\u627f \\(\\max\\{dp_{i,j-1},dp_{i-1,j}\\}\\) \u5373\u53ef\u3002 \u5212\u5206\u5982\u4e0b\uff1a \u53ef\u4ee5\u5f97\u5230\u65b9\u7a0b\uff1a \\[ dp_{i,j} = \\begin{cases}\\max(dp_{i-1,j},dp_{i,j-1}) & a_i \\not= b_j\\\\ dp_{i-1,j-1} + 1 & a_i = b_j\\end{cases} \\] \u6839\u636e\u72b6\u6001\u5b9a\u4e49\uff0c \\(dp\\) \u5e94\u5f53\u5168\u90e8\u521d\u59cb\u5316\u4e3a \\(0\\) \uff0c\u7b54\u6848\u4e3a \\(dp_{n,n}\\) 1 2 3 4 5 6 7 8 9 10 11 12 13 memset ( dp , 0 , sizeof dp ); for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { if ( a [ i ] == b [ j ]) dp [ i ][ j ] = dp [ i - 1 ][ j - 1 ] + 1 ; else dp [ i ][ j ] = max ( dp [ i ][ j - 1 ], dp [ i - 1 ][ j ]); } } cout << dp [ n ][ n ] << endl ; // \u8fd9\u4e2a\u5199\u6cd5\u4fdd\u8bc1 |a| = |b| = n\u3002 \u590d\u6742\u5ea6 \\(\\text{O}(n^2)\\) \u3002 \u672c\u9898\u6240\u7ed9\u7684\u542f\u793a\uff1a \u5212\u5206\u540e\u7684\u8f6c\u79fb\u5b9e\u9645\u4e0a\u662f\u5229\u7528 \u201d\u5b50\u96c6\u201c \u548c \u201d\u5f53\u524d\u4fe1\u606f\u201c \u7684\u7ed3\u5408\u3002 \u5982\u679c\u5f53\u524d\u4fe1\u606f\u5360\u7528\u4e86\u96c6\u5408\u7684\u4e00\u90e8\u5206\uff0c\u5212\u5206\u65f6\u5e94\u5f53\u628a\u5b83\u5228\u6389\u3002 \u6570\u5b57\u4e09\u89d2\u5f62\u95ee\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e3a\u4e86\u65b9\u4fbf\u53d9\u8ff0\uff0c\u6b64\u5904\u6362\u6210\u4e86\u68cb\u76d8\u7c7b DP \u7684\u6a21\u677f\u3002 \u7ed9\u5b9a\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635\uff0c\u521d\u59cb\u4f60\u5728 \\((1,1)\\) \uff0c\u6bcf\u6b21\u53ef\u4ee5\u5f80\u4e0b\u6216\u8005\u5f80\u53f3\u8d70\u4e00\u6b65\u3002 \u95ee\u8d70\u5230 \\((n,m)\\) \u7684\u65b9\u6848\u6570\u3002 \u8bbe \\(dp_{i,j}\\) \u8868\u793a\u4ece \\((1,1)\\) \u8d70\u5230 \\((i,j)\\) \u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u6570\u91cf\uff08\u6ce8\u610f\u8fd9\u91cc\u53d8\u4e3a\u4e86\u6570\u91cf\uff09\u3002 \u8003\u8651\u5212\u5206\u96c6\u5408 \\(dp_{i,j}\\) \u3002 \u5c55\u5f00 \\(dp_{i,j}\\) \u4e2d\u7684\u6240\u6709\u65b9\u6848\uff0c\u53d1\u73b0\u4ed6\u4eec\u90fd\u957f\u8fd9\u6837\uff1a \\[ \\begin{matrix}(1,1) \\to \\dots \\to (x_1,y_1) \\to (i,j) \\\\ (1,1) \\to \\dots \\to (x_2,y_2) \\to (i,j)\\end{matrix} \\] \u53d1\u73b0 \u201d\u6700\u540e\u4e00\u4e2a\u4e0d\u540c\u70b9\u201c \u5c31\u662f \u201d\u4e0a\u4e00\u6b65\u201c \u6240\u5904\u7684\u4f4d\u7f6e \\((x,y)\\) \u3002 \u800c\u672c\u9898\u8981\u6c42\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\uff0c\u6240\u4ee5\u53ea\u6709\u4ece\u4e0a\u9762\u548c\u5de6\u9762\u8d70\u8fc7\u6765\u4e24\u79cd\u60c5\u51b5\u3002 \u6240\u4ee5\u96c6\u5408\u53ef\u4ee5\u5212\u5206\u6210 \\(dp_{i,j-1},dp_{i-1,j}\\) \u8fd9\u4e24\u90e8\u5206\u3002 \u53ef\u4ee5\u5217\u51fa\u65b9\u7a0b\uff1a \\[ dp_{i,j} = dp_{i,j} + (dp_{i-1,j} + dp_{i, j-1}) \\] \u5176\u4e2d\u6839\u636e\u72b6\u6001\u5b9a\u4e49\uff0c \\(dp_{1,1}\\) \u5e94\u5f53\u521d\u59cb\u5316\u4e3a \\(1\\) \uff0c\u5176\u5b83\u7684\u5e94\u5f53\u4e3a \\(0\\) \u3002 \u4f46\u662f\u8981\u6ce8\u610f\u5224\u65ad\u662f\u5426\u8d8a\u754c\uff0c\u6240\u4ee5\u6b64\u65f6\u53ef\u4ee5\u5229\u7528\u53e6\u4e00\u79cd DP \u65b9\u5f0f\uff0c\u987a\u63a8\u3002 \u4e5f\u5c31\u662f\u8003\u8651\u628a\u5f53\u524d\u96c6\u5408\u7684\u65b9\u6848\u6570\u52a0\u5230\u6240\u6709\u5212\u5206\u540e \u76f4\u63a5 \u542b\u6709\u5b83\u7684\u96c6\u5408\u7684\u65b9\u6848\u6570\u5f53\u4e2d\u3002 \u5f00\u5927\u6570\u7ec4\u540e\u5c31\u4e0d\u7528\u5224\u8fb9\u754c\u4e86\u3002 \u6240\u4ee5\u53ef\u4ee5\u5f97\u5230\u65b0\u7684\u65b9\u7a0b\uff1a \\[ dp_{i+1,j} = dp_{i+1,j}+dp_{i,j},dp_{i,j+1} = dp_{i,j+1} + dp_{i,j} \\] \u521d\u59cb\u5316\u4e0d\u53d8\u3002 \u53ef\u4ee5\u5199\u51fa\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 memset ( dp , 0 , sizeof dp ); dp [ 1 ][ 1 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= m ; ++ j ) { dp [ i + 1 ][ j ] += dp [ i ][ j ]; dp [ i ][ j + 1 ] += dp [ i ][ j ]; } } cout << dp [ n ][ m ] << endl ; \u672c\u9898\u6240\u7ed9\u7684\u542f\u793a\uff1a \u4e0d\u6b62\u53ef\u4ee5\u5212\u5206\u540e\u7528\u5b50\u96c6\u6765\u66f4\u65b0\u5f53\u524d\u96c6\u5408\uff0c\u4e5f\u53ef\u4ee5\u5212\u5206\u540e\u7528\u5f53\u524d\u96c6\u5408\u53bb\u66f4\u65b0\u8ba9\u5f53\u524d\u72b6\u6001\u4f5c\u4e3a\u5b50\u96c6\u7684\u96c6\u5408\u3002 DP \u7684\u5c5e\u6027\u4e0d\u6b62 \\(\\min,\\max\\) \uff0c\u8fd8\u6709\u6570\u91cf\uff0c\u671f\u671b\uff0c\u6982\u7387\u7b49\u3002","title":"\u96c6\u5408\u5f0f\u5206\u6790\u6cd5"},{"location":"algor/dp/basic/set-analytical-method/#_1","text":"\u8fd9\u79cd\u65b9\u5f0f\u548c\u4e00\u822c DP \u5206\u6790\u65b9\u5f0f\u4e0d\u4e00\u6837\u7684\u5730\u65b9\u5728\u4e8e\uff0c \u8fd9\u79cd DP \u5206\u6790\u65b9\u5f0f\u628a DP \u7684 \u72b6\u6001\u7a7a\u95f4\u770b\u4f5c\u5168\u96c6 \uff0c\u4e00\u4e2a\u4e2a DP \u72b6\u6001\u770b\u4f5c\u4e00\u4e2a\u4e2a\u5c0f\u96c6\u5408\u3002 \u628a\u51b3\u7b56\u8f6c\u79fb\u53d8\u6210\u4e86 \u96c6\u5408\u7684\u5212\u5206 \uff0c\u4ee5\u8fbe\u5230 \u4e0d\u91cd\u4e0d\u6f0f \uff0c\u5e76\u628a DP \u72b6\u6001\u62c6\u5206\u4e3a\u4e86\u4e24\u79cd\u5c5e\u6027\u3002 \u7528\u4e09\u4e2a\u7ebf\u6027 DP \u7684\u7ecf\u5178\u6a21\u578b\u4f5c\u4f8b\u5b50\u8bf4\u660e\u3002","title":"\u6982\u8ff0"},{"location":"algor/dp/basic/set-analytical-method/#lis","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u6c42\u5b83\u7684\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \\(|a| \\le 3000\\) \u3002 \u672c\u7740\u95ee\u5565\u8bbe\u5565\u7684\u539f\u5219\uff0c\u6211\u4eec\u8bbe\u8ba1\u7684\u72b6\u6001\u9700\u8981\u5305\u542b\u8981\u7d20\uff1a\u201d\u4e0a\u5347\u81ea\u5e8f\u5217\uff0c\u6700\u957f\u201c\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u7528\u6765\u8bbe\u8ba1\u72b6\u6001\u7684 \u201d\u6807\u5fd7\u201c\u90fd\u662f \u201d\u5f53\u524d\uff0c\u6700\u540e\u201c\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u72b6\u6001\u4e00\u822c\u90fd\u4f1a\u8bbe\u8ba1\u6210\uff1a\u201c\u5f53\u524d\u72b6\u6001\u7684\u4ec0\u4e48\u4ec0\u4e48\u4fe1\u606f\uff0c\u6709\u4ec0\u4e48\u4ec0\u4e48\u5c5e\u6027\u201d\uff0c\u6216\u8005 \u201c\u6700\u540e\u4e00\u4e2a\u72b6\u6001\u7684\u4fe1\u606f\u662f\u4ec0\u4e48\u4ec0\u4e48\uff0c\u5c5e\u6027\u662f\u4ec0\u4e48\u4ec0\u4e48\u201d \u7684\u6837\u5b50\u3002 \u6240\u4ee5\uff0c\u8bbe \\(dp_{i}\\) \u8868\u793a \u6240\u6709 \u4ee5 \\(a_i\\) \u7ed3\u5c3e\u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u7ec4\u6210\u7684 \u96c6\u5408 \uff0c\u5c5e\u6027\u4e3a Max\u3002 \u90a3\u4e48\u5982\u4f55\u5904\u7406\u8f6c\u79fb\uff1f \u5c06 \\(dp_i\\) \u6240\u4ee3\u8868\u7684\u96c6\u5408\u5212\u5206\u4e3a\u591a\u4e2a\u5b50\u96c6\uff0c\u5e76\u4e14\u8fd9\u4e9b\u5b50\u96c6\u90fd\u53ef\u4ee5\u5229 \u7528\u4e00\u4e2a\u72b6\u6001\u6765\u8868\u793a \u3002 \u5212\u5206\u7684\u4f9d\u636e\u5219\u662f \u201c \u6700\u540e\u4e00\u4e2a\u4e0d\u540c\u7684\u70b9 \u201d\u3002 \u9996\u5148\u5199\u51fa \\(dp_i\\) \u4ee3\u8868\u7684\u96c6\u5408\u662f\u4ec0\u4e48\uff1a\u201c\u6240\u6709\u4ee5 \\(a_i\\) \u7ed3\u5c3e\u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u201d\u3002 \u628a \\(dp_i\\) \u8fd9\u4e2a\u96c6\u5408\u5305\u542b\u7684\u6240\u6709\u5b50\u5e8f\u5217\u5c55\u5f00\uff0c\u53ef\u4ee5\u53d1\u73b0\u4ed6\u4eec\u5168\u90e8\u957f\u6210\u8fd9\u6837\uff1a \\[ \\begin{matrix}\\dots & las_1 & a_i \\\\ \\dots & las_2 & a_i \\\\ \\dots & las_3 & a_i \\end{matrix} \\] \u5176\u4e2d \\(las\\) \u8868\u793a\u8fd9\u4e2a\u5b50\u5e8f\u5217\u7684\u5012\u6570\u7b2c\u4e8c\u4e2a\u5143\u7d20\u3002 \u53d1\u73b0 \u201c\u6700\u540e\u4e00\u4e2a\u4e0d\u540c\u7684\u70b9\u201d \u5c31\u662f\u8fd9\u4e9b\u5012\u6570\u7b2c\u4e8c\u4e2a\u5143\u7d20 \\(las\\) \uff0c\u56e0\u4e3a\u6240\u6709\u5b50\u5e8f\u5217\u7684\u5012\u6570\u7b2c\u4e00\u4e2a\u5143\u7d20\u90fd\u662f\u76f8\u540c\u7684\u3002 \u6240\u4ee5\u5c31\u4ee5\u8fd9\u4e9b \\(las\\) \u4f5c\u4e3a\u5212\u5206\u4f9d\u636e\uff0c\u53ef\u4ee5\u5c06\u96c6\u5408 \\(dp_i\\) \u5212\u5206\u5982\u4e0b\uff1a \u56fe\u4e2d\u6a59\u8272\u5b57\u4f53\u662f\u4ee3\u8868\u4e86\u8fd9\u4e2a\u5b50\u96c6\u7684\u72b6\u6001\uff0c\u7eff\u8272\u5b57\u4f53\u8bf4\u660e\u4e86\u8fd9\u4e2a\u5b50\u96c6\u4ee3\u8868\u4e86\u4ec0\u4e48\u3002 \u5212\u5206\u5b8c\u4e4b\u540e\uff0c\u89c2\u5bdf \\(dp_i\\) \u8fd9\u4e2a\u96c6\u5408\u5bf9\u5e94\u7684\u5c5e\u6027\uff0c\u662f \\(\\max\\) \uff0c\u6240\u4ee5\u6211\u4eec\u8981\u5728\u6240\u6709\u5212\u5206\u51fa\u6765\u7684\u96c6\u5408\u5bf9\u5e94\u7684\u72b6\u6001\u5f53\u4e2d\u53d6\u6700\u5927\u503c\u3002 \u53ef\u4ee5\u5f97\u5230\u65b9\u7a0b\uff1a \\[ dp_{i} = \\max\\{dp_j\\} + 1 \\] \u4f46\u662f\u6ce8\u610f\u5230\u8fd9\u4e9b\u5212\u5206\u51fa\u6765\u7684\u96c6\u5408\u4e0d\u4e00\u5b9a\u90fd\u80fd\u591f\u8f6c\u79fb\u5230\u96c6\u5408\uff0c\u6bd4\u5982\u5b58\u5728\u4e00\u4e2a \\(a_j > a_i,j < i\\) \u7684\u9006\u5e8f\u5bf9\uff0c \u90a3\u4e48 \\(dp_j\\) \u8fd9\u4e2a\u96c6\u5408\u5c31\u4e0d\u53ef\u80fd\u8f6c\u79fb\u5230 \\(dp_i\\) \uff0c\u56e0\u4e3a \\(dp_j\\) \u4ee3\u8868\u4e86 \u201d\u6240\u6709\u4ee5 \\(a_j\\) \u7ed3\u5c3e\u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u6784\u6210\u7684\u96c6\u5408\u201c\u3002 \u800c\u8fd9\u4e2a\u96c6\u5408\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u5b50\u5e8f\u5217\u63d0\u51fa\u6765\uff0c\u5728\u540e\u9762\u63a5\u4e0a \\(a_i\\) \u540e\uff0c\u5b83\u90fd\u4e0d\u4f1a\u518d\u662f\u4e00\u4e2a\u4e0a\u5347\u5b50\u5e8f\u5217\u4e86\u3002 \u6240\u4ee5\u6211\u4eec\u8fd8\u9700\u8981\u5224\u65ad\u5212\u5206\u51fa\u6765\u7684\u96c6\u5408\u662f\u5426\u5408\u6cd5\uff0c\u65b9\u7a0b\u53d8\u4e3a\uff1a \\[ dp_i = \\max\\{dp_j\\} + 1,a_i > a_j \\] \u800c\u5212\u5206\u96c6\u5408\u7684\u65f6\u5019\u53d1\u73b0\uff0c \\(a_i\\) \u672c\u8eab\u4e5f\u80fd\u4f5c\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u4e0a\u5347\u5b50\u5e8f\u5217\u51fa\u73b0\uff0c\u6240\u4ee5\u521d\u59cb\u5316\u7684\u65f6\u5019\u8981\u4ee4 \\(dp_i = 1\\) \u3002 \u65b9\u7a0b\u53d8\u4e3a\uff1a \\[ dp_i = \\max\\{dp_j + 1\\},a_i > a_j,dp_i =1(\\text{initially}) \\] \u628a \\(+1\\) \u653e\u8fdb \\(\\max\\) \u91cc\u662f\u4e3a\u4e86\u65b9\u4fbf\u8f6c\u79fb\u3002 \u6839\u636e\u5b9a\u4e49\uff0c\u7b54\u6848\u662f \\(\\max\\{dp_i\\}\\) \u3002 \u53ef\u4ee5\u5199\u51fa\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 for ( int i = 1 ; i <= n ; ++ i ) dp [ i ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j < i ; ++ j ) { if ( a [ i ] > a [ j ]) dp [ i ] = max ( dp [ i ], dp [ j ] + 1 ); } } int res = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { res = max ( res , dp [ i ]); } \u590d\u6742\u5ea6 \\(\\text{O}(n^2)\\) \uff0c\u6bcf\u6b21\u5212\u5206\u679a\u4e3e\u5b50\u96c6\u8f6c\u79fb\u6d88\u8017 \\(\\text{O}(n)\\) \uff0c\u679a\u4e3e\u4ee5\u6240\u6709\u70b9\u4f5c\u4e3a\u7ed3\u5c3e\u7684\u60c5\u51b5\u6d88\u8017 \\(\\text{O}(n)\\) \u3002 \u672c\u9898\u6240\u7ed9\u7684\u542f\u793a\uff1a DP \u7684\u672c\u8d28\u662f \u201d\u806a\u660e\u201c \u5730\u5212\u5206\u96c6\u5408\u3002 DP \u7684\u521d\u59cb\u5316\u8981\u6839\u636e\u72b6\u6001\u672c\u8eab\u7684\u5b9a\u4e49\u548c\u8f6c\u79fb\u9700\u6c42\u6765\u8bbe\u7f6e\u3002 DP \u5212\u5206\u7684\u91cd\u8981\u4f9d\u636e\u662f \u201d\u6700\u540e\u4e00\u4e2a\u4e0d\u540c\u70b9\u201c\uff0c\u601d\u8003\u65f6\u9700\u8981\u8003\u8651\u628a\u5f53\u524d\u96c6\u5408 \u5c55\u5f00 \u3002 \u5212\u5206\u51fa\u7684\u5b50\u96c6\u4e0d\u4e00\u5b9a\u90fd\u80fd\u7528\u6765\u8f6c\u79fb\uff0c\u8981\u8fdb\u884c\u53ef\u884c\u6027\u7684\u5224\u65ad\u3002","title":"LIS \u95ee\u9898"},{"location":"algor/dp/basic/set-analytical-method/#lcs","text":"\u7ed9\u5b9a\u4e24\u4e2a\u5e8f\u5217 \\(a\uff0cb\\) \uff0c\u6c42\u4ed6\u4eec\u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u3002 \\(|a|,|b| \\le 3000\\) \u3002 \u672c\u9898\u7684\u8981\u7d20\u662f \u201d\u516c\u5171\uff0c\u6700\u957f\u201c\u3002 \u8003\u8651\u5982\u4f55\u5904\u7406\u8fd9\u4e2a \u201d\u516c\u5171\u201c\uff0c\u53d1\u73b0\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\uff0c\u627e\u5230\u4e00\u7ec4 \\(i,j\\) \u4f7f\u5f97 \\(a_i = b_j\\) \uff0c\u7136\u540e\u8fdb\u884c\u8f6c\u79fb\u3002 \u6240\u4ee5\u8bbe \\(dp_{i,j}\\) \u8868\u793a\u7531 \\(a[1\\sim i],b[1 \\sim j]\\) \u6784\u6210\u7684\u6240\u6709\u516c\u5171\u5b50\u5e8f\u5217\uff0c\u5c5e\u6027\u4e3a \\(\\max\\) \u3002 \u53d1\u73b0\u96c6\u5408\u53ef\u4ee5\u5212\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff0c\u7b2c\u4e00\u4e2a\u90e8\u5206\u662f \\(a_i \\not = b_j\\) \u65f6\uff0c\u7531 \\(a[1 \\sim i],b[1\\sim j]\\) \u6784\u6210\u7684\u516c\u5171\u5b50\u5e8f\u5217\u3002 \u7b2c\u4e8c\u90e8\u5206\u662f\u5f53 \\(a_i = b_j\\) \u65f6\uff0c\u7531 \\(a[1 \\sim i-1],b[1\\sim j-1]\\) \u6784\u6210\u7684\u516c\u5171\u5b50\u5e8f\u5217\u3002 \u4e3a\u4ec0\u4e48\u662f\u7531 \\(a[1\\sim i-1],b[1 \\sim j-1]\\) \u6784\u6210\u7684\u5462\uff1f\u56e0\u4e3a\u6b64\u65f6 \\(a_i = b_j\\) \uff0c\u6240\u4ee5\u8fd9\u534a\u90e8\u5206\u6240\u4ee3\u8868\u7684\u96c6\u5408\u4e2d\u7684\u516c\u5171\u5b50\u5e8f\u5217\u90fd\u957f\u6210\u8fd9\u6837\uff1a \\[ \\begin{matrix}\\dots & ... & a_i/b_j \\\\ \\dots & ... & a_i/b_j \\\\ \\dots & ... & a_i/b_j\\end{matrix} \\] \u90a3\u4e48\u6b64\u65f6\u7684\u7b54\u6848\u5c31\u662f\u524d\u9762\u90e8\u5206\u7684\u957f\u5ea6\u7684\u6700\u5927\u503c \\(+1\\) \uff0c\u800c\u524d\u9762\u90a3\u90e8\u5206\u957f\u5ea6\u7684\u6700\u5927\u503c\u5b9e\u9645\u4e0a\u5c31\u662f\u7531 \\(a[1\\sim i-1],b[1\\sim j-1]\\) \u6784\u6210\u7684\u6240\u6709\u516c\u5171\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u6700\u5927\u503c\uff0c\u96c6\u5408 \\(dp_{i-1,j-1}\\) \u5373\u53ef\u8868\u793a\u8fd9\u4e00\u90e8\u5206\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u8fd9\u90e8\u5206\u662f\u7531 \\(a[1\\sim i-1],b[1\\sim j-1]\\) \u6784\u6210\u7684\uff0c\u53ea\u662f\u8f6c\u79fb\u65f6 \\(a_i,b_j\\) \u4f1a\u6709\u8d21\u732e\u800c\u5df2\u3002 \u7136\u540e\u8003\u8651\u7b2c\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u529e\u6cd5\u5bf9\u5b83\u7528\u4e00\u4e2a\u72b6\u6001\u76f4\u63a5\u8868\u793a\uff0c\u6240\u4ee5\u518d\u6b21\u5bf9\u4ed6\u8fdb\u884c\u5212\u5206\u3002 \u56e0\u4e3a \\(a_i \\not= b_j\\) \uff0c\u6240\u4ee5\u6211\u4eec\u5206\u522b\u628a \\(a_i,b_j\\) \u8e22\u51fa\u53bb\uff0c\u7136\u540e\u8fdb\u884c\u8f6c\u79fb\u3002 \u90a3\u4e48\u7b2c\u4e00\u90e8\u5206\u5c31\u53ef\u4ee5\u5212\u5206\u6210 \\(dp_{i,j-1},dp_{i-1,j}\\) \u4e24\u4e2a\u5b50\u96c6\uff0c\u56e0\u4e3a \\(dp_{i,j}\\) \u7684\u5c5e\u6027\u662f \\(\\max\\) \uff0c\u800c\u8f6c\u79fb\u65f6 \\(a_i \\not= b_j\\) \uff0c\u4e0d\u80fd\u63d0\u4f9b\u8d21\u732e\uff0c\u6240\u4ee5\u76f4\u63a5\u8ba9 \\(dp_{i, j}\\) \u7ee7\u627f \\(\\max\\{dp_{i,j-1},dp_{i-1,j}\\}\\) \u5373\u53ef\u3002 \u5212\u5206\u5982\u4e0b\uff1a \u53ef\u4ee5\u5f97\u5230\u65b9\u7a0b\uff1a \\[ dp_{i,j} = \\begin{cases}\\max(dp_{i-1,j},dp_{i,j-1}) & a_i \\not= b_j\\\\ dp_{i-1,j-1} + 1 & a_i = b_j\\end{cases} \\] \u6839\u636e\u72b6\u6001\u5b9a\u4e49\uff0c \\(dp\\) \u5e94\u5f53\u5168\u90e8\u521d\u59cb\u5316\u4e3a \\(0\\) \uff0c\u7b54\u6848\u4e3a \\(dp_{n,n}\\) 1 2 3 4 5 6 7 8 9 10 11 12 13 memset ( dp , 0 , sizeof dp ); for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { if ( a [ i ] == b [ j ]) dp [ i ][ j ] = dp [ i - 1 ][ j - 1 ] + 1 ; else dp [ i ][ j ] = max ( dp [ i ][ j - 1 ], dp [ i - 1 ][ j ]); } } cout << dp [ n ][ n ] << endl ; // \u8fd9\u4e2a\u5199\u6cd5\u4fdd\u8bc1 |a| = |b| = n\u3002 \u590d\u6742\u5ea6 \\(\\text{O}(n^2)\\) \u3002 \u672c\u9898\u6240\u7ed9\u7684\u542f\u793a\uff1a \u5212\u5206\u540e\u7684\u8f6c\u79fb\u5b9e\u9645\u4e0a\u662f\u5229\u7528 \u201d\u5b50\u96c6\u201c \u548c \u201d\u5f53\u524d\u4fe1\u606f\u201c \u7684\u7ed3\u5408\u3002 \u5982\u679c\u5f53\u524d\u4fe1\u606f\u5360\u7528\u4e86\u96c6\u5408\u7684\u4e00\u90e8\u5206\uff0c\u5212\u5206\u65f6\u5e94\u5f53\u628a\u5b83\u5228\u6389\u3002","title":"LCS \u95ee\u9898"},{"location":"algor/dp/basic/set-analytical-method/#_2","text":"\u4e3a\u4e86\u65b9\u4fbf\u53d9\u8ff0\uff0c\u6b64\u5904\u6362\u6210\u4e86\u68cb\u76d8\u7c7b DP \u7684\u6a21\u677f\u3002 \u7ed9\u5b9a\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635\uff0c\u521d\u59cb\u4f60\u5728 \\((1,1)\\) \uff0c\u6bcf\u6b21\u53ef\u4ee5\u5f80\u4e0b\u6216\u8005\u5f80\u53f3\u8d70\u4e00\u6b65\u3002 \u95ee\u8d70\u5230 \\((n,m)\\) \u7684\u65b9\u6848\u6570\u3002 \u8bbe \\(dp_{i,j}\\) \u8868\u793a\u4ece \\((1,1)\\) \u8d70\u5230 \\((i,j)\\) \u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u6570\u91cf\uff08\u6ce8\u610f\u8fd9\u91cc\u53d8\u4e3a\u4e86\u6570\u91cf\uff09\u3002 \u8003\u8651\u5212\u5206\u96c6\u5408 \\(dp_{i,j}\\) \u3002 \u5c55\u5f00 \\(dp_{i,j}\\) \u4e2d\u7684\u6240\u6709\u65b9\u6848\uff0c\u53d1\u73b0\u4ed6\u4eec\u90fd\u957f\u8fd9\u6837\uff1a \\[ \\begin{matrix}(1,1) \\to \\dots \\to (x_1,y_1) \\to (i,j) \\\\ (1,1) \\to \\dots \\to (x_2,y_2) \\to (i,j)\\end{matrix} \\] \u53d1\u73b0 \u201d\u6700\u540e\u4e00\u4e2a\u4e0d\u540c\u70b9\u201c \u5c31\u662f \u201d\u4e0a\u4e00\u6b65\u201c \u6240\u5904\u7684\u4f4d\u7f6e \\((x,y)\\) \u3002 \u800c\u672c\u9898\u8981\u6c42\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\uff0c\u6240\u4ee5\u53ea\u6709\u4ece\u4e0a\u9762\u548c\u5de6\u9762\u8d70\u8fc7\u6765\u4e24\u79cd\u60c5\u51b5\u3002 \u6240\u4ee5\u96c6\u5408\u53ef\u4ee5\u5212\u5206\u6210 \\(dp_{i,j-1},dp_{i-1,j}\\) \u8fd9\u4e24\u90e8\u5206\u3002 \u53ef\u4ee5\u5217\u51fa\u65b9\u7a0b\uff1a \\[ dp_{i,j} = dp_{i,j} + (dp_{i-1,j} + dp_{i, j-1}) \\] \u5176\u4e2d\u6839\u636e\u72b6\u6001\u5b9a\u4e49\uff0c \\(dp_{1,1}\\) \u5e94\u5f53\u521d\u59cb\u5316\u4e3a \\(1\\) \uff0c\u5176\u5b83\u7684\u5e94\u5f53\u4e3a \\(0\\) \u3002 \u4f46\u662f\u8981\u6ce8\u610f\u5224\u65ad\u662f\u5426\u8d8a\u754c\uff0c\u6240\u4ee5\u6b64\u65f6\u53ef\u4ee5\u5229\u7528\u53e6\u4e00\u79cd DP \u65b9\u5f0f\uff0c\u987a\u63a8\u3002 \u4e5f\u5c31\u662f\u8003\u8651\u628a\u5f53\u524d\u96c6\u5408\u7684\u65b9\u6848\u6570\u52a0\u5230\u6240\u6709\u5212\u5206\u540e \u76f4\u63a5 \u542b\u6709\u5b83\u7684\u96c6\u5408\u7684\u65b9\u6848\u6570\u5f53\u4e2d\u3002 \u5f00\u5927\u6570\u7ec4\u540e\u5c31\u4e0d\u7528\u5224\u8fb9\u754c\u4e86\u3002 \u6240\u4ee5\u53ef\u4ee5\u5f97\u5230\u65b0\u7684\u65b9\u7a0b\uff1a \\[ dp_{i+1,j} = dp_{i+1,j}+dp_{i,j},dp_{i,j+1} = dp_{i,j+1} + dp_{i,j} \\] \u521d\u59cb\u5316\u4e0d\u53d8\u3002 \u53ef\u4ee5\u5199\u51fa\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 memset ( dp , 0 , sizeof dp ); dp [ 1 ][ 1 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= m ; ++ j ) { dp [ i + 1 ][ j ] += dp [ i ][ j ]; dp [ i ][ j + 1 ] += dp [ i ][ j ]; } } cout << dp [ n ][ m ] << endl ; \u672c\u9898\u6240\u7ed9\u7684\u542f\u793a\uff1a \u4e0d\u6b62\u53ef\u4ee5\u5212\u5206\u540e\u7528\u5b50\u96c6\u6765\u66f4\u65b0\u5f53\u524d\u96c6\u5408\uff0c\u4e5f\u53ef\u4ee5\u5212\u5206\u540e\u7528\u5f53\u524d\u96c6\u5408\u53bb\u66f4\u65b0\u8ba9\u5f53\u524d\u72b6\u6001\u4f5c\u4e3a\u5b50\u96c6\u7684\u96c6\u5408\u3002 DP \u7684\u5c5e\u6027\u4e0d\u6b62 \\(\\min,\\max\\) \uff0c\u8fd8\u6709\u6570\u91cf\uff0c\u671f\u671b\uff0c\u6982\u7387\u7b49\u3002","title":"\u6570\u5b57\u4e09\u89d2\u5f62\u95ee\u9898"},{"location":"algor/dp/opt/convex-optimize-old/","text":"\u6cdb\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e00\u7c7b\u95ee\u9898\u548c\u5355\u8c03\u961f\u5217\u4f18\u5316DP\u6709\u5171\u540c\u7684\u5730\u65b9\u3002 \u53ef\u4ee5\u7528\u7c7b\u4f3c\u7684\u601d\u60f3\u601d\u8003\u5176\u4e2d\u7684\u4e00\u90e8\u5206\u5185\u5bb9\u3002 \u8003\u8651\u5355\u8c03\u961f\u5217\u4f18\u5316DP\u91cc\u9762\u90a3\u4e2a 1D1D \u7684\u5f0f\u5b50\u3002 \\[f_{i}=\\min\\limits_{L(i)\\le j \\le R(i)}\\{f_j+val(i,j)\\}\\] \u5176\u4e2d \\(val(i,j)\\) \u662f\u5173\u4e8e \\(i,j\\) \u7684\u591a\u9879\u5f0f\u3002 \u5e76\u4e14\u53ef\u4ee5\u5206\u88c2\u4e3a\u4e24\u4e2a\u5206\u522b\u53ea\u548c \\(i,j\\) \u76f8\u5173\u7684\u90e8\u5206\u3002 \u4f46\u5982\u679c \\(val(i,j)\\) \u5f53\u4e2d\u6709 \u540c\u65f6\u548c \\(i,j\\) \u76f8\u5173\u7684\u90e8\u5206 \uff08\u4e58\u79ef\u548c\u505a\u9664\u6cd5\uff09\uff0c\u90a3\u4e48\u5355\u8c03\u961f\u5217\u4f18\u5316DP\u5c31\u4e0d\u518d\u9002\u7528\u3002 \u6b64\u65f6\u5c31\u9700\u8981\u4f7f\u7528\u659c\u7387\u4f18\u5316DP\u3002 \u800c\u51b3\u7b56\u96c6\u5408\u7684\u4e0a\u4e0b\u754c \\([L(i),R(i)]\\) \u7684\u53d8\u5316\u5219\u51b3\u5b9a\u4e86\u8f85\u52a9\u659c\u7387\u4f18\u5316\u4f7f\u7528\u7684\u7b97\u6cd5\u3002 \u5982\u679c\u51b3\u7b56\u96c6\u5408\u662f \u5355\u8c03\u53d8\u5316 \u7684\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 \u5355\u8c03\u961f\u5217 \u3002 \u5426\u5219\u9700\u8981\u6839\u636e\u60c5\u51b5\u4f7f\u7528 \u4e8c\u5206 \u6216\u8005 \u5e73\u8861\u6811 \uff0c\u8fd9\u91cc\u7684\u9009\u62e9\u5219\u662f\u53d6\u51b3\u4e8e\u51b3\u7b56\u96c6\u5408\u7684\u53d8\u5316\u662f\u5728 \u5934\u5c3e\u653e\u5165 \u8fd8\u662f\u5728 \u4efb\u610f\u4f4d\u7f6e\u63d2\u5165 \u3002 \u4f8b\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 \\(n\\) \u4e2a\u4efb\u52a1\u6392\u6210\u4e00\u4e2a\u5e8f\u5217\u5728\u4e00\u53f0\u673a\u5668\u4e0a\u7b49\u5f85\u5b8c\u6210\uff08\u987a\u5e8f\u4e0d\u5f97\u6539\u53d8\uff09\uff0c\u8fd9 \\(n\\) \u4e2a\u4efb\u52a1\u88ab\u5206\u6210\u82e5\u5e72\u6279\uff0c\u6bcf\u6279\u5305\u542b\u76f8\u90bb\u7684\u82e5\u5e72\u4efb\u52a1\u3002 \u4ece\u96f6\u65f6\u523b\u5f00\u59cb\uff0c\u8fd9\u4e9b\u4efb\u52a1\u88ab\u5206\u6279\u52a0\u5de5\uff0c\u7b2c \\(i\\) \u4e2a\u4efb\u52a1\u5355\u72ec\u5b8c\u6210\u6240\u9700\u7684\u65f6\u95f4\u4e3a \\(t_i\\) \u3002\u5728\u6bcf\u6279\u4efb\u52a1\u5f00\u59cb\u524d\uff0c\u673a\u5668\u9700\u8981\u542f\u52a8\u65f6\u95f4 \\(s\\) \uff0c\u800c\u5b8c\u6210\u8fd9\u6279\u4efb\u52a1\u6240\u9700\u7684\u65f6\u95f4\u662f\u5404\u4e2a\u4efb\u52a1\u9700\u8981\u65f6\u95f4\u7684\u603b\u548c\uff08\u540c\u4e00\u6279\u4efb\u52a1\u5c06\u5728\u540c\u4e00\u65f6\u523b\u5b8c\u6210\uff09\u3002 \u6bcf\u4e2a\u4efb\u52a1\u7684\u8d39\u7528\u662f\u5b83\u7684\u5b8c\u6210\u65f6\u523b\u4e58\u4ee5\u4e00\u4e2a\u8d39\u7528\u7cfb\u6570 \\(c_i\\) \u3002\u8bf7\u786e\u5b9a\u4e00\u4e2a\u5206\u7ec4\u65b9\u6848\uff0c\u4f7f\u5f97\u603b\u8d39\u7528\u6700\u5c0f\u3002 \u505a\u6cd51 - \u66b4\u529b \u03c8(\uff40\u2207\u00b4)\u03c8 \u4fdd\u8bc1 \\(n \\le 500,1\\le s \\le 50,1\\le t_i,c_i \\le 100\\) \u8003\u8651\u6700\u66b4\u529b\u7684\u65b9\u5f0f\uff0c\u8bbe \\(f_{i,j}\\) \u8868\u793a\u524d \\(i\\) \u4e2a\u4efb\u52a1\uff0c\u5206\u6210 \\(j\\) \u6279\u6267\u884c\u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u662f\u603b\u8d39\u7528\u6700\u5c0f\u3002 \u679a\u4e3e\u4e0a\u4e00\u6279\u4efb\u52a1\u7684\u6700\u540e\u4e00\u4e2a\u70b9\u5373\u53ef\u3002 \\(f_{i,j}=\\min\\limits_{0\\le k < i}\\{f_{k,j-1}+c[k+1\\sim i]\\times (t[k+1\\sim i]+s\\times j)\\}\\) \u5904\u7406\u524d\u7f00\u548c\u53ef\u4ee5\u505a\u5230 \\(\\text{O}(n^3)\\) \u505a\u6cd52 - \u8d39\u7528\u63d0\u524d\u8ba1\u7b97 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4fdd\u8bc1 \\(n\\le 5000,1\\le s \\le 50,1\\le t_i,c_i \\le 100\\) \u53d1\u73b0\u4e0a\u4e00\u4e2a\u65b9\u7a0b\u7684\u74f6\u9888\u5728\u4e8e \\(j\\) \uff0c\u9700\u8981\u77e5\u9053\u542f\u52a8\u4e86\u591a\u5c11\u6b21\uff0c\u56e0\u4e3a \\(s\\) \u9020\u6210\u7684\u8d21\u732e\u4f1a\u548c\u542f\u52a8\u6b21\u6570\u6210\u6b63\u6bd4\u3002 \u53d1\u73b0\u5982\u679c\u4e00\u6279\u4efb\u52a1\u786e\u5b9a\u88ab\u5206\u5728\u4e00\u8d77\uff0c\u90a3\u4e48\u4e4b\u540e\u7684\u6240\u6709\u4efb\u52a1\u7684\u7ed3\u675f\u65f6\u95f4\u81ea\u7136\u90fd\u4f1a\u589e\u52a0 \\(s\\) \u3002 \u6240\u4ee5\u53ef\u4ee5\u5728\u8f6c\u79fb\u7684\u65f6\u5019\u5148\u628a\u8fd9\u4e2a \\(s\\) \u52a0\u5230\u540e\u9762\uff08\u8d39\u7528\u63d0\u524d\u8ba1\u7b97\uff09 \u56e0\u4e3a\u9898\u76ee\u6ca1\u6709\u5206\u591a\u5c11\u7ec4\u7684\u9650\u5236\uff0c\u8bbe \\(f_i\\) \u8868\u793a\u628a\u524d \\(i\\) \u4e2a\u4efb\u52a1\u5206\u6210\u82e5\u5e72\u4e2a\u6279\u6b21\u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u6700\u5c0f\u82b1\u8d39\u3002 \u679a\u4e3e\u4e0a\u4e00\u7ec4\u7684\u6700\u540e\u7aef\u70b9\u53ef\u4ee5\u5f97\u5230\uff1a \\(f_i=\\min\\limits_{0\\le j < i}\\{f_j+s\\times c[j+1\\sim n]+t[1\\sim i] \\times c[j+1 \\sim i]\\}\\) \u9884\u5904\u7406\u524d\u7f00\u548c\u53ef\u4ee5\u505a\u5230 \\(\\text{O}(n^2)\\) \u505a\u6cd53 - \u659c\u7387\u4f18\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4fdd\u8bc1 \\(n \\le 3\\times 10^5,1\\le s \\le 512,1\\le t_i,c_i \\le 512\\) \u8981\u6c42\u65f6\u95f4\u590d\u6742\u5ea6 \\(\\text{O}(n)\\) \u3002 \u53d1\u73b0\u8fd9\u4e2a\u65b9\u7a0b\u5c31\u662f 1D1D \u7684\u5f62\u5f0f\uff0c\u7528\u524d\u7f00\u548c\u7684\u65b9\u5f0f\u91cd\u65b0\u5199\u4e00\u4e0b\u8fd9\u4e2a\u65b9\u7a0b\uff1a \\(f_i=\\min\\limits_{0\\le j < i}\\{f_j+s\\times (sumc[n]-sumc[j])+sumt[i]\\times(sumc[i]-sumc[j])\\}\\) \u53d1\u73b0\u540e\u9762\u7684 \\(val(i,j)\\) \u8fd9\u4e2a\u591a\u9879\u5f0f\u662f \\(s\\times (sumc[n]-sumc[j])+sumt[i]\\times(sumc[i]-sumc[j])\\) \u628a \\(i\\) \u76f8\u5173\u9879\uff0c \\(j\\) \u76f8\u5173\u9879\uff0c \\(i,j\\) \u76f8\u5173\u9879\u5206\u79bb\uff1a \u5e38\u9879\uff1a \\(s\\times sumc[n]\\) \\(i\\) \u76f8\u5173\u9879\uff1a \\(sumt[i]\\times sumc[i]\\) \\(j\\) \u76f8\u5173\u9879\uff1a \\(-s\\times sumc[j]\\) \\(i,j\\) \u76f8\u5173\u9879\uff1a \\(-sumt[i]\\times sumc[j]\\) \u628a\u5916\u5c42\u5faa\u73af\u56fa\u5b9a\u65f6\u5019\u7684\u5e38\u91cf\u63d0\u51fa\u53bb \\(f_i=s\\times sumc[n]+sumt[i]\\times sumc[i]+\\min\\limits_{0 \\le j < i}\\{f_j -s\\times sumc[j]-sumt[i]\\times sumc[j]\\}\\) \u628a \\(\\min\\) \u53bb\u6389\uff0c\u628a\u5173\u4e8e \u51b3\u7b56\u70b9 \\(j\\) \u7684\u770b\u4f5c \u53d8\u91cf \u3002 \\(f_j=(s+sumt[i])\\times sumc[j]+f_i-sumt[i]\\times sumc[i]-s\\times sumc[n]\\) \u5982\u679c\u628a \\(f_j\\) \u5f53\u4f5c \\(y\\) \uff0c \\(sumc[j]\\) \u770b\u4f5c \\(x\\) \u3002 \u53ef\u4ee5\u5f97\u5230\u4e00\u6761\u76f4\u7ebf \\(y=kx+b\\) \u5176\u4e2d \\(b=f_i-sumt[i]\\times sumc[i]-s\\times sumc[n]\\) \u5b9e\u9645\u4e0a\u8fd9\u6761\u76f4\u7ebf\u5e94\u5f53\u662f\u8fd9\u6837\u7684\u5f62\u5f0f \uff1a \\(y\\) \u662f\u53ea\u548c \\(j\\) \u76f8\u5173\u7684\u9879\uff0c\u7136\u540e \\(kx\\) \u5c31\u662f\u628a \\(i\\times j\\) \u8fd9\u79cd\u9879\u653e\u8fc7\u6765\uff0c\u5176\u4e2d \\(k\\) \u5bf9\u5e94 \\(i\\) \u7684\u4e00\u6b21\u9879\uff0c \\(x\\) \u5bf9\u5e94 \\(j\\) \u7684\u4e00\u6b21\u9879\u3002 \u5269\u4e0b\u7684\u90e8\u5206\u5c31\u662f \\(b\\) \u4e86\u3002 \u5982\u679c\u9047\u5230\u4e24\u4e2a \\(i\\times j\\) \u9879\uff0c\u53ef\u4ee5\u8003\u8651\u628a\u4ed6\u4eec\u62c6\u5f00\uff0c\u7136\u540e\u518d\u5206\u522b\u653e\u5230\u5bf9\u5e94\u4f4d\u7f6e\u53bb\u3002 \u6bd4\u5982 \\(a_ia_j+b_ib_j\\) \u8fd9\u79cd\uff0c\u5c31\u628a\u4ed6\u62c6\u6210 \\((a_i+b_i)(a_j+b_j)-a_ib_i-a_jb_j\\) \u3002 \u7b2c\u4e00\u90e8\u5206\u653e\u5230 \\(kx\\) \u9879\uff0c\u7b2c\u4e8c\u90e8\u5206\u653e\u5230 \\(b\\) \u9879\uff0c\u7b2c\u4e09\u90e8\u5206\u653e\u5230 \\(y\\) \u9879\u5373\u53ef\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u659c\u7387\u4f18\u5316\u5904\u7406 \\(i\\times j\\) \u7684\u65b9\u5f0f\u5c31\u662f\u628a\u5b83\u5f53\u4f5c\u76f4\u7ebf\u65b9\u7a0b\u4e2d\u7684 \\(kx\\) \u3002 \u628a \\(j=0\\to n-1\\) \u7684 \u6bcf\u4e2a \u4e8c\u5143\u7ec4 \\((sumc[j],f_j)\\) \u5f53\u4f5c\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e0a\u7684\u4e00\u4e2a\u70b9 \\((x,y)\\) \uff08\u8fd9\u5c31\u662f\u8981\u53bb\u6389 \\(\\min\\) \u7684\u539f\u56e0\uff09 \uff08\u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u76f4\u7ebf\u4e2d \\(x\\) \u4f4d\u7f6e\u7684\u5f0f\u5b50\u5f53\u4f5c\u5750\u6807\u7cfb\u91cc\u7684 \\(x\\) \u5750\u6807\uff0c \\(y\\) \u4f4d\u7f6e\u7684\u5f0f\u5b50\u5f53\u4f5c\u5750\u6807\u7cfb\u91cc\u7684 \\(y\\) \u5750\u6807\uff09 \u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u8fd9\u6837\u7684\u4e00\u4e2a\u4e1c\u897f\uff1a \u53d1\u73b0\u76f4\u7ebf \\(y=kx+b\\) \u7684\u659c\u7387\u662f \\((s+sumt[i])\\) \u662f\u4e00\u4e2a\u5173\u4e8e \\(i\\) \u7684\u53d8\u91cf\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u4e0d\u540c\u7684 \\(i\\) \uff0c\u6211\u4eec\u5f97\u5230\u7684\u659c\u7387\u662f\u4e0d\u4e00\u6837\u7684\u3002 \u5f53\u7136\u5982\u679c\u51fa\u73b0 \\(sumt[i]\\) \u5148\u589e\u518d\u51cf\u5c11\u5bfc\u81f4\u6709\u4e24\u4e2a\u4e0d\u540c\u7684 \\(i\\) \u7684 \\(sumt[i]\\) \u4e00\u6837\uff0c\u662f\u6ca1\u6709\u5f71\u54cd\u7684\u3002 \u56de\u60f3\u4e00\u4e0b\u95ee\u9898\uff1a\u6700\u5c0f\u5316 \\(f_n\\) \uff0c\u5bf9\u5e94\u5230\u6bcf\u4e2a\u51b3\u7b56\u7684\u95ee\u9898\u5c31\u662f\u6700\u5c0f\u5316 \\(f_i\\) \u3002 \u800c \\(f_i\\) \u5904\u4e8e\u622a\u8ddd \\(b\\) \u4e4b\u4e2d\uff0c\u5f53 \\(y,x,k\\) \u56fa\u5b9a\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u8ba9 \\(b\\) \u6700\u5c0f\uff0c \\(f_i\\) \u5c31\u6700\u5c0f\u3002 \u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(i\\) \uff0c\u62ff\u4e00\u6761\u659c\u7387\u4e3a \\(k\\) \u7684\u76f4\u7ebf\u4ece\u4e0b\u5f80\u4e0a\u5e73\u79fb\uff0c\u9047\u5230\u7684\u7b2c\u4e00\u4e2a\u70b9\u4e00\u5b9a\u662f\u6700\u4f18\u89e3\u3002 \u4f46\u662f\u5c31\u7b97\u8fd9\u6837\uff0c\u8fd8\u662f\u9700\u8981\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684 \\(j\\) \uff0c\u590d\u6742\u5ea6\u4f9d\u65e7\u662f \\(n^2\\) \u7ea7\u522b\u3002 \u90a3\u4e48\u600e\u4e48\u4f18\u5316\uff1f \u968f\u4fbf\u627e\u4e09\u4e2a \\(x\\) \u5750\u6807\u9012\u589e\u7684\u70b9 \\(i,j,k\\) \u8fde\u63a5 \\(i\\to j,j \\to k\\) \u53d1\u73b0\u53ea\u53ef\u80fd\u6709\u5982\u4e0b\u7684\u4e24\u79cd\u60c5\u51b5\uff08\u4e09\u70b9\u5171\u7ebf\u7684\u4e0d\u7b97\uff09\u3002 \u53d1\u73b0\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c \\(j\\) \u65e0\u8bba\u5982\u4f55\u90fd\u4e0d\u53ef\u80fd\u6210\u4e3a\u6700\u4f18\u51b3\u7b56\u3002 \u5f62\u5f0f\u5316\u7684\u63cf\u8ff0\u5c31\u662f \\(k_{i,j}>k_{j,k}\\) \uff0c\u90a3\u4e48 \\(j\\) \u4e0d\u53ef\u80fd\u6210\u4e3a\u6700\u4f18\u51b3\u7b56\u3002 \u6240\u4ee5\u53ef\u4ee5\u5904\u7406\u51fa\u6240\u6709\u7684\u4e0d\u53ef\u80fd\u6210\u4e3a\u6700\u4f18\u51b3\u7b56\u7684\u51b3\u7b56\u70b9\uff0c\u7136\u540e\u8f6c\u79fb\u5c31\u5728\u5269\u4e0b\u7684\u90e8\u5206\u8fdb\u884c\u5373\u53ef\u3002 \u5b9e\u9645\u4e0a\uff0c\u5728\u672c\u9898\u5c31\u662f\u5728\u7ef4\u62a4\u4e00\u4e2a \\(x\\) \u5355\u8c03\u9012\u589e\uff0c \\(k\\) \u5355\u8c03\u9012\u589e\u7684 \u4e0b\u51f8\u58f3 \uff0c \u5177\u4f53\u5982\u4f55\u7ef4\u62a4\u8fd9\u4e2a\u4e0b\u51f8\u58f3\u5462\uff1f \u8003\u8651\u4ece \\(0 \\to n-1\\) \u66b4\u529b\u626b\u4e00\u6b21\uff0c\u6bcf\u6b21\u65b0\u589e\u4e00\u4e2a\u70b9\u90fd\u9700\u8981\u628a\u5b83\u548c\u4e0a\u4e00\u4e2a\u88ab\u52a0\u5165\u7684\u70b9\uff0c\u4e0a\u4e0a\u4e2a\u88ab\u52a0\u5165\u7684\u70b9\u76f8\u4e92\u4e4b\u95f4\u8fde\u8fb9\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u66f4\u4f18\uff0c\u53bb\u6389\u4e0a\u4e00\u4e2a\uff0c\u628a\u8fd9\u4e2a\u70b9\u653e\u8fdb\u6765\u3002 GIF\uff1a \u56e0\u4e3a\u5728\u672c\u9898\uff0c\u659c\u7387\u5728 \\(i\\) \u589e\u52a0\u7684\u65f6\u5019\u4e00\u5b9a\u589e\u52a0\uff08\u56e0\u4e3a \\(sumt[i]\\) \u80af\u5b9a\u5355\u8c03\u4e0a\u5347\uff09 \u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a\u5355\u8c03\u961f\u5217\uff0c\u628a\u524d\u9762\u5df2\u7ecf\u51b3\u7b56\u8fc7\u7684\u5220\u9664\uff0c\u5728\u540e\u9762\u8fdb\u884c\u51b3\u7b56\u3002 \u4e5f\u5c31\u662f\u961f\u5934\u548c\u961f\u5934\u52a0\u4e00\u7684\u659c\u7387\u5c0f\u4e8e \\(s+sumt[i]\\) \uff0c\u5c31\u628a\u961f\u5934\u5f39\u51fa\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include <bits/stdc++.h> using namespace std ; constexpr int si = 3e5 + 10 ; #define ll long long ll f [ si ], sumt [ si ], sumc [ si ]; int q [ si ], n , S ; int main () { scanf ( \"%d%d\" , & n , & S ); for ( register int i = 1 ; i <= n ; i ++ ){ int t , c ; scanf ( \"%d%d\" , & t , & c ); sumt [ i ] = sumt [ i -1 ] + t , sumc [ i ] = sumc [ i -1 ] + c ; } memset ( f , 0x3f , sizeof ( f )), f [ 0 ] = 0 ; int head = 1 , tail = 1 ; q [ 1 ] = 0 ; for ( register int i = 1 ; i <= n ; i ++ ){ while ( head < tail && ( f [ q [ head + 1 ]] - f [ q [ head ]]) <= ( S + sumt [ i ]) * ( sumc [ q [ head + 1 ]] - sumc [ q [ head ]])) head ++ ; f [ i ] = f [ q [ head ]] - ( S + sumt [ i ]) * sumc [ q [ head ]] + sumt [ i ] * sumc [ i ] + S * sumc [ n ]; while ( head < tail && ( f [ q [ tail ]] - f [ q [ tail -1 ]]) * ( sumc [ i ] - sumc [ q [ tail ]]) >= ( f [ i ] - f [ q [ tail ]]) * ( sumc [ q [ tail ]] - sumc [ q [ tail -1 ]])) tail -- ; q [ ++ tail ] = i ; } return printf ( \"%lld \\n \" , f [ n ]), 0 ; } \u6211\u8fd9\u4efd\u4ee3\u7801\u662f\u5199\u7684\u7ef4\u62a4 \\([head, tail)\\) \u8fd9\u4e2a\u534a\u95ed\u534a\u5f00\u533a\u95f4\u3002 \u6240\u4ee5\u521d\u59cb\u7684\u65f6\u5019 head = 1, tail = 1 \u3002 \u4f46\u662f\u6211\u5982\u679c\u76f4\u63a5\u6539\u6210\u7ef4\u62a4\u95ed\u533a\u95f4 \\([head, tail]\\) \u5c31\u4f1a\u5bc4\u3002 \u53ef\u80fd\u662f\u4ee3\u7801\u79fb\u52a8\u7aef\u70b9\u7684\u65f6\u5019\u51fa\u4e86\u7ec6\u8282\u95ee\u9898\uff0c\u4e4b\u540e\u518d\u770b\u5427\u3002 \u590d\u6742\u5ea6 \\(\\text{O}(n)\\) \u3002 \u8fd9\u9898\u7684 \\(\\text{O}(n^2)\\) \u505a\u6cd5\u8fd8\u6709\u53e6\u5916\u4e00\u4e2a\u65b9\u7a0b\uff0c \u5c31\u662f\u628a\u5f53\u524d\u6279\u6b21\u4efb\u52a1\u7684\u8d21\u732e\u5e26\u7740 \\(S\\) \u4e5f\u76f4\u63a5\u5f80\u540e\u9762\u52a0\u4e86\uff1a \\[dp_{i} = \\min\\limits_{0\\le j < i}\\{dp_j + (S + sumt[i] - sumt[j]) \\times (sumc[n] - sumc[j])\\}\\] \u8fd9\u4e2a\u4e5f\u662f\u53ef\u4ee5\u659c\u7387\u4f18\u5316\u7684\uff0c\u7528\u4e0a\u9762\u603b\u7ed3\u7684\u627e\u76f4\u7ebf\u65b9\u7a0b\u7684\u6bcf\u4e00\u90e8\u5206\u7684\u65b9\u6cd5\u5373\u53ef\u3002 \u6027\u8d28\u4e5f\u5dee\u4e0d\u591a\u3002 \u505a\u6cd54 - \u4e8c\u5206 + \u659c\u7387\u4f18\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6761\u4ef6\u540c3\uff0c \\(t_i\\) \u53ef\u80fd\u662f\u8d1f\u6570\u3002 \u53d1\u73b0 \\(sumt\\) \u4e0d\u518d\u662f\u5355\u8c03\u4e0a\u5347\u7684\uff0c\u6240\u4ee5\u4e0d\u80fd\u5229\u7528\u5355\u8c03\u961f\u5217\u76f4\u63a5\u5f39\u6389\u961f\u5934\u5197\u6742\u3002 \u51b3\u7b56\u7684\u65f6\u5019\u5c31\u9700\u8981\u5728\u6574\u4e2a\u51f8\u58f3\u4e0a\u4e8c\u5206\u3002 \u53ea\u9700\u8981\u627e\u5230\u8fd9\u6837\u7684\u4e00\u4e2a\u8282\u70b9\u5373\u53ef\uff1a \u5982\u679c\u67d0\u4e2a\u9876\u70b9\u5de6\u4fa7\u7684\u7ebf\u6bb5\u659c\u7387\u6bd4 \\(k\\) \u5c0f\uff0c\u53f3\u4fa7\u6bd4 \\(k\\) \u5927\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c31\u662f\u6700\u4f18\u51b3\u7b56\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 #include <bits/stdc++.h> using namespace std ; constexpr int si = 3e5 + 10 ; inline __int128 read (){ __int128 x = 0 , f = 1 ; char ch = getchar (); while ( ch < '0' || ch > '9' ){ if ( ch == '-' ) f = -1 ; ch = getchar (); } while ( ch >= '0' && ch <= '9' ) x = ( x << 1 ) + ( x << 3 ) + ( ch ^ 48 ), ch = getchar (); return x * f ; } inline void write ( __int128 x ){ if ( x < 0 ) putchar ( '-' ), x =- x ; if ( x > 9 ) write ( x / 10 ); putchar ( x % 10 + '0' ); } __int128 f [ si ], sumt [ si ], sumc [ si ]; int q [ si ], n , S , head , tail ; inline int Mylower_bound ( int slope ){ if ( head == tail ) return q [ head ]; int l = head , r = tail ; while ( l < r ){ int mid = ( l + r ) >> 1 ; if ( f [ q [ mid + 1 ]] - f [ q [ mid ]] <= slope * ( sumc [ q [ mid + 1 ]] - sumc [ q [ mid ]])) l = mid + 1 ; else r = mid ; } return q [ l ]; } int main () { scanf ( \"%d%d\" , & n , & S ); for ( register int i = 1 ; i <= n ; i ++ ){ __int128 t , c ; t = read (), c = read (); sumt [ i ] = sumt [ i -1 ] + t , sumc [ i ] = sumc [ i -1 ] + c ; } memset ( f , 0x3f , sizeof ( f )), f [ 0 ] = 0 ; head = 1 , tail = 1 , q [ 1 ] = 0 ; for ( register int i = 1 ; i <= n ; i ++ ){ int qwq = Mylower_bound ( S + sumt [ i ]); f [ i ] = f [ qwq ] - ( S + sumt [ i ]) * sumc [ qwq ] + sumt [ i ] * sumc [ i ] + S * sumc [ n ]; while ( head < tail && ( f [ q [ tail ]] - f [ q [ tail -1 ]]) * ( sumc [ i ] - sumc [ q [ tail ]]) >= ( f [ i ] - f [ q [ tail ]]) * ( sumc [ q [ tail ]] - sumc [ q [ tail -1 ]])) tail -- ; q [ ++ tail ] = i ; } return write ( f [ n ]), 0 ; } // \u672c\u9898\u4f1a\u7206 long long, use __int128. \u505a\u6cd55 - \u5e73\u8861\u6811 + \u659c\u7387\u4f18\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5982\u679c \\(c_i\\) \u4e5f\u6709\u53ef\u80fd\u662f\u8d1f\u6570\uff1f \u9700\u8981\u5728\u51f8\u58f3\u7684\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\uff0c\u67e5\u8be2\uff0c\u6240\u4ee5\u9700\u8981\u5e73\u8861\u6811\u3002 \u8fd8\u4e0d\u592a\u4f1a\u3002","title":"Convex optimize old"},{"location":"algor/dp/opt/convex-optimize-old/#_1","text":"\u8fd9\u4e00\u7c7b\u95ee\u9898\u548c\u5355\u8c03\u961f\u5217\u4f18\u5316DP\u6709\u5171\u540c\u7684\u5730\u65b9\u3002 \u53ef\u4ee5\u7528\u7c7b\u4f3c\u7684\u601d\u60f3\u601d\u8003\u5176\u4e2d\u7684\u4e00\u90e8\u5206\u5185\u5bb9\u3002 \u8003\u8651\u5355\u8c03\u961f\u5217\u4f18\u5316DP\u91cc\u9762\u90a3\u4e2a 1D1D \u7684\u5f0f\u5b50\u3002 \\[f_{i}=\\min\\limits_{L(i)\\le j \\le R(i)}\\{f_j+val(i,j)\\}\\] \u5176\u4e2d \\(val(i,j)\\) \u662f\u5173\u4e8e \\(i,j\\) \u7684\u591a\u9879\u5f0f\u3002 \u5e76\u4e14\u53ef\u4ee5\u5206\u88c2\u4e3a\u4e24\u4e2a\u5206\u522b\u53ea\u548c \\(i,j\\) \u76f8\u5173\u7684\u90e8\u5206\u3002 \u4f46\u5982\u679c \\(val(i,j)\\) \u5f53\u4e2d\u6709 \u540c\u65f6\u548c \\(i,j\\) \u76f8\u5173\u7684\u90e8\u5206 \uff08\u4e58\u79ef\u548c\u505a\u9664\u6cd5\uff09\uff0c\u90a3\u4e48\u5355\u8c03\u961f\u5217\u4f18\u5316DP\u5c31\u4e0d\u518d\u9002\u7528\u3002 \u6b64\u65f6\u5c31\u9700\u8981\u4f7f\u7528\u659c\u7387\u4f18\u5316DP\u3002 \u800c\u51b3\u7b56\u96c6\u5408\u7684\u4e0a\u4e0b\u754c \\([L(i),R(i)]\\) \u7684\u53d8\u5316\u5219\u51b3\u5b9a\u4e86\u8f85\u52a9\u659c\u7387\u4f18\u5316\u4f7f\u7528\u7684\u7b97\u6cd5\u3002 \u5982\u679c\u51b3\u7b56\u96c6\u5408\u662f \u5355\u8c03\u53d8\u5316 \u7684\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 \u5355\u8c03\u961f\u5217 \u3002 \u5426\u5219\u9700\u8981\u6839\u636e\u60c5\u51b5\u4f7f\u7528 \u4e8c\u5206 \u6216\u8005 \u5e73\u8861\u6811 \uff0c\u8fd9\u91cc\u7684\u9009\u62e9\u5219\u662f\u53d6\u51b3\u4e8e\u51b3\u7b56\u96c6\u5408\u7684\u53d8\u5316\u662f\u5728 \u5934\u5c3e\u653e\u5165 \u8fd8\u662f\u5728 \u4efb\u610f\u4f4d\u7f6e\u63d2\u5165 \u3002","title":"\u6cdb\u5316"},{"location":"algor/dp/opt/convex-optimize-old/#_2","text":"\\(n\\) \u4e2a\u4efb\u52a1\u6392\u6210\u4e00\u4e2a\u5e8f\u5217\u5728\u4e00\u53f0\u673a\u5668\u4e0a\u7b49\u5f85\u5b8c\u6210\uff08\u987a\u5e8f\u4e0d\u5f97\u6539\u53d8\uff09\uff0c\u8fd9 \\(n\\) \u4e2a\u4efb\u52a1\u88ab\u5206\u6210\u82e5\u5e72\u6279\uff0c\u6bcf\u6279\u5305\u542b\u76f8\u90bb\u7684\u82e5\u5e72\u4efb\u52a1\u3002 \u4ece\u96f6\u65f6\u523b\u5f00\u59cb\uff0c\u8fd9\u4e9b\u4efb\u52a1\u88ab\u5206\u6279\u52a0\u5de5\uff0c\u7b2c \\(i\\) \u4e2a\u4efb\u52a1\u5355\u72ec\u5b8c\u6210\u6240\u9700\u7684\u65f6\u95f4\u4e3a \\(t_i\\) \u3002\u5728\u6bcf\u6279\u4efb\u52a1\u5f00\u59cb\u524d\uff0c\u673a\u5668\u9700\u8981\u542f\u52a8\u65f6\u95f4 \\(s\\) \uff0c\u800c\u5b8c\u6210\u8fd9\u6279\u4efb\u52a1\u6240\u9700\u7684\u65f6\u95f4\u662f\u5404\u4e2a\u4efb\u52a1\u9700\u8981\u65f6\u95f4\u7684\u603b\u548c\uff08\u540c\u4e00\u6279\u4efb\u52a1\u5c06\u5728\u540c\u4e00\u65f6\u523b\u5b8c\u6210\uff09\u3002 \u6bcf\u4e2a\u4efb\u52a1\u7684\u8d39\u7528\u662f\u5b83\u7684\u5b8c\u6210\u65f6\u523b\u4e58\u4ee5\u4e00\u4e2a\u8d39\u7528\u7cfb\u6570 \\(c_i\\) \u3002\u8bf7\u786e\u5b9a\u4e00\u4e2a\u5206\u7ec4\u65b9\u6848\uff0c\u4f7f\u5f97\u603b\u8d39\u7528\u6700\u5c0f\u3002","title":"\u4f8b\u9898"},{"location":"algor/dp/opt/convex-optimize-old/#1-","text":"\u4fdd\u8bc1 \\(n \\le 500,1\\le s \\le 50,1\\le t_i,c_i \\le 100\\) \u8003\u8651\u6700\u66b4\u529b\u7684\u65b9\u5f0f\uff0c\u8bbe \\(f_{i,j}\\) \u8868\u793a\u524d \\(i\\) \u4e2a\u4efb\u52a1\uff0c\u5206\u6210 \\(j\\) \u6279\u6267\u884c\u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u662f\u603b\u8d39\u7528\u6700\u5c0f\u3002 \u679a\u4e3e\u4e0a\u4e00\u6279\u4efb\u52a1\u7684\u6700\u540e\u4e00\u4e2a\u70b9\u5373\u53ef\u3002 \\(f_{i,j}=\\min\\limits_{0\\le k < i}\\{f_{k,j-1}+c[k+1\\sim i]\\times (t[k+1\\sim i]+s\\times j)\\}\\) \u5904\u7406\u524d\u7f00\u548c\u53ef\u4ee5\u505a\u5230 \\(\\text{O}(n^3)\\)","title":"\u505a\u6cd51 - \u66b4\u529b"},{"location":"algor/dp/opt/convex-optimize-old/#2-","text":"\u4fdd\u8bc1 \\(n\\le 5000,1\\le s \\le 50,1\\le t_i,c_i \\le 100\\) \u53d1\u73b0\u4e0a\u4e00\u4e2a\u65b9\u7a0b\u7684\u74f6\u9888\u5728\u4e8e \\(j\\) \uff0c\u9700\u8981\u77e5\u9053\u542f\u52a8\u4e86\u591a\u5c11\u6b21\uff0c\u56e0\u4e3a \\(s\\) \u9020\u6210\u7684\u8d21\u732e\u4f1a\u548c\u542f\u52a8\u6b21\u6570\u6210\u6b63\u6bd4\u3002 \u53d1\u73b0\u5982\u679c\u4e00\u6279\u4efb\u52a1\u786e\u5b9a\u88ab\u5206\u5728\u4e00\u8d77\uff0c\u90a3\u4e48\u4e4b\u540e\u7684\u6240\u6709\u4efb\u52a1\u7684\u7ed3\u675f\u65f6\u95f4\u81ea\u7136\u90fd\u4f1a\u589e\u52a0 \\(s\\) \u3002 \u6240\u4ee5\u53ef\u4ee5\u5728\u8f6c\u79fb\u7684\u65f6\u5019\u5148\u628a\u8fd9\u4e2a \\(s\\) \u52a0\u5230\u540e\u9762\uff08\u8d39\u7528\u63d0\u524d\u8ba1\u7b97\uff09 \u56e0\u4e3a\u9898\u76ee\u6ca1\u6709\u5206\u591a\u5c11\u7ec4\u7684\u9650\u5236\uff0c\u8bbe \\(f_i\\) \u8868\u793a\u628a\u524d \\(i\\) \u4e2a\u4efb\u52a1\u5206\u6210\u82e5\u5e72\u4e2a\u6279\u6b21\u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u6700\u5c0f\u82b1\u8d39\u3002 \u679a\u4e3e\u4e0a\u4e00\u7ec4\u7684\u6700\u540e\u7aef\u70b9\u53ef\u4ee5\u5f97\u5230\uff1a \\(f_i=\\min\\limits_{0\\le j < i}\\{f_j+s\\times c[j+1\\sim n]+t[1\\sim i] \\times c[j+1 \\sim i]\\}\\) \u9884\u5904\u7406\u524d\u7f00\u548c\u53ef\u4ee5\u505a\u5230 \\(\\text{O}(n^2)\\)","title":"\u505a\u6cd52 - \u8d39\u7528\u63d0\u524d\u8ba1\u7b97"},{"location":"algor/dp/opt/convex-optimize-old/#3-","text":"\u4fdd\u8bc1 \\(n \\le 3\\times 10^5,1\\le s \\le 512,1\\le t_i,c_i \\le 512\\) \u8981\u6c42\u65f6\u95f4\u590d\u6742\u5ea6 \\(\\text{O}(n)\\) \u3002 \u53d1\u73b0\u8fd9\u4e2a\u65b9\u7a0b\u5c31\u662f 1D1D \u7684\u5f62\u5f0f\uff0c\u7528\u524d\u7f00\u548c\u7684\u65b9\u5f0f\u91cd\u65b0\u5199\u4e00\u4e0b\u8fd9\u4e2a\u65b9\u7a0b\uff1a \\(f_i=\\min\\limits_{0\\le j < i}\\{f_j+s\\times (sumc[n]-sumc[j])+sumt[i]\\times(sumc[i]-sumc[j])\\}\\) \u53d1\u73b0\u540e\u9762\u7684 \\(val(i,j)\\) \u8fd9\u4e2a\u591a\u9879\u5f0f\u662f \\(s\\times (sumc[n]-sumc[j])+sumt[i]\\times(sumc[i]-sumc[j])\\) \u628a \\(i\\) \u76f8\u5173\u9879\uff0c \\(j\\) \u76f8\u5173\u9879\uff0c \\(i,j\\) \u76f8\u5173\u9879\u5206\u79bb\uff1a \u5e38\u9879\uff1a \\(s\\times sumc[n]\\) \\(i\\) \u76f8\u5173\u9879\uff1a \\(sumt[i]\\times sumc[i]\\) \\(j\\) \u76f8\u5173\u9879\uff1a \\(-s\\times sumc[j]\\) \\(i,j\\) \u76f8\u5173\u9879\uff1a \\(-sumt[i]\\times sumc[j]\\) \u628a\u5916\u5c42\u5faa\u73af\u56fa\u5b9a\u65f6\u5019\u7684\u5e38\u91cf\u63d0\u51fa\u53bb \\(f_i=s\\times sumc[n]+sumt[i]\\times sumc[i]+\\min\\limits_{0 \\le j < i}\\{f_j -s\\times sumc[j]-sumt[i]\\times sumc[j]\\}\\) \u628a \\(\\min\\) \u53bb\u6389\uff0c\u628a\u5173\u4e8e \u51b3\u7b56\u70b9 \\(j\\) \u7684\u770b\u4f5c \u53d8\u91cf \u3002 \\(f_j=(s+sumt[i])\\times sumc[j]+f_i-sumt[i]\\times sumc[i]-s\\times sumc[n]\\) \u5982\u679c\u628a \\(f_j\\) \u5f53\u4f5c \\(y\\) \uff0c \\(sumc[j]\\) \u770b\u4f5c \\(x\\) \u3002 \u53ef\u4ee5\u5f97\u5230\u4e00\u6761\u76f4\u7ebf \\(y=kx+b\\) \u5176\u4e2d \\(b=f_i-sumt[i]\\times sumc[i]-s\\times sumc[n]\\) \u5b9e\u9645\u4e0a\u8fd9\u6761\u76f4\u7ebf\u5e94\u5f53\u662f\u8fd9\u6837\u7684\u5f62\u5f0f \uff1a \\(y\\) \u662f\u53ea\u548c \\(j\\) \u76f8\u5173\u7684\u9879\uff0c\u7136\u540e \\(kx\\) \u5c31\u662f\u628a \\(i\\times j\\) \u8fd9\u79cd\u9879\u653e\u8fc7\u6765\uff0c\u5176\u4e2d \\(k\\) \u5bf9\u5e94 \\(i\\) \u7684\u4e00\u6b21\u9879\uff0c \\(x\\) \u5bf9\u5e94 \\(j\\) \u7684\u4e00\u6b21\u9879\u3002 \u5269\u4e0b\u7684\u90e8\u5206\u5c31\u662f \\(b\\) \u4e86\u3002 \u5982\u679c\u9047\u5230\u4e24\u4e2a \\(i\\times j\\) \u9879\uff0c\u53ef\u4ee5\u8003\u8651\u628a\u4ed6\u4eec\u62c6\u5f00\uff0c\u7136\u540e\u518d\u5206\u522b\u653e\u5230\u5bf9\u5e94\u4f4d\u7f6e\u53bb\u3002 \u6bd4\u5982 \\(a_ia_j+b_ib_j\\) \u8fd9\u79cd\uff0c\u5c31\u628a\u4ed6\u62c6\u6210 \\((a_i+b_i)(a_j+b_j)-a_ib_i-a_jb_j\\) \u3002 \u7b2c\u4e00\u90e8\u5206\u653e\u5230 \\(kx\\) \u9879\uff0c\u7b2c\u4e8c\u90e8\u5206\u653e\u5230 \\(b\\) \u9879\uff0c\u7b2c\u4e09\u90e8\u5206\u653e\u5230 \\(y\\) \u9879\u5373\u53ef\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u659c\u7387\u4f18\u5316\u5904\u7406 \\(i\\times j\\) \u7684\u65b9\u5f0f\u5c31\u662f\u628a\u5b83\u5f53\u4f5c\u76f4\u7ebf\u65b9\u7a0b\u4e2d\u7684 \\(kx\\) \u3002 \u628a \\(j=0\\to n-1\\) \u7684 \u6bcf\u4e2a \u4e8c\u5143\u7ec4 \\((sumc[j],f_j)\\) \u5f53\u4f5c\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e0a\u7684\u4e00\u4e2a\u70b9 \\((x,y)\\) \uff08\u8fd9\u5c31\u662f\u8981\u53bb\u6389 \\(\\min\\) \u7684\u539f\u56e0\uff09 \uff08\u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u76f4\u7ebf\u4e2d \\(x\\) \u4f4d\u7f6e\u7684\u5f0f\u5b50\u5f53\u4f5c\u5750\u6807\u7cfb\u91cc\u7684 \\(x\\) \u5750\u6807\uff0c \\(y\\) \u4f4d\u7f6e\u7684\u5f0f\u5b50\u5f53\u4f5c\u5750\u6807\u7cfb\u91cc\u7684 \\(y\\) \u5750\u6807\uff09 \u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u8fd9\u6837\u7684\u4e00\u4e2a\u4e1c\u897f\uff1a \u53d1\u73b0\u76f4\u7ebf \\(y=kx+b\\) \u7684\u659c\u7387\u662f \\((s+sumt[i])\\) \u662f\u4e00\u4e2a\u5173\u4e8e \\(i\\) \u7684\u53d8\u91cf\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u4e0d\u540c\u7684 \\(i\\) \uff0c\u6211\u4eec\u5f97\u5230\u7684\u659c\u7387\u662f\u4e0d\u4e00\u6837\u7684\u3002 \u5f53\u7136\u5982\u679c\u51fa\u73b0 \\(sumt[i]\\) \u5148\u589e\u518d\u51cf\u5c11\u5bfc\u81f4\u6709\u4e24\u4e2a\u4e0d\u540c\u7684 \\(i\\) \u7684 \\(sumt[i]\\) \u4e00\u6837\uff0c\u662f\u6ca1\u6709\u5f71\u54cd\u7684\u3002 \u56de\u60f3\u4e00\u4e0b\u95ee\u9898\uff1a\u6700\u5c0f\u5316 \\(f_n\\) \uff0c\u5bf9\u5e94\u5230\u6bcf\u4e2a\u51b3\u7b56\u7684\u95ee\u9898\u5c31\u662f\u6700\u5c0f\u5316 \\(f_i\\) \u3002 \u800c \\(f_i\\) \u5904\u4e8e\u622a\u8ddd \\(b\\) \u4e4b\u4e2d\uff0c\u5f53 \\(y,x,k\\) \u56fa\u5b9a\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u8ba9 \\(b\\) \u6700\u5c0f\uff0c \\(f_i\\) \u5c31\u6700\u5c0f\u3002 \u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(i\\) \uff0c\u62ff\u4e00\u6761\u659c\u7387\u4e3a \\(k\\) \u7684\u76f4\u7ebf\u4ece\u4e0b\u5f80\u4e0a\u5e73\u79fb\uff0c\u9047\u5230\u7684\u7b2c\u4e00\u4e2a\u70b9\u4e00\u5b9a\u662f\u6700\u4f18\u89e3\u3002 \u4f46\u662f\u5c31\u7b97\u8fd9\u6837\uff0c\u8fd8\u662f\u9700\u8981\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684 \\(j\\) \uff0c\u590d\u6742\u5ea6\u4f9d\u65e7\u662f \\(n^2\\) \u7ea7\u522b\u3002 \u90a3\u4e48\u600e\u4e48\u4f18\u5316\uff1f \u968f\u4fbf\u627e\u4e09\u4e2a \\(x\\) \u5750\u6807\u9012\u589e\u7684\u70b9 \\(i,j,k\\) \u8fde\u63a5 \\(i\\to j,j \\to k\\) \u53d1\u73b0\u53ea\u53ef\u80fd\u6709\u5982\u4e0b\u7684\u4e24\u79cd\u60c5\u51b5\uff08\u4e09\u70b9\u5171\u7ebf\u7684\u4e0d\u7b97\uff09\u3002 \u53d1\u73b0\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c \\(j\\) \u65e0\u8bba\u5982\u4f55\u90fd\u4e0d\u53ef\u80fd\u6210\u4e3a\u6700\u4f18\u51b3\u7b56\u3002 \u5f62\u5f0f\u5316\u7684\u63cf\u8ff0\u5c31\u662f \\(k_{i,j}>k_{j,k}\\) \uff0c\u90a3\u4e48 \\(j\\) \u4e0d\u53ef\u80fd\u6210\u4e3a\u6700\u4f18\u51b3\u7b56\u3002 \u6240\u4ee5\u53ef\u4ee5\u5904\u7406\u51fa\u6240\u6709\u7684\u4e0d\u53ef\u80fd\u6210\u4e3a\u6700\u4f18\u51b3\u7b56\u7684\u51b3\u7b56\u70b9\uff0c\u7136\u540e\u8f6c\u79fb\u5c31\u5728\u5269\u4e0b\u7684\u90e8\u5206\u8fdb\u884c\u5373\u53ef\u3002 \u5b9e\u9645\u4e0a\uff0c\u5728\u672c\u9898\u5c31\u662f\u5728\u7ef4\u62a4\u4e00\u4e2a \\(x\\) \u5355\u8c03\u9012\u589e\uff0c \\(k\\) \u5355\u8c03\u9012\u589e\u7684 \u4e0b\u51f8\u58f3 \uff0c \u5177\u4f53\u5982\u4f55\u7ef4\u62a4\u8fd9\u4e2a\u4e0b\u51f8\u58f3\u5462\uff1f \u8003\u8651\u4ece \\(0 \\to n-1\\) \u66b4\u529b\u626b\u4e00\u6b21\uff0c\u6bcf\u6b21\u65b0\u589e\u4e00\u4e2a\u70b9\u90fd\u9700\u8981\u628a\u5b83\u548c\u4e0a\u4e00\u4e2a\u88ab\u52a0\u5165\u7684\u70b9\uff0c\u4e0a\u4e0a\u4e2a\u88ab\u52a0\u5165\u7684\u70b9\u76f8\u4e92\u4e4b\u95f4\u8fde\u8fb9\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u66f4\u4f18\uff0c\u53bb\u6389\u4e0a\u4e00\u4e2a\uff0c\u628a\u8fd9\u4e2a\u70b9\u653e\u8fdb\u6765\u3002 GIF\uff1a \u56e0\u4e3a\u5728\u672c\u9898\uff0c\u659c\u7387\u5728 \\(i\\) \u589e\u52a0\u7684\u65f6\u5019\u4e00\u5b9a\u589e\u52a0\uff08\u56e0\u4e3a \\(sumt[i]\\) \u80af\u5b9a\u5355\u8c03\u4e0a\u5347\uff09 \u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a\u5355\u8c03\u961f\u5217\uff0c\u628a\u524d\u9762\u5df2\u7ecf\u51b3\u7b56\u8fc7\u7684\u5220\u9664\uff0c\u5728\u540e\u9762\u8fdb\u884c\u51b3\u7b56\u3002 \u4e5f\u5c31\u662f\u961f\u5934\u548c\u961f\u5934\u52a0\u4e00\u7684\u659c\u7387\u5c0f\u4e8e \\(s+sumt[i]\\) \uff0c\u5c31\u628a\u961f\u5934\u5f39\u51fa\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include <bits/stdc++.h> using namespace std ; constexpr int si = 3e5 + 10 ; #define ll long long ll f [ si ], sumt [ si ], sumc [ si ]; int q [ si ], n , S ; int main () { scanf ( \"%d%d\" , & n , & S ); for ( register int i = 1 ; i <= n ; i ++ ){ int t , c ; scanf ( \"%d%d\" , & t , & c ); sumt [ i ] = sumt [ i -1 ] + t , sumc [ i ] = sumc [ i -1 ] + c ; } memset ( f , 0x3f , sizeof ( f )), f [ 0 ] = 0 ; int head = 1 , tail = 1 ; q [ 1 ] = 0 ; for ( register int i = 1 ; i <= n ; i ++ ){ while ( head < tail && ( f [ q [ head + 1 ]] - f [ q [ head ]]) <= ( S + sumt [ i ]) * ( sumc [ q [ head + 1 ]] - sumc [ q [ head ]])) head ++ ; f [ i ] = f [ q [ head ]] - ( S + sumt [ i ]) * sumc [ q [ head ]] + sumt [ i ] * sumc [ i ] + S * sumc [ n ]; while ( head < tail && ( f [ q [ tail ]] - f [ q [ tail -1 ]]) * ( sumc [ i ] - sumc [ q [ tail ]]) >= ( f [ i ] - f [ q [ tail ]]) * ( sumc [ q [ tail ]] - sumc [ q [ tail -1 ]])) tail -- ; q [ ++ tail ] = i ; } return printf ( \"%lld \\n \" , f [ n ]), 0 ; } \u6211\u8fd9\u4efd\u4ee3\u7801\u662f\u5199\u7684\u7ef4\u62a4 \\([head, tail)\\) \u8fd9\u4e2a\u534a\u95ed\u534a\u5f00\u533a\u95f4\u3002 \u6240\u4ee5\u521d\u59cb\u7684\u65f6\u5019 head = 1, tail = 1 \u3002 \u4f46\u662f\u6211\u5982\u679c\u76f4\u63a5\u6539\u6210\u7ef4\u62a4\u95ed\u533a\u95f4 \\([head, tail]\\) \u5c31\u4f1a\u5bc4\u3002 \u53ef\u80fd\u662f\u4ee3\u7801\u79fb\u52a8\u7aef\u70b9\u7684\u65f6\u5019\u51fa\u4e86\u7ec6\u8282\u95ee\u9898\uff0c\u4e4b\u540e\u518d\u770b\u5427\u3002 \u590d\u6742\u5ea6 \\(\\text{O}(n)\\) \u3002 \u8fd9\u9898\u7684 \\(\\text{O}(n^2)\\) \u505a\u6cd5\u8fd8\u6709\u53e6\u5916\u4e00\u4e2a\u65b9\u7a0b\uff0c \u5c31\u662f\u628a\u5f53\u524d\u6279\u6b21\u4efb\u52a1\u7684\u8d21\u732e\u5e26\u7740 \\(S\\) \u4e5f\u76f4\u63a5\u5f80\u540e\u9762\u52a0\u4e86\uff1a \\[dp_{i} = \\min\\limits_{0\\le j < i}\\{dp_j + (S + sumt[i] - sumt[j]) \\times (sumc[n] - sumc[j])\\}\\] \u8fd9\u4e2a\u4e5f\u662f\u53ef\u4ee5\u659c\u7387\u4f18\u5316\u7684\uff0c\u7528\u4e0a\u9762\u603b\u7ed3\u7684\u627e\u76f4\u7ebf\u65b9\u7a0b\u7684\u6bcf\u4e00\u90e8\u5206\u7684\u65b9\u6cd5\u5373\u53ef\u3002 \u6027\u8d28\u4e5f\u5dee\u4e0d\u591a\u3002","title":"\u505a\u6cd53 - \u659c\u7387\u4f18\u5316"},{"location":"algor/dp/opt/convex-optimize-old/#4-","text":"\u6761\u4ef6\u540c3\uff0c \\(t_i\\) \u53ef\u80fd\u662f\u8d1f\u6570\u3002 \u53d1\u73b0 \\(sumt\\) \u4e0d\u518d\u662f\u5355\u8c03\u4e0a\u5347\u7684\uff0c\u6240\u4ee5\u4e0d\u80fd\u5229\u7528\u5355\u8c03\u961f\u5217\u76f4\u63a5\u5f39\u6389\u961f\u5934\u5197\u6742\u3002 \u51b3\u7b56\u7684\u65f6\u5019\u5c31\u9700\u8981\u5728\u6574\u4e2a\u51f8\u58f3\u4e0a\u4e8c\u5206\u3002 \u53ea\u9700\u8981\u627e\u5230\u8fd9\u6837\u7684\u4e00\u4e2a\u8282\u70b9\u5373\u53ef\uff1a \u5982\u679c\u67d0\u4e2a\u9876\u70b9\u5de6\u4fa7\u7684\u7ebf\u6bb5\u659c\u7387\u6bd4 \\(k\\) \u5c0f\uff0c\u53f3\u4fa7\u6bd4 \\(k\\) \u5927\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c31\u662f\u6700\u4f18\u51b3\u7b56\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 #include <bits/stdc++.h> using namespace std ; constexpr int si = 3e5 + 10 ; inline __int128 read (){ __int128 x = 0 , f = 1 ; char ch = getchar (); while ( ch < '0' || ch > '9' ){ if ( ch == '-' ) f = -1 ; ch = getchar (); } while ( ch >= '0' && ch <= '9' ) x = ( x << 1 ) + ( x << 3 ) + ( ch ^ 48 ), ch = getchar (); return x * f ; } inline void write ( __int128 x ){ if ( x < 0 ) putchar ( '-' ), x =- x ; if ( x > 9 ) write ( x / 10 ); putchar ( x % 10 + '0' ); } __int128 f [ si ], sumt [ si ], sumc [ si ]; int q [ si ], n , S , head , tail ; inline int Mylower_bound ( int slope ){ if ( head == tail ) return q [ head ]; int l = head , r = tail ; while ( l < r ){ int mid = ( l + r ) >> 1 ; if ( f [ q [ mid + 1 ]] - f [ q [ mid ]] <= slope * ( sumc [ q [ mid + 1 ]] - sumc [ q [ mid ]])) l = mid + 1 ; else r = mid ; } return q [ l ]; } int main () { scanf ( \"%d%d\" , & n , & S ); for ( register int i = 1 ; i <= n ; i ++ ){ __int128 t , c ; t = read (), c = read (); sumt [ i ] = sumt [ i -1 ] + t , sumc [ i ] = sumc [ i -1 ] + c ; } memset ( f , 0x3f , sizeof ( f )), f [ 0 ] = 0 ; head = 1 , tail = 1 , q [ 1 ] = 0 ; for ( register int i = 1 ; i <= n ; i ++ ){ int qwq = Mylower_bound ( S + sumt [ i ]); f [ i ] = f [ qwq ] - ( S + sumt [ i ]) * sumc [ qwq ] + sumt [ i ] * sumc [ i ] + S * sumc [ n ]; while ( head < tail && ( f [ q [ tail ]] - f [ q [ tail -1 ]]) * ( sumc [ i ] - sumc [ q [ tail ]]) >= ( f [ i ] - f [ q [ tail ]]) * ( sumc [ q [ tail ]] - sumc [ q [ tail -1 ]])) tail -- ; q [ ++ tail ] = i ; } return write ( f [ n ]), 0 ; } // \u672c\u9898\u4f1a\u7206 long long, use __int128.","title":"\u505a\u6cd54 - \u4e8c\u5206 + \u659c\u7387\u4f18\u5316"},{"location":"algor/dp/opt/convex-optimize-old/#5-","text":"\u5982\u679c \\(c_i\\) \u4e5f\u6709\u53ef\u80fd\u662f\u8d1f\u6570\uff1f \u9700\u8981\u5728\u51f8\u58f3\u7684\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\uff0c\u67e5\u8be2\uff0c\u6240\u4ee5\u9700\u8981\u5e73\u8861\u6811\u3002 \u8fd8\u4e0d\u592a\u4f1a\u3002","title":"\u505a\u6cd55 - \u5e73\u8861\u6811 + \u659c\u7387\u4f18\u5316"},{"location":"algor/dp/opt/convex-optimize/","text":"\u6cdb\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 \u53ef\u4ee5\u659c\u7387\u4f18\u5316\u7684\u65b9\u7a0b\u901a\u5e38\u5177\u6709\u4ee5\u4e0b\u5f62\u5f0f\uff1a \\(dp(i) = \\min\\limits_{j = L(i)}^{R(i)}\\{dp(j) + val(i, j)\\}\\) \uff0c\u5176\u4e2d \\(val(i, j)\\) \u4e3a\u4e00\u4e2a\u5173\u4e8e \\(i, j\\) \u7684\u591a\u9879\u5f0f\uff0c \\(L(i), R(i)\\) \u4e3a\u4e00\u4e2a\u5173\u4e8e \\(i\\) \u7684\u51fd\u6570\uff0c\u7528\u4e8e\u9650\u5236 \\(j\\) \u7684\u8303\u56f4\u3002 \u5e76\u4e14 \\(val(i, j)\\) \u5b58\u5728\u5f62\u5982 \\(i \\times j\\) \u7684\u9879\uff0c\u4e0e\u5355\u8c03\u961f\u5217\u4f18\u5316\u7684\u4ec5\u6709 \\(i, j\\) \u9879\u4e0d\u540c\u3002 \u659c\u7387\u4f18\u5316\u7684\u601d\u60f3\u662f\uff0c\u5148\u62c6\u6389 \\(L(i), R(i)\\) \u7684\u9650\u5236\uff0c\u5c06\u6240\u6709\u51b3\u7b56\u70b9\u8f6c\u5316\u4e3a\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684\u70b9\uff0c\u5c06\u65b9\u7a0b\u8f6c\u5316\u4e3a\u4e00\u4e2a\u4e00\u6b21\u51fd\u6570\u6765\u8fdb\u884c\u51b3\u7b56\uff0c\u5728\u51b3\u7b56\u65f6\u518d\u52a0\u4e0a \\(L(i), R(i)\\) \u7684\u9650\u5236\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u5efa\u7acb\u4ee5\u4e0b\u6620\u5c04\uff1a \u5c06\u4ec5\u548c \\(j\\) \u76f8\u5173\u7684\u9879\u770b\u4f5c \\(y\\) \uff0c\u8bb0\u8fd9\u4e9b\u9879\u7ec4\u6210\u7684\u591a\u9879\u5f0f\u4e3a \\(y_i\\) \uff0c\u5f62\u5982 \\(dp(j) + v(j) + \\dots\\) \u3002 \u5c06\u548c \\(i,j\\) \u540c\u65f6\u76f8\u5173\u7684\u9879\u770b\u4f5c \\(k,x\\) \uff0c\u5176\u4e2d \\(i\\) \u8fd9\u4e00\u90e8\u5206\u4f5c\u4e3a \\(k\\) \uff0c\u8bb0\u4e3a \\(k_i\\) \uff0c \\(j\\) \u8fd9\u4e00\u90e8\u5206\u4f5c\u4e3a \\(x\\) \uff0c\u8bb0\u4e3a \\(x_j\\) \uff0c\u5f0f\u5b50\u5f62\u5982 \\(C_1\\times(C_2 - v(i)) \\times w(j)\\) \uff08\u5176\u4e2d \\(C_1,C_2\\) \u4e3a\u5e38\u91cf\uff09\uff0c\u90a3\u4e48 \\(k_i = C_1\\times(C_2 - v(i)), x_j = w(j)\\) \u5c06\u4ec5\u548c \\(i\\) \u76f8\u5173\u7684\u9879\u770b\u4f5c \\(b\\) \uff0c\u8bb0\u4e3a \\(b_i\\) \uff0c\u4e3a\u4e86\u65b9\u4fbf\u6211\u4eec\u628a\u5e38\u91cf\u4e5f\u7b97\u8fdb\u8fd9\u4e00\u90e8\u5206\uff0c\u5f0f\u5b50\u5f62\u5982 \\(dp(i) + v(i) \\times w(i) + C\\) \uff0c\u6211\u4eec\u8981\u6700\u5c0f\u5316\u7684\u5c31\u662f\u8fd9\u4e00\u90e8\u5206\uff08\u672c\u8d28\u662f\u6700\u5c0f\u5316 \\(dp(i)\\) \uff0c\u5176\u5b83\u7684\u662f\u5e38\u91cf\u6240\u4ee5\u65e0\u6240\u8c13\u3002\uff09 \uff08\u4ee5\u4e0a\u7684\u5f0f\u5b50\u53ea\u662f\u505a\u4e00\u4e2a\u53c2\u8003\u7406\u89e3\uff0c\u9700\u8981\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u6765\u6539\u53d8\u3002\uff09 \u7136\u540e\uff0c\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\uff0c\u7ed9\u5b9a\u4e00\u5806\u5e73\u9762\u4e0a\u7684\u70b9 \\((x_j, y_j)\\) \uff0c\u5bf9\u4e8e\u4e00\u6761\u76f4\u7ebf \\(y = k_ix + b_i\\) \uff0c\u6211\u4eec\u9700\u8981\u9009\u62e9\u4e00\u4e2a\u6ee1\u8db3 \\(L(i) \\le j \\le R(i)\\) \u9650\u5236\u7684 \\((x_j, y_j)\\) \u4ee3\u5165\u76f4\u7ebf\uff0c\u4f7f\u5f97 \\(b_i\\) \u6700\u5c0f\u3002 \u53ef\u4ee5\u6ce8\u610f\u5230\uff0c\u5728\u53d6 \\(\\min\\) \u65f6\uff0c\u53ea\u6709\u4e0b\u51f8\u58f3\u4e0a\u7684\u70b9\u53ef\u4ee5\u4f5c\u4e3a\u6700\u4f18\u7684\u51b3\u7b56\u70b9\uff1a \uff08\u8fd9\u662f\u4e0b\u9762\u4f8b\u9898\u7684\u4f8b\u5b50\uff0c\u5b83\u7684 \\(y_j = dp(j), x_j = sumc(j)\\) \uff09 \u4e8e\u662f\uff0c\u5728 \\(k_i\\) \u968f \\(k\\) \u5355\u8c03\u9012\u589e\uff0c\u4e14\u53ea\u9700\u8981\u5728\u5c3e\u90e8\u63d2\u5165\u51b3\u7b56 \u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7528\u5355\u8c03\u961f\u5217\u6765\u7ef4\u62a4\u4e0b\u51f8\u58f3\u4e0a\u7684\u70b9\u8fdb\u884c\u51b3\u7b56\u5c31\u884c\u4e86\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u8bbe \\(K(u, v)\\) \u8868\u793a\u7ecf\u8fc7 \\((x_u, y_u),(x_v,y_v)\\) \u7684\u76f4\u7ebf\u659c\u7387\uff0c\u6211\u4eec\u4fdd\u8bc1\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5355\u8c03\u961f\u5217 \\(q(l, r)\\) \uff0c\u6ee1\u8db3 \\(\\forall i\\in (l,r)\\) \uff0c\u6709 \\(K(i - 1, i) < K(i, i + 1)\\) \u3002 \u7136\u540e\u51b3\u7b56\u5b8c\u4e00\u4e2a\u70b9 \\(i\\) \u4e4b\u540e\u8003\u8651\u63d2\u5165 \\((x_i, y_i)\\) \uff0c\u8fd9\u6837\u5c31\u80fd\u6ee1\u8db3\u524d\u7f00\u4e0b\u6807\u9650\u5236 \\(j < i\\) \u4e86\uff08\u601d\u60f3\u7c7b\u4f3c\u4e8c\u7ef4\u6570\u70b9\uff09\uff0c\u5982\u679c\u662f\u66f4\u4e00\u822c\u7684 \\(L(i), R(i)\\) \u968f \\(i\\) \u5355\u8c03\u9012\u589e\u7684\u7ea6\u675f\uff0c\u5c31\u5728\u5355\u8c03\u961f\u5217\u4e2d\u6392\u9664\u5197\u6742\u5373\u53ef\uff0c\u6574\u4e2a\u8fc7\u7a0b\u7c7b\u4f3c\u4e0b\u56fe\uff1a \u53ef\u4ee5\u6ce8\u610f\u5230\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u7684 \\(k_i\\) \uff0c\u4f7f\u5f97\u7b54\u6848 \\(b_i\\) \u6700\u5c0f\u7684 \\(j\\) \uff0c\u4e00\u5b9a\u6ee1\u8db3 \\(K(i - 1, i) < k_i < K(i, i + 1)\\) \uff0c\u4e8e\u662f\u6211\u4eec\u4e0d\u65ad\u5f39\u6389\u961f\u5934\uff0c\u76f4\u5230\u627e\u5230\u8fd9\u4e2a\u70b9\u5373\u53ef\u3002 \u5f53\u7136\uff0c\u5982\u679c \\(k_i\\) \u7684\u53d8\u5316\u4e0d\u662f\u5355\u8c03\u7684\uff08\u6ca1\u6cd5\u4f7f\u7528\u5355\u8c03\u961f\u5217\uff09\uff0c\u4ea6\u6216\u662f\u9700\u8981\u652f\u6301\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165/\u5220\u9664\u51b3\u7b56\uff0c\u53c8\u6216\u8005\u662f \\(L(i), R(i)\\) \u7684\u53d8\u5316\u5f88\u4e0d\u597d\u5904\u7406\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u4e8c\u5206/\u5e73\u8861\u6811/cdq\u5206\u6cbb/\u674e\u8d85\u6811\u6765\u7ef4\u62a4\u8fd9\u4e2a\u51f8\u58f3\uff0c\u8fd9\u4e2a\u5728\u4e0b\u9762\u4f1a\u63d0\u5230\u3002 \u4f8b\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 \\(n\\) \u4e2a\u4efb\u52a1\u6392\u6210\u4e00\u4e2a\u5e8f\u5217\u5728\u4e00\u53f0\u673a\u5668\u4e0a\u7b49\u5f85\u5b8c\u6210\uff08\u987a\u5e8f\u4e0d\u5f97\u6539\u53d8\uff09\uff0c\u8fd9 \\(n\\) \u4e2a\u4efb\u52a1\u88ab\u5206\u6210\u82e5\u5e72\u6279\uff0c\u6bcf\u6279\u5305\u542b\u76f8\u90bb\u7684\u82e5\u5e72\u4efb\u52a1\u3002 \u4ece\u96f6\u65f6\u523b\u5f00\u59cb\uff0c\u8fd9\u4e9b\u4efb\u52a1\u88ab\u5206\u6279\u52a0\u5de5\uff0c\u7b2c \\(i\\) \u4e2a\u4efb\u52a1\u5355\u72ec\u5b8c\u6210\u6240\u9700\u7684\u65f6\u95f4\u4e3a \\(t_i\\) \u3002\u5728\u6bcf\u6279\u4efb\u52a1\u5f00\u59cb\u524d\uff0c\u673a\u5668\u9700\u8981\u542f\u52a8\u65f6\u95f4 \\(s\\) \uff0c\u800c\u5b8c\u6210\u8fd9\u6279\u4efb\u52a1\u6240\u9700\u7684\u65f6\u95f4\u662f\u5404\u4e2a\u4efb\u52a1\u9700\u8981\u65f6\u95f4\u7684\u603b\u548c\uff08\u540c\u4e00\u6279\u4efb\u52a1\u5c06\u5728\u540c\u4e00\u65f6\u523b\u5b8c\u6210\uff09\u3002 \u6bcf\u4e2a\u4efb\u52a1\u7684\u8d39\u7528\u662f\u5b83\u7684\u5b8c\u6210\u65f6\u523b\u4e58\u4ee5\u4e00\u4e2a\u8d39\u7528\u7cfb\u6570 \\(c_i\\) \u3002\u8bf7\u786e\u5b9a\u4e00\u4e2a\u5206\u7ec4\u65b9\u6848\uff0c\u4f7f\u5f97\u603b\u8d39\u7528\u6700\u5c0f\u3002 \u6570\u636e\u8303\u56f4\uff1a I. \\(n \\le 500,1\\le s \\le 50,1\\le t_i,c_i \\le 100\\) II. \\(n\\le 5000,1\\le s \\le 50,1\\le t_i,c_i \\le 100\\) III. \\(n \\le 3\\times 10^5,1\\le s \\le 512,1\\le t_i,c_i \\le 512\\) IV. \u6761\u4ef6\u540c III\uff0c \\(t_i\\) \u53ef\u80fd\u662f\u8d1f\u6570\u3002 V. \u6761\u4ef6\u540c IV, \\(c_i\\) \u53ef\u80fd\u662f\u8d1f\u6570\u3002 I. \u66b4\u529b \u03c8(\uff40\u2207\u00b4)\u03c8 \u8bbe \\(dp(i, j)\\) \u8868\u793a\uff0c\u8003\u8651\u524d \\(i\\) \u4e2a\u4f4d\u7f6e\uff0c\u5206\u4e86 \\(j\\) \u6bb5\u7684\u6700\u5927\u4ef7\u503c\u3002 \u6839\u636e\u5b9a\u4e49\uff0c\u679a\u4e3e\u4e0a\u4e00\u4e2a\u4f4d\u7f6e \\(k\\) \uff0c\u53ef\u4ee5\u5f97\u5230\u65b9\u7a0b\uff1a \\(dp(i, j) = \\min\\limits_{k = 0}^{i - 1}\\{dp(k, j - 1) + \\sum\\limits_{l = k + 1}^i c(l) \\times (s \\times j + \\sum\\limits_{l = 1}^{i} t(i))\\}\\) \u3002 \u9884\u5904\u7406\u524d\u7f00\u548c\uff0c\u53ef\u4ee5\u505a\u5230 \\(O(n^3)\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; const int si = 500 ; const int inf = 0x3f3f3f3f3f3f3f3fll ; int n , s ; int t [ si ], c [ si ]; int dp [ si ][ si ], st [ si ], sc [ si ]; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); memset ( dp , 0x3f , sizeof dp ); cin >> n >> s , dp [ 0 ][ 0 ] = st [ 0 ] = sc [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) cin >> t [ i ] >> c [ i ], st [ i ] = st [ i - 1 ] + t [ i ], sc [ i ] = sc [ i - 1 ] + c [ i ]; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= i ; ++ j ) { for ( int k = 0 ; k < i ; ++ k ) { dp [ i ][ j ] = min ( dp [ i ][ j ], dp [ k ][ j - 1 ] + ( sc [ i ] - sc [ k ]) * ( s * j + st [ i ])); } } } int ans = inf ; for ( int i = 1 ; i <= n ; ++ i ) { ans = min ( ans , dp [ n ][ i ]); } cout << ans << endl ; return 0 ; } II. \u8d39\u7528\u63d0\u524d\u8ba1\u7b97 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6ce8\u610f\u5230\u672c\u9898\u5e76\u4e0d\u8981\u6c42\u5206\u591a\u5c11\u6bb5\uff0c\u7528 Fence \u7684\u601d\u8def\u53ef\u4ee5\u6539\u8fdb\u4e00\u4e0b\uff1a \u8bbe \\(dp(i)\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\u4f4d\u7f6e\uff0c\u5206\u4e86\u82e5\u5e72\u6bb5\u7684\u4ee3\u4ef7\u6700\u5c0f\u503c\uff0c\u679a\u4e3e\u4e0a\u4e00\u4e2a\u4f4d\u7f6e \\(j\\) \u5373\u53ef\u8f6c\u79fb\u3002 \u4f46\u662f\u8f6c\u79fb\u7684\u65f6\u5019\u5e76\u4e0d\u80fd\u77e5\u9053\u673a\u5668\u542f\u52a8\u4e86\u591a\u5c11\u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u7528\u4e00\u79cd\u53eb\u8d39\u7528\u63d0\u524d\u8ba1\u7b97\u7684\u601d\u60f3\uff0c\u77e5\u9053\u8fd9\u91cc\u5df2\u7ecf\u542f\u52a8\u4e86\u4e00\u6b21\u4e86\uff0c\u5c31\u628a\u5b83\u4f1a\u5bf9\u4e4b\u540e\u7684\u6240\u6709\u72b6\u6001\u505a\u7684\u8d21\u732e\u76f4\u63a5\u52a0\u5230\u5f53\u524d\u72b6\u6001\u91cc\u9762\uff0c\u4e5f\u5c31\u662f\uff0c\u5bf9\u4e8e\u540e\u9762\u7684\u6240\u6709\u4efb\u52a1\uff0c\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e9b\u4efb\u52a1\u53c8\u591a\u51fa\u4e86 \\(s\\) \u7684\u65f6\u95f4\uff0c\u90a3\u4e48\u51b3\u7b56\u5230\u540e\u9762\u7684\u4efb\u52a1\u65f6\uff0c\u5f71\u54cd\u5c31\u88ab\u6d88\u9664\u4e86\u3002 \u53ef\u4ee5\u5f97\u5230\uff1a \\(dp(i) = \\min\\limits_{j = 0}^{i - 1} \\{dp(j) + \\sum\\limits_{k = j + 1}^{n} c(k) \\times s + \\sum\\limits_{k = j + 1}^{i} c(k) \\times \\sum\\limits_{k = 1}^{i} t(i)\\}\\) \u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u662f\u628a\u4e0a\u9762\u90a3\u4e2a\u65b9\u7a0b\u7684 \\(s \\times j \\times \\sum\\limits_{l = k + 1}^{i} c(l)\\) \u79fb\u52a8\u5230\u524d\u9762\u7684\u72b6\u6001\u8fdb\u884c\u8ba1\u7b97\u4e86\u3002 \u590d\u6742\u5ea6 \\(O(n^2)\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; const int si = 5e3 + 10 ; const int inf = 0x3f3f3f3f3f3f3f3fll ; int n , s ; int t [ si ], c [ si ]; int st [ si ], sc [ si ]; int dp [ si ]; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); memset ( dp , 0x3f , sizeof dp ); dp [ 0 ] = st [ 0 ] = sc [ 0 ] = 0 , cin >> n >> s ; for ( int i = 1 ; i <= n ; ++ i ) cin >> t [ i ] >> c [ i ], st [ i ] = st [ i - 1 ] + t [ i ], sc [ i ] = sc [ i - 1 ] + c [ i ]; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 0 ; j < i ; ++ j ) { dp [ i ] = min ( dp [ i ], dp [ j ] + ( sc [ n ] - sc [ j ]) * s + ( sc [ i ] - sc [ j ]) * st [ i ]); } } cout << dp [ n ] << endl ; return 0 ; } III. \u659c\u7387\u4f18\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8003\u8651\u7528\u524d\u7f00\u548c\u5199\u4e0b II \u7684\u5f0f\u5b50\uff1a \\(dp(i) = \\min\\limits_{j = 0}^{i - 1}\\{dp(j) + (sc(n) - sc(j)) \\times s + (sc(i) - sc(j)) \\times st(i)\\}\\) \u4e58\u5f00\uff1a \\(dp(i) = \\min\\limits_{j = 0}^{i - 1}\\{dp(j) + sc(n) \\times s - sc(j) \\times s + sc(i) \\times st(i) - sc(j) \\times st(i)\\}\\) \u5957\u7528\u659c\u7387\u4f18\u5316\u7684\u677f\u5b50\uff0c\u6211\u4eec\u53bb\u6389 \\(\\min\\) \uff1a \\(dp(i) = dp(j) + sc(n) \\times s - sc(j) \\times s + sc(i) \\times st(i) - sc(j) \\times st(i)\\) \u5199\u6210\u4e00\u6b21\u51fd\u6570 \\(b = -kx + y\\) \u7684\u5f62\u5f0f\uff1a \\(dp(i) - sc(i) \\times st(i) - sc(n) \\times s = -(st(i) + s) \\times sc(j) + dp(j)\\) \u6240\u4ee5 \\((x, y)\\) \u8fd9\u4e9b\u70b9\u5c31\u662f \\((sc(j), dp(j))\\) \u7684\u5f62\u5f0f\uff0c\u6211\u4eec\u73b0\u5728\u9700\u8981\u8ba9 \\(dp(i)\\) \u5c3d\u53ef\u80fd\u7684\u5c0f\uff0c\u5c31\u662f\u8ba9\u4ee5 \\((st(i) + s)\\) \u4e3a\u659c\u7387\u7684\u76f4\u7ebf\u7ecf\u8fc7\u4e00\u4e2a\u6700\u4f18\u7684 \\((sc(j), dp(j))\\) \u3002 \u56e0\u4e3a\u4e0b\u6807\u9650\u5236\u662f \\(j \\in [0, i)\\) \uff0c \\(k_i\\) \u968f \\(i\\) \u5355\u8c03\u9012\u589e\uff0c\u4e14\u53ea\u9700\u8981\u5728\u672b\u5c3e\u63d2\u5165\u51b3\u7b56 \uff0c\u6240\u4ee5\u4e00\u4e2a\u4e00\u4e2a\u51b3\u7b56\u5b8c\u63d2\u5165\u5355\u8c03\u961f\u5217\u5c31\u597d\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; const int si = 5e3 + 10 ; const int inf = 0x3f3f3f3f3f3f3f3fll ; int n , s ; int t [ si ], c [ si ]; int st [ si ], sc [ si ], dp [ si ]; int q [ si ], l , r ; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); st [ 0 ] = sc [ 0 ] = 0 ; memset ( q , 0 , sizeof q ), l = 1 , r = 1 ; memset ( dp , 0x3f , sizeof dp ), dp [ 0 ] = 0 ; // \u8ba9 (x0, y0) \u5165\u961f\uff08j \u53ef\u4ee5\u53d6\u5230 0\uff09 // \u961f\u5217\u672c\u8eab\u8fd8\u662f\u95ed\u533a\u95f4\uff0c\u4f46\u662f\u4e3a\u4e86\u4fdd\u8bc1 l + 1, r - 1 \u4e0d\u4f1a\u8d8a\u754c\uff0c\u6240\u4ee5\u5199\u7684\u662f l < r. cin >> n >> s ; for ( int i = 1 ; i <= n ; ++ i ) cin >> t [ i ] >> c [ i ], sc [ i ] = sc [ i - 1 ] + c [ i ], st [ i ] = st [ i - 1 ] + t [ i ]; for ( int i = 1 ; i <= n ; ++ i ) { while ( l < r && dp [ q [ l + 1 ]] - dp [ q [ l ]] <= ( st [ i ] + s ) * ( sc [ q [ l + 1 ]] - sc [ q [ l ]])) ++ l ; dp [ i ] = dp [ q [ l ]] - ( st [ i ] + s ) * sc [ q [ l ]] + sc [ i ] * st [ i ] + sc [ n ] * s ; while ( l < r && ( dp [ q [ r ]] - dp [ q [ r - 1 ]]) * ( sc [ i ] - sc [ q [ r ]]) >= ( dp [ i ] - dp [ q [ r ]]) * ( sc [ q [ r ]] - sc [ q [ r - 1 ]])) -- r ; q [ ++ r ] = i ; } // \u4e3a\u4e86\u907f\u514d\u7cbe\u5ea6\u95ee\u9898\uff0c\u76f4\u63a5\u628a\u659c\u7387\u7684\u5f0f\u5b50\u5199\u51fa\u6765\uff0c\u5206\u6bcd\u4e58\u5230\u5bf9\u9762\u3002 cout << dp [ n ] << endl ; return 0 ; } IV. \u4e8c\u5206 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6ce8\u610f\u5230 \\(t_i\\) \u53ef\u80fd\u662f\u8d1f\u6570\uff0c\u610f\u5473\u7740 \\(\\exists i, st(i) < 0\\) \u3002 \u4e0b\u6807\u9650\u5236\u4f9d\u7136\u53ef\u4ee5\u4e00\u4e2a\u4e00\u4e2a\u63d2\u5165\u6765\u6ee1\u8db3\uff0c\u4f46\u662f\u56e0\u4e3a \\(k_i\\) \u4e0d\u662f\u5355\u8c03\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u6ca1\u6cd5\u76f4\u63a5\u6254\u5230\u5355\u8c03\u961f\u5217\u91cc\u9762\u5747\u644a \\(O(1)\\) \u8f6c\u79fb\uff08\u4e0d\u7136\u4f60\u66f4\u65b0\u5b8c \\(i - 1\\) \u7684\u65f6\u5019\u53ef\u80fd\u628a \\(i\\) \u7684\u6700\u4f18\u9009\u62e9\u7ed9\u5f39\u6389\uff09\u3002 \u6ce8\u610f\u5230 \\(sc(i)\\) \u4ecd\u65e7\u662f\u5355\u8c03\u7684\uff0c\u6362\u53e5\u8bdd\u8bf4\u6211\u4eec\u53ea\u9700\u8981\u652f\u6301\u5728\u672b\u5c3e\u63d2\u5165\u51b3\u7b56\u70b9. \u90a3\u4e48\u6211\u4eec\u4ecd\u65e7\u53ef\u4ee5\u4f7f\u7528\u5355\u8c03\u961f\u5217\u7ef4\u62a4\u8fd9\u4e2a\u51f8\u58f3\uff0c\u4f46\u662f\u73b0\u5728\uff0c\u6211\u4eec\u9700\u8981\u5728\u51f8\u58f3\u4e0a\u76f4\u63a5\u4e8c\u5206\u4e00\u4e2a\u4f4d\u7f6e \\(e\\) \uff0c\u4f7f\u5f97 \\(K(e - 1, e) < k_i < K(e, e + 1)\\) \u800c\u4e0d\u662f\u76f4\u63a5\u53d6\u961f\u5934\u66f4\u65b0\uff0c\u6ce8\u610f\u9700\u8981\u7279\u6b8a\u5224\u65ad\u5934\u5c3e\u3002 \u6ce8\u610f\u8fd9\u91cc\u5e94\u8be5\u662f\u5224 \\(q(mid), q(mid + 1)\\) \u6784\u6210\u7684\u76f4\u7ebf\u659c\u7387\uff0c\u4e0d\u7136\u4ee5\u8fd9\u6837\u7684\u4e8c\u5206\u65b9\u5f0f\u4f1a\u51fa\u9519\uff08\u539f\u56e0\u5f88\u7b80\u5355\uff0c\u53ef\u4ee5\u624b\u6a21\u4e00\u4e0b\uff09\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 // author : black_trees #include <cmath> #include <cstdio> #include <cctype> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; using i128 = __int128_t ; template < typename __Tp > void read ( __Tp & x ) { int f = x = 0 ; char ch = getchar (); for (; ! isdigit ( ch ); ch = getchar ()) if ( ch == '-' ) f = 1 ; for (; isdigit ( ch ); ch = getchar ()) x = ( x << 1 ) + ( x << 3 ) + ( ch ^ 48 ); if ( f ) x = - x ; } void read ( char & ch ) { for ( ch = getchar (); isspace ( ch ); ch = getchar ()); } template < typename __Tp1 , typename ... __Tp2 > void read ( __Tp1 & x , __Tp2 & ... y ) { read ( x ), read ( y ...); } template < typename __Tp > void write ( __Tp x ) { if ( x < 0 ) putchar ( '-' ), x = - x ; if ( x > 9 ) write ( x / 10 ); putchar ( x % 10 + 48 ); } void write ( char ch ) { putchar ( ch ); } void write ( const char * s ) { for (; * s ; ++ s ) putchar ( * s ); } template < typename __Tp1 , typename ... __Tp2 > void write ( __Tp1 x , __Tp2 ... y ) { write ( x ), write ( y ...); } const int si = 3e5 + 10 ; int n , q [ si ], s , l , r ; i128 dp [ si ], st [ si ], sc [ si ]; int find ( int slope ) { if ( l == r ) return q [ l ]; int L = l , R = r ; while ( L < R ) { int mid = ( L + R ) >> 1 ; if ( dp [ q [ mid + 1 ]] - dp [ q [ mid ]] <= slope * ( sc [ q [ mid + 1 ]] - sc [ q [ mid ]])) L = mid + 1 ; else R = mid ; } return q [ L ]; } int main () { // cin.tie(0) -> sync_with_stdio(false); // cin.exceptions(cin.failbit | cin.badbit); memset ( q , 0 , sizeof q ); memset ( dp , 0x3f , sizeof dp ); dp [ 0 ] = 0 , l = 1 , r = 1 ; read ( n , s ); for ( int i = 1 ; i <= n ; ++ i ) { i128 t , c ; read ( t , c ); st [ i ] = st [ i - 1 ] + t , sc [ i ] = sc [ i - 1 ] + c ; } for ( int i = 1 ; i <= n ; ++ i ) { int p = find ( s + st [ i ]); dp [ i ] = dp [ p ] - ( s + st [ i ]) * sc [ p ] + st [ i ] * sc [ i ] + s * sc [ n ]; while ( l < r && ( dp [ q [ r ]] - dp [ q [ r - 1 ]]) * ( sc [ i ] - sc [ q [ r ]]) >= ( dp [ i ] - dp [ q [ r ]]) * ( sc [ q [ r ]] - sc [ q [ r - 1 ]])) -- r ; q [ ++ r ] = i ; } write ( dp [ n ], endl ); return 0 ; } V. \u5e73\u8861\u6811/CDQ \u5206\u6cbb/\u674e\u8d85\u6811 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6ce8\u610f\u5230 \\(\\exists i, sc(i) < 0\\) \uff0c\u4e5f\u5c31\u662f\u8bf4 \\(sc(i)\\) \u4e5f\u4e0d\u662f\u5355\u8c03\u9012\u589e\u7684\u4e86\uff0c\u6211\u4eec\u53ef\u80fd\u5728\u4efb\u610f\u7684\u4f4d\u7f6e\u63d2\u5165\u51b3\u7b56\u70b9\u3002 \u4e0b\u6807\u9650\u5236\u8fd8\u662f\u53ef\u4ee5\u4e00\u4e2a\u4e00\u4e2a\u63d2\u5165\u6765\u6ee1\u8db3\uff0c\u90a3\u4e48\u6709\u4e00\u4e2a\u4e0d\u52a8\u8111\u5b50\u7684\u505a\u6cd5\uff0c\u76f4\u63a5\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u51f8\u58f3\uff0c\u4e8c\u5206\u8f6c\u5316\u4e3a\u5728\u5e73\u8861\u6811\u4e0a\u4e8c\u5206\u3002 \u8fd8\u6709\u4e00\u79cd\u806a\u660e\u4e00\u70b9\u7684\u505a\u6cd5\u662f\u4f7f\u7528 CDQ \u5206\u6cbb\u3002 \u5c31\u662f\u8bf4\uff0cCDQ \u5206\u6cbb\u7684\u4e00\u4e2a\u91cd\u8981\u5e94\u7528\u5c31\u662f\uff0c\u628a\u4e00\u4e2a\u52a8\u6001\u95ee\u9898\u8f6c\u5316\u4e3a\u9759\u6001\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u601d\u60f3\uff0c\u5c06\u9700\u8981\u52a8\u6001\u63d2\u5165\u7684\u51f8\u58f3\u8f6c\u5316\u4e3a\u9759\u6001\u7684\u51f8\u58f3\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u8bbe \\(\\text{Solve}(l, r)\\) \u8868\u793a\u8ba1\u7b97 \\([l, r]\\) \u7684 \\(dp(i)\\) \uff0c\u5206\u4e09\u6b65\uff1a \u9012\u5f52\u8ba1\u7b97 \\(\\text{Solve}(l, mid)\\) \u3002 \u6b64\u65f6 \\(dp(l \\sim mid)\\) \u5df2\u7ecf\u8ba1\u7b97\u51fa\u6765\uff0c\u6211\u4eec\u8003\u8651\u7ef4\u62a4 \\([l, mid]\\) \u8fd9\u4e00\u6bb5\u7684\u6240\u6709\u51b3\u7b56\u70b9\u6784\u6210\u7684\u51f8\u58f3\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u4f7f\u7528\u5355\u8c03\u961f\u5217\uff0c\u4f46\u662f\u8981\u5148\u6309\u7167 \\(x\\) \u6392\u5e8f\uff08\u56e0\u4e3a\u672c\u6765\u5c31\u662f\u4e71\u5e8f\u561b\uff0c\u4f60\u73b0\u5728\u53ea\u66f4\u65b0 \\([mid + 1, r]\\) \u7684\uff0c\u524d\u9762\u7684\u4e0b\u6807\u987a\u5e8f\u6ca1\u5565\u5f71\u54cd\uff0c\u6392\u5e8f\u4e5f\u6ca1\u4e8b\uff0c\u53ea\u8981\u6700\u540e\u590d\u539f\u4e00\u4e0b\u5c31\u597d\u4e86\uff09\uff0c\u7136\u540e\u6211\u4eec\u5bf9\u4e8e \\(dp(mid + 1\\sim r)\\) \uff0c\u8003\u8651\u4ece\u8fd9\u4e2a\u51f8\u58f3\u4e0a\u66f4\u65b0\u7b54\u6848\uff0c\u8fd9\u90e8\u5206\u53ef\u4ee5\u4e8c\u5206\uff08\u56e0\u4e3a\u659c\u7387\u4e0d\u662f\u5355\u8c03\u7684\u561b\uff09\u3002 \u9012\u5f52\u8ba1\u7b97 \\(\\text{Solve}(mid + 1, r)\\) \uff0c\u6211\u4eec\u8fd9\u91cc\u4f7f\u7528\u7684\u662f\u201c\u4e2d\u5e8f\u904d\u5386\u201d\uff0c\u6240\u4ee5 dp \u8f6c\u79fb\u7684\u6b63\u786e\u6027\u662f\u6709\u4fdd\u8bc1\u7684\uff0c\u800c \\(dp(mid + 1, r)\\) \u663e\u7136\u4e0d\u53ef\u80fd\u53ea\u5728 \\([l, mid]\\) \u4e0a\u53d6\u5230\u6700\u4f18\uff0c\u8fd9\u4e2a\u9012\u5f52\u8ba1\u7b97\u7684\u8fc7\u7a0b\u5c31\u53ef\u4ee5\u76f4\u63a5\u7b97\u51fa \\(dp(mid + 1, r)\\) \u3002 \u5982\u679c\u6709\u5220\u9664\u64cd\u4f5c\uff0c\u6216\u8005\u8bf4\u5bf9\u4e8e\u4e00\u4e2a \\(i\\) \uff0c\u5b83\u7684 \\(L(i), R(i)\\) \u53d8\u5316\u5f88\u4e0d\u5747\u5300\uff0c\u6211\u4eec\u4ecd\u65e7\u53ef\u4ee5\u4f7f\u7528 CDQ \u5206\u6cbb\uff0c\u6bcf\u6b21\u5728\u51f8\u58f3\u4e0a\u4e8c\u5206\u7684\u65f6\u5019\u5c31\u76f4\u63a5\u53d6\u6ee1\u8db3 \\([u, v] \\in [L(i), R(i)]\\) \u7684\u4e00\u6bb5\u6765\u4e8c\u5206\u5c31\u884c\u4e86\u3002 \u5982\u679c\u51fa\u9898\u4eba\u6bd4\u8f83**\uff0c\u7ed9\u4f60\u6765\u4e00\u4e2a\u4e2d\u95f4\u6263\u6389\u4e00\u4e2a\u7684\u5220\u9664\uff0c\u5c31\u6bd4\u8f83\u6076\u4fd7\uff0c\u4e0d\u8fc7\u597d\u50cf\u53ef\u4ee5\u8f6c\u5316\u6210 CDQ \u91cc\u9762\u7684 \u4fee\u6539-\u8be2\u95ee\u5173\u7cfb\uff1f\u662f\u4e0d\u662f\u8fd8\u53ef\u4ee5\u7ebf\u6bb5\u6811\u5206\u6cbb + \u674e\u8d85\u6811\uff1f\u4e0d\u8fc7\u8fd9\u6837\u5b50\u7684\u8bdd\uff0c\u5e73\u8861\u6811\u7ef4\u62a4\u5c31\u662f\u6700\u7b80\u5355\u7684\u4e86\uff0c\u8fd9\u91cc\u7528 Leafy Tree \u53ef\u80fd\u4f1a\u6bd4\u8f83\u7b80\u5355\u3002 \u674e\u8d85\u6811\u7684\u8bdd\uff0c\u56e0\u4e3a\u4e0d\u652f\u6301\u5220\u9664\u6240\u4ee5\u6709\u4e00\u5b9a\u7684\u5c40\u9650\u6027\uff0c\u6240\u4ee5\u5927\u90e8\u5206\u65f6\u5019\u6211\u4eec\u8fd8\u662f\u4f7f\u7528 CDQ \u5206\u6cbb\uff0c\u4e0d\u8fc7\u8fd9\u9898\u56e0\u4e3a \\(L(i), R(i)\\) \u7684\u9650\u5236\u6bd4\u8f83 trivial \u6240\u4ee5\u674e\u8d85\u6811\u4e5f\u662f\u53ef\u4ee5\u505a\u7684\u3002 Tips\uff1a\u8bb0\u5f97\u5224\u659c\u7387\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\u54e6\u3002 Code(CDQ,\u4e0d\u5e26\u5220\u9664\u64cd\u4f5c) \u4ee3\u7801\u6682\u7565\uff0c\u5df2\u7ecf\u67e5\u51fa\u9519\u4e86\uff0c\u627e\u4e2a\u65f6\u95f4\u6765\u5199\u3002 \u603b\u7ed3 \u03c8(\uff40\u2207\u00b4)\u03c8 \u659c\u7387\u4f18\u5316\u7684\u601d\u60f3\u5728\u6cdb\u5316\u91cc\u5df2\u7ecf\u8bf4\u4e86\uff0c\u5728\u8fd9\u91cc\u63d0\u4e00\u63d0\u5bf9\u4e8e\u51b3\u7b56\u70b9\u96c6\u5408\u7684\u7ef4\u62a4\u65b9\u5f0f\uff1a \u5bf9\u4e8e \\(L(i), R(i)\\) \u7684\u4e0b\u6807\u9650\u5236\uff1a \u5982\u679c\u662f\u7c7b\u4f3c\u672c\u9898\u7684 \\(0 \\le j < i\\) \uff0c\u8bf4\u660e\u4e0d\u9700\u8981\u5220\u9664\u51b3\u7b56\u70b9\uff0c\u800c\u4e14\u6bcf\u6b21\u53ea\u4f1a\u5728\u5c3e\u90e8\u63d2\u5165\u51b3\u7b56\uff0c\u6211\u4eec\u679a\u4e3e\u5c31\u597d\u4e86 \u5982\u679c \\(L(i), R(i)\\) \u662f\u968f \\(i\\) \u5355\u8c03\u53d8\u5316\u7684\uff0c\u6211\u4eec\u5c31\u9700\u8981\u4f7f\u7528\u5355\u8c03\u961f\u5217\u6765\u6392\u9664\u5197\u6742 \u5982\u679c\u662f\u6ca1\u5565\u5355\u8c03\u6027\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e00\u822c\u8981\u652f\u6301\u5728\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u5220\u9664\u51b3\u7b56\u70b9\uff0c\u5c31\u9700\u8981\u4f7f\u7528\u5e73\u8861\u6811\u6216\u8005 CDQ \u5206\u6cbb\u3002 \u5bf9\u4e8e\u659c\u7387\u7684\u9650\u5236\uff0c\u53ea\u9700\u8981\u770b\u659c\u7387\u662f\u5426\u5355\u8c03\u9012\u589e\u5373\u53ef\uff1a \u5982\u679c\u659c\u7387\u968f \\(i\\) \u5355\u8c03\u9012\u589e\uff0c\u90a3\u4e48\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5355\u8c03\u961f\u5217\u53d6\u961f\u5934\u8f6c\u79fb\u3002 \u5982\u679c\u659c\u7387\u4e0d\u968f \\(i\\) \u5355\u8c03\u9012\u589e\uff0c\u6211\u4eec\u5c31\u9700\u8981\u5728\u51f8\u58f3\u4e0a\u4e8c\u5206\u7b54\u6848\u627e\u5230\u6700\u4f18\u51b3\u7b56\u70b9\u3002 \u5bf9\u4e8e \\(x_j\\) \u7684\u9650\u5236\uff0c\u53ea\u9700\u8981\u770b\u5b83\u662f\u5426\u968f \\(j\\) \u5355\u8c03\u9012\u589e\u5373\u53ef\u3002 \u5982\u679c\u5b83\u968f \\(j\\) \u5355\u8c03\u9012\u589e\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ea\u9700\u8981\u4e00\u4e2a\u4e00\u4e2a\u63d2\u5165\u51b3\u7b56\u5c31\u884c\u3002 \u5982\u679c\u5b83\u4e0d\u968f \\(j\\) \u5355\u8c03\u9012\u589e\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u4f7f\u7528\u5e73\u8861\u6811 / CDQ \u5206\u6cbb\u6765\u652f\u6301\u63d2\u5165\u51b3\u7b56\u70b9\u7684\u64cd\u4f5c\uff0c\u6ce8\u610f CDQ \u7ef4\u62a4\u7684\u65f6\u5019\u8fd8\u8981\u5bf9\u524d\u4e00\u534a\u6392\u5e8f\u3002 Last but not least: \u5982\u679c\u4f7f\u7528\u4ea4\u53c9\u76f8\u4e58\u6765\u907f\u514d\u7cbe\u5ea6\u95ee\u9898\uff0c\u8981\u5c0f\u5fc3\u6570\u636e\u8303\u56f4\uff0c\u5982\u679c\u76f4\u63a5\u4f7f\u7528\u6d6e\u70b9\u6570\uff0c\u8981\u8bb0\u5f97\uff0ceps \u4e0d\u8981\u5f00\u592a\u5c0f\u4e86\uff0c\u8981\u89c6\u60c5\u51b5\u800c\u5b9a\u3002 \u4e60\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 \u89c1 Vjudge \u659c\u7387\u4f18\u5316\u4e13\u9898","title":"\u659c\u7387\u4f18\u5316"},{"location":"algor/dp/opt/convex-optimize/#_1","text":"\u53ef\u4ee5\u659c\u7387\u4f18\u5316\u7684\u65b9\u7a0b\u901a\u5e38\u5177\u6709\u4ee5\u4e0b\u5f62\u5f0f\uff1a \\(dp(i) = \\min\\limits_{j = L(i)}^{R(i)}\\{dp(j) + val(i, j)\\}\\) \uff0c\u5176\u4e2d \\(val(i, j)\\) \u4e3a\u4e00\u4e2a\u5173\u4e8e \\(i, j\\) \u7684\u591a\u9879\u5f0f\uff0c \\(L(i), R(i)\\) \u4e3a\u4e00\u4e2a\u5173\u4e8e \\(i\\) \u7684\u51fd\u6570\uff0c\u7528\u4e8e\u9650\u5236 \\(j\\) \u7684\u8303\u56f4\u3002 \u5e76\u4e14 \\(val(i, j)\\) \u5b58\u5728\u5f62\u5982 \\(i \\times j\\) \u7684\u9879\uff0c\u4e0e\u5355\u8c03\u961f\u5217\u4f18\u5316\u7684\u4ec5\u6709 \\(i, j\\) \u9879\u4e0d\u540c\u3002 \u659c\u7387\u4f18\u5316\u7684\u601d\u60f3\u662f\uff0c\u5148\u62c6\u6389 \\(L(i), R(i)\\) \u7684\u9650\u5236\uff0c\u5c06\u6240\u6709\u51b3\u7b56\u70b9\u8f6c\u5316\u4e3a\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684\u70b9\uff0c\u5c06\u65b9\u7a0b\u8f6c\u5316\u4e3a\u4e00\u4e2a\u4e00\u6b21\u51fd\u6570\u6765\u8fdb\u884c\u51b3\u7b56\uff0c\u5728\u51b3\u7b56\u65f6\u518d\u52a0\u4e0a \\(L(i), R(i)\\) \u7684\u9650\u5236\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u5efa\u7acb\u4ee5\u4e0b\u6620\u5c04\uff1a \u5c06\u4ec5\u548c \\(j\\) \u76f8\u5173\u7684\u9879\u770b\u4f5c \\(y\\) \uff0c\u8bb0\u8fd9\u4e9b\u9879\u7ec4\u6210\u7684\u591a\u9879\u5f0f\u4e3a \\(y_i\\) \uff0c\u5f62\u5982 \\(dp(j) + v(j) + \\dots\\) \u3002 \u5c06\u548c \\(i,j\\) \u540c\u65f6\u76f8\u5173\u7684\u9879\u770b\u4f5c \\(k,x\\) \uff0c\u5176\u4e2d \\(i\\) \u8fd9\u4e00\u90e8\u5206\u4f5c\u4e3a \\(k\\) \uff0c\u8bb0\u4e3a \\(k_i\\) \uff0c \\(j\\) \u8fd9\u4e00\u90e8\u5206\u4f5c\u4e3a \\(x\\) \uff0c\u8bb0\u4e3a \\(x_j\\) \uff0c\u5f0f\u5b50\u5f62\u5982 \\(C_1\\times(C_2 - v(i)) \\times w(j)\\) \uff08\u5176\u4e2d \\(C_1,C_2\\) \u4e3a\u5e38\u91cf\uff09\uff0c\u90a3\u4e48 \\(k_i = C_1\\times(C_2 - v(i)), x_j = w(j)\\) \u5c06\u4ec5\u548c \\(i\\) \u76f8\u5173\u7684\u9879\u770b\u4f5c \\(b\\) \uff0c\u8bb0\u4e3a \\(b_i\\) \uff0c\u4e3a\u4e86\u65b9\u4fbf\u6211\u4eec\u628a\u5e38\u91cf\u4e5f\u7b97\u8fdb\u8fd9\u4e00\u90e8\u5206\uff0c\u5f0f\u5b50\u5f62\u5982 \\(dp(i) + v(i) \\times w(i) + C\\) \uff0c\u6211\u4eec\u8981\u6700\u5c0f\u5316\u7684\u5c31\u662f\u8fd9\u4e00\u90e8\u5206\uff08\u672c\u8d28\u662f\u6700\u5c0f\u5316 \\(dp(i)\\) \uff0c\u5176\u5b83\u7684\u662f\u5e38\u91cf\u6240\u4ee5\u65e0\u6240\u8c13\u3002\uff09 \uff08\u4ee5\u4e0a\u7684\u5f0f\u5b50\u53ea\u662f\u505a\u4e00\u4e2a\u53c2\u8003\u7406\u89e3\uff0c\u9700\u8981\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u6765\u6539\u53d8\u3002\uff09 \u7136\u540e\uff0c\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\uff0c\u7ed9\u5b9a\u4e00\u5806\u5e73\u9762\u4e0a\u7684\u70b9 \\((x_j, y_j)\\) \uff0c\u5bf9\u4e8e\u4e00\u6761\u76f4\u7ebf \\(y = k_ix + b_i\\) \uff0c\u6211\u4eec\u9700\u8981\u9009\u62e9\u4e00\u4e2a\u6ee1\u8db3 \\(L(i) \\le j \\le R(i)\\) \u9650\u5236\u7684 \\((x_j, y_j)\\) \u4ee3\u5165\u76f4\u7ebf\uff0c\u4f7f\u5f97 \\(b_i\\) \u6700\u5c0f\u3002 \u53ef\u4ee5\u6ce8\u610f\u5230\uff0c\u5728\u53d6 \\(\\min\\) \u65f6\uff0c\u53ea\u6709\u4e0b\u51f8\u58f3\u4e0a\u7684\u70b9\u53ef\u4ee5\u4f5c\u4e3a\u6700\u4f18\u7684\u51b3\u7b56\u70b9\uff1a \uff08\u8fd9\u662f\u4e0b\u9762\u4f8b\u9898\u7684\u4f8b\u5b50\uff0c\u5b83\u7684 \\(y_j = dp(j), x_j = sumc(j)\\) \uff09 \u4e8e\u662f\uff0c\u5728 \\(k_i\\) \u968f \\(k\\) \u5355\u8c03\u9012\u589e\uff0c\u4e14\u53ea\u9700\u8981\u5728\u5c3e\u90e8\u63d2\u5165\u51b3\u7b56 \u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7528\u5355\u8c03\u961f\u5217\u6765\u7ef4\u62a4\u4e0b\u51f8\u58f3\u4e0a\u7684\u70b9\u8fdb\u884c\u51b3\u7b56\u5c31\u884c\u4e86\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u8bbe \\(K(u, v)\\) \u8868\u793a\u7ecf\u8fc7 \\((x_u, y_u),(x_v,y_v)\\) \u7684\u76f4\u7ebf\u659c\u7387\uff0c\u6211\u4eec\u4fdd\u8bc1\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5355\u8c03\u961f\u5217 \\(q(l, r)\\) \uff0c\u6ee1\u8db3 \\(\\forall i\\in (l,r)\\) \uff0c\u6709 \\(K(i - 1, i) < K(i, i + 1)\\) \u3002 \u7136\u540e\u51b3\u7b56\u5b8c\u4e00\u4e2a\u70b9 \\(i\\) \u4e4b\u540e\u8003\u8651\u63d2\u5165 \\((x_i, y_i)\\) \uff0c\u8fd9\u6837\u5c31\u80fd\u6ee1\u8db3\u524d\u7f00\u4e0b\u6807\u9650\u5236 \\(j < i\\) \u4e86\uff08\u601d\u60f3\u7c7b\u4f3c\u4e8c\u7ef4\u6570\u70b9\uff09\uff0c\u5982\u679c\u662f\u66f4\u4e00\u822c\u7684 \\(L(i), R(i)\\) \u968f \\(i\\) \u5355\u8c03\u9012\u589e\u7684\u7ea6\u675f\uff0c\u5c31\u5728\u5355\u8c03\u961f\u5217\u4e2d\u6392\u9664\u5197\u6742\u5373\u53ef\uff0c\u6574\u4e2a\u8fc7\u7a0b\u7c7b\u4f3c\u4e0b\u56fe\uff1a \u53ef\u4ee5\u6ce8\u610f\u5230\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u7684 \\(k_i\\) \uff0c\u4f7f\u5f97\u7b54\u6848 \\(b_i\\) \u6700\u5c0f\u7684 \\(j\\) \uff0c\u4e00\u5b9a\u6ee1\u8db3 \\(K(i - 1, i) < k_i < K(i, i + 1)\\) \uff0c\u4e8e\u662f\u6211\u4eec\u4e0d\u65ad\u5f39\u6389\u961f\u5934\uff0c\u76f4\u5230\u627e\u5230\u8fd9\u4e2a\u70b9\u5373\u53ef\u3002 \u5f53\u7136\uff0c\u5982\u679c \\(k_i\\) \u7684\u53d8\u5316\u4e0d\u662f\u5355\u8c03\u7684\uff08\u6ca1\u6cd5\u4f7f\u7528\u5355\u8c03\u961f\u5217\uff09\uff0c\u4ea6\u6216\u662f\u9700\u8981\u652f\u6301\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165/\u5220\u9664\u51b3\u7b56\uff0c\u53c8\u6216\u8005\u662f \\(L(i), R(i)\\) \u7684\u53d8\u5316\u5f88\u4e0d\u597d\u5904\u7406\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u4e8c\u5206/\u5e73\u8861\u6811/cdq\u5206\u6cbb/\u674e\u8d85\u6811\u6765\u7ef4\u62a4\u8fd9\u4e2a\u51f8\u58f3\uff0c\u8fd9\u4e2a\u5728\u4e0b\u9762\u4f1a\u63d0\u5230\u3002","title":"\u6cdb\u5316"},{"location":"algor/dp/opt/convex-optimize/#_2","text":"\\(n\\) \u4e2a\u4efb\u52a1\u6392\u6210\u4e00\u4e2a\u5e8f\u5217\u5728\u4e00\u53f0\u673a\u5668\u4e0a\u7b49\u5f85\u5b8c\u6210\uff08\u987a\u5e8f\u4e0d\u5f97\u6539\u53d8\uff09\uff0c\u8fd9 \\(n\\) \u4e2a\u4efb\u52a1\u88ab\u5206\u6210\u82e5\u5e72\u6279\uff0c\u6bcf\u6279\u5305\u542b\u76f8\u90bb\u7684\u82e5\u5e72\u4efb\u52a1\u3002 \u4ece\u96f6\u65f6\u523b\u5f00\u59cb\uff0c\u8fd9\u4e9b\u4efb\u52a1\u88ab\u5206\u6279\u52a0\u5de5\uff0c\u7b2c \\(i\\) \u4e2a\u4efb\u52a1\u5355\u72ec\u5b8c\u6210\u6240\u9700\u7684\u65f6\u95f4\u4e3a \\(t_i\\) \u3002\u5728\u6bcf\u6279\u4efb\u52a1\u5f00\u59cb\u524d\uff0c\u673a\u5668\u9700\u8981\u542f\u52a8\u65f6\u95f4 \\(s\\) \uff0c\u800c\u5b8c\u6210\u8fd9\u6279\u4efb\u52a1\u6240\u9700\u7684\u65f6\u95f4\u662f\u5404\u4e2a\u4efb\u52a1\u9700\u8981\u65f6\u95f4\u7684\u603b\u548c\uff08\u540c\u4e00\u6279\u4efb\u52a1\u5c06\u5728\u540c\u4e00\u65f6\u523b\u5b8c\u6210\uff09\u3002 \u6bcf\u4e2a\u4efb\u52a1\u7684\u8d39\u7528\u662f\u5b83\u7684\u5b8c\u6210\u65f6\u523b\u4e58\u4ee5\u4e00\u4e2a\u8d39\u7528\u7cfb\u6570 \\(c_i\\) \u3002\u8bf7\u786e\u5b9a\u4e00\u4e2a\u5206\u7ec4\u65b9\u6848\uff0c\u4f7f\u5f97\u603b\u8d39\u7528\u6700\u5c0f\u3002 \u6570\u636e\u8303\u56f4\uff1a I. \\(n \\le 500,1\\le s \\le 50,1\\le t_i,c_i \\le 100\\) II. \\(n\\le 5000,1\\le s \\le 50,1\\le t_i,c_i \\le 100\\) III. \\(n \\le 3\\times 10^5,1\\le s \\le 512,1\\le t_i,c_i \\le 512\\) IV. \u6761\u4ef6\u540c III\uff0c \\(t_i\\) \u53ef\u80fd\u662f\u8d1f\u6570\u3002 V. \u6761\u4ef6\u540c IV, \\(c_i\\) \u53ef\u80fd\u662f\u8d1f\u6570\u3002","title":"\u4f8b\u9898"},{"location":"algor/dp/opt/convex-optimize/#i","text":"\u8bbe \\(dp(i, j)\\) \u8868\u793a\uff0c\u8003\u8651\u524d \\(i\\) \u4e2a\u4f4d\u7f6e\uff0c\u5206\u4e86 \\(j\\) \u6bb5\u7684\u6700\u5927\u4ef7\u503c\u3002 \u6839\u636e\u5b9a\u4e49\uff0c\u679a\u4e3e\u4e0a\u4e00\u4e2a\u4f4d\u7f6e \\(k\\) \uff0c\u53ef\u4ee5\u5f97\u5230\u65b9\u7a0b\uff1a \\(dp(i, j) = \\min\\limits_{k = 0}^{i - 1}\\{dp(k, j - 1) + \\sum\\limits_{l = k + 1}^i c(l) \\times (s \\times j + \\sum\\limits_{l = 1}^{i} t(i))\\}\\) \u3002 \u9884\u5904\u7406\u524d\u7f00\u548c\uff0c\u53ef\u4ee5\u505a\u5230 \\(O(n^3)\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; const int si = 500 ; const int inf = 0x3f3f3f3f3f3f3f3fll ; int n , s ; int t [ si ], c [ si ]; int dp [ si ][ si ], st [ si ], sc [ si ]; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); memset ( dp , 0x3f , sizeof dp ); cin >> n >> s , dp [ 0 ][ 0 ] = st [ 0 ] = sc [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) cin >> t [ i ] >> c [ i ], st [ i ] = st [ i - 1 ] + t [ i ], sc [ i ] = sc [ i - 1 ] + c [ i ]; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= i ; ++ j ) { for ( int k = 0 ; k < i ; ++ k ) { dp [ i ][ j ] = min ( dp [ i ][ j ], dp [ k ][ j - 1 ] + ( sc [ i ] - sc [ k ]) * ( s * j + st [ i ])); } } } int ans = inf ; for ( int i = 1 ; i <= n ; ++ i ) { ans = min ( ans , dp [ n ][ i ]); } cout << ans << endl ; return 0 ; }","title":"I. \u66b4\u529b"},{"location":"algor/dp/opt/convex-optimize/#ii","text":"\u6ce8\u610f\u5230\u672c\u9898\u5e76\u4e0d\u8981\u6c42\u5206\u591a\u5c11\u6bb5\uff0c\u7528 Fence \u7684\u601d\u8def\u53ef\u4ee5\u6539\u8fdb\u4e00\u4e0b\uff1a \u8bbe \\(dp(i)\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\u4f4d\u7f6e\uff0c\u5206\u4e86\u82e5\u5e72\u6bb5\u7684\u4ee3\u4ef7\u6700\u5c0f\u503c\uff0c\u679a\u4e3e\u4e0a\u4e00\u4e2a\u4f4d\u7f6e \\(j\\) \u5373\u53ef\u8f6c\u79fb\u3002 \u4f46\u662f\u8f6c\u79fb\u7684\u65f6\u5019\u5e76\u4e0d\u80fd\u77e5\u9053\u673a\u5668\u542f\u52a8\u4e86\u591a\u5c11\u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u7528\u4e00\u79cd\u53eb\u8d39\u7528\u63d0\u524d\u8ba1\u7b97\u7684\u601d\u60f3\uff0c\u77e5\u9053\u8fd9\u91cc\u5df2\u7ecf\u542f\u52a8\u4e86\u4e00\u6b21\u4e86\uff0c\u5c31\u628a\u5b83\u4f1a\u5bf9\u4e4b\u540e\u7684\u6240\u6709\u72b6\u6001\u505a\u7684\u8d21\u732e\u76f4\u63a5\u52a0\u5230\u5f53\u524d\u72b6\u6001\u91cc\u9762\uff0c\u4e5f\u5c31\u662f\uff0c\u5bf9\u4e8e\u540e\u9762\u7684\u6240\u6709\u4efb\u52a1\uff0c\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e9b\u4efb\u52a1\u53c8\u591a\u51fa\u4e86 \\(s\\) \u7684\u65f6\u95f4\uff0c\u90a3\u4e48\u51b3\u7b56\u5230\u540e\u9762\u7684\u4efb\u52a1\u65f6\uff0c\u5f71\u54cd\u5c31\u88ab\u6d88\u9664\u4e86\u3002 \u53ef\u4ee5\u5f97\u5230\uff1a \\(dp(i) = \\min\\limits_{j = 0}^{i - 1} \\{dp(j) + \\sum\\limits_{k = j + 1}^{n} c(k) \\times s + \\sum\\limits_{k = j + 1}^{i} c(k) \\times \\sum\\limits_{k = 1}^{i} t(i)\\}\\) \u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u662f\u628a\u4e0a\u9762\u90a3\u4e2a\u65b9\u7a0b\u7684 \\(s \\times j \\times \\sum\\limits_{l = k + 1}^{i} c(l)\\) \u79fb\u52a8\u5230\u524d\u9762\u7684\u72b6\u6001\u8fdb\u884c\u8ba1\u7b97\u4e86\u3002 \u590d\u6742\u5ea6 \\(O(n^2)\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; const int si = 5e3 + 10 ; const int inf = 0x3f3f3f3f3f3f3f3fll ; int n , s ; int t [ si ], c [ si ]; int st [ si ], sc [ si ]; int dp [ si ]; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); memset ( dp , 0x3f , sizeof dp ); dp [ 0 ] = st [ 0 ] = sc [ 0 ] = 0 , cin >> n >> s ; for ( int i = 1 ; i <= n ; ++ i ) cin >> t [ i ] >> c [ i ], st [ i ] = st [ i - 1 ] + t [ i ], sc [ i ] = sc [ i - 1 ] + c [ i ]; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 0 ; j < i ; ++ j ) { dp [ i ] = min ( dp [ i ], dp [ j ] + ( sc [ n ] - sc [ j ]) * s + ( sc [ i ] - sc [ j ]) * st [ i ]); } } cout << dp [ n ] << endl ; return 0 ; }","title":"II. \u8d39\u7528\u63d0\u524d\u8ba1\u7b97"},{"location":"algor/dp/opt/convex-optimize/#iii","text":"\u8003\u8651\u7528\u524d\u7f00\u548c\u5199\u4e0b II \u7684\u5f0f\u5b50\uff1a \\(dp(i) = \\min\\limits_{j = 0}^{i - 1}\\{dp(j) + (sc(n) - sc(j)) \\times s + (sc(i) - sc(j)) \\times st(i)\\}\\) \u4e58\u5f00\uff1a \\(dp(i) = \\min\\limits_{j = 0}^{i - 1}\\{dp(j) + sc(n) \\times s - sc(j) \\times s + sc(i) \\times st(i) - sc(j) \\times st(i)\\}\\) \u5957\u7528\u659c\u7387\u4f18\u5316\u7684\u677f\u5b50\uff0c\u6211\u4eec\u53bb\u6389 \\(\\min\\) \uff1a \\(dp(i) = dp(j) + sc(n) \\times s - sc(j) \\times s + sc(i) \\times st(i) - sc(j) \\times st(i)\\) \u5199\u6210\u4e00\u6b21\u51fd\u6570 \\(b = -kx + y\\) \u7684\u5f62\u5f0f\uff1a \\(dp(i) - sc(i) \\times st(i) - sc(n) \\times s = -(st(i) + s) \\times sc(j) + dp(j)\\) \u6240\u4ee5 \\((x, y)\\) \u8fd9\u4e9b\u70b9\u5c31\u662f \\((sc(j), dp(j))\\) \u7684\u5f62\u5f0f\uff0c\u6211\u4eec\u73b0\u5728\u9700\u8981\u8ba9 \\(dp(i)\\) \u5c3d\u53ef\u80fd\u7684\u5c0f\uff0c\u5c31\u662f\u8ba9\u4ee5 \\((st(i) + s)\\) \u4e3a\u659c\u7387\u7684\u76f4\u7ebf\u7ecf\u8fc7\u4e00\u4e2a\u6700\u4f18\u7684 \\((sc(j), dp(j))\\) \u3002 \u56e0\u4e3a\u4e0b\u6807\u9650\u5236\u662f \\(j \\in [0, i)\\) \uff0c \\(k_i\\) \u968f \\(i\\) \u5355\u8c03\u9012\u589e\uff0c\u4e14\u53ea\u9700\u8981\u5728\u672b\u5c3e\u63d2\u5165\u51b3\u7b56 \uff0c\u6240\u4ee5\u4e00\u4e2a\u4e00\u4e2a\u51b3\u7b56\u5b8c\u63d2\u5165\u5355\u8c03\u961f\u5217\u5c31\u597d\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; const int si = 5e3 + 10 ; const int inf = 0x3f3f3f3f3f3f3f3fll ; int n , s ; int t [ si ], c [ si ]; int st [ si ], sc [ si ], dp [ si ]; int q [ si ], l , r ; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); st [ 0 ] = sc [ 0 ] = 0 ; memset ( q , 0 , sizeof q ), l = 1 , r = 1 ; memset ( dp , 0x3f , sizeof dp ), dp [ 0 ] = 0 ; // \u8ba9 (x0, y0) \u5165\u961f\uff08j \u53ef\u4ee5\u53d6\u5230 0\uff09 // \u961f\u5217\u672c\u8eab\u8fd8\u662f\u95ed\u533a\u95f4\uff0c\u4f46\u662f\u4e3a\u4e86\u4fdd\u8bc1 l + 1, r - 1 \u4e0d\u4f1a\u8d8a\u754c\uff0c\u6240\u4ee5\u5199\u7684\u662f l < r. cin >> n >> s ; for ( int i = 1 ; i <= n ; ++ i ) cin >> t [ i ] >> c [ i ], sc [ i ] = sc [ i - 1 ] + c [ i ], st [ i ] = st [ i - 1 ] + t [ i ]; for ( int i = 1 ; i <= n ; ++ i ) { while ( l < r && dp [ q [ l + 1 ]] - dp [ q [ l ]] <= ( st [ i ] + s ) * ( sc [ q [ l + 1 ]] - sc [ q [ l ]])) ++ l ; dp [ i ] = dp [ q [ l ]] - ( st [ i ] + s ) * sc [ q [ l ]] + sc [ i ] * st [ i ] + sc [ n ] * s ; while ( l < r && ( dp [ q [ r ]] - dp [ q [ r - 1 ]]) * ( sc [ i ] - sc [ q [ r ]]) >= ( dp [ i ] - dp [ q [ r ]]) * ( sc [ q [ r ]] - sc [ q [ r - 1 ]])) -- r ; q [ ++ r ] = i ; } // \u4e3a\u4e86\u907f\u514d\u7cbe\u5ea6\u95ee\u9898\uff0c\u76f4\u63a5\u628a\u659c\u7387\u7684\u5f0f\u5b50\u5199\u51fa\u6765\uff0c\u5206\u6bcd\u4e58\u5230\u5bf9\u9762\u3002 cout << dp [ n ] << endl ; return 0 ; }","title":"III. \u659c\u7387\u4f18\u5316"},{"location":"algor/dp/opt/convex-optimize/#iv","text":"\u6ce8\u610f\u5230 \\(t_i\\) \u53ef\u80fd\u662f\u8d1f\u6570\uff0c\u610f\u5473\u7740 \\(\\exists i, st(i) < 0\\) \u3002 \u4e0b\u6807\u9650\u5236\u4f9d\u7136\u53ef\u4ee5\u4e00\u4e2a\u4e00\u4e2a\u63d2\u5165\u6765\u6ee1\u8db3\uff0c\u4f46\u662f\u56e0\u4e3a \\(k_i\\) \u4e0d\u662f\u5355\u8c03\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u6ca1\u6cd5\u76f4\u63a5\u6254\u5230\u5355\u8c03\u961f\u5217\u91cc\u9762\u5747\u644a \\(O(1)\\) \u8f6c\u79fb\uff08\u4e0d\u7136\u4f60\u66f4\u65b0\u5b8c \\(i - 1\\) \u7684\u65f6\u5019\u53ef\u80fd\u628a \\(i\\) \u7684\u6700\u4f18\u9009\u62e9\u7ed9\u5f39\u6389\uff09\u3002 \u6ce8\u610f\u5230 \\(sc(i)\\) \u4ecd\u65e7\u662f\u5355\u8c03\u7684\uff0c\u6362\u53e5\u8bdd\u8bf4\u6211\u4eec\u53ea\u9700\u8981\u652f\u6301\u5728\u672b\u5c3e\u63d2\u5165\u51b3\u7b56\u70b9. \u90a3\u4e48\u6211\u4eec\u4ecd\u65e7\u53ef\u4ee5\u4f7f\u7528\u5355\u8c03\u961f\u5217\u7ef4\u62a4\u8fd9\u4e2a\u51f8\u58f3\uff0c\u4f46\u662f\u73b0\u5728\uff0c\u6211\u4eec\u9700\u8981\u5728\u51f8\u58f3\u4e0a\u76f4\u63a5\u4e8c\u5206\u4e00\u4e2a\u4f4d\u7f6e \\(e\\) \uff0c\u4f7f\u5f97 \\(K(e - 1, e) < k_i < K(e, e + 1)\\) \u800c\u4e0d\u662f\u76f4\u63a5\u53d6\u961f\u5934\u66f4\u65b0\uff0c\u6ce8\u610f\u9700\u8981\u7279\u6b8a\u5224\u65ad\u5934\u5c3e\u3002 \u6ce8\u610f\u8fd9\u91cc\u5e94\u8be5\u662f\u5224 \\(q(mid), q(mid + 1)\\) \u6784\u6210\u7684\u76f4\u7ebf\u659c\u7387\uff0c\u4e0d\u7136\u4ee5\u8fd9\u6837\u7684\u4e8c\u5206\u65b9\u5f0f\u4f1a\u51fa\u9519\uff08\u539f\u56e0\u5f88\u7b80\u5355\uff0c\u53ef\u4ee5\u624b\u6a21\u4e00\u4e0b\uff09\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 // author : black_trees #include <cmath> #include <cstdio> #include <cctype> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; using i128 = __int128_t ; template < typename __Tp > void read ( __Tp & x ) { int f = x = 0 ; char ch = getchar (); for (; ! isdigit ( ch ); ch = getchar ()) if ( ch == '-' ) f = 1 ; for (; isdigit ( ch ); ch = getchar ()) x = ( x << 1 ) + ( x << 3 ) + ( ch ^ 48 ); if ( f ) x = - x ; } void read ( char & ch ) { for ( ch = getchar (); isspace ( ch ); ch = getchar ()); } template < typename __Tp1 , typename ... __Tp2 > void read ( __Tp1 & x , __Tp2 & ... y ) { read ( x ), read ( y ...); } template < typename __Tp > void write ( __Tp x ) { if ( x < 0 ) putchar ( '-' ), x = - x ; if ( x > 9 ) write ( x / 10 ); putchar ( x % 10 + 48 ); } void write ( char ch ) { putchar ( ch ); } void write ( const char * s ) { for (; * s ; ++ s ) putchar ( * s ); } template < typename __Tp1 , typename ... __Tp2 > void write ( __Tp1 x , __Tp2 ... y ) { write ( x ), write ( y ...); } const int si = 3e5 + 10 ; int n , q [ si ], s , l , r ; i128 dp [ si ], st [ si ], sc [ si ]; int find ( int slope ) { if ( l == r ) return q [ l ]; int L = l , R = r ; while ( L < R ) { int mid = ( L + R ) >> 1 ; if ( dp [ q [ mid + 1 ]] - dp [ q [ mid ]] <= slope * ( sc [ q [ mid + 1 ]] - sc [ q [ mid ]])) L = mid + 1 ; else R = mid ; } return q [ L ]; } int main () { // cin.tie(0) -> sync_with_stdio(false); // cin.exceptions(cin.failbit | cin.badbit); memset ( q , 0 , sizeof q ); memset ( dp , 0x3f , sizeof dp ); dp [ 0 ] = 0 , l = 1 , r = 1 ; read ( n , s ); for ( int i = 1 ; i <= n ; ++ i ) { i128 t , c ; read ( t , c ); st [ i ] = st [ i - 1 ] + t , sc [ i ] = sc [ i - 1 ] + c ; } for ( int i = 1 ; i <= n ; ++ i ) { int p = find ( s + st [ i ]); dp [ i ] = dp [ p ] - ( s + st [ i ]) * sc [ p ] + st [ i ] * sc [ i ] + s * sc [ n ]; while ( l < r && ( dp [ q [ r ]] - dp [ q [ r - 1 ]]) * ( sc [ i ] - sc [ q [ r ]]) >= ( dp [ i ] - dp [ q [ r ]]) * ( sc [ q [ r ]] - sc [ q [ r - 1 ]])) -- r ; q [ ++ r ] = i ; } write ( dp [ n ], endl ); return 0 ; }","title":"IV. \u4e8c\u5206"},{"location":"algor/dp/opt/convex-optimize/#v-cdq","text":"\u6ce8\u610f\u5230 \\(\\exists i, sc(i) < 0\\) \uff0c\u4e5f\u5c31\u662f\u8bf4 \\(sc(i)\\) \u4e5f\u4e0d\u662f\u5355\u8c03\u9012\u589e\u7684\u4e86\uff0c\u6211\u4eec\u53ef\u80fd\u5728\u4efb\u610f\u7684\u4f4d\u7f6e\u63d2\u5165\u51b3\u7b56\u70b9\u3002 \u4e0b\u6807\u9650\u5236\u8fd8\u662f\u53ef\u4ee5\u4e00\u4e2a\u4e00\u4e2a\u63d2\u5165\u6765\u6ee1\u8db3\uff0c\u90a3\u4e48\u6709\u4e00\u4e2a\u4e0d\u52a8\u8111\u5b50\u7684\u505a\u6cd5\uff0c\u76f4\u63a5\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u51f8\u58f3\uff0c\u4e8c\u5206\u8f6c\u5316\u4e3a\u5728\u5e73\u8861\u6811\u4e0a\u4e8c\u5206\u3002 \u8fd8\u6709\u4e00\u79cd\u806a\u660e\u4e00\u70b9\u7684\u505a\u6cd5\u662f\u4f7f\u7528 CDQ \u5206\u6cbb\u3002 \u5c31\u662f\u8bf4\uff0cCDQ \u5206\u6cbb\u7684\u4e00\u4e2a\u91cd\u8981\u5e94\u7528\u5c31\u662f\uff0c\u628a\u4e00\u4e2a\u52a8\u6001\u95ee\u9898\u8f6c\u5316\u4e3a\u9759\u6001\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u601d\u60f3\uff0c\u5c06\u9700\u8981\u52a8\u6001\u63d2\u5165\u7684\u51f8\u58f3\u8f6c\u5316\u4e3a\u9759\u6001\u7684\u51f8\u58f3\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u8bbe \\(\\text{Solve}(l, r)\\) \u8868\u793a\u8ba1\u7b97 \\([l, r]\\) \u7684 \\(dp(i)\\) \uff0c\u5206\u4e09\u6b65\uff1a \u9012\u5f52\u8ba1\u7b97 \\(\\text{Solve}(l, mid)\\) \u3002 \u6b64\u65f6 \\(dp(l \\sim mid)\\) \u5df2\u7ecf\u8ba1\u7b97\u51fa\u6765\uff0c\u6211\u4eec\u8003\u8651\u7ef4\u62a4 \\([l, mid]\\) \u8fd9\u4e00\u6bb5\u7684\u6240\u6709\u51b3\u7b56\u70b9\u6784\u6210\u7684\u51f8\u58f3\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u4f7f\u7528\u5355\u8c03\u961f\u5217\uff0c\u4f46\u662f\u8981\u5148\u6309\u7167 \\(x\\) \u6392\u5e8f\uff08\u56e0\u4e3a\u672c\u6765\u5c31\u662f\u4e71\u5e8f\u561b\uff0c\u4f60\u73b0\u5728\u53ea\u66f4\u65b0 \\([mid + 1, r]\\) \u7684\uff0c\u524d\u9762\u7684\u4e0b\u6807\u987a\u5e8f\u6ca1\u5565\u5f71\u54cd\uff0c\u6392\u5e8f\u4e5f\u6ca1\u4e8b\uff0c\u53ea\u8981\u6700\u540e\u590d\u539f\u4e00\u4e0b\u5c31\u597d\u4e86\uff09\uff0c\u7136\u540e\u6211\u4eec\u5bf9\u4e8e \\(dp(mid + 1\\sim r)\\) \uff0c\u8003\u8651\u4ece\u8fd9\u4e2a\u51f8\u58f3\u4e0a\u66f4\u65b0\u7b54\u6848\uff0c\u8fd9\u90e8\u5206\u53ef\u4ee5\u4e8c\u5206\uff08\u56e0\u4e3a\u659c\u7387\u4e0d\u662f\u5355\u8c03\u7684\u561b\uff09\u3002 \u9012\u5f52\u8ba1\u7b97 \\(\\text{Solve}(mid + 1, r)\\) \uff0c\u6211\u4eec\u8fd9\u91cc\u4f7f\u7528\u7684\u662f\u201c\u4e2d\u5e8f\u904d\u5386\u201d\uff0c\u6240\u4ee5 dp \u8f6c\u79fb\u7684\u6b63\u786e\u6027\u662f\u6709\u4fdd\u8bc1\u7684\uff0c\u800c \\(dp(mid + 1, r)\\) \u663e\u7136\u4e0d\u53ef\u80fd\u53ea\u5728 \\([l, mid]\\) \u4e0a\u53d6\u5230\u6700\u4f18\uff0c\u8fd9\u4e2a\u9012\u5f52\u8ba1\u7b97\u7684\u8fc7\u7a0b\u5c31\u53ef\u4ee5\u76f4\u63a5\u7b97\u51fa \\(dp(mid + 1, r)\\) \u3002 \u5982\u679c\u6709\u5220\u9664\u64cd\u4f5c\uff0c\u6216\u8005\u8bf4\u5bf9\u4e8e\u4e00\u4e2a \\(i\\) \uff0c\u5b83\u7684 \\(L(i), R(i)\\) \u53d8\u5316\u5f88\u4e0d\u5747\u5300\uff0c\u6211\u4eec\u4ecd\u65e7\u53ef\u4ee5\u4f7f\u7528 CDQ \u5206\u6cbb\uff0c\u6bcf\u6b21\u5728\u51f8\u58f3\u4e0a\u4e8c\u5206\u7684\u65f6\u5019\u5c31\u76f4\u63a5\u53d6\u6ee1\u8db3 \\([u, v] \\in [L(i), R(i)]\\) \u7684\u4e00\u6bb5\u6765\u4e8c\u5206\u5c31\u884c\u4e86\u3002 \u5982\u679c\u51fa\u9898\u4eba\u6bd4\u8f83**\uff0c\u7ed9\u4f60\u6765\u4e00\u4e2a\u4e2d\u95f4\u6263\u6389\u4e00\u4e2a\u7684\u5220\u9664\uff0c\u5c31\u6bd4\u8f83\u6076\u4fd7\uff0c\u4e0d\u8fc7\u597d\u50cf\u53ef\u4ee5\u8f6c\u5316\u6210 CDQ \u91cc\u9762\u7684 \u4fee\u6539-\u8be2\u95ee\u5173\u7cfb\uff1f\u662f\u4e0d\u662f\u8fd8\u53ef\u4ee5\u7ebf\u6bb5\u6811\u5206\u6cbb + \u674e\u8d85\u6811\uff1f\u4e0d\u8fc7\u8fd9\u6837\u5b50\u7684\u8bdd\uff0c\u5e73\u8861\u6811\u7ef4\u62a4\u5c31\u662f\u6700\u7b80\u5355\u7684\u4e86\uff0c\u8fd9\u91cc\u7528 Leafy Tree \u53ef\u80fd\u4f1a\u6bd4\u8f83\u7b80\u5355\u3002 \u674e\u8d85\u6811\u7684\u8bdd\uff0c\u56e0\u4e3a\u4e0d\u652f\u6301\u5220\u9664\u6240\u4ee5\u6709\u4e00\u5b9a\u7684\u5c40\u9650\u6027\uff0c\u6240\u4ee5\u5927\u90e8\u5206\u65f6\u5019\u6211\u4eec\u8fd8\u662f\u4f7f\u7528 CDQ \u5206\u6cbb\uff0c\u4e0d\u8fc7\u8fd9\u9898\u56e0\u4e3a \\(L(i), R(i)\\) \u7684\u9650\u5236\u6bd4\u8f83 trivial \u6240\u4ee5\u674e\u8d85\u6811\u4e5f\u662f\u53ef\u4ee5\u505a\u7684\u3002 Tips\uff1a\u8bb0\u5f97\u5224\u659c\u7387\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\u54e6\u3002 Code(CDQ,\u4e0d\u5e26\u5220\u9664\u64cd\u4f5c) \u4ee3\u7801\u6682\u7565\uff0c\u5df2\u7ecf\u67e5\u51fa\u9519\u4e86\uff0c\u627e\u4e2a\u65f6\u95f4\u6765\u5199\u3002","title":"V. \u5e73\u8861\u6811/CDQ \u5206\u6cbb/\u674e\u8d85\u6811"},{"location":"algor/dp/opt/convex-optimize/#_3","text":"\u659c\u7387\u4f18\u5316\u7684\u601d\u60f3\u5728\u6cdb\u5316\u91cc\u5df2\u7ecf\u8bf4\u4e86\uff0c\u5728\u8fd9\u91cc\u63d0\u4e00\u63d0\u5bf9\u4e8e\u51b3\u7b56\u70b9\u96c6\u5408\u7684\u7ef4\u62a4\u65b9\u5f0f\uff1a \u5bf9\u4e8e \\(L(i), R(i)\\) \u7684\u4e0b\u6807\u9650\u5236\uff1a \u5982\u679c\u662f\u7c7b\u4f3c\u672c\u9898\u7684 \\(0 \\le j < i\\) \uff0c\u8bf4\u660e\u4e0d\u9700\u8981\u5220\u9664\u51b3\u7b56\u70b9\uff0c\u800c\u4e14\u6bcf\u6b21\u53ea\u4f1a\u5728\u5c3e\u90e8\u63d2\u5165\u51b3\u7b56\uff0c\u6211\u4eec\u679a\u4e3e\u5c31\u597d\u4e86 \u5982\u679c \\(L(i), R(i)\\) \u662f\u968f \\(i\\) \u5355\u8c03\u53d8\u5316\u7684\uff0c\u6211\u4eec\u5c31\u9700\u8981\u4f7f\u7528\u5355\u8c03\u961f\u5217\u6765\u6392\u9664\u5197\u6742 \u5982\u679c\u662f\u6ca1\u5565\u5355\u8c03\u6027\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e00\u822c\u8981\u652f\u6301\u5728\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u5220\u9664\u51b3\u7b56\u70b9\uff0c\u5c31\u9700\u8981\u4f7f\u7528\u5e73\u8861\u6811\u6216\u8005 CDQ \u5206\u6cbb\u3002 \u5bf9\u4e8e\u659c\u7387\u7684\u9650\u5236\uff0c\u53ea\u9700\u8981\u770b\u659c\u7387\u662f\u5426\u5355\u8c03\u9012\u589e\u5373\u53ef\uff1a \u5982\u679c\u659c\u7387\u968f \\(i\\) \u5355\u8c03\u9012\u589e\uff0c\u90a3\u4e48\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5355\u8c03\u961f\u5217\u53d6\u961f\u5934\u8f6c\u79fb\u3002 \u5982\u679c\u659c\u7387\u4e0d\u968f \\(i\\) \u5355\u8c03\u9012\u589e\uff0c\u6211\u4eec\u5c31\u9700\u8981\u5728\u51f8\u58f3\u4e0a\u4e8c\u5206\u7b54\u6848\u627e\u5230\u6700\u4f18\u51b3\u7b56\u70b9\u3002 \u5bf9\u4e8e \\(x_j\\) \u7684\u9650\u5236\uff0c\u53ea\u9700\u8981\u770b\u5b83\u662f\u5426\u968f \\(j\\) \u5355\u8c03\u9012\u589e\u5373\u53ef\u3002 \u5982\u679c\u5b83\u968f \\(j\\) \u5355\u8c03\u9012\u589e\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ea\u9700\u8981\u4e00\u4e2a\u4e00\u4e2a\u63d2\u5165\u51b3\u7b56\u5c31\u884c\u3002 \u5982\u679c\u5b83\u4e0d\u968f \\(j\\) \u5355\u8c03\u9012\u589e\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u4f7f\u7528\u5e73\u8861\u6811 / CDQ \u5206\u6cbb\u6765\u652f\u6301\u63d2\u5165\u51b3\u7b56\u70b9\u7684\u64cd\u4f5c\uff0c\u6ce8\u610f CDQ \u7ef4\u62a4\u7684\u65f6\u5019\u8fd8\u8981\u5bf9\u524d\u4e00\u534a\u6392\u5e8f\u3002 Last but not least: \u5982\u679c\u4f7f\u7528\u4ea4\u53c9\u76f8\u4e58\u6765\u907f\u514d\u7cbe\u5ea6\u95ee\u9898\uff0c\u8981\u5c0f\u5fc3\u6570\u636e\u8303\u56f4\uff0c\u5982\u679c\u76f4\u63a5\u4f7f\u7528\u6d6e\u70b9\u6570\uff0c\u8981\u8bb0\u5f97\uff0ceps \u4e0d\u8981\u5f00\u592a\u5c0f\u4e86\uff0c\u8981\u89c6\u60c5\u51b5\u800c\u5b9a\u3002","title":"\u603b\u7ed3"},{"location":"algor/dp/opt/convex-optimize/#_4","text":"\u89c1 Vjudge \u659c\u7387\u4f18\u5316\u4e13\u9898","title":"\u4e60\u9898"},{"location":"algor/dp/opt/data-structure-optimize/","text":"\u4f8b\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 Cleaning Shifts \u03c8(\uff40\u2207\u00b4)\u03c8 \u519c\u592b\u7ea6\u7ff0\u96c7\u4f63\u4ed6\u7684 \\(N\\) \u5934\u5976\u725b\u5e2e\u4ed6\u8fdb\u884c\u725b\u68da\u7684\u6e05\u7406\u5de5\u4f5c\u3002 \u4ed6\u5c06\u5168\u5929\u5206\u4e3a\u4e86\u5f88\u591a\u4e2a\u73ed\u6b21\uff0c\u5176\u4e2d\u7b2c \\(M\\) \u4e2a\u73ed\u6b21\u5230\u7b2c \\(E\\) \u4e2a\u73ed\u6b21\uff08\u5305\u62ec\u8fd9\u4e24\u4e2a\u73ed\u6b21\uff09\u4e4b\u95f4\u5fc5\u987b\u90fd\u6709\u725b\u8fdb\u884c\u6e05\u7406\u3002 \u8fd9 \\(N\\) \u5934\u725b\u4e2d\uff0c\u7b2c \\(i\\) \u5934\u725b\u53ef\u4ee5\u4ece\u7b2c \\(a_i\\) \u4e2a\u73ed\u6b21\u5de5\u4f5c\u5230\u7b2c \\(b_i\\) \u4e2a\u73ed\u6b21\uff0c\u540c\u65f6\uff0c\u5b83\u4f1a\u7d22\u53d6 \\(c_i\\) \u7684\u4f63\u91d1\u3002 \u8bf7\u4f60\u5b89\u6392\u4e00\u4e2a\u5408\u7406\u7684\u6e05\u7406\u73ed\u6b21\uff0c\u4f7f\u5f97 \\([M,E]\\) \u65f6\u95f4\u6bb5\u5185\u90fd\u6709\u5976\u725b\u5728\u6e05\u7406\uff0c\u5e76\u4e14\u6240\u9700\u652f\u4ed8\u7ed9\u5976\u725b\u7684\u62a5\u916c\u6700\u5c11\u3002 \\(1\\le N \\le 1e3, 0 \\le M,E \\le 86399, a_i,b_i \\in [M,E]\\) \u63d0\u53d6\u9898\u76ee\u8981\u7d20\u4e4b\u540e\u53ef\u4ee5\u8bbe\u8ba1\u51fa\u4e00\u4e2a\u72b6\u6001\uff1a \\(dp_i\\) \u8868\u793a \\([M,i]\\) \u8fd9\u4e00\u6bb5\u5168\u90e8\u6e05\u7406\u5b8c\u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u82b1\u8d39\u6700\u5c0f\u503c\u3002 \u53ef\u4ee5\u8003\u8651\u5148\u6309\u7167\u53f3\u7aef\u70b9\u6392\u5e8f\uff0c\u4ece\u725b\u7684\u5de5\u4f5c\u65f6\u95f4\u7684\u53f3\u7aef\u70b9\u8fdb\u884c\u8f6c\u79fb\uff0c\u53ef\u4ee5\u8bbe\u8ba1\u51fa\u65b9\u7a0b\uff1a \\[dp_{b_i} = \\min\\limits_{a_i -1 \\le j < b_i}\\{dp_j\\} + c_i\\] \u679a\u4e3e \\(j\\) \u627e\u5230\u6700\u5c0f\u503c\u5373\u53ef\u3002 \u8fd9\u91cc\u4f7f\u7528 \\(b_i\\) \u4f5c\u4e3a\u4e0b\u6807\u7684\u539f\u56e0\u662f\uff0c\u6211\u4eec\u5982\u679c\u76f4\u63a5\u679a\u4e3e \\(i\\) \uff0c\u65e0\u6cd5\u5f88\u597d\u7684\u786e\u5b9a\u5230\u5e95\u5f53\u524d\u8003\u8651\u7684\u662f\u54ea\u4e00\u5934\u725b\u3002 \u5176\u5b9e\u74f6\u9888\u5c31\u5728\u4e8e\u8fd9\u4e2a\u679a\u4e3e\u7684\u8fc7\u7a0b\uff0c\u6240\u4ee5\u8003\u8651\u5bf9\u8fd9\u4e2a\u679a\u4e3e\u7684\u8fc7\u7a0b\u8fdb\u884c\u4f18\u5316\u3002 \u53d1\u73b0\u51b3\u7b56\u96c6\u5408\u5c31\u662f \\(\\{dp_j\\} \\ | \\ j \\in [a_1 - 1, b_i]\\) \uff0c \u89c2\u5bdf\u5b83\u7684\u53d8\u5316\uff0c\u5f53 \\(i\\) \u589e\u52a0\u65f6\uff0c \\(b_i\\) \u662f\u4e25\u683c\u4e0d\u4e0b\u964d\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u6392\u4e86\u5e8f\u3002 \u4f46 \\(a_i\\) \u7684\u53d8\u5316\u5f88\u53ef\u80fd\u975e\u5e38\u4e0d\u5747\u5300\uff0c\u6240\u4ee5\u6211\u4eec\u4f3c\u4e4e\u6ca1\u6cd5\u505a\u7c7b\u4f3c\u5355\u8c03\u961f\u5217\u8fd9\u79cd\u76f4\u63a5\u7ef4\u62a4\u51b3\u7b56\u96c6\u5408\u7684\u4f18\u5316\u3002 \u4f46\u662f\uff0c\u8fd9\u91cc\u662f\u8be2\u95ee \\(dp\\) \u5728 \u67d0\u4e00\u6bb5\u4e0a\u7684\u6700\u5c0f\u503c \uff0c\u4e14 \\(dp\\) \u968f\u65f6\u4f1a\u53d1\u751f\u66f4\u65b0 \u3002 \u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u76f4\u63a5\u7ebf\u6bb5\u6811\u7ef4\u62a4 \\(dp\\) \u6570\u7ec4\uff08\u672c\u8d28\u4e0a\u662f\u7ef4\u62a4\u5b83\u7684\u7b2c\u4e00\u7ef4\uff09\u3002 \u652f\u6301\u51b3\u7b56\u540e\u5355\u70b9\u4fee\u6539\uff0c\u8f6c\u79fb\u7684\u65f6\u5019\u533a\u95f4\u8be2\u95ee \\(\\min\\) \u5c31\u884c\u4e86\u3002 \u5e76\u4e14\uff0c\u672c\u9898\u5b9e\u9645\u4e0a\u53ef\u4ee5\u4e0d\u5f00 \\(dp\\) \u6570\u7ec4\uff0c\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u6267\u884c\u4fee\u6539\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 #include <iostream> #include <cstdio> #include <cstring> #include <algorithm> const int N = 2e5 + 10 ; const int INF = 0x3f3f3f3f ; using namespace std ; int read () { int x = 0 , f = 0 , c = getchar (); while ( c < '0' || c > '9' ){ if ( c == '-' ) f = 1 ; c = getchar ();} while ( c >= '0' && c <= '9' ){ x = x * 10 + c - '0' ; c = getchar ();} return f ?- x : x ; } int t [ N << 2 ]; void add ( int x , int l , int r , int pos , int val ) { // cout<<x<<\" \"<<l<<\" \"<<r<<\" \"<<pos<<\" \"<<val<<endl; if ( l == r ){ t [ x ] = min ( t [ x ], val ); return ;} //\u6ce8\u610f \u6700\u5c0f\u503c\u610f\u4e49\u4e0b\u7684\u8d4b\u503c int mid = ( l + r ) >> 1 ; if ( pos <= mid ) add ( x * 2 , l , mid , pos , val ); else add ( x * 2 + 1 , mid + 1 , r , pos , val ); t [ x ] = min ( t [ x * 2 ], t [ x * 2 + 1 ]); } int query ( int x , int l , int r , int L , int R ) { if ( L <= l && R >= r ){ return t [ x ];} int mid = ( l + r ) >> 1 ; int ans = INF ; if ( L <= mid ) ans = min ( ans , query ( x * 2 , l , mid , L , R )); if ( R > mid ) ans = min ( ans , query ( x * 2 + 1 , mid + 1 , r , L , R )); return ans ; } struct Node { int x , y , z ; } p [ N ]; bool cmp ( Node x , Node y ){ return x . y < y . y ;} int n , L , R , b [ N ], tot , f [ N ], cnt ; int main () { n = read (); L = read (); R = read (); for ( int i = 1 ; i <= n ; i ++ ) { int x = read (), y = read (), z = read (); if ( y < L || x > R ) continue ; b [ ++ tot ] = x ; b [ ++ tot ] = y ; b [ ++ tot ] = x + 1 ; b [ ++ tot ] = y + 1 ; p [ ++ cnt ] = ( Node ){ x , y , z }; } b [ ++ tot ] = L ; b [ ++ tot ] = R ; sort ( b + 1 , b + tot + 1 ); tot = unique ( b + 1 , b + tot + 1 ) - ( b + 1 ); sort ( p + 1 , p + cnt + 1 , cmp ); for ( int i = 1 ; i <= cnt ; i ++ ) { p [ i ]. x = lower_bound ( b + 1 , b + tot + 1 , p [ i ]. x ) - b , p [ i ]. y = lower_bound ( b + 1 , b + tot + 1 , p [ i ]. y ) - b ; } L = lower_bound ( b + 1 , b + tot + 1 , L ) - b ; R = lower_bound ( b + 1 , b + tot + 1 , R ) - b ; memset ( f , 0x3f , sizeof f ); memset ( t , 0x3f , sizeof t ); add ( 1 , 0 , tot , L -1 , 0 ); for ( int i = 1 ; i <= cnt ; i ++ ) { f [ p [ i ]. y ] = min ( f [ p [ i ]. y ], query ( 1 , 0 , tot , p [ i ]. x -1 , p [ i ]. y -1 ) + p [ i ]. z ); //\u53f3\u8fb9\u754c add ( 1 , 0 , tot , p [ i ]. y , f [ p [ i ]. y ]); } int ans = INF ; for ( int i = R ; i <= tot ; i ++ ) ans = min ( ans , f [ i ]); if ( ans == INF ){ puts ( \"-1\" ); return 0 ;} printf ( \"%d\" , ans ); return 0 ; } // \u76f4\u63a5\u8d3a\u7684\uff0c\u6bd5\u7adf\u662f\u5634\u5df4\u505a\u7684\u9898\uff08 // \u4f5c\u8005\uff1ajuruoHBr // \u94fe\u63a5\uff1ahttps://www.acwing.com/solution/content/92559/ The Battle Of Chibi \u03c8(\uff40\u2207\u00b4)\u03c8 \u6c42\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5e8f\u5217 \\(A\\) \u7684\u957f\u5ea6\u4e3a \\(m\\) \u7684\u4e25\u683c\u9012\u589e\u5b50\u5e8f\u5217\u4e2a\u6570\u3002 \u7b54\u6848\u5bf9 \\(1e9+7\\) \u53d6\u6a21\uff0c \\(1\\le n \\le 1000, |a_i| \\le 1e9\\) \u3002 \u4e25\u683c\u9012\u589e\u5b50\u5e8f\u5217\u8fd9\u4e2a\u4e1c\u897f\u7c7b\u4f3c LIS\uff0c\u672c\u9898\u4e2d\u591a\u4e86 \\(m\\) \u8fd9\u4e2a\u9650\u5236\u3002 \u6240\u4ee5\u5c31\u8bbe \\(dp_{i,j}\\) \u8868\u793a\u957f\u5ea6\u4e3a \\(i\\) \uff0c\u4ece \\(1\\sim j\\) \u9009\uff0c\u7531 \\(A_j\\) \u7ed3\u5c3e\u7684\u4e25\u683c\u9012\u589e\u5b50\u5e8f\u5217\u4e2a\u6570\u3002 \u6839\u636e\u201c\u6700\u540e\u4e00\u4e2a\u4e0d\u540c\u70b9\u201d\u7684\u5212\u5206\u4f9d\u636e\uff0c\u679a\u4e3e\u4e0a\u4e00\u4e2a\u662f\u4ece\u54ea\u91cc\u8f6c\u79fb\u8fc7\u6765\u7684\u5373\u53ef\u3002 \u53ef\u4ee5\u5f97\u5230\uff1a \\[dp_{i,j} = \\sum\\limits_{a_{k} < a_j \\operatorname{and} k < j} dp_{i-1,k}\\] \u521d\u59cb\u5316 \\(a_0 = +\\infty,f_{0,0} = 1\\) \uff0c\u5176\u4f59 \\(f\\) \u4e3a \\(0\\) \u3002 \u53d1\u73b0\u5f53\u5916\u5c42\u5faa\u73af\u90fd\u56fa\u5b9a\u7684\u65f6\u5019\uff0c\u5982\u679c \\(j + 1\\) \uff0c\u90a3\u4e48 \\(k\\) \u7684\u53d6\u503c\u8303\u56f4\u5c31\u4f1a\u4ece \\([0,j)\\) \u53d8\u5230 \\([0,j+1)\\) \u3002 \u90a3\u4e48\u51b3\u7b56\u96c6\u5408\u5c31\u53ea\u4f1a\u591a \\(dp_{i-1,j}\\) \u8fd9\u4e2a\u51b3\u7b56\u3002 \u7136\u540e\u8981\u505a\u7684\u5c31\u662f\u5728\u51b3\u7b56\u96c6\u5408\u91cc\u67e5\u8be2\u6240\u6709\u6ee1\u8db3 \\(a_j > a_k\\) \u7684 \\(dp_{i-1,k}\\) \u7684\u548c\u3002 \u53d1\u73b0\u76f4\u63a5\u679a\u4e3e\u53ea\u9700\u8981\u4e0d\u65ad\u5224\u65ad \\(a_j > a_k\\) \uff0c\u4e5f\u5c31\u662f \u53ea\u5728\u5224\u65ad\u5173\u952e\u7801\u7684\u5927\u5c0f\u5173\u7cfb \u3002 \u6240\u4ee5\u53ef\u4ee5\u5728\u51b3\u7b56\u96c6\u5408\u91cc\u6309\u7167 \\(a_i\\) \u6392\u5e8f\uff0c\u79bb\u6563\u5316\u4e00\u4e0b\uff0c\u8bbe \\(a_j\\) \u79bb\u6563\u5316\u4e4b\u540e\u7684\u503c\u4e3a \\(val(a_j)\\) \u3002 \u8be2\u95ee\u65f6\u53ea\u9700\u8981\u8be2\u95ee \\(a_j\\) \u79bb\u6563\u5316\u4e4b\u540e\u7684\u4f4d\u7f6e \\(val(a_j)\\) \u7684\u524d\u7f00\u548c\u5373\u53ef\u3002 \u6bcf\u6b21\u5bf9\u4e8e \\(dp_{i,j}\\) \u7684\u51b3\u7b56 \u8fdb\u884c\u5b8c\u4e4b\u540e \uff0c \u518d\u63d2\u5165 \\(dp_{i-1,j}\\) \u8fd9\u4e2a\u51b3\u7b56 \uff0c\u4ee5\u4fdd\u8bc1\u65b9\u7a0b\u4e2d \\(k < j\\) \u8fd9\u4e2a\u6761\u4ef6\u88ab\u6ee1\u8db3\u3002 \u5b9e\u9645\u4e0a\u5c31\u662f\u7c7b\u4f3c\u53ef\u6301\u4e45\u5316 Trie \u7684\u201c \u4f9d\u6b21\u63d2\u5165 \u201d\u7684\u601d\u60f3\uff0c\u4ee5\u5f3a\u5236\u53bb\u6389\uff08\u76f4\u63a5\u4e0d\u52a0\u5165\u5b83\u4eec\uff09 \\(j\\) \u540e\u9762\u7684\u90e8\u5206\u7684\u65b9\u5f0f\u4f7f\u5f97 \\(k < j\\) \u59cb\u7ec8\u88ab\u6ee1\u8db3\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u4f7f\u7528\u5e73\u8861\u6811\u3002 \u4e0d\u8fc7\uff0c\u56e0\u4e3a \\(n\\) \u5f88\u5c0f\uff0c\u6240\u4ee5\u53ef\u4ee5\u5bf9 \\(A\\) \u79bb\u6563\u5316\uff0c\u7136\u540e\u76f4\u63a5 \u5efa\u7acb\u4e00\u4e2a\u6811\u72b6\u6570\u7ef4\u62a4\u6240\u6709\u79bb\u6563\u5316\u540e\u7684\u4f4d\u7f6e \u3002 \u63d2\u5165\u51b3\u7b56 \\(dp_{i-1,j}\\) \u7684\u64cd\u4f5c\uff0c\u5c31\u4ee4 \\(j\\) \u8fd9\u4e2a\u4f4d\u7f6e\u52a0\u4e0a \\(dp_{i-1,j}\\) \u5373\u53ef\u3002 \u90a3\u4e48\u67e5\u8be2\u76f4\u63a5\u5728\u6811\u72b6\u6570\u7ec4\u4e0a\u6c42\u51fa \\(val(a_j)\\) \u8fd9\u4e2a\u4f4d\u7f6e\u7684\u524d\u7f00\u548c\u5c31\u884c\u4e86\uff0c \u4e0d\u8fc7\u9700\u8981\u6ce8\u610f\u8981\u8ba9 \\(a_0\\) \u79bb\u6563\u5316\u4e4b\u540e\u7684\u503c \\(1\\) \u4e5f\u88ab\u7b97\u5230\u6811\u72b6\u6570\u7ec4\u91cc\u53bb\u3002 \u56e0\u4e3a\u6211\u4eec\u4f18\u5316\u7684\u524d\u63d0\u662f \u201c\u5047\u5b9a\u5916\u5c42\u5faa\u73af\u56fa\u5b9a\u201d\uff0c\u6240\u4ee5\u6811\u72b6\u6570\u7ec4\u6bcf\u6b21\u5faa\u73af\u53ea\u4f1a\u7ef4\u62a4\u4e0a\u4e00\u4e2a\u9636\u6bb5\u7684\u6240\u6709\u72b6\u6001\u3002 \u4e5f\u5c31\u662f \\(dp_{i - 1}\\) \u7cfb\u7684\u6240\u6709\u72b6\u6001\u3002 \u8fd9\u4e2a\u4e1c\u897f\u7684\u672c\u8d28\u662f\u7c7b\u4f3c\u4e8c\u7ef4\u6570\u70b9\u4e4b\u7c7b\u7684\u4e1c\u897f\uff0c\u8003\u8651\u5206\u79bb\u503c\u57df\u9650\u5236\u548c\u4e0b\u6807\u9650\u5236\u3002 \u8fd9\u91cc\u8981\u5206\u79bb\u7684\u539f\u56e0\u662f\uff0c\u5982\u679c\u4e0d\u5206\u79bb\uff0cdp \u72b6\u6001\u662f\u5f88\u79bb\u6563\u7684\uff0c\u6c42\u548c\u4e0d\u65b9\u4fbf\uff0c\u6211\u4eec\u5e0c\u671b\u4ed6\u4eec\u662f\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u5c31\u7528\u6570\u70b9\u7684\u601d\u60f3\u4e22\u5230\u6811\u72b6\u6570\u7ec4\u4e0a\u53bb\u7ef4\u62a4\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int si = 1e3 + 10 ; constexpr int mod = 1e9 + 7 ; int n , m ; int a [ si ]; int dp [ si ][ si ]; int t [ si ]; inline int lowbit ( int x ) { return x & - x ; } inline void add ( int x , int v ) { while ( x <= n ) { t [ x ] = ( t [ x ] + v ) % mod ; x += lowbit ( x ); } } inline int que ( int x ) { int res = 0 ; while ( x ) { res = ( res + t [ x ]) % mod ; x -= lowbit ( x ); } return res ; } void solve ( int qwq ) { memset ( dp , 0 , sizeof dp ); cin >> n >> m ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; std :: vector < int > v ; for ( int i = 1 ; i <= n ; ++ i ) v . push_back ( a [ i ]); sort ( v . begin (), v . end ()); v . erase ( unique ( v . begin (), v . end ()), v . end ()); for ( int i = 1 ; i <= n ; ++ i ) a [ i ] = lower_bound ( v . begin (), v . end (), a [ i ]) - v . begin () + 2 ; a [ 0 ] = 1 ; dp [ 0 ][ 0 ] = 1 ; for ( int i = 1 ; i <= m ; ++ i ) { memset ( t , 0 , sizeof t ); // \u6811\u72b6\u6570\u7ec4\u5728\u6bcf\u4e00\u8f6e\u53ea\u7ef4\u62a4\u4e0a\u4e00\u4e2a\u9636\u6bb5 i - 1 \u7cfb\u5217\u7684\u72b6\u6001\u3002 add ( a [ 0 ], dp [ i - 1 ][ 0 ]); // \u521d\u59cb\u51b3\u7b56\u3002 for ( int j = 1 ; j <= n ; ++ j ) { dp [ i ][ j ] = que ( a [ j ] - 1 ); add ( a [ j ], dp [ i - 1 ][ j ]); } } int ans = 0 ; for ( int i = 1 ; i <= n ; ++ i ) ans = ( ans + dp [ m ][ i ]) % mod ; cout << \"Case #\" << qwq << \": \" << ans << endl ; } int main () { int T ; cin >> T ; int cnt = 0 ; while ( T -- ) solve ( ++ cnt ); return 0 ; } \u6cdb\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 DP \u7684\u4f18\u5316\u5927\u591a\u90fd\u5206\u4e3a\u4e24\u79cd\uff1a \u5bf9\u72b6\u6001\u7684\u4f18\u5316 \u5bf9\u51b3\u7b56\u7684\u4f18\u5316 \u7b2c\u4e00\u79cd\u4e3b\u8981\u662f\u6eda\u52a8\u6570\u7ec4\uff0c\u63d0\u53d6\u9898\u76ee\u4fe1\u606f\u7b49\u5c42\u9762\u7684\u4f18\u5316\u3002 \u7b2c\u4e8c\u79cd\u5c31\u662f\u659c\u7387\u4f18\u5316\uff0cDS\u4f18\u5316\uff0c\u8d39\u7528\u63d0\u524d\u8ba1\u7b97\u8fd9\u79cd\u6280\u5de7\u6027\u7684\u4f18\u5316\u3002 \u5176\u601d\u60f3\u5927\u591a\u90fd\u662f\uff0c\u5728\u5916\u5c42\u5faa\u73af\u56fa\u5b9a\u7684\u6761\u4ef6\u4e0b\uff0c \u5c06\u5229\u7528\u679a\u4e3e\u6765\u5728\u51b3\u7b56\u96c6\u5408\u4e2d\u8f6c\u79fb\u7684\u64cd\u4f5c\uff0c\u4f18\u5316\u4e3a \u76f4\u63a5\u5728\u51b3\u7b56\u96c6\u5408\u4e2d\u627e\u5230\u6700\u4f18/\u603b\u548c\u5bf9\u5e94\u7684\u72b6\u6001\u6216\u8005\u4fe1\u606f \u3002 \u5e76\u6839\u636e\u51b3\u7b56\u96c6\u5408\u7684\u4e0a\u4e0b\u754c\u53d8\u5316\uff0c\u5355\u8c03\u6027\u8d28\u53bb\u9009\u62e9\u5bf9\u5e94\u7684\u4f18\u5316\u7b56\u7565\u3002 DS \u4f18\u5316\u4e3b\u8981\u7528\u4e8e \u4e0a\u4e0b\u754c\u4e0d\u5747\u5300\u7684\u53d8\u5316 \uff08 \u63d2\u5165 \u7b49\u53d8\u5316\u65b9\u5f0f\uff09\uff0c\u6216\u8005\u51b3\u7b56\u96c6\u5408\u53ef\u80fd\u88ab \u4fee\u6539 \u800c\u4e0d\u662f\u53bb\u9664\u7684\u60c5\u51b5\u3002 \u4e0a\u65b9\u7684\u4e24\u9053\u4f8b\u9898\uff0c\u6070\u597d\u5206\u522b\u5bf9\u5e94\u4e86\u8fd9\u4e24\u79cd\u60c5\u51b5\u3002 \u60c5\u51b51 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7b2c\u4e00\u9053\u662f\u4e0a\u4e0b\u754c\u4e0d\u5747\u5300\u53d8\u5316\uff08\u5bf9\u53f3\u7aef\u70b9\u6392\u5e8f\u8fc7\u540e\uff0c\u5de6\u7aef\u70b9\u4e0d\u4e00\u5b9a\u662f\u5355\u8c03\u7684\uff09+ \u51b3\u7b56\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u53ef\u80fd\u968f\u7740\u8f6c\u79fb\u88ab\u4fee\u6539\u3002 \u6240\u4ee5\u65e0\u6cd5\u4f7f\u7528\u76f4\u63a5\u7ef4\u62a4\u96c6\u5408\u7684\u65b9\u5f0f\uff0c\u90a3\u4e48\u6b64\u65f6\u8003\u8651\u7684\u5c31\u662f\u76f4\u63a5\u5229\u7528\u6570\u636e\u7ed3\u6784\u7ef4\u62a4 \\(dp\\) \u6570\u7ec4\u7684\u4e0b\u6807\uff08\u67d0\u4e2a\u7ef4\u5ea6\uff09\u3002 \u4f7f\u7528\u7684\u6570\u636e\u7ed3\u6784\u9700\u8981\u6839\u636e\u65b9\u7a0b\u672c\u8eab\u7684\u9700\u6c42\u6765\u5b9a\uff0c\u6bd4\u5982\u65b9\u7a0b\u9700\u8981\u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u3002 \u5982\u679c\u65b9\u7a0b\u9700\u8981\u67e5\u8be2\u7b2c \\(k\\) \u5927\uff0c\u7ffb\u8f6c\u533a\u95f4\uff0c\u52a8\u6001\u63d2\u5165\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u5e73\u8861\u6811\u3002 \u6216\u8005\u8bf4 \\(dp\\) \u6570\u7ec4\u7684\u4e0b\u6807\u592a\u5927\u96be\u4ee5\u7ef4\u62a4\uff0c\u4e5f\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7b49\u6570\u636e\u7ed3\u6784\uff0c\u6216\u8005\u5148\u79bb\u6563\u5316\u3002 \u4ee5\u4e0a\u8fd9\u79cd\u60c5\u51b5\u5f88\u591a\u65f6\u5019\u90fd\u53ef\u4ee5\u76f4\u63a5\u5728\u6570\u636e\u7ed3\u6784\u4e0a\u76f4\u63a5\u7ef4\u62a4\uff0c \\(dp\\) \u6570\u7ec4\u90fd\u4e0d\u7528\u5f00\uff0c\u9ad8\u7ea7\u4e00\u70b9\u7684\u5c31\u662f\u4e24\u4e2a\u6570\u636e\u7ed3\u6784\u4e4b\u95f4\u76f8\u4e92\u6eda\u52a8\u4fe1\u606f\u3002 \u672c\u60c5\u51b5\u8fd8\u6709\u4e00\u9053\u7ecf\u5178\u9898\uff0c\u662f\u4e94\u6708 Tricks \u7684 Non-Equal Neighbors \u3002 \u60c5\u51b52 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7b2c\u4e8c\u9053\u662f\u770b\u8d77\u6765\u4e0a\u4e0b\u754c\u5747\u5300\u53d8\u5316\uff0c\u4f46\u662f\u51b3\u7b56\u96c6\u5408\u662f\u9700\u8981\u52a8\u6001\u5728\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\uff08\u56e0\u4e3a\u5173\u952e\u5b57\u662f \\(a_i\\) \uff09\uff0c\u6240\u4ee5\u4e5f\u9700\u8981\u4f7f\u7528\u6570\u636e\u7ed3\u6784\u4f18\u5316\u3002 \u8fd9\u79cd\u60c5\u51b5\u5927\u591a\u90fd\u662f\u51b3\u7b56\u96c6\u5408\u53d8\u5316\u8f83\u4e3a\u5747\u5300\uff0c\u6bd4\u5982\u6ed1\u52a8\u7a97\u53e3\u5f0f\uff0c\u5355\u8c03\u53d8\u5316\u5f0f\u3002 \u4f46\u662f\u51b3\u7b56\u96c6\u5408\u91cc\u4e00\u822c\u542b\u6709\u968f\u65f6\u4f1a\u53d8\u5316\u7684\u5143\u7d20\uff08\u6bd4\u5982 \\(dp\\) \u6570\u7ec4\u672c\u8eab\uff09\u3002 \u6240\u4ee5\u5bfc\u81f4\u5355\u8c03\u961f\u5217\u7b49\u6570\u636e\u7ed3\u6784\u96be\u4ee5\u7ef4\u62a4\uff0c\u6b64\u65f6\u5c31\u53ef\u4ee5\u5229\u7528\u5e73\u8861\u6811\u6216\u8005\u79bb\u6563\u5316\u540e\u7ef4\u62a4\u4f4d\u7f6e\u7684\u6811\u72b6\u6570\u7ec4/\u7ebf\u6bb5\u6811\u6765\u4f18\u5316\u3002 \uff08\u5176\u5b9e\u7ef4\u62a4\u4f4d\u7f6e\u672c\u8d28\u4e0a\u4e5f\u662f\u4e00\u79cd\u7ef4\u62a4\u4e0b\u6807\uff09 \u5e38\u89c1\u7684\u6280\u5de7\u662f\u51b3\u7b56\u540e\u518d\u63d2\u5165\u65b0\u51b3\u7b56\uff0c\u4ee5\u4fdd\u8bc1\u4e0b\u6807\u9650\u5236\u7684\u6210\u7acb\u3002 \u5e76\u4e14\u8fd9\u79cd\u60c5\u51b5\u7684\u65b9\u7a0b\u901a\u5e38\u53ea\u4f9d\u8d56\u4e0a\u4e00\u5c42\u7684 \\(dp\\) \u503c\uff0c\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u7684\u4e00\u822c\u90fd\u662f\u4e0a\u4e00\u4e2a\u9636\u6bb5\u7684\u503c\u3002 \u672c\u60c5\u51b5\u8fd8\u6709\u4e24\u9053\u7ecf\u5178\u9898\uff0c\u662f\u4e94\u6708 Tricks \u7684 The Bakery \uff0c\u548c\u56db\u6708\u597d\u9898\u7684 Optimal Partition \u3002 \u6216\u8005\u8bf4\u8fd9\u79cd\u9898\u7684\u672c\u8d28\u662f\u4e3a\u4e86\u8ba9 dp \u6570\u7ec4\u662f\u8fde\u7eed\u7684\u4e00\u6bb5\uff0c\u65b9\u4fbf\u8ba1\u7b97\u800c\u8003\u8651\u7684\u3002","title":"\u6570\u636e\u7ed3\u6784\u4f18\u5316"},{"location":"algor/dp/opt/data-structure-optimize/#_1","text":"","title":"\u4f8b\u9898"},{"location":"algor/dp/opt/data-structure-optimize/#cleaning-shifts","text":"\u519c\u592b\u7ea6\u7ff0\u96c7\u4f63\u4ed6\u7684 \\(N\\) \u5934\u5976\u725b\u5e2e\u4ed6\u8fdb\u884c\u725b\u68da\u7684\u6e05\u7406\u5de5\u4f5c\u3002 \u4ed6\u5c06\u5168\u5929\u5206\u4e3a\u4e86\u5f88\u591a\u4e2a\u73ed\u6b21\uff0c\u5176\u4e2d\u7b2c \\(M\\) \u4e2a\u73ed\u6b21\u5230\u7b2c \\(E\\) \u4e2a\u73ed\u6b21\uff08\u5305\u62ec\u8fd9\u4e24\u4e2a\u73ed\u6b21\uff09\u4e4b\u95f4\u5fc5\u987b\u90fd\u6709\u725b\u8fdb\u884c\u6e05\u7406\u3002 \u8fd9 \\(N\\) \u5934\u725b\u4e2d\uff0c\u7b2c \\(i\\) \u5934\u725b\u53ef\u4ee5\u4ece\u7b2c \\(a_i\\) \u4e2a\u73ed\u6b21\u5de5\u4f5c\u5230\u7b2c \\(b_i\\) \u4e2a\u73ed\u6b21\uff0c\u540c\u65f6\uff0c\u5b83\u4f1a\u7d22\u53d6 \\(c_i\\) \u7684\u4f63\u91d1\u3002 \u8bf7\u4f60\u5b89\u6392\u4e00\u4e2a\u5408\u7406\u7684\u6e05\u7406\u73ed\u6b21\uff0c\u4f7f\u5f97 \\([M,E]\\) \u65f6\u95f4\u6bb5\u5185\u90fd\u6709\u5976\u725b\u5728\u6e05\u7406\uff0c\u5e76\u4e14\u6240\u9700\u652f\u4ed8\u7ed9\u5976\u725b\u7684\u62a5\u916c\u6700\u5c11\u3002 \\(1\\le N \\le 1e3, 0 \\le M,E \\le 86399, a_i,b_i \\in [M,E]\\) \u63d0\u53d6\u9898\u76ee\u8981\u7d20\u4e4b\u540e\u53ef\u4ee5\u8bbe\u8ba1\u51fa\u4e00\u4e2a\u72b6\u6001\uff1a \\(dp_i\\) \u8868\u793a \\([M,i]\\) \u8fd9\u4e00\u6bb5\u5168\u90e8\u6e05\u7406\u5b8c\u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u82b1\u8d39\u6700\u5c0f\u503c\u3002 \u53ef\u4ee5\u8003\u8651\u5148\u6309\u7167\u53f3\u7aef\u70b9\u6392\u5e8f\uff0c\u4ece\u725b\u7684\u5de5\u4f5c\u65f6\u95f4\u7684\u53f3\u7aef\u70b9\u8fdb\u884c\u8f6c\u79fb\uff0c\u53ef\u4ee5\u8bbe\u8ba1\u51fa\u65b9\u7a0b\uff1a \\[dp_{b_i} = \\min\\limits_{a_i -1 \\le j < b_i}\\{dp_j\\} + c_i\\] \u679a\u4e3e \\(j\\) \u627e\u5230\u6700\u5c0f\u503c\u5373\u53ef\u3002 \u8fd9\u91cc\u4f7f\u7528 \\(b_i\\) \u4f5c\u4e3a\u4e0b\u6807\u7684\u539f\u56e0\u662f\uff0c\u6211\u4eec\u5982\u679c\u76f4\u63a5\u679a\u4e3e \\(i\\) \uff0c\u65e0\u6cd5\u5f88\u597d\u7684\u786e\u5b9a\u5230\u5e95\u5f53\u524d\u8003\u8651\u7684\u662f\u54ea\u4e00\u5934\u725b\u3002 \u5176\u5b9e\u74f6\u9888\u5c31\u5728\u4e8e\u8fd9\u4e2a\u679a\u4e3e\u7684\u8fc7\u7a0b\uff0c\u6240\u4ee5\u8003\u8651\u5bf9\u8fd9\u4e2a\u679a\u4e3e\u7684\u8fc7\u7a0b\u8fdb\u884c\u4f18\u5316\u3002 \u53d1\u73b0\u51b3\u7b56\u96c6\u5408\u5c31\u662f \\(\\{dp_j\\} \\ | \\ j \\in [a_1 - 1, b_i]\\) \uff0c \u89c2\u5bdf\u5b83\u7684\u53d8\u5316\uff0c\u5f53 \\(i\\) \u589e\u52a0\u65f6\uff0c \\(b_i\\) \u662f\u4e25\u683c\u4e0d\u4e0b\u964d\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u6392\u4e86\u5e8f\u3002 \u4f46 \\(a_i\\) \u7684\u53d8\u5316\u5f88\u53ef\u80fd\u975e\u5e38\u4e0d\u5747\u5300\uff0c\u6240\u4ee5\u6211\u4eec\u4f3c\u4e4e\u6ca1\u6cd5\u505a\u7c7b\u4f3c\u5355\u8c03\u961f\u5217\u8fd9\u79cd\u76f4\u63a5\u7ef4\u62a4\u51b3\u7b56\u96c6\u5408\u7684\u4f18\u5316\u3002 \u4f46\u662f\uff0c\u8fd9\u91cc\u662f\u8be2\u95ee \\(dp\\) \u5728 \u67d0\u4e00\u6bb5\u4e0a\u7684\u6700\u5c0f\u503c \uff0c\u4e14 \\(dp\\) \u968f\u65f6\u4f1a\u53d1\u751f\u66f4\u65b0 \u3002 \u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u76f4\u63a5\u7ebf\u6bb5\u6811\u7ef4\u62a4 \\(dp\\) \u6570\u7ec4\uff08\u672c\u8d28\u4e0a\u662f\u7ef4\u62a4\u5b83\u7684\u7b2c\u4e00\u7ef4\uff09\u3002 \u652f\u6301\u51b3\u7b56\u540e\u5355\u70b9\u4fee\u6539\uff0c\u8f6c\u79fb\u7684\u65f6\u5019\u533a\u95f4\u8be2\u95ee \\(\\min\\) \u5c31\u884c\u4e86\u3002 \u5e76\u4e14\uff0c\u672c\u9898\u5b9e\u9645\u4e0a\u53ef\u4ee5\u4e0d\u5f00 \\(dp\\) \u6570\u7ec4\uff0c\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u6267\u884c\u4fee\u6539\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 #include <iostream> #include <cstdio> #include <cstring> #include <algorithm> const int N = 2e5 + 10 ; const int INF = 0x3f3f3f3f ; using namespace std ; int read () { int x = 0 , f = 0 , c = getchar (); while ( c < '0' || c > '9' ){ if ( c == '-' ) f = 1 ; c = getchar ();} while ( c >= '0' && c <= '9' ){ x = x * 10 + c - '0' ; c = getchar ();} return f ?- x : x ; } int t [ N << 2 ]; void add ( int x , int l , int r , int pos , int val ) { // cout<<x<<\" \"<<l<<\" \"<<r<<\" \"<<pos<<\" \"<<val<<endl; if ( l == r ){ t [ x ] = min ( t [ x ], val ); return ;} //\u6ce8\u610f \u6700\u5c0f\u503c\u610f\u4e49\u4e0b\u7684\u8d4b\u503c int mid = ( l + r ) >> 1 ; if ( pos <= mid ) add ( x * 2 , l , mid , pos , val ); else add ( x * 2 + 1 , mid + 1 , r , pos , val ); t [ x ] = min ( t [ x * 2 ], t [ x * 2 + 1 ]); } int query ( int x , int l , int r , int L , int R ) { if ( L <= l && R >= r ){ return t [ x ];} int mid = ( l + r ) >> 1 ; int ans = INF ; if ( L <= mid ) ans = min ( ans , query ( x * 2 , l , mid , L , R )); if ( R > mid ) ans = min ( ans , query ( x * 2 + 1 , mid + 1 , r , L , R )); return ans ; } struct Node { int x , y , z ; } p [ N ]; bool cmp ( Node x , Node y ){ return x . y < y . y ;} int n , L , R , b [ N ], tot , f [ N ], cnt ; int main () { n = read (); L = read (); R = read (); for ( int i = 1 ; i <= n ; i ++ ) { int x = read (), y = read (), z = read (); if ( y < L || x > R ) continue ; b [ ++ tot ] = x ; b [ ++ tot ] = y ; b [ ++ tot ] = x + 1 ; b [ ++ tot ] = y + 1 ; p [ ++ cnt ] = ( Node ){ x , y , z }; } b [ ++ tot ] = L ; b [ ++ tot ] = R ; sort ( b + 1 , b + tot + 1 ); tot = unique ( b + 1 , b + tot + 1 ) - ( b + 1 ); sort ( p + 1 , p + cnt + 1 , cmp ); for ( int i = 1 ; i <= cnt ; i ++ ) { p [ i ]. x = lower_bound ( b + 1 , b + tot + 1 , p [ i ]. x ) - b , p [ i ]. y = lower_bound ( b + 1 , b + tot + 1 , p [ i ]. y ) - b ; } L = lower_bound ( b + 1 , b + tot + 1 , L ) - b ; R = lower_bound ( b + 1 , b + tot + 1 , R ) - b ; memset ( f , 0x3f , sizeof f ); memset ( t , 0x3f , sizeof t ); add ( 1 , 0 , tot , L -1 , 0 ); for ( int i = 1 ; i <= cnt ; i ++ ) { f [ p [ i ]. y ] = min ( f [ p [ i ]. y ], query ( 1 , 0 , tot , p [ i ]. x -1 , p [ i ]. y -1 ) + p [ i ]. z ); //\u53f3\u8fb9\u754c add ( 1 , 0 , tot , p [ i ]. y , f [ p [ i ]. y ]); } int ans = INF ; for ( int i = R ; i <= tot ; i ++ ) ans = min ( ans , f [ i ]); if ( ans == INF ){ puts ( \"-1\" ); return 0 ;} printf ( \"%d\" , ans ); return 0 ; } // \u76f4\u63a5\u8d3a\u7684\uff0c\u6bd5\u7adf\u662f\u5634\u5df4\u505a\u7684\u9898\uff08 // \u4f5c\u8005\uff1ajuruoHBr // \u94fe\u63a5\uff1ahttps://www.acwing.com/solution/content/92559/","title":"Cleaning Shifts"},{"location":"algor/dp/opt/data-structure-optimize/#the-battle-of-chibi","text":"\u6c42\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5e8f\u5217 \\(A\\) \u7684\u957f\u5ea6\u4e3a \\(m\\) \u7684\u4e25\u683c\u9012\u589e\u5b50\u5e8f\u5217\u4e2a\u6570\u3002 \u7b54\u6848\u5bf9 \\(1e9+7\\) \u53d6\u6a21\uff0c \\(1\\le n \\le 1000, |a_i| \\le 1e9\\) \u3002 \u4e25\u683c\u9012\u589e\u5b50\u5e8f\u5217\u8fd9\u4e2a\u4e1c\u897f\u7c7b\u4f3c LIS\uff0c\u672c\u9898\u4e2d\u591a\u4e86 \\(m\\) \u8fd9\u4e2a\u9650\u5236\u3002 \u6240\u4ee5\u5c31\u8bbe \\(dp_{i,j}\\) \u8868\u793a\u957f\u5ea6\u4e3a \\(i\\) \uff0c\u4ece \\(1\\sim j\\) \u9009\uff0c\u7531 \\(A_j\\) \u7ed3\u5c3e\u7684\u4e25\u683c\u9012\u589e\u5b50\u5e8f\u5217\u4e2a\u6570\u3002 \u6839\u636e\u201c\u6700\u540e\u4e00\u4e2a\u4e0d\u540c\u70b9\u201d\u7684\u5212\u5206\u4f9d\u636e\uff0c\u679a\u4e3e\u4e0a\u4e00\u4e2a\u662f\u4ece\u54ea\u91cc\u8f6c\u79fb\u8fc7\u6765\u7684\u5373\u53ef\u3002 \u53ef\u4ee5\u5f97\u5230\uff1a \\[dp_{i,j} = \\sum\\limits_{a_{k} < a_j \\operatorname{and} k < j} dp_{i-1,k}\\] \u521d\u59cb\u5316 \\(a_0 = +\\infty,f_{0,0} = 1\\) \uff0c\u5176\u4f59 \\(f\\) \u4e3a \\(0\\) \u3002 \u53d1\u73b0\u5f53\u5916\u5c42\u5faa\u73af\u90fd\u56fa\u5b9a\u7684\u65f6\u5019\uff0c\u5982\u679c \\(j + 1\\) \uff0c\u90a3\u4e48 \\(k\\) \u7684\u53d6\u503c\u8303\u56f4\u5c31\u4f1a\u4ece \\([0,j)\\) \u53d8\u5230 \\([0,j+1)\\) \u3002 \u90a3\u4e48\u51b3\u7b56\u96c6\u5408\u5c31\u53ea\u4f1a\u591a \\(dp_{i-1,j}\\) \u8fd9\u4e2a\u51b3\u7b56\u3002 \u7136\u540e\u8981\u505a\u7684\u5c31\u662f\u5728\u51b3\u7b56\u96c6\u5408\u91cc\u67e5\u8be2\u6240\u6709\u6ee1\u8db3 \\(a_j > a_k\\) \u7684 \\(dp_{i-1,k}\\) \u7684\u548c\u3002 \u53d1\u73b0\u76f4\u63a5\u679a\u4e3e\u53ea\u9700\u8981\u4e0d\u65ad\u5224\u65ad \\(a_j > a_k\\) \uff0c\u4e5f\u5c31\u662f \u53ea\u5728\u5224\u65ad\u5173\u952e\u7801\u7684\u5927\u5c0f\u5173\u7cfb \u3002 \u6240\u4ee5\u53ef\u4ee5\u5728\u51b3\u7b56\u96c6\u5408\u91cc\u6309\u7167 \\(a_i\\) \u6392\u5e8f\uff0c\u79bb\u6563\u5316\u4e00\u4e0b\uff0c\u8bbe \\(a_j\\) \u79bb\u6563\u5316\u4e4b\u540e\u7684\u503c\u4e3a \\(val(a_j)\\) \u3002 \u8be2\u95ee\u65f6\u53ea\u9700\u8981\u8be2\u95ee \\(a_j\\) \u79bb\u6563\u5316\u4e4b\u540e\u7684\u4f4d\u7f6e \\(val(a_j)\\) \u7684\u524d\u7f00\u548c\u5373\u53ef\u3002 \u6bcf\u6b21\u5bf9\u4e8e \\(dp_{i,j}\\) \u7684\u51b3\u7b56 \u8fdb\u884c\u5b8c\u4e4b\u540e \uff0c \u518d\u63d2\u5165 \\(dp_{i-1,j}\\) \u8fd9\u4e2a\u51b3\u7b56 \uff0c\u4ee5\u4fdd\u8bc1\u65b9\u7a0b\u4e2d \\(k < j\\) \u8fd9\u4e2a\u6761\u4ef6\u88ab\u6ee1\u8db3\u3002 \u5b9e\u9645\u4e0a\u5c31\u662f\u7c7b\u4f3c\u53ef\u6301\u4e45\u5316 Trie \u7684\u201c \u4f9d\u6b21\u63d2\u5165 \u201d\u7684\u601d\u60f3\uff0c\u4ee5\u5f3a\u5236\u53bb\u6389\uff08\u76f4\u63a5\u4e0d\u52a0\u5165\u5b83\u4eec\uff09 \\(j\\) \u540e\u9762\u7684\u90e8\u5206\u7684\u65b9\u5f0f\u4f7f\u5f97 \\(k < j\\) \u59cb\u7ec8\u88ab\u6ee1\u8db3\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u4f7f\u7528\u5e73\u8861\u6811\u3002 \u4e0d\u8fc7\uff0c\u56e0\u4e3a \\(n\\) \u5f88\u5c0f\uff0c\u6240\u4ee5\u53ef\u4ee5\u5bf9 \\(A\\) \u79bb\u6563\u5316\uff0c\u7136\u540e\u76f4\u63a5 \u5efa\u7acb\u4e00\u4e2a\u6811\u72b6\u6570\u7ef4\u62a4\u6240\u6709\u79bb\u6563\u5316\u540e\u7684\u4f4d\u7f6e \u3002 \u63d2\u5165\u51b3\u7b56 \\(dp_{i-1,j}\\) \u7684\u64cd\u4f5c\uff0c\u5c31\u4ee4 \\(j\\) \u8fd9\u4e2a\u4f4d\u7f6e\u52a0\u4e0a \\(dp_{i-1,j}\\) \u5373\u53ef\u3002 \u90a3\u4e48\u67e5\u8be2\u76f4\u63a5\u5728\u6811\u72b6\u6570\u7ec4\u4e0a\u6c42\u51fa \\(val(a_j)\\) \u8fd9\u4e2a\u4f4d\u7f6e\u7684\u524d\u7f00\u548c\u5c31\u884c\u4e86\uff0c \u4e0d\u8fc7\u9700\u8981\u6ce8\u610f\u8981\u8ba9 \\(a_0\\) \u79bb\u6563\u5316\u4e4b\u540e\u7684\u503c \\(1\\) \u4e5f\u88ab\u7b97\u5230\u6811\u72b6\u6570\u7ec4\u91cc\u53bb\u3002 \u56e0\u4e3a\u6211\u4eec\u4f18\u5316\u7684\u524d\u63d0\u662f \u201c\u5047\u5b9a\u5916\u5c42\u5faa\u73af\u56fa\u5b9a\u201d\uff0c\u6240\u4ee5\u6811\u72b6\u6570\u7ec4\u6bcf\u6b21\u5faa\u73af\u53ea\u4f1a\u7ef4\u62a4\u4e0a\u4e00\u4e2a\u9636\u6bb5\u7684\u6240\u6709\u72b6\u6001\u3002 \u4e5f\u5c31\u662f \\(dp_{i - 1}\\) \u7cfb\u7684\u6240\u6709\u72b6\u6001\u3002 \u8fd9\u4e2a\u4e1c\u897f\u7684\u672c\u8d28\u662f\u7c7b\u4f3c\u4e8c\u7ef4\u6570\u70b9\u4e4b\u7c7b\u7684\u4e1c\u897f\uff0c\u8003\u8651\u5206\u79bb\u503c\u57df\u9650\u5236\u548c\u4e0b\u6807\u9650\u5236\u3002 \u8fd9\u91cc\u8981\u5206\u79bb\u7684\u539f\u56e0\u662f\uff0c\u5982\u679c\u4e0d\u5206\u79bb\uff0cdp \u72b6\u6001\u662f\u5f88\u79bb\u6563\u7684\uff0c\u6c42\u548c\u4e0d\u65b9\u4fbf\uff0c\u6211\u4eec\u5e0c\u671b\u4ed6\u4eec\u662f\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u5c31\u7528\u6570\u70b9\u7684\u601d\u60f3\u4e22\u5230\u6811\u72b6\u6570\u7ec4\u4e0a\u53bb\u7ef4\u62a4\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int si = 1e3 + 10 ; constexpr int mod = 1e9 + 7 ; int n , m ; int a [ si ]; int dp [ si ][ si ]; int t [ si ]; inline int lowbit ( int x ) { return x & - x ; } inline void add ( int x , int v ) { while ( x <= n ) { t [ x ] = ( t [ x ] + v ) % mod ; x += lowbit ( x ); } } inline int que ( int x ) { int res = 0 ; while ( x ) { res = ( res + t [ x ]) % mod ; x -= lowbit ( x ); } return res ; } void solve ( int qwq ) { memset ( dp , 0 , sizeof dp ); cin >> n >> m ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; std :: vector < int > v ; for ( int i = 1 ; i <= n ; ++ i ) v . push_back ( a [ i ]); sort ( v . begin (), v . end ()); v . erase ( unique ( v . begin (), v . end ()), v . end ()); for ( int i = 1 ; i <= n ; ++ i ) a [ i ] = lower_bound ( v . begin (), v . end (), a [ i ]) - v . begin () + 2 ; a [ 0 ] = 1 ; dp [ 0 ][ 0 ] = 1 ; for ( int i = 1 ; i <= m ; ++ i ) { memset ( t , 0 , sizeof t ); // \u6811\u72b6\u6570\u7ec4\u5728\u6bcf\u4e00\u8f6e\u53ea\u7ef4\u62a4\u4e0a\u4e00\u4e2a\u9636\u6bb5 i - 1 \u7cfb\u5217\u7684\u72b6\u6001\u3002 add ( a [ 0 ], dp [ i - 1 ][ 0 ]); // \u521d\u59cb\u51b3\u7b56\u3002 for ( int j = 1 ; j <= n ; ++ j ) { dp [ i ][ j ] = que ( a [ j ] - 1 ); add ( a [ j ], dp [ i - 1 ][ j ]); } } int ans = 0 ; for ( int i = 1 ; i <= n ; ++ i ) ans = ( ans + dp [ m ][ i ]) % mod ; cout << \"Case #\" << qwq << \": \" << ans << endl ; } int main () { int T ; cin >> T ; int cnt = 0 ; while ( T -- ) solve ( ++ cnt ); return 0 ; }","title":"The Battle Of Chibi"},{"location":"algor/dp/opt/data-structure-optimize/#_2","text":"DP \u7684\u4f18\u5316\u5927\u591a\u90fd\u5206\u4e3a\u4e24\u79cd\uff1a \u5bf9\u72b6\u6001\u7684\u4f18\u5316 \u5bf9\u51b3\u7b56\u7684\u4f18\u5316 \u7b2c\u4e00\u79cd\u4e3b\u8981\u662f\u6eda\u52a8\u6570\u7ec4\uff0c\u63d0\u53d6\u9898\u76ee\u4fe1\u606f\u7b49\u5c42\u9762\u7684\u4f18\u5316\u3002 \u7b2c\u4e8c\u79cd\u5c31\u662f\u659c\u7387\u4f18\u5316\uff0cDS\u4f18\u5316\uff0c\u8d39\u7528\u63d0\u524d\u8ba1\u7b97\u8fd9\u79cd\u6280\u5de7\u6027\u7684\u4f18\u5316\u3002 \u5176\u601d\u60f3\u5927\u591a\u90fd\u662f\uff0c\u5728\u5916\u5c42\u5faa\u73af\u56fa\u5b9a\u7684\u6761\u4ef6\u4e0b\uff0c \u5c06\u5229\u7528\u679a\u4e3e\u6765\u5728\u51b3\u7b56\u96c6\u5408\u4e2d\u8f6c\u79fb\u7684\u64cd\u4f5c\uff0c\u4f18\u5316\u4e3a \u76f4\u63a5\u5728\u51b3\u7b56\u96c6\u5408\u4e2d\u627e\u5230\u6700\u4f18/\u603b\u548c\u5bf9\u5e94\u7684\u72b6\u6001\u6216\u8005\u4fe1\u606f \u3002 \u5e76\u6839\u636e\u51b3\u7b56\u96c6\u5408\u7684\u4e0a\u4e0b\u754c\u53d8\u5316\uff0c\u5355\u8c03\u6027\u8d28\u53bb\u9009\u62e9\u5bf9\u5e94\u7684\u4f18\u5316\u7b56\u7565\u3002 DS \u4f18\u5316\u4e3b\u8981\u7528\u4e8e \u4e0a\u4e0b\u754c\u4e0d\u5747\u5300\u7684\u53d8\u5316 \uff08 \u63d2\u5165 \u7b49\u53d8\u5316\u65b9\u5f0f\uff09\uff0c\u6216\u8005\u51b3\u7b56\u96c6\u5408\u53ef\u80fd\u88ab \u4fee\u6539 \u800c\u4e0d\u662f\u53bb\u9664\u7684\u60c5\u51b5\u3002 \u4e0a\u65b9\u7684\u4e24\u9053\u4f8b\u9898\uff0c\u6070\u597d\u5206\u522b\u5bf9\u5e94\u4e86\u8fd9\u4e24\u79cd\u60c5\u51b5\u3002","title":"\u6cdb\u5316"},{"location":"algor/dp/opt/data-structure-optimize/#1","text":"\u7b2c\u4e00\u9053\u662f\u4e0a\u4e0b\u754c\u4e0d\u5747\u5300\u53d8\u5316\uff08\u5bf9\u53f3\u7aef\u70b9\u6392\u5e8f\u8fc7\u540e\uff0c\u5de6\u7aef\u70b9\u4e0d\u4e00\u5b9a\u662f\u5355\u8c03\u7684\uff09+ \u51b3\u7b56\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u53ef\u80fd\u968f\u7740\u8f6c\u79fb\u88ab\u4fee\u6539\u3002 \u6240\u4ee5\u65e0\u6cd5\u4f7f\u7528\u76f4\u63a5\u7ef4\u62a4\u96c6\u5408\u7684\u65b9\u5f0f\uff0c\u90a3\u4e48\u6b64\u65f6\u8003\u8651\u7684\u5c31\u662f\u76f4\u63a5\u5229\u7528\u6570\u636e\u7ed3\u6784\u7ef4\u62a4 \\(dp\\) \u6570\u7ec4\u7684\u4e0b\u6807\uff08\u67d0\u4e2a\u7ef4\u5ea6\uff09\u3002 \u4f7f\u7528\u7684\u6570\u636e\u7ed3\u6784\u9700\u8981\u6839\u636e\u65b9\u7a0b\u672c\u8eab\u7684\u9700\u6c42\u6765\u5b9a\uff0c\u6bd4\u5982\u65b9\u7a0b\u9700\u8981\u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u3002 \u5982\u679c\u65b9\u7a0b\u9700\u8981\u67e5\u8be2\u7b2c \\(k\\) \u5927\uff0c\u7ffb\u8f6c\u533a\u95f4\uff0c\u52a8\u6001\u63d2\u5165\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u5e73\u8861\u6811\u3002 \u6216\u8005\u8bf4 \\(dp\\) \u6570\u7ec4\u7684\u4e0b\u6807\u592a\u5927\u96be\u4ee5\u7ef4\u62a4\uff0c\u4e5f\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7b49\u6570\u636e\u7ed3\u6784\uff0c\u6216\u8005\u5148\u79bb\u6563\u5316\u3002 \u4ee5\u4e0a\u8fd9\u79cd\u60c5\u51b5\u5f88\u591a\u65f6\u5019\u90fd\u53ef\u4ee5\u76f4\u63a5\u5728\u6570\u636e\u7ed3\u6784\u4e0a\u76f4\u63a5\u7ef4\u62a4\uff0c \\(dp\\) \u6570\u7ec4\u90fd\u4e0d\u7528\u5f00\uff0c\u9ad8\u7ea7\u4e00\u70b9\u7684\u5c31\u662f\u4e24\u4e2a\u6570\u636e\u7ed3\u6784\u4e4b\u95f4\u76f8\u4e92\u6eda\u52a8\u4fe1\u606f\u3002 \u672c\u60c5\u51b5\u8fd8\u6709\u4e00\u9053\u7ecf\u5178\u9898\uff0c\u662f\u4e94\u6708 Tricks \u7684 Non-Equal Neighbors \u3002","title":"\u60c5\u51b51"},{"location":"algor/dp/opt/data-structure-optimize/#2","text":"\u7b2c\u4e8c\u9053\u662f\u770b\u8d77\u6765\u4e0a\u4e0b\u754c\u5747\u5300\u53d8\u5316\uff0c\u4f46\u662f\u51b3\u7b56\u96c6\u5408\u662f\u9700\u8981\u52a8\u6001\u5728\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\uff08\u56e0\u4e3a\u5173\u952e\u5b57\u662f \\(a_i\\) \uff09\uff0c\u6240\u4ee5\u4e5f\u9700\u8981\u4f7f\u7528\u6570\u636e\u7ed3\u6784\u4f18\u5316\u3002 \u8fd9\u79cd\u60c5\u51b5\u5927\u591a\u90fd\u662f\u51b3\u7b56\u96c6\u5408\u53d8\u5316\u8f83\u4e3a\u5747\u5300\uff0c\u6bd4\u5982\u6ed1\u52a8\u7a97\u53e3\u5f0f\uff0c\u5355\u8c03\u53d8\u5316\u5f0f\u3002 \u4f46\u662f\u51b3\u7b56\u96c6\u5408\u91cc\u4e00\u822c\u542b\u6709\u968f\u65f6\u4f1a\u53d8\u5316\u7684\u5143\u7d20\uff08\u6bd4\u5982 \\(dp\\) \u6570\u7ec4\u672c\u8eab\uff09\u3002 \u6240\u4ee5\u5bfc\u81f4\u5355\u8c03\u961f\u5217\u7b49\u6570\u636e\u7ed3\u6784\u96be\u4ee5\u7ef4\u62a4\uff0c\u6b64\u65f6\u5c31\u53ef\u4ee5\u5229\u7528\u5e73\u8861\u6811\u6216\u8005\u79bb\u6563\u5316\u540e\u7ef4\u62a4\u4f4d\u7f6e\u7684\u6811\u72b6\u6570\u7ec4/\u7ebf\u6bb5\u6811\u6765\u4f18\u5316\u3002 \uff08\u5176\u5b9e\u7ef4\u62a4\u4f4d\u7f6e\u672c\u8d28\u4e0a\u4e5f\u662f\u4e00\u79cd\u7ef4\u62a4\u4e0b\u6807\uff09 \u5e38\u89c1\u7684\u6280\u5de7\u662f\u51b3\u7b56\u540e\u518d\u63d2\u5165\u65b0\u51b3\u7b56\uff0c\u4ee5\u4fdd\u8bc1\u4e0b\u6807\u9650\u5236\u7684\u6210\u7acb\u3002 \u5e76\u4e14\u8fd9\u79cd\u60c5\u51b5\u7684\u65b9\u7a0b\u901a\u5e38\u53ea\u4f9d\u8d56\u4e0a\u4e00\u5c42\u7684 \\(dp\\) \u503c\uff0c\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u7684\u4e00\u822c\u90fd\u662f\u4e0a\u4e00\u4e2a\u9636\u6bb5\u7684\u503c\u3002 \u672c\u60c5\u51b5\u8fd8\u6709\u4e24\u9053\u7ecf\u5178\u9898\uff0c\u662f\u4e94\u6708 Tricks \u7684 The Bakery \uff0c\u548c\u56db\u6708\u597d\u9898\u7684 Optimal Partition \u3002 \u6216\u8005\u8bf4\u8fd9\u79cd\u9898\u7684\u672c\u8d28\u662f\u4e3a\u4e86\u8ba9 dp \u6570\u7ec4\u662f\u8fde\u7eed\u7684\u4e00\u6bb5\uff0c\u65b9\u4fbf\u8ba1\u7b97\u800c\u8003\u8651\u7684\u3002","title":"\u60c5\u51b52"},{"location":"algor/dp/opt/monotonous-queue-optimize/","text":"\u6cdb\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e00\u7c7b\u95ee\u9898\u7684\u5e38\u89c1\u7279\u5f81\u662f 1D1D\uff0c \u4e5f\u5c31\u662f\u4e00\u7ef4\u72b6\u6001\u4e00\u7ef4\u8f6c\u79fb\u3002 \u5185\u5c42\u5faa\u73af\u7684 \u53d6\u503c\u8303\u56f4\u7531\u5916\u5c42\u5faa\u73af\u51b3\u5b9a \u3002 \u5e76\u4e14\u5728\u5916\u5c42\u5faa\u73af\u53d8\u91cf \u56fa\u5b9a \u6216\u8005 \u5355\u8c03\u53d8\u5316 \u7684\u60c5\u51b5\u4e0b\uff0c \u5185\u5c42\u5faa\u73af\u6240\u679a\u4e3e\u7684\u51b3\u7b56\u96c6\u5408\u662f\u5355\u8c03\u53d8\u5316\u7684 \u3002 \u4e0d\u4e00\u5b9a\u975e\u7684\u8981\u5934\u548c\u5c3e\u589e\u52a0\uff08\u51cf\u5c11\uff09\u7684\u4e00\u6a21\u4e00\u6837\uff0c\u53ea\u8981\u4fdd\u8bc1\u7ecf\u8fc7\u7684\u4f4d\u7f6e\u4e0d\u4f1a\u518d\u88ab\u7ecf\u8fc7\u4e00\u6b21\u5c31\u597d\uff08\u751a\u81f3\u53ef\u4ee5\u662f\u5934\u4e00\u76f4\u4e0d\u52a8\uff0c\u5c3e\u4e00\u76f4\u589e\u52a0\uff09\u3002 \u8fd9\u65f6\u5019\uff0c\u56e0\u4e3a\u5185\u5c42\u5faa\u73af\u53d8\u91cf\u7684\u53d6\u503c\u533a\u95f4\u5355\u8c03\u53d8\u5316\uff0c\u5c31\u53ef\u4ee5\u5229\u7528\u5355\u8c03\u961f\u5217\u7684\u601d\u60f3\u8fdb\u884c\u4f18\u5316\u3002 \u4f7f\u7528\u4e00\u4e2a\u5355\u8c03\u961f\u5217\u7ef4\u62a4\u51b3\u7b56\u70b9\u7684\u53ef\u80fd\u53d6\u503c\uff0c\u5e76\u4e14 \u4fdd\u6301\u961f\u5934\u662f\u6700\u4f18\u89e3 \uff0c\u5982\u679c\u961f\u5934\u8d85\u8fc7\u4e86\u9650\u5236\uff0c\u5f39\u51fa\uff0c\u5982\u679c\u961f\u5c3e\u65b0\u52a0\u5165\u7684\u5143\u7d20\u6bd4\u5df2\u7ecf\u5728\u961f\u5217\u91cc\u9762\u7684\u66f4\u52a0\u4f18\u79c0\uff0c\u6392\u9664\u5197\u6742\u51b3\u7b56\u3002 \u7136\u540e\u5229\u7528\u961f\u5934\u5143\u7d20\u8fdb\u884c\u51b3\u7b56\u5373\u53ef\u3002 \u4e00\u822c\u5f62\u5f0f \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e00\u7c7b\u95ee\u9898\u7684\u4e00\u822c\u65b9\u7a0b\u5f62\u5f0f\uff1a \\[f_i=\\min\\limits_{L(i)\\le j \\le R(i)}\\{f_j+val(i,j)\\}\\] \u5176\u4e2d \\(L(i),R(i)\\) \u662f\u5173\u4e8e \\(i\\) \u7684\u4e00\u6b21\u51fd\u6570\uff0c\u7528\u6765\u9650\u5236\u51b3\u7b56\u70b9 \\(j\\) \u7684\u8303\u56f4\uff08\u51b3\u7b56\u96c6\u5408\u4e0a\u4e0b\u754c\uff09\u3002 \u6240\u4ee5\u4e00\u822c\u6211\u4eec\u90fd\u76f4\u63a5\u8ba9 \\(i\\) \u5355\u8c03\u53d8\u5316\uff0c\u7136\u540e\u8003\u8651\u51b3\u7b56\u96c6\u5408\uff08 \\(f_{i, j}\\) \u7684\u51b3\u7b56\u96c6\u5408\u662f\u6240\u6709\u53ef\u4ee5\u8f6c\u79fb\u5230\u5b83\u7684\u5408\u6cd5\u72b6\u6001\u7ec4\u6210\u7684\u96c6\u5408\uff09\u4e0a\u4e0b\u754c\u7684\u53d8\u5316\u3002 \u4f46\u5982\u679c\u6709\u4e24\u7ef4\u72b6\u6001\u7684\u65f6\u5019\uff0c\u901a\u5e38\u8fd9\u91cc\u5c31\u4e0d\u53ea\u662f\u5173\u4e8e \\(i\\) \u7684\u4e86\uff0c\u53ef\u80fd\u8fd8\u4f1a\u6709 \\(j\\) \u5728\u91cc\u9762\u3002 \u6240\u4ee5\u8fd9\u79cd\u60c5\u51b5\u4e0b\u9700\u8981\u56fa\u5b9a \\(i\\) \u53bb\u8003\u8651\u51b3\u7b56\u96c6\u5408\u7684\u53d8\u5316\uff08\u4e24\u4e2a\u53d8\u91cf\u641e\u5728\u4e00\u8d77\u80af\u5b9a\u96be\u53d7\uff09 \\(val\\) \u5219\u662f\u5173\u4e8e \\(i,j\\) \u7684\u4e00\u4e2a\u591a\u9879\u5f0f\uff0c\u5e76\u4e14\u53ef\u4ee5\u628a\u5b83 \u5206\u6210\u4e24\u4e2a\u90e8\u5206 \uff0c\u4e00\u4e2a\u53ea\u4e0e \\(i\\) \u76f8\u5173\uff0c\u4e00\u4e2a\u53ea\u4e0e \\(j\\) \u76f8\u5173\u3002 \u524d\u4e00\u90e8\u5206\u5728 \\(i\\) \u56fa\u5b9a\u7684\u65f6\u5019\u662f\u5e38\u91cf\uff0c\u540e\u4e00\u90e8\u5206\u5229\u7528\u5355\u8c03\u961f\u5217\u7ef4\u62a4\u5373\u53ef\u3002 \u4f8b\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 \u95ee\u9898 1 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5355\u8c03\u961f\u5217\u4f18\u5316\u591a\u91cd\u80cc\u5305 \u89c1\u300a\u80cc\u5305DP\u300b\u3002 \u95ee\u9898 2 \u03c8(\uff40\u2207\u00b4)\u03c8 [POJ1821 Fence]\uff1a\u4f60\u6709 \\(P\\) \u4e2a\u5de5\u5320\uff0c\u7b2c \\(i\\) \u4e2a\u5de5\u5320\u53ea\u80fd\u7c89\u5237\u5305\u62ec \\(S_i\\) \u8fd9\u4e00\u6bb5\u6728\u677f\uff0c\u957f\u5ea6\u4e3a \\(L_i\\) \u7684\u533a\u95f4\uff0c\u5e76\u83b7\u5f97 \\(L_i \\times p_i\\) \u7684\u62a5\u916c\uff0c\u73b0\u5728\u6709 \\(n\\) \u5757\u6728\u677f\uff0c\u95ee\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u62a5\u916c\u3002 \\(1\\le n \\le 16000,1\\le m\\le 100\\) \u9996\u5148\u628a\u5de5\u5320\u6309 \\(S_i\\) \u6392\u5e8f\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5de5\u5320\u7c89\u5237\u7684\u6728\u677f\u5728\u4e0a\u4e00\u4e2a\u7684 \u540e\u9762 \u3002 \u8fd9\u6837\u5c31\u53ef\u4ee5\u65b9\u4fbf\u7684\u8fdb\u884c DP\u3002 \u8bbe \\(f_{i,j}\\) \u8868\u793a\u524d \\(j\\) \u5757\u6728\u677f\uff0c\u524d \\(i\\) \u4e2a\u4eba\u7c89\u5237\u7684\u6240\u6709\u60c5\u51b5\uff0c\u5c5e\u6027\u4e3a\u62a5\u916c\u7684\u6700\u5927\u503c\u3002 \u5148\u8003\u8651\u7279\u6b8a\u7684\u3002 \u5982\u679c\u7b2c \\(i\\) \u4e2a\u4eba\u4e0d\u7c89\u5237\uff0c \\(f_{i,j}=f_{i-1,j}\\) \\(j\\) \u7a7a\u7740\u4e0d\u7c89\u5237\uff0c \\(f_{i,j}=f_{i,j-1}\\) \u3002 \u9700\u8981\u8003\u8651\u7a7a\u7740\u4e0d\u7c89\u5237\u7684\u60c5\u51b5\u662f\u56e0\u4e3a \\(\\sum L_i\\) \u6709\u53ef\u80fd\u5c0f\u4e8e \\(n\\) \uff08\u9898\u76ee\u6ca1\u6709\u4fdd\u8bc1\u5927\u4e8e\u7b49\u4e8e\uff09\u3002 \u56e0\u4e3aDP\u4e00\u822c\u662f\u4ee5last\u4f5c\u4e3a\u5206\u754c\u7684\uff0c\u8003\u8651last\u5c31\u53ef\uff0c\u524d\u9762\u7684\u4f1a\u88ab\u4f9d\u6b21\u9012\u63a8\u3002 \u7136\u540e\u8003\u8651\u679a\u4e3e\u4e0a\u4e00\u4e2a\u4eba\u6700\u540e\u5237\u5230\u4e86\u54ea\u91cc\uff0c\u8bbe\u8fd9\u4e2a\u4f4d\u7f6e\u4e3a \\(k\\) \u3002 \u7136\u540e \\([k+1,j]\\) \u5c31\u5fc5\u987b\u662f\u7b2c \\(i\\) \u4e2a\u4eba\u6765\u5904\u7406\u3002 \u56e0\u4e3a\u9898\u76ee\u6709\u9650\u5236\uff0c\u6240\u4ee5 \\(k\\) \u662f\u6709\u53d6\u503c\u8303\u56f4\u7684\u3002 \u53ef\u4ee5\u5f97\u5230\u65b9\u7a0b\uff1a \\[f_{i,j}=\\max\\limits_{j-L_i\\le k \\le S_i-1}\\{f_{i-1,k}+P_i\\times(j-k)\\},j \\ge L_i\\] \u590d\u6742\u5ea6 \\(O(n^3)\\) \u4e0d\u80fd\u63a5\u53d7\uff0c\u53d1\u73b0\u65b9\u7a0b\u662f 1D1D \u7684\u5f62\u5f0f\uff0c\u4e14 \\(k\\) \u7684\u53d8\u5316\u4e0b\u754c\u5728 \\(i\\) \u56fa\u5b9a\u7684\u65f6\u5019\u662f\u4e00\u4e2a\u5173\u4e8e \\(j\\) \u7684\u4e00\u6b21\u51fd\u6570\uff0c\u4e0a\u754c\u662f\u4e00\u4e2a\u5e38\u6570\u3002 \u90a3\u4e48\u5c31\u8bc1\u660e\uff0c\u5f53 \\(i\\) \u56fa\u5b9a\uff0c \\(j\\) \u5355\u8c03\u53d8\u5316\u7684\u65f6\u5019\uff0c \\(k\\) \u4e5f\u662f\u5355\u8c03\u53d8\u5316\u7684\u3002 \u5e76\u4e14 \\(P_i\\times(j-k)\\) \u662f\u4e00\u4e2a\u5173\u4e8e \\(j,k\\) \u7684\u591a\u9879\u5f0f\uff0c\u8fd8\u53ef\u4ee5\u62c6\u5206\u6210\u4e24\u90e8\u5206\uff08\u6ca1\u6709 \\(j,k\\) \u7684\u4e58\u79ef\u9879\uff09\u3002 \u4e8e\u662f\u628a\u8fd9\u4e00\u90e8\u5206\u62c6\u5f00\uff1a \\[f_{i,j}=P_i\\times j + \\max\\limits_{j-L_i\\le k \\le S_i-1}\\{f_{i-1,k}-P_i\\times k\\},j \\ge L_i\\] \u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(i\\) \uff0c\u7ef4\u62a4\u4e00\u4e2a \\(f_{i-1,k}-P_i\\times k\\) \u7684\u6700\u5927\u503c\u7684\u961f\u5217\uff0c\u5e76\u4e14\u4fdd\u8bc1 \\(k\\) \u5355\u8c03\u9012\u589e\u3002 \u5f00\u59cb\u7684\u65f6\u5019\u628a\u521d\u59cb\u7684\u51b3\u7b56\u5148\u63d2\u5165\u8fdb\u53bb\uff0c\u7136\u540e\u679a\u4e3e \\(j\\) \uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(f_{i,j}\\) \u53d6\u961f\u5934\u66f4\u65b0\uff0c\u5e76\u540c\u6b65\u7ef4\u62a4\u5355\u8c03\u6027\u4ee5\u53ca\u5408\u6cd5\u6027\u5373\u53ef\u3002 \u56e0\u4e3a\u6bcf\u4e2a\u5143\u7d20\u53ea\u4f1a\u5165\u961f\u51fa\u961f\u4e00\u6b21\uff0c\u590d\u6742\u5ea6 \\(\\text{O}(nP)\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include <cstdio> #include <iostream> #include <algorithm> #include <cmath> #include <deque> using namespace std ; const int si_n = 16000 + 100 ; const int si_m = 110 ; int n , m , i , j , k , f [ si_m ][ si_n ]; struct node { int p , l , s ; bool operator < ( const node & b ) const { return s < b . s ; } } a [ si_n ]; deque < int > q ; // \u5077\u61d2 deque, \u6570\u7ec4\u5199\u6cd5\u4e5f\u662f\u4e00\u6837\u7684\u3002 inline void init (){ ios :: sync_with_stdio ( false ), cin >> m >> n ; for ( register int i = 1 ; i <= n ; i ++ ) cin >> a [ i ]. l >> a [ i ]. p >> a [ i ]. s ; sort ( a + 1 , a + 1 + n ); } inline int cal ( int i , int k ){ return f [ i -1 ][ k ] - a [ i ]. p * k ; } inline void work (){ for ( register int i = 1 ; i <= n ; i ++ ){ for ( register int k = max ( 0 , a [ i ]. s - a [ i ]. l ); k < a [ i ]. s ; k ++ ){ while ( q . size () && cal ( i , q . back ()) <= cal ( i , k )) q . pop_back (); q . push_back ( k ); } // \u63d2\u5165\u521d\u59cb\u51b3\u7b56 for ( register int j = 1 ; j <= m ; j ++ ) { f [ i ][ j ] = max ( f [ i -1 ][ j ], f [ i ][ j -1 ]); // \u7279\u6b8a\u60c5\u51b5 if ( j >= a [ i ]. s ){ while ( q . size () && q . front () < j - a [ i ]. l ) q . pop_front (); if ( q . size ()) f [ i ][ j ] = max ( f [ i ][ j ], a [ i ]. p * j + cal ( i , q . front ())); // \u961f\u5217\u975e\u7a7a\u624d\u53ef\u4ee5\u8f6c\u79fb } // \u8f6c\u79fb } } cout << f [ n ][ m ]; return ; } int main (){ init (), work (); return 0 ; } \u6a21\u677f \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e00\u822c\u5355\u8c03\u961f\u5217\u4f18\u5316\u8f6c\u79fb\u7684\u65f6\u5019\u7684\u6a21\u677f\uff1a 1 2 3 4 5 6 7 8 \u5faa\u73af \u63d2\u5165\u521d\u59cb\u51b3\u7b56 \u5faa\u73af \u5148\u628a\u8fc7\u65f6\u7684\u5220\u9664 \uff08 \u7ef4\u62a4\u5408\u6cd5\u6027 \uff09 \u5982\u679c\u961f\u5217\u975e\u7a7a \u8f6c\u79fb \uff0c\uff08 \u51b3\u7b56 \uff09 \u6392\u9664\u5197\u6742 \uff0c \u52a0\u5165\u65b0\u72b6\u6001 \u3002\uff08 \u7ef4\u62a4\u5355\u8c03\u6027 \uff09 \uff08 \u540e\u4e24\u6b65\u6709\u7684\u65f6\u5019\u4e0d\u9700\u8981 \uff0c \u6bd4\u5982\u8fd9\u4e2a\u9898 \uff09 \u5efa\u8bae\u8fd8\u662f\u770b\u6211\u7ed9\u5b66\u5f1f\u5199\u7684 \u8bb2\u7a3f \uff0c\u611f\u89c9\u5199\u7684\u66f4\u6e05\u695a\u4e00\u70b9\u3002","title":"\u5355\u8c03\u961f\u5217\u4f18\u5316"},{"location":"algor/dp/opt/monotonous-queue-optimize/#_1","text":"\u8fd9\u4e00\u7c7b\u95ee\u9898\u7684\u5e38\u89c1\u7279\u5f81\u662f 1D1D\uff0c \u4e5f\u5c31\u662f\u4e00\u7ef4\u72b6\u6001\u4e00\u7ef4\u8f6c\u79fb\u3002 \u5185\u5c42\u5faa\u73af\u7684 \u53d6\u503c\u8303\u56f4\u7531\u5916\u5c42\u5faa\u73af\u51b3\u5b9a \u3002 \u5e76\u4e14\u5728\u5916\u5c42\u5faa\u73af\u53d8\u91cf \u56fa\u5b9a \u6216\u8005 \u5355\u8c03\u53d8\u5316 \u7684\u60c5\u51b5\u4e0b\uff0c \u5185\u5c42\u5faa\u73af\u6240\u679a\u4e3e\u7684\u51b3\u7b56\u96c6\u5408\u662f\u5355\u8c03\u53d8\u5316\u7684 \u3002 \u4e0d\u4e00\u5b9a\u975e\u7684\u8981\u5934\u548c\u5c3e\u589e\u52a0\uff08\u51cf\u5c11\uff09\u7684\u4e00\u6a21\u4e00\u6837\uff0c\u53ea\u8981\u4fdd\u8bc1\u7ecf\u8fc7\u7684\u4f4d\u7f6e\u4e0d\u4f1a\u518d\u88ab\u7ecf\u8fc7\u4e00\u6b21\u5c31\u597d\uff08\u751a\u81f3\u53ef\u4ee5\u662f\u5934\u4e00\u76f4\u4e0d\u52a8\uff0c\u5c3e\u4e00\u76f4\u589e\u52a0\uff09\u3002 \u8fd9\u65f6\u5019\uff0c\u56e0\u4e3a\u5185\u5c42\u5faa\u73af\u53d8\u91cf\u7684\u53d6\u503c\u533a\u95f4\u5355\u8c03\u53d8\u5316\uff0c\u5c31\u53ef\u4ee5\u5229\u7528\u5355\u8c03\u961f\u5217\u7684\u601d\u60f3\u8fdb\u884c\u4f18\u5316\u3002 \u4f7f\u7528\u4e00\u4e2a\u5355\u8c03\u961f\u5217\u7ef4\u62a4\u51b3\u7b56\u70b9\u7684\u53ef\u80fd\u53d6\u503c\uff0c\u5e76\u4e14 \u4fdd\u6301\u961f\u5934\u662f\u6700\u4f18\u89e3 \uff0c\u5982\u679c\u961f\u5934\u8d85\u8fc7\u4e86\u9650\u5236\uff0c\u5f39\u51fa\uff0c\u5982\u679c\u961f\u5c3e\u65b0\u52a0\u5165\u7684\u5143\u7d20\u6bd4\u5df2\u7ecf\u5728\u961f\u5217\u91cc\u9762\u7684\u66f4\u52a0\u4f18\u79c0\uff0c\u6392\u9664\u5197\u6742\u51b3\u7b56\u3002 \u7136\u540e\u5229\u7528\u961f\u5934\u5143\u7d20\u8fdb\u884c\u51b3\u7b56\u5373\u53ef\u3002","title":"\u6cdb\u5316"},{"location":"algor/dp/opt/monotonous-queue-optimize/#_2","text":"\u8fd9\u4e00\u7c7b\u95ee\u9898\u7684\u4e00\u822c\u65b9\u7a0b\u5f62\u5f0f\uff1a \\[f_i=\\min\\limits_{L(i)\\le j \\le R(i)}\\{f_j+val(i,j)\\}\\] \u5176\u4e2d \\(L(i),R(i)\\) \u662f\u5173\u4e8e \\(i\\) \u7684\u4e00\u6b21\u51fd\u6570\uff0c\u7528\u6765\u9650\u5236\u51b3\u7b56\u70b9 \\(j\\) \u7684\u8303\u56f4\uff08\u51b3\u7b56\u96c6\u5408\u4e0a\u4e0b\u754c\uff09\u3002 \u6240\u4ee5\u4e00\u822c\u6211\u4eec\u90fd\u76f4\u63a5\u8ba9 \\(i\\) \u5355\u8c03\u53d8\u5316\uff0c\u7136\u540e\u8003\u8651\u51b3\u7b56\u96c6\u5408\uff08 \\(f_{i, j}\\) \u7684\u51b3\u7b56\u96c6\u5408\u662f\u6240\u6709\u53ef\u4ee5\u8f6c\u79fb\u5230\u5b83\u7684\u5408\u6cd5\u72b6\u6001\u7ec4\u6210\u7684\u96c6\u5408\uff09\u4e0a\u4e0b\u754c\u7684\u53d8\u5316\u3002 \u4f46\u5982\u679c\u6709\u4e24\u7ef4\u72b6\u6001\u7684\u65f6\u5019\uff0c\u901a\u5e38\u8fd9\u91cc\u5c31\u4e0d\u53ea\u662f\u5173\u4e8e \\(i\\) \u7684\u4e86\uff0c\u53ef\u80fd\u8fd8\u4f1a\u6709 \\(j\\) \u5728\u91cc\u9762\u3002 \u6240\u4ee5\u8fd9\u79cd\u60c5\u51b5\u4e0b\u9700\u8981\u56fa\u5b9a \\(i\\) \u53bb\u8003\u8651\u51b3\u7b56\u96c6\u5408\u7684\u53d8\u5316\uff08\u4e24\u4e2a\u53d8\u91cf\u641e\u5728\u4e00\u8d77\u80af\u5b9a\u96be\u53d7\uff09 \\(val\\) \u5219\u662f\u5173\u4e8e \\(i,j\\) \u7684\u4e00\u4e2a\u591a\u9879\u5f0f\uff0c\u5e76\u4e14\u53ef\u4ee5\u628a\u5b83 \u5206\u6210\u4e24\u4e2a\u90e8\u5206 \uff0c\u4e00\u4e2a\u53ea\u4e0e \\(i\\) \u76f8\u5173\uff0c\u4e00\u4e2a\u53ea\u4e0e \\(j\\) \u76f8\u5173\u3002 \u524d\u4e00\u90e8\u5206\u5728 \\(i\\) \u56fa\u5b9a\u7684\u65f6\u5019\u662f\u5e38\u91cf\uff0c\u540e\u4e00\u90e8\u5206\u5229\u7528\u5355\u8c03\u961f\u5217\u7ef4\u62a4\u5373\u53ef\u3002","title":"\u4e00\u822c\u5f62\u5f0f"},{"location":"algor/dp/opt/monotonous-queue-optimize/#_3","text":"","title":"\u4f8b\u9898"},{"location":"algor/dp/opt/monotonous-queue-optimize/#1","text":"\u5355\u8c03\u961f\u5217\u4f18\u5316\u591a\u91cd\u80cc\u5305 \u89c1\u300a\u80cc\u5305DP\u300b\u3002","title":"\u95ee\u9898 1"},{"location":"algor/dp/opt/monotonous-queue-optimize/#2","text":"[POJ1821 Fence]\uff1a\u4f60\u6709 \\(P\\) \u4e2a\u5de5\u5320\uff0c\u7b2c \\(i\\) \u4e2a\u5de5\u5320\u53ea\u80fd\u7c89\u5237\u5305\u62ec \\(S_i\\) \u8fd9\u4e00\u6bb5\u6728\u677f\uff0c\u957f\u5ea6\u4e3a \\(L_i\\) \u7684\u533a\u95f4\uff0c\u5e76\u83b7\u5f97 \\(L_i \\times p_i\\) \u7684\u62a5\u916c\uff0c\u73b0\u5728\u6709 \\(n\\) \u5757\u6728\u677f\uff0c\u95ee\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u62a5\u916c\u3002 \\(1\\le n \\le 16000,1\\le m\\le 100\\) \u9996\u5148\u628a\u5de5\u5320\u6309 \\(S_i\\) \u6392\u5e8f\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5de5\u5320\u7c89\u5237\u7684\u6728\u677f\u5728\u4e0a\u4e00\u4e2a\u7684 \u540e\u9762 \u3002 \u8fd9\u6837\u5c31\u53ef\u4ee5\u65b9\u4fbf\u7684\u8fdb\u884c DP\u3002 \u8bbe \\(f_{i,j}\\) \u8868\u793a\u524d \\(j\\) \u5757\u6728\u677f\uff0c\u524d \\(i\\) \u4e2a\u4eba\u7c89\u5237\u7684\u6240\u6709\u60c5\u51b5\uff0c\u5c5e\u6027\u4e3a\u62a5\u916c\u7684\u6700\u5927\u503c\u3002 \u5148\u8003\u8651\u7279\u6b8a\u7684\u3002 \u5982\u679c\u7b2c \\(i\\) \u4e2a\u4eba\u4e0d\u7c89\u5237\uff0c \\(f_{i,j}=f_{i-1,j}\\) \\(j\\) \u7a7a\u7740\u4e0d\u7c89\u5237\uff0c \\(f_{i,j}=f_{i,j-1}\\) \u3002 \u9700\u8981\u8003\u8651\u7a7a\u7740\u4e0d\u7c89\u5237\u7684\u60c5\u51b5\u662f\u56e0\u4e3a \\(\\sum L_i\\) \u6709\u53ef\u80fd\u5c0f\u4e8e \\(n\\) \uff08\u9898\u76ee\u6ca1\u6709\u4fdd\u8bc1\u5927\u4e8e\u7b49\u4e8e\uff09\u3002 \u56e0\u4e3aDP\u4e00\u822c\u662f\u4ee5last\u4f5c\u4e3a\u5206\u754c\u7684\uff0c\u8003\u8651last\u5c31\u53ef\uff0c\u524d\u9762\u7684\u4f1a\u88ab\u4f9d\u6b21\u9012\u63a8\u3002 \u7136\u540e\u8003\u8651\u679a\u4e3e\u4e0a\u4e00\u4e2a\u4eba\u6700\u540e\u5237\u5230\u4e86\u54ea\u91cc\uff0c\u8bbe\u8fd9\u4e2a\u4f4d\u7f6e\u4e3a \\(k\\) \u3002 \u7136\u540e \\([k+1,j]\\) \u5c31\u5fc5\u987b\u662f\u7b2c \\(i\\) \u4e2a\u4eba\u6765\u5904\u7406\u3002 \u56e0\u4e3a\u9898\u76ee\u6709\u9650\u5236\uff0c\u6240\u4ee5 \\(k\\) \u662f\u6709\u53d6\u503c\u8303\u56f4\u7684\u3002 \u53ef\u4ee5\u5f97\u5230\u65b9\u7a0b\uff1a \\[f_{i,j}=\\max\\limits_{j-L_i\\le k \\le S_i-1}\\{f_{i-1,k}+P_i\\times(j-k)\\},j \\ge L_i\\] \u590d\u6742\u5ea6 \\(O(n^3)\\) \u4e0d\u80fd\u63a5\u53d7\uff0c\u53d1\u73b0\u65b9\u7a0b\u662f 1D1D \u7684\u5f62\u5f0f\uff0c\u4e14 \\(k\\) \u7684\u53d8\u5316\u4e0b\u754c\u5728 \\(i\\) \u56fa\u5b9a\u7684\u65f6\u5019\u662f\u4e00\u4e2a\u5173\u4e8e \\(j\\) \u7684\u4e00\u6b21\u51fd\u6570\uff0c\u4e0a\u754c\u662f\u4e00\u4e2a\u5e38\u6570\u3002 \u90a3\u4e48\u5c31\u8bc1\u660e\uff0c\u5f53 \\(i\\) \u56fa\u5b9a\uff0c \\(j\\) \u5355\u8c03\u53d8\u5316\u7684\u65f6\u5019\uff0c \\(k\\) \u4e5f\u662f\u5355\u8c03\u53d8\u5316\u7684\u3002 \u5e76\u4e14 \\(P_i\\times(j-k)\\) \u662f\u4e00\u4e2a\u5173\u4e8e \\(j,k\\) \u7684\u591a\u9879\u5f0f\uff0c\u8fd8\u53ef\u4ee5\u62c6\u5206\u6210\u4e24\u90e8\u5206\uff08\u6ca1\u6709 \\(j,k\\) \u7684\u4e58\u79ef\u9879\uff09\u3002 \u4e8e\u662f\u628a\u8fd9\u4e00\u90e8\u5206\u62c6\u5f00\uff1a \\[f_{i,j}=P_i\\times j + \\max\\limits_{j-L_i\\le k \\le S_i-1}\\{f_{i-1,k}-P_i\\times k\\},j \\ge L_i\\] \u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(i\\) \uff0c\u7ef4\u62a4\u4e00\u4e2a \\(f_{i-1,k}-P_i\\times k\\) \u7684\u6700\u5927\u503c\u7684\u961f\u5217\uff0c\u5e76\u4e14\u4fdd\u8bc1 \\(k\\) \u5355\u8c03\u9012\u589e\u3002 \u5f00\u59cb\u7684\u65f6\u5019\u628a\u521d\u59cb\u7684\u51b3\u7b56\u5148\u63d2\u5165\u8fdb\u53bb\uff0c\u7136\u540e\u679a\u4e3e \\(j\\) \uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(f_{i,j}\\) \u53d6\u961f\u5934\u66f4\u65b0\uff0c\u5e76\u540c\u6b65\u7ef4\u62a4\u5355\u8c03\u6027\u4ee5\u53ca\u5408\u6cd5\u6027\u5373\u53ef\u3002 \u56e0\u4e3a\u6bcf\u4e2a\u5143\u7d20\u53ea\u4f1a\u5165\u961f\u51fa\u961f\u4e00\u6b21\uff0c\u590d\u6742\u5ea6 \\(\\text{O}(nP)\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include <cstdio> #include <iostream> #include <algorithm> #include <cmath> #include <deque> using namespace std ; const int si_n = 16000 + 100 ; const int si_m = 110 ; int n , m , i , j , k , f [ si_m ][ si_n ]; struct node { int p , l , s ; bool operator < ( const node & b ) const { return s < b . s ; } } a [ si_n ]; deque < int > q ; // \u5077\u61d2 deque, \u6570\u7ec4\u5199\u6cd5\u4e5f\u662f\u4e00\u6837\u7684\u3002 inline void init (){ ios :: sync_with_stdio ( false ), cin >> m >> n ; for ( register int i = 1 ; i <= n ; i ++ ) cin >> a [ i ]. l >> a [ i ]. p >> a [ i ]. s ; sort ( a + 1 , a + 1 + n ); } inline int cal ( int i , int k ){ return f [ i -1 ][ k ] - a [ i ]. p * k ; } inline void work (){ for ( register int i = 1 ; i <= n ; i ++ ){ for ( register int k = max ( 0 , a [ i ]. s - a [ i ]. l ); k < a [ i ]. s ; k ++ ){ while ( q . size () && cal ( i , q . back ()) <= cal ( i , k )) q . pop_back (); q . push_back ( k ); } // \u63d2\u5165\u521d\u59cb\u51b3\u7b56 for ( register int j = 1 ; j <= m ; j ++ ) { f [ i ][ j ] = max ( f [ i -1 ][ j ], f [ i ][ j -1 ]); // \u7279\u6b8a\u60c5\u51b5 if ( j >= a [ i ]. s ){ while ( q . size () && q . front () < j - a [ i ]. l ) q . pop_front (); if ( q . size ()) f [ i ][ j ] = max ( f [ i ][ j ], a [ i ]. p * j + cal ( i , q . front ())); // \u961f\u5217\u975e\u7a7a\u624d\u53ef\u4ee5\u8f6c\u79fb } // \u8f6c\u79fb } } cout << f [ n ][ m ]; return ; } int main (){ init (), work (); return 0 ; }","title":"\u95ee\u9898 2"},{"location":"algor/dp/opt/monotonous-queue-optimize/#_4","text":"\u4e00\u822c\u5355\u8c03\u961f\u5217\u4f18\u5316\u8f6c\u79fb\u7684\u65f6\u5019\u7684\u6a21\u677f\uff1a 1 2 3 4 5 6 7 8 \u5faa\u73af \u63d2\u5165\u521d\u59cb\u51b3\u7b56 \u5faa\u73af \u5148\u628a\u8fc7\u65f6\u7684\u5220\u9664 \uff08 \u7ef4\u62a4\u5408\u6cd5\u6027 \uff09 \u5982\u679c\u961f\u5217\u975e\u7a7a \u8f6c\u79fb \uff0c\uff08 \u51b3\u7b56 \uff09 \u6392\u9664\u5197\u6742 \uff0c \u52a0\u5165\u65b0\u72b6\u6001 \u3002\uff08 \u7ef4\u62a4\u5355\u8c03\u6027 \uff09 \uff08 \u540e\u4e24\u6b65\u6709\u7684\u65f6\u5019\u4e0d\u9700\u8981 \uff0c \u6bd4\u5982\u8fd9\u4e2a\u9898 \uff09 \u5efa\u8bae\u8fd8\u662f\u770b\u6211\u7ed9\u5b66\u5f1f\u5199\u7684 \u8bb2\u7a3f \uff0c\u611f\u89c9\u5199\u7684\u66f4\u6e05\u695a\u4e00\u70b9\u3002","title":"\u6a21\u677f"},{"location":"algor/dp/opt/monotonous-stack-optimize/","text":"\u611f\u89c9\u8fd9\u4e2a\u6ca1\u5565\u597d\u8bf4\u7684\uff0c\u7c7b\u4f3c\u5355\u8c03\u961f\u5217\u4f18\u5316 dp\uff0c\u53ea\u662f\u8981\u601d\u8003\u5230 NGE \u6216\u8005 NLE \u65f6\u5019\u53ef\u80fd\u7528\u5355\u8c03\u6808\u66f4\u597d\u3002","title":"\u5355\u8c03\u6808\u4f18\u5316"},{"location":"algor/ds/binary-search-on-fenwick/","text":"","title":"Binary search on fenwick"},{"location":"algor/ds/binary-search-on-segtree/","text":"\u6982\u8ff0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u611f\u89c9\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5c0f Trick\uff0c\u5355\u72ec\u63d0\u51fa\u6765\u5199\u4e00\u4e0b\u3002 \u672c\u8d28\u4e0a\u5c31\u662f\u8bf4\uff0c\u4f60\u628a\u4e8c\u5206\u76f4\u63a5\u653e\u5230\u7ebf\u6bb5\u6811\u4e0a\u6765\u641e\uff0c\u7136\u540e\u6ce8\u610f\u4e00\u4e0b\u5565\u65f6\u5019\u8d70\u5de6\u5b50\u6811\u5565\u65f6\u5019\u8d70\u53f3\u5b50\u6811\u5565\u65f6\u5019\u8fd4\u56de\u5c31\u884c\u4e86\u3002 \u4e00\u822c\u9700\u8981\u95ee\u9898\u5b58\u5728\u4e00\u5b9a\u7684\u5355\u8c03\u6027\u3002 \u4f8b\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 \u9759\u6001\u5168\u5c40\u7b2c k \u5927 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7b80\u5355\u9898\uff0c\u5168\u5c40\u7b2c \\(k\\) \u5927\uff0c\u76f4\u63a5\u5f00\u4e00\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\u3002 \u7136\u540e\u4f60\u8003\u8651\u4ec0\u4e48\u65f6\u5019\u8d70\u5de6\u5b50\u6811\uff0c\u663e\u7136\u5c31\u662f\u5de6\u5b50\u6811\u7684\u548c\uff08\u5143\u7d20\u4e2a\u6570\uff09\u5927\u4e8e\u7b49\u4e8e \\(k\\) \uff0c\u8bc1\u660e\u7b2c \\(k\\) \u5927\u5728\u8fd9\u8fb9\u3002 \u5426\u5219\u4f60\u628a\u5de6\u5b50\u6811\u5927\u5c0f \\(sz\\) \u4ece \\(k\\) \u91cc\u9762\u51cf\u6389\uff0c\u5728\u53f3\u5b50\u6811\u8be2\u95ee\u7b2c \\(k - sz\\) \u5927\u3002 \u7136\u540e\u9012\u5f52\u4e00\u4e0b\u5c31\u5b8c\u4e86\u3002 1 2 3 4 5 6 7 8 9 i64 kth ( int p , int l , int r , int k ) { if ( l == r ) return t [ p ]. dat ; int mid = ( l + r ) >> 1 ; if ( t [ ls ]. dat >= k ) kth ( ls , l , mid , k ); else kth ( rs , mid + 1 , r , k - t [ ls ]. dat ); } \u5355\u70b9\u4fee\u6539\u533a\u95f4\u67e5\u8be2 lower_bound \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e5f\u662f\u6bd4\u8f83\u7b80\u5355\u7684\u9898\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u6b21\u662f\u5728\u7ebf\u6bb5\u6811\u4e0a\u9762\u76f4\u63a5\u4e8c\u5206\u3002 \u8003\u8651\u8bbe\u4e00\u4e2a \\(ask(ql,qr,d)\\) \u51fd\u6570\uff0c\u8868\u793a\u5f53\u524d\u6211\u8be2\u95ee \\([ql, qr]\\) \u7684\u6240\u6709\u6570\u5f53\u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e \\(d\\) \u7684\u6570\u7684\u4e0b\u6807\u3002 \u800c\u4e14\u8fd8\u6709\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u7b2c\u4e8c\u4e2a\u5b9a\u4e49\uff1a\u5b9a\u4e49 \\(ask(ql, qr, d)\\) \u8868\u793a\uff0c \u6211\u80fd\u80af\u5b9a\u6f5c\u5728\u7684\u7b54\u6848\u5fc5\u7136\u5728\u533a\u95f4 \\([ql, qr]\\) \u5185\uff0c\u4e0d\u7ba1\u662f\u5426\u771f\u7684\u5b58\u5728\u8fd9\u4e2a\u5143\u7d20\uff0c\u53cd\u6b63\u5982\u679c\u53ef\u80fd\u51fa\u73b0\u5c31\u5fc5\u7136\u5728 \\([ql, qr]\\) \u91cc\u9762\u3002 \u6240\u4ee5\u6211\u4eec\u9012\u5f52\u7684\u65f6\u5019\u8981\u4fee\u6539 \\([ql, qr]\\) \uff0c\u6b64\u65f6\u5c31\u4e0d\u80fd\u6cbf\u7528\u666e\u901a\u7ebf\u6bb5\u6811\u7684\u9012\u5f52\u548c\u8fb9\u754c\u6761\u4ef6\u4e86\u3002 \u9996\u5148\u5982\u679c\u5f53\u524d\u7ebf\u6bb5\u6811\u8282\u70b9\u7ef4\u62a4 \\([l, r]\\) \uff0c\u4f1a\u6709\u4ee5\u4e0b\u4e09\u79cd\u60c5\u51b5: \\([ql, qr] \\subset [l, mid]\\) \uff0c\u76f4\u63a5\u9012\u5f52\u5de6\u5b50\u6811\u5c31\u884c\u4e86\uff0c\u56e0\u4e3a \\([ql, qr]\\) \u7684\u7ebf\u5ea6\u6bd4 \\([l, mid]\\) \u5c0f\uff0c\u6240\u4ee5\u4e0d\u7528\u6539\u53d8\u3002 \\([ql, qr] \\subset (mid, r]\\) \uff0c\u540c\u7406\u9012\u5f52\u53f3\u5b50\u6811\u3002 \\([ql, qr] \\subset [l, r] \\land (qr > mid) \\land (ql \\le mid)\\) \uff0c\u4e5f\u5c31\u662f\u5206\u6210\u4e86\u4e24\u534a\uff0c\u56e0\u4e3a\u8981\u7b2c\u4e00\u4e2a\u6240\u4ee5\u6211\u663e\u7136\u4f18\u5148\u9012\u5f52\u5de6\u5b50\u6811\uff0c\u540c\u65f6 \\((ql, qr) \\to (ql, mid)\\) \uff0c\u5982\u679c\u5de6\u5b50\u6811\u7b54\u6848\u4e0d\u5b58\u5728\uff0c\u4e0d\u80fd\u76f4\u63a5\u8fd4\u56de\uff0c\u8fd8\u8981\u518d\u8dd1\u53f3\u5b50\u6811\u8bd5\u4e00\u8bd5\u3002 \u7136\u540e\u8003\u8651\u8fb9\u754c\u60c5\u51b5\u5e94\u8be5\u662f\u4ec0\u4e48\uff0c\u5176\u5b9e\u5c31\u662f \\(l = r\\) \u7684\u65f6\u5019\u4f1a\u627e\u5230\u6700\u7ec8\u7684\u6f5c\u5728\u7b54\u6848\uff08 \\(-1\\) \uff0c\u6216\u8005\u5c31\u662f \\(l\\) \uff09\u3002 \u6240\u4ee5\u4f60\u5982\u679c\u627e\u5230\u4e86\u7b54\u6848\uff0c\u6700\u540e\u4e00\u5b9a\u662f\u4f1a\u7f29\u5c0f\u5230\u533a\u95f4\u957f\u5ea6 \\(= 1\\) \u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 int ask ( int p , int ql , int qr , int d ) { int l = t [ p ]. l , r = t [ p ]. r ; if ( l == r ) { if ( t [ p ]. mx >= d ) return l ; return -1 ; } int mid = ( l + r ) >> 1 ; if ( qr <= mid ) return ask ( p << 1 , ql , qr , d ); if ( ql > mid ) return ask ( p << 1 | 1 , ql , qr , d ); int pos = ask ( p << 1 , ql , mid , d ); if ( ~ pos ) return pos ; return ask ( p << 1 | 1 , mid + 1 , qr , d ); } \u4f46\u662f\u8fd9\u4e2a\u5176\u5b9e\u8dd1\u7684\u5f88\u6162\u3002 \u6709\u4e00\u4e2a\u5c0f\u4f18\u5316\uff1a\u6211\u4eec\u8003\u8651 \\(l = ql, r = qr\\) \u7684\u65f6\u5019\uff0c\u6211\u76f4\u63a5\u5224\u4e00\u4e0b \\(t(2p).mx,t(2p + 1).mx\\) \u662f\u4e0d\u662f \\(\\ge d\\) \uff0c\u8fd9\u6837\u7528 \\(O(1)\\) \u6362\u6389\u4e86\u53ef\u80fd\u7684\u5f88\u591a\u6b21\u9012\u5f52\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 int ask ( int p , int ql , int qr , int d ) { int l = t [ p ]. l , r = t [ p ]. r ; if ( l == ql && r == qr ) { if ( t [ p ]. mx < d ) return -1 ; if ( l == r ) return l ; int mid = ( l + r ) >> 1 ; if ( t [ p << 1 ]. mx >= d ) return ask ( p << 1 , ql , mid , d ); return ask ( p << 1 | 1 , mid + 1 , qr , d ); } int mid = ( l + r ) >> 1 ; if ( qr <= mid ) return ask ( p << 1 , ql , qr , d ); if ( ql > mid ) return ask ( p << 1 | 1 , ql , qr , d ); int pos = ask ( p << 1 , ql , mid , d ); if ( ~ pos ) return pos ; return ask ( p << 1 | 1 , mid + 1 , qr , d ); } [\u7701\u9009\u8054\u8003 2020 A/B \u5377] \u51b0\u706b\u6218\u58eb \u03c8(\uff40\u2207\u00b4)\u03c8 \u5f88\u597d\uff0c\u6211\u8fd8\u6ca1\u505a\u3002 \u9759\u6001\u533a\u95f4\u7b2c k \u5927 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5c31\u662f\u7528\u4e3b\u5e2d\u6811\uff0c\u628a\u5168\u5c40\u53d8\u6210\u533a\u95f4\u3002 \u7136\u540e\u5728\u4e3b\u5e2d\u6811\u4e0a\u9762\u4e8c\u5206\u5c31\u884c\u4e86\u3002 \u5177\u4f53\u4e0d\u4f1a\uff0c\u4e4b\u540e\u5199\u3002 \u52a8\u6001\u533a\u95f4\u7b2c k \u5927 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5c31\u662f\u989d\u5916\u7528\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u53bb\u7ef4\u62a4\u4e3b\u5e2d\u6811\u7684\u4fe1\u606f\u652f\u6301\u5355\u70b9\u4fee\u6539\u5c31\u884c\u4e86\u3002 \u7136\u540e\u548c\u9759\u6001\u533a\u95f4\u7b2c k \u5927\u6ca1\u5565\u5dee\u522b\u3002 \u5177\u4f53\u4e0d\u4f1a\uff0c\u4e4b\u540e\u5199\u3002","title":"\u7ebf\u6bb5\u6811\u4e8c\u5206"},{"location":"algor/ds/binary-search-on-segtree/#_1","text":"\u611f\u89c9\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5c0f Trick\uff0c\u5355\u72ec\u63d0\u51fa\u6765\u5199\u4e00\u4e0b\u3002 \u672c\u8d28\u4e0a\u5c31\u662f\u8bf4\uff0c\u4f60\u628a\u4e8c\u5206\u76f4\u63a5\u653e\u5230\u7ebf\u6bb5\u6811\u4e0a\u6765\u641e\uff0c\u7136\u540e\u6ce8\u610f\u4e00\u4e0b\u5565\u65f6\u5019\u8d70\u5de6\u5b50\u6811\u5565\u65f6\u5019\u8d70\u53f3\u5b50\u6811\u5565\u65f6\u5019\u8fd4\u56de\u5c31\u884c\u4e86\u3002 \u4e00\u822c\u9700\u8981\u95ee\u9898\u5b58\u5728\u4e00\u5b9a\u7684\u5355\u8c03\u6027\u3002","title":"\u6982\u8ff0"},{"location":"algor/ds/binary-search-on-segtree/#_2","text":"","title":"\u4f8b\u9898"},{"location":"algor/ds/binary-search-on-segtree/#k","text":"\u7b80\u5355\u9898\uff0c\u5168\u5c40\u7b2c \\(k\\) \u5927\uff0c\u76f4\u63a5\u5f00\u4e00\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\u3002 \u7136\u540e\u4f60\u8003\u8651\u4ec0\u4e48\u65f6\u5019\u8d70\u5de6\u5b50\u6811\uff0c\u663e\u7136\u5c31\u662f\u5de6\u5b50\u6811\u7684\u548c\uff08\u5143\u7d20\u4e2a\u6570\uff09\u5927\u4e8e\u7b49\u4e8e \\(k\\) \uff0c\u8bc1\u660e\u7b2c \\(k\\) \u5927\u5728\u8fd9\u8fb9\u3002 \u5426\u5219\u4f60\u628a\u5de6\u5b50\u6811\u5927\u5c0f \\(sz\\) \u4ece \\(k\\) \u91cc\u9762\u51cf\u6389\uff0c\u5728\u53f3\u5b50\u6811\u8be2\u95ee\u7b2c \\(k - sz\\) \u5927\u3002 \u7136\u540e\u9012\u5f52\u4e00\u4e0b\u5c31\u5b8c\u4e86\u3002 1 2 3 4 5 6 7 8 9 i64 kth ( int p , int l , int r , int k ) { if ( l == r ) return t [ p ]. dat ; int mid = ( l + r ) >> 1 ; if ( t [ ls ]. dat >= k ) kth ( ls , l , mid , k ); else kth ( rs , mid + 1 , r , k - t [ ls ]. dat ); }","title":"\u9759\u6001\u5168\u5c40\u7b2c k \u5927"},{"location":"algor/ds/binary-search-on-segtree/#lower_bound","text":"\u4e5f\u662f\u6bd4\u8f83\u7b80\u5355\u7684\u9898\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u6b21\u662f\u5728\u7ebf\u6bb5\u6811\u4e0a\u9762\u76f4\u63a5\u4e8c\u5206\u3002 \u8003\u8651\u8bbe\u4e00\u4e2a \\(ask(ql,qr,d)\\) \u51fd\u6570\uff0c\u8868\u793a\u5f53\u524d\u6211\u8be2\u95ee \\([ql, qr]\\) \u7684\u6240\u6709\u6570\u5f53\u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e \\(d\\) \u7684\u6570\u7684\u4e0b\u6807\u3002 \u800c\u4e14\u8fd8\u6709\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u7b2c\u4e8c\u4e2a\u5b9a\u4e49\uff1a\u5b9a\u4e49 \\(ask(ql, qr, d)\\) \u8868\u793a\uff0c \u6211\u80fd\u80af\u5b9a\u6f5c\u5728\u7684\u7b54\u6848\u5fc5\u7136\u5728\u533a\u95f4 \\([ql, qr]\\) \u5185\uff0c\u4e0d\u7ba1\u662f\u5426\u771f\u7684\u5b58\u5728\u8fd9\u4e2a\u5143\u7d20\uff0c\u53cd\u6b63\u5982\u679c\u53ef\u80fd\u51fa\u73b0\u5c31\u5fc5\u7136\u5728 \\([ql, qr]\\) \u91cc\u9762\u3002 \u6240\u4ee5\u6211\u4eec\u9012\u5f52\u7684\u65f6\u5019\u8981\u4fee\u6539 \\([ql, qr]\\) \uff0c\u6b64\u65f6\u5c31\u4e0d\u80fd\u6cbf\u7528\u666e\u901a\u7ebf\u6bb5\u6811\u7684\u9012\u5f52\u548c\u8fb9\u754c\u6761\u4ef6\u4e86\u3002 \u9996\u5148\u5982\u679c\u5f53\u524d\u7ebf\u6bb5\u6811\u8282\u70b9\u7ef4\u62a4 \\([l, r]\\) \uff0c\u4f1a\u6709\u4ee5\u4e0b\u4e09\u79cd\u60c5\u51b5: \\([ql, qr] \\subset [l, mid]\\) \uff0c\u76f4\u63a5\u9012\u5f52\u5de6\u5b50\u6811\u5c31\u884c\u4e86\uff0c\u56e0\u4e3a \\([ql, qr]\\) \u7684\u7ebf\u5ea6\u6bd4 \\([l, mid]\\) \u5c0f\uff0c\u6240\u4ee5\u4e0d\u7528\u6539\u53d8\u3002 \\([ql, qr] \\subset (mid, r]\\) \uff0c\u540c\u7406\u9012\u5f52\u53f3\u5b50\u6811\u3002 \\([ql, qr] \\subset [l, r] \\land (qr > mid) \\land (ql \\le mid)\\) \uff0c\u4e5f\u5c31\u662f\u5206\u6210\u4e86\u4e24\u534a\uff0c\u56e0\u4e3a\u8981\u7b2c\u4e00\u4e2a\u6240\u4ee5\u6211\u663e\u7136\u4f18\u5148\u9012\u5f52\u5de6\u5b50\u6811\uff0c\u540c\u65f6 \\((ql, qr) \\to (ql, mid)\\) \uff0c\u5982\u679c\u5de6\u5b50\u6811\u7b54\u6848\u4e0d\u5b58\u5728\uff0c\u4e0d\u80fd\u76f4\u63a5\u8fd4\u56de\uff0c\u8fd8\u8981\u518d\u8dd1\u53f3\u5b50\u6811\u8bd5\u4e00\u8bd5\u3002 \u7136\u540e\u8003\u8651\u8fb9\u754c\u60c5\u51b5\u5e94\u8be5\u662f\u4ec0\u4e48\uff0c\u5176\u5b9e\u5c31\u662f \\(l = r\\) \u7684\u65f6\u5019\u4f1a\u627e\u5230\u6700\u7ec8\u7684\u6f5c\u5728\u7b54\u6848\uff08 \\(-1\\) \uff0c\u6216\u8005\u5c31\u662f \\(l\\) \uff09\u3002 \u6240\u4ee5\u4f60\u5982\u679c\u627e\u5230\u4e86\u7b54\u6848\uff0c\u6700\u540e\u4e00\u5b9a\u662f\u4f1a\u7f29\u5c0f\u5230\u533a\u95f4\u957f\u5ea6 \\(= 1\\) \u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 int ask ( int p , int ql , int qr , int d ) { int l = t [ p ]. l , r = t [ p ]. r ; if ( l == r ) { if ( t [ p ]. mx >= d ) return l ; return -1 ; } int mid = ( l + r ) >> 1 ; if ( qr <= mid ) return ask ( p << 1 , ql , qr , d ); if ( ql > mid ) return ask ( p << 1 | 1 , ql , qr , d ); int pos = ask ( p << 1 , ql , mid , d ); if ( ~ pos ) return pos ; return ask ( p << 1 | 1 , mid + 1 , qr , d ); } \u4f46\u662f\u8fd9\u4e2a\u5176\u5b9e\u8dd1\u7684\u5f88\u6162\u3002 \u6709\u4e00\u4e2a\u5c0f\u4f18\u5316\uff1a\u6211\u4eec\u8003\u8651 \\(l = ql, r = qr\\) \u7684\u65f6\u5019\uff0c\u6211\u76f4\u63a5\u5224\u4e00\u4e0b \\(t(2p).mx,t(2p + 1).mx\\) \u662f\u4e0d\u662f \\(\\ge d\\) \uff0c\u8fd9\u6837\u7528 \\(O(1)\\) \u6362\u6389\u4e86\u53ef\u80fd\u7684\u5f88\u591a\u6b21\u9012\u5f52\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 int ask ( int p , int ql , int qr , int d ) { int l = t [ p ]. l , r = t [ p ]. r ; if ( l == ql && r == qr ) { if ( t [ p ]. mx < d ) return -1 ; if ( l == r ) return l ; int mid = ( l + r ) >> 1 ; if ( t [ p << 1 ]. mx >= d ) return ask ( p << 1 , ql , mid , d ); return ask ( p << 1 | 1 , mid + 1 , qr , d ); } int mid = ( l + r ) >> 1 ; if ( qr <= mid ) return ask ( p << 1 , ql , qr , d ); if ( ql > mid ) return ask ( p << 1 | 1 , ql , qr , d ); int pos = ask ( p << 1 , ql , mid , d ); if ( ~ pos ) return pos ; return ask ( p << 1 | 1 , mid + 1 , qr , d ); }","title":"\u5355\u70b9\u4fee\u6539\u533a\u95f4\u67e5\u8be2 lower_bound"},{"location":"algor/ds/binary-search-on-segtree/#2020-ab","text":"\u5f88\u597d\uff0c\u6211\u8fd8\u6ca1\u505a\u3002","title":"[\u7701\u9009\u8054\u8003 2020 A/B \u5377] \u51b0\u706b\u6218\u58eb"},{"location":"algor/ds/binary-search-on-segtree/#k_1","text":"\u5c31\u662f\u7528\u4e3b\u5e2d\u6811\uff0c\u628a\u5168\u5c40\u53d8\u6210\u533a\u95f4\u3002 \u7136\u540e\u5728\u4e3b\u5e2d\u6811\u4e0a\u9762\u4e8c\u5206\u5c31\u884c\u4e86\u3002 \u5177\u4f53\u4e0d\u4f1a\uff0c\u4e4b\u540e\u5199\u3002","title":"\u9759\u6001\u533a\u95f4\u7b2c k \u5927"},{"location":"algor/ds/binary-search-on-segtree/#k_2","text":"\u5c31\u662f\u989d\u5916\u7528\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u53bb\u7ef4\u62a4\u4e3b\u5e2d\u6811\u7684\u4fe1\u606f\u652f\u6301\u5355\u70b9\u4fee\u6539\u5c31\u884c\u4e86\u3002 \u7136\u540e\u548c\u9759\u6001\u533a\u95f4\u7b2c k \u5927\u6ca1\u5565\u5dee\u522b\u3002 \u5177\u4f53\u4e0d\u4f1a\uff0c\u4e4b\u540e\u5199\u3002","title":"\u52a8\u6001\u533a\u95f4\u7b2c k \u5927"},{"location":"algor/ds/blocks/","text":"\u539f\u7406 \u03c8(\uff40\u2207\u00b4)\u03c8 \u975e\u5e38\u7b80\u5355\u4e14\u66b4\u529b\uff0c\u4ee5\u533a\u95f4\u52a0\uff0c\u533a\u95f4\u548c\u4e3a\u4f8b\u3002 \u8003\u8651\u628a\u5e8f\u5217\u5206\u6210 \\(\\lceil\\sqrt{n}\\rceil\\) \u5757\uff0c\u5176\u4e2d\u7b2c \\(i,(1 \\le i \\le \\lfloor\\sqrt{n}\\rfloor)\\) \u6bb5\u7684\u8fb9\u754c\u662f \\(l=(i-1)\\times \\lfloor\\sqrt{n}\\rfloor +1,r=i \\times \\lfloor\\sqrt{n}\\rfloor\\) \u3002 \u5bf9\u4e8e\u7b2c \\(\\lceil\\sqrt{n}\\rceil\\) \u5757\uff0c\u5982\u679c\u8bf4\u7b2c \\(\\lfloor\\sqrt{n}\\rfloor\\) \u5757\u7684\u53f3\u8fb9\u754c\u6ca1\u6709\u8fbe\u5230 \\(n\\) \uff0c\u90a3\u4e48\u5c31\u8ba9\u7b2c \\(\\lceil\\sqrt{n}\\rceil\\) \u5757\u7ef4\u62a4\u533a\u95f4 \\([i\\times \\lfloor \\sqrt{n} \\rfloor +1,n]\\) \u5373\u53ef\u3002 \u53cd\u4e4b\u662f\u4e0d\u4f1a\u6709\u7b2c \\(\\lceil\\sqrt{n}\\rceil\\) \u5757\u7684\uff0c\u56e0\u4e3a\u6b64\u65f6 \\(\\lfloor\\sqrt{n}\\rfloor=\\lceil\\sqrt{n}\\rceil=\\sqrt{n}\\) \u3002 \u7136\u540e\u9884\u5904\u7406\u51fa\u6bcf\u4e00\u4e2a\u4f4d\u7f6e \\(i\\) \u5728\u5206\u5757\u4e4b\u540e\u5c5e\u4e8e\u54ea\u4e00\u4e2a\u5757 \uff08 \\(\\text{belong}_i\\) \uff09\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5757\uff0c\u8bb0\u5f55\u5176\u5de6\u53f3\u8fb9\u754c\u4ee5\u53ca\u5757\u5185\u548c\uff0c\u5e76\u7ef4\u62a4\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u61d2\u6807\u8bb0\u7684 \\(\\text{add}\\) \uff0c\u8868\u793a\u8fd9\u4e2a\u5757\u91cc\u7684\u6240\u6709\u6570\u90fd\u88ab\u52a0\u8fc7\u591a\u5c11\u3002 \u6bcf\u6b21\u64cd\u4f5c\u533a\u95f4 \\([l,r]\\) \u7684\u65f6\u5019\u5206\u60c5\u51b5\u8ba8\u8bba\uff1a \u5982\u679c \\(\\text{belong}_l=\\text{belong}_r\\) \uff0c\u90a3\u4e48\u76f4\u63a5\u66b4\u529b\u4fee\u6539\u533a\u95f4 \\([l,r]\\) \u3002 \u53cd\u4e4b\uff0c\u628a\u8fd9\u4e2a\u533a\u95f4\u4e24\u8fb9\u975e\u6574\u5757\u7684\u90e8\u5206\u66b4\u529b\u4fee\u6539\uff0c\u7136\u540e\u4e3a\u6240\u6709\u6574\u5757\u7684\u90e8\u5206\u6253\u4e0a\u6807\u8bb0\u3002 \u67e5\u8be2\u7684\u65f6\u5019\u4e5f\u6bd4\u8f83\u7c7b\u4f3c\uff1a \u76f4\u63a5\u66b4\u529b\u626b\u4e00\u904d \\([l,r]\\) \uff0c\u6c42\u548c\u5373\u53ef\uff08\u4e0d\u8981\u5fd8\u8bb0\u628a\u6807\u8bb0\u52a0\u4e0a\uff09 \u975e\u6574\u5757\u90e8\u5206\u66b4\u529b\u626b\uff0c\u6574\u5757\u90e8\u5206\u7528\u5757\u5185\u548c\u52a0\u4e0a \\(\\text{add}\\) \u6807\u8bb0\u3002 \u56e0\u4e3a\u6700\u591a\u53ea\u6709 \\(\\lceil\\sqrt{n}\\rceil\\) \u5757\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u662f \\(\\text{O}((n+q)\\times \\sqrt{n})\\) \u3002 \u4e60\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 LOJ6277. \u6570\u5217\u5206\u5757\u5165\u95e8 1 \u03c8(\uff40\u2207\u00b4)\u03c8 \u533a\u95f4\u52a0\u5355\u70b9\u67e5\uff0c\u53ea\u9700\u8981\u5206\u5757\u7684\u65f6\u5019\u8bb0\u5f55 \\(\\text{add}\\) \u914d\u4ee5\u66b4\u529b\u4fee\u6539\u3002 \u67e5\u8be2\u65f6\u5e26\u4e0a\u6807\u8bb0\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 #include <bits/stdc++.h> using namespace std ; constexpr int si = 5e4 + 10 ; int n , q , t ; int a [ si ], add [ si ]; int L [ si ], R [ si ], belong [ si ]; inline void change ( int l , int r , int v ) { int p = belong [ l ], q = belong [ r ]; if ( p == q ) { for ( register int i = l ; i <= r ; ++ i ) { a [ i ] += v ; } } else { for ( register int i = l ; i <= R [ p ]; ++ i ) { a [ i ] += v ; } for ( register int i = L [ q ]; i <= r ; ++ i ) { a [ i ] += v ; } for ( register int i = p + 1 ; i <= q - 1 ; ++ i ) { add [ i ] += v ; } } } inline int query ( int x ) { return a [ x ] + add [ belong [ x ]]; } int main () { scanf ( \"%d\" , & n ), t = sqrt ( n ); for ( register int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); } for ( register int i = 1 ; i <= t ; ++ i ) { L [ i ] = ( i - 1 ) * t + 1 , R [ i ] = i * t ; } if ( R [ t ] < n ) ++ t , L [ t ] = R [ t - 1 ] + 1 , R [ t ] = n ; for ( register int i = 1 ; i <= t ; ++ i ) { for ( register int j = L [ i ]; j <= R [ i ]; ++ j ) { belong [ j ] = i ; } } for ( register int i = 1 ; i <= n ; ++ i ) { int op , l , r , c ; scanf ( \"%d%d%d%d\" , & op , & l , & r , & c ); if ( op == 0 ) change ( l , r , c ); else printf ( \"%d \\n \" , query ( r )); } return 0 ; } Luogu3372 \u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1 \u03c8(\uff40\u2207\u00b4)\u03c8 \u533a\u95f4\u52a0\u533a\u95f4\u548c\uff0c\u5206\u5757\u4e4b\u540e\u6309\u7167\u4e0a\u9762\u201c\u539f\u7406\u201d\u90e8\u5206\u7684\u505a\u6cd5\u6765\u5c31\u884c\u3002 \u53ea\u9700\u8981\u6ce8\u610f\u4e00\u4e0b\u4ec0\u4e48\u65f6\u5019\u8981\u66f4\u65b0\u5757\u5185\u548c\uff0c\u4ec0\u4e48\u65f6\u5019\u8981\u6253\u6807\u8bb0\u5c31\u884c\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int si = 2e5 + 10 ; int n , m , t ; int a [ si ], add [ si ], belong [ si ]; int L [ si ], R [ si ], sum [ si ]; inline void change ( int l , int r , int v ) { int p = belong [ l ], q = belong [ r ]; if ( p == q ) { for ( register int i = l ; i <= r ; ++ i ) { a [ i ] += v ; } sum [ p ] += v * ( r - l + 1 ); } else { for ( register int i = l ; i <= R [ p ]; ++ i ) { a [ i ] += v ; } sum [ p ] += v * ( R [ p ] - l + 1 ); for ( register int i = L [ q ]; i <= r ; ++ i ) { a [ i ] += v ; } sum [ q ] += v * ( r - L [ q ] + 1 ); for ( register int i = p + 1 ; i <= q - 1 ; ++ i ) { add [ i ] += v ; } } } inline int query ( int l , int r ) { int p = belong [ l ], q = belong [ r ]; int res = 0 ; if ( p == q ) { for ( register int i = l ; i <= r ; ++ i ) { res += a [ i ]; } res += add [ p ] * ( r - l + 1 ); } else { for ( register int i = l ; i <= R [ p ]; ++ i ) { res += a [ i ]; } res += add [ p ] * ( R [ p ] - l + 1 ); for ( register int i = L [ q ]; i <= r ; ++ i ) { res += a [ i ]; } res += add [ q ] * ( r - L [ q ] + 1 ); for ( register int i = p + 1 ; i <= q - 1 ; ++ i ) { res += sum [ i ], res += add [ i ] * ( R [ i ] - L [ i ] + 1 ); } } return res ; } signed main () { scanf ( \"%lld%lld\" , & n , & m ), t = sqrt ( n * 1.0 ); for ( register int i = 1 ; i <= n ; ++ i ) { scanf ( \"%lld\" , & a [ i ]); } for ( register int i = 1 ; i <= t ; ++ i ) { L [ i ] = ( i - 1 ) * sqrt ( n * 1.0 ) + 1 , R [ i ] = i * sqrt ( n * 1.0 ); } if ( R [ t ] < n ) ++ t , L [ t ] = R [ t - 1 ] + 1 , R [ t ] = n ; for ( register int i = 1 ; i <= t ; ++ i ) { for ( register int j = L [ i ]; j <= R [ i ]; ++ j ) { sum [ i ] += a [ j ], belong [ j ] = i ; } } while ( m -- ) { int op , l , r ; scanf ( \"%lld%lld%lld\" , & op , & l , & r ); if ( op == 1 ) { int k ; scanf ( \"%lld\" , & k ); change ( l , r , k ); } else printf ( \"%lld \\n \" , query ( l , r )); } return 0 ; } LOJ6278. \u6570\u5217\u5206\u5757\u5165\u95e8 2 \u03c8(\uff40\u2207\u00b4)\u03c8 \u533a\u95f4\u52a0\uff0c\u533a\u95f4\u67e5\u8be2\u6bd4 \\(c^2\\) \u5c0f\u7684\u6570\u7684\u4e2a\u6570\u3002 \u9996\u5148\u7ee7\u7eed\u5206\u5757\uff0c\u4ecd\u65e7\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u5757\u7684 \\(\\text{add}\\) \u6807\u8bb0\u3002 \u8003\u8651\u5982\u4f55\u67e5\u8be2\u533a\u95f4\u6709\u591a\u5c11\u4e2a\u6570\u6bd4 \\(c^2\\) \u5c0f\u3002 \u6cbf\u7528\u201c\u5c0f\u6bb5\u6734\u7d20\uff0c\u5927\u6bb5\u7ef4\u62a4\u201d\u7684\u601d\u60f3\uff0c\u6211\u4eec\u5728\u67e5\u8be2\u65f6\u5728\u4e24\u8fb9\u7684\u4e24\u4e2a\u4e0d\u5b8c\u6574\u5757\u8fdb\u884c\u66b4\u529b\u626b\u63cf\u3002 \u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u88ab\u5305\u542b\u7684\u6574\u5757\uff0c\u8003\u8651\u5728\u5757\u5185\u4e8c\u5206\u3002 \u4e3a\u4e86\u4e8c\u5206\uff0c\u6211\u4eec\u9700\u8981\u989d\u5916\u591a\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5757\u7ef4\u62a4\u4e00\u4e2a\u6709\u5e8f\u7684\u5e8f\u5217 \\(v\\) \u3002 \u5f53\u6211\u4eec\u66b4\u529b\u4fee\u6539\u5c0f\u6bb5\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u5c0f\u6bb5\u6240\u5c5e\u7684\u5757\u7684\u5355\u8c03\u6027\u5c31\u4f1a\u6539\u53d8\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5bf9\u8fd9\u4e2a\u5757\u7684 \\(v\\) \u8fdb\u884c\u91cd\u6392\u3002 \u5982\u679c\u662f\u5927\u6bb5\u6253\u6807\u8bb0\u7684\u8bdd\uff0c\u56e0\u4e3a\u5757\u5185\u6bcf\u4e00\u4e2a\u6570\u90fd\u88ab\u52a0\u4e86\u540c\u4e00\u4e2a\u6570\uff0c\u6240\u4ee5\u5355\u8c03\u6027\u4e0d\u4f1a\u6539\u53d8\uff0c\u4e0d\u9700\u8981\u91cd\u6392\u3002 \u90a3\u4e48\u5927\u6bb5\u67e5\u8be2\u7684\u65f6\u5019\u53ea\u9700\u8981\u628a \\(c^2\\) \u51cf\u53bb\u6bcf\u4e2a\u5757\u7684\u6807\u8bb0\u4e4b\u540e\u7136\u540e\u4e8c\u5206\u5c31\u53ef\u4ee5\u4e86\u3002 \u521d\u59cb\u5316\u7684\u65f6\u5019\u4e0d\u8981\u5fd8\u8bb0\u628a\u5143\u7d20\u6254\u8fdb \\(v\\) \u91cc\u9762\uff01 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 #include <bits/stdc++.h> using namespace std ; constexpr int si = 5e4 + 10 ; constexpr int bsi = ceil ( sqrt ( si )) + 10 ; int n , t ; int a [ si ], belong [ si ], add [ si ]; int L [ si ], R [ si ]; std :: vector < int > v [ bsi ]; inline void reset ( int pos ) { v [ pos ]. clear (); for ( register int i = L [ pos ]; i <= R [ pos ]; ++ i ) { v [ pos ]. push_back ( a [ i ]); } sort ( v [ pos ]. begin (), v [ pos ]. end ()); } inline void change ( int l , int r , int v ) { int p = belong [ l ], q = belong [ r ]; if ( p == q ) { for ( register int i = l ; i <= r ; ++ i ) { a [ i ] += v ; } reset ( p ); } else { for ( register int i = l ; i <= R [ p ]; ++ i ) { a [ i ] += v ; } reset ( p ); for ( register int i = L [ q ]; i <= r ; ++ i ) { a [ i ] += v ; } reset ( q ); for ( register int i = p + 1 ; i <= q - 1 ; ++ i ) { add [ i ] += v ; } } } inline int query ( int l , int r , int c ) { int p = belong [ l ], q = belong [ r ]; int res = 0 , limit = c * c ; if ( p == q ) { for ( register int i = l ; i <= r ; ++ i ) { if ( a [ i ] + add [ p ] < limit ) ++ res ; } } else { for ( register int i = l ; i <= R [ p ]; ++ i ) { if ( a [ i ] + add [ p ] < limit ) ++ res ; } for ( register int i = L [ q ]; i <= r ; ++ i ) { if ( a [ i ] + add [ q ] < limit ) ++ res ; } for ( register int i = p + 1 ; i <= q - 1 ; ++ i ) { int x = limit - add [ i ]; res += lower_bound ( v [ i ]. begin (), v [ i ]. end (), x ) - v [ i ]. begin (); } } return res ; } int main () { scanf ( \"%d\" , & n ), t = sqrt ( n ); for ( register int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); } for ( register int i = 1 ; i <= t ; ++ i ) { L [ i ] = ( i - 1 ) * sqrt ( n ) + 1 , R [ i ] = i * sqrt ( n ); } if ( R [ t ] < n ) ++ t , L [ t ] = R [ t - 1 ] + 1 , R [ t ] = n ; for ( register int i = 1 ; i <= t ; ++ i ) { for ( register int j = L [ i ]; j <= R [ i ]; ++ j ) { belong [ j ] = i , v [ i ]. push_back ( a [ j ]); reset ( i ); } } for ( register int i = 1 ; i <= n ; ++ i ) { int op , l , r , c ; scanf ( \"%d%d%d%d\" , & op , & l , & r , & c ); if ( op == 0 ) change ( l , r , c ); else printf ( \"%d \\n \" , query ( l , r , c )); } return 0 ; } LOJ6279. \u6570\u5217\u5206\u5757\u5165\u95e8 3 \u03c8(\uff40\u2207\u00b4)\u03c8 \u533a\u95f4\u52a0\uff0c\u533a\u95f4\u8be2\u95ee\u524d\u9a71\u3002 \u6cbf\u7528\u4e0a\u4e00\u4e2a\u9898\u7684\u601d\u60f3\uff0c\u6211\u4eec\u5c0f\u6bb5\u66b4\u529b\uff0c\u5927\u6bb5\u4e8c\u5206\u3002 \u4f46\u662f\u5982\u679c\u76f4\u63a5\u5bf9\u5757\u5185\u4e8c\u5206\u7684\u8bdd\u53ef\u80fd\u4f1a\u56e0\u4e3a\u6ca1\u53bb\u91cd\u800c\u7206\u70b8\u3002 \u6240\u4ee5\u6211\u4eec\u8003\u8651\u628a\u4e0a\u9762\u90a3\u9898\u7684 std::vector \u6362\u6210 std::set \u3002 \u90a3\u4e48\u53ea\u9700\u8981\u5728\u6bcf\u4e2a\u5757\u7684 std::set \u91cc\u9762\u7528 lower_bound \u4e8c\u5206\u4e4b\u540e\u4ee4\u8fed\u4ee3\u5668\u51cf\u4e00\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002 \uff08\u56e0\u4e3a lower_bound \u6c42\u7684\u662f\u5927\u4e8e\u7b49\u4e8e \\(x\\) \u7684\u6700\u5c0f\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff0c\u8fed\u4ee3\u5668\u5728 std::set \u91cc\u9762\u51cf\u4e00\u4e4b\u540e\u5c31\u662f\u524d\u9a71\u4e86\uff09 \u5f53\u7136\uff0c\u4e8c\u5206\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u4f7f\u7528\u5bb9\u5668\u672c\u8eab\u7684 lower_bound \uff0c\u4e0d\u7136\u6548\u7387\u4f1a\u53ca\u5176\u4f4e\u4e0b\uff08\u5177\u4f53\u53ef\u4ee5\u770b \u8fd9\u91cc \uff09\u3002 \u53e6\u5916\u4e0d\u8981\u5fd8\u8bb0\u521d\u59cb\u5316\u7684\u65f6\u5019\u628a\u5143\u7d20\u6254\u8fdb std::set \u91cc\u9762\uff0c\u4e5f\u4e0d\u8981\u5fd8\u8bb0\u5224\u4e8c\u5206\u4e4b\u540e\u4e8c\u5206\u51fa s.begin() \u7684\u60c5\u51b5\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 #include <bits/stdc++.h> using namespace std ; constexpr int si = 1e5 + 10 ; constexpr int bsi = ceil ( sqrt ( si )) + 10 ; int n , t ; int a [ si ], add [ si ], belong [ si ]; int L [ si ], R [ si ]; std :: set < int > s [ bsi ]; inline void reset ( int pos ) { s [ pos ]. clear (); for ( register int i = L [ pos ]; i <= R [ pos ]; ++ i ) { s [ pos ]. insert ( a [ i ]); } } inline void change ( int l , int r , int c ) { int p = belong [ l ], q = belong [ r ]; if ( p == q ) { for ( register int i = l ; i <= r ; ++ i ) { a [ i ] += c ; } reset ( p ); } else { for ( register int i = l ; i <= R [ p ]; ++ i ) { a [ i ] += c ; } reset ( p ); for ( register int i = L [ q ]; i <= r ; ++ i ) { a [ i ] += c ; } reset ( q ); for ( register int i = p + 1 ; i <= q - 1 ; ++ i ) { add [ i ] += c ; } } } inline int query ( int l , int r , int c ) { int p = belong [ l ], q = belong [ r ]; int res = -1 ; if ( p == q ) { for ( register int i = l ; i <= r ; ++ i ) { if ( a [ i ] + add [ p ] < c ) res = max ( res , a [ i ] + add [ p ]); } } else { for ( register int i = l ; i <= R [ p ]; ++ i ) { if ( a [ i ] + add [ p ] < c ) res = max ( res , a [ i ] + add [ p ]); } for ( register int i = L [ q ]; i <= r ; ++ i ) { if ( a [ i ] + add [ q ] < c ) res = max ( res , a [ i ] + add [ q ]); } for ( register int i = p + 1 ; i <= q - 1 ; ++ i ) { int x = c - add [ i ]; std :: set < int >:: iterator it ; it = s [ i ]. lower_bound ( x ); if ( it == s [ i ]. begin ()) continue ; it -- , res = max ( res , * it + add [ i ]); } } return res ; } int main () { scanf ( \"%d\" , & n ), t = sqrt ( n ); for ( register int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); } for ( register int i = 1 ; i <= t ; ++ i ) { L [ i ] = ( i - 1 ) * sqrt ( n ) + 1 , R [ i ] = i * sqrt ( n ); } if ( R [ t ] < n ) ++ t , L [ t ] = R [ t - 1 ] + 1 , R [ t ] = n ; for ( register int i = 1 ; i <= t ; ++ i ) { for ( register int j = L [ i ]; j <= R [ i ]; ++ j ) { belong [ j ] = i , s [ i ]. insert ( a [ j ]); } } for ( register int i = 1 ; i <= n ; ++ i ) { int op , l , r , c ; scanf ( \"%d%d%d%d\" , & op , & l , & r , & c ); if ( op == 0 ) change ( l , r , c ); else printf ( \"%d \\n \" , query ( l , r , c )); } return 0 ; } LOJ6280. \u6570\u5217\u5206\u5757\u5165\u95e8 4 \u03c8(\uff40\u2207\u00b4)\u03c8 \u533a\u95f4\u52a0\uff0c\u533a\u95f4\u6c42\u548c\u5e76\u53d6\u6a21\u3002 \u548c Luogu3372 \u57fa\u672c\u6ca1\u6709\u533a\u522b\uff0c\u53ea\u662f\u5728\u67e5\u8be2\u7684\u65f6\u5019\u591a\u4e86\u4e2a\u53d6\u6a21\u800c\u5df2\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int si = 2e5 + 10 ; int n , m , t ; int a [ si ], add [ si ], belong [ si ]; int L [ si ], R [ si ], sum [ si ]; inline void change ( int l , int r , int v ) { int p = belong [ l ], q = belong [ r ]; if ( p == q ) { for ( register int i = l ; i <= r ; ++ i ) { a [ i ] += v ; } sum [ p ] += v * ( r - l + 1 ); } else { for ( register int i = l ; i <= R [ p ]; ++ i ) { a [ i ] += v ; } sum [ p ] += v * ( R [ p ] - l + 1 ); for ( register int i = L [ q ]; i <= r ; ++ i ) { a [ i ] += v ; } sum [ q ] += v * ( r - L [ q ] + 1 ); for ( register int i = p + 1 ; i <= q - 1 ; ++ i ) { add [ i ] += v ; } } } inline int query ( int l , int r , int mod ) { int p = belong [ l ], q = belong [ r ]; int res = 0 ; if ( p == q ) { for ( register int i = l ; i <= r ; ++ i ) { res = ( res + a [ i ]) % mod ; } res = ( res + add [ p ] * ( r - l + 1 )) % mod ; } else { for ( register int i = l ; i <= R [ p ]; ++ i ) { res = ( res + a [ i ]) % mod ; } res = ( res + add [ p ] * ( R [ p ] - l + 1 )) % mod ; for ( register int i = L [ q ]; i <= r ; ++ i ) { res = ( res + a [ i ]) % mod ; } res = ( res + add [ q ] * ( r - L [ q ] + 1 )) % mod ; for ( register int i = p + 1 ; i <= q - 1 ; ++ i ) { res = ( res + sum [ i ]) % mod , res = ( res + add [ i ] * ( R [ i ] - L [ i ] + 1 )) % mod ; } } return res % mod ; } signed main () { scanf ( \"%lld\" , & n ), t = sqrt ( n ); for ( register int i = 1 ; i <= n ; ++ i ) { scanf ( \"%lld\" , & a [ i ]); } for ( register int i = 1 ; i <= t ; ++ i ) { L [ i ] = ( i - 1 ) * sqrt ( n ) + 1 , R [ i ] = i * sqrt ( n ); } if ( R [ t ] < n ) ++ t , L [ t ] = R [ t - 1 ] + 1 , R [ t ] = n ; for ( register int i = 1 ; i <= t ; ++ i ) { for ( register int j = L [ i ]; j <= R [ i ]; ++ j ) { sum [ i ] += a [ j ], belong [ j ] = i ; } } for ( register int i = 1 ; i <= n ; ++ i ) { int op , l , r , c ; scanf ( \"%lld%lld%lld%lld\" , & op , & l , & r , & c ); if ( op == 0 ) change ( l , r , c ); else printf ( \"%lld \\n \" , query ( l , r , c + 1 )); } return 0 ; } LOJ6281. \u6570\u5217\u5206\u5757\u5165\u95e8 5 \u03c8(\uff40\u2207\u00b4)\u03c8 \u533a\u95f4\u5f00\u6839\u53f7\u5e76\u5411\u4e0b\u53d6\u6574\uff0c\u533a\u95f4\u6c42\u548c\u3002 \u6211\u4eec\u5148\u8003\u8651\u4e00\u4e2a\u597d\u5199\u4e00\u70b9\u7684\u505a\u6cd5\uff1a \u8fd8\u662f\u5206\u5757\uff0c\u5bf9\u4e8e\u4efb\u610f\u7684\u88ab\u5305\u542b\u5728\u4fee\u6539\u533a\u95f4\u7684\u5b8c\u6574\u5757\u76f4\u63a5\u5168\u90e8\u66b4\u529b\u5f00\u6839\u53f7\uff0c\u5c0f\u5757\u4e5f\u662f\u5168\u90e8\u66b4\u529b\u5f00\u6839\u53f7\u3002 \u5982\u679c\u5757\u5185\u7684\u6700\u5927\u503c \\(\\le 1\\) \uff0c\u90a3\u4e48\u8fd9\u4e2a\u5757\u5c31\u4e0d\u7528\u5f00\u6839\u53f7\u3002 \u6240\u4ee5\u6bcf\u6b21\u66b4\u529b\u4fee\u6539\u5b8c\u4e00\u4e2a\u5757\uff08\u6216\u5757\u7684\u90e8\u5206\uff09\u4e4b\u540e\u9700\u8981\u66f4\u65b0\u4e00\u4e0b\u533a\u95f4\u6700\u5927\u503c\u3002 \u53c8\u53d1\u73b0\u5bf9\u4e8e int \u8303\u56f4\u5185\u7684\u6b63\u6574\u6570\uff0c\u5f00 \\(5\\) \u6b21\u6839\u53f7\u5c31\u53ef\u4ee5 \\(=1\\) \u4e86\u3002 \u5219\u5bb9\u6613\u8bc1\u660e\uff0c\u6bcf\u4e2a\u5757\u6700\u591a\u4f1a\u88ab\u5f00\u6839\u53f7 \\(4\\) \u6b21\uff0c\u6240\u4ee5\u53ef\u8fc7\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #include <bits/stdc++.h> using namespace std ; constexpr int si = 5e4 + 10 ; int n , t ; int a [ si ], add [ si ], belong [ si ]; int L [ si ], R [ si ], sum [ si ], maxv [ si ]; inline void change ( int l , int r ) { int p = belong [ l ], q = belong [ r ]; if ( p == q ) { if ( maxv [ p ] == 0 || maxv [ p ] == 1 ) return ; for ( register int i = l ; i <= r ; ++ i ) { int rmp = a [ i ]; a [ i ] = sqrt ( a [ i ]), sum [ p ] -= ( rmp - a [ i ]); } int mx = 0 ; for ( register int i = L [ p ]; i <= R [ p ]; ++ i ) { mx = max ( mx , a [ i ]); } maxv [ p ] = mx ; } else { if ( maxv [ p ] != 0 && maxv [ p ] != 1 ) { for ( register int i = l ; i <= R [ p ]; ++ i ) { int rmp = a [ i ]; a [ i ] = sqrt ( a [ i ]), sum [ p ] -= ( rmp - a [ i ]); } int mx = 0 ; for ( register int i = L [ p ]; i <= R [ p ]; ++ i ) { mx = max ( mx , a [ i ]); } maxv [ p ] = mx ; } if ( maxv [ q ] != 0 && maxv [ q ] != 1 ) { for ( register int i = L [ q ]; i <= r ; ++ i ) { int rmp = a [ i ]; a [ i ] = sqrt ( a [ i ]), sum [ q ] -= ( rmp - a [ i ]); } int mx = 0 ; for ( register int i = L [ q ]; i <= R [ q ]; ++ i ) { mx = max ( mx , a [ i ]); } maxv [ q ] = mx ; } for ( register int i = p + 1 ; i <= q - 1 ; ++ i ) { if ( maxv [ i ] == 0 || maxv [ i ] == 1 ) continue ; int mx = 0 ; for ( register int j = L [ i ]; j <= R [ i ]; ++ j ) { int rmp = a [ j ]; a [ j ] = sqrt ( a [ j ]), sum [ i ] -= ( rmp - a [ j ]); mx = max ( mx , a [ j ]); } maxv [ i ] = mx ; } } } inline int query ( int l , int r ) { int p = belong [ l ], q = belong [ r ]; int res = 0 ; if ( p == q ) { for ( register int i = l ; i <= r ; ++ i ) { res += a [ i ]; } } else { for ( register int i = l ; i <= R [ p ]; ++ i ) { res += a [ i ]; } for ( register int i = L [ q ]; i <= r ; ++ i ) { res += a [ i ]; } for ( register int i = p + 1 ; i <= q - 1 ; ++ i ) { res += sum [ i ]; } } return res ; } int main () { scanf ( \"%d\" , & n ), t = sqrt ( n ); for ( register int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); } for ( register int i = 1 ; i <= t ; ++ i ) { L [ i ] = ( i - 1 ) * sqrt ( n ) + 1 , R [ i ] = i * sqrt ( n ); } if ( R [ t ] < n ) ++ t , L [ t ] = R [ t - 1 ] + 1 , R [ t ] = n ; for ( register int i = 1 ; i <= t ; ++ i ) { for ( register int j = L [ i ]; j <= R [ i ]; ++ j ) { belong [ j ] = i , sum [ i ] += a [ j ], maxv [ i ] = max ( maxv [ i ], a [ j ]); } } for ( register int i = 1 ; i <= n ; ++ i ) { int op , l , r , c ; scanf ( \"%d%d%d%d\" , & op , & l , & r , & c ); if ( op == 0 ) change ( l , r ); else printf ( \"%d \\n \" , query ( l , r )); } return 0 ; } // it is better to use tag & rem the time of sqrt. \u8fd9\u91cc\u6709\u53e6\u4e00\u79cd \u5199\u6cd5 \uff1a \u8003\u8651\u628a\u6574\u5757\u7684\u5f00\u6839\u53f7\u6b21\u6570\u8bb0\u5f55\u4e00\u4e0b\u3002 \u644a\u5e73 \\(\\text{add}\\) \u7684\u65f6\u5019\u53ea\u9700\u8981\u66b4\u529b\u5904\u7406\u5f00 \\(1,2,3,4\\) \u6b21\u6839\u53f7\u7684\u60c5\u51b5\uff0c\u518d\u52a0\u4e0a\u4e0a\u9762\u7684\u505a\u6cd5\u4e2d\u7684\u4f18\u5316\u5373\u53ef\u3002 \u4e0d\u8fc7\u5904\u7406\u5f00\u8d85\u8fc7 \\(5\\) \u6b21\u6839\u53f7\u7684\u60c5\u51b5\u9700\u8981\u6ce8\u610f\u533a\u5206 \\(0\\) \u548c \\(1\\) \u3002","title":"\u666e\u901a\u5206\u5757"},{"location":"algor/ds/blocks/#_1","text":"\u975e\u5e38\u7b80\u5355\u4e14\u66b4\u529b\uff0c\u4ee5\u533a\u95f4\u52a0\uff0c\u533a\u95f4\u548c\u4e3a\u4f8b\u3002 \u8003\u8651\u628a\u5e8f\u5217\u5206\u6210 \\(\\lceil\\sqrt{n}\\rceil\\) \u5757\uff0c\u5176\u4e2d\u7b2c \\(i,(1 \\le i \\le \\lfloor\\sqrt{n}\\rfloor)\\) \u6bb5\u7684\u8fb9\u754c\u662f \\(l=(i-1)\\times \\lfloor\\sqrt{n}\\rfloor +1,r=i \\times \\lfloor\\sqrt{n}\\rfloor\\) \u3002 \u5bf9\u4e8e\u7b2c \\(\\lceil\\sqrt{n}\\rceil\\) \u5757\uff0c\u5982\u679c\u8bf4\u7b2c \\(\\lfloor\\sqrt{n}\\rfloor\\) \u5757\u7684\u53f3\u8fb9\u754c\u6ca1\u6709\u8fbe\u5230 \\(n\\) \uff0c\u90a3\u4e48\u5c31\u8ba9\u7b2c \\(\\lceil\\sqrt{n}\\rceil\\) \u5757\u7ef4\u62a4\u533a\u95f4 \\([i\\times \\lfloor \\sqrt{n} \\rfloor +1,n]\\) \u5373\u53ef\u3002 \u53cd\u4e4b\u662f\u4e0d\u4f1a\u6709\u7b2c \\(\\lceil\\sqrt{n}\\rceil\\) \u5757\u7684\uff0c\u56e0\u4e3a\u6b64\u65f6 \\(\\lfloor\\sqrt{n}\\rfloor=\\lceil\\sqrt{n}\\rceil=\\sqrt{n}\\) \u3002 \u7136\u540e\u9884\u5904\u7406\u51fa\u6bcf\u4e00\u4e2a\u4f4d\u7f6e \\(i\\) \u5728\u5206\u5757\u4e4b\u540e\u5c5e\u4e8e\u54ea\u4e00\u4e2a\u5757 \uff08 \\(\\text{belong}_i\\) \uff09\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5757\uff0c\u8bb0\u5f55\u5176\u5de6\u53f3\u8fb9\u754c\u4ee5\u53ca\u5757\u5185\u548c\uff0c\u5e76\u7ef4\u62a4\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u61d2\u6807\u8bb0\u7684 \\(\\text{add}\\) \uff0c\u8868\u793a\u8fd9\u4e2a\u5757\u91cc\u7684\u6240\u6709\u6570\u90fd\u88ab\u52a0\u8fc7\u591a\u5c11\u3002 \u6bcf\u6b21\u64cd\u4f5c\u533a\u95f4 \\([l,r]\\) \u7684\u65f6\u5019\u5206\u60c5\u51b5\u8ba8\u8bba\uff1a \u5982\u679c \\(\\text{belong}_l=\\text{belong}_r\\) \uff0c\u90a3\u4e48\u76f4\u63a5\u66b4\u529b\u4fee\u6539\u533a\u95f4 \\([l,r]\\) \u3002 \u53cd\u4e4b\uff0c\u628a\u8fd9\u4e2a\u533a\u95f4\u4e24\u8fb9\u975e\u6574\u5757\u7684\u90e8\u5206\u66b4\u529b\u4fee\u6539\uff0c\u7136\u540e\u4e3a\u6240\u6709\u6574\u5757\u7684\u90e8\u5206\u6253\u4e0a\u6807\u8bb0\u3002 \u67e5\u8be2\u7684\u65f6\u5019\u4e5f\u6bd4\u8f83\u7c7b\u4f3c\uff1a \u76f4\u63a5\u66b4\u529b\u626b\u4e00\u904d \\([l,r]\\) \uff0c\u6c42\u548c\u5373\u53ef\uff08\u4e0d\u8981\u5fd8\u8bb0\u628a\u6807\u8bb0\u52a0\u4e0a\uff09 \u975e\u6574\u5757\u90e8\u5206\u66b4\u529b\u626b\uff0c\u6574\u5757\u90e8\u5206\u7528\u5757\u5185\u548c\u52a0\u4e0a \\(\\text{add}\\) \u6807\u8bb0\u3002 \u56e0\u4e3a\u6700\u591a\u53ea\u6709 \\(\\lceil\\sqrt{n}\\rceil\\) \u5757\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u662f \\(\\text{O}((n+q)\\times \\sqrt{n})\\) \u3002","title":"\u539f\u7406"},{"location":"algor/ds/blocks/#_2","text":"","title":"\u4e60\u9898"},{"location":"algor/ds/blocks/#loj6277-1","text":"\u533a\u95f4\u52a0\u5355\u70b9\u67e5\uff0c\u53ea\u9700\u8981\u5206\u5757\u7684\u65f6\u5019\u8bb0\u5f55 \\(\\text{add}\\) \u914d\u4ee5\u66b4\u529b\u4fee\u6539\u3002 \u67e5\u8be2\u65f6\u5e26\u4e0a\u6807\u8bb0\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 #include <bits/stdc++.h> using namespace std ; constexpr int si = 5e4 + 10 ; int n , q , t ; int a [ si ], add [ si ]; int L [ si ], R [ si ], belong [ si ]; inline void change ( int l , int r , int v ) { int p = belong [ l ], q = belong [ r ]; if ( p == q ) { for ( register int i = l ; i <= r ; ++ i ) { a [ i ] += v ; } } else { for ( register int i = l ; i <= R [ p ]; ++ i ) { a [ i ] += v ; } for ( register int i = L [ q ]; i <= r ; ++ i ) { a [ i ] += v ; } for ( register int i = p + 1 ; i <= q - 1 ; ++ i ) { add [ i ] += v ; } } } inline int query ( int x ) { return a [ x ] + add [ belong [ x ]]; } int main () { scanf ( \"%d\" , & n ), t = sqrt ( n ); for ( register int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); } for ( register int i = 1 ; i <= t ; ++ i ) { L [ i ] = ( i - 1 ) * t + 1 , R [ i ] = i * t ; } if ( R [ t ] < n ) ++ t , L [ t ] = R [ t - 1 ] + 1 , R [ t ] = n ; for ( register int i = 1 ; i <= t ; ++ i ) { for ( register int j = L [ i ]; j <= R [ i ]; ++ j ) { belong [ j ] = i ; } } for ( register int i = 1 ; i <= n ; ++ i ) { int op , l , r , c ; scanf ( \"%d%d%d%d\" , & op , & l , & r , & c ); if ( op == 0 ) change ( l , r , c ); else printf ( \"%d \\n \" , query ( r )); } return 0 ; }","title":"LOJ6277. \u6570\u5217\u5206\u5757\u5165\u95e8 1"},{"location":"algor/ds/blocks/#luogu3372-1","text":"\u533a\u95f4\u52a0\u533a\u95f4\u548c\uff0c\u5206\u5757\u4e4b\u540e\u6309\u7167\u4e0a\u9762\u201c\u539f\u7406\u201d\u90e8\u5206\u7684\u505a\u6cd5\u6765\u5c31\u884c\u3002 \u53ea\u9700\u8981\u6ce8\u610f\u4e00\u4e0b\u4ec0\u4e48\u65f6\u5019\u8981\u66f4\u65b0\u5757\u5185\u548c\uff0c\u4ec0\u4e48\u65f6\u5019\u8981\u6253\u6807\u8bb0\u5c31\u884c\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int si = 2e5 + 10 ; int n , m , t ; int a [ si ], add [ si ], belong [ si ]; int L [ si ], R [ si ], sum [ si ]; inline void change ( int l , int r , int v ) { int p = belong [ l ], q = belong [ r ]; if ( p == q ) { for ( register int i = l ; i <= r ; ++ i ) { a [ i ] += v ; } sum [ p ] += v * ( r - l + 1 ); } else { for ( register int i = l ; i <= R [ p ]; ++ i ) { a [ i ] += v ; } sum [ p ] += v * ( R [ p ] - l + 1 ); for ( register int i = L [ q ]; i <= r ; ++ i ) { a [ i ] += v ; } sum [ q ] += v * ( r - L [ q ] + 1 ); for ( register int i = p + 1 ; i <= q - 1 ; ++ i ) { add [ i ] += v ; } } } inline int query ( int l , int r ) { int p = belong [ l ], q = belong [ r ]; int res = 0 ; if ( p == q ) { for ( register int i = l ; i <= r ; ++ i ) { res += a [ i ]; } res += add [ p ] * ( r - l + 1 ); } else { for ( register int i = l ; i <= R [ p ]; ++ i ) { res += a [ i ]; } res += add [ p ] * ( R [ p ] - l + 1 ); for ( register int i = L [ q ]; i <= r ; ++ i ) { res += a [ i ]; } res += add [ q ] * ( r - L [ q ] + 1 ); for ( register int i = p + 1 ; i <= q - 1 ; ++ i ) { res += sum [ i ], res += add [ i ] * ( R [ i ] - L [ i ] + 1 ); } } return res ; } signed main () { scanf ( \"%lld%lld\" , & n , & m ), t = sqrt ( n * 1.0 ); for ( register int i = 1 ; i <= n ; ++ i ) { scanf ( \"%lld\" , & a [ i ]); } for ( register int i = 1 ; i <= t ; ++ i ) { L [ i ] = ( i - 1 ) * sqrt ( n * 1.0 ) + 1 , R [ i ] = i * sqrt ( n * 1.0 ); } if ( R [ t ] < n ) ++ t , L [ t ] = R [ t - 1 ] + 1 , R [ t ] = n ; for ( register int i = 1 ; i <= t ; ++ i ) { for ( register int j = L [ i ]; j <= R [ i ]; ++ j ) { sum [ i ] += a [ j ], belong [ j ] = i ; } } while ( m -- ) { int op , l , r ; scanf ( \"%lld%lld%lld\" , & op , & l , & r ); if ( op == 1 ) { int k ; scanf ( \"%lld\" , & k ); change ( l , r , k ); } else printf ( \"%lld \\n \" , query ( l , r )); } return 0 ; }","title":"Luogu3372 \u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811 1"},{"location":"algor/ds/blocks/#loj6278-2","text":"\u533a\u95f4\u52a0\uff0c\u533a\u95f4\u67e5\u8be2\u6bd4 \\(c^2\\) \u5c0f\u7684\u6570\u7684\u4e2a\u6570\u3002 \u9996\u5148\u7ee7\u7eed\u5206\u5757\uff0c\u4ecd\u65e7\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u5757\u7684 \\(\\text{add}\\) \u6807\u8bb0\u3002 \u8003\u8651\u5982\u4f55\u67e5\u8be2\u533a\u95f4\u6709\u591a\u5c11\u4e2a\u6570\u6bd4 \\(c^2\\) \u5c0f\u3002 \u6cbf\u7528\u201c\u5c0f\u6bb5\u6734\u7d20\uff0c\u5927\u6bb5\u7ef4\u62a4\u201d\u7684\u601d\u60f3\uff0c\u6211\u4eec\u5728\u67e5\u8be2\u65f6\u5728\u4e24\u8fb9\u7684\u4e24\u4e2a\u4e0d\u5b8c\u6574\u5757\u8fdb\u884c\u66b4\u529b\u626b\u63cf\u3002 \u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u88ab\u5305\u542b\u7684\u6574\u5757\uff0c\u8003\u8651\u5728\u5757\u5185\u4e8c\u5206\u3002 \u4e3a\u4e86\u4e8c\u5206\uff0c\u6211\u4eec\u9700\u8981\u989d\u5916\u591a\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5757\u7ef4\u62a4\u4e00\u4e2a\u6709\u5e8f\u7684\u5e8f\u5217 \\(v\\) \u3002 \u5f53\u6211\u4eec\u66b4\u529b\u4fee\u6539\u5c0f\u6bb5\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u5c0f\u6bb5\u6240\u5c5e\u7684\u5757\u7684\u5355\u8c03\u6027\u5c31\u4f1a\u6539\u53d8\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5bf9\u8fd9\u4e2a\u5757\u7684 \\(v\\) \u8fdb\u884c\u91cd\u6392\u3002 \u5982\u679c\u662f\u5927\u6bb5\u6253\u6807\u8bb0\u7684\u8bdd\uff0c\u56e0\u4e3a\u5757\u5185\u6bcf\u4e00\u4e2a\u6570\u90fd\u88ab\u52a0\u4e86\u540c\u4e00\u4e2a\u6570\uff0c\u6240\u4ee5\u5355\u8c03\u6027\u4e0d\u4f1a\u6539\u53d8\uff0c\u4e0d\u9700\u8981\u91cd\u6392\u3002 \u90a3\u4e48\u5927\u6bb5\u67e5\u8be2\u7684\u65f6\u5019\u53ea\u9700\u8981\u628a \\(c^2\\) \u51cf\u53bb\u6bcf\u4e2a\u5757\u7684\u6807\u8bb0\u4e4b\u540e\u7136\u540e\u4e8c\u5206\u5c31\u53ef\u4ee5\u4e86\u3002 \u521d\u59cb\u5316\u7684\u65f6\u5019\u4e0d\u8981\u5fd8\u8bb0\u628a\u5143\u7d20\u6254\u8fdb \\(v\\) \u91cc\u9762\uff01 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 #include <bits/stdc++.h> using namespace std ; constexpr int si = 5e4 + 10 ; constexpr int bsi = ceil ( sqrt ( si )) + 10 ; int n , t ; int a [ si ], belong [ si ], add [ si ]; int L [ si ], R [ si ]; std :: vector < int > v [ bsi ]; inline void reset ( int pos ) { v [ pos ]. clear (); for ( register int i = L [ pos ]; i <= R [ pos ]; ++ i ) { v [ pos ]. push_back ( a [ i ]); } sort ( v [ pos ]. begin (), v [ pos ]. end ()); } inline void change ( int l , int r , int v ) { int p = belong [ l ], q = belong [ r ]; if ( p == q ) { for ( register int i = l ; i <= r ; ++ i ) { a [ i ] += v ; } reset ( p ); } else { for ( register int i = l ; i <= R [ p ]; ++ i ) { a [ i ] += v ; } reset ( p ); for ( register int i = L [ q ]; i <= r ; ++ i ) { a [ i ] += v ; } reset ( q ); for ( register int i = p + 1 ; i <= q - 1 ; ++ i ) { add [ i ] += v ; } } } inline int query ( int l , int r , int c ) { int p = belong [ l ], q = belong [ r ]; int res = 0 , limit = c * c ; if ( p == q ) { for ( register int i = l ; i <= r ; ++ i ) { if ( a [ i ] + add [ p ] < limit ) ++ res ; } } else { for ( register int i = l ; i <= R [ p ]; ++ i ) { if ( a [ i ] + add [ p ] < limit ) ++ res ; } for ( register int i = L [ q ]; i <= r ; ++ i ) { if ( a [ i ] + add [ q ] < limit ) ++ res ; } for ( register int i = p + 1 ; i <= q - 1 ; ++ i ) { int x = limit - add [ i ]; res += lower_bound ( v [ i ]. begin (), v [ i ]. end (), x ) - v [ i ]. begin (); } } return res ; } int main () { scanf ( \"%d\" , & n ), t = sqrt ( n ); for ( register int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); } for ( register int i = 1 ; i <= t ; ++ i ) { L [ i ] = ( i - 1 ) * sqrt ( n ) + 1 , R [ i ] = i * sqrt ( n ); } if ( R [ t ] < n ) ++ t , L [ t ] = R [ t - 1 ] + 1 , R [ t ] = n ; for ( register int i = 1 ; i <= t ; ++ i ) { for ( register int j = L [ i ]; j <= R [ i ]; ++ j ) { belong [ j ] = i , v [ i ]. push_back ( a [ j ]); reset ( i ); } } for ( register int i = 1 ; i <= n ; ++ i ) { int op , l , r , c ; scanf ( \"%d%d%d%d\" , & op , & l , & r , & c ); if ( op == 0 ) change ( l , r , c ); else printf ( \"%d \\n \" , query ( l , r , c )); } return 0 ; }","title":"LOJ6278. \u6570\u5217\u5206\u5757\u5165\u95e8 2"},{"location":"algor/ds/blocks/#loj6279-3","text":"\u533a\u95f4\u52a0\uff0c\u533a\u95f4\u8be2\u95ee\u524d\u9a71\u3002 \u6cbf\u7528\u4e0a\u4e00\u4e2a\u9898\u7684\u601d\u60f3\uff0c\u6211\u4eec\u5c0f\u6bb5\u66b4\u529b\uff0c\u5927\u6bb5\u4e8c\u5206\u3002 \u4f46\u662f\u5982\u679c\u76f4\u63a5\u5bf9\u5757\u5185\u4e8c\u5206\u7684\u8bdd\u53ef\u80fd\u4f1a\u56e0\u4e3a\u6ca1\u53bb\u91cd\u800c\u7206\u70b8\u3002 \u6240\u4ee5\u6211\u4eec\u8003\u8651\u628a\u4e0a\u9762\u90a3\u9898\u7684 std::vector \u6362\u6210 std::set \u3002 \u90a3\u4e48\u53ea\u9700\u8981\u5728\u6bcf\u4e2a\u5757\u7684 std::set \u91cc\u9762\u7528 lower_bound \u4e8c\u5206\u4e4b\u540e\u4ee4\u8fed\u4ee3\u5668\u51cf\u4e00\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002 \uff08\u56e0\u4e3a lower_bound \u6c42\u7684\u662f\u5927\u4e8e\u7b49\u4e8e \\(x\\) \u7684\u6700\u5c0f\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff0c\u8fed\u4ee3\u5668\u5728 std::set \u91cc\u9762\u51cf\u4e00\u4e4b\u540e\u5c31\u662f\u524d\u9a71\u4e86\uff09 \u5f53\u7136\uff0c\u4e8c\u5206\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u4f7f\u7528\u5bb9\u5668\u672c\u8eab\u7684 lower_bound \uff0c\u4e0d\u7136\u6548\u7387\u4f1a\u53ca\u5176\u4f4e\u4e0b\uff08\u5177\u4f53\u53ef\u4ee5\u770b \u8fd9\u91cc \uff09\u3002 \u53e6\u5916\u4e0d\u8981\u5fd8\u8bb0\u521d\u59cb\u5316\u7684\u65f6\u5019\u628a\u5143\u7d20\u6254\u8fdb std::set \u91cc\u9762\uff0c\u4e5f\u4e0d\u8981\u5fd8\u8bb0\u5224\u4e8c\u5206\u4e4b\u540e\u4e8c\u5206\u51fa s.begin() \u7684\u60c5\u51b5\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 #include <bits/stdc++.h> using namespace std ; constexpr int si = 1e5 + 10 ; constexpr int bsi = ceil ( sqrt ( si )) + 10 ; int n , t ; int a [ si ], add [ si ], belong [ si ]; int L [ si ], R [ si ]; std :: set < int > s [ bsi ]; inline void reset ( int pos ) { s [ pos ]. clear (); for ( register int i = L [ pos ]; i <= R [ pos ]; ++ i ) { s [ pos ]. insert ( a [ i ]); } } inline void change ( int l , int r , int c ) { int p = belong [ l ], q = belong [ r ]; if ( p == q ) { for ( register int i = l ; i <= r ; ++ i ) { a [ i ] += c ; } reset ( p ); } else { for ( register int i = l ; i <= R [ p ]; ++ i ) { a [ i ] += c ; } reset ( p ); for ( register int i = L [ q ]; i <= r ; ++ i ) { a [ i ] += c ; } reset ( q ); for ( register int i = p + 1 ; i <= q - 1 ; ++ i ) { add [ i ] += c ; } } } inline int query ( int l , int r , int c ) { int p = belong [ l ], q = belong [ r ]; int res = -1 ; if ( p == q ) { for ( register int i = l ; i <= r ; ++ i ) { if ( a [ i ] + add [ p ] < c ) res = max ( res , a [ i ] + add [ p ]); } } else { for ( register int i = l ; i <= R [ p ]; ++ i ) { if ( a [ i ] + add [ p ] < c ) res = max ( res , a [ i ] + add [ p ]); } for ( register int i = L [ q ]; i <= r ; ++ i ) { if ( a [ i ] + add [ q ] < c ) res = max ( res , a [ i ] + add [ q ]); } for ( register int i = p + 1 ; i <= q - 1 ; ++ i ) { int x = c - add [ i ]; std :: set < int >:: iterator it ; it = s [ i ]. lower_bound ( x ); if ( it == s [ i ]. begin ()) continue ; it -- , res = max ( res , * it + add [ i ]); } } return res ; } int main () { scanf ( \"%d\" , & n ), t = sqrt ( n ); for ( register int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); } for ( register int i = 1 ; i <= t ; ++ i ) { L [ i ] = ( i - 1 ) * sqrt ( n ) + 1 , R [ i ] = i * sqrt ( n ); } if ( R [ t ] < n ) ++ t , L [ t ] = R [ t - 1 ] + 1 , R [ t ] = n ; for ( register int i = 1 ; i <= t ; ++ i ) { for ( register int j = L [ i ]; j <= R [ i ]; ++ j ) { belong [ j ] = i , s [ i ]. insert ( a [ j ]); } } for ( register int i = 1 ; i <= n ; ++ i ) { int op , l , r , c ; scanf ( \"%d%d%d%d\" , & op , & l , & r , & c ); if ( op == 0 ) change ( l , r , c ); else printf ( \"%d \\n \" , query ( l , r , c )); } return 0 ; }","title":"LOJ6279. \u6570\u5217\u5206\u5757\u5165\u95e8 3"},{"location":"algor/ds/blocks/#loj6280-4","text":"\u533a\u95f4\u52a0\uff0c\u533a\u95f4\u6c42\u548c\u5e76\u53d6\u6a21\u3002 \u548c Luogu3372 \u57fa\u672c\u6ca1\u6709\u533a\u522b\uff0c\u53ea\u662f\u5728\u67e5\u8be2\u7684\u65f6\u5019\u591a\u4e86\u4e2a\u53d6\u6a21\u800c\u5df2\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int si = 2e5 + 10 ; int n , m , t ; int a [ si ], add [ si ], belong [ si ]; int L [ si ], R [ si ], sum [ si ]; inline void change ( int l , int r , int v ) { int p = belong [ l ], q = belong [ r ]; if ( p == q ) { for ( register int i = l ; i <= r ; ++ i ) { a [ i ] += v ; } sum [ p ] += v * ( r - l + 1 ); } else { for ( register int i = l ; i <= R [ p ]; ++ i ) { a [ i ] += v ; } sum [ p ] += v * ( R [ p ] - l + 1 ); for ( register int i = L [ q ]; i <= r ; ++ i ) { a [ i ] += v ; } sum [ q ] += v * ( r - L [ q ] + 1 ); for ( register int i = p + 1 ; i <= q - 1 ; ++ i ) { add [ i ] += v ; } } } inline int query ( int l , int r , int mod ) { int p = belong [ l ], q = belong [ r ]; int res = 0 ; if ( p == q ) { for ( register int i = l ; i <= r ; ++ i ) { res = ( res + a [ i ]) % mod ; } res = ( res + add [ p ] * ( r - l + 1 )) % mod ; } else { for ( register int i = l ; i <= R [ p ]; ++ i ) { res = ( res + a [ i ]) % mod ; } res = ( res + add [ p ] * ( R [ p ] - l + 1 )) % mod ; for ( register int i = L [ q ]; i <= r ; ++ i ) { res = ( res + a [ i ]) % mod ; } res = ( res + add [ q ] * ( r - L [ q ] + 1 )) % mod ; for ( register int i = p + 1 ; i <= q - 1 ; ++ i ) { res = ( res + sum [ i ]) % mod , res = ( res + add [ i ] * ( R [ i ] - L [ i ] + 1 )) % mod ; } } return res % mod ; } signed main () { scanf ( \"%lld\" , & n ), t = sqrt ( n ); for ( register int i = 1 ; i <= n ; ++ i ) { scanf ( \"%lld\" , & a [ i ]); } for ( register int i = 1 ; i <= t ; ++ i ) { L [ i ] = ( i - 1 ) * sqrt ( n ) + 1 , R [ i ] = i * sqrt ( n ); } if ( R [ t ] < n ) ++ t , L [ t ] = R [ t - 1 ] + 1 , R [ t ] = n ; for ( register int i = 1 ; i <= t ; ++ i ) { for ( register int j = L [ i ]; j <= R [ i ]; ++ j ) { sum [ i ] += a [ j ], belong [ j ] = i ; } } for ( register int i = 1 ; i <= n ; ++ i ) { int op , l , r , c ; scanf ( \"%lld%lld%lld%lld\" , & op , & l , & r , & c ); if ( op == 0 ) change ( l , r , c ); else printf ( \"%lld \\n \" , query ( l , r , c + 1 )); } return 0 ; }","title":"LOJ6280. \u6570\u5217\u5206\u5757\u5165\u95e8 4"},{"location":"algor/ds/blocks/#loj6281-5","text":"\u533a\u95f4\u5f00\u6839\u53f7\u5e76\u5411\u4e0b\u53d6\u6574\uff0c\u533a\u95f4\u6c42\u548c\u3002 \u6211\u4eec\u5148\u8003\u8651\u4e00\u4e2a\u597d\u5199\u4e00\u70b9\u7684\u505a\u6cd5\uff1a \u8fd8\u662f\u5206\u5757\uff0c\u5bf9\u4e8e\u4efb\u610f\u7684\u88ab\u5305\u542b\u5728\u4fee\u6539\u533a\u95f4\u7684\u5b8c\u6574\u5757\u76f4\u63a5\u5168\u90e8\u66b4\u529b\u5f00\u6839\u53f7\uff0c\u5c0f\u5757\u4e5f\u662f\u5168\u90e8\u66b4\u529b\u5f00\u6839\u53f7\u3002 \u5982\u679c\u5757\u5185\u7684\u6700\u5927\u503c \\(\\le 1\\) \uff0c\u90a3\u4e48\u8fd9\u4e2a\u5757\u5c31\u4e0d\u7528\u5f00\u6839\u53f7\u3002 \u6240\u4ee5\u6bcf\u6b21\u66b4\u529b\u4fee\u6539\u5b8c\u4e00\u4e2a\u5757\uff08\u6216\u5757\u7684\u90e8\u5206\uff09\u4e4b\u540e\u9700\u8981\u66f4\u65b0\u4e00\u4e0b\u533a\u95f4\u6700\u5927\u503c\u3002 \u53c8\u53d1\u73b0\u5bf9\u4e8e int \u8303\u56f4\u5185\u7684\u6b63\u6574\u6570\uff0c\u5f00 \\(5\\) \u6b21\u6839\u53f7\u5c31\u53ef\u4ee5 \\(=1\\) \u4e86\u3002 \u5219\u5bb9\u6613\u8bc1\u660e\uff0c\u6bcf\u4e2a\u5757\u6700\u591a\u4f1a\u88ab\u5f00\u6839\u53f7 \\(4\\) \u6b21\uff0c\u6240\u4ee5\u53ef\u8fc7\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #include <bits/stdc++.h> using namespace std ; constexpr int si = 5e4 + 10 ; int n , t ; int a [ si ], add [ si ], belong [ si ]; int L [ si ], R [ si ], sum [ si ], maxv [ si ]; inline void change ( int l , int r ) { int p = belong [ l ], q = belong [ r ]; if ( p == q ) { if ( maxv [ p ] == 0 || maxv [ p ] == 1 ) return ; for ( register int i = l ; i <= r ; ++ i ) { int rmp = a [ i ]; a [ i ] = sqrt ( a [ i ]), sum [ p ] -= ( rmp - a [ i ]); } int mx = 0 ; for ( register int i = L [ p ]; i <= R [ p ]; ++ i ) { mx = max ( mx , a [ i ]); } maxv [ p ] = mx ; } else { if ( maxv [ p ] != 0 && maxv [ p ] != 1 ) { for ( register int i = l ; i <= R [ p ]; ++ i ) { int rmp = a [ i ]; a [ i ] = sqrt ( a [ i ]), sum [ p ] -= ( rmp - a [ i ]); } int mx = 0 ; for ( register int i = L [ p ]; i <= R [ p ]; ++ i ) { mx = max ( mx , a [ i ]); } maxv [ p ] = mx ; } if ( maxv [ q ] != 0 && maxv [ q ] != 1 ) { for ( register int i = L [ q ]; i <= r ; ++ i ) { int rmp = a [ i ]; a [ i ] = sqrt ( a [ i ]), sum [ q ] -= ( rmp - a [ i ]); } int mx = 0 ; for ( register int i = L [ q ]; i <= R [ q ]; ++ i ) { mx = max ( mx , a [ i ]); } maxv [ q ] = mx ; } for ( register int i = p + 1 ; i <= q - 1 ; ++ i ) { if ( maxv [ i ] == 0 || maxv [ i ] == 1 ) continue ; int mx = 0 ; for ( register int j = L [ i ]; j <= R [ i ]; ++ j ) { int rmp = a [ j ]; a [ j ] = sqrt ( a [ j ]), sum [ i ] -= ( rmp - a [ j ]); mx = max ( mx , a [ j ]); } maxv [ i ] = mx ; } } } inline int query ( int l , int r ) { int p = belong [ l ], q = belong [ r ]; int res = 0 ; if ( p == q ) { for ( register int i = l ; i <= r ; ++ i ) { res += a [ i ]; } } else { for ( register int i = l ; i <= R [ p ]; ++ i ) { res += a [ i ]; } for ( register int i = L [ q ]; i <= r ; ++ i ) { res += a [ i ]; } for ( register int i = p + 1 ; i <= q - 1 ; ++ i ) { res += sum [ i ]; } } return res ; } int main () { scanf ( \"%d\" , & n ), t = sqrt ( n ); for ( register int i = 1 ; i <= n ; ++ i ) { scanf ( \"%d\" , & a [ i ]); } for ( register int i = 1 ; i <= t ; ++ i ) { L [ i ] = ( i - 1 ) * sqrt ( n ) + 1 , R [ i ] = i * sqrt ( n ); } if ( R [ t ] < n ) ++ t , L [ t ] = R [ t - 1 ] + 1 , R [ t ] = n ; for ( register int i = 1 ; i <= t ; ++ i ) { for ( register int j = L [ i ]; j <= R [ i ]; ++ j ) { belong [ j ] = i , sum [ i ] += a [ j ], maxv [ i ] = max ( maxv [ i ], a [ j ]); } } for ( register int i = 1 ; i <= n ; ++ i ) { int op , l , r , c ; scanf ( \"%d%d%d%d\" , & op , & l , & r , & c ); if ( op == 0 ) change ( l , r ); else printf ( \"%d \\n \" , query ( l , r )); } return 0 ; } // it is better to use tag & rem the time of sqrt. \u8fd9\u91cc\u6709\u53e6\u4e00\u79cd \u5199\u6cd5 \uff1a \u8003\u8651\u628a\u6574\u5757\u7684\u5f00\u6839\u53f7\u6b21\u6570\u8bb0\u5f55\u4e00\u4e0b\u3002 \u644a\u5e73 \\(\\text{add}\\) \u7684\u65f6\u5019\u53ea\u9700\u8981\u66b4\u529b\u5904\u7406\u5f00 \\(1,2,3,4\\) \u6b21\u6839\u53f7\u7684\u60c5\u51b5\uff0c\u518d\u52a0\u4e0a\u4e0a\u9762\u7684\u505a\u6cd5\u4e2d\u7684\u4f18\u5316\u5373\u53ef\u3002 \u4e0d\u8fc7\u5904\u7406\u5f00\u8d85\u8fc7 \\(5\\) \u6b21\u6839\u53f7\u7684\u60c5\u51b5\u9700\u8981\u6ce8\u610f\u533a\u5206 \\(0\\) \u548c \\(1\\) \u3002","title":"LOJ6281. \u6570\u5217\u5206\u5757\u5165\u95e8 5"},{"location":"algor/ds/dsu/","text":"\u6982\u8ff0 \u03c8(\uff40\u2207\u00b4)\u03c8 dsu \u5927\u6982\u5c31\u662f\u62ff\u6765\u7ef4\u62a4\u4e00\u7cfb\u5217\u5143\u7d20\u6240\u5c5e\u96c6\u5408\u7684\u6570\u636e\u7ed3\u6784\u3002 \u652f\u6301\u5408\u5e76\u96c6\u5408\uff0c\u67e5\u8be2\u6240\u5c5e\u96c6\u5408\u7684\u64cd\u4f5c\u3002 \u53d8\u79cd\u5c31\u6269\u5c55\u57df\u548c\u5e26\u6743\u4e24\u79cd\uff0c\u8fd8\u6709\u4e24\u79cd\u6bd4\u8f83\u5e38\u89c1\u7684\u5c0f trick\u3002 \u4e0b\u9762\u5c31\u7b80\u5355\u63d0\u4e24\u53e5\u3002 \u57fa\u672c\u64cd\u4f5c \u03c8(\uff40\u2207\u00b4)\u03c8 \u9996\u5148\u8bbe \\(pa(i)\\) \u8868\u793a\u5143\u7d20 \\(i\\) \u6240\u5c5e\u96c6\u5408\u7684\u4ee3\u8868\u5143\u7d20\u3002\u521d\u59cb \\(pa(i) = i\\) \u3002 \u67e5\u8be2\u6240\u5c5e\u96c6\u5408 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e2a\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u76f4\u63a5\u4ece\u5f53\u524d\u8282\u70b9\u4e00\u76f4\u5411\u4e0a\u8df3\uff0c\u7136\u540e\u76f4\u5230\u627e\u5230\u4e00\u4e2a \\(pa(i) = i\\) \u7684\u8282\u70b9\u5373\u53ef\u3002 1 2 3 4 int root ( int x ) { if ( pa [ x ] != x ) return root ( pa [ x ]); return pa [ x ]; } \u6709\u4e00\u4e2a\u7b80\u5355\u7684\u4f18\u5316\u662f\uff0c\u6bcf\u6b21\u67e5\u8be2\u5b8c\u4e00\u4e2a\u5143\u7d20\u4e4b\u540e\uff0c\u628a\u5b83\u7684 \\(pa(i)\\) \u76f4\u63a5\u6307\u5411\u5b9e\u9645\u7684\u96c6\u5408\u6839\u3002 \u8fd9\u4e1c\u897f\u53eb\u8def\u5f84\u538b\u7f29\u3002 1 2 3 4 int root ( int x ) { if ( pa [ x ] != x ) pa [ x ] = root ( pa [ x ]); return pa [ x ]; } \u5408\u5e76\u4e24\u4e2a\u96c6\u5408 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5c31\u76f4\u63a5\u628a\u4e00\u4e2a\u96c6\u5408\u7684\u6839\u7684 \\(pa\\) \u8bbe\u7f6e\u6210\u53e6\u5916\u4e00\u4e2a\u96c6\u5408\u7684\u6839\u5373\u53ef\u3002 1 2 3 4 5 void Merge ( int x , int y ) { int rx = root ( x ), ry = root ( y ); if ( rx == ry ) return ; pa [ ry ] = rx ; return ; } \u4f46\u662f\u6ce8\u610f\u5230\u6211\u4eec\u5e0c\u671b\u5408\u5e76\u4e4b\u540e\u7684\u8df3 \\(pa\\) \u8def\u5f84\u957f\u5ea6\u66f4\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u542f\u53d1\u5f0f\u5408\u5e76\u3002 \u5177\u4f53\u6765\u8bf4\u7ef4\u62a4\u96c6\u5408\u7684 \\(siz\\) \u6216\u8005 \\(dep\\) \uff0c\u7136\u540e\u542f\u53d1\u5f0f\u5408\u5e76\u4e00\u4e0b\u5373\u53ef\u3002 1 2 3 4 5 6 7 void Merge ( int x , int y ) { int rx = root ( x ), ry = rooot ( y ); if ( rx == ry ) return ; if ( siz [ rx ] < siz [ ry ]) pa [ rx ] = ry , siz [ rx ] += siz [ ry ]; else pa [ ry ] = rx , siz [ ry ] += siz [ rx ]; } \u5982\u679c\u5355\u72ec\u4f7f\u7528\u8def\u5f84\u538b\u7f29\u6216\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u590d\u6742\u5ea6\u90fd\u662f 1log\u3002 \u5982\u679c\u540c\u65f6\u4f7f\u7528\uff0c\u590d\u6742\u5ea6\u662f \\(O(\\alpha(n))\\) \uff0c\u8fd1\u4e4e \\(O(1)\\) \u3002 \u53d8\u79cd \u03c8(\uff40\u2207\u00b4)\u03c8 \u5e26\u6743\u5e76\u67e5\u96c6 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e2a\u5c31\u662f\u7ef4\u62a4\u4e86\u4e00\u4e0b\u8282\u70b9\u5230\u7236\u8282\u70b9\u7684\u4e00\u4e2a\u8ddd\u79bb\u4e00\u6837\u7684\u4e1c\u897f\u3002 \u6ca1\u5565\u597d\u8bf4\u7684\u3002 \u6269\u5c55\u57df\u5e76\u67e5\u96c6 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5176\u672c\u8d28\u662f\u6709\u591a\u4e2a\u4f20\u9012\u6027\u4fe1\u606f\u7684\u65f6\u5019\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u62c6\u591a\u4e2a\u70b9\u51fa\u6765\u7ef4\u62a4\u3002 \u7136\u540e\u5728\u7ef4\u62a4\u7684\u65f6\u5019\u5224\u65ad\u77db\u76fe\u548c\u4ece\u5c5e\u5173\u7cfb\u3002 \u5e94\u7528 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ef4\u62a4\u4f20\u9012\u6027\u4fe1\u606f \u03c8(\uff40\u2207\u00b4)\u03c8 \u6bd4\u5982\u7ed9\u4f60\u4e00\u5806\u4e0d\u7b49\u5f0f\u5f62\u5982 \\(x_1 = x_2\\) \u6216 \\(x_1 \\not= x_2\\) \u8fd9\u79cd\u3002 \u95ee\u4f60\u662f\u5426\u53ef\u80fd\u6ee1\u8db3\u8981\u6c42\u3002\u53d1\u73b0\u7b49\u53f7\u662f\u6709\u4f20\u9012\u6027\u7684\uff0c\u76f4\u63a5\u628a\u6240\u6709\u7b49\u4e8e\u7684\u6254\u4e00\u4e2a\u96c6\u5408\u91cc\u9762\uff0c\u626b\u4e00\u904d\u4e0d\u7b49\u7684\u770b\u662f\u5426\u6ee1\u8db3\u5373\u53ef\u3002 \u8fd9\u79cd\u95ee\u9898\u4e5f\u53ef\u4ee5\u7528 2-SAT \u6765\u505a\uff0c\u4f46\u662f 2-SAT \u9002\u7528\u6027\u66f4\u5e7f\u6cdb\u4e00\u70b9\u3002 \u5947\u602a\u7684\u8fde\u8fb9\u6280\u5de7 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u662f\u4e4b\u524d\u505a GSS4 \u7684\u65f6\u5019 gjh \u6559\u6211\u7684\u3002 \u76f4\u63a5\u770b\u8fd9\u91cc\u5427\uff1a link","title":"\u5e76\u67e5\u96c6"},{"location":"algor/ds/dsu/#_1","text":"dsu \u5927\u6982\u5c31\u662f\u62ff\u6765\u7ef4\u62a4\u4e00\u7cfb\u5217\u5143\u7d20\u6240\u5c5e\u96c6\u5408\u7684\u6570\u636e\u7ed3\u6784\u3002 \u652f\u6301\u5408\u5e76\u96c6\u5408\uff0c\u67e5\u8be2\u6240\u5c5e\u96c6\u5408\u7684\u64cd\u4f5c\u3002 \u53d8\u79cd\u5c31\u6269\u5c55\u57df\u548c\u5e26\u6743\u4e24\u79cd\uff0c\u8fd8\u6709\u4e24\u79cd\u6bd4\u8f83\u5e38\u89c1\u7684\u5c0f trick\u3002 \u4e0b\u9762\u5c31\u7b80\u5355\u63d0\u4e24\u53e5\u3002","title":"\u6982\u8ff0"},{"location":"algor/ds/dsu/#_2","text":"\u9996\u5148\u8bbe \\(pa(i)\\) \u8868\u793a\u5143\u7d20 \\(i\\) \u6240\u5c5e\u96c6\u5408\u7684\u4ee3\u8868\u5143\u7d20\u3002\u521d\u59cb \\(pa(i) = i\\) \u3002","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"algor/ds/dsu/#_3","text":"\u8fd9\u4e2a\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u76f4\u63a5\u4ece\u5f53\u524d\u8282\u70b9\u4e00\u76f4\u5411\u4e0a\u8df3\uff0c\u7136\u540e\u76f4\u5230\u627e\u5230\u4e00\u4e2a \\(pa(i) = i\\) \u7684\u8282\u70b9\u5373\u53ef\u3002 1 2 3 4 int root ( int x ) { if ( pa [ x ] != x ) return root ( pa [ x ]); return pa [ x ]; } \u6709\u4e00\u4e2a\u7b80\u5355\u7684\u4f18\u5316\u662f\uff0c\u6bcf\u6b21\u67e5\u8be2\u5b8c\u4e00\u4e2a\u5143\u7d20\u4e4b\u540e\uff0c\u628a\u5b83\u7684 \\(pa(i)\\) \u76f4\u63a5\u6307\u5411\u5b9e\u9645\u7684\u96c6\u5408\u6839\u3002 \u8fd9\u4e1c\u897f\u53eb\u8def\u5f84\u538b\u7f29\u3002 1 2 3 4 int root ( int x ) { if ( pa [ x ] != x ) pa [ x ] = root ( pa [ x ]); return pa [ x ]; }","title":"\u67e5\u8be2\u6240\u5c5e\u96c6\u5408"},{"location":"algor/ds/dsu/#_4","text":"\u5c31\u76f4\u63a5\u628a\u4e00\u4e2a\u96c6\u5408\u7684\u6839\u7684 \\(pa\\) \u8bbe\u7f6e\u6210\u53e6\u5916\u4e00\u4e2a\u96c6\u5408\u7684\u6839\u5373\u53ef\u3002 1 2 3 4 5 void Merge ( int x , int y ) { int rx = root ( x ), ry = root ( y ); if ( rx == ry ) return ; pa [ ry ] = rx ; return ; } \u4f46\u662f\u6ce8\u610f\u5230\u6211\u4eec\u5e0c\u671b\u5408\u5e76\u4e4b\u540e\u7684\u8df3 \\(pa\\) \u8def\u5f84\u957f\u5ea6\u66f4\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u542f\u53d1\u5f0f\u5408\u5e76\u3002 \u5177\u4f53\u6765\u8bf4\u7ef4\u62a4\u96c6\u5408\u7684 \\(siz\\) \u6216\u8005 \\(dep\\) \uff0c\u7136\u540e\u542f\u53d1\u5f0f\u5408\u5e76\u4e00\u4e0b\u5373\u53ef\u3002 1 2 3 4 5 6 7 void Merge ( int x , int y ) { int rx = root ( x ), ry = rooot ( y ); if ( rx == ry ) return ; if ( siz [ rx ] < siz [ ry ]) pa [ rx ] = ry , siz [ rx ] += siz [ ry ]; else pa [ ry ] = rx , siz [ ry ] += siz [ rx ]; } \u5982\u679c\u5355\u72ec\u4f7f\u7528\u8def\u5f84\u538b\u7f29\u6216\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u590d\u6742\u5ea6\u90fd\u662f 1log\u3002 \u5982\u679c\u540c\u65f6\u4f7f\u7528\uff0c\u590d\u6742\u5ea6\u662f \\(O(\\alpha(n))\\) \uff0c\u8fd1\u4e4e \\(O(1)\\) \u3002","title":"\u5408\u5e76\u4e24\u4e2a\u96c6\u5408"},{"location":"algor/ds/dsu/#_5","text":"","title":"\u53d8\u79cd"},{"location":"algor/ds/dsu/#_6","text":"\u8fd9\u4e2a\u5c31\u662f\u7ef4\u62a4\u4e86\u4e00\u4e0b\u8282\u70b9\u5230\u7236\u8282\u70b9\u7684\u4e00\u4e2a\u8ddd\u79bb\u4e00\u6837\u7684\u4e1c\u897f\u3002 \u6ca1\u5565\u597d\u8bf4\u7684\u3002","title":"\u5e26\u6743\u5e76\u67e5\u96c6"},{"location":"algor/ds/dsu/#_7","text":"\u5176\u672c\u8d28\u662f\u6709\u591a\u4e2a\u4f20\u9012\u6027\u4fe1\u606f\u7684\u65f6\u5019\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u62c6\u591a\u4e2a\u70b9\u51fa\u6765\u7ef4\u62a4\u3002 \u7136\u540e\u5728\u7ef4\u62a4\u7684\u65f6\u5019\u5224\u65ad\u77db\u76fe\u548c\u4ece\u5c5e\u5173\u7cfb\u3002","title":"\u6269\u5c55\u57df\u5e76\u67e5\u96c6"},{"location":"algor/ds/dsu/#_8","text":"","title":"\u5e94\u7528"},{"location":"algor/ds/dsu/#_9","text":"\u6bd4\u5982\u7ed9\u4f60\u4e00\u5806\u4e0d\u7b49\u5f0f\u5f62\u5982 \\(x_1 = x_2\\) \u6216 \\(x_1 \\not= x_2\\) \u8fd9\u79cd\u3002 \u95ee\u4f60\u662f\u5426\u53ef\u80fd\u6ee1\u8db3\u8981\u6c42\u3002\u53d1\u73b0\u7b49\u53f7\u662f\u6709\u4f20\u9012\u6027\u7684\uff0c\u76f4\u63a5\u628a\u6240\u6709\u7b49\u4e8e\u7684\u6254\u4e00\u4e2a\u96c6\u5408\u91cc\u9762\uff0c\u626b\u4e00\u904d\u4e0d\u7b49\u7684\u770b\u662f\u5426\u6ee1\u8db3\u5373\u53ef\u3002 \u8fd9\u79cd\u95ee\u9898\u4e5f\u53ef\u4ee5\u7528 2-SAT \u6765\u505a\uff0c\u4f46\u662f 2-SAT \u9002\u7528\u6027\u66f4\u5e7f\u6cdb\u4e00\u70b9\u3002","title":"\u7ef4\u62a4\u4f20\u9012\u6027\u4fe1\u606f"},{"location":"algor/ds/dsu/#_10","text":"\u8fd9\u662f\u4e4b\u524d\u505a GSS4 \u7684\u65f6\u5019 gjh \u6559\u6211\u7684\u3002 \u76f4\u63a5\u770b\u8fd9\u91cc\u5427\uff1a link","title":"\u5947\u602a\u7684\u8fde\u8fb9\u6280\u5de7"},{"location":"algor/ds/fenwick/","text":"\u6982\u8ff0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6570\u8bba\u91cc\u9762\u6709\u4e00\u4e2a\u5f88\u7ecf\u5178\u7684\u7ed3\u8bba\uff0c\u4efb\u610f\u6b63\u6574\u6570\u90fd\u80fd\u88ab\u552f\u4e00\u62c6\u5206\u6210\u82e5\u5e72\u4e2a\u4e0d\u540c\u7684 \\(2\\) \u7684\u6b21\u5e42\u7684\u548c \u8f6c\u5316\u4e00\u4e0b\uff0c\u5bf9\u4e8e\u524d\u7f00 \\([1,x]\\) \uff0c\u5047\u8bbe \\(x\\) \u53ef\u4ee5\u88ab\u62c6\u5206\u6210 \\(2^{c_1} + 2^{c_2} + 2^{c_3} + \\dots 2^{c_m}\\) \uff0c\u90a3\u4e48 \\([1,x]\\) \u5c31\u53ef\u4ee5\u88ab\u62c6\u5206\u6210 \\(m\\) \u4e2a\u5c0f\u533a\u95f4\uff1a \\([1, 2^{c_1}], [2^{c_1} + 1, 2^{c_1} + 2^{c_2}], \\dots [2^{c_m - 1} + 1, 2^{c_m}]\\) \u3002 \u5176\u4e2d \\(m = O(\\log x), c_i \\in [0, m], c_1 > c_2 > c_3 \\dots > c_m\\) \u3002 \u5982\u679c \\(x\\) \u7684\u62c6\u5206\u5305\u542b \\(2^{c_i}\\) \uff0c\u90a3\u4e48 \\(x\\) \u4e8c\u8fdb\u5236\u8868\u793a\u4e0b\u7684\u7b2c \\(c_i\\) \u4f4d\u5c31\u662f \\(1\\) \uff08\u6700\u4f4e\u4f4d\u4e3a\u7b2c \\(0\\) \u4f4d\uff09\u3002 \u6709\u4e00\u4e2a\u7ecf\u5178\u7684\u8fd0\u7b97\u53eb \\(\\text{lowbit}\\) \uff0c\u53ef\u4ee5\u53d6\u51fa \\(x\\) \u4e8c\u8fdb\u5236\u8868\u793a\u4e0b\u7684\u6700\u4f4e\u7684 \\(1\\) \u548c\u6bd4\u5b83\u66f4\u4f4e\u7684\u6240\u6709 \\(0\\) \u7ec4\u6210\u7684\u6570\u3002 \u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u7528 \\(\\text{lowbit}\\) \u6765\u904d\u5386\u524d\u7f00 \\([1,x]\\) \u5206\u6210\u7684\u8fd9\u4e9b\u533a\u95f4\uff1a 1 2 3 4 5 6 int lowbit ( int x ) { return x & - x ;} while ( x ) { cout << x - lowbit ( x ) + 1 << \" \" << x << endl ; x -= lowbit ( x ); } \u6811\u72b6\u6570\u7ec4\u5dee\u4e0d\u591a\u5c31\u662f\u5229\u7528\u8fd9\u4e2a\u601d\u60f3\uff0c\u5b9a\u4e49 \\(t(x)\\) \u4e3a \\(\\sum\\limits_{i = x - \\text{lowbit}(x) + 1}^x a(i)\\) \uff0c\u7136\u540e\u901a\u8fc7\u4e00\u4e9b\u6027\u8d28 \\(O(\\log n)\\) \u5730\u5feb\u901f\u7ef4\u62a4\u5e8f\u5217\u524d\u7f00\u548c\uff0c\u5e76\u4e14\u652f\u6301\u5355\u70b9\u4fee\u6539\u3002 \u7ed3\u6784\u5982\u56fe\uff1a \u5b9e\u9645\u4e0a\u6811\u72b6\u6570\u7ec4\u662f\u4e00\u4e2a\u68ee\u6797\uff0c\u56e0\u4e3a\u5f53 \\(n\\) \u4e0d\u662f \\(2\\) \u7684\u6574\u6570\u6b21\u5e42\u65f6\uff0c\u6811\u6839\u662f\u4e0d\u552f\u4e00\u7684\u3002 \u6811\u72b6\u6570\u7ec4\u5177\u6709\u7684\u6027\u8d28\uff08\u77e5\u9053 \\(1 \\sim 4\\) \u6761\u5c31\u884c\uff09\uff1a \\(t(x),x \\not\\in \\text{root}\\) \u7684\u7236\u8282\u70b9\u662f \\(t(x + \\text{lowbit}(x))\\) \\(t(x)\\) \u7684\u5b50\u8282\u70b9\u4e2a\u6570\u662f \\(\\text{lowbit}(x)\\) \u7684\u4f4d\u6570\uff08\u6700\u4f4e\u7684\u4e00\u4f4d \\(1\\) \u662f\u7b2c\u51e0\u4f4d\uff0c\u7b2c \\(0\\) \u4f4d\u662f\u6700\u4f4e\u4f4d\uff09\u3002 \\(t(x)\\) \u4fdd\u5b58\u7684\u662f\u5b50\u6811\u53f6\u8282\u70b9\uff08\u7b2c 0 \u5c42\uff09\u548c\u3002 \u6df1\u5ea6\u4e3a \\(O(\\log n)\\) \u3002 \u7b2c \\(i\\) \u5c42\u7684\u8282\u70b9\u95f4\u8ddd\u4e3a \\(2^{i - 1}\\) \u3002 \u8282\u70b9\u7f16\u53f7\u7684 \\(\\text{lowbit}\\) \u4e3a \\(2^{i-1}\\) \uff08\u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u6240\u6709 \\(t(x)\\) \u6309 \\(\\text{lowbit}\\) \u5206\u7c7b\uff09 \u7b2c \\(i\\) \u5c42\u7684\u8282\u70b9\u4e2a\u6570\u4e3a \\(\\lfloor\\dfrac{n + 1}{2^i}\\rfloor\\) \u7b2c \\(i\\) \u5c42\u7684\u8282\u70b9\u672c\u8d28\u4e0a\u662f\u5728\u786e\u5b9a \\(\\text{lowbit}\\) \u4e4b\u540e\uff0c\u4e0d\u65ad\u5728 \\(\\text{lowbit}\\) \u540e\u9762\u7684\u4f4d\u653e \\(1\\) \uff08\u524d\u9762\u4e0d\u80fd\u653e\uff0c\u4e0d\u7136 \\(\\text{lowbit}\\) \u5c31\u53d8\u4e86\uff09\u3002 \u64cd\u4f5c \u03c8(\uff40\u2207\u00b4)\u03c8 \u5355\u70b9\u4fee\u6539 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6bd4\u8f83\u7b80\u5355\uff0c\u4fee\u6539\u4f4d\u7f6e \\(a(i)\\) \uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u5148\u4fee\u6539 \\(t(i)\\) \uff0c\u7136\u540e\u5411\u4e0a\u4e0d\u65ad\u66f4\u65b0\u7236\u8282\u70b9\u6743\u503c\u5c31\u884c\u4e86\u3002 1 2 3 4 5 6 void add ( int x , int v ) { while ( x <= n ) { t [ x ] += v ; x += lowbit ( x ); } } \u590d\u6742\u5ea6\u662f \\(O(\\log n)\\) \u3002 \u5efa\u6811 \u03c8(\uff40\u2207\u00b4)\u03c8 \u76f4\u63a5\u5bf9\u4e8e\u6bcf\u4e2a \\(a(i)\\) \uff0c \\(\\text{add}(i, a(i))\\) \u5373\u53ef\u3002 \u4e0d\u8fc7\u8fd9\u6837\u590d\u6742\u5ea6\u662f \\(O(n\\log n)\\) \u7684\uff0c\u8fd8\u6709\u4e24\u79cd \\(O(n)\\) \u5efa\u6811\u7684\u65b9\u6cd5\uff1a \u6cd5\u4e00\uff1a\u76f4\u63a5\u5904\u7406\u524d\u7f00\u548c\uff0c\u7136\u540e\u8d4b\u503c\u7ed9 \\(t\\) \uff08\u8981\u6d88\u8017\u7a7a\u95f4\u6362\u65f6\u95f4\uff09\u3002 \u6cd5\u4e8c\uff1a\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u503c\u662f\u7531\u6240\u6709\u4e0e\u81ea\u5df1\u76f4\u63a5\u76f8\u8fde\u7684\u513f\u5b50\u7684\u503c\u6c42\u548c\u5f97\u5230\u7684\u3002\u56e0\u6b64\u53ef\u4ee5\u5012\u7740\u8003\u8651\u8d21\u732e\uff0c\u5373\u6bcf\u6b21\u786e\u5b9a\u5b8c\u513f\u5b50\u7684\u503c\u540e\uff0c\u7528\u81ea\u5df1\u7684\u503c\u66f4\u65b0\u81ea\u5df1\u7684\u7236\u4eb2\uff0c\u8fd9\u6837\u53ef\u4ee5\u51cf\u5c11\u8fd0\u7b97\u6b21\u6570\u3002 1 2 3 4 5 for ( int i = 1 ; i <= n ; ++ i ) { t [ i ] += a [ i ]; int j = i + lowbit ( i ); if ( j <= n ) t [ j ] += t [ i ]; } \u67e5\u8be2\u524d\u7f00\u548c \u03c8(\uff40\u2207\u00b4)\u03c8 \u76f4\u63a5\u5229\u7528 \\(\\text{lowbit}\\) \u626b\u4e00\u904d \\([1,x]\\) \u5206\u6210\u7684 \\(O(\\log x)\\) \u4e2a\u5c0f\u533a\u95f4\u5c31\u884c\uff0c \u56e0\u4e3a\u5b9a\u4e49\u4e86 \\(t(x) = \\sum\\limits_{i = x - \\text{lowbit}(x) + 1}^x a(i)\\) \uff0c\u6240\u4ee5\u76f4\u63a5\u7d2f\u52a0\u5c31\u884c\u4e86\u3002 1 2 3 4 5 6 7 8 int query ( int x ) { int ret = 0 ; while ( x ) { ret += t [ x ]; x -= lowbit ( x ); } return ret ; } \u590d\u6742\u5ea6 \\(O(\\log n)\\) \u3002 \u533a\u95f4\u67e5\u8be2\u51cf\u4e00\u4e0b\u5c31\u884c\u3002 \u65f6\u95f4\u6233\u4f18\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5bf9\u4ed8\u591a\u7ec4\u6570\u636e\u5f88\u5e38\u89c1\u7684\u6280\u5de7\u3002 \u5982\u679c\u6bcf\u6b21\u8f93\u5165\u65b0\u6570\u636e\u65f6\uff0c\u90fd\u66b4\u529b\u6e05\u7a7a\u6811\u72b6\u6570\u7ec4\uff0c\u5c31\u53ef\u80fd\u4f1a\u9020\u6210\u8d85\u65f6\u3002 \u56e0\u6b64\u4f7f\u7528 \\(tag\\) \u6807\u8bb0\uff0c\u5b58\u50a8\u5f53\u524d\u8282\u70b9\u4e0a\u6b21\u4f7f\u7528\u65f6\u95f4\uff08\u5373\u6700\u8fd1\u4e00\u6b21\u662f\u88ab\u7b2c\u51e0\u7ec4\u6570\u636e\u4f7f\u7528\uff09\u3002\u6bcf\u6b21\u64cd\u4f5c\u65f6\u5224\u65ad\u8fd9\u4e2a\u4f4d\u7f6e \\(tag\\) \u4e2d\u7684\u65f6\u95f4\u548c\u5f53\u524d\u65f6\u95f4\u662f\u5426\u76f8\u540c\uff0c\u5c31\u53ef\u4ee5\u5224\u65ad\u8fd9\u4e2a\u4f4d\u7f6e\u5e94\u8be5\u662f \\(0\\) \u8fd8\u662f\u5f53\u524d\u6570\u636e\u7684 \\(a\\) \u6570\u7ec4\u5185\u7684\u503c\u3002 \u5982\u679c\u4fee\u6539\u7684\u65f6\u5019\u9047\u5230\u4e86\u4e4b\u524d\u7528\u7684\u8282\u70b9\uff0c\u5c31\u76f4\u63a5\u5148\u7f6e\u96f6\u518d\u4fee\u6539\u6253 \\(tag\\) \u3002 \u5982\u679c\u8be2\u95ee\u7684\u65f6\u5019\u9047\u5230\u4e86\u4e4b\u524d\u7684\u8282\u70b9\uff0c\u8bc1\u660e\u8fd9\u4e2a\u4f4d\u7f6e\u5728\u8fd9\u7ec4\u6570\u636e\u90fd\u6ca1\u88ab\u52a8\u8fc7\uff0c\u76f4\u63a5\u4e0d\u52a0\u5c31\u884c\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 void reset () { ++ dfn ; } void add ( int k , int v ) { while ( k <= n ) { if ( tag [ k ] != dfn ) t [ k ] = 0 ; t [ k ] += v , tag [ k ] = dfn ; k += lowbit ( k ); } } int query ( int k ) { int ret = 0 ; while ( k ) { if ( tag [ k ] == dfn ) ret += t [ k ]; k -= lowbit ( k ); } return ret ; } \u6269\u5c55 \u03c8(\uff40\u2207\u00b4)\u03c8 \u533a\u95f4\u4fee\u6539\u5355\u70b9\u67e5\u8be2 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5dee\u5206\u6570\u7ec4 \\(c\\) \u5373\u53ef\u3002 \u5355\u70b9\u67e5\u76f4\u63a5\u7528\u6811\u72b6\u6570\u7ec4\u6c42\u524d\u7f00\u548c\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 1e6 + 10 ; int n , q ; int a [ si ], c [ si ]; i64 t [ si ]; inline int lowbit ( int x ) { return x & - x ; } void add ( int p , int x ) { while ( p <= n ) { t [ p ] += x ; p += lowbit ( p ); } } i64 query ( int p ) { i64 ret = 0 ; while ( p ) { ret += t [ p ]; p -= lowbit ( p ); } return ret ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> q ; a [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], c [ i ] = a [ i ] - a [ i - 1 ], add ( i , c [ i ]); while ( q -- ) { int opt ; cin >> opt ; if ( opt == 1 ) { int l , r , x ; cin >> l >> r >> x ; add ( l , x ), add ( r + 1 , - x ); } else { int i ; cin >> i ; cout << query ( i ) << endl ; } } return 0 ; } \u533a\u95f4\u4fee\u6539\u533a\u95f4\u67e5\u8be2 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd8\u662f\u7ef4\u62a4\u5dee\u5206\u6570\u7ec4\uff0c\u5199\u51fa\u5df2\u77e5\u6761\u4ef6\u53ef\u4ee5\u5f97\u5230\uff1a \\(a(i) = \\sum\\limits_{j = 1}^{i} c(j)\\) \u3002 \u7136\u540e\u533a\u95f4\u67e5\u8be2\u53ef\u4ee5\u8f6c\u5316\u6210\u524d\u7f00\u6c42\u548c\uff0c\u672c\u8d28\u4e0a\u662f\u6c42\u8fd9\u4e2a\u4e1c\u897f\uff1a \\(\\sum\\limits_{j = 1}^i a(j) = \\sum\\limits_{j = 1}^{i}\\sum\\limits_{k = 1}^j c(k)\\) \u3002 \u4f46\u662f\u76f4\u63a5\u6c42\u590d\u6742\u5ea6\u8fc7\u9ad8\u6ca1\u6cd5\u63a5\u53d7\uff0c\u8003\u8651\u600e\u4e48\u628a Sigma \u62c6\u6389\uff08\u51cf\u5c11\uff09\uff0c\u8f6c\u5316\u6210\u51e0\u4e2a\u53ef\u4ee5\u7ef4\u62a4\u524d\u7f00\u548c\u7684\u5f0f\u5b50\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u3002 \u6211\u4eec\u53d1\u73b0\uff0c\u6bcf\u4e2a \\(c(k)\\) \u88ab\u8ba1\u7b97\u7684\u6b21\u6570\u662f\u56fa\u5b9a\u7684\uff0c\u5728\u6c42\u524d\u7f00 \\([1,i]\\) \u7684\u548c\u7684\u65f6\u5019\uff0c \\(c(k), k\\in[1,i]\\) \u88ab\u52a0\u7684\u6b21\u6570\u4e00\u5171\u5c31\u662f \\(i - k + 1\\) \u3002 \u4e5f\u5c31\u662f\u6211\u4eec\u53ef\u4ee5\u7528\u7b97\u6bcf\u4e2a\u8282\u70b9\u5bf9\u4e8e\u7b54\u6848\u7684\u8d21\u732e\u7684\u65b9\u5f0f\u6765\u66ff\u4ee3\u76f4\u63a5 Sigma\uff0c\u53ef\u4ee5\u5c11\u4e00\u5c42 Sigma\uff0c\u800c\u4e14\u80fd\u63a8\u51fa\u76f4\u63a5\u80fd\u7ef4\u62a4\u524d\u7f00\u548c\u7684\u5f0f\u5b50\u3002 \u6240\u4ee5\u5199\u6210\uff1a \\(\\sum\\limits_{j = 1}^ic(j)\\times (i - j + 1)\\) \u3002 \u7136\u540e\u6211\u4eec\u628a \u5e38\u6570\u9879\u548c\u6240\u6709\u7684\u53d8\u91cf\u90fd\u5206\u5f00\u6c42\u548c \uff1a \\[ \\sum\\limits_{j = 1}^ic(j)\\times (i - j + 1) = (i + 1)\\cdot\\sum\\limits_{j = 1}^{i}c(j) - \\sum\\limits_{j = 1}^i [c(j)\\times j] \\] \u6240\u4ee5\u7ef4\u62a4\u4e24\u4e2a\u6811\u72b6\u6570\u7ec4\uff0c\u4e00\u4e2a\u7ef4\u62a4 \\(c(i)\\) \uff0c\u4e00\u4e2a\u7ef4\u62a4 \\(c(i) \\times i\\) \u3002 \u4fee\u6539\u7c7b\u4f3c\u4e00\u7ef4\u5dee\u5206\uff0c\u8be2\u95ee\u7c7b\u4f3c\u4e00\u7ef4\u524d\u7f00\u548c\uff08\u6811\u72b6\u6570\u7ec4\u672c\u8d28\u4e0a\u5c31\u662f\u524d\u7f00\u548c\u7684\u5347\u7ea7\uff09\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #pragma GCC target(\"avx,sse2,sse3,sse4,mmx\") #pragma GCC optimize(\"Ofast\", \"inline\", \"-ffast-math\") #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 1e6 + 10 ; int n , q ; int a [ si ], c [ si ]; i64 t [ si ], tt [ si ]; int lowbit ( int x ) { return x & - x ; } void add ( int p , int x ) { int i = p ; while ( p <= n ) { t [ p ] += 1l l * x , tt [ p ] += 1l l * x * 1l l * i ; p += lowbit ( p ); } } i64 query ( int p ) { int i = p ; i64 ret = 0 , rett = 0 ; while ( p ) { ret += t [ p ], rett += tt [ p ]; p -= lowbit ( p ); } return ( 1l l * i + 1l l ) * ret - rett ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> q ; a [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], c [ i ] = a [ i ] - a [ i - 1 ], add ( i , c [ i ]); while ( q -- ) { int opt ; cin >> opt ; if ( opt == 1 ) { int l , r , x ; cin >> l >> r >> x ; add ( l , x ), add ( r + 1 , - x ); } else { int l , r ; cin >> l >> r ; cout << query ( r ) - query ( l - 1 ) << endl ; } } return 0 ; } \u5355\u70b9\u4fee\u6539\u77e9\u9635\u6c42\u548c \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e2a\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u7c7b\u6bd4\u4e00\u7ef4\u7684\u6811\u72b6\u6570\u7ec4\uff0c\u53ef\u4ee5\u5f97\u5230 \\(t(x,y)\\) \u8868\u793a \\((x - \\text{lowbit}(x) + 1, y - \\text{lowbit}(y) + 1) \\to (x, y)\\) \u7684\u5b50\u77e9\u9635\u548c\uff0c\u7136\u540e \\(\\log^2\\) \u6c42\u4e00\u4e0b\uff0c\u8be2\u95ee\u76f4\u63a5\u4e8c\u7ef4\u524d\u7f00\u548c\u51cf\u4e00\u51cf\u5c31\u884c\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #pragma GCC target(\"avx,sse2,sse3,sse4,mmx\") #pragma GCC optimize(\"Ofast\", \"inline\", \"-ffast-math\") #define endl '\\n' using namespace std ; using i64 = long long ; const int si = ( 1 << 12 ) + 1 ; int n , m ; i64 t [ si ][ si ]; inline int lowbit ( int x ) { return x & - x ; } void add ( int x , int y , int z ) { int yy = y ; while ( x <= n ) { y = yy ; while ( y <= m ) { t [ x ][ y ] += z ; y += lowbit ( y ); } x += lowbit ( x ); } } i64 query ( int x , int y ) { i64 ret = 0 ; int yy = y ; while ( x ) { y = yy ; while ( y ) { ret += t [ x ][ y ]; y -= lowbit ( y ); } x -= lowbit ( x ); } return ret ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); // cin.exceptions(cin.failbit | cin.badbit); cin >> n >> m ; // loj133 \u8fd9\u9898\u521d\u59cb A \u662f\u96f6\u77e9\u9635\uff0c\u6240\u4ee5\u4e0d\u7528\u5efa\u6811\u4e86\u3002 int opt ; while ( cin >> opt ) { if ( opt == 1 ) { int x , y , k ; cin >> x >> y >> k ; add ( x , y , k ); } else { int a , b , c , d ; cin >> a >> b >> c >> d ; cout << query ( c , d ) + query ( a - 1 , b - 1 ) - query ( c , b - 1 ) - query ( a - 1 , d ) << endl ; } } return 0 ; } \u6ce8\u610f\u4e0d\u8981\u5fd8\u4e86\u8bb0\u5f55\u4e00\u4e0b \\(y\\) \u7684\u503c\uff0c\u6bcf\u6b21\u5faa\u73af\u7ed3\u675f\u91cd\u65b0\u8d4b\u503c\u4e00\u6b21\u3002 \u77e9\u9635\u4fee\u6539\u5355\u70b9\u67e5\u8be2 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e2a\u76f4\u63a5\u7ef4\u62a4\u4e8c\u7ef4\u7684\u5dee\u5206\u6570\u7ec4\u5c31\u884c\uff0c\u5957\u8def\u548c\u4e00\u7ef4\u4e00\u6837\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #pragma GCC target(\"avx,sse2,sse3,sse4,mmx\") #pragma GCC optimize(\"Ofast\", \"inline\", \"-ffast-math\") #define endl '\\n' using namespace std ; using i64 = long long ; const int si = ( 1 << 12 ) + 1 ; int n , m ; i64 t [ si ][ si ]; inline int lowbit ( int x ) { return x & - x ; } void add ( int x , int y , int z ) { int yy = y ; while ( x <= n ) { y = yy ; while ( y <= m ) { t [ x ][ y ] += z ; y += lowbit ( y ); } x += lowbit ( x ); } } i64 query ( int x , int y ) { i64 ret = 0 ; int yy = y ; while ( x ) { y = yy ; while ( y ) { ret += t [ x ][ y ]; y -= lowbit ( y ); } x -= lowbit ( x ); } return ret ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); // cin.exceptions(cin.failbit | cin.badbit); int opt ; cin >> n >> m ; // loj134 \u8fd9\u9898\u521d\u59cb A \u662f\u96f6\u77e9\u9635\uff0c\u6240\u4ee5\u4e0d\u7528\u6784\u9020\u5dee\u5206\u77e9\u9635\u7136\u540e\u5efa\u6811\u4e86\u3002 while ( cin >> opt ) { if ( opt == 1 ) { int a , b , c , d , k ; cin >> a >> b >> c >> d >> k ; add ( a , b , k ), add ( a , d + 1 , - k ), add ( c + 1 , b , - k ), add ( c + 1 , d + 1 , k ); } else { int x , y ; cin >> x >> y ; cout << query ( x , y ) << endl ; } } return 0 ; } \u77e9\u9635\u4fee\u6539\u77e9\u9635\u67e5\u8be2 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7c7b\u6bd4\u533a\u95f4\u4fee\u6539\u533a\u95f4\u67e5\u8be2\u7684\u5957\u8def\uff0c\u7b97\u6bcf\u4e2a \\(c(u,v)\\) \u5728\u6c42\u4e8c\u7ef4\u524d\u7f00 \\((1, 1) \\to (i, j)\\) \u7684\u7b54\u6848\u7684\u65f6\u5019\u88ab\u7b97\u4e86\u591a\u5c11\u6b21\uff0c\u7136\u540e\u63a8\u4e2a\u5f0f\u5b50\u62c6\u6389 Sigma\uff0c\u5e38\u6570\u9879\u548c\u53d8\u91cf\u5206\u5f00\u6c42\u548c\uff08\u53c2\u53d8\u5206\u79bb\uff09\u5c31\u884c\u3002 \\[ a(i, j ) = \\sum\\limits_{x =1}^{i}\\sum\\limits_{y = 1}^{j} c(i,j) \\] \\[ \\sum\\limits_{x = 1}^{i}\\sum\\limits_{y = 1}^{j} a(i, j) = \\sum\\limits_{x = 1}^{i}\\sum\\limits_{y = 1}^j\\sum\\limits_{u = 1}^x \\sum\\limits_{v = 1}^{y} c(u, v) \\] \\[ \\Rightarrow\\sum\\limits_{u = 1}^{i}\\sum\\limits_{v = 1}^j c(u,v)\\cdot (ij - (u-1)j - i(v - 1) + (u - 1)(i - 1)) \\] \\[ \\Rightarrow\\sum\\limits_{u = 1}^i \\sum\\limits_{v =1 }^j c(u,v) \\cdot (i j - uj + j -iv + i +ui - u - i + 1) \\] \\[ \\Rightarrow\\sum\\limits_{u = 1}^i \\sum\\limits_{v = 1}^j c(u, v) \\cdot(i -u + 1)\\cdot(j - v + 1) \\] \\[ \\Rightarrow(i + 1)(j + 1)\\sum\\limits_{u = 1}^i \\sum\\limits_{v =1 }^j c(u,v) - (j + 1)\\sum\\limits_{u = 1}^i \\sum\\limits_{v =1 }^j c(u,v) \\cdot u - (i + 1)\\sum\\limits_{u = 1}^i \\sum\\limits_{v =1 }^j c(u,v) \\cdot v + \\sum\\limits_{u = 1}^i \\sum\\limits_{v =1 }^j c(u,v) \\cdot uv \\] \u6240\u4ee5\u7ef4\u62a4\u56db\u4e2a\u6811\u72b6\u6570\u7ec4\u5c31\u884c\u4e86\uff0c\u6ce8\u610f\u53ef\u4ee5\u7528\u4e00\u4e0b\u5185\u5b58\u8fde\u7eed+\u5faa\u73af\u5c55\u5f00+\u5c3d\u91cf\u4e0d\u505a\u8fc7\u591a\u7684\u4e58\u6cd5\uff0c\u51cf\u5c0f\u5e38\u6570\uff08\u4f3c\u4e4e\u6811\u72b6\u6570\u7ec4\u672c\u6765\u5e38\u6570\u5c31\u5f88\u5c0f\uff1f\uff09 \u4fee\u6539\u7c7b\u4f3c\u4e8c\u7ef4\u5dee\u5206\uff0c\u8be2\u95ee\u7c7b\u4f3c\u4e8c\u7ef4\u524d\u7f00\u548c\u3002 \u8fd9\u4efd\u4ee3\u7801\u76ee\u524d\u5728 Loj \u4e0a\u662f\u6700\u4f18\u89e3 1244ms\uff088/27/22\uff09\u3002 ScreenShots Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #pragma GCC target(\"avx,sse2,sse3,sse4,mmx\") #pragma GCC optimize(\"Ofast\", \"inline\", \"-ffast-math\") #define endl '\\n' using namespace std ; using i64 = long long ; template < typename __Tp > void read ( __Tp & x ) { int f = x = 0 ; char ch = getchar (); for (; ! isdigit ( ch ); ch = getchar ()) if ( ch == '-' ) f = 1 ; for (; isdigit ( ch ); ch = getchar ()) x = ( x << 1 ) + ( x << 3 ) + ( ch ^ 48 ); if ( f ) x = - x ; } // void read(modint &x) { int __value; read(__value); x = __value; return; } void read ( char & ch ) { for ( ch = getchar (); isspace ( ch ); ch = getchar ()); } template < typename __Tp1 , typename ... __Tp2 > void read ( __Tp1 & x , __Tp2 & ... y ) { read ( x ), read ( y ...); } template < typename __Tp > void write ( __Tp x ) { if ( x < 0 ) putchar ( '-' ), x = - x ; if ( x > 9 ) write ( x / 10 ); putchar ( x % 10 + 48 ); } void write ( char ch ) { putchar ( ch ); } // void write(modint x) { write(x.val()); } void write ( const char * s ) { for (; * s ; ++ s ) putchar ( * s ); } template < typename __Tp1 , typename ... __Tp2 > void write ( __Tp1 x , __Tp2 ... y ) { write ( x ), write ( y ...); } const int si = ( 1 << 12 ) + 1 ; int n , m ; i64 t [ si ][ si ][ 4 ]; // \u5185\u5b58\u8fde\u7eed i64 ret [ 4 ] = { 0 }; inline int lowbit ( int x ) { return x & - x ; } void add ( int x , int y , int k ) { int xx = x , yy = y ; while ( x <= n ) { y = yy ; while ( y <= m ) { t [ x ][ y ][ 0 ] += k , t [ x ][ y ][ 1 ] += k * xx , t [ x ][ y ][ 2 ] += k * yy , t [ x ][ y ][ 3 ] += k * xx * yy ; y += lowbit ( y ); } x += lowbit ( x ); } } i64 query ( int x , int y ) { int xx = x , yy = y ; ret [ 0 ] = ret [ 1 ] = ret [ 2 ] = ret [ 3 ] = 0 ; while ( x ) { y = yy ; while ( y ) { ret [ 0 ] += t [ x ][ y ][ 0 ]; ret [ 1 ] += t [ x ][ y ][ 1 ]; ret [ 2 ] += t [ x ][ y ][ 2 ]; ret [ 3 ] += t [ x ][ y ][ 3 ]; y -= lowbit ( y ); } x -= lowbit ( x ); } return (( xx + 1 ) * ( yy + 1 ) * ret [ 0 ]) - (( yy + 1 ) * ret [ 1 ]) - (( xx + 1 ) * ret [ 2 ]) + ret [ 3 ]; } int main () { // cin.tie(0) -> sync_with_stdio(false); // cin.exceptions(cin.failbit | cin.badbit); read ( n , m ); int opt ; int a , b , c , d , k ; while ( ~ scanf ( \"%d\" , & opt )) { if ( opt == 1 ) { read ( a , b , c , d , k ); add ( a , b , k ), add ( a , d + 1 , - k ), add ( c + 1 , b , - k ), add ( c + 1 , d + 1 , k ); } else { read ( a , b , c , d ); write ( query ( c , d ) - query ( a - 1 , d ) - query ( c , b - 1 ) + query ( a - 1 , b - 1 ) , endl ); } } return 0 ; } \u611f\u89c9\u533a\u95f4\u4fee\u533a\u95f4\u67e5\uff0c\u77e9\u9635\u4fee\u77e9\u9635\u67e5\u90fd\u8fd0\u7528\u4e86\u67d0\u79cd\u6bd4\u8f83\u7ecf\u5178\u7684\u5957\u8def\uff0c\u4f3c\u4e4e\u53ef\u4ee5\u8bb0\u4e0b\u6765\u4ee5\u540e\u7528\uff1f \u5927\u6982\u5c31\u662f\u5728\u6c42\u548c/\u6c42\u4e58\u79ef\u6216\u8005\u5e72\u4ec0\u4e48\u7684\u65f6\u5019\uff0c\u5206\u79bb\u5305\u542b\u591a\u53d8\u91cf\u7684\u9879\uff0c\u628a\u6bcf\u4e2a\u53d8\u91cf\u90fd\u63d0\u51fa\u6765\u5355\u72ec\u7ef4\u62a4\uff0c\u8ba9\u53d8\u91cf\u548c\u53d8\u91cf\u4e4b\u95f4\u76f8\u4e92\u72ec\u7acb\uff0c\u4e0d\u540c\u65f6\u7ef4\u62a4\u591a\u4e2a\u53d8\u91cf\u5bfc\u81f4\u601d\u8def\u8fc7\u4e8e\u590d\u6742\u3002 \u533a\u95f4\u6700\u503c \u03c8(\uff40\u2207\u00b4)\u03c8 \u663e\u7136\u6700\u5927\u6700\u5c0f\u503c\u6ca1\u6709\u533a\u95f4\u53ef\u51cf\u6027\uff0c\u6240\u4ee5\u4e0d\u80fd\u7528\u524d\u7f00\u548c\u51cf\u3002 \u7136\u540e\u867d\u7136\u53ef\u4ee5\u6c42\u6700\u503c\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u633a\u9ebb\u70e6\u800c\u4e14\u4e0d\u662f\u5f88\u901a\u7528\u3002 \u9759\u6001\u6700\u503c\u4e0d\u5982\u76f4\u63a5\u5199 st \u8868\uff0c\u52a8\u6001\u6700\u503c\u5c31\u7b97\u53ea\u652f\u6301\u5355\u70b9\u4fee\u4e5f\u633a\u9ebb\u70e6\u3002 \u4e2a\u4eba\u89c9\u5f97\u6ca1\u6709\u5fc5\u8981\uff0c\u76f4\u63a5 segment tree \u5c31\u884c\u4e86\u3002 \u4e0d\u8fc7\u5982\u679c\u53ea\u662f\u95ee\u524d\u7f00\u6700\u503c+\u5355\u70b9\u4fee\u6539\u90a3\u80af\u5b9a\u5c31\u5199\u6811\u72b6\u6570\u7ec4\uff0c\u5b9e\u73b0\u8fc7\u4e8e\u7b80\u5355\u61d2\u5f97\u5199\uff0c\u53ef\u4ee5\u770b\u770b\u8fd9\u9053\u9898\u91cc\u5199\u7684\uff1a Optimal Partition \u5e94\u7528 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6c42\u9006\u5e8f\u5bf9 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5148\u79bb\u6563\u5316\uff0c\u5728\u503c\u57df\u4e0a\u5efa\u7acb\u6811\u72b6\u6570\u7ec4\uff08\u5c31\u662f\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u6876\uff09\u3002 \u626b\u63cf \\(n \\to 1\\) \uff0c\u5bf9\u4e8e \\(a(i)\\) \uff0c\u5b83\u80fd\u548c \\(a(i + 1) \\sim a(n)\\) \u6784\u6210\u7684\u9006\u5e8f\u5bf9\u4e2a\u6570\u5c31\u662f\u5f53\u524d\u6811\u72b6\u6570\u7ec4\u4e0a \\([1,a(i) - 1]\\) \u7684\u524d\u7f00\u548c\u3002 \u7d2f\u52a0\u7b54\u6848\u4e4b\u540e\uff0c\u6267\u884c \\(\\text{add}(a(i), 1)\\) \u5373\u53ef\u3002 \u590d\u6742\u5ea6 \\(O(n \\log n)\\) \uff0c\u6bd4 Merge Sort \u597d\u5199\u591a\u4e86\u3002 1 2 3 4 5 for ( int i = n ; i >= 1 ; -- i ) { ans += query ( a [ i ] - 1 ); add ( a [ i ], 1 ); } cout << ans << endl ; \u4e09\u5143\u9006\u5e8f\u5bf9 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6c42\u6ee1\u8db3 \\(i < j < k, a(i) > a(j) > a(k)\\) \u7684 \\((i,j,k)\\) \u7684\u4e2a\u6570\u3002 \u548c\u4e8c\u5143\u9006\u5e8f\u5bf9\u672c\u8d28\u4e00\u6837\uff0c\u79bb\u6563\u5316\u4e4b\u540e\u7ef4\u62a4\u4e24\u4e2a\u6811\u72b6\u6570\u7ec4\uff0c\u4e00\u4e2a\u7ef4\u62a4\u9006\u5e8f\u5bf9\uff0c\u4e00\u4e2a\u7ef4\u62a4\u987a\u5e8f\u5bf9\uff0c\u6700\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e\u4e58\u6cd5\u539f\u7406\u4e00\u4e0b\u5373\u53ef\u3002","title":"\u6811\u72b6\u6570\u7ec4"},{"location":"algor/ds/fenwick/#_1","text":"\u6570\u8bba\u91cc\u9762\u6709\u4e00\u4e2a\u5f88\u7ecf\u5178\u7684\u7ed3\u8bba\uff0c\u4efb\u610f\u6b63\u6574\u6570\u90fd\u80fd\u88ab\u552f\u4e00\u62c6\u5206\u6210\u82e5\u5e72\u4e2a\u4e0d\u540c\u7684 \\(2\\) \u7684\u6b21\u5e42\u7684\u548c \u8f6c\u5316\u4e00\u4e0b\uff0c\u5bf9\u4e8e\u524d\u7f00 \\([1,x]\\) \uff0c\u5047\u8bbe \\(x\\) \u53ef\u4ee5\u88ab\u62c6\u5206\u6210 \\(2^{c_1} + 2^{c_2} + 2^{c_3} + \\dots 2^{c_m}\\) \uff0c\u90a3\u4e48 \\([1,x]\\) \u5c31\u53ef\u4ee5\u88ab\u62c6\u5206\u6210 \\(m\\) \u4e2a\u5c0f\u533a\u95f4\uff1a \\([1, 2^{c_1}], [2^{c_1} + 1, 2^{c_1} + 2^{c_2}], \\dots [2^{c_m - 1} + 1, 2^{c_m}]\\) \u3002 \u5176\u4e2d \\(m = O(\\log x), c_i \\in [0, m], c_1 > c_2 > c_3 \\dots > c_m\\) \u3002 \u5982\u679c \\(x\\) \u7684\u62c6\u5206\u5305\u542b \\(2^{c_i}\\) \uff0c\u90a3\u4e48 \\(x\\) \u4e8c\u8fdb\u5236\u8868\u793a\u4e0b\u7684\u7b2c \\(c_i\\) \u4f4d\u5c31\u662f \\(1\\) \uff08\u6700\u4f4e\u4f4d\u4e3a\u7b2c \\(0\\) \u4f4d\uff09\u3002 \u6709\u4e00\u4e2a\u7ecf\u5178\u7684\u8fd0\u7b97\u53eb \\(\\text{lowbit}\\) \uff0c\u53ef\u4ee5\u53d6\u51fa \\(x\\) \u4e8c\u8fdb\u5236\u8868\u793a\u4e0b\u7684\u6700\u4f4e\u7684 \\(1\\) \u548c\u6bd4\u5b83\u66f4\u4f4e\u7684\u6240\u6709 \\(0\\) \u7ec4\u6210\u7684\u6570\u3002 \u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u7528 \\(\\text{lowbit}\\) \u6765\u904d\u5386\u524d\u7f00 \\([1,x]\\) \u5206\u6210\u7684\u8fd9\u4e9b\u533a\u95f4\uff1a 1 2 3 4 5 6 int lowbit ( int x ) { return x & - x ;} while ( x ) { cout << x - lowbit ( x ) + 1 << \" \" << x << endl ; x -= lowbit ( x ); } \u6811\u72b6\u6570\u7ec4\u5dee\u4e0d\u591a\u5c31\u662f\u5229\u7528\u8fd9\u4e2a\u601d\u60f3\uff0c\u5b9a\u4e49 \\(t(x)\\) \u4e3a \\(\\sum\\limits_{i = x - \\text{lowbit}(x) + 1}^x a(i)\\) \uff0c\u7136\u540e\u901a\u8fc7\u4e00\u4e9b\u6027\u8d28 \\(O(\\log n)\\) \u5730\u5feb\u901f\u7ef4\u62a4\u5e8f\u5217\u524d\u7f00\u548c\uff0c\u5e76\u4e14\u652f\u6301\u5355\u70b9\u4fee\u6539\u3002 \u7ed3\u6784\u5982\u56fe\uff1a \u5b9e\u9645\u4e0a\u6811\u72b6\u6570\u7ec4\u662f\u4e00\u4e2a\u68ee\u6797\uff0c\u56e0\u4e3a\u5f53 \\(n\\) \u4e0d\u662f \\(2\\) \u7684\u6574\u6570\u6b21\u5e42\u65f6\uff0c\u6811\u6839\u662f\u4e0d\u552f\u4e00\u7684\u3002 \u6811\u72b6\u6570\u7ec4\u5177\u6709\u7684\u6027\u8d28\uff08\u77e5\u9053 \\(1 \\sim 4\\) \u6761\u5c31\u884c\uff09\uff1a \\(t(x),x \\not\\in \\text{root}\\) \u7684\u7236\u8282\u70b9\u662f \\(t(x + \\text{lowbit}(x))\\) \\(t(x)\\) \u7684\u5b50\u8282\u70b9\u4e2a\u6570\u662f \\(\\text{lowbit}(x)\\) \u7684\u4f4d\u6570\uff08\u6700\u4f4e\u7684\u4e00\u4f4d \\(1\\) \u662f\u7b2c\u51e0\u4f4d\uff0c\u7b2c \\(0\\) \u4f4d\u662f\u6700\u4f4e\u4f4d\uff09\u3002 \\(t(x)\\) \u4fdd\u5b58\u7684\u662f\u5b50\u6811\u53f6\u8282\u70b9\uff08\u7b2c 0 \u5c42\uff09\u548c\u3002 \u6df1\u5ea6\u4e3a \\(O(\\log n)\\) \u3002 \u7b2c \\(i\\) \u5c42\u7684\u8282\u70b9\u95f4\u8ddd\u4e3a \\(2^{i - 1}\\) \u3002 \u8282\u70b9\u7f16\u53f7\u7684 \\(\\text{lowbit}\\) \u4e3a \\(2^{i-1}\\) \uff08\u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u6240\u6709 \\(t(x)\\) \u6309 \\(\\text{lowbit}\\) \u5206\u7c7b\uff09 \u7b2c \\(i\\) \u5c42\u7684\u8282\u70b9\u4e2a\u6570\u4e3a \\(\\lfloor\\dfrac{n + 1}{2^i}\\rfloor\\) \u7b2c \\(i\\) \u5c42\u7684\u8282\u70b9\u672c\u8d28\u4e0a\u662f\u5728\u786e\u5b9a \\(\\text{lowbit}\\) \u4e4b\u540e\uff0c\u4e0d\u65ad\u5728 \\(\\text{lowbit}\\) \u540e\u9762\u7684\u4f4d\u653e \\(1\\) \uff08\u524d\u9762\u4e0d\u80fd\u653e\uff0c\u4e0d\u7136 \\(\\text{lowbit}\\) \u5c31\u53d8\u4e86\uff09\u3002","title":"\u6982\u8ff0"},{"location":"algor/ds/fenwick/#_2","text":"","title":"\u64cd\u4f5c"},{"location":"algor/ds/fenwick/#_3","text":"\u6bd4\u8f83\u7b80\u5355\uff0c\u4fee\u6539\u4f4d\u7f6e \\(a(i)\\) \uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u5148\u4fee\u6539 \\(t(i)\\) \uff0c\u7136\u540e\u5411\u4e0a\u4e0d\u65ad\u66f4\u65b0\u7236\u8282\u70b9\u6743\u503c\u5c31\u884c\u4e86\u3002 1 2 3 4 5 6 void add ( int x , int v ) { while ( x <= n ) { t [ x ] += v ; x += lowbit ( x ); } } \u590d\u6742\u5ea6\u662f \\(O(\\log n)\\) \u3002","title":"\u5355\u70b9\u4fee\u6539"},{"location":"algor/ds/fenwick/#_4","text":"\u76f4\u63a5\u5bf9\u4e8e\u6bcf\u4e2a \\(a(i)\\) \uff0c \\(\\text{add}(i, a(i))\\) \u5373\u53ef\u3002 \u4e0d\u8fc7\u8fd9\u6837\u590d\u6742\u5ea6\u662f \\(O(n\\log n)\\) \u7684\uff0c\u8fd8\u6709\u4e24\u79cd \\(O(n)\\) \u5efa\u6811\u7684\u65b9\u6cd5\uff1a \u6cd5\u4e00\uff1a\u76f4\u63a5\u5904\u7406\u524d\u7f00\u548c\uff0c\u7136\u540e\u8d4b\u503c\u7ed9 \\(t\\) \uff08\u8981\u6d88\u8017\u7a7a\u95f4\u6362\u65f6\u95f4\uff09\u3002 \u6cd5\u4e8c\uff1a\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u503c\u662f\u7531\u6240\u6709\u4e0e\u81ea\u5df1\u76f4\u63a5\u76f8\u8fde\u7684\u513f\u5b50\u7684\u503c\u6c42\u548c\u5f97\u5230\u7684\u3002\u56e0\u6b64\u53ef\u4ee5\u5012\u7740\u8003\u8651\u8d21\u732e\uff0c\u5373\u6bcf\u6b21\u786e\u5b9a\u5b8c\u513f\u5b50\u7684\u503c\u540e\uff0c\u7528\u81ea\u5df1\u7684\u503c\u66f4\u65b0\u81ea\u5df1\u7684\u7236\u4eb2\uff0c\u8fd9\u6837\u53ef\u4ee5\u51cf\u5c11\u8fd0\u7b97\u6b21\u6570\u3002 1 2 3 4 5 for ( int i = 1 ; i <= n ; ++ i ) { t [ i ] += a [ i ]; int j = i + lowbit ( i ); if ( j <= n ) t [ j ] += t [ i ]; }","title":"\u5efa\u6811"},{"location":"algor/ds/fenwick/#_5","text":"\u76f4\u63a5\u5229\u7528 \\(\\text{lowbit}\\) \u626b\u4e00\u904d \\([1,x]\\) \u5206\u6210\u7684 \\(O(\\log x)\\) \u4e2a\u5c0f\u533a\u95f4\u5c31\u884c\uff0c \u56e0\u4e3a\u5b9a\u4e49\u4e86 \\(t(x) = \\sum\\limits_{i = x - \\text{lowbit}(x) + 1}^x a(i)\\) \uff0c\u6240\u4ee5\u76f4\u63a5\u7d2f\u52a0\u5c31\u884c\u4e86\u3002 1 2 3 4 5 6 7 8 int query ( int x ) { int ret = 0 ; while ( x ) { ret += t [ x ]; x -= lowbit ( x ); } return ret ; } \u590d\u6742\u5ea6 \\(O(\\log n)\\) \u3002 \u533a\u95f4\u67e5\u8be2\u51cf\u4e00\u4e0b\u5c31\u884c\u3002","title":"\u67e5\u8be2\u524d\u7f00\u548c"},{"location":"algor/ds/fenwick/#_6","text":"\u5bf9\u4ed8\u591a\u7ec4\u6570\u636e\u5f88\u5e38\u89c1\u7684\u6280\u5de7\u3002 \u5982\u679c\u6bcf\u6b21\u8f93\u5165\u65b0\u6570\u636e\u65f6\uff0c\u90fd\u66b4\u529b\u6e05\u7a7a\u6811\u72b6\u6570\u7ec4\uff0c\u5c31\u53ef\u80fd\u4f1a\u9020\u6210\u8d85\u65f6\u3002 \u56e0\u6b64\u4f7f\u7528 \\(tag\\) \u6807\u8bb0\uff0c\u5b58\u50a8\u5f53\u524d\u8282\u70b9\u4e0a\u6b21\u4f7f\u7528\u65f6\u95f4\uff08\u5373\u6700\u8fd1\u4e00\u6b21\u662f\u88ab\u7b2c\u51e0\u7ec4\u6570\u636e\u4f7f\u7528\uff09\u3002\u6bcf\u6b21\u64cd\u4f5c\u65f6\u5224\u65ad\u8fd9\u4e2a\u4f4d\u7f6e \\(tag\\) \u4e2d\u7684\u65f6\u95f4\u548c\u5f53\u524d\u65f6\u95f4\u662f\u5426\u76f8\u540c\uff0c\u5c31\u53ef\u4ee5\u5224\u65ad\u8fd9\u4e2a\u4f4d\u7f6e\u5e94\u8be5\u662f \\(0\\) \u8fd8\u662f\u5f53\u524d\u6570\u636e\u7684 \\(a\\) \u6570\u7ec4\u5185\u7684\u503c\u3002 \u5982\u679c\u4fee\u6539\u7684\u65f6\u5019\u9047\u5230\u4e86\u4e4b\u524d\u7528\u7684\u8282\u70b9\uff0c\u5c31\u76f4\u63a5\u5148\u7f6e\u96f6\u518d\u4fee\u6539\u6253 \\(tag\\) \u3002 \u5982\u679c\u8be2\u95ee\u7684\u65f6\u5019\u9047\u5230\u4e86\u4e4b\u524d\u7684\u8282\u70b9\uff0c\u8bc1\u660e\u8fd9\u4e2a\u4f4d\u7f6e\u5728\u8fd9\u7ec4\u6570\u636e\u90fd\u6ca1\u88ab\u52a8\u8fc7\uff0c\u76f4\u63a5\u4e0d\u52a0\u5c31\u884c\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 void reset () { ++ dfn ; } void add ( int k , int v ) { while ( k <= n ) { if ( tag [ k ] != dfn ) t [ k ] = 0 ; t [ k ] += v , tag [ k ] = dfn ; k += lowbit ( k ); } } int query ( int k ) { int ret = 0 ; while ( k ) { if ( tag [ k ] == dfn ) ret += t [ k ]; k -= lowbit ( k ); } return ret ; }","title":"\u65f6\u95f4\u6233\u4f18\u5316"},{"location":"algor/ds/fenwick/#_7","text":"","title":"\u6269\u5c55"},{"location":"algor/ds/fenwick/#_8","text":"\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5dee\u5206\u6570\u7ec4 \\(c\\) \u5373\u53ef\u3002 \u5355\u70b9\u67e5\u76f4\u63a5\u7528\u6811\u72b6\u6570\u7ec4\u6c42\u524d\u7f00\u548c\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 1e6 + 10 ; int n , q ; int a [ si ], c [ si ]; i64 t [ si ]; inline int lowbit ( int x ) { return x & - x ; } void add ( int p , int x ) { while ( p <= n ) { t [ p ] += x ; p += lowbit ( p ); } } i64 query ( int p ) { i64 ret = 0 ; while ( p ) { ret += t [ p ]; p -= lowbit ( p ); } return ret ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> q ; a [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], c [ i ] = a [ i ] - a [ i - 1 ], add ( i , c [ i ]); while ( q -- ) { int opt ; cin >> opt ; if ( opt == 1 ) { int l , r , x ; cin >> l >> r >> x ; add ( l , x ), add ( r + 1 , - x ); } else { int i ; cin >> i ; cout << query ( i ) << endl ; } } return 0 ; }","title":"\u533a\u95f4\u4fee\u6539\u5355\u70b9\u67e5\u8be2"},{"location":"algor/ds/fenwick/#_9","text":"\u8fd8\u662f\u7ef4\u62a4\u5dee\u5206\u6570\u7ec4\uff0c\u5199\u51fa\u5df2\u77e5\u6761\u4ef6\u53ef\u4ee5\u5f97\u5230\uff1a \\(a(i) = \\sum\\limits_{j = 1}^{i} c(j)\\) \u3002 \u7136\u540e\u533a\u95f4\u67e5\u8be2\u53ef\u4ee5\u8f6c\u5316\u6210\u524d\u7f00\u6c42\u548c\uff0c\u672c\u8d28\u4e0a\u662f\u6c42\u8fd9\u4e2a\u4e1c\u897f\uff1a \\(\\sum\\limits_{j = 1}^i a(j) = \\sum\\limits_{j = 1}^{i}\\sum\\limits_{k = 1}^j c(k)\\) \u3002 \u4f46\u662f\u76f4\u63a5\u6c42\u590d\u6742\u5ea6\u8fc7\u9ad8\u6ca1\u6cd5\u63a5\u53d7\uff0c\u8003\u8651\u600e\u4e48\u628a Sigma \u62c6\u6389\uff08\u51cf\u5c11\uff09\uff0c\u8f6c\u5316\u6210\u51e0\u4e2a\u53ef\u4ee5\u7ef4\u62a4\u524d\u7f00\u548c\u7684\u5f0f\u5b50\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u3002 \u6211\u4eec\u53d1\u73b0\uff0c\u6bcf\u4e2a \\(c(k)\\) \u88ab\u8ba1\u7b97\u7684\u6b21\u6570\u662f\u56fa\u5b9a\u7684\uff0c\u5728\u6c42\u524d\u7f00 \\([1,i]\\) \u7684\u548c\u7684\u65f6\u5019\uff0c \\(c(k), k\\in[1,i]\\) \u88ab\u52a0\u7684\u6b21\u6570\u4e00\u5171\u5c31\u662f \\(i - k + 1\\) \u3002 \u4e5f\u5c31\u662f\u6211\u4eec\u53ef\u4ee5\u7528\u7b97\u6bcf\u4e2a\u8282\u70b9\u5bf9\u4e8e\u7b54\u6848\u7684\u8d21\u732e\u7684\u65b9\u5f0f\u6765\u66ff\u4ee3\u76f4\u63a5 Sigma\uff0c\u53ef\u4ee5\u5c11\u4e00\u5c42 Sigma\uff0c\u800c\u4e14\u80fd\u63a8\u51fa\u76f4\u63a5\u80fd\u7ef4\u62a4\u524d\u7f00\u548c\u7684\u5f0f\u5b50\u3002 \u6240\u4ee5\u5199\u6210\uff1a \\(\\sum\\limits_{j = 1}^ic(j)\\times (i - j + 1)\\) \u3002 \u7136\u540e\u6211\u4eec\u628a \u5e38\u6570\u9879\u548c\u6240\u6709\u7684\u53d8\u91cf\u90fd\u5206\u5f00\u6c42\u548c \uff1a \\[ \\sum\\limits_{j = 1}^ic(j)\\times (i - j + 1) = (i + 1)\\cdot\\sum\\limits_{j = 1}^{i}c(j) - \\sum\\limits_{j = 1}^i [c(j)\\times j] \\] \u6240\u4ee5\u7ef4\u62a4\u4e24\u4e2a\u6811\u72b6\u6570\u7ec4\uff0c\u4e00\u4e2a\u7ef4\u62a4 \\(c(i)\\) \uff0c\u4e00\u4e2a\u7ef4\u62a4 \\(c(i) \\times i\\) \u3002 \u4fee\u6539\u7c7b\u4f3c\u4e00\u7ef4\u5dee\u5206\uff0c\u8be2\u95ee\u7c7b\u4f3c\u4e00\u7ef4\u524d\u7f00\u548c\uff08\u6811\u72b6\u6570\u7ec4\u672c\u8d28\u4e0a\u5c31\u662f\u524d\u7f00\u548c\u7684\u5347\u7ea7\uff09\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #pragma GCC target(\"avx,sse2,sse3,sse4,mmx\") #pragma GCC optimize(\"Ofast\", \"inline\", \"-ffast-math\") #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 1e6 + 10 ; int n , q ; int a [ si ], c [ si ]; i64 t [ si ], tt [ si ]; int lowbit ( int x ) { return x & - x ; } void add ( int p , int x ) { int i = p ; while ( p <= n ) { t [ p ] += 1l l * x , tt [ p ] += 1l l * x * 1l l * i ; p += lowbit ( p ); } } i64 query ( int p ) { int i = p ; i64 ret = 0 , rett = 0 ; while ( p ) { ret += t [ p ], rett += tt [ p ]; p -= lowbit ( p ); } return ( 1l l * i + 1l l ) * ret - rett ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> q ; a [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], c [ i ] = a [ i ] - a [ i - 1 ], add ( i , c [ i ]); while ( q -- ) { int opt ; cin >> opt ; if ( opt == 1 ) { int l , r , x ; cin >> l >> r >> x ; add ( l , x ), add ( r + 1 , - x ); } else { int l , r ; cin >> l >> r ; cout << query ( r ) - query ( l - 1 ) << endl ; } } return 0 ; }","title":"\u533a\u95f4\u4fee\u6539\u533a\u95f4\u67e5\u8be2"},{"location":"algor/ds/fenwick/#_10","text":"\u8fd9\u4e2a\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u7c7b\u6bd4\u4e00\u7ef4\u7684\u6811\u72b6\u6570\u7ec4\uff0c\u53ef\u4ee5\u5f97\u5230 \\(t(x,y)\\) \u8868\u793a \\((x - \\text{lowbit}(x) + 1, y - \\text{lowbit}(y) + 1) \\to (x, y)\\) \u7684\u5b50\u77e9\u9635\u548c\uff0c\u7136\u540e \\(\\log^2\\) \u6c42\u4e00\u4e0b\uff0c\u8be2\u95ee\u76f4\u63a5\u4e8c\u7ef4\u524d\u7f00\u548c\u51cf\u4e00\u51cf\u5c31\u884c\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #pragma GCC target(\"avx,sse2,sse3,sse4,mmx\") #pragma GCC optimize(\"Ofast\", \"inline\", \"-ffast-math\") #define endl '\\n' using namespace std ; using i64 = long long ; const int si = ( 1 << 12 ) + 1 ; int n , m ; i64 t [ si ][ si ]; inline int lowbit ( int x ) { return x & - x ; } void add ( int x , int y , int z ) { int yy = y ; while ( x <= n ) { y = yy ; while ( y <= m ) { t [ x ][ y ] += z ; y += lowbit ( y ); } x += lowbit ( x ); } } i64 query ( int x , int y ) { i64 ret = 0 ; int yy = y ; while ( x ) { y = yy ; while ( y ) { ret += t [ x ][ y ]; y -= lowbit ( y ); } x -= lowbit ( x ); } return ret ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); // cin.exceptions(cin.failbit | cin.badbit); cin >> n >> m ; // loj133 \u8fd9\u9898\u521d\u59cb A \u662f\u96f6\u77e9\u9635\uff0c\u6240\u4ee5\u4e0d\u7528\u5efa\u6811\u4e86\u3002 int opt ; while ( cin >> opt ) { if ( opt == 1 ) { int x , y , k ; cin >> x >> y >> k ; add ( x , y , k ); } else { int a , b , c , d ; cin >> a >> b >> c >> d ; cout << query ( c , d ) + query ( a - 1 , b - 1 ) - query ( c , b - 1 ) - query ( a - 1 , d ) << endl ; } } return 0 ; } \u6ce8\u610f\u4e0d\u8981\u5fd8\u4e86\u8bb0\u5f55\u4e00\u4e0b \\(y\\) \u7684\u503c\uff0c\u6bcf\u6b21\u5faa\u73af\u7ed3\u675f\u91cd\u65b0\u8d4b\u503c\u4e00\u6b21\u3002","title":"\u5355\u70b9\u4fee\u6539\u77e9\u9635\u6c42\u548c"},{"location":"algor/ds/fenwick/#_11","text":"\u8fd9\u4e2a\u76f4\u63a5\u7ef4\u62a4\u4e8c\u7ef4\u7684\u5dee\u5206\u6570\u7ec4\u5c31\u884c\uff0c\u5957\u8def\u548c\u4e00\u7ef4\u4e00\u6837\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #pragma GCC target(\"avx,sse2,sse3,sse4,mmx\") #pragma GCC optimize(\"Ofast\", \"inline\", \"-ffast-math\") #define endl '\\n' using namespace std ; using i64 = long long ; const int si = ( 1 << 12 ) + 1 ; int n , m ; i64 t [ si ][ si ]; inline int lowbit ( int x ) { return x & - x ; } void add ( int x , int y , int z ) { int yy = y ; while ( x <= n ) { y = yy ; while ( y <= m ) { t [ x ][ y ] += z ; y += lowbit ( y ); } x += lowbit ( x ); } } i64 query ( int x , int y ) { i64 ret = 0 ; int yy = y ; while ( x ) { y = yy ; while ( y ) { ret += t [ x ][ y ]; y -= lowbit ( y ); } x -= lowbit ( x ); } return ret ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); // cin.exceptions(cin.failbit | cin.badbit); int opt ; cin >> n >> m ; // loj134 \u8fd9\u9898\u521d\u59cb A \u662f\u96f6\u77e9\u9635\uff0c\u6240\u4ee5\u4e0d\u7528\u6784\u9020\u5dee\u5206\u77e9\u9635\u7136\u540e\u5efa\u6811\u4e86\u3002 while ( cin >> opt ) { if ( opt == 1 ) { int a , b , c , d , k ; cin >> a >> b >> c >> d >> k ; add ( a , b , k ), add ( a , d + 1 , - k ), add ( c + 1 , b , - k ), add ( c + 1 , d + 1 , k ); } else { int x , y ; cin >> x >> y ; cout << query ( x , y ) << endl ; } } return 0 ; }","title":"\u77e9\u9635\u4fee\u6539\u5355\u70b9\u67e5\u8be2"},{"location":"algor/ds/fenwick/#_12","text":"\u7c7b\u6bd4\u533a\u95f4\u4fee\u6539\u533a\u95f4\u67e5\u8be2\u7684\u5957\u8def\uff0c\u7b97\u6bcf\u4e2a \\(c(u,v)\\) \u5728\u6c42\u4e8c\u7ef4\u524d\u7f00 \\((1, 1) \\to (i, j)\\) \u7684\u7b54\u6848\u7684\u65f6\u5019\u88ab\u7b97\u4e86\u591a\u5c11\u6b21\uff0c\u7136\u540e\u63a8\u4e2a\u5f0f\u5b50\u62c6\u6389 Sigma\uff0c\u5e38\u6570\u9879\u548c\u53d8\u91cf\u5206\u5f00\u6c42\u548c\uff08\u53c2\u53d8\u5206\u79bb\uff09\u5c31\u884c\u3002 \\[ a(i, j ) = \\sum\\limits_{x =1}^{i}\\sum\\limits_{y = 1}^{j} c(i,j) \\] \\[ \\sum\\limits_{x = 1}^{i}\\sum\\limits_{y = 1}^{j} a(i, j) = \\sum\\limits_{x = 1}^{i}\\sum\\limits_{y = 1}^j\\sum\\limits_{u = 1}^x \\sum\\limits_{v = 1}^{y} c(u, v) \\] \\[ \\Rightarrow\\sum\\limits_{u = 1}^{i}\\sum\\limits_{v = 1}^j c(u,v)\\cdot (ij - (u-1)j - i(v - 1) + (u - 1)(i - 1)) \\] \\[ \\Rightarrow\\sum\\limits_{u = 1}^i \\sum\\limits_{v =1 }^j c(u,v) \\cdot (i j - uj + j -iv + i +ui - u - i + 1) \\] \\[ \\Rightarrow\\sum\\limits_{u = 1}^i \\sum\\limits_{v = 1}^j c(u, v) \\cdot(i -u + 1)\\cdot(j - v + 1) \\] \\[ \\Rightarrow(i + 1)(j + 1)\\sum\\limits_{u = 1}^i \\sum\\limits_{v =1 }^j c(u,v) - (j + 1)\\sum\\limits_{u = 1}^i \\sum\\limits_{v =1 }^j c(u,v) \\cdot u - (i + 1)\\sum\\limits_{u = 1}^i \\sum\\limits_{v =1 }^j c(u,v) \\cdot v + \\sum\\limits_{u = 1}^i \\sum\\limits_{v =1 }^j c(u,v) \\cdot uv \\] \u6240\u4ee5\u7ef4\u62a4\u56db\u4e2a\u6811\u72b6\u6570\u7ec4\u5c31\u884c\u4e86\uff0c\u6ce8\u610f\u53ef\u4ee5\u7528\u4e00\u4e0b\u5185\u5b58\u8fde\u7eed+\u5faa\u73af\u5c55\u5f00+\u5c3d\u91cf\u4e0d\u505a\u8fc7\u591a\u7684\u4e58\u6cd5\uff0c\u51cf\u5c0f\u5e38\u6570\uff08\u4f3c\u4e4e\u6811\u72b6\u6570\u7ec4\u672c\u6765\u5e38\u6570\u5c31\u5f88\u5c0f\uff1f\uff09 \u4fee\u6539\u7c7b\u4f3c\u4e8c\u7ef4\u5dee\u5206\uff0c\u8be2\u95ee\u7c7b\u4f3c\u4e8c\u7ef4\u524d\u7f00\u548c\u3002 \u8fd9\u4efd\u4ee3\u7801\u76ee\u524d\u5728 Loj \u4e0a\u662f\u6700\u4f18\u89e3 1244ms\uff088/27/22\uff09\u3002 ScreenShots Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #pragma GCC target(\"avx,sse2,sse3,sse4,mmx\") #pragma GCC optimize(\"Ofast\", \"inline\", \"-ffast-math\") #define endl '\\n' using namespace std ; using i64 = long long ; template < typename __Tp > void read ( __Tp & x ) { int f = x = 0 ; char ch = getchar (); for (; ! isdigit ( ch ); ch = getchar ()) if ( ch == '-' ) f = 1 ; for (; isdigit ( ch ); ch = getchar ()) x = ( x << 1 ) + ( x << 3 ) + ( ch ^ 48 ); if ( f ) x = - x ; } // void read(modint &x) { int __value; read(__value); x = __value; return; } void read ( char & ch ) { for ( ch = getchar (); isspace ( ch ); ch = getchar ()); } template < typename __Tp1 , typename ... __Tp2 > void read ( __Tp1 & x , __Tp2 & ... y ) { read ( x ), read ( y ...); } template < typename __Tp > void write ( __Tp x ) { if ( x < 0 ) putchar ( '-' ), x = - x ; if ( x > 9 ) write ( x / 10 ); putchar ( x % 10 + 48 ); } void write ( char ch ) { putchar ( ch ); } // void write(modint x) { write(x.val()); } void write ( const char * s ) { for (; * s ; ++ s ) putchar ( * s ); } template < typename __Tp1 , typename ... __Tp2 > void write ( __Tp1 x , __Tp2 ... y ) { write ( x ), write ( y ...); } const int si = ( 1 << 12 ) + 1 ; int n , m ; i64 t [ si ][ si ][ 4 ]; // \u5185\u5b58\u8fde\u7eed i64 ret [ 4 ] = { 0 }; inline int lowbit ( int x ) { return x & - x ; } void add ( int x , int y , int k ) { int xx = x , yy = y ; while ( x <= n ) { y = yy ; while ( y <= m ) { t [ x ][ y ][ 0 ] += k , t [ x ][ y ][ 1 ] += k * xx , t [ x ][ y ][ 2 ] += k * yy , t [ x ][ y ][ 3 ] += k * xx * yy ; y += lowbit ( y ); } x += lowbit ( x ); } } i64 query ( int x , int y ) { int xx = x , yy = y ; ret [ 0 ] = ret [ 1 ] = ret [ 2 ] = ret [ 3 ] = 0 ; while ( x ) { y = yy ; while ( y ) { ret [ 0 ] += t [ x ][ y ][ 0 ]; ret [ 1 ] += t [ x ][ y ][ 1 ]; ret [ 2 ] += t [ x ][ y ][ 2 ]; ret [ 3 ] += t [ x ][ y ][ 3 ]; y -= lowbit ( y ); } x -= lowbit ( x ); } return (( xx + 1 ) * ( yy + 1 ) * ret [ 0 ]) - (( yy + 1 ) * ret [ 1 ]) - (( xx + 1 ) * ret [ 2 ]) + ret [ 3 ]; } int main () { // cin.tie(0) -> sync_with_stdio(false); // cin.exceptions(cin.failbit | cin.badbit); read ( n , m ); int opt ; int a , b , c , d , k ; while ( ~ scanf ( \"%d\" , & opt )) { if ( opt == 1 ) { read ( a , b , c , d , k ); add ( a , b , k ), add ( a , d + 1 , - k ), add ( c + 1 , b , - k ), add ( c + 1 , d + 1 , k ); } else { read ( a , b , c , d ); write ( query ( c , d ) - query ( a - 1 , d ) - query ( c , b - 1 ) + query ( a - 1 , b - 1 ) , endl ); } } return 0 ; } \u611f\u89c9\u533a\u95f4\u4fee\u533a\u95f4\u67e5\uff0c\u77e9\u9635\u4fee\u77e9\u9635\u67e5\u90fd\u8fd0\u7528\u4e86\u67d0\u79cd\u6bd4\u8f83\u7ecf\u5178\u7684\u5957\u8def\uff0c\u4f3c\u4e4e\u53ef\u4ee5\u8bb0\u4e0b\u6765\u4ee5\u540e\u7528\uff1f \u5927\u6982\u5c31\u662f\u5728\u6c42\u548c/\u6c42\u4e58\u79ef\u6216\u8005\u5e72\u4ec0\u4e48\u7684\u65f6\u5019\uff0c\u5206\u79bb\u5305\u542b\u591a\u53d8\u91cf\u7684\u9879\uff0c\u628a\u6bcf\u4e2a\u53d8\u91cf\u90fd\u63d0\u51fa\u6765\u5355\u72ec\u7ef4\u62a4\uff0c\u8ba9\u53d8\u91cf\u548c\u53d8\u91cf\u4e4b\u95f4\u76f8\u4e92\u72ec\u7acb\uff0c\u4e0d\u540c\u65f6\u7ef4\u62a4\u591a\u4e2a\u53d8\u91cf\u5bfc\u81f4\u601d\u8def\u8fc7\u4e8e\u590d\u6742\u3002","title":"\u77e9\u9635\u4fee\u6539\u77e9\u9635\u67e5\u8be2"},{"location":"algor/ds/fenwick/#_13","text":"\u663e\u7136\u6700\u5927\u6700\u5c0f\u503c\u6ca1\u6709\u533a\u95f4\u53ef\u51cf\u6027\uff0c\u6240\u4ee5\u4e0d\u80fd\u7528\u524d\u7f00\u548c\u51cf\u3002 \u7136\u540e\u867d\u7136\u53ef\u4ee5\u6c42\u6700\u503c\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u633a\u9ebb\u70e6\u800c\u4e14\u4e0d\u662f\u5f88\u901a\u7528\u3002 \u9759\u6001\u6700\u503c\u4e0d\u5982\u76f4\u63a5\u5199 st \u8868\uff0c\u52a8\u6001\u6700\u503c\u5c31\u7b97\u53ea\u652f\u6301\u5355\u70b9\u4fee\u4e5f\u633a\u9ebb\u70e6\u3002 \u4e2a\u4eba\u89c9\u5f97\u6ca1\u6709\u5fc5\u8981\uff0c\u76f4\u63a5 segment tree \u5c31\u884c\u4e86\u3002 \u4e0d\u8fc7\u5982\u679c\u53ea\u662f\u95ee\u524d\u7f00\u6700\u503c+\u5355\u70b9\u4fee\u6539\u90a3\u80af\u5b9a\u5c31\u5199\u6811\u72b6\u6570\u7ec4\uff0c\u5b9e\u73b0\u8fc7\u4e8e\u7b80\u5355\u61d2\u5f97\u5199\uff0c\u53ef\u4ee5\u770b\u770b\u8fd9\u9053\u9898\u91cc\u5199\u7684\uff1a Optimal Partition","title":"\u533a\u95f4\u6700\u503c"},{"location":"algor/ds/fenwick/#_14","text":"","title":"\u5e94\u7528"},{"location":"algor/ds/fenwick/#_15","text":"\u5148\u79bb\u6563\u5316\uff0c\u5728\u503c\u57df\u4e0a\u5efa\u7acb\u6811\u72b6\u6570\u7ec4\uff08\u5c31\u662f\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u6876\uff09\u3002 \u626b\u63cf \\(n \\to 1\\) \uff0c\u5bf9\u4e8e \\(a(i)\\) \uff0c\u5b83\u80fd\u548c \\(a(i + 1) \\sim a(n)\\) \u6784\u6210\u7684\u9006\u5e8f\u5bf9\u4e2a\u6570\u5c31\u662f\u5f53\u524d\u6811\u72b6\u6570\u7ec4\u4e0a \\([1,a(i) - 1]\\) \u7684\u524d\u7f00\u548c\u3002 \u7d2f\u52a0\u7b54\u6848\u4e4b\u540e\uff0c\u6267\u884c \\(\\text{add}(a(i), 1)\\) \u5373\u53ef\u3002 \u590d\u6742\u5ea6 \\(O(n \\log n)\\) \uff0c\u6bd4 Merge Sort \u597d\u5199\u591a\u4e86\u3002 1 2 3 4 5 for ( int i = n ; i >= 1 ; -- i ) { ans += query ( a [ i ] - 1 ); add ( a [ i ], 1 ); } cout << ans << endl ;","title":"\u6c42\u9006\u5e8f\u5bf9"},{"location":"algor/ds/fenwick/#_16","text":"\u6c42\u6ee1\u8db3 \\(i < j < k, a(i) > a(j) > a(k)\\) \u7684 \\((i,j,k)\\) \u7684\u4e2a\u6570\u3002 \u548c\u4e8c\u5143\u9006\u5e8f\u5bf9\u672c\u8d28\u4e00\u6837\uff0c\u79bb\u6563\u5316\u4e4b\u540e\u7ef4\u62a4\u4e24\u4e2a\u6811\u72b6\u6570\u7ec4\uff0c\u4e00\u4e2a\u7ef4\u62a4\u9006\u5e8f\u5bf9\uff0c\u4e00\u4e2a\u7ef4\u62a4\u987a\u5e8f\u5bf9\uff0c\u6700\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e\u4e58\u6cd5\u539f\u7406\u4e00\u4e0b\u5373\u53ef\u3002","title":"\u4e09\u5143\u9006\u5e8f\u5bf9"},{"location":"algor/ds/hld/","text":"\u6982\u8ff0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6811\u94fe\u5256\u5206\u5206\u4e09\u79cd\uff0c\u4e00\u79cd\u662f\u8f7b\u91cd\u94fe\u5256\u5206\uff0c\u4e00\u79cd\u662f\u957f\u94fe\u5256\u5206\uff0c\u8fd8\u6709\u4e00\u79cd\u662f\u5b9e\u94fe\u5256\u5206\u3002 \u524d\u8005\u8f83\u4e3a\u5e38\u7528\uff0c\u4e2d\u95f4\u7684\u4f3c\u4e4e\u53ef\u4ee5\u62ff\u6765\u4f18\u5316 DP\uff08\u590d\u6742\u5ea6\u662f \\(\\sqrt{n}\\) \uff09\uff0c\u540e\u9762\u7684\u90a3\u4e00\u79cd\u7528\u4e8e LCT\u3002 \u4e0b\u6587\u7528\u91cd\u94fe\u5256\u5206\u4ee3\u66ff\u6811\u94fe\u5256\u5206\u3002 \u6cdb\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7b80\u5355\u6765\u8bf4\uff0c\u91cd\u94fe\u5256\u5206\u53ef\u4ee5\u628a\u6811\u4e0a\u7684\u4e00\u7c7b\u5bf9\u4e8e\u70b9\u6743\u7684\u64cd\u4f5c\u548c\u8be2\u95ee\u53d8\u4e3a\u5e8f\u5217/\u533a\u95f4\u4e0a\u7684\u64cd\u4f5c\u548c\u8be2\u95ee\u3002 \u4e00\u822c\u8fd9\u4e9b\u64cd\u4f5c\u5206\u4e24\u7c7b\uff1a \u5b50\u6811\u64cd\u4f5c\uff08\u5b50\u6811\u52a0\uff0c\u5b50\u6811\u67e5\uff09 \u8def\u5f84\u64cd\u4f5c\uff08\u8def\u5f84\u4e0a\u52a0\uff0c\u8def\u5f84\u4e0a\u67e5\uff09 \u91cd\u94fe\u5256\u5206\u53ef\u4ee5\u5355\u6b21 \\(\\text{O}(\\log n)\\) \u7684\u590d\u6742\u5ea6\uff0c\u5feb\u901f\u5c06\u5b50\u6811\u6216\u8005\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u8f6c\u5316\u4e3a\u4e00\u6bb5\u6216\u8005\u591a\u6bb5\u533a\u95f4\u3002 \u518d\u914d\u5408\u4ee5\u7ebf\u6bb5\u6811\uff0c\u6811\u72b6\u6570\u7ec4\u7b49 \\(\\log\\) \u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u4ee5\u5355\u6b21 \\(\\text{O}(\\log^2 n)\\) \u7684\u590d\u6742\u5ea6\u5b8c\u6210\u4fe1\u606f\u7684\u4fee\u6539\u548c\u67e5\u8be2\u3002 \u9884\u5904\u7406(\u5256\u5206\u8fc7\u7a0b) \u03c8(\uff40\u2207\u00b4)\u03c8 \u51e0\u4e2a\u6982\u5ff5 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5b9a\u4e49 \\(hson_u\\) \u8868\u793a \\(u\\) \u7684\u6240\u6709\u513f\u5b50\u4e2d\uff0c\u5b50\u6811\u5927\u5c0f\u6700\u5927\u7684\u90a3\u4e00\u4e2a\u513f\u5b50\uff0c\u79f0\u4e3a \u91cd\u513f\u5b50 \u3002 \uff08\u591a\u4e2a\u76f8\u540c\u4efb\u53d6\u4e00\u4e2a\u5373\u53ef\uff09 \u5176\u5b83\u7684\u513f\u5b50\u79f0\u4f5c \\(u\\) \u7684 \u8f7b\u513f\u5b50 \u3002 \u5b9a\u4e49 \u91cd\u8fb9 \u4e3a \\(u\\) \u5230 \\(hson_u\\) \u7684\u4e00\u6761\u8fb9\uff08 \\(u\\) \u4e0d\u9700\u8981\u662f\u5b83\u7684 \\(father\\) \u7684\u91cd\u513f\u5b50\uff09\u3002 \u5176\u4ed6\u7684\u8fb9\u79f0\u4f5c \u8f7b\u8fb9 \u3002 \u82e5\u5e72\u6761\u91cd\u8fb9\u9996\u5c3e\u76f8\u8fde\u5f62\u6210\u7684\u94fe\u79f0\u4e3a \u91cd\u94fe \u3002 \u843d\u5355\u7684\u8282\u70b9\u4e5f\u5f53\u4f5c\u91cd\u94fe\uff0c\u7136\u540e\u53ef\u4ee5\u6574\u68f5\u6811\u5c31\u88ab\u5256\u5206\u6210\u4e86 \u82e5\u5e72\u6761\u4e0d\u76f8\u4ea4\u7684\u91cd\u94fe \u3002 \u4f60\u77e5\u9053\u5904\u7406\u5b50\u6811\u4fe1\u606f\u53ef\u4ee5\u5229\u7528 dfs \u6811\u548c dfs \u5e8f\u7684\u6027\u8d28\uff0c\u5373\u662f\u4e00\u68f5\u5b50\u6811\u5185\u7684 \\(dfn\\) \u503c\u662f\u8fde\u7eed\u7684\u3002 \u6240\u4ee5\u6211\u4eec\u8fd8\u9700\u8981\u9884\u5904\u7406\u51fa \\(dfn\\) \uff0c\u5e76\u8bb0\u5f55\u6bcf\u4e2a \\(dfn\\) \u503c\u5bf9\u5e94\u7684\u8282\u70b9\u7f16\u53f7 \\(rnk\\) \u65b9\u4fbf\u7ebf\u6bb5\u6811\u7b49\u6570\u636e\u7ed3\u6784\u7684\u64cd\u4f5c\u3002 \u4e3a\u4e86\u4e4b\u540e\u5904\u7406\u65b9\u4fbf\uff0c\u8fd8\u9700\u8981\u5904\u7406 \\(u\\) \u7684\u5b50\u6811\u5927\u5c0f \\(siz_u\\) \uff0c\u7236\u4eb2\u8282\u70b9 \\(fat_u\\) \uff0c\u6df1\u5ea6 \\(dep_u\\) \uff0c\u4ee5\u53ca \\(u\\) \u6240\u5728\u7684\u91cd\u94fe\u4e0a\u6df1\u5ea6\u6700\u5c0f\u7684\u8282\u70b9 \\(top\\) \uff08\u5373\u4e3a\u94fe\u9876\uff09\u3002 \u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u9700\u8981\u5904\u7406\u8fd9\u4e9b\u4e1c\u897f\uff1a \\(fat, dep, siz, hson, top, dfn, rnk\\) \u4e00\u5f20\u56fe\uff08\u56fe\u6e90 OI-Wiki \uff09\uff1a \u51e0\u4e2a\u6027\u8d28 \u03c8(\uff40\u2207\u00b4)\u03c8 1.\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u90fd\u5c5e\u4e8e\u4e14\u4ec5\u5c5e\u4e8e\u4e00\u6761\u91cd\u94fe\u3002 \u8fd9\u4e2a\u6839\u636e\u4e0a\u9762\u6982\u5ff5\u91cc\u8bf4\u7684\uff1a \u843d\u5355\u7684\u8282\u70b9\u4e5f\u5f53\u4f5c\u91cd\u94fe\uff0c\u7136\u540e\u53ef\u4ee5\u6574\u68f5\u6811\u5c31\u88ab\u5256\u5206\u6210\u4e86\u82e5\u5e72\u6761\u4e0d\u76f8\u4ea4\u7684\u91cd\u94fe\u3002 \u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5f97\u5230\u3002 2.\u5b50\u6811\u5185\u7684 \\(dfn\\) \u662f\u8fde\u7eed\u7684 \u8fd9\u4e2a\u662f dfs \u5e8f\u7684\u6027\u8d28\uff0c\u6bd4\u8f83\u5bb9\u6613\u5f97\u5230\u3002 \u63a8\u8bba\uff1a \u5b50\u6811\u5185 \\(dfn\\) \u503c\u7684\u533a\u95f4\u5e94\u5f53\u662f \\([dfn_u, dfn_u + siz_u - 1]\\) \u3002 \u8fd9\u4e24\u4e2a\u7ed3\u8bba\u4f1a\u7528\u4e8e\u5b50\u6811\u64cd\u4f5c\u7684\u5904\u7406\u3002 3.\u540c\u4e00\u6761\u91cd\u94fe\u4e0a\u7684 \\(dfn\\) \u662f\u8fde\u7eed\u7684 \u8fd9\u4e2a\u662f\u91cd\u94fe\u5256\u5206\u672c\u8eab\u7684\u6027\u8d28\uff0c\u9700\u8981\u6211\u4eec dfs \u5904\u7406\u65f6 \u201c\u4f18\u5148\u201d dfs \u91cd\u513f\u5b50\uff0c\u7136\u540e\u518d \\(dfn\\) \u8f7b\u513f\u5b50\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u6309 \\(dfn\\) \u5e8f\u6392\u5e8f\u4e4b\u540e\u7684\u5e8f\u5217\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u4e00\u6761\u6761\u91cd\u94fe\u62fc\u63a5\u5728\u4e86\u4e00\u8d77\u3002 \u6240\u4ee5\u91cd\u94fe\u5256\u5206\u5b9e\u9645\u4e0a\u5c31\u662f \u201c\u6811\u4e0a\u95ee\u9898\u201d \u5e8f\u5217\u5316\u7684\u4e00\u4e2a\u5de5\u5177\u3002 4.\u7ecf\u8fc7\u4e00\u6761\u8f7b\u8fb9 \\((u\\to v)\\) \u7684\u65f6\u5019\uff0c \\(siz_v\\) \u7684\u5927\u5c0f\u5fc5\u7136\u662f \\(siz_u\\) \u7684\u4e8c\u5206\u4e4b\u4e00\uff0c\u53ef\u80fd\u8fd8\u5c11\u3002 \u6839\u636e\u8fd9\u4e2a\u7ed3\u8bba\uff0c\u628a\u4e00\u6761\u8def\u5f84\u4ece \\(\\texttt{LCA}\\) \u62c6\u5f00\u4ece\u4e24\u8fb9\u5206\u522b\u5f80\u4e0b\u8df3\u91cd\u94fe\uff0c\u8df3\u7684\u6b21\u6570\u4f1a\u5728 \\(\\text{O}(\\log n)\\) \u7ea7\u522b\u3002 \u6240\u4ee5\u6811\u4e0a\u4efb\u610f\u4e00\u6761\u8def\u5f84\u90fd\u53ef\u4ee5\u62c6\u6210 \\(\\text{O}(\\log n)\\) \u6761\u91cd\u94fe\u3002 \u4ee3\u7801\u5b9e\u73b0 \u03c8(\uff40\u2207\u00b4)\u03c8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 // \u5904\u7406\u91cd\u513f\u5b50,\u7236\u4eb2,\u6df1\u5ea6,\u5b50\u6811\u5927\u5c0f void dfs1 ( int u , int fa ) { int kot = 0 ; hson [ u ] = -1 , siz [ u ] = 1 ; fat [ u ] = fa , dep [ u ] = dep [ fa ] + 1 ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs1 ( v , u ), siz [ u ] += siz [ v ]; if ( siz [ v ] > kot ) kot = siz [ v ], hson [ u ] = v ; } } // \u5904\u7406 dfn,rnk,\u5e76\u8fdb\u884c\u91cd\u94fe\u5256\u5206\u3002 void dfs2 ( int u , int tp ) { top [ u ] = tp , dfn [ u ] = ++ tim , rnk [ tim ] = u ; if ( hson [ u ] == -1 ) return ; dfs2 ( hson [ u ], tp ); // \u5148 dfs \u91cd\u513f\u5b50,\u4fdd\u8bc1\u91cd\u94fe\u4e0a dfn \u8fde\u7eed,\u7ef4\u6301\u91cd\u94fe\u7684\u6027\u8d28 for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fat [ u ] || v == hson [ u ]) continue ; dfs2 ( v , v ); } } \u5b50\u6811\u64cd\u4f5c \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e2a\u76f8\u5bf9\u6bd4\u8f83\u7b80\u5355\uff0c\u76f4\u63a5\u5229\u7528 \\(dfn\\) \u7684\u6027\u8d28\u64cd\u4f5c\u5373\u53ef\u3002 \uff08\u57fa\u4e8e\u4e0a\u9762\u7684\u90a3\u4e2a\u63a8\u8bba\uff09 tr \u662f\u4e00\u9897\u7ebf\u6bb5\u6811\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5728\u4fe1\u606f\u6bd4\u8f83\u7b80\u5355\u7684\u65f6\u5019\u7528\u6811\u72b6\u6570\u7ec4\u3002 1 2 3 4 5 6 7 void add_subtree ( int u , int value ) { tr . update ( 1 , dfn [ u ], dfn [ u ] + siz [ u ] - 1 , value ); // \u5b50\u6811\u4ee3\u8868\u7684\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\u5206\u522b\u662f dfn[u], dfn[u] + siz[i] - 1; } int query_subtree ( int u ) { return tr . query ( 1 , dfn [ u ], dfn [ u ] + siz [ u ] - 1 ) % mod ; } \u8def\u5f84\u64cd\u4f5c \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e2a\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u8003\u8651\u4e0a\u9762\u6027\u8d28\u7684\u7b2c 4 \u6761\u3002 \u6211\u4eec\u53ef\u4ee5\u628a\u6811\u4e0a\u4efb\u610f\u4e00\u6761\u8def\u5f84\u62c6\u6210 \\(\\text{O}(\\log n)\\) \u6761\u91cd\u94fe\u3002 \u7136\u540e\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u770b\u6210\u662f\u4ece \\(\\texttt{LCA}\\) \u5f80\u4e24\u8fb9\u8d70\u3002 \u6211\u4eec\u8003\u8651\u5b83\u7684\u9006\u8fc7\u7a0b\uff0c\u4e5f\u5c31\u662f\u7c7b\u4f3c\u500d\u589e\u6c42 \\(\\texttt{LCA}\\) \u7684\u8fc7\u7a0b\u3002 \u6211\u4eec\u8ba9 \u5f53\u524d\u6240\u5728\u94fe\u9876\u6df1\u5ea6\u66f4\u5927\u7684\u8282\u70b9 \u4e0d\u65ad\u5411\u4e0a\u8df3\u91cd\u94fe\uff0c\u6bcf\u6b21\u8df3\u7684\u65f6\u5019\u5bf9\u4e8e \\(u\\) \u548c \\(top_u\\) \u8fdb\u884c\u64cd\u4f5c\u3002 \uff08\u6bd4\u5982 tr.update(1, dfn[top[u]], dfn[u], value) \u8fd9\u79cd\uff09 \u7136\u540e\u5f53 \\(u, v\\) \u5728\u540c\u4e00\u6761\u91cd\u94fe\u4e0a\u7684\u65f6\u5019\uff0c\u6211\u4eec\u76f4\u63a5\u4ee4 \\(u\\) \u4e3a\u6df1\u5ea6\u66f4\u5c0f\u7684\u8282\u70b9\uff0c\u7136\u540e\u5bf9\u7ef4\u62a4\u4fe1\u606f\u7684\u6570\u636e\u7ed3\u6784\u4e0a \\([dfn_u, dfn_v]\\) \u7684\u533a\u95f4\u8fdb\u884c\u64cd\u4f5c\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 // \u7c7b\u4f3c\u500d\u589e LCA \u7684\u8df3\u91cd\u94fe\u8fc7\u7a0b void add_path ( int u , int v , int value ) { while ( top [ u ] != top [ v ]) { if ( dep [ top [ u ]] < dep [ top [ v ]]) swap ( u , v ); // \u8ba9\u94fe\u9876\u6df1\u5ea6\u5927\u7684\u6765\u8df3 tr . update ( 1 , dfn [ top [ u ]], dfn [ u ], value ); // \u628a u \u5230\u94fe\u9876\u7684\u6743\u503c\u5168\u90e8\u4fee\u6539\u3002 u = fat [ top [ u ]]; // \u8df3\u5230\u94fe\u9876\u7684\u7236\u4eb2\u8282\u70b9\u3002 } if ( dep [ u ] > dep [ v ]) swap ( u , v ); tr . update ( 1 , dfn [ u ], dfn [ v ], value ); // \u4e00\u6761\u91cd\u94fe\u4e0a\u7684 dfn \u662f\u8fde\u7eed\u7684\u3002 } int query_path ( int u , int v ) { int ret = 0 ; while ( top [ u ] != top [ v ]) { if ( dep [ top [ u ]] < dep [ top [ v ]]) swap ( u , v ); ret = ( ret + tr . query ( 1 , dfn [ top [ u ]], dfn [ u ])) % mod ; u = fat [ top [ u ]]; } if ( dep [ u ] > dep [ v ]) swap ( u , v ); ret = ( ret + tr . query ( 1 , dfn [ u ], dfn [ v ])) % mod ; return ret % mod ; } \u6c42 LCA \u03c8(\uff40\u2207\u00b4)\u03c8 \u7c7b\u4f3c\u8def\u5f84\u64cd\u4f5c\u7684\u8fc7\u7a0b\u5373\u53ef\u3002 \u4e5f\u662f\u4e0d\u65ad\u8df3\u91cd\u94fe\uff0c\u7136\u540e\u8df3\u5230\u540c\u4e00\u6761\u91cd\u94fe\u4e0a\u4e4b\u540e\u6df1\u5ea6\u5c0f\u7684\u8282\u70b9\u5c31\u662f \\(\\texttt{LCA}\\) \u3002 \u5e38\u6570\u975e\u5e38\u5c0f\u3002 \u539f\u56e0\u662f\u901a\u5e38\u8df3\u91cd\u94fe\u7684\u65f6\u5019\uff0c\u91cd\u94fe\u4e2a\u6570\u4e0d\u4f1a\u5361\u6ee1 \\(\\text{O}(\\log n)\\) \u3002 \uff08\u9664\u975e\u62ff\u5b8c\u5168\u4e8c\u53c9\u6811\uff09\u3002 1 2 3 4 5 6 7 8 9 int lca ( int u , int v ) { while ( top [ u ] != top [ v ]) { if ( dep [ top [ u ]] < dep [ top [ v ]]) swap ( u , v ); u = fat [ top [ u ]]; } if ( dep [ u ] > dep [ v ]) swap ( u , v ); return u ; } \u63d0\u4e00\u5634\uff1a\u5176\u5b9e\u6211\u611f\u89c9 hld \u548c\u6811\u4e0a\u5dee\u5206\u7684\u5173\u7cfb\u76f8\u5f53\u4e8e\u6811\u72b6\u6570\u7ec4\u548c\u524d\u7f00\u548c\u7684\u5173\u7cfb XD\u3002","title":"\u8f7b\u91cd\u94fe\u5256\u5206"},{"location":"algor/ds/hld/#_1","text":"\u6811\u94fe\u5256\u5206\u5206\u4e09\u79cd\uff0c\u4e00\u79cd\u662f\u8f7b\u91cd\u94fe\u5256\u5206\uff0c\u4e00\u79cd\u662f\u957f\u94fe\u5256\u5206\uff0c\u8fd8\u6709\u4e00\u79cd\u662f\u5b9e\u94fe\u5256\u5206\u3002 \u524d\u8005\u8f83\u4e3a\u5e38\u7528\uff0c\u4e2d\u95f4\u7684\u4f3c\u4e4e\u53ef\u4ee5\u62ff\u6765\u4f18\u5316 DP\uff08\u590d\u6742\u5ea6\u662f \\(\\sqrt{n}\\) \uff09\uff0c\u540e\u9762\u7684\u90a3\u4e00\u79cd\u7528\u4e8e LCT\u3002 \u4e0b\u6587\u7528\u91cd\u94fe\u5256\u5206\u4ee3\u66ff\u6811\u94fe\u5256\u5206\u3002","title":"\u6982\u8ff0"},{"location":"algor/ds/hld/#_2","text":"\u7b80\u5355\u6765\u8bf4\uff0c\u91cd\u94fe\u5256\u5206\u53ef\u4ee5\u628a\u6811\u4e0a\u7684\u4e00\u7c7b\u5bf9\u4e8e\u70b9\u6743\u7684\u64cd\u4f5c\u548c\u8be2\u95ee\u53d8\u4e3a\u5e8f\u5217/\u533a\u95f4\u4e0a\u7684\u64cd\u4f5c\u548c\u8be2\u95ee\u3002 \u4e00\u822c\u8fd9\u4e9b\u64cd\u4f5c\u5206\u4e24\u7c7b\uff1a \u5b50\u6811\u64cd\u4f5c\uff08\u5b50\u6811\u52a0\uff0c\u5b50\u6811\u67e5\uff09 \u8def\u5f84\u64cd\u4f5c\uff08\u8def\u5f84\u4e0a\u52a0\uff0c\u8def\u5f84\u4e0a\u67e5\uff09 \u91cd\u94fe\u5256\u5206\u53ef\u4ee5\u5355\u6b21 \\(\\text{O}(\\log n)\\) \u7684\u590d\u6742\u5ea6\uff0c\u5feb\u901f\u5c06\u5b50\u6811\u6216\u8005\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u8f6c\u5316\u4e3a\u4e00\u6bb5\u6216\u8005\u591a\u6bb5\u533a\u95f4\u3002 \u518d\u914d\u5408\u4ee5\u7ebf\u6bb5\u6811\uff0c\u6811\u72b6\u6570\u7ec4\u7b49 \\(\\log\\) \u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u4ee5\u5355\u6b21 \\(\\text{O}(\\log^2 n)\\) \u7684\u590d\u6742\u5ea6\u5b8c\u6210\u4fe1\u606f\u7684\u4fee\u6539\u548c\u67e5\u8be2\u3002","title":"\u6cdb\u5316"},{"location":"algor/ds/hld/#_3","text":"","title":"\u9884\u5904\u7406(\u5256\u5206\u8fc7\u7a0b)"},{"location":"algor/ds/hld/#_4","text":"\u5b9a\u4e49 \\(hson_u\\) \u8868\u793a \\(u\\) \u7684\u6240\u6709\u513f\u5b50\u4e2d\uff0c\u5b50\u6811\u5927\u5c0f\u6700\u5927\u7684\u90a3\u4e00\u4e2a\u513f\u5b50\uff0c\u79f0\u4e3a \u91cd\u513f\u5b50 \u3002 \uff08\u591a\u4e2a\u76f8\u540c\u4efb\u53d6\u4e00\u4e2a\u5373\u53ef\uff09 \u5176\u5b83\u7684\u513f\u5b50\u79f0\u4f5c \\(u\\) \u7684 \u8f7b\u513f\u5b50 \u3002 \u5b9a\u4e49 \u91cd\u8fb9 \u4e3a \\(u\\) \u5230 \\(hson_u\\) \u7684\u4e00\u6761\u8fb9\uff08 \\(u\\) \u4e0d\u9700\u8981\u662f\u5b83\u7684 \\(father\\) \u7684\u91cd\u513f\u5b50\uff09\u3002 \u5176\u4ed6\u7684\u8fb9\u79f0\u4f5c \u8f7b\u8fb9 \u3002 \u82e5\u5e72\u6761\u91cd\u8fb9\u9996\u5c3e\u76f8\u8fde\u5f62\u6210\u7684\u94fe\u79f0\u4e3a \u91cd\u94fe \u3002 \u843d\u5355\u7684\u8282\u70b9\u4e5f\u5f53\u4f5c\u91cd\u94fe\uff0c\u7136\u540e\u53ef\u4ee5\u6574\u68f5\u6811\u5c31\u88ab\u5256\u5206\u6210\u4e86 \u82e5\u5e72\u6761\u4e0d\u76f8\u4ea4\u7684\u91cd\u94fe \u3002 \u4f60\u77e5\u9053\u5904\u7406\u5b50\u6811\u4fe1\u606f\u53ef\u4ee5\u5229\u7528 dfs \u6811\u548c dfs \u5e8f\u7684\u6027\u8d28\uff0c\u5373\u662f\u4e00\u68f5\u5b50\u6811\u5185\u7684 \\(dfn\\) \u503c\u662f\u8fde\u7eed\u7684\u3002 \u6240\u4ee5\u6211\u4eec\u8fd8\u9700\u8981\u9884\u5904\u7406\u51fa \\(dfn\\) \uff0c\u5e76\u8bb0\u5f55\u6bcf\u4e2a \\(dfn\\) \u503c\u5bf9\u5e94\u7684\u8282\u70b9\u7f16\u53f7 \\(rnk\\) \u65b9\u4fbf\u7ebf\u6bb5\u6811\u7b49\u6570\u636e\u7ed3\u6784\u7684\u64cd\u4f5c\u3002 \u4e3a\u4e86\u4e4b\u540e\u5904\u7406\u65b9\u4fbf\uff0c\u8fd8\u9700\u8981\u5904\u7406 \\(u\\) \u7684\u5b50\u6811\u5927\u5c0f \\(siz_u\\) \uff0c\u7236\u4eb2\u8282\u70b9 \\(fat_u\\) \uff0c\u6df1\u5ea6 \\(dep_u\\) \uff0c\u4ee5\u53ca \\(u\\) \u6240\u5728\u7684\u91cd\u94fe\u4e0a\u6df1\u5ea6\u6700\u5c0f\u7684\u8282\u70b9 \\(top\\) \uff08\u5373\u4e3a\u94fe\u9876\uff09\u3002 \u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u9700\u8981\u5904\u7406\u8fd9\u4e9b\u4e1c\u897f\uff1a \\(fat, dep, siz, hson, top, dfn, rnk\\) \u4e00\u5f20\u56fe\uff08\u56fe\u6e90 OI-Wiki \uff09\uff1a","title":"\u51e0\u4e2a\u6982\u5ff5"},{"location":"algor/ds/hld/#_5","text":"1.\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u90fd\u5c5e\u4e8e\u4e14\u4ec5\u5c5e\u4e8e\u4e00\u6761\u91cd\u94fe\u3002 \u8fd9\u4e2a\u6839\u636e\u4e0a\u9762\u6982\u5ff5\u91cc\u8bf4\u7684\uff1a \u843d\u5355\u7684\u8282\u70b9\u4e5f\u5f53\u4f5c\u91cd\u94fe\uff0c\u7136\u540e\u53ef\u4ee5\u6574\u68f5\u6811\u5c31\u88ab\u5256\u5206\u6210\u4e86\u82e5\u5e72\u6761\u4e0d\u76f8\u4ea4\u7684\u91cd\u94fe\u3002 \u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5f97\u5230\u3002 2.\u5b50\u6811\u5185\u7684 \\(dfn\\) \u662f\u8fde\u7eed\u7684 \u8fd9\u4e2a\u662f dfs \u5e8f\u7684\u6027\u8d28\uff0c\u6bd4\u8f83\u5bb9\u6613\u5f97\u5230\u3002 \u63a8\u8bba\uff1a \u5b50\u6811\u5185 \\(dfn\\) \u503c\u7684\u533a\u95f4\u5e94\u5f53\u662f \\([dfn_u, dfn_u + siz_u - 1]\\) \u3002 \u8fd9\u4e24\u4e2a\u7ed3\u8bba\u4f1a\u7528\u4e8e\u5b50\u6811\u64cd\u4f5c\u7684\u5904\u7406\u3002 3.\u540c\u4e00\u6761\u91cd\u94fe\u4e0a\u7684 \\(dfn\\) \u662f\u8fde\u7eed\u7684 \u8fd9\u4e2a\u662f\u91cd\u94fe\u5256\u5206\u672c\u8eab\u7684\u6027\u8d28\uff0c\u9700\u8981\u6211\u4eec dfs \u5904\u7406\u65f6 \u201c\u4f18\u5148\u201d dfs \u91cd\u513f\u5b50\uff0c\u7136\u540e\u518d \\(dfn\\) \u8f7b\u513f\u5b50\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u6309 \\(dfn\\) \u5e8f\u6392\u5e8f\u4e4b\u540e\u7684\u5e8f\u5217\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u4e00\u6761\u6761\u91cd\u94fe\u62fc\u63a5\u5728\u4e86\u4e00\u8d77\u3002 \u6240\u4ee5\u91cd\u94fe\u5256\u5206\u5b9e\u9645\u4e0a\u5c31\u662f \u201c\u6811\u4e0a\u95ee\u9898\u201d \u5e8f\u5217\u5316\u7684\u4e00\u4e2a\u5de5\u5177\u3002 4.\u7ecf\u8fc7\u4e00\u6761\u8f7b\u8fb9 \\((u\\to v)\\) \u7684\u65f6\u5019\uff0c \\(siz_v\\) \u7684\u5927\u5c0f\u5fc5\u7136\u662f \\(siz_u\\) \u7684\u4e8c\u5206\u4e4b\u4e00\uff0c\u53ef\u80fd\u8fd8\u5c11\u3002 \u6839\u636e\u8fd9\u4e2a\u7ed3\u8bba\uff0c\u628a\u4e00\u6761\u8def\u5f84\u4ece \\(\\texttt{LCA}\\) \u62c6\u5f00\u4ece\u4e24\u8fb9\u5206\u522b\u5f80\u4e0b\u8df3\u91cd\u94fe\uff0c\u8df3\u7684\u6b21\u6570\u4f1a\u5728 \\(\\text{O}(\\log n)\\) \u7ea7\u522b\u3002 \u6240\u4ee5\u6811\u4e0a\u4efb\u610f\u4e00\u6761\u8def\u5f84\u90fd\u53ef\u4ee5\u62c6\u6210 \\(\\text{O}(\\log n)\\) \u6761\u91cd\u94fe\u3002","title":"\u51e0\u4e2a\u6027\u8d28"},{"location":"algor/ds/hld/#_6","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 // \u5904\u7406\u91cd\u513f\u5b50,\u7236\u4eb2,\u6df1\u5ea6,\u5b50\u6811\u5927\u5c0f void dfs1 ( int u , int fa ) { int kot = 0 ; hson [ u ] = -1 , siz [ u ] = 1 ; fat [ u ] = fa , dep [ u ] = dep [ fa ] + 1 ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs1 ( v , u ), siz [ u ] += siz [ v ]; if ( siz [ v ] > kot ) kot = siz [ v ], hson [ u ] = v ; } } // \u5904\u7406 dfn,rnk,\u5e76\u8fdb\u884c\u91cd\u94fe\u5256\u5206\u3002 void dfs2 ( int u , int tp ) { top [ u ] = tp , dfn [ u ] = ++ tim , rnk [ tim ] = u ; if ( hson [ u ] == -1 ) return ; dfs2 ( hson [ u ], tp ); // \u5148 dfs \u91cd\u513f\u5b50,\u4fdd\u8bc1\u91cd\u94fe\u4e0a dfn \u8fde\u7eed,\u7ef4\u6301\u91cd\u94fe\u7684\u6027\u8d28 for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fat [ u ] || v == hson [ u ]) continue ; dfs2 ( v , v ); } }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"algor/ds/hld/#_7","text":"\u8fd9\u4e2a\u76f8\u5bf9\u6bd4\u8f83\u7b80\u5355\uff0c\u76f4\u63a5\u5229\u7528 \\(dfn\\) \u7684\u6027\u8d28\u64cd\u4f5c\u5373\u53ef\u3002 \uff08\u57fa\u4e8e\u4e0a\u9762\u7684\u90a3\u4e2a\u63a8\u8bba\uff09 tr \u662f\u4e00\u9897\u7ebf\u6bb5\u6811\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5728\u4fe1\u606f\u6bd4\u8f83\u7b80\u5355\u7684\u65f6\u5019\u7528\u6811\u72b6\u6570\u7ec4\u3002 1 2 3 4 5 6 7 void add_subtree ( int u , int value ) { tr . update ( 1 , dfn [ u ], dfn [ u ] + siz [ u ] - 1 , value ); // \u5b50\u6811\u4ee3\u8868\u7684\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\u5206\u522b\u662f dfn[u], dfn[u] + siz[i] - 1; } int query_subtree ( int u ) { return tr . query ( 1 , dfn [ u ], dfn [ u ] + siz [ u ] - 1 ) % mod ; }","title":"\u5b50\u6811\u64cd\u4f5c"},{"location":"algor/ds/hld/#_8","text":"\u8fd9\u4e2a\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u8003\u8651\u4e0a\u9762\u6027\u8d28\u7684\u7b2c 4 \u6761\u3002 \u6211\u4eec\u53ef\u4ee5\u628a\u6811\u4e0a\u4efb\u610f\u4e00\u6761\u8def\u5f84\u62c6\u6210 \\(\\text{O}(\\log n)\\) \u6761\u91cd\u94fe\u3002 \u7136\u540e\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u770b\u6210\u662f\u4ece \\(\\texttt{LCA}\\) \u5f80\u4e24\u8fb9\u8d70\u3002 \u6211\u4eec\u8003\u8651\u5b83\u7684\u9006\u8fc7\u7a0b\uff0c\u4e5f\u5c31\u662f\u7c7b\u4f3c\u500d\u589e\u6c42 \\(\\texttt{LCA}\\) \u7684\u8fc7\u7a0b\u3002 \u6211\u4eec\u8ba9 \u5f53\u524d\u6240\u5728\u94fe\u9876\u6df1\u5ea6\u66f4\u5927\u7684\u8282\u70b9 \u4e0d\u65ad\u5411\u4e0a\u8df3\u91cd\u94fe\uff0c\u6bcf\u6b21\u8df3\u7684\u65f6\u5019\u5bf9\u4e8e \\(u\\) \u548c \\(top_u\\) \u8fdb\u884c\u64cd\u4f5c\u3002 \uff08\u6bd4\u5982 tr.update(1, dfn[top[u]], dfn[u], value) \u8fd9\u79cd\uff09 \u7136\u540e\u5f53 \\(u, v\\) \u5728\u540c\u4e00\u6761\u91cd\u94fe\u4e0a\u7684\u65f6\u5019\uff0c\u6211\u4eec\u76f4\u63a5\u4ee4 \\(u\\) \u4e3a\u6df1\u5ea6\u66f4\u5c0f\u7684\u8282\u70b9\uff0c\u7136\u540e\u5bf9\u7ef4\u62a4\u4fe1\u606f\u7684\u6570\u636e\u7ed3\u6784\u4e0a \\([dfn_u, dfn_v]\\) \u7684\u533a\u95f4\u8fdb\u884c\u64cd\u4f5c\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 // \u7c7b\u4f3c\u500d\u589e LCA \u7684\u8df3\u91cd\u94fe\u8fc7\u7a0b void add_path ( int u , int v , int value ) { while ( top [ u ] != top [ v ]) { if ( dep [ top [ u ]] < dep [ top [ v ]]) swap ( u , v ); // \u8ba9\u94fe\u9876\u6df1\u5ea6\u5927\u7684\u6765\u8df3 tr . update ( 1 , dfn [ top [ u ]], dfn [ u ], value ); // \u628a u \u5230\u94fe\u9876\u7684\u6743\u503c\u5168\u90e8\u4fee\u6539\u3002 u = fat [ top [ u ]]; // \u8df3\u5230\u94fe\u9876\u7684\u7236\u4eb2\u8282\u70b9\u3002 } if ( dep [ u ] > dep [ v ]) swap ( u , v ); tr . update ( 1 , dfn [ u ], dfn [ v ], value ); // \u4e00\u6761\u91cd\u94fe\u4e0a\u7684 dfn \u662f\u8fde\u7eed\u7684\u3002 } int query_path ( int u , int v ) { int ret = 0 ; while ( top [ u ] != top [ v ]) { if ( dep [ top [ u ]] < dep [ top [ v ]]) swap ( u , v ); ret = ( ret + tr . query ( 1 , dfn [ top [ u ]], dfn [ u ])) % mod ; u = fat [ top [ u ]]; } if ( dep [ u ] > dep [ v ]) swap ( u , v ); ret = ( ret + tr . query ( 1 , dfn [ u ], dfn [ v ])) % mod ; return ret % mod ; }","title":"\u8def\u5f84\u64cd\u4f5c"},{"location":"algor/ds/hld/#lca","text":"\u7c7b\u4f3c\u8def\u5f84\u64cd\u4f5c\u7684\u8fc7\u7a0b\u5373\u53ef\u3002 \u4e5f\u662f\u4e0d\u65ad\u8df3\u91cd\u94fe\uff0c\u7136\u540e\u8df3\u5230\u540c\u4e00\u6761\u91cd\u94fe\u4e0a\u4e4b\u540e\u6df1\u5ea6\u5c0f\u7684\u8282\u70b9\u5c31\u662f \\(\\texttt{LCA}\\) \u3002 \u5e38\u6570\u975e\u5e38\u5c0f\u3002 \u539f\u56e0\u662f\u901a\u5e38\u8df3\u91cd\u94fe\u7684\u65f6\u5019\uff0c\u91cd\u94fe\u4e2a\u6570\u4e0d\u4f1a\u5361\u6ee1 \\(\\text{O}(\\log n)\\) \u3002 \uff08\u9664\u975e\u62ff\u5b8c\u5168\u4e8c\u53c9\u6811\uff09\u3002 1 2 3 4 5 6 7 8 9 int lca ( int u , int v ) { while ( top [ u ] != top [ v ]) { if ( dep [ top [ u ]] < dep [ top [ v ]]) swap ( u , v ); u = fat [ top [ u ]]; } if ( dep [ u ] > dep [ v ]) swap ( u , v ); return u ; } \u63d0\u4e00\u5634\uff1a\u5176\u5b9e\u6211\u611f\u89c9 hld \u548c\u6811\u4e0a\u5dee\u5206\u7684\u5173\u7cfb\u76f8\u5f53\u4e8e\u6811\u72b6\u6570\u7ec4\u548c\u524d\u7f00\u548c\u7684\u5173\u7cfb XD\u3002","title":"\u6c42 LCA"},{"location":"algor/ds/li-chao-tree/","text":"\u8fd9\u91cc\u7b97\u662f\u601d\u8003\u4e00\u4e0b\u674e\u8d85tree\u7684\u8fc7\u7a0b\uff0c\u4ee5\u540e\u5199\u677f\u5b50\u4e4b\u524d\u5c31\u8fd9\u4e48\u5e72\u3002 \u6982\u8ff0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u674e\u8d85\u6811\u662f\u4e00\u79cd\u53d8\u79cd\u7ebf\u6bb5\u6811\uff0c\u53ef\u4ee5\u52a8\u6001\u7ef4\u62a4\u4e00\u5806\u4e00\u6b21\u51fd\u6570\uff08\u53ef\u4ee5\u6709\u5b9a\u4e49\u57df\u7684\u9650\u5236\uff09\u3002 \u7136\u540e\u53ef\u4ee5\u8be2\u95ee\u8fd9\u4e9b\u4e00\u6b21\u51fd\u6570\u5728\u67d0\u4e2a \\(x\\) \u5750\u6807\u4e0b\u7684\u6700\u5927 \\(y\\) \u503c\u3002 \u5176\u5927\u6982\u601d\u60f3\u662f\u7ef4\u62a4\u6bcf\u4e2a\u533a\u95f4 \\([l,r]\\) \u4e2d\u70b9\u4f4d\u7f6e\u7684\u53ef\u4ee5\u4ea7\u751f\u6700\u5927 \\(y\\) \u7684\u7ebf\u6bb5\uff08\u7684\u7f16\u53f7\uff09\u3002\uff08\u8fd9\u4e2a\u4e1c\u897f\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a Lazytag\uff09 \u6ce8\u610f\u5230\u8fd9\u4e2a\u4e1c\u897f\u96be\u4ee5\u5408\u5e76\uff0cPushup \u548c Pushdown \u6bd4\u8f83 hard\uff0c\u4e14\u6211\u4eec\u6ca1\u6709\u521d\u59cb\u72b6\u6001\uff0c\u662f\u4e00\u4e2a\u4e00\u4e2a\u63d2\u5165\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u7528\u7684\u662f\u6807\u8bb0\u6c38\u4e45\u5316\u7684\u601d\u60f3\uff0c\u7ef4\u62a4\u4e14\u53ea\u7ef4\u62a4 Lazytag\u3002 \u6807\u8bb0\u6c38\u4e45\u5316\u7684\u539f\u7406\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u4fee\u6539\u65f6\u4e00\u8def\u66f4\u6539\u88ab\u5f71\u54cd\u5230\u7684\u70b9\uff0c\u8be2\u95ee\u65f6\u5219\u4e00\u8def\u7d2f\u52a0\u8def\u4e0a\u7684\u6807\u8bb0\uff0c\u4ece\u800c\u7701\u53bb\u4e0b\u4f20\u6807\u8bb0\u7684\u64cd\u4f5c\u3002 \u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u7ebf\u6bb5\u7684\u65f6\u5019\uff0c\u628a\u7ef4\u62a4\u88ab\u5b83\u5b9a\u4e49\u57df\u5b8c\u6574\u5305\u542b\u7684\u533a\u95f4\u7684\u8282\u70b9\u7684\u4fe1\u606f\u5168\u90e8\u66f4\u65b0\uff08 \\(O(\\log n)\\) \u4e2a\uff09\uff0c\u9012\u5f52\u5206\u5272\u627e\u5230\u8fd9 \\(O(\\log n)\\) \u4e2a\u533a\u95f4\u7684\u590d\u6742\u5ea6\u662f \\(O(\\log n)\\) \u7684\uff0c\u7c7b\u4f3c\u666e\u901a\u7ebf\u6bb5\u6811\u533a\u95f4\u67e5\u8be2\u3002 \u7136\u540e\uff0c\u66f4\u65b0\u4e00\u4e2a\u8282\u70b9\u7684\u4fe1\u606f\u7684\u65f6\u5019\u5bf9\u4e8e\u5f53\u524d\u8282\u70b9\uff0c\u5206\u7c7b\u8ba8\u8bba\u4e00\u4e0b\uff0c\u5904\u7406\u65b0\u52a0\u5165\u7684\u7ebf\u6bb5\u5bf9\u4e8e\u5f53\u524d\u533a\u95f4\u7684\u4fe1\u606f\u7684\u5f71\u54cd\uff0c\u5e76\u4e14\u9012\u5f52\u5230\u5b50\u6811\u5904\u7406\u4e00\u76f4\u5230\u8fb9\u754c\uff0c\u8fd9\u4e2a\u590d\u6742\u5ea6\u662f \\(O(\\log n)\\) \u7684\uff0c\u56e0\u4e3a\u5f53\u524d\u7ebf\u6bb5\u548c\u533a\u95f4\u5df2\u7ecf\u5b58\u4e86\u7684\u7ebf\u6bb5\u7684\u4ea4\u70b9\u6700\u591a\u4e00\u4e2a\uff0c\u53ea\u4f1a\u9012\u5f52\u4e00\u8fb9\u3002 \u5177\u4f53\u5206\u7c7b\u5c31\u8fd9\u4e48\u641e\uff1a \u5177\u4f53\u5206\u7c7b\u8ba8\u8bba\u65b9\u5f0f\uff08by dwt\uff09 \u5047\u8bbe\u73b0\u5728\u6211\u4eec\u9700\u8981\u63d2\u5165\u4e00\u6761\u7ebf\u6bb5 \\(f\\) \uff0c\u5728\u8fd9\u6761\u7ebf\u6bb5\u5b8c\u6574\u8986\u76d6\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\u4ee3\u8868\u7684\u533a\u95f4\u4e2d\uff0c\u67d0\u4e9b\u533a\u95f4\u7684\u6700\u4f18\u7ebf\u6bb5\u53ef\u80fd\u53d1\u751f\u6539\u53d8\u3002 \u8003\u8651\u67d0\u4e2a\u88ab\u65b0\u7ebf\u6bb5 \\(f\\) \u5b8c\u6574\u8986\u76d6\u7684\u533a\u95f4\uff0c\u82e5\u8be5\u533a\u95f4\u65e0\u6700\u4f18\u7ebf\u6bb5\uff0c\u5219\u8be5\u7ebf\u6bb5\u53ef\u4ee5\u76f4\u63a5\u6210\u4e3a\u6700\u4f18\u7ebf\u6bb5\u3002 \u5426\u5219\uff0c\u8bbe\u8be5\u533a\u95f4\u7684\u4e2d\u70b9\u4e3a \\(m\\) \uff0c\u6211\u4eec\u62ff\u65b0\u7ebf\u6bb5 \\(f\\) \u5728\u4e2d\u70b9\u5904\u7684\u503c\u4e0e\u539f\u6700\u4f18\u7ebf\u6bb5 \\(g\\) \u5728\u4e2d\u70b9\u5904\u7684\u503c\u4f5c\u6bd4\u8f83\u3002 \u5982\u679c\u65b0\u7ebf\u6bb5 \\(f\\) \u66f4\u4f18\uff0c\u5219\u5c06 \\(f\\) \u548c \\(g\\) \u4ea4\u6362\u3002\u90a3\u4e48\u73b0\u5728\u8003\u8651\u5728\u4e2d\u70b9\u5904 \\(f\\) \u4e0d\u5982 \\(g\\) \u4f18\u7684\u60c5\u51b5\uff1a \u82e5\u5728\u5de6\u7aef\u70b9\u5904 \\(f\\) \u66f4\u4f18\uff0c\u90a3\u4e48 \\(f\\) \u548c \\(g\\) \u5fc5\u7136\u5728\u5de6\u534a\u533a\u95f4\u4e2d\u4ea7\u751f\u4e86\u4ea4\u70b9\uff0c\u9012\u5f52\u5230\u5de6\u513f\u5b50\u4e2d\u8fdb\u884c\u63d2\u5165\uff1b \u82e5\u5728\u53f3\u7aef\u70b9\u5904 \\(f\\) \u66f4\u4f18\uff0c\u90a3\u4e48 \\(f\\) \u548c \\(g\\) \u5fc5\u7136\u5728\u53f3\u534a\u533a\u95f4\u4e2d\u4ea7\u751f\u4e86\u4ea4\u70b9\uff0c\u9012\u5f52\u5230\u53f3\u513f\u5b50\u4e2d\u8fdb\u884c\u63d2\u5165\u3002 \u82e5\u5728\u5de6\u53f3\u7aef\u70b9\u5904 \\(g\\) \u90fd\u66f4\u4f18\uff0c\u90a3\u4e48 \\(f\\) \u4e0d\u53ef\u80fd\u6210\u4e3a\u7b54\u6848\uff0c\u4e0d\u9700\u8981\u7ee7\u7eed\u4e0b\u4f20\u3002 \u6ce8\u610f\u6709\u4e00\u4e2a\u70b9\u662f\uff0c\u5982\u679c\u63d2\u5165\u4e86\u4e00\u6761\u5e73\u884c\u4e8e y \u8f74\u7684\u7ebf\u6bb5 \\((x, y_0) \\to (x,y_1), (y_0 \\le y_1)\\) \uff0c\u6211\u4eec\u9700\u8981\u628a\u5b83\u5f53\u6210\u4e00\u4e2a\u70b9\u63d2\u5165\u8fdb\u6765\uff0c\u56e0\u4e3a\u6211\u4eec\u7ef4\u62a4\u7684\u4fe1\u606f\u662f Max\uff0c\u6240\u4ee5\u53d6 \\(y_1\\) \u8fd9\u4e2a\u503c\u5e26\u8fdb\u53bb\u5c31\u884c\u4e86\u3002 \u8be2\u95ee\u76f4\u63a5\u9012\u5f52\u5230\u5bf9\u5e94\u53f6\u5b50\u8282\u70b9\uff0c\u7d2f\u8ba1\u8def\u5f84\u4e0a\u7684\u4fe1\u606f\u5c31\u884c\u4e86\u3002 \u63d2\u5165\u590d\u6742\u5ea6\u4e24\u4e2a log\uff0c\u67e5\u8be2\u4e00\u4e2a log\u3002 \u5e94\u7528 \u03c8(\uff40\u2207\u00b4)\u03c8 [HEOI2013] Segment \u03c8(\uff40\u2207\u00b4)\u03c8 \u8981\u6c42\u5728\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e0b\u7ef4\u62a4\u4e24\u4e2a\u64cd\u4f5c\uff08\u5f3a\u5236\u5728\u7ebf\uff09\uff1a \u5728\u5e73\u9762\u4e0a\u52a0\u5165\u4e00\u6761\u7ebf\u6bb5\u3002\u8bb0\u7b2c \\(i\\) \u6761\u88ab\u63d2\u5165\u7684\u7ebf\u6bb5\u7684\u6807\u53f7\u4e3a \\(i\\) \uff0c\u8be5\u7ebf\u6bb5\u7684\u4e24\u4e2a\u7aef\u70b9\u5206\u522b\u4e3a \\((x_0,y_0)\\) \uff0c \\((x_1,y_1)\\) \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6570 \\(k\\) \uff0c\u8be2\u95ee\u4e0e\u76f4\u7ebf \\(x = k\\) \u76f8\u4ea4\u7684\u7ebf\u6bb5\u4e2d\uff0c\u4ea4\u70b9\u7eb5\u5750\u6807\u6700\u5927\u7684\u7ebf\u6bb5\u7684\u7f16\u53f7\uff08\u82e5\u6709\u591a\u6761\u7ebf\u6bb5\u4e0e\u67e5\u8be2\u76f4\u7ebf\u7684\u4ea4\u70b9\u7eb5\u5750\u6807\u90fd\u662f\u6700\u5927\u7684\uff0c\u5219\u8f93\u51fa\u7f16\u53f7\u6700\u5c0f\u7684\u7ebf\u6bb5\uff09\u3002\u7279\u522b\u5730\uff0c\u82e5\u4e0d\u5b58\u5728\u7ebf\u6bb5\u4e0e\u7ed9\u5b9a\u76f4\u7ebf\u76f8\u4ea4\uff0c\u8f93\u51fa \\(0\\) \u3002 \u6570\u636e\u6ee1\u8db3\uff1a\u64cd\u4f5c\u603b\u6570 \\(1 \\leq n \\leq 10^5\\) \uff0c \\(1 \\leq k, x_0, x_1 \\leq 39989\\) \uff0c \\(1 \\leq y_0, y_1 \\leq 10^9\\) \u3002 \u6a21\u677f\u9898\uff0c\u76f4\u63a5\u4e0a\u4ee3\u7801\uff1a \u8fd9\u9053\u9898\u6bd4\u8f83\u7279\u6b8a\uff0c\u8981\u6c42\u8f93\u51fa\u7684\u4e0d\u662f\u503c\u800c\u662f\u7f16\u53f7\uff0c\u4e14\u8981\u6c42\u7f16\u53f7\u5c3d\u91cf\u5c0f\u3002 Code \u6709\u4e00\u4e2a\u8981\u6ce8\u610f\u7684\u70b9\uff0cbool \u8f6c\u6362\u7684\u65f6\u5019\u53ea\u8981\u4e0d\u662f 0 \u5c31\u662f true \uff01\uff01\uff01\uff01 \u56e0\u4e3a\u8fd9\u4e2a\u88ab\u5751\u4e86 5 hours\uff01\uff01\uff01\uff01\uff01\uff01\uff01 \u611f\u8c22 Uoj \u7fa4\u53cb\uff0c\u611f\u8c22\u53ef\u7231 do_while_true\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <utility> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; // using i64 = long long; using ldb = long double ; using pdi = std :: pair < ldb , int > ; const ldb eps = 1e-9 ; const int mod1 = 39989 ; const int mod2 = 1e9 ; const int si = 1e5 + 10 ; int n , tot = 0 ; struct Line { double k , b ; } a [ si ]; ldb calc ( int idx , int x ) { return ( a [ idx ]. k * x + a [ idx ]. b ); } void add ( int x , int y , int xx , int yy ) { ++ tot ; if ( x == xx ) a [ tot ]. k = 0 , a [ tot ]. b = max ( y , yy ); else a [ tot ]. k = ( ldb )(( 1.0 * ( yy - y )) / ( 1.0 * ( xx - x ))), a [ tot ]. b = y - a [ tot ]. k * x ; } int cmp ( ldb x , ldb y ) { if (( x - y ) > eps ) return 1 ; // Greater. else if (( y - x ) > eps ) return -1 ; // Less return 0 ; } pdi Max ( pdi x , pdi y ) { if ( cmp ( x . first , y . first ) == 1 ) return x ; else if ( cmp ( y . first , x . first ) == 1 ) return y ; return ( x . second < y . second ) ? x : y ; } struct LichaoTree { int id [ si << 2 ]; void modify ( int p , int l , int r , int u ) { int & v = id [ p ], mid = ( l + r ) >> 1 ; if ( cmp ( calc ( u , mid ), calc ( v , mid )) == 1 ) swap ( u , v ); int boundl = cmp ( calc ( u , l ), calc ( v , l )); int boundr = cmp ( calc ( u , r ), calc ( v , r )); if ( boundl == 1 || ( ! boundl && u < v )) modify ( p << 1 , l , mid , u ); if ( boundr == 1 || ( ! boundr && u < v )) modify ( p << 1 | 1 , mid + 1 , r , u ); } void update ( int p , int nl , int nr , int l , int r , int u ) { if ( l <= nl && nr <= r ) return modify ( p , nl , nr , u ); int mid = ( nl + nr ) >> 1 ; if ( l <= mid ) update ( p << 1 , nl , mid , l , r , u ); if ( r > mid ) update ( p << 1 | 1 , mid + 1 , nr , l , r , u ); } pdi query ( int p , int l , int r , int x ) { if ( x < l || r < x ) return { 0.0 , 0 }; ldb ret = calc ( id [ p ], x ), mid = ( l + r ) >> 1 ; if ( l == r ) return { ret , id [ p ]}; return Max ({ ret , id [ p ]}, Max ( query ( p << 1 , l , mid , x ), query ( p << 1 | 1 , mid + 1 , r , x ))); } } tr ; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int lasans = 0 ; auto decode = [ & ]( int & v , const int mod ) { v = ( v + lasans - 1 + mod ) % mod + 1 ; }; cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { int opt ; cin >> opt ; if ( opt == 0 ) { int k ; cin >> k , decode ( k , mod1 ); cout << ( lasans = tr . query ( 1 , 1 , mod1 , k ). second ) << endl ; } if ( opt == 1 ) { int x , y , xx , yy ; cin >> x >> y >> xx >> yy ; decode ( x , mod1 ), decode ( xx , mod1 ), decode ( y , mod2 ), decode ( yy , mod2 ); if ( x > xx ) swap ( x , xx ), swap ( y , yy ); add ( x , y , xx , yy ), tr . update ( 1 , 1 , mod1 , x , xx , tot ); } } return 0 ; } \u7ef4\u62a4\u51f8\u58f3 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u73a9\u610f\u513f\uff0c\u8c14\u8c14\uff0c\u5c31\u76f4\u63a5\u628a\u6240\u6709\u7ebf\u6bb5\u6254\u4e0a\u53bb\u7136\u540e\u95ee\u9898\u8f6c\u5316\u4e3a\u8be2\u95ee Min/Max\uff0c\u5c31\u5f88\u597d\u505a\u4e86\u3002 \u7406\u6240\u5f53\u7136\u7684\uff0c\u8fd9\u4e1c\u897f\u8fd8\u53ef\u4ee5\u7528\u4e8e\u659c\u7387\u4f18\u5316\u3002 \u4f46\u662f\u8fd9\u4e2a\u6709\u65f6\u95f4\u518d\u6765\u5199\u5427\uff0c\u653e\u5728\u8fd9\u91cc\u3002","title":"\u674e\u8d85\u7ebf\u6bb5\u6811"},{"location":"algor/ds/li-chao-tree/#_1","text":"\u674e\u8d85\u6811\u662f\u4e00\u79cd\u53d8\u79cd\u7ebf\u6bb5\u6811\uff0c\u53ef\u4ee5\u52a8\u6001\u7ef4\u62a4\u4e00\u5806\u4e00\u6b21\u51fd\u6570\uff08\u53ef\u4ee5\u6709\u5b9a\u4e49\u57df\u7684\u9650\u5236\uff09\u3002 \u7136\u540e\u53ef\u4ee5\u8be2\u95ee\u8fd9\u4e9b\u4e00\u6b21\u51fd\u6570\u5728\u67d0\u4e2a \\(x\\) \u5750\u6807\u4e0b\u7684\u6700\u5927 \\(y\\) \u503c\u3002 \u5176\u5927\u6982\u601d\u60f3\u662f\u7ef4\u62a4\u6bcf\u4e2a\u533a\u95f4 \\([l,r]\\) \u4e2d\u70b9\u4f4d\u7f6e\u7684\u53ef\u4ee5\u4ea7\u751f\u6700\u5927 \\(y\\) \u7684\u7ebf\u6bb5\uff08\u7684\u7f16\u53f7\uff09\u3002\uff08\u8fd9\u4e2a\u4e1c\u897f\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a Lazytag\uff09 \u6ce8\u610f\u5230\u8fd9\u4e2a\u4e1c\u897f\u96be\u4ee5\u5408\u5e76\uff0cPushup \u548c Pushdown \u6bd4\u8f83 hard\uff0c\u4e14\u6211\u4eec\u6ca1\u6709\u521d\u59cb\u72b6\u6001\uff0c\u662f\u4e00\u4e2a\u4e00\u4e2a\u63d2\u5165\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u7528\u7684\u662f\u6807\u8bb0\u6c38\u4e45\u5316\u7684\u601d\u60f3\uff0c\u7ef4\u62a4\u4e14\u53ea\u7ef4\u62a4 Lazytag\u3002 \u6807\u8bb0\u6c38\u4e45\u5316\u7684\u539f\u7406\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u4fee\u6539\u65f6\u4e00\u8def\u66f4\u6539\u88ab\u5f71\u54cd\u5230\u7684\u70b9\uff0c\u8be2\u95ee\u65f6\u5219\u4e00\u8def\u7d2f\u52a0\u8def\u4e0a\u7684\u6807\u8bb0\uff0c\u4ece\u800c\u7701\u53bb\u4e0b\u4f20\u6807\u8bb0\u7684\u64cd\u4f5c\u3002 \u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u7ebf\u6bb5\u7684\u65f6\u5019\uff0c\u628a\u7ef4\u62a4\u88ab\u5b83\u5b9a\u4e49\u57df\u5b8c\u6574\u5305\u542b\u7684\u533a\u95f4\u7684\u8282\u70b9\u7684\u4fe1\u606f\u5168\u90e8\u66f4\u65b0\uff08 \\(O(\\log n)\\) \u4e2a\uff09\uff0c\u9012\u5f52\u5206\u5272\u627e\u5230\u8fd9 \\(O(\\log n)\\) \u4e2a\u533a\u95f4\u7684\u590d\u6742\u5ea6\u662f \\(O(\\log n)\\) \u7684\uff0c\u7c7b\u4f3c\u666e\u901a\u7ebf\u6bb5\u6811\u533a\u95f4\u67e5\u8be2\u3002 \u7136\u540e\uff0c\u66f4\u65b0\u4e00\u4e2a\u8282\u70b9\u7684\u4fe1\u606f\u7684\u65f6\u5019\u5bf9\u4e8e\u5f53\u524d\u8282\u70b9\uff0c\u5206\u7c7b\u8ba8\u8bba\u4e00\u4e0b\uff0c\u5904\u7406\u65b0\u52a0\u5165\u7684\u7ebf\u6bb5\u5bf9\u4e8e\u5f53\u524d\u533a\u95f4\u7684\u4fe1\u606f\u7684\u5f71\u54cd\uff0c\u5e76\u4e14\u9012\u5f52\u5230\u5b50\u6811\u5904\u7406\u4e00\u76f4\u5230\u8fb9\u754c\uff0c\u8fd9\u4e2a\u590d\u6742\u5ea6\u662f \\(O(\\log n)\\) \u7684\uff0c\u56e0\u4e3a\u5f53\u524d\u7ebf\u6bb5\u548c\u533a\u95f4\u5df2\u7ecf\u5b58\u4e86\u7684\u7ebf\u6bb5\u7684\u4ea4\u70b9\u6700\u591a\u4e00\u4e2a\uff0c\u53ea\u4f1a\u9012\u5f52\u4e00\u8fb9\u3002 \u5177\u4f53\u5206\u7c7b\u5c31\u8fd9\u4e48\u641e\uff1a \u5177\u4f53\u5206\u7c7b\u8ba8\u8bba\u65b9\u5f0f\uff08by dwt\uff09 \u5047\u8bbe\u73b0\u5728\u6211\u4eec\u9700\u8981\u63d2\u5165\u4e00\u6761\u7ebf\u6bb5 \\(f\\) \uff0c\u5728\u8fd9\u6761\u7ebf\u6bb5\u5b8c\u6574\u8986\u76d6\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\u4ee3\u8868\u7684\u533a\u95f4\u4e2d\uff0c\u67d0\u4e9b\u533a\u95f4\u7684\u6700\u4f18\u7ebf\u6bb5\u53ef\u80fd\u53d1\u751f\u6539\u53d8\u3002 \u8003\u8651\u67d0\u4e2a\u88ab\u65b0\u7ebf\u6bb5 \\(f\\) \u5b8c\u6574\u8986\u76d6\u7684\u533a\u95f4\uff0c\u82e5\u8be5\u533a\u95f4\u65e0\u6700\u4f18\u7ebf\u6bb5\uff0c\u5219\u8be5\u7ebf\u6bb5\u53ef\u4ee5\u76f4\u63a5\u6210\u4e3a\u6700\u4f18\u7ebf\u6bb5\u3002 \u5426\u5219\uff0c\u8bbe\u8be5\u533a\u95f4\u7684\u4e2d\u70b9\u4e3a \\(m\\) \uff0c\u6211\u4eec\u62ff\u65b0\u7ebf\u6bb5 \\(f\\) \u5728\u4e2d\u70b9\u5904\u7684\u503c\u4e0e\u539f\u6700\u4f18\u7ebf\u6bb5 \\(g\\) \u5728\u4e2d\u70b9\u5904\u7684\u503c\u4f5c\u6bd4\u8f83\u3002 \u5982\u679c\u65b0\u7ebf\u6bb5 \\(f\\) \u66f4\u4f18\uff0c\u5219\u5c06 \\(f\\) \u548c \\(g\\) \u4ea4\u6362\u3002\u90a3\u4e48\u73b0\u5728\u8003\u8651\u5728\u4e2d\u70b9\u5904 \\(f\\) \u4e0d\u5982 \\(g\\) \u4f18\u7684\u60c5\u51b5\uff1a \u82e5\u5728\u5de6\u7aef\u70b9\u5904 \\(f\\) \u66f4\u4f18\uff0c\u90a3\u4e48 \\(f\\) \u548c \\(g\\) \u5fc5\u7136\u5728\u5de6\u534a\u533a\u95f4\u4e2d\u4ea7\u751f\u4e86\u4ea4\u70b9\uff0c\u9012\u5f52\u5230\u5de6\u513f\u5b50\u4e2d\u8fdb\u884c\u63d2\u5165\uff1b \u82e5\u5728\u53f3\u7aef\u70b9\u5904 \\(f\\) \u66f4\u4f18\uff0c\u90a3\u4e48 \\(f\\) \u548c \\(g\\) \u5fc5\u7136\u5728\u53f3\u534a\u533a\u95f4\u4e2d\u4ea7\u751f\u4e86\u4ea4\u70b9\uff0c\u9012\u5f52\u5230\u53f3\u513f\u5b50\u4e2d\u8fdb\u884c\u63d2\u5165\u3002 \u82e5\u5728\u5de6\u53f3\u7aef\u70b9\u5904 \\(g\\) \u90fd\u66f4\u4f18\uff0c\u90a3\u4e48 \\(f\\) \u4e0d\u53ef\u80fd\u6210\u4e3a\u7b54\u6848\uff0c\u4e0d\u9700\u8981\u7ee7\u7eed\u4e0b\u4f20\u3002 \u6ce8\u610f\u6709\u4e00\u4e2a\u70b9\u662f\uff0c\u5982\u679c\u63d2\u5165\u4e86\u4e00\u6761\u5e73\u884c\u4e8e y \u8f74\u7684\u7ebf\u6bb5 \\((x, y_0) \\to (x,y_1), (y_0 \\le y_1)\\) \uff0c\u6211\u4eec\u9700\u8981\u628a\u5b83\u5f53\u6210\u4e00\u4e2a\u70b9\u63d2\u5165\u8fdb\u6765\uff0c\u56e0\u4e3a\u6211\u4eec\u7ef4\u62a4\u7684\u4fe1\u606f\u662f Max\uff0c\u6240\u4ee5\u53d6 \\(y_1\\) \u8fd9\u4e2a\u503c\u5e26\u8fdb\u53bb\u5c31\u884c\u4e86\u3002 \u8be2\u95ee\u76f4\u63a5\u9012\u5f52\u5230\u5bf9\u5e94\u53f6\u5b50\u8282\u70b9\uff0c\u7d2f\u8ba1\u8def\u5f84\u4e0a\u7684\u4fe1\u606f\u5c31\u884c\u4e86\u3002 \u63d2\u5165\u590d\u6742\u5ea6\u4e24\u4e2a log\uff0c\u67e5\u8be2\u4e00\u4e2a log\u3002","title":"\u6982\u8ff0"},{"location":"algor/ds/li-chao-tree/#_2","text":"","title":"\u5e94\u7528"},{"location":"algor/ds/li-chao-tree/#heoi2013-segment","text":"\u8981\u6c42\u5728\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e0b\u7ef4\u62a4\u4e24\u4e2a\u64cd\u4f5c\uff08\u5f3a\u5236\u5728\u7ebf\uff09\uff1a \u5728\u5e73\u9762\u4e0a\u52a0\u5165\u4e00\u6761\u7ebf\u6bb5\u3002\u8bb0\u7b2c \\(i\\) \u6761\u88ab\u63d2\u5165\u7684\u7ebf\u6bb5\u7684\u6807\u53f7\u4e3a \\(i\\) \uff0c\u8be5\u7ebf\u6bb5\u7684\u4e24\u4e2a\u7aef\u70b9\u5206\u522b\u4e3a \\((x_0,y_0)\\) \uff0c \\((x_1,y_1)\\) \u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6570 \\(k\\) \uff0c\u8be2\u95ee\u4e0e\u76f4\u7ebf \\(x = k\\) \u76f8\u4ea4\u7684\u7ebf\u6bb5\u4e2d\uff0c\u4ea4\u70b9\u7eb5\u5750\u6807\u6700\u5927\u7684\u7ebf\u6bb5\u7684\u7f16\u53f7\uff08\u82e5\u6709\u591a\u6761\u7ebf\u6bb5\u4e0e\u67e5\u8be2\u76f4\u7ebf\u7684\u4ea4\u70b9\u7eb5\u5750\u6807\u90fd\u662f\u6700\u5927\u7684\uff0c\u5219\u8f93\u51fa\u7f16\u53f7\u6700\u5c0f\u7684\u7ebf\u6bb5\uff09\u3002\u7279\u522b\u5730\uff0c\u82e5\u4e0d\u5b58\u5728\u7ebf\u6bb5\u4e0e\u7ed9\u5b9a\u76f4\u7ebf\u76f8\u4ea4\uff0c\u8f93\u51fa \\(0\\) \u3002 \u6570\u636e\u6ee1\u8db3\uff1a\u64cd\u4f5c\u603b\u6570 \\(1 \\leq n \\leq 10^5\\) \uff0c \\(1 \\leq k, x_0, x_1 \\leq 39989\\) \uff0c \\(1 \\leq y_0, y_1 \\leq 10^9\\) \u3002 \u6a21\u677f\u9898\uff0c\u76f4\u63a5\u4e0a\u4ee3\u7801\uff1a \u8fd9\u9053\u9898\u6bd4\u8f83\u7279\u6b8a\uff0c\u8981\u6c42\u8f93\u51fa\u7684\u4e0d\u662f\u503c\u800c\u662f\u7f16\u53f7\uff0c\u4e14\u8981\u6c42\u7f16\u53f7\u5c3d\u91cf\u5c0f\u3002 Code \u6709\u4e00\u4e2a\u8981\u6ce8\u610f\u7684\u70b9\uff0cbool \u8f6c\u6362\u7684\u65f6\u5019\u53ea\u8981\u4e0d\u662f 0 \u5c31\u662f true \uff01\uff01\uff01\uff01 \u56e0\u4e3a\u8fd9\u4e2a\u88ab\u5751\u4e86 5 hours\uff01\uff01\uff01\uff01\uff01\uff01\uff01 \u611f\u8c22 Uoj \u7fa4\u53cb\uff0c\u611f\u8c22\u53ef\u7231 do_while_true\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <utility> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; // using i64 = long long; using ldb = long double ; using pdi = std :: pair < ldb , int > ; const ldb eps = 1e-9 ; const int mod1 = 39989 ; const int mod2 = 1e9 ; const int si = 1e5 + 10 ; int n , tot = 0 ; struct Line { double k , b ; } a [ si ]; ldb calc ( int idx , int x ) { return ( a [ idx ]. k * x + a [ idx ]. b ); } void add ( int x , int y , int xx , int yy ) { ++ tot ; if ( x == xx ) a [ tot ]. k = 0 , a [ tot ]. b = max ( y , yy ); else a [ tot ]. k = ( ldb )(( 1.0 * ( yy - y )) / ( 1.0 * ( xx - x ))), a [ tot ]. b = y - a [ tot ]. k * x ; } int cmp ( ldb x , ldb y ) { if (( x - y ) > eps ) return 1 ; // Greater. else if (( y - x ) > eps ) return -1 ; // Less return 0 ; } pdi Max ( pdi x , pdi y ) { if ( cmp ( x . first , y . first ) == 1 ) return x ; else if ( cmp ( y . first , x . first ) == 1 ) return y ; return ( x . second < y . second ) ? x : y ; } struct LichaoTree { int id [ si << 2 ]; void modify ( int p , int l , int r , int u ) { int & v = id [ p ], mid = ( l + r ) >> 1 ; if ( cmp ( calc ( u , mid ), calc ( v , mid )) == 1 ) swap ( u , v ); int boundl = cmp ( calc ( u , l ), calc ( v , l )); int boundr = cmp ( calc ( u , r ), calc ( v , r )); if ( boundl == 1 || ( ! boundl && u < v )) modify ( p << 1 , l , mid , u ); if ( boundr == 1 || ( ! boundr && u < v )) modify ( p << 1 | 1 , mid + 1 , r , u ); } void update ( int p , int nl , int nr , int l , int r , int u ) { if ( l <= nl && nr <= r ) return modify ( p , nl , nr , u ); int mid = ( nl + nr ) >> 1 ; if ( l <= mid ) update ( p << 1 , nl , mid , l , r , u ); if ( r > mid ) update ( p << 1 | 1 , mid + 1 , nr , l , r , u ); } pdi query ( int p , int l , int r , int x ) { if ( x < l || r < x ) return { 0.0 , 0 }; ldb ret = calc ( id [ p ], x ), mid = ( l + r ) >> 1 ; if ( l == r ) return { ret , id [ p ]}; return Max ({ ret , id [ p ]}, Max ( query ( p << 1 , l , mid , x ), query ( p << 1 | 1 , mid + 1 , r , x ))); } } tr ; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int lasans = 0 ; auto decode = [ & ]( int & v , const int mod ) { v = ( v + lasans - 1 + mod ) % mod + 1 ; }; cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { int opt ; cin >> opt ; if ( opt == 0 ) { int k ; cin >> k , decode ( k , mod1 ); cout << ( lasans = tr . query ( 1 , 1 , mod1 , k ). second ) << endl ; } if ( opt == 1 ) { int x , y , xx , yy ; cin >> x >> y >> xx >> yy ; decode ( x , mod1 ), decode ( xx , mod1 ), decode ( y , mod2 ), decode ( yy , mod2 ); if ( x > xx ) swap ( x , xx ), swap ( y , yy ); add ( x , y , xx , yy ), tr . update ( 1 , 1 , mod1 , x , xx , tot ); } } return 0 ; }","title":"[HEOI2013] Segment"},{"location":"algor/ds/li-chao-tree/#_3","text":"\u8fd9\u73a9\u610f\u513f\uff0c\u8c14\u8c14\uff0c\u5c31\u76f4\u63a5\u628a\u6240\u6709\u7ebf\u6bb5\u6254\u4e0a\u53bb\u7136\u540e\u95ee\u9898\u8f6c\u5316\u4e3a\u8be2\u95ee Min/Max\uff0c\u5c31\u5f88\u597d\u505a\u4e86\u3002 \u7406\u6240\u5f53\u7136\u7684\uff0c\u8fd9\u4e1c\u897f\u8fd8\u53ef\u4ee5\u7528\u4e8e\u659c\u7387\u4f18\u5316\u3002 \u4f46\u662f\u8fd9\u4e2a\u6709\u65f6\u95f4\u518d\u6765\u5199\u5427\uff0c\u653e\u5728\u8fd9\u91cc\u3002","title":"\u7ef4\u62a4\u51f8\u58f3"},{"location":"algor/ds/list/","text":"\u6982\u8ff0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u91cc\u8bf4\u7684\u94fe\u8868\u662f\u53cc\u5411\u94fe\u8868\uff0c\u5b83\u652f\u6301\u5728\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u6216\u8005\u5220\u9664\u5143\u7d20\uff0c\u4f46\u662f\u53ea\u80fd\u6309\u7167\u987a\u5e8f\u8bbf\u95ee\u3002 \u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u7684\u7ed3\u70b9\u901a\u5e38\u7531\u5143\u7d20\u503c \\(val\\) \uff0c\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488 \\(next\\) \u548c\u6307\u5411\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488 \\(prev\\) \u4e00\u822c\u6765\u8bf4\u6211\u4eec\u4f1a\u989d\u5916\u5efa\u7acb\u8868\u5934 \\(head\\) \u548c\u8868\u5c3e \\(tail\\) \u6307\u9488\uff0c\u5e76\u5c06\u5b83\u4eec\u9996\u5c3e\u76f8\u8fde\uff0c\u6765\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u95ee\u9898\u3002 \u5b9e\u73b0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u521d\u59cb\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 \u521d\u59cb\u5316\u94fe\u8868\u53ea\u9700\u8981\u628a \\(head\\) \u7684 \\(next\\) \u6307\u5411 \\(tail\\) \uff0c \\(tail\\) \u7684 \\(prev\\) \u6307\u5411 \\(head\\) \u5373\u53ef 1 2 3 4 inline void init (){ head = new node (), tail = new node (); head -> next = tail , tail -> prev = head ; } // init new List \u63d2\u5165\u5143\u7d20 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5728\u8282\u70b9 \\(p\\) \u4e4b\u540e\u63d2\u5165\u4e00\u4e2a\u8282\u70b9 \\(q\\) \uff0c\u5e76\u4e14\u8282\u70b9\u503c\u4e3a \\(val\\) \u3002 \u6211\u4eec\u53ea\u9700\u8981\u8ba9 \\(p\\) \u7684 \\(next\\) \u8282\u70b9\u7684 \\(prev\\) \u6307\u5411 \\(q\\) \uff0c\u8ba9 \\(q\\) \u548c \\(p\\) \u4ee5\u53ca\u539f\u6765\u7684 \\(p.next\\) \u76f8\u8fde\u5373\u53ef\u3002 \u6700\u540e\u628a \\(p\\) \u7684 \\(next\\) \u6307\u5411 \\(q\\) \uff0c\u6ce8\u610f\u662f\u6700\u540e\uff0c\u4e0d\u7136\u4f60\u5728\u524d\u9762\u64cd\u4f5c\u7684\u65f6\u5019\u5c31\u4f1a\u8ba9 \\(q\\) \u7684 \\(prev\\) \u6307\u5411\u81ea\u5df1\u7684\u3002 1 2 3 4 5 inline void insert ( node * p , int val ){ node * q ; q = new node (); q -> val = val , p -> next -> prev = q ; q -> next = p -> next , q -> prev = p , p -> next = q ; } // insert a element ,value is val, after p \u5220\u9664\u5143\u7d20 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5220\u9664\u4e00\u4e2a\u8282\u70b9 \\(p\\) \u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u53ea\u9700\u8981\u628a \\(p\\) \u7684 \\(prev\\) \u4ee5\u53ca \\(next\\) \u94fe\u63a5\u8d77\u6765\u5373\u53ef\u3002 1 2 3 4 inline void remove ( node * p ){ p -> prev -> next = p -> next , p -> next -> prev = p -> prev ; delete p ; } // remove p \u6e05\u7a7a\u94fe\u8868 \u03c8(\uff40\u2207\u00b4)\u03c8 \u56de\u6536\u94fe\u8868\u5185\u5b58\u7684\u8bdd\u53ea\u9700\u8981\u8ba9 \\(head\\) \u4e00\u6b65\u6b65\u903c\u8fd1 \\(tail\\) \uff0c\u5728\u903c\u8fd1\u7684\u8fc7\u7a0b\u4e2d\u628a\u8bbf\u95ee\u8fc7\u7684 \\(head.prev\\) \u5220\u9664\u5373\u53ef\u3002 \u6ce8\u610f\u8fd9\u91cc\u8981\u5148\u8df3 \\(next\\) \u4e4b\u540e\u518d\u5220\u9664 \\(prev\\) \uff0c\u4e0d\u7136\u5f88\u5bb9\u6613\u4f1a\u8bbf\u95ee\u65e0\u6548\u5185\u5b58\u7684\uff0c\u4f46\u662f\u6211\u4eec\u5f00\u5934\u7684\u8fde\u63a5\u94fe\u8868\u7684\u9996\u5c3e\u5c31\u5b8c\u7f8e\u7684\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002 1 2 3 4 5 6 inline void reset (){ while ( head != tail ){ head = head -> next ; delete head -> prev ; } delete tail ; } // clear","title":"\u94fe\u8868"},{"location":"algor/ds/list/#_1","text":"\u8fd9\u91cc\u8bf4\u7684\u94fe\u8868\u662f\u53cc\u5411\u94fe\u8868\uff0c\u5b83\u652f\u6301\u5728\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u6216\u8005\u5220\u9664\u5143\u7d20\uff0c\u4f46\u662f\u53ea\u80fd\u6309\u7167\u987a\u5e8f\u8bbf\u95ee\u3002 \u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u7684\u7ed3\u70b9\u901a\u5e38\u7531\u5143\u7d20\u503c \\(val\\) \uff0c\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488 \\(next\\) \u548c\u6307\u5411\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488 \\(prev\\) \u4e00\u822c\u6765\u8bf4\u6211\u4eec\u4f1a\u989d\u5916\u5efa\u7acb\u8868\u5934 \\(head\\) \u548c\u8868\u5c3e \\(tail\\) \u6307\u9488\uff0c\u5e76\u5c06\u5b83\u4eec\u9996\u5c3e\u76f8\u8fde\uff0c\u6765\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u95ee\u9898\u3002","title":"\u6982\u8ff0"},{"location":"algor/ds/list/#_2","text":"","title":"\u5b9e\u73b0"},{"location":"algor/ds/list/#_3","text":"\u521d\u59cb\u5316\u94fe\u8868\u53ea\u9700\u8981\u628a \\(head\\) \u7684 \\(next\\) \u6307\u5411 \\(tail\\) \uff0c \\(tail\\) \u7684 \\(prev\\) \u6307\u5411 \\(head\\) \u5373\u53ef 1 2 3 4 inline void init (){ head = new node (), tail = new node (); head -> next = tail , tail -> prev = head ; } // init new List","title":"\u521d\u59cb\u5316"},{"location":"algor/ds/list/#_4","text":"\u5728\u8282\u70b9 \\(p\\) \u4e4b\u540e\u63d2\u5165\u4e00\u4e2a\u8282\u70b9 \\(q\\) \uff0c\u5e76\u4e14\u8282\u70b9\u503c\u4e3a \\(val\\) \u3002 \u6211\u4eec\u53ea\u9700\u8981\u8ba9 \\(p\\) \u7684 \\(next\\) \u8282\u70b9\u7684 \\(prev\\) \u6307\u5411 \\(q\\) \uff0c\u8ba9 \\(q\\) \u548c \\(p\\) \u4ee5\u53ca\u539f\u6765\u7684 \\(p.next\\) \u76f8\u8fde\u5373\u53ef\u3002 \u6700\u540e\u628a \\(p\\) \u7684 \\(next\\) \u6307\u5411 \\(q\\) \uff0c\u6ce8\u610f\u662f\u6700\u540e\uff0c\u4e0d\u7136\u4f60\u5728\u524d\u9762\u64cd\u4f5c\u7684\u65f6\u5019\u5c31\u4f1a\u8ba9 \\(q\\) \u7684 \\(prev\\) \u6307\u5411\u81ea\u5df1\u7684\u3002 1 2 3 4 5 inline void insert ( node * p , int val ){ node * q ; q = new node (); q -> val = val , p -> next -> prev = q ; q -> next = p -> next , q -> prev = p , p -> next = q ; } // insert a element ,value is val, after p","title":"\u63d2\u5165\u5143\u7d20"},{"location":"algor/ds/list/#_5","text":"\u5220\u9664\u4e00\u4e2a\u8282\u70b9 \\(p\\) \u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u53ea\u9700\u8981\u628a \\(p\\) \u7684 \\(prev\\) \u4ee5\u53ca \\(next\\) \u94fe\u63a5\u8d77\u6765\u5373\u53ef\u3002 1 2 3 4 inline void remove ( node * p ){ p -> prev -> next = p -> next , p -> next -> prev = p -> prev ; delete p ; } // remove p","title":"\u5220\u9664\u5143\u7d20"},{"location":"algor/ds/list/#_6","text":"\u56de\u6536\u94fe\u8868\u5185\u5b58\u7684\u8bdd\u53ea\u9700\u8981\u8ba9 \\(head\\) \u4e00\u6b65\u6b65\u903c\u8fd1 \\(tail\\) \uff0c\u5728\u903c\u8fd1\u7684\u8fc7\u7a0b\u4e2d\u628a\u8bbf\u95ee\u8fc7\u7684 \\(head.prev\\) \u5220\u9664\u5373\u53ef\u3002 \u6ce8\u610f\u8fd9\u91cc\u8981\u5148\u8df3 \\(next\\) \u4e4b\u540e\u518d\u5220\u9664 \\(prev\\) \uff0c\u4e0d\u7136\u5f88\u5bb9\u6613\u4f1a\u8bbf\u95ee\u65e0\u6548\u5185\u5b58\u7684\uff0c\u4f46\u662f\u6211\u4eec\u5f00\u5934\u7684\u8fde\u63a5\u94fe\u8868\u7684\u9996\u5c3e\u5c31\u5b8c\u7f8e\u7684\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002 1 2 3 4 5 6 inline void reset (){ while ( head != tail ){ head = head -> next ; delete head -> prev ; } delete tail ; } // clear","title":"\u6e05\u7a7a\u94fe\u8868"},{"location":"algor/ds/monotonous-queue/","text":"\u6982\u8ff0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5355\u8c03\u961f\u5217\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u961f\u5217\u91cc\u7684\u5143\u7d20\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5355\u8c03\u7684\u961f\u5217\u3002 \u6709\u4e00\u4e2a\u5f88\u51fa\u540d\u7684\u6897\uff0c\u201c\u6bd4\u4f60\u5c0f\uff0c\u6bd4\u4f60\u5f3a\u201d\uff0c\u53ef\u4ee5\u7528\u6765\u7406\u89e3\u5355\u8c03\u961f\u5217\u3002 \u5355\u8c03\u961f\u5217\u53ef\u4ee5\u5904\u7406\u4e00\u4e9b\u6ed1\u52a8\u7684\u533a\u95f4\u5185\u7684\u9759\u6001\u6700\u503c\u95ee\u9898\u3002 \u590d\u6742\u5ea6\u4ece\u66b4\u529b\u7684 \\(O(nm)\\) \u53d8\u6210\u4e86 \\(O(n)\\) \u3002 \u5e94\u7528 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6709\u4e00\u4e2a\u957f\u4e3a \\(n\\) \u7684\u5e8f\u5217 \\(a\\) \uff0c\u4ee5\u53ca\u4e00\u4e2a\u5927\u5c0f\u4e3a \\(k\\) \u7684\u7a97\u53e3\u3002\u73b0\u5728\u8fd9\u4e2a\u4ece\u5de6\u8fb9\u5f00\u59cb\u5411\u53f3\u6ed1\u52a8\uff0c\u6bcf\u6b21\u6ed1\u52a8\u4e00\u4e2a\u5355\u4f4d\uff0c\u6c42\u51fa\u6bcf\u6b21\u6ed1\u52a8\u540e\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c\u3002 \u8003\u8651\u7ef4\u62a4\u4e00\u4e2a\u961f\u5217\uff0c\u5b58\u50a8\u5f53\u524d\u533a\u95f4\u7684\u6240\u6709\u5143\u7d20\u3002 \u7136\u540e\u6211\u4eec\u8003\u8651\u4fdd\u6301\u961f\u5217\u7684\u5355\u8c03\u6027\uff0c\u8ba9\u961f\u5934\u6c38\u8fdc\u662f\u6700\u5927\u7684\uff0c\u540e\u9762\u4ee5\u6b64\u9012\u51cf\u3002 \u6bcf\u6b21\u6ed1\u52a8\u7684\u65f6\u5019\u628a\u8fc7\u65f6\u7684\u90a3\u4e00\u4e2a\u6254\u51fa\u53bb\uff0c\u65b0\u7684\u6254\u8fdb\u6765\uff0c\u7136\u540e\u4f60\u53d1\u73b0\uff0c\u5982\u679c\u50a8\u5b58\u6240\u6709\u5143\u7d20\u7684\u8bdd\uff0c\u5927\u6982\u7387\u8981\u5f39\u51fa\u7684\u65f6\u5019\u6ca1\u6cd5\u4ece\u961f\u5217\u91cc\u62ff\u51fa\u6765\u3002 \u800c\u4e14\u5982\u679c\u8fd9\u6837\u505a\u8981\u4fdd\u6301\u5355\u8c03\u6027\uff0c\u6bcf\u6b21\u90fd\u8fd8\u8981\u6392\u5e8f\uff0c\u590d\u6742\u5ea6\u5c31\u53d8\u6210\u4e86 \\(O(n^2\\log n)\\) \uff0c\u4e0d\u5982\u66b4\u529b\uff01 \u7136\u540e\u4f60\u53d1\u73b0\u5176\u5b9e\u6ca1\u6709\u5fc5\u8981\u5b58\u50a8\u6240\u6709\u5143\u7d20\uff0c\u5982\u679c\u4e00\u4e2a\u5143\u7d20\u672c\u6765\u5728\u961f\u5217\u4e2d\u95f4\uff0c\u8fdb\u6765\u4e00\u4e2a\u65b0\u7684\u6570\u4e4b\u540e\u5b83\u7684\u4f4d\u7f6e\u5f80\u540e\u9000\u4e86\uff0c\u5f88\u660e\u663e\u4ed6\u5c31\u662f\u4e00\u4e2a\u201c\u5197\u4f59\u51b3\u7b56\u201d\u3002 \u56e0\u4e3a\u6709\u4e00\u4e2a\u6bd4\u4f60\u540e\u8fdb\u6765\uff0c\u5269\u4f59\u6709\u6548\u671f\u6bd4\u4f60\u591a\u7684\uff0c\u5b9e\u529b\u6bd4\u4f60\u5f3a\u7684\uff0c\u4e0d\u7ba1\u600e\u4e48\u6837\uff0c\u5728\u4f60\u6709\u6548\u7684\u671f\u95f4\uff0c\u4f60\u90fd\u4e0d\u53ef\u80fd\u8d85\u8fc7\u4ed6\uff0c\u6211\u4eec\u8fd9\u91cc\u53ea\u9700\u8981\u6700\u5927\u503c\uff0c\u6240\u4ee5\u4f60\u65e2\u7136\u6c38\u8fdc\u4e0d\u53ef\u80fd\u6210\u4e3a\u5934\u4e86\uff0c\u90a3\u6211\u5c31\u628a\u4f60\u5f39\u6389\u3002 \u7136\u540e\u961f\u5934\u53ef\u4ee5\u4e00\u76f4\u4fdd\u6301\u6700\u5927\u503c\uff0c\u4e14\u961f\u5217\u91cc\u7684\u4e0b\u6807\u4e5f\u662f\u5355\u8c03\u9012\u589e\u7684\uff0c\u8fd9\u6837\u8fc7\u671f\u7684\u65f6\u5019\u53ea\u7528\u628a\u961f\u5934\u5f39\u51fa\u5c31\u884c\u4e86\uff01 \u6a21\u62df\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b\uff1a \\(\\{a\\} = 5, 7, 2, 8, 4, 7, 9\\) \uff0c \\(k = 3\\) \u3002 \u521d\u59cb\u5316\u961f\u5217\uff1a\u628a \\(5\\) \u653e\u8fdb\u6765\uff0c\u7136\u540e\u53d1\u73b0\u6709\u6bd4\u4ed6\u5c0f\u6bd4\u4ed6\u5f3a\u7684 \\(7\\) \uff0c\u5f39\u6389\uff0c\u961f\u5217\u53ea\u5269 \\(7\\) \uff0c \\(2\\) \u867d\u7136\u6bd4 \\(7\\) \u5c0f\uff0c\u4f46\u662f \\(7\\) \u5982\u679c\u8fc7\u671f\u4e86\u4e4b\u540e\u8bf4\u4e0d\u5b9a \\(2\\) \u53ef\u4ee5\uff0c\u6240\u4ee5\u5165\u961f\uff0c\u6b64\u65f6\u961f\u5217\u4e3a \\(|7, 2|\\) \u79fb\u52a8\u4e00\u6b21\uff1a\u53d1\u73b0 \\(8\\) \u80fd\u628a \\(7,2\\) \u5168\u90e8\u66b4\u6740\uff0c\u6240\u4ee5 \\(7, 2\\) \u5f39\u6389\uff0c\u53ea\u5269 \\(8\\) \u3002 \u79fb\u52a8\u4e24\u6b21\uff1a \\(4\\) \u4e5f\u8bb8\u53ef\u4ee5\uff0c\u653e\u8fdb\u6765\uff1a \\(|8, 4|\\) \u3002 \u79fb\u52a8\u4e09\u6b21\uff1a \\(7\\) \u628a \\(4\\) \u66b4\u6740\uff0c \\(4\\) \u5f39\u6389\uff0c \\(7\\) \u5165\u961f\uff0c\u53d8\u6210 \\(|8, 7|\\) \u3002 \u79fb\u52a8\u56db\u6b21\uff1a \\(8\\) \u8fc7\u671f\uff0c\u5f39\u6389\uff0c\u5269\u4e0b \\(7\\) \uff0c\u7136\u540e \u2468 \u628a \\(7\\) \u66b4\u6740\uff0c\u961f\u5217\u53ea\u5269 \u2468\u3002 \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #include <bits/stdc++.h> using namespace std ; const int si = 1e6 + 10 ; int n , k ; int a [ si ], ans [ si ]; int q [ si ], hd = 1 , tl = 0 ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . badbit | cin . failbit ); cin >> n >> k ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; for ( int i = 1 ; i <= n ; ++ i ) { while ( hd <= tl && q [ hd ] + k <= i ) hd ++ ; //\u6392\u9664\u961f\u5934\u8fc7\u671f\u7684\u3002 while ( hd <= tl && a [ i ] <= a [ q [ tl ]]) tl -- ; //\u6392\u9664\u961f\u5c3e\u5197\u6742\u51b3\u7b56\u3002 q [ ++ tl ] = i ; ans [ i ] = a [ q [ hd ]]; //\u6ce8\u610f\u8fd9\u91ccq\u5b58\u7684\u662f\u4e0b\u6807\uff0c\u6240\u4ee5\u8981\u5c06\u5176\u4f5c\u4e3a\u4e0b\u6807\u3002 } return 0 ; } Warning \u6ce8\u610f\u8fd9\u91cc \\(head\\) \u548c \\(tail\\) \u7684\u521d\u503c\u662f head = 1, tail = 0 \u3002 \u8fd9\u79cd\u5199\u6cd5\u5bf9\u5e94\u7684\u662f\u7ef4\u62a4\u95ed\u533a\u95f4 \\([head, tail]\\) \u5982\u679c\u7ef4\u62a4\u5de6\u95ed\u53f3\u5f00\u533a\u95f4 \\([head,tail)\\) \uff0c\u90a3\u4e48\u521d\u503c\u5e94\u5f53\u662f head = 1, tail = 1 \u3002 \u8fd9\u4e2a\u5728\u659c\u7387\u4f18\u5316\u91cc\u9762\u4f7f\u7528\u5230\u5355\u8c03\u961f\u5217\u65f6\u4e5f\u63d0\u5230\u8fc7\u3002 \u4e0d\u6b62\u5355\u8c03\u961f\u5217\uff0c\u83ab\u961f\u8fd9\u79cd\u7b97\u6cd5\u4e5f\u662f\u4e00\u6837\uff0c \\(l,r\\) \u7684\u521d\u503c\u548c\u79fb\u52a8\u65b9\u5f0f\u51b3\u5b9a\u4e86\u7ef4\u62a4\u7684\u533a\u95f4\u6027\u8d28\u3002 \u5355\u8c03\u961f\u5217\u8fd8\u53ef\u4ee5\u7528\u6765 \u4f18\u5316 DP \u3002 \u603b\u7ed3 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5728\u6bcf\u9053\u9898\u4f7f\u7528\u5355\u8c03\u961f\u5217\u4e4b\u524d\u9700\u8981\u770b\u6e05\u9898\u76ee\u7684\u7aef\u70b9\u53d6\u820d\u548c\u6761\u4ef6\u3002 \u6bd4\u5982\u6c42 m \u533a\u95f4\u5185\u7684\u6700\u5c0f\u503c\u90a3\u9053\u9898\u5c31\u662f\u6c42 \\([i-k-1,i)\\) \u7684\u6700\u5c0f\u503c. \u6240\u4ee5\u8bf4\u6700\u597d\u5728\u7528\u4e4b\u524d\u624b\u73a9\u4e00\u4e0b\u6570\u636e\u3002","title":"\u5355\u8c03\u961f\u5217"},{"location":"algor/ds/monotonous-queue/#_1","text":"\u5355\u8c03\u961f\u5217\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u961f\u5217\u91cc\u7684\u5143\u7d20\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5355\u8c03\u7684\u961f\u5217\u3002 \u6709\u4e00\u4e2a\u5f88\u51fa\u540d\u7684\u6897\uff0c\u201c\u6bd4\u4f60\u5c0f\uff0c\u6bd4\u4f60\u5f3a\u201d\uff0c\u53ef\u4ee5\u7528\u6765\u7406\u89e3\u5355\u8c03\u961f\u5217\u3002 \u5355\u8c03\u961f\u5217\u53ef\u4ee5\u5904\u7406\u4e00\u4e9b\u6ed1\u52a8\u7684\u533a\u95f4\u5185\u7684\u9759\u6001\u6700\u503c\u95ee\u9898\u3002 \u590d\u6742\u5ea6\u4ece\u66b4\u529b\u7684 \\(O(nm)\\) \u53d8\u6210\u4e86 \\(O(n)\\) \u3002","title":"\u6982\u8ff0"},{"location":"algor/ds/monotonous-queue/#_2","text":"\u6709\u4e00\u4e2a\u957f\u4e3a \\(n\\) \u7684\u5e8f\u5217 \\(a\\) \uff0c\u4ee5\u53ca\u4e00\u4e2a\u5927\u5c0f\u4e3a \\(k\\) \u7684\u7a97\u53e3\u3002\u73b0\u5728\u8fd9\u4e2a\u4ece\u5de6\u8fb9\u5f00\u59cb\u5411\u53f3\u6ed1\u52a8\uff0c\u6bcf\u6b21\u6ed1\u52a8\u4e00\u4e2a\u5355\u4f4d\uff0c\u6c42\u51fa\u6bcf\u6b21\u6ed1\u52a8\u540e\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c\u3002 \u8003\u8651\u7ef4\u62a4\u4e00\u4e2a\u961f\u5217\uff0c\u5b58\u50a8\u5f53\u524d\u533a\u95f4\u7684\u6240\u6709\u5143\u7d20\u3002 \u7136\u540e\u6211\u4eec\u8003\u8651\u4fdd\u6301\u961f\u5217\u7684\u5355\u8c03\u6027\uff0c\u8ba9\u961f\u5934\u6c38\u8fdc\u662f\u6700\u5927\u7684\uff0c\u540e\u9762\u4ee5\u6b64\u9012\u51cf\u3002 \u6bcf\u6b21\u6ed1\u52a8\u7684\u65f6\u5019\u628a\u8fc7\u65f6\u7684\u90a3\u4e00\u4e2a\u6254\u51fa\u53bb\uff0c\u65b0\u7684\u6254\u8fdb\u6765\uff0c\u7136\u540e\u4f60\u53d1\u73b0\uff0c\u5982\u679c\u50a8\u5b58\u6240\u6709\u5143\u7d20\u7684\u8bdd\uff0c\u5927\u6982\u7387\u8981\u5f39\u51fa\u7684\u65f6\u5019\u6ca1\u6cd5\u4ece\u961f\u5217\u91cc\u62ff\u51fa\u6765\u3002 \u800c\u4e14\u5982\u679c\u8fd9\u6837\u505a\u8981\u4fdd\u6301\u5355\u8c03\u6027\uff0c\u6bcf\u6b21\u90fd\u8fd8\u8981\u6392\u5e8f\uff0c\u590d\u6742\u5ea6\u5c31\u53d8\u6210\u4e86 \\(O(n^2\\log n)\\) \uff0c\u4e0d\u5982\u66b4\u529b\uff01 \u7136\u540e\u4f60\u53d1\u73b0\u5176\u5b9e\u6ca1\u6709\u5fc5\u8981\u5b58\u50a8\u6240\u6709\u5143\u7d20\uff0c\u5982\u679c\u4e00\u4e2a\u5143\u7d20\u672c\u6765\u5728\u961f\u5217\u4e2d\u95f4\uff0c\u8fdb\u6765\u4e00\u4e2a\u65b0\u7684\u6570\u4e4b\u540e\u5b83\u7684\u4f4d\u7f6e\u5f80\u540e\u9000\u4e86\uff0c\u5f88\u660e\u663e\u4ed6\u5c31\u662f\u4e00\u4e2a\u201c\u5197\u4f59\u51b3\u7b56\u201d\u3002 \u56e0\u4e3a\u6709\u4e00\u4e2a\u6bd4\u4f60\u540e\u8fdb\u6765\uff0c\u5269\u4f59\u6709\u6548\u671f\u6bd4\u4f60\u591a\u7684\uff0c\u5b9e\u529b\u6bd4\u4f60\u5f3a\u7684\uff0c\u4e0d\u7ba1\u600e\u4e48\u6837\uff0c\u5728\u4f60\u6709\u6548\u7684\u671f\u95f4\uff0c\u4f60\u90fd\u4e0d\u53ef\u80fd\u8d85\u8fc7\u4ed6\uff0c\u6211\u4eec\u8fd9\u91cc\u53ea\u9700\u8981\u6700\u5927\u503c\uff0c\u6240\u4ee5\u4f60\u65e2\u7136\u6c38\u8fdc\u4e0d\u53ef\u80fd\u6210\u4e3a\u5934\u4e86\uff0c\u90a3\u6211\u5c31\u628a\u4f60\u5f39\u6389\u3002 \u7136\u540e\u961f\u5934\u53ef\u4ee5\u4e00\u76f4\u4fdd\u6301\u6700\u5927\u503c\uff0c\u4e14\u961f\u5217\u91cc\u7684\u4e0b\u6807\u4e5f\u662f\u5355\u8c03\u9012\u589e\u7684\uff0c\u8fd9\u6837\u8fc7\u671f\u7684\u65f6\u5019\u53ea\u7528\u628a\u961f\u5934\u5f39\u51fa\u5c31\u884c\u4e86\uff01 \u6a21\u62df\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b\uff1a \\(\\{a\\} = 5, 7, 2, 8, 4, 7, 9\\) \uff0c \\(k = 3\\) \u3002 \u521d\u59cb\u5316\u961f\u5217\uff1a\u628a \\(5\\) \u653e\u8fdb\u6765\uff0c\u7136\u540e\u53d1\u73b0\u6709\u6bd4\u4ed6\u5c0f\u6bd4\u4ed6\u5f3a\u7684 \\(7\\) \uff0c\u5f39\u6389\uff0c\u961f\u5217\u53ea\u5269 \\(7\\) \uff0c \\(2\\) \u867d\u7136\u6bd4 \\(7\\) \u5c0f\uff0c\u4f46\u662f \\(7\\) \u5982\u679c\u8fc7\u671f\u4e86\u4e4b\u540e\u8bf4\u4e0d\u5b9a \\(2\\) \u53ef\u4ee5\uff0c\u6240\u4ee5\u5165\u961f\uff0c\u6b64\u65f6\u961f\u5217\u4e3a \\(|7, 2|\\) \u79fb\u52a8\u4e00\u6b21\uff1a\u53d1\u73b0 \\(8\\) \u80fd\u628a \\(7,2\\) \u5168\u90e8\u66b4\u6740\uff0c\u6240\u4ee5 \\(7, 2\\) \u5f39\u6389\uff0c\u53ea\u5269 \\(8\\) \u3002 \u79fb\u52a8\u4e24\u6b21\uff1a \\(4\\) \u4e5f\u8bb8\u53ef\u4ee5\uff0c\u653e\u8fdb\u6765\uff1a \\(|8, 4|\\) \u3002 \u79fb\u52a8\u4e09\u6b21\uff1a \\(7\\) \u628a \\(4\\) \u66b4\u6740\uff0c \\(4\\) \u5f39\u6389\uff0c \\(7\\) \u5165\u961f\uff0c\u53d8\u6210 \\(|8, 7|\\) \u3002 \u79fb\u52a8\u56db\u6b21\uff1a \\(8\\) \u8fc7\u671f\uff0c\u5f39\u6389\uff0c\u5269\u4e0b \\(7\\) \uff0c\u7136\u540e \u2468 \u628a \\(7\\) \u66b4\u6740\uff0c\u961f\u5217\u53ea\u5269 \u2468\u3002 \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #include <bits/stdc++.h> using namespace std ; const int si = 1e6 + 10 ; int n , k ; int a [ si ], ans [ si ]; int q [ si ], hd = 1 , tl = 0 ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . badbit | cin . failbit ); cin >> n >> k ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; for ( int i = 1 ; i <= n ; ++ i ) { while ( hd <= tl && q [ hd ] + k <= i ) hd ++ ; //\u6392\u9664\u961f\u5934\u8fc7\u671f\u7684\u3002 while ( hd <= tl && a [ i ] <= a [ q [ tl ]]) tl -- ; //\u6392\u9664\u961f\u5c3e\u5197\u6742\u51b3\u7b56\u3002 q [ ++ tl ] = i ; ans [ i ] = a [ q [ hd ]]; //\u6ce8\u610f\u8fd9\u91ccq\u5b58\u7684\u662f\u4e0b\u6807\uff0c\u6240\u4ee5\u8981\u5c06\u5176\u4f5c\u4e3a\u4e0b\u6807\u3002 } return 0 ; } Warning \u6ce8\u610f\u8fd9\u91cc \\(head\\) \u548c \\(tail\\) \u7684\u521d\u503c\u662f head = 1, tail = 0 \u3002 \u8fd9\u79cd\u5199\u6cd5\u5bf9\u5e94\u7684\u662f\u7ef4\u62a4\u95ed\u533a\u95f4 \\([head, tail]\\) \u5982\u679c\u7ef4\u62a4\u5de6\u95ed\u53f3\u5f00\u533a\u95f4 \\([head,tail)\\) \uff0c\u90a3\u4e48\u521d\u503c\u5e94\u5f53\u662f head = 1, tail = 1 \u3002 \u8fd9\u4e2a\u5728\u659c\u7387\u4f18\u5316\u91cc\u9762\u4f7f\u7528\u5230\u5355\u8c03\u961f\u5217\u65f6\u4e5f\u63d0\u5230\u8fc7\u3002 \u4e0d\u6b62\u5355\u8c03\u961f\u5217\uff0c\u83ab\u961f\u8fd9\u79cd\u7b97\u6cd5\u4e5f\u662f\u4e00\u6837\uff0c \\(l,r\\) \u7684\u521d\u503c\u548c\u79fb\u52a8\u65b9\u5f0f\u51b3\u5b9a\u4e86\u7ef4\u62a4\u7684\u533a\u95f4\u6027\u8d28\u3002 \u5355\u8c03\u961f\u5217\u8fd8\u53ef\u4ee5\u7528\u6765 \u4f18\u5316 DP \u3002","title":"\u5e94\u7528"},{"location":"algor/ds/monotonous-queue/#_3","text":"\u5728\u6bcf\u9053\u9898\u4f7f\u7528\u5355\u8c03\u961f\u5217\u4e4b\u524d\u9700\u8981\u770b\u6e05\u9898\u76ee\u7684\u7aef\u70b9\u53d6\u820d\u548c\u6761\u4ef6\u3002 \u6bd4\u5982\u6c42 m \u533a\u95f4\u5185\u7684\u6700\u5c0f\u503c\u90a3\u9053\u9898\u5c31\u662f\u6c42 \\([i-k-1,i)\\) \u7684\u6700\u5c0f\u503c. \u6240\u4ee5\u8bf4\u6700\u597d\u5728\u7528\u4e4b\u524d\u624b\u73a9\u4e00\u4e0b\u6570\u636e\u3002","title":"\u603b\u7ed3"},{"location":"algor/ds/monotonous-stack/","text":"\u6982\u8ff0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5355\u8c03\u6808\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u6808\u5185\u5143\u7d20\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5355\u8c03\u7684\u6808\u3002 \u5355\u8c03\u961f\u5217\u53ef\u4ee5\u7528\u6765\u7ef4\u62a4\u6ed1\u52a8\u7a97\u53e3\u6700\u503c\uff0c\u800c\u5355\u8c03\u6808\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u5e8f\u5217\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684 NGE\uff0cNLE\u3002 NGE = Next Greater Element, L \u540c\u7406\u3002 \u5c31\u662f\u7ef4\u62a4\u5bf9\u4e8e \\(\\forall a_{i}\\) \uff0c\u5b83\u5de6\u8fb9\u7684\u7b2c\u4e00\u4e2a\u4f7f\u5f97 \\(a_{j} > a_{i}\\) \u7684 \\(j\\) \u3002 \u5e94\u7528 \u03c8(\uff40\u2207\u00b4)\u03c8 NGE \u7684\u66b4\u529b\u505a\u6cd5\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee \\(O(n)\\) \u8dd1\u4e00\u904d\uff0c\u590d\u6742\u5ea6 \\(O(nm)\\) \u4e0d\u80fd\u63a5\u53d7\u3002 \u8003\u8651\u7ef4\u62a4\u4e00\u4e2a\u6808\u8868\u793a\u201c\u5f53\u524d\u8fd8\u672a\u786e\u5b9a NGE\u201d \u7684\u5143\u7d20\u96c6\u5408\u3002 \u7136\u540e\u8ba9\u6808\u4ece\u6808\u5e95\u5230\u6808\u9876\u5355\u8c03\u9012\u51cf\u3002 \u8fd9\u6837\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u5143\u7d20\u5165\u6808\u65f6\uff0c\u7834\u574f\u4e86\u6808\u5185\u5355\u8c03\u6027\uff0c\u90a3\u4e48\u4e0d\u65ad\u5f39\u51fa\u6808\u5185\u7684\u5143\u7d20\uff0c\u76f4\u5230\u6808\u9876\u4e0d\u5c0f\u4e8e\u8fd9\u4e2a\u5143\u7d20\uff0c\u7136\u540e\u518d\u8ba9\u8fd9\u4e2a\u5143\u7d20\u5165\u6808\u3002 \u88ab\u8fd9\u4e2a\u5143\u7d20\u5f39\u51fa\u7684\u6240\u6709\u5143\u7d20\u7684 NGE \u5c31\u662f\u8fd9\u4e2a\u65b0\u8fdb\u6808\u5143\u7d20\u7684\u4e0b\u6807\uff0c\u539f\u56e0\u663e\u7136\u3002 \u5982\u679c\u5904\u7406\u5b8c\u6574\u4e2a\u5e8f\u5217\u4e4b\u540e\uff0c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u90a3\u4e48\u8bf4\u660e\u6808\u4e2d\u5143\u7d20\u6ca1\u6709 NGE\u3002 \u5b9e\u73b0\uff08 \u6d1b\u8c37\u6a21\u677f\u9898 \uff09\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 // author : black_trees #include <stack> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int si = 3e6 + 10 ; const int inf = 0x3f3f3f3f ; int ans [ si ]; int a [ si ], n ; std :: stack < int > mns ; // ele that waiting to cal nxt greater ele. int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; for ( int i = 1 ; i <= n ; ++ i ) { while ( ! mns . empty () && a [ i ] > a [ mns . top ()]) ans [ mns . top ()] = i , mns . pop (); mns . push ( i ); } for ( int i = 1 ; i <= n ; ++ i ) cout << ans [ i ] << \" \" ; cout << endl ; return 0 ; } \u590d\u6742\u5ea6 \\(O(n)\\) \u3002 \u5355\u8c03\u6808\u8fd8\u53ef\u4ee5\u7528\u6765 \u4f18\u5316 DP \u3002 \u4e60\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 POJ3250 Bad Hair Day \u6709 \\(N\\) \u5934\u725b\u4ece\u5de6\u5230\u53f3\u6392\u6210\u4e00\u6392\uff0c\u6bcf\u5934\u725b\u6709\u4e00\u4e2a\u9ad8\u5ea6 \\(h_i\\) \uff0c\u8bbe\u5de6\u6570\u7b2c \\(i\\) \u5934\u725b\u4e0e\u300c\u5b83\u53f3\u8fb9\u7b2c\u4e00\u5934\u9ad8\u5ea6 \\(\u2265h_i\\) \u300d\u7684\u725b\u4e4b\u95f4\u6709 \\(c_i\\) \u5934\u725b\uff0c\u8bd5\u6c42 \\(\\sum_{i=1}^{N} c_i\\) \u3002 \u6bd4\u8f83\u57fa\u7840\u7684\u5e94\u7528\u6709\u8fd9\u4e00\u9898\uff0c\u5c31\u662f\u4e2a\u5355\u8c03\u6808\u7684\u7b80\u5355\u5e94\u7528\uff0c\u8bb0\u5f55\u6bcf\u5934\u725b\u88ab\u5f39\u51fa\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u6ca1\u6709\u88ab\u5f39\u51fa\u8fc7\u5219\u4e3a\u6700\u8fdc\u7aef\uff0c\u7a0d\u5fae\u5904\u7406\u4e00\u4e0b\u5373\u53ef\u8ba1\u7b97\u51fa\u9898\u76ee\u6240\u9700\u7ed3\u679c\u3002 \u53e6\u5916\uff0c\u5355\u8c03\u6808\u4e5f\u53ef\u4ee5\u7528\u4e8e\u79bb\u7ebf\u89e3\u51b3 RMQ \u95ee\u9898\u3002 \u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u8be2\u95ee\u6309\u53f3\u7aef\u70b9\u6392\u5e8f\uff0c\u7136\u540e\u6bcf\u6b21\u5728\u5e8f\u5217\u4e0a\u4ece\u5de6\u5f80\u53f3\u626b\u63cf\u5230\u5f53\u524d\u8be2\u95ee\u7684\u53f3\u7aef\u70b9\u5904\uff0c\u5e76\u628a\u626b\u63cf\u5230\u7684\u5143\u7d20\u63d2\u5165\u5230\u5355\u8c03\u6808\u4e2d\u3002\u8fd9\u6837\uff0c\u6bcf\u6b21\u56de\u7b54\u8be2\u95ee\u65f6\uff0c\u5355\u8c03\u6808\u4e2d\u5b58\u50a8\u7684\u503c\u90fd\u662f\u4f4d\u7f6e \\(\\le r\\) \u7684\u3001\u53ef\u80fd\u6210\u4e3a\u7b54\u6848\u7684\u51b3\u7b56\u70b9\uff0c\u5e76\u4e14\u8fd9\u4e9b\u5143\u7d20\u6ee1\u8db3\u5355\u8c03\u6027\u8d28\u3002\u6b64\u65f6\uff0c\u5355\u8c03\u6808\u4e0a\u7b2c\u4e00\u4e2a\u4f4d\u7f6e \\(\\ge l\\) \u7684\u5143\u7d20\u5c31\u662f\u5f53\u524d\u8be2\u95ee\u7684\u7b54\u6848\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u7528\u4e8c\u5206\u67e5\u627e\u5b9e\u73b0\u3002\u4f7f\u7528\u5355\u8c03\u6808\u89e3\u51b3 RMQ \u95ee\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(q\\log q + q\\log n)\\) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u3002","title":"\u5355\u8c03\u6808"},{"location":"algor/ds/monotonous-stack/#_1","text":"\u5355\u8c03\u6808\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u6808\u5185\u5143\u7d20\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5355\u8c03\u7684\u6808\u3002 \u5355\u8c03\u961f\u5217\u53ef\u4ee5\u7528\u6765\u7ef4\u62a4\u6ed1\u52a8\u7a97\u53e3\u6700\u503c\uff0c\u800c\u5355\u8c03\u6808\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u5e8f\u5217\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684 NGE\uff0cNLE\u3002 NGE = Next Greater Element, L \u540c\u7406\u3002 \u5c31\u662f\u7ef4\u62a4\u5bf9\u4e8e \\(\\forall a_{i}\\) \uff0c\u5b83\u5de6\u8fb9\u7684\u7b2c\u4e00\u4e2a\u4f7f\u5f97 \\(a_{j} > a_{i}\\) \u7684 \\(j\\) \u3002","title":"\u6982\u8ff0"},{"location":"algor/ds/monotonous-stack/#_2","text":"NGE \u7684\u66b4\u529b\u505a\u6cd5\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee \\(O(n)\\) \u8dd1\u4e00\u904d\uff0c\u590d\u6742\u5ea6 \\(O(nm)\\) \u4e0d\u80fd\u63a5\u53d7\u3002 \u8003\u8651\u7ef4\u62a4\u4e00\u4e2a\u6808\u8868\u793a\u201c\u5f53\u524d\u8fd8\u672a\u786e\u5b9a NGE\u201d \u7684\u5143\u7d20\u96c6\u5408\u3002 \u7136\u540e\u8ba9\u6808\u4ece\u6808\u5e95\u5230\u6808\u9876\u5355\u8c03\u9012\u51cf\u3002 \u8fd9\u6837\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u5143\u7d20\u5165\u6808\u65f6\uff0c\u7834\u574f\u4e86\u6808\u5185\u5355\u8c03\u6027\uff0c\u90a3\u4e48\u4e0d\u65ad\u5f39\u51fa\u6808\u5185\u7684\u5143\u7d20\uff0c\u76f4\u5230\u6808\u9876\u4e0d\u5c0f\u4e8e\u8fd9\u4e2a\u5143\u7d20\uff0c\u7136\u540e\u518d\u8ba9\u8fd9\u4e2a\u5143\u7d20\u5165\u6808\u3002 \u88ab\u8fd9\u4e2a\u5143\u7d20\u5f39\u51fa\u7684\u6240\u6709\u5143\u7d20\u7684 NGE \u5c31\u662f\u8fd9\u4e2a\u65b0\u8fdb\u6808\u5143\u7d20\u7684\u4e0b\u6807\uff0c\u539f\u56e0\u663e\u7136\u3002 \u5982\u679c\u5904\u7406\u5b8c\u6574\u4e2a\u5e8f\u5217\u4e4b\u540e\uff0c\u6808\u4e0d\u4e3a\u7a7a\uff0c\u90a3\u4e48\u8bf4\u660e\u6808\u4e2d\u5143\u7d20\u6ca1\u6709 NGE\u3002 \u5b9e\u73b0\uff08 \u6d1b\u8c37\u6a21\u677f\u9898 \uff09\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 // author : black_trees #include <stack> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int si = 3e6 + 10 ; const int inf = 0x3f3f3f3f ; int ans [ si ]; int a [ si ], n ; std :: stack < int > mns ; // ele that waiting to cal nxt greater ele. int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; for ( int i = 1 ; i <= n ; ++ i ) { while ( ! mns . empty () && a [ i ] > a [ mns . top ()]) ans [ mns . top ()] = i , mns . pop (); mns . push ( i ); } for ( int i = 1 ; i <= n ; ++ i ) cout << ans [ i ] << \" \" ; cout << endl ; return 0 ; } \u590d\u6742\u5ea6 \\(O(n)\\) \u3002 \u5355\u8c03\u6808\u8fd8\u53ef\u4ee5\u7528\u6765 \u4f18\u5316 DP \u3002","title":"\u5e94\u7528"},{"location":"algor/ds/monotonous-stack/#_3","text":"POJ3250 Bad Hair Day \u6709 \\(N\\) \u5934\u725b\u4ece\u5de6\u5230\u53f3\u6392\u6210\u4e00\u6392\uff0c\u6bcf\u5934\u725b\u6709\u4e00\u4e2a\u9ad8\u5ea6 \\(h_i\\) \uff0c\u8bbe\u5de6\u6570\u7b2c \\(i\\) \u5934\u725b\u4e0e\u300c\u5b83\u53f3\u8fb9\u7b2c\u4e00\u5934\u9ad8\u5ea6 \\(\u2265h_i\\) \u300d\u7684\u725b\u4e4b\u95f4\u6709 \\(c_i\\) \u5934\u725b\uff0c\u8bd5\u6c42 \\(\\sum_{i=1}^{N} c_i\\) \u3002 \u6bd4\u8f83\u57fa\u7840\u7684\u5e94\u7528\u6709\u8fd9\u4e00\u9898\uff0c\u5c31\u662f\u4e2a\u5355\u8c03\u6808\u7684\u7b80\u5355\u5e94\u7528\uff0c\u8bb0\u5f55\u6bcf\u5934\u725b\u88ab\u5f39\u51fa\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u6ca1\u6709\u88ab\u5f39\u51fa\u8fc7\u5219\u4e3a\u6700\u8fdc\u7aef\uff0c\u7a0d\u5fae\u5904\u7406\u4e00\u4e0b\u5373\u53ef\u8ba1\u7b97\u51fa\u9898\u76ee\u6240\u9700\u7ed3\u679c\u3002 \u53e6\u5916\uff0c\u5355\u8c03\u6808\u4e5f\u53ef\u4ee5\u7528\u4e8e\u79bb\u7ebf\u89e3\u51b3 RMQ \u95ee\u9898\u3002 \u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u8be2\u95ee\u6309\u53f3\u7aef\u70b9\u6392\u5e8f\uff0c\u7136\u540e\u6bcf\u6b21\u5728\u5e8f\u5217\u4e0a\u4ece\u5de6\u5f80\u53f3\u626b\u63cf\u5230\u5f53\u524d\u8be2\u95ee\u7684\u53f3\u7aef\u70b9\u5904\uff0c\u5e76\u628a\u626b\u63cf\u5230\u7684\u5143\u7d20\u63d2\u5165\u5230\u5355\u8c03\u6808\u4e2d\u3002\u8fd9\u6837\uff0c\u6bcf\u6b21\u56de\u7b54\u8be2\u95ee\u65f6\uff0c\u5355\u8c03\u6808\u4e2d\u5b58\u50a8\u7684\u503c\u90fd\u662f\u4f4d\u7f6e \\(\\le r\\) \u7684\u3001\u53ef\u80fd\u6210\u4e3a\u7b54\u6848\u7684\u51b3\u7b56\u70b9\uff0c\u5e76\u4e14\u8fd9\u4e9b\u5143\u7d20\u6ee1\u8db3\u5355\u8c03\u6027\u8d28\u3002\u6b64\u65f6\uff0c\u5355\u8c03\u6808\u4e0a\u7b2c\u4e00\u4e2a\u4f4d\u7f6e \\(\\ge l\\) \u7684\u5143\u7d20\u5c31\u662f\u5f53\u524d\u8be2\u95ee\u7684\u7b54\u6848\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u7528\u4e8c\u5206\u67e5\u627e\u5b9e\u73b0\u3002\u4f7f\u7528\u5355\u8c03\u6808\u89e3\u51b3 RMQ \u95ee\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(q\\log q + q\\log n)\\) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u3002","title":"\u4e60\u9898"},{"location":"algor/ds/odt/","text":"\u6982\u8ff0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e00\u79cd\u66b4\u529b\u6570\u636e\u7ed3\u6784\uff0c\u57fa\u4e8e std::set \u6216\u8005\u94fe\u8868 \u57fa\u672c\u7684\u601d\u60f3\u662f \u628a\u6240\u6709\u76f8\u90bb\u4e14\u76f8\u540c\u7684\u5143\u7d20\u5408\u5e76 \u6210\u4e00\u4e2a\u5143\u7d20\u7ef4\u62a4\u3002 \u5982\u679c\u9047\u5230\u533a\u95f4\u7c7b\u7684\u64cd\u4f5c\u5c31\u5206\u88c2\uff0c\u66b4\u529b\u5904\u7406\u3002 \u5728\u968f\u673a\u6570\u636e\u4e0b\u53ef\u4ee5\u505a\u5230\u4f18\u79c0\u7684 \\(\\text{O}(n \\log \\log n)\\) \uff0c\u94fe\u8868\u5b9e\u73b0\u53ef\u4ee5 \\(\\text{O}(n \\log n)\\) \u3002 \u590d\u6742\u5ea6\u8bc1\u660e\u53ef\u4ee5\u770b @hqztrue \u7684\uff1a https://zhuanlan.zhihu.com/p/102786071 \u5177\u4f53\u5b9e\u73b0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u521d\u59cb\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 \u73c2\u6735\u8389\u6811\u7684\u8282\u70b9\u7531\u4e09\u4e2a\u5143\u7d20\u6784\u6210\uff0c \\((l,r,v)\\) \u3002 \u5206\u522b\u8868\u793a\u8fd9\u4e2a\u8282\u70b9\u7ef4\u62a4\u7684\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\u548c\u6743\u503c\u3002 \u56e0\u4e3a\u9700\u8981\u7528 std::set \u5b9e\u73b0\uff0c\u6240\u4ee5\u8fd8\u8981\u91cd\u8f7d\u8fd0\u7b97\u7b26\u3002 1 2 3 4 5 6 struct node { int l , r ; mutable int val ; // if we need change a node's value which already in the set by using iterator, we have to use mutable. node ( const int & il , const int & ir , const int & iv ) : l ( il ), r ( ir ), val ( iv ){} inline bool operator < ( const node & b ) const { return l < b . l ; } }; std :: set < node > odt ; \u521d\u59cb\u5316\u76f4\u63a5\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\u7ef4\u62a4 \\([1,n]\\) \u5373\u53ef\uff0c\u6743\u503c\u6839\u636e\u9898\u76ee\u5224\u65ad\u3002 \u533a\u95f4\u5206\u88c2 \u03c8(\uff40\u2207\u00b4)\u03c8 \u57fa\u672c\u64cd\u4f5c\u4e4b\u4e00\uff0c\u628a \\([l,r]\\) \u5206\u5272\u6210 \\([l,pos),[pos,r]\\) \u5e76\u8fd4\u56de\u4ee3\u8868\u540e\u9762\u90a3\u4e2a\u533a\u95f4\u7684\u8282\u70b9\u7684\u8fed\u4ee3\u5668\u3002 \u5148\u4e8c\u5206\u4e00\u4e0b \\(pos\\) \u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u5220\u9664\u539f\u6765\u7684\u8282\u70b9\uff0c\u65b0\u52a0\u5165\u4e24\u4e2a\u8282\u70b9\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 inline std :: set < node >:: iterator split ( int pos ){ if ( pos > n ) return odt . end (); // the position doesn't exist. std :: set < node >:: iterator it =-- odt . upper_bound (( node ){ pos , 0 , 0 }); // find the node that pos in; if ( it -> l == pos ) return it ; // if pos is the begin of the node, return; int l = it -> l , r = it -> r , v = it -> val ; odt . erase ( it ), odt . insert (( node ){ l , pos -1 , v }); return odt . insert (( node ){ pos , r , v }). first ; // erase the original node, insert two node and return the left one's iterator. } // split the node [l,r] to two smaller node [l,pos),[pos,r]; \u8fd9\u91cc \\(it\\) \u662f\u4e2a\u8fed\u4ee3\u5668\uff0c\u6240\u4ee5\u8981\u7528\u6307\u9488\u8bbf\u95ee\u91cc\u9762\u7684\u6210\u5458\u3002 std::set \u5f53\u4e2d\u7684 insert() \u662f\u6709\u8fd4\u56de\u503c\u7684\u3002 \u662f\u4e00\u4e2a std::pair<std::set<Template>::iterator,bool> \u524d\u8005\u662f\u88ab\u63d2\u5165\u7684\u503c\u7684\u8fed\u4ee3\u5668\uff0c\u540e\u8005\u8868\u793a\u662f\u5426\u63d2\u5165\u6210\u529f\u3002 --upper_bound \u90a3\u91cc\u4e5f\u53ef\u4ee5\u4f7f\u7528 std::prev \u533a\u95f4\u63a8\u5e73 \u03c8(\uff40\u2207\u00b4)\u03c8 \u63a8\u5e73\u4e00\u6bb5\u533a\u95f4\uff0c\u4e5f\u5c31\u662f\u7ed9\u67d0\u4e2a\u533a\u95f4\u5168\u90e8\u8d4b\u503c\u6210\u67d0\u4e2a\u503c \\(v\\) \u3002 \u5982\u679c\u6ca1\u6709\u989d\u5916\u9650\u5236\u7684\u8bdd\uff0c\u5148\u628a \\(l,r\\) \u4ece\u4ed6\u4eec\u5404\u81ea\u6240\u5c5e\u7684\u8282\u70b9\u5f53\u4e2d split \u51fa\u6765\uff0c\u7136\u540e\u628a\u4ed6\u4eec\u4e2d\u95f4\u7684\u8fd9\u4e00\u6bb5\u5168\u90e8\u5220\u9664\uff0c\u518d\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u8282\u70b9 \\((l,r,v)\\) \u7ef4\u62a4\u8fd9\u4e2a\u533a\u95f4\u5373\u53ef\u3002 1 2 3 4 inline void assign ( int l , int r , int v ){ std :: set < node >:: iterator itr = split ( r + 1 ), itl = split ( l ); // because of [), so r+1. and **Remember, split(r+1) first. then split(l)** odt . erase ( itl , itr ), odt . insert (( node ){ l , r , v }); } // change all element in the interval [l,r] to v; \u6ce8\u610f\u4e00\u5b9a\u8981\u5148 split(r+1) \uff0c\u4e0d\u7136 \\(l\\) \u539f\u6765\u6240\u5c5e\u7684\u8282\u70b9\u6709\u53ef\u80fd\u88ab\u5220\u9664\u5bfc\u81f4 Runtime Error\u3002 \u5176\u5b83\u64cd\u4f5c \u03c8(\uff40\u2207\u00b4)\u03c8 \u5176\u5b83\u7684\u64cd\u4f5c\u5229\u7528 split \u548c assign \u66b4\u529b\u641e\u5c31\u597d\u3002 \u57fa\u672c\u90fd\u662f\u8fd9\u6837\uff1a 1 2 3 4 5 6 inline void example ( int l , int r , int v ){ std :: set < node >:: iterator itr = split ( r + 1 ), itl = split ( l ); for (; itl != itr ; ++ itl ){ // blablabla... } return ; }","title":"\u73c2\u6735\u8389\u6811"},{"location":"algor/ds/odt/#_1","text":"\u4e00\u79cd\u66b4\u529b\u6570\u636e\u7ed3\u6784\uff0c\u57fa\u4e8e std::set \u6216\u8005\u94fe\u8868 \u57fa\u672c\u7684\u601d\u60f3\u662f \u628a\u6240\u6709\u76f8\u90bb\u4e14\u76f8\u540c\u7684\u5143\u7d20\u5408\u5e76 \u6210\u4e00\u4e2a\u5143\u7d20\u7ef4\u62a4\u3002 \u5982\u679c\u9047\u5230\u533a\u95f4\u7c7b\u7684\u64cd\u4f5c\u5c31\u5206\u88c2\uff0c\u66b4\u529b\u5904\u7406\u3002 \u5728\u968f\u673a\u6570\u636e\u4e0b\u53ef\u4ee5\u505a\u5230\u4f18\u79c0\u7684 \\(\\text{O}(n \\log \\log n)\\) \uff0c\u94fe\u8868\u5b9e\u73b0\u53ef\u4ee5 \\(\\text{O}(n \\log n)\\) \u3002 \u590d\u6742\u5ea6\u8bc1\u660e\u53ef\u4ee5\u770b @hqztrue \u7684\uff1a https://zhuanlan.zhihu.com/p/102786071","title":"\u6982\u8ff0"},{"location":"algor/ds/odt/#_2","text":"","title":"\u5177\u4f53\u5b9e\u73b0"},{"location":"algor/ds/odt/#_3","text":"\u73c2\u6735\u8389\u6811\u7684\u8282\u70b9\u7531\u4e09\u4e2a\u5143\u7d20\u6784\u6210\uff0c \\((l,r,v)\\) \u3002 \u5206\u522b\u8868\u793a\u8fd9\u4e2a\u8282\u70b9\u7ef4\u62a4\u7684\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\u548c\u6743\u503c\u3002 \u56e0\u4e3a\u9700\u8981\u7528 std::set \u5b9e\u73b0\uff0c\u6240\u4ee5\u8fd8\u8981\u91cd\u8f7d\u8fd0\u7b97\u7b26\u3002 1 2 3 4 5 6 struct node { int l , r ; mutable int val ; // if we need change a node's value which already in the set by using iterator, we have to use mutable. node ( const int & il , const int & ir , const int & iv ) : l ( il ), r ( ir ), val ( iv ){} inline bool operator < ( const node & b ) const { return l < b . l ; } }; std :: set < node > odt ; \u521d\u59cb\u5316\u76f4\u63a5\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\u7ef4\u62a4 \\([1,n]\\) \u5373\u53ef\uff0c\u6743\u503c\u6839\u636e\u9898\u76ee\u5224\u65ad\u3002","title":"\u521d\u59cb\u5316"},{"location":"algor/ds/odt/#_4","text":"\u57fa\u672c\u64cd\u4f5c\u4e4b\u4e00\uff0c\u628a \\([l,r]\\) \u5206\u5272\u6210 \\([l,pos),[pos,r]\\) \u5e76\u8fd4\u56de\u4ee3\u8868\u540e\u9762\u90a3\u4e2a\u533a\u95f4\u7684\u8282\u70b9\u7684\u8fed\u4ee3\u5668\u3002 \u5148\u4e8c\u5206\u4e00\u4e0b \\(pos\\) \u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u5220\u9664\u539f\u6765\u7684\u8282\u70b9\uff0c\u65b0\u52a0\u5165\u4e24\u4e2a\u8282\u70b9\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 inline std :: set < node >:: iterator split ( int pos ){ if ( pos > n ) return odt . end (); // the position doesn't exist. std :: set < node >:: iterator it =-- odt . upper_bound (( node ){ pos , 0 , 0 }); // find the node that pos in; if ( it -> l == pos ) return it ; // if pos is the begin of the node, return; int l = it -> l , r = it -> r , v = it -> val ; odt . erase ( it ), odt . insert (( node ){ l , pos -1 , v }); return odt . insert (( node ){ pos , r , v }). first ; // erase the original node, insert two node and return the left one's iterator. } // split the node [l,r] to two smaller node [l,pos),[pos,r]; \u8fd9\u91cc \\(it\\) \u662f\u4e2a\u8fed\u4ee3\u5668\uff0c\u6240\u4ee5\u8981\u7528\u6307\u9488\u8bbf\u95ee\u91cc\u9762\u7684\u6210\u5458\u3002 std::set \u5f53\u4e2d\u7684 insert() \u662f\u6709\u8fd4\u56de\u503c\u7684\u3002 \u662f\u4e00\u4e2a std::pair<std::set<Template>::iterator,bool> \u524d\u8005\u662f\u88ab\u63d2\u5165\u7684\u503c\u7684\u8fed\u4ee3\u5668\uff0c\u540e\u8005\u8868\u793a\u662f\u5426\u63d2\u5165\u6210\u529f\u3002 --upper_bound \u90a3\u91cc\u4e5f\u53ef\u4ee5\u4f7f\u7528 std::prev","title":"\u533a\u95f4\u5206\u88c2"},{"location":"algor/ds/odt/#_5","text":"\u63a8\u5e73\u4e00\u6bb5\u533a\u95f4\uff0c\u4e5f\u5c31\u662f\u7ed9\u67d0\u4e2a\u533a\u95f4\u5168\u90e8\u8d4b\u503c\u6210\u67d0\u4e2a\u503c \\(v\\) \u3002 \u5982\u679c\u6ca1\u6709\u989d\u5916\u9650\u5236\u7684\u8bdd\uff0c\u5148\u628a \\(l,r\\) \u4ece\u4ed6\u4eec\u5404\u81ea\u6240\u5c5e\u7684\u8282\u70b9\u5f53\u4e2d split \u51fa\u6765\uff0c\u7136\u540e\u628a\u4ed6\u4eec\u4e2d\u95f4\u7684\u8fd9\u4e00\u6bb5\u5168\u90e8\u5220\u9664\uff0c\u518d\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u8282\u70b9 \\((l,r,v)\\) \u7ef4\u62a4\u8fd9\u4e2a\u533a\u95f4\u5373\u53ef\u3002 1 2 3 4 inline void assign ( int l , int r , int v ){ std :: set < node >:: iterator itr = split ( r + 1 ), itl = split ( l ); // because of [), so r+1. and **Remember, split(r+1) first. then split(l)** odt . erase ( itl , itr ), odt . insert (( node ){ l , r , v }); } // change all element in the interval [l,r] to v; \u6ce8\u610f\u4e00\u5b9a\u8981\u5148 split(r+1) \uff0c\u4e0d\u7136 \\(l\\) \u539f\u6765\u6240\u5c5e\u7684\u8282\u70b9\u6709\u53ef\u80fd\u88ab\u5220\u9664\u5bfc\u81f4 Runtime Error\u3002","title":"\u533a\u95f4\u63a8\u5e73"},{"location":"algor/ds/odt/#_6","text":"\u5176\u5b83\u7684\u64cd\u4f5c\u5229\u7528 split \u548c assign \u66b4\u529b\u641e\u5c31\u597d\u3002 \u57fa\u672c\u90fd\u662f\u8fd9\u6837\uff1a 1 2 3 4 5 6 inline void example ( int l , int r , int v ){ std :: set < node >:: iterator itr = split ( r + 1 ), itl = split ( l ); for (; itl != itr ; ++ itl ){ // blablabla... } return ; }","title":"\u5176\u5b83\u64cd\u4f5c"},{"location":"algor/ds/old-p-seg/","text":"\u4e3b\u5e2d\u6811 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6cdb\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e3b\u5e2d\u6811\u5168\u79f0\u53ef\u6301\u4e45\u5316\u6743\u503c\u7ebf\u6bb5\u6811\uff08\u7684\u5dee\u5206\u524d\u7f00\u548c\uff09\uff0c\u56e0\u4e3a\u6743\u503c\u7ebf\u6bb5\u6811\u548c\u7ebf\u6bb5\u6811\u6ca1\u6709\u592a\u5927\u7684\u533a\u522b\uff0c\u5c31\u53ea\u8bf4\u4e3b\u5e2d\u6811\u4e86\u3002 \u4f46\u662f\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0c\u4e3b\u5e2d\u6811\u662f\u5229\u7528\u53ef\u6301\u4e45\u5316\u7684\u601d\u60f3\u6765\u5b9e\u73b0\u9759\u6001 \u533a\u95f4 \u7b2c \\(k\\) \u5927\uff0c\u800c\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u5219\u662f\u771f\u6b63\u7684\u76f4\u63a5\u7ef4\u62a4\u5404\u4e2a\u5386\u53f2\u7248\u672c\u3002 \u4e3b\u5e2d\u6811\u7684\u601d\u60f3\u548c\u53ef\u6301\u4e45\u5316 Trie \u7684\u601d\u60f3\u662f\u4e00\u81f4\u7684\uff0c\u90fd\u662f\u4ee5\u51fd\u6570\u5f0f\u7f16\u7a0b\u7684\u65b9\u5f0f\u4fdd\u5b58\u5386\u53f2\u7248\u672c\uff0c\u4ee5\u628a\u4fe1\u606f\u4ece\u5168\u5c40\u8f6c\u5316\u4e3a\u533a\u95f4\u3002 \u4e00\u4e2a\u6bd4\u8f83\u7ecf\u5178\u7684\u95ee\u9898\u5c31\u662f\u9759\u6001\u533a\u95f4\u7b2c k \u5927\uff0c\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u663e\u7136\u53ef\u4ee5\u5f88\u8f7b\u677e\u641e\u5b9a\u5168\u5c40\u7684\u7248\u672c\u3002 \u4e8e\u662f\u628a\u6743\u503c\u7ebf\u6bb5\u6811\u53ef\u6301\u4e45\u5316\u4e4b\u540e\u5229\u7528\u524d\u7f00\u548c\u7684\u601d\u60f3\u5c31\u53ef\u4ee5\u505a\u533a\u95f4\u4e86\u3002 \u4e0d\u8fc7\u4e3b\u5e2d\u6811\u4e00\u822c\u96be\u4ee5\u652f\u6301\u533a\u95f4\u4fee\u6539\uff0c\u6700\u591a\u652f\u6301\u4e00\u4e0b\u5355\u70b9\u4fee\u6539\u3002 \u533a\u95f4\u4fee\u6539\u5728\u4fe1\u606f\u6bd4\u8f83\u7279\u6b8a\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u7528\u6807\u8bb0\u6c38\u4e45\u5316\u505a\uff0c\u4e0d\u8fc7\u4e5f\u975e\u5e38\u6709\u5c40\u9650\u6027\u3002 \u57fa\u672c\u601d\u60f3 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4ecd\u7136\u8003\u8651\u9759\u6001\u533a\u95f4\u7b2c k \u5927\u95ee\u9898\u3002 \u4e3b\u5e2d\u6811\u7684\u4e3b\u8981\u601d\u60f3\u5c31\u662f\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217\uff0c\u4ece\u5de6\u5f80\u53f3\u4f9d\u6b21\u63d2\u5165\u5e8f\u5217\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u3002 \u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\u7684\u65f6\u5019\u7ef4\u62a4\u5386\u53f2\u7248\u672c\uff0c\u4e5f\u5c31\u662f\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u5143\u7d20\u521a\u63d2\u5165\u7684\u65f6\u5019\uff0c\u7ebf\u6bb5\u6811\u7684\u6837\u5b50\u3002 \u663e\u7136\u4e00\u4e2a\u6bd4\u8f83\u66b4\u529b\u7684\u505a\u6cd5\u662f\uff0c\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u6570\uff08\u65b0\u5efa\u4e00\u4e2a\u7248\u672c\uff09\u7684\u65f6\u5019\uff0c\u90fd\u628a\u539f\u6765\u7684\u7ebf\u6bb5\u6811\u590d\u5236\u4e00\u6b21\uff0c\u7136\u540e\u628a\u65b0\u7684\u7248\u672c\u52a0\u4e0a\u53bb\u3002 \u4e0d\u8fc7\u8fd9\u6837\u7a7a\u95f4\u662f \\(O(nm)\\) \u7684\uff0c\u975e\u5e38\u4e0d\u4f18\u79c0\u3002 \u53d1\u73b0\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u6570\uff0c\u5728\u503c\u57df\u4e0a\u53ea\u4f1a\u4fee\u6539\u4e00\u4e2a\u70b9\uff0c\u5bf9\u5e94\u5230\u7ebf\u6bb5\u6811\u4e0a\u5c31\u662f\u53ea\u4fee\u6539\u4e00\u6761\u4ece\u6839\u8282\u70b9\u5230\u5bf9\u5e94\u53f6\u5b50\u8282\u70b9\u7684\u94fe\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u628a\u8fd9\u4e2a\u88ab\u4fee\u6539\u7684\u94fe\u5355\u72ec\u590d\u5236\u4e00\u6b21\u62c9\u51fa\u6765\uff0c\u8bb0\u5f55\u4e00\u4e0b\u63d2\u5165\u4e4b\u540e\uff0c\u5f53\u524d\u7248\u672c\u6811\u6839\u7684\u7f16\u53f7\u3002 \u4e8e\u662f\u7a7a\u95f4\u5f00\u9500\u5c31\u5927\u5927\u51cf\u5c0f\u4e86\uff0c\u4ece \\(O(nm)\\) \u53d8\u6210\u4e86 \\(O(n + m\\log n)\\) \u3002 \u5177\u4f53\u6765\u8bf4\u662f\u8fd9\u6837\u7684\uff1a \u84dd\u8272\u8282\u70b9\u662f\u539f\u6765\u7248\u672c\u4e0a\u7684\u94fe\uff0c\u7ea2\u8272\u8282\u70b9\u662f\u73b0\u5728\u7248\u672c\u4e0a\u7684\u94fe\u3002 \u7b80\u5355\u6765\u8bf4\u5c31\u662f\uff0c\u5bf9\u4e8e\u4e0a\u4e00\u4e2a\u7248\u672c\u7684\u8282\u70b9 \\(p\\) \uff0c\u590d\u5236\u4e00\u4e2a\u65b0\u7684\u8282\u70b9 \\(q\\) \u51fa\u6765\u3002 \u5982\u679c\u4e0b\u4e00\u6b65\u662f\u9012\u5f52 \\(p.ls\\) \uff0c\u90a3\u4e48 \\(q.ls\\) \u5c31\u9700\u8981\u65b0\u5efa\uff0c\u7136\u540e \\(q.rs\\) \u5c31\u662f\u539f\u6765\u7684 \\(p.ls\\) \uff0c\u53cd\u8fc7\u6765\u540c\u7406\u3002 \u67e5\u8be2 \\([l, r]\\) \u7684\u7b2c k \u5927\u4e5f\u6bd4\u8f83\u597d\u505a\uff0c\u5c31\u76f4\u63a5\u7ebf\u6bb5\u6811\u4e8c\u5206\uff0c\u7136\u540e\u7528\u4e24\u4e2a\u6307\u9488 \\(p, q\\) \uff0c \u540c\u6b65 \u904d\u5386 \\(l - 1\\) \uff0c \\(r\\) \u4e24\u4e2a\u7248\u672c\u3002 \u6bd4\u8f83\u4e00\u4e0b\u5f53\u524d\u7684 k \u548c lcnt = dat[ls[q]] - dat[ls[p]] \u7684\u5927\u5c0f\uff0c\u5982\u679c \\(k \\le lcnt\\) \uff0c\u5c31\u8ba9 \\(p,q\\) \u90fd\u5f80\u5de6\u5b50\u6811\u8d70\uff0c\u5426\u5219 \\(k - lcnt\\) \uff0c\u7136\u540e\u8d70\u53f3\u5b50\u6811\u5c31\u884c\u4e86\u3002 \u53ef\u4ee5\u7406\u89e3\u6210\u5728\u4e24\u9897\u6743\u503c\u7ebf\u6bb5\u6811\u5408\u5e76\u4e4b\u540e\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u8fdb\u884c\u64cd\u4f5c \uff0c\u5408\u5e76\u540e\u7684\u4fe1\u606f\u5c31\u662f \\(r\\) \u7248\u672c\u7684\u4fe1\u606f\u51cf\u53bb \\(l - 1\\) \u7684\u4fe1\u606f\u3002 \uff08\u6240\u4ee5\u4e3b\u5e2d\u6811\u7ef4\u62a4\u7684\u4fe1\u606f\u4e0d\u4ec5\u8981\u6ee1\u8db3\u5e7a\u534a\u7fa4\u6027\u8d28\uff0c\u8fd8\u9700\u8981\u6ee1\u8db3\u533a\u95f4\u53ef\u51cf\u6027\uff01\uff09 \u5efa\u6811\u7684\u65f6\u5019\u5148\u5bf9\u4e8e\u503c\u57df\u5efa\u4e00\u4e2a\u6bcf\u4e2a\u8282\u70b9\u6743\u503c\u90fd\u4e3a\u7a7a\u7684\u7ebf\u6bb5\u6811\uff0c\u6839\u8282\u70b9\u6807\u8bb0\u4e3a\u7b2c\u96f6\u4e2a\u7248\u672c\u7684\u6839\u8282\u70b9\uff0c\u65b9\u4fbf\u4e4b\u540e\u66f4\u65b0\u3002 \u7a7a\u95f4\u5f00\u4e2a <<5 \u5c31\u884c\u4e86\uff0c\u53cd\u6b63\u4e00\u822c\u80fd\u7528\u4e3b\u5e2d\u6811\u7684\u9898\u7a7a\u95f4\u90fd\u5f88\u5bbd\u677e\u3002 \u4ee3\u7801\uff1a POJ2104 - K-th Number 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #ifndef ONLINE_JUDGE #include <cstdarg> #define meow(format, ...) \\ fprintf(stderr, format, ## __VA_ARGS__) // remember to open stream sync! #else #define meow(format, ...) 1231 #endif using namespace std ; // using i64 = long long; template < typename __Tp > void read ( __Tp & x ) { int f = x = 0 ; char ch = getchar (); for (; ! isdigit ( ch ); ch = getchar ()) if ( ch == '-' ) f = 1 ; for (; isdigit ( ch ); ch = getchar ()) x = ( x << 1 ) + ( x << 3 ) + ( ch ^ 48 ); if ( f ) x = - x ; } // void read(modint &x) { int __value; read(__value); x = __value; return; } void read ( char & ch ) { for ( ch = getchar (); isspace ( ch ); ch = getchar ()); } // template <typename __Tp1, typename ...__Tp2> void read(__Tp1 &x, __Tp2 &... y) { read(x), read(y...); } template < typename __Tp > void write ( __Tp x ) { if ( x < 0 ) putchar ( '-' ), x = - x ; if ( x > 9 ) write ( x / 10 ); putchar ( x % 10 + 48 ); } void write ( char ch ) { putchar ( ch ); } // void write(modint x) { write(x.val()); } void write ( const char * s ) { for (; * s ; ++ s ) putchar ( * s ); } // template <typename __Tp1, typename ...__Tp2> void write(__Tp1 x, __Tp2 ... y) { write(x), write(y...); } const int si = 1e5 + 10 ; int n , m , len ; int a [ si ], id [ si ]; int tot = 0 ; int ls [ si << 5 ], rs [ si << 5 ]; int root [ si << 5 ], dat [ si << 5 ]; int build ( int l , int r ) { int p = ++ tot ; if ( l == r ) return p ; int mid = ( l + r ) >> 1 ; ls [ p ] = build ( l , mid ), rs [ p ] = build ( mid + 1 , r ); return p ; } int insert ( int last , int l , int r , int val ) { // last \u662f\u4e0a\u4e00\u4e2a\u7248\u672c\u7684 [l, r] \u8282\u70b9\u3002 int p = ++ tot ; dat [ p ] = dat [ last ] + 1 ; if ( l == r ) return p ; int mid = ( l + r ) >> 1 ; if ( val <= mid ) ls [ p ] = insert ( ls [ last ], l , mid , val ), rs [ p ] = rs [ last ]; else rs [ p ] = insert ( rs [ last ], mid + 1 , r , val ), ls [ p ] = ls [ last ]; return p ; } int ask ( int p , int q , int l , int r , int kth ) { if ( l == r ) return l ; int mid = ( l + r ) >> 1 ; int lcnt = dat [ ls [ q ]] - dat [ ls [ p ]]; if ( kth <= lcnt ) return ask ( ls [ p ], ls [ q ], l , mid , kth ); else return ask ( rs [ p ], rs [ q ], mid + 1 , r , kth - lcnt ); } int index ( int val ) { return lower_bound ( id + 1 , id + 1 + len , val ) - id ; } int main () { read ( n ), read ( m ); for ( int i = 1 ; i <= n ; ++ i ) read ( a [ i ]), id [ i ] = a [ i ]; sort ( id + 1 , id + 1 + n ); len = unique ( id + 1 , id + 1 + n ) - id - 1 ; root [ 0 ] = build ( 1 , len ); for ( int i = 1 ; i <= n ; ++ i ) root [ i ] = insert ( root [ i - 1 ], 1 , len , index ( a [ i ])); while ( m -- ) { int l , r , k ; read ( l ), read ( r ), read ( k ); write ( id [ ask ( root [ l - 1 ], root [ r ], 1 , len , k )]); write ( endl ); } return 0 ; } \u590d\u6742\u5ea6\u663e\u7136 1log\u3002 \u603b\u7ed3\u4e00\u4e0b\uff0c\u4e3b\u5e2d\u6811\u9898\u53ea\u9700\u8981\u8003\u8651\uff0c\u600e\u4e48\u7ef4\u62a4\u5386\u53f2\u7248\u672c\u4ee5\u8fbe\u5230\u533a\u95f4\u67e5\u8be2\uff0c \u600e\u4e48\u51d1\u51fa\u4e00\u4e2a\u65b0\u7684\u4fe1\u606f\uff0c\u653e\u5230\u4e00\u4e2a\u65b0\u7684\u7ebf\u6bb5\u6811\u4e0a\uff0c\u5728\u8fd9\u4e2a\u65b0\u7684\u7ebf\u6bb5\u6811\u4e0a\u8fdb\u884c\u64cd\u4f5c\u3002 \uff08\u65b0\u7684\u7ebf\u6bb5\u6811\u5e76\u4e0d\u9700\u8981\u5b9e\u9645\u5408\u5e76\u51fa\u6765\uff0c\u53ea\u9700\u8981\u591a\u4e2a\u6307\u9488\u540c\u6b65\u904d\u5386\u9700\u8981\u7684\u7248\u672c\u5373\u53ef\uff09 \u51e0\u4e2a\u7b80\u5355\u7684\u4f8b\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 Luogu3567 [POI2014]KUR-Couriers \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4e00\u4e2a\u6570\u5217\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a\u533a\u95f4\u5185\u6709\u6ca1\u6709\u4e00\u4e2a\u6570\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a \u5982\u679c\u6709\u8f93\u51fa\u8fd9\u4e2a\u6570\uff0c\u5426\u5219\u8f93\u51fa 0. 5e5 \u59a5\u59a5\u7684\u677f\u5b50\u9898\uff0c\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u7ebf\u6bb5\u6811\u4e8c\u5206\u5c31\u884c\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 5e5 + 10 ; int n , m , len ; int a [ si ], id [ si ]; int tot = 0 ; int ls [ si << 5 ], rs [ si << 5 ]; int root [ si << 5 ], dat [ si << 5 ]; int get_id ( int val ) { return lower_bound ( id + 1 , id + 1 + len , val ) - id ; } int build ( int l , int r ) { int p = ++ tot ; if ( l == r ) return p ; int mid = ( l + r ) >> 1 ; ls [ p ] = build ( l , mid ), rs [ p ] = build ( mid + 1 , r ); return p ; } int insert ( int last , int l , int r , int v ) { int p = ++ tot ; dat [ p ] = dat [ last ] + 1 ; if ( l == r ) return p ; int mid = ( l + r ) >> 1 ; if ( v <= mid ) ls [ p ] = insert ( ls [ last ], l , mid , v ), rs [ p ] = rs [ last ]; else rs [ p ] = insert ( rs [ last ], mid + 1 , r , v ), ls [ p ] = ls [ last ]; return p ; } int ask ( int p , int q , int l , int r , int k ) { if ( l == r ) return l ; int mid = ( l + r ) >> 1 ; int lcnt = dat [ ls [ q ]] - dat [ ls [ p ]]; int rcnt = dat [ rs [ q ]] - dat [ rs [ p ]]; if ( k < lcnt ) return ask ( ls [ p ], ls [ q ], l , mid , k ); if ( k < rcnt ) return ask ( rs [ p ], rs [ q ], mid + 1 , r , k ); return 0 ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> m ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], id [ i ] = a [ i ]; sort ( id + 1 , id + 1 + n ); len = unique ( id + 1 , id + 1 + n ) - id - 1 ; root [ 0 ] = build ( 1 , len ); for ( int i = 1 ; i <= n ; ++ i ) root [ i ] = insert ( root [ i - 1 ], 1 , len , get_id ( a [ i ])); while ( m -- ) { int l , r ; cin >> l >> r ; cout << id [ ask ( root [ l - 1 ], root [ r ], 1 , len , ( r - l + 1 ) >> 1 )] << endl ; } return 0 ; } Luogu3919 \u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff09 \u03c8(\uff40\u2207\u00b4)\u03c8 \u9996\u5148\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n \\le 10^6\\) \u7684\u6570\u7ec4\uff0c\u7136\u540e\uff0c \u5b9e\u73b0\u4e00\u4e2a\u53ef\u6301\u4e45\u5316\u7684\u6570\u7ec4\uff0c\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a 1. \u5728\u67d0\u4e2a\u5386\u53f2\u7248\u672c\u4e0a\u4fee\u6539\u67d0\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u503c\u3002 2. \u8be2\u95ee\u67d0\u4e00\u4e2a\u5386\u53f2\u7248\u672c\u4e0a\u67d0\u4e00\u4e2a\u4f4d\u7f6e\u7684\u503c\uff0c\u5e76\u590d\u5236\u4e00\u4e2a\u65b0\u7248\u672c\u3002 \u5f88\u7b80\u5355\u7684\u677f\u5b50\u9898\uff0c\u4e0d\u8fc7\u8fd9\u91cc\u4e0d\u662f\u4e3b\u5e2d\u6811\u4e86\uff0c\u800c\u662f\u4e00\u822c\u7684\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u3002 \u672c\u8d28\u4e00\u6837\uff0c\u4e0d\u8fc7\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u4e0d\u9700\u8981\u4e00\u4e2a\u4e00\u4e2a\u63d2\u5165\u539f\u5e8f\u5217\u7684\u5143\u7d20\uff0c\u56e0\u4e3a\u6b64\u5904\u4e0d\u662f\u7ef4\u62a4\u503c\u57df\u800c\u662f\u76f4\u63a5\u7ef4\u62a4\u6574\u4e2a\u5e8f\u5217\u3002 \u800c\u4e14\u8fd9\u91cc\u53ef\u4ee5\u652f\u6301\u5355\u70b9\u4fee\u6539\uff0c\u4e3b\u5e2d\u6811\u4e0d\u5957\u4e00\u4e2a\u522b\u7684\u6570\u636e\u7ed3\u6784\u5f88\u96be\u652f\u6301\u5355\u70b9\u4fee\u6539\uff0c\u56e0\u4e3a\u4e3b\u5e2d\u6811\u662f\u7ef4\u62a4\u7684\u503c\u57df\uff0c\u5728\u7ef4\u6301\u6743\u503c\u4fe1\u606f\u7684\u533a\u95f4\u53ef\u52a0\u51cf\u6027\u7684\u540c\u65f6\uff0c\u5bf9\u4e8e\u5e8f\u5217\u76f4\u63a5\u64cd\u4f5c\u5f88\u4e0d\u65b9\u4fbf\u3002 \u5177\u4f53\u5b9e\u73b0\u5c31\u770b\u4ee3\u7801\u5427\uff0c\u8fd9\u91cc\u8fd8\u4e0d\u9700\u8981\u7ef4\u62a4\u533a\u95f4\u548c\uff0c\u53ea\u9700\u8981\u7ef4\u62a4\u53f6\u5b50\u8282\u70b9\u7684\u503c\u5c31\u884c\u4e86\u3002 \u5982\u679c\u8981\u7ef4\u62a4\u533a\u95f4\u548c\u5c31\u8981\u52a0\u4e0a Pushup \u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 1e6 + 10 ; int n , m ; int a [ si ]; int tot = 0 ; int ls [ si << 5 ], rs [ si << 5 ]; int root [ si << 5 ], dat [ si << 5 ]; int build ( int l , int r ) { int p = ++ tot ; if ( l == r ) { dat [ p ] = a [ l ]; return p ; } int mid = ( l + r ) >> 1 ; ls [ p ] = build ( l , mid ), rs [ p ] = build ( mid + 1 , r ); return p ; } int modify ( int last , int l , int r , int pos , int v ) { int p = ++ tot ; if ( l == r ) { dat [ p ] = v ; return p ; } int mid = ( l + r ) >> 1 ; if ( pos <= mid ) ls [ p ] = modify ( ls [ last ], l , mid , pos , v ), rs [ p ] = rs [ last ]; else rs [ p ] = modify ( rs [ last ], mid + 1 , r , pos , v ), ls [ p ] = ls [ last ]; return p ; } int query ( int p , int l , int r , int pos ) { if ( l == r ) return dat [ p ]; int mid = ( l + r ) >> 1 ; if ( pos <= mid ) return query ( ls [ p ], l , mid , pos ); else return query ( rs [ p ], mid + 1 , r , pos ); } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> m ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; root [ 0 ] = build ( 1 , n ); int cnt = 0 ; while ( m -- ) { int ver , opt ; cin >> ver >> opt ; if ( opt == 1 ) { int x , v ; cin >> x >> v ; root [ ++ cnt ] = modify ( root [ ver ], 1 , n , x , v ); } else { int x ; cin >> x ; int val = query ( root [ ver ], 1 , n , x ); root [ ++ cnt ] = modify ( root [ ver ], 1 , n , x , val ); cout << val << endl ; } } return 0 ; } Luogu2633 Count on a tree \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e00\u68f5 \\(n\\) \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u6743\u503c\u3002\u6709 \\(m\\) \u4e2a\u8be2\u95ee\uff0c \u6bcf\u6b21\u7ed9\u4f60 \\(u,v,k\\) \uff0c\u4f60\u9700\u8981\u56de\u7b54 \\(u \\text{ xor last}\\) \u548c \\(v\\) \u8fd9\u4e24\u4e2a\u8282\u70b9\u95f4\u7b2c \\(k\\) \u5c0f\u7684\u70b9\u6743\u3002 \u5176\u4e2d \\(\\text{last}\\) \u662f\u4e0a\u4e00\u4e2a\u8be2\u95ee\u7684\u7b54\u6848\uff0c\u5b9a\u4e49\u5176\u521d\u59cb\u4e3a \\(0\\) \uff0c\u5373\u7b2c\u4e00\u4e2a\u8be2\u95ee\u7684 \\(u\\) \u662f\u660e\u6587\u3002 1e5 \u53d1\u73b0\u7b2c \\(i\\) \u4e2a\u7248\u672c\u7684\u4e3b\u5e2d\u6811\u53ef\u4ee5\u611f\u6027\u7684\u7406\u89e3\u4e3a\u4e00\u79cd\u524d\u7f00\u548c\u3002 \u4e8e\u662f\u5728\u8be2\u95ee \\([l, r]\\) \u7684\u65f6\u5019\u53ef\u4ee5\u628a dat[r] - dat[l - 1] \u5f53\u4f5c\u4fe1\u606f\u62cd\u5230\u4e00\u4e2a\u65b0\u7684\u7ebf\u6bb5\u6811\u4e0a\u64cd\u4f5c\uff08\u5b9e\u9645\u64cd\u4f5c\u5c31\u662f\u62ff\u4e24\u4e2a\u6307\u9488\u540c\u6b65\u8d70\u4e24\u4e2a\u7248\u672c\u7684\u7ebf\u6bb5\u6811\uff09\u3002 \u8fd9\u91cc\u662f\u5728\u6811\u4e0a\u8be2\u95ee\uff0c\u53ef\u4ee5\u8003\u8651\u6811\u5256\uff0c\u4f46\u662f\u4f3c\u4e4e\u5f88\u9ebb\u70e6\u3002 \u4e3b\u5e2d\u6811\u7ef4\u62a4\u7684\u4fe1\u606f\u5177\u6709\u533a\u95f4\u53ef\u52a0\u53ef\u51cf\u6027\uff0c\u6362\u53e5\u8bdd\u8bf4\u53ef\u4ee5\u505a\u524d\u7f00\u548c\u4e5f\u53ef\u4ee5\u5dee\u5206\u3002 \u6240\u4ee5\u6211\u4eec\u8003\u8651\u600e\u4e48\u51d1\u4e00\u4e2a\u65b0\u7684\u7ebf\u6bb5\u6811\uff0c\u4f7f\u4ed6\u80fd\u5305\u542b\u8def\u5f84 \\((u,v)\\) \u7684\u4fe1\u606f\uff0c\u7136\u540e\u5728\u4e0a\u9762\u7ebf\u6bb5\u6811\u4e8c\u5206\u5c31\u53ef\u4ee5\u4e86\u3002 \u6211\u4eec\u8bbe\u7248\u672c \\(i\\) \u8868\u793a\u6839\u8282\u70b9\u5230\u8282\u70b9 \\(i\\) \u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8282\u70b9\u6784\u6210\u7684\u4e3b\u5e2d\u6811\uff0c \u7136\u540e\u53d1\u73b0\u6b64\u65f6\u53ef\u4ee5\u6811\u4e0a\u5dee\u5206\u6765\u51d1\u51fa\u8def\u5f84 \\((u, v)\\) \uff0c\u4e8e\u662f\u65b0\u7684\u7ebf\u6bb5\u6811\u7684\u4fe1\u606f\u5c31\u662f dat[u] + dat[v] - dat[lca(u, v)] - dat[fa(lca(u, v))] \u3002 \u5b9e\u73b0\u76f4\u63a5\u62ff\u56db\u4e2a\u6307\u9488\u540c\u6b65\u904d\u5386\u8fd9\u56db\u4e2a\u7248\u672c\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 1e5 + 10 ; int n , m , len , cnt ; int a [ si ], id [ si ]; int head [ si << 1 ]; struct Edge { int ver , Next ; } e [ si << 1 ]; void add ( int u , int v ) { e [ cnt ]. ver = v , e [ cnt ]. Next = head [ u ], head [ u ] = cnt ++ ; } int get_id ( int val ) { return lower_bound ( id + 1 , id + 1 + len , val ) - id ; } int tot = 0 ; int ls [ si << 5 ], rs [ si << 5 ]; int root [ si << 5 ], dat [ si << 5 ]; int build ( int l , int r ) { int p = ++ tot ; if ( l == r ) return p ; int mid = ( l + r ) >> 1 ; ls [ p ] = build ( l , mid ), rs [ p ] = build ( mid + 1 , r ); return p ; } int insert ( int last , int l , int r , int v ) { int p = ++ tot ; dat [ p ] = dat [ last ] + 1 ; if ( l == r ) return p ; int mid = ( l + r ) >> 1 ; if ( v <= mid ) ls [ p ] = insert ( ls [ last ], l , mid , v ), rs [ p ] = rs [ last ]; else rs [ p ] = insert ( rs [ last ], mid + 1 , r , v ), ls [ p ] = ls [ last ]; return p ; } int ask ( int p , int q , int u , int v , int l , int r , int kth ) { if ( l == r ) return l ; int mid = ( l + r ) >> 1 ; int lcnt = dat [ ls [ p ]] + dat [ ls [ q ]] - dat [ ls [ u ]] - dat [ ls [ v ]]; if ( kth <= lcnt ) return ask ( ls [ p ], ls [ q ], ls [ u ], ls [ v ], l , mid , kth ); else return ask ( rs [ p ], rs [ q ], rs [ u ], rs [ v ], mid + 1 , r , kth - lcnt ); } int dep [ si ]; int f [ si ][ 21 ]; void dfs ( int u , int fa ) { f [ u ][ 0 ] = fa , dep [ u ] = dep [ fa ] + 1 ; for ( int i = 1 ; i <= 20 ; ++ i ) f [ u ][ i ] = f [ f [ u ][ i - 1 ]][ i - 1 ]; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; root [ v ] = insert ( root [ u ], 1 , len , get_id ( a [ v ])); dfs ( v , u ); } } int lca ( int u , int v ) { if ( dep [ u ] < dep [ v ]) swap ( u , v ); for ( int i = 20 ; i >= 0 ; -- i ) if ( dep [ f [ u ][ i ]] >= dep [ v ]) u = f [ u ][ i ]; if ( u == v ) return u ; for ( int i = 20 ; i >= 0 ; -- i ) if ( f [ u ][ i ] != f [ v ][ i ]) u = f [ u ][ i ], v = f [ v ][ i ]; return f [ u ][ 0 ]; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); memset ( head , -1 , sizeof head ); cin >> n >> m ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], id [ i ] = a [ i ]; sort ( id + 1 , id + 1 + n ); len = unique ( id + 1 , id + 1 + n ) - id - 1 ; for ( int i = 1 ; i < n ; ++ i ) { int u , v ; cin >> u >> v ; add ( u , v ), add ( v , u ); } root [ 0 ] = build ( 1 , len ); root [ 1 ] = insert ( root [ 0 ], 1 , len , get_id ( a [ 1 ])); dfs ( 1 , 0 ); int lastans = 0 ; while ( m -- ) { int u , v , k ; cin >> u >> v >> k ; u ^= lastans ; int Lca = lca ( u , v ), Fa = f [ Lca ][ 0 ]; cout << ( lastans = id [ ask ( root [ u ], root [ v ], root [ Lca ], root [ Fa ], 1 , len , k )]) << endl ; } return 0 ; } \u652f\u6301\u5355\u70b9\u4fee\u6539\u7684\u7b2c k \u5927 \u03c8(\uff40\u2207\u00b4)\u03c8 Luogu2617 Dynamic Rankings \u5355\u70b9\u4fee\u6539\u533a\u95f4\u8be2\u95ee\u7b2c \\(k\\) \u5927\uff0c1e5\u3002 \u76f4\u63a5\u66b4\u529b\u505a\u7684\u8bdd\uff0c\u6bcf\u6b21\u5355\u70b9\u4fee\u6539 \\(i\\) \u9700\u8981\u4fee\u6539 \\([i,n]\\) \u7684\u6240\u6709\u7248\u672c\uff0c\u5355\u6b21\u590d\u6742\u5ea6\u662f \\(O(n \\log n)\\) \u7684\uff0c\u4e0d\u80fd\u63a5\u53d7\u3002 \u53ef\u4ee5\u60f3\u5230\u4e3b\u5e2d\u6811\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u201c\u5e7f\u4e49\u201d\u7684\u524d\u7f00\u548c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u4e3b\u5e2d\u6811\uff0c\u6765\u8ba9\u9700\u8981\u4fee\u6539\u7684\u7248\u672c\u6570\u51cf\u5c11\u5230 \\(O(\\log n)\\) \u4e2a\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u6bcf\u6b21\u4fee\u6539 \\(x\\) \u8fd9\u4e2a\u7248\u672c\u7684\u67d0\u4e2a\u503c\uff0c\u5c31\u4fee\u6539 \\(x + \\text{lowbit}(x), x + \\text{lowbit}(x) + \\text{lowbit}(x + \\text{lowbit}(x)), \\dots\\) \u8fd9\u51e0\u4e2a\u7248\u672c\u7684\u8fd9\u4e2a\u503c\u5c31\u884c\u4e86\u3002 \u7136\u540e\u4fee\u6539\u7684\u65f6\u5019\u9700\u8981\u81ea\u5df1\u5728\u81ea\u5df1\u7248\u672c\u4e0a\u65b0\u5efa\uff0c\u56e0\u4e3a\u5982\u679c\u76f4\u63a5\u4fee\u6539\u53ef\u80fd\u4f1a\u5f71\u54cd\u5230\u540e\u9762\u7684\u7248\u672c\uff08\u540e\u9762\u7684\u7248\u672c\u5bf9\u524d\u9762\u7684\u7248\u672c\u6709\u4f9d\u8d56\uff09\u3002 \u67e5\u8be2\u5c31\u9884\u5904\u7406\u51fa\u5bf9\u5e94\u7684\u4e24\u6279 \\(O(\\log n)\\) \u4e2a\u4e3b\u5e2d\u6811\u7684\u4fe1\u606f\uff0c\u5408\u5e76\u4e4b\u540e\u5728\u4e0a\u9762\u7ebf\u6bb5\u6811\u4e8c\u5206\u5373\u53ef\u3002 \u8fd9\u91cc\u7684\u4ee3\u7801\u4f7f\u7528\u4e86\u53e6\u5916\u4e00\u79cd\u52a8\u6001\u5f00\u70b9\u7684\u5199\u6cd5\uff0c\u66f4\u8282\u7701\u7a7a\u95f4\u3002 \u6ce8\u610f\u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0\u5728\u521d\u59cb\u7684\u65f6\u5019\u628a\u4e3b\u5e2d\u6811\u6254\u5230\u6811\u72b6\u6570\u7ec4\u4e0a\uff01 Codeauthor : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #ifndef ONLINE_JUDGE #include <cstdarg> #define meow(format, ...) \\ fprintf(stderr, format, ## __VA_ARGS__) // remember to open stream sync! #else #define meow(format, ...) 1231 #endif using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int n , m , len ; int a [ si ], id [ si << 1 ]; int tot = 0 ; int ls [ si << 8 ], rs [ si << 8 ]; int root [ si << 8 ], dat [ si << 8 ]; int cnt1 , cnt2 ; int tr1 [ si ], tr2 [ si ]; struct Query { char opt ; int l , r , x ; } q [ si ]; inline int lowbit ( int x ) { return x & - x ; } inline int getid ( int val ) { return lower_bound ( id + 1 , id + 1 + len , val ) - id ; } int build ( int l , int r ) { int p = ++ tot ; if ( l == r ) return l ; int mid = ( l + r ) >> 1 ; ls [ p ] = build ( l , mid ), rs [ p ] = build ( mid + 1 , r ); return p ; } void insert ( int & p , int last , int l , int r , int val , int delta ) { p = ++ tot ; dat [ p ] = dat [ last ] + delta , ls [ p ] = ls [ last ], rs [ p ] = rs [ last ]; if ( l == r ) return ; int mid = ( l + r ) >> 1 ; if ( val <= mid ) insert ( ls [ p ], ls [ last ], l , mid , val , delta ); else insert ( rs [ p ], rs [ last ], mid + 1 , r , val , delta ); } int ask ( int l , int r , int kth ) { if ( l == r ) return l ; int mid = ( l + r ) >> 1 ; int lcnt = 0 ; for ( int i = 1 ; i <= cnt2 ; ++ i ) lcnt += dat [ ls [ tr2 [ i ]]]; for ( int i = 1 ; i <= cnt1 ; ++ i ) lcnt -= dat [ ls [ tr1 [ i ]]]; if ( kth <= lcnt ) { for ( int i = 1 ; i <= cnt1 ; ++ i ) tr1 [ i ] = ls [ tr1 [ i ]]; for ( int i = 1 ; i <= cnt2 ; ++ i ) tr2 [ i ] = ls [ tr2 [ i ]]; return ask ( l , mid , kth ); } else { for ( int i = 1 ; i <= cnt1 ; ++ i ) tr1 [ i ] = rs [ tr1 [ i ]]; for ( int i = 1 ; i <= cnt2 ; ++ i ) tr2 [ i ] = rs [ tr2 [ i ]]; return ask ( mid + 1 , r , kth - lcnt ); } } void change ( int x , int v ) { int y = getid ( a [ x ]); while ( x <= n ) { insert ( root [ x ], root [ x ], 1 , len , y , v ); x += lowbit ( x ); } } int query ( int l , int r , int kth ) { l -- , cnt1 = cnt2 = 0 ; while ( l ) tr1 [ ++ cnt1 ] = root [ l ], l -= lowbit ( l ); while ( r ) tr2 [ ++ cnt2 ] = root [ r ], r -= lowbit ( r ); return ask ( 1 , len , kth ); } int main () { // cin.tie(0) -> sync_with_stdio(false); // cin.exceptions(cin.failbit | cin.badbit); cin >> n >> m ; int cnt = 0 ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], id [ ++ cnt ] = a [ i ]; for ( int i = 1 ; i <= m ; ++ i ) { Query & p = q [ i ]; cin >> p . opt ; if ( p . opt == 'C' ) cin >> p . l >> p . x , id [ ++ cnt ] = p . x ; if ( p . opt == 'Q' ) cin >> p . l >> p . r >> p . x ; } sort ( id + 1 , id + 1 + cnt ); len = unique ( id + 1 , id + 1 + cnt ) - id - 1 ; for ( int i = 1 ; i <= n ; ++ i ) change ( i , 1 ); for ( int i = 1 ; i <= m ; ++ i ) { Query & p = q [ i ]; if ( p . opt == 'C' ) change ( p . l , -1 ), a [ p . l ] = p . x , change ( p . l , 1 ); if ( p . opt == 'Q' ) cout << id [ query ( p . l , p . r , p . x )] << endl ; } return 0 ; } // \u4e0b\u9762\u8fd9\u4e2a\u867d\u7136\u53ef\u4ee5\uff0c\u4e0d\u8fc7\u7a7a\u95f4\u53ef\u80fd\u5c31\u5bc4\u6389\u4e86\uff0c\u6240\u4ee5\u7528\u4e0a\u9762\u7684\u5199\u6cd5\u4f1a\u597d\u5f97\u591a\u3002 /* // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #ifndef ONLINE_JUDGE #include<cstdarg> #define meow(format, ...) \\ fprintf(stderr, format, ## __VA_ARGS__) // remember to open stream sync! #else #define meow(format, ...) 1231 #endif using namespace std; using i64 = long long; const int si = 2e5 + 10; int n, m, len; int a[si], id[si << 1]; int tot = 0; int ls[si << 9], rs[si << 9]; int root[si << 9], dat[si << 9]; int cnt1, cnt2; int tr1[si], tr2[si]; struct Query { char opt; int l, r, x; } q[si]; inline int lowbit(int x) { return x & -x; } inline int getid(int val) { return lower_bound(id + 1, id + 1 + len, val) - id; } int build(int l, int r) { int p = ++tot; if(l == r) return l; int mid = (l + r) >> 1; ls[p] = build(l, mid), rs[p] = build(mid + 1, r); return p; } void insert(int &p, int last, int l, int r, int val, int delta) { p = ++tot; dat[p] = dat[last] + delta, ls[p] = ls[last], rs[p] = rs[last]; if(l == r) return; int mid = (l + r) >> 1; if(val <= mid) insert(ls[p], ls[last], l, mid, val, delta); else insert(rs[p], rs[last], mid + 1, r, val, delta); } int ask(int l, int r, int kth) { if(l == r) return l; int mid = (l + r) >> 1; int lcnt = 0; for(int i = 1; i <= cnt2; ++i) lcnt += dat[ls[tr2[i]]]; for(int i = 1; i <= cnt1; ++i) lcnt -= dat[ls[tr1[i]]]; if(kth <= lcnt) { for(int i = 1; i <= cnt1; ++i) tr1[i] = ls[tr1[i]]; for(int i = 1; i <= cnt2; ++i) tr2[i] = ls[tr2[i]]; return ask(l, mid, kth); } else { for(int i = 1; i <= cnt1; ++i) tr1[i] = rs[tr1[i]]; for(int i = 1; i <= cnt2; ++i) tr2[i] = rs[tr2[i]]; return ask(mid + 1, r, kth - lcnt); } } void change(int x, int v) { int y = getid(a[x]); while(x <= n) { insert(root[x], root[x], 1, len, y, v); x += lowbit(x); } } int query(int l, int r, int kth) { l --, cnt1 = cnt2 = 0; while(l) tr1[++cnt1] = root[l], l -= lowbit(l); while(r) tr2[++cnt2] = root[r], r -= lowbit(r); return ask(1, len, kth); } int main() { // cin.tie(0) -> sync_with_stdio(false); // cin.exceptions(cin.failbit | cin.badbit); cin >> n >> m; int cnt = 0; for(int i = 1; i <= n; ++i) cin >> a[i], id[++cnt] = a[i]; for(int i = 1; i <= m; ++i) { Query &p = q[i]; cin >> p.opt; if(p.opt == 'C') cin >> p.l >> p.x, id[++cnt] = p.x; if(p.opt == 'Q') cin >> p.l >> p.r >> p.x; } sort(id + 1, id + 1 + cnt); len = unique(id + 1, id + 1 + cnt) - id - 1; for(int i = 1; i <= n; ++i) root[i] = build(1, len); for(int i = 1; i <= n; ++i) change(i, 1); for(int i = 1; i <= m; ++i) { Query &p = q[i]; if(p.opt == 'C') change(p.l, -1), a[p.l] = p.x, change(p.l, 1); if(p.opt == 'Q') cout << id[query(p.l, p.r, p.x)] << endl; } return 0; } */ \u6807\u8bb0\u6c38\u4e45\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 HDU4348 To the moon \u6682\u65f6\u5495\u5495\u5495","title":"\u4e3b\u5e2d\u6811"},{"location":"algor/ds/old-p-seg/#_1","text":"","title":"\u4e3b\u5e2d\u6811"},{"location":"algor/ds/old-p-seg/#_2","text":"\u4e3b\u5e2d\u6811\u5168\u79f0\u53ef\u6301\u4e45\u5316\u6743\u503c\u7ebf\u6bb5\u6811\uff08\u7684\u5dee\u5206\u524d\u7f00\u548c\uff09\uff0c\u56e0\u4e3a\u6743\u503c\u7ebf\u6bb5\u6811\u548c\u7ebf\u6bb5\u6811\u6ca1\u6709\u592a\u5927\u7684\u533a\u522b\uff0c\u5c31\u53ea\u8bf4\u4e3b\u5e2d\u6811\u4e86\u3002 \u4f46\u662f\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0c\u4e3b\u5e2d\u6811\u662f\u5229\u7528\u53ef\u6301\u4e45\u5316\u7684\u601d\u60f3\u6765\u5b9e\u73b0\u9759\u6001 \u533a\u95f4 \u7b2c \\(k\\) \u5927\uff0c\u800c\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u5219\u662f\u771f\u6b63\u7684\u76f4\u63a5\u7ef4\u62a4\u5404\u4e2a\u5386\u53f2\u7248\u672c\u3002 \u4e3b\u5e2d\u6811\u7684\u601d\u60f3\u548c\u53ef\u6301\u4e45\u5316 Trie \u7684\u601d\u60f3\u662f\u4e00\u81f4\u7684\uff0c\u90fd\u662f\u4ee5\u51fd\u6570\u5f0f\u7f16\u7a0b\u7684\u65b9\u5f0f\u4fdd\u5b58\u5386\u53f2\u7248\u672c\uff0c\u4ee5\u628a\u4fe1\u606f\u4ece\u5168\u5c40\u8f6c\u5316\u4e3a\u533a\u95f4\u3002 \u4e00\u4e2a\u6bd4\u8f83\u7ecf\u5178\u7684\u95ee\u9898\u5c31\u662f\u9759\u6001\u533a\u95f4\u7b2c k \u5927\uff0c\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u663e\u7136\u53ef\u4ee5\u5f88\u8f7b\u677e\u641e\u5b9a\u5168\u5c40\u7684\u7248\u672c\u3002 \u4e8e\u662f\u628a\u6743\u503c\u7ebf\u6bb5\u6811\u53ef\u6301\u4e45\u5316\u4e4b\u540e\u5229\u7528\u524d\u7f00\u548c\u7684\u601d\u60f3\u5c31\u53ef\u4ee5\u505a\u533a\u95f4\u4e86\u3002 \u4e0d\u8fc7\u4e3b\u5e2d\u6811\u4e00\u822c\u96be\u4ee5\u652f\u6301\u533a\u95f4\u4fee\u6539\uff0c\u6700\u591a\u652f\u6301\u4e00\u4e0b\u5355\u70b9\u4fee\u6539\u3002 \u533a\u95f4\u4fee\u6539\u5728\u4fe1\u606f\u6bd4\u8f83\u7279\u6b8a\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u7528\u6807\u8bb0\u6c38\u4e45\u5316\u505a\uff0c\u4e0d\u8fc7\u4e5f\u975e\u5e38\u6709\u5c40\u9650\u6027\u3002","title":"\u6cdb\u5316"},{"location":"algor/ds/old-p-seg/#_3","text":"\u4ecd\u7136\u8003\u8651\u9759\u6001\u533a\u95f4\u7b2c k \u5927\u95ee\u9898\u3002 \u4e3b\u5e2d\u6811\u7684\u4e3b\u8981\u601d\u60f3\u5c31\u662f\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217\uff0c\u4ece\u5de6\u5f80\u53f3\u4f9d\u6b21\u63d2\u5165\u5e8f\u5217\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u3002 \u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\u7684\u65f6\u5019\u7ef4\u62a4\u5386\u53f2\u7248\u672c\uff0c\u4e5f\u5c31\u662f\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u5143\u7d20\u521a\u63d2\u5165\u7684\u65f6\u5019\uff0c\u7ebf\u6bb5\u6811\u7684\u6837\u5b50\u3002 \u663e\u7136\u4e00\u4e2a\u6bd4\u8f83\u66b4\u529b\u7684\u505a\u6cd5\u662f\uff0c\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u6570\uff08\u65b0\u5efa\u4e00\u4e2a\u7248\u672c\uff09\u7684\u65f6\u5019\uff0c\u90fd\u628a\u539f\u6765\u7684\u7ebf\u6bb5\u6811\u590d\u5236\u4e00\u6b21\uff0c\u7136\u540e\u628a\u65b0\u7684\u7248\u672c\u52a0\u4e0a\u53bb\u3002 \u4e0d\u8fc7\u8fd9\u6837\u7a7a\u95f4\u662f \\(O(nm)\\) \u7684\uff0c\u975e\u5e38\u4e0d\u4f18\u79c0\u3002 \u53d1\u73b0\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u6570\uff0c\u5728\u503c\u57df\u4e0a\u53ea\u4f1a\u4fee\u6539\u4e00\u4e2a\u70b9\uff0c\u5bf9\u5e94\u5230\u7ebf\u6bb5\u6811\u4e0a\u5c31\u662f\u53ea\u4fee\u6539\u4e00\u6761\u4ece\u6839\u8282\u70b9\u5230\u5bf9\u5e94\u53f6\u5b50\u8282\u70b9\u7684\u94fe\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u628a\u8fd9\u4e2a\u88ab\u4fee\u6539\u7684\u94fe\u5355\u72ec\u590d\u5236\u4e00\u6b21\u62c9\u51fa\u6765\uff0c\u8bb0\u5f55\u4e00\u4e0b\u63d2\u5165\u4e4b\u540e\uff0c\u5f53\u524d\u7248\u672c\u6811\u6839\u7684\u7f16\u53f7\u3002 \u4e8e\u662f\u7a7a\u95f4\u5f00\u9500\u5c31\u5927\u5927\u51cf\u5c0f\u4e86\uff0c\u4ece \\(O(nm)\\) \u53d8\u6210\u4e86 \\(O(n + m\\log n)\\) \u3002 \u5177\u4f53\u6765\u8bf4\u662f\u8fd9\u6837\u7684\uff1a \u84dd\u8272\u8282\u70b9\u662f\u539f\u6765\u7248\u672c\u4e0a\u7684\u94fe\uff0c\u7ea2\u8272\u8282\u70b9\u662f\u73b0\u5728\u7248\u672c\u4e0a\u7684\u94fe\u3002 \u7b80\u5355\u6765\u8bf4\u5c31\u662f\uff0c\u5bf9\u4e8e\u4e0a\u4e00\u4e2a\u7248\u672c\u7684\u8282\u70b9 \\(p\\) \uff0c\u590d\u5236\u4e00\u4e2a\u65b0\u7684\u8282\u70b9 \\(q\\) \u51fa\u6765\u3002 \u5982\u679c\u4e0b\u4e00\u6b65\u662f\u9012\u5f52 \\(p.ls\\) \uff0c\u90a3\u4e48 \\(q.ls\\) \u5c31\u9700\u8981\u65b0\u5efa\uff0c\u7136\u540e \\(q.rs\\) \u5c31\u662f\u539f\u6765\u7684 \\(p.ls\\) \uff0c\u53cd\u8fc7\u6765\u540c\u7406\u3002 \u67e5\u8be2 \\([l, r]\\) \u7684\u7b2c k \u5927\u4e5f\u6bd4\u8f83\u597d\u505a\uff0c\u5c31\u76f4\u63a5\u7ebf\u6bb5\u6811\u4e8c\u5206\uff0c\u7136\u540e\u7528\u4e24\u4e2a\u6307\u9488 \\(p, q\\) \uff0c \u540c\u6b65 \u904d\u5386 \\(l - 1\\) \uff0c \\(r\\) \u4e24\u4e2a\u7248\u672c\u3002 \u6bd4\u8f83\u4e00\u4e0b\u5f53\u524d\u7684 k \u548c lcnt = dat[ls[q]] - dat[ls[p]] \u7684\u5927\u5c0f\uff0c\u5982\u679c \\(k \\le lcnt\\) \uff0c\u5c31\u8ba9 \\(p,q\\) \u90fd\u5f80\u5de6\u5b50\u6811\u8d70\uff0c\u5426\u5219 \\(k - lcnt\\) \uff0c\u7136\u540e\u8d70\u53f3\u5b50\u6811\u5c31\u884c\u4e86\u3002 \u53ef\u4ee5\u7406\u89e3\u6210\u5728\u4e24\u9897\u6743\u503c\u7ebf\u6bb5\u6811\u5408\u5e76\u4e4b\u540e\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u8fdb\u884c\u64cd\u4f5c \uff0c\u5408\u5e76\u540e\u7684\u4fe1\u606f\u5c31\u662f \\(r\\) \u7248\u672c\u7684\u4fe1\u606f\u51cf\u53bb \\(l - 1\\) \u7684\u4fe1\u606f\u3002 \uff08\u6240\u4ee5\u4e3b\u5e2d\u6811\u7ef4\u62a4\u7684\u4fe1\u606f\u4e0d\u4ec5\u8981\u6ee1\u8db3\u5e7a\u534a\u7fa4\u6027\u8d28\uff0c\u8fd8\u9700\u8981\u6ee1\u8db3\u533a\u95f4\u53ef\u51cf\u6027\uff01\uff09 \u5efa\u6811\u7684\u65f6\u5019\u5148\u5bf9\u4e8e\u503c\u57df\u5efa\u4e00\u4e2a\u6bcf\u4e2a\u8282\u70b9\u6743\u503c\u90fd\u4e3a\u7a7a\u7684\u7ebf\u6bb5\u6811\uff0c\u6839\u8282\u70b9\u6807\u8bb0\u4e3a\u7b2c\u96f6\u4e2a\u7248\u672c\u7684\u6839\u8282\u70b9\uff0c\u65b9\u4fbf\u4e4b\u540e\u66f4\u65b0\u3002 \u7a7a\u95f4\u5f00\u4e2a <<5 \u5c31\u884c\u4e86\uff0c\u53cd\u6b63\u4e00\u822c\u80fd\u7528\u4e3b\u5e2d\u6811\u7684\u9898\u7a7a\u95f4\u90fd\u5f88\u5bbd\u677e\u3002 \u4ee3\u7801\uff1a POJ2104 - K-th Number 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #ifndef ONLINE_JUDGE #include <cstdarg> #define meow(format, ...) \\ fprintf(stderr, format, ## __VA_ARGS__) // remember to open stream sync! #else #define meow(format, ...) 1231 #endif using namespace std ; // using i64 = long long; template < typename __Tp > void read ( __Tp & x ) { int f = x = 0 ; char ch = getchar (); for (; ! isdigit ( ch ); ch = getchar ()) if ( ch == '-' ) f = 1 ; for (; isdigit ( ch ); ch = getchar ()) x = ( x << 1 ) + ( x << 3 ) + ( ch ^ 48 ); if ( f ) x = - x ; } // void read(modint &x) { int __value; read(__value); x = __value; return; } void read ( char & ch ) { for ( ch = getchar (); isspace ( ch ); ch = getchar ()); } // template <typename __Tp1, typename ...__Tp2> void read(__Tp1 &x, __Tp2 &... y) { read(x), read(y...); } template < typename __Tp > void write ( __Tp x ) { if ( x < 0 ) putchar ( '-' ), x = - x ; if ( x > 9 ) write ( x / 10 ); putchar ( x % 10 + 48 ); } void write ( char ch ) { putchar ( ch ); } // void write(modint x) { write(x.val()); } void write ( const char * s ) { for (; * s ; ++ s ) putchar ( * s ); } // template <typename __Tp1, typename ...__Tp2> void write(__Tp1 x, __Tp2 ... y) { write(x), write(y...); } const int si = 1e5 + 10 ; int n , m , len ; int a [ si ], id [ si ]; int tot = 0 ; int ls [ si << 5 ], rs [ si << 5 ]; int root [ si << 5 ], dat [ si << 5 ]; int build ( int l , int r ) { int p = ++ tot ; if ( l == r ) return p ; int mid = ( l + r ) >> 1 ; ls [ p ] = build ( l , mid ), rs [ p ] = build ( mid + 1 , r ); return p ; } int insert ( int last , int l , int r , int val ) { // last \u662f\u4e0a\u4e00\u4e2a\u7248\u672c\u7684 [l, r] \u8282\u70b9\u3002 int p = ++ tot ; dat [ p ] = dat [ last ] + 1 ; if ( l == r ) return p ; int mid = ( l + r ) >> 1 ; if ( val <= mid ) ls [ p ] = insert ( ls [ last ], l , mid , val ), rs [ p ] = rs [ last ]; else rs [ p ] = insert ( rs [ last ], mid + 1 , r , val ), ls [ p ] = ls [ last ]; return p ; } int ask ( int p , int q , int l , int r , int kth ) { if ( l == r ) return l ; int mid = ( l + r ) >> 1 ; int lcnt = dat [ ls [ q ]] - dat [ ls [ p ]]; if ( kth <= lcnt ) return ask ( ls [ p ], ls [ q ], l , mid , kth ); else return ask ( rs [ p ], rs [ q ], mid + 1 , r , kth - lcnt ); } int index ( int val ) { return lower_bound ( id + 1 , id + 1 + len , val ) - id ; } int main () { read ( n ), read ( m ); for ( int i = 1 ; i <= n ; ++ i ) read ( a [ i ]), id [ i ] = a [ i ]; sort ( id + 1 , id + 1 + n ); len = unique ( id + 1 , id + 1 + n ) - id - 1 ; root [ 0 ] = build ( 1 , len ); for ( int i = 1 ; i <= n ; ++ i ) root [ i ] = insert ( root [ i - 1 ], 1 , len , index ( a [ i ])); while ( m -- ) { int l , r , k ; read ( l ), read ( r ), read ( k ); write ( id [ ask ( root [ l - 1 ], root [ r ], 1 , len , k )]); write ( endl ); } return 0 ; } \u590d\u6742\u5ea6\u663e\u7136 1log\u3002 \u603b\u7ed3\u4e00\u4e0b\uff0c\u4e3b\u5e2d\u6811\u9898\u53ea\u9700\u8981\u8003\u8651\uff0c\u600e\u4e48\u7ef4\u62a4\u5386\u53f2\u7248\u672c\u4ee5\u8fbe\u5230\u533a\u95f4\u67e5\u8be2\uff0c \u600e\u4e48\u51d1\u51fa\u4e00\u4e2a\u65b0\u7684\u4fe1\u606f\uff0c\u653e\u5230\u4e00\u4e2a\u65b0\u7684\u7ebf\u6bb5\u6811\u4e0a\uff0c\u5728\u8fd9\u4e2a\u65b0\u7684\u7ebf\u6bb5\u6811\u4e0a\u8fdb\u884c\u64cd\u4f5c\u3002 \uff08\u65b0\u7684\u7ebf\u6bb5\u6811\u5e76\u4e0d\u9700\u8981\u5b9e\u9645\u5408\u5e76\u51fa\u6765\uff0c\u53ea\u9700\u8981\u591a\u4e2a\u6307\u9488\u540c\u6b65\u904d\u5386\u9700\u8981\u7684\u7248\u672c\u5373\u53ef\uff09","title":"\u57fa\u672c\u601d\u60f3"},{"location":"algor/ds/old-p-seg/#_4","text":"","title":"\u51e0\u4e2a\u7b80\u5355\u7684\u4f8b\u9898"},{"location":"algor/ds/old-p-seg/#luogu3567-poi2014kur-couriers","text":"\u7ed9\u4e00\u4e2a\u6570\u5217\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a\u533a\u95f4\u5185\u6709\u6ca1\u6709\u4e00\u4e2a\u6570\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a \u5982\u679c\u6709\u8f93\u51fa\u8fd9\u4e2a\u6570\uff0c\u5426\u5219\u8f93\u51fa 0. 5e5 \u59a5\u59a5\u7684\u677f\u5b50\u9898\uff0c\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u7ebf\u6bb5\u6811\u4e8c\u5206\u5c31\u884c\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 5e5 + 10 ; int n , m , len ; int a [ si ], id [ si ]; int tot = 0 ; int ls [ si << 5 ], rs [ si << 5 ]; int root [ si << 5 ], dat [ si << 5 ]; int get_id ( int val ) { return lower_bound ( id + 1 , id + 1 + len , val ) - id ; } int build ( int l , int r ) { int p = ++ tot ; if ( l == r ) return p ; int mid = ( l + r ) >> 1 ; ls [ p ] = build ( l , mid ), rs [ p ] = build ( mid + 1 , r ); return p ; } int insert ( int last , int l , int r , int v ) { int p = ++ tot ; dat [ p ] = dat [ last ] + 1 ; if ( l == r ) return p ; int mid = ( l + r ) >> 1 ; if ( v <= mid ) ls [ p ] = insert ( ls [ last ], l , mid , v ), rs [ p ] = rs [ last ]; else rs [ p ] = insert ( rs [ last ], mid + 1 , r , v ), ls [ p ] = ls [ last ]; return p ; } int ask ( int p , int q , int l , int r , int k ) { if ( l == r ) return l ; int mid = ( l + r ) >> 1 ; int lcnt = dat [ ls [ q ]] - dat [ ls [ p ]]; int rcnt = dat [ rs [ q ]] - dat [ rs [ p ]]; if ( k < lcnt ) return ask ( ls [ p ], ls [ q ], l , mid , k ); if ( k < rcnt ) return ask ( rs [ p ], rs [ q ], mid + 1 , r , k ); return 0 ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> m ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], id [ i ] = a [ i ]; sort ( id + 1 , id + 1 + n ); len = unique ( id + 1 , id + 1 + n ) - id - 1 ; root [ 0 ] = build ( 1 , len ); for ( int i = 1 ; i <= n ; ++ i ) root [ i ] = insert ( root [ i - 1 ], 1 , len , get_id ( a [ i ])); while ( m -- ) { int l , r ; cin >> l >> r ; cout << id [ ask ( root [ l - 1 ], root [ r ], 1 , len , ( r - l + 1 ) >> 1 )] << endl ; } return 0 ; }","title":"Luogu3567 [POI2014]KUR-Couriers"},{"location":"algor/ds/old-p-seg/#luogu3919-1","text":"\u9996\u5148\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n \\le 10^6\\) \u7684\u6570\u7ec4\uff0c\u7136\u540e\uff0c \u5b9e\u73b0\u4e00\u4e2a\u53ef\u6301\u4e45\u5316\u7684\u6570\u7ec4\uff0c\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a 1. \u5728\u67d0\u4e2a\u5386\u53f2\u7248\u672c\u4e0a\u4fee\u6539\u67d0\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u503c\u3002 2. \u8be2\u95ee\u67d0\u4e00\u4e2a\u5386\u53f2\u7248\u672c\u4e0a\u67d0\u4e00\u4e2a\u4f4d\u7f6e\u7684\u503c\uff0c\u5e76\u590d\u5236\u4e00\u4e2a\u65b0\u7248\u672c\u3002 \u5f88\u7b80\u5355\u7684\u677f\u5b50\u9898\uff0c\u4e0d\u8fc7\u8fd9\u91cc\u4e0d\u662f\u4e3b\u5e2d\u6811\u4e86\uff0c\u800c\u662f\u4e00\u822c\u7684\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u3002 \u672c\u8d28\u4e00\u6837\uff0c\u4e0d\u8fc7\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u4e0d\u9700\u8981\u4e00\u4e2a\u4e00\u4e2a\u63d2\u5165\u539f\u5e8f\u5217\u7684\u5143\u7d20\uff0c\u56e0\u4e3a\u6b64\u5904\u4e0d\u662f\u7ef4\u62a4\u503c\u57df\u800c\u662f\u76f4\u63a5\u7ef4\u62a4\u6574\u4e2a\u5e8f\u5217\u3002 \u800c\u4e14\u8fd9\u91cc\u53ef\u4ee5\u652f\u6301\u5355\u70b9\u4fee\u6539\uff0c\u4e3b\u5e2d\u6811\u4e0d\u5957\u4e00\u4e2a\u522b\u7684\u6570\u636e\u7ed3\u6784\u5f88\u96be\u652f\u6301\u5355\u70b9\u4fee\u6539\uff0c\u56e0\u4e3a\u4e3b\u5e2d\u6811\u662f\u7ef4\u62a4\u7684\u503c\u57df\uff0c\u5728\u7ef4\u6301\u6743\u503c\u4fe1\u606f\u7684\u533a\u95f4\u53ef\u52a0\u51cf\u6027\u7684\u540c\u65f6\uff0c\u5bf9\u4e8e\u5e8f\u5217\u76f4\u63a5\u64cd\u4f5c\u5f88\u4e0d\u65b9\u4fbf\u3002 \u5177\u4f53\u5b9e\u73b0\u5c31\u770b\u4ee3\u7801\u5427\uff0c\u8fd9\u91cc\u8fd8\u4e0d\u9700\u8981\u7ef4\u62a4\u533a\u95f4\u548c\uff0c\u53ea\u9700\u8981\u7ef4\u62a4\u53f6\u5b50\u8282\u70b9\u7684\u503c\u5c31\u884c\u4e86\u3002 \u5982\u679c\u8981\u7ef4\u62a4\u533a\u95f4\u548c\u5c31\u8981\u52a0\u4e0a Pushup \u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 1e6 + 10 ; int n , m ; int a [ si ]; int tot = 0 ; int ls [ si << 5 ], rs [ si << 5 ]; int root [ si << 5 ], dat [ si << 5 ]; int build ( int l , int r ) { int p = ++ tot ; if ( l == r ) { dat [ p ] = a [ l ]; return p ; } int mid = ( l + r ) >> 1 ; ls [ p ] = build ( l , mid ), rs [ p ] = build ( mid + 1 , r ); return p ; } int modify ( int last , int l , int r , int pos , int v ) { int p = ++ tot ; if ( l == r ) { dat [ p ] = v ; return p ; } int mid = ( l + r ) >> 1 ; if ( pos <= mid ) ls [ p ] = modify ( ls [ last ], l , mid , pos , v ), rs [ p ] = rs [ last ]; else rs [ p ] = modify ( rs [ last ], mid + 1 , r , pos , v ), ls [ p ] = ls [ last ]; return p ; } int query ( int p , int l , int r , int pos ) { if ( l == r ) return dat [ p ]; int mid = ( l + r ) >> 1 ; if ( pos <= mid ) return query ( ls [ p ], l , mid , pos ); else return query ( rs [ p ], mid + 1 , r , pos ); } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> m ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; root [ 0 ] = build ( 1 , n ); int cnt = 0 ; while ( m -- ) { int ver , opt ; cin >> ver >> opt ; if ( opt == 1 ) { int x , v ; cin >> x >> v ; root [ ++ cnt ] = modify ( root [ ver ], 1 , n , x , v ); } else { int x ; cin >> x ; int val = query ( root [ ver ], 1 , n , x ); root [ ++ cnt ] = modify ( root [ ver ], 1 , n , x , val ); cout << val << endl ; } } return 0 ; }","title":"Luogu3919 \u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff09"},{"location":"algor/ds/old-p-seg/#luogu2633-count-on-a-tree","text":"\u7ed9\u5b9a\u4e00\u68f5 \\(n\\) \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u6743\u503c\u3002\u6709 \\(m\\) \u4e2a\u8be2\u95ee\uff0c \u6bcf\u6b21\u7ed9\u4f60 \\(u,v,k\\) \uff0c\u4f60\u9700\u8981\u56de\u7b54 \\(u \\text{ xor last}\\) \u548c \\(v\\) \u8fd9\u4e24\u4e2a\u8282\u70b9\u95f4\u7b2c \\(k\\) \u5c0f\u7684\u70b9\u6743\u3002 \u5176\u4e2d \\(\\text{last}\\) \u662f\u4e0a\u4e00\u4e2a\u8be2\u95ee\u7684\u7b54\u6848\uff0c\u5b9a\u4e49\u5176\u521d\u59cb\u4e3a \\(0\\) \uff0c\u5373\u7b2c\u4e00\u4e2a\u8be2\u95ee\u7684 \\(u\\) \u662f\u660e\u6587\u3002 1e5 \u53d1\u73b0\u7b2c \\(i\\) \u4e2a\u7248\u672c\u7684\u4e3b\u5e2d\u6811\u53ef\u4ee5\u611f\u6027\u7684\u7406\u89e3\u4e3a\u4e00\u79cd\u524d\u7f00\u548c\u3002 \u4e8e\u662f\u5728\u8be2\u95ee \\([l, r]\\) \u7684\u65f6\u5019\u53ef\u4ee5\u628a dat[r] - dat[l - 1] \u5f53\u4f5c\u4fe1\u606f\u62cd\u5230\u4e00\u4e2a\u65b0\u7684\u7ebf\u6bb5\u6811\u4e0a\u64cd\u4f5c\uff08\u5b9e\u9645\u64cd\u4f5c\u5c31\u662f\u62ff\u4e24\u4e2a\u6307\u9488\u540c\u6b65\u8d70\u4e24\u4e2a\u7248\u672c\u7684\u7ebf\u6bb5\u6811\uff09\u3002 \u8fd9\u91cc\u662f\u5728\u6811\u4e0a\u8be2\u95ee\uff0c\u53ef\u4ee5\u8003\u8651\u6811\u5256\uff0c\u4f46\u662f\u4f3c\u4e4e\u5f88\u9ebb\u70e6\u3002 \u4e3b\u5e2d\u6811\u7ef4\u62a4\u7684\u4fe1\u606f\u5177\u6709\u533a\u95f4\u53ef\u52a0\u53ef\u51cf\u6027\uff0c\u6362\u53e5\u8bdd\u8bf4\u53ef\u4ee5\u505a\u524d\u7f00\u548c\u4e5f\u53ef\u4ee5\u5dee\u5206\u3002 \u6240\u4ee5\u6211\u4eec\u8003\u8651\u600e\u4e48\u51d1\u4e00\u4e2a\u65b0\u7684\u7ebf\u6bb5\u6811\uff0c\u4f7f\u4ed6\u80fd\u5305\u542b\u8def\u5f84 \\((u,v)\\) \u7684\u4fe1\u606f\uff0c\u7136\u540e\u5728\u4e0a\u9762\u7ebf\u6bb5\u6811\u4e8c\u5206\u5c31\u53ef\u4ee5\u4e86\u3002 \u6211\u4eec\u8bbe\u7248\u672c \\(i\\) \u8868\u793a\u6839\u8282\u70b9\u5230\u8282\u70b9 \\(i\\) \u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8282\u70b9\u6784\u6210\u7684\u4e3b\u5e2d\u6811\uff0c \u7136\u540e\u53d1\u73b0\u6b64\u65f6\u53ef\u4ee5\u6811\u4e0a\u5dee\u5206\u6765\u51d1\u51fa\u8def\u5f84 \\((u, v)\\) \uff0c\u4e8e\u662f\u65b0\u7684\u7ebf\u6bb5\u6811\u7684\u4fe1\u606f\u5c31\u662f dat[u] + dat[v] - dat[lca(u, v)] - dat[fa(lca(u, v))] \u3002 \u5b9e\u73b0\u76f4\u63a5\u62ff\u56db\u4e2a\u6307\u9488\u540c\u6b65\u904d\u5386\u8fd9\u56db\u4e2a\u7248\u672c\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 1e5 + 10 ; int n , m , len , cnt ; int a [ si ], id [ si ]; int head [ si << 1 ]; struct Edge { int ver , Next ; } e [ si << 1 ]; void add ( int u , int v ) { e [ cnt ]. ver = v , e [ cnt ]. Next = head [ u ], head [ u ] = cnt ++ ; } int get_id ( int val ) { return lower_bound ( id + 1 , id + 1 + len , val ) - id ; } int tot = 0 ; int ls [ si << 5 ], rs [ si << 5 ]; int root [ si << 5 ], dat [ si << 5 ]; int build ( int l , int r ) { int p = ++ tot ; if ( l == r ) return p ; int mid = ( l + r ) >> 1 ; ls [ p ] = build ( l , mid ), rs [ p ] = build ( mid + 1 , r ); return p ; } int insert ( int last , int l , int r , int v ) { int p = ++ tot ; dat [ p ] = dat [ last ] + 1 ; if ( l == r ) return p ; int mid = ( l + r ) >> 1 ; if ( v <= mid ) ls [ p ] = insert ( ls [ last ], l , mid , v ), rs [ p ] = rs [ last ]; else rs [ p ] = insert ( rs [ last ], mid + 1 , r , v ), ls [ p ] = ls [ last ]; return p ; } int ask ( int p , int q , int u , int v , int l , int r , int kth ) { if ( l == r ) return l ; int mid = ( l + r ) >> 1 ; int lcnt = dat [ ls [ p ]] + dat [ ls [ q ]] - dat [ ls [ u ]] - dat [ ls [ v ]]; if ( kth <= lcnt ) return ask ( ls [ p ], ls [ q ], ls [ u ], ls [ v ], l , mid , kth ); else return ask ( rs [ p ], rs [ q ], rs [ u ], rs [ v ], mid + 1 , r , kth - lcnt ); } int dep [ si ]; int f [ si ][ 21 ]; void dfs ( int u , int fa ) { f [ u ][ 0 ] = fa , dep [ u ] = dep [ fa ] + 1 ; for ( int i = 1 ; i <= 20 ; ++ i ) f [ u ][ i ] = f [ f [ u ][ i - 1 ]][ i - 1 ]; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; root [ v ] = insert ( root [ u ], 1 , len , get_id ( a [ v ])); dfs ( v , u ); } } int lca ( int u , int v ) { if ( dep [ u ] < dep [ v ]) swap ( u , v ); for ( int i = 20 ; i >= 0 ; -- i ) if ( dep [ f [ u ][ i ]] >= dep [ v ]) u = f [ u ][ i ]; if ( u == v ) return u ; for ( int i = 20 ; i >= 0 ; -- i ) if ( f [ u ][ i ] != f [ v ][ i ]) u = f [ u ][ i ], v = f [ v ][ i ]; return f [ u ][ 0 ]; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); memset ( head , -1 , sizeof head ); cin >> n >> m ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], id [ i ] = a [ i ]; sort ( id + 1 , id + 1 + n ); len = unique ( id + 1 , id + 1 + n ) - id - 1 ; for ( int i = 1 ; i < n ; ++ i ) { int u , v ; cin >> u >> v ; add ( u , v ), add ( v , u ); } root [ 0 ] = build ( 1 , len ); root [ 1 ] = insert ( root [ 0 ], 1 , len , get_id ( a [ 1 ])); dfs ( 1 , 0 ); int lastans = 0 ; while ( m -- ) { int u , v , k ; cin >> u >> v >> k ; u ^= lastans ; int Lca = lca ( u , v ), Fa = f [ Lca ][ 0 ]; cout << ( lastans = id [ ask ( root [ u ], root [ v ], root [ Lca ], root [ Fa ], 1 , len , k )]) << endl ; } return 0 ; }","title":"Luogu2633 Count on a tree"},{"location":"algor/ds/old-p-seg/#k","text":"Luogu2617 Dynamic Rankings \u5355\u70b9\u4fee\u6539\u533a\u95f4\u8be2\u95ee\u7b2c \\(k\\) \u5927\uff0c1e5\u3002 \u76f4\u63a5\u66b4\u529b\u505a\u7684\u8bdd\uff0c\u6bcf\u6b21\u5355\u70b9\u4fee\u6539 \\(i\\) \u9700\u8981\u4fee\u6539 \\([i,n]\\) \u7684\u6240\u6709\u7248\u672c\uff0c\u5355\u6b21\u590d\u6742\u5ea6\u662f \\(O(n \\log n)\\) \u7684\uff0c\u4e0d\u80fd\u63a5\u53d7\u3002 \u53ef\u4ee5\u60f3\u5230\u4e3b\u5e2d\u6811\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u201c\u5e7f\u4e49\u201d\u7684\u524d\u7f00\u548c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u4e3b\u5e2d\u6811\uff0c\u6765\u8ba9\u9700\u8981\u4fee\u6539\u7684\u7248\u672c\u6570\u51cf\u5c11\u5230 \\(O(\\log n)\\) \u4e2a\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u6bcf\u6b21\u4fee\u6539 \\(x\\) \u8fd9\u4e2a\u7248\u672c\u7684\u67d0\u4e2a\u503c\uff0c\u5c31\u4fee\u6539 \\(x + \\text{lowbit}(x), x + \\text{lowbit}(x) + \\text{lowbit}(x + \\text{lowbit}(x)), \\dots\\) \u8fd9\u51e0\u4e2a\u7248\u672c\u7684\u8fd9\u4e2a\u503c\u5c31\u884c\u4e86\u3002 \u7136\u540e\u4fee\u6539\u7684\u65f6\u5019\u9700\u8981\u81ea\u5df1\u5728\u81ea\u5df1\u7248\u672c\u4e0a\u65b0\u5efa\uff0c\u56e0\u4e3a\u5982\u679c\u76f4\u63a5\u4fee\u6539\u53ef\u80fd\u4f1a\u5f71\u54cd\u5230\u540e\u9762\u7684\u7248\u672c\uff08\u540e\u9762\u7684\u7248\u672c\u5bf9\u524d\u9762\u7684\u7248\u672c\u6709\u4f9d\u8d56\uff09\u3002 \u67e5\u8be2\u5c31\u9884\u5904\u7406\u51fa\u5bf9\u5e94\u7684\u4e24\u6279 \\(O(\\log n)\\) \u4e2a\u4e3b\u5e2d\u6811\u7684\u4fe1\u606f\uff0c\u5408\u5e76\u4e4b\u540e\u5728\u4e0a\u9762\u7ebf\u6bb5\u6811\u4e8c\u5206\u5373\u53ef\u3002 \u8fd9\u91cc\u7684\u4ee3\u7801\u4f7f\u7528\u4e86\u53e6\u5916\u4e00\u79cd\u52a8\u6001\u5f00\u70b9\u7684\u5199\u6cd5\uff0c\u66f4\u8282\u7701\u7a7a\u95f4\u3002 \u6ce8\u610f\u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0\u5728\u521d\u59cb\u7684\u65f6\u5019\u628a\u4e3b\u5e2d\u6811\u6254\u5230\u6811\u72b6\u6570\u7ec4\u4e0a\uff01 Codeauthor : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #ifndef ONLINE_JUDGE #include <cstdarg> #define meow(format, ...) \\ fprintf(stderr, format, ## __VA_ARGS__) // remember to open stream sync! #else #define meow(format, ...) 1231 #endif using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int n , m , len ; int a [ si ], id [ si << 1 ]; int tot = 0 ; int ls [ si << 8 ], rs [ si << 8 ]; int root [ si << 8 ], dat [ si << 8 ]; int cnt1 , cnt2 ; int tr1 [ si ], tr2 [ si ]; struct Query { char opt ; int l , r , x ; } q [ si ]; inline int lowbit ( int x ) { return x & - x ; } inline int getid ( int val ) { return lower_bound ( id + 1 , id + 1 + len , val ) - id ; } int build ( int l , int r ) { int p = ++ tot ; if ( l == r ) return l ; int mid = ( l + r ) >> 1 ; ls [ p ] = build ( l , mid ), rs [ p ] = build ( mid + 1 , r ); return p ; } void insert ( int & p , int last , int l , int r , int val , int delta ) { p = ++ tot ; dat [ p ] = dat [ last ] + delta , ls [ p ] = ls [ last ], rs [ p ] = rs [ last ]; if ( l == r ) return ; int mid = ( l + r ) >> 1 ; if ( val <= mid ) insert ( ls [ p ], ls [ last ], l , mid , val , delta ); else insert ( rs [ p ], rs [ last ], mid + 1 , r , val , delta ); } int ask ( int l , int r , int kth ) { if ( l == r ) return l ; int mid = ( l + r ) >> 1 ; int lcnt = 0 ; for ( int i = 1 ; i <= cnt2 ; ++ i ) lcnt += dat [ ls [ tr2 [ i ]]]; for ( int i = 1 ; i <= cnt1 ; ++ i ) lcnt -= dat [ ls [ tr1 [ i ]]]; if ( kth <= lcnt ) { for ( int i = 1 ; i <= cnt1 ; ++ i ) tr1 [ i ] = ls [ tr1 [ i ]]; for ( int i = 1 ; i <= cnt2 ; ++ i ) tr2 [ i ] = ls [ tr2 [ i ]]; return ask ( l , mid , kth ); } else { for ( int i = 1 ; i <= cnt1 ; ++ i ) tr1 [ i ] = rs [ tr1 [ i ]]; for ( int i = 1 ; i <= cnt2 ; ++ i ) tr2 [ i ] = rs [ tr2 [ i ]]; return ask ( mid + 1 , r , kth - lcnt ); } } void change ( int x , int v ) { int y = getid ( a [ x ]); while ( x <= n ) { insert ( root [ x ], root [ x ], 1 , len , y , v ); x += lowbit ( x ); } } int query ( int l , int r , int kth ) { l -- , cnt1 = cnt2 = 0 ; while ( l ) tr1 [ ++ cnt1 ] = root [ l ], l -= lowbit ( l ); while ( r ) tr2 [ ++ cnt2 ] = root [ r ], r -= lowbit ( r ); return ask ( 1 , len , kth ); } int main () { // cin.tie(0) -> sync_with_stdio(false); // cin.exceptions(cin.failbit | cin.badbit); cin >> n >> m ; int cnt = 0 ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], id [ ++ cnt ] = a [ i ]; for ( int i = 1 ; i <= m ; ++ i ) { Query & p = q [ i ]; cin >> p . opt ; if ( p . opt == 'C' ) cin >> p . l >> p . x , id [ ++ cnt ] = p . x ; if ( p . opt == 'Q' ) cin >> p . l >> p . r >> p . x ; } sort ( id + 1 , id + 1 + cnt ); len = unique ( id + 1 , id + 1 + cnt ) - id - 1 ; for ( int i = 1 ; i <= n ; ++ i ) change ( i , 1 ); for ( int i = 1 ; i <= m ; ++ i ) { Query & p = q [ i ]; if ( p . opt == 'C' ) change ( p . l , -1 ), a [ p . l ] = p . x , change ( p . l , 1 ); if ( p . opt == 'Q' ) cout << id [ query ( p . l , p . r , p . x )] << endl ; } return 0 ; } // \u4e0b\u9762\u8fd9\u4e2a\u867d\u7136\u53ef\u4ee5\uff0c\u4e0d\u8fc7\u7a7a\u95f4\u53ef\u80fd\u5c31\u5bc4\u6389\u4e86\uff0c\u6240\u4ee5\u7528\u4e0a\u9762\u7684\u5199\u6cd5\u4f1a\u597d\u5f97\u591a\u3002 /* // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #ifndef ONLINE_JUDGE #include<cstdarg> #define meow(format, ...) \\ fprintf(stderr, format, ## __VA_ARGS__) // remember to open stream sync! #else #define meow(format, ...) 1231 #endif using namespace std; using i64 = long long; const int si = 2e5 + 10; int n, m, len; int a[si], id[si << 1]; int tot = 0; int ls[si << 9], rs[si << 9]; int root[si << 9], dat[si << 9]; int cnt1, cnt2; int tr1[si], tr2[si]; struct Query { char opt; int l, r, x; } q[si]; inline int lowbit(int x) { return x & -x; } inline int getid(int val) { return lower_bound(id + 1, id + 1 + len, val) - id; } int build(int l, int r) { int p = ++tot; if(l == r) return l; int mid = (l + r) >> 1; ls[p] = build(l, mid), rs[p] = build(mid + 1, r); return p; } void insert(int &p, int last, int l, int r, int val, int delta) { p = ++tot; dat[p] = dat[last] + delta, ls[p] = ls[last], rs[p] = rs[last]; if(l == r) return; int mid = (l + r) >> 1; if(val <= mid) insert(ls[p], ls[last], l, mid, val, delta); else insert(rs[p], rs[last], mid + 1, r, val, delta); } int ask(int l, int r, int kth) { if(l == r) return l; int mid = (l + r) >> 1; int lcnt = 0; for(int i = 1; i <= cnt2; ++i) lcnt += dat[ls[tr2[i]]]; for(int i = 1; i <= cnt1; ++i) lcnt -= dat[ls[tr1[i]]]; if(kth <= lcnt) { for(int i = 1; i <= cnt1; ++i) tr1[i] = ls[tr1[i]]; for(int i = 1; i <= cnt2; ++i) tr2[i] = ls[tr2[i]]; return ask(l, mid, kth); } else { for(int i = 1; i <= cnt1; ++i) tr1[i] = rs[tr1[i]]; for(int i = 1; i <= cnt2; ++i) tr2[i] = rs[tr2[i]]; return ask(mid + 1, r, kth - lcnt); } } void change(int x, int v) { int y = getid(a[x]); while(x <= n) { insert(root[x], root[x], 1, len, y, v); x += lowbit(x); } } int query(int l, int r, int kth) { l --, cnt1 = cnt2 = 0; while(l) tr1[++cnt1] = root[l], l -= lowbit(l); while(r) tr2[++cnt2] = root[r], r -= lowbit(r); return ask(1, len, kth); } int main() { // cin.tie(0) -> sync_with_stdio(false); // cin.exceptions(cin.failbit | cin.badbit); cin >> n >> m; int cnt = 0; for(int i = 1; i <= n; ++i) cin >> a[i], id[++cnt] = a[i]; for(int i = 1; i <= m; ++i) { Query &p = q[i]; cin >> p.opt; if(p.opt == 'C') cin >> p.l >> p.x, id[++cnt] = p.x; if(p.opt == 'Q') cin >> p.l >> p.r >> p.x; } sort(id + 1, id + 1 + cnt); len = unique(id + 1, id + 1 + cnt) - id - 1; for(int i = 1; i <= n; ++i) root[i] = build(1, len); for(int i = 1; i <= n; ++i) change(i, 1); for(int i = 1; i <= m; ++i) { Query &p = q[i]; if(p.opt == 'C') change(p.l, -1), a[p.l] = p.x, change(p.l, 1); if(p.opt == 'Q') cout << id[query(p.l, p.r, p.x)] << endl; } return 0; } */","title":"\u652f\u6301\u5355\u70b9\u4fee\u6539\u7684\u7b2c k \u5927"},{"location":"algor/ds/old-p-seg/#_5","text":"HDU4348 To the moon \u6682\u65f6\u5495\u5495\u5495","title":"\u6807\u8bb0\u6c38\u4e45\u5316"},{"location":"algor/ds/persistent-segtree/","text":"\u8fc7\u4e86\u597d\u4e00\u6bb5\u65f6\u95f4\u624d\u4e86\u89e3\u6e05\u695a\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u548c\u4e3b\u5e2d\u6811\u7684\u533a\u522b\u3002 \u611f\u89c9\u6bd4\u8f83 shaber \u7684\uff0c\u4e0d\u8fc7\u4e5f\u501f\u6b64\u53d1\u73b0\u5176\u5b9e\u7f51\u4e0a\u6709\u4e9b\u6559\u7a0b\u4e0d\u4e00\u5b9a\u51c6\u786e\uff0c\u8fd8\u662f\u8981\u81ea\u5df1\u591a\u60f3\u60f3\u3002 \u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6cdb\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 \u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7684\u672c\u8d28\u601d\u60f3\u5c31\u662f\u51fd\u6570\u5f0f\u7f16\u7a0b\uff0c\u8bf4\u4eba\u8bdd\u5c31\u662f\u4e0d\u4fee\u6539\u539f\u6709\u6570\u636e\uff0c\u6bcf\u6b21\u4fee\u6539\u64cd\u4f5c\u90fd\u65b0\u5efa\u4e00\u4e2a\u526f\u672c\u6765\u8868\u8fbe\u4fee\u6539\uff0c\u501f\u4ee5\u8fbe\u5230\u652f\u6301\u5386\u53f2\u7248\u672c\u67e5\u8be2\u7684\u76ee\u7684\u3002 \u8fd9\u4e2a\u65f6\u5019\u7528\u539f\u6765\u56fa\u5b9a\u5efa\u6811\u7684\u4e8c\u500d\u8868\u793a\u6cd5\u5c31\u7279\u522b\u9ebb\u70e6\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u9009\u62e9\u52a8\u6001\u5f00\u70b9\u3002 \u4f60\u53d1\u73b0\u5176\u5b9e\u6bcf\u6b21\u4fee\u6539\u6211\u4eec\u4e0d\u9700\u8981\u590d\u5236\u4e0a\u4e00\u4e2a\u7248\u672c\u7684\u6574\u9897\u7ebf\u6bb5\u6811\uff0c\u6211\u4eec\u53ea\u9700\u8981\u989d\u5916\u628a\u88ab\u4fee\u6539\u7684\u90a3\u6761\u8def\u5f84\u6216\u8005\u591a\u6761\u8def\u5f84\u62c9\u51fa\u6765\u5c31\u53ef\u4ee5\u4e86\u3002 \u4ece\u662f\u5b9e\u73b0\u4e0a\u6765\u8bf4\u5c31\u662f\u65b0\u5efa\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u540c\u65f6\u7528\u4e00\u4e2a\u6307\u9488\u540c\u6b65\u904d\u5386\u4e0a\u4e00\u4e2a\u7248\u672c\uff0c\u5148\u590d\u5236\u4e00\u4e2a\u5bf9\u5e94\u8282\u70b9\uff0c\u7136\u540e\u671d\u7740\u88ab\u4fee\u6539\u7684\u8282\u70b9\u65b9\u5411\u9012\u5f52\uff0c\u6ca1\u88ab\u4fee\u6539\u7684\u76f4\u63a5\u8fde\u4e00\u6761\u8fb9\u5230\u4e0a\u4e00\u4e2a\u7248\u672c\u3002 \u7c7b\u4f3c\u8fd9\u6837\uff1a \u533a\u95f4\u4fee\u6539\u4e5f\u7c7b\u4f3c\uff0c\u7136\u540e\u8be2\u95ee\u5386\u53f2\u7248\u672c\u5c31\u53ea\u9700\u8981\u4ece\u5bf9\u5e94\u7248\u672c\u5bf9\u5e94\u7684\u6839\u8282\u70b9\u9012\u5f52\u4e0b\u53bb\u3002 \u5355\u70b9\u4fee\u6539 \u03c8(\uff40\u2207\u00b4)\u03c8 Luogu3919 \u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff09 \u9996\u5148\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n \\le 10^6\\) \u7684\u6570\u7ec4\uff0c\u7136\u540e\uff0c \u5b9e\u73b0\u4e00\u4e2a\u53ef\u6301\u4e45\u5316\u7684\u6570\u7ec4\uff0c\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u5728\u67d0\u4e2a\u5386\u53f2\u7248\u672c\u4e0a\u4fee\u6539\u67d0\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u503c\u3002 \u8be2\u95ee\u67d0\u4e00\u4e2a\u5386\u53f2\u7248\u672c\u4e0a\u67d0\u4e00\u4e2a\u4f4d\u7f6e\u7684\u503c\uff0c\u5e76\u590d\u5236\u4e00\u4e2a\u65b0\u7248\u672c\u3002 \u5f88\u7b80\u5355\u7684\u677f\u5b50\u9898\uff0c\u5177\u4f53\u5b9e\u73b0\u5c31\u770b\u4ee3\u7801\u5427\uff0c\u8fd9\u91cc\u8fd8\u4e0d\u9700\u8981\u7ef4\u62a4\u533a\u95f4\u548c\uff0c\u53ea\u9700\u8981\u7ef4\u62a4\u53f6\u5b50\u8282\u70b9\u7684\u503c\u5c31\u884c\u4e86\u3002 \u5982\u679c\u8981\u7ef4\u62a4\u533a\u95f4\u548c\u5c31\u8981\u52a0\u4e0a Pushup \u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 1e6 + 10 ; int n , m ; int a [ si ]; int tot = 0 ; int ls [ si << 5 ], rs [ si << 5 ]; int root [ si << 5 ], dat [ si << 5 ]; int build ( int l , int r ) { int p = ++ tot ; if ( l == r ) { dat [ p ] = a [ l ]; return p ; } int mid = ( l + r ) >> 1 ; ls [ p ] = build ( l , mid ), rs [ p ] = build ( mid + 1 , r ); return p ; } int modify ( int last , int l , int r , int pos , int v ) { int p = ++ tot ; if ( l == r ) { dat [ p ] = v ; return p ; } int mid = ( l + r ) >> 1 ; if ( pos <= mid ) ls [ p ] = modify ( ls [ last ], l , mid , pos , v ), rs [ p ] = rs [ last ]; else rs [ p ] = modify ( rs [ last ], mid + 1 , r , pos , v ), ls [ p ] = ls [ last ]; return p ; } int query ( int p , int l , int r , int pos ) { if ( l == r ) return dat [ p ]; int mid = ( l + r ) >> 1 ; if ( pos <= mid ) return query ( ls [ p ], l , mid , pos ); else return query ( rs [ p ], mid + 1 , r , pos ); } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> m ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; root [ 0 ] = build ( 1 , n ); int cnt = 0 ; while ( m -- ) { int ver , opt ; cin >> ver >> opt ; if ( opt == 1 ) { int x , v ; cin >> x >> v ; root [ ++ cnt ] = modify ( root [ ver ], 1 , n , x , v ); } else { int x ; cin >> x ; int val = query ( root [ ver ], 1 , n , x ); root [ ++ cnt ] = modify ( root [ ver ], 1 , n , x , val ); cout << val << endl ; } } return 0 ; } \u652f\u6301\u533a\u95f4\u4fee\u6539 \u03c8(\uff40\u2207\u00b4)\u03c8 HDU 4348 To the moon \u4e3b\u5e2d\u6811 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6cdb\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e3b\u5e2d\u6811\u5168\u79f0\u53ef\u6301\u4e45\u5316\u6743\u503c\u7ebf\u6bb5\u6811\uff08\u7684\u5dee\u5206\u524d\u7f00\u548c\uff09\uff0c\u548c\u6b63\u5e38\u7684\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u6709\u4e00\u5b9a\u7684\u533a\u522b \u56e0\u4e3a\u4e3b\u5e2d\u6811\u662f\u5229\u7528\u53ef\u6301\u4e45\u5316+\u524d\u7f00\u548c\u7684\u601d\u60f3\u6765\u5b9e\u73b0\u9759\u6001 \u533a\u95f4 \u7b2c \\(k\\) \u5927\uff0c\u800c\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u5219\u662f\u771f\u6b63\u7684\u76f4\u63a5\u7ef4\u62a4\u5404\u4e2a\u5386\u53f2\u7248\u672c\u3002 \u4e3b\u5e2d\u6811\u7684\u601d\u60f3\u548c\u53ef\u6301\u4e45\u5316 Trie \u7684\u601d\u60f3\u662f\u4e00\u81f4\u7684\uff0c\u90fd\u662f\u4ee5\u51fd\u6570\u5f0f\u7f16\u7a0b\u7684\u65b9\u5f0f\u4fdd\u5b58\u5386\u53f2\u7248\u672c\uff0c\u4ee5\u628a\u4fe1\u606f\u4ece\u5168\u5c40\u8f6c\u5316\u4e3a\u533a\u95f4\u3002 \u4e00\u4e2a\u6bd4\u8f83\u7ecf\u5178\u7684\u95ee\u9898\u5c31\u662f\u9759\u6001\u533a\u95f4\u7b2c k \u5927\uff0c\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u663e\u7136\u53ef\u4ee5\u5f88\u8f7b\u677e\u641e\u5b9a\u5168\u5c40\u7684\u7248\u672c\u3002 \u4e8e\u662f\u628a\u6743\u503c\u7ebf\u6bb5\u6811\u53ef\u6301\u4e45\u5316\u4e4b\u540e\u5229\u7528\u524d\u7f00\u548c\u7684\u601d\u60f3\u5c31\u53ef\u4ee5\u505a\u533a\u95f4\u4e86\u3002 \u4e0d\u8fc7\u4e3b\u5e2d\u6811\u4e00\u822c\u96be\u4ee5\u652f\u6301\u533a\u95f4\u4fee\u6539\uff0c\u6700\u591a\u652f\u6301\u4e00\u4e0b\u5355\u70b9\u4fee\u6539\u3002 \u533a\u95f4\u4fee\u6539\u5728\u4fe1\u606f\u6bd4\u8f83\u7279\u6b8a\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u7528\u6807\u8bb0\u6c38\u4e45\u5316\u505a\uff0c\u4e0d\u8fc7\u4e5f\u975e\u5e38\u6709\u5c40\u9650\u6027\u3002 \u56e0\u4e3a\u4e3b\u5e2d\u6811\u7ef4\u62a4\u7684\u662f\u503c\u57df\uff0c\u76f4\u63a5\u5728\u5e8f\u5217\u4e0a\u533a\u95f4\u4fee\u6539\u5f88\u4e0d\u65b9\u4fbf\uff08 \u9759\u6001\u533a\u95f4\u7b2c k \u5927 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e3b\u5e2d\u6811\u7684\u4e3b\u8981\u601d\u60f3\u5c31\u662f\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217\uff0c\u4ece\u5de6\u5f80\u53f3\u4f9d\u6b21\u63d2\u5165\u5e8f\u5217\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u3002 \u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\u7684\u65f6\u5019\u7ef4\u62a4\u5386\u53f2\u7248\u672c\uff0c\u4e5f\u5c31\u662f\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u5143\u7d20\u521a\u63d2\u5165\u7684\u65f6\u5019\uff0c\u7ebf\u6bb5\u6811\u7684\u6837\u5b50\u3002 \u663e\u7136\u4e00\u4e2a\u6bd4\u8f83\u66b4\u529b\u7684\u505a\u6cd5\u662f\uff0c\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u6570\uff08\u65b0\u5efa\u4e00\u4e2a\u7248\u672c\uff09\u7684\u65f6\u5019\uff0c\u90fd\u628a\u539f\u6765\u7684\u7ebf\u6bb5\u6811\u590d\u5236\u4e00\u6b21\uff0c\u7136\u540e\u628a\u65b0\u7684\u7248\u672c\u52a0\u4e0a\u53bb\u3002 \u4e0d\u8fc7\u8fd9\u6837\u7a7a\u95f4\u662f \\(O(nm)\\) \u7684\uff0c\u975e\u5e38\u4e0d\u4f18\u79c0\u3002 \u53d1\u73b0\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u6570\uff0c\u5728\u503c\u57df\u4e0a\u53ea\u4f1a\u4fee\u6539\u4e00\u4e2a\u70b9\uff0c\u5bf9\u5e94\u5230\u7ebf\u6bb5\u6811\u4e0a\u5c31\u662f\u53ea\u4fee\u6539\u4e00\u6761\u4ece\u6839\u8282\u70b9\u5230\u5bf9\u5e94\u53f6\u5b50\u8282\u70b9\u7684\u94fe\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u628a\u8fd9\u4e2a\u88ab\u4fee\u6539\u7684\u94fe\u5355\u72ec\u590d\u5236\u4e00\u6b21\u62c9\u51fa\u6765\uff0c\u8bb0\u5f55\u4e00\u4e0b\u63d2\u5165\u4e4b\u540e\uff0c\u5f53\u524d\u7248\u672c\u6811\u6839\u7684\u7f16\u53f7\u3002 \u4e8e\u662f\u7a7a\u95f4\u5f00\u9500\u5c31\u5927\u5927\u51cf\u5c0f\u4e86\uff0c\u4ece \\(O(nm)\\) \u53d8\u6210\u4e86 \\(O(n + m\\log n)\\) \u3002 \u5177\u4f53\u6765\u8bf4\u662f\u8fd9\u6837\u7684\uff1a \u84dd\u8272\u8282\u70b9\u662f\u539f\u6765\u7248\u672c\u4e0a\u7684\u94fe\uff0c\u7ea2\u8272\u8282\u70b9\u662f\u73b0\u5728\u7248\u672c\u4e0a\u7684\u94fe\u3002 \u7b80\u5355\u6765\u8bf4\u5c31\u662f\uff0c\u5bf9\u4e8e\u4e0a\u4e00\u4e2a\u7248\u672c\u7684\u8282\u70b9 \\(p\\) \uff0c\u590d\u5236\u4e00\u4e2a\u65b0\u7684\u8282\u70b9 \\(q\\) \u51fa\u6765\u3002 \u5982\u679c\u4e0b\u4e00\u6b65\u662f\u9012\u5f52 \\(p.ls\\) \uff0c\u90a3\u4e48 \\(q.ls\\) \u5c31\u9700\u8981\u65b0\u5efa\uff0c\u7136\u540e \\(q.rs\\) \u5c31\u662f\u539f\u6765\u7684 \\(p.ls\\) \uff0c\u53cd\u8fc7\u6765\u540c\u7406\u3002 \u67e5\u8be2 \\([l, r]\\) \u7684\u7b2c k \u5927\u4e5f\u6bd4\u8f83\u597d\u505a\uff0c\u5c31\u76f4\u63a5\u7ebf\u6bb5\u6811\u4e8c\u5206\uff0c\u7136\u540e\u7528\u4e24\u4e2a\u6307\u9488 \\(p, q\\) \uff0c \u540c\u6b65 \u904d\u5386 \\(l - 1\\) \uff0c \\(r\\) \u4e24\u4e2a\u7248\u672c\u3002 \u6bd4\u8f83\u4e00\u4e0b\u5f53\u524d\u7684 k \u548c lcnt = dat[ls[q]] - dat[ls[p]] \u7684\u5927\u5c0f\uff0c\u5982\u679c \\(k \\le lcnt\\) \uff0c\u5c31\u8ba9 \\(p,q\\) \u90fd\u5f80\u5de6\u5b50\u6811\u8d70\uff0c\u5426\u5219 \\(k - lcnt\\) \uff0c\u7136\u540e\u8d70\u53f3\u5b50\u6811\u5c31\u884c\u4e86\u3002 \u53ef\u4ee5\u7406\u89e3\u6210\u5728\u4e24\u9897\u6743\u503c\u7ebf\u6bb5\u6811\u5408\u5e76\u4e4b\u540e\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u8fdb\u884c\u64cd\u4f5c \uff0c\u5408\u5e76\u540e\u7684\u4fe1\u606f\u5c31\u662f \\(r\\) \u7248\u672c\u7684\u4fe1\u606f\u51cf\u53bb \\(l - 1\\) \u7684\u4fe1\u606f\u3002 \uff08\u6240\u4ee5\u4e3b\u5e2d\u6811\u7ef4\u62a4\u7684\u4fe1\u606f\u4e0d\u4ec5\u8981\u6ee1\u8db3\u5e7a\u534a\u7fa4\u6027\u8d28\uff0c\u8fd8\u9700\u8981\u6ee1\u8db3\u533a\u95f4\u53ef\u52a0\u51cf\u6027\uff01\uff09 \u5efa\u6811\u7684\u65f6\u5019\u5148\u5bf9\u4e8e\u503c\u57df\u5efa\u4e00\u4e2a\u6bcf\u4e2a\u8282\u70b9\u6743\u503c\u90fd\u4e3a\u7a7a\u7684\u7ebf\u6bb5\u6811\uff0c\u6839\u8282\u70b9\u6807\u8bb0\u4e3a\u7b2c\u96f6\u4e2a\u7248\u672c\u7684\u6839\u8282\u70b9\uff0c\u65b9\u4fbf\u4e4b\u540e\u66f4\u65b0\u3002 \u7a7a\u95f4\u5f00\u4e2a << 5 \u5c31\u884c\u4e86\uff0c\u53cd\u6b63\u4e00\u822c\u80fd\u7528\u4e3b\u5e2d\u6811\u7684\u9898\u7a7a\u95f4\u90fd\u5f88\u5bbd\u677e\u3002 \u4ee3\u7801\uff1a POJ2104 - K-th Number 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #ifndef ONLINE_JUDGE #include <cstdarg> #define meow(format, ...) \\ fprintf(stderr, format, ## __VA_ARGS__) // remember to open stream sync! #else #define meow(format, ...) 1231 #endif using namespace std ; // using i64 = long long; template < typename __Tp > void read ( __Tp & x ) { int f = x = 0 ; char ch = getchar (); for (; ! isdigit ( ch ); ch = getchar ()) if ( ch == '-' ) f = 1 ; for (; isdigit ( ch ); ch = getchar ()) x = ( x << 1 ) + ( x << 3 ) + ( ch ^ 48 ); if ( f ) x = - x ; } // void read(modint &x) { int __value; read(__value); x = __value; return; } void read ( char & ch ) { for ( ch = getchar (); isspace ( ch ); ch = getchar ()); } // template <typename __Tp1, typename ...__Tp2> void read(__Tp1 &x, __Tp2 &... y) { read(x), read(y...); } template < typename __Tp > void write ( __Tp x ) { if ( x < 0 ) putchar ( '-' ), x = - x ; if ( x > 9 ) write ( x / 10 ); putchar ( x % 10 + 48 ); } void write ( char ch ) { putchar ( ch ); } // void write(modint x) { write(x.val()); } void write ( const char * s ) { for (; * s ; ++ s ) putchar ( * s ); } // template <typename __Tp1, typename ...__Tp2> void write(__Tp1 x, __Tp2 ... y) { write(x), write(y...); } const int si = 1e5 + 10 ; int n , m , len ; int a [ si ], id [ si ]; int tot = 0 ; int ls [ si << 5 ], rs [ si << 5 ]; int root [ si << 5 ], dat [ si << 5 ]; int build ( int l , int r ) { int p = ++ tot ; if ( l == r ) return p ; int mid = ( l + r ) >> 1 ; ls [ p ] = build ( l , mid ), rs [ p ] = build ( mid + 1 , r ); return p ; } int insert ( int last , int l , int r , int val ) { // last \u662f\u4e0a\u4e00\u4e2a\u7248\u672c\u7684 [l, r] \u8282\u70b9\u3002 int p = ++ tot ; dat [ p ] = dat [ last ] + 1 ; if ( l == r ) return p ; int mid = ( l + r ) >> 1 ; if ( val <= mid ) ls [ p ] = insert ( ls [ last ], l , mid , val ), rs [ p ] = rs [ last ]; else rs [ p ] = insert ( rs [ last ], mid + 1 , r , val ), ls [ p ] = ls [ last ]; return p ; } int ask ( int p , int q , int l , int r , int kth ) { if ( l == r ) return l ; int mid = ( l + r ) >> 1 ; int lcnt = dat [ ls [ q ]] - dat [ ls [ p ]]; if ( kth <= lcnt ) return ask ( ls [ p ], ls [ q ], l , mid , kth ); else return ask ( rs [ p ], rs [ q ], mid + 1 , r , kth - lcnt ); } int index ( int val ) { return lower_bound ( id + 1 , id + 1 + len , val ) - id ; } int main () { read ( n ), read ( m ); for ( int i = 1 ; i <= n ; ++ i ) read ( a [ i ]), id [ i ] = a [ i ]; sort ( id + 1 , id + 1 + n ); len = unique ( id + 1 , id + 1 + n ) - id - 1 ; root [ 0 ] = build ( 1 , len ); for ( int i = 1 ; i <= n ; ++ i ) root [ i ] = insert ( root [ i - 1 ], 1 , len , index ( a [ i ])); while ( m -- ) { int l , r , k ; read ( l ), read ( r ), read ( k ); write ( id [ ask ( root [ l - 1 ], root [ r ], 1 , len , k )]); write ( endl ); } return 0 ; } \u590d\u6742\u5ea6\u663e\u7136 1log\u3002 \u603b\u7ed3\u4e00\u4e0b\uff0c\u4e3b\u5e2d\u6811\u9898\u53ea\u9700\u8981\u8003\u8651\uff0c\u600e\u4e48\u7ef4\u62a4\u5386\u53f2\u7248\u672c\u4ee5\u8fbe\u5230\u533a\u95f4\u67e5\u8be2\uff0c \u600e\u4e48\u51d1\u51fa\u4e00\u4e2a\u65b0\u7684\u4fe1\u606f\uff0c\u653e\u5230\u4e00\u4e2a\u65b0\u7684\u7ebf\u6bb5\u6811\u4e0a\uff0c\u5728\u8fd9\u4e2a\u65b0\u7684\u7ebf\u6bb5\u6811\u4e0a\u8fdb\u884c\u64cd\u4f5c\u3002 \uff08\u65b0\u7684\u7ebf\u6bb5\u6811\u5e76\u4e0d\u9700\u8981\u5b9e\u9645\u5408\u5e76\u51fa\u6765\uff0c\u53ea\u9700\u8981\u591a\u4e2a\u6307\u9488\u540c\u6b65\u904d\u5386\u9700\u8981\u7684\u7248\u672c\u5373\u53ef\uff09 \u52a8\u6001\u533a\u95f4\u7b2c k \u5927 \u03c8(\uff40\u2207\u00b4)\u03c8 Luogu2617 Dynamic Rankings \u5355\u70b9\u4fee\u6539\u533a\u95f4\u8be2\u95ee\u7b2c \\(k\\) \u5927\uff0c1e5\u3002 \u76f4\u63a5\u66b4\u529b\u505a\u7684\u8bdd\uff0c\u6bcf\u6b21\u5355\u70b9\u4fee\u6539 \\(i\\) \u9700\u8981\u4fee\u6539 \\([i,n]\\) \u7684\u6240\u6709\u7248\u672c\uff0c\u5355\u6b21\u590d\u6742\u5ea6\u662f \\(O(n \\log n)\\) \u7684\uff0c\u4e0d\u80fd\u63a5\u53d7\u3002 \u53ef\u4ee5\u60f3\u5230\u4e3b\u5e2d\u6811\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u201c\u5e7f\u4e49\u201d\u7684\u524d\u7f00\u548c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u4e3b\u5e2d\u6811\uff0c\u6765\u8ba9\u9700\u8981\u4fee\u6539\u7684\u7248\u672c\u6570\u51cf\u5c11\u5230 \\(O(\\log n)\\) \u4e2a\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u6bcf\u6b21\u4fee\u6539 \\(x\\) \u8fd9\u4e2a\u7248\u672c\u7684\u67d0\u4e2a\u503c\uff0c\u5c31\u4fee\u6539 \\(x + \\text{lowbit}(x), x + \\text{lowbit}(x) + \\text{lowbit}(x + \\text{lowbit}(x)), \\dots\\) \u8fd9\u51e0\u4e2a\u7248\u672c\u7684\u8fd9\u4e2a\u503c\u5c31\u884c\u4e86\u3002 \u7136\u540e\u4fee\u6539\u7684\u65f6\u5019\u9700\u8981\u81ea\u5df1\u5728\u81ea\u5df1\u7248\u672c\u4e0a\u65b0\u5efa\uff0c\u56e0\u4e3a\u5982\u679c\u76f4\u63a5\u4fee\u6539\u53ef\u80fd\u4f1a\u5f71\u54cd\u5230\u540e\u9762\u7684\u7248\u672c\uff08\u540e\u9762\u7684\u7248\u672c\u5bf9\u524d\u9762\u7684\u7248\u672c\u6709\u4f9d\u8d56\uff09\u3002 \uff08\u6709\u70b9\u7c7b\u4f3c\u4e4b\u524d\u770b\u9519\u7684\u90a3\u4e2a ABC \u7684 F\uff0c\u628a\u539f\u6765\u7684\u4fdd\u7559\u5728\u90a3\u91cc\uff0c\u81ea\u5df1\u5b9e\u9645\u8f6c\u79fb\u5230\u65b0\u7684\u526f\u672c\u4e0a\u53bb\uff09 \u67e5\u8be2\u5c31\u9884\u5904\u7406\u51fa\u5bf9\u5e94\u7684\u4e24\u6279 \\(O(\\log n)\\) \u4e2a\u4e3b\u5e2d\u6811\u7684\u4fe1\u606f\uff0c\u5408\u5e76\u4e4b\u540e\u5728\u4e0a\u9762\u7ebf\u6bb5\u6811\u4e8c\u5206\u5373\u53ef\u3002 \u8fd9\u91cc\u7684\u4ee3\u7801\u4f7f\u7528\u4e86\u53e6\u5916\u4e00\u79cd\u52a8\u6001\u5f00\u70b9\u7684\u5199\u6cd5\uff0c\u66f4\u8282\u7701\u7a7a\u95f4\u3002 \u6ce8\u610f\u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0\u5728\u521d\u59cb\u7684\u65f6\u5019\u628a\u4e3b\u5e2d\u6811\u6254\u5230\u6811\u72b6\u6570\u7ec4\u4e0a\uff01 Codeauthor : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #ifndef ONLINE_JUDGE #include <cstdarg> #define meow(format, ...) \\ fprintf(stderr, format, ## __VA_ARGS__) // remember to open stream sync! #else #define meow(format, ...) 1231 #endif using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int n , m , len ; int a [ si ], id [ si << 1 ]; int tot = 0 ; int ls [ si << 8 ], rs [ si << 8 ]; int root [ si << 8 ], dat [ si << 8 ]; int cnt1 , cnt2 ; int tr1 [ si ], tr2 [ si ]; struct Query { char opt ; int l , r , x ; } q [ si ]; inline int lowbit ( int x ) { return x & - x ; } inline int getid ( int val ) { return lower_bound ( id + 1 , id + 1 + len , val ) - id ; } int build ( int l , int r ) { int p = ++ tot ; if ( l == r ) return l ; int mid = ( l + r ) >> 1 ; ls [ p ] = build ( l , mid ), rs [ p ] = build ( mid + 1 , r ); return p ; } void insert ( int & p , int last , int l , int r , int val , int delta ) { p = ++ tot ; dat [ p ] = dat [ last ] + delta , ls [ p ] = ls [ last ], rs [ p ] = rs [ last ]; if ( l == r ) return ; int mid = ( l + r ) >> 1 ; if ( val <= mid ) insert ( ls [ p ], ls [ last ], l , mid , val , delta ); else insert ( rs [ p ], rs [ last ], mid + 1 , r , val , delta ); } int ask ( int l , int r , int kth ) { if ( l == r ) return l ; int mid = ( l + r ) >> 1 ; int lcnt = 0 ; for ( int i = 1 ; i <= cnt2 ; ++ i ) lcnt += dat [ ls [ tr2 [ i ]]]; for ( int i = 1 ; i <= cnt1 ; ++ i ) lcnt -= dat [ ls [ tr1 [ i ]]]; if ( kth <= lcnt ) { for ( int i = 1 ; i <= cnt1 ; ++ i ) tr1 [ i ] = ls [ tr1 [ i ]]; for ( int i = 1 ; i <= cnt2 ; ++ i ) tr2 [ i ] = ls [ tr2 [ i ]]; return ask ( l , mid , kth ); } else { for ( int i = 1 ; i <= cnt1 ; ++ i ) tr1 [ i ] = rs [ tr1 [ i ]]; for ( int i = 1 ; i <= cnt2 ; ++ i ) tr2 [ i ] = rs [ tr2 [ i ]]; return ask ( mid + 1 , r , kth - lcnt ); } } void change ( int x , int v ) { int y = getid ( a [ x ]); while ( x <= n ) { insert ( root [ x ], root [ x ], 1 , len , y , v ); x += lowbit ( x ); } } int query ( int l , int r , int kth ) { l -- , cnt1 = cnt2 = 0 ; while ( l ) tr1 [ ++ cnt1 ] = root [ l ], l -= lowbit ( l ); while ( r ) tr2 [ ++ cnt2 ] = root [ r ], r -= lowbit ( r ); return ask ( 1 , len , kth ); } int main () { // cin.tie(0) -> sync_with_stdio(false); // cin.exceptions(cin.failbit | cin.badbit); cin >> n >> m ; int cnt = 0 ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], id [ ++ cnt ] = a [ i ]; for ( int i = 1 ; i <= m ; ++ i ) { Query & p = q [ i ]; cin >> p . opt ; if ( p . opt == 'C' ) cin >> p . l >> p . x , id [ ++ cnt ] = p . x ; if ( p . opt == 'Q' ) cin >> p . l >> p . r >> p . x ; } sort ( id + 1 , id + 1 + cnt ); len = unique ( id + 1 , id + 1 + cnt ) - id - 1 ; for ( int i = 1 ; i <= n ; ++ i ) change ( i , 1 ); for ( int i = 1 ; i <= m ; ++ i ) { Query & p = q [ i ]; if ( p . opt == 'C' ) change ( p . l , -1 ), a [ p . l ] = p . x , change ( p . l , 1 ); if ( p . opt == 'Q' ) cout << id [ query ( p . l , p . r , p . x )] << endl ; } return 0 ; } // \u4e0b\u9762\u8fd9\u4e2a\u867d\u7136\u53ef\u4ee5\uff0c\u4e0d\u8fc7\u7a7a\u95f4\u53ef\u80fd\u5c31\u5bc4\u6389\u4e86\uff0c\u6240\u4ee5\u7528\u4e0a\u9762\u7684\u5199\u6cd5\u4f1a\u597d\u5f97\u591a\u3002 /* // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #ifndef ONLINE_JUDGE #include<cstdarg> #define meow(format, ...) \\ fprintf(stderr, format, ## __VA_ARGS__) // remember to open stream sync! #else #define meow(format, ...) 1231 #endif using namespace std; using i64 = long long; const int si = 2e5 + 10; int n, m, len; int a[si], id[si << 1]; int tot = 0; int ls[si << 9], rs[si << 9]; int root[si << 9], dat[si << 9]; int cnt1, cnt2; int tr1[si], tr2[si]; struct Query { char opt; int l, r, x; } q[si]; inline int lowbit(int x) { return x & -x; } inline int getid(int val) { return lower_bound(id + 1, id + 1 + len, val) - id; } int build(int l, int r) { int p = ++tot; if(l == r) return l; int mid = (l + r) >> 1; ls[p] = build(l, mid), rs[p] = build(mid + 1, r); return p; } void insert(int &p, int last, int l, int r, int val, int delta) { p = ++tot; dat[p] = dat[last] + delta, ls[p] = ls[last], rs[p] = rs[last]; if(l == r) return; int mid = (l + r) >> 1; if(val <= mid) insert(ls[p], ls[last], l, mid, val, delta); else insert(rs[p], rs[last], mid + 1, r, val, delta); } int ask(int l, int r, int kth) { if(l == r) return l; int mid = (l + r) >> 1; int lcnt = 0; for(int i = 1; i <= cnt2; ++i) lcnt += dat[ls[tr2[i]]]; for(int i = 1; i <= cnt1; ++i) lcnt -= dat[ls[tr1[i]]]; if(kth <= lcnt) { for(int i = 1; i <= cnt1; ++i) tr1[i] = ls[tr1[i]]; for(int i = 1; i <= cnt2; ++i) tr2[i] = ls[tr2[i]]; return ask(l, mid, kth); } else { for(int i = 1; i <= cnt1; ++i) tr1[i] = rs[tr1[i]]; for(int i = 1; i <= cnt2; ++i) tr2[i] = rs[tr2[i]]; return ask(mid + 1, r, kth - lcnt); } } void change(int x, int v) { int y = getid(a[x]); while(x <= n) { insert(root[x], root[x], 1, len, y, v); x += lowbit(x); } } int query(int l, int r, int kth) { l --, cnt1 = cnt2 = 0; while(l) tr1[++cnt1] = root[l], l -= lowbit(l); while(r) tr2[++cnt2] = root[r], r -= lowbit(r); return ask(1, len, kth); } int main() { // cin.tie(0) -> sync_with_stdio(false); // cin.exceptions(cin.failbit | cin.badbit); cin >> n >> m; int cnt = 0; for(int i = 1; i <= n; ++i) cin >> a[i], id[++cnt] = a[i]; for(int i = 1; i <= m; ++i) { Query &p = q[i]; cin >> p.opt; if(p.opt == 'C') cin >> p.l >> p.x, id[++cnt] = p.x; if(p.opt == 'Q') cin >> p.l >> p.r >> p.x; } sort(id + 1, id + 1 + cnt); len = unique(id + 1, id + 1 + cnt) - id - 1; for(int i = 1; i <= n; ++i) root[i] = build(1, len); for(int i = 1; i <= n; ++i) change(i, 1); for(int i = 1; i <= m; ++i) { Query &p = q[i]; if(p.opt == 'C') change(p.l, -1), a[p.l] = p.x, change(p.l, 1); if(p.opt == 'Q') cout << id[query(p.l, p.r, p.x)] << endl; } return 0; } */ \u5c0f\u7ec3\u4e60 \u03c8(\uff40\u2207\u00b4)\u03c8 Luogu2633 Count on a tree \u7ed9\u5b9a\u4e00\u68f5 \\(n\\) \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u6743\u503c\u3002\u6709 \\(m\\) \u4e2a\u8be2\u95ee\uff0c \u6bcf\u6b21\u7ed9\u4f60 \\(u,v,k\\) \uff0c\u4f60\u9700\u8981\u56de\u7b54 \\(u \\text{ xor last}\\) \u548c \\(v\\) \u8fd9\u4e24\u4e2a\u8282\u70b9\u95f4\u7b2c \\(k\\) \u5c0f\u7684\u70b9\u6743\u3002 \u5176\u4e2d \\(\\text{last}\\) \u662f\u4e0a\u4e00\u4e2a\u8be2\u95ee\u7684\u7b54\u6848\uff0c\u5b9a\u4e49\u5176\u521d\u59cb\u4e3a \\(0\\) \uff0c\u5373\u7b2c\u4e00\u4e2a\u8be2\u95ee\u7684 \\(u\\) \u662f\u660e\u6587\u3002 1e5 \u53d1\u73b0\u7b2c \\(i\\) \u4e2a\u7248\u672c\u7684\u4e3b\u5e2d\u6811\u53ef\u4ee5\u611f\u6027\u7684\u7406\u89e3\u4e3a\u4e00\u79cd\u524d\u7f00\u548c\u3002 \u4e8e\u662f\u5728\u8be2\u95ee \\([l, r]\\) \u7684\u65f6\u5019\u53ef\u4ee5\u628a dat[r] - dat[l - 1] \u5f53\u4f5c\u4fe1\u606f\u62cd\u5230\u4e00\u4e2a\u65b0\u7684\u7ebf\u6bb5\u6811\u4e0a\u64cd\u4f5c\uff08\u5b9e\u9645\u64cd\u4f5c\u5c31\u662f\u62ff\u4e24\u4e2a\u6307\u9488\u540c\u6b65\u8d70\u4e24\u4e2a\u7248\u672c\u7684\u7ebf\u6bb5\u6811\uff09\u3002 \u8fd9\u91cc\u662f\u5728\u6811\u4e0a\u8be2\u95ee\uff0c\u53ef\u4ee5\u8003\u8651\u6811\u5256\uff0c\u4f46\u662f\u4f3c\u4e4e\u5f88\u9ebb\u70e6\u3002 \u4e3b\u5e2d\u6811\u7ef4\u62a4\u7684\u4fe1\u606f\u5177\u6709\u533a\u95f4\u53ef\u52a0\u53ef\u51cf\u6027\uff0c\u6362\u53e5\u8bdd\u8bf4\u53ef\u4ee5\u505a\u524d\u7f00\u548c\u4e5f\u53ef\u4ee5\u5dee\u5206\u3002 \u6240\u4ee5\u6211\u4eec\u8003\u8651\u600e\u4e48\u51d1\u4e00\u4e2a\u65b0\u7684\u7ebf\u6bb5\u6811\uff0c\u4f7f\u4ed6\u80fd\u5305\u542b\u8def\u5f84 \\((u,v)\\) \u7684\u4fe1\u606f\uff0c\u7136\u540e\u5728\u4e0a\u9762\u7ebf\u6bb5\u6811\u4e8c\u5206\u5c31\u53ef\u4ee5\u4e86\u3002 \u6211\u4eec\u8bbe\u7248\u672c \\(i\\) \u8868\u793a\u6839\u8282\u70b9\u5230\u8282\u70b9 \\(i\\) \u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8282\u70b9\u6784\u6210\u7684\u4e3b\u5e2d\u6811\uff0c \u7136\u540e\u53d1\u73b0\u6b64\u65f6\u53ef\u4ee5\u6811\u4e0a\u5dee\u5206\u6765\u51d1\u51fa\u8def\u5f84 \\((u, v)\\) \uff0c\u4e8e\u662f\u65b0\u7684\u7ebf\u6bb5\u6811\u7684\u4fe1\u606f\u5c31\u662f dat[u] + dat[v] - dat[lca(u, v)] - dat[fa(lca(u, v))] \u3002 \u5b9e\u73b0\u76f4\u63a5\u62ff\u56db\u4e2a\u6307\u9488\u540c\u6b65\u904d\u5386\u8fd9\u56db\u4e2a\u7248\u672c\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 1e5 + 10 ; int n , m , len , cnt ; int a [ si ], id [ si ]; int head [ si << 1 ]; struct Edge { int ver , Next ; } e [ si << 1 ]; void add ( int u , int v ) { e [ cnt ]. ver = v , e [ cnt ]. Next = head [ u ], head [ u ] = cnt ++ ; } int get_id ( int val ) { return lower_bound ( id + 1 , id + 1 + len , val ) - id ; } int tot = 0 ; int ls [ si << 5 ], rs [ si << 5 ]; int root [ si << 5 ], dat [ si << 5 ]; int build ( int l , int r ) { int p = ++ tot ; if ( l == r ) return p ; int mid = ( l + r ) >> 1 ; ls [ p ] = build ( l , mid ), rs [ p ] = build ( mid + 1 , r ); return p ; } int insert ( int last , int l , int r , int v ) { int p = ++ tot ; dat [ p ] = dat [ last ] + 1 ; if ( l == r ) return p ; int mid = ( l + r ) >> 1 ; if ( v <= mid ) ls [ p ] = insert ( ls [ last ], l , mid , v ), rs [ p ] = rs [ last ]; else rs [ p ] = insert ( rs [ last ], mid + 1 , r , v ), ls [ p ] = ls [ last ]; return p ; } int ask ( int p , int q , int u , int v , int l , int r , int kth ) { if ( l == r ) return l ; int mid = ( l + r ) >> 1 ; int lcnt = dat [ ls [ p ]] + dat [ ls [ q ]] - dat [ ls [ u ]] - dat [ ls [ v ]]; if ( kth <= lcnt ) return ask ( ls [ p ], ls [ q ], ls [ u ], ls [ v ], l , mid , kth ); else return ask ( rs [ p ], rs [ q ], rs [ u ], rs [ v ], mid + 1 , r , kth - lcnt ); } int dep [ si ]; int f [ si ][ 21 ]; void dfs ( int u , int fa ) { f [ u ][ 0 ] = fa , dep [ u ] = dep [ fa ] + 1 ; for ( int i = 1 ; i <= 20 ; ++ i ) f [ u ][ i ] = f [ f [ u ][ i - 1 ]][ i - 1 ]; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; root [ v ] = insert ( root [ u ], 1 , len , get_id ( a [ v ])); dfs ( v , u ); } } int lca ( int u , int v ) { if ( dep [ u ] < dep [ v ]) swap ( u , v ); for ( int i = 20 ; i >= 0 ; -- i ) if ( dep [ f [ u ][ i ]] >= dep [ v ]) u = f [ u ][ i ]; if ( u == v ) return u ; for ( int i = 20 ; i >= 0 ; -- i ) if ( f [ u ][ i ] != f [ v ][ i ]) u = f [ u ][ i ], v = f [ v ][ i ]; return f [ u ][ 0 ]; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); memset ( head , -1 , sizeof head ); cin >> n >> m ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], id [ i ] = a [ i ]; sort ( id + 1 , id + 1 + n ); len = unique ( id + 1 , id + 1 + n ) - id - 1 ; for ( int i = 1 ; i < n ; ++ i ) { int u , v ; cin >> u >> v ; add ( u , v ), add ( v , u ); } root [ 0 ] = build ( 1 , len ); root [ 1 ] = insert ( root [ 0 ], 1 , len , get_id ( a [ 1 ])); dfs ( 1 , 0 ); int lastans = 0 ; while ( m -- ) { int u , v , k ; cin >> u >> v >> k ; u ^= lastans ; int Lca = lca ( u , v ), Fa = f [ Lca ][ 0 ]; cout << ( lastans = id [ ask ( root [ u ], root [ v ], root [ Lca ], root [ Fa ], 1 , len , k )]) << endl ; } return 0 ; }","title":"\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811"},{"location":"algor/ds/persistent-segtree/#_1","text":"","title":"\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811"},{"location":"algor/ds/persistent-segtree/#_2","text":"\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7684\u672c\u8d28\u601d\u60f3\u5c31\u662f\u51fd\u6570\u5f0f\u7f16\u7a0b\uff0c\u8bf4\u4eba\u8bdd\u5c31\u662f\u4e0d\u4fee\u6539\u539f\u6709\u6570\u636e\uff0c\u6bcf\u6b21\u4fee\u6539\u64cd\u4f5c\u90fd\u65b0\u5efa\u4e00\u4e2a\u526f\u672c\u6765\u8868\u8fbe\u4fee\u6539\uff0c\u501f\u4ee5\u8fbe\u5230\u652f\u6301\u5386\u53f2\u7248\u672c\u67e5\u8be2\u7684\u76ee\u7684\u3002 \u8fd9\u4e2a\u65f6\u5019\u7528\u539f\u6765\u56fa\u5b9a\u5efa\u6811\u7684\u4e8c\u500d\u8868\u793a\u6cd5\u5c31\u7279\u522b\u9ebb\u70e6\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u9009\u62e9\u52a8\u6001\u5f00\u70b9\u3002 \u4f60\u53d1\u73b0\u5176\u5b9e\u6bcf\u6b21\u4fee\u6539\u6211\u4eec\u4e0d\u9700\u8981\u590d\u5236\u4e0a\u4e00\u4e2a\u7248\u672c\u7684\u6574\u9897\u7ebf\u6bb5\u6811\uff0c\u6211\u4eec\u53ea\u9700\u8981\u989d\u5916\u628a\u88ab\u4fee\u6539\u7684\u90a3\u6761\u8def\u5f84\u6216\u8005\u591a\u6761\u8def\u5f84\u62c9\u51fa\u6765\u5c31\u53ef\u4ee5\u4e86\u3002 \u4ece\u662f\u5b9e\u73b0\u4e0a\u6765\u8bf4\u5c31\u662f\u65b0\u5efa\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u540c\u65f6\u7528\u4e00\u4e2a\u6307\u9488\u540c\u6b65\u904d\u5386\u4e0a\u4e00\u4e2a\u7248\u672c\uff0c\u5148\u590d\u5236\u4e00\u4e2a\u5bf9\u5e94\u8282\u70b9\uff0c\u7136\u540e\u671d\u7740\u88ab\u4fee\u6539\u7684\u8282\u70b9\u65b9\u5411\u9012\u5f52\uff0c\u6ca1\u88ab\u4fee\u6539\u7684\u76f4\u63a5\u8fde\u4e00\u6761\u8fb9\u5230\u4e0a\u4e00\u4e2a\u7248\u672c\u3002 \u7c7b\u4f3c\u8fd9\u6837\uff1a \u533a\u95f4\u4fee\u6539\u4e5f\u7c7b\u4f3c\uff0c\u7136\u540e\u8be2\u95ee\u5386\u53f2\u7248\u672c\u5c31\u53ea\u9700\u8981\u4ece\u5bf9\u5e94\u7248\u672c\u5bf9\u5e94\u7684\u6839\u8282\u70b9\u9012\u5f52\u4e0b\u53bb\u3002","title":"\u6cdb\u5316"},{"location":"algor/ds/persistent-segtree/#_3","text":"Luogu3919 \u3010\u6a21\u677f\u3011\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 1\uff08\u53ef\u6301\u4e45\u5316\u6570\u7ec4\uff09 \u9996\u5148\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n \\le 10^6\\) \u7684\u6570\u7ec4\uff0c\u7136\u540e\uff0c \u5b9e\u73b0\u4e00\u4e2a\u53ef\u6301\u4e45\u5316\u7684\u6570\u7ec4\uff0c\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u5728\u67d0\u4e2a\u5386\u53f2\u7248\u672c\u4e0a\u4fee\u6539\u67d0\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u503c\u3002 \u8be2\u95ee\u67d0\u4e00\u4e2a\u5386\u53f2\u7248\u672c\u4e0a\u67d0\u4e00\u4e2a\u4f4d\u7f6e\u7684\u503c\uff0c\u5e76\u590d\u5236\u4e00\u4e2a\u65b0\u7248\u672c\u3002 \u5f88\u7b80\u5355\u7684\u677f\u5b50\u9898\uff0c\u5177\u4f53\u5b9e\u73b0\u5c31\u770b\u4ee3\u7801\u5427\uff0c\u8fd9\u91cc\u8fd8\u4e0d\u9700\u8981\u7ef4\u62a4\u533a\u95f4\u548c\uff0c\u53ea\u9700\u8981\u7ef4\u62a4\u53f6\u5b50\u8282\u70b9\u7684\u503c\u5c31\u884c\u4e86\u3002 \u5982\u679c\u8981\u7ef4\u62a4\u533a\u95f4\u548c\u5c31\u8981\u52a0\u4e0a Pushup \u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 1e6 + 10 ; int n , m ; int a [ si ]; int tot = 0 ; int ls [ si << 5 ], rs [ si << 5 ]; int root [ si << 5 ], dat [ si << 5 ]; int build ( int l , int r ) { int p = ++ tot ; if ( l == r ) { dat [ p ] = a [ l ]; return p ; } int mid = ( l + r ) >> 1 ; ls [ p ] = build ( l , mid ), rs [ p ] = build ( mid + 1 , r ); return p ; } int modify ( int last , int l , int r , int pos , int v ) { int p = ++ tot ; if ( l == r ) { dat [ p ] = v ; return p ; } int mid = ( l + r ) >> 1 ; if ( pos <= mid ) ls [ p ] = modify ( ls [ last ], l , mid , pos , v ), rs [ p ] = rs [ last ]; else rs [ p ] = modify ( rs [ last ], mid + 1 , r , pos , v ), ls [ p ] = ls [ last ]; return p ; } int query ( int p , int l , int r , int pos ) { if ( l == r ) return dat [ p ]; int mid = ( l + r ) >> 1 ; if ( pos <= mid ) return query ( ls [ p ], l , mid , pos ); else return query ( rs [ p ], mid + 1 , r , pos ); } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> m ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; root [ 0 ] = build ( 1 , n ); int cnt = 0 ; while ( m -- ) { int ver , opt ; cin >> ver >> opt ; if ( opt == 1 ) { int x , v ; cin >> x >> v ; root [ ++ cnt ] = modify ( root [ ver ], 1 , n , x , v ); } else { int x ; cin >> x ; int val = query ( root [ ver ], 1 , n , x ); root [ ++ cnt ] = modify ( root [ ver ], 1 , n , x , val ); cout << val << endl ; } } return 0 ; }","title":"\u5355\u70b9\u4fee\u6539"},{"location":"algor/ds/persistent-segtree/#_4","text":"HDU 4348 To the moon","title":"\u652f\u6301\u533a\u95f4\u4fee\u6539"},{"location":"algor/ds/persistent-segtree/#_5","text":"","title":"\u4e3b\u5e2d\u6811"},{"location":"algor/ds/persistent-segtree/#_6","text":"\u4e3b\u5e2d\u6811\u5168\u79f0\u53ef\u6301\u4e45\u5316\u6743\u503c\u7ebf\u6bb5\u6811\uff08\u7684\u5dee\u5206\u524d\u7f00\u548c\uff09\uff0c\u548c\u6b63\u5e38\u7684\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u6709\u4e00\u5b9a\u7684\u533a\u522b \u56e0\u4e3a\u4e3b\u5e2d\u6811\u662f\u5229\u7528\u53ef\u6301\u4e45\u5316+\u524d\u7f00\u548c\u7684\u601d\u60f3\u6765\u5b9e\u73b0\u9759\u6001 \u533a\u95f4 \u7b2c \\(k\\) \u5927\uff0c\u800c\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u5219\u662f\u771f\u6b63\u7684\u76f4\u63a5\u7ef4\u62a4\u5404\u4e2a\u5386\u53f2\u7248\u672c\u3002 \u4e3b\u5e2d\u6811\u7684\u601d\u60f3\u548c\u53ef\u6301\u4e45\u5316 Trie \u7684\u601d\u60f3\u662f\u4e00\u81f4\u7684\uff0c\u90fd\u662f\u4ee5\u51fd\u6570\u5f0f\u7f16\u7a0b\u7684\u65b9\u5f0f\u4fdd\u5b58\u5386\u53f2\u7248\u672c\uff0c\u4ee5\u628a\u4fe1\u606f\u4ece\u5168\u5c40\u8f6c\u5316\u4e3a\u533a\u95f4\u3002 \u4e00\u4e2a\u6bd4\u8f83\u7ecf\u5178\u7684\u95ee\u9898\u5c31\u662f\u9759\u6001\u533a\u95f4\u7b2c k \u5927\uff0c\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\u663e\u7136\u53ef\u4ee5\u5f88\u8f7b\u677e\u641e\u5b9a\u5168\u5c40\u7684\u7248\u672c\u3002 \u4e8e\u662f\u628a\u6743\u503c\u7ebf\u6bb5\u6811\u53ef\u6301\u4e45\u5316\u4e4b\u540e\u5229\u7528\u524d\u7f00\u548c\u7684\u601d\u60f3\u5c31\u53ef\u4ee5\u505a\u533a\u95f4\u4e86\u3002 \u4e0d\u8fc7\u4e3b\u5e2d\u6811\u4e00\u822c\u96be\u4ee5\u652f\u6301\u533a\u95f4\u4fee\u6539\uff0c\u6700\u591a\u652f\u6301\u4e00\u4e0b\u5355\u70b9\u4fee\u6539\u3002 \u533a\u95f4\u4fee\u6539\u5728\u4fe1\u606f\u6bd4\u8f83\u7279\u6b8a\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u7528\u6807\u8bb0\u6c38\u4e45\u5316\u505a\uff0c\u4e0d\u8fc7\u4e5f\u975e\u5e38\u6709\u5c40\u9650\u6027\u3002 \u56e0\u4e3a\u4e3b\u5e2d\u6811\u7ef4\u62a4\u7684\u662f\u503c\u57df\uff0c\u76f4\u63a5\u5728\u5e8f\u5217\u4e0a\u533a\u95f4\u4fee\u6539\u5f88\u4e0d\u65b9\u4fbf\uff08","title":"\u6cdb\u5316"},{"location":"algor/ds/persistent-segtree/#k","text":"\u4e3b\u5e2d\u6811\u7684\u4e3b\u8981\u601d\u60f3\u5c31\u662f\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217\uff0c\u4ece\u5de6\u5f80\u53f3\u4f9d\u6b21\u63d2\u5165\u5e8f\u5217\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u3002 \u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\u7684\u65f6\u5019\u7ef4\u62a4\u5386\u53f2\u7248\u672c\uff0c\u4e5f\u5c31\u662f\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u5143\u7d20\u521a\u63d2\u5165\u7684\u65f6\u5019\uff0c\u7ebf\u6bb5\u6811\u7684\u6837\u5b50\u3002 \u663e\u7136\u4e00\u4e2a\u6bd4\u8f83\u66b4\u529b\u7684\u505a\u6cd5\u662f\uff0c\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u6570\uff08\u65b0\u5efa\u4e00\u4e2a\u7248\u672c\uff09\u7684\u65f6\u5019\uff0c\u90fd\u628a\u539f\u6765\u7684\u7ebf\u6bb5\u6811\u590d\u5236\u4e00\u6b21\uff0c\u7136\u540e\u628a\u65b0\u7684\u7248\u672c\u52a0\u4e0a\u53bb\u3002 \u4e0d\u8fc7\u8fd9\u6837\u7a7a\u95f4\u662f \\(O(nm)\\) \u7684\uff0c\u975e\u5e38\u4e0d\u4f18\u79c0\u3002 \u53d1\u73b0\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u6570\uff0c\u5728\u503c\u57df\u4e0a\u53ea\u4f1a\u4fee\u6539\u4e00\u4e2a\u70b9\uff0c\u5bf9\u5e94\u5230\u7ebf\u6bb5\u6811\u4e0a\u5c31\u662f\u53ea\u4fee\u6539\u4e00\u6761\u4ece\u6839\u8282\u70b9\u5230\u5bf9\u5e94\u53f6\u5b50\u8282\u70b9\u7684\u94fe\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u628a\u8fd9\u4e2a\u88ab\u4fee\u6539\u7684\u94fe\u5355\u72ec\u590d\u5236\u4e00\u6b21\u62c9\u51fa\u6765\uff0c\u8bb0\u5f55\u4e00\u4e0b\u63d2\u5165\u4e4b\u540e\uff0c\u5f53\u524d\u7248\u672c\u6811\u6839\u7684\u7f16\u53f7\u3002 \u4e8e\u662f\u7a7a\u95f4\u5f00\u9500\u5c31\u5927\u5927\u51cf\u5c0f\u4e86\uff0c\u4ece \\(O(nm)\\) \u53d8\u6210\u4e86 \\(O(n + m\\log n)\\) \u3002 \u5177\u4f53\u6765\u8bf4\u662f\u8fd9\u6837\u7684\uff1a \u84dd\u8272\u8282\u70b9\u662f\u539f\u6765\u7248\u672c\u4e0a\u7684\u94fe\uff0c\u7ea2\u8272\u8282\u70b9\u662f\u73b0\u5728\u7248\u672c\u4e0a\u7684\u94fe\u3002 \u7b80\u5355\u6765\u8bf4\u5c31\u662f\uff0c\u5bf9\u4e8e\u4e0a\u4e00\u4e2a\u7248\u672c\u7684\u8282\u70b9 \\(p\\) \uff0c\u590d\u5236\u4e00\u4e2a\u65b0\u7684\u8282\u70b9 \\(q\\) \u51fa\u6765\u3002 \u5982\u679c\u4e0b\u4e00\u6b65\u662f\u9012\u5f52 \\(p.ls\\) \uff0c\u90a3\u4e48 \\(q.ls\\) \u5c31\u9700\u8981\u65b0\u5efa\uff0c\u7136\u540e \\(q.rs\\) \u5c31\u662f\u539f\u6765\u7684 \\(p.ls\\) \uff0c\u53cd\u8fc7\u6765\u540c\u7406\u3002 \u67e5\u8be2 \\([l, r]\\) \u7684\u7b2c k \u5927\u4e5f\u6bd4\u8f83\u597d\u505a\uff0c\u5c31\u76f4\u63a5\u7ebf\u6bb5\u6811\u4e8c\u5206\uff0c\u7136\u540e\u7528\u4e24\u4e2a\u6307\u9488 \\(p, q\\) \uff0c \u540c\u6b65 \u904d\u5386 \\(l - 1\\) \uff0c \\(r\\) \u4e24\u4e2a\u7248\u672c\u3002 \u6bd4\u8f83\u4e00\u4e0b\u5f53\u524d\u7684 k \u548c lcnt = dat[ls[q]] - dat[ls[p]] \u7684\u5927\u5c0f\uff0c\u5982\u679c \\(k \\le lcnt\\) \uff0c\u5c31\u8ba9 \\(p,q\\) \u90fd\u5f80\u5de6\u5b50\u6811\u8d70\uff0c\u5426\u5219 \\(k - lcnt\\) \uff0c\u7136\u540e\u8d70\u53f3\u5b50\u6811\u5c31\u884c\u4e86\u3002 \u53ef\u4ee5\u7406\u89e3\u6210\u5728\u4e24\u9897\u6743\u503c\u7ebf\u6bb5\u6811\u5408\u5e76\u4e4b\u540e\u7684\u6743\u503c\u7ebf\u6bb5\u6811\u4e0a\u8fdb\u884c\u64cd\u4f5c \uff0c\u5408\u5e76\u540e\u7684\u4fe1\u606f\u5c31\u662f \\(r\\) \u7248\u672c\u7684\u4fe1\u606f\u51cf\u53bb \\(l - 1\\) \u7684\u4fe1\u606f\u3002 \uff08\u6240\u4ee5\u4e3b\u5e2d\u6811\u7ef4\u62a4\u7684\u4fe1\u606f\u4e0d\u4ec5\u8981\u6ee1\u8db3\u5e7a\u534a\u7fa4\u6027\u8d28\uff0c\u8fd8\u9700\u8981\u6ee1\u8db3\u533a\u95f4\u53ef\u52a0\u51cf\u6027\uff01\uff09 \u5efa\u6811\u7684\u65f6\u5019\u5148\u5bf9\u4e8e\u503c\u57df\u5efa\u4e00\u4e2a\u6bcf\u4e2a\u8282\u70b9\u6743\u503c\u90fd\u4e3a\u7a7a\u7684\u7ebf\u6bb5\u6811\uff0c\u6839\u8282\u70b9\u6807\u8bb0\u4e3a\u7b2c\u96f6\u4e2a\u7248\u672c\u7684\u6839\u8282\u70b9\uff0c\u65b9\u4fbf\u4e4b\u540e\u66f4\u65b0\u3002 \u7a7a\u95f4\u5f00\u4e2a << 5 \u5c31\u884c\u4e86\uff0c\u53cd\u6b63\u4e00\u822c\u80fd\u7528\u4e3b\u5e2d\u6811\u7684\u9898\u7a7a\u95f4\u90fd\u5f88\u5bbd\u677e\u3002 \u4ee3\u7801\uff1a POJ2104 - K-th Number 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #ifndef ONLINE_JUDGE #include <cstdarg> #define meow(format, ...) \\ fprintf(stderr, format, ## __VA_ARGS__) // remember to open stream sync! #else #define meow(format, ...) 1231 #endif using namespace std ; // using i64 = long long; template < typename __Tp > void read ( __Tp & x ) { int f = x = 0 ; char ch = getchar (); for (; ! isdigit ( ch ); ch = getchar ()) if ( ch == '-' ) f = 1 ; for (; isdigit ( ch ); ch = getchar ()) x = ( x << 1 ) + ( x << 3 ) + ( ch ^ 48 ); if ( f ) x = - x ; } // void read(modint &x) { int __value; read(__value); x = __value; return; } void read ( char & ch ) { for ( ch = getchar (); isspace ( ch ); ch = getchar ()); } // template <typename __Tp1, typename ...__Tp2> void read(__Tp1 &x, __Tp2 &... y) { read(x), read(y...); } template < typename __Tp > void write ( __Tp x ) { if ( x < 0 ) putchar ( '-' ), x = - x ; if ( x > 9 ) write ( x / 10 ); putchar ( x % 10 + 48 ); } void write ( char ch ) { putchar ( ch ); } // void write(modint x) { write(x.val()); } void write ( const char * s ) { for (; * s ; ++ s ) putchar ( * s ); } // template <typename __Tp1, typename ...__Tp2> void write(__Tp1 x, __Tp2 ... y) { write(x), write(y...); } const int si = 1e5 + 10 ; int n , m , len ; int a [ si ], id [ si ]; int tot = 0 ; int ls [ si << 5 ], rs [ si << 5 ]; int root [ si << 5 ], dat [ si << 5 ]; int build ( int l , int r ) { int p = ++ tot ; if ( l == r ) return p ; int mid = ( l + r ) >> 1 ; ls [ p ] = build ( l , mid ), rs [ p ] = build ( mid + 1 , r ); return p ; } int insert ( int last , int l , int r , int val ) { // last \u662f\u4e0a\u4e00\u4e2a\u7248\u672c\u7684 [l, r] \u8282\u70b9\u3002 int p = ++ tot ; dat [ p ] = dat [ last ] + 1 ; if ( l == r ) return p ; int mid = ( l + r ) >> 1 ; if ( val <= mid ) ls [ p ] = insert ( ls [ last ], l , mid , val ), rs [ p ] = rs [ last ]; else rs [ p ] = insert ( rs [ last ], mid + 1 , r , val ), ls [ p ] = ls [ last ]; return p ; } int ask ( int p , int q , int l , int r , int kth ) { if ( l == r ) return l ; int mid = ( l + r ) >> 1 ; int lcnt = dat [ ls [ q ]] - dat [ ls [ p ]]; if ( kth <= lcnt ) return ask ( ls [ p ], ls [ q ], l , mid , kth ); else return ask ( rs [ p ], rs [ q ], mid + 1 , r , kth - lcnt ); } int index ( int val ) { return lower_bound ( id + 1 , id + 1 + len , val ) - id ; } int main () { read ( n ), read ( m ); for ( int i = 1 ; i <= n ; ++ i ) read ( a [ i ]), id [ i ] = a [ i ]; sort ( id + 1 , id + 1 + n ); len = unique ( id + 1 , id + 1 + n ) - id - 1 ; root [ 0 ] = build ( 1 , len ); for ( int i = 1 ; i <= n ; ++ i ) root [ i ] = insert ( root [ i - 1 ], 1 , len , index ( a [ i ])); while ( m -- ) { int l , r , k ; read ( l ), read ( r ), read ( k ); write ( id [ ask ( root [ l - 1 ], root [ r ], 1 , len , k )]); write ( endl ); } return 0 ; } \u590d\u6742\u5ea6\u663e\u7136 1log\u3002 \u603b\u7ed3\u4e00\u4e0b\uff0c\u4e3b\u5e2d\u6811\u9898\u53ea\u9700\u8981\u8003\u8651\uff0c\u600e\u4e48\u7ef4\u62a4\u5386\u53f2\u7248\u672c\u4ee5\u8fbe\u5230\u533a\u95f4\u67e5\u8be2\uff0c \u600e\u4e48\u51d1\u51fa\u4e00\u4e2a\u65b0\u7684\u4fe1\u606f\uff0c\u653e\u5230\u4e00\u4e2a\u65b0\u7684\u7ebf\u6bb5\u6811\u4e0a\uff0c\u5728\u8fd9\u4e2a\u65b0\u7684\u7ebf\u6bb5\u6811\u4e0a\u8fdb\u884c\u64cd\u4f5c\u3002 \uff08\u65b0\u7684\u7ebf\u6bb5\u6811\u5e76\u4e0d\u9700\u8981\u5b9e\u9645\u5408\u5e76\u51fa\u6765\uff0c\u53ea\u9700\u8981\u591a\u4e2a\u6307\u9488\u540c\u6b65\u904d\u5386\u9700\u8981\u7684\u7248\u672c\u5373\u53ef\uff09","title":"\u9759\u6001\u533a\u95f4\u7b2c k \u5927"},{"location":"algor/ds/persistent-segtree/#k_1","text":"Luogu2617 Dynamic Rankings \u5355\u70b9\u4fee\u6539\u533a\u95f4\u8be2\u95ee\u7b2c \\(k\\) \u5927\uff0c1e5\u3002 \u76f4\u63a5\u66b4\u529b\u505a\u7684\u8bdd\uff0c\u6bcf\u6b21\u5355\u70b9\u4fee\u6539 \\(i\\) \u9700\u8981\u4fee\u6539 \\([i,n]\\) \u7684\u6240\u6709\u7248\u672c\uff0c\u5355\u6b21\u590d\u6742\u5ea6\u662f \\(O(n \\log n)\\) \u7684\uff0c\u4e0d\u80fd\u63a5\u53d7\u3002 \u53ef\u4ee5\u60f3\u5230\u4e3b\u5e2d\u6811\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u201c\u5e7f\u4e49\u201d\u7684\u524d\u7f00\u548c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u4e3b\u5e2d\u6811\uff0c\u6765\u8ba9\u9700\u8981\u4fee\u6539\u7684\u7248\u672c\u6570\u51cf\u5c11\u5230 \\(O(\\log n)\\) \u4e2a\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u6bcf\u6b21\u4fee\u6539 \\(x\\) \u8fd9\u4e2a\u7248\u672c\u7684\u67d0\u4e2a\u503c\uff0c\u5c31\u4fee\u6539 \\(x + \\text{lowbit}(x), x + \\text{lowbit}(x) + \\text{lowbit}(x + \\text{lowbit}(x)), \\dots\\) \u8fd9\u51e0\u4e2a\u7248\u672c\u7684\u8fd9\u4e2a\u503c\u5c31\u884c\u4e86\u3002 \u7136\u540e\u4fee\u6539\u7684\u65f6\u5019\u9700\u8981\u81ea\u5df1\u5728\u81ea\u5df1\u7248\u672c\u4e0a\u65b0\u5efa\uff0c\u56e0\u4e3a\u5982\u679c\u76f4\u63a5\u4fee\u6539\u53ef\u80fd\u4f1a\u5f71\u54cd\u5230\u540e\u9762\u7684\u7248\u672c\uff08\u540e\u9762\u7684\u7248\u672c\u5bf9\u524d\u9762\u7684\u7248\u672c\u6709\u4f9d\u8d56\uff09\u3002 \uff08\u6709\u70b9\u7c7b\u4f3c\u4e4b\u524d\u770b\u9519\u7684\u90a3\u4e2a ABC \u7684 F\uff0c\u628a\u539f\u6765\u7684\u4fdd\u7559\u5728\u90a3\u91cc\uff0c\u81ea\u5df1\u5b9e\u9645\u8f6c\u79fb\u5230\u65b0\u7684\u526f\u672c\u4e0a\u53bb\uff09 \u67e5\u8be2\u5c31\u9884\u5904\u7406\u51fa\u5bf9\u5e94\u7684\u4e24\u6279 \\(O(\\log n)\\) \u4e2a\u4e3b\u5e2d\u6811\u7684\u4fe1\u606f\uff0c\u5408\u5e76\u4e4b\u540e\u5728\u4e0a\u9762\u7ebf\u6bb5\u6811\u4e8c\u5206\u5373\u53ef\u3002 \u8fd9\u91cc\u7684\u4ee3\u7801\u4f7f\u7528\u4e86\u53e6\u5916\u4e00\u79cd\u52a8\u6001\u5f00\u70b9\u7684\u5199\u6cd5\uff0c\u66f4\u8282\u7701\u7a7a\u95f4\u3002 \u6ce8\u610f\u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0\u5728\u521d\u59cb\u7684\u65f6\u5019\u628a\u4e3b\u5e2d\u6811\u6254\u5230\u6811\u72b6\u6570\u7ec4\u4e0a\uff01 Codeauthor : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #ifndef ONLINE_JUDGE #include <cstdarg> #define meow(format, ...) \\ fprintf(stderr, format, ## __VA_ARGS__) // remember to open stream sync! #else #define meow(format, ...) 1231 #endif using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int n , m , len ; int a [ si ], id [ si << 1 ]; int tot = 0 ; int ls [ si << 8 ], rs [ si << 8 ]; int root [ si << 8 ], dat [ si << 8 ]; int cnt1 , cnt2 ; int tr1 [ si ], tr2 [ si ]; struct Query { char opt ; int l , r , x ; } q [ si ]; inline int lowbit ( int x ) { return x & - x ; } inline int getid ( int val ) { return lower_bound ( id + 1 , id + 1 + len , val ) - id ; } int build ( int l , int r ) { int p = ++ tot ; if ( l == r ) return l ; int mid = ( l + r ) >> 1 ; ls [ p ] = build ( l , mid ), rs [ p ] = build ( mid + 1 , r ); return p ; } void insert ( int & p , int last , int l , int r , int val , int delta ) { p = ++ tot ; dat [ p ] = dat [ last ] + delta , ls [ p ] = ls [ last ], rs [ p ] = rs [ last ]; if ( l == r ) return ; int mid = ( l + r ) >> 1 ; if ( val <= mid ) insert ( ls [ p ], ls [ last ], l , mid , val , delta ); else insert ( rs [ p ], rs [ last ], mid + 1 , r , val , delta ); } int ask ( int l , int r , int kth ) { if ( l == r ) return l ; int mid = ( l + r ) >> 1 ; int lcnt = 0 ; for ( int i = 1 ; i <= cnt2 ; ++ i ) lcnt += dat [ ls [ tr2 [ i ]]]; for ( int i = 1 ; i <= cnt1 ; ++ i ) lcnt -= dat [ ls [ tr1 [ i ]]]; if ( kth <= lcnt ) { for ( int i = 1 ; i <= cnt1 ; ++ i ) tr1 [ i ] = ls [ tr1 [ i ]]; for ( int i = 1 ; i <= cnt2 ; ++ i ) tr2 [ i ] = ls [ tr2 [ i ]]; return ask ( l , mid , kth ); } else { for ( int i = 1 ; i <= cnt1 ; ++ i ) tr1 [ i ] = rs [ tr1 [ i ]]; for ( int i = 1 ; i <= cnt2 ; ++ i ) tr2 [ i ] = rs [ tr2 [ i ]]; return ask ( mid + 1 , r , kth - lcnt ); } } void change ( int x , int v ) { int y = getid ( a [ x ]); while ( x <= n ) { insert ( root [ x ], root [ x ], 1 , len , y , v ); x += lowbit ( x ); } } int query ( int l , int r , int kth ) { l -- , cnt1 = cnt2 = 0 ; while ( l ) tr1 [ ++ cnt1 ] = root [ l ], l -= lowbit ( l ); while ( r ) tr2 [ ++ cnt2 ] = root [ r ], r -= lowbit ( r ); return ask ( 1 , len , kth ); } int main () { // cin.tie(0) -> sync_with_stdio(false); // cin.exceptions(cin.failbit | cin.badbit); cin >> n >> m ; int cnt = 0 ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], id [ ++ cnt ] = a [ i ]; for ( int i = 1 ; i <= m ; ++ i ) { Query & p = q [ i ]; cin >> p . opt ; if ( p . opt == 'C' ) cin >> p . l >> p . x , id [ ++ cnt ] = p . x ; if ( p . opt == 'Q' ) cin >> p . l >> p . r >> p . x ; } sort ( id + 1 , id + 1 + cnt ); len = unique ( id + 1 , id + 1 + cnt ) - id - 1 ; for ( int i = 1 ; i <= n ; ++ i ) change ( i , 1 ); for ( int i = 1 ; i <= m ; ++ i ) { Query & p = q [ i ]; if ( p . opt == 'C' ) change ( p . l , -1 ), a [ p . l ] = p . x , change ( p . l , 1 ); if ( p . opt == 'Q' ) cout << id [ query ( p . l , p . r , p . x )] << endl ; } return 0 ; } // \u4e0b\u9762\u8fd9\u4e2a\u867d\u7136\u53ef\u4ee5\uff0c\u4e0d\u8fc7\u7a7a\u95f4\u53ef\u80fd\u5c31\u5bc4\u6389\u4e86\uff0c\u6240\u4ee5\u7528\u4e0a\u9762\u7684\u5199\u6cd5\u4f1a\u597d\u5f97\u591a\u3002 /* // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #ifndef ONLINE_JUDGE #include<cstdarg> #define meow(format, ...) \\ fprintf(stderr, format, ## __VA_ARGS__) // remember to open stream sync! #else #define meow(format, ...) 1231 #endif using namespace std; using i64 = long long; const int si = 2e5 + 10; int n, m, len; int a[si], id[si << 1]; int tot = 0; int ls[si << 9], rs[si << 9]; int root[si << 9], dat[si << 9]; int cnt1, cnt2; int tr1[si], tr2[si]; struct Query { char opt; int l, r, x; } q[si]; inline int lowbit(int x) { return x & -x; } inline int getid(int val) { return lower_bound(id + 1, id + 1 + len, val) - id; } int build(int l, int r) { int p = ++tot; if(l == r) return l; int mid = (l + r) >> 1; ls[p] = build(l, mid), rs[p] = build(mid + 1, r); return p; } void insert(int &p, int last, int l, int r, int val, int delta) { p = ++tot; dat[p] = dat[last] + delta, ls[p] = ls[last], rs[p] = rs[last]; if(l == r) return; int mid = (l + r) >> 1; if(val <= mid) insert(ls[p], ls[last], l, mid, val, delta); else insert(rs[p], rs[last], mid + 1, r, val, delta); } int ask(int l, int r, int kth) { if(l == r) return l; int mid = (l + r) >> 1; int lcnt = 0; for(int i = 1; i <= cnt2; ++i) lcnt += dat[ls[tr2[i]]]; for(int i = 1; i <= cnt1; ++i) lcnt -= dat[ls[tr1[i]]]; if(kth <= lcnt) { for(int i = 1; i <= cnt1; ++i) tr1[i] = ls[tr1[i]]; for(int i = 1; i <= cnt2; ++i) tr2[i] = ls[tr2[i]]; return ask(l, mid, kth); } else { for(int i = 1; i <= cnt1; ++i) tr1[i] = rs[tr1[i]]; for(int i = 1; i <= cnt2; ++i) tr2[i] = rs[tr2[i]]; return ask(mid + 1, r, kth - lcnt); } } void change(int x, int v) { int y = getid(a[x]); while(x <= n) { insert(root[x], root[x], 1, len, y, v); x += lowbit(x); } } int query(int l, int r, int kth) { l --, cnt1 = cnt2 = 0; while(l) tr1[++cnt1] = root[l], l -= lowbit(l); while(r) tr2[++cnt2] = root[r], r -= lowbit(r); return ask(1, len, kth); } int main() { // cin.tie(0) -> sync_with_stdio(false); // cin.exceptions(cin.failbit | cin.badbit); cin >> n >> m; int cnt = 0; for(int i = 1; i <= n; ++i) cin >> a[i], id[++cnt] = a[i]; for(int i = 1; i <= m; ++i) { Query &p = q[i]; cin >> p.opt; if(p.opt == 'C') cin >> p.l >> p.x, id[++cnt] = p.x; if(p.opt == 'Q') cin >> p.l >> p.r >> p.x; } sort(id + 1, id + 1 + cnt); len = unique(id + 1, id + 1 + cnt) - id - 1; for(int i = 1; i <= n; ++i) root[i] = build(1, len); for(int i = 1; i <= n; ++i) change(i, 1); for(int i = 1; i <= m; ++i) { Query &p = q[i]; if(p.opt == 'C') change(p.l, -1), a[p.l] = p.x, change(p.l, 1); if(p.opt == 'Q') cout << id[query(p.l, p.r, p.x)] << endl; } return 0; } */","title":"\u52a8\u6001\u533a\u95f4\u7b2c k \u5927"},{"location":"algor/ds/persistent-segtree/#_7","text":"Luogu2633 Count on a tree \u7ed9\u5b9a\u4e00\u68f5 \\(n\\) \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u6743\u503c\u3002\u6709 \\(m\\) \u4e2a\u8be2\u95ee\uff0c \u6bcf\u6b21\u7ed9\u4f60 \\(u,v,k\\) \uff0c\u4f60\u9700\u8981\u56de\u7b54 \\(u \\text{ xor last}\\) \u548c \\(v\\) \u8fd9\u4e24\u4e2a\u8282\u70b9\u95f4\u7b2c \\(k\\) \u5c0f\u7684\u70b9\u6743\u3002 \u5176\u4e2d \\(\\text{last}\\) \u662f\u4e0a\u4e00\u4e2a\u8be2\u95ee\u7684\u7b54\u6848\uff0c\u5b9a\u4e49\u5176\u521d\u59cb\u4e3a \\(0\\) \uff0c\u5373\u7b2c\u4e00\u4e2a\u8be2\u95ee\u7684 \\(u\\) \u662f\u660e\u6587\u3002 1e5 \u53d1\u73b0\u7b2c \\(i\\) \u4e2a\u7248\u672c\u7684\u4e3b\u5e2d\u6811\u53ef\u4ee5\u611f\u6027\u7684\u7406\u89e3\u4e3a\u4e00\u79cd\u524d\u7f00\u548c\u3002 \u4e8e\u662f\u5728\u8be2\u95ee \\([l, r]\\) \u7684\u65f6\u5019\u53ef\u4ee5\u628a dat[r] - dat[l - 1] \u5f53\u4f5c\u4fe1\u606f\u62cd\u5230\u4e00\u4e2a\u65b0\u7684\u7ebf\u6bb5\u6811\u4e0a\u64cd\u4f5c\uff08\u5b9e\u9645\u64cd\u4f5c\u5c31\u662f\u62ff\u4e24\u4e2a\u6307\u9488\u540c\u6b65\u8d70\u4e24\u4e2a\u7248\u672c\u7684\u7ebf\u6bb5\u6811\uff09\u3002 \u8fd9\u91cc\u662f\u5728\u6811\u4e0a\u8be2\u95ee\uff0c\u53ef\u4ee5\u8003\u8651\u6811\u5256\uff0c\u4f46\u662f\u4f3c\u4e4e\u5f88\u9ebb\u70e6\u3002 \u4e3b\u5e2d\u6811\u7ef4\u62a4\u7684\u4fe1\u606f\u5177\u6709\u533a\u95f4\u53ef\u52a0\u53ef\u51cf\u6027\uff0c\u6362\u53e5\u8bdd\u8bf4\u53ef\u4ee5\u505a\u524d\u7f00\u548c\u4e5f\u53ef\u4ee5\u5dee\u5206\u3002 \u6240\u4ee5\u6211\u4eec\u8003\u8651\u600e\u4e48\u51d1\u4e00\u4e2a\u65b0\u7684\u7ebf\u6bb5\u6811\uff0c\u4f7f\u4ed6\u80fd\u5305\u542b\u8def\u5f84 \\((u,v)\\) \u7684\u4fe1\u606f\uff0c\u7136\u540e\u5728\u4e0a\u9762\u7ebf\u6bb5\u6811\u4e8c\u5206\u5c31\u53ef\u4ee5\u4e86\u3002 \u6211\u4eec\u8bbe\u7248\u672c \\(i\\) \u8868\u793a\u6839\u8282\u70b9\u5230\u8282\u70b9 \\(i\\) \u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8282\u70b9\u6784\u6210\u7684\u4e3b\u5e2d\u6811\uff0c \u7136\u540e\u53d1\u73b0\u6b64\u65f6\u53ef\u4ee5\u6811\u4e0a\u5dee\u5206\u6765\u51d1\u51fa\u8def\u5f84 \\((u, v)\\) \uff0c\u4e8e\u662f\u65b0\u7684\u7ebf\u6bb5\u6811\u7684\u4fe1\u606f\u5c31\u662f dat[u] + dat[v] - dat[lca(u, v)] - dat[fa(lca(u, v))] \u3002 \u5b9e\u73b0\u76f4\u63a5\u62ff\u56db\u4e2a\u6307\u9488\u540c\u6b65\u904d\u5386\u8fd9\u56db\u4e2a\u7248\u672c\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 1e5 + 10 ; int n , m , len , cnt ; int a [ si ], id [ si ]; int head [ si << 1 ]; struct Edge { int ver , Next ; } e [ si << 1 ]; void add ( int u , int v ) { e [ cnt ]. ver = v , e [ cnt ]. Next = head [ u ], head [ u ] = cnt ++ ; } int get_id ( int val ) { return lower_bound ( id + 1 , id + 1 + len , val ) - id ; } int tot = 0 ; int ls [ si << 5 ], rs [ si << 5 ]; int root [ si << 5 ], dat [ si << 5 ]; int build ( int l , int r ) { int p = ++ tot ; if ( l == r ) return p ; int mid = ( l + r ) >> 1 ; ls [ p ] = build ( l , mid ), rs [ p ] = build ( mid + 1 , r ); return p ; } int insert ( int last , int l , int r , int v ) { int p = ++ tot ; dat [ p ] = dat [ last ] + 1 ; if ( l == r ) return p ; int mid = ( l + r ) >> 1 ; if ( v <= mid ) ls [ p ] = insert ( ls [ last ], l , mid , v ), rs [ p ] = rs [ last ]; else rs [ p ] = insert ( rs [ last ], mid + 1 , r , v ), ls [ p ] = ls [ last ]; return p ; } int ask ( int p , int q , int u , int v , int l , int r , int kth ) { if ( l == r ) return l ; int mid = ( l + r ) >> 1 ; int lcnt = dat [ ls [ p ]] + dat [ ls [ q ]] - dat [ ls [ u ]] - dat [ ls [ v ]]; if ( kth <= lcnt ) return ask ( ls [ p ], ls [ q ], ls [ u ], ls [ v ], l , mid , kth ); else return ask ( rs [ p ], rs [ q ], rs [ u ], rs [ v ], mid + 1 , r , kth - lcnt ); } int dep [ si ]; int f [ si ][ 21 ]; void dfs ( int u , int fa ) { f [ u ][ 0 ] = fa , dep [ u ] = dep [ fa ] + 1 ; for ( int i = 1 ; i <= 20 ; ++ i ) f [ u ][ i ] = f [ f [ u ][ i - 1 ]][ i - 1 ]; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; root [ v ] = insert ( root [ u ], 1 , len , get_id ( a [ v ])); dfs ( v , u ); } } int lca ( int u , int v ) { if ( dep [ u ] < dep [ v ]) swap ( u , v ); for ( int i = 20 ; i >= 0 ; -- i ) if ( dep [ f [ u ][ i ]] >= dep [ v ]) u = f [ u ][ i ]; if ( u == v ) return u ; for ( int i = 20 ; i >= 0 ; -- i ) if ( f [ u ][ i ] != f [ v ][ i ]) u = f [ u ][ i ], v = f [ v ][ i ]; return f [ u ][ 0 ]; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); memset ( head , -1 , sizeof head ); cin >> n >> m ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], id [ i ] = a [ i ]; sort ( id + 1 , id + 1 + n ); len = unique ( id + 1 , id + 1 + n ) - id - 1 ; for ( int i = 1 ; i < n ; ++ i ) { int u , v ; cin >> u >> v ; add ( u , v ), add ( v , u ); } root [ 0 ] = build ( 1 , len ); root [ 1 ] = insert ( root [ 0 ], 1 , len , get_id ( a [ 1 ])); dfs ( 1 , 0 ); int lastans = 0 ; while ( m -- ) { int u , v , k ; cin >> u >> v >> k ; u ^= lastans ; int Lca = lca ( u , v ), Fa = f [ Lca ][ 0 ]; cout << ( lastans = id [ ask ( root [ u ], root [ v ], root [ Lca ], root [ Fa ], 1 , len , k )]) << endl ; } return 0 ; }","title":"\u5c0f\u7ec3\u4e60"},{"location":"algor/ds/persistent-trie/","text":"\u6982\u8ff0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u53ef\u6301\u4e45\u5316\u7684\u7684\u4e2d\u5fc3\u601d\u60f3\u5c31\u662f\u201c\u51fd\u6570\u5f0f\u7f16\u7a0b\u201d\u3002 \u4e5f\u5c31\u662f\uff0c\u5728\u5bf9\u6570\u636e\u7ed3\u6784\u7684\u64cd\u4f5c\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u4f1a\u6539\u53d8\u6570\u636e\u7ed3\u6784\u672c\u8eab\u6240\u5177\u6709\u7684\u7ed3\u6784\u3002 \u5728\u9700\u8981\u4fee\u6539\u67d0\u4e9b\u4fe1\u606f\u65f6\uff0c\u4e0d\u662f\u76f4\u63a5\u4fee\u6539\uff0c\u800c\u662f\u4fdd\u7559\u524d\u4e00\u4e2a\u7248\u672c\u7684\u4fe1\u606f\uff0c\u5e76\u5c06\u6570\u636e\u521b\u5efa\u4e00\u4e2a\u526f\u672c\uff0c\u5728\u526f\u672c\u4e0a\u6267\u884c\u4fee\u6539\u3002 \u66b4\u529b\u7684\u505a\u6cd5\u662f\u6bcf\u6b21\u4fee\u6539\u4fe1\u606f\u7684\u65f6\u5019\uff0c\u90fd\u76f4\u63a5\u628a\u6574\u4e2a\u6570\u636e\u7ed3\u6784\u590d\u5236\u4e00\u904d\uff0c\u5728\u8fd9\u4e2a\u526f\u672c\u4e0a\u4fee\u6539\u3002 \u4f46\u662f\u7a7a\u95f4\u7684\u82b1\u8d39\u5f88\u660e\u663e\u662f\u4e0d\u80fd\u63a5\u53d7\u7684\u3002 \u53d1\u73b0\u6bcf\u6b21\u4fee\u6539 \u53ea\u4f1a\u4fee\u6539\u4e00\u90e8\u5206\u4fe1\u606f \uff0c\u90a3\u4e48\u5355\u72ec\u5c06\u8fd9\u90e8\u5206\u4fe1\u606f\u521b\u5efa\u4e00\u4e2a\u526f\u672c\uff0c\u5728\u8fd9\u4e2a\u526f\u672c\u4e0a\u8fdb\u884c\u4fee\u6539\uff0c\u5c31\u5927\u5927\u63d0\u9ad8\u4e86\u7a7a\u95f4\u5229\u7528\u7387\u3002 \u8fd9\u6837\uff0c\u6570\u636e\u7ed3\u6784\u5c31\u80fd\u5f88\u65b9\u4fbf\u7684 \u4fdd\u5b58\u6240\u6709\u5386\u53f2\u7248\u672c\u7684\u4fe1 \u606f\u3002 \u8fd9\u79cd\u601d\u60f3\u5728\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u4e0a\u4f53\u73b0\u66f4\u4e3a\u660e\u663e\uff0c\u53ef\u6301\u4e45\u5316 Trie \u5176\u5b9e\u4e5f\u5dee\u4e0d\u591a\u3002 \u5e94\u7528 \u03c8(\uff40\u2207\u00b4)\u03c8 \u53ef\u6301\u4e45\u5316 Trie \u4e00\u822c\u90fd\u662f\u4ee5 01 Trie \u7684\u65b9\u5f0f\u51fa\u73b0\u3002 01 Trie \u53ef\u4ee5\u652f\u6301\u4e00\u4e9b\u5168\u5c40\u67e5\u8be2\uff0c\u4fee\u6539\u7684\u64cd\u4f5c\u3002 \u4f46\u662f\u65e0\u6cd5\u5f88\u597d\u7684\u652f\u6301 \u533a\u95f4\u7684\u64cd\u4f5c \u3002 \u6bd4\u5982\uff0c\u8981\u591a\u6b21\u8be2\u95ee\u67d0\u4e2a\u5e8f\u5217 \\(a\\) \u7684 \\([l,r]\\) \u4e2d\u548c \\(x\\) \u5f02\u6216\u8d77\u6765\u6700\u5927\u7684\u4e00\u4e2a\u6570\u3002 \u4e00\u822c\u7684 01 Trie \u6ca1\u6cd5\u5f88\u65b9\u4fbf\u7684\u7ef4\u62a4\uff0c\u53ea\u80fd\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u5355\u72ec\u5efa\u6811\u3002 \u6216\u8005\u662f\u5229\u7528\u5220\u9664\u64cd\u4f5c+\u7c7b\u4f3c\u83ab\u961f\u7684\u79bb\u7ebf\u601d\u60f3\u4f18\u5316\uff0c\u4f46\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u4ecd\u7136\u5f88\u9ad8\u3002 \u53ef\u6301\u4e45\u5316 Trie \u7684\u601d\u60f3\u5c31\u662f\uff0c \u4f9d\u6b21 \u63d2\u5165 \\(a_1,a_2,a_3,\\dots\\) \uff0c\u7136\u540e\u4fdd\u7559\u6bcf\u4e00\u6b21\u63d2\u5165\u4e4b\u540e\u7684\u7248\u672c \\(i\\) \u3002 \u5e76\u4e14\u7b2c \\(i\\) \u4e2a\u7248\u672c\u5bf9\u5e94\u7684\u6839\u8282\u70b9\u4e3a \\(rt[i]\\) \u3002 \u5b83\u6709\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u6027\u8d28\uff1a \u4ece \\(rt[i]\\) \u51fa\u53d1\u6240\u80fd\u8bbf\u95ee\u5230\u7684\u6240\u6709\u8282\u70b9\u6784\u6210\u7684\u4e00\u68f5 Trie \u6811\uff0c\u5c31\u662f \\(a[1 \\sim i]\\) \u5168\u90e8\u63d2\u5165\u4e4b\u540e\u5f62\u6210\u7684\u4e00\u68f5 Trie \u6811\u3002 \u5229\u7528\u8fd9\u4e2a\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u524d\u7f00\u548c\u7684\u601d\u60f3\uff0c\u628a\u7b2c \\(r\\) \u4e2a\u7248\u672c\u6784\u6210\u7684 Trie \u548c\u7b2c \\(l - 1\\) \u4e2a\u7248\u672c\u6784\u6210\u7684 Trie \u201c\u76f8\u51cf\u201d\uff0c\u5c31\u5f97\u5230\u4e86 \\(a[l \\sim r]\\) \u8fd9\u90e8\u5206\u63d2\u5165\u4e4b\u540e\u5f97\u5230\u7684 Trie \u6811\u3002 \uff08 \u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u201c\u76f8\u51cf\u201d\u5e76\u4e0d\u662f\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u76f8\u51cf\uff0c\u5177\u4f53\u5b9e\u73b0\u65b9\u5f0f\u770b\u4e0b\u65b9\u7684 Query \u64cd\u4f5c \uff09 \u5b9e\u73b0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u63d2\u5165 \u03c8(\uff40\u2207\u00b4)\u03c8 \u53ef\u6301\u4e45\u5316 Trie \u7684\u6570\u636e\u4fdd\u5b58\u65b9\u5f0f\u548c\u666e\u901a\u7684 Trie \u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f\u5229\u7528\u5b57\u7b26\u6307\u9488\u6307\u5411\u542b\u6709\u4fe1\u606f\u7684\u8282\u70b9\u6765\u4fdd\u5b58\u6570\u636e\u3002 \u4ecb\u7ecd\u539f\u7406\u65f6\u4ecd\u7136\u4f7f\u7528\u666e\u901a Trie\uff0c\u4ee3\u7801\u5b9e\u73b0\u4f7f\u7528 01 Trie\u3002 \u4ecd\u7136\u8bbe \\(tr[p,ch]\\) \u8868\u793a \\(p\\) \u8282\u70b9\u7684 \\(ch\\) \u5b57\u7b26\u6307\u9488\uff0c\u5047\u8bbe\u5f53\u524d\u9700\u8981\u63d2\u5165\u5b57\u7b26\u4e32 \\(s\\) \uff0c\u90a3\u4e48\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u5373\u53ef\uff1a \u8bbe\u4e0a\u4e00\u4e2a\u7248\u672c\u7684\u53ef\u6301\u4e45\u5316 Trie \u5bf9\u5e94\u7684\u6839\u8282\u70b9\u4e3a \\(rt\\) \uff0c\u4ee4\u4e00\u4e2a\u6307\u9488 \\(p = root\\) \uff0c\u7528\u4e00\u4e2a\u6307\u9488 \\(i\\) \u626b\u63cf \\(s\\) \u3002 \u65b0\u5efa\u4e00\u4e2a\u8282\u70b9 \\(q\\) \uff0c\u4ee4\u65b0\u7248\u672c\u5bf9\u5e94\u7684\u6839\u8282\u70b9 \\(rt\\prime = q\\) \u3002 \u5982\u679c \\(p\\not= \\text{NULL}\\) \uff0c\u5c06 \\(p\\) \u7684\u5b57\u7b26\u6307\u9488\u4fe1\u606f\u590d\u5236\u7ed9 \\(q\\) \u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u5bf9\u4e8e \\(\\forall tr[p,ch] \\not = \\text{NULL}\\) \uff0c\u4ee4 \\(tr[q,ch] = tr[p,ch]\\) \u3002 \u65b0\u5efa\u4e00\u4e2a\u8282\u70b9 \\(q\\prime\\) \uff0c\u4ee4 \\(tr[q,s_i]\\) \u6307\u5411 \\(q\\prime\\) \uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c \\(p,q\\) \u4e24\u4e2a\u8282\u70b9\u9664\u4e86\u7f16\u53f7\u4ee5\u5916\u7684 \u552f\u4e00\u533a\u522b \uff0c\u5c31\u662f \\(s_i\\) \u8fd9\u4e2a\u5b57\u7b26\u6307\u9488\u6307\u5411\u7684\u8282\u70b9\u3002 \u5373\u662f\uff1a \\(tr[p,s_i]\\not=tr[q,s_i]\\) \u3002 \u7136\u540e\u8ba9 \\(p,q\\) \u5f80\u4e0b\u8df3\uff0c \\(p = tr[p,s_i],q = tr[q,s_i]\\) \uff0c\u4ee4 \\(i + 1\\) \u3002 \u91cd\u590d \\(3 \\sim 5\\) \uff0c \u76f4\u5230\u626b\u63cf\u5b8c \\(s\\) \u3002 \u4e0b\u56fe\u5c55\u793a\u4e86\u5728\u5df2\u7ecf\u6709\u5386\u53f2\u7248\u672c \"bte\" \u7684\u53ef\u6301\u4e45\u5316 Trie \u4e2d\u63d2\u5165\u65b0\u7684\u5b57\u7b26\u4e32 \u201ckth\u201d \u7684\u8fc7\u7a0b\u3002 \u5176\u4e2d\u7eff\u8272\u8282\u70b9\u4e3a\u5404\u4e2a\u7248\u672c\u5bf9\u5e94\u7684\u6839\u8282\u70b9\uff0c\u7ea2\u8272\u8282\u70b9\u4e3a\u5c3e\u6807\u8bb0\u6240\u5904\u8282\u70b9\u3002 \u8be2\u95ee \u03c8(\uff40\u2207\u00b4)\u03c8 \u5f53\u6211\u4eec\u9700\u8981\u67e5\u8be2\u67d0\u4e00\u6bb5\u533a\u95f4 \\([l,r]\\) \u5185\u548c \\(x\\) \u5f02\u6216\u8d77\u6765\u6700\u5927\u7684\u6570\u65f6\uff0c\u5e94\u5f53\u600e\u4e48\u5904\u7406\uff1f \u4e0a\u9762\u5df2\u7ecf\u8bf4\u4e86\uff0c\u5229\u7528\u524d\u7f00\u76f8\u51cf\u7684\u601d\u60f3\uff0c\u7528\u4e24\u4e2a\u7ef4\u62a4\u524d\u7f00 \\(1\\sim r,1\\sim l-1\\) \u7684\u4e24\u4e2a\u7248\u672c\u7684 Trie \u76f8\u51cf\u5f97\u5230 \\([l,r]\\) \u5bf9\u5e94\u7684 Trie\u3002 \u4f46\u662f\u6211\u4eec\u5e76\u4e0d\u80fd\u76f4\u63a5\u76f8\u51cf\uff0c\u56e0\u4e3a\u5e76\u4e0d\u5b58\u5728\u4e00\u79cd\u8ba9 Trie \u548c Trie \u4e4b\u95f4\u505a\u51cf\u6cd5\u7684\u64cd\u4f5c\u3002 \u9996\u5148\u6839\u636e\u53ef\u6301\u4e45\u5316 Trie \u7684\u6027\u8d28\uff0c\u4ece \\(rt[i]\\) \u51fa\u53d1\u80fd\u8bbf\u95ee\u5230\u7684\u8282\u70b9\u6784\u6210\u4e86\u7b2c \\(i\\) \u4e2a\u7248\u672c\u7684 Trie\u3002 \u6240\u4ee5\u53ef\u4ee5\u5148\u4ece \\(r\\) \u51fa\u53d1\uff0c\u8fd9\u6837\u5c31\u6ee1\u8db3\u4e86 \\(r\\) \u7684\u4e0a\u754c\u9650\u5236\u3002 \u600e\u4e48\u6ee1\u8db3 \\(l - 1\\) \u7684\u4e0b\u754c\u9650\u5236\u5462\uff1f \u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5728\u8282\u70b9\u4e0a\u4fdd\u5b58\u7684\u9644\u52a0\u4fe1\u606f\u3002 \u8bbe \\(end[p]\\) \u8868\u793a\u4ee5 \\(p\\) \u4e3a\u5c3e\u8282\u70b9\u7684\u6570\u662f\u5e8f\u5217\u91cc\u7684\u7b2c\u51e0\u4e2a\u6570\uff08\u53ef\u4ee5\u5f53\u4f5c\u201c\u7248\u672c\u201d\u770b\u5f85\uff09\u3002 \u8bbe \\(las[p]\\) \u8868\u793a\u4ee5 \\(p\\) \u4e3a\u6839\u7684\u5b50\u6811\u4e2d \\(end\\) \u7684\u6700\u5927\u503c\u3002 \u90a3\u4e48\u6211\u4eec\u9012\u5f52\u8bbf\u95ee\u8282\u70b9\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u8003\u8651 \\(las \\ge l - 1\\) \u7684\u8282\u70b9\u5373\u53ef\u3002 \u56e0\u4e3a \\(las\\) \u4e5f\u53ef\u4ee5\u770b\u4f5c\uff1a\u8fd9\u9897\u5b50\u6811 \u6700\u540e\u88ab\u54ea\u4e00\u4e2a\u7248\u672c\u6240\u66f4\u65b0\u8fc7 \u3002 \u9012\u5f52\u4e0b\u53bb\u5c31\u53ef\u4ee5\u4e86\u3002 \u4ee3\u7801 \u03c8(\uff40\u2207\u00b4)\u03c8 President-01Trie 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 const int si = 1e4 + 10 ; const int MaxDepth = 21 ; // \u53ef\u4ee5\u4e0d\u7528\u5f3a\u5236\u4f4d\u6570\u90fd\u4e00\u6837 // \u5199\u4e86\u4e5f\u53ef\u4ee5\u3002 int s [ si ]; int tr [ si * ( MaxDepth + 1 )][ 2 ]; int las [ si * ( MaxDepth + 1 )]; int tot = 0 , root [ si ]; // \u5f53\u524d\u7248\u672c\uff0c\u5f53\u524d\u4f4d\u6570\uff0cp, q void insert ( int i , int k , int p , int q ) { if ( k < 0 ) { las [ q ] = i ; return ; } int ch = s [ i ] >> k & 1 ; if ( p ) tr [ q ][ ch ^ 1 ] = tr [ p ][ ch ^ 1 ]; // p \u975e\u7a7a\uff0c\u590d\u5236\u8282\u70b9\u4fe1\u606f\u3002 tr [ q ][ ch ] = ++ tot ; // p \u548c q \u7684 ch \u6307\u9488\u5e94\u5f53\u4e0d\u4e00\u6837\u3002 insert ( i , k - 1 , tr [ p ][ ch ], tr [ q ][ ch ]); las [ q ] = max ( las [ tr [ q ][ 0 ]], las [ tr [ q ][ 1 ]]); } // \u67e5\u8be2 [l, r] \u4e2d\u548c val \u5f02\u6216\u8d77\u6765\u6700\u5927\u7684\u6570\u3002 // \u8c03\u7528\u65f6\u9700\u8981 ask(root[r], MaxDepth, val, l - 1) // \u56e0\u4e3a\u53ef\u6301\u4e45\u5316 Trie \u7684root[i] \u80fd\u8bbf\u95ee\u5230\u7684\u5143\u7d20\u53ea\u6709 s[1 ~ i]\u3002 // \u800c\u53ea\u8003\u8651 las >= l - 1 \u7684\u8282\u70b9\u5219\u80fd\u6ee1\u8db3\u4e0b\u754c\u3002 int ask ( int p , int k , int val , int limit ) { if ( k < 0 ) return s [ las [ p ]]; int ch = val >> k & 1 ; if ( las [ tr [ p ][ ch ^ 1 ]] >= limit ) return ask ( tr [ p ][ ch ^ 1 ], k - 1 , val , limit ); else return ask ( tr [ p ][ ch ], k - 1 , val , limit ); // \u8d70\u4e0d\u4e86 1 \u6307\u9488\uff0c\u6240\u4ee5\u53ea\u80fd\u5f80 0 \u6307\u9488\u8d70\u3002 } int main () { s [ 0 ] = 0 , las [ 0 ] = -1 , root [ 0 ] = ++ tot ; insert ( 0 , MaxDepth , 0 , root [ 0 ]); // \u8fd9\u51e0\u53e5\u8bdd\u662f\u5fc5\u987b\u7684\uff0c\u56e0\u4e3a\u4f60\u8981\u4fdd\u8bc1\u5bf9\u4e8e\u4efb\u610f l \\in [1, n], \u90fd\u6709\u4e00\u4e2a l - 1 \u5b58\u5728\u3002 } \u5f53\u7136\uff0c\u53ef\u6301\u4e45\u5316 Trie \u7684\u5e94\u7528\u4e0d\u6b62\u8fd9\u4e9b\uff0c\u53ef\u4ee5\u8003\u8651\u914d\u5408\u7ef4\u62a4\u5f02\u6216\u548c\u7684 01Trie\uff0c\u5b9e\u73b0\u52a8\u6001\u63d2\u5165\uff0c\u5220\u9664\u6307\u5b9a\u5143\u7d20\uff0c\u67e5\u8be2\u533a\u95f4\u5f02\u6216\u548c\u7684\u64cd\u4f5c\u3002 TODO\uff1a\u4e4b\u540e\u5199\u4e00\u4e2a\u8fd9\u6837\u7684 \u53ef\u6301\u4e45\u5316 Trie\uff0c\u7136\u540e\u7528\u66b4\u529b\u5bf9\u62cd\u9a8c\u8bc1\u6b63\u786e\u6027\u3002 \u53c2\u8003\u8d44\u6599\uff1a\u300a\u7b97\u6cd5\u7ade\u8d5b\u8fdb\u9636\u6307\u5357\u300b\uff0cOI - Wiki","title":"\u53ef\u6301\u4e45\u5316 Trie"},{"location":"algor/ds/persistent-trie/#_1","text":"\u53ef\u6301\u4e45\u5316\u7684\u7684\u4e2d\u5fc3\u601d\u60f3\u5c31\u662f\u201c\u51fd\u6570\u5f0f\u7f16\u7a0b\u201d\u3002 \u4e5f\u5c31\u662f\uff0c\u5728\u5bf9\u6570\u636e\u7ed3\u6784\u7684\u64cd\u4f5c\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u4f1a\u6539\u53d8\u6570\u636e\u7ed3\u6784\u672c\u8eab\u6240\u5177\u6709\u7684\u7ed3\u6784\u3002 \u5728\u9700\u8981\u4fee\u6539\u67d0\u4e9b\u4fe1\u606f\u65f6\uff0c\u4e0d\u662f\u76f4\u63a5\u4fee\u6539\uff0c\u800c\u662f\u4fdd\u7559\u524d\u4e00\u4e2a\u7248\u672c\u7684\u4fe1\u606f\uff0c\u5e76\u5c06\u6570\u636e\u521b\u5efa\u4e00\u4e2a\u526f\u672c\uff0c\u5728\u526f\u672c\u4e0a\u6267\u884c\u4fee\u6539\u3002 \u66b4\u529b\u7684\u505a\u6cd5\u662f\u6bcf\u6b21\u4fee\u6539\u4fe1\u606f\u7684\u65f6\u5019\uff0c\u90fd\u76f4\u63a5\u628a\u6574\u4e2a\u6570\u636e\u7ed3\u6784\u590d\u5236\u4e00\u904d\uff0c\u5728\u8fd9\u4e2a\u526f\u672c\u4e0a\u4fee\u6539\u3002 \u4f46\u662f\u7a7a\u95f4\u7684\u82b1\u8d39\u5f88\u660e\u663e\u662f\u4e0d\u80fd\u63a5\u53d7\u7684\u3002 \u53d1\u73b0\u6bcf\u6b21\u4fee\u6539 \u53ea\u4f1a\u4fee\u6539\u4e00\u90e8\u5206\u4fe1\u606f \uff0c\u90a3\u4e48\u5355\u72ec\u5c06\u8fd9\u90e8\u5206\u4fe1\u606f\u521b\u5efa\u4e00\u4e2a\u526f\u672c\uff0c\u5728\u8fd9\u4e2a\u526f\u672c\u4e0a\u8fdb\u884c\u4fee\u6539\uff0c\u5c31\u5927\u5927\u63d0\u9ad8\u4e86\u7a7a\u95f4\u5229\u7528\u7387\u3002 \u8fd9\u6837\uff0c\u6570\u636e\u7ed3\u6784\u5c31\u80fd\u5f88\u65b9\u4fbf\u7684 \u4fdd\u5b58\u6240\u6709\u5386\u53f2\u7248\u672c\u7684\u4fe1 \u606f\u3002 \u8fd9\u79cd\u601d\u60f3\u5728\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u4e0a\u4f53\u73b0\u66f4\u4e3a\u660e\u663e\uff0c\u53ef\u6301\u4e45\u5316 Trie \u5176\u5b9e\u4e5f\u5dee\u4e0d\u591a\u3002","title":"\u6982\u8ff0"},{"location":"algor/ds/persistent-trie/#_2","text":"\u53ef\u6301\u4e45\u5316 Trie \u4e00\u822c\u90fd\u662f\u4ee5 01 Trie \u7684\u65b9\u5f0f\u51fa\u73b0\u3002 01 Trie \u53ef\u4ee5\u652f\u6301\u4e00\u4e9b\u5168\u5c40\u67e5\u8be2\uff0c\u4fee\u6539\u7684\u64cd\u4f5c\u3002 \u4f46\u662f\u65e0\u6cd5\u5f88\u597d\u7684\u652f\u6301 \u533a\u95f4\u7684\u64cd\u4f5c \u3002 \u6bd4\u5982\uff0c\u8981\u591a\u6b21\u8be2\u95ee\u67d0\u4e2a\u5e8f\u5217 \\(a\\) \u7684 \\([l,r]\\) \u4e2d\u548c \\(x\\) \u5f02\u6216\u8d77\u6765\u6700\u5927\u7684\u4e00\u4e2a\u6570\u3002 \u4e00\u822c\u7684 01 Trie \u6ca1\u6cd5\u5f88\u65b9\u4fbf\u7684\u7ef4\u62a4\uff0c\u53ea\u80fd\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u5355\u72ec\u5efa\u6811\u3002 \u6216\u8005\u662f\u5229\u7528\u5220\u9664\u64cd\u4f5c+\u7c7b\u4f3c\u83ab\u961f\u7684\u79bb\u7ebf\u601d\u60f3\u4f18\u5316\uff0c\u4f46\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u4ecd\u7136\u5f88\u9ad8\u3002 \u53ef\u6301\u4e45\u5316 Trie \u7684\u601d\u60f3\u5c31\u662f\uff0c \u4f9d\u6b21 \u63d2\u5165 \\(a_1,a_2,a_3,\\dots\\) \uff0c\u7136\u540e\u4fdd\u7559\u6bcf\u4e00\u6b21\u63d2\u5165\u4e4b\u540e\u7684\u7248\u672c \\(i\\) \u3002 \u5e76\u4e14\u7b2c \\(i\\) \u4e2a\u7248\u672c\u5bf9\u5e94\u7684\u6839\u8282\u70b9\u4e3a \\(rt[i]\\) \u3002 \u5b83\u6709\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u6027\u8d28\uff1a \u4ece \\(rt[i]\\) \u51fa\u53d1\u6240\u80fd\u8bbf\u95ee\u5230\u7684\u6240\u6709\u8282\u70b9\u6784\u6210\u7684\u4e00\u68f5 Trie \u6811\uff0c\u5c31\u662f \\(a[1 \\sim i]\\) \u5168\u90e8\u63d2\u5165\u4e4b\u540e\u5f62\u6210\u7684\u4e00\u68f5 Trie \u6811\u3002 \u5229\u7528\u8fd9\u4e2a\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u524d\u7f00\u548c\u7684\u601d\u60f3\uff0c\u628a\u7b2c \\(r\\) \u4e2a\u7248\u672c\u6784\u6210\u7684 Trie \u548c\u7b2c \\(l - 1\\) \u4e2a\u7248\u672c\u6784\u6210\u7684 Trie \u201c\u76f8\u51cf\u201d\uff0c\u5c31\u5f97\u5230\u4e86 \\(a[l \\sim r]\\) \u8fd9\u90e8\u5206\u63d2\u5165\u4e4b\u540e\u5f97\u5230\u7684 Trie \u6811\u3002 \uff08 \u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u201c\u76f8\u51cf\u201d\u5e76\u4e0d\u662f\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u76f8\u51cf\uff0c\u5177\u4f53\u5b9e\u73b0\u65b9\u5f0f\u770b\u4e0b\u65b9\u7684 Query \u64cd\u4f5c \uff09","title":"\u5e94\u7528"},{"location":"algor/ds/persistent-trie/#_3","text":"","title":"\u5b9e\u73b0"},{"location":"algor/ds/persistent-trie/#_4","text":"\u53ef\u6301\u4e45\u5316 Trie \u7684\u6570\u636e\u4fdd\u5b58\u65b9\u5f0f\u548c\u666e\u901a\u7684 Trie \u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f\u5229\u7528\u5b57\u7b26\u6307\u9488\u6307\u5411\u542b\u6709\u4fe1\u606f\u7684\u8282\u70b9\u6765\u4fdd\u5b58\u6570\u636e\u3002 \u4ecb\u7ecd\u539f\u7406\u65f6\u4ecd\u7136\u4f7f\u7528\u666e\u901a Trie\uff0c\u4ee3\u7801\u5b9e\u73b0\u4f7f\u7528 01 Trie\u3002 \u4ecd\u7136\u8bbe \\(tr[p,ch]\\) \u8868\u793a \\(p\\) \u8282\u70b9\u7684 \\(ch\\) \u5b57\u7b26\u6307\u9488\uff0c\u5047\u8bbe\u5f53\u524d\u9700\u8981\u63d2\u5165\u5b57\u7b26\u4e32 \\(s\\) \uff0c\u90a3\u4e48\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u5373\u53ef\uff1a \u8bbe\u4e0a\u4e00\u4e2a\u7248\u672c\u7684\u53ef\u6301\u4e45\u5316 Trie \u5bf9\u5e94\u7684\u6839\u8282\u70b9\u4e3a \\(rt\\) \uff0c\u4ee4\u4e00\u4e2a\u6307\u9488 \\(p = root\\) \uff0c\u7528\u4e00\u4e2a\u6307\u9488 \\(i\\) \u626b\u63cf \\(s\\) \u3002 \u65b0\u5efa\u4e00\u4e2a\u8282\u70b9 \\(q\\) \uff0c\u4ee4\u65b0\u7248\u672c\u5bf9\u5e94\u7684\u6839\u8282\u70b9 \\(rt\\prime = q\\) \u3002 \u5982\u679c \\(p\\not= \\text{NULL}\\) \uff0c\u5c06 \\(p\\) \u7684\u5b57\u7b26\u6307\u9488\u4fe1\u606f\u590d\u5236\u7ed9 \\(q\\) \u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u5bf9\u4e8e \\(\\forall tr[p,ch] \\not = \\text{NULL}\\) \uff0c\u4ee4 \\(tr[q,ch] = tr[p,ch]\\) \u3002 \u65b0\u5efa\u4e00\u4e2a\u8282\u70b9 \\(q\\prime\\) \uff0c\u4ee4 \\(tr[q,s_i]\\) \u6307\u5411 \\(q\\prime\\) \uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c \\(p,q\\) \u4e24\u4e2a\u8282\u70b9\u9664\u4e86\u7f16\u53f7\u4ee5\u5916\u7684 \u552f\u4e00\u533a\u522b \uff0c\u5c31\u662f \\(s_i\\) \u8fd9\u4e2a\u5b57\u7b26\u6307\u9488\u6307\u5411\u7684\u8282\u70b9\u3002 \u5373\u662f\uff1a \\(tr[p,s_i]\\not=tr[q,s_i]\\) \u3002 \u7136\u540e\u8ba9 \\(p,q\\) \u5f80\u4e0b\u8df3\uff0c \\(p = tr[p,s_i],q = tr[q,s_i]\\) \uff0c\u4ee4 \\(i + 1\\) \u3002 \u91cd\u590d \\(3 \\sim 5\\) \uff0c \u76f4\u5230\u626b\u63cf\u5b8c \\(s\\) \u3002 \u4e0b\u56fe\u5c55\u793a\u4e86\u5728\u5df2\u7ecf\u6709\u5386\u53f2\u7248\u672c \"bte\" \u7684\u53ef\u6301\u4e45\u5316 Trie \u4e2d\u63d2\u5165\u65b0\u7684\u5b57\u7b26\u4e32 \u201ckth\u201d \u7684\u8fc7\u7a0b\u3002 \u5176\u4e2d\u7eff\u8272\u8282\u70b9\u4e3a\u5404\u4e2a\u7248\u672c\u5bf9\u5e94\u7684\u6839\u8282\u70b9\uff0c\u7ea2\u8272\u8282\u70b9\u4e3a\u5c3e\u6807\u8bb0\u6240\u5904\u8282\u70b9\u3002","title":"\u63d2\u5165"},{"location":"algor/ds/persistent-trie/#_5","text":"\u5f53\u6211\u4eec\u9700\u8981\u67e5\u8be2\u67d0\u4e00\u6bb5\u533a\u95f4 \\([l,r]\\) \u5185\u548c \\(x\\) \u5f02\u6216\u8d77\u6765\u6700\u5927\u7684\u6570\u65f6\uff0c\u5e94\u5f53\u600e\u4e48\u5904\u7406\uff1f \u4e0a\u9762\u5df2\u7ecf\u8bf4\u4e86\uff0c\u5229\u7528\u524d\u7f00\u76f8\u51cf\u7684\u601d\u60f3\uff0c\u7528\u4e24\u4e2a\u7ef4\u62a4\u524d\u7f00 \\(1\\sim r,1\\sim l-1\\) \u7684\u4e24\u4e2a\u7248\u672c\u7684 Trie \u76f8\u51cf\u5f97\u5230 \\([l,r]\\) \u5bf9\u5e94\u7684 Trie\u3002 \u4f46\u662f\u6211\u4eec\u5e76\u4e0d\u80fd\u76f4\u63a5\u76f8\u51cf\uff0c\u56e0\u4e3a\u5e76\u4e0d\u5b58\u5728\u4e00\u79cd\u8ba9 Trie \u548c Trie \u4e4b\u95f4\u505a\u51cf\u6cd5\u7684\u64cd\u4f5c\u3002 \u9996\u5148\u6839\u636e\u53ef\u6301\u4e45\u5316 Trie \u7684\u6027\u8d28\uff0c\u4ece \\(rt[i]\\) \u51fa\u53d1\u80fd\u8bbf\u95ee\u5230\u7684\u8282\u70b9\u6784\u6210\u4e86\u7b2c \\(i\\) \u4e2a\u7248\u672c\u7684 Trie\u3002 \u6240\u4ee5\u53ef\u4ee5\u5148\u4ece \\(r\\) \u51fa\u53d1\uff0c\u8fd9\u6837\u5c31\u6ee1\u8db3\u4e86 \\(r\\) \u7684\u4e0a\u754c\u9650\u5236\u3002 \u600e\u4e48\u6ee1\u8db3 \\(l - 1\\) \u7684\u4e0b\u754c\u9650\u5236\u5462\uff1f \u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5728\u8282\u70b9\u4e0a\u4fdd\u5b58\u7684\u9644\u52a0\u4fe1\u606f\u3002 \u8bbe \\(end[p]\\) \u8868\u793a\u4ee5 \\(p\\) \u4e3a\u5c3e\u8282\u70b9\u7684\u6570\u662f\u5e8f\u5217\u91cc\u7684\u7b2c\u51e0\u4e2a\u6570\uff08\u53ef\u4ee5\u5f53\u4f5c\u201c\u7248\u672c\u201d\u770b\u5f85\uff09\u3002 \u8bbe \\(las[p]\\) \u8868\u793a\u4ee5 \\(p\\) \u4e3a\u6839\u7684\u5b50\u6811\u4e2d \\(end\\) \u7684\u6700\u5927\u503c\u3002 \u90a3\u4e48\u6211\u4eec\u9012\u5f52\u8bbf\u95ee\u8282\u70b9\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u8003\u8651 \\(las \\ge l - 1\\) \u7684\u8282\u70b9\u5373\u53ef\u3002 \u56e0\u4e3a \\(las\\) \u4e5f\u53ef\u4ee5\u770b\u4f5c\uff1a\u8fd9\u9897\u5b50\u6811 \u6700\u540e\u88ab\u54ea\u4e00\u4e2a\u7248\u672c\u6240\u66f4\u65b0\u8fc7 \u3002 \u9012\u5f52\u4e0b\u53bb\u5c31\u53ef\u4ee5\u4e86\u3002","title":"\u8be2\u95ee"},{"location":"algor/ds/persistent-trie/#_6","text":"President-01Trie 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 const int si = 1e4 + 10 ; const int MaxDepth = 21 ; // \u53ef\u4ee5\u4e0d\u7528\u5f3a\u5236\u4f4d\u6570\u90fd\u4e00\u6837 // \u5199\u4e86\u4e5f\u53ef\u4ee5\u3002 int s [ si ]; int tr [ si * ( MaxDepth + 1 )][ 2 ]; int las [ si * ( MaxDepth + 1 )]; int tot = 0 , root [ si ]; // \u5f53\u524d\u7248\u672c\uff0c\u5f53\u524d\u4f4d\u6570\uff0cp, q void insert ( int i , int k , int p , int q ) { if ( k < 0 ) { las [ q ] = i ; return ; } int ch = s [ i ] >> k & 1 ; if ( p ) tr [ q ][ ch ^ 1 ] = tr [ p ][ ch ^ 1 ]; // p \u975e\u7a7a\uff0c\u590d\u5236\u8282\u70b9\u4fe1\u606f\u3002 tr [ q ][ ch ] = ++ tot ; // p \u548c q \u7684 ch \u6307\u9488\u5e94\u5f53\u4e0d\u4e00\u6837\u3002 insert ( i , k - 1 , tr [ p ][ ch ], tr [ q ][ ch ]); las [ q ] = max ( las [ tr [ q ][ 0 ]], las [ tr [ q ][ 1 ]]); } // \u67e5\u8be2 [l, r] \u4e2d\u548c val \u5f02\u6216\u8d77\u6765\u6700\u5927\u7684\u6570\u3002 // \u8c03\u7528\u65f6\u9700\u8981 ask(root[r], MaxDepth, val, l - 1) // \u56e0\u4e3a\u53ef\u6301\u4e45\u5316 Trie \u7684root[i] \u80fd\u8bbf\u95ee\u5230\u7684\u5143\u7d20\u53ea\u6709 s[1 ~ i]\u3002 // \u800c\u53ea\u8003\u8651 las >= l - 1 \u7684\u8282\u70b9\u5219\u80fd\u6ee1\u8db3\u4e0b\u754c\u3002 int ask ( int p , int k , int val , int limit ) { if ( k < 0 ) return s [ las [ p ]]; int ch = val >> k & 1 ; if ( las [ tr [ p ][ ch ^ 1 ]] >= limit ) return ask ( tr [ p ][ ch ^ 1 ], k - 1 , val , limit ); else return ask ( tr [ p ][ ch ], k - 1 , val , limit ); // \u8d70\u4e0d\u4e86 1 \u6307\u9488\uff0c\u6240\u4ee5\u53ea\u80fd\u5f80 0 \u6307\u9488\u8d70\u3002 } int main () { s [ 0 ] = 0 , las [ 0 ] = -1 , root [ 0 ] = ++ tot ; insert ( 0 , MaxDepth , 0 , root [ 0 ]); // \u8fd9\u51e0\u53e5\u8bdd\u662f\u5fc5\u987b\u7684\uff0c\u56e0\u4e3a\u4f60\u8981\u4fdd\u8bc1\u5bf9\u4e8e\u4efb\u610f l \\in [1, n], \u90fd\u6709\u4e00\u4e2a l - 1 \u5b58\u5728\u3002 } \u5f53\u7136\uff0c\u53ef\u6301\u4e45\u5316 Trie \u7684\u5e94\u7528\u4e0d\u6b62\u8fd9\u4e9b\uff0c\u53ef\u4ee5\u8003\u8651\u914d\u5408\u7ef4\u62a4\u5f02\u6216\u548c\u7684 01Trie\uff0c\u5b9e\u73b0\u52a8\u6001\u63d2\u5165\uff0c\u5220\u9664\u6307\u5b9a\u5143\u7d20\uff0c\u67e5\u8be2\u533a\u95f4\u5f02\u6216\u548c\u7684\u64cd\u4f5c\u3002 TODO\uff1a\u4e4b\u540e\u5199\u4e00\u4e2a\u8fd9\u6837\u7684 \u53ef\u6301\u4e45\u5316 Trie\uff0c\u7136\u540e\u7528\u66b4\u529b\u5bf9\u62cd\u9a8c\u8bc1\u6b63\u786e\u6027\u3002 \u53c2\u8003\u8d44\u6599\uff1a\u300a\u7b97\u6cd5\u7ade\u8d5b\u8fdb\u9636\u6307\u5357\u300b\uff0cOI - Wiki","title":"\u4ee3\u7801"},{"location":"algor/ds/queue/","text":"\u6982\u8ff0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u961f\u5217\u662f\u4e00\u79cd FIFO(First In First Out)\u8868\uff0c\u610f\u601d\u662f\u5148\u8fdb\u5165\u7684\u5143\u7d20\u5148\u51fa\u6765\uff0c\u4f60\u53ef\u4ee5\u5c06\u5b83\u7406\u89e3\u4e3a\u4e00\u4e2a\u7ba1\u5b50\uff0c\u4ece\u540e\u585e\u8fdb\u53bb\uff0c\u4ece\u524d\u9762\u51fa\u6765\u3002 \u4e00\u5f20\u56fe\uff08\u56fe\u6e90 OI-wiki \uff09\uff1a BFS \u548c \u62d3\u6251\u6392\u5e8f\uff0cSPFA \u8fd9\u79cd\u57fa\u4e8e\u201d\u5e7f\u5ea6\u4f18\u5148\u201c\u7684\u7b97\u6cd5\uff0c\u5168\u90e8\u90fd\u8981\u7528\u5230\u961f\u5217\u6765\u201d\u6309\u5c42\u6269\u5c55\u201c\u3002 \u961f\u5217\u4e00\u822c\u652f\u6301\u8fd9\u51e0\u79cd\u64cd\u4f5c\uff1a push(x) \uff1a\u5728\u961f\u5c3e\u52a0\u5165\u5143\u7d20 \\(x\\) \u3002 pop() \uff1a\u5f39\u51fa\u961f\u5934\u3002 getfront() \uff1a\u6c42\u961f\u5934\u5143\u7d20\u7684\u503c\u3002 getback() \uff1a\u6c42\u961f\u5c3e\u5143\u7d20\u7684\u503c\u3002 \u5982\u679c\u62ff\u6570\u7ec4\u6a21\u62df\u7684\u8bdd\uff0c\u53ea\u9700\u8981\u62ff\u4e24\u4e2a\u6307\u9488\u8bb0\u5f55\u5934\u5c3e\u5373\u53ef\uff1a 1 2 3 4 5 6 7 8 int q [ si ], ql = 1 , qr = 0 ; \uff08 \u8fd9\u79cd\u5199\u6cd5 \uff0c \u5728\u5355\u8c03\u961f\u5217\u91cc\u9762\u4f1a\u63d0\u5230\u4e3a\u5565 \uff09 void push ( int x ) { q [ ++ qr ] = x ;} void pop ( int x ) { ql ++ ; } int getfront () { return q [ ql ]; } int getback () { return q [ qr ]; } int clear () { ql = 1 , qr = 0 ; } \u4f60\u53d1\u73b0\u8fd9\u79cd\u65b9\u6cd5\u662f\u4e00\u76f4\u5728\u540e\u79fb\u7684\uff0c\u4e45\u4e86\u4e4b\u540e\u961f\u5217\u7684\u5b9e\u9645\u5927\u5c0f\u4f1a\u7f29\u6c34\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u628a \\(0\\) \u548c \\(\\text{SIZE} - 1\\) \u8fde\u8d77\u6765\uff08\u5982\u679c\u4ece \\(1\\) \u8fde\u5230 \\(\\text{SIZE}\\) \uff0c\u8fd0\u7b97\u4f1a\u53d8\u9ebb\u70e6\uff09\uff0c\u4e32\u6210\u4e00\u4e2a\u73af\uff0c\u6b64\u65f6 \\(ql,qr\\) \u7684\u521d\u503c\u4e5f\u8981\u76f8\u5e94\u6539\u53d8\u3002 \u8fd9\u73a9\u610f\u513f\u5c31\u662f\u5faa\u73af\u961f\u5217\uff0c\u6b64\u65f6\u7684 ++x \u8fd0\u7b97\u88ab\u91cd\u65b0\u5b9a\u4e49\u4e3a\u4e86 \\(x = (x + 1) \\mod \\text{SIZE}\\) \u6216\u8005\u4f7f\u7528 STLqueue: 1 2 3 4 5 6 7 8 std :: queue < int > q ; q . push ( 1 ), q . push ( 3 ); // \u63d2\u5165 cout << q . front () << \" \" << q . back () << endl ; q . pop (), q . pop (); // \u5f39\u51fa int sz = int ( q . size ()) // \u6c42\u5176\u5927\u5c0f bool ept = q . empty () // \u662f\u5426\u4e3a\u7a7a \u5e94\u7528 \u03c8(\uff40\u2207\u00b4)\u03c8 \u53cc\u7aef\u961f\u5217 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5c31\u662f\u4e24\u8fb9\u90fd\u80fd\u51fa\u80fd\u8fdb\u7684\u961f\u5217\u3002 \u7528 STLdeque \u5c31\u884c\u4e86\uff0c\u4e5f\u53ef\u624b\u5199\uff08\u56e0\u4e3a deque \u6709\u65f6\u5e38\u6570\u592a\u5927\u3002\uff09 \u5143\u7d20\u8bbf\u95ee q.front() \u8fd4\u56de\u961f\u9996\u5143\u7d20 q.back() \u8fd4\u56de\u961f\u5c3e\u5143\u7d20 \u4fee\u6539 q.push_back() \u5728\u961f\u5c3e\u63d2\u5165\u5143\u7d20 q.pop_back() \u5f39\u51fa\u961f\u5c3e\u5143\u7d20 q.push_front() \u5728\u961f\u9996\u63d2\u5165\u5143\u7d20 q.pop_front() \u5f39\u51fa\u961f\u9996\u5143\u7d20 q.insert() \u5728\u6307\u5b9a\u4f4d\u7f6e\u524d\u63d2\u5165\u5143\u7d20\uff08\u4f20\u5165\u8fed\u4ee3\u5668\u548c\u5143\u7d20\uff09 q.erase() \u5220\u9664\u6307\u5b9a\u4f4d\u7f6e\u7684\u5143\u7d20\uff08\u4f20\u5165\u8fed\u4ee3\u5668\uff09 \u5bb9\u91cf q.empty() \u961f\u5217\u662f\u5426\u4e3a\u7a7a q.size() \u8fd4\u56de\u961f\u5217\u4e2d\u5143\u7d20\u7684\u6570\u91cf \u5355\u8c03\u961f\u5217 \u03c8(\uff40\u2207\u00b4)\u03c8 \u89c1 \u5355\u8c03\u961f\u5217","title":"\u961f\u5217"},{"location":"algor/ds/queue/#_1","text":"\u961f\u5217\u662f\u4e00\u79cd FIFO(First In First Out)\u8868\uff0c\u610f\u601d\u662f\u5148\u8fdb\u5165\u7684\u5143\u7d20\u5148\u51fa\u6765\uff0c\u4f60\u53ef\u4ee5\u5c06\u5b83\u7406\u89e3\u4e3a\u4e00\u4e2a\u7ba1\u5b50\uff0c\u4ece\u540e\u585e\u8fdb\u53bb\uff0c\u4ece\u524d\u9762\u51fa\u6765\u3002 \u4e00\u5f20\u56fe\uff08\u56fe\u6e90 OI-wiki \uff09\uff1a BFS \u548c \u62d3\u6251\u6392\u5e8f\uff0cSPFA \u8fd9\u79cd\u57fa\u4e8e\u201d\u5e7f\u5ea6\u4f18\u5148\u201c\u7684\u7b97\u6cd5\uff0c\u5168\u90e8\u90fd\u8981\u7528\u5230\u961f\u5217\u6765\u201d\u6309\u5c42\u6269\u5c55\u201c\u3002 \u961f\u5217\u4e00\u822c\u652f\u6301\u8fd9\u51e0\u79cd\u64cd\u4f5c\uff1a push(x) \uff1a\u5728\u961f\u5c3e\u52a0\u5165\u5143\u7d20 \\(x\\) \u3002 pop() \uff1a\u5f39\u51fa\u961f\u5934\u3002 getfront() \uff1a\u6c42\u961f\u5934\u5143\u7d20\u7684\u503c\u3002 getback() \uff1a\u6c42\u961f\u5c3e\u5143\u7d20\u7684\u503c\u3002 \u5982\u679c\u62ff\u6570\u7ec4\u6a21\u62df\u7684\u8bdd\uff0c\u53ea\u9700\u8981\u62ff\u4e24\u4e2a\u6307\u9488\u8bb0\u5f55\u5934\u5c3e\u5373\u53ef\uff1a 1 2 3 4 5 6 7 8 int q [ si ], ql = 1 , qr = 0 ; \uff08 \u8fd9\u79cd\u5199\u6cd5 \uff0c \u5728\u5355\u8c03\u961f\u5217\u91cc\u9762\u4f1a\u63d0\u5230\u4e3a\u5565 \uff09 void push ( int x ) { q [ ++ qr ] = x ;} void pop ( int x ) { ql ++ ; } int getfront () { return q [ ql ]; } int getback () { return q [ qr ]; } int clear () { ql = 1 , qr = 0 ; } \u4f60\u53d1\u73b0\u8fd9\u79cd\u65b9\u6cd5\u662f\u4e00\u76f4\u5728\u540e\u79fb\u7684\uff0c\u4e45\u4e86\u4e4b\u540e\u961f\u5217\u7684\u5b9e\u9645\u5927\u5c0f\u4f1a\u7f29\u6c34\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u628a \\(0\\) \u548c \\(\\text{SIZE} - 1\\) \u8fde\u8d77\u6765\uff08\u5982\u679c\u4ece \\(1\\) \u8fde\u5230 \\(\\text{SIZE}\\) \uff0c\u8fd0\u7b97\u4f1a\u53d8\u9ebb\u70e6\uff09\uff0c\u4e32\u6210\u4e00\u4e2a\u73af\uff0c\u6b64\u65f6 \\(ql,qr\\) \u7684\u521d\u503c\u4e5f\u8981\u76f8\u5e94\u6539\u53d8\u3002 \u8fd9\u73a9\u610f\u513f\u5c31\u662f\u5faa\u73af\u961f\u5217\uff0c\u6b64\u65f6\u7684 ++x \u8fd0\u7b97\u88ab\u91cd\u65b0\u5b9a\u4e49\u4e3a\u4e86 \\(x = (x + 1) \\mod \\text{SIZE}\\) \u6216\u8005\u4f7f\u7528 STLqueue: 1 2 3 4 5 6 7 8 std :: queue < int > q ; q . push ( 1 ), q . push ( 3 ); // \u63d2\u5165 cout << q . front () << \" \" << q . back () << endl ; q . pop (), q . pop (); // \u5f39\u51fa int sz = int ( q . size ()) // \u6c42\u5176\u5927\u5c0f bool ept = q . empty () // \u662f\u5426\u4e3a\u7a7a","title":"\u6982\u8ff0"},{"location":"algor/ds/queue/#_2","text":"","title":"\u5e94\u7528"},{"location":"algor/ds/queue/#_3","text":"\u5c31\u662f\u4e24\u8fb9\u90fd\u80fd\u51fa\u80fd\u8fdb\u7684\u961f\u5217\u3002 \u7528 STLdeque \u5c31\u884c\u4e86\uff0c\u4e5f\u53ef\u624b\u5199\uff08\u56e0\u4e3a deque \u6709\u65f6\u5e38\u6570\u592a\u5927\u3002\uff09 \u5143\u7d20\u8bbf\u95ee q.front() \u8fd4\u56de\u961f\u9996\u5143\u7d20 q.back() \u8fd4\u56de\u961f\u5c3e\u5143\u7d20 \u4fee\u6539 q.push_back() \u5728\u961f\u5c3e\u63d2\u5165\u5143\u7d20 q.pop_back() \u5f39\u51fa\u961f\u5c3e\u5143\u7d20 q.push_front() \u5728\u961f\u9996\u63d2\u5165\u5143\u7d20 q.pop_front() \u5f39\u51fa\u961f\u9996\u5143\u7d20 q.insert() \u5728\u6307\u5b9a\u4f4d\u7f6e\u524d\u63d2\u5165\u5143\u7d20\uff08\u4f20\u5165\u8fed\u4ee3\u5668\u548c\u5143\u7d20\uff09 q.erase() \u5220\u9664\u6307\u5b9a\u4f4d\u7f6e\u7684\u5143\u7d20\uff08\u4f20\u5165\u8fed\u4ee3\u5668\uff09 \u5bb9\u91cf q.empty() \u961f\u5217\u662f\u5426\u4e3a\u7a7a q.size() \u8fd4\u56de\u961f\u5217\u4e2d\u5143\u7d20\u7684\u6570\u91cf","title":"\u53cc\u7aef\u961f\u5217"},{"location":"algor/ds/queue/#_4","text":"\u89c1 \u5355\u8c03\u961f\u5217","title":"\u5355\u8c03\u961f\u5217"},{"location":"algor/ds/segtree/","text":"\u7ebf\u6bb5\u6811 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6cdb\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ebf\u6bb5\u6811\u662f\u4e00\u79cd\u5e38\u7528\u7684\u7ef4\u62a4\u533a\u95f4\u4fe1\u606f\u7684\u6570\u636e\u7ed3\u6784\u3002 \u5b83\u8981\u6c42\u6240\u7ef4\u62a4\u7684\u4fe1\u606f\u5177\u6709\u533a\u95f4\u53ef\u52a0\u6027\uff08\u5bb9\u6613\u6309\u7167\u533a\u95f4\u5212\u5206\uff0c\u5408\u5e76\uff09 \u6bd4\u5982 \\(\\sum, \\prod, \\min, \\max\\) \u8fd9\u4e9b\u4fe1\u606f\u3002 \u66f4\u4e25\u8c28\u7684\u5b9a\u4e49 \u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u4fe1\u606f\u5e94\u5f53\u662f\u4e00\u4e2a\u6ee1\u8db3\u5e7a\u534a\u7fa4\u6027\u8d28\u7684\u4fe1\u606f\u3002 \u4e00\u4e2a\u5e7a\u534a\u7fa4 \\(M = (S, \\oplus, e)\\) \u6ee1\u8db3\u8fd9\u4e9b\u6027\u8d28\uff1a \uff08 \\(\\oplus\\) \u662f\u5b9a\u4e49\u5728\u96c6\u5408 \\(S\\) \u4e0a\u7684\u4e8c\u5143\u8fd0\u7b97\uff09 \\(\\oplus\\) \u5173\u4e8e \\(S\\) \u5c01\u95ed\u3002 \\(\\oplus\\) \u5b58\u5728\u7ed3\u5408\u5f8b\u5373 \\(\\forall a, b, c \\in S, (a \\oplus b) \\oplus c = a\\oplus (b \\oplus c)\\) \u3002 \\(\\oplus\\) \u5b58\u5728\u5e7a\u5143\uff0c\u5373 \\(\\exists e \\in S, \\forall x \\in S, (e \\oplus x = x) \\lor (x \\oplus e = x)\\) \u3002 \u4e00\u822c\u652f\u6301\u5355\u70b9\u548c\u533a\u95f4\u7684\u4fe1\u606f\u4fee\u6539\uff0c\u533a\u95f4\u7684\u4fe1\u606f\u67e5\u8be2\u3002 \u666e\u901a\u7ebf\u6bb5\u6811 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ebf\u6bb5\u6811\u57fa\u4e8e\u5206\u6cbb\u601d\u60f3\uff0c\u5b83\u5148\u5c06\u5e8f\u5217\u4ece\u4e2d\u95f4\u4e00\u5206\u4e3a\u4e8c\uff0c \u7136\u540e\u5bf9\u4e8e\u4ea7\u751f\u7684\u8fd9\u4e24\u6bb5\u533a\u95f4\uff0c\u7ee7\u7eed\u8fdb\u884c\u4ece\u4e2d\u95f4\u4e00\u5206\u4e3a\u4e8c\u7684\u8fc7\u7a0b\u3002 \u76f4\u5230\u6700\u540e\u5206\u51fa\u6765\u7684\u8fd9\u4e00\u6bb5\u533a\u95f4\u957f\u5ea6\u7b49\u4e8e \\(1\\) \u3002 \u76f4\u89c2\u7684\u6765\u770b\uff0c\u7ed3\u6784\u5927\u6982\u957f\u8fd9\u6837\uff1a \u53ef\u4ee5\u53d1\u73b0\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u7ef4\u62a4\u4e86\u5e8f\u5217\u4e0a\u7684\u4e00\u6bb5\u533a\u95f4 \\([l, r]\\) \u3002 \u5e76\u4e14\u5bf9\u4e8e\u4e00\u4e2a\u7ef4\u62a4 \\([L, R]\\) \u7684\u8282\u70b9\uff0c\u5b83\u7684\u5de6\u513f\u5b50\u7ef4\u62a4 \\([L,mid]\\) \uff0c\u53f3\u513f\u5b50\u7ef4\u62a4 \\((mid, R]\\) \u3002 \u5176\u4e2d \\(mid = \\lfloor \\dfrac{L + R}{2}\\rfloor\\) \u3002 \u53bb\u6389\u6700\u540e\u4e00\u5c42\u8282\u70b9\u4e4b\u540e\u7684\u7ebf\u6bb5\u6811\u662f\u4e00\u68f5\u6ee1\u4e8c\u53c9\u6811\uff0c\u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u4e8c\u500d\u6807\u8bb0\u6cd5\u6765\u786e\u5b9a\u4e00\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\u7f16\u53f7\u3002 \u5f62\u5f0f\u4e0a\u6765\u8bf4\uff0c\u5bf9\u4e8e\u975e\u53f6\u5b50\u8282\u70b9 \\(p\\) \uff0c\u5176\u5de6\u53f3\u513f\u5b50\u8282\u70b9\u5206\u522b\u662f \\(p \\times 2, p\\times 2 + 1\\) \u3002 \u4f46\u662f\u50cf\u4e0a\u56fe\u90a3\u6837\u5b8c\u7f8e\u7684\u7ed3\u6784\u53ea\u4f1a\u5728\u5e8f\u5217\u957f\u5ea6\u7b49\u4e8e \\(2^k\\) \u65f6\u51fa\u73b0\uff0c\u5f88\u591a\u65f6\u5019\u6700\u540e\u4e00\u5c42\u662f\u586b\u4e0d\u6ee1\u7684\uff0c\u7ef4\u62a4\u533a\u95f4\u957f\u5ea6\u4e3a \\(1\\) \u7684\u8282\u70b9\u53ef\u80fd\u4f1a\u8dd1\u5230\u5012\u6570\u7b2c\u4e8c\u5c42\u53bb\u3002 \u6bd4\u5982\u8fd9\u6837\uff08\u56fe\u4e2d\u6709\u4e9b\u6807\u6ce8\u7684\u533a\u95f4\u662f\u95ed\u533a\u95f4\uff0c\u6709\u4e9b\u662f\u5f00\u533a\u95f4\uff0c\u4f46\u65e0\u4f24\u5927\u96c5\uff09\uff1a \u53ef\u4ee5\u53d1\u73b0\uff0c\u6700\u540e\u4e00\u5c42\u7684\u90a3\u4e2a\u8282\u70b9\u7684\u7f16\u53f7\u5e94\u5f53\u4e3a \\(31\\) \uff0c\u5f53 \\(n\\) \u589e\u5927\u65f6\uff0c\u8fd9\u4e2a\u6570\u5b57\u4f1a\u8d8a\u6765\u8d8a\u63a5\u8fd1 \\(4 \\times n\\) \u3002 \u6240\u4ee5\u5f00 \\(4\\) \u500d\u7a7a\u95f4\u662f\u5fc5\u8981\u64cd\u4f5c\uff0c\u4e25\u8c28\u8bc1\u660e\u53ef\u4ee5\u81ea\u67e5\u3002 \u4e3a\u4e86\u65b9\u4fbf\u5904\u7406\uff0c\u8ba9\u6bcf\u4e00\u4e2a\u8282\u70b9\u7ef4\u62a4\u4ee5\u4e0b\u7684\u4fe1\u606f\u5373\u53ef\uff1a \u5b83\u7ef4\u62a4\u7684\u533a\u95f4 \\(l, r\\) \u3002 \u5b83\u7ef4\u62a4\u7684\u4fe1\u606f\u7684\u503c \\(dat\\) \u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\u4f7f\u7528\u7ed3\u6784\u4f53\u7ef4\u62a4\uff0c\u65b9\u4fbf\u6a21\u5757\u5316\u7684\u7f16\u5199\u548c\u8c03\u8bd5\u3002 \u57fa\u672c\u64cd\u4f5c \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e0a\u4f20\u4fe1\u606f \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e2a\u64cd\u4f5c\u7528\u4e8e\u628a\u513f\u5b50\u8282\u70b9\u7684\u4fe1\u606f\u4e0a\u4f20\u5230\u7236\u4eb2\u8282\u70b9\u3002 \u56e0\u4e3a\u4e00\u822c\u7684\u7ebf\u6bb5\u6811\u90fd\u662f\u81ea\u5e95\u5411\u4e0a\u66f4\u65b0\uff0c\u6240\u4ee5\u9700\u8981\u8fd9\u6837\u7684\u4e00\u4e2a\u6b65\u9aa4\u3002 \u5c31\u662f\u76f4\u63a5\u628a\u5de6\u53f3\u513f\u5b50\u7684\u4fe1\u606f\u62c9\u4e0a\u6765\u5230\u7236\u4eb2\u8282\u70b9\u3002 \u6839\u636e\u7ef4\u62a4\u4fe1\u606f\u7684\u4e0d\u540c\u505a\u4e00\u70b9\u4fee\u6539\u5c31\u884c\u3002 \u8fd9\u4e2a\u4e00\u822c\u53d6\u51b3\u4e8e\u8be2\u95ee\u95ee\u7684\u662f\u4ec0\u4e48\uff0c\u5982\u679c\u95ee\u548c\u5c31\u662f\u52a0\u8d77\u6765\uff0c\u5982\u679c\u95ee\u6700\u503c\u5c31\u662f\u53d6\u6700\u503c\u3002 Code 1 2 3 4 inline void pushup ( int p ) { t [ p ]. dat_sum = t [ p << 1 ]. dat_sum + t [ p << 1 | 1 ]. dat_sum ; // sum t [ p ]. dat_min = min ( t [ p << 1 ]. dat_min , t [ p << 1 | 1 ]. dat_min ); // min } \u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u64cd\u4f5c\u5c31\u662f\u628a lson \u7684\u4fe1\u606f\u548c rson \u7684\u4fe1\u606f\u5408\u5e76\u8d77\u6765\uff0c\u5370\u8bc1\u4e86\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u4fe1\u606f\u5e94\u5f53\u6ee1\u8db3\u7ed3\u5408\u5f8b\u3002 \u5efa\u6811 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e2a\u64cd\u4f5c\u7528\u4e8e\u786e\u5b9a\u7ebf\u6bb5\u6811\u7684\u7ed3\u6784\uff0c\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u7684\u533a\u95f4\uff0c\u5e76\u5c06\u7ebf\u6bb5\u6811\u521d\u59cb\u5316\u4e3a\u6700\u521d\u72b6\u6001\u3002 \u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u5de6\u53f3\u513f\u5b50\u5206\u522b\u9012\u5f52\u4e0b\u53bb\uff0c\u540c\u6b65\u8bb0\u5f55\u4e24\u4e2a\u503c \\(l, r\\) \uff0c\u8868\u793a\u5f53\u524d\u8282\u70b9\u5e94\u8be5\u7ef4\u62a4\u7684\u533a\u95f4\u3002 \u5f53\u9012\u5f52\u5230\u4e00\u4e2a\u8282\u70b9 \\(p\\) \u7684\u65f6\u5019\uff0c\u4ee4 \\(\\text{t[p].l} \\gets l, \\text{t[p].r} \\gets r\\) \u5373\u53ef\u3002 \u5f53\u9012\u5f52\u5230\u53f6\u5b50\u8282\u70b9\u7684\u65f6\u5019\uff0c\u4ee4\u8fd9\u4e2a\u8282\u70b9\u7ef4\u62a4\u7684\u4fe1\u606f\u4e3a \\(a_l\\) \uff0c\u7136\u540e\u8fd4\u56de\uff0c\u4e0d\u65ad\u4e0a\u4f20\u4fe1\u606f\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 void build ( int p , int l , int r ) { t [ p ]. l = l , t [ p ]. r = r ; if ( l == r ) { t [ p ]. dat_sum = a [ l ]; t [ p ]. dat_min = a [ l ]; return ; } int mid = ( l + r ) >> 1 ; build ( p << 1 , l , mid ), build ( p << 1 | 1 , mid + 1 , r ); pushup ( p ); return ; } \u5355\u70b9\u4fee\u6539 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e2a\u64cd\u4f5c\u7528\u4e8e\u4fee\u6539\u67d0\u4e00\u4e2a\u4f4d\u7f6e \\(x\\) \u7684\u503c\u4e3a \\(v\\) \u3002 \u53ef\u4ee5\u7c7b\u6bd4\u5efa\u6811\u7684\u8fc7\u7a0b\u3002 \u6211\u4eec\u4e00\u76f4\u9012\u5f52\u4e0b\u53bb\uff0c\u627e\u5230\u7ef4\u62a4\u8fd9\u4e2a\u4f4d\u7f6e \\(x\\) \u7684\u8282\u70b9 \\(p\\) \uff0c\u4ee4 \\(\\text{t[p].dat} \\gets v\\) \uff0c\u7136\u540e\u4e0d\u65ad\u4e0a\u4f20\u5373\u53ef\u3002 \u627e \\(x\\) \u53ea\u9700\u8981\u6bd4\u8f83 \\(x\\) \u548c \\(mid\\) \u7684\u5927\u5c0f\u3002 \u5982\u679c \\(x \\le mid\\) \uff0c\u8bf4\u660e\u4ed6\u5728\u5de6\u5b50\u6811\uff0c\u53cd\u4e4b\u5728\u53f3\u5b50\u6811\uff0c\u9012\u5f52\u4e0b\u53bb\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 void modify ( int p , int x , int v ) { if ( l == r ) { t [ p ]. dat_sum = v ; t [ p ]. dat_min = v ; return ; } int mid = ( t [ p ]. l + t [ p ]. r ) >> 1 ; if ( x <= mid ) modify ( p << 1 , x , v ); else modify ( p << 1 | 1 , x , v ); pushup ( p ); return ; } \u533a\u95f4\u67e5\u8be2 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e2a\u64cd\u4f5c\u7528\u4e8e\u67e5\u8be2\u4e00\u4e2a\u533a\u95f4 \\([ql, qr]\\) \u7684\u4fe1\u606f\uff0c\u6bd4\u5982\u533a\u95f4\u548c\u6216\u8005\u533a\u95f4\u6700\u503c\u3002 \u8fd8\u662f\u4ece\u6839\u8282\u70b9\u9012\u5f52\u4e0b\u53bb\uff0c\u8bbe \\(nl = \\text{t[p].l}, nr = \\text{t[p].r}\\) \u3002 \u7136\u540e\u5982\u679c\u5f53\u524d\u8282\u70b9 \\(p\\) \u6ee1\u8db3 \\([nl, nr] \\subset [ql, qr]\\) \u3002 \u90a3\u4e48\u5c31\u4e0d\u7528\u9012\u5f52\u4e0b\u53bb\u4e86\uff0c\u76f4\u63a5\u8fd4\u56de\u5f53\u524d\u8282\u70b9\u7684\u4fe1\u606f\u5373\u53ef\uff08\u8fd9\u662f\u4e00\u4e2a\u6709\u7528\u7684\u5c0f\u526a\u679d\uff09\u3002 \u5426\u5219\u5206\u5272\u9012\u5f52\u4e0b\u53bb\uff0c\u9012\u5f52\u56de\u6765\u4e4b\u540e\u628a\u5de6\u53f3\u5b50\u6811\u7684\u7b54\u6848\u5206\u522b\u5408\u5e76\uff0c\u7136\u540e\u8fd4\u56de\u8fd9\u4e2a\u503c\u5373\u53ef\u3002 \u4e00\u5f20\u56fe\u7406\u89e3\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b \u8282\u70b9\u6807\u9519\u4e86\uff0c\u51d1\u5408\u7740\u770b\uff0c\u4ee5\u540e\u6709\u65f6\u95f4\u518d\u6539\u3002 \u89e3\u91ca\uff1a \u5148\u67e5\u8be2 \\([2,6]\\) \uff0c\u8bbf\u95ee\u5230\u8282\u70b9 \\(1\\) \uff0c\u53d1\u73b0\u4e0d\u6ee1\u8db3 \\([nl, nr] \\subset [ql, qr]\\) \uff0c\u4e8e\u662f\u5411\u4e0b\u9012\u5f52\uff0c\u56e0\u4e3a \\(2(ql) \\le 4(mid)\\) \uff0c\u6240\u4ee5\u5de6\u513f\u5b50 \\(2\\) \u9012\u5f52\u4e0b\u53bb\uff0c\u56e0\u4e3a \\(6(qr) > 4(mid)\\) \uff0c\u6240\u4ee5\u53f3\u513f\u5b50 \\(4\\) \u53f7\u8282\u70b9\u4e5f\u8981\u9012\u5f52\u4e0b\u53bb\u3002 \u5bf9\u4e8e \\(2\\) \u53f7\u8282\u70b9\uff0c\u53d1\u73b0\u4ecd\u65e7\u4e0d\u6ee1\u8db3 \\([nl, nr] \\subset [ql, qr]\\) \uff0c\u6240\u4ee5\u7ee7\u7eed\u5411\u4e0b\u9012\u5f52 \\(5,6\\) \u53f7\u8282\u70b9\u3002 \u5bf9\u4e8e \\(5\\) \u53f7\u8282\u70b9\uff0c\u53d1\u73b0 \\(2(ql) \\le 1(mid)\\) \u4e0d\u6210\u7acb\uff0c\u4e0d\u9012\u5f52\uff0c\u53d1\u73b0 \\(6(qr) > 1(mid)\\) \u6210\u7acb\uff0c\u6240\u4ee5\u9012\u5f52 \\(10\\) \uff0c\u53d1\u73b0 \\(10\\) \u53f7\u8282\u70b9\u6ee1\u8db3\u4e86 \\([nl, nr] \\subset [ql, qr]\\) \uff0c\u76f4\u63a5\u8fd4\u56de\u3002 \u5bf9\u4e8e \\(6\\) \u53f7\u8282\u70b9\uff0c\u53d1\u73b0 \\([nl, nr] \\subset [ql, qr]\\) \uff0c\u76f4\u63a5\u8fd4\u56de\u3002 \u5bf9\u4e8e \\(4\\) \u53f7\u8282\u70b9\uff0c\u53d1\u73b0\u53ea\u6ee1\u8db3 \\(2(ql) \\le 6(mid)\\) \uff0c\u6240\u4ee5\u53ea\u9012\u5f52 \\(7\\) \u53f7\u8282\u70b9\uff0c\u7136\u540e\u53d1\u73b0 \\(7\\) \u6ee1\u8db3 \\([nl, nr] \\subset [ql, qr]\\) \uff0c\u76f4\u63a5\u8fd4\u56de\u3002 \u7136\u540e\u67e5\u8be2\u5c31\u505a\u5b8c\u4e86\u3002 \u8fd9\u4e2a\u5c0f\u526a\u679d\u7684\u590d\u6742\u5ea6\u8bc1\u660e \u6ce8\u610f\u5230\u4e00\u4e2a\u4e8b\u5b9e\u662f\uff0c\u6bcf\u4e00\u5c42\u4e0d\u6ee1\u8db3 \\([nl, nr] \\subset [ql, qr]\\) \u7684\u8282\u70b9\u6700\u591a\u53ea\u6709\u4e24\u4e2a\u3002 \u4e3a\u4ec0\u4e48\u5462\uff1f\u8003\u8651\u53cd\u8bc1\u6cd5\uff0c\u5047\u8bbe\u67d0\u4e00\u5c42\u51fa\u73b0\u4e86\u4e09\u4e2a\u8282\u70b9\u90fd\u4e0d\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\uff0c\u7531\u4e8e\u533a\u95f4\u662f\u8fde\u7eed\u7684\uff0c\u8fd9\u4e09\u4e2a\u8282\u70b9\u5fc5\u7136\u662f\u8fde\u7eed\u7684\u3002 \u7136\u540e\u65e2\u7136\u662f\u8fde\u7eed\u7684\uff0c\u90a3\u4e48\u81f3\u5c11\u6709\u4e24\u4e2a\u533a\u95f4\u7684\u5e76\u96c6\u662f\u4e00\u4e2a\u7ebf\u6bb5\u6811\u4e0a\u7ef4\u62a4\u7684\u5927\u533a\u95f4\uff0c\u90a3\u4e48\u5b9e\u9645\u8bbf\u95ee\u5230\u8fd9\u4e2a\u5927\u533a\u95f4\u7684\u65f6\u5019\u5c31\u5e94\u8be5\u8fd4\u56de\u4e86\u3002 \u7136\u540e\u5c31\u53ef\u4ee5\u8bc1\u4f2a\u4e86\u3002 \u90a3\u4e48\u56e0\u4e3a\u7ebf\u6bb5\u6811\u7684\u6df1\u5ea6\u662f \\(O(\\log n)\\) \u7ea7\u522b\u7684\uff0c\u6240\u4ee5\u8fd9\u4e2a\u7684\u590d\u6742\u5ea6\u662f \\(O(\\log n)\\) \u7684\uff0c\u5e26\u4e00\u4e2a\u56db\u500d\u5e38\u6570\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 i64 query_sum ( int p , int l , int r ) { i64 res = 0 ; if ( l <= t [ p ]. l && t [ p ]. r <= r ) return t [ p ]. dat_sum ; int mid = ( t [ p ]. l + t [ p ]. r ) >> 1 ; if ( l <= mid ) res += query_sum ( p << 1 , l , r ); if ( r > mid ) res += query_sum ( p << 1 | 1 , l , r ); return res ; } i64 query_min ( int p , int l , int r ) { i64 res = inf ; if ( l <= t [ p ]. l && t [ p ]. r <= r ) return t [ p ]. dat_min ; int mid = ( t [ p ]. l + t [ p ]. r ) >> 1 ; if ( l <= mid ) res = min ( res , query_sum ( p << 1 , l , r )); if ( r > mid ) res = min ( res , query_sum ( p << 1 | 1 , l , r )); return res ; } \u7b54\u6848\u6709\u53ef\u80fd\u8981\u4ece\u4e24\u8fb9\u4e00\u8d77\u53d6\u8fc7\u6765\uff0c\u6240\u4ee5\u4e5f\u80fd\u8bc1\u660e\u8fd0\u7b97\u9700\u8981\u6ee1\u8db3\u7ed3\u5408\u5f8b\u3002 \u5ef6\u8fdf\u6807\u8bb0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8003\u8651\u5982\u679c\u533a\u95f4\u52a0\u533a\u95f4\u548c\u600e\u4e48\u529e\u3002 \u663e\u7136\u5982\u679c\u76f4\u63a5\u66b4\u529b\u9012\u5f52\u5230\u533a\u95f4\u91cc\u7684\u6bcf\u4e2a\u6570\u5bf9\u5e94\u7684\u53f6\u5b50\u8282\u70b9\u7136\u540e\u5411\u4e0a\u66f4\u65b0\uff0c\u590d\u6742\u5ea6\u663e\u7136\u4e0d\u80fd\u63a5\u53d7\uff0c\u5355\u6b21\u64cd\u4f5c\u5c31\u662f \\(O(n \\log n)\\) \u7684\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u6709\u7684\u65f6\u5019\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u9012\u5f52\u5230\u53f6\u5b50\u8282\u70b9\uff0c\u7c7b\u4f3c\u533a\u95f4\u67e5\u8be2\u7684\u90a3\u4e2a\u5c0f\u526a\u679d\uff0c\u6211\u4eec\u5982\u679c\u9012\u5f52\u5230\u4e00\u4e2a\u88ab\u8be2\u95ee\u533a\u95f4\u5b8c\u6574\u5305\u542b\u7684\u8282\u70b9\uff0c\u76f4\u63a5\u5728\u4e0a\u9762\u6253\u4e00\u4e2a\u201c\u6807\u8bb0\u201d\uff0c\u8868\u793a\u6211\u6446\u70c2\u4e86\uff0c\u4e0d\u5f80\u4e0b\u66f4\u65b0\u4e86\uff0c\u5148\u7ed9\u513f\u5b50\u8282\u70b9\u6b20\u7740\u8fd9\u4e2a\u66f4\u65b0\uff0c\u7b49\u4ee5\u540e\u9700\u8981\u7528\u5230\u7684\u65f6\u5019\u518d\u628a\u6807\u8bb0 \\(O(1)\\) \u4e0b\u653e\u7ed9\u513f\u5b50\u3002 \u5176\u672c\u8d28\u662f\uff0c\u6211\u5982\u679c\u8981\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\u8fdb\u884c\u66f4\u65b0\uff0c\u6211\u9996\u5148\u8981\u7528\u5b83\u7236\u4eb2\u7684 tag \u66f4\u65b0\u5b83\u7684\u6743\u503c\u518d\u8003\u8651\u5bf9\u4ed6\u8fdb\u884c\u66f4\u65b0\u3002 \u5148\u628a\u5b83\u7236\u4eb2\u8282\u70b9\u7684 tag \u5168\u90e8 pushdown \u4e0b\u6765\uff08\u5229\u7528\u7ed3\u5408\u5f8b\uff09\uff0c\u518d\u628a\u65b0\u7684 tag \uff08\u5b83\u5bf9\u4e8e\u5b83\u7684\u513f\u5b50\u7684\uff09\u7528\u7ed3\u5408\u5f8b\u4e5f\u6253\u5230\u5b83\u8eab\u4e0a\uff0c\u3002 \u8fd9\u4f53\u73b0\u7684\u5c31\u662f\u4e00\u4e2a \u201c\u65f6\u95f4\u4e0a\u7684\u7ed3\u5408\u5f8b\u201d\uff0c\u6211\u662f\u5148\u6709\u4e86\u7236\u4eb2\u8282\u70b9\u6b20\u7684\u66f4\u65b0\uff0c\u518d\u6709\u4e86\u73b0\u5728\u65b0\u6765\u7684\u66f4\u65b0\uff0c\u6211\u7684 tag \u4e5f\u662f\uff0c\u5148\u6709\u4e86\u7236\u4eb2\u6b20\u5b50\u6811\u4e0b\u653e\u5230\u6211\u8fd9\u91cc\u7684 tag\uff0c\u518d\u6709\u6211\u73b0\u5728\u6b20\u6211\u7684\u513f\u5b50\uff08\u5b50\u6811\uff09\u7684 tag\u3002 \u7c7b\u4f3c\u4e0a\u9762\u533a\u95f4\u8be2\u95ee\u7684\u590d\u6742\u5ea6\u8bc1\u660e\uff0c\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e2a\u64cd\u4f5c\u662f\u5355\u6b21 \\(O(n \\log n)\\) \u7684\u3002 Code 1 2 3 4 5 6 7 8 9 10 int len ( int p ) { return t [ p ]. r - t [ p ]. l + 1 ; } void pushdown ( int p ) { if ( t [ p ]. add ) { t [ p << 1 ]. dat += ( t [ p ]. add * len ( p << 1 )); t [ p << 1 | 1 ]. dat += ( t [ p ]. add * len ( p << 1 | 1 )); t [ p << 1 ]. minv += t [ p ]. add , t [ p << 1 | 1 ]. minv += t [ p ]. add ; // \u6c34\u4f4d\u7ebf\u539f\u7406 t [ p << 1 ]. add += t [ p ]. add , t [ p << 1 | 1 ]. add += t [ p ]. add ; t [ p ]. add = 0 ; // \u8bbe\u7f6e\u4e3a Z \u5173\u4e8e\u52a0\u6cd5\u7684\u5e7a\u5143 0. } } Luogu3372 \u7ebf\u6bb5\u68111 \u533a\u95f4\u52a0\u533a\u95f4\u6c42\u548c\uff0c \\(1\\le n \\le 10^5, 1\\le a_i \\le 2^{63} - 1\\) \u3002 \u5c31\u662f\u7ebf\u6bb5\u6811\u7684\u677f\u5b50\u9898\uff0c\u5199\u4e00\u4e2a\u6709 lazytag \u7684\u7ebf\u6bb5\u6811\u5373\u53ef\u3002 \u6ce8\u610f\u5f00 long long \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; using i64 = long long ; const int si = 1e5 + 10 ; int n , m ; i64 a [ si ]; class Segment_Tree { private : struct Node { int l , r ; i64 dat , tag ; } t [ si << 2 ]; inline void pushup ( int p ) { t [ p ]. dat = t [ p << 1 ]. dat + t [ p << 1 | 1 ]. dat ; } inline void pushdown ( int p ) { if ( ! t [ p ]. tag ) return ; t [ p << 1 ]. dat += 1l l * t [ p ]. tag * ( t [ p << 1 ]. r - t [ p << 1 ]. l + 1 ); t [ p << 1 | 1 ]. dat += 1l l * t [ p ]. tag * ( t [ p << 1 | 1 ]. r - t [ p << 1 | 1 ]. l + 1 ); t [ p << 1 ]. tag += t [ p ]. tag , t [ p << 1 | 1 ]. tag += t [ p ]. tag , t [ p ]. tag = 0 ; } public : void build ( int p , int l , int r ) { t [ p ]. l = l , t [ p ]. r = r , t [ p ]. tag = 0 ; if ( l == r ) { t [ p ]. dat = a [ l ]; return ; } int mid = ( l + r ) >> 1 ; build ( p << 1 , l , mid ), build ( p << 1 | 1 , mid + 1 , r ); pushup ( p ); return ; } void update ( int p , int l , int r , int v ) { if ( l <= t [ p ]. l && t [ p ]. r <= r ) { t [ p ]. dat += v * ( t [ p ]. r - t [ p ]. l + 1 ); t [ p ]. tag += v ; return ; } pushdown ( p ); // \u6ca1\u5230\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u9a6c\u4e0a\u8981\u9012\u5f52\u5b50\u6811\u4e86\uff0c\u4e5f\u8981 pushdown\u3002 int mid = ( t [ p ]. l + t [ p ]. r ) >> 1 ; if ( l <= mid ) update ( p << 1 , l , r , v ); if ( r > mid ) update ( p << 1 | 1 , l , r , v ); pushup ( p ); return ; } i64 query ( int p , int l , int r ) { i64 res = 0 ; if ( l <= t [ p ]. l && t [ p ]. r <= r ) return t [ p ]. dat ; pushdown ( p ); // \u67e5\u8be2\u8981\u67e5\u503c\uff0c\u9700\u8981\u5b50\u6811\u4fe1\u606f\uff0c\u5fc5\u7136\u8981 pushdown\u3002 int mid = ( t [ p ]. l + t [ p ]. r ) >> 1 ; if ( l <= mid ) res += query ( p << 1 , l , r ); if ( r > mid ) res += query ( p << 1 | 1 , l , r ); return res ; } }; Segment_Tree tr ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> m ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; tr . build ( 1 , 1 , n ); for ( int i = 1 ; i <= m ; ++ i ) { int opt , l , r ; i64 v ; cin >> opt ; if ( opt == 1 ) { cin >> l >> r >> v ; tr . update ( 1 , l , r , v ); } else { cin >> l >> r ; cout << tr . query ( 1 , l , r ) << endl ; } } return 0 ; } \u8fd9\u53ea\u662f\u4e00\u4e2a tag \u7684\u60c5\u51b5\uff0c\u8fd8\u53ef\u80fd\u6709\u591a\u4e2a tag\uff0c\u601d\u8003\u4e00\u4e0b\u600e\u4e48\u5f04\u3002 \u4e00\u5b9a\u8981\u6ce8\u610f\u5230\u4e00\u4e2a\u4e8b\u60c5\uff0c\u7ebf\u6bb5\u6811\u672c\u8d28\u4e0a\u662f\u5728\u7ef4\u62a4\u4e00\u4e2a\u6ee1\u8db3\u5e7a\u534a\u7fa4\u6027\u8d28\u7684\u4fe1\u606f\uff0c \u5982\u679c\u6211\u4eec\u60f3\u8981\u6253\u591a\u4e2a tag\uff0c\u8fd9\u4e9b tag \u9996\u5148\u5c31\u5fc5\u987b\u5728\u65f6\u95f4\u8f74\u4e0a\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff08\u53ef\u4ee5\u5408\u5e76\uff09\uff0c\u539f\u56e0\u4e0b\u6587\u4f1a\u63d0\u5230\u3002 \u6bd4\u5982\u6211\u4eec\u5148\u6253\u4e86\u4e00\u4e2a\u8fd0\u7b97 \\(\\oplus\\) \u7684\u6807\u8bb0 \\(x_0\\) \u7136\u540e \u6253\u4e86\u4e00\u4e2a \\(\\otimes\\) \u7684\u6807\u8bb0 \\(y_0\\) \uff0c\u5f53\u524d\u8282\u70b9\u5df2\u6709\u7684 tag \u72b6\u6001\u8bb0\u5f55\u4e3a \\((x_0, y_0)\\) \u3002 \u7136\u540e\u6211\u4eec\u53c8\u8fdb\u884c\u4e86\u4e00\u6b21 \\(\\oplus\\) \u7684\u6807\u8bb0 \\(x_1\\) \uff0c \u518d \u8fdb\u884c\u4e86\u4e00\u6b21 \\(\\otimes\\) \u7684\u64cd\u4f5c \\(y_1\\) \uff0c\u8bb0\u5f55\u4e3a \\((x_1,y_1)\\) 1 \u3002 \u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u77e5\u9053\uff0c\u600e\u4e48\u6837\u5408\u5e76 \\((x_0, y_0), (x_1, y_1)\\) \uff0c\u4e5f\u5c31\u662f\u9700\u8981\u77e5\u9053 \\((x_0, y_0) \\circ (x_1, y_1) = (x_2, y_2)\\) \u4e2d\u7684 \\(x_2, y_2\\) \u5206\u522b\u662f\u4ec0\u4e48\uff0c\u4e14\u6ee1\u8db3\uff1a\u76f4\u63a5\u8003\u8651 \\((x_2, y_2)\\) \u5bf9\u4fe1\u606f\u7684\u4f5c\u7528\u7b49\u4ef7\u4e8e\u8003\u8651\u5148 \\((x_0, y_0)\\) \u5bf9\u4fe1\u606f\u7684\u4f5c\u7528\uff0c\u7136\u540e\u518d\u8003\u8651 \\((x_1, y_1)\\) \u5bf9\u4fe1\u606f\u7684\u4f5c\u7528\uff08\u6807\u8bb0 \u4e0d\u9700\u8981 \u6ee1\u8db3\u4ea4\u6362\u5f8b\uff09\u3002 \\(\\circ\\) \u8868\u793a\u590d\u5408\uff08\u5408\u5e76\uff09\u8fd9\u4e24\u4e2a Tag\uff0c\u8fd9\u91cc\u7684\u4e0b\u6807\u8868\u793a\u7684\u662f\u65f6\u95f4\u8f74\u4e0a\u7684\u4f4d\u7f6e\u3002 \u6240\u4ee5\u5176\u5b9e tag \u8981\u5728\u65f6\u95f4\u8f74\u4e0a\u6ee1\u8db3\u7ed3\u5408\u5f8b\u7684\u539f\u56e0\u5c31\u662f\uff0c\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u4e0b\u653e\u4e86\u4e00\u4e2a\u6807\u8bb0 \\(t_3\\) \uff0c\u4e4b\u524d\u6709\u4e00\u4e2a\u6807\u8bb0 \\(t_2\\) \u5728\u5f53\u524d\u8282\u70b9\u4e0a\u3002 \u6b64\u65f6 \\(t_3 \\circ t_2\\) \u4e0d\u4f1a\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u4f46\u662f \\(t_2\\) \u53ef\u80fd\u5728\u4e4b\u524d\u7684\u8fc7\u7a0b\u4e2d\u5df2\u7ecf\u548c\u524d\u9762\u7684\u6807\u8bb0 \\(t_1\\) \u5408\u5e76\u4e86\uff0c\u800c \\(t_1\\) \u53c8\u6709\u53ef\u80fd\u548c \\(t_0\\) \u5408\u5e76\u3002 \u6240\u4ee5\u5982\u679c\u4e0d\u6ee1\u8db3\u65f6\u95f4\u8f74\u4e0a\u7684\u7ed3\u5408\u5f8b\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u4f1a\u6709 \\((t_2 \\circ t_1) \\circ t_0 \\not= t_2 \\circ (t_1 \\circ t_0)\\) \uff0c\u8868\u73b0\u51fa\u6765\u7684\u7ed3\u679c\u5c31\u662f\uff0c\u5bf9\u4fe1\u606f\u7684\u4f5c\u7528\u6548\u679c\u4e0d\u7b26\u5408\u9884\u671f\uff0c\u4e0d\u80fd\u8fbe\u5230\u8981\u6c42\u3002 \u663e\u7136\u4e24\u4e2a tag \u6ca1\u6709\u4ec0\u4e48\u5173\u7cfb\u7684\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u53ea\u8003\u8651 \\((x_0, y_0)\\) \uff0c\u8fd9\u4e2a\u6bd4\u8f83 ez\uff0c\u4e0d\u8fc7\u5982\u679c\u4e24\u4e2a tag \u4e4b\u95f4\u76f8\u4e92\u6709\u5f71\u54cd\uff0c\u5c31\u9700\u8981\u8003\u8651 \\((x_0, y_0)\\) \u548c \\((y_0, x_0)\\) \u5230\u5e95\u5e94\u8be5\u9009\u54ea\u4e00\u4e2a\uff08\u8981\u5224\u5b9a\u5148\u505a\u4ec0\u4e48\u8fd0\u7b97\uff09\uff0c\u9009\u62e9\u4f9d\u636e\u662f\u5408\u5e76\u524d\u540e\u7684\u6807\u8bb0\u7684\u987a\u5e8f\u80fd\u5426\u7edf\u4e00\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u533a\u95f4\u52a0\u533a\u95f4\u4e58\u533a\u95f4\u6c42\u548c\u3002 \u548c\u7ebf\u6bb5\u6811\u4e00\u5dee\u4e0d\u591a\uff0c\u53ea\u4e0d\u8fc7\u591a\u4e86\u4e00\u4e2a\u9700\u8981\u7ef4\u62a4\u7684\u8fd0\u7b97\uff1a\u4e58\u6cd5\u3002 \u6240\u4ee5\u8fd9\u91cc\u5e94\u5f53\u8003\u8651\u7684\u662f\u600e\u4e48\u628a\u4e24\u4e2a\u5404\u81ea\u5c01\u95ed\u53c8\u76f8\u4e92\u6709\u5f71\u54cd\u7684\u4fe1\u606f\u590d\u5408\u8d77\u6765\u7ef4\u62a4\u3002 \u8003\u8651\u5982\u679c\u53ea\u6709\u533a\u95f4\u52a0\u533a\u95f4\u6c42\u548c\uff0ctag \u8bb0\u5f55\u7684\u5c31\u662f\u513f\u5b50\u91cc\u9762\u6240\u6709\u6570\u8981\u52a0\u591a\u5c11\u3002 \u5982\u679c\u5728\u6765\u4e00\u4e2a\u533a\u95f4\u4e58\u600e\u4e48\u529e\uff0c\u5c31\u8003\u8651\u5bf9\u8fd9\u4e24\u4e2a\u8fd0\u7b97\u590d\u5408\u3002 \u6bd4\u5982\u6211\u5148\u4e58 \\(x\\) \u7136\u540e\u52a0\u4e0a\u4e00\u4e2a \\(y\\) \uff0c\u513f\u5b50\u8282\u70b9\u91cc\u7684\u6bcf\u4e2a\u6570 \\(value\\) \u5c31\u5e94\u5f53\u53d8\u6210 \\(value \\times x + y\\) \u3002 \u7136\u540e\u5982\u679c\u7ee7\u7eed\u590d\u5408\u5c31\u662f \\((((value \\times x) + y) \\times z) + a\\dots\\) \u8fd9\u6837\uff08\u5148\u52a0\u540e\u4e58\u4e5f\u5df2\u7ecf\u88ab\u5305\u542b\u5728\u60c5\u51b5\u91cc\u9762\u4e86\uff09\u3002 \u56e0\u4e3a\u6211\u4eec\u6ca1\u6cd5\u77e5\u9053\u5177\u4f53\u987a\u5e8f\uff0c\u6709\u53ef\u80fd\u662f \\(++\\times+\\times\\times+++\\) \u8fd9\u79cd\u7684\uff0c\u4f60\u6bcf\u6b21\u8f6c\u6362\u90fd\u9700\u8981\u65b0\u5f00\u4e00\u4e2a tag \u8bb0\u5f55\u3002 \u6211\u4eec\u80af\u5b9a\u4e0d\u60f3\u8ba9\u6bcf\u4e2a\u8282\u70b9\u7684 tag \u90fd\u6709\u5de8\u5927\u591a\u4e2a\uff0c\u6211\u4eec\u5e0c\u671b\u5c31\u53ea\u6709\u4e24\u4e2a\uff0c\u4e5f\u5c31\u610f\u5473\u7740\u6211\u4eec\u53ea\u5e0c\u671b\u4e58\u9664\u6cd5\u53d8\u6362\u4e00\u6b21\uff0c\u5373\u628a\u4e58\u90fd\u4e22\u5230\u4e00\u8d77\uff0c\u52a0\u90fd\u4e22\u5230\u4e00\u8d77\u3002 \u6240\u4ee5\u89c2\u5bdf\u4e00\u4e0b\u8fd9\u4e2a\u5f0f\u5b50\u5f62\u5f0f\uff0c\u53d1\u73b0\u53ef\u4ee5\u4e58\u6cd5\u5206\u914d\u5f8b\uff0c\u6211\u4eec\u5728\u533a\u95f4\u4e58\u6cd5\u6253\u6807\u8bb0\u7684\u65f6\u5019\u7ed9\u5148\u52a0\u4e0a\u7684 add \u4e58\u4e0a\u540e\u9762\u7684 mul\uff0c\u7136\u540e pushdown \u7684\u65f6\u5019 add \u5c31\u80fd\u5355\u72ec\u62c9\u51fa\u6765\u52a0\u4e86\u3002 \u4e0b\u653e\u6807\u8bb0\u7684\u65f6\u5019 add \u9700\u8981\u5148\u4e58\u4e0a\u7236\u4eb2\u8282\u70b9\u7684 mul\uff0c\u7136\u540e\u518d\u52a0\u4e0a\u7236\u4eb2\u8282\u70b9\u7684 add\uff0c\u56e0\u4e3a\u7236\u4eb2\u8282\u70b9\u7684 add \u5728\u533a\u95f4\u4e58\u6253\u6807\u8bb0\u7684\u65f6\u5019\u5df2\u7ecf\u4e58\u8fc7 mul \u4e86\uff0c\u76f4\u63a5\u63d0\u51fa\u6765\u52a0\u5c31\u884c\u4e86\u3002 \u66f4\u5f62\u5f0f\u5316\u7684\u8bf4\uff0c\u6211\u4eec\u73b0\u5728\u8bb0\u5f55\u4e86\u4e24\u4e2a tag\uff0c\u4e00\u4e2a\u52a0\u6cd5\uff0c\u4e00\u4e2a\u4e58\u6cd5\uff0c\u6211\u4eec\u8bb0\u4e3a \\((add_i, mul_i)\\) \u3002 \u5047\u8bbe\u5f53\u524d\u5df2\u7ecf\u5b58\u5728\u5bf9\u4e8e\u5f53\u524d\u8282\u70b9\u4f5c\u7528\u7684\u4e00\u4e2a\u6807\u8bb0 \\((add_0, mul_0)\\) \uff0c\u73b0\u5728\u65b0\u6765\u4e86\u4e00\u4e2a\u6807\u8bb0 \\((add_1, mul_1)\\) \uff0c\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u6c42\u51fa \\((add_0, mul_0)\\circ (add_1, mul_1)\\) \uff0c\u5e76\u4e14\u8981\u89c4\u5b9a\u597d\u662f\u5148 add \u8fd8\u662f\u5148 mul\u3002 \u53ef\u4ee5\u53d1\u73b0\u8fd9\u91cc\u662f\u5728\u5bf9\u7740\u6574\u4f53\u6253\u6807\u8bb0\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u8003\u8651\u5f53\u524d\u533a\u95f4\u7ef4\u62a4\u7684\u503c\u5728\u52a0\u5165\u65b0\u7684\u6807\u8bb0\u4e4b\u540e\u201c\u600e\u4e48\u53d8\u5316\u201d\u4e86\uff0c\u5e76\u8003\u8651\u600e\u4e48\u5408\u5e76\u539f\u6709\u6807\u8bb0\u548c\u65b0\u52a0\u5165\u7684\u6807\u8bb0\u3002 \u5148\u5047\u8bbe\u5148\u52a0\u540e\u4e58\uff0c\u663e\u7136\u6709\uff1a \\[ \\begin{aligned} dat &= ((dat + add_0) \\times mul_0 + add_1) \\times mul_1\\\\ &= (dat \\times mul_0 + add_0 \\times mul_0 + add_1) \\times mul_1\\\\ &= (dat \\times mul_0 \\times mul_1) + (add_0 \\times mul_0 \\times mul_1) + (add_1 \\times mul_1) \\end{aligned} \\] \u597d\u50cf\u6ca1\u6cd5\u628a\u5408\u5e76\u540e\u7684\u6807\u8bb0\u4e5f\u7edf\u4e00\u987a\u5e8f\uff08\u4e0d\u80fd\u5199\u6210 \\((dat + a)\\times b\\) \u7684\u5f62\u5f0f\uff09\u3002 \u770b\u770b \\((mul_0, add_0)\\) \u7684\u987a\u5e8f\u5982\u4f55\u3002 \\[ \\begin{aligned} dat &= (dat \\times mul_0 + add_0) \\times mul_1 + add_1\\\\ &= (dat \\times mul_0 \\times mul_1) + (add_0 \\times mul_1 + add_1)\\\\ &= dat \\times (mul_0 \\times mul_1) + (add_0 \\times mul_1 + add_1) \\end{aligned} \\] \u7136\u540e\u53ef\u4ee5\u5f88\u6109\u5feb\u7684\u53d1\u73b0\u80fd\u628a\u5408\u5e76\u540e\u7684\u6807\u8bb0\u7684\u987a\u5e8f\u548c\u5df2\u6709\u7684\u6807\u8bb0\u7684\u987a\u5e8f\u7edf\u4e00\u3002 \u6240\u4ee5\u53ef\u4ee5\u5f97\u5230\uff1a \\((mul_0, add_0) \\circ (mul_1, add_1) = (mul_0 \\times mul_1, add_0 \\times mul_1 + add_1)\\) \u3002 \u5177\u4f53\u5b9e\u73b0\u7684\u65f6\u5019\u5c31\u53ea\u9700\u8981\uff1a\u5bf9\u4e8e\u4e58\u6cd5\u6807\u8bb0\u6211\u76f4\u63a5\u4e58\u4e86\u4e0b\u653e\uff0c\u6253\u4e58\u6cd5\u6807\u8bb0\u7684\u65f6\u5019\u987a\u4fbf\u7ed9\u52a0\u6cd5\u4e58\u4e00\u4e0b\uff0c\u5bf9\u4e8e\u52a0\u6cd5\u6807\u8bb0\u6211\u76f4\u63a5\u5148\u4e58\u4e0a\u7236\u4eb2\u8282\u70b9\u7ed9\u7684 mul\uff0c\u7136\u540e\u518d\u52a0\u4e0a\u7236\u4eb2\u8282\u70b9\u7ed9\u7684 add\uff08\u8fd9\u4e2a\u5728\u4e4b\u524d\u5df2\u7ecf\u4e58\u8fc7\u4e86\uff0c\u4e58\u6cd5\u5206\u914d\u5f8b\uff09\u3002 \u5f88\u663e\u7136\u8fd9\u4e2a\u5bf9\u4e8e\u56db\u79cd\u52a0\u6cd5\u4e58\u6cd5\u7684\u7ec4\u5408\u987a\u5e8f\u90fd\u6ee1\u8db3\uff08\u68c0\u67e5\u8fd9\u4e2a tag \u5bf9\u4e8e\u7ebf\u6bb5\u6811\u4fe1\u606f\u7684\u4f5c\u7528\u80fd\u5426\u5904\u7406\uff09\u3002 \u52a0\u6cd5\u4e4b\u540e\u52a0\u6cd5\u5c31\u4e0d\u8003\u8651 mul \u7684\u5904\u7406\uff0c\u663e\u7136\u6210\u7acb\u3002\u4e58\u6cd5\u4e4b\u540e\u4e58\u6cd5\u540c\u7406\u3002 \u5148\u4e58\u540e\u52a0\u5c31\u662f\u6211\u4eec\u89c4\u5b9a\u7684\u5f62\u5f0f\uff0c\u4e8e\u662f\u770b\u770b\u5148\u52a0\u540e\u4e58\u7684\u60c5\u51b5\u80fd\u4e0d\u80fd\u6ee1\u8db3\uff1a\u53ef\u4ee5\u8003\u8651\u6700\u65e9\u5b58\u5728\u7684\u6807\u8bb0\u662f \\((1, 0)\\) \uff08\u5e7a\u5143\uff09\uff0c\u7136\u540e\u518d\u6253\u4e86\u4e00\u4e2a\u6807\u8bb0 \\((1, add)\\) \uff0c\u518d\u6253\u4e86\u4e00\u4e2a\u6807\u8bb0 \\((mul, 0)\\) \uff0c\u5c55\u5f00\u5f0f\u5b50\u4e4b\u540e\u663e\u7136\u6210\u7acb\u3002 \u6240\u4ee5\u8fd9\u79cd tag \u65b9\u5f0f\u662f\u53ef\u884c\u7684\u3002 Luogu3373 \u7ebf\u6bb5\u68112 \u533a\u95f4\u52a0\u533a\u95f4\u4e58\uff0c\u8be2\u95ee\u533a\u95f4\u548c\u5bf9 \\(p\\) \u53d6\u6a21\u3002 \\(1\\le n, q\\le 10^5\\) \u3002 \u5c31\u662f\u521a\u521a\u5df2\u7ecf\u8bf4\u4e86\u7684\u95ee\u9898\uff0c\u8fd9\u91cc\u76f4\u63a5\u7ed9\u51fa\u5b9e\u73b0\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; // const i64 mod = 998244353ll; int mod ; int n , m ; i64 a [ si ]; class Segment_Tree { private : struct Node { int l , r ; i64 dat , add , mul ; } t [ si << 2 ]; inline void pushup ( int p ) { t [ p ]. dat = ( t [ p << 1 ]. dat + t [ p << 1 | 1 ]. dat ) % mod ; } inline void pushdown ( int p ) { if ( ! t [ p ]. add && t [ p ]. mul == 1 ) return ; t [ p << 1 ]. dat = ( t [ p << 1 ]. dat * t [ p ]. mul + t [ p ]. add * ( t [ p << 1 ]. r - t [ p << 1 ]. l + 1 )) % mod ; t [ p << 1 | 1 ]. dat = ( t [ p << 1 | 1 ]. dat * t [ p ]. mul + t [ p ]. add * ( t [ p << 1 | 1 ]. r - t [ p << 1 | 1 ]. l + 1 )) % mod ; t [ p << 1 ]. mul = ( t [ p << 1 ]. mul * t [ p ]. mul ) % mod ; t [ p << 1 | 1 ]. mul = ( t [ p << 1 | 1 ]. mul * t [ p ]. mul ) % mod ; t [ p << 1 ]. add = ( t [ p << 1 ]. add * t [ p ]. mul + t [ p ]. add ) % mod ; t [ p << 1 | 1 ]. add = ( t [ p << 1 | 1 ]. add * t [ p ]. mul + t [ p ]. add ) % mod ; t [ p ]. add = 0 , t [ p ]. mul = 1 ; } public : void build ( int p , int l , int r ) { t [ p ]. l = l , t [ p ]. r = r , t [ p ]. mul = 1l l , t [ p ]. add = 0l l ; if ( l == r ) { t [ p ]. dat = a [ l ] % mod ; return ; } int mid = ( l + r ) >> 1 ; build ( p << 1 , l , mid ), build ( p << 1 | 1 , mid + 1 , r ); pushup ( p ); return ; } void update_add ( int p , int l , int r , i64 v ) { if ( l <= t [ p ]. l && t [ p ]. r <= r ) { t [ p ]. add = ( t [ p ]. add + v ) % mod ; t [ p ]. dat = ( t [ p ]. dat + v * ( t [ p ]. r - t [ p ]. l + 1 )) % mod ; return ; } pushdown ( p ); int mid = ( t [ p ]. l + t [ p ]. r ) >> 1 ; if ( l <= mid ) update_add ( p << 1 , l , r , v ); if ( r > mid ) update_add ( p << 1 | 1 , l , r , v ); pushup ( p ); return ; } void update_mul ( int p , int l , int r , i64 v ) { if ( l <= t [ p ]. l && t [ p ]. r <= r ) { t [ p ]. add = ( t [ p ]. add * v ) % mod ; t [ p ]. mul = ( t [ p ]. mul * v ) % mod ; t [ p ]. dat = ( t [ p ]. dat * v ) % mod ; return ; } pushdown ( p ); int mid = ( t [ p ]. l + t [ p ]. r ) >> 1 ; if ( l <= mid ) update_mul ( p << 1 , l , r , v ); if ( r > mid ) update_mul ( p << 1 | 1 , l , r , v ); pushup ( p ); return ; } i64 query ( int p , int l , int r ) { i64 res = 0l l ; if ( l <= t [ p ]. l && t [ p ]. r <= r ) return t [ p ]. dat % mod ; pushdown ( p ); int mid = ( t [ p ]. l + t [ p ]. r ) >> 1 ; if ( l <= mid ) res = ( res + query ( p << 1 , l , r )) % mod ; if ( r > mid ) res = ( res + query ( p << 1 | 1 , l , r )) % mod ; return res ; } }; Segment_Tree tr ; // \u4e0d\u8981\u5230\u4e3b\u51fd\u6570\u91cc\u5b9a\u4e49\uff0c\u5bb9\u6613\u7206\u6808\u3002 int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> m >> mod ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; tr . build ( 1 , 1 , n ); for ( int i = 1 ; i <= m ; ++ i ) { int opt , l , r ; cin >> opt ; if ( opt == 2 ) { i64 v ; cin >> l >> r >> v ; tr . update_add ( 1 , l , r , v ); } if ( opt == 1 ) { i64 v ; cin >> l >> r >> v ; tr . update_mul ( 1 , l , r , v ); } if ( opt == 3 ) { cin >> l >> r ; cout << tr . query ( 1 , l , r ) << endl ; } } return 0 ; } \u603b\u7ed3\u4e00\u4e0b\uff0c\u5e26 lazy \u7684\u7ebf\u6bb5\u6811\u9898\u4e00\u822c\u5c31\u8fd9\u51e0\u6b65\uff1a \u5982\u679c\u7ed9\u4e00\u4e2a\u533a\u95f4\u6574\u4f53\u6253\u4e0a\u6807\u8bb0\uff0c\u80fd\u5426\u786e\u5b9a\u533a\u95f4\u7ef4\u62a4\u7684\u503c\u600e\u4e48\u53d8\u5316 \u5982\u679c\u7ed9\u4e00\u4e2a\u533a\u95f4\u6574\u4f53\u6253\u4e0a\u6807\u8bb0\uff0c\u80fd\u5426\u786e\u5b9a tag \u600e\u4e48\u5408\u5e76\u3002 \u5f62\u5f0f\u5316\u7684\u8bf4\uff0c\u61d2\u6807\u8bb0\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u4fe1\u606f\u5e7a\u534a\u7fa4 \\((I, +)\\) \u548c\u5bf9\u4fe1\u606f\u7684\u4fee\u6539\u5e7a\u534a\u7fa4 \\((D, *)\\) \uff0c\u8981\u6c42 \\(D\\) \u5bf9 \\(I\\) \u7684\u4f5c\u7528\u6ee1\u8db3\u5206\u914d\u7387\u3002 ref\uff1a zhqwq \u7684\u535a\u5ba2 - \u6211 \u6839 \u672c \u4e0d \u4f1a \u7ebf \u6bb5 \u6811|\u7ebf\u6bb5\u6811\u518d\u5b66\u4e60\u7b14\u8bb0 Github - ATcoder Library Documents dwt \u54e5\u54e5\u7684\u535a\u5ba2\uff1a links \u7c89\u5154\u7684\u53cb\u60c5\u8bb2\u89e3\uff0c\u4ee5\u53ca\u90a3\u53e5 \u300c\uff1f\u4f60\u6839\u672c\u4e0d\u662f\u840c\u65b0\u300d \u52a8\u6001\u5f00\u70b9 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6b63\u5e38\u7684\u7ebf\u6bb5\u6811\u4e00\u822c\u90fd\u662f\u7528\u4e8c\u500d\u6807\u8bb0\u6cd5\u53bb\u6807\u8bb0\u513f\u5b50\u7684\u5e8f\u53f7\u3002 \u8fd9\u6837\u81f3\u5c11\u9700\u8981\u56db\u500d\u7a7a\u95f4\u624d\u4e0d\u4f1a\u51fa\u73b0 RE\u3002 \u4f46\u5728\u67d0\u4e9b\u7279\u6b8a\u7684\u60c5\u51b5\u4e0b\uff08\u6bd4\u5982\u540e\u9762\u7684\u6743\u503c\u7ebf\u6bb5\u6811\uff09\uff0c\u4f60\u9700\u8981\u7ef4\u62a4\u4e0b\u6807\u7684\u8303\u56f4\u53ef\u80fd\u975e\u5e38\u5927\uff0c\u5982\u679c\u771f\u7684\u8981\u5168\u90e8\u5efa\u6811\u5efa\u51fa\u6765\uff0c\u7a7a\u95f4\u5c31\u7206\u4e86\u3002 \u6b64\u65f6\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a\u7c7b\u4f3c\u7ebf\u6bb5\u6811\u61d2\u6807\u8bb0\u7684\u601d\u60f3\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u9700\u8981\u4f7f\u7528\uff0c\u90a3\u4e48\u6211\u4eec\u624d\u5efa\u7acb\u8fd9\u4e2a\u8282\u70b9\uff0c\u53cd\u4e4b\u5c31\u4e0d\u7528\u3002 \u4ece\u5b9e\u73b0\u4e0a\u6765\u8bb2\uff0c\u5c31\u662f\u521d\u59cb\u7684\u65f6\u5019\u53ea\u5efa\u7acb\u4e00\u4e2a\u6839\u8282\u70b9\u4ee3\u8868\u6574\u4e2a\u533a\u95f4\u3002 \u5f53\u9012\u5f52\u8bbf\u95ee\u5230\u7684\u8282\u70b9\u4e3a\u7a7a\u65f6\uff0c\u624d\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\uff0c\u5e76\u7ed9\u4ed6\u4e00\u4e2a\u7f16\u53f7\u3002 \u6b64\u5904\u7f16\u53f7\u7684\u65b9\u5f0f\u4e0d\u540c\u4e8e\u539f\u6765\u7684\u4e8c\u500d\u6807\u8bb0\u6cd5\uff0c\u53ea\u9700\u8981\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\u7684\u7f16\u53f7\u5c31\u53ef\u4ee5\u4e86\u3002 \u6b63\u5e38\u5199\u6cd5\u662f\u628a\u4e00\u4e2a\u8282\u70b9\u7684\u533a\u95f4\u4fe1\u606f\u76f4\u63a5\u9644\u52a0\u5230\u8282\u70b9\u4e0a\u3002 \u5728\u8fd9\u91cc\u5c31\u76f4\u63a5\u4f5c\u4e3a\u51fd\u6570\u7684\u53c2\u6570\u4f20\u9012\u4e86\u3002 \u4e00\u822c\u7a7a\u95f4\u8981\u5f00\u5927\u4e00\u70b9\uff0c\u6bd4\u5982 \\(\\times 60\\) \u8fd9\u79cd\u3002 \u6700\u597d\u662f\u5148\u4f30\u7b97\u4e00\u4e0b\u7a7a\u95f4\u7136\u540e\u518d\u5f00\u3002 \u4e00\u4efd\u533a\u95f4\u52a0\u533a\u95f4\u4e58\u533a\u95f4\u6c42\u548c\u7ebf\u6bb5\u6811\u7684\u52a8\u6001\u5f00\u70b9\u5199\u6cd5\uff1a Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 #define ls t[p].lson #define rs t[p].rson class Segment_Tree { private : struct Node { int lson , rson ; i64 dat , add , mul ; // \u5fc5\u987b\u8981\u65b0\u5efa\u8282\u70b9\u65f6\u518d\u521d\u59cb\u5316\u3002 // \u5426\u5219\u7f16\u8bd1\u5668\u4f1a\u63d0\u524d\u5904\u7406\u8fd9\u4e9b\u8d4b\u503c // \u7136\u540e\u4f60\u7684 binary \u5c31\u4f1a\u5de8\u5927\u65e0\u6bd4 // \u662f\u4f1a\u51fa\u4e8b\u7684\u3002 } t [ si * 60 ]; // \u7a7a\u95f4\u4e00\u5b9a\u8981\u5f00\u591f\u3002 int cnt_node = 0 ; inline int Newnode () { cnt_node ++ ; t [ cnt_node ]. lson = t [ cnt_node ]. rson = 0 ; t [ cnt_node ]. dat = 0l l , t [ cnt_node ]. add = 0l l , t [ cnt_node ]. mul = 1l l ; return cnt_node ; } inline void pushup ( int p ) { t [ p ]. dat = t [ ls ]. dat + t [ rs ]. dat ; } // pushdown \u4e5f\u662f\u9700\u8981\u4f20\u53c2\u7684\u4e86\u3002 inline void pushdown ( int p , int l , int r ) { if ( ! t [ p ]. add && t [ p ]. mul == 1 ) return ; if ( ! ls ) ls = Newnode (); if ( ! rs ) rs = Newnode (); // \u8bb0\u5f97\u5728\u8fd9\u91cc\u4e5f\u8981\u52a8\u6001\u5f00\u70b9\u3002 int mid = ( l + r ) >> 1 ; t [ ls ]. dat = ( t [ ls ]. dat * t [ p ]. mul + t [ p ]. add * ( mid - l + 1 )) % mod ; t [ rs ]. dat = ( t [ rs ]. dat * t [ p ]. mul + t [ p ]. add * ( r - mid )) % mod ; t [ ls ]. add = ( t [ ls ]. add * t [ p ]. mul + t [ p ]. add ) % mod ; t [ rs ]. add = ( t [ rs ]. add * t [ p ]. mul + t [ p ]. add ) % mod ; t [ ls ]. mul = ( t [ ls ]. mul * t [ p ]. mul ) % mod ; t [ rs ]. mul = ( t [ rs ]. mul * t [ p ]. mul ) % mod ; t [ p ]. add = 0l l , t [ p ]. mul = 1l l ; } public : void update_add ( int & p , int l , int r , int ql , int qr , i64 v ) { if ( l > r ) return ; // \u9012\u5f52\u8fb9\u754c\u3002 if ( ! p ) p = Newnode (); if ( ql <= l && r <= qr ) { t [ p ]. add = ( t [ p ]. add + v ) % mod ; t [ p ]. dat = ( t [ p ]. dat + v * ( r - l + 1 )) % mod ; return ; } pushdown ( p , l , r ); int mid = ( l + r ) >> 1 ; if ( ql <= mid ) update_add ( ls , l , mid , ql , qr , v ); if ( qr > mid ) update_add ( rs , mid + 1 , r , ql , qr , v ); pushup ( p ); return ; } void update_mul ( int & p , int l , int r , int ql , int qr , i64 v ) { if ( l > r ) return ; if ( ! p ) p = Newnode (); if ( ql <= l && r <= qr ) { t [ p ]. dat = ( t [ p ]. dat * v ) % mod ; t [ p ]. add = ( t [ p ]. add * v ) % mod ; t [ p ]. mul = ( t [ p ]. mul * v ) % mod ; return ; } pushdown ( p , l , r ); int mid = ( l + r ) >> 1 ; if ( ql <= mid ) update_mul ( ls , l , mid , ql , qr , v ); if ( qr > mid ) update_mul ( rs , mid + 1 , r , ql , qr , v ); pushup ( p ); return ; } i64 query ( int p , int l , int r , int ql , int qr ) { if ( l > r ) return 0l l ; if ( ! p ) return 0l l ; // \u4e0d\u5b58\u5728\u76f4\u63a5\u8fd4\u56de 0 \u5373\u53ef\u3002 if ( ql <= l && r <= qr ) return t [ p ]. dat % mod ; pushdown ( p , l , r ); int mid = ( l + r ) >> 1 ; i64 res = 0l l ; if ( ql <= mid ) res = ( res + query ( ls , l , mid , ql , qr )) % mod ; if ( qr > mid ) res = ( res + query ( rs , mid + 1 , r , ql , qr )) % mod ; return res % mod ; } } tr ; \u6743\u503c\u7ebf\u6bb5\u6811 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5c5e\u4e8e\u4e00\u79cd\u53d8\u79cd\u7684\u7ebf\u6bb5\u6811\u3002 \u7ef4\u62a4\u7684\u4e0d\u662f\u5e8f\u5217\u800c\u662f\u5e8f\u5217\u7684\u503c\u57df\uff0c\u53ef\u4ee5\u628a\u5b83\u770b\u4f5c\u4e00\u4e2a\u52a8\u6001\u7684\u6876\uff08\u53f6\u5b50\u8282\u70b9\u5c31\u662f\u6876\uff09\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u7ef4\u62a4\u7684\u4e00\u6bb5 \\([l,r]\\) \u533a\u95f4\u7684\u4fe1\u606f\uff0c\u662f\u5e8f\u5217\u4e2d\u6743\u503c\u5728 \\([l,r]\\) \u4e2d\u7684\u6570\u7684\u4e2a\u6570\u3002 \u7528\u5b83\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e9b\u5e73\u8861\u6811\u7684\u529f\u80fd\u3002 \u56e0\u4e3a\u4e00\u822c\u7ef4\u62a4\u7684\u503c\u57df\u5f88\u5927\uff08 \\(10^9\\) \u8fd9\u79cd\uff09\uff0c\u6240\u4ee5\u53ef\u4ee5\u79bb\u6563\u5316\u6216\u8005\u52a8\u6001\u5f00\u70b9\uff0c\u4e2a\u4eba\u63a8\u8350\u540e\u4e00\u79cd\u3002 \u6b63\u5e38\u64cd\u4f5c \u03c8(\uff40\u2207\u00b4)\u03c8 \u548c\u6b63\u5e38\u7684\u52a8\u6001\u5f00\u70b9\u6ca1\u533a\u522b\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 using i64 = long long ; const int si = 1e5 + 10 ; int n , m ; // m \u662f\u503c\u57df\u3002 #define ls t[p].lson #define rs t[p].rson struct Node { i64 dat ; int lson , rson ; // \u8fd9\u91cc\u4e0d\u8981\u63d0\u524d\u8d4b\u503c\uff0cnewnode \u65f6\u518d\u8d4b\u503c\u3002 } t [ si * 60 ]; int tot = 0 , root = 0 ; inline int Newnode () { tot ++ ; t [ tot ]. dat = 0l l ; t [ tot ]. lson = 0 , t [ tot ]. rson = 0 ; return tot ; } inline void pushup ( int p ) { t [ p ]. dat = t [ ls ]. dat + t [ rs ]. dat ; } void modify ( int & p , int l , int r , int x , int v ) { if ( l > r ) return ; if ( ! p ) p = Newnode (); if ( l == r ) { t [ p ]. dat += v ; return ; } int mid = ( l + r ) >> 1 ; if ( x <= mid ) modify ( ls , l , mid , x , v ); else modify ( rs , mid + 1 , r , x , v ); pushup ( p ); return ; } i64 query ( int p , int l , int r , int ql , int qr ) { if ( l > r ) return 0l l ; if ( ! p ) return 0l l ; if ( ql <= l && r <= qr ) return t [ p ]. dat ; int mid = ( l + r ) >> 1 ; if ( ql <= mid ) modify ( ls , l , mid , ql , qr ); if ( qr > mid ) modify ( rs , mid + 1 , r , ql , qr ); pushup ( p ); return ; } \u63d2\u5165/\u5220\u9664 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e2a\u76f4\u63a5\u5728\u5bf9\u5e94\u4f4d\u7f6e\u5355\u70b9\u52a0\u51cf\u4e00\u5c31\u884c\u3002 Code 1 2 3 4 5 6 void insert ( int v ) { modify ( root , 1 , m , v , 1 ); } void remove ( int v ) { modify ( root , 1 , m , v , -1 ); } \u52a8\u6001\u5168\u5c40\u7b2c k \u5927\uff08\u7ebf\u6bb5\u6811\u4e8c\u5206\uff09 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u91cc\u8981\u7528\u5230\u7ebf\u6bb5\u6811\u4e8c\u5206\u7684\u601d\u60f3\u3002 \u5047\u8bbe\u8981\u67e5\u8be2\u5168\u5c40\u7b2c \\(k\\) \u5927\u3002 \u5f53\u524d\u9012\u5f52\u5230\u7684\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\u6743\u503c\u548c\u5206\u522b\u4e3a \\(ls, rs\\) \u3002 \u5982\u679c \\(k \\le ls\\) \uff0c\u90a3\u4e48\u9012\u5f52\u67e5\u5de6\u5b50\u6811\u3002 \u53cd\u4e4b\u4ee4 \\(k \\gets k - ls\\) \uff0c\u7136\u540e\u5728\u53f3\u5b50\u6811\u91cc\u67e5\u7b2c \\(k\\) \u5927\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u5c31\u662f\u5728\u4e8c\u5206\u7b2c \\(k\\) \u5927\u5e94\u5f53\u662f\u591a\u5c11\u3002 \u53ef\u4ee5\u628a\u6574\u9897\u7ebf\u6bb5\u6811\u201c\u538b\u5e73\u201d\u4e86\u6765\u770b\u3002 Code 1 2 3 4 5 6 7 8 9 i64 kth ( int p , int l , int r , int k ) { if ( l == r ) return t [ p ]. dat ; int mid = ( l + r ) >> 1 ; if ( t [ ls ]. dat >= k ) kth ( ls , l , mid , k ); else kth ( rs , mid + 1 , r , k - t [ ls ]. dat ); } \u67e5\u8be2\u6392\u540d \u03c8(\uff40\u2207\u00b4)\u03c8 \u67e5\u8be2\u67d0\u4e00\u4e2a\u6570 \\(x\\) \u7684\u6392\u540d\u3002 \u76f4\u63a5\u67e5\u7ebf\u6bb5\u6811\u4e0a \\([1,x)\\) \u7684\u548c\u7136\u540e\u52a0\u4e00\u5373\u53ef\u3002 Code 1 2 3 i64 rnk ( int v ) { return query ( root , 1 , m , 1 , v - 1 ) + 1 ; } \u67e5\u8be2\u524d\u9a71\u540e\u7ee7 \u03c8(\uff40\u2207\u00b4)\u03c8 \u524d\u9a71\u76f4\u63a5\u5148\u67e5\u8be2 \\(x\\) \u7684\u6392\u540d \\(rk\\) \uff0c\u7136\u540e\u67e5\u7b2c \\(rk - 1\\) \u5927\u5373\u53ef\u3002 \u540e\u7ee7\u7c7b\u4f3c\u3002 Code 1 2 3 4 5 6 i64 pre ( int v ) { return kth ( rnk ( v ) - 1 ); } i64 nex ( int v ) { return kth ( t [ root ]. dat - query ( root , 1 , m , v + 1 , m ) + 1 ); } \u7ebf\u6bb5\u6811\u5408\u5e76 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6709\u7684\u65f6\u5019\u9700\u8981\u5bf9\u540c\u4e00\u4e2a\u503c\u57df\u5728\u591a\u9897\u4e0d\u540c\u7684\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u4e0a\u8fdb\u884c\u4fee\u6539\u3002 \u7136\u540e\u8ba1\u7b97\u7b54\u6848\u65f6\u9700\u8981\u7efc\u5408\u5b83\u4eec\u7684\u7b54\u6848\u3002 \u4e5f\u5c31\u662f\u6211\u4eec\u9700\u8981\u4e24\u4e24\u5408\u5e76\u8fd9\u4e9b\u7ebf\u6bb5\u6811\u3002 \u56e0\u4e3a\u7ef4\u62a4\u7684\u503c\u57df\u76f8\u540c\uff0c\u90a3\u4e48\u663e\u7136\u5b83\u4eec\u5bf9\u4e8e\u503c\u57df\u7684\u5b50\u533a\u95f4\u7684\u5212\u5206\u4e5f\u662f\u4e00\u6837\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u540c\u65f6\u4ece\u4e24\u9897\u7ebf\u6bb5\u6811\u7684\u6811\u6839\u5f00\u59cb\uff0c\u7528 \\(p,q\\) \u4e24\u4e2a\u6307\u9488 \u540c\u6b65 \u5411\u4e0b\u9012\u5f52\u3002 \u53ef\u80fd\u4f1a\u51fa\u73b0\u8fd9\u56db\u79cd\u60c5\u51b5\uff1a \\(p\\) \u6ca1\u6709\u5efa\u7acb\u8282\u70b9\uff0c\u800c \\(q\\) \u5efa\u7acb\u6709\u8282\u70b9\u3002 \\(q\\) \u6ca1\u6709\u5efa\u7acb\u8282\u70b9\uff0c\u800c \\(p\\) \u5efa\u7acb\u6709\u8282\u70b9\u3002 \\(p,q\\) \u90fd\u6ca1\u6709\u5efa\u7acb\u8fd9\u4e2a\u8282\u70b9\u3002 \\(p,q\\) \u90fd\u6709\u5efa\u7acb\u8fd9\u4e2a\u8282\u70b9\u3002 \u5bf9\u4e8e \\(1,2\\) \uff0c\u76f4\u63a5\u628a\u975e\u7a7a\u8282\u70b9\u4f5c\u4e3a\u5408\u5e76\u540e\u7684\u8282\u70b9\u3002 \u5bf9\u4e8e \\(3\\) \uff0c\u65e2\u7136\u4f60\u4fe9\u90fd\u6ca1\u6709\uff0c\u90a3\u5408\u5e76\u540e\u4e5f\u6ca1\u5fc5\u8981\u8981\u8fd9\u4e2a\u70b9\uff0c\u4e5f\u5c31\u662f\u5408\u5e76\u540e\u4ecd\u65e7\u6ca1\u6709\u8fd9\u4e2a\u8282\u70b9\u3002 \u5bf9\u4e8e \\(4\\) \uff0c\u65e2\u7136\u4f60\u4eec\u90fd\u6709\uff0c\u90a3\u5c31\u5408\u5e76\u4f60\u4eec\u7684\u4fe1\u606f\uff08\u7c7b\u4f3c\u4e8e\u666e\u901a\u7ebf\u6bb5\u6811\u7684 Pushup\uff09\uff0c\u7136\u540e\u968f\u4fbf\u627e\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3a\u5408\u5e76\u4e4b\u540e\u7684\u8282\u70b9\uff08\u4e00\u822c\u662f \\(p\\) \uff09 Code 1 2 3 4 5 6 7 8 9 10 11 12 int merge ( int p , int q , int l , int r ) { if ( ! p ) return q ; if ( ! q ) return p ; if ( l == r ){ t [ p ]. mx += t [ q ]. mx ; return p ; } int mid = ( l + r ) >> 1 ; t [ p ]. ls = merge ( t [ p ]. ls , t [ q ]. ls , l , mid ); t [ p ]. rs = merge ( t [ p ]. rs , t [ q ]. rs , mid + 1 , r ); pushup ( p ); return p ; } \u8fd8\u6709\u4e00\u79cd\u8282\u7701\u7a7a\u95f4\u7684\u5199\u6cd5\uff0c\u53eb\u8282\u70b9\u56de\u6536\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u628a\u5408\u5e76\u540e\u65e0\u7528\u7684\u8282\u70b9\u7684\u7f16\u53f7\u6254\u8fdb\u4e00\u4e2a\u6808\u91cc\u9762\u3002 \u5408\u5e76\u9700\u8981\u65b0\u8282\u70b9\u7684\u65f6\u5019\u518d\u4ece\u6808\u91cc\u62ff\u51fa\u6765\u7528\u3002 \u626b\u63cf\u7ebf \u03c8(\uff40\u2207\u00b4)\u03c8 \u626b\u63cf\u7ebf\u672c\u8d28\u4e0a\u662f\u8ba1\u7b97\u51e0\u4f55\uff1f \u7528\u5904\u5c31\u662f\u7ef4\u62a4\u5e73\u9762\u4e0a\u7684\u4e00\u4e9b\u77e9\u5f62\uff0c\u53ef\u80fd\u662f\u7ef4\u62a4\u603b\u9762\u79ef\uff0c\u8f6e\u5ed3\uff0c\u6216\u8005\u662f\u8986\u76d6\u5230\u4ec0\u4e48\u4e1c\u897f\u7684\u6700\u5927\u503c\u4e4b\u7c7b\u7684\u3002 POJ1151 - Atlantis \u7ed9\u5b9a\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u5f53\u4e2d\u7684 \\(N\\) \u4e2a\u77e9\u5f62\uff0c\u6c42\u5b83\u4eec\u7684\u9762\u79ef\u4e4b\u5e76\u3002 \u4e00\u4e2a\u7ecf\u5178\u7684\u601d\u8def\u662f\uff0c\u8003\u8651\u4ece\u5de6\u5f80\u53f3\u7528\u4e00\u6761\u76f4\u7ebf\u626b\u8fc7\u53bb\uff0c\u628a\u8fd9\u4e9b\u77e9\u5f62\u8f6c\u5316\u4e3a \\(2N\\) \u4e2a\u4e8c\u5143\u7ec4\u3002 \u4e00\u4e2a\u77e9\u5f62 \\((x1, y1), (x2, y2)\\) \u4f1a\u88ab\u8f6c\u5316\u6210 \\((x1, y1, y2, 1), (x2, y1, y2, -1)\\) \uff0c\u7c7b\u4f3c\u8fd9\u6837\uff1a img \u7136\u540e\u6211\u4eec\u53ea\u9700\u8981\u626b\u63cf\u8fd9\u4e9b\u4e8c\u5143\u7ec4\uff0c\u5728\u5f53\u524d\u7684\u626b\u63cf\u7ebf\u4e0a\u505a\u4fee\u6539\u5c31\u53ef\u4ee5\u4e86\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u5148\u79bb\u6563\u5316\uff0c\u8bb0 \\(raw(i)\\) \u8868\u793a \\(i\\) \u79bb\u6563\u524d\u7684\u503c\uff0c \\(val(i)\\) \u53cd\u8fc7\u6765\u3002 \u8bb0 \\(c(i)\\) \u8868\u793a \\([raw(i), raw(i + 1)]\\) \u8fd9\u4e00\u6bb5\u533a\u95f4\u5f53\u524d\u88ab\u8986\u76d6\u7684\u6b21\u6570\uff0c\u8fd9\u4e48\u505a\u7684\u539f\u56e0\u662f\uff0c\u5bf9\u4e8e\u70b9\u7684\u8986\u76d6\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff0c\u6211\u4eec\u53ea\u5173\u5fc3\u88ab\u8986\u76d6\u7684\u603b\u957f\u5ea6\u3002 \u7136\u540e\u5bf9\u4e8e\u4e00\u4e2a\u56db\u5143\u7ec4 \\((x,y,z,k)\\) \uff0c\u6211\u4eec\u4ee4\u626b\u63cf\u7ebf\u4e0a \\([y,z]\\) \u8fd9\u4e00\u5927\u6bb5\u7684\u88ab\u8986\u76d6\u6b21\u6570\u52a0\u4e0a \\(k\\) \uff0c\u7136\u540e\u7edf\u8ba1\u7b54\u6848\u5373\u53ef\u3002 \u5f53\u7136\uff0c\u8fd9\u662f\u6734\u7d20\u505a\u6cd5\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\u3002 \u8bb0 \\(cnt\\) \u8868\u793a\u7ebf\u6bb5\u6811\u4e0a\u8282\u70b9\u88ab\u76f4\u63a5\u8986\u76d6\u7684\u6b21\u6570\uff0c \\(len\\) \u8868\u793a\u5f53\u524d\u8282\u70b9\u7ef4\u62a4\u7684\u6bb5\u5f53\u4e2d\u88ab\u8986\u76d6\u7684\u6bb5\u7684\u603b\u957f\u3002 \u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u7279\u6b8a\u7684 pushup \u6280\u5de7\uff0c\u6211\u4eec\u533a\u95f4\u8986\u76d6\u7684\u65f6\u5019\u76f4\u63a5\u4e0d pushdown \u4e86\uff0c\u6211\u4eec\u9012\u5f52\u5230\u88ab\u4fee\u6539\u7684\u90a3 \\(\\log n\\) \u4e2a\u533a\u95f4\uff0c\u7136\u540e\u76f4\u63a5\u4fee\u6539\u4ed6\u4eec\u7684 \\(cnt\\) \u548c \\(len\\) \uff0cpushup \u7684\u65f6\u5019\u76f4\u63a5\u6839\u636e\u5b50\u8282\u70b9\u7684\u4fe1\u606f\u66f4\u65b0\u5f53\u524d\u8282\u70b9\u5373\u53ef\uff0c\u5177\u4f53\u5b9e\u73b0\u7c7b\u4f3c\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 void change ( int p , int l , int r , int v ) { int nl = t [ p ]. l , nr = t [ p ]. r ; if ( l <= nl && nr <= r ) { t [ p ]. cnt += v ; if ( t [ p ]. cnt == 0 ) t [ p ]. len = ( nl == nr ) ? 0 : t [ p << 1 ]. len + t [ p << 1 | 1 ]. len ; // \u867d\u7136\u5f53\u524d\u533a\u95f4\u76f4\u63a5\u88ab\u8986\u76d6\u7684\u6b21\u6570\u7b49\u4e8e 0 \u4e86\uff0c\u4f46\u8fd8\u662f\u8981\u8003\u8651\u4e0b\u9762\u7684\u5b50\u6811\uff0c\u56e0\u4e3a\u5b83\u4eec\u6709\u53ef\u80fd\u6ca1\u88ab\u4fee\u6539\u5b8c\u3002 else t [ p ]. len = raw [ nr + 1 ] - raw [ nl ]; return ; } int mid = ( nl + nr ) >> 1 ; if ( l <= mid ) change ( p << 1 , l , r , v ); if ( r > mid ) change ( p << 1 | 1 , l , r , v ); if ( t [ p ]. cnt > 0 ) t [ p ]. len = raw [ nr + 1 ] - raw [ nl ]; else t [ p ]. len = t [ p << 1 ]. len + t [ p << 1 | 1 ]. len ; } \u66f4\u591a\u4f8b\u9898\u53ef\u4ee5\u770b\uff1a link \u6807\u8bb0\u6c38\u4e45\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u5c0f\u6280\u5de7\uff0c\u4e00\u822c\u5728\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u91cc\u6bd4\u8f83\u5e38\u89c1\u3002 \u6ce8\u610f\u5230\u4e00\u4e2a\u4e8b\u60c5\u662f\uff0c\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u56e0\u4e3a\u7ef4\u62a4\u4e86\u5386\u53f2\u7248\u672c\uff0cpushdown \u548c pushup \u5f88\u56f0\u96be\uff08\u9700\u8981\u82b1\u5f88\u591a\u989d\u5916\u7684\u7a7a\u95f4\u53bb\u5904\u7406\u4fe1\u606f\u7684\u66f4\u6539\uff09\u3002 \u4e8e\u662f\u6211\u4eec\u5c31\u5728\u60f3\uff0c\u6709\u6ca1\u6709\u4e00\u79cd\u65b9\u5f0f\uff0c\u65e2\u53ef\u4ee5\u5b9e\u73b0\u533a\u95f4\u4fee\u6539\uff0c\u53c8\u4e0d\u7528\u4e0b\u653e tag\uff0c\u5904\u7406\u66f4\u6539\u5462\uff1f \u6807\u8bb0\u6c38\u4e45\u5316\u5c31\u662f\u4e3a\u4e86\u6ee1\u8db3\u8fd9\u79cd\u9700\u6c42\u800c\u8bde\u751f\u7684\u3002 \u6211\u4eec\u8003\u8651\uff0c\u6bcf\u6b21\u533a\u95f4\u4fee\u6539\u4e5f\u4e00\u6837\u7684\u5230\u8fbe\u88ab\u5b8c\u5168\u8986\u76d6\u7684\u8282\u70b9\u5c31\u8fd4\u56de\uff0c\u8bb0\u5f55\u4e00\u4e2a tag\uff0c\u4f46\u662f\u5728\u9012\u5f52\u4e0b\u53bb\u7684\u65f6\u5019\u6211\u4eec\u9700\u8981\u628a\u4e00\u8def\u4e0a\u7684\u6240\u6709\u8282\u70b9\u7684\u66f4\u6539\u90fd\u5904\u7406\u4e86\u3002 \u7136\u540e\u533a\u95f4\u8be2\u95ee\u5c31\u4e00\u76f4\u5f80\u4e0b\uff0c\u5e76\u5b9e\u65f6\u7d2f\u8ba1\u5f53\u524d\u7684 tag\uff0c\u6bcf\u6b21\u626b\u5230\u4e00\u4e2a\u8282\u70b9\u76f4\u63a5\u8ba9\u7b54\u6848\u7b97\u4e0a\u539f\u6765\u7684\u503c\u548c tag \u5bf9\u4fe1\u606f\u7684\u5f71\u54cd\u5373\u53ef\u3002 \u8fd9\u4e2a\u4e1c\u897f\u770b\u8d77\u6765\u5c31\u5f88\u51fd\u6570\u5f0f\u7f16\u7a0b\uff0c\u56e0\u4e3a\u4f60\u4e0d\u4f1a\u4fee\u6539 \\(val\\) \uff0c\u4f60\u628a\u6240\u6709\u7684\u4fee\u6539\u90fd\u653e\u5230\u4e86 tag \u4e0a\u9762\uff0c\u6bcf\u6b21\u53ea\u9700\u8981\u4fee\u6539 tag \u5c31\u884c\u4e86\uff01 \u8fd9\u4e2a\u4e1c\u897f\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u81ea\u9876\u5411\u4e0b\u7ebf\u6bb5\u6811\uff08\uff0c\u6709\u4e86\u8fd9\u4e2a\u4e1c\u897f\u5c31\u53ef\u4ee5\u52c9\u5f3a\u7ef4\u62a4\u4e00\u4e0b\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u4fee\u6539\u4e86\uff08\u5f53\u7136\u666e\u901a\u7ebf\u6bb5\u6811\u4e5f\u53ef\u4ee5\u7528\uff0c\u5e38\u6570\u8fd8\u633a\u5c0f\uff09 \u4e3a\u4ec0\u4e48\u8bf4\u52c9\u5f3a\u5462\uff1f \u56e0\u4e3a\u6807\u8bb0\u6c38\u4e45\u5316\u53ea\u80fd\u5904\u7406\u4e00\u4e9b\u6bd4\u8f83\u7279\u6b8a\u7684\u4fe1\u606f\uff0c\u4f60\u53d1\u73b0\u6211\u4eec\u8fd9\u91cc\u5fc5\u987b\u8981\u6ee1\u8db3\u4ea4\u6362\u5f8b\uff0c\u6211\u4eec\u505a\u7684\u4e8b\u60c5\u662f\u76f4\u63a5\u4ece\u4e0a\u5230\u4e0b\u66b4\u529b\u5408\u5e76 tag\uff0c\u6839\u672c\u4e0d\u7ba1\u65f6\u95f4\u987a\u5e8f\uff0c\u6bd4\u5982\u6211\u4eec\u8003\u8651\u590d\u5408\u4e24\u4e2a\u6807\u8bb0 \\(t_1, t_2\\) \uff0c\u5982\u679c\u662f pushup pushdown \u76f4\u63a5\u5408\u5e76\u5c31\u884c\u4e86\uff0c\u4f46\u662f\u6807\u8bb0\u6c38\u4e45\u5316\u7684\u65f6\u5019\uff0c \\(t_2\\) \u867d\u7136\u5728\u65f6\u95f4\u8f74\u4e0a\u9760\u540e\uff0c\u4f46\u662f\u5b83\u5728\u7ebf\u6bb5\u6811\u4e0a\u7684\u4f4d\u7f6e\u53ef\u80fd\u4f1a\u6bd4 \\(t_1\\) \u66f4\u9760\u540e\uff0c\u6211\u4eec\u4e0d\u5f97\u4e0d\u8981\u6c42\u6ee1\u8db3\u4ea4\u6362\u5f8b\uff0c\u4e0d\u7136\u4fe1\u606f\u4e0d\u80fd\u5408\u5e76\u3002 \u4f46\u662f\u5176\u5b9e\u4e5f\u4e0d\u4e00\u5b9a\uff0c\u6211\u4eec\u7684\u8981\u6c42\u662f \\(t_2 \\circ t_1 = t_1 \\circ t_2\\) \uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u4e00\u4e2a \\(t_0\\) \uff0c\u4f7f\u5f97 \\(t_2 \\circ t_1 = t_1 \\circ t_0\\) \u5373\u53ef\uff0c\u8fd9\u4e2a\u4e1c\u897f\u6211\u8fd8\u6ca1\u89c1\u5230\u8fc7\u7c7b\u4f3c\u7684\u9898\uff0c\u6709\u4e86\u6211\u4f1a\u653e\u4e0a\u6765\u3002 \u6807\u8bb0\u6c38\u4e45\u5316\u6ca1\u4ec0\u4e48\u4e60\u9898\uff0c\u53ef\u4ee5\u76f4\u63a5\u5199\u533a\u95f4\u52a0\u533a\u95f4\u548c\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5199 To the moon \u90a3\u9898\u3002 \u77e9\u9635\u8868\u8fbe\u4fee\u6539 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e2a\u4e1c\u897f\u4e5f\u6bd4\u8f83\u5de7\u5999\uff0c\u6211\u4e4b\u524d\u5728 OI-wiki \u4e0a\u770b\u5230\u8fc7\uff0c\u6478\u9c7c\u9171\u548c cftm \u5728\u7fa4\u91cc\u53c8\u6559\u4e86\u6211 /oh\uff0c\u611f\u89c9\u5f88\u6709\u610f\u601d\uff0c\u6240\u4ee5\u5199\u4e0b\u6765\u3002 \u5c31\u662f\u8bf4\uff0c\u5176\u5b9e\u4f60\u6ce8\u610f\u5230\u6211\u4eec\u4e0a\u9762\u8ba8\u8bba\u7684 tag \u65b9\u5f0f\u6709\u70b9\u590d\u6742\uff0c\u800c\u77e9\u9635\u4e58\u6cd5\u5929\u7136\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7c7b\u4f3c\u77e9\u9635\u52a0\u901f\uff0c\u76f4\u63a5\u628a\u4f60\u8981\u7ef4\u62a4\u7684\u4fe1\u606f\u5199\u6210\u4e00\u4e2a\u5411\u91cf\uff0c\u7136\u540e\u63a8\u51fa\u4e00\u4e2a\u8f6c\u79fb\u77e9\u9635\uff0c\u76f4\u63a5\u66b4\u529b\u7ef4\u62a4\u533a\u95f4\u77e9\u9635\u4e58\u6cd5\u5c31\u53ef\u4ee5\u4e86\u3002 \u300cTHUSCH 2017\u300d\u5927\u9b54\u6cd5\u5e08 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5927\u9b54\u6cd5\u5e08\u5c0f L \u5236\u4f5c\u4e86 \\(n\\) \u4e2a\u9b54\u529b\u6c34\u6676\u7403\uff0c\u6bcf\u4e2a\u6c34\u6676\u7403\u6709\u6c34\u3001\u706b\u3001\u571f\u4e09\u4e2a\u5c5e\u6027\u7684\u80fd\u91cf\u503c\u3002 \u5c0f L \u628a\u8fd9 \\(n\\) \u4e2a\u6c34\u6676\u7403\u5728\u5730\u4e0a\u4ece\u524d\u5411\u540e\u6392\u6210\u4e00\u884c\uff0c\u7136\u540e\u5f00\u59cb\u4eca\u5929\u7684\u9b54\u6cd5\u8868\u6f14\u3002 \u6211\u4eec\u7528 \\(A_i,\\ B_i,\\ C_i\\) \u5206\u522b\u8868\u793a\u4ece\u524d\u5411\u540e\u7b2c \\(i\\) \u4e2a\u6c34\u6676\u7403\uff08\u4e0b\u6807\u4ece \\(1\\) \u5f00\u59cb\uff09\u7684\u6c34\u3001\u706b\u3001\u571f\u7684\u80fd\u91cf\u503c\u3002 \u5c0f L \u8ba1\u5212\u65bd\u5c55 \\(m\\) \u6b21\u9b54\u6cd5\u3002\u6bcf\u6b21\uff0c\u4ed6\u4f1a\u9009\u62e9\u4e00\u4e2a\u533a\u95f4 \\([l, r]\\) \uff0c\u7136\u540e\u65bd\u5c55\u4ee5\u4e0b \\(3\\) \u5927\u7c7b\u3001 \\(7\\) \u79cd\u9b54\u6cd5\u4e4b\u4e00\uff1a \u9b54\u529b\u6fc0\u53d1\uff1a\u4ee4\u533a\u95f4\u91cc\u6bcf\u4e2a\u6c34\u6676\u7403\u4e2d \u7279\u5b9a\u5c5e\u6027 \u7684\u80fd\u91cf\u7206\u53d1\uff0c\u4ece\u800c\u4f7f\u53e6\u4e00\u4e2a \u7279\u5b9a\u5c5e\u6027 \u7684\u80fd\u91cf\u589e\u5f3a\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6709\u4ee5\u4e0b\u4e09\u79cd\u53ef\u80fd\u7684\u8868\u73b0\u5f62\u5f0f\uff1a \u706b\u5143\u7d20\u6fc0\u53d1\u6c34\u5143\u7d20\u80fd\u91cf\uff1a\u4ee4 \\(A_i = A_i + B_i\\) \u3002 \u571f\u5143\u7d20\u6fc0\u53d1\u706b\u5143\u7d20\u80fd\u91cf\uff1a\u4ee4 \\(B_i = B_i + C_i\\) \u3002 \u6c34\u5143\u7d20\u6fc0\u53d1\u571f\u5143\u7d20\u80fd\u91cf\uff1a\u4ee4 \\(C_i = C_i + A_i\\) \u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u589e\u5f3a\u4e00\u79cd\u5c5e\u6027\u7684\u80fd\u91cf\u5e76\u4e0d\u4f1a\u6539\u53d8\u53e6\u4e00\u79cd\u5c5e\u6027\u7684\u80fd\u91cf\uff0c\u4f8b\u5982 \\(A_i = A_i + B_i\\) \u5e76\u4e0d\u4f1a\u4f7f \\(B_i\\) \u589e\u52a0\u6216\u51cf\u5c11\u3002 \u9b54\u529b\u589e\u5f3a\uff1a\u5c0f L \u6325\u821e\u6cd5\u6756\uff0c\u6d88\u8017\u81ea\u8eab \\(v\\) \u70b9\u6cd5\u529b\u503c\uff0c\u6765\u6539\u53d8\u533a\u95f4\u91cc\u6bcf\u4e2a\u6c34\u6676\u7403\u7684 \u7279\u5b9a\u5c5e\u6027 \u7684\u80fd\u91cf\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6709\u4ee5\u4e0b\u4e09\u79cd\u53ef\u80fd\u7684\u8868\u73b0\u5f62\u5f0f\uff1a \u706b\u5143\u7d20\u80fd\u91cf\u5b9a\u503c\u589e\u5f3a\uff1a\u4ee4 \\(A_i = A_i + v\\) \u3002 \u6c34\u5143\u7d20\u80fd\u91cf\u7ffb\u500d\u589e\u5f3a\uff1a\u4ee4 \\(B_i=B_i \\cdot v\\) \u3002 \u571f\u5143\u7d20\u80fd\u91cf\u5438\u6536\u878d\u5408\uff1a\u4ee4 \\(C_i = v\\) \u3002 \u9b54\u529b\u91ca\u653e\uff1a\u5c0f L \u5c06\u533a\u95f4\u91cc\u6240\u6709\u6c34\u6676\u7403\u7684\u80fd\u91cf\u805a\u96c6\u5728\u4e00\u8d77\uff0c\u878d\u5408\u6210\u4e00\u4e2a\u65b0\u7684\u6c34\u6676\u7403\uff0c\u7136\u540e\u9001\u7ed9\u573a\u5916\u89c2\u4f17\u3002 \u751f\u6210\u7684\u6c34\u6676\u7403\u6bcf\u79cd\u5c5e\u6027\u7684\u80fd\u91cf\u503c\u7b49\u4e8e\u533a\u95f4\u5185\u6240\u6709\u6c34\u6676\u7403\u5bf9\u5e94\u80fd\u91cf\u503c\u7684\u4ee3\u6570\u548c\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u9b54\u529b\u91ca\u653e\u7684\u8fc7\u7a0b\u4e0d\u4f1a\u771f\u6b63\u6539\u53d8\u533a\u95f4\u5185\u6c34\u6676\u7403\u7684\u80fd\u91cf \u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u5c0f L \u5236\u9020\u548c\u878d\u5408\u7684\u6c34\u6676\u7403\u7684\u539f\u6750\u6599\u90fd\u662f\u5b9a\u5236\u7248\u7684 OI \u5de5\u5382\u6c34\u6676\uff0c\u6240\u4ee5\u8fd9\u4e9b\u6c34\u6676\u7403\u6709\u4e00\u4e2a\u80fd\u91cf\u9608\u503c \\(998244353\\) \u3002\u5f53\u6c34\u6676\u7403\u4e2d\u67d0\u79cd\u5c5e\u6027\u7684\u80fd\u91cf\u503c\u5927\u4e8e\u7b49\u4e8e\u8fd9\u4e2a\u9608\u503c\u65f6\uff0c\u80fd\u91cf\u503c\u4f1a\u81ea\u52a8\u5bf9\u9608\u503c\u53d6\u6a21\uff0c\u4ece\u800c\u907f\u514d\u6c34\u6676\u7403\u7206\u70b8\u3002 \u5c0f W \u4e3a\u5c0f L\uff08\u552f\u4e00\u7684\uff09\u89c2\u4f17\uff0c\u56f4\u89c2\u4e86\u6574\u4e2a\u8868\u6f14\uff0c\u5e76\u4e14\u6536\u5230\u4e86\u5c0f L \u5728\u8868\u6f14\u4e2d\u878d\u5408\u7684\u6bcf\u4e2a\u6c34\u6676\u7403\u3002\u5c0f W \u60f3\u77e5\u9053\uff0c\u8fd9\u4e9b\u6c34\u6676\u7403\u8574\u6db5\u7684\u4e09\u79cd\u5c5e\u6027\u7684\u80fd\u91cf\u503c\u5206\u522b\u662f\u591a\u5c11\u3002 \u7531\u4e8e\u77e9\u9635\u7684\u7ed3\u5408\u5f8b\u548c\u5206\u914d\u5f8b\u6210\u7acb\uff0c\u5355\u70b9\u4fee\u6539\u53ef\u4ee5\u81ea\u7136\u5730\u63a8\u5e7f\u5230\u533a\u95f4\uff0c\u5373\u63a8\u51fa\u77e9\u9635\u540e\u76f4\u63a5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u77e9\u9635\u4e58\u79ef\u5373\u53ef\u3002 \u4e0b\u9762\u5c06\u4e3e\u51e0\u4e2a\u4f8b\u5b50\u3002 \\(A_i = A_i + v\\) \u7684\u8f6c\u79fb \\[ \\begin{bmatrix} A & B & C & 1 \\end{bmatrix} \\begin{bmatrix} 1 & 0 & 0 & 0\\\\ 0 & 1 & 0 & 0\\\\ 0 & 0 & 1 & 0\\\\ v & 0 & 0 & 1\\\\ \\end{bmatrix}= \\begin{bmatrix} A+v & B & C & 1\\\\ \\end{bmatrix} \\] \\(B_i=B_i \\cdot v\\) \u7684\u8f6c\u79fb \\[ \\begin{bmatrix} A & B & C & 1\\end{bmatrix}\\begin{bmatrix}1 & 0 & 0 & 0\\\\0 & v & 0 & 0\\\\0 & 0 &1& 0\\\\0 & 0 & 0 & 1\\\\\\end{bmatrix}=\\begin{bmatrix}A & B \\cdot v & C & 1\\\\\\end{bmatrix}\\] Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 #include <cstdio> #include <iostream> #include <cstring> using namespace std ; constexpr int mod = 998244353 ; constexpr int maxn = 260000 ; int n , m ; template < class T > inline void read ( T & a ){ register char ch ; while ( ch = getchar (),( ch < '0' || ch > '9' ) && ch != '-' ); register bool f = ( ch == '-' ); register T x = f ? 0 : ch - '0' ; while ( ch = getchar (), ch >= '0' && ch <= '9' ) x = ( x << 3 ) + ( x << 1 ) + ( ch ^ 48 ); a = f ?- x : x ; } struct Matrix { int a [ 5 ][ 5 ]; Matrix (){ memset ( a , 0 , sizeof ( a )); } inline void unit_init (){ memset ( a , 0 , sizeof ( a )); for ( register int i = 1 ; i <= 4 ; i ++ ) a [ i ][ i ] = 1 ; } inline Matrix operator * ( const Matrix & M ){ Matrix res ; for ( register int i = 1 ; i <= 4 ; i ++ ){ for ( register int j = 1 ; j <= 4 ; j ++ ){ res . a [ i ][ j ] = ( res . a [ i ][ j ] + 1l l * a [ i ][ 1 ] * M . a [ 1 ][ j ]) % mod ; res . a [ i ][ j ] = ( res . a [ i ][ j ] + 1l l * a [ i ][ 2 ] * M . a [ 2 ][ j ]) % mod ; res . a [ i ][ j ] = ( res . a [ i ][ j ] + 1l l * a [ i ][ 3 ] * M . a [ 3 ][ j ]) % mod ; res . a [ i ][ j ] = ( res . a [ i ][ j ] + 1l l * a [ i ][ 4 ] * M . a [ 4 ][ j ]) % mod ; } } return res ; } inline Matrix operator + ( const Matrix & M ){ Matrix res ; for ( register int i = 1 ; i <= 4 ; i ++ ){ for ( register int j = 1 ; j <= 4 ; j ++ ){ res . a [ i ][ j ] = ( M . a [ i ][ j ] + a [ i ][ j ]) % mod ; } } return res ; } } ans , unit , ex_unit ; struct Segment_Tree { Matrix Mat , tag ; } t [ maxn << 2 ]; inline void init_1 (){ unit . a [ 2 ][ 1 ] = 1 ; } inline void init_2 (){ unit . a [ 3 ][ 2 ] = 1 ; } inline void init_3 (){ unit . a [ 1 ][ 3 ] = 1 ; } inline void init_4 ( int v ){ unit . a [ 4 ][ 1 ] = v ; } inline void init_5 ( int v ){ unit . a [ 2 ][ 2 ] = v ; } inline void init_6 ( int v ){ unit . a [ 3 ][ 3 ] = 0 , unit . a [ 4 ][ 3 ] = v ; } inline void pushdown ( int p ){ t [ p << 1 ]. tag = t [ p << 1 ]. tag * t [ p ]. tag ; t [ p << 1 | 1 ]. tag = t [ p << 1 | 1 ]. tag * t [ p ]. tag ; t [ p << 1 ]. Mat = t [ p << 1 ]. Mat * t [ p ]. tag ; t [ p << 1 | 1 ]. Mat = t [ p << 1 | 1 ]. Mat * t [ p ]. tag ; t [ p ]. tag . unit_init (); } inline void pushup ( int p ){ for ( register int i = 1 ; i <= 4 ; i ++ ){ t [ p ]. Mat . a [ 1 ][ i ] = 1l l * ( t [ p << 1 ]. Mat . a [ 1 ][ i ] + t [ p << 1 | 1 ]. Mat . a [ 1 ][ i ]); t [ p ]. Mat . a [ 1 ][ i ] -= ( t [ p ]. Mat . a [ 1 ][ i ] >= mod ) ? mod : 0 ; } } inline void built ( int l , int r , int p ){ t [ p ]. tag = ex_unit ; if ( l == r ){ read ( t [ p ]. Mat . a [ 1 ][ 1 ]); read ( t [ p ]. Mat . a [ 1 ][ 2 ]); read ( t [ p ]. Mat . a [ 1 ][ 3 ]); t [ p ]. Mat . a [ 1 ][ 4 ] = 1 ; return ; } int mid = ( l + r ) / 2 ; built ( l , mid , p << 1 ), built ( mid + 1 , r , p << 1 | 1 ), pushup ( p ); } inline void update ( int l , int r , int ql , int qr , int p , Matrix M ){ if ( ql <= l && r <= qr ){ t [ p ]. Mat = t [ p ]. Mat * M ; t [ p ]. tag = t [ p ]. tag * M ; return ; } pushdown ( p ); int mid = ( r + l ) >> 1 ; if ( mid >= ql ) update ( l , mid , ql , qr , p << 1 , M ); if ( qr > mid ) update ( mid + 1 , r , ql , qr , p << 1 | 1 , M ); pushup ( p ); } inline void query ( int l , int r , int ql , int qr , int p ){ if ( ql <= l && r <= qr ){ for ( register int i = 1 ; i <= 3 ; i ++ ){ ans . a [ 1 ][ i ] = ans . a [ 1 ][ i ] + t [ p ]. Mat . a [ 1 ][ i ]; ans . a [ 1 ][ i ] -= ( ans . a [ 1 ][ i ] >= mod ) ? mod : 0 ; } return ; } int mid = ( l + r ) >> 1 ; pushdown ( p ); if ( mid >= ql ) query ( l , mid , ql , qr , p << 1 ); if ( qr > mid ) query ( mid + 1 , r , ql , qr , p << 1 | 1 ); } int main (){ ex_unit . unit_init (), read ( n ), built ( 1 , n , 1 ), read ( m ); for ( register int i = 1 ; i <= m ; i ++ ){ unit = ex_unit ; int opt , l , r , v ; read ( opt ); read ( l ); read ( r ); if ( opt == 1 ) init_1 (), update ( 1 , n , l , r , 1 , unit ); if ( opt == 2 ) init_2 (), update ( 1 , n , l , r , 1 , unit ); if ( opt == 3 ) init_3 (), update ( 1 , n , l , r , 1 , unit ); if ( opt == 4 ) read ( v ), init_4 ( v ), update ( 1 , n , l , r , 1 , unit ); if ( opt == 5 ) read ( v ), init_5 ( v ), update ( 1 , n , l , r , 1 , unit ); if ( opt == 6 ) read ( v ), init_6 ( v ), update ( 1 , n , l , r , 1 , unit ); if ( opt == 7 ) memset ( ans . a , 0 , sizeof ( ans . a )), query ( 1 , n , l , r , 1 ), printf ( \"%d %d %d \\n \" , ans . a [ 1 ][ 1 ], ans . a [ 1 ][ 2 ], ans . a [ 1 ][ 3 ]); } return 0 ; } \u300cLibreOJ 6208\u300d\u6811\u4e0a\u8be2\u95ee \u03c8(\uff40\u2207\u00b4)\u03c8 \u6709\u4e00\u68f5 \\(n\\) \u8282\u70b9\u7684\u6811\uff0c\u6839\u4e3a \\(1\\) \u53f7\u8282\u70b9\u3002\u6bcf\u4e2a\u8282\u70b9\u6709\u4e24\u4e2a\u6743\u503c \\(k_i, t_i\\) \uff0c\u521d\u59cb\u503c\u5747\u4e3a \\(0\\) \u3002 \u7ed9\u51fa\u4e09\u79cd\u64cd\u4f5c\uff1a \\(\\operatorname{Add}( x , d )\\) \u64cd\u4f5c\uff1a\u5c06 \\(x\\) \u5230\u6839\u7684\u8def\u5f84\u4e0a\u6240\u6709\u70b9\u7684 \\(k_i\\leftarrow k_i + d\\) \\(\\operatorname{Mul}( x , d )\\) \u64cd\u4f5c\uff1a\u5c06 \\(x\\) \u5230\u6839\u7684\u8def\u5f84\u4e0a\u6240\u6709\u70b9\u7684 \\(t_i\\leftarrow t_i + d \\times k_i\\) \\(\\operatorname{Query}( x )\\) \u64cd\u4f5c\uff1a\u8be2\u95ee\u70b9 \\(x\\) \u7684\u6743\u503c \\(t_x\\) \\(n,~m \\leq 100000, ~-10 \\leq d \\leq 10\\) \u82e5\u76f4\u63a5\u601d\u8003\uff0c\u4e0b\u653e\u64cd\u4f5c\u548c\u7ef4\u62a4\u4fe1\u606f\u5e76\u4e0d\u662f\u5f88\u597d\u60f3\u3002\u4f46\u662f\u77e9\u9635\u53ef\u4ee5\u8f7b\u677e\u5730\u8868\u8fbe\u3002 \\[ \\begin{aligned} \\begin{bmatrix}k & t & 1 \\end{bmatrix} \\begin{bmatrix} 1 & 0 & 0 \\\\ 0 & 1 & 0 \\\\ d & 0 & 1 \\end{bmatrix} &= \\begin{bmatrix}k+d & t & 1 \\end{bmatrix}\\\\ \\begin{bmatrix}k & t & 1 \\end{bmatrix} \\begin{bmatrix} 1 & d & 0 \\\\ 0 & 1 & 0 \\\\ 0 & 0 & 1 \\end{bmatrix} &= \\begin{bmatrix}k & t+d \\times k & 1 \\end{bmatrix} \\end{aligned} \\] \u8fd9\u91cc\u5077\u61d2\u76f4\u63a5\u627e\u4e86 OI-wiki \u7684\u4f8b\u5b50\u3002 \u4f46\u662f\u6211\u8865\u5145\u4e00\u70b9\uff0c\u5c31\u662f\u4f60\u53d1\u73b0\u8fd9\u4e24\u4e2a\u9898\u7684\u5171\u540c\u70b9\u5c31\u662f\uff0c\u4f60\u4e00\u6b21\u64cd\u4f5c\u5bf9\u4e00\u4e2a\u4fe1\u606f\u7684\u4fee\u6539\u53ef\u80fd\u4f1a\u548c\u53e6\u5916\u4e00\u4e2a\u4fe1\u606f\u6709\u5173\u7cfb\uff0c\u4f60\u76f4\u63a5\u8003\u8651 tag \u4f1a\u6bd4\u8f83\u9ebb\u70e6\u3002 \u5982\u679c\u7528\u77e9\u9635\u5c31\u80fd\u5f88\u597d\u7684\u628a\u4ed6\u4eec\u5199\u5230\u4e00\u8d77\uff0c\u5b9e\u73b0\u548c\u601d\u8003\u65b9\u5f0f\u5c31\u4f1a\u6bd4\u8f83\u65e0\u8111\uff0c\u4e5f\u6bd4\u8f83\u65b9\u4fbf\u4e86\uff0c\u5f53\u7136\u5b83\u53ea\u662f\u4e00\u79cd\u523b\u753b\u7b56\u7565\u7f62\u4e86\uff0c\u6b63\u5e38\u7684 tag \u4e5f\u53ef\u4ee5\u7528\u5b83\u6765\u601d\u8003\u3002 \u8fd9\u91cc\u4e3a\u4e86\u8ba8\u8bba\u65b9\u4fbf\u8003\u8651\u7684\u662f\u4e24\u4e2a tag \u7ef4\u62a4\u7684\u4fe1\u606f\u90fd\u6709\u4fee\u6539\u7684\u60c5\u51b5\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\u6ca1\u6709\u66f4\u6539\u7684 tag \u53ef\u4ee5\u89c6\u4e3a\u88ab\u6253\u4e0a\u4e86\u5e7a\u5143\u6807\u8bb0\u3002 \u21a9","title":"\u7ebf\u6bb5\u6811"},{"location":"algor/ds/segtree/#_1","text":"","title":"\u7ebf\u6bb5\u6811"},{"location":"algor/ds/segtree/#_2","text":"\u7ebf\u6bb5\u6811\u662f\u4e00\u79cd\u5e38\u7528\u7684\u7ef4\u62a4\u533a\u95f4\u4fe1\u606f\u7684\u6570\u636e\u7ed3\u6784\u3002 \u5b83\u8981\u6c42\u6240\u7ef4\u62a4\u7684\u4fe1\u606f\u5177\u6709\u533a\u95f4\u53ef\u52a0\u6027\uff08\u5bb9\u6613\u6309\u7167\u533a\u95f4\u5212\u5206\uff0c\u5408\u5e76\uff09 \u6bd4\u5982 \\(\\sum, \\prod, \\min, \\max\\) \u8fd9\u4e9b\u4fe1\u606f\u3002 \u66f4\u4e25\u8c28\u7684\u5b9a\u4e49 \u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u4fe1\u606f\u5e94\u5f53\u662f\u4e00\u4e2a\u6ee1\u8db3\u5e7a\u534a\u7fa4\u6027\u8d28\u7684\u4fe1\u606f\u3002 \u4e00\u4e2a\u5e7a\u534a\u7fa4 \\(M = (S, \\oplus, e)\\) \u6ee1\u8db3\u8fd9\u4e9b\u6027\u8d28\uff1a \uff08 \\(\\oplus\\) \u662f\u5b9a\u4e49\u5728\u96c6\u5408 \\(S\\) \u4e0a\u7684\u4e8c\u5143\u8fd0\u7b97\uff09 \\(\\oplus\\) \u5173\u4e8e \\(S\\) \u5c01\u95ed\u3002 \\(\\oplus\\) \u5b58\u5728\u7ed3\u5408\u5f8b\u5373 \\(\\forall a, b, c \\in S, (a \\oplus b) \\oplus c = a\\oplus (b \\oplus c)\\) \u3002 \\(\\oplus\\) \u5b58\u5728\u5e7a\u5143\uff0c\u5373 \\(\\exists e \\in S, \\forall x \\in S, (e \\oplus x = x) \\lor (x \\oplus e = x)\\) \u3002 \u4e00\u822c\u652f\u6301\u5355\u70b9\u548c\u533a\u95f4\u7684\u4fe1\u606f\u4fee\u6539\uff0c\u533a\u95f4\u7684\u4fe1\u606f\u67e5\u8be2\u3002","title":"\u6cdb\u5316"},{"location":"algor/ds/segtree/#_3","text":"\u7ebf\u6bb5\u6811\u57fa\u4e8e\u5206\u6cbb\u601d\u60f3\uff0c\u5b83\u5148\u5c06\u5e8f\u5217\u4ece\u4e2d\u95f4\u4e00\u5206\u4e3a\u4e8c\uff0c \u7136\u540e\u5bf9\u4e8e\u4ea7\u751f\u7684\u8fd9\u4e24\u6bb5\u533a\u95f4\uff0c\u7ee7\u7eed\u8fdb\u884c\u4ece\u4e2d\u95f4\u4e00\u5206\u4e3a\u4e8c\u7684\u8fc7\u7a0b\u3002 \u76f4\u5230\u6700\u540e\u5206\u51fa\u6765\u7684\u8fd9\u4e00\u6bb5\u533a\u95f4\u957f\u5ea6\u7b49\u4e8e \\(1\\) \u3002 \u76f4\u89c2\u7684\u6765\u770b\uff0c\u7ed3\u6784\u5927\u6982\u957f\u8fd9\u6837\uff1a \u53ef\u4ee5\u53d1\u73b0\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u7ef4\u62a4\u4e86\u5e8f\u5217\u4e0a\u7684\u4e00\u6bb5\u533a\u95f4 \\([l, r]\\) \u3002 \u5e76\u4e14\u5bf9\u4e8e\u4e00\u4e2a\u7ef4\u62a4 \\([L, R]\\) \u7684\u8282\u70b9\uff0c\u5b83\u7684\u5de6\u513f\u5b50\u7ef4\u62a4 \\([L,mid]\\) \uff0c\u53f3\u513f\u5b50\u7ef4\u62a4 \\((mid, R]\\) \u3002 \u5176\u4e2d \\(mid = \\lfloor \\dfrac{L + R}{2}\\rfloor\\) \u3002 \u53bb\u6389\u6700\u540e\u4e00\u5c42\u8282\u70b9\u4e4b\u540e\u7684\u7ebf\u6bb5\u6811\u662f\u4e00\u68f5\u6ee1\u4e8c\u53c9\u6811\uff0c\u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u4e8c\u500d\u6807\u8bb0\u6cd5\u6765\u786e\u5b9a\u4e00\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\u7f16\u53f7\u3002 \u5f62\u5f0f\u4e0a\u6765\u8bf4\uff0c\u5bf9\u4e8e\u975e\u53f6\u5b50\u8282\u70b9 \\(p\\) \uff0c\u5176\u5de6\u53f3\u513f\u5b50\u8282\u70b9\u5206\u522b\u662f \\(p \\times 2, p\\times 2 + 1\\) \u3002 \u4f46\u662f\u50cf\u4e0a\u56fe\u90a3\u6837\u5b8c\u7f8e\u7684\u7ed3\u6784\u53ea\u4f1a\u5728\u5e8f\u5217\u957f\u5ea6\u7b49\u4e8e \\(2^k\\) \u65f6\u51fa\u73b0\uff0c\u5f88\u591a\u65f6\u5019\u6700\u540e\u4e00\u5c42\u662f\u586b\u4e0d\u6ee1\u7684\uff0c\u7ef4\u62a4\u533a\u95f4\u957f\u5ea6\u4e3a \\(1\\) \u7684\u8282\u70b9\u53ef\u80fd\u4f1a\u8dd1\u5230\u5012\u6570\u7b2c\u4e8c\u5c42\u53bb\u3002 \u6bd4\u5982\u8fd9\u6837\uff08\u56fe\u4e2d\u6709\u4e9b\u6807\u6ce8\u7684\u533a\u95f4\u662f\u95ed\u533a\u95f4\uff0c\u6709\u4e9b\u662f\u5f00\u533a\u95f4\uff0c\u4f46\u65e0\u4f24\u5927\u96c5\uff09\uff1a \u53ef\u4ee5\u53d1\u73b0\uff0c\u6700\u540e\u4e00\u5c42\u7684\u90a3\u4e2a\u8282\u70b9\u7684\u7f16\u53f7\u5e94\u5f53\u4e3a \\(31\\) \uff0c\u5f53 \\(n\\) \u589e\u5927\u65f6\uff0c\u8fd9\u4e2a\u6570\u5b57\u4f1a\u8d8a\u6765\u8d8a\u63a5\u8fd1 \\(4 \\times n\\) \u3002 \u6240\u4ee5\u5f00 \\(4\\) \u500d\u7a7a\u95f4\u662f\u5fc5\u8981\u64cd\u4f5c\uff0c\u4e25\u8c28\u8bc1\u660e\u53ef\u4ee5\u81ea\u67e5\u3002 \u4e3a\u4e86\u65b9\u4fbf\u5904\u7406\uff0c\u8ba9\u6bcf\u4e00\u4e2a\u8282\u70b9\u7ef4\u62a4\u4ee5\u4e0b\u7684\u4fe1\u606f\u5373\u53ef\uff1a \u5b83\u7ef4\u62a4\u7684\u533a\u95f4 \\(l, r\\) \u3002 \u5b83\u7ef4\u62a4\u7684\u4fe1\u606f\u7684\u503c \\(dat\\) \u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\u4f7f\u7528\u7ed3\u6784\u4f53\u7ef4\u62a4\uff0c\u65b9\u4fbf\u6a21\u5757\u5316\u7684\u7f16\u5199\u548c\u8c03\u8bd5\u3002","title":"\u666e\u901a\u7ebf\u6bb5\u6811"},{"location":"algor/ds/segtree/#_4","text":"","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"algor/ds/segtree/#_5","text":"\u8fd9\u4e2a\u64cd\u4f5c\u7528\u4e8e\u628a\u513f\u5b50\u8282\u70b9\u7684\u4fe1\u606f\u4e0a\u4f20\u5230\u7236\u4eb2\u8282\u70b9\u3002 \u56e0\u4e3a\u4e00\u822c\u7684\u7ebf\u6bb5\u6811\u90fd\u662f\u81ea\u5e95\u5411\u4e0a\u66f4\u65b0\uff0c\u6240\u4ee5\u9700\u8981\u8fd9\u6837\u7684\u4e00\u4e2a\u6b65\u9aa4\u3002 \u5c31\u662f\u76f4\u63a5\u628a\u5de6\u53f3\u513f\u5b50\u7684\u4fe1\u606f\u62c9\u4e0a\u6765\u5230\u7236\u4eb2\u8282\u70b9\u3002 \u6839\u636e\u7ef4\u62a4\u4fe1\u606f\u7684\u4e0d\u540c\u505a\u4e00\u70b9\u4fee\u6539\u5c31\u884c\u3002 \u8fd9\u4e2a\u4e00\u822c\u53d6\u51b3\u4e8e\u8be2\u95ee\u95ee\u7684\u662f\u4ec0\u4e48\uff0c\u5982\u679c\u95ee\u548c\u5c31\u662f\u52a0\u8d77\u6765\uff0c\u5982\u679c\u95ee\u6700\u503c\u5c31\u662f\u53d6\u6700\u503c\u3002 Code 1 2 3 4 inline void pushup ( int p ) { t [ p ]. dat_sum = t [ p << 1 ]. dat_sum + t [ p << 1 | 1 ]. dat_sum ; // sum t [ p ]. dat_min = min ( t [ p << 1 ]. dat_min , t [ p << 1 | 1 ]. dat_min ); // min } \u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u64cd\u4f5c\u5c31\u662f\u628a lson \u7684\u4fe1\u606f\u548c rson \u7684\u4fe1\u606f\u5408\u5e76\u8d77\u6765\uff0c\u5370\u8bc1\u4e86\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u4fe1\u606f\u5e94\u5f53\u6ee1\u8db3\u7ed3\u5408\u5f8b\u3002","title":"\u4e0a\u4f20\u4fe1\u606f"},{"location":"algor/ds/segtree/#_6","text":"\u8fd9\u4e2a\u64cd\u4f5c\u7528\u4e8e\u786e\u5b9a\u7ebf\u6bb5\u6811\u7684\u7ed3\u6784\uff0c\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u7684\u533a\u95f4\uff0c\u5e76\u5c06\u7ebf\u6bb5\u6811\u521d\u59cb\u5316\u4e3a\u6700\u521d\u72b6\u6001\u3002 \u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u5de6\u53f3\u513f\u5b50\u5206\u522b\u9012\u5f52\u4e0b\u53bb\uff0c\u540c\u6b65\u8bb0\u5f55\u4e24\u4e2a\u503c \\(l, r\\) \uff0c\u8868\u793a\u5f53\u524d\u8282\u70b9\u5e94\u8be5\u7ef4\u62a4\u7684\u533a\u95f4\u3002 \u5f53\u9012\u5f52\u5230\u4e00\u4e2a\u8282\u70b9 \\(p\\) \u7684\u65f6\u5019\uff0c\u4ee4 \\(\\text{t[p].l} \\gets l, \\text{t[p].r} \\gets r\\) \u5373\u53ef\u3002 \u5f53\u9012\u5f52\u5230\u53f6\u5b50\u8282\u70b9\u7684\u65f6\u5019\uff0c\u4ee4\u8fd9\u4e2a\u8282\u70b9\u7ef4\u62a4\u7684\u4fe1\u606f\u4e3a \\(a_l\\) \uff0c\u7136\u540e\u8fd4\u56de\uff0c\u4e0d\u65ad\u4e0a\u4f20\u4fe1\u606f\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 void build ( int p , int l , int r ) { t [ p ]. l = l , t [ p ]. r = r ; if ( l == r ) { t [ p ]. dat_sum = a [ l ]; t [ p ]. dat_min = a [ l ]; return ; } int mid = ( l + r ) >> 1 ; build ( p << 1 , l , mid ), build ( p << 1 | 1 , mid + 1 , r ); pushup ( p ); return ; }","title":"\u5efa\u6811"},{"location":"algor/ds/segtree/#_7","text":"\u8fd9\u4e2a\u64cd\u4f5c\u7528\u4e8e\u4fee\u6539\u67d0\u4e00\u4e2a\u4f4d\u7f6e \\(x\\) \u7684\u503c\u4e3a \\(v\\) \u3002 \u53ef\u4ee5\u7c7b\u6bd4\u5efa\u6811\u7684\u8fc7\u7a0b\u3002 \u6211\u4eec\u4e00\u76f4\u9012\u5f52\u4e0b\u53bb\uff0c\u627e\u5230\u7ef4\u62a4\u8fd9\u4e2a\u4f4d\u7f6e \\(x\\) \u7684\u8282\u70b9 \\(p\\) \uff0c\u4ee4 \\(\\text{t[p].dat} \\gets v\\) \uff0c\u7136\u540e\u4e0d\u65ad\u4e0a\u4f20\u5373\u53ef\u3002 \u627e \\(x\\) \u53ea\u9700\u8981\u6bd4\u8f83 \\(x\\) \u548c \\(mid\\) \u7684\u5927\u5c0f\u3002 \u5982\u679c \\(x \\le mid\\) \uff0c\u8bf4\u660e\u4ed6\u5728\u5de6\u5b50\u6811\uff0c\u53cd\u4e4b\u5728\u53f3\u5b50\u6811\uff0c\u9012\u5f52\u4e0b\u53bb\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 void modify ( int p , int x , int v ) { if ( l == r ) { t [ p ]. dat_sum = v ; t [ p ]. dat_min = v ; return ; } int mid = ( t [ p ]. l + t [ p ]. r ) >> 1 ; if ( x <= mid ) modify ( p << 1 , x , v ); else modify ( p << 1 | 1 , x , v ); pushup ( p ); return ; }","title":"\u5355\u70b9\u4fee\u6539"},{"location":"algor/ds/segtree/#_8","text":"\u8fd9\u4e2a\u64cd\u4f5c\u7528\u4e8e\u67e5\u8be2\u4e00\u4e2a\u533a\u95f4 \\([ql, qr]\\) \u7684\u4fe1\u606f\uff0c\u6bd4\u5982\u533a\u95f4\u548c\u6216\u8005\u533a\u95f4\u6700\u503c\u3002 \u8fd8\u662f\u4ece\u6839\u8282\u70b9\u9012\u5f52\u4e0b\u53bb\uff0c\u8bbe \\(nl = \\text{t[p].l}, nr = \\text{t[p].r}\\) \u3002 \u7136\u540e\u5982\u679c\u5f53\u524d\u8282\u70b9 \\(p\\) \u6ee1\u8db3 \\([nl, nr] \\subset [ql, qr]\\) \u3002 \u90a3\u4e48\u5c31\u4e0d\u7528\u9012\u5f52\u4e0b\u53bb\u4e86\uff0c\u76f4\u63a5\u8fd4\u56de\u5f53\u524d\u8282\u70b9\u7684\u4fe1\u606f\u5373\u53ef\uff08\u8fd9\u662f\u4e00\u4e2a\u6709\u7528\u7684\u5c0f\u526a\u679d\uff09\u3002 \u5426\u5219\u5206\u5272\u9012\u5f52\u4e0b\u53bb\uff0c\u9012\u5f52\u56de\u6765\u4e4b\u540e\u628a\u5de6\u53f3\u5b50\u6811\u7684\u7b54\u6848\u5206\u522b\u5408\u5e76\uff0c\u7136\u540e\u8fd4\u56de\u8fd9\u4e2a\u503c\u5373\u53ef\u3002 \u4e00\u5f20\u56fe\u7406\u89e3\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b \u8282\u70b9\u6807\u9519\u4e86\uff0c\u51d1\u5408\u7740\u770b\uff0c\u4ee5\u540e\u6709\u65f6\u95f4\u518d\u6539\u3002 \u89e3\u91ca\uff1a \u5148\u67e5\u8be2 \\([2,6]\\) \uff0c\u8bbf\u95ee\u5230\u8282\u70b9 \\(1\\) \uff0c\u53d1\u73b0\u4e0d\u6ee1\u8db3 \\([nl, nr] \\subset [ql, qr]\\) \uff0c\u4e8e\u662f\u5411\u4e0b\u9012\u5f52\uff0c\u56e0\u4e3a \\(2(ql) \\le 4(mid)\\) \uff0c\u6240\u4ee5\u5de6\u513f\u5b50 \\(2\\) \u9012\u5f52\u4e0b\u53bb\uff0c\u56e0\u4e3a \\(6(qr) > 4(mid)\\) \uff0c\u6240\u4ee5\u53f3\u513f\u5b50 \\(4\\) \u53f7\u8282\u70b9\u4e5f\u8981\u9012\u5f52\u4e0b\u53bb\u3002 \u5bf9\u4e8e \\(2\\) \u53f7\u8282\u70b9\uff0c\u53d1\u73b0\u4ecd\u65e7\u4e0d\u6ee1\u8db3 \\([nl, nr] \\subset [ql, qr]\\) \uff0c\u6240\u4ee5\u7ee7\u7eed\u5411\u4e0b\u9012\u5f52 \\(5,6\\) \u53f7\u8282\u70b9\u3002 \u5bf9\u4e8e \\(5\\) \u53f7\u8282\u70b9\uff0c\u53d1\u73b0 \\(2(ql) \\le 1(mid)\\) \u4e0d\u6210\u7acb\uff0c\u4e0d\u9012\u5f52\uff0c\u53d1\u73b0 \\(6(qr) > 1(mid)\\) \u6210\u7acb\uff0c\u6240\u4ee5\u9012\u5f52 \\(10\\) \uff0c\u53d1\u73b0 \\(10\\) \u53f7\u8282\u70b9\u6ee1\u8db3\u4e86 \\([nl, nr] \\subset [ql, qr]\\) \uff0c\u76f4\u63a5\u8fd4\u56de\u3002 \u5bf9\u4e8e \\(6\\) \u53f7\u8282\u70b9\uff0c\u53d1\u73b0 \\([nl, nr] \\subset [ql, qr]\\) \uff0c\u76f4\u63a5\u8fd4\u56de\u3002 \u5bf9\u4e8e \\(4\\) \u53f7\u8282\u70b9\uff0c\u53d1\u73b0\u53ea\u6ee1\u8db3 \\(2(ql) \\le 6(mid)\\) \uff0c\u6240\u4ee5\u53ea\u9012\u5f52 \\(7\\) \u53f7\u8282\u70b9\uff0c\u7136\u540e\u53d1\u73b0 \\(7\\) \u6ee1\u8db3 \\([nl, nr] \\subset [ql, qr]\\) \uff0c\u76f4\u63a5\u8fd4\u56de\u3002 \u7136\u540e\u67e5\u8be2\u5c31\u505a\u5b8c\u4e86\u3002 \u8fd9\u4e2a\u5c0f\u526a\u679d\u7684\u590d\u6742\u5ea6\u8bc1\u660e \u6ce8\u610f\u5230\u4e00\u4e2a\u4e8b\u5b9e\u662f\uff0c\u6bcf\u4e00\u5c42\u4e0d\u6ee1\u8db3 \\([nl, nr] \\subset [ql, qr]\\) \u7684\u8282\u70b9\u6700\u591a\u53ea\u6709\u4e24\u4e2a\u3002 \u4e3a\u4ec0\u4e48\u5462\uff1f\u8003\u8651\u53cd\u8bc1\u6cd5\uff0c\u5047\u8bbe\u67d0\u4e00\u5c42\u51fa\u73b0\u4e86\u4e09\u4e2a\u8282\u70b9\u90fd\u4e0d\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\uff0c\u7531\u4e8e\u533a\u95f4\u662f\u8fde\u7eed\u7684\uff0c\u8fd9\u4e09\u4e2a\u8282\u70b9\u5fc5\u7136\u662f\u8fde\u7eed\u7684\u3002 \u7136\u540e\u65e2\u7136\u662f\u8fde\u7eed\u7684\uff0c\u90a3\u4e48\u81f3\u5c11\u6709\u4e24\u4e2a\u533a\u95f4\u7684\u5e76\u96c6\u662f\u4e00\u4e2a\u7ebf\u6bb5\u6811\u4e0a\u7ef4\u62a4\u7684\u5927\u533a\u95f4\uff0c\u90a3\u4e48\u5b9e\u9645\u8bbf\u95ee\u5230\u8fd9\u4e2a\u5927\u533a\u95f4\u7684\u65f6\u5019\u5c31\u5e94\u8be5\u8fd4\u56de\u4e86\u3002 \u7136\u540e\u5c31\u53ef\u4ee5\u8bc1\u4f2a\u4e86\u3002 \u90a3\u4e48\u56e0\u4e3a\u7ebf\u6bb5\u6811\u7684\u6df1\u5ea6\u662f \\(O(\\log n)\\) \u7ea7\u522b\u7684\uff0c\u6240\u4ee5\u8fd9\u4e2a\u7684\u590d\u6742\u5ea6\u662f \\(O(\\log n)\\) \u7684\uff0c\u5e26\u4e00\u4e2a\u56db\u500d\u5e38\u6570\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 i64 query_sum ( int p , int l , int r ) { i64 res = 0 ; if ( l <= t [ p ]. l && t [ p ]. r <= r ) return t [ p ]. dat_sum ; int mid = ( t [ p ]. l + t [ p ]. r ) >> 1 ; if ( l <= mid ) res += query_sum ( p << 1 , l , r ); if ( r > mid ) res += query_sum ( p << 1 | 1 , l , r ); return res ; } i64 query_min ( int p , int l , int r ) { i64 res = inf ; if ( l <= t [ p ]. l && t [ p ]. r <= r ) return t [ p ]. dat_min ; int mid = ( t [ p ]. l + t [ p ]. r ) >> 1 ; if ( l <= mid ) res = min ( res , query_sum ( p << 1 , l , r )); if ( r > mid ) res = min ( res , query_sum ( p << 1 | 1 , l , r )); return res ; } \u7b54\u6848\u6709\u53ef\u80fd\u8981\u4ece\u4e24\u8fb9\u4e00\u8d77\u53d6\u8fc7\u6765\uff0c\u6240\u4ee5\u4e5f\u80fd\u8bc1\u660e\u8fd0\u7b97\u9700\u8981\u6ee1\u8db3\u7ed3\u5408\u5f8b\u3002","title":"\u533a\u95f4\u67e5\u8be2"},{"location":"algor/ds/segtree/#_9","text":"\u8003\u8651\u5982\u679c\u533a\u95f4\u52a0\u533a\u95f4\u548c\u600e\u4e48\u529e\u3002 \u663e\u7136\u5982\u679c\u76f4\u63a5\u66b4\u529b\u9012\u5f52\u5230\u533a\u95f4\u91cc\u7684\u6bcf\u4e2a\u6570\u5bf9\u5e94\u7684\u53f6\u5b50\u8282\u70b9\u7136\u540e\u5411\u4e0a\u66f4\u65b0\uff0c\u590d\u6742\u5ea6\u663e\u7136\u4e0d\u80fd\u63a5\u53d7\uff0c\u5355\u6b21\u64cd\u4f5c\u5c31\u662f \\(O(n \\log n)\\) \u7684\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u6709\u7684\u65f6\u5019\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u9012\u5f52\u5230\u53f6\u5b50\u8282\u70b9\uff0c\u7c7b\u4f3c\u533a\u95f4\u67e5\u8be2\u7684\u90a3\u4e2a\u5c0f\u526a\u679d\uff0c\u6211\u4eec\u5982\u679c\u9012\u5f52\u5230\u4e00\u4e2a\u88ab\u8be2\u95ee\u533a\u95f4\u5b8c\u6574\u5305\u542b\u7684\u8282\u70b9\uff0c\u76f4\u63a5\u5728\u4e0a\u9762\u6253\u4e00\u4e2a\u201c\u6807\u8bb0\u201d\uff0c\u8868\u793a\u6211\u6446\u70c2\u4e86\uff0c\u4e0d\u5f80\u4e0b\u66f4\u65b0\u4e86\uff0c\u5148\u7ed9\u513f\u5b50\u8282\u70b9\u6b20\u7740\u8fd9\u4e2a\u66f4\u65b0\uff0c\u7b49\u4ee5\u540e\u9700\u8981\u7528\u5230\u7684\u65f6\u5019\u518d\u628a\u6807\u8bb0 \\(O(1)\\) \u4e0b\u653e\u7ed9\u513f\u5b50\u3002 \u5176\u672c\u8d28\u662f\uff0c\u6211\u5982\u679c\u8981\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\u8fdb\u884c\u66f4\u65b0\uff0c\u6211\u9996\u5148\u8981\u7528\u5b83\u7236\u4eb2\u7684 tag \u66f4\u65b0\u5b83\u7684\u6743\u503c\u518d\u8003\u8651\u5bf9\u4ed6\u8fdb\u884c\u66f4\u65b0\u3002 \u5148\u628a\u5b83\u7236\u4eb2\u8282\u70b9\u7684 tag \u5168\u90e8 pushdown \u4e0b\u6765\uff08\u5229\u7528\u7ed3\u5408\u5f8b\uff09\uff0c\u518d\u628a\u65b0\u7684 tag \uff08\u5b83\u5bf9\u4e8e\u5b83\u7684\u513f\u5b50\u7684\uff09\u7528\u7ed3\u5408\u5f8b\u4e5f\u6253\u5230\u5b83\u8eab\u4e0a\uff0c\u3002 \u8fd9\u4f53\u73b0\u7684\u5c31\u662f\u4e00\u4e2a \u201c\u65f6\u95f4\u4e0a\u7684\u7ed3\u5408\u5f8b\u201d\uff0c\u6211\u662f\u5148\u6709\u4e86\u7236\u4eb2\u8282\u70b9\u6b20\u7684\u66f4\u65b0\uff0c\u518d\u6709\u4e86\u73b0\u5728\u65b0\u6765\u7684\u66f4\u65b0\uff0c\u6211\u7684 tag \u4e5f\u662f\uff0c\u5148\u6709\u4e86\u7236\u4eb2\u6b20\u5b50\u6811\u4e0b\u653e\u5230\u6211\u8fd9\u91cc\u7684 tag\uff0c\u518d\u6709\u6211\u73b0\u5728\u6b20\u6211\u7684\u513f\u5b50\uff08\u5b50\u6811\uff09\u7684 tag\u3002 \u7c7b\u4f3c\u4e0a\u9762\u533a\u95f4\u8be2\u95ee\u7684\u590d\u6742\u5ea6\u8bc1\u660e\uff0c\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e2a\u64cd\u4f5c\u662f\u5355\u6b21 \\(O(n \\log n)\\) \u7684\u3002 Code 1 2 3 4 5 6 7 8 9 10 int len ( int p ) { return t [ p ]. r - t [ p ]. l + 1 ; } void pushdown ( int p ) { if ( t [ p ]. add ) { t [ p << 1 ]. dat += ( t [ p ]. add * len ( p << 1 )); t [ p << 1 | 1 ]. dat += ( t [ p ]. add * len ( p << 1 | 1 )); t [ p << 1 ]. minv += t [ p ]. add , t [ p << 1 | 1 ]. minv += t [ p ]. add ; // \u6c34\u4f4d\u7ebf\u539f\u7406 t [ p << 1 ]. add += t [ p ]. add , t [ p << 1 | 1 ]. add += t [ p ]. add ; t [ p ]. add = 0 ; // \u8bbe\u7f6e\u4e3a Z \u5173\u4e8e\u52a0\u6cd5\u7684\u5e7a\u5143 0. } } Luogu3372 \u7ebf\u6bb5\u68111 \u533a\u95f4\u52a0\u533a\u95f4\u6c42\u548c\uff0c \\(1\\le n \\le 10^5, 1\\le a_i \\le 2^{63} - 1\\) \u3002 \u5c31\u662f\u7ebf\u6bb5\u6811\u7684\u677f\u5b50\u9898\uff0c\u5199\u4e00\u4e2a\u6709 lazytag \u7684\u7ebf\u6bb5\u6811\u5373\u53ef\u3002 \u6ce8\u610f\u5f00 long long \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; using i64 = long long ; const int si = 1e5 + 10 ; int n , m ; i64 a [ si ]; class Segment_Tree { private : struct Node { int l , r ; i64 dat , tag ; } t [ si << 2 ]; inline void pushup ( int p ) { t [ p ]. dat = t [ p << 1 ]. dat + t [ p << 1 | 1 ]. dat ; } inline void pushdown ( int p ) { if ( ! t [ p ]. tag ) return ; t [ p << 1 ]. dat += 1l l * t [ p ]. tag * ( t [ p << 1 ]. r - t [ p << 1 ]. l + 1 ); t [ p << 1 | 1 ]. dat += 1l l * t [ p ]. tag * ( t [ p << 1 | 1 ]. r - t [ p << 1 | 1 ]. l + 1 ); t [ p << 1 ]. tag += t [ p ]. tag , t [ p << 1 | 1 ]. tag += t [ p ]. tag , t [ p ]. tag = 0 ; } public : void build ( int p , int l , int r ) { t [ p ]. l = l , t [ p ]. r = r , t [ p ]. tag = 0 ; if ( l == r ) { t [ p ]. dat = a [ l ]; return ; } int mid = ( l + r ) >> 1 ; build ( p << 1 , l , mid ), build ( p << 1 | 1 , mid + 1 , r ); pushup ( p ); return ; } void update ( int p , int l , int r , int v ) { if ( l <= t [ p ]. l && t [ p ]. r <= r ) { t [ p ]. dat += v * ( t [ p ]. r - t [ p ]. l + 1 ); t [ p ]. tag += v ; return ; } pushdown ( p ); // \u6ca1\u5230\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u9a6c\u4e0a\u8981\u9012\u5f52\u5b50\u6811\u4e86\uff0c\u4e5f\u8981 pushdown\u3002 int mid = ( t [ p ]. l + t [ p ]. r ) >> 1 ; if ( l <= mid ) update ( p << 1 , l , r , v ); if ( r > mid ) update ( p << 1 | 1 , l , r , v ); pushup ( p ); return ; } i64 query ( int p , int l , int r ) { i64 res = 0 ; if ( l <= t [ p ]. l && t [ p ]. r <= r ) return t [ p ]. dat ; pushdown ( p ); // \u67e5\u8be2\u8981\u67e5\u503c\uff0c\u9700\u8981\u5b50\u6811\u4fe1\u606f\uff0c\u5fc5\u7136\u8981 pushdown\u3002 int mid = ( t [ p ]. l + t [ p ]. r ) >> 1 ; if ( l <= mid ) res += query ( p << 1 , l , r ); if ( r > mid ) res += query ( p << 1 | 1 , l , r ); return res ; } }; Segment_Tree tr ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> m ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; tr . build ( 1 , 1 , n ); for ( int i = 1 ; i <= m ; ++ i ) { int opt , l , r ; i64 v ; cin >> opt ; if ( opt == 1 ) { cin >> l >> r >> v ; tr . update ( 1 , l , r , v ); } else { cin >> l >> r ; cout << tr . query ( 1 , l , r ) << endl ; } } return 0 ; } \u8fd9\u53ea\u662f\u4e00\u4e2a tag \u7684\u60c5\u51b5\uff0c\u8fd8\u53ef\u80fd\u6709\u591a\u4e2a tag\uff0c\u601d\u8003\u4e00\u4e0b\u600e\u4e48\u5f04\u3002 \u4e00\u5b9a\u8981\u6ce8\u610f\u5230\u4e00\u4e2a\u4e8b\u60c5\uff0c\u7ebf\u6bb5\u6811\u672c\u8d28\u4e0a\u662f\u5728\u7ef4\u62a4\u4e00\u4e2a\u6ee1\u8db3\u5e7a\u534a\u7fa4\u6027\u8d28\u7684\u4fe1\u606f\uff0c \u5982\u679c\u6211\u4eec\u60f3\u8981\u6253\u591a\u4e2a tag\uff0c\u8fd9\u4e9b tag \u9996\u5148\u5c31\u5fc5\u987b\u5728\u65f6\u95f4\u8f74\u4e0a\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff08\u53ef\u4ee5\u5408\u5e76\uff09\uff0c\u539f\u56e0\u4e0b\u6587\u4f1a\u63d0\u5230\u3002 \u6bd4\u5982\u6211\u4eec\u5148\u6253\u4e86\u4e00\u4e2a\u8fd0\u7b97 \\(\\oplus\\) \u7684\u6807\u8bb0 \\(x_0\\) \u7136\u540e \u6253\u4e86\u4e00\u4e2a \\(\\otimes\\) \u7684\u6807\u8bb0 \\(y_0\\) \uff0c\u5f53\u524d\u8282\u70b9\u5df2\u6709\u7684 tag \u72b6\u6001\u8bb0\u5f55\u4e3a \\((x_0, y_0)\\) \u3002 \u7136\u540e\u6211\u4eec\u53c8\u8fdb\u884c\u4e86\u4e00\u6b21 \\(\\oplus\\) \u7684\u6807\u8bb0 \\(x_1\\) \uff0c \u518d \u8fdb\u884c\u4e86\u4e00\u6b21 \\(\\otimes\\) \u7684\u64cd\u4f5c \\(y_1\\) \uff0c\u8bb0\u5f55\u4e3a \\((x_1,y_1)\\) 1 \u3002 \u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u77e5\u9053\uff0c\u600e\u4e48\u6837\u5408\u5e76 \\((x_0, y_0), (x_1, y_1)\\) \uff0c\u4e5f\u5c31\u662f\u9700\u8981\u77e5\u9053 \\((x_0, y_0) \\circ (x_1, y_1) = (x_2, y_2)\\) \u4e2d\u7684 \\(x_2, y_2\\) \u5206\u522b\u662f\u4ec0\u4e48\uff0c\u4e14\u6ee1\u8db3\uff1a\u76f4\u63a5\u8003\u8651 \\((x_2, y_2)\\) \u5bf9\u4fe1\u606f\u7684\u4f5c\u7528\u7b49\u4ef7\u4e8e\u8003\u8651\u5148 \\((x_0, y_0)\\) \u5bf9\u4fe1\u606f\u7684\u4f5c\u7528\uff0c\u7136\u540e\u518d\u8003\u8651 \\((x_1, y_1)\\) \u5bf9\u4fe1\u606f\u7684\u4f5c\u7528\uff08\u6807\u8bb0 \u4e0d\u9700\u8981 \u6ee1\u8db3\u4ea4\u6362\u5f8b\uff09\u3002 \\(\\circ\\) \u8868\u793a\u590d\u5408\uff08\u5408\u5e76\uff09\u8fd9\u4e24\u4e2a Tag\uff0c\u8fd9\u91cc\u7684\u4e0b\u6807\u8868\u793a\u7684\u662f\u65f6\u95f4\u8f74\u4e0a\u7684\u4f4d\u7f6e\u3002 \u6240\u4ee5\u5176\u5b9e tag \u8981\u5728\u65f6\u95f4\u8f74\u4e0a\u6ee1\u8db3\u7ed3\u5408\u5f8b\u7684\u539f\u56e0\u5c31\u662f\uff0c\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u4e0b\u653e\u4e86\u4e00\u4e2a\u6807\u8bb0 \\(t_3\\) \uff0c\u4e4b\u524d\u6709\u4e00\u4e2a\u6807\u8bb0 \\(t_2\\) \u5728\u5f53\u524d\u8282\u70b9\u4e0a\u3002 \u6b64\u65f6 \\(t_3 \\circ t_2\\) \u4e0d\u4f1a\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u4f46\u662f \\(t_2\\) \u53ef\u80fd\u5728\u4e4b\u524d\u7684\u8fc7\u7a0b\u4e2d\u5df2\u7ecf\u548c\u524d\u9762\u7684\u6807\u8bb0 \\(t_1\\) \u5408\u5e76\u4e86\uff0c\u800c \\(t_1\\) \u53c8\u6709\u53ef\u80fd\u548c \\(t_0\\) \u5408\u5e76\u3002 \u6240\u4ee5\u5982\u679c\u4e0d\u6ee1\u8db3\u65f6\u95f4\u8f74\u4e0a\u7684\u7ed3\u5408\u5f8b\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u4f1a\u6709 \\((t_2 \\circ t_1) \\circ t_0 \\not= t_2 \\circ (t_1 \\circ t_0)\\) \uff0c\u8868\u73b0\u51fa\u6765\u7684\u7ed3\u679c\u5c31\u662f\uff0c\u5bf9\u4fe1\u606f\u7684\u4f5c\u7528\u6548\u679c\u4e0d\u7b26\u5408\u9884\u671f\uff0c\u4e0d\u80fd\u8fbe\u5230\u8981\u6c42\u3002 \u663e\u7136\u4e24\u4e2a tag \u6ca1\u6709\u4ec0\u4e48\u5173\u7cfb\u7684\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u53ea\u8003\u8651 \\((x_0, y_0)\\) \uff0c\u8fd9\u4e2a\u6bd4\u8f83 ez\uff0c\u4e0d\u8fc7\u5982\u679c\u4e24\u4e2a tag \u4e4b\u95f4\u76f8\u4e92\u6709\u5f71\u54cd\uff0c\u5c31\u9700\u8981\u8003\u8651 \\((x_0, y_0)\\) \u548c \\((y_0, x_0)\\) \u5230\u5e95\u5e94\u8be5\u9009\u54ea\u4e00\u4e2a\uff08\u8981\u5224\u5b9a\u5148\u505a\u4ec0\u4e48\u8fd0\u7b97\uff09\uff0c\u9009\u62e9\u4f9d\u636e\u662f\u5408\u5e76\u524d\u540e\u7684\u6807\u8bb0\u7684\u987a\u5e8f\u80fd\u5426\u7edf\u4e00\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u533a\u95f4\u52a0\u533a\u95f4\u4e58\u533a\u95f4\u6c42\u548c\u3002 \u548c\u7ebf\u6bb5\u6811\u4e00\u5dee\u4e0d\u591a\uff0c\u53ea\u4e0d\u8fc7\u591a\u4e86\u4e00\u4e2a\u9700\u8981\u7ef4\u62a4\u7684\u8fd0\u7b97\uff1a\u4e58\u6cd5\u3002 \u6240\u4ee5\u8fd9\u91cc\u5e94\u5f53\u8003\u8651\u7684\u662f\u600e\u4e48\u628a\u4e24\u4e2a\u5404\u81ea\u5c01\u95ed\u53c8\u76f8\u4e92\u6709\u5f71\u54cd\u7684\u4fe1\u606f\u590d\u5408\u8d77\u6765\u7ef4\u62a4\u3002 \u8003\u8651\u5982\u679c\u53ea\u6709\u533a\u95f4\u52a0\u533a\u95f4\u6c42\u548c\uff0ctag \u8bb0\u5f55\u7684\u5c31\u662f\u513f\u5b50\u91cc\u9762\u6240\u6709\u6570\u8981\u52a0\u591a\u5c11\u3002 \u5982\u679c\u5728\u6765\u4e00\u4e2a\u533a\u95f4\u4e58\u600e\u4e48\u529e\uff0c\u5c31\u8003\u8651\u5bf9\u8fd9\u4e24\u4e2a\u8fd0\u7b97\u590d\u5408\u3002 \u6bd4\u5982\u6211\u5148\u4e58 \\(x\\) \u7136\u540e\u52a0\u4e0a\u4e00\u4e2a \\(y\\) \uff0c\u513f\u5b50\u8282\u70b9\u91cc\u7684\u6bcf\u4e2a\u6570 \\(value\\) \u5c31\u5e94\u5f53\u53d8\u6210 \\(value \\times x + y\\) \u3002 \u7136\u540e\u5982\u679c\u7ee7\u7eed\u590d\u5408\u5c31\u662f \\((((value \\times x) + y) \\times z) + a\\dots\\) \u8fd9\u6837\uff08\u5148\u52a0\u540e\u4e58\u4e5f\u5df2\u7ecf\u88ab\u5305\u542b\u5728\u60c5\u51b5\u91cc\u9762\u4e86\uff09\u3002 \u56e0\u4e3a\u6211\u4eec\u6ca1\u6cd5\u77e5\u9053\u5177\u4f53\u987a\u5e8f\uff0c\u6709\u53ef\u80fd\u662f \\(++\\times+\\times\\times+++\\) \u8fd9\u79cd\u7684\uff0c\u4f60\u6bcf\u6b21\u8f6c\u6362\u90fd\u9700\u8981\u65b0\u5f00\u4e00\u4e2a tag \u8bb0\u5f55\u3002 \u6211\u4eec\u80af\u5b9a\u4e0d\u60f3\u8ba9\u6bcf\u4e2a\u8282\u70b9\u7684 tag \u90fd\u6709\u5de8\u5927\u591a\u4e2a\uff0c\u6211\u4eec\u5e0c\u671b\u5c31\u53ea\u6709\u4e24\u4e2a\uff0c\u4e5f\u5c31\u610f\u5473\u7740\u6211\u4eec\u53ea\u5e0c\u671b\u4e58\u9664\u6cd5\u53d8\u6362\u4e00\u6b21\uff0c\u5373\u628a\u4e58\u90fd\u4e22\u5230\u4e00\u8d77\uff0c\u52a0\u90fd\u4e22\u5230\u4e00\u8d77\u3002 \u6240\u4ee5\u89c2\u5bdf\u4e00\u4e0b\u8fd9\u4e2a\u5f0f\u5b50\u5f62\u5f0f\uff0c\u53d1\u73b0\u53ef\u4ee5\u4e58\u6cd5\u5206\u914d\u5f8b\uff0c\u6211\u4eec\u5728\u533a\u95f4\u4e58\u6cd5\u6253\u6807\u8bb0\u7684\u65f6\u5019\u7ed9\u5148\u52a0\u4e0a\u7684 add \u4e58\u4e0a\u540e\u9762\u7684 mul\uff0c\u7136\u540e pushdown \u7684\u65f6\u5019 add \u5c31\u80fd\u5355\u72ec\u62c9\u51fa\u6765\u52a0\u4e86\u3002 \u4e0b\u653e\u6807\u8bb0\u7684\u65f6\u5019 add \u9700\u8981\u5148\u4e58\u4e0a\u7236\u4eb2\u8282\u70b9\u7684 mul\uff0c\u7136\u540e\u518d\u52a0\u4e0a\u7236\u4eb2\u8282\u70b9\u7684 add\uff0c\u56e0\u4e3a\u7236\u4eb2\u8282\u70b9\u7684 add \u5728\u533a\u95f4\u4e58\u6253\u6807\u8bb0\u7684\u65f6\u5019\u5df2\u7ecf\u4e58\u8fc7 mul \u4e86\uff0c\u76f4\u63a5\u63d0\u51fa\u6765\u52a0\u5c31\u884c\u4e86\u3002 \u66f4\u5f62\u5f0f\u5316\u7684\u8bf4\uff0c\u6211\u4eec\u73b0\u5728\u8bb0\u5f55\u4e86\u4e24\u4e2a tag\uff0c\u4e00\u4e2a\u52a0\u6cd5\uff0c\u4e00\u4e2a\u4e58\u6cd5\uff0c\u6211\u4eec\u8bb0\u4e3a \\((add_i, mul_i)\\) \u3002 \u5047\u8bbe\u5f53\u524d\u5df2\u7ecf\u5b58\u5728\u5bf9\u4e8e\u5f53\u524d\u8282\u70b9\u4f5c\u7528\u7684\u4e00\u4e2a\u6807\u8bb0 \\((add_0, mul_0)\\) \uff0c\u73b0\u5728\u65b0\u6765\u4e86\u4e00\u4e2a\u6807\u8bb0 \\((add_1, mul_1)\\) \uff0c\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u6c42\u51fa \\((add_0, mul_0)\\circ (add_1, mul_1)\\) \uff0c\u5e76\u4e14\u8981\u89c4\u5b9a\u597d\u662f\u5148 add \u8fd8\u662f\u5148 mul\u3002 \u53ef\u4ee5\u53d1\u73b0\u8fd9\u91cc\u662f\u5728\u5bf9\u7740\u6574\u4f53\u6253\u6807\u8bb0\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u8003\u8651\u5f53\u524d\u533a\u95f4\u7ef4\u62a4\u7684\u503c\u5728\u52a0\u5165\u65b0\u7684\u6807\u8bb0\u4e4b\u540e\u201c\u600e\u4e48\u53d8\u5316\u201d\u4e86\uff0c\u5e76\u8003\u8651\u600e\u4e48\u5408\u5e76\u539f\u6709\u6807\u8bb0\u548c\u65b0\u52a0\u5165\u7684\u6807\u8bb0\u3002 \u5148\u5047\u8bbe\u5148\u52a0\u540e\u4e58\uff0c\u663e\u7136\u6709\uff1a \\[ \\begin{aligned} dat &= ((dat + add_0) \\times mul_0 + add_1) \\times mul_1\\\\ &= (dat \\times mul_0 + add_0 \\times mul_0 + add_1) \\times mul_1\\\\ &= (dat \\times mul_0 \\times mul_1) + (add_0 \\times mul_0 \\times mul_1) + (add_1 \\times mul_1) \\end{aligned} \\] \u597d\u50cf\u6ca1\u6cd5\u628a\u5408\u5e76\u540e\u7684\u6807\u8bb0\u4e5f\u7edf\u4e00\u987a\u5e8f\uff08\u4e0d\u80fd\u5199\u6210 \\((dat + a)\\times b\\) \u7684\u5f62\u5f0f\uff09\u3002 \u770b\u770b \\((mul_0, add_0)\\) \u7684\u987a\u5e8f\u5982\u4f55\u3002 \\[ \\begin{aligned} dat &= (dat \\times mul_0 + add_0) \\times mul_1 + add_1\\\\ &= (dat \\times mul_0 \\times mul_1) + (add_0 \\times mul_1 + add_1)\\\\ &= dat \\times (mul_0 \\times mul_1) + (add_0 \\times mul_1 + add_1) \\end{aligned} \\] \u7136\u540e\u53ef\u4ee5\u5f88\u6109\u5feb\u7684\u53d1\u73b0\u80fd\u628a\u5408\u5e76\u540e\u7684\u6807\u8bb0\u7684\u987a\u5e8f\u548c\u5df2\u6709\u7684\u6807\u8bb0\u7684\u987a\u5e8f\u7edf\u4e00\u3002 \u6240\u4ee5\u53ef\u4ee5\u5f97\u5230\uff1a \\((mul_0, add_0) \\circ (mul_1, add_1) = (mul_0 \\times mul_1, add_0 \\times mul_1 + add_1)\\) \u3002 \u5177\u4f53\u5b9e\u73b0\u7684\u65f6\u5019\u5c31\u53ea\u9700\u8981\uff1a\u5bf9\u4e8e\u4e58\u6cd5\u6807\u8bb0\u6211\u76f4\u63a5\u4e58\u4e86\u4e0b\u653e\uff0c\u6253\u4e58\u6cd5\u6807\u8bb0\u7684\u65f6\u5019\u987a\u4fbf\u7ed9\u52a0\u6cd5\u4e58\u4e00\u4e0b\uff0c\u5bf9\u4e8e\u52a0\u6cd5\u6807\u8bb0\u6211\u76f4\u63a5\u5148\u4e58\u4e0a\u7236\u4eb2\u8282\u70b9\u7ed9\u7684 mul\uff0c\u7136\u540e\u518d\u52a0\u4e0a\u7236\u4eb2\u8282\u70b9\u7ed9\u7684 add\uff08\u8fd9\u4e2a\u5728\u4e4b\u524d\u5df2\u7ecf\u4e58\u8fc7\u4e86\uff0c\u4e58\u6cd5\u5206\u914d\u5f8b\uff09\u3002 \u5f88\u663e\u7136\u8fd9\u4e2a\u5bf9\u4e8e\u56db\u79cd\u52a0\u6cd5\u4e58\u6cd5\u7684\u7ec4\u5408\u987a\u5e8f\u90fd\u6ee1\u8db3\uff08\u68c0\u67e5\u8fd9\u4e2a tag \u5bf9\u4e8e\u7ebf\u6bb5\u6811\u4fe1\u606f\u7684\u4f5c\u7528\u80fd\u5426\u5904\u7406\uff09\u3002 \u52a0\u6cd5\u4e4b\u540e\u52a0\u6cd5\u5c31\u4e0d\u8003\u8651 mul \u7684\u5904\u7406\uff0c\u663e\u7136\u6210\u7acb\u3002\u4e58\u6cd5\u4e4b\u540e\u4e58\u6cd5\u540c\u7406\u3002 \u5148\u4e58\u540e\u52a0\u5c31\u662f\u6211\u4eec\u89c4\u5b9a\u7684\u5f62\u5f0f\uff0c\u4e8e\u662f\u770b\u770b\u5148\u52a0\u540e\u4e58\u7684\u60c5\u51b5\u80fd\u4e0d\u80fd\u6ee1\u8db3\uff1a\u53ef\u4ee5\u8003\u8651\u6700\u65e9\u5b58\u5728\u7684\u6807\u8bb0\u662f \\((1, 0)\\) \uff08\u5e7a\u5143\uff09\uff0c\u7136\u540e\u518d\u6253\u4e86\u4e00\u4e2a\u6807\u8bb0 \\((1, add)\\) \uff0c\u518d\u6253\u4e86\u4e00\u4e2a\u6807\u8bb0 \\((mul, 0)\\) \uff0c\u5c55\u5f00\u5f0f\u5b50\u4e4b\u540e\u663e\u7136\u6210\u7acb\u3002 \u6240\u4ee5\u8fd9\u79cd tag \u65b9\u5f0f\u662f\u53ef\u884c\u7684\u3002 Luogu3373 \u7ebf\u6bb5\u68112 \u533a\u95f4\u52a0\u533a\u95f4\u4e58\uff0c\u8be2\u95ee\u533a\u95f4\u548c\u5bf9 \\(p\\) \u53d6\u6a21\u3002 \\(1\\le n, q\\le 10^5\\) \u3002 \u5c31\u662f\u521a\u521a\u5df2\u7ecf\u8bf4\u4e86\u7684\u95ee\u9898\uff0c\u8fd9\u91cc\u76f4\u63a5\u7ed9\u51fa\u5b9e\u73b0\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; // const i64 mod = 998244353ll; int mod ; int n , m ; i64 a [ si ]; class Segment_Tree { private : struct Node { int l , r ; i64 dat , add , mul ; } t [ si << 2 ]; inline void pushup ( int p ) { t [ p ]. dat = ( t [ p << 1 ]. dat + t [ p << 1 | 1 ]. dat ) % mod ; } inline void pushdown ( int p ) { if ( ! t [ p ]. add && t [ p ]. mul == 1 ) return ; t [ p << 1 ]. dat = ( t [ p << 1 ]. dat * t [ p ]. mul + t [ p ]. add * ( t [ p << 1 ]. r - t [ p << 1 ]. l + 1 )) % mod ; t [ p << 1 | 1 ]. dat = ( t [ p << 1 | 1 ]. dat * t [ p ]. mul + t [ p ]. add * ( t [ p << 1 | 1 ]. r - t [ p << 1 | 1 ]. l + 1 )) % mod ; t [ p << 1 ]. mul = ( t [ p << 1 ]. mul * t [ p ]. mul ) % mod ; t [ p << 1 | 1 ]. mul = ( t [ p << 1 | 1 ]. mul * t [ p ]. mul ) % mod ; t [ p << 1 ]. add = ( t [ p << 1 ]. add * t [ p ]. mul + t [ p ]. add ) % mod ; t [ p << 1 | 1 ]. add = ( t [ p << 1 | 1 ]. add * t [ p ]. mul + t [ p ]. add ) % mod ; t [ p ]. add = 0 , t [ p ]. mul = 1 ; } public : void build ( int p , int l , int r ) { t [ p ]. l = l , t [ p ]. r = r , t [ p ]. mul = 1l l , t [ p ]. add = 0l l ; if ( l == r ) { t [ p ]. dat = a [ l ] % mod ; return ; } int mid = ( l + r ) >> 1 ; build ( p << 1 , l , mid ), build ( p << 1 | 1 , mid + 1 , r ); pushup ( p ); return ; } void update_add ( int p , int l , int r , i64 v ) { if ( l <= t [ p ]. l && t [ p ]. r <= r ) { t [ p ]. add = ( t [ p ]. add + v ) % mod ; t [ p ]. dat = ( t [ p ]. dat + v * ( t [ p ]. r - t [ p ]. l + 1 )) % mod ; return ; } pushdown ( p ); int mid = ( t [ p ]. l + t [ p ]. r ) >> 1 ; if ( l <= mid ) update_add ( p << 1 , l , r , v ); if ( r > mid ) update_add ( p << 1 | 1 , l , r , v ); pushup ( p ); return ; } void update_mul ( int p , int l , int r , i64 v ) { if ( l <= t [ p ]. l && t [ p ]. r <= r ) { t [ p ]. add = ( t [ p ]. add * v ) % mod ; t [ p ]. mul = ( t [ p ]. mul * v ) % mod ; t [ p ]. dat = ( t [ p ]. dat * v ) % mod ; return ; } pushdown ( p ); int mid = ( t [ p ]. l + t [ p ]. r ) >> 1 ; if ( l <= mid ) update_mul ( p << 1 , l , r , v ); if ( r > mid ) update_mul ( p << 1 | 1 , l , r , v ); pushup ( p ); return ; } i64 query ( int p , int l , int r ) { i64 res = 0l l ; if ( l <= t [ p ]. l && t [ p ]. r <= r ) return t [ p ]. dat % mod ; pushdown ( p ); int mid = ( t [ p ]. l + t [ p ]. r ) >> 1 ; if ( l <= mid ) res = ( res + query ( p << 1 , l , r )) % mod ; if ( r > mid ) res = ( res + query ( p << 1 | 1 , l , r )) % mod ; return res ; } }; Segment_Tree tr ; // \u4e0d\u8981\u5230\u4e3b\u51fd\u6570\u91cc\u5b9a\u4e49\uff0c\u5bb9\u6613\u7206\u6808\u3002 int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> m >> mod ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; tr . build ( 1 , 1 , n ); for ( int i = 1 ; i <= m ; ++ i ) { int opt , l , r ; cin >> opt ; if ( opt == 2 ) { i64 v ; cin >> l >> r >> v ; tr . update_add ( 1 , l , r , v ); } if ( opt == 1 ) { i64 v ; cin >> l >> r >> v ; tr . update_mul ( 1 , l , r , v ); } if ( opt == 3 ) { cin >> l >> r ; cout << tr . query ( 1 , l , r ) << endl ; } } return 0 ; } \u603b\u7ed3\u4e00\u4e0b\uff0c\u5e26 lazy \u7684\u7ebf\u6bb5\u6811\u9898\u4e00\u822c\u5c31\u8fd9\u51e0\u6b65\uff1a \u5982\u679c\u7ed9\u4e00\u4e2a\u533a\u95f4\u6574\u4f53\u6253\u4e0a\u6807\u8bb0\uff0c\u80fd\u5426\u786e\u5b9a\u533a\u95f4\u7ef4\u62a4\u7684\u503c\u600e\u4e48\u53d8\u5316 \u5982\u679c\u7ed9\u4e00\u4e2a\u533a\u95f4\u6574\u4f53\u6253\u4e0a\u6807\u8bb0\uff0c\u80fd\u5426\u786e\u5b9a tag \u600e\u4e48\u5408\u5e76\u3002 \u5f62\u5f0f\u5316\u7684\u8bf4\uff0c\u61d2\u6807\u8bb0\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u4fe1\u606f\u5e7a\u534a\u7fa4 \\((I, +)\\) \u548c\u5bf9\u4fe1\u606f\u7684\u4fee\u6539\u5e7a\u534a\u7fa4 \\((D, *)\\) \uff0c\u8981\u6c42 \\(D\\) \u5bf9 \\(I\\) \u7684\u4f5c\u7528\u6ee1\u8db3\u5206\u914d\u7387\u3002 ref\uff1a zhqwq \u7684\u535a\u5ba2 - \u6211 \u6839 \u672c \u4e0d \u4f1a \u7ebf \u6bb5 \u6811|\u7ebf\u6bb5\u6811\u518d\u5b66\u4e60\u7b14\u8bb0 Github - ATcoder Library Documents dwt \u54e5\u54e5\u7684\u535a\u5ba2\uff1a links \u7c89\u5154\u7684\u53cb\u60c5\u8bb2\u89e3\uff0c\u4ee5\u53ca\u90a3\u53e5 \u300c\uff1f\u4f60\u6839\u672c\u4e0d\u662f\u840c\u65b0\u300d","title":"\u5ef6\u8fdf\u6807\u8bb0"},{"location":"algor/ds/segtree/#_10","text":"\u6b63\u5e38\u7684\u7ebf\u6bb5\u6811\u4e00\u822c\u90fd\u662f\u7528\u4e8c\u500d\u6807\u8bb0\u6cd5\u53bb\u6807\u8bb0\u513f\u5b50\u7684\u5e8f\u53f7\u3002 \u8fd9\u6837\u81f3\u5c11\u9700\u8981\u56db\u500d\u7a7a\u95f4\u624d\u4e0d\u4f1a\u51fa\u73b0 RE\u3002 \u4f46\u5728\u67d0\u4e9b\u7279\u6b8a\u7684\u60c5\u51b5\u4e0b\uff08\u6bd4\u5982\u540e\u9762\u7684\u6743\u503c\u7ebf\u6bb5\u6811\uff09\uff0c\u4f60\u9700\u8981\u7ef4\u62a4\u4e0b\u6807\u7684\u8303\u56f4\u53ef\u80fd\u975e\u5e38\u5927\uff0c\u5982\u679c\u771f\u7684\u8981\u5168\u90e8\u5efa\u6811\u5efa\u51fa\u6765\uff0c\u7a7a\u95f4\u5c31\u7206\u4e86\u3002 \u6b64\u65f6\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a\u7c7b\u4f3c\u7ebf\u6bb5\u6811\u61d2\u6807\u8bb0\u7684\u601d\u60f3\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u9700\u8981\u4f7f\u7528\uff0c\u90a3\u4e48\u6211\u4eec\u624d\u5efa\u7acb\u8fd9\u4e2a\u8282\u70b9\uff0c\u53cd\u4e4b\u5c31\u4e0d\u7528\u3002 \u4ece\u5b9e\u73b0\u4e0a\u6765\u8bb2\uff0c\u5c31\u662f\u521d\u59cb\u7684\u65f6\u5019\u53ea\u5efa\u7acb\u4e00\u4e2a\u6839\u8282\u70b9\u4ee3\u8868\u6574\u4e2a\u533a\u95f4\u3002 \u5f53\u9012\u5f52\u8bbf\u95ee\u5230\u7684\u8282\u70b9\u4e3a\u7a7a\u65f6\uff0c\u624d\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\uff0c\u5e76\u7ed9\u4ed6\u4e00\u4e2a\u7f16\u53f7\u3002 \u6b64\u5904\u7f16\u53f7\u7684\u65b9\u5f0f\u4e0d\u540c\u4e8e\u539f\u6765\u7684\u4e8c\u500d\u6807\u8bb0\u6cd5\uff0c\u53ea\u9700\u8981\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\u7684\u7f16\u53f7\u5c31\u53ef\u4ee5\u4e86\u3002 \u6b63\u5e38\u5199\u6cd5\u662f\u628a\u4e00\u4e2a\u8282\u70b9\u7684\u533a\u95f4\u4fe1\u606f\u76f4\u63a5\u9644\u52a0\u5230\u8282\u70b9\u4e0a\u3002 \u5728\u8fd9\u91cc\u5c31\u76f4\u63a5\u4f5c\u4e3a\u51fd\u6570\u7684\u53c2\u6570\u4f20\u9012\u4e86\u3002 \u4e00\u822c\u7a7a\u95f4\u8981\u5f00\u5927\u4e00\u70b9\uff0c\u6bd4\u5982 \\(\\times 60\\) \u8fd9\u79cd\u3002 \u6700\u597d\u662f\u5148\u4f30\u7b97\u4e00\u4e0b\u7a7a\u95f4\u7136\u540e\u518d\u5f00\u3002 \u4e00\u4efd\u533a\u95f4\u52a0\u533a\u95f4\u4e58\u533a\u95f4\u6c42\u548c\u7ebf\u6bb5\u6811\u7684\u52a8\u6001\u5f00\u70b9\u5199\u6cd5\uff1a Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 #define ls t[p].lson #define rs t[p].rson class Segment_Tree { private : struct Node { int lson , rson ; i64 dat , add , mul ; // \u5fc5\u987b\u8981\u65b0\u5efa\u8282\u70b9\u65f6\u518d\u521d\u59cb\u5316\u3002 // \u5426\u5219\u7f16\u8bd1\u5668\u4f1a\u63d0\u524d\u5904\u7406\u8fd9\u4e9b\u8d4b\u503c // \u7136\u540e\u4f60\u7684 binary \u5c31\u4f1a\u5de8\u5927\u65e0\u6bd4 // \u662f\u4f1a\u51fa\u4e8b\u7684\u3002 } t [ si * 60 ]; // \u7a7a\u95f4\u4e00\u5b9a\u8981\u5f00\u591f\u3002 int cnt_node = 0 ; inline int Newnode () { cnt_node ++ ; t [ cnt_node ]. lson = t [ cnt_node ]. rson = 0 ; t [ cnt_node ]. dat = 0l l , t [ cnt_node ]. add = 0l l , t [ cnt_node ]. mul = 1l l ; return cnt_node ; } inline void pushup ( int p ) { t [ p ]. dat = t [ ls ]. dat + t [ rs ]. dat ; } // pushdown \u4e5f\u662f\u9700\u8981\u4f20\u53c2\u7684\u4e86\u3002 inline void pushdown ( int p , int l , int r ) { if ( ! t [ p ]. add && t [ p ]. mul == 1 ) return ; if ( ! ls ) ls = Newnode (); if ( ! rs ) rs = Newnode (); // \u8bb0\u5f97\u5728\u8fd9\u91cc\u4e5f\u8981\u52a8\u6001\u5f00\u70b9\u3002 int mid = ( l + r ) >> 1 ; t [ ls ]. dat = ( t [ ls ]. dat * t [ p ]. mul + t [ p ]. add * ( mid - l + 1 )) % mod ; t [ rs ]. dat = ( t [ rs ]. dat * t [ p ]. mul + t [ p ]. add * ( r - mid )) % mod ; t [ ls ]. add = ( t [ ls ]. add * t [ p ]. mul + t [ p ]. add ) % mod ; t [ rs ]. add = ( t [ rs ]. add * t [ p ]. mul + t [ p ]. add ) % mod ; t [ ls ]. mul = ( t [ ls ]. mul * t [ p ]. mul ) % mod ; t [ rs ]. mul = ( t [ rs ]. mul * t [ p ]. mul ) % mod ; t [ p ]. add = 0l l , t [ p ]. mul = 1l l ; } public : void update_add ( int & p , int l , int r , int ql , int qr , i64 v ) { if ( l > r ) return ; // \u9012\u5f52\u8fb9\u754c\u3002 if ( ! p ) p = Newnode (); if ( ql <= l && r <= qr ) { t [ p ]. add = ( t [ p ]. add + v ) % mod ; t [ p ]. dat = ( t [ p ]. dat + v * ( r - l + 1 )) % mod ; return ; } pushdown ( p , l , r ); int mid = ( l + r ) >> 1 ; if ( ql <= mid ) update_add ( ls , l , mid , ql , qr , v ); if ( qr > mid ) update_add ( rs , mid + 1 , r , ql , qr , v ); pushup ( p ); return ; } void update_mul ( int & p , int l , int r , int ql , int qr , i64 v ) { if ( l > r ) return ; if ( ! p ) p = Newnode (); if ( ql <= l && r <= qr ) { t [ p ]. dat = ( t [ p ]. dat * v ) % mod ; t [ p ]. add = ( t [ p ]. add * v ) % mod ; t [ p ]. mul = ( t [ p ]. mul * v ) % mod ; return ; } pushdown ( p , l , r ); int mid = ( l + r ) >> 1 ; if ( ql <= mid ) update_mul ( ls , l , mid , ql , qr , v ); if ( qr > mid ) update_mul ( rs , mid + 1 , r , ql , qr , v ); pushup ( p ); return ; } i64 query ( int p , int l , int r , int ql , int qr ) { if ( l > r ) return 0l l ; if ( ! p ) return 0l l ; // \u4e0d\u5b58\u5728\u76f4\u63a5\u8fd4\u56de 0 \u5373\u53ef\u3002 if ( ql <= l && r <= qr ) return t [ p ]. dat % mod ; pushdown ( p , l , r ); int mid = ( l + r ) >> 1 ; i64 res = 0l l ; if ( ql <= mid ) res = ( res + query ( ls , l , mid , ql , qr )) % mod ; if ( qr > mid ) res = ( res + query ( rs , mid + 1 , r , ql , qr )) % mod ; return res % mod ; } } tr ;","title":"\u52a8\u6001\u5f00\u70b9"},{"location":"algor/ds/segtree/#_11","text":"\u5c5e\u4e8e\u4e00\u79cd\u53d8\u79cd\u7684\u7ebf\u6bb5\u6811\u3002 \u7ef4\u62a4\u7684\u4e0d\u662f\u5e8f\u5217\u800c\u662f\u5e8f\u5217\u7684\u503c\u57df\uff0c\u53ef\u4ee5\u628a\u5b83\u770b\u4f5c\u4e00\u4e2a\u52a8\u6001\u7684\u6876\uff08\u53f6\u5b50\u8282\u70b9\u5c31\u662f\u6876\uff09\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u7ef4\u62a4\u7684\u4e00\u6bb5 \\([l,r]\\) \u533a\u95f4\u7684\u4fe1\u606f\uff0c\u662f\u5e8f\u5217\u4e2d\u6743\u503c\u5728 \\([l,r]\\) \u4e2d\u7684\u6570\u7684\u4e2a\u6570\u3002 \u7528\u5b83\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e9b\u5e73\u8861\u6811\u7684\u529f\u80fd\u3002 \u56e0\u4e3a\u4e00\u822c\u7ef4\u62a4\u7684\u503c\u57df\u5f88\u5927\uff08 \\(10^9\\) \u8fd9\u79cd\uff09\uff0c\u6240\u4ee5\u53ef\u4ee5\u79bb\u6563\u5316\u6216\u8005\u52a8\u6001\u5f00\u70b9\uff0c\u4e2a\u4eba\u63a8\u8350\u540e\u4e00\u79cd\u3002","title":"\u6743\u503c\u7ebf\u6bb5\u6811"},{"location":"algor/ds/segtree/#_12","text":"\u548c\u6b63\u5e38\u7684\u52a8\u6001\u5f00\u70b9\u6ca1\u533a\u522b\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 using i64 = long long ; const int si = 1e5 + 10 ; int n , m ; // m \u662f\u503c\u57df\u3002 #define ls t[p].lson #define rs t[p].rson struct Node { i64 dat ; int lson , rson ; // \u8fd9\u91cc\u4e0d\u8981\u63d0\u524d\u8d4b\u503c\uff0cnewnode \u65f6\u518d\u8d4b\u503c\u3002 } t [ si * 60 ]; int tot = 0 , root = 0 ; inline int Newnode () { tot ++ ; t [ tot ]. dat = 0l l ; t [ tot ]. lson = 0 , t [ tot ]. rson = 0 ; return tot ; } inline void pushup ( int p ) { t [ p ]. dat = t [ ls ]. dat + t [ rs ]. dat ; } void modify ( int & p , int l , int r , int x , int v ) { if ( l > r ) return ; if ( ! p ) p = Newnode (); if ( l == r ) { t [ p ]. dat += v ; return ; } int mid = ( l + r ) >> 1 ; if ( x <= mid ) modify ( ls , l , mid , x , v ); else modify ( rs , mid + 1 , r , x , v ); pushup ( p ); return ; } i64 query ( int p , int l , int r , int ql , int qr ) { if ( l > r ) return 0l l ; if ( ! p ) return 0l l ; if ( ql <= l && r <= qr ) return t [ p ]. dat ; int mid = ( l + r ) >> 1 ; if ( ql <= mid ) modify ( ls , l , mid , ql , qr ); if ( qr > mid ) modify ( rs , mid + 1 , r , ql , qr ); pushup ( p ); return ; }","title":"\u6b63\u5e38\u64cd\u4f5c"},{"location":"algor/ds/segtree/#_13","text":"\u8fd9\u4e2a\u76f4\u63a5\u5728\u5bf9\u5e94\u4f4d\u7f6e\u5355\u70b9\u52a0\u51cf\u4e00\u5c31\u884c\u3002 Code 1 2 3 4 5 6 void insert ( int v ) { modify ( root , 1 , m , v , 1 ); } void remove ( int v ) { modify ( root , 1 , m , v , -1 ); }","title":"\u63d2\u5165/\u5220\u9664"},{"location":"algor/ds/segtree/#k","text":"\u8fd9\u91cc\u8981\u7528\u5230\u7ebf\u6bb5\u6811\u4e8c\u5206\u7684\u601d\u60f3\u3002 \u5047\u8bbe\u8981\u67e5\u8be2\u5168\u5c40\u7b2c \\(k\\) \u5927\u3002 \u5f53\u524d\u9012\u5f52\u5230\u7684\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\u6743\u503c\u548c\u5206\u522b\u4e3a \\(ls, rs\\) \u3002 \u5982\u679c \\(k \\le ls\\) \uff0c\u90a3\u4e48\u9012\u5f52\u67e5\u5de6\u5b50\u6811\u3002 \u53cd\u4e4b\u4ee4 \\(k \\gets k - ls\\) \uff0c\u7136\u540e\u5728\u53f3\u5b50\u6811\u91cc\u67e5\u7b2c \\(k\\) \u5927\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u5c31\u662f\u5728\u4e8c\u5206\u7b2c \\(k\\) \u5927\u5e94\u5f53\u662f\u591a\u5c11\u3002 \u53ef\u4ee5\u628a\u6574\u9897\u7ebf\u6bb5\u6811\u201c\u538b\u5e73\u201d\u4e86\u6765\u770b\u3002 Code 1 2 3 4 5 6 7 8 9 i64 kth ( int p , int l , int r , int k ) { if ( l == r ) return t [ p ]. dat ; int mid = ( l + r ) >> 1 ; if ( t [ ls ]. dat >= k ) kth ( ls , l , mid , k ); else kth ( rs , mid + 1 , r , k - t [ ls ]. dat ); }","title":"\u52a8\u6001\u5168\u5c40\u7b2c k \u5927\uff08\u7ebf\u6bb5\u6811\u4e8c\u5206\uff09"},{"location":"algor/ds/segtree/#_14","text":"\u67e5\u8be2\u67d0\u4e00\u4e2a\u6570 \\(x\\) \u7684\u6392\u540d\u3002 \u76f4\u63a5\u67e5\u7ebf\u6bb5\u6811\u4e0a \\([1,x)\\) \u7684\u548c\u7136\u540e\u52a0\u4e00\u5373\u53ef\u3002 Code 1 2 3 i64 rnk ( int v ) { return query ( root , 1 , m , 1 , v - 1 ) + 1 ; }","title":"\u67e5\u8be2\u6392\u540d"},{"location":"algor/ds/segtree/#_15","text":"\u524d\u9a71\u76f4\u63a5\u5148\u67e5\u8be2 \\(x\\) \u7684\u6392\u540d \\(rk\\) \uff0c\u7136\u540e\u67e5\u7b2c \\(rk - 1\\) \u5927\u5373\u53ef\u3002 \u540e\u7ee7\u7c7b\u4f3c\u3002 Code 1 2 3 4 5 6 i64 pre ( int v ) { return kth ( rnk ( v ) - 1 ); } i64 nex ( int v ) { return kth ( t [ root ]. dat - query ( root , 1 , m , v + 1 , m ) + 1 ); }","title":"\u67e5\u8be2\u524d\u9a71\u540e\u7ee7"},{"location":"algor/ds/segtree/#_16","text":"\u6709\u7684\u65f6\u5019\u9700\u8981\u5bf9\u540c\u4e00\u4e2a\u503c\u57df\u5728\u591a\u9897\u4e0d\u540c\u7684\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u4e0a\u8fdb\u884c\u4fee\u6539\u3002 \u7136\u540e\u8ba1\u7b97\u7b54\u6848\u65f6\u9700\u8981\u7efc\u5408\u5b83\u4eec\u7684\u7b54\u6848\u3002 \u4e5f\u5c31\u662f\u6211\u4eec\u9700\u8981\u4e24\u4e24\u5408\u5e76\u8fd9\u4e9b\u7ebf\u6bb5\u6811\u3002 \u56e0\u4e3a\u7ef4\u62a4\u7684\u503c\u57df\u76f8\u540c\uff0c\u90a3\u4e48\u663e\u7136\u5b83\u4eec\u5bf9\u4e8e\u503c\u57df\u7684\u5b50\u533a\u95f4\u7684\u5212\u5206\u4e5f\u662f\u4e00\u6837\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u540c\u65f6\u4ece\u4e24\u9897\u7ebf\u6bb5\u6811\u7684\u6811\u6839\u5f00\u59cb\uff0c\u7528 \\(p,q\\) \u4e24\u4e2a\u6307\u9488 \u540c\u6b65 \u5411\u4e0b\u9012\u5f52\u3002 \u53ef\u80fd\u4f1a\u51fa\u73b0\u8fd9\u56db\u79cd\u60c5\u51b5\uff1a \\(p\\) \u6ca1\u6709\u5efa\u7acb\u8282\u70b9\uff0c\u800c \\(q\\) \u5efa\u7acb\u6709\u8282\u70b9\u3002 \\(q\\) \u6ca1\u6709\u5efa\u7acb\u8282\u70b9\uff0c\u800c \\(p\\) \u5efa\u7acb\u6709\u8282\u70b9\u3002 \\(p,q\\) \u90fd\u6ca1\u6709\u5efa\u7acb\u8fd9\u4e2a\u8282\u70b9\u3002 \\(p,q\\) \u90fd\u6709\u5efa\u7acb\u8fd9\u4e2a\u8282\u70b9\u3002 \u5bf9\u4e8e \\(1,2\\) \uff0c\u76f4\u63a5\u628a\u975e\u7a7a\u8282\u70b9\u4f5c\u4e3a\u5408\u5e76\u540e\u7684\u8282\u70b9\u3002 \u5bf9\u4e8e \\(3\\) \uff0c\u65e2\u7136\u4f60\u4fe9\u90fd\u6ca1\u6709\uff0c\u90a3\u5408\u5e76\u540e\u4e5f\u6ca1\u5fc5\u8981\u8981\u8fd9\u4e2a\u70b9\uff0c\u4e5f\u5c31\u662f\u5408\u5e76\u540e\u4ecd\u65e7\u6ca1\u6709\u8fd9\u4e2a\u8282\u70b9\u3002 \u5bf9\u4e8e \\(4\\) \uff0c\u65e2\u7136\u4f60\u4eec\u90fd\u6709\uff0c\u90a3\u5c31\u5408\u5e76\u4f60\u4eec\u7684\u4fe1\u606f\uff08\u7c7b\u4f3c\u4e8e\u666e\u901a\u7ebf\u6bb5\u6811\u7684 Pushup\uff09\uff0c\u7136\u540e\u968f\u4fbf\u627e\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3a\u5408\u5e76\u4e4b\u540e\u7684\u8282\u70b9\uff08\u4e00\u822c\u662f \\(p\\) \uff09 Code 1 2 3 4 5 6 7 8 9 10 11 12 int merge ( int p , int q , int l , int r ) { if ( ! p ) return q ; if ( ! q ) return p ; if ( l == r ){ t [ p ]. mx += t [ q ]. mx ; return p ; } int mid = ( l + r ) >> 1 ; t [ p ]. ls = merge ( t [ p ]. ls , t [ q ]. ls , l , mid ); t [ p ]. rs = merge ( t [ p ]. rs , t [ q ]. rs , mid + 1 , r ); pushup ( p ); return p ; } \u8fd8\u6709\u4e00\u79cd\u8282\u7701\u7a7a\u95f4\u7684\u5199\u6cd5\uff0c\u53eb\u8282\u70b9\u56de\u6536\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u628a\u5408\u5e76\u540e\u65e0\u7528\u7684\u8282\u70b9\u7684\u7f16\u53f7\u6254\u8fdb\u4e00\u4e2a\u6808\u91cc\u9762\u3002 \u5408\u5e76\u9700\u8981\u65b0\u8282\u70b9\u7684\u65f6\u5019\u518d\u4ece\u6808\u91cc\u62ff\u51fa\u6765\u7528\u3002","title":"\u7ebf\u6bb5\u6811\u5408\u5e76"},{"location":"algor/ds/segtree/#_17","text":"\u626b\u63cf\u7ebf\u672c\u8d28\u4e0a\u662f\u8ba1\u7b97\u51e0\u4f55\uff1f \u7528\u5904\u5c31\u662f\u7ef4\u62a4\u5e73\u9762\u4e0a\u7684\u4e00\u4e9b\u77e9\u5f62\uff0c\u53ef\u80fd\u662f\u7ef4\u62a4\u603b\u9762\u79ef\uff0c\u8f6e\u5ed3\uff0c\u6216\u8005\u662f\u8986\u76d6\u5230\u4ec0\u4e48\u4e1c\u897f\u7684\u6700\u5927\u503c\u4e4b\u7c7b\u7684\u3002 POJ1151 - Atlantis \u7ed9\u5b9a\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u5f53\u4e2d\u7684 \\(N\\) \u4e2a\u77e9\u5f62\uff0c\u6c42\u5b83\u4eec\u7684\u9762\u79ef\u4e4b\u5e76\u3002 \u4e00\u4e2a\u7ecf\u5178\u7684\u601d\u8def\u662f\uff0c\u8003\u8651\u4ece\u5de6\u5f80\u53f3\u7528\u4e00\u6761\u76f4\u7ebf\u626b\u8fc7\u53bb\uff0c\u628a\u8fd9\u4e9b\u77e9\u5f62\u8f6c\u5316\u4e3a \\(2N\\) \u4e2a\u4e8c\u5143\u7ec4\u3002 \u4e00\u4e2a\u77e9\u5f62 \\((x1, y1), (x2, y2)\\) \u4f1a\u88ab\u8f6c\u5316\u6210 \\((x1, y1, y2, 1), (x2, y1, y2, -1)\\) \uff0c\u7c7b\u4f3c\u8fd9\u6837\uff1a img \u7136\u540e\u6211\u4eec\u53ea\u9700\u8981\u626b\u63cf\u8fd9\u4e9b\u4e8c\u5143\u7ec4\uff0c\u5728\u5f53\u524d\u7684\u626b\u63cf\u7ebf\u4e0a\u505a\u4fee\u6539\u5c31\u53ef\u4ee5\u4e86\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u5148\u79bb\u6563\u5316\uff0c\u8bb0 \\(raw(i)\\) \u8868\u793a \\(i\\) \u79bb\u6563\u524d\u7684\u503c\uff0c \\(val(i)\\) \u53cd\u8fc7\u6765\u3002 \u8bb0 \\(c(i)\\) \u8868\u793a \\([raw(i), raw(i + 1)]\\) \u8fd9\u4e00\u6bb5\u533a\u95f4\u5f53\u524d\u88ab\u8986\u76d6\u7684\u6b21\u6570\uff0c\u8fd9\u4e48\u505a\u7684\u539f\u56e0\u662f\uff0c\u5bf9\u4e8e\u70b9\u7684\u8986\u76d6\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff0c\u6211\u4eec\u53ea\u5173\u5fc3\u88ab\u8986\u76d6\u7684\u603b\u957f\u5ea6\u3002 \u7136\u540e\u5bf9\u4e8e\u4e00\u4e2a\u56db\u5143\u7ec4 \\((x,y,z,k)\\) \uff0c\u6211\u4eec\u4ee4\u626b\u63cf\u7ebf\u4e0a \\([y,z]\\) \u8fd9\u4e00\u5927\u6bb5\u7684\u88ab\u8986\u76d6\u6b21\u6570\u52a0\u4e0a \\(k\\) \uff0c\u7136\u540e\u7edf\u8ba1\u7b54\u6848\u5373\u53ef\u3002 \u5f53\u7136\uff0c\u8fd9\u662f\u6734\u7d20\u505a\u6cd5\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\u3002 \u8bb0 \\(cnt\\) \u8868\u793a\u7ebf\u6bb5\u6811\u4e0a\u8282\u70b9\u88ab\u76f4\u63a5\u8986\u76d6\u7684\u6b21\u6570\uff0c \\(len\\) \u8868\u793a\u5f53\u524d\u8282\u70b9\u7ef4\u62a4\u7684\u6bb5\u5f53\u4e2d\u88ab\u8986\u76d6\u7684\u6bb5\u7684\u603b\u957f\u3002 \u8fd9\u91cc\u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u7279\u6b8a\u7684 pushup \u6280\u5de7\uff0c\u6211\u4eec\u533a\u95f4\u8986\u76d6\u7684\u65f6\u5019\u76f4\u63a5\u4e0d pushdown \u4e86\uff0c\u6211\u4eec\u9012\u5f52\u5230\u88ab\u4fee\u6539\u7684\u90a3 \\(\\log n\\) \u4e2a\u533a\u95f4\uff0c\u7136\u540e\u76f4\u63a5\u4fee\u6539\u4ed6\u4eec\u7684 \\(cnt\\) \u548c \\(len\\) \uff0cpushup \u7684\u65f6\u5019\u76f4\u63a5\u6839\u636e\u5b50\u8282\u70b9\u7684\u4fe1\u606f\u66f4\u65b0\u5f53\u524d\u8282\u70b9\u5373\u53ef\uff0c\u5177\u4f53\u5b9e\u73b0\u7c7b\u4f3c\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 void change ( int p , int l , int r , int v ) { int nl = t [ p ]. l , nr = t [ p ]. r ; if ( l <= nl && nr <= r ) { t [ p ]. cnt += v ; if ( t [ p ]. cnt == 0 ) t [ p ]. len = ( nl == nr ) ? 0 : t [ p << 1 ]. len + t [ p << 1 | 1 ]. len ; // \u867d\u7136\u5f53\u524d\u533a\u95f4\u76f4\u63a5\u88ab\u8986\u76d6\u7684\u6b21\u6570\u7b49\u4e8e 0 \u4e86\uff0c\u4f46\u8fd8\u662f\u8981\u8003\u8651\u4e0b\u9762\u7684\u5b50\u6811\uff0c\u56e0\u4e3a\u5b83\u4eec\u6709\u53ef\u80fd\u6ca1\u88ab\u4fee\u6539\u5b8c\u3002 else t [ p ]. len = raw [ nr + 1 ] - raw [ nl ]; return ; } int mid = ( nl + nr ) >> 1 ; if ( l <= mid ) change ( p << 1 , l , r , v ); if ( r > mid ) change ( p << 1 | 1 , l , r , v ); if ( t [ p ]. cnt > 0 ) t [ p ]. len = raw [ nr + 1 ] - raw [ nl ]; else t [ p ]. len = t [ p << 1 ]. len + t [ p << 1 | 1 ]. len ; } \u66f4\u591a\u4f8b\u9898\u53ef\u4ee5\u770b\uff1a link","title":"\u626b\u63cf\u7ebf"},{"location":"algor/ds/segtree/#_18","text":"\u8fd9\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u5c0f\u6280\u5de7\uff0c\u4e00\u822c\u5728\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u91cc\u6bd4\u8f83\u5e38\u89c1\u3002 \u6ce8\u610f\u5230\u4e00\u4e2a\u4e8b\u60c5\u662f\uff0c\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u56e0\u4e3a\u7ef4\u62a4\u4e86\u5386\u53f2\u7248\u672c\uff0cpushdown \u548c pushup \u5f88\u56f0\u96be\uff08\u9700\u8981\u82b1\u5f88\u591a\u989d\u5916\u7684\u7a7a\u95f4\u53bb\u5904\u7406\u4fe1\u606f\u7684\u66f4\u6539\uff09\u3002 \u4e8e\u662f\u6211\u4eec\u5c31\u5728\u60f3\uff0c\u6709\u6ca1\u6709\u4e00\u79cd\u65b9\u5f0f\uff0c\u65e2\u53ef\u4ee5\u5b9e\u73b0\u533a\u95f4\u4fee\u6539\uff0c\u53c8\u4e0d\u7528\u4e0b\u653e tag\uff0c\u5904\u7406\u66f4\u6539\u5462\uff1f \u6807\u8bb0\u6c38\u4e45\u5316\u5c31\u662f\u4e3a\u4e86\u6ee1\u8db3\u8fd9\u79cd\u9700\u6c42\u800c\u8bde\u751f\u7684\u3002 \u6211\u4eec\u8003\u8651\uff0c\u6bcf\u6b21\u533a\u95f4\u4fee\u6539\u4e5f\u4e00\u6837\u7684\u5230\u8fbe\u88ab\u5b8c\u5168\u8986\u76d6\u7684\u8282\u70b9\u5c31\u8fd4\u56de\uff0c\u8bb0\u5f55\u4e00\u4e2a tag\uff0c\u4f46\u662f\u5728\u9012\u5f52\u4e0b\u53bb\u7684\u65f6\u5019\u6211\u4eec\u9700\u8981\u628a\u4e00\u8def\u4e0a\u7684\u6240\u6709\u8282\u70b9\u7684\u66f4\u6539\u90fd\u5904\u7406\u4e86\u3002 \u7136\u540e\u533a\u95f4\u8be2\u95ee\u5c31\u4e00\u76f4\u5f80\u4e0b\uff0c\u5e76\u5b9e\u65f6\u7d2f\u8ba1\u5f53\u524d\u7684 tag\uff0c\u6bcf\u6b21\u626b\u5230\u4e00\u4e2a\u8282\u70b9\u76f4\u63a5\u8ba9\u7b54\u6848\u7b97\u4e0a\u539f\u6765\u7684\u503c\u548c tag \u5bf9\u4fe1\u606f\u7684\u5f71\u54cd\u5373\u53ef\u3002 \u8fd9\u4e2a\u4e1c\u897f\u770b\u8d77\u6765\u5c31\u5f88\u51fd\u6570\u5f0f\u7f16\u7a0b\uff0c\u56e0\u4e3a\u4f60\u4e0d\u4f1a\u4fee\u6539 \\(val\\) \uff0c\u4f60\u628a\u6240\u6709\u7684\u4fee\u6539\u90fd\u653e\u5230\u4e86 tag \u4e0a\u9762\uff0c\u6bcf\u6b21\u53ea\u9700\u8981\u4fee\u6539 tag \u5c31\u884c\u4e86\uff01 \u8fd9\u4e2a\u4e1c\u897f\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u81ea\u9876\u5411\u4e0b\u7ebf\u6bb5\u6811\uff08\uff0c\u6709\u4e86\u8fd9\u4e2a\u4e1c\u897f\u5c31\u53ef\u4ee5\u52c9\u5f3a\u7ef4\u62a4\u4e00\u4e0b\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u4fee\u6539\u4e86\uff08\u5f53\u7136\u666e\u901a\u7ebf\u6bb5\u6811\u4e5f\u53ef\u4ee5\u7528\uff0c\u5e38\u6570\u8fd8\u633a\u5c0f\uff09 \u4e3a\u4ec0\u4e48\u8bf4\u52c9\u5f3a\u5462\uff1f \u56e0\u4e3a\u6807\u8bb0\u6c38\u4e45\u5316\u53ea\u80fd\u5904\u7406\u4e00\u4e9b\u6bd4\u8f83\u7279\u6b8a\u7684\u4fe1\u606f\uff0c\u4f60\u53d1\u73b0\u6211\u4eec\u8fd9\u91cc\u5fc5\u987b\u8981\u6ee1\u8db3\u4ea4\u6362\u5f8b\uff0c\u6211\u4eec\u505a\u7684\u4e8b\u60c5\u662f\u76f4\u63a5\u4ece\u4e0a\u5230\u4e0b\u66b4\u529b\u5408\u5e76 tag\uff0c\u6839\u672c\u4e0d\u7ba1\u65f6\u95f4\u987a\u5e8f\uff0c\u6bd4\u5982\u6211\u4eec\u8003\u8651\u590d\u5408\u4e24\u4e2a\u6807\u8bb0 \\(t_1, t_2\\) \uff0c\u5982\u679c\u662f pushup pushdown \u76f4\u63a5\u5408\u5e76\u5c31\u884c\u4e86\uff0c\u4f46\u662f\u6807\u8bb0\u6c38\u4e45\u5316\u7684\u65f6\u5019\uff0c \\(t_2\\) \u867d\u7136\u5728\u65f6\u95f4\u8f74\u4e0a\u9760\u540e\uff0c\u4f46\u662f\u5b83\u5728\u7ebf\u6bb5\u6811\u4e0a\u7684\u4f4d\u7f6e\u53ef\u80fd\u4f1a\u6bd4 \\(t_1\\) \u66f4\u9760\u540e\uff0c\u6211\u4eec\u4e0d\u5f97\u4e0d\u8981\u6c42\u6ee1\u8db3\u4ea4\u6362\u5f8b\uff0c\u4e0d\u7136\u4fe1\u606f\u4e0d\u80fd\u5408\u5e76\u3002 \u4f46\u662f\u5176\u5b9e\u4e5f\u4e0d\u4e00\u5b9a\uff0c\u6211\u4eec\u7684\u8981\u6c42\u662f \\(t_2 \\circ t_1 = t_1 \\circ t_2\\) \uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u4e00\u4e2a \\(t_0\\) \uff0c\u4f7f\u5f97 \\(t_2 \\circ t_1 = t_1 \\circ t_0\\) \u5373\u53ef\uff0c\u8fd9\u4e2a\u4e1c\u897f\u6211\u8fd8\u6ca1\u89c1\u5230\u8fc7\u7c7b\u4f3c\u7684\u9898\uff0c\u6709\u4e86\u6211\u4f1a\u653e\u4e0a\u6765\u3002 \u6807\u8bb0\u6c38\u4e45\u5316\u6ca1\u4ec0\u4e48\u4e60\u9898\uff0c\u53ef\u4ee5\u76f4\u63a5\u5199\u533a\u95f4\u52a0\u533a\u95f4\u548c\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5199 To the moon \u90a3\u9898\u3002","title":"\u6807\u8bb0\u6c38\u4e45\u5316"},{"location":"algor/ds/segtree/#_19","text":"\u8fd9\u4e2a\u4e1c\u897f\u4e5f\u6bd4\u8f83\u5de7\u5999\uff0c\u6211\u4e4b\u524d\u5728 OI-wiki \u4e0a\u770b\u5230\u8fc7\uff0c\u6478\u9c7c\u9171\u548c cftm \u5728\u7fa4\u91cc\u53c8\u6559\u4e86\u6211 /oh\uff0c\u611f\u89c9\u5f88\u6709\u610f\u601d\uff0c\u6240\u4ee5\u5199\u4e0b\u6765\u3002 \u5c31\u662f\u8bf4\uff0c\u5176\u5b9e\u4f60\u6ce8\u610f\u5230\u6211\u4eec\u4e0a\u9762\u8ba8\u8bba\u7684 tag \u65b9\u5f0f\u6709\u70b9\u590d\u6742\uff0c\u800c\u77e9\u9635\u4e58\u6cd5\u5929\u7136\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7c7b\u4f3c\u77e9\u9635\u52a0\u901f\uff0c\u76f4\u63a5\u628a\u4f60\u8981\u7ef4\u62a4\u7684\u4fe1\u606f\u5199\u6210\u4e00\u4e2a\u5411\u91cf\uff0c\u7136\u540e\u63a8\u51fa\u4e00\u4e2a\u8f6c\u79fb\u77e9\u9635\uff0c\u76f4\u63a5\u66b4\u529b\u7ef4\u62a4\u533a\u95f4\u77e9\u9635\u4e58\u6cd5\u5c31\u53ef\u4ee5\u4e86\u3002","title":"\u77e9\u9635\u8868\u8fbe\u4fee\u6539"},{"location":"algor/ds/segtree/#thusch-2017","text":"\u5927\u9b54\u6cd5\u5e08\u5c0f L \u5236\u4f5c\u4e86 \\(n\\) \u4e2a\u9b54\u529b\u6c34\u6676\u7403\uff0c\u6bcf\u4e2a\u6c34\u6676\u7403\u6709\u6c34\u3001\u706b\u3001\u571f\u4e09\u4e2a\u5c5e\u6027\u7684\u80fd\u91cf\u503c\u3002 \u5c0f L \u628a\u8fd9 \\(n\\) \u4e2a\u6c34\u6676\u7403\u5728\u5730\u4e0a\u4ece\u524d\u5411\u540e\u6392\u6210\u4e00\u884c\uff0c\u7136\u540e\u5f00\u59cb\u4eca\u5929\u7684\u9b54\u6cd5\u8868\u6f14\u3002 \u6211\u4eec\u7528 \\(A_i,\\ B_i,\\ C_i\\) \u5206\u522b\u8868\u793a\u4ece\u524d\u5411\u540e\u7b2c \\(i\\) \u4e2a\u6c34\u6676\u7403\uff08\u4e0b\u6807\u4ece \\(1\\) \u5f00\u59cb\uff09\u7684\u6c34\u3001\u706b\u3001\u571f\u7684\u80fd\u91cf\u503c\u3002 \u5c0f L \u8ba1\u5212\u65bd\u5c55 \\(m\\) \u6b21\u9b54\u6cd5\u3002\u6bcf\u6b21\uff0c\u4ed6\u4f1a\u9009\u62e9\u4e00\u4e2a\u533a\u95f4 \\([l, r]\\) \uff0c\u7136\u540e\u65bd\u5c55\u4ee5\u4e0b \\(3\\) \u5927\u7c7b\u3001 \\(7\\) \u79cd\u9b54\u6cd5\u4e4b\u4e00\uff1a \u9b54\u529b\u6fc0\u53d1\uff1a\u4ee4\u533a\u95f4\u91cc\u6bcf\u4e2a\u6c34\u6676\u7403\u4e2d \u7279\u5b9a\u5c5e\u6027 \u7684\u80fd\u91cf\u7206\u53d1\uff0c\u4ece\u800c\u4f7f\u53e6\u4e00\u4e2a \u7279\u5b9a\u5c5e\u6027 \u7684\u80fd\u91cf\u589e\u5f3a\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6709\u4ee5\u4e0b\u4e09\u79cd\u53ef\u80fd\u7684\u8868\u73b0\u5f62\u5f0f\uff1a \u706b\u5143\u7d20\u6fc0\u53d1\u6c34\u5143\u7d20\u80fd\u91cf\uff1a\u4ee4 \\(A_i = A_i + B_i\\) \u3002 \u571f\u5143\u7d20\u6fc0\u53d1\u706b\u5143\u7d20\u80fd\u91cf\uff1a\u4ee4 \\(B_i = B_i + C_i\\) \u3002 \u6c34\u5143\u7d20\u6fc0\u53d1\u571f\u5143\u7d20\u80fd\u91cf\uff1a\u4ee4 \\(C_i = C_i + A_i\\) \u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u589e\u5f3a\u4e00\u79cd\u5c5e\u6027\u7684\u80fd\u91cf\u5e76\u4e0d\u4f1a\u6539\u53d8\u53e6\u4e00\u79cd\u5c5e\u6027\u7684\u80fd\u91cf\uff0c\u4f8b\u5982 \\(A_i = A_i + B_i\\) \u5e76\u4e0d\u4f1a\u4f7f \\(B_i\\) \u589e\u52a0\u6216\u51cf\u5c11\u3002 \u9b54\u529b\u589e\u5f3a\uff1a\u5c0f L \u6325\u821e\u6cd5\u6756\uff0c\u6d88\u8017\u81ea\u8eab \\(v\\) \u70b9\u6cd5\u529b\u503c\uff0c\u6765\u6539\u53d8\u533a\u95f4\u91cc\u6bcf\u4e2a\u6c34\u6676\u7403\u7684 \u7279\u5b9a\u5c5e\u6027 \u7684\u80fd\u91cf\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6709\u4ee5\u4e0b\u4e09\u79cd\u53ef\u80fd\u7684\u8868\u73b0\u5f62\u5f0f\uff1a \u706b\u5143\u7d20\u80fd\u91cf\u5b9a\u503c\u589e\u5f3a\uff1a\u4ee4 \\(A_i = A_i + v\\) \u3002 \u6c34\u5143\u7d20\u80fd\u91cf\u7ffb\u500d\u589e\u5f3a\uff1a\u4ee4 \\(B_i=B_i \\cdot v\\) \u3002 \u571f\u5143\u7d20\u80fd\u91cf\u5438\u6536\u878d\u5408\uff1a\u4ee4 \\(C_i = v\\) \u3002 \u9b54\u529b\u91ca\u653e\uff1a\u5c0f L \u5c06\u533a\u95f4\u91cc\u6240\u6709\u6c34\u6676\u7403\u7684\u80fd\u91cf\u805a\u96c6\u5728\u4e00\u8d77\uff0c\u878d\u5408\u6210\u4e00\u4e2a\u65b0\u7684\u6c34\u6676\u7403\uff0c\u7136\u540e\u9001\u7ed9\u573a\u5916\u89c2\u4f17\u3002 \u751f\u6210\u7684\u6c34\u6676\u7403\u6bcf\u79cd\u5c5e\u6027\u7684\u80fd\u91cf\u503c\u7b49\u4e8e\u533a\u95f4\u5185\u6240\u6709\u6c34\u6676\u7403\u5bf9\u5e94\u80fd\u91cf\u503c\u7684\u4ee3\u6570\u548c\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u9b54\u529b\u91ca\u653e\u7684\u8fc7\u7a0b\u4e0d\u4f1a\u771f\u6b63\u6539\u53d8\u533a\u95f4\u5185\u6c34\u6676\u7403\u7684\u80fd\u91cf \u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u5c0f L \u5236\u9020\u548c\u878d\u5408\u7684\u6c34\u6676\u7403\u7684\u539f\u6750\u6599\u90fd\u662f\u5b9a\u5236\u7248\u7684 OI \u5de5\u5382\u6c34\u6676\uff0c\u6240\u4ee5\u8fd9\u4e9b\u6c34\u6676\u7403\u6709\u4e00\u4e2a\u80fd\u91cf\u9608\u503c \\(998244353\\) \u3002\u5f53\u6c34\u6676\u7403\u4e2d\u67d0\u79cd\u5c5e\u6027\u7684\u80fd\u91cf\u503c\u5927\u4e8e\u7b49\u4e8e\u8fd9\u4e2a\u9608\u503c\u65f6\uff0c\u80fd\u91cf\u503c\u4f1a\u81ea\u52a8\u5bf9\u9608\u503c\u53d6\u6a21\uff0c\u4ece\u800c\u907f\u514d\u6c34\u6676\u7403\u7206\u70b8\u3002 \u5c0f W \u4e3a\u5c0f L\uff08\u552f\u4e00\u7684\uff09\u89c2\u4f17\uff0c\u56f4\u89c2\u4e86\u6574\u4e2a\u8868\u6f14\uff0c\u5e76\u4e14\u6536\u5230\u4e86\u5c0f L \u5728\u8868\u6f14\u4e2d\u878d\u5408\u7684\u6bcf\u4e2a\u6c34\u6676\u7403\u3002\u5c0f W \u60f3\u77e5\u9053\uff0c\u8fd9\u4e9b\u6c34\u6676\u7403\u8574\u6db5\u7684\u4e09\u79cd\u5c5e\u6027\u7684\u80fd\u91cf\u503c\u5206\u522b\u662f\u591a\u5c11\u3002 \u7531\u4e8e\u77e9\u9635\u7684\u7ed3\u5408\u5f8b\u548c\u5206\u914d\u5f8b\u6210\u7acb\uff0c\u5355\u70b9\u4fee\u6539\u53ef\u4ee5\u81ea\u7136\u5730\u63a8\u5e7f\u5230\u533a\u95f4\uff0c\u5373\u63a8\u51fa\u77e9\u9635\u540e\u76f4\u63a5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u77e9\u9635\u4e58\u79ef\u5373\u53ef\u3002 \u4e0b\u9762\u5c06\u4e3e\u51e0\u4e2a\u4f8b\u5b50\u3002 \\(A_i = A_i + v\\) \u7684\u8f6c\u79fb \\[ \\begin{bmatrix} A & B & C & 1 \\end{bmatrix} \\begin{bmatrix} 1 & 0 & 0 & 0\\\\ 0 & 1 & 0 & 0\\\\ 0 & 0 & 1 & 0\\\\ v & 0 & 0 & 1\\\\ \\end{bmatrix}= \\begin{bmatrix} A+v & B & C & 1\\\\ \\end{bmatrix} \\] \\(B_i=B_i \\cdot v\\) \u7684\u8f6c\u79fb \\[ \\begin{bmatrix} A & B & C & 1\\end{bmatrix}\\begin{bmatrix}1 & 0 & 0 & 0\\\\0 & v & 0 & 0\\\\0 & 0 &1& 0\\\\0 & 0 & 0 & 1\\\\\\end{bmatrix}=\\begin{bmatrix}A & B \\cdot v & C & 1\\\\\\end{bmatrix}\\] Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 #include <cstdio> #include <iostream> #include <cstring> using namespace std ; constexpr int mod = 998244353 ; constexpr int maxn = 260000 ; int n , m ; template < class T > inline void read ( T & a ){ register char ch ; while ( ch = getchar (),( ch < '0' || ch > '9' ) && ch != '-' ); register bool f = ( ch == '-' ); register T x = f ? 0 : ch - '0' ; while ( ch = getchar (), ch >= '0' && ch <= '9' ) x = ( x << 3 ) + ( x << 1 ) + ( ch ^ 48 ); a = f ?- x : x ; } struct Matrix { int a [ 5 ][ 5 ]; Matrix (){ memset ( a , 0 , sizeof ( a )); } inline void unit_init (){ memset ( a , 0 , sizeof ( a )); for ( register int i = 1 ; i <= 4 ; i ++ ) a [ i ][ i ] = 1 ; } inline Matrix operator * ( const Matrix & M ){ Matrix res ; for ( register int i = 1 ; i <= 4 ; i ++ ){ for ( register int j = 1 ; j <= 4 ; j ++ ){ res . a [ i ][ j ] = ( res . a [ i ][ j ] + 1l l * a [ i ][ 1 ] * M . a [ 1 ][ j ]) % mod ; res . a [ i ][ j ] = ( res . a [ i ][ j ] + 1l l * a [ i ][ 2 ] * M . a [ 2 ][ j ]) % mod ; res . a [ i ][ j ] = ( res . a [ i ][ j ] + 1l l * a [ i ][ 3 ] * M . a [ 3 ][ j ]) % mod ; res . a [ i ][ j ] = ( res . a [ i ][ j ] + 1l l * a [ i ][ 4 ] * M . a [ 4 ][ j ]) % mod ; } } return res ; } inline Matrix operator + ( const Matrix & M ){ Matrix res ; for ( register int i = 1 ; i <= 4 ; i ++ ){ for ( register int j = 1 ; j <= 4 ; j ++ ){ res . a [ i ][ j ] = ( M . a [ i ][ j ] + a [ i ][ j ]) % mod ; } } return res ; } } ans , unit , ex_unit ; struct Segment_Tree { Matrix Mat , tag ; } t [ maxn << 2 ]; inline void init_1 (){ unit . a [ 2 ][ 1 ] = 1 ; } inline void init_2 (){ unit . a [ 3 ][ 2 ] = 1 ; } inline void init_3 (){ unit . a [ 1 ][ 3 ] = 1 ; } inline void init_4 ( int v ){ unit . a [ 4 ][ 1 ] = v ; } inline void init_5 ( int v ){ unit . a [ 2 ][ 2 ] = v ; } inline void init_6 ( int v ){ unit . a [ 3 ][ 3 ] = 0 , unit . a [ 4 ][ 3 ] = v ; } inline void pushdown ( int p ){ t [ p << 1 ]. tag = t [ p << 1 ]. tag * t [ p ]. tag ; t [ p << 1 | 1 ]. tag = t [ p << 1 | 1 ]. tag * t [ p ]. tag ; t [ p << 1 ]. Mat = t [ p << 1 ]. Mat * t [ p ]. tag ; t [ p << 1 | 1 ]. Mat = t [ p << 1 | 1 ]. Mat * t [ p ]. tag ; t [ p ]. tag . unit_init (); } inline void pushup ( int p ){ for ( register int i = 1 ; i <= 4 ; i ++ ){ t [ p ]. Mat . a [ 1 ][ i ] = 1l l * ( t [ p << 1 ]. Mat . a [ 1 ][ i ] + t [ p << 1 | 1 ]. Mat . a [ 1 ][ i ]); t [ p ]. Mat . a [ 1 ][ i ] -= ( t [ p ]. Mat . a [ 1 ][ i ] >= mod ) ? mod : 0 ; } } inline void built ( int l , int r , int p ){ t [ p ]. tag = ex_unit ; if ( l == r ){ read ( t [ p ]. Mat . a [ 1 ][ 1 ]); read ( t [ p ]. Mat . a [ 1 ][ 2 ]); read ( t [ p ]. Mat . a [ 1 ][ 3 ]); t [ p ]. Mat . a [ 1 ][ 4 ] = 1 ; return ; } int mid = ( l + r ) / 2 ; built ( l , mid , p << 1 ), built ( mid + 1 , r , p << 1 | 1 ), pushup ( p ); } inline void update ( int l , int r , int ql , int qr , int p , Matrix M ){ if ( ql <= l && r <= qr ){ t [ p ]. Mat = t [ p ]. Mat * M ; t [ p ]. tag = t [ p ]. tag * M ; return ; } pushdown ( p ); int mid = ( r + l ) >> 1 ; if ( mid >= ql ) update ( l , mid , ql , qr , p << 1 , M ); if ( qr > mid ) update ( mid + 1 , r , ql , qr , p << 1 | 1 , M ); pushup ( p ); } inline void query ( int l , int r , int ql , int qr , int p ){ if ( ql <= l && r <= qr ){ for ( register int i = 1 ; i <= 3 ; i ++ ){ ans . a [ 1 ][ i ] = ans . a [ 1 ][ i ] + t [ p ]. Mat . a [ 1 ][ i ]; ans . a [ 1 ][ i ] -= ( ans . a [ 1 ][ i ] >= mod ) ? mod : 0 ; } return ; } int mid = ( l + r ) >> 1 ; pushdown ( p ); if ( mid >= ql ) query ( l , mid , ql , qr , p << 1 ); if ( qr > mid ) query ( mid + 1 , r , ql , qr , p << 1 | 1 ); } int main (){ ex_unit . unit_init (), read ( n ), built ( 1 , n , 1 ), read ( m ); for ( register int i = 1 ; i <= m ; i ++ ){ unit = ex_unit ; int opt , l , r , v ; read ( opt ); read ( l ); read ( r ); if ( opt == 1 ) init_1 (), update ( 1 , n , l , r , 1 , unit ); if ( opt == 2 ) init_2 (), update ( 1 , n , l , r , 1 , unit ); if ( opt == 3 ) init_3 (), update ( 1 , n , l , r , 1 , unit ); if ( opt == 4 ) read ( v ), init_4 ( v ), update ( 1 , n , l , r , 1 , unit ); if ( opt == 5 ) read ( v ), init_5 ( v ), update ( 1 , n , l , r , 1 , unit ); if ( opt == 6 ) read ( v ), init_6 ( v ), update ( 1 , n , l , r , 1 , unit ); if ( opt == 7 ) memset ( ans . a , 0 , sizeof ( ans . a )), query ( 1 , n , l , r , 1 ), printf ( \"%d %d %d \\n \" , ans . a [ 1 ][ 1 ], ans . a [ 1 ][ 2 ], ans . a [ 1 ][ 3 ]); } return 0 ; }","title":"\u300cTHUSCH 2017\u300d\u5927\u9b54\u6cd5\u5e08"},{"location":"algor/ds/segtree/#libreoj-6208","text":"\u6709\u4e00\u68f5 \\(n\\) \u8282\u70b9\u7684\u6811\uff0c\u6839\u4e3a \\(1\\) \u53f7\u8282\u70b9\u3002\u6bcf\u4e2a\u8282\u70b9\u6709\u4e24\u4e2a\u6743\u503c \\(k_i, t_i\\) \uff0c\u521d\u59cb\u503c\u5747\u4e3a \\(0\\) \u3002 \u7ed9\u51fa\u4e09\u79cd\u64cd\u4f5c\uff1a \\(\\operatorname{Add}( x , d )\\) \u64cd\u4f5c\uff1a\u5c06 \\(x\\) \u5230\u6839\u7684\u8def\u5f84\u4e0a\u6240\u6709\u70b9\u7684 \\(k_i\\leftarrow k_i + d\\) \\(\\operatorname{Mul}( x , d )\\) \u64cd\u4f5c\uff1a\u5c06 \\(x\\) \u5230\u6839\u7684\u8def\u5f84\u4e0a\u6240\u6709\u70b9\u7684 \\(t_i\\leftarrow t_i + d \\times k_i\\) \\(\\operatorname{Query}( x )\\) \u64cd\u4f5c\uff1a\u8be2\u95ee\u70b9 \\(x\\) \u7684\u6743\u503c \\(t_x\\) \\(n,~m \\leq 100000, ~-10 \\leq d \\leq 10\\) \u82e5\u76f4\u63a5\u601d\u8003\uff0c\u4e0b\u653e\u64cd\u4f5c\u548c\u7ef4\u62a4\u4fe1\u606f\u5e76\u4e0d\u662f\u5f88\u597d\u60f3\u3002\u4f46\u662f\u77e9\u9635\u53ef\u4ee5\u8f7b\u677e\u5730\u8868\u8fbe\u3002 \\[ \\begin{aligned} \\begin{bmatrix}k & t & 1 \\end{bmatrix} \\begin{bmatrix} 1 & 0 & 0 \\\\ 0 & 1 & 0 \\\\ d & 0 & 1 \\end{bmatrix} &= \\begin{bmatrix}k+d & t & 1 \\end{bmatrix}\\\\ \\begin{bmatrix}k & t & 1 \\end{bmatrix} \\begin{bmatrix} 1 & d & 0 \\\\ 0 & 1 & 0 \\\\ 0 & 0 & 1 \\end{bmatrix} &= \\begin{bmatrix}k & t+d \\times k & 1 \\end{bmatrix} \\end{aligned} \\] \u8fd9\u91cc\u5077\u61d2\u76f4\u63a5\u627e\u4e86 OI-wiki \u7684\u4f8b\u5b50\u3002 \u4f46\u662f\u6211\u8865\u5145\u4e00\u70b9\uff0c\u5c31\u662f\u4f60\u53d1\u73b0\u8fd9\u4e24\u4e2a\u9898\u7684\u5171\u540c\u70b9\u5c31\u662f\uff0c\u4f60\u4e00\u6b21\u64cd\u4f5c\u5bf9\u4e00\u4e2a\u4fe1\u606f\u7684\u4fee\u6539\u53ef\u80fd\u4f1a\u548c\u53e6\u5916\u4e00\u4e2a\u4fe1\u606f\u6709\u5173\u7cfb\uff0c\u4f60\u76f4\u63a5\u8003\u8651 tag \u4f1a\u6bd4\u8f83\u9ebb\u70e6\u3002 \u5982\u679c\u7528\u77e9\u9635\u5c31\u80fd\u5f88\u597d\u7684\u628a\u4ed6\u4eec\u5199\u5230\u4e00\u8d77\uff0c\u5b9e\u73b0\u548c\u601d\u8003\u65b9\u5f0f\u5c31\u4f1a\u6bd4\u8f83\u65e0\u8111\uff0c\u4e5f\u6bd4\u8f83\u65b9\u4fbf\u4e86\uff0c\u5f53\u7136\u5b83\u53ea\u662f\u4e00\u79cd\u523b\u753b\u7b56\u7565\u7f62\u4e86\uff0c\u6b63\u5e38\u7684 tag \u4e5f\u53ef\u4ee5\u7528\u5b83\u6765\u601d\u8003\u3002 \u8fd9\u91cc\u4e3a\u4e86\u8ba8\u8bba\u65b9\u4fbf\u8003\u8651\u7684\u662f\u4e24\u4e2a tag \u7ef4\u62a4\u7684\u4fe1\u606f\u90fd\u6709\u4fee\u6539\u7684\u60c5\u51b5\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\u6ca1\u6709\u66f4\u6539\u7684 tag \u53ef\u4ee5\u89c6\u4e3a\u88ab\u6253\u4e0a\u4e86\u5e7a\u5143\u6807\u8bb0\u3002 \u21a9","title":"\u300cLibreOJ 6208\u300d\u6811\u4e0a\u8be2\u95ee"},{"location":"algor/ds/stack/","text":"\u6982\u8ff0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6808\u662f\u4e00\u79cd LIFO(Last In First Out)\u8868\uff0c\u610f\u601d\u662f\u540e\u8fdb\u5165\u7684\u5143\u7d20\u5148\u51fa\u6765\uff0c\u4f60\u53ef\u4ee5\u5c06\u5b83\u7406\u89e3\u4e3a\u4e00\u4e2a\u6728\u6876\u3002 \u4e00\u5f20\u56fe\uff08\u56fe\u6e90 OI-wiki \uff09\uff1a \u6808\u662f\u4e00\u79cd\u6bd4\u8f83\u901a\u7528\u7684\u7ebf\u6027\u6570\u636e\u7ed3\u6784\uff0c\u5728\u9012\u5f52\uff0c\u8868\u8fbe\u5f0f\u6c42\u503c\uff0c\u62ec\u53f7\u914d\u5bf9\u7b49\u5730\u65b9\u6709\u5f88\u591a\u5e94\u7528\u3002 \u6bd4\u5982\u4f60\u7684 dfs\uff0c\u672c\u8d28\u4e0a\u662f\u7528\u4e86\u4e00\u4e2a\u7cfb\u7edf\u6808\u5728\u6a21\u62df\uff0c\uff08\u6240\u4ee5\u4f1a\u6709\u624b\u5de5\u6808\u8fd9\u79cd\u4f18\u5316\u65b9\u5f0f\uff09\u3002 \u6808\u4e00\u822c\u652f\u6301\u51e0\u4e2a\u64cd\u4f5c\uff1a push(x) \uff1a\u5c06\u5143\u7d20 \\(x\\) \u5165\u6808\uff0c\u590d\u6742\u5ea6 \\(O(1)\\) \u3002 pop() \uff1a\u5c06\u6808\u9876\u5143\u7d20 \\(top\\) \u51fa\u6808\uff0c\u590d\u6742\u5ea6 \\(O(1)\\) \u3002 gettop() \uff1a\u8be2\u95ee\u6808\u9876\u5143\u7d20 \\(top\\) \u7684\u503c\uff0c\u590d\u6742\u5ea6 \\(O(1)\\) \u3002 \u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\u6a21\u62df\uff1a 1 2 3 4 5 6 int st [ si ], tp = 0 ; // tp \u6a21\u62df\u6808\u9876\u6307\u9488\uff0c\u521d\u59cb\u4e3a\u7a7a\u3002 void push ( int x ) { st [ ++ tp ] = x ; } void pop (){ if ( tp ) -- tp ; } int gettop (){ return st [ tp ]; } void clear (){ tp = 0 ; } // \u6e05\u7a7a\u6808\uff0c\u8fd9\u662f\u6570\u7ec4\u6a21\u62df\u7684\u597d\u5904\uff0c\u76f4\u63a5\u6307\u5411 0 \u5c31\u884c\u4e86\u3002 \u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 STLstack\uff0c\u5305\u542b\u5728 #include <stack> \u4e2d\u3002 1 2 3 4 5 6 7 8 9 10 std :: stack < int > s ; int x ; s . push ( x ); // \u538b\u5165\u3002 cout << s . top () << endl ; s . pop (); // \u5f39\u6808 int sz = int ( s . size ()) // \u6c42\u5176\u5927\u5c0f bool ept = s . empty () // \u662f\u5426\u4e3a\u7a7a \u5e94\u7528 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5355\u8c03\u6808 \u03c8(\uff40\u2207\u00b4)\u03c8 \u89c1\uff1a \u5355\u8c03\u6808 \u3002 \u8868\u8fbe\u5f0f\u6c42\u503c \u03c8(\uff40\u2207\u00b4)\u03c8 \u89c1\uff1a \u8868\u8fbe\u5f0f\u6c42\u503c \u3002","title":"\u6808"},{"location":"algor/ds/stack/#_1","text":"\u6808\u662f\u4e00\u79cd LIFO(Last In First Out)\u8868\uff0c\u610f\u601d\u662f\u540e\u8fdb\u5165\u7684\u5143\u7d20\u5148\u51fa\u6765\uff0c\u4f60\u53ef\u4ee5\u5c06\u5b83\u7406\u89e3\u4e3a\u4e00\u4e2a\u6728\u6876\u3002 \u4e00\u5f20\u56fe\uff08\u56fe\u6e90 OI-wiki \uff09\uff1a \u6808\u662f\u4e00\u79cd\u6bd4\u8f83\u901a\u7528\u7684\u7ebf\u6027\u6570\u636e\u7ed3\u6784\uff0c\u5728\u9012\u5f52\uff0c\u8868\u8fbe\u5f0f\u6c42\u503c\uff0c\u62ec\u53f7\u914d\u5bf9\u7b49\u5730\u65b9\u6709\u5f88\u591a\u5e94\u7528\u3002 \u6bd4\u5982\u4f60\u7684 dfs\uff0c\u672c\u8d28\u4e0a\u662f\u7528\u4e86\u4e00\u4e2a\u7cfb\u7edf\u6808\u5728\u6a21\u62df\uff0c\uff08\u6240\u4ee5\u4f1a\u6709\u624b\u5de5\u6808\u8fd9\u79cd\u4f18\u5316\u65b9\u5f0f\uff09\u3002 \u6808\u4e00\u822c\u652f\u6301\u51e0\u4e2a\u64cd\u4f5c\uff1a push(x) \uff1a\u5c06\u5143\u7d20 \\(x\\) \u5165\u6808\uff0c\u590d\u6742\u5ea6 \\(O(1)\\) \u3002 pop() \uff1a\u5c06\u6808\u9876\u5143\u7d20 \\(top\\) \u51fa\u6808\uff0c\u590d\u6742\u5ea6 \\(O(1)\\) \u3002 gettop() \uff1a\u8be2\u95ee\u6808\u9876\u5143\u7d20 \\(top\\) \u7684\u503c\uff0c\u590d\u6742\u5ea6 \\(O(1)\\) \u3002 \u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\u6a21\u62df\uff1a 1 2 3 4 5 6 int st [ si ], tp = 0 ; // tp \u6a21\u62df\u6808\u9876\u6307\u9488\uff0c\u521d\u59cb\u4e3a\u7a7a\u3002 void push ( int x ) { st [ ++ tp ] = x ; } void pop (){ if ( tp ) -- tp ; } int gettop (){ return st [ tp ]; } void clear (){ tp = 0 ; } // \u6e05\u7a7a\u6808\uff0c\u8fd9\u662f\u6570\u7ec4\u6a21\u62df\u7684\u597d\u5904\uff0c\u76f4\u63a5\u6307\u5411 0 \u5c31\u884c\u4e86\u3002 \u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 STLstack\uff0c\u5305\u542b\u5728 #include <stack> \u4e2d\u3002 1 2 3 4 5 6 7 8 9 10 std :: stack < int > s ; int x ; s . push ( x ); // \u538b\u5165\u3002 cout << s . top () << endl ; s . pop (); // \u5f39\u6808 int sz = int ( s . size ()) // \u6c42\u5176\u5927\u5c0f bool ept = s . empty () // \u662f\u5426\u4e3a\u7a7a","title":"\u6982\u8ff0"},{"location":"algor/ds/stack/#_2","text":"","title":"\u5e94\u7528"},{"location":"algor/ds/stack/#_3","text":"\u89c1\uff1a \u5355\u8c03\u6808 \u3002","title":"\u5355\u8c03\u6808"},{"location":"algor/ds/stack/#_4","text":"\u89c1\uff1a \u8868\u8fbe\u5f0f\u6c42\u503c \u3002","title":"\u8868\u8fbe\u5f0f\u6c42\u503c"},{"location":"algor/ds/trie-bst/","text":"\u5495\u5495","title":"Trie bst"},{"location":"algor/graph/bipartite-graph/","text":"\u5b9a\u4e49 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5982\u679c\u4e00\u5f20\u65e0\u5411\u56fe \\(G\\) \u53ef\u4ee5\u5206\u6210\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u7684\u70b9\u96c6 \\(A,B\\) \uff0c\u4e14\u70b9\u96c6\u5f53\u4e2d\u7684\u70b9\u76f8\u4e92\u4e4b\u95f4\u6ca1\u6709\u8fde\u8fb9\uff0c\u5219\u79f0 \\(G\\) \u4e3a\u4e00\u5f20\u4e8c\u5206\u56fe\u3002 \\(A,B\\) \u5206\u522b\u79f0\u4e3a \\(G\\) \u7684\u5de6\u90e8\u548c\u53f3\u90e8\u3002 \u5224\u5b9a \u03c8(\uff40\u2207\u00b4)\u03c8 \u5b9a\u7406\uff1a\u65e0\u5411\u56fe \\(G\\) \u662f\u4e8c\u5206\u56fe\uff0c \u5f53\u4e14\u4ec5\u5f53 \u56fe\u4e2d\u4e0d\u5b58\u5728\u5947\u73af\u3002 \u6240\u4ee5\u53ef\u4ee5\u7528\u67d3\u8272\u6cd5\u5224\u5b9a\u65e0\u5411\u56fe \\(G\\) \u662f\u4e0d\u662f\u4e8c\u5206\u56fe\u3002 \u8fdb\u884c\u9ed1\u767d\u7684\u95f4\u9694\u67d3\u8272\uff0c\u5982\u679c\u51fa\u73b0\u51b2\u7a81\uff0c\u90a3\u4e48\u56fe\u4e2d\u5fc5\u7136\u5b58\u5728\u5947\u73af\uff0c \\(G\\) \u4e0d\u662f\u4e8c\u5206\u56fe\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 int color [ si_n ]; bool ok = true ; inline void dfs ( int u , int col ){ color [ u ] = col ; for ( register int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( ! color [ v ]) dfs ( v , 3 - col ); else if ( color [ v ] == col ) ok = false ; } } // in main() memset ( color , 0 , sizeof color ); for ( register int i = 1 ; i <= n ; ++ i ) if ( ! color [ i ]) dfs ( i , 1 ); \u590d\u6742\u5ea6 \\(\\text{O}(n+m)\\) \u3002 \u6700\u5927\u5339\u914d \u03c8(\uff40\u2207\u00b4)\u03c8 \u5339\u914d\uff1a\u4efb\u610f\u4e24\u6761\u8fb9\u90fd\u6ca1\u6709\u516c\u5171\u7aef\u70b9\u7684\u8fb9\u96c6\u79f0\u4e3a\u56fe\u7684\u4e00\u7ec4\u5339\u914d \\(S\\) \u3002 \u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\uff1a\u4e8c\u5206\u56fe\u5f53\u4e2d\uff0c\u8fb9\u6570\u6700\u591a\u7684\u4e00\u7ec4\u5339\u914d\u4e3a\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u3002 \u5728 \\(S\\) \u5f53\u4e2d\u7684\u8fb9\u88ab\u79f0\u4e3a\u5339\u914d\u8fb9\uff0c\u5176\u5b83\u7684\u8fb9\u79f0\u4e3a\u975e\u5339\u914d\u8fb9\uff0c\u5339\u914d\u8fb9\u7684\u7aef\u70b9\u662f\u5339\u914d\u70b9\uff0c \u5176\u5b83 \u8282\u70b9\u88ab\u79f0\u4e3a\u975e\u5339\u914d\u70b9\u3002 \u5982\u679c\u4e8c\u5206\u56fe\u4e0a\u5b58\u5728\u4e00\u6761\u8def\u5f84 \\(\\delta(u,v)\\) \uff0c\u8fde\u63a5 \\(u,v\\) \u8fd9\u4e24\u4e2a\u975e\u5339\u914d\u70b9\uff0c\u4f7f\u5f97 \\(S\\) \u7684\u5339\u914d\u8fb9\u548c\u975e\u5339\u914d\u8fb9\u5728\u8def\u5f84\u4e0a\u4ea4\u66ff\u51fa\u73b0\uff0c\u79f0 \\(\\delta(u,v)\\) \u4e3a\u5339\u914d \\(S\\) \u7684\u589e\u5e7f\u8def\u3002 \u5982\u56fe\uff0c \\(\\delta(u,v)\\) \u5373\u4e3a\u4e00\u6761\u589e\u5e7f\u8def\uff1a \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5148\u5b9a\u4e49\u7684\u662f\u5339\u914d\u70b9\u548c\u5339\u914d\u8fb9\uff0c\u5269\u4e0b\u7684\u624d\u662f\u975e\u5339\u914d\u8fb9\u548c\u5339\u914d\u70b9\u3002 \u6240\u4ee5 \u8fde\u63a5\u4e24\u4e2a\u5339\u914d\u70b9\u7684\u4e0d\u4e00\u5b9a\u662f\u5339\u914d\u8fb9\uff0c\u4f46\u7aef\u70b9\u5e26\u6709\u975e\u5339\u914d\u70b9\u7684\u8fb9\u4e00\u5b9a\u662f\u975e\u5339\u914d\u8fb9 \u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u589e\u5e7f\u8def\u5177\u6709\u4ee5\u4e0b\u6027\u8d28\uff1a \u8fb9\u6570\u4e3a\u5947\u6570 \u7b2c \\(1,3,5,...\\) \u6761\u8fb9\u662f\u975e\u5339\u914d\u8fb9\uff0c\u7b2c \\(2,4,6,...\\) \u6761\u8fb9\u662f\u5339\u914d\u8fb9\u3002 \u6240\u4ee5\uff0c\u53ef\u4ee5\u5bf9\u589e\u5e7f\u8def\u4e0a\u7684\u8fb9\u7684\u72b6\u6001\u53d6\u53cd\uff0c\u5f97\u5230\u7684\u5339\u914d\u6570\u5fc5\u7136\u4f1a\u589e\u52a0 \\(1\\) \u3002 \u4ece\u800c\u53ef\u4ee5\u5f97\u5230\u5b9a\u7406\uff1a \u4e8c\u5206\u56fe\u7684\u4e00\u7ec4\u5339\u914d \\(S\\) \u662f\u6700\u5927\u5339\u914d\uff0c \u5f53\u4e14\u4ec5\u5f53 \u56fe\u4e2d\u4e0d\u5b58\u5728 \\(S\\) \u7684\u589e\u5e7f\u8def\u3002 \u5bf9\u5e94\u7684\u6709\u4e00\u4e2a\u5308\u7259\u5229\u7b97\u6cd5\uff0c\u53ef\u4ee5\u5229\u7528\u589e\u5e7f\u8def\u6c42\u51fa\u4e8c\u5206\u56fe \\(G\\) \u7684\u6700\u5927\u5339\u914d\u3002 \u601d\u8def\u662f\uff1a \u6700\u5f00\u59cb\u5148\u4ee4 \\(S=\\emptyset\\) \uff0c\u7136\u540e\u5bfb\u627e\u4e00\u4e2a\u589e\u5e7f\u8def\uff0c\u53d6\u53cd\uff0c\u5f97\u5230\u65b0\u5339\u914d \\(S\\prime\\) \u3002 \u91cd\u590d\u76f4\u5230\u4e0d\u5b58\u5728\u589e\u5e7f\u8def\u3002 \u5bfb\u627e\u589e\u5e7f\u8def\u7684\u65f6\u5019\u5206\u4e24\u79cd\u60c5\u51b5\u7ed9\u4e00\u4e2a\u5de6\u90e8\u8282\u70b9 \\(x\\) \u5bfb\u627e\u4e00\u4e2a\u5339\u914d\u7684\u53f3\u90e8\u8282\u70b9 \\(y\\) \uff1a \\(y\\) \u5c31\u662f\u975e\u5339\u914d\u70b9\uff0c \\((x,y)\\) \u672c\u8eab\u5c31\u662f\u589e\u5e7f\u8def\u3002 \\(y\\) \u5df2\u7ecf\u548c\u53e6\u5916\u4e00\u4e2a\u5de6\u90e8\u8282\u70b9\u5339\u914d\uff0c\u4f46\u662f\u8fd9\u4e2a\u5de6\u90e8\u8282\u70b9 \\(u\\) \u8fd8\u80fd\u627e\u5230\u53e6\u5916\u7684\u53f3\u90e8\u8282\u70b9 \\(v\\) \u5339\u914d\u3002 \u5219 \\(x\\to y \\to u \\to v\\) \u662f\u4e00\u6761\u589e\u5e7f\u8def . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 bool vis [ si_n ]; int match [ si_n ]; inline bool dfs ( int u ){ for ( register int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( ! vis [ v ]){ vis [ v ] = true ; if ( ! match [ v ] || dfs ( match [ v ])){ match [ v ] = u ; return true ; } // \u5bfb\u627e\u589e\u5e7f\u8def\u7684\u4e24\u79cd\u60c5\u51b5 } } return false ; } // in main() int res = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ memset ( vis , false , sizeof vis ); if ( dfs ( i )) res ++ ; } // \u53ea\u7528\u4ece\u5de6\u90e8\u5f00\u59cb // \u8fde\u8fb9\u7684\u65f6\u5019\u4f3c\u4e4e\u53ef\u4ee5\u53ea\u8fde\u4ece\u5de6\u90e8\u5230\u53f3\u90e8\u7684\u6709\u5411\u8fb9 \u590d\u6742\u5ea6 \\(\\text{O}(nm)\\) \uff0c\u4f46\u4e00\u822c\u5361\u4e0d\u6ee1\u3002 \u5efa\u56fe\u8fde\u8fb9\u7684\u65f6\u5019\u4f3c\u4e4e\u53ef\u4ee5\u53ea\u8fde\u4ece\u5de6\u90e8\u5230\u53f3\u90e8\u7684\u6709\u5411\u8fb9\uff1f \u5982\u679c\u8fde\u65e0\u5411\u8fb9\u4f3c\u4e4e\u4e5f\u4e00\u6837\u3002 [CH6801] \u68cb\u76d8\u8986\u76d6 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e00\u4e2a \\(n\\times m\\) \u7684\u68cb\u76d8\uff0c\u6709\u4e9b\u5730\u65b9\u4e0d\u80fd\u653e\uff0c\u6c42\u6700\u591a\u80fd\u653e\u591a\u5c11\u4e2a \\(1\\times 2\\) \u6216\u8005 \\(2\\times 1\\) \u7684\u9aa8\u724c\u3002 \u4e14\u9aa8\u724c\u4e0d\u80fd\u91cd\u53e0\u3002 \\(n,m\\le 100\\) \u3002 \u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u7684\u6a21\u578b\u9700\u8981\u627e\u5230\u4e24\u4e2a\u8981\u7d20\uff1a \\(0\\) \u8981\u7d20\uff1a\u8282\u70b9\u80fd\u5206\u6210\u4e24\u4e2a\u72ec\u7acb\u7684\u96c6\u5408\uff0c\u4e14\u96c6\u5408\u5185\u90e8\u6ca1\u6709\u8fb9 \\(1\\) \u8981\u7d20\uff1a\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u548c\u4e00\u6761\u5339\u914d\u8fb9\u76f8\u8fde\u3002 \u9aa8\u724c\u4e0d\u80fd\u91cd\u590d\uff0c\u5bf9\u5e94\u7684\u5c31\u662f \\(1\\) \u8981\u7d20\uff0c\u6240\u4ee5\u53ef\u4ee5\u628a\u9aa8\u724c\u770b\u4f5c\u8fb9\uff0c\u9aa8\u724c\u53ef\u4ee5\u5360\u7528\u7684\u4e24\u4e2a\u683c\u5b50\u5206\u522b\u5f53\u4f5c\u5de6\u90e8\u548c\u53f3\u90e8\u8282\u70b9\u3002 \u6240\u4ee5\u5bf9\u68cb\u76d8 \u9ed1\u767d\u67d3\u8272 \uff0c\u90a3\u4e0d\u7ba1\u600e\u4e48\u6837\uff0c\u9aa8\u724c\u5fc5\u7136\u8fde\u63a5\u7684\u662f\u5de6\u53f3\u90e8\u5404\u4e00\u4e2a\u8282\u70b9\u3002 \u628a ban \u6389\u7684\u683c\u5b50\u9664\u5916\u5c31\u53ef\u4ee5\u4e86\u3002 \uff08\u7528\u6a2a\u7eb5\u5750\u6807\u7684\u548c\u7684\u5947\u5076\u6027\u53d6\u5206\u5de6\u53f3\u90e8\u8282\u70b9\u5373\u53ef\uff09 \u8fde\u8fb9\u7684\u65f6\u5019\u53ea\u9700\u8981\u4ece\u5de6\u90e8\u8fde\u5230\u53f3\u90e8\u5c31\u884c\u3002 \u6c42\u51fa\u7684\u6700\u5927\u5339\u914d\u5c31\u662f\u7b54\u6848\u3002 [CH6802] \u8eca\u7684\u653e\u7f6e \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e00\u4e2a \\(n \\times m\\) \u7684\u68cb\u76d8\uff0c\u6709\u4e00\u4e9b\u683c\u5b50\u4e0d\u80fd\u653e\u3002 \u95ee\u6700\u591a\u53ef\u4ee5\u653e\u591a\u5c11\u4e2a\u4e92\u4e0d\u653b\u51fb\u7684\u8eca\uff0c \\(n,m \\le 200\\) \u3002 \u53d1\u73b0\u4e00\u4e2a\u8eca\u7684\u653b\u51fb\u8303\u56f4\u662f\u4e00\u884c\u548c\u4e00\u5217\u3002 \u6240\u4ee5\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a \\(1\\) \u8981\u7d20\uff1a\u6bcf\u884c\u6bcf\u5217\u6700\u591a\u4e00\u4e2a\u8eca\u3002 \u7136\u540e\u53ef\u4ee5\u8003\u8651\u628a \u884c\u548c\u5217\u770b\u4f5c\u70b9\uff0c\u68cb\u5b50\u770b\u4f5c\u8fb9 \uff0c\u56e0\u4e3a\u4e00\u4e2a\u68cb\u5b50\u4e0d\u53ef\u80fd\u540c\u65f6\u51fa\u73b0\u5728\u4e24\u884c\u6216\u8005\u4e24\u5217\uff0c\u6240\u4ee5\u8fd9\u5c31\u662f \\(0\\) \u8981\u7d20\u3002 \u90a3\u4e48\u6574\u5f20\u56fe\u5c31\u662f\u4e8c\u5206\u56fe\uff0c\u8dd1\u6700\u5927\u5339\u914d\u5373\u53ef\u3002 \u6700\u5c0f\u70b9\u8986\u76d6 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e00\u5f20\u4e8c\u5206\u56fe \\(G\\) \uff0c\u6c42\u51fa\u4e00\u4e2a\u6700\u5c0f\u7684\u70b9\u96c6 \\(S\\) \uff0c\u4f7f\u5f97\u56fe\u4e2d\u4efb\u610f\u7684\u4e00\u6761\u8fb9\u90fd\u81f3\u5c11\u6709\u4e00\u4e2a\u7aef\u70b9\u5c5e\u4e8e \\(S\\) \u3002 \u5219\u79f0 \\(S\\) \u4e3a\u4e8c\u5206\u56fe \\(G\\) \u7684\u6700\u5c0f\u70b9\u8986\u76d6\u3002 \u6709 \\(K\\ddot{o}nig\\) \u5b9a\u7406\uff1a\u4e8c\u5206\u56fe \\(G\\) \u7684\u6700\u5c0f\u70b9\u8986\u76d6\u5305\u542b\u7684\u70b9\u6570\u7b49\u4e8e \\(G\\) \u7684\u6700\u5927\u5339\u914d\u5305\u542b\u7684\u8fb9\u6570\u3002 \u8bc1\u660e\u7565\uff0c\u4f46\u662f\u63d0\u4e00\u4e2a\u6784\u9020\u65b9\u5f0f\uff1a \u5148\u6c42\u6700\u5927\u5339\u914d \\(S\\) \u3002 \u4ece\u5de6\u90e8\u7684\u6bcf\u4e00\u4e2a\u975e\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u518d\u505a\u4e00\u6b21 dfs \u627e\u589e\u5e7f\u8def\u5e76\u6807\u8bb0\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\u3002 \u6700\u540e\u5de6\u90e8\u6ca1\u6709\u88ab\u6807\u8bb0\u7684\u70b9\uff0c\u53f3\u90e8\u88ab\u6807\u8bb0\u7684\u70b9\u5c31\u662f\u6700\u5c0f\u70b9\u8986\u76d6\u3002 [POJ1325] Machine Schedule \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4e24\u53f0\u521d\u59cb\u4e3a\u6a21\u5f0f \\(0\\) \u7684\u673a\u5668 \\(A,B\\) \uff0c\u5206\u522b\u6709 \\(0\\sim N-1,0 \\sim M-1\\) \u8fd9\u51e0\u79cd\u6a21\u5f0f\u3002 \u7ed9\u5b9a \\(K\\) \u4e2a \\(a[i],b[i]\\) \u8868\u793a\u7b2c \\(i\\) \u4e2a\u4efb\u52a1\u5728 \\(A/B\\) \u4e0a\u8fd0\u884c\u6240\u9700\u8981\u7684\u6a21\u5f0f\u3002 \u4efb\u52a1\u6267\u884c\u987a\u5e8f\u4efb\u610f\uff0c\u4f46\u662f\u673a\u5668\u53ea\u8981\u8f6c\u6362\u6a21\u5f0f\u5c31\u8981\u91cd\u542f\u3002 \u6c42\u6700\u5c11\u91cd\u542f\u6b21\u6570\u3002 \\(N,M,K \\le 100\\) \u3002 \u4e8c\u5206\u56fe\u6700\u5c0f\u70b9\u8986\u76d6\u7684\u8981\u7d20\u53ea\u6709\u4e00\u4e2a \\(2\\) \u8981\u7d20\uff1a\u6bcf\u6761\u8fb9\u6709\u4e24\u4e2a\u7aef\u70b9\uff0c\u4e8c\u8005 \u81f3\u5c11 \u9009\u4e00\u4e2a\u3002 \u672c\u9898\u7684\u9009\u62e9\u54ea\u4e00\u4e2a\u673a\u5668\u5c31\u662f\u7aef\u70b9\uff0c\u4efb\u52a1\u5c31\u662f\u8fb9\u3002 \u6240\u4ee5\u628a\u4efb\u52a1\u4f5c\u4e3a\u8fb9\uff0c \\(A\\) \u7684\u6a21\u5f0f \\(0 \\sim N-1\\) \u4f5c\u4e3a\u5de6\u90e8\uff0c \\(B\\) \u7684\u6a21\u5f0f \\(0 \\sim M-1\\) \u4f5c\u4e3a\u53f3\u90e8\u8282\u70b9\u3002 \u7136\u540e\u6c42\u6700\u5c0f\u70b9\u8986\u76d6\u5373\u53ef\u3002 \u56e0\u4e3a\u521d\u59cb\u662f \\(0\\) \uff0c\u6240\u4ee5 \\(a[i],b[i]\\) \u53ea\u8981\u6709\u4e00\u4e2a\u662f \\(0\\) \u5c31\u53ef\u4ee5\u4e0d\u7528\u7ba1\u8fd9\u4e2a\u4efb\u52a1\u4e86\u3002 [POJ2226] Muddy Fields \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4e00\u4e2a \\(n\\times m\\) \u7684\u683c\u5b50\u56fe\uff0c\u6709\u4e9b\u5730\u65b9\u662f\u810f\u7684\u3002 \u7528\u82e5\u5e72\u4e2a\u53ef\u4ee5\u91cd\u590d\u8986\u76d6\u7684\uff0c\u53ef\u4ee5 90 \u5ea6\u65cb\u8f6c\u7684\uff0c\u5bbd\u4e3a \\(1\\) \uff0c\u957f\u5ea6\u4efb\u610f\u7684\u677f\u5b50\u8986\u76d6\u6240\u6709\u810f\u7684\u683c\u5b50\u3002 \u4e14\u4e0d\u80fd\u8986\u76d6\u5e72\u51c0\u7684\u683c\u5b50\uff0c\u6c42\u6700\u5c0f\u9700\u8981\u591a\u5c11\u4e2a\u677f\u5b50\u3002 \\(n,m \\le 50\\) \u3002 \u8fd9\u9898\u5982\u679c\u76f4\u63a5\u4ece\u683c\u5b50\u4f5c\u4e3a\u70b9\u6765\u5339\u914d\u662f\u627e\u4e0d\u5230\u4ec0\u4e48\u601d\u8def\u7684\u3002 \u53d1\u73b0\u9898\u76ee\u4e2d\u8bf4\u53ef\u4ee5\u65cb\u8f6c 90 \u5ea6\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e2a\u683c\u5b50\uff0c\u8986\u76d6\u5b83\u7684\u4e0d\u662f\u4e0a\u4e0b\u65b9\u5411\u7684\u5c31\u662f\u5de6\u53f3\u65b9\u5411\u7684\u677f\u5b50\u3002 \u5e76\u4e14\u9898\u76ee\u4e2d\u8bf4\u53ef\u4ee5\u91cd\u590d\u8986\u76d6\uff0c\u53ea\u8981\u88ab\u8986\u76d6\u8fc7\u90fd\u884c\u3002 \u8fd9\u53e5\u8bdd\u6697\u793a\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u4f4d\u8fd0\u7b97\u7684 \u201c\u6216\u201d \u7684\u6761\u4ef6\uff0c\u53ef\u4ee5\u628a\u4ed6\u8f6c\u5316\u6210 \u201c\u81f3\u5c11\u201d\u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u628a\u884c\u548c\u5217\u770b\u4f5c\u8282\u70b9\uff0c\u683c\u5b50\u4f5c\u4e3a\u8fb9\uff0c\u7c7b\u4f3c\u4e0a\u9762\u7684 \u201c\u8eca\u7684\u653e\u7f6e\u201d\u3002 \u4f46\u662f\u53d1\u73b0\u76f4\u63a5\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u5982\u679c\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\u5c31\u4f1a\u51fa\u4e8b \uff1a .*.*.*. \u3002 \u4e0a\u8ff0\u505a\u6cd5\u4f1a\u76f4\u63a5\u5728\u8fd9\u4e00\u884c\u653e\u4e00\u4e2a\uff0c\u800c\u5ffd\u7565\u4e86\u4e0d\u80fd\u8986\u76d6\u5e72\u51c0\u7684\u683c\u5b50\u7684\u6761\u4ef6\u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e2a\u810f\u683c\u5b50\u7684\u8fde\u901a\u5757\u5355\u72ec\u8dd1\u6700\u5c0f\u70b9\u8986\u76d6\u3002 \u4f46\u662f\u590d\u6742\u5ea6\u4f1a\u7206\u70b8\uff0c\u6240\u4ee5\u8003\u8651\u80fd\u8fbe\u5230\u540c\u6837\u6548\u679c\u7684\u53e6\u4e00\u4e2a\u505a\u6cd5\uff1a \u5bf9\u4e8e\u6bcf\u4e2a\u810f\u8fde\u901a\u5757\uff0c\u628a\u5b83\u5206\u6210\u5bbd\u5ea6\u4e3a \\(1\\) \u7684 \u201c\u884c\u810f\u8fde\u901a\u5757\u201d\u548c\u201c\u5217\u810f\u8fde\u901a\u5757\u201d\uff0c\u53ef\u4ee5\u770b\u4f5c\u76f4\u63a5\u653e\u4e86\u5757\u540c\u7b49\u5927\u5c0f\u7684\u677f\u5b50\u4e0a\u53bb\u3002 \u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u8fde\u63a5\u5b83\u6240\u5728\u7684\u201c\u884c\u810f\u8fde\u901a\u5757\u201d\u548c\u201c\u5217\u810f\u8fde\u901a\u5757\u201d\uff0c\u8dd1\u6700\u5c0f\u70b9\u8986\u76d6\u5373\u53ef\u3002 \u6700\u5927\u72ec\u7acb\u96c6 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4e00\u5f20\u4e8c\u5206\u56fe \\(G\\) \uff0c\u6c42\u51fa\u4e00\u4e2a\u70b9\u96c6 \\(S\\) \u4f7f\u5f97 \\(S\\) \u5f53\u4e2d\u7684\u70b9\u90fd\u6ca1\u6709\u8fb9\u76f8\u8fde\u3002 \u6700\u5927\u7684 \\(S\\) \u5219\u79f0\u4e3a \\(G\\) \u7684\u6700\u5927\u72ec\u7acb\u96c6\u3002 \u6700\u5927\u56e2\u5b9a\u4e49\u76f8\u53cd\uff0c\u662f\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u90fd\u6709\u8fde\u8fb9\u7684\u4e00\u4e2a\u5b50\u56fe\u3002 \u5b9a\u7406\uff1a\u65e0\u5411\u56fe \\(G\\) \u7684\u6700\u5927\u56e2\u7b49\u4e8e\u5176\u8865\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6\u3002 \u4e00\u822c\u65e0\u5411\u56fe\u7684\u6700\u5927\u56e2\u548c\u6700\u5927\u72ec\u7acb\u96c6\u662f NPC\u3002 \u5b9a\u7406\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u4e8c\u5206\u56fe \\(G\\) \uff0c \\(G\\) \u7684\u6700\u5927\u72ec\u7acb\u96c6\u7684\u5927\u5c0f\u7b49\u4e8e\u8282\u70b9\u4e2a\u6570\u51cf\u53bb\u6700\u5c0f\u70b9\u8986\u76d6\u6570\u3002 \u5229\u7528\u5b9a\u4e49\u5373\u53ef\u8bc1\u660e\u3002 [CH6901] \u9a91\u58eb\u653e\u7f6e \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4e00\u4e2a \\(n\\times m\\) \u7684\u68cb\u76d8\u3002\u6709\u4e00\u4e9b\u70b9\u4e0d\u80fd\u653e\uff0c\u95ee\u6700\u591a\u53ef\u4ee5\u653e\u591a\u5c11\u4e2a\u56fd\u9645\u8c61\u68cb\u7684\u9a91\u58eb\u3002 \u9a91\u58eb\u5728\u683c\u5b50\u4e0a\u6309\u7167\u65e5\u5b57\u653b\u51fb\uff0c\u548c\u4e2d\u56fd\u8c61\u68cb\u7684\u9a6c\u6709\u4e00\u5b9a\u533a\u522b\uff08\u6ca1\u6709\u522b\u9a6c\u817f\uff09\u3002 \u53ef\u4ee5\u53d1\u73b0\u76f8\u4e92\u4e0d\u80fd\u653b\u51fb\u5c31\u662f\u6c42\u6700\u5927\u72ec\u7acb\u96c6\u3002 \u6240\u4ee5\u53ef\u4ee5\u628a\u6bcf\u4e00\u4e2a\u53ef\u4ee5\u9632\u6b62\u7684\u8282\u70b9\u5f53\u4f5c\u4e00\u4e2a\u8282\u70b9\u548c\u5b83\u80fd\u5230\u8fbe\u7684\u8282\u70b9\u8fde\u8fb9\u3002 \u9ed1\u767d\u67d3\u8272\u4e4b\u540e\u53ef\u4ee5\u53d1\u73b0\u6784\u9020\u7684\u56fe\u5fc5\u7136\u662f\u4e8c\u5206\u56fe\u3002 \u6240\u4ee5\u627e\u5230\u6240\u6709\u5de6\u90e8\u8282\u70b9\uff0c\u8fde\u8fb9\uff0c\u6c42\u6700\u5927\u72ec\u7acb\u96c6\u5373\u53ef\u3002 \u6700\u5c0f\u8def\u5f84\u70b9\u8986\u76d6 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e00\u5f20 DAG\uff0c\u8981\u6c42\u7528\u5c3d\u91cf\u5c11\u7684 \u4e0d\u76f8\u4ea4 \u8def\u5f84\u8986\u76d6\u6574\u5f20\u56fe\u7684\u6240\u6709\u9876\u70b9\u3002 \u8fd9\u5c31\u662f\u6700\u5c0f\u8def\u5f84\u70b9\u8986\u76d6\u3002 \u62c6\u70b9\u4e8c\u5206\u56fe\uff1a\u5bf9\u4e8e\u4e00\u5f20 DAG\uff0c\u8bbe\u5b83\u6709 \\(N\\) \u4e2a\u8282\u70b9\uff0c\u628a\u539f\u56fe\u7684\u6bcf\u4e2a\u8282\u70b9\u62c6\u6210\u4e24\u4e2a\u8282\u70b9\uff0c\u5de6\u90e8\u7684\u7f16\u53f7\u4e3a\u539f\u7f16\u53f7\uff0c\u53f3\u90e8\u7684\u7f16\u53f7\u4e3a\u539f\u7f16\u53f7 \\(+N\\) \u3002 \u5bf9\u4e8e\u539f\u56fe\u7684\u4e00\u6761\u6709\u5411\u8fb9 \\((x,y)\\) \uff0c\u8fde\u63a5\u65b0\u56fe\u4e0a\u7684 \\((x,y+n)\\) \u3002 \u5f97\u5230\u7684\u4e8c\u5206\u56fe\u79f0\u4e3a\u8fd9\u4e2a DAG \u7684\u62c6\u70b9\u4e8c\u5206\u56fe\uff0c\u4e00\u822c\u8bb0\u4f5c \\(G_2\\) \u3002 \u5b9a\u7406\uff1a\u4e00\u5f20 DAG \u7684\u6700\u5c0f\u8def\u5f84\u70b9\u8986\u76d6\u5305\u542b\u7684\u8def\u5f84\u6761\u6570\u7b49\u4e8e\u5b83\u7684\u70b9\u6570\u51cf\u53bb\u5b83\u7684\u62c6\u70b9\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u6570\u3002 \u8bc1\u660e\u7528\u5b9a\u4e49+ \u4e00\u4e9b\u8ba8\u8bba\u5373\u53ef\u3002 \u6700\u5c0f\u8def\u5f84\u53ef\u91cd\u590d\u70b9\u8986\u76d6 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8def\u5f84\u53ef\u4ee5\u76f8\u4ea4\u3002 \u90a3\u4e48\u5148\u5bf9\u8fd9\u4e2a DAG \u505a\u4f20\u9012\u95ed\u5305\u5f97\u5230\u4e00\u5f20\u65b0\u7684 DAG\uff0c\u8fd9\u4e2a\u65b0 DAG \u7684\u6700\u5c0f\u8def\u5f84\u70b9\u8986\u76d6\u5c31\u662f\u539f DAG \u7684\u6700\u5c0f\u8def\u5f84\u53ef\u91cd\u590d\u70b9\u8986\u76d6\u3002 [Bzoj2718/1143] Vani \u548c Cl2 \u6349\u8ff7\u85cf \u03c8(\uff40\u2207\u00b4)\u03c8 Vani \u548c cl2 \u5728\u4e00\u7247\u6811\u6797\u91cc\u6349\u8ff7\u85cf\u3002 \u8fd9\u7247\u6811\u6797\u91cc\u6709 \\(N\\) \u5ea7\u623f\u5b50\uff0c \\(M\\) \u6761\u6709\u5411\u9053\u8def\uff0c\u7ec4\u6210\u4e86\u4e00\u5f20\u6709\u5411\u65e0\u73af\u56fe\u3002 \u6811\u6797\u91cc\u7684\u6811\u975e\u5e38\u8302\u5bc6\uff0c\u8db3\u4ee5\u906e\u6321\u89c6\u7ebf\uff0c\u4f46\u662f\u6cbf\u7740\u9053\u8def\u671b\u53bb\uff0c\u5374\u662f\u89c6\u91ce\u5f00\u9614\u3002 \u5982\u679c\u4ece\u623f\u5b50 \\(A\\) \u6cbf\u7740\u8def\u8d70\u4e0b\u53bb\u80fd\u591f\u5230\u8fbe \\(B\\) \uff0c\u90a3\u4e48\u5728 \\(A\\) \u548c \\(B\\) \u91cc\u7684\u4eba\u662f\u80fd\u591f\u76f8\u4e92\u671b\u89c1\u7684\u3002 \u73b0\u5728 cl2 \u8981\u5728\u8fd9 \\(N\\) \u5ea7\u623f\u5b50\u91cc\u9009\u62e9 \\(K\\) \u5ea7\u4f5c\u4e3a\u85cf\u8eab\u70b9\uff0c\u540c\u65f6 Vani \u4e5f\u4e13\u6311 cl2 \u4f5c\u4e3a\u85cf\u8eab\u70b9\u7684\u623f\u8fdb\u53bb\u5bfb\u627e\uff0c\u4e3a\u4e86\u907f\u514d\u88ab Vani \u770b\u89c1\uff0ccl2 \u8981\u6c42\u8fd9 \\(K\\) \u4e2a\u85cf\u8eab\u70b9\u7684\u4efb\u610f\u4e24\u4e2a\u4e4b\u95f4\u90fd\u6ca1\u6709\u8def\u5f84\u76f8\u8fde\u3002 \u4e3a\u4e86\u8ba9 Vani \u66f4\u96be\u627e\u5230\u81ea\u5df1\uff0ccl2 \u60f3\u77e5\u9053\u6700\u591a\u80fd\u9009\u51fa\u591a\u5c11\u4e2a\u85cf\u8eab\u70b9\u3002 \u660e\u663e\u5c31\u662f\u8981\u6c42\u6700\u5c0f\u8def\u5f84\u53ef\u91cd\u590d\u70b9\u8986\u76d6\u3002 \u6240\u4ee5\u5148\u505a\u4e00\u4e2a\u4f20\u9012\u95ed\u5305\uff0c\u7136\u540e\u62c6\u70b9\uff0c\u6c42\u6700\u5c0f\u8def\u5f84\u70b9\u8986\u76d6\u5373\u53ef\u3002","title":"\u4e8c\u5206\u56fe"},{"location":"algor/graph/bipartite-graph/#_1","text":"\u5982\u679c\u4e00\u5f20\u65e0\u5411\u56fe \\(G\\) \u53ef\u4ee5\u5206\u6210\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u7684\u70b9\u96c6 \\(A,B\\) \uff0c\u4e14\u70b9\u96c6\u5f53\u4e2d\u7684\u70b9\u76f8\u4e92\u4e4b\u95f4\u6ca1\u6709\u8fde\u8fb9\uff0c\u5219\u79f0 \\(G\\) \u4e3a\u4e00\u5f20\u4e8c\u5206\u56fe\u3002 \\(A,B\\) \u5206\u522b\u79f0\u4e3a \\(G\\) \u7684\u5de6\u90e8\u548c\u53f3\u90e8\u3002","title":"\u5b9a\u4e49"},{"location":"algor/graph/bipartite-graph/#_2","text":"\u5b9a\u7406\uff1a\u65e0\u5411\u56fe \\(G\\) \u662f\u4e8c\u5206\u56fe\uff0c \u5f53\u4e14\u4ec5\u5f53 \u56fe\u4e2d\u4e0d\u5b58\u5728\u5947\u73af\u3002 \u6240\u4ee5\u53ef\u4ee5\u7528\u67d3\u8272\u6cd5\u5224\u5b9a\u65e0\u5411\u56fe \\(G\\) \u662f\u4e0d\u662f\u4e8c\u5206\u56fe\u3002 \u8fdb\u884c\u9ed1\u767d\u7684\u95f4\u9694\u67d3\u8272\uff0c\u5982\u679c\u51fa\u73b0\u51b2\u7a81\uff0c\u90a3\u4e48\u56fe\u4e2d\u5fc5\u7136\u5b58\u5728\u5947\u73af\uff0c \\(G\\) \u4e0d\u662f\u4e8c\u5206\u56fe\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 int color [ si_n ]; bool ok = true ; inline void dfs ( int u , int col ){ color [ u ] = col ; for ( register int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( ! color [ v ]) dfs ( v , 3 - col ); else if ( color [ v ] == col ) ok = false ; } } // in main() memset ( color , 0 , sizeof color ); for ( register int i = 1 ; i <= n ; ++ i ) if ( ! color [ i ]) dfs ( i , 1 ); \u590d\u6742\u5ea6 \\(\\text{O}(n+m)\\) \u3002","title":"\u5224\u5b9a"},{"location":"algor/graph/bipartite-graph/#_3","text":"\u5339\u914d\uff1a\u4efb\u610f\u4e24\u6761\u8fb9\u90fd\u6ca1\u6709\u516c\u5171\u7aef\u70b9\u7684\u8fb9\u96c6\u79f0\u4e3a\u56fe\u7684\u4e00\u7ec4\u5339\u914d \\(S\\) \u3002 \u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\uff1a\u4e8c\u5206\u56fe\u5f53\u4e2d\uff0c\u8fb9\u6570\u6700\u591a\u7684\u4e00\u7ec4\u5339\u914d\u4e3a\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u3002 \u5728 \\(S\\) \u5f53\u4e2d\u7684\u8fb9\u88ab\u79f0\u4e3a\u5339\u914d\u8fb9\uff0c\u5176\u5b83\u7684\u8fb9\u79f0\u4e3a\u975e\u5339\u914d\u8fb9\uff0c\u5339\u914d\u8fb9\u7684\u7aef\u70b9\u662f\u5339\u914d\u70b9\uff0c \u5176\u5b83 \u8282\u70b9\u88ab\u79f0\u4e3a\u975e\u5339\u914d\u70b9\u3002 \u5982\u679c\u4e8c\u5206\u56fe\u4e0a\u5b58\u5728\u4e00\u6761\u8def\u5f84 \\(\\delta(u,v)\\) \uff0c\u8fde\u63a5 \\(u,v\\) \u8fd9\u4e24\u4e2a\u975e\u5339\u914d\u70b9\uff0c\u4f7f\u5f97 \\(S\\) \u7684\u5339\u914d\u8fb9\u548c\u975e\u5339\u914d\u8fb9\u5728\u8def\u5f84\u4e0a\u4ea4\u66ff\u51fa\u73b0\uff0c\u79f0 \\(\\delta(u,v)\\) \u4e3a\u5339\u914d \\(S\\) \u7684\u589e\u5e7f\u8def\u3002 \u5982\u56fe\uff0c \\(\\delta(u,v)\\) \u5373\u4e3a\u4e00\u6761\u589e\u5e7f\u8def\uff1a \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5148\u5b9a\u4e49\u7684\u662f\u5339\u914d\u70b9\u548c\u5339\u914d\u8fb9\uff0c\u5269\u4e0b\u7684\u624d\u662f\u975e\u5339\u914d\u8fb9\u548c\u5339\u914d\u70b9\u3002 \u6240\u4ee5 \u8fde\u63a5\u4e24\u4e2a\u5339\u914d\u70b9\u7684\u4e0d\u4e00\u5b9a\u662f\u5339\u914d\u8fb9\uff0c\u4f46\u7aef\u70b9\u5e26\u6709\u975e\u5339\u914d\u70b9\u7684\u8fb9\u4e00\u5b9a\u662f\u975e\u5339\u914d\u8fb9 \u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u589e\u5e7f\u8def\u5177\u6709\u4ee5\u4e0b\u6027\u8d28\uff1a \u8fb9\u6570\u4e3a\u5947\u6570 \u7b2c \\(1,3,5,...\\) \u6761\u8fb9\u662f\u975e\u5339\u914d\u8fb9\uff0c\u7b2c \\(2,4,6,...\\) \u6761\u8fb9\u662f\u5339\u914d\u8fb9\u3002 \u6240\u4ee5\uff0c\u53ef\u4ee5\u5bf9\u589e\u5e7f\u8def\u4e0a\u7684\u8fb9\u7684\u72b6\u6001\u53d6\u53cd\uff0c\u5f97\u5230\u7684\u5339\u914d\u6570\u5fc5\u7136\u4f1a\u589e\u52a0 \\(1\\) \u3002 \u4ece\u800c\u53ef\u4ee5\u5f97\u5230\u5b9a\u7406\uff1a \u4e8c\u5206\u56fe\u7684\u4e00\u7ec4\u5339\u914d \\(S\\) \u662f\u6700\u5927\u5339\u914d\uff0c \u5f53\u4e14\u4ec5\u5f53 \u56fe\u4e2d\u4e0d\u5b58\u5728 \\(S\\) \u7684\u589e\u5e7f\u8def\u3002 \u5bf9\u5e94\u7684\u6709\u4e00\u4e2a\u5308\u7259\u5229\u7b97\u6cd5\uff0c\u53ef\u4ee5\u5229\u7528\u589e\u5e7f\u8def\u6c42\u51fa\u4e8c\u5206\u56fe \\(G\\) \u7684\u6700\u5927\u5339\u914d\u3002 \u601d\u8def\u662f\uff1a \u6700\u5f00\u59cb\u5148\u4ee4 \\(S=\\emptyset\\) \uff0c\u7136\u540e\u5bfb\u627e\u4e00\u4e2a\u589e\u5e7f\u8def\uff0c\u53d6\u53cd\uff0c\u5f97\u5230\u65b0\u5339\u914d \\(S\\prime\\) \u3002 \u91cd\u590d\u76f4\u5230\u4e0d\u5b58\u5728\u589e\u5e7f\u8def\u3002 \u5bfb\u627e\u589e\u5e7f\u8def\u7684\u65f6\u5019\u5206\u4e24\u79cd\u60c5\u51b5\u7ed9\u4e00\u4e2a\u5de6\u90e8\u8282\u70b9 \\(x\\) \u5bfb\u627e\u4e00\u4e2a\u5339\u914d\u7684\u53f3\u90e8\u8282\u70b9 \\(y\\) \uff1a \\(y\\) \u5c31\u662f\u975e\u5339\u914d\u70b9\uff0c \\((x,y)\\) \u672c\u8eab\u5c31\u662f\u589e\u5e7f\u8def\u3002 \\(y\\) \u5df2\u7ecf\u548c\u53e6\u5916\u4e00\u4e2a\u5de6\u90e8\u8282\u70b9\u5339\u914d\uff0c\u4f46\u662f\u8fd9\u4e2a\u5de6\u90e8\u8282\u70b9 \\(u\\) \u8fd8\u80fd\u627e\u5230\u53e6\u5916\u7684\u53f3\u90e8\u8282\u70b9 \\(v\\) \u5339\u914d\u3002 \u5219 \\(x\\to y \\to u \\to v\\) \u662f\u4e00\u6761\u589e\u5e7f\u8def . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 bool vis [ si_n ]; int match [ si_n ]; inline bool dfs ( int u ){ for ( register int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( ! vis [ v ]){ vis [ v ] = true ; if ( ! match [ v ] || dfs ( match [ v ])){ match [ v ] = u ; return true ; } // \u5bfb\u627e\u589e\u5e7f\u8def\u7684\u4e24\u79cd\u60c5\u51b5 } } return false ; } // in main() int res = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ memset ( vis , false , sizeof vis ); if ( dfs ( i )) res ++ ; } // \u53ea\u7528\u4ece\u5de6\u90e8\u5f00\u59cb // \u8fde\u8fb9\u7684\u65f6\u5019\u4f3c\u4e4e\u53ef\u4ee5\u53ea\u8fde\u4ece\u5de6\u90e8\u5230\u53f3\u90e8\u7684\u6709\u5411\u8fb9 \u590d\u6742\u5ea6 \\(\\text{O}(nm)\\) \uff0c\u4f46\u4e00\u822c\u5361\u4e0d\u6ee1\u3002 \u5efa\u56fe\u8fde\u8fb9\u7684\u65f6\u5019\u4f3c\u4e4e\u53ef\u4ee5\u53ea\u8fde\u4ece\u5de6\u90e8\u5230\u53f3\u90e8\u7684\u6709\u5411\u8fb9\uff1f \u5982\u679c\u8fde\u65e0\u5411\u8fb9\u4f3c\u4e4e\u4e5f\u4e00\u6837\u3002","title":"\u6700\u5927\u5339\u914d"},{"location":"algor/graph/bipartite-graph/#ch6801","text":"\u7ed9\u5b9a\u4e00\u4e2a \\(n\\times m\\) \u7684\u68cb\u76d8\uff0c\u6709\u4e9b\u5730\u65b9\u4e0d\u80fd\u653e\uff0c\u6c42\u6700\u591a\u80fd\u653e\u591a\u5c11\u4e2a \\(1\\times 2\\) \u6216\u8005 \\(2\\times 1\\) \u7684\u9aa8\u724c\u3002 \u4e14\u9aa8\u724c\u4e0d\u80fd\u91cd\u53e0\u3002 \\(n,m\\le 100\\) \u3002 \u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u7684\u6a21\u578b\u9700\u8981\u627e\u5230\u4e24\u4e2a\u8981\u7d20\uff1a \\(0\\) \u8981\u7d20\uff1a\u8282\u70b9\u80fd\u5206\u6210\u4e24\u4e2a\u72ec\u7acb\u7684\u96c6\u5408\uff0c\u4e14\u96c6\u5408\u5185\u90e8\u6ca1\u6709\u8fb9 \\(1\\) \u8981\u7d20\uff1a\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u548c\u4e00\u6761\u5339\u914d\u8fb9\u76f8\u8fde\u3002 \u9aa8\u724c\u4e0d\u80fd\u91cd\u590d\uff0c\u5bf9\u5e94\u7684\u5c31\u662f \\(1\\) \u8981\u7d20\uff0c\u6240\u4ee5\u53ef\u4ee5\u628a\u9aa8\u724c\u770b\u4f5c\u8fb9\uff0c\u9aa8\u724c\u53ef\u4ee5\u5360\u7528\u7684\u4e24\u4e2a\u683c\u5b50\u5206\u522b\u5f53\u4f5c\u5de6\u90e8\u548c\u53f3\u90e8\u8282\u70b9\u3002 \u6240\u4ee5\u5bf9\u68cb\u76d8 \u9ed1\u767d\u67d3\u8272 \uff0c\u90a3\u4e0d\u7ba1\u600e\u4e48\u6837\uff0c\u9aa8\u724c\u5fc5\u7136\u8fde\u63a5\u7684\u662f\u5de6\u53f3\u90e8\u5404\u4e00\u4e2a\u8282\u70b9\u3002 \u628a ban \u6389\u7684\u683c\u5b50\u9664\u5916\u5c31\u53ef\u4ee5\u4e86\u3002 \uff08\u7528\u6a2a\u7eb5\u5750\u6807\u7684\u548c\u7684\u5947\u5076\u6027\u53d6\u5206\u5de6\u53f3\u90e8\u8282\u70b9\u5373\u53ef\uff09 \u8fde\u8fb9\u7684\u65f6\u5019\u53ea\u9700\u8981\u4ece\u5de6\u90e8\u8fde\u5230\u53f3\u90e8\u5c31\u884c\u3002 \u6c42\u51fa\u7684\u6700\u5927\u5339\u914d\u5c31\u662f\u7b54\u6848\u3002","title":"[CH6801] \u68cb\u76d8\u8986\u76d6"},{"location":"algor/graph/bipartite-graph/#ch6802","text":"\u7ed9\u5b9a\u4e00\u4e2a \\(n \\times m\\) \u7684\u68cb\u76d8\uff0c\u6709\u4e00\u4e9b\u683c\u5b50\u4e0d\u80fd\u653e\u3002 \u95ee\u6700\u591a\u53ef\u4ee5\u653e\u591a\u5c11\u4e2a\u4e92\u4e0d\u653b\u51fb\u7684\u8eca\uff0c \\(n,m \\le 200\\) \u3002 \u53d1\u73b0\u4e00\u4e2a\u8eca\u7684\u653b\u51fb\u8303\u56f4\u662f\u4e00\u884c\u548c\u4e00\u5217\u3002 \u6240\u4ee5\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a \\(1\\) \u8981\u7d20\uff1a\u6bcf\u884c\u6bcf\u5217\u6700\u591a\u4e00\u4e2a\u8eca\u3002 \u7136\u540e\u53ef\u4ee5\u8003\u8651\u628a \u884c\u548c\u5217\u770b\u4f5c\u70b9\uff0c\u68cb\u5b50\u770b\u4f5c\u8fb9 \uff0c\u56e0\u4e3a\u4e00\u4e2a\u68cb\u5b50\u4e0d\u53ef\u80fd\u540c\u65f6\u51fa\u73b0\u5728\u4e24\u884c\u6216\u8005\u4e24\u5217\uff0c\u6240\u4ee5\u8fd9\u5c31\u662f \\(0\\) \u8981\u7d20\u3002 \u90a3\u4e48\u6574\u5f20\u56fe\u5c31\u662f\u4e8c\u5206\u56fe\uff0c\u8dd1\u6700\u5927\u5339\u914d\u5373\u53ef\u3002","title":"[CH6802] \u8eca\u7684\u653e\u7f6e"},{"location":"algor/graph/bipartite-graph/#_4","text":"\u7ed9\u5b9a\u4e00\u5f20\u4e8c\u5206\u56fe \\(G\\) \uff0c\u6c42\u51fa\u4e00\u4e2a\u6700\u5c0f\u7684\u70b9\u96c6 \\(S\\) \uff0c\u4f7f\u5f97\u56fe\u4e2d\u4efb\u610f\u7684\u4e00\u6761\u8fb9\u90fd\u81f3\u5c11\u6709\u4e00\u4e2a\u7aef\u70b9\u5c5e\u4e8e \\(S\\) \u3002 \u5219\u79f0 \\(S\\) \u4e3a\u4e8c\u5206\u56fe \\(G\\) \u7684\u6700\u5c0f\u70b9\u8986\u76d6\u3002 \u6709 \\(K\\ddot{o}nig\\) \u5b9a\u7406\uff1a\u4e8c\u5206\u56fe \\(G\\) \u7684\u6700\u5c0f\u70b9\u8986\u76d6\u5305\u542b\u7684\u70b9\u6570\u7b49\u4e8e \\(G\\) \u7684\u6700\u5927\u5339\u914d\u5305\u542b\u7684\u8fb9\u6570\u3002 \u8bc1\u660e\u7565\uff0c\u4f46\u662f\u63d0\u4e00\u4e2a\u6784\u9020\u65b9\u5f0f\uff1a \u5148\u6c42\u6700\u5927\u5339\u914d \\(S\\) \u3002 \u4ece\u5de6\u90e8\u7684\u6bcf\u4e00\u4e2a\u975e\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u518d\u505a\u4e00\u6b21 dfs \u627e\u589e\u5e7f\u8def\u5e76\u6807\u8bb0\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\u3002 \u6700\u540e\u5de6\u90e8\u6ca1\u6709\u88ab\u6807\u8bb0\u7684\u70b9\uff0c\u53f3\u90e8\u88ab\u6807\u8bb0\u7684\u70b9\u5c31\u662f\u6700\u5c0f\u70b9\u8986\u76d6\u3002","title":"\u6700\u5c0f\u70b9\u8986\u76d6"},{"location":"algor/graph/bipartite-graph/#poj1325-machine-schedule","text":"\u7ed9\u4e24\u53f0\u521d\u59cb\u4e3a\u6a21\u5f0f \\(0\\) \u7684\u673a\u5668 \\(A,B\\) \uff0c\u5206\u522b\u6709 \\(0\\sim N-1,0 \\sim M-1\\) \u8fd9\u51e0\u79cd\u6a21\u5f0f\u3002 \u7ed9\u5b9a \\(K\\) \u4e2a \\(a[i],b[i]\\) \u8868\u793a\u7b2c \\(i\\) \u4e2a\u4efb\u52a1\u5728 \\(A/B\\) \u4e0a\u8fd0\u884c\u6240\u9700\u8981\u7684\u6a21\u5f0f\u3002 \u4efb\u52a1\u6267\u884c\u987a\u5e8f\u4efb\u610f\uff0c\u4f46\u662f\u673a\u5668\u53ea\u8981\u8f6c\u6362\u6a21\u5f0f\u5c31\u8981\u91cd\u542f\u3002 \u6c42\u6700\u5c11\u91cd\u542f\u6b21\u6570\u3002 \\(N,M,K \\le 100\\) \u3002 \u4e8c\u5206\u56fe\u6700\u5c0f\u70b9\u8986\u76d6\u7684\u8981\u7d20\u53ea\u6709\u4e00\u4e2a \\(2\\) \u8981\u7d20\uff1a\u6bcf\u6761\u8fb9\u6709\u4e24\u4e2a\u7aef\u70b9\uff0c\u4e8c\u8005 \u81f3\u5c11 \u9009\u4e00\u4e2a\u3002 \u672c\u9898\u7684\u9009\u62e9\u54ea\u4e00\u4e2a\u673a\u5668\u5c31\u662f\u7aef\u70b9\uff0c\u4efb\u52a1\u5c31\u662f\u8fb9\u3002 \u6240\u4ee5\u628a\u4efb\u52a1\u4f5c\u4e3a\u8fb9\uff0c \\(A\\) \u7684\u6a21\u5f0f \\(0 \\sim N-1\\) \u4f5c\u4e3a\u5de6\u90e8\uff0c \\(B\\) \u7684\u6a21\u5f0f \\(0 \\sim M-1\\) \u4f5c\u4e3a\u53f3\u90e8\u8282\u70b9\u3002 \u7136\u540e\u6c42\u6700\u5c0f\u70b9\u8986\u76d6\u5373\u53ef\u3002 \u56e0\u4e3a\u521d\u59cb\u662f \\(0\\) \uff0c\u6240\u4ee5 \\(a[i],b[i]\\) \u53ea\u8981\u6709\u4e00\u4e2a\u662f \\(0\\) \u5c31\u53ef\u4ee5\u4e0d\u7528\u7ba1\u8fd9\u4e2a\u4efb\u52a1\u4e86\u3002","title":"[POJ1325] Machine Schedule"},{"location":"algor/graph/bipartite-graph/#poj2226-muddy-fields","text":"\u7ed9\u4e00\u4e2a \\(n\\times m\\) \u7684\u683c\u5b50\u56fe\uff0c\u6709\u4e9b\u5730\u65b9\u662f\u810f\u7684\u3002 \u7528\u82e5\u5e72\u4e2a\u53ef\u4ee5\u91cd\u590d\u8986\u76d6\u7684\uff0c\u53ef\u4ee5 90 \u5ea6\u65cb\u8f6c\u7684\uff0c\u5bbd\u4e3a \\(1\\) \uff0c\u957f\u5ea6\u4efb\u610f\u7684\u677f\u5b50\u8986\u76d6\u6240\u6709\u810f\u7684\u683c\u5b50\u3002 \u4e14\u4e0d\u80fd\u8986\u76d6\u5e72\u51c0\u7684\u683c\u5b50\uff0c\u6c42\u6700\u5c0f\u9700\u8981\u591a\u5c11\u4e2a\u677f\u5b50\u3002 \\(n,m \\le 50\\) \u3002 \u8fd9\u9898\u5982\u679c\u76f4\u63a5\u4ece\u683c\u5b50\u4f5c\u4e3a\u70b9\u6765\u5339\u914d\u662f\u627e\u4e0d\u5230\u4ec0\u4e48\u601d\u8def\u7684\u3002 \u53d1\u73b0\u9898\u76ee\u4e2d\u8bf4\u53ef\u4ee5\u65cb\u8f6c 90 \u5ea6\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e2a\u683c\u5b50\uff0c\u8986\u76d6\u5b83\u7684\u4e0d\u662f\u4e0a\u4e0b\u65b9\u5411\u7684\u5c31\u662f\u5de6\u53f3\u65b9\u5411\u7684\u677f\u5b50\u3002 \u5e76\u4e14\u9898\u76ee\u4e2d\u8bf4\u53ef\u4ee5\u91cd\u590d\u8986\u76d6\uff0c\u53ea\u8981\u88ab\u8986\u76d6\u8fc7\u90fd\u884c\u3002 \u8fd9\u53e5\u8bdd\u6697\u793a\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u4f4d\u8fd0\u7b97\u7684 \u201c\u6216\u201d \u7684\u6761\u4ef6\uff0c\u53ef\u4ee5\u628a\u4ed6\u8f6c\u5316\u6210 \u201c\u81f3\u5c11\u201d\u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u628a\u884c\u548c\u5217\u770b\u4f5c\u8282\u70b9\uff0c\u683c\u5b50\u4f5c\u4e3a\u8fb9\uff0c\u7c7b\u4f3c\u4e0a\u9762\u7684 \u201c\u8eca\u7684\u653e\u7f6e\u201d\u3002 \u4f46\u662f\u53d1\u73b0\u76f4\u63a5\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u5982\u679c\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\u5c31\u4f1a\u51fa\u4e8b \uff1a .*.*.*. \u3002 \u4e0a\u8ff0\u505a\u6cd5\u4f1a\u76f4\u63a5\u5728\u8fd9\u4e00\u884c\u653e\u4e00\u4e2a\uff0c\u800c\u5ffd\u7565\u4e86\u4e0d\u80fd\u8986\u76d6\u5e72\u51c0\u7684\u683c\u5b50\u7684\u6761\u4ef6\u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e2a\u810f\u683c\u5b50\u7684\u8fde\u901a\u5757\u5355\u72ec\u8dd1\u6700\u5c0f\u70b9\u8986\u76d6\u3002 \u4f46\u662f\u590d\u6742\u5ea6\u4f1a\u7206\u70b8\uff0c\u6240\u4ee5\u8003\u8651\u80fd\u8fbe\u5230\u540c\u6837\u6548\u679c\u7684\u53e6\u4e00\u4e2a\u505a\u6cd5\uff1a \u5bf9\u4e8e\u6bcf\u4e2a\u810f\u8fde\u901a\u5757\uff0c\u628a\u5b83\u5206\u6210\u5bbd\u5ea6\u4e3a \\(1\\) \u7684 \u201c\u884c\u810f\u8fde\u901a\u5757\u201d\u548c\u201c\u5217\u810f\u8fde\u901a\u5757\u201d\uff0c\u53ef\u4ee5\u770b\u4f5c\u76f4\u63a5\u653e\u4e86\u5757\u540c\u7b49\u5927\u5c0f\u7684\u677f\u5b50\u4e0a\u53bb\u3002 \u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u8fde\u63a5\u5b83\u6240\u5728\u7684\u201c\u884c\u810f\u8fde\u901a\u5757\u201d\u548c\u201c\u5217\u810f\u8fde\u901a\u5757\u201d\uff0c\u8dd1\u6700\u5c0f\u70b9\u8986\u76d6\u5373\u53ef\u3002","title":"[POJ2226] Muddy Fields"},{"location":"algor/graph/bipartite-graph/#_5","text":"\u7ed9\u4e00\u5f20\u4e8c\u5206\u56fe \\(G\\) \uff0c\u6c42\u51fa\u4e00\u4e2a\u70b9\u96c6 \\(S\\) \u4f7f\u5f97 \\(S\\) \u5f53\u4e2d\u7684\u70b9\u90fd\u6ca1\u6709\u8fb9\u76f8\u8fde\u3002 \u6700\u5927\u7684 \\(S\\) \u5219\u79f0\u4e3a \\(G\\) \u7684\u6700\u5927\u72ec\u7acb\u96c6\u3002 \u6700\u5927\u56e2\u5b9a\u4e49\u76f8\u53cd\uff0c\u662f\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u90fd\u6709\u8fde\u8fb9\u7684\u4e00\u4e2a\u5b50\u56fe\u3002 \u5b9a\u7406\uff1a\u65e0\u5411\u56fe \\(G\\) \u7684\u6700\u5927\u56e2\u7b49\u4e8e\u5176\u8865\u56fe\u7684\u6700\u5927\u72ec\u7acb\u96c6\u3002 \u4e00\u822c\u65e0\u5411\u56fe\u7684\u6700\u5927\u56e2\u548c\u6700\u5927\u72ec\u7acb\u96c6\u662f NPC\u3002 \u5b9a\u7406\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u4e8c\u5206\u56fe \\(G\\) \uff0c \\(G\\) \u7684\u6700\u5927\u72ec\u7acb\u96c6\u7684\u5927\u5c0f\u7b49\u4e8e\u8282\u70b9\u4e2a\u6570\u51cf\u53bb\u6700\u5c0f\u70b9\u8986\u76d6\u6570\u3002 \u5229\u7528\u5b9a\u4e49\u5373\u53ef\u8bc1\u660e\u3002","title":"\u6700\u5927\u72ec\u7acb\u96c6"},{"location":"algor/graph/bipartite-graph/#ch6901","text":"\u7ed9\u4e00\u4e2a \\(n\\times m\\) \u7684\u68cb\u76d8\u3002\u6709\u4e00\u4e9b\u70b9\u4e0d\u80fd\u653e\uff0c\u95ee\u6700\u591a\u53ef\u4ee5\u653e\u591a\u5c11\u4e2a\u56fd\u9645\u8c61\u68cb\u7684\u9a91\u58eb\u3002 \u9a91\u58eb\u5728\u683c\u5b50\u4e0a\u6309\u7167\u65e5\u5b57\u653b\u51fb\uff0c\u548c\u4e2d\u56fd\u8c61\u68cb\u7684\u9a6c\u6709\u4e00\u5b9a\u533a\u522b\uff08\u6ca1\u6709\u522b\u9a6c\u817f\uff09\u3002 \u53ef\u4ee5\u53d1\u73b0\u76f8\u4e92\u4e0d\u80fd\u653b\u51fb\u5c31\u662f\u6c42\u6700\u5927\u72ec\u7acb\u96c6\u3002 \u6240\u4ee5\u53ef\u4ee5\u628a\u6bcf\u4e00\u4e2a\u53ef\u4ee5\u9632\u6b62\u7684\u8282\u70b9\u5f53\u4f5c\u4e00\u4e2a\u8282\u70b9\u548c\u5b83\u80fd\u5230\u8fbe\u7684\u8282\u70b9\u8fde\u8fb9\u3002 \u9ed1\u767d\u67d3\u8272\u4e4b\u540e\u53ef\u4ee5\u53d1\u73b0\u6784\u9020\u7684\u56fe\u5fc5\u7136\u662f\u4e8c\u5206\u56fe\u3002 \u6240\u4ee5\u627e\u5230\u6240\u6709\u5de6\u90e8\u8282\u70b9\uff0c\u8fde\u8fb9\uff0c\u6c42\u6700\u5927\u72ec\u7acb\u96c6\u5373\u53ef\u3002","title":"[CH6901] \u9a91\u58eb\u653e\u7f6e"},{"location":"algor/graph/bipartite-graph/#_6","text":"\u7ed9\u5b9a\u4e00\u5f20 DAG\uff0c\u8981\u6c42\u7528\u5c3d\u91cf\u5c11\u7684 \u4e0d\u76f8\u4ea4 \u8def\u5f84\u8986\u76d6\u6574\u5f20\u56fe\u7684\u6240\u6709\u9876\u70b9\u3002 \u8fd9\u5c31\u662f\u6700\u5c0f\u8def\u5f84\u70b9\u8986\u76d6\u3002 \u62c6\u70b9\u4e8c\u5206\u56fe\uff1a\u5bf9\u4e8e\u4e00\u5f20 DAG\uff0c\u8bbe\u5b83\u6709 \\(N\\) \u4e2a\u8282\u70b9\uff0c\u628a\u539f\u56fe\u7684\u6bcf\u4e2a\u8282\u70b9\u62c6\u6210\u4e24\u4e2a\u8282\u70b9\uff0c\u5de6\u90e8\u7684\u7f16\u53f7\u4e3a\u539f\u7f16\u53f7\uff0c\u53f3\u90e8\u7684\u7f16\u53f7\u4e3a\u539f\u7f16\u53f7 \\(+N\\) \u3002 \u5bf9\u4e8e\u539f\u56fe\u7684\u4e00\u6761\u6709\u5411\u8fb9 \\((x,y)\\) \uff0c\u8fde\u63a5\u65b0\u56fe\u4e0a\u7684 \\((x,y+n)\\) \u3002 \u5f97\u5230\u7684\u4e8c\u5206\u56fe\u79f0\u4e3a\u8fd9\u4e2a DAG \u7684\u62c6\u70b9\u4e8c\u5206\u56fe\uff0c\u4e00\u822c\u8bb0\u4f5c \\(G_2\\) \u3002 \u5b9a\u7406\uff1a\u4e00\u5f20 DAG \u7684\u6700\u5c0f\u8def\u5f84\u70b9\u8986\u76d6\u5305\u542b\u7684\u8def\u5f84\u6761\u6570\u7b49\u4e8e\u5b83\u7684\u70b9\u6570\u51cf\u53bb\u5b83\u7684\u62c6\u70b9\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u6570\u3002 \u8bc1\u660e\u7528\u5b9a\u4e49+ \u4e00\u4e9b\u8ba8\u8bba\u5373\u53ef\u3002","title":"\u6700\u5c0f\u8def\u5f84\u70b9\u8986\u76d6"},{"location":"algor/graph/bipartite-graph/#_7","text":"\u8def\u5f84\u53ef\u4ee5\u76f8\u4ea4\u3002 \u90a3\u4e48\u5148\u5bf9\u8fd9\u4e2a DAG \u505a\u4f20\u9012\u95ed\u5305\u5f97\u5230\u4e00\u5f20\u65b0\u7684 DAG\uff0c\u8fd9\u4e2a\u65b0 DAG \u7684\u6700\u5c0f\u8def\u5f84\u70b9\u8986\u76d6\u5c31\u662f\u539f DAG \u7684\u6700\u5c0f\u8def\u5f84\u53ef\u91cd\u590d\u70b9\u8986\u76d6\u3002","title":"\u6700\u5c0f\u8def\u5f84\u53ef\u91cd\u590d\u70b9\u8986\u76d6"},{"location":"algor/graph/bipartite-graph/#bzoj27181143-vani-cl2","text":"Vani \u548c cl2 \u5728\u4e00\u7247\u6811\u6797\u91cc\u6349\u8ff7\u85cf\u3002 \u8fd9\u7247\u6811\u6797\u91cc\u6709 \\(N\\) \u5ea7\u623f\u5b50\uff0c \\(M\\) \u6761\u6709\u5411\u9053\u8def\uff0c\u7ec4\u6210\u4e86\u4e00\u5f20\u6709\u5411\u65e0\u73af\u56fe\u3002 \u6811\u6797\u91cc\u7684\u6811\u975e\u5e38\u8302\u5bc6\uff0c\u8db3\u4ee5\u906e\u6321\u89c6\u7ebf\uff0c\u4f46\u662f\u6cbf\u7740\u9053\u8def\u671b\u53bb\uff0c\u5374\u662f\u89c6\u91ce\u5f00\u9614\u3002 \u5982\u679c\u4ece\u623f\u5b50 \\(A\\) \u6cbf\u7740\u8def\u8d70\u4e0b\u53bb\u80fd\u591f\u5230\u8fbe \\(B\\) \uff0c\u90a3\u4e48\u5728 \\(A\\) \u548c \\(B\\) \u91cc\u7684\u4eba\u662f\u80fd\u591f\u76f8\u4e92\u671b\u89c1\u7684\u3002 \u73b0\u5728 cl2 \u8981\u5728\u8fd9 \\(N\\) \u5ea7\u623f\u5b50\u91cc\u9009\u62e9 \\(K\\) \u5ea7\u4f5c\u4e3a\u85cf\u8eab\u70b9\uff0c\u540c\u65f6 Vani \u4e5f\u4e13\u6311 cl2 \u4f5c\u4e3a\u85cf\u8eab\u70b9\u7684\u623f\u8fdb\u53bb\u5bfb\u627e\uff0c\u4e3a\u4e86\u907f\u514d\u88ab Vani \u770b\u89c1\uff0ccl2 \u8981\u6c42\u8fd9 \\(K\\) \u4e2a\u85cf\u8eab\u70b9\u7684\u4efb\u610f\u4e24\u4e2a\u4e4b\u95f4\u90fd\u6ca1\u6709\u8def\u5f84\u76f8\u8fde\u3002 \u4e3a\u4e86\u8ba9 Vani \u66f4\u96be\u627e\u5230\u81ea\u5df1\uff0ccl2 \u60f3\u77e5\u9053\u6700\u591a\u80fd\u9009\u51fa\u591a\u5c11\u4e2a\u85cf\u8eab\u70b9\u3002 \u660e\u663e\u5c31\u662f\u8981\u6c42\u6700\u5c0f\u8def\u5f84\u53ef\u91cd\u590d\u70b9\u8986\u76d6\u3002 \u6240\u4ee5\u5148\u505a\u4e00\u4e2a\u4f20\u9012\u95ed\u5305\uff0c\u7136\u540e\u62c6\u70b9\uff0c\u6c42\u6700\u5c0f\u8def\u5f84\u70b9\u8986\u76d6\u5373\u53ef\u3002","title":"[Bzoj2718/1143] Vani \u548c Cl2 \u6349\u8ff7\u85cf"},{"location":"algor/graph/dsu-on-tree/","text":"\u6982\u8ff0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5168\u79f0\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u4e5f\u53eb\u4f18\u96c5\u7684\u6811\u4e0a\u66b4\u529b\u3002 \u8fd9\u4e1c\u897f\u542c\u8bf4\u5b9e\u9645\u4e0a\u662f\u4e00\u79cd\u9759\u6001\u94fe\u5206\u6cbb\u3002 \u4f46\u662f\u65e0\u6240\u8c13\uff0c\u80fd\u62ff\u6765\u505a\u9898\u5c31\u884c\u3002 \u542f\u53d1\u5f0f\u7b97\u6cd5\u7684\u601d\u60f3\u5c31\u662f\uff0c\u7528\u4f60\u7684\u8111\u5b50\u548c\u76f4\u89c9\u53bb\u4f18\u5316\u4e00\u4e9b\u7b97\u6cd5\u8fc7\u7a0b\u3002 \u4e00\u4e2a\u6bd4\u8f83\u5e38\u89c1\u7684\u4f8b\u5b50\u5c31\u662f\u5e76\u67e5\u96c6\u7684\u6309\u79e9\u5408\u5e76\uff0c\u4e5f\u7b97\u662f\u4e00\u79cd\u542f\u53d1\u5f0f\u5408\u5e76\uff1a 1 2 3 4 5 6 7 8 void Union ( int x , int y ) { int rx = root ( x ), ry = root ( y ); if ( rx == rx ) return ; if ( siz [ rx ] < siz [ ry ]) pa [ rx ] = ry , siz [ ry ] += siz [ rx ]; else pa [ ry ] = rx , siz [ rx ] += siz [ ry ]; } \u8fd9\u91cc\u628a\u5c0f\u7684\u96c6\u5408\u7684\u63a5\u5230\u5927\u7684\u96c6\u5408\u4e0b\u9762\uff0c\u539f\u56e0\u662f\u96c6\u5408\u7684\u5927\u5c0f\u53ef\u4ee5\u8fd1\u4f3c\u7684\u770b\u4f5c\u96c6\u5408\u7684\u9ad8\u5ea6\u3002 \u628a\u9ad8\u5ea6\u77ee\u7684\u5408\u5e76\u5230\u9ad8\u5ea6\u9ad8\u7684\u663e\u7136\u80fd\u66f4\u5feb\u7684\u8fdb\u884c\u627e\u96c6\u5408\u7236\u4eb2\u7684\u64cd\u4f5c root() \u3002 \u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u5176\u5b9e\u548c\u8fd9\u4e2a\u6bd4\u8f83\u7c7b\u4f3c\uff0c\u4e5f\u662f\u5229\u7528\u542f\u53d1\u5f0f\u7b97\u6cd5\u7684\u601d\u60f3\uff0c\u6765\u4f18\u5316\u6811\u4e0a\u5b50\u8282\u70b9\u4fe1\u606f\u7684\u5408\u5e76\u8fc7\u7a0b\u3002 \u8fd9\u53ef\u80fd\u4e5f\u662f\u8fd9\u4e2a\u7b97\u6cd5\u53eb dsu on tree \u7684\u539f\u56e0\u3002 \u5e94\u7528 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6cdb\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 dsu on tree \u4e3b\u8981\u8fd0\u7528\u4e8e\u4e00\u7c7b\u6811\u4e0a\u95ee\u9898\uff0c\u8fd9\u7c7b\u95ee\u9898\u4e00\u822c\u9700\u8981\u901a\u8fc7\u513f\u5b50\u5b50\u6811\u7684\u4fe1\u606f\u201c \u5408\u5e76 \u201d\u6765\u5f97\u5230\u7236\u4eb2\u5b50\u6811\u7684\u4fe1\u606f\u3002 \u8fd9\u91cc\u7684\u5408\u5e76\u53ef\u4ee5\u7b80\u5355\u7684\u7406\u89e3\u4e3a\uff1a\u201c\u628a\u6240\u6709\u513f\u5b50\u5bf9\u5e94\u7684\u7b54\u6848\u76f4\u63a5\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\u63c9\u5230\u4e00\u8d77\u201d \u5982\u679c\u662f\u5728\u7ebf\uff0c\u4e14\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u7684\u4fe1\u606f\u662f\u4e00\u4e2a\u503c\u57df\u6216\u8005\u5e8f\u5217\u65f6\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u3002 \u5982\u679c\u662f \u79bb\u7ebf \uff0c\u5c31\u53ef\u4ee5\u8003\u8651\u4f7f\u7528 dsu on tree \u6765 \u5bf9\u66b4\u529b\u5408\u5e76\u8fdb\u884c\u4f18\u5316 \u5728\u591a\u6570\u65f6\u5019\u901f\u5ea6\u80fd\u540a\u6253\u6811\u4e0a\u83ab\u961f\uff0c\u6811\u5957\u6811\u7b49\u96be\u5199\u7684\u7b97\u6cd5\u3002 \u4f8b\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 Last mile of the way \u7ed9\u5b9a\u4f60\u4e00\u68f5\u6811\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u6709\u4e00\u4e2a\u6743\u503c \\(w\\) \u548c\u4e00\u4e2a\u4f53\u79ef \\(a\\) \u3002 \u6709 \\(q\\) \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u5f62\u5982 \\(x, s\\) \uff0c \u8868\u793a\u8be2\u95ee\u5728\u4ee5 \\(x\\) \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u9009\u4e0d\u8d85\u8fc7 \\(s\\) \u7684\u8282\u70b9\uff0c\u6743\u503c\u548c\u7684\u6700\u5927\u503c\u3002 \u8fd9\u91cc\u6ca1\u6709\u4efb\u4f55\u4f9d\u8d56\u5173\u7cfb\uff0c\u76f8\u5f53\u4e8e\u628a\u8fd9\u4e2a\u5b50\u6811\u91cc\u7684\u6240\u6709\u8282\u70b9\u63d0\u51fa\u6765\u5f53\u6210\u4e00\u4e2a\u5e8f\u5217\u6765\u53d6\u3002 \\(1\\le n \\le 5\\times 10^3, q\\le 10^5, w_i \\le 10^6, a,x,s \\le 5\\times 10^3\\) \u3002 \u9996\u5148\u8fd9\u9898\u53ef\u4ee5\u8003\u8651\u76f4\u63a5\u7528 dfs \u5e8f\u7684\u6027\u8d28\uff0c\u628a\u6bcf\u4e00\u4e2a\u5b50\u6811\u76f4\u63a5\u5316\u6210\u4e00\u4e2a\u5e8f\u5217\u4e0a\u7684\u533a\u95f4\u3002 \u7136\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u83ab\u961f\uff0c\u4f46\u611f\u89c9\u590d\u6742\u5ea6\u4e0d\u592a\u884c\uff08\u672c\u8d28\u4e0a\u662f\u6811\u4e0a\u83ab\u961f\uff09\u3002 \u6709\u6ca1\u6709\u66f4\u597d\u7684\u7b97\u6cd5\uff1f \u5148\u8003\u8651\u4e00\u4e2a\u6734\u7d20\u7684 \\(30pts\\) \u7b97\u6cd5\uff1a\u672c\u9898\u76f8\u5f53\u4e8e\u4e00\u4e2a\u53bb\u6389\u4f9d\u8d56\u9650\u5236\u7684\u6811\u4e0a\u80cc\u5305\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4eff\u7167\u6811\u4e0a\u80cc\u5305\u7684\u65b9\u7a0b\uff1a\u8bbe \\(dp_{u, i}\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u9009\u4e0d\u8d85\u8fc7 \\(i\\) \u7684\u7a7a\u95f4\u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u6743\u503c\u548c\u6700\u5927\u503c\u3002 \u7136\u540e\u53ef\u4ee5\u5bf9\u96c6\u5408\u8fdb\u884c\u4e00\u4e2a\u5212\u5206\uff1a\u4e00\u534a\u662f\u9009 \\(u\\) \uff0c\u4e00\u534a\u662f\u4e0d\u9009 \\(u\\) \u3002 \u8003\u8651\u5bf9\u8fd9\u4e24\u4e2a\u90e8\u5206\u5404\u81ea\u8f6c\u79fb\uff0c\u4f46\u5b9e\u9645\u4e0a\u9664\u4e86\u9009/\u4e0d\u9009 \\(u\\) \u7684\u51b3\u7b56\u4ee5\u5916\uff0c\u4ed6\u4eec\u7684\u51b3\u7b56\u8f6c\u79fb\u65b9\u5f0f\u662f\u76f8\u540c\u7684\u3002 \u53d1\u73b0\u8f6c\u79fb\u53ea\u9700\u8981\u679a\u4e3e\u5206\u914d\u7ed9 \\(u\\) \u6240\u6709\u7684\u513f\u5b50\u4ee5\u53ca\u4ee5\u5b83\u4eec\u4e3a\u6839\u7684\u5b50\u6811\u7684\u7a7a\u95f4 \\(j\\) \uff0c \u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u513f\u5b50\u679a\u4e3e\u4e00\u4e2a \\(k_v\\) \uff0c\u8868\u793a\u8fd9\u4e2a\u513f\u5b50 \\(v\\) \u4ee5\u53ca\u5b83\u7684\u5b50\u6811\u5206\u5230\u7684\u7a7a\u95f4\u3002 \u5bf9\u4e8e\u6bcf\u4e2a \\(j\\) \uff0c\u5408\u6cd5\u7684\u8f6c\u79fb\u72b6\u6001\u662f\u4e00\u7ec4\u6ee1\u8db3 \\(\\sum_v k_v = j\\) \u7684 \\(k\\) \u3002 \u8fd9\u4e2a \\(\\sum_v k_v = j\\) \u600e\u4e48\u6ee1\u8db3\u5462\uff1f \u5176\u5b9e\u6211\u4eec\u53ea\u9700\u8981\u5173\u5fc3\u5f53\u524d\u626b\u63cf\u5230\u7684\u513f\u5b50\u5206\u914d\u4e86\u591a\u5c11\u7a7a\u95f4\u5373\u53ef\uff0c\u56e0\u4e3a\u6211\u4eec\u5e76\u4e0d\u5173\u5fc3\u5f53\u524d\u7b54\u6848\u662f\u600e\u4e48\u6765\u7684\u3002 \u6240\u4ee5\u4e24\u91cd\u5faa\u73af\u5c31\u53ef\u4ee5\u4e86\u3002 \u8fd8\u9700\u8981\u8bb0\u5f97\u8003\u8651 \\(u\\) \u9009\u6216\u8005\u4e0d\u9009\uff0c\u56e0\u4e3a\u8fd9\u91cc\u6ca1\u6709\u5f3a\u5236\u9009 \\(u\\) \u4e86\uff0c\u6240\u4ee5\u548c\u6709\u4f9d\u8d56\u7684\u80cc\u5305\u4e0d\u592a\u4e00\u6837\u3002 \u53ef\u4ee5\u5199\u51fa\u4e00\u4e2a\u66b4\u529b\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 void dfs ( int u , int fa ) { for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs ( v , u ); } for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; for ( int j = m ; j >= a [ u ]; -- j ) { // \u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u5206\u7ec4\u80cc\u5305\u7684\u8fc7\u7a0b\uff0c\u8981\u4fdd\u8bc1\u6bcf\u4e2a\u7269\u54c1\u53ea\u9009\u4e00\u6b21\uff0c\u5c31\u8981\u5012\u5e8f\u5faa\u73af\u3002 for ( int k = j ; k >= 0 ; -- k ) { dp [ u ][ j ] = max ( dp [ u ][ j ], dp [ u ][ j - k ] + dp [ v ][ k ]); } } } // \u5230\u8fd9\u91cc\uff0cdp \u6570\u7ec4\u8fd8\u662f\u6ca1\u6709\u8003\u8651 u \u7684\u51b3\u7b56\u7684\uff0c\u6240\u4ee5\u8fd8\u8981\u5faa\u73af\u641e\u4e00\u6b21\u3002 for ( int i = m ; i >= a [ u ]; -- i ) dp [ u ][ i ] = max ( dp [ u ][ i ], dp [ u ][ i - a [ u ]] + w [ u ]); // \u56e0\u4e3a\u4e0d\u662f\u5f3a\u5236\u9009\uff0c\u6240\u4ee5\u5c31\u76f4\u63a5\u53d6 max \u5373\u53ef\u3002 } \u6211\u4eec\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u8f6c\u79fb\u4e00\u7ec4\u5408\u6cd5\u7684 \\(j\\) \u7684\u65f6\u5019\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u662f\u628a\u6ee1\u8db3 \\(\\sum_v k_v = j\\) \u7684\u4e00\u7ec4 \\(k\\) \u5408\u5e76 \u8d77\u6765\u5f97\u5230 \\(dp_{u,j}\\) \u8fd9\u4e2a\u72b6\u6001\u3002 \u4e5f\u5c31\u662f\u628a\u6240\u6709\u513f\u5b50\u7684\u72b6\u6001\u5168\u90e8\u66b4\u529b\u5408\u5e76\u8d77\u6765\uff0c\u6240\u4ee5\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e00\u4e2a\u4f18\u5316\u3002 \u7c7b\u4f3c\u6811\u94fe\u5256\u5206\uff0c\u8bbe\u8282\u70b9 \\(u\\) \u7684\u91cd\u513f\u5b50 \\(hson_u\\) \u4e3a \\(siz_v\\) \u6700\u5927\u7684\u4e00\u4e2a\u513f\u5b50 \\(v\\) \u3002 \u8f6c\u79fb\u7684\u65f6\u5019\u6211\u4eec\u76f4\u63a5\u628a\u91cd\u513f\u5b50\u7684 \\(dp\\) \u503c\u5e8f\u5217 \\(dp_{hson_u}\\) \u62ff\u8fc7\u6765\u7528\u3002 \u4e5f\u5c31\u662f\u8ba9 \\(u\\) \u76f4\u63a5\u7ee7\u627f\u91cd\u513f\u5b50\u7684\u7b54\u6848\u3002 \u7136\u540e\u6211\u4eec \u66b4\u529b \u628a\u6240\u6709 \u8f7b\u513f\u5b50\u7684\u5b50\u6811 \u7684\u7b54\u6848\u76f4\u63a5\u5408\u5e76\u5230 \\(u\\) \u4e0a\uff0c\u6700\u540e\u518d\u628a\u8003\u8651 \\(u\\) \u7684\u7b54\u6848\u7b97\u4e0a\u3002 \u5b9e\u9645\u4e0a\u8fd9\u5c31\u662f\u628a \\(u\\) \u81ea\u5df1\u5f53\u4f5c\u4e00\u4e2a\u5355\u72ec\u7684\u8f7b\u513f\u5b50\u8282\u70b9\u7136\u540e\u8fdb\u884c\u66b4\u529b\u5408\u5e76\u3002 \u6240\u4ee5\u5408\u5e76 \\(u\\) \u7684\u7b54\u6848\u548c\u5408\u5e76\u8f7b\u513f\u5b50\u7b54\u6848\u7684\u65b9\u5f0f\u5e94\u5f53\u662f\u4e00\u6837\u7684\u3002 \u6211\u4eec\u90fd\u76f4\u63a5\u66b4\u529b\u51b3\u7b56\u5bf9\u5e94\u7684\u8282\u70b9\u9009\u6216\u8005\u4e0d\u9009\uff0c\u53ea\u662f\u8f7b\u513f\u5b50\u9700\u8981\u9012\u5f52\u4e0b\u53bb\u7ee7\u7eed\u66b4\u529b\u53d6\u3002 \u53ef\u4ee5\u8bc1\u660e\u8fd9\u6837\u505a\u4e4b\u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u7684\u590d\u6742\u5ea6\u662f \\(\\text{O}(n \\log n)\\) \u7684\u3002 \u4e5f\u5c31\u662f\u901a\u8fc7\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u601d\u60f3\u628a \\(\\text{O}(n^2)\\) \u66b4\u529b\u5408\u5e76\u4f18\u5316\u5230\u4e86 \\(\\text{O}(n \\log n)\\) \u3002 \u5177\u4f53\u5b9e\u73b0\u770b\u4ee3\u7801\uff1a Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 int siz [ si ]; int hson [ si ]; // u \u7684\u91cd\u513f\u5b50 i64 dp [ si ][ si ], ans [ si ][ si ]; // \u9884\u5904\u7406\u91cd\u513f\u5b50 void dfs1 ( int u , int fa ) { int kot = 0 ; siz [ u ] = 1 , hson [ u ] = 0 ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs1 ( v , u ), siz [ u ] += siz [ v ]; if ( siz [ v ] > kot ) kot = siz [ v ], hson [ u ] = v ; } } // \u66b4\u529b\u52a0\u4ee5 u \u4e3a\u6839\u7684\u5b50\u6811\u5f53\u4e2d\u7684\u6240\u6709\u7269\u54c1 void dfs2 ( int u , int fa , i64 * f ) { for ( int i = m ; i >= a [ u ]; -- i ) f [ i ] = max ( f [ i ], f [ i - a [ u ]] + w [ u ]); for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; // \u8fd9\u91cc\u662f\u66b4\u529b\u52a0\u5c31\u4e0d\u8981\u5224\u91cd\u513f\u5b50\u4e86\uff08\u5b9e\u6d4b\u4f1aWA\uff09 dfs2 ( v , u , f ); } } // dp \u7684\u8fc7\u7a0b void dfs3 ( int u , int fa ) { for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs3 ( v , u ); } memcpy ( dp [ u ], dp [ hson [ u ]], sizeof dp [ u ]); for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa || v == hson [ u ]) continue ; dfs2 ( v , u , dp [ u ]); } for ( int i = m ; i >= a [ u ]; -- i ) { dp [ u ][ i ] = max ( dp [ u ][ i ], dp [ u ][ i - a [ u ]] + w [ u ]); } // i64 *kot = dp[hson[u]]; // \u76f4\u63a5\u7ee7\u627f\u91cd\u513f\u5b50 // for(int i = head[u]; ~i; i = e[i].Next) { // int v = e[i].ver; // if(v == fa || v == hson[u]) continue; // dfs2(v, u, kot); // } // for(int i = m; i >= a[u]; --i) // kot[i] = max(kot[i], kot[i - a[u]] + w[u]); // for(int i = 0; i <= m; ++i) // ans[u][i] = kot[i]; // \u56e0\u4e3a\u662f\u79bb\u7ebf\u4e14\u81ea\u5e95\u5411\u4e0a\u66f4\u65b0\uff0c\u6240\u4ee5\u4e0d\u7528\u8003\u8651\u76f4\u63a5\u7528\u91cd\u513f\u5b50\u7684\u6570\u7ec4\u4fee\u6539\u540e\u4f1a\u5f71\u54cd\u7b54\u6848\u3002 // memcpy \u867d\u7136\u5f88\u5feb\uff0c\u4f46\u662f\u590d\u6742\u5ea6\u4e0d\u5bf9\uff0c\u4f46\u662f\u8fd9\u4e2a\u6307\u9488\u5199\u6cd5\u4f3c\u4e4e\u6709\u95ee\u9898\uff1f // TODO : fix it. } \u590d\u6742\u5ea6\u8bc1\u660e\u53ef\u4ee5\u770b\u770b OI-wiki\uff0c\u4e4b\u540e\u518d\u8865\u3002 \u603b\u7ed3 \u03c8(\uff40\u2207\u00b4)\u03c8 \u603b\u7ed3\u4e00\u4e0b\uff0cdsu on tree \u5176\u5b9e\u5c31\u662f\u5bf9\u4e8e\u9700\u8981\u5408\u5e76\u4fe1\u606f\u7684\u4e00\u7c7b\u79bb\u7ebf\u6811\u4e0a\u95ee\u9898\uff0c\u5229\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u601d\u60f3\u4f18\u5316\u3002 \u8fc7\u7a0b\u5927\u81f4\u5982\u4e0b\uff1a \u76f4\u63a5\u8ba9 \\(u\\) \u7684\u4fe1\u606f\u6570\u7ec4\u7ee7\u627f \\(hson_u\\) \u7684\u4fe1\u606f\u6570\u7ec4\u3002 \u66b4\u529b\u628a\u5176\u5b83\u8f7b\u513f\u5b50\u7684\u4fe1\u606f\u5408\u5e76\u5230 \\(u\\) \u7684\u4fe1\u606f\u6570\u7ec4\u4e0a\u3002 \u8fd9\u91cc\u5408\u5e76\u7684\u65b9\u5f0f\u56e0\u9898\u800c\u5f02\u3002 \u6700\u540e\u628a\u8003\u8651 \\(u\\) \u7684\u60c5\u51b5\u5408\u5e76\u4e0a\u53bb\u5373\u53ef\u3002","title":"\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76"},{"location":"algor/graph/dsu-on-tree/#_1","text":"\u5168\u79f0\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u4e5f\u53eb\u4f18\u96c5\u7684\u6811\u4e0a\u66b4\u529b\u3002 \u8fd9\u4e1c\u897f\u542c\u8bf4\u5b9e\u9645\u4e0a\u662f\u4e00\u79cd\u9759\u6001\u94fe\u5206\u6cbb\u3002 \u4f46\u662f\u65e0\u6240\u8c13\uff0c\u80fd\u62ff\u6765\u505a\u9898\u5c31\u884c\u3002 \u542f\u53d1\u5f0f\u7b97\u6cd5\u7684\u601d\u60f3\u5c31\u662f\uff0c\u7528\u4f60\u7684\u8111\u5b50\u548c\u76f4\u89c9\u53bb\u4f18\u5316\u4e00\u4e9b\u7b97\u6cd5\u8fc7\u7a0b\u3002 \u4e00\u4e2a\u6bd4\u8f83\u5e38\u89c1\u7684\u4f8b\u5b50\u5c31\u662f\u5e76\u67e5\u96c6\u7684\u6309\u79e9\u5408\u5e76\uff0c\u4e5f\u7b97\u662f\u4e00\u79cd\u542f\u53d1\u5f0f\u5408\u5e76\uff1a 1 2 3 4 5 6 7 8 void Union ( int x , int y ) { int rx = root ( x ), ry = root ( y ); if ( rx == rx ) return ; if ( siz [ rx ] < siz [ ry ]) pa [ rx ] = ry , siz [ ry ] += siz [ rx ]; else pa [ ry ] = rx , siz [ rx ] += siz [ ry ]; } \u8fd9\u91cc\u628a\u5c0f\u7684\u96c6\u5408\u7684\u63a5\u5230\u5927\u7684\u96c6\u5408\u4e0b\u9762\uff0c\u539f\u56e0\u662f\u96c6\u5408\u7684\u5927\u5c0f\u53ef\u4ee5\u8fd1\u4f3c\u7684\u770b\u4f5c\u96c6\u5408\u7684\u9ad8\u5ea6\u3002 \u628a\u9ad8\u5ea6\u77ee\u7684\u5408\u5e76\u5230\u9ad8\u5ea6\u9ad8\u7684\u663e\u7136\u80fd\u66f4\u5feb\u7684\u8fdb\u884c\u627e\u96c6\u5408\u7236\u4eb2\u7684\u64cd\u4f5c root() \u3002 \u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\u5176\u5b9e\u548c\u8fd9\u4e2a\u6bd4\u8f83\u7c7b\u4f3c\uff0c\u4e5f\u662f\u5229\u7528\u542f\u53d1\u5f0f\u7b97\u6cd5\u7684\u601d\u60f3\uff0c\u6765\u4f18\u5316\u6811\u4e0a\u5b50\u8282\u70b9\u4fe1\u606f\u7684\u5408\u5e76\u8fc7\u7a0b\u3002 \u8fd9\u53ef\u80fd\u4e5f\u662f\u8fd9\u4e2a\u7b97\u6cd5\u53eb dsu on tree \u7684\u539f\u56e0\u3002","title":"\u6982\u8ff0"},{"location":"algor/graph/dsu-on-tree/#_2","text":"","title":"\u5e94\u7528"},{"location":"algor/graph/dsu-on-tree/#_3","text":"dsu on tree \u4e3b\u8981\u8fd0\u7528\u4e8e\u4e00\u7c7b\u6811\u4e0a\u95ee\u9898\uff0c\u8fd9\u7c7b\u95ee\u9898\u4e00\u822c\u9700\u8981\u901a\u8fc7\u513f\u5b50\u5b50\u6811\u7684\u4fe1\u606f\u201c \u5408\u5e76 \u201d\u6765\u5f97\u5230\u7236\u4eb2\u5b50\u6811\u7684\u4fe1\u606f\u3002 \u8fd9\u91cc\u7684\u5408\u5e76\u53ef\u4ee5\u7b80\u5355\u7684\u7406\u89e3\u4e3a\uff1a\u201c\u628a\u6240\u6709\u513f\u5b50\u5bf9\u5e94\u7684\u7b54\u6848\u76f4\u63a5\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\u63c9\u5230\u4e00\u8d77\u201d \u5982\u679c\u662f\u5728\u7ebf\uff0c\u4e14\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u7684\u4fe1\u606f\u662f\u4e00\u4e2a\u503c\u57df\u6216\u8005\u5e8f\u5217\u65f6\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u3002 \u5982\u679c\u662f \u79bb\u7ebf \uff0c\u5c31\u53ef\u4ee5\u8003\u8651\u4f7f\u7528 dsu on tree \u6765 \u5bf9\u66b4\u529b\u5408\u5e76\u8fdb\u884c\u4f18\u5316 \u5728\u591a\u6570\u65f6\u5019\u901f\u5ea6\u80fd\u540a\u6253\u6811\u4e0a\u83ab\u961f\uff0c\u6811\u5957\u6811\u7b49\u96be\u5199\u7684\u7b97\u6cd5\u3002","title":"\u6cdb\u5316"},{"location":"algor/graph/dsu-on-tree/#_4","text":"Last mile of the way \u7ed9\u5b9a\u4f60\u4e00\u68f5\u6811\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u6709\u4e00\u4e2a\u6743\u503c \\(w\\) \u548c\u4e00\u4e2a\u4f53\u79ef \\(a\\) \u3002 \u6709 \\(q\\) \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u5f62\u5982 \\(x, s\\) \uff0c \u8868\u793a\u8be2\u95ee\u5728\u4ee5 \\(x\\) \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u9009\u4e0d\u8d85\u8fc7 \\(s\\) \u7684\u8282\u70b9\uff0c\u6743\u503c\u548c\u7684\u6700\u5927\u503c\u3002 \u8fd9\u91cc\u6ca1\u6709\u4efb\u4f55\u4f9d\u8d56\u5173\u7cfb\uff0c\u76f8\u5f53\u4e8e\u628a\u8fd9\u4e2a\u5b50\u6811\u91cc\u7684\u6240\u6709\u8282\u70b9\u63d0\u51fa\u6765\u5f53\u6210\u4e00\u4e2a\u5e8f\u5217\u6765\u53d6\u3002 \\(1\\le n \\le 5\\times 10^3, q\\le 10^5, w_i \\le 10^6, a,x,s \\le 5\\times 10^3\\) \u3002 \u9996\u5148\u8fd9\u9898\u53ef\u4ee5\u8003\u8651\u76f4\u63a5\u7528 dfs \u5e8f\u7684\u6027\u8d28\uff0c\u628a\u6bcf\u4e00\u4e2a\u5b50\u6811\u76f4\u63a5\u5316\u6210\u4e00\u4e2a\u5e8f\u5217\u4e0a\u7684\u533a\u95f4\u3002 \u7136\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u83ab\u961f\uff0c\u4f46\u611f\u89c9\u590d\u6742\u5ea6\u4e0d\u592a\u884c\uff08\u672c\u8d28\u4e0a\u662f\u6811\u4e0a\u83ab\u961f\uff09\u3002 \u6709\u6ca1\u6709\u66f4\u597d\u7684\u7b97\u6cd5\uff1f \u5148\u8003\u8651\u4e00\u4e2a\u6734\u7d20\u7684 \\(30pts\\) \u7b97\u6cd5\uff1a\u672c\u9898\u76f8\u5f53\u4e8e\u4e00\u4e2a\u53bb\u6389\u4f9d\u8d56\u9650\u5236\u7684\u6811\u4e0a\u80cc\u5305\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4eff\u7167\u6811\u4e0a\u80cc\u5305\u7684\u65b9\u7a0b\uff1a\u8bbe \\(dp_{u, i}\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u9009\u4e0d\u8d85\u8fc7 \\(i\\) \u7684\u7a7a\u95f4\u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u6743\u503c\u548c\u6700\u5927\u503c\u3002 \u7136\u540e\u53ef\u4ee5\u5bf9\u96c6\u5408\u8fdb\u884c\u4e00\u4e2a\u5212\u5206\uff1a\u4e00\u534a\u662f\u9009 \\(u\\) \uff0c\u4e00\u534a\u662f\u4e0d\u9009 \\(u\\) \u3002 \u8003\u8651\u5bf9\u8fd9\u4e24\u4e2a\u90e8\u5206\u5404\u81ea\u8f6c\u79fb\uff0c\u4f46\u5b9e\u9645\u4e0a\u9664\u4e86\u9009/\u4e0d\u9009 \\(u\\) \u7684\u51b3\u7b56\u4ee5\u5916\uff0c\u4ed6\u4eec\u7684\u51b3\u7b56\u8f6c\u79fb\u65b9\u5f0f\u662f\u76f8\u540c\u7684\u3002 \u53d1\u73b0\u8f6c\u79fb\u53ea\u9700\u8981\u679a\u4e3e\u5206\u914d\u7ed9 \\(u\\) \u6240\u6709\u7684\u513f\u5b50\u4ee5\u53ca\u4ee5\u5b83\u4eec\u4e3a\u6839\u7684\u5b50\u6811\u7684\u7a7a\u95f4 \\(j\\) \uff0c \u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u513f\u5b50\u679a\u4e3e\u4e00\u4e2a \\(k_v\\) \uff0c\u8868\u793a\u8fd9\u4e2a\u513f\u5b50 \\(v\\) \u4ee5\u53ca\u5b83\u7684\u5b50\u6811\u5206\u5230\u7684\u7a7a\u95f4\u3002 \u5bf9\u4e8e\u6bcf\u4e2a \\(j\\) \uff0c\u5408\u6cd5\u7684\u8f6c\u79fb\u72b6\u6001\u662f\u4e00\u7ec4\u6ee1\u8db3 \\(\\sum_v k_v = j\\) \u7684 \\(k\\) \u3002 \u8fd9\u4e2a \\(\\sum_v k_v = j\\) \u600e\u4e48\u6ee1\u8db3\u5462\uff1f \u5176\u5b9e\u6211\u4eec\u53ea\u9700\u8981\u5173\u5fc3\u5f53\u524d\u626b\u63cf\u5230\u7684\u513f\u5b50\u5206\u914d\u4e86\u591a\u5c11\u7a7a\u95f4\u5373\u53ef\uff0c\u56e0\u4e3a\u6211\u4eec\u5e76\u4e0d\u5173\u5fc3\u5f53\u524d\u7b54\u6848\u662f\u600e\u4e48\u6765\u7684\u3002 \u6240\u4ee5\u4e24\u91cd\u5faa\u73af\u5c31\u53ef\u4ee5\u4e86\u3002 \u8fd8\u9700\u8981\u8bb0\u5f97\u8003\u8651 \\(u\\) \u9009\u6216\u8005\u4e0d\u9009\uff0c\u56e0\u4e3a\u8fd9\u91cc\u6ca1\u6709\u5f3a\u5236\u9009 \\(u\\) \u4e86\uff0c\u6240\u4ee5\u548c\u6709\u4f9d\u8d56\u7684\u80cc\u5305\u4e0d\u592a\u4e00\u6837\u3002 \u53ef\u4ee5\u5199\u51fa\u4e00\u4e2a\u66b4\u529b\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 void dfs ( int u , int fa ) { for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs ( v , u ); } for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; for ( int j = m ; j >= a [ u ]; -- j ) { // \u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u5206\u7ec4\u80cc\u5305\u7684\u8fc7\u7a0b\uff0c\u8981\u4fdd\u8bc1\u6bcf\u4e2a\u7269\u54c1\u53ea\u9009\u4e00\u6b21\uff0c\u5c31\u8981\u5012\u5e8f\u5faa\u73af\u3002 for ( int k = j ; k >= 0 ; -- k ) { dp [ u ][ j ] = max ( dp [ u ][ j ], dp [ u ][ j - k ] + dp [ v ][ k ]); } } } // \u5230\u8fd9\u91cc\uff0cdp \u6570\u7ec4\u8fd8\u662f\u6ca1\u6709\u8003\u8651 u \u7684\u51b3\u7b56\u7684\uff0c\u6240\u4ee5\u8fd8\u8981\u5faa\u73af\u641e\u4e00\u6b21\u3002 for ( int i = m ; i >= a [ u ]; -- i ) dp [ u ][ i ] = max ( dp [ u ][ i ], dp [ u ][ i - a [ u ]] + w [ u ]); // \u56e0\u4e3a\u4e0d\u662f\u5f3a\u5236\u9009\uff0c\u6240\u4ee5\u5c31\u76f4\u63a5\u53d6 max \u5373\u53ef\u3002 } \u6211\u4eec\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u8f6c\u79fb\u4e00\u7ec4\u5408\u6cd5\u7684 \\(j\\) \u7684\u65f6\u5019\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u662f\u628a\u6ee1\u8db3 \\(\\sum_v k_v = j\\) \u7684\u4e00\u7ec4 \\(k\\) \u5408\u5e76 \u8d77\u6765\u5f97\u5230 \\(dp_{u,j}\\) \u8fd9\u4e2a\u72b6\u6001\u3002 \u4e5f\u5c31\u662f\u628a\u6240\u6709\u513f\u5b50\u7684\u72b6\u6001\u5168\u90e8\u66b4\u529b\u5408\u5e76\u8d77\u6765\uff0c\u6240\u4ee5\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e00\u4e2a\u4f18\u5316\u3002 \u7c7b\u4f3c\u6811\u94fe\u5256\u5206\uff0c\u8bbe\u8282\u70b9 \\(u\\) \u7684\u91cd\u513f\u5b50 \\(hson_u\\) \u4e3a \\(siz_v\\) \u6700\u5927\u7684\u4e00\u4e2a\u513f\u5b50 \\(v\\) \u3002 \u8f6c\u79fb\u7684\u65f6\u5019\u6211\u4eec\u76f4\u63a5\u628a\u91cd\u513f\u5b50\u7684 \\(dp\\) \u503c\u5e8f\u5217 \\(dp_{hson_u}\\) \u62ff\u8fc7\u6765\u7528\u3002 \u4e5f\u5c31\u662f\u8ba9 \\(u\\) \u76f4\u63a5\u7ee7\u627f\u91cd\u513f\u5b50\u7684\u7b54\u6848\u3002 \u7136\u540e\u6211\u4eec \u66b4\u529b \u628a\u6240\u6709 \u8f7b\u513f\u5b50\u7684\u5b50\u6811 \u7684\u7b54\u6848\u76f4\u63a5\u5408\u5e76\u5230 \\(u\\) \u4e0a\uff0c\u6700\u540e\u518d\u628a\u8003\u8651 \\(u\\) \u7684\u7b54\u6848\u7b97\u4e0a\u3002 \u5b9e\u9645\u4e0a\u8fd9\u5c31\u662f\u628a \\(u\\) \u81ea\u5df1\u5f53\u4f5c\u4e00\u4e2a\u5355\u72ec\u7684\u8f7b\u513f\u5b50\u8282\u70b9\u7136\u540e\u8fdb\u884c\u66b4\u529b\u5408\u5e76\u3002 \u6240\u4ee5\u5408\u5e76 \\(u\\) \u7684\u7b54\u6848\u548c\u5408\u5e76\u8f7b\u513f\u5b50\u7b54\u6848\u7684\u65b9\u5f0f\u5e94\u5f53\u662f\u4e00\u6837\u7684\u3002 \u6211\u4eec\u90fd\u76f4\u63a5\u66b4\u529b\u51b3\u7b56\u5bf9\u5e94\u7684\u8282\u70b9\u9009\u6216\u8005\u4e0d\u9009\uff0c\u53ea\u662f\u8f7b\u513f\u5b50\u9700\u8981\u9012\u5f52\u4e0b\u53bb\u7ee7\u7eed\u66b4\u529b\u53d6\u3002 \u53ef\u4ee5\u8bc1\u660e\u8fd9\u6837\u505a\u4e4b\u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u7684\u590d\u6742\u5ea6\u662f \\(\\text{O}(n \\log n)\\) \u7684\u3002 \u4e5f\u5c31\u662f\u901a\u8fc7\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u601d\u60f3\u628a \\(\\text{O}(n^2)\\) \u66b4\u529b\u5408\u5e76\u4f18\u5316\u5230\u4e86 \\(\\text{O}(n \\log n)\\) \u3002 \u5177\u4f53\u5b9e\u73b0\u770b\u4ee3\u7801\uff1a Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 int siz [ si ]; int hson [ si ]; // u \u7684\u91cd\u513f\u5b50 i64 dp [ si ][ si ], ans [ si ][ si ]; // \u9884\u5904\u7406\u91cd\u513f\u5b50 void dfs1 ( int u , int fa ) { int kot = 0 ; siz [ u ] = 1 , hson [ u ] = 0 ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs1 ( v , u ), siz [ u ] += siz [ v ]; if ( siz [ v ] > kot ) kot = siz [ v ], hson [ u ] = v ; } } // \u66b4\u529b\u52a0\u4ee5 u \u4e3a\u6839\u7684\u5b50\u6811\u5f53\u4e2d\u7684\u6240\u6709\u7269\u54c1 void dfs2 ( int u , int fa , i64 * f ) { for ( int i = m ; i >= a [ u ]; -- i ) f [ i ] = max ( f [ i ], f [ i - a [ u ]] + w [ u ]); for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; // \u8fd9\u91cc\u662f\u66b4\u529b\u52a0\u5c31\u4e0d\u8981\u5224\u91cd\u513f\u5b50\u4e86\uff08\u5b9e\u6d4b\u4f1aWA\uff09 dfs2 ( v , u , f ); } } // dp \u7684\u8fc7\u7a0b void dfs3 ( int u , int fa ) { for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs3 ( v , u ); } memcpy ( dp [ u ], dp [ hson [ u ]], sizeof dp [ u ]); for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa || v == hson [ u ]) continue ; dfs2 ( v , u , dp [ u ]); } for ( int i = m ; i >= a [ u ]; -- i ) { dp [ u ][ i ] = max ( dp [ u ][ i ], dp [ u ][ i - a [ u ]] + w [ u ]); } // i64 *kot = dp[hson[u]]; // \u76f4\u63a5\u7ee7\u627f\u91cd\u513f\u5b50 // for(int i = head[u]; ~i; i = e[i].Next) { // int v = e[i].ver; // if(v == fa || v == hson[u]) continue; // dfs2(v, u, kot); // } // for(int i = m; i >= a[u]; --i) // kot[i] = max(kot[i], kot[i - a[u]] + w[u]); // for(int i = 0; i <= m; ++i) // ans[u][i] = kot[i]; // \u56e0\u4e3a\u662f\u79bb\u7ebf\u4e14\u81ea\u5e95\u5411\u4e0a\u66f4\u65b0\uff0c\u6240\u4ee5\u4e0d\u7528\u8003\u8651\u76f4\u63a5\u7528\u91cd\u513f\u5b50\u7684\u6570\u7ec4\u4fee\u6539\u540e\u4f1a\u5f71\u54cd\u7b54\u6848\u3002 // memcpy \u867d\u7136\u5f88\u5feb\uff0c\u4f46\u662f\u590d\u6742\u5ea6\u4e0d\u5bf9\uff0c\u4f46\u662f\u8fd9\u4e2a\u6307\u9488\u5199\u6cd5\u4f3c\u4e4e\u6709\u95ee\u9898\uff1f // TODO : fix it. } \u590d\u6742\u5ea6\u8bc1\u660e\u53ef\u4ee5\u770b\u770b OI-wiki\uff0c\u4e4b\u540e\u518d\u8865\u3002","title":"\u4f8b\u9898"},{"location":"algor/graph/dsu-on-tree/#_5","text":"\u603b\u7ed3\u4e00\u4e0b\uff0cdsu on tree \u5176\u5b9e\u5c31\u662f\u5bf9\u4e8e\u9700\u8981\u5408\u5e76\u4fe1\u606f\u7684\u4e00\u7c7b\u79bb\u7ebf\u6811\u4e0a\u95ee\u9898\uff0c\u5229\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u601d\u60f3\u4f18\u5316\u3002 \u8fc7\u7a0b\u5927\u81f4\u5982\u4e0b\uff1a \u76f4\u63a5\u8ba9 \\(u\\) \u7684\u4fe1\u606f\u6570\u7ec4\u7ee7\u627f \\(hson_u\\) \u7684\u4fe1\u606f\u6570\u7ec4\u3002 \u66b4\u529b\u628a\u5176\u5b83\u8f7b\u513f\u5b50\u7684\u4fe1\u606f\u5408\u5e76\u5230 \\(u\\) \u7684\u4fe1\u606f\u6570\u7ec4\u4e0a\u3002 \u8fd9\u91cc\u5408\u5e76\u7684\u65b9\u5f0f\u56e0\u9898\u800c\u5f02\u3002 \u6700\u540e\u628a\u8003\u8651 \\(u\\) \u7684\u60c5\u51b5\u5408\u5e76\u4e0a\u53bb\u5373\u53ef\u3002","title":"\u603b\u7ed3"},{"location":"algor/graph/lca/","text":"\u6982\u8ff0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5927\u6982\u5c31\u662f\u7ed9\u4f60\u6811\u4e0a\u7684\u4e24\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u95ee\u4ed6\u4eec\u5171\u540c\u7684\u7956\u5148\u91cc\u6df1\u5ea6\u6700\u5927\u7684\u90a3\u4e00\u4e2a\u3002 \u500d\u589e LCA \u03c8(\uff40\u2207\u00b4)\u03c8 \u8003\u8651\u8bbe \\(f_{i,j}\\) \u8868\u793a \\(i\\) \u7684 \\(2^j\\) \u7ea7\u7956\u5148\u3002 \u8fd9\u4e2a\u53ef\u4ee5\u500d\u589e\u9012\u63a8 \u3002 \\(f_{i,j}=f_{f_{i,j-1},j-1}\\) \u3002 \u7136\u540e\u73b0\u5728\u7ed9\u5b9a\u4e00\u4e2a\u8be2\u95ee \\(lca(u,v)\\) \uff0c\u8003\u8651\u628a\u6df1\u5ea6\u8f83\u5927\u7684\u90a3\u4e00\u4e2a\u5f80\u4e0a\u8df3\u5230\u5b83\u7684 \\(2\\) \u7684 \\(\\log_2n,\\log_2n-1,\\dots 0\\) \u7ea7\u7956\u5148\uff08\u6b64\u5904\u662f \u4ece\u5927\u5230\u5c0f \u679a\u4e3e\uff09 \u5176\u672c\u8d28\u5c31\u662f\u500d\u589e\u5730\u5f80\u4e0a\u8df3\u3002 \uff08\u6bcf\u4e2a\u90fd\u8bd5\u4e00\u8bd5\uff0c\u5982\u679c\u8fd9\u4e2a\u7956\u5148 \\(f_{u,i}\\) \u7684\u6df1\u5ea6 \\(dep_{f_{u,i}}\\) \u5927\u4e8e\u7b49\u4e8e\u539f\u6765\u6df1\u5ea6\u66f4\u5c0f\u7684\u70b9\u7684\u6df1\u5ea6 \\(dep_v\\) \uff0c\u5c31\u8df3\u5230\u8fd9\u4e2a\u7956\u5148 \\(f_{u,i}\\) \uff09\u3002 \u5982\u679c\u6b64\u65f6\u4e24\u4e2a\u8282\u70b9\u91cd\u5408\u4e86\uff0cLCA \u5c31\u662f\u539f\u6765\u6df1\u5ea6\u5c0f\u7684\u8282\u70b9\u3002 \u5426\u5219 \u4fdd\u6301\u4e24\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\u4e00\u81f4 \uff0c\u7136\u540e\u5404\u81ea\u5f80\u4e0a\u8df3 \\(2\\) \u7684 \\(\\log_2n,\\log_2n-1,\\dots 0\\) \u6b21\u5e42\u6b65\uff0c\u5e76\u4e14\u4fdd\u6301\u4e0a\u8df3\u4e4b\u540e\u4ecd\u7136\u4e0d\u76f8\u9047\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u7ed3\u675f\u4e4b\u540e\uff0c \\(u,v\\) \u5f53\u524d\u7684\u7236\u4eb2\u5fc5\u7136\u76f8\u540c\uff0c\u8fd9\u5c31\u662f\u8981\u6c42\u7684 LCA\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 int dep [ si_n ], f [ si_n ][ 20 ]; inline void dfs ( int u , int fa ){ dep [ u ] = dep [ fa ] + 1 , f [ u ][ 0 ] = fa ; for ( register int i = 1 ; i <= 19 ; ++ i ) f [ u ][ i ] = f [ f [ u ][ i -1 ]][ i -1 ]; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs ( v , u ); } } inline void lca ( int x , int y ){ if ( dep [ x ] < dep [ y ]) swap ( x , y ); for ( register int i = 19 ; i >= 0 ; -- i ) if ( dep [ f [ x ][ i ]] >= dep [ y ]) x = f [ x ][ i ]; if ( x == y ) return x ; for ( register int i = 19 ; i >= 0 ; -- i ) if ( f [ x ][ i ] != f [ y ][ i ]) x = f [ x ][ i ], y = f [ y ][ i ]; return f [ x ][ 0 ]; } \u5355\u6b21\u8be2\u95ee \\(\\text{O}(\\log n)\\) \u3002 \u4f46\u662f\u8fd9\u79cd\u65b9\u5f0f\u662f\u66b4\u529b\u8df3\uff0c\u4e5f\u5c31\u662f\u76f4\u63a5\u201c\u8bd5\u201d\u3002 \u7528\u7c7b\u4f3c\u5feb\u901f\u5e42\u7684\u601d\u60f3\uff0c\u76f4\u63a5\u628a\u6570\u5b57\u4e8c\u8fdb\u5236\u62c6\u5206\uff0c\u53ea\u6709\u5f53\u524d\u4f4d \\(i\\) \u4e3a \\(1\\) \u7684\u65f6\u5019 \uff0c\u624d\u8df3 \\(2^i\\) \u7ea7\u7956\u5148\u3002 1 // \u5495\u5495\u5495 Tarjan LCA \u03c8(\uff40\u2207\u00b4)\u03c8 \u9996\u5148\u79bb\u7ebf\u6240\u6709\u7684 Query\uff0c \u5728\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u65f6\u5019\uff0c\u7ed9\u6bcf\u4e2a\u8282\u70b9\u6253\u4e0a\u4e00\u4e2a\u6807\u8bb0 \u6ca1\u6709\u8bbf\u95ee\u7684\u8282\u70b9 \u5f53\u524d\u6b63\u5728\u8bbf\u95ee\u7684\u5206\u652f\u4e0a\u7684\u8282\u70b9 \u5df2\u7ecf\u8bbf\u95ee\u5b8c\u5e76\u4e14\u56de\u6eaf\u5b8c\u7684\u8282\u70b9 \u5982\u56fe\uff1a \u6211\u4eec\u8003\u8651\u5904\u7406\u6240\u6709\u548c \\(now\\) \u76f8\u5173\u7684\u8be2\u95ee\u3002 \u53d1\u73b0\u6240\u6709 2 \u7c7b\u578b\u7684\u8282\u70b9\u548c \\(now\\) \u7684 LCA \u90fd\u662f 1 \u7c7b\u578b\u7684\u8282\u70b9\u5e76\u4e14\u548c \\(now\\) \u5728\u540c\u4e00\u5206\u652f\uff0c\u6bd4 \\(now\\) \u5148\u8bbf\u95ee\uff1a \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u628a\u8fd9\u4e9b 2 \u7c7b\u578b\u7684\u8282\u70b9\u548c\u5f53\u524d\u5206\u652f\u7684\u8282\u70b9\u5408\u5e76\uff0c\u7136\u540e\u6bcf\u6b21\u8be2\u95ee\u5c31\u80fd\u76f4\u63a5\u5904\u7406\u4e86\u3002 \u8fd9\u4e2a\u5408\u5e76\u548c\u8be2\u95ee\u64cd\u4f5c\u53ef\u4ee5\u5229\u7528 dsu\u3002 \u590d\u6742\u5ea6 \\(\\text{O}(n+m)\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #include <bits/stdc++.h> using namespace std ; #define pb push_back const int si_n = 5e5 + 10 ; const int si_m = 5e5 + 10 ; struct Tree { int ver , Next , head ; } e [ si_m << 1 ]; int cnt = 0 ; void add ( int u , int v ){ e [ ++ cnt ]. ver = v , e [ cnt ]. Next = e [ u ]. head ; e [ u ]. head = cnt ; } int pa [ si_n ]; int root ( int x ){ if ( pa [ x ] != x ){ return pa [ x ] = root ( pa [ x ]); } return pa [ x ]; } vector < int > que [ si_n ], pos [ si_n ]; int lca [ si_n ]; bool vis [ si_n ]; int n , q , s ; void tarjan ( int u ){ vis [ u ] = true ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( vis [ v ] == true ) continue ; tarjan ( v ), pa [ v ] = root ( u ); } for ( register int i = 0 ; i < ( int ) que [ u ]. size (); ++ i ){ int v = que [ u ][ i ], po = pos [ u ][ i ]; if ( vis [ v ] == true ) lca [ po ] = root ( v ); } } int main (){ scanf ( \"%d%d%d\" , & n , & q , & s ); for ( register int i = 1 ; i <= n ; ++ i ){ pa [ i ] = i , vis [ i ] = false ; que [ i ]. clear (), pos [ i ]. clear (); } for ( register int i = 1 ; i < n ; ++ i ){ int u , v ; scanf ( \"%d%d\" , & u , & v ); add ( u , v ), add ( v , u ); } for ( register int i = 1 ; i <= q ; ++ i ){ int u , v ; scanf ( \"%d%d\" , & u , & v ); if ( u == v ) lca [ i ] = u ; else { que [ u ]. pb ( v ), que [ v ]. pb ( u ); pos [ u ]. pb ( i ), pos [ v ]. pb ( i ); } } tarjan ( s ); for ( register int i = 1 ; i <= q ; ++ i ){ printf ( \"%d \\n \" , lca [ i ]); } return 0 ; } \u6811\u5256 LCA \u03c8(\uff40\u2207\u00b4)\u03c8 \u5e38\u6570\u975e\u5e38\u5c0f\u7684 LCA \u6c42\u6cd5\uff0c\u53ea\u4e0d\u8fc7\u8981\u5199\u4e24\u4e2a dfs.... \u7b80\u5355\u6765\u8bf4\u8fd8\u662f\u5229\u7528\u4e86\u7c7b\u4f3c\u500d\u589e\u7684\u601d\u60f3\uff0c\u4e0d\u8fc7\u5229\u7528\u4e86\u8f7b\u91cd\u94fe\u5256\u5206\u7684\u6027\u8d28\u53bb\u4f18\u5316\u4e86\u4e00\u4e0b\u800c\u5df2\u3002 Link \u6811\u4e0a\u5dee\u5206 \u03c8(\uff40\u2207\u00b4)\u03c8 \u70b9\u5dee\u5206 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60\u4e00\u68f5\u6811 \\(T\\) \uff0c\u4e14 \\(\\forall u \\in T\\) \u90fd\u6709\u4e00\u4e2a\u6743\u503c \\(val[u]\\) \u73b0\u5728\u6709 \\(q\\) \u6b21\u64cd\u4f5c\uff0c\u6bcf\u4e00\u6b21\u64cd\u4f5c \\(\\operatorname{change}(u,v,d)\\) \u9700\u8981\u4f60\u4fee\u6539 \\(u \\to v\\) \u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u7684\u6743\u503c\uff0c\u5373\u4ee4 \\(\\forall val[u]+d,(u\\in \\delta(u,v))\\) \u3002 \u5c06\u4e00\u6761\u6811\u94fe\u62c6\u6210 \\(A:(u,lca(u,v)),B:(v,lca(u,v))\\) \u8fd9\u4e24\u90e8\u5206\u3002 \u8bbe \\(c[u]\\) \u8868\u793a \\([u]\\) \u8fd9\u4e2a\u8282\u70b9\u7684\u589e\u91cf\uff08\u5dee\u5206\u6570\u7ec4\uff09\u3002 \u5bf9\u4e8e \\(A,B\\) \u7684\u7aef\u70b9\u5206\u522b\u5dee\u5206\u4e00\u4e0b\uff1a \\(c[u]=d,c[v]=d,c[lca]=-2\\times d\\) \u3002 \u4f46\u662f\u8fd9\u4e2a \\(\\texttt{LCA}\\) \u672c\u8eab\u5c31\u5728\u6811\u94fe \\(\\delta(u,v)\\) \u4e0a\u3002 \u6240\u4ee5\u5b83\u81ea\u5df1\u4e5f\u8981\u52a0 \\(d\\) \uff0c\u90a3\u4e48 \\(c[u]=d,c[v]=d,c[lca]=-d\\) \u3002 \u56e0\u4e3a\u7236\u8282\u70b9\u7684\u503c\u662f\u4f1a\u88ab\u5b50\u6811\u5f71\u54cd\u7684\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u7ed9 \\(father(lca(u,v))-d\\) \u3002 \u8fb9\u5dee\u5206 \u03c8(\uff40\u2207\u00b4)\u03c8 P3627 [APIO2009]\u62a2\u63a0\u8ba1\u5212 \u7528\u4e86\u4e00\u4e2a\u601d\u60f3\u53eb\u201c\u70b9\u6743\u5316\u8fb9\u6743\u201d\uff0c\u5728\u8fd9\u91cc\u53cd\u8fc7\u6765\uff0c\u201c\u8fb9\u6743\u5316\u70b9\u6743\u201d\u3002 \u8003\u8651\u4efb\u610f\u7684\u4e00\u6761\u6811\u8fb9 \\((u,v)\\) \uff0c\u4e00\u5b9a\u6ee1\u8db3\u5b83\u8fde\u63a5\u7684\u662f\u7236\u4eb2\u548c\u513f\u5b50\u3002 \u90a3\u4e48\u8fd9\u4e2a\u8fb9\u7684\u201c\u6307\u5411\u201d\u5c31\u6709\u552f\u4e00\u6027\uff0c\u6240\u4ee5\u628a\u6bcf\u4e00\u6761\u6811\u8fb9\u7684\u6743\u503c\u538b\u5230\u5b83\u6307\u5411\u7684\u201c\u513f\u5b50\u8282\u70b9\u201d\u3002 \u7279\u522b\u7684\uff0c\u56e0\u4e3a\u6811\u6839\u6ca1\u6709\u7236\u4eb2\uff0c\u6240\u4ee5\u5b83\u7684\u6743\u503c\u4e3a \\(0\\) \u65e2\u7136\u8fb9\u6743\u5316\u70b9\u6743\u4e86\uff0c\u90a3\u80fd\u4e0d\u80fd\u76f4\u63a5\u8dd1\u70b9\u5dee\u5206\uff1f \u4e0d\u884c\u3002 ( \\(u\\) \u6253\u9519\u6210 \\(x\\) \u4e86\uff09 \u6ce8\u610f\u5230 \\(\\texttt{LCA}\\) \u7684\u6743\u503c\u662f \\(\\delta(lca,root)\\) \u7684\u6743\u503c\uff0c\u6240\u4ee5\u76f8\u5f53\u4e8e\u662f\u5728\u8dd1\u4e00\u4e2a\u53bb\u6389 \\(\\texttt{LCA}\\) \u7684\u70b9\u5dee\u5206\u3002 \u4e8e\u662f\u5c31\u4e0d\u9700\u8981\u8003\u8651 \\(\\texttt{LCA}\\) \u7684\u6743\u503c\u548c\u5b83\u5bf9 \\(father({\\texttt{LCA}})\\) \u7684\u5f71\u54cd\u3002 \u76f4\u63a5 \\(c[u]+d,c[v]+d,c[lca]-2\\times d\\) \u5373\u53ef\u3002","title":"\u6700\u8fd1\u516c\u5171\u7956\u5148"},{"location":"algor/graph/lca/#_1","text":"\u5927\u6982\u5c31\u662f\u7ed9\u4f60\u6811\u4e0a\u7684\u4e24\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u95ee\u4ed6\u4eec\u5171\u540c\u7684\u7956\u5148\u91cc\u6df1\u5ea6\u6700\u5927\u7684\u90a3\u4e00\u4e2a\u3002","title":"\u6982\u8ff0"},{"location":"algor/graph/lca/#lca","text":"\u8003\u8651\u8bbe \\(f_{i,j}\\) \u8868\u793a \\(i\\) \u7684 \\(2^j\\) \u7ea7\u7956\u5148\u3002 \u8fd9\u4e2a\u53ef\u4ee5\u500d\u589e\u9012\u63a8 \u3002 \\(f_{i,j}=f_{f_{i,j-1},j-1}\\) \u3002 \u7136\u540e\u73b0\u5728\u7ed9\u5b9a\u4e00\u4e2a\u8be2\u95ee \\(lca(u,v)\\) \uff0c\u8003\u8651\u628a\u6df1\u5ea6\u8f83\u5927\u7684\u90a3\u4e00\u4e2a\u5f80\u4e0a\u8df3\u5230\u5b83\u7684 \\(2\\) \u7684 \\(\\log_2n,\\log_2n-1,\\dots 0\\) \u7ea7\u7956\u5148\uff08\u6b64\u5904\u662f \u4ece\u5927\u5230\u5c0f \u679a\u4e3e\uff09 \u5176\u672c\u8d28\u5c31\u662f\u500d\u589e\u5730\u5f80\u4e0a\u8df3\u3002 \uff08\u6bcf\u4e2a\u90fd\u8bd5\u4e00\u8bd5\uff0c\u5982\u679c\u8fd9\u4e2a\u7956\u5148 \\(f_{u,i}\\) \u7684\u6df1\u5ea6 \\(dep_{f_{u,i}}\\) \u5927\u4e8e\u7b49\u4e8e\u539f\u6765\u6df1\u5ea6\u66f4\u5c0f\u7684\u70b9\u7684\u6df1\u5ea6 \\(dep_v\\) \uff0c\u5c31\u8df3\u5230\u8fd9\u4e2a\u7956\u5148 \\(f_{u,i}\\) \uff09\u3002 \u5982\u679c\u6b64\u65f6\u4e24\u4e2a\u8282\u70b9\u91cd\u5408\u4e86\uff0cLCA \u5c31\u662f\u539f\u6765\u6df1\u5ea6\u5c0f\u7684\u8282\u70b9\u3002 \u5426\u5219 \u4fdd\u6301\u4e24\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\u4e00\u81f4 \uff0c\u7136\u540e\u5404\u81ea\u5f80\u4e0a\u8df3 \\(2\\) \u7684 \\(\\log_2n,\\log_2n-1,\\dots 0\\) \u6b21\u5e42\u6b65\uff0c\u5e76\u4e14\u4fdd\u6301\u4e0a\u8df3\u4e4b\u540e\u4ecd\u7136\u4e0d\u76f8\u9047\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u7ed3\u675f\u4e4b\u540e\uff0c \\(u,v\\) \u5f53\u524d\u7684\u7236\u4eb2\u5fc5\u7136\u76f8\u540c\uff0c\u8fd9\u5c31\u662f\u8981\u6c42\u7684 LCA\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 int dep [ si_n ], f [ si_n ][ 20 ]; inline void dfs ( int u , int fa ){ dep [ u ] = dep [ fa ] + 1 , f [ u ][ 0 ] = fa ; for ( register int i = 1 ; i <= 19 ; ++ i ) f [ u ][ i ] = f [ f [ u ][ i -1 ]][ i -1 ]; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs ( v , u ); } } inline void lca ( int x , int y ){ if ( dep [ x ] < dep [ y ]) swap ( x , y ); for ( register int i = 19 ; i >= 0 ; -- i ) if ( dep [ f [ x ][ i ]] >= dep [ y ]) x = f [ x ][ i ]; if ( x == y ) return x ; for ( register int i = 19 ; i >= 0 ; -- i ) if ( f [ x ][ i ] != f [ y ][ i ]) x = f [ x ][ i ], y = f [ y ][ i ]; return f [ x ][ 0 ]; } \u5355\u6b21\u8be2\u95ee \\(\\text{O}(\\log n)\\) \u3002 \u4f46\u662f\u8fd9\u79cd\u65b9\u5f0f\u662f\u66b4\u529b\u8df3\uff0c\u4e5f\u5c31\u662f\u76f4\u63a5\u201c\u8bd5\u201d\u3002 \u7528\u7c7b\u4f3c\u5feb\u901f\u5e42\u7684\u601d\u60f3\uff0c\u76f4\u63a5\u628a\u6570\u5b57\u4e8c\u8fdb\u5236\u62c6\u5206\uff0c\u53ea\u6709\u5f53\u524d\u4f4d \\(i\\) \u4e3a \\(1\\) \u7684\u65f6\u5019 \uff0c\u624d\u8df3 \\(2^i\\) \u7ea7\u7956\u5148\u3002 1 // \u5495\u5495\u5495","title":"\u500d\u589e LCA"},{"location":"algor/graph/lca/#tarjan-lca","text":"\u9996\u5148\u79bb\u7ebf\u6240\u6709\u7684 Query\uff0c \u5728\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u65f6\u5019\uff0c\u7ed9\u6bcf\u4e2a\u8282\u70b9\u6253\u4e0a\u4e00\u4e2a\u6807\u8bb0 \u6ca1\u6709\u8bbf\u95ee\u7684\u8282\u70b9 \u5f53\u524d\u6b63\u5728\u8bbf\u95ee\u7684\u5206\u652f\u4e0a\u7684\u8282\u70b9 \u5df2\u7ecf\u8bbf\u95ee\u5b8c\u5e76\u4e14\u56de\u6eaf\u5b8c\u7684\u8282\u70b9 \u5982\u56fe\uff1a \u6211\u4eec\u8003\u8651\u5904\u7406\u6240\u6709\u548c \\(now\\) \u76f8\u5173\u7684\u8be2\u95ee\u3002 \u53d1\u73b0\u6240\u6709 2 \u7c7b\u578b\u7684\u8282\u70b9\u548c \\(now\\) \u7684 LCA \u90fd\u662f 1 \u7c7b\u578b\u7684\u8282\u70b9\u5e76\u4e14\u548c \\(now\\) \u5728\u540c\u4e00\u5206\u652f\uff0c\u6bd4 \\(now\\) \u5148\u8bbf\u95ee\uff1a \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u628a\u8fd9\u4e9b 2 \u7c7b\u578b\u7684\u8282\u70b9\u548c\u5f53\u524d\u5206\u652f\u7684\u8282\u70b9\u5408\u5e76\uff0c\u7136\u540e\u6bcf\u6b21\u8be2\u95ee\u5c31\u80fd\u76f4\u63a5\u5904\u7406\u4e86\u3002 \u8fd9\u4e2a\u5408\u5e76\u548c\u8be2\u95ee\u64cd\u4f5c\u53ef\u4ee5\u5229\u7528 dsu\u3002 \u590d\u6742\u5ea6 \\(\\text{O}(n+m)\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #include <bits/stdc++.h> using namespace std ; #define pb push_back const int si_n = 5e5 + 10 ; const int si_m = 5e5 + 10 ; struct Tree { int ver , Next , head ; } e [ si_m << 1 ]; int cnt = 0 ; void add ( int u , int v ){ e [ ++ cnt ]. ver = v , e [ cnt ]. Next = e [ u ]. head ; e [ u ]. head = cnt ; } int pa [ si_n ]; int root ( int x ){ if ( pa [ x ] != x ){ return pa [ x ] = root ( pa [ x ]); } return pa [ x ]; } vector < int > que [ si_n ], pos [ si_n ]; int lca [ si_n ]; bool vis [ si_n ]; int n , q , s ; void tarjan ( int u ){ vis [ u ] = true ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( vis [ v ] == true ) continue ; tarjan ( v ), pa [ v ] = root ( u ); } for ( register int i = 0 ; i < ( int ) que [ u ]. size (); ++ i ){ int v = que [ u ][ i ], po = pos [ u ][ i ]; if ( vis [ v ] == true ) lca [ po ] = root ( v ); } } int main (){ scanf ( \"%d%d%d\" , & n , & q , & s ); for ( register int i = 1 ; i <= n ; ++ i ){ pa [ i ] = i , vis [ i ] = false ; que [ i ]. clear (), pos [ i ]. clear (); } for ( register int i = 1 ; i < n ; ++ i ){ int u , v ; scanf ( \"%d%d\" , & u , & v ); add ( u , v ), add ( v , u ); } for ( register int i = 1 ; i <= q ; ++ i ){ int u , v ; scanf ( \"%d%d\" , & u , & v ); if ( u == v ) lca [ i ] = u ; else { que [ u ]. pb ( v ), que [ v ]. pb ( u ); pos [ u ]. pb ( i ), pos [ v ]. pb ( i ); } } tarjan ( s ); for ( register int i = 1 ; i <= q ; ++ i ){ printf ( \"%d \\n \" , lca [ i ]); } return 0 ; }","title":"Tarjan LCA"},{"location":"algor/graph/lca/#lca_1","text":"\u5e38\u6570\u975e\u5e38\u5c0f\u7684 LCA \u6c42\u6cd5\uff0c\u53ea\u4e0d\u8fc7\u8981\u5199\u4e24\u4e2a dfs.... \u7b80\u5355\u6765\u8bf4\u8fd8\u662f\u5229\u7528\u4e86\u7c7b\u4f3c\u500d\u589e\u7684\u601d\u60f3\uff0c\u4e0d\u8fc7\u5229\u7528\u4e86\u8f7b\u91cd\u94fe\u5256\u5206\u7684\u6027\u8d28\u53bb\u4f18\u5316\u4e86\u4e00\u4e0b\u800c\u5df2\u3002 Link","title":"\u6811\u5256 LCA"},{"location":"algor/graph/lca/#_2","text":"","title":"\u6811\u4e0a\u5dee\u5206"},{"location":"algor/graph/lca/#_3","text":"\u7ed9\u4f60\u4e00\u68f5\u6811 \\(T\\) \uff0c\u4e14 \\(\\forall u \\in T\\) \u90fd\u6709\u4e00\u4e2a\u6743\u503c \\(val[u]\\) \u73b0\u5728\u6709 \\(q\\) \u6b21\u64cd\u4f5c\uff0c\u6bcf\u4e00\u6b21\u64cd\u4f5c \\(\\operatorname{change}(u,v,d)\\) \u9700\u8981\u4f60\u4fee\u6539 \\(u \\to v\\) \u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u7684\u6743\u503c\uff0c\u5373\u4ee4 \\(\\forall val[u]+d,(u\\in \\delta(u,v))\\) \u3002 \u5c06\u4e00\u6761\u6811\u94fe\u62c6\u6210 \\(A:(u,lca(u,v)),B:(v,lca(u,v))\\) \u8fd9\u4e24\u90e8\u5206\u3002 \u8bbe \\(c[u]\\) \u8868\u793a \\([u]\\) \u8fd9\u4e2a\u8282\u70b9\u7684\u589e\u91cf\uff08\u5dee\u5206\u6570\u7ec4\uff09\u3002 \u5bf9\u4e8e \\(A,B\\) \u7684\u7aef\u70b9\u5206\u522b\u5dee\u5206\u4e00\u4e0b\uff1a \\(c[u]=d,c[v]=d,c[lca]=-2\\times d\\) \u3002 \u4f46\u662f\u8fd9\u4e2a \\(\\texttt{LCA}\\) \u672c\u8eab\u5c31\u5728\u6811\u94fe \\(\\delta(u,v)\\) \u4e0a\u3002 \u6240\u4ee5\u5b83\u81ea\u5df1\u4e5f\u8981\u52a0 \\(d\\) \uff0c\u90a3\u4e48 \\(c[u]=d,c[v]=d,c[lca]=-d\\) \u3002 \u56e0\u4e3a\u7236\u8282\u70b9\u7684\u503c\u662f\u4f1a\u88ab\u5b50\u6811\u5f71\u54cd\u7684\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u7ed9 \\(father(lca(u,v))-d\\) \u3002","title":"\u70b9\u5dee\u5206"},{"location":"algor/graph/lca/#_4","text":"P3627 [APIO2009]\u62a2\u63a0\u8ba1\u5212 \u7528\u4e86\u4e00\u4e2a\u601d\u60f3\u53eb\u201c\u70b9\u6743\u5316\u8fb9\u6743\u201d\uff0c\u5728\u8fd9\u91cc\u53cd\u8fc7\u6765\uff0c\u201c\u8fb9\u6743\u5316\u70b9\u6743\u201d\u3002 \u8003\u8651\u4efb\u610f\u7684\u4e00\u6761\u6811\u8fb9 \\((u,v)\\) \uff0c\u4e00\u5b9a\u6ee1\u8db3\u5b83\u8fde\u63a5\u7684\u662f\u7236\u4eb2\u548c\u513f\u5b50\u3002 \u90a3\u4e48\u8fd9\u4e2a\u8fb9\u7684\u201c\u6307\u5411\u201d\u5c31\u6709\u552f\u4e00\u6027\uff0c\u6240\u4ee5\u628a\u6bcf\u4e00\u6761\u6811\u8fb9\u7684\u6743\u503c\u538b\u5230\u5b83\u6307\u5411\u7684\u201c\u513f\u5b50\u8282\u70b9\u201d\u3002 \u7279\u522b\u7684\uff0c\u56e0\u4e3a\u6811\u6839\u6ca1\u6709\u7236\u4eb2\uff0c\u6240\u4ee5\u5b83\u7684\u6743\u503c\u4e3a \\(0\\) \u65e2\u7136\u8fb9\u6743\u5316\u70b9\u6743\u4e86\uff0c\u90a3\u80fd\u4e0d\u80fd\u76f4\u63a5\u8dd1\u70b9\u5dee\u5206\uff1f \u4e0d\u884c\u3002 ( \\(u\\) \u6253\u9519\u6210 \\(x\\) \u4e86\uff09 \u6ce8\u610f\u5230 \\(\\texttt{LCA}\\) \u7684\u6743\u503c\u662f \\(\\delta(lca,root)\\) \u7684\u6743\u503c\uff0c\u6240\u4ee5\u76f8\u5f53\u4e8e\u662f\u5728\u8dd1\u4e00\u4e2a\u53bb\u6389 \\(\\texttt{LCA}\\) \u7684\u70b9\u5dee\u5206\u3002 \u4e8e\u662f\u5c31\u4e0d\u9700\u8981\u8003\u8651 \\(\\texttt{LCA}\\) \u7684\u6743\u503c\u548c\u5b83\u5bf9 \\(father({\\texttt{LCA}})\\) \u7684\u5f71\u54cd\u3002 \u76f4\u63a5 \\(c[u]+d,c[v]+d,c[lca]-2\\times d\\) \u5373\u53ef\u3002","title":"\u8fb9\u5dee\u5206"},{"location":"algor/graph/mst/","text":"\u5b9a\u4e49 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60\u4e00\u4e2a\u5e26\u6743\u65e0\u5411\u56fe\uff0c\u6c42\u5b83\u7684\u6240\u6709\u751f\u6210\u6811\u5f53\u4e2d\u6743\u503c\u548c\u6700\u5c0f\u7684\u4e00\u4e2a\u3002 \u5e26\u6743\u65e0\u5411\u56fe \\(G\\) \u7684\u751f\u6210\u6811 \\(T\\) \u5b9a\u4e49\u4e3a\u5305\u542b \\(G\\) \u7684\u6240\u6709\u8282\u70b9\uff0c\u7531 \\(G\\) \u5f53\u4e2d\u8fde\u63a5\u5b83\u4eec\u7684 \\(n-1\\) \u6761\u8fb9\u6784\u6210\u7684\u65e0\u5411\u8054\u901a\u5b50\u56fe\u3002 \u4e24\u4e2a\u5b9a\u7406 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4efb\u610f\u4e00\u9897\u6700\u5c0f\u751f\u6210\u6811\u4e00\u5b9a\u5305\u542b \\(G\\) \u4e2d\u6700\u5c0f\u7684\u8fb9\uff08\u53cd\u8bc1\u6cd5\u5373\u53ef\uff09\u3002 \u8bbe\u4e00\u5f20\u65e0\u5411\u56fe \\(G=(V,E)\\) \uff0c\u4ece \\(E\\) \u4e2d\u9009\u51fa \\(k<|V|-1\\) \u6761\u8fb9\u6784\u6210 \\(G\\) \u7684\u4e00\u4e2a\u751f\u6210\u68ee\u6797\uff0c\u7136\u540e\u518d\u4ece\u5269\u4f59\u7684 \\(|E|-k\\) \u6761\u8fb9\u4e2d\u9009\u51fa \\(|V|-1-k\\) \u6761\u8fb9\u52a0\u5165\u68ee\u6797\u4e2d\uff0c\u8ba9\u5b83\u6210\u4e3a \\(G\\) \u7684\u751f\u6210\u6811\uff0c\u5e76\u4e14\u9009\u51fa\u7684 \\(\\sum w\\) \u6700\u5c0f\u3002 \u90a3\u4e48\uff0c\u8fd9\u4e2a\u751f\u6210\u6811\u4e00\u5b9a\u5305\u542b \\(|E|-k\\) \u6761\u8fb9\u91cc\u9762\u8fde\u63a5\u751f\u6210\u68ee\u6797\u7684\u4e24\u4e2a\u4e0d\u8fde\u901a\u8282\u70b9\u7684\u6743\u503c\u6700\u5c0f\u7684\u8fb9\u3002 \u8bc1\u660e\u53ef\u4ee5\u5728 zhihu \u770b\u770b @ciwei \u795e\u4ed9\u7684\u4e13\u680f\u3002 Kruskal \u7b97\u6cd5 \u03c8(\uff40\u2207\u00b4)\u03c8 \u57fa\u672c\u601d\u60f3\u662f\u7ef4\u62a4\u56fe\u7684\u6700\u5c0f\u751f\u6210\u68ee\u6797\u3002 \u5f00\u59cb\u7684\u65f6\u5019\u751f\u6210\u68ee\u6797\u662f\u7a7a\u7684\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u9897\u72ec\u7acb\u7684\u6811\u3002 \u7136\u540e\u7528\u7ed3\u8bba \\(2\\) \u7ef4\u62a4\u68ee\u6797\uff0c\u5229\u7528 dsu \u7ef4\u62a4\u8054\u901a\u6027\u3002 \u6309\u7167\u8fb9\u6743\u5347\u5e8f\u6392\u4e2a\u5e8f\uff0c\u7136\u540e\u626b\u4e00\u904d\u6bcf\u4e2a\u8fb9\u3002 \u5982\u679c\u5f53\u524d\u626b\u5230\u7684\u8fd9\u6761\u8fb9\u6240\u8fde\u7684\u4e24\u4e2a\u70b9 \\((u,v)\\) \u5df2\u7ecf\u8054\u901a\u4e86\u3002\u90a3\u4e48\u8df3\u8fc7\u3002 \u5982\u679c\u4e0d\u662f\u8054\u901a\u7684\uff0c\u6839\u636e\u8fd9\u4e00\u6761\uff1a \u8fd9\u4e2a\u751f\u6210\u6811\u4e00\u5b9a\u5305\u542b \\(|E|-k\\) \u6761\u8fb9\u91cc\u9762\u8fde\u63a5\u751f\u6210\u68ee\u6797\u7684 \u4e24\u4e2a\u4e0d\u8fde\u901a\u8282\u70b9 \u7684\u6743\u503c\u6700\u5c0f\u7684\u8fb9\u3002 \u628a\u8fd9\u4e00\u6761\u8fb9\u52a0\u5165\u5230\u6700\u5c0f\u751f\u6210\u6811\u91cc\uff0c\u987a\u4fbf\u5408\u5e76\u4e00\u4e0b \\((u,v)\\) Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 struct Edge { int x , y , z ; inline bool operator < ( const Edge & b ) const { return z < b . z ; } } a [ si_m ]; struct Dsu { int pa [ si_n ]; Dsu (){ for ( register int i = 1 ; i <= 1e2 + 10 ; ++ i ) pa [ i ] = i ; } inline int root ( int x ){ if ( pa [ x ] != x ) return pa [ x ] = root ( pa [ x ]); return pa [ x ]; } inline bool same ( int x , int y ){ return root ( x ) == root ( y ); } inline void Union ( int x , int y ){ int rx = root ( x ), ry = root ( y ); if ( rx == ry ) return ; pa [ rx ] = ry ; } } dsu ; int main (){ cin >> n >> m ; for ( register int i = 1 ; i <= m ; ++ i ){ cin >> a [ i ]. x >> a [ i ]. y >> a [ i ]. z ; } sort ( a + 1 , a + 1 + m ); int ans = 0 ; for ( register int i = 1 ; i <= m ; ++ i ){ if ( dsu . same ( a [ i ]. x , a [ i ]. y )) continue ; dsu . Union ( a [ i ]. x , a [ i ]. y ), ans += a [ i ]. z ; } cout << ans << endl ; return 0 ; } \u590d\u6742\u5ea6 \\(\\text{O}(m \\log m)\\) \u3002 Prim \u7b97\u6cd5 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e00\u822c\u7528\u4e8e\u7a20\u5bc6\u56fe\u3002 \u6700\u5f00\u59cb\u786e\u5b9a \\(1\\) \u53f7\u8282\u70b9\u5c5e\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u3002 \u6bcf\u4e00\u6b21\u627e\u5230\u4e00\u6761\u6743\u503c\u6700\u5c0f\u7684\uff0c\u4e14\u6ee1\u8db3\u5b83\u8fde\u63a5\u7684\u5176\u4e2d\u4e00\u4e2a\u70b9 \\(u\\) \u5df2\u7ecf\u88ab\u9009\u5165\u6700\u5c0f\u751f\u6210\u6811\u91cc\uff0c\u53e6\u4e00\u4e2a\u70b9 \\(v\\) \u5219\u672a\u88ab\u9009\u4e2d\u7684\u8fb9\u3002 \u5177\u4f53\u5b9e\u73b0\uff1a \u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4 \\(dis\\) ,\u5982\u679c \\(u\\) \u6ca1\u6709\u88ab\u9009\u5165\uff0c\u90a3\u4e48 \\(dis_u\\) \u5c31\u7b49\u4e8e \\(u\\) \u548c\u5df2\u7ecf\u88ab\u9009\u4e2d\u70b9\u4e4b\u95f4\u7684\u8fde\u8fb9\u4e2d\u6743\u503c\u6700\u5c0f\u7684\u8fb9\u7684\u6743\u503c\u3002 \u53cd\u4e4b \\(dis_u\\) \u5c31\u7b49\u4e8e \\(u\\) \u88ab\u9009\u4e2d\u7684\u65f6\u5019\u9009\u51fa\u6765\u90a3\u6761\u6743\u503c\u6700\u5c0f\u8fb9\u7684\u6743\u503c\u3002 \u5982\u4f55\u5224\u662f\u5426\u9009\u4e2d\u5462\uff1f \u7ef4\u62a4\u4e00\u4e2a \\(vis\\) \u5373\u53ef\u3002\u4ece\u6ca1\u6709\u88ab\u9009\u4e2d\u7684\u8282\u70b9\u5f53\u4e2d\u9009\u51fa\u4e00\u4e2a \\(dis\\) \u6700\u5c0f\u7684\uff0c\u6807\u8bb0\u5b83\u3002 \u626b\u63cf\u548c\u8fd9\u4e2a\u88ab\u9009\u70b9\u7684\u6240\u6709\u51fa\u8fb9\uff0c\u66f4\u65b0\u53e6\u5916\u4e00\u4e2a\u7aef\u70b9\u7684 \\(dis\\) \u3002 \u6700\u540e\u751f\u6210\u6811\u7684\u6743\u503c\u548c\u5c31\u662f \\(\\sum\\limits^{n}_{i=2} dis_i\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 inline void Prim (){ memset ( vis , false , sizeof vis ), memset ( dis , 0x3f , sizeof dis ); dis [ 1 ] = 0 ; for ( register int i = 1 ; i < n ; ++ i ){ int x = 0 ; for ( register int j = 1 ; j <= n ; ++ j ){ if ( ! vis [ j ] && ( x == 0 || dis [ j ] < dis [ x ])) x = j ; } vis [ x ] = true ; for ( register int y = 1 ; y <= n ; ++ y ) if ( ! vis [ y ]) dis [ y ] = min ( dis [ y ], a [ x ][ y ]); } } int main (){ cin >> n ; memset ( a , 0x3f , sizeof a ); for ( register int i = 1 ; i < n ; ++ i ){ a [ i ][ i ] = 0 ; for ( register int j = 1 ; j <= n ; ++ j ){ int value ; cin >> value ; a [ i ][ j ] = a [ j ][ i ] = min ( a [ i ][ j ], value ); } } Prim (); int ans = 0 ; for ( register int i = 2 ; i <= n ; ++ i ) ans += dis [ i ]; return printf ( \"%d \\n \" , ans ), 0 ; } \u590d\u6742\u5ea6 \\(\\text{O}(n^2)\\) \uff0c\u53ef\u4ee5\u7528\u4e8c\u53c9\u5806\u4f18\u5316\u5230 \\(\\text{O}(m \\log n)\\) \uff0c\u4f46\u4e0d\u5982\u76f4\u63a5 Kruskal\u3002 Kruskal \u91cd\u6784\u6811 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e00\u4e2a\u795e\u5947\u7684\u79d1\u6280\uff0c\u56e0\u4e3a \\(\\texttt{8102ION}\\text{\u5f52\u7a0b}\\) \u8fd9\u9053\u51fa\u4e86\u540d\u7684\u9898\uff0c\u800c\u88ab\u4e16\u4eba\u6240\u77e5\uff08 \u8fd9\u4e2a\u4e1c\u897f\u57fa\u4e8e \\(\\texttt{Kruskal}\\) \u5b9e\u73b0\u3002 \u5b83\u5177\u6709\u975e\u5e38\u591a\u4f18\u96c5\u7684\u6027\u8d28\u3002 \u505a\u6cd5\u662f\u5728\u8dd1 \\(\\texttt{Kruskal}\\) \u5bf9\u4e8e\u4e0d\u5728\u540c\u4e00\u96c6\u5408\u7684\u4e24\u4e2a\u70b9 \\((u,v)\\) \u8fde\u8fb9\u7684\u65f6\u5019\uff0c\u6211\u4eec\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9 \\(k\\) \uff0c\u4ee4 \\((u,v)\\) \u5206\u522b\u6240\u5728\u7684\u96c6\u5408\u7684\u6839 \\(r_u,r_v\\) \u5206\u522b\u4f5c\u4e3a \\(k\\) \u7684\u5de6\u53f3\u513f\u5b50\u3002 \u5e76\u4e14\u6211\u4eec\u628a \\(k\\) \u4f5c\u4e3a \\(S_u,S_v\\) \u4e24\u4e2a\u96c6\u5408\u5408\u5e76\u4e4b\u540e\u7684\u6839\u3002 \u7136\u540e\u628a \\(k\\) \u7684\u70b9\u6743\u7f6e\u4e3a \\(\\delta(u,v)\\) \u7684\u6743\u503c\u3002 \u8dd1\u5b8c \\(\\texttt{Kruskal}\\) \u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u9897\u4f18\u7f8e\u7684\u91cd\u6784\u6811\u3002 \u4ed6\u6ee1\u8db3\u4ee5\u4e0b\u6027\u8d28\uff1a (\u53ea\u8003\u8651\u65b0\u8282\u70b9)\u6839\u636e\u6784\u9020\u8fc7\u7a0b\uff0c \\(\\texttt{Kruskal}\\) \u91cd\u6784\u6811\u662f\u4e00\u9897\u4e8c\u53c9\u6811\uff0c\u5e76\u7b26\u5408\u4e8c\u53c9\u5806\u7684\u6027\u8d28\u3002 \u539f\u6765\u7684 \u6700\u5c0f\u751f\u6210\u6811 \u4e24\u70b9\u95f4\u7684\u7684\u6700\u5927\u8fb9\u6743\u5c31\u662f \\(\\texttt{Kruskal}\\) \u91cd\u6784\u6811\u4e0a\u4e24\u70b9\u7684 \\(\\text{Lca}\\) \u7684\u6743\u503c\u3002 \u91cd\u6784\u6811\u4e2d\u4ee3\u8868\u539f\u6811\u4e2d\u7684\u70b9\u7684\u8282\u70b9\u5168\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u5176\u4f59\u8282\u70b9\u90fd\u4ee3\u8868\u4e86\u4e00\u6761\u8fb9\u7684\u8fb9\u6743\u3002 \u7136\u540e\u5b9e\u9645\u4e0a\u6240\u6709\u65b0\u5efa\u7684\u70b9 \\(k\\) \u7684\u542b\u4e49\u5c31\u662f\uff1a \u5982\u679c \\(k\\) \u7684\u5de6\u53f3\u5b50\u6811\u4e2d\u7684\u70b9\u60f3\u8981\u4e92\u901a\uff0c\u5fc5\u987b\u8981\u8d70\u81f3\u5c11\u4e00\u6761\u8fb9\u6743\u7b49\u4e8e\u8fd9\u4e2a\u70b9\u6743 \\(w_k\\) \u7684\u8fb9\u3002 \u6709\u4ec0\u4e48\u7528\u5462\uff1f \u5047\u8bbe\u6211\u4eec\u4e00\u5f00\u59cb\u7684\u65f6\u5019\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u4e5f\u5c31\u662f\u6c42\u6700\u5c0f\u751f\u6210\u6811\u3002 \u90a3\u4e48\u6211\u4eec\u641e\u51fa\u6765\u7684\u91cd\u6784\u6811\u4e0a\u7684 \\(\\text{Lca}(u,v)\\) \u5c31\u4ee3\u8868 \u539f\u56fe \u5f53\u4e2d \\(u\\to v\\) \u7684\u6240\u6709\u7b80\u5355\u8def\u5f84\u7684\u8fb9\u5f53\u4e2d\u7684 \u6700\u5927\u8fb9\u7684\u6700\u5c0f\u503c \u3002 \u6bd4\u5982\u8bf4\u4f60\u539f\u56fe\u4e0a \\(1\\to 4\\) \u6709\u4e24\u6761\u8def\u5f84\uff0c\u4ed6\u4eec\u5206\u522b\u662f \\(1 \\to 2 \\to 4,1\\to 3 \\to 4\\) \u7136\u540e\u8fb9\u6743\u662f \\(w(1,2)=1,w(1,3)=2,w(3,4)=3,w(2,4)=4\\) \u3002 \u90a3\u4e48\u7b2c\u4e00\u6761\u8def\u5f84\u7684\u6700\u5927\u8fb9\u662f \\(4\\) \uff0c\u7b2c\u4e8c\u6761\u7684\u6700\u5927\u8fb9\u662f \\(3\\) \u3002 \u90a3\u4e48 \u7b80\u5355\u8def\u5f84\u7684\u8fb9\u5f53\u4e2d\u7684\u6700\u5927\u8fb9\u7684\u6700\u5c0f\u503c\u3002 \u8fd9\u53e5\u8bdd\u7684\u610f\u601d\u5c31\u662f \\(\\min(3,4)=3\\) \u3002 \u63a8\u5e7f\u4e00\u4e0b\u5c31\u662f \\(\\min\\limits_{i=1}^{cnt}(\\max \\{w(uu,vv)\\}), (uu,vv \\in \\forall \\delta(u,v))\\) \\(cnt\\) \u662f\u7b80\u5355\u8def\u5f84\u6570\u3002 \u624b\u5143\u4e00\u4e0b\uff1a \u8fd9\u4e2a\u5730\u65b9\u662f\u7f51\u4e0a\u5f88\u591a\u535a\u5ba2\u90fd\u5199\u9519\u4e86\u7684\uff0c\u5f88\u660e\u663e\u5c31\u662f\u76f4\u63a5\u6284\u522b\u4eba\u7684\u7136\u540e\u4e00\u76f4\u6284\u4e0b\u53bb\u641e\u5f97\u5f88\u591a\u90fd\u662f\u9519\u7684\uff08 \u597d\u50cf OI wiki \u8fd9\u4e2a\u65f6\u5019\uff0821/8/22\uff09 \u4e5f\u662f\u9519\u7684\u3002 \u7136\u540e\u6700\u5927\u751f\u6210\u6811\u5012\u8fc7\u6765\u5c31\u884c\u4e86\u3002 \u6bd4\u5982\u91cd\u6784\u6811\u7684 \\(\\text{Lca}(u,v)\\) \u4ee3\u8868\u7684\u5c31\u662f\u6700\u5927\u751f\u6210\u6811\u4e0a \\((u,v)\\) \u4e24\u70b9\u4e4b\u95f4\u8def\u5f84\u7684\u5c0f\u8fb9\u3002 \u7136\u540e\u539f\u56fe\u4e0a\u5c31\u662f\u6700\u5c0f\u8fb9\u6700\u5927\u3002 \u6765\u4e00\u9053\u9898\u7406\u89e3\uff1a [NOIP2013]\u8d27\u8f66\u8fd0\u8f93 \u03c8(\uff40\u2207\u00b4)\u03c8 A\u56fd\u6709 \\(n\\) \u5ea7\u57ce\u5e02\uff0c\u7f16\u53f7\u4ece \\(1\\) \u5230 \\(n\\) \uff0c\u57ce\u5e02\u4e4b\u95f4\u6709 \\(m\\) \u6761\u53cc\u5411\u9053\u8def\u3002\u6bcf\u4e00\u6761\u9053\u8def\u5bf9\u8f66\u8f86\u90fd\u6709\u91cd\u91cf\u9650\u5236\uff0c\u7b80\u79f0\u9650\u91cd\u3002 \u73b0\u5728\u6709 \\(q\\) \u8f86\u8d27\u8f66\u5728\u8fd0\u8f93\u8d27\u7269\uff0c \u53f8\u673a\u4eec\u60f3\u77e5\u9053\u6bcf\u8f86\u8f66\u5728\u4e0d\u8d85\u8fc7\u8f66\u8f86\u9650\u91cd\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u591a\u80fd\u8fd0\u591a\u91cd\u7684\u8d27\u7269\u3002 \u5c31\u662f \u6700\u5927\u751f\u6210\u6811 \u4e2d\u7684 \\((u,v)\\) \u4e4b\u95f4\u7684\u8def\u5f84\u7684\u6700\u5c0f\u8fb9\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 #include <bits/stdc++.h> using namespace std ; const int si_n = 1e4 + 10 ; const int si_m = 5e4 + 10 ; int n , m , q ; struct Kruskal { int u , v , w ; bool operator < ( const Kruskal & b ) const { return w > b . w ; } //\u6700\u5927\u751f\u6210\u6811 } e [ si_m << 1 ]; int pa [ si_n << 1 ]; int root ( int x ){ if ( pa [ x ] != x ) return pa [ x ] = root ( pa [ x ]); return pa [ x ]; } struct Tree { int ver , head , Next ; } t [ si_m << 1 ]; int cnt = 0 , tot = n ; //\u4e00\u5b9a\u6ce8\u610f\u8fd9\u91cc\u8d4b\u503c\u662f\u6ca1\u7528\u7684\uff0c\u8981\u5728\u4e3b\u51fd\u6570\u91cc\u8bfb\u5165n\u4e4b\u540e\u518d\u8d4b\u503c\uff01 void add ( int u , int v ){ t [ ++ cnt ]. ver = v , t [ cnt ]. Next = t [ u ]. head ; t [ u ]. head = cnt ; } int val [ si_n << 1 ]; bool vis [ si_n << 1 ]; int f [ si_n << 1 ][ 20 ], dep [ si_n << 1 ]; void dfs ( int i , int fa ){ dep [ i ] = dep [ fa ] + 1 ; f [ i ][ 0 ] = fa , vis [ i ] = true ; for ( register int j = 1 ; j < 18 ; ++ j ){ f [ i ][ j ] = f [ f [ i ][ j -1 ]][ j -1 ]; } for ( register int j = t [ i ]. head ; j ; j = t [ j ]. Next ){ int v = t [ j ]. ver ; if ( v == fa ) continue ; dfs ( v , i ); } } int lca ( int u , int v ){ if ( dep [ u ] < dep [ v ]) swap ( u , v ); for ( register int i = 19 ; i >= 0 ; -- i ){ if ( dep [ f [ u ][ i ]] >= dep [ v ]) u = f [ u ][ i ]; } if ( u == v ) return u ; for ( register int i = 19 ; i >= 0 ; -- i ){ if ( f [ u ][ i ] != f [ v ][ i ]){ u = f [ u ][ i ], v = f [ v ][ i ]; } } return f [ u ][ 0 ]; } void insert ( int u , int v , int w ){ int k =++ tot ; val [ k ] = w ; int ru = root ( u ), rv = root ( v ); add ( k , ru ), add ( ru , k ); add ( k , rv ), add ( rv , k ); pa [ k ] = pa [ ru ] = pa [ rv ] = k ; //\u5148\u52a0\u8fb9\u540e\u5408\u5e76 } int main (){ memset ( vis , false , sizeof vis ); scanf ( \"%d%d\" , & n , & m ); tot = n ; // qwq for ( register int i = 1 ; i <= n ; ++ i ){ pa [ i ] = i ; } for ( register int i = 1 ; i <= m ; ++ i ){ int u , v , w ; scanf ( \"%d%d%d\" , & u , & v , & w ); e [ i ] = ( Kruskal ){ u , v , w }; } sort ( e + 1 , e + 1 + m ); for ( register int i = 1 ; i <= m ; ++ i ){ int ru = root ( e [ i ]. u ), rv = root ( e [ i ]. v ); if ( ru != rv ) insert ( e [ i ]. u , e [ i ]. v , e [ i ]. w ); } for ( register int i = 1 ; i <= tot ; ++ i ){ if ( ! vis [ i ]) dfs ( root ( i ), 0 ); } // \u9632\u6b62\u4e0d\u8fde\u901a // for(register int i=1;i<=tot;++i){ // cout<<val[i]<<\" \"; // } // puts(\"\"); scanf ( \"%d\" , & q ); while ( q -- ){ int l , r ; scanf ( \"%d%d\" , & l , & r ); if ( root ( l ) != root ( r )) puts ( \"-1\" ); else printf ( \"%d \\n \" , val [ lca ( l , r )]); } return 0 ; } \u7136\u540e\u53ef\u4ee5\u53d1\u73b0\u8fd9\u7c7b\u95ee\u9898\u7684\u6838\u5fc3\uff1a \u82e5\u4e00\u4e2a\u70b9\u80fd\u901a\u8fc7\u4e00\u6761\u8def\u5f84\u5230\u8fbe\uff0c\u90a3\u4e48\u6211\u4eec\u8d70\u6700\u5c0f\uff08\u5927\uff09\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u4e5f\u4e00\u5b9a\u80fd\u5230\u8fbe\u8be5\u8282\u70b9\u3002","title":"\u6700\u5c0f\u751f\u6210\u6811"},{"location":"algor/graph/mst/#_1","text":"\u7ed9\u4f60\u4e00\u4e2a\u5e26\u6743\u65e0\u5411\u56fe\uff0c\u6c42\u5b83\u7684\u6240\u6709\u751f\u6210\u6811\u5f53\u4e2d\u6743\u503c\u548c\u6700\u5c0f\u7684\u4e00\u4e2a\u3002 \u5e26\u6743\u65e0\u5411\u56fe \\(G\\) \u7684\u751f\u6210\u6811 \\(T\\) \u5b9a\u4e49\u4e3a\u5305\u542b \\(G\\) \u7684\u6240\u6709\u8282\u70b9\uff0c\u7531 \\(G\\) \u5f53\u4e2d\u8fde\u63a5\u5b83\u4eec\u7684 \\(n-1\\) \u6761\u8fb9\u6784\u6210\u7684\u65e0\u5411\u8054\u901a\u5b50\u56fe\u3002","title":"\u5b9a\u4e49"},{"location":"algor/graph/mst/#_2","text":"\u4efb\u610f\u4e00\u9897\u6700\u5c0f\u751f\u6210\u6811\u4e00\u5b9a\u5305\u542b \\(G\\) \u4e2d\u6700\u5c0f\u7684\u8fb9\uff08\u53cd\u8bc1\u6cd5\u5373\u53ef\uff09\u3002 \u8bbe\u4e00\u5f20\u65e0\u5411\u56fe \\(G=(V,E)\\) \uff0c\u4ece \\(E\\) \u4e2d\u9009\u51fa \\(k<|V|-1\\) \u6761\u8fb9\u6784\u6210 \\(G\\) \u7684\u4e00\u4e2a\u751f\u6210\u68ee\u6797\uff0c\u7136\u540e\u518d\u4ece\u5269\u4f59\u7684 \\(|E|-k\\) \u6761\u8fb9\u4e2d\u9009\u51fa \\(|V|-1-k\\) \u6761\u8fb9\u52a0\u5165\u68ee\u6797\u4e2d\uff0c\u8ba9\u5b83\u6210\u4e3a \\(G\\) \u7684\u751f\u6210\u6811\uff0c\u5e76\u4e14\u9009\u51fa\u7684 \\(\\sum w\\) \u6700\u5c0f\u3002 \u90a3\u4e48\uff0c\u8fd9\u4e2a\u751f\u6210\u6811\u4e00\u5b9a\u5305\u542b \\(|E|-k\\) \u6761\u8fb9\u91cc\u9762\u8fde\u63a5\u751f\u6210\u68ee\u6797\u7684\u4e24\u4e2a\u4e0d\u8fde\u901a\u8282\u70b9\u7684\u6743\u503c\u6700\u5c0f\u7684\u8fb9\u3002 \u8bc1\u660e\u53ef\u4ee5\u5728 zhihu \u770b\u770b @ciwei \u795e\u4ed9\u7684\u4e13\u680f\u3002","title":"\u4e24\u4e2a\u5b9a\u7406"},{"location":"algor/graph/mst/#kruskal","text":"\u57fa\u672c\u601d\u60f3\u662f\u7ef4\u62a4\u56fe\u7684\u6700\u5c0f\u751f\u6210\u68ee\u6797\u3002 \u5f00\u59cb\u7684\u65f6\u5019\u751f\u6210\u68ee\u6797\u662f\u7a7a\u7684\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u9897\u72ec\u7acb\u7684\u6811\u3002 \u7136\u540e\u7528\u7ed3\u8bba \\(2\\) \u7ef4\u62a4\u68ee\u6797\uff0c\u5229\u7528 dsu \u7ef4\u62a4\u8054\u901a\u6027\u3002 \u6309\u7167\u8fb9\u6743\u5347\u5e8f\u6392\u4e2a\u5e8f\uff0c\u7136\u540e\u626b\u4e00\u904d\u6bcf\u4e2a\u8fb9\u3002 \u5982\u679c\u5f53\u524d\u626b\u5230\u7684\u8fd9\u6761\u8fb9\u6240\u8fde\u7684\u4e24\u4e2a\u70b9 \\((u,v)\\) \u5df2\u7ecf\u8054\u901a\u4e86\u3002\u90a3\u4e48\u8df3\u8fc7\u3002 \u5982\u679c\u4e0d\u662f\u8054\u901a\u7684\uff0c\u6839\u636e\u8fd9\u4e00\u6761\uff1a \u8fd9\u4e2a\u751f\u6210\u6811\u4e00\u5b9a\u5305\u542b \\(|E|-k\\) \u6761\u8fb9\u91cc\u9762\u8fde\u63a5\u751f\u6210\u68ee\u6797\u7684 \u4e24\u4e2a\u4e0d\u8fde\u901a\u8282\u70b9 \u7684\u6743\u503c\u6700\u5c0f\u7684\u8fb9\u3002 \u628a\u8fd9\u4e00\u6761\u8fb9\u52a0\u5165\u5230\u6700\u5c0f\u751f\u6210\u6811\u91cc\uff0c\u987a\u4fbf\u5408\u5e76\u4e00\u4e0b \\((u,v)\\) Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 struct Edge { int x , y , z ; inline bool operator < ( const Edge & b ) const { return z < b . z ; } } a [ si_m ]; struct Dsu { int pa [ si_n ]; Dsu (){ for ( register int i = 1 ; i <= 1e2 + 10 ; ++ i ) pa [ i ] = i ; } inline int root ( int x ){ if ( pa [ x ] != x ) return pa [ x ] = root ( pa [ x ]); return pa [ x ]; } inline bool same ( int x , int y ){ return root ( x ) == root ( y ); } inline void Union ( int x , int y ){ int rx = root ( x ), ry = root ( y ); if ( rx == ry ) return ; pa [ rx ] = ry ; } } dsu ; int main (){ cin >> n >> m ; for ( register int i = 1 ; i <= m ; ++ i ){ cin >> a [ i ]. x >> a [ i ]. y >> a [ i ]. z ; } sort ( a + 1 , a + 1 + m ); int ans = 0 ; for ( register int i = 1 ; i <= m ; ++ i ){ if ( dsu . same ( a [ i ]. x , a [ i ]. y )) continue ; dsu . Union ( a [ i ]. x , a [ i ]. y ), ans += a [ i ]. z ; } cout << ans << endl ; return 0 ; } \u590d\u6742\u5ea6 \\(\\text{O}(m \\log m)\\) \u3002","title":"Kruskal \u7b97\u6cd5"},{"location":"algor/graph/mst/#prim","text":"\u4e00\u822c\u7528\u4e8e\u7a20\u5bc6\u56fe\u3002 \u6700\u5f00\u59cb\u786e\u5b9a \\(1\\) \u53f7\u8282\u70b9\u5c5e\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u3002 \u6bcf\u4e00\u6b21\u627e\u5230\u4e00\u6761\u6743\u503c\u6700\u5c0f\u7684\uff0c\u4e14\u6ee1\u8db3\u5b83\u8fde\u63a5\u7684\u5176\u4e2d\u4e00\u4e2a\u70b9 \\(u\\) \u5df2\u7ecf\u88ab\u9009\u5165\u6700\u5c0f\u751f\u6210\u6811\u91cc\uff0c\u53e6\u4e00\u4e2a\u70b9 \\(v\\) \u5219\u672a\u88ab\u9009\u4e2d\u7684\u8fb9\u3002 \u5177\u4f53\u5b9e\u73b0\uff1a \u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4 \\(dis\\) ,\u5982\u679c \\(u\\) \u6ca1\u6709\u88ab\u9009\u5165\uff0c\u90a3\u4e48 \\(dis_u\\) \u5c31\u7b49\u4e8e \\(u\\) \u548c\u5df2\u7ecf\u88ab\u9009\u4e2d\u70b9\u4e4b\u95f4\u7684\u8fde\u8fb9\u4e2d\u6743\u503c\u6700\u5c0f\u7684\u8fb9\u7684\u6743\u503c\u3002 \u53cd\u4e4b \\(dis_u\\) \u5c31\u7b49\u4e8e \\(u\\) \u88ab\u9009\u4e2d\u7684\u65f6\u5019\u9009\u51fa\u6765\u90a3\u6761\u6743\u503c\u6700\u5c0f\u8fb9\u7684\u6743\u503c\u3002 \u5982\u4f55\u5224\u662f\u5426\u9009\u4e2d\u5462\uff1f \u7ef4\u62a4\u4e00\u4e2a \\(vis\\) \u5373\u53ef\u3002\u4ece\u6ca1\u6709\u88ab\u9009\u4e2d\u7684\u8282\u70b9\u5f53\u4e2d\u9009\u51fa\u4e00\u4e2a \\(dis\\) \u6700\u5c0f\u7684\uff0c\u6807\u8bb0\u5b83\u3002 \u626b\u63cf\u548c\u8fd9\u4e2a\u88ab\u9009\u70b9\u7684\u6240\u6709\u51fa\u8fb9\uff0c\u66f4\u65b0\u53e6\u5916\u4e00\u4e2a\u7aef\u70b9\u7684 \\(dis\\) \u3002 \u6700\u540e\u751f\u6210\u6811\u7684\u6743\u503c\u548c\u5c31\u662f \\(\\sum\\limits^{n}_{i=2} dis_i\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 inline void Prim (){ memset ( vis , false , sizeof vis ), memset ( dis , 0x3f , sizeof dis ); dis [ 1 ] = 0 ; for ( register int i = 1 ; i < n ; ++ i ){ int x = 0 ; for ( register int j = 1 ; j <= n ; ++ j ){ if ( ! vis [ j ] && ( x == 0 || dis [ j ] < dis [ x ])) x = j ; } vis [ x ] = true ; for ( register int y = 1 ; y <= n ; ++ y ) if ( ! vis [ y ]) dis [ y ] = min ( dis [ y ], a [ x ][ y ]); } } int main (){ cin >> n ; memset ( a , 0x3f , sizeof a ); for ( register int i = 1 ; i < n ; ++ i ){ a [ i ][ i ] = 0 ; for ( register int j = 1 ; j <= n ; ++ j ){ int value ; cin >> value ; a [ i ][ j ] = a [ j ][ i ] = min ( a [ i ][ j ], value ); } } Prim (); int ans = 0 ; for ( register int i = 2 ; i <= n ; ++ i ) ans += dis [ i ]; return printf ( \"%d \\n \" , ans ), 0 ; } \u590d\u6742\u5ea6 \\(\\text{O}(n^2)\\) \uff0c\u53ef\u4ee5\u7528\u4e8c\u53c9\u5806\u4f18\u5316\u5230 \\(\\text{O}(m \\log n)\\) \uff0c\u4f46\u4e0d\u5982\u76f4\u63a5 Kruskal\u3002","title":"Prim \u7b97\u6cd5"},{"location":"algor/graph/mst/#kruskal_1","text":"\u4e00\u4e2a\u795e\u5947\u7684\u79d1\u6280\uff0c\u56e0\u4e3a \\(\\texttt{8102ION}\\text{\u5f52\u7a0b}\\) \u8fd9\u9053\u51fa\u4e86\u540d\u7684\u9898\uff0c\u800c\u88ab\u4e16\u4eba\u6240\u77e5\uff08 \u8fd9\u4e2a\u4e1c\u897f\u57fa\u4e8e \\(\\texttt{Kruskal}\\) \u5b9e\u73b0\u3002 \u5b83\u5177\u6709\u975e\u5e38\u591a\u4f18\u96c5\u7684\u6027\u8d28\u3002 \u505a\u6cd5\u662f\u5728\u8dd1 \\(\\texttt{Kruskal}\\) \u5bf9\u4e8e\u4e0d\u5728\u540c\u4e00\u96c6\u5408\u7684\u4e24\u4e2a\u70b9 \\((u,v)\\) \u8fde\u8fb9\u7684\u65f6\u5019\uff0c\u6211\u4eec\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9 \\(k\\) \uff0c\u4ee4 \\((u,v)\\) \u5206\u522b\u6240\u5728\u7684\u96c6\u5408\u7684\u6839 \\(r_u,r_v\\) \u5206\u522b\u4f5c\u4e3a \\(k\\) \u7684\u5de6\u53f3\u513f\u5b50\u3002 \u5e76\u4e14\u6211\u4eec\u628a \\(k\\) \u4f5c\u4e3a \\(S_u,S_v\\) \u4e24\u4e2a\u96c6\u5408\u5408\u5e76\u4e4b\u540e\u7684\u6839\u3002 \u7136\u540e\u628a \\(k\\) \u7684\u70b9\u6743\u7f6e\u4e3a \\(\\delta(u,v)\\) \u7684\u6743\u503c\u3002 \u8dd1\u5b8c \\(\\texttt{Kruskal}\\) \u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u9897\u4f18\u7f8e\u7684\u91cd\u6784\u6811\u3002 \u4ed6\u6ee1\u8db3\u4ee5\u4e0b\u6027\u8d28\uff1a (\u53ea\u8003\u8651\u65b0\u8282\u70b9)\u6839\u636e\u6784\u9020\u8fc7\u7a0b\uff0c \\(\\texttt{Kruskal}\\) \u91cd\u6784\u6811\u662f\u4e00\u9897\u4e8c\u53c9\u6811\uff0c\u5e76\u7b26\u5408\u4e8c\u53c9\u5806\u7684\u6027\u8d28\u3002 \u539f\u6765\u7684 \u6700\u5c0f\u751f\u6210\u6811 \u4e24\u70b9\u95f4\u7684\u7684\u6700\u5927\u8fb9\u6743\u5c31\u662f \\(\\texttt{Kruskal}\\) \u91cd\u6784\u6811\u4e0a\u4e24\u70b9\u7684 \\(\\text{Lca}\\) \u7684\u6743\u503c\u3002 \u91cd\u6784\u6811\u4e2d\u4ee3\u8868\u539f\u6811\u4e2d\u7684\u70b9\u7684\u8282\u70b9\u5168\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u5176\u4f59\u8282\u70b9\u90fd\u4ee3\u8868\u4e86\u4e00\u6761\u8fb9\u7684\u8fb9\u6743\u3002 \u7136\u540e\u5b9e\u9645\u4e0a\u6240\u6709\u65b0\u5efa\u7684\u70b9 \\(k\\) \u7684\u542b\u4e49\u5c31\u662f\uff1a \u5982\u679c \\(k\\) \u7684\u5de6\u53f3\u5b50\u6811\u4e2d\u7684\u70b9\u60f3\u8981\u4e92\u901a\uff0c\u5fc5\u987b\u8981\u8d70\u81f3\u5c11\u4e00\u6761\u8fb9\u6743\u7b49\u4e8e\u8fd9\u4e2a\u70b9\u6743 \\(w_k\\) \u7684\u8fb9\u3002 \u6709\u4ec0\u4e48\u7528\u5462\uff1f \u5047\u8bbe\u6211\u4eec\u4e00\u5f00\u59cb\u7684\u65f6\u5019\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u4e5f\u5c31\u662f\u6c42\u6700\u5c0f\u751f\u6210\u6811\u3002 \u90a3\u4e48\u6211\u4eec\u641e\u51fa\u6765\u7684\u91cd\u6784\u6811\u4e0a\u7684 \\(\\text{Lca}(u,v)\\) \u5c31\u4ee3\u8868 \u539f\u56fe \u5f53\u4e2d \\(u\\to v\\) \u7684\u6240\u6709\u7b80\u5355\u8def\u5f84\u7684\u8fb9\u5f53\u4e2d\u7684 \u6700\u5927\u8fb9\u7684\u6700\u5c0f\u503c \u3002 \u6bd4\u5982\u8bf4\u4f60\u539f\u56fe\u4e0a \\(1\\to 4\\) \u6709\u4e24\u6761\u8def\u5f84\uff0c\u4ed6\u4eec\u5206\u522b\u662f \\(1 \\to 2 \\to 4,1\\to 3 \\to 4\\) \u7136\u540e\u8fb9\u6743\u662f \\(w(1,2)=1,w(1,3)=2,w(3,4)=3,w(2,4)=4\\) \u3002 \u90a3\u4e48\u7b2c\u4e00\u6761\u8def\u5f84\u7684\u6700\u5927\u8fb9\u662f \\(4\\) \uff0c\u7b2c\u4e8c\u6761\u7684\u6700\u5927\u8fb9\u662f \\(3\\) \u3002 \u90a3\u4e48 \u7b80\u5355\u8def\u5f84\u7684\u8fb9\u5f53\u4e2d\u7684\u6700\u5927\u8fb9\u7684\u6700\u5c0f\u503c\u3002 \u8fd9\u53e5\u8bdd\u7684\u610f\u601d\u5c31\u662f \\(\\min(3,4)=3\\) \u3002 \u63a8\u5e7f\u4e00\u4e0b\u5c31\u662f \\(\\min\\limits_{i=1}^{cnt}(\\max \\{w(uu,vv)\\}), (uu,vv \\in \\forall \\delta(u,v))\\) \\(cnt\\) \u662f\u7b80\u5355\u8def\u5f84\u6570\u3002 \u624b\u5143\u4e00\u4e0b\uff1a \u8fd9\u4e2a\u5730\u65b9\u662f\u7f51\u4e0a\u5f88\u591a\u535a\u5ba2\u90fd\u5199\u9519\u4e86\u7684\uff0c\u5f88\u660e\u663e\u5c31\u662f\u76f4\u63a5\u6284\u522b\u4eba\u7684\u7136\u540e\u4e00\u76f4\u6284\u4e0b\u53bb\u641e\u5f97\u5f88\u591a\u90fd\u662f\u9519\u7684\uff08 \u597d\u50cf OI wiki \u8fd9\u4e2a\u65f6\u5019\uff0821/8/22\uff09 \u4e5f\u662f\u9519\u7684\u3002 \u7136\u540e\u6700\u5927\u751f\u6210\u6811\u5012\u8fc7\u6765\u5c31\u884c\u4e86\u3002 \u6bd4\u5982\u91cd\u6784\u6811\u7684 \\(\\text{Lca}(u,v)\\) \u4ee3\u8868\u7684\u5c31\u662f\u6700\u5927\u751f\u6210\u6811\u4e0a \\((u,v)\\) \u4e24\u70b9\u4e4b\u95f4\u8def\u5f84\u7684\u5c0f\u8fb9\u3002 \u7136\u540e\u539f\u56fe\u4e0a\u5c31\u662f\u6700\u5c0f\u8fb9\u6700\u5927\u3002 \u6765\u4e00\u9053\u9898\u7406\u89e3\uff1a","title":"Kruskal \u91cd\u6784\u6811"},{"location":"algor/graph/mst/#noip2013","text":"A\u56fd\u6709 \\(n\\) \u5ea7\u57ce\u5e02\uff0c\u7f16\u53f7\u4ece \\(1\\) \u5230 \\(n\\) \uff0c\u57ce\u5e02\u4e4b\u95f4\u6709 \\(m\\) \u6761\u53cc\u5411\u9053\u8def\u3002\u6bcf\u4e00\u6761\u9053\u8def\u5bf9\u8f66\u8f86\u90fd\u6709\u91cd\u91cf\u9650\u5236\uff0c\u7b80\u79f0\u9650\u91cd\u3002 \u73b0\u5728\u6709 \\(q\\) \u8f86\u8d27\u8f66\u5728\u8fd0\u8f93\u8d27\u7269\uff0c \u53f8\u673a\u4eec\u60f3\u77e5\u9053\u6bcf\u8f86\u8f66\u5728\u4e0d\u8d85\u8fc7\u8f66\u8f86\u9650\u91cd\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u591a\u80fd\u8fd0\u591a\u91cd\u7684\u8d27\u7269\u3002 \u5c31\u662f \u6700\u5927\u751f\u6210\u6811 \u4e2d\u7684 \\((u,v)\\) \u4e4b\u95f4\u7684\u8def\u5f84\u7684\u6700\u5c0f\u8fb9\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 #include <bits/stdc++.h> using namespace std ; const int si_n = 1e4 + 10 ; const int si_m = 5e4 + 10 ; int n , m , q ; struct Kruskal { int u , v , w ; bool operator < ( const Kruskal & b ) const { return w > b . w ; } //\u6700\u5927\u751f\u6210\u6811 } e [ si_m << 1 ]; int pa [ si_n << 1 ]; int root ( int x ){ if ( pa [ x ] != x ) return pa [ x ] = root ( pa [ x ]); return pa [ x ]; } struct Tree { int ver , head , Next ; } t [ si_m << 1 ]; int cnt = 0 , tot = n ; //\u4e00\u5b9a\u6ce8\u610f\u8fd9\u91cc\u8d4b\u503c\u662f\u6ca1\u7528\u7684\uff0c\u8981\u5728\u4e3b\u51fd\u6570\u91cc\u8bfb\u5165n\u4e4b\u540e\u518d\u8d4b\u503c\uff01 void add ( int u , int v ){ t [ ++ cnt ]. ver = v , t [ cnt ]. Next = t [ u ]. head ; t [ u ]. head = cnt ; } int val [ si_n << 1 ]; bool vis [ si_n << 1 ]; int f [ si_n << 1 ][ 20 ], dep [ si_n << 1 ]; void dfs ( int i , int fa ){ dep [ i ] = dep [ fa ] + 1 ; f [ i ][ 0 ] = fa , vis [ i ] = true ; for ( register int j = 1 ; j < 18 ; ++ j ){ f [ i ][ j ] = f [ f [ i ][ j -1 ]][ j -1 ]; } for ( register int j = t [ i ]. head ; j ; j = t [ j ]. Next ){ int v = t [ j ]. ver ; if ( v == fa ) continue ; dfs ( v , i ); } } int lca ( int u , int v ){ if ( dep [ u ] < dep [ v ]) swap ( u , v ); for ( register int i = 19 ; i >= 0 ; -- i ){ if ( dep [ f [ u ][ i ]] >= dep [ v ]) u = f [ u ][ i ]; } if ( u == v ) return u ; for ( register int i = 19 ; i >= 0 ; -- i ){ if ( f [ u ][ i ] != f [ v ][ i ]){ u = f [ u ][ i ], v = f [ v ][ i ]; } } return f [ u ][ 0 ]; } void insert ( int u , int v , int w ){ int k =++ tot ; val [ k ] = w ; int ru = root ( u ), rv = root ( v ); add ( k , ru ), add ( ru , k ); add ( k , rv ), add ( rv , k ); pa [ k ] = pa [ ru ] = pa [ rv ] = k ; //\u5148\u52a0\u8fb9\u540e\u5408\u5e76 } int main (){ memset ( vis , false , sizeof vis ); scanf ( \"%d%d\" , & n , & m ); tot = n ; // qwq for ( register int i = 1 ; i <= n ; ++ i ){ pa [ i ] = i ; } for ( register int i = 1 ; i <= m ; ++ i ){ int u , v , w ; scanf ( \"%d%d%d\" , & u , & v , & w ); e [ i ] = ( Kruskal ){ u , v , w }; } sort ( e + 1 , e + 1 + m ); for ( register int i = 1 ; i <= m ; ++ i ){ int ru = root ( e [ i ]. u ), rv = root ( e [ i ]. v ); if ( ru != rv ) insert ( e [ i ]. u , e [ i ]. v , e [ i ]. w ); } for ( register int i = 1 ; i <= tot ; ++ i ){ if ( ! vis [ i ]) dfs ( root ( i ), 0 ); } // \u9632\u6b62\u4e0d\u8fde\u901a // for(register int i=1;i<=tot;++i){ // cout<<val[i]<<\" \"; // } // puts(\"\"); scanf ( \"%d\" , & q ); while ( q -- ){ int l , r ; scanf ( \"%d%d\" , & l , & r ); if ( root ( l ) != root ( r )) puts ( \"-1\" ); else printf ( \"%d \\n \" , val [ lca ( l , r )]); } return 0 ; } \u7136\u540e\u53ef\u4ee5\u53d1\u73b0\u8fd9\u7c7b\u95ee\u9898\u7684\u6838\u5fc3\uff1a \u82e5\u4e00\u4e2a\u70b9\u80fd\u901a\u8fc7\u4e00\u6761\u8def\u5f84\u5230\u8fbe\uff0c\u90a3\u4e48\u6211\u4eec\u8d70\u6700\u5c0f\uff08\u5927\uff09\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u4e5f\u4e00\u5b9a\u80fd\u5230\u8fbe\u8be5\u8282\u70b9\u3002","title":"[NOIP2013]\u8d27\u8f66\u8fd0\u8f93"},{"location":"algor/graph/negative-ring-and-difference-constraint/","text":"\u8d1f\u73af \u03c8(\uff40\u2207\u00b4)\u03c8 \u5927\u6982\u5c31\u662f\u56fe\u4e0a\u7684\u4e00\u4e2a\u73af\uff0c\u73af\u4e0a\u6240\u6709\u8fb9\u7684\u6743\u503c\u4e4b\u548c\u662f\u8d1f\u6570\u3002 \u6b63\u5e38\u8dd1\u6700\u77ed\u8def\u7684\u8bdd\u5c31\u4f1a\u5728\u4e0a\u9762\u65e0\u9650\u8f6c\u4e0b\u53bb\u3002 \u5904\u7406\u7684\u65f6\u5019\u53ef\u4ee5\u5229\u7528 Bellmanford \u548c SPFA \u7684\u6027\u8d28\u6765\u5224\u65ad\u3002 \u73b0\u5728\u5728\u6b63\u5e38\u7684\u6700\u77ed\u8def\u4e0a\u7528\u4e0b\u9762\u7684\u4e24\u79cd\u65b9\u5f0f\u4e4b\u4e00\u8fdb\u884c\u5224\u5b9a\uff1a \u5982\u679c\u6709\u4e00\u4e2a\u70b9\u88ab\u8fed\u4ee3\u4e86\u4e0d\u5c11\u4e8e \\(n\\) \u6b21\uff08\u5165\u961f\u4e0d\u5c11\u4e8e \\(n\\) \u6b21\uff09\uff0c\u90a3\u4e48\u56fe\u4e2d\u5fc5\u7136\u5b58\u5728\u8d1f\u73af\u3002 \u5982\u679c\u6e90\u70b9\u5230\u67d0\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u6709\u4e0d\u5c11\u4e8e \\(n\\) \u6761\u8fb9\uff0c\u90a3\u4e48\u56fe\u4e2d\u5fc5\u7136\u5b58\u5728\u8d1f\u73af\u3002 1 \u5f88\u597d\u7406\u89e3\uff0c\u88ab\u5165\u961f\u4e86\u4e0d\u5c11\u4e8e \\(n\\) \u6b21\uff0c\u5c31\u8bf4\u660e\u65e0\u8bba\u5982\u4f55\u8fed\u4ee3\uff0c\u59cb\u7ec8\u5b58\u5728\u81f3\u5c11\u4e00\u6761\u8fb9\u6ee1\u8db3\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\uff0c\u5728\u6700\u77ed\u8def\u5f53\u4e2d\u5bf9\u5e94\u7684\u5c31\u662f\u8d1f\u73af\u3002 2 \u4e5f\u5dee\u4e0d\u591a\uff0c\u4e00\u4e2a \\(n\\) \u4e2a\u70b9\uff0c \\(n\\) \u6761\u8fb9\u7684\u8054\u901a\u56fe\u5fc5\u7136\u662f\u5b58\u5728\u73af\u7684\uff08\u597d\u50cf\u63cf\u8ff0\u6709\u70b9\u95ee\u9898\uff09\uff0c\u6700\u77ed\u8def\u662f\u4e2a\u73af\uff0c\u90a3\u4e48\u5fc5\u7136\u662f\u51fa\u73b0\u4e86\u8d1f\u73af\u3002 \u901a\u5e38\u6765\u8bf4\u7b2c\u4e8c\u79cd\u505a\u6cd5\u6548\u7387\u66f4\u9ad8\uff0c\u6bd4\u5982 1 1 -> 2 , 2 -> 3 , 3 -> 4 , 4 -> 5 , ..., n -1 -> n , n -> 1 \u8fd9\u79cd\u56fe\uff0c1 \u7684\u505a\u6cd5\u5c31\u8981\u8fed\u4ee3 \\(\\text{O}(n^2)\\) \u7ea7\u522b\u6b21\uff0c2 \u53ea\u9700\u8981 \\(n\\) \u6b21\u3002 \u8fd8\u6709\u4e00\u79cd\u4f18\u5316\u662f\u628a std::queue \u6362\u6210 std::stack \u3002 \u53e6\u5916\u4e00\u79cd \u4e0d\u4e00\u5b9a\u6b63\u786e \u7684\u5361\u65f6 trick \u662f\uff0c\u5f53\u6240\u6709\u8282\u70b9\u7684\u603b\u5165\u961f\u6b21\u6570\u8d85\u8fc7\u67d0\u4e2a\u8bbe\u5b9a\u503c\u7684\u65f6\u5019\uff0c\u5c31\u76f4\u63a5 \u8ba4\u4e3a \u56fe\u4e2d\u5b58\u5728\u8d1f\u73af\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include <bits/stdc++.h> using namespace std ; constexpr int si_n = 5e2 + 10 ; constexpr int si_m = 5e3 + 2e2 + 10 ; int n , m , q ; int T , tot = 0 ; struct Edge { int head , Next , ver , w ; } e [ si_m ]; inline void add ( int u , int v , int w ){ e [ ++ tot ]. ver = v , e [ tot ]. Next = e [ u ]. head , e [ u ]. head = tot , e [ tot ]. w = w ; } int dis [ si_n ], cnt [ si_n ]; bool vis [ si_n ]; std :: queue < int > Q ; inline bool spfa ( int s ){ memset ( dis , 0 , sizeof dis ), memset ( cnt , 0 , sizeof cnt ), memset ( vis , false , sizeof vis ); for ( register int i = 1 ; i <= n ; ++ i ){ Q . push ( i ), vis [ i ] = true ; } cnt [ s ] = 0 ; // \u5168\u90e8\u5165\u961f\uff0c\u76f8\u5f53\u4e8e\u5efa\u7acb\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\u3002 while ( ! Q . empty ()){ int u = Q . front (); Q . pop (); vis [ u ] = false ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( dis [ v ] > dis [ u ] + w ){ dis [ v ] = dis [ u ] + w ; cnt [ v ] = cnt [ u ] + 1 ; if ( cnt [ v ] >= n ) return true ; if ( ! vis [ v ]) Q . push ( v ), vis [ v ] = true ; } } } return false ; } \u8fd8\u6709\uff0c\u5982\u679c\u53ea\u662f\u5224\u5b9a\u8d1f\u73af\u7684\u8bdd\uff0c \\(dis\\) \u521d\u59cb\u5316\u6210\u591a\u5c11\u90fd\u662f\u6ca1\u6709\u95ee\u9898\u7684\u3002 \u6362\u6210\u5224\u65ad\u6b63\u73af\u7684\u8bdd\uff0c\u6c42\u6700\u957f\u8def\u5373\u53ef\u3002 \u5dee\u5206\u7ea6\u675f \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e00\u4e2a\u4e0d\u7b49\u5f0f\u7ec4\uff0c\u6bcf\u4e2a\u4e0d\u7b49\u5f0f\u5f62\u5982 \\(x_i \\le x_j +C_k\\) \uff0c\u5176\u4e2d \\(C_k\\) \u662f\u5e38\u6570\uff08\u6b63\u8d1f\u5747\u53ef\uff09\uff0c \\(i,j\\) \u662f\u81ea\u53d8\u91cf\u3002 \u95ee\u4e00\u7ec4\u53ef\u884c\u89e3 \\(x_1,x_2 \\dots x_n\\) \u3002 \u4e0d\u7b49\u5f0f\u957f\u7684\u5f88\u50cf\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\uff0c\u6240\u4ee5\u8003\u8651\u5229\u7528\u56fe\u8bba\u5206\u6790\u3002 \u6bd4\u5982 \\(x_i\\le x_j +C_k\\) \uff0c\u53ef\u4ee5\u770b\u4f5c \\(j\\to i\\) \u7684\u8def\u5f84\u4e0a\u6709\u4e00\u6761\u6743\u503c\u662f \\(C_k\\) \u7684\u8fb9\u3002 \u6700\u7ec8\u6ee1\u8db3\u6761\u4ef6\u65f6\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u6240\u6709\u7c7b\u4f3c \\(x_i > x_j+C_k\\) \u7684\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\u90fd\u4e0d\u6210\u7acb\uff0c\u4e5f\u5c31\u662f\u6c42\u5b8c\u6700\u77ed\u8def\u4e4b\u540e\u7684\u60c5\u51b5\u3002 \u6b64\u65f6\uff0c\u4ece\u6e90\u70b9\u51fa\u53d1\u5230\u6bcf\u4e2a\u70b9\u7684 \\(dis_i\\) \u5c31\u662f\u5bf9\u5e94\u7684 \\(x_i\\) \uff0c \\(dis\\) \u5c31\u662f\u4e00\u7ec4\u53ef\u884c\u89e3\u3002 \u5982\u679c\u56fe\u4e2d\u5b58\u5728\u8d1f\u73af\uff0c\u90a3\u4e48\u5728\u73af\u4e0a\u8f6c\u4e00\u5708\u4e4b\u540e\u5fc5\u7136\u4f1a\u51fa\u73b0 \\(x_i \\le x_i +\\sum C_k , \\sum C_k <0\\) \u7684\u60c5\u51b5\uff0c\u6b64\u65f6\u77db\u76fe\uff08\u8fd9\u4e2a\u4e0d\u7b49\u5f0f\u76f8\u5f53\u4e8e \\(x_i < x_i\\) \uff09\uff0c\u65e0\u89e3\u3002 \u5982\u679c\u73b0\u5728\u8981\u6c42\u7684\u4e0d\u7b49\u5f0f\u53d8\u6210\u4e86 \\(x_i \\ge x_j + C_k\\) \uff0c\u8dd1\u6700\u957f\u8def\u5373\u53ef\uff0c\u65e0\u89e3\u53d8\u6210\u5224\u65ad\u6b63\u73af\u3002 \u5f53\u7136\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6240\u6709\u7684\u4e0d\u7b49\u5f0f\u90fd\u7684\u5f97\u5230\u6ee1\u8db3\uff0c\u9700\u8981\u627e\u5230\u4e00\u4e2a\u80fd\u591f\u4ece\u5b83\u51fa\u53d1\uff0c\u7ecf\u8fc7\u6240\u6709 \u8fb9 \u7684\u6e90\u70b9\u8fdb\u884c SPFA\uff0c\u8fd9\u4e2a\u5efa\u7acb\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\u5c31\u884c\u4e86\u3002 \u4e0d\u8fc7\uff0c\u5982\u679c\u9898\u76ee\u8981\u6c42\u4e86\u7c7b\u4f3c \\(\\forall i,x_i>0\\) \u7684\u8981\u6c42\uff0c\u4e14\u8fd8\u8981\u6c42\u6700\u5c0f\u7684\u8bdd\uff0c\u5c31\u9700\u8981\u8fde\u8fb9\u800c\u4e0d\u662f\u5168\u90e8\u653e\u5230\u961f\u5217\u91cc\u9762\u4e86\uff0c\u8fb9\u6743\u6839\u636e\u9898\u76ee\u5224\u65ad\uff0c\u6bd4\u5982\u524d\u9762\u7684\u4f8b\u5b50\u5c31\u9700\u8981\u7ed9\u6bcf\u4e00\u4e2a\u70b9\u8fde \\(0 \\to i,w=1\\) \uff0c\u7136\u540e\u8ba9 \\(dis_0=0\\) \u3002 \u5982\u679c\u51fa\u73b0 \\(x_i \\le C_k\\) \u8fd9\u79cd\u6761\u4ef6\uff0c\u8ba9 \\(x_i\\) \u548c\u8d85\u7ea7\u6e90\u70b9\u8fde \\(C_k\\) \u7684\u8fb9\u5c31\u53ef\u4ee5\u4e86\u3002 \\(< >\\) \u53ef\u4ee5\u7528 \\(+-1\\) \u6765\u53d8\u5316\u6210 \\(\\le \\ge\\) \u3002 \\(=\\) \u7b49\u4ef7\u4e8e \\(\\le \\land\\ge\\) \u3002 \u5982\u679c\u5728\u9898\u76ee\u91cc\u9047\u5230 \\(\\ge \\le\\) \u540c\u65f6\u51fa\u73b0\uff0c\u53d8\u6362\u65b9\u5411\uff0c\u79fb\u52a8 \\(C_k\\) \u5373\u53ef\u3002","title":"\u8d1f\u73af & \u5dee\u5206\u7ea6\u675f"},{"location":"algor/graph/negative-ring-and-difference-constraint/#_1","text":"\u5927\u6982\u5c31\u662f\u56fe\u4e0a\u7684\u4e00\u4e2a\u73af\uff0c\u73af\u4e0a\u6240\u6709\u8fb9\u7684\u6743\u503c\u4e4b\u548c\u662f\u8d1f\u6570\u3002 \u6b63\u5e38\u8dd1\u6700\u77ed\u8def\u7684\u8bdd\u5c31\u4f1a\u5728\u4e0a\u9762\u65e0\u9650\u8f6c\u4e0b\u53bb\u3002 \u5904\u7406\u7684\u65f6\u5019\u53ef\u4ee5\u5229\u7528 Bellmanford \u548c SPFA \u7684\u6027\u8d28\u6765\u5224\u65ad\u3002 \u73b0\u5728\u5728\u6b63\u5e38\u7684\u6700\u77ed\u8def\u4e0a\u7528\u4e0b\u9762\u7684\u4e24\u79cd\u65b9\u5f0f\u4e4b\u4e00\u8fdb\u884c\u5224\u5b9a\uff1a \u5982\u679c\u6709\u4e00\u4e2a\u70b9\u88ab\u8fed\u4ee3\u4e86\u4e0d\u5c11\u4e8e \\(n\\) \u6b21\uff08\u5165\u961f\u4e0d\u5c11\u4e8e \\(n\\) \u6b21\uff09\uff0c\u90a3\u4e48\u56fe\u4e2d\u5fc5\u7136\u5b58\u5728\u8d1f\u73af\u3002 \u5982\u679c\u6e90\u70b9\u5230\u67d0\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u6709\u4e0d\u5c11\u4e8e \\(n\\) \u6761\u8fb9\uff0c\u90a3\u4e48\u56fe\u4e2d\u5fc5\u7136\u5b58\u5728\u8d1f\u73af\u3002 1 \u5f88\u597d\u7406\u89e3\uff0c\u88ab\u5165\u961f\u4e86\u4e0d\u5c11\u4e8e \\(n\\) \u6b21\uff0c\u5c31\u8bf4\u660e\u65e0\u8bba\u5982\u4f55\u8fed\u4ee3\uff0c\u59cb\u7ec8\u5b58\u5728\u81f3\u5c11\u4e00\u6761\u8fb9\u6ee1\u8db3\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\uff0c\u5728\u6700\u77ed\u8def\u5f53\u4e2d\u5bf9\u5e94\u7684\u5c31\u662f\u8d1f\u73af\u3002 2 \u4e5f\u5dee\u4e0d\u591a\uff0c\u4e00\u4e2a \\(n\\) \u4e2a\u70b9\uff0c \\(n\\) \u6761\u8fb9\u7684\u8054\u901a\u56fe\u5fc5\u7136\u662f\u5b58\u5728\u73af\u7684\uff08\u597d\u50cf\u63cf\u8ff0\u6709\u70b9\u95ee\u9898\uff09\uff0c\u6700\u77ed\u8def\u662f\u4e2a\u73af\uff0c\u90a3\u4e48\u5fc5\u7136\u662f\u51fa\u73b0\u4e86\u8d1f\u73af\u3002 \u901a\u5e38\u6765\u8bf4\u7b2c\u4e8c\u79cd\u505a\u6cd5\u6548\u7387\u66f4\u9ad8\uff0c\u6bd4\u5982 1 1 -> 2 , 2 -> 3 , 3 -> 4 , 4 -> 5 , ..., n -1 -> n , n -> 1 \u8fd9\u79cd\u56fe\uff0c1 \u7684\u505a\u6cd5\u5c31\u8981\u8fed\u4ee3 \\(\\text{O}(n^2)\\) \u7ea7\u522b\u6b21\uff0c2 \u53ea\u9700\u8981 \\(n\\) \u6b21\u3002 \u8fd8\u6709\u4e00\u79cd\u4f18\u5316\u662f\u628a std::queue \u6362\u6210 std::stack \u3002 \u53e6\u5916\u4e00\u79cd \u4e0d\u4e00\u5b9a\u6b63\u786e \u7684\u5361\u65f6 trick \u662f\uff0c\u5f53\u6240\u6709\u8282\u70b9\u7684\u603b\u5165\u961f\u6b21\u6570\u8d85\u8fc7\u67d0\u4e2a\u8bbe\u5b9a\u503c\u7684\u65f6\u5019\uff0c\u5c31\u76f4\u63a5 \u8ba4\u4e3a \u56fe\u4e2d\u5b58\u5728\u8d1f\u73af\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include <bits/stdc++.h> using namespace std ; constexpr int si_n = 5e2 + 10 ; constexpr int si_m = 5e3 + 2e2 + 10 ; int n , m , q ; int T , tot = 0 ; struct Edge { int head , Next , ver , w ; } e [ si_m ]; inline void add ( int u , int v , int w ){ e [ ++ tot ]. ver = v , e [ tot ]. Next = e [ u ]. head , e [ u ]. head = tot , e [ tot ]. w = w ; } int dis [ si_n ], cnt [ si_n ]; bool vis [ si_n ]; std :: queue < int > Q ; inline bool spfa ( int s ){ memset ( dis , 0 , sizeof dis ), memset ( cnt , 0 , sizeof cnt ), memset ( vis , false , sizeof vis ); for ( register int i = 1 ; i <= n ; ++ i ){ Q . push ( i ), vis [ i ] = true ; } cnt [ s ] = 0 ; // \u5168\u90e8\u5165\u961f\uff0c\u76f8\u5f53\u4e8e\u5efa\u7acb\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\u3002 while ( ! Q . empty ()){ int u = Q . front (); Q . pop (); vis [ u ] = false ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( dis [ v ] > dis [ u ] + w ){ dis [ v ] = dis [ u ] + w ; cnt [ v ] = cnt [ u ] + 1 ; if ( cnt [ v ] >= n ) return true ; if ( ! vis [ v ]) Q . push ( v ), vis [ v ] = true ; } } } return false ; } \u8fd8\u6709\uff0c\u5982\u679c\u53ea\u662f\u5224\u5b9a\u8d1f\u73af\u7684\u8bdd\uff0c \\(dis\\) \u521d\u59cb\u5316\u6210\u591a\u5c11\u90fd\u662f\u6ca1\u6709\u95ee\u9898\u7684\u3002 \u6362\u6210\u5224\u65ad\u6b63\u73af\u7684\u8bdd\uff0c\u6c42\u6700\u957f\u8def\u5373\u53ef\u3002","title":"\u8d1f\u73af"},{"location":"algor/graph/negative-ring-and-difference-constraint/#_2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e0d\u7b49\u5f0f\u7ec4\uff0c\u6bcf\u4e2a\u4e0d\u7b49\u5f0f\u5f62\u5982 \\(x_i \\le x_j +C_k\\) \uff0c\u5176\u4e2d \\(C_k\\) \u662f\u5e38\u6570\uff08\u6b63\u8d1f\u5747\u53ef\uff09\uff0c \\(i,j\\) \u662f\u81ea\u53d8\u91cf\u3002 \u95ee\u4e00\u7ec4\u53ef\u884c\u89e3 \\(x_1,x_2 \\dots x_n\\) \u3002 \u4e0d\u7b49\u5f0f\u957f\u7684\u5f88\u50cf\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\uff0c\u6240\u4ee5\u8003\u8651\u5229\u7528\u56fe\u8bba\u5206\u6790\u3002 \u6bd4\u5982 \\(x_i\\le x_j +C_k\\) \uff0c\u53ef\u4ee5\u770b\u4f5c \\(j\\to i\\) \u7684\u8def\u5f84\u4e0a\u6709\u4e00\u6761\u6743\u503c\u662f \\(C_k\\) \u7684\u8fb9\u3002 \u6700\u7ec8\u6ee1\u8db3\u6761\u4ef6\u65f6\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u6240\u6709\u7c7b\u4f3c \\(x_i > x_j+C_k\\) \u7684\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\u90fd\u4e0d\u6210\u7acb\uff0c\u4e5f\u5c31\u662f\u6c42\u5b8c\u6700\u77ed\u8def\u4e4b\u540e\u7684\u60c5\u51b5\u3002 \u6b64\u65f6\uff0c\u4ece\u6e90\u70b9\u51fa\u53d1\u5230\u6bcf\u4e2a\u70b9\u7684 \\(dis_i\\) \u5c31\u662f\u5bf9\u5e94\u7684 \\(x_i\\) \uff0c \\(dis\\) \u5c31\u662f\u4e00\u7ec4\u53ef\u884c\u89e3\u3002 \u5982\u679c\u56fe\u4e2d\u5b58\u5728\u8d1f\u73af\uff0c\u90a3\u4e48\u5728\u73af\u4e0a\u8f6c\u4e00\u5708\u4e4b\u540e\u5fc5\u7136\u4f1a\u51fa\u73b0 \\(x_i \\le x_i +\\sum C_k , \\sum C_k <0\\) \u7684\u60c5\u51b5\uff0c\u6b64\u65f6\u77db\u76fe\uff08\u8fd9\u4e2a\u4e0d\u7b49\u5f0f\u76f8\u5f53\u4e8e \\(x_i < x_i\\) \uff09\uff0c\u65e0\u89e3\u3002 \u5982\u679c\u73b0\u5728\u8981\u6c42\u7684\u4e0d\u7b49\u5f0f\u53d8\u6210\u4e86 \\(x_i \\ge x_j + C_k\\) \uff0c\u8dd1\u6700\u957f\u8def\u5373\u53ef\uff0c\u65e0\u89e3\u53d8\u6210\u5224\u65ad\u6b63\u73af\u3002 \u5f53\u7136\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6240\u6709\u7684\u4e0d\u7b49\u5f0f\u90fd\u7684\u5f97\u5230\u6ee1\u8db3\uff0c\u9700\u8981\u627e\u5230\u4e00\u4e2a\u80fd\u591f\u4ece\u5b83\u51fa\u53d1\uff0c\u7ecf\u8fc7\u6240\u6709 \u8fb9 \u7684\u6e90\u70b9\u8fdb\u884c SPFA\uff0c\u8fd9\u4e2a\u5efa\u7acb\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\u5c31\u884c\u4e86\u3002 \u4e0d\u8fc7\uff0c\u5982\u679c\u9898\u76ee\u8981\u6c42\u4e86\u7c7b\u4f3c \\(\\forall i,x_i>0\\) \u7684\u8981\u6c42\uff0c\u4e14\u8fd8\u8981\u6c42\u6700\u5c0f\u7684\u8bdd\uff0c\u5c31\u9700\u8981\u8fde\u8fb9\u800c\u4e0d\u662f\u5168\u90e8\u653e\u5230\u961f\u5217\u91cc\u9762\u4e86\uff0c\u8fb9\u6743\u6839\u636e\u9898\u76ee\u5224\u65ad\uff0c\u6bd4\u5982\u524d\u9762\u7684\u4f8b\u5b50\u5c31\u9700\u8981\u7ed9\u6bcf\u4e00\u4e2a\u70b9\u8fde \\(0 \\to i,w=1\\) \uff0c\u7136\u540e\u8ba9 \\(dis_0=0\\) \u3002 \u5982\u679c\u51fa\u73b0 \\(x_i \\le C_k\\) \u8fd9\u79cd\u6761\u4ef6\uff0c\u8ba9 \\(x_i\\) \u548c\u8d85\u7ea7\u6e90\u70b9\u8fde \\(C_k\\) \u7684\u8fb9\u5c31\u53ef\u4ee5\u4e86\u3002 \\(< >\\) \u53ef\u4ee5\u7528 \\(+-1\\) \u6765\u53d8\u5316\u6210 \\(\\le \\ge\\) \u3002 \\(=\\) \u7b49\u4ef7\u4e8e \\(\\le \\land\\ge\\) \u3002 \u5982\u679c\u5728\u9898\u76ee\u91cc\u9047\u5230 \\(\\ge \\le\\) \u540c\u65f6\u51fa\u73b0\uff0c\u53d8\u6362\u65b9\u5411\uff0c\u79fb\u52a8 \\(C_k\\) \u5373\u53ef\u3002","title":"\u5dee\u5206\u7ea6\u675f"},{"location":"algor/graph/sssp/","text":"\u6982\u8ff0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4e00\u5f20\u5e26\u6743\u56fe\uff0c\u95ee\u4ece\u67d0\u4e2a\u70b9\u5230\u5176\u5b83\u6240\u6709\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u3002 \u5982\u679c\u662f\u65e0\u6743\u56fe\u53ef\u4ee5\u7528 BFS\u3002 \u5982\u679c\u662f\u53ea\u6709 0/1 \u8fb9\u6743\u7684\u53ef\u4ee5\u4f7f\u7528\u53cc\u7aef\u961f\u5217 BFS\u3002 \u5982\u679c\u662f\u5e26\u6743\u7684\u5355\u6e90\u6700\u77ed\u8def\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u6839\u636e\u56fe\u7684\u6027\u8d28\u9009\u62e9 Dijkstra, Spfa, BellmanFord\u3002 \u5982\u679c\u662f\u7a20\u5bc6\u56fe\uff0c\u5e76\u4e14\u8981\u6c42\u5168\u6e90\u6700\u77ed\u8def\uff0c\u5728 \\(n\\) \u6bd4\u8f83\u5c0f\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528 Floyd. Johnson \u4e0d\u5e38\u7528\uff0c\u4e0d\u63d0\u4e86\u3002 \u5355\u6e90\u6700\u77ed\u8def\u7684\u65f6\u5019\u4e00\u822c\u4f7f\u7528 \\(dis_i\\) \u8868\u793a\u4ece\u8d77\u70b9 \\(s\\) \u5230 \\(i\\) \u7684\u6700\u77ed\u8def\u3002 \u5168\u6e90\u7684\u65f6\u5019\u4e00\u822c\u7528 \\(dis_{i,j}\\) \u8868\u793a\u4ece \\(i\\to j\\) \u7684\u6700\u77ed\u8def\u3002 \u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\u662f \\(dis_v>dis_u+w(u,v)\\) \u3002 \u4e00\u822c\u4f1a\u5728\u6ee1\u8db3\u4e0d\u7b49\u5f0f\u7684\u65f6\u5019\u4ee4 \\(dis_v=dis_u+w(u,v)\\) \u3002 Dijkstra \u7b97\u6cd5 \u03c8(\uff40\u2207\u00b4)\u03c8 \u601d\u8def\u5f88\u7b80\u5355\uff0c\u9996\u5148\u7528\u4e00\u4e2a\u6570\u7ec4 \\(vis\\) \u6807\u8bb0\u67d0\u4e2a\u8282\u70b9\u662f\u5426\u88ab\u66f4\u65b0\u8fc7\u3002 \u521d\u59cb\u5316\u4ee4 \\(dis_s=0\\) \uff0c\u5176\u5b83\u7684\u8bbe\u6210 \\(+ \\infty\\) \u3002 \u6bcf\u6b21\u627e\u627e\u5230\u4e00\u4e2a\u6ca1\u6709\u88ab\u6807\u8bb0\u7684\uff0c \\(dis\\) \u6700\u5c0f\u7684\u8282\u70b9 \\(x\\) \uff0c\u6807\u8bb0\u8fd9\u4e2a\u8282\u70b9\u3002 \u7136\u540e\u626b\u63cf \\(x\\) \u7684\u6240\u6709\u51fa\u8fb9\uff0c\u5229\u7528\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\u66f4\u65b0\u5b83\u80fd\u5230\u8fbe\u7684\u6240\u6709\u8282\u70b9\u7684 \\(dis\\) \u3002 \u76f4\u5230\u6240\u6709\u8282\u70b9\u88ab\u6807\u8bb0\u5b8c\u4e3a\u6b62\u3002 \u590d\u6742\u5ea6 \\(\\text{O}(n^2)\\) \u3002 \u4f18\u5316\uff1a\u8003\u8651\u5229\u7528\u4e00\u4e2a\u5c0f\u6839\u5806\uff0c\u6bcf\u6b21\u53d6\u51fa\u6839\u8fdb\u884c\u66f4\u65b0\u5373\u53ef\uff0c\u5f53\u67d0\u4e2a\u8282\u70b9\u88ab\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\u66f4\u65b0\u7684\u65f6\u5019\u5c06\u5176\u653e\u5165\u5806\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 std :: priority_queue < pair < int , int >> q ; inline void dijkstra ( int s ){ memset ( vis , false , sizeof vis ), memset ( dis , 0x3f , sizeof dis ); dis [ s ] = 0 , q . push ({ dis [ s ], s }); while ( ! q . empty ()){ int u = q . top (). second ; q . pop (); if ( vis [ u ]) continue ; vis [ u ] = true ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( dis [ v ] > dis [ u ] + w ) dis [ v ] = dis [ u ] + w , q . push ({ - dis [ v ], v }); //\u5229\u7528\u76f8\u53cd\u6570\u628a\u5927\u6839\u5806->\u5c0f\u6839\u5806 // \u4e00\u5b9a\u8981\u5148\u66f4\u65b0 dis[v] \u518d q.push } } } \u5728\u975e DAG \u4e0a\u51fa\u73b0\u8d1f\u8fb9\u6743\u5c31\u4e0d\u80fd\u7528\u3002 Bellman Ford \u7b97\u6cd5 \u03c8(\uff40\u2207\u00b4)\u03c8 \u601d\u60f3\u4e5f\u5f88\u7b80\u5355\u3002 \u626b\u63cf\u6240\u6709\u8fb9\uff0c\u5982\u679c\u626b\u63cf\u5230\u7684\u8fd9\u6761\u8fb9\u6ee1\u8db3\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\uff0c\u66f4\u65b0\u5bf9\u5e94\u8282\u70b9\u7684 \\(dis\\) \u3002 \u91cd\u590d\u8fed\u4ee3\uff0c\u76f4\u5230\u6ca1\u6709\u66f4\u65b0\u64cd\u4f5c\u53d1\u751f\uff0c\u590d\u6742\u5ea6 \\(\\text{O}(nm)\\) \u3002 Spfa \u03c8(\uff40\u2207\u00b4)\u03c8 \u961f\u5217\u4f18\u5316\u7684 BellmanFord\uff0c\u6709\u8d1f\u8fb9\u6743\u4e5f\u6ca1\u6709\u5f71\u54cd\u3002 \u8003\u8651\u4f7f\u7528\u4e00\u4e2a\u961f\u5217\uff0c\u6700\u5f00\u59cb\u7684\u65f6\u5019\u961f\u5217\u53ea\u5305\u542b\u8d77\u70b9\u3002 \u6bcf\u6b21\u53d6\u51fa\u961f\u5934\uff0c\u626b\u63cf\u961f\u5934\u7684\u6240\u6709\u51fa\u8fb9\uff0c\u5982\u679c\u6ee1\u8db3\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\u5219\u66f4\u65b0\u3002 \u5982\u679c\u88ab\u66f4\u65b0\u7684\u8282\u70b9\u4e0d\u5728\u961f\u5217\u91cc\u9762\uff0c\u628a\u88ab\u66f4\u65b0\u7684\u8282\u70b9\u63d2\u5165\u961f\u5c3e\u3002 \u76f4\u5230\u961f\u5217\u4e3a\u7a7a\uff0c\u590d\u6742\u5ea6 \\(\\text{O}(km)\\) \u3002 \\(k\\) \u662f\u4e2a\u6bd4\u8f83\u5c0f\u7684\u5e38\u6570\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 std :: queue < int > q ; inline void spfa ( int s ){ memset ( vis , false , sizeof vis ), memset ( dis , 0x3f , sizeof dis ); dis [ s ] = 0 , q . push ( s ), vis [ s ] = true ; while ( ! q . empty ()){ int u = q . front (); q . pop (); vis [ u ] = false ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( dis [ v ] > dis [ u ] + w ){ dis [ v ] = dis [ u ] + w ; if ( ! vis [ v ]) q . push ( v ), vis [ v ] = true ; } } } } \u8fd9\u4e2a\u7b97\u6cd5\u5bb9\u6613\u88ab\u5361\uff0c\u6bd4\u5982\u83ca\u82b1\u56fe\u548c\u84b2\u516c\u82f1\u5c31\u968f\u4fbf\u5361SPFA\u3002 \u6240\u4ee5\u7ed9\u4e00\u4e2a\u4f18\u5316\u3002 Spfa + SLF + Swap \u03c8(\uff40\u2207\u00b4)\u03c8 \u81f3\u5c11\u662f\u6211\u89c9\u5f97\u6700\u6709\u6548\u7684\u4f18\u5316\u3002 \u867d\u7136\u8fd8\u662f\u88ab @fstqwq \u5b66\u957f\u5728 zhihu \u4e0a\u548c\u4e00\u5806\u795e\u4ed9\u53c9\u7206\u4e86\u3002 \u8003\u8651\u7528\u4e00\u4e2a\u53cc\u7aef\u961f\u5217\u4f18\u5316\uff0c\u6bcf\u6b21\u5c06\u5165\u961f\u7ed3\u70b9\u7684 \\(dis\\) \u548c\u961f\u9996\u6bd4\u8f83\uff0c\u5982\u679c\u66f4\u5927\u5219\u63d2\u5165\u81f3\u961f\u5c3e\uff0c\u5426\u5219\u63d2\u5165\u961f\u9996\u3002 \u8fd9\u662f\u666e\u901a\u7684 SLF\uff0c\u66f4\u52a0\u4f18\u79c0\u7684\u65b9\u5f0f\u662f\u52a0\u4e0a swap\uff0c\u6bcf\u6b21\u68c0\u67e5\u961f\u5934\u662f\u5426\u5c0f\u4e8e\u961f\u5c3e\uff0c\u5982\u679c\u4e0d\u662f\u7684\u8bdd\u4ea4\u6362\u961f\u5934\u548c\u961f\u5c3e\u3002 \u76f4\u63a5\u6539\u4e00\u4e0b\u961f\u5217\u7684\u5b9e\u73b0\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 struct SLF_Swap { std :: deque < int > dq ; SLF_Swap (){ dq . clear (); } inline void push ( int x ){ if ( ! dq . empty ()){ if ( dis [ x ] < dis [ dq . front ()]) dq . push_front ( x ); else dq . push_back ( x ); if ( dis [ dq . front ()] > dis [ dq . back ()]) swap ( dq . front (), dq . back ()); // \u8fd9\u91cc\u7684\u4e24\u91cd if \u53ef\u4ee5\u4fdd\u8bc1\u53ea\u4f1a\u5728\u81f3\u5c11\u6709\u4e24\u4e2a\u5143\u7d20\u7684\u65f6\u5019\u624d\u4ea4\u6362\u3002 } else dq . push_back ( x ); } inline void pop (){ dq . pop_front (); if ( ! dq . empty () && dis [ dq . front ()] > dis [ dq . back ()]) swap ( dq . front (), dq . back ()); } inline int size (){ return dq . size (); } inline int front (){ return dq . front (); } inline bool empty (){ return ! dq . size (); } } q ; Floyd \u7b97\u6cd5 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e0d\u80fd\u6709\u8d1f\u73af\uff0c\u56e0\u4e3a Floyd \u8981\u6c42\u6700\u77ed\u8def\u5fc5\u987b\u5b58\u5728\u3002 \u4f46\u662f Floyd \u53ef\u4ee5\u5224\u65ad\u8d1f\u73af\uff0c \u5148\u521d\u59cb\u5316\u6240\u6709 \\(dis = +\\infty,dis[i][i] = 0\\) \u3002 \u53ea\u8981\u8dd1\u5b8c\u4e4b\u540e\u5b58\u5728 \\(dis[i][i] < 0\\) \uff0c\u5373\u5b58\u5728\u8d1f\u73af\u3002 \u8003\u8651\u52a8\u6001\u89c4\u5212\u3002 \u8bbe \\(dis_{i,j,k}\\) \u8868\u793a\u4ece \\(i \\to j\\) \uff0c\u7ecf\u8fc7\u82e5\u5e72\u4e2a\u6807\u53f7\u4e0d\u8d85\u8fc7 \\(k\\) \u7684\u8282\u70b9\u7684\u6700\u77ed\u8def\u957f\u5ea6\u3002 \u53ef\u4ee5\u5206\u4e24\u4e2a\u90e8\u5206\u8f6c\u79fb\uff0c\u7b2c\u4e00\u4e2a\u90e8\u5206\u662f \\(dis_{i,j,k-1}\\) \uff0c\u7b2c\u4e8c\u4e2a\u90e8\u5206\u662f \\(i\\to k \\to j\\) \u524d\u8005\u662f\u76f4\u63a5\u4ece \\(i \\to j\\) \uff0c\u7ecf\u8fc7\u8282\u70b9\u7f16\u53f7\u4e0d\u8d85\u8fc7 \\(k-1\\) \uff0c\u540e\u8005\u662f\u5148\u4ece \\(i\\) \u5230 \\(k\\) \u4e4b\u540e\u518d\u5230 \\(j\\) \u3002 \u6240\u4ee5 \\(dis_{i,j,k}=\\min(dis_{i,j,k-1},dis_{i,k,k-1}+dis_{k,j,k-1})\\) \u8fd9\u91cc \\(k\\) \u662f\u9636\u6bb5\uff0c\u6240\u4ee5\u653e\u5728\u6700\u5916\u5c42\u3002 \u53d1\u73b0\u8fd9\u73a9\u610f\u513f\u53ea\u548c\u4e0a\u4e00\u5c42\u6709\u5173\uff0c\u7ecf\u8fc7\u5206\u6790\u53ef\u4ee5\u53d1\u73b0\uff0c\u80fd\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\uff0c\u53ef\u4ee5\u76f4\u63a5\u53bb\u6389\u7b2c\u4e09\u7ef4\u3002 \u4f46\u662f\u65b9\u7a0b\u8981\u7a0d\u5fae\u6539\u53d8\u4e00\u4e0b 1 2 3 4 5 6 7 for ( register int k = 1 ; k <= n ; ++ k ){ for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= n ; ++ j ){ dis [ i ][ j ] = min ( dis [ i ][ j ], dis [ i ][ k ] + dis [ k ][ j ]); } } } // \u4e0d\u8981\u5fd8\u8bb0\u521d\u59cb\u5316. \u4e00\u822c\u9700\u8981\u7528\u5230\u975e\u677f\u5b50\u7684Floyd \u7684\u65f6\u5019\uff0c\u90fd\u9700\u8981\u8003\u8651\u4f7f\u7528 \\(k\\) \u8fd9\u4e2a\u4e1c\u897f\u7684\u6027\u8d28\u3002 \u6bd4\u5982\u8981\u6c42\u6700\u5c0f\u73af\uff0c\u6070\u597d \\(X\\) \u6761\u8fb9\u7684\u6700\u77ed\u8def\u7684\u65f6\u5019\u5c31\u9700\u8981\u7528\u8fd9\u4e2a\u8003\u8651\u3002 \u66f4\u591a\u7684\u65f6\u5019\u662f\u628a \\(k\\) \u5f53\u4f5c \u4e2d\u95f4 \u70b9\u3002 \u6700\u77ed\u8def\u7684\u4e00\u4e9b\u6269\u5c55\u5e94\u7528 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6216\u8005\u8bf4\u662f\u4e00\u4e9b\u6bd4\u8f83\u6709\u610f\u601d\u7684\u6280\u5de7\u3002 \u53e6\u5916\u4e00\u90e8\u5206\u4f1a\u5728\u9898\u76ee\u603b\u7ed3\u91cc\u9762\u63d0\u5230\u3002 Floyd \u5904\u7406\u4f20\u9012\u95ed\u5305 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60\u4e00\u4e9b\u5143\u7d20\u548c\u4e00\u4e9b\u5177\u6709\u4f20\u9012\u6027\u7684\u4e8c\u5143\u5173\u7cfb\uff0c\u901a\u8fc7\u4f20\u9012\u6027\u63a8\u5bfc\u51fa\u66f4\u591a\u7684\u5173\u7cfb\u3002 \u6700\u7b80\u5355\u7684\u4f8b\u5b50\u5c31\u662f \\(A<B\\) \u8fd9\u79cd\u5173\u7cfb\u3002 \u8bbe \\(f_{i,j}\\) \u8868\u793a \\(i,j\\) \u4e4b\u95f4\u662f\u5426\u6709\u8fd9\u79cd\u4e8c\u5143\u7684\u4f20\u9012\u5173\u7cfb\u3002 \u5982\u679c\u6ee1\u8db3 \\(i < j\\) \uff08\u6b64\u5904\u7684\u5c0f\u4e8e\u4ee3\u6307\u4e8c\u5143\u5173\u7cfb\uff09\u3002 \u90a3\u4e48 \\(f_{i,j}=true\\) \uff0c\u53cd\u4e4b \\(f_{i,j}=false\\) \u3002 \u8dd1\u4e00\u904d Floyd \u5c31\u53ef\u4ee5\u5f97\u5230\u6240\u6709\u80fd\u63a8\u51fa\u7684\u5173\u7cfb\u3002 1 2 3 4 5 6 7 for ( register int k = 1 ; k <= n ; ++ k ){ for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= n ; ++ j ){ f [ i ][ j ] |= ( f [ i ][ k ] && f [ k ][ j ]); } } } Floyd \u5904\u7406\u65e0\u5411\u56fe\u6700\u5c0f\u73af \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u6c42\u56fe\u4e0a\u7684\u6700\u5c0f\u73af\uff0c\u8981\u6c42\u73af\u81f3\u5c11\u662f\u4e09\u5143\u73af\u3002 \u8003\u8651 Floyd \u5916\u5c42\u5faa\u73af\u521a\u521a\u5f00\u59cb\u7684\u65f6\u5019 \\(dis_{i,j}\\) \u662f\u4ec0\u4e48\u3002 \u660e\u663e\uff0c\u662f\uff1a\u201c\u7ecf\u8fc7\u82e5\u5e72\u4e2a\u7f16\u53f7\u4e0d\u8d85\u8fc7 \\(k-1\\) \u7684\u8282\u70b9\uff0c\u7531 \\(i \\to j\\) \u7684\u6700\u77ed\u8def\u201d\u3002 \u628a \\(k\\) \u5f53\u4f5c\u4e2d\u95f4\u70b9\uff0c\u4ece \\(i\\to j \\to k \\to i\\) \u5c31\u662f\u4e00\u4e2a\u73af\u3002 \u7528\u5f0f\u5b50\u8868\u8fbe\u8fd9\u4e2a\u5c31\u662f \\(dis_{i,j}+a_{j,k}+a_{k,i}\\) \uff08\u6b64\u65f6\u8fd8\u6ca1\u6709\u5bf9 \\(k\\) \u8fd9\u4e00\u5c42\u7684 \\(dis\\) \u8fdb\u884c\u66f4\u65b0\uff09 \u5bf9\u6240\u6709\u7684\u8fd9\u4e2a\u5f0f\u5b50\u53d6\u6700\u5c0f\u503c\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u3002 \u867d\u7136\u5bf9\u4e8e\u6bcf\u4e2a \\(k\\) \uff0c\u8fd9\u4e2a\u7b97\u6cd5\u53ea\u6c42\u7684\u6807\u53f7\u4e0d\u8d85\u8fc7 \\(k\\) \u7684\u8282\u70b9\u6784\u6210\u7684\u6700\u5c0f\u73af\uff0c\u4f46\u662f\u4e4b\u540e\u7684 \\(k\\) \u662f\u4f1a\u8003\u8651\u5230\u7684\uff0c\u6240\u4ee5\u7b97\u6cd5\u662f\u6b63\u786e\u7684\u3002 \u5982\u679c\u8981\u8f93\u51fa\u65b9\u6848\u7684\u8bdd\uff0c\u8bb0\u5f55 \\(pos_{i,j}\\) \u8868\u793a\u4f7f \\(dis_{i,j}\\) \u6700\u540e\u53d1\u751f\u66f4\u65b0\u7684 \\(k\\) \uff0c dp \u5b8c\u4e4b\u540e\u641e\u4e00\u4e0b\u9012\u5f52\u8f93\u51fa\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 std :: vector < int > ans_path ; inline void gopath ( int u , int v ){ if ( pos [ u ][ v ] == 0 ) return ; gopath ( u , pos [ u ][ v ]), ans_path . push_back ( pos [ u ][ v ]), gopath ( pos [ u ][ v ], v ); } // go through the path from u to v; signed main (){ cin >> n >> m ; memset ( a , 0x3f , sizeof a ); for ( register int i = 1 ; i <= n ; ++ i ) a [ i ][ i ] = 0 ; for ( register int i = 1 ; i <= m ; ++ i ){ int u , v , w ; cin >> u >> v >> w ; a [ u ][ v ] = min ( a [ u ][ v ], w ), a [ v ][ u ] = a [ u ][ v ]; } memcpy ( dis , a , sizeof a ); int ans = 0x3f3f3f3f3f3f3f3f , tmp = ans ; for ( register int k = 1 ; k <= n ; ++ k ){ for ( register int i = 1 ; i < k ; ++ i ){ // \u6ce8\u610f\u662fdp\u4e4b\u524d\uff0c\u6b64\u65f6 dis \u8fd8\u662f k-1 \u7684\u65f6\u5019\u7684\u72b6\u6001\u3002 for ( register int j = i + 1 ; j < k ; ++ j ){ if ( a [ j ][ k ] < tmp / 2 && a [ k ][ i ] < tmp / 2 && ans > dis [ i ][ j ] + a [ j ][ k ] + a [ k ][ i ]){ ans = dis [ i ][ j ] + a [ j ][ k ] + a [ k ][ i ]; ans_path . clear (), ans_path . push_back ( i ), gopath ( i , j ); ans_path . push_back ( j ), ans_path . push_back ( k ); } // \u4e0d\u5224\u7684\u8bdd a[j][k]+a[k][i] \u6709\u53ef\u80fd\u7206\uff0c\u5bfc\u81f4\u7b54\u6848\u51fa\u9519\u3002 } } // \u66f4\u65b0\u6700\u5c0f\u73af\u53d6min\u7684\u8fc7\u7a0b for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= n ; ++ j ){ if ( dis [ i ][ j ] > dis [ i ][ k ] + dis [ k ][ j ]) pos [ i ][ j ] = k , dis [ i ][ j ] = dis [ i ][ k ] + dis [ k ][ j ]; } } // \u6b63\u5e38\u7684 Floyd } if ( ans == 0x3f3f3f3f3f3f3f3f ) return puts ( \"No solution.\" ), 0 ; for ( auto x : ans_path ) cout << x << \" \" ; return puts ( \"\" ), 0 ; } \u6700\u77ed\u8def\u8ba1\u6570 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e2a\u73a9\u610f\u513f Floyd\uff0cSPFA\uff0cDijkstra \u90fd\u662f\u53ef\u4ee5\u505a\u7684\u3002 \u5728\u8dd1\u6700\u77ed\u8def\u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e2a\u6570\u7ec4 \\(cnt[v]\\) \u8868\u793a\u4ece \\(s \\to v\\) \u7684\u6700\u77ed\u8def\u5f84\u6761\u6570\u3002 \u7136\u540e\u6bcf\u6b21\u6700\u77ed\u8def\u88ab\u66f4\u65b0\u7684\u65f6\u5019\u5c31\u66f4\u65b0 \\(cnt\\) \u3002 \u989d\u5916\u7684\uff0c\u5982\u679c\u6700\u77ed\u8def\u957f\u5ea6\u6ca1\u6709\u88ab\u66f4\u65b0\uff0c\u4f46\u662f\u4e09\u89d2\u4e0d\u7b49\u5f0f\u4e2d\u7684 \\(>\\) \u53d8\u6210\u4e86 \\(=\\) \uff0c \u90a3\u4e48\u7ed9 \\(cnt\\) \u52a0\u4e0a\u5f53\u524d\u8f6c\u79fb\u8fc7\u6765\u7684\u70b9\u7684 \\(cnt\\) \u3002 \u8fd9\u4e1c\u897f\u548cDAG\u4e0a\u7684\u8def\u5f84\u8ba1\u6570\u6bd4\u8f83\u50cf\uff0c\u53ea\u4e0d\u8fc7\u6709\u6700\u77ed\u8def\u7684\u9650\u5236\u3002 \u5f53\u7136\uff0c\u8def\u5f84\u6761\u6570\u8fd9\u4e2a\u73a9\u610f\u513f\u662f\u6307\u6570\u7ea7\u522b\u7684\uff0c\u4e00\u822c\u90fd\u4f1a\u8981\u6c42\u53d6\u6a21\u3002 \\(Floyd\\) \u7684\u5b9e\u73b0\u7565\u5fae\u6709\u70b9\u4e0d\u540c\uff0c\u56e0\u4e3a\u662f\u679a\u4e3e\u4e2d\u95f4\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u518d\u7528\u4e00\u6b21\u4e58\u6cd5\u539f\u7406\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 Floyd : ============================================== memset ( dis , 0x3f , sizeof dis ); memset ( cnt , 0 , sizeof cnt ); cin >> n >> m ; for ( int i = 1 ; i <= m ; ++ i ) { int u , v , w ; cin >> u >> v >> w ; dis [ u ][ v ] = dis [ v ][ u ] = min ( dis [ u ][ v ], w ); cnt [ u ][ v ] = cnt [ v ][ u ] = 1 ; } for ( int i = 1 ; i <= n ; ++ i ) dis [ i ][ i ] = 0 ; for ( int k = 1 ; k <= n ; ++ k ) { for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { if ( dis [ i ][ j ] > dis [ i ][ k ] + dis [ k ][ j ]) { dis [ i ][ j ] = dis [ i ][ k ] + dis [ k ][ j ]; cnt [ i ][ j ] = 1l l * cnt [ i ][ k ] * cnt [ k ][ j ]; } else if ( dis [ i ][ j ] == dis [ i ][ k ] + dis [ k ][ j ]) { cnt [ i ][ j ] += 1l l * cnt [ i ][ k ] * cnt [ k ][ j ]; } // \u4e58\u6cd5\u539f\u7406\u8ba1\u6570\u3002 } } } Dijkstra : ============================================== void dijkstra ( int s ) { memset ( vis , false , sizeof vis ); memset ( dis , 0x3f , sizeof dis ); q . push ({ dis [ s ] = 0 , s }), cnt [ 1 ] = 1 ; while ( ! q . empty ()) { int u = q . top (). second ; q . pop (); if ( vis [ u ]) continue ; vis [ u ] = true ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver , w = e [ i ]. w ; if ( dis [ v ] > dis [ u ] + w ) { dis [ v ] = dis [ u ] + w ; cnt [ v ] = cnt [ u ] % mod ; q . push ({ - dis [ v ], v }); } else if ( dis [ v ] == dis [ u ] + w ) { cnt [ v ] = ( cnt [ v ] + cnt [ u ]) % mod ; } } } } int main () { memset ( head , -1 , sizeof head ); memset ( cnt , 0 , sizeof cnt ); cin >> n >> m ; for ( int i = 1 ; i <= m ; ++ i ) { int u , v ; cin >> u >> v ; add ( u , v ), add ( v , u ); } dijkstra ( 1 ); for ( int i = 1 ; i <= n ; ++ i ) { cout << cnt [ i ] << endl ; } return 0 ; }","title":"\u6700\u77ed\u8def"},{"location":"algor/graph/sssp/#_1","text":"\u7ed9\u4e00\u5f20\u5e26\u6743\u56fe\uff0c\u95ee\u4ece\u67d0\u4e2a\u70b9\u5230\u5176\u5b83\u6240\u6709\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u3002 \u5982\u679c\u662f\u65e0\u6743\u56fe\u53ef\u4ee5\u7528 BFS\u3002 \u5982\u679c\u662f\u53ea\u6709 0/1 \u8fb9\u6743\u7684\u53ef\u4ee5\u4f7f\u7528\u53cc\u7aef\u961f\u5217 BFS\u3002 \u5982\u679c\u662f\u5e26\u6743\u7684\u5355\u6e90\u6700\u77ed\u8def\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u6839\u636e\u56fe\u7684\u6027\u8d28\u9009\u62e9 Dijkstra, Spfa, BellmanFord\u3002 \u5982\u679c\u662f\u7a20\u5bc6\u56fe\uff0c\u5e76\u4e14\u8981\u6c42\u5168\u6e90\u6700\u77ed\u8def\uff0c\u5728 \\(n\\) \u6bd4\u8f83\u5c0f\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528 Floyd. Johnson \u4e0d\u5e38\u7528\uff0c\u4e0d\u63d0\u4e86\u3002 \u5355\u6e90\u6700\u77ed\u8def\u7684\u65f6\u5019\u4e00\u822c\u4f7f\u7528 \\(dis_i\\) \u8868\u793a\u4ece\u8d77\u70b9 \\(s\\) \u5230 \\(i\\) \u7684\u6700\u77ed\u8def\u3002 \u5168\u6e90\u7684\u65f6\u5019\u4e00\u822c\u7528 \\(dis_{i,j}\\) \u8868\u793a\u4ece \\(i\\to j\\) \u7684\u6700\u77ed\u8def\u3002 \u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\u662f \\(dis_v>dis_u+w(u,v)\\) \u3002 \u4e00\u822c\u4f1a\u5728\u6ee1\u8db3\u4e0d\u7b49\u5f0f\u7684\u65f6\u5019\u4ee4 \\(dis_v=dis_u+w(u,v)\\) \u3002","title":"\u6982\u8ff0"},{"location":"algor/graph/sssp/#dijkstra","text":"\u601d\u8def\u5f88\u7b80\u5355\uff0c\u9996\u5148\u7528\u4e00\u4e2a\u6570\u7ec4 \\(vis\\) \u6807\u8bb0\u67d0\u4e2a\u8282\u70b9\u662f\u5426\u88ab\u66f4\u65b0\u8fc7\u3002 \u521d\u59cb\u5316\u4ee4 \\(dis_s=0\\) \uff0c\u5176\u5b83\u7684\u8bbe\u6210 \\(+ \\infty\\) \u3002 \u6bcf\u6b21\u627e\u627e\u5230\u4e00\u4e2a\u6ca1\u6709\u88ab\u6807\u8bb0\u7684\uff0c \\(dis\\) \u6700\u5c0f\u7684\u8282\u70b9 \\(x\\) \uff0c\u6807\u8bb0\u8fd9\u4e2a\u8282\u70b9\u3002 \u7136\u540e\u626b\u63cf \\(x\\) \u7684\u6240\u6709\u51fa\u8fb9\uff0c\u5229\u7528\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\u66f4\u65b0\u5b83\u80fd\u5230\u8fbe\u7684\u6240\u6709\u8282\u70b9\u7684 \\(dis\\) \u3002 \u76f4\u5230\u6240\u6709\u8282\u70b9\u88ab\u6807\u8bb0\u5b8c\u4e3a\u6b62\u3002 \u590d\u6742\u5ea6 \\(\\text{O}(n^2)\\) \u3002 \u4f18\u5316\uff1a\u8003\u8651\u5229\u7528\u4e00\u4e2a\u5c0f\u6839\u5806\uff0c\u6bcf\u6b21\u53d6\u51fa\u6839\u8fdb\u884c\u66f4\u65b0\u5373\u53ef\uff0c\u5f53\u67d0\u4e2a\u8282\u70b9\u88ab\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\u66f4\u65b0\u7684\u65f6\u5019\u5c06\u5176\u653e\u5165\u5806\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 std :: priority_queue < pair < int , int >> q ; inline void dijkstra ( int s ){ memset ( vis , false , sizeof vis ), memset ( dis , 0x3f , sizeof dis ); dis [ s ] = 0 , q . push ({ dis [ s ], s }); while ( ! q . empty ()){ int u = q . top (). second ; q . pop (); if ( vis [ u ]) continue ; vis [ u ] = true ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( dis [ v ] > dis [ u ] + w ) dis [ v ] = dis [ u ] + w , q . push ({ - dis [ v ], v }); //\u5229\u7528\u76f8\u53cd\u6570\u628a\u5927\u6839\u5806->\u5c0f\u6839\u5806 // \u4e00\u5b9a\u8981\u5148\u66f4\u65b0 dis[v] \u518d q.push } } } \u5728\u975e DAG \u4e0a\u51fa\u73b0\u8d1f\u8fb9\u6743\u5c31\u4e0d\u80fd\u7528\u3002","title":"Dijkstra \u7b97\u6cd5"},{"location":"algor/graph/sssp/#bellman-ford","text":"\u601d\u60f3\u4e5f\u5f88\u7b80\u5355\u3002 \u626b\u63cf\u6240\u6709\u8fb9\uff0c\u5982\u679c\u626b\u63cf\u5230\u7684\u8fd9\u6761\u8fb9\u6ee1\u8db3\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\uff0c\u66f4\u65b0\u5bf9\u5e94\u8282\u70b9\u7684 \\(dis\\) \u3002 \u91cd\u590d\u8fed\u4ee3\uff0c\u76f4\u5230\u6ca1\u6709\u66f4\u65b0\u64cd\u4f5c\u53d1\u751f\uff0c\u590d\u6742\u5ea6 \\(\\text{O}(nm)\\) \u3002","title":"Bellman Ford \u7b97\u6cd5"},{"location":"algor/graph/sssp/#spfa","text":"\u961f\u5217\u4f18\u5316\u7684 BellmanFord\uff0c\u6709\u8d1f\u8fb9\u6743\u4e5f\u6ca1\u6709\u5f71\u54cd\u3002 \u8003\u8651\u4f7f\u7528\u4e00\u4e2a\u961f\u5217\uff0c\u6700\u5f00\u59cb\u7684\u65f6\u5019\u961f\u5217\u53ea\u5305\u542b\u8d77\u70b9\u3002 \u6bcf\u6b21\u53d6\u51fa\u961f\u5934\uff0c\u626b\u63cf\u961f\u5934\u7684\u6240\u6709\u51fa\u8fb9\uff0c\u5982\u679c\u6ee1\u8db3\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\u5219\u66f4\u65b0\u3002 \u5982\u679c\u88ab\u66f4\u65b0\u7684\u8282\u70b9\u4e0d\u5728\u961f\u5217\u91cc\u9762\uff0c\u628a\u88ab\u66f4\u65b0\u7684\u8282\u70b9\u63d2\u5165\u961f\u5c3e\u3002 \u76f4\u5230\u961f\u5217\u4e3a\u7a7a\uff0c\u590d\u6742\u5ea6 \\(\\text{O}(km)\\) \u3002 \\(k\\) \u662f\u4e2a\u6bd4\u8f83\u5c0f\u7684\u5e38\u6570\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 std :: queue < int > q ; inline void spfa ( int s ){ memset ( vis , false , sizeof vis ), memset ( dis , 0x3f , sizeof dis ); dis [ s ] = 0 , q . push ( s ), vis [ s ] = true ; while ( ! q . empty ()){ int u = q . front (); q . pop (); vis [ u ] = false ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( dis [ v ] > dis [ u ] + w ){ dis [ v ] = dis [ u ] + w ; if ( ! vis [ v ]) q . push ( v ), vis [ v ] = true ; } } } } \u8fd9\u4e2a\u7b97\u6cd5\u5bb9\u6613\u88ab\u5361\uff0c\u6bd4\u5982\u83ca\u82b1\u56fe\u548c\u84b2\u516c\u82f1\u5c31\u968f\u4fbf\u5361SPFA\u3002 \u6240\u4ee5\u7ed9\u4e00\u4e2a\u4f18\u5316\u3002","title":"Spfa"},{"location":"algor/graph/sssp/#spfa-slf-swap","text":"\u81f3\u5c11\u662f\u6211\u89c9\u5f97\u6700\u6709\u6548\u7684\u4f18\u5316\u3002 \u867d\u7136\u8fd8\u662f\u88ab @fstqwq \u5b66\u957f\u5728 zhihu \u4e0a\u548c\u4e00\u5806\u795e\u4ed9\u53c9\u7206\u4e86\u3002 \u8003\u8651\u7528\u4e00\u4e2a\u53cc\u7aef\u961f\u5217\u4f18\u5316\uff0c\u6bcf\u6b21\u5c06\u5165\u961f\u7ed3\u70b9\u7684 \\(dis\\) \u548c\u961f\u9996\u6bd4\u8f83\uff0c\u5982\u679c\u66f4\u5927\u5219\u63d2\u5165\u81f3\u961f\u5c3e\uff0c\u5426\u5219\u63d2\u5165\u961f\u9996\u3002 \u8fd9\u662f\u666e\u901a\u7684 SLF\uff0c\u66f4\u52a0\u4f18\u79c0\u7684\u65b9\u5f0f\u662f\u52a0\u4e0a swap\uff0c\u6bcf\u6b21\u68c0\u67e5\u961f\u5934\u662f\u5426\u5c0f\u4e8e\u961f\u5c3e\uff0c\u5982\u679c\u4e0d\u662f\u7684\u8bdd\u4ea4\u6362\u961f\u5934\u548c\u961f\u5c3e\u3002 \u76f4\u63a5\u6539\u4e00\u4e0b\u961f\u5217\u7684\u5b9e\u73b0\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 struct SLF_Swap { std :: deque < int > dq ; SLF_Swap (){ dq . clear (); } inline void push ( int x ){ if ( ! dq . empty ()){ if ( dis [ x ] < dis [ dq . front ()]) dq . push_front ( x ); else dq . push_back ( x ); if ( dis [ dq . front ()] > dis [ dq . back ()]) swap ( dq . front (), dq . back ()); // \u8fd9\u91cc\u7684\u4e24\u91cd if \u53ef\u4ee5\u4fdd\u8bc1\u53ea\u4f1a\u5728\u81f3\u5c11\u6709\u4e24\u4e2a\u5143\u7d20\u7684\u65f6\u5019\u624d\u4ea4\u6362\u3002 } else dq . push_back ( x ); } inline void pop (){ dq . pop_front (); if ( ! dq . empty () && dis [ dq . front ()] > dis [ dq . back ()]) swap ( dq . front (), dq . back ()); } inline int size (){ return dq . size (); } inline int front (){ return dq . front (); } inline bool empty (){ return ! dq . size (); } } q ;","title":"Spfa + SLF + Swap"},{"location":"algor/graph/sssp/#floyd","text":"\u4e0d\u80fd\u6709\u8d1f\u73af\uff0c\u56e0\u4e3a Floyd \u8981\u6c42\u6700\u77ed\u8def\u5fc5\u987b\u5b58\u5728\u3002 \u4f46\u662f Floyd \u53ef\u4ee5\u5224\u65ad\u8d1f\u73af\uff0c \u5148\u521d\u59cb\u5316\u6240\u6709 \\(dis = +\\infty,dis[i][i] = 0\\) \u3002 \u53ea\u8981\u8dd1\u5b8c\u4e4b\u540e\u5b58\u5728 \\(dis[i][i] < 0\\) \uff0c\u5373\u5b58\u5728\u8d1f\u73af\u3002 \u8003\u8651\u52a8\u6001\u89c4\u5212\u3002 \u8bbe \\(dis_{i,j,k}\\) \u8868\u793a\u4ece \\(i \\to j\\) \uff0c\u7ecf\u8fc7\u82e5\u5e72\u4e2a\u6807\u53f7\u4e0d\u8d85\u8fc7 \\(k\\) \u7684\u8282\u70b9\u7684\u6700\u77ed\u8def\u957f\u5ea6\u3002 \u53ef\u4ee5\u5206\u4e24\u4e2a\u90e8\u5206\u8f6c\u79fb\uff0c\u7b2c\u4e00\u4e2a\u90e8\u5206\u662f \\(dis_{i,j,k-1}\\) \uff0c\u7b2c\u4e8c\u4e2a\u90e8\u5206\u662f \\(i\\to k \\to j\\) \u524d\u8005\u662f\u76f4\u63a5\u4ece \\(i \\to j\\) \uff0c\u7ecf\u8fc7\u8282\u70b9\u7f16\u53f7\u4e0d\u8d85\u8fc7 \\(k-1\\) \uff0c\u540e\u8005\u662f\u5148\u4ece \\(i\\) \u5230 \\(k\\) \u4e4b\u540e\u518d\u5230 \\(j\\) \u3002 \u6240\u4ee5 \\(dis_{i,j,k}=\\min(dis_{i,j,k-1},dis_{i,k,k-1}+dis_{k,j,k-1})\\) \u8fd9\u91cc \\(k\\) \u662f\u9636\u6bb5\uff0c\u6240\u4ee5\u653e\u5728\u6700\u5916\u5c42\u3002 \u53d1\u73b0\u8fd9\u73a9\u610f\u513f\u53ea\u548c\u4e0a\u4e00\u5c42\u6709\u5173\uff0c\u7ecf\u8fc7\u5206\u6790\u53ef\u4ee5\u53d1\u73b0\uff0c\u80fd\u6eda\u52a8\u6570\u7ec4\u4f18\u5316\uff0c\u53ef\u4ee5\u76f4\u63a5\u53bb\u6389\u7b2c\u4e09\u7ef4\u3002 \u4f46\u662f\u65b9\u7a0b\u8981\u7a0d\u5fae\u6539\u53d8\u4e00\u4e0b 1 2 3 4 5 6 7 for ( register int k = 1 ; k <= n ; ++ k ){ for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= n ; ++ j ){ dis [ i ][ j ] = min ( dis [ i ][ j ], dis [ i ][ k ] + dis [ k ][ j ]); } } } // \u4e0d\u8981\u5fd8\u8bb0\u521d\u59cb\u5316. \u4e00\u822c\u9700\u8981\u7528\u5230\u975e\u677f\u5b50\u7684Floyd \u7684\u65f6\u5019\uff0c\u90fd\u9700\u8981\u8003\u8651\u4f7f\u7528 \\(k\\) \u8fd9\u4e2a\u4e1c\u897f\u7684\u6027\u8d28\u3002 \u6bd4\u5982\u8981\u6c42\u6700\u5c0f\u73af\uff0c\u6070\u597d \\(X\\) \u6761\u8fb9\u7684\u6700\u77ed\u8def\u7684\u65f6\u5019\u5c31\u9700\u8981\u7528\u8fd9\u4e2a\u8003\u8651\u3002 \u66f4\u591a\u7684\u65f6\u5019\u662f\u628a \\(k\\) \u5f53\u4f5c \u4e2d\u95f4 \u70b9\u3002","title":"Floyd \u7b97\u6cd5"},{"location":"algor/graph/sssp/#_2","text":"\u6216\u8005\u8bf4\u662f\u4e00\u4e9b\u6bd4\u8f83\u6709\u610f\u601d\u7684\u6280\u5de7\u3002 \u53e6\u5916\u4e00\u90e8\u5206\u4f1a\u5728\u9898\u76ee\u603b\u7ed3\u91cc\u9762\u63d0\u5230\u3002","title":"\u6700\u77ed\u8def\u7684\u4e00\u4e9b\u6269\u5c55\u5e94\u7528"},{"location":"algor/graph/sssp/#floyd_1","text":"\u7ed9\u4f60\u4e00\u4e9b\u5143\u7d20\u548c\u4e00\u4e9b\u5177\u6709\u4f20\u9012\u6027\u7684\u4e8c\u5143\u5173\u7cfb\uff0c\u901a\u8fc7\u4f20\u9012\u6027\u63a8\u5bfc\u51fa\u66f4\u591a\u7684\u5173\u7cfb\u3002 \u6700\u7b80\u5355\u7684\u4f8b\u5b50\u5c31\u662f \\(A<B\\) \u8fd9\u79cd\u5173\u7cfb\u3002 \u8bbe \\(f_{i,j}\\) \u8868\u793a \\(i,j\\) \u4e4b\u95f4\u662f\u5426\u6709\u8fd9\u79cd\u4e8c\u5143\u7684\u4f20\u9012\u5173\u7cfb\u3002 \u5982\u679c\u6ee1\u8db3 \\(i < j\\) \uff08\u6b64\u5904\u7684\u5c0f\u4e8e\u4ee3\u6307\u4e8c\u5143\u5173\u7cfb\uff09\u3002 \u90a3\u4e48 \\(f_{i,j}=true\\) \uff0c\u53cd\u4e4b \\(f_{i,j}=false\\) \u3002 \u8dd1\u4e00\u904d Floyd \u5c31\u53ef\u4ee5\u5f97\u5230\u6240\u6709\u80fd\u63a8\u51fa\u7684\u5173\u7cfb\u3002 1 2 3 4 5 6 7 for ( register int k = 1 ; k <= n ; ++ k ){ for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= n ; ++ j ){ f [ i ][ j ] |= ( f [ i ][ k ] && f [ k ][ j ]); } } }","title":"Floyd \u5904\u7406\u4f20\u9012\u95ed\u5305"},{"location":"algor/graph/sssp/#floyd_2","text":"\u7ed9\u4f60\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u6c42\u56fe\u4e0a\u7684\u6700\u5c0f\u73af\uff0c\u8981\u6c42\u73af\u81f3\u5c11\u662f\u4e09\u5143\u73af\u3002 \u8003\u8651 Floyd \u5916\u5c42\u5faa\u73af\u521a\u521a\u5f00\u59cb\u7684\u65f6\u5019 \\(dis_{i,j}\\) \u662f\u4ec0\u4e48\u3002 \u660e\u663e\uff0c\u662f\uff1a\u201c\u7ecf\u8fc7\u82e5\u5e72\u4e2a\u7f16\u53f7\u4e0d\u8d85\u8fc7 \\(k-1\\) \u7684\u8282\u70b9\uff0c\u7531 \\(i \\to j\\) \u7684\u6700\u77ed\u8def\u201d\u3002 \u628a \\(k\\) \u5f53\u4f5c\u4e2d\u95f4\u70b9\uff0c\u4ece \\(i\\to j \\to k \\to i\\) \u5c31\u662f\u4e00\u4e2a\u73af\u3002 \u7528\u5f0f\u5b50\u8868\u8fbe\u8fd9\u4e2a\u5c31\u662f \\(dis_{i,j}+a_{j,k}+a_{k,i}\\) \uff08\u6b64\u65f6\u8fd8\u6ca1\u6709\u5bf9 \\(k\\) \u8fd9\u4e00\u5c42\u7684 \\(dis\\) \u8fdb\u884c\u66f4\u65b0\uff09 \u5bf9\u6240\u6709\u7684\u8fd9\u4e2a\u5f0f\u5b50\u53d6\u6700\u5c0f\u503c\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u3002 \u867d\u7136\u5bf9\u4e8e\u6bcf\u4e2a \\(k\\) \uff0c\u8fd9\u4e2a\u7b97\u6cd5\u53ea\u6c42\u7684\u6807\u53f7\u4e0d\u8d85\u8fc7 \\(k\\) \u7684\u8282\u70b9\u6784\u6210\u7684\u6700\u5c0f\u73af\uff0c\u4f46\u662f\u4e4b\u540e\u7684 \\(k\\) \u662f\u4f1a\u8003\u8651\u5230\u7684\uff0c\u6240\u4ee5\u7b97\u6cd5\u662f\u6b63\u786e\u7684\u3002 \u5982\u679c\u8981\u8f93\u51fa\u65b9\u6848\u7684\u8bdd\uff0c\u8bb0\u5f55 \\(pos_{i,j}\\) \u8868\u793a\u4f7f \\(dis_{i,j}\\) \u6700\u540e\u53d1\u751f\u66f4\u65b0\u7684 \\(k\\) \uff0c dp \u5b8c\u4e4b\u540e\u641e\u4e00\u4e0b\u9012\u5f52\u8f93\u51fa\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 std :: vector < int > ans_path ; inline void gopath ( int u , int v ){ if ( pos [ u ][ v ] == 0 ) return ; gopath ( u , pos [ u ][ v ]), ans_path . push_back ( pos [ u ][ v ]), gopath ( pos [ u ][ v ], v ); } // go through the path from u to v; signed main (){ cin >> n >> m ; memset ( a , 0x3f , sizeof a ); for ( register int i = 1 ; i <= n ; ++ i ) a [ i ][ i ] = 0 ; for ( register int i = 1 ; i <= m ; ++ i ){ int u , v , w ; cin >> u >> v >> w ; a [ u ][ v ] = min ( a [ u ][ v ], w ), a [ v ][ u ] = a [ u ][ v ]; } memcpy ( dis , a , sizeof a ); int ans = 0x3f3f3f3f3f3f3f3f , tmp = ans ; for ( register int k = 1 ; k <= n ; ++ k ){ for ( register int i = 1 ; i < k ; ++ i ){ // \u6ce8\u610f\u662fdp\u4e4b\u524d\uff0c\u6b64\u65f6 dis \u8fd8\u662f k-1 \u7684\u65f6\u5019\u7684\u72b6\u6001\u3002 for ( register int j = i + 1 ; j < k ; ++ j ){ if ( a [ j ][ k ] < tmp / 2 && a [ k ][ i ] < tmp / 2 && ans > dis [ i ][ j ] + a [ j ][ k ] + a [ k ][ i ]){ ans = dis [ i ][ j ] + a [ j ][ k ] + a [ k ][ i ]; ans_path . clear (), ans_path . push_back ( i ), gopath ( i , j ); ans_path . push_back ( j ), ans_path . push_back ( k ); } // \u4e0d\u5224\u7684\u8bdd a[j][k]+a[k][i] \u6709\u53ef\u80fd\u7206\uff0c\u5bfc\u81f4\u7b54\u6848\u51fa\u9519\u3002 } } // \u66f4\u65b0\u6700\u5c0f\u73af\u53d6min\u7684\u8fc7\u7a0b for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= n ; ++ j ){ if ( dis [ i ][ j ] > dis [ i ][ k ] + dis [ k ][ j ]) pos [ i ][ j ] = k , dis [ i ][ j ] = dis [ i ][ k ] + dis [ k ][ j ]; } } // \u6b63\u5e38\u7684 Floyd } if ( ans == 0x3f3f3f3f3f3f3f3f ) return puts ( \"No solution.\" ), 0 ; for ( auto x : ans_path ) cout << x << \" \" ; return puts ( \"\" ), 0 ; }","title":"Floyd \u5904\u7406\u65e0\u5411\u56fe\u6700\u5c0f\u73af"},{"location":"algor/graph/sssp/#_3","text":"\u8fd9\u4e2a\u73a9\u610f\u513f Floyd\uff0cSPFA\uff0cDijkstra \u90fd\u662f\u53ef\u4ee5\u505a\u7684\u3002 \u5728\u8dd1\u6700\u77ed\u8def\u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e2a\u6570\u7ec4 \\(cnt[v]\\) \u8868\u793a\u4ece \\(s \\to v\\) \u7684\u6700\u77ed\u8def\u5f84\u6761\u6570\u3002 \u7136\u540e\u6bcf\u6b21\u6700\u77ed\u8def\u88ab\u66f4\u65b0\u7684\u65f6\u5019\u5c31\u66f4\u65b0 \\(cnt\\) \u3002 \u989d\u5916\u7684\uff0c\u5982\u679c\u6700\u77ed\u8def\u957f\u5ea6\u6ca1\u6709\u88ab\u66f4\u65b0\uff0c\u4f46\u662f\u4e09\u89d2\u4e0d\u7b49\u5f0f\u4e2d\u7684 \\(>\\) \u53d8\u6210\u4e86 \\(=\\) \uff0c \u90a3\u4e48\u7ed9 \\(cnt\\) \u52a0\u4e0a\u5f53\u524d\u8f6c\u79fb\u8fc7\u6765\u7684\u70b9\u7684 \\(cnt\\) \u3002 \u8fd9\u4e1c\u897f\u548cDAG\u4e0a\u7684\u8def\u5f84\u8ba1\u6570\u6bd4\u8f83\u50cf\uff0c\u53ea\u4e0d\u8fc7\u6709\u6700\u77ed\u8def\u7684\u9650\u5236\u3002 \u5f53\u7136\uff0c\u8def\u5f84\u6761\u6570\u8fd9\u4e2a\u73a9\u610f\u513f\u662f\u6307\u6570\u7ea7\u522b\u7684\uff0c\u4e00\u822c\u90fd\u4f1a\u8981\u6c42\u53d6\u6a21\u3002 \\(Floyd\\) \u7684\u5b9e\u73b0\u7565\u5fae\u6709\u70b9\u4e0d\u540c\uff0c\u56e0\u4e3a\u662f\u679a\u4e3e\u4e2d\u95f4\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u518d\u7528\u4e00\u6b21\u4e58\u6cd5\u539f\u7406\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 Floyd : ============================================== memset ( dis , 0x3f , sizeof dis ); memset ( cnt , 0 , sizeof cnt ); cin >> n >> m ; for ( int i = 1 ; i <= m ; ++ i ) { int u , v , w ; cin >> u >> v >> w ; dis [ u ][ v ] = dis [ v ][ u ] = min ( dis [ u ][ v ], w ); cnt [ u ][ v ] = cnt [ v ][ u ] = 1 ; } for ( int i = 1 ; i <= n ; ++ i ) dis [ i ][ i ] = 0 ; for ( int k = 1 ; k <= n ; ++ k ) { for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { if ( dis [ i ][ j ] > dis [ i ][ k ] + dis [ k ][ j ]) { dis [ i ][ j ] = dis [ i ][ k ] + dis [ k ][ j ]; cnt [ i ][ j ] = 1l l * cnt [ i ][ k ] * cnt [ k ][ j ]; } else if ( dis [ i ][ j ] == dis [ i ][ k ] + dis [ k ][ j ]) { cnt [ i ][ j ] += 1l l * cnt [ i ][ k ] * cnt [ k ][ j ]; } // \u4e58\u6cd5\u539f\u7406\u8ba1\u6570\u3002 } } } Dijkstra : ============================================== void dijkstra ( int s ) { memset ( vis , false , sizeof vis ); memset ( dis , 0x3f , sizeof dis ); q . push ({ dis [ s ] = 0 , s }), cnt [ 1 ] = 1 ; while ( ! q . empty ()) { int u = q . top (). second ; q . pop (); if ( vis [ u ]) continue ; vis [ u ] = true ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver , w = e [ i ]. w ; if ( dis [ v ] > dis [ u ] + w ) { dis [ v ] = dis [ u ] + w ; cnt [ v ] = cnt [ u ] % mod ; q . push ({ - dis [ v ], v }); } else if ( dis [ v ] == dis [ u ] + w ) { cnt [ v ] = ( cnt [ v ] + cnt [ u ]) % mod ; } } } } int main () { memset ( head , -1 , sizeof head ); memset ( cnt , 0 , sizeof cnt ); cin >> n >> m ; for ( int i = 1 ; i <= m ; ++ i ) { int u , v ; cin >> u >> v ; add ( u , v ), add ( v , u ); } dijkstra ( 1 ); for ( int i = 1 ; i <= n ; ++ i ) { cout << cnt [ i ] << endl ; } return 0 ; }","title":"\u6700\u77ed\u8def\u8ba1\u6570"},{"location":"algor/graph/tree-divide/","text":"\u70b9\u5206\u6cbb \u03c8(\uff40\u2207\u00b4)\u03c8 \u6cdb\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 \u70b9\u5206\u6cbb\u4e5f\u53eb\u91cd\u5fc3\u5256\u5206\uff08\u56fd\u5916\u8fd9\u4e48\u53eb\uff09\uff0c\u4e00\u822c\u7528\u6765\u5904\u7406\u4e00\u4e9b\u9759\u6001\u7684\u8def\u5f84\u76f8\u5173\u8be2\u95ee\uff0c\u4e14\u901a\u5e38\u6240\u9700\u7684\u8def\u5f84\uff08\u72b6\u6001\uff09\u6bd4\u8f83\u591a\u3002 \u5176\u601d\u60f3\u662f\uff0c\u6211\u4eec\u5047\u8bbe\u5f53\u524d\u5904\u7406\u5230\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u628a\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u7684\u6240\u6709\u8def\u5f84\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u7ecf\u8fc7\u8fd9\u4e2a\u70b9\u7684\uff0c\u4e00\u7c7b\u662f\u4e0d\u7ecf\u8fc7\u7684\u3002 \u6b64\u65f6\u5229\u7528\u5206\u6cbb\u7684\u601d\u60f3\uff0c\u6211\u4eec\u5904\u7406\u524d\u8005\uff0c\u9012\u5f52\u540e\u8005\u5206\u5272\u5b50\u95ee\u9898\u6700\u7ec8\u8f6c\u5316\u4e3a\u524d\u8005\uff0c\u4f46\u4e3a\u4e86\u4fdd\u8bc1\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u6bcf\u6b21\u5904\u7406\u524d\u8005\uff0c\u9700\u8981\u9009\u62e9\u5f53\u524d\u5b50\u6811\u7684\u91cd\u5fc3\uff0c\u4ee5\u4fdd\u8bc1\u5b50\u95ee\u9898\u89c4\u6a21\u6bcf\u6b21\u7f29\u5c0f \\(\\dfrac{1}{2}\\) \uff0c\u4ece\u800c\u4f7f\u5f97\u603b\u590d\u6742\u5ea6\u4e3a \\(O(n \\log n)\\) \u3002 \u5bf9\u4e8e\u524d\u8005\uff0c\u4e5f\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u4e00\u79cd\u662f\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u7aef\u70b9\uff0c\u53e6\u4e00\u79cd\u662f\u8fd9\u4e2a\u70b9\u4e3a\u8def\u5f84\u4e0a\u4e00\u70b9\u3002 \u4e3a\u4e86\u65b9\u4fbf\u5904\u7406\uff0c\u6211\u4eec\u5c06\u7b2c\u4e8c\u79cd\u60c5\u51b5\u8f6c\u5316\u4e3a\u7b2c\u4e00\u79cd\u5904\u7406\uff0c\u8fd9\u4e2a\u662f\u5bb9\u6613\u7684\u3002 \u8fd9\u662f\u6700\u57fa\u7840\u7684\u601d\u60f3\uff0c\u6838\u5fc3\u90e8\u5206\u5c31\u5728\u4e8e\uff0c\u600e\u4e48\u5904\u7406\u7b2c\u4e00\u79cd\u60c5\u51b5\u5bf9\u4e8e\u7b54\u6848\u7684\u8d21\u732e\u3002 \u901a\u5e38\u6765\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u679a\u4e3e\u5f53\u524d\u8282\u70b9 \\(u\\) \u7684\u6240\u6709\u513f\u5b50 \\(v\\) \uff0c\u7136\u540e\u5206\u522b\u8ba1\u7b97\u4e00\u4e0b \\(v\\) \u5b50\u6811\u4e2d\u6240\u6709\u8282\u70b9\u5173\u4e8e \\(u\\) \u7684\u4e00\u4e9b\u4fe1\u606f\uff0c\u7136\u540e\u66f4\u65b0\u7b54\u6848\u3002 \u8fd9\u90e8\u5206\u5e38\u5e38\u4f34\u6709\u5176\u4ed6\u6570\u636e\u7ed3\u6784\uff0c\u6bd4\u5982\u7ebf\u6bb5\u6811\u4e00\u7c7b\u7684\uff0c\u89c6\u60c5\u51b5\u6765\u4f7f\u7528\u3002 \u6a21\u677f \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e00\u68f5\u6709 \\(n\\) \u4e2a\u70b9\u7684\u5e26\u8fb9\u6743\u6811\uff0c \\(m\\) \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u51fa \\(k\\) \uff0c\u8be2\u95ee\u6811\u4e0a\u8ddd\u79bb\u4e3a \\(k\\) \u7684\u70b9\u5bf9\u662f\u5426\u5b58\u5728\u3002 \\(n\\le 10000,m\\le 100,k\\le 10000000\\) \u505a\u6cd5\u662f\u663e\u7136\u7684\uff0c\u6211\u4eec\u8003\u8651\u600e\u4e48\u5904\u7406\u524d\u9762\u63d0\u5230\u7684\u201c\u7b2c\u4e00\u79cd\u60c5\u51b5\u201d\u7684\u8d21\u732e\u3002 \u6211\u4eec\u8bb0 \\(tf(len) = \\texttt{true/false}\\) \u8868\u793a\uff0c\u5728\u4ee5\u5f53\u524d\u8282\u70b9 \\(u\\) \u4e3a\u5b50\u6811\u6839\u7684\u60c5\u51b5\u4e0b\uff0c\u662f\u5426\u5b58\u5728\u4e00\u6761\u7ecf\u8fc7 \\(u\\) \u4e14\u957f\u5ea6\u4e3a \\(len\\) \u7684\u8def\u5f84\u3002 \u66f4\u65b0\u65f6\u679a\u4e3e\u5b50\u6811\uff0c\u4ee5 \\(u\\) \u4e3a\u6839\u8ba1\u7b97\u4e00\u4e0b\u5b50\u6811\u8282\u70b9\u5230 \\(u\\) \u7684\u8ddd\u79bb \\(dis\\) \uff0c\u7136\u540e\u66b4\u529b\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684 \\(dis\\) \uff0c\u5bf9\u4e8e\u4e00\u4e2a \\(d\\) \uff0c\u6211\u4eec\u5224\u65ad\u662f\u5426\u5b58\u5728 \\(tr(k - d) = \\texttt{true}\\) \u5373\u53ef\u3002 \u4e4b\u540e\u6e05\u7a7a \\(tf\\) \uff0c\u5148\u8ba1\u7b97\u4e00\u4e0b\u5f53\u524d\u8981\u9012\u5f52\u7684\u5b50\u6811\u7684\u91cd\u5fc3 \\(G_v\\) \uff0c\u7136\u540e\u4ee5 \\(G_v\\) \u4e3a\u6839\u7ee7\u7eed\u8ba1\u7b97\u7b54\u6848\u5373\u53ef\u3002 \u6ce8\u610f\u6e05\u7a7a \\(tf\\) \u7684\u65f6\u5019\u4e3a\u4e86\u4fdd\u8bc1\u590d\u6742\u5ea6\uff0c\u8981\u6807\u8bb0\u4e00\u4e0b\u54ea\u4e9b\u4f4d\u7f6e\u88ab\u66f4\u6539\u4e86\uff0c\u5b9e\u73b0\u53ef\u4ee5\u7528\u961f\u5217\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 // author : black_trees #include <cmath> #include <queue> #include <cstdio> #include <bitset> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 3e5 + 10 ; const int inf = 1e9 + 7 ; int n , m , q [ si ]; int tot = 0 , head [ si ]; struct Edge { int ver , Next , w ; } e [ si << 1 ]; inline void add ( int u , int v , int w ) { e [ tot ] = ( Edge ){ v , head [ u ], w }, head [ u ] = tot ++ ; } std :: queue < int > rec ; bool tf [ 10000010 ], can [ si ], vis [ si ]; // tf: \u5f53\u524d\u5b50\u6811\u7684\u53ef\u884c\u6027\u3002 int cnt = 0 , sum = 0 ; int maxv [ si ], rt = 0 ; int d [ si ], dis [ si ], siz [ si ]; // d: \u5f53\u524d\u5b50\u6811\u7684 \u8282\u70b9-\u6839 \u8ddd\u79bb\u3002 void calcsiz ( int u , int fa ) { siz [ u ] = 1 , maxv [ u ] = 0 ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa || vis [ v ]) continue ; calcsiz ( v , u ); maxv [ u ] = max ( maxv [ u ], siz [ v ]), siz [ u ] += siz [ v ]; } maxv [ u ] = max ( maxv [ u ], sum - siz [ u ]); // \u6ce8\u610f\u8fd9\u91cc\u662f\u5f53\u524d\u5b50\u6811\u7684\u8282\u70b9\u4e2a\u6570\u3002 if ( maxv [ rt ] > maxv [ u ]) rt = u ; } void calcdis ( int u , int fa ) { d [ ++ cnt ] = dis [ u ]; // \u8fd9\u91cc\u590d\u5236\u662f\u4e3a\u4e86\u679a\u4e3e\u7684\u65f6\u5019\u4e0d\u5168\u90e8\u679a\u4e3e\uff0c\u4fdd\u8bc1\u590d\u6742\u5ea6\u3002 for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver , w = e [ i ]. w ; if ( v == fa || vis [ v ]) continue ; dis [ v ] = dis [ u ] + w , calcdis ( v , u ); } } void dfs ( int u , int fa ) { tf [ 0 ] = true , rec . push ( 0 ), vis [ u ] = true ; // \u6253 vis \u662f\u4e3a\u4e86\u786e\u4fdd\u5728\u5b50\u6811\u4e2d\u8fdb\u884c\u64cd\u4f5c\uff0c\u4e0d\u4f1a\u9012\u5f52\u51fa\u53bb\u3002 for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver , w = e [ i ]. w ; if ( v == fa || vis [ v ]) continue ; dis [ v ] = w , calcdis ( v , u ); for ( int j = 1 ; j <= cnt ; ++ j ) { for ( int k = 1 ; k <= m ; ++ k ) { if ( q [ k ] >= d [ j ]) can [ q [ k ]] |= tf [ q [ k ] - d [ j ]]; } } // \u5148\u5224\u65ad\u518d\u6dfb\u52a0\uff0c\u4e0d\u7136\u7b97\u7684\u4e0d\u662f\u9664\u4e86\u81ea\u5df1\u5b50\u6811\u7684\u60c5\u51b5\uff0c\u8fd9\u6837\u4f1a\u591a\u7b97\u3002 for ( int j = 1 ; j <= cnt ; ++ j ) { if ( d [ j ] < 10000010 ) rec . push ( d [ j ]), tf [ d [ j ]] = true ; } cnt = 0 ; } while ( ! rec . empty ()) tf [ rec . front ()] = false , rec . pop (); for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa || vis [ v ]) continue ; rt = 0 , maxv [ rt ] = inf , sum = siz [ v ]; calcsiz ( v , u ), calcsiz ( rt , -1 ), dfs ( rt , u ); // \u5148\u627e\u91cd\u5fc3\u518d\u9012\u5f52\u3002 } } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); memset ( tf , false , sizeof tf ); memset ( head , -1 , sizeof head ); memset ( vis , false , sizeof vis ); memset ( can , false , sizeof can ); cin >> n >> m ; for ( int i = 1 ; i < n ; ++ i ) { int u , v , w ; cin >> u >> v >> w ; add ( u , v , w ), add ( v , u , w ); } for ( int nw = 1 ; nw <= m ; ++ nw ) { cin >> q [ nw ]; } rt = 0 , maxv [ rt ] = inf , sum = n ; calcsiz ( 1 , -1 ), calcsiz ( rt , -1 ), dfs ( rt , -1 ); // \u56e0\u4e3a\u672c\u9898\u9700\u8981\u7528\u5230 tf(0) \u6240\u4ee5 fa \u5c31\u7528 -1 \u4e86\u3002 for ( int nw = 1 ; nw <= m ; ++ nw ) { if ( can [ q [ nw ]]) cout << \"AYE\" << endl ; else cout << \"NAY\" << endl ; } return 0 ; } Luogu4178 Tree \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e00\u68f5\u6709 \\(n\\) \u4e2a\u70b9\u7684\u5e26\u6743\u6811\uff0c\u7ed9\u51fa \\(k\\) \uff0c\u8be2\u95ee\u6811\u4e0a\u8ddd\u79bb\u5c0f\u4e8e\u7b49\u4e8e \\(k\\) \u7684\u70b9\u5bf9\u6570\u91cf\u3002 \\(n\\le 40000,k\\le 20000,w_i\\le 1000\\) \u7c7b\u4f3c\u4e0a\u4e00\u9898\u5373\u53ef\uff0c\u8fd9\u6b21\u6211\u4eec\u4e0d\u7ef4\u62a4 \\(tf\\) \u4e86\uff0c\u76f4\u63a5\u7ef4\u62a4\u4e00\u9897\u7ebf\u6bb5\u6811\u6765\u8bb0\u5f55\u6bcf\u4e2a\u957f\u5ea6\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\u5c31\u53ef\u4ee5\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 // author : black_trees #include <cmath> #include <queue> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; // using i64 = long long; const int si = 2e5 + 10 ; const int inf = 0x3f3f3f3f3f3f3f3fll ; int n , m , V ; int tot = 0 , head [ si ]; struct Edge { int ver , Next , w ; } e [ si << 1 ]; inline void add ( int u , int v , int w ) { e [ tot ] = ( Edge ){ v , head [ u ], w }, head [ u ] = tot ++ ; } class Segment_Tree { private : int ls [ si << 2 ], rs [ si << 2 ], val [ si << 2 ]; int node () { cot ++ , ls [ cot ] = rs [ cot ] = val [ cot ] = 0 ; return cot ; } void pushup ( int p ) { val [ p ] = val [ ls [ p ]] + val [ rs [ p ]]; } public : int rt , cot ; void modify ( int & p , int l , int r , int x , int v ) { if ( ! p ) p = node (); if ( l == r ) return val [ p ] += v , void (); int mid = ( l + r ) >> 1 ; if ( x <= mid ) modify ( ls [ p ], l , mid , x , v ); else modify ( rs [ p ], mid + 1 , r , x , v ); pushup ( p ); } int query ( int p , int l , int r , int ql , int qr ) { if ( ! p ) return 0 ; if ( ql <= l && r <= qr ) return val [ p ]; int mid = ( l + r ) >> 1 , ret = 0 ; if ( ql <= mid ) ret += query ( ls [ p ], l , mid , ql , qr ); if ( qr > mid ) ret += query ( rs [ p ], mid + 1 , r , ql , qr ); return ret ; } } tr ; int rt = 0 , maxv [ si ], sum ; int siz [ si ], dis [ si ], d [ si ], cnt = 0 ; bool vis [ si ]; std :: queue < int > rec ; void calcsiz ( int u , int fa ) { siz [ u ] = 1 , maxv [ u ] = 0 ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa || vis [ v ]) continue ; calcsiz ( v , u ), maxv [ u ] = max ( maxv [ u ], siz [ v ]), siz [ u ] += siz [ v ]; } maxv [ u ] = max ( maxv [ u ], sum - siz [ u ]); if ( maxv [ rt ] > maxv [ u ]) rt = u ; } void calcdis ( int u , int fa ) { d [ ++ cnt ] = dis [ u ]; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver , w = e [ i ]. w ; if ( v == fa || vis [ v ]) continue ; dis [ v ] = dis [ u ] + w , calcdis ( v , u ); } } int ans = 0 ; void dfs ( int u , int fa ) { vis [ u ] = true ; tr . modify ( tr . rt , 1 , V , 1 , 1 ), rec . push ( 1 ); for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver , w = e [ i ]. w ; if ( v == fa || vis [ v ]) continue ; dis [ v ] = w , cnt = 0 , calcdis ( v , u ); for ( int j = 1 ; j <= cnt ; ++ j ) { if ( m >= d [ j ]) ans += tr . query ( tr . rt , 1 , V , max ( 0l l , 1 - d [ j ]) + 1 , max ( 0l l , m - d [ j ]) + 1 ); // \u56e0\u4e3a w >= 0 \u6240\u4ee5\u5148\u6574\u4f53\u53f3\u79fb\u4e00\u4e0b\u3002 } for ( int j = 1 ; j <= cnt ; ++ j ) { tr . modify ( tr . rt , 1 , V , d [ j ] + 1 , 1 ), rec . push ( d [ j ] + 1 ); } } while ( ! rec . empty ()) tr . modify ( tr . rt , 1 , V , rec . front (), -1 ), rec . pop (); for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa || vis [ v ]) continue ; rt = 0 , sum = siz [ v ], maxv [ rt ] = inf ; calcsiz ( v , u ), calcsiz ( rt , -1 ); dfs ( rt , u ); } } signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); tr . cot = tr . rt = 0 ; memset ( head , -1 , sizeof head ); cin >> n , V = ( int ) 2e7 ; for ( int i = 1 ; i < n ; ++ i ) { int u , v , w ; cin >> u >> v >> w ; add ( u , v , w ), add ( v , u , w ); } cin >> m ; rt = 0 , sum = n , maxv [ rt ] = inf ; calcsiz ( 1 , -1 ), calcsiz ( rt , -1 ), dfs ( rt , -1 ); cout << ans << endl ; return 0 ; } \u4e60\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5495\u5495\u3002 \u70b9\u5206\u6811 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5495\u3002","title":"\u6811\u5206\u6cbb"},{"location":"algor/graph/tree-divide/#_1","text":"","title":"\u70b9\u5206\u6cbb"},{"location":"algor/graph/tree-divide/#_2","text":"\u70b9\u5206\u6cbb\u4e5f\u53eb\u91cd\u5fc3\u5256\u5206\uff08\u56fd\u5916\u8fd9\u4e48\u53eb\uff09\uff0c\u4e00\u822c\u7528\u6765\u5904\u7406\u4e00\u4e9b\u9759\u6001\u7684\u8def\u5f84\u76f8\u5173\u8be2\u95ee\uff0c\u4e14\u901a\u5e38\u6240\u9700\u7684\u8def\u5f84\uff08\u72b6\u6001\uff09\u6bd4\u8f83\u591a\u3002 \u5176\u601d\u60f3\u662f\uff0c\u6211\u4eec\u5047\u8bbe\u5f53\u524d\u5904\u7406\u5230\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u628a\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u7684\u6240\u6709\u8def\u5f84\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u7ecf\u8fc7\u8fd9\u4e2a\u70b9\u7684\uff0c\u4e00\u7c7b\u662f\u4e0d\u7ecf\u8fc7\u7684\u3002 \u6b64\u65f6\u5229\u7528\u5206\u6cbb\u7684\u601d\u60f3\uff0c\u6211\u4eec\u5904\u7406\u524d\u8005\uff0c\u9012\u5f52\u540e\u8005\u5206\u5272\u5b50\u95ee\u9898\u6700\u7ec8\u8f6c\u5316\u4e3a\u524d\u8005\uff0c\u4f46\u4e3a\u4e86\u4fdd\u8bc1\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u6bcf\u6b21\u5904\u7406\u524d\u8005\uff0c\u9700\u8981\u9009\u62e9\u5f53\u524d\u5b50\u6811\u7684\u91cd\u5fc3\uff0c\u4ee5\u4fdd\u8bc1\u5b50\u95ee\u9898\u89c4\u6a21\u6bcf\u6b21\u7f29\u5c0f \\(\\dfrac{1}{2}\\) \uff0c\u4ece\u800c\u4f7f\u5f97\u603b\u590d\u6742\u5ea6\u4e3a \\(O(n \\log n)\\) \u3002 \u5bf9\u4e8e\u524d\u8005\uff0c\u4e5f\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u4e00\u79cd\u662f\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u7aef\u70b9\uff0c\u53e6\u4e00\u79cd\u662f\u8fd9\u4e2a\u70b9\u4e3a\u8def\u5f84\u4e0a\u4e00\u70b9\u3002 \u4e3a\u4e86\u65b9\u4fbf\u5904\u7406\uff0c\u6211\u4eec\u5c06\u7b2c\u4e8c\u79cd\u60c5\u51b5\u8f6c\u5316\u4e3a\u7b2c\u4e00\u79cd\u5904\u7406\uff0c\u8fd9\u4e2a\u662f\u5bb9\u6613\u7684\u3002 \u8fd9\u662f\u6700\u57fa\u7840\u7684\u601d\u60f3\uff0c\u6838\u5fc3\u90e8\u5206\u5c31\u5728\u4e8e\uff0c\u600e\u4e48\u5904\u7406\u7b2c\u4e00\u79cd\u60c5\u51b5\u5bf9\u4e8e\u7b54\u6848\u7684\u8d21\u732e\u3002 \u901a\u5e38\u6765\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u679a\u4e3e\u5f53\u524d\u8282\u70b9 \\(u\\) \u7684\u6240\u6709\u513f\u5b50 \\(v\\) \uff0c\u7136\u540e\u5206\u522b\u8ba1\u7b97\u4e00\u4e0b \\(v\\) \u5b50\u6811\u4e2d\u6240\u6709\u8282\u70b9\u5173\u4e8e \\(u\\) \u7684\u4e00\u4e9b\u4fe1\u606f\uff0c\u7136\u540e\u66f4\u65b0\u7b54\u6848\u3002 \u8fd9\u90e8\u5206\u5e38\u5e38\u4f34\u6709\u5176\u4ed6\u6570\u636e\u7ed3\u6784\uff0c\u6bd4\u5982\u7ebf\u6bb5\u6811\u4e00\u7c7b\u7684\uff0c\u89c6\u60c5\u51b5\u6765\u4f7f\u7528\u3002","title":"\u6cdb\u5316"},{"location":"algor/graph/tree-divide/#_3","text":"\u7ed9\u5b9a\u4e00\u68f5\u6709 \\(n\\) \u4e2a\u70b9\u7684\u5e26\u8fb9\u6743\u6811\uff0c \\(m\\) \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u51fa \\(k\\) \uff0c\u8be2\u95ee\u6811\u4e0a\u8ddd\u79bb\u4e3a \\(k\\) \u7684\u70b9\u5bf9\u662f\u5426\u5b58\u5728\u3002 \\(n\\le 10000,m\\le 100,k\\le 10000000\\) \u505a\u6cd5\u662f\u663e\u7136\u7684\uff0c\u6211\u4eec\u8003\u8651\u600e\u4e48\u5904\u7406\u524d\u9762\u63d0\u5230\u7684\u201c\u7b2c\u4e00\u79cd\u60c5\u51b5\u201d\u7684\u8d21\u732e\u3002 \u6211\u4eec\u8bb0 \\(tf(len) = \\texttt{true/false}\\) \u8868\u793a\uff0c\u5728\u4ee5\u5f53\u524d\u8282\u70b9 \\(u\\) \u4e3a\u5b50\u6811\u6839\u7684\u60c5\u51b5\u4e0b\uff0c\u662f\u5426\u5b58\u5728\u4e00\u6761\u7ecf\u8fc7 \\(u\\) \u4e14\u957f\u5ea6\u4e3a \\(len\\) \u7684\u8def\u5f84\u3002 \u66f4\u65b0\u65f6\u679a\u4e3e\u5b50\u6811\uff0c\u4ee5 \\(u\\) \u4e3a\u6839\u8ba1\u7b97\u4e00\u4e0b\u5b50\u6811\u8282\u70b9\u5230 \\(u\\) \u7684\u8ddd\u79bb \\(dis\\) \uff0c\u7136\u540e\u66b4\u529b\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684 \\(dis\\) \uff0c\u5bf9\u4e8e\u4e00\u4e2a \\(d\\) \uff0c\u6211\u4eec\u5224\u65ad\u662f\u5426\u5b58\u5728 \\(tr(k - d) = \\texttt{true}\\) \u5373\u53ef\u3002 \u4e4b\u540e\u6e05\u7a7a \\(tf\\) \uff0c\u5148\u8ba1\u7b97\u4e00\u4e0b\u5f53\u524d\u8981\u9012\u5f52\u7684\u5b50\u6811\u7684\u91cd\u5fc3 \\(G_v\\) \uff0c\u7136\u540e\u4ee5 \\(G_v\\) \u4e3a\u6839\u7ee7\u7eed\u8ba1\u7b97\u7b54\u6848\u5373\u53ef\u3002 \u6ce8\u610f\u6e05\u7a7a \\(tf\\) \u7684\u65f6\u5019\u4e3a\u4e86\u4fdd\u8bc1\u590d\u6742\u5ea6\uff0c\u8981\u6807\u8bb0\u4e00\u4e0b\u54ea\u4e9b\u4f4d\u7f6e\u88ab\u66f4\u6539\u4e86\uff0c\u5b9e\u73b0\u53ef\u4ee5\u7528\u961f\u5217\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 // author : black_trees #include <cmath> #include <queue> #include <cstdio> #include <bitset> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 3e5 + 10 ; const int inf = 1e9 + 7 ; int n , m , q [ si ]; int tot = 0 , head [ si ]; struct Edge { int ver , Next , w ; } e [ si << 1 ]; inline void add ( int u , int v , int w ) { e [ tot ] = ( Edge ){ v , head [ u ], w }, head [ u ] = tot ++ ; } std :: queue < int > rec ; bool tf [ 10000010 ], can [ si ], vis [ si ]; // tf: \u5f53\u524d\u5b50\u6811\u7684\u53ef\u884c\u6027\u3002 int cnt = 0 , sum = 0 ; int maxv [ si ], rt = 0 ; int d [ si ], dis [ si ], siz [ si ]; // d: \u5f53\u524d\u5b50\u6811\u7684 \u8282\u70b9-\u6839 \u8ddd\u79bb\u3002 void calcsiz ( int u , int fa ) { siz [ u ] = 1 , maxv [ u ] = 0 ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa || vis [ v ]) continue ; calcsiz ( v , u ); maxv [ u ] = max ( maxv [ u ], siz [ v ]), siz [ u ] += siz [ v ]; } maxv [ u ] = max ( maxv [ u ], sum - siz [ u ]); // \u6ce8\u610f\u8fd9\u91cc\u662f\u5f53\u524d\u5b50\u6811\u7684\u8282\u70b9\u4e2a\u6570\u3002 if ( maxv [ rt ] > maxv [ u ]) rt = u ; } void calcdis ( int u , int fa ) { d [ ++ cnt ] = dis [ u ]; // \u8fd9\u91cc\u590d\u5236\u662f\u4e3a\u4e86\u679a\u4e3e\u7684\u65f6\u5019\u4e0d\u5168\u90e8\u679a\u4e3e\uff0c\u4fdd\u8bc1\u590d\u6742\u5ea6\u3002 for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver , w = e [ i ]. w ; if ( v == fa || vis [ v ]) continue ; dis [ v ] = dis [ u ] + w , calcdis ( v , u ); } } void dfs ( int u , int fa ) { tf [ 0 ] = true , rec . push ( 0 ), vis [ u ] = true ; // \u6253 vis \u662f\u4e3a\u4e86\u786e\u4fdd\u5728\u5b50\u6811\u4e2d\u8fdb\u884c\u64cd\u4f5c\uff0c\u4e0d\u4f1a\u9012\u5f52\u51fa\u53bb\u3002 for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver , w = e [ i ]. w ; if ( v == fa || vis [ v ]) continue ; dis [ v ] = w , calcdis ( v , u ); for ( int j = 1 ; j <= cnt ; ++ j ) { for ( int k = 1 ; k <= m ; ++ k ) { if ( q [ k ] >= d [ j ]) can [ q [ k ]] |= tf [ q [ k ] - d [ j ]]; } } // \u5148\u5224\u65ad\u518d\u6dfb\u52a0\uff0c\u4e0d\u7136\u7b97\u7684\u4e0d\u662f\u9664\u4e86\u81ea\u5df1\u5b50\u6811\u7684\u60c5\u51b5\uff0c\u8fd9\u6837\u4f1a\u591a\u7b97\u3002 for ( int j = 1 ; j <= cnt ; ++ j ) { if ( d [ j ] < 10000010 ) rec . push ( d [ j ]), tf [ d [ j ]] = true ; } cnt = 0 ; } while ( ! rec . empty ()) tf [ rec . front ()] = false , rec . pop (); for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa || vis [ v ]) continue ; rt = 0 , maxv [ rt ] = inf , sum = siz [ v ]; calcsiz ( v , u ), calcsiz ( rt , -1 ), dfs ( rt , u ); // \u5148\u627e\u91cd\u5fc3\u518d\u9012\u5f52\u3002 } } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); memset ( tf , false , sizeof tf ); memset ( head , -1 , sizeof head ); memset ( vis , false , sizeof vis ); memset ( can , false , sizeof can ); cin >> n >> m ; for ( int i = 1 ; i < n ; ++ i ) { int u , v , w ; cin >> u >> v >> w ; add ( u , v , w ), add ( v , u , w ); } for ( int nw = 1 ; nw <= m ; ++ nw ) { cin >> q [ nw ]; } rt = 0 , maxv [ rt ] = inf , sum = n ; calcsiz ( 1 , -1 ), calcsiz ( rt , -1 ), dfs ( rt , -1 ); // \u56e0\u4e3a\u672c\u9898\u9700\u8981\u7528\u5230 tf(0) \u6240\u4ee5 fa \u5c31\u7528 -1 \u4e86\u3002 for ( int nw = 1 ; nw <= m ; ++ nw ) { if ( can [ q [ nw ]]) cout << \"AYE\" << endl ; else cout << \"NAY\" << endl ; } return 0 ; }","title":"\u6a21\u677f"},{"location":"algor/graph/tree-divide/#luogu4178-tree","text":"\u7ed9\u5b9a\u4e00\u68f5\u6709 \\(n\\) \u4e2a\u70b9\u7684\u5e26\u6743\u6811\uff0c\u7ed9\u51fa \\(k\\) \uff0c\u8be2\u95ee\u6811\u4e0a\u8ddd\u79bb\u5c0f\u4e8e\u7b49\u4e8e \\(k\\) \u7684\u70b9\u5bf9\u6570\u91cf\u3002 \\(n\\le 40000,k\\le 20000,w_i\\le 1000\\) \u7c7b\u4f3c\u4e0a\u4e00\u9898\u5373\u53ef\uff0c\u8fd9\u6b21\u6211\u4eec\u4e0d\u7ef4\u62a4 \\(tf\\) \u4e86\uff0c\u76f4\u63a5\u7ef4\u62a4\u4e00\u9897\u7ebf\u6bb5\u6811\u6765\u8bb0\u5f55\u6bcf\u4e2a\u957f\u5ea6\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\u5c31\u53ef\u4ee5\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 // author : black_trees #include <cmath> #include <queue> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; // using i64 = long long; const int si = 2e5 + 10 ; const int inf = 0x3f3f3f3f3f3f3f3fll ; int n , m , V ; int tot = 0 , head [ si ]; struct Edge { int ver , Next , w ; } e [ si << 1 ]; inline void add ( int u , int v , int w ) { e [ tot ] = ( Edge ){ v , head [ u ], w }, head [ u ] = tot ++ ; } class Segment_Tree { private : int ls [ si << 2 ], rs [ si << 2 ], val [ si << 2 ]; int node () { cot ++ , ls [ cot ] = rs [ cot ] = val [ cot ] = 0 ; return cot ; } void pushup ( int p ) { val [ p ] = val [ ls [ p ]] + val [ rs [ p ]]; } public : int rt , cot ; void modify ( int & p , int l , int r , int x , int v ) { if ( ! p ) p = node (); if ( l == r ) return val [ p ] += v , void (); int mid = ( l + r ) >> 1 ; if ( x <= mid ) modify ( ls [ p ], l , mid , x , v ); else modify ( rs [ p ], mid + 1 , r , x , v ); pushup ( p ); } int query ( int p , int l , int r , int ql , int qr ) { if ( ! p ) return 0 ; if ( ql <= l && r <= qr ) return val [ p ]; int mid = ( l + r ) >> 1 , ret = 0 ; if ( ql <= mid ) ret += query ( ls [ p ], l , mid , ql , qr ); if ( qr > mid ) ret += query ( rs [ p ], mid + 1 , r , ql , qr ); return ret ; } } tr ; int rt = 0 , maxv [ si ], sum ; int siz [ si ], dis [ si ], d [ si ], cnt = 0 ; bool vis [ si ]; std :: queue < int > rec ; void calcsiz ( int u , int fa ) { siz [ u ] = 1 , maxv [ u ] = 0 ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa || vis [ v ]) continue ; calcsiz ( v , u ), maxv [ u ] = max ( maxv [ u ], siz [ v ]), siz [ u ] += siz [ v ]; } maxv [ u ] = max ( maxv [ u ], sum - siz [ u ]); if ( maxv [ rt ] > maxv [ u ]) rt = u ; } void calcdis ( int u , int fa ) { d [ ++ cnt ] = dis [ u ]; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver , w = e [ i ]. w ; if ( v == fa || vis [ v ]) continue ; dis [ v ] = dis [ u ] + w , calcdis ( v , u ); } } int ans = 0 ; void dfs ( int u , int fa ) { vis [ u ] = true ; tr . modify ( tr . rt , 1 , V , 1 , 1 ), rec . push ( 1 ); for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver , w = e [ i ]. w ; if ( v == fa || vis [ v ]) continue ; dis [ v ] = w , cnt = 0 , calcdis ( v , u ); for ( int j = 1 ; j <= cnt ; ++ j ) { if ( m >= d [ j ]) ans += tr . query ( tr . rt , 1 , V , max ( 0l l , 1 - d [ j ]) + 1 , max ( 0l l , m - d [ j ]) + 1 ); // \u56e0\u4e3a w >= 0 \u6240\u4ee5\u5148\u6574\u4f53\u53f3\u79fb\u4e00\u4e0b\u3002 } for ( int j = 1 ; j <= cnt ; ++ j ) { tr . modify ( tr . rt , 1 , V , d [ j ] + 1 , 1 ), rec . push ( d [ j ] + 1 ); } } while ( ! rec . empty ()) tr . modify ( tr . rt , 1 , V , rec . front (), -1 ), rec . pop (); for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa || vis [ v ]) continue ; rt = 0 , sum = siz [ v ], maxv [ rt ] = inf ; calcsiz ( v , u ), calcsiz ( rt , -1 ); dfs ( rt , u ); } } signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); tr . cot = tr . rt = 0 ; memset ( head , -1 , sizeof head ); cin >> n , V = ( int ) 2e7 ; for ( int i = 1 ; i < n ; ++ i ) { int u , v , w ; cin >> u >> v >> w ; add ( u , v , w ), add ( v , u , w ); } cin >> m ; rt = 0 , sum = n , maxv [ rt ] = inf ; calcsiz ( 1 , -1 ), calcsiz ( rt , -1 ), dfs ( rt , -1 ); cout << ans << endl ; return 0 ; }","title":"Luogu4178 Tree"},{"location":"algor/graph/tree-divide/#_4","text":"\u5495\u5495\u3002","title":"\u4e60\u9898"},{"location":"algor/graph/tree-divide/#_5","text":"\u5495\u3002","title":"\u70b9\u5206\u6811"},{"location":"algor/graph/virtual-tree/","text":"\u6982\u8ff0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6709\u4e00\u7c7b\u95ee\u9898\uff0c\u6bcf\u6b21\u8be2\u95ee\u4f1a\u5bf9\u6811\u4e0a\u7684\u4e00\u4e2a\u70b9\u96c6\u8fdb\u884c\u64cd\u4f5c\u3002 \u5728\u5355\u6b21\u64cd\u4f5c\u64cd\u4f5c\u590d\u6742\u5ea6\u6bd4\u8f83\u9ad8\uff0c\u4f46\u662f\u70b9\u96c6\u5927\u5c0f\u603b\u548c\u7ea7\u522b\u4e0d\u5927\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u865a\u6811\u4f18\u5316\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u5bf9\u4e8e\u4e00\u68f5\u6811 \\(T = \\{V, E\\}\\) \uff0c\u4e00\u4e2a\u70b9\u96c6 \\(S \\subset V\\) \uff0c\u70b9\u96c6 \\(S\\) \u7684\u865a\u6811\u662f\u8fd9\u6837\u7684\u4e00\u4e2a\u4e1c\u897f\uff1a \u5305\u542b\u4e86 \\(S\\) \u4e2d\u6240\u6709\u70b9\uff0c\u5e76\u4e14\u5305\u542b \\(S\\) \u4e2d\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u7684 LCA \u7684\u4e00\u68f5\u6811\u3002 \u5927\u6982\u957f\u8fd9\u6837\uff1a \u5176\u4e2d\u7ea2\u8272\u8282\u70b9\u4e3a \\(S\\) \u4e2d\u7684\u8282\u70b9\uff0c\u6211\u4eec\u79f0\u4e3a \u5173\u952e\u70b9 \uff0c\u84dd\u8272\u8282\u70b9\u5219\u662f LCA\uff08\u865a\u6811\u4e2d\u7684\u975e\u5173\u952e\u70b9\uff09\u3002 \u53ef\u4ee5\u6ce8\u610f\u5230\uff0c\u865a\u6811\u4e0d\u4f1a\u6539\u53d8\u539f\u6811\u4e0a\u7684\u7956\u5148\u5173\u7cfb\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b9e\u9645\u4e0a\u865a\u6811\u662f\uff0c\u5c06\u539f\u6811\u4e2d\u5bf9\u4e8e\u5f53\u524d\u8be2\u95ee\u6ca1\u6709\u7528\u7684\u4e00\u4e9b\u8282\u70b9\u7ed9\u53bb\u6389\uff0c\u5f97\u5230\u7684\u4e00\u9897\u65b0\u6811\u3002 \u4fdd\u7559 LCA \u5c31\u662f\u56e0\u4e3a\uff0cLCA \u4e5f\u4f1a\u4fdd\u7559\u4e00\u4e9b\u539f\u95ee\u9898\u7684\u4fe1\u606f\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u628a\u865a\u6811\u770b\u4f5c\u201c\u5c06\u539f\u6811\u538b\u7f29\u4e86\u201d\uff0c\u6bd4\u5982\u6211\u4eec\u53ea\u5173\u5fc3 \\(\\delta(u,v)\\) \u7684\u4e00\u4e9b\u4fe1\u606f\uff0c\u4e0d\u5173\u5fc3\u4e0a\u9762\u7684\u8282\u70b9\u3002 \u6211\u4eec\u5c31\u76f4\u63a5\u628a \\(\\delta(u, v)\\) \u538b\u6210\u4e00\u6761\u8fb9 \\((u \\to v)\\) \u5c31\u884c\u4e86\uff0c\uff08\u7528\u4e8e\u8282\u7701\u7a7a\u95f4\u7684\u538b\u7f29 01trie \u5c31\u7528\u4e86\u540c\u6837\u7684\u601d\u60f3\uff09\u3002 \u7136\u540e\u53ea\u9700\u8981\u5728\u65b0\u6811\u4e0a\u5904\u7406\u95ee\u9898\u5c31\u53ef\u4ee5\u4e86\u3002 \u6784\u5efa \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e00\u79cd\u505a\u6cd5\u662f\u76f4\u63a5\u6309\u7167 dfn \u6392\u5e8f\uff0c\u7136\u540e\u76f8\u90bb\u7684\u4e24\u4e2a\u8282\u70b9\u6c42 LCA\uff0c\u53bb\u91cd\u3002 \u4f46\u662f\u8fd9\u4e2a\u6bd4\u8f83\u9ebb\u70e6\uff0c\u4e0d\u5982\u4f7f\u7528\u5355\u8c03\u6808\u7684\u6784\u9020\u65b9\u6cd5\uff0c\u6240\u4ee5\u8fd9\u91cc\u53ea\u8bb2\u5355\u8c03\u6808\u505a\u6cd5\u3002 \u8fd9\u4e2a\u505a\u6cd5\u7684\u601d\u60f3\u662f\uff0c \u6bcf\u6b21\u53ea\u7ef4\u62a4\u865a\u6811\u7684\u4e00\u6761\u94fe \u3002 \u9996\u5148\u628a\u6811\u6839 ( \\(1\\) \u53f7\u8282\u70b9) \u5165\u6808\uff0c\u5e76\u4e14\uff0c\u6211\u4eec\u4fdd\u8bc1\u5355\u8c03\u6808\u4ece\u9876\u5230\u5e95\uff0c\u8282\u70b9\u7684 dfn \u5355\u8c03\u9012\u51cf\u3002 \u7136\u540e\u8003\u8651\uff0c\u5f53\u524d\u7684\u6808\u9876\u662f \\(top\\) \uff0c\u52a0\u5165\u8282\u70b9\u662f \\(nw\\) \uff0c\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\uff1a \\(\\text{LCA}(top, nw) = top\\) \uff0c\u8bc1\u660e \\(nw\\) \u662f\u5f53\u524d\u94fe\u4e0a\u7684\u8282\u70b9\uff0c\u76f4\u63a5\u52a0\u5165\u5373\u53ef\u3002 \u5426\u5219\uff0c\u8003\u8651\u6808\u4e2d\u6b21\u5927\u8282\u70b9 \\(stop\\) \u4e0e \\(\\text{LCA}(top, nw)\\) \u7684\u5173\u7cfb\uff0c\u663e\u7136\u6b64\u65f6\u5df2\u7ecf\u7ef4\u62a4\u5b8c\u4e86\u4e0a\u4e00\u6761\u94fe\uff0c\u7136\u540e\u6211\u4eec\u8003\u8651\uff1a \u5982\u679c \\(dfn(stop) > dfn(\\text{LCA}(top, nw))\\) \uff0c\u90a3\u4e48\u8bf4\u660e\uff0c \\(\\text{LCA}(top, nw)\\) \u5df2\u7ecf\u5728\u6808\u4e2d\u4e86\uff0c\u6b64\u65f6\u6211\u4eec\u4e0d\u65ad\u5f39\u6808\uff0c\u76f4\u5230 \\(top = \\text{LCA}\\) \uff0c\u5f39\u6808\u7684\u65f6\u5019\uff0c\u8bb0\u5f97\u8ba9\u88ab\u5f39\u51fa\u7684\u8282\u70b9\u548c\u5f39\u51fa\u540e\u7684\u6808\u9876\u8fde\u8fb9\uff08\u56e0\u4e3a\u5b83\u4eec\u662f\u7236\u5b50\u5173\u7cfb\uff09\u3002 \u5426\u5219\u8bc1\u660e \\(\\text{LCA}(top, nw)\\) \u8fd8\u6ca1\u6709\u5165\u6808\uff0c\u5148\u8fde \\(top\\) \u548c \\(\\text{LCA}\\) \uff0c\u7136\u540e\u7ee7\u7eed\u5f39\u6808\uff0c\u6700\u540e\u52a0\u5165 \\(\\text{LCA}\\) \u548c \\(nw\\) \u5373\u53ef\u3002 Code 1 \u6682\u7565 \u4e60\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 \u300cSDOI2011\u300d\u6d88\u8017\u6218 \u9898\u76ee\u63cf\u8ff0 \u5728\u4e00\u573a\u6218\u4e89\u4e2d\uff0c\u6218\u573a\u7531 \\(n\\) \u4e2a\u5c9b\u5c7f\u548c \\(n-1\\) \u4e2a\u6865\u6881\u7ec4\u6210\uff0c\u4fdd\u8bc1\u6bcf\u4e24\u4e2a\u5c9b\u5c7f\u95f4\u6709\u4e14\u4ec5\u6709\u4e00\u6761\u8def\u5f84\u53ef\u8fbe\u3002\u73b0\u5728\uff0c\u6211\u519b\u5df2\u7ecf\u4fa6\u67e5\u5230\u654c\u519b\u7684\u603b\u90e8\u5728\u7f16\u53f7\u4e3a \\(1\\) \u7684\u5c9b\u5c7f\uff0c\u800c\u4e14\u4ed6\u4eec\u5df2\u7ecf\u6ca1\u6709\u8db3\u591f\u591a\u7684\u80fd\u6e90\u7ef4\u7cfb\u6218\u6597\uff0c\u6211\u519b\u80dc\u5229\u5728\u671b\u3002\u5df2\u77e5\u5728\u5176\u4ed6 \\(k\\) \u4e2a\u5c9b\u5c7f\u4e0a\u6709\u4e30\u5bcc\u80fd\u6e90\uff0c\u4e3a\u4e86\u9632\u6b62\u654c\u519b\u83b7\u53d6\u80fd\u6e90\uff0c\u6211\u519b\u7684\u4efb\u52a1\u662f\u70b8\u6bc1\u4e00\u4e9b\u6865\u6881\uff0c\u4f7f\u5f97\u654c\u519b\u4e0d\u80fd\u5230\u8fbe\u4efb\u4f55\u80fd\u6e90\u4e30\u5bcc\u7684\u5c9b\u5c7f\u3002\u7531\u4e8e\u4e0d\u540c\u6865\u6881\u7684\u6750\u8d28\u548c\u7ed3\u6784\u4e0d\u540c\uff0c\u6240\u4ee5\u70b8\u6bc1\u4e0d\u540c\u7684\u6865\u6881\u6709\u4e0d\u540c\u7684\u4ee3\u4ef7\uff0c\u6211\u519b\u5e0c\u671b\u5728\u6ee1\u8db3\u76ee\u6807\u7684\u540c\u65f6\u4f7f\u5f97\u603b\u4ee3\u4ef7\u6700\u5c0f\u3002 \u4fa6\u67e5\u90e8\u95e8\u8fd8\u53d1\u73b0\uff0c\u654c\u519b\u6709\u4e00\u53f0\u795e\u79d8\u673a\u5668\u3002\u5373\u4f7f\u6211\u519b\u5207\u65ad\u6240\u6709\u80fd\u6e90\u4e4b\u540e\uff0c\u4ed6\u4eec\u4e5f\u53ef\u4ee5\u7528\u90a3\u53f0\u673a\u5668\u3002\u673a\u5668\u4ea7\u751f\u7684\u6548\u679c\u4e0d\u4ec5\u4ec5\u4f1a\u4fee\u590d\u6240\u6709\u6211\u519b\u70b8\u6bc1\u7684\u6865\u6881\uff0c\u800c\u4e14\u4f1a\u91cd\u65b0\u968f\u673a\u8d44\u6e90\u5206\u5e03\uff08\u4f46\u53ef\u4ee5\u4fdd\u8bc1\u7684\u662f\uff0c\u8d44\u6e90\u4e0d\u4f1a\u5206\u5e03\u5230 \\(1\\) \u53f7\u5c9b\u5c7f\u4e0a\uff09\u3002\u4e0d\u8fc7\u4fa6\u67e5\u90e8\u95e8\u8fd8\u53d1\u73b0\u4e86\u8fd9\u53f0\u673a\u5668\u53ea\u80fd\u591f\u4f7f\u7528 \\(m\\) \u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u628a\u6bcf\u6b21\u4efb\u52a1\u5b8c\u6210\u5373\u53ef\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 \\(n\\) \uff0c\u4ee3\u8868\u5c9b\u5c7f\u6570\u91cf\u3002 \u63a5\u4e0b\u6765 n-1 \u884c\uff0c\u6bcf\u884c\u4e09\u4e2a\u6574\u6570 \\(u,v,w\\) \uff0c\u4ee3\u8868 \\(u\\) \u53f7\u5c9b\u5c7f\u548c \\(v\\) \u53f7\u5c9b\u5c7f\u7531\u4e00\u6761\u4ee3\u4ef7\u4e3a \\(c\\) \u7684\u6865\u6881\u76f4\u63a5\u76f8\u8fde\uff0c\u4fdd\u8bc1 \\(1\\le u,v\\le n\\) \u4e14 \\(1\\le c\\le 10^5\\) \u3002 \u7b2c \\(n+1\\) \u884c\uff0c\u4e00\u4e2a\u6574\u6570 \\(m\\) \uff0c\u4ee3\u8868\u654c\u65b9\u673a\u5668\u80fd\u4f7f\u7528\u7684\u6b21\u6570\u3002 \u63a5\u4e0b\u6765 \\(m\\) \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570 \\(k_i\\) \uff0c\u4ee3\u8868\u7b2c \\(i\\) \u6b21\u540e\uff0c\u6709 \\(k_i\\) \u4e2a\u5c9b\u5c7f\u8d44\u6e90\u4e30\u5bcc\uff0c\u63a5\u4e0b\u6765 \\(k\\) \u4e2a\u6574\u6570 \\(h_1,h_2,\\cdots ,h_k\\) \uff0c\u8868\u793a\u8d44\u6e90\u4e30\u5bcc\u5c9b\u5c7f\u7684\u7f16\u53f7\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u6709 \\(m\\) \u884c\uff0c\u5206\u522b\u4ee3\u8868\u6bcf\u6b21\u4efb\u52a1\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002 \u6570\u636e\u8303\u56f4 \u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff0c \\(2\\le n\\le 2.5\\times 10^5,m\\ge 1,\\sum k_i\\le 5\\times 10^5,1\\le k_i\\le n-1\\) \u3002 \u8003\u8651\u8bbe \\(dp(u)\\) \u8868\u793a\uff0c\u4f7f\u5f97 \\(u\\) \u548c\u5b83\u7684\u5b50\u6811\u4e2d\u4efb\u610f\u4e00\u4e2a\u5173\u952e\u70b9\u4e0d\u76f8\u8fde\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002 \u590d\u6742\u5ea6\u662f \\(O(nq)\\) \u7684\uff0c\u6ce8\u610f\u5230 \\(\\sum k_i \\le 5 \\times 10^5\\) \uff0c\u4e8e\u662f\u6211\u4eec\u76f4\u63a5\u628a\u5173\u952e\u70b9\u62d6\u51fa\u6765\u5efa\u865a\u6811\uff0c\u5728\u865a\u6811\u4e0a dp \u5373\u53ef\u3002 Code 1 \u6682\u7565","title":"\u865a\u6811"},{"location":"algor/graph/virtual-tree/#_1","text":"\u6709\u4e00\u7c7b\u95ee\u9898\uff0c\u6bcf\u6b21\u8be2\u95ee\u4f1a\u5bf9\u6811\u4e0a\u7684\u4e00\u4e2a\u70b9\u96c6\u8fdb\u884c\u64cd\u4f5c\u3002 \u5728\u5355\u6b21\u64cd\u4f5c\u64cd\u4f5c\u590d\u6742\u5ea6\u6bd4\u8f83\u9ad8\uff0c\u4f46\u662f\u70b9\u96c6\u5927\u5c0f\u603b\u548c\u7ea7\u522b\u4e0d\u5927\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u865a\u6811\u4f18\u5316\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u5bf9\u4e8e\u4e00\u68f5\u6811 \\(T = \\{V, E\\}\\) \uff0c\u4e00\u4e2a\u70b9\u96c6 \\(S \\subset V\\) \uff0c\u70b9\u96c6 \\(S\\) \u7684\u865a\u6811\u662f\u8fd9\u6837\u7684\u4e00\u4e2a\u4e1c\u897f\uff1a \u5305\u542b\u4e86 \\(S\\) \u4e2d\u6240\u6709\u70b9\uff0c\u5e76\u4e14\u5305\u542b \\(S\\) \u4e2d\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u7684 LCA \u7684\u4e00\u68f5\u6811\u3002 \u5927\u6982\u957f\u8fd9\u6837\uff1a \u5176\u4e2d\u7ea2\u8272\u8282\u70b9\u4e3a \\(S\\) \u4e2d\u7684\u8282\u70b9\uff0c\u6211\u4eec\u79f0\u4e3a \u5173\u952e\u70b9 \uff0c\u84dd\u8272\u8282\u70b9\u5219\u662f LCA\uff08\u865a\u6811\u4e2d\u7684\u975e\u5173\u952e\u70b9\uff09\u3002 \u53ef\u4ee5\u6ce8\u610f\u5230\uff0c\u865a\u6811\u4e0d\u4f1a\u6539\u53d8\u539f\u6811\u4e0a\u7684\u7956\u5148\u5173\u7cfb\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b9e\u9645\u4e0a\u865a\u6811\u662f\uff0c\u5c06\u539f\u6811\u4e2d\u5bf9\u4e8e\u5f53\u524d\u8be2\u95ee\u6ca1\u6709\u7528\u7684\u4e00\u4e9b\u8282\u70b9\u7ed9\u53bb\u6389\uff0c\u5f97\u5230\u7684\u4e00\u9897\u65b0\u6811\u3002 \u4fdd\u7559 LCA \u5c31\u662f\u56e0\u4e3a\uff0cLCA \u4e5f\u4f1a\u4fdd\u7559\u4e00\u4e9b\u539f\u95ee\u9898\u7684\u4fe1\u606f\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u628a\u865a\u6811\u770b\u4f5c\u201c\u5c06\u539f\u6811\u538b\u7f29\u4e86\u201d\uff0c\u6bd4\u5982\u6211\u4eec\u53ea\u5173\u5fc3 \\(\\delta(u,v)\\) \u7684\u4e00\u4e9b\u4fe1\u606f\uff0c\u4e0d\u5173\u5fc3\u4e0a\u9762\u7684\u8282\u70b9\u3002 \u6211\u4eec\u5c31\u76f4\u63a5\u628a \\(\\delta(u, v)\\) \u538b\u6210\u4e00\u6761\u8fb9 \\((u \\to v)\\) \u5c31\u884c\u4e86\uff0c\uff08\u7528\u4e8e\u8282\u7701\u7a7a\u95f4\u7684\u538b\u7f29 01trie \u5c31\u7528\u4e86\u540c\u6837\u7684\u601d\u60f3\uff09\u3002 \u7136\u540e\u53ea\u9700\u8981\u5728\u65b0\u6811\u4e0a\u5904\u7406\u95ee\u9898\u5c31\u53ef\u4ee5\u4e86\u3002","title":"\u6982\u8ff0"},{"location":"algor/graph/virtual-tree/#_2","text":"\u4e00\u79cd\u505a\u6cd5\u662f\u76f4\u63a5\u6309\u7167 dfn \u6392\u5e8f\uff0c\u7136\u540e\u76f8\u90bb\u7684\u4e24\u4e2a\u8282\u70b9\u6c42 LCA\uff0c\u53bb\u91cd\u3002 \u4f46\u662f\u8fd9\u4e2a\u6bd4\u8f83\u9ebb\u70e6\uff0c\u4e0d\u5982\u4f7f\u7528\u5355\u8c03\u6808\u7684\u6784\u9020\u65b9\u6cd5\uff0c\u6240\u4ee5\u8fd9\u91cc\u53ea\u8bb2\u5355\u8c03\u6808\u505a\u6cd5\u3002 \u8fd9\u4e2a\u505a\u6cd5\u7684\u601d\u60f3\u662f\uff0c \u6bcf\u6b21\u53ea\u7ef4\u62a4\u865a\u6811\u7684\u4e00\u6761\u94fe \u3002 \u9996\u5148\u628a\u6811\u6839 ( \\(1\\) \u53f7\u8282\u70b9) \u5165\u6808\uff0c\u5e76\u4e14\uff0c\u6211\u4eec\u4fdd\u8bc1\u5355\u8c03\u6808\u4ece\u9876\u5230\u5e95\uff0c\u8282\u70b9\u7684 dfn \u5355\u8c03\u9012\u51cf\u3002 \u7136\u540e\u8003\u8651\uff0c\u5f53\u524d\u7684\u6808\u9876\u662f \\(top\\) \uff0c\u52a0\u5165\u8282\u70b9\u662f \\(nw\\) \uff0c\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\uff1a \\(\\text{LCA}(top, nw) = top\\) \uff0c\u8bc1\u660e \\(nw\\) \u662f\u5f53\u524d\u94fe\u4e0a\u7684\u8282\u70b9\uff0c\u76f4\u63a5\u52a0\u5165\u5373\u53ef\u3002 \u5426\u5219\uff0c\u8003\u8651\u6808\u4e2d\u6b21\u5927\u8282\u70b9 \\(stop\\) \u4e0e \\(\\text{LCA}(top, nw)\\) \u7684\u5173\u7cfb\uff0c\u663e\u7136\u6b64\u65f6\u5df2\u7ecf\u7ef4\u62a4\u5b8c\u4e86\u4e0a\u4e00\u6761\u94fe\uff0c\u7136\u540e\u6211\u4eec\u8003\u8651\uff1a \u5982\u679c \\(dfn(stop) > dfn(\\text{LCA}(top, nw))\\) \uff0c\u90a3\u4e48\u8bf4\u660e\uff0c \\(\\text{LCA}(top, nw)\\) \u5df2\u7ecf\u5728\u6808\u4e2d\u4e86\uff0c\u6b64\u65f6\u6211\u4eec\u4e0d\u65ad\u5f39\u6808\uff0c\u76f4\u5230 \\(top = \\text{LCA}\\) \uff0c\u5f39\u6808\u7684\u65f6\u5019\uff0c\u8bb0\u5f97\u8ba9\u88ab\u5f39\u51fa\u7684\u8282\u70b9\u548c\u5f39\u51fa\u540e\u7684\u6808\u9876\u8fde\u8fb9\uff08\u56e0\u4e3a\u5b83\u4eec\u662f\u7236\u5b50\u5173\u7cfb\uff09\u3002 \u5426\u5219\u8bc1\u660e \\(\\text{LCA}(top, nw)\\) \u8fd8\u6ca1\u6709\u5165\u6808\uff0c\u5148\u8fde \\(top\\) \u548c \\(\\text{LCA}\\) \uff0c\u7136\u540e\u7ee7\u7eed\u5f39\u6808\uff0c\u6700\u540e\u52a0\u5165 \\(\\text{LCA}\\) \u548c \\(nw\\) \u5373\u53ef\u3002 Code 1 \u6682\u7565","title":"\u6784\u5efa"},{"location":"algor/graph/virtual-tree/#_3","text":"\u300cSDOI2011\u300d\u6d88\u8017\u6218 \u9898\u76ee\u63cf\u8ff0 \u5728\u4e00\u573a\u6218\u4e89\u4e2d\uff0c\u6218\u573a\u7531 \\(n\\) \u4e2a\u5c9b\u5c7f\u548c \\(n-1\\) \u4e2a\u6865\u6881\u7ec4\u6210\uff0c\u4fdd\u8bc1\u6bcf\u4e24\u4e2a\u5c9b\u5c7f\u95f4\u6709\u4e14\u4ec5\u6709\u4e00\u6761\u8def\u5f84\u53ef\u8fbe\u3002\u73b0\u5728\uff0c\u6211\u519b\u5df2\u7ecf\u4fa6\u67e5\u5230\u654c\u519b\u7684\u603b\u90e8\u5728\u7f16\u53f7\u4e3a \\(1\\) \u7684\u5c9b\u5c7f\uff0c\u800c\u4e14\u4ed6\u4eec\u5df2\u7ecf\u6ca1\u6709\u8db3\u591f\u591a\u7684\u80fd\u6e90\u7ef4\u7cfb\u6218\u6597\uff0c\u6211\u519b\u80dc\u5229\u5728\u671b\u3002\u5df2\u77e5\u5728\u5176\u4ed6 \\(k\\) \u4e2a\u5c9b\u5c7f\u4e0a\u6709\u4e30\u5bcc\u80fd\u6e90\uff0c\u4e3a\u4e86\u9632\u6b62\u654c\u519b\u83b7\u53d6\u80fd\u6e90\uff0c\u6211\u519b\u7684\u4efb\u52a1\u662f\u70b8\u6bc1\u4e00\u4e9b\u6865\u6881\uff0c\u4f7f\u5f97\u654c\u519b\u4e0d\u80fd\u5230\u8fbe\u4efb\u4f55\u80fd\u6e90\u4e30\u5bcc\u7684\u5c9b\u5c7f\u3002\u7531\u4e8e\u4e0d\u540c\u6865\u6881\u7684\u6750\u8d28\u548c\u7ed3\u6784\u4e0d\u540c\uff0c\u6240\u4ee5\u70b8\u6bc1\u4e0d\u540c\u7684\u6865\u6881\u6709\u4e0d\u540c\u7684\u4ee3\u4ef7\uff0c\u6211\u519b\u5e0c\u671b\u5728\u6ee1\u8db3\u76ee\u6807\u7684\u540c\u65f6\u4f7f\u5f97\u603b\u4ee3\u4ef7\u6700\u5c0f\u3002 \u4fa6\u67e5\u90e8\u95e8\u8fd8\u53d1\u73b0\uff0c\u654c\u519b\u6709\u4e00\u53f0\u795e\u79d8\u673a\u5668\u3002\u5373\u4f7f\u6211\u519b\u5207\u65ad\u6240\u6709\u80fd\u6e90\u4e4b\u540e\uff0c\u4ed6\u4eec\u4e5f\u53ef\u4ee5\u7528\u90a3\u53f0\u673a\u5668\u3002\u673a\u5668\u4ea7\u751f\u7684\u6548\u679c\u4e0d\u4ec5\u4ec5\u4f1a\u4fee\u590d\u6240\u6709\u6211\u519b\u70b8\u6bc1\u7684\u6865\u6881\uff0c\u800c\u4e14\u4f1a\u91cd\u65b0\u968f\u673a\u8d44\u6e90\u5206\u5e03\uff08\u4f46\u53ef\u4ee5\u4fdd\u8bc1\u7684\u662f\uff0c\u8d44\u6e90\u4e0d\u4f1a\u5206\u5e03\u5230 \\(1\\) \u53f7\u5c9b\u5c7f\u4e0a\uff09\u3002\u4e0d\u8fc7\u4fa6\u67e5\u90e8\u95e8\u8fd8\u53d1\u73b0\u4e86\u8fd9\u53f0\u673a\u5668\u53ea\u80fd\u591f\u4f7f\u7528 \\(m\\) \u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u628a\u6bcf\u6b21\u4efb\u52a1\u5b8c\u6210\u5373\u53ef\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 \\(n\\) \uff0c\u4ee3\u8868\u5c9b\u5c7f\u6570\u91cf\u3002 \u63a5\u4e0b\u6765 n-1 \u884c\uff0c\u6bcf\u884c\u4e09\u4e2a\u6574\u6570 \\(u,v,w\\) \uff0c\u4ee3\u8868 \\(u\\) \u53f7\u5c9b\u5c7f\u548c \\(v\\) \u53f7\u5c9b\u5c7f\u7531\u4e00\u6761\u4ee3\u4ef7\u4e3a \\(c\\) \u7684\u6865\u6881\u76f4\u63a5\u76f8\u8fde\uff0c\u4fdd\u8bc1 \\(1\\le u,v\\le n\\) \u4e14 \\(1\\le c\\le 10^5\\) \u3002 \u7b2c \\(n+1\\) \u884c\uff0c\u4e00\u4e2a\u6574\u6570 \\(m\\) \uff0c\u4ee3\u8868\u654c\u65b9\u673a\u5668\u80fd\u4f7f\u7528\u7684\u6b21\u6570\u3002 \u63a5\u4e0b\u6765 \\(m\\) \u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570 \\(k_i\\) \uff0c\u4ee3\u8868\u7b2c \\(i\\) \u6b21\u540e\uff0c\u6709 \\(k_i\\) \u4e2a\u5c9b\u5c7f\u8d44\u6e90\u4e30\u5bcc\uff0c\u63a5\u4e0b\u6765 \\(k\\) \u4e2a\u6574\u6570 \\(h_1,h_2,\\cdots ,h_k\\) \uff0c\u8868\u793a\u8d44\u6e90\u4e30\u5bcc\u5c9b\u5c7f\u7684\u7f16\u53f7\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u6709 \\(m\\) \u884c\uff0c\u5206\u522b\u4ee3\u8868\u6bcf\u6b21\u4efb\u52a1\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002 \u6570\u636e\u8303\u56f4 \u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff0c \\(2\\le n\\le 2.5\\times 10^5,m\\ge 1,\\sum k_i\\le 5\\times 10^5,1\\le k_i\\le n-1\\) \u3002 \u8003\u8651\u8bbe \\(dp(u)\\) \u8868\u793a\uff0c\u4f7f\u5f97 \\(u\\) \u548c\u5b83\u7684\u5b50\u6811\u4e2d\u4efb\u610f\u4e00\u4e2a\u5173\u952e\u70b9\u4e0d\u76f8\u8fde\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002 \u590d\u6742\u5ea6\u662f \\(O(nq)\\) \u7684\uff0c\u6ce8\u610f\u5230 \\(\\sum k_i \\le 5 \\times 10^5\\) \uff0c\u4e8e\u662f\u6211\u4eec\u76f4\u63a5\u628a\u5173\u952e\u70b9\u62d6\u51fa\u6765\u5efa\u865a\u6811\uff0c\u5728\u865a\u6811\u4e0a dp \u5373\u53ef\u3002 Code 1 \u6682\u7565","title":"\u4e60\u9898"},{"location":"algor/graph/basic/dfs-order/","text":"dfs \u5e8f \u03c8(\uff40\u2207\u00b4)\u03c8 \u6b64\u5904\u8bf4\u7684 dfs \u5e8f\u662f\u8bbf\u95ee\u5230\u8fd9\u4e2a\u8282\u70b9\u7684\u65f6\u95f4\u6233 dfn\u3002 \u6700\u91cd\u8981\u7684\u6027\u8d28\u5c31\u662f\uff0c\u5b50\u6811\u5185\u7684 dfn \u662f\u8fde\u7eed\u7684\u4e00\u6bb5\u533a\u95f4\u3002 \u6240\u4ee5\u53ef\u4ee5\u7528\u4e8e\u5b50\u6811\u7684\u64cd\u4f5c\u548c\u8be2\u95ee\u3002 \u62ec\u53f7\u5e8f \u03c8(\uff40\u2207\u00b4)\u03c8 dfs\uff0c\u8fdb\u5165\u67d0\u4e2a\u8282\u70b9\u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e2a\u5de6\u62ec\u53f7 ( \uff0c\u9000\u51fa\u67d0\u4e2a\u8282\u70b9\u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e2a\u53f3\u62ec\u53f7 ) \u3002 \u6bcf\u4e2a\u8282\u70b9\u4f1a\u51fa\u73b0\u4e24\u6b21\u3002\u76f8\u90bb\u4e24\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\u76f8\u5dee 1\u3002 \u8fd9\u4e2a\u4e1c\u897f\u5fc5\u7136\u662f\u4e00\u4e2a\u5408\u6cd5\u62ec\u53f7\u5e8f\u5217\uff0c\u5e76\u4e14\u4e00\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u914d\u5bf9\u7684\u4e00\u5bf9\u62ec\u53f7\u4e4b\u5185\u53ef\u4ee5\u4ee3\u8868\u8fd9\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u3002 \u6811\u4e0a\u83ab\u961f\u4f1a\u7528\u5230\u3002 \u6b27\u62c9\u5e8f \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e4b\u540e\u8865\u3002 dfs \u6811 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u91cc\u662f\u65e0\u5411\u56fe\u7684 dfs \u6811\u3002 \u6a2a\u53c9\u8fb9\u7684\u5b9a\u4e49\u548c\u5173\u4e8e\u8fde\u901a\u6027\u7684 tarjan \u7b97\u6cd5\u91cc\u9762\u4e00\u6837\u3002 \u56de\u8fb9\u5c31\u662f\u8fde\u901a dfs \u6811\u4e0a\u8282\u70b9\u548c\u7956\u5148\u8282\u70b9\u7684\u4e00\u6761\u975e dfs \u6811\u8fb9\u3002 \u6709\u4e00\u4e2a\u91cd\u8981\u7684\u6027\u8d28\uff1a \u65e0\u5411\u7b80\u5355\u8fde\u901a\u56fe \\(G\\) \u7684\u975e dfs \u6811\u8fb9\uff0c\u90fd\u4e0d\u662f\u6a2a\u53c9\u8fb9\uff08\u5168\u90e8\u90fd\u662f\u56de\u8fb9\uff09\u3002 Proof: \u8bc1\u660e\uff1a\u5047\u8bbe\u6709\u4e00\u6761\u8fb9 \\(u \\to v\\) \uff0cdfs \u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86 \\(u\\) \u4f46\u8fd8\u6ca1\u8bbf\u95ee\u5230 \\(v\\) \u3002 \u7136\u540e\u4f1a\u6709\u4e24\u79cd\u60c5\u51b5\uff0c \u5982\u679c\u6cbf\u7740 \\(u\\to v\\) \u8fd9\u6761\u8fb9\uff0cdfs \u7531 \\(u\\) \u53bb\u5411 \\(v\\) \uff0c\u90a3\u4e48 \\(u\\to v\\) \u5c31\u662f\u4e00\u6761\u6811\u8fb9\u3002 \u5982\u679c\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u6ca1\u6709\u6cbf\u7740 \\(u\\to v\\) \u8fd9\u6761\u8fb9\u4ece \\(u\\) \u8d70\u5230 \\(v\\) \uff0c \u90a3\u4e48\u8bc1\u660e\u6700\u540e\u8bbf\u95ee\u5230 \\(v\\) \u7684\u65f6\u5019\uff0c\u662f\u4ece \\(u\\) \u51fa\u53d1\u8d70\u4e86\u53e6\u5916\u4e00\u6761\u8def\u5f84\uff0c\u7136\u540e\u518d\u5230 \\(v\\) \u7684\u3002 \u6240\u4ee5 \\(v\\) \u5c31\u4e00\u5b9a\u662f \\(u\\) \u7684\u4e00\u4e2a\u5b50\u5b59\u8282\u70b9\uff0c \\(u\\to v\\) \u5c31\u662f\u4e00\u6761\u56de\u8fb9\u3002 \u53ef\u4ee5\u770b\u4e00\u770b\u6765\u81ea https://codeforces.com/blog/entry/68138 \u7684\u4e00\u5f20\u56fe\u7406\u89e3\u4e00\u4e0b\uff1a bfs \u6811 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u91cc\u662f\u65e0\u5411\u56fe\u7684 bfs \u6811\u3002 \u6709\u4e00\u4e2a\u91cd\u8981\u7684\u6027\u8d28\uff1a \u65e0\u5411\u7b80\u5355\u8fde\u901a\u56fe \\(G\\) \u7684\u975e bfs \u6811\u8fb9\uff0c\u90fd\u662f\u6a2a\u53c9\u8fb9\uff08\u5168\u90e8\u90fd\u4e0d\u662f\u56de\u8fb9\uff09\u3002 \u4e14\u8fd9\u4e9b\u8fb9\u8fde\u63a5\u7684\u8282\u70b9\u7684\u5c42\u6570\u5dee\u7684\u7edd\u5bf9\u503c\u5c0f\u4e8e\u7b49\u4e8e \\(1\\) \u3002 Proof: \u6211\u4eec\u53ef\u4ee5\u7c7b\u6bd4 dfs \u6811\u90a3\u91cc\u7684\u8fc7\u7a0b\u3002 \u8003\u8651\u5b58\u5728\u4e00\u6761\u8fb9 \\(u \\to v\\) \uff0c\u5e76\u4e14\u6b64\u65f6\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86 \\(u\\) \uff0c\u6ca1\u6709\u8bbf\u95ee \\(v\\) . \u90a3\u4e48\u4f1a\u6709\u4ee5\u4e0b\u7684\u91cf\u79cd\u60c5\u51b5\uff1a 1\uff1a\u5982\u679c\u6cbf\u7740 \\(u \\to v\\) \u8fd9\u6761\u8fb9\u8bbf\u95ee\u4e86 \\(v\\) \uff0c\u90a3\u4e48 \\(u \\to v\\) \u5c31\u662f\u6811\u8fb9\u3002 2\uff1a\u5982\u679c\u6ca1\u6709\u6cbf\u7740 \\(u \\to v\\) \u8fd9\u6761\u8fb9\u8bbf\u95ee \\(v\\) \uff0c\u56e0\u4e3a bfs \u662f\u6309\u5c42\u6269\u5c55\u7684\uff0c\u6240\u4ee5 \\(u\\) \u7684\u4e0b\u4e00\u6b21\u5fc5\u7136\u4f1a\u6269\u5c55\u5230 \\(v\\) \u3002 \u4f46\u662f \\(v\\) \u6ca1\u6709\u901a\u8fc7 \\(u\\) \u6269\u5c55\u5230\uff0c\u6240\u4ee5\u7b2c\u4e00\u79cd\u53ef\u80fd\u5c31\u662f\u5b83\u662f\u548c \\(u\\) \u540c\u5c42\u7684\u8282\u70b9\uff0c\u88ab\u540c\u65f6\u6269\u5c55\u8fc7\u3002 \u4e5f\u6709\u4e00\u79cd\u53ef\u80fd\u662f \\(u\\) \u786e\u5b9e\u80fd\u6269\u5c55\u5230 \\(v\\) \uff0c\u4f46\u662f\u548c \\(u\\) \u540c\u5c42\u7684\u67d0\u4e2a\u8282\u70b9\u4e5f\u80fd\u6269\u5c55\u5230 \\(v\\) \uff0c\u90a3\u4e48 \\(u\\) \u5c31\u6ca1\u6cd5\u6269\u5c55\u5230 \\(v\\) \u3002 \u6700\u540e\u7684\u4e00\u79cd\u53ef\u80fd\u662f \\(v\\) \u662f \\(u\\) \u7684\u4e0a\u5c42\u8282\u70b9\uff0c\u8fd9\u662f\u4e0d\u53ef\u80fd\u51fa\u73b0\u7684\uff0c\u56e0\u4e3a\u8fd9\u6837\u7684\u8bdd\u80af\u5b9a\u662f \\(v\\) \u5148\u88ab\u6269\u5c55\u5230\u3002 \u6240\u4ee5\u7edd\u5bf9\u503c\u7684\u7ed3\u8bba\u53ef\u4ee5\u7528\u60c5\u51b5 2 \u7684\u7b2c\u4e00\u4e8c\u79cd\u53ef\u80fd\u8bc1\u660e\uff0c\u5176\u4ed6\u7684\u53ef\u4ee5\u7528\u6765\u8bc1\u660e\u6a2a\u53c9\u8fb9\u7684\u7ed3\u8bba\u3002","title":"DFS \u5e8f\u76f8\u5173"},{"location":"algor/graph/basic/dfs-order/#dfs","text":"\u6b64\u5904\u8bf4\u7684 dfs \u5e8f\u662f\u8bbf\u95ee\u5230\u8fd9\u4e2a\u8282\u70b9\u7684\u65f6\u95f4\u6233 dfn\u3002 \u6700\u91cd\u8981\u7684\u6027\u8d28\u5c31\u662f\uff0c\u5b50\u6811\u5185\u7684 dfn \u662f\u8fde\u7eed\u7684\u4e00\u6bb5\u533a\u95f4\u3002 \u6240\u4ee5\u53ef\u4ee5\u7528\u4e8e\u5b50\u6811\u7684\u64cd\u4f5c\u548c\u8be2\u95ee\u3002","title":"dfs \u5e8f"},{"location":"algor/graph/basic/dfs-order/#_1","text":"dfs\uff0c\u8fdb\u5165\u67d0\u4e2a\u8282\u70b9\u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e2a\u5de6\u62ec\u53f7 ( \uff0c\u9000\u51fa\u67d0\u4e2a\u8282\u70b9\u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e2a\u53f3\u62ec\u53f7 ) \u3002 \u6bcf\u4e2a\u8282\u70b9\u4f1a\u51fa\u73b0\u4e24\u6b21\u3002\u76f8\u90bb\u4e24\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\u76f8\u5dee 1\u3002 \u8fd9\u4e2a\u4e1c\u897f\u5fc5\u7136\u662f\u4e00\u4e2a\u5408\u6cd5\u62ec\u53f7\u5e8f\u5217\uff0c\u5e76\u4e14\u4e00\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u914d\u5bf9\u7684\u4e00\u5bf9\u62ec\u53f7\u4e4b\u5185\u53ef\u4ee5\u4ee3\u8868\u8fd9\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u3002 \u6811\u4e0a\u83ab\u961f\u4f1a\u7528\u5230\u3002","title":"\u62ec\u53f7\u5e8f"},{"location":"algor/graph/basic/dfs-order/#_2","text":"\u4e4b\u540e\u8865\u3002","title":"\u6b27\u62c9\u5e8f"},{"location":"algor/graph/basic/dfs-order/#dfs_1","text":"\u8fd9\u91cc\u662f\u65e0\u5411\u56fe\u7684 dfs \u6811\u3002 \u6a2a\u53c9\u8fb9\u7684\u5b9a\u4e49\u548c\u5173\u4e8e\u8fde\u901a\u6027\u7684 tarjan \u7b97\u6cd5\u91cc\u9762\u4e00\u6837\u3002 \u56de\u8fb9\u5c31\u662f\u8fde\u901a dfs \u6811\u4e0a\u8282\u70b9\u548c\u7956\u5148\u8282\u70b9\u7684\u4e00\u6761\u975e dfs \u6811\u8fb9\u3002 \u6709\u4e00\u4e2a\u91cd\u8981\u7684\u6027\u8d28\uff1a \u65e0\u5411\u7b80\u5355\u8fde\u901a\u56fe \\(G\\) \u7684\u975e dfs \u6811\u8fb9\uff0c\u90fd\u4e0d\u662f\u6a2a\u53c9\u8fb9\uff08\u5168\u90e8\u90fd\u662f\u56de\u8fb9\uff09\u3002 Proof: \u8bc1\u660e\uff1a\u5047\u8bbe\u6709\u4e00\u6761\u8fb9 \\(u \\to v\\) \uff0cdfs \u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86 \\(u\\) \u4f46\u8fd8\u6ca1\u8bbf\u95ee\u5230 \\(v\\) \u3002 \u7136\u540e\u4f1a\u6709\u4e24\u79cd\u60c5\u51b5\uff0c \u5982\u679c\u6cbf\u7740 \\(u\\to v\\) \u8fd9\u6761\u8fb9\uff0cdfs \u7531 \\(u\\) \u53bb\u5411 \\(v\\) \uff0c\u90a3\u4e48 \\(u\\to v\\) \u5c31\u662f\u4e00\u6761\u6811\u8fb9\u3002 \u5982\u679c\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u6ca1\u6709\u6cbf\u7740 \\(u\\to v\\) \u8fd9\u6761\u8fb9\u4ece \\(u\\) \u8d70\u5230 \\(v\\) \uff0c \u90a3\u4e48\u8bc1\u660e\u6700\u540e\u8bbf\u95ee\u5230 \\(v\\) \u7684\u65f6\u5019\uff0c\u662f\u4ece \\(u\\) \u51fa\u53d1\u8d70\u4e86\u53e6\u5916\u4e00\u6761\u8def\u5f84\uff0c\u7136\u540e\u518d\u5230 \\(v\\) \u7684\u3002 \u6240\u4ee5 \\(v\\) \u5c31\u4e00\u5b9a\u662f \\(u\\) \u7684\u4e00\u4e2a\u5b50\u5b59\u8282\u70b9\uff0c \\(u\\to v\\) \u5c31\u662f\u4e00\u6761\u56de\u8fb9\u3002 \u53ef\u4ee5\u770b\u4e00\u770b\u6765\u81ea https://codeforces.com/blog/entry/68138 \u7684\u4e00\u5f20\u56fe\u7406\u89e3\u4e00\u4e0b\uff1a","title":"dfs \u6811"},{"location":"algor/graph/basic/dfs-order/#bfs","text":"\u8fd9\u91cc\u662f\u65e0\u5411\u56fe\u7684 bfs \u6811\u3002 \u6709\u4e00\u4e2a\u91cd\u8981\u7684\u6027\u8d28\uff1a \u65e0\u5411\u7b80\u5355\u8fde\u901a\u56fe \\(G\\) \u7684\u975e bfs \u6811\u8fb9\uff0c\u90fd\u662f\u6a2a\u53c9\u8fb9\uff08\u5168\u90e8\u90fd\u4e0d\u662f\u56de\u8fb9\uff09\u3002 \u4e14\u8fd9\u4e9b\u8fb9\u8fde\u63a5\u7684\u8282\u70b9\u7684\u5c42\u6570\u5dee\u7684\u7edd\u5bf9\u503c\u5c0f\u4e8e\u7b49\u4e8e \\(1\\) \u3002 Proof: \u6211\u4eec\u53ef\u4ee5\u7c7b\u6bd4 dfs \u6811\u90a3\u91cc\u7684\u8fc7\u7a0b\u3002 \u8003\u8651\u5b58\u5728\u4e00\u6761\u8fb9 \\(u \\to v\\) \uff0c\u5e76\u4e14\u6b64\u65f6\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u4e86 \\(u\\) \uff0c\u6ca1\u6709\u8bbf\u95ee \\(v\\) . \u90a3\u4e48\u4f1a\u6709\u4ee5\u4e0b\u7684\u91cf\u79cd\u60c5\u51b5\uff1a 1\uff1a\u5982\u679c\u6cbf\u7740 \\(u \\to v\\) \u8fd9\u6761\u8fb9\u8bbf\u95ee\u4e86 \\(v\\) \uff0c\u90a3\u4e48 \\(u \\to v\\) \u5c31\u662f\u6811\u8fb9\u3002 2\uff1a\u5982\u679c\u6ca1\u6709\u6cbf\u7740 \\(u \\to v\\) \u8fd9\u6761\u8fb9\u8bbf\u95ee \\(v\\) \uff0c\u56e0\u4e3a bfs \u662f\u6309\u5c42\u6269\u5c55\u7684\uff0c\u6240\u4ee5 \\(u\\) \u7684\u4e0b\u4e00\u6b21\u5fc5\u7136\u4f1a\u6269\u5c55\u5230 \\(v\\) \u3002 \u4f46\u662f \\(v\\) \u6ca1\u6709\u901a\u8fc7 \\(u\\) \u6269\u5c55\u5230\uff0c\u6240\u4ee5\u7b2c\u4e00\u79cd\u53ef\u80fd\u5c31\u662f\u5b83\u662f\u548c \\(u\\) \u540c\u5c42\u7684\u8282\u70b9\uff0c\u88ab\u540c\u65f6\u6269\u5c55\u8fc7\u3002 \u4e5f\u6709\u4e00\u79cd\u53ef\u80fd\u662f \\(u\\) \u786e\u5b9e\u80fd\u6269\u5c55\u5230 \\(v\\) \uff0c\u4f46\u662f\u548c \\(u\\) \u540c\u5c42\u7684\u67d0\u4e2a\u8282\u70b9\u4e5f\u80fd\u6269\u5c55\u5230 \\(v\\) \uff0c\u90a3\u4e48 \\(u\\) \u5c31\u6ca1\u6cd5\u6269\u5c55\u5230 \\(v\\) \u3002 \u6700\u540e\u7684\u4e00\u79cd\u53ef\u80fd\u662f \\(v\\) \u662f \\(u\\) \u7684\u4e0a\u5c42\u8282\u70b9\uff0c\u8fd9\u662f\u4e0d\u53ef\u80fd\u51fa\u73b0\u7684\uff0c\u56e0\u4e3a\u8fd9\u6837\u7684\u8bdd\u80af\u5b9a\u662f \\(v\\) \u5148\u88ab\u6269\u5c55\u5230\u3002 \u6240\u4ee5\u7edd\u5bf9\u503c\u7684\u7ed3\u8bba\u53ef\u4ee5\u7528\u60c5\u51b5 2 \u7684\u7b2c\u4e00\u4e8c\u79cd\u53ef\u80fd\u8bc1\u660e\uff0c\u5176\u4ed6\u7684\u53ef\u4ee5\u7528\u6765\u8bc1\u660e\u6a2a\u53c9\u8fb9\u7684\u7ed3\u8bba\u3002","title":"bfs \u6811"},{"location":"algor/graph/basic/list-forward-star/","text":"\u6982\u8ff0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u94fe\u5f0f\u524d\u5411\u661f\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u90bb\u63a5\u8868\u7684\u7ed3\u6784\uff0c\u5927\u6982\u957f\u6210\u8fd9\u6837\u5b50\uff1a head \u5c31\u662f\u8868\u5934\uff0cNext \u8868\u793a\u5f53\u524d\u8282\u70b9\u6307\u5411\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0cver \u5219\u50a8\u5b58\u8fd9\u4e2a\u8282\u70b9\u5bf9\u5e94\u539f\u56fe\u7684\u54ea\u4e00\u4e2a\u9876\u70b9\u3002 \u5176\u672c\u8d28\u548c Vector \u662f\u7c7b\u4f3c\u7684\uff0c\u4f60\u53ef\u4ee5 \u7b80\u5355\u7684 \u7406\u89e3\u6210\u628a\u51e0\u4e2a Vector \u201c\u5806\u53e0\u201d \u5728\u4e00\u8d77\u3002 \u6bcf\u6b21\u63d2\u5165\u7684\u65f6\u5019\u662f\u5728\u94fe\u8868\u5f00\u5934\u63d2\u5165\uff0c\u6ce8\u610f\u8868\u5934\u4e5f\u662f\u8981\u50a8\u5b58\u5143\u7d20\u7684\u3002 \u7136\u540e\u56e0\u4e3a\u65e0\u5411\u56fe\u8981\u52a0\u53cd\u5411\u8fb9\uff0c\u4e00\u822c\u5728\u52a0\u7684\u65f6\u5019\u90fd\u662f\u8fde\u7eed\u52a0\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u6210\u5bf9\u53d8\u6362\u8bbf\u95ee\u53cd\u5411\u8fb9\u3002 \u5173\u4e8e\u5199\u6cd5\u95ee\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6211\u7684\u5199\u6cd5\u5f88\u5947\u602a\uff0c\u5de8 TM \u5947\u602a\uff1a 1 2 3 4 5 6 7 8 9 10 11 int tot = 0 ; struct Edge { int head , ver , Next , w ; } e [ si_m << 1 ]; inline void add ( int u , int v , int w ){ e [ ++ tot ]. ver = v , e [ tot ]. Next = e [ u ]. head , e [ u ]. head = tot , e [ tot ]. w = w ; } // \u8fb9\u7684\u7f16\u53f7\u4ece 1 \u5f00\u59cb // in main or other function: for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ //... } // clear for ( register int i = 0 ; i <= tot ; ++ i ) e [ i ]. head = 0 ; tot = 0 ; \u6b63\u5e38\u4eba\u4e00\u822c\u4f1a\u628a head \u63d0\u51fa\u6765\u65b9\u4fbf\u591a\u6d4b\u7684\u6e05\u7a7a\u3002 \u4f46\u662f\u6211\u4f1a\u5199 for(register int i=0;i<=tot;++i) e[i].head=0; \u8fd9\u6837\u5b50\u662f\u6ca1\u95ee\u9898\u7684\uff0c\u4f46\u6211\u4e4b\u524d\u72af\u8fc7\u4e00\u4e2a\u9519\u8bef\uff0c\u6211 for \u6e05\u7a7a\u7684\u65f6\u5019\u5199\u7684\u662f e[i].head=-1 \u3002 \u4f46\u662f\u904d\u5386\u7684\u65f6\u5019\u662f i=...;i;i=... \u8fd9\u79cd\u3002 \u7136\u540e\u5c31\u6302\u4e86\uff0c\u8c03\u4e86\u4e00\u4e2a\u4e0b\u5348\uff0c\u7528 GDB \u53d1\u73b0\u524d\u5411\u661f\u7684\u5199\u6cd5\u81ed\u4e86\uff08\u4e24\u4e09\u5e74\u4e86\u90fd\u6ca1\u51fa\u4e8b\uff0c\u4e5f\u6ca1\u53d1\u73b0\u2026\u2026 /ch \u7528 e[i].head=-1 \u6e05\u7a7a\u7684\u8bdd\u8fd9\u4e48\u5199\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 int tot = 0 ; int head [ si_n ]; struct Edge { int ver , Next , w ; } e [ si_m << 1 ]; inline void add ( int u , int v , int w ){ e [ tot ] = ( Edge ){ v , head [ u ], w }, head [ u ] = tot ++ ; } // \u8fb9\u7684\u7f16\u53f7\u4ece 0 \u5f00\u59cb // for ( register int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ //... } // clear memset ( head , -1 , sizeof head ); tot = 0 ; // \u4e0d\u7ba1\u6709\u6ca1\u6709\u591a\u6d4b\u90fd\u8981memset -1. \u7f51\u7edc\u6d41\u7684\u65f6\u5019\u8981\u6210\u5bf9\u53d8\u6362\uff0c\u6b63\u5e38\u4eba\u5e94\u8be5\u4f1a\u50cf\u4e0a\u9762\u8fd9\u6837\u5b50\u5199\u3002 \u5982\u679c\u975e\u8981\u7528\u7b2c\u4e00\u79cd\uff0c\u5c31\u521d\u59cb\u5316 tot=1 \uff0c\u4ece 2 \u5f00\u59cb\u7ed9\u8fb9\u7f16\u53f7\u3002","title":"\u94fe\u5f0f\u524d\u5411\u661f"},{"location":"algor/graph/basic/list-forward-star/#_1","text":"\u94fe\u5f0f\u524d\u5411\u661f\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u90bb\u63a5\u8868\u7684\u7ed3\u6784\uff0c\u5927\u6982\u957f\u6210\u8fd9\u6837\u5b50\uff1a head \u5c31\u662f\u8868\u5934\uff0cNext \u8868\u793a\u5f53\u524d\u8282\u70b9\u6307\u5411\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0cver \u5219\u50a8\u5b58\u8fd9\u4e2a\u8282\u70b9\u5bf9\u5e94\u539f\u56fe\u7684\u54ea\u4e00\u4e2a\u9876\u70b9\u3002 \u5176\u672c\u8d28\u548c Vector \u662f\u7c7b\u4f3c\u7684\uff0c\u4f60\u53ef\u4ee5 \u7b80\u5355\u7684 \u7406\u89e3\u6210\u628a\u51e0\u4e2a Vector \u201c\u5806\u53e0\u201d \u5728\u4e00\u8d77\u3002 \u6bcf\u6b21\u63d2\u5165\u7684\u65f6\u5019\u662f\u5728\u94fe\u8868\u5f00\u5934\u63d2\u5165\uff0c\u6ce8\u610f\u8868\u5934\u4e5f\u662f\u8981\u50a8\u5b58\u5143\u7d20\u7684\u3002 \u7136\u540e\u56e0\u4e3a\u65e0\u5411\u56fe\u8981\u52a0\u53cd\u5411\u8fb9\uff0c\u4e00\u822c\u5728\u52a0\u7684\u65f6\u5019\u90fd\u662f\u8fde\u7eed\u52a0\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u6210\u5bf9\u53d8\u6362\u8bbf\u95ee\u53cd\u5411\u8fb9\u3002","title":"\u6982\u8ff0"},{"location":"algor/graph/basic/list-forward-star/#_2","text":"\u6211\u7684\u5199\u6cd5\u5f88\u5947\u602a\uff0c\u5de8 TM \u5947\u602a\uff1a 1 2 3 4 5 6 7 8 9 10 11 int tot = 0 ; struct Edge { int head , ver , Next , w ; } e [ si_m << 1 ]; inline void add ( int u , int v , int w ){ e [ ++ tot ]. ver = v , e [ tot ]. Next = e [ u ]. head , e [ u ]. head = tot , e [ tot ]. w = w ; } // \u8fb9\u7684\u7f16\u53f7\u4ece 1 \u5f00\u59cb // in main or other function: for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ //... } // clear for ( register int i = 0 ; i <= tot ; ++ i ) e [ i ]. head = 0 ; tot = 0 ; \u6b63\u5e38\u4eba\u4e00\u822c\u4f1a\u628a head \u63d0\u51fa\u6765\u65b9\u4fbf\u591a\u6d4b\u7684\u6e05\u7a7a\u3002 \u4f46\u662f\u6211\u4f1a\u5199 for(register int i=0;i<=tot;++i) e[i].head=0; \u8fd9\u6837\u5b50\u662f\u6ca1\u95ee\u9898\u7684\uff0c\u4f46\u6211\u4e4b\u524d\u72af\u8fc7\u4e00\u4e2a\u9519\u8bef\uff0c\u6211 for \u6e05\u7a7a\u7684\u65f6\u5019\u5199\u7684\u662f e[i].head=-1 \u3002 \u4f46\u662f\u904d\u5386\u7684\u65f6\u5019\u662f i=...;i;i=... \u8fd9\u79cd\u3002 \u7136\u540e\u5c31\u6302\u4e86\uff0c\u8c03\u4e86\u4e00\u4e2a\u4e0b\u5348\uff0c\u7528 GDB \u53d1\u73b0\u524d\u5411\u661f\u7684\u5199\u6cd5\u81ed\u4e86\uff08\u4e24\u4e09\u5e74\u4e86\u90fd\u6ca1\u51fa\u4e8b\uff0c\u4e5f\u6ca1\u53d1\u73b0\u2026\u2026 /ch \u7528 e[i].head=-1 \u6e05\u7a7a\u7684\u8bdd\u8fd9\u4e48\u5199\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 int tot = 0 ; int head [ si_n ]; struct Edge { int ver , Next , w ; } e [ si_m << 1 ]; inline void add ( int u , int v , int w ){ e [ tot ] = ( Edge ){ v , head [ u ], w }, head [ u ] = tot ++ ; } // \u8fb9\u7684\u7f16\u53f7\u4ece 0 \u5f00\u59cb // for ( register int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ //... } // clear memset ( head , -1 , sizeof head ); tot = 0 ; // \u4e0d\u7ba1\u6709\u6ca1\u6709\u591a\u6d4b\u90fd\u8981memset -1. \u7f51\u7edc\u6d41\u7684\u65f6\u5019\u8981\u6210\u5bf9\u53d8\u6362\uff0c\u6b63\u5e38\u4eba\u5e94\u8be5\u4f1a\u50cf\u4e0a\u9762\u8fd9\u6837\u5b50\u5199\u3002 \u5982\u679c\u975e\u8981\u7528\u7b2c\u4e00\u79cd\uff0c\u5c31\u521d\u59cb\u5316 tot=1 \uff0c\u4ece 2 \u5f00\u59cb\u7ed9\u8fb9\u7f16\u53f7\u3002","title":"\u5173\u4e8e\u5199\u6cd5\u95ee\u9898"},{"location":"algor/graph/basic/simple-graph-theory-problem/","text":"\u62d3\u6251\u6392\u5e8f \u03c8(\uff40\u2207\u00b4)\u03c8 \u7528\u6765\u7ed9\u4e00\u4e2a DAG \u6392\u5e8f\u3002 \u6392\u5e8f\u8fc7\u540e\uff0c\u5bf9\u4e8e\u6240\u6709\u6709\u5411\u8fb9 \\((u\\to v)\\) \u6ee1\u8db3\uff0c \\(v\\) \u4e00\u5b9a\u5728 \\(u\\) \u7684\u540e\u9762\u3002 \u505a\u6cd5\u5f88\u7b80\u5355\uff0c\u5148\u628a\u6240\u6709 \\(0\\) \u5165\u5ea6\u7684\u70b9\u5165\u961f\u3002 \u7136\u540e\u505a\u4e00\u4e2a\u7c7b\u4f3c BFS \u7684\u8fc7\u7a0b\uff0c\u8fc7\u7a0b\u5f53\u4e2d\u8981\u8bb0\u5f97\u5220\u8fb9\u548c\u70b9\uff0c\u5982\u679c\u51fa\u73b0\u4e86\u65b0\u7684 \\(0\\) \u5165\u5ea6\u70b9\uff0c\u5c31\u5165\u961f\u3002 \u5728\u5224\u5b9a\u4e25\u683c\u504f\u5e8f\u8fd9\u79cd\u5bf9\u5e94 DAG \u7684\u5173\u7cfb\u6210\u4e0d\u6210\u7acb\u7684\u65f6\u5019\u4e5f\u53ef\u4ee5\u4f7f\u7528\u62d3\u6251\u6392\u5e8f\u5224\u5b9a\u548c\u6784\u9020\u89e3\u3002 \uff08\u5982\u679c\u6709\u73af\u5c31\u662f\u65e0\u89e3\uff0c\u5bf9\u5e94\u5230\u62d3\u6251\u6392\u5e8f\u5c31\u662f\u6700\u540e\u59cb\u7ec8\u5b58\u5728\u975e \\(0\\) \u5165\u5ea6\u70b9\u3002\uff09 Code 1 2 3 4 5 6 7 8 9 10 int cnt = 0 ; std :: queue < int > q ; for ( int i = 1 ; i <= n ; ++ i ) if ( ! ind [ i ]) q . push ( i ); while ( ! q . empty ()) { int u = q . front (); q . pop (); ord [ u ] = ++ cnt ; // topo \u5e8f for ( auto v : G [ u ]) if ( ! ( -- ind [ v ])) q . push ( v ); // \u5220\u6389\u8fb9\uff0c\u987a\u4fbf\u5224\u4e00\u4e0b\u8981\u4e0d\u8981\u5165\u961f\u3002 } \u62d3\u6251\u5e8f\u8fd8\u53ef\u4ee5\u7528\u6765\u8f6c\u79fb DP\u3002 \u4e00\u822c\u8f6c\u79fb\u7684\u65f6\u5019\u4e0d\u662f\u627e\u4e0a\u4e00\u4e2a\uff08\u524d\u9a71\uff09\uff0c\u800c\u662f\u4ece\u5f53\u524d\u7684\u63a8\u5230\u540e\u4e00\u4e2a\uff08\u540e\u7ee7\uff09\u3002 \u6309\u62d3\u6251\u5e8f\u679a\u4e3e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u518d\u679a\u4e3e\u5b83\u7684\u6bcf\u4e00\u4e2a\u51fa\u8fb9\uff0c\u8fdb\u884c\u9012\u63a8\u5373\u53ef\u3002 \u6b27\u62c9\u56fe \u03c8(\uff40\u2207\u00b4)\u03c8 \u5177\u6709\u6b27\u62c9\u56de\u8def\u7684\u65e0\u5411\u56fe\u6216\u6709\u5411\u56fe\u79f0\u4e3a\u6b27\u62c9\u56fe\u3002 \u5177\u6709\u6b27\u62c9\u8def\u4f46\u4e0d\u5177\u6709\u6b27\u62c9\u56de\u8def\u7684\u65e0\u5411\u56fe\u6216\u6709\u5411\u56fe\u79f0\u4e3a\u534a\u6b27\u62c9\u56fe\u3002 \u6b27\u62c9\u56fe\u4e2d\u6240\u6709\u9876\u70b9\u7684\u5ea6\u6570\u90fd\u662f\u5076\u6570\u3002 \u82e5 \\(G\\) \u662f\u6b27\u62c9\u56fe\uff0c\u5219\u5b83\u4e3a\u82e5\u5e72\u4e2a\u73af\u7684\u5e76\uff0c\u4e14\u6bcf\u6761\u8fb9\u88ab\u5305\u542b\u5728\u5947\u6570\u4e2a\u73af\u5185\u3002 \u6b27\u62c9\u8def \u03c8(\uff40\u2207\u00b4)\u03c8 \u901a\u8fc7\u56fe\u4e2d\u6240\u6709\u8fb9\u6070\u597d\u4e00\u6b21\u7684\u901a\u8def\u79f0\u4e3a\u6b27\u62c9\u8def\u3002 \u5c31\u662f\u4ece\u67d0\u70b9\u5f00\u59cb\u7684\u4e00\u7b14\u753b\u95ee\u9898\uff08\u53ef\u4ee5\u7ecf\u8fc7\u4e00\u4e2a\u70b9\u591a\u6b21\uff09\u3002 \u6709\u5411\u8054\u901a\u56fe\u5b58\u5728\u6b27\u62c9\u8def\u7684\u5145\u8981\u6761\u4ef6 \u8981\u4e48\u6240\u6709\u70b9\u7684\u51fa\u5ea6\u5747\u7b49\u4e8e\u5165\u5ea6 \u8981\u4e48\u9664\u4e86\u4e24\u4e2a\u70b9\u4e4b\u5916\uff0c\u5176\u4f59\u6240\u6709\u70b9\u7684\u51fa\u5ea6\u5747\u7b49\u4e8e\u5165\u5ea6 \u3002 \u5269\u4f59\u7684\u4e24\u4e2a\u70b9:\u4e00\u4e2a\u6ee1\u8db3\u51fa\u5ea6\u51cf\u53bb\u5165\u5ea6\u7b49\u4e8e \\(1\\) (\u8d77\u70b9) \uff0c\u4e00\u4e2a\u6ee1\u8db3\u5165\u5ea6\u51cf\u53bb\u51fa\u5ea6\u7b49\u4e8e \\(1\\) (\u7ec8\u70b9)\u3002 \u65e0\u5411\u8054\u901a\u56fe\u5b58\u5728\u6b27\u62c9\u8def\u7684\u5145\u8981\u6761\u4ef6\uff1a\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\u53ea\u80fd\u6709 \\(0\\) \u6216 \\(2\\) \u4e2a\u3002 \u6b27\u62c9\u56de\u8def \u03c8(\uff40\u2207\u00b4)\u03c8 \u901a\u8fc7\u56fe\u4e2d\u6240\u6709\u8fb9\u6070\u597d\u4e00\u6b21\u7684\u56de\u8def\u79f0\u4e3a\u6b27\u62c9\u56de\u8def\u3002 \u5c31\u662f\u4e00\u7b14\u753b\u4e14\u8981\u6c42\u56de\u5230\u8d77\u70b9\u3002 \u6709\u5411\u8054\u901a\u56fe\u5b58\u5728\u6b27\u62c9\u56de\u8def\u7684\u5145\u8981\u6761\u4ef6\uff1a\u6240\u6709\u70b9\u7684\u51fa\u5ea6\u5747\u7b49\u4e8e\u5165\u5ea6\u3002 \u65e0\u5411\u8054\u901a\u56fe\u5b58\u5728\u6b27\u62c9\u56de\u8def\u7684\u5145\u8981\u6761\u4ef6\uff1a\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\u53ea\u80fd\u6709 \\(0\\) \u4e2a\u3002 \u6c42\u5177\u4f53\u65b9\u6848 \u7528 dfs \u5c31\u884c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 std :: stack < int > s ; inline void dfs ( int u ){ for ( register int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( ! vis [ i ]){ // \u5f53\u524d\u8fb9\u6ca1\u6709\u8bbf\u95ee\u8fc7 vis [ i ] = true ; // \u6ce8\u610f\u4e00\u5b9a\u8981\u8bbf\u95ee\u5230\u5c31\u76f4\u63a5\u6807\u8bb0\uff0c\u4e0d\u7136\u590d\u6742\u5ea6\u4f1a\u5047\u3002 dfs ( v ), s . push ( v ); } } } // in main() dfs ( 1 ); // \u56e0\u4e3a\u6709\u6b27\u62c9\u56de\u8def\uff0c\u6240\u4ee5\u5176\u5b9e\u4ece\u54ea\u4e2a\u70b9\u5f00\u59cb\u90fd\u4e00\u6837\u3002 vector < int > ans ; while ( ! s . empty ()) ans . push_back ( s . top ()), s . pop (); reverse ( ans . begin (), ans . end ()); for ( auto x : ans ) cout << x << \" \" ; // \u5012\u5e8f\u8f93\u51fa\u3002 \u6b27\u62c9\u8def\u7684\u8bdd\u4e5f\u5dee\u4e0d\u591a\uff0c\u5982\u679c\u56fe\u672c\u8eab\u662f\u6b27\u62c9\u56fe\u76f4\u63a5\u5f53\u56de\u8def\u8dd1\uff0c\u5982\u679c\u662f\u534a\u6b27\u62c9\u56fe\u5c31\u76f4\u63a5\u628a\u591a\u51fa\u6765\u7684\u90a3\u4e24\u4e2a\u70b9\u8fde\u8fb9\u8dd1\u6b27\u62c9\u56de\u8def\u6700\u540e\u5220\u6389\u52a0\u7684\u8fb9\u5373\u53ef\u3002 \u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u56de\u8def/\u8def\u5f84\u53ef\u4ee5\u770b 221025C \u6a21\u62df\u8d5b\u7684 D \u9898 \u54c8\u5bc6\u987f\u56fe \u03c8(\uff40\u2207\u00b4)\u03c8 \u6458\u81ea OI-Wiki \u5b9a\u4e49 \u03c8(\uff40\u2207\u00b4)\u03c8 \u901a\u8fc7\u56fe\u4e2d\u6240\u6709\u9876\u70b9\u4e00\u6b21\u4e14\u4ec5\u4e00\u6b21\u7684\u901a\u8def\u79f0\u4e3a\u54c8\u5bc6\u987f\u901a\u8def\u3002 \u901a\u8fc7\u56fe\u4e2d\u6240\u6709\u9876\u70b9\u4e00\u6b21\u4e14\u4ec5\u4e00\u6b21\u7684\u56de\u8def\u79f0\u4e3a\u54c8\u5bc6\u987f\u56de\u8def\u3002 \u5177\u6709\u54c8\u5bc6\u987f\u56de\u8def\u7684\u56fe\u79f0\u4e3a\u54c8\u5bc6\u987f\u56fe\u3002 \u5177\u6709\u54c8\u5bc6\u987f\u901a\u8def\u800c\u4e0d\u5177\u6709\u54c8\u5bc6\u987f\u56de\u8def\u7684\u56fe\u79f0\u4e3a\u534a\u54c8\u5bc6\u987f\u56fe\u3002 \u6027\u8d28 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8bbe \\(G=<V, E>\\) \u662f\u54c8\u5bc6\u987f\u56fe\uff0c\u5219\u5bf9\u4e8e \\(V\\) \u7684\u4efb\u610f\u975e\u7a7a\u771f\u5b50\u96c6 \\(V_1\\) \uff0c\u5747\u6709 \\(p(G-V_1) \\leq |V_1|\\) \u3002\u5176\u4e2d \\(p(x)\\) \u4e3a \\(x\\) \u7684\u8fde\u901a\u5206\u652f\u6570\u3002 \u63a8\u8bba\uff1a\u8bbe \\(G=<V, E>\\) \u662f\u534a\u54c8\u5bc6\u987f\u56fe\uff0c\u5219\u5bf9\u4e8e \\(V\\) \u7684\u4efb\u610f\u975e\u7a7a\u771f\u5b50\u96c6 \\(V_1\\) \uff0c\u5747\u6709 \\(p(G-V_1) \\leq |V_1|+1\\) \u3002\u5176\u4e2d \\(p(x)\\) \u4e3a \\(x\\) \u7684\u8fde\u901a\u5206\u652f\u6570\u3002 \u5b8c\u5168\u56fe \\(K_{2k+1} (k \\geq 1)\\) \u4e2d\u542b \\(k\\) \u6761\u8fb9\u4e0d\u91cd\u7684\u54c8\u5bc6\u987f\u56de\u8def\uff0c\u4e14\u8fd9 \\(k\\) \u6761\u8fb9\u4e0d\u91cd\u7684\u54c8\u5bc6\u987f\u56de\u8def\u542b \\(K_{2k+1}\\) \u4e2d\u7684\u6240\u6709\u8fb9\u3002 \u5b8c\u5168\u56fe \\(K_{2k} (k \\geq 2)\\) \u4e2d\u542b \\(k-1\\) \u6761\u8fb9\u4e0d\u91cd\u7684\u54c8\u5bc6\u987f\u56de\u8def\uff0c\u4ece \\(K_{2k}\\) \u4e2d\u5220\u9664\u8fd9 \\(k-1\\) \u6761\u8fb9\u4e0d\u91cd\u7684\u54c8\u5bc6\u987f\u56de\u8def\u540e\u6240\u5f97\u56fe\u542b \\(k\\) \u6761\u4e92\u4e0d\u76f8\u90bb\u7684\u8fb9\u3002 \u5145\u5206\u6761\u4ef6 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8bbe \\(G\\) \u662f \\(n(n \\geq 2)\\) \u7684\u65e0\u5411\u7b80\u5355\u56fe\uff0c\u82e5\u5bf9\u4e8e \\(G\\) \u4e2d\u4efb\u610f\u4e0d\u76f8\u90bb\u7684\u9876\u70b9 \\(v_i, v_j\\) \uff0c\u5747\u6709 \\(d(v_i)+ d(v_j) \\geq n - 1\\) \uff0c\u5219 \\(G\\) \u4e2d\u5b58\u5728\u54c8\u5bc6\u987f\u901a\u8def\u3002 \u63a8\u8bba 1\uff1a\u8bbe \\(G\\) \u662f \\(n(n \\geq 3)\\) \u7684\u65e0\u5411\u7b80\u5355\u56fe\uff0c\u82e5\u5bf9\u4e8e \\(G\\) \u4e2d\u4efb\u610f\u4e0d\u76f8\u90bb\u7684\u9876\u70b9 \\(v_i, v_j\\) \uff0c\u5747\u6709 \\(d(v_i)+ d(v_j) \\geq n\\) \uff0c\u5219 \\(G\\) \u4e2d\u5b58\u5728\u54c8\u5bc6\u987f\u56de\u8def\uff0c\u4ece\u800c \\(G\\) \u4e3a\u54c8\u5bc6\u987f\u56fe\u3002 \u63a8\u8bba 2\uff1a\u8bbe \\(G\\) \u662f \\(n(n \\geq 3)\\) \u7684\u65e0\u5411\u7b80\u5355\u56fe\uff0c\u82e5\u5bf9\u4e8e \\(G\\) \u4e2d\u4efb\u610f\u9876\u70b9 \\(v_i\\) \uff0c\u5747\u6709 \\(d(v_i) \\geq \\frac{n}{2}\\) \uff0c\u5219 \\(G\\) \u4e2d\u5b58\u5728\u54c8\u5bc6\u987f\u56de\u8def\uff0c\u4ece\u800c \\(G\\) \u4e3a\u54c8\u5bc6\u987f\u56fe\u3002 \u8bbe \\(D\\) \u4e3a \\(n(n \\geq 2)\\) \u9636\u7ade\u8d5b\u56fe\uff0c\u5219 \\(D\\) \u5177\u6709\u54c8\u5bc6\u987f\u901a\u8def\u3002 \u82e5 \\(D\\) \u542b \\(n(n \\geq 2)\\) \u9636\u7ade\u8d5b\u56fe\u4f5c\u4e3a\u5b50\u56fe\uff0c\u5219 \\(D\\) \u5177\u6709\u54c8\u5bc6\u987f\u901a\u8def\u3002 \u5f3a\u8fde\u901a\u7684\u7ade\u8d5b\u56fe\u4e3a\u54c8\u5bc6\u987f\u56fe\u3002 \u82e5 \\(D\\) \u542b \\(n(n \\geq 2)\\) \u9636\u5f3a\u8fde\u901a\u7684\u7ade\u8d5b\u56fe\u4f5c\u4e3a\u5b50\u56fe\uff0c\u5219 \\(D\\) \u5177\u6709\u54c8\u5bc6\u987f\u56de\u8def\u3002","title":"\u7b80\u5355\u56fe\u8bba\u95ee\u9898"},{"location":"algor/graph/basic/simple-graph-theory-problem/#_1","text":"\u7528\u6765\u7ed9\u4e00\u4e2a DAG \u6392\u5e8f\u3002 \u6392\u5e8f\u8fc7\u540e\uff0c\u5bf9\u4e8e\u6240\u6709\u6709\u5411\u8fb9 \\((u\\to v)\\) \u6ee1\u8db3\uff0c \\(v\\) \u4e00\u5b9a\u5728 \\(u\\) \u7684\u540e\u9762\u3002 \u505a\u6cd5\u5f88\u7b80\u5355\uff0c\u5148\u628a\u6240\u6709 \\(0\\) \u5165\u5ea6\u7684\u70b9\u5165\u961f\u3002 \u7136\u540e\u505a\u4e00\u4e2a\u7c7b\u4f3c BFS \u7684\u8fc7\u7a0b\uff0c\u8fc7\u7a0b\u5f53\u4e2d\u8981\u8bb0\u5f97\u5220\u8fb9\u548c\u70b9\uff0c\u5982\u679c\u51fa\u73b0\u4e86\u65b0\u7684 \\(0\\) \u5165\u5ea6\u70b9\uff0c\u5c31\u5165\u961f\u3002 \u5728\u5224\u5b9a\u4e25\u683c\u504f\u5e8f\u8fd9\u79cd\u5bf9\u5e94 DAG \u7684\u5173\u7cfb\u6210\u4e0d\u6210\u7acb\u7684\u65f6\u5019\u4e5f\u53ef\u4ee5\u4f7f\u7528\u62d3\u6251\u6392\u5e8f\u5224\u5b9a\u548c\u6784\u9020\u89e3\u3002 \uff08\u5982\u679c\u6709\u73af\u5c31\u662f\u65e0\u89e3\uff0c\u5bf9\u5e94\u5230\u62d3\u6251\u6392\u5e8f\u5c31\u662f\u6700\u540e\u59cb\u7ec8\u5b58\u5728\u975e \\(0\\) \u5165\u5ea6\u70b9\u3002\uff09 Code 1 2 3 4 5 6 7 8 9 10 int cnt = 0 ; std :: queue < int > q ; for ( int i = 1 ; i <= n ; ++ i ) if ( ! ind [ i ]) q . push ( i ); while ( ! q . empty ()) { int u = q . front (); q . pop (); ord [ u ] = ++ cnt ; // topo \u5e8f for ( auto v : G [ u ]) if ( ! ( -- ind [ v ])) q . push ( v ); // \u5220\u6389\u8fb9\uff0c\u987a\u4fbf\u5224\u4e00\u4e0b\u8981\u4e0d\u8981\u5165\u961f\u3002 } \u62d3\u6251\u5e8f\u8fd8\u53ef\u4ee5\u7528\u6765\u8f6c\u79fb DP\u3002 \u4e00\u822c\u8f6c\u79fb\u7684\u65f6\u5019\u4e0d\u662f\u627e\u4e0a\u4e00\u4e2a\uff08\u524d\u9a71\uff09\uff0c\u800c\u662f\u4ece\u5f53\u524d\u7684\u63a8\u5230\u540e\u4e00\u4e2a\uff08\u540e\u7ee7\uff09\u3002 \u6309\u62d3\u6251\u5e8f\u679a\u4e3e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u518d\u679a\u4e3e\u5b83\u7684\u6bcf\u4e00\u4e2a\u51fa\u8fb9\uff0c\u8fdb\u884c\u9012\u63a8\u5373\u53ef\u3002","title":"\u62d3\u6251\u6392\u5e8f"},{"location":"algor/graph/basic/simple-graph-theory-problem/#_2","text":"\u5177\u6709\u6b27\u62c9\u56de\u8def\u7684\u65e0\u5411\u56fe\u6216\u6709\u5411\u56fe\u79f0\u4e3a\u6b27\u62c9\u56fe\u3002 \u5177\u6709\u6b27\u62c9\u8def\u4f46\u4e0d\u5177\u6709\u6b27\u62c9\u56de\u8def\u7684\u65e0\u5411\u56fe\u6216\u6709\u5411\u56fe\u79f0\u4e3a\u534a\u6b27\u62c9\u56fe\u3002 \u6b27\u62c9\u56fe\u4e2d\u6240\u6709\u9876\u70b9\u7684\u5ea6\u6570\u90fd\u662f\u5076\u6570\u3002 \u82e5 \\(G\\) \u662f\u6b27\u62c9\u56fe\uff0c\u5219\u5b83\u4e3a\u82e5\u5e72\u4e2a\u73af\u7684\u5e76\uff0c\u4e14\u6bcf\u6761\u8fb9\u88ab\u5305\u542b\u5728\u5947\u6570\u4e2a\u73af\u5185\u3002","title":"\u6b27\u62c9\u56fe"},{"location":"algor/graph/basic/simple-graph-theory-problem/#_3","text":"\u901a\u8fc7\u56fe\u4e2d\u6240\u6709\u8fb9\u6070\u597d\u4e00\u6b21\u7684\u901a\u8def\u79f0\u4e3a\u6b27\u62c9\u8def\u3002 \u5c31\u662f\u4ece\u67d0\u70b9\u5f00\u59cb\u7684\u4e00\u7b14\u753b\u95ee\u9898\uff08\u53ef\u4ee5\u7ecf\u8fc7\u4e00\u4e2a\u70b9\u591a\u6b21\uff09\u3002 \u6709\u5411\u8054\u901a\u56fe\u5b58\u5728\u6b27\u62c9\u8def\u7684\u5145\u8981\u6761\u4ef6 \u8981\u4e48\u6240\u6709\u70b9\u7684\u51fa\u5ea6\u5747\u7b49\u4e8e\u5165\u5ea6 \u8981\u4e48\u9664\u4e86\u4e24\u4e2a\u70b9\u4e4b\u5916\uff0c\u5176\u4f59\u6240\u6709\u70b9\u7684\u51fa\u5ea6\u5747\u7b49\u4e8e\u5165\u5ea6 \u3002 \u5269\u4f59\u7684\u4e24\u4e2a\u70b9:\u4e00\u4e2a\u6ee1\u8db3\u51fa\u5ea6\u51cf\u53bb\u5165\u5ea6\u7b49\u4e8e \\(1\\) (\u8d77\u70b9) \uff0c\u4e00\u4e2a\u6ee1\u8db3\u5165\u5ea6\u51cf\u53bb\u51fa\u5ea6\u7b49\u4e8e \\(1\\) (\u7ec8\u70b9)\u3002 \u65e0\u5411\u8054\u901a\u56fe\u5b58\u5728\u6b27\u62c9\u8def\u7684\u5145\u8981\u6761\u4ef6\uff1a\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\u53ea\u80fd\u6709 \\(0\\) \u6216 \\(2\\) \u4e2a\u3002","title":"\u6b27\u62c9\u8def"},{"location":"algor/graph/basic/simple-graph-theory-problem/#_4","text":"\u901a\u8fc7\u56fe\u4e2d\u6240\u6709\u8fb9\u6070\u597d\u4e00\u6b21\u7684\u56de\u8def\u79f0\u4e3a\u6b27\u62c9\u56de\u8def\u3002 \u5c31\u662f\u4e00\u7b14\u753b\u4e14\u8981\u6c42\u56de\u5230\u8d77\u70b9\u3002 \u6709\u5411\u8054\u901a\u56fe\u5b58\u5728\u6b27\u62c9\u56de\u8def\u7684\u5145\u8981\u6761\u4ef6\uff1a\u6240\u6709\u70b9\u7684\u51fa\u5ea6\u5747\u7b49\u4e8e\u5165\u5ea6\u3002 \u65e0\u5411\u8054\u901a\u56fe\u5b58\u5728\u6b27\u62c9\u56de\u8def\u7684\u5145\u8981\u6761\u4ef6\uff1a\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\u53ea\u80fd\u6709 \\(0\\) \u4e2a\u3002 \u6c42\u5177\u4f53\u65b9\u6848 \u7528 dfs \u5c31\u884c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 std :: stack < int > s ; inline void dfs ( int u ){ for ( register int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( ! vis [ i ]){ // \u5f53\u524d\u8fb9\u6ca1\u6709\u8bbf\u95ee\u8fc7 vis [ i ] = true ; // \u6ce8\u610f\u4e00\u5b9a\u8981\u8bbf\u95ee\u5230\u5c31\u76f4\u63a5\u6807\u8bb0\uff0c\u4e0d\u7136\u590d\u6742\u5ea6\u4f1a\u5047\u3002 dfs ( v ), s . push ( v ); } } } // in main() dfs ( 1 ); // \u56e0\u4e3a\u6709\u6b27\u62c9\u56de\u8def\uff0c\u6240\u4ee5\u5176\u5b9e\u4ece\u54ea\u4e2a\u70b9\u5f00\u59cb\u90fd\u4e00\u6837\u3002 vector < int > ans ; while ( ! s . empty ()) ans . push_back ( s . top ()), s . pop (); reverse ( ans . begin (), ans . end ()); for ( auto x : ans ) cout << x << \" \" ; // \u5012\u5e8f\u8f93\u51fa\u3002 \u6b27\u62c9\u8def\u7684\u8bdd\u4e5f\u5dee\u4e0d\u591a\uff0c\u5982\u679c\u56fe\u672c\u8eab\u662f\u6b27\u62c9\u56fe\u76f4\u63a5\u5f53\u56de\u8def\u8dd1\uff0c\u5982\u679c\u662f\u534a\u6b27\u62c9\u56fe\u5c31\u76f4\u63a5\u628a\u591a\u51fa\u6765\u7684\u90a3\u4e24\u4e2a\u70b9\u8fde\u8fb9\u8dd1\u6b27\u62c9\u56de\u8def\u6700\u540e\u5220\u6389\u52a0\u7684\u8fb9\u5373\u53ef\u3002 \u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u56de\u8def/\u8def\u5f84\u53ef\u4ee5\u770b 221025C \u6a21\u62df\u8d5b\u7684 D \u9898","title":"\u6b27\u62c9\u56de\u8def"},{"location":"algor/graph/basic/simple-graph-theory-problem/#_5","text":"\u6458\u81ea OI-Wiki","title":"\u54c8\u5bc6\u987f\u56fe"},{"location":"algor/graph/basic/simple-graph-theory-problem/#_6","text":"\u901a\u8fc7\u56fe\u4e2d\u6240\u6709\u9876\u70b9\u4e00\u6b21\u4e14\u4ec5\u4e00\u6b21\u7684\u901a\u8def\u79f0\u4e3a\u54c8\u5bc6\u987f\u901a\u8def\u3002 \u901a\u8fc7\u56fe\u4e2d\u6240\u6709\u9876\u70b9\u4e00\u6b21\u4e14\u4ec5\u4e00\u6b21\u7684\u56de\u8def\u79f0\u4e3a\u54c8\u5bc6\u987f\u56de\u8def\u3002 \u5177\u6709\u54c8\u5bc6\u987f\u56de\u8def\u7684\u56fe\u79f0\u4e3a\u54c8\u5bc6\u987f\u56fe\u3002 \u5177\u6709\u54c8\u5bc6\u987f\u901a\u8def\u800c\u4e0d\u5177\u6709\u54c8\u5bc6\u987f\u56de\u8def\u7684\u56fe\u79f0\u4e3a\u534a\u54c8\u5bc6\u987f\u56fe\u3002","title":"\u5b9a\u4e49"},{"location":"algor/graph/basic/simple-graph-theory-problem/#_7","text":"\u8bbe \\(G=<V, E>\\) \u662f\u54c8\u5bc6\u987f\u56fe\uff0c\u5219\u5bf9\u4e8e \\(V\\) \u7684\u4efb\u610f\u975e\u7a7a\u771f\u5b50\u96c6 \\(V_1\\) \uff0c\u5747\u6709 \\(p(G-V_1) \\leq |V_1|\\) \u3002\u5176\u4e2d \\(p(x)\\) \u4e3a \\(x\\) \u7684\u8fde\u901a\u5206\u652f\u6570\u3002 \u63a8\u8bba\uff1a\u8bbe \\(G=<V, E>\\) \u662f\u534a\u54c8\u5bc6\u987f\u56fe\uff0c\u5219\u5bf9\u4e8e \\(V\\) \u7684\u4efb\u610f\u975e\u7a7a\u771f\u5b50\u96c6 \\(V_1\\) \uff0c\u5747\u6709 \\(p(G-V_1) \\leq |V_1|+1\\) \u3002\u5176\u4e2d \\(p(x)\\) \u4e3a \\(x\\) \u7684\u8fde\u901a\u5206\u652f\u6570\u3002 \u5b8c\u5168\u56fe \\(K_{2k+1} (k \\geq 1)\\) \u4e2d\u542b \\(k\\) \u6761\u8fb9\u4e0d\u91cd\u7684\u54c8\u5bc6\u987f\u56de\u8def\uff0c\u4e14\u8fd9 \\(k\\) \u6761\u8fb9\u4e0d\u91cd\u7684\u54c8\u5bc6\u987f\u56de\u8def\u542b \\(K_{2k+1}\\) \u4e2d\u7684\u6240\u6709\u8fb9\u3002 \u5b8c\u5168\u56fe \\(K_{2k} (k \\geq 2)\\) \u4e2d\u542b \\(k-1\\) \u6761\u8fb9\u4e0d\u91cd\u7684\u54c8\u5bc6\u987f\u56de\u8def\uff0c\u4ece \\(K_{2k}\\) \u4e2d\u5220\u9664\u8fd9 \\(k-1\\) \u6761\u8fb9\u4e0d\u91cd\u7684\u54c8\u5bc6\u987f\u56de\u8def\u540e\u6240\u5f97\u56fe\u542b \\(k\\) \u6761\u4e92\u4e0d\u76f8\u90bb\u7684\u8fb9\u3002","title":"\u6027\u8d28"},{"location":"algor/graph/basic/simple-graph-theory-problem/#_8","text":"\u8bbe \\(G\\) \u662f \\(n(n \\geq 2)\\) \u7684\u65e0\u5411\u7b80\u5355\u56fe\uff0c\u82e5\u5bf9\u4e8e \\(G\\) \u4e2d\u4efb\u610f\u4e0d\u76f8\u90bb\u7684\u9876\u70b9 \\(v_i, v_j\\) \uff0c\u5747\u6709 \\(d(v_i)+ d(v_j) \\geq n - 1\\) \uff0c\u5219 \\(G\\) \u4e2d\u5b58\u5728\u54c8\u5bc6\u987f\u901a\u8def\u3002 \u63a8\u8bba 1\uff1a\u8bbe \\(G\\) \u662f \\(n(n \\geq 3)\\) \u7684\u65e0\u5411\u7b80\u5355\u56fe\uff0c\u82e5\u5bf9\u4e8e \\(G\\) \u4e2d\u4efb\u610f\u4e0d\u76f8\u90bb\u7684\u9876\u70b9 \\(v_i, v_j\\) \uff0c\u5747\u6709 \\(d(v_i)+ d(v_j) \\geq n\\) \uff0c\u5219 \\(G\\) \u4e2d\u5b58\u5728\u54c8\u5bc6\u987f\u56de\u8def\uff0c\u4ece\u800c \\(G\\) \u4e3a\u54c8\u5bc6\u987f\u56fe\u3002 \u63a8\u8bba 2\uff1a\u8bbe \\(G\\) \u662f \\(n(n \\geq 3)\\) \u7684\u65e0\u5411\u7b80\u5355\u56fe\uff0c\u82e5\u5bf9\u4e8e \\(G\\) \u4e2d\u4efb\u610f\u9876\u70b9 \\(v_i\\) \uff0c\u5747\u6709 \\(d(v_i) \\geq \\frac{n}{2}\\) \uff0c\u5219 \\(G\\) \u4e2d\u5b58\u5728\u54c8\u5bc6\u987f\u56de\u8def\uff0c\u4ece\u800c \\(G\\) \u4e3a\u54c8\u5bc6\u987f\u56fe\u3002 \u8bbe \\(D\\) \u4e3a \\(n(n \\geq 2)\\) \u9636\u7ade\u8d5b\u56fe\uff0c\u5219 \\(D\\) \u5177\u6709\u54c8\u5bc6\u987f\u901a\u8def\u3002 \u82e5 \\(D\\) \u542b \\(n(n \\geq 2)\\) \u9636\u7ade\u8d5b\u56fe\u4f5c\u4e3a\u5b50\u56fe\uff0c\u5219 \\(D\\) \u5177\u6709\u54c8\u5bc6\u987f\u901a\u8def\u3002 \u5f3a\u8fde\u901a\u7684\u7ade\u8d5b\u56fe\u4e3a\u54c8\u5bc6\u987f\u56fe\u3002 \u82e5 \\(D\\) \u542b \\(n(n \\geq 2)\\) \u9636\u5f3a\u8fde\u901a\u7684\u7ade\u8d5b\u56fe\u4f5c\u4e3a\u5b50\u56fe\uff0c\u5219 \\(D\\) \u5177\u6709\u54c8\u5bc6\u987f\u56de\u8def\u3002","title":"\u5145\u5206\u6761\u4ef6"},{"location":"algor/graph/basic/tree-traversal/","text":"\u6df1\u5ea6\u4f18\u5148\u904d\u5386 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5bf9\u4e8e\u4e8c\u53c9\u6811 \u03c8(\uff40\u2207\u00b4)\u03c8 \u524d\u5e8f\u904d\u5386 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5148\u6839\u540e\u5de6\u53f3\u3002 1 2 3 4 5 void dfs ( int u ) { if ( u == -1 ) return ; order [ ++ cnt ] = u ; dfs ( u . lson ), dfs ( u . rson ); } \u4e2d\u5e8f\u904d\u5386 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5148\u5de6\uff0c\u540e\u6839\uff0c\u518d\u53f3\u3002 1 2 3 4 5 6 void dfs ( int u ) { if ( u == -1 ) return ; dfs ( u . lson ); order [ ++ cnt ] = u ; dfs ( u . rson ); } \u540e\u5e8f\u904d\u5386 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5148\u5de6\u53f3\uff0c\u540e\u6839\u3002 1 2 3 4 5 void dfs ( int u ) { if ( u == -1 ); dfs ( u . lson ), dfs ( u . rson ); order [ ++ cnt ] = u ; } \u6027\u8d28 \u03c8(\uff40\u2207\u00b4)\u03c8 \u524d\u5e8f\u7684\u7b2c\u4e00\u4e2a\u662f root\uff0c\u540e\u5e8f\u7684\u6700\u540e\u4e00\u4e2a\u662f root\u3002 \u5148\u786e\u5b9a\u6839\u8282\u70b9\uff0c\u7136\u540e\u6839\u636e\u4e2d\u5e8f\u904d\u5386\uff0c\u5728\u6839\u5de6\u8fb9\u7684\u4e3a\u5de6\u5b50\u6811\uff0c\u6839\u53f3\u8fb9\u7684\u4e3a\u53f3\u5b50\u6811\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b50\u6811\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a\u5168\u65b0\u7684\u6811\uff0c\u4ecd\u7136\u9075\u5faa\u4e0a\u9762\u7684\u89c4\u5f8b\u3002 \u5bf9\u4e8e\u591a\u53c9\u6811 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5c31\u662f\u5206\u522b\u9012\u5f52\u6bcf\u4e2a\u513f\u5b50\uff0c\u4e0d\u649e\u5357\u5899\u4e0d\u56de\u5934\uff0c\u7c7b\u4f3c\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u3002 \u5b9e\u9645\u987a\u5e8f\u7531\u52a0\u8fb9\u987a\u5e8f\u51b3\u5b9a\u3002 1 2 3 4 5 6 7 8 void dfs ( int u , int fa ) { order [ ++ cnt ] = u ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs ( v , u ); } } \u5e7f\u5ea6\u4f18\u5148\u904d\u5386 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e00\u5c42\u4e00\u5c42\u904d\u5386\uff0c\u7528\u961f\u5217\u3002 1 2 3 4 5 6 7 8 9 10 11 12 void bfs () { q . push ( root ); while ( ! q . empty ()) { int u = q . front (); q . pop (); order [ ++ cnt ] = u , vis [ u ] = true ; for ( int i = head [ u ]; ~ i ; i = e [ u ]. Next ) { int v = e [ i ]. ver ; if ( ! vis [ v ]) q . push ( v ); } } } \u5173\u4e8e\u6811\u7684\u4e00\u70b9\u70b9\u57fa\u7840\u77e5\u8bc6 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6811\u662f\u4e00\u4e2a\u65e0\u5411\u8fde\u901a\u56fe\uff0c \\(n\\) \u4e2a\u8282\u70b9 \\(n - 1\\) \u6761\u8fb9\uff0c\u4e0d\u5b58\u5728\u56de\u8def\u3002 \u6ee1\u4e8c\u53c9\u6811\uff1a\u6bcf\u4e00\u5c42\u8282\u70b9\u4e2a\u6570\u90fd\u6ee1\u7684\u4e8c\u53c9\u6811\uff08\u7b2c \\(i\\) \u5c42\u6709 \\(2^{i - 1}\\) \u4e2a\u8282\u70b9\uff09 \u5b8c\u5168\u4e8c\u53c9\u6811\uff1a\u6ee1\u4e8c\u53c9\u6811\u7684\u5b50\u96c6\uff0c \\(n\\) \u4e2a\u8282\u70b9\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u6df1\u5ea6\u4e3a \\(\\lfloor\\log_2n\\rfloor + 1\\) \u3002 \u5bf9\u4efb\u610f\u4e00\u9897\u4e8c\u53c9\u6811\uff0c\u5ea6\u4e3a0\u7684\u7ed3\u70b9\uff08\u5373\u53f6\u5b50\u7ed3\u70b9\uff09\u603b\u662f\u6bd4\u5ea6\u4e3a2\u7684\u7ed3\u70b9\u591a\u4e00\u4e2a","title":"\u6811\u7684\u904d\u5386"},{"location":"algor/graph/basic/tree-traversal/#_1","text":"","title":"\u6df1\u5ea6\u4f18\u5148\u904d\u5386"},{"location":"algor/graph/basic/tree-traversal/#_2","text":"","title":"\u5bf9\u4e8e\u4e8c\u53c9\u6811"},{"location":"algor/graph/basic/tree-traversal/#_3","text":"\u5148\u6839\u540e\u5de6\u53f3\u3002 1 2 3 4 5 void dfs ( int u ) { if ( u == -1 ) return ; order [ ++ cnt ] = u ; dfs ( u . lson ), dfs ( u . rson ); }","title":"\u524d\u5e8f\u904d\u5386"},{"location":"algor/graph/basic/tree-traversal/#_4","text":"\u5148\u5de6\uff0c\u540e\u6839\uff0c\u518d\u53f3\u3002 1 2 3 4 5 6 void dfs ( int u ) { if ( u == -1 ) return ; dfs ( u . lson ); order [ ++ cnt ] = u ; dfs ( u . rson ); }","title":"\u4e2d\u5e8f\u904d\u5386"},{"location":"algor/graph/basic/tree-traversal/#_5","text":"\u5148\u5de6\u53f3\uff0c\u540e\u6839\u3002 1 2 3 4 5 void dfs ( int u ) { if ( u == -1 ); dfs ( u . lson ), dfs ( u . rson ); order [ ++ cnt ] = u ; }","title":"\u540e\u5e8f\u904d\u5386"},{"location":"algor/graph/basic/tree-traversal/#_6","text":"\u524d\u5e8f\u7684\u7b2c\u4e00\u4e2a\u662f root\uff0c\u540e\u5e8f\u7684\u6700\u540e\u4e00\u4e2a\u662f root\u3002 \u5148\u786e\u5b9a\u6839\u8282\u70b9\uff0c\u7136\u540e\u6839\u636e\u4e2d\u5e8f\u904d\u5386\uff0c\u5728\u6839\u5de6\u8fb9\u7684\u4e3a\u5de6\u5b50\u6811\uff0c\u6839\u53f3\u8fb9\u7684\u4e3a\u53f3\u5b50\u6811\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b50\u6811\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a\u5168\u65b0\u7684\u6811\uff0c\u4ecd\u7136\u9075\u5faa\u4e0a\u9762\u7684\u89c4\u5f8b\u3002","title":"\u6027\u8d28"},{"location":"algor/graph/basic/tree-traversal/#_7","text":"\u5c31\u662f\u5206\u522b\u9012\u5f52\u6bcf\u4e2a\u513f\u5b50\uff0c\u4e0d\u649e\u5357\u5899\u4e0d\u56de\u5934\uff0c\u7c7b\u4f3c\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u3002 \u5b9e\u9645\u987a\u5e8f\u7531\u52a0\u8fb9\u987a\u5e8f\u51b3\u5b9a\u3002 1 2 3 4 5 6 7 8 void dfs ( int u , int fa ) { order [ ++ cnt ] = u ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs ( v , u ); } }","title":"\u5bf9\u4e8e\u591a\u53c9\u6811"},{"location":"algor/graph/basic/tree-traversal/#_8","text":"\u4e00\u5c42\u4e00\u5c42\u904d\u5386\uff0c\u7528\u961f\u5217\u3002 1 2 3 4 5 6 7 8 9 10 11 12 void bfs () { q . push ( root ); while ( ! q . empty ()) { int u = q . front (); q . pop (); order [ ++ cnt ] = u , vis [ u ] = true ; for ( int i = head [ u ]; ~ i ; i = e [ u ]. Next ) { int v = e [ i ]. ver ; if ( ! vis [ v ]) q . push ( v ); } } }","title":"\u5e7f\u5ea6\u4f18\u5148\u904d\u5386"},{"location":"algor/graph/basic/tree-traversal/#_9","text":"\u6811\u662f\u4e00\u4e2a\u65e0\u5411\u8fde\u901a\u56fe\uff0c \\(n\\) \u4e2a\u8282\u70b9 \\(n - 1\\) \u6761\u8fb9\uff0c\u4e0d\u5b58\u5728\u56de\u8def\u3002 \u6ee1\u4e8c\u53c9\u6811\uff1a\u6bcf\u4e00\u5c42\u8282\u70b9\u4e2a\u6570\u90fd\u6ee1\u7684\u4e8c\u53c9\u6811\uff08\u7b2c \\(i\\) \u5c42\u6709 \\(2^{i - 1}\\) \u4e2a\u8282\u70b9\uff09 \u5b8c\u5168\u4e8c\u53c9\u6811\uff1a\u6ee1\u4e8c\u53c9\u6811\u7684\u5b50\u96c6\uff0c \\(n\\) \u4e2a\u8282\u70b9\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u6df1\u5ea6\u4e3a \\(\\lfloor\\log_2n\\rfloor + 1\\) \u3002 \u5bf9\u4efb\u610f\u4e00\u9897\u4e8c\u53c9\u6811\uff0c\u5ea6\u4e3a0\u7684\u7ed3\u70b9\uff08\u5373\u53f6\u5b50\u7ed3\u70b9\uff09\u603b\u662f\u6bd4\u5ea6\u4e3a2\u7684\u7ed3\u70b9\u591a\u4e00\u4e2a","title":"\u5173\u4e8e\u6811\u7684\u4e00\u70b9\u70b9\u57fa\u7840\u77e5\u8bc6"},{"location":"algor/graph/connectivity/2sat/","text":"\u7b2c\u4e00\u79cd\u5b9a\u4e49 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60 \\(n\\) \u4e2a\u4e8c\u5143\u7ec4 \\((x_0,x_1)\\) \uff0c\u6709 \\(m\\) \u4e2a\u9650\u5236\u6761\u4ef6\uff0c\u5f62\u5982 \\(<a,b>\\) \uff0c\u8868\u793a \\(a,b\\) \u76f8\u4e92\u77db\u76fe\uff0c\u4e0d\u80fd\u540c\u65f6\u9009\u4e2d \\(a,b\\) \u8fd9\u4e24\u8005\u3002 \u4e14 \\(a,b\\) \u5c5e\u4e8e\u4e0d\u540c\u7684\u4e8c\u5143\u7ec4\u3002 \u95ee\u662f\u5426\u5b58\u5728\u4e00\u79cd\u65b9\u6848\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u4e8c\u5143\u7ec4\u91cc\u90fd\u6070\u597d\u6709\u4e00\u4e2a\u5143\u7d20\u88ab\u9009\u62e9\uff0c\u4e14\u6240\u6709\u6761\u4ef6\u4e0d\u4f1a\u88ab\u8fdd\u80cc\u3002 \u5982\u679c\u6709\uff0c\u9700\u8981\u6784\u9020\u65b9\u6848\u3002 \u7b2c\u4e8c\u79cd\u5b9a\u4e49 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60 \\(n\\) \u4e2a\u5143\u7d20\uff0c\u6709 \\(m\\) \u4e2a\u9650\u5236\u6761\u4ef6\uff0c\u5f62\u5982 \\(<a,b>,<f_a,f_b>\\) \uff0c\u5373\uff0c\u5982\u679c \\(a\\) \u7684\u72b6\u6001\u662f \\(f_a\\) \uff0c\u90a3\u4e48 \\(b\\) \u7684\u72b6\u6001\u5fc5\u987b\u662f \\(f_b\\) \u3002 \\(f_i\\) \u7684\u503c\u53ea\u53ef\u80fd\u662f \\(0,1\\) \uff0c\u8868\u793a\u9009\u6216\u8005\u4e0d\u9009 \\(i\\) \u8fd9\u4e2a\u5143\u7d20\u3002 \u95ee\u662f\u5426\u5b58\u5728\u4e00\u79cd\u4f7f\u5f97\u6240\u6709\u9650\u5236\u88ab\u6ee1\u8db3\u3002 \u5982\u679c\u6709\uff0c\u9700\u8981\u6784\u9020\u65b9\u6848\u3002 \u4ee5\u4e0a\u4e24\u79cd\u5b9a\u4e49\u672c\u8d28\u4e0a\u662f\u5b8c\u5168\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u8bf4\u6cd5\u4e0d\u592a\u76f8\u540c\u3002 \u505a\u6cd5 \u03c8(\uff40\u2207\u00b4)\u03c8 \u53d1\u73b0\u6240\u6709\u7684\u7ea6\u675f\u6761\u4ef6\u90fd\u53ef\u4ee5\u5f52\u5316\u6210\u8fd9\u6837\u7684\u4e00\u4e2a\u547d\u9898\uff1a \u82e5 \\(p\\) \uff0c\u5219 \\(q\\) \u3002 \u4e5f\u5c31\u662f \\(p \\Rightarrow q\\) \u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u628a\u8fd9\u4e2a\u547d\u9898\u770b\u4f5c\u6709\u5411\u8fb9\uff0c\u5c31\u53ef\u4ee5\u8f6c\u5316\u6210\u56fe\u8bba\u7684\u6a21\u578b\u3002 \u4ece\u7b2c\u4e8c\u79cd\u5b9a\u4e49\u8003\u8651\uff0c \\(p,q\\) \u5c31\u8868\u793a\u4e24\u4e2a\u5143\u7d20\u7684\u9009\u6216\u8005\u4e0d\u9009\u7684\u72b6\u6001\u3002 \u8003\u8651\u62c6\u70b9\uff0c\u628a\u4e00\u4e2a\u5143\u7d20 \\(x\\) \u62c6\u6210 \\((x_0,x_1)\\) \u4e24\u4e2a\u5143\u7d20\uff0c\u5206\u522b\u8868\u793a\u5143\u7d20 \\(x\\) \u4e0d\u9009\u8fd8\u662f\u9009\u3002 \u5b9e\u73b0\u7684\u65f6\u5019\u53ef\u4ee5\u628a\u56fe\u5206\u6210\u8282\u70b9\u5bf9\u79f0\u7684\u4e24\u90e8\u5206 \\(1\\to n\\) \u548c \\(n+1 \\to 2n\\) \u3002 \u5b9e\u9645\u4e0a\u8fb9\u4e5f\u5e94\u5f53\u662f\u5bf9\u79f0\u7684\uff0c\u4e4b\u540e\u4f1a\u8bf4\u3002 \u7136\u540e\u5c31\u53ef\u4ee5\u6bd4\u8f83\u65b9\u4fbf\u7684\u8fde\u8fb9\u4e86\u3002 \u6bd4\u5982\uff0c\u5982\u679c\u9009\u4e86 \\(a\\) \u5c31\u4e0d\u80fd\u9009 \\(b\\) \u8fd9\u4e2a\u7ea6\u675f\u6761\u4ef6\u3002 \u5c31\u53ef\u4ee5\u8fde\u4e00\u6761\u6709\u5411\u8fb9 \\(a_1 \\to b_0\\) \u3002 \u4f46\u662f\u8fd9\u4e2a\u4e1c\u897f\u662f\u4e00\u4e2a\u547d\u9898 \\(p \\Rightarrow q\\) \u554a\uff0c\u6240\u4ee5\u5b83\u7684 \u9006\u5426\u547d\u9898 \\(\\lnot q \\Rightarrow \\lnot p\\) \u4e5f\u662f\u6210\u7acb\u7684\u3002 \u90a3\u4e48\u5728\u8fde \\(a_1 \\to b_0\\) \u7684\u540c\u65f6\u4e5f\u9700\u8981\u8fde\u4e0a \\(b_1 \\to a_0\\) \u3002 \u6240\u4ee5\u5982\u679c\u628a\u6709\u5411\u8fb9\u770b\u6210\u65e0\u5411\u8fb9\uff0c\u56fe\u4e5f\u662f\u5bf9\u79f0\u7684\u3002 \u4e0d\u8fc7\u6709\u4e00\u79cd\u7279\u6b8a\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u9700\u8981\u5f3a\u5236\u9009 \\(a\\) \uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u5c31\u9700\u8981\u8fde\u4e00\u6761\u8fb9 \\(a_0 \\to a_1\\) \u3002 \u8fd9\u6837\u7684\u8bdd\uff0c\u5982\u679c\u9009 \\(a_0\\) \u5c31\u4f1a\u77db\u76fe\uff08\u5177\u4f53\u770b\u4e0b\u9762\uff09\uff0c\u5c31\u8fbe\u5230\u53ef\u5f3a\u5236\u9009 \\(a_1\\) \u7684\u76ee\u7684\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u7684\u6240\u6709\u53d8\u91cf\u7684\u53d6\u503c\u662f\u76f8\u540c\u7684\u3002 \u6bd4\u5982\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u957f\u8fd9\u6837\uff08\u53ef\u80fd\u4e0d\u4e00\u5b9a\u4f1a\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u4e0d\u8fc7\u611f\u6027\u7406\u89e3\u5c31\u884c\uff09\uff1a \\(a_0 \\to b_1 \\to c_0 \\to a_0\\) \u3002 \u90a3\u4e48 \\(a_0\\) \u7684\u53d6\u503c\u5982\u679c\u4e3a \\(\\text{true}\\) \uff08\u4e0d\u9009\u62e9 \\(a\\) \uff09\uff0c\u90a3\u4e48 \\(b_1\\) \u7684\u53d6\u503c\u4e5f\u5e94\u5f53\u4e3a \\(\\text{true}\\) \uff0c\u540c\u7406 \\(c_0\\) \u7684\u53d6\u503c\u4e5f\u662f \\(\\text{true}\\) \u3002 \u6240\u4ee5\u8003\u8651\u7f29\u70b9\uff0c \u53d1\u73b0\u5982\u679c\u4e00\u4e2a\u5143\u7d20\u7684\u4e24\u79cd\u72b6\u6001\u5904\u4e8e\u540c\u4e00\u4e2a\u96c6\u5408\uff0c\u90a3\u4e48\u5fc5\u7136\u662f\u65e0\u89e3\u7684\uff0c\u56e0\u4e3a\u4f60\u4e0d\u53ef\u80fd\u9009\u4e00\u4e2a\u7269\u54c1\u53c8\u4e0d\u9009\u4e00\u4e2a\u7269\u54c1\u3002 \u7f29\u70b9\u5b8c\u4e4b\u540e\uff0c\u8fd9\u4e2a\u56fe\u4f1a\u6210\u4e00\u4e2a DAG\u3002 \u4f46\u662f\u5b83\u4ecd\u7136\u53ef\u4ee5\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff0c\u65b0\u56fe\u4e0a \\(c[x_0]\\) \u548c \\(c[x_1]\\) \u7684\u5173\u7cfb\u5c31\u53ef\u4ee5\u770b\u6210 \\(x_0\\) \u548c \\(x_1\\) \u7684\u5173\u7cfb\u3002 \u5bf9\u4e8e\u539f\u6765\u6709\u7684\u4e00\u6761\u8fb9 \\((x,y)\\) \uff0c\u5728\u65b0\u56fe\u4e0a\u8fde\u63a5 \\((c[x],c[y])\\) \u5373\u53ef\u3002 \u53d1\u73b0\u5728\u65b0\u56fe\u4e0a\u9009\u62e9\u4e00\u4e2a\u96f6\u51fa\u5ea6\u70b9\u4e0d\u4f1a\u5bf9\u5176\u4ed6\u7684\u70b9\u9020\u6210\u4ec0\u4e48\u5f71\u54cd\uff0c\u90a3\u4e48\u5c31\u4e0d\u65ad\u7684\u627e\u96f6\u51fa\u5ea6\u70b9\u5373\u53ef\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u662f\u53cd\u7740\u7684\u62d3\u6251\u6392\u5e8f\u3002 \u90a3\u4e48\u5728\u8fd9\u4e2a\u65b0\u56fe\u7684\u53cd\u56fe\u4e0a\u8dd1\u62d3\u6251\u6392\u5e8f\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u6253\u4e00\u4e2a\u6807\u8bb0 \\(color\\) \uff0c\u8868\u793a\u8fd9\u4e2a SCC \u5f53\u4e2d\u7684\u6240\u6709\u53d8\u91cf\u7684\u53d6\u503c\u3002 \u5982\u679c\u5f53\u524d\u70b9 \\(u\\) \u7684 \\(color\\) \u6ca1\u6709\u88ab\u6807\u8bb0\u8fc7\uff0c\u90a3\u4e48\u7ed9\u4ed6\u6807\u8bb0\u4e3a \\(0\\) \uff0c\u5e76\u628a\u8fd9\u4e2a\u70b9\u5bf9\u5e94\u7684\u70b9 \\(v\\) \u6807\u8bb0\u4e3a \\(1\\) \u3002 \u5bf9\u5e94\u7684\u70b9\u5c31\u662f\u6ee1\u8db3\u7c7b\u4f3c\u539f\u56fe \\(x_0\\) \u548c \\(x_1\\) \u7684\u5173\u7cfb\u7684\u70b9\u3002 \u7136\u540e\u5c31\u5f97\u5230\u4e86\u4e00\u7ec4\u53ef\u884c\u89e3\u3002 \u4f46\u662f\u56e0\u4e3a Tarjan \u5b8c\u4e4b\u540e\u7684 SCC \u7f16\u53f7\u5c31\u662f\u9006\u62d3\u6251\u5e8f\uff0c\u6240\u4ee5\u76f4\u63a5\u6b63\u5e8f\u626b\u63cf\u6240\u6709 SCC \u5c31\u884c\u4e86\u3002 \u7ed9\u4e00\u7ec4\u5bf9\u5e94\u70b9\u5f53\u4e2d\u62d3\u6251\u5e8f\u66f4\u5927\uff0c\u4e5f\u5c31\u662f\u7f16\u53f7\u66f4\u5c0f\u7684\u7684\u4e00\u4e2a\u70b9\u67d3\u8272\u6210 \\(0\\) \uff0c\u53e6\u5916\u4e00\u4e2a\u67d3\u8272\u6210 \\(1\\) \u5373\u53ef\u3002 \u5b9e\u73b0\u53ef\u4ee5\u4e0d\u7528\u5224\u6bcf\u4e2a\u5143\u7d20\u7684\u72b6\u6001\u53d8\u91cf\u6240\u5728\u7684 SCC \u7684\u989c\u8272\uff0c\u53ea\u9700\u8981\u6bd4\u8f83\u7f16\u53f7\u5927\u5c0f\u5c31\u884c\u3002 1 2 3 4 5 6 7 8 9 10 11 for ( int i = 1 ; i <= 2 * n ; ++ i ) if ( ! dfn [ i ]) tarjan ( i ); for ( int i = 1 ; i <= n ; ++ i ) if ( c [ i ] == c [ i + n ]) return puts ( \"NO\" ), 0 ; for ( int i = 1 ; i <= n ; ++ i ) opp [ i ] = i + n , opp [ i + n ] = i ; for ( int i = 1 ; i <= 2 * n ; ++ i ) val [ i ] = c [ i ] > c [ opp [ i ]]; \u8fd8\u6709\u4e00\u79cd\u7206\u641c\u505a\u6cd5\uff0c\u4f46\u662f\u89c9\u5f97\u4e0d\u559c\u6b22\uff08 \u6bd5\u7adf Tarjan \u5199\u8d77\u6765\u65b9\u4fbf\uff0c\u5e38\u6570\u4e5f\u5c0f\u3002 \u6ce8\u610f\uff0c\u70b9\u76f8\u5173\u7684\u6570\u7ec4\u4e00\u5b9a\u8981\u5f00\u4e24\u500d\uff0c\u8fb9\u76f8\u5173\u7684\u9700\u8981\u8ba1\u7b97\u7136\u540e\u5f00\u5bf9\u5e94\u500d\u6570\u3002 \u5982\u679c\u4e24\u4e2a\u53d8\u91cf\u7684\u56db\u79cd\u53d6\u503c\u4e4b\u95f4\u6ca1\u6709\u4efb\u4f55\u7684\u7ea6\u675f\u5173\u7cfb\uff08\u4e5f\u53ef\u4ee5\u7406\u89e3\u6210\u4e0d\u77db\u76fe\uff09\uff0c\u662f\u4e0d\u7528\u8fde\u8fb9\u7684\u3002","title":"2-SAT \u95ee\u9898"},{"location":"algor/graph/connectivity/2sat/#_1","text":"\u7ed9\u4f60 \\(n\\) \u4e2a\u4e8c\u5143\u7ec4 \\((x_0,x_1)\\) \uff0c\u6709 \\(m\\) \u4e2a\u9650\u5236\u6761\u4ef6\uff0c\u5f62\u5982 \\(<a,b>\\) \uff0c\u8868\u793a \\(a,b\\) \u76f8\u4e92\u77db\u76fe\uff0c\u4e0d\u80fd\u540c\u65f6\u9009\u4e2d \\(a,b\\) \u8fd9\u4e24\u8005\u3002 \u4e14 \\(a,b\\) \u5c5e\u4e8e\u4e0d\u540c\u7684\u4e8c\u5143\u7ec4\u3002 \u95ee\u662f\u5426\u5b58\u5728\u4e00\u79cd\u65b9\u6848\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u4e8c\u5143\u7ec4\u91cc\u90fd\u6070\u597d\u6709\u4e00\u4e2a\u5143\u7d20\u88ab\u9009\u62e9\uff0c\u4e14\u6240\u6709\u6761\u4ef6\u4e0d\u4f1a\u88ab\u8fdd\u80cc\u3002 \u5982\u679c\u6709\uff0c\u9700\u8981\u6784\u9020\u65b9\u6848\u3002","title":"\u7b2c\u4e00\u79cd\u5b9a\u4e49"},{"location":"algor/graph/connectivity/2sat/#_2","text":"\u7ed9\u4f60 \\(n\\) \u4e2a\u5143\u7d20\uff0c\u6709 \\(m\\) \u4e2a\u9650\u5236\u6761\u4ef6\uff0c\u5f62\u5982 \\(<a,b>,<f_a,f_b>\\) \uff0c\u5373\uff0c\u5982\u679c \\(a\\) \u7684\u72b6\u6001\u662f \\(f_a\\) \uff0c\u90a3\u4e48 \\(b\\) \u7684\u72b6\u6001\u5fc5\u987b\u662f \\(f_b\\) \u3002 \\(f_i\\) \u7684\u503c\u53ea\u53ef\u80fd\u662f \\(0,1\\) \uff0c\u8868\u793a\u9009\u6216\u8005\u4e0d\u9009 \\(i\\) \u8fd9\u4e2a\u5143\u7d20\u3002 \u95ee\u662f\u5426\u5b58\u5728\u4e00\u79cd\u4f7f\u5f97\u6240\u6709\u9650\u5236\u88ab\u6ee1\u8db3\u3002 \u5982\u679c\u6709\uff0c\u9700\u8981\u6784\u9020\u65b9\u6848\u3002 \u4ee5\u4e0a\u4e24\u79cd\u5b9a\u4e49\u672c\u8d28\u4e0a\u662f\u5b8c\u5168\u4e00\u6837\u7684\uff0c\u53ea\u4e0d\u8fc7\u8bf4\u6cd5\u4e0d\u592a\u76f8\u540c\u3002","title":"\u7b2c\u4e8c\u79cd\u5b9a\u4e49"},{"location":"algor/graph/connectivity/2sat/#_3","text":"\u53d1\u73b0\u6240\u6709\u7684\u7ea6\u675f\u6761\u4ef6\u90fd\u53ef\u4ee5\u5f52\u5316\u6210\u8fd9\u6837\u7684\u4e00\u4e2a\u547d\u9898\uff1a \u82e5 \\(p\\) \uff0c\u5219 \\(q\\) \u3002 \u4e5f\u5c31\u662f \\(p \\Rightarrow q\\) \u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u628a\u8fd9\u4e2a\u547d\u9898\u770b\u4f5c\u6709\u5411\u8fb9\uff0c\u5c31\u53ef\u4ee5\u8f6c\u5316\u6210\u56fe\u8bba\u7684\u6a21\u578b\u3002 \u4ece\u7b2c\u4e8c\u79cd\u5b9a\u4e49\u8003\u8651\uff0c \\(p,q\\) \u5c31\u8868\u793a\u4e24\u4e2a\u5143\u7d20\u7684\u9009\u6216\u8005\u4e0d\u9009\u7684\u72b6\u6001\u3002 \u8003\u8651\u62c6\u70b9\uff0c\u628a\u4e00\u4e2a\u5143\u7d20 \\(x\\) \u62c6\u6210 \\((x_0,x_1)\\) \u4e24\u4e2a\u5143\u7d20\uff0c\u5206\u522b\u8868\u793a\u5143\u7d20 \\(x\\) \u4e0d\u9009\u8fd8\u662f\u9009\u3002 \u5b9e\u73b0\u7684\u65f6\u5019\u53ef\u4ee5\u628a\u56fe\u5206\u6210\u8282\u70b9\u5bf9\u79f0\u7684\u4e24\u90e8\u5206 \\(1\\to n\\) \u548c \\(n+1 \\to 2n\\) \u3002 \u5b9e\u9645\u4e0a\u8fb9\u4e5f\u5e94\u5f53\u662f\u5bf9\u79f0\u7684\uff0c\u4e4b\u540e\u4f1a\u8bf4\u3002 \u7136\u540e\u5c31\u53ef\u4ee5\u6bd4\u8f83\u65b9\u4fbf\u7684\u8fde\u8fb9\u4e86\u3002 \u6bd4\u5982\uff0c\u5982\u679c\u9009\u4e86 \\(a\\) \u5c31\u4e0d\u80fd\u9009 \\(b\\) \u8fd9\u4e2a\u7ea6\u675f\u6761\u4ef6\u3002 \u5c31\u53ef\u4ee5\u8fde\u4e00\u6761\u6709\u5411\u8fb9 \\(a_1 \\to b_0\\) \u3002 \u4f46\u662f\u8fd9\u4e2a\u4e1c\u897f\u662f\u4e00\u4e2a\u547d\u9898 \\(p \\Rightarrow q\\) \u554a\uff0c\u6240\u4ee5\u5b83\u7684 \u9006\u5426\u547d\u9898 \\(\\lnot q \\Rightarrow \\lnot p\\) \u4e5f\u662f\u6210\u7acb\u7684\u3002 \u90a3\u4e48\u5728\u8fde \\(a_1 \\to b_0\\) \u7684\u540c\u65f6\u4e5f\u9700\u8981\u8fde\u4e0a \\(b_1 \\to a_0\\) \u3002 \u6240\u4ee5\u5982\u679c\u628a\u6709\u5411\u8fb9\u770b\u6210\u65e0\u5411\u8fb9\uff0c\u56fe\u4e5f\u662f\u5bf9\u79f0\u7684\u3002 \u4e0d\u8fc7\u6709\u4e00\u79cd\u7279\u6b8a\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u9700\u8981\u5f3a\u5236\u9009 \\(a\\) \uff0c\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\u5c31\u9700\u8981\u8fde\u4e00\u6761\u8fb9 \\(a_0 \\to a_1\\) \u3002 \u8fd9\u6837\u7684\u8bdd\uff0c\u5982\u679c\u9009 \\(a_0\\) \u5c31\u4f1a\u77db\u76fe\uff08\u5177\u4f53\u770b\u4e0b\u9762\uff09\uff0c\u5c31\u8fbe\u5230\u53ef\u5f3a\u5236\u9009 \\(a_1\\) \u7684\u76ee\u7684\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u7684\u6240\u6709\u53d8\u91cf\u7684\u53d6\u503c\u662f\u76f8\u540c\u7684\u3002 \u6bd4\u5982\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u957f\u8fd9\u6837\uff08\u53ef\u80fd\u4e0d\u4e00\u5b9a\u4f1a\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u4e0d\u8fc7\u611f\u6027\u7406\u89e3\u5c31\u884c\uff09\uff1a \\(a_0 \\to b_1 \\to c_0 \\to a_0\\) \u3002 \u90a3\u4e48 \\(a_0\\) \u7684\u53d6\u503c\u5982\u679c\u4e3a \\(\\text{true}\\) \uff08\u4e0d\u9009\u62e9 \\(a\\) \uff09\uff0c\u90a3\u4e48 \\(b_1\\) \u7684\u53d6\u503c\u4e5f\u5e94\u5f53\u4e3a \\(\\text{true}\\) \uff0c\u540c\u7406 \\(c_0\\) \u7684\u53d6\u503c\u4e5f\u662f \\(\\text{true}\\) \u3002 \u6240\u4ee5\u8003\u8651\u7f29\u70b9\uff0c \u53d1\u73b0\u5982\u679c\u4e00\u4e2a\u5143\u7d20\u7684\u4e24\u79cd\u72b6\u6001\u5904\u4e8e\u540c\u4e00\u4e2a\u96c6\u5408\uff0c\u90a3\u4e48\u5fc5\u7136\u662f\u65e0\u89e3\u7684\uff0c\u56e0\u4e3a\u4f60\u4e0d\u53ef\u80fd\u9009\u4e00\u4e2a\u7269\u54c1\u53c8\u4e0d\u9009\u4e00\u4e2a\u7269\u54c1\u3002 \u7f29\u70b9\u5b8c\u4e4b\u540e\uff0c\u8fd9\u4e2a\u56fe\u4f1a\u6210\u4e00\u4e2a DAG\u3002 \u4f46\u662f\u5b83\u4ecd\u7136\u53ef\u4ee5\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff0c\u65b0\u56fe\u4e0a \\(c[x_0]\\) \u548c \\(c[x_1]\\) \u7684\u5173\u7cfb\u5c31\u53ef\u4ee5\u770b\u6210 \\(x_0\\) \u548c \\(x_1\\) \u7684\u5173\u7cfb\u3002 \u5bf9\u4e8e\u539f\u6765\u6709\u7684\u4e00\u6761\u8fb9 \\((x,y)\\) \uff0c\u5728\u65b0\u56fe\u4e0a\u8fde\u63a5 \\((c[x],c[y])\\) \u5373\u53ef\u3002 \u53d1\u73b0\u5728\u65b0\u56fe\u4e0a\u9009\u62e9\u4e00\u4e2a\u96f6\u51fa\u5ea6\u70b9\u4e0d\u4f1a\u5bf9\u5176\u4ed6\u7684\u70b9\u9020\u6210\u4ec0\u4e48\u5f71\u54cd\uff0c\u90a3\u4e48\u5c31\u4e0d\u65ad\u7684\u627e\u96f6\u51fa\u5ea6\u70b9\u5373\u53ef\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u662f\u53cd\u7740\u7684\u62d3\u6251\u6392\u5e8f\u3002 \u90a3\u4e48\u5728\u8fd9\u4e2a\u65b0\u56fe\u7684\u53cd\u56fe\u4e0a\u8dd1\u62d3\u6251\u6392\u5e8f\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u6253\u4e00\u4e2a\u6807\u8bb0 \\(color\\) \uff0c\u8868\u793a\u8fd9\u4e2a SCC \u5f53\u4e2d\u7684\u6240\u6709\u53d8\u91cf\u7684\u53d6\u503c\u3002 \u5982\u679c\u5f53\u524d\u70b9 \\(u\\) \u7684 \\(color\\) \u6ca1\u6709\u88ab\u6807\u8bb0\u8fc7\uff0c\u90a3\u4e48\u7ed9\u4ed6\u6807\u8bb0\u4e3a \\(0\\) \uff0c\u5e76\u628a\u8fd9\u4e2a\u70b9\u5bf9\u5e94\u7684\u70b9 \\(v\\) \u6807\u8bb0\u4e3a \\(1\\) \u3002 \u5bf9\u5e94\u7684\u70b9\u5c31\u662f\u6ee1\u8db3\u7c7b\u4f3c\u539f\u56fe \\(x_0\\) \u548c \\(x_1\\) \u7684\u5173\u7cfb\u7684\u70b9\u3002 \u7136\u540e\u5c31\u5f97\u5230\u4e86\u4e00\u7ec4\u53ef\u884c\u89e3\u3002 \u4f46\u662f\u56e0\u4e3a Tarjan \u5b8c\u4e4b\u540e\u7684 SCC \u7f16\u53f7\u5c31\u662f\u9006\u62d3\u6251\u5e8f\uff0c\u6240\u4ee5\u76f4\u63a5\u6b63\u5e8f\u626b\u63cf\u6240\u6709 SCC \u5c31\u884c\u4e86\u3002 \u7ed9\u4e00\u7ec4\u5bf9\u5e94\u70b9\u5f53\u4e2d\u62d3\u6251\u5e8f\u66f4\u5927\uff0c\u4e5f\u5c31\u662f\u7f16\u53f7\u66f4\u5c0f\u7684\u7684\u4e00\u4e2a\u70b9\u67d3\u8272\u6210 \\(0\\) \uff0c\u53e6\u5916\u4e00\u4e2a\u67d3\u8272\u6210 \\(1\\) \u5373\u53ef\u3002 \u5b9e\u73b0\u53ef\u4ee5\u4e0d\u7528\u5224\u6bcf\u4e2a\u5143\u7d20\u7684\u72b6\u6001\u53d8\u91cf\u6240\u5728\u7684 SCC \u7684\u989c\u8272\uff0c\u53ea\u9700\u8981\u6bd4\u8f83\u7f16\u53f7\u5927\u5c0f\u5c31\u884c\u3002 1 2 3 4 5 6 7 8 9 10 11 for ( int i = 1 ; i <= 2 * n ; ++ i ) if ( ! dfn [ i ]) tarjan ( i ); for ( int i = 1 ; i <= n ; ++ i ) if ( c [ i ] == c [ i + n ]) return puts ( \"NO\" ), 0 ; for ( int i = 1 ; i <= n ; ++ i ) opp [ i ] = i + n , opp [ i + n ] = i ; for ( int i = 1 ; i <= 2 * n ; ++ i ) val [ i ] = c [ i ] > c [ opp [ i ]]; \u8fd8\u6709\u4e00\u79cd\u7206\u641c\u505a\u6cd5\uff0c\u4f46\u662f\u89c9\u5f97\u4e0d\u559c\u6b22\uff08 \u6bd5\u7adf Tarjan \u5199\u8d77\u6765\u65b9\u4fbf\uff0c\u5e38\u6570\u4e5f\u5c0f\u3002 \u6ce8\u610f\uff0c\u70b9\u76f8\u5173\u7684\u6570\u7ec4\u4e00\u5b9a\u8981\u5f00\u4e24\u500d\uff0c\u8fb9\u76f8\u5173\u7684\u9700\u8981\u8ba1\u7b97\u7136\u540e\u5f00\u5bf9\u5e94\u500d\u6570\u3002 \u5982\u679c\u4e24\u4e2a\u53d8\u91cf\u7684\u56db\u79cd\u53d6\u503c\u4e4b\u95f4\u6ca1\u6709\u4efb\u4f55\u7684\u7ea6\u675f\u5173\u7cfb\uff08\u4e5f\u53ef\u4ee5\u7406\u89e3\u6210\u4e0d\u77db\u76fe\uff09\uff0c\u662f\u4e0d\u7528\u8fde\u8fb9\u7684\u3002","title":"\u505a\u6cd5"},{"location":"algor/graph/connectivity/dcc/","text":"\u8fb9\u53cc\u8054\u901a\u5206\u91cf e-DCC \u03c8(\uff40\u2207\u00b4)\u03c8 \u5272\u8fb9/\u6865\uff1a\u5982\u679c\u5728\u65e0\u5411\u56fe \\(G=(V,E)\\) \u5f53\u4e2d\u53bb\u6389\u4e00\u6761\u8fb9 \\((u,v)\\) \u540e\uff0c \\(G\\) \u5206\u88c2\u4e3a\u4e24\u4e2a\u4e0d\u8054\u901a\u7684\u5b50\u56fe\uff0c\u5219\u79f0\u8fb9 \\((u,v)\\) \u662f\u65e0\u5411\u56fe \\(G\\) \u7684\u4e00\u4e2a\u6865\u3002 \u8fb9\u53cc\u8054\u901a\u5206\u91cf\uff1a\u4e0d\u542b\u6865\u8fb9\u7684\u6781\u5927\u8054\u901a\u5b50\u56fe\u3002 \u7c7b\u4f3c SCC\uff0c\u5f15\u5165 \\(G\\) \u7684\u4e00\u9897\u641c\u7d22\u6811 \\(T\\) \u548c \\(dfn,low\\) \u3002 \\(low\\) \u7684\u5b9a\u4e49\u4e5f\u662f\u4ece\u67d0\u4e2a\u8282\u70b9\u5411\u4e0a\u6700\u9ad8\uff08\u5728 \\(T\\) \u5f53\u4e2d\uff09\u80fd\u5230\u8fbe\u7684\u8282\u70b9\u7684 \\(dfn\\) \u3002 \u90a3\u4e48\u8981\u627e\u5230\u6865\u8fb9\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u627e\u5230\u641c\u7d22\u6811\u4e0a\u76f8\u90bb\u7684\u4e24\u4e2a\u8282\u70b9 \\((u,v)\\) \uff0c\u4f7f\u5f97 \\(u\\) \u662f \\(v\\) \u7684\u7236\u4eb2\u4e14 \\(dfn_u<low_v\\) \uff0c\u4e5f\u5c31\u662f \\(v\\) \u65e0\u8bba\u5982\u4f55\u90fd\u6ca1\u6709\u529e\u6cd5\u8d70\u5230 \\(u\\) \u6216\u8005 \\(u\\) \u66f4\u4e0a\u9762\u7684\u8282\u70b9\u3002 \u8fd9\u662f\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u6240\u4ee5 \\(v\\) \u548c \\(v\\) \u7684\u5b50\u6811\u90fd\u662f\u6ca1\u6709\u8fb9\u80fd\u5230\u8fbe \\(u\\) \u4ee5\u53ca\u66f4\u4e0a\u9762\u7684\u5b50\u56fe\u7684\u3002 \u56e0\u4e3a\u65e0\u5411\u56fe\u7684 dfs \u6811\u4ee5\u5916\u7684\u8fb9\u90fd\u4e0d\u662f\u6a2a\u53c9\u8fb9\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u8003\u8651\u201c\u56de\u8fb9\u201d\u7684\u5f71\u54cd\u3002 \u90a3\u4e48\u5fc5\u7136\u53ef\u4ee5\u8bc1\u660e\uff0c \\((u,v)\\) \u4e00\u5b9a\u662f\u6865\u8fb9\u3002 \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u540c\u65f6\u5f97\u5230\u4e00\u4e2a\u6027\u8d28\uff0c \u6865\u8fb9\u4e00\u5b9a\u662f\u6811\u8fb9 \u3002 \u800c\u4e14\uff0c \u4efb\u610f\u4e00\u4e2a\u7b80\u5355\u73af\u4e2d\u7684\u8fb9\u90fd\u4e0d\u662f\u6865\u8fb9 \u3002 \u53bb\u6389\u6865\u8fb9\u4e4b\u540e\uff0c\u5269\u4e0b\u7684\u8fde\u901a\u5757\u5c31\u662f\u4e00\u4e2a\u4e2a e-DCC\u3002 \u7f29\u70b9\u4e5f\u6bd4\u8f83\u5bb9\u6613\uff0c\u76f4\u63a5\u628a\u6240\u6709\u53bb\u6389\u6865\u8fb9\u4e4b\u540e\u7684\u8fde\u901a\u5757\u5206\u522b\u5408\u5e76\u6210\u4e00\u4e2a\u8282\u70b9\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int si = 2e5 + 10 ; int n , m , q ; // \u539f\u56fe int head [ si ], tot1 = 0 ; struct Edge { int ver , Next ; } e [ si << 2 ]; inline void add1 ( int u , int v ) { e [ tot1 ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot1 ++ ; } // \u7f29\u5b8c\u70b9\u4e4b\u540e\u7684\u56fe // \u5982\u679c\u539f\u6765\u7684\u56fe\u662f\u8fde\u901a\u56fe\u7684\u8bdd // \u53ef\u4ee5\u8bc1\u660e\u7f29\u5b8c\u70b9\u4e4b\u540e\u5fc5\u7136\u662f\u4e00\u68f5\u6811\u3002 int Head [ si ], tot2 = 0 ; struct Tree { int ver , Next ; } t [ si << 2 ]; inline void add2 ( int u , int v ) { t [ tot2 ] = ( Tree ){ v , Head [ u ]}, Head [ u ] = tot2 ++ ; } // E-dcc \u7684\u4e2a\u6570. int cnt = 0 ; int dfn [ si ], low [ si ], tim = 0 ; // \u662f\u5426\u662f\u6865 bool bridge [ si << 2 ]; int c [ si ]; // in_edge \u662f\u7528\u6765\u6d88\u9664\u91cd\u8fb9\u7684\u5f71\u54cd\u7684\u3002 // \u8868\u793a\u5f53\u524d\u72b6\u6001\u662f\u4ece\u54ea\u4e00\u6761\u8fb9\u8fc7\u6765\u7684\u3002 void tarjan ( int u , int in_edge ) { dfn [ u ] = low [ u ] = ++ tim ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( ! dfn [ v ]) { tarjan ( v , i ); low [ u ] = min ( low [ u ], low [ v ]); if ( dfn [ u ] < low [ v ]) bridge [ i ] = bridge [ i ^ 1 ] = true ; } else if (( i ^ 1 ) != in_edge ) low [ u ] = min ( low [ u ], dfn [ v ]); } } // \u53bb\u6389\u6865\u8fb9\u7684\u8fde\u901a\u5757\u67d3\u8272 void dfs ( int u , int col ) { c [ u ] = col ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( c [ v ] || bridge [ i ]) continue ; dfs ( v , col ); } } void Construct () { for ( int i = 1 ; i <= n ; ++ i ){ for ( int j = head [ i ]; ~ j ; j = e [ j ]. Next ) { int v = e [ j ]. ver ; if ( c [ i ] == c [ v ]) continue ; // \u53ea\u9700\u8981\u52a0\u4e00\u6b21\uff0c\u904d\u5386\u5230\u53cd\u5411\u8fb9\u7684\u65f6\u5019\u4f1a\u81ea\u52a8\u8865\u5168\u6210\u65e0\u5411\u8fb9 add2 ( c [ i ], c [ v ]); } } } int main () { memset ( head , -1 , sizeof head ); memset ( Head , -1 , sizeof Head ); memset ( bridge , false , sizeof bridge ); cin >> n >> m ; for ( int i = 1 ; i <= m ; ++ i ) { int u , v ; cin >> u >> v ; add1 ( u , v ), add1 ( v , u ); } for ( int i = 1 ; i <= n ; ++ i ) if ( ! dfn [ i ]) tarjan ( i , -1 ); for ( int i = 1 ; i <= n ; ++ i ) if ( ! c [ i ]) ++ cnt , dfs ( i , cnt ); Construct (); } \\(in\\_edge\\) \u8868\u793a\u9012\u5f52\u5230\u5f53\u524d\u8282\u70b9\u6240\u7ecf\u8fc7\u7684\u90a3\u4e00\u6761\u8fb9\u7684\u7f16\u53f7\u3002 \\(in\\_edge\\) \u5b58\u5728\u7684\u539f\u56e0\u662f\uff0c\u5982\u679c\u6309\u7167\u6b63\u5e38\u641c\u7d22\u6811\u7684\u66f4\u65b0\u65b9\u5f0f\uff0c \\(fa_u\\) \u7684 \\(dfn\\) \u5fc5\u7136\u4e0d\u4f1a\u7528\u6765\u66f4\u65b0 \\(u\\) \u7684 \\(low\\) \u3002 \u4f46\u662f\u5982\u679c\u51fa\u73b0\u91cd\u8fb9\u7684\u8bdd\uff0c\u90a3 \\((fa_u,u)\\) \u5fc5\u7136\u4e0d\u662f\u6865\u8fb9\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u7528 \\(fa_u\\) \u7684 \\(dfn\\) \u66f4\u65b0 \\(low_u\\) \u3002 \u53ef\u4ee5\u8bc1\u660e\u7684\u4e00\u4e2a\u63a8\u8bba\uff1a \u5bf9\u4e8e\u4e00\u4e2a\u65e0\u5411\u8fde\u901a\u56fe\uff0cEdcc \u7f29\u5b8c\u70b9\u4e4b\u540e\u5fc5\u7136\u4f1a\u5f62\u6210\u4e00\u68f5\u6811 \uff08\u8fd9\u4e1c\u897f\u88ab\u53eb\u505a\u8fb9\u53cc\u6811\u6765\u7740\uff09\u3002 \u56e0\u4e3a\u53ea\u8981\u56fe\u4e0a\u5e26\u73af\uff0c\u5c31\u53ef\u4ee5\u7ee7\u7eed\u7f29\u70b9\uff0c\u800c\u6811\u662f\u65e0\u5411\u8fde\u901a\u65e0\u73af\u56fe\uff0c\u6240\u4ee5\u5f97\u8bc1\u3002 \u70b9\u53cc\u8054\u901a\u5206\u91cf v-DCC \u03c8(\uff40\u2207\u00b4)\u03c8 \u5272\u70b9\uff1a\u5982\u679c\u5bf9\u4e8e\u65e0\u5411\u56fe \\(G=(V,E)\\) \uff0c \\(\\exist x \\in V\\) \uff0c\u4f7f\u5f97\u5220\u9664 \\(x\\) \u4e4b\u540e\uff0c \\(G\\) \u5206\u88c2\u6210\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u7684\u4e0d\u8054\u901a\u7684\u5b50\u56fe\uff0c\u5219\u79f0\u8282\u70b9 \\(x\\) \u662f\u65e0\u5411\u56fe \\(G\\) \u7684\u4e00\u4e2a\u5272\u70b9\u3002 \u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff1a\u4e0d\u542b\u5272\u70b9\u7684\u6781\u5927\u8054\u901a\u5b50\u56fe\uff0c\u4f46\u662f\u6ce8\u610f\uff0c\u8fd9\u91cc \u4e0d\u80fd\u76f4\u63a5\u6c42\u51fa\u5272\u70b9\u4e4b\u540e\u53bb\u6389\u5272\u70b9\u628a\u8fde\u901a\u5757\u5408\u5e76 \u3002 \u56e0\u4e3a\u5272\u70b9\u672c\u8eab\u5c31\u5c5e\u4e8e\u5b83\u8fde\u63a5\u7684\u70b9\u53cc\u8054\u901a\u5206\u91cf\uff08\u540c\u65f6\u5c5e\u4e8e\uff09\u3002 \u6240\u4ee5\u8981\u7279\u522b\u6ce8\u610f\u3002 \u4ecd\u7136\u5f15\u5165 \\(T\\) \uff0c \\(dfn\\) \u548c \\(low\\) \u3002 \u8003\u8651\u4e00\u4e2a\u8282\u70b9 \\(u\\) \u600e\u4e48\u624d\u53ef\u80fd\u6210\u4e3a\u5272\u70b9\u3002 \u5982\u679c\u5b58\u5728\u4e00\u6761\u6811\u8fb9 \\((u,v)\\) \u4e14 \\(u\\) \u662f \\(v\\) \u7684\u7236\u4eb2\u8282\u70b9\uff0c\u4e14\u6ee1\u8db3 \\(dfn_u \\le low_v\\) \uff0c \\(u\\) \u4e0d\u662f\u6839\u8282\u70b9\u3002 \u5982\u679c \\(u\\) \u662f\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u9700\u8981\u6ee1\u8db3\u4e24\u6b21\u4ee5\u4e0a \\(dfn_u \\le low_v\\) \u3002 \u4e5f\u5c31\u662f \\(v\\) \u548c \\(v\\) \u7684\u5b50\u6811\u91cc\u7684\u8282\u70b9\u6700\u9ad8\u53ea\u80fd\u5230 \\(u\\) \uff0c\u5230\u4e0d\u4e86 \\(u\\) \u66f4\u4e0a\u5c42\u7684\u8282\u70b9\uff0c\u90a3\u4e48 \\(u\\) \u5fc5\u7136\u4f1a\u628a \\(v\\) \u548c \\(v\\) \u7684\u5b50\u6811\u4ee5\u53ca \\(u\\) \u4e0a\u9762\u7684\u5b50\u56fe\u5206\u5f00\u3002 \u6240\u4ee5\u6b64\u65f6 \\(u\\) \u5c31\u662f\u4e00\u4e2a\u5272\u70b9\u3002 \u9012\u5f52\u7684\u540c\u65f6\u7ef4\u62a4\u4e00\u4e2a\u6808\uff0c\u539f\u7406\u7c7b\u4f3c SCC\u3002 \u7136\u540e\u6bcf\u6b21\u6ee1\u8db3 \\(dfn_u \\le low_v\\) \u7684\u65f6\u5019\u5c31\u5f39\u51fa\uff0c\u76f4\u5230 \\(v\\) \u51fa\u6808\uff0c\u88ab\u5f39\u51fa\u7684\u8282\u70b9\u5c31\u7ec4\u6210\u4e00\u4e2a v-DCC\u3002 \uff08\u8fd9\u91cc\u4e0d\u9700\u8981\u5224\u6839\uff0c\u53ef\u4ee5\u81ea\u5df1\u753b\u56fe\uff09 \u4e0d\u8981\u628a \\(u\\) \u5f39\u51fa\u53bb\u4e86\uff0c\u5982\u679c \\(u\\) \u662f\u5272\u70b9\uff0c\u90a3\u4e48\u4e4b\u540e\u8bbf\u95ee\u5230\u7684 v-DCC \u91cc\u9762\u5c31\u4f1a\u5c11 \\(u\\) \u8fd9\u4e2a\u70b9\u3002 \u56e0\u4e3a\u5224\u5b9a\u6761\u4ef6\u91cc\u9762\u6709 \\(=\\) \uff0c\u6240\u4ee5\u5c31\u4e0d\u9700\u8981\u518d\u5224 \\(in\\_edge\\) \u4e86\uff0c\u4e0d\u8fc7\u5728\u6ca1\u6709\u7279\u6b8a\u8bf4\u660e\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u5b9a\u8981\u8bb0\u4f4f\u628a\u91cd\u8fb9\u76f4\u63a5\u5728\u8bfb\u5165\u7684\u65f6\u5019\u5224\u6389\u3002 \u7f29\u70b9\u7684\u8bdd\u552f\u4e00\u8981\u6ce8\u610f\u7684\u5c31\u662f\u8981\u628a\u5272\u70b9\u5355\u72ec\u5206\u88c2\u51fa\u6765\uff0c\u4f46\u662f\u5272\u70b9\u53c8\u8981\u5b58\u5728\u4e8e\u5b83\u8fde\u63a5\u7684\u6240\u6709v-DCC \u5f53\u4e2d\u3002 \u6240\u4ee5\u8981\u7ed9\u5272\u70b9\u4e00\u4e2a\u65b0\u7f16\u53f7\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 #include <stack> #include <vector> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int si = 1e5 + 10 ; int n , m , root ; // \u539f\u56fe int head [ si ], tot1 = 0 ; // \u65b0\u56fe int Head [ si ], tot2 = 0 ; struct Edge { int ver , Next ; } e [ si << 2 ], g [ si << 2 ]; inline void add1 ( int u , int v ) { e [ tot1 ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot1 ++ ; } inline void add2 ( int u , int v ) { g [ tot2 ] = ( Edge ){ v , Head [ u ]}, Head [ u ] = tot2 ++ ; } // Vdcc \u7684\u4e2a\u6570 int cnt = 0 ; int dfn [ si ], low [ si ]; int c [ si ], tim ; // \u5272\u70b9\u7684\u65b0\u7f16\u53f7 int new_id [ si ]; // \u662f\u5426\u662f\u5272\u70b9 bool cut [ si ]; stack < int > s ; vector < int > vdcc [ si ]; void tarjan ( int u ) { dfn [ u ] = low [ u ] = ++ tim ; s . push ( u ); // \u5b64\u7acb\u70b9 if ( u == root && head [ u ] == -1 ) { vdcc [ ++ cnt ]. emplace_back ( u ); return ; } int flag = 0 ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( ! dfn [ v ]) { tarjan ( v ), low [ u ] = min ( low [ u ], low [ v ]); if ( dfn [ u ] <= low [ v ]) { ++ flag ; // \u6839\u8282\u70b9\u7279\u5224 if ( u != root || flag > 1 ) { // \u6ce8\u610f\u8fd9\u91cc\u662f\u77ed\u8def\u8fd0\u7b97\u7b26\uff0c\u4e0d\u8981\u6253\u53cd\u4e86\u3002 cut [ u ] = true ; } int x ; ++ cnt ; do { x = s . top (), s . pop (); vdcc [ cnt ]. emplace_back ( x ); } while ( v != x ); // \u6ce8\u610f\u8fd9\u91cc\u8981\u662f v \u4e0d\u662f u // \u5982\u679c u \u88ab\u5f39\u51fa\u4e86\uff0c\u4e4b\u540e\u7684\u8fde\u901a\u5757\u5c31\u4f1a\u5c11 u\u3002 vdcc [ cnt ]. emplace_back ( u ); } } else low [ u ] = min ( low [ u ], dfn [ v ]); } } int num ; void Construct () { num = cnt ; for ( int u = 1 ; u <= n ; ++ u ) { if ( cut [ u ]) new_id [ u ] = ++ num ; } for ( int i = 1 ; i <= cnt ; ++ i ) { for ( int j : vdcc [ i ]) { if ( cut [ j ]) add2 ( i , new_id [ j ]), add2 ( new_id [ j ], i ); else c [ j ] = i ; } // \u5982\u679c\u662f\u5272\u70b9\uff0c\u5c31\u548c\u8fd9\u4e2a\u5272\u70b9\u6240\u5728\u7684 v-Dcc \u8fde\u8fb9 // \u53cd\u4e4b\u67d3\u8272\u3002 } // \u7f16\u53f7 1~cnt \u7684\u662f v-Dcc, \u7f16\u53f7 > cnt \u7684\u662f\u539f\u56fe\u5272\u70b9 } int main () { memset ( head , -1 , sizeof head ); memset ( Head , -1 , sizeof Head ); cin >> n >> m ; for ( int i = 1 ; i <= m ; ++ i ) { int u , v ; cin >> u >> v ; // \u5224\u91cd\u8fb9 if ( u == v ) continue ; add1 ( u , v ), add1 ( v , u ); } for ( int i = 1 ; i <= n ; ++ i ) { if ( ! dfn [ i ]) root = i , tarjan ( i ); } Construct (); return 0 ; } \u5176\u5b9e\uff0c\u5982\u679c\u539f\u56fe\u662f \u65e0\u5411\u8fde\u901a\u56fe\u7684\u8bdd \uff0c vdcc \u7f29\u5b8c\u70b9\u4e4b\u540e\u5f97\u5230\u7684\u4e5f\u5fc5\u7136\u662f\u4e00\u68f5\u6811 \u3002 \u5e76\u4e14\uff0c\u5982\u679c\u628a\u5272\u70b9\u770b\u4f5c\u767d\u70b9\uff0c vdcc \u770b\u4f5c\u9ed1\u70b9\uff0c\u90a3\u4e48\u8fd9\u9897\u6811\u5fc5\u7136\u662f \u9ed1\u767d\u76f8\u95f4 \u7684\u3002 \u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002 \u8bc1\u660e\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u8bc1\u660e\u662f\u6811\u7684\u8bdd\u7c7b\u4f3c edcc\u3002 \u7136\u540e\u95ee\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\uff0c\u6811\u4e2d\u7684\u6240\u6709\u8fb9\u90fd\u662f\u4e00\u8fb9\u662f\u5272\u70b9\uff0c\u4e00\u8fb9\u662f\u4e00\u4e2a vdcc\u3002 \u8bc1\u660e\u5176\u5b83\u60c5\u51b5\u4e0d\u5b58\u5728\u5373\u53ef\u3002 \uff08\u5176\u5b9e\u770b Construct \u91cc\u7684\u52a0\u8fb9\u4e5f\u80fd\u770b\u51fa\u6765\uff09","title":"\u53cc\u8fde\u901a\u5206\u91cf"},{"location":"algor/graph/connectivity/dcc/#e-dcc","text":"\u5272\u8fb9/\u6865\uff1a\u5982\u679c\u5728\u65e0\u5411\u56fe \\(G=(V,E)\\) \u5f53\u4e2d\u53bb\u6389\u4e00\u6761\u8fb9 \\((u,v)\\) \u540e\uff0c \\(G\\) \u5206\u88c2\u4e3a\u4e24\u4e2a\u4e0d\u8054\u901a\u7684\u5b50\u56fe\uff0c\u5219\u79f0\u8fb9 \\((u,v)\\) \u662f\u65e0\u5411\u56fe \\(G\\) \u7684\u4e00\u4e2a\u6865\u3002 \u8fb9\u53cc\u8054\u901a\u5206\u91cf\uff1a\u4e0d\u542b\u6865\u8fb9\u7684\u6781\u5927\u8054\u901a\u5b50\u56fe\u3002 \u7c7b\u4f3c SCC\uff0c\u5f15\u5165 \\(G\\) \u7684\u4e00\u9897\u641c\u7d22\u6811 \\(T\\) \u548c \\(dfn,low\\) \u3002 \\(low\\) \u7684\u5b9a\u4e49\u4e5f\u662f\u4ece\u67d0\u4e2a\u8282\u70b9\u5411\u4e0a\u6700\u9ad8\uff08\u5728 \\(T\\) \u5f53\u4e2d\uff09\u80fd\u5230\u8fbe\u7684\u8282\u70b9\u7684 \\(dfn\\) \u3002 \u90a3\u4e48\u8981\u627e\u5230\u6865\u8fb9\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u627e\u5230\u641c\u7d22\u6811\u4e0a\u76f8\u90bb\u7684\u4e24\u4e2a\u8282\u70b9 \\((u,v)\\) \uff0c\u4f7f\u5f97 \\(u\\) \u662f \\(v\\) \u7684\u7236\u4eb2\u4e14 \\(dfn_u<low_v\\) \uff0c\u4e5f\u5c31\u662f \\(v\\) \u65e0\u8bba\u5982\u4f55\u90fd\u6ca1\u6709\u529e\u6cd5\u8d70\u5230 \\(u\\) \u6216\u8005 \\(u\\) \u66f4\u4e0a\u9762\u7684\u8282\u70b9\u3002 \u8fd9\u662f\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u6240\u4ee5 \\(v\\) \u548c \\(v\\) \u7684\u5b50\u6811\u90fd\u662f\u6ca1\u6709\u8fb9\u80fd\u5230\u8fbe \\(u\\) \u4ee5\u53ca\u66f4\u4e0a\u9762\u7684\u5b50\u56fe\u7684\u3002 \u56e0\u4e3a\u65e0\u5411\u56fe\u7684 dfs \u6811\u4ee5\u5916\u7684\u8fb9\u90fd\u4e0d\u662f\u6a2a\u53c9\u8fb9\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u8003\u8651\u201c\u56de\u8fb9\u201d\u7684\u5f71\u54cd\u3002 \u90a3\u4e48\u5fc5\u7136\u53ef\u4ee5\u8bc1\u660e\uff0c \\((u,v)\\) \u4e00\u5b9a\u662f\u6865\u8fb9\u3002 \u8fd9\u91cc\u4e5f\u53ef\u4ee5\u540c\u65f6\u5f97\u5230\u4e00\u4e2a\u6027\u8d28\uff0c \u6865\u8fb9\u4e00\u5b9a\u662f\u6811\u8fb9 \u3002 \u800c\u4e14\uff0c \u4efb\u610f\u4e00\u4e2a\u7b80\u5355\u73af\u4e2d\u7684\u8fb9\u90fd\u4e0d\u662f\u6865\u8fb9 \u3002 \u53bb\u6389\u6865\u8fb9\u4e4b\u540e\uff0c\u5269\u4e0b\u7684\u8fde\u901a\u5757\u5c31\u662f\u4e00\u4e2a\u4e2a e-DCC\u3002 \u7f29\u70b9\u4e5f\u6bd4\u8f83\u5bb9\u6613\uff0c\u76f4\u63a5\u628a\u6240\u6709\u53bb\u6389\u6865\u8fb9\u4e4b\u540e\u7684\u8fde\u901a\u5757\u5206\u522b\u5408\u5e76\u6210\u4e00\u4e2a\u8282\u70b9\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int si = 2e5 + 10 ; int n , m , q ; // \u539f\u56fe int head [ si ], tot1 = 0 ; struct Edge { int ver , Next ; } e [ si << 2 ]; inline void add1 ( int u , int v ) { e [ tot1 ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot1 ++ ; } // \u7f29\u5b8c\u70b9\u4e4b\u540e\u7684\u56fe // \u5982\u679c\u539f\u6765\u7684\u56fe\u662f\u8fde\u901a\u56fe\u7684\u8bdd // \u53ef\u4ee5\u8bc1\u660e\u7f29\u5b8c\u70b9\u4e4b\u540e\u5fc5\u7136\u662f\u4e00\u68f5\u6811\u3002 int Head [ si ], tot2 = 0 ; struct Tree { int ver , Next ; } t [ si << 2 ]; inline void add2 ( int u , int v ) { t [ tot2 ] = ( Tree ){ v , Head [ u ]}, Head [ u ] = tot2 ++ ; } // E-dcc \u7684\u4e2a\u6570. int cnt = 0 ; int dfn [ si ], low [ si ], tim = 0 ; // \u662f\u5426\u662f\u6865 bool bridge [ si << 2 ]; int c [ si ]; // in_edge \u662f\u7528\u6765\u6d88\u9664\u91cd\u8fb9\u7684\u5f71\u54cd\u7684\u3002 // \u8868\u793a\u5f53\u524d\u72b6\u6001\u662f\u4ece\u54ea\u4e00\u6761\u8fb9\u8fc7\u6765\u7684\u3002 void tarjan ( int u , int in_edge ) { dfn [ u ] = low [ u ] = ++ tim ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( ! dfn [ v ]) { tarjan ( v , i ); low [ u ] = min ( low [ u ], low [ v ]); if ( dfn [ u ] < low [ v ]) bridge [ i ] = bridge [ i ^ 1 ] = true ; } else if (( i ^ 1 ) != in_edge ) low [ u ] = min ( low [ u ], dfn [ v ]); } } // \u53bb\u6389\u6865\u8fb9\u7684\u8fde\u901a\u5757\u67d3\u8272 void dfs ( int u , int col ) { c [ u ] = col ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( c [ v ] || bridge [ i ]) continue ; dfs ( v , col ); } } void Construct () { for ( int i = 1 ; i <= n ; ++ i ){ for ( int j = head [ i ]; ~ j ; j = e [ j ]. Next ) { int v = e [ j ]. ver ; if ( c [ i ] == c [ v ]) continue ; // \u53ea\u9700\u8981\u52a0\u4e00\u6b21\uff0c\u904d\u5386\u5230\u53cd\u5411\u8fb9\u7684\u65f6\u5019\u4f1a\u81ea\u52a8\u8865\u5168\u6210\u65e0\u5411\u8fb9 add2 ( c [ i ], c [ v ]); } } } int main () { memset ( head , -1 , sizeof head ); memset ( Head , -1 , sizeof Head ); memset ( bridge , false , sizeof bridge ); cin >> n >> m ; for ( int i = 1 ; i <= m ; ++ i ) { int u , v ; cin >> u >> v ; add1 ( u , v ), add1 ( v , u ); } for ( int i = 1 ; i <= n ; ++ i ) if ( ! dfn [ i ]) tarjan ( i , -1 ); for ( int i = 1 ; i <= n ; ++ i ) if ( ! c [ i ]) ++ cnt , dfs ( i , cnt ); Construct (); } \\(in\\_edge\\) \u8868\u793a\u9012\u5f52\u5230\u5f53\u524d\u8282\u70b9\u6240\u7ecf\u8fc7\u7684\u90a3\u4e00\u6761\u8fb9\u7684\u7f16\u53f7\u3002 \\(in\\_edge\\) \u5b58\u5728\u7684\u539f\u56e0\u662f\uff0c\u5982\u679c\u6309\u7167\u6b63\u5e38\u641c\u7d22\u6811\u7684\u66f4\u65b0\u65b9\u5f0f\uff0c \\(fa_u\\) \u7684 \\(dfn\\) \u5fc5\u7136\u4e0d\u4f1a\u7528\u6765\u66f4\u65b0 \\(u\\) \u7684 \\(low\\) \u3002 \u4f46\u662f\u5982\u679c\u51fa\u73b0\u91cd\u8fb9\u7684\u8bdd\uff0c\u90a3 \\((fa_u,u)\\) \u5fc5\u7136\u4e0d\u662f\u6865\u8fb9\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u7528 \\(fa_u\\) \u7684 \\(dfn\\) \u66f4\u65b0 \\(low_u\\) \u3002 \u53ef\u4ee5\u8bc1\u660e\u7684\u4e00\u4e2a\u63a8\u8bba\uff1a \u5bf9\u4e8e\u4e00\u4e2a\u65e0\u5411\u8fde\u901a\u56fe\uff0cEdcc \u7f29\u5b8c\u70b9\u4e4b\u540e\u5fc5\u7136\u4f1a\u5f62\u6210\u4e00\u68f5\u6811 \uff08\u8fd9\u4e1c\u897f\u88ab\u53eb\u505a\u8fb9\u53cc\u6811\u6765\u7740\uff09\u3002 \u56e0\u4e3a\u53ea\u8981\u56fe\u4e0a\u5e26\u73af\uff0c\u5c31\u53ef\u4ee5\u7ee7\u7eed\u7f29\u70b9\uff0c\u800c\u6811\u662f\u65e0\u5411\u8fde\u901a\u65e0\u73af\u56fe\uff0c\u6240\u4ee5\u5f97\u8bc1\u3002","title":"\u8fb9\u53cc\u8054\u901a\u5206\u91cf e-DCC"},{"location":"algor/graph/connectivity/dcc/#v-dcc","text":"\u5272\u70b9\uff1a\u5982\u679c\u5bf9\u4e8e\u65e0\u5411\u56fe \\(G=(V,E)\\) \uff0c \\(\\exist x \\in V\\) \uff0c\u4f7f\u5f97\u5220\u9664 \\(x\\) \u4e4b\u540e\uff0c \\(G\\) \u5206\u88c2\u6210\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u7684\u4e0d\u8054\u901a\u7684\u5b50\u56fe\uff0c\u5219\u79f0\u8282\u70b9 \\(x\\) \u662f\u65e0\u5411\u56fe \\(G\\) \u7684\u4e00\u4e2a\u5272\u70b9\u3002 \u70b9\u53cc\u8fde\u901a\u5206\u91cf\uff1a\u4e0d\u542b\u5272\u70b9\u7684\u6781\u5927\u8054\u901a\u5b50\u56fe\uff0c\u4f46\u662f\u6ce8\u610f\uff0c\u8fd9\u91cc \u4e0d\u80fd\u76f4\u63a5\u6c42\u51fa\u5272\u70b9\u4e4b\u540e\u53bb\u6389\u5272\u70b9\u628a\u8fde\u901a\u5757\u5408\u5e76 \u3002 \u56e0\u4e3a\u5272\u70b9\u672c\u8eab\u5c31\u5c5e\u4e8e\u5b83\u8fde\u63a5\u7684\u70b9\u53cc\u8054\u901a\u5206\u91cf\uff08\u540c\u65f6\u5c5e\u4e8e\uff09\u3002 \u6240\u4ee5\u8981\u7279\u522b\u6ce8\u610f\u3002 \u4ecd\u7136\u5f15\u5165 \\(T\\) \uff0c \\(dfn\\) \u548c \\(low\\) \u3002 \u8003\u8651\u4e00\u4e2a\u8282\u70b9 \\(u\\) \u600e\u4e48\u624d\u53ef\u80fd\u6210\u4e3a\u5272\u70b9\u3002 \u5982\u679c\u5b58\u5728\u4e00\u6761\u6811\u8fb9 \\((u,v)\\) \u4e14 \\(u\\) \u662f \\(v\\) \u7684\u7236\u4eb2\u8282\u70b9\uff0c\u4e14\u6ee1\u8db3 \\(dfn_u \\le low_v\\) \uff0c \\(u\\) \u4e0d\u662f\u6839\u8282\u70b9\u3002 \u5982\u679c \\(u\\) \u662f\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u9700\u8981\u6ee1\u8db3\u4e24\u6b21\u4ee5\u4e0a \\(dfn_u \\le low_v\\) \u3002 \u4e5f\u5c31\u662f \\(v\\) \u548c \\(v\\) \u7684\u5b50\u6811\u91cc\u7684\u8282\u70b9\u6700\u9ad8\u53ea\u80fd\u5230 \\(u\\) \uff0c\u5230\u4e0d\u4e86 \\(u\\) \u66f4\u4e0a\u5c42\u7684\u8282\u70b9\uff0c\u90a3\u4e48 \\(u\\) \u5fc5\u7136\u4f1a\u628a \\(v\\) \u548c \\(v\\) \u7684\u5b50\u6811\u4ee5\u53ca \\(u\\) \u4e0a\u9762\u7684\u5b50\u56fe\u5206\u5f00\u3002 \u6240\u4ee5\u6b64\u65f6 \\(u\\) \u5c31\u662f\u4e00\u4e2a\u5272\u70b9\u3002 \u9012\u5f52\u7684\u540c\u65f6\u7ef4\u62a4\u4e00\u4e2a\u6808\uff0c\u539f\u7406\u7c7b\u4f3c SCC\u3002 \u7136\u540e\u6bcf\u6b21\u6ee1\u8db3 \\(dfn_u \\le low_v\\) \u7684\u65f6\u5019\u5c31\u5f39\u51fa\uff0c\u76f4\u5230 \\(v\\) \u51fa\u6808\uff0c\u88ab\u5f39\u51fa\u7684\u8282\u70b9\u5c31\u7ec4\u6210\u4e00\u4e2a v-DCC\u3002 \uff08\u8fd9\u91cc\u4e0d\u9700\u8981\u5224\u6839\uff0c\u53ef\u4ee5\u81ea\u5df1\u753b\u56fe\uff09 \u4e0d\u8981\u628a \\(u\\) \u5f39\u51fa\u53bb\u4e86\uff0c\u5982\u679c \\(u\\) \u662f\u5272\u70b9\uff0c\u90a3\u4e48\u4e4b\u540e\u8bbf\u95ee\u5230\u7684 v-DCC \u91cc\u9762\u5c31\u4f1a\u5c11 \\(u\\) \u8fd9\u4e2a\u70b9\u3002 \u56e0\u4e3a\u5224\u5b9a\u6761\u4ef6\u91cc\u9762\u6709 \\(=\\) \uff0c\u6240\u4ee5\u5c31\u4e0d\u9700\u8981\u518d\u5224 \\(in\\_edge\\) \u4e86\uff0c\u4e0d\u8fc7\u5728\u6ca1\u6709\u7279\u6b8a\u8bf4\u660e\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u5b9a\u8981\u8bb0\u4f4f\u628a\u91cd\u8fb9\u76f4\u63a5\u5728\u8bfb\u5165\u7684\u65f6\u5019\u5224\u6389\u3002 \u7f29\u70b9\u7684\u8bdd\u552f\u4e00\u8981\u6ce8\u610f\u7684\u5c31\u662f\u8981\u628a\u5272\u70b9\u5355\u72ec\u5206\u88c2\u51fa\u6765\uff0c\u4f46\u662f\u5272\u70b9\u53c8\u8981\u5b58\u5728\u4e8e\u5b83\u8fde\u63a5\u7684\u6240\u6709v-DCC \u5f53\u4e2d\u3002 \u6240\u4ee5\u8981\u7ed9\u5272\u70b9\u4e00\u4e2a\u65b0\u7f16\u53f7\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 #include <stack> #include <vector> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int si = 1e5 + 10 ; int n , m , root ; // \u539f\u56fe int head [ si ], tot1 = 0 ; // \u65b0\u56fe int Head [ si ], tot2 = 0 ; struct Edge { int ver , Next ; } e [ si << 2 ], g [ si << 2 ]; inline void add1 ( int u , int v ) { e [ tot1 ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot1 ++ ; } inline void add2 ( int u , int v ) { g [ tot2 ] = ( Edge ){ v , Head [ u ]}, Head [ u ] = tot2 ++ ; } // Vdcc \u7684\u4e2a\u6570 int cnt = 0 ; int dfn [ si ], low [ si ]; int c [ si ], tim ; // \u5272\u70b9\u7684\u65b0\u7f16\u53f7 int new_id [ si ]; // \u662f\u5426\u662f\u5272\u70b9 bool cut [ si ]; stack < int > s ; vector < int > vdcc [ si ]; void tarjan ( int u ) { dfn [ u ] = low [ u ] = ++ tim ; s . push ( u ); // \u5b64\u7acb\u70b9 if ( u == root && head [ u ] == -1 ) { vdcc [ ++ cnt ]. emplace_back ( u ); return ; } int flag = 0 ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( ! dfn [ v ]) { tarjan ( v ), low [ u ] = min ( low [ u ], low [ v ]); if ( dfn [ u ] <= low [ v ]) { ++ flag ; // \u6839\u8282\u70b9\u7279\u5224 if ( u != root || flag > 1 ) { // \u6ce8\u610f\u8fd9\u91cc\u662f\u77ed\u8def\u8fd0\u7b97\u7b26\uff0c\u4e0d\u8981\u6253\u53cd\u4e86\u3002 cut [ u ] = true ; } int x ; ++ cnt ; do { x = s . top (), s . pop (); vdcc [ cnt ]. emplace_back ( x ); } while ( v != x ); // \u6ce8\u610f\u8fd9\u91cc\u8981\u662f v \u4e0d\u662f u // \u5982\u679c u \u88ab\u5f39\u51fa\u4e86\uff0c\u4e4b\u540e\u7684\u8fde\u901a\u5757\u5c31\u4f1a\u5c11 u\u3002 vdcc [ cnt ]. emplace_back ( u ); } } else low [ u ] = min ( low [ u ], dfn [ v ]); } } int num ; void Construct () { num = cnt ; for ( int u = 1 ; u <= n ; ++ u ) { if ( cut [ u ]) new_id [ u ] = ++ num ; } for ( int i = 1 ; i <= cnt ; ++ i ) { for ( int j : vdcc [ i ]) { if ( cut [ j ]) add2 ( i , new_id [ j ]), add2 ( new_id [ j ], i ); else c [ j ] = i ; } // \u5982\u679c\u662f\u5272\u70b9\uff0c\u5c31\u548c\u8fd9\u4e2a\u5272\u70b9\u6240\u5728\u7684 v-Dcc \u8fde\u8fb9 // \u53cd\u4e4b\u67d3\u8272\u3002 } // \u7f16\u53f7 1~cnt \u7684\u662f v-Dcc, \u7f16\u53f7 > cnt \u7684\u662f\u539f\u56fe\u5272\u70b9 } int main () { memset ( head , -1 , sizeof head ); memset ( Head , -1 , sizeof Head ); cin >> n >> m ; for ( int i = 1 ; i <= m ; ++ i ) { int u , v ; cin >> u >> v ; // \u5224\u91cd\u8fb9 if ( u == v ) continue ; add1 ( u , v ), add1 ( v , u ); } for ( int i = 1 ; i <= n ; ++ i ) { if ( ! dfn [ i ]) root = i , tarjan ( i ); } Construct (); return 0 ; } \u5176\u5b9e\uff0c\u5982\u679c\u539f\u56fe\u662f \u65e0\u5411\u8fde\u901a\u56fe\u7684\u8bdd \uff0c vdcc \u7f29\u5b8c\u70b9\u4e4b\u540e\u5f97\u5230\u7684\u4e5f\u5fc5\u7136\u662f\u4e00\u68f5\u6811 \u3002 \u5e76\u4e14\uff0c\u5982\u679c\u628a\u5272\u70b9\u770b\u4f5c\u767d\u70b9\uff0c vdcc \u770b\u4f5c\u9ed1\u70b9\uff0c\u90a3\u4e48\u8fd9\u9897\u6811\u5fc5\u7136\u662f \u9ed1\u767d\u76f8\u95f4 \u7684\u3002 \u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002 \u8bc1\u660e\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u8bc1\u660e\u662f\u6811\u7684\u8bdd\u7c7b\u4f3c edcc\u3002 \u7136\u540e\u95ee\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\uff0c\u6811\u4e2d\u7684\u6240\u6709\u8fb9\u90fd\u662f\u4e00\u8fb9\u662f\u5272\u70b9\uff0c\u4e00\u8fb9\u662f\u4e00\u4e2a vdcc\u3002 \u8bc1\u660e\u5176\u5b83\u60c5\u51b5\u4e0d\u5b58\u5728\u5373\u53ef\u3002 \uff08\u5176\u5b9e\u770b Construct \u91cc\u7684\u52a0\u8fb9\u4e5f\u80fd\u770b\u51fa\u6765\uff09","title":"\u70b9\u53cc\u8054\u901a\u5206\u91cf v-DCC"},{"location":"algor/graph/connectivity/scc/","text":"\u4e00\u4e9b\u5b9a\u4e49 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8054\u901a\u5206\u91cf\uff1a\u5bf9\u4e8e\u4e00\u4e2a \u6709\u5411\u56fe \u7684\u5206\u91cf\u5f53\u4e2d\u7684\u4efb\u610f\u4e24\u70b9 \\((u,v)\\) \uff0c \\(\\exists \\delta (u,v) \\land \\delta (v,u)\\) \uff0c\u5219\u79f0\u8fd9\u4e2a\u5206\u91cf\u4e3a\u8054\u901a\u5206\u91cf \u5f3a\u8054\u901a\u5206\u91cf SCC\uff1a\u6709\u5411\u56fe\u7684\u4e00\u4e2a\u6781\u5927\u8fde\u901a\u5206\u91cf\u88ab\u79f0\u4f5c\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u6781\u5927\u7684\u7406\u89e3\u5c31\u662f\uff0c\u4e0d\u7ba1\u518d\u52a0\u4e0a\u54ea\u4e00\u4e2a\u8fb9\u548c\u54ea\u4e00\u4e2a\u8282\u70b9\uff0c\u4ed6\u90fd\u4e0d\u518d\u662f\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\uff0c\u4e5f\u5c31\u662f\u201c\u5927\u7684\u4e0d\u80fd\u518d\u5927\u201d\u3002 \u6d41\u56fe\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u6709\u5411\u56fe \\(G=(V,E)\\) \uff0c \\(\\exists r \\in V\\) \uff0c\u6ee1\u8db3 \\(r\\) \u53ef\u4ee5\u5230\u8fbe \\(V\\) \u4e2d\u7684\u4efb\u610f\u8282\u70b9\uff0c\u5219\u79f0 \\(G\\) \u4e3a\u4e00\u4e2a\u6d41\u56fe\u3002 \\(r\\) \u79f0\u4f5c\u6d41\u56fe\u7684\u6e90\u70b9\u3002 \u641c\u7d22\u6811\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u6d41\u56fe \\(G\\) \u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u5f97\u5230\u7684\u4e00\u68f5\u751f\u6210\u6811 \\(T\\) \u3002 \u65f6\u95f4\u6233 \\(dfn\\) \uff1a\u5bf9\u4e8e \\(G\\) \u4e2d\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u5b83\u5728 \\(T\\) \u4e2d\u88ab\u641c\u7d22\u5230\u7684\u987a\u5e8f\uff08\u65f6\u95f4\uff09\u3002 \u4e3a\u4e86\u65b9\u4fbf\u53d9\u8ff0\uff0c\u8fd9\u91cc\u518d\u5b9a\u4e49\u56db\u79cd\u8fb9\uff0c\u6d41\u56fe \\(G\\) \u7684\u6240\u6709\u8fb9\u5fc5\u7136\u662f\u8fd9\u56db\u79cd\u8fb9\u4e4b\u4e00 \u6811\u8fb9\uff1a\u5728\u641c\u7d22\u6811\u91cc\u7684\u8fb9\uff0c\u4ece \\(u \\to v\\) \uff0c\u4e14 \\(u\\) \u662f \\(v\\) \u7684\u7236\u4eb2\u3002 \u524d\u5411\u8fb9\uff1a\u4ece \\(u \\to v\\) \uff0c\u4e14 \\(u\\) \u662f \\(v\\) \u5728 \\(T\\) \u4e0a\u7684\u7956\u5148\u3002 \u540e\u5411\u8fb9\uff1a\u4ece \\(u \\to v\\) \uff0c\u4e14 \\(v\\) \u662f \\(u\\) \u5728 \\(T\\) \u4e0a\u7684\u7956\u5148 \u6a2a\u53c9\u8fb9\uff1a\u9664\u4e86 123 \u7684\u6240\u6709\u8fb9\uff0c\u5fc5\u7136\u6ee1\u8db3 \\(u \\to v,dfn_v<dfn_u\\) \u3002 Tarjan \u7b97\u6cd5 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8003\u8651\u641c\u7d22\u6811\u4e0a\u7684\u8282\u70b9\u5982\u4f55\u624d\u80fd\u6210\u4e3a SCC \u5f53\u4e2d\u7684\u8282\u70b9\u3002 \u9996\u5148\uff0c\u4e00\u4e2a\u5b64\u7acb\u7684\u70b9\uff08\u8fd9\u91cc\u6307\u8d70\u51fa\u53bb\u4e86\u5c31\u6ca1\u6cd5\u56de\u6765\uff09\u5fc5\u7136\u662f\u4e00\u4e2a SCC\u3002 \u5982\u679c\u60f3\u8981\u66f4\u591a\u70b9\u52a0\u5165\u8fd9\u4e2a SCC\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u8981\u627e\u5230\u4e00\u4e2a\u73af\u3002 \u90a3\u4e48\u540e\u5411\u8fb9\u5fc5\u7136\u662f\u6709\u7528\u7684\uff0c\u5047\u8bbe \\(v\\) \u662f \\(u\\) \u7684\u7956\u5148\uff0c\u90a3\u4e48\u5fc5\u7136\u5b58\u5728\u4e00\u4e2a\u8def\u5f84\u4ece \\(v \\to u\\) \u3002 \u800c\u8fd9\u91cc\u53c8\u5b58\u5728\u4e00\u6761\u540e\u5411\u8fb9 \\(u \\to v\\) \uff0c\u90a3\u4e48\u5fc5\u7136\u4f1a\u51fa\u73b0\u4e00\u4e2a\u73af\uff0c\u4e5f\u5c31\u51fa\u73b0\u4e86\u4e00\u4e2a\u8054\u901a\u5206\u91cf\u3002 \u800c\u6a2a\u53c9\u8fb9\u4e5f\u8bb8\u4f1a\u6709\u7528\uff0c\u53ea\u8981\u4ece \\(u\\) \u7ecf\u8fc7\u4e00\u4e2a\u6a2a\u53c9\u8fb9\u8d70\u5230 \\(v\\) \uff0c\u4e14 \\(v\\) \u53ef\u4ee5\u5230\u8fbe \\(u\\) \u7684\u7956\u5148\u8282\u70b9\uff0c\u90a3\u4e48\u4e5f\u4f1a\u51fa\u73b0\u4e00\u4e2a\u73af\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u8054\u901a\u5206\u91cf\u3002 \u90a3\u4e48\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u5728\u6d41\u56fe\u4e0a\u627e\u5230\u5c3d\u53ef\u80fd\u5927\u7684\uff0c\u7531 \\(T\\) \u7ecf\u8fc7\u6dfb\u52a0\u51e0\u6761\u540e\u5411\u8fb9\u548c\u6a2a\u53c9\u8fb9\u6784\u6210\u7684\u73af\u3002 \u6240\u4ee5\u5f15\u5165\u4e00\u4e2a\u65b0\u7684\u503c \\(low_u\\) \uff0c\u8868\u793a \\(u\\) \u548c\u5b83\u5b50\u6811\u5f53\u4e2d\u7684\u8282\u70b9\u80fd\u5f80\u4e0a\uff08\u5728 \\(T\\) \u5f53\u4e2d\u7684\u4e0a\uff09\u8d70\u5230\u7684\u6700\u9ad8\uff08\u5728 \\(T\\) \u5f53\u4e2d\u6df1\u5ea6\u66f4\u4f4e\uff09\u7684\u8282\u70b9\u7684\u65f6\u95f4\u6233 \\(dfn\\) \u3002 \u5982\u679c\u51fa\u73b0 \\(low_u=dfn_u\\) \uff0c\u4e5f\u5c31\u662f \\(u\\) \u4e0d\u53ef\u80fd\u518d\u5f80\u4e0a\u8d70\uff0c\u5b83\u7684 \\(low\\) \u5c31\u662f\u81ea\u5df1\u7684 \\(dfn\\) \u7684\u65f6\u5019\uff0c\u90a3\u4e48 \\(u\\) \u5fc5\u7136\u662f\u5b83\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u5728 \\(T\\) \u4e0a\u6700\u9ad8\u7684\u70b9\u3002 \u7136\u540e\u5728\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u65f6\u5019\u540c\u65f6\u7ef4\u62a4\u4e00\u4e2a\u6808\uff0c\u4fdd\u5b58\u5f53\u524d\u80fd\u4e0e\u4ece\u8fd9\u4e2a\u8282\u70b9\u51fa\u53d1\u7684\u540e\u5411\u8fb9\u548c\u6a2a\u53c9\u8fb9\u6784\u6210\u73af\u7684\u6240\u6709\u8282\u70b9\u3002 \u8bb0 \\(anc(u)\\) \u8868\u793a \\(u\\) \u5728 \\(T\\) \u4e0a\u7684\u6240\u6709\u7956\u5148\u8282\u70b9\uff0c\u90a3\u4e48\u6808\u4e2d\u4fdd\u5b58\u7684\u5b9e\u9645\u4e0a\u5c31\u662f\u8fd9\u4e24\u7c7b\u8282\u70b9\uff1a \\(v \\in anc(u)\\) \uff0c\u4e14\u6709\u53ef\u80fd\u5b58\u5728\u540e\u5411\u8fb9 \\(u \\to v\\) \u3002 \\(v \\in V\\) \uff0c\u4e14\u5b58\u5728\u8def\u5f84 \\(\\delta(v\\to w),w\\in anc_u\\) \u3002 \u5728\u6ee1\u8db3 \\(low_u=dfn_u\\) \u7684\u65f6\u5019\uff0c\u628a\u6808\u7684\u8282\u70b9\u4e0d\u65ad\u5f39\u51fa\uff0c\u76f4\u5230 \\(u\\) \u51fa\u6808\uff0c\u6b64\u65f6\u5f53\u524d\u88ab\u5f39\u51fa\u7684\u6240\u6709\u8282\u70b9\u5c31\u6784\u6210\u4e00\u4e2a SCC\u3002 \u5f88\u660e\u663e \\(anc(u)\\) \u4e2d\u7684\u6240\u6709\u8282\u70b9\u90fd\u5148\u4e8e \\(u\\) \u5165\u6808\u3002 \u6240\u4ee5\u5728 \\(u\\) \u5f39\u51fa\u524d\u5f39\u51fa\u7684\u4e00\u5b9a\u662f\u7b2c\u4e8c\u7c7b\u8282\u70b9\u3002 \u5177\u4f53\u5b9e\u73b0\uff1a \u6bcf\u6b21\u65b0\u8bbf\u95ee\u4e00\u4e2a\u8282\u70b9\u7684\u65f6\u5019\u521d\u59cb\u5316 \\(dfn=time + 1,low=dfn\\) \u3002 \u7136\u540e\u8bbf\u95ee\u5b83\u7684\u6240\u6709\u51fa\u8fb9 \\((u,v)\\) \uff0c\u5982\u679c\u51fa\u8fb9\u5bf9\u5e94\u7684\u8282\u70b9 \\(v\\) \u6ca1\u6709\u8bbf\u95ee\u8fc7\uff08\u5f53\u524d\u8bbf\u95ee\u7684\u662f\u6811\u8fb9\uff09\uff0c\u90a3\u4e48\u5c31\u9012\u5f52\u7136\u540e\u7528 \\(low_v\\) \u66f4\u65b0 \\(low_u\\) \u3002 \u53cd\u4e4b\uff0c\u5982\u679c \\(v\\) \u5df2\u7ecf\u5728\u6808\u4e2d\u4e86\uff0c\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b58\u5728\u4e00\u6761\u540e\u5411\u8fb9\u6216\u8005\u6a2a\u53c9\u8fb9\u4ece \\(u\\) \u51fa\u53d1\u80fd\u5230\u66f4\u4e0a\u9762\u3002 \u6839\u636e\u6808\u4e2d\u8282\u70b9\u7684\u6027\u8d28\uff0c\u7528 \\(dfn_v\\) \u66f4\u65b0 \\(low_u\\) \u5373\u53ef\u3002 \u6ce8\u610f\u8fd9\u91cc\u8981\u662f \\(dfn_v\\) \u800c\u4e0d\u662f \\(low_v\\) \uff0cTarjan \u8001\u7237\u5b50\u4eb2\u81ea\u8bf4\u8fc7\u3002 \uff08TODO\uff1a\u81ea\u5df1\u5c1d\u8bd5\u8bc1\u660e\u4e00\u4e0b\u8fd9\u513f\u662f\u4e3a\u5565\uff09 \u5982\u679c\u628a\u6bcf\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u770b\u4f5c\u4e00\u4e2a\u70b9\u3002 \u90a3\u4e48\u7f29\u5b8c\u70b9\u4e4b\u540e\u7684\u56fe\u5c31\u662f\u4e00\u4e2a DAG\u3002 \u5e76\u4e14 SCC \u7f16\u53f7\u7684\u987a\u5e8f\u5c31\u662f \u9006\u62d3\u6251\u5e8f \u3002 \u7f29\u70b9\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u80fd\u975e\u5e38\u65b9\u4fbf\u5730\u8fdb\u884c DP\uff0c\u56e0\u4e3a\u6b63\u5e38 DP \u7684\u987a\u5e8f\u672c\u6765\u5c31\u662f\u62d3\u6251\u5e8f\u3002 \u4e00\u822c\u90fd\u662f\u76f4\u63a5\u9012\u63a8\u6c42\u89e3\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 std :: stack < int > s ; bool ins [ si_n ]; // in the stack or not int c [ si_n ]; //c[x] = the num of SCC which is x iside std :: vector < int > scc [ si_n ]; // scc[i] -> all node in i-th scc (information of i-th scc) // \u5982\u679c\u6ca1\u6709\u5fc5\u8981\u7684\u8bdd\u53ef\u4ee5\u4e0d\u8981 vector int dfn [ si_n ], low [ si_n ]; int n , m , cnt_t = 0 , tot = 0 ; // tot = how many scc in the graph. void tarjan ( int u ){ dfn [ u ] = low [ u ] =++ cnt_t ; s . push ( u ), ins [ u ] = true ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( ! dfn [ v ]){ tarjan ( v ); low [ u ] = min ( low [ u ], low [ v ]); } // \u6ca1\u6709\u8bbf\u95ee\u8fc7\uff0c\u9012\u5f52\u641c\u7d22\u7136\u540e\u66f4\u65b0 low\u3002 else if ( ins [ v ]) low [ u ] = min ( low [ u ], dfn [ v ]); // \u5df2\u7ecf\u5728\u6808\u4e2d\u4e86\uff0c\u7528 dfn[v] \u6765\u66f4\u65b0 low[u]\u3002 } if ( dfn [ u ] == low [ u ]){ ++ tot ; int x ; do { x = s . top (), s . pop (), ins [ x ] = false ; c [ x ] = tot , scc [ tot ]. pb ( x ); } while ( u != x ); } // \u51fa\u73b0\u4e86\u4e00\u4e2a SCC\u3002 } Edge edag [ si_m ]; int cnt_d = 0 ; void add_n ( int u , int v ){ edag [ ++ cnt_d ]. ver = v , edag [ cnt_d ]. Next = edag [ u ]. head ; edag [ u ]. head = cnt_d ; } void contract (){ for ( register int u = 1 ; u <= n ; ++ u ){ for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( c [ u ] == c [ v ]) continue ; add_n ( c [ u ], c [ v ]); } } // \u7f29\u70b9\u3002 } Tarjan \u7f29\u5b8c\u70b9\u4e4b\u540e\u7ed9 SCC \u6807\u8bb0\u7684\u987a\u5e8f\u662f\u9006\u62d3\u6251\u5e8f\u7684\u539f\u56e0\u975e\u5e38\u7b80\u5355\uff1b \u56e0\u4e3a Tarjan \u7684\u8bbf\u95ee\u987a\u5e8f\u662f\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u987a\u5e8f\uff08\u56e0\u4e3a\u4f7f\u7528\u4e86\u6808\uff09\u3002 \u90a3\u4e48\u4ece\u5c42\u7684\u89d2\u5ea6\u6765\u8bf4\uff0c\u66f4\u9760\u4e0a\u7684 SCC \u88ab\u6807\u8bb0\u5230\u7684\u65f6\u95f4\u5fc5\u7136\u66f4\u665a\uff0c\u800c Tarjan \u7f29\u5b8c\u70b9\u4e4b\u540e SCC \u6784\u6210\u7684\u56fe\u5fc5\u7136\u662f\u4e00\u4e2a DAG\uff0c\u90a3\u4e48 SCC \u7684\u6807\u8bb0\u987a\u5e8f\u5c31\u4e00\u5b9a\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u9006\u62d3\u6251\u5e8f\u3002\uff08\u53ef\u4ee5\u770b\u8fd9\u4e2a\u56fe\u7406\u89e3\u4e00\u4e0b\uff09\uff1a","title":"\u5f3a\u8fde\u901a\u5206\u91cf"},{"location":"algor/graph/connectivity/scc/#_1","text":"\u8054\u901a\u5206\u91cf\uff1a\u5bf9\u4e8e\u4e00\u4e2a \u6709\u5411\u56fe \u7684\u5206\u91cf\u5f53\u4e2d\u7684\u4efb\u610f\u4e24\u70b9 \\((u,v)\\) \uff0c \\(\\exists \\delta (u,v) \\land \\delta (v,u)\\) \uff0c\u5219\u79f0\u8fd9\u4e2a\u5206\u91cf\u4e3a\u8054\u901a\u5206\u91cf \u5f3a\u8054\u901a\u5206\u91cf SCC\uff1a\u6709\u5411\u56fe\u7684\u4e00\u4e2a\u6781\u5927\u8fde\u901a\u5206\u91cf\u88ab\u79f0\u4f5c\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u6781\u5927\u7684\u7406\u89e3\u5c31\u662f\uff0c\u4e0d\u7ba1\u518d\u52a0\u4e0a\u54ea\u4e00\u4e2a\u8fb9\u548c\u54ea\u4e00\u4e2a\u8282\u70b9\uff0c\u4ed6\u90fd\u4e0d\u518d\u662f\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\uff0c\u4e5f\u5c31\u662f\u201c\u5927\u7684\u4e0d\u80fd\u518d\u5927\u201d\u3002 \u6d41\u56fe\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u6709\u5411\u56fe \\(G=(V,E)\\) \uff0c \\(\\exists r \\in V\\) \uff0c\u6ee1\u8db3 \\(r\\) \u53ef\u4ee5\u5230\u8fbe \\(V\\) \u4e2d\u7684\u4efb\u610f\u8282\u70b9\uff0c\u5219\u79f0 \\(G\\) \u4e3a\u4e00\u4e2a\u6d41\u56fe\u3002 \\(r\\) \u79f0\u4f5c\u6d41\u56fe\u7684\u6e90\u70b9\u3002 \u641c\u7d22\u6811\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u6d41\u56fe \\(G\\) \u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u5f97\u5230\u7684\u4e00\u68f5\u751f\u6210\u6811 \\(T\\) \u3002 \u65f6\u95f4\u6233 \\(dfn\\) \uff1a\u5bf9\u4e8e \\(G\\) \u4e2d\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u5b83\u5728 \\(T\\) \u4e2d\u88ab\u641c\u7d22\u5230\u7684\u987a\u5e8f\uff08\u65f6\u95f4\uff09\u3002 \u4e3a\u4e86\u65b9\u4fbf\u53d9\u8ff0\uff0c\u8fd9\u91cc\u518d\u5b9a\u4e49\u56db\u79cd\u8fb9\uff0c\u6d41\u56fe \\(G\\) \u7684\u6240\u6709\u8fb9\u5fc5\u7136\u662f\u8fd9\u56db\u79cd\u8fb9\u4e4b\u4e00 \u6811\u8fb9\uff1a\u5728\u641c\u7d22\u6811\u91cc\u7684\u8fb9\uff0c\u4ece \\(u \\to v\\) \uff0c\u4e14 \\(u\\) \u662f \\(v\\) \u7684\u7236\u4eb2\u3002 \u524d\u5411\u8fb9\uff1a\u4ece \\(u \\to v\\) \uff0c\u4e14 \\(u\\) \u662f \\(v\\) \u5728 \\(T\\) \u4e0a\u7684\u7956\u5148\u3002 \u540e\u5411\u8fb9\uff1a\u4ece \\(u \\to v\\) \uff0c\u4e14 \\(v\\) \u662f \\(u\\) \u5728 \\(T\\) \u4e0a\u7684\u7956\u5148 \u6a2a\u53c9\u8fb9\uff1a\u9664\u4e86 123 \u7684\u6240\u6709\u8fb9\uff0c\u5fc5\u7136\u6ee1\u8db3 \\(u \\to v,dfn_v<dfn_u\\) \u3002","title":"\u4e00\u4e9b\u5b9a\u4e49"},{"location":"algor/graph/connectivity/scc/#tarjan","text":"\u8003\u8651\u641c\u7d22\u6811\u4e0a\u7684\u8282\u70b9\u5982\u4f55\u624d\u80fd\u6210\u4e3a SCC \u5f53\u4e2d\u7684\u8282\u70b9\u3002 \u9996\u5148\uff0c\u4e00\u4e2a\u5b64\u7acb\u7684\u70b9\uff08\u8fd9\u91cc\u6307\u8d70\u51fa\u53bb\u4e86\u5c31\u6ca1\u6cd5\u56de\u6765\uff09\u5fc5\u7136\u662f\u4e00\u4e2a SCC\u3002 \u5982\u679c\u60f3\u8981\u66f4\u591a\u70b9\u52a0\u5165\u8fd9\u4e2a SCC\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u8981\u627e\u5230\u4e00\u4e2a\u73af\u3002 \u90a3\u4e48\u540e\u5411\u8fb9\u5fc5\u7136\u662f\u6709\u7528\u7684\uff0c\u5047\u8bbe \\(v\\) \u662f \\(u\\) \u7684\u7956\u5148\uff0c\u90a3\u4e48\u5fc5\u7136\u5b58\u5728\u4e00\u4e2a\u8def\u5f84\u4ece \\(v \\to u\\) \u3002 \u800c\u8fd9\u91cc\u53c8\u5b58\u5728\u4e00\u6761\u540e\u5411\u8fb9 \\(u \\to v\\) \uff0c\u90a3\u4e48\u5fc5\u7136\u4f1a\u51fa\u73b0\u4e00\u4e2a\u73af\uff0c\u4e5f\u5c31\u51fa\u73b0\u4e86\u4e00\u4e2a\u8054\u901a\u5206\u91cf\u3002 \u800c\u6a2a\u53c9\u8fb9\u4e5f\u8bb8\u4f1a\u6709\u7528\uff0c\u53ea\u8981\u4ece \\(u\\) \u7ecf\u8fc7\u4e00\u4e2a\u6a2a\u53c9\u8fb9\u8d70\u5230 \\(v\\) \uff0c\u4e14 \\(v\\) \u53ef\u4ee5\u5230\u8fbe \\(u\\) \u7684\u7956\u5148\u8282\u70b9\uff0c\u90a3\u4e48\u4e5f\u4f1a\u51fa\u73b0\u4e00\u4e2a\u73af\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a\u8054\u901a\u5206\u91cf\u3002 \u90a3\u4e48\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u5728\u6d41\u56fe\u4e0a\u627e\u5230\u5c3d\u53ef\u80fd\u5927\u7684\uff0c\u7531 \\(T\\) \u7ecf\u8fc7\u6dfb\u52a0\u51e0\u6761\u540e\u5411\u8fb9\u548c\u6a2a\u53c9\u8fb9\u6784\u6210\u7684\u73af\u3002 \u6240\u4ee5\u5f15\u5165\u4e00\u4e2a\u65b0\u7684\u503c \\(low_u\\) \uff0c\u8868\u793a \\(u\\) \u548c\u5b83\u5b50\u6811\u5f53\u4e2d\u7684\u8282\u70b9\u80fd\u5f80\u4e0a\uff08\u5728 \\(T\\) \u5f53\u4e2d\u7684\u4e0a\uff09\u8d70\u5230\u7684\u6700\u9ad8\uff08\u5728 \\(T\\) \u5f53\u4e2d\u6df1\u5ea6\u66f4\u4f4e\uff09\u7684\u8282\u70b9\u7684\u65f6\u95f4\u6233 \\(dfn\\) \u3002 \u5982\u679c\u51fa\u73b0 \\(low_u=dfn_u\\) \uff0c\u4e5f\u5c31\u662f \\(u\\) \u4e0d\u53ef\u80fd\u518d\u5f80\u4e0a\u8d70\uff0c\u5b83\u7684 \\(low\\) \u5c31\u662f\u81ea\u5df1\u7684 \\(dfn\\) \u7684\u65f6\u5019\uff0c\u90a3\u4e48 \\(u\\) \u5fc5\u7136\u662f\u5b83\u6240\u5728\u7684\u5f3a\u8fde\u901a\u5206\u91cf\u5728 \\(T\\) \u4e0a\u6700\u9ad8\u7684\u70b9\u3002 \u7136\u540e\u5728\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u65f6\u5019\u540c\u65f6\u7ef4\u62a4\u4e00\u4e2a\u6808\uff0c\u4fdd\u5b58\u5f53\u524d\u80fd\u4e0e\u4ece\u8fd9\u4e2a\u8282\u70b9\u51fa\u53d1\u7684\u540e\u5411\u8fb9\u548c\u6a2a\u53c9\u8fb9\u6784\u6210\u73af\u7684\u6240\u6709\u8282\u70b9\u3002 \u8bb0 \\(anc(u)\\) \u8868\u793a \\(u\\) \u5728 \\(T\\) \u4e0a\u7684\u6240\u6709\u7956\u5148\u8282\u70b9\uff0c\u90a3\u4e48\u6808\u4e2d\u4fdd\u5b58\u7684\u5b9e\u9645\u4e0a\u5c31\u662f\u8fd9\u4e24\u7c7b\u8282\u70b9\uff1a \\(v \\in anc(u)\\) \uff0c\u4e14\u6709\u53ef\u80fd\u5b58\u5728\u540e\u5411\u8fb9 \\(u \\to v\\) \u3002 \\(v \\in V\\) \uff0c\u4e14\u5b58\u5728\u8def\u5f84 \\(\\delta(v\\to w),w\\in anc_u\\) \u3002 \u5728\u6ee1\u8db3 \\(low_u=dfn_u\\) \u7684\u65f6\u5019\uff0c\u628a\u6808\u7684\u8282\u70b9\u4e0d\u65ad\u5f39\u51fa\uff0c\u76f4\u5230 \\(u\\) \u51fa\u6808\uff0c\u6b64\u65f6\u5f53\u524d\u88ab\u5f39\u51fa\u7684\u6240\u6709\u8282\u70b9\u5c31\u6784\u6210\u4e00\u4e2a SCC\u3002 \u5f88\u660e\u663e \\(anc(u)\\) \u4e2d\u7684\u6240\u6709\u8282\u70b9\u90fd\u5148\u4e8e \\(u\\) \u5165\u6808\u3002 \u6240\u4ee5\u5728 \\(u\\) \u5f39\u51fa\u524d\u5f39\u51fa\u7684\u4e00\u5b9a\u662f\u7b2c\u4e8c\u7c7b\u8282\u70b9\u3002 \u5177\u4f53\u5b9e\u73b0\uff1a \u6bcf\u6b21\u65b0\u8bbf\u95ee\u4e00\u4e2a\u8282\u70b9\u7684\u65f6\u5019\u521d\u59cb\u5316 \\(dfn=time + 1,low=dfn\\) \u3002 \u7136\u540e\u8bbf\u95ee\u5b83\u7684\u6240\u6709\u51fa\u8fb9 \\((u,v)\\) \uff0c\u5982\u679c\u51fa\u8fb9\u5bf9\u5e94\u7684\u8282\u70b9 \\(v\\) \u6ca1\u6709\u8bbf\u95ee\u8fc7\uff08\u5f53\u524d\u8bbf\u95ee\u7684\u662f\u6811\u8fb9\uff09\uff0c\u90a3\u4e48\u5c31\u9012\u5f52\u7136\u540e\u7528 \\(low_v\\) \u66f4\u65b0 \\(low_u\\) \u3002 \u53cd\u4e4b\uff0c\u5982\u679c \\(v\\) \u5df2\u7ecf\u5728\u6808\u4e2d\u4e86\uff0c\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b58\u5728\u4e00\u6761\u540e\u5411\u8fb9\u6216\u8005\u6a2a\u53c9\u8fb9\u4ece \\(u\\) \u51fa\u53d1\u80fd\u5230\u66f4\u4e0a\u9762\u3002 \u6839\u636e\u6808\u4e2d\u8282\u70b9\u7684\u6027\u8d28\uff0c\u7528 \\(dfn_v\\) \u66f4\u65b0 \\(low_u\\) \u5373\u53ef\u3002 \u6ce8\u610f\u8fd9\u91cc\u8981\u662f \\(dfn_v\\) \u800c\u4e0d\u662f \\(low_v\\) \uff0cTarjan \u8001\u7237\u5b50\u4eb2\u81ea\u8bf4\u8fc7\u3002 \uff08TODO\uff1a\u81ea\u5df1\u5c1d\u8bd5\u8bc1\u660e\u4e00\u4e0b\u8fd9\u513f\u662f\u4e3a\u5565\uff09 \u5982\u679c\u628a\u6bcf\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u770b\u4f5c\u4e00\u4e2a\u70b9\u3002 \u90a3\u4e48\u7f29\u5b8c\u70b9\u4e4b\u540e\u7684\u56fe\u5c31\u662f\u4e00\u4e2a DAG\u3002 \u5e76\u4e14 SCC \u7f16\u53f7\u7684\u987a\u5e8f\u5c31\u662f \u9006\u62d3\u6251\u5e8f \u3002 \u7f29\u70b9\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u80fd\u975e\u5e38\u65b9\u4fbf\u5730\u8fdb\u884c DP\uff0c\u56e0\u4e3a\u6b63\u5e38 DP \u7684\u987a\u5e8f\u672c\u6765\u5c31\u662f\u62d3\u6251\u5e8f\u3002 \u4e00\u822c\u90fd\u662f\u76f4\u63a5\u9012\u63a8\u6c42\u89e3\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 std :: stack < int > s ; bool ins [ si_n ]; // in the stack or not int c [ si_n ]; //c[x] = the num of SCC which is x iside std :: vector < int > scc [ si_n ]; // scc[i] -> all node in i-th scc (information of i-th scc) // \u5982\u679c\u6ca1\u6709\u5fc5\u8981\u7684\u8bdd\u53ef\u4ee5\u4e0d\u8981 vector int dfn [ si_n ], low [ si_n ]; int n , m , cnt_t = 0 , tot = 0 ; // tot = how many scc in the graph. void tarjan ( int u ){ dfn [ u ] = low [ u ] =++ cnt_t ; s . push ( u ), ins [ u ] = true ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( ! dfn [ v ]){ tarjan ( v ); low [ u ] = min ( low [ u ], low [ v ]); } // \u6ca1\u6709\u8bbf\u95ee\u8fc7\uff0c\u9012\u5f52\u641c\u7d22\u7136\u540e\u66f4\u65b0 low\u3002 else if ( ins [ v ]) low [ u ] = min ( low [ u ], dfn [ v ]); // \u5df2\u7ecf\u5728\u6808\u4e2d\u4e86\uff0c\u7528 dfn[v] \u6765\u66f4\u65b0 low[u]\u3002 } if ( dfn [ u ] == low [ u ]){ ++ tot ; int x ; do { x = s . top (), s . pop (), ins [ x ] = false ; c [ x ] = tot , scc [ tot ]. pb ( x ); } while ( u != x ); } // \u51fa\u73b0\u4e86\u4e00\u4e2a SCC\u3002 } Edge edag [ si_m ]; int cnt_d = 0 ; void add_n ( int u , int v ){ edag [ ++ cnt_d ]. ver = v , edag [ cnt_d ]. Next = edag [ u ]. head ; edag [ u ]. head = cnt_d ; } void contract (){ for ( register int u = 1 ; u <= n ; ++ u ){ for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( c [ u ] == c [ v ]) continue ; add_n ( c [ u ], c [ v ]); } } // \u7f29\u70b9\u3002 } Tarjan \u7f29\u5b8c\u70b9\u4e4b\u540e\u7ed9 SCC \u6807\u8bb0\u7684\u987a\u5e8f\u662f\u9006\u62d3\u6251\u5e8f\u7684\u539f\u56e0\u975e\u5e38\u7b80\u5355\uff1b \u56e0\u4e3a Tarjan \u7684\u8bbf\u95ee\u987a\u5e8f\u662f\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u987a\u5e8f\uff08\u56e0\u4e3a\u4f7f\u7528\u4e86\u6808\uff09\u3002 \u90a3\u4e48\u4ece\u5c42\u7684\u89d2\u5ea6\u6765\u8bf4\uff0c\u66f4\u9760\u4e0a\u7684 SCC \u88ab\u6807\u8bb0\u5230\u7684\u65f6\u95f4\u5fc5\u7136\u66f4\u665a\uff0c\u800c Tarjan \u7f29\u5b8c\u70b9\u4e4b\u540e SCC \u6784\u6210\u7684\u56fe\u5fc5\u7136\u662f\u4e00\u4e2a DAG\uff0c\u90a3\u4e48 SCC \u7684\u6807\u8bb0\u987a\u5e8f\u5c31\u4e00\u5b9a\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u9006\u62d3\u6251\u5e8f\u3002\uff08\u53ef\u4ee5\u770b\u8fd9\u4e2a\u56fe\u7406\u89e3\u4e00\u4e0b\uff09\uff1a","title":"Tarjan \u7b97\u6cd5"},{"location":"algor/math/probability/","text":"\u8fd9\u90e8\u5206\u5c31\u76f4\u63a5\u770b\u6211\u7ed9\u5b66\u5f1f\u7684\u8bb2\u7a3f\u5427\u3002 \u7b49\u6211\u5f04\u660e\u767d\u4e86\u548b\u5185\u5d4c pdf \u663e\u793a\u5668\u518d\u79fb\u8fc7\u6765\u3002 link","title":"\u6982\u7387\u548c\u671f\u671b"},{"location":"algor/math/combinatorics/catalan/","text":"\u8f6c\u8f7d\u81ea OI-Wiki Catalan \u6570\u5217 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4ee5\u4e0b\u95ee\u9898\u5c5e\u4e8e Catalan \u6570\u5217\uff1a \u6709 \\(2n\\) \u4e2a\u4eba\u6392\u6210\u4e00\u884c\u8fdb\u5165\u5267\u573a\u3002\u5165\u573a\u8d39 5 \u5143\u3002\u5176\u4e2d\u53ea\u6709 \\(n\\) \u4e2a\u4eba\u6709\u4e00\u5f20 5 \u5143\u949e\u7968\uff0c\u53e6\u5916 \\(n\\) \u4eba\u53ea\u6709 10 \u5143\u949e\u7968\uff0c\u5267\u9662\u65e0\u5176\u5b83\u949e\u7968\uff0c\u95ee\u6709\u591a\u5c11\u79cd\u65b9\u6cd5\u4f7f\u5f97\u53ea\u8981\u6709 10 \u5143\u7684\u4eba\u4e70\u7968\uff0c\u552e\u7968\u5904\u5c31\u6709 5 \u5143\u7684\u949e\u7968\u627e\u96f6\uff1f \u4e00\u4f4d\u5927\u57ce\u5e02\u7684\u5f8b\u5e08\u5728\u5979\u4f4f\u6240\u4ee5\u5317 \\(n\\) \u4e2a\u8857\u533a\u548c\u4ee5\u4e1c \\(n\\) \u4e2a\u8857\u533a\u5904\u5de5\u4f5c\u3002\u6bcf\u5929\u5979\u8d70 \\(2n\\) \u4e2a\u8857\u533a\u53bb\u4e0a\u73ed\u3002\u5982\u679c\u4ed6\u4ece\u4e0d\u7a7f\u8d8a\uff08\u4f46\u53ef\u4ee5\u78b0\u5230\uff09\u4ece\u5bb6\u5230\u529e\u516c\u5ba4\u7684\u5bf9\u89d2\u7ebf\uff0c\u90a3\u4e48\u6709\u591a\u5c11\u6761\u53ef\u80fd\u7684\u9053\u8def\uff1f \u5728\u5706\u4e0a\u9009\u62e9 \\(2n\\) \u4e2a\u70b9\uff0c\u5c06\u8fd9\u4e9b\u70b9\u6210\u5bf9\u8fde\u63a5\u8d77\u6765\u4f7f\u5f97\u6240\u5f97\u5230\u7684 \\(n\\) \u6761\u7ebf\u6bb5\u4e0d\u76f8\u4ea4\u7684\u65b9\u6cd5\u6570\uff1f \u5bf9\u89d2\u7ebf\u4e0d\u76f8\u4ea4\u7684\u60c5\u51b5\u4e0b\uff0c\u5c06\u4e00\u4e2a\u51f8\u591a\u8fb9\u5f62\u533a\u57df\u5206\u6210\u4e09\u89d2\u5f62\u533a\u57df\u7684\u65b9\u6cd5\u6570\uff1f \u4e00\u4e2a\u6808\uff08\u65e0\u7a77\u5927\uff09\u7684\u8fdb\u6808\u5e8f\u5217\u4e3a \\(1,2,3, \\cdots ,n\\) \u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u51fa\u6808\u5e8f\u5217\uff1f \\(n\\) \u4e2a\u7ed3\u70b9\u53ef\u6784\u9020\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u4e8c\u53c9\u6811\uff1f \\(n\\) \u4e2a \\(+1\\) \u548c \\(n\\) \u4e2a \\(-1\\) \u6784\u6210 \\(2n\\) \u9879 \\(a_1,a_2, \\cdots ,a_{2n}\\) \uff0c\u5176\u90e8\u5206\u548c\u6ee1\u8db3 \\(a_1+a_2+ \\cdots +a_k \\geq 0(k=1,2,3, \\cdots ,2n)\\) \u5bf9\u4e0e \\(n\\) \u8be5\u6570\u5217\u4e3a\uff1f \u5176\u5bf9\u5e94\u7684\u5e8f\u5217\u4e3a\uff1a \\(H_0\\) \\(H_1\\) \\(H_2\\) \\(H_3\\) \\(H_4\\) \\(H_5\\) \\(H_6\\) ... 1 1 2 5 14 42 132 ... (Catalan \u6570\u5217\uff09 \u9012\u63a8\u5f0f \u03c8(\uff40\u2207\u00b4)\u03c8 \u8be5\u9012\u63a8\u5173\u7cfb\u7684\u89e3\u4e3a\uff1a \\[ H_n = \\frac{\\binom{2n}{n}}{n+1}(n \\geq 2, n \\in \\mathbf{N_{+}}) \\] \u5173\u4e8e Catalan \u6570\u7684\u5e38\u89c1\u516c\u5f0f\uff1a \\[ H_n = \\begin{cases} \\sum_{i=1}^{n} H_{i-1} H_{n-i} & n \\geq 2, n \\in \\mathbf{N_{+}}\\\\ 1 & n = 0, 1 \\end{cases} \\] \\[ H_n = \\frac{H_{n-1} (4n-2)}{n+1} \\] \\[ H_n = \\binom{2n}{n} - \\binom{2n}{n-1} \\] \u4f8b\u9898 \u6d1b\u8c37 P1044 \u6808 \u9898\u76ee\u5927\u610f\uff1a\u5165\u6808\u987a\u5e8f\u4e3a \\(1,2,\\ldots ,n\\) \uff0c\u6c42\u6240\u6709\u53ef\u80fd\u7684\u51fa\u6808\u987a\u5e8f\u7684\u603b\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // C++ Version #include <iostream> using namespace std ; int n ; long long f [ 25 ]; int main () { f [ 0 ] = 1 ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) f [ i ] = f [ i - 1 ] * ( 4 * i - 2 ) / ( i + 1 ); // \u8fd9\u91cc\u7528\u7684\u662f\u5e38\u89c1\u516c\u5f0f2 cout << f [ n ] << endl ; return 0 ; } 1 2 3 4 5 6 7 8 # Python Version f = [ 0 ] * 25 f [ 0 ] = 1 n = int ( input ()) for i in range ( 1 , n + 1 ): f [ i ] = int ( f [ i - 1 ] * ( 4 * i - 2 ) // ( i + 1 )) # \u8fd9\u91cc\u7528\u7684\u662f\u5e38\u89c1\u516c\u5f0f2 print ( f [ n ]) \u8def\u5f84\u8ba1\u6570\u95ee\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 \u975e\u964d\u8def\u5f84\u662f\u6307\u53ea\u80fd\u5411\u4e0a\u6216\u5411\u53f3\u8d70\u7684\u8def\u5f84\u3002 \u4ece \\((0,0)\\) \u5230 \\((m,n)\\) \u7684\u975e\u964d\u8def\u5f84\u6570\u7b49\u4e8e \\(m\\) \u4e2a \\(x\\) \u548c \\(n\\) \u4e2a \\(y\\) \u7684\u6392\u5217\u6570\uff0c\u5373 \\(\\dbinom{n + m}{m}\\) \u3002 \u4ece \\((0,0)\\) \u5230 \\((n,n)\\) \u7684\u9664\u7aef\u70b9\u5916\u4e0d\u63a5\u89e6\u76f4\u7ebf \\(y=x\\) \u7684\u975e\u964d\u8def\u5f84\u6570\uff1a \u5148\u8003\u8651 \\(y=x\\) \u4e0b\u65b9\u7684\u8def\u5f84\uff0c\u90fd\u662f\u4ece \\((0, 0)\\) \u51fa\u53d1\uff0c\u7ecf\u8fc7 \\((1, 0)\\) \u53ca \\((n, n-1)\\) \u5230 \\((n,n)\\) \uff0c\u53ef\u4ee5\u770b\u505a\u662f \\((1,0)\\) \u5230 \\((n,n-1)\\) \u4e0d\u63a5\u89e6 \\(y=x\\) \u7684\u975e\u964d\u8def\u5f84\u6570\u3002 \u6240\u6709\u7684\u7684\u975e\u964d\u8def\u5f84\u6709 \\(\\dbinom{2n-2}{n-1}\\) \u6761\u3002\u5bf9\u4e8e\u8fd9\u91cc\u9762\u4efb\u610f\u4e00\u6761\u63a5\u89e6\u4e86 \\(y=x\\) \u7684\u8def\u5f84\uff0c\u53ef\u4ee5\u628a\u5b83\u6700\u540e\u79bb\u5f00\u8fd9\u6761\u7ebf\u7684\u70b9\u5230 \\((1,0)\\) \u4e4b\u95f4\u7684\u90e8\u5206\u5173\u4e8e \\(y=x\\) \u5bf9\u79f0\u53d8\u6362\uff0c\u5c31\u5f97\u5230\u4ece \\((0,1)\\) \u5230 \\((n,n-1)\\) \u7684\u4e00\u6761\u975e\u964d\u8def\u5f84\u3002\u53cd\u4e4b\u4e5f\u6210\u7acb\u3002\u4ece\u800c \\(y=x\\) \u4e0b\u65b9\u7684\u975e\u964d\u8def\u5f84\u6570\u662f \\(\\dbinom{2n-2}{n-1} - \\dbinom{2n-2}{n}\\) \u3002\u6839\u636e\u5bf9\u79f0\u6027\u53ef\u77e5\u6240\u6c42\u7b54\u6848\u4e3a \\(2\\dbinom{2n-2}{n-1} - 2\\dbinom{2n-2}{n}\\) \u3002 \u4ece \\((0,0)\\) \u5230 \\((n,n)\\) \u7684\u9664\u7aef\u70b9\u5916\u4e0d\u7a7f\u8fc7\u76f4\u7ebf \\(y=x\\) \u7684\u975e\u964d\u8def\u5f84\u6570\uff1a \u7528\u7c7b\u4f3c\u7684\u65b9\u6cd5\u53ef\u4ee5\u5f97\u5230\uff1a \\(\\dfrac{2}{n+1}\\dbinom{2n}{n}\\)","title":"\u5361\u7279\u5170\u6570"},{"location":"algor/math/combinatorics/catalan/#catalan","text":"\u4ee5\u4e0b\u95ee\u9898\u5c5e\u4e8e Catalan \u6570\u5217\uff1a \u6709 \\(2n\\) \u4e2a\u4eba\u6392\u6210\u4e00\u884c\u8fdb\u5165\u5267\u573a\u3002\u5165\u573a\u8d39 5 \u5143\u3002\u5176\u4e2d\u53ea\u6709 \\(n\\) \u4e2a\u4eba\u6709\u4e00\u5f20 5 \u5143\u949e\u7968\uff0c\u53e6\u5916 \\(n\\) \u4eba\u53ea\u6709 10 \u5143\u949e\u7968\uff0c\u5267\u9662\u65e0\u5176\u5b83\u949e\u7968\uff0c\u95ee\u6709\u591a\u5c11\u79cd\u65b9\u6cd5\u4f7f\u5f97\u53ea\u8981\u6709 10 \u5143\u7684\u4eba\u4e70\u7968\uff0c\u552e\u7968\u5904\u5c31\u6709 5 \u5143\u7684\u949e\u7968\u627e\u96f6\uff1f \u4e00\u4f4d\u5927\u57ce\u5e02\u7684\u5f8b\u5e08\u5728\u5979\u4f4f\u6240\u4ee5\u5317 \\(n\\) \u4e2a\u8857\u533a\u548c\u4ee5\u4e1c \\(n\\) \u4e2a\u8857\u533a\u5904\u5de5\u4f5c\u3002\u6bcf\u5929\u5979\u8d70 \\(2n\\) \u4e2a\u8857\u533a\u53bb\u4e0a\u73ed\u3002\u5982\u679c\u4ed6\u4ece\u4e0d\u7a7f\u8d8a\uff08\u4f46\u53ef\u4ee5\u78b0\u5230\uff09\u4ece\u5bb6\u5230\u529e\u516c\u5ba4\u7684\u5bf9\u89d2\u7ebf\uff0c\u90a3\u4e48\u6709\u591a\u5c11\u6761\u53ef\u80fd\u7684\u9053\u8def\uff1f \u5728\u5706\u4e0a\u9009\u62e9 \\(2n\\) \u4e2a\u70b9\uff0c\u5c06\u8fd9\u4e9b\u70b9\u6210\u5bf9\u8fde\u63a5\u8d77\u6765\u4f7f\u5f97\u6240\u5f97\u5230\u7684 \\(n\\) \u6761\u7ebf\u6bb5\u4e0d\u76f8\u4ea4\u7684\u65b9\u6cd5\u6570\uff1f \u5bf9\u89d2\u7ebf\u4e0d\u76f8\u4ea4\u7684\u60c5\u51b5\u4e0b\uff0c\u5c06\u4e00\u4e2a\u51f8\u591a\u8fb9\u5f62\u533a\u57df\u5206\u6210\u4e09\u89d2\u5f62\u533a\u57df\u7684\u65b9\u6cd5\u6570\uff1f \u4e00\u4e2a\u6808\uff08\u65e0\u7a77\u5927\uff09\u7684\u8fdb\u6808\u5e8f\u5217\u4e3a \\(1,2,3, \\cdots ,n\\) \u6709\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u51fa\u6808\u5e8f\u5217\uff1f \\(n\\) \u4e2a\u7ed3\u70b9\u53ef\u6784\u9020\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u4e8c\u53c9\u6811\uff1f \\(n\\) \u4e2a \\(+1\\) \u548c \\(n\\) \u4e2a \\(-1\\) \u6784\u6210 \\(2n\\) \u9879 \\(a_1,a_2, \\cdots ,a_{2n}\\) \uff0c\u5176\u90e8\u5206\u548c\u6ee1\u8db3 \\(a_1+a_2+ \\cdots +a_k \\geq 0(k=1,2,3, \\cdots ,2n)\\) \u5bf9\u4e0e \\(n\\) \u8be5\u6570\u5217\u4e3a\uff1f \u5176\u5bf9\u5e94\u7684\u5e8f\u5217\u4e3a\uff1a \\(H_0\\) \\(H_1\\) \\(H_2\\) \\(H_3\\) \\(H_4\\) \\(H_5\\) \\(H_6\\) ... 1 1 2 5 14 42 132 ... (Catalan \u6570\u5217\uff09","title":"Catalan \u6570\u5217"},{"location":"algor/math/combinatorics/catalan/#_1","text":"\u8be5\u9012\u63a8\u5173\u7cfb\u7684\u89e3\u4e3a\uff1a \\[ H_n = \\frac{\\binom{2n}{n}}{n+1}(n \\geq 2, n \\in \\mathbf{N_{+}}) \\] \u5173\u4e8e Catalan \u6570\u7684\u5e38\u89c1\u516c\u5f0f\uff1a \\[ H_n = \\begin{cases} \\sum_{i=1}^{n} H_{i-1} H_{n-i} & n \\geq 2, n \\in \\mathbf{N_{+}}\\\\ 1 & n = 0, 1 \\end{cases} \\] \\[ H_n = \\frac{H_{n-1} (4n-2)}{n+1} \\] \\[ H_n = \\binom{2n}{n} - \\binom{2n}{n-1} \\] \u4f8b\u9898 \u6d1b\u8c37 P1044 \u6808 \u9898\u76ee\u5927\u610f\uff1a\u5165\u6808\u987a\u5e8f\u4e3a \\(1,2,\\ldots ,n\\) \uff0c\u6c42\u6240\u6709\u53ef\u80fd\u7684\u51fa\u6808\u987a\u5e8f\u7684\u603b\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // C++ Version #include <iostream> using namespace std ; int n ; long long f [ 25 ]; int main () { f [ 0 ] = 1 ; cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) f [ i ] = f [ i - 1 ] * ( 4 * i - 2 ) / ( i + 1 ); // \u8fd9\u91cc\u7528\u7684\u662f\u5e38\u89c1\u516c\u5f0f2 cout << f [ n ] << endl ; return 0 ; } 1 2 3 4 5 6 7 8 # Python Version f = [ 0 ] * 25 f [ 0 ] = 1 n = int ( input ()) for i in range ( 1 , n + 1 ): f [ i ] = int ( f [ i - 1 ] * ( 4 * i - 2 ) // ( i + 1 )) # \u8fd9\u91cc\u7528\u7684\u662f\u5e38\u89c1\u516c\u5f0f2 print ( f [ n ])","title":"\u9012\u63a8\u5f0f"},{"location":"algor/math/combinatorics/catalan/#_2","text":"\u975e\u964d\u8def\u5f84\u662f\u6307\u53ea\u80fd\u5411\u4e0a\u6216\u5411\u53f3\u8d70\u7684\u8def\u5f84\u3002 \u4ece \\((0,0)\\) \u5230 \\((m,n)\\) \u7684\u975e\u964d\u8def\u5f84\u6570\u7b49\u4e8e \\(m\\) \u4e2a \\(x\\) \u548c \\(n\\) \u4e2a \\(y\\) \u7684\u6392\u5217\u6570\uff0c\u5373 \\(\\dbinom{n + m}{m}\\) \u3002 \u4ece \\((0,0)\\) \u5230 \\((n,n)\\) \u7684\u9664\u7aef\u70b9\u5916\u4e0d\u63a5\u89e6\u76f4\u7ebf \\(y=x\\) \u7684\u975e\u964d\u8def\u5f84\u6570\uff1a \u5148\u8003\u8651 \\(y=x\\) \u4e0b\u65b9\u7684\u8def\u5f84\uff0c\u90fd\u662f\u4ece \\((0, 0)\\) \u51fa\u53d1\uff0c\u7ecf\u8fc7 \\((1, 0)\\) \u53ca \\((n, n-1)\\) \u5230 \\((n,n)\\) \uff0c\u53ef\u4ee5\u770b\u505a\u662f \\((1,0)\\) \u5230 \\((n,n-1)\\) \u4e0d\u63a5\u89e6 \\(y=x\\) \u7684\u975e\u964d\u8def\u5f84\u6570\u3002 \u6240\u6709\u7684\u7684\u975e\u964d\u8def\u5f84\u6709 \\(\\dbinom{2n-2}{n-1}\\) \u6761\u3002\u5bf9\u4e8e\u8fd9\u91cc\u9762\u4efb\u610f\u4e00\u6761\u63a5\u89e6\u4e86 \\(y=x\\) \u7684\u8def\u5f84\uff0c\u53ef\u4ee5\u628a\u5b83\u6700\u540e\u79bb\u5f00\u8fd9\u6761\u7ebf\u7684\u70b9\u5230 \\((1,0)\\) \u4e4b\u95f4\u7684\u90e8\u5206\u5173\u4e8e \\(y=x\\) \u5bf9\u79f0\u53d8\u6362\uff0c\u5c31\u5f97\u5230\u4ece \\((0,1)\\) \u5230 \\((n,n-1)\\) \u7684\u4e00\u6761\u975e\u964d\u8def\u5f84\u3002\u53cd\u4e4b\u4e5f\u6210\u7acb\u3002\u4ece\u800c \\(y=x\\) \u4e0b\u65b9\u7684\u975e\u964d\u8def\u5f84\u6570\u662f \\(\\dbinom{2n-2}{n-1} - \\dbinom{2n-2}{n}\\) \u3002\u6839\u636e\u5bf9\u79f0\u6027\u53ef\u77e5\u6240\u6c42\u7b54\u6848\u4e3a \\(2\\dbinom{2n-2}{n-1} - 2\\dbinom{2n-2}{n}\\) \u3002 \u4ece \\((0,0)\\) \u5230 \\((n,n)\\) \u7684\u9664\u7aef\u70b9\u5916\u4e0d\u7a7f\u8fc7\u76f4\u7ebf \\(y=x\\) \u7684\u975e\u964d\u8def\u5f84\u6570\uff1a \u7528\u7c7b\u4f3c\u7684\u65b9\u6cd5\u53ef\u4ee5\u5f97\u5230\uff1a \\(\\dfrac{2}{n+1}\\dbinom{2n}{n}\\)","title":"\u8def\u5f84\u8ba1\u6570\u95ee\u9898"},{"location":"algor/math/combinatorics/combination/","text":"\u6392\u5217\u7ec4\u5408\u57fa\u7840 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8ba1\u6570\u539f\u7406 \u03c8(\uff40\u2207\u00b4)\u03c8 \u52a0\u6cd5\u539f\u7406: \u5982\u679c\u5b8c\u6210\u4e00\u4e2a\u4e8b\u60c5\u6709 \\(n\\) \u7c7b\u65b9\u6cd5\uff0c\u5176\u4e2d\u7b2c \\(i\\) \u7c7b\u65b9\u6cd5\u6709 \\(a_i\\) \u79cd\u7b56\u7565\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u65b9\u6cd5\u662f\u72ec\u7acb\u7684\uff0c\u6240\u4ee5\u603b\u5171\u7684\u65b9\u6848\u6570\u4e3a \\(\\sum a_i\\) \u79cd\u3002 \u52a0\u6cd5\u539f\u7406\uff1a\u5982\u679c\u5b8c\u6210\u4e00\u4e2a\u4e8b\u60c5\u6709 \\(n\\) \u4e2a\u6b65\u9aa4\uff0c\u5176\u4e2d\u7b2c \\(i\\) \u4e2a\u6b65\u9aa4\u6709 \\(a_i\\) \u79cd\u7b56\u7565\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u65b9\u6cd5\u662f\u524d\u540e\u5173\u8054\u7684\uff0c\u6240\u4ee5\u603b\u5171\u7684\u65b9\u6848\u6570\u4e3a \\(\\prod a_i\\) \u79cd\u3002 \u6392\u5217\u6570\u548c\u7ec4\u5408\u6570 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6392\u5217\u6570 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5b9a\u4e49\u4ece \\(n\\) \u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u9009 \\(m\\) \u4e2a\u5143\u7d20\u51fa\u6765\uff08 \\(m \\le n\\) \uff09\uff0c\u8fdb\u884c\u6392\u5217\uff08\u6709\u5e8f\uff09\uff0c\u6240\u80fd\u5f97\u5230\u7684\u603b\u6392\u5217\u6570\u4e3a \\(\\text A_n^m\\) \u3002 \u6bd4\u5982 \\(1, 2, 3\\) \uff0c\u4efb\u610f\u62ff\u4e24\u4e2a\u51fa\u6765\u6392\u5217\u5c31\u6709 \\([1, 2]; [1,3]; [2, 1]; [2, 3]; [3,1]; [3,2]\\) \u8fd9\u516d\u79cd\uff0c\u5373 \\(\\text A_3^2 = 6\\) \u8ba1\u7b97\u53ef\u4ee5\u8003\u8651\u628a\u95ee\u9898\u8f6c\u5316\u6210\u6709 \\(n\\) \u4e2a\u4eba\uff0c\u6392\u957f\u5ea6\u4e3a \\(m\\) \u7684\u4e00\u4e2a\u961f\uff0c\u7b2c \\(1\\) \u4e2a\u4f4d\u7f6e\u6709 \\(n\\) \u79cd\u9009\u6cd5\uff0c\u7b2c \\(2\\) \u4e2a\u4f4d\u7f6e\u6709 \\(n - 1\\) \u79cd\u9009\u6cd5\uff0c\u7b2c \\(m\\) \u4e2a\u4f4d\u7f6e\u6709 \\(n - m + 1\\) \u79cd\u9009\u6cd5\uff0c\u6839\u636e\u4e58\u6cd5\u539f\u7406\u53ef\u4ee5\u5f97\u5230\u6392\u5217\u6570\u7684\u8ba1\u7b97\u516c\u5f0f\uff1a \\[ \\text{A}_n^m = \\prod\\limits_{i = 1}^{m}(n - i + 1) = \\dfrac{n!}{(n - m)!} \\] \u5176\u4e2d\u5168\u6392\u5217\u4e3a \\(\\text A_n^n = n!\\) \u3002 \u7ec4\u5408\u6570 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5b9a\u4e49\u4ece \\(n\\) \u4e2a\u4e0d\u540c\u5143\u7d20\u79cd\u62ff \\(m\\) \u4e2a\u5143\u7d20\u51fa\u6765 \\((m \\le n)\\) \uff0c\u8fdb\u884c\u7ec4\u5408\uff08\u65e0\u5e8f\uff09\uff0c\u6240\u80fd\u5f97\u5230\u7684\u603b\u6392\u5217\u6570\u4e3a \\(\\text C_n^m\\) \uff0c\u4e5f\u8bb0\u4f5c \\(\\dbinom{n}{m}\\) \u3002 \u6bd4\u5982 \\(1,2,3\\) \uff0c\u4efb\u610f\u62ff\u4e24\u4e2a\u51fa\u6765\u7ec4\u5408\u5c31\u6709 \\(\\{1,2\\}; \\{2, 3\\}; \\{1, 3\\}\\) \u8fd9\u4e09\u79cd\uff0c\u5373 \\(\\dbinom{3}{2} = 3\\) \u3002 \u8ba1\u7b97\u53ef\u4ee5\u4ece\u6392\u5217\u6570\u90a3\u91cc\u8f6c\u5316\uff0c\u5047\u8bbe\u6211\u4eec\u62ff\u4e86 \\(m\\) \u4e2a\u4eba\u51fa\u6765\u6392\u5217\uff0c\u663e\u7136\u8fd9 \\(m\\) \u4e2a\u4eba\u7684 \\(m!\\) \u79cd\u6392\u5217\u90fd\u4f1a\u88ab\u8ba1\u7b97\uff0c\u5728\u7ec4\u5408\u91cc\u9762\u4f1a\u88ab\u7b97\u4f5c\u4e00\u4e2a\uff0c\u6240\u4ee5\u5728\u6392\u5217\u6570\u7684\u57fa\u7840\u4e0a\u9664\u6389 \\(m!\\) \u5373\u53ef\u3002 \\[ \\dbinom{n}{m} = \\dfrac{n!}{m!(n-m)!} \\] \u5176\u4e2d\u8fb9\u754c\u4e3a\uff1a \\(\\dbinom{n}{0} = 1\\) \u3002 \u4e8c\u9879\u5f0f\u5b9a\u7406 \u03c8(\uff40\u2207\u00b4)\u03c8 \\[ (a + b)^n = \\sum\\limits_{i = 0}^{n}\\dbinom{n}{i}a^{n - i}b^{i} \\] \u5176\u4e2d \\(\\displaystyle \\dbinom{n}{i} a^{n - i}b^i\\) \u53eb\u505a \\((a + b)^n\\) \u5c55\u5f00\u5f0f\u7684\u7b2c \\(i + 1\\) \u9879 \\(T_{i + 1}\\) \uff0c\u6ce8\u610f \\((a + b)^n, (b + a)^n\\) \u7684\u5c55\u5f00\u5f0f\u7684\u7b2c \\(i\\) \u9879\u662f\u4e0d\u4e00\u6837\u7684\u3002 \\((a - b)^n\\) \u7684\u5c55\u5f00\u5f0f\u901a\u9879\u591a\u4e86\u4e00\u4e2a\u5bb9\u65a5\u7cfb\u6570\u4e00\u6837\u7684\u4e1c\u897f \uff1a \\(\\displaystyle T_{i + 1} = (-1)^i \\dbinom{n}{i} a^{n - i}b^i\\) \u3002 \u4e8c\u9879\u5f0f\u5b9a\u7406\u4e5f\u53ef\u4ee5\u6269\u5c55\u4e3a\u591a\u9879\u5f0f\u7684\u5f62\u5f0f\uff0c\u5728\u6b64\u4e0d\u5c55\u5f00\u3002 \u6240\u4ee5\uff0c \\(\\dbinom{n}{m}\\) \u4e5f\u88ab\u53eb\u505a\u4e8c\u9879\u5f0f\u7cfb\u6570\u3002 \u7ec4\u5408\u6570\u6027\u8d28 \u03c8(\uff40\u2207\u00b4)\u03c8 I. \\[ \\dbinom{n}{m}=\\dbinom{n}{n-m} \\] \u8fd9\u4e2a\u662f\u663e\u7136\u7684\uff0c\u56e0\u4e3a\u4f60\u9009 \\(m\\) \u4e2a\u548c\u9009 \\(n - m\\) \u4e2a\u7684\u60c5\u51b5\u662f\u6346\u7ed1\u8d77\u6765\u7684\u3002 II. \\[ \\dbinom{n}{k} = \\dfrac{n}{k} \\dbinom{n-1}{k-1} \\] \u8fd9\u4e2a\u4e5f\u662f\u663e\u7136\u7684\uff0c\u6839\u636e\u5b9a\u4e49\u5c55\u5f00\u5c31\u53ef\u4ee5\u5f97\u5230\u3002 \u4e5f\u53ef\u4ee5\u5199\u4f5c \\[ k\\dbinom{n}{k} = n\\dbinom{n - 1}{k - 1} \\] III. \\[ \\dbinom{n}{m}=\\dbinom{n-1}{m}+\\dbinom{n-1}{m-1} \\] \u8fd9\u4e2a\u5c31\u662f\u7ec4\u5408\u6570\u7684\u9012\u63a8\u5f0f\uff0c\u4e5f\u53ef\u4ee5\u770b\u4f5c\u662f\u6768\u8f89\u4e09\u89d2\u3002 IV. \\[ \\dbinom{n}{0}+\\dbinom{n}{1}+\\cdots+\\dbinom{n}{n}=\\sum_{i=0}^n\\dbinom{n}{i}=2^n \\] \u8fd9\u662f\u4e8c\u9879\u5f0f\u5b9a\u7406\u7684\u7279\u6b8a\u60c5\u51b5\u3002\u53d6 \\(a=b=1\\) \u5c31\u53ef\u4ee5\u4e86\u3002 V. \\[ \\sum_{i=0}^n(-1)^i\\dbinom{n}{i}=[n=0] \\] \u4e8c\u9879\u5f0f\u5b9a\u7406\u7684\u53e6\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff0c\u53ef\u53d6 \\(a=1, b=-1\\) \u3002\u5f0f\u5b50\u7684\u7279\u6b8a\u60c5\u51b5\u662f\u53d6 \\(n=0\\) \u65f6\u7b54\u6848\u4e3a \\(1\\) \u3002 \u540e\u9762\u90a3\u4e2a\u662f Iverson Bracket. VI. \\[ \\sum_{i=0}^m \\dbinom{n}{i}\\dbinom{m}{m-i} = \\dbinom{m+n}{m}\\ \\ \\ (n \\geq m) \\] \u8fd9\u4e2a\u5c31\u662f\u8303\u5fb7\u8499\u5fb7\u5377\u79ef\u7684\u63a8\u8bba\u3002 VII. \\[ \\sum_{i=0}^n\\dbinom{n}{i}^2=\\dbinom{2n}{n} \\] \u4ecd\u65e7\u662f\u8303\u5fb7\u8499\u5fb7\u5377\u79ef\u7684\u63a8\u8bba. VIII. \\[ \\sum_{l=0}^n\\dbinom{l}{k} = \\dbinom{n+1}{k+1} \\] \u901a\u8fc7\u7ec4\u5408\u5206\u6790\u4e00\u4e00\u8003\u8651 \\(S={a_1, a_2, \\cdots, a_{n+1}}\\) \u7684 \\(k+1\\) \u5b50\u96c6\u6570\u53ef\u4ee5\u5f97\u8bc1\uff0c\u5728\u6052\u7b49\u5f0f\u8bc1\u660e\u4e2d\u6bd4\u8f83\u5e38\u7528\u3002 IX. \\[ \\dbinom{n}{r}\\dbinom{r}{k} = \\dbinom{n}{k}\\dbinom{n-k}{r-k} \\] \u7528\u5b9a\u4e49\u5c55\u5f00\u4e00\u4e0b\u5c31\u53ef\u4ee5\u8bc1\u660e\u4e86\uff0c\u5f0f\u5b50\u5f62\u5f0f\u5f88\u597d\u8bb0\u3002 X. \\[ \\sum_{i=0}^n\\dbinom{n-i}{i}=F_{n+1} \\] \u5176\u4e2d \\(F\\) \u662f\u6590\u6ce2\u90a3\u5951\u6570\u5217\u3002 \u8fd9\u4e2a\u6211\u4e0d\u4f1a\u8bc1\u660e\uff0c\u6682\u65f6\u5495\u4e86\u3002 \u51e0\u4e2a\u57fa\u672c\u65b9\u6cd5 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6346\u7ed1\u6cd5 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8981\u6c42\u67d0\u51e0\u4e2a\u5143\u7d20\u6392\u5217\u7ec4\u5408\u7684\u65f6\u5019\u5fc5\u987b\u76f8\u90bb\u3002 \u505a\u6cd5\u5927\u6982\u5c31\u662f\u628a\u4ed6\u4eec\u6346\u7ed1\u8d77\u6765\uff0c\u7136\u540e\u7b97\u6210\u4e00\u4e2a\u5143\u7d20\u505a\u6392\u5217\uff0c\u518d\u5728\u5185\u90e8\u505a\u6392\u5217\u3002 \u4f8b\u9898 \u67d0\u56fd\u5bb6\u96c6\u8bad\u961f\u5171 \\(7\\) \u4eba\u5408\u5f71\u7559\u5ff5\uff0c\u8981\u6c42\u7532\u9009\u624b\u548c\u4e59\u9009\u624b\u5fc5\u987b\u7ad9\u5728\u4e00\u8d77\uff0c\u90a3\u4e48\u4e00\u5171\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u6392\u6cd5\uff1f \u7b80\u5355\u7684\u95ee\u9898\uff0c\u628a\u7532\u548c\u4e59\u6346\u7ed1\uff0c\u7136\u540e\u6392\u5217\uff0c\u7b54\u6848\u662f \\(\\text A^{6}_{6} = 6!\\) \u79cd\u3002 \u7136\u540e\u7532\u4e59\u5185\u90e8\u6709 \\(\\text A^2_2 = 2!\\) \u79cd\u7b54\u6848\uff0c\u4e58\u6cd5\u539f\u7406\uff0c\u7b54\u6848\u7b49\u4e8e \\(6!2! = 1140\\) \u3002 \u63d2\u7a7a\u6cd5 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8981\u6c42\u67d0\u51e0\u4e2a\u5143\u7d20\u6392\u5217\u7ec4\u5408\u7684\u65f6\u5019\u5fc5\u987b\u4e0d\u76f8\u90bb\u3002 \u505a\u6cd5\u5927\u6982\u5c31\u662f\u628a\u8fd9\u51e0\u4e2a\u5143\u7d20\u63d0\u51fa\u6765\uff0c\u5269\u4e0b\u7684\u6392\u5217\u4e00\u6b21\u3002 \u7136\u540e\u628a\u8fd9\u51e0\u4e2a\u63d0\u51fa\u6765\u7684\u5143\u7d20\u63d2\u5230\u7a7a\u91cc\u9762\u53bb\u3002 \u4f8b\u9898 \u67d0\u56fd\u5bb6\u96c6\u8bad\u961f\u5171 \\(7\\) \u4eba\u5408\u5f71\u7559\u5ff5\uff0c\u8981\u6c42\u7532\u9009\u624b\u548c\u4e59\u9009\u624b\u5fc5\u987b\u4e0d\u7ad9\u5728\u4e00\u8d77\uff0c\u90a3\u4e48\u4e00\u5171\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u6392\u6cd5\uff1f \u7b80\u5355\u7684\u95ee\u9898\uff0c\u5148\u628a\u5269\u4e0b \\(5\\) \u4e2a\u4eba\u62ff\u51fa\u6765\u6392\u5217 \\(\\text A_5^5\\) \u79cd\u60c5\u51b5\u3002 \u7136\u540e\u7532\u4e59\u53ef\u4ee5\u7ad9\u5728\u4e24\u4e24\u4e4b\u95f4\u7684\u7a7a\u6216\u8005\u5934\u5c3e\uff0c\u4e00\u5171\u6709 \\(6\\) \u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u9009\uff0c\u73b0\u5728\u8981\u653e\u4e24\u4e2a\u4eba\u8fdb\u53bb\uff0c\u672c\u8d28\u53ef\u4ee5\u8f6c\u5316\u4e3a \\(6\\) \u4e2a\u5143\u7d20\u62bd\u4e24\u4e2a\u51fa\u6765\u505a\u6392\u5217\uff0c\u6240\u4ee5\u6709 \\(\\text A_6^2\\) \u79cd\u60c5\u51b5\u3002 \u4e58\u6cd5\u539f\u7406\uff0c\u7b54\u6848\u662f \\(\\text A_5^5 \\text A_6^2\\) \u3002 \u548c\u6346\u7ed1\u6cd5\u7ed3\u5408\u7684\u4f8b\u9898 \u67d0\u56fd\u5bb6\u96c6\u8bad\u961f\u5171 \\(7\\) \u4eba\u5408\u5f71\u7559\u5ff5\uff0c\u8981\u6c42\u7532\u9009\u624b\u548c\u4e59\u9009\u624b\u5fc5\u987b\u7ad9\u5728\u4e00\u8d77\u4e14\u4ed6\u4eec\u4efb\u610f\u4e00\u4f4d\u4e0d\u80fd\u548c\u4e19\u9009\u624b\u7ad9\u5728\u4e00\u8d77\uff0c\u90a3\u4e48\u4e00\u5171\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u6392\u6cd5\uff1f \u7b80\u5355\u7684\u95ee\u9898\uff0c\u5148\u628a\u7532\u4e59\u6346\u7ed1\uff0c\u7136\u540e\u7532\u4e59\u4e19\u62c9\u51fa\u6765\u5269\u4e0b\u7684\u505a\u6392\u5217\uff0c\u63d2\u7a7a\u4e4b\u540e\u7532\u4e59\u5185\u90e8\u518d\u6392\u5217\u3002 \u7b54\u6848\u662f \\(\\text A_4^4 \\text A_5^3 \\text A_2^2\\) \u3002 \u63d2\u677f\u6cd5 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e3a\u4ec0\u4e48\u8fd9\u91cc\u548c OI-wiki \u4e00\u6837 \uff08OI-Wiki \u4e0a\u8fd9\u90e8\u5206\u662f \u6211 \u5199\u7684\uff0c\u53ef\u4ee5\u770b\u6211\u5f53\u65f6\u7684 Pull Request OI-wiki#4278 \uff09 \u63d2\u677f\u6cd5\uff08Stars and bars\uff09\u662f\u7528\u4e8e\u6c42\u4e00\u7c7b\u7ed9\u76f8\u540c\u5143\u7d20\u5206\u7ec4\u7684\u65b9\u6848\u6570\u7684\u4e00\u79cd\u6280\u5de7\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e8e\u6c42\u4e00\u7c7b\u7ebf\u6027\u4e0d\u5b9a\u65b9\u7a0b\u7684\u89e3\u7684\u7ec4\u6570\u3002 \u6b63\u6574\u6570\u548c\u7684\u6570\u76ee \u03c8(\uff40\u2207\u00b4)\u03c8 \u95ee\u9898\u4e00\uff1a\u73b0\u6709 \\(n\\) \u4e2a \u5b8c\u5168\u76f8\u540c \u7684\u5143\u7d20\uff0c\u8981\u6c42\u5c06\u5176\u5206\u4e3a \\(k\\) \u7ec4\uff0c\u4fdd\u8bc1\u6bcf\u7ec4\u81f3\u5c11\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u4e00\u5171\u6709\u591a\u5c11\u79cd\u5206\u6cd5\uff1f \u8003\u8651\u62ff \\(k - 1\\) \u5757\u677f\u5b50\u63d2\u5165\u5230 \\(n\\) \u4e2a\u5143\u7d20\u4e24\u4e24\u5f62\u6210\u7684 \\(n - 1\\) \u4e2a\u7a7a\u91cc\u9762\u3002 \u56e0\u4e3a\u5143\u7d20\u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u662f \\(\\dbinom{n - 1}{k - 1}\\) \u3002 \u672c\u8d28\u662f\u6c42 \\(x_1+x_2+\\cdots+x_k=n\\) \u7684\u6b63\u6574\u6570\u89e3\u7684\u7ec4\u6570\u3002 \u975e\u8d1f\u6574\u6570\u548c\u7684\u6570\u76ee \u03c8(\uff40\u2207\u00b4)\u03c8 \u95ee\u9898\u4e8c\uff1a\u5982\u679c\u95ee\u9898\u53d8\u5316\u4e00\u4e0b\uff0c\u6bcf\u7ec4\u5141\u8bb8\u4e3a\u7a7a\u5462\uff1f \u663e\u7136\u6b64\u65f6\u6ca1\u6cd5\u76f4\u63a5\u63d2\u677f\u4e86\uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u51fa\u73b0\u5f88\u591a\u5757\u677f\u5b50\u63d2\u5230\u4e00\u4e2a\u7a7a\u91cc\u9762\u7684\u60c5\u51b5\uff0c\u975e\u5e38\u4e0d\u597d\u8ba1\u7b97\u3002 \u6211\u4eec\u8003\u8651\u521b\u9020\u6761\u4ef6\u8f6c\u5316\u6210\u6709\u9650\u5236\u7684\u95ee\u9898\u4e00\uff0c\u5148\u501f \\(k\\) \u4e2a\u5143\u7d20\u8fc7\u6765\uff0c\u5728\u8fd9 \\(n + k\\) \u4e2a\u5143\u7d20\u5f62\u6210\u7684 \\(n + k - 1\\) \u4e2a\u7a7a\u91cc\u9762\u63d2\u677f\uff0c\u7b54\u6848\u4e3a \\[ \\dbinom{n + k - 1}{k - 1} = \\dbinom{n + k - 1}{n} \\] \u867d\u7136\u4e0d\u662f\u76f4\u63a5\u6c42\u7684\u539f\u95ee\u9898\uff0c\u4f46\u8fd9\u4e2a\u5f0f\u5b50\u5c31\u662f\u539f\u95ee\u9898\u7684\u7b54\u6848\uff0c\u53ef\u4ee5\u8fd9\u4e48\u7406\u89e3\uff1a \u5f00\u5934\u6211\u4eec\u501f\u6765\u4e86 \\(k\\) \u4e2a\u5143\u7d20\uff0c\u7528\u4e8e\u4fdd\u8bc1\u6bcf\u7ec4\u81f3\u5c11\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u63d2\u5b8c\u677f\u4e4b\u540e\u518d\u628a\u8fd9 \\(k\\) \u4e2a\u501f\u6765\u7684\u5143\u7d20\u4ece \\(k\\) \u7ec4\u91cc\u9762\u62ff\u8d70\u3002\u56e0\u4e3a\u5143\u7d20\u662f\u76f8\u540c\u7684\uff0c\u6240\u4ee5\u8f6c\u5316\u8fc7\u7684\u60c5\u51b5\u548c\u8f6c\u5316\u524d\u7684\u60c5\u51b5\u53ef\u4ee5\u4e00\u4e00\u5bf9\u5e94\uff0c\u7b54\u6848\u4e5f\u5c31\u662f\u76f8\u7b49\u7684\u3002 \u7531\u6b64\u53ef\u4ee5\u63a8\u5bfc\u51fa\u63d2\u677f\u6cd5\u7684\u516c\u5f0f\uff1a \\(\\dbinom{n + k - 1}{n}\\) \u3002 \u672c\u8d28\u662f\u6c42 \\(x_1+x_2+\\cdots+x_k=n\\) \u7684\u975e\u8d1f\u6574\u6570\u89e3\u7684\u7ec4\u6570\uff08\u5373\u8981\u6c42 \\(x_i \\ge 0\\) \uff09\u3002 \u4e0d\u540c\u4e0b\u754c\u6574\u6570\u548c\u7684\u6570\u76ee \u03c8(\uff40\u2207\u00b4)\u03c8 \u95ee\u9898\u4e09\uff1a\u5982\u679c\u518d\u6269\u5c55\u4e00\u6b65\uff0c\u8981\u6c42\u5bf9\u4e8e\u7b2c \\(i\\) \u7ec4\uff0c\u81f3\u5c11\u8981\u5206\u5230 \\(a_i,\\sum a_i \\le n\\) \u4e2a\u5143\u7d20\u5462\uff1f \u672c\u8d28\u662f\u6c42 \\(x_1+x_2+\\cdots+x_k=n\\) \u7684\u89e3\u7684\u6570\u76ee\uff0c\u5176\u4e2d \\(x_i \\ge a_i\\) \u3002 \u7c7b\u6bd4\u65e0\u9650\u5236\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u501f \\(\\sum a_i\\) \u4e2a\u5143\u7d20\u8fc7\u6765\uff0c\u4fdd\u8bc1\u7b2c \\(i\\) \u7ec4\u81f3\u5c11\u80fd\u5206\u5230 \\(a_i\\) \u4e2a\u3002\u4e5f\u5c31\u662f\u4ee4 \\[ x_i^{\\prime}=x_i-a_i \\] \u5f97\u5230\u65b0\u65b9\u7a0b\uff1a \\[ \\begin{aligned} (x_1^{\\prime}+a_1)+(x_2^{\\prime}+a_2)+\\cdots+(x_k^{\\prime}+a_k)&=n\\\\ x_1^{\\prime}+x_2^{\\prime}+\\cdots+x_k^{\\prime}&=n-a_1-a_2-\\cdots-a_k\\\\ x_1^{\\prime}+x_2^{\\prime}+\\cdots+x_k^{\\prime}&=n-\\sum a_i \\end{aligned} \\] \u5176\u4e2d \\[ x_i^{\\prime}\\ge 0 \\] \u7136\u540e\u95ee\u9898\u4e09\u5c31\u8f6c\u5316\u6210\u4e86\u95ee\u9898\u4e8c\uff0c\u76f4\u63a5\u7528\u63d2\u677f\u6cd5\u516c\u5f0f\u5f97\u5230\u7b54\u6848\u4e3a \\[ \\dbinom{n + \\sum a_i - 1}{n} \\] \u4ee5\u4e0b\u6458\u5f55\u81ea OI-wiki \u3002 \u5706\u6392\u5217 \u03c8(\uff40\u2207\u00b4)\u03c8 \\(n\\) \u4e2a\u4eba\u5168\u90e8\u6765\u56f4\u6210\u4e00\u5708\uff0c\u6240\u6709\u7684\u6392\u5217\u6570\u8bb0\u4e3a \\(\\mathrm Q_n^n\\) \u3002\u8003\u8651\u5176\u4e2d\u5df2\u7ecf\u6392\u597d\u7684\u4e00\u5708\uff0c\u4ece\u4e0d\u540c\u4f4d\u7f6e\u65ad\u5f00\uff0c\u53c8\u53d8\u6210\u4e0d\u540c\u7684\u961f\u5217\u3002 \u6240\u4ee5\u6709 \\[ \\mathrm Q_n^n \\times n = \\mathrm A_n^n \\Longrightarrow \\mathrm Q_n = \\frac{\\mathrm A_n^n}{n} = (n-1)! \\] \u7531\u6b64\u53ef\u77e5\u90e8\u5206\u5706\u6392\u5217\u7684\u516c\u5f0f\uff1a \\[ \\mathrm Q_n^r = \\frac{\\mathrm A_n^r}{r} = \\frac{n!}{r \\times (n-r)!} \\] \u4e0d\u76f8\u90bb\u6392\u5217 \u03c8(\uff40\u2207\u00b4)\u03c8 \\(1 \\sim n\\) \u8fd9 \\(n\\) \u4e2a\u81ea\u7136\u6570\u4e2d\u9009 \\(k\\) \u4e2a\uff0c\u8fd9 \\(k\\) \u4e2a\u6570\u4e2d\u4efb\u4f55\u4e24\u4e2a\u6570\u90fd\u4e0d\u76f8\u90bb\u7684\u7ec4\u5408\u6709 \\(\\dbinom {n-k+1}{k}\\) \u79cd\u3002 \u591a\u91cd\u96c6\u7684\u6392\u5217\u6570 | \u591a\u91cd\u7ec4\u5408\u6570 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8bf7\u5927\u5bb6\u4e00\u5b9a\u8981\u533a\u5206 \u591a\u91cd\u7ec4\u5408\u6570 \u4e0e \u591a\u91cd\u96c6\u7684\u7ec4\u5408\u6570 \uff01\u4e24\u8005\u662f\u5b8c\u5168\u4e0d\u540c\u7684\u6982\u5ff5\uff01 \u591a\u91cd\u96c6\u662f\u6307\u5305\u542b\u91cd\u590d\u5143\u7d20\u7684\u5e7f\u4e49\u96c6\u5408\u3002\u8bbe \\(S=\\{n_1\\cdot a_1,n_2\\cdot a_2,\\cdots,n_k\\cdot a_k\\}\\) \u8868\u793a\u7531 \\(n_1\\) \u4e2a \\(a_1\\) \uff0c \\(n_2\\) \u4e2a \\(a_2\\) \uff0c\u2026\uff0c \\(n_k\\) \u4e2a \\(a_k\\) \u7ec4\u6210\u7684\u591a\u91cd\u96c6\uff0c \\(S\\) \u7684\u5168\u6392\u5217\u4e2a\u6570\u4e3a \\[ \\frac{n!}{\\prod_{i=1}^kn_i!}=\\frac{n!}{n_1!n_2!\\cdots n_k!} \\] \u76f8\u5f53\u4e8e\u628a\u76f8\u540c\u5143\u7d20\u7684\u6392\u5217\u6570\u9664\u6389\u4e86\u3002\u5177\u4f53\u5730\uff0c\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u4f60\u6709 \\(k\\) \u79cd\u4e0d\u4e00\u6837\u7684\u7403\uff0c\u6bcf\u79cd\u7403\u7684\u4e2a\u6570\u5206\u522b\u662f \\(n_1,n_2,\\cdots,n_k\\) \uff0c\u4e14 \\(n=n_1+n_2+\\ldots+n_k\\) \u3002\u8fd9 \\(n\\) \u4e2a\u7403\u7684\u5168\u6392\u5217\u6570\u5c31\u662f \u591a\u91cd\u96c6\u7684\u6392\u5217\u6570 \u3002\u591a\u91cd\u96c6\u7684\u6392\u5217\u6570\u5e38\u88ab\u79f0\u4f5c \u591a\u91cd\u7ec4\u5408\u6570 \u3002\u6211\u4eec\u53ef\u4ee5\u7528\u591a\u91cd\u7ec4\u5408\u6570\u7684\u7b26\u53f7\u8868\u793a\u4e0a\u5f0f\uff1a \\[ \\dbinom{n}{n_1,n_2,\\cdots,n_k}=\\frac{n!}{\\prod_{i=1}^kn_i!} \\] \u53ef\u4ee5\u770b\u51fa\uff0c \\(\\dbinom{n}{m}\\) \u7b49\u4ef7\u4e8e \\(\\dbinom{n}{m,n-m}\\) \uff0c\u53ea\u4e0d\u8fc7\u540e\u8005\u8f83\u4e3a\u7e41\u7410\uff0c\u56e0\u800c\u4e0d\u91c7\u7528\u3002 \u591a\u91cd\u96c6\u7684\u7ec4\u5408\u6570 1 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8bbe \\(S=\\{n_1\\cdot a_1,n_2\\cdot a_2,\\cdots,n_k\\cdot a_k\\}\\) \u8868\u793a\u7531 \\(n_1\\) \u4e2a \\(a_1\\) \uff0c \\(n_2\\) \u4e2a \\(a_2\\) \uff0c\u2026\uff0c \\(n_k\\) \u4e2a \\(a_k\\) \u7ec4\u6210\u7684\u591a\u91cd\u96c6\u3002\u90a3\u4e48\u5bf9\u4e8e\u6574\u6570 \\(r(r<n_i,\\forall i\\in[1,k])\\) \uff0c\u4ece \\(S\\) \u4e2d\u9009\u62e9 \\(r\\) \u4e2a\u5143\u7d20\u7ec4\u6210\u4e00\u4e2a\u591a\u91cd\u96c6\u7684\u65b9\u6848\u6570\u5c31\u662f \u591a\u91cd\u96c6\u7684\u7ec4\u5408\u6570 \u3002\u8fd9\u4e2a\u95ee\u9898\u7b49\u4ef7\u4e8e \\(x_1+x_2+\\cdots+x_k=r\\) \u7684\u975e\u8d1f\u6574\u6570\u89e3\u7684\u6570\u76ee\uff0c\u53ef\u4ee5\u7528\u63d2\u677f\u6cd5\u89e3\u51b3\uff0c\u7b54\u6848\u4e3a \\[ \\dbinom{r+k-1}{k-1} \\] \u591a\u91cd\u96c6\u7684\u7ec4\u5408\u6570 2 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8003\u8651\u8fd9\u4e2a\u95ee\u9898\uff1a\u8bbe \\(S=\\{n_1\\cdot a_1,n_2\\cdot a_2,\\cdots,n_k\\cdot a_k,\\}\\) \u8868\u793a\u7531 \\(n_1\\) \u4e2a \\(a_1\\) \uff0c \\(n_2\\) \u4e2a \\(a_2\\) \uff0c\u2026\uff0c \\(n_k\\) \u4e2a \\(a_k\\) \u7ec4\u6210\u7684\u591a\u91cd\u96c6\u3002\u90a3\u4e48\u5bf9\u4e8e\u6b63\u6574\u6570 \\(r\\) \uff0c\u4ece \\(S\\) \u4e2d\u9009\u62e9 \\(r\\) \u4e2a\u5143\u7d20\u7ec4\u6210\u4e00\u4e2a\u591a\u91cd\u96c6\u7684\u65b9\u6848\u6570\u3002 \u8fd9\u6837\u5c31\u9650\u5236\u4e86\u6bcf\u79cd\u5143\u7d20\u7684\u53d6\u7684\u4e2a\u6570\u3002\u540c\u6837\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u95ee\u9898\u8f6c\u5316\u4e3a\u5e26\u9650\u5236\u7684\u7ebf\u6027\u65b9\u7a0b\u6c42\u89e3\uff1a \\[ \\forall i\\in [1,k],\\ x_i\\le n_i,\\ \\sum_{i=1}^kx_i=r \\] \u4e8e\u662f\u5f88\u81ea\u7136\u5730\u60f3\u5230\u4e86\u5bb9\u65a5\u539f\u7406\u3002\u5bb9\u65a5\u7684\u6a21\u578b\u5982\u4e0b\uff1a \u5168\u96c6\uff1a \\(\\displaystyle \\sum_{i=1}^kx_i=r\\) \u7684\u975e\u8d1f\u6574\u6570\u89e3\u3002 \u5c5e\u6027\uff1a \\(x_i\\le n_i\\) \u3002 \u4e8e\u662f\u8bbe\u6ee1\u8db3\u5c5e\u6027 \\(i\\) \u7684\u96c6\u5408\u662f \\(S_i\\) \uff0c \\(\\overline{S_i}\\) \u8868\u793a\u4e0d\u6ee1\u8db3\u5c5e\u6027 \\(i\\) \u7684\u96c6\u5408\uff0c\u5373\u6ee1\u8db3 \\(x_i\\ge n_i+1\\) \u7684\u96c6\u5408\uff08\u8f6c\u5316\u4e3a\u4e0a\u9762\u63d2\u677f\u6cd5\u7684\u95ee\u9898\u4e09\uff09\u3002\u90a3\u4e48\u7b54\u6848\u5373\u4e3a \\[ \\left|\\bigcap_{i=1}^kS_i\\right|=|U|-\\left|\\bigcup_{i=1}^k\\overline{S_i}\\right| \\] \u6839\u636e\u5bb9\u65a5\u539f\u7406\uff0c\u6709\uff1a \\[ \\begin{aligned} \\left|\\bigcup_{i=1}^k\\overline{S_i}\\right| =&\\sum_i\\left|\\overline{S_i}\\right| -\\sum_{i,j}\\left|\\overline{S_i}\\cap\\overline{S_j}\\right| +\\sum_{i,j,k}\\left|\\overline{S_i}\\cap\\overline{S_j}\\cap\\overline{S_k}\\right| -\\cdots\\\\ &+(-1)^{k-1}\\left|\\bigcap_{i=1}^k\\overline{S_i}\\right|\\\\ =&\\sum_i\\dbinom{k+r-n_i-2}{k-1} -\\sum_{i,j}\\dbinom{k+r-n_i-n_j-3}{k-1}+\\sum_{i,j,k}\\dbinom{k+r-n_i-n_j-n_k-4}{k-1} -\\cdots\\\\ &+(-1)^{k-1}\\dbinom{k+r-\\sum_{i=1}^kn_i-k-1}{k-1} \\end{aligned} \\] \u62ff\u5168\u96c6 \\(\\displaystyle |U|=\\dbinom{k+r-1}{k-1}\\) \u51cf\u53bb\u4e0a\u5f0f\uff0c\u5f97\u5230\u591a\u91cd\u96c6\u7684\u7ec4\u5408\u6570 \\[ Ans=\\sum_{p=0}^k(-1)^p\\sum_{A}\\dbinom{k+r-1-\\sum_{A} n_{A_i}-p}{k-1} \\] \u5176\u4e2d A \u662f\u5145\u5f53\u679a\u4e3e\u5b50\u96c6\u7684\u4f5c\u7528\uff0c\u6ee1\u8db3 \\(|A|=p,\\ A_i<A_{i+1}\\) \u3002","title":"\u6392\u5217\u7ec4\u5408"},{"location":"algor/math/combinatorics/combination/#_1","text":"","title":"\u6392\u5217\u7ec4\u5408\u57fa\u7840"},{"location":"algor/math/combinatorics/combination/#_2","text":"\u52a0\u6cd5\u539f\u7406: \u5982\u679c\u5b8c\u6210\u4e00\u4e2a\u4e8b\u60c5\u6709 \\(n\\) \u7c7b\u65b9\u6cd5\uff0c\u5176\u4e2d\u7b2c \\(i\\) \u7c7b\u65b9\u6cd5\u6709 \\(a_i\\) \u79cd\u7b56\u7565\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u65b9\u6cd5\u662f\u72ec\u7acb\u7684\uff0c\u6240\u4ee5\u603b\u5171\u7684\u65b9\u6848\u6570\u4e3a \\(\\sum a_i\\) \u79cd\u3002 \u52a0\u6cd5\u539f\u7406\uff1a\u5982\u679c\u5b8c\u6210\u4e00\u4e2a\u4e8b\u60c5\u6709 \\(n\\) \u4e2a\u6b65\u9aa4\uff0c\u5176\u4e2d\u7b2c \\(i\\) \u4e2a\u6b65\u9aa4\u6709 \\(a_i\\) \u79cd\u7b56\u7565\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u65b9\u6cd5\u662f\u524d\u540e\u5173\u8054\u7684\uff0c\u6240\u4ee5\u603b\u5171\u7684\u65b9\u6848\u6570\u4e3a \\(\\prod a_i\\) \u79cd\u3002","title":"\u8ba1\u6570\u539f\u7406"},{"location":"algor/math/combinatorics/combination/#_3","text":"","title":"\u6392\u5217\u6570\u548c\u7ec4\u5408\u6570"},{"location":"algor/math/combinatorics/combination/#_4","text":"\u5b9a\u4e49\u4ece \\(n\\) \u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u9009 \\(m\\) \u4e2a\u5143\u7d20\u51fa\u6765\uff08 \\(m \\le n\\) \uff09\uff0c\u8fdb\u884c\u6392\u5217\uff08\u6709\u5e8f\uff09\uff0c\u6240\u80fd\u5f97\u5230\u7684\u603b\u6392\u5217\u6570\u4e3a \\(\\text A_n^m\\) \u3002 \u6bd4\u5982 \\(1, 2, 3\\) \uff0c\u4efb\u610f\u62ff\u4e24\u4e2a\u51fa\u6765\u6392\u5217\u5c31\u6709 \\([1, 2]; [1,3]; [2, 1]; [2, 3]; [3,1]; [3,2]\\) \u8fd9\u516d\u79cd\uff0c\u5373 \\(\\text A_3^2 = 6\\) \u8ba1\u7b97\u53ef\u4ee5\u8003\u8651\u628a\u95ee\u9898\u8f6c\u5316\u6210\u6709 \\(n\\) \u4e2a\u4eba\uff0c\u6392\u957f\u5ea6\u4e3a \\(m\\) \u7684\u4e00\u4e2a\u961f\uff0c\u7b2c \\(1\\) \u4e2a\u4f4d\u7f6e\u6709 \\(n\\) \u79cd\u9009\u6cd5\uff0c\u7b2c \\(2\\) \u4e2a\u4f4d\u7f6e\u6709 \\(n - 1\\) \u79cd\u9009\u6cd5\uff0c\u7b2c \\(m\\) \u4e2a\u4f4d\u7f6e\u6709 \\(n - m + 1\\) \u79cd\u9009\u6cd5\uff0c\u6839\u636e\u4e58\u6cd5\u539f\u7406\u53ef\u4ee5\u5f97\u5230\u6392\u5217\u6570\u7684\u8ba1\u7b97\u516c\u5f0f\uff1a \\[ \\text{A}_n^m = \\prod\\limits_{i = 1}^{m}(n - i + 1) = \\dfrac{n!}{(n - m)!} \\] \u5176\u4e2d\u5168\u6392\u5217\u4e3a \\(\\text A_n^n = n!\\) \u3002","title":"\u6392\u5217\u6570"},{"location":"algor/math/combinatorics/combination/#_5","text":"\u5b9a\u4e49\u4ece \\(n\\) \u4e2a\u4e0d\u540c\u5143\u7d20\u79cd\u62ff \\(m\\) \u4e2a\u5143\u7d20\u51fa\u6765 \\((m \\le n)\\) \uff0c\u8fdb\u884c\u7ec4\u5408\uff08\u65e0\u5e8f\uff09\uff0c\u6240\u80fd\u5f97\u5230\u7684\u603b\u6392\u5217\u6570\u4e3a \\(\\text C_n^m\\) \uff0c\u4e5f\u8bb0\u4f5c \\(\\dbinom{n}{m}\\) \u3002 \u6bd4\u5982 \\(1,2,3\\) \uff0c\u4efb\u610f\u62ff\u4e24\u4e2a\u51fa\u6765\u7ec4\u5408\u5c31\u6709 \\(\\{1,2\\}; \\{2, 3\\}; \\{1, 3\\}\\) \u8fd9\u4e09\u79cd\uff0c\u5373 \\(\\dbinom{3}{2} = 3\\) \u3002 \u8ba1\u7b97\u53ef\u4ee5\u4ece\u6392\u5217\u6570\u90a3\u91cc\u8f6c\u5316\uff0c\u5047\u8bbe\u6211\u4eec\u62ff\u4e86 \\(m\\) \u4e2a\u4eba\u51fa\u6765\u6392\u5217\uff0c\u663e\u7136\u8fd9 \\(m\\) \u4e2a\u4eba\u7684 \\(m!\\) \u79cd\u6392\u5217\u90fd\u4f1a\u88ab\u8ba1\u7b97\uff0c\u5728\u7ec4\u5408\u91cc\u9762\u4f1a\u88ab\u7b97\u4f5c\u4e00\u4e2a\uff0c\u6240\u4ee5\u5728\u6392\u5217\u6570\u7684\u57fa\u7840\u4e0a\u9664\u6389 \\(m!\\) \u5373\u53ef\u3002 \\[ \\dbinom{n}{m} = \\dfrac{n!}{m!(n-m)!} \\] \u5176\u4e2d\u8fb9\u754c\u4e3a\uff1a \\(\\dbinom{n}{0} = 1\\) \u3002","title":"\u7ec4\u5408\u6570"},{"location":"algor/math/combinatorics/combination/#_6","text":"\\[ (a + b)^n = \\sum\\limits_{i = 0}^{n}\\dbinom{n}{i}a^{n - i}b^{i} \\] \u5176\u4e2d \\(\\displaystyle \\dbinom{n}{i} a^{n - i}b^i\\) \u53eb\u505a \\((a + b)^n\\) \u5c55\u5f00\u5f0f\u7684\u7b2c \\(i + 1\\) \u9879 \\(T_{i + 1}\\) \uff0c\u6ce8\u610f \\((a + b)^n, (b + a)^n\\) \u7684\u5c55\u5f00\u5f0f\u7684\u7b2c \\(i\\) \u9879\u662f\u4e0d\u4e00\u6837\u7684\u3002 \\((a - b)^n\\) \u7684\u5c55\u5f00\u5f0f\u901a\u9879\u591a\u4e86\u4e00\u4e2a\u5bb9\u65a5\u7cfb\u6570\u4e00\u6837\u7684\u4e1c\u897f \uff1a \\(\\displaystyle T_{i + 1} = (-1)^i \\dbinom{n}{i} a^{n - i}b^i\\) \u3002 \u4e8c\u9879\u5f0f\u5b9a\u7406\u4e5f\u53ef\u4ee5\u6269\u5c55\u4e3a\u591a\u9879\u5f0f\u7684\u5f62\u5f0f\uff0c\u5728\u6b64\u4e0d\u5c55\u5f00\u3002 \u6240\u4ee5\uff0c \\(\\dbinom{n}{m}\\) \u4e5f\u88ab\u53eb\u505a\u4e8c\u9879\u5f0f\u7cfb\u6570\u3002","title":"\u4e8c\u9879\u5f0f\u5b9a\u7406"},{"location":"algor/math/combinatorics/combination/#_7","text":"I. \\[ \\dbinom{n}{m}=\\dbinom{n}{n-m} \\] \u8fd9\u4e2a\u662f\u663e\u7136\u7684\uff0c\u56e0\u4e3a\u4f60\u9009 \\(m\\) \u4e2a\u548c\u9009 \\(n - m\\) \u4e2a\u7684\u60c5\u51b5\u662f\u6346\u7ed1\u8d77\u6765\u7684\u3002 II. \\[ \\dbinom{n}{k} = \\dfrac{n}{k} \\dbinom{n-1}{k-1} \\] \u8fd9\u4e2a\u4e5f\u662f\u663e\u7136\u7684\uff0c\u6839\u636e\u5b9a\u4e49\u5c55\u5f00\u5c31\u53ef\u4ee5\u5f97\u5230\u3002 \u4e5f\u53ef\u4ee5\u5199\u4f5c \\[ k\\dbinom{n}{k} = n\\dbinom{n - 1}{k - 1} \\] III. \\[ \\dbinom{n}{m}=\\dbinom{n-1}{m}+\\dbinom{n-1}{m-1} \\] \u8fd9\u4e2a\u5c31\u662f\u7ec4\u5408\u6570\u7684\u9012\u63a8\u5f0f\uff0c\u4e5f\u53ef\u4ee5\u770b\u4f5c\u662f\u6768\u8f89\u4e09\u89d2\u3002 IV. \\[ \\dbinom{n}{0}+\\dbinom{n}{1}+\\cdots+\\dbinom{n}{n}=\\sum_{i=0}^n\\dbinom{n}{i}=2^n \\] \u8fd9\u662f\u4e8c\u9879\u5f0f\u5b9a\u7406\u7684\u7279\u6b8a\u60c5\u51b5\u3002\u53d6 \\(a=b=1\\) \u5c31\u53ef\u4ee5\u4e86\u3002 V. \\[ \\sum_{i=0}^n(-1)^i\\dbinom{n}{i}=[n=0] \\] \u4e8c\u9879\u5f0f\u5b9a\u7406\u7684\u53e6\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\uff0c\u53ef\u53d6 \\(a=1, b=-1\\) \u3002\u5f0f\u5b50\u7684\u7279\u6b8a\u60c5\u51b5\u662f\u53d6 \\(n=0\\) \u65f6\u7b54\u6848\u4e3a \\(1\\) \u3002 \u540e\u9762\u90a3\u4e2a\u662f Iverson Bracket. VI. \\[ \\sum_{i=0}^m \\dbinom{n}{i}\\dbinom{m}{m-i} = \\dbinom{m+n}{m}\\ \\ \\ (n \\geq m) \\] \u8fd9\u4e2a\u5c31\u662f\u8303\u5fb7\u8499\u5fb7\u5377\u79ef\u7684\u63a8\u8bba\u3002 VII. \\[ \\sum_{i=0}^n\\dbinom{n}{i}^2=\\dbinom{2n}{n} \\] \u4ecd\u65e7\u662f\u8303\u5fb7\u8499\u5fb7\u5377\u79ef\u7684\u63a8\u8bba. VIII. \\[ \\sum_{l=0}^n\\dbinom{l}{k} = \\dbinom{n+1}{k+1} \\] \u901a\u8fc7\u7ec4\u5408\u5206\u6790\u4e00\u4e00\u8003\u8651 \\(S={a_1, a_2, \\cdots, a_{n+1}}\\) \u7684 \\(k+1\\) \u5b50\u96c6\u6570\u53ef\u4ee5\u5f97\u8bc1\uff0c\u5728\u6052\u7b49\u5f0f\u8bc1\u660e\u4e2d\u6bd4\u8f83\u5e38\u7528\u3002 IX. \\[ \\dbinom{n}{r}\\dbinom{r}{k} = \\dbinom{n}{k}\\dbinom{n-k}{r-k} \\] \u7528\u5b9a\u4e49\u5c55\u5f00\u4e00\u4e0b\u5c31\u53ef\u4ee5\u8bc1\u660e\u4e86\uff0c\u5f0f\u5b50\u5f62\u5f0f\u5f88\u597d\u8bb0\u3002 X. \\[ \\sum_{i=0}^n\\dbinom{n-i}{i}=F_{n+1} \\] \u5176\u4e2d \\(F\\) \u662f\u6590\u6ce2\u90a3\u5951\u6570\u5217\u3002 \u8fd9\u4e2a\u6211\u4e0d\u4f1a\u8bc1\u660e\uff0c\u6682\u65f6\u5495\u4e86\u3002","title":"\u7ec4\u5408\u6570\u6027\u8d28"},{"location":"algor/math/combinatorics/combination/#_8","text":"","title":"\u51e0\u4e2a\u57fa\u672c\u65b9\u6cd5"},{"location":"algor/math/combinatorics/combination/#_9","text":"\u8981\u6c42\u67d0\u51e0\u4e2a\u5143\u7d20\u6392\u5217\u7ec4\u5408\u7684\u65f6\u5019\u5fc5\u987b\u76f8\u90bb\u3002 \u505a\u6cd5\u5927\u6982\u5c31\u662f\u628a\u4ed6\u4eec\u6346\u7ed1\u8d77\u6765\uff0c\u7136\u540e\u7b97\u6210\u4e00\u4e2a\u5143\u7d20\u505a\u6392\u5217\uff0c\u518d\u5728\u5185\u90e8\u505a\u6392\u5217\u3002 \u4f8b\u9898 \u67d0\u56fd\u5bb6\u96c6\u8bad\u961f\u5171 \\(7\\) \u4eba\u5408\u5f71\u7559\u5ff5\uff0c\u8981\u6c42\u7532\u9009\u624b\u548c\u4e59\u9009\u624b\u5fc5\u987b\u7ad9\u5728\u4e00\u8d77\uff0c\u90a3\u4e48\u4e00\u5171\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u6392\u6cd5\uff1f \u7b80\u5355\u7684\u95ee\u9898\uff0c\u628a\u7532\u548c\u4e59\u6346\u7ed1\uff0c\u7136\u540e\u6392\u5217\uff0c\u7b54\u6848\u662f \\(\\text A^{6}_{6} = 6!\\) \u79cd\u3002 \u7136\u540e\u7532\u4e59\u5185\u90e8\u6709 \\(\\text A^2_2 = 2!\\) \u79cd\u7b54\u6848\uff0c\u4e58\u6cd5\u539f\u7406\uff0c\u7b54\u6848\u7b49\u4e8e \\(6!2! = 1140\\) \u3002","title":"\u6346\u7ed1\u6cd5"},{"location":"algor/math/combinatorics/combination/#_10","text":"\u8981\u6c42\u67d0\u51e0\u4e2a\u5143\u7d20\u6392\u5217\u7ec4\u5408\u7684\u65f6\u5019\u5fc5\u987b\u4e0d\u76f8\u90bb\u3002 \u505a\u6cd5\u5927\u6982\u5c31\u662f\u628a\u8fd9\u51e0\u4e2a\u5143\u7d20\u63d0\u51fa\u6765\uff0c\u5269\u4e0b\u7684\u6392\u5217\u4e00\u6b21\u3002 \u7136\u540e\u628a\u8fd9\u51e0\u4e2a\u63d0\u51fa\u6765\u7684\u5143\u7d20\u63d2\u5230\u7a7a\u91cc\u9762\u53bb\u3002 \u4f8b\u9898 \u67d0\u56fd\u5bb6\u96c6\u8bad\u961f\u5171 \\(7\\) \u4eba\u5408\u5f71\u7559\u5ff5\uff0c\u8981\u6c42\u7532\u9009\u624b\u548c\u4e59\u9009\u624b\u5fc5\u987b\u4e0d\u7ad9\u5728\u4e00\u8d77\uff0c\u90a3\u4e48\u4e00\u5171\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u6392\u6cd5\uff1f \u7b80\u5355\u7684\u95ee\u9898\uff0c\u5148\u628a\u5269\u4e0b \\(5\\) \u4e2a\u4eba\u62ff\u51fa\u6765\u6392\u5217 \\(\\text A_5^5\\) \u79cd\u60c5\u51b5\u3002 \u7136\u540e\u7532\u4e59\u53ef\u4ee5\u7ad9\u5728\u4e24\u4e24\u4e4b\u95f4\u7684\u7a7a\u6216\u8005\u5934\u5c3e\uff0c\u4e00\u5171\u6709 \\(6\\) \u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u9009\uff0c\u73b0\u5728\u8981\u653e\u4e24\u4e2a\u4eba\u8fdb\u53bb\uff0c\u672c\u8d28\u53ef\u4ee5\u8f6c\u5316\u4e3a \\(6\\) \u4e2a\u5143\u7d20\u62bd\u4e24\u4e2a\u51fa\u6765\u505a\u6392\u5217\uff0c\u6240\u4ee5\u6709 \\(\\text A_6^2\\) \u79cd\u60c5\u51b5\u3002 \u4e58\u6cd5\u539f\u7406\uff0c\u7b54\u6848\u662f \\(\\text A_5^5 \\text A_6^2\\) \u3002 \u548c\u6346\u7ed1\u6cd5\u7ed3\u5408\u7684\u4f8b\u9898 \u67d0\u56fd\u5bb6\u96c6\u8bad\u961f\u5171 \\(7\\) \u4eba\u5408\u5f71\u7559\u5ff5\uff0c\u8981\u6c42\u7532\u9009\u624b\u548c\u4e59\u9009\u624b\u5fc5\u987b\u7ad9\u5728\u4e00\u8d77\u4e14\u4ed6\u4eec\u4efb\u610f\u4e00\u4f4d\u4e0d\u80fd\u548c\u4e19\u9009\u624b\u7ad9\u5728\u4e00\u8d77\uff0c\u90a3\u4e48\u4e00\u5171\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u6392\u6cd5\uff1f \u7b80\u5355\u7684\u95ee\u9898\uff0c\u5148\u628a\u7532\u4e59\u6346\u7ed1\uff0c\u7136\u540e\u7532\u4e59\u4e19\u62c9\u51fa\u6765\u5269\u4e0b\u7684\u505a\u6392\u5217\uff0c\u63d2\u7a7a\u4e4b\u540e\u7532\u4e59\u5185\u90e8\u518d\u6392\u5217\u3002 \u7b54\u6848\u662f \\(\\text A_4^4 \\text A_5^3 \\text A_2^2\\) \u3002","title":"\u63d2\u7a7a\u6cd5"},{"location":"algor/math/combinatorics/combination/#_11","text":"\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u548c OI-wiki \u4e00\u6837 \uff08OI-Wiki \u4e0a\u8fd9\u90e8\u5206\u662f \u6211 \u5199\u7684\uff0c\u53ef\u4ee5\u770b\u6211\u5f53\u65f6\u7684 Pull Request OI-wiki#4278 \uff09 \u63d2\u677f\u6cd5\uff08Stars and bars\uff09\u662f\u7528\u4e8e\u6c42\u4e00\u7c7b\u7ed9\u76f8\u540c\u5143\u7d20\u5206\u7ec4\u7684\u65b9\u6848\u6570\u7684\u4e00\u79cd\u6280\u5de7\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e8e\u6c42\u4e00\u7c7b\u7ebf\u6027\u4e0d\u5b9a\u65b9\u7a0b\u7684\u89e3\u7684\u7ec4\u6570\u3002","title":"\u63d2\u677f\u6cd5"},{"location":"algor/math/combinatorics/combination/#_12","text":"\u95ee\u9898\u4e00\uff1a\u73b0\u6709 \\(n\\) \u4e2a \u5b8c\u5168\u76f8\u540c \u7684\u5143\u7d20\uff0c\u8981\u6c42\u5c06\u5176\u5206\u4e3a \\(k\\) \u7ec4\uff0c\u4fdd\u8bc1\u6bcf\u7ec4\u81f3\u5c11\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u4e00\u5171\u6709\u591a\u5c11\u79cd\u5206\u6cd5\uff1f \u8003\u8651\u62ff \\(k - 1\\) \u5757\u677f\u5b50\u63d2\u5165\u5230 \\(n\\) \u4e2a\u5143\u7d20\u4e24\u4e24\u5f62\u6210\u7684 \\(n - 1\\) \u4e2a\u7a7a\u91cc\u9762\u3002 \u56e0\u4e3a\u5143\u7d20\u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u662f \\(\\dbinom{n - 1}{k - 1}\\) \u3002 \u672c\u8d28\u662f\u6c42 \\(x_1+x_2+\\cdots+x_k=n\\) \u7684\u6b63\u6574\u6570\u89e3\u7684\u7ec4\u6570\u3002","title":"\u6b63\u6574\u6570\u548c\u7684\u6570\u76ee"},{"location":"algor/math/combinatorics/combination/#_13","text":"\u95ee\u9898\u4e8c\uff1a\u5982\u679c\u95ee\u9898\u53d8\u5316\u4e00\u4e0b\uff0c\u6bcf\u7ec4\u5141\u8bb8\u4e3a\u7a7a\u5462\uff1f \u663e\u7136\u6b64\u65f6\u6ca1\u6cd5\u76f4\u63a5\u63d2\u677f\u4e86\uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u51fa\u73b0\u5f88\u591a\u5757\u677f\u5b50\u63d2\u5230\u4e00\u4e2a\u7a7a\u91cc\u9762\u7684\u60c5\u51b5\uff0c\u975e\u5e38\u4e0d\u597d\u8ba1\u7b97\u3002 \u6211\u4eec\u8003\u8651\u521b\u9020\u6761\u4ef6\u8f6c\u5316\u6210\u6709\u9650\u5236\u7684\u95ee\u9898\u4e00\uff0c\u5148\u501f \\(k\\) \u4e2a\u5143\u7d20\u8fc7\u6765\uff0c\u5728\u8fd9 \\(n + k\\) \u4e2a\u5143\u7d20\u5f62\u6210\u7684 \\(n + k - 1\\) \u4e2a\u7a7a\u91cc\u9762\u63d2\u677f\uff0c\u7b54\u6848\u4e3a \\[ \\dbinom{n + k - 1}{k - 1} = \\dbinom{n + k - 1}{n} \\] \u867d\u7136\u4e0d\u662f\u76f4\u63a5\u6c42\u7684\u539f\u95ee\u9898\uff0c\u4f46\u8fd9\u4e2a\u5f0f\u5b50\u5c31\u662f\u539f\u95ee\u9898\u7684\u7b54\u6848\uff0c\u53ef\u4ee5\u8fd9\u4e48\u7406\u89e3\uff1a \u5f00\u5934\u6211\u4eec\u501f\u6765\u4e86 \\(k\\) \u4e2a\u5143\u7d20\uff0c\u7528\u4e8e\u4fdd\u8bc1\u6bcf\u7ec4\u81f3\u5c11\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u63d2\u5b8c\u677f\u4e4b\u540e\u518d\u628a\u8fd9 \\(k\\) \u4e2a\u501f\u6765\u7684\u5143\u7d20\u4ece \\(k\\) \u7ec4\u91cc\u9762\u62ff\u8d70\u3002\u56e0\u4e3a\u5143\u7d20\u662f\u76f8\u540c\u7684\uff0c\u6240\u4ee5\u8f6c\u5316\u8fc7\u7684\u60c5\u51b5\u548c\u8f6c\u5316\u524d\u7684\u60c5\u51b5\u53ef\u4ee5\u4e00\u4e00\u5bf9\u5e94\uff0c\u7b54\u6848\u4e5f\u5c31\u662f\u76f8\u7b49\u7684\u3002 \u7531\u6b64\u53ef\u4ee5\u63a8\u5bfc\u51fa\u63d2\u677f\u6cd5\u7684\u516c\u5f0f\uff1a \\(\\dbinom{n + k - 1}{n}\\) \u3002 \u672c\u8d28\u662f\u6c42 \\(x_1+x_2+\\cdots+x_k=n\\) \u7684\u975e\u8d1f\u6574\u6570\u89e3\u7684\u7ec4\u6570\uff08\u5373\u8981\u6c42 \\(x_i \\ge 0\\) \uff09\u3002","title":"\u975e\u8d1f\u6574\u6570\u548c\u7684\u6570\u76ee"},{"location":"algor/math/combinatorics/combination/#_14","text":"\u95ee\u9898\u4e09\uff1a\u5982\u679c\u518d\u6269\u5c55\u4e00\u6b65\uff0c\u8981\u6c42\u5bf9\u4e8e\u7b2c \\(i\\) \u7ec4\uff0c\u81f3\u5c11\u8981\u5206\u5230 \\(a_i,\\sum a_i \\le n\\) \u4e2a\u5143\u7d20\u5462\uff1f \u672c\u8d28\u662f\u6c42 \\(x_1+x_2+\\cdots+x_k=n\\) \u7684\u89e3\u7684\u6570\u76ee\uff0c\u5176\u4e2d \\(x_i \\ge a_i\\) \u3002 \u7c7b\u6bd4\u65e0\u9650\u5236\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u501f \\(\\sum a_i\\) \u4e2a\u5143\u7d20\u8fc7\u6765\uff0c\u4fdd\u8bc1\u7b2c \\(i\\) \u7ec4\u81f3\u5c11\u80fd\u5206\u5230 \\(a_i\\) \u4e2a\u3002\u4e5f\u5c31\u662f\u4ee4 \\[ x_i^{\\prime}=x_i-a_i \\] \u5f97\u5230\u65b0\u65b9\u7a0b\uff1a \\[ \\begin{aligned} (x_1^{\\prime}+a_1)+(x_2^{\\prime}+a_2)+\\cdots+(x_k^{\\prime}+a_k)&=n\\\\ x_1^{\\prime}+x_2^{\\prime}+\\cdots+x_k^{\\prime}&=n-a_1-a_2-\\cdots-a_k\\\\ x_1^{\\prime}+x_2^{\\prime}+\\cdots+x_k^{\\prime}&=n-\\sum a_i \\end{aligned} \\] \u5176\u4e2d \\[ x_i^{\\prime}\\ge 0 \\] \u7136\u540e\u95ee\u9898\u4e09\u5c31\u8f6c\u5316\u6210\u4e86\u95ee\u9898\u4e8c\uff0c\u76f4\u63a5\u7528\u63d2\u677f\u6cd5\u516c\u5f0f\u5f97\u5230\u7b54\u6848\u4e3a \\[ \\dbinom{n + \\sum a_i - 1}{n} \\] \u4ee5\u4e0b\u6458\u5f55\u81ea OI-wiki \u3002","title":"\u4e0d\u540c\u4e0b\u754c\u6574\u6570\u548c\u7684\u6570\u76ee"},{"location":"algor/math/combinatorics/combination/#_15","text":"\\(n\\) \u4e2a\u4eba\u5168\u90e8\u6765\u56f4\u6210\u4e00\u5708\uff0c\u6240\u6709\u7684\u6392\u5217\u6570\u8bb0\u4e3a \\(\\mathrm Q_n^n\\) \u3002\u8003\u8651\u5176\u4e2d\u5df2\u7ecf\u6392\u597d\u7684\u4e00\u5708\uff0c\u4ece\u4e0d\u540c\u4f4d\u7f6e\u65ad\u5f00\uff0c\u53c8\u53d8\u6210\u4e0d\u540c\u7684\u961f\u5217\u3002 \u6240\u4ee5\u6709 \\[ \\mathrm Q_n^n \\times n = \\mathrm A_n^n \\Longrightarrow \\mathrm Q_n = \\frac{\\mathrm A_n^n}{n} = (n-1)! \\] \u7531\u6b64\u53ef\u77e5\u90e8\u5206\u5706\u6392\u5217\u7684\u516c\u5f0f\uff1a \\[ \\mathrm Q_n^r = \\frac{\\mathrm A_n^r}{r} = \\frac{n!}{r \\times (n-r)!} \\]","title":"\u5706\u6392\u5217"},{"location":"algor/math/combinatorics/combination/#_16","text":"\\(1 \\sim n\\) \u8fd9 \\(n\\) \u4e2a\u81ea\u7136\u6570\u4e2d\u9009 \\(k\\) \u4e2a\uff0c\u8fd9 \\(k\\) \u4e2a\u6570\u4e2d\u4efb\u4f55\u4e24\u4e2a\u6570\u90fd\u4e0d\u76f8\u90bb\u7684\u7ec4\u5408\u6709 \\(\\dbinom {n-k+1}{k}\\) \u79cd\u3002","title":"\u4e0d\u76f8\u90bb\u6392\u5217"},{"location":"algor/math/combinatorics/combination/#_17","text":"\u8bf7\u5927\u5bb6\u4e00\u5b9a\u8981\u533a\u5206 \u591a\u91cd\u7ec4\u5408\u6570 \u4e0e \u591a\u91cd\u96c6\u7684\u7ec4\u5408\u6570 \uff01\u4e24\u8005\u662f\u5b8c\u5168\u4e0d\u540c\u7684\u6982\u5ff5\uff01 \u591a\u91cd\u96c6\u662f\u6307\u5305\u542b\u91cd\u590d\u5143\u7d20\u7684\u5e7f\u4e49\u96c6\u5408\u3002\u8bbe \\(S=\\{n_1\\cdot a_1,n_2\\cdot a_2,\\cdots,n_k\\cdot a_k\\}\\) \u8868\u793a\u7531 \\(n_1\\) \u4e2a \\(a_1\\) \uff0c \\(n_2\\) \u4e2a \\(a_2\\) \uff0c\u2026\uff0c \\(n_k\\) \u4e2a \\(a_k\\) \u7ec4\u6210\u7684\u591a\u91cd\u96c6\uff0c \\(S\\) \u7684\u5168\u6392\u5217\u4e2a\u6570\u4e3a \\[ \\frac{n!}{\\prod_{i=1}^kn_i!}=\\frac{n!}{n_1!n_2!\\cdots n_k!} \\] \u76f8\u5f53\u4e8e\u628a\u76f8\u540c\u5143\u7d20\u7684\u6392\u5217\u6570\u9664\u6389\u4e86\u3002\u5177\u4f53\u5730\uff0c\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u4f60\u6709 \\(k\\) \u79cd\u4e0d\u4e00\u6837\u7684\u7403\uff0c\u6bcf\u79cd\u7403\u7684\u4e2a\u6570\u5206\u522b\u662f \\(n_1,n_2,\\cdots,n_k\\) \uff0c\u4e14 \\(n=n_1+n_2+\\ldots+n_k\\) \u3002\u8fd9 \\(n\\) \u4e2a\u7403\u7684\u5168\u6392\u5217\u6570\u5c31\u662f \u591a\u91cd\u96c6\u7684\u6392\u5217\u6570 \u3002\u591a\u91cd\u96c6\u7684\u6392\u5217\u6570\u5e38\u88ab\u79f0\u4f5c \u591a\u91cd\u7ec4\u5408\u6570 \u3002\u6211\u4eec\u53ef\u4ee5\u7528\u591a\u91cd\u7ec4\u5408\u6570\u7684\u7b26\u53f7\u8868\u793a\u4e0a\u5f0f\uff1a \\[ \\dbinom{n}{n_1,n_2,\\cdots,n_k}=\\frac{n!}{\\prod_{i=1}^kn_i!} \\] \u53ef\u4ee5\u770b\u51fa\uff0c \\(\\dbinom{n}{m}\\) \u7b49\u4ef7\u4e8e \\(\\dbinom{n}{m,n-m}\\) \uff0c\u53ea\u4e0d\u8fc7\u540e\u8005\u8f83\u4e3a\u7e41\u7410\uff0c\u56e0\u800c\u4e0d\u91c7\u7528\u3002","title":"\u591a\u91cd\u96c6\u7684\u6392\u5217\u6570 | \u591a\u91cd\u7ec4\u5408\u6570"},{"location":"algor/math/combinatorics/combination/#1","text":"\u8bbe \\(S=\\{n_1\\cdot a_1,n_2\\cdot a_2,\\cdots,n_k\\cdot a_k\\}\\) \u8868\u793a\u7531 \\(n_1\\) \u4e2a \\(a_1\\) \uff0c \\(n_2\\) \u4e2a \\(a_2\\) \uff0c\u2026\uff0c \\(n_k\\) \u4e2a \\(a_k\\) \u7ec4\u6210\u7684\u591a\u91cd\u96c6\u3002\u90a3\u4e48\u5bf9\u4e8e\u6574\u6570 \\(r(r<n_i,\\forall i\\in[1,k])\\) \uff0c\u4ece \\(S\\) \u4e2d\u9009\u62e9 \\(r\\) \u4e2a\u5143\u7d20\u7ec4\u6210\u4e00\u4e2a\u591a\u91cd\u96c6\u7684\u65b9\u6848\u6570\u5c31\u662f \u591a\u91cd\u96c6\u7684\u7ec4\u5408\u6570 \u3002\u8fd9\u4e2a\u95ee\u9898\u7b49\u4ef7\u4e8e \\(x_1+x_2+\\cdots+x_k=r\\) \u7684\u975e\u8d1f\u6574\u6570\u89e3\u7684\u6570\u76ee\uff0c\u53ef\u4ee5\u7528\u63d2\u677f\u6cd5\u89e3\u51b3\uff0c\u7b54\u6848\u4e3a \\[ \\dbinom{r+k-1}{k-1} \\]","title":"\u591a\u91cd\u96c6\u7684\u7ec4\u5408\u6570 1"},{"location":"algor/math/combinatorics/combination/#2","text":"\u8003\u8651\u8fd9\u4e2a\u95ee\u9898\uff1a\u8bbe \\(S=\\{n_1\\cdot a_1,n_2\\cdot a_2,\\cdots,n_k\\cdot a_k,\\}\\) \u8868\u793a\u7531 \\(n_1\\) \u4e2a \\(a_1\\) \uff0c \\(n_2\\) \u4e2a \\(a_2\\) \uff0c\u2026\uff0c \\(n_k\\) \u4e2a \\(a_k\\) \u7ec4\u6210\u7684\u591a\u91cd\u96c6\u3002\u90a3\u4e48\u5bf9\u4e8e\u6b63\u6574\u6570 \\(r\\) \uff0c\u4ece \\(S\\) \u4e2d\u9009\u62e9 \\(r\\) \u4e2a\u5143\u7d20\u7ec4\u6210\u4e00\u4e2a\u591a\u91cd\u96c6\u7684\u65b9\u6848\u6570\u3002 \u8fd9\u6837\u5c31\u9650\u5236\u4e86\u6bcf\u79cd\u5143\u7d20\u7684\u53d6\u7684\u4e2a\u6570\u3002\u540c\u6837\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u95ee\u9898\u8f6c\u5316\u4e3a\u5e26\u9650\u5236\u7684\u7ebf\u6027\u65b9\u7a0b\u6c42\u89e3\uff1a \\[ \\forall i\\in [1,k],\\ x_i\\le n_i,\\ \\sum_{i=1}^kx_i=r \\] \u4e8e\u662f\u5f88\u81ea\u7136\u5730\u60f3\u5230\u4e86\u5bb9\u65a5\u539f\u7406\u3002\u5bb9\u65a5\u7684\u6a21\u578b\u5982\u4e0b\uff1a \u5168\u96c6\uff1a \\(\\displaystyle \\sum_{i=1}^kx_i=r\\) \u7684\u975e\u8d1f\u6574\u6570\u89e3\u3002 \u5c5e\u6027\uff1a \\(x_i\\le n_i\\) \u3002 \u4e8e\u662f\u8bbe\u6ee1\u8db3\u5c5e\u6027 \\(i\\) \u7684\u96c6\u5408\u662f \\(S_i\\) \uff0c \\(\\overline{S_i}\\) \u8868\u793a\u4e0d\u6ee1\u8db3\u5c5e\u6027 \\(i\\) \u7684\u96c6\u5408\uff0c\u5373\u6ee1\u8db3 \\(x_i\\ge n_i+1\\) \u7684\u96c6\u5408\uff08\u8f6c\u5316\u4e3a\u4e0a\u9762\u63d2\u677f\u6cd5\u7684\u95ee\u9898\u4e09\uff09\u3002\u90a3\u4e48\u7b54\u6848\u5373\u4e3a \\[ \\left|\\bigcap_{i=1}^kS_i\\right|=|U|-\\left|\\bigcup_{i=1}^k\\overline{S_i}\\right| \\] \u6839\u636e\u5bb9\u65a5\u539f\u7406\uff0c\u6709\uff1a \\[ \\begin{aligned} \\left|\\bigcup_{i=1}^k\\overline{S_i}\\right| =&\\sum_i\\left|\\overline{S_i}\\right| -\\sum_{i,j}\\left|\\overline{S_i}\\cap\\overline{S_j}\\right| +\\sum_{i,j,k}\\left|\\overline{S_i}\\cap\\overline{S_j}\\cap\\overline{S_k}\\right| -\\cdots\\\\ &+(-1)^{k-1}\\left|\\bigcap_{i=1}^k\\overline{S_i}\\right|\\\\ =&\\sum_i\\dbinom{k+r-n_i-2}{k-1} -\\sum_{i,j}\\dbinom{k+r-n_i-n_j-3}{k-1}+\\sum_{i,j,k}\\dbinom{k+r-n_i-n_j-n_k-4}{k-1} -\\cdots\\\\ &+(-1)^{k-1}\\dbinom{k+r-\\sum_{i=1}^kn_i-k-1}{k-1} \\end{aligned} \\] \u62ff\u5168\u96c6 \\(\\displaystyle |U|=\\dbinom{k+r-1}{k-1}\\) \u51cf\u53bb\u4e0a\u5f0f\uff0c\u5f97\u5230\u591a\u91cd\u96c6\u7684\u7ec4\u5408\u6570 \\[ Ans=\\sum_{p=0}^k(-1)^p\\sum_{A}\\dbinom{k+r-1-\\sum_{A} n_{A_i}-p}{k-1} \\] \u5176\u4e2d A \u662f\u5145\u5f53\u679a\u4e3e\u5b50\u96c6\u7684\u4f5c\u7528\uff0c\u6ee1\u8db3 \\(|A|=p,\\ A_i<A_{i+1}\\) \u3002","title":"\u591a\u91cd\u96c6\u7684\u7ec4\u5408\u6570 2"},{"location":"algor/math/combinatorics/inclusion-exclusion-principle-old/","text":"\u90e8\u5206\u5185\u5bb9\u6458\u5f55\u81ea OI-Wiki \u6211\u8fd9\u91cc Mathjax \u4e0d\u4f1a\u663e\u793a \\overline \uff0c\u6240\u4ee5\u7528\u4e86 \\overrightarrow \u4ee3\u66ff\u3002 \u5bb9\u65a5\u539f\u7406 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8bbe U \u4e2d\u5143\u7d20\u6709 n \u79cd\u4e0d\u540c\u7684\u5c5e\u6027\uff0c\u800c\u7b2c i \u79cd\u5c5e\u6027\u79f0\u4e3a \\(P_i\\) \uff0c\u62e5\u6709\u5c5e\u6027 \\(P_i\\) \u7684\u5143\u7d20\u6784\u6210\u96c6\u5408 \\(S_i\\) \uff0c\u90a3\u4e48 \\[ \\begin{split} \\left|\\bigcup_{i=1}^{n}S_i\\right|=&\\sum_{i}|S_i|-\\sum_{i<j}|S_i\\cap S_j|+\\sum_{i<j<k}|S_i\\cap S_j\\cap S_k|-\\cdots\\\\ &+(-1)^{m-1}\\sum_{a_i<a_{i+1} }\\left|\\bigcap_{i=1}^{m}S_{a_i}\\right|+\\cdots+(-1)^{n-1}|S_1\\cap\\cdots\\cap S_n| \\end{split} \\] \u5373 \\[ \\left|\\bigcup_{i=1}^{n}S_i\\right|=\\sum_{m=1}^n(-1)^{m-1}\\sum_{a_i<a_{i+1} }\\left|\\bigcap_{i=1}^mS_{a_i}\\right| \\] \\(a_i\\) \u662f\u7528\u6765\u679a\u4e3e\u96c6\u5408\u7684\u3002 \u8bc1\u660e \u03c8(\uff40\u2207\u00b4)\u03c8 \u5bf9\u4e8e\u6bcf\u4e2a\u5143\u7d20\u4f7f\u7528\u4e8c\u9879\u5f0f\u5b9a\u7406\u8ba1\u7b97\u5176\u51fa\u73b0\u7684\u6b21\u6570\u3002\u5bf9\u4e8e\u5143\u7d20 x\uff0c\u5047\u8bbe\u5b83\u51fa\u73b0\u5728 \\(T_1,T_2,\\cdots,T_m\\) \u7684\u96c6\u5408\u4e2d\uff0c\u90a3\u4e48\u5b83\u7684\u51fa\u73b0\u6b21\u6570\u4e3a \\[ \\begin{split} Cnt=&|\\{T_i\\}|-|\\{T_i\\cap T_j|i<j\\}|+\\cdots+(-1)^{k-1}\\left|\\left\\{\\bigcap_{i=1}^{k}T_{a_i}|a_i<a_{i+1}\\right\\}\\right|\\\\ &+\\cdots+(-1)^{m-1}|\\{T_1\\cap\\cdots\\cap T_m\\}|\\\\ =&C_m^1-C_m^2+\\cdots+(-1)^{m-1}C_m^m\\\\ =&C_m^0-\\sum_{i=0}^m(-1)^iC_m^i\\\\ =&1-(1-1)^m=1 \\end{split} \\] \u4e8e\u662f\u6bcf\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\u4e3a 1\uff0c\u90a3\u4e48\u5408\u5e76\u8d77\u6765\u5c31\u662f\u5e76\u96c6\u3002\u8bc1\u6bd5\u3002 \u8865\u96c6 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5bf9\u4e8e\u5168\u96c6 U \u4e0b\u7684 \u96c6\u5408\u7684\u5e76 \u53ef\u4ee5\u4f7f\u7528\u5bb9\u65a5\u539f\u7406\u8ba1\u7b97\uff0c\u800c\u96c6\u5408\u7684\u4ea4\u5219\u7528\u5168\u96c6\u51cf\u53bb \u8865\u96c6\u7684\u5e76\u96c6 \u6c42\u5f97\uff1a \\[ \\left|\\bigcap_{i=1}^{n}S_i\\right|=|U|-\\left|\\bigcup_{i=1}^n\\overrightarrow{S_i}\\right| \\] \u53f3\u8fb9\u4f7f\u7528\u5bb9\u65a5\u5373\u53ef\u3002 \u5e94\u7528 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e0d\u5b9a\u65b9\u7a0b\u975e\u8d1f\u6574\u6570\u89e3\u8ba1\u6570 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u51fa\u4e0d\u5b9a\u65b9\u7a0b \\(\\sum_{i=1}^nx_i=m\\) \u548c \\(n\\) \u4e2a\u9650\u5236\u6761\u4ef6 \\(x_i\\leq b_i\\) \uff0c\u5176\u4e2d \\(m,b_i \\in \\mathbb{N}\\) . \u6c42\u65b9\u7a0b\u7684\u975e\u8d1f\u6574\u6570\u89e3\u7684\u4e2a\u6570\u3002 \u6ca1\u6709\u9650\u5236\u65f6 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5982\u679c\u6ca1\u6709 \\(x_i<b_i\\) \u7684\u9650\u5236\uff0c\u90a3\u4e48\u4e0d\u5b9a\u65b9\u7a0b \\(\\sum_{i=1}^nx_i=m\\) \u7684\u975e\u8d1f\u6574\u6570\u89e3\u7684\u6570\u76ee\u4e3a \\(C_{m+n-1}^{n-1}\\) . \u7565\u8bc1\uff1a\u63d2\u677f\u6cd5\u3002 \u76f8\u5f53\u4e8e\u4f60\u6709 \\(m\\) \u4e2a\u7403\u8981\u5206\u7ed9 \\(n\\) \u4e2a\u76d2\u5b50\uff0c\u5141\u8bb8\u67d0\u4e2a\u76d2\u5b50\u662f\u7a7a\u7684\u3002\u8fd9\u4e2a\u95ee\u9898\u4e0d\u80fd\u76f4\u63a5\u7528\u7ec4\u5408\u6570\u89e3\u51b3\u3002 \u4e8e\u662f\u6211\u4eec\u518d\u52a0\u5165 \\(n-1\\) \u4e2a\u7403\uff0c\u4e8e\u662f\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u5728\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(m+n-1\\) \u7684\u7403\u5e8f\u5217\u4e2d\u9009\u62e9 \\(n-1\\) \u4e2a\u7403\uff0c\u7136\u540e\u8fd9\u4e2a \\(n-1\\) \u4e2a\u7403\u628a\u8fd9\u4e2a\u5e8f\u5217\u9694\u6210\u4e86 \\(n\\) \u4efd\uff0c\u6070\u597d\u53ef\u4ee5\u4e00\u4e00\u5bf9\u5e94\u653e\u5230 \\(n\\) \u4e2a\u76d2\u5b50\u4e2d\u3002\u90a3\u4e48\u5728 \\(m+n-1\\) \u4e2a\u7403\u4e2d\u9009\u62e9 \\(n-1\\) \u4e2a\u7403\u7684\u65b9\u6848\u6570\u5c31\u662f \\(C_{m+n-1}^{n-1}\\) \u3002 \u5bb9\u65a5\u6a21\u578b \u03c8(\uff40\u2207\u00b4)\u03c8 \u63a5\u7740\u6211\u4eec\u5c1d\u8bd5\u62bd\u8c61\u51fa\u5bb9\u65a5\u539f\u7406\u7684\u6a21\u578b\uff1a \u5168\u96c6 U\uff1a\u4e0d\u5b9a\u65b9\u7a0b \\(\\sum_{i=1}^nx_i=m\\) \u7684\u975e\u8d1f\u6574\u6570\u89e3 \u5143\u7d20\uff1a\u53d8\u91cf \\(x_i\\) . \u5c5e\u6027\uff1a \\(x_i\\) \u7684\u5c5e\u6027\u5373 \\(x_i\\) \u6ee1\u8db3\u7684\u6761\u4ef6\uff0c\u5373 \\(x_i\\leq b_i\\) \u7684\u6761\u4ef6 \u76ee\u6807\uff1a\u6240\u6709\u53d8\u91cf\u6ee1\u8db3\u5bf9\u5e94\u5c5e\u6027\u65f6\u96c6\u5408\u7684\u5927\u5c0f\uff0c\u5373 \\(|\\bigcap_{i=1}^nS_i|\\) . \u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u7528 \\(\\left|\\bigcap_{i=1}^{n}S_i\\right|=|U|-\\left|\\bigcup_{i=1}^n\\overrightarrow{S_i}\\right|\\) \u6c42\u89e3\u3002 \\(|U|\\) \u53ef\u4ee5\u7528\u7ec4\u5408\u6570\u8ba1\u7b97\uff0c\u540e\u534a\u90e8\u5206\u81ea\u7136\u4f7f\u7528\u5bb9\u65a5\u539f\u7406\u5c55\u5f00\u3002 \u90a3\u4e48\u95ee\u9898\u53d8\u6210\uff0c\u5bf9\u4e8e\u4e00\u4e9b \\(\\overrightarrow{S_{a_i}}\\) \u7684\u4ea4\u96c6\u6c42\u5927\u5c0f\u3002\u8003\u8651 \\(\\overrightarrow{S_{a_i} }\\) \u7684\u542b\u4e49\uff0c\u8868\u793a \\(x_{a_i}\\geq b_{a_i}+1\\) \u7684\u89e3\u7684\u6570\u76ee\u3002\u800c\u4ea4\u96c6\u8868\u793a\u540c\u65f6\u6ee1\u8db3\u8fd9\u4e9b\u6761\u4ef6\u3002\u56e0\u6b64\u8fd9\u4e2a\u4ea4\u96c6\u5bf9\u5e94\u7684\u4e0d\u5b9a\u65b9\u7a0b\u4e2d\uff0c\u6709\u4e9b\u53d8\u91cf\u6709 \u4e0b\u754c\u9650\u5236 \uff0c\u800c\u6709\u4e9b\u5219\u6ca1\u6709\u9650\u5236\u3002 \u80fd\u5426\u6d88\u9664\u8fd9\u4e9b\u4e0b\u754c\u9650\u5236\u5462\uff1f\u65e2\u7136\u8981\u6c42\u7684\u662f\u975e\u8d1f\u6574\u6570\u89e3\uff0c\u800c\u6709\u4e9b\u53d8\u91cf\u7684\u4e0b\u754c\u53c8\u5927\u4e8e \\(0\\) \uff0c\u90a3\u4e48\u6211\u4eec\u76f4\u63a5 \u628a\u8fd9\u4e2a\u4e0b\u754c\u51cf\u6389 \uff0c\u5c31\u53ef\u4ee5\u4f7f\u5f97\u8fd9\u4e9b\u53d8\u91cf\u7684\u4e0b\u754c\u53d8\u6210 \\(0\\) \uff0c\u5373\u6ca1\u6709\u4e0b\u754c\u5566\u3002\u56e0\u6b64\u5bf9\u4e8e \\[ \\left|\\bigcap_{a_i<a_{i+1} }^{1\\leq i\\leq k}S_{a_i}\\right| \\] \u7684\u4e0d\u5b9a\u65b9\u7a0b\u5f62\u5f0f\u4e3a \\[ \\sum_{i=1}^nx_i=m-\\sum_{i=1}^k(b_{a_i}+1) \\] \u4e8e\u662f\u8fd9\u4e2a\u4e5f\u53ef\u4ee5\u7ec4\u5408\u6570\u8ba1\u7b97\u5566\u3002\u8fd9\u4e2a\u957f\u5ea6\u4e3a \\(k\\) \u7684 \\(a\\) \u6570\u7ec4\u76f8\u5f53\u4e8e\u5728\u679a\u4e3e\u5b50\u96c6\u3002 CF997C Sky Full of Stars \u03c8(\uff40\u2207\u00b4)\u03c8 \u6709\u4e00\u4e2a \\(n\\times n\\) \u7684\u6b63\u65b9\u5f62\u7f51\u683c\uff0c\u6bcf\u4e2a\u7f51\u683c\u7528 RGB \u4e09\u79cd\u989c\u8272\u67d3\u8272 \u6c42\u6709\u591a\u5c11\u79cd\u65b9\u6848\u4f7f\u5f97\u81f3\u5c11\u6709\u4e00\u884c\u6216\u8005\u4e00\u5217\u7684\u989c\u8272\u5b8c\u5168\u4e00\u81f4\uff0c\u6a21 \\(998244353\\) \u3002 \\(n \\le 1e6\\) \u3002 \u6211\u4eec\u8003\u8651\u62bd\u8c61\u51fa\u5bb9\u65a5\u7684\u6a21\u578b\uff1a \u5168\u96c6 U \uff1a\u6240\u6709\u53ef\u80fd\u7684\u67d3\u8272\u65b9\u5f0f\uff0c\u65b9\u6848\u6570\u662f \\(3^{n\\times n}\\) \u3002 \u5143\u7d20 \uff1a \u67d3\u8272\u65b9\u5f0f \u3002 \u5c5e\u6027\uff1a\uff08\u66f4\u597d\u7684\u7406\u89e3\u662f\u201c\u4e00\u79cd\u9650\u5236/\u6761\u4ef6\u201d\uff09\u4e00\u884c\u6216\u8005\u4e00\u5217\u6d82\u7684\u989c\u8272\u5b8c\u5168\u76f8\u540c\u3002 \u53d1\u73b0\u5c5e\u6027\u672c\u8d28\u4e0a\u5c31\u662f \\(2n\\) \u4e2a\u9650\u5236\uff0c\u4e5f\u5c31\u662f\u7b2c \\(i\\) \u884c\u5168\u76f8\u540c\uff0c\u7b2c \\(i\\) \u5217\u5168\u76f8\u540c\u8fd9\u6837\u7684 \\(2n\\) \u4e2a\u6761\u4ef6\u3002 \u8981\u6c42\u7684\u4e1c\u897f\u662f\u81f3\u5c11\u6709\u4e00\u884c\u6216\u8005\u4e00\u5217\u7684\u9650\u5236/\u6761\u4ef6\u88ab\u6ee1\u8db3\u7684\u65b9\u6848\u6570\u3002 \u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u5982\u679c\u8bbe \\(S_i\\) \u8868\u793a\u6240\u6709\u6ee1\u8db3\u7b2c \\(i\\) \u4e2a\u5c5e\u6027/\u9650\u5236\u7684\u67d3\u8272\u65b9\u6848\u6784\u6210\u7684\u96c6\u5408\uff0c \u663e\u7136\u4e0d\u80fd\u76f4\u63a5\u628a\u6240\u6709 \\(|S_i|\\) \u76f8\u52a0\uff0c\u80af\u5b9a\u4f1a\u7b97\u91cd\uff0c\u90a3\u4e48\u8003\u8651\u5bb9\u65a5\uff0c\u8981\u6c42\u7684\u7b54\u6848\u5c31\u662f \\(|\\bigcup S_i|\\) \u3002 \u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u7c7b\u6bd4\u6700\u7b80\u5355\u7684\u5bb9\u65a5\uff0c\u7c7b\u4f3c\u6c42 \\(100\\) \u4ee5\u5185\u6709\u591a\u5c11\u6570\u81f3\u5c11\u542b\u6709 \\(2,3,5\\) \u5176\u4e2d\u4e00\u4e2a\u56e0\u6570\u3002 \u5199\u51fa\u6765\u5c31\u662f\uff1a \\[ ans = \\sum\\limits_{S \\not= \\emptyset}(-1)^{|S| - 1} f(S) \\] \u5176\u4e2d \\(S\\) \u8868\u793a\u82e5\u5e72\u4e2a \\(S_i\\) \u7684\u4ea4\uff0c \\(f(S)\\) \u8868\u793a\u8fd9\u79cd\u60c5\u51b5\u7684\u8d21\u732e\u3002 \u8003\u8651 \\(S\\) \u8868\u793a\u6709\u67d0 \\(i\\) \u884c\uff0c\u67d0 \\(j\\) \u5217\u662f\u76f8\u540c\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u53ef\u4ee5\u53d1\u73b0\uff0c\u9009\u51fa\u6765\u7684\u8fd9 \\(i\\) \u884c \\(j\\) \u5217\u7684\u989c\u8272\u90fd\u662f\u4e00\u6837\u7684\u3002 \u6211\u4eec\u73b0\u5728\u5c31\u76f8\u5f53\u4e8e \u5f3a\u5236 \u8fd9 \\(i\\) \u884c \\(j\\) \u5217\u662f\u540c\u4e00\u79cd\u989c\u8272\uff0c\u5269\u4e0b\u7684 \\((n - i)(n - j)\\) \u4e2a\u683c\u5b50\u5c31\u968f\u4fbf\u9009\uff08\u5c31\u7b97\u53c8\u6709\u65b0\u7684\u76f8\u7b49\u7684\u4e5f\u4e0d\u7ba1\uff0c\u56e0\u4e3a\u8fd9\u91cc\u662f\u5f3a\u5236\uff0c\u4e5f\u5c31\u662f\u53ea\u8003\u8651\u88ab\u9650\u5236\u7684\u90e8\u5206\uff0c\u5176\u4ed6\u7684\u90e8\u5206\u90fd\u76f4\u63a5\u5bb9\u65a5\u6389\u4e86\uff09\u3002 \u56e0\u4e3a \\(i\\) \u884c \\(j\\) \u5217\u662f\u53ef\u4ee5\u4efb\u610f\u9009\u7684\uff08\u8fd9\u91cc\u53ea\u662f\u8003\u8651\u67d0\u4e2a\u56fa\u5b9a\u72b6\u6001\uff09\uff0c\u90a3\u4e48 \\(f(S)\\) \u5c31\u662f \\(\\dbinom{n}{i}\\dbinom{n}{j}3^{1 + (n - i)(i - j)}\\) \u53ef\u4ee5\u5f97\u77e5\uff1a \\[ \\begin{aligned} ans &= \\sum\\limits_{i \\not = 0 \\lor j \\not=0} \\dbinom{n}{i}\\dbinom{n}{j}(-1)^{i + j - 1} f(i,j) \\\\ &= 3\\sum\\limits_{i \\not = 0 \\lor j \\not = 0} \\dbinom{n}{i} \\dbinom{n}{j} (-1)^{i + j - 1} 3^{i + j} \\end{aligned} \\] \u8003\u8651\u679a\u4e3e \\(i\\) \uff0c\u628a\u5f0f\u5b50\u62c6\u5f00\uff1a \\[ \\begin{aligned} ans= 3\\sum\\limits_{i > 0} \\ [\\ \\dbinom{n}{i}(-1)^i \\sum\\limits_{j > 0} \\ [\\dbinom{n}{j} (-1)^j 3^{(n - i)(n - j)}\\ ]\\ ] \\end{aligned} \\] \u540e\u9762\u90a3\u5768\u770b\u8d77\u6765\u50cf\u4e8c\u9879\u5f0f\u5b9a\u7406\uff0c\u628a \\(j=0\\) \u8865\u4e0a\u4e4b\u540e\u51cf\u53bb\u518d\u7528\u4e8c\u9879\u5f0f\u5b9a\u7406\uff1a \\[ ans = 3\\sum\\limits_{i > 0}\\ [\\ \\dbinom{n}{i}(-1)^i([3^{n - i} - 1]^n - 3^{(n - i)n})\\ ] \\] \u7136\u540e\u5c31\u53ef\u4ee5 \\(O(n \\log n)\\) \u505a\u4e86\u3002 \u4ee3\u7801\u5b9e\u73b0\u6709\u51e0\u4e2a\u7ec6\u8282\uff0c\u6ce8\u610f\u51cf\u6cd5\u4e4b\u540e\u8981\u52a0mod\uff0c\u7136\u540e\u5c3d\u91cf\u7528 i64 \u505a\u8fd0\u7b97\u907f\u514d\u5fd8\u8bb0\u4e58 1ll\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 // author : black_trees #include <cmath> #include <cstdio> #include <vector> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; using i64 = long long ; const i64 si = 1e6 + 10 ; const i64 mod = 998244353 ; i64 n ; i64 inv [ si ], fact [ si ], invf [ si ]; void init ( i64 n ) { inv [ 1 ] = 1 , fact [ 0 ] = invf [ 0 ] = 1 ; for ( i64 i = 2 ; i <= n ; ++ i ) inv [ i ] = 1l l * ( mod - mod / i ) * inv [ mod % i ] % mod ; for ( i64 i = 1 ; i <= n ; ++ i ) fact [ i ] = 1l l * fact [ i - 1 ] * i % mod , invf [ i ] = 1l l * invf [ i - 1 ] * inv [ i ] % mod ; } i64 C ( i64 n , i64 m ) { if ( m < 0 || n < m ) return 0 ; return 1l l * fact [ n ] * invf [ n - m ] % mod * invf [ m ] % mod ; } i64 Qpow ( i64 a , i64 b ) { i64 ret = 1 % mod ; for (; b ; b >>= 1 ) { if ( b & 1 ) ret = ret * a % mod ; a = a * a % mod ; } return ret % mod ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); i64 ans = 0 , sum = 0 ; cin >> n , init ( n ); for ( i64 i = 1 ; i <= n ; i ++ ) ans = ( ans + Qpow ( 3l l , ( 1l l * n * ( n - i ) + i )) * Qpow ( -1ll , i + 1l l ) * C ( n , i ) % mod + mod ) % mod ; ans = ans * 2l l % mod ; i64 tmp = 0 ; for ( i64 i = 0 ; i < n ; i ++ ) { i64 t = - Qpow ( 3l l , i ); tmp = ( tmp + C ( n , i ) * Qpow ( -1 , i + 1l l ) * ( Qpow ( 1 + t , n ) - Qpow ( t , n ) + mod ) % mod + mod ) % mod ; } ans = ( ans + tmp * 3 ) % mod ; cout << ans % mod << endl ; return 0 ; }","title":"Inclusion exclusion principle old"},{"location":"algor/math/combinatorics/inclusion-exclusion-principle-old/#_1","text":"\u8bbe U \u4e2d\u5143\u7d20\u6709 n \u79cd\u4e0d\u540c\u7684\u5c5e\u6027\uff0c\u800c\u7b2c i \u79cd\u5c5e\u6027\u79f0\u4e3a \\(P_i\\) \uff0c\u62e5\u6709\u5c5e\u6027 \\(P_i\\) \u7684\u5143\u7d20\u6784\u6210\u96c6\u5408 \\(S_i\\) \uff0c\u90a3\u4e48 \\[ \\begin{split} \\left|\\bigcup_{i=1}^{n}S_i\\right|=&\\sum_{i}|S_i|-\\sum_{i<j}|S_i\\cap S_j|+\\sum_{i<j<k}|S_i\\cap S_j\\cap S_k|-\\cdots\\\\ &+(-1)^{m-1}\\sum_{a_i<a_{i+1} }\\left|\\bigcap_{i=1}^{m}S_{a_i}\\right|+\\cdots+(-1)^{n-1}|S_1\\cap\\cdots\\cap S_n| \\end{split} \\] \u5373 \\[ \\left|\\bigcup_{i=1}^{n}S_i\\right|=\\sum_{m=1}^n(-1)^{m-1}\\sum_{a_i<a_{i+1} }\\left|\\bigcap_{i=1}^mS_{a_i}\\right| \\] \\(a_i\\) \u662f\u7528\u6765\u679a\u4e3e\u96c6\u5408\u7684\u3002","title":"\u5bb9\u65a5\u539f\u7406"},{"location":"algor/math/combinatorics/inclusion-exclusion-principle-old/#_2","text":"\u5bf9\u4e8e\u6bcf\u4e2a\u5143\u7d20\u4f7f\u7528\u4e8c\u9879\u5f0f\u5b9a\u7406\u8ba1\u7b97\u5176\u51fa\u73b0\u7684\u6b21\u6570\u3002\u5bf9\u4e8e\u5143\u7d20 x\uff0c\u5047\u8bbe\u5b83\u51fa\u73b0\u5728 \\(T_1,T_2,\\cdots,T_m\\) \u7684\u96c6\u5408\u4e2d\uff0c\u90a3\u4e48\u5b83\u7684\u51fa\u73b0\u6b21\u6570\u4e3a \\[ \\begin{split} Cnt=&|\\{T_i\\}|-|\\{T_i\\cap T_j|i<j\\}|+\\cdots+(-1)^{k-1}\\left|\\left\\{\\bigcap_{i=1}^{k}T_{a_i}|a_i<a_{i+1}\\right\\}\\right|\\\\ &+\\cdots+(-1)^{m-1}|\\{T_1\\cap\\cdots\\cap T_m\\}|\\\\ =&C_m^1-C_m^2+\\cdots+(-1)^{m-1}C_m^m\\\\ =&C_m^0-\\sum_{i=0}^m(-1)^iC_m^i\\\\ =&1-(1-1)^m=1 \\end{split} \\] \u4e8e\u662f\u6bcf\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\u4e3a 1\uff0c\u90a3\u4e48\u5408\u5e76\u8d77\u6765\u5c31\u662f\u5e76\u96c6\u3002\u8bc1\u6bd5\u3002","title":"\u8bc1\u660e"},{"location":"algor/math/combinatorics/inclusion-exclusion-principle-old/#_3","text":"\u5bf9\u4e8e\u5168\u96c6 U \u4e0b\u7684 \u96c6\u5408\u7684\u5e76 \u53ef\u4ee5\u4f7f\u7528\u5bb9\u65a5\u539f\u7406\u8ba1\u7b97\uff0c\u800c\u96c6\u5408\u7684\u4ea4\u5219\u7528\u5168\u96c6\u51cf\u53bb \u8865\u96c6\u7684\u5e76\u96c6 \u6c42\u5f97\uff1a \\[ \\left|\\bigcap_{i=1}^{n}S_i\\right|=|U|-\\left|\\bigcup_{i=1}^n\\overrightarrow{S_i}\\right| \\] \u53f3\u8fb9\u4f7f\u7528\u5bb9\u65a5\u5373\u53ef\u3002","title":"\u8865\u96c6"},{"location":"algor/math/combinatorics/inclusion-exclusion-principle-old/#_4","text":"","title":"\u5e94\u7528"},{"location":"algor/math/combinatorics/inclusion-exclusion-principle-old/#_5","text":"\u7ed9\u51fa\u4e0d\u5b9a\u65b9\u7a0b \\(\\sum_{i=1}^nx_i=m\\) \u548c \\(n\\) \u4e2a\u9650\u5236\u6761\u4ef6 \\(x_i\\leq b_i\\) \uff0c\u5176\u4e2d \\(m,b_i \\in \\mathbb{N}\\) . \u6c42\u65b9\u7a0b\u7684\u975e\u8d1f\u6574\u6570\u89e3\u7684\u4e2a\u6570\u3002","title":"\u4e0d\u5b9a\u65b9\u7a0b\u975e\u8d1f\u6574\u6570\u89e3\u8ba1\u6570"},{"location":"algor/math/combinatorics/inclusion-exclusion-principle-old/#_6","text":"\u5982\u679c\u6ca1\u6709 \\(x_i<b_i\\) \u7684\u9650\u5236\uff0c\u90a3\u4e48\u4e0d\u5b9a\u65b9\u7a0b \\(\\sum_{i=1}^nx_i=m\\) \u7684\u975e\u8d1f\u6574\u6570\u89e3\u7684\u6570\u76ee\u4e3a \\(C_{m+n-1}^{n-1}\\) . \u7565\u8bc1\uff1a\u63d2\u677f\u6cd5\u3002 \u76f8\u5f53\u4e8e\u4f60\u6709 \\(m\\) \u4e2a\u7403\u8981\u5206\u7ed9 \\(n\\) \u4e2a\u76d2\u5b50\uff0c\u5141\u8bb8\u67d0\u4e2a\u76d2\u5b50\u662f\u7a7a\u7684\u3002\u8fd9\u4e2a\u95ee\u9898\u4e0d\u80fd\u76f4\u63a5\u7528\u7ec4\u5408\u6570\u89e3\u51b3\u3002 \u4e8e\u662f\u6211\u4eec\u518d\u52a0\u5165 \\(n-1\\) \u4e2a\u7403\uff0c\u4e8e\u662f\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u5728\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(m+n-1\\) \u7684\u7403\u5e8f\u5217\u4e2d\u9009\u62e9 \\(n-1\\) \u4e2a\u7403\uff0c\u7136\u540e\u8fd9\u4e2a \\(n-1\\) \u4e2a\u7403\u628a\u8fd9\u4e2a\u5e8f\u5217\u9694\u6210\u4e86 \\(n\\) \u4efd\uff0c\u6070\u597d\u53ef\u4ee5\u4e00\u4e00\u5bf9\u5e94\u653e\u5230 \\(n\\) \u4e2a\u76d2\u5b50\u4e2d\u3002\u90a3\u4e48\u5728 \\(m+n-1\\) \u4e2a\u7403\u4e2d\u9009\u62e9 \\(n-1\\) \u4e2a\u7403\u7684\u65b9\u6848\u6570\u5c31\u662f \\(C_{m+n-1}^{n-1}\\) \u3002","title":"\u6ca1\u6709\u9650\u5236\u65f6"},{"location":"algor/math/combinatorics/inclusion-exclusion-principle-old/#_7","text":"\u63a5\u7740\u6211\u4eec\u5c1d\u8bd5\u62bd\u8c61\u51fa\u5bb9\u65a5\u539f\u7406\u7684\u6a21\u578b\uff1a \u5168\u96c6 U\uff1a\u4e0d\u5b9a\u65b9\u7a0b \\(\\sum_{i=1}^nx_i=m\\) \u7684\u975e\u8d1f\u6574\u6570\u89e3 \u5143\u7d20\uff1a\u53d8\u91cf \\(x_i\\) . \u5c5e\u6027\uff1a \\(x_i\\) \u7684\u5c5e\u6027\u5373 \\(x_i\\) \u6ee1\u8db3\u7684\u6761\u4ef6\uff0c\u5373 \\(x_i\\leq b_i\\) \u7684\u6761\u4ef6 \u76ee\u6807\uff1a\u6240\u6709\u53d8\u91cf\u6ee1\u8db3\u5bf9\u5e94\u5c5e\u6027\u65f6\u96c6\u5408\u7684\u5927\u5c0f\uff0c\u5373 \\(|\\bigcap_{i=1}^nS_i|\\) . \u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u7528 \\(\\left|\\bigcap_{i=1}^{n}S_i\\right|=|U|-\\left|\\bigcup_{i=1}^n\\overrightarrow{S_i}\\right|\\) \u6c42\u89e3\u3002 \\(|U|\\) \u53ef\u4ee5\u7528\u7ec4\u5408\u6570\u8ba1\u7b97\uff0c\u540e\u534a\u90e8\u5206\u81ea\u7136\u4f7f\u7528\u5bb9\u65a5\u539f\u7406\u5c55\u5f00\u3002 \u90a3\u4e48\u95ee\u9898\u53d8\u6210\uff0c\u5bf9\u4e8e\u4e00\u4e9b \\(\\overrightarrow{S_{a_i}}\\) \u7684\u4ea4\u96c6\u6c42\u5927\u5c0f\u3002\u8003\u8651 \\(\\overrightarrow{S_{a_i} }\\) \u7684\u542b\u4e49\uff0c\u8868\u793a \\(x_{a_i}\\geq b_{a_i}+1\\) \u7684\u89e3\u7684\u6570\u76ee\u3002\u800c\u4ea4\u96c6\u8868\u793a\u540c\u65f6\u6ee1\u8db3\u8fd9\u4e9b\u6761\u4ef6\u3002\u56e0\u6b64\u8fd9\u4e2a\u4ea4\u96c6\u5bf9\u5e94\u7684\u4e0d\u5b9a\u65b9\u7a0b\u4e2d\uff0c\u6709\u4e9b\u53d8\u91cf\u6709 \u4e0b\u754c\u9650\u5236 \uff0c\u800c\u6709\u4e9b\u5219\u6ca1\u6709\u9650\u5236\u3002 \u80fd\u5426\u6d88\u9664\u8fd9\u4e9b\u4e0b\u754c\u9650\u5236\u5462\uff1f\u65e2\u7136\u8981\u6c42\u7684\u662f\u975e\u8d1f\u6574\u6570\u89e3\uff0c\u800c\u6709\u4e9b\u53d8\u91cf\u7684\u4e0b\u754c\u53c8\u5927\u4e8e \\(0\\) \uff0c\u90a3\u4e48\u6211\u4eec\u76f4\u63a5 \u628a\u8fd9\u4e2a\u4e0b\u754c\u51cf\u6389 \uff0c\u5c31\u53ef\u4ee5\u4f7f\u5f97\u8fd9\u4e9b\u53d8\u91cf\u7684\u4e0b\u754c\u53d8\u6210 \\(0\\) \uff0c\u5373\u6ca1\u6709\u4e0b\u754c\u5566\u3002\u56e0\u6b64\u5bf9\u4e8e \\[ \\left|\\bigcap_{a_i<a_{i+1} }^{1\\leq i\\leq k}S_{a_i}\\right| \\] \u7684\u4e0d\u5b9a\u65b9\u7a0b\u5f62\u5f0f\u4e3a \\[ \\sum_{i=1}^nx_i=m-\\sum_{i=1}^k(b_{a_i}+1) \\] \u4e8e\u662f\u8fd9\u4e2a\u4e5f\u53ef\u4ee5\u7ec4\u5408\u6570\u8ba1\u7b97\u5566\u3002\u8fd9\u4e2a\u957f\u5ea6\u4e3a \\(k\\) \u7684 \\(a\\) \u6570\u7ec4\u76f8\u5f53\u4e8e\u5728\u679a\u4e3e\u5b50\u96c6\u3002","title":"\u5bb9\u65a5\u6a21\u578b"},{"location":"algor/math/combinatorics/inclusion-exclusion-principle-old/#cf997c-sky-full-of-stars","text":"\u6709\u4e00\u4e2a \\(n\\times n\\) \u7684\u6b63\u65b9\u5f62\u7f51\u683c\uff0c\u6bcf\u4e2a\u7f51\u683c\u7528 RGB \u4e09\u79cd\u989c\u8272\u67d3\u8272 \u6c42\u6709\u591a\u5c11\u79cd\u65b9\u6848\u4f7f\u5f97\u81f3\u5c11\u6709\u4e00\u884c\u6216\u8005\u4e00\u5217\u7684\u989c\u8272\u5b8c\u5168\u4e00\u81f4\uff0c\u6a21 \\(998244353\\) \u3002 \\(n \\le 1e6\\) \u3002 \u6211\u4eec\u8003\u8651\u62bd\u8c61\u51fa\u5bb9\u65a5\u7684\u6a21\u578b\uff1a \u5168\u96c6 U \uff1a\u6240\u6709\u53ef\u80fd\u7684\u67d3\u8272\u65b9\u5f0f\uff0c\u65b9\u6848\u6570\u662f \\(3^{n\\times n}\\) \u3002 \u5143\u7d20 \uff1a \u67d3\u8272\u65b9\u5f0f \u3002 \u5c5e\u6027\uff1a\uff08\u66f4\u597d\u7684\u7406\u89e3\u662f\u201c\u4e00\u79cd\u9650\u5236/\u6761\u4ef6\u201d\uff09\u4e00\u884c\u6216\u8005\u4e00\u5217\u6d82\u7684\u989c\u8272\u5b8c\u5168\u76f8\u540c\u3002 \u53d1\u73b0\u5c5e\u6027\u672c\u8d28\u4e0a\u5c31\u662f \\(2n\\) \u4e2a\u9650\u5236\uff0c\u4e5f\u5c31\u662f\u7b2c \\(i\\) \u884c\u5168\u76f8\u540c\uff0c\u7b2c \\(i\\) \u5217\u5168\u76f8\u540c\u8fd9\u6837\u7684 \\(2n\\) \u4e2a\u6761\u4ef6\u3002 \u8981\u6c42\u7684\u4e1c\u897f\u662f\u81f3\u5c11\u6709\u4e00\u884c\u6216\u8005\u4e00\u5217\u7684\u9650\u5236/\u6761\u4ef6\u88ab\u6ee1\u8db3\u7684\u65b9\u6848\u6570\u3002 \u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u5982\u679c\u8bbe \\(S_i\\) \u8868\u793a\u6240\u6709\u6ee1\u8db3\u7b2c \\(i\\) \u4e2a\u5c5e\u6027/\u9650\u5236\u7684\u67d3\u8272\u65b9\u6848\u6784\u6210\u7684\u96c6\u5408\uff0c \u663e\u7136\u4e0d\u80fd\u76f4\u63a5\u628a\u6240\u6709 \\(|S_i|\\) \u76f8\u52a0\uff0c\u80af\u5b9a\u4f1a\u7b97\u91cd\uff0c\u90a3\u4e48\u8003\u8651\u5bb9\u65a5\uff0c\u8981\u6c42\u7684\u7b54\u6848\u5c31\u662f \\(|\\bigcup S_i|\\) \u3002 \u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u7c7b\u6bd4\u6700\u7b80\u5355\u7684\u5bb9\u65a5\uff0c\u7c7b\u4f3c\u6c42 \\(100\\) \u4ee5\u5185\u6709\u591a\u5c11\u6570\u81f3\u5c11\u542b\u6709 \\(2,3,5\\) \u5176\u4e2d\u4e00\u4e2a\u56e0\u6570\u3002 \u5199\u51fa\u6765\u5c31\u662f\uff1a \\[ ans = \\sum\\limits_{S \\not= \\emptyset}(-1)^{|S| - 1} f(S) \\] \u5176\u4e2d \\(S\\) \u8868\u793a\u82e5\u5e72\u4e2a \\(S_i\\) \u7684\u4ea4\uff0c \\(f(S)\\) \u8868\u793a\u8fd9\u79cd\u60c5\u51b5\u7684\u8d21\u732e\u3002 \u8003\u8651 \\(S\\) \u8868\u793a\u6709\u67d0 \\(i\\) \u884c\uff0c\u67d0 \\(j\\) \u5217\u662f\u76f8\u540c\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u53ef\u4ee5\u53d1\u73b0\uff0c\u9009\u51fa\u6765\u7684\u8fd9 \\(i\\) \u884c \\(j\\) \u5217\u7684\u989c\u8272\u90fd\u662f\u4e00\u6837\u7684\u3002 \u6211\u4eec\u73b0\u5728\u5c31\u76f8\u5f53\u4e8e \u5f3a\u5236 \u8fd9 \\(i\\) \u884c \\(j\\) \u5217\u662f\u540c\u4e00\u79cd\u989c\u8272\uff0c\u5269\u4e0b\u7684 \\((n - i)(n - j)\\) \u4e2a\u683c\u5b50\u5c31\u968f\u4fbf\u9009\uff08\u5c31\u7b97\u53c8\u6709\u65b0\u7684\u76f8\u7b49\u7684\u4e5f\u4e0d\u7ba1\uff0c\u56e0\u4e3a\u8fd9\u91cc\u662f\u5f3a\u5236\uff0c\u4e5f\u5c31\u662f\u53ea\u8003\u8651\u88ab\u9650\u5236\u7684\u90e8\u5206\uff0c\u5176\u4ed6\u7684\u90e8\u5206\u90fd\u76f4\u63a5\u5bb9\u65a5\u6389\u4e86\uff09\u3002 \u56e0\u4e3a \\(i\\) \u884c \\(j\\) \u5217\u662f\u53ef\u4ee5\u4efb\u610f\u9009\u7684\uff08\u8fd9\u91cc\u53ea\u662f\u8003\u8651\u67d0\u4e2a\u56fa\u5b9a\u72b6\u6001\uff09\uff0c\u90a3\u4e48 \\(f(S)\\) \u5c31\u662f \\(\\dbinom{n}{i}\\dbinom{n}{j}3^{1 + (n - i)(i - j)}\\) \u53ef\u4ee5\u5f97\u77e5\uff1a \\[ \\begin{aligned} ans &= \\sum\\limits_{i \\not = 0 \\lor j \\not=0} \\dbinom{n}{i}\\dbinom{n}{j}(-1)^{i + j - 1} f(i,j) \\\\ &= 3\\sum\\limits_{i \\not = 0 \\lor j \\not = 0} \\dbinom{n}{i} \\dbinom{n}{j} (-1)^{i + j - 1} 3^{i + j} \\end{aligned} \\] \u8003\u8651\u679a\u4e3e \\(i\\) \uff0c\u628a\u5f0f\u5b50\u62c6\u5f00\uff1a \\[ \\begin{aligned} ans= 3\\sum\\limits_{i > 0} \\ [\\ \\dbinom{n}{i}(-1)^i \\sum\\limits_{j > 0} \\ [\\dbinom{n}{j} (-1)^j 3^{(n - i)(n - j)}\\ ]\\ ] \\end{aligned} \\] \u540e\u9762\u90a3\u5768\u770b\u8d77\u6765\u50cf\u4e8c\u9879\u5f0f\u5b9a\u7406\uff0c\u628a \\(j=0\\) \u8865\u4e0a\u4e4b\u540e\u51cf\u53bb\u518d\u7528\u4e8c\u9879\u5f0f\u5b9a\u7406\uff1a \\[ ans = 3\\sum\\limits_{i > 0}\\ [\\ \\dbinom{n}{i}(-1)^i([3^{n - i} - 1]^n - 3^{(n - i)n})\\ ] \\] \u7136\u540e\u5c31\u53ef\u4ee5 \\(O(n \\log n)\\) \u505a\u4e86\u3002 \u4ee3\u7801\u5b9e\u73b0\u6709\u51e0\u4e2a\u7ec6\u8282\uff0c\u6ce8\u610f\u51cf\u6cd5\u4e4b\u540e\u8981\u52a0mod\uff0c\u7136\u540e\u5c3d\u91cf\u7528 i64 \u505a\u8fd0\u7b97\u907f\u514d\u5fd8\u8bb0\u4e58 1ll\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 // author : black_trees #include <cmath> #include <cstdio> #include <vector> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; using i64 = long long ; const i64 si = 1e6 + 10 ; const i64 mod = 998244353 ; i64 n ; i64 inv [ si ], fact [ si ], invf [ si ]; void init ( i64 n ) { inv [ 1 ] = 1 , fact [ 0 ] = invf [ 0 ] = 1 ; for ( i64 i = 2 ; i <= n ; ++ i ) inv [ i ] = 1l l * ( mod - mod / i ) * inv [ mod % i ] % mod ; for ( i64 i = 1 ; i <= n ; ++ i ) fact [ i ] = 1l l * fact [ i - 1 ] * i % mod , invf [ i ] = 1l l * invf [ i - 1 ] * inv [ i ] % mod ; } i64 C ( i64 n , i64 m ) { if ( m < 0 || n < m ) return 0 ; return 1l l * fact [ n ] * invf [ n - m ] % mod * invf [ m ] % mod ; } i64 Qpow ( i64 a , i64 b ) { i64 ret = 1 % mod ; for (; b ; b >>= 1 ) { if ( b & 1 ) ret = ret * a % mod ; a = a * a % mod ; } return ret % mod ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); i64 ans = 0 , sum = 0 ; cin >> n , init ( n ); for ( i64 i = 1 ; i <= n ; i ++ ) ans = ( ans + Qpow ( 3l l , ( 1l l * n * ( n - i ) + i )) * Qpow ( -1ll , i + 1l l ) * C ( n , i ) % mod + mod ) % mod ; ans = ans * 2l l % mod ; i64 tmp = 0 ; for ( i64 i = 0 ; i < n ; i ++ ) { i64 t = - Qpow ( 3l l , i ); tmp = ( tmp + C ( n , i ) * Qpow ( -1 , i + 1l l ) * ( Qpow ( 1 + t , n ) - Qpow ( t , n ) + mod ) % mod + mod ) % mod ; } ans = ( ans + tmp * 3 ) % mod ; cout << ans % mod << endl ; return 0 ; }","title":"CF997C Sky Full of Stars"},{"location":"algor/math/combinatorics/inclusion-exclusion-principle/","text":"\u5bb9\u65a5\u539f\u7406 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6982\u8ff0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u82e5\u6709 \\(n\\) \u4e2a\u96c6\u5408 \\(S_1 \\dots S_n\\) \uff0c\u5e76\u4e14\u96c6\u5408\u4e4b\u95f4\u53ef\u80fd\u6709\u4ea4\u96c6\u3002 \u90a3\u4e48 \\(|\\bigcup S_i|\\) \u5c31\u7b49\u4e8e \\(\\sum_i |S_i| - \\sum_{i, j} |S_i \\cap S_j| + \\sum_{i, j, k} |S_i \\cap S_j \\cap S_k| \\dots + (-1)^{n + 1} \\sum_{a_1, \\dots a_n} |\\bigcap_j S_{a_j}|\\) \u3002 \\(a_1, \\dots a_n\\) \u662f\u7528\u6765\u679a\u4e3e\u96c6\u5408\u7684\u3002 \u8fd9\u4e2a\u67ff\u5b50\u4e5f\u53ef\u4ee5\u7b80\u8ff0\u4e3a\uff0c\u591a\u4e2a\u96c6\u5408\u7684\u5e76\u96c6\u5927\u5c0f\u7b49\u4e8e\u5947\u6570\u4e2a\u96c6\u5408\u7684\u4ea4\u96c6\u7684\u5927\u5c0f\u4e4b\u548c\u51cf\u53bb\u5076\u6570\u4e2a\u96c6\u5408\u7684\u4ea4\u96c6\u5927\u5c0f\u4e4b\u548c\u3002 \u6216\u8005\u63cf\u8ff0\u4e3a: \\(\\sum\\) \u5728\u4efb\u610f\u4e00\u4e2a\u96c6\u5408\u5185\u7684\u5143\u7d20\u4e2a\u6570\u603b\u548c \\(\u2212\\sum\\) \u5728\u4efb\u610f\u4e24\u4e2a\u96c6\u5408\u4ea4\u5185\u7684\u5143\u7d20\u4e2a\u6570\u603b\u548c \\(+\\sum\\) \u5728\u4efb\u610f\u4e09\u4e2a\u96c6\u5408\u4ea4\u5185\u7684\u5143\u7d20\u4e2a\u6570\u603b\u548c... \u6ce8\u610f\u8fd9\u91cc\u201c\u5728\u4efb\u610f\u4e24\u4e2a\u96c6\u5408\u4ea4\u96c6\u5185\u7684\u5143\u7d20\u4e2a\u6570\u603b\u548c\u201d\u662f\u8981\u7b97\u91cd\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c \\(x\\) \u5728 \\(A\\cap B \\cap C\\) \u5f53\u4e2d\uff0c\u90a3\u4e48\u5728\u7b97\u4efb\u610f\u4e24\u4e2a\u96c6\u5408\u4ea4\u5185\u7684\u5143\u7d20\u4e2a\u6570\u603b\u548c\u65f6\uff0c \\(x\\) \u7684\u8d21\u732e\u5c31\u662f \\(3\\) \u3002 \u8fd9\u4e48\u505a\u5176\u5b9e\u5c31\u662f\u4e3a\u4e86\u65b9\u4fbf\u8ba1\u6570\uff0c\u56e0\u4e3a\u6709\u591a\u4e2a\u6761\u4ef6\u4f46\u662f\u53ea\u662f\u201c\u81f3\u5c11\u201d\u6ee1\u8db3\u4e00\u4e2a\u6216\u8005\u51e0\u4e2a\u7684\u65f6\u5019\uff0c\u65e0\u6cd5\u6bd4\u8f83\u65b9\u4fbf\u7684\u77e5\u9053\u54ea\u4e9b\u6761\u4ef6\u6ee1\u8db3\uff0c\u54ea\u4e9b\u6761\u4ef6\u4e0d\u6ee1\u8db3\u3002 \u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u53ea\u8003\u8651\u67d0\u4e9b\u7279\u5b9a\u7684\u6761\u4ef6\u4e00\u5b9a\u88ab\u6ee1\u8db3\u7684\u65f6\u5019\u65b9\u6848\u6570\uff0c\u5176\u5b83\u7684\u76f4\u63a5\u4e0d\u7ba1\u600e\u4e48\u641e\uff0c\u53cd\u6b63\u4e0d\u5408\u6cd5\u6216\u8005\u91cd\u590d\u7684\u80af\u5b9a\u4f1a\u88ab\u5bb9\u65a5\u6389\u3002 \u8fd9\u5c31\u662f\u4e00\u79cd\u201c\u81f3\u5c11\u8f6c\u5f3a\u5236\u201d\u7684\u601d\u60f3\u3002 \u4e00\u4e9b\u5e94\u7528 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5047\u8bbe\u6709 \\(n\\) \u4e2a\u6761\u4ef6\u7ec4\u6210\u4e86\u4e00\u4e2a\u6761\u4ef6\u96c6\u5408 \\(S\\) \uff0c\u4e14\u8fd9\u4e9b\u9650\u5236\u5efa\u7acb\u5728\u4e00\u4e2a\u5143\u7d20\u96c6\u5408 \\(U\\) \u4e0a\uff0c\u6211\u4eec\u60f3\u8981\u77e5\u9053\u81f3\u5c11\u6ee1\u8db3\u4e00\u4e2a\u6761\u4ef6\u7684\u5143\u7d20\u6709\u591a\u5c11\u4e2a\uff0c\u6b64\u65f6\u53ef\u4ee5\u4f7f\u7528\u5bb9\u65a5\u539f\u7406\u3002 \u6211\u4eec\u5c06 \\(U\\) \u4f5c\u4e3a\u5168\u96c6\uff0c\u8bbe \\(s_i\\) \u8868\u793a\u6ee1\u8db3\u7b2c \\(i\\) \u4e2a\u6761\u4ef6\u7684\u6240\u6709\u5143\u7d20\u6784\u6210\u7684\u96c6\u5408\u3002 \u7b54\u6848\u663e\u7136\u662f\u6c42 \\(|\\bigcup s_i|\\) \u90a3\u4e48\u6839\u636e\u5bb9\u65a5\u539f\u7406\u53ef\u4ee5\u6709\uff1a \\(ans = \\sum_i |s_i| - \\sum_{i, j} |s_i \\cap s_j| + \\sum_{i, j, k} |s_i \\cap s_j \\cap s_k| \\dots + (-1)^{n + 1} \\sum_{a_1, \\dots a_n} |\\bigcap_j s_{a_j}|\\) \u8fd9\u4e2a\u67ff\u5b50\u4e5f\u53ef\u4ee5\u5199\u6210\u4e00\u4e2a\u66f4\u65b9\u4fbf\u7684\u5f62\u5f0f\uff0c\u6211\u4eec\u4ee4 \\(p\\) \u8868\u793a \\(S\\) \u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u5373\u7531\u82e5\u5e72\u4e2a\u6761\u4ef6\u7ec4\u6210\u7684\u6761\u4ef6\u96c6\u5408\uff0c\u8bbe \\(f(p)\\) \u8868\u793a\u6ee1\u8db3 \\(p\\) \u4e2d\u6240\u6709\u6761\u4ef6\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u5373 \\(|\\bigcap\\limits_{s\\subseteq p} s|\\) \u3002 \u90a3\u4e48 \\(ans = \\sum\\limits_{p\\subseteq S, p \\not= \\emptyset} (-1)^{|p|+1} f(p)\\) \u3002 \uff08\u8fd9\u91cc\u7a7a\u96c6\u4e00\u822c\u6765\u8bf4\u679a\u4e3e\u4e0d\u679a\u4e3e\u90fd\u6ca1\u6709\u5565\u95ee\u9898\uff0c\u56e0\u4e3a\u5927\u591a\u6570\u65f6\u5019 \\(f(\\emptyset) = 0\\) \uff0c\u5982\u679c\u9047\u5230\u7279\u6b8a\u5b9a\u4e49\u7684\u518d\u770b\u60c5\u51b5\u5c31\u597d\uff0c\u4e3a\u4e86\u901a\u7528\u6240\u4ee5\u6392\u9664\u4e86\u7a7a\u96c6\u3002\uff09 \u7136\u540e\u6c42\u4e0d\u6ee1\u8db3\u4efb\u610f\u6761\u4ef6\u7684\u5143\u7d20\u5c31\u76f4\u63a5 \\(|U| - ans\\) \u5373\u53ef\u3002 \u4f8b\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e0d\u5b9a\u65b9\u7a0b\u975e\u8d1f\u6574\u6570\u89e3\u8ba1\u6570 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u82e5\u5e72\u4e2a\u975e\u8d1f\u6574\u6570 \\(x_i\\) \uff0c\u4fdd\u8bc1 \\(\\sum\\limits_{i = 1}^n x_i = m\\) \uff0c\u6c42\u51fa\u5408\u6cd5\u7684\u89e3\u7684\u6570\u91cf\uff0c \\(m \\in \\mathbb{N}\\) \u3002 \u8fd9\u4e2a\u4e1c\u897f\u6bd4\u8f83\u7b80\u5355\uff0c\u6211\u4eec\u653e \\(m\\) \u4e2a\u65e0\u5dee\u522b\u7684\u5c0f\u7403\uff0c\u7136\u540e\u8003\u8651\u5c06\u5176\u5206\u6210 \\(n\\) \u7ec4\uff08 \\(1\\ 1\\ 2\\) \u548c \\(1\\ 2\\ 1\\) \u4e0d\u662f\u76f8\u540c\u7684\u5206\u6cd5\uff09\uff0c\u5bf9\u5408\u6cd5\u7684\u5206\u7ec4\u8ba1\u6570\u5373\u53ef\u3002 \u8fd9\u4e2a\u5c31\u662f\u63d2\u677f\u6cd5\uff0c\u76f4\u63a5\u7528\u516c\u5f0f\u5c31\u53ef\u4ee5\u4e86\u3002 \u5982\u679c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(x_i\\) \u6709\u4e00\u4e2a\u9650\u5236\uff1a \\(x_i \\le b_i\\) \uff0c\u6c42\u51fa\u5408\u6cd5\u89e3\u7684\u6570\u91cf\uff0c \\(b_i \\in \\mathbb{N}\\) \u3002 \u8fd9\u4e2a\u9650\u5236\u4e00\u770b\u957f\u7684\u5c31\u50cf\u5bb9\u65a5\u539f\u7406\u91cc\u9762\u201c\u6ee1\u8db3\u67d0\u4e00\u4e2a\u6761\u4ef6\u7684\u5143\u7d20\u201d\uff0c\u8fd9\u91cc\u5728\u5bf9\u6ee1\u8db3\u6240\u6709\u9650\u5236\u7684\u5408\u6cd5\u89e3\u505a\u8ba1\u6570\uff0c\u6240\u4ee5\u8003\u8651\u5bb9\u65a5\u3002 \u62bd\u8c61\u4e00\u4e0b model\uff1a \u96c6\u5408 \\(s\\) \uff1a\u8bbe \\(s_i\\) \u8868\u793a\u6ee1\u8db3\u7b2c \\(i\\) \u4e2a\u6761\u4ef6\u7684\u6240\u6709\u5408\u6cd5\u89e3\u7ec4\u6210\u7684\u96c6\u5408\u3002 \u5168\u96c6 \\(U\\) \uff1a\u6240\u6709\u5408\u6cd5\u89e3\u3002 \u7b54\u6848 \\(ans\\) \uff1a \\(|\\bigcup s_i|\\) \u3002 \u5199\u51fa\u67ff\u5b50\uff1a \\(ans = |\\bigcup s_i| = \\sum\\limits_{p \\subseteq S,p\\not= \\emptyset} (-1)^{|p| + 1} f(p)\\) \u4e8e\u662f\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u8003\u8651\u7684\u5c31\u53ea\u6709\u600e\u4e48\u8ba1\u7b97 \\(f(p)\\) \uff0c\u8003\u8651\u4efb\u610f\u4e00\u4e2a \\(S\\) \u7684\u975e\u7a7a\u5b50\u96c6 \\(p\\) \uff0c\u5047\u8bbe\u5b83\u7531 \\(q\\) \u4e2a\u6761\u4ef6 \\(x(a_i) \\le b(a_i)\\) \u7ec4\u6210\uff08 \\(a_i\\) \u7528\u4e8e\u679a\u4e3e\u4e0b\u6807\uff09\u3002 \u55ef\uff0c\u7136\u540e\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u5f88\u4e0d\u597d\u7b97\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u4ec0\u4e48\u5934\u7eea\uff0c\u6700\u6839\u672c\u7684\u539f\u56e0\u5728\u4e8e\u8fd9\u4e2a \\(x_i \\le b_i\\) \u7684\u6761\u4ef6\u662f\u96be\u4ee5\u8ba1\u7b97\u7684\u3002 \u6211\u4eec\u60f3\u5230\uff0c\u5728\u63d2\u677f\u6cd5\u7684\u51e0\u4e2a\u57fa\u672c\u95ee\u9898\u91cc\uff0c\u6709\u4e00\u4e2a\u95ee\u9898\u662f\uff1a\u201c\u7b2c \\(i\\) \u7ec4\u7684\u5143\u7d20\u81f3\u5c11\u8981\u6709 \\(v_i\\) \u4e2a\u201d\uff0c\u8f6c\u5316\u6210\u4e0d\u5b9a\u65b9\u7a0b\u7684\u5f62\u5f0f\u5c31\u662f \\(x_i \\ge v_i\\) \uff0c\u8fd9\u4e2a\u4e1c\u897f\u662f\u5bb9\u6613\u8ba1\u6570\u7684\u3002 \u4e8e\u662f\u6211\u4eec\u8003\u8651 \u201c\u6b63\u96be\u5219\u53cd\u201d \u7684\u601d\u60f3\uff0c\u8ba1\u7b97\u4e0d\u6ee1\u8db3 \\(x_i \\le b_i\\) \u7684\u5408\u6cd5\u89e3\u4e2a\u6570\uff0c\u4e5f\u5c31\u662f\u8003\u8651\u8ba1\u7b97 \\(x_i \\ge (b_i + 1)\\) \u7684\u5408\u6cd5\u89e3\u4e2a\u6570\uff0c\u7136\u540e\u7528\u5168\u96c6 \\(U\\) \u7684\u5927\u5c0f\u51cf\u53bb\u8fd9\u4e2a\u5373\u53ef\uff08\u6c42\u8865\u96c6\uff09\u3002 \u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a \\(p\\) \u7684\u7b54\u6848\u5c31\u662f \\(\\dbinom{n + \\sum\\limits_{i = 1}^q (b(a_i) + 1) - 1}{n}\\) \u6240\u4ee5\u6700\u7ec8\u7684\u7b54\u6848\u662f \\(\\dbinom{n + m - 1}{n} - \\sum\\limits_{p \\subseteq S,p\\not= \\emptyset} (-1)^{|p| + 1} \\dbinom{n + \\sum\\limits_{i = 1}^q (b(a_i) + 1) - 1}{n}\\) CF997C Sky Full of Stars \u03c8(\uff40\u2207\u00b4)\u03c8 \u73b0\u5728\u6709\u4e00\u4e2a \\(n \\times n\\) \u7684\u7f51\u683c\uff0c\u4f60\u6709 RGB \u4e09\u79cd\u989c\u8272\uff0c\u4f60\u9700\u8981\u7ed9\u6bcf\u4e00\u4e2a\u683c\u5b50\u67d3\u8272\u3002 \u8bf7\u95ee\u81f3\u5c11\u6709\u4e00\u884c\u6216\u8005\u4e00\u5217\u989c\u8272\u76f8\u540c\u7684\u65b9\u6848\u6570\u6709\u591a\u5c11\uff1f\u6c42\u51fa\u8fd9\u4e2a\u6570\u5bf9 \\(998244353\\) \u53d6\u6a21\u7684\u503c\u3002 \\(n \\le 1e6\\) \u3002 \u8fd9\u4e2a\u95ee\u9898\u662f\u6bd4\u8f83\u7ecf\u5178\u7684\u201c\u7528\u94a6\u5b9a\u6765\u5bb9\u6389\u81f3\u5c11\u65b9\u4fbf\u8ba1\u6570\u201d\u7684\u95ee\u9898\u3002 \u6a21\u578b\u5e94\u8be5\u6bd4\u8f83\u597d\u770b\u51fa\u6765\uff0c\u6211\u4eec\u628a\u6709\u4e00\u884c\u6216\u8005\u4e00\u5217\u989c\u8272\u76f8\u540c\u770b\u4f5c \\(2n\\) \u4e2a\u6761\u4ef6\u5c31\u884c\u3002 \u4e8e\u662f\u6a21\u578b\u62bd\u8c61\u51fa\u6765\uff1a \u5168\u96c6 U \uff1a\u6240\u6709\u53ef\u80fd\u7684\u67d3\u8272\u65b9\u5f0f\uff0c\u65b9\u6848\u6570\u662f \\(3^{n\\times n}\\) \u3002 \u5143\u7d20 \uff1a \u67d3\u8272\u65b9\u5f0f \u3002 \u5c5e\u6027\uff1a\uff08\u66f4\u597d\u7684\u7406\u89e3\u662f\u201c\u4e00\u79cd\u9650\u5236/\u6761\u4ef6\u201d\uff09\u4e00\u884c\u6216\u8005\u4e00\u5217\u6d82\u7684\u989c\u8272\u5b8c\u5168\u76f8\u540c\u3002 \u53d1\u73b0\u5c5e\u6027\u672c\u8d28\u4e0a\u5c31\u662f \\(2n\\) \u4e2a\u9650\u5236\uff0c\u4e5f\u5c31\u662f\u7b2c \\(i\\) \u884c\u5168\u76f8\u540c\uff0c\u7b2c \\(j\\) \u5217\u5168\u76f8\u540c\u8fd9\u6837\u7684 \\(2n\\) \u4e2a\u6761\u4ef6\u3002 \u8981\u6c42\u7684\u4e1c\u897f\u662f\u81f3\u5c11\u6709\u4e00\u884c\u6216\u8005\u4e00\u5217\u7684\u9650\u5236/\u6761\u4ef6\u88ab\u6ee1\u8db3\u7684\u65b9\u6848\u6570\u3002 \u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u5982\u679c\u8bbe \\(S_i\\) \u8868\u793a\u6240\u6709\u6ee1\u8db3\u7b2c \\(i\\) \u4e2a\u5c5e\u6027/\u9650\u5236\u7684\u67d3\u8272\u65b9\u6848\u6784\u6210\u7684\u96c6\u5408\uff0c \u663e\u7136\u4e0d\u80fd\u76f4\u63a5\u628a\u6240\u6709 \\(|S_i|\\) \u76f8\u52a0\uff0c\u80af\u5b9a\u4f1a\u7b97\u91cd\uff0c\u90a3\u4e48\u8003\u8651\u5bb9\u65a5\uff0c\u8981\u6c42\u7684\u7b54\u6848\u5c31\u662f \\(|\\bigcup S_i|\\) \u3002 \u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u7c7b\u6bd4\u6700\u7b80\u5355\u7684\u5bb9\u65a5\uff0c\u7c7b\u4f3c\u6c42 \\(100\\) \u4ee5\u5185\u6709\u591a\u5c11\u6570\u81f3\u5c11\u542b\u6709 \\(2,3,5\\) \u5176\u4e2d\u4e00\u4e2a\u56e0\u6570\u3002 \u5199\u51fa\u6765\u5c31\u662f\uff1a \\[ ans = \\sum\\limits_{S \\not= \\emptyset}(-1)^{|S| - 1} f(S) \\] \u5176\u4e2d \\(S\\) \u8868\u793a\u82e5\u5e72\u4e2a \\(S_i\\) \u7684\u4ea4\uff0c \\(f(S)\\) \u8868\u793a\u8fd9\u79cd\u60c5\u51b5\u7684\u8d21\u732e\u3002 \u8003\u8651 \\(S\\) \u8868\u793a\u6709\u67d0 \\(i\\) \u884c\uff0c\u67d0 \\(j\\) \u5217\u662f\u76f8\u540c\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u53ef\u4ee5\u53d1\u73b0\uff0c\u9009\u51fa\u6765\u7684\u8fd9 \\(i\\) \u884c \\(j\\) \u5217\u7684\u989c\u8272\u90fd\u662f\u4e00\u6837\u7684\u3002 \u6211\u4eec\u73b0\u5728\u5c31\u76f8\u5f53\u4e8e \u94a6\u5b9a \u8fd9 \\(i\\) \u884c \\(j\\) \u5217\u662f\u540c\u4e00\u79cd\u989c\u8272\uff0c\u5269\u4e0b\u7684 \\((n - i)(n - j)\\) \u4e2a\u683c\u5b50\u5c31\u968f\u4fbf\u9009\uff08\u5c31\u7b97\u53c8\u6709\u65b0\u7684\u76f8\u7b49\u7684\u4e5f\u4e0d\u7ba1\uff0c\u56e0\u4e3a\u8fd9\u91cc\u662f\u94a6\u5b9a\uff0c\u4e5f\u5c31\u662f\u53ea\u8003\u8651\u88ab\u9650\u5236\u7684\u90e8\u5206\uff0c\u5176\u4ed6\u7684\u90e8\u5206\u90fd\u76f4\u63a5\u5bb9\u65a5\u6389\u4e86\uff09\u3002 \u56e0\u4e3a \\(i\\) \u884c \\(j\\) \u5217\u662f\u53ef\u4ee5\u4efb\u610f\u9009\u7684\uff08\u8fd9\u91cc\u53ea\u662f\u8003\u8651\u67d0\u4e2a\u56fa\u5b9a\u72b6\u6001\uff09\uff0c\u90a3\u4e48 \\(f(S)\\) \u5c31\u662f \\(\\dbinom{n}{i}\\dbinom{n}{j}3^{1 + (n - i)(i - j)}\\) \u53ef\u4ee5\u5f97\u77e5\uff1a \\[ \\begin{aligned} ans &= 3\\sum\\limits_{i \\not = 0 \\lor j \\not = 0} \\dbinom{n}{i} \\dbinom{n}{j} (-1)^{i + j - 1} 3^{i + j} \\end{aligned} \\] \u8003\u8651\u679a\u4e3e \\(i\\) \uff0c\u628a\u5f0f\u5b50\u62c6\u5f00\uff1a \\[ \\begin{aligned} ans= 3\\sum\\limits_{i > 0} \\ [\\ \\dbinom{n}{i}(-1)^i \\sum\\limits_{j > 0} \\ [\\dbinom{n}{j} (-1)^j 3^{(n - i)(n - j)}\\ ]\\ ] \\end{aligned} \\] \u540e\u9762\u90a3\u5768\u770b\u8d77\u6765\u50cf\u4e8c\u9879\u5f0f\u5b9a\u7406\uff0c\u628a \\(j=0\\) \u8865\u4e0a\u4e4b\u540e\u51cf\u53bb\u518d\u7528\u4e8c\u9879\u5f0f\u5b9a\u7406\uff1a \u4e5f\u53ef\u4ee5\u62c9\u51fa\u6765\u53d8\u6210\u4e24\u4e2a \\(\\sum\\) \u7684\u4e58\u79ef\uff0c\u5c31\u53ef\u4ee5\u5408\u5e76\u4e86\u3002 \\[ ans = 3\\sum\\limits_{i > 0}\\ [\\ \\dbinom{n}{i}(-1)^i([3^{n - i} - 1]^n - 3^{(n - i)n})\\ ] \\] \u7136\u540e\u5c31\u53ef\u4ee5 \\(O(n \\log n)\\) \u505a\u4e86\u3002 \u4ee3\u7801\u5b9e\u73b0\u6709\u51e0\u4e2a\u7ec6\u8282\uff0c\u6ce8\u610f\u51cf\u6cd5\u4e4b\u540e\u8981\u52a0mod\uff0c\u7136\u540e\u5c3d\u91cf\u7528 i64 \u505a\u8fd0\u7b97\u907f\u514d\u5fd8\u8bb0\u4e58 1ll\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 // author : black_trees #include <cmath> #include <cstdio> #include <vector> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; using i64 = long long ; const i64 si = 1e6 + 10 ; const i64 mod = 998244353 ; i64 n ; i64 inv [ si ], fact [ si ], invf [ si ]; void init ( i64 n ) { inv [ 1 ] = 1 , fact [ 0 ] = invf [ 0 ] = 1 ; for ( i64 i = 2 ; i <= n ; ++ i ) inv [ i ] = 1l l * ( mod - mod / i ) * inv [ mod % i ] % mod ; for ( i64 i = 1 ; i <= n ; ++ i ) fact [ i ] = 1l l * fact [ i - 1 ] * i % mod , invf [ i ] = 1l l * invf [ i - 1 ] * inv [ i ] % mod ; } i64 C ( i64 n , i64 m ) { if ( m < 0 || n < m ) return 0 ; return 1l l * fact [ n ] * invf [ n - m ] % mod * invf [ m ] % mod ; } i64 Qpow ( i64 a , i64 b ) { i64 ret = 1 % mod ; for (; b ; b >>= 1 ) { if ( b & 1 ) ret = ret * a % mod ; a = a * a % mod ; } return ret % mod ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); i64 ans = 0 , sum = 0 ; cin >> n , init ( n ); for ( i64 i = 1 ; i <= n ; i ++ ) ans = ( ans + Qpow ( 3l l , ( 1l l * n * ( n - i ) + i )) * Qpow ( -1ll , i + 1l l ) * C ( n , i ) % mod + mod ) % mod ; ans = ans * 2l l % mod ; i64 tmp = 0 ; for ( i64 i = 0 ; i < n ; i ++ ) { i64 t = - Qpow ( 3l l , i ); tmp = ( tmp + C ( n , i ) * Qpow ( -1 , i + 1l l ) * ( Qpow ( 1 + t , n ) - Qpow ( t , n ) + mod ) % mod + mod ) % mod ; } ans = ( ans + tmp * 3 ) % mod ; cout << ans % mod << endl ; return 0 ; } ARC101(E/C) Ribbons on Tree \u03c8(\uff40\u2207\u00b4)\u03c8 To be continued.","title":"\u5bb9\u65a5\u539f\u7406"},{"location":"algor/math/combinatorics/inclusion-exclusion-principle/#_1","text":"","title":"\u5bb9\u65a5\u539f\u7406"},{"location":"algor/math/combinatorics/inclusion-exclusion-principle/#_2","text":"\u82e5\u6709 \\(n\\) \u4e2a\u96c6\u5408 \\(S_1 \\dots S_n\\) \uff0c\u5e76\u4e14\u96c6\u5408\u4e4b\u95f4\u53ef\u80fd\u6709\u4ea4\u96c6\u3002 \u90a3\u4e48 \\(|\\bigcup S_i|\\) \u5c31\u7b49\u4e8e \\(\\sum_i |S_i| - \\sum_{i, j} |S_i \\cap S_j| + \\sum_{i, j, k} |S_i \\cap S_j \\cap S_k| \\dots + (-1)^{n + 1} \\sum_{a_1, \\dots a_n} |\\bigcap_j S_{a_j}|\\) \u3002 \\(a_1, \\dots a_n\\) \u662f\u7528\u6765\u679a\u4e3e\u96c6\u5408\u7684\u3002 \u8fd9\u4e2a\u67ff\u5b50\u4e5f\u53ef\u4ee5\u7b80\u8ff0\u4e3a\uff0c\u591a\u4e2a\u96c6\u5408\u7684\u5e76\u96c6\u5927\u5c0f\u7b49\u4e8e\u5947\u6570\u4e2a\u96c6\u5408\u7684\u4ea4\u96c6\u7684\u5927\u5c0f\u4e4b\u548c\u51cf\u53bb\u5076\u6570\u4e2a\u96c6\u5408\u7684\u4ea4\u96c6\u5927\u5c0f\u4e4b\u548c\u3002 \u6216\u8005\u63cf\u8ff0\u4e3a: \\(\\sum\\) \u5728\u4efb\u610f\u4e00\u4e2a\u96c6\u5408\u5185\u7684\u5143\u7d20\u4e2a\u6570\u603b\u548c \\(\u2212\\sum\\) \u5728\u4efb\u610f\u4e24\u4e2a\u96c6\u5408\u4ea4\u5185\u7684\u5143\u7d20\u4e2a\u6570\u603b\u548c \\(+\\sum\\) \u5728\u4efb\u610f\u4e09\u4e2a\u96c6\u5408\u4ea4\u5185\u7684\u5143\u7d20\u4e2a\u6570\u603b\u548c... \u6ce8\u610f\u8fd9\u91cc\u201c\u5728\u4efb\u610f\u4e24\u4e2a\u96c6\u5408\u4ea4\u96c6\u5185\u7684\u5143\u7d20\u4e2a\u6570\u603b\u548c\u201d\u662f\u8981\u7b97\u91cd\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c \\(x\\) \u5728 \\(A\\cap B \\cap C\\) \u5f53\u4e2d\uff0c\u90a3\u4e48\u5728\u7b97\u4efb\u610f\u4e24\u4e2a\u96c6\u5408\u4ea4\u5185\u7684\u5143\u7d20\u4e2a\u6570\u603b\u548c\u65f6\uff0c \\(x\\) \u7684\u8d21\u732e\u5c31\u662f \\(3\\) \u3002 \u8fd9\u4e48\u505a\u5176\u5b9e\u5c31\u662f\u4e3a\u4e86\u65b9\u4fbf\u8ba1\u6570\uff0c\u56e0\u4e3a\u6709\u591a\u4e2a\u6761\u4ef6\u4f46\u662f\u53ea\u662f\u201c\u81f3\u5c11\u201d\u6ee1\u8db3\u4e00\u4e2a\u6216\u8005\u51e0\u4e2a\u7684\u65f6\u5019\uff0c\u65e0\u6cd5\u6bd4\u8f83\u65b9\u4fbf\u7684\u77e5\u9053\u54ea\u4e9b\u6761\u4ef6\u6ee1\u8db3\uff0c\u54ea\u4e9b\u6761\u4ef6\u4e0d\u6ee1\u8db3\u3002 \u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u53ea\u8003\u8651\u67d0\u4e9b\u7279\u5b9a\u7684\u6761\u4ef6\u4e00\u5b9a\u88ab\u6ee1\u8db3\u7684\u65f6\u5019\u65b9\u6848\u6570\uff0c\u5176\u5b83\u7684\u76f4\u63a5\u4e0d\u7ba1\u600e\u4e48\u641e\uff0c\u53cd\u6b63\u4e0d\u5408\u6cd5\u6216\u8005\u91cd\u590d\u7684\u80af\u5b9a\u4f1a\u88ab\u5bb9\u65a5\u6389\u3002 \u8fd9\u5c31\u662f\u4e00\u79cd\u201c\u81f3\u5c11\u8f6c\u5f3a\u5236\u201d\u7684\u601d\u60f3\u3002","title":"\u6982\u8ff0"},{"location":"algor/math/combinatorics/inclusion-exclusion-principle/#_3","text":"\u5047\u8bbe\u6709 \\(n\\) \u4e2a\u6761\u4ef6\u7ec4\u6210\u4e86\u4e00\u4e2a\u6761\u4ef6\u96c6\u5408 \\(S\\) \uff0c\u4e14\u8fd9\u4e9b\u9650\u5236\u5efa\u7acb\u5728\u4e00\u4e2a\u5143\u7d20\u96c6\u5408 \\(U\\) \u4e0a\uff0c\u6211\u4eec\u60f3\u8981\u77e5\u9053\u81f3\u5c11\u6ee1\u8db3\u4e00\u4e2a\u6761\u4ef6\u7684\u5143\u7d20\u6709\u591a\u5c11\u4e2a\uff0c\u6b64\u65f6\u53ef\u4ee5\u4f7f\u7528\u5bb9\u65a5\u539f\u7406\u3002 \u6211\u4eec\u5c06 \\(U\\) \u4f5c\u4e3a\u5168\u96c6\uff0c\u8bbe \\(s_i\\) \u8868\u793a\u6ee1\u8db3\u7b2c \\(i\\) \u4e2a\u6761\u4ef6\u7684\u6240\u6709\u5143\u7d20\u6784\u6210\u7684\u96c6\u5408\u3002 \u7b54\u6848\u663e\u7136\u662f\u6c42 \\(|\\bigcup s_i|\\) \u90a3\u4e48\u6839\u636e\u5bb9\u65a5\u539f\u7406\u53ef\u4ee5\u6709\uff1a \\(ans = \\sum_i |s_i| - \\sum_{i, j} |s_i \\cap s_j| + \\sum_{i, j, k} |s_i \\cap s_j \\cap s_k| \\dots + (-1)^{n + 1} \\sum_{a_1, \\dots a_n} |\\bigcap_j s_{a_j}|\\) \u8fd9\u4e2a\u67ff\u5b50\u4e5f\u53ef\u4ee5\u5199\u6210\u4e00\u4e2a\u66f4\u65b9\u4fbf\u7684\u5f62\u5f0f\uff0c\u6211\u4eec\u4ee4 \\(p\\) \u8868\u793a \\(S\\) \u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u5373\u7531\u82e5\u5e72\u4e2a\u6761\u4ef6\u7ec4\u6210\u7684\u6761\u4ef6\u96c6\u5408\uff0c\u8bbe \\(f(p)\\) \u8868\u793a\u6ee1\u8db3 \\(p\\) \u4e2d\u6240\u6709\u6761\u4ef6\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u5373 \\(|\\bigcap\\limits_{s\\subseteq p} s|\\) \u3002 \u90a3\u4e48 \\(ans = \\sum\\limits_{p\\subseteq S, p \\not= \\emptyset} (-1)^{|p|+1} f(p)\\) \u3002 \uff08\u8fd9\u91cc\u7a7a\u96c6\u4e00\u822c\u6765\u8bf4\u679a\u4e3e\u4e0d\u679a\u4e3e\u90fd\u6ca1\u6709\u5565\u95ee\u9898\uff0c\u56e0\u4e3a\u5927\u591a\u6570\u65f6\u5019 \\(f(\\emptyset) = 0\\) \uff0c\u5982\u679c\u9047\u5230\u7279\u6b8a\u5b9a\u4e49\u7684\u518d\u770b\u60c5\u51b5\u5c31\u597d\uff0c\u4e3a\u4e86\u901a\u7528\u6240\u4ee5\u6392\u9664\u4e86\u7a7a\u96c6\u3002\uff09 \u7136\u540e\u6c42\u4e0d\u6ee1\u8db3\u4efb\u610f\u6761\u4ef6\u7684\u5143\u7d20\u5c31\u76f4\u63a5 \\(|U| - ans\\) \u5373\u53ef\u3002","title":"\u4e00\u4e9b\u5e94\u7528"},{"location":"algor/math/combinatorics/inclusion-exclusion-principle/#_4","text":"","title":"\u4f8b\u9898"},{"location":"algor/math/combinatorics/inclusion-exclusion-principle/#_5","text":"\u7ed9\u5b9a\u82e5\u5e72\u4e2a\u975e\u8d1f\u6574\u6570 \\(x_i\\) \uff0c\u4fdd\u8bc1 \\(\\sum\\limits_{i = 1}^n x_i = m\\) \uff0c\u6c42\u51fa\u5408\u6cd5\u7684\u89e3\u7684\u6570\u91cf\uff0c \\(m \\in \\mathbb{N}\\) \u3002 \u8fd9\u4e2a\u4e1c\u897f\u6bd4\u8f83\u7b80\u5355\uff0c\u6211\u4eec\u653e \\(m\\) \u4e2a\u65e0\u5dee\u522b\u7684\u5c0f\u7403\uff0c\u7136\u540e\u8003\u8651\u5c06\u5176\u5206\u6210 \\(n\\) \u7ec4\uff08 \\(1\\ 1\\ 2\\) \u548c \\(1\\ 2\\ 1\\) \u4e0d\u662f\u76f8\u540c\u7684\u5206\u6cd5\uff09\uff0c\u5bf9\u5408\u6cd5\u7684\u5206\u7ec4\u8ba1\u6570\u5373\u53ef\u3002 \u8fd9\u4e2a\u5c31\u662f\u63d2\u677f\u6cd5\uff0c\u76f4\u63a5\u7528\u516c\u5f0f\u5c31\u53ef\u4ee5\u4e86\u3002 \u5982\u679c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(x_i\\) \u6709\u4e00\u4e2a\u9650\u5236\uff1a \\(x_i \\le b_i\\) \uff0c\u6c42\u51fa\u5408\u6cd5\u89e3\u7684\u6570\u91cf\uff0c \\(b_i \\in \\mathbb{N}\\) \u3002 \u8fd9\u4e2a\u9650\u5236\u4e00\u770b\u957f\u7684\u5c31\u50cf\u5bb9\u65a5\u539f\u7406\u91cc\u9762\u201c\u6ee1\u8db3\u67d0\u4e00\u4e2a\u6761\u4ef6\u7684\u5143\u7d20\u201d\uff0c\u8fd9\u91cc\u5728\u5bf9\u6ee1\u8db3\u6240\u6709\u9650\u5236\u7684\u5408\u6cd5\u89e3\u505a\u8ba1\u6570\uff0c\u6240\u4ee5\u8003\u8651\u5bb9\u65a5\u3002 \u62bd\u8c61\u4e00\u4e0b model\uff1a \u96c6\u5408 \\(s\\) \uff1a\u8bbe \\(s_i\\) \u8868\u793a\u6ee1\u8db3\u7b2c \\(i\\) \u4e2a\u6761\u4ef6\u7684\u6240\u6709\u5408\u6cd5\u89e3\u7ec4\u6210\u7684\u96c6\u5408\u3002 \u5168\u96c6 \\(U\\) \uff1a\u6240\u6709\u5408\u6cd5\u89e3\u3002 \u7b54\u6848 \\(ans\\) \uff1a \\(|\\bigcup s_i|\\) \u3002 \u5199\u51fa\u67ff\u5b50\uff1a \\(ans = |\\bigcup s_i| = \\sum\\limits_{p \\subseteq S,p\\not= \\emptyset} (-1)^{|p| + 1} f(p)\\) \u4e8e\u662f\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u8003\u8651\u7684\u5c31\u53ea\u6709\u600e\u4e48\u8ba1\u7b97 \\(f(p)\\) \uff0c\u8003\u8651\u4efb\u610f\u4e00\u4e2a \\(S\\) \u7684\u975e\u7a7a\u5b50\u96c6 \\(p\\) \uff0c\u5047\u8bbe\u5b83\u7531 \\(q\\) \u4e2a\u6761\u4ef6 \\(x(a_i) \\le b(a_i)\\) \u7ec4\u6210\uff08 \\(a_i\\) \u7528\u4e8e\u679a\u4e3e\u4e0b\u6807\uff09\u3002 \u55ef\uff0c\u7136\u540e\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u5f88\u4e0d\u597d\u7b97\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u4ec0\u4e48\u5934\u7eea\uff0c\u6700\u6839\u672c\u7684\u539f\u56e0\u5728\u4e8e\u8fd9\u4e2a \\(x_i \\le b_i\\) \u7684\u6761\u4ef6\u662f\u96be\u4ee5\u8ba1\u7b97\u7684\u3002 \u6211\u4eec\u60f3\u5230\uff0c\u5728\u63d2\u677f\u6cd5\u7684\u51e0\u4e2a\u57fa\u672c\u95ee\u9898\u91cc\uff0c\u6709\u4e00\u4e2a\u95ee\u9898\u662f\uff1a\u201c\u7b2c \\(i\\) \u7ec4\u7684\u5143\u7d20\u81f3\u5c11\u8981\u6709 \\(v_i\\) \u4e2a\u201d\uff0c\u8f6c\u5316\u6210\u4e0d\u5b9a\u65b9\u7a0b\u7684\u5f62\u5f0f\u5c31\u662f \\(x_i \\ge v_i\\) \uff0c\u8fd9\u4e2a\u4e1c\u897f\u662f\u5bb9\u6613\u8ba1\u6570\u7684\u3002 \u4e8e\u662f\u6211\u4eec\u8003\u8651 \u201c\u6b63\u96be\u5219\u53cd\u201d \u7684\u601d\u60f3\uff0c\u8ba1\u7b97\u4e0d\u6ee1\u8db3 \\(x_i \\le b_i\\) \u7684\u5408\u6cd5\u89e3\u4e2a\u6570\uff0c\u4e5f\u5c31\u662f\u8003\u8651\u8ba1\u7b97 \\(x_i \\ge (b_i + 1)\\) \u7684\u5408\u6cd5\u89e3\u4e2a\u6570\uff0c\u7136\u540e\u7528\u5168\u96c6 \\(U\\) \u7684\u5927\u5c0f\u51cf\u53bb\u8fd9\u4e2a\u5373\u53ef\uff08\u6c42\u8865\u96c6\uff09\u3002 \u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a \\(p\\) \u7684\u7b54\u6848\u5c31\u662f \\(\\dbinom{n + \\sum\\limits_{i = 1}^q (b(a_i) + 1) - 1}{n}\\) \u6240\u4ee5\u6700\u7ec8\u7684\u7b54\u6848\u662f \\(\\dbinom{n + m - 1}{n} - \\sum\\limits_{p \\subseteq S,p\\not= \\emptyset} (-1)^{|p| + 1} \\dbinom{n + \\sum\\limits_{i = 1}^q (b(a_i) + 1) - 1}{n}\\)","title":"\u4e0d\u5b9a\u65b9\u7a0b\u975e\u8d1f\u6574\u6570\u89e3\u8ba1\u6570"},{"location":"algor/math/combinatorics/inclusion-exclusion-principle/#cf997c-sky-full-of-stars","text":"\u73b0\u5728\u6709\u4e00\u4e2a \\(n \\times n\\) \u7684\u7f51\u683c\uff0c\u4f60\u6709 RGB \u4e09\u79cd\u989c\u8272\uff0c\u4f60\u9700\u8981\u7ed9\u6bcf\u4e00\u4e2a\u683c\u5b50\u67d3\u8272\u3002 \u8bf7\u95ee\u81f3\u5c11\u6709\u4e00\u884c\u6216\u8005\u4e00\u5217\u989c\u8272\u76f8\u540c\u7684\u65b9\u6848\u6570\u6709\u591a\u5c11\uff1f\u6c42\u51fa\u8fd9\u4e2a\u6570\u5bf9 \\(998244353\\) \u53d6\u6a21\u7684\u503c\u3002 \\(n \\le 1e6\\) \u3002 \u8fd9\u4e2a\u95ee\u9898\u662f\u6bd4\u8f83\u7ecf\u5178\u7684\u201c\u7528\u94a6\u5b9a\u6765\u5bb9\u6389\u81f3\u5c11\u65b9\u4fbf\u8ba1\u6570\u201d\u7684\u95ee\u9898\u3002 \u6a21\u578b\u5e94\u8be5\u6bd4\u8f83\u597d\u770b\u51fa\u6765\uff0c\u6211\u4eec\u628a\u6709\u4e00\u884c\u6216\u8005\u4e00\u5217\u989c\u8272\u76f8\u540c\u770b\u4f5c \\(2n\\) \u4e2a\u6761\u4ef6\u5c31\u884c\u3002 \u4e8e\u662f\u6a21\u578b\u62bd\u8c61\u51fa\u6765\uff1a \u5168\u96c6 U \uff1a\u6240\u6709\u53ef\u80fd\u7684\u67d3\u8272\u65b9\u5f0f\uff0c\u65b9\u6848\u6570\u662f \\(3^{n\\times n}\\) \u3002 \u5143\u7d20 \uff1a \u67d3\u8272\u65b9\u5f0f \u3002 \u5c5e\u6027\uff1a\uff08\u66f4\u597d\u7684\u7406\u89e3\u662f\u201c\u4e00\u79cd\u9650\u5236/\u6761\u4ef6\u201d\uff09\u4e00\u884c\u6216\u8005\u4e00\u5217\u6d82\u7684\u989c\u8272\u5b8c\u5168\u76f8\u540c\u3002 \u53d1\u73b0\u5c5e\u6027\u672c\u8d28\u4e0a\u5c31\u662f \\(2n\\) \u4e2a\u9650\u5236\uff0c\u4e5f\u5c31\u662f\u7b2c \\(i\\) \u884c\u5168\u76f8\u540c\uff0c\u7b2c \\(j\\) \u5217\u5168\u76f8\u540c\u8fd9\u6837\u7684 \\(2n\\) \u4e2a\u6761\u4ef6\u3002 \u8981\u6c42\u7684\u4e1c\u897f\u662f\u81f3\u5c11\u6709\u4e00\u884c\u6216\u8005\u4e00\u5217\u7684\u9650\u5236/\u6761\u4ef6\u88ab\u6ee1\u8db3\u7684\u65b9\u6848\u6570\u3002 \u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u5982\u679c\u8bbe \\(S_i\\) \u8868\u793a\u6240\u6709\u6ee1\u8db3\u7b2c \\(i\\) \u4e2a\u5c5e\u6027/\u9650\u5236\u7684\u67d3\u8272\u65b9\u6848\u6784\u6210\u7684\u96c6\u5408\uff0c \u663e\u7136\u4e0d\u80fd\u76f4\u63a5\u628a\u6240\u6709 \\(|S_i|\\) \u76f8\u52a0\uff0c\u80af\u5b9a\u4f1a\u7b97\u91cd\uff0c\u90a3\u4e48\u8003\u8651\u5bb9\u65a5\uff0c\u8981\u6c42\u7684\u7b54\u6848\u5c31\u662f \\(|\\bigcup S_i|\\) \u3002 \u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u7c7b\u6bd4\u6700\u7b80\u5355\u7684\u5bb9\u65a5\uff0c\u7c7b\u4f3c\u6c42 \\(100\\) \u4ee5\u5185\u6709\u591a\u5c11\u6570\u81f3\u5c11\u542b\u6709 \\(2,3,5\\) \u5176\u4e2d\u4e00\u4e2a\u56e0\u6570\u3002 \u5199\u51fa\u6765\u5c31\u662f\uff1a \\[ ans = \\sum\\limits_{S \\not= \\emptyset}(-1)^{|S| - 1} f(S) \\] \u5176\u4e2d \\(S\\) \u8868\u793a\u82e5\u5e72\u4e2a \\(S_i\\) \u7684\u4ea4\uff0c \\(f(S)\\) \u8868\u793a\u8fd9\u79cd\u60c5\u51b5\u7684\u8d21\u732e\u3002 \u8003\u8651 \\(S\\) \u8868\u793a\u6709\u67d0 \\(i\\) \u884c\uff0c\u67d0 \\(j\\) \u5217\u662f\u76f8\u540c\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u53ef\u4ee5\u53d1\u73b0\uff0c\u9009\u51fa\u6765\u7684\u8fd9 \\(i\\) \u884c \\(j\\) \u5217\u7684\u989c\u8272\u90fd\u662f\u4e00\u6837\u7684\u3002 \u6211\u4eec\u73b0\u5728\u5c31\u76f8\u5f53\u4e8e \u94a6\u5b9a \u8fd9 \\(i\\) \u884c \\(j\\) \u5217\u662f\u540c\u4e00\u79cd\u989c\u8272\uff0c\u5269\u4e0b\u7684 \\((n - i)(n - j)\\) \u4e2a\u683c\u5b50\u5c31\u968f\u4fbf\u9009\uff08\u5c31\u7b97\u53c8\u6709\u65b0\u7684\u76f8\u7b49\u7684\u4e5f\u4e0d\u7ba1\uff0c\u56e0\u4e3a\u8fd9\u91cc\u662f\u94a6\u5b9a\uff0c\u4e5f\u5c31\u662f\u53ea\u8003\u8651\u88ab\u9650\u5236\u7684\u90e8\u5206\uff0c\u5176\u4ed6\u7684\u90e8\u5206\u90fd\u76f4\u63a5\u5bb9\u65a5\u6389\u4e86\uff09\u3002 \u56e0\u4e3a \\(i\\) \u884c \\(j\\) \u5217\u662f\u53ef\u4ee5\u4efb\u610f\u9009\u7684\uff08\u8fd9\u91cc\u53ea\u662f\u8003\u8651\u67d0\u4e2a\u56fa\u5b9a\u72b6\u6001\uff09\uff0c\u90a3\u4e48 \\(f(S)\\) \u5c31\u662f \\(\\dbinom{n}{i}\\dbinom{n}{j}3^{1 + (n - i)(i - j)}\\) \u53ef\u4ee5\u5f97\u77e5\uff1a \\[ \\begin{aligned} ans &= 3\\sum\\limits_{i \\not = 0 \\lor j \\not = 0} \\dbinom{n}{i} \\dbinom{n}{j} (-1)^{i + j - 1} 3^{i + j} \\end{aligned} \\] \u8003\u8651\u679a\u4e3e \\(i\\) \uff0c\u628a\u5f0f\u5b50\u62c6\u5f00\uff1a \\[ \\begin{aligned} ans= 3\\sum\\limits_{i > 0} \\ [\\ \\dbinom{n}{i}(-1)^i \\sum\\limits_{j > 0} \\ [\\dbinom{n}{j} (-1)^j 3^{(n - i)(n - j)}\\ ]\\ ] \\end{aligned} \\] \u540e\u9762\u90a3\u5768\u770b\u8d77\u6765\u50cf\u4e8c\u9879\u5f0f\u5b9a\u7406\uff0c\u628a \\(j=0\\) \u8865\u4e0a\u4e4b\u540e\u51cf\u53bb\u518d\u7528\u4e8c\u9879\u5f0f\u5b9a\u7406\uff1a \u4e5f\u53ef\u4ee5\u62c9\u51fa\u6765\u53d8\u6210\u4e24\u4e2a \\(\\sum\\) \u7684\u4e58\u79ef\uff0c\u5c31\u53ef\u4ee5\u5408\u5e76\u4e86\u3002 \\[ ans = 3\\sum\\limits_{i > 0}\\ [\\ \\dbinom{n}{i}(-1)^i([3^{n - i} - 1]^n - 3^{(n - i)n})\\ ] \\] \u7136\u540e\u5c31\u53ef\u4ee5 \\(O(n \\log n)\\) \u505a\u4e86\u3002 \u4ee3\u7801\u5b9e\u73b0\u6709\u51e0\u4e2a\u7ec6\u8282\uff0c\u6ce8\u610f\u51cf\u6cd5\u4e4b\u540e\u8981\u52a0mod\uff0c\u7136\u540e\u5c3d\u91cf\u7528 i64 \u505a\u8fd0\u7b97\u907f\u514d\u5fd8\u8bb0\u4e58 1ll\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 // author : black_trees #include <cmath> #include <cstdio> #include <vector> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; using i64 = long long ; const i64 si = 1e6 + 10 ; const i64 mod = 998244353 ; i64 n ; i64 inv [ si ], fact [ si ], invf [ si ]; void init ( i64 n ) { inv [ 1 ] = 1 , fact [ 0 ] = invf [ 0 ] = 1 ; for ( i64 i = 2 ; i <= n ; ++ i ) inv [ i ] = 1l l * ( mod - mod / i ) * inv [ mod % i ] % mod ; for ( i64 i = 1 ; i <= n ; ++ i ) fact [ i ] = 1l l * fact [ i - 1 ] * i % mod , invf [ i ] = 1l l * invf [ i - 1 ] * inv [ i ] % mod ; } i64 C ( i64 n , i64 m ) { if ( m < 0 || n < m ) return 0 ; return 1l l * fact [ n ] * invf [ n - m ] % mod * invf [ m ] % mod ; } i64 Qpow ( i64 a , i64 b ) { i64 ret = 1 % mod ; for (; b ; b >>= 1 ) { if ( b & 1 ) ret = ret * a % mod ; a = a * a % mod ; } return ret % mod ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); i64 ans = 0 , sum = 0 ; cin >> n , init ( n ); for ( i64 i = 1 ; i <= n ; i ++ ) ans = ( ans + Qpow ( 3l l , ( 1l l * n * ( n - i ) + i )) * Qpow ( -1ll , i + 1l l ) * C ( n , i ) % mod + mod ) % mod ; ans = ans * 2l l % mod ; i64 tmp = 0 ; for ( i64 i = 0 ; i < n ; i ++ ) { i64 t = - Qpow ( 3l l , i ); tmp = ( tmp + C ( n , i ) * Qpow ( -1 , i + 1l l ) * ( Qpow ( 1 + t , n ) - Qpow ( t , n ) + mod ) % mod + mod ) % mod ; } ans = ( ans + tmp * 3 ) % mod ; cout << ans % mod << endl ; return 0 ; }","title":"CF997C Sky Full of Stars"},{"location":"algor/math/combinatorics/inclusion-exclusion-principle/#arc101ec-ribbons-on-tree","text":"To be continued.","title":"ARC101(E/C) Ribbons on Tree"},{"location":"algor/math/combinatorics/lucas/","text":"Lucas \u5b9a\u7406 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5185\u5bb9 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5bf9\u4e8e\u4efb\u610f\u8d28\u6570 \\(p\\) \uff0c\u5b58\u5728\u5982\u4e0b\u5b9a\u7406\uff1a \\[ \\dbinom{n}{m} \\equiv \\dbinom{\\lfloor\\frac{n}{p}\\rfloor}{\\lfloor\\frac{m}{p}\\rfloor} \\cdot \\dbinom{n \\bmod p}{m \\bmod p} \\pmod p \\] \u8bc1\u660e \u03c8(\uff40\u2207\u00b4)\u03c8 \u6574\u4e2a\u8fc7\u7a0b\u6781\u5ea6\u871c\u8702\uff0c\u4e0d\u77e5\u9053\u548b\u60f3\u51fa\u6765\u7684\u3002 \u9996\u5148\u8003\u8651\u8bc1\u660e\u4e00\u4e2a\u5f15\u7406\uff1a I. \u5bf9\u4e8e\u4e00\u4e2a\u5173\u4e8e \\(x\\) \u7684 \\(p\\) \u6b21\u4e8c\u9879\u5f0f \\(f^p(x) = (ax^n + bx^m)^p\\) \uff0c\u6709\uff1a \\(f^p(x) \\equiv f(x^p) \\pmod p\\) \u5373\u662f \\((ax^n + bx^m)^p \\equiv (a^px^{pn} + b^px^{pm}) \\pmod p\\) \u3002 \u6211\u4eec\u8003\u8651\u5148\u8bc1\u660e\u5f31\u5316\u7248\u672c\uff0c\u7136\u540e\u518d\u63a8\u5e7f\uff1a II. \u5bf9\u4e8e\u4e8c\u9879\u5f0f \\((a + b)^p\\) \uff0c\u5b83\u5728\u6a21 \\(p\\) \u610f\u4e49\u4e0b\u548c \\(a^p + b^p\\) \u540c\u4f59\u3002 \u8003\u8651\u4e8c\u9879\u5f0f\u7cfb\u6570 \\(\\dbinom{p}{i}\\) \u7684\u53d6\u503c\uff0c\u62c6\u5f00\u8003\u8651\uff1a \\(\\dfrac{p!}{i!(p - i)!}\\) \uff0c\u6ce8\u610f\u5230\u5206\u5b50\u53ea\u6709\u4e00\u4e2a \\(p\\) \uff0c\u6240\u4ee5\u5728\u6a21 \\(p\\) \u610f\u4e49\u4e0b\uff0c\u53ea\u6709\u5f53 \\(i = 0\\) \u6216\u8005 \\(i = p\\) \u7684\u65f6\u5019\uff0c \\(\\dbinom{p}{i} = 1\\) \uff0c\u5426\u5219\u7b49\u4e8e \\(0\\) \u3002 \u6240\u4ee5\u4ee3\u5165\u4e8c\u9879\u5f0f\u5b9a\u7406\uff1a \\((a + b)^p \\equiv \\sum\\limits_{i = 0}^p \\dbinom{p}{i} a^{p - i}b^i \\equiv \\sum\\limits_{i = 0}^p [i = 0\\ \\lor\\ i = p] a^{p - i}b^i \\equiv a^p + b^p \\pmod p\\) \u3002 \u8fd9\u91cc\u6ca1\u6709\u4f7f\u7528\u4efb\u4f55\u5176\u4ed6\u6709\u9650\u5236\u7684\u5b9a\u7406\uff0c\u6240\u4ee5\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u6bd4\u8f83\u81ea\u7136\u7684\u63a8\u5e7f\u5230\u591a\u9879\u5f0f\u5f62\u5f0f\u3002 \u7136\u540e\u6211\u4eec\u56de\u5230\u539f\u95ee\u9898\uff0c\u6c42 \\(\\dbinom{n}{m} \\bmod p\\) \u672c\u8d28\u4e0a\u662f\u6c42 \\([x^m](1 + x)^n \\mod p\\) \uff0c\u6b64\u65f6\u6709\u4e00\u4e2a\u6bd4\u8f83\u871c\u8702\u7684\u60f3\u6cd5\uff0c\u6211\u4eec\u8003\u8651\u628a\u4f59\u6570\u5206\u79bb\u4e00\u4e0b\uff1a \\[ \\begin{aligned} (1 + x)^n &\\equiv (1 + x)^{p \\lfloor\\frac{n}{p}\\rfloor} (1 + x)^{n \\bmod p} \\pmod p\\\\ &\\equiv (1^p + x^p)^{\\lfloor\\frac{n}{p}\\rfloor}(1 + x)^{n \\bmod p}\\pmod p\\ (\\text{use theorem I.})\\\\ &\\equiv (1 + x)^{\\lfloor\\frac{n}{p}\\rfloor}(1 + x) ^{n \\bmod p} \\pmod p\\ (\\text{use theorem II.}) \\end{aligned} \\] \u7136\u540e\u6211\u4eec\u5bf9\u4e24\u8fb9\u5206\u522b\u770b\u4e00\u4e0b\u8d21\u732e\uff1a \\([x^m](1+x)^{\\lfloor\\frac{n}{p}\\rfloor} = \\dbinom{\\frac{n}{p}}{\\frac{m}{p}},[x^m](1 + x)^{n \\bmod p} = \\dbinom{n\\bmod p}{m\\bmod p}\\) \u3002 \u7531\u6b64\uff0c\u53ef\u4ee5\u5f97\u5230 Lucas \u5b9a\u7406\u7684\u8868\u8fbe\u5f0f\uff0cQ.E.D. \u5b9e\u73b0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u56e0\u4e3a \\(n / p\\) \u7684\u6570\u91cf\u7ea7\u671f\u671b\u663e\u7136\u5927\u4e8e \\(n \\bmod p\\) \uff0c\u6240\u4ee5\u6211\u4eec\u9884\u5904\u7406\u6a21 \\(p\\) \u610f\u4e49\u4e0b\u7684\u7ec4\u5408\u6570\uff0c\u524d\u8005\u76f4\u63a5\u8c03\u7528\uff0c\u540e\u8005\u9012\u5f52 \\(\\log p\\) \u6b21\u5373\u53ef\uff0c\u6240\u4ee5\u4e00\u822c\u6765\u8bf4 Lucas \u8981\u6c42 \\(p < 10^5\\) \u3002 1 2 3 4 i64 lucas ( i64 n , i64 m , i64 p ) { if ( m == 0 ) return 1l l ; return ( C ( n % p , m % p , p ) * lucas ( n / p , m / p , p )) % p ; } exLucas \u03c8(\uff40\u2207\u00b4)\u03c8 \u53ef\u4ee5\u5bf9\u4e8e\u4efb\u610f\u6b63\u6574\u6570 \\(p\\) \u4f7f\u7528\u7684 Lucas\u3002 \u8003\u8651\u7c7b\u4f3c exCRT \u7684\u7ecf\u5178\u5957\u8def\uff0c\u6211\u4eec\u5206\u89e3\u8d28\u56e0\u6570\uff0c\u7528 CRT \u6784\u9020\u4e00\u4e2a\u65b9\u7a0b\u7136\u540e\u5408\u5e76\uff0c\u8fd9\u6837\u6bcf\u4e2a\u65b9\u7a0b\u91cc\u9762\u90fd\u662f\u4e00\u4e2a Lucas\u3002 \u4e5f\u5c31\u662f\uff0c\u4ee4 \\(p = \\prod\\limits_{i = 1}^ra_{r}^{c_r}\\) \u3002 \u7136\u540e\u56e0\u4e3a\u4efb\u610f \\(a_{i}^{c_i}, a_{j}^{c_j}\\) \u4e92\u8d28\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u4ed6\u4eec\u5f53\u4f5c\u6a21\u6570\u3002 \u7531 CRT\uff0c\u4ee4 \\(\\dbinom{n}{m}\\) \u4e3a\u672a\u77e5\u6570\uff0c\u6709\uff1a \\[ \\begin{cases} c_1 &\\equiv \\dbinom{n}{m} \\pmod {a_{1}^{c_1}} \\\\ c_2 &\\equiv \\dbinom{n}{m} \\pmod {a_{2}^{c_2}} \\\\ &\\cdots\\\\ c_r &\\equiv \\dbinom{n}{m} \\pmod {a_{r}^{c_r}} \\end{cases} \\] \u53ef\u4ee5\u7531\u6b64\u89e3\u51fa\u672a\u77e5\u6570\u5728\u6a21 \\(p\\) \u610f\u4e49\u4e0b\u7684\u552f\u4e00\u89e3 \\(\\dbinom{n}{m} \\bmod p\\)","title":"Lucas \u5b9a\u7406"},{"location":"algor/math/combinatorics/lucas/#lucas","text":"","title":"Lucas \u5b9a\u7406"},{"location":"algor/math/combinatorics/lucas/#_1","text":"\u5bf9\u4e8e\u4efb\u610f\u8d28\u6570 \\(p\\) \uff0c\u5b58\u5728\u5982\u4e0b\u5b9a\u7406\uff1a \\[ \\dbinom{n}{m} \\equiv \\dbinom{\\lfloor\\frac{n}{p}\\rfloor}{\\lfloor\\frac{m}{p}\\rfloor} \\cdot \\dbinom{n \\bmod p}{m \\bmod p} \\pmod p \\]","title":"\u5185\u5bb9"},{"location":"algor/math/combinatorics/lucas/#_2","text":"\u6574\u4e2a\u8fc7\u7a0b\u6781\u5ea6\u871c\u8702\uff0c\u4e0d\u77e5\u9053\u548b\u60f3\u51fa\u6765\u7684\u3002 \u9996\u5148\u8003\u8651\u8bc1\u660e\u4e00\u4e2a\u5f15\u7406\uff1a I. \u5bf9\u4e8e\u4e00\u4e2a\u5173\u4e8e \\(x\\) \u7684 \\(p\\) \u6b21\u4e8c\u9879\u5f0f \\(f^p(x) = (ax^n + bx^m)^p\\) \uff0c\u6709\uff1a \\(f^p(x) \\equiv f(x^p) \\pmod p\\) \u5373\u662f \\((ax^n + bx^m)^p \\equiv (a^px^{pn} + b^px^{pm}) \\pmod p\\) \u3002 \u6211\u4eec\u8003\u8651\u5148\u8bc1\u660e\u5f31\u5316\u7248\u672c\uff0c\u7136\u540e\u518d\u63a8\u5e7f\uff1a II. \u5bf9\u4e8e\u4e8c\u9879\u5f0f \\((a + b)^p\\) \uff0c\u5b83\u5728\u6a21 \\(p\\) \u610f\u4e49\u4e0b\u548c \\(a^p + b^p\\) \u540c\u4f59\u3002 \u8003\u8651\u4e8c\u9879\u5f0f\u7cfb\u6570 \\(\\dbinom{p}{i}\\) \u7684\u53d6\u503c\uff0c\u62c6\u5f00\u8003\u8651\uff1a \\(\\dfrac{p!}{i!(p - i)!}\\) \uff0c\u6ce8\u610f\u5230\u5206\u5b50\u53ea\u6709\u4e00\u4e2a \\(p\\) \uff0c\u6240\u4ee5\u5728\u6a21 \\(p\\) \u610f\u4e49\u4e0b\uff0c\u53ea\u6709\u5f53 \\(i = 0\\) \u6216\u8005 \\(i = p\\) \u7684\u65f6\u5019\uff0c \\(\\dbinom{p}{i} = 1\\) \uff0c\u5426\u5219\u7b49\u4e8e \\(0\\) \u3002 \u6240\u4ee5\u4ee3\u5165\u4e8c\u9879\u5f0f\u5b9a\u7406\uff1a \\((a + b)^p \\equiv \\sum\\limits_{i = 0}^p \\dbinom{p}{i} a^{p - i}b^i \\equiv \\sum\\limits_{i = 0}^p [i = 0\\ \\lor\\ i = p] a^{p - i}b^i \\equiv a^p + b^p \\pmod p\\) \u3002 \u8fd9\u91cc\u6ca1\u6709\u4f7f\u7528\u4efb\u4f55\u5176\u4ed6\u6709\u9650\u5236\u7684\u5b9a\u7406\uff0c\u6240\u4ee5\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u6bd4\u8f83\u81ea\u7136\u7684\u63a8\u5e7f\u5230\u591a\u9879\u5f0f\u5f62\u5f0f\u3002 \u7136\u540e\u6211\u4eec\u56de\u5230\u539f\u95ee\u9898\uff0c\u6c42 \\(\\dbinom{n}{m} \\bmod p\\) \u672c\u8d28\u4e0a\u662f\u6c42 \\([x^m](1 + x)^n \\mod p\\) \uff0c\u6b64\u65f6\u6709\u4e00\u4e2a\u6bd4\u8f83\u871c\u8702\u7684\u60f3\u6cd5\uff0c\u6211\u4eec\u8003\u8651\u628a\u4f59\u6570\u5206\u79bb\u4e00\u4e0b\uff1a \\[ \\begin{aligned} (1 + x)^n &\\equiv (1 + x)^{p \\lfloor\\frac{n}{p}\\rfloor} (1 + x)^{n \\bmod p} \\pmod p\\\\ &\\equiv (1^p + x^p)^{\\lfloor\\frac{n}{p}\\rfloor}(1 + x)^{n \\bmod p}\\pmod p\\ (\\text{use theorem I.})\\\\ &\\equiv (1 + x)^{\\lfloor\\frac{n}{p}\\rfloor}(1 + x) ^{n \\bmod p} \\pmod p\\ (\\text{use theorem II.}) \\end{aligned} \\] \u7136\u540e\u6211\u4eec\u5bf9\u4e24\u8fb9\u5206\u522b\u770b\u4e00\u4e0b\u8d21\u732e\uff1a \\([x^m](1+x)^{\\lfloor\\frac{n}{p}\\rfloor} = \\dbinom{\\frac{n}{p}}{\\frac{m}{p}},[x^m](1 + x)^{n \\bmod p} = \\dbinom{n\\bmod p}{m\\bmod p}\\) \u3002 \u7531\u6b64\uff0c\u53ef\u4ee5\u5f97\u5230 Lucas \u5b9a\u7406\u7684\u8868\u8fbe\u5f0f\uff0cQ.E.D.","title":"\u8bc1\u660e"},{"location":"algor/math/combinatorics/lucas/#_3","text":"\u56e0\u4e3a \\(n / p\\) \u7684\u6570\u91cf\u7ea7\u671f\u671b\u663e\u7136\u5927\u4e8e \\(n \\bmod p\\) \uff0c\u6240\u4ee5\u6211\u4eec\u9884\u5904\u7406\u6a21 \\(p\\) \u610f\u4e49\u4e0b\u7684\u7ec4\u5408\u6570\uff0c\u524d\u8005\u76f4\u63a5\u8c03\u7528\uff0c\u540e\u8005\u9012\u5f52 \\(\\log p\\) \u6b21\u5373\u53ef\uff0c\u6240\u4ee5\u4e00\u822c\u6765\u8bf4 Lucas \u8981\u6c42 \\(p < 10^5\\) \u3002 1 2 3 4 i64 lucas ( i64 n , i64 m , i64 p ) { if ( m == 0 ) return 1l l ; return ( C ( n % p , m % p , p ) * lucas ( n / p , m / p , p )) % p ; }","title":"\u5b9e\u73b0"},{"location":"algor/math/combinatorics/lucas/#exlucas","text":"\u53ef\u4ee5\u5bf9\u4e8e\u4efb\u610f\u6b63\u6574\u6570 \\(p\\) \u4f7f\u7528\u7684 Lucas\u3002 \u8003\u8651\u7c7b\u4f3c exCRT \u7684\u7ecf\u5178\u5957\u8def\uff0c\u6211\u4eec\u5206\u89e3\u8d28\u56e0\u6570\uff0c\u7528 CRT \u6784\u9020\u4e00\u4e2a\u65b9\u7a0b\u7136\u540e\u5408\u5e76\uff0c\u8fd9\u6837\u6bcf\u4e2a\u65b9\u7a0b\u91cc\u9762\u90fd\u662f\u4e00\u4e2a Lucas\u3002 \u4e5f\u5c31\u662f\uff0c\u4ee4 \\(p = \\prod\\limits_{i = 1}^ra_{r}^{c_r}\\) \u3002 \u7136\u540e\u56e0\u4e3a\u4efb\u610f \\(a_{i}^{c_i}, a_{j}^{c_j}\\) \u4e92\u8d28\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u4ed6\u4eec\u5f53\u4f5c\u6a21\u6570\u3002 \u7531 CRT\uff0c\u4ee4 \\(\\dbinom{n}{m}\\) \u4e3a\u672a\u77e5\u6570\uff0c\u6709\uff1a \\[ \\begin{cases} c_1 &\\equiv \\dbinom{n}{m} \\pmod {a_{1}^{c_1}} \\\\ c_2 &\\equiv \\dbinom{n}{m} \\pmod {a_{2}^{c_2}} \\\\ &\\cdots\\\\ c_r &\\equiv \\dbinom{n}{m} \\pmod {a_{r}^{c_r}} \\end{cases} \\] \u53ef\u4ee5\u7531\u6b64\u89e3\u51fa\u672a\u77e5\u6570\u5728\u6a21 \\(p\\) \u610f\u4e49\u4e0b\u7684\u552f\u4e00\u89e3 \\(\\dbinom{n}{m} \\bmod p\\)","title":"exLucas"},{"location":"algor/math/combinatorics/pigeonhole-principle/","text":"\u6458\u5f55\u81ea OI-Wiki \u62bd\u5c49\u539f\u7406\uff0c\u4ea6\u79f0\u9e3d\u5de2\u539f\u7406\uff08the pigeonhole principle)\u3002 \u5b83\u5e38\u88ab\u7528\u4e8e\u8bc1\u660e\u5b58\u5728\u6027\u8bc1\u660e\u548c\u6c42\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u89e3\u3002 \u7b80\u5355\u60c5\u51b5 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5c06 \\(n+1\\) \u4e2a\u7269\u4f53\uff0c\u5212\u5206\u4e3a \\(n\\) \u7ec4\uff0c\u90a3\u4e48\u6709\u81f3\u5c11\u4e00\u7ec4\u6709\u4e24\u4e2a\uff08\u6216\u4ee5\u4e0a\uff09\u7684\u7269\u4f53\u3002 \u8fd9\u4e2a\u5b9a\u7406\u770b\u8d77\u6765\u6bd4\u8f83\u663e\u7136\uff0c\u8bc1\u660e\u65b9\u6cd5\u8003\u8651\u53cd\u8bc1\u6cd5\uff1a\u5047\u5982\u6bcf\u4e2a\u5206\u7ec4\u6709\u81f3\u591a \\(1\\) \u4e2a\u7269\u4f53\uff0c\u90a3\u4e48\u6700\u591a\u6709 \\(1\\times n\\) \u4e2a\u7269\u4f53\uff0c\u800c\u5b9e\u9645\u4e0a\u6709 \\(n+1\\) \u4e2a\u7269\u4f53\uff0c\u77db\u76fe\u3002 \u63a8\u5e7f \u03c8(\uff40\u2207\u00b4)\u03c8 \u5c06 \\(n\\) \u4e2a\u7269\u4f53\uff0c\u5212\u5206\u4e3a \\(k\\) \u7ec4\uff0c\u90a3\u4e48\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u5206\u7ec4\uff0c\u542b\u6709\u5927\u4e8e\u6216\u7b49\u4e8e \\(\\left \\lceil \\dfrac{n}{k} \\right \\rceil\\) \u4e2a\u7269\u54c1\u3002 \u63a8\u5e7f\u7684\u5f62\u5f0f\u4e5f\u53ef\u4ee5\u4f7f\u7528\u53cd\u8bc1\u6cd5\u8bc1\u660e\uff1a\u82e5\u6bcf\u4e2a\u5206\u7ec4\u542b\u6709\u5c0f\u4e8e \\(\\left \\lceil \\dfrac{n}{k} \\right \\rceil\\) \u4e2a\u7269\u4f53\uff0c\u5219\u5176\u603b\u548c \\(S\\leq (\\left \\lceil \\dfrac{n}{k} \\right \\rceil -1 ) \\times k=k\\left\\lceil \\dfrac{n}{k} \\right\\rceil-k < k(\\dfrac{n}{k}+1)-k=n\\) \u77db\u76fe\u3002 \u6b64\u5916\uff0c\u5212\u5206\u8fd8\u53ef\u4ee5\u5f31\u5316\u4e3a\u8986\u76d6\u7ed3\u8bba\u4e0d\u53d8\u3002 \u7ed9\u5b9a\u96c6\u5408 \\(S\\) , \u4e00\u4e2a \\(S\\) \u7684\u975e\u7a7a\u5b50\u96c6\u6784\u6210\u7684\u7c07 \\(\\{A_1,A_2\\ldots A_k\\}\\) \u82e5\u6ee1\u8db3 \\(\\bigcup_{i=1}^k A_i\\) \u5219\u79f0\u4e3a \\(S\\) \u7684\u4e00\u4e2a\u8986\u76d6\uff08cover) \u82e5\u4e00\u4e2a\u8986\u76d6\u8fd8\u6ee1\u8db3 \\(i\\neq j\\to A_i\\cap A_j=\\varnothing\\) \u5219\u79f0\u4e3a \\(S\\) \u7684\u4e00\u4e2a\u5212\u5206\u3002 \u9e3d\u5de2\u539f\u7406\u53ef\u4ee5\u6709\u5982\u4e0b\u53d9\u8ff0\uff1a\u5bf9\u4e8e \\(S\\) \u7684\u4e00\u4e2a\u8986\u76d6 \\(\\{A_1,A_2\\ldots A_k\\}\\) \u6709\u81f3\u5c11\u4e00\u4e2a\u96c6\u5408 \\(A_i\\) \u6ee1\u8db3 \\(\\left\\vert A_i \\right\\vert \\geq \\left\\lceil \\dfrac{\\left\\vert S \\right\\vert}{k} \\right\\rceil\\) \u3002","title":"\u9e3d\u5de2\u539f\u7406"},{"location":"algor/math/combinatorics/pigeonhole-principle/#_1","text":"\u5c06 \\(n+1\\) \u4e2a\u7269\u4f53\uff0c\u5212\u5206\u4e3a \\(n\\) \u7ec4\uff0c\u90a3\u4e48\u6709\u81f3\u5c11\u4e00\u7ec4\u6709\u4e24\u4e2a\uff08\u6216\u4ee5\u4e0a\uff09\u7684\u7269\u4f53\u3002 \u8fd9\u4e2a\u5b9a\u7406\u770b\u8d77\u6765\u6bd4\u8f83\u663e\u7136\uff0c\u8bc1\u660e\u65b9\u6cd5\u8003\u8651\u53cd\u8bc1\u6cd5\uff1a\u5047\u5982\u6bcf\u4e2a\u5206\u7ec4\u6709\u81f3\u591a \\(1\\) \u4e2a\u7269\u4f53\uff0c\u90a3\u4e48\u6700\u591a\u6709 \\(1\\times n\\) \u4e2a\u7269\u4f53\uff0c\u800c\u5b9e\u9645\u4e0a\u6709 \\(n+1\\) \u4e2a\u7269\u4f53\uff0c\u77db\u76fe\u3002","title":"\u7b80\u5355\u60c5\u51b5"},{"location":"algor/math/combinatorics/pigeonhole-principle/#_2","text":"\u5c06 \\(n\\) \u4e2a\u7269\u4f53\uff0c\u5212\u5206\u4e3a \\(k\\) \u7ec4\uff0c\u90a3\u4e48\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u5206\u7ec4\uff0c\u542b\u6709\u5927\u4e8e\u6216\u7b49\u4e8e \\(\\left \\lceil \\dfrac{n}{k} \\right \\rceil\\) \u4e2a\u7269\u54c1\u3002 \u63a8\u5e7f\u7684\u5f62\u5f0f\u4e5f\u53ef\u4ee5\u4f7f\u7528\u53cd\u8bc1\u6cd5\u8bc1\u660e\uff1a\u82e5\u6bcf\u4e2a\u5206\u7ec4\u542b\u6709\u5c0f\u4e8e \\(\\left \\lceil \\dfrac{n}{k} \\right \\rceil\\) \u4e2a\u7269\u4f53\uff0c\u5219\u5176\u603b\u548c \\(S\\leq (\\left \\lceil \\dfrac{n}{k} \\right \\rceil -1 ) \\times k=k\\left\\lceil \\dfrac{n}{k} \\right\\rceil-k < k(\\dfrac{n}{k}+1)-k=n\\) \u77db\u76fe\u3002 \u6b64\u5916\uff0c\u5212\u5206\u8fd8\u53ef\u4ee5\u5f31\u5316\u4e3a\u8986\u76d6\u7ed3\u8bba\u4e0d\u53d8\u3002 \u7ed9\u5b9a\u96c6\u5408 \\(S\\) , \u4e00\u4e2a \\(S\\) \u7684\u975e\u7a7a\u5b50\u96c6\u6784\u6210\u7684\u7c07 \\(\\{A_1,A_2\\ldots A_k\\}\\) \u82e5\u6ee1\u8db3 \\(\\bigcup_{i=1}^k A_i\\) \u5219\u79f0\u4e3a \\(S\\) \u7684\u4e00\u4e2a\u8986\u76d6\uff08cover) \u82e5\u4e00\u4e2a\u8986\u76d6\u8fd8\u6ee1\u8db3 \\(i\\neq j\\to A_i\\cap A_j=\\varnothing\\) \u5219\u79f0\u4e3a \\(S\\) \u7684\u4e00\u4e2a\u5212\u5206\u3002 \u9e3d\u5de2\u539f\u7406\u53ef\u4ee5\u6709\u5982\u4e0b\u53d9\u8ff0\uff1a\u5bf9\u4e8e \\(S\\) \u7684\u4e00\u4e2a\u8986\u76d6 \\(\\{A_1,A_2\\ldots A_k\\}\\) \u6709\u81f3\u5c11\u4e00\u4e2a\u96c6\u5408 \\(A_i\\) \u6ee1\u8db3 \\(\\left\\vert A_i \\right\\vert \\geq \\left\\lceil \\dfrac{\\left\\vert S \\right\\vert}{k} \\right\\rceil\\) \u3002","title":"\u63a8\u5e7f"},{"location":"algor/math/combinatorics/stirling/","text":"\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5b9a\u4e49\uff1a\u5c06 \\(n\\) \u4e2a\u4e0d\u540c\u5143\u7d20\u5206\u5230 \\(k\\) \u4e2a\u5b8c\u5168\u76f8\u540c\u7684\u975e\u7a7a\u76d2\u5b50\u91cc\u9762\u7684\u65b9\u6848\u6570\u4e3a \\(\\begin{Bmatrix}n \\\\ k\\end{Bmatrix}\\) \u3002 \u9012\u63a8\u5f0f\uff1a \\(\\begin{Bmatrix}n \\\\ k\\end{Bmatrix} = \\begin{Bmatrix}n - 1 \\\\ k - 1\\end{Bmatrix} + k \\begin{Bmatrix}n - 1 \\\\ k\\end{Bmatrix}\\) \u3002 \u8bc1\u660e\uff1a\u5c31\u662f\u8003\u8651\u65b0\u52a0\u5165\u7684\u8fd9\u4e2a\u7403\u662f\u653e\u5230\u539f\u6709\u7684\u8fd8\u662f\u65b0\u5efa\u4e00\u4e2a\u3002 \u8fb9\u754c\uff1a \\(\\begin{Bmatrix}n \\\\ 0\\end{Bmatrix} = [n = 0]\\) \u3002","title":"\u65af\u7279\u6797\u6570"},{"location":"algor/math/combinatorics/stirling/#_1","text":"\u5b9a\u4e49\uff1a\u5c06 \\(n\\) \u4e2a\u4e0d\u540c\u5143\u7d20\u5206\u5230 \\(k\\) \u4e2a\u5b8c\u5168\u76f8\u540c\u7684\u975e\u7a7a\u76d2\u5b50\u91cc\u9762\u7684\u65b9\u6848\u6570\u4e3a \\(\\begin{Bmatrix}n \\\\ k\\end{Bmatrix}\\) \u3002 \u9012\u63a8\u5f0f\uff1a \\(\\begin{Bmatrix}n \\\\ k\\end{Bmatrix} = \\begin{Bmatrix}n - 1 \\\\ k - 1\\end{Bmatrix} + k \\begin{Bmatrix}n - 1 \\\\ k\\end{Bmatrix}\\) \u3002 \u8bc1\u660e\uff1a\u5c31\u662f\u8003\u8651\u65b0\u52a0\u5165\u7684\u8fd9\u4e2a\u7403\u662f\u653e\u5230\u539f\u6709\u7684\u8fd8\u662f\u65b0\u5efa\u4e00\u4e2a\u3002 \u8fb9\u754c\uff1a \\(\\begin{Bmatrix}n \\\\ 0\\end{Bmatrix} = [n = 0]\\) \u3002","title":"\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570"},{"location":"algor/math/combinatorics/vandermonde-convolution/","text":"\u516c\u5f0f \u03c8(\uff40\u2207\u00b4)\u03c8 \u53c8\u79f0\u6731\u4e16\u6770-\u8303\u5fb7\u8499\u5fb7\u6052\u7b49\u5f0f(Chu-Vandermonde Identity)\u3002 \\[ \\sum\\limits_{i = 0}^k \\dbinom{n}{i}\\dbinom{m}{k - i} = \\dbinom{n + m}{k} \\] \u4e5f\u53ef\u4ee5\u5199\u6210\uff1a \\[ \\sum\\limits_{i = -r}^s \\dbinom{n}{r + i} \\dbinom{m}{s - i} = \\dbinom{n + m}{r + s} \\] \u8bc1\u660e \u03c8(\uff40\u2207\u00b4)\u03c8 \u53ea\u8bc1\u660e\u7b2c\u4e00\u4e2a\u5f0f\u5b50\uff0c\u7b2c\u4e8c\u4e2a\u7c7b\u4f3c\u3002 \u8003\u8651\u7ec4\u5408\u610f\u4e49\u3002 \u672c\u8d28\u4e0a\u5c31\u662f\u5728\u4e24\u4e2a\u96c6\u5408 \\(S, T\\) \u5f53\u4e2d\u9009 \\(k\\) \u4e2a\u6570\uff0c\u5176\u4e2d \\(|S| = n, |T| = m\\) \u3002 \u4e5f\u5c31\u662f\u5206\u522b\u8003\u8651\u5728\u4e24\u8fb9\u5404\u9009\u51e0\u4e2a\uff0c\u7136\u540e\u4e58\u8d77\u6765\uff0c\u4e0d\u96be\u53d1\u73b0\u5b83\u7b49\u4ef7\u4e8e\u5728 \\(S\\cup T\\) \u5f53\u4e2d\u9009 \\(k\\) \u4e2a\uff0c\u516c\u5f0f\u5f97\u8bc1\u3002 \u63a8\u8bba \u03c8(\uff40\u2207\u00b4)\u03c8 I \u03c8(\uff40\u2207\u00b4)\u03c8 \\[ \\sum\\limits_{i = 0}^n \\dbinom{n}{i}^2 = \\dbinom{2n}{n} \\] \u7531 \\(\\dbinom{n}{i} = \\dbinom{n}{n - i}\\) \uff0c\u7ed3\u5408\u516c\u5f0f\u53ef\u4ee5\u5f97\u5230\u3002 II \u03c8(\uff40\u2207\u00b4)\u03c8 \\[ \\sum\\limits_{i = 0}^n \\dbinom{n}{i}\\dbinom{m}{i} = \\dbinom{n + m}{n} \\] \u7531 \\(\\dbinom{n}{i} = \\dbinom{n}{n - i}\\) \u7ed3\u5408\u516c\u5f0f\u53ef\u4ee5\u5f97\u5230\uff0c\u63a8\u8bba I \u662f\u8fd9\u4e2a\u7684\u7279\u6b8a\u60c5\u51b5\u3002 \u4e5f\u53ef\u4ee5\u8003\u8651\u7f51\u683c\u56fe\u8def\u5f84\u8ba1\u6570\uff0c\u7528\u7ec4\u5408\u610f\u4e49\u8bc1\u660e\uff0c\u8fd9\u91cc\u7701\u7565\u4e0d\u63d0\u3002 III \u03c8(\uff40\u2207\u00b4)\u03c8 \\[ \\sum\\limits_{i = 1}^n\\dbinom{n}{i}\\dbinom{n}{i - 1} = \\dbinom{2n}{n - 1} \\] \u8fd9\u4e2a\u5f0f\u5b50\u8981\u5c0f\u5fc3\u4e0b\u6807\uff0c\u6ca1\u6709 \\(0\\) \uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u600e\u4e48\u641e\u51fa \\(0\\) \u3002 \u62c6\u4e00\u9879\u51fa\u53bb\uff1a \\[ \\sum\\limits_{i = 1}^{n - 1}\\dbinom{n}{i}\\dbinom{n}{i - 1} + \\dbinom{n}{n - 1} \\] \u6ce8\u610f\u5230 \\(\\dbinom{n}{0} = 1 = \\dbinom{n}{n}\\) \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6574\u4f53\u5e73\u79fb\u4e00\u4f4d\uff1a \\[ \\sum\\limits_{i = 0}^{n - 1}\\dbinom{n}{i}\\dbinom{n}{i + 1} \\iff \\\\ \\sum\\limits_{i = 0}^{n - 1}\\dbinom{n}{i}\\dbinom{n}{n - i - 1} \\iff \\\\ \\dbinom{2n}{n - 1} \\] \u4f8b\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8","title":"\u8303\u5fb7\u8499\u5fb7\u5377\u79ef"},{"location":"algor/math/combinatorics/vandermonde-convolution/#_1","text":"\u53c8\u79f0\u6731\u4e16\u6770-\u8303\u5fb7\u8499\u5fb7\u6052\u7b49\u5f0f(Chu-Vandermonde Identity)\u3002 \\[ \\sum\\limits_{i = 0}^k \\dbinom{n}{i}\\dbinom{m}{k - i} = \\dbinom{n + m}{k} \\] \u4e5f\u53ef\u4ee5\u5199\u6210\uff1a \\[ \\sum\\limits_{i = -r}^s \\dbinom{n}{r + i} \\dbinom{m}{s - i} = \\dbinom{n + m}{r + s} \\]","title":"\u516c\u5f0f"},{"location":"algor/math/combinatorics/vandermonde-convolution/#_2","text":"\u53ea\u8bc1\u660e\u7b2c\u4e00\u4e2a\u5f0f\u5b50\uff0c\u7b2c\u4e8c\u4e2a\u7c7b\u4f3c\u3002 \u8003\u8651\u7ec4\u5408\u610f\u4e49\u3002 \u672c\u8d28\u4e0a\u5c31\u662f\u5728\u4e24\u4e2a\u96c6\u5408 \\(S, T\\) \u5f53\u4e2d\u9009 \\(k\\) \u4e2a\u6570\uff0c\u5176\u4e2d \\(|S| = n, |T| = m\\) \u3002 \u4e5f\u5c31\u662f\u5206\u522b\u8003\u8651\u5728\u4e24\u8fb9\u5404\u9009\u51e0\u4e2a\uff0c\u7136\u540e\u4e58\u8d77\u6765\uff0c\u4e0d\u96be\u53d1\u73b0\u5b83\u7b49\u4ef7\u4e8e\u5728 \\(S\\cup T\\) \u5f53\u4e2d\u9009 \\(k\\) \u4e2a\uff0c\u516c\u5f0f\u5f97\u8bc1\u3002","title":"\u8bc1\u660e"},{"location":"algor/math/combinatorics/vandermonde-convolution/#_3","text":"","title":"\u63a8\u8bba"},{"location":"algor/math/combinatorics/vandermonde-convolution/#i","text":"\\[ \\sum\\limits_{i = 0}^n \\dbinom{n}{i}^2 = \\dbinom{2n}{n} \\] \u7531 \\(\\dbinom{n}{i} = \\dbinom{n}{n - i}\\) \uff0c\u7ed3\u5408\u516c\u5f0f\u53ef\u4ee5\u5f97\u5230\u3002","title":"I"},{"location":"algor/math/combinatorics/vandermonde-convolution/#ii","text":"\\[ \\sum\\limits_{i = 0}^n \\dbinom{n}{i}\\dbinom{m}{i} = \\dbinom{n + m}{n} \\] \u7531 \\(\\dbinom{n}{i} = \\dbinom{n}{n - i}\\) \u7ed3\u5408\u516c\u5f0f\u53ef\u4ee5\u5f97\u5230\uff0c\u63a8\u8bba I \u662f\u8fd9\u4e2a\u7684\u7279\u6b8a\u60c5\u51b5\u3002 \u4e5f\u53ef\u4ee5\u8003\u8651\u7f51\u683c\u56fe\u8def\u5f84\u8ba1\u6570\uff0c\u7528\u7ec4\u5408\u610f\u4e49\u8bc1\u660e\uff0c\u8fd9\u91cc\u7701\u7565\u4e0d\u63d0\u3002","title":"II"},{"location":"algor/math/combinatorics/vandermonde-convolution/#iii","text":"\\[ \\sum\\limits_{i = 1}^n\\dbinom{n}{i}\\dbinom{n}{i - 1} = \\dbinom{2n}{n - 1} \\] \u8fd9\u4e2a\u5f0f\u5b50\u8981\u5c0f\u5fc3\u4e0b\u6807\uff0c\u6ca1\u6709 \\(0\\) \uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u600e\u4e48\u641e\u51fa \\(0\\) \u3002 \u62c6\u4e00\u9879\u51fa\u53bb\uff1a \\[ \\sum\\limits_{i = 1}^{n - 1}\\dbinom{n}{i}\\dbinom{n}{i - 1} + \\dbinom{n}{n - 1} \\] \u6ce8\u610f\u5230 \\(\\dbinom{n}{0} = 1 = \\dbinom{n}{n}\\) \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6574\u4f53\u5e73\u79fb\u4e00\u4f4d\uff1a \\[ \\sum\\limits_{i = 0}^{n - 1}\\dbinom{n}{i}\\dbinom{n}{i + 1} \\iff \\\\ \\sum\\limits_{i = 0}^{n - 1}\\dbinom{n}{i}\\dbinom{n}{n - i - 1} \\iff \\\\ \\dbinom{2n}{n - 1} \\]","title":"III"},{"location":"algor/math/combinatorics/vandermonde-convolution/#_4","text":"","title":"\u4f8b\u9898"},{"location":"algor/math/linear-algebra/gauss/","text":"\u6982\u8ff0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7b80\u5355\u6765\u8bf4\u5c31\u662f\u7528\u6765\u89e3\u7ebf\u6027\u65b9\u7a0b\u7ec4\u7684\u4e00\u4e2a\u7b97\u6cd5\u3002 \u7ebf\u6027\u65b9\u7a0b\u7ec4\u5c31\u662f\u6bcf\u4e2a\u53d8\u91cf\u7684\u6700\u9ad8\u6b21\u6570\u90fd\u662f\u4e00\u6b21\u7684 \\(n\\) \u5143\u65b9\u7a0b\u7ec4\u3002 \u7c7b\u4f3c\u8fd9\u6837\uff1a \\[ \\begin{cases} 2x_1+4x_2+5x_3 = 23\\\\ 3x_1+5x_2+2x_3 = 14\\\\ 4x_1+6x_2+3x_3 = 24 \\end{cases} \\] \uff08\u968f\u624b\u5199\u7684\u4e0d\u4e00\u5b9a\u6709\u89e3\uff09 \u5c0f\u5b66\u6570\u5b66\u5b66\u8fc7\uff0c\u89e3\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b\u7ec4\u9700\u8981\u7528\u5230\u6d88\u5143\u6cd5\uff0c\u6ce8\u610f\u5230\u6d88\u5143\u6cd5\u7684\u672c\u8d28\u662f\u5bf9\u53d8\u91cf\u7684\u7cfb\u6570\u8fdb\u884c\u8fd0\u7b97\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5199\u51fa\u65b9\u7a0b\u7ec4\u7684\u7cfb\u6570\u77e9\u9635\uff1a \\[ \\begin{bmatrix} 2 & 4 & 5 \\\\ 3 & 5 & 2 \\\\ 4 & 6 & 3 \\end{bmatrix} \\] \u7ebf\u6027\u65b9\u7a0b\u7ec4\u7684\u7b49\u53f7\u53f3\u8fb9\u90fd\u662f\u4e00\u4e2a\u5e38\u6570\uff0c\u4e8e\u662f\u6211\u4eec\u628a\u8fd9\u4e2a\u5e38\u6570\u4e5f\u5199\u8fdb\u53bb\uff1a \\[ \\begin{bmatrix} 2 & 4 & 5 \\ |\\ 23\\\\ 3 & 5 & 2 \\ |\\ 14 \\\\ 4 & 6 & 3 \\ |\\ 24 \\end{bmatrix} \\] \u8fd9\u5c31\u662f\u4e00\u4e2a \\(n\\times (n + 1)\\) \u7684\u589e\u5e7f\u77e9\u9635\uff0c\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u628a\u8fd9\u4e2a\u589e\u5e7f\u77e9\u9635\u901a\u8fc7\u4e00\u4e9b\u53d8\u6362\u53d8\u6210\u8fd9\u6837\u7684\u5f62\u5f0f\uff1a \\[ \\begin{bmatrix} 1 & c_{1,2} &c_{1,3} \\ &|\\ x\\\\ 0 & 1 & c_{2,3}\\ &|\\ y\\\\ 0 & 0 & 1\\ &|\\ z\\\\ \\end{bmatrix} \\] \u5176\u4e2d \\(c\\) \u662f\u4e00\u4e2a\u5e38\u6570\uff0c \\(x,y,z\\) \u90fd\u662f\u5e38\u6570\u3002 \u8fd9\u6837\u7684\u77e9\u9635\u88ab\u53eb\u505a\u65b9\u7a0b\u7ec4\u7684\u4e0a\u4e09\u89d2\u5f62\u77e9\u9635\u3002 \u8fd9\u4e2a\u4e0a\u4e09\u89d2\u5f62\u77e9\u9635\u53ef\u4ee5\u518d\u5316\u7b80\u6210\u4e00\u4e2a\u7b80\u5316\u9636\u68af\u5f62\u77e9\u9635\uff08\u65b9\u5f0f\u662f\u4ece\u4e0b\u5f80\u4e0a\u4ee3\u5165\uff09\uff1a \\[ \\begin{bmatrix} 1 & 0 & 0\\ |\\ a\\\\ 0 & 1 & 0\\ |\\ b\\\\ 0 & 0 & 1\\ |\\ c\\\\ \\end{bmatrix} \\] \u8fd9\u4e2a\u7b80\u5316\u9636\u68af\u5f62\u77e9\u9635\u5c31\u76f4\u63a5\u8868\u793a\u4e86\u65b9\u7a0b\u7ec4\u7684\u552f\u4e00\u89e3 \\(x_1 = a, x_2 = b, x_3 = c\\) \u3002 \u628a\u589e\u5e7f\u77e9\u9635\u53d8\u6210\u4e0a\u4e09\u89d2\u77e9\u9635\uff0c\u518d\u53d8\u6210\u7b80\u5316\u9636\u68af\u5f62\u77e9\u9635\u7684\u8fc7\u7a0b\u5c31\u662f\u9ad8\u65af\u6d88\u5143\u3002 \u5177\u4f53\u5206\u4e09\u6b65\uff1a \u626b\u63cf \\(i \\in [1, n]\\) \uff0c\u5bf9\u4e8e \\(i\\) \uff0c\u4ece \\([i,n]\\) \u884c\u5f53\u4e2d \u627e\u5230\u4e00\u4e2a \\(x_{1} \\sim x_{i-1}\\) \u7684\u7cfb\u6570\u90fd\u4e3a\u96f6\uff0c \\(x_i\\) \u7684\u7cfb\u6570\u4e0d\u4e3a\u96f6\u7684\u884c\uff0c\u628a\u5b83\u4ea4\u6362\u5230\u7b2c \\(i\\) \u884c\uff08\u6ce8\u610f\u8fd9\u91cc\u4e0d\u4ece \\([1,i)\\) \u91cc\u9762\u627e\uff0c\u56e0\u4e3a\u6ca1\u7528\u554a\uff09\u3002 \u5bf9\u4e8e\u6bcf\u4e2a \\(i\\) \uff0c\u626b\u63cf \\(j \\in [1, n]\\) \uff0c\u5bf9\u4e8e \\(\\forall j \\not ={i}\\) \uff0c\u5229\u7528\u5f53\u524d\u7b2c \\(i\\) \u884c\u7684\u7cfb\u6570\u6d88\u6389\u7b2c \\(j\\) \u884c\u7684 \\(x_i\\) \u7684\u7cfb\u6570\uff0c\u5c06\u5176\u53d8\u4e3a\u96f6\uff08\u5177\u4f53\u65b9\u5f0f\u662f\u5229\u7528\u521d\u7b49\u884c\u53d8\u6362\uff0c\u4ee4\u7b2c \\(i\\) \u884c\u4e58\u4e0a\u4e00\u4e2a\u7cfb\u6570\u4f7f\u5f97 \\(c_{i,i}\\) \u53d8\u6210 \\(c_{j, i}\\) \u4e4b\u540e\uff0c\u8ba9\u7b2c \\(j\\) \u884c\u6574\u4f53\u51cf\u53bb\u7b2c \\(i\\) \u884c\uff09\u3002 \u56de\u4ee3\u5199\u51fa\u7b80\u5316\u9636\u68af\u5f62\u77e9\u9635\u3002 \u5f53\u7136\u4e00\u4e2a\u5f88\u663e\u7136\u7684\u4e8b\u60c5\u662f\u65b9\u7a0b\u7ec4\u662f\u4e0d\u4e00\u5b9a\u6709\u552f\u4e00\u89e3\u7684\u3002 \u9996\u5148\u5982\u679c\u6d88\u5143\u7684\u65f6\u5019\u51fa\u73b0\u4e86 \\(0 = d\\) \u7684\u8fd9\u79cd\u65b9\u7a0b\uff0c\u65b9\u7a0b\u663e\u7136\u65e0\u89e3\u3002 \u7136\u540e\u6ce8\u610f\u5230\u8fd9\u662f\u4e00\u4e2a\u8fed\u4ee3\u7684\u8fc7\u7a0b\uff0c\u5728\u6267\u884c \\(i\\) \u7684\u65f6\u5019\uff0c \\([i, n]\\) \u884c\u4e2d\u6240\u6709\u7684 \\(x_1 \\sim x_{i - 1}\\) \u90fd\u5df2\u7ecf\u88ab\u6d88\u9664\u4e86\uff0c\u4e8e\u662f\u6211\u4eec\u6bcf\u6b21\u53ea\u9700\u8981\u627e\u5230\u4e00\u4e2a \\(x_i\\) \u7684\u7cfb\u6570\u4e0d\u4e3a\u96f6\u7684\u884c\u4ea4\u6362\u5230\u7b2c \\(i\\) \u884c\u5c31\u884c. \u56e0\u4e3a\u65b9\u7a0b\u7ec4\u7684\u89e3\u4e0d\u4e00\u5b9a\u662f\u6574\u6570\uff0c\u6240\u4ee5\u8981\u8003\u8651\u7cbe\u5ea6\u95ee\u9898\uff0c\u5047\u8bbe\u6211\u4eec\u5f53\u524d\u8981\u7528\u7b2c \\(i\\) \u884c\u6d88\u6389\u5176\u5b83\u884c \\(x_i\\) \u7684\u7cfb\u6570\uff0c\u8bbe\u7b2c \\(i\\) \u884c\u7684 \\(x_i\\) \u7684\u7cfb\u6570\u4e3a \\(c_{i, i} = r\\) \u3002 \u90a3\u4e48\u5bf9\u4e8e \\(\\forall j \\in [1,n], (j \\not ={i})\\) \uff0c \\(c_{j, i}\\) \u5c31\u4f1a\u53d8\u6210 \\(0\\) \uff0c \\(c_{j, k}, (k \\not ={i})\\) \u5c31\u4f1a\u53d8\u6210 \\(c_{j,k} -\\dfrac{c_{j, i}}{r} \\times c_{i, k}\\) \u3002 \u6211\u4eec\u5e0c\u671b\u8fd9\u4e2a\u5f0f\u5b50\u8ba1\u7b97\u7684\u65f6\u5019\u7cbe\u5ea6\u635f\u5931\u5c3d\u91cf\u5c0f\uff0c\u4e5f\u5c31\u662f\u8981\u8ba9\u9664\u6cd5\u90a3\u91cc\u7684\u7cbe\u5ea6\u635f\u5931\u66f4\u5c0f\uff0c\u56e0\u4e3a\u6d6e\u70b9\u6570\u7684\u7edd\u5bf9\u503c\u8d8a\u5c0f\u7cbe\u5ea6\u8d8a\u9ad8\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8ba9 \\(r\\) \u5c3d\u91cf\u5927\u5373\u53ef\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5bf9\u7cbe\u5ea6\u6709\u4e00\u4e2a\u5c0f\u4f18\u5316\uff1a\u6bcf\u6b21\u627e\u5230\u4e00\u4e2a \\(x_i\\) \u7cfb\u6570\u7edd\u5bf9\u503c\u6700\u5927\u7684\u884c\u7528\u6765\u6d88\u53bb\u522b\u7684\u884c\u7684\u7cfb\u6570\u3002 \u5982\u679c\u6d88\u5143\u5b8c\u4e86\u4e4b\u540e\uff0c\u5982\u679c \\(\\exists i, \\exists c_{i, j} \\not ={0}, j \\not ={i}\\) \u7684 \\(i\\) \uff0c\u90a3\u4e48\u8bc1\u660e\u6211\u4eec\u627e\u4e0d\u5230\u65b9\u7a0b\u7684\u552f\u4e00\u89e3\uff0c\u4f46\u662f\u77e9\u9635\u7684\u5f62\u5f0f\u4f1a\u53d8\u6210\u8fd9\u79cd\u6837\u5b50\uff1a \\[ \\begin{bmatrix} 1 & 3 & 0\\ |\\ 7 \\\\ 0 & 0 & 0\\ |\\ 0 \\\\ 0 & 0 & 6\\ |\\ 1 \\end{bmatrix} \\] \u4f8b\u5b50\u4e2d \\(i = 1\\) \u5c31\u662f\u4e0d\u6ee1\u8db3\u6761\u4ef6\u7684\u884c\uff0c\u65b9\u7a0b\u7684\u5f62\u5f0f\u662f\u8fd9\u6837\u7684\uff1a \\[ \\begin{cases} x_1 = 7 - 3x_2\\\\ x_3 = \\dfrac{1}{6} \\end{cases} \\] \u53ef\u4ee5\u53d1\u73b0\uff0c\u4e0d\u7ba1 \\(x_2\\) \u662f\u4ec0\u4e48\u5b9e\u6570\uff0c\u90fd\u6709\u4e00\u4e2a \\(x_1\\) \u53ef\u4ee5\u4f7f\u5f97\u65b9\u7a0b\u6709\u89e3\u3002 \u6211\u4eec\u5c06 \\(x_2\\) \u8fd9\u79cd\u53d8\u91cf\u79f0\u4e3a\u81ea\u7531\u5143\uff08\u81ea\u5df1\u90a3\u4e00\u884c\u7cfb\u6570\u5168\u4e3a \\(0\\) \uff09\uff0c \\(x_1,x_3\\) \u79f0\u4e3a\u4e3b\u5143\u3002 \u5982\u679c\u539f\u65b9\u7a0b\u7ec4\u6709 \\(k\\) \u884c\u7684\u7cfb\u6570\u5168\u662f \\(0\\) \uff0c\u5c31\u8bc1\u660e\u539f\u65b9\u7a0b\u6709 \\(k\\) \u4e2a\u81ea\u7531\u5143\uff0c \\(n - k\\) \u4e2a\u4e3b\u5143\uff0c\u539f\u65b9\u7a0b\u7ec4\u6709\u65e0\u6570\u4e2a\u89e3\u3002 \u6a21\u677f\uff1a[SDOI2006]\u7ebf\u6027\u65b9\u7a0b\u7ec4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iomanip> #include <iostream> #include <algorithm> using namespace std ; using i64 = long long ; using ldb = long double ; const int si = 50 + 10 ; const ldb eps = 1e-5 ; int n ; ldb c [ si ][ si ], d [ si ], x [ si ]; int Gauss () { for ( int i = 1 ; i <= n ; ++ i ) { int l = i ; for ( int j = i + 1 ; j <= n ; ++ j ) if ( fabs ( c [ j ][ i ]) > fabs ( c [ l ][ i ])) l = j ; // \u627e\u5230\u6700\u5927\u7684 if ( l != i ) { for ( int j = 1 ; j <= n ; ++ j ) swap ( c [ i ][ j ], c [ l ][ j ]); swap ( d [ i ], d [ l ]); } // \u4ea4\u6362 if ( fabs ( c [ i ][ i ]) >= eps ) { for ( int j = 1 ; j <= n ; ++ j ) { if ( j == i ) continue ; ldb rte = c [ j ][ i ] / c [ i ][ i ]; for ( int k = 1 ; k <= n ; ++ k ) c [ j ][ k ] -= rte * c [ i ][ k ]; d [ j ] -= rte * d [ i ]; } } // \u6d88\u5143 } bool nosol = false , infsol = false ; for ( int i = 1 ; i <= n ; ++ i ) { int j = 1 ; while ( fabs ( c [ i ][ j ]) < eps && j <= n ) j ++ ; j += ( fabs ( d [ i ]) < eps ); if ( j > n + 1 ) infsol = true ; if ( j == n + 1 ) nosol = true ; } // \u68c0\u67e5\u81ea\u7531\u5143 if ( nosol ) return 0 ; if ( infsol ) return 1 ; for ( int i = n ; i >= 1 ; -- i ) { for ( int j = i + 1 ; j <= n ; ++ j ) d [ i ] -= x [ j ] * c [ i ][ j ]; x [ i ] = d [ i ] / c [ i ][ i ]; } // \u56de\u4ee3 for ( int i = 1 ; i <= n ; ++ i ) cout << \"x\" << i << \"=\" << fixed << setprecision ( 2 ) << x [ i ] << endl ; return 2 ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) cin >> c [ i ][ j ]; cin >> d [ i ]; } int ret = Gauss (); if ( ret == 2 ) return 0 ; if ( ret == 0 ) cout << \"-1\" << endl ; // \u5148\u5224\u65e0\u89e3 if ( ret == 1 ) cout << \"0\" << endl ; return 0 ; } \u5e94\u7528 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5f02\u6216\u65b9\u7a0b\u7ec4 \u03c8(\uff40\u2207\u00b4)\u03c8 Pigeon. \u6d88\u9664 dp \u540e\u6548\u6027 \u03c8(\uff40\u2207\u00b4)\u03c8 \u89c1\uff1a \u671f\u671b dp \u91cc\u9762\u8fd8\u6709\u4e00\u4e2a\u7279\u6b8a\u60c5\u51b5\u4e0b \\(O(n^2)\\) \u7684\u9ad8\u65af\u6d88\u5143\u65b9\u6cd5\uff0c\u6bd4\u8f83\u8da3\u5473\u3002","title":"\u9ad8\u65af\u6d88\u5143"},{"location":"algor/math/linear-algebra/gauss/#_1","text":"\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u7528\u6765\u89e3\u7ebf\u6027\u65b9\u7a0b\u7ec4\u7684\u4e00\u4e2a\u7b97\u6cd5\u3002 \u7ebf\u6027\u65b9\u7a0b\u7ec4\u5c31\u662f\u6bcf\u4e2a\u53d8\u91cf\u7684\u6700\u9ad8\u6b21\u6570\u90fd\u662f\u4e00\u6b21\u7684 \\(n\\) \u5143\u65b9\u7a0b\u7ec4\u3002 \u7c7b\u4f3c\u8fd9\u6837\uff1a \\[ \\begin{cases} 2x_1+4x_2+5x_3 = 23\\\\ 3x_1+5x_2+2x_3 = 14\\\\ 4x_1+6x_2+3x_3 = 24 \\end{cases} \\] \uff08\u968f\u624b\u5199\u7684\u4e0d\u4e00\u5b9a\u6709\u89e3\uff09 \u5c0f\u5b66\u6570\u5b66\u5b66\u8fc7\uff0c\u89e3\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b\u7ec4\u9700\u8981\u7528\u5230\u6d88\u5143\u6cd5\uff0c\u6ce8\u610f\u5230\u6d88\u5143\u6cd5\u7684\u672c\u8d28\u662f\u5bf9\u53d8\u91cf\u7684\u7cfb\u6570\u8fdb\u884c\u8fd0\u7b97\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5199\u51fa\u65b9\u7a0b\u7ec4\u7684\u7cfb\u6570\u77e9\u9635\uff1a \\[ \\begin{bmatrix} 2 & 4 & 5 \\\\ 3 & 5 & 2 \\\\ 4 & 6 & 3 \\end{bmatrix} \\] \u7ebf\u6027\u65b9\u7a0b\u7ec4\u7684\u7b49\u53f7\u53f3\u8fb9\u90fd\u662f\u4e00\u4e2a\u5e38\u6570\uff0c\u4e8e\u662f\u6211\u4eec\u628a\u8fd9\u4e2a\u5e38\u6570\u4e5f\u5199\u8fdb\u53bb\uff1a \\[ \\begin{bmatrix} 2 & 4 & 5 \\ |\\ 23\\\\ 3 & 5 & 2 \\ |\\ 14 \\\\ 4 & 6 & 3 \\ |\\ 24 \\end{bmatrix} \\] \u8fd9\u5c31\u662f\u4e00\u4e2a \\(n\\times (n + 1)\\) \u7684\u589e\u5e7f\u77e9\u9635\uff0c\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u628a\u8fd9\u4e2a\u589e\u5e7f\u77e9\u9635\u901a\u8fc7\u4e00\u4e9b\u53d8\u6362\u53d8\u6210\u8fd9\u6837\u7684\u5f62\u5f0f\uff1a \\[ \\begin{bmatrix} 1 & c_{1,2} &c_{1,3} \\ &|\\ x\\\\ 0 & 1 & c_{2,3}\\ &|\\ y\\\\ 0 & 0 & 1\\ &|\\ z\\\\ \\end{bmatrix} \\] \u5176\u4e2d \\(c\\) \u662f\u4e00\u4e2a\u5e38\u6570\uff0c \\(x,y,z\\) \u90fd\u662f\u5e38\u6570\u3002 \u8fd9\u6837\u7684\u77e9\u9635\u88ab\u53eb\u505a\u65b9\u7a0b\u7ec4\u7684\u4e0a\u4e09\u89d2\u5f62\u77e9\u9635\u3002 \u8fd9\u4e2a\u4e0a\u4e09\u89d2\u5f62\u77e9\u9635\u53ef\u4ee5\u518d\u5316\u7b80\u6210\u4e00\u4e2a\u7b80\u5316\u9636\u68af\u5f62\u77e9\u9635\uff08\u65b9\u5f0f\u662f\u4ece\u4e0b\u5f80\u4e0a\u4ee3\u5165\uff09\uff1a \\[ \\begin{bmatrix} 1 & 0 & 0\\ |\\ a\\\\ 0 & 1 & 0\\ |\\ b\\\\ 0 & 0 & 1\\ |\\ c\\\\ \\end{bmatrix} \\] \u8fd9\u4e2a\u7b80\u5316\u9636\u68af\u5f62\u77e9\u9635\u5c31\u76f4\u63a5\u8868\u793a\u4e86\u65b9\u7a0b\u7ec4\u7684\u552f\u4e00\u89e3 \\(x_1 = a, x_2 = b, x_3 = c\\) \u3002 \u628a\u589e\u5e7f\u77e9\u9635\u53d8\u6210\u4e0a\u4e09\u89d2\u77e9\u9635\uff0c\u518d\u53d8\u6210\u7b80\u5316\u9636\u68af\u5f62\u77e9\u9635\u7684\u8fc7\u7a0b\u5c31\u662f\u9ad8\u65af\u6d88\u5143\u3002 \u5177\u4f53\u5206\u4e09\u6b65\uff1a \u626b\u63cf \\(i \\in [1, n]\\) \uff0c\u5bf9\u4e8e \\(i\\) \uff0c\u4ece \\([i,n]\\) \u884c\u5f53\u4e2d \u627e\u5230\u4e00\u4e2a \\(x_{1} \\sim x_{i-1}\\) \u7684\u7cfb\u6570\u90fd\u4e3a\u96f6\uff0c \\(x_i\\) \u7684\u7cfb\u6570\u4e0d\u4e3a\u96f6\u7684\u884c\uff0c\u628a\u5b83\u4ea4\u6362\u5230\u7b2c \\(i\\) \u884c\uff08\u6ce8\u610f\u8fd9\u91cc\u4e0d\u4ece \\([1,i)\\) \u91cc\u9762\u627e\uff0c\u56e0\u4e3a\u6ca1\u7528\u554a\uff09\u3002 \u5bf9\u4e8e\u6bcf\u4e2a \\(i\\) \uff0c\u626b\u63cf \\(j \\in [1, n]\\) \uff0c\u5bf9\u4e8e \\(\\forall j \\not ={i}\\) \uff0c\u5229\u7528\u5f53\u524d\u7b2c \\(i\\) \u884c\u7684\u7cfb\u6570\u6d88\u6389\u7b2c \\(j\\) \u884c\u7684 \\(x_i\\) \u7684\u7cfb\u6570\uff0c\u5c06\u5176\u53d8\u4e3a\u96f6\uff08\u5177\u4f53\u65b9\u5f0f\u662f\u5229\u7528\u521d\u7b49\u884c\u53d8\u6362\uff0c\u4ee4\u7b2c \\(i\\) \u884c\u4e58\u4e0a\u4e00\u4e2a\u7cfb\u6570\u4f7f\u5f97 \\(c_{i,i}\\) \u53d8\u6210 \\(c_{j, i}\\) \u4e4b\u540e\uff0c\u8ba9\u7b2c \\(j\\) \u884c\u6574\u4f53\u51cf\u53bb\u7b2c \\(i\\) \u884c\uff09\u3002 \u56de\u4ee3\u5199\u51fa\u7b80\u5316\u9636\u68af\u5f62\u77e9\u9635\u3002 \u5f53\u7136\u4e00\u4e2a\u5f88\u663e\u7136\u7684\u4e8b\u60c5\u662f\u65b9\u7a0b\u7ec4\u662f\u4e0d\u4e00\u5b9a\u6709\u552f\u4e00\u89e3\u7684\u3002 \u9996\u5148\u5982\u679c\u6d88\u5143\u7684\u65f6\u5019\u51fa\u73b0\u4e86 \\(0 = d\\) \u7684\u8fd9\u79cd\u65b9\u7a0b\uff0c\u65b9\u7a0b\u663e\u7136\u65e0\u89e3\u3002 \u7136\u540e\u6ce8\u610f\u5230\u8fd9\u662f\u4e00\u4e2a\u8fed\u4ee3\u7684\u8fc7\u7a0b\uff0c\u5728\u6267\u884c \\(i\\) \u7684\u65f6\u5019\uff0c \\([i, n]\\) \u884c\u4e2d\u6240\u6709\u7684 \\(x_1 \\sim x_{i - 1}\\) \u90fd\u5df2\u7ecf\u88ab\u6d88\u9664\u4e86\uff0c\u4e8e\u662f\u6211\u4eec\u6bcf\u6b21\u53ea\u9700\u8981\u627e\u5230\u4e00\u4e2a \\(x_i\\) \u7684\u7cfb\u6570\u4e0d\u4e3a\u96f6\u7684\u884c\u4ea4\u6362\u5230\u7b2c \\(i\\) \u884c\u5c31\u884c. \u56e0\u4e3a\u65b9\u7a0b\u7ec4\u7684\u89e3\u4e0d\u4e00\u5b9a\u662f\u6574\u6570\uff0c\u6240\u4ee5\u8981\u8003\u8651\u7cbe\u5ea6\u95ee\u9898\uff0c\u5047\u8bbe\u6211\u4eec\u5f53\u524d\u8981\u7528\u7b2c \\(i\\) \u884c\u6d88\u6389\u5176\u5b83\u884c \\(x_i\\) \u7684\u7cfb\u6570\uff0c\u8bbe\u7b2c \\(i\\) \u884c\u7684 \\(x_i\\) \u7684\u7cfb\u6570\u4e3a \\(c_{i, i} = r\\) \u3002 \u90a3\u4e48\u5bf9\u4e8e \\(\\forall j \\in [1,n], (j \\not ={i})\\) \uff0c \\(c_{j, i}\\) \u5c31\u4f1a\u53d8\u6210 \\(0\\) \uff0c \\(c_{j, k}, (k \\not ={i})\\) \u5c31\u4f1a\u53d8\u6210 \\(c_{j,k} -\\dfrac{c_{j, i}}{r} \\times c_{i, k}\\) \u3002 \u6211\u4eec\u5e0c\u671b\u8fd9\u4e2a\u5f0f\u5b50\u8ba1\u7b97\u7684\u65f6\u5019\u7cbe\u5ea6\u635f\u5931\u5c3d\u91cf\u5c0f\uff0c\u4e5f\u5c31\u662f\u8981\u8ba9\u9664\u6cd5\u90a3\u91cc\u7684\u7cbe\u5ea6\u635f\u5931\u66f4\u5c0f\uff0c\u56e0\u4e3a\u6d6e\u70b9\u6570\u7684\u7edd\u5bf9\u503c\u8d8a\u5c0f\u7cbe\u5ea6\u8d8a\u9ad8\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8ba9 \\(r\\) \u5c3d\u91cf\u5927\u5373\u53ef\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5bf9\u7cbe\u5ea6\u6709\u4e00\u4e2a\u5c0f\u4f18\u5316\uff1a\u6bcf\u6b21\u627e\u5230\u4e00\u4e2a \\(x_i\\) \u7cfb\u6570\u7edd\u5bf9\u503c\u6700\u5927\u7684\u884c\u7528\u6765\u6d88\u53bb\u522b\u7684\u884c\u7684\u7cfb\u6570\u3002 \u5982\u679c\u6d88\u5143\u5b8c\u4e86\u4e4b\u540e\uff0c\u5982\u679c \\(\\exists i, \\exists c_{i, j} \\not ={0}, j \\not ={i}\\) \u7684 \\(i\\) \uff0c\u90a3\u4e48\u8bc1\u660e\u6211\u4eec\u627e\u4e0d\u5230\u65b9\u7a0b\u7684\u552f\u4e00\u89e3\uff0c\u4f46\u662f\u77e9\u9635\u7684\u5f62\u5f0f\u4f1a\u53d8\u6210\u8fd9\u79cd\u6837\u5b50\uff1a \\[ \\begin{bmatrix} 1 & 3 & 0\\ |\\ 7 \\\\ 0 & 0 & 0\\ |\\ 0 \\\\ 0 & 0 & 6\\ |\\ 1 \\end{bmatrix} \\] \u4f8b\u5b50\u4e2d \\(i = 1\\) \u5c31\u662f\u4e0d\u6ee1\u8db3\u6761\u4ef6\u7684\u884c\uff0c\u65b9\u7a0b\u7684\u5f62\u5f0f\u662f\u8fd9\u6837\u7684\uff1a \\[ \\begin{cases} x_1 = 7 - 3x_2\\\\ x_3 = \\dfrac{1}{6} \\end{cases} \\] \u53ef\u4ee5\u53d1\u73b0\uff0c\u4e0d\u7ba1 \\(x_2\\) \u662f\u4ec0\u4e48\u5b9e\u6570\uff0c\u90fd\u6709\u4e00\u4e2a \\(x_1\\) \u53ef\u4ee5\u4f7f\u5f97\u65b9\u7a0b\u6709\u89e3\u3002 \u6211\u4eec\u5c06 \\(x_2\\) \u8fd9\u79cd\u53d8\u91cf\u79f0\u4e3a\u81ea\u7531\u5143\uff08\u81ea\u5df1\u90a3\u4e00\u884c\u7cfb\u6570\u5168\u4e3a \\(0\\) \uff09\uff0c \\(x_1,x_3\\) \u79f0\u4e3a\u4e3b\u5143\u3002 \u5982\u679c\u539f\u65b9\u7a0b\u7ec4\u6709 \\(k\\) \u884c\u7684\u7cfb\u6570\u5168\u662f \\(0\\) \uff0c\u5c31\u8bc1\u660e\u539f\u65b9\u7a0b\u6709 \\(k\\) \u4e2a\u81ea\u7531\u5143\uff0c \\(n - k\\) \u4e2a\u4e3b\u5143\uff0c\u539f\u65b9\u7a0b\u7ec4\u6709\u65e0\u6570\u4e2a\u89e3\u3002 \u6a21\u677f\uff1a[SDOI2006]\u7ebf\u6027\u65b9\u7a0b\u7ec4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iomanip> #include <iostream> #include <algorithm> using namespace std ; using i64 = long long ; using ldb = long double ; const int si = 50 + 10 ; const ldb eps = 1e-5 ; int n ; ldb c [ si ][ si ], d [ si ], x [ si ]; int Gauss () { for ( int i = 1 ; i <= n ; ++ i ) { int l = i ; for ( int j = i + 1 ; j <= n ; ++ j ) if ( fabs ( c [ j ][ i ]) > fabs ( c [ l ][ i ])) l = j ; // \u627e\u5230\u6700\u5927\u7684 if ( l != i ) { for ( int j = 1 ; j <= n ; ++ j ) swap ( c [ i ][ j ], c [ l ][ j ]); swap ( d [ i ], d [ l ]); } // \u4ea4\u6362 if ( fabs ( c [ i ][ i ]) >= eps ) { for ( int j = 1 ; j <= n ; ++ j ) { if ( j == i ) continue ; ldb rte = c [ j ][ i ] / c [ i ][ i ]; for ( int k = 1 ; k <= n ; ++ k ) c [ j ][ k ] -= rte * c [ i ][ k ]; d [ j ] -= rte * d [ i ]; } } // \u6d88\u5143 } bool nosol = false , infsol = false ; for ( int i = 1 ; i <= n ; ++ i ) { int j = 1 ; while ( fabs ( c [ i ][ j ]) < eps && j <= n ) j ++ ; j += ( fabs ( d [ i ]) < eps ); if ( j > n + 1 ) infsol = true ; if ( j == n + 1 ) nosol = true ; } // \u68c0\u67e5\u81ea\u7531\u5143 if ( nosol ) return 0 ; if ( infsol ) return 1 ; for ( int i = n ; i >= 1 ; -- i ) { for ( int j = i + 1 ; j <= n ; ++ j ) d [ i ] -= x [ j ] * c [ i ][ j ]; x [ i ] = d [ i ] / c [ i ][ i ]; } // \u56de\u4ee3 for ( int i = 1 ; i <= n ; ++ i ) cout << \"x\" << i << \"=\" << fixed << setprecision ( 2 ) << x [ i ] << endl ; return 2 ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) cin >> c [ i ][ j ]; cin >> d [ i ]; } int ret = Gauss (); if ( ret == 2 ) return 0 ; if ( ret == 0 ) cout << \"-1\" << endl ; // \u5148\u5224\u65e0\u89e3 if ( ret == 1 ) cout << \"0\" << endl ; return 0 ; }","title":"\u6982\u8ff0"},{"location":"algor/math/linear-algebra/gauss/#_2","text":"","title":"\u5e94\u7528"},{"location":"algor/math/linear-algebra/gauss/#_3","text":"Pigeon.","title":"\u5f02\u6216\u65b9\u7a0b\u7ec4"},{"location":"algor/math/linear-algebra/gauss/#dp","text":"\u89c1\uff1a \u671f\u671b dp \u91cc\u9762\u8fd8\u6709\u4e00\u4e2a\u7279\u6b8a\u60c5\u51b5\u4e0b \\(O(n^2)\\) \u7684\u9ad8\u65af\u6d88\u5143\u65b9\u6cd5\uff0c\u6bd4\u8f83\u8da3\u5473\u3002","title":"\u6d88\u9664 dp \u540e\u6548\u6027"},{"location":"algor/math/linear-algebra/matrix/","text":"\u5b9a\u4e49 \u03c8(\uff40\u2207\u00b4)\u03c8 \u77e9\u9635\u662f\u5565\u5e94\u8be5\u4e0d\u7528\u8bf4\u4e86\u5427\u3002 \u4e00\u822c\u8868\u793a\u7684\u65f6\u5019\u7528\u5927\u5199\u5b57\u6bcd\u8868\u793a\u77e9\u9635\u3002\u7528\u5c0f\u5199\u5b57\u6bcd\u52a0\u4e00\u4e2a\u4e8c\u5143\u7ec4\u4e0b\u6807\u8868\u793a\u77e9\u9635\u91cc\u7684\u5143\u7d20\u3002 \u6bd4\u5982 \\(A\\) \u4e3a\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635\uff1a \u8fd9\u91cc \\(n\\times m\\) \u6307 \\(n\\) \u884c \\(m\\) \u5217\u3002 \\[A=\\begin{bmatrix} a_{1,1} & \\cdots & a_{1,m} \\\\ \\vdots & \\ddots & \\vdots \\\\ a_{n,1} & \\cdots & a_{n,m}\\end{bmatrix}\\] \\(a_{i,j}\\) \u5c31\u8868\u793a\u77e9\u9635 \\(A\\) \u5f53\u4e2d\u7b2c \\(i\\) \u884c\u7b2c \\(j\\) \u5217\u7684\u5143\u7d20\u3002 \uff08\u7ebf\u6027\u4ee3\u6570\u91cc\u4e0d\u662f\u7ecf\u5e38\u8bf4\u884c\u5217\u5f0f\u5417\uff0c\u6240\u4ee5\u662f \u884c \\(\\times\\) \u5217 \u554a\uff08\u5212\u6389\uff09\uff09 \u4e5f\u53ef\u4ee5\u7b80\u8bb0\u4e3a \\(A=(a_{i,j})\\) \u3002 \u5411\u91cf\uff1a\u6ce8\u610f\u8fd9\u91cc\u7684\u5411\u91cf\u548c\u51e0\u4f55\u91cc\u7684\u5411\u91cf\u7684\u4e0d\u540c\u3002 \u4e00\u822c\u628a \\(n\\) \u4e2a\u5b9e\u6570\u7ec4\u6210\u7684 \\(n\\) \u5143\u7ec4\u79f0\u4e3a\u5411\u91cf\u3002 \u5982\u679c\u5b83\u8868\u793a\u4e3a\u4e00\u4e2a \\(1\\times n\\) \u7684\u77e9\u9635\uff0c\u5219\u79f0\u4e3a\u884c\u5411\u91cf\uff0c\u5982\u679c\u662f \\(n \\times 1\\) \uff0c\u5219\u79f0\u4e3a\u5217\u5411\u91cf\uff1a \u884c\u5411\u91cf\uff1a \\((a_1,a_2,a_3,...,a_n)\\) \u5217\u5411\u91cf\uff1a \\(\\begin{bmatrix}a_1 \\\\ a_2 \\\\ \\vdots \\\\ a_n \\end{bmatrix}\\) \u4e00\u822c\u90fd\u662f\u7528\u5217\u5411\u91cf\uff08\u65b9\u4fbf\u4e00\u70b9\uff09\uff0c\u4e00\u822c\u4f1a\u7528\u9ed1\u4f53\u659c\u4f53\u8868\u793a\u5217\u5411\u91cf\u3002 \u6709\u5174\u8da3\u7684\u53ef\u4ee5\u4e86\u89e3\u4e00\u4e0b \\(n\\) \u7ef4\u6b27\u51e0\u91cc\u5fb7\u7a7a\u95f4\uff08\u53ef\u4ee5\u8003\u8651\u770b\u770b\u300a\u7ebf\u6027\u4ee3\u6570\u300b\uff09\u3002 \u5355\u4f4d\u77e9\u9635\uff08 \\(I\\) \uff09\uff1a \u5bf9\u4e8e\u4e00\u4e2a \\(n \\times n\\) \u7684\u77e9\u9635 \\(A\\) \uff0c\u5982\u679c\u6ee1\u8db3 \\(\\forall i ,a_{i,i}=1,\\text{Others}=0\\) \uff0c\u90a3\u4e48\u79f0 \\(A\\) \u662f\u4e00\u4e2a\u5355\u4f4d\u77e9\u9635\uff0c\u4e00\u822c\u8bb0\u4f5c \\(I\\) \u6bd4\u5982\uff1a \\[I=\\begin{bmatrix}1 &0 & 0 \\\\ 0& 1 & 0 \\\\ 0 & 0& 1\\end{bmatrix}\\] \u6807\u91cf\u4e58\u6cd5 \u03c8(\uff40\u2207\u00b4)\u03c8 \\(\\alpha\\) \u662f\u4e00\u4e2a\u6807\u91cf\uff0c \\(A\\) \u662f\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635\uff0c \u5219 \\(\\alpha A=B\\) \u662f\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635\uff0c\u4e14 \\(B_{i,j}=\\alpha\\times A_{i,j}\\) \u3002 \u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u5206\u914d\u5f8b\u3002 \u77e9\u9635\u52a0\u6cd5 \u03c8(\uff40\u2207\u00b4)\u03c8 \\(A\\) \u662f\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635\uff0c \\(B\\) \u662f\u4e00\u4e2a \\(n\\times m\\) \u7684\u77e9\u9635\uff0c \u5219\u4ed6\u4eec\u8fdb\u884c\u77e9\u9635\u52a0\u6cd5 \\(A+B\\) \u5f97\u5230\u7684\u7ed3\u679c\u77e9\u9635 \\(C\\) \u662f\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635\u3002 \u4e14 \\(C_{i,j}=A_{i,j}+B_{i,j}\\) \u3002 \u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u4ea4\u6362\u5f8b\u3002 \u77e9\u9635\u4e58\u6cd5 \u03c8(\uff40\u2207\u00b4)\u03c8 \u91cd\u5934\u620f\u3002 \\(A\\) \u662f\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635\uff0c \\(B\\) \u662f\u4e00\u4e2a \\(m \\times k\\) \u7684\u77e9\u9635\u3002 \u6ce8\u610f\uff0c \\(A\\) \u7684\u5217\u6570\u548c \\(B\\) \u7684\u884c\u6570\u5fc5\u987b\u76f8\u7b49\uff01 \u90a3\u4e48\u4ed6\u4eec\u8fdb\u884c\u77e9\u9635\u4e58\u6cd5 \\(A \\times B\\) \u7684\u5230\u7684\u7ed3\u679c\u77e9\u9635 \\(C\\) \u662f\u4e00\u4e2a \\(n \\times k\\) \u7684\u77e9\u9635\u3002 \u4e14\u6ee1\u8db3\uff1a \\[C_{i,j}=\\sum\\limits_{k=1}^m A_{i,k}\\times B_{k,j}\\] \u5f62\u8c61\u7684\u89e3\u91ca\u5c31\u662f\uff0c \\(C_{i,j}\\) \u7b49\u4e8e \\(A\\) \u7684\u7b2c \\(i\\) \u884c\u548c \\(B\\) \u7684\u7b2c \\(j\\) \u5217\u4e00\u4e00\u5bf9\u5e94\u5730\u4e58\u8d77\u6765\u3002 \u6ce8\u610f\uff1a\u77e9\u9635\u4e58\u6cd5 \u4e0d\u4e00\u5b9a \u6ee1\u8db3\u4ea4\u6362\u5f8b\uff01\uff01 \u4f46\u662f\u5b83\u6ee1\u8db3 \u7ed3\u5408\u5f8b \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 struct Matrix { int a [ si ][ si ]; Matrix (){ memset ( a , 0 , sizeof a ); } inline Matrix operator * ( const Matrix & B ) const { Matrix C , A =* this ; for ( register int i = 1 ; i <= cnt ; ++ i ){ for ( register int j = 1 ; j <= cnt ; ++ j ){ for ( register int k = 1 ; k <= cnt ; ++ k ){ C . a [ i ][ j ] += A . a [ i ][ k ] * B . a [ k ][ j ]; } } } return C ; // \u6700\u597d\u5faa\u73af\u7684\u65f6\u5019\u4e0d\u8981\u7528 si\u3002 // \u7528\u4e00\u4e2a\u8bbe\u5b9a\u597d\u7684\u5e38\u6570\u6216\u8005\u9898\u76ee\u7ed9\u7684\u53d8\u91cf\u4f1a\u6bd4\u8f83\u597d\u3002 // \u4f46\u662f\u5982\u679c\u4e58\u6cd5\u4e0d\u6b62\u9700\u8981\u9002\u7528\u4e8e\u4e00\u5bf9 n,m,k\uff0c\u90a3\u4e48\u5c31\u6700\u597d\u7528 si - 1\u3002 // \u4e3a\u5565\u4e0d\u4f1a\u6709\u5f71\u54cd\u5462\uff1f\u56e0\u4e3a\u6784\u9020\u51fd\u6570\u91cc\u628a\u6ca1\u6709\u7528\u5230\u7684\u8bbe\u7f6e\u6210 0 \u4e86\u3002 } }; \u5982\u679c\u88ab\u5361\u5e38\u4e86\uff0c\u53ef\u4ee5\u8003\u8651\u624b\u52a8\u5c55\u5f00\u5185\u5c42\u5faa\u73af\u3002 \u8981\u6c42\u53d6\u6a21\u7684\u8bdd\u624b\u52a8\u52a0\u4e0a\u5c31\u884c\u3002 \u77e9\u9635\u5feb\u901f\u5e42 \u03c8(\uff40\u2207\u00b4)\u03c8 \u56e0\u4e3a\u77e9\u9635\u4e58\u6cd5\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u6240\u4ee5\u4e00\u4e2a\u77e9\u9635\u7684 \\(k\\) \u6b21\u5e42\u5b9a\u4e49\u4e3a\uff1a \\[A^k=\\begin{matrix}\\underbrace{A \\times A\\times A \\dots \\times A}\\\\k \\text{ times}\\end{matrix}\\] \u56e0\u4e3a\u6240\u6709\u6ee1\u8db3\u7ed3\u5408\u5f8b\u7684\u5143\u7b97\u90fd\u53ef\u4ee5\u4f7f\u7528\u5feb\u901f\u5e42\u6c42\u89e3\u3002 \u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u77e9\u9635\u4e58\u6cd5\u7684\u7ed3\u5408\u5f8b\u5199\u51fa\u4e00\u4e2a\u77e9\u9635\u5feb\u901f\u5e42\u7b97\u6cd5\uff1a 1 2 3 4 5 6 7 Matrix Ans , A ; inline Matrix Qpow ( int b ){ for (; b ; b >>= 1 ){ if ( b & 1 ) Ans = Ans * A ; A = A * A ; } return Ans ; } // \u6709\u7684\u65f6\u5019\u6839\u636e\u60c5\u51b5\u9700\u8981\u521d\u59cb\u5316\u4e00\u4e0b Ans. \u77e9\u9635\u4e58\u6cd5\u4f18\u5316\u9012\u63a8 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60\u4e00\u4e2a\u6570\u5b57 \\(n\\) \uff0c\u6c42\u51fa \\(Fib_n \\text{ mod }998244353 ,n \\le 1e18\\) \u3002 \\(Fib\\) \u662f\u6590\u6ce2\u90a3\u5951\u6570\u5217\u3002 \u770b\u5230 \\(n\\) \u7684\u8303\u56f4\u53d1\u73b0\u76f4\u63a5\u9012\u63a8\u660e\u663e\u7206\u70b8\u3002 \u6240\u4ee5\u8003\u8651\u628a \\(Fib_i,Fib_{i-1}\\) \u8868\u793a\u6210\u4e00\u4e2a\u884c\u5411\u91cf \\(\\begin{bmatrix} Fib_i & Fib_{i-1} \\end{bmatrix}\\) \u7136\u540e\u6211\u4eec\u60f3\u628a\u9012\u63a8\u5f0f\u5b50\u8868\u793a\u6210\u77e9\u9635\u4e58\u6cd5\u7684\u5f62\u5f0f\u518d\u5229\u7528\u77e9\u9635\u5feb\u901f\u5e42\u8fdb\u884c\u9ad8\u901f\u9012\u63a8\uff1a \\(\\begin{bmatrix} Fib_{i-1} & Fib_{i-2} \\end{bmatrix} \\times ? = \\begin{bmatrix} Fib_i & Fib_{i-1} \\end{bmatrix}\\) \u4e0d\u59a8\u8bbe\u8fd9\u4e2a \\(?\\) \u4e3a\u4e00\u4e2a\u77e9\u9635 \\(base\\) \u3002 \u6839\u636e\u77e9\u9635\u4e58\u6cd5\u7684\u5b9a\u4e49\uff0c \\(base\\) \u5e94\u8be5\u662f\u4e00\u4e2a \\(2\\times 2\\) \u7684\u77e9\u9635\u3002 \u8003\u8651\u5217\u51fa\u539f\u6765\u7684\u9012\u63a8\u5f0f\uff1a \\(Fib_{n}=Fib_{n-1}+Fib_{n-2}\\) \u3002 \u53d1\u73b0\u7ed3\u679c\u77e9\u9635\u7684 \\((1,1)\\) \u8fd9\u4e2a\u4f4d\u7f6e\u662f \\(Fib_i\\) \uff0c\u800c\u8fd9\u4e2a\u4f4d\u7f6e \\(C_{1,1}\\) \u5e94\u8be5\u662f\u7b49\u4e8e \\(A_{1,1}\\times B_{1,1}+A_{1,2}\\times B_{2,1}\\) \u4e5f\u5c31\u662f \\(Fib_{i-1} \\times B_{1,1}+Fib_{i-2}\\times B_{2,1}\\) \u6240\u4ee5 \\(B_{1,1}\\) \u548c \\(B_{2,1}\\) \u90fd\u662f \\(1\\) \uff1a \\(\\begin{bmatrix}1\\\\1\\end{bmatrix}\\) \u540c\u7406\u53ef\u4ee5\u5f97\u5230 \\(B_{2,1}\\) \u548c \\(B_{2,2}\\) \uff1a \\(\\begin{bmatrix}1\\\\0\\end{bmatrix}\\) \u6240\u4ee5 \\(base=\\begin{bmatrix}1 & 1\\\\ 1 & 0\\end{bmatrix}\\) \u539f\u5f0f\u53ef\u4ee5\u5316\u4e3a \\(\\begin{bmatrix} Fib_{i-1} & Fib_{i-2} \\end{bmatrix} \\times \\begin{bmatrix}1 & 1\\\\ 1 & 0\\end{bmatrix} = \\begin{bmatrix} Fib_i & Fib_{i-1} \\end{bmatrix}\\) \u3002 \u90a3\u4e48\u8bbe \\(Ans=\\begin{bmatrix} 1 & 1 \\end{bmatrix}=\\begin{bmatrix} Fib_2 & Fib_1\\end{bmatrix}\\) \u6240\u4ee5 \\(Fib_n\\) \u5c31\u662f \\(Ans \\times base^{n-2}\\) \u7684 \\((1,1)\\) \u3002 \u5199\u4e00\u4e2a\u77e9\u9635\u5feb\u901f\u5e42\u5373\u53ef\u3002 \u5e7f\u4e49\u6590\u6ce2\u90a3\u5951\u6570\u5217\u4e5f\u662f\u4e00\u6837\u7684\u3002 \u7136\u540e\u4e3e\u4e00\u4e2a OI-Wiki \u4e0a\u7684\u4f8b\u5b50 \\[ f_{1} = f_{2} = 0 \\\\ f_{n} = 7f_{n-1}+6f_{n-2}+5n+4\\times 3^n \\] \u53d1\u73b0 \\(f_n\\) \u548c \\(f_{n-1}, f_{n-2}, n\\) \u6709\u5173\uff0c\u4e8e\u662f\u8003\u8651\u6784\u9020\u4e00\u4e2a\u77e9\u9635\u63cf\u8ff0\u72b6\u6001\u3002 \u4f46\u662f\u5982\u679c\u77e9\u9635\u4ec5\u6709\u8fd9\u4e09\u4e2a\u5143\u7d20 \\(\\begin{bmatrix}f_n& f_{n-1}& n\\end{bmatrix}\\) \u662f\u96be\u4ee5\u6784\u9020\u51fa\u8f6c\u79fb\u65b9\u7a0b\u7684\uff0c\u56e0\u4e3a\u4e58\u65b9\u8fd0\u7b97\u548c \\(+1\\) \u65e0\u6cd5\u7528\u77e9\u9635\u63cf\u8ff0\u3002 \u4e8e\u662f\u8003\u8651\u6784\u9020\u4e00\u4e2a\u66f4\u5927\u7684\u77e9\u9635\u3002 \\[ \\begin{bmatrix}f_n& f_{n-1}& n& 3^n & 1\\end{bmatrix} \\] \u6211\u4eec\u5e0c\u671b\u6784\u9020\u4e00\u4e2a\u9012\u63a8\u77e9\u9635\u53ef\u4ee5\u8f6c\u79fb\u5230 \\[ \\begin{bmatrix} f_{n+1}& f_{n}& n+1& 3^{n+1} & 1 \\end{bmatrix} \\] \u8f6c\u79fb\u77e9\u9635\u5373\u4e3a \\[ \\begin{bmatrix} 7 & 1 & 0 & 0 & 0\\\\ 6 & 0 & 0 & 0 & 0\\\\ 5 & 0 & 1 & 0 & 0\\\\ 12 & 0 & 0 & 3 & 0\\\\ 5 & 0 & 1 & 0 & 1 \\end{bmatrix} \\] \u518d\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff1a \\(f(i) = (f(i - 1) + \\dfrac{p}{100}) / 2\\) \u3002 \uff08\u8981\u53d6\u6a21\u7684\uff09 \u5148\u5c55\u5f00\u5f0f\u5b50\uff1a \\(f(i) = \\dfrac{1}{2} f(i - 1) + \\dfrac{p}{200}\\) \u5982\u679c\u521d\u59cb\u77e9\u9635\u662f \\(1\\times 2\\) \u7684\u611f\u89c9\u4e0a\u5b8c\u5168\u4e0d\u591f\uff0c\u56e0\u4e3a\u6ca1\u6cd5\u5f88\u597d\u7684\u5904\u7406\u8fd9\u4e2a\u201c\u52a0\u4e0a\u4e00\u4e2a\u5e38\u6570\u201d\u7684\u4e1c\u897f\u3002 \u53d1\u73b0 \u8f6c\u79fb\u77e9\u9635\u91cc\u7684\u6570\u7684\u672c\u8d28\u662f\u521d\u59cb\u77e9\u9635\u7684\u6570\u7684\u67d0\u4e2a\u7cfb\u6570 \u3002 \u6240\u4ee5\u672c\u7740\u201c \u9012\u63a8\u5f0f\u91cc\u9700\u8981\u5565\uff0c\u5c31\u5728\u521d\u59cb\u77e9\u9635\u91cc\u653e\u5565 \u201d\u7684\u601d\u60f3\uff0c\u6211\u4eec\u653e\u4e00\u4e2a \\(1\\) \u5728\u521d\u59cb\u77e9\u9635\u91cc\uff0c\u7136\u540e\u6bcf\u6b21\u8f6c\u79fb\u90fd\u8ba9 \\(1\\) \u7684\u7cfb\u6570\u4e3a \\(\\dfrac{p}{200}\\) \u5373\u53ef\u3002 \u521d\u59cb\u77e9\u9635\uff1a \\[\\begin{bmatrix}f(i), f(i - 1), 1\\end{bmatrix}\\] \u5f97\u5230\u7684\u77e9\u9635\uff1a \\[\\begin{bmatrix}f(i + 1), f(i), 1\\end{bmatrix}\\] \u8f6c\u79fb\u77e9\u9635\uff1a \\[\\begin{bmatrix} \\frac{1}{2} & 1 & 0 \\\\ 0 & 0 & 0 \\\\ \\frac{p}{200} & 0 & 1 \\end{bmatrix}\\] \u77e9\u9635\u7684\u4e00\u4e9b\u5e38\u89c1\u5e94\u7528 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6070\u597d K \u6761\u8fb9 \u6700\u77ed\u8def \u03c8(\uff40\u2207\u00b4)\u03c8 \u9996\u5148\u7528\u90bb\u63a5\u77e9\u9635 \\(A\\) \u5b58\u56fe\u3002 \u7136\u540e \\(A[i,j]\\) \u5c31\u53ef\u4ee5\u770b\u505a \\(i \\to j\\) \u7ecf\u8fc7\u6070\u597d\u4e00\u6761\u8fb9\u7684\u6700\u77ed\u8def\u3002 \u8003\u8651\u6c42\u51fa\u7ecf\u8fc7\u6070\u597d\u4e24\u6761\u8fb9\u7684\u6700\u77ed\u8def \\(B\\) \u3002 \u53ef\u4ee5\u53d1\u73b0 \\(B[i,j]=\\min\\limits_{1\\le k \\le n}\\{A[i,k]+A[k,j]\\}\\) \u8fd9\u91cc\u5c31\u662f\u7528\u4e86\u7c7b\u4f3c Floyd \u7684\u679a\u4e3e\u4e2d\u95f4\u70b9\u601d\u60f3\uff08\u5176\u672c\u8d28\u662f dp\uff09\u3002 \u7c7b\u4f3c\u7684\u53ef\u4ee5\u5f97\u5230\u7ecf\u8fc7\u6070\u597d \\(K\\) \u6761\u8fb9\u7684\u6700\u77ed\u8def\u3002 \u8bbe \\(A^{r}\\) \u8868\u793a\u7ecf\u8fc7\u6070\u597d \\(r\\) \u6761\u8fb9\u7684\u6700\u77ed\u8def\u77e9\u9635\u3002 \u53ef\u4ee5\u5f97\u5230 \\(A^{r}[i,j]=\\min\\limits_{1\\le k \\le n}\\{A^p[i,k]+A^q[k,j]\\},r=p+q\\) \u3002 \u53d1\u73b0\u8fd9\u4e2a\u8fd0\u7b97\u5c31\u662f\u4e2a\u7c7b\u4f3c\u4e8e\u77e9\u9635\u4e58\u6cd5\u7684\u4e1c\u897f\uff0c\u6211\u4eec\u5c06\u5176\u5b9a\u4e49\u4e3a \\(\\oplus\\) \u3002 \u628a \\(\\sum\\) \u6362\u6210 \\(\\min\\) \uff0c\u628a \\(\\times\\) \u6362\u6210 \\(+\\) \u5c31\u80fd\u770b\u51fa\u6765\u3002 \u521a\u597d\u8fd9\u4e2a\u4e1c\u897f\u4ecd\u7136\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u6211\u4eec\u628a\u5f0f\u5b50\u5199\u4e00\u4e0b\uff1a \\[ A^{r} = A^{r-1} \\oplus A^1 \\] \u53d1\u73b0 \\(A^r\\) \u5c31\u7b49\u4e8e \\(A^1\\) \u5728 \\(\\oplus\\) \u610f\u4e49\u4e0b\u7684 \\(r\\) \u6b21\u5e42\u3002 \u90a3\u4e48\u5c31\u53ef\u4ee5\u7528\u77e9\u9635\u5feb\u901f\u5e42 \\(n^3\\log K\\) \u6c42 \\(A^K\\) \u4e86\u3002 \u77e9\u9635\u8868\u8fbe\u4fee\u6539 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e2a\u53ef\u4ee5\u770b\u7ebf\u6bb5\u6811\u90a3\u4e2a\u9875\u9762\uff0c\u5199\u5230\u90a3\u91cc\u53bb\u4e86\u3002 links","title":"\u77e9\u9635"},{"location":"algor/math/linear-algebra/matrix/#_1","text":"\u77e9\u9635\u662f\u5565\u5e94\u8be5\u4e0d\u7528\u8bf4\u4e86\u5427\u3002 \u4e00\u822c\u8868\u793a\u7684\u65f6\u5019\u7528\u5927\u5199\u5b57\u6bcd\u8868\u793a\u77e9\u9635\u3002\u7528\u5c0f\u5199\u5b57\u6bcd\u52a0\u4e00\u4e2a\u4e8c\u5143\u7ec4\u4e0b\u6807\u8868\u793a\u77e9\u9635\u91cc\u7684\u5143\u7d20\u3002 \u6bd4\u5982 \\(A\\) \u4e3a\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635\uff1a \u8fd9\u91cc \\(n\\times m\\) \u6307 \\(n\\) \u884c \\(m\\) \u5217\u3002 \\[A=\\begin{bmatrix} a_{1,1} & \\cdots & a_{1,m} \\\\ \\vdots & \\ddots & \\vdots \\\\ a_{n,1} & \\cdots & a_{n,m}\\end{bmatrix}\\] \\(a_{i,j}\\) \u5c31\u8868\u793a\u77e9\u9635 \\(A\\) \u5f53\u4e2d\u7b2c \\(i\\) \u884c\u7b2c \\(j\\) \u5217\u7684\u5143\u7d20\u3002 \uff08\u7ebf\u6027\u4ee3\u6570\u91cc\u4e0d\u662f\u7ecf\u5e38\u8bf4\u884c\u5217\u5f0f\u5417\uff0c\u6240\u4ee5\u662f \u884c \\(\\times\\) \u5217 \u554a\uff08\u5212\u6389\uff09\uff09 \u4e5f\u53ef\u4ee5\u7b80\u8bb0\u4e3a \\(A=(a_{i,j})\\) \u3002 \u5411\u91cf\uff1a\u6ce8\u610f\u8fd9\u91cc\u7684\u5411\u91cf\u548c\u51e0\u4f55\u91cc\u7684\u5411\u91cf\u7684\u4e0d\u540c\u3002 \u4e00\u822c\u628a \\(n\\) \u4e2a\u5b9e\u6570\u7ec4\u6210\u7684 \\(n\\) \u5143\u7ec4\u79f0\u4e3a\u5411\u91cf\u3002 \u5982\u679c\u5b83\u8868\u793a\u4e3a\u4e00\u4e2a \\(1\\times n\\) \u7684\u77e9\u9635\uff0c\u5219\u79f0\u4e3a\u884c\u5411\u91cf\uff0c\u5982\u679c\u662f \\(n \\times 1\\) \uff0c\u5219\u79f0\u4e3a\u5217\u5411\u91cf\uff1a \u884c\u5411\u91cf\uff1a \\((a_1,a_2,a_3,...,a_n)\\) \u5217\u5411\u91cf\uff1a \\(\\begin{bmatrix}a_1 \\\\ a_2 \\\\ \\vdots \\\\ a_n \\end{bmatrix}\\) \u4e00\u822c\u90fd\u662f\u7528\u5217\u5411\u91cf\uff08\u65b9\u4fbf\u4e00\u70b9\uff09\uff0c\u4e00\u822c\u4f1a\u7528\u9ed1\u4f53\u659c\u4f53\u8868\u793a\u5217\u5411\u91cf\u3002 \u6709\u5174\u8da3\u7684\u53ef\u4ee5\u4e86\u89e3\u4e00\u4e0b \\(n\\) \u7ef4\u6b27\u51e0\u91cc\u5fb7\u7a7a\u95f4\uff08\u53ef\u4ee5\u8003\u8651\u770b\u770b\u300a\u7ebf\u6027\u4ee3\u6570\u300b\uff09\u3002 \u5355\u4f4d\u77e9\u9635\uff08 \\(I\\) \uff09\uff1a \u5bf9\u4e8e\u4e00\u4e2a \\(n \\times n\\) \u7684\u77e9\u9635 \\(A\\) \uff0c\u5982\u679c\u6ee1\u8db3 \\(\\forall i ,a_{i,i}=1,\\text{Others}=0\\) \uff0c\u90a3\u4e48\u79f0 \\(A\\) \u662f\u4e00\u4e2a\u5355\u4f4d\u77e9\u9635\uff0c\u4e00\u822c\u8bb0\u4f5c \\(I\\) \u6bd4\u5982\uff1a \\[I=\\begin{bmatrix}1 &0 & 0 \\\\ 0& 1 & 0 \\\\ 0 & 0& 1\\end{bmatrix}\\]","title":"\u5b9a\u4e49"},{"location":"algor/math/linear-algebra/matrix/#_2","text":"\\(\\alpha\\) \u662f\u4e00\u4e2a\u6807\u91cf\uff0c \\(A\\) \u662f\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635\uff0c \u5219 \\(\\alpha A=B\\) \u662f\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635\uff0c\u4e14 \\(B_{i,j}=\\alpha\\times A_{i,j}\\) \u3002 \u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u5206\u914d\u5f8b\u3002","title":"\u6807\u91cf\u4e58\u6cd5"},{"location":"algor/math/linear-algebra/matrix/#_3","text":"\\(A\\) \u662f\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635\uff0c \\(B\\) \u662f\u4e00\u4e2a \\(n\\times m\\) \u7684\u77e9\u9635\uff0c \u5219\u4ed6\u4eec\u8fdb\u884c\u77e9\u9635\u52a0\u6cd5 \\(A+B\\) \u5f97\u5230\u7684\u7ed3\u679c\u77e9\u9635 \\(C\\) \u662f\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635\u3002 \u4e14 \\(C_{i,j}=A_{i,j}+B_{i,j}\\) \u3002 \u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u4ea4\u6362\u5f8b\u3002","title":"\u77e9\u9635\u52a0\u6cd5"},{"location":"algor/math/linear-algebra/matrix/#_4","text":"\u91cd\u5934\u620f\u3002 \\(A\\) \u662f\u4e00\u4e2a \\(n \\times m\\) \u7684\u77e9\u9635\uff0c \\(B\\) \u662f\u4e00\u4e2a \\(m \\times k\\) \u7684\u77e9\u9635\u3002 \u6ce8\u610f\uff0c \\(A\\) \u7684\u5217\u6570\u548c \\(B\\) \u7684\u884c\u6570\u5fc5\u987b\u76f8\u7b49\uff01 \u90a3\u4e48\u4ed6\u4eec\u8fdb\u884c\u77e9\u9635\u4e58\u6cd5 \\(A \\times B\\) \u7684\u5230\u7684\u7ed3\u679c\u77e9\u9635 \\(C\\) \u662f\u4e00\u4e2a \\(n \\times k\\) \u7684\u77e9\u9635\u3002 \u4e14\u6ee1\u8db3\uff1a \\[C_{i,j}=\\sum\\limits_{k=1}^m A_{i,k}\\times B_{k,j}\\] \u5f62\u8c61\u7684\u89e3\u91ca\u5c31\u662f\uff0c \\(C_{i,j}\\) \u7b49\u4e8e \\(A\\) \u7684\u7b2c \\(i\\) \u884c\u548c \\(B\\) \u7684\u7b2c \\(j\\) \u5217\u4e00\u4e00\u5bf9\u5e94\u5730\u4e58\u8d77\u6765\u3002 \u6ce8\u610f\uff1a\u77e9\u9635\u4e58\u6cd5 \u4e0d\u4e00\u5b9a \u6ee1\u8db3\u4ea4\u6362\u5f8b\uff01\uff01 \u4f46\u662f\u5b83\u6ee1\u8db3 \u7ed3\u5408\u5f8b \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 struct Matrix { int a [ si ][ si ]; Matrix (){ memset ( a , 0 , sizeof a ); } inline Matrix operator * ( const Matrix & B ) const { Matrix C , A =* this ; for ( register int i = 1 ; i <= cnt ; ++ i ){ for ( register int j = 1 ; j <= cnt ; ++ j ){ for ( register int k = 1 ; k <= cnt ; ++ k ){ C . a [ i ][ j ] += A . a [ i ][ k ] * B . a [ k ][ j ]; } } } return C ; // \u6700\u597d\u5faa\u73af\u7684\u65f6\u5019\u4e0d\u8981\u7528 si\u3002 // \u7528\u4e00\u4e2a\u8bbe\u5b9a\u597d\u7684\u5e38\u6570\u6216\u8005\u9898\u76ee\u7ed9\u7684\u53d8\u91cf\u4f1a\u6bd4\u8f83\u597d\u3002 // \u4f46\u662f\u5982\u679c\u4e58\u6cd5\u4e0d\u6b62\u9700\u8981\u9002\u7528\u4e8e\u4e00\u5bf9 n,m,k\uff0c\u90a3\u4e48\u5c31\u6700\u597d\u7528 si - 1\u3002 // \u4e3a\u5565\u4e0d\u4f1a\u6709\u5f71\u54cd\u5462\uff1f\u56e0\u4e3a\u6784\u9020\u51fd\u6570\u91cc\u628a\u6ca1\u6709\u7528\u5230\u7684\u8bbe\u7f6e\u6210 0 \u4e86\u3002 } }; \u5982\u679c\u88ab\u5361\u5e38\u4e86\uff0c\u53ef\u4ee5\u8003\u8651\u624b\u52a8\u5c55\u5f00\u5185\u5c42\u5faa\u73af\u3002 \u8981\u6c42\u53d6\u6a21\u7684\u8bdd\u624b\u52a8\u52a0\u4e0a\u5c31\u884c\u3002","title":"\u77e9\u9635\u4e58\u6cd5"},{"location":"algor/math/linear-algebra/matrix/#_5","text":"\u56e0\u4e3a\u77e9\u9635\u4e58\u6cd5\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u6240\u4ee5\u4e00\u4e2a\u77e9\u9635\u7684 \\(k\\) \u6b21\u5e42\u5b9a\u4e49\u4e3a\uff1a \\[A^k=\\begin{matrix}\\underbrace{A \\times A\\times A \\dots \\times A}\\\\k \\text{ times}\\end{matrix}\\] \u56e0\u4e3a\u6240\u6709\u6ee1\u8db3\u7ed3\u5408\u5f8b\u7684\u5143\u7b97\u90fd\u53ef\u4ee5\u4f7f\u7528\u5feb\u901f\u5e42\u6c42\u89e3\u3002 \u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u77e9\u9635\u4e58\u6cd5\u7684\u7ed3\u5408\u5f8b\u5199\u51fa\u4e00\u4e2a\u77e9\u9635\u5feb\u901f\u5e42\u7b97\u6cd5\uff1a 1 2 3 4 5 6 7 Matrix Ans , A ; inline Matrix Qpow ( int b ){ for (; b ; b >>= 1 ){ if ( b & 1 ) Ans = Ans * A ; A = A * A ; } return Ans ; } // \u6709\u7684\u65f6\u5019\u6839\u636e\u60c5\u51b5\u9700\u8981\u521d\u59cb\u5316\u4e00\u4e0b Ans.","title":"\u77e9\u9635\u5feb\u901f\u5e42"},{"location":"algor/math/linear-algebra/matrix/#_6","text":"\u7ed9\u4f60\u4e00\u4e2a\u6570\u5b57 \\(n\\) \uff0c\u6c42\u51fa \\(Fib_n \\text{ mod }998244353 ,n \\le 1e18\\) \u3002 \\(Fib\\) \u662f\u6590\u6ce2\u90a3\u5951\u6570\u5217\u3002 \u770b\u5230 \\(n\\) \u7684\u8303\u56f4\u53d1\u73b0\u76f4\u63a5\u9012\u63a8\u660e\u663e\u7206\u70b8\u3002 \u6240\u4ee5\u8003\u8651\u628a \\(Fib_i,Fib_{i-1}\\) \u8868\u793a\u6210\u4e00\u4e2a\u884c\u5411\u91cf \\(\\begin{bmatrix} Fib_i & Fib_{i-1} \\end{bmatrix}\\) \u7136\u540e\u6211\u4eec\u60f3\u628a\u9012\u63a8\u5f0f\u5b50\u8868\u793a\u6210\u77e9\u9635\u4e58\u6cd5\u7684\u5f62\u5f0f\u518d\u5229\u7528\u77e9\u9635\u5feb\u901f\u5e42\u8fdb\u884c\u9ad8\u901f\u9012\u63a8\uff1a \\(\\begin{bmatrix} Fib_{i-1} & Fib_{i-2} \\end{bmatrix} \\times ? = \\begin{bmatrix} Fib_i & Fib_{i-1} \\end{bmatrix}\\) \u4e0d\u59a8\u8bbe\u8fd9\u4e2a \\(?\\) \u4e3a\u4e00\u4e2a\u77e9\u9635 \\(base\\) \u3002 \u6839\u636e\u77e9\u9635\u4e58\u6cd5\u7684\u5b9a\u4e49\uff0c \\(base\\) \u5e94\u8be5\u662f\u4e00\u4e2a \\(2\\times 2\\) \u7684\u77e9\u9635\u3002 \u8003\u8651\u5217\u51fa\u539f\u6765\u7684\u9012\u63a8\u5f0f\uff1a \\(Fib_{n}=Fib_{n-1}+Fib_{n-2}\\) \u3002 \u53d1\u73b0\u7ed3\u679c\u77e9\u9635\u7684 \\((1,1)\\) \u8fd9\u4e2a\u4f4d\u7f6e\u662f \\(Fib_i\\) \uff0c\u800c\u8fd9\u4e2a\u4f4d\u7f6e \\(C_{1,1}\\) \u5e94\u8be5\u662f\u7b49\u4e8e \\(A_{1,1}\\times B_{1,1}+A_{1,2}\\times B_{2,1}\\) \u4e5f\u5c31\u662f \\(Fib_{i-1} \\times B_{1,1}+Fib_{i-2}\\times B_{2,1}\\) \u6240\u4ee5 \\(B_{1,1}\\) \u548c \\(B_{2,1}\\) \u90fd\u662f \\(1\\) \uff1a \\(\\begin{bmatrix}1\\\\1\\end{bmatrix}\\) \u540c\u7406\u53ef\u4ee5\u5f97\u5230 \\(B_{2,1}\\) \u548c \\(B_{2,2}\\) \uff1a \\(\\begin{bmatrix}1\\\\0\\end{bmatrix}\\) \u6240\u4ee5 \\(base=\\begin{bmatrix}1 & 1\\\\ 1 & 0\\end{bmatrix}\\) \u539f\u5f0f\u53ef\u4ee5\u5316\u4e3a \\(\\begin{bmatrix} Fib_{i-1} & Fib_{i-2} \\end{bmatrix} \\times \\begin{bmatrix}1 & 1\\\\ 1 & 0\\end{bmatrix} = \\begin{bmatrix} Fib_i & Fib_{i-1} \\end{bmatrix}\\) \u3002 \u90a3\u4e48\u8bbe \\(Ans=\\begin{bmatrix} 1 & 1 \\end{bmatrix}=\\begin{bmatrix} Fib_2 & Fib_1\\end{bmatrix}\\) \u6240\u4ee5 \\(Fib_n\\) \u5c31\u662f \\(Ans \\times base^{n-2}\\) \u7684 \\((1,1)\\) \u3002 \u5199\u4e00\u4e2a\u77e9\u9635\u5feb\u901f\u5e42\u5373\u53ef\u3002 \u5e7f\u4e49\u6590\u6ce2\u90a3\u5951\u6570\u5217\u4e5f\u662f\u4e00\u6837\u7684\u3002 \u7136\u540e\u4e3e\u4e00\u4e2a OI-Wiki \u4e0a\u7684\u4f8b\u5b50 \\[ f_{1} = f_{2} = 0 \\\\ f_{n} = 7f_{n-1}+6f_{n-2}+5n+4\\times 3^n \\] \u53d1\u73b0 \\(f_n\\) \u548c \\(f_{n-1}, f_{n-2}, n\\) \u6709\u5173\uff0c\u4e8e\u662f\u8003\u8651\u6784\u9020\u4e00\u4e2a\u77e9\u9635\u63cf\u8ff0\u72b6\u6001\u3002 \u4f46\u662f\u5982\u679c\u77e9\u9635\u4ec5\u6709\u8fd9\u4e09\u4e2a\u5143\u7d20 \\(\\begin{bmatrix}f_n& f_{n-1}& n\\end{bmatrix}\\) \u662f\u96be\u4ee5\u6784\u9020\u51fa\u8f6c\u79fb\u65b9\u7a0b\u7684\uff0c\u56e0\u4e3a\u4e58\u65b9\u8fd0\u7b97\u548c \\(+1\\) \u65e0\u6cd5\u7528\u77e9\u9635\u63cf\u8ff0\u3002 \u4e8e\u662f\u8003\u8651\u6784\u9020\u4e00\u4e2a\u66f4\u5927\u7684\u77e9\u9635\u3002 \\[ \\begin{bmatrix}f_n& f_{n-1}& n& 3^n & 1\\end{bmatrix} \\] \u6211\u4eec\u5e0c\u671b\u6784\u9020\u4e00\u4e2a\u9012\u63a8\u77e9\u9635\u53ef\u4ee5\u8f6c\u79fb\u5230 \\[ \\begin{bmatrix} f_{n+1}& f_{n}& n+1& 3^{n+1} & 1 \\end{bmatrix} \\] \u8f6c\u79fb\u77e9\u9635\u5373\u4e3a \\[ \\begin{bmatrix} 7 & 1 & 0 & 0 & 0\\\\ 6 & 0 & 0 & 0 & 0\\\\ 5 & 0 & 1 & 0 & 0\\\\ 12 & 0 & 0 & 3 & 0\\\\ 5 & 0 & 1 & 0 & 1 \\end{bmatrix} \\] \u518d\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff1a \\(f(i) = (f(i - 1) + \\dfrac{p}{100}) / 2\\) \u3002 \uff08\u8981\u53d6\u6a21\u7684\uff09 \u5148\u5c55\u5f00\u5f0f\u5b50\uff1a \\(f(i) = \\dfrac{1}{2} f(i - 1) + \\dfrac{p}{200}\\) \u5982\u679c\u521d\u59cb\u77e9\u9635\u662f \\(1\\times 2\\) \u7684\u611f\u89c9\u4e0a\u5b8c\u5168\u4e0d\u591f\uff0c\u56e0\u4e3a\u6ca1\u6cd5\u5f88\u597d\u7684\u5904\u7406\u8fd9\u4e2a\u201c\u52a0\u4e0a\u4e00\u4e2a\u5e38\u6570\u201d\u7684\u4e1c\u897f\u3002 \u53d1\u73b0 \u8f6c\u79fb\u77e9\u9635\u91cc\u7684\u6570\u7684\u672c\u8d28\u662f\u521d\u59cb\u77e9\u9635\u7684\u6570\u7684\u67d0\u4e2a\u7cfb\u6570 \u3002 \u6240\u4ee5\u672c\u7740\u201c \u9012\u63a8\u5f0f\u91cc\u9700\u8981\u5565\uff0c\u5c31\u5728\u521d\u59cb\u77e9\u9635\u91cc\u653e\u5565 \u201d\u7684\u601d\u60f3\uff0c\u6211\u4eec\u653e\u4e00\u4e2a \\(1\\) \u5728\u521d\u59cb\u77e9\u9635\u91cc\uff0c\u7136\u540e\u6bcf\u6b21\u8f6c\u79fb\u90fd\u8ba9 \\(1\\) \u7684\u7cfb\u6570\u4e3a \\(\\dfrac{p}{200}\\) \u5373\u53ef\u3002 \u521d\u59cb\u77e9\u9635\uff1a \\[\\begin{bmatrix}f(i), f(i - 1), 1\\end{bmatrix}\\] \u5f97\u5230\u7684\u77e9\u9635\uff1a \\[\\begin{bmatrix}f(i + 1), f(i), 1\\end{bmatrix}\\] \u8f6c\u79fb\u77e9\u9635\uff1a \\[\\begin{bmatrix} \\frac{1}{2} & 1 & 0 \\\\ 0 & 0 & 0 \\\\ \\frac{p}{200} & 0 & 1 \\end{bmatrix}\\]","title":"\u77e9\u9635\u4e58\u6cd5\u4f18\u5316\u9012\u63a8"},{"location":"algor/math/linear-algebra/matrix/#_7","text":"","title":"\u77e9\u9635\u7684\u4e00\u4e9b\u5e38\u89c1\u5e94\u7528"},{"location":"algor/math/linear-algebra/matrix/#k","text":"\u9996\u5148\u7528\u90bb\u63a5\u77e9\u9635 \\(A\\) \u5b58\u56fe\u3002 \u7136\u540e \\(A[i,j]\\) \u5c31\u53ef\u4ee5\u770b\u505a \\(i \\to j\\) \u7ecf\u8fc7\u6070\u597d\u4e00\u6761\u8fb9\u7684\u6700\u77ed\u8def\u3002 \u8003\u8651\u6c42\u51fa\u7ecf\u8fc7\u6070\u597d\u4e24\u6761\u8fb9\u7684\u6700\u77ed\u8def \\(B\\) \u3002 \u53ef\u4ee5\u53d1\u73b0 \\(B[i,j]=\\min\\limits_{1\\le k \\le n}\\{A[i,k]+A[k,j]\\}\\) \u8fd9\u91cc\u5c31\u662f\u7528\u4e86\u7c7b\u4f3c Floyd \u7684\u679a\u4e3e\u4e2d\u95f4\u70b9\u601d\u60f3\uff08\u5176\u672c\u8d28\u662f dp\uff09\u3002 \u7c7b\u4f3c\u7684\u53ef\u4ee5\u5f97\u5230\u7ecf\u8fc7\u6070\u597d \\(K\\) \u6761\u8fb9\u7684\u6700\u77ed\u8def\u3002 \u8bbe \\(A^{r}\\) \u8868\u793a\u7ecf\u8fc7\u6070\u597d \\(r\\) \u6761\u8fb9\u7684\u6700\u77ed\u8def\u77e9\u9635\u3002 \u53ef\u4ee5\u5f97\u5230 \\(A^{r}[i,j]=\\min\\limits_{1\\le k \\le n}\\{A^p[i,k]+A^q[k,j]\\},r=p+q\\) \u3002 \u53d1\u73b0\u8fd9\u4e2a\u8fd0\u7b97\u5c31\u662f\u4e2a\u7c7b\u4f3c\u4e8e\u77e9\u9635\u4e58\u6cd5\u7684\u4e1c\u897f\uff0c\u6211\u4eec\u5c06\u5176\u5b9a\u4e49\u4e3a \\(\\oplus\\) \u3002 \u628a \\(\\sum\\) \u6362\u6210 \\(\\min\\) \uff0c\u628a \\(\\times\\) \u6362\u6210 \\(+\\) \u5c31\u80fd\u770b\u51fa\u6765\u3002 \u521a\u597d\u8fd9\u4e2a\u4e1c\u897f\u4ecd\u7136\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u6211\u4eec\u628a\u5f0f\u5b50\u5199\u4e00\u4e0b\uff1a \\[ A^{r} = A^{r-1} \\oplus A^1 \\] \u53d1\u73b0 \\(A^r\\) \u5c31\u7b49\u4e8e \\(A^1\\) \u5728 \\(\\oplus\\) \u610f\u4e49\u4e0b\u7684 \\(r\\) \u6b21\u5e42\u3002 \u90a3\u4e48\u5c31\u53ef\u4ee5\u7528\u77e9\u9635\u5feb\u901f\u5e42 \\(n^3\\log K\\) \u6c42 \\(A^K\\) \u4e86\u3002","title":"\u6070\u597d K \u6761\u8fb9 \u6700\u77ed\u8def"},{"location":"algor/math/linear-algebra/matrix/#_8","text":"\u8fd9\u4e2a\u53ef\u4ee5\u770b\u7ebf\u6bb5\u6811\u90a3\u4e2a\u9875\u9762\uff0c\u5199\u5230\u90a3\u91cc\u53bb\u4e86\u3002 links","title":"\u77e9\u9635\u8868\u8fbe\u4fee\u6539"},{"location":"algor/math/linear-algebra/perm/","text":"\u5927\u90e8\u5206\u6458\u6284\u81ea : OI-Wiki \u5b9a\u4e49 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6709\u9650\u96c6\u5408\u5230\u81ea\u8eab\u7684\u53cc\u5c04\uff08\u5373\u4e00\u4e00\u5bf9\u5e94\uff09\u79f0\u4e3a\u7f6e\u6362\u3002\u96c6\u5408 \\(S=\\{a_1,a_2,\\dots,a_n\\}\\) \u4e0a\u7684\u7f6e\u6362\u53ef\u4ee5\u8868\u793a\u4e3a \\[ f=\\begin{pmatrix}a_1,a_2,\\dots,a_n\\\\ a_{p_1},a_{p_2},\\dots,a_{p_n} \\end{pmatrix} \\] \u610f\u4e3a\u5c06 \\(a_i\\) \u6620\u5c04\u4e3a \\(a_{p_i}\\) \uff0c\u5176\u4e2d \\(p_1,p_2,\\dots,p_n\\) \u662f \\(1,2,\\dots,n\\) \u7684\u4e00\u4e2a\u6392\u5217\u3002\u663e\u7136 \\(S\\) \u4e0a\u6240\u6709\u7f6e\u6362\u7684\u6570\u91cf\u4e3a \\(n!\\) \u3002 \u7f6e\u6362\u4e58\u6cd5 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5bf9\u4e8e\u4e24\u4e2a\u7f6e\u6362 \\(f=\\begin{pmatrix}a_1,a_2,\\dots,a_n\\\\a_{p_1},a_{p_2},\\dots,a_{p_n}\\end{pmatrix}\\) \u548c \\(g=\\begin{pmatrix}a_{p_1},a_{p_2},\\dots,a_{p_n}\\\\a_{q_1},a_{q_2},\\dots,a_{q_n}\\end{pmatrix}\\) \uff0c \\(f\\) \u548c \\(g\\) \u7684\u4e58\u79ef\u8bb0\u4e3a \\(f\\circ g\\) \uff0c\u5176\u503c\u4e3a \\[ f\\circ g=\\begin{pmatrix}a_1,a_2,\\dots,a_n\\\\ a_{q_1},a_{q_2},\\dots,a_{q_n}\\end{pmatrix} \\] \u7b80\u5355\u6765\u8bf4\u5c31\u662f\u5148\u540e\u7ecf\u8fc7 \\(f\\) \u7684\u6620\u5c04\uff0c\u518d\u7ecf\u8fc7 \\(g\\) \u7684\u6620\u5c04\u3002 \u5faa\u73af\u7f6e\u6362 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5faa\u73af\u7f6e\u6362\u662f\u4e00\u7c7b\u7279\u6b8a\u7684\u7f6e\u6362\uff0c\u53ef\u8868\u793a\u4e3a \\[ (a_1,a_2,\\dots,a_m)=\\begin{pmatrix}a_1,a_2,\\dots,a_{m-1},a_m\\\\ a_2,a_3,\\dots,a_m,a_1\\end{pmatrix} \\] \u82e5\u4e24\u4e2a\u5faa\u73af\u7f6e\u6362\u4e0d\u542b\u6709\u76f8\u540c\u7684\u5143\u7d20\uff0c\u5219\u79f0\u5b83\u4eec\u662f \u4e0d\u76f8\u4ea4 \u7684\u3002\u6709\u5982\u4e0b\u5b9a\u7406\uff1a \u4efb\u610f\u4e00\u4e2a\u7f6e\u6362\u90fd\u53ef\u4ee5\u5206\u89e3\u4e3a\u82e5\u5e72\u4e0d\u76f8\u4ea4\u7684\u5faa\u73af\u7f6e\u6362\u7684\u4e58\u79ef\uff0c\u4f8b\u5982 \\[ \\begin{pmatrix}a_1,a_2,a_3,a_4,a_5\\\\ a_3,a_1,a_2,a_5,a_4\\end{pmatrix}=(a_1,a_3,a_2)\\circ(a_4,a_5) \\] \u8be5\u5b9a\u7406\u7684\u8bc1\u660e\u4e5f\u975e\u5e38\u7b80\u5355\u3002\u5982\u679c\u628a\u5143\u7d20\u89c6\u4e3a\u56fe\u7684\u8282\u70b9\uff0c\u6620\u5c04\u5173\u7cfb\u89c6\u4e3a\u6709\u5411\u8fb9\uff0c\u5219\u6bcf\u4e2a\u8282\u70b9\u7684\u5165\u5ea6\u548c\u51fa\u5ea6\u90fd\u4e3a 1\uff0c\u56e0\u6b64\u5f62\u6210\u7684\u56fe\u5f62\u5fc5\u5b9a\u662f\u82e5\u5e72\u4e2a\u73af\u7684\u96c6\u5408\uff0c\u800c\u4e00\u4e2a\u73af\u5373\u53ef\u7528\u4e00\u4e2a\u5faa\u73af\u7f6e\u6362\u8868\u793a\u3002 \u8fd9\u4e2a\u4e1c\u897f\u4e5f\u53ef\u4ee5\u53eb\u505a\u201c\u7f6e\u6362\u73af\u201d\uff0c\u5728\u5f88\u591a\u5e8f\u5217\u7684\u53d8\u6362\u95ee\u9898\u91cc\u51fa\u73b0\u6bd4\u8f83\u9891\u7e41\u3002 \u4e0d\u8fc7\u7528\u5230\u7684\u65f6\u5019\u4e00\u822c \\(S\\) \u90fd\u662f\u4e00\u4e2a\u53ef\u91cd\u96c6\uff08\u53ef\u4ee5\u770b\u4f5c\u4e00\u4e2a\u5e8f\u5217\uff09\u3002 \u5047\u8bbe\u4e00\u6b21 \u201c\u64cd\u4f5c\u201d \u662f\uff0c\u4ea4\u6362 \\(a\\) \u4e2d\u7684\u4efb\u610f\u4e24\u4e2a\u5143\u7d20\uff0c \\(b\\) \u662f \\(a\\) \u7ecf\u8fc7\u4e00\u6b21\u7f6e\u6362\u4e4b\u540e\u5f97\u5230\u7684\u5e8f\u5217 \\(\\{a_{p_1},a_{p_2},\\dots,a_{p_n}\\}\\) \u3002 \u5e76\u4e14\u6211\u4eec\u5c06\u7f6e\u6362 \\[ f=\\begin{pmatrix}a_1,a_2,\\dots,a_n\\\\ a_{p_1},a_{p_2},\\dots,a_{p_n} \\end{pmatrix} \\] \u62c6\u6210\u4e86\u82e5\u5e72\u4e2a\u5faa\u73af\u7f6e\u6362 \\(g_1,g_2,\\dots\\) \u3002 \u90a3\u4e48\u53ef\u4ee5\u6709\u5982\u4e0b\u7ed3\u8bba\uff1a \u5faa\u73af\u7f6e\u6362\u4e0a\u4e0d\u80fd\u6709\u76f8\u540c\u7684\u5143\u7d20\uff08\u5c31\u662f\u8bf4\uff0c\u5047\u8bbe\u8fd9\u4e2a\u5faa\u73af\u7f6e\u6362\u662f \\(a\\) \u7684\u4e00\u4e2a\u5b50\u5e8f\u5217 \\(c\\) \u7684\u7f6e\u6362\uff0c\u90a3\u4e48 \\(c\\) \u4e0d\u80fd\u6709\u91cd\u590d\u7684\u5143\u7d20\u51fa\u73b0\uff09 \u8fd9\u4e2a\u7528\u7f6e\u6362\u7684\u5b9a\u4e49\uff08\u96c6\u5408\u610f\u4e49\u4e0a\u7684\u53cc\u5c04\uff09\u53ef\u5f97\u3002 \u5982\u679c\u628a\u4e24\u4e2a\u5faa\u73af\u7f6e\u6362 \\(g_1,g_2\\) \u4e0a\u5206\u522b\u62ff\u4e24\u4e2a\u5143\u7d20\u51fa\u6765\uff0c\u4ea4\u6362\u4e00\u6b21\uff0c\u90a3\u4e48 \\(g_1,g_2\\) \u4f1a\u5408\u5e76\u6210\u4e00\u4e2a\u5faa\u73af\u7f6e\u6362\u3002 \u5982\u679c\u628a\u4e00\u4e2a\u5faa\u73af\u7f6e\u6362 \\(g\\) \u7684\u4efb\u610f\u4e24\u4e2a\u5143\u7d20\u4ea4\u6362\u4e00\u6b21\uff0c\u5b83\u4f1a\u5206\u88c2\u6210\u4e24\u4e2a\u5faa\u73af\u7f6e\u6362 \\(g_1,g_2\\) \u3002 \u5bf9\u4e8e\u4e00\u4e2a\u5faa\u73af\u7f6e\u6362 \\(g\\) \uff0c\u5355\u72ec\u505a\u4e00\u6b21\u8fd9\u4e2a\u7f6e\u6362\u6700\u5c11\u9700\u8981\u82b1\u8d39 \\(siz(g)-1\\) \u6b21\u64cd\u4f5c\u3002 \u5176\u4e2d \\(siz()\\) \u662f\u8fd9\u4e2a\u5faa\u73af\u7f6e\u6362\u5305\u542b\u7684\u5143\u7d20\u4e2a\u6570\u3002 \u8fd9\u4e2a\u7531 2 \u53ef\u4ee5\u5f97\u77e5 \u7531 \\(a\\) \u5230 \\(b\\) \uff0c\u81f3\u5c11\u9700\u8981\u4f7f\u7528 \\(n - cnt(g)\\) \u6b21\u64cd\u4f5c\u3002 \u5176\u4e2d \\(cnt(g)\\) \u662f\u603b\u5171\u62c6\u6210\u7684\u5faa\u73af\u7f6e\u6362\u7684\u4e2a\u6570\u3002 \u8fd9\u4e2a\u7531 2, 3, 4 \u53ef\u4ee5\u5f97\u77e5\u3002 \u6700\u8fd1\u4e00\u4e9b\u7528\u5230\u5b83\u7684 CF \u9898\uff1a 1672F1 - Codeforces 1672F2 - Codeforces 1670C - Codeforces 1678E - Codeforces 1682E - Codeforces \u4e00\u822c\u90fd\u662f\u76f4\u63a5\u8fde\u8fb9\uff0c\u7136\u540e Tarjan \u6216\u8005 dfs \u627e\u73af\uff0c\u7136\u540e\u5904\u7406\u3002 \u4e2a\u4eba\u559c\u6b22\u4f7f\u7528 Tarjan\uff0c\u56e0\u4e3a\u5728\u627e\u5b8c\u73af\u4e4b\u540e\u80fd\u505a\u989d\u5916\u7684\u5904\u7406\uff0c\u6bd4\u8f83\u65b9\u4fbf\u3002 \u4e0d\u8fc7 Tarjan \u5c31\u9700\u8981\u5224\u4e00\u4e0b\u81ea\u73af\uff0c\u56e0\u4e3a\u5b83\u5bb9\u6613\u5904\u7406\u4e0d\u4e86\uff0c\u6216\u8005\u8bf4\u5176\u5b9e\u6839\u672c\u6ca1\u5fc5\u8981\u3002 \u4f46\u5982\u679c\u8981\u6253\u8d77\u6765\u5feb\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u4ec0\u4e48\u989d\u5916\u7684\u4fe1\u606f\uff0c\u8fd8\u662f\u76f4\u63a5\u5199\u4e2a dfs \u6bd4\u8f83\u597d\u3002","title":"\u7f6e\u6362"},{"location":"algor/math/linear-algebra/perm/#_1","text":"\u6709\u9650\u96c6\u5408\u5230\u81ea\u8eab\u7684\u53cc\u5c04\uff08\u5373\u4e00\u4e00\u5bf9\u5e94\uff09\u79f0\u4e3a\u7f6e\u6362\u3002\u96c6\u5408 \\(S=\\{a_1,a_2,\\dots,a_n\\}\\) \u4e0a\u7684\u7f6e\u6362\u53ef\u4ee5\u8868\u793a\u4e3a \\[ f=\\begin{pmatrix}a_1,a_2,\\dots,a_n\\\\ a_{p_1},a_{p_2},\\dots,a_{p_n} \\end{pmatrix} \\] \u610f\u4e3a\u5c06 \\(a_i\\) \u6620\u5c04\u4e3a \\(a_{p_i}\\) \uff0c\u5176\u4e2d \\(p_1,p_2,\\dots,p_n\\) \u662f \\(1,2,\\dots,n\\) \u7684\u4e00\u4e2a\u6392\u5217\u3002\u663e\u7136 \\(S\\) \u4e0a\u6240\u6709\u7f6e\u6362\u7684\u6570\u91cf\u4e3a \\(n!\\) \u3002","title":"\u5b9a\u4e49"},{"location":"algor/math/linear-algebra/perm/#_2","text":"\u5bf9\u4e8e\u4e24\u4e2a\u7f6e\u6362 \\(f=\\begin{pmatrix}a_1,a_2,\\dots,a_n\\\\a_{p_1},a_{p_2},\\dots,a_{p_n}\\end{pmatrix}\\) \u548c \\(g=\\begin{pmatrix}a_{p_1},a_{p_2},\\dots,a_{p_n}\\\\a_{q_1},a_{q_2},\\dots,a_{q_n}\\end{pmatrix}\\) \uff0c \\(f\\) \u548c \\(g\\) \u7684\u4e58\u79ef\u8bb0\u4e3a \\(f\\circ g\\) \uff0c\u5176\u503c\u4e3a \\[ f\\circ g=\\begin{pmatrix}a_1,a_2,\\dots,a_n\\\\ a_{q_1},a_{q_2},\\dots,a_{q_n}\\end{pmatrix} \\] \u7b80\u5355\u6765\u8bf4\u5c31\u662f\u5148\u540e\u7ecf\u8fc7 \\(f\\) \u7684\u6620\u5c04\uff0c\u518d\u7ecf\u8fc7 \\(g\\) \u7684\u6620\u5c04\u3002","title":"\u7f6e\u6362\u4e58\u6cd5"},{"location":"algor/math/linear-algebra/perm/#_3","text":"\u5faa\u73af\u7f6e\u6362\u662f\u4e00\u7c7b\u7279\u6b8a\u7684\u7f6e\u6362\uff0c\u53ef\u8868\u793a\u4e3a \\[ (a_1,a_2,\\dots,a_m)=\\begin{pmatrix}a_1,a_2,\\dots,a_{m-1},a_m\\\\ a_2,a_3,\\dots,a_m,a_1\\end{pmatrix} \\] \u82e5\u4e24\u4e2a\u5faa\u73af\u7f6e\u6362\u4e0d\u542b\u6709\u76f8\u540c\u7684\u5143\u7d20\uff0c\u5219\u79f0\u5b83\u4eec\u662f \u4e0d\u76f8\u4ea4 \u7684\u3002\u6709\u5982\u4e0b\u5b9a\u7406\uff1a \u4efb\u610f\u4e00\u4e2a\u7f6e\u6362\u90fd\u53ef\u4ee5\u5206\u89e3\u4e3a\u82e5\u5e72\u4e0d\u76f8\u4ea4\u7684\u5faa\u73af\u7f6e\u6362\u7684\u4e58\u79ef\uff0c\u4f8b\u5982 \\[ \\begin{pmatrix}a_1,a_2,a_3,a_4,a_5\\\\ a_3,a_1,a_2,a_5,a_4\\end{pmatrix}=(a_1,a_3,a_2)\\circ(a_4,a_5) \\] \u8be5\u5b9a\u7406\u7684\u8bc1\u660e\u4e5f\u975e\u5e38\u7b80\u5355\u3002\u5982\u679c\u628a\u5143\u7d20\u89c6\u4e3a\u56fe\u7684\u8282\u70b9\uff0c\u6620\u5c04\u5173\u7cfb\u89c6\u4e3a\u6709\u5411\u8fb9\uff0c\u5219\u6bcf\u4e2a\u8282\u70b9\u7684\u5165\u5ea6\u548c\u51fa\u5ea6\u90fd\u4e3a 1\uff0c\u56e0\u6b64\u5f62\u6210\u7684\u56fe\u5f62\u5fc5\u5b9a\u662f\u82e5\u5e72\u4e2a\u73af\u7684\u96c6\u5408\uff0c\u800c\u4e00\u4e2a\u73af\u5373\u53ef\u7528\u4e00\u4e2a\u5faa\u73af\u7f6e\u6362\u8868\u793a\u3002 \u8fd9\u4e2a\u4e1c\u897f\u4e5f\u53ef\u4ee5\u53eb\u505a\u201c\u7f6e\u6362\u73af\u201d\uff0c\u5728\u5f88\u591a\u5e8f\u5217\u7684\u53d8\u6362\u95ee\u9898\u91cc\u51fa\u73b0\u6bd4\u8f83\u9891\u7e41\u3002 \u4e0d\u8fc7\u7528\u5230\u7684\u65f6\u5019\u4e00\u822c \\(S\\) \u90fd\u662f\u4e00\u4e2a\u53ef\u91cd\u96c6\uff08\u53ef\u4ee5\u770b\u4f5c\u4e00\u4e2a\u5e8f\u5217\uff09\u3002 \u5047\u8bbe\u4e00\u6b21 \u201c\u64cd\u4f5c\u201d \u662f\uff0c\u4ea4\u6362 \\(a\\) \u4e2d\u7684\u4efb\u610f\u4e24\u4e2a\u5143\u7d20\uff0c \\(b\\) \u662f \\(a\\) \u7ecf\u8fc7\u4e00\u6b21\u7f6e\u6362\u4e4b\u540e\u5f97\u5230\u7684\u5e8f\u5217 \\(\\{a_{p_1},a_{p_2},\\dots,a_{p_n}\\}\\) \u3002 \u5e76\u4e14\u6211\u4eec\u5c06\u7f6e\u6362 \\[ f=\\begin{pmatrix}a_1,a_2,\\dots,a_n\\\\ a_{p_1},a_{p_2},\\dots,a_{p_n} \\end{pmatrix} \\] \u62c6\u6210\u4e86\u82e5\u5e72\u4e2a\u5faa\u73af\u7f6e\u6362 \\(g_1,g_2,\\dots\\) \u3002 \u90a3\u4e48\u53ef\u4ee5\u6709\u5982\u4e0b\u7ed3\u8bba\uff1a \u5faa\u73af\u7f6e\u6362\u4e0a\u4e0d\u80fd\u6709\u76f8\u540c\u7684\u5143\u7d20\uff08\u5c31\u662f\u8bf4\uff0c\u5047\u8bbe\u8fd9\u4e2a\u5faa\u73af\u7f6e\u6362\u662f \\(a\\) \u7684\u4e00\u4e2a\u5b50\u5e8f\u5217 \\(c\\) \u7684\u7f6e\u6362\uff0c\u90a3\u4e48 \\(c\\) \u4e0d\u80fd\u6709\u91cd\u590d\u7684\u5143\u7d20\u51fa\u73b0\uff09 \u8fd9\u4e2a\u7528\u7f6e\u6362\u7684\u5b9a\u4e49\uff08\u96c6\u5408\u610f\u4e49\u4e0a\u7684\u53cc\u5c04\uff09\u53ef\u5f97\u3002 \u5982\u679c\u628a\u4e24\u4e2a\u5faa\u73af\u7f6e\u6362 \\(g_1,g_2\\) \u4e0a\u5206\u522b\u62ff\u4e24\u4e2a\u5143\u7d20\u51fa\u6765\uff0c\u4ea4\u6362\u4e00\u6b21\uff0c\u90a3\u4e48 \\(g_1,g_2\\) \u4f1a\u5408\u5e76\u6210\u4e00\u4e2a\u5faa\u73af\u7f6e\u6362\u3002 \u5982\u679c\u628a\u4e00\u4e2a\u5faa\u73af\u7f6e\u6362 \\(g\\) \u7684\u4efb\u610f\u4e24\u4e2a\u5143\u7d20\u4ea4\u6362\u4e00\u6b21\uff0c\u5b83\u4f1a\u5206\u88c2\u6210\u4e24\u4e2a\u5faa\u73af\u7f6e\u6362 \\(g_1,g_2\\) \u3002 \u5bf9\u4e8e\u4e00\u4e2a\u5faa\u73af\u7f6e\u6362 \\(g\\) \uff0c\u5355\u72ec\u505a\u4e00\u6b21\u8fd9\u4e2a\u7f6e\u6362\u6700\u5c11\u9700\u8981\u82b1\u8d39 \\(siz(g)-1\\) \u6b21\u64cd\u4f5c\u3002 \u5176\u4e2d \\(siz()\\) \u662f\u8fd9\u4e2a\u5faa\u73af\u7f6e\u6362\u5305\u542b\u7684\u5143\u7d20\u4e2a\u6570\u3002 \u8fd9\u4e2a\u7531 2 \u53ef\u4ee5\u5f97\u77e5 \u7531 \\(a\\) \u5230 \\(b\\) \uff0c\u81f3\u5c11\u9700\u8981\u4f7f\u7528 \\(n - cnt(g)\\) \u6b21\u64cd\u4f5c\u3002 \u5176\u4e2d \\(cnt(g)\\) \u662f\u603b\u5171\u62c6\u6210\u7684\u5faa\u73af\u7f6e\u6362\u7684\u4e2a\u6570\u3002 \u8fd9\u4e2a\u7531 2, 3, 4 \u53ef\u4ee5\u5f97\u77e5\u3002 \u6700\u8fd1\u4e00\u4e9b\u7528\u5230\u5b83\u7684 CF \u9898\uff1a 1672F1 - Codeforces 1672F2 - Codeforces 1670C - Codeforces 1678E - Codeforces 1682E - Codeforces \u4e00\u822c\u90fd\u662f\u76f4\u63a5\u8fde\u8fb9\uff0c\u7136\u540e Tarjan \u6216\u8005 dfs \u627e\u73af\uff0c\u7136\u540e\u5904\u7406\u3002 \u4e2a\u4eba\u559c\u6b22\u4f7f\u7528 Tarjan\uff0c\u56e0\u4e3a\u5728\u627e\u5b8c\u73af\u4e4b\u540e\u80fd\u505a\u989d\u5916\u7684\u5904\u7406\uff0c\u6bd4\u8f83\u65b9\u4fbf\u3002 \u4e0d\u8fc7 Tarjan \u5c31\u9700\u8981\u5224\u4e00\u4e0b\u81ea\u73af\uff0c\u56e0\u4e3a\u5b83\u5bb9\u6613\u5904\u7406\u4e0d\u4e86\uff0c\u6216\u8005\u8bf4\u5176\u5b9e\u6839\u672c\u6ca1\u5fc5\u8981\u3002 \u4f46\u5982\u679c\u8981\u6253\u8d77\u6765\u5feb\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u4ec0\u4e48\u989d\u5916\u7684\u4fe1\u606f\uff0c\u8fd8\u662f\u76f4\u63a5\u5199\u4e2a dfs \u6bd4\u8f83\u597d\u3002","title":"\u5faa\u73af\u7f6e\u6362"},{"location":"algor/math/linear-algebra/poset/","text":"\u975e\u4e25\u683c\u504f\u5e8f\uff0c\u81ea\u53cd\u504f\u5e8f \u03c8(\uff40\u2207\u00b4)\u03c8 \u8bbe \\(\\preccurlyeq\\) \u662f\u96c6\u5408 \\(S\\) \u4e0a\u7684\u4e8c\u5143\u5173\u7cfb\uff0c\u5982\u679c \\(\\preccurlyeq\\) \u6ee1\u8db3\uff1a \u81ea\u53cd\u6027\uff1a \\(\\forall a \\in S,\\) \u6709 \\(a \\preccurlyeq a\\) \u53cd\u5bf9\u79f0\u6027\uff1a \\(\\forall a,b \\in S,a\\preccurlyeq b \\land b \\preccurlyeq a,\\) \u5219 \\(a=b\\) \u3002 \u4f20\u9012\u6027\uff1a \\(\\forall a,b,c \\in S, a \\preccurlyeq b \\land b \\preccurlyeq c,\\) \u5219 \\(a \\preccurlyeq c\\) \u5219\u79f0 \\(\\preccurlyeq\\) \u662f \\(S\\) \u4e0a\u7684\u975e\u4e25\u683c\u504f\u5e8f\u6216\u81ea\u53cd\u504f\u5e8f\u3002 \u7c7b\u4f3c\u56fe\u8bba\u91cc\u7684\u81ea\u73af\u548c\u65e0\u5411\u8fb9\u3002 \u4e25\u683c\u504f\u5e8f\uff0c\u53cd\u81ea\u53cd\u504f\u5e8f \u03c8(\uff40\u2207\u00b4)\u03c8 \u8bbe \\(\\prec\\) \u662f\u96c6\u5408 \\(S\\) \u4e0a\u7684\u4e8c\u5143\u5173\u7cfb\uff0c\u5982\u679c \\(\\prec\\) \u6ee1\u8db3\uff1a \u53cd\u81ea\u53cd\u6027\uff1a \\(\\forall a \\in S,\\) \u6709 \\(a \\not\\prec a\\) \u975e\u5bf9\u79f0\u6027\uff1a \\(\\forall a,b \\in S,a\\prec b \\Rightarrow b \\not\\prec a,\\) \u3002 \u4f20\u9012\u6027\uff1a \\(\\forall a,b,c \\in S, a \\prec b \\land b \\prec c,\\) \u5219 \\(a \\prec c\\) \u5219\u79f0 \\(\\prec\\) \u662f \\(S\\) \u4e0a\u7684\u4e25\u683c\u504f\u5e8f\u6216\u53cd\u81ea\u53cd\u504f\u5e8f\u3002 \u7c7b\u4f3c\u56fe\u8bba\u91cc\u7684\u6709\u5411\u8fb9\u3002 \u4e00\u4e2a\u96c6\u5408\u4e0a\u7684\u4e25\u683c\u504f\u5e8f\u5173\u7cfb\u56fe\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u4e2a DAG\uff08\u6709\u5411\u65e0\u73af\uff09\u3002 \u5e76\u4e14\u8fd9\u4e2a\u56fe\u7684\u4f20\u9012\u95ed\u5305\u662f\u5b83\u81ea\u5df1\u3002 \u6240\u4ee5\u9047\u5230\u4e25\u683c\u504f\u5e8f\u7684\u5224\u5b9a\uff08\u662f\u5426\u6210\u7acb\uff09\u65f6\uff0c\u53ef\u4ee5\u5229\u7528\u62d3\u6251\u6392\u5e8f\u89e3\u51b3\u3002 \u5982\u679c\u6392\u5e8f\u5b8c\u4e86\u4e4b\u540e\uff0c\u4ecd\u6709 \\(deg \\not= 0\\) \u7684\u70b9\uff0c\u5219\u8fd9\u4e2a\u4e25\u683c\u504f\u5e8f\u5173\u7cfb\u4e0d\u6210\u7acb\u3002 \u5982\u679c\u6210\u7acb\uff0c\u8981\u6c42\u6784\u9020\u65b9\u6848\u65f6\uff0c\u4e00\u822c\u9700\u8981\u7528\u5230\u62d3\u6251\u5e8f\u3002","title":"\u504f\u5e8f"},{"location":"algor/math/linear-algebra/poset/#_1","text":"\u8bbe \\(\\preccurlyeq\\) \u662f\u96c6\u5408 \\(S\\) \u4e0a\u7684\u4e8c\u5143\u5173\u7cfb\uff0c\u5982\u679c \\(\\preccurlyeq\\) \u6ee1\u8db3\uff1a \u81ea\u53cd\u6027\uff1a \\(\\forall a \\in S,\\) \u6709 \\(a \\preccurlyeq a\\) \u53cd\u5bf9\u79f0\u6027\uff1a \\(\\forall a,b \\in S,a\\preccurlyeq b \\land b \\preccurlyeq a,\\) \u5219 \\(a=b\\) \u3002 \u4f20\u9012\u6027\uff1a \\(\\forall a,b,c \\in S, a \\preccurlyeq b \\land b \\preccurlyeq c,\\) \u5219 \\(a \\preccurlyeq c\\) \u5219\u79f0 \\(\\preccurlyeq\\) \u662f \\(S\\) \u4e0a\u7684\u975e\u4e25\u683c\u504f\u5e8f\u6216\u81ea\u53cd\u504f\u5e8f\u3002 \u7c7b\u4f3c\u56fe\u8bba\u91cc\u7684\u81ea\u73af\u548c\u65e0\u5411\u8fb9\u3002","title":"\u975e\u4e25\u683c\u504f\u5e8f\uff0c\u81ea\u53cd\u504f\u5e8f"},{"location":"algor/math/linear-algebra/poset/#_2","text":"\u8bbe \\(\\prec\\) \u662f\u96c6\u5408 \\(S\\) \u4e0a\u7684\u4e8c\u5143\u5173\u7cfb\uff0c\u5982\u679c \\(\\prec\\) \u6ee1\u8db3\uff1a \u53cd\u81ea\u53cd\u6027\uff1a \\(\\forall a \\in S,\\) \u6709 \\(a \\not\\prec a\\) \u975e\u5bf9\u79f0\u6027\uff1a \\(\\forall a,b \\in S,a\\prec b \\Rightarrow b \\not\\prec a,\\) \u3002 \u4f20\u9012\u6027\uff1a \\(\\forall a,b,c \\in S, a \\prec b \\land b \\prec c,\\) \u5219 \\(a \\prec c\\) \u5219\u79f0 \\(\\prec\\) \u662f \\(S\\) \u4e0a\u7684\u4e25\u683c\u504f\u5e8f\u6216\u53cd\u81ea\u53cd\u504f\u5e8f\u3002 \u7c7b\u4f3c\u56fe\u8bba\u91cc\u7684\u6709\u5411\u8fb9\u3002 \u4e00\u4e2a\u96c6\u5408\u4e0a\u7684\u4e25\u683c\u504f\u5e8f\u5173\u7cfb\u56fe\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u4e2a DAG\uff08\u6709\u5411\u65e0\u73af\uff09\u3002 \u5e76\u4e14\u8fd9\u4e2a\u56fe\u7684\u4f20\u9012\u95ed\u5305\u662f\u5b83\u81ea\u5df1\u3002 \u6240\u4ee5\u9047\u5230\u4e25\u683c\u504f\u5e8f\u7684\u5224\u5b9a\uff08\u662f\u5426\u6210\u7acb\uff09\u65f6\uff0c\u53ef\u4ee5\u5229\u7528\u62d3\u6251\u6392\u5e8f\u89e3\u51b3\u3002 \u5982\u679c\u6392\u5e8f\u5b8c\u4e86\u4e4b\u540e\uff0c\u4ecd\u6709 \\(deg \\not= 0\\) \u7684\u70b9\uff0c\u5219\u8fd9\u4e2a\u4e25\u683c\u504f\u5e8f\u5173\u7cfb\u4e0d\u6210\u7acb\u3002 \u5982\u679c\u6210\u7acb\uff0c\u8981\u6c42\u6784\u9020\u65b9\u6848\u65f6\uff0c\u4e00\u822c\u9700\u8981\u7528\u5230\u62d3\u6251\u5e8f\u3002","title":"\u4e25\u683c\u504f\u5e8f\uff0c\u53cd\u81ea\u53cd\u504f\u5e8f"},{"location":"algor/math/number-theory/congruence/","text":"\u540c\u4f59 \u03c8(\uff40\u2207\u00b4)\u03c8 \u51e0\u4e2a\u5b9a\u4e49\uff1a \u540c\u4f59\uff1a\u82e5 \\(a \\bmod m = b \\bmod m\\) \uff0c\u79f0 \\(a\\) \u4e0e \\(b\\) \u5728\u6a21 \\(m\\) \u610f\u4e49\u4e0b\u540c\u4f59\uff0c\u8bb0\u4e3a \\(a \\equiv b \\pmod m\\) \u3002 \u540c\u4f59\u7c7b\uff1a\u5bf9\u4e8e \\(\\forall a \\in [0, m), \\{a + km\\}(k \\in \\mathbb{Z})\\) \u6784\u6210\u4e00\u4e2a\u6a21 \\(m\\) \u4f59\u6570\u76f8\u540c\u7684\u96c6\u5408\uff0c\u8bb0\u4e3a \\(\\overline{a}\\) \uff0c\u79f0\u4e3a\u6a21 \\(m\\) \u7684\u4e00\u4e2a\u540c\u4f59\u7c7b\u3002 \u5269\u4f59\u7cfb\uff1a \\(\\overline{0}, \\overline{1}, \\dots \\overline{m - 1}\\) \u6784\u6210 \\(m\\) \u7684\u5b8c\u5168\u5269\u4f59\u7cfb \u7b80\u5316\u5269\u4f59\u7cfb\uff1a\u6240\u6709 \\(\\gcd(a, m) = 1, a < m\\) \u7684 \\(\\overline{a}\\) \u6784\u6210 \\(m\\) \u7684\u7b80\u5316\u5269\u4f59\u7cfb\uff0c\u8fd9\u6837\u7684\u540c\u4f59\u7c7b\u6709 \\(\\varphi(n)\\) \u4e2a\u3002 \u7b80\u5316\u5269\u4f59\u7cfb\u5173\u4e8e\u6a21 \\(m\\) \u4e58\u6cd5\u5c01\u95ed\uff0c\u8fd9\u4e2a\u6027\u8d28\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u7528\u6765\u8bc1\u660e\u4e24\u4e2a\u7b80\u5316\u5269\u4f59\u7cfb\u662f\u76f8\u7b49\u7684\uff0c\u8fdb\u800c\u8bc1\u660e\u4e00\u4e9b\u7ed3\u8bba\uff0c\u8fd9\u4e2a\u7ed3\u8bba\u7684\u8bc1\u660e\u6bd4\u8f83\u7b80\u5355\uff1a\u8003\u8651 \\(\\forall a, b, \\gcd(a, m) = \\gcd(b, m) = 1, a,b < m\\) \uff0c\u56e0\u4e3a \\(a, b\\) \u548c \\(m\\) \u4e0d\u542b\u6709\u76f8\u540c\u8d28\u56e0\u5b50\uff0c\u6240\u4ee5 \\(ab\\) \u548c \\(m\\) \u4e5f\u6ca1\u6709\u516c\u5171\u8d28\u56e0\u5b50\u3002 \u6269\u5c55\u6b27\u51e0\u91cc\u5f97 \u03c8(\uff40\u2207\u00b4)\u03c8 B\u00e9zout \u5b9a\u7406\uff1a \\(\\forall a, b\\in \\mathbb{Z}, \\exists x, y \\in \\mathbb{Z}, ax + by = \\gcd(a, b)\\) \u3002 \u8bc1\u660e\uff1a \u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u6c42 \\(\\gcd\\) \u7684\u6700\u540e\u4e00\u6b65\u4e00\u5b9a\u662f \\(b = 0, a \\not ={0}\\) \uff0c\u6b64\u65f6\u663e\u7136\u6ee1\u8db3\u3002 \u5047\u8bbe \\(b > 0\\) \uff0c\u90a3\u4e48\u5047\u8bbe\u5b58\u5728 \\(x, y\\) \u4f7f\u5f97 \\(xb + y(a \\bmod b) = \\gcd(b, a \\bmod b)\\) \u3002 \u56e0\u4e3a \\(a \\bmod b = a - b\\lfloor \\dfrac{a}{b} \\rfloor\\) \uff0c\u6240\u4ee5 \\(xb + y(a - b\\lfloor \\dfrac{a}{b} \\rfloor) = \\gcd(b, a - b\\lfloor \\dfrac{a}{b} \\rfloor)\\) \u5c55\u5f00\u53ef\u4ee5\u6709\uff1a \\(xb + y(a - b\\lfloor \\dfrac{a}{b} \\rfloor) = ay + bx - b\\lfloor \\dfrac{a}{b} \\rfloor y = ay + b(x - y\\lfloor \\dfrac{a}{b}\\rfloor) = \\gcd(b, a - y\\lfloor \\dfrac{a}{b}\\rfloor)\\) \u56e0\u4e3a \\(x - y\\lfloor \\dfrac{a}{b}\\rfloor \\in \\mathbb{Z}\\) \uff0c\u6240\u4ee5\u5047\u8bbe\u6210\u7acb\uff0c\u5f52\u7eb3\u53ef\u4ee5\u8bc1\u660e B\u00e9zout \u5b9a\u7406\u3002 \u8fd9\u91cc\u7684\u601d\u8def\u662f\u4e00\u4e2a\u5f88\u7ecf\u5178\u7684\u60f3\u6cd5\uff0c\u8003\u8651\u5047\u8bbe\u4e0a\u4e00\u5c42\u5b58\u5728\u7b54\u6848\uff0c\u7136\u540e\u60f3\u529e\u6cd5\u5229\u7528\u4e0a\u4e00\u5c42\u7684\u7b54\u6848\u628a\u8fd9\u4e00\u5c42\u7684\u7ed3\u679c\u5316\u6210\u7b54\u6848\u5f62\u5f0f\u5e76\u5f52\u7eb3\u8bc1\u660e\u3002 \u7136\u540e\u8fd9\u4e2a\u4e1c\u897f\u5c31\u53ef\u4ee5\u89e3\u8fd9\u4e2a\u65b9\u7a0b\u7684\u4e00\u4e2a\u89e3 \\((x, y)\\) \uff1a \\(ax + by = \\gcd(a, b)\\) \u3002 \u5b9e\u73b0\uff1a 1 2 3 4 5 int exgcd ( int a , int b , int & x , int & y ) { if ( ! b ) { x = 1 , y = 0 ; return a ; } int d = exgcd ( b , a % b , x , y ); int z = x ; x = y ; y = z - y * ( a / b ); } \u7ebf\u6027\u540c\u4f59\u65b9\u7a0b \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a \\(a, b, m \\in \\mathbb{Z}\\) \uff0c\u6c42 \\(a * x \\equiv b \\pmod m\\) \u7684\u89e3\u3002 \u56e0\u4e3a \\(m | a * x - b\\) \uff0c\u4ee4 \\(-ym = ax - b\\) \uff0c \u6240\u4ee5 \\(ax + my = b\\) \uff0c\u8fd9\u4e1c\u897f\u4e0d\u662f exgcd \u80fd\u505a\u7684\u3002 \u5176\u5b9e\u5148\u6c42 \\(x_0, y_0\\) \u6ee1\u8db3 \\(ax_0 + my_0 = \\gcd(a, m)\\) \uff0c\u7136\u540e\u6574\u4e2a\u5f0f\u5b50\u4e58\u4e0a \\(\\dfrac{b}{\\gcd(a, m)}\\) \u5373\u53ef\u3002 \u6240\u4ee5\u6709\u89e3\u80af\u5b9a\u9700\u8981 \\(\\gcd(a, m)\\ |\\ b\\) \uff0c\u7136\u540e \\(x\\) \u5c31\u662f \\(x_0 \\times \\dfrac{b}{\\gcd(a, m)}\\) \u4e86\u3002 \u89e3\u96c6\u663e\u7136\u662f \\(\\{y | y\\equiv x \\pmod{\\dfrac{m}{\\gcd(a, m)}}, y \\in \\mathbb{Z}\\}\\) \u8d39\u9a6c\u5c0f\u5b9a\u7406 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5bf9\u4e8e \\(a \\in \\mathbb{Z}\\) \uff0c\u6709\u4e00\u4e2a\u8d28\u6570 \\(p\\) \uff0c\u4e14 \\(\\gcd(a, p) = 1\\) \uff0c\u5219\u6709 \\(a^{p - 1} \\equiv 1 \\pmod p\\) \u3002 \u5bf9\u4e8e \\(a \\in \\mathbb{Z}\\) \uff0c\u6709\u4e00\u4e2a\u8d28\u6570 \\(p\\) \u5219\u6709 \\(a^{p} \\equiv a \\pmod p\\) \u3002 \u524d\u8005\u7684\u76f4\u63a5\u8bc1\u660e\u6211\u4e0d\u592a\u4f1a\uff0c\u4f46\u662f\u6211\u4f1a\u540e\u8005\u7684\u3002 \u540e\u8005\u8fd9\u91cc\u80fd\u53bb\u4efb\u610f \\(p\\) \u7684\u539f\u56e0\u5c31\u662f\uff0c\u6211\u4eec\u5047\u8bbe\u524d\u8005\u6210\u7acb\uff0c\u4e24\u8fb9\u540c\u65f6\u4e58\u4e0a\u4e00\u4e2a \\(a\\) \uff0c\u7136\u540e\u4e92\u8d28\u7684\u60c5\u51b5\u663e\u7136\u5bf9\uff0c\u5982\u679c \\(a\\) \u662f \\(p\\) \u7684\u500d\u6570\uff0c\u663e\u7136\u4f59\u6570\u4e3a \\(0\\) \u4e5f\u6210\u7acb\u3002 \u7136\u540e\u6211\u4eec\u8bc1\u4e86\u540e\u8005\u518d\u5012\u56de\u53bb\u5c31\u884c\u4e86\u3002 \u5047\u8bbe\u540e\u8005\u6210\u7acb\uff0c\u6839\u636e\u4e8c\u9879\u5f0f\u5b9a\u7406\uff1a \\((a + 1)^p = a^p + a^{p - 1}\\dbinom{p}{1} + \\dots a\\dbinom{p}{p - 1} + 1\\) \u56e0\u4e3a \\(p\\) \u662f\u8d28\u6570\uff0c\u6240\u4ee5 \\(p\\ |\\ \\dbinom{p}{k}, 1\\le k < p\\) \uff0c\u56e0\u4e3a \\(p\\) \u4e0d\u4f1a\u88ab\u6d88\u6389\u3002 \u90a3\u4e48\u5b83\u4eec\u5728\u6a21 \\(p\\) \u610f\u4e49\u4e0b\u5c31\u7b49\u4e8e \\(0\\) \u3002 \u6240\u4ee5 \\((a+1)^p \\equiv a^p + 1 \\pmod p\\) \u3002 \u5c06\u540e\u8005\u5e26\u5165\uff1a \\((a+1)^p \\equiv a + 1 \\pmod p\\) \u3002 \u7136\u540e\u5c31\u6210\u7acb\u4e86\u3002 \u6b27\u62c9\u5b9a\u7406 \u03c8(\uff40\u2207\u00b4)\u03c8 \u82e5 \\(\\gcd(a, n) = 1\\) \uff0c\u5219 \\(a^{\\varphi(n)} \\equiv 1 \\pmod n\\) \u3002 \u770b\u5230\u8fd9\u4e2a \\(a^{\\varphi(n)}\\) \uff0c\u6211\u4eec\u60c5\u4e0d\u81ea\u7981\u5730\u60f3\u5230\u4e86\u7b80\u5316\u5269\u4f59\u7cfb\u3002 \u9996\u5148\u6709\u4e2a\u7ed3\u8bba\u662f\uff0c\u5982\u679c \\(b \\not ={c}\\) \uff0c \\(\\overline{ab}\\) \u548c \\(\\overline{ac}\\) \u4e00\u5b9a\u4e0d\u662f\u540c\u4e00\u4e2a\u540c\u4f59\u7c7b\u3002 \u56e0\u4e3a\u7b80\u5316\u5269\u4f59\u7cfb\u5728\u6a21 \\(n\\) \u610f\u4e49\u4e0b\u4e58\u6cd5\u5c01\u95ed\uff0c\u4e14 \\(\\gcd(a, n) = 1\\) \u6240\u4ee5 \\(\\overline{aa_i}\\) \u4e5f\u5c5e\u4e8e\u7b80\u5316\u5269\u4f59\u7cfb\u3002 \u90a3\u4e48 \\(\\overline{aa_1}, \\overline{aa_2}, \\overline{aa_3}, \\dots \\overline{aa_{\\varphi(n)}}\\) \u5c31\u7b49\u4ef7\u4e8e \\(\\overline{aa_1}, \\overline{a_2}, \\overline{a_3}, \\dots \\overline{a_{\\varphi(n)}}\\) \u3002 \u90a3\u4e48 \\(\\prod a_i \\equiv \\prod(aa_i) \\equiv a^{\\varphi(n)}\\prod a_i \\pmod n\\) \u3002 \u7531 \\(\\prod a_i \\equiv a^{\\varphi(n)}\\prod a_i \\pmod n\\) \uff0c\u4e24\u8fb9\u9664\u6389\uff0c\u5c31\u5f97\u5230\u4e86\u6b27\u62c9\u5b9a\u7406\u3002 \u5f53\u7136\u5982\u679c \\(n\\) \u662f\u8d28\u6570\uff0c \\(\\varphi(n) = n - 1\\) \uff0c\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u8fd4\u56de\u53bb\u8bc1\u660e\u8d39\u9a6c\u5c0f\u5b9a\u7406\u3002 \u7136\u540e\u8fd9\u4e2a\u4e1c\u897f\u8fd8\u6709\u4e00\u4e2a\u63a8\u8bba\uff0c\u4e4b\u540e\u8865\uff0c\u5b83\u53ef\u4ee5\u7528\u6765\u7ed9\u4e58\u65b9\u8fd0\u7b97\u53d6\u6a21\u3002 \u4e58\u6cd5\u9006\u5143 \u03c8(\uff40\u2207\u00b4)\u03c8 \u770b \u8fd9\u4e2a\u5730\u65b9 \u3002 \u4e2d\u56fd\u5269\u4f59\u5b9a\u7406(CRT) \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a \\(n\\) \u4e2a\u4e24\u4e24\u4e92\u8d28\u7684\u6574\u6570 \\(m_i\\) \uff0c\u6c42\u4ee5\u4e0b\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u7ec4\u7684\u89e3\uff1a \\[ \\begin{cases} x \\equiv a_1 \\pmod{m_1} \\\\ x \\equiv a_2 \\pmod{m_2} \\\\ \\cdots \\\\ x \\equiv a_n \\pmod{m_n} \\end{cases} \\] CRT\uff1a\u8bbe \\(m = \\prod m_i,M_i=\\dfrac{m}{m_i}\\) \uff0c \\(t_i\\) \u4e3a\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u7ec4 \\(M_it_i \\equiv 1 \\pmod{m_i}\\) \u7684\u4e00\u4e2a\u89e3\uff0c\u5219\u65b9\u7a0b\u7ec4\u7684\u89e3\u4e3a\uff1a \\[ x = \\sum\\limits_{i = 1}^n a_iM_it_i \\] \u56e0\u4e3a \\(m_i\\) \u4e24\u4e24\u4e92\u8d28\uff0c\u6240\u4ee5\u663e\u7136 \\(M_i\\) \u662f\u9664\u4e86 \\(m_i\\) \u4ee5\u5916\u7684\u6240\u6709 \\(m_j\\) \u7684\u500d\u6570\u3002 \u6240\u4ee5 \\(\\forall k \\not= i, a_iM_it_i \\equiv 0 \\pmod{m_k}\\) \u3002 \u7136\u540e \\(a_iM_it_i \\equiv a_i \\pmod{m_i}\\) \uff0c\u8fd9\u4e2a\u662f\u56e0\u4e3a \\(t_i\\) \u662f \\(M_i\\) \u5173\u4e8e \\(m_i\\) \u7684\u4e58\u6cd5\u9006\u5143\uff0c\u6240\u4ee5\u5c31\u6709\u4e0a\u9762\u7684\u5f0f\u5b50\u4e86\u3002 \u552f\u4e00\u89e3\u5c31\u6a21\u4e00\u4e2a \\(m\\) \u5c31\u884c\u3002 \u8fd9\u4e2a\u4e1c\u897f\u662f\u4e00\u5b9a\u6709\u552f\u4e00\u89e3\u7684\uff0c\u611f\u89c9\u975e\u5e38\u663e\u7136\uff0c\u4f46\u662f\u6211\u4e0d\u4f1a\u8bc1\u660e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 #define int long long int crt ( std :: vector < int > & r , std :: vector < int > & m ) { int n = 1 , ans = 0 ; for ( int i = 0 ; i < ( int ) m . size (); ++ i ) n = n * m [ i ]; for ( int i = 0 ; i < ( int ) m . size (); ++ i ) { int mi = n / m [ i ], b , y ; exgcd ( mi , m [ i ], b , y ); ans = ( ans + r [ i ] * mi * b % n ) % n ; } return ( ans % n + n ) % n ; } EXCRT \u03c8(\uff40\u2207\u00b4)\u03c8 \u7528\u4e8e\u6a21\u6570\u4e24\u4e24\u4e0d\u4e92\u8d28\u7684\u60c5\u51b5\u3002 \u8003\u8651\u4e24\u4e2a\u65b9\u7a0b\u600e\u4e48\u505a\u3002 \u5047\u8bbe \\(x \\equiv a_1 \\pmod{m_1}, x \\equiv a_2 \\pmod{m_2}\\) \u3002 \u6309\u7167\u7c7b\u4f3c \\(\\gcd\\) \u90a3\u8fb9\u7684\u5957\u8def\uff1a \\(x = m_1p + a_1 = m_2q + a_2, p, q \\in \\mathbb{Z}\\) \u3002 \u7136\u540e\u53ef\u4ee5\u77e5\u9053 \\(m_1p - m_2q = a_2 - a_1\\) \uff0c\u7136\u540e\u8fd9\u4e1c\u897f\u5c31\u662f\u7c7b\u4f3c\u7ebf\u6027\u540c\u4f59\u7684\u4e1c\u897f\u3002\u6709\u89e3\u5f53\u4e14\u4ec5\u5f53 \\(\\gcd(m_1, m_2)\\ |\\ a_2 - a_1\\) \u3002 \u7136\u540e\u5c31 exgcd \u89e3\u4e00\u4e0b\uff0c\u663e\u7136\u8fd9\u4e24\u4e2a\u65b9\u7a0b\u7684\u89e3\u5e94\u8be5\u662f \\(m_2q + a_2 \\pmod{\\operatorname{lcm}(m_1, m_2)}\\) \u3002 \u7136\u540e\u6211\u4eec\u5c31\u76f4\u63a5\u5408\u5e76\u591a\u4e2a\u65b9\u7a0b\u5c31\u53ef\u4ee5\u4e86\u3002","title":"\u540c\u4f59"},{"location":"algor/math/number-theory/congruence/#_1","text":"\u51e0\u4e2a\u5b9a\u4e49\uff1a \u540c\u4f59\uff1a\u82e5 \\(a \\bmod m = b \\bmod m\\) \uff0c\u79f0 \\(a\\) \u4e0e \\(b\\) \u5728\u6a21 \\(m\\) \u610f\u4e49\u4e0b\u540c\u4f59\uff0c\u8bb0\u4e3a \\(a \\equiv b \\pmod m\\) \u3002 \u540c\u4f59\u7c7b\uff1a\u5bf9\u4e8e \\(\\forall a \\in [0, m), \\{a + km\\}(k \\in \\mathbb{Z})\\) \u6784\u6210\u4e00\u4e2a\u6a21 \\(m\\) \u4f59\u6570\u76f8\u540c\u7684\u96c6\u5408\uff0c\u8bb0\u4e3a \\(\\overline{a}\\) \uff0c\u79f0\u4e3a\u6a21 \\(m\\) \u7684\u4e00\u4e2a\u540c\u4f59\u7c7b\u3002 \u5269\u4f59\u7cfb\uff1a \\(\\overline{0}, \\overline{1}, \\dots \\overline{m - 1}\\) \u6784\u6210 \\(m\\) \u7684\u5b8c\u5168\u5269\u4f59\u7cfb \u7b80\u5316\u5269\u4f59\u7cfb\uff1a\u6240\u6709 \\(\\gcd(a, m) = 1, a < m\\) \u7684 \\(\\overline{a}\\) \u6784\u6210 \\(m\\) \u7684\u7b80\u5316\u5269\u4f59\u7cfb\uff0c\u8fd9\u6837\u7684\u540c\u4f59\u7c7b\u6709 \\(\\varphi(n)\\) \u4e2a\u3002 \u7b80\u5316\u5269\u4f59\u7cfb\u5173\u4e8e\u6a21 \\(m\\) \u4e58\u6cd5\u5c01\u95ed\uff0c\u8fd9\u4e2a\u6027\u8d28\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u7528\u6765\u8bc1\u660e\u4e24\u4e2a\u7b80\u5316\u5269\u4f59\u7cfb\u662f\u76f8\u7b49\u7684\uff0c\u8fdb\u800c\u8bc1\u660e\u4e00\u4e9b\u7ed3\u8bba\uff0c\u8fd9\u4e2a\u7ed3\u8bba\u7684\u8bc1\u660e\u6bd4\u8f83\u7b80\u5355\uff1a\u8003\u8651 \\(\\forall a, b, \\gcd(a, m) = \\gcd(b, m) = 1, a,b < m\\) \uff0c\u56e0\u4e3a \\(a, b\\) \u548c \\(m\\) \u4e0d\u542b\u6709\u76f8\u540c\u8d28\u56e0\u5b50\uff0c\u6240\u4ee5 \\(ab\\) \u548c \\(m\\) \u4e5f\u6ca1\u6709\u516c\u5171\u8d28\u56e0\u5b50\u3002","title":"\u540c\u4f59"},{"location":"algor/math/number-theory/congruence/#_2","text":"B\u00e9zout \u5b9a\u7406\uff1a \\(\\forall a, b\\in \\mathbb{Z}, \\exists x, y \\in \\mathbb{Z}, ax + by = \\gcd(a, b)\\) \u3002 \u8bc1\u660e\uff1a \u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u6c42 \\(\\gcd\\) \u7684\u6700\u540e\u4e00\u6b65\u4e00\u5b9a\u662f \\(b = 0, a \\not ={0}\\) \uff0c\u6b64\u65f6\u663e\u7136\u6ee1\u8db3\u3002 \u5047\u8bbe \\(b > 0\\) \uff0c\u90a3\u4e48\u5047\u8bbe\u5b58\u5728 \\(x, y\\) \u4f7f\u5f97 \\(xb + y(a \\bmod b) = \\gcd(b, a \\bmod b)\\) \u3002 \u56e0\u4e3a \\(a \\bmod b = a - b\\lfloor \\dfrac{a}{b} \\rfloor\\) \uff0c\u6240\u4ee5 \\(xb + y(a - b\\lfloor \\dfrac{a}{b} \\rfloor) = \\gcd(b, a - b\\lfloor \\dfrac{a}{b} \\rfloor)\\) \u5c55\u5f00\u53ef\u4ee5\u6709\uff1a \\(xb + y(a - b\\lfloor \\dfrac{a}{b} \\rfloor) = ay + bx - b\\lfloor \\dfrac{a}{b} \\rfloor y = ay + b(x - y\\lfloor \\dfrac{a}{b}\\rfloor) = \\gcd(b, a - y\\lfloor \\dfrac{a}{b}\\rfloor)\\) \u56e0\u4e3a \\(x - y\\lfloor \\dfrac{a}{b}\\rfloor \\in \\mathbb{Z}\\) \uff0c\u6240\u4ee5\u5047\u8bbe\u6210\u7acb\uff0c\u5f52\u7eb3\u53ef\u4ee5\u8bc1\u660e B\u00e9zout \u5b9a\u7406\u3002 \u8fd9\u91cc\u7684\u601d\u8def\u662f\u4e00\u4e2a\u5f88\u7ecf\u5178\u7684\u60f3\u6cd5\uff0c\u8003\u8651\u5047\u8bbe\u4e0a\u4e00\u5c42\u5b58\u5728\u7b54\u6848\uff0c\u7136\u540e\u60f3\u529e\u6cd5\u5229\u7528\u4e0a\u4e00\u5c42\u7684\u7b54\u6848\u628a\u8fd9\u4e00\u5c42\u7684\u7ed3\u679c\u5316\u6210\u7b54\u6848\u5f62\u5f0f\u5e76\u5f52\u7eb3\u8bc1\u660e\u3002 \u7136\u540e\u8fd9\u4e2a\u4e1c\u897f\u5c31\u53ef\u4ee5\u89e3\u8fd9\u4e2a\u65b9\u7a0b\u7684\u4e00\u4e2a\u89e3 \\((x, y)\\) \uff1a \\(ax + by = \\gcd(a, b)\\) \u3002 \u5b9e\u73b0\uff1a 1 2 3 4 5 int exgcd ( int a , int b , int & x , int & y ) { if ( ! b ) { x = 1 , y = 0 ; return a ; } int d = exgcd ( b , a % b , x , y ); int z = x ; x = y ; y = z - y * ( a / b ); }","title":"\u6269\u5c55\u6b27\u51e0\u91cc\u5f97"},{"location":"algor/math/number-theory/congruence/#_3","text":"\u7ed9\u5b9a \\(a, b, m \\in \\mathbb{Z}\\) \uff0c\u6c42 \\(a * x \\equiv b \\pmod m\\) \u7684\u89e3\u3002 \u56e0\u4e3a \\(m | a * x - b\\) \uff0c\u4ee4 \\(-ym = ax - b\\) \uff0c \u6240\u4ee5 \\(ax + my = b\\) \uff0c\u8fd9\u4e1c\u897f\u4e0d\u662f exgcd \u80fd\u505a\u7684\u3002 \u5176\u5b9e\u5148\u6c42 \\(x_0, y_0\\) \u6ee1\u8db3 \\(ax_0 + my_0 = \\gcd(a, m)\\) \uff0c\u7136\u540e\u6574\u4e2a\u5f0f\u5b50\u4e58\u4e0a \\(\\dfrac{b}{\\gcd(a, m)}\\) \u5373\u53ef\u3002 \u6240\u4ee5\u6709\u89e3\u80af\u5b9a\u9700\u8981 \\(\\gcd(a, m)\\ |\\ b\\) \uff0c\u7136\u540e \\(x\\) \u5c31\u662f \\(x_0 \\times \\dfrac{b}{\\gcd(a, m)}\\) \u4e86\u3002 \u89e3\u96c6\u663e\u7136\u662f \\(\\{y | y\\equiv x \\pmod{\\dfrac{m}{\\gcd(a, m)}}, y \\in \\mathbb{Z}\\}\\)","title":"\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b"},{"location":"algor/math/number-theory/congruence/#_4","text":"\u5bf9\u4e8e \\(a \\in \\mathbb{Z}\\) \uff0c\u6709\u4e00\u4e2a\u8d28\u6570 \\(p\\) \uff0c\u4e14 \\(\\gcd(a, p) = 1\\) \uff0c\u5219\u6709 \\(a^{p - 1} \\equiv 1 \\pmod p\\) \u3002 \u5bf9\u4e8e \\(a \\in \\mathbb{Z}\\) \uff0c\u6709\u4e00\u4e2a\u8d28\u6570 \\(p\\) \u5219\u6709 \\(a^{p} \\equiv a \\pmod p\\) \u3002 \u524d\u8005\u7684\u76f4\u63a5\u8bc1\u660e\u6211\u4e0d\u592a\u4f1a\uff0c\u4f46\u662f\u6211\u4f1a\u540e\u8005\u7684\u3002 \u540e\u8005\u8fd9\u91cc\u80fd\u53bb\u4efb\u610f \\(p\\) \u7684\u539f\u56e0\u5c31\u662f\uff0c\u6211\u4eec\u5047\u8bbe\u524d\u8005\u6210\u7acb\uff0c\u4e24\u8fb9\u540c\u65f6\u4e58\u4e0a\u4e00\u4e2a \\(a\\) \uff0c\u7136\u540e\u4e92\u8d28\u7684\u60c5\u51b5\u663e\u7136\u5bf9\uff0c\u5982\u679c \\(a\\) \u662f \\(p\\) \u7684\u500d\u6570\uff0c\u663e\u7136\u4f59\u6570\u4e3a \\(0\\) \u4e5f\u6210\u7acb\u3002 \u7136\u540e\u6211\u4eec\u8bc1\u4e86\u540e\u8005\u518d\u5012\u56de\u53bb\u5c31\u884c\u4e86\u3002 \u5047\u8bbe\u540e\u8005\u6210\u7acb\uff0c\u6839\u636e\u4e8c\u9879\u5f0f\u5b9a\u7406\uff1a \\((a + 1)^p = a^p + a^{p - 1}\\dbinom{p}{1} + \\dots a\\dbinom{p}{p - 1} + 1\\) \u56e0\u4e3a \\(p\\) \u662f\u8d28\u6570\uff0c\u6240\u4ee5 \\(p\\ |\\ \\dbinom{p}{k}, 1\\le k < p\\) \uff0c\u56e0\u4e3a \\(p\\) \u4e0d\u4f1a\u88ab\u6d88\u6389\u3002 \u90a3\u4e48\u5b83\u4eec\u5728\u6a21 \\(p\\) \u610f\u4e49\u4e0b\u5c31\u7b49\u4e8e \\(0\\) \u3002 \u6240\u4ee5 \\((a+1)^p \\equiv a^p + 1 \\pmod p\\) \u3002 \u5c06\u540e\u8005\u5e26\u5165\uff1a \\((a+1)^p \\equiv a + 1 \\pmod p\\) \u3002 \u7136\u540e\u5c31\u6210\u7acb\u4e86\u3002","title":"\u8d39\u9a6c\u5c0f\u5b9a\u7406"},{"location":"algor/math/number-theory/congruence/#_5","text":"\u82e5 \\(\\gcd(a, n) = 1\\) \uff0c\u5219 \\(a^{\\varphi(n)} \\equiv 1 \\pmod n\\) \u3002 \u770b\u5230\u8fd9\u4e2a \\(a^{\\varphi(n)}\\) \uff0c\u6211\u4eec\u60c5\u4e0d\u81ea\u7981\u5730\u60f3\u5230\u4e86\u7b80\u5316\u5269\u4f59\u7cfb\u3002 \u9996\u5148\u6709\u4e2a\u7ed3\u8bba\u662f\uff0c\u5982\u679c \\(b \\not ={c}\\) \uff0c \\(\\overline{ab}\\) \u548c \\(\\overline{ac}\\) \u4e00\u5b9a\u4e0d\u662f\u540c\u4e00\u4e2a\u540c\u4f59\u7c7b\u3002 \u56e0\u4e3a\u7b80\u5316\u5269\u4f59\u7cfb\u5728\u6a21 \\(n\\) \u610f\u4e49\u4e0b\u4e58\u6cd5\u5c01\u95ed\uff0c\u4e14 \\(\\gcd(a, n) = 1\\) \u6240\u4ee5 \\(\\overline{aa_i}\\) \u4e5f\u5c5e\u4e8e\u7b80\u5316\u5269\u4f59\u7cfb\u3002 \u90a3\u4e48 \\(\\overline{aa_1}, \\overline{aa_2}, \\overline{aa_3}, \\dots \\overline{aa_{\\varphi(n)}}\\) \u5c31\u7b49\u4ef7\u4e8e \\(\\overline{aa_1}, \\overline{a_2}, \\overline{a_3}, \\dots \\overline{a_{\\varphi(n)}}\\) \u3002 \u90a3\u4e48 \\(\\prod a_i \\equiv \\prod(aa_i) \\equiv a^{\\varphi(n)}\\prod a_i \\pmod n\\) \u3002 \u7531 \\(\\prod a_i \\equiv a^{\\varphi(n)}\\prod a_i \\pmod n\\) \uff0c\u4e24\u8fb9\u9664\u6389\uff0c\u5c31\u5f97\u5230\u4e86\u6b27\u62c9\u5b9a\u7406\u3002 \u5f53\u7136\u5982\u679c \\(n\\) \u662f\u8d28\u6570\uff0c \\(\\varphi(n) = n - 1\\) \uff0c\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u8fd4\u56de\u53bb\u8bc1\u660e\u8d39\u9a6c\u5c0f\u5b9a\u7406\u3002 \u7136\u540e\u8fd9\u4e2a\u4e1c\u897f\u8fd8\u6709\u4e00\u4e2a\u63a8\u8bba\uff0c\u4e4b\u540e\u8865\uff0c\u5b83\u53ef\u4ee5\u7528\u6765\u7ed9\u4e58\u65b9\u8fd0\u7b97\u53d6\u6a21\u3002","title":"\u6b27\u62c9\u5b9a\u7406"},{"location":"algor/math/number-theory/congruence/#_6","text":"\u770b \u8fd9\u4e2a\u5730\u65b9 \u3002","title":"\u4e58\u6cd5\u9006\u5143"},{"location":"algor/math/number-theory/congruence/#crt","text":"\u7ed9\u5b9a \\(n\\) \u4e2a\u4e24\u4e24\u4e92\u8d28\u7684\u6574\u6570 \\(m_i\\) \uff0c\u6c42\u4ee5\u4e0b\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u7ec4\u7684\u89e3\uff1a \\[ \\begin{cases} x \\equiv a_1 \\pmod{m_1} \\\\ x \\equiv a_2 \\pmod{m_2} \\\\ \\cdots \\\\ x \\equiv a_n \\pmod{m_n} \\end{cases} \\] CRT\uff1a\u8bbe \\(m = \\prod m_i,M_i=\\dfrac{m}{m_i}\\) \uff0c \\(t_i\\) \u4e3a\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u7ec4 \\(M_it_i \\equiv 1 \\pmod{m_i}\\) \u7684\u4e00\u4e2a\u89e3\uff0c\u5219\u65b9\u7a0b\u7ec4\u7684\u89e3\u4e3a\uff1a \\[ x = \\sum\\limits_{i = 1}^n a_iM_it_i \\] \u56e0\u4e3a \\(m_i\\) \u4e24\u4e24\u4e92\u8d28\uff0c\u6240\u4ee5\u663e\u7136 \\(M_i\\) \u662f\u9664\u4e86 \\(m_i\\) \u4ee5\u5916\u7684\u6240\u6709 \\(m_j\\) \u7684\u500d\u6570\u3002 \u6240\u4ee5 \\(\\forall k \\not= i, a_iM_it_i \\equiv 0 \\pmod{m_k}\\) \u3002 \u7136\u540e \\(a_iM_it_i \\equiv a_i \\pmod{m_i}\\) \uff0c\u8fd9\u4e2a\u662f\u56e0\u4e3a \\(t_i\\) \u662f \\(M_i\\) \u5173\u4e8e \\(m_i\\) \u7684\u4e58\u6cd5\u9006\u5143\uff0c\u6240\u4ee5\u5c31\u6709\u4e0a\u9762\u7684\u5f0f\u5b50\u4e86\u3002 \u552f\u4e00\u89e3\u5c31\u6a21\u4e00\u4e2a \\(m\\) \u5c31\u884c\u3002 \u8fd9\u4e2a\u4e1c\u897f\u662f\u4e00\u5b9a\u6709\u552f\u4e00\u89e3\u7684\uff0c\u611f\u89c9\u975e\u5e38\u663e\u7136\uff0c\u4f46\u662f\u6211\u4e0d\u4f1a\u8bc1\u660e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 #define int long long int crt ( std :: vector < int > & r , std :: vector < int > & m ) { int n = 1 , ans = 0 ; for ( int i = 0 ; i < ( int ) m . size (); ++ i ) n = n * m [ i ]; for ( int i = 0 ; i < ( int ) m . size (); ++ i ) { int mi = n / m [ i ], b , y ; exgcd ( mi , m [ i ], b , y ); ans = ( ans + r [ i ] * mi * b % n ) % n ; } return ( ans % n + n ) % n ; }","title":"\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406(CRT)"},{"location":"algor/math/number-theory/congruence/#excrt","text":"\u7528\u4e8e\u6a21\u6570\u4e24\u4e24\u4e0d\u4e92\u8d28\u7684\u60c5\u51b5\u3002 \u8003\u8651\u4e24\u4e2a\u65b9\u7a0b\u600e\u4e48\u505a\u3002 \u5047\u8bbe \\(x \\equiv a_1 \\pmod{m_1}, x \\equiv a_2 \\pmod{m_2}\\) \u3002 \u6309\u7167\u7c7b\u4f3c \\(\\gcd\\) \u90a3\u8fb9\u7684\u5957\u8def\uff1a \\(x = m_1p + a_1 = m_2q + a_2, p, q \\in \\mathbb{Z}\\) \u3002 \u7136\u540e\u53ef\u4ee5\u77e5\u9053 \\(m_1p - m_2q = a_2 - a_1\\) \uff0c\u7136\u540e\u8fd9\u4e1c\u897f\u5c31\u662f\u7c7b\u4f3c\u7ebf\u6027\u540c\u4f59\u7684\u4e1c\u897f\u3002\u6709\u89e3\u5f53\u4e14\u4ec5\u5f53 \\(\\gcd(m_1, m_2)\\ |\\ a_2 - a_1\\) \u3002 \u7136\u540e\u5c31 exgcd \u89e3\u4e00\u4e0b\uff0c\u663e\u7136\u8fd9\u4e24\u4e2a\u65b9\u7a0b\u7684\u89e3\u5e94\u8be5\u662f \\(m_2q + a_2 \\pmod{\\operatorname{lcm}(m_1, m_2)}\\) \u3002 \u7136\u540e\u6211\u4eec\u5c31\u76f4\u63a5\u5408\u5e76\u591a\u4e2a\u65b9\u7a0b\u5c31\u53ef\u4ee5\u4e86\u3002","title":"EXCRT"},{"location":"algor/math/number-theory/factor/","text":"\u5b9a\u4e49 \u03c8(\uff40\u2207\u00b4)\u03c8 \u82e5 \\(n\\) \u9664\u4ee5 \\(d\\) \u7684\u4f59\u6570\u4e3a \\(0\\) \uff0c\u5219\u79f0 \\(d\\) \u80fd\u6574\u9664 \\(n\\) \uff0c\u6216\u8005 \\(d\\) \u4e3a \\(n\\) \u7684\u7ea6\u6570\uff0c\u8bb0\u4f5c \\(d|n,(n,d \\in \\mathbb{Z})\\) \u552f\u4e00\u5206\u89e3\u5b9a\u7406\u7684\u4e09\u4e2a\u63a8\u8bba\uff1a \u82e5 \\(n \\in \\mathbb{N}^*\\) \uff0c\u5219 \\(n\\) \u7684\u6b63\u7ea6\u6570\u96c6\u5408\u4e3a \\(\\{x | x = p_1^{b_1}p_2^{b_2}\\dots p_m^{b_m},b_i \\le c_i\\}\\) \u3002 \\(n\\) \u7684\u6b63\u7ea6\u6570\u4e2a\u6570\u4e3a \\(\\prod\\limits_{i = 1}^m(c_i+ 1)\\) \\(n\\) \u7684\u6b63\u7ea6\u6570\u4e4b\u548c\u4e3a \\((1+p_1+p_1^2+p_1^3+\\dots +p_1^{c_1})\\times\\dots(1+p_m+p_m^2+p_m^3+\\dots +p_m^{c_m}) = \\prod\\limits_{i = 1}^m(\\sum\\limits_{j = 1}^{c_i} p_i^{j})\\) \u6c42\u6b63\u7ea6\u6570\u96c6\u5408 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8bd5\u9664\u6cd5 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8003\u8651\u5230 \\(n = a\\times b\\) \uff0c\u5176\u4e2d \\(a,b\\) \u4e3a\u4e00\u5bf9\u540c\u65f6\u51fa\u73b0\u7684\u56e0\u5b50\u3002\u7ed3\u5408\u6839\u53f7\u7ed3\u8bba\uff0c\u626b\u63cf \\(a\\in[1,\\sqrt{n}]\\) \uff0c\u82e5 \\(a | n\\) \uff0c\u5219\u540c\u65f6\u8bb0\u5f55 \\(a,n/a\\) \u5373\u53ef\u3002 \u590d\u6742\u5ea6\u663e\u7136\u662f\u6839\u53f7\uff0c\u7531\u6b64\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u63a8\u8bba\uff1a\u6574\u6570 \\(n\\) \u7684\u7ea6\u6570\u4e0a\u754c\u4e3a \\(2\\sqrt{n}\\) \uff08 \u7ea6\u6570\u4e0a\u754c\u7ed3\u8bba \uff09\u3002 1 2 3 4 5 6 7 8 9 int m , div [ si ]; void get_factors ( int n ) { m = 0 ; for ( int i = 1 ; i * i <= n ; ++ i ) if ( n % i == 0 ) { div [ ++ m ] = i ; if ( i * i != n ) div [ ++ m ] = n / i ; } } \u500d\u6570\u6cd5 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8bd5\u9664\u6cd5\u6709\u5c40\u9650\u6027\uff0c\u53ea\u80fd\u6c42\u4e00\u4e2a\u6570\u7684\u6b63\u7ea6\u6570\u96c6\u5408\uff0c\u500d\u6570\u6cd5\u5219\u53ef\u4ee5\u6c42 \\([1,n]\\) \u6240\u6709\u6570\u7684\u6b63\u7ea6\u6570\u96c6\u5408\u3002 \u57fa\u4e8e\u4e00\u4e2a\u6bd4\u8f83\u663e\u7136\u7684\u60f3\u6cd5\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a \\(d\\in[1,n]\\) \uff0c\u4ee5 \\(d\\) \u4e3a\u7ea6\u6570\u4e4b\u4e00\u7684\u6570\u7684\u96c6\u5408\u5fc5\u7136\u662f \\(\\{kd,k=2,3,4\\dots,\\lfloor n/d\\rfloor\\}\\) \u90a3\u4e48\u76f4\u63a5\u628a \\(d\\) \u6254\u5230\u91cc\u9762\u5373\u53ef\uff0c\u590d\u6742\u5ea6 \\(O(n+n/2+n/3+\\dots+1) = O(n\\log n)\\) \u3002 \u53c8\u53ef\u4ee5\u5bfc\u51fa\u4e00\u4e2a\u7ed3\u8bba\uff1a \\(1\\sim n\\) \u6240\u6709\u6570\u7684\u7ea6\u6570\u4e2a\u6570\u4e4b\u548c\u7ea6\u4e3a \\(n\\log n\\) \u4e2a\uff08 \u7ea6\u6570\u4e2a\u6570\u548c\u7ed3\u8bba \uff09\u3002 1 2 3 4 5 6 std :: vector < int > fact [ si ]; void get_factors ( int n ) { for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= n / i ; ++ j ) fact [ i * j ]. emplace_back ( i ); } \u6700\u5927\u516c\u7ea6\u6570 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5b9a\u4e49\u5982\u5b57\u9762\u610f\u4e49\u3002 \u5b9a\u7406\uff1a \\(\\forall a,b \\in \\mathbb{N},\\gcd(a,b)\\times \\operatorname{lcm}(a,b)=a\\times b\\) \u3002 \u66f4\u76f8\u51cf\u635f\u672f \\(\\forall a,b \\in \\mathbb{N},a\\ge b\\) \u6709 \\(\\gcd(a,b) = \\gcd(b, a-b) = \\gcd(a, a-b)\\) \\(\\forall a,b \\in \\mathbb{N}\\) \uff0c\u6709 \\(\\gcd(2a,2b) = 2\\gcd(a,b)\\) \u3002 \u7b2c\u4e8c\u8005\u8bc1\u660e\u663e\u7136\u3002 \\(\\text{Proof of 1:}\\) \u5bf9\u4e8e \\(\\forall d\\) \uff0c \\(d | a, d|b\\) \uff0c\u53ef\u4ee5\u6709 \\(d|(a-b)\\) \uff0c\u56e0\u4e3a\uff0c\u8bbe \\(a = r_1\\times d,b= r_2\\times d\\) \u3002 \u663e\u7136 \\(r1-r2\\ge 0\\) \uff0c\u6240\u4ee5 \\(a-b = (r_1-r_2)d\\) \u3002 \u90a3\u4e48 \\((a,b)\\) \u7684\u516c\u7ea6\u6570\u96c6\u5408\u5fc5\u7136\u4e0e \\((a,a-b)\\) \u76f8\u540c\uff0c\u53ef\u4ee5\u5f97\u5230\u8fd9\u4e24\u4e2a\u96c6\u5408\u7684\u6700\u5927\u503c\u76f8\u7b49\uff0c\u5373\u662f \\(\\gcd\\) \u76f8\u7b49\u3002 \u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 \u5b9a\u7406\uff1a \\(\\forall a,b \\in \\mathbb{N}\\Rightarrow\\gcd(a,b)=\\gcd(b,a\\mod b)\\) \\(\\text{Proof}:\\) \u8003\u8651\u7c7b\u6bd4\u4e0a\u9762\u7684\u8bc1\u660e\u53bb\u8bc1\u660e\u516c\u7ea6\u6570\u96c6\u5408\u76f8\u7b49\u3002 \u4e0d\u59a8\u4ee4 \\(a\\ge b\\) \uff0c\u4ee4 \\(a = qb+r\\) \uff0c\u663e\u7136 \\(d|a,d|qb \\Rightarrow d|(a-qb)\\) \u3002 \u90a3\u4e48\u8bbe \\(d|a,d|b\\) \uff0c\u5219\u6709 \\(d|qb\\Rightarrow d|(a-qb) \\Rightarrow d|r\\) \u3002 \u56e0\u4e3a \\(d|r,d|b\\) \uff0c\u540c\u4e0a\u7406\u5373\u53ef\u3002 \u5f53 \\(b=0\\) \u65f6\uff0c\u539f\u5f0f\u7b49\u4e8e \\(a\\) \uff0c\u53ef\u4ee5\u5199\u51fa\u4ee5\u4e0b\u4ee3\u7801\u6c42 \\(\\gcd\\) \uff08\u672c\u8d28\u4e0a\u662f\u4e00\u79cd\u8f97\u8f6c\u76f8\u9664\uff09 1 2 3 int gcd ( int a , int b ) { return b ? gcd ( b , a % b ) : a ; } \u590d\u6742\u5ea6 \\(O(\\log(a+b))\\) \u3002 \u4e92\u8d28 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5c31\u662f \\(\\gcd(a,b)=1,a,b\\in\\mathbb{N}\\) \uff0c\u5219\u79f0 \\(a,b\\) \u4e92\u8d28\u3002 \u6ce8\u610f\u4e24\u4e24\u4e92\u8d28\u662f \\(\\gcd(a,b)=\\gcd(b,c)=\\gcd(a,c) = 1\\) \u3002 l \\(\\gcd(a,b,c)=1\\) \u4e3a\u201c \\(a,b,c\\) \u4e92\u8d28\u201d\u3002 \u6b27\u62c9\u51fd\u6570 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5b9a\u4e49\uff1a \\([1,n]\\) \u4e2d\u4e0e \\(n\\) \u4e92\u8d28\u7684\u6570\u7684\u4e2a\u6570\u4e3a \\(\\varphi(n)\\) \uff0c\u79f0\u4f5c\u6b27\u62c9\u51fd\u6570\u3002 \u8ba1\u7b97\uff1a \\(\\varphi(n) = n \\times\\prod\\limits_{\\text{PRIME(p)}\\land p|n}(1-\\frac{1}{p})\\) \u3002 \u672c\u8d28\u4e0a\u662f\u5bb9\u65a5\u539f\u7406\uff0c\u5373\u5bf9\u4e8e \\(n\\) \u7684\u4efb\u610f\u4e24\u4e2a\u8d28\u56e0\u5b50 \\(p,q\\) \uff0c\u4ece \\([1,n]\\) \u4e2d\u53bb\u9664 \\(p,q\\) \u5206\u522b\u7684\u500d\u6570\u4e4b\u540e\uff0c\u8fd8\u8981\u628a \\(pq\\) \u7684\u500d\u6570\u52a0\u56de\u6765\u4e00\u6b21\uff0c \u5bf9\u4e8e\u6574\u4f53\u5e94\u7528\u8fd9\u4e2a\u7ed3\u8bba\u53ef\u4ee5\u5f97\u5230 \\(\\varphi(n)=n-\\lfloor\\frac{n}{p}\\rfloor-\\lfloor\\frac{n}{q}\\rfloor+\\lfloor\\frac{n}{pq}\\rfloor=n(1-\\frac{1}{p})(1-\\frac{1}{q})\\) \u3002 \u6240\u4ee5\u5206\u89e3\u8d28\u56e0\u6570\u5c31\u53ef\u4ee5 \\(O(\\sqrt{n})\\) \u6c42 \\(\\varphi(n)\\) \u3002 \u6b27\u62c9\u51fd\u6570\u7684\u6027\u8d28 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6027\u8d281\uff1a \\(\\forall n > 1, 1\\sim n\\) \u4e2d\u4e0e \\(n\\) \u4e92\u8d28\u7684\u6570\u7684\u548c\u4e3a \\(n\\cdot\\varphi(n)/2\\) \u3002 \u7531\u66f4\u76f8\u51cf\u635f\u672f\uff0c\u548c \\(n\\) \u4e92\u8d28\u7684\u6570\u5fc5\u7136\u6210\u5bf9\u51fa\u73b0\uff0c\u4e14\u5747\u503c\u4e3a \\(n/2\\) \uff0c\u8bc1\u6bd5\u3002 \u6027\u8d282\uff1a\u6b27\u62c9\u51fd\u6570\u4e3a\u79ef\u6027\u51fd\u6570\uff0c\u4e14\u6709\uff1a \\(\\gcd(a,b)=1\\Rightarrow \\varphi(ab)=\\varphi(a)\\cdot\\varphi(b)\\) \u3002 \u5c55\u5f00\u8ba1\u7b97\u5f0f\u5c31\u884c\u4e86\u3002 \u6027\u8d283\uff1a\uff08\u79ef\u6027\u51fd\u6570\u7684\u6027\u8d28\uff09\uff1a\u5728\u552f\u4e00\u5206\u89e3\u5b9a\u7406\u80cc\u666f\u4e0b\uff0c\u82e5 \\(f\\) \u4e3a\u79ef\u6027\u51fd\u6570\uff0c\u5219\u6709\uff1a \\(f(n)=\\prod\\limits_{i=1}^mf(p_i^{c_i})\\) \u663e\u7136\u4efb\u610f\u7684 \\(p_i^{c_i}\\) \u548c \\(p_j^{c_j}\\) \u5fc5\u7136\u4e92\u8d28\uff0c\u7531\u79ef\u6027\u51fd\u6570\u7684\u6027\u8d28\uff0c\u5bf9\u6574\u4f53\u5e94\u7528\u7ed3\u8bba\uff0c\u53ef\u4ee5\u5f97\u5230\u539f\u5f0f\u3002 \u6027\u8d284\uff1a\u82e5 \\(p\\) \u4e3a\u8d28\u6570\uff0c\u82e5 \\(p|n\\) \u4e14 \\(p^2\\not|n\\) \uff0c\u5219 \\(\\varphi(n)=\\varphi(n/p)\\varphi(p)=\\varphi(n/p)\\cdot(p-1)\\) \u3002 \u79ef\u6027\u51fd\u6570\u7684\u6027\u8d28\uff0c\u663e\u7136\uff0c\u5e38\u7528\u4e8e\u9012\u63a8\u3002 \u6027\u8d285\uff1a\u82e5 \\(p\\) \u4e3a\u8d28\u6570\uff0c\u82e5 \\(p|n\\) \u4e14 \\(p^2|n\\) \uff0c\u5219 \\(\\varphi(n)= \\varphi(n/p)\\times p\\) \u56e0\u4e3a \\(n/p\\) \u548c \\(p\\) \u4e0d\u4e92\u8d28\uff0c\u6240\u4ee5\u53ea\u80fd\u5c55\u5f00\u8ba1\u7b97\u5f0f\u5f97\u5230\uff0c\u5e38\u7528\u4e8e\u9012\u63a8\u3002 \u6027\u8d286\uff1a \\(\\sum_{d|n}\\varphi(d)=n\\) \u3002 \u5f88\u6709\u610f\u601d\u7684\u6027\u8d28\uff0c\u5148\u5bf9 \\(n\\) \u5206\u89e3\u8d28\u56e0\u6570\uff0c\u4ee4 \\(f(x)=\\sum_{d|x}\\varphi(d)\\) \u3002 \u663e\u7136 \\(f(p_i^{c_i}) = \\varphi(1)+\\varphi(p_i)+\\varphi(p_i^{2})+\\dots+\\varphi(p_i^{c_i}) = p_i^{c_i}\\) \uff08\u7531\u6027\u8d28 \\(5\\) \u53ef\u4ee5\u53d1\u73b0\u662f\u4e00\u4e2a\u7b49\u6bd4\u6570\u5217\u6c42\u548c\uff09\u3002 \u7136\u540e\u53d1\u73b0\u82e5 \\(\\gcd(n,m)=1\\) \uff0c \\(f(nm)=(\\sum_{d|n}\\varphi(d))\\cdot(\\sum_{d|m}\\varphi(d))=f(n)f(m)\\) \u3002 \u6240\u4ee5 \\(f\\) \u662f\u79ef\u6027\u51fd\u6570\uff0c\u7531\u79ef\u6027\u51fd\u6570\u6027\u8d28\u53ef\u4ee5\u5f97\u5230\u539f\u5f0f\u6210\u7acb\u3002 \u7b5b\u6cd5\u6c42\u6b27\u62c9\u51fd\u6570 \u03c8(\uff40\u2207\u00b4)\u03c8 \u57c3\u6c0f\u7b5b \u8003\u8651\u57c3\u6c0f\u7b5b\u7684\u8fc7\u7a0b\uff0c\u53d1\u73b0\u4efb\u610f\u7684 \\(m\\in[2,n]\\) \uff0c \\(m\\) \u4f1a\u88ab\u6240\u6709\u7684\u8d28\u6570 \\(d\\) \u7b5b\u4e00\u6b21\uff08\u4ece\u5e73\u65b9\u5f00\u59cb\uff0c\u6240\u4ee5\u7b5b\u5b83\u7684\u5fc5\u7136\u662f\u8d28\u6570\uff09\u3002 \u7136\u540e\u6839\u636e\u6b27\u62c9\u51fd\u6570\u7684\u8ba1\u7b97\u5f0f\uff1a \\(\\varphi(k)=\\varphi(k)\\times(\\frac{i-1}{i}),k = i,2i,3i,\\dots\\) \u5373\u53ef\u3002 \u590d\u6742\u5ea6 \\(O(n\\log n)\\) \u3002 1 2 3 4 5 6 7 8 int phi [ si ]; void calc_euler_func ( int n ) { for ( int i = 1 ; i <= n ; ++ i ) phi [ i ] = i ; for ( int i = 2 ; i <= n ; ++ i ) if ( phi [ i ] == i ) for ( int j = i ; j <= n ; j += i ) phi [ j ] = phi [ j ] / i * ( i - 1 ); } \u6b27\u62c9\u7b5b \u8003\u8651\u5230\u6bcf\u4e00\u4e2a\u6570\u53ea\u4f1a\u88ab\u4ed6\u7684 \\(mp\\) \u7b5b\u4e00\u6b21\uff0c\u6240\u4ee5\u76f4\u63a5\u5229\u7528\u6027\u8d284\uff0c5\u9012\u63a8\u5373\u53ef\u3002 \u590d\u6742\u5ea6 \\(O(n)\\) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 int phi [ si ]; int m = 0 , prime [ si ], vis [ si ]; void calc_euler_func ( int n ) { m = 0 , phi [ 1 ] = 1 ; memset ( vis , 0 , sizeof vis ); for ( int i = 2 ; i <= n ; ++ i ) { if ( vis [ i ] == 0 ) { vis [ i ] = i , prime [ ++ m ] = i , phi [ i ] = i - 1 ; } for ( int j = 1 ; j <= m ; ++ i ) { if ( prime [ j ] > vis [ i ] || prime [ j ] * vis [ i ] > n ) break ; vis [ prime [ j ] * i ] = prime [ j ]; if ( i % prime [ j ] == 0 ) phi [ prime [ j ] * i ] = phi [ i ] * prime [ j ]; else phi [ prime [ j ] * i ] = phi [ i ] * ( prime [ j ] - 1 ); } } }","title":"\u7ea6\u6570"},{"location":"algor/math/number-theory/factor/#_1","text":"\u82e5 \\(n\\) \u9664\u4ee5 \\(d\\) \u7684\u4f59\u6570\u4e3a \\(0\\) \uff0c\u5219\u79f0 \\(d\\) \u80fd\u6574\u9664 \\(n\\) \uff0c\u6216\u8005 \\(d\\) \u4e3a \\(n\\) \u7684\u7ea6\u6570\uff0c\u8bb0\u4f5c \\(d|n,(n,d \\in \\mathbb{Z})\\) \u552f\u4e00\u5206\u89e3\u5b9a\u7406\u7684\u4e09\u4e2a\u63a8\u8bba\uff1a \u82e5 \\(n \\in \\mathbb{N}^*\\) \uff0c\u5219 \\(n\\) \u7684\u6b63\u7ea6\u6570\u96c6\u5408\u4e3a \\(\\{x | x = p_1^{b_1}p_2^{b_2}\\dots p_m^{b_m},b_i \\le c_i\\}\\) \u3002 \\(n\\) \u7684\u6b63\u7ea6\u6570\u4e2a\u6570\u4e3a \\(\\prod\\limits_{i = 1}^m(c_i+ 1)\\) \\(n\\) \u7684\u6b63\u7ea6\u6570\u4e4b\u548c\u4e3a \\((1+p_1+p_1^2+p_1^3+\\dots +p_1^{c_1})\\times\\dots(1+p_m+p_m^2+p_m^3+\\dots +p_m^{c_m}) = \\prod\\limits_{i = 1}^m(\\sum\\limits_{j = 1}^{c_i} p_i^{j})\\)","title":"\u5b9a\u4e49"},{"location":"algor/math/number-theory/factor/#_2","text":"","title":"\u6c42\u6b63\u7ea6\u6570\u96c6\u5408"},{"location":"algor/math/number-theory/factor/#_3","text":"\u8003\u8651\u5230 \\(n = a\\times b\\) \uff0c\u5176\u4e2d \\(a,b\\) \u4e3a\u4e00\u5bf9\u540c\u65f6\u51fa\u73b0\u7684\u56e0\u5b50\u3002\u7ed3\u5408\u6839\u53f7\u7ed3\u8bba\uff0c\u626b\u63cf \\(a\\in[1,\\sqrt{n}]\\) \uff0c\u82e5 \\(a | n\\) \uff0c\u5219\u540c\u65f6\u8bb0\u5f55 \\(a,n/a\\) \u5373\u53ef\u3002 \u590d\u6742\u5ea6\u663e\u7136\u662f\u6839\u53f7\uff0c\u7531\u6b64\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u63a8\u8bba\uff1a\u6574\u6570 \\(n\\) \u7684\u7ea6\u6570\u4e0a\u754c\u4e3a \\(2\\sqrt{n}\\) \uff08 \u7ea6\u6570\u4e0a\u754c\u7ed3\u8bba \uff09\u3002 1 2 3 4 5 6 7 8 9 int m , div [ si ]; void get_factors ( int n ) { m = 0 ; for ( int i = 1 ; i * i <= n ; ++ i ) if ( n % i == 0 ) { div [ ++ m ] = i ; if ( i * i != n ) div [ ++ m ] = n / i ; } }","title":"\u8bd5\u9664\u6cd5"},{"location":"algor/math/number-theory/factor/#_4","text":"\u8bd5\u9664\u6cd5\u6709\u5c40\u9650\u6027\uff0c\u53ea\u80fd\u6c42\u4e00\u4e2a\u6570\u7684\u6b63\u7ea6\u6570\u96c6\u5408\uff0c\u500d\u6570\u6cd5\u5219\u53ef\u4ee5\u6c42 \\([1,n]\\) \u6240\u6709\u6570\u7684\u6b63\u7ea6\u6570\u96c6\u5408\u3002 \u57fa\u4e8e\u4e00\u4e2a\u6bd4\u8f83\u663e\u7136\u7684\u60f3\u6cd5\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a \\(d\\in[1,n]\\) \uff0c\u4ee5 \\(d\\) \u4e3a\u7ea6\u6570\u4e4b\u4e00\u7684\u6570\u7684\u96c6\u5408\u5fc5\u7136\u662f \\(\\{kd,k=2,3,4\\dots,\\lfloor n/d\\rfloor\\}\\) \u90a3\u4e48\u76f4\u63a5\u628a \\(d\\) \u6254\u5230\u91cc\u9762\u5373\u53ef\uff0c\u590d\u6742\u5ea6 \\(O(n+n/2+n/3+\\dots+1) = O(n\\log n)\\) \u3002 \u53c8\u53ef\u4ee5\u5bfc\u51fa\u4e00\u4e2a\u7ed3\u8bba\uff1a \\(1\\sim n\\) \u6240\u6709\u6570\u7684\u7ea6\u6570\u4e2a\u6570\u4e4b\u548c\u7ea6\u4e3a \\(n\\log n\\) \u4e2a\uff08 \u7ea6\u6570\u4e2a\u6570\u548c\u7ed3\u8bba \uff09\u3002 1 2 3 4 5 6 std :: vector < int > fact [ si ]; void get_factors ( int n ) { for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= n / i ; ++ j ) fact [ i * j ]. emplace_back ( i ); }","title":"\u500d\u6570\u6cd5"},{"location":"algor/math/number-theory/factor/#_5","text":"\u5b9a\u4e49\u5982\u5b57\u9762\u610f\u4e49\u3002 \u5b9a\u7406\uff1a \\(\\forall a,b \\in \\mathbb{N},\\gcd(a,b)\\times \\operatorname{lcm}(a,b)=a\\times b\\) \u3002 \u66f4\u76f8\u51cf\u635f\u672f \\(\\forall a,b \\in \\mathbb{N},a\\ge b\\) \u6709 \\(\\gcd(a,b) = \\gcd(b, a-b) = \\gcd(a, a-b)\\) \\(\\forall a,b \\in \\mathbb{N}\\) \uff0c\u6709 \\(\\gcd(2a,2b) = 2\\gcd(a,b)\\) \u3002 \u7b2c\u4e8c\u8005\u8bc1\u660e\u663e\u7136\u3002 \\(\\text{Proof of 1:}\\) \u5bf9\u4e8e \\(\\forall d\\) \uff0c \\(d | a, d|b\\) \uff0c\u53ef\u4ee5\u6709 \\(d|(a-b)\\) \uff0c\u56e0\u4e3a\uff0c\u8bbe \\(a = r_1\\times d,b= r_2\\times d\\) \u3002 \u663e\u7136 \\(r1-r2\\ge 0\\) \uff0c\u6240\u4ee5 \\(a-b = (r_1-r_2)d\\) \u3002 \u90a3\u4e48 \\((a,b)\\) \u7684\u516c\u7ea6\u6570\u96c6\u5408\u5fc5\u7136\u4e0e \\((a,a-b)\\) \u76f8\u540c\uff0c\u53ef\u4ee5\u5f97\u5230\u8fd9\u4e24\u4e2a\u96c6\u5408\u7684\u6700\u5927\u503c\u76f8\u7b49\uff0c\u5373\u662f \\(\\gcd\\) \u76f8\u7b49\u3002 \u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 \u5b9a\u7406\uff1a \\(\\forall a,b \\in \\mathbb{N}\\Rightarrow\\gcd(a,b)=\\gcd(b,a\\mod b)\\) \\(\\text{Proof}:\\) \u8003\u8651\u7c7b\u6bd4\u4e0a\u9762\u7684\u8bc1\u660e\u53bb\u8bc1\u660e\u516c\u7ea6\u6570\u96c6\u5408\u76f8\u7b49\u3002 \u4e0d\u59a8\u4ee4 \\(a\\ge b\\) \uff0c\u4ee4 \\(a = qb+r\\) \uff0c\u663e\u7136 \\(d|a,d|qb \\Rightarrow d|(a-qb)\\) \u3002 \u90a3\u4e48\u8bbe \\(d|a,d|b\\) \uff0c\u5219\u6709 \\(d|qb\\Rightarrow d|(a-qb) \\Rightarrow d|r\\) \u3002 \u56e0\u4e3a \\(d|r,d|b\\) \uff0c\u540c\u4e0a\u7406\u5373\u53ef\u3002 \u5f53 \\(b=0\\) \u65f6\uff0c\u539f\u5f0f\u7b49\u4e8e \\(a\\) \uff0c\u53ef\u4ee5\u5199\u51fa\u4ee5\u4e0b\u4ee3\u7801\u6c42 \\(\\gcd\\) \uff08\u672c\u8d28\u4e0a\u662f\u4e00\u79cd\u8f97\u8f6c\u76f8\u9664\uff09 1 2 3 int gcd ( int a , int b ) { return b ? gcd ( b , a % b ) : a ; } \u590d\u6742\u5ea6 \\(O(\\log(a+b))\\) \u3002","title":"\u6700\u5927\u516c\u7ea6\u6570"},{"location":"algor/math/number-theory/factor/#_6","text":"\u5c31\u662f \\(\\gcd(a,b)=1,a,b\\in\\mathbb{N}\\) \uff0c\u5219\u79f0 \\(a,b\\) \u4e92\u8d28\u3002 \u6ce8\u610f\u4e24\u4e24\u4e92\u8d28\u662f \\(\\gcd(a,b)=\\gcd(b,c)=\\gcd(a,c) = 1\\) \u3002 l \\(\\gcd(a,b,c)=1\\) \u4e3a\u201c \\(a,b,c\\) \u4e92\u8d28\u201d\u3002","title":"\u4e92\u8d28"},{"location":"algor/math/number-theory/factor/#_7","text":"\u5b9a\u4e49\uff1a \\([1,n]\\) \u4e2d\u4e0e \\(n\\) \u4e92\u8d28\u7684\u6570\u7684\u4e2a\u6570\u4e3a \\(\\varphi(n)\\) \uff0c\u79f0\u4f5c\u6b27\u62c9\u51fd\u6570\u3002 \u8ba1\u7b97\uff1a \\(\\varphi(n) = n \\times\\prod\\limits_{\\text{PRIME(p)}\\land p|n}(1-\\frac{1}{p})\\) \u3002 \u672c\u8d28\u4e0a\u662f\u5bb9\u65a5\u539f\u7406\uff0c\u5373\u5bf9\u4e8e \\(n\\) \u7684\u4efb\u610f\u4e24\u4e2a\u8d28\u56e0\u5b50 \\(p,q\\) \uff0c\u4ece \\([1,n]\\) \u4e2d\u53bb\u9664 \\(p,q\\) \u5206\u522b\u7684\u500d\u6570\u4e4b\u540e\uff0c\u8fd8\u8981\u628a \\(pq\\) \u7684\u500d\u6570\u52a0\u56de\u6765\u4e00\u6b21\uff0c \u5bf9\u4e8e\u6574\u4f53\u5e94\u7528\u8fd9\u4e2a\u7ed3\u8bba\u53ef\u4ee5\u5f97\u5230 \\(\\varphi(n)=n-\\lfloor\\frac{n}{p}\\rfloor-\\lfloor\\frac{n}{q}\\rfloor+\\lfloor\\frac{n}{pq}\\rfloor=n(1-\\frac{1}{p})(1-\\frac{1}{q})\\) \u3002 \u6240\u4ee5\u5206\u89e3\u8d28\u56e0\u6570\u5c31\u53ef\u4ee5 \\(O(\\sqrt{n})\\) \u6c42 \\(\\varphi(n)\\) \u3002","title":"\u6b27\u62c9\u51fd\u6570"},{"location":"algor/math/number-theory/factor/#_8","text":"\u6027\u8d281\uff1a \\(\\forall n > 1, 1\\sim n\\) \u4e2d\u4e0e \\(n\\) \u4e92\u8d28\u7684\u6570\u7684\u548c\u4e3a \\(n\\cdot\\varphi(n)/2\\) \u3002 \u7531\u66f4\u76f8\u51cf\u635f\u672f\uff0c\u548c \\(n\\) \u4e92\u8d28\u7684\u6570\u5fc5\u7136\u6210\u5bf9\u51fa\u73b0\uff0c\u4e14\u5747\u503c\u4e3a \\(n/2\\) \uff0c\u8bc1\u6bd5\u3002 \u6027\u8d282\uff1a\u6b27\u62c9\u51fd\u6570\u4e3a\u79ef\u6027\u51fd\u6570\uff0c\u4e14\u6709\uff1a \\(\\gcd(a,b)=1\\Rightarrow \\varphi(ab)=\\varphi(a)\\cdot\\varphi(b)\\) \u3002 \u5c55\u5f00\u8ba1\u7b97\u5f0f\u5c31\u884c\u4e86\u3002 \u6027\u8d283\uff1a\uff08\u79ef\u6027\u51fd\u6570\u7684\u6027\u8d28\uff09\uff1a\u5728\u552f\u4e00\u5206\u89e3\u5b9a\u7406\u80cc\u666f\u4e0b\uff0c\u82e5 \\(f\\) \u4e3a\u79ef\u6027\u51fd\u6570\uff0c\u5219\u6709\uff1a \\(f(n)=\\prod\\limits_{i=1}^mf(p_i^{c_i})\\) \u663e\u7136\u4efb\u610f\u7684 \\(p_i^{c_i}\\) \u548c \\(p_j^{c_j}\\) \u5fc5\u7136\u4e92\u8d28\uff0c\u7531\u79ef\u6027\u51fd\u6570\u7684\u6027\u8d28\uff0c\u5bf9\u6574\u4f53\u5e94\u7528\u7ed3\u8bba\uff0c\u53ef\u4ee5\u5f97\u5230\u539f\u5f0f\u3002 \u6027\u8d284\uff1a\u82e5 \\(p\\) \u4e3a\u8d28\u6570\uff0c\u82e5 \\(p|n\\) \u4e14 \\(p^2\\not|n\\) \uff0c\u5219 \\(\\varphi(n)=\\varphi(n/p)\\varphi(p)=\\varphi(n/p)\\cdot(p-1)\\) \u3002 \u79ef\u6027\u51fd\u6570\u7684\u6027\u8d28\uff0c\u663e\u7136\uff0c\u5e38\u7528\u4e8e\u9012\u63a8\u3002 \u6027\u8d285\uff1a\u82e5 \\(p\\) \u4e3a\u8d28\u6570\uff0c\u82e5 \\(p|n\\) \u4e14 \\(p^2|n\\) \uff0c\u5219 \\(\\varphi(n)= \\varphi(n/p)\\times p\\) \u56e0\u4e3a \\(n/p\\) \u548c \\(p\\) \u4e0d\u4e92\u8d28\uff0c\u6240\u4ee5\u53ea\u80fd\u5c55\u5f00\u8ba1\u7b97\u5f0f\u5f97\u5230\uff0c\u5e38\u7528\u4e8e\u9012\u63a8\u3002 \u6027\u8d286\uff1a \\(\\sum_{d|n}\\varphi(d)=n\\) \u3002 \u5f88\u6709\u610f\u601d\u7684\u6027\u8d28\uff0c\u5148\u5bf9 \\(n\\) \u5206\u89e3\u8d28\u56e0\u6570\uff0c\u4ee4 \\(f(x)=\\sum_{d|x}\\varphi(d)\\) \u3002 \u663e\u7136 \\(f(p_i^{c_i}) = \\varphi(1)+\\varphi(p_i)+\\varphi(p_i^{2})+\\dots+\\varphi(p_i^{c_i}) = p_i^{c_i}\\) \uff08\u7531\u6027\u8d28 \\(5\\) \u53ef\u4ee5\u53d1\u73b0\u662f\u4e00\u4e2a\u7b49\u6bd4\u6570\u5217\u6c42\u548c\uff09\u3002 \u7136\u540e\u53d1\u73b0\u82e5 \\(\\gcd(n,m)=1\\) \uff0c \\(f(nm)=(\\sum_{d|n}\\varphi(d))\\cdot(\\sum_{d|m}\\varphi(d))=f(n)f(m)\\) \u3002 \u6240\u4ee5 \\(f\\) \u662f\u79ef\u6027\u51fd\u6570\uff0c\u7531\u79ef\u6027\u51fd\u6570\u6027\u8d28\u53ef\u4ee5\u5f97\u5230\u539f\u5f0f\u6210\u7acb\u3002","title":"\u6b27\u62c9\u51fd\u6570\u7684\u6027\u8d28"},{"location":"algor/math/number-theory/factor/#_9","text":"\u57c3\u6c0f\u7b5b \u8003\u8651\u57c3\u6c0f\u7b5b\u7684\u8fc7\u7a0b\uff0c\u53d1\u73b0\u4efb\u610f\u7684 \\(m\\in[2,n]\\) \uff0c \\(m\\) \u4f1a\u88ab\u6240\u6709\u7684\u8d28\u6570 \\(d\\) \u7b5b\u4e00\u6b21\uff08\u4ece\u5e73\u65b9\u5f00\u59cb\uff0c\u6240\u4ee5\u7b5b\u5b83\u7684\u5fc5\u7136\u662f\u8d28\u6570\uff09\u3002 \u7136\u540e\u6839\u636e\u6b27\u62c9\u51fd\u6570\u7684\u8ba1\u7b97\u5f0f\uff1a \\(\\varphi(k)=\\varphi(k)\\times(\\frac{i-1}{i}),k = i,2i,3i,\\dots\\) \u5373\u53ef\u3002 \u590d\u6742\u5ea6 \\(O(n\\log n)\\) \u3002 1 2 3 4 5 6 7 8 int phi [ si ]; void calc_euler_func ( int n ) { for ( int i = 1 ; i <= n ; ++ i ) phi [ i ] = i ; for ( int i = 2 ; i <= n ; ++ i ) if ( phi [ i ] == i ) for ( int j = i ; j <= n ; j += i ) phi [ j ] = phi [ j ] / i * ( i - 1 ); } \u6b27\u62c9\u7b5b \u8003\u8651\u5230\u6bcf\u4e00\u4e2a\u6570\u53ea\u4f1a\u88ab\u4ed6\u7684 \\(mp\\) \u7b5b\u4e00\u6b21\uff0c\u6240\u4ee5\u76f4\u63a5\u5229\u7528\u6027\u8d284\uff0c5\u9012\u63a8\u5373\u53ef\u3002 \u590d\u6742\u5ea6 \\(O(n)\\) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 int phi [ si ]; int m = 0 , prime [ si ], vis [ si ]; void calc_euler_func ( int n ) { m = 0 , phi [ 1 ] = 1 ; memset ( vis , 0 , sizeof vis ); for ( int i = 2 ; i <= n ; ++ i ) { if ( vis [ i ] == 0 ) { vis [ i ] = i , prime [ ++ m ] = i , phi [ i ] = i - 1 ; } for ( int j = 1 ; j <= m ; ++ i ) { if ( prime [ j ] > vis [ i ] || prime [ j ] * vis [ i ] > n ) break ; vis [ prime [ j ] * i ] = prime [ j ]; if ( i % prime [ j ] == 0 ) phi [ prime [ j ] * i ] = phi [ i ] * prime [ j ]; else phi [ prime [ j ] * i ] = phi [ i ] * ( prime [ j ] - 1 ); } } }","title":"\u7b5b\u6cd5\u6c42\u6b27\u62c9\u51fd\u6570"},{"location":"algor/math/number-theory/prime/","text":"\u8d28\u6570\u7684\u5b9a\u4e49 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7b80\u5355\u6765\u8bf4\u5c31\u662f\u9664\u4e86 \\(1\\) \u548c\u5b83\u672c\u8eab\u4ee5\u5916\u6ca1\u6709\u4efb\u4f55\u56e0\u6570\u3002 \u672c\u6587\u8bb0 \\(\\text{PRIME}(n)\\) \u8868\u793a \\(n\\) \u4e3a\u8d28\u6570\u3002 \u6709\u4e24\u4e2a\u91cd\u8981\u7ed3\u8bba\uff1a \u7ed3\u8bba 1\uff1a\u5bf9\u4e8e\u8db3\u591f\u5927\u7684 \\(n \\in \\mathbb{N}^*\\) \uff0c \\([1,n]\\) \u4e2d\u7684\u7d20\u6570\u4e2a\u6570\u7ea6\u4e3a \\(\\frac{n}{\\ln n}\\) \u4e2a \uff08 \u5bf9\u6570\u7ed3\u8bba \uff09 \u7ed3\u8bba 2\uff1a\u82e5 \\(\\lnot \\text{PRIME}(n)\\) \uff0c\u5219 \\(\\exists T \\in [2,\\sqrt{n}]\\) \uff0c\u4f7f\u5f97 \\(T|n\\) \u3002\uff08 \u6839\u53f7\u7ed3\u8bba \uff09 \u6b64\u5904\u8bb0 \\(\\sqrt{n} = \\lfloor\\sqrt{n}\\rfloor\\) \u3002 \u5224\u65ad\u662f\u5426\u4e3a\u8d28\u6570 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7531\u6839\u53f7\u7ed3\u8bba\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u6bd4\u8f83\u663e\u7136\u7684\u8d28\u6570\u5224\u65ad\u7b97\u6cd5\uff1a \u4ee4 \\(x\\in[2,\\sqrt{n}]\\) \uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728 \\(x | n\\) \u3002\u82e5\u5b58\u5728 \\(\\Rightarrow \\lnot \\text{PRIME}(n)\\) \u3002 \u590d\u6742\u5ea6 \\(O(\\sqrt{n})\\) \u3002 1 2 3 4 5 6 bool is_prime ( int n ) { if ( n < 2 ) return false ; for ( int i = 2 ; i * i <= n ; ++ i ) if ( n % i == 0 ) return false ; return true ; } \u8d28\u6570\u7b5b\u6cd5 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6cdb\u5316\uff1a\u7528\u6765\u6c42 \\([1,n]\\) \u4e2d\u7684\u7d20\u6570\u96c6\u5408\u3002 \u57c3\u6c0f\u7b5b \u03c8(\uff40\u2207\u00b4)\u03c8 \u57fa\u4e8e\u4e00\u4e2a\u663e\u7136\u7684\u7ed3\u8bba\uff1a \\(\\forall x \\in \\mathbb{N}^*\\) \uff0c \\(\\lnot \\text{PRIME}(kx),(k = 2, 3, 4,\\dots)\\) \u4e00\u4e2a simple \u7684\u60f3\u6cd5\uff1a\u679a\u4e3e \\(2 \\to n\\) \uff0c\u5982\u679c \\(i\\) \u6ca1\u6709\u88ab\u6807\u8bb0\u4e3a\u5408\u6570\uff0c\u5219 \\(\\text{PRIME}(i)\\) \uff0c\u7136\u540e\u6807\u8bb0\u6240\u6709\u7684 \\(ki\\) \u3002\u5982\u679c \\(i\\) \u5df2\u7ecf\u88ab\u6807\u8bb0\uff0c\u90a3\u4e48\u6807\u8bb0\u6240\u6709\u7684 \\(ki\\) \uff0c\u521d\u59cb\u7684\u65f6\u5019 \\(2\\) \u6ca1\u6709\u88ab\u6807\u8bb0\u3002\u590d\u6742\u5ea6 \\(O(n\\times\\sum\\frac{n}{i})=O(n^2)\\) \u3002 \u53d1\u73b0\u8fd9\u4e2a\u505a\u6cd5\u4f1a\u91cd\u590d\u6807\u8bb0\u4e00\u4e2a\u6570\u5f88\u591a\u6b21\uff0c\u6bd4\u5982 \\(12\\) \u5c31\u4f1a\u88ab \\(2, 3, 4, 6\\) \u90fd\u6807\u8bb0\u4e00\u6b21\u3002 \u90a3\u4e48\u8003\u8651\u4e00\u4e2a\u7b80\u5355\u7684\u4f18\u5316\uff1a\u663e\u7136\u5bf9\u4e8e \\(\\forall rx,r\\in[2,x)\\) \uff0c \\(rx\\) \u5fc5\u7136\u4f1a\u5728\u88ab \\(x\\) \u6807\u8bb0\u5230\u7684\u65f6\u5019\u63d0\u524d\u88ab\u6807\u8bb0\u5230\u3002\u56e0\u4e3a \\(r\\) \u80af\u5b9a\u6bd4 \\(x\\) \u5c0f\uff0c\u90a3\u4e48 \\(r\\) \u80af\u5b9a\u5c31\u6807\u8bb0\u8fc7\u4e86 \\(rx\\) \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4ece \\(k = x\\) \u5f00\u59cb\u6807\u8bb0 \\(kx\\) \u3002 \u590d\u6742\u5ea6 \\(O(\\sum\\limits_{r\\le n \\and \\text{PRIME}(r)}\\dfrac{n}{r}) = O(n \\log \\log n)\\) \u3002 1 2 3 4 5 6 7 8 9 10 11 bool vis [ si ]; int m , prime [ si ]; void get_primes ( int n ) { m = 0 ; memset ( vis , false , sizeof vis ); for ( int i = 2 ; i <= n ; ++ i ) { if ( ! vis [ i ]) prime [ ++ m ] = i ; for ( int j = i * i ; j <= n ; ++ j ) vis [ j ] = true ; } } \u7ebf\u6027\u7b5b \u03c8(\uff40\u2207\u00b4)\u03c8 \u53c8\u53eb\u6b27\u62c9\u7b5b\u3002 \u8003\u8651\u5230\u57c3\u6c0f\u7b5b\u8fd8\u662f\u4f1a\u91cd\u590d\u6807\u8bb0\u5f88\u591a\u6570\u3002 \u8fd8\u662f\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff1a \\(12 = 2 \\times 6 = 3 \\times 4\\) \uff0c\u8fd9\u4e2a\u4f8b\u5b50\u4e0b\uff0c \\(12\\) \u4f1a\u88ab \\(2,3\\) \u5404\u7b5b\u4e00\u6b21\u3002 \u95ee\u9898\u6240\u5728\u5c31\u662f\uff0c\u4e00\u4e2a\u6570\u5e76\u4e0d\u80fd\u552f\u4e00\u786e\u5b9a\u4e00\u4e2a\u6570\u6765\u6807\u8bb0\u5b83\u3002 \u601d\u7d22\u4e00\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u6570\u7684\u6700\u5c0f\u8d28\u56e0\u5b50\u6765\u6807\u8bb0\u5b83\uff0c\u56e0\u4e3a\u8d28\u56e0\u5b50\u4e0d\u4f1a\u518d\u62c6\u5206\u6210\u522b\u7684\u56e0\u6570\uff0c\u4f7f\u7528\u6700\u5c0f\u7684\u8d28\u56e0\u5b50\u662f\u56e0\u4e3a\u786e\u5b9a\u8d77\u6765\u65b9\u4fbf\u3002 \u8bb0 \\(mp(n)\\) \u8868\u793a \\(n\\) \u7684\u6700\u5c0f\u8d28\u56e0\u5b50\uff0c\u663e\u7136\uff0c\u5982\u679c \\(\\text{PRIME}(i) \\Rightarrow mp(i) = i\\) \u3002 \u90a3\u4e48\u5f53\u626b\u5230\u67d0\u4e00\u4e2a\u6570 \\(i\\) \u4e14 \\(i\\) \u6ca1\u6709\u88ab\u6807\u8bb0\u7684\u65f6\u5019\uff0c\u4ee4 \\(mp(i) = i\\) \uff0c\u8bb0\u5f55\u8d28\u6570 \\(i\\) \u3002\u7136\u540e\u5bf9\u4e8e \\(i\\) \uff08\u4e0d\u7ba1\u5b83\u662f\u4e0d\u662f\u8d28\u6570\uff09\u679a\u4e3e\u6240\u6709\u6bd4 \\(mp(i)\\) \u5c0f\u6216\u8005\u7b49\u4e8e \\(mp(i)\\) \u7684\u8d28\u6570 \\(j\\) \uff08\u4ece\u5df2\u7ecf\u786e\u5b9a\u7684\u8d28\u6570\u96c6\u5408\u91cc\u9762\u9009\uff09\uff0c\u6807\u8bb0 \\(i\\times j\\) \u4e3a\u5408\u6570\uff0c\u5e76\u4ee4 \\(mp(i\\times j) = j\\) \u3002 \u6362\u4e00\u79cd\u8bf4\u6cd5\uff0c\u5c31\u662f \u4ece\u5927\u5230\u5c0f\u7d2f\u79ef\u8d28\u56e0\u5b50 \uff0c\u8fd9\u6837 \u80fd\u552f\u4e00\u786e\u5b9a\u6bcf\u4e2a\u6570\u7684\u7ec4\u6210\u65b9\u5f0f \uff0c\u6bd4\u5982 \\(12\\) \u5c31\u662f \\(3 \\times 2 \\times 2\\) \u3002 \u7b5b\u51fa \\(12\\) \u7684\u8fc7\u7a0b\u662f\uff1b\u5148\u626b\u63cf\u5230 \\(2\\) \uff0c\u6b64\u65f6\u5408\u6cd5\u7684 \\(j\\) \u53ea\u80fd\u662f \\(2\\) \uff0c\u6240\u4ee5\u6807\u8bb0 \\(4\\) \u4e3a\u5408\u6570\uff0c\u7136\u540e\u4ee4 \\(mp(4)=2\\) \uff0c\u626b\u63cf\u5230 \\(3\\) \uff0c\u53d1\u73b0 \\(2,3\\) \u53ef\u4ee5\u5145\u5f53 \\(j\\) \uff0c\u6240\u4ee5\u6807\u8bb0 \\(6,9\\) \uff0c \\(mp(6) = 2,mp(9) = 3\\) \u3002\u626b\u5230 \\(4\\) \u7684\u65f6\u5019\uff0c\u53d1\u73b0\u53ea\u6709 \\(2\\) \u53ef\u4ee5\u5145\u5f53 \\(j\\) \uff0c\u4e8e\u662f\u6807\u8bb0 \\(8\\) \uff0c \\(mp(8)=2\\) \uff0c\u5f53\u626b\u63cf\u5230 \\(6\\) \u7684\u65f6\u5019\uff0c\u5c31\u6807\u8bb0\u4e86 \\(12\\) \uff0c\u5e76\u4ee4 \\(mp(12) = 2\\) \u3002 \u56e0\u4e3a\u6bcf\u4e2a\u5408\u6570 \\(i \\times j\\) \u53ea\u4f1a\u88ab\u4ed6\u7684\u6700\u5c0f\u8d28\u56e0\u5b50 \\(j\\) \u7b5b\u4e00\u6b21\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u662f \\(O(n)\\) \u7684\u3002 \u8fd9\u6837\u8fd8\u987a\u4fbf\u6c42\u4e86\u6bcf\u4e2a\u6570\u7684\u6700\u5c0f\u8d28\u56e0\u5b50\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 int vis [ si ]; int m = 0 , prime [ si ]; void get_primes ( int n ) { m = 0 ; memset ( vis , 0 , sizeof vis ); for ( int i = 2 ; i <= n ; ++ i ) { if ( vis [ i ] == 0 ) { vis [ i ] = i ; prime [ ++ m ] = i ; } for ( int j = 1 ; j <= m ; ++ j ) { if ( prime [ j ] > vis [ i ] || prime [ j ] * i > n ) break ; vis [ prime [ j ] * i ] = prime [ j ]; } } } \u8d28\u56e0\u6570\u5206\u89e3 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6cdb\u5316\uff1a\u5206\u89e3\u4e00\u4e2a\u6570\u7684\u6240\u6709\u8d28\u56e0\u5b50 \u7b97\u672f\u57fa\u672c\u5b9a\u7406\uff1a\u4efb\u4f55\u4e00\u4e2a\u5927\u4e8e \\(1\\) \u7684\u6b63\u6574\u6570\u90fd\u53ef\u4ee5\u552f\u4e00\u5206\u89e3\u4e3a\u6709\u9650\u4e2a\u8d28\u6570\u7684\u4e58\u79ef\u3002 \u4e5f\u53eb\u552f\u4e00\u5206\u89e3\u5b9a\u7406\uff0c\u53ef\u4ee5\u5199\u6210 \\(N = p_1^{c1}\\times p_2^{c2}\\times p_3^{c3}\\times \\dots p_m^{cm}, c_i \\in \\mathbb{N}^*, p_i < p_{i + 1},\\text{PRIME}(p_i)\\) \u3002 \u8bd5\u9664\u6cd5\uff1a \u4e0a\u9762\u7684\u5b9a\u7406\u57fa\u672c\u6ca1\u592a\u5927\u7684\u7528\u5904\uff0c\u8003\u8651\u4e00\u4e2a\u57c3\u6c0f\u7b5b\u7684\u53d8\u5f0f\uff0c\u7ed3\u5408\u6839\u53f7\u7ed3\u8bba\u3002 \u60f3\u6cd5\uff1a\u626b\u4e00\u904d \\(d\\in[2,\\sqrt{n}]\\) \uff0c\u82e5 \\(d|n\\) \uff0c\u4e0d\u65ad\u7684\u9664\u6389 \\(n\\) \u4e2d\u7684 \\(d\\) \uff0c\u8bb0\u5f55 \\(c\\) \u5373\u53ef\u3002 \u56e0\u4e3a\u4ece\u5c0f\u5230\u5927\uff0c\u6240\u4ee5\u6bcf\u6b21\u80fd\u6574\u9664 \\(n\\) \u7684 \\(d\\) \u5fc5\u7136\u662f\u8d28\u6570\uff0c\u662f\u5408\u6570\u7684\u4e4b\u524d\u90fd\u9664\u6389\u4e86\u3002 \u590d\u6742\u5ea6 \\(O(n)\\) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 int c [ si ]; // exponential int m = 0 , p [ si ]; // prime factor void divide ( int n ) { m = 0 ; for ( int i = 2 ; i * i <= n ; ++ i ) { if ( n % i == 0 ) { p [ ++ m ] = i , c [ m ] = 0 ; while ( n % i == 0 ) n /= i , c [ m ] ++ ; } } if ( n > 1 ) p [ ++ m ] = n , c [ m ] = 1 ; }","title":"\u8d28\u6570"},{"location":"algor/math/number-theory/prime/#_1","text":"\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u9664\u4e86 \\(1\\) \u548c\u5b83\u672c\u8eab\u4ee5\u5916\u6ca1\u6709\u4efb\u4f55\u56e0\u6570\u3002 \u672c\u6587\u8bb0 \\(\\text{PRIME}(n)\\) \u8868\u793a \\(n\\) \u4e3a\u8d28\u6570\u3002 \u6709\u4e24\u4e2a\u91cd\u8981\u7ed3\u8bba\uff1a \u7ed3\u8bba 1\uff1a\u5bf9\u4e8e\u8db3\u591f\u5927\u7684 \\(n \\in \\mathbb{N}^*\\) \uff0c \\([1,n]\\) \u4e2d\u7684\u7d20\u6570\u4e2a\u6570\u7ea6\u4e3a \\(\\frac{n}{\\ln n}\\) \u4e2a \uff08 \u5bf9\u6570\u7ed3\u8bba \uff09 \u7ed3\u8bba 2\uff1a\u82e5 \\(\\lnot \\text{PRIME}(n)\\) \uff0c\u5219 \\(\\exists T \\in [2,\\sqrt{n}]\\) \uff0c\u4f7f\u5f97 \\(T|n\\) \u3002\uff08 \u6839\u53f7\u7ed3\u8bba \uff09 \u6b64\u5904\u8bb0 \\(\\sqrt{n} = \\lfloor\\sqrt{n}\\rfloor\\) \u3002","title":"\u8d28\u6570\u7684\u5b9a\u4e49"},{"location":"algor/math/number-theory/prime/#_2","text":"\u7531\u6839\u53f7\u7ed3\u8bba\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u6bd4\u8f83\u663e\u7136\u7684\u8d28\u6570\u5224\u65ad\u7b97\u6cd5\uff1a \u4ee4 \\(x\\in[2,\\sqrt{n}]\\) \uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728 \\(x | n\\) \u3002\u82e5\u5b58\u5728 \\(\\Rightarrow \\lnot \\text{PRIME}(n)\\) \u3002 \u590d\u6742\u5ea6 \\(O(\\sqrt{n})\\) \u3002 1 2 3 4 5 6 bool is_prime ( int n ) { if ( n < 2 ) return false ; for ( int i = 2 ; i * i <= n ; ++ i ) if ( n % i == 0 ) return false ; return true ; }","title":"\u5224\u65ad\u662f\u5426\u4e3a\u8d28\u6570"},{"location":"algor/math/number-theory/prime/#_3","text":"\u6cdb\u5316\uff1a\u7528\u6765\u6c42 \\([1,n]\\) \u4e2d\u7684\u7d20\u6570\u96c6\u5408\u3002","title":"\u8d28\u6570\u7b5b\u6cd5"},{"location":"algor/math/number-theory/prime/#_4","text":"\u57fa\u4e8e\u4e00\u4e2a\u663e\u7136\u7684\u7ed3\u8bba\uff1a \\(\\forall x \\in \\mathbb{N}^*\\) \uff0c \\(\\lnot \\text{PRIME}(kx),(k = 2, 3, 4,\\dots)\\) \u4e00\u4e2a simple \u7684\u60f3\u6cd5\uff1a\u679a\u4e3e \\(2 \\to n\\) \uff0c\u5982\u679c \\(i\\) \u6ca1\u6709\u88ab\u6807\u8bb0\u4e3a\u5408\u6570\uff0c\u5219 \\(\\text{PRIME}(i)\\) \uff0c\u7136\u540e\u6807\u8bb0\u6240\u6709\u7684 \\(ki\\) \u3002\u5982\u679c \\(i\\) \u5df2\u7ecf\u88ab\u6807\u8bb0\uff0c\u90a3\u4e48\u6807\u8bb0\u6240\u6709\u7684 \\(ki\\) \uff0c\u521d\u59cb\u7684\u65f6\u5019 \\(2\\) \u6ca1\u6709\u88ab\u6807\u8bb0\u3002\u590d\u6742\u5ea6 \\(O(n\\times\\sum\\frac{n}{i})=O(n^2)\\) \u3002 \u53d1\u73b0\u8fd9\u4e2a\u505a\u6cd5\u4f1a\u91cd\u590d\u6807\u8bb0\u4e00\u4e2a\u6570\u5f88\u591a\u6b21\uff0c\u6bd4\u5982 \\(12\\) \u5c31\u4f1a\u88ab \\(2, 3, 4, 6\\) \u90fd\u6807\u8bb0\u4e00\u6b21\u3002 \u90a3\u4e48\u8003\u8651\u4e00\u4e2a\u7b80\u5355\u7684\u4f18\u5316\uff1a\u663e\u7136\u5bf9\u4e8e \\(\\forall rx,r\\in[2,x)\\) \uff0c \\(rx\\) \u5fc5\u7136\u4f1a\u5728\u88ab \\(x\\) \u6807\u8bb0\u5230\u7684\u65f6\u5019\u63d0\u524d\u88ab\u6807\u8bb0\u5230\u3002\u56e0\u4e3a \\(r\\) \u80af\u5b9a\u6bd4 \\(x\\) \u5c0f\uff0c\u90a3\u4e48 \\(r\\) \u80af\u5b9a\u5c31\u6807\u8bb0\u8fc7\u4e86 \\(rx\\) \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4ece \\(k = x\\) \u5f00\u59cb\u6807\u8bb0 \\(kx\\) \u3002 \u590d\u6742\u5ea6 \\(O(\\sum\\limits_{r\\le n \\and \\text{PRIME}(r)}\\dfrac{n}{r}) = O(n \\log \\log n)\\) \u3002 1 2 3 4 5 6 7 8 9 10 11 bool vis [ si ]; int m , prime [ si ]; void get_primes ( int n ) { m = 0 ; memset ( vis , false , sizeof vis ); for ( int i = 2 ; i <= n ; ++ i ) { if ( ! vis [ i ]) prime [ ++ m ] = i ; for ( int j = i * i ; j <= n ; ++ j ) vis [ j ] = true ; } }","title":"\u57c3\u6c0f\u7b5b"},{"location":"algor/math/number-theory/prime/#_5","text":"\u53c8\u53eb\u6b27\u62c9\u7b5b\u3002 \u8003\u8651\u5230\u57c3\u6c0f\u7b5b\u8fd8\u662f\u4f1a\u91cd\u590d\u6807\u8bb0\u5f88\u591a\u6570\u3002 \u8fd8\u662f\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff1a \\(12 = 2 \\times 6 = 3 \\times 4\\) \uff0c\u8fd9\u4e2a\u4f8b\u5b50\u4e0b\uff0c \\(12\\) \u4f1a\u88ab \\(2,3\\) \u5404\u7b5b\u4e00\u6b21\u3002 \u95ee\u9898\u6240\u5728\u5c31\u662f\uff0c\u4e00\u4e2a\u6570\u5e76\u4e0d\u80fd\u552f\u4e00\u786e\u5b9a\u4e00\u4e2a\u6570\u6765\u6807\u8bb0\u5b83\u3002 \u601d\u7d22\u4e00\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u6570\u7684\u6700\u5c0f\u8d28\u56e0\u5b50\u6765\u6807\u8bb0\u5b83\uff0c\u56e0\u4e3a\u8d28\u56e0\u5b50\u4e0d\u4f1a\u518d\u62c6\u5206\u6210\u522b\u7684\u56e0\u6570\uff0c\u4f7f\u7528\u6700\u5c0f\u7684\u8d28\u56e0\u5b50\u662f\u56e0\u4e3a\u786e\u5b9a\u8d77\u6765\u65b9\u4fbf\u3002 \u8bb0 \\(mp(n)\\) \u8868\u793a \\(n\\) \u7684\u6700\u5c0f\u8d28\u56e0\u5b50\uff0c\u663e\u7136\uff0c\u5982\u679c \\(\\text{PRIME}(i) \\Rightarrow mp(i) = i\\) \u3002 \u90a3\u4e48\u5f53\u626b\u5230\u67d0\u4e00\u4e2a\u6570 \\(i\\) \u4e14 \\(i\\) \u6ca1\u6709\u88ab\u6807\u8bb0\u7684\u65f6\u5019\uff0c\u4ee4 \\(mp(i) = i\\) \uff0c\u8bb0\u5f55\u8d28\u6570 \\(i\\) \u3002\u7136\u540e\u5bf9\u4e8e \\(i\\) \uff08\u4e0d\u7ba1\u5b83\u662f\u4e0d\u662f\u8d28\u6570\uff09\u679a\u4e3e\u6240\u6709\u6bd4 \\(mp(i)\\) \u5c0f\u6216\u8005\u7b49\u4e8e \\(mp(i)\\) \u7684\u8d28\u6570 \\(j\\) \uff08\u4ece\u5df2\u7ecf\u786e\u5b9a\u7684\u8d28\u6570\u96c6\u5408\u91cc\u9762\u9009\uff09\uff0c\u6807\u8bb0 \\(i\\times j\\) \u4e3a\u5408\u6570\uff0c\u5e76\u4ee4 \\(mp(i\\times j) = j\\) \u3002 \u6362\u4e00\u79cd\u8bf4\u6cd5\uff0c\u5c31\u662f \u4ece\u5927\u5230\u5c0f\u7d2f\u79ef\u8d28\u56e0\u5b50 \uff0c\u8fd9\u6837 \u80fd\u552f\u4e00\u786e\u5b9a\u6bcf\u4e2a\u6570\u7684\u7ec4\u6210\u65b9\u5f0f \uff0c\u6bd4\u5982 \\(12\\) \u5c31\u662f \\(3 \\times 2 \\times 2\\) \u3002 \u7b5b\u51fa \\(12\\) \u7684\u8fc7\u7a0b\u662f\uff1b\u5148\u626b\u63cf\u5230 \\(2\\) \uff0c\u6b64\u65f6\u5408\u6cd5\u7684 \\(j\\) \u53ea\u80fd\u662f \\(2\\) \uff0c\u6240\u4ee5\u6807\u8bb0 \\(4\\) \u4e3a\u5408\u6570\uff0c\u7136\u540e\u4ee4 \\(mp(4)=2\\) \uff0c\u626b\u63cf\u5230 \\(3\\) \uff0c\u53d1\u73b0 \\(2,3\\) \u53ef\u4ee5\u5145\u5f53 \\(j\\) \uff0c\u6240\u4ee5\u6807\u8bb0 \\(6,9\\) \uff0c \\(mp(6) = 2,mp(9) = 3\\) \u3002\u626b\u5230 \\(4\\) \u7684\u65f6\u5019\uff0c\u53d1\u73b0\u53ea\u6709 \\(2\\) \u53ef\u4ee5\u5145\u5f53 \\(j\\) \uff0c\u4e8e\u662f\u6807\u8bb0 \\(8\\) \uff0c \\(mp(8)=2\\) \uff0c\u5f53\u626b\u63cf\u5230 \\(6\\) \u7684\u65f6\u5019\uff0c\u5c31\u6807\u8bb0\u4e86 \\(12\\) \uff0c\u5e76\u4ee4 \\(mp(12) = 2\\) \u3002 \u56e0\u4e3a\u6bcf\u4e2a\u5408\u6570 \\(i \\times j\\) \u53ea\u4f1a\u88ab\u4ed6\u7684\u6700\u5c0f\u8d28\u56e0\u5b50 \\(j\\) \u7b5b\u4e00\u6b21\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u662f \\(O(n)\\) \u7684\u3002 \u8fd9\u6837\u8fd8\u987a\u4fbf\u6c42\u4e86\u6bcf\u4e2a\u6570\u7684\u6700\u5c0f\u8d28\u56e0\u5b50\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 int vis [ si ]; int m = 0 , prime [ si ]; void get_primes ( int n ) { m = 0 ; memset ( vis , 0 , sizeof vis ); for ( int i = 2 ; i <= n ; ++ i ) { if ( vis [ i ] == 0 ) { vis [ i ] = i ; prime [ ++ m ] = i ; } for ( int j = 1 ; j <= m ; ++ j ) { if ( prime [ j ] > vis [ i ] || prime [ j ] * i > n ) break ; vis [ prime [ j ] * i ] = prime [ j ]; } } }","title":"\u7ebf\u6027\u7b5b"},{"location":"algor/math/number-theory/prime/#_6","text":"\u6cdb\u5316\uff1a\u5206\u89e3\u4e00\u4e2a\u6570\u7684\u6240\u6709\u8d28\u56e0\u5b50 \u7b97\u672f\u57fa\u672c\u5b9a\u7406\uff1a\u4efb\u4f55\u4e00\u4e2a\u5927\u4e8e \\(1\\) \u7684\u6b63\u6574\u6570\u90fd\u53ef\u4ee5\u552f\u4e00\u5206\u89e3\u4e3a\u6709\u9650\u4e2a\u8d28\u6570\u7684\u4e58\u79ef\u3002 \u4e5f\u53eb\u552f\u4e00\u5206\u89e3\u5b9a\u7406\uff0c\u53ef\u4ee5\u5199\u6210 \\(N = p_1^{c1}\\times p_2^{c2}\\times p_3^{c3}\\times \\dots p_m^{cm}, c_i \\in \\mathbb{N}^*, p_i < p_{i + 1},\\text{PRIME}(p_i)\\) \u3002 \u8bd5\u9664\u6cd5\uff1a \u4e0a\u9762\u7684\u5b9a\u7406\u57fa\u672c\u6ca1\u592a\u5927\u7684\u7528\u5904\uff0c\u8003\u8651\u4e00\u4e2a\u57c3\u6c0f\u7b5b\u7684\u53d8\u5f0f\uff0c\u7ed3\u5408\u6839\u53f7\u7ed3\u8bba\u3002 \u60f3\u6cd5\uff1a\u626b\u4e00\u904d \\(d\\in[2,\\sqrt{n}]\\) \uff0c\u82e5 \\(d|n\\) \uff0c\u4e0d\u65ad\u7684\u9664\u6389 \\(n\\) \u4e2d\u7684 \\(d\\) \uff0c\u8bb0\u5f55 \\(c\\) \u5373\u53ef\u3002 \u56e0\u4e3a\u4ece\u5c0f\u5230\u5927\uff0c\u6240\u4ee5\u6bcf\u6b21\u80fd\u6574\u9664 \\(n\\) \u7684 \\(d\\) \u5fc5\u7136\u662f\u8d28\u6570\uff0c\u662f\u5408\u6570\u7684\u4e4b\u524d\u90fd\u9664\u6389\u4e86\u3002 \u590d\u6742\u5ea6 \\(O(n)\\) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 int c [ si ]; // exponential int m = 0 , p [ si ]; // prime factor void divide ( int n ) { m = 0 ; for ( int i = 2 ; i * i <= n ; ++ i ) { if ( n % i == 0 ) { p [ ++ m ] = i , c [ m ] = 0 ; while ( n % i == 0 ) n /= i , c [ m ] ++ ; } } if ( n > 1 ) p [ ++ m ] = n , c [ m ] = 1 ; }","title":"\u8d28\u56e0\u6570\u5206\u89e3"},{"location":"algor/misc/cdq/","text":"","title":"CDQ \u5206\u6cbb"},{"location":"algor/misc/count-points/","text":"\u6cdb\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u79cd\u95ee\u9898\u4e00\u822c\u90fd\u662f\uff0c\u6709\u4e00\u4e9b\u4e0d\u540c\u79cd\u7c7b\u7684\u9650\u5236\uff0c\u6bd4\u5982\u503c\u57df\u9650\u5236\u548c\u4e0b\u6807\u9650\u5236\u3002 \u4f60\u9700\u8981\u5bf9\u6ee1\u8db3\u4e24\u79cd\u6761\u4ef6\u7684\u70b9/\u5143\u7d20\u8ba1\u6570\u3002 \u4e00\u4e2a\u6bd4\u8f83\u7ecf\u5178\u7684\u5957\u8def\u662f\uff0c\u5bf9\u4e8e\u4e8c\u7ef4\u6570\u70b9\uff0c\u8003\u8651\u679a\u4e3e\u4e0b\u6807\uff0c\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u503c\u57df\uff0c\u95ee\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\u4e00\u4e2a\u6240\u8c13\u52a8\u6001\u7684\u524d\u7f00\u548c\uff0c\u601d\u60f3\u6709\u70b9\u7c7b\u4f3c\u53ef\u6301\u4e45\u5316\u3002 \u5982\u679c\u90fd\u662f\u4e0b\u6807\uff0c\u6bd4\u5982\u4f8b\u9898\u7b2c\u4e00\u9898\uff0c\u4e5f\u662f\u4e00\u4e2a\u9053\u7406\u3002 \u6709\u7684 dp \u91cc\u9762\u4e5f\u4f1a\u9047\u5230\u7c7b\u4f3c\u7684\u95ee\u9898\uff0c\u6bd4\u5982 The Battle Of Chibi \u90a3\u9898\u3002 \u8fd9\u7c7b\u95ee\u9898\u7684\u672c\u8d28\u662f\uff0c\u8003\u8651\u5c06\u591a\u79cd\u9650\u5236\u5206\u79bb\u5f00\u6765\uff0c\u65b9\u4fbf\u8ba1\u7b97\uff0c\u56e0\u4e3a\u663e\u7136\u5206\u5f00\u6ee1\u8db3\u4e25\u683c\u5f31\u4e8e\u540c\u65f6\u6ee1\u8db3\u5427\uff08 \u8fd9\u7c7b\u95ee\u9898\u597d\u50cf\u8fd8\u53ef\u4ee5 cdq\uff0c\u4e09\u7ef4\u53ca\u4ee5\u4e0a\u5c31\u9700\u8981\u4e86\uff0c\u4f46\u662f\u6211\u73b0\u5728\u6ca1\u6709\u5b66\u7684\u5fc5\u8981\uff0c\u5148\u5495\u7740\u3002 \u4f8b\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 P2163 [SHOI2007]\u56ed\u4e01\u7684\u70e6\u607c \u03c8(\uff40\u2207\u00b4)\u03c8 \u770b\u6765\u4e00\u822c\u7684\u96be\u9898\u662f\u96be\u4e0d\u5012\u8fd9\u4f4d\u56ed\u4e01\u7684\uff0c\u56fd\u738b\u6700\u540e\u6253\u7b97\u7528\u8f66\u8f6e\u6218\u6765\u6d88\u8017\u4ed6\u7684\u5b9e\u529b\uff1a \u201c\u5e74\u8f7b\u4eba\uff0c\u5728\u6211\u7684\u82b1\u56ed\u91cc\u6709 \\(n\\) \u68f5\u6811\uff0c\u6bcf\u4e00\u68f5\u6811\u53ef\u4ee5\u7528\u4e00\u4e2a\u6574\u6570\u5750\u6807\u6765\u8868\u793a\uff0c\u4e00\u4f1a\u513f\uff0c\u6211\u7684 \\(m\\) \u4e2a\u9a91\u58eb\u4eec\u4f1a\u6765\u8f6e\u756a\u8be2\u95ee\u4f60\u67d0\u4e00\u4e2a\u77e9\u9635\u5185\u6709\u591a\u5c11\u6811\uff0c\u5982\u679c\u4f60\u4e0d\u80fd\u7acb\u5373\u7b54\u5bf9\uff0c\u4f60\u5c31\u51c6\u5907\u8d70\u4eba\u5427\uff01\u201d\u8bf4\u5b8c\uff0c\u56fd\u738b\u6c14\u547c\u547c\u5730\u5148\u8d70\u4e86\u3002 \u8fd9\u4e0b\u8f6e\u5230\u56ed\u4e01\u50bb\u773c\u4e86\uff0c\u4ed6\u6ca1\u6709\u51c6\u5907\u8fc7\u8fd9\u6837\u7684\u95ee\u9898\u3002\u6240\u5e78\u7684\u662f\uff0c\u4f5c\u4e3a\u201c\u5168\u56fd\u56ed\u4e01\u4fdd\u62a4\u8054\u76df\u201d\u7684\u4f1a\u957f\u2014\u2014\u4f60\uff0c\u53ef\u4ee5\u6210\u4e3a\u4ed6\u7684\u6700\u540e\u4e00\u6839\u6551\u547d\u7a3b\u8349\u3002 \u6570\u636e\u8303\u56f4 5e5\uff0c\u503c\u57df 1e7\u3002 \u8fd9\u4e2a\u5c31\u662f\u677f\u5b50\u4e8c\u7ef4\u6570\u70b9\u5427\u611f\u89c9\uff0c\u5c31\u76f4\u63a5\u679a\u4e3e \\(x\\) \uff0c\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4 \\(y\\) \u3002 \u95ee\u9898\u672c\u8d28\u4e0a\u53ef\u4ee5\u5206\u5f00\u8f6c\u5316\u4e3a\u4e24\u4e2a\u7ef4\u5ea6\u4e0a\u7684\u524d\u7f00\u548c\uff0c\u4f46\u662f\u4e8c\u7ef4\u524d\u7f00\u548c\u5bc4\u4e86\uff0c\u7a7a\u95f4\u5f00\u4e0d\u4e0b\uff0c\u76f4\u63a5\u4e8c\u7ef4\u6811\u72b6\u6570\u7ec4\u4e5f\u5bc4\u4e86\u3002 \u6240\u4ee5\u4f60\u8003\u8651\u679a\u4e3e\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u53e6\u5916\u4e00\u4e2a\u7ef4\u5ea6\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u3002 \u5176\u5b9e\u611f\u89c9\u8fd9\u4e2a\u9898\u677f\u5b50\u7684\u6837\u5b50\u4e0d\u662f\u5f88\u50cf\uff0c\u5e94\u8be5\u770b\u4e0b\u9762\u4e24\u4e2a\u9898\u3002 Code 1 \u8fd9\u91cc\u6ca1\u6709\u4ee3\u7801 \u3002 ABC283F - Permutation Distance \u03c8(\uff40\u2207\u00b4)\u03c8 link \u8fd9\u9898\u8981\u8003\u8651\u62c6\u4e00\u4e0b\uff0c\u5206\u5f00\u6765\u7b97\u3002 20230111C - A \u03c8(\uff40\u2207\u00b4)\u03c8 link \u8fd9\u9898\u6709\u989d\u5916\u7684\u9650\u5236\uff0c\u53ef\u4ee5\u901a\u8fc7\u5176\u4ed6\u65b9\u5f0f\u89e3\u51b3\u3002","title":"\u6570\u70b9"},{"location":"algor/misc/count-points/#_1","text":"\u8fd9\u79cd\u95ee\u9898\u4e00\u822c\u90fd\u662f\uff0c\u6709\u4e00\u4e9b\u4e0d\u540c\u79cd\u7c7b\u7684\u9650\u5236\uff0c\u6bd4\u5982\u503c\u57df\u9650\u5236\u548c\u4e0b\u6807\u9650\u5236\u3002 \u4f60\u9700\u8981\u5bf9\u6ee1\u8db3\u4e24\u79cd\u6761\u4ef6\u7684\u70b9/\u5143\u7d20\u8ba1\u6570\u3002 \u4e00\u4e2a\u6bd4\u8f83\u7ecf\u5178\u7684\u5957\u8def\u662f\uff0c\u5bf9\u4e8e\u4e8c\u7ef4\u6570\u70b9\uff0c\u8003\u8651\u679a\u4e3e\u4e0b\u6807\uff0c\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u503c\u57df\uff0c\u95ee\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\u4e00\u4e2a\u6240\u8c13\u52a8\u6001\u7684\u524d\u7f00\u548c\uff0c\u601d\u60f3\u6709\u70b9\u7c7b\u4f3c\u53ef\u6301\u4e45\u5316\u3002 \u5982\u679c\u90fd\u662f\u4e0b\u6807\uff0c\u6bd4\u5982\u4f8b\u9898\u7b2c\u4e00\u9898\uff0c\u4e5f\u662f\u4e00\u4e2a\u9053\u7406\u3002 \u6709\u7684 dp \u91cc\u9762\u4e5f\u4f1a\u9047\u5230\u7c7b\u4f3c\u7684\u95ee\u9898\uff0c\u6bd4\u5982 The Battle Of Chibi \u90a3\u9898\u3002 \u8fd9\u7c7b\u95ee\u9898\u7684\u672c\u8d28\u662f\uff0c\u8003\u8651\u5c06\u591a\u79cd\u9650\u5236\u5206\u79bb\u5f00\u6765\uff0c\u65b9\u4fbf\u8ba1\u7b97\uff0c\u56e0\u4e3a\u663e\u7136\u5206\u5f00\u6ee1\u8db3\u4e25\u683c\u5f31\u4e8e\u540c\u65f6\u6ee1\u8db3\u5427\uff08 \u8fd9\u7c7b\u95ee\u9898\u597d\u50cf\u8fd8\u53ef\u4ee5 cdq\uff0c\u4e09\u7ef4\u53ca\u4ee5\u4e0a\u5c31\u9700\u8981\u4e86\uff0c\u4f46\u662f\u6211\u73b0\u5728\u6ca1\u6709\u5b66\u7684\u5fc5\u8981\uff0c\u5148\u5495\u7740\u3002","title":"\u6cdb\u5316"},{"location":"algor/misc/count-points/#_2","text":"","title":"\u4f8b\u9898"},{"location":"algor/misc/count-points/#p2163-shoi2007","text":"\u770b\u6765\u4e00\u822c\u7684\u96be\u9898\u662f\u96be\u4e0d\u5012\u8fd9\u4f4d\u56ed\u4e01\u7684\uff0c\u56fd\u738b\u6700\u540e\u6253\u7b97\u7528\u8f66\u8f6e\u6218\u6765\u6d88\u8017\u4ed6\u7684\u5b9e\u529b\uff1a \u201c\u5e74\u8f7b\u4eba\uff0c\u5728\u6211\u7684\u82b1\u56ed\u91cc\u6709 \\(n\\) \u68f5\u6811\uff0c\u6bcf\u4e00\u68f5\u6811\u53ef\u4ee5\u7528\u4e00\u4e2a\u6574\u6570\u5750\u6807\u6765\u8868\u793a\uff0c\u4e00\u4f1a\u513f\uff0c\u6211\u7684 \\(m\\) \u4e2a\u9a91\u58eb\u4eec\u4f1a\u6765\u8f6e\u756a\u8be2\u95ee\u4f60\u67d0\u4e00\u4e2a\u77e9\u9635\u5185\u6709\u591a\u5c11\u6811\uff0c\u5982\u679c\u4f60\u4e0d\u80fd\u7acb\u5373\u7b54\u5bf9\uff0c\u4f60\u5c31\u51c6\u5907\u8d70\u4eba\u5427\uff01\u201d\u8bf4\u5b8c\uff0c\u56fd\u738b\u6c14\u547c\u547c\u5730\u5148\u8d70\u4e86\u3002 \u8fd9\u4e0b\u8f6e\u5230\u56ed\u4e01\u50bb\u773c\u4e86\uff0c\u4ed6\u6ca1\u6709\u51c6\u5907\u8fc7\u8fd9\u6837\u7684\u95ee\u9898\u3002\u6240\u5e78\u7684\u662f\uff0c\u4f5c\u4e3a\u201c\u5168\u56fd\u56ed\u4e01\u4fdd\u62a4\u8054\u76df\u201d\u7684\u4f1a\u957f\u2014\u2014\u4f60\uff0c\u53ef\u4ee5\u6210\u4e3a\u4ed6\u7684\u6700\u540e\u4e00\u6839\u6551\u547d\u7a3b\u8349\u3002 \u6570\u636e\u8303\u56f4 5e5\uff0c\u503c\u57df 1e7\u3002 \u8fd9\u4e2a\u5c31\u662f\u677f\u5b50\u4e8c\u7ef4\u6570\u70b9\u5427\u611f\u89c9\uff0c\u5c31\u76f4\u63a5\u679a\u4e3e \\(x\\) \uff0c\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4 \\(y\\) \u3002 \u95ee\u9898\u672c\u8d28\u4e0a\u53ef\u4ee5\u5206\u5f00\u8f6c\u5316\u4e3a\u4e24\u4e2a\u7ef4\u5ea6\u4e0a\u7684\u524d\u7f00\u548c\uff0c\u4f46\u662f\u4e8c\u7ef4\u524d\u7f00\u548c\u5bc4\u4e86\uff0c\u7a7a\u95f4\u5f00\u4e0d\u4e0b\uff0c\u76f4\u63a5\u4e8c\u7ef4\u6811\u72b6\u6570\u7ec4\u4e5f\u5bc4\u4e86\u3002 \u6240\u4ee5\u4f60\u8003\u8651\u679a\u4e3e\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u53e6\u5916\u4e00\u4e2a\u7ef4\u5ea6\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u3002 \u5176\u5b9e\u611f\u89c9\u8fd9\u4e2a\u9898\u677f\u5b50\u7684\u6837\u5b50\u4e0d\u662f\u5f88\u50cf\uff0c\u5e94\u8be5\u770b\u4e0b\u9762\u4e24\u4e2a\u9898\u3002 Code 1 \u8fd9\u91cc\u6ca1\u6709\u4ee3\u7801 \u3002","title":"P2163 [SHOI2007]\u56ed\u4e01\u7684\u70e6\u607c"},{"location":"algor/misc/count-points/#abc283f-permutation-distance","text":"link \u8fd9\u9898\u8981\u8003\u8651\u62c6\u4e00\u4e0b\uff0c\u5206\u5f00\u6765\u7b97\u3002","title":"ABC283F - Permutation Distance"},{"location":"algor/misc/count-points/#20230111c-a","text":"link \u8fd9\u9898\u6709\u989d\u5916\u7684\u9650\u5236\uff0c\u53ef\u4ee5\u901a\u8fc7\u5176\u4ed6\u65b9\u5f0f\u89e3\u51b3\u3002","title":"20230111C - A"},{"location":"algor/misc/expression/","text":"\u6ca1\u5f00\u5de5","title":"\u8868\u8fbe\u5f0f\u6c42\u503c"},{"location":"algor/misc/mo/","text":"\u6cdb\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u7c7b\u95ee\u9898\u7684\u7279\u70b9\u90fd\u662f\uff0c\u4e00\u822c\u4e0d\u5177\u6709\u533a\u95f4\u7684\u53ef\u52a0\u53ef\u51cf\u6027\uff0c\u4e14\u8f83\u96be\u5408\u5e76\u7b54\u6848\u3002 \u8fd9\u4e5f\u5bfc\u81f4\u7ebf\u6bb5\u6811\u548c\u6811\u72b6\u6570\u7ec4\u7b49\u7b97\u6cd5\u5f88\u96be\u5904\u7406\u8fd9\u4e9b\u8be2\u95ee\u3002 \u6240\u4ee5\u6700\u65e9\u5728 codeforces \u4e0a\u51fa\u73b0\u7c7b\u4f3c\u7684\u95ee\u9898\u65f6\uff0c\u9ad8\u624b\u4eec\u60f3\u5230\u4e86\u4f7f\u7528\u5206\u5757\u7684\u601d\u60f3\u3002 \u5e76\u4e14\u8fd9\u7c7b\u95ee\u9898\u662f\u79bb\u7ebf\u4e0d\u5e26\u4fee\u7684\uff0c\u6240\u4ee5\u4ed6\u4eec\u5c31\u60f3\u5230\u4e86\u5bf9\u8be2\u95ee\u8fdb\u884c\u5206\u5757\u3002 \u5e94\u7528 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e3b\u8981\u7684\u4e09\u4e2a\u601d\u60f3\u662f\uff1a \u5c06\u8be2\u95ee\u79bb\u7ebf\u4e0b\u6765\u3002 \u5c06\u8be2\u95ee\u5206\u5757\u3002 \u7136\u540e\u6309\u7167\u5de6\u7aef\u70b9\u6240\u5728\u7684\u5757\u7684\u7f16\u53f7\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u53f3\u7aef\u70b9\u7684\u4f4d\u7f6e\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u6392\u5e8f\u3002 \u6392\u5e8f\u540e\uff0c\u5f53\u524d\u8be2\u95ee\u7b54\u6848\u5c06\u5728\u4e0a\u4e00\u4e2a\u8be2\u95ee\u7684\u57fa\u7840\u4e0a\u5f97\u5230\uff0c\u65b9\u5f0f\u662f\u66b4\u529b\u79fb\u52a8\u5de6\u53f3\u7aef\u70b9\uff0c\u8ba1\u7b97\u53d8\u5316\u7684\u8d21\u732e\u3002 \uff08\u5b9e\u9645\u4e0a\u8fd8\u662f\u5bf9\u5e8f\u5217\u8fdb\u884c\u5206\u5757\uff0c\u4e0d\u8fc7\u5206\u5757\u540e\u8be2\u95ee\u7684\u5de6\u7aef\u70b9\u6240\u5904\u7684\u5757\u7684\u7f16\u53f7\u5c06\u5f71\u54cd\u4e4b\u540e\u7684\u64cd\u4f5c\uff09 \u5f52\u7eb3\u4e00\u4e0b\uff0c\u53ea\u8981\u5f53\u524d\u533a\u95f4 \\([l, r]\\) \u7684\u7b54\u6848\u53ef\u4ee5\u4ee5 \\(\\text{O}(1)\\) \u7684\u590d\u6742\u5ea6\u6269\u5c55\u5230\u76f8\u90bb\u7684\u533a\u95f4 \\([l,r-1],[l,r+1],[l-1,r],[l+1,r]\\) \uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u4f7f\u7528\u5206\u5757\u7684\u601d\u60f3\uff0c\u4f18\u5316\u66b4\u529b\u6269\u5c55\u7684\u8fc7\u7a0b\uff0c\u51cf\u5c11\u79fb\u52a8\u7684\u603b\u8ddd\u79bb\u4ee5\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u4e0b\u9762\u7ed9\u51fa\u4e00\u4efd\u6a21\u677f\u5e76\u505a\u89e3\u91ca\u8bf4\u660e\uff1a Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 int n , m , unit ; // unit \u662f\u5757\u957f\uff0c\u4e00\u822c\u53d6\u6839\u53f7 n\u3002 int a [ si ]; struct Query { int l , r , id ; bool operator < ( const Query & b ) const { if (( l / unit ) != ( b . l / unit )) return l < b . l ; // \u8fd9\u91cc\u548c\u5199 (l / unit) < (b.l / unit) \u662f\u7b49\u4ef7\u7684\u3002 return r < b . r ; } } ask [ si ]; int ans , res [ si ]; // \u5b9e\u65f6\u7684\u7b54\u6848\uff0c\u6bcf\u4e2a\u8be2\u95ee\u7684\u7b54\u6848 inline void add ( int pos ) {} // \u52a0\u4e0a pos \u8fd9\u4e2a\u4f4d\u7f6e\u4e4b\u540e\uff0c\u7b54\u6848 ans \u4f1a\u5982\u4f55\u53d8\u5316 inline void sub ( int pos ) {} // \u5220\u6389 pos \u8fd9\u4e2a\u4f4d\u7f6e\u4e4b\u540e\uff0c\u7b54\u6848 ans \u4f1a\u5982\u4f55\u53d8\u5316 int main (){ cin >> n >> m , unit = sqrt ( n ); for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; for ( int i = 1 ; i <= m ; ++ i ) cin >> ask [ i ]. l >> ask [ i ]. r , ask [ i ]. id = i ; sort ( ask + 1 , ask + 1 + m ); int l = 1 , r = 0 ; // \u7ef4\u62a4\u7b54\u6848\u662f\u95ed\u533a\u95f4 [l, r] \u65f6\u7684\u5199\u6cd5\u3002 for ( int i = 1 ; i <= m ; ++ i ) { Query & q = ask [ i ]; while ( l > q . l ) add ( -- l ); while ( r < q . r ) add ( ++ r ); while ( l < q . l ) sub ( l ++ ); while ( r > q . r ) sub ( r -- ); // \u8fd9\u91cc\u7684\u79fb\u52a8\u987a\u5e8f\u662f\u6709\u8bb2\u7a76\u7684\uff0c\u4e0d\u80fd\u4e71\u641e\u3002 res [ q . id ] = ans ; } for ( int i = 1 ; i <= m ; ++ i ) cout << res [ i ] << endl ; return 0 ; } Warning \u6b64\u5904\u7ef4\u62a4\u7684\u662f \u95ed\u533a\u95f4 \uff0c\u6240\u4ee5\u521d\u59cb\u503c\u4e3a l = 1, r = 0 \u3002 \u6211\u79fb\u52a8\u6307\u9488\u7684\u5199\u6cd5\u662f\u6bd4\u8f83\u6807\u51c6\u7684\u4e00\u79cd\uff0c\u4e0d\u80fd\u4e71\u6539\uff0c\u5177\u4f53\u4e3a\u4ec0\u4e48\u4e0b\u9762\u4f1a\u8bf4\u3002 \u5173\u4e8e\u6307\u9488\u79fb\u52a8\u7684\u987a\u5e8f OI-wiki \u4e0a\u63d0\u5230\u4e86\u6240\u6709\u7684\u53ef\u80fd\u79fb\u52a8\u65b9\u5f0f\uff0c\u5e76\u5217\u51fa\u4e86\u54ea\u4e00\u4e9b\u662f\u6b63\u786e\u7684\uff0c\u54ea\u4e00\u4e9b\u662f\u9519\u8bef\u7684\u3002 \u6211\u4f7f\u7528\u7684\u662f --l, ++r, l++, r-- \u3002 \u8fd9\u548c\u5176\u5b83\u6b63\u786e\u505a\u6cd5\u7684\u5171\u540c\u70b9\u662f\uff0c\u5168\u90e8\u90fd\u662f\u5148\u6269\u5927\u533a\u95f4\uff0c\u7136\u540e\u518d\u5c06 \\(l,r\\) \u7f29\u5c0f\u5230\u4e0b\u4e00\u4e2a\u8be2\u95ee\u7684\u533a\u95f4 \\([l\\prime,r\\prime]\\) \u3002 \u8fd9\u6837\u53ef\u4ee5\u9632\u6b62 \\(l > r + 1\\) \u7684\u60c5\u51b5\u51fa\u73b0\uff0c\u5982\u679c\u8fd9\u79cd\u60c5\u51b5\u51fa\u73b0\uff0c\u90a3\u4e48\u5c31\u4f1a\u6709\u4e00\u4e2a\u5143\u7d20\u88ab\u52a0\u5165\u7684\u6b21\u6570\u662f\u8d1f\u6570\uff0c\u8fd9\u662f\u4e0d\u5408\u6cd5\u7684\u3002 \u4e3a\u4ec0\u4e48\u6709 ++ \u548c -- \u7684\u533a\u522b \u524d\u4e24\u6b21\u6269\u5c55\u662f\u6269\u5927\u533a\u95f4\uff0c\u4f1a\u8ba9\u626b\u5230\u7684\u5143\u7d20\u88ab\u52a0\u5165\u3002 \u800c \\(l, r\\) \u672c\u6765\u5728\u7684\u4f4d\u7f6e\u662f\u5df2\u7ecf\u88ab\u52a0\u5165\u8fc7\u7684\uff0c\u6240\u4ee5\u8981\u5148\u76f4\u63a5\u79fb\u52a8\u6307\u9488\u4e4b\u540e\u518d\u52a0\u5165 \\(l - 1\\) \u548c \\(r + 1\\) \uff0c\u5e94\u5f53\u5199 --l, ++r \u3002 \u540e\u4e24\u6b21\u6269\u5c55\u662f\u7f29\u5c0f\u533a\u95f4\uff0c\u4f1a\u8ba9\u626b\u5230\u7684\u5143\u7d20\u88ab\u8e22\u51fa\u3002 \u800c \\(l, r\\) \u672c\u6765\u5728\u7684\u4f4d\u7f6e\u662f\u5df2\u7ecf\u88ab\u52a0\u5165\u8fc7\u7684\uff0c\u6240\u4ee5\u9700\u8981\u5148\u8e22\u51fa \\(l, r\\) \u518d\u79fb\u52a8\u6307\u9488\uff0c\u5e94\u5f53\u5199 l++, r-- \u3002 \u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(\\text{O}(n\\sqrt{n})\\) \u7684\uff08\u5047\u8bbe \\(n,m\\) \u540c\u9636\uff09\uff0c \u5177\u4f53\u8bc1\u660e\u6211\u662f\u4e0d\u4f1a\u7684\uff08\u6240\u4ee5\u8fd9\u91cc\u6458\u6284\u4e86 OI-wiki \u7684\u8bc1\u660e\u3002 Proof & Analysis \u4ee5\u4e0b\u7684\u60c5\u51b5\u5728 \\(n\\) \u548c \\(m\\) \u540c\u9636\u7684\u524d\u63d0\u4e0b\u8ba8\u8bba\u3002 \u9996\u5148\u662f\u5206\u5757\u8fd9\u4e00\u6b65\uff0c\u8fd9\u4e00\u6b65\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(\\sqrt{n}\\cdot\\sqrt{n}\\log\\sqrt{n}+n\\log n)=O(n\\log n)\\) ; \u63a5\u7740\u5c31\u5230\u4e86\u83ab\u961f\u7b97\u6cd5\u7684\u7cbe\u9ad3\u4e86\uff0c\u4e0b\u9762\u6211\u4eec\u7528\u901a\u4fd7\u6613\u61c2\u7684\u521d\u4e2d\u65b9\u6cd5\u6765\u8bc1\u660e\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(n\\sqrt{n})\\) \uff1b \u8bc1\uff1a\u4ee4\u6bcf\u4e00\u5757\u4e2d \\(L\\) \u7684\u6700\u5927\u503c\u4e3a \\(\\max_1,\\max_2,\\max_3, \\cdots , \\max_{\\lceil\\sqrt{n}\\rceil}\\) \u3002 \u7531\u7b2c\u4e00\u6b21\u6392\u5e8f\u53ef\u77e5\uff0c \\(\\max_1 \\le \\max_2 \\le \\cdots \\le \\max_{\\lceil\\sqrt{n}\\rceil}\\) \u3002 \u663e\u7136\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u5757\u66b4\u529b\u6c42\u51fa\u7b2c\u4e00\u4e2a\u8be2\u95ee\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u3002 \u8003\u8651\u6700\u574f\u7684\u60c5\u51b5\uff0c\u5728\u6bcf\u4e00\u5757\u4e2d\uff0c \\(R\\) \u7684\u6700\u5927\u503c\u5747\u4e3a \\(n\\) \uff0c\u6bcf\u6b21\u4fee\u6539\u64cd\u4f5c\u5747\u8981\u5c06 \\(L\\) \u7531 \\(\\max_{i - 1}\\) \u4fee\u6539\u81f3 \\(\\max_i\\) \u6216\u7531 \\(\\max_i\\) \u4fee\u6539\u81f3 \\(\\max_{i - 1}\\) \u3002 \u8003\u8651 \\(R\\) \uff1a\u56e0\u4e3a \\(R\\) \u5728\u5757\u4e2d\u5df2\u7ecf\u6392\u597d\u5e8f\uff0c\u6240\u4ee5\u5728\u540c\u4e00\u5757\u4fee\u6539\u5b8c\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u3002\u5bf9\u4e8e\u6240\u6709\u5757\u5c31\u662f \\(O(n\\sqrt{n})\\) \u3002 \u91cd\u70b9\u5206\u6790 \\(L\\) \uff1a\u56e0\u4e3a\u6bcf\u4e00\u6b21\u6539\u53d8\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f \\(O(\\max_i-\\max_{i-1})\\) \u7684\uff0c\u6240\u4ee5\u5728\u540c\u4e00\u5757\u4e2d\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(\\sqrt{n}\\ cdot(\\max_i-\\max_{i-1}))\\) \u3002 \u5c06\u6bcf\u4e00\u5757 \\(L\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5408\u5728\u4e00\u8d77\uff0c\u53ef\u4ee5\u5f97\u5230\uff1a \u5bf9\u4e8e \\(L\\) \u7684\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\[ \\begin{aligned} & O(\\sqrt{n}(\\max{}_1-1)+\\sqrt{n}(\\max{}_2-\\max{}_1)+\\sqrt{n}(\\max{}_3-\\max{}_2)+\\cdots+\\sqrt{n}(\\ max{}_{\\lceil\\sqrt{n}\\rceil}-\\max{}_{\\lceil\\sqrt{n}\\rceil-1))} \\\\ = & O(\\sqrt{n}\\cdot(\\max{}_1-1+\\max{}_2-\\max{}_1+\\max{}_3-\\max{}_2+\\cdots+\\max{}_{\\lceil\\sqrt{n}\\ rceil-1}-\\max{}_{\\lceil\\sqrt{n}\\rceil-2}+\\max{}_{\\lceil\\sqrt{n}\\rceil}-\\max{}_{\\lceil\\sqrt{n}\\rceil- 1)}) \\\\ = & O(\\sqrt{n}\\cdot(\\max{}_{\\lceil\\sqrt{n}\\rceil-1}))\\\\ \\end{aligned} \\] \uff08\u88c2\u9879\u6c42\u548c\uff09 \u7531\u9898\u53ef\u77e5 \\(\\max_{\\lceil\\sqrt{n}\\rceil}\\) \u6700\u5927\u4e3a \\(n\\) \uff0c\u6240\u4ee5 \\(L\\) \u7684\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u574f\u60c5\u51b5\u4e0b\u4e3a \\(O(n\\sqrt{n})\\) \u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u83ab\u961f\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n\\sqrt{n})\\) \uff1b \u4f46\u662f\u5bf9\u4e8e \\(m\\) \u7684\u5176\u4ed6\u53d6\u503c\uff0c\u5982 \\(m<n\\) \uff0c\u5206\u5757\u65b9\u5f0f\u9700\u8981\u6539\u53d8\u624d\u80fd\u53d8\u7684\u66f4\u4f18\u3002 \u600e\u4e48\u5206\u5757\u5462\uff1f \u6211\u4eec\u8bbe\u5757\u957f\u5ea6\u4e3a \\(S\\) \uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f\u591a\u4e2a\u5728\u540c\u4e00\u5757\u5185\u7684\u8be2\u95ee\uff0c\u632a\u52a8\u7684\u8ddd\u79bb\u5c31\u662f \\(n\\) \uff0c\u4e00\u5171 \\(\\displaystyle \\frac{n}{S}\\) \u4e2a\u5757\uff0c\u79fb\u52a8\u7684\u603b\u6b21\u6570\u5c31\u662f \\(\\displaystyle \\frac{n^2}{S}\\) \uff0c\u79fb\u52a8\u53ef\u80fd\u8de8\u8d8a\u5757\uff0c\u6240\u4ee5\u8fd8\u8981\u52a0\u4e0a\u4e00\u4e2a \\(mS\\) \u7684\u590d\u6742\u5ea6\uff0c\u603b\u590d\u6742\u5ea6\u4e3a \\(\\displaystyle O\\left(\\frac{n^2}{S}+mS\\right)\\) \uff0c\u6211\u4eec\u8981\u8ba9\u8fd9\u4e2a\u503c\u5c3d\u91cf\u5c0f\uff0c\u90a3\u4e48\u5c31\u8981\u5c06\u8fd9\u4e24\u4e2a\u9879\u5c3d\u91cf\u76f8\u7b49\uff0c\u53d1\u73b0 \\(S\\) \u53d6 \\(\\displaystyle \\frac{n}{\\sqrt{m}}\\) \u662f\u6700\u4f18\u7684\uff0c\u6b64\u65f6\u590d\u6742\u5ea6\u4e3a \\(\\displaystyle O\\left(\\frac{n^2}{\\displaystyle \\frac{n}{\\sqrt{m}}}+m\\left(\\frac{n }{\\sqrt{m}}\\right)\\right)=O(n\\sqrt{m})\\) \u3002 \u4e8b\u5b9e\u4e0a\uff0c\u5982\u679c\u5757\u957f\u5ea6\u7684\u8bbe\u5b9a\u4e0d\u51c6\u786e\uff0c\u5219\u83ab\u961f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u53d7\u5230\u5f88\u5927\u5f71\u54cd\u3002\u4f8b\u5982\uff0c\u5982\u679c \\(m\\) \u4e0e \\(\\sqrt n\\) \u540c\u9636\uff0c\u5e76\u4e14\u5757\u957f\u8bef\u8bbe\u4e3a \\(\\sqrt n\\) \uff0c\u5219\u53ef\u4ee5\u5f88\u5bb9\u6613\u6784\u9020\u51fa\u4e00\u7ec4\u6570\u636e\u4f7f\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n \\sqrt n)\\) \u800c\u4e0d\u662f\u6b63\u786e\u7684 \\(O(n)\\) \u3002 \u83ab\u961f\u7b97\u6cd5\u770b\u8d77\u6765\u5341\u5206\u66b4\u529b\uff0c\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u56e0\u4e3a\u83ab\u961f\u7b97\u6cd5\u7684\u5206\u5757\u6392\u5e8f\u65b9\u6cd5\u770b\u8d77\u6765\u5f88\u7c97\u7cd9\u3002\u6211\u4eec\u4f1a\u60f3\u5230\u901a\u8fc7\u770b\u4e0a\u53bb\u66f4\u7cbe\u7ec6\u7684\u6392\u5e8f\u65b9\u6cd5\u5bf9\u6240\u6709 \u533a\u95f4\u6392\u5e8f\u3002\u4e00\u79cd\u65b9\u6cd5\u662f\u628a\u6240\u6709\u533a\u95f4 \\([l, r]\\) \u770b\u6210\u5e73\u9762\u4e0a\u7684\u70b9 \\((l, r)\\) \uff0c\u5e76\u5bf9\u6240\u6709\u70b9\u5efa\u7acb\u66fc\u54c8\u987f\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6bcf\u6b21\u6cbf\u7740\u66fc\u54c8\u987f\u6700\u5c0f \u751f\u6210\u6811\u7684\u8fb9\u5728\u8be2\u95ee\u4e4b\u95f4\u8f6c\u79fb\u7b54\u6848\u3002\u8fd9\u6837\u770b\u8d77\u6765\u53ef\u4ee5\u6539\u5584\u83ab\u961f\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u5bf9\u8be2\u95ee\u5206\u5757\u6392\u5e8f\u7684\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u754c\u5df2 \u7ecf\u662f\u6700\u4f18\u7684\u4e86\u3002 \u5047\u8bbe \\(n, m\\) \u540c\u9636\u4e14 \\(n\\) \u662f\u5b8c\u5168\u5e73\u65b9\u6570\u3002\u6211\u4eec\u8003\u8651\u5f62\u5982 \\([a \\sqrt n, b \\sqrt n](1 \\le a, b \\le \\sqrt n)\\) \u7684\u533a\u95f4\uff0c\u8fd9\u6837\u7684\u533a\u95f4\u4e00\u5171\u6709 \\(n\\) \u4e2a\u3002\u5982\u679c\u628a\u6240\u6709\u7684\u533a\u95f4\u770b\u6210\u5e73\u9762\u4e0a\u7684\u70b9\uff0c\u5219\u4e24\u70b9\u4e4b\u95f4\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u6070\u597d\u4e3a\u4e24\u533a\u95f4\u7684\u8f6c\u79fb\u4ee3\u4ef7\uff0c\u5e76\u4e14\u4efb \u610f\u4e24\u4e2a\u533a\u95f4\u4e4b\u95f4\u7684\u6700\u5c0f\u66fc\u54c8\u987f\u8ddd\u79bb\u4e3a \\(\\sqrt n\\) \uff0c\u6240\u4ee5\u5904\u7406\u6240\u6709\u8be2\u95ee\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u5c0f\u4e3a \\(O(n \\sqrt n)\\) \u3002\u5176\u5b83\u60c5\u51b5\u7684\u6570\u636e\u6784\u9020\u65b9\u6cd5\u4e0e\u4e4b\u7c7b\u4f3c\u3002 \u83ab\u961f\u7b97\u6cd5\u8fd8\u6709\u4e00\u4e2a\u7279\u70b9\uff1a\u5f53 \\(n\\) \u4e0d\u53d8\u65f6\uff0c \\(m\\) \u8d8a\u5927\uff0c\u5904\u7406\u6bcf\u6b21\u8be2\u95ee\u7684\u5e73\u5747\u8f6c\u79fb\u4ee3\u4ef7\u5c31\u8d8a\u5c0f\u3002\u4e00\u4e9b\u5176\u4ed6\u7684\u79bb\u7ebf\u7b97\u6cd5\u4e5f\u5177\u6709\u540c\u6837\u7684\u7279\u70b9\uff08\u5982\u6c42 LCA \u7684 Tarjan \u7b97\u6cd5\uff09\uff0c\u4f46\u662f\u83ab\u961f\u7b97\u6cd5\u7684\u5e73\u5747\u8f6c\u79fb\u4ee3\u4ef7\u968f \\(m\\) \u7684\u53d8\u5316\u6700\u660e\u663e\u3002 \u5947\u5076\u6027\u4f18\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6ca1\u6709\u4f18\u5316\u7684\u83ab\u961f\u7684\u6307\u9488\u79fb\u52a8\u53ef\u80fd\u662f\u8fd9\u6837\u7684\uff08\u611f\u6027\u7406\u89e3\uff09\uff1a 1 2 3 4 ----------------------->| |<-----------| |--o-------o-----> o \u662f\u6211\u4eec\u5f53\u524d\u6240\u8ba8\u8bba\u7684\u8be2\u95ee\u5de6\u53f3\u7aef\u70b9\u3002 \u7136\u540e\u5728\u7b2c\u4e09\u6b21\u79fb\u8fc7\u6765\u7684\u65f6\u5019\u624d\u4f1a\u66f4\u65b0\u7b54\u6848\u3002 \u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u7684\u539f\u56e0\u662f\uff0c\u5f53\u591a\u4e2a\u8be2\u95ee\u7684\u53f3\u7aef\u70b9\u4e0d\u5728\u540c\u4e00\u5757\u65f6\uff0c \\(r\\) \u6307\u9488\u9700\u8981\u591a\u6b21\u5f80\u8fd4\u79fb\u52a8\uff0c\u591a\u8d70\u4e86\u5f88\u591a\u4e0d\u5fc5\u8981\u7684\u8def\u7a0b\u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\uff0c\u5bf9\u4e8e\u7f16\u53f7\u4e3a\u5947\u6570\u7684\u5757\uff0c\u5757\u5185\u6309 \\(r\\) \u5347\u5e8f\u6392\u5e8f\uff0c\u7f16\u53f7\u4e3a\u5076\u6570\u7684\u5757\uff0c\u5757\u5185\u6309 \\(r\\) \u964d\u5e8f\u6392\u5e8f\u3002 \u753b\u56fe\u5c31\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u6837\u53bb\u6389\u4e86\u5f88\u591a\u4e0d\u5fc5\u8981\u7684\u8def\u7a0b \u6bd4\u5982\u4e0a\u9762\u7684\u8fd9\u4e2a\u56fe\uff0c\u672c\u6765\u5728\u7b2c\u4e09\u6b21\u626b\u8fc7\u6211\u4eec\u6240\u8ba8\u8bba\u7684\u8be2\u95ee\u65f6\u624d\u66f4\u65b0\u7684\u7b54\u6848\uff0c\u5230\u7b2c\u4e8c\u6b21\u626b\u8fc7\u6765\u5c31\u66f4\u65b0\u4e86\u3002 1 2 ----------------------->| |<-o-------o-| \u5b9e\u6d4b\u8dd1\u7684\u98de\u5feb\uff0c\u53ef\u4ee5\u4f18\u5316 \\(30\\% \\sim 35\\%\\) \u7684\u901f\u5ea6\u3002 \u5b9e\u73b0 1 2 3 4 5 6 7 bool operator < ( const Query & b ) const { if (( l / unit ) != ( b . l / unit )) return l < b . l ; if (( l / unit ) & 1 ) return r < b . r ; return r > b . r ; } // \u5947\u5076\u6027\u4f18\u5316\u7684\u5199\u6cd5 \u4f8b\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7528\u4e24\u9053\u677f\u5b50\u9898\u770b\u4e00\u770b\u83ab\u961f\u7684\u5177\u4f53\u5b9e\u73b0\u548c\u4e00\u4e9b\u7ec6\u8282\u3002 20220429 C \u7ec4\u6a21\u62df\u8d5b T3 \u03c8(\uff40\u2207\u00b4)\u03c8 \u9898\u76ee\u63cf\u8ff0 \u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u957f\u5ea6\u4e3a \\(n\\) \uff0c \\(q\\) \u6b21\u8be2\u95ee\u3002 \u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a\u533a\u95f4 \\([l,r]\\) \uff0c\u6c42\u8fd9\u4e2a\u533a\u95f4\u91cc\u51fa\u73b0\u6b21\u6570\u4e3a\u5947\u6570\u7684\u6570\u7684\u4e2a\u6570\u3002 \\(n,q\\le 10^5, |a_i| \\le 10^9\\) \u3002 \u9898\u89e3 \u83ab\u961f\u677f\u5b50\uff0c\u751a\u81f3\u6bd4\u5c0f Z \u7684\u889c\u5b50\u8fd8\u677f\u5b50\u3002 \u8003\u8651\u76f4\u63a5\u83ab\u961f\uff0c\u95ee\u9898\u5728\u4e8e\u5982\u4f55\u8bb0\u5f55\u8d21\u732e/\u7b54\u6848\u7684\u53d8\u5316\u3002 \u5148\u79bb\u6563\u5316 \\(a_i\\) \u65b9\u4fbf\u7edf\u8ba1\u3002 \u5f00\u4e00\u4e2a\u53d8\u91cf \\(ans\\) \uff0c\u8bb0\u5f55\u5b9e\u65f6\u7684\u7b54\u6848\uff0c\u53e6\u5916\u5f00\u4e00\u4e2a\u6570\u7ec4 \\(cnt[i]\\) \u8bb0\u5f55\u6bcf\u4e00\u4e2a\u6570\u7684\u51fa\u73b0\u6b21\u6570\u3002 \u5982\u679c\u53d8\u52a8 \\(cnt[i]\\) \u4e4b\u540e\uff0c \\(cnt[i]\\) \u53d8\u4e3a\u5947\u6570\uff0c \\(ans+1\\) \uff0c\u53cd\u4e4b \\(ans-1\\) \u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 #include <cmath> #include <bitset> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int si = 1e5 + 10 ; int n , Q , unit ; int a [ si ]; struct Query { int l , r , id ; bool operator < ( const Query & b ) const { if (( l / unit ) != ( b . l / unit )) return l < b . l ; if (( l / unit ) & 1 ) return r < b . r ; return r > b . r ; } } ask [ si ]; int cnt [ si ]; int res [ si ], ans = 0 ; inline void add ( int pos ) { cnt [ a [ pos ]] ++ ; if ( cnt [ a [ pos ]] & 1 ) ans ++ ; else ans -- ; } inline void sub ( int pos ) { cnt [ a [ pos ]] -- ; if ( cnt [ a [ pos ]] & 1 ) ans ++ ; else ans -- ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); std :: vector < int > v ; v . clear (); cin >> n , unit = sqrt ( n ); for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], v . emplace_back ( a [ i ]); sort ( v . begin (), v . end ()), v . erase ( unique ( v . begin (), v . end ()), v . end ()); for ( int i = 1 ; i <= n ; ++ i ) a [ i ] = lower_bound ( v . begin (), v . end (), a [ i ]) - v . begin (); cin >> Q ; for ( int i = 1 ; i <= Q ; ++ i ) cin >> ask [ i ]. l >> ask [ i ]. r , ask [ i ]. id = i ; sort ( ask + 1 , ask + 1 + Q ); int l = 1 , r = 0 ; for ( int i = 1 ; i <= Q ; ++ i ) { Query & q = ask [ i ]; while ( l > q . l ) add ( -- l ); while ( r < q . r ) add ( ++ r ); while ( l < q . l ) sub ( l ++ ); while ( r > q . r ) sub ( r -- ); res [ q . id ] = ans ; } for ( int i = 1 ; i <= Q ; ++ i ) cout << res [ i ] << endl ; return 0 ; } [\u56fd\u5bb6\u96c6\u8bad\u961f] \u5c0f Z \u7684\u889c\u5b50 \u03c8(\uff40\u2207\u00b4)\u03c8 \u9898\u76ee\u63cf\u8ff0 \u4f5c\u4e3a\u4e00\u4e2a\u751f\u6d3b\u6563\u6f2b\u7684\u4eba\uff0c\u5c0f Z \u6bcf\u5929\u65e9\u4e0a\u90fd\u8981\u8017\u8d39\u5f88\u4e45\u4ece\u4e00\u5806\u4e94\u989c\u516d\u8272\u7684\u889c\u5b50\u4e2d\u627e\u51fa\u4e00\u53cc\u6765\u7a7f\u3002\u7ec8\u4e8e\u6709\u4e00\u5929\uff0c\u5c0f Z \u518d\u4e5f\u65e0\u6cd5\u5fcd\u53d7\u8fd9\u607c\u4eba\u7684\u627e\u889c\u5b50\u8fc7\u7a0b\uff0c\u4e8e\u662f\u4ed6\u51b3\u5b9a\u542c\u5929\u7531\u547d\u2026\u2026 \u5177\u4f53\u6765\u8bf4\uff0c\u5c0f Z \u628a\u8fd9 \\(N\\) \u53ea\u889c\u5b50\u4ece \\(1\\) \u5230 \\(N\\) \u7f16\u53f7\uff0c\u7136\u540e\u4ece\u7f16\u53f7 \\(L\\) \u5230 \\(R\\) \u7684\u6240\u6709\u889c\u5b50\u4e2d\u62bd\u51fa\u4e24\u53ea\u3002 \u5c3d\u7ba1\u5c0f Z \u5e76\u4e0d\u5728\u610f\u4e24\u53ea\u889c\u5b50\u662f\u4e0d\u662f\u5b8c\u6574\u7684\u4e00\u53cc\uff0c\u751a\u81f3\u4e0d\u5728\u610f\u4e24\u53ea\u889c\u5b50\u662f\u5426\u4e00\u5de6\u4e00\u53f3\uff0c\u4ed6\u5374\u5f88\u5728\u610f\u889c\u5b50\u7684\u989c\u8272\uff0c\u6bd5\u7adf\u7a7f\u4e24\u53ea\u4e0d\u540c\u8272\u7684\u889c\u5b50\u4f1a\u5f88\u5c34\u5c2c\u3002 \u4f60\u7684\u4efb\u52a1\u4fbf\u662f\u544a\u8bc9\u5c0f Z\uff0c\u4ed6\u6709\u591a\u5927\u7684\u6982\u7387\u62bd\u5230\u4e24\u53ea\u989c\u8272\u76f8\u540c\u7684\u889c\u5b50\u3002\u5f53\u7136\uff0c\u5c0f Z \u5e0c\u671b\u8fd9\u4e2a\u6982\u7387\u5c3d\u91cf\u9ad8\uff0c\u6240\u4ee5\u4ed6\u53ef\u80fd\u4f1a\u8be2\u95ee\u591a\u4e2a \\([L,R]\\) \u4ee5\u65b9\u4fbf\u81ea\u5df1\u9009\u62e9\u3002 \u7136\u800c\u6570\u636e\u4e2d\u6709 \\(L=R\\) \u7684\u60c5\u51b5\uff0c\u8bf7\u7279\u5224\u8fd9\u79cd\u60c5\u51b5\uff0c\u8f93\u51fa 0/1 \u3002 \u9898\u89e3 \u53ef\u4ee5\u7b97\u7684\u4e0a\u83ab\u961f\u7684\u8d77\u6e90\u9898\u76ee\u3002 \u8003\u8651\u4e00\u4e2a\u533a\u95f4 \\([l,r]\\) \u7684\u7b54\u6848\u5e94\u5f53\u662f\u4ec0\u4e48\uff1a \u65b9\u6848\u6570\u4e00\u5171\u6709 \\(\\text{C}^{2}_{r - l + 1} = \\dfrac{(r-l+1)\\times(r-l)}{2}\\) \u79cd\u3002 \u800c\u5047\u8bbe\u8fd9\u4e2a\u533a\u95f4\u91cc\u989c\u8272 \\(c\\) \u7684\u889c\u5b50\u6709 \\(num[c]\\) \u79cd\uff0c\u6bcf\u79cd\u989c\u8272\u7684\u7b54\u6848\u5c31\u662f \\(\\text{C}^{2}_{num[c]} = \\dfrac{num[c]\\times(num[c]-1)}{2}\\) \u79cd\u3002 \u6240\u4ee5\u80fd\u62bd\u5230\u540c\u8272\u7684\u603b\u65b9\u6848\u6570\u662f \\(\\sum_c \\dfrac{num[c]\\times(num[c]-1)}{2}\\) \u79cd\u3002 \u90a3\u4e48\u4e00\u4e2a\u533a\u95f4\u7684\u7b54\u6848\u5c31\u662f \\(\\dfrac{\\sum_c \\dfrac{num[c]\\times(num[c]-1)}{2}}{\\dfrac{(r-l+1)\\times(r-l)}{2}}\\) \u3002 \u9898\u76ee\u8981\u6c42\u7ea6\u5206\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u8bb0\u5f55\u5b83\u7684\u5206\u5b50\u548c\u5206\u6bcd\uff0c\u6700\u540e\u7ea6\u5206\u5373\u53ef\uff0c\u9898\u76ee\u8981\u6c42\u7684 \\(L = R\\) \u7684\u60c5\u51b5\u4e5f\u9700\u8981\u7279\u5224\uff0c\u539f\u56e0\u663e\u7136\u3002 \u90a3\u4e48\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u662f\u53ef\u4ee5 \\(\\text{O}(1)\\) \u8f6c\u79fb\u5230\u76f8\u90bb\u533a\u95f4\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u83ab\u961f\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const i64 si = 5e4 + 10 ; i64 n , m , unit ; i64 c [ si ], cnt [ si ]; struct Query { i64 l , r , id ; bool operator < ( const Query & b ) const { if (( l / unit ) != ( b . l / unit )) return l < b . l ; if (( l / unit ) & 1 ) return r < b . r ; return r > b . r ; } } ask [ si ]; i64 sum = 0 ; i64 nume [ si ], deno [ si ]; i64 gcd ( i64 a , i64 b ) { return b ? gcd ( b , a % b ) : a ; } void add ( i64 pos ) { i64 now = c [ pos ]; sum -= ( cnt [ now ] * ( cnt [ now ] - 1 )) / 2 ; cnt [ now ] ++ ; sum += ( cnt [ now ] * ( cnt [ now ] - 1 )) / 2 ; } void sub ( i64 pos ) { i64 now = c [ pos ]; sum -= ( cnt [ now ] * ( cnt [ now ] - 1 )) / 2 ; cnt [ now ] -- ; sum += ( cnt [ now ] * ( cnt [ now ] - 1 )) / 2 ; } // \u66f4\u65b0\u7b54\u6848\u628a\u539f\u6765\u7684\u51cf\u53bb\uff0c\u7136\u540e\u52a0\u4e0a\u65b0\u7684\u5373\u53ef\u3002 int main () { // freopen(\"1.in\", \"r\", stdin); // freopen(\"1.ans\", \"w\", stdout); cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); memset ( cnt , 0 , sizeof cnt ); cin >> n >> m , unit = sqrt ( n ); for ( int i = 1 ; i <= n ; ++ i ) cin >> c [ i ]; for ( int i = 1 ; i <= m ; ++ i ) cin >> ask [ i ]. l >> ask [ i ]. r , ask [ i ]. id = i ; sort ( ask + 1 , ask + 1 + m ); i64 l = 1 , r = 0 ; for ( int i = 1 ; i <= m ; ++ i ) { Query & q = ask [ i ]; if ( q . l == q . r ) { nume [ q . id ] = 0 , deno [ q . id ] = 1 ; continue ; } while ( l > q . l ) add ( -- l ); while ( r < q . r ) add ( ++ r ); while ( l < q . l ) sub ( l ++ ); while ( r > q . r ) sub ( r -- ); nume [ q . id ] = sum , deno [ q . id ] = ( r - l + 1 ) * ( r - l ) / 2 ; if ( sum == 0 ) deno [ q . id ] = 1l l ; } for ( int i = 1 ; i <= m ; ++ i ) { if ( nume [ i ] != 0 ) { i64 com = gcd ( nume [ i ], deno [ i ]); nume [ i ] /= com , deno [ i ] /= com ; } cout << nume [ i ] << \"/\" << deno [ i ] << endl ; } return 0 ; }","title":"\u666e\u901a\u83ab\u961f"},{"location":"algor/misc/mo/#_1","text":"\u8fd9\u7c7b\u95ee\u9898\u7684\u7279\u70b9\u90fd\u662f\uff0c\u4e00\u822c\u4e0d\u5177\u6709\u533a\u95f4\u7684\u53ef\u52a0\u53ef\u51cf\u6027\uff0c\u4e14\u8f83\u96be\u5408\u5e76\u7b54\u6848\u3002 \u8fd9\u4e5f\u5bfc\u81f4\u7ebf\u6bb5\u6811\u548c\u6811\u72b6\u6570\u7ec4\u7b49\u7b97\u6cd5\u5f88\u96be\u5904\u7406\u8fd9\u4e9b\u8be2\u95ee\u3002 \u6240\u4ee5\u6700\u65e9\u5728 codeforces \u4e0a\u51fa\u73b0\u7c7b\u4f3c\u7684\u95ee\u9898\u65f6\uff0c\u9ad8\u624b\u4eec\u60f3\u5230\u4e86\u4f7f\u7528\u5206\u5757\u7684\u601d\u60f3\u3002 \u5e76\u4e14\u8fd9\u7c7b\u95ee\u9898\u662f\u79bb\u7ebf\u4e0d\u5e26\u4fee\u7684\uff0c\u6240\u4ee5\u4ed6\u4eec\u5c31\u60f3\u5230\u4e86\u5bf9\u8be2\u95ee\u8fdb\u884c\u5206\u5757\u3002","title":"\u6cdb\u5316"},{"location":"algor/misc/mo/#_2","text":"\u4e3b\u8981\u7684\u4e09\u4e2a\u601d\u60f3\u662f\uff1a \u5c06\u8be2\u95ee\u79bb\u7ebf\u4e0b\u6765\u3002 \u5c06\u8be2\u95ee\u5206\u5757\u3002 \u7136\u540e\u6309\u7167\u5de6\u7aef\u70b9\u6240\u5728\u7684\u5757\u7684\u7f16\u53f7\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u53f3\u7aef\u70b9\u7684\u4f4d\u7f6e\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u6392\u5e8f\u3002 \u6392\u5e8f\u540e\uff0c\u5f53\u524d\u8be2\u95ee\u7b54\u6848\u5c06\u5728\u4e0a\u4e00\u4e2a\u8be2\u95ee\u7684\u57fa\u7840\u4e0a\u5f97\u5230\uff0c\u65b9\u5f0f\u662f\u66b4\u529b\u79fb\u52a8\u5de6\u53f3\u7aef\u70b9\uff0c\u8ba1\u7b97\u53d8\u5316\u7684\u8d21\u732e\u3002 \uff08\u5b9e\u9645\u4e0a\u8fd8\u662f\u5bf9\u5e8f\u5217\u8fdb\u884c\u5206\u5757\uff0c\u4e0d\u8fc7\u5206\u5757\u540e\u8be2\u95ee\u7684\u5de6\u7aef\u70b9\u6240\u5904\u7684\u5757\u7684\u7f16\u53f7\u5c06\u5f71\u54cd\u4e4b\u540e\u7684\u64cd\u4f5c\uff09 \u5f52\u7eb3\u4e00\u4e0b\uff0c\u53ea\u8981\u5f53\u524d\u533a\u95f4 \\([l, r]\\) \u7684\u7b54\u6848\u53ef\u4ee5\u4ee5 \\(\\text{O}(1)\\) \u7684\u590d\u6742\u5ea6\u6269\u5c55\u5230\u76f8\u90bb\u7684\u533a\u95f4 \\([l,r-1],[l,r+1],[l-1,r],[l+1,r]\\) \uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u4f7f\u7528\u5206\u5757\u7684\u601d\u60f3\uff0c\u4f18\u5316\u66b4\u529b\u6269\u5c55\u7684\u8fc7\u7a0b\uff0c\u51cf\u5c11\u79fb\u52a8\u7684\u603b\u8ddd\u79bb\u4ee5\u964d\u4f4e\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u4e0b\u9762\u7ed9\u51fa\u4e00\u4efd\u6a21\u677f\u5e76\u505a\u89e3\u91ca\u8bf4\u660e\uff1a Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 int n , m , unit ; // unit \u662f\u5757\u957f\uff0c\u4e00\u822c\u53d6\u6839\u53f7 n\u3002 int a [ si ]; struct Query { int l , r , id ; bool operator < ( const Query & b ) const { if (( l / unit ) != ( b . l / unit )) return l < b . l ; // \u8fd9\u91cc\u548c\u5199 (l / unit) < (b.l / unit) \u662f\u7b49\u4ef7\u7684\u3002 return r < b . r ; } } ask [ si ]; int ans , res [ si ]; // \u5b9e\u65f6\u7684\u7b54\u6848\uff0c\u6bcf\u4e2a\u8be2\u95ee\u7684\u7b54\u6848 inline void add ( int pos ) {} // \u52a0\u4e0a pos \u8fd9\u4e2a\u4f4d\u7f6e\u4e4b\u540e\uff0c\u7b54\u6848 ans \u4f1a\u5982\u4f55\u53d8\u5316 inline void sub ( int pos ) {} // \u5220\u6389 pos \u8fd9\u4e2a\u4f4d\u7f6e\u4e4b\u540e\uff0c\u7b54\u6848 ans \u4f1a\u5982\u4f55\u53d8\u5316 int main (){ cin >> n >> m , unit = sqrt ( n ); for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; for ( int i = 1 ; i <= m ; ++ i ) cin >> ask [ i ]. l >> ask [ i ]. r , ask [ i ]. id = i ; sort ( ask + 1 , ask + 1 + m ); int l = 1 , r = 0 ; // \u7ef4\u62a4\u7b54\u6848\u662f\u95ed\u533a\u95f4 [l, r] \u65f6\u7684\u5199\u6cd5\u3002 for ( int i = 1 ; i <= m ; ++ i ) { Query & q = ask [ i ]; while ( l > q . l ) add ( -- l ); while ( r < q . r ) add ( ++ r ); while ( l < q . l ) sub ( l ++ ); while ( r > q . r ) sub ( r -- ); // \u8fd9\u91cc\u7684\u79fb\u52a8\u987a\u5e8f\u662f\u6709\u8bb2\u7a76\u7684\uff0c\u4e0d\u80fd\u4e71\u641e\u3002 res [ q . id ] = ans ; } for ( int i = 1 ; i <= m ; ++ i ) cout << res [ i ] << endl ; return 0 ; } Warning \u6b64\u5904\u7ef4\u62a4\u7684\u662f \u95ed\u533a\u95f4 \uff0c\u6240\u4ee5\u521d\u59cb\u503c\u4e3a l = 1, r = 0 \u3002 \u6211\u79fb\u52a8\u6307\u9488\u7684\u5199\u6cd5\u662f\u6bd4\u8f83\u6807\u51c6\u7684\u4e00\u79cd\uff0c\u4e0d\u80fd\u4e71\u6539\uff0c\u5177\u4f53\u4e3a\u4ec0\u4e48\u4e0b\u9762\u4f1a\u8bf4\u3002 \u5173\u4e8e\u6307\u9488\u79fb\u52a8\u7684\u987a\u5e8f OI-wiki \u4e0a\u63d0\u5230\u4e86\u6240\u6709\u7684\u53ef\u80fd\u79fb\u52a8\u65b9\u5f0f\uff0c\u5e76\u5217\u51fa\u4e86\u54ea\u4e00\u4e9b\u662f\u6b63\u786e\u7684\uff0c\u54ea\u4e00\u4e9b\u662f\u9519\u8bef\u7684\u3002 \u6211\u4f7f\u7528\u7684\u662f --l, ++r, l++, r-- \u3002 \u8fd9\u548c\u5176\u5b83\u6b63\u786e\u505a\u6cd5\u7684\u5171\u540c\u70b9\u662f\uff0c\u5168\u90e8\u90fd\u662f\u5148\u6269\u5927\u533a\u95f4\uff0c\u7136\u540e\u518d\u5c06 \\(l,r\\) \u7f29\u5c0f\u5230\u4e0b\u4e00\u4e2a\u8be2\u95ee\u7684\u533a\u95f4 \\([l\\prime,r\\prime]\\) \u3002 \u8fd9\u6837\u53ef\u4ee5\u9632\u6b62 \\(l > r + 1\\) \u7684\u60c5\u51b5\u51fa\u73b0\uff0c\u5982\u679c\u8fd9\u79cd\u60c5\u51b5\u51fa\u73b0\uff0c\u90a3\u4e48\u5c31\u4f1a\u6709\u4e00\u4e2a\u5143\u7d20\u88ab\u52a0\u5165\u7684\u6b21\u6570\u662f\u8d1f\u6570\uff0c\u8fd9\u662f\u4e0d\u5408\u6cd5\u7684\u3002 \u4e3a\u4ec0\u4e48\u6709 ++ \u548c -- \u7684\u533a\u522b \u524d\u4e24\u6b21\u6269\u5c55\u662f\u6269\u5927\u533a\u95f4\uff0c\u4f1a\u8ba9\u626b\u5230\u7684\u5143\u7d20\u88ab\u52a0\u5165\u3002 \u800c \\(l, r\\) \u672c\u6765\u5728\u7684\u4f4d\u7f6e\u662f\u5df2\u7ecf\u88ab\u52a0\u5165\u8fc7\u7684\uff0c\u6240\u4ee5\u8981\u5148\u76f4\u63a5\u79fb\u52a8\u6307\u9488\u4e4b\u540e\u518d\u52a0\u5165 \\(l - 1\\) \u548c \\(r + 1\\) \uff0c\u5e94\u5f53\u5199 --l, ++r \u3002 \u540e\u4e24\u6b21\u6269\u5c55\u662f\u7f29\u5c0f\u533a\u95f4\uff0c\u4f1a\u8ba9\u626b\u5230\u7684\u5143\u7d20\u88ab\u8e22\u51fa\u3002 \u800c \\(l, r\\) \u672c\u6765\u5728\u7684\u4f4d\u7f6e\u662f\u5df2\u7ecf\u88ab\u52a0\u5165\u8fc7\u7684\uff0c\u6240\u4ee5\u9700\u8981\u5148\u8e22\u51fa \\(l, r\\) \u518d\u79fb\u52a8\u6307\u9488\uff0c\u5e94\u5f53\u5199 l++, r-- \u3002 \u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(\\text{O}(n\\sqrt{n})\\) \u7684\uff08\u5047\u8bbe \\(n,m\\) \u540c\u9636\uff09\uff0c \u5177\u4f53\u8bc1\u660e\u6211\u662f\u4e0d\u4f1a\u7684\uff08\u6240\u4ee5\u8fd9\u91cc\u6458\u6284\u4e86 OI-wiki \u7684\u8bc1\u660e\u3002 Proof & Analysis \u4ee5\u4e0b\u7684\u60c5\u51b5\u5728 \\(n\\) \u548c \\(m\\) \u540c\u9636\u7684\u524d\u63d0\u4e0b\u8ba8\u8bba\u3002 \u9996\u5148\u662f\u5206\u5757\u8fd9\u4e00\u6b65\uff0c\u8fd9\u4e00\u6b65\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(\\sqrt{n}\\cdot\\sqrt{n}\\log\\sqrt{n}+n\\log n)=O(n\\log n)\\) ; \u63a5\u7740\u5c31\u5230\u4e86\u83ab\u961f\u7b97\u6cd5\u7684\u7cbe\u9ad3\u4e86\uff0c\u4e0b\u9762\u6211\u4eec\u7528\u901a\u4fd7\u6613\u61c2\u7684\u521d\u4e2d\u65b9\u6cd5\u6765\u8bc1\u660e\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(n\\sqrt{n})\\) \uff1b \u8bc1\uff1a\u4ee4\u6bcf\u4e00\u5757\u4e2d \\(L\\) \u7684\u6700\u5927\u503c\u4e3a \\(\\max_1,\\max_2,\\max_3, \\cdots , \\max_{\\lceil\\sqrt{n}\\rceil}\\) \u3002 \u7531\u7b2c\u4e00\u6b21\u6392\u5e8f\u53ef\u77e5\uff0c \\(\\max_1 \\le \\max_2 \\le \\cdots \\le \\max_{\\lceil\\sqrt{n}\\rceil}\\) \u3002 \u663e\u7136\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u5757\u66b4\u529b\u6c42\u51fa\u7b2c\u4e00\u4e2a\u8be2\u95ee\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u3002 \u8003\u8651\u6700\u574f\u7684\u60c5\u51b5\uff0c\u5728\u6bcf\u4e00\u5757\u4e2d\uff0c \\(R\\) \u7684\u6700\u5927\u503c\u5747\u4e3a \\(n\\) \uff0c\u6bcf\u6b21\u4fee\u6539\u64cd\u4f5c\u5747\u8981\u5c06 \\(L\\) \u7531 \\(\\max_{i - 1}\\) \u4fee\u6539\u81f3 \\(\\max_i\\) \u6216\u7531 \\(\\max_i\\) \u4fee\u6539\u81f3 \\(\\max_{i - 1}\\) \u3002 \u8003\u8651 \\(R\\) \uff1a\u56e0\u4e3a \\(R\\) \u5728\u5757\u4e2d\u5df2\u7ecf\u6392\u597d\u5e8f\uff0c\u6240\u4ee5\u5728\u540c\u4e00\u5757\u4fee\u6539\u5b8c\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u3002\u5bf9\u4e8e\u6240\u6709\u5757\u5c31\u662f \\(O(n\\sqrt{n})\\) \u3002 \u91cd\u70b9\u5206\u6790 \\(L\\) \uff1a\u56e0\u4e3a\u6bcf\u4e00\u6b21\u6539\u53d8\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f \\(O(\\max_i-\\max_{i-1})\\) \u7684\uff0c\u6240\u4ee5\u5728\u540c\u4e00\u5757\u4e2d\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(\\sqrt{n}\\ cdot(\\max_i-\\max_{i-1}))\\) \u3002 \u5c06\u6bcf\u4e00\u5757 \\(L\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5408\u5728\u4e00\u8d77\uff0c\u53ef\u4ee5\u5f97\u5230\uff1a \u5bf9\u4e8e \\(L\\) \u7684\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\[ \\begin{aligned} & O(\\sqrt{n}(\\max{}_1-1)+\\sqrt{n}(\\max{}_2-\\max{}_1)+\\sqrt{n}(\\max{}_3-\\max{}_2)+\\cdots+\\sqrt{n}(\\ max{}_{\\lceil\\sqrt{n}\\rceil}-\\max{}_{\\lceil\\sqrt{n}\\rceil-1))} \\\\ = & O(\\sqrt{n}\\cdot(\\max{}_1-1+\\max{}_2-\\max{}_1+\\max{}_3-\\max{}_2+\\cdots+\\max{}_{\\lceil\\sqrt{n}\\ rceil-1}-\\max{}_{\\lceil\\sqrt{n}\\rceil-2}+\\max{}_{\\lceil\\sqrt{n}\\rceil}-\\max{}_{\\lceil\\sqrt{n}\\rceil- 1)}) \\\\ = & O(\\sqrt{n}\\cdot(\\max{}_{\\lceil\\sqrt{n}\\rceil-1}))\\\\ \\end{aligned} \\] \uff08\u88c2\u9879\u6c42\u548c\uff09 \u7531\u9898\u53ef\u77e5 \\(\\max_{\\lceil\\sqrt{n}\\rceil}\\) \u6700\u5927\u4e3a \\(n\\) \uff0c\u6240\u4ee5 \\(L\\) \u7684\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u574f\u60c5\u51b5\u4e0b\u4e3a \\(O(n\\sqrt{n})\\) \u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u83ab\u961f\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n\\sqrt{n})\\) \uff1b \u4f46\u662f\u5bf9\u4e8e \\(m\\) \u7684\u5176\u4ed6\u53d6\u503c\uff0c\u5982 \\(m<n\\) \uff0c\u5206\u5757\u65b9\u5f0f\u9700\u8981\u6539\u53d8\u624d\u80fd\u53d8\u7684\u66f4\u4f18\u3002 \u600e\u4e48\u5206\u5757\u5462\uff1f \u6211\u4eec\u8bbe\u5757\u957f\u5ea6\u4e3a \\(S\\) \uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f\u591a\u4e2a\u5728\u540c\u4e00\u5757\u5185\u7684\u8be2\u95ee\uff0c\u632a\u52a8\u7684\u8ddd\u79bb\u5c31\u662f \\(n\\) \uff0c\u4e00\u5171 \\(\\displaystyle \\frac{n}{S}\\) \u4e2a\u5757\uff0c\u79fb\u52a8\u7684\u603b\u6b21\u6570\u5c31\u662f \\(\\displaystyle \\frac{n^2}{S}\\) \uff0c\u79fb\u52a8\u53ef\u80fd\u8de8\u8d8a\u5757\uff0c\u6240\u4ee5\u8fd8\u8981\u52a0\u4e0a\u4e00\u4e2a \\(mS\\) \u7684\u590d\u6742\u5ea6\uff0c\u603b\u590d\u6742\u5ea6\u4e3a \\(\\displaystyle O\\left(\\frac{n^2}{S}+mS\\right)\\) \uff0c\u6211\u4eec\u8981\u8ba9\u8fd9\u4e2a\u503c\u5c3d\u91cf\u5c0f\uff0c\u90a3\u4e48\u5c31\u8981\u5c06\u8fd9\u4e24\u4e2a\u9879\u5c3d\u91cf\u76f8\u7b49\uff0c\u53d1\u73b0 \\(S\\) \u53d6 \\(\\displaystyle \\frac{n}{\\sqrt{m}}\\) \u662f\u6700\u4f18\u7684\uff0c\u6b64\u65f6\u590d\u6742\u5ea6\u4e3a \\(\\displaystyle O\\left(\\frac{n^2}{\\displaystyle \\frac{n}{\\sqrt{m}}}+m\\left(\\frac{n }{\\sqrt{m}}\\right)\\right)=O(n\\sqrt{m})\\) \u3002 \u4e8b\u5b9e\u4e0a\uff0c\u5982\u679c\u5757\u957f\u5ea6\u7684\u8bbe\u5b9a\u4e0d\u51c6\u786e\uff0c\u5219\u83ab\u961f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u53d7\u5230\u5f88\u5927\u5f71\u54cd\u3002\u4f8b\u5982\uff0c\u5982\u679c \\(m\\) \u4e0e \\(\\sqrt n\\) \u540c\u9636\uff0c\u5e76\u4e14\u5757\u957f\u8bef\u8bbe\u4e3a \\(\\sqrt n\\) \uff0c\u5219\u53ef\u4ee5\u5f88\u5bb9\u6613\u6784\u9020\u51fa\u4e00\u7ec4\u6570\u636e\u4f7f\u5176\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n \\sqrt n)\\) \u800c\u4e0d\u662f\u6b63\u786e\u7684 \\(O(n)\\) \u3002 \u83ab\u961f\u7b97\u6cd5\u770b\u8d77\u6765\u5341\u5206\u66b4\u529b\uff0c\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u56e0\u4e3a\u83ab\u961f\u7b97\u6cd5\u7684\u5206\u5757\u6392\u5e8f\u65b9\u6cd5\u770b\u8d77\u6765\u5f88\u7c97\u7cd9\u3002\u6211\u4eec\u4f1a\u60f3\u5230\u901a\u8fc7\u770b\u4e0a\u53bb\u66f4\u7cbe\u7ec6\u7684\u6392\u5e8f\u65b9\u6cd5\u5bf9\u6240\u6709 \u533a\u95f4\u6392\u5e8f\u3002\u4e00\u79cd\u65b9\u6cd5\u662f\u628a\u6240\u6709\u533a\u95f4 \\([l, r]\\) \u770b\u6210\u5e73\u9762\u4e0a\u7684\u70b9 \\((l, r)\\) \uff0c\u5e76\u5bf9\u6240\u6709\u70b9\u5efa\u7acb\u66fc\u54c8\u987f\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6bcf\u6b21\u6cbf\u7740\u66fc\u54c8\u987f\u6700\u5c0f \u751f\u6210\u6811\u7684\u8fb9\u5728\u8be2\u95ee\u4e4b\u95f4\u8f6c\u79fb\u7b54\u6848\u3002\u8fd9\u6837\u770b\u8d77\u6765\u53ef\u4ee5\u6539\u5584\u83ab\u961f\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u5bf9\u8be2\u95ee\u5206\u5757\u6392\u5e8f\u7684\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0a\u754c\u5df2 \u7ecf\u662f\u6700\u4f18\u7684\u4e86\u3002 \u5047\u8bbe \\(n, m\\) \u540c\u9636\u4e14 \\(n\\) \u662f\u5b8c\u5168\u5e73\u65b9\u6570\u3002\u6211\u4eec\u8003\u8651\u5f62\u5982 \\([a \\sqrt n, b \\sqrt n](1 \\le a, b \\le \\sqrt n)\\) \u7684\u533a\u95f4\uff0c\u8fd9\u6837\u7684\u533a\u95f4\u4e00\u5171\u6709 \\(n\\) \u4e2a\u3002\u5982\u679c\u628a\u6240\u6709\u7684\u533a\u95f4\u770b\u6210\u5e73\u9762\u4e0a\u7684\u70b9\uff0c\u5219\u4e24\u70b9\u4e4b\u95f4\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u6070\u597d\u4e3a\u4e24\u533a\u95f4\u7684\u8f6c\u79fb\u4ee3\u4ef7\uff0c\u5e76\u4e14\u4efb \u610f\u4e24\u4e2a\u533a\u95f4\u4e4b\u95f4\u7684\u6700\u5c0f\u66fc\u54c8\u987f\u8ddd\u79bb\u4e3a \\(\\sqrt n\\) \uff0c\u6240\u4ee5\u5904\u7406\u6240\u6709\u8be2\u95ee\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u5c0f\u4e3a \\(O(n \\sqrt n)\\) \u3002\u5176\u5b83\u60c5\u51b5\u7684\u6570\u636e\u6784\u9020\u65b9\u6cd5\u4e0e\u4e4b\u7c7b\u4f3c\u3002 \u83ab\u961f\u7b97\u6cd5\u8fd8\u6709\u4e00\u4e2a\u7279\u70b9\uff1a\u5f53 \\(n\\) \u4e0d\u53d8\u65f6\uff0c \\(m\\) \u8d8a\u5927\uff0c\u5904\u7406\u6bcf\u6b21\u8be2\u95ee\u7684\u5e73\u5747\u8f6c\u79fb\u4ee3\u4ef7\u5c31\u8d8a\u5c0f\u3002\u4e00\u4e9b\u5176\u4ed6\u7684\u79bb\u7ebf\u7b97\u6cd5\u4e5f\u5177\u6709\u540c\u6837\u7684\u7279\u70b9\uff08\u5982\u6c42 LCA \u7684 Tarjan \u7b97\u6cd5\uff09\uff0c\u4f46\u662f\u83ab\u961f\u7b97\u6cd5\u7684\u5e73\u5747\u8f6c\u79fb\u4ee3\u4ef7\u968f \\(m\\) \u7684\u53d8\u5316\u6700\u660e\u663e\u3002","title":"\u5e94\u7528"},{"location":"algor/misc/mo/#_3","text":"\u6ca1\u6709\u4f18\u5316\u7684\u83ab\u961f\u7684\u6307\u9488\u79fb\u52a8\u53ef\u80fd\u662f\u8fd9\u6837\u7684\uff08\u611f\u6027\u7406\u89e3\uff09\uff1a 1 2 3 4 ----------------------->| |<-----------| |--o-------o-----> o \u662f\u6211\u4eec\u5f53\u524d\u6240\u8ba8\u8bba\u7684\u8be2\u95ee\u5de6\u53f3\u7aef\u70b9\u3002 \u7136\u540e\u5728\u7b2c\u4e09\u6b21\u79fb\u8fc7\u6765\u7684\u65f6\u5019\u624d\u4f1a\u66f4\u65b0\u7b54\u6848\u3002 \u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u7684\u539f\u56e0\u662f\uff0c\u5f53\u591a\u4e2a\u8be2\u95ee\u7684\u53f3\u7aef\u70b9\u4e0d\u5728\u540c\u4e00\u5757\u65f6\uff0c \\(r\\) \u6307\u9488\u9700\u8981\u591a\u6b21\u5f80\u8fd4\u79fb\u52a8\uff0c\u591a\u8d70\u4e86\u5f88\u591a\u4e0d\u5fc5\u8981\u7684\u8def\u7a0b\u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\uff0c\u5bf9\u4e8e\u7f16\u53f7\u4e3a\u5947\u6570\u7684\u5757\uff0c\u5757\u5185\u6309 \\(r\\) \u5347\u5e8f\u6392\u5e8f\uff0c\u7f16\u53f7\u4e3a\u5076\u6570\u7684\u5757\uff0c\u5757\u5185\u6309 \\(r\\) \u964d\u5e8f\u6392\u5e8f\u3002 \u753b\u56fe\u5c31\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u6837\u53bb\u6389\u4e86\u5f88\u591a\u4e0d\u5fc5\u8981\u7684\u8def\u7a0b \u6bd4\u5982\u4e0a\u9762\u7684\u8fd9\u4e2a\u56fe\uff0c\u672c\u6765\u5728\u7b2c\u4e09\u6b21\u626b\u8fc7\u6211\u4eec\u6240\u8ba8\u8bba\u7684\u8be2\u95ee\u65f6\u624d\u66f4\u65b0\u7684\u7b54\u6848\uff0c\u5230\u7b2c\u4e8c\u6b21\u626b\u8fc7\u6765\u5c31\u66f4\u65b0\u4e86\u3002 1 2 ----------------------->| |<-o-------o-| \u5b9e\u6d4b\u8dd1\u7684\u98de\u5feb\uff0c\u53ef\u4ee5\u4f18\u5316 \\(30\\% \\sim 35\\%\\) \u7684\u901f\u5ea6\u3002 \u5b9e\u73b0 1 2 3 4 5 6 7 bool operator < ( const Query & b ) const { if (( l / unit ) != ( b . l / unit )) return l < b . l ; if (( l / unit ) & 1 ) return r < b . r ; return r > b . r ; } // \u5947\u5076\u6027\u4f18\u5316\u7684\u5199\u6cd5","title":"\u5947\u5076\u6027\u4f18\u5316"},{"location":"algor/misc/mo/#_4","text":"\u7528\u4e24\u9053\u677f\u5b50\u9898\u770b\u4e00\u770b\u83ab\u961f\u7684\u5177\u4f53\u5b9e\u73b0\u548c\u4e00\u4e9b\u7ec6\u8282\u3002","title":"\u4f8b\u9898"},{"location":"algor/misc/mo/#20220429-c-t3","text":"\u9898\u76ee\u63cf\u8ff0 \u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u957f\u5ea6\u4e3a \\(n\\) \uff0c \\(q\\) \u6b21\u8be2\u95ee\u3002 \u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a\u533a\u95f4 \\([l,r]\\) \uff0c\u6c42\u8fd9\u4e2a\u533a\u95f4\u91cc\u51fa\u73b0\u6b21\u6570\u4e3a\u5947\u6570\u7684\u6570\u7684\u4e2a\u6570\u3002 \\(n,q\\le 10^5, |a_i| \\le 10^9\\) \u3002 \u9898\u89e3 \u83ab\u961f\u677f\u5b50\uff0c\u751a\u81f3\u6bd4\u5c0f Z \u7684\u889c\u5b50\u8fd8\u677f\u5b50\u3002 \u8003\u8651\u76f4\u63a5\u83ab\u961f\uff0c\u95ee\u9898\u5728\u4e8e\u5982\u4f55\u8bb0\u5f55\u8d21\u732e/\u7b54\u6848\u7684\u53d8\u5316\u3002 \u5148\u79bb\u6563\u5316 \\(a_i\\) \u65b9\u4fbf\u7edf\u8ba1\u3002 \u5f00\u4e00\u4e2a\u53d8\u91cf \\(ans\\) \uff0c\u8bb0\u5f55\u5b9e\u65f6\u7684\u7b54\u6848\uff0c\u53e6\u5916\u5f00\u4e00\u4e2a\u6570\u7ec4 \\(cnt[i]\\) \u8bb0\u5f55\u6bcf\u4e00\u4e2a\u6570\u7684\u51fa\u73b0\u6b21\u6570\u3002 \u5982\u679c\u53d8\u52a8 \\(cnt[i]\\) \u4e4b\u540e\uff0c \\(cnt[i]\\) \u53d8\u4e3a\u5947\u6570\uff0c \\(ans+1\\) \uff0c\u53cd\u4e4b \\(ans-1\\) \u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 #include <cmath> #include <bitset> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int si = 1e5 + 10 ; int n , Q , unit ; int a [ si ]; struct Query { int l , r , id ; bool operator < ( const Query & b ) const { if (( l / unit ) != ( b . l / unit )) return l < b . l ; if (( l / unit ) & 1 ) return r < b . r ; return r > b . r ; } } ask [ si ]; int cnt [ si ]; int res [ si ], ans = 0 ; inline void add ( int pos ) { cnt [ a [ pos ]] ++ ; if ( cnt [ a [ pos ]] & 1 ) ans ++ ; else ans -- ; } inline void sub ( int pos ) { cnt [ a [ pos ]] -- ; if ( cnt [ a [ pos ]] & 1 ) ans ++ ; else ans -- ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); std :: vector < int > v ; v . clear (); cin >> n , unit = sqrt ( n ); for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], v . emplace_back ( a [ i ]); sort ( v . begin (), v . end ()), v . erase ( unique ( v . begin (), v . end ()), v . end ()); for ( int i = 1 ; i <= n ; ++ i ) a [ i ] = lower_bound ( v . begin (), v . end (), a [ i ]) - v . begin (); cin >> Q ; for ( int i = 1 ; i <= Q ; ++ i ) cin >> ask [ i ]. l >> ask [ i ]. r , ask [ i ]. id = i ; sort ( ask + 1 , ask + 1 + Q ); int l = 1 , r = 0 ; for ( int i = 1 ; i <= Q ; ++ i ) { Query & q = ask [ i ]; while ( l > q . l ) add ( -- l ); while ( r < q . r ) add ( ++ r ); while ( l < q . l ) sub ( l ++ ); while ( r > q . r ) sub ( r -- ); res [ q . id ] = ans ; } for ( int i = 1 ; i <= Q ; ++ i ) cout << res [ i ] << endl ; return 0 ; }","title":"20220429 C \u7ec4\u6a21\u62df\u8d5b T3"},{"location":"algor/misc/mo/#z","text":"\u9898\u76ee\u63cf\u8ff0 \u4f5c\u4e3a\u4e00\u4e2a\u751f\u6d3b\u6563\u6f2b\u7684\u4eba\uff0c\u5c0f Z \u6bcf\u5929\u65e9\u4e0a\u90fd\u8981\u8017\u8d39\u5f88\u4e45\u4ece\u4e00\u5806\u4e94\u989c\u516d\u8272\u7684\u889c\u5b50\u4e2d\u627e\u51fa\u4e00\u53cc\u6765\u7a7f\u3002\u7ec8\u4e8e\u6709\u4e00\u5929\uff0c\u5c0f Z \u518d\u4e5f\u65e0\u6cd5\u5fcd\u53d7\u8fd9\u607c\u4eba\u7684\u627e\u889c\u5b50\u8fc7\u7a0b\uff0c\u4e8e\u662f\u4ed6\u51b3\u5b9a\u542c\u5929\u7531\u547d\u2026\u2026 \u5177\u4f53\u6765\u8bf4\uff0c\u5c0f Z \u628a\u8fd9 \\(N\\) \u53ea\u889c\u5b50\u4ece \\(1\\) \u5230 \\(N\\) \u7f16\u53f7\uff0c\u7136\u540e\u4ece\u7f16\u53f7 \\(L\\) \u5230 \\(R\\) \u7684\u6240\u6709\u889c\u5b50\u4e2d\u62bd\u51fa\u4e24\u53ea\u3002 \u5c3d\u7ba1\u5c0f Z \u5e76\u4e0d\u5728\u610f\u4e24\u53ea\u889c\u5b50\u662f\u4e0d\u662f\u5b8c\u6574\u7684\u4e00\u53cc\uff0c\u751a\u81f3\u4e0d\u5728\u610f\u4e24\u53ea\u889c\u5b50\u662f\u5426\u4e00\u5de6\u4e00\u53f3\uff0c\u4ed6\u5374\u5f88\u5728\u610f\u889c\u5b50\u7684\u989c\u8272\uff0c\u6bd5\u7adf\u7a7f\u4e24\u53ea\u4e0d\u540c\u8272\u7684\u889c\u5b50\u4f1a\u5f88\u5c34\u5c2c\u3002 \u4f60\u7684\u4efb\u52a1\u4fbf\u662f\u544a\u8bc9\u5c0f Z\uff0c\u4ed6\u6709\u591a\u5927\u7684\u6982\u7387\u62bd\u5230\u4e24\u53ea\u989c\u8272\u76f8\u540c\u7684\u889c\u5b50\u3002\u5f53\u7136\uff0c\u5c0f Z \u5e0c\u671b\u8fd9\u4e2a\u6982\u7387\u5c3d\u91cf\u9ad8\uff0c\u6240\u4ee5\u4ed6\u53ef\u80fd\u4f1a\u8be2\u95ee\u591a\u4e2a \\([L,R]\\) \u4ee5\u65b9\u4fbf\u81ea\u5df1\u9009\u62e9\u3002 \u7136\u800c\u6570\u636e\u4e2d\u6709 \\(L=R\\) \u7684\u60c5\u51b5\uff0c\u8bf7\u7279\u5224\u8fd9\u79cd\u60c5\u51b5\uff0c\u8f93\u51fa 0/1 \u3002 \u9898\u89e3 \u53ef\u4ee5\u7b97\u7684\u4e0a\u83ab\u961f\u7684\u8d77\u6e90\u9898\u76ee\u3002 \u8003\u8651\u4e00\u4e2a\u533a\u95f4 \\([l,r]\\) \u7684\u7b54\u6848\u5e94\u5f53\u662f\u4ec0\u4e48\uff1a \u65b9\u6848\u6570\u4e00\u5171\u6709 \\(\\text{C}^{2}_{r - l + 1} = \\dfrac{(r-l+1)\\times(r-l)}{2}\\) \u79cd\u3002 \u800c\u5047\u8bbe\u8fd9\u4e2a\u533a\u95f4\u91cc\u989c\u8272 \\(c\\) \u7684\u889c\u5b50\u6709 \\(num[c]\\) \u79cd\uff0c\u6bcf\u79cd\u989c\u8272\u7684\u7b54\u6848\u5c31\u662f \\(\\text{C}^{2}_{num[c]} = \\dfrac{num[c]\\times(num[c]-1)}{2}\\) \u79cd\u3002 \u6240\u4ee5\u80fd\u62bd\u5230\u540c\u8272\u7684\u603b\u65b9\u6848\u6570\u662f \\(\\sum_c \\dfrac{num[c]\\times(num[c]-1)}{2}\\) \u79cd\u3002 \u90a3\u4e48\u4e00\u4e2a\u533a\u95f4\u7684\u7b54\u6848\u5c31\u662f \\(\\dfrac{\\sum_c \\dfrac{num[c]\\times(num[c]-1)}{2}}{\\dfrac{(r-l+1)\\times(r-l)}{2}}\\) \u3002 \u9898\u76ee\u8981\u6c42\u7ea6\u5206\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u8bb0\u5f55\u5b83\u7684\u5206\u5b50\u548c\u5206\u6bcd\uff0c\u6700\u540e\u7ea6\u5206\u5373\u53ef\uff0c\u9898\u76ee\u8981\u6c42\u7684 \\(L = R\\) \u7684\u60c5\u51b5\u4e5f\u9700\u8981\u7279\u5224\uff0c\u539f\u56e0\u663e\u7136\u3002 \u90a3\u4e48\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u662f\u53ef\u4ee5 \\(\\text{O}(1)\\) \u8f6c\u79fb\u5230\u76f8\u90bb\u533a\u95f4\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u83ab\u961f\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const i64 si = 5e4 + 10 ; i64 n , m , unit ; i64 c [ si ], cnt [ si ]; struct Query { i64 l , r , id ; bool operator < ( const Query & b ) const { if (( l / unit ) != ( b . l / unit )) return l < b . l ; if (( l / unit ) & 1 ) return r < b . r ; return r > b . r ; } } ask [ si ]; i64 sum = 0 ; i64 nume [ si ], deno [ si ]; i64 gcd ( i64 a , i64 b ) { return b ? gcd ( b , a % b ) : a ; } void add ( i64 pos ) { i64 now = c [ pos ]; sum -= ( cnt [ now ] * ( cnt [ now ] - 1 )) / 2 ; cnt [ now ] ++ ; sum += ( cnt [ now ] * ( cnt [ now ] - 1 )) / 2 ; } void sub ( i64 pos ) { i64 now = c [ pos ]; sum -= ( cnt [ now ] * ( cnt [ now ] - 1 )) / 2 ; cnt [ now ] -- ; sum += ( cnt [ now ] * ( cnt [ now ] - 1 )) / 2 ; } // \u66f4\u65b0\u7b54\u6848\u628a\u539f\u6765\u7684\u51cf\u53bb\uff0c\u7136\u540e\u52a0\u4e0a\u65b0\u7684\u5373\u53ef\u3002 int main () { // freopen(\"1.in\", \"r\", stdin); // freopen(\"1.ans\", \"w\", stdout); cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); memset ( cnt , 0 , sizeof cnt ); cin >> n >> m , unit = sqrt ( n ); for ( int i = 1 ; i <= n ; ++ i ) cin >> c [ i ]; for ( int i = 1 ; i <= m ; ++ i ) cin >> ask [ i ]. l >> ask [ i ]. r , ask [ i ]. id = i ; sort ( ask + 1 , ask + 1 + m ); i64 l = 1 , r = 0 ; for ( int i = 1 ; i <= m ; ++ i ) { Query & q = ask [ i ]; if ( q . l == q . r ) { nume [ q . id ] = 0 , deno [ q . id ] = 1 ; continue ; } while ( l > q . l ) add ( -- l ); while ( r < q . r ) add ( ++ r ); while ( l < q . l ) sub ( l ++ ); while ( r > q . r ) sub ( r -- ); nume [ q . id ] = sum , deno [ q . id ] = ( r - l + 1 ) * ( r - l ) / 2 ; if ( sum == 0 ) deno [ q . id ] = 1l l ; } for ( int i = 1 ; i <= m ; ++ i ) { if ( nume [ i ] != 0 ) { i64 com = gcd ( nume [ i ], deno [ i ]); nume [ i ] /= com , deno [ i ] /= com ; } cout << nume [ i ] << \"/\" << deno [ i ] << endl ; } return 0 ; }","title":"[\u56fd\u5bb6\u96c6\u8bad\u961f] \u5c0f Z \u7684\u889c\u5b50"},{"location":"algor/misc/mt19937/","text":"\u6982\u8ff0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u88ab\u677e\u672c\u5148\u751f\u548c\u897f\u6751\u5148\u751f\u4e8e 1998 \u5e74\u8bbe\u8ba1\u51fa\u6765\u3002 \u662f\u4e00\u4e2a\u751f\u6210\u9ad8\u8d28\u91cf\uff0c\u5206\u5e03\u5747\u5300\u7684\u968f\u673a\u6570\u7684\u7b97\u6cd5\uff08\u867d\u7136\u5728 C++11 \u5f53\u4e2d\u662f\u4e00\u4e2a class\uff09 \u9996\u5148\u6211\u4eec\u53ef\u4ee5\u641e\u5230 rand() \u7684\u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 static unsigned long next = 1 ; /* RAND_MAX assumed to be 32767 */ int myrand ( void ) { next = next * 1103515245 + 12345 ; return (( unsigned )( next / 65536 ) % 32768 ); } void mysrand ( unsigned seed ) { next = seed ; } // \u5229\u7528\u7ebf\u6027\u540c\u540c\u4f59\u6cd5\u5b9e\u73b0 \u53d1\u73b0\u8fd9\u4e2a\u73a9\u610f\u513f\u7684\u5faa\u73af\u8282\u53ea\u6709 \\(32767\\) \u3002 \u4ec0\u4e48\u610f\u601d\uff1f \u5c31\u662f\u5728\u5f53\u4f60\u9700\u8981\u751f\u6210\u5f88\u5927\u7684\u968f\u673a\u6570\u7684\u65f6\u5019\uff08\u6bd4\u5982\u6a21\u62df\u9000\u706b\uff09\uff0c\u4ed6\u5f88\u5bb9\u6613\u751f\u6210\u7684\u65f6\u5019\u5faa\u73af\u51fa\u73b0\u67d0\u4e2a\u6570\u3002 \u56de\u6765\u770b mt19937\u3002 \u4e3a\u5565\u8981\u53eb mt19937 \u5462\uff1f \u56e0\u4e3a\u5b83\u7684\u5faa\u73af\u8282\u662f \\(2^{19937}-1\\) \uff0c\u4e5f\u5c31\u662f\u6885\u68ee\uff08mt\uff09\u6570\u3002 \u7528\u5b83\uff0c\u4f60\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e9b\u5f88\u6709\u8d28\u91cf\u7684\uff0c\u5206\u5e03\u5747\u5300\u7684\u968f\u673a\u6570\u3002 \u4f7f\u7528\u65b9\u5f0f \u03c8(\uff40\u2207\u00b4)\u03c8 \u7528\u6cd5\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include <random> #include <iostream> using namespace std ; int main (){ std :: random_device seedgen ; // \u975e\u786e\u5b9a\u7684\u5747\u5300\u968f\u673a\u4f4d\u751f\u6210\u5668 // \u5728\u71b5\u6c60\u8017\u5c3d\u4e4b\u524d\u975e\u5e38\u9ad8\u6548 // \u6240\u4ee5\u7528\u6765\u5f53\u79cd\u5b50\u751f\u6210\u5668 // NOIP \u8003\u573a\u6700\u597d\u4e0d\u7528\uff1f // \u8fd9\u4e2a\u4e1c\u897f\u4f3c\u4e4e\u5728 32bit \u4e0a\u4f1a\u5bc4\uff08\u751f\u6210\u540c\u6837\u7684\u6570\u636e\uff09\uff0c // \u4f46\u662f win\u4e0b\u7684 msys2 64bit \u6ca1\u6709\u4e8b\u60c5\uff0cNOI linux \u8fd8\u6ca1\u6709\u6d4b\u8bd5\u3002 std :: mt19937 Myrand ( seedgen ()); // \u81ea\u5b9a\u4e49\u4e00\u4e2a mt19937 \u7c7b\u578b\u7684\u751f\u6210\u5668 std :: uniform_int_distribution < long long > RangeInt ( 0 , 114514 ); // \u6307\u5b9a\u6574\u6570\u8303\u56f4 std :: uniform_real_distribution < long double > RangeReal ( 0.0 , 1919810.0 ); // \u6307\u5b9a\u5b9e\u6570\u8303\u56f4 cout << Myrand () << endl ; // \u6ca1\u6709\u8303\u56f4,\u4f46\u662f mt19937 \u662f 32 \u4f4d\u7684\uff0c\u6240\u4ee5\u4f1a\u5728 int \u4ee5\u5185\u3002 cout << RangeInt ( Myrand ) << endl ; // \u6709\u8303\u56f4\u7684\u5747\u5300\u6574\u6570 cout << RangeReal ( Myrand ) << endl ; // \u6709\u8303\u56f4\u7684\u5747\u5300\u5b9e\u6570 return 0 ; } \u8fd8\u6709\u4e00\u4e2a\u7528\u4e8e 64 \u4f4d\u6574\u6570\u7248\u7684 mt19937 \uff1a mt19937_64 \u7528\u6cd5\u4e00\u6837\uff0c\u590d\u6742\u5ea6\u5747\u644a \\(\\text{O}(1)\\) \u3002 \u9664\u4e86 mt19937 \uff0c <random> \u91cc\u9762\u8fd8\u6709\u5f88\u591a\u6709\u610f\u601d\u7684\u4e1c\u897f\uff0c\u53ef\u4ee5\u7ffb\u4e00\u7ffb cpp ref\uff0c\u6216\u8005\u5c0f\u6ce2\u7684\u6d1b\u8c37\u65e5\u62a5\u3002","title":"mt19937"},{"location":"algor/misc/mt19937/#_1","text":"\u88ab\u677e\u672c\u5148\u751f\u548c\u897f\u6751\u5148\u751f\u4e8e 1998 \u5e74\u8bbe\u8ba1\u51fa\u6765\u3002 \u662f\u4e00\u4e2a\u751f\u6210\u9ad8\u8d28\u91cf\uff0c\u5206\u5e03\u5747\u5300\u7684\u968f\u673a\u6570\u7684\u7b97\u6cd5\uff08\u867d\u7136\u5728 C++11 \u5f53\u4e2d\u662f\u4e00\u4e2a class\uff09 \u9996\u5148\u6211\u4eec\u53ef\u4ee5\u641e\u5230 rand() \u7684\u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 static unsigned long next = 1 ; /* RAND_MAX assumed to be 32767 */ int myrand ( void ) { next = next * 1103515245 + 12345 ; return (( unsigned )( next / 65536 ) % 32768 ); } void mysrand ( unsigned seed ) { next = seed ; } // \u5229\u7528\u7ebf\u6027\u540c\u540c\u4f59\u6cd5\u5b9e\u73b0 \u53d1\u73b0\u8fd9\u4e2a\u73a9\u610f\u513f\u7684\u5faa\u73af\u8282\u53ea\u6709 \\(32767\\) \u3002 \u4ec0\u4e48\u610f\u601d\uff1f \u5c31\u662f\u5728\u5f53\u4f60\u9700\u8981\u751f\u6210\u5f88\u5927\u7684\u968f\u673a\u6570\u7684\u65f6\u5019\uff08\u6bd4\u5982\u6a21\u62df\u9000\u706b\uff09\uff0c\u4ed6\u5f88\u5bb9\u6613\u751f\u6210\u7684\u65f6\u5019\u5faa\u73af\u51fa\u73b0\u67d0\u4e2a\u6570\u3002 \u56de\u6765\u770b mt19937\u3002 \u4e3a\u5565\u8981\u53eb mt19937 \u5462\uff1f \u56e0\u4e3a\u5b83\u7684\u5faa\u73af\u8282\u662f \\(2^{19937}-1\\) \uff0c\u4e5f\u5c31\u662f\u6885\u68ee\uff08mt\uff09\u6570\u3002 \u7528\u5b83\uff0c\u4f60\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e9b\u5f88\u6709\u8d28\u91cf\u7684\uff0c\u5206\u5e03\u5747\u5300\u7684\u968f\u673a\u6570\u3002","title":"\u6982\u8ff0"},{"location":"algor/misc/mt19937/#_2","text":"\u7528\u6cd5\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include <random> #include <iostream> using namespace std ; int main (){ std :: random_device seedgen ; // \u975e\u786e\u5b9a\u7684\u5747\u5300\u968f\u673a\u4f4d\u751f\u6210\u5668 // \u5728\u71b5\u6c60\u8017\u5c3d\u4e4b\u524d\u975e\u5e38\u9ad8\u6548 // \u6240\u4ee5\u7528\u6765\u5f53\u79cd\u5b50\u751f\u6210\u5668 // NOIP \u8003\u573a\u6700\u597d\u4e0d\u7528\uff1f // \u8fd9\u4e2a\u4e1c\u897f\u4f3c\u4e4e\u5728 32bit \u4e0a\u4f1a\u5bc4\uff08\u751f\u6210\u540c\u6837\u7684\u6570\u636e\uff09\uff0c // \u4f46\u662f win\u4e0b\u7684 msys2 64bit \u6ca1\u6709\u4e8b\u60c5\uff0cNOI linux \u8fd8\u6ca1\u6709\u6d4b\u8bd5\u3002 std :: mt19937 Myrand ( seedgen ()); // \u81ea\u5b9a\u4e49\u4e00\u4e2a mt19937 \u7c7b\u578b\u7684\u751f\u6210\u5668 std :: uniform_int_distribution < long long > RangeInt ( 0 , 114514 ); // \u6307\u5b9a\u6574\u6570\u8303\u56f4 std :: uniform_real_distribution < long double > RangeReal ( 0.0 , 1919810.0 ); // \u6307\u5b9a\u5b9e\u6570\u8303\u56f4 cout << Myrand () << endl ; // \u6ca1\u6709\u8303\u56f4,\u4f46\u662f mt19937 \u662f 32 \u4f4d\u7684\uff0c\u6240\u4ee5\u4f1a\u5728 int \u4ee5\u5185\u3002 cout << RangeInt ( Myrand ) << endl ; // \u6709\u8303\u56f4\u7684\u5747\u5300\u6574\u6570 cout << RangeReal ( Myrand ) << endl ; // \u6709\u8303\u56f4\u7684\u5747\u5300\u5b9e\u6570 return 0 ; } \u8fd8\u6709\u4e00\u4e2a\u7528\u4e8e 64 \u4f4d\u6574\u6570\u7248\u7684 mt19937 \uff1a mt19937_64 \u7528\u6cd5\u4e00\u6837\uff0c\u590d\u6742\u5ea6\u5747\u644a \\(\\text{O}(1)\\) \u3002 \u9664\u4e86 mt19937 \uff0c <random> \u91cc\u9762\u8fd8\u6709\u5f88\u591a\u6709\u610f\u601d\u7684\u4e1c\u897f\uff0c\u53ef\u4ee5\u7ffb\u4e00\u7ffb cpp ref\uff0c\u6216\u8005\u5c0f\u6ce2\u7684\u6d1b\u8c37\u65e5\u62a5\u3002","title":"\u4f7f\u7528\u65b9\u5f0f"},{"location":"algor/misc/simulate-anneal/","text":"\u6a21\u62df\u9000\u706b\u4ece\u7cbe\u901a\u5230\u5165\u571f \u03c8(\uff40\u2207\u00b4)\u03c8 \u7b80\u4ecb \u03c8(\uff40\u2207\u00b4)\u03c8 \u9996\u5148\u6211\u4eec\u9700\u8981\u77e5\u9053\u4e00\u79cd\u53eb\u722c\u5c71\u7b97\u6cd5\u7684\u4e1c\u897f\u3002 \u57fa\u672c\u601d\u8def\u5c31\u662f\u5728 \u5f53\u524d \u7684\u6700\u4f18\u89e3\u9644\u8fd1\u627e\u5230\u4e00\u4e2a\u65b0\u7684\u89e3\uff0c\u5982\u679c\u65b0\u7684\u89e3\u66f4\u4f18\u5219\u8f6c\u79fb\uff0c\u53cd\u4e4b\u4e0d\u53d8\u3002 \u4f60\u53d1\u73b0\u8fd9\u6837\u5b50\u5f88\u5bb9\u6613\u9677\u5165\u5c40\u90e8\u7684\u6700\u4f18\u89e3\u5f53\u4e2d\uff0c\u5e76\u4e14\u53ea\u80fd\u89e3\u51b3\u5355\u5cf0\u51fd\u6570\u7684\u60c5\u51b5\u3002 \u6240\u4ee5\u6211\u4eec\u4e3a\u4e86\u89e3\u51b3\u66f4\u5e7f\u6cdb\u7684\u591a\u5cf0\u51fd\u6570\u7684\u60c5\u51b5\uff0c\u9700\u8981\u5f15\u8fdb\u6a21\u62df\u9000\u706b\u8fd9\u4e2a\u7b97\u6cd5\u3002 \u722c\u5c71\u7b97\u6cd5\u5728\u627e\u5230\u5f53\u524d\u6700\u4f18\u89e3\u7684\u9644\u8fd1\u7684\u4e00\u4e2a\u975e\u6700\u4f18\u89e3\u7684\u65f6\u5019\uff0c\u4f1a\u628a\u5b83\u76f4\u63a5\u820d\u5f03\u6389\u3002 \u800c\u6a21\u62df\u9000\u706b\u5c31\u662f\u5728\u968f\u673a\u5316\u7684\u4e00\u4e2a\u6982\u7387\u4e0b\uff0c\u5148\u8f6c\u79fb\u5230\u8fd9\u4e2a\u975e\u6700\u4f18\u89e3\u4ee5\u8df3\u51fa\u5c40\u90e8\u6700\u4f18\u627e\u5230\u53ef\u80fd\u7684\u5168\u5c40\u6700\u4f18\u89e3\u7684\u4e00\u4e2a\u7b97\u6cd5\u3002 \u5e76\u4e14\u57fa\u4e8e\u91d1\u5c5e\u9000\u706b\u7684\u539f\u7406\uff0c\u5b83\u5982\u679c\u8df3\u51fa\u4e86\u5168\u5c40\u6700\u4f18\u89e3\uff0c\u5728\u6e29\u5ea6\u4e0d\u65ad\u4e0b\u964d\u7684\u65f6\u5019\uff0c\u6270\u52a8\u7684\u5e45\u5ea6\u8d8a\u6765\u8d8a\u5c0f\uff0c\u4e5f\u662f\u5927\u6982\u7387\u4f1a\u8df3\u56de\u6765\u7684\u3002 \u4e00\u822c\u6211\u4eec\u4f1a\u7528\u4e8e\u4e00\u4e9b\u65b9\u6848\u6570\u6781\u5927\u7684\uff0c\u6216\u8005\u662f\u6b63\u5e38\u7b97\u6cd5\u96be\u4ee5\u60f3\u5230\u7684\u9898\u5f53\u4e2d\u3002 \u5f53\u7136\u8003\u573a\u4e0a\u4e0d\u63a8\u8350\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u6bd5\u7adf\u662f\u4e2a\u968f\u673a\u5316\u7b97\u6cd5\uff08\u9664\u975e\u4f60\u5c31\u6ca1\u60f3\u8fc7\u6253\u6b63\u89e3\uff09\u3002 \u57fa\u672c\u539f\u7406 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5b83\u57fa\u4e8e\u4e00\u4e2a\u5de5\u4e1a\u4e0a\u7684\u70ed\u5904\u7406\u5de5\u827a\u2014\u2014\u91d1\u5c5e\u9000\u706b\uff0c\u4e5f\u53ef\u4ee5\u8bf4\u57fa\u4e8e\u70ed\u529b\u5b66\u539f\u7406\u3002 \u91d1\u5c5e\u9000\u706b\uff1a\u5c06\u91d1\u5c5e\u52a0\u70ed\u5230\u4e00\u5b9a\u6e29\u5ea6\uff0c\u4fdd\u6301\u8db3\u591f\u65f6\u95f4\uff0c\u7136\u540e\u4ee5\u9002\u5b9c\u901f\u5ea6\u51b7\u5374(\u901a\u5e38\u662f\u7f13\u6162\u51b7\u5374\uff0c\u6709\u65f6\u662f\u63a7\u5236\u51b7\u5374)\u7684\u4e00\u79cd\u91d1\u5c5e\u70ed\u5904\u7406\u5de5\u827a\u3002 \u6a21\u62df\u9000\u706b\u7684\u8fc7\u7a0b\u662f\u5728\u4e00\u4e2a\u80fd\u91cf\u51fd\u6570 \\(F\\) \u4e0a\u8fdb\u884c\u7684\uff0c\u6211\u4eec\u628a\u5b83\u653e\u5230\u4e8c\u7ef4\u7684\u5750\u6807\u7cfb\u4e0b\uff0c\u5c31\u76f8\u5f53\u4e8e\u4e00\u4e2a\u81ea\u53d8\u91cf\u4e3a\u7cfb\u7edf\u53d8\u91cf\uff0c\u56e0\u53d8\u91cf\u662f\u7cfb\u7edf\u80fd\u91cf\u7684\u4e00\u4e2a\u51fd\u6570\u3002 \u6211\u4eec\u8981\u6c42\u7684\u5c31\u662f\u8fd9\u4e2a\u591a\u5cf0\uff08\u8c37\uff09\u51fd\u6570 \\(F\\) \u7684\u6700\u503c\u3002 \u7cfb\u7edf\u53d8\u91cf\u53ef\u4ee5\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u53d8\u91cf \\(x\\) \uff0c\u4e5f\u53ef\u4ee5\u662f\u9898\u4e2d\u7ed9\u51fa\u7684\u6761\u4ef6\uff08\u6bd4\u5982 \\(x,y\\) \u5750\u6807\uff09\u7ec4\u6210\u7684\u4e00\u4e2a\u591a\u5143\u7ec4\uff0c\u5728\u4e0b\u6587\u6211\u4eec\u628a\u8fd9\u4e2a\u591a\u5143\u7ec4\uff08\u6216\u8005\u5355\u4e2a\u53d8\u91cf\uff09\u79f0\u4f5c \\(X\\) \u3002 \u8868\u793a\u89e3\u7684\u65f6\u5019\u4e5f\u4f9d\u65e7\u4f7f\u7528\u8fd9\u4e2a\u7cfb\u7edf\u53d8\u91cf \\(X\\) \u3002 \u90a3\u4e48\uff0c\u6a21\u62df\u9000\u706b\u6bcf\u6b21\u4f1a\u5728\u4e0a\u4e00\u4e2a\u88ab\u63a5\u53d7\u7684\u89e3 \\(X\\) \u7684\u57fa\u7840\u4e0a \u968f\u673a \u751f\u6210\u4e00\u4e2a\u65b0\u7684\u89e3 \\(X^\\prime\\) \uff0c \u8fd9\u4e2a\u65b0\u7684\u89e3\u548c \\(X\\) \u4ee5\u53ca\u5f53\u524d\u89e3\u7684\u7cfb\u7edf\u80fd\u91cf \\(F(X)\\) \u6709\u5173\u3002 \u5982\u679c \\(X^\\prime\\) \u66f4\u4f18\u79c0\u90a3\u4e48\u63a5\u53d7\u8fd9\u4e2a\u65b0\u6700\u4f18\u89e3\uff0c\u8bb0\u5f55\u5168\u5c40\u7b54\u6848\u3002 \u53cd\u4e4b\u4ee5\u4e00\u4e2a\u5173\u4e8e \\(F(X^\\prime)\\) \u548c\u6e29\u5ea6 \\(T\\) \u7684\u6982\u7387\u63a5\u53d7\u8fd9\u4e2a\u975e\u6700\u4f18\u89e3 \\(X^\\prime\\) \uff0c \\(T\\) \u5177\u4f53\u662f\u4ec0\u4e48\u4e0b\u6587\u4f1a\u63d0\u5230\u3002 \u5b9e\u73b0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6211\u4eec\u9700\u8981\u5148\u5b9a\u4e49\u51e0\u4e2a\u53d8\u91cf\u4ee5\u65b9\u4fbf\u63cf\u8ff0\uff1a \u5f53\u524d\u6e29\u5ea6 \\(T\\) \u3002 \u521d\u59cb\u6e29\u5ea6 \\(T_0\\) \uff0c\u4e00\u822c\u53d6\u4e00\u4e2a\u8f83\u5927\u7684\u6570\uff0c\u5927\u6982\u5728 \\([1000,5000]\\) \u8303\u56f4\u5185\u3002 \u6700\u7ec8\u6e29\u5ea6 \\(T_k\\) \uff0c\u4e00\u822c\u53d6\u4e00\u4e2a\u6781\u5c0f\u7684\u6b63\u6570\uff0c\u5927\u6982\u5728 \\([10^{-15},10^{-8}]\\) \u4e0a\u3002 \u964d\u6e29\u7cfb\u6570 \\(\\delta\\) \uff0c\u4e00\u822c\u53d6\u4e00\u4e2a\u5728 \\((0.985,0.997)\\) \u4e0a\u7684\u4e00\u4e2a\u6570\uff0c\u63a8\u8350 \\(0.995\\) \u3002 \u8ba1\u7b97\u7cfb\u7edf\u80fd\u91cf \u03c8(\uff40\u2207\u00b4)\u03c8 \u5199\u8ba1\u7b97\u7cfb\u7edf\u80fd\u91cf\u7684\u51fd\u6570\u5c31\u76f8\u5f53\u4e8e\u5199\u51fa \\(F(X)\\) \u7684\u8868\u8fbe\u5f0f\u3002 \u6211\u4eec\u9700\u8981\u6839\u636e\u9898\u76ee\u6240\u7ed9\u7684\u6761\u4ef6 \\(X\\) \u8ba1\u7b97\u51fa\u5728\u89e3\u4e3a \\(X\\) \u7684\u65f6\u5019\u7684\u7cfb\u7edf\u80fd\u91cf \\(F(X)\\) \u3002 \u4e3e\u4e00\u4e2a\u6bd4\u8f83\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5047\u8bbe \\(X\\) \u5c31\u4ee3\u8868\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u5f53\u4e2d\u7684 \\(x\\) \u5750\u6807\u3002 \\(F(X)\\) \u5219\u662f\u4e00\u4e2a\u4e8c\u6b21\u51fd\u6570 \\(y=Ax^2+Bx+C\\) \u3002 \u90a3\u4e48\u4f60\u8ba1\u7b97\u7cfb\u7edf\u80fd\u91cf\u7684\u51fd\u6570 \\(F(X)\\) \u5c31\u53ea\u9700\u8981\u8fd4\u56de \\(AX^2+BX+C\\) \u5373\u53ef\u3002 \u66f4\u591a\u7684\u5b9e\u4f8b\u4f1a\u5728\u4e0b\u9762\u7684\u4f8b\u9898\u4e2d\u63d0\u5230\u3002 \u964d\u6e29 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6700\u5f00\u59cb\u7684\u65f6\u5019\u4ee4 \\(T=T_0\\) \u3002 \u6bcf\u6b21\u964d\u6e29\u53ea\u9700\u8981\u7ed9 \\(T\\) \u4e58\u4e0a \\(\\delta\\) \u5373\u53ef\uff08\u964d\u6e29\u8981\u5728\u63a5\u53d7\u65b0\u89e3\u4e4b\u540e\uff09\u3002 \u76f4\u5230 \\(T \\le T_k\\) \u7684\u65f6\u5019\u518d\u505c\u6b62\u964d\u6e29\u5e76\u9000\u51fa\u6a21\u62df\u9000\u706b\u7684\u8fc7\u7a0b\u3002 \u6b64\u5904\u5f15\u7528\u4e00\u5f20\u56fe\uff08\u56fe\u6e90\u7ef4\u57fa\u767e\u79d1\uff09\uff1a \u4f60\u53d1\u73b0\uff0c\u968f\u7740\u6e29\u5ea6\u7684\u4e0b\u964d\uff0c\u89e3\u7684\u6270\u52a8\u5e45\u5ea6\u4e5f\u8d8a\u6765\u8d8a\u5c0f\uff0c\u6700\u7ec8\u63a5\u8fd1\u4e8e\u6700\u4f18\u89e3\u3002 \u8fd9\u5c31\u597d\u6bd4\u5206\u5b50\u6c38\u4e0d\u505c\u606f\u7684\u505a\u65e0\u89c4\u5219\u8fd0\u52a8\u4e00\u6837\uff0c\u800c\u4e14\u6e29\u5ea6\u8d8a\u9ad8\u8fd0\u52a8\u7684\u8d8a\u5feb\uff0c\u5e45\u5ea6\u8d8a\u5927\u3002 \u6a21\u62df\u9000\u706b\u5b9e\u9645\u4e0a\u5c31\u662f\u5728\u6a21\u62df\u7c7b\u4f3c\u8fd9\u4e2a\u7684\u8fc7\u7a0b\u3002 \u751f\u6210\u4e00\u4e2a\u65b0\u89e3 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6bcf\u6b21\uff0c\u6211\u4eec\u4f1a\u5728 \u4e0a\u4e00\u4e2a\u88ab\u63a5\u53d7\u7684\u89e3 \u7684\u57fa\u7840\u4e0a\u968f\u673a\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u89e3\u3002 \u4e00\u5b9a\u8981\u6ce8\u610f\uff0c\u6b64\u5904\u4f7f\u7528\u7684\u662f\u4e0a\u4e00\u4e2a\u88ab\u63a5\u53d7\u7684\u89e3\u800c\u4e0d\u662f\u5f53\u524d\u7684\u5168\u5c40\u6700\u4f18\u89e3\u3002 \u4e0d\u7136\u4f60\u5c31\u548c\u722c\u5c71\u7b97\u6cd5\u6ca1\u6709\u592a\u5927\u7684\u5dee\u5f02\u4e86ovo\u3002 \u4e4b\u524d\u6709\u4e2a\u670b\u53cb\u6a21\u62df\u8d5b\u7684\u65f6\u5019\u6253\u4e86\u9000\u706b\uff0c\u672c\u6765\u53ef\u4ee5\u62ff\u523090pts\uff0c\u4f46\u662f\u5c31\u662f\u56e0\u4e3a\u4f7f\u7528\u4e86\u5168\u5c40\u6700\u4f18\u89e3\u6765\u751f\u6210\u4e0b\u4e00\u4e2a\u89e3\u800c\u5bfc\u81f4\u7206\u96f6\u3002 \uff08\u4e0d\u8fc7\u6211\u5bfb\u601d\u7740\uff0c\u4e3a\u5565\u5728\u751f\u6210\u65b0\u89e3\u7684\u65f6\u5019\u4f1a\u7528\u53bb\u5168\u5c40\u6700\u4f18\u89e3\u554a\uff1f\u53d8\u91cf\u4e0d\u90fd\u5e94\u8be5\u6807\u8bc6\u6e05\u695a\u4e86\u5417\uff09 \u751f\u6210\u65b0\u89e3\u7684\u65b9\u5f0f\u5f88\u591a\uff0c\u6700\u5e38\u89c1\u7684\u5c31\u662f\u76f4\u63a5\u5728\u7cfb\u7edf\u53d8\u91cf\u5f53\u4e2d\u5305\u62ec\u7684\u6bcf\u4e00\u4e2a\u53d8\u91cf\u7684\u57fa\u7840\u4e0a\u52a0\u4e0a\u4e00\u4e2a\u968f\u673a\u6570\u518d\u641e\u4e00\u641e\u3002 \u6bd4\u5982\u8fd9\u6837\u5b50\uff1a 1 2 double nx = x + (( rand () << 1 ) - RAND_MAX ) * t ; double ny = y + (( rand () << 1 ) - RAND_MAX ) * t ; \u4e5f\u53ef\u4ee5\u76f4\u63a5\u5728\u5b9a\u4e49\u57df \\([l,r]\\) \u5f53\u4e2d\u968f\u673a\u4e00\u4e2a\u65b0\u89e3\u51fa\u6765\uff0c\u4e0d\u7ba1\u4e0a\u4e00\u4e2a\u88ab\u63a5\u53d7\u7684\u7684\u89e3\u662f\u4ec0\u4e48\uff1a 1 int nx = rand () % r + l ; \u4e00\u822c\u8981\u770b\u9898\u76ee\u7684\u60c5\u51b5\u800c\u5b9a\u3002 \u8f6c\u79fb \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e2a\u8f6c\u79fb\u662f\u6a21\u62df\u9000\u706b\u7684\u7cbe\u9ad3\u4e4b\u4e00\uff0c\u5b83\u5229\u7528\u4e86 Metropolis \u51c6\u5219\u3002 \u6211\u4eec\u5b9a\u4e49 \\(\\Delta E\\) \u8868\u793a\u5f53\u524d\u65b0\u751f\u6210\u7684\u89e3 \\(X\\) \u7684\u80fd\u91cf \\(F(X)\\) \u548c\u76ee\u524d\u7684\u5168\u5c40\u6700\u4f18\u89e3\u7684\u80fd\u91cf \\(F(X_0)\\) \u7684\u5dee\u3002 \u4e5f\u5c31\u662f \\(\\Delta E = F(X)-F(X_0)\\) \u3002 \u8003\u8651\u6211\u4eec\u5f53\u524d\u662f\u5728\u6c42\u80fd\u91cf\u51fd\u6570\u7684\u6700\u5c0f\u503c\u3002 \u90a3\u4e48\uff0c\u5982\u679c \\(\\Delta E < 0\\) \uff0c\u6211\u4eec\u76f4\u63a5\u63a5\u53d7\u8fd9\u4e2a\u65b0\u7684\u89e3 \\(X\\) \uff0c\u56e0\u4e3a\u5b83\u7684\u80fd\u91cf\u66f4\u5c0f\u3002 \u53cd\u4e4b\uff0c\u5982\u679c \\(\\Delta E > 0\\) \uff0c\u8bc1\u660e\u8fd9\u4e2a\u89e3\u662f\u4e2a\u975e\u6700\u4f18\u89e3\uff0c\u6211\u4eec\u5c31\u4ee5 \\(e^{\\dfrac{\\Delta E}{T}}\\) \u7684\u6982\u7387\u63a5\u53d7\u8fd9\u4e2a\u975e\u6700\u4f18\u89e3\u3002 \u4ee3\u7801\u5927\u81f4\u5982\u4e0b\uff1a 1 2 3 4 5 if ( Delta < 0 ){ \u8bb0\u5f55\u8fd9\u4e2a\u89e3\u88ab\u63a5\u53d7 \u8bb0\u5f55\u65b0\u7684\u5168\u5c40\u6700\u4f18\u89e3 } else if ( exp ( - Delta / T ) * RAND_MAX > rand ()) \u8bb0\u5f55\u8fd9\u4e2a\u89e3\u88ab\u63a5\u53d7 \u53cd\u8fc7\u6765\uff0c\u5982\u679c\u6211\u4eec\u5f53\u524d\u662f\u5728\u6c42\u80fd\u91cf\u51fd\u6570\u7684\u6700\u5927\u503c\u7684\u8bdd\uff0c\u6211\u4eec\u8fd9\u4e48\u5199\u5373\u53ef\uff1a 1 2 3 4 5 if ( Delta > 0 ){ \u8bb0\u5f55\u8fd9\u4e2a\u89e3\u88ab\u63a5\u53d7 \u8bb0\u5f55\u65b0\u7684\u5168\u5c40\u6700\u4f18\u89e3 } else if ( exp ( - Delta / T ) * RAND_MAX < rand ()) \u8bb0\u5f55\u8fd9\u4e2a\u89e3\u88ab\u63a5\u53d7 \u56e0\u4e3a\u8fd9\u4e2a\u65f6\u5019\u5728 else if \u5f53\u4e2d\uff0c \\(e^{\\dfrac{\\Delta E}{T}}\\) \u662f \\(>1\\) \u7684\u3002 \u6240\u4ee5\u628a\u5927\u4e8e\u53f7\u6539\u6210\u5c0f\u4e8e\u53f7\u5373\u53ef\u3002 \u5176\u4ed6 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5728\u9000\u706b\u7684\u65f6\u5019\uff0c\u4e3a\u4e86\u4f7f\u7b54\u6848\u66f4\u52a0\u63a5\u8fd1\u6211\u4eec\u8981\u7684\u89e3\uff0c\u4e00\u822c\u4f1a\u8bb0\u5f55\u5168\u5c40\u6700\u4f18\u89e3\u800c\u4e0d\u662f\u76f4\u63a5\u4f7f\u7528\u5f53\u524d\u89e3\u3002 \u800c\u4e14\u5728\u5f00\u59cb\u7684\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u4ece\u5b9a\u4e49\u57df\u5f53\u4e2d\u7684\u5e73\u5747\u503c\u5f00\u59cb\u9000\u706b\u3002 \u5e76\u4e14\uff0c\u5982\u679c\u65f6\u95f4\u5141\u8bb8\u7684\u8bdd\uff0c\u53ef\u4ee5\u5728\u9000\u706b\u8fc7\u7a0b\u5b8c\u6210\u4e4b\u540e\u518d\u8dd1\u4e00\u904d\u7c7b\u4f3c\u4e8e\u6a21\u62df\u9000\u706b\u7684\u8fc7\u7a0b\uff0c\u4ee5\u6c42\u51fa\u66f4\u7cbe\u786e\u7684\u89e3\u3002 \u4f18\u5316 & \u8c03\u53c2 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e00\u822c\u4e00\u6b21\u9000\u706b\u662f\u8fdc\u8fdc\u4e0d\u591f\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u591a\u8dd1\u51e0\u6b21\u9000\u706b\u3002 \u4f60\u53ef\u4ee5\u76f4\u63a5\u8dd1\u4e09\u5230\u4e94\u6b21\u3002 \u4e5f\u53ef\u4ee5\u76f4\u63a5\u5361\u65f6\u3002 \u4f7f\u7528\u4ee5\u4e0b\u8bed\u53e5\u5373\u53ef\u3002 1 2 while (( double ) clock () / CLOCK_PER_SEC < Limit ) simulated_annealing (); //limit\u4e00\u822c\u6bd4\u65f6\u95f4\u9650\u5236\u5c0f\u4e00\u70b9\uff0c\u6bd4\u5982\u4f60\u65f6\u9650 1s \uff0climit \u4e00\u822c\u53d6 998ms\u3002 \u6216\u8005\u4f60\u4e5f\u53ef\u4ee5\u8fd9\u6837\u5b50\uff1a 1 2 3 4 5 6 7 int main (){ double ti = clock (); //... while ( clock () - ti < Limit ) simulated_annealing (); //\u6ce8\u610f\u4e0d\u8981\u5ffd\u7565\u5927\u89c4\u6a21\u8f93\u51fa\u6240\u82b1\u7684\u65f6\u95f4\uff01 return 0 ; } \u8fd8\u6709\uff0c\u5982\u679c\u4f60\u4ea4\u4e0a\u53bb\u53d1\u73b0\u65e0\u6cd5AC\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u8fdb\u5165\u9000\u706b\u5f53\u4e2d\u6700\u75db\u82e6\u7684\u4e00\u4e2a\u8fc7\u7a0b\uff1a\u8c03\u53c2\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u4f60\u9700\u8981\u8c03\u6574 \\(T_0,T_k\\) \uff0c\u7136\u540e\u628a \\(\\delta\\) \u8c03\u5927\u3002 \u8fd9\u4e2a\u4e1c\u897f\u662f\u6ca1\u6709\u5565\u901a\u6cd5\u7684\uff0c\u53ea\u80fd\u9760\u7ecf\u9a8c\u548c\u611f\u89c9\u3002 \u6216\u8005\u4f60\u4e5f\u53ef\u4ee5\u8bd5\u4e00\u8bd5\u66f4\u6539\u968f\u673a\u6570\u79cd\u5b50\uff0c\u6bd4\u5982\u6539\u6210 srand(114514),srand(20061231),srand(time(NULL)),srand(rand()) \u3002 \u4e2a\u4eba\u63a8\u8350\u540e\u4e24\u79cd\u3002 \u4f8b\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5495\u5495\u5495 Reference \u03c8(\uff40\u2207\u00b4)\u03c8 https://www.luogu.com.cn/blog/Darth-Che/mu-ni-tui-huo-xue-xi-bi-ji https://m-sea.blog.luogu.org/qian-tan-SA https://oi-wiki.org/misc/simulated-annealing/ \u767e\u5ea6\u767e\u79d1","title":"\u6a21\u62df\u9000\u706b"},{"location":"algor/misc/simulate-anneal/#_1","text":"","title":"\u6a21\u62df\u9000\u706b\u4ece\u7cbe\u901a\u5230\u5165\u571f"},{"location":"algor/misc/simulate-anneal/#_2","text":"\u9996\u5148\u6211\u4eec\u9700\u8981\u77e5\u9053\u4e00\u79cd\u53eb\u722c\u5c71\u7b97\u6cd5\u7684\u4e1c\u897f\u3002 \u57fa\u672c\u601d\u8def\u5c31\u662f\u5728 \u5f53\u524d \u7684\u6700\u4f18\u89e3\u9644\u8fd1\u627e\u5230\u4e00\u4e2a\u65b0\u7684\u89e3\uff0c\u5982\u679c\u65b0\u7684\u89e3\u66f4\u4f18\u5219\u8f6c\u79fb\uff0c\u53cd\u4e4b\u4e0d\u53d8\u3002 \u4f60\u53d1\u73b0\u8fd9\u6837\u5b50\u5f88\u5bb9\u6613\u9677\u5165\u5c40\u90e8\u7684\u6700\u4f18\u89e3\u5f53\u4e2d\uff0c\u5e76\u4e14\u53ea\u80fd\u89e3\u51b3\u5355\u5cf0\u51fd\u6570\u7684\u60c5\u51b5\u3002 \u6240\u4ee5\u6211\u4eec\u4e3a\u4e86\u89e3\u51b3\u66f4\u5e7f\u6cdb\u7684\u591a\u5cf0\u51fd\u6570\u7684\u60c5\u51b5\uff0c\u9700\u8981\u5f15\u8fdb\u6a21\u62df\u9000\u706b\u8fd9\u4e2a\u7b97\u6cd5\u3002 \u722c\u5c71\u7b97\u6cd5\u5728\u627e\u5230\u5f53\u524d\u6700\u4f18\u89e3\u7684\u9644\u8fd1\u7684\u4e00\u4e2a\u975e\u6700\u4f18\u89e3\u7684\u65f6\u5019\uff0c\u4f1a\u628a\u5b83\u76f4\u63a5\u820d\u5f03\u6389\u3002 \u800c\u6a21\u62df\u9000\u706b\u5c31\u662f\u5728\u968f\u673a\u5316\u7684\u4e00\u4e2a\u6982\u7387\u4e0b\uff0c\u5148\u8f6c\u79fb\u5230\u8fd9\u4e2a\u975e\u6700\u4f18\u89e3\u4ee5\u8df3\u51fa\u5c40\u90e8\u6700\u4f18\u627e\u5230\u53ef\u80fd\u7684\u5168\u5c40\u6700\u4f18\u89e3\u7684\u4e00\u4e2a\u7b97\u6cd5\u3002 \u5e76\u4e14\u57fa\u4e8e\u91d1\u5c5e\u9000\u706b\u7684\u539f\u7406\uff0c\u5b83\u5982\u679c\u8df3\u51fa\u4e86\u5168\u5c40\u6700\u4f18\u89e3\uff0c\u5728\u6e29\u5ea6\u4e0d\u65ad\u4e0b\u964d\u7684\u65f6\u5019\uff0c\u6270\u52a8\u7684\u5e45\u5ea6\u8d8a\u6765\u8d8a\u5c0f\uff0c\u4e5f\u662f\u5927\u6982\u7387\u4f1a\u8df3\u56de\u6765\u7684\u3002 \u4e00\u822c\u6211\u4eec\u4f1a\u7528\u4e8e\u4e00\u4e9b\u65b9\u6848\u6570\u6781\u5927\u7684\uff0c\u6216\u8005\u662f\u6b63\u5e38\u7b97\u6cd5\u96be\u4ee5\u60f3\u5230\u7684\u9898\u5f53\u4e2d\u3002 \u5f53\u7136\u8003\u573a\u4e0a\u4e0d\u63a8\u8350\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u6bd5\u7adf\u662f\u4e2a\u968f\u673a\u5316\u7b97\u6cd5\uff08\u9664\u975e\u4f60\u5c31\u6ca1\u60f3\u8fc7\u6253\u6b63\u89e3\uff09\u3002","title":"\u7b80\u4ecb"},{"location":"algor/misc/simulate-anneal/#_3","text":"\u5b83\u57fa\u4e8e\u4e00\u4e2a\u5de5\u4e1a\u4e0a\u7684\u70ed\u5904\u7406\u5de5\u827a\u2014\u2014\u91d1\u5c5e\u9000\u706b\uff0c\u4e5f\u53ef\u4ee5\u8bf4\u57fa\u4e8e\u70ed\u529b\u5b66\u539f\u7406\u3002 \u91d1\u5c5e\u9000\u706b\uff1a\u5c06\u91d1\u5c5e\u52a0\u70ed\u5230\u4e00\u5b9a\u6e29\u5ea6\uff0c\u4fdd\u6301\u8db3\u591f\u65f6\u95f4\uff0c\u7136\u540e\u4ee5\u9002\u5b9c\u901f\u5ea6\u51b7\u5374(\u901a\u5e38\u662f\u7f13\u6162\u51b7\u5374\uff0c\u6709\u65f6\u662f\u63a7\u5236\u51b7\u5374)\u7684\u4e00\u79cd\u91d1\u5c5e\u70ed\u5904\u7406\u5de5\u827a\u3002 \u6a21\u62df\u9000\u706b\u7684\u8fc7\u7a0b\u662f\u5728\u4e00\u4e2a\u80fd\u91cf\u51fd\u6570 \\(F\\) \u4e0a\u8fdb\u884c\u7684\uff0c\u6211\u4eec\u628a\u5b83\u653e\u5230\u4e8c\u7ef4\u7684\u5750\u6807\u7cfb\u4e0b\uff0c\u5c31\u76f8\u5f53\u4e8e\u4e00\u4e2a\u81ea\u53d8\u91cf\u4e3a\u7cfb\u7edf\u53d8\u91cf\uff0c\u56e0\u53d8\u91cf\u662f\u7cfb\u7edf\u80fd\u91cf\u7684\u4e00\u4e2a\u51fd\u6570\u3002 \u6211\u4eec\u8981\u6c42\u7684\u5c31\u662f\u8fd9\u4e2a\u591a\u5cf0\uff08\u8c37\uff09\u51fd\u6570 \\(F\\) \u7684\u6700\u503c\u3002 \u7cfb\u7edf\u53d8\u91cf\u53ef\u4ee5\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u53d8\u91cf \\(x\\) \uff0c\u4e5f\u53ef\u4ee5\u662f\u9898\u4e2d\u7ed9\u51fa\u7684\u6761\u4ef6\uff08\u6bd4\u5982 \\(x,y\\) \u5750\u6807\uff09\u7ec4\u6210\u7684\u4e00\u4e2a\u591a\u5143\u7ec4\uff0c\u5728\u4e0b\u6587\u6211\u4eec\u628a\u8fd9\u4e2a\u591a\u5143\u7ec4\uff08\u6216\u8005\u5355\u4e2a\u53d8\u91cf\uff09\u79f0\u4f5c \\(X\\) \u3002 \u8868\u793a\u89e3\u7684\u65f6\u5019\u4e5f\u4f9d\u65e7\u4f7f\u7528\u8fd9\u4e2a\u7cfb\u7edf\u53d8\u91cf \\(X\\) \u3002 \u90a3\u4e48\uff0c\u6a21\u62df\u9000\u706b\u6bcf\u6b21\u4f1a\u5728\u4e0a\u4e00\u4e2a\u88ab\u63a5\u53d7\u7684\u89e3 \\(X\\) \u7684\u57fa\u7840\u4e0a \u968f\u673a \u751f\u6210\u4e00\u4e2a\u65b0\u7684\u89e3 \\(X^\\prime\\) \uff0c \u8fd9\u4e2a\u65b0\u7684\u89e3\u548c \\(X\\) \u4ee5\u53ca\u5f53\u524d\u89e3\u7684\u7cfb\u7edf\u80fd\u91cf \\(F(X)\\) \u6709\u5173\u3002 \u5982\u679c \\(X^\\prime\\) \u66f4\u4f18\u79c0\u90a3\u4e48\u63a5\u53d7\u8fd9\u4e2a\u65b0\u6700\u4f18\u89e3\uff0c\u8bb0\u5f55\u5168\u5c40\u7b54\u6848\u3002 \u53cd\u4e4b\u4ee5\u4e00\u4e2a\u5173\u4e8e \\(F(X^\\prime)\\) \u548c\u6e29\u5ea6 \\(T\\) \u7684\u6982\u7387\u63a5\u53d7\u8fd9\u4e2a\u975e\u6700\u4f18\u89e3 \\(X^\\prime\\) \uff0c \\(T\\) \u5177\u4f53\u662f\u4ec0\u4e48\u4e0b\u6587\u4f1a\u63d0\u5230\u3002","title":"\u57fa\u672c\u539f\u7406"},{"location":"algor/misc/simulate-anneal/#_4","text":"\u6211\u4eec\u9700\u8981\u5148\u5b9a\u4e49\u51e0\u4e2a\u53d8\u91cf\u4ee5\u65b9\u4fbf\u63cf\u8ff0\uff1a \u5f53\u524d\u6e29\u5ea6 \\(T\\) \u3002 \u521d\u59cb\u6e29\u5ea6 \\(T_0\\) \uff0c\u4e00\u822c\u53d6\u4e00\u4e2a\u8f83\u5927\u7684\u6570\uff0c\u5927\u6982\u5728 \\([1000,5000]\\) \u8303\u56f4\u5185\u3002 \u6700\u7ec8\u6e29\u5ea6 \\(T_k\\) \uff0c\u4e00\u822c\u53d6\u4e00\u4e2a\u6781\u5c0f\u7684\u6b63\u6570\uff0c\u5927\u6982\u5728 \\([10^{-15},10^{-8}]\\) \u4e0a\u3002 \u964d\u6e29\u7cfb\u6570 \\(\\delta\\) \uff0c\u4e00\u822c\u53d6\u4e00\u4e2a\u5728 \\((0.985,0.997)\\) \u4e0a\u7684\u4e00\u4e2a\u6570\uff0c\u63a8\u8350 \\(0.995\\) \u3002","title":"\u5b9e\u73b0"},{"location":"algor/misc/simulate-anneal/#_5","text":"\u5199\u8ba1\u7b97\u7cfb\u7edf\u80fd\u91cf\u7684\u51fd\u6570\u5c31\u76f8\u5f53\u4e8e\u5199\u51fa \\(F(X)\\) \u7684\u8868\u8fbe\u5f0f\u3002 \u6211\u4eec\u9700\u8981\u6839\u636e\u9898\u76ee\u6240\u7ed9\u7684\u6761\u4ef6 \\(X\\) \u8ba1\u7b97\u51fa\u5728\u89e3\u4e3a \\(X\\) \u7684\u65f6\u5019\u7684\u7cfb\u7edf\u80fd\u91cf \\(F(X)\\) \u3002 \u4e3e\u4e00\u4e2a\u6bd4\u8f83\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5047\u8bbe \\(X\\) \u5c31\u4ee3\u8868\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u5f53\u4e2d\u7684 \\(x\\) \u5750\u6807\u3002 \\(F(X)\\) \u5219\u662f\u4e00\u4e2a\u4e8c\u6b21\u51fd\u6570 \\(y=Ax^2+Bx+C\\) \u3002 \u90a3\u4e48\u4f60\u8ba1\u7b97\u7cfb\u7edf\u80fd\u91cf\u7684\u51fd\u6570 \\(F(X)\\) \u5c31\u53ea\u9700\u8981\u8fd4\u56de \\(AX^2+BX+C\\) \u5373\u53ef\u3002 \u66f4\u591a\u7684\u5b9e\u4f8b\u4f1a\u5728\u4e0b\u9762\u7684\u4f8b\u9898\u4e2d\u63d0\u5230\u3002","title":"\u8ba1\u7b97\u7cfb\u7edf\u80fd\u91cf"},{"location":"algor/misc/simulate-anneal/#_6","text":"\u6700\u5f00\u59cb\u7684\u65f6\u5019\u4ee4 \\(T=T_0\\) \u3002 \u6bcf\u6b21\u964d\u6e29\u53ea\u9700\u8981\u7ed9 \\(T\\) \u4e58\u4e0a \\(\\delta\\) \u5373\u53ef\uff08\u964d\u6e29\u8981\u5728\u63a5\u53d7\u65b0\u89e3\u4e4b\u540e\uff09\u3002 \u76f4\u5230 \\(T \\le T_k\\) \u7684\u65f6\u5019\u518d\u505c\u6b62\u964d\u6e29\u5e76\u9000\u51fa\u6a21\u62df\u9000\u706b\u7684\u8fc7\u7a0b\u3002 \u6b64\u5904\u5f15\u7528\u4e00\u5f20\u56fe\uff08\u56fe\u6e90\u7ef4\u57fa\u767e\u79d1\uff09\uff1a \u4f60\u53d1\u73b0\uff0c\u968f\u7740\u6e29\u5ea6\u7684\u4e0b\u964d\uff0c\u89e3\u7684\u6270\u52a8\u5e45\u5ea6\u4e5f\u8d8a\u6765\u8d8a\u5c0f\uff0c\u6700\u7ec8\u63a5\u8fd1\u4e8e\u6700\u4f18\u89e3\u3002 \u8fd9\u5c31\u597d\u6bd4\u5206\u5b50\u6c38\u4e0d\u505c\u606f\u7684\u505a\u65e0\u89c4\u5219\u8fd0\u52a8\u4e00\u6837\uff0c\u800c\u4e14\u6e29\u5ea6\u8d8a\u9ad8\u8fd0\u52a8\u7684\u8d8a\u5feb\uff0c\u5e45\u5ea6\u8d8a\u5927\u3002 \u6a21\u62df\u9000\u706b\u5b9e\u9645\u4e0a\u5c31\u662f\u5728\u6a21\u62df\u7c7b\u4f3c\u8fd9\u4e2a\u7684\u8fc7\u7a0b\u3002","title":"\u964d\u6e29"},{"location":"algor/misc/simulate-anneal/#_7","text":"\u6bcf\u6b21\uff0c\u6211\u4eec\u4f1a\u5728 \u4e0a\u4e00\u4e2a\u88ab\u63a5\u53d7\u7684\u89e3 \u7684\u57fa\u7840\u4e0a\u968f\u673a\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u89e3\u3002 \u4e00\u5b9a\u8981\u6ce8\u610f\uff0c\u6b64\u5904\u4f7f\u7528\u7684\u662f\u4e0a\u4e00\u4e2a\u88ab\u63a5\u53d7\u7684\u89e3\u800c\u4e0d\u662f\u5f53\u524d\u7684\u5168\u5c40\u6700\u4f18\u89e3\u3002 \u4e0d\u7136\u4f60\u5c31\u548c\u722c\u5c71\u7b97\u6cd5\u6ca1\u6709\u592a\u5927\u7684\u5dee\u5f02\u4e86ovo\u3002 \u4e4b\u524d\u6709\u4e2a\u670b\u53cb\u6a21\u62df\u8d5b\u7684\u65f6\u5019\u6253\u4e86\u9000\u706b\uff0c\u672c\u6765\u53ef\u4ee5\u62ff\u523090pts\uff0c\u4f46\u662f\u5c31\u662f\u56e0\u4e3a\u4f7f\u7528\u4e86\u5168\u5c40\u6700\u4f18\u89e3\u6765\u751f\u6210\u4e0b\u4e00\u4e2a\u89e3\u800c\u5bfc\u81f4\u7206\u96f6\u3002 \uff08\u4e0d\u8fc7\u6211\u5bfb\u601d\u7740\uff0c\u4e3a\u5565\u5728\u751f\u6210\u65b0\u89e3\u7684\u65f6\u5019\u4f1a\u7528\u53bb\u5168\u5c40\u6700\u4f18\u89e3\u554a\uff1f\u53d8\u91cf\u4e0d\u90fd\u5e94\u8be5\u6807\u8bc6\u6e05\u695a\u4e86\u5417\uff09 \u751f\u6210\u65b0\u89e3\u7684\u65b9\u5f0f\u5f88\u591a\uff0c\u6700\u5e38\u89c1\u7684\u5c31\u662f\u76f4\u63a5\u5728\u7cfb\u7edf\u53d8\u91cf\u5f53\u4e2d\u5305\u62ec\u7684\u6bcf\u4e00\u4e2a\u53d8\u91cf\u7684\u57fa\u7840\u4e0a\u52a0\u4e0a\u4e00\u4e2a\u968f\u673a\u6570\u518d\u641e\u4e00\u641e\u3002 \u6bd4\u5982\u8fd9\u6837\u5b50\uff1a 1 2 double nx = x + (( rand () << 1 ) - RAND_MAX ) * t ; double ny = y + (( rand () << 1 ) - RAND_MAX ) * t ; \u4e5f\u53ef\u4ee5\u76f4\u63a5\u5728\u5b9a\u4e49\u57df \\([l,r]\\) \u5f53\u4e2d\u968f\u673a\u4e00\u4e2a\u65b0\u89e3\u51fa\u6765\uff0c\u4e0d\u7ba1\u4e0a\u4e00\u4e2a\u88ab\u63a5\u53d7\u7684\u7684\u89e3\u662f\u4ec0\u4e48\uff1a 1 int nx = rand () % r + l ; \u4e00\u822c\u8981\u770b\u9898\u76ee\u7684\u60c5\u51b5\u800c\u5b9a\u3002","title":"\u751f\u6210\u4e00\u4e2a\u65b0\u89e3"},{"location":"algor/misc/simulate-anneal/#_8","text":"\u8fd9\u4e2a\u8f6c\u79fb\u662f\u6a21\u62df\u9000\u706b\u7684\u7cbe\u9ad3\u4e4b\u4e00\uff0c\u5b83\u5229\u7528\u4e86 Metropolis \u51c6\u5219\u3002 \u6211\u4eec\u5b9a\u4e49 \\(\\Delta E\\) \u8868\u793a\u5f53\u524d\u65b0\u751f\u6210\u7684\u89e3 \\(X\\) \u7684\u80fd\u91cf \\(F(X)\\) \u548c\u76ee\u524d\u7684\u5168\u5c40\u6700\u4f18\u89e3\u7684\u80fd\u91cf \\(F(X_0)\\) \u7684\u5dee\u3002 \u4e5f\u5c31\u662f \\(\\Delta E = F(X)-F(X_0)\\) \u3002 \u8003\u8651\u6211\u4eec\u5f53\u524d\u662f\u5728\u6c42\u80fd\u91cf\u51fd\u6570\u7684\u6700\u5c0f\u503c\u3002 \u90a3\u4e48\uff0c\u5982\u679c \\(\\Delta E < 0\\) \uff0c\u6211\u4eec\u76f4\u63a5\u63a5\u53d7\u8fd9\u4e2a\u65b0\u7684\u89e3 \\(X\\) \uff0c\u56e0\u4e3a\u5b83\u7684\u80fd\u91cf\u66f4\u5c0f\u3002 \u53cd\u4e4b\uff0c\u5982\u679c \\(\\Delta E > 0\\) \uff0c\u8bc1\u660e\u8fd9\u4e2a\u89e3\u662f\u4e2a\u975e\u6700\u4f18\u89e3\uff0c\u6211\u4eec\u5c31\u4ee5 \\(e^{\\dfrac{\\Delta E}{T}}\\) \u7684\u6982\u7387\u63a5\u53d7\u8fd9\u4e2a\u975e\u6700\u4f18\u89e3\u3002 \u4ee3\u7801\u5927\u81f4\u5982\u4e0b\uff1a 1 2 3 4 5 if ( Delta < 0 ){ \u8bb0\u5f55\u8fd9\u4e2a\u89e3\u88ab\u63a5\u53d7 \u8bb0\u5f55\u65b0\u7684\u5168\u5c40\u6700\u4f18\u89e3 } else if ( exp ( - Delta / T ) * RAND_MAX > rand ()) \u8bb0\u5f55\u8fd9\u4e2a\u89e3\u88ab\u63a5\u53d7 \u53cd\u8fc7\u6765\uff0c\u5982\u679c\u6211\u4eec\u5f53\u524d\u662f\u5728\u6c42\u80fd\u91cf\u51fd\u6570\u7684\u6700\u5927\u503c\u7684\u8bdd\uff0c\u6211\u4eec\u8fd9\u4e48\u5199\u5373\u53ef\uff1a 1 2 3 4 5 if ( Delta > 0 ){ \u8bb0\u5f55\u8fd9\u4e2a\u89e3\u88ab\u63a5\u53d7 \u8bb0\u5f55\u65b0\u7684\u5168\u5c40\u6700\u4f18\u89e3 } else if ( exp ( - Delta / T ) * RAND_MAX < rand ()) \u8bb0\u5f55\u8fd9\u4e2a\u89e3\u88ab\u63a5\u53d7 \u56e0\u4e3a\u8fd9\u4e2a\u65f6\u5019\u5728 else if \u5f53\u4e2d\uff0c \\(e^{\\dfrac{\\Delta E}{T}}\\) \u662f \\(>1\\) \u7684\u3002 \u6240\u4ee5\u628a\u5927\u4e8e\u53f7\u6539\u6210\u5c0f\u4e8e\u53f7\u5373\u53ef\u3002","title":"\u8f6c\u79fb"},{"location":"algor/misc/simulate-anneal/#_9","text":"\u5728\u9000\u706b\u7684\u65f6\u5019\uff0c\u4e3a\u4e86\u4f7f\u7b54\u6848\u66f4\u52a0\u63a5\u8fd1\u6211\u4eec\u8981\u7684\u89e3\uff0c\u4e00\u822c\u4f1a\u8bb0\u5f55\u5168\u5c40\u6700\u4f18\u89e3\u800c\u4e0d\u662f\u76f4\u63a5\u4f7f\u7528\u5f53\u524d\u89e3\u3002 \u800c\u4e14\u5728\u5f00\u59cb\u7684\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u4ece\u5b9a\u4e49\u57df\u5f53\u4e2d\u7684\u5e73\u5747\u503c\u5f00\u59cb\u9000\u706b\u3002 \u5e76\u4e14\uff0c\u5982\u679c\u65f6\u95f4\u5141\u8bb8\u7684\u8bdd\uff0c\u53ef\u4ee5\u5728\u9000\u706b\u8fc7\u7a0b\u5b8c\u6210\u4e4b\u540e\u518d\u8dd1\u4e00\u904d\u7c7b\u4f3c\u4e8e\u6a21\u62df\u9000\u706b\u7684\u8fc7\u7a0b\uff0c\u4ee5\u6c42\u51fa\u66f4\u7cbe\u786e\u7684\u89e3\u3002","title":"\u5176\u4ed6"},{"location":"algor/misc/simulate-anneal/#_10","text":"\u4e00\u822c\u4e00\u6b21\u9000\u706b\u662f\u8fdc\u8fdc\u4e0d\u591f\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u591a\u8dd1\u51e0\u6b21\u9000\u706b\u3002 \u4f60\u53ef\u4ee5\u76f4\u63a5\u8dd1\u4e09\u5230\u4e94\u6b21\u3002 \u4e5f\u53ef\u4ee5\u76f4\u63a5\u5361\u65f6\u3002 \u4f7f\u7528\u4ee5\u4e0b\u8bed\u53e5\u5373\u53ef\u3002 1 2 while (( double ) clock () / CLOCK_PER_SEC < Limit ) simulated_annealing (); //limit\u4e00\u822c\u6bd4\u65f6\u95f4\u9650\u5236\u5c0f\u4e00\u70b9\uff0c\u6bd4\u5982\u4f60\u65f6\u9650 1s \uff0climit \u4e00\u822c\u53d6 998ms\u3002 \u6216\u8005\u4f60\u4e5f\u53ef\u4ee5\u8fd9\u6837\u5b50\uff1a 1 2 3 4 5 6 7 int main (){ double ti = clock (); //... while ( clock () - ti < Limit ) simulated_annealing (); //\u6ce8\u610f\u4e0d\u8981\u5ffd\u7565\u5927\u89c4\u6a21\u8f93\u51fa\u6240\u82b1\u7684\u65f6\u95f4\uff01 return 0 ; } \u8fd8\u6709\uff0c\u5982\u679c\u4f60\u4ea4\u4e0a\u53bb\u53d1\u73b0\u65e0\u6cd5AC\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u8fdb\u5165\u9000\u706b\u5f53\u4e2d\u6700\u75db\u82e6\u7684\u4e00\u4e2a\u8fc7\u7a0b\uff1a\u8c03\u53c2\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u4f60\u9700\u8981\u8c03\u6574 \\(T_0,T_k\\) \uff0c\u7136\u540e\u628a \\(\\delta\\) \u8c03\u5927\u3002 \u8fd9\u4e2a\u4e1c\u897f\u662f\u6ca1\u6709\u5565\u901a\u6cd5\u7684\uff0c\u53ea\u80fd\u9760\u7ecf\u9a8c\u548c\u611f\u89c9\u3002 \u6216\u8005\u4f60\u4e5f\u53ef\u4ee5\u8bd5\u4e00\u8bd5\u66f4\u6539\u968f\u673a\u6570\u79cd\u5b50\uff0c\u6bd4\u5982\u6539\u6210 srand(114514),srand(20061231),srand(time(NULL)),srand(rand()) \u3002 \u4e2a\u4eba\u63a8\u8350\u540e\u4e24\u79cd\u3002","title":"\u4f18\u5316 &amp; \u8c03\u53c2"},{"location":"algor/misc/simulate-anneal/#_11","text":"\u5495\u5495\u5495","title":"\u4f8b\u9898"},{"location":"algor/misc/simulate-anneal/#reference","text":"https://www.luogu.com.cn/blog/Darth-Che/mu-ni-tui-huo-xue-xi-bi-ji https://m-sea.blog.luogu.org/qian-tan-SA https://oi-wiki.org/misc/simulated-annealing/ \u767e\u5ea6\u767e\u79d1","title":"Reference"},{"location":"algor/misc/wqs-old/","text":"\u4e4b\u524d\u521a\u5b66\u4e8c\u5206\u7684\u65f6\u5019\u505a\u8fc7\u4e00\u9053\u53eb Tree I \u7684\u9898\u76ee\uff0c\u611f\u89c9\u5f88\u6709\u610f\u601d\uff0c\u4e0d\u8fc7\u5f53\u65f6\u4e5f\u6ca1\u600e\u4e48\u6df1\u7a76\u3002 \u6628\u5929\u5728 uoj \u7fa4\u56de\u7b54\u95ee\u9898\u7684\u65f6\u5019\u5f97\u5230\u4e86\u6e05\u82b7\u59d0\u59d0\u7684\u6559\u5bfc\uff0c\u77e5\u9053\u4e86\u8fd9\u73a9\u610f\u513f\u5c31\u662f wqs \u4e8c\u5206\uff0c\u56e0\u4e3a\u4e4b\u524d\u5c31\u5bf9\u8fd9\u4e2a\u7cbe\u5999\u7684\u5957\u8def\u5f88\u611f\u5174\u8da3\u4e86\uff0c\u4e8e\u662f\u51b3\u5b9a\u5b66\u4e60\u4e00\u4e0b\u3002 \u6cdb\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5047\u5b9a\u4f60\u6709\u4e00\u4e2a\u9650\u5236\u53c2\u6570 \\(k\\) \uff0c\u4f60\u8981\u6c42 \\(ans(k)\\) \uff0c\u4f46\u662f \\(ans(k)\\) \u6c42\u8d77\u6765\u662f hard \u7684\u3002 \u4f46\u662f\u53ef\u4ee5\u5feb\u901f\u7684\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(x\\) \u6c42\u51fa \\(\\max/\\min\\{ans(i)-ix\\}\\) \uff0c\u4e14 \\(ans\\) \u662f\u51f8\u7684\uff0c\u90a3\u4e48\u4e8c\u5206\u8fd9\u4e2a \\(x\\) \u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u4e3a\u5982\u679c \\(ans\\) \u662f\u51f8\u7684\uff0c\u80fd\u53d6\u5230\u7684\u6700\u4f18\u7684 \\(i\\) \u5c31\u662f\u5173\u4e8e \\(x\\) \u5355\u8c03\u7684\uff0c\u8fd9\u4e2a\u5c31\u53ef\u4ee5\u4e8c\u5206\u4e86\u3002 \u8fd9\u662f _rqy \u59d0\u59d0\u8bf4\u7684\uff0c\u597d\u50cf\u5bf9\u6211\u8fd9\u79cd\u7b28\u86cb\u6765\u8bf4\u4e0d\u662f\u5f88\u76f4\u89c2\u3002 \u4f8b\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a \\(m\\) \u6761\u8fb9\uff0c \\(n\\) \u4e2a\u70b9\uff0c\u6bcf\u6761\u8fb9\u53ef\u80fd\u662f\u53ef\u7231\u8fb9\u6216\u8005\u4e0d\u53ef\u7231\u8fb9\u3002 \u6c42\u6070\u597d\u6709 \\(Need\\) \u6761\u53ef\u7231\u8fb9\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002 \u8fd9\u4e2a\u76f4\u63a5\u5199\u4e00\u4e2a \\(dp\\) \u6765\u505a\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u590d\u6742\u5ea6\u4e0a\u5929\u3002 \u4e8e\u662f\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u7c7b\u4f3c\u4e4b\u524d\u67d0\u9053 ds \u4f18\u5316 dp \u7684\u9898\u76ee\u7684\u601d\u8def\uff0c\u8bbe \\(f(i)\\) \u8868\u793a \u6070\u597d \u9009\u4e86 \\(i\\) \u6761\u53ef\u7231\u8fb9\u7684\u6700\u5c0f\u751f\u6210\u6811\u7684\u6743\u503c\u548c\u3002 \u7136\u540e\u6ce8\u610f\u5230 \\(f\\) \u662f\u4e0b\u51f8\u7684\uff0c\u6240\u4ee5\u6bcf\u4e00\u4e2a\u659c\u7387\u80fd\u591f\u6620\u5c04\u5230\u4e00\u4e2a\u5207\u70b9\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u62ff\u4e00\u6761\u76f4\u7ebf\u53bb\u5207 \\(f\\) \u7684\u56fe\u50cf\uff0c\u5c1d\u8bd5\u627e\u5230 \\(f(Need)\\) \uff0c\u4f46\u662f\u8fd9\u4e0d\u662f\u80fd\u4e00\u6b65\u5230\u4f4d\u7684\u4e8b\u60c5\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u662f\u77e5\u9053 \\(f\\) \u4e00\u5b9a\u4e0b\u51f8\uff0c\u6211\u4eec\u4e0d\u77e5\u9053\u5b83\u5177\u4f53\u662f\u4ec0\u4e48\u6837\u7684\u3002 \u53d1\u73b0\u6839\u636e\u4e0b\u51f8\u51fd\u6570\u7684\u6027\u8d28\uff0c\u5f53 \\(i\\) \u589e\u52a0\u7684\u65f6\u5019\uff0c\u5bf9\u5e94\u5207\u7ebf\u7684\u659c\u7387\u662f\u5355\u8c03\u4e0d\u964d\u7684\u3002 \u4e5f\u5c31\u662f\u8bf4\u659c\u7387\u5355\u8c03\uff0c\u5207\u70b9\u4e5f\u5355\u8c03\uff0c\u800c\u6211\u4eec\u968f\u4fbf\u7ed9\u4e00\u4e2a \\(k\\) \u5207\u51fa\u6765\u7684\u5207\u70b9\u6a2a\u5750\u6807\u4e0d\u4e00\u5b9a\u662f \\(Need\\) \uff0c\u4e8e\u662f\u6211\u4eec\u60f3 check\uff0c\u4e5f\u5c31\u60f3\u5bf9\u4e8e\u4e00\u4e2a \\(k\\) \u6c42\u51fa \\(x\\) \uff0c\u987a\u4fbf\u6c42 \\(f(x)\\) \u3002 \u6240\u4ee5\u6211\u4eec\u9700\u8981\u5efa\u7acb\u6620\u5c04\u5173\u7cfb\u3002 \u6211\u4eec\u53d1\u73b0\u56fa\u5b9a\u7684\u659c\u7387\u5bf9 \\(f(x)\\) \u7684\u5207\u70b9\u662f\u56fa\u5b9a\u7684\uff08\u4f7f\u5f97\u622a\u8ddd\u6700\u5927\u7684\u90a3\u4e2a\u70b9\uff09\uff0c\u90a3\u4e48\u5207\u7ebf\u5c31\u56fa\u5b9a\uff0c\u6362\u53e5\u8bdd\u8bf4\u622a\u8ddd\u5c31\u56fa\u5b9a\u3002 \u6211\u4eec\u5c31\u5efa\u7acb\u4e86\u4e00\u4e2a\u4ece \\(k \\to x \\to b\\) \u7684\u6620\u5c04\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53ef\u4ee5\u5728\u56fa\u5b9a \\(k\\) \u7684\u60c5\u51b5\u4e0b\uff0c\u6c42\u51fa\u8fd9\u4e2a\u5207\u70b9\uff0c\u5e76\u6c42\u51fa\u622a\u8ddd\u3002 \u53cd\u8fc7\u6765\u5c31\u662f\u8bf4\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u622a\u8ddd\u6c42\u51fa\u5207\u70b9\uff0c\u8fdb\u4e00\u6b65\u6c42\u51fa \\(f(x)\\) \uff0c\u5177\u4f53\u89e3\u91ca\u5982\u4e0b\uff1a \u5c1d\u8bd5\u5316\u4e00\u4e0b\u67ff\u5b50\uff1a \\(f(x) = kx + b \\iff b = f(x) - kx\\) \u3002 \u6ce8\u610f\u5230 \\(b\\) \u6700\u4f18\u7684\u65f6\u5019\uff0c\u6211\u4eec\u6309\u67ff\u5b50\u6c42\u51fa\u7684\u8fd9\u4e2a \\(f(x)\\) \u4e00\u5b9a\u662f\u6700\u4f18\u7684\uff08\u4e5f\u5c31\u662f\u5b9e\u9645\u7684 \\(f\\) \u503c\uff09\uff08\u8fd9\u4e2a\u663e\u7136\uff0c\u6211\u4eec\u662f\u5efa\u7acb\u4e86\u6620\u5c04\u5173\u7cfb\u7684\uff09\u3002 \u6240\u4ee5\u6c42\u51fa \\(\\min\\{b\\}\\) \u7b49\u4ef7\u4e8e\u6c42\u51fa \\(f(x)\\) \uff0c\u4e3a\u4ec0\u4e48\u8981\u505a\u8fd9\u4e00\u6b65\u8f6c\u5316\u5462\uff1f \u6ce8\u610f\u5230\uff0c\u5176\u5b9e \\(\\min\\{b\\}\\) \u7b49\u4ef7\u4e8e\u8003\u8651\u7ed9\u6bcf\u6761\u8fb9\u90fd\u51cf\u53bb\u4e00\u4e2a \\(k\\) \uff0c\u6c42\u6070\u597d\u9009\u4e86 \\(x\\) \u6761\u53ef\u7231\u8fb9\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002 \u6211\u4eec\u521a\u624d\u8bf4\u4e86\uff0c\u659c\u7387\u56fa\u5b9a\uff0c \\(\\min\\{b\\}\\) \u4e5f\u662f\u56fa\u5b9a\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u5bf9\u4e8e\u4e00\u4e2a \\(k\\) \uff0c\u4e0d\u7ba1\u4ed6\u7684\u9650\u5236\u5982\u4f55\uff0c\u6211\u4eec\u6c42 mst \u6c42\u51fa\u6765\u7684\u6743\u503c\u548c\u4e5f\u5c31\u662f\u56fa\u5b9a\u7684\uff01 \u90a3\u4e48\u8fd9\u4e2a\u9009 \\(x\\) \u4e2a\u7684\u9650\u5236\u5c31\u88ab\u76f4\u63a5\u53bb\u9664\uff0c\u6c42 \\(f(x)\\) \u5c31\u53ef\u4ee5\u8f6c\u5316\u4e3a\u6ca1\u6709\u9650\u5236\u7684\u60c5\u51b5\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206 \\(k\\) \uff0c\u5bf9\u4e8e\u6bcf\u4e2a \\(k\\) \u7b97\u4e00\u4e0b \\(b \\to f(x) \\to x\\) \u3002 \u7136\u540e check \u4e00\u4e0b \\(x\\) \u548c \\(Need\\) \u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u8c03\u6574 \\(k\\) \u5c31\u53ef\u4ee5\u4e8c\u5206\u5230 \\(Need\\) \u4e86\uff01 \u4f46\u662f\u6ce8\u610f\u5230\uff0c\u5176\u5b9e\u659c\u7387\u548c\u5207\u70b9\u5e76\u4e0d\u4e00\u5b9a\u80fd\u5efa\u7acb\u51fd\u6570\u5173\u7cfb\uff0c\u56e0\u4e3a\u4e00\u4e2a\u659c\u7387\u53ef\u4ee5\u5bf9\u5e94\u591a\u4e2a\u5207\u70b9\uff0c\u6bd4\u5982\u4e0b\u56fe\u7684\u60c5\u51b5\uff0c\u6709\u53ef\u80fd\u51fa\u73b0\u4e00\u4e2a\u70b9\u4e24\u8fb9\u7684\u659c\u7387\u76f8\u7b49\u7684\u60c5\u51b5\u3002 \u56fe\u6e90 https://www.cnblogs.com/TianMeng-hyl/p/14972355.html \u3002 \u8bf7\u8bfb\u8005\u628a\u5b83\u4eec\u90fd\u5f53\u6210\u6574\u70b9\uff0c\u8fd9\u91cc\u662f\u611f\u6027\u7684\uff0c\u672c\u9898 \\(f(i)\\) \u663e\u7136\u662f > 0 \u7684\u3002 \u90a3\u4e48\u73b0\u5728\u8981\u505a\u7684\u5c31\u662f\u89e3\u51b3\u8fd9\u4e2a\u4e00\u5bf9\u591a\u7684\u95ee\u9898\uff0c\u4e00\u79cd\u5e38\u89c1\u7684\u89e3\u51b3\u7b56\u7565\u662f\uff0c\u6211\u4eec\u628a\u8fd9\u591a\u4e2a\u70b9\u878d\u5408\u6210\u4e00\u4e2a\u70b9\u8003\u8651\u3002 \u5177\u4f53\u505a\u6cd5\u662f\u6c42 mst \u7684\u65f6\u5019\u5982\u679c\u6709\u76f8\u540c weight\uff0c\u8ba9\u53ef\u7231\u8fb9\u66f4\u9760\u524d\u3002 \u73b0\u5728\u6211\u4eec\u76f4\u63a5\u5bf9\u7740\u8fd9\u79cd\u60c5\u51b5\u83bd\uff0c\u5f53\u4e00\u4e2a\u659c\u7387\u5bf9\u5e94\u591a\u4e2a\u5207\u70b9\u7684\u65f6\u5019\uff0c\u6211\u4eec\u6c42\u51fa\u6765\u7684 \\(x\\) \u5e94\u8be5\u662f\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684 \\(x\\) \u91cc\u9762\u6700\u5927\u7684\u4e00\u4e2a\uff0c\u56e0\u4e3a\u6392\u5e8f\u7684\u65f6\u5019\u5df2\u7ecf\u8d2a\u5fc3\u5730\u8ba9\u53ef\u7231\u8fb9\u9009\u7684\u5c3d\u53ef\u80fd\u591a\u3002 \u4e8e\u662f\u540c\u4e00\u6761\u7ebf\u4e0a\u7684\u6240\u6709\u70b9\u7684\u5f71\u54cd\u90fd\u88ab\u8003\u8651\u5230\u8fd9\u6761\u7ebf\u4e0a\u6700\u9760\u540e\u7684\u4e00\u4e2a\u5207\u70b9\u4e0a\u4e86\uff01 \u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u53ea\u8003\u8651\u201c\u62d0\u70b9\u201d\u5373\u4e24\u8fb9\u659c\u7387\u4e0d\u7b49\u7684\u70b9\u4e86\u3002 \u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u505a\uff0c\u4e8c\u5206\u6ee1\u8db3 \\(x > Need\\) \u7684\u6240\u6709 \\(k\\) \u91cc\u6700\u5c0f\u7684\u90a3\u4e00\u4e2a\u3002 \u5f88\u663e\u7136 \\(Need\\) \u5bf9\u5e94\u7684\u5207\u70b9\u4e00\u5b9a\u5728\u8fd9\u6761\u7ebf\u4e0a\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u53cd\u8bc1\uff0c\u7136\u540e\u7b97 \\(f(Need)\\) \u5c31\u6bd4\u8f83\u7b80\u5355\u4e86\u3002 \u5047\u8bbe\u6211\u4eec\u6c42\u51fa\u6765\u7684\u70b9\u7684\u6a2a\u5750\u6807\u4e3a \\(x\\) \uff0c\u663e\u7136 \\(b = f(x) - kx = f(Need) - kNeed\\) \u6240\u4ee5 \\(f(Need) = f(x) - kx + kNeed\\) \uff0c\u4e5f\u5c31\u662f\u8bf4\u53ea\u9700\u8981\u6c42\u51fa\u6765 \\(x\\) \u5904\u7684\u622a\u8ddd\u7136\u540e\u52a0\u4e0a \\(kNeed\\) \u5373\u53ef\u3002 ref: - https://www.cnblogs.com/CreeperLKF/p/9045491.html - https://www.cnblogs.com/TianMeng-hyl/p/14972355.html \u60f3\u8981\u53bb\u7406\u89e3\u90a3\u4e2a\u81ea\u7136\u7684\u601d\u8003\u8fc7\u7a0b\u6709\u70b9\u96be\uff0c\u4f46\u662f\u503c\u5f97\u3002 \u4e4b\u524d\u7684\u4e0d\u77e5\u9053\u6709\u6ca1\u6709\u505a\u5230\uff0c\u4e0d\u8fc7\u56de\u987e\u7684\u65f6\u5019\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e00\u4e0b\u3002","title":"Wqs old"},{"location":"algor/misc/wqs-old/#_1","text":"\u5047\u5b9a\u4f60\u6709\u4e00\u4e2a\u9650\u5236\u53c2\u6570 \\(k\\) \uff0c\u4f60\u8981\u6c42 \\(ans(k)\\) \uff0c\u4f46\u662f \\(ans(k)\\) \u6c42\u8d77\u6765\u662f hard \u7684\u3002 \u4f46\u662f\u53ef\u4ee5\u5feb\u901f\u7684\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(x\\) \u6c42\u51fa \\(\\max/\\min\\{ans(i)-ix\\}\\) \uff0c\u4e14 \\(ans\\) \u662f\u51f8\u7684\uff0c\u90a3\u4e48\u4e8c\u5206\u8fd9\u4e2a \\(x\\) \u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u4e3a\u5982\u679c \\(ans\\) \u662f\u51f8\u7684\uff0c\u80fd\u53d6\u5230\u7684\u6700\u4f18\u7684 \\(i\\) \u5c31\u662f\u5173\u4e8e \\(x\\) \u5355\u8c03\u7684\uff0c\u8fd9\u4e2a\u5c31\u53ef\u4ee5\u4e8c\u5206\u4e86\u3002 \u8fd9\u662f _rqy \u59d0\u59d0\u8bf4\u7684\uff0c\u597d\u50cf\u5bf9\u6211\u8fd9\u79cd\u7b28\u86cb\u6765\u8bf4\u4e0d\u662f\u5f88\u76f4\u89c2\u3002","title":"\u6cdb\u5316"},{"location":"algor/misc/wqs-old/#_2","text":"\u7ed9\u5b9a \\(m\\) \u6761\u8fb9\uff0c \\(n\\) \u4e2a\u70b9\uff0c\u6bcf\u6761\u8fb9\u53ef\u80fd\u662f\u53ef\u7231\u8fb9\u6216\u8005\u4e0d\u53ef\u7231\u8fb9\u3002 \u6c42\u6070\u597d\u6709 \\(Need\\) \u6761\u53ef\u7231\u8fb9\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002 \u8fd9\u4e2a\u76f4\u63a5\u5199\u4e00\u4e2a \\(dp\\) \u6765\u505a\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u590d\u6742\u5ea6\u4e0a\u5929\u3002 \u4e8e\u662f\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u7c7b\u4f3c\u4e4b\u524d\u67d0\u9053 ds \u4f18\u5316 dp \u7684\u9898\u76ee\u7684\u601d\u8def\uff0c\u8bbe \\(f(i)\\) \u8868\u793a \u6070\u597d \u9009\u4e86 \\(i\\) \u6761\u53ef\u7231\u8fb9\u7684\u6700\u5c0f\u751f\u6210\u6811\u7684\u6743\u503c\u548c\u3002 \u7136\u540e\u6ce8\u610f\u5230 \\(f\\) \u662f\u4e0b\u51f8\u7684\uff0c\u6240\u4ee5\u6bcf\u4e00\u4e2a\u659c\u7387\u80fd\u591f\u6620\u5c04\u5230\u4e00\u4e2a\u5207\u70b9\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u62ff\u4e00\u6761\u76f4\u7ebf\u53bb\u5207 \\(f\\) \u7684\u56fe\u50cf\uff0c\u5c1d\u8bd5\u627e\u5230 \\(f(Need)\\) \uff0c\u4f46\u662f\u8fd9\u4e0d\u662f\u80fd\u4e00\u6b65\u5230\u4f4d\u7684\u4e8b\u60c5\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u662f\u77e5\u9053 \\(f\\) \u4e00\u5b9a\u4e0b\u51f8\uff0c\u6211\u4eec\u4e0d\u77e5\u9053\u5b83\u5177\u4f53\u662f\u4ec0\u4e48\u6837\u7684\u3002 \u53d1\u73b0\u6839\u636e\u4e0b\u51f8\u51fd\u6570\u7684\u6027\u8d28\uff0c\u5f53 \\(i\\) \u589e\u52a0\u7684\u65f6\u5019\uff0c\u5bf9\u5e94\u5207\u7ebf\u7684\u659c\u7387\u662f\u5355\u8c03\u4e0d\u964d\u7684\u3002 \u4e5f\u5c31\u662f\u8bf4\u659c\u7387\u5355\u8c03\uff0c\u5207\u70b9\u4e5f\u5355\u8c03\uff0c\u800c\u6211\u4eec\u968f\u4fbf\u7ed9\u4e00\u4e2a \\(k\\) \u5207\u51fa\u6765\u7684\u5207\u70b9\u6a2a\u5750\u6807\u4e0d\u4e00\u5b9a\u662f \\(Need\\) \uff0c\u4e8e\u662f\u6211\u4eec\u60f3 check\uff0c\u4e5f\u5c31\u60f3\u5bf9\u4e8e\u4e00\u4e2a \\(k\\) \u6c42\u51fa \\(x\\) \uff0c\u987a\u4fbf\u6c42 \\(f(x)\\) \u3002 \u6240\u4ee5\u6211\u4eec\u9700\u8981\u5efa\u7acb\u6620\u5c04\u5173\u7cfb\u3002 \u6211\u4eec\u53d1\u73b0\u56fa\u5b9a\u7684\u659c\u7387\u5bf9 \\(f(x)\\) \u7684\u5207\u70b9\u662f\u56fa\u5b9a\u7684\uff08\u4f7f\u5f97\u622a\u8ddd\u6700\u5927\u7684\u90a3\u4e2a\u70b9\uff09\uff0c\u90a3\u4e48\u5207\u7ebf\u5c31\u56fa\u5b9a\uff0c\u6362\u53e5\u8bdd\u8bf4\u622a\u8ddd\u5c31\u56fa\u5b9a\u3002 \u6211\u4eec\u5c31\u5efa\u7acb\u4e86\u4e00\u4e2a\u4ece \\(k \\to x \\to b\\) \u7684\u6620\u5c04\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53ef\u4ee5\u5728\u56fa\u5b9a \\(k\\) \u7684\u60c5\u51b5\u4e0b\uff0c\u6c42\u51fa\u8fd9\u4e2a\u5207\u70b9\uff0c\u5e76\u6c42\u51fa\u622a\u8ddd\u3002 \u53cd\u8fc7\u6765\u5c31\u662f\u8bf4\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u622a\u8ddd\u6c42\u51fa\u5207\u70b9\uff0c\u8fdb\u4e00\u6b65\u6c42\u51fa \\(f(x)\\) \uff0c\u5177\u4f53\u89e3\u91ca\u5982\u4e0b\uff1a \u5c1d\u8bd5\u5316\u4e00\u4e0b\u67ff\u5b50\uff1a \\(f(x) = kx + b \\iff b = f(x) - kx\\) \u3002 \u6ce8\u610f\u5230 \\(b\\) \u6700\u4f18\u7684\u65f6\u5019\uff0c\u6211\u4eec\u6309\u67ff\u5b50\u6c42\u51fa\u7684\u8fd9\u4e2a \\(f(x)\\) \u4e00\u5b9a\u662f\u6700\u4f18\u7684\uff08\u4e5f\u5c31\u662f\u5b9e\u9645\u7684 \\(f\\) \u503c\uff09\uff08\u8fd9\u4e2a\u663e\u7136\uff0c\u6211\u4eec\u662f\u5efa\u7acb\u4e86\u6620\u5c04\u5173\u7cfb\u7684\uff09\u3002 \u6240\u4ee5\u6c42\u51fa \\(\\min\\{b\\}\\) \u7b49\u4ef7\u4e8e\u6c42\u51fa \\(f(x)\\) \uff0c\u4e3a\u4ec0\u4e48\u8981\u505a\u8fd9\u4e00\u6b65\u8f6c\u5316\u5462\uff1f \u6ce8\u610f\u5230\uff0c\u5176\u5b9e \\(\\min\\{b\\}\\) \u7b49\u4ef7\u4e8e\u8003\u8651\u7ed9\u6bcf\u6761\u8fb9\u90fd\u51cf\u53bb\u4e00\u4e2a \\(k\\) \uff0c\u6c42\u6070\u597d\u9009\u4e86 \\(x\\) \u6761\u53ef\u7231\u8fb9\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002 \u6211\u4eec\u521a\u624d\u8bf4\u4e86\uff0c\u659c\u7387\u56fa\u5b9a\uff0c \\(\\min\\{b\\}\\) \u4e5f\u662f\u56fa\u5b9a\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u5bf9\u4e8e\u4e00\u4e2a \\(k\\) \uff0c\u4e0d\u7ba1\u4ed6\u7684\u9650\u5236\u5982\u4f55\uff0c\u6211\u4eec\u6c42 mst \u6c42\u51fa\u6765\u7684\u6743\u503c\u548c\u4e5f\u5c31\u662f\u56fa\u5b9a\u7684\uff01 \u90a3\u4e48\u8fd9\u4e2a\u9009 \\(x\\) \u4e2a\u7684\u9650\u5236\u5c31\u88ab\u76f4\u63a5\u53bb\u9664\uff0c\u6c42 \\(f(x)\\) \u5c31\u53ef\u4ee5\u8f6c\u5316\u4e3a\u6ca1\u6709\u9650\u5236\u7684\u60c5\u51b5\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206 \\(k\\) \uff0c\u5bf9\u4e8e\u6bcf\u4e2a \\(k\\) \u7b97\u4e00\u4e0b \\(b \\to f(x) \\to x\\) \u3002 \u7136\u540e check \u4e00\u4e0b \\(x\\) \u548c \\(Need\\) \u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u8c03\u6574 \\(k\\) \u5c31\u53ef\u4ee5\u4e8c\u5206\u5230 \\(Need\\) \u4e86\uff01 \u4f46\u662f\u6ce8\u610f\u5230\uff0c\u5176\u5b9e\u659c\u7387\u548c\u5207\u70b9\u5e76\u4e0d\u4e00\u5b9a\u80fd\u5efa\u7acb\u51fd\u6570\u5173\u7cfb\uff0c\u56e0\u4e3a\u4e00\u4e2a\u659c\u7387\u53ef\u4ee5\u5bf9\u5e94\u591a\u4e2a\u5207\u70b9\uff0c\u6bd4\u5982\u4e0b\u56fe\u7684\u60c5\u51b5\uff0c\u6709\u53ef\u80fd\u51fa\u73b0\u4e00\u4e2a\u70b9\u4e24\u8fb9\u7684\u659c\u7387\u76f8\u7b49\u7684\u60c5\u51b5\u3002 \u56fe\u6e90 https://www.cnblogs.com/TianMeng-hyl/p/14972355.html \u3002 \u8bf7\u8bfb\u8005\u628a\u5b83\u4eec\u90fd\u5f53\u6210\u6574\u70b9\uff0c\u8fd9\u91cc\u662f\u611f\u6027\u7684\uff0c\u672c\u9898 \\(f(i)\\) \u663e\u7136\u662f > 0 \u7684\u3002 \u90a3\u4e48\u73b0\u5728\u8981\u505a\u7684\u5c31\u662f\u89e3\u51b3\u8fd9\u4e2a\u4e00\u5bf9\u591a\u7684\u95ee\u9898\uff0c\u4e00\u79cd\u5e38\u89c1\u7684\u89e3\u51b3\u7b56\u7565\u662f\uff0c\u6211\u4eec\u628a\u8fd9\u591a\u4e2a\u70b9\u878d\u5408\u6210\u4e00\u4e2a\u70b9\u8003\u8651\u3002 \u5177\u4f53\u505a\u6cd5\u662f\u6c42 mst \u7684\u65f6\u5019\u5982\u679c\u6709\u76f8\u540c weight\uff0c\u8ba9\u53ef\u7231\u8fb9\u66f4\u9760\u524d\u3002 \u73b0\u5728\u6211\u4eec\u76f4\u63a5\u5bf9\u7740\u8fd9\u79cd\u60c5\u51b5\u83bd\uff0c\u5f53\u4e00\u4e2a\u659c\u7387\u5bf9\u5e94\u591a\u4e2a\u5207\u70b9\u7684\u65f6\u5019\uff0c\u6211\u4eec\u6c42\u51fa\u6765\u7684 \\(x\\) \u5e94\u8be5\u662f\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684 \\(x\\) \u91cc\u9762\u6700\u5927\u7684\u4e00\u4e2a\uff0c\u56e0\u4e3a\u6392\u5e8f\u7684\u65f6\u5019\u5df2\u7ecf\u8d2a\u5fc3\u5730\u8ba9\u53ef\u7231\u8fb9\u9009\u7684\u5c3d\u53ef\u80fd\u591a\u3002 \u4e8e\u662f\u540c\u4e00\u6761\u7ebf\u4e0a\u7684\u6240\u6709\u70b9\u7684\u5f71\u54cd\u90fd\u88ab\u8003\u8651\u5230\u8fd9\u6761\u7ebf\u4e0a\u6700\u9760\u540e\u7684\u4e00\u4e2a\u5207\u70b9\u4e0a\u4e86\uff01 \u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u53ea\u8003\u8651\u201c\u62d0\u70b9\u201d\u5373\u4e24\u8fb9\u659c\u7387\u4e0d\u7b49\u7684\u70b9\u4e86\u3002 \u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u505a\uff0c\u4e8c\u5206\u6ee1\u8db3 \\(x > Need\\) \u7684\u6240\u6709 \\(k\\) \u91cc\u6700\u5c0f\u7684\u90a3\u4e00\u4e2a\u3002 \u5f88\u663e\u7136 \\(Need\\) \u5bf9\u5e94\u7684\u5207\u70b9\u4e00\u5b9a\u5728\u8fd9\u6761\u7ebf\u4e0a\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u53cd\u8bc1\uff0c\u7136\u540e\u7b97 \\(f(Need)\\) \u5c31\u6bd4\u8f83\u7b80\u5355\u4e86\u3002 \u5047\u8bbe\u6211\u4eec\u6c42\u51fa\u6765\u7684\u70b9\u7684\u6a2a\u5750\u6807\u4e3a \\(x\\) \uff0c\u663e\u7136 \\(b = f(x) - kx = f(Need) - kNeed\\) \u6240\u4ee5 \\(f(Need) = f(x) - kx + kNeed\\) \uff0c\u4e5f\u5c31\u662f\u8bf4\u53ea\u9700\u8981\u6c42\u51fa\u6765 \\(x\\) \u5904\u7684\u622a\u8ddd\u7136\u540e\u52a0\u4e0a \\(kNeed\\) \u5373\u53ef\u3002 ref: - https://www.cnblogs.com/CreeperLKF/p/9045491.html - https://www.cnblogs.com/TianMeng-hyl/p/14972355.html \u60f3\u8981\u53bb\u7406\u89e3\u90a3\u4e2a\u81ea\u7136\u7684\u601d\u8003\u8fc7\u7a0b\u6709\u70b9\u96be\uff0c\u4f46\u662f\u503c\u5f97\u3002 \u4e4b\u524d\u7684\u4e0d\u77e5\u9053\u6709\u6ca1\u6709\u505a\u5230\uff0c\u4e0d\u8fc7\u56de\u987e\u7684\u65f6\u5019\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e00\u4e0b\u3002","title":"\u4f8b\u9898"},{"location":"algor/misc/wqs/","text":"\u4e4b\u524d\u521a\u5b66\u4e8c\u5206\u7684\u65f6\u5019\u505a\u8fc7\u4e00\u9053\u53eb Tree I \u7684\u9898\u76ee\uff0c\u611f\u89c9\u5f88\u6709\u610f\u601d\uff0c\u4e0d\u8fc7\u5f53\u65f6\u4e5f\u6ca1\u600e\u4e48\u6df1\u7a76\u3002 \u6628\u5929\u5728 uoj \u7fa4\u56de\u7b54\u95ee\u9898\u7684\u65f6\u5019\u5f97\u5230\u4e86\u6e05\u82b7\u59d0\u59d0\u7684\u6559\u5bfc\uff0c\u77e5\u9053\u4e86\u8fd9\u73a9\u610f\u513f\u5c31\u662f wqs \u4e8c\u5206\uff0c\u56e0\u4e3a\u4e4b\u524d\u5c31\u5bf9\u8fd9\u4e2a\u7cbe\u5999\u7684\u5957\u8def\u5f88\u611f\u5174\u8da3\u4e86\uff0c\u4e8e\u662f\u51b3\u5b9a\u5b66\u4e60\u4e00\u4e0b\u3002 \u6cdb\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5047\u5b9a\u4f60\u6709\u4e00\u4e2a\u9650\u5236\u53c2\u6570 \\(k\\) \uff0c\u4f60\u8981\u6c42 \\(ans(k)\\) \uff0c\u4f46\u662f \\(ans(k)\\) \u6c42\u8d77\u6765\u662f hard \u7684\u3002 \u4f46\u662f\u53ef\u4ee5\u5feb\u901f\u7684\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(x\\) \u6c42\u51fa \\(\\max/\\min\\{ans(i)-ix\\}\\) \uff0c\u4e14 \\(ans\\) \u662f\u51f8\u7684\uff0c\u90a3\u4e48\u4e8c\u5206\u8fd9\u4e2a \\(x\\) \u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u4e3a\u5982\u679c \\(ans\\) \u662f\u51f8\u7684\uff0c\u80fd\u53d6\u5230\u7684\u6700\u4f18\u7684 \\(i\\) \u5c31\u662f\u5173\u4e8e \\(x\\) \u5355\u8c03\u7684\uff0c\u8fd9\u4e2a\u5c31\u53ef\u4ee5\u4e8c\u5206\u4e86\u3002 \u8fd9\u662f _rqy \u59d0\u59d0\u8bf4\u7684\uff0c\u597d\u50cf\u5bf9\u6211\u8fd9\u79cd\u7b28\u86cb\u6765\u8bf4\u4e0d\u662f\u5f88\u76f4\u89c2\u3002 \u6240\u4ee5\u8fd8\u662f\u770b\u4e2a\u4f8b\u9898\u4f1a\u6bd4\u8f83\u597d\u3002 \u4f8b\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 source: Tree I ,by WJMZBMR \u7ed9\u5b9a \\(m\\) \u6761\u8fb9\uff0c \\(n\\) \u4e2a\u70b9\uff0c\u6bcf\u6761\u8fb9\u53ef\u80fd\u662f\u53ef\u7231\u8fb9\u6216\u8005\u4e0d\u53ef\u7231\u8fb9\u3002 \u6c42\u6070\u597d\u6709 \\(e\\) \u6761\u53ef\u7231\u8fb9\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002 \u9996\u5148\u4e00\u4e2a\u6bd4\u8f83\u66b4\u529b\u7684\u505a\u6cd5\u5c31\u662f\u8bbe \\(dp(i, j)\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u9009 \\(j\\) \u4e2a\u53ef\u7231\u8fb9\u7684 mst\u3002 \u4f46\u662f\u8fd9\u6837\u590d\u6742\u5ea6\u663e\u7136\u4e0a\u5929\u4e86\u5427\uff01\uff01 \u4e8e\u662f\u7c7b\u4f3c\u4e4b\u524d\u67d0\u4e2a ds \u4f18\u5316 dp \u7684\u9898\uff0c\u6211\u4eec\u8bbe \\(f(i)\\) \u8868\u793a\u9009\u4e86 \\(i\\) \u6761\u53ef\u7231\u8fb9\u7684 mst\uff0c\u8981\u6c42\u7684\u7b54\u6848\u5c31\u662f \\(f(e)\\) \u3002 \u6ce8\u610f\u5230\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u7ed9\u5b9a\u4e0b\u6807\u6c42\u51fa \\(f\\) \uff0c\u8fd9\u4e2a\u662f\u56f0\u96be\u7684\u3002 \u4f46\u662f\u53ef\u4ee5\u53d1\u73b0 \\(f\\) \u662f\u4e00\u4e2a\u4e0b\u51f8\u7684\u51fd\u6570\uff08\u8bc1\u660e\u5148\u5495\u5495\u5495\u4e00\u4e0b\uff09\u3002 \u4e5f\u5c31\u662f\u957f\u6210\u8fd9\u6837\uff1a \u56fe\u6e90 https://www.cnblogs.com/TianMeng-hyl/p/14972355.html \u3002 \u8bf7\u8bfb\u8005\u628a\u5b83\u4eec\u90fd\u5f53\u6210\u6574\u70b9\uff0c\u8fd9\u91cc\u662f\u611f\u6027\u7684\uff0c\u672c\u9898 \\(f(i)\\) \u663e\u7136\u662f > 0 \u7684\u3002 \u4e8e\u662f\u6709\u4e00\u79cd\u60f3\u6cd5\u662f\uff0c\u62c9\u4e00\u6761\u76f4\u7ebf\u6765\u5207\u8fd9\u4e2a\u51f8\u5305\uff0c\u7136\u540e\u663e\u7136\u6bcf\u4e2a\u659c\u7387\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u5207\u70b9\u6216\u8005\u591a\u4e2a\u5207\u70b9\uff0c\u6211\u4eec\u5148\u4e0d\u8003\u8651\u591a\u4e2a\u5207\u70b9\uff0c\u4e5f\u5c31\u662f\u5047\u8bbe\u6bcf\u4e00\u4e2a \\((i, f(i))\\) \u7684\u4e24\u8fb9\u659c\u7387\u90fd\u4e0d\u7b49\u3002 \u6211\u4eec\u662f\u4e0d\u77e5\u9053 \\(f\\) \u5177\u4f53\u957f\u4ec0\u4e48\u6837\u7684\uff0c\u6211\u4eec\u53ea\u77e5\u9053\u4ed6\u662f\u4e00\u4e2a\u51f8\u5305\u7684\u5f62\u5f0f\uff0c\u6211\u4eec\u8981\u60f3\u529e\u6cd5\u6c42\u51fa\u6765\u3002 \u6ce8\u610f\u5230\u5bf9\u4e8e\u4e0b\u51f8\u51fd\u6570\uff0c\u5f53 \\(i\\) \u589e\u52a0\u7684\u65f6\u5019\uff0c\u5207\u7ebf\u659c\u7387 \\(k\\) \u662f\u5355\u8c03\u9012\u589e\u7684\uff0c\u5e76\u4e14\u6b64\u65f6\u4e00\u4e2a \\(k\\) \u4e00\u5b9a\u5bf9\u5e94\u4e00\u4e2a\u5207\u70b9\u3002 \u6240\u4ee5\u6211\u4eec\u6709\u4e00\u4e2a\u60f3\u6cd5\u662f\uff0c\u80fd\u4e0d\u80fd\u5bf9\u4e8e\u4e00\u4e2a \\(k\\) \u6c42\u51fa\u5b83\u5bf9\u5e94\u7684\u5207\u70b9\u5462\uff1f \u8fd9\u6837\u56e0\u4e3a \\(k\\) \u968f\u7740 \\(x\\) \u5355\u8c03\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u4e8c\u5206\u6c42\u51fa \\(e\\) \u5bf9\u5e94\u7684 \\(k\\) \u8fdb\u800c\u6c42\u51fa \\(f(e)\\) \u4e86\uff01 \u7136\u540e\u5176\u5b9e\u6574\u4e2a\u95ee\u9898\u7684\u6700\u96be\u70b9\u662f\u5982\u4f55\u5728\u6709\u9650\u5236\u7684\u60c5\u51b5\u4e0b\u6c42\u51fa mst\u3002 \u4e8e\u662f\u6709\u4e86\u4e00\u4e2a\u5f88\u725b\u903c\u7684\u60f3\u6cd5\u3002 \u6ce8\u610f\u5230 \\(f(x) = kx + b\\) \uff0c\u5176\u4e2d \\(b\\) \u4e3a\u5207\u7ebf\u7684\u622a\u8ddd\u3002 \u56e0\u4e3a \\(b = f(x) - kx\\) \uff0c\u7531\u51e0\u4f55/\u4ee3\u6570\u610f\u4e49\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e2a \\(b\\) \u548c \\(k\\) \u662f \u5bf9\u5e94 \u7684\uff01 \u7136\u540e\u6700\u795e\u5947\u7684\u6765\u4e86\uff0c\u6ce8\u610f\u5230 \\(b\\) \u672c\u8d28\u4e0a\u662f\u7ed9\u6bcf\u4e2a\u53ef\u7231\u8fb9\u51cf\u53bb\u4e00\u4e2a \\(k\\) \uff0c\u7136\u540e\u518d\u6c42\u6709\u9650\u5236\u7684 mst\uff0c\u56e0\u4e3a\u521a\u624d\u8bf4\u4e86\uff0c \\(b\\) \u548c \\(k\\) \u662f\u5bf9\u5e94\u7684\uff0c\u6240\u4ee5\u5176\u5b9e\u5c31\u7b97\u6ca1\u6709\u9650\u5236\uff0c\u51cf\u5b8c\u4e4b\u540e\u6211\u4eec\u76f4\u63a5\u6c42 mst \u6c42\u51fa\u6765\u4e5f\u4e00\u5b9a\u6ee1\u8db3\u8fd9\u4e2a\u9009 \\(x\\) \u6761\u7684\u9650\u5236\uff01 \u6240\u4ee5\u8bf4\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7b80\u5355\u6c42\u51fa \\(b\\) \uff0c\u52a0\u4e0a \\(kx\\) \u4e4b\u540e\u5c31\u80fd\u5bf9\u4e8e\u4e00\u4e2a \\(k\\) \u6c42\u51fa \\(f(x)\\) \u4e86\uff01 \u6240\u4ee5\u6211\u4eec\u5c31\u53ea\u9700\u8981\u4e8c\u5206 \\(k\\) \uff0c\u7136\u540e\u6c42 \\(b\\) \u8fdb\u800c\u6c42 \\(f(x)\\) \uff0c\u53cd\u4ee3\u56de\u53bb\u6c42\u51fa \\(x\\) \uff0c\u7136\u540e\u521a\u624d\u8bf4\u4e86 \\(k\\) \u968f\u7740 \\(x\\) \u5355\u8c03\uff0c\u53cd\u8fc7\u6765\u4e5f\u662f\u4e00\u6837\u7684\u3002 \u6240\u4ee5\u6bcf\u6b21\u6c42\u5b8c\u4e4b\u540e\u6bd4\u8f83\u4e00\u4e0b \\(x\\) \u548c \\(e\\) \u8fdb\u800c\u8c03\u6574 \\(k\\) \u5373\u53ef\u3002 But\uff0c\u8fd9\u53ea\u662f\u6700\u7b80\u5355\u7684\u60c5\u51b5 \u6ce8\u610f\u5230\u5176\u5b9e\u659c\u7387\u548c\u5207\u70b9\u5e76\u4e0d\u4e00\u5b9a\u80fd\u5efa\u7acb\u51fd\u6570\u5173\u7cfb\uff0c\u56e0\u4e3a\u4e00\u4e2a\u659c\u7387\u53ef\u4ee5\u5bf9\u5e94\u591a\u4e2a\u5207\u70b9\uff0c\u6bd4\u5982\u521a\u624d\u7684\u60c5\u51b5\uff0c\u6709\u53ef\u80fd\u51fa\u73b0\u4e00\u4e2a\u70b9\u4e24\u8fb9\u7684\u659c\u7387\u76f8\u7b49\u7684\u60c5\u51b5\u3002 \u90a3\u4e48\u73b0\u5728\u8981\u505a\u7684\u5c31\u662f\u89e3\u51b3\u8fd9\u4e2a\u4e00\u5bf9\u591a\u7684\u95ee\u9898\u3002 \u4e00\u79cd\u5e38\u89c1\u7684\u89e3\u51b3\u7b56\u7565\u662f\uff0c\u6211\u4eec\u628a\u8fd9\u591a\u4e2a\u70b9\u878d\u5408\u6210\u4e00\u4e2a\u70b9\u8003\u8651\u3002 \u5177\u4f53\u505a\u6cd5\u662f\u6c42 mst \u7684\u65f6\u5019\u5982\u679c\u6709\u76f8\u540c weight\uff0c\u8ba9\u53ef\u7231\u8fb9\u66f4\u9760\u524d\u3002 \u73b0\u5728\u6211\u4eec\u76f4\u63a5\u5bf9\u7740\u8fd9\u79cd\u60c5\u51b5\u83bd\uff0c\u5f53\u4e00\u4e2a\u659c\u7387\u5bf9\u5e94\u591a\u4e2a\u5207\u70b9\u7684\u65f6\u5019\uff0c\u6211\u4eec\u6c42\u51fa\u6765\u7684 \\(x\\) \u5e94\u8be5\u662f\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684 \\(x\\) \u91cc\u9762\u6700\u5927\u7684\u4e00\u4e2a\uff0c\u56e0\u4e3a\u6392\u5e8f\u7684\u65f6\u5019\u5df2\u7ecf\u8d2a\u5fc3\u5730\u8ba9\u53ef\u7231\u8fb9\u9009\u7684\u5c3d\u53ef\u80fd\u591a\u3002 \u4e8e\u662f\u540c\u4e00\u6761\u7ebf\u4e0a\u7684\u6240\u6709\u70b9\u7684\u5f71\u54cd\u90fd\u88ab\u8003\u8651\u5230\u8fd9\u6761\u7ebf\u4e0a\u6700\u9760\u540e\u7684\u4e00\u4e2a\u5207\u70b9\u4e0a\u4e86\uff01 \u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u53ea\u8003\u8651\u201c\u62d0\u70b9\u201d\u5373\u4e24\u8fb9\u659c\u7387\u4e0d\u7b49\u7684\u70b9\u4e86\u3002 \u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u505a\uff0c\u4e8c\u5206\u6ee1\u8db3 \\(x > e\\) \u7684\u6240\u6709 \\(k\\) \u91cc\u6700\u5c0f\u7684\u90a3\u4e00\u4e2a\u3002 \u5f88\u663e\u7136 \\(e\\) \u5bf9\u5e94\u7684\u5207\u70b9\u4e00\u5b9a\u5728\u8fd9\u6761\u7ebf\u4e0a\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u53cd\u8bc1\uff0c\u7136\u540e\u7b97 \\(f(e)\\) \u5c31\u6bd4\u8f83\u7b80\u5355\u4e86\u3002 \u5047\u8bbe\u6211\u4eec\u6c42\u51fa\u6765\u7684\u70b9\u7684\u6a2a\u5750\u6807\u4e3a \\(x\\) \uff0c\u663e\u7136 \\(b = f(x) - kx = f(e) - ke\\) \u6240\u4ee5 \\(f(e) = f(x) - kx + ke\\) \uff0c\u4e5f\u5c31\u662f\u8bf4\u53ea\u9700\u8981\u6c42\u51fa\u6765 \\(x\\) \u5904\u7684\u622a\u8ddd\u7136\u540e\u52a0\u4e0a \\(ke\\) \u5373\u53ef\u3002 Code 1 // No code was here! \u8fd9\u4e2a\u53ea\u662f\u6700\u57fa\u7840\u7684\u5e94\u7528\uff0c\u5176\u5b83\u7684\u4ee5\u540e\u6709\u65f6\u95f4\u5c31\u8865\u4e0a\u3002 ref: https://www.cnblogs.com/CreeperLKF/p/9045491.html https://www.cnblogs.com/TianMeng-hyl/p/14972355.html \u53e6\u5916\u5199\u8fd9\u4e2a\u7684\u65f6\u5019\u6211\u5220\u6539\u4e86\u5f88\u591a\u6b21\u3002 \u5176\u5b9e\u5c31\u662f\u60f3\u628a\u8fd9\u4e2a\u4e1c\u897f\u662f\u600e\u4e48\u6765\u7684\u8bf4\u6e05\u695a\uff0c\u8bf4\u7684\u522b\u4eba\u80fd\u542c\u61c2\uff0c\u4e5f\u95ee\u4e0d\u5012\u6211\u3002 \u7136\u540e\u5c31\u82b1\u4e86\u4e0d\u5c11\u65f6\u95f4\uff0c\u7ec8\u4e8e\u641e\u61c2\u4e86\u3002 \u4f46\u662f\u8bf4\u7684\u65f6\u5019\u5c31\u6709\u70b9\u90a3\u5565\uff0c\u5199\u4e86 4k \u5168\u90e8\u90fd\u6ce8\u91ca\u6389\u4e86\u3002 \u6240\u4ee5\u8fd9\u91cc\u8981\u7279\u522b\u611f\u8c22 \\(2 \\times \\text{mid}(\\texttt{'sxp'+'uzr'})\\) \u5c0f\u5929\u4f7f\u3002 \u662f\u4ed6\u8ba9\u6211\u7a81\u7136\u601d\u8def\u5982\u6cc9\u6d8c\uff0c\u5199\u51fa\u4e86\u8fd9\u7bc7 post\uff01 wwwww","title":"Wqs \u4e8c\u5206"},{"location":"algor/misc/wqs/#_1","text":"\u5047\u5b9a\u4f60\u6709\u4e00\u4e2a\u9650\u5236\u53c2\u6570 \\(k\\) \uff0c\u4f60\u8981\u6c42 \\(ans(k)\\) \uff0c\u4f46\u662f \\(ans(k)\\) \u6c42\u8d77\u6765\u662f hard \u7684\u3002 \u4f46\u662f\u53ef\u4ee5\u5feb\u901f\u7684\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(x\\) \u6c42\u51fa \\(\\max/\\min\\{ans(i)-ix\\}\\) \uff0c\u4e14 \\(ans\\) \u662f\u51f8\u7684\uff0c\u90a3\u4e48\u4e8c\u5206\u8fd9\u4e2a \\(x\\) \u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u4e3a\u5982\u679c \\(ans\\) \u662f\u51f8\u7684\uff0c\u80fd\u53d6\u5230\u7684\u6700\u4f18\u7684 \\(i\\) \u5c31\u662f\u5173\u4e8e \\(x\\) \u5355\u8c03\u7684\uff0c\u8fd9\u4e2a\u5c31\u53ef\u4ee5\u4e8c\u5206\u4e86\u3002 \u8fd9\u662f _rqy \u59d0\u59d0\u8bf4\u7684\uff0c\u597d\u50cf\u5bf9\u6211\u8fd9\u79cd\u7b28\u86cb\u6765\u8bf4\u4e0d\u662f\u5f88\u76f4\u89c2\u3002 \u6240\u4ee5\u8fd8\u662f\u770b\u4e2a\u4f8b\u9898\u4f1a\u6bd4\u8f83\u597d\u3002","title":"\u6cdb\u5316"},{"location":"algor/misc/wqs/#_2","text":"source: Tree I ,by WJMZBMR \u7ed9\u5b9a \\(m\\) \u6761\u8fb9\uff0c \\(n\\) \u4e2a\u70b9\uff0c\u6bcf\u6761\u8fb9\u53ef\u80fd\u662f\u53ef\u7231\u8fb9\u6216\u8005\u4e0d\u53ef\u7231\u8fb9\u3002 \u6c42\u6070\u597d\u6709 \\(e\\) \u6761\u53ef\u7231\u8fb9\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002 \u9996\u5148\u4e00\u4e2a\u6bd4\u8f83\u66b4\u529b\u7684\u505a\u6cd5\u5c31\u662f\u8bbe \\(dp(i, j)\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u9009 \\(j\\) \u4e2a\u53ef\u7231\u8fb9\u7684 mst\u3002 \u4f46\u662f\u8fd9\u6837\u590d\u6742\u5ea6\u663e\u7136\u4e0a\u5929\u4e86\u5427\uff01\uff01 \u4e8e\u662f\u7c7b\u4f3c\u4e4b\u524d\u67d0\u4e2a ds \u4f18\u5316 dp \u7684\u9898\uff0c\u6211\u4eec\u8bbe \\(f(i)\\) \u8868\u793a\u9009\u4e86 \\(i\\) \u6761\u53ef\u7231\u8fb9\u7684 mst\uff0c\u8981\u6c42\u7684\u7b54\u6848\u5c31\u662f \\(f(e)\\) \u3002 \u6ce8\u610f\u5230\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u7ed9\u5b9a\u4e0b\u6807\u6c42\u51fa \\(f\\) \uff0c\u8fd9\u4e2a\u662f\u56f0\u96be\u7684\u3002 \u4f46\u662f\u53ef\u4ee5\u53d1\u73b0 \\(f\\) \u662f\u4e00\u4e2a\u4e0b\u51f8\u7684\u51fd\u6570\uff08\u8bc1\u660e\u5148\u5495\u5495\u5495\u4e00\u4e0b\uff09\u3002 \u4e5f\u5c31\u662f\u957f\u6210\u8fd9\u6837\uff1a \u56fe\u6e90 https://www.cnblogs.com/TianMeng-hyl/p/14972355.html \u3002 \u8bf7\u8bfb\u8005\u628a\u5b83\u4eec\u90fd\u5f53\u6210\u6574\u70b9\uff0c\u8fd9\u91cc\u662f\u611f\u6027\u7684\uff0c\u672c\u9898 \\(f(i)\\) \u663e\u7136\u662f > 0 \u7684\u3002 \u4e8e\u662f\u6709\u4e00\u79cd\u60f3\u6cd5\u662f\uff0c\u62c9\u4e00\u6761\u76f4\u7ebf\u6765\u5207\u8fd9\u4e2a\u51f8\u5305\uff0c\u7136\u540e\u663e\u7136\u6bcf\u4e2a\u659c\u7387\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u5207\u70b9\u6216\u8005\u591a\u4e2a\u5207\u70b9\uff0c\u6211\u4eec\u5148\u4e0d\u8003\u8651\u591a\u4e2a\u5207\u70b9\uff0c\u4e5f\u5c31\u662f\u5047\u8bbe\u6bcf\u4e00\u4e2a \\((i, f(i))\\) \u7684\u4e24\u8fb9\u659c\u7387\u90fd\u4e0d\u7b49\u3002 \u6211\u4eec\u662f\u4e0d\u77e5\u9053 \\(f\\) \u5177\u4f53\u957f\u4ec0\u4e48\u6837\u7684\uff0c\u6211\u4eec\u53ea\u77e5\u9053\u4ed6\u662f\u4e00\u4e2a\u51f8\u5305\u7684\u5f62\u5f0f\uff0c\u6211\u4eec\u8981\u60f3\u529e\u6cd5\u6c42\u51fa\u6765\u3002 \u6ce8\u610f\u5230\u5bf9\u4e8e\u4e0b\u51f8\u51fd\u6570\uff0c\u5f53 \\(i\\) \u589e\u52a0\u7684\u65f6\u5019\uff0c\u5207\u7ebf\u659c\u7387 \\(k\\) \u662f\u5355\u8c03\u9012\u589e\u7684\uff0c\u5e76\u4e14\u6b64\u65f6\u4e00\u4e2a \\(k\\) \u4e00\u5b9a\u5bf9\u5e94\u4e00\u4e2a\u5207\u70b9\u3002 \u6240\u4ee5\u6211\u4eec\u6709\u4e00\u4e2a\u60f3\u6cd5\u662f\uff0c\u80fd\u4e0d\u80fd\u5bf9\u4e8e\u4e00\u4e2a \\(k\\) \u6c42\u51fa\u5b83\u5bf9\u5e94\u7684\u5207\u70b9\u5462\uff1f \u8fd9\u6837\u56e0\u4e3a \\(k\\) \u968f\u7740 \\(x\\) \u5355\u8c03\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u4e8c\u5206\u6c42\u51fa \\(e\\) \u5bf9\u5e94\u7684 \\(k\\) \u8fdb\u800c\u6c42\u51fa \\(f(e)\\) \u4e86\uff01 \u7136\u540e\u5176\u5b9e\u6574\u4e2a\u95ee\u9898\u7684\u6700\u96be\u70b9\u662f\u5982\u4f55\u5728\u6709\u9650\u5236\u7684\u60c5\u51b5\u4e0b\u6c42\u51fa mst\u3002 \u4e8e\u662f\u6709\u4e86\u4e00\u4e2a\u5f88\u725b\u903c\u7684\u60f3\u6cd5\u3002 \u6ce8\u610f\u5230 \\(f(x) = kx + b\\) \uff0c\u5176\u4e2d \\(b\\) \u4e3a\u5207\u7ebf\u7684\u622a\u8ddd\u3002 \u56e0\u4e3a \\(b = f(x) - kx\\) \uff0c\u7531\u51e0\u4f55/\u4ee3\u6570\u610f\u4e49\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e2a \\(b\\) \u548c \\(k\\) \u662f \u5bf9\u5e94 \u7684\uff01 \u7136\u540e\u6700\u795e\u5947\u7684\u6765\u4e86\uff0c\u6ce8\u610f\u5230 \\(b\\) \u672c\u8d28\u4e0a\u662f\u7ed9\u6bcf\u4e2a\u53ef\u7231\u8fb9\u51cf\u53bb\u4e00\u4e2a \\(k\\) \uff0c\u7136\u540e\u518d\u6c42\u6709\u9650\u5236\u7684 mst\uff0c\u56e0\u4e3a\u521a\u624d\u8bf4\u4e86\uff0c \\(b\\) \u548c \\(k\\) \u662f\u5bf9\u5e94\u7684\uff0c\u6240\u4ee5\u5176\u5b9e\u5c31\u7b97\u6ca1\u6709\u9650\u5236\uff0c\u51cf\u5b8c\u4e4b\u540e\u6211\u4eec\u76f4\u63a5\u6c42 mst \u6c42\u51fa\u6765\u4e5f\u4e00\u5b9a\u6ee1\u8db3\u8fd9\u4e2a\u9009 \\(x\\) \u6761\u7684\u9650\u5236\uff01 \u6240\u4ee5\u8bf4\uff0c\u6211\u4eec\u53ea\u9700\u8981\u7b80\u5355\u6c42\u51fa \\(b\\) \uff0c\u52a0\u4e0a \\(kx\\) \u4e4b\u540e\u5c31\u80fd\u5bf9\u4e8e\u4e00\u4e2a \\(k\\) \u6c42\u51fa \\(f(x)\\) \u4e86\uff01 \u6240\u4ee5\u6211\u4eec\u5c31\u53ea\u9700\u8981\u4e8c\u5206 \\(k\\) \uff0c\u7136\u540e\u6c42 \\(b\\) \u8fdb\u800c\u6c42 \\(f(x)\\) \uff0c\u53cd\u4ee3\u56de\u53bb\u6c42\u51fa \\(x\\) \uff0c\u7136\u540e\u521a\u624d\u8bf4\u4e86 \\(k\\) \u968f\u7740 \\(x\\) \u5355\u8c03\uff0c\u53cd\u8fc7\u6765\u4e5f\u662f\u4e00\u6837\u7684\u3002 \u6240\u4ee5\u6bcf\u6b21\u6c42\u5b8c\u4e4b\u540e\u6bd4\u8f83\u4e00\u4e0b \\(x\\) \u548c \\(e\\) \u8fdb\u800c\u8c03\u6574 \\(k\\) \u5373\u53ef\u3002 But\uff0c\u8fd9\u53ea\u662f\u6700\u7b80\u5355\u7684\u60c5\u51b5 \u6ce8\u610f\u5230\u5176\u5b9e\u659c\u7387\u548c\u5207\u70b9\u5e76\u4e0d\u4e00\u5b9a\u80fd\u5efa\u7acb\u51fd\u6570\u5173\u7cfb\uff0c\u56e0\u4e3a\u4e00\u4e2a\u659c\u7387\u53ef\u4ee5\u5bf9\u5e94\u591a\u4e2a\u5207\u70b9\uff0c\u6bd4\u5982\u521a\u624d\u7684\u60c5\u51b5\uff0c\u6709\u53ef\u80fd\u51fa\u73b0\u4e00\u4e2a\u70b9\u4e24\u8fb9\u7684\u659c\u7387\u76f8\u7b49\u7684\u60c5\u51b5\u3002 \u90a3\u4e48\u73b0\u5728\u8981\u505a\u7684\u5c31\u662f\u89e3\u51b3\u8fd9\u4e2a\u4e00\u5bf9\u591a\u7684\u95ee\u9898\u3002 \u4e00\u79cd\u5e38\u89c1\u7684\u89e3\u51b3\u7b56\u7565\u662f\uff0c\u6211\u4eec\u628a\u8fd9\u591a\u4e2a\u70b9\u878d\u5408\u6210\u4e00\u4e2a\u70b9\u8003\u8651\u3002 \u5177\u4f53\u505a\u6cd5\u662f\u6c42 mst \u7684\u65f6\u5019\u5982\u679c\u6709\u76f8\u540c weight\uff0c\u8ba9\u53ef\u7231\u8fb9\u66f4\u9760\u524d\u3002 \u73b0\u5728\u6211\u4eec\u76f4\u63a5\u5bf9\u7740\u8fd9\u79cd\u60c5\u51b5\u83bd\uff0c\u5f53\u4e00\u4e2a\u659c\u7387\u5bf9\u5e94\u591a\u4e2a\u5207\u70b9\u7684\u65f6\u5019\uff0c\u6211\u4eec\u6c42\u51fa\u6765\u7684 \\(x\\) \u5e94\u8be5\u662f\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684 \\(x\\) \u91cc\u9762\u6700\u5927\u7684\u4e00\u4e2a\uff0c\u56e0\u4e3a\u6392\u5e8f\u7684\u65f6\u5019\u5df2\u7ecf\u8d2a\u5fc3\u5730\u8ba9\u53ef\u7231\u8fb9\u9009\u7684\u5c3d\u53ef\u80fd\u591a\u3002 \u4e8e\u662f\u540c\u4e00\u6761\u7ebf\u4e0a\u7684\u6240\u6709\u70b9\u7684\u5f71\u54cd\u90fd\u88ab\u8003\u8651\u5230\u8fd9\u6761\u7ebf\u4e0a\u6700\u9760\u540e\u7684\u4e00\u4e2a\u5207\u70b9\u4e0a\u4e86\uff01 \u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u53ea\u8003\u8651\u201c\u62d0\u70b9\u201d\u5373\u4e24\u8fb9\u659c\u7387\u4e0d\u7b49\u7684\u70b9\u4e86\u3002 \u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u505a\uff0c\u4e8c\u5206\u6ee1\u8db3 \\(x > e\\) \u7684\u6240\u6709 \\(k\\) \u91cc\u6700\u5c0f\u7684\u90a3\u4e00\u4e2a\u3002 \u5f88\u663e\u7136 \\(e\\) \u5bf9\u5e94\u7684\u5207\u70b9\u4e00\u5b9a\u5728\u8fd9\u6761\u7ebf\u4e0a\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u53cd\u8bc1\uff0c\u7136\u540e\u7b97 \\(f(e)\\) \u5c31\u6bd4\u8f83\u7b80\u5355\u4e86\u3002 \u5047\u8bbe\u6211\u4eec\u6c42\u51fa\u6765\u7684\u70b9\u7684\u6a2a\u5750\u6807\u4e3a \\(x\\) \uff0c\u663e\u7136 \\(b = f(x) - kx = f(e) - ke\\) \u6240\u4ee5 \\(f(e) = f(x) - kx + ke\\) \uff0c\u4e5f\u5c31\u662f\u8bf4\u53ea\u9700\u8981\u6c42\u51fa\u6765 \\(x\\) \u5904\u7684\u622a\u8ddd\u7136\u540e\u52a0\u4e0a \\(ke\\) \u5373\u53ef\u3002 Code 1 // No code was here! \u8fd9\u4e2a\u53ea\u662f\u6700\u57fa\u7840\u7684\u5e94\u7528\uff0c\u5176\u5b83\u7684\u4ee5\u540e\u6709\u65f6\u95f4\u5c31\u8865\u4e0a\u3002 ref: https://www.cnblogs.com/CreeperLKF/p/9045491.html https://www.cnblogs.com/TianMeng-hyl/p/14972355.html \u53e6\u5916\u5199\u8fd9\u4e2a\u7684\u65f6\u5019\u6211\u5220\u6539\u4e86\u5f88\u591a\u6b21\u3002 \u5176\u5b9e\u5c31\u662f\u60f3\u628a\u8fd9\u4e2a\u4e1c\u897f\u662f\u600e\u4e48\u6765\u7684\u8bf4\u6e05\u695a\uff0c\u8bf4\u7684\u522b\u4eba\u80fd\u542c\u61c2\uff0c\u4e5f\u95ee\u4e0d\u5012\u6211\u3002 \u7136\u540e\u5c31\u82b1\u4e86\u4e0d\u5c11\u65f6\u95f4\uff0c\u7ec8\u4e8e\u641e\u61c2\u4e86\u3002 \u4f46\u662f\u8bf4\u7684\u65f6\u5019\u5c31\u6709\u70b9\u90a3\u5565\uff0c\u5199\u4e86 4k \u5168\u90e8\u90fd\u6ce8\u91ca\u6389\u4e86\u3002 \u6240\u4ee5\u8fd9\u91cc\u8981\u7279\u522b\u611f\u8c22 \\(2 \\times \\text{mid}(\\texttt{'sxp'+'uzr'})\\) \u5c0f\u5929\u4f7f\u3002 \u662f\u4ed6\u8ba9\u6211\u7a81\u7136\u601d\u8def\u5982\u6cc9\u6d8c\uff0c\u5199\u51fa\u4e86\u8fd9\u7bc7 post\uff01 wwwww","title":"\u4f8b\u9898"},{"location":"algor/string/kmp/","text":"\u524d\u7f00\u51fd\u6570 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5bf9\u4e8e\u4e00\u4e2a\u5b57\u7b26\u4e32 \\(s\\) \uff0c\u5b9a\u4e49\u5176\u524d\u7f00\u51fd\u6570\u4e3a\u5b83\u5bf9\u5e94\u524d\u7f00\u7684 border \u957f\u5ea6\uff1a \\[ \\pi[i] = \\max\\{j\\}, (s[1\\dots j] = s[i - j + 1 \\dots i], j < i) \\] \u82e5\u4e0d\u5b58\u5728\u8fd9\u6837\u7684 \\(j\\) \uff0c\u5219 \\(\\pi[i] = 0\\) \u3002 \u53ef\u4ee5\u7406\u89e3\u6210\u4ee5 \\(i\\) \u7ed3\u5c3e\u7684 \\(s\\) \u7684 \u975e\u524d\u7f00 \u5b50\u4e32\u548c \\(s\\) \u7684\u524d\u7f00\u80fd\u591f\u5339\u914d\u7684\u6700\u5927\u957f\u5ea6\u3002 \u8fd9\u4e2a\u4e1c\u897f\u5728\u5f88\u591a\u4e32\u4e32\u9898\u91cc\u9762\u90fd\u4f1a\u6709\u7528\uff0c\u6240\u4ee5\u63a5\u4e0b\u6765\u63d0\u4e00\u4e0b\u8fd9\u4e2a\u4e1c\u897f\u7684\u8ba1\u7b97\u3002 \u6700\u66b4\u529b\u7684\u505a\u6cd5\u5c31\u662f\uff0c\u8003\u8651\u5bf9\u4e8e \\(i\\) \uff0c\u679a\u4e3e\u6240\u6709\u4ee5 \\(i\\) \u7ed3\u5c3e\u7684\u975e\u524d\u7f00\u5b50\u4e32\uff0c\u5e76\u5c06\u5176\u548c\u5bf9\u5e94\u524d\u7f00\u6bd4\u8f83\u3002 \u76f4\u63a5\u505a\u662f \\(O(n^3)\\) \u7684\uff0c\u5982\u679c\u7528 Hash \u4f18\u5316\u4e00\u4e0b\u5c31\u662f \\(O(n^2)\\) \u7684\u3002 \u4f46\u662f\u5b58\u5728\u4e00\u79cd\u66f4\u52a0\u4f18\u79c0\u7684\u65b9\u6cd5\u53ef\u4ee5 \\(O(n + m)\\) \u8ba1\u7b97\u5b83\uff0c\u5c31\u662f\u4e0b\u9762\u8981\u8bf4\u7684\u540d\u4e3a Knuth-Morris-Pratt \u7684\u7b97\u6cd5\u3002 KMP \u03c8(\uff40\u2207\u00b4)\u03c8 \u9996\u5148\u6ce8\u610f\u5230\u4e00\u4e2a\u70b9\u662f\uff0c\u6bcf\u6b21 \\(\\pi[i]\\) \u7684\u53d8\u5316\u4e00\u5b9a\u662f\u5728 \\([0,1]\\) \u4e4b\u95f4\u7684\uff0c\u6700\u591a\u52a0\u4e00\u4e0d\u7136\u4e0d\u53d8\u3002 \u8fd9\u4e2a\u6027\u8d28\u6bd4\u8f83\u663e\u7136\uff0c\u4f46\u662f\u5f88\u91cd\u8981\u3002 \u7136\u540e\u6211\u4eec\u5b9a\u4e49 \\(\\pi[i]\\) \u7684\u201d\u5019\u9009\u9879\u201c\u4e3a\u6ee1\u8db3 \\(s[1\\dots j] = s[i - j + 1 \\dots i], j < i\\) \u7684\u6240\u6709 \\(j\\) \u3002 \u89c2\u5bdf\u53ef\u4ee5\u53d1\u73b0\u53e6\u5916\u4e00\u4e2a Theorem\uff1a \u5982\u679c \\(j\\) \u662f \\(\\pi[i]\\) \u7684\u4e00\u4e2a\u5019\u9009\u9879\uff0c\u90a3\u4e48 \\(\\pi[j]\\) \u4e00\u5b9a\u662f \\(\\pi[i]\\) \u5019\u9009\u9879\u4e14 \\(\\forall k \\in (\\pi[j], j)\\) \uff0c \\(k\\) \u90fd\u4e0d\u662f \\(\\pi[i]\\) \u7684\u5019\u9009\u9879\u3002 \u5373\u662f\uff0c \\(\\pi[i]\\) \u7684\u5019\u9009\u9879\u4e00\u5b9a\u662f \\(\\pi[j], \\pi[\\pi[j]], \\dots\\) \u3002 \u524d\u4e00\u6bb5\u6bd4\u8f83\u663e\u7136\uff0c\u540e\u4e00\u6bb5\u53ef\u4ee5\u7528\u53cd\u8bc1\u6cd5\u8bc1\u660e\uff0c\u53ea\u8981\u8bf4\u660e\u8fd9\u4e2a\u4e00\u5b9a\u548c \\(\\pi\\) \u5b9a\u4e49\u4e2d\u7684 \\(\\max\\) \u76f8\u77db\u76fe\u5373\u53ef\u3002 \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u7b2c\u4e00\u4e2a Observation \u770b\u51fa\u53e6\u5916\u4e00\u4e2a Theorem\uff1a \u5982\u679c \\(\\pi[i]\\) \u7684\u4e00\u4e2a\u5019\u9009\u9879\u662f \\(j\\) \uff0c\u90a3\u4e48 \\(\\pi[i - 1]\\) \u7684\u4e00\u4e2a\u5019\u9009\u9879\u662f \\(j - 1\\) \u3002 \uff08\u4e24\u4e2a\u5b57\u7b26\u4e32 \\(s[i - j + 1\\dots i]\\) \u548c \\(s[1 \\dots j]\\) \u76f8\u7b49\u7684\u524d\u63d0\u662f \\(s[i - j + 1, \\dots i - 1] = s[1\\dots j - 1]\\) \uff09 \u4e8e\u662f\u7ed3\u5408\u8fd9\u4e24\u4e2a\u5f15\u7406\uff0c\u6211\u4eec\u4e0d\u96be\u60f3\u5230\u4e00\u4e2a\u7b97\u6cd5\uff1a \u521d\u59cb\u5316 \\(\\pi[1] = 0\\) \uff0c\u4ece \\(i = 2\\) \u5f00\u59cb\u8ba1\u7b97\uff0c\u521d\u59cb\u4ee4 \\(j = 0\\) \uff0c \u5bf9\u4e8e\u6bcf\u4e2a \\(i\\) \uff0c\u5047\u8bbe\u6b64\u65f6 \\(\\pi[1\\sim i - 1]\\) \u90fd\u5df2\u7ecf\u6c42\u51fa\u6765\uff0c\u7136\u540e\u6bcf\u6b21\u6211\u4eec\u90fd\u8ba9 \\(\\pi[i]\\) \u7684\u5019\u9009\u9879\u662f \\(\\pi[i - 1] + 1, \\pi[\\pi[i - 1]] + 1 \\dots\\) \u7136\u540e\u6c42\u6700\u5927\u503c\u5373\u53ef\u3002 \u5f53\u7136\u6c42\u6700\u5927\u503c\u7684\u65f6\u5019\u9700\u8981\u5224\u65ad\u65f6\u5019\u5408\u6cd5\uff0c\u6240\u4ee5\u5b9e\u73b0\u7684\u65f6\u5019\u6211\u4eec\u4e00\u822c\u5012\u7740\u6765\uff0c\u4ece \\(j = \\pi[i - 1]\\) \u5f00\u59cb\uff0c\u4e0d\u65ad\u8df3 \\(\\pi\\) \u76f4\u5230\u5408\u6cd5\uff0c\u7136\u540e\u8bb0\u5f55\u6b64\u65f6\u7684 \\(j + 1\\) \u4f5c\u4e3a \\(\\pi[i]\\) \uff0c\u5982\u679c\u6700\u540e \\(j = 0\\) \u4e86\uff0c\u8bc1\u660e\u4e0d\u5b58\u5728\u5019\u9009\u9879\uff0c \\(\\pi[i] = 0\\) \u3002 \u56e0\u4e3a \\(j\\) \u521d\u59cb\u503c\u5c31\u662f\u4e0a\u4e00\u5c42\u7684\u524d\u7f00\u51fd\u6570 \\(\\pi[i - 1]\\) \uff0c\u6240\u4ee5\u6bcf\u6b21\u6211\u4eec\u5b9e\u9645\u4e0a\u662f\u5728 \u5c1d\u8bd5 \u8ba9 \\(j + 1\\) \u6210\u4e3a\u65b0\u7684\u5019\u9009\u9879\uff0c\u5982\u679c\u5f53\u524d\u7684\u5019\u9009\u9879\u4e0d\u5408\u6cd5\uff0c\u4e4b\u540e\u8df3 \\(\\pi\\) \u627e\u4e0b\u4e00\u4e2a\u5019\u9009\u9879\u7684\u6b65\u9aa4\u5c31\u53eb\u505a\u201c\u5931\u914d\u201d\u3002 \u5b9e\u73b0\uff1a 1 2 3 4 5 6 Next [ 1 ] = 0 ; // \u8bb0\u5f55 pi \u7684\u540c\u65f6\u4f5c\u4e3a\u5931\u914d\u6307\u9488\uff0cNext \u7684\u610f\u4e49\u53ef\u4ee5\u7406\u89e3\u4e3a\u201c\u4e0b\u4e00\u4e2a\u5019\u9009\u9879\u201d\u3002 for ( int i = 2 , j = 0 ; i <= n ; ++ i ) { while ( j > 0 && s [ i ] != s [ j + 1 ]) j = Next [ j ]; if ( s [ i ] == s [ j + 1 ]) j ++ ; Next [ i ] = j ; } \u663e\u7136\u6bcf\u6b21 \\(j\\) \u6700\u591a\u589e\u52a0 \\(1\\) \uff0c\u800c\u8df3 \\(\\pi\\) \u7684\u6b21\u6570\u663e\u7136\u4e0d\u4f1a\u8d85\u8fc7\u5f53\u524d\u5c42\u5f00\u59cb\u7684\u65f6\u5019 \\(j\\) \u7684\u503c\u548c while \u7ed3\u675f\u4ee5\u540e\u7684 \\(j\\) \u7684\u5dee\u503c\u3002 \u6240\u4ee5\u590d\u6742\u5ea6 \\(O(n)\\) \u3002 \u5355\u6a21\u5f0f\u5339\u914d \u03c8(\uff40\u2207\u00b4)\u03c8 \u53ef\u4ee5\u8003\u8651\u518d\u8bbe\u4e00\u4e2a \\(f[i]\\) \uff0c\u8868\u793a\u6587\u672c\u4e32\u7684\u4ee5 \\(i\\) \u7ed3\u5c3e\u7684\u5b50\u4e32\uff08\u6ce8\u610f\u4e0d\u662f\u975e\u524d\u7f00\u4e86\uff09\u548c\u6a21\u5f0f\u4e32\u7684\u524d\u7f00\u80fd\u5339\u914d\u7684\u6700\u5927\u957f\u5ea6\u3002 \u5982\u679c \\(f[i]\\) \u548c\u6a21\u5f0f\u4e32\u7684\u957f\u5ea6\u76f8\u7b49\uff0c\u90a3\u4e48\u8bc1\u660e\u6a21\u5f0f\u4e32\u5728\u6587\u672c\u4e32\u7684 \\([i - n + 1, i]\\) \u8fd9\u4e2a\u4f4d\u7f6e\u51fa\u73b0\u4e86\u3002 \u6c42\u6cd5\u548c Next \u7c7b\u4f3c\uff0c\u4e0d\u8fc7\u6bcf\u6b21\u5339\u914d\u7684\u65f6\u5019\u6211\u4eec\u662f\u8ba9\u6a21\u5f0f\u4e32\u7684\u524d\u7f00\u548c\u6587\u672c\u4e32\u7684\u4e00\u4e2a\u4ee5 \\(i\\) \u7ed3\u5c3e\u7684\u5b50\u4e32\u8fdb\u884c\u5339\u914d\uff0c\u5982\u679c\u65e0\u6cd5\u5339\u914d\u5c31\u5728\u6a21\u5f0f\u4e32\u4e0a\u8df3 \\(\\pi\\) \uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u5408\u6cd5\u7684\u6a21\u5f0f\u4e32\u524d\u7f00\u53ef\u4ee5\u548c\u6587\u672c\u4e32\u7684\u5b50\u4e32\u5339\u914d\u3002 \u6240\u4ee5\u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u662f\uff0c\u5728 \\(t\\) \uff08\u6587\u672c\u4e32\uff09\u4ee5 \\(i - 1\\) \u7ed3\u5c3e\u7684\u5b50\u4e32\u548c \\(s[1, j]\\) \uff08\u6a21\u5f0f\u4e32\uff09\u5df2\u7ecf\u5339\u914d\u4e0a\u4e86\u7684\u65f6\u5019\uff0c\u4e0d\u65ad\u5c1d\u8bd5\u6269\u5c55\u53ef\u4ee5\u548c\u6587\u672c\u4e32\u7684\u4ee5 \\(i\\) \u7ed3\u5c3e\u7684\u5b50\u4e32\u5339\u914d\u7684\u6a21\u5f0f\u4e32\u7684\u524d\u7f00\u957f\u5ea6\uff0c\u5982\u679c\u80fd\u6269\u5c55\u5230\u6574\u4e2a\u6a21\u5f0f\u4e32\u90a3\u5c31\u8bc1\u660e\u5339\u914d\u6210\u529f\u4e86\u3002 \u5f53\u7136\u6a21\u5f0f\u4e32\u7684\u957f\u5ea6\u4e0d\u4e00\u5b9a\u8981\u5c0f\u4e8e\u6587\u672c\u4e32\uff0c\u5982\u679c\u5927\u4e8e\u4e86\u663e\u7136\u662f\u65e0\u6cd5\u5339\u914d\u6210\u529f\u7684\uff0c\u4f46\u662f\u5728\u5176\u4ed6\u9898\u91cc\u9762\u5c31\u53ef\u4ee5\u6709\u522b\u7684\u5e94\u7528\uff0c\u6bd4\u5982\u6c42\u6a21\u5f0f\u4e32\u6700\u957f\u7684\u51fa\u73b0\u5728\u6587\u672c\u4e32\u91cc\u7684\u524d\u7f00\u957f\u5ea6\u662f\u591a\u5c11\u4e4b\u7c7b\u7684\u3002 \u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 Next [ 1 ] = 0 ; for ( int i = 2 , j = 0 ; i <= n ; ++ i ) { while ( j > 0 && s [ i ] != s [ j + 1 ]) j = Next [ j ]; if ( s [ i ] == s [ j + 1 ]) j ++ ; Next [ i ] = j ; } for ( int i = 1 , j = 0 ; i <= m ; ++ i ) { while ( j > 0 && ( j == n || s [ i ] != s [ j + 1 ])) j = Next [ j ]; if ( t [ i ] == s [ j + 1 ]) ++ j ; f [ i ] = j ; if ( f [ i ] == n ) orc [ ++ cnt ] = i - n + 1 ; } \u590d\u6742\u5ea6 \\(O(n + m)\\) \u3002 \u6ce8\u610f\u6c42 \\(f\\) \u7684\u65f6\u5019\u662f\u4ece \\(i = 1\\) \u5f00\u59cb\uff0c\u5e76\u4e14\u5982\u679c \\(j = n\\) \uff08 \\(j + 1\\) \u8fd9\u4e2a\u4f4d\u7f6e\u4e0d\u5b58\u5728\u5b57\u7b26\u4e86\uff09\uff0c\u90a3\u4e48 \\(j\\) \u540c\u6837\u9700\u8981\u8df3 \\(\\pi\\) \u3002 CF1200E Compress Words \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60 \\(n\\) \u4e2a\u5b57\u7b26\u4e32\uff0c\u7b54\u6848\u4e32\u521d\u59cb\u4e3a\u7a7a\u3002\u7b2c \\(i\\) \u6b65\u5c06\u7b2c \\(i\\) \u4e2a\u5b57\u7b26\u4e32\u52a0\u5230\u7b54\u6848\u4e32\u7684\u540e\u9762\uff0c \u4f46\u662f\u5c3d\u91cf\u5730\u53bb\u6389\u91cd\u590d\u90e8\u5206\uff08\u5373\u53bb\u6389\u4e00\u4e2a\u6700\u957f\u7684\u3001\u662f\u539f\u7b54\u6848\u4e32\u7684\u540e\u7f00\u3001\u4e5f\u662f\u7b2c \\(i\\) \u4e2a\u4e32\u7684\u524d\u7f00\u7684\u5b57\u7b26\u4e32\uff09\uff0c\u6c42\u6700\u540e\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u3002 \\(n \\le 1e5, \\sum len \\le 1e6\\) \u3002 \u8fd9\u91cc\u5c31\u662f\u548c KMP \u4e2d \\(f\\) \u7684\u5b9a\u4e49\u7c7b\u4f3c\u7684\u3002 \u8bbe\u7b54\u6848\u4e32\u5f53\u524d\u957f\u5ea6\u4e3a \\(N\\) \uff0c\u6a21\u5f0f\u4e32\u7684\u957f\u5ea6\u4e3a \\(M\\) \uff0c\u6211\u4eec\u53ea\u9700\u8981\u6c42\u51fa\u7b54\u6848\u4e32\u7684\u540e\u7f00\uff08\u5373\u4ee5 \\(N\\) \u7ed3\u5c3e\u7684\u5b50\u4e32\uff09\u548c\u65b0\u52a0\u5165\u7684\u4e32\u7684\u524d\u7f00\u53ef\u4ee5\u5339\u914d\u7684\u6700\u5927\u957f\u5ea6\u7136\u540e\u5408\u5e76\u5373\u53ef\u3002 \u6ce8\u610f\u5230\u6bcf\u6b21\u5408\u5e76\u7684\u65f6\u5019\u5982\u679c\u76f4\u63a5\u7b97\u6574\u4e2a\u4e32\u5f88\u4e8f\uff0c\u6240\u4ee5\u8003\u8651\u524d\u540e\u5404\u53d6 \\(\\min(N,M)\\) \u957f\u5ea6\u7684\u5b50\u4e32\u62ff\u6765\u5339\u914d\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 // author : black_trees #include <cstdio> #include <vector> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 1e5 + 10 ; const int si_len = 1e6 + 10 ; int n ; string ans ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> ans ; for ( int i = 2 ; i <= n ; ++ i ) { string nw ; cin >> nw ; int N = int ( ans . size ()), M = int ( nw . size ()); int len = min ( N , M ); string s = nw . substr ( 0 , len ), t = ans . substr ( N - len , len ); s = ' ' + s , t = ' ' + t ; vector < int > Next ( len + 1 ), f ( len + 1 ); Next [ 1 ] = 0 ; for ( int j = 2 , k = 0 ; j <= len ; ++ j ) { while ( k > 0 && s [ j ] != s [ k + 1 ]) k = Next [ k ]; if ( s [ j ] == s [ k + 1 ]) ++ k ; Next [ j ] = k ; } for ( int j = 1 , k = 0 ; j <= len ; ++ j ) { while ( k > 0 && t [ j ] != s [ k + 1 ]) k = Next [ k ]; if ( t [ j ] == s [ k + 1 ]) ++ k ; f [ j ] = k ; } int merge_len = f [ len ]; nw . erase ( 0 , merge_len ); ans += nw ; } cout << ans << endl ; return 0 ; } POJ2406 Power Strings \u03c8(\uff40\u2207\u00b4)\u03c8 \u6c42\u5b57\u7b26\u4e32\u7684\u6700\u5c0f\u5faa\u73af\u8282\uff0c\u591a\u6d4b\u3002 \\(n \\le 10^6\\) \u3002 \u4e00\u4e2a\u6027\u8d28\uff1a\u5982\u679c \\((n - \\pi[n]) | n\\) \uff0c\u5219\u5b57\u7b26\u4e32\u5b58\u5728\u5faa\u73af\u8282\uff0c\u6700\u5c0f\u5faa\u73af\u8282\u957f\u5ea6\u4e3a \\(\\dfrac{n}{n - \\pi[n]}\\) \u3002 \u7136\u540e\u5199\u8d77\u6765\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u4e0d\u8fc7 sb POJ \u4e0d\u652f\u6301\u9ad8\u6807\u51c6\u8bed\u6cd5\uff0cCE \u4e86\u597d\u591a\u6b21\u3002\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; // using i64 = long long; const int si = 1e6 + 10 ; char s [ si ]; int n , Next [ si ]; int main () { while ( true ) { scanf ( \"%s\" , s ); if ( s [ 0 ] == '.' ) break ; n = strlen ( s ); Next [ 1 ] = 0 ; for ( int i = 2 , j = 0 ; i <= n ; ++ i ) { while ( j > 0 && s [ i - 1 ] != s [ j ]) j = Next [ j ]; if ( s [ i - 1 ] == s [ j ]) j ++ ; Next [ i ] = j ; } int len = 1 ; if ( n % ( n - Next [ n ]) == 0 ) len = n / ( n - Next [ n ]); printf ( \"%d \\n \" , len ); } return 0 ; }","title":"KMP"},{"location":"algor/string/kmp/#_1","text":"\u5bf9\u4e8e\u4e00\u4e2a\u5b57\u7b26\u4e32 \\(s\\) \uff0c\u5b9a\u4e49\u5176\u524d\u7f00\u51fd\u6570\u4e3a\u5b83\u5bf9\u5e94\u524d\u7f00\u7684 border \u957f\u5ea6\uff1a \\[ \\pi[i] = \\max\\{j\\}, (s[1\\dots j] = s[i - j + 1 \\dots i], j < i) \\] \u82e5\u4e0d\u5b58\u5728\u8fd9\u6837\u7684 \\(j\\) \uff0c\u5219 \\(\\pi[i] = 0\\) \u3002 \u53ef\u4ee5\u7406\u89e3\u6210\u4ee5 \\(i\\) \u7ed3\u5c3e\u7684 \\(s\\) \u7684 \u975e\u524d\u7f00 \u5b50\u4e32\u548c \\(s\\) \u7684\u524d\u7f00\u80fd\u591f\u5339\u914d\u7684\u6700\u5927\u957f\u5ea6\u3002 \u8fd9\u4e2a\u4e1c\u897f\u5728\u5f88\u591a\u4e32\u4e32\u9898\u91cc\u9762\u90fd\u4f1a\u6709\u7528\uff0c\u6240\u4ee5\u63a5\u4e0b\u6765\u63d0\u4e00\u4e0b\u8fd9\u4e2a\u4e1c\u897f\u7684\u8ba1\u7b97\u3002 \u6700\u66b4\u529b\u7684\u505a\u6cd5\u5c31\u662f\uff0c\u8003\u8651\u5bf9\u4e8e \\(i\\) \uff0c\u679a\u4e3e\u6240\u6709\u4ee5 \\(i\\) \u7ed3\u5c3e\u7684\u975e\u524d\u7f00\u5b50\u4e32\uff0c\u5e76\u5c06\u5176\u548c\u5bf9\u5e94\u524d\u7f00\u6bd4\u8f83\u3002 \u76f4\u63a5\u505a\u662f \\(O(n^3)\\) \u7684\uff0c\u5982\u679c\u7528 Hash \u4f18\u5316\u4e00\u4e0b\u5c31\u662f \\(O(n^2)\\) \u7684\u3002 \u4f46\u662f\u5b58\u5728\u4e00\u79cd\u66f4\u52a0\u4f18\u79c0\u7684\u65b9\u6cd5\u53ef\u4ee5 \\(O(n + m)\\) \u8ba1\u7b97\u5b83\uff0c\u5c31\u662f\u4e0b\u9762\u8981\u8bf4\u7684\u540d\u4e3a Knuth-Morris-Pratt \u7684\u7b97\u6cd5\u3002","title":"\u524d\u7f00\u51fd\u6570"},{"location":"algor/string/kmp/#kmp","text":"\u9996\u5148\u6ce8\u610f\u5230\u4e00\u4e2a\u70b9\u662f\uff0c\u6bcf\u6b21 \\(\\pi[i]\\) \u7684\u53d8\u5316\u4e00\u5b9a\u662f\u5728 \\([0,1]\\) \u4e4b\u95f4\u7684\uff0c\u6700\u591a\u52a0\u4e00\u4e0d\u7136\u4e0d\u53d8\u3002 \u8fd9\u4e2a\u6027\u8d28\u6bd4\u8f83\u663e\u7136\uff0c\u4f46\u662f\u5f88\u91cd\u8981\u3002 \u7136\u540e\u6211\u4eec\u5b9a\u4e49 \\(\\pi[i]\\) \u7684\u201d\u5019\u9009\u9879\u201c\u4e3a\u6ee1\u8db3 \\(s[1\\dots j] = s[i - j + 1 \\dots i], j < i\\) \u7684\u6240\u6709 \\(j\\) \u3002 \u89c2\u5bdf\u53ef\u4ee5\u53d1\u73b0\u53e6\u5916\u4e00\u4e2a Theorem\uff1a \u5982\u679c \\(j\\) \u662f \\(\\pi[i]\\) \u7684\u4e00\u4e2a\u5019\u9009\u9879\uff0c\u90a3\u4e48 \\(\\pi[j]\\) \u4e00\u5b9a\u662f \\(\\pi[i]\\) \u5019\u9009\u9879\u4e14 \\(\\forall k \\in (\\pi[j], j)\\) \uff0c \\(k\\) \u90fd\u4e0d\u662f \\(\\pi[i]\\) \u7684\u5019\u9009\u9879\u3002 \u5373\u662f\uff0c \\(\\pi[i]\\) \u7684\u5019\u9009\u9879\u4e00\u5b9a\u662f \\(\\pi[j], \\pi[\\pi[j]], \\dots\\) \u3002 \u524d\u4e00\u6bb5\u6bd4\u8f83\u663e\u7136\uff0c\u540e\u4e00\u6bb5\u53ef\u4ee5\u7528\u53cd\u8bc1\u6cd5\u8bc1\u660e\uff0c\u53ea\u8981\u8bf4\u660e\u8fd9\u4e2a\u4e00\u5b9a\u548c \\(\\pi\\) \u5b9a\u4e49\u4e2d\u7684 \\(\\max\\) \u76f8\u77db\u76fe\u5373\u53ef\u3002 \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u7b2c\u4e00\u4e2a Observation \u770b\u51fa\u53e6\u5916\u4e00\u4e2a Theorem\uff1a \u5982\u679c \\(\\pi[i]\\) \u7684\u4e00\u4e2a\u5019\u9009\u9879\u662f \\(j\\) \uff0c\u90a3\u4e48 \\(\\pi[i - 1]\\) \u7684\u4e00\u4e2a\u5019\u9009\u9879\u662f \\(j - 1\\) \u3002 \uff08\u4e24\u4e2a\u5b57\u7b26\u4e32 \\(s[i - j + 1\\dots i]\\) \u548c \\(s[1 \\dots j]\\) \u76f8\u7b49\u7684\u524d\u63d0\u662f \\(s[i - j + 1, \\dots i - 1] = s[1\\dots j - 1]\\) \uff09 \u4e8e\u662f\u7ed3\u5408\u8fd9\u4e24\u4e2a\u5f15\u7406\uff0c\u6211\u4eec\u4e0d\u96be\u60f3\u5230\u4e00\u4e2a\u7b97\u6cd5\uff1a \u521d\u59cb\u5316 \\(\\pi[1] = 0\\) \uff0c\u4ece \\(i = 2\\) \u5f00\u59cb\u8ba1\u7b97\uff0c\u521d\u59cb\u4ee4 \\(j = 0\\) \uff0c \u5bf9\u4e8e\u6bcf\u4e2a \\(i\\) \uff0c\u5047\u8bbe\u6b64\u65f6 \\(\\pi[1\\sim i - 1]\\) \u90fd\u5df2\u7ecf\u6c42\u51fa\u6765\uff0c\u7136\u540e\u6bcf\u6b21\u6211\u4eec\u90fd\u8ba9 \\(\\pi[i]\\) \u7684\u5019\u9009\u9879\u662f \\(\\pi[i - 1] + 1, \\pi[\\pi[i - 1]] + 1 \\dots\\) \u7136\u540e\u6c42\u6700\u5927\u503c\u5373\u53ef\u3002 \u5f53\u7136\u6c42\u6700\u5927\u503c\u7684\u65f6\u5019\u9700\u8981\u5224\u65ad\u65f6\u5019\u5408\u6cd5\uff0c\u6240\u4ee5\u5b9e\u73b0\u7684\u65f6\u5019\u6211\u4eec\u4e00\u822c\u5012\u7740\u6765\uff0c\u4ece \\(j = \\pi[i - 1]\\) \u5f00\u59cb\uff0c\u4e0d\u65ad\u8df3 \\(\\pi\\) \u76f4\u5230\u5408\u6cd5\uff0c\u7136\u540e\u8bb0\u5f55\u6b64\u65f6\u7684 \\(j + 1\\) \u4f5c\u4e3a \\(\\pi[i]\\) \uff0c\u5982\u679c\u6700\u540e \\(j = 0\\) \u4e86\uff0c\u8bc1\u660e\u4e0d\u5b58\u5728\u5019\u9009\u9879\uff0c \\(\\pi[i] = 0\\) \u3002 \u56e0\u4e3a \\(j\\) \u521d\u59cb\u503c\u5c31\u662f\u4e0a\u4e00\u5c42\u7684\u524d\u7f00\u51fd\u6570 \\(\\pi[i - 1]\\) \uff0c\u6240\u4ee5\u6bcf\u6b21\u6211\u4eec\u5b9e\u9645\u4e0a\u662f\u5728 \u5c1d\u8bd5 \u8ba9 \\(j + 1\\) \u6210\u4e3a\u65b0\u7684\u5019\u9009\u9879\uff0c\u5982\u679c\u5f53\u524d\u7684\u5019\u9009\u9879\u4e0d\u5408\u6cd5\uff0c\u4e4b\u540e\u8df3 \\(\\pi\\) \u627e\u4e0b\u4e00\u4e2a\u5019\u9009\u9879\u7684\u6b65\u9aa4\u5c31\u53eb\u505a\u201c\u5931\u914d\u201d\u3002 \u5b9e\u73b0\uff1a 1 2 3 4 5 6 Next [ 1 ] = 0 ; // \u8bb0\u5f55 pi \u7684\u540c\u65f6\u4f5c\u4e3a\u5931\u914d\u6307\u9488\uff0cNext \u7684\u610f\u4e49\u53ef\u4ee5\u7406\u89e3\u4e3a\u201c\u4e0b\u4e00\u4e2a\u5019\u9009\u9879\u201d\u3002 for ( int i = 2 , j = 0 ; i <= n ; ++ i ) { while ( j > 0 && s [ i ] != s [ j + 1 ]) j = Next [ j ]; if ( s [ i ] == s [ j + 1 ]) j ++ ; Next [ i ] = j ; } \u663e\u7136\u6bcf\u6b21 \\(j\\) \u6700\u591a\u589e\u52a0 \\(1\\) \uff0c\u800c\u8df3 \\(\\pi\\) \u7684\u6b21\u6570\u663e\u7136\u4e0d\u4f1a\u8d85\u8fc7\u5f53\u524d\u5c42\u5f00\u59cb\u7684\u65f6\u5019 \\(j\\) \u7684\u503c\u548c while \u7ed3\u675f\u4ee5\u540e\u7684 \\(j\\) \u7684\u5dee\u503c\u3002 \u6240\u4ee5\u590d\u6742\u5ea6 \\(O(n)\\) \u3002","title":"KMP"},{"location":"algor/string/kmp/#_2","text":"\u53ef\u4ee5\u8003\u8651\u518d\u8bbe\u4e00\u4e2a \\(f[i]\\) \uff0c\u8868\u793a\u6587\u672c\u4e32\u7684\u4ee5 \\(i\\) \u7ed3\u5c3e\u7684\u5b50\u4e32\uff08\u6ce8\u610f\u4e0d\u662f\u975e\u524d\u7f00\u4e86\uff09\u548c\u6a21\u5f0f\u4e32\u7684\u524d\u7f00\u80fd\u5339\u914d\u7684\u6700\u5927\u957f\u5ea6\u3002 \u5982\u679c \\(f[i]\\) \u548c\u6a21\u5f0f\u4e32\u7684\u957f\u5ea6\u76f8\u7b49\uff0c\u90a3\u4e48\u8bc1\u660e\u6a21\u5f0f\u4e32\u5728\u6587\u672c\u4e32\u7684 \\([i - n + 1, i]\\) \u8fd9\u4e2a\u4f4d\u7f6e\u51fa\u73b0\u4e86\u3002 \u6c42\u6cd5\u548c Next \u7c7b\u4f3c\uff0c\u4e0d\u8fc7\u6bcf\u6b21\u5339\u914d\u7684\u65f6\u5019\u6211\u4eec\u662f\u8ba9\u6a21\u5f0f\u4e32\u7684\u524d\u7f00\u548c\u6587\u672c\u4e32\u7684\u4e00\u4e2a\u4ee5 \\(i\\) \u7ed3\u5c3e\u7684\u5b50\u4e32\u8fdb\u884c\u5339\u914d\uff0c\u5982\u679c\u65e0\u6cd5\u5339\u914d\u5c31\u5728\u6a21\u5f0f\u4e32\u4e0a\u8df3 \\(\\pi\\) \uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a\u5408\u6cd5\u7684\u6a21\u5f0f\u4e32\u524d\u7f00\u53ef\u4ee5\u548c\u6587\u672c\u4e32\u7684\u5b50\u4e32\u5339\u914d\u3002 \u6240\u4ee5\u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u662f\uff0c\u5728 \\(t\\) \uff08\u6587\u672c\u4e32\uff09\u4ee5 \\(i - 1\\) \u7ed3\u5c3e\u7684\u5b50\u4e32\u548c \\(s[1, j]\\) \uff08\u6a21\u5f0f\u4e32\uff09\u5df2\u7ecf\u5339\u914d\u4e0a\u4e86\u7684\u65f6\u5019\uff0c\u4e0d\u65ad\u5c1d\u8bd5\u6269\u5c55\u53ef\u4ee5\u548c\u6587\u672c\u4e32\u7684\u4ee5 \\(i\\) \u7ed3\u5c3e\u7684\u5b50\u4e32\u5339\u914d\u7684\u6a21\u5f0f\u4e32\u7684\u524d\u7f00\u957f\u5ea6\uff0c\u5982\u679c\u80fd\u6269\u5c55\u5230\u6574\u4e2a\u6a21\u5f0f\u4e32\u90a3\u5c31\u8bc1\u660e\u5339\u914d\u6210\u529f\u4e86\u3002 \u5f53\u7136\u6a21\u5f0f\u4e32\u7684\u957f\u5ea6\u4e0d\u4e00\u5b9a\u8981\u5c0f\u4e8e\u6587\u672c\u4e32\uff0c\u5982\u679c\u5927\u4e8e\u4e86\u663e\u7136\u662f\u65e0\u6cd5\u5339\u914d\u6210\u529f\u7684\uff0c\u4f46\u662f\u5728\u5176\u4ed6\u9898\u91cc\u9762\u5c31\u53ef\u4ee5\u6709\u522b\u7684\u5e94\u7528\uff0c\u6bd4\u5982\u6c42\u6a21\u5f0f\u4e32\u6700\u957f\u7684\u51fa\u73b0\u5728\u6587\u672c\u4e32\u91cc\u7684\u524d\u7f00\u957f\u5ea6\u662f\u591a\u5c11\u4e4b\u7c7b\u7684\u3002 \u5b9e\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 Next [ 1 ] = 0 ; for ( int i = 2 , j = 0 ; i <= n ; ++ i ) { while ( j > 0 && s [ i ] != s [ j + 1 ]) j = Next [ j ]; if ( s [ i ] == s [ j + 1 ]) j ++ ; Next [ i ] = j ; } for ( int i = 1 , j = 0 ; i <= m ; ++ i ) { while ( j > 0 && ( j == n || s [ i ] != s [ j + 1 ])) j = Next [ j ]; if ( t [ i ] == s [ j + 1 ]) ++ j ; f [ i ] = j ; if ( f [ i ] == n ) orc [ ++ cnt ] = i - n + 1 ; } \u590d\u6742\u5ea6 \\(O(n + m)\\) \u3002 \u6ce8\u610f\u6c42 \\(f\\) \u7684\u65f6\u5019\u662f\u4ece \\(i = 1\\) \u5f00\u59cb\uff0c\u5e76\u4e14\u5982\u679c \\(j = n\\) \uff08 \\(j + 1\\) \u8fd9\u4e2a\u4f4d\u7f6e\u4e0d\u5b58\u5728\u5b57\u7b26\u4e86\uff09\uff0c\u90a3\u4e48 \\(j\\) \u540c\u6837\u9700\u8981\u8df3 \\(\\pi\\) \u3002","title":"\u5355\u6a21\u5f0f\u5339\u914d"},{"location":"algor/string/kmp/#cf1200e-compress-words","text":"\u7ed9\u4f60 \\(n\\) \u4e2a\u5b57\u7b26\u4e32\uff0c\u7b54\u6848\u4e32\u521d\u59cb\u4e3a\u7a7a\u3002\u7b2c \\(i\\) \u6b65\u5c06\u7b2c \\(i\\) \u4e2a\u5b57\u7b26\u4e32\u52a0\u5230\u7b54\u6848\u4e32\u7684\u540e\u9762\uff0c \u4f46\u662f\u5c3d\u91cf\u5730\u53bb\u6389\u91cd\u590d\u90e8\u5206\uff08\u5373\u53bb\u6389\u4e00\u4e2a\u6700\u957f\u7684\u3001\u662f\u539f\u7b54\u6848\u4e32\u7684\u540e\u7f00\u3001\u4e5f\u662f\u7b2c \\(i\\) \u4e2a\u4e32\u7684\u524d\u7f00\u7684\u5b57\u7b26\u4e32\uff09\uff0c\u6c42\u6700\u540e\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u3002 \\(n \\le 1e5, \\sum len \\le 1e6\\) \u3002 \u8fd9\u91cc\u5c31\u662f\u548c KMP \u4e2d \\(f\\) \u7684\u5b9a\u4e49\u7c7b\u4f3c\u7684\u3002 \u8bbe\u7b54\u6848\u4e32\u5f53\u524d\u957f\u5ea6\u4e3a \\(N\\) \uff0c\u6a21\u5f0f\u4e32\u7684\u957f\u5ea6\u4e3a \\(M\\) \uff0c\u6211\u4eec\u53ea\u9700\u8981\u6c42\u51fa\u7b54\u6848\u4e32\u7684\u540e\u7f00\uff08\u5373\u4ee5 \\(N\\) \u7ed3\u5c3e\u7684\u5b50\u4e32\uff09\u548c\u65b0\u52a0\u5165\u7684\u4e32\u7684\u524d\u7f00\u53ef\u4ee5\u5339\u914d\u7684\u6700\u5927\u957f\u5ea6\u7136\u540e\u5408\u5e76\u5373\u53ef\u3002 \u6ce8\u610f\u5230\u6bcf\u6b21\u5408\u5e76\u7684\u65f6\u5019\u5982\u679c\u76f4\u63a5\u7b97\u6574\u4e2a\u4e32\u5f88\u4e8f\uff0c\u6240\u4ee5\u8003\u8651\u524d\u540e\u5404\u53d6 \\(\\min(N,M)\\) \u957f\u5ea6\u7684\u5b50\u4e32\u62ff\u6765\u5339\u914d\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 // author : black_trees #include <cstdio> #include <vector> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 1e5 + 10 ; const int si_len = 1e6 + 10 ; int n ; string ans ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> ans ; for ( int i = 2 ; i <= n ; ++ i ) { string nw ; cin >> nw ; int N = int ( ans . size ()), M = int ( nw . size ()); int len = min ( N , M ); string s = nw . substr ( 0 , len ), t = ans . substr ( N - len , len ); s = ' ' + s , t = ' ' + t ; vector < int > Next ( len + 1 ), f ( len + 1 ); Next [ 1 ] = 0 ; for ( int j = 2 , k = 0 ; j <= len ; ++ j ) { while ( k > 0 && s [ j ] != s [ k + 1 ]) k = Next [ k ]; if ( s [ j ] == s [ k + 1 ]) ++ k ; Next [ j ] = k ; } for ( int j = 1 , k = 0 ; j <= len ; ++ j ) { while ( k > 0 && t [ j ] != s [ k + 1 ]) k = Next [ k ]; if ( t [ j ] == s [ k + 1 ]) ++ k ; f [ j ] = k ; } int merge_len = f [ len ]; nw . erase ( 0 , merge_len ); ans += nw ; } cout << ans << endl ; return 0 ; }","title":"CF1200E Compress Words"},{"location":"algor/string/kmp/#poj2406-power-strings","text":"\u6c42\u5b57\u7b26\u4e32\u7684\u6700\u5c0f\u5faa\u73af\u8282\uff0c\u591a\u6d4b\u3002 \\(n \\le 10^6\\) \u3002 \u4e00\u4e2a\u6027\u8d28\uff1a\u5982\u679c \\((n - \\pi[n]) | n\\) \uff0c\u5219\u5b57\u7b26\u4e32\u5b58\u5728\u5faa\u73af\u8282\uff0c\u6700\u5c0f\u5faa\u73af\u8282\u957f\u5ea6\u4e3a \\(\\dfrac{n}{n - \\pi[n]}\\) \u3002 \u7136\u540e\u5199\u8d77\u6765\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u4e0d\u8fc7 sb POJ \u4e0d\u652f\u6301\u9ad8\u6807\u51c6\u8bed\u6cd5\uff0cCE \u4e86\u597d\u591a\u6b21\u3002\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; // using i64 = long long; const int si = 1e6 + 10 ; char s [ si ]; int n , Next [ si ]; int main () { while ( true ) { scanf ( \"%s\" , s ); if ( s [ 0 ] == '.' ) break ; n = strlen ( s ); Next [ 1 ] = 0 ; for ( int i = 2 , j = 0 ; i <= n ; ++ i ) { while ( j > 0 && s [ i - 1 ] != s [ j ]) j = Next [ j ]; if ( s [ i - 1 ] == s [ j ]) j ++ ; Next [ i ] = j ; } int len = 1 ; if ( n % ( n - Next [ n ]) == 0 ) len = n / ( n - Next [ n ]); printf ( \"%d \\n \" , len ); } return 0 ; }","title":"POJ2406 Power Strings"},{"location":"algor/string/string-hash/","text":"\u5b57\u7b26\u4e32 Hash \u03c8(\uff40\u2207\u00b4)\u03c8 \u601d\u60f3\u548c Hash \u6ca1\u6709\u672c\u8d28\u533a\u522b\u3002 \u8981\u5173\u6ce8\u7684\u70b9\u4f9d\u65e7\u662f\u600e\u4e48\u8bbe\u8ba1 Hash function\uff0c\u600e\u4e48\u5904\u7406 Hash \u51b2\u7a81\u3002 \u8003\u8651\u628a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6620\u5c04\u6210\u4e00\u4e2a\u6570\uff0c\u8fd9\u4e2a\u5229\u7528 Hash function \u5373\u53ef\u3002 \u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u70b9\u662f Hash function \u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u4e24\u4e2a\u6761\u4ef6\uff1a \u5728 Hash \u51fd\u6570\u503c\u4e0d\u4e00\u6837\u7684\u65f6\u5019\uff0c\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e00\u5b9a\u4e0d\u4e00\u6837\uff1b \u5728 Hash \u51fd\u6570\u503c\u4e00\u6837\u7684\u65f6\u5019\uff0c\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e0d\u4e00\u5b9a\u4e00\u6837\uff08\u4f46\u6709\u5927\u6982\u7387\u4e00\u6837\uff0c\u4e14\u6211\u4eec\u5f53\u7136\u5e0c\u671b\u5b83\u4eec\u603b\u662f\u4e00\u6837\u7684\uff09\u3002 Hash \u51fd\u6570\u503c\u4e00\u6837\u65f6\u539f\u5b57\u7b26\u4e32\u5374\u4e0d\u4e00\u6837\u7684\u60c5\u51b5\u53eb\u505a\u54c8\u5e0c\u51b2\u7a81\u3002 \u505a\u6cd5\u662f\uff0c\u6211\u4eec\u9009\u53d6\u4e00\u4e2a\u5927\u8d28\u6570 \\(base\\) \uff0c\u7136\u540e\u628a\u5b57\u7b26\u4e32\u770b\u505a\u4e00\u4e2a \\(base\\) \u8fdb\u5236\u6570\uff0c\u7b97\u51fa\u8fd9\u4e2a\u503c\u4e4b\u540e\u5bf9\u53e6\u5916\u4e00\u4e2a\u5927\u8d28\u6570 \\(mod\\) \u53d6\u6a21\u3002 \u4e0d\u8fc7\u5176\u5b9e \\(base\\) \u53ea\u9700\u8981\u5927\u4e8e\u5b57\u7b26\u96c6\u5927\u5c0f\u5373\u53ef\uff0c\u6ce8\u610f\u4e00\u822c \\(base < mod\\) \u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5b57\u7b26\u4e32 \\(s\\) \uff0c\uff08\u4ece \\(1\\) \u5f00\u59cb\uff09\u5b83\u7684 Hash \u503c\u662f\u8fd9\u6837\u8ba1\u7b97\u7684\uff1a \\[ H(s) = \\sum\\limits_{i = 1}^{n} (index(s[i]) \\times base^{n - i}) \\% mod \\] \u7136\u540e\u8fd9\u4e2a\u4e1c\u897f\u4e5f\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u652f\u6301\u57fa\u672c\u7684\u5b57\u7b26\u4e32\u64cd\u4f5c\u3002 \u6bd4\u5982 \\(H(s + ch) = (H(s) \\times b + idx(ch)) \\% mod\\) \uff0c \\(ch\\) \u662f\u4e00\u4e2a\u5b57\u7b26\uff0c\u6709\u70b9\u7c7b\u4f3c\u4e8e\u4f4d\u8fd0\u7b97\u7684\u5de6\u79fb\u8fd0\u7b97\u3002 \u7136\u540e\u51cf\u53bb\u4e00\u4e2a\u5b57\u7b26\u6216\u8005\u5728\u5f00\u5934\u52a0\u5b57\u7b26\u4e5f\u7c7b\u4f3c\u3002 \u7136\u540e\u6709\u8fd9\u4e2a\u4e1c\u897f\u6211\u4eec\u5c31\u53ef\u4ee5\u5feb\u901f\u6c42\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\u6240\u6709\u524d\u7f00\u7684 Hash \u503c\u3002 \u6709\u4e86\u524d\u7f00 Hash\uff0c\u6211\u4eec\u60f3\u5e72\u7684\u4e00\u4ef6\u4e8b\u60c5\u5c31\u662f\u5feb\u901f\u6c42\u51fa\u5b50\u4e32\u7684 Hash\u3002 \u63a8\u4e00\u4e0b\u5f0f\u5b50\uff0c\u663e\u7136\u53ef\u4ee5\u53d1\u73b0\uff1a \\(H(s[l\\dots r]) = H(s[1\\dots r]) - H(s[1\\dots l - 1]) \\times base^{r - l + 1}\\) \uff0c\u8bb0\u5f97\u53d6\u6a21\u3002 \u7136\u540e\u5c31\u80fd \\(O(n)\\) \u9884\u5904\u7406 \\(H, base^n\\) \u4e4b\u540e \\(O(1)\\) \u8be2\u95ee\u5b50\u4e32 Hash \u4e86\uff0c\u5f53\u7136 \\(base^n\\) \u4e5f\u662f\u53ef\u4ee5\u5feb\u901f\u5e42\u7b97\u7684\u3002 \u6ce8\u610f\u5230\u8fd9\u6837\u5355\u6b21 Hash \u7684\u51b2\u7a81\u6982\u7387\u8fd8\u662f\u6709\u70b9\u5c0f\u5c0f\u7684\u9ad8\uff0c\u6240\u4ee5\u4e3a\u4e86\u6b63\u786e\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u53d6\u4e24\u4e2a\u5927\u8d28\u6570\u5206\u522b\u53d6\u6a21\uff0c\u7136\u540e\u4e24\u4e2a\u5b57\u7b26\u4e32\u76f8\u7b49\u5f53\u4e14\u4ec5\u5f53\u4e24\u4e2a Hash \u503c\u90fd\u76f8\u7b49\u3002 \u4e3a\u4e86\u964d\u4f4e\u51b2\u7a81\u6982\u7387\uff0c\u6211\u4eec\u4e00\u822c\u4f7f\u7528\u4e00\u5bf9\u5b6a\u751f\u7d20\u6570\uff0c\u4e00\u822c\u662f \\(10^9 + 7, 10^9 + 9\\) \uff0c\u5f53\u7136\u8fd9\u4e2a\u6bd4\u8f83\u5bb9\u6613\u88ab\u5361\uff08\u56e0\u4e3a\u8fc7\u4e8e\u8457\u540d\uff09\u3002 \u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u7684\u7d20\u6570\u5bf9\uff0c\u6bd4\u5982 \\(998244853,10^9+9\\) \u8fd9\u79cd\uff0c \\(base\\) \u4e00\u822c\u53d6 \\(131, 13331\\) \u8fd9\u79cd\u3002 \u5982\u679c\u60f3\u907f\u514d\u8fc7\u591a\u7684\u53d6\u6a21\uff0c\u53ef\u4ee5\u4f7f\u7528 ull \u5b58 Hash \u503c\uff0c\u76f4\u63a5\u4e0d\u505a\u4efb\u4f55\u53d6\u6a21\uff0c\u8fd9\u6837\u76f8\u5f53\u4e8e\u5bf9 \\(2^{64}\\) \u53d6\u6a21\uff08\u81ea\u7136\u6ea2\u51fa\u6cd5\uff09 \u5e94\u7528 & \u4f8b\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5b57\u7b26\u4e32\u5339\u914d \u03c8(\uff40\u2207\u00b4)\u03c8 \u5355\u6a21\u5f0f\u5339\u914d\uff0c\u76f4\u63a5\u8003\u8651\u5bf9\u4e8e\u6a21\u5f0f\u4e32\u6c42\u51fa\u5b83\u7684 Hash \u503c\uff0c\u7136\u540e\u626b\u63cf\u6587\u672c\u4e32\u7684\u6240\u6709\u548c\u6a21\u5f0f\u4e32\u957f\u5ea6\u76f8\u7b49\u7684\u5b50\u4e32\u770b\u662f\u5426\u80fd\u5339\u914d\u5c31\u884c\u3002 \u590d\u6742\u5ea6 \\(O(n)\\) \u3002 \u6700\u957f\u56de\u6587\u5b50\u4e32 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8003\u8651\u4e00\u4e2a\u7ecf\u5178 Trick\uff0c\u56e0\u4e3a\u56de\u6587\u4e32\u7684\u957f\u5ea6\u663e\u7136\u5177\u6709\u5355\u8c03\u6027\uff0c\u5982\u679c \\(len\\) \u957f\u5ea6\u7684\u53ef\u884c\uff0c\u90a3\u4e48 \\(len - 2\\) \u7684\u5fc5\u7136\u53ef\u884c\u3002 \u6240\u4ee5\u8003\u8651\u4e8c\u5206\u7b54\u6848 \\(len\\) \uff0c\u6bcf\u6b21 Check \u7684\u65f6\u5019\u76f4\u63a5\u679a\u4e3e\u56de\u6587\u4e2d\u5fc3\uff0c\u6bd4\u8f83\u4e24\u8fb9\u8fd9\u4e24\u4e2a\u5b50\u4e32\u7684 Hash \u503c\u662f\u5426\u76f8\u7b49\u5373\u53ef\u3002 \u9700\u8981\u9884\u5904\u7406\u524d\u540e\u7f00 Hash \u503c\uff0c\u6574\u4f53\u590d\u6742\u5ea6 \\(O(n \\log n)\\) \u3002 \u8fd9\u4e2a\u4e5f\u53ef\u4ee5 Manacher \\(O(n)\\) \u505a\u3002 \u6700\u957f\u516c\u5171\u5b50\u4e32 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u91cc\u662f \\(m\\) \u4e2a\u957f\u5ea6\u4e0d\u8d85\u8fc7 \\(n\\) \u7684\u5b57\u7b26\u4e32\u6c42\u3002 \u8fd9\u4e2a\u7c7b\u4f3c\u56de\u6587\u5b50\u4e32\u4e5f\u53ef\u4ee5\u4e8c\u5206\u3002 check \u76f4\u63a5\u5bf9\u4e8e\u6240\u6709\u957f\u5ea6\u4e3a \\(mid\\) \u7684\u5b50\u4e32\uff0cHash \u4e00\u4e0b\u5206\u522b\u6254\u5230 \\(n\\) \u4e2a Hash table \u91cc\u9762\u6c42\u4ea4\u96c6\u5c31\u884c\uff0c\u590d\u6742\u5ea6 \\(O(n\\log n/m)\\) \uff0c\u76ee\u524d\u4e0d\u592a\u61c2\u4e3a\u5565\u662f\u8fd9\u4e2a\u590d\u6742\u5ea6\u3002 \u4f46\u662f\u5b83\u786e\u5b9e\u6bd4\u76f4\u63a5 \\(O(n^2)\\) dp \u6548\u7387\u9ad8\u3002 \u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e2a\u597d\u50cf\u53ea\u80fd \\(n^2\\) \u5de6\u53f3\u590d\u6742\u5ea6 /ng \u505a\u6cd5\u5c31\u662f\u76f4\u63a5\u626b\u4e00\u6b21\u6bcf\u4e2a\u5b50\u4e32\uff0c\u7136\u540e\u628a\u5b83\u7684 Hash \u503c\u6254\u5230\u4e00\u4e2a\u6570\u7ec4/set\u91cc\u8ba1\u6570\u5c31\u884c\u3002 \u5176\u672c\u8d28\u5c31\u662f\u5bf9\u66b4\u529b\u505a\u4e86\u4e00\u4e2a\u4f18\u5316\uff0c\u6709\u6ca1\u6709\u66f4\u4f18\u79c0\u7684\u505a\u6cd5\u6211\u6682\u65f6\u4e0d\u77e5\u9053\u3002 CF1200E Compress Words \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60 \\(n\\) \u4e2a\u5b57\u7b26\u4e32\uff0c\u7b54\u6848\u4e32\u521d\u59cb\u4e3a\u7a7a\u3002\u7b2c \\(i\\) \u6b65\u5c06\u7b2c \\(i\\) \u4e2a\u5b57\u7b26\u4e32\u52a0\u5230\u7b54\u6848\u4e32\u7684\u540e\u9762\uff0c \u4f46\u662f\u5c3d\u91cf\u5730\u53bb\u6389\u91cd\u590d\u90e8\u5206\uff08\u5373\u53bb\u6389\u4e00\u4e2a\u6700\u957f\u7684\u3001\u662f\u539f\u7b54\u6848\u4e32\u7684\u540e\u7f00\u3001\u4e5f\u662f\u7b2c \\(i\\) \u4e2a\u4e32\u7684\u524d\u7f00\u7684\u5b57\u7b26\u4e32\uff09\uff0c\u6c42\u6700\u540e\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u3002 \\(n \\le 1e5, \\sum len \\le 1e6\\) \u3002 \u76f4\u63a5\u8003\u8651\u66b4\u529b\u5408\u5e76\uff0c\u6bcf\u6b21\u4e8c\u5206\u8fd9\u4e2a\u8981\u88ab\u5408\u5e76\u6389\u7684\u4e32\u7684\u957f\u5ea6\uff0c\u7136\u540e\u6bcf\u6b21\u5408\u5e76\u524d\u9884\u5904\u7406\u524d\u540e\u7f00 Hash\u3002 \u4e8e\u662f Check \u5c31\u53d8\u6210\u4e86 \\(O(1)\\) \u7684\uff0c\u5c31\u53ef\u4ee5 \\(O(\\log n)\\) \u627e\u51fa\u8fd9\u4e2a\u4e32\uff0c\u4e4b\u540e\u628a\u5408\u5e76\u8fdb\u6765\u7684\u4e32\u53bb\u6389\u516c\u5171\u4e32\u7684\u90e8\u5206\u627e\u51fa\u6765\u52a0\u5230\u7b54\u6848\u4e32\u540e\u9762\u5373\u53ef\u3002 \u590d\u6742\u5ea6 \\(O(n \\log n)\\) \uff0c\u8fd9\u9898\u4e5f\u53ef\u4ee5 KMP \u505a\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6700\u957f\u76f8\u7b49\u524d\u540e\u7f00\u548c Next \u7684\u5b9a\u4e49\u662f\u4e00\u81f4\u7684\u3002","title":"\u5b57\u7b26\u4e32\u54c8\u5e0c"},{"location":"algor/string/string-hash/#hash","text":"\u601d\u60f3\u548c Hash \u6ca1\u6709\u672c\u8d28\u533a\u522b\u3002 \u8981\u5173\u6ce8\u7684\u70b9\u4f9d\u65e7\u662f\u600e\u4e48\u8bbe\u8ba1 Hash function\uff0c\u600e\u4e48\u5904\u7406 Hash \u51b2\u7a81\u3002 \u8003\u8651\u628a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6620\u5c04\u6210\u4e00\u4e2a\u6570\uff0c\u8fd9\u4e2a\u5229\u7528 Hash function \u5373\u53ef\u3002 \u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u70b9\u662f Hash function \u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u4e24\u4e2a\u6761\u4ef6\uff1a \u5728 Hash \u51fd\u6570\u503c\u4e0d\u4e00\u6837\u7684\u65f6\u5019\uff0c\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e00\u5b9a\u4e0d\u4e00\u6837\uff1b \u5728 Hash \u51fd\u6570\u503c\u4e00\u6837\u7684\u65f6\u5019\uff0c\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e0d\u4e00\u5b9a\u4e00\u6837\uff08\u4f46\u6709\u5927\u6982\u7387\u4e00\u6837\uff0c\u4e14\u6211\u4eec\u5f53\u7136\u5e0c\u671b\u5b83\u4eec\u603b\u662f\u4e00\u6837\u7684\uff09\u3002 Hash \u51fd\u6570\u503c\u4e00\u6837\u65f6\u539f\u5b57\u7b26\u4e32\u5374\u4e0d\u4e00\u6837\u7684\u60c5\u51b5\u53eb\u505a\u54c8\u5e0c\u51b2\u7a81\u3002 \u505a\u6cd5\u662f\uff0c\u6211\u4eec\u9009\u53d6\u4e00\u4e2a\u5927\u8d28\u6570 \\(base\\) \uff0c\u7136\u540e\u628a\u5b57\u7b26\u4e32\u770b\u505a\u4e00\u4e2a \\(base\\) \u8fdb\u5236\u6570\uff0c\u7b97\u51fa\u8fd9\u4e2a\u503c\u4e4b\u540e\u5bf9\u53e6\u5916\u4e00\u4e2a\u5927\u8d28\u6570 \\(mod\\) \u53d6\u6a21\u3002 \u4e0d\u8fc7\u5176\u5b9e \\(base\\) \u53ea\u9700\u8981\u5927\u4e8e\u5b57\u7b26\u96c6\u5927\u5c0f\u5373\u53ef\uff0c\u6ce8\u610f\u4e00\u822c \\(base < mod\\) \u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5b57\u7b26\u4e32 \\(s\\) \uff0c\uff08\u4ece \\(1\\) \u5f00\u59cb\uff09\u5b83\u7684 Hash \u503c\u662f\u8fd9\u6837\u8ba1\u7b97\u7684\uff1a \\[ H(s) = \\sum\\limits_{i = 1}^{n} (index(s[i]) \\times base^{n - i}) \\% mod \\] \u7136\u540e\u8fd9\u4e2a\u4e1c\u897f\u4e5f\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u652f\u6301\u57fa\u672c\u7684\u5b57\u7b26\u4e32\u64cd\u4f5c\u3002 \u6bd4\u5982 \\(H(s + ch) = (H(s) \\times b + idx(ch)) \\% mod\\) \uff0c \\(ch\\) \u662f\u4e00\u4e2a\u5b57\u7b26\uff0c\u6709\u70b9\u7c7b\u4f3c\u4e8e\u4f4d\u8fd0\u7b97\u7684\u5de6\u79fb\u8fd0\u7b97\u3002 \u7136\u540e\u51cf\u53bb\u4e00\u4e2a\u5b57\u7b26\u6216\u8005\u5728\u5f00\u5934\u52a0\u5b57\u7b26\u4e5f\u7c7b\u4f3c\u3002 \u7136\u540e\u6709\u8fd9\u4e2a\u4e1c\u897f\u6211\u4eec\u5c31\u53ef\u4ee5\u5feb\u901f\u6c42\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\u6240\u6709\u524d\u7f00\u7684 Hash \u503c\u3002 \u6709\u4e86\u524d\u7f00 Hash\uff0c\u6211\u4eec\u60f3\u5e72\u7684\u4e00\u4ef6\u4e8b\u60c5\u5c31\u662f\u5feb\u901f\u6c42\u51fa\u5b50\u4e32\u7684 Hash\u3002 \u63a8\u4e00\u4e0b\u5f0f\u5b50\uff0c\u663e\u7136\u53ef\u4ee5\u53d1\u73b0\uff1a \\(H(s[l\\dots r]) = H(s[1\\dots r]) - H(s[1\\dots l - 1]) \\times base^{r - l + 1}\\) \uff0c\u8bb0\u5f97\u53d6\u6a21\u3002 \u7136\u540e\u5c31\u80fd \\(O(n)\\) \u9884\u5904\u7406 \\(H, base^n\\) \u4e4b\u540e \\(O(1)\\) \u8be2\u95ee\u5b50\u4e32 Hash \u4e86\uff0c\u5f53\u7136 \\(base^n\\) \u4e5f\u662f\u53ef\u4ee5\u5feb\u901f\u5e42\u7b97\u7684\u3002 \u6ce8\u610f\u5230\u8fd9\u6837\u5355\u6b21 Hash \u7684\u51b2\u7a81\u6982\u7387\u8fd8\u662f\u6709\u70b9\u5c0f\u5c0f\u7684\u9ad8\uff0c\u6240\u4ee5\u4e3a\u4e86\u6b63\u786e\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u53d6\u4e24\u4e2a\u5927\u8d28\u6570\u5206\u522b\u53d6\u6a21\uff0c\u7136\u540e\u4e24\u4e2a\u5b57\u7b26\u4e32\u76f8\u7b49\u5f53\u4e14\u4ec5\u5f53\u4e24\u4e2a Hash \u503c\u90fd\u76f8\u7b49\u3002 \u4e3a\u4e86\u964d\u4f4e\u51b2\u7a81\u6982\u7387\uff0c\u6211\u4eec\u4e00\u822c\u4f7f\u7528\u4e00\u5bf9\u5b6a\u751f\u7d20\u6570\uff0c\u4e00\u822c\u662f \\(10^9 + 7, 10^9 + 9\\) \uff0c\u5f53\u7136\u8fd9\u4e2a\u6bd4\u8f83\u5bb9\u6613\u88ab\u5361\uff08\u56e0\u4e3a\u8fc7\u4e8e\u8457\u540d\uff09\u3002 \u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u7684\u7d20\u6570\u5bf9\uff0c\u6bd4\u5982 \\(998244853,10^9+9\\) \u8fd9\u79cd\uff0c \\(base\\) \u4e00\u822c\u53d6 \\(131, 13331\\) \u8fd9\u79cd\u3002 \u5982\u679c\u60f3\u907f\u514d\u8fc7\u591a\u7684\u53d6\u6a21\uff0c\u53ef\u4ee5\u4f7f\u7528 ull \u5b58 Hash \u503c\uff0c\u76f4\u63a5\u4e0d\u505a\u4efb\u4f55\u53d6\u6a21\uff0c\u8fd9\u6837\u76f8\u5f53\u4e8e\u5bf9 \\(2^{64}\\) \u53d6\u6a21\uff08\u81ea\u7136\u6ea2\u51fa\u6cd5\uff09","title":"\u5b57\u7b26\u4e32 Hash"},{"location":"algor/string/string-hash/#_1","text":"","title":"\u5e94\u7528 &amp; \u4f8b\u9898"},{"location":"algor/string/string-hash/#_2","text":"\u5355\u6a21\u5f0f\u5339\u914d\uff0c\u76f4\u63a5\u8003\u8651\u5bf9\u4e8e\u6a21\u5f0f\u4e32\u6c42\u51fa\u5b83\u7684 Hash \u503c\uff0c\u7136\u540e\u626b\u63cf\u6587\u672c\u4e32\u7684\u6240\u6709\u548c\u6a21\u5f0f\u4e32\u957f\u5ea6\u76f8\u7b49\u7684\u5b50\u4e32\u770b\u662f\u5426\u80fd\u5339\u914d\u5c31\u884c\u3002 \u590d\u6742\u5ea6 \\(O(n)\\) \u3002","title":"\u5b57\u7b26\u4e32\u5339\u914d"},{"location":"algor/string/string-hash/#_3","text":"\u8003\u8651\u4e00\u4e2a\u7ecf\u5178 Trick\uff0c\u56e0\u4e3a\u56de\u6587\u4e32\u7684\u957f\u5ea6\u663e\u7136\u5177\u6709\u5355\u8c03\u6027\uff0c\u5982\u679c \\(len\\) \u957f\u5ea6\u7684\u53ef\u884c\uff0c\u90a3\u4e48 \\(len - 2\\) \u7684\u5fc5\u7136\u53ef\u884c\u3002 \u6240\u4ee5\u8003\u8651\u4e8c\u5206\u7b54\u6848 \\(len\\) \uff0c\u6bcf\u6b21 Check \u7684\u65f6\u5019\u76f4\u63a5\u679a\u4e3e\u56de\u6587\u4e2d\u5fc3\uff0c\u6bd4\u8f83\u4e24\u8fb9\u8fd9\u4e24\u4e2a\u5b50\u4e32\u7684 Hash \u503c\u662f\u5426\u76f8\u7b49\u5373\u53ef\u3002 \u9700\u8981\u9884\u5904\u7406\u524d\u540e\u7f00 Hash \u503c\uff0c\u6574\u4f53\u590d\u6742\u5ea6 \\(O(n \\log n)\\) \u3002 \u8fd9\u4e2a\u4e5f\u53ef\u4ee5 Manacher \\(O(n)\\) \u505a\u3002","title":"\u6700\u957f\u56de\u6587\u5b50\u4e32"},{"location":"algor/string/string-hash/#_4","text":"\u8fd9\u91cc\u662f \\(m\\) \u4e2a\u957f\u5ea6\u4e0d\u8d85\u8fc7 \\(n\\) \u7684\u5b57\u7b26\u4e32\u6c42\u3002 \u8fd9\u4e2a\u7c7b\u4f3c\u56de\u6587\u5b50\u4e32\u4e5f\u53ef\u4ee5\u4e8c\u5206\u3002 check \u76f4\u63a5\u5bf9\u4e8e\u6240\u6709\u957f\u5ea6\u4e3a \\(mid\\) \u7684\u5b50\u4e32\uff0cHash \u4e00\u4e0b\u5206\u522b\u6254\u5230 \\(n\\) \u4e2a Hash table \u91cc\u9762\u6c42\u4ea4\u96c6\u5c31\u884c\uff0c\u590d\u6742\u5ea6 \\(O(n\\log n/m)\\) \uff0c\u76ee\u524d\u4e0d\u592a\u61c2\u4e3a\u5565\u662f\u8fd9\u4e2a\u590d\u6742\u5ea6\u3002 \u4f46\u662f\u5b83\u786e\u5b9e\u6bd4\u76f4\u63a5 \\(O(n^2)\\) dp \u6548\u7387\u9ad8\u3002","title":"\u6700\u957f\u516c\u5171\u5b50\u4e32"},{"location":"algor/string/string-hash/#_5","text":"\u8fd9\u4e2a\u597d\u50cf\u53ea\u80fd \\(n^2\\) \u5de6\u53f3\u590d\u6742\u5ea6 /ng \u505a\u6cd5\u5c31\u662f\u76f4\u63a5\u626b\u4e00\u6b21\u6bcf\u4e2a\u5b50\u4e32\uff0c\u7136\u540e\u628a\u5b83\u7684 Hash \u503c\u6254\u5230\u4e00\u4e2a\u6570\u7ec4/set\u91cc\u8ba1\u6570\u5c31\u884c\u3002 \u5176\u672c\u8d28\u5c31\u662f\u5bf9\u66b4\u529b\u505a\u4e86\u4e00\u4e2a\u4f18\u5316\uff0c\u6709\u6ca1\u6709\u66f4\u4f18\u79c0\u7684\u505a\u6cd5\u6211\u6682\u65f6\u4e0d\u77e5\u9053\u3002","title":"\u672c\u8d28\u4e0d\u540c\u5b50\u4e32\u4e2a\u6570"},{"location":"algor/string/string-hash/#cf1200e-compress-words","text":"\u7ed9\u4f60 \\(n\\) \u4e2a\u5b57\u7b26\u4e32\uff0c\u7b54\u6848\u4e32\u521d\u59cb\u4e3a\u7a7a\u3002\u7b2c \\(i\\) \u6b65\u5c06\u7b2c \\(i\\) \u4e2a\u5b57\u7b26\u4e32\u52a0\u5230\u7b54\u6848\u4e32\u7684\u540e\u9762\uff0c \u4f46\u662f\u5c3d\u91cf\u5730\u53bb\u6389\u91cd\u590d\u90e8\u5206\uff08\u5373\u53bb\u6389\u4e00\u4e2a\u6700\u957f\u7684\u3001\u662f\u539f\u7b54\u6848\u4e32\u7684\u540e\u7f00\u3001\u4e5f\u662f\u7b2c \\(i\\) \u4e2a\u4e32\u7684\u524d\u7f00\u7684\u5b57\u7b26\u4e32\uff09\uff0c\u6c42\u6700\u540e\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u3002 \\(n \\le 1e5, \\sum len \\le 1e6\\) \u3002 \u76f4\u63a5\u8003\u8651\u66b4\u529b\u5408\u5e76\uff0c\u6bcf\u6b21\u4e8c\u5206\u8fd9\u4e2a\u8981\u88ab\u5408\u5e76\u6389\u7684\u4e32\u7684\u957f\u5ea6\uff0c\u7136\u540e\u6bcf\u6b21\u5408\u5e76\u524d\u9884\u5904\u7406\u524d\u540e\u7f00 Hash\u3002 \u4e8e\u662f Check \u5c31\u53d8\u6210\u4e86 \\(O(1)\\) \u7684\uff0c\u5c31\u53ef\u4ee5 \\(O(\\log n)\\) \u627e\u51fa\u8fd9\u4e2a\u4e32\uff0c\u4e4b\u540e\u628a\u5408\u5e76\u8fdb\u6765\u7684\u4e32\u53bb\u6389\u516c\u5171\u4e32\u7684\u90e8\u5206\u627e\u51fa\u6765\u52a0\u5230\u7b54\u6848\u4e32\u540e\u9762\u5373\u53ef\u3002 \u590d\u6742\u5ea6 \\(O(n \\log n)\\) \uff0c\u8fd9\u9898\u4e5f\u53ef\u4ee5 KMP \u505a\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6700\u957f\u76f8\u7b49\u524d\u540e\u7f00\u548c Next \u7684\u5b9a\u4e49\u662f\u4e00\u81f4\u7684\u3002","title":"CF1200E Compress Words"},{"location":"algor/string/trie/","text":"\u6982\u8ff0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u53c8\u53eb\u505a\u5b57\u5178\u6811\uff0c\u601d\u60f3\u662f\u628a\u5b57\u7b26\u4e32\u62c6\u5206\u6210\u4e00\u4e2a\u4e00\u4e2a\u5b57\u7b26\uff0c\u7136\u540e\u5c06\u5b57\u7b26\u653e\u5230\u6811\u7684\u201c\u8fb9\u201d\u4e0a\uff08 \u5b57\u7b26\u6307\u9488 \uff09\uff0c\u5229\u7528\u8282\u70b9\u50a8\u5b58\u5b57\u7b26\u4e32\u7ed3\u675f\u7b49\u4fe1\u606f\u3002 \u666e\u901a Trie \u4e00\u822c\u7528\u4e8e\u68c0\u7d22\u5b57\u7b26\u4e32\u662f\u5426\u5b58\u5728\uff0c\u6216\u8005\u4f5c\u4e3a AC \u81ea\u52a8\u673a\u7684\u4e00\u90e8\u5206\uff0c\u7528\u4e8e\u591a\u6a21\u5f0f\u5339\u914d\u3002 \u53d8\u79cd\u7684 01Trie \u53ef\u4ee5\u5b9e\u73b0\u8bf8\u5982\u67e5\u8be2\u548c \\(x\\) \u5f02\u6216\u503c\u6700\u5927\u7684\u6570\uff0c\u7ef4\u62a4\u5f02\u6216\u548c\u7b49 \u4f4d\u8fd0\u7b97\u76f8\u5173\u64cd\u4f5c \uff0c\u5c24\u5176\u662f\u5f02\u6216\u3002 \u7ed3\u6784\u4e00\u822c\u957f\u8fd9\u6837\uff1a Trie \u03c8(\uff40\u2207\u00b4)\u03c8 Trie \u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff0c\u63d2\u5165\u548c\u67e5\u8be2\u3002 \u9996\u5148\u660e\u786e Trie \u7684\u7ed3\u6784\u5230\u5e95\u662f\u600e\u4e48\u6837\u7684\uff0cTrie \u5c06\u5b57\u7b26\u50a8\u5b58\u4e8e\u6811\u7684\u8fb9\u4e0a\uff0c\u5e76\u5728\u8282\u70b9\u4e0a\u6709\u4e00\u4e2a \\(end\\) \u6807\u8bb0\uff0c\u8868\u793a\u5f53\u524d\u8282\u70b9\u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\u3002 \u5b9e\u73b0\u65f6\u5229\u7528\u4e00\u4e2a\u6570\u7ec4 \\(tr[x,ch]\\) \uff0c\u8868\u793a\u8282\u70b9 \\(x\\) \u7684 \\(ch\\) \u5b57\u7b26\u6307\u9488\u6307\u5411\u7684\u8282\u70b9\u7f16\u53f7\u3002 \u7c7b\u6bd4\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7684\u601d\u60f3\uff0cTrie \u53ea\u4f1a\u5728\u4e00\u4e2a\u8282\u70b9\u88ab\u5efa\u7acb\u65f6\u7ed9\u4e88\u4e00\u4e2a\u7f16\u53f7\u3002 \u521d\u59cb\u7684\u65f6\u5019 Trie \u53ea\u6709\u4e00\u4e2a\u8282\u70b9 \\(root\\) \uff0c\u5e76\u4e14\u6240\u6709\u7684 \\(tr\\) \u90fd\u6307\u5411 \\(\\text{NULL}\\) \uff08\u7a7a\uff09\u3002 \u63d2\u5165\u5b57\u7b26\u4e32 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5c06\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32 \\(s\\) \u63d2\u5165\u5230 Trie \u5f53\u4e2d\u3002 \u521d\u59cb\u65f6\u4ee4\u4e00\u4e2a\u6307\u9488 \\(p = root\\) \uff0c\u7136\u540e\u4ece\u6700\u4f4e\u4f4d\u5f00\u59cb\u626b\u63cf\u5b57\u7b26\u4e32 \\(s\\) \u3002 \u5982\u679c\u5f53\u524d\u626b\u63cf\u5230\u7684\u5b57\u7b26\u4e3a \\(s_i\\) \uff0c\u4ee4 \\(p = tr[p,s_i]\\) \u3002 \u5982\u679c \\(tr[p,s_i]\\) \u4e0d\u5b58\u5728\uff0c\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9 \\(q\\) \uff0c\u4ee4 \\(tr[p, s_i] = q\\) \uff0c\u7136\u540e\u628a \\(p\\) \u8df3\u5230 \\(q\\) \u3002 \u53cd\u4e4b\u76f4\u63a5\u628a \\(p\\) \u8df3\u8fc7\u53bb\u5373\u53ef\u3002 \u7136\u540e\u4ee4 \\(i = i + 1\\) \uff0c\u626b\u63cf\u4e0b\u4e00\u4e2a\u5b57\u7b26\u3002 \u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u76f4\u5230 \\(s\\) \u88ab\u626b\u63cf\u5b8c\u6bd5\uff0c\u5728\u5f53\u524d\u7684\u8282\u70b9 \\(p\\) \u4e0a\u6253\u4e0a\u4e00\u4e2a\u6807\u8bb0 \\(end[p] = \\text{true}\\) \u3002 \u653e\u4e00\u5f20\u65e9\u5e74\u505a\u7684\u6bd4\u8f83\u7cd9\u7684 GIF\uff1a \u8be2\u95ee \u03c8(\uff40\u2207\u00b4)\u03c8 \u67e5\u8be2\u4e00\u4e2a\u5b57\u7b26\u4e32 \\(s\\) \u662f\u5426\u5b58\u5728\u4e8e Trie \u5f53\u4e2d\u3002 \u7c7b\u4f3c Insert \u64cd\u4f5c\uff0c\u8bbe\u4e00\u4e2a\u6307\u9488 \\(p = root\\) \uff0c\u7136\u540e\u626b\u63cf \\(s_i\\) \u3002 \u4e0d\u65ad\u8df3 \\(p = tr[p, s_i]\\) \uff0c\u5982\u679c\u8fd8\u6ca1\u6709\u626b\u5b8c \\(s\\) \uff0c\u5c31\u5df2\u7ecf\u51fa\u73b0\u4e86 \\(tr[p,s_i]\\) \u6307\u5411 \\(\\text{NULL}\\) \u7684\u60c5\u51b5\uff0c\u5219\u8fd4\u56de \\(\\text{false}\\) \u3002 \u5982\u679c\u5df2\u7ecf\u626b\u63cf\u5b8c\u4e86 \\(s\\) \uff0c\u4e14 \\(end[p] = \\text{true}\\) \uff0c\u8fd4\u56de \\(\\text{true}\\) \u3002 \u53cd\u4e4b\u8fd4\u56de \\(\\text{false}\\) \u3002 \u4ee3\u7801\u5b9e\u73b0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u666e\u901a Trie \u6811 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 // \u5b9a\u4e49 NULL \u4e3a 0\uff0c\u5b57\u7b26\u96c6\u4e3a a~z\u3002 int tr [ si ][ 27 ]; bool exist [ si ]; int tot , root ; void init () { memset ( tr , 0 , sizeof tr ); memset ( exist , false , sizeof exist ); tot = 0 , root = ++ tot ; } void insert ( string s ) { int p = root ; for ( int i = 0 ; i < ( int ) s . size (); ++ i ) { int ch = ( int ) ( s [ i ] - 'a' ) + 1 ; if ( ! tr [ p ][ ch ]) tr [ p ][ ch ] = ++ tot ; p = tr [ p ][ ch ]; } exist [ p ] = true ; } bool query ( string s ) { int p = root ; for ( int i = 0 ; i < ( int ) s . size (); ++ i ) { int ch = ( int ) ( s [ i ] - 'a' ) + 1 ; if ( ! tr [ p ][ ch ]) return false ; p = tr [ p ][ ch ]; } return exist [ p ]; } \u4e00\u4e9b\u6027\u8d28 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u662f\u4ed6\u4eec\u7684\u5c3e\u6807\u8bb0\u6240\u5728\u7684\u4e24\u4e2a\u8282\u70b9\u7684 lca \u5230\u6839\u7684\u8def\u5f84\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u3002 \u6211\u8ba4\u4e3a LCP \u4e5f\u53ef\u4ee5\u8fd9\u4e48\u66b4\u529b\u6c42\u3002 \u53ef\u4ee5\u628a\u5c3e\u6807\u8bb0\u6539\u6210 int \uff0c\u53ef\u4ee5\u7528\u6765\u7edf\u8ba1\u8bcd\u9891\u3002 \u4e5f\u53ef\u4ee5\u65b9\u4fbf\u7684\u7edf\u8ba1\u67d0\u4e2a\u524d\u7f00\u5728\u6240\u6709\u4e32\u5f53\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff08\u7ed3\u5408 2\uff09\u3002 \u662f AC \u81ea\u52a8\u673a\u7684\u4e00\u90e8\u5206\u3002 01Trie \u03c8(\uff40\u2207\u00b4)\u03c8 \u7c7b\u4f3c\u4e8e\u666e\u901a\u7684 Trie\uff0c\u53ea\u4e0d\u8fc7\u5c06\u5b57\u7b26\u96c6\u53d8\u4e3a\u4e86 \\(\\{0,1\\}\\) \u4ee5\u7ef4\u62a4\u4e00\u4e9b\u4e8c\u8fdb\u5236\u76f8\u5173\u7684\u4fe1\u606f\u3002 \u6c42\u4e0e x \u5f02\u6216\u7684\u6700\u503c \u03c8(\uff40\u2207\u00b4)\u03c8 \u8be2\u95ee\u6700\u503c \u03c8(\uff40\u2207\u00b4)\u03c8 \u5c06\u6240\u6709\u6570\u4e8c\u8fdb\u5236\u62c6\u5206\uff0c\u5305\u62ec \\(x\\) \u3002 \u7136\u540e\u628a\u8fd9\u4e9b\u4e8c\u8fdb\u5236\u6570 \u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d \u63d2\u5165\u8fdb Trie\u3002 \u7136\u540e\u4ece\u9ad8\u5230\u4f4e\u626b\u63cf \\(x\\) \u4e8c\u8fdb\u5236\u4e0b\u7684\u6bcf\u4e00\u4f4d\uff0c\u540c\u65f6\u7ef4\u62a4\u4e00\u4e2a\u6307\u9488 \\(p\\) \u5f80\u4e0b\u8df3\u3002 \u5047\u8bbe \\(x\\) \u5f53\u524d\u7684\u8fd9\u4e00\u4f4d\u4e3a \\(k\\) \uff0c\u90a3\u4e48\u60f3\u8981\u8ba9\u5f02\u6216\u548c\u66f4\u5927\uff0c\u5c31\u662f\u8ba9\u8d8a\u9ad8\u7684\u4f4d\u5c3d\u53ef\u80fd\u7684\u4e3a \\(1\\) \u3002 \u6240\u4ee5\u6211\u4eec\u9700\u8981\u5c3d\u91cf\u5f80 \\(k \\operatorname{xor} 1\\) \uff08\u76f8\u53cd\u7684\uff09\u7684\u6307\u9488\u8d70\uff0c\u5982\u679c\u5f53\u524d\u8282\u70b9\u6ca1\u6709 \\(k \\operatorname{xor} 1\\) \u8fd9\u4e2a\u6307\u9488\uff0c\u90a3\u4e48\u5c31\u53ea\u597d\u8d70 \\(k\\) \u8fd9\u4e2a\u6307\u9488\u3002 \u8df3\u5230\u53f6\u5b50\u8282\u70b9\u4e4b\u540e\uff0c\u4ece \\(p\\) \u5230 \\(root\\) \u7684\u8def\u5f84\u7ec4\u6210\u7684\u6570\u5c31\u662f\u6240\u6c42\u7684\uff0c\u548c \\(x\\) \u5f02\u6216\u8d77\u6765\u7684\u503c\u6700\u5927\u7684\u6570\uff0c \u5728\u63d2\u5165\u6bcf\u4e2a\u6570\u4e4b\u540e\uff0c\u5728\u5bf9\u5e94\u7ed3\u675f\u7684\u8282\u70b9\u6253\u4e00\u4e2a\u6807\u8bb0\uff0c\u8bb0\u5f55\u4ece\u8fd9\u4e2a\u8282\u70b9\u5230\u6839\u7684\u8def\u5f84\u7ec4\u6210\u7684\u6570\u662f\u591a\u5c11\u5373\u53ef\u3002 \u5f02\u6216\u8d77\u6765\u6700\u5c0f\u540c\u7406\u3002 \u4ee3\u7801\u5b9e\u73b0 \u03c8(\uff40\u2207\u00b4)\u03c8 01Trie 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 using i64 = long long ; const int si = 1e5 + 10 ; const int k = 32 ; int tr [ k * si ][ 2 ]; i64 value [ k * si ]; int tot = 0 , root = ++ tot ; int newnode () { tr [ ++ tot ][ 0 ] = tr [ tot ][ 1 ] = value [ tot ] = 0 ; return tot ; } int cacid ( int num , int pos ) { return ( num >> pos ) & 1 ; } void insert ( int num ) { int p = root ; for ( int i = 32 ; i >= 0 ; -- i ) { int ch = cacid ( num , i ); if ( ! tr [ p ][ ch ]) tr [ p ][ ch ] = newnode (); p = tr [ p ][ ch ]; } value [ p ] = num ; } // \u67e5\u8be2\u5f02\u6216 x \u6700\u5927\u7684\u4e00\u4e2a\u3002 i64 query ( i64 num ) { int p = root ; for ( int i = 32 ; i >= 0 ; -- i ) { int ch = cacid ( num , i ); if ( tr [ p ][ ch ^ 1 ]) p = tr [ p ][ ch ^ 1 ]; else p = tr [ p ][ ch ]; } return value [ p ]; } \u7ef4\u62a4\u5f02\u6216\u548c \u03c8(\uff40\u2207\u00b4)\u03c8 01 Trie \u53ef\u4ee5\u7528\u6765\u7ef4\u62a4\u4e00\u4e9b\u6570\u7684\u5f02\u6216\u548c\uff0c\u652f\u6301\u63d2\u5165\uff0c\u5220\u9664\uff0c\u8fd8\u6709\u5168\u5c40\u52a0\u4e00\u64cd\u4f5c\u3002 \u6211\u51fa\u7684\u4e00\u9053\u9898\u91cc\u9762\u6709\u7528\u5230\u4e00\u4e2a Trick\uff1a\u5f02\u6216\u548c\u7684\u4e8c\u8fdb\u5236\u4e0b\u67d0\u4e00\u4f4d\u7684\u503c\uff0c\u53d6\u51b3\u4e8e\u6240\u6709\u6570\u7684\u8fd9\u4e00\u4f4d\u7684 \\(1\\) \u7684\u4e2a\u6570\u7684 \u5947\u5076\u6027 \u3002 \u4e5f\u5c31\u662f\uff0c\u5f02\u6216\u548c \\(xorv\\) \u7684\u7b2c \\(k\\) \u4f4d\u662f \\(1\\) \uff0c\u5f53\u4e14\u4ec5\u5f53\u6240\u6709\u6570\u5f53\u4e2d\u6709 \u5947\u6570\u4e2a \u6570\u7684\u7b2c \\(k\\) \u4e3a\u662f \\(1\\) \u3002 \u90a3\u4e48\u5229\u7528\u5b83\u6765\u8003\u8651\u7ef4\u62a4\u5168\u5c40\u5f02\u6216\u548c\u3002 \u4e0d\u8fc7\u7ef4\u62a4\u5f02\u6216\u548c\u7684\u65f6\u5019\u548c\u4e00\u822c\u7684 01Trie \u4e0d\u4e00\u6837\uff0c\u6b64\u65f6\u7684 01Trie \u5e94\u5f53\u662f \u4ece\u4f4e\u4f4d\u5230\u9ad8\u4f4d\u63d2\u5165 \u7684\uff0c\u4ee5\u65b9\u4fbf\u5168\u5c40\u52a0\u4e00\u64cd\u4f5c\u7684\u5904\u7406\u3002 \u4fe1\u606f\u4e0a\u4f20 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7528\u7c7b\u4f3c\u7ebf\u6bb5\u6811\u7684\u601d\u60f3\uff0c\u6211\u4eec\u81ea\u5e95\u5411\u4e0a\u6536\u96c6\u4fe1\u606f\u3002 \u8bbe \\(xorv_i\\) \u8868\u793a\u8282\u70b9 \\(i\\) \u7684\u5b50\u6811\u6240\u7ef4\u62a4\u7684\u5f02\u6216\u548c\u3002 \u8bbe \\(wei_i\\) \u6307\u8282\u70b9 \\(i\\) \u5230\u5176\u7236\u4eb2\u8282\u70b9\u8fd9\u6761\u8fb9\u4e0a\u6570\u503c\u7684\u6570\u91cf\uff08\u6743\u503c\uff09\uff0c\u4e5f\u5c31\u662f\u8fd9\u6761\u8fb9 \u88ab\u6240\u6709\u63d2\u5165\u7684\u6570 \u62c6\u6210\u4e8c\u8fdb\u5236\u4e4b\u540e \u5728\u6811\u4e0a\u4ee3\u8868\u7684\u8def\u5f84 \u8986\u76d6\u7684\u6b21\u6570\u3002 \u4e0d\u8fc7\u6211\u4eec\u5b9e\u9645\u4e0a \u4e0d\u9700\u8981\u77e5\u9053\u5177\u4f53 \u7ef4\u62a4\u4e86\u54ea\u4e9b\u6570\uff0c\u7ef4\u62a4\u4e86\u591a\u5c11\u4e2a\uff0c \u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053 \\(wei\\) \u7684 \u5947\u5076\u6027 \u5c31\u884c\u4e86\u3002 \u90a3\u4e48\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u975e\u53f6\u5b50\u8282\u70b9 \\(p\\) \uff0c\u53ef\u4ee5\u6709\u4ee5\u4e0b\u7684\u8fc7\u7a0b\uff1a \u9996\u5148\uff0c\u4ee4 \\(wei_p = wei_{tr[p][0]} + wei_{tr[p][1]}\\) \u3002 \u5982\u679c \\(p\\) \u7684 \\(0\\) \u6307\u9488\u6307\u5411\u7684\u8282\u70b9\u4e0d\u4e3a \\(\\text{NULL}\\) \uff0c\u90a3\u4e48\u8ba9 \\(xorv_p = xorv_p \\operatorname{xor} (xorv_{tr[p][0]}<<1)\\) \uff0c\u4e5f\u5c31\u662f \u5148\u5bf9\u9f50 \u6bcf\u4e00\u4f4d\uff0c\u7136\u540e\u5f02\u6216\u8d77\u6765\u3002 \u5982\u679c \\(p\\) \u7684 \\(1\\) \u6307\u9488\u6307\u5411\u7684\u8282\u70b9\u4e0d\u4e3a \\(\\text{NULL}\\) \uff0c\u90a3\u4e48\u8ba9 \\(xorv_p = xorv_p \\operatorname{xor} ((xorv_{tr[p][1]} << 1) \\operatorname{or} (wei_{tr[p][1]} \\operatorname{and} 1))\\) \u3002 \u4e5f\u5c31\u662f\u5148\u5bf9\u9f50\u6bcf\u4e00\u4f4d\uff0c\u7136\u540e\u770b\u5947\u5076\u6027\u3002 \u63d2\u5165 / \u5220\u9664 \u03c8(\uff40\u2207\u00b4)\u03c8 \u63d2\u5165\u76f4\u63a5\u9012\u5f52\uff0c\u5982\u679c\u9047\u5230\u7a7a\u8282\u70b9\uff0c\u90a3\u4e48\u65b0\u5efa\u5373\u53ef\u3002 \u4e3a\u4e86\u4e4b\u540e\u5168\u5c40\u52a0\u4e00 \u8fdb\u4f4d \u65b9\u4fbf\uff0c\u6211\u4eec\u5f3a\u5236\u8ba9\u6bcf\u4e00\u4e2a\u6570\u90fd\u53d8\u6210 MaxDepth \u4f4d\uff0c\u518d\u63d2\u5165\u8fdb Trie \u5f53\u4e2d\u3002 MaxDepth \u662f\u4f60\u9009\u62e9\u7684 Trie \u6811\u7684\u6700\u5927\u6df1\u5ea6\uff0c\u4e00\u822c\u6bd4\u8981\u63d2\u5165\u7684\u6570\u7684\u6700\u9ad8\u4f4d\u6570\u591a\u51fa\u4e24\u4e09\u4f4d\u3002 \u5f53\u6df1\u5ea6\u5230\u8fbe MaxDepth \u4e4b\u540e\uff0c\u4ee4 \\(wei_p + 1\\) \uff0c\u7136\u540e\u4e0d\u65ad\u5411\u4e0a\u4f20\u9012\u4fe1\u606f\u5373\u53ef\u3002 \u8fd9\u6837\u5b50\u5c31\u80fd\u4fdd\u8bc1\uff0c\u6bcf\u63d2\u5165\u4e00\u4e2a\u6570 \\(x\\) \uff0c \\(x\\) \u7684\u4e8c\u8fdb\u5236\u8868\u793a \u5728 Trie \u6811\u4e0a\u4ee3\u8868\u7684\u8def\u5f84 \u4e0a\u7684\u6240\u6709\u8282\u70b9\u7684 \\(wei\\) \u90fd\u4f1a \\(+1\\) \u3002 \u5220\u9664\u64cd\u4f5c\u4e5f\u662f\u7c7b\u4f3c\u7684\uff0c\u53ea\u4e0d\u8fc7\u53d8\u6210\u4e86\u8ba9\u6700\u540e\u4e00\u4f4d\uff08\u6700\u9ad8\u4f4d\uff09\u6240\u5bf9\u5e94\u7684\u8282\u70b9\u7684 \\(wei -1\\) \uff0c\u518d\u5411\u4e0a\u6536\u96c6\u4fe1\u606f\u3002 \u5168\u5c40\u52a0\u4e00 \u03c8(\uff40\u2207\u00b4)\u03c8 \u601d\u8003\u4e00\u4e0b\uff0c\u5728\u4e8c\u8fdb\u5236\u4e0b\u7684\u52a0\u4e00\u64cd\u4f5c\u5b9e\u8d28\u4e0a\u662f\u4ec0\u4e48\uff1f \\[(10011)_2 + 1 = (10100)_2 \\\\ (10110)_2 + 1 = (10111)_2\\] \u5b9e\u9645\u4e0a\u5c31\u662f\uff1a\u4ece\u6700\u4f4e\u4f4d\u5f00\u59cb\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a \\(0\\) \uff0c\u5c06\u5176\u53d6\u53cd\uff0c\u7136\u540e\u5c06\u5b83\u540e\u9762\uff08\u5230\u6700\u4f4e\u4f4d\uff09\u7684\u6240\u6709 \\(1\\) \u53d8\u6210 \\(0\\) \u3002 \u5bf9\u5e94\u5230 01Trie \u4e0a\uff0c\u5c31\u662f\u4ece \\(root\\) \u5f00\u59cb\u9012\u5f52\u4e0b\u53bb\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u975e\u7a7a\u7684 \\(tr[p][0]\\) \u6307\u9488\uff0c\u7136\u540e\u4ea4\u6362 \\(tr[p][0],tr[p][1]\\) \uff08\u53d6\u53cd\uff09\u3002 \u6cbf\u7740 \u4ea4\u6362\u4e4b\u540e \u7684 \\(tr[p][0]\\) \u9012\u5f52\u4e0b\u53bb\u64cd\u4f5c\u5373\u53ef\u3002 \u4ee3\u7801\u5b9e\u73b0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ef4\u62a4\u5f02\u6216\u548c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 #include <bits/stdc++.h> using namespace std ; const int si = 1e4 + 10 ; const int MaxDepth = 21 ; int tr [ si * ( MaxDepth + 1 )][ 2 ]; int wei [ si * ( MaxDepth + 1 )], xorv [ si * ( MaxDepth + 1 )]; int tot = 0 , root = ++ tot ; // \u5176\u5b9e\u8fd9\u91cc root \u53ef\u4ee5\u4e0d\u7528\u8d4b\u503c\uff0c\u9012\u5f52\u5f00\u70b9\u7684\u65f6\u5019\u4f1a\u81ea\u52a8\u7ed9\u7f16\u53f7\u7684\u3002 int newnode () { tr [ ++ tot ][ 0 ] = tr [ tot ][ 1 ] = wei [ tot ] = xorv [ tot ] = 0 ; return tot ; } void maintain ( int p ) { wei [ p ] = xorv [ p ] = 0 ; // \u4e3a\u4e86\u5e94\u5bf9\u4e0d\u65ad\u7684\u5220\u9664\u548c\u63d2\u5165\uff0c\u6bcf\u6b21\u7ef4\u62a4 p \u7684\u65f6\u5019\u90fd\u4ee4 wei, xorv = 0\u3002 // \u4e5f\u5c31\u662f\u6bcf\u6b21\u90fd**\u91cd\u65b0\u6536\u96c6\u4e00\u6b21\u4fe1\u606f**\uff0c\u800c\u4e0d\u662f\u4ece\u539f\u6765\u7684\u57fa\u7840\u4e0a\u4fee\u6539\u3002 if ( tr [ p ][ 0 ]) { wei [ p ] += wei [ tr [ p ][ 0 ]]; xorv [ p ] ^= ( xorv [ tr [ p ][ 0 ]] << 1 ); // \u56e0\u4e3a\u513f\u5b50\u6240\u7ef4\u62a4\u7684\u5f02\u6216\u548c\u5b9e\u9645\u4e0a\u6bd4 p \u5c11\u4e00\u4f4d\uff0c // \u5982\u679c\u8981\u6309\u4f4d\u5f02\u6216\u5c31\u8981\u8ba9\u513f\u5b50\u7684\u5f02\u6216\u548c\u5de6\u79fb\u4e00\u4f4d\uff0c\u548c p \u5bf9\u9f50\u3002 } if ( tr [ p ][ 1 ]) { wei [ p ] += wei [ tr [ p ][ 1 ]]; xorv [ p ] ^= ( xorv [ tr [ p ][ 1 ]] << 1 ) | ( wei [ tr [ p ][ 1 ]] & 1 ); // \u5229\u7528\u5947\u5076\u6027\u8ba1\u7b97\u3002 } wei [ p ] = wei [ p ] & 1 ; // \u6bcf\u63d2\u5165\u4e00\u6b21\u6216\u8005\u5220\u9664\u4e00\u6b21\uff0c\u5947\u5076\u6027\u90fd\u4f1a\u53d8\u5316\u3002 } // \u7c7b\u4f3c\u7ebf\u6bb5\u6811\u7684 pushup\uff0c\u4ece\u5e95\u5411\u4e0a\u6536\u96c6\u4fe1\u606f\u3002 // \u6362\u79cd\u8bf4\u6cd5\uff0c\u662f\u66f4\u65b0\u8282\u70b9 p \u7684\u4fe1\u606f\u3002 void insert ( int & p , int x , int depth ) { if ( ! p ) p = newnode (); if ( depth > MaxDepth ) { wei [ p ] += 1 ; return ; } insert ( tr [ p ][ x & 1 ], x >> 1 , depth + 1 ); // \u4ece\u4f4e\u5230\u9ad8\u4f4d\u63d2\u5165\uff0c\u6240\u4ee5\u662f x >> 1\u3002 maintain ( p ); } // \u63d2\u5165\u5143\u7d20 x\u3002 void remove ( int p , int x , int depth ) { // \u4e0d\u77e5\u9053\u662f\u4e0d\u662f\u5e94\u8be5\u5199 > MaxDepth - 1 \u8fd8\u662f > MaxDepth \uff1f if ( depth == MaxDepth ) { wei [ p ] -= 1 ; return ; } remove ( tr [ p ][ x & 1 ], x >> 1 , depth + 1 ); maintain ( p ); } // \u5220\u9664\u5143\u7d20 x\uff0c\u4f46\u662f x \u4e0d\u80fd\u662f\u4e0d\u5b58\u5728\u7684\u5143\u7d20\u3002 // \u5426\u5219\u4f1a\u8bbf\u95ee\u7a7a\u8282\u70b9 0 \u7136\u540e\u7ee7\u7eed\u5f80\u4e0b\uff0c\u4f1a\u51fa\u9519\u3002 void addall ( int p ) { swap ( tr [ p ][ 0 ], tr [ p ][ 1 ]); if ( tr [ p ][ 0 ]) addall ( tr [ p ][ 0 ]); maintain ( p ); // \u4ea4\u6362\u540e\u4e0b\u9762\u90fd\u88ab\u66f4\u6539\u4e86\uff0c\u9700\u8981\u518d\u6b21 maintain\u3002 } // \u5168\u90e8\u52a0\u4e00 int main () { int n ; cin >> n ; std :: vector < int > v ( n + 1 ); for ( int i = 1 ; i <= n ; ++ i ) { cin >> v [ i ], insert ( root , v [ i ], 0 ); } cout << xorv [ root ] << endl ; // \u67e5\u8be2\u603b\u5f02\u6216\u548c int m ; cin >> m ; for ( int i = 1 ; i <= m ; ++ i ) { int x , y ; cin >> y >> x ; if ( y == 0 ) remove ( root , x , 0 ); // remove \u548c addall \u6df7\u7528\u65f6\u5c0f\u5fc3 remove \u6389\u4e0d\u5b58\u5728\u7684\u5143\u7d20\uff01 else addall ( root ); cout << xorv [ root ] << endl ; } } 01Trie \u5408\u5e76 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5408\u5e76\u4e24\u9897 01Trie\u3002 \u548c\u7ebf\u6bb5\u6811\u5408\u5e76\u662f\u6bd4\u8f83\u7c7b\u4f3c\u7684\uff0c\u7528\u540c\u6837\u7684\u601d\u60f3\u601d\u8003\u5373\u53ef\u3002 \u5c31\u662f\u628a\u4e24\u4e2a\u8282\u70b9\u4e2d\u7684\u4e00\u4e2a\u7684\u4fe1\u606f\u5408\u5e76\u5230\u53e6\u5916\u4e00\u4e2a\u4e0a\uff0c\u5e76\u8fd4\u56de\u5408\u5e76\u4e4b\u540e\u7684\u7f16\u53f7\u3002 \uff08\u5f53\u7136\uff0c\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u6839\u636e\u60c5\u51b5\u628a\u4ed6\u4eec\u5408\u5e76\u5230\u4e00\u4e2a\u65b0\u7684\u8282\u70b9\u4e0a\uff09\u3002 \u5982\u679c\u6709\u4e00\u4e2a\u8282\u70b9\u4e3a\u7a7a\uff0c\u90a3\u4e48\u5c31\u8fd4\u56de\u53e6\u5916\u4e00\u4e2a\u8282\u70b9\u7684\u7f16\u53f7\u5373\u53ef\u3002 Merge 1 2 3 4 5 6 7 8 9 10 int merge ( int p , int q ) { if ( ! p ) return q ; if ( ! q ) return p ; wei [ p ] += wei [ q ], xorv [ p ] ^= xorv [ q ]; tr [ p ][ 0 ] = merge ( tr [ p ][ 0 ], tr [ q ][ 0 ]); tr [ p ][ 1 ] = merge ( tr [ p ][ 1 ], tr [ q ][ 1 ]); return p ; } \u53c2\u8003\u8d44\u6599\uff1a \u5b57\u5178\u6811 (Trie) - OI Wiki (oi-wiki.org)","title":"Trie"},{"location":"algor/string/trie/#_1","text":"\u53c8\u53eb\u505a\u5b57\u5178\u6811\uff0c\u601d\u60f3\u662f\u628a\u5b57\u7b26\u4e32\u62c6\u5206\u6210\u4e00\u4e2a\u4e00\u4e2a\u5b57\u7b26\uff0c\u7136\u540e\u5c06\u5b57\u7b26\u653e\u5230\u6811\u7684\u201c\u8fb9\u201d\u4e0a\uff08 \u5b57\u7b26\u6307\u9488 \uff09\uff0c\u5229\u7528\u8282\u70b9\u50a8\u5b58\u5b57\u7b26\u4e32\u7ed3\u675f\u7b49\u4fe1\u606f\u3002 \u666e\u901a Trie \u4e00\u822c\u7528\u4e8e\u68c0\u7d22\u5b57\u7b26\u4e32\u662f\u5426\u5b58\u5728\uff0c\u6216\u8005\u4f5c\u4e3a AC \u81ea\u52a8\u673a\u7684\u4e00\u90e8\u5206\uff0c\u7528\u4e8e\u591a\u6a21\u5f0f\u5339\u914d\u3002 \u53d8\u79cd\u7684 01Trie \u53ef\u4ee5\u5b9e\u73b0\u8bf8\u5982\u67e5\u8be2\u548c \\(x\\) \u5f02\u6216\u503c\u6700\u5927\u7684\u6570\uff0c\u7ef4\u62a4\u5f02\u6216\u548c\u7b49 \u4f4d\u8fd0\u7b97\u76f8\u5173\u64cd\u4f5c \uff0c\u5c24\u5176\u662f\u5f02\u6216\u3002 \u7ed3\u6784\u4e00\u822c\u957f\u8fd9\u6837\uff1a","title":"\u6982\u8ff0"},{"location":"algor/string/trie/#trie","text":"Trie \u652f\u6301\u4e24\u79cd\u64cd\u4f5c\uff0c\u63d2\u5165\u548c\u67e5\u8be2\u3002 \u9996\u5148\u660e\u786e Trie \u7684\u7ed3\u6784\u5230\u5e95\u662f\u600e\u4e48\u6837\u7684\uff0cTrie \u5c06\u5b57\u7b26\u50a8\u5b58\u4e8e\u6811\u7684\u8fb9\u4e0a\uff0c\u5e76\u5728\u8282\u70b9\u4e0a\u6709\u4e00\u4e2a \\(end\\) \u6807\u8bb0\uff0c\u8868\u793a\u5f53\u524d\u8282\u70b9\u662f\u5426\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\u3002 \u5b9e\u73b0\u65f6\u5229\u7528\u4e00\u4e2a\u6570\u7ec4 \\(tr[x,ch]\\) \uff0c\u8868\u793a\u8282\u70b9 \\(x\\) \u7684 \\(ch\\) \u5b57\u7b26\u6307\u9488\u6307\u5411\u7684\u8282\u70b9\u7f16\u53f7\u3002 \u7c7b\u6bd4\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7684\u601d\u60f3\uff0cTrie \u53ea\u4f1a\u5728\u4e00\u4e2a\u8282\u70b9\u88ab\u5efa\u7acb\u65f6\u7ed9\u4e88\u4e00\u4e2a\u7f16\u53f7\u3002 \u521d\u59cb\u7684\u65f6\u5019 Trie \u53ea\u6709\u4e00\u4e2a\u8282\u70b9 \\(root\\) \uff0c\u5e76\u4e14\u6240\u6709\u7684 \\(tr\\) \u90fd\u6307\u5411 \\(\\text{NULL}\\) \uff08\u7a7a\uff09\u3002","title":"Trie"},{"location":"algor/string/trie/#_2","text":"\u5c06\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32 \\(s\\) \u63d2\u5165\u5230 Trie \u5f53\u4e2d\u3002 \u521d\u59cb\u65f6\u4ee4\u4e00\u4e2a\u6307\u9488 \\(p = root\\) \uff0c\u7136\u540e\u4ece\u6700\u4f4e\u4f4d\u5f00\u59cb\u626b\u63cf\u5b57\u7b26\u4e32 \\(s\\) \u3002 \u5982\u679c\u5f53\u524d\u626b\u63cf\u5230\u7684\u5b57\u7b26\u4e3a \\(s_i\\) \uff0c\u4ee4 \\(p = tr[p,s_i]\\) \u3002 \u5982\u679c \\(tr[p,s_i]\\) \u4e0d\u5b58\u5728\uff0c\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9 \\(q\\) \uff0c\u4ee4 \\(tr[p, s_i] = q\\) \uff0c\u7136\u540e\u628a \\(p\\) \u8df3\u5230 \\(q\\) \u3002 \u53cd\u4e4b\u76f4\u63a5\u628a \\(p\\) \u8df3\u8fc7\u53bb\u5373\u53ef\u3002 \u7136\u540e\u4ee4 \\(i = i + 1\\) \uff0c\u626b\u63cf\u4e0b\u4e00\u4e2a\u5b57\u7b26\u3002 \u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u76f4\u5230 \\(s\\) \u88ab\u626b\u63cf\u5b8c\u6bd5\uff0c\u5728\u5f53\u524d\u7684\u8282\u70b9 \\(p\\) \u4e0a\u6253\u4e0a\u4e00\u4e2a\u6807\u8bb0 \\(end[p] = \\text{true}\\) \u3002 \u653e\u4e00\u5f20\u65e9\u5e74\u505a\u7684\u6bd4\u8f83\u7cd9\u7684 GIF\uff1a","title":"\u63d2\u5165\u5b57\u7b26\u4e32"},{"location":"algor/string/trie/#_3","text":"\u67e5\u8be2\u4e00\u4e2a\u5b57\u7b26\u4e32 \\(s\\) \u662f\u5426\u5b58\u5728\u4e8e Trie \u5f53\u4e2d\u3002 \u7c7b\u4f3c Insert \u64cd\u4f5c\uff0c\u8bbe\u4e00\u4e2a\u6307\u9488 \\(p = root\\) \uff0c\u7136\u540e\u626b\u63cf \\(s_i\\) \u3002 \u4e0d\u65ad\u8df3 \\(p = tr[p, s_i]\\) \uff0c\u5982\u679c\u8fd8\u6ca1\u6709\u626b\u5b8c \\(s\\) \uff0c\u5c31\u5df2\u7ecf\u51fa\u73b0\u4e86 \\(tr[p,s_i]\\) \u6307\u5411 \\(\\text{NULL}\\) \u7684\u60c5\u51b5\uff0c\u5219\u8fd4\u56de \\(\\text{false}\\) \u3002 \u5982\u679c\u5df2\u7ecf\u626b\u63cf\u5b8c\u4e86 \\(s\\) \uff0c\u4e14 \\(end[p] = \\text{true}\\) \uff0c\u8fd4\u56de \\(\\text{true}\\) \u3002 \u53cd\u4e4b\u8fd4\u56de \\(\\text{false}\\) \u3002","title":"\u8be2\u95ee"},{"location":"algor/string/trie/#_4","text":"\u666e\u901a Trie \u6811 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 // \u5b9a\u4e49 NULL \u4e3a 0\uff0c\u5b57\u7b26\u96c6\u4e3a a~z\u3002 int tr [ si ][ 27 ]; bool exist [ si ]; int tot , root ; void init () { memset ( tr , 0 , sizeof tr ); memset ( exist , false , sizeof exist ); tot = 0 , root = ++ tot ; } void insert ( string s ) { int p = root ; for ( int i = 0 ; i < ( int ) s . size (); ++ i ) { int ch = ( int ) ( s [ i ] - 'a' ) + 1 ; if ( ! tr [ p ][ ch ]) tr [ p ][ ch ] = ++ tot ; p = tr [ p ][ ch ]; } exist [ p ] = true ; } bool query ( string s ) { int p = root ; for ( int i = 0 ; i < ( int ) s . size (); ++ i ) { int ch = ( int ) ( s [ i ] - 'a' ) + 1 ; if ( ! tr [ p ][ ch ]) return false ; p = tr [ p ][ ch ]; } return exist [ p ]; }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"algor/string/trie/#_5","text":"\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u662f\u4ed6\u4eec\u7684\u5c3e\u6807\u8bb0\u6240\u5728\u7684\u4e24\u4e2a\u8282\u70b9\u7684 lca \u5230\u6839\u7684\u8def\u5f84\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u3002 \u6211\u8ba4\u4e3a LCP \u4e5f\u53ef\u4ee5\u8fd9\u4e48\u66b4\u529b\u6c42\u3002 \u53ef\u4ee5\u628a\u5c3e\u6807\u8bb0\u6539\u6210 int \uff0c\u53ef\u4ee5\u7528\u6765\u7edf\u8ba1\u8bcd\u9891\u3002 \u4e5f\u53ef\u4ee5\u65b9\u4fbf\u7684\u7edf\u8ba1\u67d0\u4e2a\u524d\u7f00\u5728\u6240\u6709\u4e32\u5f53\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\uff08\u7ed3\u5408 2\uff09\u3002 \u662f AC \u81ea\u52a8\u673a\u7684\u4e00\u90e8\u5206\u3002","title":"\u4e00\u4e9b\u6027\u8d28"},{"location":"algor/string/trie/#01trie","text":"\u7c7b\u4f3c\u4e8e\u666e\u901a\u7684 Trie\uff0c\u53ea\u4e0d\u8fc7\u5c06\u5b57\u7b26\u96c6\u53d8\u4e3a\u4e86 \\(\\{0,1\\}\\) \u4ee5\u7ef4\u62a4\u4e00\u4e9b\u4e8c\u8fdb\u5236\u76f8\u5173\u7684\u4fe1\u606f\u3002","title":"01Trie"},{"location":"algor/string/trie/#x","text":"","title":"\u6c42\u4e0e x \u5f02\u6216\u7684\u6700\u503c"},{"location":"algor/string/trie/#_6","text":"\u5c06\u6240\u6709\u6570\u4e8c\u8fdb\u5236\u62c6\u5206\uff0c\u5305\u62ec \\(x\\) \u3002 \u7136\u540e\u628a\u8fd9\u4e9b\u4e8c\u8fdb\u5236\u6570 \u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d \u63d2\u5165\u8fdb Trie\u3002 \u7136\u540e\u4ece\u9ad8\u5230\u4f4e\u626b\u63cf \\(x\\) \u4e8c\u8fdb\u5236\u4e0b\u7684\u6bcf\u4e00\u4f4d\uff0c\u540c\u65f6\u7ef4\u62a4\u4e00\u4e2a\u6307\u9488 \\(p\\) \u5f80\u4e0b\u8df3\u3002 \u5047\u8bbe \\(x\\) \u5f53\u524d\u7684\u8fd9\u4e00\u4f4d\u4e3a \\(k\\) \uff0c\u90a3\u4e48\u60f3\u8981\u8ba9\u5f02\u6216\u548c\u66f4\u5927\uff0c\u5c31\u662f\u8ba9\u8d8a\u9ad8\u7684\u4f4d\u5c3d\u53ef\u80fd\u7684\u4e3a \\(1\\) \u3002 \u6240\u4ee5\u6211\u4eec\u9700\u8981\u5c3d\u91cf\u5f80 \\(k \\operatorname{xor} 1\\) \uff08\u76f8\u53cd\u7684\uff09\u7684\u6307\u9488\u8d70\uff0c\u5982\u679c\u5f53\u524d\u8282\u70b9\u6ca1\u6709 \\(k \\operatorname{xor} 1\\) \u8fd9\u4e2a\u6307\u9488\uff0c\u90a3\u4e48\u5c31\u53ea\u597d\u8d70 \\(k\\) \u8fd9\u4e2a\u6307\u9488\u3002 \u8df3\u5230\u53f6\u5b50\u8282\u70b9\u4e4b\u540e\uff0c\u4ece \\(p\\) \u5230 \\(root\\) \u7684\u8def\u5f84\u7ec4\u6210\u7684\u6570\u5c31\u662f\u6240\u6c42\u7684\uff0c\u548c \\(x\\) \u5f02\u6216\u8d77\u6765\u7684\u503c\u6700\u5927\u7684\u6570\uff0c \u5728\u63d2\u5165\u6bcf\u4e2a\u6570\u4e4b\u540e\uff0c\u5728\u5bf9\u5e94\u7ed3\u675f\u7684\u8282\u70b9\u6253\u4e00\u4e2a\u6807\u8bb0\uff0c\u8bb0\u5f55\u4ece\u8fd9\u4e2a\u8282\u70b9\u5230\u6839\u7684\u8def\u5f84\u7ec4\u6210\u7684\u6570\u662f\u591a\u5c11\u5373\u53ef\u3002 \u5f02\u6216\u8d77\u6765\u6700\u5c0f\u540c\u7406\u3002","title":"\u8be2\u95ee\u6700\u503c"},{"location":"algor/string/trie/#_7","text":"01Trie 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 using i64 = long long ; const int si = 1e5 + 10 ; const int k = 32 ; int tr [ k * si ][ 2 ]; i64 value [ k * si ]; int tot = 0 , root = ++ tot ; int newnode () { tr [ ++ tot ][ 0 ] = tr [ tot ][ 1 ] = value [ tot ] = 0 ; return tot ; } int cacid ( int num , int pos ) { return ( num >> pos ) & 1 ; } void insert ( int num ) { int p = root ; for ( int i = 32 ; i >= 0 ; -- i ) { int ch = cacid ( num , i ); if ( ! tr [ p ][ ch ]) tr [ p ][ ch ] = newnode (); p = tr [ p ][ ch ]; } value [ p ] = num ; } // \u67e5\u8be2\u5f02\u6216 x \u6700\u5927\u7684\u4e00\u4e2a\u3002 i64 query ( i64 num ) { int p = root ; for ( int i = 32 ; i >= 0 ; -- i ) { int ch = cacid ( num , i ); if ( tr [ p ][ ch ^ 1 ]) p = tr [ p ][ ch ^ 1 ]; else p = tr [ p ][ ch ]; } return value [ p ]; }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"algor/string/trie/#_8","text":"01 Trie \u53ef\u4ee5\u7528\u6765\u7ef4\u62a4\u4e00\u4e9b\u6570\u7684\u5f02\u6216\u548c\uff0c\u652f\u6301\u63d2\u5165\uff0c\u5220\u9664\uff0c\u8fd8\u6709\u5168\u5c40\u52a0\u4e00\u64cd\u4f5c\u3002 \u6211\u51fa\u7684\u4e00\u9053\u9898\u91cc\u9762\u6709\u7528\u5230\u4e00\u4e2a Trick\uff1a\u5f02\u6216\u548c\u7684\u4e8c\u8fdb\u5236\u4e0b\u67d0\u4e00\u4f4d\u7684\u503c\uff0c\u53d6\u51b3\u4e8e\u6240\u6709\u6570\u7684\u8fd9\u4e00\u4f4d\u7684 \\(1\\) \u7684\u4e2a\u6570\u7684 \u5947\u5076\u6027 \u3002 \u4e5f\u5c31\u662f\uff0c\u5f02\u6216\u548c \\(xorv\\) \u7684\u7b2c \\(k\\) \u4f4d\u662f \\(1\\) \uff0c\u5f53\u4e14\u4ec5\u5f53\u6240\u6709\u6570\u5f53\u4e2d\u6709 \u5947\u6570\u4e2a \u6570\u7684\u7b2c \\(k\\) \u4e3a\u662f \\(1\\) \u3002 \u90a3\u4e48\u5229\u7528\u5b83\u6765\u8003\u8651\u7ef4\u62a4\u5168\u5c40\u5f02\u6216\u548c\u3002 \u4e0d\u8fc7\u7ef4\u62a4\u5f02\u6216\u548c\u7684\u65f6\u5019\u548c\u4e00\u822c\u7684 01Trie \u4e0d\u4e00\u6837\uff0c\u6b64\u65f6\u7684 01Trie \u5e94\u5f53\u662f \u4ece\u4f4e\u4f4d\u5230\u9ad8\u4f4d\u63d2\u5165 \u7684\uff0c\u4ee5\u65b9\u4fbf\u5168\u5c40\u52a0\u4e00\u64cd\u4f5c\u7684\u5904\u7406\u3002","title":"\u7ef4\u62a4\u5f02\u6216\u548c"},{"location":"algor/string/trie/#_9","text":"\u7528\u7c7b\u4f3c\u7ebf\u6bb5\u6811\u7684\u601d\u60f3\uff0c\u6211\u4eec\u81ea\u5e95\u5411\u4e0a\u6536\u96c6\u4fe1\u606f\u3002 \u8bbe \\(xorv_i\\) \u8868\u793a\u8282\u70b9 \\(i\\) \u7684\u5b50\u6811\u6240\u7ef4\u62a4\u7684\u5f02\u6216\u548c\u3002 \u8bbe \\(wei_i\\) \u6307\u8282\u70b9 \\(i\\) \u5230\u5176\u7236\u4eb2\u8282\u70b9\u8fd9\u6761\u8fb9\u4e0a\u6570\u503c\u7684\u6570\u91cf\uff08\u6743\u503c\uff09\uff0c\u4e5f\u5c31\u662f\u8fd9\u6761\u8fb9 \u88ab\u6240\u6709\u63d2\u5165\u7684\u6570 \u62c6\u6210\u4e8c\u8fdb\u5236\u4e4b\u540e \u5728\u6811\u4e0a\u4ee3\u8868\u7684\u8def\u5f84 \u8986\u76d6\u7684\u6b21\u6570\u3002 \u4e0d\u8fc7\u6211\u4eec\u5b9e\u9645\u4e0a \u4e0d\u9700\u8981\u77e5\u9053\u5177\u4f53 \u7ef4\u62a4\u4e86\u54ea\u4e9b\u6570\uff0c\u7ef4\u62a4\u4e86\u591a\u5c11\u4e2a\uff0c \u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053 \\(wei\\) \u7684 \u5947\u5076\u6027 \u5c31\u884c\u4e86\u3002 \u90a3\u4e48\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u975e\u53f6\u5b50\u8282\u70b9 \\(p\\) \uff0c\u53ef\u4ee5\u6709\u4ee5\u4e0b\u7684\u8fc7\u7a0b\uff1a \u9996\u5148\uff0c\u4ee4 \\(wei_p = wei_{tr[p][0]} + wei_{tr[p][1]}\\) \u3002 \u5982\u679c \\(p\\) \u7684 \\(0\\) \u6307\u9488\u6307\u5411\u7684\u8282\u70b9\u4e0d\u4e3a \\(\\text{NULL}\\) \uff0c\u90a3\u4e48\u8ba9 \\(xorv_p = xorv_p \\operatorname{xor} (xorv_{tr[p][0]}<<1)\\) \uff0c\u4e5f\u5c31\u662f \u5148\u5bf9\u9f50 \u6bcf\u4e00\u4f4d\uff0c\u7136\u540e\u5f02\u6216\u8d77\u6765\u3002 \u5982\u679c \\(p\\) \u7684 \\(1\\) \u6307\u9488\u6307\u5411\u7684\u8282\u70b9\u4e0d\u4e3a \\(\\text{NULL}\\) \uff0c\u90a3\u4e48\u8ba9 \\(xorv_p = xorv_p \\operatorname{xor} ((xorv_{tr[p][1]} << 1) \\operatorname{or} (wei_{tr[p][1]} \\operatorname{and} 1))\\) \u3002 \u4e5f\u5c31\u662f\u5148\u5bf9\u9f50\u6bcf\u4e00\u4f4d\uff0c\u7136\u540e\u770b\u5947\u5076\u6027\u3002","title":"\u4fe1\u606f\u4e0a\u4f20"},{"location":"algor/string/trie/#_10","text":"\u63d2\u5165\u76f4\u63a5\u9012\u5f52\uff0c\u5982\u679c\u9047\u5230\u7a7a\u8282\u70b9\uff0c\u90a3\u4e48\u65b0\u5efa\u5373\u53ef\u3002 \u4e3a\u4e86\u4e4b\u540e\u5168\u5c40\u52a0\u4e00 \u8fdb\u4f4d \u65b9\u4fbf\uff0c\u6211\u4eec\u5f3a\u5236\u8ba9\u6bcf\u4e00\u4e2a\u6570\u90fd\u53d8\u6210 MaxDepth \u4f4d\uff0c\u518d\u63d2\u5165\u8fdb Trie \u5f53\u4e2d\u3002 MaxDepth \u662f\u4f60\u9009\u62e9\u7684 Trie \u6811\u7684\u6700\u5927\u6df1\u5ea6\uff0c\u4e00\u822c\u6bd4\u8981\u63d2\u5165\u7684\u6570\u7684\u6700\u9ad8\u4f4d\u6570\u591a\u51fa\u4e24\u4e09\u4f4d\u3002 \u5f53\u6df1\u5ea6\u5230\u8fbe MaxDepth \u4e4b\u540e\uff0c\u4ee4 \\(wei_p + 1\\) \uff0c\u7136\u540e\u4e0d\u65ad\u5411\u4e0a\u4f20\u9012\u4fe1\u606f\u5373\u53ef\u3002 \u8fd9\u6837\u5b50\u5c31\u80fd\u4fdd\u8bc1\uff0c\u6bcf\u63d2\u5165\u4e00\u4e2a\u6570 \\(x\\) \uff0c \\(x\\) \u7684\u4e8c\u8fdb\u5236\u8868\u793a \u5728 Trie \u6811\u4e0a\u4ee3\u8868\u7684\u8def\u5f84 \u4e0a\u7684\u6240\u6709\u8282\u70b9\u7684 \\(wei\\) \u90fd\u4f1a \\(+1\\) \u3002 \u5220\u9664\u64cd\u4f5c\u4e5f\u662f\u7c7b\u4f3c\u7684\uff0c\u53ea\u4e0d\u8fc7\u53d8\u6210\u4e86\u8ba9\u6700\u540e\u4e00\u4f4d\uff08\u6700\u9ad8\u4f4d\uff09\u6240\u5bf9\u5e94\u7684\u8282\u70b9\u7684 \\(wei -1\\) \uff0c\u518d\u5411\u4e0a\u6536\u96c6\u4fe1\u606f\u3002","title":"\u63d2\u5165 / \u5220\u9664"},{"location":"algor/string/trie/#_11","text":"\u601d\u8003\u4e00\u4e0b\uff0c\u5728\u4e8c\u8fdb\u5236\u4e0b\u7684\u52a0\u4e00\u64cd\u4f5c\u5b9e\u8d28\u4e0a\u662f\u4ec0\u4e48\uff1f \\[(10011)_2 + 1 = (10100)_2 \\\\ (10110)_2 + 1 = (10111)_2\\] \u5b9e\u9645\u4e0a\u5c31\u662f\uff1a\u4ece\u6700\u4f4e\u4f4d\u5f00\u59cb\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a \\(0\\) \uff0c\u5c06\u5176\u53d6\u53cd\uff0c\u7136\u540e\u5c06\u5b83\u540e\u9762\uff08\u5230\u6700\u4f4e\u4f4d\uff09\u7684\u6240\u6709 \\(1\\) \u53d8\u6210 \\(0\\) \u3002 \u5bf9\u5e94\u5230 01Trie \u4e0a\uff0c\u5c31\u662f\u4ece \\(root\\) \u5f00\u59cb\u9012\u5f52\u4e0b\u53bb\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u975e\u7a7a\u7684 \\(tr[p][0]\\) \u6307\u9488\uff0c\u7136\u540e\u4ea4\u6362 \\(tr[p][0],tr[p][1]\\) \uff08\u53d6\u53cd\uff09\u3002 \u6cbf\u7740 \u4ea4\u6362\u4e4b\u540e \u7684 \\(tr[p][0]\\) \u9012\u5f52\u4e0b\u53bb\u64cd\u4f5c\u5373\u53ef\u3002","title":"\u5168\u5c40\u52a0\u4e00"},{"location":"algor/string/trie/#_12","text":"\u7ef4\u62a4\u5f02\u6216\u548c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 #include <bits/stdc++.h> using namespace std ; const int si = 1e4 + 10 ; const int MaxDepth = 21 ; int tr [ si * ( MaxDepth + 1 )][ 2 ]; int wei [ si * ( MaxDepth + 1 )], xorv [ si * ( MaxDepth + 1 )]; int tot = 0 , root = ++ tot ; // \u5176\u5b9e\u8fd9\u91cc root \u53ef\u4ee5\u4e0d\u7528\u8d4b\u503c\uff0c\u9012\u5f52\u5f00\u70b9\u7684\u65f6\u5019\u4f1a\u81ea\u52a8\u7ed9\u7f16\u53f7\u7684\u3002 int newnode () { tr [ ++ tot ][ 0 ] = tr [ tot ][ 1 ] = wei [ tot ] = xorv [ tot ] = 0 ; return tot ; } void maintain ( int p ) { wei [ p ] = xorv [ p ] = 0 ; // \u4e3a\u4e86\u5e94\u5bf9\u4e0d\u65ad\u7684\u5220\u9664\u548c\u63d2\u5165\uff0c\u6bcf\u6b21\u7ef4\u62a4 p \u7684\u65f6\u5019\u90fd\u4ee4 wei, xorv = 0\u3002 // \u4e5f\u5c31\u662f\u6bcf\u6b21\u90fd**\u91cd\u65b0\u6536\u96c6\u4e00\u6b21\u4fe1\u606f**\uff0c\u800c\u4e0d\u662f\u4ece\u539f\u6765\u7684\u57fa\u7840\u4e0a\u4fee\u6539\u3002 if ( tr [ p ][ 0 ]) { wei [ p ] += wei [ tr [ p ][ 0 ]]; xorv [ p ] ^= ( xorv [ tr [ p ][ 0 ]] << 1 ); // \u56e0\u4e3a\u513f\u5b50\u6240\u7ef4\u62a4\u7684\u5f02\u6216\u548c\u5b9e\u9645\u4e0a\u6bd4 p \u5c11\u4e00\u4f4d\uff0c // \u5982\u679c\u8981\u6309\u4f4d\u5f02\u6216\u5c31\u8981\u8ba9\u513f\u5b50\u7684\u5f02\u6216\u548c\u5de6\u79fb\u4e00\u4f4d\uff0c\u548c p \u5bf9\u9f50\u3002 } if ( tr [ p ][ 1 ]) { wei [ p ] += wei [ tr [ p ][ 1 ]]; xorv [ p ] ^= ( xorv [ tr [ p ][ 1 ]] << 1 ) | ( wei [ tr [ p ][ 1 ]] & 1 ); // \u5229\u7528\u5947\u5076\u6027\u8ba1\u7b97\u3002 } wei [ p ] = wei [ p ] & 1 ; // \u6bcf\u63d2\u5165\u4e00\u6b21\u6216\u8005\u5220\u9664\u4e00\u6b21\uff0c\u5947\u5076\u6027\u90fd\u4f1a\u53d8\u5316\u3002 } // \u7c7b\u4f3c\u7ebf\u6bb5\u6811\u7684 pushup\uff0c\u4ece\u5e95\u5411\u4e0a\u6536\u96c6\u4fe1\u606f\u3002 // \u6362\u79cd\u8bf4\u6cd5\uff0c\u662f\u66f4\u65b0\u8282\u70b9 p \u7684\u4fe1\u606f\u3002 void insert ( int & p , int x , int depth ) { if ( ! p ) p = newnode (); if ( depth > MaxDepth ) { wei [ p ] += 1 ; return ; } insert ( tr [ p ][ x & 1 ], x >> 1 , depth + 1 ); // \u4ece\u4f4e\u5230\u9ad8\u4f4d\u63d2\u5165\uff0c\u6240\u4ee5\u662f x >> 1\u3002 maintain ( p ); } // \u63d2\u5165\u5143\u7d20 x\u3002 void remove ( int p , int x , int depth ) { // \u4e0d\u77e5\u9053\u662f\u4e0d\u662f\u5e94\u8be5\u5199 > MaxDepth - 1 \u8fd8\u662f > MaxDepth \uff1f if ( depth == MaxDepth ) { wei [ p ] -= 1 ; return ; } remove ( tr [ p ][ x & 1 ], x >> 1 , depth + 1 ); maintain ( p ); } // \u5220\u9664\u5143\u7d20 x\uff0c\u4f46\u662f x \u4e0d\u80fd\u662f\u4e0d\u5b58\u5728\u7684\u5143\u7d20\u3002 // \u5426\u5219\u4f1a\u8bbf\u95ee\u7a7a\u8282\u70b9 0 \u7136\u540e\u7ee7\u7eed\u5f80\u4e0b\uff0c\u4f1a\u51fa\u9519\u3002 void addall ( int p ) { swap ( tr [ p ][ 0 ], tr [ p ][ 1 ]); if ( tr [ p ][ 0 ]) addall ( tr [ p ][ 0 ]); maintain ( p ); // \u4ea4\u6362\u540e\u4e0b\u9762\u90fd\u88ab\u66f4\u6539\u4e86\uff0c\u9700\u8981\u518d\u6b21 maintain\u3002 } // \u5168\u90e8\u52a0\u4e00 int main () { int n ; cin >> n ; std :: vector < int > v ( n + 1 ); for ( int i = 1 ; i <= n ; ++ i ) { cin >> v [ i ], insert ( root , v [ i ], 0 ); } cout << xorv [ root ] << endl ; // \u67e5\u8be2\u603b\u5f02\u6216\u548c int m ; cin >> m ; for ( int i = 1 ; i <= m ; ++ i ) { int x , y ; cin >> y >> x ; if ( y == 0 ) remove ( root , x , 0 ); // remove \u548c addall \u6df7\u7528\u65f6\u5c0f\u5fc3 remove \u6389\u4e0d\u5b58\u5728\u7684\u5143\u7d20\uff01 else addall ( root ); cout << xorv [ root ] << endl ; } }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"algor/string/trie/#01trie_1","text":"\u5408\u5e76\u4e24\u9897 01Trie\u3002 \u548c\u7ebf\u6bb5\u6811\u5408\u5e76\u662f\u6bd4\u8f83\u7c7b\u4f3c\u7684\uff0c\u7528\u540c\u6837\u7684\u601d\u60f3\u601d\u8003\u5373\u53ef\u3002 \u5c31\u662f\u628a\u4e24\u4e2a\u8282\u70b9\u4e2d\u7684\u4e00\u4e2a\u7684\u4fe1\u606f\u5408\u5e76\u5230\u53e6\u5916\u4e00\u4e2a\u4e0a\uff0c\u5e76\u8fd4\u56de\u5408\u5e76\u4e4b\u540e\u7684\u7f16\u53f7\u3002 \uff08\u5f53\u7136\uff0c\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u6839\u636e\u60c5\u51b5\u628a\u4ed6\u4eec\u5408\u5e76\u5230\u4e00\u4e2a\u65b0\u7684\u8282\u70b9\u4e0a\uff09\u3002 \u5982\u679c\u6709\u4e00\u4e2a\u8282\u70b9\u4e3a\u7a7a\uff0c\u90a3\u4e48\u5c31\u8fd4\u56de\u53e6\u5916\u4e00\u4e2a\u8282\u70b9\u7684\u7f16\u53f7\u5373\u53ef\u3002 Merge 1 2 3 4 5 6 7 8 9 10 int merge ( int p , int q ) { if ( ! p ) return q ; if ( ! q ) return p ; wei [ p ] += wei [ q ], xorv [ p ] ^= xorv [ q ]; tr [ p ][ 0 ] = merge ( tr [ p ][ 0 ], tr [ q ][ 0 ]); tr [ p ][ 1 ] = merge ( tr [ p ][ 1 ], tr [ q ][ 1 ]); return p ; } \u53c2\u8003\u8d44\u6599\uff1a \u5b57\u5178\u6811 (Trie) - OI Wiki (oi-wiki.org)","title":"01Trie \u5408\u5e76"},{"location":"blog/","text":"\u8fd9\u91cc\u7528\u6765\u653e\u4e9b\u4e0d\u662f\u968f\u8bb0\u7684\u968f\u8bb0\uff0c\u7c7b\u4f3c\u6742\u8c08\u3002 \u76f8\u5f53\u4e8e\u662f\u5404\u79cd\u77e5\u8bc6\u7c7b\u968f\u7b14\uff0c\u53ef\u80fd\u662f whk \u4e5f\u53ef\u80fd\u662f OI\uff0c\u751a\u81f3\u53ef\u80fd\u662f\u6280\u672f\u3002 \u6211\u4e4b\u524d\u5199\u7684\u4e1c\u897f\u5176\u5b9e\u7c7b\u4f3c\u4e8e Documents\uff0c\u8fd9\u4e2a\u5730\u65b9\u624d\u7b97 blog\u3002 \u672c\u6765 mkdocs-material \u6709 blog \u529f\u80fd\uff0c\u4f46\u662f\u6211\u6ca1\u6709 insiders\uff0c\u4e8e\u662f\u5bc4\u4e86\u3002","title":"Index"},{"location":"blog/2023-01-25/","text":"\u524d\u51e0\u5929\u5c0f\u602a\u517d\u5728\u5c0f\u7fa4\u91cc\u9762\u95ee\u4e86\u4e00\u4e2a whk \u9898\uff0c\u611f\u89c9\u662f\u6bd4\u8f83\u6709\u610f\u601d\u7684\u3002 \u8fd9\u7c7b\u4e1c\u897f\u8bb0\u5f97\u4ee5\u524d\u4e5f\u8bb2\u8fc7\uff0c\u6240\u4ee5\u7b80\u5355\u8bb0\u5f55\u4e00\u4e0b\uff0c\u5176\u5b9e\u7406\u8bba\u4e0a\u5e94\u8be5\u8bb0\u5f55\u5230\u6211\u9519\u9898\u672c\u4e0a\uff0c\u4f46\u65e0\u6240\u8c13\u3002 Q1\uff1a\u6c42 \\(\\log_a(x)\\) \u548c \\(a^x\\) \u7684\u56fe\u50cf\u7684\u4ea4\u70b9\u3002 \u5148\u8bd5\u7740\u66b4\u529b\u8054\u7acb\u505a\u4e00\u4e0b\u770b\u770b\u6c42\u4e0d\u6c42\u5f97\u4e86\u96f6\u70b9\u3002 \\(\\log_a(x) = a^x\\) \uff0c\u5bc4\uff0c\u4e0d\u884c\u3002 \u7136\u540e\u60f3\u5230\u4e00\u4e2a\u4e8b\u60c5\u662f\uff0c\u8fd9\u4fe9\u73a9\u610f\u513f\u662f\u53cd\u51fd\u6570\uff0c\u5173\u4e8e \\(y = x\\) \u5bf9\u79f0\u3002 \u4e8e\u662f\u6211\u4eec\u5c1d\u8bd5\u76f4\u63a5\u6c42\u5b83\u4eec\u4efb\u610f\u4e00\u4e2a\u51fd\u6570\u548c \\(y = x\\) \u7684\u4ea4\u70b9\uff1f \\(a^x = x \\iff \\log_a(x) = x\\) \uff0c\u8c14\u8c14\uff0c\u597d\u50cf\u6ca1\u6551\uff0c\u8fd9\u73a9\u610f\u513f\u662f\u4e2a\u8d85\u8d8a\u65b9\u7a0b\uff0c\u6ca1\u6709\u4efb\u4f55\u51e0\u4f55/\u4ee3\u6570\u89e3\u6cd5\u3002 \u800c\u4e14\u8fd9\u4e2a\u505a\u6cd5\u5176\u5b9e\u4e5f\u662f\u6709\u95ee\u9898\u7684\uff0c\u6709\u4e00\u4e2a\u5f88\u597d\u73a9\u7684\u7279\u4f8b\uff0c\u5f53 \\(a = \\dfrac{1}{16}\\) \u7684\u65f6\u5019\uff0c\u5b83\u4eec\u7684\u4e00\u4e2a\u4ea4\u70b9 \\((1/2, 1/4)\\) \uff0c\u5e76\u4e0d\u5728 \\(y = x\\) \u4e0a\uff0c\u6240\u4ee5\u8fd9\u4e2a\u505a\u6cd5\u5176\u5b9e\u4e5f\u6bd4\u8f83\u5bc4\u3002 \u611f\u89c9\u8fd9\u4e2a\u95ee\u9898\u662f\u6bd4\u8f83 hard \u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5c1d\u8bd5\u8003\u8651\u4e00\u4e2a\u6bd4\u8f83 simple \u7684\u95ee\u9898\u3002 Q2\uff1a \\(f(x) = \\log_a(x)\\) \u548c \\(g(x) = a^x\\) \u6709\u591a\u5c11\u4e2a\u4ea4\u70b9\uff1f \u663e\u7136\u6211\u4eec\u8981\u8003\u8651\u5206\u7c7b\u8ba8\u8bba\u4e00\u4e0b\uff0c\u56e0\u4e3a\u5f62\u6001\u4e0d\u592a\u4e00\u6837\u3002 \u5148\u8003\u8651\u6bd4\u8f83\u7b80\u5355\u7684 \\(a > 1\\) \u7684\u60c5\u51b5\u3002 \u663e\u7136\u6b64\u65f6\u4e0d\u5b58\u5728\u4e0d\u5728 \\(y = x\\) \u4e0a\u7684\u4ea4\u70b9\u3002 \u597d\u50cf\u6ca1\u6709\u4ec0\u4e48\u76f4\u63a5\u7684\u8bc1\u660e\u65b9\u6cd5\uff0c\u4e8e\u662f\u53ef\u4ee5\u8003\u8651\u7528\u5df2\u77e5\u6761\u4ef6\u63a8\u51fa\u77db\u76fe\u6765\u53cd\u8bc1\u3002 \u8bbe\u6709\u4e00\u4e2a\u4ea4\u70b9 \\((m, n), m \\not = n\\) \uff0c\u56e0\u4e3a \\(f,g\\) \u5173\u4e8e \\(y = x\\) \u5bf9\u79f0\uff0c\u6240\u4ee5\u5b9a\u6709\u53e6\u4e00\u4e2a\u4ea4\u70b9 \\((n, m)\\) \uff0c\u4e0d\u59a8\u8bbe \\(n > m\\) \u3002 \u56e0\u4e3a \\(a^n = m, a^m = n\\) \uff0c\u53c8\u56e0\u4e3a \\(a > 1\\) \uff0c\u6240\u4ee5 \\(g\\) \u5728 \\(\\mathbb{R}\\) \u4e0a\u5355\u589e\uff0c\u56e0\u4e3a \\(m < n \\iff a^n < a^m \\iff n < m\\) \uff0c\u77db\u76fe\u3002 \u6240\u4ee5\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u4ea4\u70b9\u3002 \u6240\u4ee5\u6b64\u65f6\u95ee\u9898\u8f6c\u5316\u4e3a\u8003\u8651 \\(f/g(x)\\) \u548c \\(y = x\\) \u7684\u4ea4\u70b9\u7684\u95ee\u9898\u3002 \u4ee4 \\(h(x) = g(x) - y = a^x - x\\) \u3002 \u539f\u95ee\u9898\u7b49\u4ef7\u4e8e \\(h(x)\\) \u5728 \\(R\\) \u4e0a\u7684\u96f6\u70b9\u4e2a\u6570\u3002 \u7136\u540e\u5f88\u663e\u7136\u5c31\u8981\u770b\u5355\u8c03\u6027\u4e86\u3002 \\(h^\\prime(x) = a^x \\ln a - 1\\) \uff0c\u4ee4 \\(h^\\prime(x) = 0 \\iff a^x\\ln a= 1 \\iff a^x = \\dfrac{1}{\\ln a} \\iff x = -\\log_a(\\ln a)\\) \u3002 \u4ee4 \\(h^\\prime(x) > 0 \\iff x > -\\log_a(\\ln a)\\) \uff0c\u4ee4 \\(h^\\prime(x) < 0 \\iff 0 < x < -\\log_a(\\ln a)\\) \u3002 \u6240\u4ee5 \\(h(x)_{\\min} = h(-\\log_a(\\ln a)) = a^{-\\log_a(\\ln a)} + \\log_a(\\ln a)\\) \u3002 \u6781\u7aef\u60c5\u51b5\u663e\u7136\u662f\u6781\u503c\u70b9\u4e3a\u96f6\u70b9\uff0c\u6240\u4ee5\uff1a \u4ee4 \\(a^{-\\log_a(\\ln a)} + \\log_a(\\ln a) = 0 \\iff (\\ln a)^{-1} + \\log_a(\\ln a) = 0 \\iff \\dfrac{1}{\\ln a} + \\dfrac{\\ln(\\ln a)}{\\ln a} = 0 \\iff \\ln(\\ln a) = -1 \\iff \\ln a = \\dfrac{1}{e} \\iff a = e^{\\frac{1}{e}}\\) \u7136\u540e\u4e0a\u4e0b\u5e73\u79fb\u53ef\u4ee5\u5f97\u5230\uff1a \u5f53 \\(a = e^{\\frac{1}{e}}\\) \u65f6\uff0c \\(h(x)\\) \u6709\u4e00\u4e2a\u96f6\u70b9\uff0c\u5f53 \\(1 < a < e^{\\frac{1}{e}}\\) \u65f6\uff0c \\(h(x)\\) \u65e0\u96f6\u70b9\uff0c\u5f53 \\(a > e^{\\frac{1}{e}}\\) \u65f6\uff0c \\(h(x)\\) \u6709\u4e24\u4e2a\u96f6\u70b9\u3002 \u7136\u540e\u8003\u8651 \\(0 < a < 1\\) \u7684\u60c5\u51b5\u3002 \u663e\u7136\u6b64\u65f6\u4e00\u5b9a\u6709\u4e00\u4e2a\u4ea4\u70b9\u5728 \\(y = x\\) \u4e0a\u3002 \u6240\u4ee5\u6211\u4eec\u53ea\u8003\u8651 \\((n, m), (m, n)\\) \u5f62\u5f0f\u7684\u4ea4\u70b9\u3002 \u4e8e\u662f\u95ee\u9898\u8f6c\u5316\u4e3a\uff0c\u662f\u5426\u5b58\u5728 \\(m, n\\) \uff0c\u4f7f\u5f97 \\(g(m) = n, g(n) = m, a \\in (0, 1)\\) \u3002 \u601d\u8003\u4e00\u4e0b\u5df2\u77e5\u6761\u4ef6\u6709\u4ec0\u4e48\uff0c\u4f3c\u4e4e\u4e0d\u592a\u597d\u641e\u3002 \u4e0d\u8fc7\u8fd9\u91cc\u672c\u8d28\u4e0a\u662f\u6c42\u5b83\u4eec\u5b58\u5728\u7684\u5145\u8981\u6761\u4ef6\uff0c\u4e8e\u662f\u6211\u4eec\u5148\u5c1d\u8bd5\u8bc1\u660e\u4e00\u4e0b\u5b83\u4eec\u5b58\u5728\u7684\u5145\u5206\u6027\u3002 \u5047\u8bbe \\(\\exists m, n, g(m) = n, g(n) = m\\) \u3002 \u4e0d\u59a8\u8bbe \\(m < n \\iff g(n) < g(m)\\) \uff0c\u8fd9\u4e2a\u663e\u7136\u4e0d\u77db\u76fe\u3002 \u7136\u540e\u56e0\u4e3a \\(\\ln n = m, \\ln m = n \\iff nm = m \\ln m = n \\ln n\\) \u3002 \u4ee4 \\(u(x) = x\\ln x\\) \uff0c\u6240\u4ee5\u6211\u4eec\u60f3\u8981\u77e5\u9053\u8fd9\u4e1c\u897f\u7684\u5355\u8c03\u6027\u3002 \\(u^\\prime(x) = \\ln x + 1\\) \uff0c\u4ee4 \\(u^\\prime(x) = 0 \\iff x = \\dfrac{1}{e}\\) \u3002 \u6240\u4ee5 \\(u\\) \u5728 \\((0, \\dfrac{1}{e})\\) \u4e0a\u5355\u8c03\u9012\u51cf\uff08\u7701\u7565\u4e86\u6b65\u9aa4\uff09\uff0c\u5728 \\([\\dfrac{1}{e}, +\\infty)\\) \u4e0a\u5355\u589e\u3002 \u6240\u4ee5 \\(0 < m < \\dfrac{1}{e} < n\\) \uff0c\u53c8\u56e0\u4e3a \\(a \\in (0, 1)\\) \uff0c\u6240\u4ee5 \\(m, n < 1 \\iff 0 < m < \\dfrac{1}{e} < n < 1\\) \u3002 \u7136\u540e\u5145\u5206\u6027\u5c31\u6709\u4e86\uff0c\u627e\u4e00\u4e0b\u5fc5\u8981\u6027\uff0c\u5c31\u53ea\u9700\u8981\u628a \\(a\\) \u5316\u6210 \\(n, m\\) \u5373\u53ef\u3002 \u56e0\u4e3a \\(a = m^{\\dfrac{1}{n}} \\iff a < (\\dfrac{1}{e})^{e}\\) \u3002 \u6240\u4ee5\u5f53 \\(0 < a < (\\dfrac{1}{e})^e\\) \u7684\u65f6\u5019\uff0c\u6709\u4e09\u4e2a\u4ea4\u70b9\u3002 \u8fd9\u4e2a\u8bf4\u660e\u4e86\u5b58\u5728\u8fd9\u4e24\u4e2a\u4ea4\u70b9\u7684\u5145\u8981\u6761\u4ef6\uff0c\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u63a8\u51fa\uff1a \\(a = (\\dfrac{1}{e})^e\\) \u7684\u65f6\u5019\uff0c\u4e24\u4ea4\u70b9\u91cd\u5408\u4e8e \\(y = x\\) \u4e0a\uff0c\u53ea\u6709\u4e00\u4e2a\u4ea4\u70b9\u3002 \\((\\dfrac{1}{e})^e < a < 1\\) \u65f6\uff0c\u53ea\u6709\u4e00\u4e2a\u4ea4\u70b9\u3002 Q2 \u7684\u5bfc\u6570\u90e8\u5206\u4e0d\u7b97\u592a\u96be\uff0c\u5c31\u662f\u9700\u8981\u7a0d\u5fae\u8010\u5fc3\u5316\u7b80\u4e00\u4e0b\u3002 \u7136\u540e\u8f6c\u5316\u90e8\u5206\u5c31\u8981\u60f3\u7740\u7528\u5df2\u77e5\u6c42\u672a\u77e5\uff0c\u8003\u8651\u5229\u7528\u5df2\u77e5\u6761\u4ef6\u3002 \u7136\u540e\u597d\u4e45\u90fd\u6ca1\u505a\u8fc7\u5bfc\u6570\u9898\u4e86\uff0c\u611f\u89c9\u8111\u5b50\u6709\u70b9\u6d46\u7cca\u3002 \u5c31\u8fd9\u4e2a\u9898\u7684\u65b9\u6cd5\u662f\u6c42\u96f6\u70b9\u4e2a\u6570\u53ef\u4ee5\u8003\u8651\u7528\u5bfc\u6570\u6c42\u51fa\u5355\u8c03\u6027\u7136\u540e\u8003\u8651\u6781\u7aef\u60c5\u51b5\u3002 \u7136\u540e\u6211\u53d1\u73b0\u6211\u4e00\u822c\u6c42\u5355\u8c03\u6027\u7684\u65b9\u6cd5\u662f\u4e0d\u4e25\u8c28\u7684\u3002 \u5e94\u8be5\u628a >0 <0 =0 \u5168\u90e8 explain \u4e00\u4e0b\u3002 \u7136\u540e\u8fd8\u6709\u4e00\u4e2a\u6ce8\u610f\u7684\u5c31\u662f\uff0c\u5f97\u5206\u6e05\u695a\u73b0\u5728\u5728\u5e72\u561b\uff0c\u8981\u6c42\u7684\u53c2\u6570\u662f\u5565\uff0c\u6211\u5e0c\u671b\u5f97\u5230\u4ec0\u4e48\uff0c\u624b\u5934\u7684\u53d8\u91cf\u662f\u5426\u5199\u5168\u4e86\u6570\u636e\u8303\u56f4\u3002","title":"\u6d45\u8c08\u6307\u5bf9\u51fd\u6570\u56fe\u50cf\u4ea4\u70b9\u76f8\u5173\u95ee\u9898"},{"location":"blog/2023-01-26/","text":"\u8fd9\u662f\u67d0\u5929\u505a\u6a21\u62df\u8d5b\u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u9047\u5230\u4e86\u6ca1\u89c1\u8fc7\u7684\u95ee\u9898\uff0c\u778e\u80e1\u7684\u7b97\u6cd5\u3002 \u4e25\u683c\u610f\u4e49\u4e0a\u6765\u8bf4\u597d\u50cf\u4e0d\u80fd\u7b97\u7b97\u6cd5\uff0c\u5e94\u8be5\u662f\u4e00\u79cd\u65b0\u7684\u505a\u6cd5\u3002 upd on 01.29.23: \u54c8\u54c8\uff0c\u5bc4\u5427\uff0c\u5047\u4e86\uff0c\u88ab\u65e5\u8bed\u9171\u63d2\u4e86\uff0c\u7ed9\u4e86\u4e00\u4e2a\u51f8\u591a\u8fb9\u5f62\u4e5f\u4f1a\u76f8\u4ea4\u7684\u4f8b\u5b50\u3002 \u6211\u60f3\u4e86\u4e00\u4e0b\uff0c\u5177\u4f53\u5c31\u662f\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e24\u6761\u76f8\u90bb\u8fb9\uff0c\u94a6\u5b9a\u659c\u7387\u7edd\u5bf9\u503c\u66f4\u5927\u7684\u4e00\u6761\u8fb9\uff0c\u7b97 \\(\\arctan |k|\\) \uff0c\u5982\u679c\u5927\u4e8e\u4e86\u4e24\u8fb9\u5939\u89d2\uff0c\u4e24\u6761\u8fb9\u7684\u77e9\u5f62\u5c31\u4f1a\u76f8\u4ea4\u3002 \u5bc4\u3002 \u4f17\u6240\u5468\u77e5\u8ba1\u7b97\u51e0\u4f55\u91cc\u6709\u4e00\u4e2a\u53eb\u505a\u201c\u5224\u65ad\u662f\u5426\u5728\u4efb\u610f\u591a\u8fb9\u5f62\u5185\u90e8\u201d\u7684\u95ee\u9898\u3002 \u8003\u8bd5\u7684\u65f6\u5019\u8bfb\u9519\u9898\u4ee5\u4e3a\u95ee\u9898\u5c31\u662f\u8fd9\u4e2a\u677f\u5b50\uff0c\u4f46\u662f\u4e0d\u4f1a\uff0c\u4e8e\u662f\u601d\u8003\u4e86\u5f88\u4e45\u6709\u4e86\u4e9b\u60f3\u6cd5\uff0c\u540e\u9762\u7ecf\u8fc7 EI \u7684\u63d0\u9192\u5b8c\u5584\u4e86\u4e00\u4e0b\u3002 \u8fd9\u4e2a\u95ee\u9898\u4e00\u822c\u6709\u4e24\u79cd\u901a\u7528\u7684\u89e3\u51b3\u65b9\u6cd5\uff1aRay casting algorithm \u548c Winding number algorithm\u3002 \u611f\u89c9\u5f88\u5389\u5bb3\uff0c\u6211\u4e0d\u592a\u6e05\u695a\u590d\u6742\u5ea6\uff0c\u4f46\u662f\u542c\u8bf4\u90fd\u8981\u626b\u4e00\u904d\uff1f\u597d\u50cf\u6709 \\(O(\\log n)\\) \u5355\u6b21\u8be2\u95ee\u7684\u505a\u6cd5\u3002 \u4f46\u662f\u6211\u5176\u5b9e\u4e0d\u592a\u4f1a\uff0c\u611f\u89c9\u4e5f\u7406\u89e3\u4e0d\u4e86\u90a3\u4e48\u9ad8\u6df1\u7684\u505a\u6cd5\uff0c\u60f3\u81ea\u5df1\u641e\u4e00\u4e2a\u505a\u6cd5\u51fa\u6765\uff0c\u7136\u540e\u5c31\u6709\u4e86\u8fd9\u73a9\u610f\u513f\uff1a \u5177\u4f53\u6765\u8bf4\u8fd9\u4e2a\u505a\u6cd5\u80fd\u591f\u5728 \\(O(n \\log n)\\) \u5e26\u4e00\u4e2a\u6211\u73b0\u5728\u8fd8\u4e0d\u77e5\u9053\u591a\u5927\u7684\u5e38\u6570\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\uff0c\u79bb\u7ebf\u5b8c\u6210\u4ee5\u4e0b\u95ee\u9898\u7684\u5224\u5b9a\uff1a \u7ed9\u5b9a\u4e00\u4e2a\u7531 \\(n\\) \u6761\u8fb9\u7ec4\u6210\u7684 Polygon\uff0c \\(m\\) \u4e2a Point\uff0c\u8981\u6c42 Check \u6bcf\u4e2a Point \u662f\u5426\u5728 Polygon \u5185\u3002 \\(1\\le n, m \\le 1e5\\) \uff08\u5373\u5047\u5b9a \\(n, m\\) \u540c\u7ea7\uff09\uff0c \u4fdd\u8bc1\u591a\u8fb9\u5f62\u4e3a\u51f8\u591a\u8fb9\u5f62 \u9996\u5148\u6709\u4e00\u4e2a\u76f4\u89c2\u7684\u60f3\u6cd5\uff0c\u591a\u8fb9\u5f62\u53ef\u80fd\u6709\u5f88\u591a\u659c\u7740\u7684\u8fb9\uff0c\u8fd9\u4e0d\u597d\u5224\u65ad\u3002 \u6211\u4eec\u60f3\u505a\u7684\u4e8b\u60c5\u5c31\u662f\uff0c\u80fd\u4e0d\u80fd\u8f6c\u5316\u6210\u53ea\u8003\u8651\u6c34\u5e73/\u7ad6\u76f4\u65b9\u5411\u7684\u60c5\u51b5\u5462\uff1f \u4e8e\u662f\u60f3\u5230\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8fb9\uff0c\u6211\u4eec\u753b\u4e00\u4e2a\u4ee5\u5b83\u4e3a\u5bf9\u89d2\u7ebf\u7684\u77e9\u5f62\uff1a \u7c7b\u4f3c\u8fd9\u6837\uff1a \u7136\u540e\u4e2d\u95f4\u8fd9\u4e00\u5927\u5768\u5c31\u5f88\u597d\u5224\u65ad\u4e86\uff0c\u4e00\u770b\u5c31\u662f\u4e2a\u626b\u63cf\u7ebf\u677f\u5b50\u7684\u5f62\u72b6\u3002 \u5148\u6309\u7167 \\(x\\) \u5750\u6807\u5206\u7ec4\u5b58\u4e00\u4e0b\u70b9\uff0c \u7136\u540e\u76f4\u63a5\u5bf9\u4e2d\u95f4\u8fd9\u4e00\u5768\u505a\u4e00\u6b21\u626b\u63cf\u7ebf\uff0c\u56e0\u4e3a\u77e9\u5f62\u4e0d\u4f1a\u76f8\u4ea4\uff0c\u6240\u4ee5\u7ebf\u6bb5\u6811\u90fd\u4e0d\u9700\u8981\u4e86\uff0c\u76f4\u63a5\u7528\u4e00\u4e2a vector/set \u4e8c\u5206\u641e\u4e00\u4e0b\u5373\u53ef\u3002 \u7136\u540e\u6211\u4eec\u628a\u8fd9\u4e9b\u5df2\u7ecf\u88ab\u6807\u8bb0\u7684\u70b9\u5220\u53bb\uff0c\u4e2d\u95f4\u7684\u90e8\u5206\u5c31\u5904\u7406\u5b8c\u4e86\u3002 \u5dee\u4e0d\u591a\u957f\u6210\u8fd9\u6837\uff1a \u4e0d\u8fc7\u8981\u8bb0\u5f97\u626b\u63cf\u7ebf\u7684\u65f6\u5019\u4e0b\u6807\u5f97\u662f\u6309\u70b9\u96c6\u8986\u76d6\u7684\u4e0b\u6807\u6765\uff08\u4e0d\u7136\u4f1a\u6f0f\u5224 \u4e8e\u662f\u6211\u4eec\u73b0\u5728\u8981\u8003\u8651\u7684\u5c31\u662f\u5916\u9762\u7684\u90e8\u5206\u3002 \u5176\u5b9e\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u4e5f\u662f\u626b\u63cf\u7ebf\u626b\u8fc7\u53bb\uff0c\u7136\u540e\u56e0\u4e3a\u626b\u63cf\u7ebf\u4e0a\u6709\u6807\u8bb0\u7684\u4e00\u6bb5\u4e00\u5b9a\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u77e9\u5f62\uff0c\u6240\u4ee5\u53ef\u4ee5\u989d\u5916\u8bb0\u4e0b\u8fd9\u4e00\u6bb5\u662f\u54ea\u4e00\u4e2a\u77e9\u5f62\uff0c\u7136\u540e\u5c31\u662f\u66b4\u529b\u505a\u3002 \u626b\u5230\u4e00\u4e2a\u70b9\uff0c\u5224\u4e00\u4e0b\u5b83\u5728\u8fd9\u4e2a\u77e9\u5f62\u5bf9\u89d2\u7ebf\u7684\u54ea\u4e00\u4fa7\uff0c\u770b\u770b\u662f\u4e0d\u662f\u5728\u77e9\u5f62\u5185\u5373\u53ef\u3002 \u56e0\u4e3a\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u88ab\u8bbf\u95ee\u5230\u4e00\u6b21\uff0c\u6240\u4ee5\u8fd9\u73a9\u610f\u513f\u7406\u8bba\u6700\u574f\u662f \\(O(n \\log n)\\) \u7684\uff0c \u6ce8\u610f\u5230\u5982\u679c\u662f\u4efb\u610f\u591a\u8fb9\u5f62\uff0c\u6709\u53ef\u80fd\u6211\u4eec\u753b\u51fa\u6765\u7684\u77e9\u5f62\u4f1a\u76f8\u4ea4\uff0c\u8fd9\u4e2a\u505a\u6cd5\u5c31\u5047\u4e86\uff0c\u6240\u4ee5\u6211\u6b63\u5728\u8003\u8651\u80fd\u4e0d\u80fd\u6269\u5c55\u3002 \u4e0d\u77e5\u9053\u6b63\u786e\u6027\u5982\u4f55\uff0c\u5982\u679c\u9519\u4e86\u6b22\u8fce\u5f00\u55b7\uff08 \u5b9e\u73b0\u6211\u5148\u5495\u5495\u5495\u7740\uff0c\u6709\u65f6\u95f4\u4e86\u518d\u5199\u3002 \u8fd9\u4e2a\u505a\u6cd5\u5e94\u8be5\u662f\u88ab\u90a3\u4e2a\u8457\u540d\u8650\u72d7\u9898 Stars in your windows \u542f\u53d1\u7684\u3002 \u753b\u77e9\u5f62\u8fd9\u4e2a\uff0c\u53ef\u80fd\u662f\u6211\u54ea\u5929\u65e0\u804a\u60f3\u51fa\u6765\u7684\u3002","title":"\u4e00\u4e2a\u6ca1\u5565\u5375\u7528\u7684\u65b0\uff08\uff1f\uff09\u7b97\u6cd5"},{"location":"blog/2023-02-02/","text":"\u7b80\u5355\u8bb0\u5f55\u4e00\u4e2a\u56e0\u4e3a\u6211\u7684\u5199\u6cd5\u95ee\u9898\u5f88\u5bb9\u6613\u60f3\u4e0d\u5230\u7684 RE \u9519\u8bef\u3002 \u5177\u4f53\u9519\u8bef\u662f\u8fd9\u6837\u7684\uff0c\u6211\u5199\u4e86\u4e00\u4e2a\u4ee3\u7801\uff1a \u9519\u8bef\u7684 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 // author : black_trees #include <cmath> #include <cstdio> #include <vector> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; class StringWithDoubleHash { private : string s ; i64 len ; i64 h [ 2 ][ si ], power [ 2 ][ si ]; const i64 base = 131 ; const i64 m [ 2 ] = { 998244853l l , 1000000009l l }; public : int Size () { return len ; } i64 Index ( char ch ) { return ( i64 )( ch - 'a' ); } void Init ( string t ) { s = ' ' + t , len = ( int ) t . size (); power [ 0 ][ 0 ] = power [ 1 ][ 0 ] = 1l l ; for ( int _ = 0 ; _ <= 1 ; ++ _ ) { for ( int i = 1 ; i <= len ; ++ i ) { power [ _ ][ i ] = power [ _ ][ i - 1 ] * base % m [ _ ]; } } h [ 0 ][ 0 ] = h [ 1 ][ 0 ] = 0l l ; for ( int _ = 0 ; _ <= 1 ; ++ _ ) { for ( int i = 1 ; i <= len ; ++ i ) { h [ _ ][ i ] = ( h [ _ ][ i - 1 ] * base ) % m [ _ ] + Index ( s [ i ]) % m [ _ ]; } } } i64 Query ( int _ , int l , int r ) { return ( h [ _ ][ r ] - ( h [ _ ][ l - 1 ] * power [ _ ][ r - l + 1 ] % m [ _ ]) + m [ _ ]) % m [ _ ]; } bool Equal ( int l1 , int r1 , int l2 , int r2 ) { bool f = true ; for ( int _ = 0 ; _ <= 1 ; ++ _ ) { f &= ( Query ( _ , l1 , r1 ) == Query ( _ , l2 , r2 )); } return f ; } }; using str = StringWithDoubleHash ; bool Equal ( str a , str b , int l , int r ) { if ( a . Size () != b . Size ()) return false ; bool f = true ; for ( int i = 0 ; i <= 1 ; ++ i ) f &= ( a . Query ( i , l , r ) == b . Query ( i , l , r )); return f ; } int Radius ( str s , int l , int r , int c ) { while ( l < r ) { int mid = ( l + r + 1 ) >> 1 ; if ( c - mid + 1 >= 1 && c + mid - 1 <= s . Size () && s . Equal ( c - mid + 1 , c , c , c + mid - 1 )) l = mid ; else r = mid - 1 ; } return l ; } int Radius_ignore ( str s , int l , int r , int c , int Ra ) { while ( l < r ) { int mid = ( l + r + 1 ) >> 1 ; if ( c - mid + 1 >= 1 && c + mid - 1 <= s . Size () && s . Equal ( c - mid + 1 , c - Ra - 1 , c + Ra + 1 , c + mid - 1 )) l = mid ; else r = mid - 1 ; } return l ; } str s ; int Rad [ si ]; int delta [ si ][ 27 ]; int pre [ si ], suf [ si ], cnt [ si ]; void fix ( int a [], int l , int r , int v ) { a [ r ] += v , a [ l - 1 ] -= v ; } void redo ( int a [], int n ) { for ( int i = 1 ; i <= n ; ++ i ) a [ i ] = a [ i ] + a [ i + 1 ]; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); string tmp ; cin >> tmp ; string t = \"#\" ; for ( int i = 0 ; i < ( int ) tmp . size (); ++ i ) t += tmp [ i ], t += '#' ; s . Init ( t ), t = ' ' + t ; // cout << t << endl; int n = s . Size (), sum = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { Rad [ i ] = Radius ( s , 1 , n , i ); sum = sum + ( Rad [ i ] / 2 ); int L = i - Rad [ i ] + 1 , R = i + Rad [ i ] - 1 ; // loosen if ( L - 1 >= 1 && R + 1 <= n ) { char ch1 = t [ L - 1 ], ch2 = t [ R + 1 ]; int Rr = Radius_ignore ( s , Rad [ i ], n , i , Rad [ i ]); delta [ L - 1 ][( int )( ch2 - 'a' + 1 )] += Rr - Rad [ i ]; delta [ R + 1 ][( int )( ch1 - 'a' + 1 )] += Rr - Rad [ i ]; } // lessen fix ( pre , L , i , L ), fix ( suf , i , R , R ), fix ( cnt , L , R , 1 ); } redo ( pre , n ), redo ( suf , n ), redo ( cnt , n ); // for(int i = 1; i <= n; ++i) cout << Rad[i] << endl; int ans = -1 ; for ( int i = 1 ; i <= n ; ++ i ) { if ( t [ i ] == '#' ) continue ; for ( char ch = 'a' ; ch <= 'z' ; ++ ch ) { int add = delta [ i ][( int )( ch - 'a' + 1 )]; int sub = pre [ i ] + suf [ i ] - ( i * cnt [ i ]); ans = max ( ans , sum + ( add - sub ) / 2 ); } } cout << ans << endl ; return 0 ; } // ()()()(? \u4f46\u662f\u7f16\u8bd1\u540e\u8fd0\u884c\u4f1a\u76f4\u63a5\u8fd4\u56de SIGSEGV \uff0c\u4f7f\u7528 gdb \u8c03\u8bd5\u540e\u51fa\u6765\u4e86\u8fd9\u6837\u7684\u4fe1\u606f\uff1a 1 2 3 4 5 6 7 8 9 10 Reading symbols from T4... ( gdb ) r Starting program: C: \\U sers \\A dministrator \\O neDrive \\W orkspace \\C ode \\M ockcontests \\2 0230201C \\T 4 .exe [ New Thread 8836 .0x23e0 ] [ New Thread 8836 .0x2cd4 ] [ New Thread 8836 .0x2a90 ] Thread 1 received signal SIGSEGV, Segmentation fault. 0x00007ff7b6ec29c6 in ___chkstk_ms () ( gdb ) q \u6211\u7ecf\u8fc7\u67e5\u627e\u53d1\u73b0\u4e86\u8fd9\u4e2a\u51fd\u6570\u7684\u6e90\u4ee3\u7801\uff1a 1 /* ___chkstk_ms is a *special* function call, which uses %rax as the argument.We avoid clobbering any registers. Unlike ___chkstk, it just probes the stack and does no stack allocation. */ \u529f\u80fd\u5927\u81f4\u662f\u5728\u5206\u914d\u4e00\u4e2a\u65b0\u7684\u6808\u4e4b\u540e\u8fdb\u884c\u4e00\u4e9b\u68c0\u67e5 \u731c\u6d4b\u662f\u7533\u8bf7\u6808\u7a7a\u95f4\u7684\u65f6\u5019\u89e6\u53d1\u4e86\u4ec0\u4e48\u9519\u8bef\uff0c\u4f46\u662f\u5177\u4f53\u5e76\u4e0d\u6e05\u695a\uff0c\u7f51\u4e0a\u4e5f\u6ca1\u6709\u7c7b\u4f3c\u7684\u539f\u56e0\u3002 \u800c\u4e14\u56e0\u4e3a\u662f\u8fd0\u884c\u5c31 RE \u4e86\uff0c\u6211\u731c\u6d4b\u5927\u6982\u7387\u95ee\u9898\u51fa\u5728 class StringWithDoubleHash \u5f53\u4e2d\uff0c\u56e0\u4e3a\u6211\u4e4b\u524d\u5c01\u88c5\u7684\u65f6\u5019\u5c31\u51fa\u8fc7\u7c7b\u4f3c\u7684\u8fd0\u884c\u5c31\u6302\u7684\u95ee\u9898\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u770b\u51fa\u6765\uff0c\u56e0\u4e3a\u6d4b\u4e86\u4e00\u4e0b\u597d\u50cf\u7a7a\u95f4\u4e5f\u6ca1\u6709\u7206\u70b8\u4e4b\u7c7b\u7684\u3002 \u7136\u540e\u6211\u53d1\u4e86\u4e00\u4e2a\u5e16\u5b50\u8be2\u95ee\uff0c\u8fd8\u5728 uoj \u7fa4\u95ee\u4e86\u4e00\u4e0b\u3002 \u5f88\u611f\u8c22 @Zyingyzzz \u548c @\u962e\u884c\u6b62 \u795e\u4ed9\u53d1\u73b0\u4e86\u95ee\u9898\u3002 \u95ee\u9898\u51fa\u5728\u6211\u7684 Radius \u51fd\u6570\uff0c\u6211\u4f20\u5165\u4e86\u4e00\u4e2a StringWithDoubleHash \u7c7b\u578b\u7684\u6210\u5458\uff0c\u5927\u5c0f\u662f 1e5 \u7ea7\u522b\uff0c\u7136\u540e\u8fd9\u91cc\u76f4\u63a5\u590d\u5236\uff0c\u6240\u4ee5\u5c31 stack overflow \u4e86\u3002 \u89e3\u51b3\u65b9\u6cd5\u5927\u6982\u662f\u4e0d\u7136\u5c31\u4e0d\u4f20\u6210\u5458\uff0c\u4e0d\u7136\u5c31\u4f20\u5f15\u7528\u3002 \u8fd9\u4e2a\u5bf9\u6211\u6765\u8bf4\u5f88\u5bb9\u6613\u5199\u9519\uff0c\u6240\u4ee5\u8bb0\u5f55\u4e00\u4e0b\uff1a \u6b63\u786e\u7684 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 // author : black_trees #include <cmath> #include <cstdio> #include <vector> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; class StringWithDoubleHash { private : string s ; i64 len ; i64 h [ 2 ][ si ], power [ 2 ][ si ]; const i64 base = 131 ; const i64 m [ 2 ] = { 998244853l l , 1000000009l l }; public : int Size () { return len ; } i64 Index ( char ch ) { return ( i64 )( ch - 'a' ); } void Init ( string t ) { s = ' ' + t , len = ( int ) t . size (); power [ 0 ][ 0 ] = power [ 1 ][ 0 ] = 1l l ; for ( int _ = 0 ; _ <= 1 ; ++ _ ) { for ( int i = 1 ; i <= len ; ++ i ) { power [ _ ][ i ] = power [ _ ][ i - 1 ] * base % m [ _ ]; } } h [ 0 ][ 0 ] = h [ 1 ][ 0 ] = 0l l ; for ( int _ = 0 ; _ <= 1 ; ++ _ ) { for ( int i = 1 ; i <= len ; ++ i ) { h [ _ ][ i ] = ( h [ _ ][ i - 1 ] * base ) % m [ _ ] + Index ( s [ i ]) % m [ _ ]; } } } i64 Query ( int _ , int l , int r ) { return ( h [ _ ][ r ] - ( h [ _ ][ l - 1 ] * power [ _ ][ r - l + 1 ] % m [ _ ]) + m [ _ ]) % m [ _ ]; } bool Equal ( int l1 , int r1 , int l2 , int r2 ) { bool f = true ; for ( int _ = 0 ; _ <= 1 ; ++ _ ) { f &= ( Query ( _ , l1 , r1 ) == Query ( _ , l2 , r2 )); } return f ; } }; using str = StringWithDoubleHash ; bool Equal ( str & a , str & b , int l , int r ) { if ( a . Size () != b . Size ()) return false ; bool f = true ; for ( int i = 0 ; i <= 1 ; ++ i ) f &= ( a . Query ( i , l , r ) == b . Query ( i , l , r )); return f ; } int Radius ( str & s , int l , int r , int c ) { while ( l < r ) { int mid = ( l + r + 1 ) >> 1 ; if ( c - mid + 1 >= 1 && c + mid - 1 <= s . Size () && s . Equal ( c - mid + 1 , c , c , c + mid - 1 )) l = mid ; else r = mid - 1 ; } return l ; } int Radius_ignore ( str & s , int l , int r , int c , int Ra ) { while ( l < r ) { int mid = ( l + r + 1 ) >> 1 ; if ( c - mid + 1 >= 1 && c + mid - 1 <= s . Size () && s . Equal ( c - mid + 1 , c - Ra - 1 , c + Ra + 1 , c + mid - 1 )) l = mid ; else r = mid - 1 ; } return l ; } str s ; int Rad [ si ]; int delta [ si ][ 27 ]; int pre [ si ], suf [ si ], cnt [ si ]; void fix ( int a [], int l , int r , int v ) { a [ r ] += v , a [ l - 1 ] -= v ; } void redo ( int a [], int n ) { for ( int i = 1 ; i <= n ; ++ i ) a [ i ] = a [ i ] + a [ i + 1 ]; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); string tmp ; cin >> tmp ; string t = \"#\" ; for ( int i = 0 ; i < ( int ) tmp . size (); ++ i ) t += tmp [ i ], t += '#' ; s . Init ( t ), t = ' ' + t ; // cout << t << endl; int n = s . Size (), sum = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { Rad [ i ] = Radius ( s , 1 , n , i ); sum = sum + ( Rad [ i ] / 2 ); int L = i - Rad [ i ] + 1 , R = i + Rad [ i ] - 1 ; // loosen if ( L - 1 >= 1 && R + 1 <= n ) { char ch1 = t [ L - 1 ], ch2 = t [ R + 1 ]; int Rr = Radius_ignore ( s , Rad [ i ], n , i , Rad [ i ]); delta [ L - 1 ][( int )( ch2 - 'a' + 1 )] += Rr - Rad [ i ]; delta [ R + 1 ][( int )( ch1 - 'a' + 1 )] += Rr - Rad [ i ]; } // lessen fix ( pre , L , i , L ), fix ( suf , i , R , R ), fix ( cnt , L , R , 1 ); } redo ( pre , n ), redo ( suf , n ), redo ( cnt , n ); // for(int i = 1; i <= n; ++i) cout << Rad[i] << endl; int ans = -1 ; for ( int i = 1 ; i <= n ; ++ i ) { if ( t [ i ] == '#' ) continue ; for ( char ch = 'a' ; ch <= 'z' ; ++ ch ) { int add = delta [ i ][( int )( ch - 'a' + 1 )]; int sub = pre [ i ] + suf [ i ] - ( i * cnt [ i ]); ans = max ( ans , sum + ( add - sub ) / 2 ); } } cout << ans << endl ; return 0 ; } // ()()()(? \u867d\u7136\u8fd9\u4efd\u8fd8\u662f\u6ca1\u8fc7\u539f\u9898\u5c31\u662f\u4e86\u2026\u2026\u54ed\u3002","title":"\u8bb0\u5f55\u4e00\u4e2a Stack Overflow \u5b9e\u4f8b"},{"location":"blog/2023-02-03/","text":"\u6700\u8fd1\u89c9\u5f97\uff0c\u5728 vscode \u91cc\u8fd8\u7528\u547d\u4ee4\u884c gdb \u5404\u79cd\u8c03\u8bd5\u5176\u5b9e\u4e0d\u592a\u4f18\u96c5\u3002 \u6bd5\u7adf vscode \u81ea\u5e26\u7684\u8c03\u8bd5\u76f8\u5f53\u4e8e\u662f\u7ed9 gdb \u6765\u4e86\u4e00\u4e2a\u6269\u5c55\uff0c\u7528\u8d77\u6765\u66f4\u8212\u670d\u4e00\u4e9b\u3002 \u4e8e\u662f\u627e wqs \u795e\u4ed9\u5b66\u4e60\u4e86\u4e00\u4e0b\u8fd9\u73a9\u610f\u513f\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u7136\u540e\u6539\u4e86\u6539\u914d\u7f6e\u6587\u4ef6\u3002 Vscode \u7684\u8c03\u8bd5\u4f9d\u8d56\u4e8e\u4e24\u4e2a\u6587\u4ef6\uff1a launch.json \u548c task.json \u3002 launch.json \u7684\u4f5c\u7528\u4e3b\u8981\u5c31\u662f\u542f\u52a8\u8c03\u8bd5\u5668\uff08\u4e00\u822c\u90fd\u662f gdb\uff09\uff0c\u800c task.json \u7684\u4f5c\u7528\u5219\u662f\u6267\u884c\u7c7b\u4f3c\u7f16\u8bd1\uff0c\u8fd0\u884c\u4e00\u7c7b\u7684\u4efb\u52a1\u3002 \u5148\u770b\u4e00\u4e0b launch.json \uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 { // \u4f7f\u7528 IntelliSense \u4e86\u89e3\u76f8\u5173\u5c5e\u6027\u3002 // \u60ac\u505c\u4ee5\u67e5\u770b\u73b0\u6709\u5c5e\u6027\u7684\u63cf\u8ff0\u3002 // \u6b32\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95ee: https://go.microsoft.com/fwlink/?linkid=830387 \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"Debug a C++ program with GDB\" , // \u8be5\u8c03\u8bd5\u4efb\u52a1\u7684\u540d\u5b57\uff0c\u542f\u52a8\u8c03\u8bd5\u65f6\u4f1a\u5728\u5f85\u9009\u5217\u8868\u4e2d\u663e\u793a \"type\" : \"cppdbg\" , \"request\" : \"launch\" , \"program\" : \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\" , \"args\" : [], \"stopAtEntry\" : false , // \u8fd9\u4e00\u9879\u63a7\u5236\u662f\u5426\u5728\u5165\u53e3\u5904\u6682\u505c\uff0c\u9ed8\u8ba4false\u4e0d\u6682\u505c\uff0c\u6539\u4e3atrue\u6682\u505c \"cwd\" : \"${workspaceFolder}\" , \"environment\" : [], \"externalConsole\" : false , // \u8fd9\u4e00\u9879\u63a7\u5236\u662f\u5426\u542f\u52a8\u5916\u90e8\u63a7\u5236\u53f0\uff08\u72ec\u7acb\u7684\u9ed1\u6846\uff09\u8fd0\u884c\u7a0b\u5e8f\uff0c\u9ed8\u8ba4false\u8868\u793a\u5728\u96c6\u6210\u7ec8\u7aef\u4e2d\u8fd0\u884c \"MIMode\" : \"gdb\" , \"miDebuggerPath\" : \"C:\\\\msys64\\\\mingw64\\\\bin\\\\gdb.exe\" , // \u8c03\u8bd5\u5668\u8def\u5f84\uff0c\u5fc5\u987b\u4e0e\u4f60\u81ea\u5df1\u7684\u7535\u8111\u76f8\u7b26 \"setupCommands\" : [ { \"description\" : \"\u4e3a gdb \u542f\u7528\u6574\u9f50\u6253\u5370\" , \"text\" : \"-enable-pretty-printing\" , \"ignoreFailures\" : true } ], \"preLaunchTask\" : \"Compile a C++ program with GNU C++17 (msys2 64bit)\" // \u8c03\u8bd5\u524d\u7684\u9884\u6267\u884c\u4efb\u52a1\uff0c\u8fd9\u91cc\u7684\u503c\u662ftasks.json\u6587\u4ef6\u4e2d\u5bf9\u5e94\u7684\u7f16\u8bd1\u4efb\u52a1\uff0c\u4e5f\u5c31\u662f\u8c03\u8bd5\u524d\u9700\u8981\u5148\u7f16\u8bd1 } ] } \u5176\u5b9e\u4e5f\u6ca1\u5565\u597d\u8bf4\u7684\uff0c\u5c31\u770b\u770b\u6ce8\u91ca\u5c31\u884c\uff0c\u8fd9\u4e2a\u662f\u4ece\u67d0\u4e2a\u535a\u5ba2\u590d\u5236\u8fc7\u6765\u6539\u7684\uff0c\u6709\u65f6\u95f4\u627e\u4e00\u4e0b\u51fa\u5904\u3002 \u7136\u540e\u5c31\u662f\uff0c\u56e0\u4e3a\u5f00\u4e86 O2 \u8c03\u8bd5\u7ecf\u5e38\u4f1a\u7a81\u7136\u8c03\u5230\u4ee4\u4eba\u96be\u4ee5\u7406\u89e3\u7684\u5730\u65b9\uff0c\u6240\u4ee5\u8fd8\u662f\u4e0d\u5f00 O2 \u6bd4\u8f83\u597d\u3002 \u7136\u540e\u518d\u770b task.json \uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 { \"tasks\" : [ { \"type\" : \"shell\" , \"label\" : \"Compile a C++ program with GNU C++17, O2 (msys2 64bit)\" , \"command\" : \"C:\\\\msys64\\\\mingw64\\\\bin\\\\g++.exe\" , \"args\" : [ \"${file}\" , \"-o\" , \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\" , \"-std=c++17\" , \"-O2\" , \"-Wall\" , \"-Wextra\" , \"-Wshadow\" , \"-g\" ], \"options\" : { \"cwd\" : \"${fileDirname}\" }, \"problemMatcher\" : [ \"$gcc\" ], \"group\" : { \"kind\" : \"build\" , \"isDefault\" : true }, \"detail\" : \"Compile a C++ program with O2.\" }, { \"type\" : \"shell\" , \"label\" : \"Compile a C++ program with GNU C++17 (msys2 64bit)\" , \"command\" : \"C:\\\\msys64\\\\mingw64\\\\bin\\\\g++.exe\" , \"args\" : [ \"${file}\" , \"-o\" , \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\" , \"-std=c++17\" , \"-Wall\" , \"-Wextra\" , \"-Wshadow\" , \"-g\" ], \"options\" : { \"cwd\" : \"${fileDirname}\" }, \"problemMatcher\" : [ \"$gcc\" ], \"group\" : { \"kind\" : \"build\" , \"isDefault\" : false }, \"detail\" : \"Compile a C++ program without O2.\" }, { \"label\" : \"Run a C++ program with GNU C++17, O2 (msys2 64bit)\" , \"type\" : \"shell\" , \"command\" : \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\" , \"options\" : { \"cwd\" : \"${fileDirname}\" }, \"dependsOn\" : \"Compile a C++ file with GNU C++17, O2 (msys2 64bit)\" , \"group\" : { \"kind\" : \"build\" , \"isDefault\" : true }, \"presentation\" : { \"echo\" : true , \"reveal\" : \"always\" , \"focus\" : false , \"panel\" : \"shared\" , \"showReuseMessage\" : true , \"clear\" : false }, \"detail\" : \"Run a C++ program with O2.\" }, { \"label\" : \"Run a C++ program with GNU C++17 (msys2 64bit)\" , \"type\" : \"shell\" , \"command\" : \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\" , \"options\" : { \"cwd\" : \"${fileDirname}\" }, \"dependsOn\" : \"Compile a C++ program with GNU C++17 (msys2 64bit)\" , \"group\" : { \"kind\" : \"build\" , \"isDefault\" : false }, \"presentation\" : { \"echo\" : true , \"reveal\" : \"always\" , \"focus\" : false , \"panel\" : \"shared\" , \"showReuseMessage\" : true , \"clear\" : false }, \"detail\" : \"Run a C++ program without O2.\" } ], \"version\" : \"2.0.0\" } \u8fd9\u91cc\u6709\u4e24\u79cd task\uff0c\u4e00\u4e2a\u662f\u7f16\u8bd1\u6e90\u6587\u4ef6\uff0c\u53e6\u4e00\u4e2a\u662f\u8fd0\u884c\u6e90\u6587\u4ef6\u3002 \u540e\u4e00\u4e2a task \u4f9d\u8d56\u4e8e\u524d\u4e00\u4e2a\uff0c\u6240\u4ee5\u4f1a\u6709 dependsOn \u8fd9\u6837\u7684\u5185\u5bb9\u3002 type \u4e00\u822c\u6765\u8bf4\u9009 shell \u4f1a\u6bd4\u8f83\u597d\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ef\u4ee5\u8ba9 task \u76f4\u63a5\u5728\u7ec8\u7aef\u91cc\u8fd0\u884c\uff0c\u6bd4\u8f83\u7b26\u5408\u65e5\u5e38\u4e60\u60ef\u3002 presentation \u5219\u662f\u8fd0\u884c\u5b8c\u4e4b\u540e\u7684\u4e00\u4e9b\u4fe1\u606f\u663e\u793a\u4e4b\u7c7b\u7684\uff0c\u6bd4\u5982 echo \u5c31\u8868\u793a\u662f\u5426\u663e\u793a\u4fe1\u606f\uff0c clear \u8868\u793a\u662f\u5426\u60c5\u51b5\u4e4b\u524d\u7684\u8f93\u51fa\u3002 panel \u5219\u662f\u662f\u5426\u4e0e\u4e0a\u4e00\u4e2a\u4efb\u52a1\u5171\u7528\u7ec8\u7aef\u3002 \u7136\u540e\u8bb0\u5f97\u8981\u5728\u5206\u7ec4\u91cc\u9009\u4e0a build \uff0c\u4e0d\u7136 C-S-b \u7684\u65f6\u5019\u4e0d\u4f1a\u51fa\u73b0\u5bf9\u5e94 task \u7684\uff08 \u7136\u540e\u8fd9\u6837\u914d\u7f6e\u597d\u4e4b\u540e\u628a\u6587\u4ef6\u653e\u5230\u5bf9\u5e94\u5de5\u4f5c\u533a\u7684 .vscode \u76ee\u5f55\u4e0b\uff0c\u76f4 \u63a5 F5 \u5c31\u80fd\u8c03\u8bd5\u4e86\u3002 \u8c03\u8bd5\u7684\u65f6\u5019\u5c31\u5728\u7ec8\u7aef\u91cc\u8f93\u5165\uff0c\u624b\u52a8\u4f7f\u7528 gdb \u539f\u751f\u547d\u4ee4\u9700\u8981\u5728 Debug console \u91cc\uff0c\u8fd8\u9700\u8981\u52a0\u4e0a -exec \u524d\u7f00\u3002 \u56e0\u4e3a Debug console \u5176\u5b9e\u672c\u8d28\u4e0a\u662f\u7ed9\u8868\u8fbe\u5f0f\u6c42\u503c\u7528\u7684\u3002 \u8fd0\u884c\u7684\u8bdd\u76f4\u63a5\u9009\u4e2d\u5bf9\u5e94\u4efb\u52a1\u5c31\u53ef\u4ee5\u4e86\u3002 \u4e0d\u8fc7\u8fd9\u91cc\u552f\u4e00\u96be\u53d7\u7684\u70b9\u662f\uff0c\u6211\u4fee\u6539\u9ed8\u8ba4\u7ec8\u7aef\u4e3a Git Bash \u4e4b\u540e\uff0cjson \u8bbe\u7f6e\u91cc\u7684\u7f3a\u7701\u8def\u5f84\u4f1a\u6709 d: \u7684\u5b57\u6837\uff0cbash \u6ca1\u6cd5\u8bc6\u522b\u3002 \u6211\u8fd8\u5728\u601d\u8003\u600e\u4e48\u4fee\u6539\u8ba9\u5b83\u6765\u9002\u914d\u3002","title":"Vscode \u8c03\u8bd5\u76f8\u5173\u914d\u7f6e\u8bb0\u5f55"},{"location":"blog/2023-02-26/","text":"\u539f\u89c6\u9891\u6765\u81ea\uff1a QQ user:279144881 \u3002 \u4f60\u7684\u6d4f\u89c8\u5668\u4e0d\u652f\u6301\u64ad\u653e\u8fd9\u4e2a\u89c6\u9891\u3002 \u8fd9\u624d\u662f\u6211\u5fc3\u4e2d\u6210\u5916\u8be5\u6709\u7684\u6837\u5b50\uff08\u96fe \u8fd9\u4e2a\u8fdc\u5149\u706f\u548c\u6821\u670d\u653e\u5728\u4e00\u8d77\u592a\u9006\u5929\u4e86\u3002","title":"\u591c\u722c\u5927\u8d5b"},{"location":"blog/2023-03-06/","text":"\u524d\u8a00 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6700\u8fd1\u8fd9\u6bb5\u65f6\u95f4\u4e00\u76f4\u5728\u5b66\u6821\u5927\u673a\u623f\u5199\u535a\u5ba2\uff0c\u539f\u7406\u662f\u7528 Onedrive \u540c\u6b65\u6574\u4e2a repo\uff0c\u4e8e\u662f login \u4e4b\u540e\u76f4\u63a5\u4fee\u6539\uff0cmkdocs \u7f16\u8bd1\u4e00\u4e0b\u76f4\u63a5 push \u5c31\u53ef\u4ee5\u3002 \u4f46\u662f Onedrive \u6709\u4e00\u4e2a\u6bd4\u8f83\u81f4\u547d\u7684\u95ee\u9898\uff0c\u5bf9\u4e8e\u591a\u6587\u4ef6\uff0c\u5b83\u5f88\u591a\u65f6\u5019\u4e0d\u80fd\u8fdb\u884c\u5373\u65f6\u540c\u6b65\uff0c\u5f80\u5f80\u9700\u8981\u624b\u52a8\u6682\u505c\u540c\u6b65\u6216\u8005\u9000\u51fa\u91cd\u8fdb\u4e4b\u540e\u624d\u4f1a\u8ddf\u90a3\u5565\u4e00\u6837\u81ea\u5df1\u540c\u6b65\u4e00\u70b9\u3002 \u8fd9\u4e2a\u5730\u65b9 \u5df2\u7ecf\u6709\u4eba\u9047\u5230\u4e86\u7c7b\u4f3c\u7684\u95ee\u9898\uff0c\u4f46\u662f microsoft \u4f3c\u4e4e\u5e76\u6ca1\u6709\u4fee\u590d\u8fd9\u4e2a\u4e1c\u897f\u3002 \u5f88\u70e6\uff0c\u6240\u4ee5\u5c31\u4f1a\u51fa\u73b0\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u6211\u535a\u5ba2\u5199\u5b8c\u4e86\uff0cpublish \u4e86\uff0c\u4f46\u662f\u6211 onedrive \u5e76\u6ca1\u6709\u4e0a\u4f20\uff0c\u6b64\u65f6\u53c8\u9a6c\u4e0a\u8981\u56de\u5bdd\u5ba4\u4e86\uff0c\u5bfc\u81f4\u6587\u4ef6\u540c\u6b65\u4e0d\u4e86\uff0c\u66f4\u6539\u4e22\u5931\u3002 \u4e8e\u662f\u6211\u91c7\u53d6\u4e86\u571f\u529e\u6cd5\uff0c\u76f4\u63a5\u5728\u975e\u8fd8\u539f\u76d8\u4e0a\u5b58\u4e00\u4e0b\u6ca1\u6709\u88ab\u540c\u6b65\u7684\u6587\u4ef6\uff0c\u8fd9\u4e2a\u53ea\u9700\u8981\u7b5b\u9009\u7136\u540e\u590d\u5236\u4e00\u4e0b\u5c31\u884c\u4e86\u3002 \u4e4b\u524d\u5df2\u7ecf\u6210\u529f\u8fc7\u51e0\u6b21\u4e86\uff0c\u4f46\u662f\u8fd9\u6b21\u5374\u51fa\u73b0\u4e86\u95ee\u9898\uff0c\u6211\u5f00\u59cb\u5e76\u6ca1\u6709\u89c9\u5f97\u6709\u5565\u4e0d\u5bf9\u52b2\uff0c\u8fc7\u4e86\u4e00\u4f1a\u5c31\u51fa\u4e8b\u4e86\u3002 \u95ee\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6211\u590d\u5236\u5b8c\u4e4b\u540e\u8fd0\u884c\u4e86\u7f16\u8bd1\u535a\u5ba2\u7684\u547d\u4ee4\uff1a mkdocs serve \uff0c\u51c6\u5907\u770b\u770b\u662f\u4e0d\u662f\u5c11\u4e86\u4ec0\u4e48\u4e1c\u897f\u3002 \u7136\u540e\u53d1\u73b0\u76f4\u63a5\u6ca1\u6cd5\u7f16\u8bd1\u4e86\uff0c\u56e0\u4e3a\u6211\u6709\u7528\u4e00\u4e2a\u6839\u636e git \u4fee\u6539\u8bb0\u5f55\u6765\u81ea\u52a8\u66f4\u65b0\u6587\u4ef6\u4fee\u6539\u65f6\u95f4\u7684\u63d2\u4ef6\uff0c\u800c\u5b83\u63d0\u793a\u6211\uff0c unable to read git log of xx/yy/zz/aa/bb.cc (\u56e0\u4e3a\u5f53\u65f6\u7684\u4f1a\u8bdd\u5df2\u7ecf\u5173\u4e86\uff0c\u5e78\u597d\u6211\u5f53\u65f6\u5907\u4efd\u4e86\u4ee3\u7801\u4ee5\u9632\u4e07\u4e00\uff0c\u6240\u4ee5\u7528\u4e86\u9519\u8bef\u7684\u4ee3\u7801\u6765\u6f14\u793a) \u6211\u6b64\u65f6\u5c31\u89c9\u5f97\u4e0d\u5bf9\u52b2\uff0c\u968f\u4fbf\u5f00\u4e86\u4e00\u4e2a\u6587\u4ef6\u770b\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u4e86\u8fd9\u6837\u7684\u4e1c\u897f\uff1a \u5f88\u597d\uff0c\u539f\u6765\u662f\u6211\u7684\u6587\u4ef6\u4e71\u7801\u4e86\uff0c\u770b\u8d77\u6765\u662f\u56e0\u4e3a\u6211\u5f53\u65f6\u590d\u5236\u5e76\u6ca1\u6709\u590d\u5236\u5b8c\u5168\uff0c\u7740\u6025\u7740\u8d70\uff0c\u76f4\u63a5\u62c9\u95f8\u65ad\u7535\u4e86\u3002 \u4e8e\u662f\u6709\u4e9b\u6587\u4ef6\u5c31\u6ca1\u6709\u62f7\u5b8c\u3002 \u4ed4\u7ec6\u5206\u6790\u53d1\u73b0\u4e00\u4e2a\u4e8b\u60c5\u662f\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u8fd9\u4e2a\uff0c\u6211\u7684 .git \u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u6709\u635f\u574f\u3002 \u4e8e\u662f\u6211\u5c1d\u8bd5\u4f7f\u7528 git reset --hard \uff0c\u7136\u540e git fetch \uff0c\u4e4b\u540e git pull \u628a\u8fdc\u7a0b\u7684\u4ee3\u7801\u62c9\u53d6\u4e0b\u6765\u3002 \u4e4b\u540e\u6211\u7ee7\u7eed\u7f16\u8bd1\u4e86\u4e00\u6b21\u3002 \u4ecd\u65e7\u662f\u8fd9\u4e2a\u95ee\u9898\u3002 \u7136\u540e\u6211\u5c31\u5728\u641c\u7d22\u5f15\u64ce\u91cc\u641c\u7d22\u4e86 \u5982\u4f55\u6062\u590d git \u7684\u6587\u4ef6 \u5148\u662f\u53d1\u73b0\u4e86 git fsck \u8fd9\u4e2a\u547d\u4ee4\uff0c\u4e8e\u662f\u6211\u4f7f\u7528\u5b83\u68c0\u67e5\u4e86\u6211\u7684 repo\uff1a \u53d1\u73b0\u4e86 git \u7684 \u6587\u6863 \uff0c\u9605\u8bfb\u4e4b\u540e\u5c1d\u8bd5\u4e86\u4e00\u4e0b\uff0c\u4f46\u662f\u4ecd\u65e7\u6ca1\u6709\u5375\u7528\u3002 \u7136\u540e\u6ce8\u610f\u5230\u8fd9\u91cc\u6709\u51e0\u53e5\u8bdd\uff1a \u6211\u63a8\u6d4b\u53ef\u80fd\u6700\u5927\u7684\u95ee\u9898\u662f\uff0c\u6709\u4e00\u4e9b commit \u6587\u4ef6\u4e22\u5931\u4e86\uff0c\u8fde\u5e26\u7740\u4e00\u4e9b\u6587\u4ef6\u7684 log\uff0c\u4e8e\u662f\u6211\u5148\u5c1d\u8bd5\u4e86\u76f4\u63a5\u4fee\u6539\u5b83\u63d0\u793a\u7684\u6587\u4ef6\uff0c\u8ba9 git \u91cd\u65b0\u521b\u5efa log\uff0c\u7136\u540e\u518d\u8fd0\u884c\uff0c\u53d1\u73b0\u6587\u4ef6\u540d\u53d8\u5316\u4e86\u3002 \u4e5f\u5c31\u662f\u8bf4\u4e0d\u6b62\u4e00\u4e2a\uff0c\u8fd9\u6837\u4e0b\u53bb\u4f1a\u6bd4\u8f83\u96be\u53d7\u7684\u3002 \u4e8e\u662f\u6211\u5c31\u7ee7\u7eed\u5bfb\u627e\u80fd\u591f\u89e3\u51b3\u95ee\u9898\u7684\u529e\u6cd5\u3002 \u518d\u6b21\u9605\u8bfb\u4e86\u6587\u6863\u4e4b\u540e\uff0c\u6211\u6709\u4e00\u4e2a\u60f3\u6cd5\uff0c\u4ed6\u8bf4\uff1a You can recover it the same way, by adding a branch that points to that SHA-1. \u4e5f\u5c31\u662f\u8bf4\uff0c\u5176\u5b9e git \u5e76\u6ca1\u6709\u4e22\u5931\u8fd9\u4e9b commit\uff0c\u53ea\u662f\u4ece branch \u91cc\u79fb\u9664\u4e86\uff08\u56e0\u4e3a\u6587\u4ef6\u7f3a\u5931\u5bfc\u81f4\u7684\u79fb\u9664\uff09 \u6240\u5e78\u8bb0\u5f55\u8fd9\u4e2a\u7684\u6587\u4ef6\u5e76\u6ca1\u6709\u4e22\u5931\u3002 \u6240\u4ee5\u6211\u6253\u7b97\uff0c\u628a\u8fd9\u4e9b\u4e22\u5931\u7684 commit \u5168\u90e8\u62c9\u51fa\u6765\uff0c\u76f4\u63a5\u5206\u522b\u4e22\u5230\u51e0\u4e2a branch \u4e0a\uff0c\u7136\u540e\u628a\u8fd9\u4e9b branch \u76f4\u63a5\u5408\u5e76\u5230\u6211\u7684\u672c\u5730 master \u5206\u652f\uff1a \u6240\u4ee5\u6211\u5148\u8fd0\u884c\u4e86 git log --pretty=oneline \u786e\u5b9e\u662f\u6709 commit \u4e22\u5931\u4e86\uff0c\u4e8e\u662f\u6211\u518d\u6b21\u8fd0\u884c\u4e86 git fsck \uff0c\u7136\u540e\u627e\u5230\u4e86\u8fd9\u4e9b dangling commit \uff1a \u4e4b\u540e\u6211\u65b0\u5efa\u4e86\u4e00\u4e9b branch\uff0c\u5148\u8bd5\u8bd5\u53ef\u4e0d\u53ef\u884c 1 2 git branch recover-branch-1 xxxx git branch recover-branch-2 yyyy \u8dd1\u4e00\u4e0b git branch \u68c0\u67e5\u4e00\u4e0b\uff1a \u7136\u540e\u5c31 git checkout \u9009\u62e9\u4e86 master \u5206\u652f \u5f88\u597d\uff0c\u4e0d\u80fd\u5408\u5e76\uff0c\u4e3a\u5565\u5462\uff0c\u4ed4\u7ec6\u9605\u8bfb\u4e4b\u540e\u53d1\u73b0\uff0c\u56e0\u4e3a\u67d0\u4e9b\u6587\u4ef6\u4e22\u5931\uff0c\u5bfc\u81f4\u8fd9\u4e9b commit \u4e5f\u90fd\u627e\u4e0d\u56de\u6765\u4e86\uff01fk\u3002 \u4e4b\u540e\u6211\u5c31\u6bd4\u8f83\u56f0\u60d1\uff0c\u4e0d\u77e5\u9053\u8be5\u548b\u529e\u6bd4\u8f83\u597d\u3002 \u89e3\u51b3\u65b9\u6848 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6700\u540e\u6211\u53ea\u597d\u4f7f\u7528\u4e0b\u7b56 git clone \uff0c\u8fd9\u4e2a\u672c\u6765\u6700\u5f00\u59cb\u5c31\u60f3\u5230\u4e86\uff0c\u4f46\u662f\u6211\u60f3\u7740\uff0c\u8fd9\u6bd5\u7adf\u662f\u5728 Onedrive \u6587\u4ef6\u5939\u4e0a\u641e\uff0c\u641e\u51fa\u4e8b\u4e86\u5230\u65f6\u5019\u6211\u672c\u5730\u6570\u636e\u4e5f\u6ca1\u4e86\u3002 \u4f46\u662f\u4ed4\u7ec6\u4e00\u60f3\uff0c\u8fd9TM\u4e0d\u662f\u8fd8\u6709 git repo \u5417\uff0c\u5c31\u7b97\u6389\u4e86\uff0c\u8fdc\u7aef\u670d\u52a1\u5668\u4e0a\u8fd8\u6709\u4e1c\u897f\u5462\uff01\u76f4\u63a5\u590d\u5236\u4e00\u4e0b\uff0c\u5b9e\u5728\u4e0d\u884c\u91cd\u65b0 remote \u90fd\u597d\u554a\uff01 \u4e8e\u662f\u4e3a\u4e86\u4fdd\u9669\uff0c\u6211\u628a\u5df2\u7ecf\u5904\u7406\u5230\u8fd9\u6b65\u7684\u4e24\u4e2a repo\uff08\u5305\u542b\u5173\u7cfb\uff09\u4e22\u8fdb\u4e86\u522b\u7684\u6587\u4ef6\u5939\uff0c\u7136\u540e\u5206\u522b clone\uff0c\u66b4\u529b\u56de\u9000\u5230\u6211\u6628\u5929\u665a\u4e0a\u7684\u7248\u672c\uff08\u5e78\u597d\u6211\u5f53\u65f6\u4e24\u4e2a repo \u90fd\u5df2\u7ecf\u4e0a\u4f20\u4e86\uff0c\u53ea\u662f onedrive \u6ca1\u66f4\u65b0\u800c\u5df2\uff09 \u518d\u6b21\u7f16\u8bd1\uff0c\u6210\u529f\u4e86\uff01 \u603b\u7ed3 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6211\u662f shaber\u3002 \u4e0d\u8fc7 Onedrive \u7684\u8fd9\u4e2a\u95ee\u9898\u786e\u5b9e\u662f\u5f88\u4ee4\u6211\u5934\u75bc\uff0c\u4f46\u662f\u6211\u672c\u8eab\u5df2\u7ecf\u5f88\u4ee5\u6765\u57fa\u4e8e\u5fae\u8f6f\u751f\u6001\u7684\u4e00\u7cfb\u5217\u4ea7\u54c1\u4e86\uff0c\u540c\u6b65\u529f\u80fd\u786e\u5b9e\u597d\u7528\uff0c\u4e5f\u4e0d\u7528\u9891\u7e41\u7ffb\u5899\uff0ctodo \u7528\u7740\u4e5f\u5f88\u8212\u670d\u3002 \u6240\u4ee5\u6211\u6253\u7b97\u53bb report \u4e00\u4e0b\u8fd9\u4e2a bug\uff0c\u76ee\u524d\u5148\u5c06\u5c31\u7740\u7528\uff0c\u5177\u4f53\u89e3\u51b3\u5c31\u662f\uff0c\u65e2\u7136 OneDrive \u5bf9\u8fc7\u591a\u6587\u4ef6\u540c\u6b65\u4e0a\u4f20\u901f\u5ea6\u592a\u6162\uff08\u6211\u731c\u6d4b\u662f\u8981\u8bb0\u5f55\u4e00\u4e9b\u6742\u4e03\u6742\u516b\u7684\u4e1c\u897f\uff08\u4f46\u4e0d\u81f3\u4e8e\u8fd9\u4e48\u6162\u5427\uff09\uff09\uff0c\u90a3\u6211\u5c31\u5148\u53ea\u5728\u5927\u673a\u623f\u7535\u8111\u4e0a\u6539\u3002 \u7136\u540e\u540c\u6b65\u5b8c\u4e4b\u540e\u5728\u53e6\u5916\u4e00\u4e2a\u673a\u623f\u7684\u4e3b\u673a\u4e0a\u7f16\u8bd1\uff0c\u7136\u540e\u4e0a\u4f20\u5c31\u7b49\u90a3\u8fb9\u4e0a\u4f20\u5c31\u884c\uff0c\u53cd\u6b63\u90a3\u8fb9\u4e0d\u65ad\u7535\u3002 \u540e\u8bb0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u597d\u9ebb\u70e6\u2026\u2026\u2026\u2026\u2026\u2026 \uff08\u89e3\u51b3\u95ee\u9898\u4e4b\u540e\uff1a\uff09 \u4eca\u5929\u665a\u4e0a\u53d1\u73b0\u4e00\u4e2a\u4e8b\u60c5\uff0c\u5982\u679c onedrive \u4e0d\u540c\u6b65\u4e86\uff0c\u53ef\u4ee5\u8003\u8651\u526a\u5207\u4e4b\u540e\u5728\u79fb\u52a8\u56de\u6765\u3002 \u8fd9\u6837 OneDrive \u5c45\u7136\u5c31\u4f1a\u66f4\u65b0\u4e86\uff01\uff08\u53ea\u5bf9 .git \u8bd5\u9a8c\u4e86\u4e00\u4e0b\uff0c\u5982\u679c\u90fd\u53ef\u4ee5\u6211\u4f1a\u5355\u72ec\u53d1\u4e00\u7bc7 blog\uff09","title":"\u6062\u590d\u56e0\u505c\u673a\u5bfc\u81f4\u6587\u4ef6\u4e22\u5931\u7684 git repo"},{"location":"blog/2023-03-06/#_1","text":"\u6700\u8fd1\u8fd9\u6bb5\u65f6\u95f4\u4e00\u76f4\u5728\u5b66\u6821\u5927\u673a\u623f\u5199\u535a\u5ba2\uff0c\u539f\u7406\u662f\u7528 Onedrive \u540c\u6b65\u6574\u4e2a repo\uff0c\u4e8e\u662f login \u4e4b\u540e\u76f4\u63a5\u4fee\u6539\uff0cmkdocs \u7f16\u8bd1\u4e00\u4e0b\u76f4\u63a5 push \u5c31\u53ef\u4ee5\u3002 \u4f46\u662f Onedrive \u6709\u4e00\u4e2a\u6bd4\u8f83\u81f4\u547d\u7684\u95ee\u9898\uff0c\u5bf9\u4e8e\u591a\u6587\u4ef6\uff0c\u5b83\u5f88\u591a\u65f6\u5019\u4e0d\u80fd\u8fdb\u884c\u5373\u65f6\u540c\u6b65\uff0c\u5f80\u5f80\u9700\u8981\u624b\u52a8\u6682\u505c\u540c\u6b65\u6216\u8005\u9000\u51fa\u91cd\u8fdb\u4e4b\u540e\u624d\u4f1a\u8ddf\u90a3\u5565\u4e00\u6837\u81ea\u5df1\u540c\u6b65\u4e00\u70b9\u3002 \u8fd9\u4e2a\u5730\u65b9 \u5df2\u7ecf\u6709\u4eba\u9047\u5230\u4e86\u7c7b\u4f3c\u7684\u95ee\u9898\uff0c\u4f46\u662f microsoft \u4f3c\u4e4e\u5e76\u6ca1\u6709\u4fee\u590d\u8fd9\u4e2a\u4e1c\u897f\u3002 \u5f88\u70e6\uff0c\u6240\u4ee5\u5c31\u4f1a\u51fa\u73b0\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u6211\u535a\u5ba2\u5199\u5b8c\u4e86\uff0cpublish \u4e86\uff0c\u4f46\u662f\u6211 onedrive \u5e76\u6ca1\u6709\u4e0a\u4f20\uff0c\u6b64\u65f6\u53c8\u9a6c\u4e0a\u8981\u56de\u5bdd\u5ba4\u4e86\uff0c\u5bfc\u81f4\u6587\u4ef6\u540c\u6b65\u4e0d\u4e86\uff0c\u66f4\u6539\u4e22\u5931\u3002 \u4e8e\u662f\u6211\u91c7\u53d6\u4e86\u571f\u529e\u6cd5\uff0c\u76f4\u63a5\u5728\u975e\u8fd8\u539f\u76d8\u4e0a\u5b58\u4e00\u4e0b\u6ca1\u6709\u88ab\u540c\u6b65\u7684\u6587\u4ef6\uff0c\u8fd9\u4e2a\u53ea\u9700\u8981\u7b5b\u9009\u7136\u540e\u590d\u5236\u4e00\u4e0b\u5c31\u884c\u4e86\u3002 \u4e4b\u524d\u5df2\u7ecf\u6210\u529f\u8fc7\u51e0\u6b21\u4e86\uff0c\u4f46\u662f\u8fd9\u6b21\u5374\u51fa\u73b0\u4e86\u95ee\u9898\uff0c\u6211\u5f00\u59cb\u5e76\u6ca1\u6709\u89c9\u5f97\u6709\u5565\u4e0d\u5bf9\u52b2\uff0c\u8fc7\u4e86\u4e00\u4f1a\u5c31\u51fa\u4e8b\u4e86\u3002","title":"\u524d\u8a00"},{"location":"blog/2023-03-06/#_2","text":"\u6211\u590d\u5236\u5b8c\u4e4b\u540e\u8fd0\u884c\u4e86\u7f16\u8bd1\u535a\u5ba2\u7684\u547d\u4ee4\uff1a mkdocs serve \uff0c\u51c6\u5907\u770b\u770b\u662f\u4e0d\u662f\u5c11\u4e86\u4ec0\u4e48\u4e1c\u897f\u3002 \u7136\u540e\u53d1\u73b0\u76f4\u63a5\u6ca1\u6cd5\u7f16\u8bd1\u4e86\uff0c\u56e0\u4e3a\u6211\u6709\u7528\u4e00\u4e2a\u6839\u636e git \u4fee\u6539\u8bb0\u5f55\u6765\u81ea\u52a8\u66f4\u65b0\u6587\u4ef6\u4fee\u6539\u65f6\u95f4\u7684\u63d2\u4ef6\uff0c\u800c\u5b83\u63d0\u793a\u6211\uff0c unable to read git log of xx/yy/zz/aa/bb.cc (\u56e0\u4e3a\u5f53\u65f6\u7684\u4f1a\u8bdd\u5df2\u7ecf\u5173\u4e86\uff0c\u5e78\u597d\u6211\u5f53\u65f6\u5907\u4efd\u4e86\u4ee3\u7801\u4ee5\u9632\u4e07\u4e00\uff0c\u6240\u4ee5\u7528\u4e86\u9519\u8bef\u7684\u4ee3\u7801\u6765\u6f14\u793a) \u6211\u6b64\u65f6\u5c31\u89c9\u5f97\u4e0d\u5bf9\u52b2\uff0c\u968f\u4fbf\u5f00\u4e86\u4e00\u4e2a\u6587\u4ef6\u770b\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u4e86\u8fd9\u6837\u7684\u4e1c\u897f\uff1a \u5f88\u597d\uff0c\u539f\u6765\u662f\u6211\u7684\u6587\u4ef6\u4e71\u7801\u4e86\uff0c\u770b\u8d77\u6765\u662f\u56e0\u4e3a\u6211\u5f53\u65f6\u590d\u5236\u5e76\u6ca1\u6709\u590d\u5236\u5b8c\u5168\uff0c\u7740\u6025\u7740\u8d70\uff0c\u76f4\u63a5\u62c9\u95f8\u65ad\u7535\u4e86\u3002 \u4e8e\u662f\u6709\u4e9b\u6587\u4ef6\u5c31\u6ca1\u6709\u62f7\u5b8c\u3002 \u4ed4\u7ec6\u5206\u6790\u53d1\u73b0\u4e00\u4e2a\u4e8b\u60c5\u662f\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u8fd9\u4e2a\uff0c\u6211\u7684 .git \u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u6709\u635f\u574f\u3002 \u4e8e\u662f\u6211\u5c1d\u8bd5\u4f7f\u7528 git reset --hard \uff0c\u7136\u540e git fetch \uff0c\u4e4b\u540e git pull \u628a\u8fdc\u7a0b\u7684\u4ee3\u7801\u62c9\u53d6\u4e0b\u6765\u3002 \u4e4b\u540e\u6211\u7ee7\u7eed\u7f16\u8bd1\u4e86\u4e00\u6b21\u3002 \u4ecd\u65e7\u662f\u8fd9\u4e2a\u95ee\u9898\u3002 \u7136\u540e\u6211\u5c31\u5728\u641c\u7d22\u5f15\u64ce\u91cc\u641c\u7d22\u4e86 \u5982\u4f55\u6062\u590d git \u7684\u6587\u4ef6 \u5148\u662f\u53d1\u73b0\u4e86 git fsck \u8fd9\u4e2a\u547d\u4ee4\uff0c\u4e8e\u662f\u6211\u4f7f\u7528\u5b83\u68c0\u67e5\u4e86\u6211\u7684 repo\uff1a \u53d1\u73b0\u4e86 git \u7684 \u6587\u6863 \uff0c\u9605\u8bfb\u4e4b\u540e\u5c1d\u8bd5\u4e86\u4e00\u4e0b\uff0c\u4f46\u662f\u4ecd\u65e7\u6ca1\u6709\u5375\u7528\u3002 \u7136\u540e\u6ce8\u610f\u5230\u8fd9\u91cc\u6709\u51e0\u53e5\u8bdd\uff1a \u6211\u63a8\u6d4b\u53ef\u80fd\u6700\u5927\u7684\u95ee\u9898\u662f\uff0c\u6709\u4e00\u4e9b commit \u6587\u4ef6\u4e22\u5931\u4e86\uff0c\u8fde\u5e26\u7740\u4e00\u4e9b\u6587\u4ef6\u7684 log\uff0c\u4e8e\u662f\u6211\u5148\u5c1d\u8bd5\u4e86\u76f4\u63a5\u4fee\u6539\u5b83\u63d0\u793a\u7684\u6587\u4ef6\uff0c\u8ba9 git \u91cd\u65b0\u521b\u5efa log\uff0c\u7136\u540e\u518d\u8fd0\u884c\uff0c\u53d1\u73b0\u6587\u4ef6\u540d\u53d8\u5316\u4e86\u3002 \u4e5f\u5c31\u662f\u8bf4\u4e0d\u6b62\u4e00\u4e2a\uff0c\u8fd9\u6837\u4e0b\u53bb\u4f1a\u6bd4\u8f83\u96be\u53d7\u7684\u3002 \u4e8e\u662f\u6211\u5c31\u7ee7\u7eed\u5bfb\u627e\u80fd\u591f\u89e3\u51b3\u95ee\u9898\u7684\u529e\u6cd5\u3002 \u518d\u6b21\u9605\u8bfb\u4e86\u6587\u6863\u4e4b\u540e\uff0c\u6211\u6709\u4e00\u4e2a\u60f3\u6cd5\uff0c\u4ed6\u8bf4\uff1a You can recover it the same way, by adding a branch that points to that SHA-1. \u4e5f\u5c31\u662f\u8bf4\uff0c\u5176\u5b9e git \u5e76\u6ca1\u6709\u4e22\u5931\u8fd9\u4e9b commit\uff0c\u53ea\u662f\u4ece branch \u91cc\u79fb\u9664\u4e86\uff08\u56e0\u4e3a\u6587\u4ef6\u7f3a\u5931\u5bfc\u81f4\u7684\u79fb\u9664\uff09 \u6240\u5e78\u8bb0\u5f55\u8fd9\u4e2a\u7684\u6587\u4ef6\u5e76\u6ca1\u6709\u4e22\u5931\u3002 \u6240\u4ee5\u6211\u6253\u7b97\uff0c\u628a\u8fd9\u4e9b\u4e22\u5931\u7684 commit \u5168\u90e8\u62c9\u51fa\u6765\uff0c\u76f4\u63a5\u5206\u522b\u4e22\u5230\u51e0\u4e2a branch \u4e0a\uff0c\u7136\u540e\u628a\u8fd9\u4e9b branch \u76f4\u63a5\u5408\u5e76\u5230\u6211\u7684\u672c\u5730 master \u5206\u652f\uff1a \u6240\u4ee5\u6211\u5148\u8fd0\u884c\u4e86 git log --pretty=oneline \u786e\u5b9e\u662f\u6709 commit \u4e22\u5931\u4e86\uff0c\u4e8e\u662f\u6211\u518d\u6b21\u8fd0\u884c\u4e86 git fsck \uff0c\u7136\u540e\u627e\u5230\u4e86\u8fd9\u4e9b dangling commit \uff1a \u4e4b\u540e\u6211\u65b0\u5efa\u4e86\u4e00\u4e9b branch\uff0c\u5148\u8bd5\u8bd5\u53ef\u4e0d\u53ef\u884c 1 2 git branch recover-branch-1 xxxx git branch recover-branch-2 yyyy \u8dd1\u4e00\u4e0b git branch \u68c0\u67e5\u4e00\u4e0b\uff1a \u7136\u540e\u5c31 git checkout \u9009\u62e9\u4e86 master \u5206\u652f \u5f88\u597d\uff0c\u4e0d\u80fd\u5408\u5e76\uff0c\u4e3a\u5565\u5462\uff0c\u4ed4\u7ec6\u9605\u8bfb\u4e4b\u540e\u53d1\u73b0\uff0c\u56e0\u4e3a\u67d0\u4e9b\u6587\u4ef6\u4e22\u5931\uff0c\u5bfc\u81f4\u8fd9\u4e9b commit \u4e5f\u90fd\u627e\u4e0d\u56de\u6765\u4e86\uff01fk\u3002 \u4e4b\u540e\u6211\u5c31\u6bd4\u8f83\u56f0\u60d1\uff0c\u4e0d\u77e5\u9053\u8be5\u548b\u529e\u6bd4\u8f83\u597d\u3002","title":"\u95ee\u9898"},{"location":"blog/2023-03-06/#_3","text":"\u6700\u540e\u6211\u53ea\u597d\u4f7f\u7528\u4e0b\u7b56 git clone \uff0c\u8fd9\u4e2a\u672c\u6765\u6700\u5f00\u59cb\u5c31\u60f3\u5230\u4e86\uff0c\u4f46\u662f\u6211\u60f3\u7740\uff0c\u8fd9\u6bd5\u7adf\u662f\u5728 Onedrive \u6587\u4ef6\u5939\u4e0a\u641e\uff0c\u641e\u51fa\u4e8b\u4e86\u5230\u65f6\u5019\u6211\u672c\u5730\u6570\u636e\u4e5f\u6ca1\u4e86\u3002 \u4f46\u662f\u4ed4\u7ec6\u4e00\u60f3\uff0c\u8fd9TM\u4e0d\u662f\u8fd8\u6709 git repo \u5417\uff0c\u5c31\u7b97\u6389\u4e86\uff0c\u8fdc\u7aef\u670d\u52a1\u5668\u4e0a\u8fd8\u6709\u4e1c\u897f\u5462\uff01\u76f4\u63a5\u590d\u5236\u4e00\u4e0b\uff0c\u5b9e\u5728\u4e0d\u884c\u91cd\u65b0 remote \u90fd\u597d\u554a\uff01 \u4e8e\u662f\u4e3a\u4e86\u4fdd\u9669\uff0c\u6211\u628a\u5df2\u7ecf\u5904\u7406\u5230\u8fd9\u6b65\u7684\u4e24\u4e2a repo\uff08\u5305\u542b\u5173\u7cfb\uff09\u4e22\u8fdb\u4e86\u522b\u7684\u6587\u4ef6\u5939\uff0c\u7136\u540e\u5206\u522b clone\uff0c\u66b4\u529b\u56de\u9000\u5230\u6211\u6628\u5929\u665a\u4e0a\u7684\u7248\u672c\uff08\u5e78\u597d\u6211\u5f53\u65f6\u4e24\u4e2a repo \u90fd\u5df2\u7ecf\u4e0a\u4f20\u4e86\uff0c\u53ea\u662f onedrive \u6ca1\u66f4\u65b0\u800c\u5df2\uff09 \u518d\u6b21\u7f16\u8bd1\uff0c\u6210\u529f\u4e86\uff01","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"blog/2023-03-06/#_4","text":"\u6211\u662f shaber\u3002 \u4e0d\u8fc7 Onedrive \u7684\u8fd9\u4e2a\u95ee\u9898\u786e\u5b9e\u662f\u5f88\u4ee4\u6211\u5934\u75bc\uff0c\u4f46\u662f\u6211\u672c\u8eab\u5df2\u7ecf\u5f88\u4ee5\u6765\u57fa\u4e8e\u5fae\u8f6f\u751f\u6001\u7684\u4e00\u7cfb\u5217\u4ea7\u54c1\u4e86\uff0c\u540c\u6b65\u529f\u80fd\u786e\u5b9e\u597d\u7528\uff0c\u4e5f\u4e0d\u7528\u9891\u7e41\u7ffb\u5899\uff0ctodo \u7528\u7740\u4e5f\u5f88\u8212\u670d\u3002 \u6240\u4ee5\u6211\u6253\u7b97\u53bb report \u4e00\u4e0b\u8fd9\u4e2a bug\uff0c\u76ee\u524d\u5148\u5c06\u5c31\u7740\u7528\uff0c\u5177\u4f53\u89e3\u51b3\u5c31\u662f\uff0c\u65e2\u7136 OneDrive \u5bf9\u8fc7\u591a\u6587\u4ef6\u540c\u6b65\u4e0a\u4f20\u901f\u5ea6\u592a\u6162\uff08\u6211\u731c\u6d4b\u662f\u8981\u8bb0\u5f55\u4e00\u4e9b\u6742\u4e03\u6742\u516b\u7684\u4e1c\u897f\uff08\u4f46\u4e0d\u81f3\u4e8e\u8fd9\u4e48\u6162\u5427\uff09\uff09\uff0c\u90a3\u6211\u5c31\u5148\u53ea\u5728\u5927\u673a\u623f\u7535\u8111\u4e0a\u6539\u3002 \u7136\u540e\u540c\u6b65\u5b8c\u4e4b\u540e\u5728\u53e6\u5916\u4e00\u4e2a\u673a\u623f\u7684\u4e3b\u673a\u4e0a\u7f16\u8bd1\uff0c\u7136\u540e\u4e0a\u4f20\u5c31\u7b49\u90a3\u8fb9\u4e0a\u4f20\u5c31\u884c\uff0c\u53cd\u6b63\u90a3\u8fb9\u4e0d\u65ad\u7535\u3002","title":"\u603b\u7ed3"},{"location":"blog/2023-03-06/#_5","text":"\u597d\u9ebb\u70e6\u2026\u2026\u2026\u2026\u2026\u2026 \uff08\u89e3\u51b3\u95ee\u9898\u4e4b\u540e\uff1a\uff09 \u4eca\u5929\u665a\u4e0a\u53d1\u73b0\u4e00\u4e2a\u4e8b\u60c5\uff0c\u5982\u679c onedrive \u4e0d\u540c\u6b65\u4e86\uff0c\u53ef\u4ee5\u8003\u8651\u526a\u5207\u4e4b\u540e\u5728\u79fb\u52a8\u56de\u6765\u3002 \u8fd9\u6837 OneDrive \u5c45\u7136\u5c31\u4f1a\u66f4\u65b0\u4e86\uff01\uff08\u53ea\u5bf9 .git \u8bd5\u9a8c\u4e86\u4e00\u4e0b\uff0c\u5982\u679c\u90fd\u53ef\u4ee5\u6211\u4f1a\u5355\u72ec\u53d1\u4e00\u7bc7 blog\uff09","title":"\u540e\u8bb0"},{"location":"misc/","text":"\u8fd9\u91cc\u5927\u6982\u662f\u653e\u4e00\u4e9b\u968f\u8bb0\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002 \u7136\u540e\u5982\u679c\u4f60\u662f\u8981\u627e\u4e00\u4e9b\u8d44\u6e90\u5c31\u770b\u4e0b\u9762\uff1a ZJK \u7237\u7237 2022 \u5e74\u7684\u96c6\u8bad\u961f\u8bba\u6587 \u7ed9\u5b66\u5f1f\u5199\u7684\u5355\u8c03\u961f\u5217\u4f18\u5316 dp \u8bb2\u7a3f \u7ed9\u5b66\u5f1f\u5199\u7684\u671f\u671b & \u6982\u7387\u8bb2\u7a3f","title":"Index"},{"location":"misc/CSP2020/","text":"day 0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4eca\u5929\u738b\u8001\u5728\u73ed\u4e0a\u7ed9\u6211\u4eec\u8fd9\u4e9bOIer\u9f13\u52b1\u4e86\u4e00\u4e0b\u2026\u2026 \u5012\u662f\u8bf4\u51fa\u4e86\u5f88\u591a\u6211\u4eec\u4f5c\u4e3aOIer\u7684\u75db\u2026\u2026 \u6211\u9664\u4e86whk\u4e0d\u597d\u5e94\u8be5\u6ca1\u6709\u4ec0\u4e48\u5427\uff1f \u5934\u4e00\u6b21\u665a\u81ea\u4e60\u53ef\u4ee5\u5b8c\u5168\u5728\u673a\u623f\u4e86\u2026\u2026 \u5168\u673a\u623f \u88ab\u4e09\u4e2a\u5927\u4f6c\uff08PWK\uff0cLLT\uff0cYL\uff09jc\u4e86 day 1 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e0a\u5348\u53bb\u8003tg\uff0c\u5728\u9ad8\u4e2d\u90e8\u9047\u89c1\u4e86\u96c6\u8bad\u961f\u5de8\u4f6cZJK\u3002 %\u4e00\u53d1\u589e\u52a0RP\u3002 \u5230\u4e86\u8003\u573a\uff1a\u8bf6\u4eca\u5e74\u8fd8\u633a\u4e00\u822c\u7684\uff1f \u4f46\u662f\u5f53\u6211\u770b\u5230\u4e86\u7b2c\u4e09\u9898\u2026\u2026 \u8349\u8fd9\u9ebb\u98ce\u597d\u81ed\u554a\u554a\u554a \u60a8 #include<queue>\u8fd8\u624b\u6253queue\uff1f \u795eTM O(n) \u7684\u624b\u5199map\u3002 \u4ec0\u4e48\u4e1c\u897f\u2026\u2026 \u51fa\u8003\u573a\u95ee\u4e86LLT\uff0c\u6709\u9053\u9898\u900968\u2026\u2026\u6211\u50bb\u4e86\u2026\u2026 \u539f\u6765\u662f\u6211\u53cd\u6bd4\u4f8b\u51fd\u6570\u753b\u9519\u4e86\u2026\u2026 \u6211\u5c45\u7136\u5fd8\u4e86DIj\u65e0\u4f18\u5316\u590d\u6742\u5ea6\u662fn\u65b9\u2026\u2026 \u7136\u540eCCF\u6284\u4e8609\u5e74\u7684\u539f\u9898\uff08\u540e\u7f00\u8868\u8fbe\u5f0f\uff09 \u4e0b\u5348pj\u7684\u65f6\u5019\u4eba\u591a\u5230\u7206\u2026\u2026 \u672c\u4ee5\u4e3apj\u4f1a\u7b80\u5355\u4e00\u70b9\u2026\u2026 \u4f46\u662f\u9605\u8bfb\u7a0b\u5e8f\u9898\u600e\u4e48\u8fd9\u4e48\u6076\u5fc3\u554a\u554a\u554a \u8981\u9000\u5f79\u4e86 /kel day 1.5 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5927\u6982\u662f\u9000\u5f79\u4e86\u5427\u2026\u2026 \u8981\u5f00\u59cbwhk\u4e86\u3002 \u5bf9OI\u8bf4\u518d\u89c1\u4e86\u2026\u2026 day 1.9 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6210\u7ee9\u4e0b\u6765\u4e86\u3002 pj\u548ctg\u4f3c\u4e4e\u52c9\u5f3a\u5361\u8fc7\u7ebf\u2026\u2026 \u590d\u6d3b\u4e86\u3002 \u673a\u623f\u7684\u6240\u6709\u4eba\u90fd\u6bd4\u6211\u9ad8\uff0c\u6240\u4ee5\u6211\u6700\u83dc\u3002 csp-2\u52a0\u6cb9\u3002 extra \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u6b21\u662f\u771f\u7684\u6076\u5fc3\uff0cSC\u7684\u5206\u6570\u7ebf\u600e\u4e48\u548c\u6d59\u6c5f\u5dee1\u5206\u2026\u2026\u88ab\u5361\u6389\u4e86\u3002 \u7136\u540e\uff0c\u548cCSP-2020\u8bf4\u518d\u89c1\u4e86\u3002 \u518d\u89c1\u4e86\u3002 \u51c6\u786e\u8bf4\uff0c\u662f\u548cOI\u8bf4\u518d\u89c1\u4e86\u3002 \u518d\u89c1\u4e86\u3002 \u518d\u89c1\u4e86\u2026\u2026 \u9644 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e00\u5e74\u540e\u6765\u770b\u8fd9\u4e2a\uff0c\u611f\u89c9\u5c31\u662f\u9ed1\u5386\u53f2\u554a\u3002 \u4e0d\u8fc7\u73b0\u5728\u4e5f\u81ea\u5236\u529b\u6781\u5dee\u2026\u2026 \u6211\u9700\u8981\u8715\u53d8","title":"CSP2020"},{"location":"misc/CSP2020/#day-0","text":"\u4eca\u5929\u738b\u8001\u5728\u73ed\u4e0a\u7ed9\u6211\u4eec\u8fd9\u4e9bOIer\u9f13\u52b1\u4e86\u4e00\u4e0b\u2026\u2026 \u5012\u662f\u8bf4\u51fa\u4e86\u5f88\u591a\u6211\u4eec\u4f5c\u4e3aOIer\u7684\u75db\u2026\u2026 \u6211\u9664\u4e86whk\u4e0d\u597d\u5e94\u8be5\u6ca1\u6709\u4ec0\u4e48\u5427\uff1f \u5934\u4e00\u6b21\u665a\u81ea\u4e60\u53ef\u4ee5\u5b8c\u5168\u5728\u673a\u623f\u4e86\u2026\u2026 \u5168\u673a\u623f \u88ab\u4e09\u4e2a\u5927\u4f6c\uff08PWK\uff0cLLT\uff0cYL\uff09jc\u4e86","title":"day 0"},{"location":"misc/CSP2020/#day-1","text":"\u4e0a\u5348\u53bb\u8003tg\uff0c\u5728\u9ad8\u4e2d\u90e8\u9047\u89c1\u4e86\u96c6\u8bad\u961f\u5de8\u4f6cZJK\u3002 %\u4e00\u53d1\u589e\u52a0RP\u3002 \u5230\u4e86\u8003\u573a\uff1a\u8bf6\u4eca\u5e74\u8fd8\u633a\u4e00\u822c\u7684\uff1f \u4f46\u662f\u5f53\u6211\u770b\u5230\u4e86\u7b2c\u4e09\u9898\u2026\u2026 \u8349\u8fd9\u9ebb\u98ce\u597d\u81ed\u554a\u554a\u554a \u60a8 #include<queue>\u8fd8\u624b\u6253queue\uff1f \u795eTM O(n) \u7684\u624b\u5199map\u3002 \u4ec0\u4e48\u4e1c\u897f\u2026\u2026 \u51fa\u8003\u573a\u95ee\u4e86LLT\uff0c\u6709\u9053\u9898\u900968\u2026\u2026\u6211\u50bb\u4e86\u2026\u2026 \u539f\u6765\u662f\u6211\u53cd\u6bd4\u4f8b\u51fd\u6570\u753b\u9519\u4e86\u2026\u2026 \u6211\u5c45\u7136\u5fd8\u4e86DIj\u65e0\u4f18\u5316\u590d\u6742\u5ea6\u662fn\u65b9\u2026\u2026 \u7136\u540eCCF\u6284\u4e8609\u5e74\u7684\u539f\u9898\uff08\u540e\u7f00\u8868\u8fbe\u5f0f\uff09 \u4e0b\u5348pj\u7684\u65f6\u5019\u4eba\u591a\u5230\u7206\u2026\u2026 \u672c\u4ee5\u4e3apj\u4f1a\u7b80\u5355\u4e00\u70b9\u2026\u2026 \u4f46\u662f\u9605\u8bfb\u7a0b\u5e8f\u9898\u600e\u4e48\u8fd9\u4e48\u6076\u5fc3\u554a\u554a\u554a \u8981\u9000\u5f79\u4e86 /kel","title":"day 1"},{"location":"misc/CSP2020/#day-15","text":"\u5927\u6982\u662f\u9000\u5f79\u4e86\u5427\u2026\u2026 \u8981\u5f00\u59cbwhk\u4e86\u3002 \u5bf9OI\u8bf4\u518d\u89c1\u4e86\u2026\u2026","title":"day 1.5"},{"location":"misc/CSP2020/#day-19","text":"\u6210\u7ee9\u4e0b\u6765\u4e86\u3002 pj\u548ctg\u4f3c\u4e4e\u52c9\u5f3a\u5361\u8fc7\u7ebf\u2026\u2026 \u590d\u6d3b\u4e86\u3002 \u673a\u623f\u7684\u6240\u6709\u4eba\u90fd\u6bd4\u6211\u9ad8\uff0c\u6240\u4ee5\u6211\u6700\u83dc\u3002 csp-2\u52a0\u6cb9\u3002","title":"day 1.9"},{"location":"misc/CSP2020/#extra","text":"\u8fd9\u6b21\u662f\u771f\u7684\u6076\u5fc3\uff0cSC\u7684\u5206\u6570\u7ebf\u600e\u4e48\u548c\u6d59\u6c5f\u5dee1\u5206\u2026\u2026\u88ab\u5361\u6389\u4e86\u3002 \u7136\u540e\uff0c\u548cCSP-2020\u8bf4\u518d\u89c1\u4e86\u3002 \u518d\u89c1\u4e86\u3002 \u51c6\u786e\u8bf4\uff0c\u662f\u548cOI\u8bf4\u518d\u89c1\u4e86\u3002 \u518d\u89c1\u4e86\u3002 \u518d\u89c1\u4e86\u2026\u2026","title":"extra"},{"location":"misc/CSP2020/#_1","text":"\u4e00\u5e74\u540e\u6765\u770b\u8fd9\u4e2a\uff0c\u611f\u89c9\u5c31\u662f\u9ed1\u5386\u53f2\u554a\u3002 \u4e0d\u8fc7\u73b0\u5728\u4e5f\u81ea\u5236\u529b\u6781\u5dee\u2026\u2026 \u6211\u9700\u8981\u8715\u53d8","title":"\u9644"},{"location":"misc/CSP2021/","text":"CSP J/S 2021 \u6e38\u8bb0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8bf4\u660e\uff1a \u03c8(\uff40\u2207\u00b4)\u03c8 Day -10 ~ Day-1 \u5747\u4e3a\u521d\u8d5b\u524d Day 0 \u4e3a\u521d\u8d5b Day 0.01 ~ 0.99 \u4e3a\u590d\u8d5b\u524d,\u5176\u4e2d Day 0.33 \u4e3a 9.29 \u5373\u4e3a\u521d\u8d5b\u6210\u7ee9\u516c\u5e03\u5f53\u5929 Day 1 \u4e3a\u590d\u8d5b Day -5 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6700\u8fd1\u53d8\u6545\u5b9e\u5728\u592a\u591a\u4e86\uff0c\u611f\u89c9\u4eba\u6709\u70b9\u9ebb\u3002 \u5b66\u6821\u4e00\u6b21 \u7edf\u4e00 \u51c6\u5907\u521d\u8d5b\uff0c\u505a\u4e86\u597d\u51e0\u5957\u6a21\u62df\uff0c\u6211\u8fd8\u5199\u4e86\u4e00\u4e2a \u521d\u8d5b\u77e5\u8bc6\u70b9 - black_trees - \u535a\u5ba2\u56ed (cnblogs.com) \u611f\u89c9\u521d\u8d5b\u597d\u96be\u554a\uff01\u5e0c\u671b\u4eca\u5e74\u4e0d\u8981\u88ab\u5361\u4e86qwq\u3002 \u6211\u6682\u65f6\u653e\u4e0b\u590d\u8d5b\u53bb\u51c6\u5907\u521d\u8d5b\uff0c\u65e0\u610f\u95f4\u53d1\u73b0\u8fd9\u4e2a\u5bf9\u590d\u8d5b\u8fd8\u633a\u6709\u5e2e\u52a9\uff1f \u5370\u8c61\u6bd4\u8f83\u6df1\u7684\u4e00\u9898\u662f \\(g(x)=(g(x-1)\\times2002 + g(x-2)\\times 2003) \\text{mod} \\ 2005\\) \uff0809 TG\uff09 \u5f53\u65f6\u6bdb\u6839\u513f\u8bb2\u7684\u65f6\u5019\u5fd8\u8bb0\u600e\u4e48\u505a\u4e86\uff0c\u4e8e\u662f\u8bf7\u4e86\u4f73\u8001\u5e08\u8fc7\u6765\uff0c\u76f4\u63a5\u4e00\u4e2a\u8d39\u9a6c\u5c0f\u5b9a\u7406\u79d2\u6740\uff08orz \u73b0\u5728\u624b\u4e0a\u8fd8\u6709\u4e00\u4e2a LGR2021 SCP \u521d\u8d5b\u6a21\u62df\u548c\u67d0\u4eae\u7684\u6a21\u62df\uff08\u636e\u8bf4HL\u90a3\u5957ZJK\u7ffb\u8f66\u4e86 \u8fd8\u6709\u4e2a\u5dee\u4e09\u9898\u7684 LGR2020 CSP \u521d\u8d5b\u6a21\u62df\u3002 \u6211\u7684 ShooTing Game II \u90a3\u9898\u56e0\u4e3a\u7a81\u7136\u51fa\u73b0\u7684 ZR NOIP\u5341\u8fde\u6d4bDay2T2 \u88ab\u6bd9\u4e86\uff0c\u4e8e\u662f\u4ecepbqd\u7684CFR\u4e0a\u64a4\u4e0b\u6765\u4e86\u3002 \u4e0d\u8fc7\u6ca1\u5173\u7cfb\uff0c\u4e4b\u540e\u6709\u597d\u9898\u8fd8\u53ef\u4ee5\u653e\uff0c\u800c\u4e14CF\u7684 Coauthor \u8fd8\u662f\u6709\u6211\u3002 \u8fd9\u9898\u5c31\u6254\u53bb\u548c xzq \u4e00\u8d77\u51fa\u7684mn\u8d5b\u4e86\uff0c\u4e0d\u8fc7\u542c\u8bf4\u8981\u5148\u7ed9\u6559\u7ec3\u7ec4\u770b\u4e00\u770b\u3002 \u53e6\u5916\u5b66\u6821\u91cc\u7684\u5404\u79cd\u7533\u5fc5\u4eba\u5bfc\u81f4\u7684\u65f6\u95f4\u5c31\u5148\u4e0d\u63d0\u4e86\u3002 \u53cd\u6b63\u5404\u79cd\u4e8b\u60c5\u90fd\u7406\u4e86\u4e00\u4e0b\uff0c\u73b0\u5728\u6700\u5927\u7684\u95ee\u9898\u662f\u5468\u516d\u80fd\u4e0d\u80fd\u7559\u6821\uff0c\u5982\u679c\u4e0d\u80fd\u5c31\u53ea\u80fd\u53bbxzq\u5bb6\u501f\u5bbf\u4e86\u3002 \u5148\u5199\u5230\u8fd9\u513f\uff0c\u7761\u4e86\u3002 Day -2 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6700\u8fd1\u5929\u5929\u90fd\u5728\u4e0a\u8bfe\u4e0b\u8bfewhk\u7684\u751f\u6d3b\u5f53\u4e2d\u5ea6\u8fc7\uff0c\u5c31\u53ea\u662f\u4e3a\u4e86\u521d\u8d5b\u632a\u4e00\u70b9\u65f6\u95f4\u3002 \u8bb0\u5f97\u505a\u4e86\u4e00\u4e2a\u7279\u522b\u79bb\u8c31\u7684\u5377\u5b50\uff0c\u628a\u4eca\u5e74NOI Day1T1 \u62ff\u8fc7\u6765\u5f53\u5b8c\u5584\u7a0b\u5e8f\u3002 \u4e0d\u4f1a\u6811\u5256\u6240\u4ee5\u9519\u4e86\u4e00\u4e2a x.r==y.l \uff0c\u7136\u540e\u5c31\u53bb\u5199STGII\u7684std\u4e86\u3002 \u7136\u540e\u5199\u7740\u5199\u7740\u53d1\u73b0\u8fd9\u73a9\u610f\u513f\u6839\u672c\u4e0d\u53ef\u4ee5\u653e\u5728PJ&TG\u6a21\u62df\u4e0a\uff0c\u4e8e\u662f\u53ea\u80fd\u64a4\u4e0b\u53bb\u3002 \u505a\u521d\u8d5b\u9898\u7684\u65f6\u5019\u53c8\u60f3\u5230\u4e00\u4e2a\u6bd4\u8f83\u597d\u73a9\u7684DS\uff0c\u51c6\u5907\u8003\u5b8c\u4e4b\u540e\u5199 description \u548c std\u3002 C\u8001\u5e08\u8bf4\u660e\u665a\u548c\u540e\u5929\u65e9\u4e0a\u5b66\u6821\u90fd\u83ab\u5f97\u996d\u6070\uff0c\u4e8e\u662f\u8ba9xzq\u5e2e\u5e26\u4e86\u4e00\u6876\u6ce1\u9762\u3002 \u4ed6\u8d70\u4e4b\u540e\u6211\u624d\u60f3\u8d77\u6765\u53ef\u4ee5\u53bb\u4ed6\u5bb6\u5ad6\u4e00\u987f\uff0c\u4e0d\u8fc7\u8fd9\u6837\u4e5f\u8bb8\u4e0d\u592a\u597d\u3002 \u5728\u5bdd\u5ba4\u9047\u5230\u4e86\u6628\u5929\u8ba4\u8bc6\u7684\u5927\u54f2\u5b66\u5bb6\uff0c\u4ed6\u8bf4\u4ed6\u53eb\u5764\u2642\u5764\uff0c\u60f3\u548c\u6211\u4ea4\u2642\u4e2a\u670b\u53cb\u3002 \u6211\u6beb\u4e0d\u72b9\u8c6b\u5730\u540c\u2642\u610f\u4e86\uff08\uff08\uff08 Day -1 \u03c8(\uff40\u2207\u00b4)\u03c8 918\u2026\u2026 \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026 \u65e9\u4e0axzq\u628a\u6ce1\u9762\u62ff\u7ed9\u6211\u7684\u65f6\u5019\uff0c\u8bf4\u8d85\u5e02\u4e70\u4e00\u9001\u4e00\uff08 \u5e26\u7ecf\u6d4e\u5b66\u5bb6HHZ\u770b\u5230\u4e4b\u540e\u8ba4\u4e3a\u80af\u5b9a\u662f\u8981\u8fc7\u671f\u7684\u624d\u4e70\u4e00\u9001\u4e00\uff0c\u6211\u89c9\u5f97\u4e5f\u662f\u3002 \uff08\u4e2d\u5348\u5403\u7684\u65f6\u5019\u518d\u770b\u770b\u5427\u3002 \u4e0b\u5348\u6536\u5230\u4e86\u4e00\u4e9b\u6d88\u606f\uff0c\u5927\u6982\u662f\u5bf9\u4e8e\u67d0\u4e2a\u9762\u5b50\u5de5\u7a0b\u7684\u4e00\u4e9b\u8c03\u6574dc \u56e0\u4e3a\u6211\u4eec\u5728\u98ce\u53e3\u6d6a\u5c16\u4e0a\uff0c\u5e38\u5e74\u88ab\u91cd\u70b9\u5173\u6ce8\uff0c\u6240\u4ee5\u73b0\u5728\u5468\u516d\u5148\u4e0d\u4e0a\u8bfe\uff0c\u7136\u540e\u628a\u5468\u5185\u7684\u65f6\u95f4\u538b\u7f29\u4e00\u4e0b\u3002 \u628a\u5468\u516d\u7684\u8bfe\u538b\u8fc7\u53bb\uff0c\u81f3\u4e8e\u665a\u81ea\u4e60\uff0c\u7b49\u98ce\u58f0\u8fc7\u53bb\u4e86\uff0c\u642c\u4e86\u6559\u5ba4\u6362\u4e86\u5bdd\u5ba4\u4e4b\u540e\u5c31\u4f1a\u6162\u6162\u8c03\u56de\u539f\u6765\u7684\u65f6\u95f4\u3002 \u4e0d\u8fc7\u548c\u9a6c\u4e0a\u5c31\u4f1a\u505c\u8bfe\u7684\u6211\u53c8\u5565\u5927\u5173\u7cfb\u5462\uff08\u7b11\uff09\uff1f \u53bb\u673a\u623f\u4e4b\u524d\u5f97\u5230\u4e86\u5176\u4ed6\u7ade\u8d5b\u4eba\u7684\u795d\u798f\uff0c\u611f\u89c9\u633a\u5c2c\u7684233 \u665a\u4e0a\u548cczh\u8fd8\u6709xyh\u51fa\u53bb\u6070\u4e86\u4e2a\u732a\u6392\u5b9a\u98df\u8fd8\u662f\u5496\u55b1\u996d\u6765\u7740\u3002 \u665a\u4e0a\u8003\u4e86\u4e00\u4e2a\u6bdb\u7237\u7b49\u795e\u4ed9\u4e00\u8d77\u51fa\u7684\u521d\u8d5b\u6a21\u62df\uff08\u636e\u8bf4\u6070\u4e861000RMB\uff0c\uff09\u8003\u7684\u8fd8\u884c\u3002 \u987a\u4fbf\u628a PalindL \u90a3\u9898\u7684EH ver \u7b80\u5355\u5199\u4e86\u4e00\u4e0b\u6254\u51fa\u9898\u7ec4\u91cc\u4e86\u3002 \u56de\u5bdd\u5ba4\u4e4b\u540e\u548czyl\u4ee5\u53calsl\u8ba8\u8bba\u4e86\u4e00\u4e0b\u67d0\u4e2a\u795e\u5947DS\u7684\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u505a\u6cd5\u3002 \u7136\u540e\u624d\u60f3\u8d77\u6765\u6211\u4e3b\u5e2d\u6811\u7684\u7b14\u8bb0\u6ca1\u5199\uff08\uff0c\u5c31\u987a\u624b\u6254todo\u91cc\u4e86\u3002 \u5199\u4e0b\u8fd9\u4e9b\u7684\u65f6\u5019\u5916\u9762\u4e0b\u7740\u96e8\uff0c\u5b66\u6821\u91cc\u53ea\u5269\u4e86OIer\uff0c \u4e0d\u7981\u89c9\u5f97\u8fd9\u624d\u662f\u6211\u8981\u7684\u751f\u6d3b\u554a\u3002 \u8ba8\u8bba\u8ba8\u8bba\u9898\uff0c\u6253\u6253\u6bd4\u8d5b\u8fb1\u9a82\u51fa\u9898\u4eba\uff0c\u51fa\u51fa\u6bd4\u8d5b\u5361\u7206\u4e00\u5806\u4eba\uff0c\u4eab\u53d7\u8fd9OIer\u7684\u5b81\u9759\u3002 \u5e0c\u671b\u5b83\u80fd\u966a\u6211\u8d70\u5230\u9ad8\u4e8c\u3002 \u6211\u5df2\u7ecf\u4e24\u5e74\u88ab\u521d\u8d5b\u5361\u4e86\uff0c\u6211\u4e0d\u60f3\u518d\u51fa\u4ec0\u4e48\u95ee\u9898\u4e86\u3002 Day 0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u65e9\u4e0a\u6821\u95e8\u53e3\u96c6\u5408\uff0c\u53d1\u73b0mjc\u4ed6\u51c6\u5907\u51fa\u53bb\u6070\u996d\u56e0\u4e3a\u6ca1\u8001\u5e08\u88ab\u62e6\u4e86\uff08 \u770b\u89c1\u8f66\u4ee5\u4e3a\u662f\u81ea\u5df1\u4eba\uff0c\u7ed3\u679c\u662f\u7269\u7406\u7ade\u8d5b\u7684\uff0c\u8fd8\u56e0\u4e3a\u4ed6\u4eec\u7684\u8863\u670d\u4e4b\u7c7b\u7684\u5947\u602a\u89c4\u5b9a\u88ab\u83ab\u540d\u5176\u5999\u9a82\u4e86\u4e00\u987f\uff0c \u7136\u540e\u718a\u6821\u6700\u540e\u624d\u77e5\u9053\u6211\u4eec\u4e0d\u662f\u7269\u7406\u7ade\u8d5b\u662f\u4fe1\u606f\u7684\uff08 \u4f9d\u60ef\u4f8b\uff0c\u53bb\u7684\u8def\u4e0a\u6574\u4e86\u70b9\u5927\u6d3b\u3002 \u4e0d\u8fc7\u5230\u4e86\u4e4b\u540e\u53d1\u73b0\u662f\u6811\u5fb7\u5149\u534e\uff0c\u4f3c\u4e4e\u53ef\u4ee5\u548c HMP_Haoge \u9762\u57fa\uff1f \u8fdb\u53bb\u4e4b\u540e\u53d1\u73b0\u4e00\u5927\u5806\u4eba\u5728\u5217\u9635\uff0c\u6211\u8ba4\u4e3a\u8003\u524d\u5217\u9635\u80fd+rp\uff0c\u4e8e\u662f\u5c31\u52a0\u5165\u4e86\u3002 \u62ff\u5230\u8bd5\u5377\u53d1\u73b0\u6bd4\u6628\u665a\u90a3\u4e2a\u9634\u95f4\u6a21\u62df\u8fd8\u9634\u95f4\uff01\uff08Base64\u6211\u8bf4\u7684\u5c31\u662f\u4f60\u548c\u56db\u6bdb\u5b50 \u8001\u5957\u8def\u5148\u628a\u4f1a\u505a\u7684\u505a\u4e86\uff0c\u7136\u540e\u6162\u6162\u63a8\u3002 \u82f9\u679c\u90a3\u9898\u6ca1\u53d1\u73b0\u662f\u4e2a Fibb\uff0c\u76f4\u63a5\u8bbe\u4e86\u4e00\u4e2a\u51fd\u6570 Q(n,m) \u63a8\u4e86\u4e00\u4e0b\u5c31\u7b97\u51fa\u6765\u4e86\u3002 \u7403\u90a3\u9898\u4ee5\u4e3a\u662f\u6c42\u5e76\uff0c\u4f46\u662f\u6ca1\u53d1\u73b0\u67090. Base64\u5b8c\u5168\u4e0d\u4f1a\uff0c\u53ea\u80fd\u7528\u4e00\u4e9b\u7384\u5b66\u6280\u5de7\u505a\u4e86\uff0c\u4f46\u662f\u6ca1\u770b\u89c1HelloWorld\u7684 W \u5927\u5199\u4e86 \u56db\u6bdb\u5b50\u72b9\u8c6b\u5f88\u4e45\uff0c\u7a81\u7136\u60f3\u8d77\u6bdb\u6839\u513f\u4ee5\u524d\u8bb2\u8fc7\u7c7b\u4f3c\u7684qry\uff0c\u5c31\u505a\u4e86\u3002 \u4e0b\u6765\u5bf9\u5404\u8def\u795e\u4ed9\u7684\u6837\u5b50\uff0c\u89c9\u5f97\u662f72.5\u7684\u6837\u5b50\uff0c\u5e94\u8be5\u80fd\u8fc7qwq\u3002 \u4e2d\u5348\u548c\u5927\u5bb6\u4e00\u8d77\u6070\u9762\u987a\u4fbf\u8ba8\u8bba\uff0c\u633a\u5feb\u4e50\u7684\u3002 \u4e0b\u5348\u542c\u8bf4\u90a3\u4f4d cja \u8981\u8fc7\u6765\uff0c\u795d\u4ed6\u597d\u8fd0\u3002 \u8fdb\u53bb\u5c31\u968f\u4fbf\u505a\u4e86\u4e00\u4e0b\u3002 \u51fa\u6765\u611f\u89c9\u6211\u5e94\u8be5\u6ca1\u5565\u95ee\u9898\u3002 \u7ed3\u679c\u56de\u5bb6\u4e00\u5bf9\u7b54\u6848\uff0c\u597d\u5bb6\u4f19\uff0cJ\u548cS \u90fd\u662f 64pts\uff0cPJ\u6302\u4e8615\u5206\u50bb\u903c\u5206\u545c\u545c\u545c\u3002 \u7136\u540e\u6211\u5c31\u4e00\u76f4\u7279\u522b\u7126\u8651\uff0c\u548c\u8001\u7238\u6253\u4e86\u4e2a\u7535\u8bdd\uff0c\u4e0d\u77e5\u9053\u600e\u4e48\u5e73\u590d\u5fc3\u6001\uff0c\u540e\u6765\u60f3\u8d77\u795d\u8001\u8bf4\u7684 \u4eca\u5e74\u9898\u96be\uff0c\u800c\u4e14\u4eba\u591a\uff0c\u53c8\u4e0d\u4f1a\u51cf\u673a\u5b50\uff0c\u5206\u6570\u7ebf\u80af\u5b9a\u4f1a\u4e0b\u964d \u5e0c\u671b\u662f\u5427\u3002 \u7136\u540e\u6211\u89c9\u5f97tg \u5e94\u8be5\u80fd\u8fc7\uff0cpj\u6709\u70b9\u90a3\u4e2a\uff08\u4e0d\u4f1a\u6211\u8fd9\u8f88\u5b50\u5c31\u6253\u4e0d\u6210pj\u4e86\u5427\u2026\u2026 \u53bbfst\u7fa4\u91cc\u95ee\u4e86\u4e00\u4e0b\u53d1\u73b0\u6709\u6bd4\u6211\u66f4\u60e8\u7684\u2026\u2026\u90a3\u6211\u4e5f\u4e0d\u503c\u5f97\u653e\u5f03\u554a\u3002 \u6211\u63a5\u53d7\u4e86\uff0c\u6211\u5982\u679c\u771f\u7684J\u6216\u8005S\u7684\u521d\u8d5b\u6302\u4e86 \u90a3\u5c31\u6765\u5e74\u518d\u6218\uff0c\u6709\u4eba\u5df2\u7ecf\u7b49\u4e86\u4e09\u5e74\u90fd\u6ca1\u8bf4\u4ec0\u4e48\uff0c\u6211\u6709\u5565\u597d\u8bf4\u7684\u5462 \u8a66\u9a13\u306b\u5408\u683c\u3057\u306a\u3051\u308c\u3070,\u3058\u3083\u3042\u3001\u3082\u3046\u4e00\u5e74\u5f85\u3064. 3\u5e74\u3082\u5f85\u3063\u3066\u3044\u308b\u4eba\u3082\u3044\u307e\u3059,\u79c1\u3082\u6587\u53e5\u3092\u8a00\u3046\u5fc5\u8981\u306f\u306a\u3044. \u673a\u4e0a\u306e\u7a7a\u8ad6\u306f\u7121\u7528\u3060\u3001\u99ac\u9e7f. \u6211\u5e0c\u671b\u4e0d\u8981\u5230\u6b64\u4e3a\u6b62\u3002 Day 0.33 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5206\u51fa\u4e86\uff0ctg 63\uff0cpj 61\u3002 \u5206\u6570\u7ebf\u7684\u8bdd\uff1atg 50, pj 62 \uff08\u666e\u53ca\u53c8\u540a\u7ebf\u4e86\uff09 \u4f46\u662f\u6240\u5e78\uff0c\u5b66\u6821\u8fd9\u6b21\u7684 PJ \u5956\u52b1\u540d\u989d\u7ed9\u4e86\u6211\uff0c\u4e8e\u662f\u6211\u53ef\u4ee5\u53bb\u6253\u4eba\u751f\u7684\u7b2c\u4e00\u6b21PJ\u4e86\uff08\u524d\u9762\u4e00\u76f4\u540a\u7ebf \u7136\u540e\u5728\u673a\u623f\u628a\u7b2c\u4e00\u573a\u6a21\u62df\u8d5b\u6574\u5b8c\u4e86\uff0c\u6bd4\u8f83\u826f\u5fc3\u3002 \u4e0d\u8fc7\u6700\u8fd1\u6587\u5316\u8bfe\u6709\u70b9\u95ee\u9898\uff0c\u53ef\u80fd\u9700\u8981\u6211\u6293\u7d27\u65f6\u95f4\uff0c\u4e8e\u662f\u7a0d\u5fae\u538b\u7f29\u4e86\u4e0b\u65f6\u95f4\u3002 Day 0.97 10.20 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7b80\u5355\u8bf4\u4e00\u4e0b\u6700\u8fd1\u600e\u4e48\u4e86\u5427\uff0c\u592a\u5fd9\u5b8c\u5168\u6ca1\u65f6\u95f4\u5199\u6e38\u8bb0\u4e86\u3002 \u56fd\u5e86\u96c6\u8bad\u7684\u6e38\u8bb0\u5199\u5728\u672c\u5b50\u4e0a\uff0c\u4e4b\u540e\u62cd\u7167\u53d1\u4e0a\u6765\u3002 \u6700\u8fd1\u8fd9\u6bb5\u65f6\u95f4\u505c\u8bfe\uff0c\u5dee\u4e0d\u591a\u5c31\u662f\u6a21\u62df\u8d5b\uff0c\u6539\u9519\uff0c\u8865\u4e13\u9898\uff0c\u5199\u9898\uff0c\u8865\u9898\u2026\u2026 \u5c31\u8fd9\u4e48\u6109\u5feb\u7684\u8fc7\u4e86\u4e00\u4e2a\u5468\uff0c\u4e0d\u8fc7\u6a21\u62df\u8d5b\u4e00\u76f4\u90fd\u6ca1\u8003\u597d\u2026\u2026 \u6a21\u62df\u8d5b\u5929\u5929\u6302\u5206\uff0c\u4eba\u9ebb\u4e86\u3002 \u6709\u4e00\u6b21\uff08\u5e94\u8be5\u662f\u4e0a\u5468\u4e94\uff09\u627eJX\u804a\u4e86\u4e00\u4e0b\uff0c\u6211\u81ea\u5df1\u4e5f\u5199\u4e86\u4e2a\u90ae\u4ef6\uff0c\u89c9\u5f97\u6211\u73b0\u5728\u7684\u95ee\u9898\u5c31\u662f\u592a\u6d6e\u8e81\u4e86\uff0c\u7a33\u4e0d\u4e0b\u6765\u3002 \u800c\u4e14\u603b\u662f\u4f1a\u7ed9\u81ea\u5df1\u4e00\u4e9b\u83ab\u540d\u7684\u538b\u529b\uff08\u56e0\u4e3a compere\uff09\u3002 \u4e0b\u5348\u8fd8\u88ab\u62c9\u53bb\u8fd0\u52a8\u4f1a\uff0c\u5f53\u662f\u653e\u677e\u4e00\u4e0b\u8111\u5b50\u4e86\u3002 \uff08wqs\u4f5c\u4e3a\u5e7f\u64ad\u7ad9\u7ad9\u957f\u653e\u4e86\u611f\u60c5\u7684\u6469\u5929\u697c\uff08\u6211\u8f66\u4e07\u4eba\u76f4\u63a5\u72c2\u559c\uff09 4*100 \u6709\u4eba\u53d7\u4f24\u5e2e\u4ed6\u8dd1\u4e86\uff0c\u7136\u540e\u4e3a\u4e86\u56e2\u4f53\u9879\u56db\u5904\u5954\u6ce2\u2026\u2026 \u7ed3\u679c\u6700\u540e\u8863\u670d\u7164\u7403\u4e86\u2026\u2026 \u552f\u4e00\u7684\u5b89\u6170\u662f\u73ed\u4e3b\u4efbF\u5973\u58eb\u7ed9\u6211\u4eec\u8fd9\u4e9b OIer \u51c6\u5907\u4e86\u5403\u7684\uff08 \u4e4b\u540e\u8981\u53bb\u7ef5\u9633\u8003\u8bd5\uff0c\u5e0c\u671b\u6302\u5206\u4e0d\u8981\u592a\u60e8\u3002 Day 0.98 10.21 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4eca\u5929\u6a21\u62df\u8d5b 5min \u624b\u6495\u7ebf\u6bb5\u6811 1A 100pts \u8d70\u4eba/kx \u7136\u540e\u5269\u4e0b\u7684 3h55min \u53ea\u62ff\u4e86 30 /kx \u672c\u6765\u53ef\u4ee5 310 \u7684 /ll Day 0.99 10.22 \u03c8(\uff40\u2207\u00b4)\u03c8 \u627e\u4f73\u8001\u5e08\u95eepqbd\u7684\u9898\uff0c\u7ed3\u679c\u4f73\u8001\u5e08\u7ed9\u4e86\u6781\u5ea6\u4f18\u79c0\u7684\u505a\u6cd5 \u4e8e\u662f\u4f73\u8001\u5e08\u8fdb\u7fa4\u4e86 /kx \u4e0b\u5348\u6e9c\u53bbTencent \u73a9\u53bb\u4e86\uff0c\u7136\u540e\u5c31\u8dd1\u8def\u53bb\u7ef5\u9633\u3002 Day 1 10.23 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6211\u89c9\u5f97\u5427\uff0c\u8fd9\u6b21\u867d\u7136\u53ef\u80fd\u62ff\u4e0d\u5230\u4ec0\u4e48\u5956\uff0c\u4f46\u662f\u6536\u83b7\u633a\u5927\u7684\u3002 \u9996\u5148\u4e0a\u5348J\u7ec4\uff0c\u5fc3\u6001\u51fa\u4e86\u70b9\u5c0f\u95ee\u9898\uff0c\u5bfc\u81f4T4\u6ca1\u5199\u51fa\u6765\u3002 \u5148\u5f00 A \u9898\uff0c\u5f00\u59cb\u7684\u65f6\u5019\u6709\u70b9\u7d27\u5f20\u7ed3\u679c\u534a\u5c0f\u65f6\u624d\u770b\u51fa\u6765\u662f\u50bb\u903c\u9898\uff0c\u4f46\u662f\u6211\u5f53\u65f6\u4e00\u770b\u65f6\u95f49\u70b9\uff0c\u6211\u4ee5\u4e3a\u5df2\u7ecf\u8fc7\u53bb\u4e00\u4e2a\u5c0f\u65f6\u4e86\uff08\u5e73\u5e38\u6a21\u62df\u8d5b\u90fd\u662f8\u70b9\u5f00\u59cb\uff0c\u6240\u4ee5\u4e60\u60ef\u4e86\uff09 \u7136\u540e\u5c31\u6709\u70b9\u614c\uff0cT1\u5199\u4e86\u8dd1\u8def\u53bb\u770bT2T3. \u53d1\u73b0T3 \u4f3c\u4e4e\u662f\u4e2a\u5c0f\u6a21\u62df\uff0c\u5728\u8349\u7a3f\u7eb8\u4e0a\u7406\u4e86\u4e00\u4e0b\u601d\u8def\u5c31\u5f00\u5199\u4e86\u3002 \u4e00\u51714\u4e2a\u5927\u6837\u4f8b\uff0c\u6211\u8c03\u4e86\u56db\u6b21\uff0c\u7136\u540e\u90fd\u8fc7\u4e86\uff0c\u5199\u4e86\u4e2agen\u968f\u673a\u51fa\u4e32hack\u53d1\u73b0\u4e5f\u6ca1\u95ee\u9898\u3002 \u62ac\u5934\u4e00\u770b\u8fd8\u6709 1h40min\u3002 \u7136\u540e\u53bb\u5199T2\uff0c\u6211\u5f53\u65f6\u4ee5\u4e3a\u9898\u9762\u6ca1\u8bf4c++14\u6240\u4ee5\u4e0d\u6562\u7528auto\uff0c\u7136\u540e\u8c03\u4e86\u597d\u51e0\u6b21\u53d1\u73b0\u662f\u79bb\u6563\u5316\u51fa\u9519\u4e86\u3002 \u8fc7\u4e86\u5927\u6837\u4f8b\u8dd1\u8def\uff0c\u8fd8\u67091h\u3002 \u770b T4 \u7684\u65f6\u5019\u53d1\u73b0\u53ef\u4ee5\u76f4\u63a5 set \u533a\u95f4\u5220\u9664\uff0c\u4f46\u662f\u53d1\u73b0\u5fd8\u8bb0set\u548b\u7528\u4e86 /qd \u7a81\u7136\u53d1\u73b0 T2 \u6709\u4e2a\u5927\u6837\u4f8b\u51fa\u95ee\u9898\u4e86\uff0c\u4e8e\u662f\u56de\u53bb\u8c03\u3002 \u5927\u6982\u8fd8\u670920min \u7684\u65f6\u5019\u6ca1\u8c03\u5b8c\uff0c\u5fc3\u5c31\u6709\u70b9\u614c\u4e86\u3002 \u6700\u540e\u68c0\u67e5\u6587\u4ef6\u7684\u65f6\u5019\u7a81\u7136\u53d1\u73b0 T1 \u6709\u4e2a\u5730\u65b9\u5c11\u5199\u4e86\u7b49\u53f7\uff0c\u52a0\u4e0a\u4e4b\u540e\u6309ctrl+s \u7684\u65f6\u5019\u521a\u597d\u542c\u5230\u4e86\u6536\u5377\u7684\u58f0\u97f3\u3002 \u4f46\u662fcena\u6ca1\u6709\u663e\u793a\u6536\u5377\uff0c\u6240\u4ee5\u6211\u4f30\u8ba1\u8fd8\u662f\u5199\u5165\u4e86\u7684\u3002 \u9884\u4f30 100+40+100+0 20=240 260. \u6302\u60e8\u4e86\uff0c\u5fc3\u60c5\u6709\u70b9\u4e0d\u597d\u3002 \u4e2d\u5348\u5728dc\u9644\u8fd1\u7684\u67d0\u4e2a\u996d\u5e97\u6070\u996d\u3002 \u7136\u540e\u5728\u8f66\u4e0a\u7761\u4e86\u4e00\u89c9\u3002 \u4e0b\u5348\u8fdb\u8003\u573a\u7684\u65f6\u5019\u770b\u89c1\u4e86\u9893\u4ed9 Jess\uff0c\u8fc7\u53bb\u819c\u4e86\u4e00\u53d1\u3002 \u8fdb\u53bb\u4e4b\u540e\u53d1\u73b0\u8fd8\u662f\u4e0a\u5348\u7684\u8003\u573a\uff0c\u4e0d\u8fc7\u6362\u4e86\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u65c1\u8fb9\u7684\u4fe9\u5c0f\u54e5\u548c\u6211\u4e00\u4e2a\u59d3\uff0c\u800c\u4e14\u7b2c\u4e8c\u4e2a\u5b57\u90fd\u662fy\uff08 \u5f00\u9898\u7684\u65f6\u5019\u6709\u70b9\u4e0d\u6b62\u6240\u9519\u3002 \u8bfb\u4e8620min\u9898\uff0c\u611f\u89c9T1\u4f1a\u4e86\u4e00\u70b9\u70b9\uff0c\u5199\u4e86\u4e00\u4e0b\u53d1\u73b0\u4e0d\u5bf9\u53c8\u505c\u4e86\u3002 T2 \u770b\u4e86\u4e00\u773c\u6570\u636e\u8303\u56f4\uff1a \\(n\\le 500\\) \u3002 \u8fd9\u4e0d\u5c31\u662f\u4e00\u4e2a\u533a\u95f4DP\u5417\uff1f \u7ed3\u679c\u6211\u63a8\u7740\u63a8\u7740\u5c31\u53d1\u73b0\u4e0d\u5bf9\u52b2\uff0c\u8fd9\u73a9\u610f\u513f\u5c31\u662f\u90a3\u79cd\u4e00\u773c\u77e5\u9053\u600e\u4e48\u505a\u4f46\u5c31\u662f\u63a8\u4e0d\u51fa\u6765\u7684\u5927\u6076\u5fc3\u9898\u2026\u2026 \u7136\u540e\u6211\u5c31\u50bb\u4e86\uff0c\u4f30\u8ba1\u8981\u7206\u96f6\u4e86\u2026\u2026 \u7136\u540e\u8fd9\u65f6\u8fd8\u5269 3h40min \uff0c\u6211\u5c31\u5728\u4e0d\u65ad\u7684\u514b\u670d\u5fc3\u7406\u95ee\u9898\u3002 \u5f53\u65f6\u8fc7\u4e8e\u7d27\u5f20\uff0c\u8111\u888b\u4e00\u7247\u7a7a\u767d\uff0c\u611f\u89c9\u81ea\u5df1\u8003\u524d\u590d\u4e60\u7684\u5565\u90fd\u5fd8\u8bb0\u4e86\uff0c\u800c\u4e14\u5957\u4e0d\u4e0a\u6765\u3002 \u5927\u6982\u8fc7\u4e86 20min \u5de6\u53f3\uff0c\u6211\u60f3\u8d77\u6765\u81ea\u5df1\u5e26\u4e86\u51b0\u9547\u96ea\u78a7\uff08\u522b\u95ee\u4e3a\u4ec0\u4e48\u79cb\u5929\u5e26\u51b0\u9547\u7684\uff09\uff0c\u559d\u4e86\u4e00\u53e3\u4e4b\u540e\u5750\u4e86 5min \u51b7\u9759\u4e0b\u6765\u4e86\u3002 \u6211\u89c9\u5f97\u6211\u4e0d\u5e94\u8be5\u6d6a\u8d39\u6211\u597d\u4e0d\u5bb9\u6613\u4e89\u53d6\u8fc7\u6765\u7684\u673a\u4f1a\uff0c\u8d77\u7801\u4e0d\u80fd\u8f9c\u8d1f\u6211\u81ea\u5df1\u3002 \u4e4b\u540e\u7ec8\u4e8e\u5f00\u59cb\u5199T1\u4e86\u3002 \u53d1\u73b0 T1 \u53ef\u80fd\u662f\u4e2a\u8d2a\u5fc3\u6216\u8005\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\uff0c\u4f46\u662f\u4e8c\u5206\u505a\u6cd5\u5f53\u65f6\u8003\u573a\u4e0a\u7d27\u5f20\u7a81\u7136\u8111\u62bd\u4e0d\u6562\u5199\u4e86\uff0c\u7136\u540e\u5c31\u5199\u4e86\u4e00\u4e2a\u8d2a\u5fc3+\u5206\u8ba8\u8fc7\u4e86\u5927\u6837\u4f8b\u3002 \u7136\u540e\u5f53\u65f6\u5f00\u5fc3\u7684\u53eb\u4e86\u51fa\u6765\uff08\u4e0d\u662f\u5f88\u5927\u58f0\uff09\uff0c\u53c8\u5c0f\u58f0\u7684\u8bf4\u4e86\u4e00\u53e5\uff0c200pts\uff0c\u8fd9\u4e0b\u7a33\u4e86\uff08\u5f53\u65f6\u53e3\u8bef\u4e86\uff0c\u4e0d\u77e5\u9053\u6709\u54a9\u6709\u5f71\u54cd\u5230\u65c1\u8fb9\u4e24\u4f4d\u5c0f\u54e5\u7684\u5fc3\u6001\uff0c\u771f\u662f\u5bf9\u4e0d\u8d77\uff08\u3002 \u7136\u540e\u8fc7\u4e8630s\u5c31\u51b7\u9759\u4e0b\u6765\uff0c\u5199\u4e86\u4e2a gen \u62cd\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u6709\u4e9b\u60c5\u51b5\u8fd8\u6709\u95ee\u9898\uff0c\u51b3\u5b9a\u90a3\u4e00\u90e8\u5206\u5c31\u9760\u6253\u66b4\u529b\u62ff\u5206\uff0c\u4f46\u662f\u53ea\u662f\u8fc7\u4e86\u5927\u6837\u4f8b\uff0cgen\u4e4b\u540e\u6ca1\u7528\u4e86\uff08\u56e0\u4e3a\u6211\u7740\u6025\u53bb\u63a8T2 \u5fd8\u8bb0\u56de\u6765\u62cdT1\u4e86\uff09\u3002 \u4f30\u8ba1\u4f1a\u6302\u7684\u5f88\u60e8\uff0cT1 \u53ef\u80fd\u6700\u591a 40pts\u3002 \u7136\u540e\u6211\u5f53\u65f6\u63a8\u4e0d\u51fa T2 \uff0c\u56e0\u4e3a\u4e0d\u4f1a\u5904\u7406 ASB \u7684\u60c5\u51b5\u3002 \u8fd8\u81ea\u4ee5\u4e3a\u80fd\u968f\u4fbf\u641e\u51fa\u6765\u62ff 100pts \u7ed3\u679c\u6700\u540e\u5c31\u53ea\u80fd\u5199\u4e86\u4e00\u4e2a\u8fc7\u4e86\u2154\u4e2a\u5927\u6837\u4f8b\u7684\u4e1c\u897f\u4ea4\u4e0a\u53bb\u3002 \u53c8\u5f00\u59cb\u7740\u6025\u4e86\uff0c\u7ee7\u7eed\u6765\u4e86\u4e00\u53e3\u96ea\u78a7\uff0c\u7136\u540e\u53bb\u770b\u4e86\u4e0b T3\uff0c\u4ee5\u4e3a\u7279\u6b8a\u6027\u8d28\u90a3\u90e8\u5206\u5206\u5f88\u597d\u62ff\uff0c\u4f46\u662f\u6211\u9519\u4e86\u3002 \u8fd9\u65f6\u6211\u4e0d\u5f97\u4e0d\u9762\u5bf9\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u6211\u80af\u5b9a 100pts \u4e0d\u5230\u3002 \u6211\u5c31\u5728\u60f3\uff0c\u6211\u4e3a\u5565\u8003\u8bd5\u7684\u65f6\u5019\u5565\u90fd\u4f1a\u5fd8\u8bb0\uff0c\u6211\u8fd8\u503c\u4e0d\u503c\u5f97\u7ee7\u7eedOI\u3002 \uff08\u4ee5\u4e0b\u8fd9\u6bb5\u662f\u6211\u5185\u5fc3\u7684\u51e0\u6bb5\u5bf9\u767d\uff0c\u4e0d\u8bb0\u5f97\u662f\u5927\u6982\u4ec0\u4e48\u65f6\u5019\u60f3\u7684\u4e86\uff09 \u6211\u611f\u89c9\u4e3a\u5565\u6211\u5565\u90fd\u4e0d\u4f1a\u554a\uff0c\u8fd9\u6302\u5206\u6302\u8fd9\u4e48\u5927\uff0c\u522b\u4eba\u540c\u673a\u623f\u7684\u4eba\u5747200+\uff0c\u6211\u56de\u53bb\u8fd8\u6709\u8138\u5417\u3002 \u4e3a\u5565\u9694\u58c1\u5c0f\u54e5\u540e\u4e09\u9898\u90fd\u4f1a\u6253\u66b4\u529b\u554a\uff0c\u6211\u751a\u81f3\u8fde\u66b4\u529b\u90fd\u4e0d\u4f1a\u6253\u4e86\uff0c\u6211\u662f\u4e0d\u662f\u8be5\u9000\u5f79\u554a\u3002 \u6211TM\u662f\u4e0d\u662f\u56e0\u4e3a\u6ca1\u6cd5\u9759\u4e0b\u6765\u60f3\u9898\u624d\u8fd9\u6837\u7684\u554a\uff1f\uff08\u559d\u53e3\u6c34\u63a8 T2\uff09\uff0c\uff08\u8fc7\u4e8610min \u53c8\u653e\u4e0b\u8349\u7a3f\uff09\u5b8c\u4e86\u3002 \u8981\u4e0d\u5269\u4e0b\u8fd9 30min \uff0c\u6211\u5565\u90fd\u4e0d\u5199\u4e86\uff0c\u597d\u597d\u60f3\u60f3\u4e3a\u5565\u6211\u4f1a\u8fd9\u6837\u5427\uff0c\u4e5f\u7b97\u603b\u7ed3\u4e00\u4e0b\u4e86 \u8fd9\u6b21\u5e72\u8106\u5c31\u7b97\u5403\u4e2a\u6559\u8bad\uff0c\u4e4b\u524d\u521d\u8d5b\u6302\u5206\u4e0d\u4e5f\u662f\u4e00\u6837\u7684\u5417\uff1f \u7136\u540e\u5c31\u5b8c\u4e86\uff0c\u6211\u51fa\u8003\u573a\u7684\u65f6\u5019\u9047\u89c1\u7684\u7b2c\u4e00\u4e2a\u673a\u623f\u4eba\u662f xyh\uff0c\u53ea\u6709\u4ed6\u548c\u6211\u662f\u521d\u4e09\u7684\u6765\u7ef5\u9633\u8003\u7684\u3002 \u6211\uff1axyh\uff01 x\uff1a\u548b\u6837\uff1f \u6211\uff1a\u6211pjtg\u90fd\u8003\u6302\u4e86 x\uff1a\u5f7c\u6b64\u5f7c\u6b64\uff0c\u6211\u4e5f\u6302\u7684\u5f88\u60e8 (\u8ba8\u8bba\u5f7c\u6b64\u62ff\u4e86\u591a\u5c11\u90e8\u5206\u5206\uff0c\u987a\u4fbf\u8ba8\u8bba\u4e0b\u505a\u6cd5) x\uff1a \u6211\u8fd9\u6b21\u5b8c\u4e86\u5c31\u8981\u9000\u5f79\u4e86 \u6211\uff1a\u522b\u9000\u5f79\u554a\uff0c\u9000\u5f79\u5e72\u5565\uff0c\u53cd\u6b63\u6211\u6b7b\u4e5f\u4e0d\u9000\u5f79\u3002 x\uff1a\u2026\u2026 \uff08\u9a6c\u5148\u751f\u4ece\u65c1\u8fb9\u8d70\u8fc7\u53bb\uff0c\u4ed6\u4f3c\u4e4e\u5fc3\u60c5\u4e0d\u592a\u597d\uff0c\u53ef\u80fd\u662f\u8003\u6302\u4e86\uff09 \u51fa\u6821\u95e8\u4e4b\u540eXyh\u7684\u7236\u4eb2\u95ee\u6211\u5982\u4f55\uff1a \u6211\uff1a\u90fd\u8003\u6302\u4e86\u2026\u2026 Xyh\u7684\u7236\u4eb2\uff1a\u4f60\u592a\u8c26\u865a\u4e86\uff0c\u600e\u4e48\u53ef\u80fd\u5417\u2026\u2026 \u6211\uff1a\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\uff08\u8fc7\u4e86\u51e0\u79d2\uff09\uff0c\uff08\u62cdxyh\uff09\u7b54\u5e94\u6211\u4e0d\u8981\u9000\u5f79\u554a\uff01 Xyh\u7236\u4eb2\uff1a\u9000\u5f79\u662f\u5565\u610f\u601d\uff08\u95eexyh\uff09 \u7136\u540e\u6211\u5c31\u8d70\u4e86 \u56de\u5bb6\u5230 Academic Group \u91cc\u9762\u95ee\u4e86\u95ee\uff0c\u53d1\u73b0\u5927\u5bb6\u90fd\u6302\u7684\u5f88\u60e8\u3002 \u5305\u62ec\u4f46\u4e0d\u9650\u4e8e Dave,Turtle,ACO,Ty,Charles \u2026\u2026 \u7136\u540e FST \u7fa4\u4e5f\u5728\u8ba8\u8bba\u6302\u5206\u7684\u4e8b\u513f\u2026\u2026 Xcel \u9000\u7fa4\u4e86\uff0c\u4ed6\u8bf4\u4ed6\u548c\u4ed6\u7236\u6bcd\u5546\u91cf\uff0c\u51c6\u5907AFO\u4e86\uff0c\u795d\u4ed6\u597d\u8fd0\u3002 \u6211\u89c9\u5f97\u5427\uff0c\u4e0d\u7ba1\u62ff\u4e0d\u62ff\u5956\uff0c\u603b\u7ed3\u4e00\u4e0b\u662f\u5f88\u6709\u5fc5\u8981\u7684\uff1a \u5fc3\u6001\u95ee\u9898\u592a\u5927\uff0c\u8003\u8bd5\u7684\u65f6\u5019\u5b8c\u5168\u6ca1\u6709\u6a21\u62df\u8d5b\u65f6\u5019\u7684\u90a3\u79cd\u81ea\u4fe1\uff0c \u4eba\u6bd4\u8f83\u6d6e\u8e81\uff0c\u6ca1\u6cd5\u4e13\u5fc3\u7684\u505a\u4e8b\u60c5\uff08\u8fd9\u4e2a\u662f\u5927\u95ee\u9898\uff0cwhk\u4e0a\u4e5f\u9700\u8981\u6539\uff09 \u611f\u89c9\u81ea\u5df1\u8fd8\u662f\u5728\u4e3a\u4e86\u522b\u4eba\u7684\u79f0\u8d5e\u800c\u6d3b\uff0c\u6d3b\u4e0d\u51fa\u81ea\u5df1\u7684\u6d12\u8131\uff08\u8fd9\u4e5f\u662f\u4e2a\u5927\u95ee\u9898\uff09 \u6c34\u5e73\u8fd8\u771f\u7684\u4e0d\u591f\u3002 \u51b3\u5b9a\u4e4b\u540e\u8fd9\u4e00\u5e74\u9700\u8981\u505a\u8fd9\u4e9b\u4e8b\u513f\uff1a \u8fd9\u6b21\u5fc5\u987b\u8981\u5b8c\u6210\u4e86 \u521d\u8d5b\u4fdd\u969c 95pts CF \u601d\u7ef4\u9898\u9898\u5355 AK+Solution \u63d0\u9ad8 algor \u5168\u90e8\u5b66\u5b8c + \u4e00\u70b9\u7701\u9009\u57fa\u7840 \u8865\u5b8c RFJ \u9898\u5355\u3002 CF & AT VP 50+ CF & AT RC 15+ \u6a21\u62df\u8d5b 10+ \u4eca\u5e74\u6b62\u6b65\u4e8e\u6b64\uff0c\u660e\u5e74\u6211\u56de\u6765\u7684\u65f6\u5019\u8981\u8ba9\u60a8\u4eec\u770b\u5230\u6211\u6700\u9ad8\u7684\u5b9e\u529b\uff01","title":"CSP2021"},{"location":"misc/CSP2021/#csp-js-2021","text":"","title":"CSP J/S 2021 \u6e38\u8bb0"},{"location":"misc/CSP2021/#_1","text":"Day -10 ~ Day-1 \u5747\u4e3a\u521d\u8d5b\u524d Day 0 \u4e3a\u521d\u8d5b Day 0.01 ~ 0.99 \u4e3a\u590d\u8d5b\u524d,\u5176\u4e2d Day 0.33 \u4e3a 9.29 \u5373\u4e3a\u521d\u8d5b\u6210\u7ee9\u516c\u5e03\u5f53\u5929 Day 1 \u4e3a\u590d\u8d5b","title":"\u8bf4\u660e\uff1a"},{"location":"misc/CSP2021/#day-5","text":"\u6700\u8fd1\u53d8\u6545\u5b9e\u5728\u592a\u591a\u4e86\uff0c\u611f\u89c9\u4eba\u6709\u70b9\u9ebb\u3002 \u5b66\u6821\u4e00\u6b21 \u7edf\u4e00 \u51c6\u5907\u521d\u8d5b\uff0c\u505a\u4e86\u597d\u51e0\u5957\u6a21\u62df\uff0c\u6211\u8fd8\u5199\u4e86\u4e00\u4e2a \u521d\u8d5b\u77e5\u8bc6\u70b9 - black_trees - \u535a\u5ba2\u56ed (cnblogs.com) \u611f\u89c9\u521d\u8d5b\u597d\u96be\u554a\uff01\u5e0c\u671b\u4eca\u5e74\u4e0d\u8981\u88ab\u5361\u4e86qwq\u3002 \u6211\u6682\u65f6\u653e\u4e0b\u590d\u8d5b\u53bb\u51c6\u5907\u521d\u8d5b\uff0c\u65e0\u610f\u95f4\u53d1\u73b0\u8fd9\u4e2a\u5bf9\u590d\u8d5b\u8fd8\u633a\u6709\u5e2e\u52a9\uff1f \u5370\u8c61\u6bd4\u8f83\u6df1\u7684\u4e00\u9898\u662f \\(g(x)=(g(x-1)\\times2002 + g(x-2)\\times 2003) \\text{mod} \\ 2005\\) \uff0809 TG\uff09 \u5f53\u65f6\u6bdb\u6839\u513f\u8bb2\u7684\u65f6\u5019\u5fd8\u8bb0\u600e\u4e48\u505a\u4e86\uff0c\u4e8e\u662f\u8bf7\u4e86\u4f73\u8001\u5e08\u8fc7\u6765\uff0c\u76f4\u63a5\u4e00\u4e2a\u8d39\u9a6c\u5c0f\u5b9a\u7406\u79d2\u6740\uff08orz \u73b0\u5728\u624b\u4e0a\u8fd8\u6709\u4e00\u4e2a LGR2021 SCP \u521d\u8d5b\u6a21\u62df\u548c\u67d0\u4eae\u7684\u6a21\u62df\uff08\u636e\u8bf4HL\u90a3\u5957ZJK\u7ffb\u8f66\u4e86 \u8fd8\u6709\u4e2a\u5dee\u4e09\u9898\u7684 LGR2020 CSP \u521d\u8d5b\u6a21\u62df\u3002 \u6211\u7684 ShooTing Game II \u90a3\u9898\u56e0\u4e3a\u7a81\u7136\u51fa\u73b0\u7684 ZR NOIP\u5341\u8fde\u6d4bDay2T2 \u88ab\u6bd9\u4e86\uff0c\u4e8e\u662f\u4ecepbqd\u7684CFR\u4e0a\u64a4\u4e0b\u6765\u4e86\u3002 \u4e0d\u8fc7\u6ca1\u5173\u7cfb\uff0c\u4e4b\u540e\u6709\u597d\u9898\u8fd8\u53ef\u4ee5\u653e\uff0c\u800c\u4e14CF\u7684 Coauthor \u8fd8\u662f\u6709\u6211\u3002 \u8fd9\u9898\u5c31\u6254\u53bb\u548c xzq \u4e00\u8d77\u51fa\u7684mn\u8d5b\u4e86\uff0c\u4e0d\u8fc7\u542c\u8bf4\u8981\u5148\u7ed9\u6559\u7ec3\u7ec4\u770b\u4e00\u770b\u3002 \u53e6\u5916\u5b66\u6821\u91cc\u7684\u5404\u79cd\u7533\u5fc5\u4eba\u5bfc\u81f4\u7684\u65f6\u95f4\u5c31\u5148\u4e0d\u63d0\u4e86\u3002 \u53cd\u6b63\u5404\u79cd\u4e8b\u60c5\u90fd\u7406\u4e86\u4e00\u4e0b\uff0c\u73b0\u5728\u6700\u5927\u7684\u95ee\u9898\u662f\u5468\u516d\u80fd\u4e0d\u80fd\u7559\u6821\uff0c\u5982\u679c\u4e0d\u80fd\u5c31\u53ea\u80fd\u53bbxzq\u5bb6\u501f\u5bbf\u4e86\u3002 \u5148\u5199\u5230\u8fd9\u513f\uff0c\u7761\u4e86\u3002","title":"Day -5"},{"location":"misc/CSP2021/#day-2","text":"\u6700\u8fd1\u5929\u5929\u90fd\u5728\u4e0a\u8bfe\u4e0b\u8bfewhk\u7684\u751f\u6d3b\u5f53\u4e2d\u5ea6\u8fc7\uff0c\u5c31\u53ea\u662f\u4e3a\u4e86\u521d\u8d5b\u632a\u4e00\u70b9\u65f6\u95f4\u3002 \u8bb0\u5f97\u505a\u4e86\u4e00\u4e2a\u7279\u522b\u79bb\u8c31\u7684\u5377\u5b50\uff0c\u628a\u4eca\u5e74NOI Day1T1 \u62ff\u8fc7\u6765\u5f53\u5b8c\u5584\u7a0b\u5e8f\u3002 \u4e0d\u4f1a\u6811\u5256\u6240\u4ee5\u9519\u4e86\u4e00\u4e2a x.r==y.l \uff0c\u7136\u540e\u5c31\u53bb\u5199STGII\u7684std\u4e86\u3002 \u7136\u540e\u5199\u7740\u5199\u7740\u53d1\u73b0\u8fd9\u73a9\u610f\u513f\u6839\u672c\u4e0d\u53ef\u4ee5\u653e\u5728PJ&TG\u6a21\u62df\u4e0a\uff0c\u4e8e\u662f\u53ea\u80fd\u64a4\u4e0b\u53bb\u3002 \u505a\u521d\u8d5b\u9898\u7684\u65f6\u5019\u53c8\u60f3\u5230\u4e00\u4e2a\u6bd4\u8f83\u597d\u73a9\u7684DS\uff0c\u51c6\u5907\u8003\u5b8c\u4e4b\u540e\u5199 description \u548c std\u3002 C\u8001\u5e08\u8bf4\u660e\u665a\u548c\u540e\u5929\u65e9\u4e0a\u5b66\u6821\u90fd\u83ab\u5f97\u996d\u6070\uff0c\u4e8e\u662f\u8ba9xzq\u5e2e\u5e26\u4e86\u4e00\u6876\u6ce1\u9762\u3002 \u4ed6\u8d70\u4e4b\u540e\u6211\u624d\u60f3\u8d77\u6765\u53ef\u4ee5\u53bb\u4ed6\u5bb6\u5ad6\u4e00\u987f\uff0c\u4e0d\u8fc7\u8fd9\u6837\u4e5f\u8bb8\u4e0d\u592a\u597d\u3002 \u5728\u5bdd\u5ba4\u9047\u5230\u4e86\u6628\u5929\u8ba4\u8bc6\u7684\u5927\u54f2\u5b66\u5bb6\uff0c\u4ed6\u8bf4\u4ed6\u53eb\u5764\u2642\u5764\uff0c\u60f3\u548c\u6211\u4ea4\u2642\u4e2a\u670b\u53cb\u3002 \u6211\u6beb\u4e0d\u72b9\u8c6b\u5730\u540c\u2642\u610f\u4e86\uff08\uff08\uff08","title":"Day -2"},{"location":"misc/CSP2021/#day-1","text":"918\u2026\u2026 \u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026 \u65e9\u4e0axzq\u628a\u6ce1\u9762\u62ff\u7ed9\u6211\u7684\u65f6\u5019\uff0c\u8bf4\u8d85\u5e02\u4e70\u4e00\u9001\u4e00\uff08 \u5e26\u7ecf\u6d4e\u5b66\u5bb6HHZ\u770b\u5230\u4e4b\u540e\u8ba4\u4e3a\u80af\u5b9a\u662f\u8981\u8fc7\u671f\u7684\u624d\u4e70\u4e00\u9001\u4e00\uff0c\u6211\u89c9\u5f97\u4e5f\u662f\u3002 \uff08\u4e2d\u5348\u5403\u7684\u65f6\u5019\u518d\u770b\u770b\u5427\u3002 \u4e0b\u5348\u6536\u5230\u4e86\u4e00\u4e9b\u6d88\u606f\uff0c\u5927\u6982\u662f\u5bf9\u4e8e\u67d0\u4e2a\u9762\u5b50\u5de5\u7a0b\u7684\u4e00\u4e9b\u8c03\u6574dc \u56e0\u4e3a\u6211\u4eec\u5728\u98ce\u53e3\u6d6a\u5c16\u4e0a\uff0c\u5e38\u5e74\u88ab\u91cd\u70b9\u5173\u6ce8\uff0c\u6240\u4ee5\u73b0\u5728\u5468\u516d\u5148\u4e0d\u4e0a\u8bfe\uff0c\u7136\u540e\u628a\u5468\u5185\u7684\u65f6\u95f4\u538b\u7f29\u4e00\u4e0b\u3002 \u628a\u5468\u516d\u7684\u8bfe\u538b\u8fc7\u53bb\uff0c\u81f3\u4e8e\u665a\u81ea\u4e60\uff0c\u7b49\u98ce\u58f0\u8fc7\u53bb\u4e86\uff0c\u642c\u4e86\u6559\u5ba4\u6362\u4e86\u5bdd\u5ba4\u4e4b\u540e\u5c31\u4f1a\u6162\u6162\u8c03\u56de\u539f\u6765\u7684\u65f6\u95f4\u3002 \u4e0d\u8fc7\u548c\u9a6c\u4e0a\u5c31\u4f1a\u505c\u8bfe\u7684\u6211\u53c8\u5565\u5927\u5173\u7cfb\u5462\uff08\u7b11\uff09\uff1f \u53bb\u673a\u623f\u4e4b\u524d\u5f97\u5230\u4e86\u5176\u4ed6\u7ade\u8d5b\u4eba\u7684\u795d\u798f\uff0c\u611f\u89c9\u633a\u5c2c\u7684233 \u665a\u4e0a\u548cczh\u8fd8\u6709xyh\u51fa\u53bb\u6070\u4e86\u4e2a\u732a\u6392\u5b9a\u98df\u8fd8\u662f\u5496\u55b1\u996d\u6765\u7740\u3002 \u665a\u4e0a\u8003\u4e86\u4e00\u4e2a\u6bdb\u7237\u7b49\u795e\u4ed9\u4e00\u8d77\u51fa\u7684\u521d\u8d5b\u6a21\u62df\uff08\u636e\u8bf4\u6070\u4e861000RMB\uff0c\uff09\u8003\u7684\u8fd8\u884c\u3002 \u987a\u4fbf\u628a PalindL \u90a3\u9898\u7684EH ver \u7b80\u5355\u5199\u4e86\u4e00\u4e0b\u6254\u51fa\u9898\u7ec4\u91cc\u4e86\u3002 \u56de\u5bdd\u5ba4\u4e4b\u540e\u548czyl\u4ee5\u53calsl\u8ba8\u8bba\u4e86\u4e00\u4e0b\u67d0\u4e2a\u795e\u5947DS\u7684\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u505a\u6cd5\u3002 \u7136\u540e\u624d\u60f3\u8d77\u6765\u6211\u4e3b\u5e2d\u6811\u7684\u7b14\u8bb0\u6ca1\u5199\uff08\uff0c\u5c31\u987a\u624b\u6254todo\u91cc\u4e86\u3002 \u5199\u4e0b\u8fd9\u4e9b\u7684\u65f6\u5019\u5916\u9762\u4e0b\u7740\u96e8\uff0c\u5b66\u6821\u91cc\u53ea\u5269\u4e86OIer\uff0c \u4e0d\u7981\u89c9\u5f97\u8fd9\u624d\u662f\u6211\u8981\u7684\u751f\u6d3b\u554a\u3002 \u8ba8\u8bba\u8ba8\u8bba\u9898\uff0c\u6253\u6253\u6bd4\u8d5b\u8fb1\u9a82\u51fa\u9898\u4eba\uff0c\u51fa\u51fa\u6bd4\u8d5b\u5361\u7206\u4e00\u5806\u4eba\uff0c\u4eab\u53d7\u8fd9OIer\u7684\u5b81\u9759\u3002 \u5e0c\u671b\u5b83\u80fd\u966a\u6211\u8d70\u5230\u9ad8\u4e8c\u3002 \u6211\u5df2\u7ecf\u4e24\u5e74\u88ab\u521d\u8d5b\u5361\u4e86\uff0c\u6211\u4e0d\u60f3\u518d\u51fa\u4ec0\u4e48\u95ee\u9898\u4e86\u3002","title":"Day -1"},{"location":"misc/CSP2021/#day-0","text":"\u65e9\u4e0a\u6821\u95e8\u53e3\u96c6\u5408\uff0c\u53d1\u73b0mjc\u4ed6\u51c6\u5907\u51fa\u53bb\u6070\u996d\u56e0\u4e3a\u6ca1\u8001\u5e08\u88ab\u62e6\u4e86\uff08 \u770b\u89c1\u8f66\u4ee5\u4e3a\u662f\u81ea\u5df1\u4eba\uff0c\u7ed3\u679c\u662f\u7269\u7406\u7ade\u8d5b\u7684\uff0c\u8fd8\u56e0\u4e3a\u4ed6\u4eec\u7684\u8863\u670d\u4e4b\u7c7b\u7684\u5947\u602a\u89c4\u5b9a\u88ab\u83ab\u540d\u5176\u5999\u9a82\u4e86\u4e00\u987f\uff0c \u7136\u540e\u718a\u6821\u6700\u540e\u624d\u77e5\u9053\u6211\u4eec\u4e0d\u662f\u7269\u7406\u7ade\u8d5b\u662f\u4fe1\u606f\u7684\uff08 \u4f9d\u60ef\u4f8b\uff0c\u53bb\u7684\u8def\u4e0a\u6574\u4e86\u70b9\u5927\u6d3b\u3002 \u4e0d\u8fc7\u5230\u4e86\u4e4b\u540e\u53d1\u73b0\u662f\u6811\u5fb7\u5149\u534e\uff0c\u4f3c\u4e4e\u53ef\u4ee5\u548c HMP_Haoge \u9762\u57fa\uff1f \u8fdb\u53bb\u4e4b\u540e\u53d1\u73b0\u4e00\u5927\u5806\u4eba\u5728\u5217\u9635\uff0c\u6211\u8ba4\u4e3a\u8003\u524d\u5217\u9635\u80fd+rp\uff0c\u4e8e\u662f\u5c31\u52a0\u5165\u4e86\u3002 \u62ff\u5230\u8bd5\u5377\u53d1\u73b0\u6bd4\u6628\u665a\u90a3\u4e2a\u9634\u95f4\u6a21\u62df\u8fd8\u9634\u95f4\uff01\uff08Base64\u6211\u8bf4\u7684\u5c31\u662f\u4f60\u548c\u56db\u6bdb\u5b50 \u8001\u5957\u8def\u5148\u628a\u4f1a\u505a\u7684\u505a\u4e86\uff0c\u7136\u540e\u6162\u6162\u63a8\u3002 \u82f9\u679c\u90a3\u9898\u6ca1\u53d1\u73b0\u662f\u4e2a Fibb\uff0c\u76f4\u63a5\u8bbe\u4e86\u4e00\u4e2a\u51fd\u6570 Q(n,m) \u63a8\u4e86\u4e00\u4e0b\u5c31\u7b97\u51fa\u6765\u4e86\u3002 \u7403\u90a3\u9898\u4ee5\u4e3a\u662f\u6c42\u5e76\uff0c\u4f46\u662f\u6ca1\u53d1\u73b0\u67090. Base64\u5b8c\u5168\u4e0d\u4f1a\uff0c\u53ea\u80fd\u7528\u4e00\u4e9b\u7384\u5b66\u6280\u5de7\u505a\u4e86\uff0c\u4f46\u662f\u6ca1\u770b\u89c1HelloWorld\u7684 W \u5927\u5199\u4e86 \u56db\u6bdb\u5b50\u72b9\u8c6b\u5f88\u4e45\uff0c\u7a81\u7136\u60f3\u8d77\u6bdb\u6839\u513f\u4ee5\u524d\u8bb2\u8fc7\u7c7b\u4f3c\u7684qry\uff0c\u5c31\u505a\u4e86\u3002 \u4e0b\u6765\u5bf9\u5404\u8def\u795e\u4ed9\u7684\u6837\u5b50\uff0c\u89c9\u5f97\u662f72.5\u7684\u6837\u5b50\uff0c\u5e94\u8be5\u80fd\u8fc7qwq\u3002 \u4e2d\u5348\u548c\u5927\u5bb6\u4e00\u8d77\u6070\u9762\u987a\u4fbf\u8ba8\u8bba\uff0c\u633a\u5feb\u4e50\u7684\u3002 \u4e0b\u5348\u542c\u8bf4\u90a3\u4f4d cja \u8981\u8fc7\u6765\uff0c\u795d\u4ed6\u597d\u8fd0\u3002 \u8fdb\u53bb\u5c31\u968f\u4fbf\u505a\u4e86\u4e00\u4e0b\u3002 \u51fa\u6765\u611f\u89c9\u6211\u5e94\u8be5\u6ca1\u5565\u95ee\u9898\u3002 \u7ed3\u679c\u56de\u5bb6\u4e00\u5bf9\u7b54\u6848\uff0c\u597d\u5bb6\u4f19\uff0cJ\u548cS \u90fd\u662f 64pts\uff0cPJ\u6302\u4e8615\u5206\u50bb\u903c\u5206\u545c\u545c\u545c\u3002 \u7136\u540e\u6211\u5c31\u4e00\u76f4\u7279\u522b\u7126\u8651\uff0c\u548c\u8001\u7238\u6253\u4e86\u4e2a\u7535\u8bdd\uff0c\u4e0d\u77e5\u9053\u600e\u4e48\u5e73\u590d\u5fc3\u6001\uff0c\u540e\u6765\u60f3\u8d77\u795d\u8001\u8bf4\u7684 \u4eca\u5e74\u9898\u96be\uff0c\u800c\u4e14\u4eba\u591a\uff0c\u53c8\u4e0d\u4f1a\u51cf\u673a\u5b50\uff0c\u5206\u6570\u7ebf\u80af\u5b9a\u4f1a\u4e0b\u964d \u5e0c\u671b\u662f\u5427\u3002 \u7136\u540e\u6211\u89c9\u5f97tg \u5e94\u8be5\u80fd\u8fc7\uff0cpj\u6709\u70b9\u90a3\u4e2a\uff08\u4e0d\u4f1a\u6211\u8fd9\u8f88\u5b50\u5c31\u6253\u4e0d\u6210pj\u4e86\u5427\u2026\u2026 \u53bbfst\u7fa4\u91cc\u95ee\u4e86\u4e00\u4e0b\u53d1\u73b0\u6709\u6bd4\u6211\u66f4\u60e8\u7684\u2026\u2026\u90a3\u6211\u4e5f\u4e0d\u503c\u5f97\u653e\u5f03\u554a\u3002 \u6211\u63a5\u53d7\u4e86\uff0c\u6211\u5982\u679c\u771f\u7684J\u6216\u8005S\u7684\u521d\u8d5b\u6302\u4e86 \u90a3\u5c31\u6765\u5e74\u518d\u6218\uff0c\u6709\u4eba\u5df2\u7ecf\u7b49\u4e86\u4e09\u5e74\u90fd\u6ca1\u8bf4\u4ec0\u4e48\uff0c\u6211\u6709\u5565\u597d\u8bf4\u7684\u5462 \u8a66\u9a13\u306b\u5408\u683c\u3057\u306a\u3051\u308c\u3070,\u3058\u3083\u3042\u3001\u3082\u3046\u4e00\u5e74\u5f85\u3064. 3\u5e74\u3082\u5f85\u3063\u3066\u3044\u308b\u4eba\u3082\u3044\u307e\u3059,\u79c1\u3082\u6587\u53e5\u3092\u8a00\u3046\u5fc5\u8981\u306f\u306a\u3044. \u673a\u4e0a\u306e\u7a7a\u8ad6\u306f\u7121\u7528\u3060\u3001\u99ac\u9e7f. \u6211\u5e0c\u671b\u4e0d\u8981\u5230\u6b64\u4e3a\u6b62\u3002","title":"Day 0"},{"location":"misc/CSP2021/#day-033","text":"\u5206\u51fa\u4e86\uff0ctg 63\uff0cpj 61\u3002 \u5206\u6570\u7ebf\u7684\u8bdd\uff1atg 50, pj 62 \uff08\u666e\u53ca\u53c8\u540a\u7ebf\u4e86\uff09 \u4f46\u662f\u6240\u5e78\uff0c\u5b66\u6821\u8fd9\u6b21\u7684 PJ \u5956\u52b1\u540d\u989d\u7ed9\u4e86\u6211\uff0c\u4e8e\u662f\u6211\u53ef\u4ee5\u53bb\u6253\u4eba\u751f\u7684\u7b2c\u4e00\u6b21PJ\u4e86\uff08\u524d\u9762\u4e00\u76f4\u540a\u7ebf \u7136\u540e\u5728\u673a\u623f\u628a\u7b2c\u4e00\u573a\u6a21\u62df\u8d5b\u6574\u5b8c\u4e86\uff0c\u6bd4\u8f83\u826f\u5fc3\u3002 \u4e0d\u8fc7\u6700\u8fd1\u6587\u5316\u8bfe\u6709\u70b9\u95ee\u9898\uff0c\u53ef\u80fd\u9700\u8981\u6211\u6293\u7d27\u65f6\u95f4\uff0c\u4e8e\u662f\u7a0d\u5fae\u538b\u7f29\u4e86\u4e0b\u65f6\u95f4\u3002","title":"Day 0.33"},{"location":"misc/CSP2021/#day-097-1020","text":"\u7b80\u5355\u8bf4\u4e00\u4e0b\u6700\u8fd1\u600e\u4e48\u4e86\u5427\uff0c\u592a\u5fd9\u5b8c\u5168\u6ca1\u65f6\u95f4\u5199\u6e38\u8bb0\u4e86\u3002 \u56fd\u5e86\u96c6\u8bad\u7684\u6e38\u8bb0\u5199\u5728\u672c\u5b50\u4e0a\uff0c\u4e4b\u540e\u62cd\u7167\u53d1\u4e0a\u6765\u3002 \u6700\u8fd1\u8fd9\u6bb5\u65f6\u95f4\u505c\u8bfe\uff0c\u5dee\u4e0d\u591a\u5c31\u662f\u6a21\u62df\u8d5b\uff0c\u6539\u9519\uff0c\u8865\u4e13\u9898\uff0c\u5199\u9898\uff0c\u8865\u9898\u2026\u2026 \u5c31\u8fd9\u4e48\u6109\u5feb\u7684\u8fc7\u4e86\u4e00\u4e2a\u5468\uff0c\u4e0d\u8fc7\u6a21\u62df\u8d5b\u4e00\u76f4\u90fd\u6ca1\u8003\u597d\u2026\u2026 \u6a21\u62df\u8d5b\u5929\u5929\u6302\u5206\uff0c\u4eba\u9ebb\u4e86\u3002 \u6709\u4e00\u6b21\uff08\u5e94\u8be5\u662f\u4e0a\u5468\u4e94\uff09\u627eJX\u804a\u4e86\u4e00\u4e0b\uff0c\u6211\u81ea\u5df1\u4e5f\u5199\u4e86\u4e2a\u90ae\u4ef6\uff0c\u89c9\u5f97\u6211\u73b0\u5728\u7684\u95ee\u9898\u5c31\u662f\u592a\u6d6e\u8e81\u4e86\uff0c\u7a33\u4e0d\u4e0b\u6765\u3002 \u800c\u4e14\u603b\u662f\u4f1a\u7ed9\u81ea\u5df1\u4e00\u4e9b\u83ab\u540d\u7684\u538b\u529b\uff08\u56e0\u4e3a compere\uff09\u3002 \u4e0b\u5348\u8fd8\u88ab\u62c9\u53bb\u8fd0\u52a8\u4f1a\uff0c\u5f53\u662f\u653e\u677e\u4e00\u4e0b\u8111\u5b50\u4e86\u3002 \uff08wqs\u4f5c\u4e3a\u5e7f\u64ad\u7ad9\u7ad9\u957f\u653e\u4e86\u611f\u60c5\u7684\u6469\u5929\u697c\uff08\u6211\u8f66\u4e07\u4eba\u76f4\u63a5\u72c2\u559c\uff09 4*100 \u6709\u4eba\u53d7\u4f24\u5e2e\u4ed6\u8dd1\u4e86\uff0c\u7136\u540e\u4e3a\u4e86\u56e2\u4f53\u9879\u56db\u5904\u5954\u6ce2\u2026\u2026 \u7ed3\u679c\u6700\u540e\u8863\u670d\u7164\u7403\u4e86\u2026\u2026 \u552f\u4e00\u7684\u5b89\u6170\u662f\u73ed\u4e3b\u4efbF\u5973\u58eb\u7ed9\u6211\u4eec\u8fd9\u4e9b OIer \u51c6\u5907\u4e86\u5403\u7684\uff08 \u4e4b\u540e\u8981\u53bb\u7ef5\u9633\u8003\u8bd5\uff0c\u5e0c\u671b\u6302\u5206\u4e0d\u8981\u592a\u60e8\u3002","title":"Day 0.97 10.20"},{"location":"misc/CSP2021/#day-098-1021","text":"\u4eca\u5929\u6a21\u62df\u8d5b 5min \u624b\u6495\u7ebf\u6bb5\u6811 1A 100pts \u8d70\u4eba/kx \u7136\u540e\u5269\u4e0b\u7684 3h55min \u53ea\u62ff\u4e86 30 /kx \u672c\u6765\u53ef\u4ee5 310 \u7684 /ll","title":"Day 0.98 10.21"},{"location":"misc/CSP2021/#day-099-1022","text":"\u627e\u4f73\u8001\u5e08\u95eepqbd\u7684\u9898\uff0c\u7ed3\u679c\u4f73\u8001\u5e08\u7ed9\u4e86\u6781\u5ea6\u4f18\u79c0\u7684\u505a\u6cd5 \u4e8e\u662f\u4f73\u8001\u5e08\u8fdb\u7fa4\u4e86 /kx \u4e0b\u5348\u6e9c\u53bbTencent \u73a9\u53bb\u4e86\uff0c\u7136\u540e\u5c31\u8dd1\u8def\u53bb\u7ef5\u9633\u3002","title":"Day 0.99 10.22"},{"location":"misc/CSP2021/#day-1-1023","text":"\u6211\u89c9\u5f97\u5427\uff0c\u8fd9\u6b21\u867d\u7136\u53ef\u80fd\u62ff\u4e0d\u5230\u4ec0\u4e48\u5956\uff0c\u4f46\u662f\u6536\u83b7\u633a\u5927\u7684\u3002 \u9996\u5148\u4e0a\u5348J\u7ec4\uff0c\u5fc3\u6001\u51fa\u4e86\u70b9\u5c0f\u95ee\u9898\uff0c\u5bfc\u81f4T4\u6ca1\u5199\u51fa\u6765\u3002 \u5148\u5f00 A \u9898\uff0c\u5f00\u59cb\u7684\u65f6\u5019\u6709\u70b9\u7d27\u5f20\u7ed3\u679c\u534a\u5c0f\u65f6\u624d\u770b\u51fa\u6765\u662f\u50bb\u903c\u9898\uff0c\u4f46\u662f\u6211\u5f53\u65f6\u4e00\u770b\u65f6\u95f49\u70b9\uff0c\u6211\u4ee5\u4e3a\u5df2\u7ecf\u8fc7\u53bb\u4e00\u4e2a\u5c0f\u65f6\u4e86\uff08\u5e73\u5e38\u6a21\u62df\u8d5b\u90fd\u662f8\u70b9\u5f00\u59cb\uff0c\u6240\u4ee5\u4e60\u60ef\u4e86\uff09 \u7136\u540e\u5c31\u6709\u70b9\u614c\uff0cT1\u5199\u4e86\u8dd1\u8def\u53bb\u770bT2T3. \u53d1\u73b0T3 \u4f3c\u4e4e\u662f\u4e2a\u5c0f\u6a21\u62df\uff0c\u5728\u8349\u7a3f\u7eb8\u4e0a\u7406\u4e86\u4e00\u4e0b\u601d\u8def\u5c31\u5f00\u5199\u4e86\u3002 \u4e00\u51714\u4e2a\u5927\u6837\u4f8b\uff0c\u6211\u8c03\u4e86\u56db\u6b21\uff0c\u7136\u540e\u90fd\u8fc7\u4e86\uff0c\u5199\u4e86\u4e2agen\u968f\u673a\u51fa\u4e32hack\u53d1\u73b0\u4e5f\u6ca1\u95ee\u9898\u3002 \u62ac\u5934\u4e00\u770b\u8fd8\u6709 1h40min\u3002 \u7136\u540e\u53bb\u5199T2\uff0c\u6211\u5f53\u65f6\u4ee5\u4e3a\u9898\u9762\u6ca1\u8bf4c++14\u6240\u4ee5\u4e0d\u6562\u7528auto\uff0c\u7136\u540e\u8c03\u4e86\u597d\u51e0\u6b21\u53d1\u73b0\u662f\u79bb\u6563\u5316\u51fa\u9519\u4e86\u3002 \u8fc7\u4e86\u5927\u6837\u4f8b\u8dd1\u8def\uff0c\u8fd8\u67091h\u3002 \u770b T4 \u7684\u65f6\u5019\u53d1\u73b0\u53ef\u4ee5\u76f4\u63a5 set \u533a\u95f4\u5220\u9664\uff0c\u4f46\u662f\u53d1\u73b0\u5fd8\u8bb0set\u548b\u7528\u4e86 /qd \u7a81\u7136\u53d1\u73b0 T2 \u6709\u4e2a\u5927\u6837\u4f8b\u51fa\u95ee\u9898\u4e86\uff0c\u4e8e\u662f\u56de\u53bb\u8c03\u3002 \u5927\u6982\u8fd8\u670920min \u7684\u65f6\u5019\u6ca1\u8c03\u5b8c\uff0c\u5fc3\u5c31\u6709\u70b9\u614c\u4e86\u3002 \u6700\u540e\u68c0\u67e5\u6587\u4ef6\u7684\u65f6\u5019\u7a81\u7136\u53d1\u73b0 T1 \u6709\u4e2a\u5730\u65b9\u5c11\u5199\u4e86\u7b49\u53f7\uff0c\u52a0\u4e0a\u4e4b\u540e\u6309ctrl+s \u7684\u65f6\u5019\u521a\u597d\u542c\u5230\u4e86\u6536\u5377\u7684\u58f0\u97f3\u3002 \u4f46\u662fcena\u6ca1\u6709\u663e\u793a\u6536\u5377\uff0c\u6240\u4ee5\u6211\u4f30\u8ba1\u8fd8\u662f\u5199\u5165\u4e86\u7684\u3002 \u9884\u4f30 100+40+100+0 20=240 260. \u6302\u60e8\u4e86\uff0c\u5fc3\u60c5\u6709\u70b9\u4e0d\u597d\u3002 \u4e2d\u5348\u5728dc\u9644\u8fd1\u7684\u67d0\u4e2a\u996d\u5e97\u6070\u996d\u3002 \u7136\u540e\u5728\u8f66\u4e0a\u7761\u4e86\u4e00\u89c9\u3002 \u4e0b\u5348\u8fdb\u8003\u573a\u7684\u65f6\u5019\u770b\u89c1\u4e86\u9893\u4ed9 Jess\uff0c\u8fc7\u53bb\u819c\u4e86\u4e00\u53d1\u3002 \u8fdb\u53bb\u4e4b\u540e\u53d1\u73b0\u8fd8\u662f\u4e0a\u5348\u7684\u8003\u573a\uff0c\u4e0d\u8fc7\u6362\u4e86\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u65c1\u8fb9\u7684\u4fe9\u5c0f\u54e5\u548c\u6211\u4e00\u4e2a\u59d3\uff0c\u800c\u4e14\u7b2c\u4e8c\u4e2a\u5b57\u90fd\u662fy\uff08 \u5f00\u9898\u7684\u65f6\u5019\u6709\u70b9\u4e0d\u6b62\u6240\u9519\u3002 \u8bfb\u4e8620min\u9898\uff0c\u611f\u89c9T1\u4f1a\u4e86\u4e00\u70b9\u70b9\uff0c\u5199\u4e86\u4e00\u4e0b\u53d1\u73b0\u4e0d\u5bf9\u53c8\u505c\u4e86\u3002 T2 \u770b\u4e86\u4e00\u773c\u6570\u636e\u8303\u56f4\uff1a \\(n\\le 500\\) \u3002 \u8fd9\u4e0d\u5c31\u662f\u4e00\u4e2a\u533a\u95f4DP\u5417\uff1f \u7ed3\u679c\u6211\u63a8\u7740\u63a8\u7740\u5c31\u53d1\u73b0\u4e0d\u5bf9\u52b2\uff0c\u8fd9\u73a9\u610f\u513f\u5c31\u662f\u90a3\u79cd\u4e00\u773c\u77e5\u9053\u600e\u4e48\u505a\u4f46\u5c31\u662f\u63a8\u4e0d\u51fa\u6765\u7684\u5927\u6076\u5fc3\u9898\u2026\u2026 \u7136\u540e\u6211\u5c31\u50bb\u4e86\uff0c\u4f30\u8ba1\u8981\u7206\u96f6\u4e86\u2026\u2026 \u7136\u540e\u8fd9\u65f6\u8fd8\u5269 3h40min \uff0c\u6211\u5c31\u5728\u4e0d\u65ad\u7684\u514b\u670d\u5fc3\u7406\u95ee\u9898\u3002 \u5f53\u65f6\u8fc7\u4e8e\u7d27\u5f20\uff0c\u8111\u888b\u4e00\u7247\u7a7a\u767d\uff0c\u611f\u89c9\u81ea\u5df1\u8003\u524d\u590d\u4e60\u7684\u5565\u90fd\u5fd8\u8bb0\u4e86\uff0c\u800c\u4e14\u5957\u4e0d\u4e0a\u6765\u3002 \u5927\u6982\u8fc7\u4e86 20min \u5de6\u53f3\uff0c\u6211\u60f3\u8d77\u6765\u81ea\u5df1\u5e26\u4e86\u51b0\u9547\u96ea\u78a7\uff08\u522b\u95ee\u4e3a\u4ec0\u4e48\u79cb\u5929\u5e26\u51b0\u9547\u7684\uff09\uff0c\u559d\u4e86\u4e00\u53e3\u4e4b\u540e\u5750\u4e86 5min \u51b7\u9759\u4e0b\u6765\u4e86\u3002 \u6211\u89c9\u5f97\u6211\u4e0d\u5e94\u8be5\u6d6a\u8d39\u6211\u597d\u4e0d\u5bb9\u6613\u4e89\u53d6\u8fc7\u6765\u7684\u673a\u4f1a\uff0c\u8d77\u7801\u4e0d\u80fd\u8f9c\u8d1f\u6211\u81ea\u5df1\u3002 \u4e4b\u540e\u7ec8\u4e8e\u5f00\u59cb\u5199T1\u4e86\u3002 \u53d1\u73b0 T1 \u53ef\u80fd\u662f\u4e2a\u8d2a\u5fc3\u6216\u8005\u7ebf\u6bb5\u6811\u4e0a\u4e8c\u5206\uff0c\u4f46\u662f\u4e8c\u5206\u505a\u6cd5\u5f53\u65f6\u8003\u573a\u4e0a\u7d27\u5f20\u7a81\u7136\u8111\u62bd\u4e0d\u6562\u5199\u4e86\uff0c\u7136\u540e\u5c31\u5199\u4e86\u4e00\u4e2a\u8d2a\u5fc3+\u5206\u8ba8\u8fc7\u4e86\u5927\u6837\u4f8b\u3002 \u7136\u540e\u5f53\u65f6\u5f00\u5fc3\u7684\u53eb\u4e86\u51fa\u6765\uff08\u4e0d\u662f\u5f88\u5927\u58f0\uff09\uff0c\u53c8\u5c0f\u58f0\u7684\u8bf4\u4e86\u4e00\u53e5\uff0c200pts\uff0c\u8fd9\u4e0b\u7a33\u4e86\uff08\u5f53\u65f6\u53e3\u8bef\u4e86\uff0c\u4e0d\u77e5\u9053\u6709\u54a9\u6709\u5f71\u54cd\u5230\u65c1\u8fb9\u4e24\u4f4d\u5c0f\u54e5\u7684\u5fc3\u6001\uff0c\u771f\u662f\u5bf9\u4e0d\u8d77\uff08\u3002 \u7136\u540e\u8fc7\u4e8630s\u5c31\u51b7\u9759\u4e0b\u6765\uff0c\u5199\u4e86\u4e2a gen \u62cd\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u6709\u4e9b\u60c5\u51b5\u8fd8\u6709\u95ee\u9898\uff0c\u51b3\u5b9a\u90a3\u4e00\u90e8\u5206\u5c31\u9760\u6253\u66b4\u529b\u62ff\u5206\uff0c\u4f46\u662f\u53ea\u662f\u8fc7\u4e86\u5927\u6837\u4f8b\uff0cgen\u4e4b\u540e\u6ca1\u7528\u4e86\uff08\u56e0\u4e3a\u6211\u7740\u6025\u53bb\u63a8T2 \u5fd8\u8bb0\u56de\u6765\u62cdT1\u4e86\uff09\u3002 \u4f30\u8ba1\u4f1a\u6302\u7684\u5f88\u60e8\uff0cT1 \u53ef\u80fd\u6700\u591a 40pts\u3002 \u7136\u540e\u6211\u5f53\u65f6\u63a8\u4e0d\u51fa T2 \uff0c\u56e0\u4e3a\u4e0d\u4f1a\u5904\u7406 ASB \u7684\u60c5\u51b5\u3002 \u8fd8\u81ea\u4ee5\u4e3a\u80fd\u968f\u4fbf\u641e\u51fa\u6765\u62ff 100pts \u7ed3\u679c\u6700\u540e\u5c31\u53ea\u80fd\u5199\u4e86\u4e00\u4e2a\u8fc7\u4e86\u2154\u4e2a\u5927\u6837\u4f8b\u7684\u4e1c\u897f\u4ea4\u4e0a\u53bb\u3002 \u53c8\u5f00\u59cb\u7740\u6025\u4e86\uff0c\u7ee7\u7eed\u6765\u4e86\u4e00\u53e3\u96ea\u78a7\uff0c\u7136\u540e\u53bb\u770b\u4e86\u4e0b T3\uff0c\u4ee5\u4e3a\u7279\u6b8a\u6027\u8d28\u90a3\u90e8\u5206\u5206\u5f88\u597d\u62ff\uff0c\u4f46\u662f\u6211\u9519\u4e86\u3002 \u8fd9\u65f6\u6211\u4e0d\u5f97\u4e0d\u9762\u5bf9\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u6211\u80af\u5b9a 100pts \u4e0d\u5230\u3002 \u6211\u5c31\u5728\u60f3\uff0c\u6211\u4e3a\u5565\u8003\u8bd5\u7684\u65f6\u5019\u5565\u90fd\u4f1a\u5fd8\u8bb0\uff0c\u6211\u8fd8\u503c\u4e0d\u503c\u5f97\u7ee7\u7eedOI\u3002 \uff08\u4ee5\u4e0b\u8fd9\u6bb5\u662f\u6211\u5185\u5fc3\u7684\u51e0\u6bb5\u5bf9\u767d\uff0c\u4e0d\u8bb0\u5f97\u662f\u5927\u6982\u4ec0\u4e48\u65f6\u5019\u60f3\u7684\u4e86\uff09 \u6211\u611f\u89c9\u4e3a\u5565\u6211\u5565\u90fd\u4e0d\u4f1a\u554a\uff0c\u8fd9\u6302\u5206\u6302\u8fd9\u4e48\u5927\uff0c\u522b\u4eba\u540c\u673a\u623f\u7684\u4eba\u5747200+\uff0c\u6211\u56de\u53bb\u8fd8\u6709\u8138\u5417\u3002 \u4e3a\u5565\u9694\u58c1\u5c0f\u54e5\u540e\u4e09\u9898\u90fd\u4f1a\u6253\u66b4\u529b\u554a\uff0c\u6211\u751a\u81f3\u8fde\u66b4\u529b\u90fd\u4e0d\u4f1a\u6253\u4e86\uff0c\u6211\u662f\u4e0d\u662f\u8be5\u9000\u5f79\u554a\u3002 \u6211TM\u662f\u4e0d\u662f\u56e0\u4e3a\u6ca1\u6cd5\u9759\u4e0b\u6765\u60f3\u9898\u624d\u8fd9\u6837\u7684\u554a\uff1f\uff08\u559d\u53e3\u6c34\u63a8 T2\uff09\uff0c\uff08\u8fc7\u4e8610min \u53c8\u653e\u4e0b\u8349\u7a3f\uff09\u5b8c\u4e86\u3002 \u8981\u4e0d\u5269\u4e0b\u8fd9 30min \uff0c\u6211\u5565\u90fd\u4e0d\u5199\u4e86\uff0c\u597d\u597d\u60f3\u60f3\u4e3a\u5565\u6211\u4f1a\u8fd9\u6837\u5427\uff0c\u4e5f\u7b97\u603b\u7ed3\u4e00\u4e0b\u4e86 \u8fd9\u6b21\u5e72\u8106\u5c31\u7b97\u5403\u4e2a\u6559\u8bad\uff0c\u4e4b\u524d\u521d\u8d5b\u6302\u5206\u4e0d\u4e5f\u662f\u4e00\u6837\u7684\u5417\uff1f \u7136\u540e\u5c31\u5b8c\u4e86\uff0c\u6211\u51fa\u8003\u573a\u7684\u65f6\u5019\u9047\u89c1\u7684\u7b2c\u4e00\u4e2a\u673a\u623f\u4eba\u662f xyh\uff0c\u53ea\u6709\u4ed6\u548c\u6211\u662f\u521d\u4e09\u7684\u6765\u7ef5\u9633\u8003\u7684\u3002 \u6211\uff1axyh\uff01 x\uff1a\u548b\u6837\uff1f \u6211\uff1a\u6211pjtg\u90fd\u8003\u6302\u4e86 x\uff1a\u5f7c\u6b64\u5f7c\u6b64\uff0c\u6211\u4e5f\u6302\u7684\u5f88\u60e8 (\u8ba8\u8bba\u5f7c\u6b64\u62ff\u4e86\u591a\u5c11\u90e8\u5206\u5206\uff0c\u987a\u4fbf\u8ba8\u8bba\u4e0b\u505a\u6cd5) x\uff1a \u6211\u8fd9\u6b21\u5b8c\u4e86\u5c31\u8981\u9000\u5f79\u4e86 \u6211\uff1a\u522b\u9000\u5f79\u554a\uff0c\u9000\u5f79\u5e72\u5565\uff0c\u53cd\u6b63\u6211\u6b7b\u4e5f\u4e0d\u9000\u5f79\u3002 x\uff1a\u2026\u2026 \uff08\u9a6c\u5148\u751f\u4ece\u65c1\u8fb9\u8d70\u8fc7\u53bb\uff0c\u4ed6\u4f3c\u4e4e\u5fc3\u60c5\u4e0d\u592a\u597d\uff0c\u53ef\u80fd\u662f\u8003\u6302\u4e86\uff09 \u51fa\u6821\u95e8\u4e4b\u540eXyh\u7684\u7236\u4eb2\u95ee\u6211\u5982\u4f55\uff1a \u6211\uff1a\u90fd\u8003\u6302\u4e86\u2026\u2026 Xyh\u7684\u7236\u4eb2\uff1a\u4f60\u592a\u8c26\u865a\u4e86\uff0c\u600e\u4e48\u53ef\u80fd\u5417\u2026\u2026 \u6211\uff1a\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\uff08\u8fc7\u4e86\u51e0\u79d2\uff09\uff0c\uff08\u62cdxyh\uff09\u7b54\u5e94\u6211\u4e0d\u8981\u9000\u5f79\u554a\uff01 Xyh\u7236\u4eb2\uff1a\u9000\u5f79\u662f\u5565\u610f\u601d\uff08\u95eexyh\uff09 \u7136\u540e\u6211\u5c31\u8d70\u4e86 \u56de\u5bb6\u5230 Academic Group \u91cc\u9762\u95ee\u4e86\u95ee\uff0c\u53d1\u73b0\u5927\u5bb6\u90fd\u6302\u7684\u5f88\u60e8\u3002 \u5305\u62ec\u4f46\u4e0d\u9650\u4e8e Dave,Turtle,ACO,Ty,Charles \u2026\u2026 \u7136\u540e FST \u7fa4\u4e5f\u5728\u8ba8\u8bba\u6302\u5206\u7684\u4e8b\u513f\u2026\u2026 Xcel \u9000\u7fa4\u4e86\uff0c\u4ed6\u8bf4\u4ed6\u548c\u4ed6\u7236\u6bcd\u5546\u91cf\uff0c\u51c6\u5907AFO\u4e86\uff0c\u795d\u4ed6\u597d\u8fd0\u3002 \u6211\u89c9\u5f97\u5427\uff0c\u4e0d\u7ba1\u62ff\u4e0d\u62ff\u5956\uff0c\u603b\u7ed3\u4e00\u4e0b\u662f\u5f88\u6709\u5fc5\u8981\u7684\uff1a \u5fc3\u6001\u95ee\u9898\u592a\u5927\uff0c\u8003\u8bd5\u7684\u65f6\u5019\u5b8c\u5168\u6ca1\u6709\u6a21\u62df\u8d5b\u65f6\u5019\u7684\u90a3\u79cd\u81ea\u4fe1\uff0c \u4eba\u6bd4\u8f83\u6d6e\u8e81\uff0c\u6ca1\u6cd5\u4e13\u5fc3\u7684\u505a\u4e8b\u60c5\uff08\u8fd9\u4e2a\u662f\u5927\u95ee\u9898\uff0cwhk\u4e0a\u4e5f\u9700\u8981\u6539\uff09 \u611f\u89c9\u81ea\u5df1\u8fd8\u662f\u5728\u4e3a\u4e86\u522b\u4eba\u7684\u79f0\u8d5e\u800c\u6d3b\uff0c\u6d3b\u4e0d\u51fa\u81ea\u5df1\u7684\u6d12\u8131\uff08\u8fd9\u4e5f\u662f\u4e2a\u5927\u95ee\u9898\uff09 \u6c34\u5e73\u8fd8\u771f\u7684\u4e0d\u591f\u3002 \u51b3\u5b9a\u4e4b\u540e\u8fd9\u4e00\u5e74\u9700\u8981\u505a\u8fd9\u4e9b\u4e8b\u513f\uff1a \u8fd9\u6b21\u5fc5\u987b\u8981\u5b8c\u6210\u4e86 \u521d\u8d5b\u4fdd\u969c 95pts CF \u601d\u7ef4\u9898\u9898\u5355 AK+Solution \u63d0\u9ad8 algor \u5168\u90e8\u5b66\u5b8c + \u4e00\u70b9\u7701\u9009\u57fa\u7840 \u8865\u5b8c RFJ \u9898\u5355\u3002 CF & AT VP 50+ CF & AT RC 15+ \u6a21\u62df\u8d5b 10+ \u4eca\u5e74\u6b62\u6b65\u4e8e\u6b64\uff0c\u660e\u5e74\u6211\u56de\u6765\u7684\u65f6\u5019\u8981\u8ba9\u60a8\u4eec\u770b\u5230\u6211\u6700\u9ad8\u7684\u5b9e\u529b\uff01","title":"Day 1 10.23"},{"location":"misc/CSP2022/","text":"CSP2022 \u6e38\u8bb0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e45\u8fdc\u7684\u8fc7\u53bb \u03c8(\uff40\u2207\u00b4)\u03c8 \u9000\u5f79\u4e86\u3002 \u6587\u5316\u8bfe\u4e86\u3002 \u4e1a\u4f59\u4f11\u95f2\u9009\u624b\uff0c\u7814\u7a76\u4e86\u4e00\u70b9\u57fa\u7840\u7684\u4e1c\u897f\uff0c\u7b97\u662f\u7ed9\u4e4b\u524d\u8fd8\u503a\u4e86\u3002 \u81ea\u5df1\u7684\u8ba1\u5212\u5b8c\u6210\u5ea6\u8fd8\u662f\u5f88\u4f4e\u3002\u3002\u3002 9.16\uff0c\u521d\u8d5b\u524d\u4e24\u5929 \u03c8(\uff40\u2207\u00b4)\u03c8 \u505a\u4e86\u5957\u521d\u8d5b\u6a21\u62df\u5377\u5b50\uff0c\u4eff\u771f\u4e86\u7ebf\u4e0a\u73af\u5883\uff0c\u4e0d\u8fc7\u62ff\u5230\u5377\u5b50\u5df2\u7ecf\u5f00\u59cb 20min\u591a\u4e86\uff0c\u56e0\u4e3a\u6ca1\u6709\u63d0\u524d\u8c03\u8bd5\u597d\u8bbe\u5907\u3002 \u8003\u4e86\u4e2a 75.5\uff0c\u6bd4\u4e4b\u524d\u90fd\u597d\uff0c\u4e0d\u8fc7\u53ef\u80fd\u6709\u8fd0\u6c14\u6210\u5206\u3002 \u5341\u516d\u8fdb\u5236\u90a3\u9898\u8499\u5bf9\u4e86\uff0c\u51e0\u4e2a\u7ec4\u5408\u6570\u5b66\u9898\u505a\u5bf9\u4e86\uff0c15 \u9898\u5bb9\u65a5+\u6570\u8bba\u6ca1\u6765\u5f97\u53ca\u7b97\u3002 \u4f46\u662f\u975e\u5e38\u751f\u6c14\u554a\uff0c\u4e4b\u524d\u81ea\u5df1\u5b66\u4e86\u63d2\u677f\u6cd5\u8fd8\u7ed9 OI-wiki \u5199\u4e86\u63d2\u677f\u6cd5\u7684\u5185\u5bb9\uff0c\u7ed3\u679c\u63d2\u677f\u6cd5\u7684\u9001\u5206\u586b\u7a7a\u9898\u6ca1\u505a\u5bf9\u3002 \u7136\u540e\u7b2c\u56db\u9898\u90a3\u4e2a\u7b80\u5355\u5206\u8ba8\u7ec4\u5408\uff0c\u56e0\u4e3a tm \u7684\u628a\u7ec4\u5408\u6570\u548c\u6392\u5217\u6570\u516c\u5f0f\u5f04\u6df7\u4e86\u81ea\u5df1\u6ca1\u53d1\u73b0\uff0c\u6655\u5934\u6655\u8111\u7684\u3002 \u7136\u540e\u611f\u89c9\u5bf9\u4e8e \u91cd\u590d\u8ba1\u6570 \u8fd9\u4e2a\u65b9\u9762\u72af\u9519\u5f88\u591a\uff0c\u611f\u89c9\u6709\u7684\u65f6\u5019\u6ca1\u6cd5\u7406\u89e3\uff0c\u4e4b\u540e\u8981\u591a\u7ec3\u4e60\u3002 \u4e3b\u5b9a\u7406\u90a3\u4e2a\u9898\u5e94\u8be5\u79d2\u6740\u7684\uff01\u8fd8\u662f\u82b1\u4e86\u4e00\u70b9\u70b9\u65f6\u95f4\u3002 \u56db\u8272\u5b9a\u7406\u90a3\u4e2a\u9898\u6ca1\u641e\u61c2\uff0c\u56e0\u4e3a\u91cd\u590d\u8ba1\u6570\u3002\u3002\u3002\uff0c\u4e4b\u540e\u5199\u5230\u6570\u5b66\u7684\u9519\u9898\u672c\u4e0a\u9762\u5427\u3002 \u7136\u540e tm \u7684\u6ca1\u8010\u5fc3\u5206\u6790\u7a0b\u5e8f\u5b8c\u578b\u90a3\u4e2a\u4f18\u5148\u961f\u5217\u9898\u3002 \u611f\u89c9\u603b\u4f53\u8fd8\u662f\u7d27\u5f20\u4e86\uff0c\u4e0d\u8fc7\u5fc3\u6001\u8f83\u4e8e\u4e4b\u524d\u81ea\u4fe1\u4e86\u5f88\u591a\uff0c\u800c\u4e14\u51ed\u7740\u7b2c\u4e00\u76f4\u89c9\u8499\u5bf9\u4e86\u4e0d\u5c11\uff01\u3002 \u660e\u5929\u6a21\u62df\u7684\u65f6\u5019\u51c6\u5907\u591a\u4e00\u70b9\u6c34\uff0c\u7136\u540e\u4e00\u5305\u6e7f\u7eb8\u5dfe\u7528\u6765\u51b7\u9759\uff0c\u7136\u540e\u8349\u7a3f\u7eb8\u5c3d\u91cf\u6709\u6761\u7406\u4e00\u70b9\u3002 \u6709\u4e00\u4e9b\u516c\u5f0f\u4ec0\u4e48\u7684\uff0c\u5982\u679c\u81ea\u5df1\u611f\u89c9 \u5370\u8c61\u6709\u70b9\u6a21\u7cca\u4e86 \uff0c\u4e00\u5b9a\u8981\u5199\u51fa\u6765\uff01 \u7136\u540e\u66b4\u529b\u4eba\u5de5\u6808\u8bb0\u5f97\u5f04\u6210\u4ee3\u7801\u7f29\u8fdb\u5f0f\u7684\u3002 \u4eca\u5929\u8bbe\u5907\u51fa\u4e86\u4e00\u70b9\u95ee\u9898\uff0cIpad \u5f55\u5c4f\u7a7a\u95f4\u4e0d\u591f\uff0c\u800c\u4e14\u62cd\u6444\u4f4d\u7f6e\u4e0d\u591f\u6e05\u6670\u3002 \u800c\u4e14\u8fdb\u53bb\u7684\u5306\u5306\u5fd9\u5fd9\u7684\u3002\u3002\u3002\u3002\u3002\u4e0d\u8fc7\u4e5f\u597d\uff0c\u7b97\u662f\u4e00\u4e2a\u53cd\u4f8b\u4e86\u3002 \u5199\u5b8c\u65e5\u8bb0\u5c31\u53bb\u7761\u89c9\u4e86\u3002 9.17\uff0c\u521d\u8d5b\u524d\u4e00\u5929 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5403\u4e86\u7897\u70ed\u5e72\u9762+\u714e\u86cb\uff08\u70ed\u5e72\u9762\u662f\u4e4b\u524d\u5c01\u57ce\u7684\u65f6\u5019\u4e70\u7684\uff09 \u53c8\u505a\u4e86\u4e00\u5957\u521d\u8d5b\u6a21\u62df\u5377\u5b50\uff0c\u8fdb\u53bb\u53c8\u662f 10 min \u591a\u4e86\uff0c\u56e0\u4e3a\u4ee5\u4e3a\u4e0d\u5f04\u7ebf\u4e0a\u3002 \u8fd9\u6b21\u9898\u8981\u96be\u5f97\u591a\uff0c\u4e0d\u8fc7\u8003\u7684\u66f4\u9ad8\u4e86\uff0c81.5\uff0887.5\uff09\uff0c\u56e0\u4e3a\u6700\u540e\u68c0\u67e5\u4e0d\u4ed4\u7ec6\u586b\u9519\u4e86\u4e24\u4e2a 3 \u5206\u7684\u7a7a\uff0c\u4e8e\u662f\u5c11\u4e86 6pts\u3002 \u4e0d\u7136\u80fd rk4\uff0c\u73b0\u5728\u53d8\u6210 rk8 \u4e86 /ng\uff0cxzq \u53c8\u4e00\u6b21\u767b\u9876 rk1 \u4e86\u3002\u3002\u3002\u3002\u3002\u5f3a \u7136\u540e\u6574\u4f53\u5fc3\u6001\u5f88\u4e0d\u9519\uff0c\u5c31\u662f\u4e00\u8def\u60a0\u95f2\u5730\u54fc\u7740\u6b4c\u505a\u5b8c\u7684\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u6628\u665a\u8003\u51fa\u4fe1\u5fc3\u4e86\u5427\u3002 T3 \u90a3\u4e2a\u6b27\u62c9\u56de\u8def\u7684\u5b9a\u4e49\u770b\u8d70\u773c\u4e86\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u5bf9\u201c\u95ed\u8def\u201d\u7684\u7406\u89e3\u9519\u4e86\u3002 \u7136\u540e T7 \u90a3\u4e2a\u5173\u4e8e TCP \u7f51\u7edc\u534f\u8bae\u7684\uff0c\u56e0\u4e3a\u6ca1\u6709\u80cc\u8fc7\u9020\u7403\u4e86\u3002 \u7ec4\u5408\u6570\u5b66\u9898\u4f9d\u7136\u7a33\u5b9a\u53d1\u6325\u5168\u505a\u5bf9\u3002 \u4e00\u4e2a\u5904\u7406\u77e9\u9635\u7684\u9898\uff0c\u6709\u70b9\u6ca1\u5fc3\u6c14\u8bfb\uff0c\u6700\u540e\u4e00\u9898\u662f\u677f\u677f\u6811\u5256\uff0c\u9ca8\u5375\u3002 T15 \u90a3\u4e2a\u8fd0\u7b97\u7b26\u987a\u5e8f\u4f9d\u7a00\u8bb0\u5f97 mod \\(>\\) + \\(>\\) xor \uff0c\u7ed3\u679c\u5bf9\u4e86\uff0c\u4e4b\u540e\u9700\u8981\u8bb0\u4e00\u8bb0\u4e86\u3002 \u9605\u8bfb\u7b2c\u4e00\u9898\u90a3\u4e2a\u6784\u9020 \\(a_i = cnt(i)\\) \u7684\u65b9\u6848\u6570\u7684\u9898\u5f88\u6709\u610f\u601d\uff0c\u8bf4\u4e0d\u5b9a\u53ef\u4ee5\u62ff\u6765\u51fa CF\u3002 \u7136\u540e\u90a3\u4e2a\u9898\u6700\u540e\u4e24\u95ee\u5168\u90e8\u9519\u5b8c\uff0c\u96be\u8fc7\uff0c\u4f46\u662f \\(\\sum a_i = n\\) \u7684\u7ed3\u8bba\u597d\u50cf\u662f\u5bf9\u7684\uff1f\uff1f\uff1f\u795e\u5947 \u8fd8\u6709\u5c31\u662f\u505a\u9898\u901f\u5ea6\u6709\u70b9\u6162\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u53ef\u80fd\u662f\u592a\u95f2\u4e86\u7684\u7f18\u6545\u3002\u3002\u3002\u3002\u3002 1h20m \u624d\u505a\u5b8c\u3002 \u4e0d\u8fc7\u8fd9\u4e2a\u6691\u5047\u7684\u52aa\u529b\u80af\u5b9a\u662f\u56e0\u7d20\u4e4b\u4e00\u5427\uff0c\u5728\u6709\u5f88\u91cd\u7684 whk \u538b\u529b\u7684\u540c\u65f6\u8fd8\u4ecd\u7136\u4fdd\u6301 OI\uff0c\u6bd4\u6211\u4e4b\u524d\u6d51\u6d51\u5669\u5669\u7684\u505c\u8bfe\u4e09\u4e2a\u6708\u6709\u6548\u591a\u4e86\u3002 CodeForces Rating \u4e5f\u662f\u3002 \u7136\u540e\u8bbe\u5907\u8c03\u8bd5\u7684\u5dee\u4e0d\u591a\u4e86\u3002 \u6628\u5929\u603b\u7ed3\u7684\u5fc3\u6001\uff0c\u601d\u8def\uff0c\u8349\u7a3f\u95ee\u9898\u4eca\u5929\u90fd\u89e3\u51b3\u4e86\u3002 \u53cd\u6b63\u5c31\u50cf\u6211\u7238\u5988\u8bf4\u7684\uff1a\u4e0d\u7ba1\u662f NOIP\uff0c\u9ad8\u8003\uff0c\u8fd8\u662f\u4ec0\u4e48\u8003\u8bd5\uff0c\u7528\u4f60\u7684\u5e73\u5e38\u5fc3\u5bf9\u5f85\uff08\u751a\u81f3\u544a\u8bc9\u6211\u9ad8\u8003\u7684\u65f6\u5019\u8ba9\u6211\u81ea\u5df1\u8d70\u8def\u53bb\u4e0d\u9001\u6211\uff08\uff08\uff08\uff08\uff08\uff08 \u5728 luogu \u4e0a\u9762\u56de\u7b54\u4e86\u51e0\u4e2a\u5c0f\u670b\u53cb\u7684\u95ee\u9898\uff0c\u7b97\u662f\u590d\u4e60\u3002 \u4e0b\u5348\u8fd8\u6709\u4e00\u5957 hb \u7684\u6a21\u62df\uff0c\u628a Osu \u4e0b\u56de\u6765\u4e86\uff0c\u6253\u5b8c\u5982\u679c\u8fd8\u884c\u9893\u4e00\u628a\u3002 \u5988\u7684\uff0c\u6253\u5b8c\u5b8c\u5168\u5410\u6389\u4e86\u3002 \u53ea\u6709 36 pts\u3002 \u9605\u8bfb\u7a0b\u5e8f\u5b8c\u5168\u88ab\u51fb\u98de\uff0c\u7ec4\u5408\u6570\u5b66\u9898\u5168\u90e8\u5bc4\u5b8c\u3002 \u611f\u89c9\u662f\u5fc3\u6001\u5b8c\u5168\u7206\u70b8\u7684\u7f18\u6545\uff0c\u76f4\u63a5\u6ca1\u6709\u5fc3\u6c14\u8bfb\u9898\u4e86\u3002 \u51e0\u4e2a\u7ec4\u5408\u6570\u5b66\u9898\u5f88\u6709\u610f\u601d\uff0c\u5f00\u4e86\u4e00\u4e2a\u5c0f\u4e13\u9898\u7528\u6765\u8bb0\u5f55\uff0c\u7136\u540e\u7a0d\u5fae\u6539\u4e86\u6539\u535a\u5ba2\u67b6\u6784\uff0c\u52a0\u4e86 Comment System\u3002 \u6700\u540e\u9762\u90a3\u51e0\u4e2a\u9605\u8bfb\u771f\u7684\u662f\u5657\u53fd\u7b97\u6cd5\u5e72\u7206\u4e00\u5806\u4eba\u554a\u3002\u3002\u3002\u3002 \u771f\u7684\u96be\u8bfb\u9898\uff0c\uff0c\uff0c\uff0c\u6700\u540e\u4e00\u9898\u5176\u5b9e\u672c\u8d28\u4e0a\u662f ODT\uff0c\u6709\u4e00\u4e2a\u6211\u778e\u731c\u7684\u9898\u5c45\u7136\u662f\u5947\u602a\u7684\u6c42\u6b27\u62c9\u8def\u3002\u3002\u3002 \u7136\u540e\u53c8\u81ed\u53c8\u957f\u7684 dp\uff0c\u6bd4\u8f83\u9633\u95f4\u4f46\u662f\u5fc3\u6c14\u4e0d\u884c\u76f4\u63a5\u6302\u6389\u4e86\uff0c\u4e00\u4e9b\u603b\u7ed3\u597d\u7684\u4e60\u60ef\u4e5f\u6ca1\u6709\u7528\u4e0a\u3002 \u660e\u5929\u4e00\u5b9a\u8981\u5173\u7a97\u7136\u540e\u5f00\u4e2a\u7a7a\u8c03\uff0c\u4fdd\u6301\u6e05\u9192\uff0c\u907f\u5f00\u697c\u4e0b\u5fd7\u613f\u8005\u90a3\u4e2a\u5faa\u73af\u4e00\u4e2a\u5c0f\u65f6\u7684\u5e7f\u64ad\ud83d\ude05\u3002 \u665a\u4e0a\u5c31\u662f\u542c\u4f73\u7238\u8bb2\u9898\uff0c\u7136\u540e\u505a\u4e00\u4e0b\u7ec4\u5408\u6570\u5b66\u7684\u4e00\u4e9b\u8bb0\u5f55\u4e4b\u7c7b\u7684\uff0c\u7136\u540e\u5f04\u4e86\u4e00\u4e2a\u521d\u8d5b\u6ce8\u610f\u4e8b\u9879\u3002 9.18 \u521d\u8d5b \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e0a\u5348\u5403\u4e86\u70ed\u5e72\u9762 + \u4e24\u4e2a\u86cb\uff0c\u6628\u5929\u5403\u4e86\u4e00\u4e2a\u86cb\uff0c\u53ea\u8003\u597d\u4e86\u4e00\u6b21\uff0c\u4eca\u5929\u5403\u4e86\u4e24\u4e2a\u86cb\uff0c\u90a3\u5c31\u662f\u8003\u597d\u4e24\u6b21\uff08\u786e\u4fe1 \u5657\u53fd\u7ec4\u6574\u4f53\u96be\u5ea6\u4e0d\u662f\u5f88\u5927\u5427\uff0c\u53ef\u80fd 1h \u5de6\u53f3\u5269\u4e86\u51e0\u4e2a\u9898\uff0c\u7136\u540e\u6162\u6162\u78e8\u3002 \u6709\u4e00\u4e9b\u9898\u4e0d\u662f\u5f88\u786e\u5b9a\uff0c\u6bd4\u5982 Haffman\uff0cdouble \u7684\u7cbe\u5ea6\uff08\u725b\u987f\u8fed\u4ee3\u5f00\u6839\u53f7\u90a3\u4e2a\u9898\uff09\uff08pj \u600e\u4e48\u4f1a\u6709\u725b\u8fed\u554a\uff01 \u7136\u540e\u6574\u4f53\u90fd\u5f88\u6c34\uff0c\u8fde\u4e2a\u6570\u6570\u9898\u6ca1\u6709\u3002 \u4e0d\u8fc7\u4e2d\u95f4\u53d7\u5230\u9632\u7a7a\u8b66\u62a5\u7684\u5e72\u6270\u4e86\uff0c\u4e5f\u6ca1\u4e8b\uff0c\u8fd9\u662f\u5fc5\u987b\u8981\u653e\u7684\u3002 \u7136\u540e\u53d1\u73b0\u662f\u8981\u5f00\u7b54\u9898\u673a\u5668\u7684\u9ea6\u7684\uff0c\u4e8e\u662f\u4f1a\u6709\u70b9\u5435\uff0c\u6211\u628a\u7b54\u9898\u673a\u5668\u97f3\u91cf\u8c03\u5c0f\u4e86\u4e00\u70b9\u70b9\uff0c\u662f\u5728\u6211\u80fd\u542c\u5230\uff0c\u4f46\u662f\u4e0d\u5f71\u54cd\u6211\u7684\u97f3\u91cf\u4e0a\u3002 \u540e\u9762\u6709\u4e00\u4e2a\u5c0f\u670b\u53cb\u76f4\u63a5\u53eb\u51fa\u6765\uff1a\u201c\u600e\u4e48\u8fd9\u4e48\u96be\uff01\uff1f\uff1f\uff1fOh No\uff01\uff01\uff01\uff01\u201d \u8349\uff0c\u53ef\u80fd\u662f\u6ca1\u89c1\u8bc6\u8fc7\u524d\u4e24\u5e74\u7684 PJ\uff0c\u4eca\u5e74\u603b\u4f53\u4e0a PJ \u6bd4\u53bb\u5e74\u7b80\u5355\u591a\u4e86\u3002 80+ \u5e94\u8be5\u662f\u6ca1\u6709\u95ee\u9898\u7684\u4e86\uff0c\u8fc7\u521d\u8d5b\u5e94\u8be5\u53ef\u4ee5\uff0c\u8d5b\u540e\u8dd1\u4e86\u4e00\u8dd1\u725b\u987f\u8fed\u4ee3\uff0c\u53d1\u73b0\u5b83\u4e0d\u662f\u7528 eps \u800c\u662f\u76f4\u63a5 ==\uff0c\u663e\u7136\u6709\u95ee\u9898\u4f46\u662f\u6211\u5f53\u65f6\u6ca1\u6709\u770b\u51fa\u6765\uff01 \u7136\u540e\u5403\u4e86\u987f\u597d\u7684\uff0c\u53bb\u7761\u4e86\u4e2a\u89c9\uff0c\u51c6\u5907\u4e0b\u5348\u7684 TG\u4e86\u3002 \u8bb0\u4f4f\uff0c\u8981\u953b\u70bc\u7684\u5c31\u662f\u4e0d\u88ab\u5916\u90e8\u73af\u5883\u5f71\u54cd\u5fc3\u6001/\u601d\u8003/\u601d\u8def\u7684\u80fd\u529b\uff0c\u53ea\u8981\u94bb\u8fdb\u53bb\u601d\u8003\u5c31\u884c\u4e86\uff01 \u7edd\u5bf9\u4e0d\u8981\u81ea\u5df1\u89c9\u5f97\uff0c\u597d\u96be\u554a~~\uff0c\u8fd9\u6837\u662f\u8d1f\u9762\u7684\u5fc3\u7406\u6697\u793a\u3002 \u60f3\u7740\uff0c\u6211\u5c31\u7b97\u8fc7\u4e0d\u4e86\uff0c\u4e5f\u6743\u5f53\u4eab\u53d7\u6bd4\u8d5b\u4e86\uff0c\u6211\u80af\u5b9a\u8981\u9759\u4e0b\u5fc3\u6765\u53bb\u8bfb\u7a0b\u5e8f\uff0c\u4e0d\u8981\u82b1\u65f6\u95f4\u5728\u6ca1\u6709\u601d\u8003\u7684\u6263\u624b\u4e0a\u9762\u3002 \u53ea\u8981\u6ca1\u601d\u8def\u4e86\uff0c\u4e0d\u662f\u8df3\u8fc7\u5c31\u662f\u7528\u7b14\u5f00\u59cb\u5199\u53ef\u80fd\u601d\u8def\uff01 \u53cd\u6b63\u653e\u5e73\u5fc3\u6001\u3002 \u4e0b\u5348\u5f00\u8003\uff0c\u63d0\u65e9\u8fdb\u8003\u573a\uff0c\u53d1\u73b0\u548c gjh \u4e00\u4e2a\u8003\u573a\uff0c\u90ed\u54e5\u592a\u5e05\u4e86 /se/se/se \u7136\u540e\u5c31\u5f00\u59cb\u505a\uff0c\u5f00\u59cb\u7684\u65f6\u5019\u611f\u89c9\u9009\u62e9\u9898\u6bd4\u8f83\u96be\uff0c\u7136\u540e\u7b80\u5355\u505a\u4e86\u51e0\u9898\u5c31\u5148\u770b\u540e\u9762\u7a0b\u5e8f\u90e8\u5206\u4e86\u3002 \u7136\u540e\u770b\u5230 j = 0; j < n; j *= 2 \u76f4\u63a5\u868c\u57e0\uff1f\uff1f\uff1f\uff1f \u7136\u540e\u6211\u731c\u4e4b\u540e\u4f1a\u6539\u6210 1\uff0c\u9009\u4e86 \\(\\log\\) \u76f4\u63a5\u8dd1\u8def\uff0c\u540e\u9762\u786e\u5b9e\u6539\u4e86\u3002 \u770b\u5230\u540e\u9762\u7684\u9898\u6bd4\u8f83\u7b80\u5355\u4e4b\u540e\u6e9c\u56de\u53bb\u9759\u4e0b\u5fc3\u770b\u9009\u62e9\u4e86\u3002 \u7136\u540e\u88ab 10 \u9898\u868c\u57e0\u4e86\uff0c\u6211\u600e\u4e48\u7b97\u90fd\u662f 105\uff0c\u5361\u4e86 20min\uff0c\u53ea\u80fd\u968f\u4fbf\u9009\u4e86\u4e00\u4e2a\u7b54\u6848\u8d70\u4eba\u3002 \u7ed3\u679c\u51fa\u9898\u4eba\u8bed\u6587\u53ef\u80fd\u662f\u9003\u8bfe\u4e86\uff0c\u6839\u672c\u6ca1\u8bf4\u6e05\u695a\u5927\u4f5c\u4e1a\u662f tm \u51e0\u4e2a\u4eba\u505a\u554a\uff01\u539f\u6765\u7b54\u6848\u76f4\u63a5\u5c31\u662f \\(\\dbinom{8}{2}\\) \u554a \uff01 md\u3002 \u7136\u540e\u540e\u9762\u9605\u8bfb T1 \u4ee5\u4e3a\u662f\u4e2a KMP\uff0c\u5fd8\u8bb0\u4e86\uff0c\u540e\u9762\u53d1\u73b0 KMP \u597d\u50cf\u662f\u8981\u8df3 Next \u7684\uff0c\u8fd9\u4e2a\u6ca1\u6709\u8df3\u3002 \u7136\u540e\u6539\u4e86\u4e00\u4e0b\u6700\u540e\u4e00\u95ee\u7684\u7b54\u6848\uff0c\u4f46\u662f\u6ca1\u6765\u5f97\u53ca\u624b\u5b8c\u4e00\u4e0b\uff0c\u7136\u540e\u590d\u6742\u5ea6\u5c31\u6ca1\u6539\u8fc7\u6765\u3002\u3002\u3002 \u770b\u7740\u9605\u8bfb T2 \u641e\u4e86\u4e00\u4f1a\uff0c\u53d1\u73b0\u662f\u4e2a\u8fdb\u5236\u8f6c\u6362\uff0c\u5feb\u4e50\u505a\u5b8c\u8d70\u4eba\u3002 \u4f46\u662f\u6ca1\u770b\u5230 28 \u7684 n \u6ca1\u6709\u52a0\u7edd\u5bf9\u503c\uff0cmd\uff0c\u5751\u4eba\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01 \u6700\u540e\u4e00\u9898\u7b97\u9519\u4e86/ng \u5f52\u5e76\u7b2c k \u5c0f\u6ca1\u7406\u89e3\u592a\u6e05\u695a\uff0c\u9519\u4e86\u4e24\u4e2a\u3002 \u6700\u540e\u4e00\u9898\uff0c\u53bb\u5e74\u56db\u6bdb\u5b50\u5728\u8fd9\u91cc\uff0c\u7ed3\u679c\u600e\u4e48\u662f\u4e2a\u9ca8\u5375 dp \uff1f\uff1f\uff1f\uff1f\uff1f \u8d5b\u540e\u6d4b\u7b54\u6848\uff0c\u5bf9\u4e86 U \u7fa4\u7684\u7b54\u6848\uff0c\u7136\u540e\u53d1\u73b0\u662f 63.5\uff1f\uff1f\uff1f\uff1f \u5988\u7684\u5bc4\u4e86\u554a\uff0c\u5f00\u59cb\u751f\u6c14\uff01\uff01\uff01 \u540e\u9762\u51fa\u53bb\u7406\u53d1\uff0c\u7ed3\u679c\u4e00\u8def\u5012\u9709\uff0c\u5148\u662f\u8fde\u7740\u9047\u5230\u4e24\u4e2a\u7eff\u706f\u7a81\u7136\u53d8\u7ea2\uff0c \u7136\u540e\u53c8\u662f\u7406\u53d1\u5e97\u5168\u6ee1\u4eba\u3002 \u56de\u6765\u5feb\u8fdb\u5c0f\u533a\u4e86\u8001\u7238\u624d\u8bf4\u8ba9\u6211\u53bb\u9633\u53f0\u90a3\u8fb9\uff0c\u628a\u6211\u7684\u516c\u4ea4\u5361\u63a5\u4f4f\u53bb\u51b2\u5361\u3002 \u7ed3\u679c\u53d1\u73b0\u6691\u5047\u8865\u8bfe\u7684\u65f6\u5019\u5df2\u7ecf\u51b2\u4e86 30 \u591a\u5757\u4e86\uff0c\u56e0\u4e3a\u5f53\u65f6\u7684\u75ab\u60c5\uff0c\u5c31\u6ca1\u7528\u3002 \u7136\u540e\u5c31\u5404\u79cd\u5012\u9709\u3002\u3002\u3002\u3002 \u6211\u5f53\u65f6\u5728\u60f3\uff0c\u4e5f\u8bb8\u662f\u4e0b\u5348 rp \u7528\u5b8c\u4e86\uff0c\u4e8e\u662f\u4eba\u54c1\u8fd9\u4e48\u70c2\u3002 \u7136\u540e\u56de\u6765\u5403\u4e86\u4e2a\u996d\u3002 \u53bb\u5c0f\u56fe\u7075\u5bf9\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0 79 \uff1f\uff1f\uff1f \u8fc7\u4e86\u4e00\u4f1a\u53d1\u73b0\u597d\u50cf\u6211\u7528 U \u7fa4\u7684\u7b54\u6848\u7b97\u9519\u4e86\uff01\uff01\uff01\uff01 \u4ed4\u7ec6\u9a8c\u8bc1\u53d1\u73b0\u786e\u5b9e\uff01\uff01\uff0170\u5e94\u8be5\u6709\u4e86\uff01\uff01\uff01\uff01\uff01\uff08\u5982\u679c\u4e89\u8bae\u9898\u518d\u7ed9\u70b9\u5206\u5c31\u597d\u4e86\uff01\uff01\uff011\uff09 \u4e5f\u8bb8\u80fd\u8fc7\u5427\uff0c\u7136\u540e \u5657\u53fd\u53ef\u80fd\u56e0\u4e3a\u778e\u8003\uff0c\u5927\u6982\u7387\u53c8\u6ca1\u6709 tg \u9ad8/ng \u4e0d\u8fc7\u8fd9\u6b21 pj\uff0ctg\u90fd\u6bd4\u4e4b\u524d\u9ad8\u4e86 10pts\u5de6\u53f3\uff0c\u4e5f\u7b97\u8fdb\u6b65\u4e86\u3002 \u4e4b\u524d\u7b2c\u4e00\u6b21\u53ea\u8003\u4e86 J1\uff0c\u6ca1\u8fc7\uff0c\u7b2c\u4e8c\u6b21\u8003\u4e86 J1\uff0cS1\uff0c\u90fd\u6ca1\u8fc7\u3002 \u7b2c\u4e09\u6b21\u53ea\u8fc7\u4e86 S1\uff0cJ1 \u9760\u7740\u5956\u52b1\u540d\u989d\u8fdb\u53bb\u4e86\u3002 \u8fd9\u6b21\u4e5f\u8bb8\u5c31\u662f\u5168\u8fdb\u53bb\u4e86\u5427\uff01 \u665a\u4e0a\u6536\u62fe\u4e86\u4e00\u4e0b\u4e1c\u897f\uff0c\u660e\u5929\u5f00\u5b66\u4e86\uff0c\u5230\u65f6\u5019\u5728\u8f66\u4e0a\u53ef\u4ee5\u505a\u4e00\u70b9 KMP \u9898\u3002 9.20\uff0c\u5f00\u5b66\u7b2c\u4e8c\u5929 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4eca\u5929\u5728\u548c JX \u8fd8\u6709 FST \u5546\u91cf\u4e4b\u540e\u5728\u5b66\u6821 OI \u7684\u65f6\u95f4\u3002 \u5dee\u4e0d\u591a\u662f\u5316\u751f\u8bed\u8fd9\u4e09\u79d1\u7684\u8865\u5dee\u4e0d\u4e0a\uff0c\u5176\u4ed6\u90fd\u4e0a\u3002 \u7136\u540e\u5bf9\u4e86\u4e00\u4e0b\u521d\u8d5b\u7b54\u6848\uff08\u542c\u8bf4\u662f official answer\uff09\uff0cTG 76.5\uff0c\u7136\u540e\u542c\u8bf4\u82cf\u5dde\u5206\u6570\u7ebf\u662f 75\uff0c \u6240\u4ee5\u5728\u6210\u90fd\u4e5f\u5e94\u8be5\u8fc7\u4e86\u3002 upd : \u666e\u53ca 71.5, tg 77.5\uff0c\u53c8\u4e00\u6b21\u521b\u4e0b\u4e86\u63d0\u9ad8 \u300b \u666e\u53ca\u7684\u8bb0\u5f55\u3002 10.19\uff0c\u8fc7\u4e86\u5f88\u4e45\u4e4b\u540e \u03c8(\uff40\u2207\u00b4)\u03c8 \u7b80\u5355\u63d0\u4e00\u53e5\u6700\u8fd1\u90fd\u5728\u5e72\u5565\u5427\uff0c\u62ff Atcoder \u7684 DP contest \u7ec3\u4e86\u4e0b\u624b\uff0c\u4e0d\u8fc7\u73b0\u5728\u8fd8\u6709 7 \u4e2a\u9898\u6ca1\u505a\u3002 \u7136\u540e\u590d\u4e60\u4e86\u4e00\u4e0b KMP\uff0c\u8865\u4e86\u4e0b\u5b57\u7b26\u4e32 Hash\u3002 whk \u90a3\u8fb9\u5c31\u662f\u8be5\u548b\u5377\u548b\u5377\uff0c\u53cd\u6b63\u6bcf\u5929\u4e8b\u60c5\u90fd\u6392\u7684\u5f88\u6ee1\uff0c\u5dee\u4e0d\u591a\u7ecf\u5e38\u662f\u7b2c\u4e00\u4e2a\u51fa\u5bdd\u5ba4\u6700\u540e\u4e00\u4e2a\u56de\u5bdd\u5ba4\u7684\u3002 \u6bd5\u7adf\u65e9\u8bfb\u4e4b\u524d\uff0c\u665a\u81ea\u4e60\u4e0b\u8bfe\u4e4b\u540e\u52a0\u8d77\u6765\u6709 1h\uff0c\u4e0d\u7528\u767d\u4e0d\u7528\u3002 \u6570\u7406\u5316\u751f\u611f\u89c9\u8fd8\u597d\uff0c\u8bed\u6587\u6700\u8fd1\u5f00\u59cb\u79ef\u7d2f\u4f5c\u6587\u7d20\u6750\u4e86\uff0c\u7136\u540e\u5f00\u59cb\u628a\u4ee5\u524d\u7684\u7b14\u8bb0\u7cfb\u7edf\u5316\u6574\u7406\u3002 \u611f\u89c9\u7b14\u8bb0\u633a\u91cd\u8981\u7684\uff0c\u590d\u4e60\u4e5f\u633a\u91cd\u8981\u7684\u3002 \u4e0d\u8fc7\u611f\u89c9\u73b0\u5728\u6700\u91cd\u8981\u7684\u4e8b\u60c5\u662f\u600e\u4e48\u5728\u505a\u9898\u7684\u65f6\u5019\u4fdd\u6301\u6e05\u9192\uff0c\u4e0d\u4f1a\u62ff\u5230\u9898\u5c31\u778e\u5199\u778e\u505a\uff0c\u4f1a\u5148\u60f3\u60f3\u80fd\u4e0d\u80fd\u5f52\u5316\u5230\u5df2\u6709 Trick \u4e0a\uff0c\u7136\u540e\u6bcf\u4e00\u6b65\u90fd\u6709\u4e00\u4e2a\u660e\u786e\u7684\u76ee\u6807\u548c\u601d\u8def\u3002 \u8fd8\u6709\u4e00\u70b9\u662f\u6700\u8fd1\u611f\u89c9\u5f88\u4e0d\u8db3\u7684\uff0cwhk \u90a3\u8fb9\u611f\u89c9\u6ca1\u6709\u5565\u505a\u9898\u7684\u5fc3\u6c14\uff0c\u6d6e\u8e81\u7684\u5f88\u3002 \u53ef\u80fd\u662f\u56e0\u4e3a\u6025\u4e86\uff0c\u611f\u89c9\u6bcf\u5929\u81ea\u5df1\u7684 Extra works \u90a3\u4e48\u591a\uff0c\u6709\u4e9b\u81ea\u5df1\u611f\u89c9\u4e0d\u5fc5\u8981\u7684 work \u5c31\u76f4\u63a5 c \u4e86\u3002 \u53ef\u80fd\u8fd9\u4e5f\u662f\u6700\u8fd1\u72b6\u6001\u4e0d\u4f73\u7684\u539f\u56e0\uff0c\u800c\u4e14\u8ba1\u5212\u91cc\u7684\u5f88\u591a\u4e1c\u897f\u5e76\u4e0d\u662f\u6bcf\u5929\u90fd\u5728\u575a\u6301\u7684\uff0c\u6bd4\u5982\u6700\u8fd1\u5c31\u6ca1\u548b\u80cc\u751f\u7269\u548c\u5316\u5b66\u7684\u77e5\u8bc6\u70b9\u4e86\u3002 \u6700\u8fd1\u7528\u7684\u90a3\u4e2a\u56db\u8c61\u9650\u89c4\u5212\u6cd5\u633a\u597d\u7528\u7684\uff0c\u4f46\u662f\u6bcf\u5929\u90fd\u505a\u4e0d\u5b8c\u5f88\u6709\u632b\u8d25\u611f\u554a\u3002 \u8fd8\u662f\u8981\u628a\u751f\u5316\u8fd8\u6709\u82f1\u8bed\u7684\u77e5\u8bc6\u70b9\u80cc\u8bf5\u653e\u5230\u4e2d\u5348\uff0c\u7136\u540e\u665a\u4e0a\u56de\u5bdd\u7684\u8def\u4e0a\uff0c\u6d17\u6f31\u7684\u65f6\u5019\uff0c\u8d70\u8def\u7684\u65f6\u5019\u53ef\u4ee5\u80cc\u4e00\u4e0b\uff0c\u8282\u7701\u70b9\u65f6\u95f4\uff0c\u665a\u4e0a\u5c31\u770b\u770b\u6709\u5565\u80cc\u6f0f\u7684\u3002 \u4e0d\u8fc7\u51e0\u4e2a\u6211\u53ef\u80fd\u4e0d\u9009\u7684\u79d1\u76ee\u5c31\u6709\u70b9\u96be\u8fc7\uff0c\u57fa\u672c\u90fd\u6ca1\u653e\u4ec0\u4e48\u7cbe\u529b\u5728\u4e0a\u9762\u3002 \u82f1\u8bed\u80cc\u4e66\u8fd8\u53ef\u4ee5\uff0c\u53ea\u662f\u8bed\u6cd5\u90a3\u8fb9\u5dee\u4e86\u5f88\u591a\uff0c\u7136\u540e\u5f88\u591a phrase \u8bb0\u4e0d\u5230\u4e86\u3002\u3002\u3002\u3002 \u53cd\u6b63\u96be\u8fc7\uff0c\u6700\u8fd1\u7684\u51e0\u4e2a\u5468\u672b\u90fd\u6709\u70b9\u6446\uff0c\u5bfc\u81f4\u5f88\u591a\u4e8b\u60c5\u6ca1\u505a\u3002 \u771f\u7684\u5410\uff0c\u6700\u8fd1\u6253\u7684 3 \u573a cf \u4e5f\u6ca1\u5199\u9898\u89e3\u3002 \u6253\u7b97 csp \u4e4b\u524d\u8bf7\u4e24\u5929\u5047\u4e0a\u6765\u6253\u6253\u6a21\u62df\u8d5b\u6062\u590d\u611f\u89c9\u3002 md\uff0ccsp \u600e\u4e48\u548c\u534a\u671f\u8003\u8bd5\u91cd\u5408\u5ea6\u8fd9\u4e48\u9ad8\u554a\u3002\u3002\u3002 \u660e\u5929\u518d\u53bb\u627e\u5fc3\u7406\u8001\u5e08\u804a\u804a\uff0c\u8bb0\u5f97\u627e\u73ed\u4e3b\u4efb\u7b7e\u5047\u6761\u3002 10.20 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7b7e\u5047\u6761\u7684\u65f6\u5019\u88ab\u73ed\u4e3b\u4efb\u620f\u5267\u6027\u7684\u903c\u7740\u505c\u8bfe\u4e86\uff1f \u7136\u540e\u548c\u5fc3\u7406\u8001\u5e08\u804a\u5929\uff0c\u5f97\u51fa\u7ed3\u8bba\u662f\u8981\u7ef4\u6301\u4e00\u4e2a\u5e73\u7a33\u7684\u5fc3\u6001\u3002 \u800c\u4e14\u5b9a\u76ee\u6807\u7684\u65f6\u5019\u4e00\u822c\u4e0d\u8981\u7ed9\u81ea\u5df1\u5b9a\u90a3\u79cd\u201c\u5f88\u6ee1\u201d\u7684\u76ee\u6807\uff0c\u6bd4\u5982\u4f7f\u7528\u201c\u5fc5\u987b\uff0c\u4e00\u5b9a\u201d\u8fd9\u79cd\u8bcd\u6c47\u4e4b\u7c7b\u7684\u3002 \u5bb9\u6613\u575a\u6301\u4e0d\u4e0b\u6765\u3002 \u800c\u4e14\u56e0\u4e3a\u5fc3\u6001\u8fd9\u4e1c\u897f\u4e5f\u6ca1\u6709\u7edd\u5bf9\u7684\u5e73\u7a33\uff0c\u80fd\u505a\u7684\u5c31\u662f\u6700\u5c0f\u5316\u5fc3\u6001\u6ce2\u52a8\u3002 \u7814\u7a76\u4e86\u4e00\u4e0b Code::Blocks\uff0c\u611f\u89c9\u975e\u5e38\u597d\u7528\uff01 \u597d\u50cf\u8981\u590d\u4e60\u4e00\u4e0b\u7ebf\u6027\u6c42\u9006\u5143\u8fd9\u79cd\u677f\u5b50\u4e4b\u7c7b\u7684\u4e1c\u897f\u4e86\u3002 10.21 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5728\u5bb6\u6446\u70c2\u3002 10.22 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e0d\u5199\u4e86\uff0c\u5495\u5495\u5495\u3002 10.23 \u03c8(\uff40\u2207\u00b4)\u03c8 \u56e0\u4e3a\u53d6\u6a21\uff0c\u51cf\u6cd5\u4e0d\u52a0 mod\uff0c\u5728\u53d6\u6a21\u610f\u4e49\u4e0b\u53d6 max \u6ca1\u770b\u5230\uff0c\u76f4\u63a5\u51fb\u98de\u4e86\u3002 -130pts\u3002 \u4e0b\u5348 CF\uff0c\u6253\u5f97\u7a00\u6487\u3002 \u665a\u4e0a\u76f4\u63a5\u81ea\u95ed\u4e86\uff0c\u505a\u5b8c\u6838\u9178\u53bb\u64cd\u573a\u6162\u8d70\u4e86\u4e00\u5708\u9759\u4e86\u4e00\u4e0b\uff0c\u7136\u540e\u5750\u5728\u8db3\u7403\u573a\u65c1\u8fb9\u90a3\u4e2a\u96d5\u50cf\u6c89\u601d\u4e86\u534a\u4e2a\u5c0f\u65f6. \u611f\u89c9\u70ed\u7231\u662f\u5f88\u91cd\u8981\uff0c\u5f88\u7eaf\u7cb9\u4f46\u662f\u5f88\u96be\u4fdd\u6301\u9ad8\u7eaf\u5ea6\u7684\u4e1c\u897f\u3002 \u6211\u4e4b\u524d\u5c31\u4e00\u76f4\u5728\u4e3a\u4e86\u522b\u4eba\u7684\u8ba4\u53ef\u5b66 OI\uff0c\u6ca1\u7406\u89e3\u5c31\u4e71\u70b9\u79d1\u6280\u6811\u3002 \u53ef\u4ee5\u8bf4\u662f\u597d\u5927\u559c\u529f\uff0c\u4f46\u662f\u5b9e\u529b\u4e0d\u8db3\u5427\u3002 \u665a\u4e0a\u627e\u5230 zjk \u8ba8\u8bba\u4e86\u4e00\u4e0b\u90a3\u4e2a\u795e\u79d8\u9898\u7684\u505a\u6cd5\u3002 \u73b0\u5728\u89c9\u5f97\u72b6\u6001\u662f\uff0c\u5b66\u4e86\u7684\u638c\u63e1\u4e0d\u719f\uff0c\u7136\u540e\u8fd8\u60f3\u8981\u201c\u8363\u8a89\u201d\uff0c\u7136\u540e\u5c31\u6025\u4e86\uff0c\u5fc3\u6c14\u6709\u70b9\u4e0b\u4e0d\u53bb\u3002 \u91cd\u8981\u7684\u662f attitude\uff0c\u6211\u70ed\u7231\u7684\u662f Cs\uff0c\u4e0d\u662f\u4e3a\u4e86 OI \u7684\u8363\u8a89\u3002 \u4e0d\u60f3\u88ab\u843d\u4e0b\u592a\u591a\u5c31\u522b emo\u4e86\uff0c\u5c3d\u529b\u8fc7\u4e86\u5c31\u4e0d\u7528\u540e\u6094\uff0cjust for fun\uff0cnot for the honor, enjoy what you do now. \u4e5f\u627e zjk \u7237\u7237\u95ee\u4e86\u5173\u4e8e\u5fc3\u6001\u7684\u4e8b\u60c5\uff0c\u56de\u7b54\u5927\u6982\u662f\u8fd9\u6837\u7684\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 4182 _543_731 2022-10-23 22 : 31 : 38 \u5173\u4e8e\u6bd4\u8d5b : \u9996\u5148\u6211\u4e0d\u592a\u559c\u6b22\u6253cf \u56e0\u4e3a\u6211\u4e5f\u975e\u5e38\u53d7rating\u53d8\u5316\u5f71\u54cd ( \u611f\u89c9\u8fd9\u4e1c\u897f\u53ef\u80fd\u548c\u6027\u683c\u6709\u5173 \u81f3\u5c11\u6211\u4e0d\u5927\u884c ) \u7136\u540e\u611f\u89c9cf\u53ef\u80fd\u4e5f\u4e0d\u5b8c\u5168\u662f\u5fc5\u8981\u7684 ( \u867d\u7136\u73b0\u5728hb\u8bad\u7ec3\u65b9\u5f0f\u5bf9cf\u662f\u8fd9\u6837\u7684 ) 4182 _543_731 2022-10-23 22 : 33 : 03 \u6211\u611f\u89c9\u6211\u8bad\u7ec3\u4e00\u76f4\u662f\u591a\u5237\u9898 \u53ef\u4ee5\u60f3\u5f88\u957f\u65f6\u95f4 \u7136\u540e\u591a\u8865\u9898\u89e3 ( \u867d\u7136\u8fd9\u4e1c\u897f\u56e0\u4eba\u800c\u5f02\u6211\u4e0d\u80fd\u8bc4\u4ef7 )( \u800c\u4e14\u56fd\u5bb6\u961f\u53e6\u5916\u51e0\u4e2a\u4eba\u90fd\u4e0d\u600e\u4e48\u5199\u9898\u89e3 ) \u7136\u540e\u6bd4\u8d5b\u72b6\u6001\u5565\u7684\u6700\u540e\u518d\u53bb\u8c03\u6574 ( \u5f53\u7136\u7ec6\u8282\u5565\u7684\u8fd8\u662f\u8981\u6ce8\u610f \u4e0d\u8fc7\u5199\u591a\u4e86\u53ef\u4ee5\u505a\u5230\u4e0d\u600e\u4e48\u6015\u7ec6\u8282\u95ee\u9898 ) 4182 _543_731 2022-10-23 22 : 44 : 16 \u7136\u540e\u8bf4\u5230\u5fc3\u6001 \u56fd\u5bb6\u961f\u96c6\u8bad\u521a\u5f00\u59cb\u7684\u65f6\u5019\u6211\u5728us open\u6253\u51fa\u4e86\u961f\u53cbak\u6211200\u7684\u6210\u7ee9\u7136\u540e\u6211\u4e00\u5ea6\u5fc3\u6001\u7206\u70b8 \u7136\u540e\u6211\u9009\u62e9\u7761\u89c9 \u6253\u6e38\u620f \u5237atc\u627e\u56de\u611f\u89c9 \u7136\u540e\u7ebf\u4e0b\u7b2c\u4e00\u573a\u6211\u53c8\u6253\u51fa\u4e86275 / 4 * 300 \u8fd9\u4e2a\u65f6\u5019\u8fd8\u662f\u4e00\u54684\u573a\u6bd4\u8d5b \u7136\u540e\u6211\u5fc3\u6001\u975e\u5e38\u70b8 \u7136\u540e\u6211\u53c8\u53bb\u5f00\u6e38\u620f\u6253\u4e86\u6574\u4e2a\u540e\u534a\u573a\u7ed3\u679c\u53d1\u6325\u8fd8\u884c \u7136\u540e\u4e24\u6b21ctt d2\u70b8\u6389\u7136\u540e\u5f00\u9893 d3d4\u6b63\u5e38\u53d1\u6325 \u7136\u540e\u5f88\u591a\u6bd4\u8d5b ( scoi20 noi21 \u6700\u540e\u4e00\u6bb5\u96c6\u8bad ) \u4e5f\u662f\u8fd9\u6837\u5e72\u7684 ( ( \u6ce8\u610f\u8fd9\u91cc\u6e38\u620f\u90fd\u6307offline\u7c7b\u578b 4182 _543_731 2022-10-23 22 : 48 : 36 ( \u5efa\u8bae\u8df3\u8fc7\u4e0a\u4e00\u6bb5\u56e0\u4e3a\u592a\u5947\u602a\u4e86 \u7136\u540e\u6211\u6709\u4e00\u4e9b\u611f\u89c9 : \u8fc7\u5ea6\u6295\u5165\u53ef\u80fd\u6709\u53cd\u4f5c\u7528 ( \u5178\u578b\u4f8b\u5b5022 .1 \u7684\u65f6\u5019\u6211\u5728nj\u96c6\u8bad \u6700\u540e\u51e0\u5929\u5fc3\u6001\u6781\u5176\u66b4\u8e81 \u8fd8\u597dcts\u5ef6\u671f\u4e86 ) \u8003\u524d\u8fd8\u5728\u60f3\u600e\u4e48\u8003\u597d\u6781\u5927\u6982\u7387\u8003\u70b8 \u8003\u524d\u80fd\u505a\u5230\u653e\u7a7a\u5e94\u8be5\u662f\u597d\u72b6\u6001 ( \u8bf4\u4e0d\u5b9a\u8003\u524d\u6478\u9c7c\u6709\u7528 ( \u4f46\u662f\u9700\u8981\u662f\u6b63\u786e\u6478\u9c7c \u8003\u573a\u4e0a\u4e5f\u5e94\u8be5\u591a\u51b7\u9759\u591a\u60f3 ( \u6211\u6709\u573a\u6a21\u62df\u8d5b\u5feb2h\u4e00\u9898\u4e0d\u4f1a 3 h\u591a\u70b9ak )( \u56e0\u4e3aoi\u4e5f\u4e0d\u662f\u901f\u5ea6\u7ade\u8d5b\u4f46\u662f\u53ef\u80fdcf\u662f 4182 _543_731 2022-10-23 22 : 49 : 59 bonus : \u67d0\u6b21 \u300a \u56fd\u5bb6\u961f\u9009\u624bnfls\u6821\u5185\u4ea4\u6d41 \u300b \u6211\u4eec\u4e00\u81f4\u901a\u8fc7\u8003\u524d\u4e00\u6bb5\u65f6\u95f4\u5e94\u8be5\u6446\u8fd9\u4ef6\u4e8b 4182 _543_731 2022-10-24 07 : 59 : 22 \u4f46\u611f\u89c9\u7ecf\u5e38\u628a\u4e00\u4e2a\u9898\u72ec\u7acb\u60f3\u51fa\u6765\u5c31\u80fd\u8bb0\u4f4f\u4e86 ( 4182 _543_731 2022-10-24 08 : 00 : 48 \u53ef\u4ee5\u591a\u5237\u5237\u9898 ( arc ( ? ) 4182 _543_731 2022-10-24 08 : 01 : 06 arc\u6781\u5ea6\u5c0f\u6e05\u65b0\u4f46\u4e0d\u77e5\u9053\u5237\u4e0d\u5237\u7684\u52a8 4182 _543_731 2022-10-24 08 : 01 : 17 \u6700\u8fd1\u7684f\u9664\u5916 ( bushi ) 4182 _543_731 2022-10-24 08 : 02 : 19 atc\u6bd4\u8d5b\u7279\u6027 : \u4ee3\u7801\u6781\u5176\u77ed 4182 _543_731 2022-10-24 08 : 02 : 40 \u6211\u5237agc\u5e94\u6ca1\u5199\u8fc7 > 2 k\u4ee3\u7801 4182 _543_731 2022-10-24 08 : 02 : 56 arc\u9664\u53bb\u6284\u677f\u5b50\u6ca1\u5199\u8fc7 > 1.5 k ( ? ) 4182 _543_731 2022-10-24 08 : 03 : 03 \u677f\u5b50 : \u7f51\u7edc\u6d41 fft 4182 _543_731 2022-10-24 08 : 15 : 20 atc\u611f\u89c9\u90fd\u662f\u7eaf\u601d\u8003\u6bd4\u8d5b ( 4182 _543_731 2022-10-24 08 : 15 : 54 \u7136\u540e\u73b0\u5728abc ex\u53d8\u6210\u4e86\u9ad8\u9636\u5957\u8def\u6bd4\u8d5b ( 4182 _543_731 2022-10-24 08 : 20 : 10 ( \u5982\u679c4h\u80fd\u505a\u51fa\u9898\u5e94\u8be5\u6ca1\u95ee\u9898 4182 _543_731 2022-10-24 08 : 20 : 21 \u5efa\u8bae104\u5f00\u59cb\u5012\u7740\u505a 4182 _543_731 2022-10-24 08 : 21 : 35 ( \u867d\u7136\u6211\u53ea\u5237ef 4182 _543_731 2022-10-24 08 : 22 : 01 \u8fd8\u6709\u8fd9\u79cd\u4e1c\u897f\u7a81\u51fa\u4e00\u4e2a\u7eaf\u601d\u8003\u6240\u4ee5\u751a\u81f3\u53ef\u4ee5\u4e00\u8fb9whk\u4e00\u8fb9\u60f3\u9898 ( 10.24 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4eca\u5929\u611f\u89c9\u5f88\u5f00\u5fc3\u3002 ZJK \u7ed9\u4e86\u5efa\u8bae\u8bf4\uff0c\u4ece ARC104 \u5f00\u59cb\u5012\u7740\u505a\uff08\u76ee\u7684\u662f\u953b\u70bc\u601d\u7ef4\uff09\u3002 \u4ed6\u8fd8\u8bf4\u8981\u591a\u60f3\uff01 hfy \u8bf4\u53ef\u4ee5\u9009\u5b8c\u9898\u76f4\u63a5\u5b9a\u65f6\u5f53\u6a21\u62df\u8d5b\u505a\uff0c\u53ef\u4ee5\u627e\u627e\u611f\u89c9\uff0c\u4e5f\u6709\u52a9\u4e8e\u8003\u8bd5\u7684\u65f6\u5019\u4fdd\u6301\u5e73\u5e38\u5fc3\u3002 \u4eca\u5929\u6548\u7387\u8fd8\u53ef\u4ee5\uff0c\u628a\u51e0\u4e2a\u7b80\u5355\u9898\u6539\u4e86\uff0c\u601d\u8003\u91cf\u7ec8\u4e8e\u4e0a\u53bb\u4e86\u4e00\u70b9\u3002 \u90a3\u4e2a\u5b50\u96c6\u7684\u9898\u8fd8\u6709\u90a3\u4e2a\u72ec\u7acb\u96c6\u90fd\u5f88\u6709\u610f\u601d\uff0c\u660e\u5929\u8865\u4e00\u8865\u3002 \u6539 ABC \u7684 D \u7684\u65f6\u5019\u53d1\u73b0\u4e86\u8fd9\u79cd\u795e\u5947\u7684 dp \u65b9\u5f0f\uff08\u4ece\u4e00\u8840\u7684\u4ee3\u7801\u91cc\u770b\u8fc7\u6765\u7684\uff09 1 2 3 4 5 bool solve ( std :: vector < int > v , int target ) { dp . reset (); dp [ 10000 ] = true ; for ( auto i : v ) dp = ( dp << i ) | ( dp >> i ); return dp [ target + 10000 ]; } \u611f\u89c9\u5f88\u725b\u903c\uff01 \u7136\u540e\u53ef\u80fd\u5c31\u662f\u8fc7\u4e86\u4e00\u4e0b Meet in the Middle \u548c\u7b80\u5355\u7684\u5bb9\u65a5\u601d\u60f3\u3002 \u548c wkm \u804a\u4e86\u5f88\u4e45\uff0c\u804a\u5230\u4e86\u4ee5\u524d\u5728\u8bad\u7ec3\u8425\u7684\u90a3\u4e2a\u4e09\u5206\u7403\uff0c\u6628\u5929\u5728\u8db3\u7403\u573a\u96d5\u50cf\u65c1\u8fb9\u9759\u5750\u534a\u5c0f\u65f6\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002 \u611f\u89c9\u554a\uff0cOI \u4e0d\u662f\u6211\u7684\u5168\u90e8\uff0c\u6211\u70ed\u7231\u7684\u662f Compuer Science\uff0c\u6240\u4ee5\u5176\u5b9e\u8fc7\u5206\u770b\u91cd OI \u5e26\u7ed9\u6211\u7684 honor \u662f\u6ca1\u6709\u7528\u7684\uff0c\u4e0d\u5982\u4eab\u53d7\u5f53\u4e0b\uff01 STJU \u548c \u4e2d\u79d1\u5927\uff0c\u90fd\u662f\u5f88\u597d\u7684\u9009\u62e9\u554a\uff01\u62ff\u5b8c NOIP 1= \u76f4\u63a5\u51b2 whk \u4e5f\u5f88\u9999\uff01 \u53e6\u5916\u5207\u5fcc\u5927\u559c\u5927\u60b2\uff0c\u4f60\u53d1\u73b0\u6ca1\u6709\uff0c\u6bcf\u6b21\u5927\u559c\u5927\u60b2\u7684\u6a21\u62df\u8d5b\u90fd\u51fa\u4e8b\u4e86\uff08 10.25 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5c0f\u6eaa\u4e86\uff0c\u6a21\u62df\u8d5b T1 \u8bfb\u9519\u9898\u6302\u4e86 50pts\uff08\u548c\u90a3\u4e2a\u521d\u4e8c\u5b66\u5f1f ccr \u90fd\u770b\u9519\u4e86\uff0c\u6211\u4eec\u4e0b\u5348\u8fd8\u5bf9\u7740\u8fd9\u4e2a\u641e\u4e86\u597d\u4e45\uff09\u3002 \u7136\u540e T3 \u4e00\u773c\u9876\u771f\u9274\u5b9a\u4e3a GSS1 \u6539\u7248\uff0c\u7136\u540e\u76f4\u63a5\u83bd\u4e86\u4e00\u4e2a\u7ebf\u6bb5\u6811\u4e0a\u53bb\u3002 \u8d5b\u540e\u53d1\u73b0\u505a\u6cd5\u5e38\u6570\u8fc7\u5927\u4e86\uff0c\u660e\u660e\u6709\u66f4\u7b80\u5355\u7684\u505a\u6cd5\u7684\u3002 \u90a3\u4e2a\u795e\u79d8\u9898\u503c\u57df 1, 2, 3 \u4e0d\u80fd\u505a\u4e86\uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u65e0\u89e3/hsh (zjk \u7ed9\u4e86\u4e2a\u5b9a\u7406) 10.26 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e3a\u4ec0\u4e48\u4e00\u5b9a\u8981\u5c1d\u8bd5\u878d\u5165\u6bcf\u4e00\u4e2a\u5708\u5b50\u5462\u3002 \u4eca\u5929\u5f04\u4e86\u4e00\u4e2a\u6709\u610f\u601d\u7684\u5bb9\u65a5\u9898\uff1aCF997C\uff0chfy \u6559\u6211\u7684\uff0c\u611f\u89c9\u7ec8\u4e8e\u7406\u89e3\u4e86\uff01 \u7136\u540e\u542c\u8bf4\u4e8c\u9879\u5f0f\u53cd\u6f14\u662f\u4e00\u4e2a\u5f0f\u5b50\uff0c\u65b9\u4fbf\u63a8\u5f0f\u5b50\u7684\u3002 \u770b Command_Block \u548c tzc_wk(ET2006) \u7684\u535a\u5ba2\u597d\u50cf\u6709\u5f88\u5168\u7684\u7701\u9009\u77e5\u8bc6\uff1f \u4ee5\u540e\u8bf4\u4e0d\u5b9a\u53ef\u4ee5\u5b66\u7740\u73a9\u3002 10.27 \u03c8(\uff40\u2207\u00b4)\u03c8 \u60f3\u4ee5\u540e\u7684\u4e8b\u60c5\u662f\u6ca1\u6709\u7528\u7684\u3002 \u4e0d\u8fc7\u63d0\u524d\u89c4\u5212\u4e00\u4e0b\u4e5f\u672a\u5c1d\u4e0d\u53ef\u3002 \u5982\u679c\u4eca\u5e74\u62ff\u4e86 NOIP 1= \u5c31\u76f4\u63a5\u9000\u5f79 whk\uff0c\u4f46\u662f\u5e73\u5e38\u53ef\u4ee5\u6253\u6253 ARC \u5b66\u5b66\u7701\u9009\u7684\u4e1c\u897f\uff1f \u5c31\u5f53\u505a\u771f\u6b63\u7684\u5174\u8da3\u7231\u597d\u4e86\u3002 \u5982\u679c\u4eca\u5e74\u6ca1\u62ff\u4e5f\u6ca1\u5173\u7cfb\uff0c\u660e\u5e74\u8fd8\u53ef\u4ee5\uff0c\u800c\u4e14\u8fd8\u6709\u4e0d\u5c11\u7ade\u8d5b\u65f6\u95f4\uff0c\u597d\u597d\u78e8\u4e00\u78e8\uff0c\u5b8c\u5168\u591f\u4e86\uff01 \u81f3\u4e8e\u5927\u5b66\u80fd\u4e0d\u80fd\u6253 ACM \u8fd9\u4e9b\uff0c\u592a\u9065\u8fdc\u4e86\uff0c\u4e0d\u662f\u6211\u8981\u8003\u8651\u7684\u4e1c\u897f\u3002 \u5f04\u61c2\u4e86\u4e00\u4e2a\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u9898\uff0c\u611f\u89c9\u4e5f\u5f88\u6709\u610f\u601d\uff0c\u800c\u4e14\u7b2c\u4e00\u6b21\u770b\u6587\u5b57\u9898\u89e3\u80fd\u8865\u5145\u51fa\u601d\u8def\u7136\u540e\u5199\u51fa\u6765\uff0c\u751a\u81f3\u4e00\u904d\u8fc7\uff01 \u660e\u5929\u628a dsu on tree \u7684\u677f\u5b50 CF600E \u8fc7\u4e00\u4e0b\uff0c\u7136\u540e\u5c31\u590d\u4e60\u4e00\u904d\u77e5\u8bc6\u70b9\u548c Trick\uff0c\u5199\u4e2a\u5927\u6a21\u62df\u9759\u4e00\u9759\u5fc3\u3002 \u518d\u51fa\u53bb\u5403\u4e2a\u996d\uff0c\u5dee\u4e0d\u591a\u4e86\uff0c\u4fdd\u6301\u4e0b\u5e73\u5e38\u5fc3\uff0c\u6b63\u5e38\u8003\u5c31\u53ef\u4ee5\u3002 \u4eab\u53d7\uff01 \u611f\u89c9\u6700\u8fd1\u51e0\u5929\u5b66 OI \u5f88\u5feb\u4e50\u3002 10.28 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4eca\u5929\u590d\u4e60\u7b97\u6cd5\uff0c\u548c hfy\u3001wcx \u8001\u5e08\u6fc0\u60c5\u6253\u677f\u5b50\u7ade\u901f\u3002 \u4e0b\u5348\u5f00\u4e86\u4e00\u573a ARC (ARC080) \u4e00\u8d77\u6253\u3002 \u7136\u540e\u611f\u89c9\u633a\u6709\u610f\u601d\uff0c\u4ee5\u540e whk \u5c31\u7528\u8fd9\u4e2a\u8c03\u8282\u4e86\u3002 \u665a\u4e0a\u548c PhOer zs \u51fa\u53bb\u5403\u4e86\u4e2a\u996d\uff0c\u542c\u8bf4 MO \u662f 30 \u53f7\u8003\u3002 \u665a\u4e0a\u603b\u7ed3\u4e86\u4e00\u4e0b ARC\uff0c\u7136\u540e\u60f3\u8d77\u6765\u53ef\u4ee5\u548c Meatherm \u9762\u57fa\uff0c\u4e8e\u662f\u7b80\u5355\u8bf4\u4e86\u4e00\u4e0b\u7279\u5f81\u3002 hfy \u8bf4\u6211\u7f29\u8896\u5b50\u968f\u673a\u6e38\u8d70\u548c zxjk \u7684\u4e60\u60ef\u4e00\u81f4\uff0c\u8349\uff0c\u597d\u50cf\u786e\u5b9e\u3002 \u53f7\u5bb6\u519b\u7684\u8003\u524d\u63d0\u9192\u7ec8\u4e8e\u66f4\u65b0\u4e86\u3002 \u53ea\u80fd\u8bf4\u4fdd\u6301\u5e73\u5e38\u5fc3\u5427\u3002 \u548c wcx \u8001\u5e08\u4e00\u8d77\u804a\u5929\u6478\u9c7c\u534a\u5c0f\u65f6\u7ed3\u675f\u4e86\u665a\u81ea\u4e60\uff0c\u52a0\u6cb9\u3002 10.29 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8003\u8bd5\uff0c\u4e0a\u5348\u8d77\u5e8a\u548c czh,xyh \u4e00\u8d77\u8d70\u3002 \u7136\u540e\u8fdb J \u8003\u573a\uff0c\u53d1\u73b0\u81ea\u5df1\u4e0a\u4e0b\u5348\u4e00\u573a\uff1f\uff1f\u800c\u4e14gjh\u4e0b\u5348\u5750\u6211\u65c1\u8fb9\uff1f \u611f\u89c9\u4e03\u4e2d\u9ad8\u65b0\u7684\u8bbe\u65bd\u6bd4\u6211\u4eec\u597d\u591a\u4e86/ll \u62ff\u5230\u4e86 win11 + i7 \u7684\u914d\u7f6e\u3002 \u666e\u53ca\u5f00\u9898\uff0c\u7136\u540e\u53d1\u73b0 T1 \u5c31\u662f\u7b80\u5355\u7684 log \u6c42\u4e00\u4e0b\uff0c\u7136\u540e\u53d1\u73b0 C++ \u91cc\u9762 log \u662f ln \uff0c log10 \u624d\u662f lg \uff0c\u56e0\u4e3a\u8fd9\u4e2a\u5bc4\u4e86\u4e00\u6b21\u3002 \u7136\u540e T2 \u6b7b\u6d3b\u60f3\u4e0d\u5230 \\(O(1)\\) \u505a\u6cd5\uff0c\u770b\u5230\u4e86 \\(m = n - ed + 2\\) \u8fd9\u4e2a\u6570\u636e\u8303\u56f4\u91cc\u7684\u63d0\u793a\uff0c\u4f46\u662f\u8fd8\u662f\u4e0d\u77e5\u9053\uff0c\u53ef\u80fd\u534a\u4e2a\u5c0f\u65f6\u5de6\u53f3\u51b3\u5b9a\u5148\u6253\u4e2a \\(\\sqrt{n}\\) \u66b4\u529b\u62ff\u4e2a 60pts\u3002 \u7136\u540e\u770b T3\uff0cMD\uff0c\u8868\u8fbe\u5f0f\u6811\uff0c\u800c\u4e14\u8981\u52a0\u62ec\u53f7\u4e4b\u7c7b\u7684\uff0c\u96be\u641e\uff0c\u5148\u770b T4\uff0c\u7136\u540e T4 \u5f00\u59cb\u6ca1\u601d\u8def\u3002 \u5b9a\u775b\u4e00\u770b\uff0c\u601d\u8003\u4e00\u4e0b\uff0c\u611f\u89c9\u5c31\u662f\u4e2a\u7b80\u5355 \\(O(n^3)\\) dp\uff0c\u8bbe \\(dp(i, j)\\) \u8868\u793a\u524d \\(i\\) \u4e2a\u70b9\uff0c\u7528\u4e86 \\(j\\) \u6b21\u673a\u4f1a\u7684\u6700\u957f\u3002 \u7136\u540e\u5199\u5b8c\u53d1\u73b0\u5faa\u73af\u53cd\u4e86\u4e00\u6b21\uff0c\u8fc7\u4e86 Sample1\uff0cSample2 \u6ca1\u8fc7\uff0c\u4ed4\u7ec6\u89c2\u5bdf\u53d1\u73b0\u5982\u679c\u6709\u6ca1\u6709\u7528\u7684\u53ef\u4ee5\u5f80\u4e0a\u4e22\uff0c\u7136\u540e\u5728\u540e\u9762\u8865\u4e86\u4e00\u4e0b\u5c31\u8fc7\u4e86\u5927\u6837\u4f8b\u3002 \u7136\u540e\u56de\u53bb\u770b T2\uff0c\u7a81\u7136\u89c9\u5f97\u76f4\u63a5\u6362\u4e2a\u5143\u7136\u540e\u4e00\u5143\u4e8c\u6b21\u65b9\u7a0b\u770b\u770b\u6709\u6ca1\u6709\u6574\u6570\u89e3\u5c31\u884c\u4e86\uff0c\u7136\u540e\u5199\u5b8c\u3002 \u770b T3\uff0c\u8fd8\u5269 1h 50m\uff0c\u4f30\u8ba1\u5199\u4e0d\u5b8c\uff0c\u76f4\u63a5\u5f00\u59cb\u6253\u66b4\u529b\u548c\u7279\u6b8a\u6027\u8d28\u5206\uff0c\u6700\u540e\u53d1\u73b0\u5199\u6302\u4e86\uff0c\u53cd\u6b63\u65e0\u6240\u8c13\uff0c\u671f\u671b\u5e94\u8be5 300+\uff0cpj1=\u6709\u4e86\u3002 \u7136\u540e\u51fa\u53bb\u548c xyh\uff0cczh \u4e00\u8d77\u5403\u706b\u9505\uff0c\u8fd8\u53bb 711 \u4e70\u4e86\u4e00\u76d2 \u5c0f \u6c49 \u5821 \uff0c\u996d\u56e2\u548c\u4e00\u74f6\u8336\u03a0\u3002 \u5728 xyh \u4ed6\u4eec\u8ba2\u7684\u9152\u5e97\u7761\u4e86\u4e00\u4f1a\u89c9\uff0c\u7136\u540e\u53bb\u8003\u573a\uff0c\u8fdb\u8003\u573a\u7684\u65f6\u5019\u770b\u5230\u4e86 JuanZhang \uff01\uff01\u5d14\u8001\u5e08\u597d\u5e05\uff01\uff01\uff01 \u7136\u540e\u8fdb\u8003\u573a\u4e4b\u540e\u5e76\u6ca1\u6709\u770b\u5230 Mea\uff0c\u6240\u4ee5\u5c31\u8fdb\u53bb\u4e86\uff0cgjh\u4e00\u76f4\u5728\u65c1\u8fb9\u5047\u6211/ng \u5f00\u9898\uff0cT1\u4e00\u773c\u8ba4\u4e3a\u662f\u4e2a Dp\uff0c\u60f3\u4e86\u4e00\u4f1a\u5f00\u59cb\u5199\uff0c\u7136\u540e\u53d1\u73b0\u6709\u540e\u6548\u6027\uff0c\u601d\u8003\u4e86\u4e00\u4e0b\u53d1\u73b0\u6362\u4e00\u4e0b\u9636\u6bb5\u5c31\u884c\u3002 \u4e4b\u540e\u53d1\u73b0\u72b6\u6001\u5408\u6cd5\u6027\u4e0d\u80fd\u4fdd\u8bc1\uff0c\u5148\u6253\u4e86\u4e00\u4e2a 40pts\u66b4\u529b\u7a33\u4f4f\u3002 \u7136\u540e\u60f3\u5230\u53ef\u4ee5\u76f4\u63a5\u8bb0\u5f55\u8f6c\u79fb\u8def\u5f84\u7136\u540e\u5224\uff0c\u5148\u7b97\u4e86\u4e00\u4e0b\u7a7a\u95f4\u53d1\u73b0\u4e0d\u4f1a\u70b8\uff0c\u4e8e\u662f\u5c31\u5199\u4e86\u3002 \u7136\u540e\u770b T2\uff0c\u8ba4\u4e3a\u662fshaber\u9898\uff0c\u7136\u540e\u5206\u8ba8\u51fa\u6765\u3002 \u7ed3\u679c\u6b63\u8d1f\u5206\u5f00\u7ef4\u62a4minmax\u5199\u6302\u4e86\uff0cT3\u7684\u6709\u624b\u90e8\u5206\u5206\u90fd\u6ca1\u6253\u3002 \u5410\u4e86\uff0c\u6700\u540e\u53d1\u73b0\u5199\u6302\u7684\u65f6\u5019\u7740\u6025\u4e86\uff0c\u672c\u6765\u4e4b\u524d\u5fc3\u6001\u4e00\u76f4\u5f88\u5e73\u7a33\u7684\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u4ee5\u4e3a\u81ea\u5df1\u53ef\u4ee5 200+ \u7136\u540e\u7b56\u7565\u6df7\u4e71\u4e86\u3002 \u770b\u6765\u5e94\u5bf9\u7a81\u53d1\u7684\u80fd\u529b\u8fd8\u4e0d\u591f\uff0c\u4e0d\u8fc7\u65e0\u6240\u8c13\uff0c\u53cd\u6b63\u5e94\u8be5\u80fd\u8fdb NOIP\u3002 \u56de\u5bb6\uff0c\u5199\u6e38\u8bb0\uff0c\u6d4b\u4ee3\u7801\uff0c\u8865 whk\uff0c\u4eca\u5929\u5c31\u8fd9\u6837\u8fc7\u53bb\u4e86\uff0c\u53c8\u662f\u5e73\u5e38\u7684\u4e00\u5929\u5462\u3002 10.30 \u03c8(\uff40\u2207\u00b4)\u03c8 \u56de\u53bb whk \u4e86\uff0c\u4f30\u8ba1\u8003\u7684\u7a00\u6487\u3002 \u7b80\u5355\u505a\u4e00\u4e2a\u8d5b\u540e\u603b\u7ed3\u5427\uff1a PJ\uff1a\u8003\u7684\u8fd8\u884c\uff0c\u4f46\u662f\u6574\u4f53\u505a\u9898\u901f\u5ea6\u6162\u4e86\uff0c\u88ab T2 \u8bc8\u9a97\u4e86 30 min \u6ca1\u6362\u9898\u7136\u540e\u5bfc\u81f4 T3 \u6ca1\u65f6\u95f4\u5199\u5b8c\u3002 \u4f46\u662f\u53d1\u73b0 T3 \u5199\u4e0d\u5b8c\u4e86\u4e4b\u540e\u679c\u65ad\u5148\u6253\u66b4\u529b\u548c\u7279\u6b8a\u6027\u8d28\u518d\u68c0\u67e5\u5df2\u7ecf\u5199\u4e86\u7684\u9898\u662f\u5426\u5199\u6302\u8fd9\u70b9\u633a\u597d\u7684\u3002 \u7136\u540e T4 \u4e00\u773c\u6ca1\u6709\u601d\u8def\u7684\u65f6\u5019\u6ca1\u6709\u6025\uff0c\u5148\u51b7\u9759\u601d\u8003\u7136\u540e\u60f3\u51fa\u7ed3\u8bba\uff0c\u4e5f\u6ca1\u6709\u60f3\u5230\u7ed3\u8bba\u5c31\u72c2\u559c\uff0c\u800c\u662f\u8003\u8651\u4e86\u4e00\u4e0b corner case \u8fd8\u6709 dp \u7684\u540e\u6548\u6027\u548c\u5408\u6cd5\u6027\uff0c\u907f\u514d\u82b1\u8d39\u66f4\u591a\u7684\u65f6\u95f4\uff0c\u5199\u5b8c\u6d4b\u5927\u6837\u4f8b + \u62cd\u786e\u8ba4\u65e0\u8bef\u4e86\u518d\u53bb\u770b\u7684 T3\u3002 T2 \u88ab\u8bc8\u9a97\u4e86\uff0c\u4f46\u662f\u5148\u6253\u4e86 60pts \u66b4\u529b\u786e\u4fdd\u5206\u6570\uff0c\u7136\u540e\u653e\u6389 T2 \u53bb\u770b\u540e\u9762\u7684\uff0c\u4e4b\u540e\u6362\u4e2a\u8111\u5b50\u6e05\u9192\u70b9\u4e86\u518d\u8fc7\u6765\u60f3\u9898\u3002 \u6700\u540e\u7559\u4e86\u4e00\u70b9\u65f6\u95f4\u5728 Linux \u4e0b\u9762\u7f16\u8bd1\u4e86\u4e00\u6b21\uff0c\u671f\u671b\u5f97\u5206\u662f 100 + 100 + 20 ~ 60 + 100\u3002 Pj \u8003\u7684\u662f\u5f88\u7b26\u5408\u671f\u671b\u7684\u7b56\u7565\u7684\u3002 TG\uff1a\u8003\u7684\u5f88\u70c2\uff0cT1 \u5f00\u573a\u5c31\u60f3\u5230\u4e00\u4e2a\u505a\u6cd5\uff0c\u4f46\u662f\u4e0d\u77e5\u9053\u4e3a\u5565\u8fd9\u4e2a\u65f6\u5019\u76f4\u63a5\u6025\u4e86\uff0c\u76f4\u63a5\u5f00\u83bd\uff0c\u6839\u672c\u6ca1\u7ec6\u60f3\u6b63\u786e\u6027\u548c\u5408\u6cd5\u6027\uff0c\u7ed3\u679c\u53d1\u73b0\u81ea\u5df1\u6f0f\u4e86\u72b6\u6001\uff0c\u82b1\u4e86\u989d\u5916\u7684\u65f6\u95f4\u53bb\u68c0\u67e5\u6392\u9519\uff0c\u8fd9\u4e2a\u65f6\u5019\u53d1\u73b0\u505a\u6cd5\u5047\u4e86\uff0c\u4f46\u662f\u8fd8\u6ca1\u6025\uff0c\u601d\u8003\u4e86\u4e00\u6ce2\u600e\u4e48\u641e\u6210\u5408\u6cd5\u7684\uff0c\u7136\u540e\u60f3\u51fa\u6765\u4e86\u3002 \u770b T2\uff0c\u4e00\u773c\u770b\u51fa\u5206\u7c7b\u8ba8\u8bba\uff0c\u4f46\u662f\u5206\u7c7b\u8ba8\u8bba\u7684\u65f6\u5019\u6709\u70b9\u78e8\u8e6d\uff0c\u5fc3\u91cc\u89c9\u5f97\u65f6\u95f4\u8fd8\u5f88\u591f\u7528\uff08\u6b64\u65f6\u4ee5\u4e3a\u81ea\u5df1\u53ef\u4ee5\u62ff\u5230 200\uff09\uff0c\u7136\u540e\u5c31\u6162\u60a0\u60a0\u7684\u5199\uff0c\u6d6a\u8d39\u4e86\u65f6\u95f4\u3002 \u540e\u9762\u7ebf\u6bb5\u6811\u7ef4\u62a4 RMQ \u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u9047\u5230\u4e86\u8003\u524d\u4e00\u5929\u7684\u65b0 Trick \u5bfc\u81f4\u72c2\u559c\uff0c\u8fd9\u4e2a\u65f6\u5019\u6ca1\u51b7\u9759\u4e0b\u6765\u53bb\u68c0\u67e5\u5b9e\u73b0\u7ec6\u8282\uff0c\u6070\u597d\u8fd9\u4e2a Trick \u5b9e\u73b0\u4e0d\u597d\u5f04\uff0c\u5dee\u4e0d\u591a\u5199\u4e86 40 ~ 50 min \u624d\u610f\u8bc6\u5230\u5199\u6cd5\u5047\u4e86\uff0c\u6b64\u65f6\u5927\u6982\u8fd8\u5269 1h 30min\uff0c\u8fd9\u4e2a\u65f6\u5019\u5fc3\u6001\u5c31\u6025\u4e86\u3002 \u5176\u5b9e\u6b63\u786e\u7b56\u7565\u662f\u76f4\u63a5\u62ff\u6027\u8d28\u5206\u8dd1\u8def\u53bb\u6253 T3 \u66b4\u529b\uff0c\u4f46\u662f\u5fc3\u91cc\u4e00\u76f4\u4ee5\u4e3a\u81ea\u5df1\u53ef\u4ee5\u8c03\u51fa T2\uff0c\u7ed3\u679c\u8d8a\u8c03\u8d8a\u6025\uff0cT2\u6ca1\u8df3\u51fa\u6765\uff0cT3 \u7684\u5927\u4f17\u66b4\u529b\u5206 60pts \u4e5f\u6ca1\u6253\uff0c\u76f4\u63a5\u6012\u6302 120 pts\uff0cT4 \u6839\u672c\u90fd\u6ca1\u770b\uff0c\u5e94\u8be5\u6709 20 pts \u5de6\u53f3\u7684\u66b4\u529b\u7684\u3002 \u6240\u4ee5\u603b\u7ed3\u662f\uff1a\u5e94\u5bf9\u7a81\u53d1\u60c5\u51b5\u7684\u65f6\u5019\u8111\u5b50\u4e0d\u591f\u6e05\u9192\uff0c\u614c\u4e86\uff0c\u6ca1\u601d\u8003\u600e\u4e48\u5728\u5f53\u524d\u60c5\u51b5\u4e0b\u6700\u4f18\u5316\u81ea\u5df1\u7684\u5f97\u5206\uff0c\u7136\u540e\u5c31\u5fc3\u6001\u6eda\u96ea\u7403\uff0c\u8d8a\u6765\u8d8a\u6025\uff0c\u4ee3\u7801\u80fd\u529b\u4e5f\u4e0d\u591f\uff0c PJT3 \u6ca1\u5199\u51fa\u6765\uff0cTGT2 \u6ca1\u8c03\u51fa\u6765\uff0c\u53ef\u80fd\u4e0b\u6b21\u8003\u524d\u9700\u8981\u591a\u5199\u51e0\u4e2a\u5927\u6a21\u62df\u6765\u5e73\u590d\u5fc3\u6001\uff0c\u6700\u597d\u662f\u5b9a\u65f6\u505a\uff0c\u6a21\u62df\u8003\u573a\u73af\u5883\uff0c\u9047\u5230\u7a81\u53d1\u72b6\u51b5\u4e5f\u80fd\u5feb\u901f\u8f6c\u53d8\u7b56\u7565\u4f18\u5148\u62ff\u5206\u3002 \u6700\u91cd\u8981\u7684\uff1a\u5c3d\u91cf\u4fdd\u6301\u8111\u5b50\u7684\u76f8\u5bf9\u6e05\u9192\uff0c\u4e0d\u8981\u55ef\u83bd\uff0c\u964d\u4f4e\u5fc3\u6001\u4e0a\u4e0b\u6ce2\u52a8\uff0c\u5bf9\u7b56\u662f\u591a\u6253\u6a21\u62df\u8d5b\uff0c\u53ef\u80fd\u73b0\u5728\u8fd8\u6ca1\u7279\u522b\u9002\u5e94 OI \u8d5b\u5236\uff0c\u8981\u591a\u7ec3\u3002 10.31 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6587\u5316\u8bfe\u81ea\u95ed\u4e86\u3002 \u8fd9\u7bc7\u6e38\u8bb0\u5c31\u5199\u5230\u8fd9\u91cc\u4e86\u3002 11.8 \u03c8(\uff40\u2207\u00b4)\u03c8 upd: TG: 100 + 40 + 0 + 0 PJ: 90 + 100 + 0 + 100 shaber.","title":"CSP2022"},{"location":"misc/CSP2022/#csp2022","text":"","title":"CSP2022 \u6e38\u8bb0"},{"location":"misc/CSP2022/#_1","text":"\u9000\u5f79\u4e86\u3002 \u6587\u5316\u8bfe\u4e86\u3002 \u4e1a\u4f59\u4f11\u95f2\u9009\u624b\uff0c\u7814\u7a76\u4e86\u4e00\u70b9\u57fa\u7840\u7684\u4e1c\u897f\uff0c\u7b97\u662f\u7ed9\u4e4b\u524d\u8fd8\u503a\u4e86\u3002 \u81ea\u5df1\u7684\u8ba1\u5212\u5b8c\u6210\u5ea6\u8fd8\u662f\u5f88\u4f4e\u3002\u3002\u3002","title":"\u4e45\u8fdc\u7684\u8fc7\u53bb"},{"location":"misc/CSP2022/#916","text":"\u505a\u4e86\u5957\u521d\u8d5b\u6a21\u62df\u5377\u5b50\uff0c\u4eff\u771f\u4e86\u7ebf\u4e0a\u73af\u5883\uff0c\u4e0d\u8fc7\u62ff\u5230\u5377\u5b50\u5df2\u7ecf\u5f00\u59cb 20min\u591a\u4e86\uff0c\u56e0\u4e3a\u6ca1\u6709\u63d0\u524d\u8c03\u8bd5\u597d\u8bbe\u5907\u3002 \u8003\u4e86\u4e2a 75.5\uff0c\u6bd4\u4e4b\u524d\u90fd\u597d\uff0c\u4e0d\u8fc7\u53ef\u80fd\u6709\u8fd0\u6c14\u6210\u5206\u3002 \u5341\u516d\u8fdb\u5236\u90a3\u9898\u8499\u5bf9\u4e86\uff0c\u51e0\u4e2a\u7ec4\u5408\u6570\u5b66\u9898\u505a\u5bf9\u4e86\uff0c15 \u9898\u5bb9\u65a5+\u6570\u8bba\u6ca1\u6765\u5f97\u53ca\u7b97\u3002 \u4f46\u662f\u975e\u5e38\u751f\u6c14\u554a\uff0c\u4e4b\u524d\u81ea\u5df1\u5b66\u4e86\u63d2\u677f\u6cd5\u8fd8\u7ed9 OI-wiki \u5199\u4e86\u63d2\u677f\u6cd5\u7684\u5185\u5bb9\uff0c\u7ed3\u679c\u63d2\u677f\u6cd5\u7684\u9001\u5206\u586b\u7a7a\u9898\u6ca1\u505a\u5bf9\u3002 \u7136\u540e\u7b2c\u56db\u9898\u90a3\u4e2a\u7b80\u5355\u5206\u8ba8\u7ec4\u5408\uff0c\u56e0\u4e3a tm \u7684\u628a\u7ec4\u5408\u6570\u548c\u6392\u5217\u6570\u516c\u5f0f\u5f04\u6df7\u4e86\u81ea\u5df1\u6ca1\u53d1\u73b0\uff0c\u6655\u5934\u6655\u8111\u7684\u3002 \u7136\u540e\u611f\u89c9\u5bf9\u4e8e \u91cd\u590d\u8ba1\u6570 \u8fd9\u4e2a\u65b9\u9762\u72af\u9519\u5f88\u591a\uff0c\u611f\u89c9\u6709\u7684\u65f6\u5019\u6ca1\u6cd5\u7406\u89e3\uff0c\u4e4b\u540e\u8981\u591a\u7ec3\u4e60\u3002 \u4e3b\u5b9a\u7406\u90a3\u4e2a\u9898\u5e94\u8be5\u79d2\u6740\u7684\uff01\u8fd8\u662f\u82b1\u4e86\u4e00\u70b9\u70b9\u65f6\u95f4\u3002 \u56db\u8272\u5b9a\u7406\u90a3\u4e2a\u9898\u6ca1\u641e\u61c2\uff0c\u56e0\u4e3a\u91cd\u590d\u8ba1\u6570\u3002\u3002\u3002\uff0c\u4e4b\u540e\u5199\u5230\u6570\u5b66\u7684\u9519\u9898\u672c\u4e0a\u9762\u5427\u3002 \u7136\u540e tm \u7684\u6ca1\u8010\u5fc3\u5206\u6790\u7a0b\u5e8f\u5b8c\u578b\u90a3\u4e2a\u4f18\u5148\u961f\u5217\u9898\u3002 \u611f\u89c9\u603b\u4f53\u8fd8\u662f\u7d27\u5f20\u4e86\uff0c\u4e0d\u8fc7\u5fc3\u6001\u8f83\u4e8e\u4e4b\u524d\u81ea\u4fe1\u4e86\u5f88\u591a\uff0c\u800c\u4e14\u51ed\u7740\u7b2c\u4e00\u76f4\u89c9\u8499\u5bf9\u4e86\u4e0d\u5c11\uff01\u3002 \u660e\u5929\u6a21\u62df\u7684\u65f6\u5019\u51c6\u5907\u591a\u4e00\u70b9\u6c34\uff0c\u7136\u540e\u4e00\u5305\u6e7f\u7eb8\u5dfe\u7528\u6765\u51b7\u9759\uff0c\u7136\u540e\u8349\u7a3f\u7eb8\u5c3d\u91cf\u6709\u6761\u7406\u4e00\u70b9\u3002 \u6709\u4e00\u4e9b\u516c\u5f0f\u4ec0\u4e48\u7684\uff0c\u5982\u679c\u81ea\u5df1\u611f\u89c9 \u5370\u8c61\u6709\u70b9\u6a21\u7cca\u4e86 \uff0c\u4e00\u5b9a\u8981\u5199\u51fa\u6765\uff01 \u7136\u540e\u66b4\u529b\u4eba\u5de5\u6808\u8bb0\u5f97\u5f04\u6210\u4ee3\u7801\u7f29\u8fdb\u5f0f\u7684\u3002 \u4eca\u5929\u8bbe\u5907\u51fa\u4e86\u4e00\u70b9\u95ee\u9898\uff0cIpad \u5f55\u5c4f\u7a7a\u95f4\u4e0d\u591f\uff0c\u800c\u4e14\u62cd\u6444\u4f4d\u7f6e\u4e0d\u591f\u6e05\u6670\u3002 \u800c\u4e14\u8fdb\u53bb\u7684\u5306\u5306\u5fd9\u5fd9\u7684\u3002\u3002\u3002\u3002\u3002\u4e0d\u8fc7\u4e5f\u597d\uff0c\u7b97\u662f\u4e00\u4e2a\u53cd\u4f8b\u4e86\u3002 \u5199\u5b8c\u65e5\u8bb0\u5c31\u53bb\u7761\u89c9\u4e86\u3002","title":"9.16\uff0c\u521d\u8d5b\u524d\u4e24\u5929"},{"location":"misc/CSP2022/#917","text":"\u5403\u4e86\u7897\u70ed\u5e72\u9762+\u714e\u86cb\uff08\u70ed\u5e72\u9762\u662f\u4e4b\u524d\u5c01\u57ce\u7684\u65f6\u5019\u4e70\u7684\uff09 \u53c8\u505a\u4e86\u4e00\u5957\u521d\u8d5b\u6a21\u62df\u5377\u5b50\uff0c\u8fdb\u53bb\u53c8\u662f 10 min \u591a\u4e86\uff0c\u56e0\u4e3a\u4ee5\u4e3a\u4e0d\u5f04\u7ebf\u4e0a\u3002 \u8fd9\u6b21\u9898\u8981\u96be\u5f97\u591a\uff0c\u4e0d\u8fc7\u8003\u7684\u66f4\u9ad8\u4e86\uff0c81.5\uff0887.5\uff09\uff0c\u56e0\u4e3a\u6700\u540e\u68c0\u67e5\u4e0d\u4ed4\u7ec6\u586b\u9519\u4e86\u4e24\u4e2a 3 \u5206\u7684\u7a7a\uff0c\u4e8e\u662f\u5c11\u4e86 6pts\u3002 \u4e0d\u7136\u80fd rk4\uff0c\u73b0\u5728\u53d8\u6210 rk8 \u4e86 /ng\uff0cxzq \u53c8\u4e00\u6b21\u767b\u9876 rk1 \u4e86\u3002\u3002\u3002\u3002\u3002\u5f3a \u7136\u540e\u6574\u4f53\u5fc3\u6001\u5f88\u4e0d\u9519\uff0c\u5c31\u662f\u4e00\u8def\u60a0\u95f2\u5730\u54fc\u7740\u6b4c\u505a\u5b8c\u7684\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u6628\u665a\u8003\u51fa\u4fe1\u5fc3\u4e86\u5427\u3002 T3 \u90a3\u4e2a\u6b27\u62c9\u56de\u8def\u7684\u5b9a\u4e49\u770b\u8d70\u773c\u4e86\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u5bf9\u201c\u95ed\u8def\u201d\u7684\u7406\u89e3\u9519\u4e86\u3002 \u7136\u540e T7 \u90a3\u4e2a\u5173\u4e8e TCP \u7f51\u7edc\u534f\u8bae\u7684\uff0c\u56e0\u4e3a\u6ca1\u6709\u80cc\u8fc7\u9020\u7403\u4e86\u3002 \u7ec4\u5408\u6570\u5b66\u9898\u4f9d\u7136\u7a33\u5b9a\u53d1\u6325\u5168\u505a\u5bf9\u3002 \u4e00\u4e2a\u5904\u7406\u77e9\u9635\u7684\u9898\uff0c\u6709\u70b9\u6ca1\u5fc3\u6c14\u8bfb\uff0c\u6700\u540e\u4e00\u9898\u662f\u677f\u677f\u6811\u5256\uff0c\u9ca8\u5375\u3002 T15 \u90a3\u4e2a\u8fd0\u7b97\u7b26\u987a\u5e8f\u4f9d\u7a00\u8bb0\u5f97 mod \\(>\\) + \\(>\\) xor \uff0c\u7ed3\u679c\u5bf9\u4e86\uff0c\u4e4b\u540e\u9700\u8981\u8bb0\u4e00\u8bb0\u4e86\u3002 \u9605\u8bfb\u7b2c\u4e00\u9898\u90a3\u4e2a\u6784\u9020 \\(a_i = cnt(i)\\) \u7684\u65b9\u6848\u6570\u7684\u9898\u5f88\u6709\u610f\u601d\uff0c\u8bf4\u4e0d\u5b9a\u53ef\u4ee5\u62ff\u6765\u51fa CF\u3002 \u7136\u540e\u90a3\u4e2a\u9898\u6700\u540e\u4e24\u95ee\u5168\u90e8\u9519\u5b8c\uff0c\u96be\u8fc7\uff0c\u4f46\u662f \\(\\sum a_i = n\\) \u7684\u7ed3\u8bba\u597d\u50cf\u662f\u5bf9\u7684\uff1f\uff1f\uff1f\u795e\u5947 \u8fd8\u6709\u5c31\u662f\u505a\u9898\u901f\u5ea6\u6709\u70b9\u6162\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u53ef\u80fd\u662f\u592a\u95f2\u4e86\u7684\u7f18\u6545\u3002\u3002\u3002\u3002\u3002 1h20m \u624d\u505a\u5b8c\u3002 \u4e0d\u8fc7\u8fd9\u4e2a\u6691\u5047\u7684\u52aa\u529b\u80af\u5b9a\u662f\u56e0\u7d20\u4e4b\u4e00\u5427\uff0c\u5728\u6709\u5f88\u91cd\u7684 whk \u538b\u529b\u7684\u540c\u65f6\u8fd8\u4ecd\u7136\u4fdd\u6301 OI\uff0c\u6bd4\u6211\u4e4b\u524d\u6d51\u6d51\u5669\u5669\u7684\u505c\u8bfe\u4e09\u4e2a\u6708\u6709\u6548\u591a\u4e86\u3002 CodeForces Rating \u4e5f\u662f\u3002 \u7136\u540e\u8bbe\u5907\u8c03\u8bd5\u7684\u5dee\u4e0d\u591a\u4e86\u3002 \u6628\u5929\u603b\u7ed3\u7684\u5fc3\u6001\uff0c\u601d\u8def\uff0c\u8349\u7a3f\u95ee\u9898\u4eca\u5929\u90fd\u89e3\u51b3\u4e86\u3002 \u53cd\u6b63\u5c31\u50cf\u6211\u7238\u5988\u8bf4\u7684\uff1a\u4e0d\u7ba1\u662f NOIP\uff0c\u9ad8\u8003\uff0c\u8fd8\u662f\u4ec0\u4e48\u8003\u8bd5\uff0c\u7528\u4f60\u7684\u5e73\u5e38\u5fc3\u5bf9\u5f85\uff08\u751a\u81f3\u544a\u8bc9\u6211\u9ad8\u8003\u7684\u65f6\u5019\u8ba9\u6211\u81ea\u5df1\u8d70\u8def\u53bb\u4e0d\u9001\u6211\uff08\uff08\uff08\uff08\uff08\uff08 \u5728 luogu \u4e0a\u9762\u56de\u7b54\u4e86\u51e0\u4e2a\u5c0f\u670b\u53cb\u7684\u95ee\u9898\uff0c\u7b97\u662f\u590d\u4e60\u3002 \u4e0b\u5348\u8fd8\u6709\u4e00\u5957 hb \u7684\u6a21\u62df\uff0c\u628a Osu \u4e0b\u56de\u6765\u4e86\uff0c\u6253\u5b8c\u5982\u679c\u8fd8\u884c\u9893\u4e00\u628a\u3002 \u5988\u7684\uff0c\u6253\u5b8c\u5b8c\u5168\u5410\u6389\u4e86\u3002 \u53ea\u6709 36 pts\u3002 \u9605\u8bfb\u7a0b\u5e8f\u5b8c\u5168\u88ab\u51fb\u98de\uff0c\u7ec4\u5408\u6570\u5b66\u9898\u5168\u90e8\u5bc4\u5b8c\u3002 \u611f\u89c9\u662f\u5fc3\u6001\u5b8c\u5168\u7206\u70b8\u7684\u7f18\u6545\uff0c\u76f4\u63a5\u6ca1\u6709\u5fc3\u6c14\u8bfb\u9898\u4e86\u3002 \u51e0\u4e2a\u7ec4\u5408\u6570\u5b66\u9898\u5f88\u6709\u610f\u601d\uff0c\u5f00\u4e86\u4e00\u4e2a\u5c0f\u4e13\u9898\u7528\u6765\u8bb0\u5f55\uff0c\u7136\u540e\u7a0d\u5fae\u6539\u4e86\u6539\u535a\u5ba2\u67b6\u6784\uff0c\u52a0\u4e86 Comment System\u3002 \u6700\u540e\u9762\u90a3\u51e0\u4e2a\u9605\u8bfb\u771f\u7684\u662f\u5657\u53fd\u7b97\u6cd5\u5e72\u7206\u4e00\u5806\u4eba\u554a\u3002\u3002\u3002\u3002 \u771f\u7684\u96be\u8bfb\u9898\uff0c\uff0c\uff0c\uff0c\u6700\u540e\u4e00\u9898\u5176\u5b9e\u672c\u8d28\u4e0a\u662f ODT\uff0c\u6709\u4e00\u4e2a\u6211\u778e\u731c\u7684\u9898\u5c45\u7136\u662f\u5947\u602a\u7684\u6c42\u6b27\u62c9\u8def\u3002\u3002\u3002 \u7136\u540e\u53c8\u81ed\u53c8\u957f\u7684 dp\uff0c\u6bd4\u8f83\u9633\u95f4\u4f46\u662f\u5fc3\u6c14\u4e0d\u884c\u76f4\u63a5\u6302\u6389\u4e86\uff0c\u4e00\u4e9b\u603b\u7ed3\u597d\u7684\u4e60\u60ef\u4e5f\u6ca1\u6709\u7528\u4e0a\u3002 \u660e\u5929\u4e00\u5b9a\u8981\u5173\u7a97\u7136\u540e\u5f00\u4e2a\u7a7a\u8c03\uff0c\u4fdd\u6301\u6e05\u9192\uff0c\u907f\u5f00\u697c\u4e0b\u5fd7\u613f\u8005\u90a3\u4e2a\u5faa\u73af\u4e00\u4e2a\u5c0f\u65f6\u7684\u5e7f\u64ad\ud83d\ude05\u3002 \u665a\u4e0a\u5c31\u662f\u542c\u4f73\u7238\u8bb2\u9898\uff0c\u7136\u540e\u505a\u4e00\u4e0b\u7ec4\u5408\u6570\u5b66\u7684\u4e00\u4e9b\u8bb0\u5f55\u4e4b\u7c7b\u7684\uff0c\u7136\u540e\u5f04\u4e86\u4e00\u4e2a\u521d\u8d5b\u6ce8\u610f\u4e8b\u9879\u3002","title":"9.17\uff0c\u521d\u8d5b\u524d\u4e00\u5929"},{"location":"misc/CSP2022/#918","text":"\u4e0a\u5348\u5403\u4e86\u70ed\u5e72\u9762 + \u4e24\u4e2a\u86cb\uff0c\u6628\u5929\u5403\u4e86\u4e00\u4e2a\u86cb\uff0c\u53ea\u8003\u597d\u4e86\u4e00\u6b21\uff0c\u4eca\u5929\u5403\u4e86\u4e24\u4e2a\u86cb\uff0c\u90a3\u5c31\u662f\u8003\u597d\u4e24\u6b21\uff08\u786e\u4fe1 \u5657\u53fd\u7ec4\u6574\u4f53\u96be\u5ea6\u4e0d\u662f\u5f88\u5927\u5427\uff0c\u53ef\u80fd 1h \u5de6\u53f3\u5269\u4e86\u51e0\u4e2a\u9898\uff0c\u7136\u540e\u6162\u6162\u78e8\u3002 \u6709\u4e00\u4e9b\u9898\u4e0d\u662f\u5f88\u786e\u5b9a\uff0c\u6bd4\u5982 Haffman\uff0cdouble \u7684\u7cbe\u5ea6\uff08\u725b\u987f\u8fed\u4ee3\u5f00\u6839\u53f7\u90a3\u4e2a\u9898\uff09\uff08pj \u600e\u4e48\u4f1a\u6709\u725b\u8fed\u554a\uff01 \u7136\u540e\u6574\u4f53\u90fd\u5f88\u6c34\uff0c\u8fde\u4e2a\u6570\u6570\u9898\u6ca1\u6709\u3002 \u4e0d\u8fc7\u4e2d\u95f4\u53d7\u5230\u9632\u7a7a\u8b66\u62a5\u7684\u5e72\u6270\u4e86\uff0c\u4e5f\u6ca1\u4e8b\uff0c\u8fd9\u662f\u5fc5\u987b\u8981\u653e\u7684\u3002 \u7136\u540e\u53d1\u73b0\u662f\u8981\u5f00\u7b54\u9898\u673a\u5668\u7684\u9ea6\u7684\uff0c\u4e8e\u662f\u4f1a\u6709\u70b9\u5435\uff0c\u6211\u628a\u7b54\u9898\u673a\u5668\u97f3\u91cf\u8c03\u5c0f\u4e86\u4e00\u70b9\u70b9\uff0c\u662f\u5728\u6211\u80fd\u542c\u5230\uff0c\u4f46\u662f\u4e0d\u5f71\u54cd\u6211\u7684\u97f3\u91cf\u4e0a\u3002 \u540e\u9762\u6709\u4e00\u4e2a\u5c0f\u670b\u53cb\u76f4\u63a5\u53eb\u51fa\u6765\uff1a\u201c\u600e\u4e48\u8fd9\u4e48\u96be\uff01\uff1f\uff1f\uff1fOh No\uff01\uff01\uff01\uff01\u201d \u8349\uff0c\u53ef\u80fd\u662f\u6ca1\u89c1\u8bc6\u8fc7\u524d\u4e24\u5e74\u7684 PJ\uff0c\u4eca\u5e74\u603b\u4f53\u4e0a PJ \u6bd4\u53bb\u5e74\u7b80\u5355\u591a\u4e86\u3002 80+ \u5e94\u8be5\u662f\u6ca1\u6709\u95ee\u9898\u7684\u4e86\uff0c\u8fc7\u521d\u8d5b\u5e94\u8be5\u53ef\u4ee5\uff0c\u8d5b\u540e\u8dd1\u4e86\u4e00\u8dd1\u725b\u987f\u8fed\u4ee3\uff0c\u53d1\u73b0\u5b83\u4e0d\u662f\u7528 eps \u800c\u662f\u76f4\u63a5 ==\uff0c\u663e\u7136\u6709\u95ee\u9898\u4f46\u662f\u6211\u5f53\u65f6\u6ca1\u6709\u770b\u51fa\u6765\uff01 \u7136\u540e\u5403\u4e86\u987f\u597d\u7684\uff0c\u53bb\u7761\u4e86\u4e2a\u89c9\uff0c\u51c6\u5907\u4e0b\u5348\u7684 TG\u4e86\u3002 \u8bb0\u4f4f\uff0c\u8981\u953b\u70bc\u7684\u5c31\u662f\u4e0d\u88ab\u5916\u90e8\u73af\u5883\u5f71\u54cd\u5fc3\u6001/\u601d\u8003/\u601d\u8def\u7684\u80fd\u529b\uff0c\u53ea\u8981\u94bb\u8fdb\u53bb\u601d\u8003\u5c31\u884c\u4e86\uff01 \u7edd\u5bf9\u4e0d\u8981\u81ea\u5df1\u89c9\u5f97\uff0c\u597d\u96be\u554a~~\uff0c\u8fd9\u6837\u662f\u8d1f\u9762\u7684\u5fc3\u7406\u6697\u793a\u3002 \u60f3\u7740\uff0c\u6211\u5c31\u7b97\u8fc7\u4e0d\u4e86\uff0c\u4e5f\u6743\u5f53\u4eab\u53d7\u6bd4\u8d5b\u4e86\uff0c\u6211\u80af\u5b9a\u8981\u9759\u4e0b\u5fc3\u6765\u53bb\u8bfb\u7a0b\u5e8f\uff0c\u4e0d\u8981\u82b1\u65f6\u95f4\u5728\u6ca1\u6709\u601d\u8003\u7684\u6263\u624b\u4e0a\u9762\u3002 \u53ea\u8981\u6ca1\u601d\u8def\u4e86\uff0c\u4e0d\u662f\u8df3\u8fc7\u5c31\u662f\u7528\u7b14\u5f00\u59cb\u5199\u53ef\u80fd\u601d\u8def\uff01 \u53cd\u6b63\u653e\u5e73\u5fc3\u6001\u3002 \u4e0b\u5348\u5f00\u8003\uff0c\u63d0\u65e9\u8fdb\u8003\u573a\uff0c\u53d1\u73b0\u548c gjh \u4e00\u4e2a\u8003\u573a\uff0c\u90ed\u54e5\u592a\u5e05\u4e86 /se/se/se \u7136\u540e\u5c31\u5f00\u59cb\u505a\uff0c\u5f00\u59cb\u7684\u65f6\u5019\u611f\u89c9\u9009\u62e9\u9898\u6bd4\u8f83\u96be\uff0c\u7136\u540e\u7b80\u5355\u505a\u4e86\u51e0\u9898\u5c31\u5148\u770b\u540e\u9762\u7a0b\u5e8f\u90e8\u5206\u4e86\u3002 \u7136\u540e\u770b\u5230 j = 0; j < n; j *= 2 \u76f4\u63a5\u868c\u57e0\uff1f\uff1f\uff1f\uff1f \u7136\u540e\u6211\u731c\u4e4b\u540e\u4f1a\u6539\u6210 1\uff0c\u9009\u4e86 \\(\\log\\) \u76f4\u63a5\u8dd1\u8def\uff0c\u540e\u9762\u786e\u5b9e\u6539\u4e86\u3002 \u770b\u5230\u540e\u9762\u7684\u9898\u6bd4\u8f83\u7b80\u5355\u4e4b\u540e\u6e9c\u56de\u53bb\u9759\u4e0b\u5fc3\u770b\u9009\u62e9\u4e86\u3002 \u7136\u540e\u88ab 10 \u9898\u868c\u57e0\u4e86\uff0c\u6211\u600e\u4e48\u7b97\u90fd\u662f 105\uff0c\u5361\u4e86 20min\uff0c\u53ea\u80fd\u968f\u4fbf\u9009\u4e86\u4e00\u4e2a\u7b54\u6848\u8d70\u4eba\u3002 \u7ed3\u679c\u51fa\u9898\u4eba\u8bed\u6587\u53ef\u80fd\u662f\u9003\u8bfe\u4e86\uff0c\u6839\u672c\u6ca1\u8bf4\u6e05\u695a\u5927\u4f5c\u4e1a\u662f tm \u51e0\u4e2a\u4eba\u505a\u554a\uff01\u539f\u6765\u7b54\u6848\u76f4\u63a5\u5c31\u662f \\(\\dbinom{8}{2}\\) \u554a \uff01 md\u3002 \u7136\u540e\u540e\u9762\u9605\u8bfb T1 \u4ee5\u4e3a\u662f\u4e2a KMP\uff0c\u5fd8\u8bb0\u4e86\uff0c\u540e\u9762\u53d1\u73b0 KMP \u597d\u50cf\u662f\u8981\u8df3 Next \u7684\uff0c\u8fd9\u4e2a\u6ca1\u6709\u8df3\u3002 \u7136\u540e\u6539\u4e86\u4e00\u4e0b\u6700\u540e\u4e00\u95ee\u7684\u7b54\u6848\uff0c\u4f46\u662f\u6ca1\u6765\u5f97\u53ca\u624b\u5b8c\u4e00\u4e0b\uff0c\u7136\u540e\u590d\u6742\u5ea6\u5c31\u6ca1\u6539\u8fc7\u6765\u3002\u3002\u3002 \u770b\u7740\u9605\u8bfb T2 \u641e\u4e86\u4e00\u4f1a\uff0c\u53d1\u73b0\u662f\u4e2a\u8fdb\u5236\u8f6c\u6362\uff0c\u5feb\u4e50\u505a\u5b8c\u8d70\u4eba\u3002 \u4f46\u662f\u6ca1\u770b\u5230 28 \u7684 n \u6ca1\u6709\u52a0\u7edd\u5bf9\u503c\uff0cmd\uff0c\u5751\u4eba\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01 \u6700\u540e\u4e00\u9898\u7b97\u9519\u4e86/ng \u5f52\u5e76\u7b2c k \u5c0f\u6ca1\u7406\u89e3\u592a\u6e05\u695a\uff0c\u9519\u4e86\u4e24\u4e2a\u3002 \u6700\u540e\u4e00\u9898\uff0c\u53bb\u5e74\u56db\u6bdb\u5b50\u5728\u8fd9\u91cc\uff0c\u7ed3\u679c\u600e\u4e48\u662f\u4e2a\u9ca8\u5375 dp \uff1f\uff1f\uff1f\uff1f\uff1f \u8d5b\u540e\u6d4b\u7b54\u6848\uff0c\u5bf9\u4e86 U \u7fa4\u7684\u7b54\u6848\uff0c\u7136\u540e\u53d1\u73b0\u662f 63.5\uff1f\uff1f\uff1f\uff1f \u5988\u7684\u5bc4\u4e86\u554a\uff0c\u5f00\u59cb\u751f\u6c14\uff01\uff01\uff01 \u540e\u9762\u51fa\u53bb\u7406\u53d1\uff0c\u7ed3\u679c\u4e00\u8def\u5012\u9709\uff0c\u5148\u662f\u8fde\u7740\u9047\u5230\u4e24\u4e2a\u7eff\u706f\u7a81\u7136\u53d8\u7ea2\uff0c \u7136\u540e\u53c8\u662f\u7406\u53d1\u5e97\u5168\u6ee1\u4eba\u3002 \u56de\u6765\u5feb\u8fdb\u5c0f\u533a\u4e86\u8001\u7238\u624d\u8bf4\u8ba9\u6211\u53bb\u9633\u53f0\u90a3\u8fb9\uff0c\u628a\u6211\u7684\u516c\u4ea4\u5361\u63a5\u4f4f\u53bb\u51b2\u5361\u3002 \u7ed3\u679c\u53d1\u73b0\u6691\u5047\u8865\u8bfe\u7684\u65f6\u5019\u5df2\u7ecf\u51b2\u4e86 30 \u591a\u5757\u4e86\uff0c\u56e0\u4e3a\u5f53\u65f6\u7684\u75ab\u60c5\uff0c\u5c31\u6ca1\u7528\u3002 \u7136\u540e\u5c31\u5404\u79cd\u5012\u9709\u3002\u3002\u3002\u3002 \u6211\u5f53\u65f6\u5728\u60f3\uff0c\u4e5f\u8bb8\u662f\u4e0b\u5348 rp \u7528\u5b8c\u4e86\uff0c\u4e8e\u662f\u4eba\u54c1\u8fd9\u4e48\u70c2\u3002 \u7136\u540e\u56de\u6765\u5403\u4e86\u4e2a\u996d\u3002 \u53bb\u5c0f\u56fe\u7075\u5bf9\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0 79 \uff1f\uff1f\uff1f \u8fc7\u4e86\u4e00\u4f1a\u53d1\u73b0\u597d\u50cf\u6211\u7528 U \u7fa4\u7684\u7b54\u6848\u7b97\u9519\u4e86\uff01\uff01\uff01\uff01 \u4ed4\u7ec6\u9a8c\u8bc1\u53d1\u73b0\u786e\u5b9e\uff01\uff01\uff0170\u5e94\u8be5\u6709\u4e86\uff01\uff01\uff01\uff01\uff01\uff08\u5982\u679c\u4e89\u8bae\u9898\u518d\u7ed9\u70b9\u5206\u5c31\u597d\u4e86\uff01\uff01\uff011\uff09 \u4e5f\u8bb8\u80fd\u8fc7\u5427\uff0c\u7136\u540e \u5657\u53fd\u53ef\u80fd\u56e0\u4e3a\u778e\u8003\uff0c\u5927\u6982\u7387\u53c8\u6ca1\u6709 tg \u9ad8/ng \u4e0d\u8fc7\u8fd9\u6b21 pj\uff0ctg\u90fd\u6bd4\u4e4b\u524d\u9ad8\u4e86 10pts\u5de6\u53f3\uff0c\u4e5f\u7b97\u8fdb\u6b65\u4e86\u3002 \u4e4b\u524d\u7b2c\u4e00\u6b21\u53ea\u8003\u4e86 J1\uff0c\u6ca1\u8fc7\uff0c\u7b2c\u4e8c\u6b21\u8003\u4e86 J1\uff0cS1\uff0c\u90fd\u6ca1\u8fc7\u3002 \u7b2c\u4e09\u6b21\u53ea\u8fc7\u4e86 S1\uff0cJ1 \u9760\u7740\u5956\u52b1\u540d\u989d\u8fdb\u53bb\u4e86\u3002 \u8fd9\u6b21\u4e5f\u8bb8\u5c31\u662f\u5168\u8fdb\u53bb\u4e86\u5427\uff01 \u665a\u4e0a\u6536\u62fe\u4e86\u4e00\u4e0b\u4e1c\u897f\uff0c\u660e\u5929\u5f00\u5b66\u4e86\uff0c\u5230\u65f6\u5019\u5728\u8f66\u4e0a\u53ef\u4ee5\u505a\u4e00\u70b9 KMP \u9898\u3002","title":"9.18 \u521d\u8d5b"},{"location":"misc/CSP2022/#920","text":"\u4eca\u5929\u5728\u548c JX \u8fd8\u6709 FST \u5546\u91cf\u4e4b\u540e\u5728\u5b66\u6821 OI \u7684\u65f6\u95f4\u3002 \u5dee\u4e0d\u591a\u662f\u5316\u751f\u8bed\u8fd9\u4e09\u79d1\u7684\u8865\u5dee\u4e0d\u4e0a\uff0c\u5176\u4ed6\u90fd\u4e0a\u3002 \u7136\u540e\u5bf9\u4e86\u4e00\u4e0b\u521d\u8d5b\u7b54\u6848\uff08\u542c\u8bf4\u662f official answer\uff09\uff0cTG 76.5\uff0c\u7136\u540e\u542c\u8bf4\u82cf\u5dde\u5206\u6570\u7ebf\u662f 75\uff0c \u6240\u4ee5\u5728\u6210\u90fd\u4e5f\u5e94\u8be5\u8fc7\u4e86\u3002 upd : \u666e\u53ca 71.5, tg 77.5\uff0c\u53c8\u4e00\u6b21\u521b\u4e0b\u4e86\u63d0\u9ad8 \u300b \u666e\u53ca\u7684\u8bb0\u5f55\u3002","title":"9.20\uff0c\u5f00\u5b66\u7b2c\u4e8c\u5929"},{"location":"misc/CSP2022/#1019","text":"\u7b80\u5355\u63d0\u4e00\u53e5\u6700\u8fd1\u90fd\u5728\u5e72\u5565\u5427\uff0c\u62ff Atcoder \u7684 DP contest \u7ec3\u4e86\u4e0b\u624b\uff0c\u4e0d\u8fc7\u73b0\u5728\u8fd8\u6709 7 \u4e2a\u9898\u6ca1\u505a\u3002 \u7136\u540e\u590d\u4e60\u4e86\u4e00\u4e0b KMP\uff0c\u8865\u4e86\u4e0b\u5b57\u7b26\u4e32 Hash\u3002 whk \u90a3\u8fb9\u5c31\u662f\u8be5\u548b\u5377\u548b\u5377\uff0c\u53cd\u6b63\u6bcf\u5929\u4e8b\u60c5\u90fd\u6392\u7684\u5f88\u6ee1\uff0c\u5dee\u4e0d\u591a\u7ecf\u5e38\u662f\u7b2c\u4e00\u4e2a\u51fa\u5bdd\u5ba4\u6700\u540e\u4e00\u4e2a\u56de\u5bdd\u5ba4\u7684\u3002 \u6bd5\u7adf\u65e9\u8bfb\u4e4b\u524d\uff0c\u665a\u81ea\u4e60\u4e0b\u8bfe\u4e4b\u540e\u52a0\u8d77\u6765\u6709 1h\uff0c\u4e0d\u7528\u767d\u4e0d\u7528\u3002 \u6570\u7406\u5316\u751f\u611f\u89c9\u8fd8\u597d\uff0c\u8bed\u6587\u6700\u8fd1\u5f00\u59cb\u79ef\u7d2f\u4f5c\u6587\u7d20\u6750\u4e86\uff0c\u7136\u540e\u5f00\u59cb\u628a\u4ee5\u524d\u7684\u7b14\u8bb0\u7cfb\u7edf\u5316\u6574\u7406\u3002 \u611f\u89c9\u7b14\u8bb0\u633a\u91cd\u8981\u7684\uff0c\u590d\u4e60\u4e5f\u633a\u91cd\u8981\u7684\u3002 \u4e0d\u8fc7\u611f\u89c9\u73b0\u5728\u6700\u91cd\u8981\u7684\u4e8b\u60c5\u662f\u600e\u4e48\u5728\u505a\u9898\u7684\u65f6\u5019\u4fdd\u6301\u6e05\u9192\uff0c\u4e0d\u4f1a\u62ff\u5230\u9898\u5c31\u778e\u5199\u778e\u505a\uff0c\u4f1a\u5148\u60f3\u60f3\u80fd\u4e0d\u80fd\u5f52\u5316\u5230\u5df2\u6709 Trick \u4e0a\uff0c\u7136\u540e\u6bcf\u4e00\u6b65\u90fd\u6709\u4e00\u4e2a\u660e\u786e\u7684\u76ee\u6807\u548c\u601d\u8def\u3002 \u8fd8\u6709\u4e00\u70b9\u662f\u6700\u8fd1\u611f\u89c9\u5f88\u4e0d\u8db3\u7684\uff0cwhk \u90a3\u8fb9\u611f\u89c9\u6ca1\u6709\u5565\u505a\u9898\u7684\u5fc3\u6c14\uff0c\u6d6e\u8e81\u7684\u5f88\u3002 \u53ef\u80fd\u662f\u56e0\u4e3a\u6025\u4e86\uff0c\u611f\u89c9\u6bcf\u5929\u81ea\u5df1\u7684 Extra works \u90a3\u4e48\u591a\uff0c\u6709\u4e9b\u81ea\u5df1\u611f\u89c9\u4e0d\u5fc5\u8981\u7684 work \u5c31\u76f4\u63a5 c \u4e86\u3002 \u53ef\u80fd\u8fd9\u4e5f\u662f\u6700\u8fd1\u72b6\u6001\u4e0d\u4f73\u7684\u539f\u56e0\uff0c\u800c\u4e14\u8ba1\u5212\u91cc\u7684\u5f88\u591a\u4e1c\u897f\u5e76\u4e0d\u662f\u6bcf\u5929\u90fd\u5728\u575a\u6301\u7684\uff0c\u6bd4\u5982\u6700\u8fd1\u5c31\u6ca1\u548b\u80cc\u751f\u7269\u548c\u5316\u5b66\u7684\u77e5\u8bc6\u70b9\u4e86\u3002 \u6700\u8fd1\u7528\u7684\u90a3\u4e2a\u56db\u8c61\u9650\u89c4\u5212\u6cd5\u633a\u597d\u7528\u7684\uff0c\u4f46\u662f\u6bcf\u5929\u90fd\u505a\u4e0d\u5b8c\u5f88\u6709\u632b\u8d25\u611f\u554a\u3002 \u8fd8\u662f\u8981\u628a\u751f\u5316\u8fd8\u6709\u82f1\u8bed\u7684\u77e5\u8bc6\u70b9\u80cc\u8bf5\u653e\u5230\u4e2d\u5348\uff0c\u7136\u540e\u665a\u4e0a\u56de\u5bdd\u7684\u8def\u4e0a\uff0c\u6d17\u6f31\u7684\u65f6\u5019\uff0c\u8d70\u8def\u7684\u65f6\u5019\u53ef\u4ee5\u80cc\u4e00\u4e0b\uff0c\u8282\u7701\u70b9\u65f6\u95f4\uff0c\u665a\u4e0a\u5c31\u770b\u770b\u6709\u5565\u80cc\u6f0f\u7684\u3002 \u4e0d\u8fc7\u51e0\u4e2a\u6211\u53ef\u80fd\u4e0d\u9009\u7684\u79d1\u76ee\u5c31\u6709\u70b9\u96be\u8fc7\uff0c\u57fa\u672c\u90fd\u6ca1\u653e\u4ec0\u4e48\u7cbe\u529b\u5728\u4e0a\u9762\u3002 \u82f1\u8bed\u80cc\u4e66\u8fd8\u53ef\u4ee5\uff0c\u53ea\u662f\u8bed\u6cd5\u90a3\u8fb9\u5dee\u4e86\u5f88\u591a\uff0c\u7136\u540e\u5f88\u591a phrase \u8bb0\u4e0d\u5230\u4e86\u3002\u3002\u3002\u3002 \u53cd\u6b63\u96be\u8fc7\uff0c\u6700\u8fd1\u7684\u51e0\u4e2a\u5468\u672b\u90fd\u6709\u70b9\u6446\uff0c\u5bfc\u81f4\u5f88\u591a\u4e8b\u60c5\u6ca1\u505a\u3002 \u771f\u7684\u5410\uff0c\u6700\u8fd1\u6253\u7684 3 \u573a cf \u4e5f\u6ca1\u5199\u9898\u89e3\u3002 \u6253\u7b97 csp \u4e4b\u524d\u8bf7\u4e24\u5929\u5047\u4e0a\u6765\u6253\u6253\u6a21\u62df\u8d5b\u6062\u590d\u611f\u89c9\u3002 md\uff0ccsp \u600e\u4e48\u548c\u534a\u671f\u8003\u8bd5\u91cd\u5408\u5ea6\u8fd9\u4e48\u9ad8\u554a\u3002\u3002\u3002 \u660e\u5929\u518d\u53bb\u627e\u5fc3\u7406\u8001\u5e08\u804a\u804a\uff0c\u8bb0\u5f97\u627e\u73ed\u4e3b\u4efb\u7b7e\u5047\u6761\u3002","title":"10.19\uff0c\u8fc7\u4e86\u5f88\u4e45\u4e4b\u540e"},{"location":"misc/CSP2022/#1020","text":"\u7b7e\u5047\u6761\u7684\u65f6\u5019\u88ab\u73ed\u4e3b\u4efb\u620f\u5267\u6027\u7684\u903c\u7740\u505c\u8bfe\u4e86\uff1f \u7136\u540e\u548c\u5fc3\u7406\u8001\u5e08\u804a\u5929\uff0c\u5f97\u51fa\u7ed3\u8bba\u662f\u8981\u7ef4\u6301\u4e00\u4e2a\u5e73\u7a33\u7684\u5fc3\u6001\u3002 \u800c\u4e14\u5b9a\u76ee\u6807\u7684\u65f6\u5019\u4e00\u822c\u4e0d\u8981\u7ed9\u81ea\u5df1\u5b9a\u90a3\u79cd\u201c\u5f88\u6ee1\u201d\u7684\u76ee\u6807\uff0c\u6bd4\u5982\u4f7f\u7528\u201c\u5fc5\u987b\uff0c\u4e00\u5b9a\u201d\u8fd9\u79cd\u8bcd\u6c47\u4e4b\u7c7b\u7684\u3002 \u5bb9\u6613\u575a\u6301\u4e0d\u4e0b\u6765\u3002 \u800c\u4e14\u56e0\u4e3a\u5fc3\u6001\u8fd9\u4e1c\u897f\u4e5f\u6ca1\u6709\u7edd\u5bf9\u7684\u5e73\u7a33\uff0c\u80fd\u505a\u7684\u5c31\u662f\u6700\u5c0f\u5316\u5fc3\u6001\u6ce2\u52a8\u3002 \u7814\u7a76\u4e86\u4e00\u4e0b Code::Blocks\uff0c\u611f\u89c9\u975e\u5e38\u597d\u7528\uff01 \u597d\u50cf\u8981\u590d\u4e60\u4e00\u4e0b\u7ebf\u6027\u6c42\u9006\u5143\u8fd9\u79cd\u677f\u5b50\u4e4b\u7c7b\u7684\u4e1c\u897f\u4e86\u3002","title":"10.20"},{"location":"misc/CSP2022/#1021","text":"\u5728\u5bb6\u6446\u70c2\u3002","title":"10.21"},{"location":"misc/CSP2022/#1022","text":"\u4e0d\u5199\u4e86\uff0c\u5495\u5495\u5495\u3002","title":"10.22"},{"location":"misc/CSP2022/#1023","text":"\u56e0\u4e3a\u53d6\u6a21\uff0c\u51cf\u6cd5\u4e0d\u52a0 mod\uff0c\u5728\u53d6\u6a21\u610f\u4e49\u4e0b\u53d6 max \u6ca1\u770b\u5230\uff0c\u76f4\u63a5\u51fb\u98de\u4e86\u3002 -130pts\u3002 \u4e0b\u5348 CF\uff0c\u6253\u5f97\u7a00\u6487\u3002 \u665a\u4e0a\u76f4\u63a5\u81ea\u95ed\u4e86\uff0c\u505a\u5b8c\u6838\u9178\u53bb\u64cd\u573a\u6162\u8d70\u4e86\u4e00\u5708\u9759\u4e86\u4e00\u4e0b\uff0c\u7136\u540e\u5750\u5728\u8db3\u7403\u573a\u65c1\u8fb9\u90a3\u4e2a\u96d5\u50cf\u6c89\u601d\u4e86\u534a\u4e2a\u5c0f\u65f6. \u611f\u89c9\u70ed\u7231\u662f\u5f88\u91cd\u8981\uff0c\u5f88\u7eaf\u7cb9\u4f46\u662f\u5f88\u96be\u4fdd\u6301\u9ad8\u7eaf\u5ea6\u7684\u4e1c\u897f\u3002 \u6211\u4e4b\u524d\u5c31\u4e00\u76f4\u5728\u4e3a\u4e86\u522b\u4eba\u7684\u8ba4\u53ef\u5b66 OI\uff0c\u6ca1\u7406\u89e3\u5c31\u4e71\u70b9\u79d1\u6280\u6811\u3002 \u53ef\u4ee5\u8bf4\u662f\u597d\u5927\u559c\u529f\uff0c\u4f46\u662f\u5b9e\u529b\u4e0d\u8db3\u5427\u3002 \u665a\u4e0a\u627e\u5230 zjk \u8ba8\u8bba\u4e86\u4e00\u4e0b\u90a3\u4e2a\u795e\u79d8\u9898\u7684\u505a\u6cd5\u3002 \u73b0\u5728\u89c9\u5f97\u72b6\u6001\u662f\uff0c\u5b66\u4e86\u7684\u638c\u63e1\u4e0d\u719f\uff0c\u7136\u540e\u8fd8\u60f3\u8981\u201c\u8363\u8a89\u201d\uff0c\u7136\u540e\u5c31\u6025\u4e86\uff0c\u5fc3\u6c14\u6709\u70b9\u4e0b\u4e0d\u53bb\u3002 \u91cd\u8981\u7684\u662f attitude\uff0c\u6211\u70ed\u7231\u7684\u662f Cs\uff0c\u4e0d\u662f\u4e3a\u4e86 OI \u7684\u8363\u8a89\u3002 \u4e0d\u60f3\u88ab\u843d\u4e0b\u592a\u591a\u5c31\u522b emo\u4e86\uff0c\u5c3d\u529b\u8fc7\u4e86\u5c31\u4e0d\u7528\u540e\u6094\uff0cjust for fun\uff0cnot for the honor, enjoy what you do now. \u4e5f\u627e zjk \u7237\u7237\u95ee\u4e86\u5173\u4e8e\u5fc3\u6001\u7684\u4e8b\u60c5\uff0c\u56de\u7b54\u5927\u6982\u662f\u8fd9\u6837\u7684\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 4182 _543_731 2022-10-23 22 : 31 : 38 \u5173\u4e8e\u6bd4\u8d5b : \u9996\u5148\u6211\u4e0d\u592a\u559c\u6b22\u6253cf \u56e0\u4e3a\u6211\u4e5f\u975e\u5e38\u53d7rating\u53d8\u5316\u5f71\u54cd ( \u611f\u89c9\u8fd9\u4e1c\u897f\u53ef\u80fd\u548c\u6027\u683c\u6709\u5173 \u81f3\u5c11\u6211\u4e0d\u5927\u884c ) \u7136\u540e\u611f\u89c9cf\u53ef\u80fd\u4e5f\u4e0d\u5b8c\u5168\u662f\u5fc5\u8981\u7684 ( \u867d\u7136\u73b0\u5728hb\u8bad\u7ec3\u65b9\u5f0f\u5bf9cf\u662f\u8fd9\u6837\u7684 ) 4182 _543_731 2022-10-23 22 : 33 : 03 \u6211\u611f\u89c9\u6211\u8bad\u7ec3\u4e00\u76f4\u662f\u591a\u5237\u9898 \u53ef\u4ee5\u60f3\u5f88\u957f\u65f6\u95f4 \u7136\u540e\u591a\u8865\u9898\u89e3 ( \u867d\u7136\u8fd9\u4e1c\u897f\u56e0\u4eba\u800c\u5f02\u6211\u4e0d\u80fd\u8bc4\u4ef7 )( \u800c\u4e14\u56fd\u5bb6\u961f\u53e6\u5916\u51e0\u4e2a\u4eba\u90fd\u4e0d\u600e\u4e48\u5199\u9898\u89e3 ) \u7136\u540e\u6bd4\u8d5b\u72b6\u6001\u5565\u7684\u6700\u540e\u518d\u53bb\u8c03\u6574 ( \u5f53\u7136\u7ec6\u8282\u5565\u7684\u8fd8\u662f\u8981\u6ce8\u610f \u4e0d\u8fc7\u5199\u591a\u4e86\u53ef\u4ee5\u505a\u5230\u4e0d\u600e\u4e48\u6015\u7ec6\u8282\u95ee\u9898 ) 4182 _543_731 2022-10-23 22 : 44 : 16 \u7136\u540e\u8bf4\u5230\u5fc3\u6001 \u56fd\u5bb6\u961f\u96c6\u8bad\u521a\u5f00\u59cb\u7684\u65f6\u5019\u6211\u5728us open\u6253\u51fa\u4e86\u961f\u53cbak\u6211200\u7684\u6210\u7ee9\u7136\u540e\u6211\u4e00\u5ea6\u5fc3\u6001\u7206\u70b8 \u7136\u540e\u6211\u9009\u62e9\u7761\u89c9 \u6253\u6e38\u620f \u5237atc\u627e\u56de\u611f\u89c9 \u7136\u540e\u7ebf\u4e0b\u7b2c\u4e00\u573a\u6211\u53c8\u6253\u51fa\u4e86275 / 4 * 300 \u8fd9\u4e2a\u65f6\u5019\u8fd8\u662f\u4e00\u54684\u573a\u6bd4\u8d5b \u7136\u540e\u6211\u5fc3\u6001\u975e\u5e38\u70b8 \u7136\u540e\u6211\u53c8\u53bb\u5f00\u6e38\u620f\u6253\u4e86\u6574\u4e2a\u540e\u534a\u573a\u7ed3\u679c\u53d1\u6325\u8fd8\u884c \u7136\u540e\u4e24\u6b21ctt d2\u70b8\u6389\u7136\u540e\u5f00\u9893 d3d4\u6b63\u5e38\u53d1\u6325 \u7136\u540e\u5f88\u591a\u6bd4\u8d5b ( scoi20 noi21 \u6700\u540e\u4e00\u6bb5\u96c6\u8bad ) \u4e5f\u662f\u8fd9\u6837\u5e72\u7684 ( ( \u6ce8\u610f\u8fd9\u91cc\u6e38\u620f\u90fd\u6307offline\u7c7b\u578b 4182 _543_731 2022-10-23 22 : 48 : 36 ( \u5efa\u8bae\u8df3\u8fc7\u4e0a\u4e00\u6bb5\u56e0\u4e3a\u592a\u5947\u602a\u4e86 \u7136\u540e\u6211\u6709\u4e00\u4e9b\u611f\u89c9 : \u8fc7\u5ea6\u6295\u5165\u53ef\u80fd\u6709\u53cd\u4f5c\u7528 ( \u5178\u578b\u4f8b\u5b5022 .1 \u7684\u65f6\u5019\u6211\u5728nj\u96c6\u8bad \u6700\u540e\u51e0\u5929\u5fc3\u6001\u6781\u5176\u66b4\u8e81 \u8fd8\u597dcts\u5ef6\u671f\u4e86 ) \u8003\u524d\u8fd8\u5728\u60f3\u600e\u4e48\u8003\u597d\u6781\u5927\u6982\u7387\u8003\u70b8 \u8003\u524d\u80fd\u505a\u5230\u653e\u7a7a\u5e94\u8be5\u662f\u597d\u72b6\u6001 ( \u8bf4\u4e0d\u5b9a\u8003\u524d\u6478\u9c7c\u6709\u7528 ( \u4f46\u662f\u9700\u8981\u662f\u6b63\u786e\u6478\u9c7c \u8003\u573a\u4e0a\u4e5f\u5e94\u8be5\u591a\u51b7\u9759\u591a\u60f3 ( \u6211\u6709\u573a\u6a21\u62df\u8d5b\u5feb2h\u4e00\u9898\u4e0d\u4f1a 3 h\u591a\u70b9ak )( \u56e0\u4e3aoi\u4e5f\u4e0d\u662f\u901f\u5ea6\u7ade\u8d5b\u4f46\u662f\u53ef\u80fdcf\u662f 4182 _543_731 2022-10-23 22 : 49 : 59 bonus : \u67d0\u6b21 \u300a \u56fd\u5bb6\u961f\u9009\u624bnfls\u6821\u5185\u4ea4\u6d41 \u300b \u6211\u4eec\u4e00\u81f4\u901a\u8fc7\u8003\u524d\u4e00\u6bb5\u65f6\u95f4\u5e94\u8be5\u6446\u8fd9\u4ef6\u4e8b 4182 _543_731 2022-10-24 07 : 59 : 22 \u4f46\u611f\u89c9\u7ecf\u5e38\u628a\u4e00\u4e2a\u9898\u72ec\u7acb\u60f3\u51fa\u6765\u5c31\u80fd\u8bb0\u4f4f\u4e86 ( 4182 _543_731 2022-10-24 08 : 00 : 48 \u53ef\u4ee5\u591a\u5237\u5237\u9898 ( arc ( ? ) 4182 _543_731 2022-10-24 08 : 01 : 06 arc\u6781\u5ea6\u5c0f\u6e05\u65b0\u4f46\u4e0d\u77e5\u9053\u5237\u4e0d\u5237\u7684\u52a8 4182 _543_731 2022-10-24 08 : 01 : 17 \u6700\u8fd1\u7684f\u9664\u5916 ( bushi ) 4182 _543_731 2022-10-24 08 : 02 : 19 atc\u6bd4\u8d5b\u7279\u6027 : \u4ee3\u7801\u6781\u5176\u77ed 4182 _543_731 2022-10-24 08 : 02 : 40 \u6211\u5237agc\u5e94\u6ca1\u5199\u8fc7 > 2 k\u4ee3\u7801 4182 _543_731 2022-10-24 08 : 02 : 56 arc\u9664\u53bb\u6284\u677f\u5b50\u6ca1\u5199\u8fc7 > 1.5 k ( ? ) 4182 _543_731 2022-10-24 08 : 03 : 03 \u677f\u5b50 : \u7f51\u7edc\u6d41 fft 4182 _543_731 2022-10-24 08 : 15 : 20 atc\u611f\u89c9\u90fd\u662f\u7eaf\u601d\u8003\u6bd4\u8d5b ( 4182 _543_731 2022-10-24 08 : 15 : 54 \u7136\u540e\u73b0\u5728abc ex\u53d8\u6210\u4e86\u9ad8\u9636\u5957\u8def\u6bd4\u8d5b ( 4182 _543_731 2022-10-24 08 : 20 : 10 ( \u5982\u679c4h\u80fd\u505a\u51fa\u9898\u5e94\u8be5\u6ca1\u95ee\u9898 4182 _543_731 2022-10-24 08 : 20 : 21 \u5efa\u8bae104\u5f00\u59cb\u5012\u7740\u505a 4182 _543_731 2022-10-24 08 : 21 : 35 ( \u867d\u7136\u6211\u53ea\u5237ef 4182 _543_731 2022-10-24 08 : 22 : 01 \u8fd8\u6709\u8fd9\u79cd\u4e1c\u897f\u7a81\u51fa\u4e00\u4e2a\u7eaf\u601d\u8003\u6240\u4ee5\u751a\u81f3\u53ef\u4ee5\u4e00\u8fb9whk\u4e00\u8fb9\u60f3\u9898 (","title":"10.23"},{"location":"misc/CSP2022/#1024","text":"\u4eca\u5929\u611f\u89c9\u5f88\u5f00\u5fc3\u3002 ZJK \u7ed9\u4e86\u5efa\u8bae\u8bf4\uff0c\u4ece ARC104 \u5f00\u59cb\u5012\u7740\u505a\uff08\u76ee\u7684\u662f\u953b\u70bc\u601d\u7ef4\uff09\u3002 \u4ed6\u8fd8\u8bf4\u8981\u591a\u60f3\uff01 hfy \u8bf4\u53ef\u4ee5\u9009\u5b8c\u9898\u76f4\u63a5\u5b9a\u65f6\u5f53\u6a21\u62df\u8d5b\u505a\uff0c\u53ef\u4ee5\u627e\u627e\u611f\u89c9\uff0c\u4e5f\u6709\u52a9\u4e8e\u8003\u8bd5\u7684\u65f6\u5019\u4fdd\u6301\u5e73\u5e38\u5fc3\u3002 \u4eca\u5929\u6548\u7387\u8fd8\u53ef\u4ee5\uff0c\u628a\u51e0\u4e2a\u7b80\u5355\u9898\u6539\u4e86\uff0c\u601d\u8003\u91cf\u7ec8\u4e8e\u4e0a\u53bb\u4e86\u4e00\u70b9\u3002 \u90a3\u4e2a\u5b50\u96c6\u7684\u9898\u8fd8\u6709\u90a3\u4e2a\u72ec\u7acb\u96c6\u90fd\u5f88\u6709\u610f\u601d\uff0c\u660e\u5929\u8865\u4e00\u8865\u3002 \u6539 ABC \u7684 D \u7684\u65f6\u5019\u53d1\u73b0\u4e86\u8fd9\u79cd\u795e\u5947\u7684 dp \u65b9\u5f0f\uff08\u4ece\u4e00\u8840\u7684\u4ee3\u7801\u91cc\u770b\u8fc7\u6765\u7684\uff09 1 2 3 4 5 bool solve ( std :: vector < int > v , int target ) { dp . reset (); dp [ 10000 ] = true ; for ( auto i : v ) dp = ( dp << i ) | ( dp >> i ); return dp [ target + 10000 ]; } \u611f\u89c9\u5f88\u725b\u903c\uff01 \u7136\u540e\u53ef\u80fd\u5c31\u662f\u8fc7\u4e86\u4e00\u4e0b Meet in the Middle \u548c\u7b80\u5355\u7684\u5bb9\u65a5\u601d\u60f3\u3002 \u548c wkm \u804a\u4e86\u5f88\u4e45\uff0c\u804a\u5230\u4e86\u4ee5\u524d\u5728\u8bad\u7ec3\u8425\u7684\u90a3\u4e2a\u4e09\u5206\u7403\uff0c\u6628\u5929\u5728\u8db3\u7403\u573a\u96d5\u50cf\u65c1\u8fb9\u9759\u5750\u534a\u5c0f\u65f6\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002 \u611f\u89c9\u554a\uff0cOI \u4e0d\u662f\u6211\u7684\u5168\u90e8\uff0c\u6211\u70ed\u7231\u7684\u662f Compuer Science\uff0c\u6240\u4ee5\u5176\u5b9e\u8fc7\u5206\u770b\u91cd OI \u5e26\u7ed9\u6211\u7684 honor \u662f\u6ca1\u6709\u7528\u7684\uff0c\u4e0d\u5982\u4eab\u53d7\u5f53\u4e0b\uff01 STJU \u548c \u4e2d\u79d1\u5927\uff0c\u90fd\u662f\u5f88\u597d\u7684\u9009\u62e9\u554a\uff01\u62ff\u5b8c NOIP 1= \u76f4\u63a5\u51b2 whk \u4e5f\u5f88\u9999\uff01 \u53e6\u5916\u5207\u5fcc\u5927\u559c\u5927\u60b2\uff0c\u4f60\u53d1\u73b0\u6ca1\u6709\uff0c\u6bcf\u6b21\u5927\u559c\u5927\u60b2\u7684\u6a21\u62df\u8d5b\u90fd\u51fa\u4e8b\u4e86\uff08","title":"10.24"},{"location":"misc/CSP2022/#1025","text":"\u5c0f\u6eaa\u4e86\uff0c\u6a21\u62df\u8d5b T1 \u8bfb\u9519\u9898\u6302\u4e86 50pts\uff08\u548c\u90a3\u4e2a\u521d\u4e8c\u5b66\u5f1f ccr \u90fd\u770b\u9519\u4e86\uff0c\u6211\u4eec\u4e0b\u5348\u8fd8\u5bf9\u7740\u8fd9\u4e2a\u641e\u4e86\u597d\u4e45\uff09\u3002 \u7136\u540e T3 \u4e00\u773c\u9876\u771f\u9274\u5b9a\u4e3a GSS1 \u6539\u7248\uff0c\u7136\u540e\u76f4\u63a5\u83bd\u4e86\u4e00\u4e2a\u7ebf\u6bb5\u6811\u4e0a\u53bb\u3002 \u8d5b\u540e\u53d1\u73b0\u505a\u6cd5\u5e38\u6570\u8fc7\u5927\u4e86\uff0c\u660e\u660e\u6709\u66f4\u7b80\u5355\u7684\u505a\u6cd5\u7684\u3002 \u90a3\u4e2a\u795e\u79d8\u9898\u503c\u57df 1, 2, 3 \u4e0d\u80fd\u505a\u4e86\uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u65e0\u89e3/hsh (zjk \u7ed9\u4e86\u4e2a\u5b9a\u7406)","title":"10.25"},{"location":"misc/CSP2022/#1026","text":"\u4e3a\u4ec0\u4e48\u4e00\u5b9a\u8981\u5c1d\u8bd5\u878d\u5165\u6bcf\u4e00\u4e2a\u5708\u5b50\u5462\u3002 \u4eca\u5929\u5f04\u4e86\u4e00\u4e2a\u6709\u610f\u601d\u7684\u5bb9\u65a5\u9898\uff1aCF997C\uff0chfy \u6559\u6211\u7684\uff0c\u611f\u89c9\u7ec8\u4e8e\u7406\u89e3\u4e86\uff01 \u7136\u540e\u542c\u8bf4\u4e8c\u9879\u5f0f\u53cd\u6f14\u662f\u4e00\u4e2a\u5f0f\u5b50\uff0c\u65b9\u4fbf\u63a8\u5f0f\u5b50\u7684\u3002 \u770b Command_Block \u548c tzc_wk(ET2006) \u7684\u535a\u5ba2\u597d\u50cf\u6709\u5f88\u5168\u7684\u7701\u9009\u77e5\u8bc6\uff1f \u4ee5\u540e\u8bf4\u4e0d\u5b9a\u53ef\u4ee5\u5b66\u7740\u73a9\u3002","title":"10.26"},{"location":"misc/CSP2022/#1027","text":"\u60f3\u4ee5\u540e\u7684\u4e8b\u60c5\u662f\u6ca1\u6709\u7528\u7684\u3002 \u4e0d\u8fc7\u63d0\u524d\u89c4\u5212\u4e00\u4e0b\u4e5f\u672a\u5c1d\u4e0d\u53ef\u3002 \u5982\u679c\u4eca\u5e74\u62ff\u4e86 NOIP 1= \u5c31\u76f4\u63a5\u9000\u5f79 whk\uff0c\u4f46\u662f\u5e73\u5e38\u53ef\u4ee5\u6253\u6253 ARC \u5b66\u5b66\u7701\u9009\u7684\u4e1c\u897f\uff1f \u5c31\u5f53\u505a\u771f\u6b63\u7684\u5174\u8da3\u7231\u597d\u4e86\u3002 \u5982\u679c\u4eca\u5e74\u6ca1\u62ff\u4e5f\u6ca1\u5173\u7cfb\uff0c\u660e\u5e74\u8fd8\u53ef\u4ee5\uff0c\u800c\u4e14\u8fd8\u6709\u4e0d\u5c11\u7ade\u8d5b\u65f6\u95f4\uff0c\u597d\u597d\u78e8\u4e00\u78e8\uff0c\u5b8c\u5168\u591f\u4e86\uff01 \u81f3\u4e8e\u5927\u5b66\u80fd\u4e0d\u80fd\u6253 ACM \u8fd9\u4e9b\uff0c\u592a\u9065\u8fdc\u4e86\uff0c\u4e0d\u662f\u6211\u8981\u8003\u8651\u7684\u4e1c\u897f\u3002 \u5f04\u61c2\u4e86\u4e00\u4e2a\u542f\u53d1\u5f0f\u5408\u5e76\u7684\u9898\uff0c\u611f\u89c9\u4e5f\u5f88\u6709\u610f\u601d\uff0c\u800c\u4e14\u7b2c\u4e00\u6b21\u770b\u6587\u5b57\u9898\u89e3\u80fd\u8865\u5145\u51fa\u601d\u8def\u7136\u540e\u5199\u51fa\u6765\uff0c\u751a\u81f3\u4e00\u904d\u8fc7\uff01 \u660e\u5929\u628a dsu on tree \u7684\u677f\u5b50 CF600E \u8fc7\u4e00\u4e0b\uff0c\u7136\u540e\u5c31\u590d\u4e60\u4e00\u904d\u77e5\u8bc6\u70b9\u548c Trick\uff0c\u5199\u4e2a\u5927\u6a21\u62df\u9759\u4e00\u9759\u5fc3\u3002 \u518d\u51fa\u53bb\u5403\u4e2a\u996d\uff0c\u5dee\u4e0d\u591a\u4e86\uff0c\u4fdd\u6301\u4e0b\u5e73\u5e38\u5fc3\uff0c\u6b63\u5e38\u8003\u5c31\u53ef\u4ee5\u3002 \u4eab\u53d7\uff01 \u611f\u89c9\u6700\u8fd1\u51e0\u5929\u5b66 OI \u5f88\u5feb\u4e50\u3002","title":"10.27"},{"location":"misc/CSP2022/#1028","text":"\u4eca\u5929\u590d\u4e60\u7b97\u6cd5\uff0c\u548c hfy\u3001wcx \u8001\u5e08\u6fc0\u60c5\u6253\u677f\u5b50\u7ade\u901f\u3002 \u4e0b\u5348\u5f00\u4e86\u4e00\u573a ARC (ARC080) \u4e00\u8d77\u6253\u3002 \u7136\u540e\u611f\u89c9\u633a\u6709\u610f\u601d\uff0c\u4ee5\u540e whk \u5c31\u7528\u8fd9\u4e2a\u8c03\u8282\u4e86\u3002 \u665a\u4e0a\u548c PhOer zs \u51fa\u53bb\u5403\u4e86\u4e2a\u996d\uff0c\u542c\u8bf4 MO \u662f 30 \u53f7\u8003\u3002 \u665a\u4e0a\u603b\u7ed3\u4e86\u4e00\u4e0b ARC\uff0c\u7136\u540e\u60f3\u8d77\u6765\u53ef\u4ee5\u548c Meatherm \u9762\u57fa\uff0c\u4e8e\u662f\u7b80\u5355\u8bf4\u4e86\u4e00\u4e0b\u7279\u5f81\u3002 hfy \u8bf4\u6211\u7f29\u8896\u5b50\u968f\u673a\u6e38\u8d70\u548c zxjk \u7684\u4e60\u60ef\u4e00\u81f4\uff0c\u8349\uff0c\u597d\u50cf\u786e\u5b9e\u3002 \u53f7\u5bb6\u519b\u7684\u8003\u524d\u63d0\u9192\u7ec8\u4e8e\u66f4\u65b0\u4e86\u3002 \u53ea\u80fd\u8bf4\u4fdd\u6301\u5e73\u5e38\u5fc3\u5427\u3002 \u548c wcx \u8001\u5e08\u4e00\u8d77\u804a\u5929\u6478\u9c7c\u534a\u5c0f\u65f6\u7ed3\u675f\u4e86\u665a\u81ea\u4e60\uff0c\u52a0\u6cb9\u3002","title":"10.28"},{"location":"misc/CSP2022/#1029","text":"\u8003\u8bd5\uff0c\u4e0a\u5348\u8d77\u5e8a\u548c czh,xyh \u4e00\u8d77\u8d70\u3002 \u7136\u540e\u8fdb J \u8003\u573a\uff0c\u53d1\u73b0\u81ea\u5df1\u4e0a\u4e0b\u5348\u4e00\u573a\uff1f\uff1f\u800c\u4e14gjh\u4e0b\u5348\u5750\u6211\u65c1\u8fb9\uff1f \u611f\u89c9\u4e03\u4e2d\u9ad8\u65b0\u7684\u8bbe\u65bd\u6bd4\u6211\u4eec\u597d\u591a\u4e86/ll \u62ff\u5230\u4e86 win11 + i7 \u7684\u914d\u7f6e\u3002 \u666e\u53ca\u5f00\u9898\uff0c\u7136\u540e\u53d1\u73b0 T1 \u5c31\u662f\u7b80\u5355\u7684 log \u6c42\u4e00\u4e0b\uff0c\u7136\u540e\u53d1\u73b0 C++ \u91cc\u9762 log \u662f ln \uff0c log10 \u624d\u662f lg \uff0c\u56e0\u4e3a\u8fd9\u4e2a\u5bc4\u4e86\u4e00\u6b21\u3002 \u7136\u540e T2 \u6b7b\u6d3b\u60f3\u4e0d\u5230 \\(O(1)\\) \u505a\u6cd5\uff0c\u770b\u5230\u4e86 \\(m = n - ed + 2\\) \u8fd9\u4e2a\u6570\u636e\u8303\u56f4\u91cc\u7684\u63d0\u793a\uff0c\u4f46\u662f\u8fd8\u662f\u4e0d\u77e5\u9053\uff0c\u53ef\u80fd\u534a\u4e2a\u5c0f\u65f6\u5de6\u53f3\u51b3\u5b9a\u5148\u6253\u4e2a \\(\\sqrt{n}\\) \u66b4\u529b\u62ff\u4e2a 60pts\u3002 \u7136\u540e\u770b T3\uff0cMD\uff0c\u8868\u8fbe\u5f0f\u6811\uff0c\u800c\u4e14\u8981\u52a0\u62ec\u53f7\u4e4b\u7c7b\u7684\uff0c\u96be\u641e\uff0c\u5148\u770b T4\uff0c\u7136\u540e T4 \u5f00\u59cb\u6ca1\u601d\u8def\u3002 \u5b9a\u775b\u4e00\u770b\uff0c\u601d\u8003\u4e00\u4e0b\uff0c\u611f\u89c9\u5c31\u662f\u4e2a\u7b80\u5355 \\(O(n^3)\\) dp\uff0c\u8bbe \\(dp(i, j)\\) \u8868\u793a\u524d \\(i\\) \u4e2a\u70b9\uff0c\u7528\u4e86 \\(j\\) \u6b21\u673a\u4f1a\u7684\u6700\u957f\u3002 \u7136\u540e\u5199\u5b8c\u53d1\u73b0\u5faa\u73af\u53cd\u4e86\u4e00\u6b21\uff0c\u8fc7\u4e86 Sample1\uff0cSample2 \u6ca1\u8fc7\uff0c\u4ed4\u7ec6\u89c2\u5bdf\u53d1\u73b0\u5982\u679c\u6709\u6ca1\u6709\u7528\u7684\u53ef\u4ee5\u5f80\u4e0a\u4e22\uff0c\u7136\u540e\u5728\u540e\u9762\u8865\u4e86\u4e00\u4e0b\u5c31\u8fc7\u4e86\u5927\u6837\u4f8b\u3002 \u7136\u540e\u56de\u53bb\u770b T2\uff0c\u7a81\u7136\u89c9\u5f97\u76f4\u63a5\u6362\u4e2a\u5143\u7136\u540e\u4e00\u5143\u4e8c\u6b21\u65b9\u7a0b\u770b\u770b\u6709\u6ca1\u6709\u6574\u6570\u89e3\u5c31\u884c\u4e86\uff0c\u7136\u540e\u5199\u5b8c\u3002 \u770b T3\uff0c\u8fd8\u5269 1h 50m\uff0c\u4f30\u8ba1\u5199\u4e0d\u5b8c\uff0c\u76f4\u63a5\u5f00\u59cb\u6253\u66b4\u529b\u548c\u7279\u6b8a\u6027\u8d28\u5206\uff0c\u6700\u540e\u53d1\u73b0\u5199\u6302\u4e86\uff0c\u53cd\u6b63\u65e0\u6240\u8c13\uff0c\u671f\u671b\u5e94\u8be5 300+\uff0cpj1=\u6709\u4e86\u3002 \u7136\u540e\u51fa\u53bb\u548c xyh\uff0cczh \u4e00\u8d77\u5403\u706b\u9505\uff0c\u8fd8\u53bb 711 \u4e70\u4e86\u4e00\u76d2 \u5c0f \u6c49 \u5821 \uff0c\u996d\u56e2\u548c\u4e00\u74f6\u8336\u03a0\u3002 \u5728 xyh \u4ed6\u4eec\u8ba2\u7684\u9152\u5e97\u7761\u4e86\u4e00\u4f1a\u89c9\uff0c\u7136\u540e\u53bb\u8003\u573a\uff0c\u8fdb\u8003\u573a\u7684\u65f6\u5019\u770b\u5230\u4e86 JuanZhang \uff01\uff01\u5d14\u8001\u5e08\u597d\u5e05\uff01\uff01\uff01 \u7136\u540e\u8fdb\u8003\u573a\u4e4b\u540e\u5e76\u6ca1\u6709\u770b\u5230 Mea\uff0c\u6240\u4ee5\u5c31\u8fdb\u53bb\u4e86\uff0cgjh\u4e00\u76f4\u5728\u65c1\u8fb9\u5047\u6211/ng \u5f00\u9898\uff0cT1\u4e00\u773c\u8ba4\u4e3a\u662f\u4e2a Dp\uff0c\u60f3\u4e86\u4e00\u4f1a\u5f00\u59cb\u5199\uff0c\u7136\u540e\u53d1\u73b0\u6709\u540e\u6548\u6027\uff0c\u601d\u8003\u4e86\u4e00\u4e0b\u53d1\u73b0\u6362\u4e00\u4e0b\u9636\u6bb5\u5c31\u884c\u3002 \u4e4b\u540e\u53d1\u73b0\u72b6\u6001\u5408\u6cd5\u6027\u4e0d\u80fd\u4fdd\u8bc1\uff0c\u5148\u6253\u4e86\u4e00\u4e2a 40pts\u66b4\u529b\u7a33\u4f4f\u3002 \u7136\u540e\u60f3\u5230\u53ef\u4ee5\u76f4\u63a5\u8bb0\u5f55\u8f6c\u79fb\u8def\u5f84\u7136\u540e\u5224\uff0c\u5148\u7b97\u4e86\u4e00\u4e0b\u7a7a\u95f4\u53d1\u73b0\u4e0d\u4f1a\u70b8\uff0c\u4e8e\u662f\u5c31\u5199\u4e86\u3002 \u7136\u540e\u770b T2\uff0c\u8ba4\u4e3a\u662fshaber\u9898\uff0c\u7136\u540e\u5206\u8ba8\u51fa\u6765\u3002 \u7ed3\u679c\u6b63\u8d1f\u5206\u5f00\u7ef4\u62a4minmax\u5199\u6302\u4e86\uff0cT3\u7684\u6709\u624b\u90e8\u5206\u5206\u90fd\u6ca1\u6253\u3002 \u5410\u4e86\uff0c\u6700\u540e\u53d1\u73b0\u5199\u6302\u7684\u65f6\u5019\u7740\u6025\u4e86\uff0c\u672c\u6765\u4e4b\u524d\u5fc3\u6001\u4e00\u76f4\u5f88\u5e73\u7a33\u7684\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u4ee5\u4e3a\u81ea\u5df1\u53ef\u4ee5 200+ \u7136\u540e\u7b56\u7565\u6df7\u4e71\u4e86\u3002 \u770b\u6765\u5e94\u5bf9\u7a81\u53d1\u7684\u80fd\u529b\u8fd8\u4e0d\u591f\uff0c\u4e0d\u8fc7\u65e0\u6240\u8c13\uff0c\u53cd\u6b63\u5e94\u8be5\u80fd\u8fdb NOIP\u3002 \u56de\u5bb6\uff0c\u5199\u6e38\u8bb0\uff0c\u6d4b\u4ee3\u7801\uff0c\u8865 whk\uff0c\u4eca\u5929\u5c31\u8fd9\u6837\u8fc7\u53bb\u4e86\uff0c\u53c8\u662f\u5e73\u5e38\u7684\u4e00\u5929\u5462\u3002","title":"10.29"},{"location":"misc/CSP2022/#1030","text":"\u56de\u53bb whk \u4e86\uff0c\u4f30\u8ba1\u8003\u7684\u7a00\u6487\u3002 \u7b80\u5355\u505a\u4e00\u4e2a\u8d5b\u540e\u603b\u7ed3\u5427\uff1a PJ\uff1a\u8003\u7684\u8fd8\u884c\uff0c\u4f46\u662f\u6574\u4f53\u505a\u9898\u901f\u5ea6\u6162\u4e86\uff0c\u88ab T2 \u8bc8\u9a97\u4e86 30 min \u6ca1\u6362\u9898\u7136\u540e\u5bfc\u81f4 T3 \u6ca1\u65f6\u95f4\u5199\u5b8c\u3002 \u4f46\u662f\u53d1\u73b0 T3 \u5199\u4e0d\u5b8c\u4e86\u4e4b\u540e\u679c\u65ad\u5148\u6253\u66b4\u529b\u548c\u7279\u6b8a\u6027\u8d28\u518d\u68c0\u67e5\u5df2\u7ecf\u5199\u4e86\u7684\u9898\u662f\u5426\u5199\u6302\u8fd9\u70b9\u633a\u597d\u7684\u3002 \u7136\u540e T4 \u4e00\u773c\u6ca1\u6709\u601d\u8def\u7684\u65f6\u5019\u6ca1\u6709\u6025\uff0c\u5148\u51b7\u9759\u601d\u8003\u7136\u540e\u60f3\u51fa\u7ed3\u8bba\uff0c\u4e5f\u6ca1\u6709\u60f3\u5230\u7ed3\u8bba\u5c31\u72c2\u559c\uff0c\u800c\u662f\u8003\u8651\u4e86\u4e00\u4e0b corner case \u8fd8\u6709 dp \u7684\u540e\u6548\u6027\u548c\u5408\u6cd5\u6027\uff0c\u907f\u514d\u82b1\u8d39\u66f4\u591a\u7684\u65f6\u95f4\uff0c\u5199\u5b8c\u6d4b\u5927\u6837\u4f8b + \u62cd\u786e\u8ba4\u65e0\u8bef\u4e86\u518d\u53bb\u770b\u7684 T3\u3002 T2 \u88ab\u8bc8\u9a97\u4e86\uff0c\u4f46\u662f\u5148\u6253\u4e86 60pts \u66b4\u529b\u786e\u4fdd\u5206\u6570\uff0c\u7136\u540e\u653e\u6389 T2 \u53bb\u770b\u540e\u9762\u7684\uff0c\u4e4b\u540e\u6362\u4e2a\u8111\u5b50\u6e05\u9192\u70b9\u4e86\u518d\u8fc7\u6765\u60f3\u9898\u3002 \u6700\u540e\u7559\u4e86\u4e00\u70b9\u65f6\u95f4\u5728 Linux \u4e0b\u9762\u7f16\u8bd1\u4e86\u4e00\u6b21\uff0c\u671f\u671b\u5f97\u5206\u662f 100 + 100 + 20 ~ 60 + 100\u3002 Pj \u8003\u7684\u662f\u5f88\u7b26\u5408\u671f\u671b\u7684\u7b56\u7565\u7684\u3002 TG\uff1a\u8003\u7684\u5f88\u70c2\uff0cT1 \u5f00\u573a\u5c31\u60f3\u5230\u4e00\u4e2a\u505a\u6cd5\uff0c\u4f46\u662f\u4e0d\u77e5\u9053\u4e3a\u5565\u8fd9\u4e2a\u65f6\u5019\u76f4\u63a5\u6025\u4e86\uff0c\u76f4\u63a5\u5f00\u83bd\uff0c\u6839\u672c\u6ca1\u7ec6\u60f3\u6b63\u786e\u6027\u548c\u5408\u6cd5\u6027\uff0c\u7ed3\u679c\u53d1\u73b0\u81ea\u5df1\u6f0f\u4e86\u72b6\u6001\uff0c\u82b1\u4e86\u989d\u5916\u7684\u65f6\u95f4\u53bb\u68c0\u67e5\u6392\u9519\uff0c\u8fd9\u4e2a\u65f6\u5019\u53d1\u73b0\u505a\u6cd5\u5047\u4e86\uff0c\u4f46\u662f\u8fd8\u6ca1\u6025\uff0c\u601d\u8003\u4e86\u4e00\u6ce2\u600e\u4e48\u641e\u6210\u5408\u6cd5\u7684\uff0c\u7136\u540e\u60f3\u51fa\u6765\u4e86\u3002 \u770b T2\uff0c\u4e00\u773c\u770b\u51fa\u5206\u7c7b\u8ba8\u8bba\uff0c\u4f46\u662f\u5206\u7c7b\u8ba8\u8bba\u7684\u65f6\u5019\u6709\u70b9\u78e8\u8e6d\uff0c\u5fc3\u91cc\u89c9\u5f97\u65f6\u95f4\u8fd8\u5f88\u591f\u7528\uff08\u6b64\u65f6\u4ee5\u4e3a\u81ea\u5df1\u53ef\u4ee5\u62ff\u5230 200\uff09\uff0c\u7136\u540e\u5c31\u6162\u60a0\u60a0\u7684\u5199\uff0c\u6d6a\u8d39\u4e86\u65f6\u95f4\u3002 \u540e\u9762\u7ebf\u6bb5\u6811\u7ef4\u62a4 RMQ \u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u9047\u5230\u4e86\u8003\u524d\u4e00\u5929\u7684\u65b0 Trick \u5bfc\u81f4\u72c2\u559c\uff0c\u8fd9\u4e2a\u65f6\u5019\u6ca1\u51b7\u9759\u4e0b\u6765\u53bb\u68c0\u67e5\u5b9e\u73b0\u7ec6\u8282\uff0c\u6070\u597d\u8fd9\u4e2a Trick \u5b9e\u73b0\u4e0d\u597d\u5f04\uff0c\u5dee\u4e0d\u591a\u5199\u4e86 40 ~ 50 min \u624d\u610f\u8bc6\u5230\u5199\u6cd5\u5047\u4e86\uff0c\u6b64\u65f6\u5927\u6982\u8fd8\u5269 1h 30min\uff0c\u8fd9\u4e2a\u65f6\u5019\u5fc3\u6001\u5c31\u6025\u4e86\u3002 \u5176\u5b9e\u6b63\u786e\u7b56\u7565\u662f\u76f4\u63a5\u62ff\u6027\u8d28\u5206\u8dd1\u8def\u53bb\u6253 T3 \u66b4\u529b\uff0c\u4f46\u662f\u5fc3\u91cc\u4e00\u76f4\u4ee5\u4e3a\u81ea\u5df1\u53ef\u4ee5\u8c03\u51fa T2\uff0c\u7ed3\u679c\u8d8a\u8c03\u8d8a\u6025\uff0cT2\u6ca1\u8df3\u51fa\u6765\uff0cT3 \u7684\u5927\u4f17\u66b4\u529b\u5206 60pts \u4e5f\u6ca1\u6253\uff0c\u76f4\u63a5\u6012\u6302 120 pts\uff0cT4 \u6839\u672c\u90fd\u6ca1\u770b\uff0c\u5e94\u8be5\u6709 20 pts \u5de6\u53f3\u7684\u66b4\u529b\u7684\u3002 \u6240\u4ee5\u603b\u7ed3\u662f\uff1a\u5e94\u5bf9\u7a81\u53d1\u60c5\u51b5\u7684\u65f6\u5019\u8111\u5b50\u4e0d\u591f\u6e05\u9192\uff0c\u614c\u4e86\uff0c\u6ca1\u601d\u8003\u600e\u4e48\u5728\u5f53\u524d\u60c5\u51b5\u4e0b\u6700\u4f18\u5316\u81ea\u5df1\u7684\u5f97\u5206\uff0c\u7136\u540e\u5c31\u5fc3\u6001\u6eda\u96ea\u7403\uff0c\u8d8a\u6765\u8d8a\u6025\uff0c\u4ee3\u7801\u80fd\u529b\u4e5f\u4e0d\u591f\uff0c PJT3 \u6ca1\u5199\u51fa\u6765\uff0cTGT2 \u6ca1\u8c03\u51fa\u6765\uff0c\u53ef\u80fd\u4e0b\u6b21\u8003\u524d\u9700\u8981\u591a\u5199\u51e0\u4e2a\u5927\u6a21\u62df\u6765\u5e73\u590d\u5fc3\u6001\uff0c\u6700\u597d\u662f\u5b9a\u65f6\u505a\uff0c\u6a21\u62df\u8003\u573a\u73af\u5883\uff0c\u9047\u5230\u7a81\u53d1\u72b6\u51b5\u4e5f\u80fd\u5feb\u901f\u8f6c\u53d8\u7b56\u7565\u4f18\u5148\u62ff\u5206\u3002 \u6700\u91cd\u8981\u7684\uff1a\u5c3d\u91cf\u4fdd\u6301\u8111\u5b50\u7684\u76f8\u5bf9\u6e05\u9192\uff0c\u4e0d\u8981\u55ef\u83bd\uff0c\u964d\u4f4e\u5fc3\u6001\u4e0a\u4e0b\u6ce2\u52a8\uff0c\u5bf9\u7b56\u662f\u591a\u6253\u6a21\u62df\u8d5b\uff0c\u53ef\u80fd\u73b0\u5728\u8fd8\u6ca1\u7279\u522b\u9002\u5e94 OI \u8d5b\u5236\uff0c\u8981\u591a\u7ec3\u3002","title":"10.30"},{"location":"misc/CSP2022/#1031","text":"\u6587\u5316\u8bfe\u81ea\u95ed\u4e86\u3002 \u8fd9\u7bc7\u6e38\u8bb0\u5c31\u5199\u5230\u8fd9\u91cc\u4e86\u3002","title":"10.31"},{"location":"misc/CSP2022/#118","text":"upd: TG: 100 + 40 + 0 + 0 PJ: 90 + 100 + 0 + 100 shaber.","title":"11.8"},{"location":"misc/NOIP2022/","text":"\u5982\u679c\u4f60\u662f\u5728 LuoguBlog \u6216\u8005 cnblogs \u770b\u5f97\u5230\u7684\u3002 \u5efa\u8bae\u5230 GithubBlog \u4e0a\u770b\uff0c\u56e0\u4e3a\u6211\u7528\u4e86\u53ea\u6709 mkdocs \u652f\u6301\u7684\u6269\u5c55\u8bed\u6cd5\u3002 NOIP2022 \u6e38\u8bb0 \u03c8(\uff40\u2207\u00b4)\u03c8 11.17 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e0a\u5348\u5199\u4e86\u4e00\u4e2a\u80fd\u91cf\u5b88\u6052+\u503e\u659c\u4f20\u9001\u5e26\u6a21\u578b\u7684\u597d\u5403\u9898\u3002 \u6ca1\u6765\u5f97\u53ca\u5199 notes \u5c31\u6536\u5230\u4e86\u5c0f\u505c\u8bfe\u7684\u6d88\u606f\u3002 \u7136\u540e\u4e0b\u5348\u5c31\u56de\u53bb\u6574\u4e86\u70b9\u82b1\u6d3b\uff0c\u5199\u4e86\u70b9 Vim-usage\u3002 \u7136\u540e\u628a\u671f\u671b dp \u90a3\u4e2a\u9898\u5199\u4e86\uff0c\u914d\u7f6e\u4e86\u4e00\u4e0b\u73af\u5883\uff0c\u53d1\u73b0\u5b66\u6821\u7535\u8111\u662f Vim 8.0 /ch \u6240\u4ee5\u5378\u8f7d\u4e86\u5728 D \u76d8\u91cc\u91cd\u88c5\u4e86\u4e00\u4e2a 9.0\uff0c\u4f46\u662f\u597d\u50cf mkdp \u51fa\u4e86\u70b9\u95ee\u9898\uff0c\u4e8e\u662f\u53d1\u4e86\u4e00\u4e2a issue. \u5443\u5443\uff0c\u7136\u540e\u665a\u4e0a\u5403\u996d\u4e4b\u524d\u5c31\u662f\u770b\u6559\u804c\u5de5\u7bee\u7403\u8054\u8d5b\u3002 \u6211\u7684\u5316\u5b66\u8001\u5e08\uff0c\u7269\u7406\u8001\u5e08\uff0c\u8fd8\u6709 OI \u6559\u7ec3\u53d1\u6325\u7a33\u5b9a\uff0c\u5e26\u9886\u9ad8\u4e00\u6559\u5e08\u7ec4\u4ee5 34\uff1a19 \u7684\u597d\u6210\u7ee9\u51fb\u8d25\u4e86\u9ad8\u4e8c\u6559\u5e08\u7ec4\uff01 \u7136\u540e\u5728\u53e6\u5916\u4e00\u8fb9\u770b\u5230\u4e86\u521d\u4e2d\u7684\u73ed\u4e3b\u4efb\u8001\u5e08\u738b\u8001\uff0c\u8fc7\u53bb\u770b\u7684\u65f6\u5019\u6b63\u597d\u770b\u5230\u738b\u8001\u5355\u624b\u8fdb\u4e86\u4e00\u4e2a\u5f88\u6f02\u4eae\u7684\u4e09\u5206\u8fd8\u662f\u4e24\u5206\u3002 \u62dc\u8c22\uff0c\u540e\u9762\u4e00\u5806\u539f 19 \u73ed\u7684\u4eba\u56f4\u7740\u738b\u8001\u804a\u5929\u3002\u3002 \u5fc3\u6001\u5565\u7684\u603b\u7ed3\u5c31\u4e0d\u6302\u4e0a\u6765\u4e86\uff0c\u8981\u770b\u7684\u65f6\u5019\u7ffb\u4e0b\u65e5\u8bb0\u672c\u3002 C \u8001\u5e08\u627e\u6211\u4eec\u4e09\u4e2a\u8c08\u4e86\u4e0b\u4eca\u540e\u7684\u76ee\u6807\u4e4b\u7c7b\u7684\u3002 NOIP \u653e\u677e\u8003\u5427\u3002 \u5f00\u6838\u4e86\u9152\u7cbe\u961f\u957f\uff0c\u611f\u8c22 Ed \u63d0\u4f9b\u7684\u5173\u952e\u4fe1\u606f\u3002 11.18 \u03c8(\uff40\u2207\u00b4)\u03c8 Restart \u80fd\u89e3\u51b3 90% \u7684\u95ee\u9898\uff08\u786e\u4fe1\u3002 \u5443\u5443\uff0c\u4eca\u5929\u662f\u6446\u7684\uff0c\u4e0a\u5348\u5f00\u4e86\u4e2a ABC277 VP\uff0c\u4e2d\u95f4\u4e0b\u53bb\u62cd\u4e86\u4e2a\u7167\u82b1\u4e86 30min\uff0c\u56de\u6765\u5199\u4e86\u677f\u5b50 E\uff0cD \u6709\u4e2a [i] \u6253\u6210 [n] \u4e8e\u662f\u5728\u65f6\u95f4\u7ed3\u675f\u540e 1min \u8fc7\u4e86\u3002 \u7136\u540e\u5c31\u662f\u6446\u70c2\uff0c\u6446\u70c2\u3002 F 2400\uff0c\u57fa\u672c\u6ca1\u5565\u601d\u8def\uff0c\u6253\u7b97\u53bb\u505a\u4e0b Poker \u4e5f\u6ca1\u5e72\u52b2\u3002 \u4e8e\u662f\u4e0b\u5348\u7ee7\u7eed\u6446\u70c2\uff0c\u548c kmz \u51fa\u53bb\u5403\u4e86\u4e2a\u996d\uff0c\u73b0\u5728\u7ec8\u4e8e\u5f00\u59cb\u67e5\u6761\u5b50\u4e86\uff1f \u665a\u4e0a\u8bf4\u4e86\u4e0b\u53bb\u7ef5\u9633\u8003\u8bd5\u7684\u4e8b\u60c5\uff0c\u8fd9\u6b21\u662f\u5728\u5357\u5c71\u3002 \u6709\u6ca1\u6709\u4eba\u80fd\u9762\u57fa\u554a/kel \u4e0a\u6b21\u5728\u4e1c\u8fb0\u8003\u8bd5\uff0c\u6211\u7b97\u662f\u649e\u5230\u90a3\u5565\u4e86\u3002 \u8fd9\u6b21\u6362\u5230\u5357\u5c71\u8003\u8bd5\uff0c\u5e0c\u671b\u80fd\u6709\u66f4\u597d\u7684 rp\uff1f C \u8001\u5e08\u627e\u6211\u4eec\u9ad8\u4e00\u7684\u6240\u6709\u4eba\u6765\u96c6\u4f53\u8c08\u4e86\u4e00\u6b21\u8bdd\uff0c\u7528\u4ed6\u7684\u8bdd\u8bf4\u662f\u4e00\u4e2a\u503c\u5f97\u7eaa\u5ff5\u7684\u65f6\u523b\u3002 \u76f8\u4fe1\u66b4\u529b\uff01\uff01\uff01\uff01\u76f8\u4fe1 CCF \u7684\u6570\u636e\u4e00\u5b9a\u5f88\uff01\uff01\uff01\uff01\uff01 \u56e0\u4e3a\u4e4b\u540e\u5927\u6982\u7387\u6ca1\u6cd5\u96c6\u9f50\u4e86\u3002 \u665a\u4e0a\u627e wkm \u5b66\u4e86\u4e00\u4e0b gdb \u548b\u7528\uff0c\u660e\u5929\u8981\u7528\u4e00\u7528\u3002 \u542c\u8bf4 wkm \u4e0a\u5348\u88ab\u9632\u76d7\u5355\u5411\u95e8\u9501\u5728\u5929\u53f0\u4e86\u8349\uff0c\u6700\u540e\u8fd8\u662f\u558a\u4e86\u4e00\u4e2a\u697c\u4e0b\u6253\u626b\u4e2d\u534e\u56ed\u7684\u84dd\u80cc\u5fc3\u5e2e\u5fd9\u7684\uff08\u3002 \u5443\u5443\uff0c\u53ef\u80fd\u660e\u5929\u8981\u5199\u4e00\u5199 Task \u548c Limit \u4e4b\u7c7b\u7684\uff0c\u611f\u89c9\u8fd9\u6837\u592a\u6446\u4e86\u4e0d\u597d\u3002 11.19 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fdb\u884c\u4e86\u4e00\u4e2a\u6a21\u62df\u8d5b\u7684\u8003\uff0c100 + 0 + 100 + 33\u3002 T2 \u56e0\u4e3a\u4e0d\u4f1a\u7fa4\u8bba\u6240\u4ee5\u6ca1\u8bfb\u61c2\u9898\uff0c\u4e00\u5206\u6ca1\u62ff\u3002 T4 \u601d\u8def\u6b63\u786e\u7136\u800c\u5c11\u8ba8\u8bba\u4e86\u4e9b\u5185\u5bb9\u3002 \u548c ccr \u8ba8\u8bba\u4e86\u4e00\u4e0b\u8ba4\u4e3a T4 \u5e94\u8be5\u5c31\u662f\u5206\u8ba8\uff0cT2 \u6bd4\u8f83\u7384\u5e7b\u3002 \u4e0b\u5348\u5199\u5b8c Vim-Usage \u4e4b\u540e\u88ab opj \u53eb\u53bb\u7ed9\u5b66\u5f1f\u8bb2\u8ff0\u8840\u6cea\u7ecf\u5386\u3002 \u5dee\u4e0d\u591a\u8bf4\u4e86\u8fd9\u4e9b\u5185\u5bb9\u5427\uff08\u6709\u70b9\u4e71\uff09\uff1a draft.txt \u9898\u89e3\u7684\u5229\u5f0a\u3002 \u4e0d\u6562\u8d28\u7591\uff0c\u601d\u8003\u91cf\u592a\u5c11\uff0c\u4e45\u4e86\u4e4b\u540e\u601d\u7ef4\u6d3b\u6027\u5c31\u4e0b\u964d\u4e86\uff0c\u6c34\u5e73\u4e5f\u4f1a\u4e0b\u964d\u3002 \u4e5f\u4f1a\u6709\u4ee5\u4e3a\u81ea\u5df1\u80fd\u60f3\u51fa\u6765\u7684\u8fd9\u79cd\u5fc3\u7406\uff0c\u7136\u540e\u4e0d\u6df1\u5165\uff0cG\u3002 \u5bf9\u601d\u8def\u662f\u4e00\u79cd\u65b0\u7684\u542f\u53d1\uff08\u5c3d\u91cf\u627e\u548c\u81ea\u5df1\u505a\u6cd5\u7c7b\u4f3c\u7684\u9898\u89e3\uff0c\u8fd9\u6837\u6548\u679c\u66f4\u597d\u3002\uff09 \u80fd\u5b66\u5230\u4e1c\u897f\u5c31\u662f\u597d\u7684\u3002 \u4e0d\u7ba1\u4f60\u5b66\u7684\u8fd9\u4e2a\u8003\u8bd5\u4f1a\u4e0d\u4f1a\u8003\uff0c\u6700\u91cd\u8981\u7684\u662f\u5b66\u6ca1\u5b66\u5230\u5957\u8def\uff0c\u540e\u671f\u90fd\u662f\u6bd4\u8c01 Trick \u89c1\u5f97\u591a\u3002 \u601d\u8003\u7684\u90a3\u4e2a\u8fc7\u7a0b\u624d\u662f\u6700\u91cd\u8981\u7684\u3002 \u5982\u679c\u5f00\u59cb\u5bf9\u7740\u9898\u53d1\u5446\u7684\u65f6\u5019\uff0c\u53bb\u5395\u6240\u6216\u8005\u518d\u8bfb\u4e00\u904d\u9898\u9762\u3002 \u628a\u81ea\u5df1\u601d\u7ef4\u7684\u6d41\u7a0b\u56fe\u753b\u51fa\u6765\uff0c\u514d\u5f97\u56e0\u4e3a\u53d1\u5446\u6d6a\u8d39\u65f6\u95f4\uff0c\u4e2d\u65ad\u601d\u8003\u8fc7\u7a0b \u6df1\u5ea6\u601d\u8003\u7684\u5b9a\u4e49\u5927\u6982\u662f\u6307\uff0c\u8111\u888b\u91cc\u9762\u6709\u4e00\u4e2a\u6e05\u6670\u7684\u6d41\u7a0b\u56fe\uff0c\u77e5\u9053\u6bcf\u4e00\u6b65\u8981\u7ef4\u62a4\u4ec0\u4e48\u4fe1\u606f\uff0c\u77e5\u9053\u4e0b\u4e00\u6b65\u8981\u5e72\u4ec0\u4e48\uff0c\u77e5\u9053\u4e3a\u4ec0\u4e48\u8981\u8fd9\u4e48\u5e72\uff0c\u77e5\u9053\u4e00\u4e9b\u7ec6\u8282\uff0c\u4f46\u662f\u786e\u5b9e\u56e0\u4e3a\u4e00\u4e9b key \u6ca1\u60f3\u5230\u4e0d\u4f1a\uff0c\u8fd9\u4e2a\u65f6\u5019\u770b\u9898\u89e3\u624d\u662f\u6709\u4ef7\u503c\u7684\u3002 OI \u8fd9\u4e1c\u897f\u771f\u6b63\u5438\u5f15\u4eba\u7684\u5730\u65b9\u5728\u4e8e\u601d\u8003\u8fc7\u540e\u90a3\u4e2a\u62e5\u6709\u5de8\u5927\u6210\u5c31\u611f\u7684\u8fc7\u7a0b\uff08\u60f3\u51fa\u6765\uff0c\u770b\u9898\u89e3\u604d\u7136\u5927\u609f\u4e4b\u7c7b\u7684\uff09\u3002 \u6240\u4ee5\u771f\u7684\u6295\u5165\u4e4b\u540e\u4f1a\u53d1\u73b0\uff0c\u5176\u5b9e\u9893\u5e9f\uff0c\u4e5f\u5c31\u662f\u77ed\u65f6\u95f4\u80fd\u83b7\u5f97\u6210\u5c31\u611f\u7684\u4e1c\u897f\uff0c\u771f\u7684\u6ca1\u6709\u610f\u601d\u3002 JX \u627e\u6211\u95ee\u4e86\u70b9 Vim \u76f8\u5173\u7684\u4e1c\u897f\uff0c\u611f\u89c9\u5176\u5b9e OI \u5fc5\u8981\u7684\u914d\u7f6e\u548ckey\u4e5f\u5c31\u90a3\u4e9b\uff1f \u53d1\u73b0\u6ca1\u6709\u4eba\u53ef\u4ee5\u548c\u81ea\u5df1\u4e00\u8d77\u4f4f\uff0cxzq \u548c hfy \u7684\u5bb6\u957f\u90fd\u8981\u4e00\u8d77\u53bb\uff0c\u6240\u4ee5\u6211\u5bc4\u5bc4\u4e86\u3002 \u665a\u4e0a\u56de\u6765\u5f04\u4e86\u4e00\u4e0b\u535a\u5ba2\u7684\u6846\u67b6\uff0c\u66f4\u65b0\u4e86 mkdocs\u3002 \u88ab cftm \u6574\u7834\u9632\u4e86\uff0c\u5177\u4f53\u539f\u56e0\u4e0d\u63d0\u3002 \u4e45\u8fdd\u7684\u5403\u4e86\u53ea\u70e4\u9e21\uff0c\u9999\u7684\u3002 \u53d1\u73b0\u7535\u5b50\u73ed\u724c\u4e0a\u7684\u4e2a\u4eba\u4ecb\u7ecd\u53ef\u4ee5\u5728\u7f51\u4e0a\u6539\uff0c\u4e8e\u662f\u6539\u6210\u4e86\u8fd9\u6837\uff1a \u54e6\u5bf9\u4e86\uff0c\u8bb0\u5f97\u6574\u7406\u4e0b\u535a\u5ba2\u7684\u56fe\u7247\uff0c\u6362\u4e2a\u56fe\u5e8a\u3002 \u5443\u5443\uff0c\u611f\u89c9\u5c31\u8fd9\u4e9b\u4e86\u3002 11.20 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8001\u7238\u53bb\u8dd1\u6210\u9a6c\u4e86\u3002 \u66f4\u65b0\u5230\u4e86 win11 22H2\uff0c\u611f\u89c9\u66f4\u8212\u670d\u4e86\u3002 \u4e0a\u5348\u627e\u4e86\u627e\u4e07\u534e\u955c\u7684\u8d44\u6e90\uff0c\u7a81\u7136\u60f3\u5230\u4e00\u4e2a\u4e8b\u60c5\u3002 \u611f\u89c9\u5f88\u591a\u4e8b\u7269\u548c\u6211\u7684\u5173\u7cfb\u597d\u6bd4 \\(\\sin x\\) \u548c \\(\\cos x\\) \u3002 \u6bd4\u5982\u6211\u5f88\u65e9\u7684\u65f6\u5019\u5c31\u770b\u89c1\u8fc7\u4e1c\u65b9\uff0c\u4f46\u662f\u6ca1\u6709\u5165\u5751\uff0c\u5f53\u65f6\u770b cz \u7684\u5165\u5751\u6307\u5357\u91cc\u5199\u7684\u5f39\u5e55\u5c04\u51fb\u6e38\u620f\uff0c\u89c9\u5f97\u53ef\u80fd\u6ca1\u4ec0\u4e48\u610f\u601d\u3002 \u7ed3\u679c\u540e\u6765\u56e0\u4e3a\u67d0\u9996\u6b4c\u88ab\u5e26\u5165\u4e86\u5751\uff0c\u5c1d\u8bd5\u4e86\u5996\u5996\u68a6\uff0c\u559c\u6b22\u4e0a\u4e86 STG \u7684\u98ce\u683c\u3002 \u4e07\u534e\u955c\u4e5f\u662f\uff0c\u6211\u4e4b\u524d\u641c\u5e7b\u60f3\u4e07\u534e\u955c\u7684\u65f6\u5019\u641c\u51fa\u8fc7\u4e07\u534e\u955c\uff0c\u5f53\u65f6\u89c9\u5f97\u5c31\u662f\u4e2a\u4ec0\u4e48\u756a\u5267\u5427\u53ef\u80fd\u3002 \u7136\u540e\u4e5f\u6ca1\u6709\u6df1\u5165\u4e86\u89e3\u8fc7\uff0c\u7ed3\u679c\u5f53\u6211\u60f3\u5c1d\u8bd5 Gal \u7684\u65f6\u5019\uff0c\u4e07\u534e\u955c\u53c8\u51fa\u73b0\u5728\u4e86\u6211\u7684\u773c\u524d\u3002 \u6240\u4ee5\u5c31\u771f\u7684\uff0c\u662f\u90a3\u79cd\u4e0d\u65ad\u4ea4\u7ec7\u7f20\u7ed5\u590d\u5408\u79bb\u522b\u7684\u8fc7\u7a0b\uff0c\u6784\u6210\u4e86\u4eba\u751f\u554a\u3002 \u4f60\u4ee5\u4e3a\u6211\u4eec\u6e10\u884c\u6e10\u8fdc\u4e86\uff0c\u5b9e\u9645\u4e0a\u5374\u662f\u4e3a\u4e86\u4e0b\u6b21\u76f8\u4ea4\u505a\u51c6\u5907\uff0c\u4f60\u4ee5\u4e3a\u6211\u4eec\u76f8\u4ea4\u4e86\uff0c\u80fd\u5408\u6210\u4e00\u6761\u7ebf\u4e86\uff0c\u5b9e\u9645\u4e0a\u6211\u4eec\u9a6c\u4e0a\u5c31\u4f1a\u79bb\u522b\u3002 \u4efb\u4f55\u4e8b\u60c5\u90fd\u4e0d\u662f Eternal \u7684\uff0c\u6216\u8005\u8bf4\u4f60\u7684\u4eba\u751f\u597d\u6bd4\u706b\u8f66\uff0c\u4f60\u9047\u5230\u7684\u4e8b\u60c5\uff0c\u9047\u5230\u7684\u4eba\uff0c\u4f1a\u5728\u4e0d\u540c\u7684\u7ad9\u4e0a\u8f66\uff0c\u4e0b\u8f66\uff0c\u6216\u8bb8\u5728\u4e58\u5750\u522b\u7684\u7ebf\u8def\u540e\u53c8\u548c\u4f60\u4ea4\u7ec7\u3002 \u662f\u8fd9\u6837\u7684\u3002 \u6211\u9760\u4e07\u534e\u955c\u597d\u597d\u73a9\uff01\uff01\uff01 \u83b2\u534e\uff0c\u83b2\u534e\uff0c\u83b2\u534e\uff0c\u563f\u563f\u2026\u2026 \u9ed1\u957f\u76f4\u51b7\u50b2\u5a07\uff0c\u600e\u4e48\u4f1a\u6709\u8fd9\u79cd\u5b58\u5728\uff01\uff01\uff01\uff01\uff01 \u56de\u5b66\u6821\u4e4b\u540e\u548c hfy \u8fdb\u884c\u9893\u5e9f\u6d3b\u52a8\uff0c\u559d\u559d\u7ca5\uff0c\u7136\u540e\u7ee7\u7eed\u4e07\u534e\u955c\u3002 \u563f\u563f\uff0c\u6211\u7684\u83b2\u534e\uff0c\u563f\u563f\uff0c\u83b2\u534e\u2026\u2026\uff0c\u6211\u7684\u83b2\u534e\u3002 \u611f\u89c9\u4e00\u4e2a\u4e8b\u60c5\u662f\uff0c\u6bcf\u6b21\u6253 Gal \u90fd\u4f1a\u53ea\u8d70\u6700\u559c\u6b22\u7684\u89d2\u8272\u7684\u8def\u7ebf\uff0c\u5176\u4ed6\u7684\u7edd\u5bf9\u4e0d\u4f1a\u78b0\u3002 \u800c\u4e14\u5982\u679c\u6709 He\uff0c\u9047\u5230\u4e86 Be \u4f1a\u7acb\u9a6c\u8bfb\u6863\u3002 \u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u5462\uff0c\u6211\u4e5f\u4e0d\u77e5\u9053\uff0c\u4e5f\u8bb8\u662f\u4e2a\u4eba\u6027\u683c\u3002 \u6765\u770b\u70b9 hfy \u56fe\uff1a hfy \u8981\u6c42\u5408\u5f71\uff0c\u8349\u3002 \u4e8e\u662f\u5c31\u5408\u5f71\u4e86\u3002 \u5443\u5443\uff0c\u4f46\u662f\u611f\u89c9\u597d\u50cf\u8fd9\u6837\u6709\u70b9\u8fc7\u4e8e\u9893\u5e9f\u4e86\u3002 \u4e0d\u884c\u4e0d\u884c\u4e0d\u884c\u4e0d\u884c\u4e0d\u884c\u4e0d\u884c\uff0c\u8fc7\u4e8e\u6d6e\u8e81\u4e86\u3002 \u5199\u5b8c\u6e38\u8bb0\u8d76\u7d27\u505a\u505a\u9898\u6062\u590d\u72b6\u6001\u3002 MD\uff0cARC \u7ed9\u6211\u6574\u4e0d\u4f1a\u4e86\uff0c\u6c34\u5e73\u4f4e\u4e0b\uff0c\u53ef\u80fd\u662f\u6709\u70b9\u61d2\u4e86\uff0c\u731c\u4e86\u6027\u8d28\u4e0d\u60f3\u53bb\u8bc1\u660e\u6216\u8005\u8bc1\u4f2a\u3002 \u5443\u5443\uff0c\u611f\u89c9\u8fd9\u4e2a\u72b6\u6001\u975e\u5e38\u4e0d\u5bf9\uff0c\u6709\u5fc5\u8981\u6574\u70b9\u4ec0\u4e48\u63d0\u9192\u81ea\u5df1\u3002 11.21 \u03c8(\uff40\u2207\u00b4)\u03c8 \u72b6\u6001\u5f88\u4e0d\u597d\uff0c\u6709\u70b9\u5934\u75db + \u80c3\u75db\u3002 \u6574\u5929\u4ec0\u4e48\u90fd\u6ca1\u505a\uff0cfw\u3002 \u5199\u4e86\u70b9\u9c9c\u82b1\uff0c\u5c45\u7136\u5f97\u5230\u4e86\u8ba4\u53ef\uff0c\u4e4b\u540e\u62ff\u5230 laptop \u5c31 update \u5230 github blog \u4e0a\u3002 \u8fd9\u91cc\u662f\u539f\u6587\uff1a 11-21 \u65e5\u9c9c\u82b1 - Edit Edit Stomachache\uff0cheadache\uff0c\u6253\u5b8c\u7403\u8fc7\u540e\u6362\u8863\u670d\u592a\u6162\u4e86\uff0c\u53ef\u80fd\u662f\u6709\u70b9\u98ce\u70ed\u611f\u5192\u3002 \u5403\u4e86\u8fde\u82b1\u6e05\u761f\u80f6\u56ca\u4e4b\u540e\u8fd8\u662f\u4e00\u6837\uff0c\u8fc7\u4e8e\u96be\u53d7\uff0c\u4e00\u9053\u9898\u4e5f\u6ca1\u6709\u505a\u3002 \u4e34\u65f6\u8d77\u610f\u51b3\u5b9a\u8bf7\u4e2a\u5047\u51fa\u53bb\u51fa\u4e2a\u996d\uff0c\u4e5f\u7b97\u6563\u6563\u5fc3\u3002 \u88f9\u4e0a\u4e94\u5c42\u8863\u670d\uff0c\u6234\u4e0a\u5370\u5237\u7740\u4f01\u9e45\u7684\u53e3\u7f69\uff0c\u8fd9\u597d\u50cf\u662f\u4ece tencent \u90a3\u91cc\u62ff\u56de\u6765\u7684\u5427\u3002 \u8d70\u5230 PhOer \u57fa\u53cb\u63a8\u8350\u7684\u8001\u9ebb\u6284\u624b\u5e97\uff0c\u60f3\u70b9\u4e00\u4efd\u8001\u9ebb\uff0c\u4f46\u662f\u8f6c\u5ff5\u4e00\u60f3\uff0c\u611f\u5192\u4e86\u8fd8\u662f\u4e0d\u8981\u5403\u8fa3\u7684\u6bd4\u8f83\u597d\u3002 \u201c\u4e09\u4e24\uff0c\u6e05\u6c64\u201d\uff0c\u6211\u5982\u662f\u8d70\u8fdb\u5e97\u3002 \u7ed9\u4eba\u4e00\u79cd\u5f88\u6000\u5ff5\u7684\u611f\u89c9\u554a\uff0c\u5c0f\u65f6\u5019\u7ecf\u5e38\u4f1a\u5403\u534e\u9633\u90a3\u8fb9\u7684\u4e00\u5bb6\u8001\u9ebb\u6284\u624b\uff0c\u4ece\u6765\u90fd\u662f\u5403\u6e05\u6c64\u3002 \u4f46\u662f\u8fd8\u662f\u4ee5\u5b69\u63d0\u7684\u8eab\u4efd\u6ee1\u610f\u7684\u63a5\u53d7\u4e86\u4e00\u7897\u7897\u4e00\u4e24\u7684\u6284\u624b\u3002 \u5f88\u70eb\uff0c\u5f88\u5408\u6211\u610f\uff0c\u51fa\u6765\u5c31\u662f\u4e3a\u4e86\u5403\u4e0a\u4e00\u7897\u8fd9\u6837\u70ed\u4e4e\u4e4e\u7684\u6284\u624b\u7684\uff0c\u4e5f\u8bb8\u4f1a\u8ba9\u6211\u7f13\u89e3\u4e00\u70b9\u5427\u3002 \u600e\u4e48\u611f\u89c9\u7fa4\u53cb\u6bd4\u4e09\u6b21\u5143\u7684\u59b9\u5b50\u8fd8\u4f53\u8d34\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u4ee5\u524d\u90a3\u6b21\u7ecf\u5386\u8ba9\u6211\u5bf9\u4e09\u6b21\u5143\u7684\u59b9\u5b50\u5931\u53bb\u4e86\u597d\u611f\u5427\u3002 \u4e0d\u7ba1\u5e72\u4ec0\u4e48\uff0c\u6211\u90fd\u662f\u90a3\u79cd\u5728\u4e00\u68f5\u6811\u4e0a\u540a\u6b7b\u7684\u4eba\u3002 Galgame \u4e5f\u662f\uff0c\u53ea\u63a8\u81ea\u5df1\u559c\u6b22\u89d2\u8272\u7684 HE\uff0c\u77e5\u9053\u6ca1\u6709 HE \u5c31\u7edd\u5bf9\u4e0d\u4f1a\u5165\u624b\u3002 \u611f\u60c5\u4e5f\u662f\u8fd9\u6837\u7684\uff0c\u4f46\u4e5f\u56e0\u4e3a\u8fd9\u4e2a\u88ab\u4f24\u7684\u5f88\u6df1\uff0c\u4e0d\u7ed9\u5e78\u597d\u5b83\u6ca1\u6709\u5f71\u54cd\u5230\u6211\uff0c\u6216\u8005\u8bf4\u53ea\u5b58\u5728\u6b63\u9762\u5f71\u54cd\u3002 \u60f3\u5230\u8fd9\u91cc\uff0c\u4e00\u53e3\u6c64\u559d\u4e0b\u53bb\uff0c\u597d\u70eb\uff01 \u70ed\u6c14\u84b8\u817e\u7740\uff0c\u955c\u7247\u4e0a\u8d77\u4e86\u4e00\u5c42\u6c34\u73e0\u3002 \u8212\u670d\u591a\u4e86\u3002 \u8d70\u51fa\u53bb\uff0c\u53bb\u5230\u7ae0\u9c7c\u70e7\u7684\u644a\u5b50\uff0c\u644a\u4e3b\u662f\u4e00\u4e2a\u6148\u7965\u7684\u8001\u7237\u7237\uff0c\u7ed9\u6211\u4e00\u79cd\u5f88\u4eb2\u5207\u7684\u611f\u89c9\u3002 \u6162\u541e\u541e\uff0c\u4e0d\u7d27\u4e0d\u6162\u7684\u628a\u7ae0\u9c7c\u70e7\u6311\u8d77\u6765\uff0c\u771f\u597d\u554a\u3002 \u201c\u4e0d\u8981\u8089\u677e\u54c8\uff08\u56db\u5ddd\u8bdd\u5e38\u89c1\u8bed\u6c14\u52a9\u8bcd\uff09\u201d\uff0c \u201c\u597d\uff0c\u8981\u54c8\u5b50\uff08\u4ec0\u4e48\uff09\u9171\uff1f\u201d\uff0c\u201c\u6211\u60f3\u4e00\u54c8\uff08\u4e00\u4e0b\uff09\uff0c\u6492\u62c9\u9171\u561b\uff08\u56db\u5ddd\u4eba\u7279\u6709 s sh \u4e0d\u5206\uff09\u201d\uff0c \u201c\u83ab\u5f97\uff08\u6ca1\u6709\uff09\u95ee\u9898\uff01\u201d\u3002 \u7236\u4eb2\u8bf4\u8fc7\uff0c\u53cc\u624b\u9012\u51fa\uff0c\u53cc\u624b\u63a5\u8fc7\u662f\u5bf9\u522b\u4eba\u7684\u5c0a\u91cd\uff0c\u6211\uff0c\u644a\u4e3b\u90fd\u8fd9\u4e48\u505a\u4e86\uff0c\u644a\u4e3b\u4e00\u5b9a\u6709\u4e00\u4e2a\u53cb\u5584\u7684\u5185\u5fc3\u5427\uff08\u7b11\u3002 \u5403\u7684\u65f6\u5019\u8fd8\u662f\u50cf\u4e2a baka \u4e00\u6837\uff0c\u5c3d\u7ba1\u6211\u77e5\u9053\u4f1a\u6709\u70b9\u70eb\u5634\uff0c\u4f46\u662f\u8fd8\u662f\u4e00\u53e3\u54ac\u4e86\u4e0b\u53bb\uff0c\u6025\u7740\u5f80\u5916\u5439\u6c14\u3002 \u5f88\u4e0d\u5c0f\u5fc3\uff0c\u6728\u9c7c\u5c51\u9644\u7740\u5728\u6c99\u62c9\u9171\u4e0a\uff0c\u7c98\u5230\u4e86\u6211\u7684\u5634\u8fb9\uff0c\u8214\u6389\u3002 \u5982\u679c\u6709\u4e2a\u59b9\u5b50\u5728\u65c1\u8fb9\u7684\u8bdd\uff0c\u4e5f\u8bb8\u4f1a\u88ab\u6211\u7684\u8fd9\u526f\u6837\u5b50\u9017\u7b11\u5427\uff0c\u51b7\u5a07\u7684\u9ed1\u957f\u76f4\u59b9\u5b50\u7efd\u653e\u7b11\u9765\u7684\u5239\u90a3\uff0c\u4e00\u5b9a\u5f88\u7f8e\u3002 \u53ef\u60dc\u6211\u5df2\u7ecf\u5931\u53bb\u4e86\u8fd9\u6837\u7684\u673a\u4f1a\u5f88\u4e45\u4e86\u3002 \u968f\u673a\u6e38\u8d70\uff0c\u4eff\u4f5b\u662f\u5728\u4e00\u6761\u60ec\u610f\u7684\u8857\u9053\u4e0a\uff0c\u4f46\u597d\u50cf\u4e5f\u786e\u5b9e\u662f\u4e00\u6761\u60ec\u610f\u7684\u8857\u9053\u3002 \u5bd2\u98ce\u5439\u8fc7\u6765\u4e86\uff0c\u6211\u6234\u4e0a\u5e3d\u5b50\uff0c\u6ca1\u6709\u70ed\u996e\uff0c\u5f88\u96be\u53d7\uff0c\u60f3\u559d\u70b9\u70ed\u7684\uff0c\u4f46\u662f\u8d85\u5e02\u91cc\u90fd\u6ca1\u6709\u3002 \u5356\u81ed\u8c46\u8150\u7684\u5927\u53d4\uff0c\u5b64\u96f6\u96f6\u7684\u7b49\u7740 customer\uff0c\u4f46\u662f\u4ece\u4ed6\u7684\u8138\u4e0a\u770b\u4e0d\u5230\u4e00\u4e1d\u5931\u671b\u3002 \u53ef\u80fd\u5f88\u591a\u4f5c\u5bb6\u90fd\u6ca1\u6709\u5411\u4e0b\uff0c\u770b\u8fc7\u8eab\u8fb9\u7684\u8fd9\u4e9b\u5c0f\u4eba\u7269\u5427\u3002 \u63cf\u5199\u4ed6\u4eec\u7684\uff0c\u4e00\u5b9a\u662f\u4e2a\u82e6\u6da9\u4f46\u662f\u5e26\u7740\u4e00\u4e1d\u5bf9\u751f\u6d3b\u7684\u671f\u671b\u7684\u6545\u4e8b\uff0c\u6211\u8fd9\u4e48\u60f3\u7740\uff0c\u8d70\u5411\u4e86\u6c11\u4e50\u3002 \u6c11\u4e50\uff0c\u8bb8\u4e45\u6ca1\u6709\u6da8\u4ef7\uff0c\u7ec8\u4e8e\u6da8\u4e86\u4e00\u6b21\u4ef7\uff0c\u770b\u5230\u4e86\u66fe\u7ecf\u4e0d\u77e5\u9053\u5728\u90a3\u4e00\u90e8\u52a8\u753b\u91cc\u770b\u8fc7\u7684 SANGARIA coffee\u3002= 9.9\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u662f 10\uffe5 \u5462\uff0c\u8fd9\u4e5f\u8bb8\u662f\u5546\u5bb6\u7684\u610f\u56fe\u5427\u3002 \u7528\u624b\u6413\u7740\u5496\u5561\uff0c\u60f3\u8ba9\u5b83\u53d8\u6696\u548c\u4e00\u70b9\uff0c\u597d\u5e0c\u671b\u6709\u4e00\u4e2a\u53ef\u7231\u7684\u59b9\u5b50\uff0c\u56f4\u7740\u56f4\u5dfe\uff0c\u6234\u7740\u624b\u5957\uff0c\u5c1d\u8bd5\u7740\u5439\u51c9\u624b\u91cc\u7684\u5976\u8336\uff0c\u6216\u8005\u8bf4\u5439\u7740\u6211\u4e70\u7684\u5976\u8336\uff0c\u867d\u7136\u6211\u5e76\u4e0d\u559c\u6b22\u559d\u5976\u8336\uff0c\u4f46\u662f\u59b9\u5b50\u4eec\u4e5f\u8bb8\u5f88\u559c\u6b22\u559d\u5427\u3002 \u6bcf\u6b21\u60f3\u8981\u8bb0\u4f4f\u4ec0\u4e48\u4e1c\u897f\u7684\u65f6\u5019\u603b\u662f\u4f1a\u5f88\u5feb\u7684\u5fd8\u8bb0\uff0c\u592a\u8d2a\u5fc3\u4e86\u3002 \u56de\u5230\u6559\u5b66\u697c\uff0c\u611f\u53f9\u7740\u8fd9\u5c31\u662f\u751f\u6d3b\u554a\uff0c\u8fd9\u6837\u7684\u65e5\u5b50\u4e0d\u5e38\u6709\uff0c\u4f46\u662f\u683c\u5916\u73cd\u8d35\u3002 \u4eba\u751f\u662f\u4e00\u7ec4\u7ec4 \\(\\sin x\\) \u548c \\(\\cos x\\) \u7684\u56fe\u50cf\uff0c\u4ea4\u7ec7\u7f20\u7ed5\u7740\uff0c\u8fdc\u79bb\u7740\uff0c\u9760\u8fd1\u7740\u3002 \u6211\u9047\u5230\u4f60\uff0c\u90a3\u662f\u4f60\u548c\u6211\u90fd\u5230\u8fbe\u4e86 \\(k\\pi + \\dfrac{\\pi}{4}, (k \\in \\mathbb{Z})\\) \u3002 \u53ea\u4e0d\u8fc7\u4f60\u7684\u56fe\u50cf\u53ef\u80fd\u4f1a\u7a81\u7136\u8f6c\u5411\uff0c\u79fb\u5230\u53e6\u4e00\u4e2a\u5e73\u9762\uff0c\u6211\u5c31\u4e0d\u4f1a\u91cd\u65b0\u9047\u89c1\u4f60\u3002 \u4f46\u662f\u6709\u4e9b\u4eba\u4e0d\u4e00\u6837\uff0c\u4f60\u548c\u6211\u7684\u66f2\u7ebf\u4eff\u4f5b\u5929\u751f\u5c31\u5e94\u5f53\u540c\u5904\u540c\u4e00\u5e73\u9762\u7684 \\([-1, 1]\\) \u4e4b\u95f4\uff0c\u4ece\u6211\u4eec\u7684\u5b9a\u4e49\u57df\u76f8\u4ea4\u7684\u90a3\u4e00\u77ac\u95f4\u540e\uff0c\u6211\u4eec\u5c31\u4e0d\u4f1a\u5206\u5f00\uff0c\u76f4\u5230\u751f\u547d\u7ed3\u675f\uff0c\u4f60\u6216\u8005\u6211\uff0c\u6211\u4eec\u7684\u5b9a\u4e49\u57df\u5230\u6b64\u4e3a\u6b62\u3002 \u53ef\u662f\u751f\u4e0e\u6b7b\uff0c\u4ece\u6765\u90fd\u662f\u53ea\u8bfb\u7684 std::pair<long double, long double> \uff0c\u4f60\u65e0\u6cd5\u6539\u53d8\u8fd9\u4e00\u5207\uff0c\u547d\u8fd0\u5728\u521b\u9020\u4f60\u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u7528 Administrator \u6743\u9650\u5199\u5165\u4e86\u8fd9\u4e24\u4e2a\u9ad8\u7cbe\u5ea6\u6d6e\u70b9\u6570\u3002 \u53ef\u80fd\u4f60\u4f1a\u5c1d\u8bd5 sudo \uff0c\u4f46\u662f\u4eba\u751f\u662f Windows \u7cfb\u7edf\uff0c\u95ed\u6e90\u7684\u5b83\u65e0\u6cd5\u8ba9\u4f60\u7aa5\u89c1\u5176\u6700\u672c\u8d28\u7684\u771f\u5b9e\uff0c\u4f60\u4e0d\u53ef\u80fd\u6210\u4e3a Administrator\uff0c\u4f60\u53ea\u662f Guest\uff0c\u4e00\u4e2a\u666e\u901a\u7684 Guest\u3002 \u5f53\u7136\u6211\u4eec\u4e2d\u603b\u662f\u6709\u4eba\uff0c\u4f1a\u53bb\u5c1d\u8bd5\u63a2\u6c42 Administrator \u7684\u5965\u79d8\uff0c\u7834\u89e3\uff0c\u91cd\u7ec4\uff0c\u4ed6\u4eec\u505a\u7684\u4e8b\u60c5\u662f\u503c\u5f97\u5c0a\u91cd\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u5b9e\u5728\u662f\u592a\u6e3a\u5c0f\uff0c\u8fd9\u662f\u6211\u4eec\u8bc1\u660e\u81ea\u5df1\u5b58\u5728\u7684\u610f\u4e49\uff0cAdministrator \u5728\u5220\u9664\u4f60\u7684\u65f6\u5019\u8bf4\u4e0d\u5b9a\u4f1a\u5728\u5176\u4ed6 User \u7684 memory.txt \u5f53\u4e2d\u7559\u4e0b\u90a3\u4e48\u4e00\u884c\u5b57\uff0c\u4ee3\u8868\u4f60\u6765\u8fc7\u3002 \u53ea\u8981\u4f60\u4e0d\u4ece\u6700\u540e\u4e00\u4e2a\u62e5\u6709\u4f60\u7684 memory.txt \u4e2d\u6d88\u5931\uff0c\u4f60\u5c31\u662f immortal \u7684\u3002 \u4f60\u53ef\u80fd\u4f1a\u89c9\u5f97\u8fd9\u53ea\u662f\u4e00\u4e2a\u4eba\u8111\u888b\u4e0d\u6e05\u6670\u7684\u65f6\u5019\u8bf4\u7684\u80e1\u8bdd\uff0c\u4f46\u662f\u65e0\u6240\u8c13\u4e86\u3002 \u6211\u60f3\u53bb\u66f4\u591a\u7684\uff0c\u66f4\u591a\u7684\u4e86\u89e3\u8fd9\u4e2a\u4e16\u754c\u7684\u5965\u79d8\uff0c\u6211\u5f88\u5e73\u51e1\uff0c\u4f46\u662f\u6211\u60f3\u53bb\u8bd5\u8bd5\uff0c\u8bf4\u4e0d\u5b9a\u6211\u5c31\u4f1a\u5728\u67d0\u4e2a\u6743\u9650\u7ec4\u91cc\u83b7\u5f97\u4e00\u5e2d\u4e4b\u5730\uff0cmaintain \u7740\uff0cmodify \u7740\u6ce8\u518c\u8868\u3002 \u6211\u624b\u4e2d\u7684 regedit \u4f1a\u662f\u4ec0\u4e48\uff0c\u6211\u4e0d\u77e5\u9053\u3002 \u6559\u7ec3\u8981\u4e86\u79d1\u6280\u9986\u7528\u6765\u7ed9\u6211\u4eec\u653e\u7535\u5f71\uff0c\u4f46\u662f\u6211\u8eab\u4f53\u4e0d\u592a\u597d\u5c31\u6ca1\u6709\u53bb\u3002 \u53ef\u80fd\u5c31\u8fd9\u6837\u4e86\uff0c\u7761\u4e00\u89c9\u5c31\u597d\u4e86\u3002 \u88ab\u5076\u50cf\u6768\u7237\u8ba4\u4e3a\u662f win \u4e86\u3002 11.22 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5230\u7ef5\u9633\u4e86\u3002 \u8fd8\u662f\u5199\u4e86\u7bc7\u9c9c\u82b1\uff1a 11-22 \u65e5\u9c9c\u82b1 Phenomena Phenomena \u6628\u5929\u665a\u4e0a\u542c C \u8001\u5e08\u8bf4\uff0c\u7535\u7ade\u673a\u623f\u8981\u5c01\u5b58\u4e86\u3002 \u771f\u7684\u8d70\u5230\u6211\u4e4b\u524d\u89c9\u5f97\u6700\u574f\u7684\u7ed3\u5c40\u4e86\u5462\uff0c\u53ef\u80fd\u6211\u5c31\u8fd9\u4e48\u5931\u53bb\u4e86\u4e00\u4e2a\u5bb9\u8eab\u4e4b\u6240\uff1f \u66b4\u529b Ag \u5927\u8dcc starCatMeow \u4e5f\u5728\uff0c\u501f\u4e86\u624b\u673a\u62cd\u4e0b\u4e86\u8fd9\u5f20\u7167\u7247\u3002 \u6ca1\u60f3\u5230\u6211\u8fd8\u771f\u7684\u662f last one\u3002 \u6700\u540e\u7684\u65f6\u95f4\u662f\u5728\u770b\u4e16\u754c\u676f\uff0c\u5f53\u65f6\u597d\u50cf\u770b\u5230 3 - 0 \u5c31\u8d70\u4e86\uff1f China \u4e0a\u6b21\u8fdb World Cup \u5df2\u7ecf\u662f 20 \u5e74\u524d\u7684\u4e8b\u60c5\u4e86\u554a\uff0c\u597d\u50cf\u4e5f\u662f\u7b2c\u4e00\u6b21\u3002 \u6c89\u9ed8\u7684 14 s\uff0c\u65e5\u672c\u8db3\u7403\u4f1a\u6709\u66f4\u591a\u7684\u5c11\u5e74\u8865\u4e0a\uff0c\u6211\u4eec\u5462\uff1f\u6211\u5f88\u60f3\u77e5\u9053\uff0c\u6211\u4eec\u5462\uff1f \u4f60\u5bf9\u7684\u8d77\u6211\u4eec\u5417\uff1f\u8138\u90fd\u4e0d\u8981\u4e86\u3002 \u56de\u5bdd\u5ba4\u8fdb\u884c\u4e86\u70ed\u6c34\u6fa1\u7684\u6d17\uff0c\u611f\u89c9\u8212\u7545\u591a\u4e86\uff0c\u76d6\u4e0a\u5de8\u5927\u539a\u7684\u88ab\u5b50\uff0c\u7761\u7740\u4e86\u3002 \u6709\u6ca1\u6709\u68a6\uff1f\u597d\u50cf\u6709\u5427\uff0c\u6211\u8bb0\u5f97\u662f\u6211\u5f88\u96be\u53d7\u7684\u65f6\u5019\uff0c\u68a6\u89c1\u6709\u4e00\u4e2a\u53ef\u7231\u7684\u5973\u5b69\u5b50\u7ed9\u6211\u819d\u6795\u3002 \u5634\u91cc\u5531\u7740\u5c0f\u65f6\u5019\u542c\u89c1\u7684\u7684\u6c11\u8c23\uff0c\u53c8\u5f88\u5feb\u9677\u5165\u9ed1\u6697\u4e86\u3002 \u4eca\u5929\u6211\u4eec\u73ed\u662f\u84dd\u80cc\u5fc3\uff0c\u51fa\u5bdd\u5ba4\u7684\u65f6\u5019\u62ff\u8d70\u4e86 Phone\uff0c\u4e8e\u662f\u62cd\u4e0b\u4e86\u8fd9\u5f20\u7167\u7247\uff1a \u505a\u6210\u5916\u6587\u660e\u4eba\u3002 \u53ef\u80fd\u6709\u975e \u2716 Y \u7684\u4eba\u770b\u5230\u8fd9\u4e2a\uff0c\u90a3\u4e48\u8fd8\u662f\u89e3\u91ca\u4e00\u4e0b\u5427\u3002 \u84dd\u80cc\u5fc3\u597d\u6bd4\u5fd7\u613f\u8005\uff0c\u5443\uff0c\u597d\u50cf\u4e0d\u592a\u6070\u5f53\u3002 \u7b80\u5355\u6765\u8bf4\u5c31\u662f\u5728\u6821\u56ed\u91cc\u968f\u673a\u6e38\u8d70\uff0c\u6e05\u626b\u6821\u56ed\uff0c\u76d1\u7763\u6587\u660e\u793c\u8c8c\uff0c\u5236\u6b62\u4e0d\u6587\u660e\u73b0\u8c61\uff0c\u5e2e\u52a9\u8001\u5e08\u548c\u540c\u5b66\u3002 \u4e00\u822c\u4e00\u5b66\u671f\u624d\u80fd\u8f6e\u5230\u4e00\u6b21\uff0c\u8fd9\u534a\u5929\u5c31\u90fd\u4e0d\u4f1a\u4e0a\u8bfe\u3002 \u6211\u4e4b\u524d\u597d\u50cf\u4e00\u76f4\u662f\u52b3\u52a8\u7ec4\uff0c\u5728\u521d\u4e2d\u90e8\u90a3\u8fb9\uff0c\u7d2f\u7684\u8981\u6b7b\u3002 \u90a3\u4e24\u6b21\u6bcf\u6b21\u90fd\u5077\u5077 run \u53bb\u673a\u623f\uff0c\u90fd\u88ab\u6293\u5305\u4e86/ll \u6211\u7adf\u7136\u8fd8\u8bb0\u5f97\u5f53\u65f6\u5199\u7684\u9898\uff0c\u597d\u50cf\u662f\u90a3\u4e2a\u533a\u95f4 dp\uff0cPolygon\u3002 \u7ecf\u5e38\u4f1a\u6709\u8fd9\u6837\u7684\u611f\u89c9\uff0c\u8fd1\u671f\u7684\u5f88\u591a\u4e8b\u60c5\u6211\u4f1a\u5fd8\u8bb0\uff0c\u4f46\u662f\u6709\u4e00\u4e9b\u7ec6\u5c0f\u7684\u4e1c\u897f\u53ef\u80fd\u4f1a\u8bb0\u5f97\u5f88\u6e05\u6670\u3002 \u8d70\u5230\u697c\u9053\u91cc\u9762\uff0c\u7a81\u53d1\u5947\u60f3\u60f3\u62cd\u4e00\u5f20\u7167\u7247\u3002 \u6709\u65f6\u5019\u7b2c\u4e00\u6b21\u9047\u89c1\u4e00\u4e9b\u4e1c\u897f\u7684\u65f6\u5019\uff0c\u4f1a\u83ab\u540d\u5176\u5999\u6709\u7ecf\u5386\u8fc7\u7684\u611f\u89c9\uff0c\u53ef\u80fd\u662f\u5728\u68a6\u91cc\u9884\u89c1\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u6211\u731c\u7684\u9519\u89c9\u3002 \u8fd9\u79cd\u73b0\u8c61\u5df2\u7ecf\u4e0d\u5e38\u89c1\u4e86\uff0c\u6211\u8bb8\u4e45\u90fd\u6ca1\u6709\u9047\u89c1\u8fc7\u4e86\uff0c\u4f46\u697c\u9053\u7ed9\u4e86\u6211\u8fd9\u79cd\u611f\u89c9\u3002 \u81ea\u5df1\u5176\u5b9e\u53d1\u73b0\u8fc7\u5f88\u591a\u5f88\u5947\u602a\u7684\u73b0\u8c61\uff0c\u4f46\u662f\u90fd\u6ca1\u6709\u8bb0\u5f55\u8fc7\uff0c\u8fd9\u4e9b\u73b0\u8c61\u603b\u662f\u7ed9\u6211\u4ee5\u5947\u5999\u7684\u611f\u89c9\u3002 \u96be\u5f97\u6709\u4e00\u6b21\u673a\u4f1a\uff0c\u5c31\u8bb0\u5f55\u4e00\u4e0b\u5427\u3002 \u6765\u5230\u673a\u623f\uff0c\u53d1\u73b0\u4e86\u539f\u6279\u3002 \u4e0a\u5348\u7684\u6a21\u62df\u8d5b T1 \u6ca1\u5220 Debug\uff0cT4 corner case \u88ab\u6211\u6ce8\u91ca\u4e86\uff0c\u54c8\u54c8\uff0c\u6211\u662f\u4e0d\u662f\u8822\u72d7\u3002 \u96be\u5f97\u6709\u673a\u4f1a\uff0c\u4e2d\u5348\u7684\u65f6\u5019\u5c31\u53bb\u62cd\u51e0\u5f20\u5b66\u6821\u7684\u7167\u7247\u5427\u3002 \u4e00\u5982\u65e2\u5f80\u7684\u64cd\u573a\uff0c\u4e00\u5982\u65e2\u5f80\u7684\u4e2d\u534e\u56ed\u3002 \u4e00\u5982\u65e2\u5f80\u7684\u9762\u5305\u548c\u4e4c\u9f99\u8336\u3002 \u597d\u50cf\u4e0d\u6b62\u62cd\u4e86\u5b66\u6821\uff0c\u8fd8\u62cd\u4e86\u70b9\u522b\u7684\uff08CWOI \u591a\u4eba\u7167\uff09\u3002 \u5728\u8f66\u4e0a\u91cd\u65b0\u6234\u7740\u8033\u673a\u63a8\u4e86\u4e00\u904d\u83b2\u534e\u7ebf\uff0c\u6df1\u611f\u83b2\u534e\u7684\u58f0\u4f18\u7684\u5f3a\u5927\u4e4b\u5904\uff0c10\u5e74\u4e86\u8fd8\u80fd\u4fdd\u6301\u90a3\u6837\u3002 \u597d\u53ef\u7231\uff0c\u8bf4\u8d77\u6765\u6628\u5929\u5916\u8bed\u8282\u5f00\u5e55\u7684\u65f6\u5019\u7684\u591a\u8bed\u8a00\u4f4f\u6301\u91cc\u6709\u65e5\u8bed\u4e3b\u6301\u4eba\u3002 \u90a3\u4e2a\u58f0\u7ebf\u7b80\u76f4\u6050\u6016\uff0c\u5c31\u662f\u6807\u51c6\u7684\u53ef\u7231\u841d\u8389\u58f0\u7ebf\uff0c\u5982\u679c\u6211\u6ca1\u8bb0\u9519\u7684\u8bdd\u4e00\u5e74\u524d\u6211\u4e5f\u542c\u8fc7\u4e00\u6b21\uff0c\u5f88\u5389\u5bb3\u3002 \u4ee5\u524d\u5b66\u7684\u4f2a\u97f3\u4e5f\u5df2\u7ecf\u5b8c\u5168\u4e0d\u4f1a\u4e86\uff0c\u5982\u679c\u662f\u4ee5\u524d\u7684\u6211\u5e94\u8be5\u53ef\u4ee5\u6a21\u4eff\u83b2\u534e\u7684\u58f0\u7ebf\u5427\u3002 \u54c8\u54c8\uff0c\u73b0\u5728\u8fd9\u7834\u9523\u55d3\u5b50\uff0c\u73a9\u4e2a\u9524\u5b50\u3002 \u5443\u5443\uff0c\u53c8\u7a81\u7136\u60f3\u8d77\uff0c\u6211\u6709\u4e2a\u4e60\u60ef\uff0c\u6211\u7279\u522b\u559c\u6b22\u6536\u96c6\u5bf9\u6211\u6709\u8c61\u5f81\u610f\u4e49\u7684\u4e1c\u897f\u3002 \u6bd4\u5982 fumo\uff0cex-npy \u7684\u4e66\u4fe1\uff0cThe Legend of Zelda \u7684\u5361\u5e26\uff0cLunatic Kingdom \u7684 CD\u3002 \u6216\u8005\u8bf4\u6211\u4e00\u76f4\u5728\u5bfb\u6c42\u4e00\u79cd\u5bc4\u6258\uff0c\u6211\u5e0c\u671b\u8fd9\u79cd\u5bc4\u6258\u80fd\u591f\u5b9e\u4f53\u5316\uff0c\u5f88\u8822\u5427\u3002 \u6628\u5929\u7684\u9c9c\u82b1 \u540d\u4e3a Edit\uff0c\u4eca\u5929\u7684\u9c9c\u82b1\u540d\u4e3a Phenomena\uff0c\u6211\u4f3c\u4e4e\u5728\u5c1d\u8bd5\u5199\u70b9\u6df1\u523b\u7684\u4e1c\u897f\u3002 \u6628\u5929\u6709\u5f88\u591a\u4eba\u8bc4\u8bba\uff0c\u6211\u5f88\u5f00\u5fc3\u3002 \u5728\u6807\u8bc6\u7b26\u91cc\u5206\u5272\u6bcf\u4e00\u4e2a\u5b57\u7b26\u7684\u884c\u4e3a\u4e0d\u77e5\u9053\u53ef\u4ee5\u6709\u591a\u5c11\u4eba\u6ce8\u610f\u5230\u3002 \u6628\u5929\u8bf4\u4e86\u4eba\u751f\uff0c\u4eca\u5929\u8bf4\u70b9\u4ec0\u4e48\u5462\u3002 \u8981\u4e0d\u8fd8\u662f\u8bf4\u8bf4\u4eba\u751f\u5427\uff0c\u54c8\u54c8\u3002 \u4f46\u662f\u8bb2\u53e5\u5b9e\u8bdd\uff0c\u523b\u610f\u7684\u9063\u8bcd\u9020\u53e5\u8fdc\u8fdc\u6bd4\u4e0d\u4e0a\u7a81\u7136\u51fa\u73b0\u7684\u7075\u611f\u3002 \\(\\sin x\\) \u4e0e \\(\\cos x\\) \u4fbf\u662f\u5982\u6b64\u3002 \u4f46\u5176\u5b9e\uff0c\u6211\u6240 Explain \u7684\u8fd9\u4e9b Phenomena\uff0c\u5c31\u5df2\u7ecf\u80fd\u7b97\u662f\u7a81\u7136\u51fa\u73b0\u7684\u7075\u611f\u4e86\u3002 \u4e0d\u77e5\u9053\u4f1a\u4e0d\u4f1a\u6709\u4eba\u4e5f\u89c2\u5bdf\u8fc7\uff0c\u8bb0\u5f55\u8fc7\u8fd9\u4e9b\u73b0\u8c61\uff1f \u6211\u8349\u8349\u8349\u8349\u8349\u8349\u3002 \u521a\u5230\u7ef5\u9633\u5c31\u6454\u574f\u4e86\u81ea\u5df1\u7684\u624b\u673a\u3002 \u6025\u6025\u6025\u3002\u4e00\u5b9a\u662f\u9152\u5e97\u5927\u5385\u7684 bot \u7684\u9519\u3002 \u4e2d\u5348\u62cd\u7684\u7167\u7247\u5168\u90e8\u6ca1\u4e86/ll \u9152\u5e97\u73af\u5883\u611f\u89c9\u8fd8\u53ef\u4ee5\uff0c\u7528\u7535\u8111\u524d\u7f6e\u6444\u50cf\u5934\u62cd\u4e86\u7167\u7247\u3002 \u5443\u5443\uff0c\u611f\u89c9\u4e0d\u60f3\u5199\u4e86\uff0c\u6124\u6012\uff0c\u6211\u7684\u624b\u673a\uff0c\u6211\u7684\u624b\u673a\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01 \u53d1\u73b0\u6210\u90fd\u7684\u957f\u671f\u7801\u4e0d\u80fd\u5728\u7ef5\u9633\u7528\uff0c\u5bc4\u5bc4\u3002 \u5f88\u53ef\u60dc\u548c dottle \u9519\u5f00\u4e86\uff0c\u6ca1\u6709\u80fd\u89c1\u5230\u3002 \u611f\u53f9\u9152\u5e97\u4f4d\u7f6e\u5f88\u597d\uff0c\u5403\u4e86\u65c1\u8fb9\u7684 dicos\uff0c\u665a\u4e0a\u5f00\u6446\u3002 \u8bad\u7ec3\u73af\u5883\u5927\u6982\u8fd9\u6837\u3002 11.23 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e0a\u5348\u8fdb\u884c\u6a21\u62df\u8d5b\u7684\u6539\u9519\u3002 \u4f46\u662f\u597d\u50cf\u8fd8\u662f\u4e0d\u4f1a\u4e25\u8c28\u8bc1\u660e T2 \u7ed3\u8bba\uff0cT3 \u60f3\u5230\u4e86\u4e00\u4e2a\u628a end \u62c9\u4e0a\u6765\u7684\u5408\u5e76\u65b9\u5f0f\u4f46\u662f\u5177\u4f53\u6ca1\u60f3\u6e05\u695a\u3002 \u7136\u540e\u5c31\u5b66\u674e\u8d85\u7ebf\u6bb5\u6811\u53bb\u4e86\u3002 \u6211r\uff0c60\uffe5\uff0c\u5c31\u8fd9\uff1f\u9152\u5e97\u4f60\u600e\u4e48\u8fd9\u4e48\u9ed1\uff0c\u6211\u548c xzq 54\uffe5 \u5403\u9971\u4e86\u8fd8\u591a\uff0c\u4f60\u8fd9 60\uffe5\u4ec0\u4e48\u6c34\u5e73\uff0c\u597d\u610f\u601d\uff1f\uff1f\uff1f\uff1f \u8c14\u8c14\uff0c\u4e0b\u5348\u8bb2\u9898\uff0c\u7136\u540e\u5c31\u75af\u72c2\u8c03\u8bd5\u674e\u8d85\u6811\uff0c\u665a\u4e0a\u53d1\u73b0\u662fbool\u8f6c\u6362\u7684\u9505\uff0c\u6211*\uff0c\u9000\u94b1\u3002 \u5b8c\u86cb\uff0c\u597d\u9898\u63a8\u8350\u5b8c\u5168\u6ca1\u505a\uff0c\u611f\u89c9\u5176\u4ed6\u4eba\u90fd\u5377\u4e86\u5f88\u591a\u4e86\uff0c\u6211\u4e22\u3002 \u4e0d\u8fc7\u8fd9\u6b21\u674e\u8d85\u6811\u7684\u7b14\u8bb0\u5199\u7684\u6bd4\u8f83\u7b80\u660e\uff1f\u611f\u89c9\u662f\u6211\u60f3\u8981\u7684\u98ce\u683c\u3002 \u770b\u4e86\u4e0b\u65e5\u672c\uff0c\u5f88\u6c89\u7a33\u554a\uff0c2-1 \u9006\u8f6c\u5fb7\u610f\u5fd7\u6218\u8f66\uff0c\u606d\u559c\u3002 11.24 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6a21\u62df\u8d5b\u5bc4\u5bc4\uff0cT1 \u5bb9\u65a5\u4e0d\u4f1a\uff0cT2\u4e0d\u4f1a\uff0cT3\u4e0d\u4f1a\uff0cT4\u4e0d\u4f1a\uff0c\u53ea\u56e0\u4e86\u3002 czh \u6700\u8fd1\u66b4\u529b\u6253\u6ee1\u611f\u89c9\u5f88\u503c\u5f97\u5b66\u4e60\uff0c\u8981\u76f8\u4fe1\u5927\u90e8\u5206\u4eba\u5b9e\u9645\u53d1\u6325\u4f1a\u5f88\u70c2\u3002 \u4e5f\u5c31\u662f\u8bf4\u8003\u573a\u8ba4\u4e3a\u4e0d\u592a\u597d\u7684\u5206\u6570\uff0c\u5982\u679c\u62ff\u5230\u4e86\u8fd8\u662f\u6709\u673a\u4f1a\u7684\u3002 \u7b2c\u4e00\u6b21\u5403\u75af\u72c2\u661f\u671f\u56db\uff0c\u611f\u89c9\u4e00\u822c\u3002 \u9009\u4e86\u4e00\u573a ARC\uff0cARC076\uff0c\u660e\u5929\u665a\u4e0a\u548c\u76d2\u996d\u6cb9\u4e00\u8d77\u6253\u3002 \u7136\u540e\u6574\u4e86\u56db\u4e2a\u671f\u671b+\u5bb9\u65a5\u9898\uff0c\u6253\u5f00\u4e00\u4e0b\u601d\u7ef4\u3002 \u660e\u5929\u4e0b\u5348\u6253 ARC\uff0c\u665a\u4e0a\u8fc7\u4e00\u4e0b\u677f\u5b50\u3002 \u6df1\u611f\u6c34\u5e73\u771f\u7684\u4e0d\u591f\u3002 \u665a\u81ea\u4e60\u542c\u53f7\u5bb6\u519b\u5206\u4eab\u8003\u8bd5\u7ecf\u9a8c\u4e4b\u524d\u8fdb\u884c\u516c\u5c4f\u6574\u6d3b\uff0c\u8349\u3002 \u6211\u5c45\u7136\u5165\u955c\u4e86\uff0c\u8fd9\u74f6 Kvass \u663e\u7136\u662f\u6211\u7684\u3002 \u770b\u4e86\u4e0b\u8461\u8404\u7259\u6253\u52a0\u7eb3\uff0c\u5f88\u6fc0\u60c5\uff01 \u548c\u7fa4\u53cb\u5f00\u8bed\u97f3\uff0c\u7b2c\u4e00\u6b21\u89c1\u5230 dwt \u771f\u4eba\u3002 11.25 \u03c8(\uff40\u2207\u00b4)\u03c8 \u9152\u5e97\u7684\u53eb\u9192\u670d\u52a1\u7b80\u76f4\u662f\uff0c\u4ee4\u4eba\ud83d\ude05\uff0c\u6211\u6628\u5929\u8bf4\u7684 6:55\uff0c\u7ed3\u679c7:40\u4e86\u53eb\u6211\uff1f \u4eca\u5929\u662f\u6bd4\u8f83\u6446\u7684\uff0c\u611f\u89c9\u5176\u5b9e\u90fd\u6ca1\u505a\u4ec0\u4e48\u4e8b\u60c5\uff1f \u8c14\u8c14\uff0c\u4e0d\u8fc7 gjh \u795e\u6307\u5bfc\u4e86\u5bb9\u65a5\u76f8\u5173\u7684\u4e00\u4e9b\u4e1c\u897f\uff0c\u53d1\u73b0\u94a6\u5b9a\u548c\u5f3a\u5236\u7684\u610f\u4e49\u7565\u6709\u4e0d\u540c\u3002 \u7136\u540e\u4e0b\u5348\u5ef6\u7eed\u4f20\u7edf\u548c hfy \u6253 ARC \u5f00\u8111\u6d1e\uff0c\u505a\u4e86 CDE\uff08\u5176\u5b9e\u7b97\u662f\u53e3\u80e1\uff09\u3002 \u8fdb\u884c\u4e86\u4e00\u4e2a\u97f3\u6e38\u4eba\u7684\u805a\u4f1a\uff0c\u8fd8\u6709\u4f20\u7edf\u5408\u6253\u3002 \u8fd9\u5f20\u56fe\u662f\u6700\u8fd1\u770b\u5230\u6709\u4eba\u5728\u90a3\u4e2a Remix \u8fc7\u540e\u6574\u7684\u8c31\u5b50\uff0c\u8d28\u91cf\u5f88\u9ad8\u3002 \u5c0f\u9ed1\u5b50\u6280\u672f\u529b\u9ad8\u8d85\uff01 \u665a\u4e0a\u7ee7\u7eed\u5f00\u6446\uff0c\u7ed3\u679c\u6768\u7237\u7ed9\u7684\u9898\u5355\u6ca1\u770b\uff08\uff08\uff08 \u8c14\u8c14\uff0c\u611f\u89c9\u8fd8\u662f\u6709\u5fc5\u8981\u8fc7\u4e00\u904d\u677f\u5b50\uff0c\u7136\u540e\u7a81\u7136\u60f3\u8d77\u81ea\u5df1 vimrc \u6ca1\u6709\u80cc\uff0c\u6211\u8349\u3002 \u548c\u6768\u7237\u6700\u540e\u4ea4\u6d41\u4e86\u4e00\u4e0b\u8003\u8bd5\u6280\u5de7\uff0c\u6536\u62fe\u4e86\u4e1c\u897f\uff0c\u5c31\u6253\u7b97\u7761\u4e86\uff0c\u660e\u5929\u8fdb\u8003\u573a\u4e4b\u524d\u518d\u8fc7\u4e00\u904d\u6570\u5b66\u548c\u5176\u5b83\u7684\u91cd\u8981\u7684\u4e1c\u897f\u3002 11.26 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8c14\u8c14\uff0c\u611f\u89c9\u5357\u5c71\u7684\u673a\u623f\u4e5f\u8fdc\u8fdc\u5927\u4e8e\u6211\u4eec\u3002 \u548c hfy \u6328\u7740\uff0c\u4e0d\u8fc7\u662f\u524d\u540e\u6328\u7740\uff0c\u4e00\u4e2a\u4eba\u4e00\u4e2a\u684c\u5b50\u611f\u89c9\u5f88\u8212\u670d\u3002 zip \u5bc6\u7801\u662f biu#2019miss \uff0c\u51fa\u9898\u4eba\u662f\u8f66\u4e07\u4eba\u5427\uff0cpdf \u5c45\u7136\u4e5f\u6709\u5bc6\u7801\uff0c\u957f\u77e5\u8bc6\u4e86\uff0c solo@2022 \u4f46\u662f vimrc \u5fd8\u8bb0\u80cc backspace \u7684settings\uff0c\u5988\u7684\uff0c\u53ea\u80fd\u7528 C::B \u4e86\u3002 \u5f00 T1\uff0c\u6211\u8349\uff0c\u611f\u89c9\u5f88\u96be\u641e\u554a\uff0cT2\uff0cT3\uff0cT4\uff0c\u6211\u8349\u90fd\u5f88\u96be\u641e\u3002 \u51b7\u9759\u4e00\u4e0b\uff0c\u5148\u770b\u770b T1\uff0c\u611f\u89c9\u662f\u5c0f\u6e05\u65b0\u6a21\u62df\uff0c\u4f46\u662f\u6211\u4e0d\u4f1a 100pts\uff0c\u5199\u4e86 64pts \u8dd1\u8def\u3002 \u7136\u540e\u5f00 T3\uff0c\u56e0\u4e3a\u611f\u89c9 T2 \u6709\u70b9\u90a3\u5565\uff0c\u53d1\u73b0 T3 \u8fd9\u4e0d\u5148\u6c42\u4e2a\u5272\u8fb9\u7136\u540e\u8ba1\u6570\u4e00\u4e0b\u3002 \u4f46\u662f\u4ed4\u7ec6\u4e00\u770b\uff0c\u611f\u89c9\u5176\u5b9e\u7279\u522b\u9ebb\u70e6\uff0c\u6211\u65e5\u3002 \u7136\u540e\u53c8\u53bb\u770b T4\uff0c\u611f\u89c9\u66b4\u529b\u5f88\u96be\u5199\u3002 \u7136\u540e\u9677\u5165\u4e86\u4e00\u6bb5\u65f6\u95f4\u7684\u7f5a\u5750\u671f\u3002 \u51b7\u9759\u4e86\u4e00\u4e0b\u8dd1\u53bb\u505a T2 \u4e86\uff0c\u624b\u63a8\u4e86\u4e00\u4e0b\u611f\u89c9\u66b4\u529b\u53ef\u4ee5\u5148\u5355\u8c03\u6808\u5904\u7406\u4e00\u4e0b\u7136\u540e\u7b97\u8d21\u732e\u3002 \u7136\u540e\u5f00\u5199\uff0c\u5199\u7684\u5f88\u6162\uff0c\u7136\u540e\u53d1\u73b0\u8fc7\u4e0d\u4e86\u6837\u4f8b\uff0c\u53d1\u73b0\u8d21\u732e\u7b97\u591a\u4e86\uff0c\u7136\u540e\u6b64\u65f6\u53ea\u5269 1h30min\u3002 \u8b66\u544a\u4e86\u4e00\u4e0b\u81ea\u5df1\uff0c\u8981\u4eab\u53d7\u6bd4\u8d5b\uff0c\u4e8e\u662f\u7ee7\u7eed\u601d\u8003\uff0c\u7ed3\u679c\u5565\u90fd\u6ca1\u60f3\u51fa\u6765\u3002 \u5509\uff0c\u611f\u89c9\u8fd9\u6b21\u66b4\u529b\u5206\u771f\u7684\u96be\u6253\uff0cT2 \u90a3\u4e2a \\(n = 2\\) \u7684\u867d\u7136\u5e73\u51e1\u4f46\u662f\u4e0d\u597d\u5199\u554a\u3002 \u51fa\u8003\u573a\uff0c\u95ee\u5927\u5bb6\uff0c\u53d1\u73b0\u4eba\u5747\u4e0d\u4f1a T2\uff0c\u8349\u3002 \u542c\u8bf4 T3 \u662f\u70b9\u53cc\u6811\u4e0a\u5efa\u865a\u6811\u3002 \u5509\uff0c\u611f\u89c9\u6700\u5927\u7684\u95ee\u9898\u5c31\u662f\u6211\u6ca1\u600e\u4e48\u89c1\u8fc7\u5957\u8def\uff0c\u5f88\u591a\u4e1c\u897f\u6ca1\u5b66\uff0c\u800c\u4e14\u6a21\u62df\u8d5b\u6253\u7684\u592a\u5c11\u4e86\u3002 qz \u4ed6\u4eec\u5728\u5408\u5f71\u554a\uff0c\u6211\u4eec\u6ca1\u5408\u5f71\u3002 \u56de\u53bb\u95ee\u4e86\u95ee\u7fa4\u53cb\uff0ctyq \u8bf4 T3 \u4e0d\u7528\u865a\u6811\u3002 \u5443\u5443\uff0c\u611f\u89c9\u8fd8\u662f\u7f3a\u4e4f\u7ec3\u4e60\uff0c\u548b\u641e\u634f\uff0c\u5176\u5b9e\u5b66\u4e86\u7684\u4e1c\u897f\u7ec3\u4e00\u7ec3\u5c31\u597d\uff0c\u4f46\u662f\u548b\u4fdd\u6301\u611f\u89c9\u3002 \u7279\u522b\u662f\u4e4b\u540e\u5e72\u5565\uff0c\u6211\u4e2a\u4eba\u89c9\u5f97\u5c31\u7ec3\u4e60\u5bb9\u65a5\uff0c\u6570\u6570\uff0c\u671f\u671b\u4e4b\u7c7b\u7684\uff0c\u4ee3\u7801\u91cf\u4f1a\u5c11\uff0c\u4e5f\u597d\u73a9\u3002 \u51fa\u9898\u4eba\u53ef\u80fd\u662f\u8f66\u4e07\u4eba+homo\uff0ct1\u6700\u540e\u4e00\u4e2a\u5927\u6837\u4f8b\u7b54\u6848\u662f 114 514 \u3002 \u5c31\u8fd9\u6837\uff0c\u6211\u56de\u53bb\u5b66\u7269\u5316\u751f\u4e86\uff0c\u53ef\u80fd\u6bcf\u5929\u5c31 plant \u4e00\u70b9\u82b1\uff0c meow \uff0c\u4e5f\u8bb8\u6211\u7684\u77e5\u8bc6\u5728\u5efa\u9020 barrack \u7684\u65f6\u5019\u80fd\u8d77\u5230\u4f5c\u7528\u5427\uff0c\u5e0c\u671b\u8fd9\u6b21 match \u5927\u5bb6\u90fd\u6709\u597d\u6210\u7ee9 \u6700\u540e\u8fd9\u53e5\u8bdd\u61c2\u5f97\u90fd\u61c2\u3002 \u611f\u89c9\u8fd1\u671f\u6700\u5927\u7684\u95ee\u9898\u662f\u8fdb\u5165\u4e0d\u4e86\u72b6\u6001\uff0c\u5bc4\u5bc4\u3002 \u665a\u4e0a\u6d4b\u4e86\u4e00\u4e0b\uff0cT1 \u8be5\u62ff\u7684\u8fd8\u662f\u62ff\u4e86\uff0c\u8d77\u7801\u6709\u5206\u4e0d\u81f3\u4e8e\u7206\u96f6\u3002","title":"NOIP2022"},{"location":"misc/NOIP2022/#noip2022","text":"","title":"NOIP2022 \u6e38\u8bb0"},{"location":"misc/NOIP2022/#1117","text":"\u4e0a\u5348\u5199\u4e86\u4e00\u4e2a\u80fd\u91cf\u5b88\u6052+\u503e\u659c\u4f20\u9001\u5e26\u6a21\u578b\u7684\u597d\u5403\u9898\u3002 \u6ca1\u6765\u5f97\u53ca\u5199 notes \u5c31\u6536\u5230\u4e86\u5c0f\u505c\u8bfe\u7684\u6d88\u606f\u3002 \u7136\u540e\u4e0b\u5348\u5c31\u56de\u53bb\u6574\u4e86\u70b9\u82b1\u6d3b\uff0c\u5199\u4e86\u70b9 Vim-usage\u3002 \u7136\u540e\u628a\u671f\u671b dp \u90a3\u4e2a\u9898\u5199\u4e86\uff0c\u914d\u7f6e\u4e86\u4e00\u4e0b\u73af\u5883\uff0c\u53d1\u73b0\u5b66\u6821\u7535\u8111\u662f Vim 8.0 /ch \u6240\u4ee5\u5378\u8f7d\u4e86\u5728 D \u76d8\u91cc\u91cd\u88c5\u4e86\u4e00\u4e2a 9.0\uff0c\u4f46\u662f\u597d\u50cf mkdp \u51fa\u4e86\u70b9\u95ee\u9898\uff0c\u4e8e\u662f\u53d1\u4e86\u4e00\u4e2a issue. \u5443\u5443\uff0c\u7136\u540e\u665a\u4e0a\u5403\u996d\u4e4b\u524d\u5c31\u662f\u770b\u6559\u804c\u5de5\u7bee\u7403\u8054\u8d5b\u3002 \u6211\u7684\u5316\u5b66\u8001\u5e08\uff0c\u7269\u7406\u8001\u5e08\uff0c\u8fd8\u6709 OI \u6559\u7ec3\u53d1\u6325\u7a33\u5b9a\uff0c\u5e26\u9886\u9ad8\u4e00\u6559\u5e08\u7ec4\u4ee5 34\uff1a19 \u7684\u597d\u6210\u7ee9\u51fb\u8d25\u4e86\u9ad8\u4e8c\u6559\u5e08\u7ec4\uff01 \u7136\u540e\u5728\u53e6\u5916\u4e00\u8fb9\u770b\u5230\u4e86\u521d\u4e2d\u7684\u73ed\u4e3b\u4efb\u8001\u5e08\u738b\u8001\uff0c\u8fc7\u53bb\u770b\u7684\u65f6\u5019\u6b63\u597d\u770b\u5230\u738b\u8001\u5355\u624b\u8fdb\u4e86\u4e00\u4e2a\u5f88\u6f02\u4eae\u7684\u4e09\u5206\u8fd8\u662f\u4e24\u5206\u3002 \u62dc\u8c22\uff0c\u540e\u9762\u4e00\u5806\u539f 19 \u73ed\u7684\u4eba\u56f4\u7740\u738b\u8001\u804a\u5929\u3002\u3002 \u5fc3\u6001\u5565\u7684\u603b\u7ed3\u5c31\u4e0d\u6302\u4e0a\u6765\u4e86\uff0c\u8981\u770b\u7684\u65f6\u5019\u7ffb\u4e0b\u65e5\u8bb0\u672c\u3002 C \u8001\u5e08\u627e\u6211\u4eec\u4e09\u4e2a\u8c08\u4e86\u4e0b\u4eca\u540e\u7684\u76ee\u6807\u4e4b\u7c7b\u7684\u3002 NOIP \u653e\u677e\u8003\u5427\u3002 \u5f00\u6838\u4e86\u9152\u7cbe\u961f\u957f\uff0c\u611f\u8c22 Ed \u63d0\u4f9b\u7684\u5173\u952e\u4fe1\u606f\u3002","title":"11.17"},{"location":"misc/NOIP2022/#1118","text":"Restart \u80fd\u89e3\u51b3 90% \u7684\u95ee\u9898\uff08\u786e\u4fe1\u3002 \u5443\u5443\uff0c\u4eca\u5929\u662f\u6446\u7684\uff0c\u4e0a\u5348\u5f00\u4e86\u4e2a ABC277 VP\uff0c\u4e2d\u95f4\u4e0b\u53bb\u62cd\u4e86\u4e2a\u7167\u82b1\u4e86 30min\uff0c\u56de\u6765\u5199\u4e86\u677f\u5b50 E\uff0cD \u6709\u4e2a [i] \u6253\u6210 [n] \u4e8e\u662f\u5728\u65f6\u95f4\u7ed3\u675f\u540e 1min \u8fc7\u4e86\u3002 \u7136\u540e\u5c31\u662f\u6446\u70c2\uff0c\u6446\u70c2\u3002 F 2400\uff0c\u57fa\u672c\u6ca1\u5565\u601d\u8def\uff0c\u6253\u7b97\u53bb\u505a\u4e0b Poker \u4e5f\u6ca1\u5e72\u52b2\u3002 \u4e8e\u662f\u4e0b\u5348\u7ee7\u7eed\u6446\u70c2\uff0c\u548c kmz \u51fa\u53bb\u5403\u4e86\u4e2a\u996d\uff0c\u73b0\u5728\u7ec8\u4e8e\u5f00\u59cb\u67e5\u6761\u5b50\u4e86\uff1f \u665a\u4e0a\u8bf4\u4e86\u4e0b\u53bb\u7ef5\u9633\u8003\u8bd5\u7684\u4e8b\u60c5\uff0c\u8fd9\u6b21\u662f\u5728\u5357\u5c71\u3002 \u6709\u6ca1\u6709\u4eba\u80fd\u9762\u57fa\u554a/kel \u4e0a\u6b21\u5728\u4e1c\u8fb0\u8003\u8bd5\uff0c\u6211\u7b97\u662f\u649e\u5230\u90a3\u5565\u4e86\u3002 \u8fd9\u6b21\u6362\u5230\u5357\u5c71\u8003\u8bd5\uff0c\u5e0c\u671b\u80fd\u6709\u66f4\u597d\u7684 rp\uff1f C \u8001\u5e08\u627e\u6211\u4eec\u9ad8\u4e00\u7684\u6240\u6709\u4eba\u6765\u96c6\u4f53\u8c08\u4e86\u4e00\u6b21\u8bdd\uff0c\u7528\u4ed6\u7684\u8bdd\u8bf4\u662f\u4e00\u4e2a\u503c\u5f97\u7eaa\u5ff5\u7684\u65f6\u523b\u3002 \u76f8\u4fe1\u66b4\u529b\uff01\uff01\uff01\uff01\u76f8\u4fe1 CCF \u7684\u6570\u636e\u4e00\u5b9a\u5f88\uff01\uff01\uff01\uff01\uff01 \u56e0\u4e3a\u4e4b\u540e\u5927\u6982\u7387\u6ca1\u6cd5\u96c6\u9f50\u4e86\u3002 \u665a\u4e0a\u627e wkm \u5b66\u4e86\u4e00\u4e0b gdb \u548b\u7528\uff0c\u660e\u5929\u8981\u7528\u4e00\u7528\u3002 \u542c\u8bf4 wkm \u4e0a\u5348\u88ab\u9632\u76d7\u5355\u5411\u95e8\u9501\u5728\u5929\u53f0\u4e86\u8349\uff0c\u6700\u540e\u8fd8\u662f\u558a\u4e86\u4e00\u4e2a\u697c\u4e0b\u6253\u626b\u4e2d\u534e\u56ed\u7684\u84dd\u80cc\u5fc3\u5e2e\u5fd9\u7684\uff08\u3002 \u5443\u5443\uff0c\u53ef\u80fd\u660e\u5929\u8981\u5199\u4e00\u5199 Task \u548c Limit \u4e4b\u7c7b\u7684\uff0c\u611f\u89c9\u8fd9\u6837\u592a\u6446\u4e86\u4e0d\u597d\u3002","title":"11.18"},{"location":"misc/NOIP2022/#1119","text":"\u8fdb\u884c\u4e86\u4e00\u4e2a\u6a21\u62df\u8d5b\u7684\u8003\uff0c100 + 0 + 100 + 33\u3002 T2 \u56e0\u4e3a\u4e0d\u4f1a\u7fa4\u8bba\u6240\u4ee5\u6ca1\u8bfb\u61c2\u9898\uff0c\u4e00\u5206\u6ca1\u62ff\u3002 T4 \u601d\u8def\u6b63\u786e\u7136\u800c\u5c11\u8ba8\u8bba\u4e86\u4e9b\u5185\u5bb9\u3002 \u548c ccr \u8ba8\u8bba\u4e86\u4e00\u4e0b\u8ba4\u4e3a T4 \u5e94\u8be5\u5c31\u662f\u5206\u8ba8\uff0cT2 \u6bd4\u8f83\u7384\u5e7b\u3002 \u4e0b\u5348\u5199\u5b8c Vim-Usage \u4e4b\u540e\u88ab opj \u53eb\u53bb\u7ed9\u5b66\u5f1f\u8bb2\u8ff0\u8840\u6cea\u7ecf\u5386\u3002 \u5dee\u4e0d\u591a\u8bf4\u4e86\u8fd9\u4e9b\u5185\u5bb9\u5427\uff08\u6709\u70b9\u4e71\uff09\uff1a draft.txt \u9898\u89e3\u7684\u5229\u5f0a\u3002 \u4e0d\u6562\u8d28\u7591\uff0c\u601d\u8003\u91cf\u592a\u5c11\uff0c\u4e45\u4e86\u4e4b\u540e\u601d\u7ef4\u6d3b\u6027\u5c31\u4e0b\u964d\u4e86\uff0c\u6c34\u5e73\u4e5f\u4f1a\u4e0b\u964d\u3002 \u4e5f\u4f1a\u6709\u4ee5\u4e3a\u81ea\u5df1\u80fd\u60f3\u51fa\u6765\u7684\u8fd9\u79cd\u5fc3\u7406\uff0c\u7136\u540e\u4e0d\u6df1\u5165\uff0cG\u3002 \u5bf9\u601d\u8def\u662f\u4e00\u79cd\u65b0\u7684\u542f\u53d1\uff08\u5c3d\u91cf\u627e\u548c\u81ea\u5df1\u505a\u6cd5\u7c7b\u4f3c\u7684\u9898\u89e3\uff0c\u8fd9\u6837\u6548\u679c\u66f4\u597d\u3002\uff09 \u80fd\u5b66\u5230\u4e1c\u897f\u5c31\u662f\u597d\u7684\u3002 \u4e0d\u7ba1\u4f60\u5b66\u7684\u8fd9\u4e2a\u8003\u8bd5\u4f1a\u4e0d\u4f1a\u8003\uff0c\u6700\u91cd\u8981\u7684\u662f\u5b66\u6ca1\u5b66\u5230\u5957\u8def\uff0c\u540e\u671f\u90fd\u662f\u6bd4\u8c01 Trick \u89c1\u5f97\u591a\u3002 \u601d\u8003\u7684\u90a3\u4e2a\u8fc7\u7a0b\u624d\u662f\u6700\u91cd\u8981\u7684\u3002 \u5982\u679c\u5f00\u59cb\u5bf9\u7740\u9898\u53d1\u5446\u7684\u65f6\u5019\uff0c\u53bb\u5395\u6240\u6216\u8005\u518d\u8bfb\u4e00\u904d\u9898\u9762\u3002 \u628a\u81ea\u5df1\u601d\u7ef4\u7684\u6d41\u7a0b\u56fe\u753b\u51fa\u6765\uff0c\u514d\u5f97\u56e0\u4e3a\u53d1\u5446\u6d6a\u8d39\u65f6\u95f4\uff0c\u4e2d\u65ad\u601d\u8003\u8fc7\u7a0b \u6df1\u5ea6\u601d\u8003\u7684\u5b9a\u4e49\u5927\u6982\u662f\u6307\uff0c\u8111\u888b\u91cc\u9762\u6709\u4e00\u4e2a\u6e05\u6670\u7684\u6d41\u7a0b\u56fe\uff0c\u77e5\u9053\u6bcf\u4e00\u6b65\u8981\u7ef4\u62a4\u4ec0\u4e48\u4fe1\u606f\uff0c\u77e5\u9053\u4e0b\u4e00\u6b65\u8981\u5e72\u4ec0\u4e48\uff0c\u77e5\u9053\u4e3a\u4ec0\u4e48\u8981\u8fd9\u4e48\u5e72\uff0c\u77e5\u9053\u4e00\u4e9b\u7ec6\u8282\uff0c\u4f46\u662f\u786e\u5b9e\u56e0\u4e3a\u4e00\u4e9b key \u6ca1\u60f3\u5230\u4e0d\u4f1a\uff0c\u8fd9\u4e2a\u65f6\u5019\u770b\u9898\u89e3\u624d\u662f\u6709\u4ef7\u503c\u7684\u3002 OI \u8fd9\u4e1c\u897f\u771f\u6b63\u5438\u5f15\u4eba\u7684\u5730\u65b9\u5728\u4e8e\u601d\u8003\u8fc7\u540e\u90a3\u4e2a\u62e5\u6709\u5de8\u5927\u6210\u5c31\u611f\u7684\u8fc7\u7a0b\uff08\u60f3\u51fa\u6765\uff0c\u770b\u9898\u89e3\u604d\u7136\u5927\u609f\u4e4b\u7c7b\u7684\uff09\u3002 \u6240\u4ee5\u771f\u7684\u6295\u5165\u4e4b\u540e\u4f1a\u53d1\u73b0\uff0c\u5176\u5b9e\u9893\u5e9f\uff0c\u4e5f\u5c31\u662f\u77ed\u65f6\u95f4\u80fd\u83b7\u5f97\u6210\u5c31\u611f\u7684\u4e1c\u897f\uff0c\u771f\u7684\u6ca1\u6709\u610f\u601d\u3002 JX \u627e\u6211\u95ee\u4e86\u70b9 Vim \u76f8\u5173\u7684\u4e1c\u897f\uff0c\u611f\u89c9\u5176\u5b9e OI \u5fc5\u8981\u7684\u914d\u7f6e\u548ckey\u4e5f\u5c31\u90a3\u4e9b\uff1f \u53d1\u73b0\u6ca1\u6709\u4eba\u53ef\u4ee5\u548c\u81ea\u5df1\u4e00\u8d77\u4f4f\uff0cxzq \u548c hfy \u7684\u5bb6\u957f\u90fd\u8981\u4e00\u8d77\u53bb\uff0c\u6240\u4ee5\u6211\u5bc4\u5bc4\u4e86\u3002 \u665a\u4e0a\u56de\u6765\u5f04\u4e86\u4e00\u4e0b\u535a\u5ba2\u7684\u6846\u67b6\uff0c\u66f4\u65b0\u4e86 mkdocs\u3002 \u88ab cftm \u6574\u7834\u9632\u4e86\uff0c\u5177\u4f53\u539f\u56e0\u4e0d\u63d0\u3002 \u4e45\u8fdd\u7684\u5403\u4e86\u53ea\u70e4\u9e21\uff0c\u9999\u7684\u3002 \u53d1\u73b0\u7535\u5b50\u73ed\u724c\u4e0a\u7684\u4e2a\u4eba\u4ecb\u7ecd\u53ef\u4ee5\u5728\u7f51\u4e0a\u6539\uff0c\u4e8e\u662f\u6539\u6210\u4e86\u8fd9\u6837\uff1a \u54e6\u5bf9\u4e86\uff0c\u8bb0\u5f97\u6574\u7406\u4e0b\u535a\u5ba2\u7684\u56fe\u7247\uff0c\u6362\u4e2a\u56fe\u5e8a\u3002 \u5443\u5443\uff0c\u611f\u89c9\u5c31\u8fd9\u4e9b\u4e86\u3002","title":"11.19"},{"location":"misc/NOIP2022/#1120","text":"\u8001\u7238\u53bb\u8dd1\u6210\u9a6c\u4e86\u3002 \u66f4\u65b0\u5230\u4e86 win11 22H2\uff0c\u611f\u89c9\u66f4\u8212\u670d\u4e86\u3002 \u4e0a\u5348\u627e\u4e86\u627e\u4e07\u534e\u955c\u7684\u8d44\u6e90\uff0c\u7a81\u7136\u60f3\u5230\u4e00\u4e2a\u4e8b\u60c5\u3002 \u611f\u89c9\u5f88\u591a\u4e8b\u7269\u548c\u6211\u7684\u5173\u7cfb\u597d\u6bd4 \\(\\sin x\\) \u548c \\(\\cos x\\) \u3002 \u6bd4\u5982\u6211\u5f88\u65e9\u7684\u65f6\u5019\u5c31\u770b\u89c1\u8fc7\u4e1c\u65b9\uff0c\u4f46\u662f\u6ca1\u6709\u5165\u5751\uff0c\u5f53\u65f6\u770b cz \u7684\u5165\u5751\u6307\u5357\u91cc\u5199\u7684\u5f39\u5e55\u5c04\u51fb\u6e38\u620f\uff0c\u89c9\u5f97\u53ef\u80fd\u6ca1\u4ec0\u4e48\u610f\u601d\u3002 \u7ed3\u679c\u540e\u6765\u56e0\u4e3a\u67d0\u9996\u6b4c\u88ab\u5e26\u5165\u4e86\u5751\uff0c\u5c1d\u8bd5\u4e86\u5996\u5996\u68a6\uff0c\u559c\u6b22\u4e0a\u4e86 STG \u7684\u98ce\u683c\u3002 \u4e07\u534e\u955c\u4e5f\u662f\uff0c\u6211\u4e4b\u524d\u641c\u5e7b\u60f3\u4e07\u534e\u955c\u7684\u65f6\u5019\u641c\u51fa\u8fc7\u4e07\u534e\u955c\uff0c\u5f53\u65f6\u89c9\u5f97\u5c31\u662f\u4e2a\u4ec0\u4e48\u756a\u5267\u5427\u53ef\u80fd\u3002 \u7136\u540e\u4e5f\u6ca1\u6709\u6df1\u5165\u4e86\u89e3\u8fc7\uff0c\u7ed3\u679c\u5f53\u6211\u60f3\u5c1d\u8bd5 Gal \u7684\u65f6\u5019\uff0c\u4e07\u534e\u955c\u53c8\u51fa\u73b0\u5728\u4e86\u6211\u7684\u773c\u524d\u3002 \u6240\u4ee5\u5c31\u771f\u7684\uff0c\u662f\u90a3\u79cd\u4e0d\u65ad\u4ea4\u7ec7\u7f20\u7ed5\u590d\u5408\u79bb\u522b\u7684\u8fc7\u7a0b\uff0c\u6784\u6210\u4e86\u4eba\u751f\u554a\u3002 \u4f60\u4ee5\u4e3a\u6211\u4eec\u6e10\u884c\u6e10\u8fdc\u4e86\uff0c\u5b9e\u9645\u4e0a\u5374\u662f\u4e3a\u4e86\u4e0b\u6b21\u76f8\u4ea4\u505a\u51c6\u5907\uff0c\u4f60\u4ee5\u4e3a\u6211\u4eec\u76f8\u4ea4\u4e86\uff0c\u80fd\u5408\u6210\u4e00\u6761\u7ebf\u4e86\uff0c\u5b9e\u9645\u4e0a\u6211\u4eec\u9a6c\u4e0a\u5c31\u4f1a\u79bb\u522b\u3002 \u4efb\u4f55\u4e8b\u60c5\u90fd\u4e0d\u662f Eternal \u7684\uff0c\u6216\u8005\u8bf4\u4f60\u7684\u4eba\u751f\u597d\u6bd4\u706b\u8f66\uff0c\u4f60\u9047\u5230\u7684\u4e8b\u60c5\uff0c\u9047\u5230\u7684\u4eba\uff0c\u4f1a\u5728\u4e0d\u540c\u7684\u7ad9\u4e0a\u8f66\uff0c\u4e0b\u8f66\uff0c\u6216\u8bb8\u5728\u4e58\u5750\u522b\u7684\u7ebf\u8def\u540e\u53c8\u548c\u4f60\u4ea4\u7ec7\u3002 \u662f\u8fd9\u6837\u7684\u3002 \u6211\u9760\u4e07\u534e\u955c\u597d\u597d\u73a9\uff01\uff01\uff01 \u83b2\u534e\uff0c\u83b2\u534e\uff0c\u83b2\u534e\uff0c\u563f\u563f\u2026\u2026 \u9ed1\u957f\u76f4\u51b7\u50b2\u5a07\uff0c\u600e\u4e48\u4f1a\u6709\u8fd9\u79cd\u5b58\u5728\uff01\uff01\uff01\uff01\uff01 \u56de\u5b66\u6821\u4e4b\u540e\u548c hfy \u8fdb\u884c\u9893\u5e9f\u6d3b\u52a8\uff0c\u559d\u559d\u7ca5\uff0c\u7136\u540e\u7ee7\u7eed\u4e07\u534e\u955c\u3002 \u563f\u563f\uff0c\u6211\u7684\u83b2\u534e\uff0c\u563f\u563f\uff0c\u83b2\u534e\u2026\u2026\uff0c\u6211\u7684\u83b2\u534e\u3002 \u611f\u89c9\u4e00\u4e2a\u4e8b\u60c5\u662f\uff0c\u6bcf\u6b21\u6253 Gal \u90fd\u4f1a\u53ea\u8d70\u6700\u559c\u6b22\u7684\u89d2\u8272\u7684\u8def\u7ebf\uff0c\u5176\u4ed6\u7684\u7edd\u5bf9\u4e0d\u4f1a\u78b0\u3002 \u800c\u4e14\u5982\u679c\u6709 He\uff0c\u9047\u5230\u4e86 Be \u4f1a\u7acb\u9a6c\u8bfb\u6863\u3002 \u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u5462\uff0c\u6211\u4e5f\u4e0d\u77e5\u9053\uff0c\u4e5f\u8bb8\u662f\u4e2a\u4eba\u6027\u683c\u3002 \u6765\u770b\u70b9 hfy \u56fe\uff1a hfy \u8981\u6c42\u5408\u5f71\uff0c\u8349\u3002 \u4e8e\u662f\u5c31\u5408\u5f71\u4e86\u3002 \u5443\u5443\uff0c\u4f46\u662f\u611f\u89c9\u597d\u50cf\u8fd9\u6837\u6709\u70b9\u8fc7\u4e8e\u9893\u5e9f\u4e86\u3002 \u4e0d\u884c\u4e0d\u884c\u4e0d\u884c\u4e0d\u884c\u4e0d\u884c\u4e0d\u884c\uff0c\u8fc7\u4e8e\u6d6e\u8e81\u4e86\u3002 \u5199\u5b8c\u6e38\u8bb0\u8d76\u7d27\u505a\u505a\u9898\u6062\u590d\u72b6\u6001\u3002 MD\uff0cARC \u7ed9\u6211\u6574\u4e0d\u4f1a\u4e86\uff0c\u6c34\u5e73\u4f4e\u4e0b\uff0c\u53ef\u80fd\u662f\u6709\u70b9\u61d2\u4e86\uff0c\u731c\u4e86\u6027\u8d28\u4e0d\u60f3\u53bb\u8bc1\u660e\u6216\u8005\u8bc1\u4f2a\u3002 \u5443\u5443\uff0c\u611f\u89c9\u8fd9\u4e2a\u72b6\u6001\u975e\u5e38\u4e0d\u5bf9\uff0c\u6709\u5fc5\u8981\u6574\u70b9\u4ec0\u4e48\u63d0\u9192\u81ea\u5df1\u3002","title":"11.20"},{"location":"misc/NOIP2022/#1121","text":"\u72b6\u6001\u5f88\u4e0d\u597d\uff0c\u6709\u70b9\u5934\u75db + \u80c3\u75db\u3002 \u6574\u5929\u4ec0\u4e48\u90fd\u6ca1\u505a\uff0cfw\u3002 \u5199\u4e86\u70b9\u9c9c\u82b1\uff0c\u5c45\u7136\u5f97\u5230\u4e86\u8ba4\u53ef\uff0c\u4e4b\u540e\u62ff\u5230 laptop \u5c31 update \u5230 github blog \u4e0a\u3002 \u8fd9\u91cc\u662f\u539f\u6587\uff1a 11-21 \u65e5\u9c9c\u82b1 - Edit Edit Stomachache\uff0cheadache\uff0c\u6253\u5b8c\u7403\u8fc7\u540e\u6362\u8863\u670d\u592a\u6162\u4e86\uff0c\u53ef\u80fd\u662f\u6709\u70b9\u98ce\u70ed\u611f\u5192\u3002 \u5403\u4e86\u8fde\u82b1\u6e05\u761f\u80f6\u56ca\u4e4b\u540e\u8fd8\u662f\u4e00\u6837\uff0c\u8fc7\u4e8e\u96be\u53d7\uff0c\u4e00\u9053\u9898\u4e5f\u6ca1\u6709\u505a\u3002 \u4e34\u65f6\u8d77\u610f\u51b3\u5b9a\u8bf7\u4e2a\u5047\u51fa\u53bb\u51fa\u4e2a\u996d\uff0c\u4e5f\u7b97\u6563\u6563\u5fc3\u3002 \u88f9\u4e0a\u4e94\u5c42\u8863\u670d\uff0c\u6234\u4e0a\u5370\u5237\u7740\u4f01\u9e45\u7684\u53e3\u7f69\uff0c\u8fd9\u597d\u50cf\u662f\u4ece tencent \u90a3\u91cc\u62ff\u56de\u6765\u7684\u5427\u3002 \u8d70\u5230 PhOer \u57fa\u53cb\u63a8\u8350\u7684\u8001\u9ebb\u6284\u624b\u5e97\uff0c\u60f3\u70b9\u4e00\u4efd\u8001\u9ebb\uff0c\u4f46\u662f\u8f6c\u5ff5\u4e00\u60f3\uff0c\u611f\u5192\u4e86\u8fd8\u662f\u4e0d\u8981\u5403\u8fa3\u7684\u6bd4\u8f83\u597d\u3002 \u201c\u4e09\u4e24\uff0c\u6e05\u6c64\u201d\uff0c\u6211\u5982\u662f\u8d70\u8fdb\u5e97\u3002 \u7ed9\u4eba\u4e00\u79cd\u5f88\u6000\u5ff5\u7684\u611f\u89c9\u554a\uff0c\u5c0f\u65f6\u5019\u7ecf\u5e38\u4f1a\u5403\u534e\u9633\u90a3\u8fb9\u7684\u4e00\u5bb6\u8001\u9ebb\u6284\u624b\uff0c\u4ece\u6765\u90fd\u662f\u5403\u6e05\u6c64\u3002 \u4f46\u662f\u8fd8\u662f\u4ee5\u5b69\u63d0\u7684\u8eab\u4efd\u6ee1\u610f\u7684\u63a5\u53d7\u4e86\u4e00\u7897\u7897\u4e00\u4e24\u7684\u6284\u624b\u3002 \u5f88\u70eb\uff0c\u5f88\u5408\u6211\u610f\uff0c\u51fa\u6765\u5c31\u662f\u4e3a\u4e86\u5403\u4e0a\u4e00\u7897\u8fd9\u6837\u70ed\u4e4e\u4e4e\u7684\u6284\u624b\u7684\uff0c\u4e5f\u8bb8\u4f1a\u8ba9\u6211\u7f13\u89e3\u4e00\u70b9\u5427\u3002 \u600e\u4e48\u611f\u89c9\u7fa4\u53cb\u6bd4\u4e09\u6b21\u5143\u7684\u59b9\u5b50\u8fd8\u4f53\u8d34\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u4ee5\u524d\u90a3\u6b21\u7ecf\u5386\u8ba9\u6211\u5bf9\u4e09\u6b21\u5143\u7684\u59b9\u5b50\u5931\u53bb\u4e86\u597d\u611f\u5427\u3002 \u4e0d\u7ba1\u5e72\u4ec0\u4e48\uff0c\u6211\u90fd\u662f\u90a3\u79cd\u5728\u4e00\u68f5\u6811\u4e0a\u540a\u6b7b\u7684\u4eba\u3002 Galgame \u4e5f\u662f\uff0c\u53ea\u63a8\u81ea\u5df1\u559c\u6b22\u89d2\u8272\u7684 HE\uff0c\u77e5\u9053\u6ca1\u6709 HE \u5c31\u7edd\u5bf9\u4e0d\u4f1a\u5165\u624b\u3002 \u611f\u60c5\u4e5f\u662f\u8fd9\u6837\u7684\uff0c\u4f46\u4e5f\u56e0\u4e3a\u8fd9\u4e2a\u88ab\u4f24\u7684\u5f88\u6df1\uff0c\u4e0d\u7ed9\u5e78\u597d\u5b83\u6ca1\u6709\u5f71\u54cd\u5230\u6211\uff0c\u6216\u8005\u8bf4\u53ea\u5b58\u5728\u6b63\u9762\u5f71\u54cd\u3002 \u60f3\u5230\u8fd9\u91cc\uff0c\u4e00\u53e3\u6c64\u559d\u4e0b\u53bb\uff0c\u597d\u70eb\uff01 \u70ed\u6c14\u84b8\u817e\u7740\uff0c\u955c\u7247\u4e0a\u8d77\u4e86\u4e00\u5c42\u6c34\u73e0\u3002 \u8212\u670d\u591a\u4e86\u3002 \u8d70\u51fa\u53bb\uff0c\u53bb\u5230\u7ae0\u9c7c\u70e7\u7684\u644a\u5b50\uff0c\u644a\u4e3b\u662f\u4e00\u4e2a\u6148\u7965\u7684\u8001\u7237\u7237\uff0c\u7ed9\u6211\u4e00\u79cd\u5f88\u4eb2\u5207\u7684\u611f\u89c9\u3002 \u6162\u541e\u541e\uff0c\u4e0d\u7d27\u4e0d\u6162\u7684\u628a\u7ae0\u9c7c\u70e7\u6311\u8d77\u6765\uff0c\u771f\u597d\u554a\u3002 \u201c\u4e0d\u8981\u8089\u677e\u54c8\uff08\u56db\u5ddd\u8bdd\u5e38\u89c1\u8bed\u6c14\u52a9\u8bcd\uff09\u201d\uff0c \u201c\u597d\uff0c\u8981\u54c8\u5b50\uff08\u4ec0\u4e48\uff09\u9171\uff1f\u201d\uff0c\u201c\u6211\u60f3\u4e00\u54c8\uff08\u4e00\u4e0b\uff09\uff0c\u6492\u62c9\u9171\u561b\uff08\u56db\u5ddd\u4eba\u7279\u6709 s sh \u4e0d\u5206\uff09\u201d\uff0c \u201c\u83ab\u5f97\uff08\u6ca1\u6709\uff09\u95ee\u9898\uff01\u201d\u3002 \u7236\u4eb2\u8bf4\u8fc7\uff0c\u53cc\u624b\u9012\u51fa\uff0c\u53cc\u624b\u63a5\u8fc7\u662f\u5bf9\u522b\u4eba\u7684\u5c0a\u91cd\uff0c\u6211\uff0c\u644a\u4e3b\u90fd\u8fd9\u4e48\u505a\u4e86\uff0c\u644a\u4e3b\u4e00\u5b9a\u6709\u4e00\u4e2a\u53cb\u5584\u7684\u5185\u5fc3\u5427\uff08\u7b11\u3002 \u5403\u7684\u65f6\u5019\u8fd8\u662f\u50cf\u4e2a baka \u4e00\u6837\uff0c\u5c3d\u7ba1\u6211\u77e5\u9053\u4f1a\u6709\u70b9\u70eb\u5634\uff0c\u4f46\u662f\u8fd8\u662f\u4e00\u53e3\u54ac\u4e86\u4e0b\u53bb\uff0c\u6025\u7740\u5f80\u5916\u5439\u6c14\u3002 \u5f88\u4e0d\u5c0f\u5fc3\uff0c\u6728\u9c7c\u5c51\u9644\u7740\u5728\u6c99\u62c9\u9171\u4e0a\uff0c\u7c98\u5230\u4e86\u6211\u7684\u5634\u8fb9\uff0c\u8214\u6389\u3002 \u5982\u679c\u6709\u4e2a\u59b9\u5b50\u5728\u65c1\u8fb9\u7684\u8bdd\uff0c\u4e5f\u8bb8\u4f1a\u88ab\u6211\u7684\u8fd9\u526f\u6837\u5b50\u9017\u7b11\u5427\uff0c\u51b7\u5a07\u7684\u9ed1\u957f\u76f4\u59b9\u5b50\u7efd\u653e\u7b11\u9765\u7684\u5239\u90a3\uff0c\u4e00\u5b9a\u5f88\u7f8e\u3002 \u53ef\u60dc\u6211\u5df2\u7ecf\u5931\u53bb\u4e86\u8fd9\u6837\u7684\u673a\u4f1a\u5f88\u4e45\u4e86\u3002 \u968f\u673a\u6e38\u8d70\uff0c\u4eff\u4f5b\u662f\u5728\u4e00\u6761\u60ec\u610f\u7684\u8857\u9053\u4e0a\uff0c\u4f46\u597d\u50cf\u4e5f\u786e\u5b9e\u662f\u4e00\u6761\u60ec\u610f\u7684\u8857\u9053\u3002 \u5bd2\u98ce\u5439\u8fc7\u6765\u4e86\uff0c\u6211\u6234\u4e0a\u5e3d\u5b50\uff0c\u6ca1\u6709\u70ed\u996e\uff0c\u5f88\u96be\u53d7\uff0c\u60f3\u559d\u70b9\u70ed\u7684\uff0c\u4f46\u662f\u8d85\u5e02\u91cc\u90fd\u6ca1\u6709\u3002 \u5356\u81ed\u8c46\u8150\u7684\u5927\u53d4\uff0c\u5b64\u96f6\u96f6\u7684\u7b49\u7740 customer\uff0c\u4f46\u662f\u4ece\u4ed6\u7684\u8138\u4e0a\u770b\u4e0d\u5230\u4e00\u4e1d\u5931\u671b\u3002 \u53ef\u80fd\u5f88\u591a\u4f5c\u5bb6\u90fd\u6ca1\u6709\u5411\u4e0b\uff0c\u770b\u8fc7\u8eab\u8fb9\u7684\u8fd9\u4e9b\u5c0f\u4eba\u7269\u5427\u3002 \u63cf\u5199\u4ed6\u4eec\u7684\uff0c\u4e00\u5b9a\u662f\u4e2a\u82e6\u6da9\u4f46\u662f\u5e26\u7740\u4e00\u4e1d\u5bf9\u751f\u6d3b\u7684\u671f\u671b\u7684\u6545\u4e8b\uff0c\u6211\u8fd9\u4e48\u60f3\u7740\uff0c\u8d70\u5411\u4e86\u6c11\u4e50\u3002 \u6c11\u4e50\uff0c\u8bb8\u4e45\u6ca1\u6709\u6da8\u4ef7\uff0c\u7ec8\u4e8e\u6da8\u4e86\u4e00\u6b21\u4ef7\uff0c\u770b\u5230\u4e86\u66fe\u7ecf\u4e0d\u77e5\u9053\u5728\u90a3\u4e00\u90e8\u52a8\u753b\u91cc\u770b\u8fc7\u7684 SANGARIA coffee\u3002= 9.9\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u662f 10\uffe5 \u5462\uff0c\u8fd9\u4e5f\u8bb8\u662f\u5546\u5bb6\u7684\u610f\u56fe\u5427\u3002 \u7528\u624b\u6413\u7740\u5496\u5561\uff0c\u60f3\u8ba9\u5b83\u53d8\u6696\u548c\u4e00\u70b9\uff0c\u597d\u5e0c\u671b\u6709\u4e00\u4e2a\u53ef\u7231\u7684\u59b9\u5b50\uff0c\u56f4\u7740\u56f4\u5dfe\uff0c\u6234\u7740\u624b\u5957\uff0c\u5c1d\u8bd5\u7740\u5439\u51c9\u624b\u91cc\u7684\u5976\u8336\uff0c\u6216\u8005\u8bf4\u5439\u7740\u6211\u4e70\u7684\u5976\u8336\uff0c\u867d\u7136\u6211\u5e76\u4e0d\u559c\u6b22\u559d\u5976\u8336\uff0c\u4f46\u662f\u59b9\u5b50\u4eec\u4e5f\u8bb8\u5f88\u559c\u6b22\u559d\u5427\u3002 \u6bcf\u6b21\u60f3\u8981\u8bb0\u4f4f\u4ec0\u4e48\u4e1c\u897f\u7684\u65f6\u5019\u603b\u662f\u4f1a\u5f88\u5feb\u7684\u5fd8\u8bb0\uff0c\u592a\u8d2a\u5fc3\u4e86\u3002 \u56de\u5230\u6559\u5b66\u697c\uff0c\u611f\u53f9\u7740\u8fd9\u5c31\u662f\u751f\u6d3b\u554a\uff0c\u8fd9\u6837\u7684\u65e5\u5b50\u4e0d\u5e38\u6709\uff0c\u4f46\u662f\u683c\u5916\u73cd\u8d35\u3002 \u4eba\u751f\u662f\u4e00\u7ec4\u7ec4 \\(\\sin x\\) \u548c \\(\\cos x\\) \u7684\u56fe\u50cf\uff0c\u4ea4\u7ec7\u7f20\u7ed5\u7740\uff0c\u8fdc\u79bb\u7740\uff0c\u9760\u8fd1\u7740\u3002 \u6211\u9047\u5230\u4f60\uff0c\u90a3\u662f\u4f60\u548c\u6211\u90fd\u5230\u8fbe\u4e86 \\(k\\pi + \\dfrac{\\pi}{4}, (k \\in \\mathbb{Z})\\) \u3002 \u53ea\u4e0d\u8fc7\u4f60\u7684\u56fe\u50cf\u53ef\u80fd\u4f1a\u7a81\u7136\u8f6c\u5411\uff0c\u79fb\u5230\u53e6\u4e00\u4e2a\u5e73\u9762\uff0c\u6211\u5c31\u4e0d\u4f1a\u91cd\u65b0\u9047\u89c1\u4f60\u3002 \u4f46\u662f\u6709\u4e9b\u4eba\u4e0d\u4e00\u6837\uff0c\u4f60\u548c\u6211\u7684\u66f2\u7ebf\u4eff\u4f5b\u5929\u751f\u5c31\u5e94\u5f53\u540c\u5904\u540c\u4e00\u5e73\u9762\u7684 \\([-1, 1]\\) \u4e4b\u95f4\uff0c\u4ece\u6211\u4eec\u7684\u5b9a\u4e49\u57df\u76f8\u4ea4\u7684\u90a3\u4e00\u77ac\u95f4\u540e\uff0c\u6211\u4eec\u5c31\u4e0d\u4f1a\u5206\u5f00\uff0c\u76f4\u5230\u751f\u547d\u7ed3\u675f\uff0c\u4f60\u6216\u8005\u6211\uff0c\u6211\u4eec\u7684\u5b9a\u4e49\u57df\u5230\u6b64\u4e3a\u6b62\u3002 \u53ef\u662f\u751f\u4e0e\u6b7b\uff0c\u4ece\u6765\u90fd\u662f\u53ea\u8bfb\u7684 std::pair<long double, long double> \uff0c\u4f60\u65e0\u6cd5\u6539\u53d8\u8fd9\u4e00\u5207\uff0c\u547d\u8fd0\u5728\u521b\u9020\u4f60\u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u7528 Administrator \u6743\u9650\u5199\u5165\u4e86\u8fd9\u4e24\u4e2a\u9ad8\u7cbe\u5ea6\u6d6e\u70b9\u6570\u3002 \u53ef\u80fd\u4f60\u4f1a\u5c1d\u8bd5 sudo \uff0c\u4f46\u662f\u4eba\u751f\u662f Windows \u7cfb\u7edf\uff0c\u95ed\u6e90\u7684\u5b83\u65e0\u6cd5\u8ba9\u4f60\u7aa5\u89c1\u5176\u6700\u672c\u8d28\u7684\u771f\u5b9e\uff0c\u4f60\u4e0d\u53ef\u80fd\u6210\u4e3a Administrator\uff0c\u4f60\u53ea\u662f Guest\uff0c\u4e00\u4e2a\u666e\u901a\u7684 Guest\u3002 \u5f53\u7136\u6211\u4eec\u4e2d\u603b\u662f\u6709\u4eba\uff0c\u4f1a\u53bb\u5c1d\u8bd5\u63a2\u6c42 Administrator \u7684\u5965\u79d8\uff0c\u7834\u89e3\uff0c\u91cd\u7ec4\uff0c\u4ed6\u4eec\u505a\u7684\u4e8b\u60c5\u662f\u503c\u5f97\u5c0a\u91cd\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u5b9e\u5728\u662f\u592a\u6e3a\u5c0f\uff0c\u8fd9\u662f\u6211\u4eec\u8bc1\u660e\u81ea\u5df1\u5b58\u5728\u7684\u610f\u4e49\uff0cAdministrator \u5728\u5220\u9664\u4f60\u7684\u65f6\u5019\u8bf4\u4e0d\u5b9a\u4f1a\u5728\u5176\u4ed6 User \u7684 memory.txt \u5f53\u4e2d\u7559\u4e0b\u90a3\u4e48\u4e00\u884c\u5b57\uff0c\u4ee3\u8868\u4f60\u6765\u8fc7\u3002 \u53ea\u8981\u4f60\u4e0d\u4ece\u6700\u540e\u4e00\u4e2a\u62e5\u6709\u4f60\u7684 memory.txt \u4e2d\u6d88\u5931\uff0c\u4f60\u5c31\u662f immortal \u7684\u3002 \u4f60\u53ef\u80fd\u4f1a\u89c9\u5f97\u8fd9\u53ea\u662f\u4e00\u4e2a\u4eba\u8111\u888b\u4e0d\u6e05\u6670\u7684\u65f6\u5019\u8bf4\u7684\u80e1\u8bdd\uff0c\u4f46\u662f\u65e0\u6240\u8c13\u4e86\u3002 \u6211\u60f3\u53bb\u66f4\u591a\u7684\uff0c\u66f4\u591a\u7684\u4e86\u89e3\u8fd9\u4e2a\u4e16\u754c\u7684\u5965\u79d8\uff0c\u6211\u5f88\u5e73\u51e1\uff0c\u4f46\u662f\u6211\u60f3\u53bb\u8bd5\u8bd5\uff0c\u8bf4\u4e0d\u5b9a\u6211\u5c31\u4f1a\u5728\u67d0\u4e2a\u6743\u9650\u7ec4\u91cc\u83b7\u5f97\u4e00\u5e2d\u4e4b\u5730\uff0cmaintain \u7740\uff0cmodify \u7740\u6ce8\u518c\u8868\u3002 \u6211\u624b\u4e2d\u7684 regedit \u4f1a\u662f\u4ec0\u4e48\uff0c\u6211\u4e0d\u77e5\u9053\u3002 \u6559\u7ec3\u8981\u4e86\u79d1\u6280\u9986\u7528\u6765\u7ed9\u6211\u4eec\u653e\u7535\u5f71\uff0c\u4f46\u662f\u6211\u8eab\u4f53\u4e0d\u592a\u597d\u5c31\u6ca1\u6709\u53bb\u3002 \u53ef\u80fd\u5c31\u8fd9\u6837\u4e86\uff0c\u7761\u4e00\u89c9\u5c31\u597d\u4e86\u3002 \u88ab\u5076\u50cf\u6768\u7237\u8ba4\u4e3a\u662f win \u4e86\u3002","title":"11.21"},{"location":"misc/NOIP2022/#1122","text":"\u5230\u7ef5\u9633\u4e86\u3002 \u8fd8\u662f\u5199\u4e86\u7bc7\u9c9c\u82b1\uff1a 11-22 \u65e5\u9c9c\u82b1 Phenomena Phenomena \u6628\u5929\u665a\u4e0a\u542c C \u8001\u5e08\u8bf4\uff0c\u7535\u7ade\u673a\u623f\u8981\u5c01\u5b58\u4e86\u3002 \u771f\u7684\u8d70\u5230\u6211\u4e4b\u524d\u89c9\u5f97\u6700\u574f\u7684\u7ed3\u5c40\u4e86\u5462\uff0c\u53ef\u80fd\u6211\u5c31\u8fd9\u4e48\u5931\u53bb\u4e86\u4e00\u4e2a\u5bb9\u8eab\u4e4b\u6240\uff1f \u66b4\u529b Ag \u5927\u8dcc starCatMeow \u4e5f\u5728\uff0c\u501f\u4e86\u624b\u673a\u62cd\u4e0b\u4e86\u8fd9\u5f20\u7167\u7247\u3002 \u6ca1\u60f3\u5230\u6211\u8fd8\u771f\u7684\u662f last one\u3002 \u6700\u540e\u7684\u65f6\u95f4\u662f\u5728\u770b\u4e16\u754c\u676f\uff0c\u5f53\u65f6\u597d\u50cf\u770b\u5230 3 - 0 \u5c31\u8d70\u4e86\uff1f China \u4e0a\u6b21\u8fdb World Cup \u5df2\u7ecf\u662f 20 \u5e74\u524d\u7684\u4e8b\u60c5\u4e86\u554a\uff0c\u597d\u50cf\u4e5f\u662f\u7b2c\u4e00\u6b21\u3002 \u6c89\u9ed8\u7684 14 s\uff0c\u65e5\u672c\u8db3\u7403\u4f1a\u6709\u66f4\u591a\u7684\u5c11\u5e74\u8865\u4e0a\uff0c\u6211\u4eec\u5462\uff1f\u6211\u5f88\u60f3\u77e5\u9053\uff0c\u6211\u4eec\u5462\uff1f \u4f60\u5bf9\u7684\u8d77\u6211\u4eec\u5417\uff1f\u8138\u90fd\u4e0d\u8981\u4e86\u3002 \u56de\u5bdd\u5ba4\u8fdb\u884c\u4e86\u70ed\u6c34\u6fa1\u7684\u6d17\uff0c\u611f\u89c9\u8212\u7545\u591a\u4e86\uff0c\u76d6\u4e0a\u5de8\u5927\u539a\u7684\u88ab\u5b50\uff0c\u7761\u7740\u4e86\u3002 \u6709\u6ca1\u6709\u68a6\uff1f\u597d\u50cf\u6709\u5427\uff0c\u6211\u8bb0\u5f97\u662f\u6211\u5f88\u96be\u53d7\u7684\u65f6\u5019\uff0c\u68a6\u89c1\u6709\u4e00\u4e2a\u53ef\u7231\u7684\u5973\u5b69\u5b50\u7ed9\u6211\u819d\u6795\u3002 \u5634\u91cc\u5531\u7740\u5c0f\u65f6\u5019\u542c\u89c1\u7684\u7684\u6c11\u8c23\uff0c\u53c8\u5f88\u5feb\u9677\u5165\u9ed1\u6697\u4e86\u3002 \u4eca\u5929\u6211\u4eec\u73ed\u662f\u84dd\u80cc\u5fc3\uff0c\u51fa\u5bdd\u5ba4\u7684\u65f6\u5019\u62ff\u8d70\u4e86 Phone\uff0c\u4e8e\u662f\u62cd\u4e0b\u4e86\u8fd9\u5f20\u7167\u7247\uff1a \u505a\u6210\u5916\u6587\u660e\u4eba\u3002 \u53ef\u80fd\u6709\u975e \u2716 Y \u7684\u4eba\u770b\u5230\u8fd9\u4e2a\uff0c\u90a3\u4e48\u8fd8\u662f\u89e3\u91ca\u4e00\u4e0b\u5427\u3002 \u84dd\u80cc\u5fc3\u597d\u6bd4\u5fd7\u613f\u8005\uff0c\u5443\uff0c\u597d\u50cf\u4e0d\u592a\u6070\u5f53\u3002 \u7b80\u5355\u6765\u8bf4\u5c31\u662f\u5728\u6821\u56ed\u91cc\u968f\u673a\u6e38\u8d70\uff0c\u6e05\u626b\u6821\u56ed\uff0c\u76d1\u7763\u6587\u660e\u793c\u8c8c\uff0c\u5236\u6b62\u4e0d\u6587\u660e\u73b0\u8c61\uff0c\u5e2e\u52a9\u8001\u5e08\u548c\u540c\u5b66\u3002 \u4e00\u822c\u4e00\u5b66\u671f\u624d\u80fd\u8f6e\u5230\u4e00\u6b21\uff0c\u8fd9\u534a\u5929\u5c31\u90fd\u4e0d\u4f1a\u4e0a\u8bfe\u3002 \u6211\u4e4b\u524d\u597d\u50cf\u4e00\u76f4\u662f\u52b3\u52a8\u7ec4\uff0c\u5728\u521d\u4e2d\u90e8\u90a3\u8fb9\uff0c\u7d2f\u7684\u8981\u6b7b\u3002 \u90a3\u4e24\u6b21\u6bcf\u6b21\u90fd\u5077\u5077 run \u53bb\u673a\u623f\uff0c\u90fd\u88ab\u6293\u5305\u4e86/ll \u6211\u7adf\u7136\u8fd8\u8bb0\u5f97\u5f53\u65f6\u5199\u7684\u9898\uff0c\u597d\u50cf\u662f\u90a3\u4e2a\u533a\u95f4 dp\uff0cPolygon\u3002 \u7ecf\u5e38\u4f1a\u6709\u8fd9\u6837\u7684\u611f\u89c9\uff0c\u8fd1\u671f\u7684\u5f88\u591a\u4e8b\u60c5\u6211\u4f1a\u5fd8\u8bb0\uff0c\u4f46\u662f\u6709\u4e00\u4e9b\u7ec6\u5c0f\u7684\u4e1c\u897f\u53ef\u80fd\u4f1a\u8bb0\u5f97\u5f88\u6e05\u6670\u3002 \u8d70\u5230\u697c\u9053\u91cc\u9762\uff0c\u7a81\u53d1\u5947\u60f3\u60f3\u62cd\u4e00\u5f20\u7167\u7247\u3002 \u6709\u65f6\u5019\u7b2c\u4e00\u6b21\u9047\u89c1\u4e00\u4e9b\u4e1c\u897f\u7684\u65f6\u5019\uff0c\u4f1a\u83ab\u540d\u5176\u5999\u6709\u7ecf\u5386\u8fc7\u7684\u611f\u89c9\uff0c\u53ef\u80fd\u662f\u5728\u68a6\u91cc\u9884\u89c1\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u6211\u731c\u7684\u9519\u89c9\u3002 \u8fd9\u79cd\u73b0\u8c61\u5df2\u7ecf\u4e0d\u5e38\u89c1\u4e86\uff0c\u6211\u8bb8\u4e45\u90fd\u6ca1\u6709\u9047\u89c1\u8fc7\u4e86\uff0c\u4f46\u697c\u9053\u7ed9\u4e86\u6211\u8fd9\u79cd\u611f\u89c9\u3002 \u81ea\u5df1\u5176\u5b9e\u53d1\u73b0\u8fc7\u5f88\u591a\u5f88\u5947\u602a\u7684\u73b0\u8c61\uff0c\u4f46\u662f\u90fd\u6ca1\u6709\u8bb0\u5f55\u8fc7\uff0c\u8fd9\u4e9b\u73b0\u8c61\u603b\u662f\u7ed9\u6211\u4ee5\u5947\u5999\u7684\u611f\u89c9\u3002 \u96be\u5f97\u6709\u4e00\u6b21\u673a\u4f1a\uff0c\u5c31\u8bb0\u5f55\u4e00\u4e0b\u5427\u3002 \u6765\u5230\u673a\u623f\uff0c\u53d1\u73b0\u4e86\u539f\u6279\u3002 \u4e0a\u5348\u7684\u6a21\u62df\u8d5b T1 \u6ca1\u5220 Debug\uff0cT4 corner case \u88ab\u6211\u6ce8\u91ca\u4e86\uff0c\u54c8\u54c8\uff0c\u6211\u662f\u4e0d\u662f\u8822\u72d7\u3002 \u96be\u5f97\u6709\u673a\u4f1a\uff0c\u4e2d\u5348\u7684\u65f6\u5019\u5c31\u53bb\u62cd\u51e0\u5f20\u5b66\u6821\u7684\u7167\u7247\u5427\u3002 \u4e00\u5982\u65e2\u5f80\u7684\u64cd\u573a\uff0c\u4e00\u5982\u65e2\u5f80\u7684\u4e2d\u534e\u56ed\u3002 \u4e00\u5982\u65e2\u5f80\u7684\u9762\u5305\u548c\u4e4c\u9f99\u8336\u3002 \u597d\u50cf\u4e0d\u6b62\u62cd\u4e86\u5b66\u6821\uff0c\u8fd8\u62cd\u4e86\u70b9\u522b\u7684\uff08CWOI \u591a\u4eba\u7167\uff09\u3002 \u5728\u8f66\u4e0a\u91cd\u65b0\u6234\u7740\u8033\u673a\u63a8\u4e86\u4e00\u904d\u83b2\u534e\u7ebf\uff0c\u6df1\u611f\u83b2\u534e\u7684\u58f0\u4f18\u7684\u5f3a\u5927\u4e4b\u5904\uff0c10\u5e74\u4e86\u8fd8\u80fd\u4fdd\u6301\u90a3\u6837\u3002 \u597d\u53ef\u7231\uff0c\u8bf4\u8d77\u6765\u6628\u5929\u5916\u8bed\u8282\u5f00\u5e55\u7684\u65f6\u5019\u7684\u591a\u8bed\u8a00\u4f4f\u6301\u91cc\u6709\u65e5\u8bed\u4e3b\u6301\u4eba\u3002 \u90a3\u4e2a\u58f0\u7ebf\u7b80\u76f4\u6050\u6016\uff0c\u5c31\u662f\u6807\u51c6\u7684\u53ef\u7231\u841d\u8389\u58f0\u7ebf\uff0c\u5982\u679c\u6211\u6ca1\u8bb0\u9519\u7684\u8bdd\u4e00\u5e74\u524d\u6211\u4e5f\u542c\u8fc7\u4e00\u6b21\uff0c\u5f88\u5389\u5bb3\u3002 \u4ee5\u524d\u5b66\u7684\u4f2a\u97f3\u4e5f\u5df2\u7ecf\u5b8c\u5168\u4e0d\u4f1a\u4e86\uff0c\u5982\u679c\u662f\u4ee5\u524d\u7684\u6211\u5e94\u8be5\u53ef\u4ee5\u6a21\u4eff\u83b2\u534e\u7684\u58f0\u7ebf\u5427\u3002 \u54c8\u54c8\uff0c\u73b0\u5728\u8fd9\u7834\u9523\u55d3\u5b50\uff0c\u73a9\u4e2a\u9524\u5b50\u3002 \u5443\u5443\uff0c\u53c8\u7a81\u7136\u60f3\u8d77\uff0c\u6211\u6709\u4e2a\u4e60\u60ef\uff0c\u6211\u7279\u522b\u559c\u6b22\u6536\u96c6\u5bf9\u6211\u6709\u8c61\u5f81\u610f\u4e49\u7684\u4e1c\u897f\u3002 \u6bd4\u5982 fumo\uff0cex-npy \u7684\u4e66\u4fe1\uff0cThe Legend of Zelda \u7684\u5361\u5e26\uff0cLunatic Kingdom \u7684 CD\u3002 \u6216\u8005\u8bf4\u6211\u4e00\u76f4\u5728\u5bfb\u6c42\u4e00\u79cd\u5bc4\u6258\uff0c\u6211\u5e0c\u671b\u8fd9\u79cd\u5bc4\u6258\u80fd\u591f\u5b9e\u4f53\u5316\uff0c\u5f88\u8822\u5427\u3002 \u6628\u5929\u7684\u9c9c\u82b1 \u540d\u4e3a Edit\uff0c\u4eca\u5929\u7684\u9c9c\u82b1\u540d\u4e3a Phenomena\uff0c\u6211\u4f3c\u4e4e\u5728\u5c1d\u8bd5\u5199\u70b9\u6df1\u523b\u7684\u4e1c\u897f\u3002 \u6628\u5929\u6709\u5f88\u591a\u4eba\u8bc4\u8bba\uff0c\u6211\u5f88\u5f00\u5fc3\u3002 \u5728\u6807\u8bc6\u7b26\u91cc\u5206\u5272\u6bcf\u4e00\u4e2a\u5b57\u7b26\u7684\u884c\u4e3a\u4e0d\u77e5\u9053\u53ef\u4ee5\u6709\u591a\u5c11\u4eba\u6ce8\u610f\u5230\u3002 \u6628\u5929\u8bf4\u4e86\u4eba\u751f\uff0c\u4eca\u5929\u8bf4\u70b9\u4ec0\u4e48\u5462\u3002 \u8981\u4e0d\u8fd8\u662f\u8bf4\u8bf4\u4eba\u751f\u5427\uff0c\u54c8\u54c8\u3002 \u4f46\u662f\u8bb2\u53e5\u5b9e\u8bdd\uff0c\u523b\u610f\u7684\u9063\u8bcd\u9020\u53e5\u8fdc\u8fdc\u6bd4\u4e0d\u4e0a\u7a81\u7136\u51fa\u73b0\u7684\u7075\u611f\u3002 \\(\\sin x\\) \u4e0e \\(\\cos x\\) \u4fbf\u662f\u5982\u6b64\u3002 \u4f46\u5176\u5b9e\uff0c\u6211\u6240 Explain \u7684\u8fd9\u4e9b Phenomena\uff0c\u5c31\u5df2\u7ecf\u80fd\u7b97\u662f\u7a81\u7136\u51fa\u73b0\u7684\u7075\u611f\u4e86\u3002 \u4e0d\u77e5\u9053\u4f1a\u4e0d\u4f1a\u6709\u4eba\u4e5f\u89c2\u5bdf\u8fc7\uff0c\u8bb0\u5f55\u8fc7\u8fd9\u4e9b\u73b0\u8c61\uff1f \u6211\u8349\u8349\u8349\u8349\u8349\u8349\u3002 \u521a\u5230\u7ef5\u9633\u5c31\u6454\u574f\u4e86\u81ea\u5df1\u7684\u624b\u673a\u3002 \u6025\u6025\u6025\u3002\u4e00\u5b9a\u662f\u9152\u5e97\u5927\u5385\u7684 bot \u7684\u9519\u3002 \u4e2d\u5348\u62cd\u7684\u7167\u7247\u5168\u90e8\u6ca1\u4e86/ll \u9152\u5e97\u73af\u5883\u611f\u89c9\u8fd8\u53ef\u4ee5\uff0c\u7528\u7535\u8111\u524d\u7f6e\u6444\u50cf\u5934\u62cd\u4e86\u7167\u7247\u3002 \u5443\u5443\uff0c\u611f\u89c9\u4e0d\u60f3\u5199\u4e86\uff0c\u6124\u6012\uff0c\u6211\u7684\u624b\u673a\uff0c\u6211\u7684\u624b\u673a\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01 \u53d1\u73b0\u6210\u90fd\u7684\u957f\u671f\u7801\u4e0d\u80fd\u5728\u7ef5\u9633\u7528\uff0c\u5bc4\u5bc4\u3002 \u5f88\u53ef\u60dc\u548c dottle \u9519\u5f00\u4e86\uff0c\u6ca1\u6709\u80fd\u89c1\u5230\u3002 \u611f\u53f9\u9152\u5e97\u4f4d\u7f6e\u5f88\u597d\uff0c\u5403\u4e86\u65c1\u8fb9\u7684 dicos\uff0c\u665a\u4e0a\u5f00\u6446\u3002 \u8bad\u7ec3\u73af\u5883\u5927\u6982\u8fd9\u6837\u3002","title":"11.22"},{"location":"misc/NOIP2022/#1123","text":"\u4e0a\u5348\u8fdb\u884c\u6a21\u62df\u8d5b\u7684\u6539\u9519\u3002 \u4f46\u662f\u597d\u50cf\u8fd8\u662f\u4e0d\u4f1a\u4e25\u8c28\u8bc1\u660e T2 \u7ed3\u8bba\uff0cT3 \u60f3\u5230\u4e86\u4e00\u4e2a\u628a end \u62c9\u4e0a\u6765\u7684\u5408\u5e76\u65b9\u5f0f\u4f46\u662f\u5177\u4f53\u6ca1\u60f3\u6e05\u695a\u3002 \u7136\u540e\u5c31\u5b66\u674e\u8d85\u7ebf\u6bb5\u6811\u53bb\u4e86\u3002 \u6211r\uff0c60\uffe5\uff0c\u5c31\u8fd9\uff1f\u9152\u5e97\u4f60\u600e\u4e48\u8fd9\u4e48\u9ed1\uff0c\u6211\u548c xzq 54\uffe5 \u5403\u9971\u4e86\u8fd8\u591a\uff0c\u4f60\u8fd9 60\uffe5\u4ec0\u4e48\u6c34\u5e73\uff0c\u597d\u610f\u601d\uff1f\uff1f\uff1f\uff1f \u8c14\u8c14\uff0c\u4e0b\u5348\u8bb2\u9898\uff0c\u7136\u540e\u5c31\u75af\u72c2\u8c03\u8bd5\u674e\u8d85\u6811\uff0c\u665a\u4e0a\u53d1\u73b0\u662fbool\u8f6c\u6362\u7684\u9505\uff0c\u6211*\uff0c\u9000\u94b1\u3002 \u5b8c\u86cb\uff0c\u597d\u9898\u63a8\u8350\u5b8c\u5168\u6ca1\u505a\uff0c\u611f\u89c9\u5176\u4ed6\u4eba\u90fd\u5377\u4e86\u5f88\u591a\u4e86\uff0c\u6211\u4e22\u3002 \u4e0d\u8fc7\u8fd9\u6b21\u674e\u8d85\u6811\u7684\u7b14\u8bb0\u5199\u7684\u6bd4\u8f83\u7b80\u660e\uff1f\u611f\u89c9\u662f\u6211\u60f3\u8981\u7684\u98ce\u683c\u3002 \u770b\u4e86\u4e0b\u65e5\u672c\uff0c\u5f88\u6c89\u7a33\u554a\uff0c2-1 \u9006\u8f6c\u5fb7\u610f\u5fd7\u6218\u8f66\uff0c\u606d\u559c\u3002","title":"11.23"},{"location":"misc/NOIP2022/#1124","text":"\u6a21\u62df\u8d5b\u5bc4\u5bc4\uff0cT1 \u5bb9\u65a5\u4e0d\u4f1a\uff0cT2\u4e0d\u4f1a\uff0cT3\u4e0d\u4f1a\uff0cT4\u4e0d\u4f1a\uff0c\u53ea\u56e0\u4e86\u3002 czh \u6700\u8fd1\u66b4\u529b\u6253\u6ee1\u611f\u89c9\u5f88\u503c\u5f97\u5b66\u4e60\uff0c\u8981\u76f8\u4fe1\u5927\u90e8\u5206\u4eba\u5b9e\u9645\u53d1\u6325\u4f1a\u5f88\u70c2\u3002 \u4e5f\u5c31\u662f\u8bf4\u8003\u573a\u8ba4\u4e3a\u4e0d\u592a\u597d\u7684\u5206\u6570\uff0c\u5982\u679c\u62ff\u5230\u4e86\u8fd8\u662f\u6709\u673a\u4f1a\u7684\u3002 \u7b2c\u4e00\u6b21\u5403\u75af\u72c2\u661f\u671f\u56db\uff0c\u611f\u89c9\u4e00\u822c\u3002 \u9009\u4e86\u4e00\u573a ARC\uff0cARC076\uff0c\u660e\u5929\u665a\u4e0a\u548c\u76d2\u996d\u6cb9\u4e00\u8d77\u6253\u3002 \u7136\u540e\u6574\u4e86\u56db\u4e2a\u671f\u671b+\u5bb9\u65a5\u9898\uff0c\u6253\u5f00\u4e00\u4e0b\u601d\u7ef4\u3002 \u660e\u5929\u4e0b\u5348\u6253 ARC\uff0c\u665a\u4e0a\u8fc7\u4e00\u4e0b\u677f\u5b50\u3002 \u6df1\u611f\u6c34\u5e73\u771f\u7684\u4e0d\u591f\u3002 \u665a\u81ea\u4e60\u542c\u53f7\u5bb6\u519b\u5206\u4eab\u8003\u8bd5\u7ecf\u9a8c\u4e4b\u524d\u8fdb\u884c\u516c\u5c4f\u6574\u6d3b\uff0c\u8349\u3002 \u6211\u5c45\u7136\u5165\u955c\u4e86\uff0c\u8fd9\u74f6 Kvass \u663e\u7136\u662f\u6211\u7684\u3002 \u770b\u4e86\u4e0b\u8461\u8404\u7259\u6253\u52a0\u7eb3\uff0c\u5f88\u6fc0\u60c5\uff01 \u548c\u7fa4\u53cb\u5f00\u8bed\u97f3\uff0c\u7b2c\u4e00\u6b21\u89c1\u5230 dwt \u771f\u4eba\u3002","title":"11.24"},{"location":"misc/NOIP2022/#1125","text":"\u9152\u5e97\u7684\u53eb\u9192\u670d\u52a1\u7b80\u76f4\u662f\uff0c\u4ee4\u4eba\ud83d\ude05\uff0c\u6211\u6628\u5929\u8bf4\u7684 6:55\uff0c\u7ed3\u679c7:40\u4e86\u53eb\u6211\uff1f \u4eca\u5929\u662f\u6bd4\u8f83\u6446\u7684\uff0c\u611f\u89c9\u5176\u5b9e\u90fd\u6ca1\u505a\u4ec0\u4e48\u4e8b\u60c5\uff1f \u8c14\u8c14\uff0c\u4e0d\u8fc7 gjh \u795e\u6307\u5bfc\u4e86\u5bb9\u65a5\u76f8\u5173\u7684\u4e00\u4e9b\u4e1c\u897f\uff0c\u53d1\u73b0\u94a6\u5b9a\u548c\u5f3a\u5236\u7684\u610f\u4e49\u7565\u6709\u4e0d\u540c\u3002 \u7136\u540e\u4e0b\u5348\u5ef6\u7eed\u4f20\u7edf\u548c hfy \u6253 ARC \u5f00\u8111\u6d1e\uff0c\u505a\u4e86 CDE\uff08\u5176\u5b9e\u7b97\u662f\u53e3\u80e1\uff09\u3002 \u8fdb\u884c\u4e86\u4e00\u4e2a\u97f3\u6e38\u4eba\u7684\u805a\u4f1a\uff0c\u8fd8\u6709\u4f20\u7edf\u5408\u6253\u3002 \u8fd9\u5f20\u56fe\u662f\u6700\u8fd1\u770b\u5230\u6709\u4eba\u5728\u90a3\u4e2a Remix \u8fc7\u540e\u6574\u7684\u8c31\u5b50\uff0c\u8d28\u91cf\u5f88\u9ad8\u3002 \u5c0f\u9ed1\u5b50\u6280\u672f\u529b\u9ad8\u8d85\uff01 \u665a\u4e0a\u7ee7\u7eed\u5f00\u6446\uff0c\u7ed3\u679c\u6768\u7237\u7ed9\u7684\u9898\u5355\u6ca1\u770b\uff08\uff08\uff08 \u8c14\u8c14\uff0c\u611f\u89c9\u8fd8\u662f\u6709\u5fc5\u8981\u8fc7\u4e00\u904d\u677f\u5b50\uff0c\u7136\u540e\u7a81\u7136\u60f3\u8d77\u81ea\u5df1 vimrc \u6ca1\u6709\u80cc\uff0c\u6211\u8349\u3002 \u548c\u6768\u7237\u6700\u540e\u4ea4\u6d41\u4e86\u4e00\u4e0b\u8003\u8bd5\u6280\u5de7\uff0c\u6536\u62fe\u4e86\u4e1c\u897f\uff0c\u5c31\u6253\u7b97\u7761\u4e86\uff0c\u660e\u5929\u8fdb\u8003\u573a\u4e4b\u524d\u518d\u8fc7\u4e00\u904d\u6570\u5b66\u548c\u5176\u5b83\u7684\u91cd\u8981\u7684\u4e1c\u897f\u3002","title":"11.25"},{"location":"misc/NOIP2022/#1126","text":"\u8c14\u8c14\uff0c\u611f\u89c9\u5357\u5c71\u7684\u673a\u623f\u4e5f\u8fdc\u8fdc\u5927\u4e8e\u6211\u4eec\u3002 \u548c hfy \u6328\u7740\uff0c\u4e0d\u8fc7\u662f\u524d\u540e\u6328\u7740\uff0c\u4e00\u4e2a\u4eba\u4e00\u4e2a\u684c\u5b50\u611f\u89c9\u5f88\u8212\u670d\u3002 zip \u5bc6\u7801\u662f biu#2019miss \uff0c\u51fa\u9898\u4eba\u662f\u8f66\u4e07\u4eba\u5427\uff0cpdf \u5c45\u7136\u4e5f\u6709\u5bc6\u7801\uff0c\u957f\u77e5\u8bc6\u4e86\uff0c solo@2022 \u4f46\u662f vimrc \u5fd8\u8bb0\u80cc backspace \u7684settings\uff0c\u5988\u7684\uff0c\u53ea\u80fd\u7528 C::B \u4e86\u3002 \u5f00 T1\uff0c\u6211\u8349\uff0c\u611f\u89c9\u5f88\u96be\u641e\u554a\uff0cT2\uff0cT3\uff0cT4\uff0c\u6211\u8349\u90fd\u5f88\u96be\u641e\u3002 \u51b7\u9759\u4e00\u4e0b\uff0c\u5148\u770b\u770b T1\uff0c\u611f\u89c9\u662f\u5c0f\u6e05\u65b0\u6a21\u62df\uff0c\u4f46\u662f\u6211\u4e0d\u4f1a 100pts\uff0c\u5199\u4e86 64pts \u8dd1\u8def\u3002 \u7136\u540e\u5f00 T3\uff0c\u56e0\u4e3a\u611f\u89c9 T2 \u6709\u70b9\u90a3\u5565\uff0c\u53d1\u73b0 T3 \u8fd9\u4e0d\u5148\u6c42\u4e2a\u5272\u8fb9\u7136\u540e\u8ba1\u6570\u4e00\u4e0b\u3002 \u4f46\u662f\u4ed4\u7ec6\u4e00\u770b\uff0c\u611f\u89c9\u5176\u5b9e\u7279\u522b\u9ebb\u70e6\uff0c\u6211\u65e5\u3002 \u7136\u540e\u53c8\u53bb\u770b T4\uff0c\u611f\u89c9\u66b4\u529b\u5f88\u96be\u5199\u3002 \u7136\u540e\u9677\u5165\u4e86\u4e00\u6bb5\u65f6\u95f4\u7684\u7f5a\u5750\u671f\u3002 \u51b7\u9759\u4e86\u4e00\u4e0b\u8dd1\u53bb\u505a T2 \u4e86\uff0c\u624b\u63a8\u4e86\u4e00\u4e0b\u611f\u89c9\u66b4\u529b\u53ef\u4ee5\u5148\u5355\u8c03\u6808\u5904\u7406\u4e00\u4e0b\u7136\u540e\u7b97\u8d21\u732e\u3002 \u7136\u540e\u5f00\u5199\uff0c\u5199\u7684\u5f88\u6162\uff0c\u7136\u540e\u53d1\u73b0\u8fc7\u4e0d\u4e86\u6837\u4f8b\uff0c\u53d1\u73b0\u8d21\u732e\u7b97\u591a\u4e86\uff0c\u7136\u540e\u6b64\u65f6\u53ea\u5269 1h30min\u3002 \u8b66\u544a\u4e86\u4e00\u4e0b\u81ea\u5df1\uff0c\u8981\u4eab\u53d7\u6bd4\u8d5b\uff0c\u4e8e\u662f\u7ee7\u7eed\u601d\u8003\uff0c\u7ed3\u679c\u5565\u90fd\u6ca1\u60f3\u51fa\u6765\u3002 \u5509\uff0c\u611f\u89c9\u8fd9\u6b21\u66b4\u529b\u5206\u771f\u7684\u96be\u6253\uff0cT2 \u90a3\u4e2a \\(n = 2\\) \u7684\u867d\u7136\u5e73\u51e1\u4f46\u662f\u4e0d\u597d\u5199\u554a\u3002 \u51fa\u8003\u573a\uff0c\u95ee\u5927\u5bb6\uff0c\u53d1\u73b0\u4eba\u5747\u4e0d\u4f1a T2\uff0c\u8349\u3002 \u542c\u8bf4 T3 \u662f\u70b9\u53cc\u6811\u4e0a\u5efa\u865a\u6811\u3002 \u5509\uff0c\u611f\u89c9\u6700\u5927\u7684\u95ee\u9898\u5c31\u662f\u6211\u6ca1\u600e\u4e48\u89c1\u8fc7\u5957\u8def\uff0c\u5f88\u591a\u4e1c\u897f\u6ca1\u5b66\uff0c\u800c\u4e14\u6a21\u62df\u8d5b\u6253\u7684\u592a\u5c11\u4e86\u3002 qz \u4ed6\u4eec\u5728\u5408\u5f71\u554a\uff0c\u6211\u4eec\u6ca1\u5408\u5f71\u3002 \u56de\u53bb\u95ee\u4e86\u95ee\u7fa4\u53cb\uff0ctyq \u8bf4 T3 \u4e0d\u7528\u865a\u6811\u3002 \u5443\u5443\uff0c\u611f\u89c9\u8fd8\u662f\u7f3a\u4e4f\u7ec3\u4e60\uff0c\u548b\u641e\u634f\uff0c\u5176\u5b9e\u5b66\u4e86\u7684\u4e1c\u897f\u7ec3\u4e00\u7ec3\u5c31\u597d\uff0c\u4f46\u662f\u548b\u4fdd\u6301\u611f\u89c9\u3002 \u7279\u522b\u662f\u4e4b\u540e\u5e72\u5565\uff0c\u6211\u4e2a\u4eba\u89c9\u5f97\u5c31\u7ec3\u4e60\u5bb9\u65a5\uff0c\u6570\u6570\uff0c\u671f\u671b\u4e4b\u7c7b\u7684\uff0c\u4ee3\u7801\u91cf\u4f1a\u5c11\uff0c\u4e5f\u597d\u73a9\u3002 \u51fa\u9898\u4eba\u53ef\u80fd\u662f\u8f66\u4e07\u4eba+homo\uff0ct1\u6700\u540e\u4e00\u4e2a\u5927\u6837\u4f8b\u7b54\u6848\u662f 114 514 \u3002 \u5c31\u8fd9\u6837\uff0c\u6211\u56de\u53bb\u5b66\u7269\u5316\u751f\u4e86\uff0c\u53ef\u80fd\u6bcf\u5929\u5c31 plant \u4e00\u70b9\u82b1\uff0c meow \uff0c\u4e5f\u8bb8\u6211\u7684\u77e5\u8bc6\u5728\u5efa\u9020 barrack \u7684\u65f6\u5019\u80fd\u8d77\u5230\u4f5c\u7528\u5427\uff0c\u5e0c\u671b\u8fd9\u6b21 match \u5927\u5bb6\u90fd\u6709\u597d\u6210\u7ee9 \u6700\u540e\u8fd9\u53e5\u8bdd\u61c2\u5f97\u90fd\u61c2\u3002 \u611f\u89c9\u8fd1\u671f\u6700\u5927\u7684\u95ee\u9898\u662f\u8fdb\u5165\u4e0d\u4e86\u72b6\u6001\uff0c\u5bc4\u5bc4\u3002 \u665a\u4e0a\u6d4b\u4e86\u4e00\u4e0b\uff0cT1 \u8be5\u62ff\u7684\u8fd8\u662f\u62ff\u4e86\uff0c\u8d77\u7801\u6709\u5206\u4e0d\u81f3\u4e8e\u7206\u96f6\u3002","title":"11.26"},{"location":"misc/antontrygubO_o/","text":"\u7ffb\u770b yhp \u795e\u4ed9\u7684\u5173\u6ce8\u8bb0\u5f55\u7684\u65f6\u5019\u65e0\u610f\u95f4\u53d1\u73b0\u4e86 cqbz \u7684\u4e00\u4f4d\u795e\u4ed9\u7684\u535a\u5ba2\uff1a https://www.cnblogs.com/C202044zxy/p/15126199.html \u6211\u8ba4\u4e3a\u5f88\u5389\u5bb3\uff0c\u867d\u7136\u6211\u8fd8\u8fbe\u4e0d\u5230\u8fd9\u79cd\u5883\u754c\u5c31\u662f\u4e86\u3002 \u6211\u4e5f\u6253\u7b97\u5f00\u4e2a\u7c7b\u4f3c\u7684\u4e1c\u897f\u6765\u8bb0\u5f55\u8bb0\u5f55\uff08\u4e0d\u8fc7\u53ef\u80fd\u5f88\u591a\u4e1c\u897f\u6bd4\u8f83 naive \u5c31\u662f\u4e86\u3002 \u4f60\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u7684 URL \u6709\u70b9\u4e1c\u897f\uff0c\u4e3a\u4ec0\u4e48\u5462\uff0c\u56e0\u4e3a\u871c\u8702\u3002 \u871c\u8702\uff0c\u871c\u8702\uff0c\u5927\u5bb6\u90fd\u6765\u505a\u871c\u8702\u9898\u3002\u871c\u8702\uff0c\u871c\u8702\uff0c\u5927\u5bb6\u90fd\u6765\u505a\u871c\u8702\u9898\u3002\u871c\u8702\uff0c\u871c\u8702\uff0c\u5927\u5bb6\u90fd\u6765\u505a\u871c\u8702\u9898\u3002 \u91cd\u8981\u7684\u4e8b\u60c5\u91cd\u590d\u4e09\u904d\uff0c\u56e0\u4e3a\u6211\u4e0d\u4f1a\u505a\u871c\u8702\u573a\u7684 C\u3002 \u5148\u5495\u5495\u5495\u7740\uff0c\u6162\u6162\u6574\u7406\u3002 \u6211\u5199\u4e86 \u9e3d\u3002 \u7684\u57fa\u672c\u5c31\u662f\uff0c\u6211\u81ea\u5df1\u4e5f\u6ca1\u592a\u591a\u60f3\u6cd5\uff0c\u89c1\u7684\u9898\u4e0d\u591f\u591a\u7684\u3002 \u5f53\u7136\u5199\u4e86\u7684\u4e5f\u53ea\u80fd\u8bf4\u662f\u89c1\u8fc7\u4e00\u5b9a\u7684\u9898\u76ee\uff0c\u6bd5\u7adf\u6211\u6c34\u5e73\u4f4e\u662f\u5927\u5bb6\u6709\u76ee\u5171\u7779\u7684\u3002 \u8fd9\u4e1c\u897f\u6211\u89c9\u5f97\u53ef\u80fd\u5c31\u5bf9\u6211\u8fd9\u79cd\u7b28\u86cb\u6709\u7528\uff0c\u771f\u8981\u770b\u70b9\u4ec0\u4e48\u4e1c\u897f\u51fa\u6765\uff0c\u5efa\u8bae\u8fd8\u662f\u770b\u4e0a\u9762\u7684 link\u3002 \u5f53\u7136\uff0c\u5e38\u89c1\u7684\u5957\u8def\uff0c\u5c31\u521a\u5b66\u4e86\u7684\u5c0f\u670b\u53cb\u90fd\u53ef\u4ee5\u77e5\u9053\u7684\uff0c\u6211\u4e00\u822c\u5c31\u4e0d\u5199\u4e86\uff08 TODO list \u503c\u57df\u4e0a\u7684\u4e00\u7c7b\u52a8\u6001\u95ee\u9898\uff0c\u5f88\u591a\u65f6\u5019\u53ef\u4ee5\u8003\u8651 BIT \u6216\u8005\u4e3b\u5e2d\u6811\uff1f \u7f6e\u6362\u73af\u76f8\u5173\uff1f Acwing277 Bzoj3307 \u96e8\u5929\u7684\u5c3e\u5df4 tips: \u6587\u4ef6\u8def\u5f84\u5c3d\u91cf\u7528 .md \u540e\u7f00\uff0c\u8fd9\u6837\u624d\u662f\u535a\u5ba2\u76ee\u5f55\u4e0b\u7684\u6b63\u5e38\u76f8\u5bf9\u8def\u5f84\uff0c\u4e0d\u7136\u5b83\u4f1a\u7b97\u6210\u751f\u6210\u7684 site \u4e2d\u95f4\u7684\u76f8\u5bf9\u8def\u5f84\uff0c\u8fd9\u6837\u8981\u591a\u4e00\u4e2a ../ ,\u800c\u4e14\u4e0d\u80fd\u662f .md/# ,\u8fd9\u6837\u4e5f\u4f1a\u51fa\u4e8b. 0x00. \u505a\u9898\u601d\u8def \u03c8(\uff40\u2207\u00b4)\u03c8 0x01. \u9605\u8bfb\u9898\u9762 \u03c8(\uff40\u2207\u00b4)\u03c8 \u62ff\u5230\u9898\u9996\u5148\u5e94\u8be5\u505a\u7684\u662f\u9605\u8bfb\u9898\u9762\uff0c\u5148\u5f62\u5f0f\u5316\u9898\u9762\uff08\u5f88\u591a\u65f6\u5019\u5f62\u5f0f\u5316\u5c31\u4ee3\u8868\u4e86\u521d\u6b65\u8f6c\u5316\uff09\u3002 \u60f3\u6e05\u695a\u9898\u76ee\u8981\u6c42\u4f60\u505a\u4ec0\u4e48\uff0c\u8fd9\u7c7b\u95ee\u9898\u6709\u6ca1\u6709\u89c1\u8fc7\uff0c\u6709\u6ca1\u6709\u5957\u8def\uff0c\u5982\u679c\u89c1\u8fc7\u7c7b\u4f3c\u7684\uff0c\u8fd9\u4e2a\u9898\u5e94\u8be5\u6709\u4ec0\u4e48\u53d8\u5316\uff1f\u6bd4\u5982\u505a\u8fc7 Permutation Distance \u4e4b\u540e\u518d\u770b\u5230 230111C-T1-\u5c0fW\u4e0e\u8eab\u9ad8 \u8fd9\u6837\u3002 \u770b\u6e05\u695a\u95ee\u9898\u662f online \u8fd8\u662f offline\uff1f\u662f exists \u8fd8\u662f forall\uff1f \u6ca1\u6709\u5957\u8def\u7684\u8bdd\u662f\u4e0d\u662f\u5e94\u8be5\u8003\u8651\u8f6c\u5316/\u89c2\u5bdf\u7ed3\u8bba\uff1f\uff08\u8fd9\u4e2a\u4e0b\u9762\u518d\u8bf4\uff09 \u5f53\u7136\uff0c\u5982\u679c\u4e00\u4e2a\u95ee\u9898\u601d\u8003\u7684\u65f6\u5019\u8111\u888b\u91cc\u6ca1\u6709\u4e00\u79cd\u201c\u6e05\u6670\u201d\u7684\u611f\u89c9\uff0c\u5c31\u5c3d\u91cf\u4e0d\u8981\u5f00\u59cb\u4e0b\u4e00\u6b65\uff0c\u6bd4\u5982 230203C-T1-\u5b57\u7b26\u4e32 \u3002 \u89c2\u5bdf\u6570\u636e\u8303\u56f4\u4e5f\u662f\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u70b9\uff0c\u53ef\u4ee5\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u5feb\u901f\u5224\u65ad\u5bf9\u5e94 subtask \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4ee5\u786e\u5b9a\u65b9\u5411\uff0c\u6bd4\u5982 Union of Two Sets \u8fd9\u7c7b\u4ea4\u4e92\uff0c\u80fd\u901a\u8fc7\u4ea4\u4e92\u9898\u51fa\u9898\u7684\u5c40\u9650\u6027\uff0c\u6839\u636e\u6570\u636e\u8303\u56f4\u5feb\u901f\u5224\u65ad\u505a\u6cd5\uff08\uff08\uff08 \u4e0d\u8fc7\u6709\u7684\u65f6\u5019\u4e5f\u4e0d\u80fd\u88ab\u8fd9\u4e2a\u5c40\u9650\u4e86\uff1a\u6bd4\u5982 230201C-T4-\u56de\u6587\u4e32 \uff0c\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u5b57\u7b26\u96c6\u662f \\(26\\) \uff0c\u800c\u4e14\u5b57\u7b26\u4e32\u957f\u5ea6 \\(1e5\\) \uff0c\u4ee5\u4e3a\u590d\u6742\u5ea6\u662f \\(26 \\times 1e5\\) \uff0c\u7ed3\u679c\u5b9e\u9645\u4e0a\u8fd8\u8981\u518d\u591a\u4e00\u4e2a\u4e8c\u5206\u7684 \\(\\log\\) \u3002 \u8fd8\u6709 230201C-T2-\u7ffb\u8f6c \uff0c\u8fd9\u4e2a\u4e5f\u662f\u88ab\u6570\u636e\u8303\u56f4\u76f4\u63a5\u9a97\u4e86\uff0c\u65b9\u5411\u76f4\u63a5\u9519\u5b8c\uff0c\u672c\u6765\u5c31\u662f\u66b4\u529b\uff0c\u60f3\u6210\u72b6\u538b dp \u4e86\u2026\u2026 \u6240\u4ee5\u89c2\u5bdf\u6570\u636e\u8303\u56f4\u6765\u5224\u5b9a\u505a\u6cd5\u662f\u4e0b\u4e0b\u7b56\uff0c\u53ea\u80fd\u5728 \u5b8c\u5168 \u6ca1\u6709\u601d\u8def\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\uff01 \u4e0d\u8fc7\u4f60\u4e3a\u4e86\u786e\u5b9a\u505a\u6cd5\u503c\u4e0d\u503c\u5f97\u60f3\u4e0b\u53bb\uff0c\u8fd8\u662f\u8981\u770b\u4e00\u4e0b\u6570\u636e\u8303\u56f4\u7684\uff0c\u907f\u514d\u50cf USCAO23JAN Bronze T2 \u8fd9\u6837\uff0c\u672c\u6765\u5c31\u662f\u4e2a\u8bed\u6cd5\u66b4\u529b\u9898\uff0c\u5c31\u56e0\u4e3a\u628a \\(10\\) \u770b\u6210\u4e86 \\(1e5\\) \uff0c\u60f3\u4e86\u5927\u534a\u5929\u8d2a\u5fc3\uff0c\u6210\u4e3a\u5c0f\u4e11\u3002 0x02. \u8f6c\u5316\u95ee\u9898\u4ee5\u53ca\u89c2\u5bdf\u7ed3\u8bba\u548c\u6027\u8d28 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e2a\u5176\u5b9e\u624d\u662f\u5f88\u591a\u65f6\u5019\u6253\u5f00\u9898\u76ee\u7a81\u7834\u53e3\u7684\u5730\u65b9\u3002 \u6709\u4e00\u4e9b\u6bd4\u8f83\u5e38\u7528\u7684\u6280\u5de7\uff0c\u5728\u8fd9\u91cc\u5217\u4e3e\u4e00\u4e0b\uff1a \u6700\u7b28\u7684\u65b9\u6cd5\u5c31\u662f\u8003\u8651\u624b\u73a9\u6837\u4f8b\uff0c\u6a21\u62df\u4e00\u4e0b\u9898\u9762\u7684\u8fc7\u7a0b\u770b\u770b\u6709\u6ca1\u6709\u542f\u53d1\uff0c\u627e\u627e\u89c4\u5f8b\u8bd5\u8bd5\uff1f\u6bd4\u5982\uff1a 220518C-T2-\u300c\u5ba2\u661f\u7480\u74a8\u4e4b\u591c\u300d \u8fd9\u6837\uff1f\u6216\u8005\u662f\u7c7b\u4f3c 2301113C-T4-coin \u8fd9\u79cd\u8003\u8651\u628a\u6709\u8054\u7cfb\u7684\u4e1c\u897f\u653e\u5728\u4e00\u8d77\uff0c\u89c2\u5bdf\u5230\u95ee\u9898\u7684\u672c\u8d28\uff1f \u518d\u8fdb\u4e00\u6b65\u5c31\u662f\u8003\u8651\u89c2\u5bdf\u7b54\u6848\u7684\u5f62\u5f0f\uff0c\u5408\u6cd5\u89e3\u7684\u5f62\u72b6\uff0c\u770b\u770b\u6709\u6ca1\u6709\u4ec0\u4e48\u542f\u53d1\uff0c\u6bd4\u5982 Young Maids \uff0c\u8003\u8651\u4e00\u4e2a\u7b54\u6848\u5408\u6cd5\u540e\u5bf9\u539f\u95ee\u9898\u51b3\u7b56\u7684\u9650\u5236\u662f\u4ec0\u4e48\uff1f\u8fd8\u662f\u8bf4\u6bd4\u5982 221025C-T4-\u7f6a\u2f08\u633d\u6b4c \u8981\u60f3\u6e05\u695a\uff0c\u4ec0\u4e48\u4e1c\u897f\u624d\u4f1a\u9020\u6210\u8d21\u732e\uff0c\u4e00\u4e2a\u4f4d\u7f6e\u4ec0\u4e48\u65f6\u5019\u5408\u6cd5\uff0c\u4ec0\u4e48\u65f6\u5019\u4e0d\u5408\u6cd5\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u7c7b\u4f3c\u62c6\u5f00\u9650\u5236\u4e00\u6837\uff0c\u8ba9\u5404\u4e2a\u5143\u7d20\u505a\u7684\u8d21\u732e\u5c3d\u91cf\u7684\u51cf\u5c11\u5bf9\u5176\u5b83\u5143\u7d20\u8d21\u732e\u7684\u5f71\u54cd\uff0c\u8fd9\u6837\u66f4\u65b9\u4fbf\u8ba1\u7b97\uff0c\u6bd4\u5982\u7c7b\u4f3c 230203C-T4-\u4ea4\u6362 \u7684\u60f3\u6cd5\uff0c\u5f88\u591a\u65f6\u5019\u4e5f\u80fd\u7c7b\u4f3c\u4e0b\u9762 dp \u91cc\u63d0\u5230\u7684 Xor-Subsequence (easy version) \u4e00\u6837\u7528\u6765\u6392\u9664\u4e0d\u5fc5\u8981\u7684\u72b6\u6001\u3002 \uff08\u63a5\u4e0a\u4e00\u6761\uff09\u4e5f\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b\uff0c\u5982\u679c\u6211\u4eec\u8003\u8651\u5168\u5c40 or \u6bcf\u4e00\u6bb5\uff0c\u672c\u8eab\u5c31\u5df2\u7ecf\u80fd\u6ee1\u8db3\u7b54\u6848\u7684\u8d21\u732e\uff0c\u7136\u540e\u518d\u8003\u8651\u51d1\u51fa\u6765\u4e4b\u540e\u53c8\u51fa\u73b0\u7684\u65b0\u7684\u8d21\u732e\uff08\u524d\u63d0\u662f\u5f00\u59cb\u7684\u65f6\u5019\u6ee1\u8db3\u8d21\u732e\u7684\uff0c\u62fc\u51d1\u8d77\u6765\u4e4b\u540e\u4e5f\u80fd\u6ee1\u8db3\u8d21\u732e\uff09\uff1a NOIOnline2022TG-\u4e39\u9493\u6218 \uff0c CF1801C-Music Festival \u5bf9\u4e8e\u4e00\u4e2a\u6700\u4f18\u5316\u95ee\u9898\uff0c\u601d\u8003\u4e00\u4e0b\uff0c\u600e\u4e48\u6837\u624d\u80fd\u66f4\u52a0\u4f18\u79c0\uff0c\u662f\u4e0d\u662f\u8981\u8003\u8651\u8d2a\u5fc3\u554a\uff0cdp\u554a\u4e4b\u7c7b\u7684\u505a\u6cd5\u4e86\uff1f\u6bd4\u5982 230203C-T3-\u5e8f\u5217 \u89c2\u5bdf\u4e00\u4e2a\u770b\u8d77\u6765\u5565\u90fd\u6ca1\u6709\u7684\u95ee\u9898\uff0c\u8981\u8003\u8651\u81ea\u5df1\u624b\u52a8\u52a0\u4e0a\u4e00\u4e9b\u9650\u5236\uff0c\u5199\u51fa\u201c\u4e0d\u662f\uff0c\u5c31\u662f\uff0c\u4e00\u5b9a\u662f\uff0c\u5426\u5219\u201d\u8fd9\u6837\u7684\u89c2\u5bdf\uff0c\u7136\u540e\u8003\u8651\u8fd9\u4e9b\u4e1c\u897f\u6709\u5565\u7528\uff1a 230117C-T4-\u5b50\u56fe \u3002 \u8fd9\u4e9b\u662f\u7528\u4e8e\u8f6c\u5316\u95ee\u9898\u7684\uff0c\u6216\u8005\u8bf4\u5df2\u7ecf\u63a5\u8fd1\u76f4\u63a5\u7684\u505a\u6cd5\u4e86\uff1a \u6709\u591a\u4e2a\u590d\u5408\u7684\u9650\u5236\u6761\u4ef6\u7684\u65f6\u5019\uff0c\u8003\u8651\u628a\u9650\u5236\u6761\u4ef6\u62c6\u5f00\u7ef4\u62a4\uff1a Permutation Distance \u3002 \u8003\u8651\u66f4\u6362\u8d21\u732e\u7684\u8ba1\u7b97\u65b9\u5f0f\uff0c\u9009\u62e9\u4e0d\u90a3\u4e48\u76f4\u89c2\u7684\u8d21\u732e\u62c6\u5f00\u7ef4\u62a4\uff1f\u7c7b\u4f3c Manacher \u8fd9\u6837\uff0c\u53ea\u8003\u8651\u4ee5\u4e00\u4e2a\u4f4d\u7f6e\u4e3a\u4e2d\u5fc3\u7684\u6240\u6709\u56de\u6587\u4e32\uff0c\u8fdb\u4e00\u6b65\u8bf4\u8fd9\u4e2a\u662f\u94a6\u5b9a\u4e00\u4e2a\u7c7b\u4f3c dp \u4e2d\u201c\u9636\u6bb5\u201d\u7684\u57fa\u5e95\uff0c\u627e\u5230\u4e00\u4e2a\u8ba1\u7b97\u8d21\u732e\u7684\u57fa\u51c6\u3002 \u6216\u8005\u8003\u8651\u7d2f\u52a0\u5f71\u54cd\uff0c\u6279\u91cf\u5904\u7406\u8d21\u732e\uff1f\u6bd4\u5982 230201C-T4-\u56de\u6587\u4e32 \uff0c\u8ba1\u7b97\u7b54\u6848\u7684\u65f6\u5019\u5c31\u662f\u53cd\u8fc7\u6765\uff0c\u8003\u8651\u57fa\u51c6\u5bf9\u4e8e\u6240\u6709\u80fd\u4ea7\u751f\u8d21\u732e\u7684\u70b9\u7d2f\u52a0\u4e00\u4e2a\u6743\u503c\uff0c\u6700\u540e\u79bb\u7ebf\u5728\u6240\u6709\u70b9\u7b97\u4e00\u4e0b\u6743\u503c\u5373\u53ef \u4e5f\u53ef\u4ee5\u5bf9\u4e8e\u4e00\u4e2a\u590d\u6742\u7684 \\(\\sum\\sum\\min\\max\\) \u8fd9\u6837\u7684\u5f0f\u5b50\uff0c\u6211\u4eec\u5c1d\u8bd5\u76f4\u63a5\u94a6\u5b9a\u51fa\u5355\u4e2a\u4f4d\u7f6e\u7684\u7b54\u6848\uff0c\u6c42\u548c\u4e4b\u540e\u518d\u63a8\u5f0f\u5b50 ABC290F - Maximum Diameter \uff0c\u4e0d\u7136\u5c31\u662f\u7c7b\u4f3c\u4e0a\u9762\u90a3\u6837\u66f4\u6362\u8ba1\u7b97\u65b9\u5f0f\u3002 \u662f\u5426\u8981\u8003\u8651\u5206\u79bb\u53d8\u91cf\uff1f\u6bd4\u5982\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u77e9\u9635\u6539\u77e9\u9635\u548c\u7684\u65f6\u5019\uff0c\u6bd4\u5982\u7ebf\u6bb5\u6811\u7ef4\u62a4\u65b9\u5dee\u7684\u65f6\u5019\u3002 \u8003\u8651\u4e00\u4e0b\u4fee\u6539\u4e86\u4e00\u4e2a\u4f4d\u7f6e\u4e4b\u540e\uff0c\u5bf9\u7b54\u6848\u7684\u5f71\u54cd\u662f\u4ec0\u4e48\uff1f\u8fd9\u91cc\u8fd8\u662f\u4ee5 230201C-T4-\u56de\u6587\u4e32 \u4e3a\u4f8b\uff0c\u8fd9\u4e2a\u9898\u786e\u5b9e\u6bd4\u8f83\u6df1\u523b\u3002 \u8003\u8651\u4e00\u4e0b\uff0c\u6b63\u7740\u505a\u5f88\u9ebb\u70e6\uff0c\u80fd\u5426\u8003\u8651\u53cd\u7740\u505a\uff0c\u6216\u8005\u62c6\u5f00\u505a\uff1f \u5f53\u524d\u7684\u5f0f\u5b50\uff0c\u5f53\u524d\u7684\u4e00\u4e9b\u53d8\u91cf\uff0c\u80fd\u4e0d\u80fd\u5b58\u5728\u5176\u5b83\u7b49\u4ef7\u7684\uff0c\u53ef\u4ee5\u65b9\u4fbf\u8ba1\u7b97\u7684\u610f\u4e49\uff1f\u6bd4\u5982\u7528\u7ec4\u5408\u610f\u4e49\u8f6c\u5316\uff0c\u6216\u8005\u662f\u7528\u7c7b\u4f3c wqs \u4e8c\u5206\u91cc\u7ed9\u5f0f\u5b50\u7ed3\u5408\u539f\u95ee\u9898\u627e\u610f\u4e49\u7684\u8fd9\u79cd\uff1f \u6709\u7684\u65f6\u5019\u751a\u81f3\u53ef\u4ee5\u8003\u8651\u589e\u52a0\u9650\u5236\u6765\u7f29\u51cf\u72b6\u6001\uff0c\u4f46\u662f\u4ecd\u7136\u4fdd\u8bc1\u5408\u6cd5\uff1f\u7c7b\u4f3c 230115C-T3-\u5b9e\u9a8c \u81f3\u5c11\u4e0d\u597d\u7b97\uff0c\u4f46\u662f\u81f3\u5c11\u51d1\u51fa\u8fd8\u53ef\u4ee5\u7ef4\u62a4\u3002 \u60f3\u6e05\u695a\u4e00\u7c7b\u8d21\u732e\u4ec0\u4e48\u65f6\u5019\u4f1a\u88ab\u8ba1\u7b97\uff0c\u5982\u679c\u5b83\u53ef\u4ee5\u88ab\u4e0d\u540c\u79cd\u60c5\u51b5\u7684\u4e0d\u540c\u4f4d\u7f6e\u66f4\u65b0\uff0c\u662f\u5426\u8981\u8003\u8651\u94a6\u5b9a\u53ea\u8ba1\u7b97\u67d0\u4e9b\u90e8\u5206\uff1a 230117C-T4-\u5b50\u56fe \u3002 0x03. \u601d\u8def\u7684\u5ef6\u7eed\u3001\u5207\u6362\u4ee5\u53ca\u601d\u7ef4\u7a7a\u767d\u7a97\u53e3 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6709\u6027\u8d28\uff0c\u6709\u60f3\u6cd5\u4e4b\u540e\uff0c\u5e94\u8be5\u8003\u8651\u7684\u5c31\u662f\uff0c\u600e\u4e48\u6837\u628a\u5b83\u5e94\u7528\u5230\u539f\u95ee\u9898\u4e0a\u3002 \u8fd8\u6709\uff0c\u8fd9\u4e9b\u4e1c\u897f\u662f\u5426\u80fd\u4fdd\u8bc1\u6b63\u786e\u6027\uff1f\u6709\u6ca1\u6709\u53cd\u4f8b\uff1f\u6709\u6ca1\u6709\u7279\u6b8a\u60c5\u51b5\uff1f\u8003\u8651\u4e00\u4e0b\u5148\uff1f \u5982\u679c\u5f53\u524d\u601d\u8def\u867d\u7136\u5f88\u6e05\u6670\uff0c\u4f46\u5c31\u662f\u5361\u5728\u4e00\u4e2a\u70b9\uff0c\u77e5\u9053\u5e94\u8be5\u628a\u5b83\u5f04\u6210\u4ec0\u4e48\u5f62\u5f0f\uff0c\u4f46\u662f\u786e\u5b9e\u6ca1\u6709\u529e\u6cd5\u505a\u5230\uff0c\u5c31\u9700\u8981\u8003\u8651\u91cd\u542f\u601d\u8def\uff0c\u6216\u8005\u662f\u89c2\u5bdf\u601d\u7ef4\u94fe\u4e0a\u662f\u4e0d\u662f\u6709\u4ec0\u4e48\u5730\u65b9\u51fa\u95ee\u9898\u4e86\uff0c\u6bd4\u5982\uff1a 230201C-T2-\u7ffb\u8f6c \u601d\u7ef4\u7a7a\u767d\u7684\u65f6\u5019\uff0c\u6709\u4e24\u79cd\u529e\u6cd5\uff0c\u4e00\u79cd\u662f\u89c2\u5bdf\u9898\u9762\uff0c\u53e6\u5916\u4e00\u79cd\u5c31\u662f\u8003\u8651\u91cd\u65b0\u7406\u4e00\u904d\u601d\u8def\u3002 \u957f\u65f6\u95f4\u7684\u601d\u7ef4\u7a7a\u767d\u4f1a\u5bfc\u81f4\u8131\u51fa\u72b6\u6001\u3002 \u5982\u679c\u611f\u89c9\u601d\u8def\u6709\u70b9\u6df7\u4e71\u4e86\uff0c\u6216\u8005\u8bf4\u5361\u5728\u5173\u952e\u70b9\u4f46\u662f\u4e0d\u77e5\u9053\u600e\u4e48\u505a\u4e86\uff0c\u4e5f\u9700\u8981\u91cd\u65b0\u7406\u4e00\u4e0b\u601d\u8def\uff0c\u800c\u4e14\u4e0d\u80fd\u592a\u5feb\u76f4\u63a5\u8fc7\u8fc7\u53bb\uff0c\u6162\u4e00\u70b9\uff0c\u4e0d\u7740\u6025\u3002 0x10. \u6742\u9879 \u03c8(\uff40\u2207\u00b4)\u03c8 0x11. \u8d2a\u5fc3 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6b63\u5e38\u60f3\u6cd5\u5176\u5b9e\u5e94\u8be5\u662f\uff0c\u5bf9\u4e8e\u4e00\u770b\u5c31\u662f\u8d2a\u5fc3\uff0c\u4f46\u662f\u7b56\u7565\u4e0d\u660e\u663e\u7684\u9898\uff0c\u5e94\u8be5\u628a\u6240\u6709\u53ef\u80fd\u7b56\u7565\u62ff\u51fa\u6765\uff0c\u4e0d\u7136\u53cd\u8bc1\uff0c\u4e0d\u7136 exc arg\uff0c\u4e0d\u7136\u8303\u56f4\u653e\u7f29\uff0c\u53cd\u6b63\u5c31\u5e94\u8be5\u6c42\u51fa\u6765\u4ec0\u4e48\u60c5\u51b5\u4e0b\u4ec0\u4e48\u6700\u4f18\uff0c\u7136\u540e\u518d\u6765\u8003\u8651\u600e\u4e48\u5199\u4ee3\u7801\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u8981\u786e\u4fdd\u4f60\u7684\u7ed3\u8bba\u7684\u6b63\u786e\u548c\u5408\u7406\u3002 \u800c\u4e0d\u662f\u4e00\u4e2a\u52b2\u7684\u778e\u60f3\u7ed3\u8bba\uff0c\u8fd9\u6837\u547d\u4e2d\u6548\u7387\u5f88\u4f4e\u3002 \u4e00\u79cd\u62c6\u5206\u7684\u8d2a\u5fc3\u601d\u60f3\uff1a\u53ef\u4ee5\u6309\u7167\u67d0\u79cd\u201c\u91cd\u8981\u7a0b\u5ea6\u201d\u5206\u5f00\u8003\u8651\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u60c5\u51b5\u5206\u5f00\u8003\u8651\uff0c\u6700\u540e\u76f4\u63a5\u66b4\u529b\u590d\u5408\uff1a THUPC2023-pre-A -\u5927\u5bcc\u7fc1 \u5982\u679c\u4e00\u4e2a\u9898\uff0c\u6ca1\u6cd5\u5f88\u597d\u7684\u901a\u8fc7\u8d2a\u5fc3\u6765\u5feb\u901f\u786e\u5b9a\u4e00\u4e9b\u5fc5\u9009\u7b56\u7565\uff0c\u6216\u8005\u8bf4\u6392\u9664\u5197\u6742\uff08\u4e5f\u5c31\u662f\u6709\u4e0d\u5c11\u7279\u4f8b\uff09\uff0c\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u76f4\u63a5\u679a\u4e3e\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5bf9\u4ed6\u76f4\u63a5\u901a\u8fc7\u66b4\u529b\u6216\u8005\u7ef4\u62a4\u4fe1\u606f\u7b97\u7b54\u6848\uff1a CF1801B - Buying gifts \uff0c 230322C-T2-Brackets \u3002\u6216\u8005\u662f\u6211\u4eec\u5c31\u76f4\u63a5\u8003\u8651 dp\uff1a CF1801C-Music Festival (\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8003\u8651\u5728\u6574\u4e2a\u72b6\u6001\u7a7a\u95f4\u91cc\u53d6\u6700\u4f18\u89e3\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u52b2\u7684\u8003\u8651\u5c40\u90e8\u6700\u4f18\u89e3) 0x12. \u6784\u9020 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5176\u5b9e\u6784\u9020\u5c5e\u4e8e\u6bd4\u8f83 adhoc \u7684\u9898\u76ee\uff0c\u4e0d\u8fc7\u8fd8\u662f\u5b58\u5728\u4e00\u5b9a\u7684\u5957\u8def\u3002 \u5047\u8bbe\u7b54\u6848\u5b58\u5728\uff0c\u5e94\u8be5\u662f\u600e\u4e48\u6837\u7684\uff1f \u90a3\u4e48\uff0c\u7b54\u6848\u4e0d\u5b58\u5728\u7684\u65f6\u5019\u5e94\u8be5\u662f\u600e\u4e48\u6837\uff1f \u6709\u6ca1\u6709\u4ec0\u4e48\u7279\u6b8a\u7684\u65b9\u5f0f\uff0c\u80fd\u591f\u8ba9\u6761\u4ef6\u88ab\u5f88\u597d\u7684\u6ee1\u8db3\uff1f \u53ef\u4e0d\u53ef\u4ee5\u653e\u5bbd\u6216\u8005\u7f29\u5c0f\u9898\u76ee\u7684\u9650\u5236\u4ee5\u4fbf\u66f4\u597d\u7684\u6784\u9020\uff1f 0x13. \u4e71\u641e \u03c8(\uff40\u2207\u00b4)\u03c8 \u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217\u505a\u5f88\u591a\u4e2a independent problem \u7684\u65f6\u5019\u4e00\u822c\u90fd\u4f1a\u8981\u8003\u8651\u4ece\u4e0a\u4e00\u4e2a\u72b6\u6001\u7ee7\u627f\uff0c\u6216\u8005\u662f\u8003\u8651\u5148\u6574\u4f53\u505a\u4e00\u904d\u518d\u8ba1\u7b97 ignore \u4e00\u4e9b\u64cd\u4f5c\u4e4b\u540e\u7684\u5f71\u54cd\u4e4b\u7c7b\u7684 \uff1a Least Elements \uff0c 230203C-T2-\u6392\u5217 \u3002 \u5982\u679c\u662f\u901a\u8fc7\u6253\u8868\u627e\u89c4\u5f8b\uff0c\u627e\u5230\u4e86 \\(k = c\\) \uff08\u5e38\u6570\uff09\u7684\u89c4\u5f8b\uff0c\u53ef\u4ee5\u8003\u8651\u628a\u5f0f\u5b50\u4e2d\u7684\u5e38\u6570\u9879\u6362\u6210 \\(k\\) \u76f8\u5173\u7684\u5f0f\u5b50\uff0c\u8fdb\u800c\u63a8\u51fa\u901a\u9879\u516c\u5f0f\uff1a THUPC2023-pre-B - \u62e7\u87ba\u4e1d \u6709\u4e9b\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5ffd\u7565\u90e8\u5206\u9650\u5236\uff0c\u76f4\u63a5\u5bf9\u4e8e\u4e00\u90e8\u5206\u9650\u5236\u505a\u5b8c\uff0c\u7136\u540e\u518d\u4e00\u4e00\u8c03\u6574\u6ee1\u8db3\u5176\u5b83\u9650\u5236\uff0c\u4e0d\u8fc7\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u901a\u5e38\u5c31\u53ef\u4ee5\u770b\u51fa\u590d\u5408\u540e\u7684\u505a\u6cd5\u4e86\uff1a Lost Cows \u5bf9\u4e8e\u4e00\u4e2a\u4f1a\u8df3\u6765\u8df3\u53bb\uff0c\u7b97\u4e00\u4e0b\u65b9\u6848\u6570\uff0c\u7ecf\u8fc7\u7684\u8def\u5f84\u957f\u5ea6\u4e4b\u7c7b\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u60f3\u5230\u5229\u7528\u500d\u589e\u7ef4\u62a4\uff1a CF1809F - Traveling in Berland \uff08\u8fd9\u9898\u9898\u89e3\u8fd8\u6ca1\u5199\uff09\u3002 \u5982\u679c\u4e00\u4e2a\u95ee\u9898\u8981\u4f60\u5408\u5e76\u4e00\u5806\u4e1c\u897f\uff0c\u800c\u4f60\u53ea\u4f1a\u66b4\u529b\uff0c\u8bf7\u52a1\u5fc5\u76f4\u63a5\u542f\u53d1\u5f0f\u5408\u5e76\uff1a 230331C-T2-Favorite Colors \u3002 \u7c7b\u4f3c CDQ \u548c\u70b9\u5206\u6cbb\u7684\u8fd9\u79cd\u201c\u53ea\u8003\u8651\u4e00\u79cd\u7b80\u5355\u60c5\u51b5\uff0c\u5176\u4ed6\u5206\u6cbb\u5904\u7406\u201d\u7684\u601d\u60f3\uff0c\u53ef\u4ee5\u591a\u62ff\u6765\u601d\u8003\u601d\u8003\u3002 0x20. \u52a8\u6001\u89c4\u5212 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5efa\u8bae\u5148\u9605\u8bfb \u5173\u4e8e dp \u7684\u4e00\u4e9b\u6ce8\u610f\u4e8b\u9879 0x21. \u786e\u5b9a\u9636\u6bb5 \u03c8(\uff40\u2207\u00b4)\u03c8 \u9636\u6bb5\u5176\u5b9e\u5f88\u597d\u786e\u5b9a\uff0c\u524d \\(i\\) \uff0c \\(u\\) \u7684\u5b50\u6811\u8fd9\u79cd\u662f\u6bd4\u8f83\u5e38\u89c1\u7684\uff0cFloyd \u7684 \\(k\\) \u4e3a\u9636\u6bb5\u7b97\u662f\u4e00\u79cd\u6bd4\u8f83\u7279\u6b8a\u7684\u9636\u6bb5\uff0c\u4e0d\u8fc7\u5927\u5bb6\u90fd\u77e5\u9053\u4e86\u5c31\u4e0d\u5199\u4e86\u3002 \u5982\u679c\u9898\u76ee\u7ed9\u51fa\u7684\u6761\u4ef6\u65e0\u6cd5\u4ee5\u7ebf\u6027\u7684\u987a\u5e8f\u4f5c\u4e3a\u9636\u6bb5\uff0c\u6bd4\u5982 Flexible String Revisit \u8fd9\u6837\u8981\u5728\u5e8f\u5217\u4e0a\u968f\u673a\u9009\u62e9\u7684\uff0c\u4e0d\u7136\u5c31\u8003\u8651\u6bcf\u4e00\u6b65\u7684\u4ee3\u4ef7\uff08\u8fd9\u9898\u662f\u4ece \\(i\\) \u4e2a\u4e0d\u540c\u53d8\u5316\u5230 \\(i - 1\\) \u4e2a\u4e0d\u540c\u4e3a\u4e00\u6b65\uff09\uff0c\u4e0d\u7136\u5c31\u8003\u8651\u7c7b\u4f3c\u72b6\u538b\u62c6\u5206\u8fd9\u79cd\u3002 0x22. \u72b6\u6001\u8bbe\u8ba1 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e00\u822c\u6765\u8bf4\u53ea\u9700\u8981\u63d0\u53d6\u9898\u76ee\u4e2d\u7684\u8981\u7d20\uff0c\u7ed3\u5408\u9636\u6bb5\u8bbe\u8ba1\u72b6\u6001\u5c31\u53ef\u4ee5\u3002 \u5e38\u89c1\u7684 dp \u72b6\u6001\u65e0\u975e\u5c31\u662f\u524d \\(i\\) \u524d \\(j\\) \uff0c \\(u\\) \u7684\u5b50\u6811\uff0c\u72b6\u6001\u4e3a \\(msk\\) \uff0c\u8d70\u5230 \\(pos\\) \u7684\u671f\u671b\u8fd9\u6837\uff0c\u770b\u770b /algor/dp \u91cc\u9762\u7684\u4e1c\u897f\u5c31\u884c\u4e86\u3002 \u4e0d\u8fc7\u5f88\u591a\u65f6\u5019\u9650\u5236\u6761\u4ef6\u5206\u4e24\u7c7b\uff0c\u4e00\u7c7b\u53ef\u4ee5\u5728\u72b6\u6001\u4e2d\u8868\u8fbe\uff0c\u4e00\u7c7b\u53ef\u4ee5\u5728\u8f6c\u79fb\u4e2d\u8868\u8fbe\uff0c\u8fd9\u4e2a\u63a5\u4e0b\u6765\u4f1a\u8bf4\u3002 \u80fd\u5728\u72b6\u6001\u4e2d\u8868\u8fbe\u7684\u4e00\u822c\u662f\u5f53\u524d\u4f4d\u7f6e\u7684\u4e00\u4e9b\u9650\u5236\uff0c\u6bd4\u5982\u5f53\u524d\u5df2\u7ecf\u9009\u4e86 \\(j\\) \u4e2a\u8fd9\u79cd\u3002 \u8fd9\u91cc\u8bb0\u5f55\u4e86\u4e00\u4e9b\u5bf9\u6211\u6765\u8bf4\u66fe\u7ecf\u4e0d\u662f\u5f88\u5e38\u89c4\u7684\u60f3\u6cd5\u3002 \u6709\u4e9b\u9898\u76ee\u9700\u8981\u8003\u8651\uff0c\u5728\u72b6\u6001\u4e2d\u94a6\u5b9a\u524d\u9762\u4e00\u6bb5\u4e00\u5b9a\u5408\u6cd5\uff0c\u7136\u540e\u53ea\u8003\u8651\u51b3\u7b56\u65f6\u4f1a\u6709\u53d8\u5316\u7684\u90e8\u5206\uff0c\u8fd9\u79cd\u4e00\u822c\u5728\u505a\u8f6c\u79fb\u7684\u65f6\u5019\u8981\u5c0f\u5fc3\u8c28\u614e\uff0c\u4e0d\u8981\u6f0f\u6389\u4e86\u9650\u5236\u6761\u4ef6\u3002 \u5982\u679c\u9898\u76ee\u4e2d\u7684\u8981\u7d20\u6bd4\u8f83\u591a\uff0c\u4f46\u662f\u77e5\u9053\u4e00\u5b9a\u7684\u4fe1\u606f\u4e4b\u540e\u53ef\u4ee5\u63a8\u51fa\u5269\u4e0b\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u72b6\u6001\u91cc\u7701\u53bb\u5bf9\u5e94\u7684\u7ef4\u5ea6\uff1a Mobile Service \u7ed9\u4e00\u4e2a\u5e8f\u5217\uff0c\u8981\u6c42\u5c06\u5176\u5206\u6210\u82e5\u5e72\u4e2a\u5b50\u6bb5\uff0c\u6c42\u67d0\u4e2a\u4ee3\u4ef7\u7684\u6700\u5927\u503c\u8fd9\u4e00\u7c7b\u95ee\u9898\uff0c\u5982\u679c\u9898\u76ee\u6ca1\u6709\u9650\u5236\u4f60\u9700\u8981\u5206\u591a\u5c11\u6bb5\uff0c\u53ef\u4ee5\u76f4\u63a5\u8bbe\u8ba1 dp \u72b6\u6001\u4e3a\uff0c\u8003\u8651\u524d \\(i\\) \u4e2a\u4f4d\u7f6e\u5206\u5272\u6210\u82e5\u5e72\u6bb5\u7684\u4ee3\u4ef7\u6700\u5927\u662f\u591a\u5c11\uff1a Optimal Partition \uff0c \u4efb\u52a1\u5b89\u6392 0x23. \u72b6\u6001\u8f6c\u79fb \u03c8(\uff40\u2207\u00b4)\u03c8 \u72b6\u6001\u8f6c\u79fb\u4e00\u822c\u53d6\u51b3\u4e8e\u72b6\u6001\u7684\u5b9a\u4e49\uff0c\u5c31\u8003\u8651\u600e\u4e48\u8ba9\u72b6\u6001\u80fd\u8986\u76d6\u6574\u4e2a\u72b6\u6001\u7a7a\u95f4\uff0c\u4e0d\u91cd\u590d\u4e0d\u6f0f\u7b97\u5c31\u53ef\u4ee5\u3002 \u5982\u679c\u72b6\u6001\u786e\u5b9e\u600e\u4e48\u641e\u90fd\u4f1a\u91cd\u590d\uff0c\u53ef\u4ee5\u8003\u8651\u5bb9\u65a5\u4e00\u4e0b\u3002 \u5982\u679c\u4f1a\u6f0f\u72b6\u6001\uff0c\u601d\u8003\u4e00\u4e0b\u662f\u4e0d\u662f\u9636\u6bb5\u6709\u95ee\u9898\uff0c\u9700\u4e0d\u9700\u8981\u5bf9\u539f\u95ee\u9898\u505a\u7c7b\u4f3c Exchange Argument \u7684\u5904\u7406\uff1f\uff1a Zabuton \u6216\u8005\u662f\u4e0d\u662f\u72b6\u6001\u672c\u8eab\u5c31\u6709\u95ee\u9898\uff1f \u6709\u4e9b\u9650\u5236\u6761\u4ef6\u9700\u8981\u5728\u72b6\u6001\u8f6c\u79fb\u7684\u65f6\u5019\u8fdb\u884c\u4f18\u5316\uff0c\u8fd9\u4e2a\u5c31\u4e0d\u540c\u4e8e\u72b6\u6001\u8bbe\u8ba1\u4e2d\u7684\u9650\u5236\u6761\u4ef6\u4e86\uff0c\u6240\u4ee5\u5728\u8003\u8651\u8f6c\u79fb\u7684\u65f6\u5019\uff0c\u5982\u679c\u6ca1\u6709\u601d\u8def\u4e86\uff0c\u53ef\u4ee5\u591a\u770b\u770b\u9898\u9762\uff0c\u518d\u627e\u627e\u6709\u6ca1\u6709\u6f0f\u6389\u7684\u9650\u5236\u6761\u4ef6\u3002 \u671f\u671b dp \u5728\u8f6c\u79fb\u7684\u65f6\u5019\u53ef\u4ee5\u628a\u671f\u671b\u5f53\u6210\u968f\u673a\u53d8\u91cf\u7684\u4e00\u79cd\u53d6\u503c\uff0c\u539f\u7406\u662f\u4e58\u6cd5\u5206\u914d\u5f8b\uff1a Ilya and Escalator \uff0c\u5177\u4f53\u53ef\u4ee5\u770b\u671f\u671b dp \u7684\u8bb2\u7a3f\u3002 \u6362\u6839 dp \u7684\u65f6\u5019\u9700\u8981\u8003\u8651\u6e05\u695a\uff0c\u7b2c\u4e8c\u4e2a dp \u6570\u7ec4\u5230\u5e95\u4ece\u4ec0\u4e48\u8f6c\u79fb\u8fc7\u6765\uff0c\u6709\u6ca1\u6709\u7b97\u91cd\u590d\u7684\u90e8\u5206\uff0c\u5982\u679c\u53d6\u6a21\u8fd8\u8981\u8003\u8651\u662f\u5426\u5b58\u5728\u9006\u5143\u4e4b\u7c7b\u7684\uff1a Subtree \u6709\u4e9b dp \u867d\u7136\u9636\u6bb5\u662f\u4e0b\u6807\uff0c\u4f46\u662f\u5b83\u8f6c\u79fb\u7684\u65f6\u5019\uff0c\u4e3a\u4e86\u51b3\u7b56\u65b9\u4fbf\uff0c\u9700\u8981\u66f4\u6539\u4e00\u4e0b\u7b49\u53f7\u5de6\u8fb9\u7684\u4e0b\u6807\uff0c\u65b9\u4fbf\u8f6c\u79fb\uff0c\u4e0d\u7136\u6211\u4eec\u4e0d\u597d\u786e\u5b9a\u8fd9\u4e2a\u51b3\u7b56\u5230\u5e95\u5bf9\u7b54\u6848\u4ea7\u751f\u4e86\u4ec0\u4e48\u8d21\u732e\uff1a Cleaning Shifts \u5982\u679c dp \u72b6\u6001\u76f4\u63a5\u8f6c\u79fb\u5f88\u9ebb\u70e6\uff0c\u6bd4\u5982\u90a3\u79cd\u6709\u5173\u8054\u6027\u7684\u72b6\u538b dp\uff0c\u8003\u8651\u4e00\u4e0b\u7b49\u4ef7\u7684\u8f6c\u5316\uff1f 2301113C-T4-coin \u5982\u679c\u662f\u6811\u5f62 dp\uff0c\u53ef\u4ee5\u5229\u7528 dfs \u5e8f\u7684\u6027\u8d28\uff0c\u628a\u8282\u70b9\u5206\u6210\u4e24\u7c7b\uff0c\u7528\u4e8e\u5f88\u597d\u7684\u8868\u8fbe\u4e00\u4e9b\u7956\u5148\u5173\u7cfb\uff0c\u5f88\u591a\u65f6\u5019\u8fd8\u53ef\u4ee5\u7528\u6765\u51cf\u5c11\u679a\u4e3e\uff0c\u76f4\u63a5\u4e00\u6b65\u5230\u4f4d\uff1a 230224C-T4-\u8fa3\u6912 \u5982\u679c\u5728\u6811\u4e0a\u4f7f\u7528\u659c\u7387\u4f18\u5316\uff0c\u8981\u8bb0\u5f97\u51fa\u5b50\u6811\u4e4b\u540e\u56de\u6eaf\u51f8\u58f3\u7684\u72b6\u6001\uff1a Harbingers 0x24. \u540e\u6548\u6027\u76f8\u5173 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e2a\uff0c\u5176\u5b9e\u5c31\u662f\u65b9\u7a0b\u63a8\u51fa\u6765\u7684\uff0c\u8981\u5199\u4ee3\u7801\u7684\u65f6\u5019\u9700\u8981\u8003\u8651\u7684\u4e86\u3002 \u5f88\u591a\u65f6\u5019\u9700\u8981\u8003\u8651\u9ad8\u65af\u6d88\u5143\u6216\u8005\u66f4\u6539\u679a\u4e3e\u987a\u5e8f\uff0c\u5982\u679c\u8fd9\u6837\u8fd8\u662f\u6ca1\u7528\u5927\u6982\u7387\u662f\u72b6\u6001\u8bbe\u8ba1\u5c31\u51fa\u4e8b\u4e86\uff1a [HNOI2013] \u6e38\u8d70 \u671f\u671b dp \u5f88\u591a\u65f6\u5019\u8981\u8003\u8651\u5012\u63a8\uff0c\u4e0d\u7136\u5bb9\u6613\u56e0\u4e3a\u72b6\u6001\u4e4b\u95f4\u7684\u4f9d\u8d56\u6210\u73af\uff0c\u6216\u8005\u56e0\u4e3a\u7ec8\u6b62\u72b6\u6001\u4e0d\u552f\u4e00\uff0c\u751a\u81f3\u56e0\u4e3a\u6982\u7387\u4e0d\u597d\u8ba1\u7b97\u800c\u5bfc\u81f4\u4e0d\u5fc5\u8981\u7684\u9ebb\u70e6\uff1a Gotta Go Fast 0x25. \u4f18\u5316\u8f6c\u79fb \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e2a\u5176\u5b9e\u5c31\u5206\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u8003\u8651\u4f18\u5316\u8f6c\u79fb\uff08\u51b3\u7b56\u96c6\u5408\uff09\uff0c\u4e00\u79cd\u662f\u4f18\u5316\u72b6\u6001\u3002\uff08\u81f3\u5c11\u4ee5\u76ee\u524d\u6211\u6240\u77e5\u9053\u7684\u6765\u770b\uff09 \u524d\u8005\u4e00\u822c\u662f \u6570\u636e\u7ed3\u6784\u4f18\u5316 dp \uff08\u5355\u8c03\u961f\u5217\u4e5f\u662f\u6570\u636e\u7ed3\u6784\u554a\uff09\uff0c\u4e5f\u6709\u8003\u8651\u89c2\u5bdf\u9650\u5236\u6761\u4ef6\u7684\u7279\u6b8a\u6027\u6765\u53bb\u9664\u5197\u6742\u72b6\u6001\u7684\uff1a Xor-Subsequence (easy version) \uff0c\u4ea6\u6216\u8005\u662f \u659c\u7387\u4f18\u5316 dp \u4e5f\u6709\u5229\u7528\u8d39\u7528\u63d0\u524d\u8ba1\u7b97\u7684\u601d\u60f3\u7684\uff1a \u4efb\u52a1\u5b89\u6392 \uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7406\u89e3\u6210\u201c\u61d2\u64cd\u4f5c\u201d\u7684\u53cd\u65b9\u5411\u3002 \u540e\u8005\u5176\u5b9e\u4e00\u822c\u5728\u72b6\u6001\u8bbe\u8ba1\u7684\u65f6\u5019\u5c31\u505a\u4e86\uff0c\u8fd9\u91cc\u4e0d\u591a\u63d0\u3002 0x26. \u5404\u79cd\u6a21\u578b \u03c8(\uff40\u2207\u00b4)\u03c8 \u5bf9\u4e8e\u4e00\u4e9b\u7279\u5b9a\u7684\u95ee\u9898\uff0c\u5b83\u4eec\u7684 dp \u8bbe\u8ba1\u662f\u975e\u5e38\u5957\u8def\u5316\u7684\uff0c\u6240\u4ee5\u5355\u72ec\u63d0\u51fa\u6765\uff1a \u5bf9\u4e8e\u672c\u8d28\u4e0d\u540c\u5b50\u5e8f\u5217\uff0c\u4e00\u822c\u90fd\u662f\u8bbe \\(dp(i)\\) \u8003\u8651\u524d \\(i\\) \u4e2a\u4f4d\u7f6e\u7684\u7b54\u6848\uff0c\u7136\u540e\u5bf9\u4e8e\u5f53\u524d\u4f4d\u7f6e\u5206\u7c7b\u8ba8\u8bba\u5373\u53ef\uff1a 230115C-T4-\u7f8e\u98df \u5bf9\u4e8e\u4e00\u4e2a\u6392\u5217\uff0c\u7b97\u4e00\u4e9b\u65b9\u6848\u6570\u7684\u8ba1\u6570 dp\uff0c\u4ed6\u7684\u56fa\u6709\u5957\u8def\u5c31\u662f\u8003\u8651\u4e00\u4e2a\u4e00\u4e2a\u63d2\u5165\uff1a 230111C-T4-\u5c0fW\u4e0e\u5927\u6570 \u5982\u679c\u662f\u8054\u901a\u5757\u4e58\u79ef\uff0c\u8003\u8651\u5b83\u7684\u7ec4\u5408\u610f\u4e49\uff0c\u672c\u8d28\u662f\u5c06\u6811\u5212\u5206\u6210\u82e5\u5e72\u4e2a\u8054\u901a\u5757\uff0c\u8003\u8651\u6bcf\u4e2a\u8054\u901a\u5757\u9009\u4e00\u4e2a\u7684\u65b9\u6848\u6570\uff1a 230322C-T4-Mushroom 0x30. \u6570\u636e\u7ed3\u6784 \u03c8(\uff40\u2207\u00b4)\u03c8 0x31. \u8f6c\u5316 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5bf9\u4e8e\u4e00\u4e2a\u6bd4\u8f83\u590d\u6742\u7684\uff0c\u52a8\u6001\u7ef4\u62a4\u7684\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u5229\u7528 CDQ \u5206\u6cbb\uff0c\u5c06\u52a8\u6001\u7684\u95ee\u9898\u8f6c\u5316\u4e3a\u9759\u6001\u7684\uff0c\u5176\u539f\u7406\u662f\u5229\u7528\u5206\u6cbb\u7684\u601d\u60f3\u5c06\u4e00\u5806\u52a8\u6001\u95ee\u9898\u62c6\u5206\u6210\u51e0\u4e2a\u5c0f\u7684\u9759\u6001\u95ee\u9898\u3002 0x32. \u660e\u786e\u9700\u8981\u7ef4\u62a4\u7684\u4fe1\u606f \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ef4\u62a4\u7684\u4fe1\u606f\u7684\u533a\u522b\u4f1a\u5bfc\u81f4\u4ee3\u7801\u5b9e\u73b0\u590d\u6742\u5ea6\u7684\u533a\u522b\u3002 \u5982 Buy tickets \u8fd9\u4e00\u9898\uff0c\u5982\u679c\u76f4\u63a5\u7ef4\u62a4\u6574\u4e2a\u5e8f\u5217\u4f1a\u5f88\u9ebb\u70e6\uff0c\u9700\u8981\u5230\u5904\u5220\u9664\u52a0\u70b9\u4e4b\u7c7b\u7684\uff0c\u5982\u679c\u8fd9\u9898\u6211\u4eec\u9009\u62e9\u4e86\u201c\u7ef4\u62a4\u7a7a\u4f4d\u201d\uff0c\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u7b80\u5355\u7684\u7ebf\u6bb5\u6811\u4e8c\u5206\u4e86\u3002 0x33. \u9009\u62e9\u5408\u9002\u7684\u6570\u636e\u7ed3\u6784 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6570\u636e\u7ed3\u6784\u7684\u4e0d\u540c\u5f80\u5f80\u4f1a\u76f4\u63a5\u51b3\u5b9a\u4ee3\u7801\u5b9e\u73b0\u590d\u6742\u5ea6\u548c\u4f60\u7684\u5fc3\u6001\u3002 \u5982\u679c\u4e00\u4e2a\u95ee\u9898\u4e00\u770b\u5c31\u662f\u6bd4\u8f83\u663e\u7136\u7684 XXX \u677f\u5b50\uff0c\u4f46\u662f\u5b9e\u73b0\u96be\u5ea6\u786e\u5b9e\u592a\u9ad8\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\uff0c\u5728\u5f53\u524d\u7684\u9650\u5236\u4e0b\uff0c\u5b58\u4e0d\u5b58\u5728\u53e6\u4e00\u79cd\u66f4\u5de7\u5999\u7684\u7ef4\u62a4\u65b9\u5f0f\uff1f\u6bd4\u5982\u7ebf\u6bb5\u6811\u4e8c\u5206+\u533a\u95f4 qmax\uff0c\u53ef\u4e0d\u53ef\u4ee5\u76f4\u63a5\u5148 sort \u7136\u540e\u7c7b\u4f3c\u5bf9\u9876\u7684\u4e24\u4e2a set \u7ef4\u62a4\u4e24\u4e2a\u90e8\u5206\uff1f CF1801B - Buying gifts 0x34. \u7ef4\u62a4\u65b9\u5f0f/\u600e\u4e48\u9b54\u6539 \u03c8(\uff40\u2207\u00b4)\u03c8 0x35. \u4e00\u4e9b\u6a21\u578b \u03c8(\uff40\u2207\u00b4)\u03c8 0x40. \u56fe\u8bba \u03c8(\uff40\u2207\u00b4)\u03c8 \u9e3d\u3002 0x50. \u6570\u5b66 \u03c8(\uff40\u2207\u00b4)\u03c8 Lcm \u7684\u672c\u8d28\u5c31\u662f\uff0c\u5bf9\u4e8e\u6240\u8fd0\u7b97\u7684\u6570\u8d28\u56e0\u6570\u5206\u89e3\uff0c\u8003\u8651\u6bcf\u4e2a\u56e0\u5b50\u51fa\u73b0\u7684\u6700\u9ad8\u6b21\u5e42\uff0c\u7136\u540e\u4e58\u8d77\u6765\uff1a 230331C-T3-Exercise \u3002 \u4e8c\u8fdb\u5236\u4e0b\u52a0\u4e00\u7684\u672c\u8d28\u5c31\u662f\uff0c\u627e\u5230\u4f4e\u4f4d\u7684\u7b2c\u4e00\u4e2a 0\uff0c\u53d8\u6210 1 \u4e4b\u540e\u628a\u4e4b\u540e\u7684 1 \u5168\u90e8\u53d8\u6210 0\uff1a 01Trie \u7ef4\u62a4\u5168\u5c40\u52a0\u4e00 . 0x60. \u5b57\u7b26\u4e32 \u03c8(\uff40\u2207\u00b4)\u03c8 \u9e3d\u3002","title":"OI \u601d\u7ef4\u6280\u5de7"},{"location":"misc/antontrygubO_o/#0x00","text":"","title":"0x00. \u505a\u9898\u601d\u8def"},{"location":"misc/antontrygubO_o/#0x01","text":"\u62ff\u5230\u9898\u9996\u5148\u5e94\u8be5\u505a\u7684\u662f\u9605\u8bfb\u9898\u9762\uff0c\u5148\u5f62\u5f0f\u5316\u9898\u9762\uff08\u5f88\u591a\u65f6\u5019\u5f62\u5f0f\u5316\u5c31\u4ee3\u8868\u4e86\u521d\u6b65\u8f6c\u5316\uff09\u3002 \u60f3\u6e05\u695a\u9898\u76ee\u8981\u6c42\u4f60\u505a\u4ec0\u4e48\uff0c\u8fd9\u7c7b\u95ee\u9898\u6709\u6ca1\u6709\u89c1\u8fc7\uff0c\u6709\u6ca1\u6709\u5957\u8def\uff0c\u5982\u679c\u89c1\u8fc7\u7c7b\u4f3c\u7684\uff0c\u8fd9\u4e2a\u9898\u5e94\u8be5\u6709\u4ec0\u4e48\u53d8\u5316\uff1f\u6bd4\u5982\u505a\u8fc7 Permutation Distance \u4e4b\u540e\u518d\u770b\u5230 230111C-T1-\u5c0fW\u4e0e\u8eab\u9ad8 \u8fd9\u6837\u3002 \u770b\u6e05\u695a\u95ee\u9898\u662f online \u8fd8\u662f offline\uff1f\u662f exists \u8fd8\u662f forall\uff1f \u6ca1\u6709\u5957\u8def\u7684\u8bdd\u662f\u4e0d\u662f\u5e94\u8be5\u8003\u8651\u8f6c\u5316/\u89c2\u5bdf\u7ed3\u8bba\uff1f\uff08\u8fd9\u4e2a\u4e0b\u9762\u518d\u8bf4\uff09 \u5f53\u7136\uff0c\u5982\u679c\u4e00\u4e2a\u95ee\u9898\u601d\u8003\u7684\u65f6\u5019\u8111\u888b\u91cc\u6ca1\u6709\u4e00\u79cd\u201c\u6e05\u6670\u201d\u7684\u611f\u89c9\uff0c\u5c31\u5c3d\u91cf\u4e0d\u8981\u5f00\u59cb\u4e0b\u4e00\u6b65\uff0c\u6bd4\u5982 230203C-T1-\u5b57\u7b26\u4e32 \u3002 \u89c2\u5bdf\u6570\u636e\u8303\u56f4\u4e5f\u662f\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u70b9\uff0c\u53ef\u4ee5\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u5feb\u901f\u5224\u65ad\u5bf9\u5e94 subtask \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4ee5\u786e\u5b9a\u65b9\u5411\uff0c\u6bd4\u5982 Union of Two Sets \u8fd9\u7c7b\u4ea4\u4e92\uff0c\u80fd\u901a\u8fc7\u4ea4\u4e92\u9898\u51fa\u9898\u7684\u5c40\u9650\u6027\uff0c\u6839\u636e\u6570\u636e\u8303\u56f4\u5feb\u901f\u5224\u65ad\u505a\u6cd5\uff08\uff08\uff08 \u4e0d\u8fc7\u6709\u7684\u65f6\u5019\u4e5f\u4e0d\u80fd\u88ab\u8fd9\u4e2a\u5c40\u9650\u4e86\uff1a\u6bd4\u5982 230201C-T4-\u56de\u6587\u4e32 \uff0c\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u5b57\u7b26\u96c6\u662f \\(26\\) \uff0c\u800c\u4e14\u5b57\u7b26\u4e32\u957f\u5ea6 \\(1e5\\) \uff0c\u4ee5\u4e3a\u590d\u6742\u5ea6\u662f \\(26 \\times 1e5\\) \uff0c\u7ed3\u679c\u5b9e\u9645\u4e0a\u8fd8\u8981\u518d\u591a\u4e00\u4e2a\u4e8c\u5206\u7684 \\(\\log\\) \u3002 \u8fd8\u6709 230201C-T2-\u7ffb\u8f6c \uff0c\u8fd9\u4e2a\u4e5f\u662f\u88ab\u6570\u636e\u8303\u56f4\u76f4\u63a5\u9a97\u4e86\uff0c\u65b9\u5411\u76f4\u63a5\u9519\u5b8c\uff0c\u672c\u6765\u5c31\u662f\u66b4\u529b\uff0c\u60f3\u6210\u72b6\u538b dp \u4e86\u2026\u2026 \u6240\u4ee5\u89c2\u5bdf\u6570\u636e\u8303\u56f4\u6765\u5224\u5b9a\u505a\u6cd5\u662f\u4e0b\u4e0b\u7b56\uff0c\u53ea\u80fd\u5728 \u5b8c\u5168 \u6ca1\u6709\u601d\u8def\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\uff01 \u4e0d\u8fc7\u4f60\u4e3a\u4e86\u786e\u5b9a\u505a\u6cd5\u503c\u4e0d\u503c\u5f97\u60f3\u4e0b\u53bb\uff0c\u8fd8\u662f\u8981\u770b\u4e00\u4e0b\u6570\u636e\u8303\u56f4\u7684\uff0c\u907f\u514d\u50cf USCAO23JAN Bronze T2 \u8fd9\u6837\uff0c\u672c\u6765\u5c31\u662f\u4e2a\u8bed\u6cd5\u66b4\u529b\u9898\uff0c\u5c31\u56e0\u4e3a\u628a \\(10\\) \u770b\u6210\u4e86 \\(1e5\\) \uff0c\u60f3\u4e86\u5927\u534a\u5929\u8d2a\u5fc3\uff0c\u6210\u4e3a\u5c0f\u4e11\u3002","title":"0x01. \u9605\u8bfb\u9898\u9762"},{"location":"misc/antontrygubO_o/#0x02","text":"\u8fd9\u4e2a\u5176\u5b9e\u624d\u662f\u5f88\u591a\u65f6\u5019\u6253\u5f00\u9898\u76ee\u7a81\u7834\u53e3\u7684\u5730\u65b9\u3002 \u6709\u4e00\u4e9b\u6bd4\u8f83\u5e38\u7528\u7684\u6280\u5de7\uff0c\u5728\u8fd9\u91cc\u5217\u4e3e\u4e00\u4e0b\uff1a \u6700\u7b28\u7684\u65b9\u6cd5\u5c31\u662f\u8003\u8651\u624b\u73a9\u6837\u4f8b\uff0c\u6a21\u62df\u4e00\u4e0b\u9898\u9762\u7684\u8fc7\u7a0b\u770b\u770b\u6709\u6ca1\u6709\u542f\u53d1\uff0c\u627e\u627e\u89c4\u5f8b\u8bd5\u8bd5\uff1f\u6bd4\u5982\uff1a 220518C-T2-\u300c\u5ba2\u661f\u7480\u74a8\u4e4b\u591c\u300d \u8fd9\u6837\uff1f\u6216\u8005\u662f\u7c7b\u4f3c 2301113C-T4-coin \u8fd9\u79cd\u8003\u8651\u628a\u6709\u8054\u7cfb\u7684\u4e1c\u897f\u653e\u5728\u4e00\u8d77\uff0c\u89c2\u5bdf\u5230\u95ee\u9898\u7684\u672c\u8d28\uff1f \u518d\u8fdb\u4e00\u6b65\u5c31\u662f\u8003\u8651\u89c2\u5bdf\u7b54\u6848\u7684\u5f62\u5f0f\uff0c\u5408\u6cd5\u89e3\u7684\u5f62\u72b6\uff0c\u770b\u770b\u6709\u6ca1\u6709\u4ec0\u4e48\u542f\u53d1\uff0c\u6bd4\u5982 Young Maids \uff0c\u8003\u8651\u4e00\u4e2a\u7b54\u6848\u5408\u6cd5\u540e\u5bf9\u539f\u95ee\u9898\u51b3\u7b56\u7684\u9650\u5236\u662f\u4ec0\u4e48\uff1f\u8fd8\u662f\u8bf4\u6bd4\u5982 221025C-T4-\u7f6a\u2f08\u633d\u6b4c \u8981\u60f3\u6e05\u695a\uff0c\u4ec0\u4e48\u4e1c\u897f\u624d\u4f1a\u9020\u6210\u8d21\u732e\uff0c\u4e00\u4e2a\u4f4d\u7f6e\u4ec0\u4e48\u65f6\u5019\u5408\u6cd5\uff0c\u4ec0\u4e48\u65f6\u5019\u4e0d\u5408\u6cd5\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u7c7b\u4f3c\u62c6\u5f00\u9650\u5236\u4e00\u6837\uff0c\u8ba9\u5404\u4e2a\u5143\u7d20\u505a\u7684\u8d21\u732e\u5c3d\u91cf\u7684\u51cf\u5c11\u5bf9\u5176\u5b83\u5143\u7d20\u8d21\u732e\u7684\u5f71\u54cd\uff0c\u8fd9\u6837\u66f4\u65b9\u4fbf\u8ba1\u7b97\uff0c\u6bd4\u5982\u7c7b\u4f3c 230203C-T4-\u4ea4\u6362 \u7684\u60f3\u6cd5\uff0c\u5f88\u591a\u65f6\u5019\u4e5f\u80fd\u7c7b\u4f3c\u4e0b\u9762 dp \u91cc\u63d0\u5230\u7684 Xor-Subsequence (easy version) \u4e00\u6837\u7528\u6765\u6392\u9664\u4e0d\u5fc5\u8981\u7684\u72b6\u6001\u3002 \uff08\u63a5\u4e0a\u4e00\u6761\uff09\u4e5f\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b\uff0c\u5982\u679c\u6211\u4eec\u8003\u8651\u5168\u5c40 or \u6bcf\u4e00\u6bb5\uff0c\u672c\u8eab\u5c31\u5df2\u7ecf\u80fd\u6ee1\u8db3\u7b54\u6848\u7684\u8d21\u732e\uff0c\u7136\u540e\u518d\u8003\u8651\u51d1\u51fa\u6765\u4e4b\u540e\u53c8\u51fa\u73b0\u7684\u65b0\u7684\u8d21\u732e\uff08\u524d\u63d0\u662f\u5f00\u59cb\u7684\u65f6\u5019\u6ee1\u8db3\u8d21\u732e\u7684\uff0c\u62fc\u51d1\u8d77\u6765\u4e4b\u540e\u4e5f\u80fd\u6ee1\u8db3\u8d21\u732e\uff09\uff1a NOIOnline2022TG-\u4e39\u9493\u6218 \uff0c CF1801C-Music Festival \u5bf9\u4e8e\u4e00\u4e2a\u6700\u4f18\u5316\u95ee\u9898\uff0c\u601d\u8003\u4e00\u4e0b\uff0c\u600e\u4e48\u6837\u624d\u80fd\u66f4\u52a0\u4f18\u79c0\uff0c\u662f\u4e0d\u662f\u8981\u8003\u8651\u8d2a\u5fc3\u554a\uff0cdp\u554a\u4e4b\u7c7b\u7684\u505a\u6cd5\u4e86\uff1f\u6bd4\u5982 230203C-T3-\u5e8f\u5217 \u89c2\u5bdf\u4e00\u4e2a\u770b\u8d77\u6765\u5565\u90fd\u6ca1\u6709\u7684\u95ee\u9898\uff0c\u8981\u8003\u8651\u81ea\u5df1\u624b\u52a8\u52a0\u4e0a\u4e00\u4e9b\u9650\u5236\uff0c\u5199\u51fa\u201c\u4e0d\u662f\uff0c\u5c31\u662f\uff0c\u4e00\u5b9a\u662f\uff0c\u5426\u5219\u201d\u8fd9\u6837\u7684\u89c2\u5bdf\uff0c\u7136\u540e\u8003\u8651\u8fd9\u4e9b\u4e1c\u897f\u6709\u5565\u7528\uff1a 230117C-T4-\u5b50\u56fe \u3002 \u8fd9\u4e9b\u662f\u7528\u4e8e\u8f6c\u5316\u95ee\u9898\u7684\uff0c\u6216\u8005\u8bf4\u5df2\u7ecf\u63a5\u8fd1\u76f4\u63a5\u7684\u505a\u6cd5\u4e86\uff1a \u6709\u591a\u4e2a\u590d\u5408\u7684\u9650\u5236\u6761\u4ef6\u7684\u65f6\u5019\uff0c\u8003\u8651\u628a\u9650\u5236\u6761\u4ef6\u62c6\u5f00\u7ef4\u62a4\uff1a Permutation Distance \u3002 \u8003\u8651\u66f4\u6362\u8d21\u732e\u7684\u8ba1\u7b97\u65b9\u5f0f\uff0c\u9009\u62e9\u4e0d\u90a3\u4e48\u76f4\u89c2\u7684\u8d21\u732e\u62c6\u5f00\u7ef4\u62a4\uff1f\u7c7b\u4f3c Manacher \u8fd9\u6837\uff0c\u53ea\u8003\u8651\u4ee5\u4e00\u4e2a\u4f4d\u7f6e\u4e3a\u4e2d\u5fc3\u7684\u6240\u6709\u56de\u6587\u4e32\uff0c\u8fdb\u4e00\u6b65\u8bf4\u8fd9\u4e2a\u662f\u94a6\u5b9a\u4e00\u4e2a\u7c7b\u4f3c dp \u4e2d\u201c\u9636\u6bb5\u201d\u7684\u57fa\u5e95\uff0c\u627e\u5230\u4e00\u4e2a\u8ba1\u7b97\u8d21\u732e\u7684\u57fa\u51c6\u3002 \u6216\u8005\u8003\u8651\u7d2f\u52a0\u5f71\u54cd\uff0c\u6279\u91cf\u5904\u7406\u8d21\u732e\uff1f\u6bd4\u5982 230201C-T4-\u56de\u6587\u4e32 \uff0c\u8ba1\u7b97\u7b54\u6848\u7684\u65f6\u5019\u5c31\u662f\u53cd\u8fc7\u6765\uff0c\u8003\u8651\u57fa\u51c6\u5bf9\u4e8e\u6240\u6709\u80fd\u4ea7\u751f\u8d21\u732e\u7684\u70b9\u7d2f\u52a0\u4e00\u4e2a\u6743\u503c\uff0c\u6700\u540e\u79bb\u7ebf\u5728\u6240\u6709\u70b9\u7b97\u4e00\u4e0b\u6743\u503c\u5373\u53ef \u4e5f\u53ef\u4ee5\u5bf9\u4e8e\u4e00\u4e2a\u590d\u6742\u7684 \\(\\sum\\sum\\min\\max\\) \u8fd9\u6837\u7684\u5f0f\u5b50\uff0c\u6211\u4eec\u5c1d\u8bd5\u76f4\u63a5\u94a6\u5b9a\u51fa\u5355\u4e2a\u4f4d\u7f6e\u7684\u7b54\u6848\uff0c\u6c42\u548c\u4e4b\u540e\u518d\u63a8\u5f0f\u5b50 ABC290F - Maximum Diameter \uff0c\u4e0d\u7136\u5c31\u662f\u7c7b\u4f3c\u4e0a\u9762\u90a3\u6837\u66f4\u6362\u8ba1\u7b97\u65b9\u5f0f\u3002 \u662f\u5426\u8981\u8003\u8651\u5206\u79bb\u53d8\u91cf\uff1f\u6bd4\u5982\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u77e9\u9635\u6539\u77e9\u9635\u548c\u7684\u65f6\u5019\uff0c\u6bd4\u5982\u7ebf\u6bb5\u6811\u7ef4\u62a4\u65b9\u5dee\u7684\u65f6\u5019\u3002 \u8003\u8651\u4e00\u4e0b\u4fee\u6539\u4e86\u4e00\u4e2a\u4f4d\u7f6e\u4e4b\u540e\uff0c\u5bf9\u7b54\u6848\u7684\u5f71\u54cd\u662f\u4ec0\u4e48\uff1f\u8fd9\u91cc\u8fd8\u662f\u4ee5 230201C-T4-\u56de\u6587\u4e32 \u4e3a\u4f8b\uff0c\u8fd9\u4e2a\u9898\u786e\u5b9e\u6bd4\u8f83\u6df1\u523b\u3002 \u8003\u8651\u4e00\u4e0b\uff0c\u6b63\u7740\u505a\u5f88\u9ebb\u70e6\uff0c\u80fd\u5426\u8003\u8651\u53cd\u7740\u505a\uff0c\u6216\u8005\u62c6\u5f00\u505a\uff1f \u5f53\u524d\u7684\u5f0f\u5b50\uff0c\u5f53\u524d\u7684\u4e00\u4e9b\u53d8\u91cf\uff0c\u80fd\u4e0d\u80fd\u5b58\u5728\u5176\u5b83\u7b49\u4ef7\u7684\uff0c\u53ef\u4ee5\u65b9\u4fbf\u8ba1\u7b97\u7684\u610f\u4e49\uff1f\u6bd4\u5982\u7528\u7ec4\u5408\u610f\u4e49\u8f6c\u5316\uff0c\u6216\u8005\u662f\u7528\u7c7b\u4f3c wqs \u4e8c\u5206\u91cc\u7ed9\u5f0f\u5b50\u7ed3\u5408\u539f\u95ee\u9898\u627e\u610f\u4e49\u7684\u8fd9\u79cd\uff1f \u6709\u7684\u65f6\u5019\u751a\u81f3\u53ef\u4ee5\u8003\u8651\u589e\u52a0\u9650\u5236\u6765\u7f29\u51cf\u72b6\u6001\uff0c\u4f46\u662f\u4ecd\u7136\u4fdd\u8bc1\u5408\u6cd5\uff1f\u7c7b\u4f3c 230115C-T3-\u5b9e\u9a8c \u81f3\u5c11\u4e0d\u597d\u7b97\uff0c\u4f46\u662f\u81f3\u5c11\u51d1\u51fa\u8fd8\u53ef\u4ee5\u7ef4\u62a4\u3002 \u60f3\u6e05\u695a\u4e00\u7c7b\u8d21\u732e\u4ec0\u4e48\u65f6\u5019\u4f1a\u88ab\u8ba1\u7b97\uff0c\u5982\u679c\u5b83\u53ef\u4ee5\u88ab\u4e0d\u540c\u79cd\u60c5\u51b5\u7684\u4e0d\u540c\u4f4d\u7f6e\u66f4\u65b0\uff0c\u662f\u5426\u8981\u8003\u8651\u94a6\u5b9a\u53ea\u8ba1\u7b97\u67d0\u4e9b\u90e8\u5206\uff1a 230117C-T4-\u5b50\u56fe \u3002","title":"0x02. \u8f6c\u5316\u95ee\u9898\u4ee5\u53ca\u89c2\u5bdf\u7ed3\u8bba\u548c\u6027\u8d28"},{"location":"misc/antontrygubO_o/#0x03","text":"\u6709\u6027\u8d28\uff0c\u6709\u60f3\u6cd5\u4e4b\u540e\uff0c\u5e94\u8be5\u8003\u8651\u7684\u5c31\u662f\uff0c\u600e\u4e48\u6837\u628a\u5b83\u5e94\u7528\u5230\u539f\u95ee\u9898\u4e0a\u3002 \u8fd8\u6709\uff0c\u8fd9\u4e9b\u4e1c\u897f\u662f\u5426\u80fd\u4fdd\u8bc1\u6b63\u786e\u6027\uff1f\u6709\u6ca1\u6709\u53cd\u4f8b\uff1f\u6709\u6ca1\u6709\u7279\u6b8a\u60c5\u51b5\uff1f\u8003\u8651\u4e00\u4e0b\u5148\uff1f \u5982\u679c\u5f53\u524d\u601d\u8def\u867d\u7136\u5f88\u6e05\u6670\uff0c\u4f46\u5c31\u662f\u5361\u5728\u4e00\u4e2a\u70b9\uff0c\u77e5\u9053\u5e94\u8be5\u628a\u5b83\u5f04\u6210\u4ec0\u4e48\u5f62\u5f0f\uff0c\u4f46\u662f\u786e\u5b9e\u6ca1\u6709\u529e\u6cd5\u505a\u5230\uff0c\u5c31\u9700\u8981\u8003\u8651\u91cd\u542f\u601d\u8def\uff0c\u6216\u8005\u662f\u89c2\u5bdf\u601d\u7ef4\u94fe\u4e0a\u662f\u4e0d\u662f\u6709\u4ec0\u4e48\u5730\u65b9\u51fa\u95ee\u9898\u4e86\uff0c\u6bd4\u5982\uff1a 230201C-T2-\u7ffb\u8f6c \u601d\u7ef4\u7a7a\u767d\u7684\u65f6\u5019\uff0c\u6709\u4e24\u79cd\u529e\u6cd5\uff0c\u4e00\u79cd\u662f\u89c2\u5bdf\u9898\u9762\uff0c\u53e6\u5916\u4e00\u79cd\u5c31\u662f\u8003\u8651\u91cd\u65b0\u7406\u4e00\u904d\u601d\u8def\u3002 \u957f\u65f6\u95f4\u7684\u601d\u7ef4\u7a7a\u767d\u4f1a\u5bfc\u81f4\u8131\u51fa\u72b6\u6001\u3002 \u5982\u679c\u611f\u89c9\u601d\u8def\u6709\u70b9\u6df7\u4e71\u4e86\uff0c\u6216\u8005\u8bf4\u5361\u5728\u5173\u952e\u70b9\u4f46\u662f\u4e0d\u77e5\u9053\u600e\u4e48\u505a\u4e86\uff0c\u4e5f\u9700\u8981\u91cd\u65b0\u7406\u4e00\u4e0b\u601d\u8def\uff0c\u800c\u4e14\u4e0d\u80fd\u592a\u5feb\u76f4\u63a5\u8fc7\u8fc7\u53bb\uff0c\u6162\u4e00\u70b9\uff0c\u4e0d\u7740\u6025\u3002","title":"0x03. \u601d\u8def\u7684\u5ef6\u7eed\u3001\u5207\u6362\u4ee5\u53ca\u601d\u7ef4\u7a7a\u767d\u7a97\u53e3"},{"location":"misc/antontrygubO_o/#0x10","text":"","title":"0x10. \u6742\u9879"},{"location":"misc/antontrygubO_o/#0x11","text":"\u6b63\u5e38\u60f3\u6cd5\u5176\u5b9e\u5e94\u8be5\u662f\uff0c\u5bf9\u4e8e\u4e00\u770b\u5c31\u662f\u8d2a\u5fc3\uff0c\u4f46\u662f\u7b56\u7565\u4e0d\u660e\u663e\u7684\u9898\uff0c\u5e94\u8be5\u628a\u6240\u6709\u53ef\u80fd\u7b56\u7565\u62ff\u51fa\u6765\uff0c\u4e0d\u7136\u53cd\u8bc1\uff0c\u4e0d\u7136 exc arg\uff0c\u4e0d\u7136\u8303\u56f4\u653e\u7f29\uff0c\u53cd\u6b63\u5c31\u5e94\u8be5\u6c42\u51fa\u6765\u4ec0\u4e48\u60c5\u51b5\u4e0b\u4ec0\u4e48\u6700\u4f18\uff0c\u7136\u540e\u518d\u6765\u8003\u8651\u600e\u4e48\u5199\u4ee3\u7801\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u8981\u786e\u4fdd\u4f60\u7684\u7ed3\u8bba\u7684\u6b63\u786e\u548c\u5408\u7406\u3002 \u800c\u4e0d\u662f\u4e00\u4e2a\u52b2\u7684\u778e\u60f3\u7ed3\u8bba\uff0c\u8fd9\u6837\u547d\u4e2d\u6548\u7387\u5f88\u4f4e\u3002 \u4e00\u79cd\u62c6\u5206\u7684\u8d2a\u5fc3\u601d\u60f3\uff1a\u53ef\u4ee5\u6309\u7167\u67d0\u79cd\u201c\u91cd\u8981\u7a0b\u5ea6\u201d\u5206\u5f00\u8003\u8651\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u60c5\u51b5\u5206\u5f00\u8003\u8651\uff0c\u6700\u540e\u76f4\u63a5\u66b4\u529b\u590d\u5408\uff1a THUPC2023-pre-A -\u5927\u5bcc\u7fc1 \u5982\u679c\u4e00\u4e2a\u9898\uff0c\u6ca1\u6cd5\u5f88\u597d\u7684\u901a\u8fc7\u8d2a\u5fc3\u6765\u5feb\u901f\u786e\u5b9a\u4e00\u4e9b\u5fc5\u9009\u7b56\u7565\uff0c\u6216\u8005\u8bf4\u6392\u9664\u5197\u6742\uff08\u4e5f\u5c31\u662f\u6709\u4e0d\u5c11\u7279\u4f8b\uff09\uff0c\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u76f4\u63a5\u679a\u4e3e\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5bf9\u4ed6\u76f4\u63a5\u901a\u8fc7\u66b4\u529b\u6216\u8005\u7ef4\u62a4\u4fe1\u606f\u7b97\u7b54\u6848\uff1a CF1801B - Buying gifts \uff0c 230322C-T2-Brackets \u3002\u6216\u8005\u662f\u6211\u4eec\u5c31\u76f4\u63a5\u8003\u8651 dp\uff1a CF1801C-Music Festival (\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8003\u8651\u5728\u6574\u4e2a\u72b6\u6001\u7a7a\u95f4\u91cc\u53d6\u6700\u4f18\u89e3\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u52b2\u7684\u8003\u8651\u5c40\u90e8\u6700\u4f18\u89e3)","title":"0x11. \u8d2a\u5fc3"},{"location":"misc/antontrygubO_o/#0x12","text":"\u5176\u5b9e\u6784\u9020\u5c5e\u4e8e\u6bd4\u8f83 adhoc \u7684\u9898\u76ee\uff0c\u4e0d\u8fc7\u8fd8\u662f\u5b58\u5728\u4e00\u5b9a\u7684\u5957\u8def\u3002 \u5047\u8bbe\u7b54\u6848\u5b58\u5728\uff0c\u5e94\u8be5\u662f\u600e\u4e48\u6837\u7684\uff1f \u90a3\u4e48\uff0c\u7b54\u6848\u4e0d\u5b58\u5728\u7684\u65f6\u5019\u5e94\u8be5\u662f\u600e\u4e48\u6837\uff1f \u6709\u6ca1\u6709\u4ec0\u4e48\u7279\u6b8a\u7684\u65b9\u5f0f\uff0c\u80fd\u591f\u8ba9\u6761\u4ef6\u88ab\u5f88\u597d\u7684\u6ee1\u8db3\uff1f \u53ef\u4e0d\u53ef\u4ee5\u653e\u5bbd\u6216\u8005\u7f29\u5c0f\u9898\u76ee\u7684\u9650\u5236\u4ee5\u4fbf\u66f4\u597d\u7684\u6784\u9020\uff1f","title":"0x12. \u6784\u9020"},{"location":"misc/antontrygubO_o/#0x13","text":"\u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217\u505a\u5f88\u591a\u4e2a independent problem \u7684\u65f6\u5019\u4e00\u822c\u90fd\u4f1a\u8981\u8003\u8651\u4ece\u4e0a\u4e00\u4e2a\u72b6\u6001\u7ee7\u627f\uff0c\u6216\u8005\u662f\u8003\u8651\u5148\u6574\u4f53\u505a\u4e00\u904d\u518d\u8ba1\u7b97 ignore \u4e00\u4e9b\u64cd\u4f5c\u4e4b\u540e\u7684\u5f71\u54cd\u4e4b\u7c7b\u7684 \uff1a Least Elements \uff0c 230203C-T2-\u6392\u5217 \u3002 \u5982\u679c\u662f\u901a\u8fc7\u6253\u8868\u627e\u89c4\u5f8b\uff0c\u627e\u5230\u4e86 \\(k = c\\) \uff08\u5e38\u6570\uff09\u7684\u89c4\u5f8b\uff0c\u53ef\u4ee5\u8003\u8651\u628a\u5f0f\u5b50\u4e2d\u7684\u5e38\u6570\u9879\u6362\u6210 \\(k\\) \u76f8\u5173\u7684\u5f0f\u5b50\uff0c\u8fdb\u800c\u63a8\u51fa\u901a\u9879\u516c\u5f0f\uff1a THUPC2023-pre-B - \u62e7\u87ba\u4e1d \u6709\u4e9b\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5ffd\u7565\u90e8\u5206\u9650\u5236\uff0c\u76f4\u63a5\u5bf9\u4e8e\u4e00\u90e8\u5206\u9650\u5236\u505a\u5b8c\uff0c\u7136\u540e\u518d\u4e00\u4e00\u8c03\u6574\u6ee1\u8db3\u5176\u5b83\u9650\u5236\uff0c\u4e0d\u8fc7\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u901a\u5e38\u5c31\u53ef\u4ee5\u770b\u51fa\u590d\u5408\u540e\u7684\u505a\u6cd5\u4e86\uff1a Lost Cows \u5bf9\u4e8e\u4e00\u4e2a\u4f1a\u8df3\u6765\u8df3\u53bb\uff0c\u7b97\u4e00\u4e0b\u65b9\u6848\u6570\uff0c\u7ecf\u8fc7\u7684\u8def\u5f84\u957f\u5ea6\u4e4b\u7c7b\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u60f3\u5230\u5229\u7528\u500d\u589e\u7ef4\u62a4\uff1a CF1809F - Traveling in Berland \uff08\u8fd9\u9898\u9898\u89e3\u8fd8\u6ca1\u5199\uff09\u3002 \u5982\u679c\u4e00\u4e2a\u95ee\u9898\u8981\u4f60\u5408\u5e76\u4e00\u5806\u4e1c\u897f\uff0c\u800c\u4f60\u53ea\u4f1a\u66b4\u529b\uff0c\u8bf7\u52a1\u5fc5\u76f4\u63a5\u542f\u53d1\u5f0f\u5408\u5e76\uff1a 230331C-T2-Favorite Colors \u3002 \u7c7b\u4f3c CDQ \u548c\u70b9\u5206\u6cbb\u7684\u8fd9\u79cd\u201c\u53ea\u8003\u8651\u4e00\u79cd\u7b80\u5355\u60c5\u51b5\uff0c\u5176\u4ed6\u5206\u6cbb\u5904\u7406\u201d\u7684\u601d\u60f3\uff0c\u53ef\u4ee5\u591a\u62ff\u6765\u601d\u8003\u601d\u8003\u3002","title":"0x13. \u4e71\u641e"},{"location":"misc/antontrygubO_o/#0x20","text":"\u5efa\u8bae\u5148\u9605\u8bfb \u5173\u4e8e dp \u7684\u4e00\u4e9b\u6ce8\u610f\u4e8b\u9879","title":"0x20. \u52a8\u6001\u89c4\u5212"},{"location":"misc/antontrygubO_o/#0x21","text":"\u9636\u6bb5\u5176\u5b9e\u5f88\u597d\u786e\u5b9a\uff0c\u524d \\(i\\) \uff0c \\(u\\) \u7684\u5b50\u6811\u8fd9\u79cd\u662f\u6bd4\u8f83\u5e38\u89c1\u7684\uff0cFloyd \u7684 \\(k\\) \u4e3a\u9636\u6bb5\u7b97\u662f\u4e00\u79cd\u6bd4\u8f83\u7279\u6b8a\u7684\u9636\u6bb5\uff0c\u4e0d\u8fc7\u5927\u5bb6\u90fd\u77e5\u9053\u4e86\u5c31\u4e0d\u5199\u4e86\u3002 \u5982\u679c\u9898\u76ee\u7ed9\u51fa\u7684\u6761\u4ef6\u65e0\u6cd5\u4ee5\u7ebf\u6027\u7684\u987a\u5e8f\u4f5c\u4e3a\u9636\u6bb5\uff0c\u6bd4\u5982 Flexible String Revisit \u8fd9\u6837\u8981\u5728\u5e8f\u5217\u4e0a\u968f\u673a\u9009\u62e9\u7684\uff0c\u4e0d\u7136\u5c31\u8003\u8651\u6bcf\u4e00\u6b65\u7684\u4ee3\u4ef7\uff08\u8fd9\u9898\u662f\u4ece \\(i\\) \u4e2a\u4e0d\u540c\u53d8\u5316\u5230 \\(i - 1\\) \u4e2a\u4e0d\u540c\u4e3a\u4e00\u6b65\uff09\uff0c\u4e0d\u7136\u5c31\u8003\u8651\u7c7b\u4f3c\u72b6\u538b\u62c6\u5206\u8fd9\u79cd\u3002","title":"0x21. \u786e\u5b9a\u9636\u6bb5"},{"location":"misc/antontrygubO_o/#0x22","text":"\u4e00\u822c\u6765\u8bf4\u53ea\u9700\u8981\u63d0\u53d6\u9898\u76ee\u4e2d\u7684\u8981\u7d20\uff0c\u7ed3\u5408\u9636\u6bb5\u8bbe\u8ba1\u72b6\u6001\u5c31\u53ef\u4ee5\u3002 \u5e38\u89c1\u7684 dp \u72b6\u6001\u65e0\u975e\u5c31\u662f\u524d \\(i\\) \u524d \\(j\\) \uff0c \\(u\\) \u7684\u5b50\u6811\uff0c\u72b6\u6001\u4e3a \\(msk\\) \uff0c\u8d70\u5230 \\(pos\\) \u7684\u671f\u671b\u8fd9\u6837\uff0c\u770b\u770b /algor/dp \u91cc\u9762\u7684\u4e1c\u897f\u5c31\u884c\u4e86\u3002 \u4e0d\u8fc7\u5f88\u591a\u65f6\u5019\u9650\u5236\u6761\u4ef6\u5206\u4e24\u7c7b\uff0c\u4e00\u7c7b\u53ef\u4ee5\u5728\u72b6\u6001\u4e2d\u8868\u8fbe\uff0c\u4e00\u7c7b\u53ef\u4ee5\u5728\u8f6c\u79fb\u4e2d\u8868\u8fbe\uff0c\u8fd9\u4e2a\u63a5\u4e0b\u6765\u4f1a\u8bf4\u3002 \u80fd\u5728\u72b6\u6001\u4e2d\u8868\u8fbe\u7684\u4e00\u822c\u662f\u5f53\u524d\u4f4d\u7f6e\u7684\u4e00\u4e9b\u9650\u5236\uff0c\u6bd4\u5982\u5f53\u524d\u5df2\u7ecf\u9009\u4e86 \\(j\\) \u4e2a\u8fd9\u79cd\u3002 \u8fd9\u91cc\u8bb0\u5f55\u4e86\u4e00\u4e9b\u5bf9\u6211\u6765\u8bf4\u66fe\u7ecf\u4e0d\u662f\u5f88\u5e38\u89c4\u7684\u60f3\u6cd5\u3002 \u6709\u4e9b\u9898\u76ee\u9700\u8981\u8003\u8651\uff0c\u5728\u72b6\u6001\u4e2d\u94a6\u5b9a\u524d\u9762\u4e00\u6bb5\u4e00\u5b9a\u5408\u6cd5\uff0c\u7136\u540e\u53ea\u8003\u8651\u51b3\u7b56\u65f6\u4f1a\u6709\u53d8\u5316\u7684\u90e8\u5206\uff0c\u8fd9\u79cd\u4e00\u822c\u5728\u505a\u8f6c\u79fb\u7684\u65f6\u5019\u8981\u5c0f\u5fc3\u8c28\u614e\uff0c\u4e0d\u8981\u6f0f\u6389\u4e86\u9650\u5236\u6761\u4ef6\u3002 \u5982\u679c\u9898\u76ee\u4e2d\u7684\u8981\u7d20\u6bd4\u8f83\u591a\uff0c\u4f46\u662f\u77e5\u9053\u4e00\u5b9a\u7684\u4fe1\u606f\u4e4b\u540e\u53ef\u4ee5\u63a8\u51fa\u5269\u4e0b\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u72b6\u6001\u91cc\u7701\u53bb\u5bf9\u5e94\u7684\u7ef4\u5ea6\uff1a Mobile Service \u7ed9\u4e00\u4e2a\u5e8f\u5217\uff0c\u8981\u6c42\u5c06\u5176\u5206\u6210\u82e5\u5e72\u4e2a\u5b50\u6bb5\uff0c\u6c42\u67d0\u4e2a\u4ee3\u4ef7\u7684\u6700\u5927\u503c\u8fd9\u4e00\u7c7b\u95ee\u9898\uff0c\u5982\u679c\u9898\u76ee\u6ca1\u6709\u9650\u5236\u4f60\u9700\u8981\u5206\u591a\u5c11\u6bb5\uff0c\u53ef\u4ee5\u76f4\u63a5\u8bbe\u8ba1 dp \u72b6\u6001\u4e3a\uff0c\u8003\u8651\u524d \\(i\\) \u4e2a\u4f4d\u7f6e\u5206\u5272\u6210\u82e5\u5e72\u6bb5\u7684\u4ee3\u4ef7\u6700\u5927\u662f\u591a\u5c11\uff1a Optimal Partition \uff0c \u4efb\u52a1\u5b89\u6392","title":"0x22. \u72b6\u6001\u8bbe\u8ba1"},{"location":"misc/antontrygubO_o/#0x23","text":"\u72b6\u6001\u8f6c\u79fb\u4e00\u822c\u53d6\u51b3\u4e8e\u72b6\u6001\u7684\u5b9a\u4e49\uff0c\u5c31\u8003\u8651\u600e\u4e48\u8ba9\u72b6\u6001\u80fd\u8986\u76d6\u6574\u4e2a\u72b6\u6001\u7a7a\u95f4\uff0c\u4e0d\u91cd\u590d\u4e0d\u6f0f\u7b97\u5c31\u53ef\u4ee5\u3002 \u5982\u679c\u72b6\u6001\u786e\u5b9e\u600e\u4e48\u641e\u90fd\u4f1a\u91cd\u590d\uff0c\u53ef\u4ee5\u8003\u8651\u5bb9\u65a5\u4e00\u4e0b\u3002 \u5982\u679c\u4f1a\u6f0f\u72b6\u6001\uff0c\u601d\u8003\u4e00\u4e0b\u662f\u4e0d\u662f\u9636\u6bb5\u6709\u95ee\u9898\uff0c\u9700\u4e0d\u9700\u8981\u5bf9\u539f\u95ee\u9898\u505a\u7c7b\u4f3c Exchange Argument \u7684\u5904\u7406\uff1f\uff1a Zabuton \u6216\u8005\u662f\u4e0d\u662f\u72b6\u6001\u672c\u8eab\u5c31\u6709\u95ee\u9898\uff1f \u6709\u4e9b\u9650\u5236\u6761\u4ef6\u9700\u8981\u5728\u72b6\u6001\u8f6c\u79fb\u7684\u65f6\u5019\u8fdb\u884c\u4f18\u5316\uff0c\u8fd9\u4e2a\u5c31\u4e0d\u540c\u4e8e\u72b6\u6001\u8bbe\u8ba1\u4e2d\u7684\u9650\u5236\u6761\u4ef6\u4e86\uff0c\u6240\u4ee5\u5728\u8003\u8651\u8f6c\u79fb\u7684\u65f6\u5019\uff0c\u5982\u679c\u6ca1\u6709\u601d\u8def\u4e86\uff0c\u53ef\u4ee5\u591a\u770b\u770b\u9898\u9762\uff0c\u518d\u627e\u627e\u6709\u6ca1\u6709\u6f0f\u6389\u7684\u9650\u5236\u6761\u4ef6\u3002 \u671f\u671b dp \u5728\u8f6c\u79fb\u7684\u65f6\u5019\u53ef\u4ee5\u628a\u671f\u671b\u5f53\u6210\u968f\u673a\u53d8\u91cf\u7684\u4e00\u79cd\u53d6\u503c\uff0c\u539f\u7406\u662f\u4e58\u6cd5\u5206\u914d\u5f8b\uff1a Ilya and Escalator \uff0c\u5177\u4f53\u53ef\u4ee5\u770b\u671f\u671b dp \u7684\u8bb2\u7a3f\u3002 \u6362\u6839 dp \u7684\u65f6\u5019\u9700\u8981\u8003\u8651\u6e05\u695a\uff0c\u7b2c\u4e8c\u4e2a dp \u6570\u7ec4\u5230\u5e95\u4ece\u4ec0\u4e48\u8f6c\u79fb\u8fc7\u6765\uff0c\u6709\u6ca1\u6709\u7b97\u91cd\u590d\u7684\u90e8\u5206\uff0c\u5982\u679c\u53d6\u6a21\u8fd8\u8981\u8003\u8651\u662f\u5426\u5b58\u5728\u9006\u5143\u4e4b\u7c7b\u7684\uff1a Subtree \u6709\u4e9b dp \u867d\u7136\u9636\u6bb5\u662f\u4e0b\u6807\uff0c\u4f46\u662f\u5b83\u8f6c\u79fb\u7684\u65f6\u5019\uff0c\u4e3a\u4e86\u51b3\u7b56\u65b9\u4fbf\uff0c\u9700\u8981\u66f4\u6539\u4e00\u4e0b\u7b49\u53f7\u5de6\u8fb9\u7684\u4e0b\u6807\uff0c\u65b9\u4fbf\u8f6c\u79fb\uff0c\u4e0d\u7136\u6211\u4eec\u4e0d\u597d\u786e\u5b9a\u8fd9\u4e2a\u51b3\u7b56\u5230\u5e95\u5bf9\u7b54\u6848\u4ea7\u751f\u4e86\u4ec0\u4e48\u8d21\u732e\uff1a Cleaning Shifts \u5982\u679c dp \u72b6\u6001\u76f4\u63a5\u8f6c\u79fb\u5f88\u9ebb\u70e6\uff0c\u6bd4\u5982\u90a3\u79cd\u6709\u5173\u8054\u6027\u7684\u72b6\u538b dp\uff0c\u8003\u8651\u4e00\u4e0b\u7b49\u4ef7\u7684\u8f6c\u5316\uff1f 2301113C-T4-coin \u5982\u679c\u662f\u6811\u5f62 dp\uff0c\u53ef\u4ee5\u5229\u7528 dfs \u5e8f\u7684\u6027\u8d28\uff0c\u628a\u8282\u70b9\u5206\u6210\u4e24\u7c7b\uff0c\u7528\u4e8e\u5f88\u597d\u7684\u8868\u8fbe\u4e00\u4e9b\u7956\u5148\u5173\u7cfb\uff0c\u5f88\u591a\u65f6\u5019\u8fd8\u53ef\u4ee5\u7528\u6765\u51cf\u5c11\u679a\u4e3e\uff0c\u76f4\u63a5\u4e00\u6b65\u5230\u4f4d\uff1a 230224C-T4-\u8fa3\u6912 \u5982\u679c\u5728\u6811\u4e0a\u4f7f\u7528\u659c\u7387\u4f18\u5316\uff0c\u8981\u8bb0\u5f97\u51fa\u5b50\u6811\u4e4b\u540e\u56de\u6eaf\u51f8\u58f3\u7684\u72b6\u6001\uff1a Harbingers","title":"0x23. \u72b6\u6001\u8f6c\u79fb"},{"location":"misc/antontrygubO_o/#0x24","text":"\u8fd9\u4e2a\uff0c\u5176\u5b9e\u5c31\u662f\u65b9\u7a0b\u63a8\u51fa\u6765\u7684\uff0c\u8981\u5199\u4ee3\u7801\u7684\u65f6\u5019\u9700\u8981\u8003\u8651\u7684\u4e86\u3002 \u5f88\u591a\u65f6\u5019\u9700\u8981\u8003\u8651\u9ad8\u65af\u6d88\u5143\u6216\u8005\u66f4\u6539\u679a\u4e3e\u987a\u5e8f\uff0c\u5982\u679c\u8fd9\u6837\u8fd8\u662f\u6ca1\u7528\u5927\u6982\u7387\u662f\u72b6\u6001\u8bbe\u8ba1\u5c31\u51fa\u4e8b\u4e86\uff1a [HNOI2013] \u6e38\u8d70 \u671f\u671b dp \u5f88\u591a\u65f6\u5019\u8981\u8003\u8651\u5012\u63a8\uff0c\u4e0d\u7136\u5bb9\u6613\u56e0\u4e3a\u72b6\u6001\u4e4b\u95f4\u7684\u4f9d\u8d56\u6210\u73af\uff0c\u6216\u8005\u56e0\u4e3a\u7ec8\u6b62\u72b6\u6001\u4e0d\u552f\u4e00\uff0c\u751a\u81f3\u56e0\u4e3a\u6982\u7387\u4e0d\u597d\u8ba1\u7b97\u800c\u5bfc\u81f4\u4e0d\u5fc5\u8981\u7684\u9ebb\u70e6\uff1a Gotta Go Fast","title":"0x24. \u540e\u6548\u6027\u76f8\u5173"},{"location":"misc/antontrygubO_o/#0x25","text":"\u8fd9\u4e2a\u5176\u5b9e\u5c31\u5206\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u8003\u8651\u4f18\u5316\u8f6c\u79fb\uff08\u51b3\u7b56\u96c6\u5408\uff09\uff0c\u4e00\u79cd\u662f\u4f18\u5316\u72b6\u6001\u3002\uff08\u81f3\u5c11\u4ee5\u76ee\u524d\u6211\u6240\u77e5\u9053\u7684\u6765\u770b\uff09 \u524d\u8005\u4e00\u822c\u662f \u6570\u636e\u7ed3\u6784\u4f18\u5316 dp \uff08\u5355\u8c03\u961f\u5217\u4e5f\u662f\u6570\u636e\u7ed3\u6784\u554a\uff09\uff0c\u4e5f\u6709\u8003\u8651\u89c2\u5bdf\u9650\u5236\u6761\u4ef6\u7684\u7279\u6b8a\u6027\u6765\u53bb\u9664\u5197\u6742\u72b6\u6001\u7684\uff1a Xor-Subsequence (easy version) \uff0c\u4ea6\u6216\u8005\u662f \u659c\u7387\u4f18\u5316 dp \u4e5f\u6709\u5229\u7528\u8d39\u7528\u63d0\u524d\u8ba1\u7b97\u7684\u601d\u60f3\u7684\uff1a \u4efb\u52a1\u5b89\u6392 \uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7406\u89e3\u6210\u201c\u61d2\u64cd\u4f5c\u201d\u7684\u53cd\u65b9\u5411\u3002 \u540e\u8005\u5176\u5b9e\u4e00\u822c\u5728\u72b6\u6001\u8bbe\u8ba1\u7684\u65f6\u5019\u5c31\u505a\u4e86\uff0c\u8fd9\u91cc\u4e0d\u591a\u63d0\u3002","title":"0x25. \u4f18\u5316\u8f6c\u79fb"},{"location":"misc/antontrygubO_o/#0x26","text":"\u5bf9\u4e8e\u4e00\u4e9b\u7279\u5b9a\u7684\u95ee\u9898\uff0c\u5b83\u4eec\u7684 dp \u8bbe\u8ba1\u662f\u975e\u5e38\u5957\u8def\u5316\u7684\uff0c\u6240\u4ee5\u5355\u72ec\u63d0\u51fa\u6765\uff1a \u5bf9\u4e8e\u672c\u8d28\u4e0d\u540c\u5b50\u5e8f\u5217\uff0c\u4e00\u822c\u90fd\u662f\u8bbe \\(dp(i)\\) \u8003\u8651\u524d \\(i\\) \u4e2a\u4f4d\u7f6e\u7684\u7b54\u6848\uff0c\u7136\u540e\u5bf9\u4e8e\u5f53\u524d\u4f4d\u7f6e\u5206\u7c7b\u8ba8\u8bba\u5373\u53ef\uff1a 230115C-T4-\u7f8e\u98df \u5bf9\u4e8e\u4e00\u4e2a\u6392\u5217\uff0c\u7b97\u4e00\u4e9b\u65b9\u6848\u6570\u7684\u8ba1\u6570 dp\uff0c\u4ed6\u7684\u56fa\u6709\u5957\u8def\u5c31\u662f\u8003\u8651\u4e00\u4e2a\u4e00\u4e2a\u63d2\u5165\uff1a 230111C-T4-\u5c0fW\u4e0e\u5927\u6570 \u5982\u679c\u662f\u8054\u901a\u5757\u4e58\u79ef\uff0c\u8003\u8651\u5b83\u7684\u7ec4\u5408\u610f\u4e49\uff0c\u672c\u8d28\u662f\u5c06\u6811\u5212\u5206\u6210\u82e5\u5e72\u4e2a\u8054\u901a\u5757\uff0c\u8003\u8651\u6bcf\u4e2a\u8054\u901a\u5757\u9009\u4e00\u4e2a\u7684\u65b9\u6848\u6570\uff1a 230322C-T4-Mushroom","title":"0x26. \u5404\u79cd\u6a21\u578b"},{"location":"misc/antontrygubO_o/#0x30","text":"","title":"0x30. \u6570\u636e\u7ed3\u6784"},{"location":"misc/antontrygubO_o/#0x31","text":"\u5bf9\u4e8e\u4e00\u4e2a\u6bd4\u8f83\u590d\u6742\u7684\uff0c\u52a8\u6001\u7ef4\u62a4\u7684\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u5229\u7528 CDQ \u5206\u6cbb\uff0c\u5c06\u52a8\u6001\u7684\u95ee\u9898\u8f6c\u5316\u4e3a\u9759\u6001\u7684\uff0c\u5176\u539f\u7406\u662f\u5229\u7528\u5206\u6cbb\u7684\u601d\u60f3\u5c06\u4e00\u5806\u52a8\u6001\u95ee\u9898\u62c6\u5206\u6210\u51e0\u4e2a\u5c0f\u7684\u9759\u6001\u95ee\u9898\u3002","title":"0x31. \u8f6c\u5316"},{"location":"misc/antontrygubO_o/#0x32","text":"\u7ef4\u62a4\u7684\u4fe1\u606f\u7684\u533a\u522b\u4f1a\u5bfc\u81f4\u4ee3\u7801\u5b9e\u73b0\u590d\u6742\u5ea6\u7684\u533a\u522b\u3002 \u5982 Buy tickets \u8fd9\u4e00\u9898\uff0c\u5982\u679c\u76f4\u63a5\u7ef4\u62a4\u6574\u4e2a\u5e8f\u5217\u4f1a\u5f88\u9ebb\u70e6\uff0c\u9700\u8981\u5230\u5904\u5220\u9664\u52a0\u70b9\u4e4b\u7c7b\u7684\uff0c\u5982\u679c\u8fd9\u9898\u6211\u4eec\u9009\u62e9\u4e86\u201c\u7ef4\u62a4\u7a7a\u4f4d\u201d\uff0c\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u7b80\u5355\u7684\u7ebf\u6bb5\u6811\u4e8c\u5206\u4e86\u3002","title":"0x32. \u660e\u786e\u9700\u8981\u7ef4\u62a4\u7684\u4fe1\u606f"},{"location":"misc/antontrygubO_o/#0x33","text":"\u6570\u636e\u7ed3\u6784\u7684\u4e0d\u540c\u5f80\u5f80\u4f1a\u76f4\u63a5\u51b3\u5b9a\u4ee3\u7801\u5b9e\u73b0\u590d\u6742\u5ea6\u548c\u4f60\u7684\u5fc3\u6001\u3002 \u5982\u679c\u4e00\u4e2a\u95ee\u9898\u4e00\u770b\u5c31\u662f\u6bd4\u8f83\u663e\u7136\u7684 XXX \u677f\u5b50\uff0c\u4f46\u662f\u5b9e\u73b0\u96be\u5ea6\u786e\u5b9e\u592a\u9ad8\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\uff0c\u5728\u5f53\u524d\u7684\u9650\u5236\u4e0b\uff0c\u5b58\u4e0d\u5b58\u5728\u53e6\u4e00\u79cd\u66f4\u5de7\u5999\u7684\u7ef4\u62a4\u65b9\u5f0f\uff1f\u6bd4\u5982\u7ebf\u6bb5\u6811\u4e8c\u5206+\u533a\u95f4 qmax\uff0c\u53ef\u4e0d\u53ef\u4ee5\u76f4\u63a5\u5148 sort \u7136\u540e\u7c7b\u4f3c\u5bf9\u9876\u7684\u4e24\u4e2a set \u7ef4\u62a4\u4e24\u4e2a\u90e8\u5206\uff1f CF1801B - Buying gifts","title":"0x33. \u9009\u62e9\u5408\u9002\u7684\u6570\u636e\u7ed3\u6784"},{"location":"misc/antontrygubO_o/#0x34","text":"","title":"0x34. \u7ef4\u62a4\u65b9\u5f0f/\u600e\u4e48\u9b54\u6539"},{"location":"misc/antontrygubO_o/#0x35","text":"","title":"0x35. \u4e00\u4e9b\u6a21\u578b"},{"location":"misc/antontrygubO_o/#0x40","text":"\u9e3d\u3002","title":"0x40. \u56fe\u8bba"},{"location":"misc/antontrygubO_o/#0x50","text":"Lcm \u7684\u672c\u8d28\u5c31\u662f\uff0c\u5bf9\u4e8e\u6240\u8fd0\u7b97\u7684\u6570\u8d28\u56e0\u6570\u5206\u89e3\uff0c\u8003\u8651\u6bcf\u4e2a\u56e0\u5b50\u51fa\u73b0\u7684\u6700\u9ad8\u6b21\u5e42\uff0c\u7136\u540e\u4e58\u8d77\u6765\uff1a 230331C-T3-Exercise \u3002 \u4e8c\u8fdb\u5236\u4e0b\u52a0\u4e00\u7684\u672c\u8d28\u5c31\u662f\uff0c\u627e\u5230\u4f4e\u4f4d\u7684\u7b2c\u4e00\u4e2a 0\uff0c\u53d8\u6210 1 \u4e4b\u540e\u628a\u4e4b\u540e\u7684 1 \u5168\u90e8\u53d8\u6210 0\uff1a 01Trie \u7ef4\u62a4\u5168\u5c40\u52a0\u4e00 .","title":"0x50. \u6570\u5b66"},{"location":"misc/antontrygubO_o/#0x60","text":"\u9e3d\u3002","title":"0x60. \u5b57\u7b26\u4e32"},{"location":"misc/flower/","text":"\u5b58\u653e\u9c9c\u82b1\u548c\u968f\u8bb0\uff0c\u4e0d\u5982\u8bf4\u662f\u7528\u6765\u53d1\u7535\u7684\u3002 \u6709\u4e9b\u968f\u8bb0\u7684\u8bc4\u8bba\u653e\u5728\u4e86 LuoguBlog \u4e0a\uff0c\u613f\u610f\u770b\u81ea\u5df1\u7ffb\u3002 \u9664\u4e86 Index \u4ee5\u5916\u7684\uff0c\u6240\u6709 flower \u76ee\u5f55\u4e0b\u7684 post \u90fd\u4e0a\u4e86\u9501\uff0c\u5bc6\u7801\u662f\u7edf\u4e00\u7684\u3002 \u9700\u8981\u9605\u89c8\u7684\u8bdd\u8bf7\u7559\u8a00\u6216\u8005\u662f qq \u8054\u7cfb\u6211\uff0c\u8054\u7cfb\u65b9\u5f0f\u5728\u9875\u811a\u3002 \u6216\u8005\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u731c\u4e00\u731c\u5bc6\u7801\uff0c\u5bc6\u7801\u662f\u4e00\u79cd\u5e38\u89c1\u7c7b\u578b\u540d\u3002","title":"Index"},{"location":"misc/gdb-usage/","text":"\u8bb0\u5f97\u52a0\u4e0a -g \u3002 \u5e38\u7528\u547d\u4ee4\uff08\u8f6c\u81ea OI wiki\uff09\uff1a list \uff08 l \uff09\uff1a\u5217\u51fa\u7a0b\u5e8f\u6e90\u4ee3\u7801\uff0c\u5982 l main \u6307\u5b9a\u5217\u51fa main \u51fd\u6570\u9644\u8fd1\u7684\u82e5\u5e72\u884c\u4ee3\u7801\u3002 break \uff08 b \uff09\uff1a\u8bbe\u7f6e\u65ad\u70b9\uff0c\u5982 b main \u8868\u793a\u5728 main \u51fd\u6570\u5904\u8bbe\u7f6e\u65ad\u70b9\u3002 if <CONDITION> \uff1a\u5982\u679c\u6ee1\u8db3 \u6761\u4ef6\uff0c\u5219\u8bbe\u7f6e\u65ad\u70b9\uff0c\u5982 b 137 if i == n && j == m run \uff08 r \uff09\uff1a\u8fd0\u884c\u7a0b\u5e8f\u76f4\u5230\u7a0b\u5e8f\u7ed3\u675f\u8fd0\u884c\u6216\u9047\u5230\u65ad\u70b9\u3002 continue \uff08 c \uff09\uff1a\u5728\u7a0b\u5e8f\u9047\u5230\u65ad\u70b9\u540e\u7ee7\u7eed\u6267\u884c\uff0c\u76f4\u5230\u7a0b\u5e8f\u7ed3\u675f\u8fd0\u884c\u6216\u5230\u8fbe\u4e0b\u4e00\u4e2a\u65ad\u70b9\u3002 if <CONDITION> \uff1a\u7528\u6cd5\u540c b if next \uff08 n \uff09\uff1a\u6267\u884c\u5f53\u524d\u884c\u8bed\u53e5\uff0c\u5982\u679c\u5f53\u524d\u884c\u6709\u51fd\u6570\u8c03\u7528\uff0c\u5219\u5c06\u5176\u89c6\u4e3a\u4e00\u4e2a\u6574\u4f53\u6267\u884c\u3002 if <CONDITION> \uff1a\u7528\u6cd5\u540c\u4e0a\u3002 step \uff08 s \uff09\uff1a\u6267\u884c\u5f53\u524d\u884c\u8bed\u53e5\uff0c\u5982\u679c\u5f53\u524d\u884c\u6709\u51fd\u6570\u8c03\u7528\uff0c\u5219\u8fdb\u5165\u8be5\u51fd\u6570\u5185\u90e8\u3002 finish \uff08 fin \uff09\uff1a\u7ee7\u7eed\u6267\u884c\u81f3\u5f53\u524d\u51fd\u6570\u8fd4\u56de\u3002 call \uff1a\u8c03\u7528\u67d0\u4e2a\u51fd\u6570\uff0c\u4f8b\u5982\uff1a call f(2) \uff08\u4ee5\u53c2\u6570 2 \u8c03\u7528\u51fd\u6570 f\uff09\u3002 quit \uff08 q \uff09\uff1a\u9000\u51fa gdb\u3002 display \uff08 disp \uff09\uff1a\u6307\u5b9a\u7a0b\u5e8f\u6682\u505c\u65f6\u663e\u793a\u7684\u8868\u8fbe\u5f0f\u3002 print \uff08 p \uff09\uff1a\u6253\u5370\u8868\u8fbe\u5f0f\u7684\u503c\u3002 delete display <NUM> \uff1a\u5220\u9664\u7b2c \u4e2a\u8868\u8fbe\u5f0f clear <NUM/FUNC> \uff1a\u5220\u9664\u65ad\u70b9 display \u548c print \u6307\u4ee4\u90fd\u652f\u6301\u63a7\u5236\u8f93\u51fa\u683c\u5f0f\uff0c\u5176\u65b9\u6cd5\u662f\u5728\u547d\u4ee4\u540e\u7d27\u8ddf / \u4e0e\u683c\u5f0f\u5b57\u7b26\uff0c\u4f8b\u5982 p/d test \uff08\u6309\u7167\u5341\u8fdb\u5236\u6253\u5370\u53d8\u91cf test \u7684\u503c\uff09\uff0c \u652f\u6301\u7684\u683c\u5f0f\u5b57\u7b26\u6709\uff1a \u683c\u5f0f\u5b57\u7b26 \u5bf9\u5e94\u683c\u5f0f d \u6309\u5341\u8fdb\u5236\u683c\u5f0f\u663e\u793a\u53d8\u91cf x \u6309\u5341\u516d\u8fdb\u5236\u683c\u5f0f\u663e\u793a\u53d8\u91cf a \u6309\u5341\u516d\u8fdb\u5236\u683c\u5f0f\u663e\u793a\u53d8\u91cf t \u6309\u4e8c\u8fdb\u5236\u683c\u5f0f\u663e\u793a\u53d8\u91cf c \u6309\u5b57\u7b26\u683c\u5f0f\u663e\u793a\u53d8\u91cf f \u6309\u6d6e\u70b9\u6570\u683c\u5f0f\u663e\u793a\u53d8\u91cf u \u6309\u5341\u8fdb\u5236\u683c\u5f0f\u663e\u793a\u65e0\u7b26\u53f7\u6574\u578b o \u6309\u516b\u8fdb\u5236\u683c\u5f0f\u663e\u793a\u53d8\u91cf \u6ce8\u610f\u5982\u679c\u6709 breakpoint \u4e00\u5b9a\u4f18\u5148\u5728 breakpoint \u505c\u4e0b\uff0c\u800c\u4e0d\u662f\u53d6\u51b3\u4e8e\u4f7f\u7528\u4e86 n \u8fd8\u662f s\u3002 \u9047\u5230 breakpoint \u4f1a\u5728\u90a3\u4e00\u884c\u505c\u4e0b\u6765\uff0c\u7136\u540e\u663e\u793a\u4ee3\u7801\u3002 \u4e00\u4e9b\u5e38\u89c1\u5f02\u5e38\u8fd4\u56de\u503c\uff1a SIGFPE (8) \uff1a\u9664\u96f6\u5f02\u5e38\u3002 SIGSEGV (11) \uff1a\u65e0\u6548\u5185\u5b58\uff0c\u65e0\u6743\u9650\u5199\u5165\u3002 SIGILL (4) \uff1a\u5806\u6808\u6ea2\u51fa\uff0c\u6570\u7ec4\u8d8a\u754c\u7834\u574f\u5806\u6808\u3002","title":"GDB \u4f7f\u7528\u6307\u5317"},{"location":"misc/menu/","text":"\u6570\u5b66\u90e8\u5206 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6392\u5217\u7ec4\u5408 \u9e3d\u5de2\u539f\u7406 \u5bb9\u65a5\u539f\u7406 \u65af\u7279\u6797\u6570 \u5361\u7279\u5170\u6570 \u7b97\u6cd5\u90e8\u5206 \u03c8(\uff40\u2207\u00b4)\u03c8 \u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790 \u6392\u5e8f \u6811\u7684\u904d\u5386 \u8868\u8fbe\u5f0f\u8ba1\u7b97 \u57fa\u7840\u56fe\u8bba\u95ee\u9898 \u8ba1\u7b97\u673a\u539f\u7406\u90e8\u5206 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4f4d\u8fd0\u7b97 \u8fdb\u5236\u8f6c\u5316\uff08\u8fd9\u4e2a\u5495\u5495\u5495\u6389\u4e86\uff09 \u8ba1\u7b97\u673a\u76f8\u5173\uff08\u8fd9\u4e2a\u5495\u5495\u5495\u6389\u4e86\uff09","title":"\u521d\u8d5b\u77e5\u8bc6\u590d\u4e60"},{"location":"misc/menu/#_1","text":"\u6392\u5217\u7ec4\u5408 \u9e3d\u5de2\u539f\u7406 \u5bb9\u65a5\u539f\u7406 \u65af\u7279\u6797\u6570 \u5361\u7279\u5170\u6570","title":"\u6570\u5b66\u90e8\u5206"},{"location":"misc/menu/#_2","text":"\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790 \u6392\u5e8f \u6811\u7684\u904d\u5386 \u8868\u8fbe\u5f0f\u8ba1\u7b97 \u57fa\u7840\u56fe\u8bba\u95ee\u9898","title":"\u7b97\u6cd5\u90e8\u5206"},{"location":"misc/menu/#_3","text":"\u4f4d\u8fd0\u7b97 \u8fdb\u5236\u8f6c\u5316\uff08\u8fd9\u4e2a\u5495\u5495\u5495\u6389\u4e86\uff09 \u8ba1\u7b97\u673a\u76f8\u5173\uff08\u8fd9\u4e2a\u5495\u5495\u5495\u6389\u4e86\uff09","title":"\u8ba1\u7b97\u673a\u539f\u7406\u90e8\u5206"},{"location":"misc/music/","text":"\u53ef\u80fd\u662f\u56e0\u4e3a\u5fc3\u60c5\u5f88\u70e6\u95f7\u5427\uff0c\u6240\u4ee5\u6253\u7b97\u505a\u70b9\u522b\u7684\u4ec0\u4e48\u7f13\u89e3\u4e00\u4e0b\u3002 \u6ca1\u600e\u4e48\u5b66\u8fc7\u4e50\u7406\u4e4b\u7c7b\u7684\u4e1c\u897f\uff0c\u4e13\u4e1a\u672f\u8bed\u4e5f\u4e0d\u61c2\uff0c\u53ea\u4f1a\u778e\u804a\u804a\u3002 2023.01.08 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4eca\u5929\u5076\u7136\u70b9\u5230\u4e86 sskr \u7684\u4e00\u9996\u672f\u66f2\uff0c\u53ea\u542c\u524d\u594f\u5c31\u518d\u4e5f\u505c\u4e0d\u4e0b\u6765\u4e86\u3002 \u611f\u89c9\u554a\uff0c\u524d\u594f\u8fd9\u6bb5\u65cb\u5f8b\u7b80\u76f4\u662f\u795e\u3002 \u4e5f\u6709\u53ef\u80fd\u662f\u6700\u8fd1\u5fc3\u60c5\u4e0d\u597d\u559c\u6b22\u90a3\u79cd\u7a7a\u7075\u70b9\u7684\uff0c\u6b22\u5feb\u4e00\u70b9\u7684\u65cb\u5f8b\uff0c\u7136\u540e\u521a\u597d\u542c\u5230 sskr \u7684\u672f\u66f2\uff08 \u4e0d\u592a\u597d\u63cf\u8ff0\u8fd9\u6bb5\u65cb\u5f8b\uff0c\u4f46\u662f\u5c31\u662f\u771f\u7684\uff0c\u5b83\u662f\u6709\u79cd\u7a7a\u7075\u7684\u611f\u89c9\uff0c\u6709\u70b9\u5fe7\u4f24\uff0c\u4f46\u662f\u5f88\u7279\u522b\uff0c\u5fc3\u60c5\u5341\u5206\u4f4e\u843d\u7684\u65f6\u5019\u542c\u7740\u7b97\u662f\u4e00\u79cd\u6170\u85c9\u5427\u3002 \u728d\u9640\u591a\u554a\uff0c\u662f\u7f6a\u4eba\u554a\uff0c\u4f46\u662f\u7f6a\u4eba\u4e5f\u662f\u4f1a\u6709\u5584\u5fc3\u7684\u5b58\u5728\u5427\uff1f\u7edd\u5bf9\u7684\u4e8b\u7269\u662f\u4e0d\u5b58\u5728\u7684\u3002 \u6216\u8005\u8bf4\uff0c\u82a5\u5ddd\u7684\u8fd9\u4e2a\u6545\u4e8b\u60f3\u544a\u8bc9\u6211\u7684\uff0c\u4e5f\u6709\u70b9\u90a3\u79cd\uff0c\u4e0d\u8981\u7ed9\u70b9\u9633\u5149\u5c31\u707f\u70c2\u7684\u90a3\u79cd\u610f\u601d\uff1f\u4e0d\u662f\u5f88\u597d\u8bf4\uff0c\u53cd\u6b63\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff0c\u867d\u7136\u662f\u4e00\u6bb5\u6de1\u6de1\u7684\u65cb\u5f8b\uff0c\u4f46\u662f\u80fd\u5199\u51fa\u90a3\u79cd\u82e6\u75db\u611f\uff0c\u5728\u5730\u72f1\u91cc\u707c\u70e7\u7684\u611f\u89c9\u5427\uff0cmiku \u7684\u58f0\u7ebf\u4f3c\u4e4e\u4e5f\u662f\u523b\u610f\u8c03\u6559\u6210\u8fd9\u6837\u7684\u3002 \u611f\u89c9\u81ea\u5df1\u968f\u673a\u8bf4\u8bdd\u7684\u611f\u89c9\uff0c\u5c31\u662f\u5728\u62d9\u52a3\u7684\u6a21\u4eff zun \u6851\uff0c\u662f\u8fd9\u6837\u7684\u5427\u3002 \u55ef\uff0c\u8bf4\u5230\u82e6\u95f7\u7684\u65f6\u5019\u542c\u5230\u7684\u65cb\u5f8b\uff0c\u4e5f\u6709\u8fd9\u4e2a\u5427\uff1a \u6bd4\u8d77\u8718\u86db\u4e1d\uff0c\u8fd9\u9996\u66f2\u5b50\u7684\u65cb\u5f8b\u5e76\u4e0d\u662f\u90a3\u4e48\u6293\u8033\uff0c\u4f46\u662f nameless \u7684\u58f0\u7ebf\u5728\u5f53\u65f6\u4e5f\u7b97\u7ed9\u4e86\u6211\u4e00\u4e2a\u5e73\u590d\u5fc3\u60c5\u7684\u673a\u4f1a\u5427\uff0c\u6211\u8bb0\u5f97\u53ef\u80fd\u662f\u5728\u67d0\u4e2a\u4eba\u7684\u535a\u5ba2\u91cc\u770b\u5230\u7684\uff0c\u597d\u50cf\u53c8\u662f\u5728\u67d0\u4e2a\u7f51\u7ad9\u7ffb\u8d44\u6e90\u7684\u65f6\u5019\u542c\u5230\u7684\uff1f\uff1f\u5fd8\u4e86\uff0c\u7f62\u4e86\u3002 \u8bf4\u8d77\u6765\uff0c\u6211\u542c\u97f3\u6e38\u66f2\u57fa\u672c\u90fd\u662f\u9700\u8981\u67d0\u4e00\u6bb5\u65cb\u5f8b\u7279\u522b\u6293\u8033\u624d\u884c\u7684\uff1f \u6bd4\u5982 Poppy \u7684 climax \u6bb5\uff0cspasmodic \u7684 ending\uff0cPUPA \u7684\u524d\u594f\uff0cSaiko Stronger \u7684 climax\uff0cCrossOver 00:10 \u5de6\u53f3\u7684\u90a3\u6bb5\uff0cEther Strike \u7684\u96f6\u5149\u5439\u5587\u53ed\u6bb5\uff08 \u4f46\u662f\u6709\u4e9b\u66f2\u5b50\u53c8\u6bd4\u8f83\u7279\u522b\uff0c\u6bd4\u5982 Sakura Fubuki\uff0c\u8fd9\u4e2a\u771f\u7684\u662f\u56e0\u4e3a\u6df7\u97f3\u610f\u5916\u7684\u5e72\u51c0\uff0c\u6ca1\u6709\u600e\u4e48\u7528\u548c\u98ce\u4e50\u5668\u5374\u4e00\u80a1\u6a31\u82b1\u6563\u843d\u7684\u5473\u9053\u3002 \u8fd8\u6709 Tempestissmo \u548c IZANA\uff0cApollo\uff0c\u8fd9\u4e9b\u662f\u6574\u4f53\u5370\u8c61\u7ed9\u6211\u5f88\u597d\u7684\uff0c\u4f46\u662f\u5355\u72ec\u62c9\u51fa\u6765\u53ef\u80fd\u4e0d\u662f\u90a3\u4e48\u51fa\u8272\u4e86\uff1f\u53ef\u80fd\u5c31 IZAZA Watch out \u7684\u4eba\u58f0\u540e\u9762\u4e00\u5c0f\u6bb5\u624d\u662f\uff1f Nhelv\uff0cGrievous Lady\uff0c#1f1e33\uff0c\u5219\u662f\u7a81\u51fa\u7684\u9f13\u70b9\u548c\u8282\u594f\u5427\u3002 Aventyr \u8981\u7279\u522b\u4e00\u70b9\uff0c\u4e0d\u592a\u597d\u8bf4\u6e05\u695a\u3002 \u97f3\u6e38\u66f2\u6b4c\u5355\u5728\u8fd9\u91cc\u4e86\uff08\u53ea\u662f\u4e00\u90e8\u5206\uff0c\u8fd9\u91cc\u662f\u6211\u6700\u559c\u6b22\u7684 10 \u9996\uff08\u6df7\u8fdb\u6765\u4e00\u4e2a\u4e1c\u65b9\u540c\u4eba\uff08\uff09\uff09\uff1a \u53d1\u73b0 mkdocs \u652f\u6301 iframe \u554a\uff01\u597d\uff01 2023.01.28 \u03c8(\uff40\u2207\u00b4)\u03c8 Touhou Collaboration I \u6211\u60f3\u8bb0\u5f55\u4e00\u4e9b\u4ee4\u4eba\u611f\u52a8\u7684\u66f2\u5b50\u3002 \u6807\u51c6\u662f\u6211\u957f\u65f6\u95f4\u4e0d\u4f1a\u542c\u70e6 \u800c\u4e14\u7b2c\u4e00\u6b21\u542c\u7684\u65f6\u5019\u56e0\u4e3a\u5404\u79cd\u56e0\u7d20\u88ab\u60ca\u8273\u5230\u7684\u90a3\u79cd\u3002 \u6211\u4f1a\u5c3d\u91cf\u63d2\u5165\u4e00\u4e9b\u89c6\u9891\u4ec0\u4e48\u7684\uff0c\u65b9\u4fbf\u7406\u89e3\uff08 \u4e3a\u4e86\u4f53\u9a8c\uff0c\u6211\u653e\u7684\u90fd\u662f Easy \u96be\u5ea6\u7684\uff08\u56e0\u4e3a\u6211\u4ee5\u524d\u5c31\u8fd9\u4e48\u83dc \u56e0\u4e3a\u6211\u8fd8\u6ca1\u641e\u61c2\u600e\u4e48\u76f4\u63a5\u4ece\u67d0\u4e2a\u5730\u65b9\u5f00\u59cb\u64ad\u653e\uff0c\u6240\u6709\u6709\u4e00\u90e8\u5206\u662f\u6807\u6ce8\u4e86\u5f00\u59cb\u65f6\u95f4\u7684\u3002 \u6807\u9898\u66f2\u548c Ending \u56e0\u4e3a\u4e00\u4e9b\u539f\u56e0\u4e00\u822c\u6253\u5f55\u50cf\u7684\u65f6\u5019\u4e0d\u4f1a\u5f55\uff0c\u6240\u4ee5\u5c31\u6ca1\u6709\u4e86\u3002 \u5e7d\u96c5\u306b\u54b2\u304b\u305b\u3001\u58a8\u67d3\u306e\u685c\u3000\uff5e Border of Life \u5996\u5996\u68a6\u516d\u9762 uuz \u7684\u4e3b\u9898\u66f2\uff0c\u4e3a\u4ec0\u4e48\u8bf4\u5b83\u4ee4\u4eba\u611f\u52a8\u5462\uff1f \u6211\u89c9\u5f97\u5f88\u5927\u4e00\u90e8\u5206\u8981\u5f52\u529f\u4e8e ZUN \u7684\u5c0f\u53f7\uff08 \u542c\u7684\u65f6\u5019\u6709\u4e00\u79cd\u60b2\u6006\u7684\u611f\u89c9\uff0c\u4f60\u60f3\u554a\uff0c\u4ea1\u7075\u5c11\u5973\u60f3\u8981\u590d\u6d3b\u6811\u4e0b\u7684\u5c11\u5973\uff0c\u7aed\u5c3d\u5168\u529b\uff0c\u6a31\u82b1\u6811\u4e5f\u53ea\u80fd\u516b\u5206\u54b2\u3002 \u5176\u5b9e zun \u6700\u5927\u7684\u7279\u70b9\u5c31\u662f\u6e38\u620f\u548c\u5f39\u5e55\u7684\u6709\u673a\u7ed3\u5408\u3002 \u8fd8\u6709\uff0c\u5c0f\u53f7\u4ec0\u4e48\u7a81\u7136\u505c\u6b47\uff0c\u80cc\u666f\u4e5f\u6162\u6162\u6e05\u6670\uff0c\u6211\u4ee5\u4e3a\u5c31\u8981\u7ed3\u675f\u4e86\u2026\u2026\u7a81\u7136\uff0c\u5c0f\u53f7\u518d\u6b21\u51fa\u73b0\uff0c\u8fd9\u65f6\u5019\uff0cuuz\u7a81\u7136\u5f00\u6247\uff0c \u685c\u7b26\u300c\u5b8c\u5168\u306a\u308b\u58a8\u67d3\u306e\u685c -\u4ea1\u6211-\u300d \u771f\u7684\uff0c\u592a\u9707\u64bc\u4e86\u3002 \u8774\u8776\u5f39\u5f88\u80fd\u886c\u6258\u6c1b\u56f4\uff0c\u6709\u79cd uuz \u968f\u7740\u6a31\u82b1\u800c\u4f18\u96c5\u8d77\u821e\uff0c\u8fd8\u80fd\u81ea\u5982\u7684\u548c\u4f60\u6218\u6597\u7684\u611f\u89c9\u3002 \u8bb2\u771f\uff0c\u56e0\u4e3a\u6211\u4e0d\u4f1a\u4e50\u7406\u4ec0\u4e48\u7684\uff0c\u63cf\u8ff0\u8d77\u6765\u8fd8\u662f\u6709\u4e00\u5b9a\u96be\u5ea6\u7684\uff08 \u5f00\u59cb\u65f6\u95f4\uff1a25:07 \u30b7\u30f3\u30c7\u30ec\u30e9\u30b1\u30fc\u30b8\u3000\uff5e Kagome-Kagome \u6c38\u591c\u6284\u4e94\u9762\u9053\u4e2d \u8fd9\u9996\u662f zun \u6839\u636e\u7b3c\u4e2d\u9e1f\u6539\u53d8\u7684\u3002 \u6211\u5f88\u559c\u6b22\u5f00\u5934\u7684\u94a2\u7434\u6bb5\uff0c\u52a0\u4e0a\u7a81\u7136\u51fa\u73b0\u7684\u5154\u5b50\u5996\u7cbe\uff0c\u5f39\u5e55\u5982\u7f51\u4e00\u822c\u4ece\u4e24\u4fa7\u6d12\u4e0b\uff0c\u597d\u50cf\u662f\u5728\u6355\u83b7\u7b3c\u4e2d\u9e1f\u4e00\u6837\u3002 \u94a2\u7434\u7a81\u7136\u52a0\u901f\uff0c\u5c0f\u53f7\u4e00\u5207\uff01 \u7136\u540e\u5c0f\u53f7\u505c\u6b47\uff0c\u53c8\u56de\u5230\u4e86\u5f00\u900f\u7684\u65cb\u5f8b\uff0c\u4e0d\u8fc7\u8fd9\u6b21\u7528\u7684\u5e94\u8be5\u662f\u4e09\u5473\u7ebf\uff0c\u54ea\u6015\u662f\u5c0f\u53f7\u518d\u51fa\uff0c\u7684\u65f6\u5019\u4f9d\u65e7\u5f88\u6293\u8033\u3002 \u6b64\u65f6\u9053\u4e2d boss\uff0c\u5e1d \u51fa\u73b0\uff0c\u65cb\u5f8b\u76f8\u6bd4\u7b2c\u4e00\u6bb5\u6709\u6240\u52a0\u901f\uff0c\u5e1d\u7684\u7acb\u7ed8\u6b64\u65f6\u662f\u4e0a\u4e0b\u6446\u52a8\u7684\uff0c\u5e94\u8be5\u662f\u60f3\u8868\u73b0\u51fa\u5154\u5b50\u7684\u7075\u52a8\u611f\uff0c\u5f88\u6709\u610f\u601d\uff0c\u9f13\u70b9\u66f4\u591a\u4e86\u3002 \u66f2\u5b50\u52a0\u901f\u4e5f\u662f\u4e3a\u4e86\u8fd9\u4e2a\u5427\uff1f \u7136\u540e\uff0c\u80cc\u666f\u7684\u7684\u957f\u5eca\uff0c\u95e8\u4e00\u6247\u6247\u5173\u95ed\uff0c\u968f\u7740\u5c0f\u53f7\u7684\u5347\u964d\u8c03\u800c\u65cb\u8f6c\u7740\uff0c\u4e5f\u5f88\u6709\u611f\u89c9\uff01\uff01\uff01\uff01 \u4e0d\u8fc7\u8fd9\u4e4b\u540e\uff0c2\uff1a30 \u4e4b\u540e\u5c31\u4e0d\u662f\u6e38\u620f\u4e2d\u80fd\u542c\u5230\u7684\u4e86\uff0c\u8fd9\u65f6\u5019\u5c31\u8981\u9762\u5bf9\u94c3\u4ed9\u4e86\uff08 \u4f46\u662f\u8fd9\u79cd\uff0c\u9012\u8fdb\u5f0f\u589e\u6dfb\u4e50\u5668\uff0c\u771f\u7684\u5f88\u5389\u5bb3\u3002\u8fd8\u6709\u4e0d\u65ad\u5730\u5347\u8c03\uff0c\u52a0\u901f\u3002 \u771f\u7684\u80fd\u4f53\u73b0\u51fa\u90a3\u79cd\uff0c\u7d27\u8feb\u7684\uff0c\u723d\u5feb\u7684 boss \u6218\u7684\u611f\u89c9\u3002 \u5c0f\u53f7\u8fd8\u662f\u4e00\u5982\u65e2\u5f80\u7684\u6709\u50ac\u6cea\u7684\u611f\u89c9\u3002 \u5f00\u59cb\u65f6\u95f4\uff1a17:57 \u7815\u6708 \u8403\u68a6\u60f3\u5bf9\u8bdd\u66f2 \u8fd9\u4e2a\uff0c\u8fd8\u6709\u5fc5\u8981\u53d9\u8ff0\u5417\uff1f\uff0c\u5e94\u8be5\u662f\u6240\u6709\u4e1c\u65b9\u66f2\u91cc\u6700\u80fd\u8ba9\u6211\u611f\u52a8\u7684\u4e86\u3002 \u6211\u8bb0\u5f97\u8fd9\u662f U2 \u5199\u7684\u66f2\u5b50\uff0c\u4f46\u662f\u4e5f\u5f88\u6709 zun \u5473\u3002 \u6709\u8282\u65e5\uff0c\u5bb4\u4f1a\u7684\u611f\u89c9\uff0c\u4e5f\u6709\u60b2\u6006\u7684\u611f\u89c9\u3002 \u5f15\u7528wyy\u7684\u8bc4\u8bba\uff1a \u6bcf\u6b21\u542c\u7740\u8fd9\u9996\u66f2\u5b50\u5c31\u89c9\u5f97\u5fc3\u60c5\u8212\u7545\uff0c\u5c0f\u5c0f\u7684\u53c8\u5de8\u5927\u7684\u9b3c\uff0c\u4f20\u8bf4\u91cc\u56db\u5904\u52fe\u5f15\u7f8e\u5c11\u5973\u5374\u53c8\u5728\u6700\u540e\u5173\u5934\u5927\u558a\u7740\u81ea\u5df1\u4ece\u4e0d\u8bf4\u8c0e\u7684\u5bb6\u4f19\uff0c\u5982\u4eca\u4e5f\u95f2\u9760\u5728\u5e7b\u60f3\u4e61\u7684\u67d0\u5904\u62b1\u7740\u81ea\u5df1\u7684\u9152\u58f6\u75db\u996e\u5427\uff0c\u5e94\u8be5\u5df2\u7ecf\u88ab\u88ab\u4eba\u7c7b\u63a5\u53d7\u4e86\u5427\uff0c\u5230\u73b0\u5728\u4e5f\u7ec8\u4e8e\u4ea4\u5230\u670b\u53cb\u4e86\u5427\uff1f\u867d\u8bf4\u6b21\u5143\u4e0d\u540c\uff0c\u679c\u7136\u8fd8\u662f\u60f3\u8981\u5c31\u7740\u6708\u5149\u4e0e\u6a31\u82b1\u548c\u5979\u5e72\u4e0a\u4e00\u676f\u554a\u30fd(\uff9f\u2200\uff9f)\uff89 \u8fd9\u4e00\u70b9\u4e0d\u5047\uff0c\u8fd9\u9996\u66f2\u5b50\u662f\u6240\u6709\u4e1c\u65b9\u66f2\u91cc\u9762\u6700\u80fd\uff0c\u8ba9\u6211\u5feb\u901f\u8c03\u6574\u72b6\u6001\u7684\uff0c\u7ed9\u6211\u4e00\u79cd\u6b22\u4e50\u7684\uff0c\u65e0\u5fe7\u65e0\u8651\u7684\u611f\u89c9\u3002 \u4f46\u662f\u4e5f\u4e0d\u662f\u5355\u7eaf\u5982\u6b64\uff0c\u5c0f\u53f7\u5e26\u6765\u7684\u90a3\u70b9\u60b2\u6006\u8fd8\u662f\u5f88\u5389\u5bb3\u3002 \u6c38\u9060\u306e\u4e09\u65e5\u5929\u4e0b \u5f39\u5e55\u5929\u90aa\u9b3c\u7ec8\u76d8\u66f2 \u60f3\u8981\u4e0b\u514b\u4e0a\u7684\u5929\u90aa\u9b3c\u3002 \u5e73\u548c\u4e2d\u5374\u900f\u9732\u7740\u6df1\u6df1\u7edd\u671b\uff0c\u4e0d\u65ad\u7684\u5c1d\u8bd5\u7740\uff0c\u4e0d\u77e5\u9053\u4f55\u65f6\u624d\u662f\u5c3d\u5934\u3002 \u800c\u4e14 zun \u6545\u610f\u505a\u7684\u662f\uff0c\u524d\u540e\u80fd\u4e00\u76f4\u8854\u63a5\u8d77\u6765\u7684\u3002 \u56e0\u4e3a\u8fd9\u662f\u6e38\u620f\u6700\u7ec8\u76d8\u7684\u66f2\u5b50\u3002 \u800c\u4e14 retry \u4e0d\u4f1a\u5237\u65b0 bgm\uff0c\u8fd9\u662f\u5c11\u89c1\u7684\uff0c\u5c31\u597d\u6bd4\uff0c\u4f60\u771f\u7684\u662f\u88ab\u56f0\u5728\u5669\u68a6\u5f53\u4e2d\uff0c\u4e00\u6b21\u6b21\u4e00\u6b21\u6b21\u7684 miss\uff0c\u53ea\u60f3\u8981\u5b8c\u6210\u4e0b\u514b\u4e0a\u7684\u7406\u60f3\uff0c\u60f3\u8981\u5b88\u4f4f\u81ea\u5df1\u7684\uff0c\u77ed\u547d\u7684\u4e09\u65e5\u5929\u4e0b\u3002 ZUN \u4e5f\u8bf4\uff1a\u6700\u540e\u662f\u6bd4\u8f83\u6e29\u987a\u7684\u611f\u89c9\u7684\u66f2\u5b50 \u3000\u53ea\u4e0d\u8fc7\u5f39\u5e55\u662f\u5730\u72f1\u3002\u4e0d\u5982\u8bf4\u66f2\u5b50\u70d8\u6258\u7740\u7edd\u671b\u611f\u3002 \u3000\u771f\u7684\u662f\u4e0d\u53ef\u80fd\u7684\u5417\uff1f \u6574\u9996\u66f2\u5b50\u6700\u4f20\u795e\u7684\u5e94\u8be5\u662f\u7b1b\u5b50\u3002 \u7b1b\u5b50\u4e00\u51fa\u6765\u771f\u7684\u6709\u90a3\u79cd\uff0c\u7edd\u671b\u5230\u6781\u70b9\u7684\u611f\u53d7\u4e86\u3002 \u4eff\u4f5b\u80fd\u770b\u5230\uff0c\u6b63\u90aa\u7528\u7740\u9053\u5177\uff0c\u4e0d\u65ad\u5411\u5e7b\u60f3\u4e61\u7684\u9876\u70b9\u6311\u6218\u7740\uff0c\u51b2\u51fb\u7740\uff0c\u6211\u5f88\u559c\u6b22\u8fd9\u79cd\u7edd\u671b\u4e2d\u7684\u575a\u6bc5\u611f\u3002 \u5f88\u559c\u6b22\u8fd9\u4e2a\uff0c\u5efa\u8bae\u591a\u542c\u542c\uff0c\u6211\u66fe\u7ecf\u4e3a\u4e86\u4e00\u5f20\u7b26\u5361miss\u4e86\u63a5\u8fd11000\u6b21\uff0c\u51e0\u5929\u91cc\u8111\u5b50\u53ea\u6709\u8fd9\u9996\u66f2\u5b50\u3002 \u867d\u7136\u75db\u82e6\uff0c\u4f46\u662f\u8fd8\u662f\uff0c\u5f88\u6709\u610f\u8574\u3002 \u66f2\u5b50\u7684\u610f\u601d\uff0c\u9002\u7528\u7684\u5730\u65b9\uff0c\u4e5f\u6709\u70b9\u7c7b\u4f3c\u3010\u4f60\u6c38\u8fdc\u5230\u8fbe\u4e0d\u4e86\u6b7b\u4ea1\u7684\u771f\u5b9e\u3011\u8fd9\u6837\u7684\u611f\u89c9\u3002 \u9e93\u306e\u795e\u793e \u98ce\u795e\u5f55 Ending \u57fa\u672c\u6ca1\u6709\u600e\u4e48\u542c\u8fc7\uff08\u9ebb\u5c06\u5c71\u592a\u96be\u4e86\uff09\uff0c\u53ea\u662f\u4e34\u65f6\u9009\u7684\uff0c\u4f46\u662f\u4e5f\u5f88\u6709\u610f\u601d\u3002 \u8fd9\u662f Ending \u66f2\uff0c\u5176\u5b9e\u5bf9\u4e8e\u521a\u521a\u6298\u78e8\u4e86\u5f88\u4e45\uff0c\u597d\u4e0d\u5bb9\u6613\u901a\u5173\u7684\u5927\u5bb6\u3002 Ending \u548c Staff \u66f2\u662f\u771f\u7684\u5f88\u611f\u4eba\u7684\u3002 \u8131\u4e0b\u8033\u673a\uff0c\u644a\u5728\u6905\u5b50\u4e0a\uff0c\u957f\u8212\u4e00\u53e3\u6c14\u3002 \u6bcf\u6b21\u901a\u5173\u90fd\u4f1a\u8fd9\u6837\uff0c\u591a\u4e45\u4e86\u8fd8\u662f\u6ca1\u6709\u6539\u53d8\uff0c\u597d\u6bd4\uff0c\u7ecf\u5386\u8fc7\u65e0\u6570\u632b\u6298\uff0c\u7ec8\u4e8e\u770b\u5230\u4e86\u66d9\u5149\u7684\u611f\u89c9\u3002 \u5f88\u559c\u6b22\u8fd9\u79cd\u54f2\u5b66\uff0c\u4e0d\u5c11\u4eba\u5176\u5b9e\u6700\u559c\u6b22\u7684\u66f2\u5b50\u5e94\u8be5\u662f ED\uff0c\u6211\u53ef\u4ee5\u8bf4\uff0c\u5927\u90e8\u5206 ED \u90fd\u662f\u51b7\u95e8\u795e\u66f2\u3002 hmx\uff0cyym\uff0cyyc \u4e09\u4f5c ED\uff0c\u5982\u679c\u5f53\u4f5c\u7ec4\u66f2\u653e\u5728\u4e00\u8d77\uff0c\u771f\u7684\u5f88\u5389\u5bb3\u3002 \u5927\u68a6\u521d\u9192\u7684\u611f\u89c9\uff0c\u4eff\u4f5b\u521a\u4ece\u5e7b\u60f3\u5f53\u4e2d\u8131\u8eab\u3002 \u65e7\u5730\u7344\u8857\u9053\u3092\u884c\u304f \u5730\u7075\u6bbf\u4e09\u9762\u9053\u4e2d \u6b22\u5feb\u7684\u611f\u89c9\u3002 \u6f2b\u6b65\u5728\u5e9f\u5f03\u7684\u65e7\u5730\u72f1\u8857\u9053\u4e0a\u3002 \u4f46\u662f\u5b83\u4ecd\u65e7\u7e41\u534e\uff0c\u9b3c\u4eec\u5728\u8fd9\u91cc\u996e\u9152\u4f5c\u4e50\uff0c\u597d\u4e0d\u5feb\u6d3b\u3002 \u6574\u9996\u66f2\u5b50\u5c31\u662f\uff0c\u7ed9\u6211\u4e00\u79cd\uff0c\u4e2d\u56fd\u7684\u5143\u5bb5\u706f\u4f1a\uff0c\u65e5\u672c\u7684\u70df\u706b\u796d\u5178\u4e00\u6837\u7684\u611f\u89c9\u3002 \u70ed\u70ed\u95f9\u95f9\u7684\uff0c\u5927\u5bb6\u90fd\u7a7f\u7740\u65b0\u8863\u670d\uff0c\u559c\u6c14\u6d0b\u6d0b\u7684\u8d70\u5728\u8857\u4e0a\uff0c\u624b\u4e0a\u4e5f\u8bb8\u8fd8\u62ff\u7740\u7ae0\u9c7c\u70e7\u4ec0\u4e48\u7684\u3002 \u60f3\u8d77\u4e00\u4e2a\u753b\u9762\uff0c\u5f88\u9002\u5408\u8fd9\u9996\u6b4c\uff0c\u4f46\u662f\u627e\u4e0d\u5230\u56fe\u4e86\u3002 \u7a7f\u7740\u548c\u670d\u7684\u5c11\u5973\u7684\u6728\u5c50\u677e\u4e86\uff0c\u53f3\u624b\u62ff\u7740\u7ae0\u9c7c\u70e7\uff0c\u5f88\u4f18\u96c5\u7684\u5f2f\u4e0b\u8eab\u53bb\uff0c\u5de6\u624b\u521a\u78b0\u5230\u978b\u8ddf\u7684\u65f6\u5019\uff0c\u5374\u56de\u5934\u770b\u7740\u4f60\uff0c\u8138\u4e0a\u8fd8\u6709\u72d0\u9762\u5177\uff0c\u624e\u7740\u4e38\u5b50\u5934\u3002 \u84e6\u7136\u56de\u9996\uff0c\u90a3\u4eba\u5374\u5728\uff0c\u706f\u706b\u9611\u73ca\u5904\u3002 \u5f00\u59cb\u65f6\u95f4\uff1a07:30 \u9752\u7a7a\u306e\u5f71 \u661f\u83b2\u8239\u6807\u9898\u66f2 \u56de\u8f6c\u4e00\u4e0b\u7684\u90a3\u4e2a\u6ed1\u97f3\u5f88\u6709\u610f\u601d\u54e6\u3002 \u6253\u5f00\u661f\u83b2\u8239\u7684\u65f6\u5019\uff0c\u97f3\u4e50\u60f3\u8d77\uff0c\u5c0f\u5b9d\u8239\u5e26\u7740\u7075\u68a6\u4ece\u5c4f\u5e55\u53f3\u8fb9\u98de\u5165\u3002 \u81ea\u4fe1\u7684\u7b11\u7740\uff0c\u597d\u50cf\u662f\u5bf9\u524d\u65b9\u4e91\u96fe\u4e2d\u7684\u5b9d\u8239\u52bf\u5728\u5fc5\u5f97\u3002 \u4e0d\u6127\u662f\u7075\u68a6\u5462\u3002 \u4e00\u5982\u65e2\u5f80\u7684\u4e3b\u65cb\u5f8b\uff0c\u8fd8\u662f\u5f88\u559c\u6b22\uff0c\u661f\u83b2\u8239\u7684\u97f3\u6548\u6bd4\u8f83\u7279\u522b\uff0c\u662f\u90a3\u79cd\u5f88\u6e05\u65b0\u7684\u611f\u89c9\uff0c\u8fd9\u4e2a\u975e\u5e38 suki\u3002 \u5922\u6bbf\u5927\u7940\u5edf \u795e\u7075\u5e99\u4e94\u9762\u9053\u4e2d zun \u5f88\u5389\u5bb3\uff01 \u8fd9\u9996\u66f2\u5b50\u4e00\u542c\u5c31\u662f\uff0c\u90a3\u79cd\u7a7a\u7075\u7684\u5730\u4e0b\u5de8\u5927\u7a7a\u95f4\u7684\u611f\u89c9\u5427\uff01 \u5e94\u8be5\u662f\u56e0\u4e3a\u97f3\u8f68\u91cc\u7c7b\u4f3c\u56de\u97f3\u7684\u548c\u58f0\u3002 30 \u79d2\u5de6\u53f3\u7684\u65cb\u5f8b\u7ed9\u4eba\u4e00\u79cd\u5f88\u6e05\u51c0\u7684\u611f\u89c9\uff0c\u4eff\u4f5b\u8fd9\u91cc\u662f\u4ec0\u4e48\uff0c\u80dc\u5730\u3002 \u9f13\u70b9\u4ecd\u65e7\u5f88\u6709\u7164\u6c14\u7076\u7684\u7279\u8272\u3002 01:05 \u5de6\u53f3\u5c60\u81ea\u53e4\u51fa\u573a\uff0c\u597d\u50cf\u662f\u5e7d\u7075\u4e00\u822c\uff0c\u662f\u7a81\u7136\u65cb\u8f6c\u7740\u51fa\u73b0\u7684\u3002\uff08\u4e0d\u8fc7\u7eb8\u7247\u4eba\u8fd9\u70b9\u6709\u70b9\u51fa\u620f\u4e86\u3002 01:31 \u7684\u65f6\u5019\uff0c\u968f\u7740\u82cf\u6211\u7684\u90a3\u4e2a\u7c7b\u4f3c\u7535\u98ce\u66b4\u7684\u6da1\u65cb\u5f39\u5e55\uff0c\u5f88\u6709\u611f\u89c9\uff01 \u80cc\u666f\u91cc\u65cb\u8f6c\u7684\u68a6\u6bbf\uff0c\u6f2b\u5929\u6e38\u79bb\u7684\u795e\u7075\uff0c\u4e0d\u65ad\u53d8\u5316\u7740\u7684\u3002 \u5f88\u4ee4\u4eba\u5174\u594b\uff0cZun \u8fd9\u9996\u5199\u7684\u771f\u7684\u5f88\u795e\u3002 \u5f00\u59cb\u65f6\u95f4\uff1a20:54 \u4e0d\u601d\u8b70\u306a\u304a\u7953\u3044\u68d2 \u8f89\u9488\u57ce\u6807\u9898\u66f2 \u4e0d\u53ef\u601d\u8bae\u7684\u8c61\u62d4\u868c\uff08\u5212\u6389\u3002 \u8fd9\u662f\u6700\u6ca1\u6709 ZUN \u5473\u9053\u7684\u6807\u9898\u66f2\u3002 \u4f46\u662f\u6211\u7b2c\u4e00\u6b21\u542c\u5230\u7684\u65f6\u5019\u5c31\uff0c\u7279\u522b\u559c\u6b22\u3002 \u5927\u5bb6\u90fd\u8bf4\u8fd9\u662f ZUN \u4f5c\u66f2\u6c34\u5e73\u7684\u5dc5\u5cf0\u4e4b\u4e00\uff0c\u5f88\u9707\u64bc\uff0c\u4e4b\u524d\u4ece\u672a\u6709\u8fc7\u7684\u611f\u89c9\u3002 \u771f\u7684\uff0c\u4f60\u53ef\u80fd\u8981\u8bd5\u7740\u542c\u4e00\u4e0b zun \u4ee5\u524d\u6807\u9898\u66f2\u5077\u61d2\u7684\u98ce\u683c\u624d\u77e5\u9053\u3002 \u4e3a\u4ec0\u4e48\u5927\u5bb6\u90fd\u559c\u6b22\u8fd9\u9996\u3002 \u8fd9\u57fa\u672c\u662f\u516c\u8ba4\u7684\u6807\u9898\u66f2\u7b2c\u4e00\u4e86\u3002 \u6211\u6253\u5f00\u6e38\u620f\u4ec0\u4e48\u90fd\u6ca1\u6709\u5e72\uff0c\u5c31\u542c\u4e86\u597d\u51e0\u8fb9\u66f2\u5b50\u3002 \u987a\u4fbf\u770b\u770b\u96be\u5f97\u753b\u7684\u975e\u5e38\u6b63\u5e38\u751a\u81f3\u6709\u70b9\u6da9\u7684\u7075\u68a6\uff08 01:20 \u5de6\u53f3\u4e3b\u65cb\u5f8b\u51fa\u6765\u7684\u65f6\u5019\u5feb\u54ed\u4e86\u3002 \u771f\u7684\uff0cbeyond expression, really breathtaking. \u795e\u793e\u304b\u3089\u898b\u3048\u308b\u6708 \u7ec0\u73e0\u4f20 Ending \u7ec0\u73e0\u4f20\uff0c\u7cfb\u5217\u6700\u96be\u4f5c\u7684 Ending\u3002 \u7ed3\u5c40\u5199\u4e86\u4e0d\u5c11\u6709\u6df1\u610f\u7684\u8bdd\uff0c\u81f3\u5c11\u6211\u8fd9\u4e48\u89c9\u5f97\u3002 \u8fd9\u79cd\uff0c\u6709\u70b9\u7a7a\u7075\u7684\u611f\u89c9\uff0c\u5b87\u5b99\u7684\u98ce\u683c\uff0c\u5f88\u7b26\u5408\u7ec0\u73e0\u4f20\u7684\u6c14\u8d28\u3002 \u7ec0\u73e0\u4f20\u5e94\u8be5\u662f\u6700\u3010lunatic\u3011\u7684\u4e00\u4f5c\u4e86\uff0c\u4e0d\u7ba1\u662f\u4ece\u96be\u5ea6\u8fd8\u662f\u4ece\u8bbe\u5b9a\u4e0a\u3002 \u751a\u81f3\u8fd8\u6709\u4e24\u4f4d\u4e1c\u65b9\u6218\u529b\u5929\u82b1\u677f\u548c\u4f60\u5728 EX \u6218\u6597\uff08\u867d\u7136\u5df2\u7ecf\u653e\u4e86\u5f88\u591a\u6c34\u4e86\u3002 \u4e00\u9762\u7684\u5f39\u5e55\u5c31\u5df2\u7ecf\u5f88\u4e0d\u53cb\u5584\u4e86\uff0c\u771f\u7684\u662f\u72c2\u6c14\uff0c\u66f2\u5b50\u57fa\u672c\u4e5f\u5f88\u72c2\u6c14\uff08\u9664\u4e86\u56db\u9762\u9053\u4e2d\uff0c\u90a3\u4e2a\u6211\u89c9\u5f97\u662f\u8d85\u7ea7\u795e\u66f2\uff0c\u4f46\u662f\u4e0d\u9002\u5408\u653e\u5728\u8fd9\u91cc\uff0c\u6211\u8981\u5355\u72ec\u5199\uff09 \u6240\u4ee5\u554a\uff0c\u4e5f\u662f\u90a3\u79cd\uff0c\u5927\u68a6\u521d\u9192\u7684\u611f\u89c9\uff0c\u800c\u4e14\u5c31\u662f\u9760\u5bf9\u6bd4\u3002 \u8d85\u7ea7\u72c2\u6c14\u7684\u5f39\u5e55\uff0c\u66f2\u5b50\uff0c\u6700\u540e\u6765\u6536\u5c3e\u7684\u786e\u5b9e\u8fd9\u6837\u4e00\u9996\u5e73\u548c\u7684\u66f2\u5b50\u3002 \u4ece\u795e\u793e\u6240\u671b\u89c1\u7684\u6708\uff0c\u6a21\u7cca\u4e86\u8ba4\u77e5\uff0c\u72c2\u6c14\u7684\u6708\u3002","title":"\u8fd1\u671f\u63a8\u6b4c"},{"location":"misc/music/#20230108","text":"\u4eca\u5929\u5076\u7136\u70b9\u5230\u4e86 sskr \u7684\u4e00\u9996\u672f\u66f2\uff0c\u53ea\u542c\u524d\u594f\u5c31\u518d\u4e5f\u505c\u4e0d\u4e0b\u6765\u4e86\u3002 \u611f\u89c9\u554a\uff0c\u524d\u594f\u8fd9\u6bb5\u65cb\u5f8b\u7b80\u76f4\u662f\u795e\u3002 \u4e5f\u6709\u53ef\u80fd\u662f\u6700\u8fd1\u5fc3\u60c5\u4e0d\u597d\u559c\u6b22\u90a3\u79cd\u7a7a\u7075\u70b9\u7684\uff0c\u6b22\u5feb\u4e00\u70b9\u7684\u65cb\u5f8b\uff0c\u7136\u540e\u521a\u597d\u542c\u5230 sskr \u7684\u672f\u66f2\uff08 \u4e0d\u592a\u597d\u63cf\u8ff0\u8fd9\u6bb5\u65cb\u5f8b\uff0c\u4f46\u662f\u5c31\u662f\u771f\u7684\uff0c\u5b83\u662f\u6709\u79cd\u7a7a\u7075\u7684\u611f\u89c9\uff0c\u6709\u70b9\u5fe7\u4f24\uff0c\u4f46\u662f\u5f88\u7279\u522b\uff0c\u5fc3\u60c5\u5341\u5206\u4f4e\u843d\u7684\u65f6\u5019\u542c\u7740\u7b97\u662f\u4e00\u79cd\u6170\u85c9\u5427\u3002 \u728d\u9640\u591a\u554a\uff0c\u662f\u7f6a\u4eba\u554a\uff0c\u4f46\u662f\u7f6a\u4eba\u4e5f\u662f\u4f1a\u6709\u5584\u5fc3\u7684\u5b58\u5728\u5427\uff1f\u7edd\u5bf9\u7684\u4e8b\u7269\u662f\u4e0d\u5b58\u5728\u7684\u3002 \u6216\u8005\u8bf4\uff0c\u82a5\u5ddd\u7684\u8fd9\u4e2a\u6545\u4e8b\u60f3\u544a\u8bc9\u6211\u7684\uff0c\u4e5f\u6709\u70b9\u90a3\u79cd\uff0c\u4e0d\u8981\u7ed9\u70b9\u9633\u5149\u5c31\u707f\u70c2\u7684\u90a3\u79cd\u610f\u601d\uff1f\u4e0d\u662f\u5f88\u597d\u8bf4\uff0c\u53cd\u6b63\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff0c\u867d\u7136\u662f\u4e00\u6bb5\u6de1\u6de1\u7684\u65cb\u5f8b\uff0c\u4f46\u662f\u80fd\u5199\u51fa\u90a3\u79cd\u82e6\u75db\u611f\uff0c\u5728\u5730\u72f1\u91cc\u707c\u70e7\u7684\u611f\u89c9\u5427\uff0cmiku \u7684\u58f0\u7ebf\u4f3c\u4e4e\u4e5f\u662f\u523b\u610f\u8c03\u6559\u6210\u8fd9\u6837\u7684\u3002 \u611f\u89c9\u81ea\u5df1\u968f\u673a\u8bf4\u8bdd\u7684\u611f\u89c9\uff0c\u5c31\u662f\u5728\u62d9\u52a3\u7684\u6a21\u4eff zun \u6851\uff0c\u662f\u8fd9\u6837\u7684\u5427\u3002 \u55ef\uff0c\u8bf4\u5230\u82e6\u95f7\u7684\u65f6\u5019\u542c\u5230\u7684\u65cb\u5f8b\uff0c\u4e5f\u6709\u8fd9\u4e2a\u5427\uff1a \u6bd4\u8d77\u8718\u86db\u4e1d\uff0c\u8fd9\u9996\u66f2\u5b50\u7684\u65cb\u5f8b\u5e76\u4e0d\u662f\u90a3\u4e48\u6293\u8033\uff0c\u4f46\u662f nameless \u7684\u58f0\u7ebf\u5728\u5f53\u65f6\u4e5f\u7b97\u7ed9\u4e86\u6211\u4e00\u4e2a\u5e73\u590d\u5fc3\u60c5\u7684\u673a\u4f1a\u5427\uff0c\u6211\u8bb0\u5f97\u53ef\u80fd\u662f\u5728\u67d0\u4e2a\u4eba\u7684\u535a\u5ba2\u91cc\u770b\u5230\u7684\uff0c\u597d\u50cf\u53c8\u662f\u5728\u67d0\u4e2a\u7f51\u7ad9\u7ffb\u8d44\u6e90\u7684\u65f6\u5019\u542c\u5230\u7684\uff1f\uff1f\u5fd8\u4e86\uff0c\u7f62\u4e86\u3002 \u8bf4\u8d77\u6765\uff0c\u6211\u542c\u97f3\u6e38\u66f2\u57fa\u672c\u90fd\u662f\u9700\u8981\u67d0\u4e00\u6bb5\u65cb\u5f8b\u7279\u522b\u6293\u8033\u624d\u884c\u7684\uff1f \u6bd4\u5982 Poppy \u7684 climax \u6bb5\uff0cspasmodic \u7684 ending\uff0cPUPA \u7684\u524d\u594f\uff0cSaiko Stronger \u7684 climax\uff0cCrossOver 00:10 \u5de6\u53f3\u7684\u90a3\u6bb5\uff0cEther Strike \u7684\u96f6\u5149\u5439\u5587\u53ed\u6bb5\uff08 \u4f46\u662f\u6709\u4e9b\u66f2\u5b50\u53c8\u6bd4\u8f83\u7279\u522b\uff0c\u6bd4\u5982 Sakura Fubuki\uff0c\u8fd9\u4e2a\u771f\u7684\u662f\u56e0\u4e3a\u6df7\u97f3\u610f\u5916\u7684\u5e72\u51c0\uff0c\u6ca1\u6709\u600e\u4e48\u7528\u548c\u98ce\u4e50\u5668\u5374\u4e00\u80a1\u6a31\u82b1\u6563\u843d\u7684\u5473\u9053\u3002 \u8fd8\u6709 Tempestissmo \u548c IZANA\uff0cApollo\uff0c\u8fd9\u4e9b\u662f\u6574\u4f53\u5370\u8c61\u7ed9\u6211\u5f88\u597d\u7684\uff0c\u4f46\u662f\u5355\u72ec\u62c9\u51fa\u6765\u53ef\u80fd\u4e0d\u662f\u90a3\u4e48\u51fa\u8272\u4e86\uff1f\u53ef\u80fd\u5c31 IZAZA Watch out \u7684\u4eba\u58f0\u540e\u9762\u4e00\u5c0f\u6bb5\u624d\u662f\uff1f Nhelv\uff0cGrievous Lady\uff0c#1f1e33\uff0c\u5219\u662f\u7a81\u51fa\u7684\u9f13\u70b9\u548c\u8282\u594f\u5427\u3002 Aventyr \u8981\u7279\u522b\u4e00\u70b9\uff0c\u4e0d\u592a\u597d\u8bf4\u6e05\u695a\u3002 \u97f3\u6e38\u66f2\u6b4c\u5355\u5728\u8fd9\u91cc\u4e86\uff08\u53ea\u662f\u4e00\u90e8\u5206\uff0c\u8fd9\u91cc\u662f\u6211\u6700\u559c\u6b22\u7684 10 \u9996\uff08\u6df7\u8fdb\u6765\u4e00\u4e2a\u4e1c\u65b9\u540c\u4eba\uff08\uff09\uff09\uff1a \u53d1\u73b0 mkdocs \u652f\u6301 iframe \u554a\uff01\u597d\uff01","title":"2023.01.08"},{"location":"misc/music/#20230128","text":"Touhou Collaboration I \u6211\u60f3\u8bb0\u5f55\u4e00\u4e9b\u4ee4\u4eba\u611f\u52a8\u7684\u66f2\u5b50\u3002 \u6807\u51c6\u662f\u6211\u957f\u65f6\u95f4\u4e0d\u4f1a\u542c\u70e6 \u800c\u4e14\u7b2c\u4e00\u6b21\u542c\u7684\u65f6\u5019\u56e0\u4e3a\u5404\u79cd\u56e0\u7d20\u88ab\u60ca\u8273\u5230\u7684\u90a3\u79cd\u3002 \u6211\u4f1a\u5c3d\u91cf\u63d2\u5165\u4e00\u4e9b\u89c6\u9891\u4ec0\u4e48\u7684\uff0c\u65b9\u4fbf\u7406\u89e3\uff08 \u4e3a\u4e86\u4f53\u9a8c\uff0c\u6211\u653e\u7684\u90fd\u662f Easy \u96be\u5ea6\u7684\uff08\u56e0\u4e3a\u6211\u4ee5\u524d\u5c31\u8fd9\u4e48\u83dc \u56e0\u4e3a\u6211\u8fd8\u6ca1\u641e\u61c2\u600e\u4e48\u76f4\u63a5\u4ece\u67d0\u4e2a\u5730\u65b9\u5f00\u59cb\u64ad\u653e\uff0c\u6240\u6709\u6709\u4e00\u90e8\u5206\u662f\u6807\u6ce8\u4e86\u5f00\u59cb\u65f6\u95f4\u7684\u3002 \u6807\u9898\u66f2\u548c Ending \u56e0\u4e3a\u4e00\u4e9b\u539f\u56e0\u4e00\u822c\u6253\u5f55\u50cf\u7684\u65f6\u5019\u4e0d\u4f1a\u5f55\uff0c\u6240\u4ee5\u5c31\u6ca1\u6709\u4e86\u3002 \u5e7d\u96c5\u306b\u54b2\u304b\u305b\u3001\u58a8\u67d3\u306e\u685c\u3000\uff5e Border of Life \u5996\u5996\u68a6\u516d\u9762 uuz \u7684\u4e3b\u9898\u66f2\uff0c\u4e3a\u4ec0\u4e48\u8bf4\u5b83\u4ee4\u4eba\u611f\u52a8\u5462\uff1f \u6211\u89c9\u5f97\u5f88\u5927\u4e00\u90e8\u5206\u8981\u5f52\u529f\u4e8e ZUN \u7684\u5c0f\u53f7\uff08 \u542c\u7684\u65f6\u5019\u6709\u4e00\u79cd\u60b2\u6006\u7684\u611f\u89c9\uff0c\u4f60\u60f3\u554a\uff0c\u4ea1\u7075\u5c11\u5973\u60f3\u8981\u590d\u6d3b\u6811\u4e0b\u7684\u5c11\u5973\uff0c\u7aed\u5c3d\u5168\u529b\uff0c\u6a31\u82b1\u6811\u4e5f\u53ea\u80fd\u516b\u5206\u54b2\u3002 \u5176\u5b9e zun \u6700\u5927\u7684\u7279\u70b9\u5c31\u662f\u6e38\u620f\u548c\u5f39\u5e55\u7684\u6709\u673a\u7ed3\u5408\u3002 \u8fd8\u6709\uff0c\u5c0f\u53f7\u4ec0\u4e48\u7a81\u7136\u505c\u6b47\uff0c\u80cc\u666f\u4e5f\u6162\u6162\u6e05\u6670\uff0c\u6211\u4ee5\u4e3a\u5c31\u8981\u7ed3\u675f\u4e86\u2026\u2026\u7a81\u7136\uff0c\u5c0f\u53f7\u518d\u6b21\u51fa\u73b0\uff0c\u8fd9\u65f6\u5019\uff0cuuz\u7a81\u7136\u5f00\u6247\uff0c \u685c\u7b26\u300c\u5b8c\u5168\u306a\u308b\u58a8\u67d3\u306e\u685c -\u4ea1\u6211-\u300d \u771f\u7684\uff0c\u592a\u9707\u64bc\u4e86\u3002 \u8774\u8776\u5f39\u5f88\u80fd\u886c\u6258\u6c1b\u56f4\uff0c\u6709\u79cd uuz \u968f\u7740\u6a31\u82b1\u800c\u4f18\u96c5\u8d77\u821e\uff0c\u8fd8\u80fd\u81ea\u5982\u7684\u548c\u4f60\u6218\u6597\u7684\u611f\u89c9\u3002 \u8bb2\u771f\uff0c\u56e0\u4e3a\u6211\u4e0d\u4f1a\u4e50\u7406\u4ec0\u4e48\u7684\uff0c\u63cf\u8ff0\u8d77\u6765\u8fd8\u662f\u6709\u4e00\u5b9a\u96be\u5ea6\u7684\uff08 \u5f00\u59cb\u65f6\u95f4\uff1a25:07 \u30b7\u30f3\u30c7\u30ec\u30e9\u30b1\u30fc\u30b8\u3000\uff5e Kagome-Kagome \u6c38\u591c\u6284\u4e94\u9762\u9053\u4e2d \u8fd9\u9996\u662f zun \u6839\u636e\u7b3c\u4e2d\u9e1f\u6539\u53d8\u7684\u3002 \u6211\u5f88\u559c\u6b22\u5f00\u5934\u7684\u94a2\u7434\u6bb5\uff0c\u52a0\u4e0a\u7a81\u7136\u51fa\u73b0\u7684\u5154\u5b50\u5996\u7cbe\uff0c\u5f39\u5e55\u5982\u7f51\u4e00\u822c\u4ece\u4e24\u4fa7\u6d12\u4e0b\uff0c\u597d\u50cf\u662f\u5728\u6355\u83b7\u7b3c\u4e2d\u9e1f\u4e00\u6837\u3002 \u94a2\u7434\u7a81\u7136\u52a0\u901f\uff0c\u5c0f\u53f7\u4e00\u5207\uff01 \u7136\u540e\u5c0f\u53f7\u505c\u6b47\uff0c\u53c8\u56de\u5230\u4e86\u5f00\u900f\u7684\u65cb\u5f8b\uff0c\u4e0d\u8fc7\u8fd9\u6b21\u7528\u7684\u5e94\u8be5\u662f\u4e09\u5473\u7ebf\uff0c\u54ea\u6015\u662f\u5c0f\u53f7\u518d\u51fa\uff0c\u7684\u65f6\u5019\u4f9d\u65e7\u5f88\u6293\u8033\u3002 \u6b64\u65f6\u9053\u4e2d boss\uff0c\u5e1d \u51fa\u73b0\uff0c\u65cb\u5f8b\u76f8\u6bd4\u7b2c\u4e00\u6bb5\u6709\u6240\u52a0\u901f\uff0c\u5e1d\u7684\u7acb\u7ed8\u6b64\u65f6\u662f\u4e0a\u4e0b\u6446\u52a8\u7684\uff0c\u5e94\u8be5\u662f\u60f3\u8868\u73b0\u51fa\u5154\u5b50\u7684\u7075\u52a8\u611f\uff0c\u5f88\u6709\u610f\u601d\uff0c\u9f13\u70b9\u66f4\u591a\u4e86\u3002 \u66f2\u5b50\u52a0\u901f\u4e5f\u662f\u4e3a\u4e86\u8fd9\u4e2a\u5427\uff1f \u7136\u540e\uff0c\u80cc\u666f\u7684\u7684\u957f\u5eca\uff0c\u95e8\u4e00\u6247\u6247\u5173\u95ed\uff0c\u968f\u7740\u5c0f\u53f7\u7684\u5347\u964d\u8c03\u800c\u65cb\u8f6c\u7740\uff0c\u4e5f\u5f88\u6709\u611f\u89c9\uff01\uff01\uff01\uff01 \u4e0d\u8fc7\u8fd9\u4e4b\u540e\uff0c2\uff1a30 \u4e4b\u540e\u5c31\u4e0d\u662f\u6e38\u620f\u4e2d\u80fd\u542c\u5230\u7684\u4e86\uff0c\u8fd9\u65f6\u5019\u5c31\u8981\u9762\u5bf9\u94c3\u4ed9\u4e86\uff08 \u4f46\u662f\u8fd9\u79cd\uff0c\u9012\u8fdb\u5f0f\u589e\u6dfb\u4e50\u5668\uff0c\u771f\u7684\u5f88\u5389\u5bb3\u3002\u8fd8\u6709\u4e0d\u65ad\u5730\u5347\u8c03\uff0c\u52a0\u901f\u3002 \u771f\u7684\u80fd\u4f53\u73b0\u51fa\u90a3\u79cd\uff0c\u7d27\u8feb\u7684\uff0c\u723d\u5feb\u7684 boss \u6218\u7684\u611f\u89c9\u3002 \u5c0f\u53f7\u8fd8\u662f\u4e00\u5982\u65e2\u5f80\u7684\u6709\u50ac\u6cea\u7684\u611f\u89c9\u3002 \u5f00\u59cb\u65f6\u95f4\uff1a17:57 \u7815\u6708 \u8403\u68a6\u60f3\u5bf9\u8bdd\u66f2 \u8fd9\u4e2a\uff0c\u8fd8\u6709\u5fc5\u8981\u53d9\u8ff0\u5417\uff1f\uff0c\u5e94\u8be5\u662f\u6240\u6709\u4e1c\u65b9\u66f2\u91cc\u6700\u80fd\u8ba9\u6211\u611f\u52a8\u7684\u4e86\u3002 \u6211\u8bb0\u5f97\u8fd9\u662f U2 \u5199\u7684\u66f2\u5b50\uff0c\u4f46\u662f\u4e5f\u5f88\u6709 zun \u5473\u3002 \u6709\u8282\u65e5\uff0c\u5bb4\u4f1a\u7684\u611f\u89c9\uff0c\u4e5f\u6709\u60b2\u6006\u7684\u611f\u89c9\u3002 \u5f15\u7528wyy\u7684\u8bc4\u8bba\uff1a \u6bcf\u6b21\u542c\u7740\u8fd9\u9996\u66f2\u5b50\u5c31\u89c9\u5f97\u5fc3\u60c5\u8212\u7545\uff0c\u5c0f\u5c0f\u7684\u53c8\u5de8\u5927\u7684\u9b3c\uff0c\u4f20\u8bf4\u91cc\u56db\u5904\u52fe\u5f15\u7f8e\u5c11\u5973\u5374\u53c8\u5728\u6700\u540e\u5173\u5934\u5927\u558a\u7740\u81ea\u5df1\u4ece\u4e0d\u8bf4\u8c0e\u7684\u5bb6\u4f19\uff0c\u5982\u4eca\u4e5f\u95f2\u9760\u5728\u5e7b\u60f3\u4e61\u7684\u67d0\u5904\u62b1\u7740\u81ea\u5df1\u7684\u9152\u58f6\u75db\u996e\u5427\uff0c\u5e94\u8be5\u5df2\u7ecf\u88ab\u88ab\u4eba\u7c7b\u63a5\u53d7\u4e86\u5427\uff0c\u5230\u73b0\u5728\u4e5f\u7ec8\u4e8e\u4ea4\u5230\u670b\u53cb\u4e86\u5427\uff1f\u867d\u8bf4\u6b21\u5143\u4e0d\u540c\uff0c\u679c\u7136\u8fd8\u662f\u60f3\u8981\u5c31\u7740\u6708\u5149\u4e0e\u6a31\u82b1\u548c\u5979\u5e72\u4e0a\u4e00\u676f\u554a\u30fd(\uff9f\u2200\uff9f)\uff89 \u8fd9\u4e00\u70b9\u4e0d\u5047\uff0c\u8fd9\u9996\u66f2\u5b50\u662f\u6240\u6709\u4e1c\u65b9\u66f2\u91cc\u9762\u6700\u80fd\uff0c\u8ba9\u6211\u5feb\u901f\u8c03\u6574\u72b6\u6001\u7684\uff0c\u7ed9\u6211\u4e00\u79cd\u6b22\u4e50\u7684\uff0c\u65e0\u5fe7\u65e0\u8651\u7684\u611f\u89c9\u3002 \u4f46\u662f\u4e5f\u4e0d\u662f\u5355\u7eaf\u5982\u6b64\uff0c\u5c0f\u53f7\u5e26\u6765\u7684\u90a3\u70b9\u60b2\u6006\u8fd8\u662f\u5f88\u5389\u5bb3\u3002 \u6c38\u9060\u306e\u4e09\u65e5\u5929\u4e0b \u5f39\u5e55\u5929\u90aa\u9b3c\u7ec8\u76d8\u66f2 \u60f3\u8981\u4e0b\u514b\u4e0a\u7684\u5929\u90aa\u9b3c\u3002 \u5e73\u548c\u4e2d\u5374\u900f\u9732\u7740\u6df1\u6df1\u7edd\u671b\uff0c\u4e0d\u65ad\u7684\u5c1d\u8bd5\u7740\uff0c\u4e0d\u77e5\u9053\u4f55\u65f6\u624d\u662f\u5c3d\u5934\u3002 \u800c\u4e14 zun \u6545\u610f\u505a\u7684\u662f\uff0c\u524d\u540e\u80fd\u4e00\u76f4\u8854\u63a5\u8d77\u6765\u7684\u3002 \u56e0\u4e3a\u8fd9\u662f\u6e38\u620f\u6700\u7ec8\u76d8\u7684\u66f2\u5b50\u3002 \u800c\u4e14 retry \u4e0d\u4f1a\u5237\u65b0 bgm\uff0c\u8fd9\u662f\u5c11\u89c1\u7684\uff0c\u5c31\u597d\u6bd4\uff0c\u4f60\u771f\u7684\u662f\u88ab\u56f0\u5728\u5669\u68a6\u5f53\u4e2d\uff0c\u4e00\u6b21\u6b21\u4e00\u6b21\u6b21\u7684 miss\uff0c\u53ea\u60f3\u8981\u5b8c\u6210\u4e0b\u514b\u4e0a\u7684\u7406\u60f3\uff0c\u60f3\u8981\u5b88\u4f4f\u81ea\u5df1\u7684\uff0c\u77ed\u547d\u7684\u4e09\u65e5\u5929\u4e0b\u3002 ZUN \u4e5f\u8bf4\uff1a\u6700\u540e\u662f\u6bd4\u8f83\u6e29\u987a\u7684\u611f\u89c9\u7684\u66f2\u5b50 \u3000\u53ea\u4e0d\u8fc7\u5f39\u5e55\u662f\u5730\u72f1\u3002\u4e0d\u5982\u8bf4\u66f2\u5b50\u70d8\u6258\u7740\u7edd\u671b\u611f\u3002 \u3000\u771f\u7684\u662f\u4e0d\u53ef\u80fd\u7684\u5417\uff1f \u6574\u9996\u66f2\u5b50\u6700\u4f20\u795e\u7684\u5e94\u8be5\u662f\u7b1b\u5b50\u3002 \u7b1b\u5b50\u4e00\u51fa\u6765\u771f\u7684\u6709\u90a3\u79cd\uff0c\u7edd\u671b\u5230\u6781\u70b9\u7684\u611f\u53d7\u4e86\u3002 \u4eff\u4f5b\u80fd\u770b\u5230\uff0c\u6b63\u90aa\u7528\u7740\u9053\u5177\uff0c\u4e0d\u65ad\u5411\u5e7b\u60f3\u4e61\u7684\u9876\u70b9\u6311\u6218\u7740\uff0c\u51b2\u51fb\u7740\uff0c\u6211\u5f88\u559c\u6b22\u8fd9\u79cd\u7edd\u671b\u4e2d\u7684\u575a\u6bc5\u611f\u3002 \u5f88\u559c\u6b22\u8fd9\u4e2a\uff0c\u5efa\u8bae\u591a\u542c\u542c\uff0c\u6211\u66fe\u7ecf\u4e3a\u4e86\u4e00\u5f20\u7b26\u5361miss\u4e86\u63a5\u8fd11000\u6b21\uff0c\u51e0\u5929\u91cc\u8111\u5b50\u53ea\u6709\u8fd9\u9996\u66f2\u5b50\u3002 \u867d\u7136\u75db\u82e6\uff0c\u4f46\u662f\u8fd8\u662f\uff0c\u5f88\u6709\u610f\u8574\u3002 \u66f2\u5b50\u7684\u610f\u601d\uff0c\u9002\u7528\u7684\u5730\u65b9\uff0c\u4e5f\u6709\u70b9\u7c7b\u4f3c\u3010\u4f60\u6c38\u8fdc\u5230\u8fbe\u4e0d\u4e86\u6b7b\u4ea1\u7684\u771f\u5b9e\u3011\u8fd9\u6837\u7684\u611f\u89c9\u3002 \u9e93\u306e\u795e\u793e \u98ce\u795e\u5f55 Ending \u57fa\u672c\u6ca1\u6709\u600e\u4e48\u542c\u8fc7\uff08\u9ebb\u5c06\u5c71\u592a\u96be\u4e86\uff09\uff0c\u53ea\u662f\u4e34\u65f6\u9009\u7684\uff0c\u4f46\u662f\u4e5f\u5f88\u6709\u610f\u601d\u3002 \u8fd9\u662f Ending \u66f2\uff0c\u5176\u5b9e\u5bf9\u4e8e\u521a\u521a\u6298\u78e8\u4e86\u5f88\u4e45\uff0c\u597d\u4e0d\u5bb9\u6613\u901a\u5173\u7684\u5927\u5bb6\u3002 Ending \u548c Staff \u66f2\u662f\u771f\u7684\u5f88\u611f\u4eba\u7684\u3002 \u8131\u4e0b\u8033\u673a\uff0c\u644a\u5728\u6905\u5b50\u4e0a\uff0c\u957f\u8212\u4e00\u53e3\u6c14\u3002 \u6bcf\u6b21\u901a\u5173\u90fd\u4f1a\u8fd9\u6837\uff0c\u591a\u4e45\u4e86\u8fd8\u662f\u6ca1\u6709\u6539\u53d8\uff0c\u597d\u6bd4\uff0c\u7ecf\u5386\u8fc7\u65e0\u6570\u632b\u6298\uff0c\u7ec8\u4e8e\u770b\u5230\u4e86\u66d9\u5149\u7684\u611f\u89c9\u3002 \u5f88\u559c\u6b22\u8fd9\u79cd\u54f2\u5b66\uff0c\u4e0d\u5c11\u4eba\u5176\u5b9e\u6700\u559c\u6b22\u7684\u66f2\u5b50\u5e94\u8be5\u662f ED\uff0c\u6211\u53ef\u4ee5\u8bf4\uff0c\u5927\u90e8\u5206 ED \u90fd\u662f\u51b7\u95e8\u795e\u66f2\u3002 hmx\uff0cyym\uff0cyyc \u4e09\u4f5c ED\uff0c\u5982\u679c\u5f53\u4f5c\u7ec4\u66f2\u653e\u5728\u4e00\u8d77\uff0c\u771f\u7684\u5f88\u5389\u5bb3\u3002 \u5927\u68a6\u521d\u9192\u7684\u611f\u89c9\uff0c\u4eff\u4f5b\u521a\u4ece\u5e7b\u60f3\u5f53\u4e2d\u8131\u8eab\u3002 \u65e7\u5730\u7344\u8857\u9053\u3092\u884c\u304f \u5730\u7075\u6bbf\u4e09\u9762\u9053\u4e2d \u6b22\u5feb\u7684\u611f\u89c9\u3002 \u6f2b\u6b65\u5728\u5e9f\u5f03\u7684\u65e7\u5730\u72f1\u8857\u9053\u4e0a\u3002 \u4f46\u662f\u5b83\u4ecd\u65e7\u7e41\u534e\uff0c\u9b3c\u4eec\u5728\u8fd9\u91cc\u996e\u9152\u4f5c\u4e50\uff0c\u597d\u4e0d\u5feb\u6d3b\u3002 \u6574\u9996\u66f2\u5b50\u5c31\u662f\uff0c\u7ed9\u6211\u4e00\u79cd\uff0c\u4e2d\u56fd\u7684\u5143\u5bb5\u706f\u4f1a\uff0c\u65e5\u672c\u7684\u70df\u706b\u796d\u5178\u4e00\u6837\u7684\u611f\u89c9\u3002 \u70ed\u70ed\u95f9\u95f9\u7684\uff0c\u5927\u5bb6\u90fd\u7a7f\u7740\u65b0\u8863\u670d\uff0c\u559c\u6c14\u6d0b\u6d0b\u7684\u8d70\u5728\u8857\u4e0a\uff0c\u624b\u4e0a\u4e5f\u8bb8\u8fd8\u62ff\u7740\u7ae0\u9c7c\u70e7\u4ec0\u4e48\u7684\u3002 \u60f3\u8d77\u4e00\u4e2a\u753b\u9762\uff0c\u5f88\u9002\u5408\u8fd9\u9996\u6b4c\uff0c\u4f46\u662f\u627e\u4e0d\u5230\u56fe\u4e86\u3002 \u7a7f\u7740\u548c\u670d\u7684\u5c11\u5973\u7684\u6728\u5c50\u677e\u4e86\uff0c\u53f3\u624b\u62ff\u7740\u7ae0\u9c7c\u70e7\uff0c\u5f88\u4f18\u96c5\u7684\u5f2f\u4e0b\u8eab\u53bb\uff0c\u5de6\u624b\u521a\u78b0\u5230\u978b\u8ddf\u7684\u65f6\u5019\uff0c\u5374\u56de\u5934\u770b\u7740\u4f60\uff0c\u8138\u4e0a\u8fd8\u6709\u72d0\u9762\u5177\uff0c\u624e\u7740\u4e38\u5b50\u5934\u3002 \u84e6\u7136\u56de\u9996\uff0c\u90a3\u4eba\u5374\u5728\uff0c\u706f\u706b\u9611\u73ca\u5904\u3002 \u5f00\u59cb\u65f6\u95f4\uff1a07:30 \u9752\u7a7a\u306e\u5f71 \u661f\u83b2\u8239\u6807\u9898\u66f2 \u56de\u8f6c\u4e00\u4e0b\u7684\u90a3\u4e2a\u6ed1\u97f3\u5f88\u6709\u610f\u601d\u54e6\u3002 \u6253\u5f00\u661f\u83b2\u8239\u7684\u65f6\u5019\uff0c\u97f3\u4e50\u60f3\u8d77\uff0c\u5c0f\u5b9d\u8239\u5e26\u7740\u7075\u68a6\u4ece\u5c4f\u5e55\u53f3\u8fb9\u98de\u5165\u3002 \u81ea\u4fe1\u7684\u7b11\u7740\uff0c\u597d\u50cf\u662f\u5bf9\u524d\u65b9\u4e91\u96fe\u4e2d\u7684\u5b9d\u8239\u52bf\u5728\u5fc5\u5f97\u3002 \u4e0d\u6127\u662f\u7075\u68a6\u5462\u3002 \u4e00\u5982\u65e2\u5f80\u7684\u4e3b\u65cb\u5f8b\uff0c\u8fd8\u662f\u5f88\u559c\u6b22\uff0c\u661f\u83b2\u8239\u7684\u97f3\u6548\u6bd4\u8f83\u7279\u522b\uff0c\u662f\u90a3\u79cd\u5f88\u6e05\u65b0\u7684\u611f\u89c9\uff0c\u8fd9\u4e2a\u975e\u5e38 suki\u3002 \u5922\u6bbf\u5927\u7940\u5edf \u795e\u7075\u5e99\u4e94\u9762\u9053\u4e2d zun \u5f88\u5389\u5bb3\uff01 \u8fd9\u9996\u66f2\u5b50\u4e00\u542c\u5c31\u662f\uff0c\u90a3\u79cd\u7a7a\u7075\u7684\u5730\u4e0b\u5de8\u5927\u7a7a\u95f4\u7684\u611f\u89c9\u5427\uff01 \u5e94\u8be5\u662f\u56e0\u4e3a\u97f3\u8f68\u91cc\u7c7b\u4f3c\u56de\u97f3\u7684\u548c\u58f0\u3002 30 \u79d2\u5de6\u53f3\u7684\u65cb\u5f8b\u7ed9\u4eba\u4e00\u79cd\u5f88\u6e05\u51c0\u7684\u611f\u89c9\uff0c\u4eff\u4f5b\u8fd9\u91cc\u662f\u4ec0\u4e48\uff0c\u80dc\u5730\u3002 \u9f13\u70b9\u4ecd\u65e7\u5f88\u6709\u7164\u6c14\u7076\u7684\u7279\u8272\u3002 01:05 \u5de6\u53f3\u5c60\u81ea\u53e4\u51fa\u573a\uff0c\u597d\u50cf\u662f\u5e7d\u7075\u4e00\u822c\uff0c\u662f\u7a81\u7136\u65cb\u8f6c\u7740\u51fa\u73b0\u7684\u3002\uff08\u4e0d\u8fc7\u7eb8\u7247\u4eba\u8fd9\u70b9\u6709\u70b9\u51fa\u620f\u4e86\u3002 01:31 \u7684\u65f6\u5019\uff0c\u968f\u7740\u82cf\u6211\u7684\u90a3\u4e2a\u7c7b\u4f3c\u7535\u98ce\u66b4\u7684\u6da1\u65cb\u5f39\u5e55\uff0c\u5f88\u6709\u611f\u89c9\uff01 \u80cc\u666f\u91cc\u65cb\u8f6c\u7684\u68a6\u6bbf\uff0c\u6f2b\u5929\u6e38\u79bb\u7684\u795e\u7075\uff0c\u4e0d\u65ad\u53d8\u5316\u7740\u7684\u3002 \u5f88\u4ee4\u4eba\u5174\u594b\uff0cZun \u8fd9\u9996\u5199\u7684\u771f\u7684\u5f88\u795e\u3002 \u5f00\u59cb\u65f6\u95f4\uff1a20:54 \u4e0d\u601d\u8b70\u306a\u304a\u7953\u3044\u68d2 \u8f89\u9488\u57ce\u6807\u9898\u66f2 \u4e0d\u53ef\u601d\u8bae\u7684\u8c61\u62d4\u868c\uff08\u5212\u6389\u3002 \u8fd9\u662f\u6700\u6ca1\u6709 ZUN \u5473\u9053\u7684\u6807\u9898\u66f2\u3002 \u4f46\u662f\u6211\u7b2c\u4e00\u6b21\u542c\u5230\u7684\u65f6\u5019\u5c31\uff0c\u7279\u522b\u559c\u6b22\u3002 \u5927\u5bb6\u90fd\u8bf4\u8fd9\u662f ZUN \u4f5c\u66f2\u6c34\u5e73\u7684\u5dc5\u5cf0\u4e4b\u4e00\uff0c\u5f88\u9707\u64bc\uff0c\u4e4b\u524d\u4ece\u672a\u6709\u8fc7\u7684\u611f\u89c9\u3002 \u771f\u7684\uff0c\u4f60\u53ef\u80fd\u8981\u8bd5\u7740\u542c\u4e00\u4e0b zun \u4ee5\u524d\u6807\u9898\u66f2\u5077\u61d2\u7684\u98ce\u683c\u624d\u77e5\u9053\u3002 \u4e3a\u4ec0\u4e48\u5927\u5bb6\u90fd\u559c\u6b22\u8fd9\u9996\u3002 \u8fd9\u57fa\u672c\u662f\u516c\u8ba4\u7684\u6807\u9898\u66f2\u7b2c\u4e00\u4e86\u3002 \u6211\u6253\u5f00\u6e38\u620f\u4ec0\u4e48\u90fd\u6ca1\u6709\u5e72\uff0c\u5c31\u542c\u4e86\u597d\u51e0\u8fb9\u66f2\u5b50\u3002 \u987a\u4fbf\u770b\u770b\u96be\u5f97\u753b\u7684\u975e\u5e38\u6b63\u5e38\u751a\u81f3\u6709\u70b9\u6da9\u7684\u7075\u68a6\uff08 01:20 \u5de6\u53f3\u4e3b\u65cb\u5f8b\u51fa\u6765\u7684\u65f6\u5019\u5feb\u54ed\u4e86\u3002 \u771f\u7684\uff0cbeyond expression, really breathtaking. \u795e\u793e\u304b\u3089\u898b\u3048\u308b\u6708 \u7ec0\u73e0\u4f20 Ending \u7ec0\u73e0\u4f20\uff0c\u7cfb\u5217\u6700\u96be\u4f5c\u7684 Ending\u3002 \u7ed3\u5c40\u5199\u4e86\u4e0d\u5c11\u6709\u6df1\u610f\u7684\u8bdd\uff0c\u81f3\u5c11\u6211\u8fd9\u4e48\u89c9\u5f97\u3002 \u8fd9\u79cd\uff0c\u6709\u70b9\u7a7a\u7075\u7684\u611f\u89c9\uff0c\u5b87\u5b99\u7684\u98ce\u683c\uff0c\u5f88\u7b26\u5408\u7ec0\u73e0\u4f20\u7684\u6c14\u8d28\u3002 \u7ec0\u73e0\u4f20\u5e94\u8be5\u662f\u6700\u3010lunatic\u3011\u7684\u4e00\u4f5c\u4e86\uff0c\u4e0d\u7ba1\u662f\u4ece\u96be\u5ea6\u8fd8\u662f\u4ece\u8bbe\u5b9a\u4e0a\u3002 \u751a\u81f3\u8fd8\u6709\u4e24\u4f4d\u4e1c\u65b9\u6218\u529b\u5929\u82b1\u677f\u548c\u4f60\u5728 EX \u6218\u6597\uff08\u867d\u7136\u5df2\u7ecf\u653e\u4e86\u5f88\u591a\u6c34\u4e86\u3002 \u4e00\u9762\u7684\u5f39\u5e55\u5c31\u5df2\u7ecf\u5f88\u4e0d\u53cb\u5584\u4e86\uff0c\u771f\u7684\u662f\u72c2\u6c14\uff0c\u66f2\u5b50\u57fa\u672c\u4e5f\u5f88\u72c2\u6c14\uff08\u9664\u4e86\u56db\u9762\u9053\u4e2d\uff0c\u90a3\u4e2a\u6211\u89c9\u5f97\u662f\u8d85\u7ea7\u795e\u66f2\uff0c\u4f46\u662f\u4e0d\u9002\u5408\u653e\u5728\u8fd9\u91cc\uff0c\u6211\u8981\u5355\u72ec\u5199\uff09 \u6240\u4ee5\u554a\uff0c\u4e5f\u662f\u90a3\u79cd\uff0c\u5927\u68a6\u521d\u9192\u7684\u611f\u89c9\uff0c\u800c\u4e14\u5c31\u662f\u9760\u5bf9\u6bd4\u3002 \u8d85\u7ea7\u72c2\u6c14\u7684\u5f39\u5e55\uff0c\u66f2\u5b50\uff0c\u6700\u540e\u6765\u6536\u5c3e\u7684\u786e\u5b9e\u8fd9\u6837\u4e00\u9996\u5e73\u548c\u7684\u66f2\u5b50\u3002 \u4ece\u795e\u793e\u6240\u671b\u89c1\u7684\u6708\uff0c\u6a21\u7cca\u4e86\u8ba4\u77e5\uff0c\u72c2\u6c14\u7684\u6708\u3002","title":"2023.01.28"},{"location":"misc/netrw-usage/","text":"\u4e4b\u524d\u4e00\u76f4\u4f7f\u7528\u7684\u662f NERDTree \u6765\u4f5c\u4e3a Vim \u4e2d\u7684\u6587\u4ef6\u7ba1\u7406\u7cfb\u7edf\u3002 \u4f46\u662f\u6211\u67d0\u6b21\u5c1d\u8bd5\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u65f6\uff0c\u521a\u8f93\u5165\u4e86\u4e00\u4e2a\u8def\u5f84\u5c31\u6309\u4e0b\u4e86 \uff0c\u4e8e\u662f\u6211\u8fdb\u5165\u4e86\u8fd9\u4e2a\u754c\u9762\uff1a \u6211\u4e00\u770b\uff0c\u6b38\u54df\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a File Manager \u5417\uff1f \u7136\u540e\u60f3\u5230\u8fd9\u4e1c\u897f\u5e94\u8be5\u662f Vim \u81ea\u5e26\u7684\uff0c\u4e8e\u662f\u6211\u5c1d\u8bd5\u5229\u7528\u4e86 / \u4e4b\u7c7b\u7684\u547d\u4ee4\uff0c\u53d1\u73b0\u5b83\u53ef\u4ee5\u517c\u5bb9\u4e00\u4e9b\u57fa\u672c\u7684 Vim \u547d\u4ee4\uff0c\u8fd9\u5c31\u5f88\u723d\u4e86\uff01 \u5f00\u4e86 \u4e4b\u540e\u8bfb\u4e86\u8bfb manual\uff0c\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u4e0d\u662f\u4e00\u822c\u7684\u597d\u7528\u554a\uff01\u7b80\u76f4\u5c31\u662f\u6587\u4ef6\u7ba1\u7406\u5668\u91cc\u7684 vim\uff01 \u867d\u7136\u4f46\u662f\uff0c\u6211\u53ea\u7528\u8fc7 Windows File Explorer \u548c Ubuntu \u7684 File Manager\uff0c\u597d\u50cf\u4e5f\u6ca1\u8d44\u683c\u8bf4\u8fd9\u8bdd\u3002 \u65e9\u671f\u7535\u8111\u7684 File Manage \u5e94\u8be5\u5c31\u662f\u7c7b\u4f3c\u8fd9\u4e2a\u754c\u9762\u7684\uff0c\u4e0d\u8fc7\u597d\u7528\u5c31\u884c\uff0c\u7ba1\u5b83\u90a3\u4e48\u591a\u3002 \u53ef\u4ee5\u5728\u7f16\u8f91\u6587\u4ef6\u7684\u65f6\u5019\u8f93\u5165 :Vex \u4ee5\u6253\u5f00\u5f53\u524d\u76ee\u5f55\uff0c :Sex \u662f\u6c34\u5e73\u5206\u5272\uff0c\u6216\u8005 :E \u5f53\u524d\u76ee\u5f55\u64cd\u4f5c \u03c8(\uff40\u2207\u00b4)\u03c8 i \uff1a \u53ef\u4ee5\u5207\u6362\u663e\u793a\u6a21\u5f0f\uff0c\u6811\u5f62\uff0c\u5217\u8868\u5f62\uff0c\u8be6\u7ec6\u4fe1\u606f s \uff1a \u9009\u62e9\u6392\u5e8f\u65b9\u5f0f r \uff1a \u53cd\u5411\u6392\u5e8f\u5217\u8868 cd \uff1a \u4f7f\u5f97\u5f53\u524d\u6253\u5f00\u7684\u76ee\u5f55\u4e3a\u5de5\u4f5c\u76ee\u5f55 d \uff1a \u65b0\u5efa\u76ee\u5f55 C-l \uff1a \u5237\u65b0\u5f53\u524d\u76ee\u5f55 a \uff1a \u663e\u793a\u9690\u85cf\u6587\u4ef6 C-h \uff1a \u6307\u5b9a\u5173\u952e\u5b57\uff0c\u9690\u85cf\u76f8\u5173\u6587\u4ef6\u3002 u/U \uff1a\u540e\u9000/\u524d\u8fdb\uff08\u4e0a\u4e00\u4e2a\uff0c\u4e0b\u4e00\u4e2a\u8bbf\u95ee\u8fc7\u7684\u76ee\u5f55\uff09 - \uff1a\u4e0a\u4e00\u7ea7\u76ee\u5f55\u3002 \u6587\u4ef6\u64cd\u4f5c \u03c8(\uff40\u2207\u00b4)\u03c8 % \uff1a \u65b0\u5efa\u6587\u4ef6 R \uff1a \u91cd\u547d\u540d\u9009\u4e2d\u6587\u4ef6 <CR> \uff1a \u5728\u5f53\u524d tab \u6253\u5f00\u9009\u4e2d\u6587\u4ef6 t \uff1a \u5728\u65b0\u7684 tab \u91cc\u6253\u5f00\u5bf9\u5e94\u6587\u4ef6\u3002 x \uff1a \u4f7f\u7528\u5173\u8054\u7a0b\u5e8f\u6253\u5f00\u6587\u4ef6 v/o \uff1a\u5728\u65b0 window \u6253\u5f00\u6587\u4ef6\uff0c\u6c34\u5e73/\u7ad6\u76f4\u5206\u5272\u7a97\u53e3\u3002 p \uff1a \u9884\u89c8\u6587\u4ef6 qf \uff1a\u663e\u793a\u5f53\u524d\u6587\u4ef6\u4fe1\u606f\u3002 \u6587\u4ef6\u6807\u8bb0 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e2a\u4e3b\u8981\u662f\u7528\u6765\u79fb\u52a8\u548c\u590d\u5236\u7684\u3002 mf \uff1a\u6807\u8bb0\u8be5\u6587\u4ef6\uff08\u4f1a\u4ee5\u7c97\u4f53\u663e\u793a\uff09 mF \uff1a\u53d6\u6d88\u6807\u8bb0 mt \uff1a\u8bbe\u7f6e\u5f53\u524d\u6d4f\u89c8\u7684\u76ee\u5f55\u4e3a\u76ee\u6807\u6587\u4ef6\u5939 mm \uff1a\u628a\u6240\u6709\u6807\u8bb0\u6587\u4ef6\u79fb\u52a8\u5230\u76ee\u6807\u6587\u4ef6\u5939\u4e2d mc \uff1a\u590d\u5236 md \uff1a\u6700\u591a\u5bf9\u6bd4\u4e09\u4e2a\u6807\u8bb0\u6587\u4ef6\u3002 <n>Th \uff1a\u4ee5\u7b2c \u4e2a\u5386\u53f2\u76ee\u5f55\u4f5c\u4e3a\u76ee\u6807\u6587\u4ef6\u5939\u3002 \u6709\u4e86\u8fd9\u4e2a\u4e1c\u897f\uff0c\u4f60\u4e0d\u9700\u8981\u88c5\u989d\u5916\u7684\u63d2\u4ef6\u4e5f\u80fd\u83b7\u5f97 Vscode \u7c7b\u4f3c\u7684\u6d4f\u89c8\u6548\u679c\uff01","title":"Netrw \u7b80\u660e\u4f7f\u7528\u6307\u5317"},{"location":"misc/netrw-usage/#_1","text":"i \uff1a \u53ef\u4ee5\u5207\u6362\u663e\u793a\u6a21\u5f0f\uff0c\u6811\u5f62\uff0c\u5217\u8868\u5f62\uff0c\u8be6\u7ec6\u4fe1\u606f s \uff1a \u9009\u62e9\u6392\u5e8f\u65b9\u5f0f r \uff1a \u53cd\u5411\u6392\u5e8f\u5217\u8868 cd \uff1a \u4f7f\u5f97\u5f53\u524d\u6253\u5f00\u7684\u76ee\u5f55\u4e3a\u5de5\u4f5c\u76ee\u5f55 d \uff1a \u65b0\u5efa\u76ee\u5f55 C-l \uff1a \u5237\u65b0\u5f53\u524d\u76ee\u5f55 a \uff1a \u663e\u793a\u9690\u85cf\u6587\u4ef6 C-h \uff1a \u6307\u5b9a\u5173\u952e\u5b57\uff0c\u9690\u85cf\u76f8\u5173\u6587\u4ef6\u3002 u/U \uff1a\u540e\u9000/\u524d\u8fdb\uff08\u4e0a\u4e00\u4e2a\uff0c\u4e0b\u4e00\u4e2a\u8bbf\u95ee\u8fc7\u7684\u76ee\u5f55\uff09 - \uff1a\u4e0a\u4e00\u7ea7\u76ee\u5f55\u3002","title":"\u5f53\u524d\u76ee\u5f55\u64cd\u4f5c"},{"location":"misc/netrw-usage/#_2","text":"% \uff1a \u65b0\u5efa\u6587\u4ef6 R \uff1a \u91cd\u547d\u540d\u9009\u4e2d\u6587\u4ef6 <CR> \uff1a \u5728\u5f53\u524d tab \u6253\u5f00\u9009\u4e2d\u6587\u4ef6 t \uff1a \u5728\u65b0\u7684 tab \u91cc\u6253\u5f00\u5bf9\u5e94\u6587\u4ef6\u3002 x \uff1a \u4f7f\u7528\u5173\u8054\u7a0b\u5e8f\u6253\u5f00\u6587\u4ef6 v/o \uff1a\u5728\u65b0 window \u6253\u5f00\u6587\u4ef6\uff0c\u6c34\u5e73/\u7ad6\u76f4\u5206\u5272\u7a97\u53e3\u3002 p \uff1a \u9884\u89c8\u6587\u4ef6 qf \uff1a\u663e\u793a\u5f53\u524d\u6587\u4ef6\u4fe1\u606f\u3002","title":"\u6587\u4ef6\u64cd\u4f5c"},{"location":"misc/netrw-usage/#_3","text":"\u8fd9\u4e2a\u4e3b\u8981\u662f\u7528\u6765\u79fb\u52a8\u548c\u590d\u5236\u7684\u3002 mf \uff1a\u6807\u8bb0\u8be5\u6587\u4ef6\uff08\u4f1a\u4ee5\u7c97\u4f53\u663e\u793a\uff09 mF \uff1a\u53d6\u6d88\u6807\u8bb0 mt \uff1a\u8bbe\u7f6e\u5f53\u524d\u6d4f\u89c8\u7684\u76ee\u5f55\u4e3a\u76ee\u6807\u6587\u4ef6\u5939 mm \uff1a\u628a\u6240\u6709\u6807\u8bb0\u6587\u4ef6\u79fb\u52a8\u5230\u76ee\u6807\u6587\u4ef6\u5939\u4e2d mc \uff1a\u590d\u5236 md \uff1a\u6700\u591a\u5bf9\u6bd4\u4e09\u4e2a\u6807\u8bb0\u6587\u4ef6\u3002 <n>Th \uff1a\u4ee5\u7b2c \u4e2a\u5386\u53f2\u76ee\u5f55\u4f5c\u4e3a\u76ee\u6807\u6587\u4ef6\u5939\u3002 \u6709\u4e86\u8fd9\u4e2a\u4e1c\u897f\uff0c\u4f60\u4e0d\u9700\u8981\u88c5\u989d\u5916\u7684\u63d2\u4ef6\u4e5f\u80fd\u83b7\u5f97 Vscode \u7c7b\u4f3c\u7684\u6d4f\u89c8\u6548\u679c\uff01","title":"\u6587\u4ef6\u6807\u8bb0"},{"location":"misc/shaber/","text":"\u7206\u96f6\u6280\u5de7 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5f88\u65e9\u4e4b\u524d\u6211\u5f04\u8fc7\u4e00\u7bc7\uff0c\u4f46\u662f\u611f\u89c9\u56e0\u4e3a\u4e00\u4e9b\u539f\u56e0\u5176\u5b9e\u91cc\u9762\u5f88\u591a\u662f\u56e0\u4e3a\u7b97\u6cd5\u672c\u8eab\u4e0d\u6e05\u695a\u5f04\u51fa\u6765\u7684\u7b11\u8bdd\u3002 \u8fd9\u8fb9\u5199\u70b9\u6b63\u5e38\u9009\u624b\u4f1a\u72af\u5f97\u9519\u8bef\uff0c\u800c\u4e14\u4e00\u822c\u662f\u5e7f\u6cdb\u51fa\u73b0\u7684\uff0c\u5c0f\u4f17\u9519\u8bef\u6211\u5c31\u5355\u72ec\u5f52\u7c7b\u4e86\u3002 \u51fa\u8fd9\u4e2a\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u63d0\u9192\u81ea\u5df1\u68c0\u67e5\u7684\u65f6\u5019\u8981\u68c0\u67e5\u4ec0\u4e48\u3002 \u7279\u522b\u662f\u90a3\u79cd\uff0c\u672c\u6765\u53ef\u4ee5\u62ff\u5206\u7684\uff0c\u4f46\u662f\u5bb9\u6613\u5bc4\u6389\u7684\u7ec6\u8282\u3002 \u8f83\u4e3a\u901a\u7528\u89e3\u51b3\u65b9\u6848 \uff1a\u6253\u5f00 -Wall -Wextra -Wshadow \u3002 \u5b87\u5b99\u65e0\u654c\u7a76\u6781\u5389\u5bb3\u89e3\u51b3\u65b9\u6848 \uff1a\u6253\u4e2a\u6912\u5148\uff0c\u9632\u6b62\u56e0\u601d\u7eea\u968f\u673a\u6e38\u8d70\u5bfc\u81f4\u7684\u732a\u8111\u8fc7\u8f7d\u3002 \u591a\u6d4b\u4e0d\u6e05\u7a7a\u3002 \u89e3\u51b3\u65b9\u6848\uff1a\u591a\u6d4b\u9898\u5148\u5199\u4e2a Init() \u653e\u5728\u90a3\u91cc\u3002 998244853 \u3002 \u89e3\u51b3\u65b9\u6848\uff1aC-c+C-v\u3002 \u4e0d\u5f00\u957f\u957f\u89c1\u7956\u5b97\u3002 \u89e3\u51b3\u65b9\u6848\uff0c\u5148\u7b97\u4e00\u4e0b\u6781\u7aef\u7684\u60c5\u51b5\u3002 \u591a\u6d4b\u8bfb\u5165\u6ca1\u8bfb\u5b8c\uff0c\u5224\u4e86\u65e0\u89e3\u76f4\u63a5 continue\u3002 \u89e3\u51b3\u65b9\u6848\uff1a\u4f60\u5148\u522b\u6025\uff0c\u8bb0\u5f55\u4e00\u4e2a vis\uff0c\u8bfb\u5b8c\u4e86\u518d\u8bf4\u3002 \u5728\u4e0d\u77e5\u9053\u8fd0\u7b97\u4f18\u5148\u7ea7\u7684\u60c5\u51b5\u4e0b\u4e0d\u6253\u62ec\u53f7 \u89e3\u51b3\u65b9\u6848\uff1a\u591a\u6253\u51e0\u4e2a\u62ec\u53f7\u53c8\u4e0d\u4f1a\u6b7b \u503c\u57df\u548c \\(n\\) \u7684\u4e0a\u4e0b\u754c\u76f8\u540c\uff0c\u4f46\u662f\u5e76\u4e0d\u76f8\u5173\uff0c\u8fd9\u65f6\u5019\u4f60\u4e0d\u8981\u4ee5\u4e3a\u7ed9\u51fa\u7684\u6570\u636e\u5c31\u662f\u6392\u5217\u4e86\u3002 \u89e3\u51b3\u65b9\u6848\uff1a\u8bfb\u9898\uff0c\u6ca1\u6551\u4e86\u3002 \u7ebf\u6bb5\u6811\u51e0\u500d\u7a7a\u95f4\uff1f\u62bd\u8c61\u51fa\u6765\u7684\u56fe\u8bba\u9898\u8fb9\u6570\u70b9\u6570\u5f00\u591a\u5c11\uff1f\u5404\u79cd\u8868\u793a\u4e0a\u754c\u7684\u53d8\u91cf\u662f\u4e0d\u662f\u6df7\u7528\u4e86\uff1f \u89e3\u51b3\u65b9\u6848\uff1a\u5f00\u6570\u7ec4\u4e4b\u524d\u5148\u60f3\u4e00\u4e0b\u3002 \u8d1f\u6570\u53d6\u6a21\u52a0\u4e86 mod \u6ca1\u6709\uff1f\u53d6\u6a21\u7684\u65f6\u5019\u6709\u6ca1\u6709\u53ef\u80fd\u56e0\u4e3a\u5c11\u53d6\u6a21\u6ea2\u51fa\uff1f \u89e3\u51b3\u65b9\u6848\uff1a\u4e0d\u7136\u5199\u4e2a safe_mod \uff0c\u4e0d\u7136\u5c31\u5f00 i64 \u7136\u540e\u8fb9\u52a0\u8fb9\u6a21\u3002 pow, log2\uff0csqrt \u662f\u6709\u4e00\u5b9a\u7cbe\u5ea6\u8bef\u5dee\u7684\uff0c\u4e0d\u8981\u592a\u8fc7\u4e8e\u76f8\u4fe1\u5b83\u4eec\u3002 \u89e3\u51b3\u65b9\u6848\uff1a\u590d\u6742\u5ea6\u5141\u8bb8\u7684\u60c5\u51b5\u4e0b\u6211\u53ef\u4ee5\u4e8c\u5206\u624b\u5199 pow, sqrt \u5728\u6574\u6570\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u6709\u4e8b\u60c5\u3002 \u4f60\u662f\u4e0d\u662f\u6ca1\u8003\u8651\u7c7b\u578b\u5f3a\u5236\u8f6c\u6362\uff1f \u89e3\u51b3\u65b9\u6848\uff1a\u591a\u7c7b\u578b\u8fd0\u7b97\u7684\u65f6\u5019\u52a0\u70b9 * 1ll, * 1.0 \u3002 \u4f60\u662f\u4e0d\u662f\u53c8\u5fd8\u8bb0 memset head \u6570\u7ec4\u4e86\uff0c\u4f60\u662f\u4e0d\u662f\u6ca1\u5199 pop\uff0c\u4f60\u662f\u4e0d\u662f\u8fb9\u754c\u6ca1 return\uff0c\u4f60\u662f\u4e0d\u662f\u5904\u7406\u8fde\u7eed\u989c\u8272\u6bb5\u5b8c\u4e86\u76f4\u63a5 continue \u4e86\u3002 \u89e3\u51b3\u65b9\u6848\uff1aTLE \u7684\u65f6\u5019\u4f60\u53ef\u4ee5\u60f3\u60f3\u8fd9\u4e9b\u3002 \u4f60\u662f\u4e0d\u662f\u5fd8\u4e86\u6709\u8fd0\u7b97\u7b26\u77ed\u8def\u8fd9\u56de\u4e8b\u513f\u3002 \u89e3\u51b3\u65b9\u6848\uff1a\u5f53\u4f60\u53d1\u73b0\u6709\u7684\u6761\u4ef6\u6ca1\u6709\u88ab\u5224\u7684\u65f6\u5019\u770b\u4e00\u770b\u3002 \u53c8\u6ca1\u8003\u8651\u8fb9\u754c\u60c5\u51b5\uff1f \u89e3\u51b3\u65b9\u6848\uff1a\u6ca1\u6551\u4e86\u3002 \u4f60\u60f3\u6e05\u695a\u4e86 C++ \u548c C \u5206\u522b\u662f\u600e\u4e48\u5904\u7406\u5b57\u7b26\u4e32\u7684\u5417\uff1f \u89e3\u51b3\u65b9\u6848\uff1a\u8bf7\u4f60\u8bfb\u4e00\u8bfb cpp ref\u3002","title":"\u7206\u96f6\u6280\u5de7"},{"location":"misc/shaber/#_1","text":"\u5f88\u65e9\u4e4b\u524d\u6211\u5f04\u8fc7\u4e00\u7bc7\uff0c\u4f46\u662f\u611f\u89c9\u56e0\u4e3a\u4e00\u4e9b\u539f\u56e0\u5176\u5b9e\u91cc\u9762\u5f88\u591a\u662f\u56e0\u4e3a\u7b97\u6cd5\u672c\u8eab\u4e0d\u6e05\u695a\u5f04\u51fa\u6765\u7684\u7b11\u8bdd\u3002 \u8fd9\u8fb9\u5199\u70b9\u6b63\u5e38\u9009\u624b\u4f1a\u72af\u5f97\u9519\u8bef\uff0c\u800c\u4e14\u4e00\u822c\u662f\u5e7f\u6cdb\u51fa\u73b0\u7684\uff0c\u5c0f\u4f17\u9519\u8bef\u6211\u5c31\u5355\u72ec\u5f52\u7c7b\u4e86\u3002 \u51fa\u8fd9\u4e2a\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u63d0\u9192\u81ea\u5df1\u68c0\u67e5\u7684\u65f6\u5019\u8981\u68c0\u67e5\u4ec0\u4e48\u3002 \u7279\u522b\u662f\u90a3\u79cd\uff0c\u672c\u6765\u53ef\u4ee5\u62ff\u5206\u7684\uff0c\u4f46\u662f\u5bb9\u6613\u5bc4\u6389\u7684\u7ec6\u8282\u3002 \u8f83\u4e3a\u901a\u7528\u89e3\u51b3\u65b9\u6848 \uff1a\u6253\u5f00 -Wall -Wextra -Wshadow \u3002 \u5b87\u5b99\u65e0\u654c\u7a76\u6781\u5389\u5bb3\u89e3\u51b3\u65b9\u6848 \uff1a\u6253\u4e2a\u6912\u5148\uff0c\u9632\u6b62\u56e0\u601d\u7eea\u968f\u673a\u6e38\u8d70\u5bfc\u81f4\u7684\u732a\u8111\u8fc7\u8f7d\u3002 \u591a\u6d4b\u4e0d\u6e05\u7a7a\u3002 \u89e3\u51b3\u65b9\u6848\uff1a\u591a\u6d4b\u9898\u5148\u5199\u4e2a Init() \u653e\u5728\u90a3\u91cc\u3002 998244853 \u3002 \u89e3\u51b3\u65b9\u6848\uff1aC-c+C-v\u3002 \u4e0d\u5f00\u957f\u957f\u89c1\u7956\u5b97\u3002 \u89e3\u51b3\u65b9\u6848\uff0c\u5148\u7b97\u4e00\u4e0b\u6781\u7aef\u7684\u60c5\u51b5\u3002 \u591a\u6d4b\u8bfb\u5165\u6ca1\u8bfb\u5b8c\uff0c\u5224\u4e86\u65e0\u89e3\u76f4\u63a5 continue\u3002 \u89e3\u51b3\u65b9\u6848\uff1a\u4f60\u5148\u522b\u6025\uff0c\u8bb0\u5f55\u4e00\u4e2a vis\uff0c\u8bfb\u5b8c\u4e86\u518d\u8bf4\u3002 \u5728\u4e0d\u77e5\u9053\u8fd0\u7b97\u4f18\u5148\u7ea7\u7684\u60c5\u51b5\u4e0b\u4e0d\u6253\u62ec\u53f7 \u89e3\u51b3\u65b9\u6848\uff1a\u591a\u6253\u51e0\u4e2a\u62ec\u53f7\u53c8\u4e0d\u4f1a\u6b7b \u503c\u57df\u548c \\(n\\) \u7684\u4e0a\u4e0b\u754c\u76f8\u540c\uff0c\u4f46\u662f\u5e76\u4e0d\u76f8\u5173\uff0c\u8fd9\u65f6\u5019\u4f60\u4e0d\u8981\u4ee5\u4e3a\u7ed9\u51fa\u7684\u6570\u636e\u5c31\u662f\u6392\u5217\u4e86\u3002 \u89e3\u51b3\u65b9\u6848\uff1a\u8bfb\u9898\uff0c\u6ca1\u6551\u4e86\u3002 \u7ebf\u6bb5\u6811\u51e0\u500d\u7a7a\u95f4\uff1f\u62bd\u8c61\u51fa\u6765\u7684\u56fe\u8bba\u9898\u8fb9\u6570\u70b9\u6570\u5f00\u591a\u5c11\uff1f\u5404\u79cd\u8868\u793a\u4e0a\u754c\u7684\u53d8\u91cf\u662f\u4e0d\u662f\u6df7\u7528\u4e86\uff1f \u89e3\u51b3\u65b9\u6848\uff1a\u5f00\u6570\u7ec4\u4e4b\u524d\u5148\u60f3\u4e00\u4e0b\u3002 \u8d1f\u6570\u53d6\u6a21\u52a0\u4e86 mod \u6ca1\u6709\uff1f\u53d6\u6a21\u7684\u65f6\u5019\u6709\u6ca1\u6709\u53ef\u80fd\u56e0\u4e3a\u5c11\u53d6\u6a21\u6ea2\u51fa\uff1f \u89e3\u51b3\u65b9\u6848\uff1a\u4e0d\u7136\u5199\u4e2a safe_mod \uff0c\u4e0d\u7136\u5c31\u5f00 i64 \u7136\u540e\u8fb9\u52a0\u8fb9\u6a21\u3002 pow, log2\uff0csqrt \u662f\u6709\u4e00\u5b9a\u7cbe\u5ea6\u8bef\u5dee\u7684\uff0c\u4e0d\u8981\u592a\u8fc7\u4e8e\u76f8\u4fe1\u5b83\u4eec\u3002 \u89e3\u51b3\u65b9\u6848\uff1a\u590d\u6742\u5ea6\u5141\u8bb8\u7684\u60c5\u51b5\u4e0b\u6211\u53ef\u4ee5\u4e8c\u5206\u624b\u5199 pow, sqrt \u5728\u6574\u6570\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u6709\u4e8b\u60c5\u3002 \u4f60\u662f\u4e0d\u662f\u6ca1\u8003\u8651\u7c7b\u578b\u5f3a\u5236\u8f6c\u6362\uff1f \u89e3\u51b3\u65b9\u6848\uff1a\u591a\u7c7b\u578b\u8fd0\u7b97\u7684\u65f6\u5019\u52a0\u70b9 * 1ll, * 1.0 \u3002 \u4f60\u662f\u4e0d\u662f\u53c8\u5fd8\u8bb0 memset head \u6570\u7ec4\u4e86\uff0c\u4f60\u662f\u4e0d\u662f\u6ca1\u5199 pop\uff0c\u4f60\u662f\u4e0d\u662f\u8fb9\u754c\u6ca1 return\uff0c\u4f60\u662f\u4e0d\u662f\u5904\u7406\u8fde\u7eed\u989c\u8272\u6bb5\u5b8c\u4e86\u76f4\u63a5 continue \u4e86\u3002 \u89e3\u51b3\u65b9\u6848\uff1aTLE \u7684\u65f6\u5019\u4f60\u53ef\u4ee5\u60f3\u60f3\u8fd9\u4e9b\u3002 \u4f60\u662f\u4e0d\u662f\u5fd8\u4e86\u6709\u8fd0\u7b97\u7b26\u77ed\u8def\u8fd9\u56de\u4e8b\u513f\u3002 \u89e3\u51b3\u65b9\u6848\uff1a\u5f53\u4f60\u53d1\u73b0\u6709\u7684\u6761\u4ef6\u6ca1\u6709\u88ab\u5224\u7684\u65f6\u5019\u770b\u4e00\u770b\u3002 \u53c8\u6ca1\u8003\u8651\u8fb9\u754c\u60c5\u51b5\uff1f \u89e3\u51b3\u65b9\u6848\uff1a\u6ca1\u6551\u4e86\u3002 \u4f60\u60f3\u6e05\u695a\u4e86 C++ \u548c C \u5206\u522b\u662f\u600e\u4e48\u5904\u7406\u5b57\u7b26\u4e32\u7684\u5417\uff1f \u89e3\u51b3\u65b9\u6848\uff1a\u8bf7\u4f60\u8bfb\u4e00\u8bfb cpp ref\u3002","title":"\u7206\u96f6\u6280\u5de7"},{"location":"misc/template/","text":"\u8fd9\u91cc\u7528\u6765\u653e\u4e00\u4e9b\u5e38\u7528\u7684\u6a21\u677f\uff0c\u4e3b\u8981\u662f\u6709\u4e9b\u4e1c\u897f\u4e0d\u60f3\u653e\u5230 User snippet \u91cc\u9762\u3002 \u5176\u5b9e\u6211\u5bf9\u6a21\u677f\u4f9d\u8d56\u6027\u4e0d\u662f\u5f88\u5f3a\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e1c\u897f\u6bd4\u8f83\u5c11\u3002 \u8d77\u624b\u5f0f \u03c8(\uff40\u2207\u00b4)\u03c8 \u901a\u7528\u6a21\u677f \u03c8(\uff40\u2207\u00b4)\u03c8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); return 0 ; } // ()()()(? \u6ce8\u610f\u5982\u679c\u662f\u4ea4\u4e92\u9898\u8981\u628a endl \u7684 define \u5220\u6389\u3002 Freopen \u03c8(\uff40\u2207\u00b4)\u03c8 1 2 freopen ( \".in\" , \"r\" , stdin ); freopen ( \".out\" , \"w\" , stdout ); \u5feb\u901f IO \u03c8(\uff40\u2207\u00b4)\u03c8 \u53d6\u6d88\u6d41\u540c\u6b65 \u03c8(\uff40\u2207\u00b4)\u03c8 1 2 cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); \u6ce8\u610f\u53d6\u6d88\u6d41\u540c\u6b65\u4e4b\u540e\u8f93\u51fa\u4f1a\u7edf\u4e00\u96c6\u5408\u5230\u4e00\u8d77\u3002 exceptions \u662f\u7528\u6765\u5224\u8bfb\u5165\u662f\u5426\u5408\u6cd5\u7684\uff0c\u4e0d\u5408\u6cd5\u4f1a RE\uff0c\u7528\u6765\u67e5\u9519\u3002 FastIO \u03c8(\uff40\u2207\u00b4)\u03c8 \u6284\u7684 lcx \u7684\u5e76\u9b54\u6539\u4e86\u4e00\u4e0b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <cctype> template < typename __Tp > void read ( __Tp & x ) { int f = x = 0 ; char ch = getchar (); for (; ! isdigit ( ch ); ch = getchar ()) if ( ch == '-' ) f = 1 ; for (; isdigit ( ch ); ch = getchar ()) x = ( x << 1 ) + ( x << 3 ) + ( ch ^ 48 ); if ( f ) x = - x ; } void read ( char & ch ) { for ( ch = getchar (); isspace ( ch ); ch = getchar ()); } template < typename __Tp1 , typename ... __Tp2 > void read ( __Tp1 & x , __Tp2 & ... y ) { read ( x ), read ( y ...); } template < typename __Tp > void write ( __Tp x ) { if ( x < 0 ) putchar ( '-' ), x = - x ; if ( x > 9 ) write ( x / 10 ); putchar ( x % 10 + 48 ); } void write ( char ch ) { putchar ( ch ); } void write ( const char * s ) { for (; * s ; ++ s ) putchar ( * s ); } template < typename __Tp1 , typename ... __Tp2 > void write ( __Tp1 x , __Tp2 ... y ) { write ( x ), write ( y ...); } \u81ea\u52a8\u53d6\u6a21 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6284\u7684 Atcoder-modint\uff0c\u4f46\u662f\u662f\u4ece\u4f73\u7238\u90a3\u91cc copy \u7684\uff0c\u53ef\u80fd\u88ab\u4f73\u7238\u9b54\u6539\u8fc7\uff0c\u56e0\u4e3a\u8fd8\u5e26\u4e86 BR\u3002 \u7565\u5fae\u505a\u4e86\u4e00\u70b9\u6539\u52a8\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 using i64 = long long ; using ldb = long double ; using u64 = unsigned long long ; constexpr i64 safe_mod ( i64 x , i64 m ) { return x %= m , x < 0 ? x + m : x ; } constexpr i64 pow_mod_constexpr ( i64 x , i64 n , int m ) { if ( m == 1 ) return 0 ; unsigned _m = m ; uint64_t r = 1 , _x = safe_mod ( x , m ); for (; n ; n >>= 1 , _x = _x * _x % _m ) if ( n & 1 ) r = r * _x % m ; return r ; } constexpr bool is_prime_constexpr ( int n ) { if ( n <= 1 ) return false ; if ( n == 2 || n == 7 || n == 61 ) return true ; if ( n % 2 == 0 ) return false ; i64 d = n - 1 ; while ( ~ d & 1 ) d /= 2 ; for ( i64 a : { 2 , 7 , 61 }) { i64 t = d , y = pow_mod_constexpr ( a , t , n ); while ( t != n - 1 && y != 1 && y != n - 1 ) y = y * y % n , t <<= 1 ; if ( y != n - 1 && t % 2 == 0 ) return false ; } return true ; } constexpr pair < i64 , i64 > inv_gcd ( i64 a , i64 b ) { a = safe_mod ( a , b ); if ( a == 0 ) return { b , 0 }; i64 s = b , t = a , m0 = 0 , m1 = 1 ; while ( t ) { i64 u = s / t ; s -= t * u , m0 -= m1 * u ; i64 tmp = s ; s = t , t = tmp , tmp = m0 , m0 = m1 , m1 = tmp ; } if ( m0 < 0 ) m0 += b / s ; return { s , m0 }; } struct Barrett_Reduction { unsigned m ; uint64_t im ; Barrett_Reduction ( unsigned m ) : m ( m ), im ( ~ 0ull / m + 1 ) {} unsigned mul ( unsigned a , unsigned b ) const { uint64_t z = ( uint64_t ) a * b , x = ( __uint128_t ) z * im >> 64 ; unsigned v = z - x * m ; return m <= v ? v + m : v ; } }; template < int m > struct static_modint { using _mint = static_modint ; public : static _mint raw ( int v ) { _mint x ; return x . _v = v , x ; } static_modint () : _v ( 0 ) {} template < class __Tp > static_modint ( __Tp v ) { i64 x = v % m ; _v = x < 0 ? x + m : x ; } unsigned val () const { return _v ; } _mint & operator ++ () { if ( ++ _v == m ) _v = 0 ; return * this ; } _mint & operator -- () { if ( ! _v -- ) _v = m - 1 ; return * this ; } _mint operator ++ ( int ) { _mint res = * this ; ++* this ; return res ; } _mint operator -- ( int ) { _mint res = * this ; --* this ; return res ; } _mint & operator += ( const _mint & rhs ) { _v += rhs . _v ; if ( _v >= m ) _v -= m ; return * this ; } _mint & operator -= ( const _mint & rhs ) { _v -= rhs . _v ; if ( _v >= m ) _v += m ; return * this ; } _mint & operator *= ( const _mint & rhs ) { uint64_t z = _v ; z *= rhs . _v , _v = z % m ; return * this ; } _mint & operator /= ( const _mint & rhs ) { return * this = * this * rhs . inv (); } _mint operator + () const { return * this ; } _mint operator - () const { return _mint () - * this ; } _mint pow ( i64 n ) const { assert ( 0 <= n ); _mint x = * this , r = 1 ; for (; n ; n >>= 1 , x *= x ) if ( n & 1 ) r *= x ; return r ; } _mint inv () const { if ( prime ) { assert ( _v ); return pow ( m - 2 ); } else { auto eg = inv_gcd ( _v , m ); assert ( eg . first == 1 ); return eg . second ; } } friend _mint operator + ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) += rhs ; } friend _mint operator - ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) -= rhs ; } friend _mint operator * ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) *= rhs ; } friend _mint operator / ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) /= rhs ; } friend bool operator == ( const _mint & lhs , const _mint & rhs ) { return lhs . _v == rhs . _v ; } friend bool operator != ( const _mint & lhs , const _mint & rhs ) { return lhs . _v != rhs . _v ; } private : unsigned _v ; static constexpr bool prime = is_prime_constexpr ( m ); }; struct dynamic_modint { using _mint = dynamic_modint ; public : static void set_mod ( int m ) { assert ( 1 <= m ), bt = Barrett_Reduction ( m ); } static _mint raw ( int v ) { _mint x ; return x . _v = v , x ; } dynamic_modint () : _v ( 0 ) {} template < class __Tp > dynamic_modint ( __Tp v ) { i64 x = v % ( int ) bt . m ; _v = x < 0 ? x + bt . m : x ; } unsigned val () const { return _v ; } _mint & operator ++ () { if ( ++ _v == bt . m ) _v = 0 ; return * this ; } _mint & operator -- () { if ( ! _v -- ) _v = bt . m - 1 ; return * this ; } _mint operator ++ ( int ) { _mint res = * this ; ++* this ; return res ; } _mint operator -- ( int ) { _mint res = * this ; --* this ; return res ; } _mint & operator += ( const _mint & rhs ) { _v += rhs . _v ; if ( _v >= bt . m ) _v -= bt . m ; return * this ; } _mint & operator -= ( const _mint & rhs ) { _v += bt . m - rhs . _v ; if ( _v >= bt . m ) _v -= bt . m ; return * this ; } _mint & operator *= ( const _mint & rhs ) { _v = bt . mul ( _v , rhs . _v ); return * this ; } _mint & operator /= ( const _mint & rhs ) { return * this = * this * rhs . inv (); } _mint operator + () const { return * this ; } _mint operator - () const { return _mint () - * this ; } _mint pow ( i64 n ) const { assert ( 0 <= n ); _mint x = * this , r = 1 ; for (; n ; n >>= 1 , x *= x ) if ( n & 1 ) r *= x ; return r ; } _mint inv () const { auto eg = inv_gcd ( _v , bt . m ); assert ( eg . first == 1 ); return eg . second ; } friend _mint operator + ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) += rhs ; } friend _mint operator - ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) -= rhs ; } friend _mint operator * ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) *= rhs ; } friend _mint operator / ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) /= rhs ; } friend bool operator == ( const _mint & lhs , const _mint & rhs ) { return lhs . _v == rhs . _v ; } friend bool operator != ( const _mint & lhs , const _mint & rhs ) { return lhs . _v != rhs . _v ; } private : unsigned _v ; static Barrett_Reduction bt ; }; using modint = dynamic_modint ; using barrett = Barrett_Reduction ; barrett modint :: bt = 998244353 ; void read ( modint & x ) { int __value ; read ( __value ); x = __value ; return ; } void write ( modint x ) { write ( x . val ()); } // in main modint a , b , c ; \u706b\u8f66\u5934 \u03c8(\uff40\u2207\u00b4)\u03c8 1 2 #pragma GCC target(\"avx,sse2,sse3,sse4,mmx\") #pragma GCC optimize(\"Ofast\", \"inline\", \"-ffast-math\") \u5bf9\u62cd \u03c8(\uff40\u2207\u00b4)\u03c8 Bash\uff08\u6284\u7684\u4f73\u7238\u7684\uff09: 1 2 3 4 5 6 7 while true ; do ./gen > in ./bf < in > 1 ./my < in > 2 diff 1 2 if [ $? -ne 0 ] ; then break ; fi done cmd 1 2 3 4 5 6 7 : loop gen.exe bf.exe my.exe fc b.ans b.usr if %errorlevel% == 0 goto loop pause Need Freopen.","title":"\u6a21\u677f"},{"location":"misc/template/#_1","text":"","title":"\u8d77\u624b\u5f0f"},{"location":"misc/template/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); return 0 ; } // ()()()(? \u6ce8\u610f\u5982\u679c\u662f\u4ea4\u4e92\u9898\u8981\u628a endl \u7684 define \u5220\u6389\u3002","title":"\u901a\u7528\u6a21\u677f"},{"location":"misc/template/#freopen","text":"1 2 freopen ( \".in\" , \"r\" , stdin ); freopen ( \".out\" , \"w\" , stdout );","title":"Freopen"},{"location":"misc/template/#io","text":"","title":"\u5feb\u901f IO"},{"location":"misc/template/#_3","text":"1 2 cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); \u6ce8\u610f\u53d6\u6d88\u6d41\u540c\u6b65\u4e4b\u540e\u8f93\u51fa\u4f1a\u7edf\u4e00\u96c6\u5408\u5230\u4e00\u8d77\u3002 exceptions \u662f\u7528\u6765\u5224\u8bfb\u5165\u662f\u5426\u5408\u6cd5\u7684\uff0c\u4e0d\u5408\u6cd5\u4f1a RE\uff0c\u7528\u6765\u67e5\u9519\u3002","title":"\u53d6\u6d88\u6d41\u540c\u6b65"},{"location":"misc/template/#fastio","text":"\u6284\u7684 lcx \u7684\u5e76\u9b54\u6539\u4e86\u4e00\u4e0b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <cctype> template < typename __Tp > void read ( __Tp & x ) { int f = x = 0 ; char ch = getchar (); for (; ! isdigit ( ch ); ch = getchar ()) if ( ch == '-' ) f = 1 ; for (; isdigit ( ch ); ch = getchar ()) x = ( x << 1 ) + ( x << 3 ) + ( ch ^ 48 ); if ( f ) x = - x ; } void read ( char & ch ) { for ( ch = getchar (); isspace ( ch ); ch = getchar ()); } template < typename __Tp1 , typename ... __Tp2 > void read ( __Tp1 & x , __Tp2 & ... y ) { read ( x ), read ( y ...); } template < typename __Tp > void write ( __Tp x ) { if ( x < 0 ) putchar ( '-' ), x = - x ; if ( x > 9 ) write ( x / 10 ); putchar ( x % 10 + 48 ); } void write ( char ch ) { putchar ( ch ); } void write ( const char * s ) { for (; * s ; ++ s ) putchar ( * s ); } template < typename __Tp1 , typename ... __Tp2 > void write ( __Tp1 x , __Tp2 ... y ) { write ( x ), write ( y ...); }","title":"FastIO"},{"location":"misc/template/#_4","text":"\u6284\u7684 Atcoder-modint\uff0c\u4f46\u662f\u662f\u4ece\u4f73\u7238\u90a3\u91cc copy \u7684\uff0c\u53ef\u80fd\u88ab\u4f73\u7238\u9b54\u6539\u8fc7\uff0c\u56e0\u4e3a\u8fd8\u5e26\u4e86 BR\u3002 \u7565\u5fae\u505a\u4e86\u4e00\u70b9\u6539\u52a8\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 using i64 = long long ; using ldb = long double ; using u64 = unsigned long long ; constexpr i64 safe_mod ( i64 x , i64 m ) { return x %= m , x < 0 ? x + m : x ; } constexpr i64 pow_mod_constexpr ( i64 x , i64 n , int m ) { if ( m == 1 ) return 0 ; unsigned _m = m ; uint64_t r = 1 , _x = safe_mod ( x , m ); for (; n ; n >>= 1 , _x = _x * _x % _m ) if ( n & 1 ) r = r * _x % m ; return r ; } constexpr bool is_prime_constexpr ( int n ) { if ( n <= 1 ) return false ; if ( n == 2 || n == 7 || n == 61 ) return true ; if ( n % 2 == 0 ) return false ; i64 d = n - 1 ; while ( ~ d & 1 ) d /= 2 ; for ( i64 a : { 2 , 7 , 61 }) { i64 t = d , y = pow_mod_constexpr ( a , t , n ); while ( t != n - 1 && y != 1 && y != n - 1 ) y = y * y % n , t <<= 1 ; if ( y != n - 1 && t % 2 == 0 ) return false ; } return true ; } constexpr pair < i64 , i64 > inv_gcd ( i64 a , i64 b ) { a = safe_mod ( a , b ); if ( a == 0 ) return { b , 0 }; i64 s = b , t = a , m0 = 0 , m1 = 1 ; while ( t ) { i64 u = s / t ; s -= t * u , m0 -= m1 * u ; i64 tmp = s ; s = t , t = tmp , tmp = m0 , m0 = m1 , m1 = tmp ; } if ( m0 < 0 ) m0 += b / s ; return { s , m0 }; } struct Barrett_Reduction { unsigned m ; uint64_t im ; Barrett_Reduction ( unsigned m ) : m ( m ), im ( ~ 0ull / m + 1 ) {} unsigned mul ( unsigned a , unsigned b ) const { uint64_t z = ( uint64_t ) a * b , x = ( __uint128_t ) z * im >> 64 ; unsigned v = z - x * m ; return m <= v ? v + m : v ; } }; template < int m > struct static_modint { using _mint = static_modint ; public : static _mint raw ( int v ) { _mint x ; return x . _v = v , x ; } static_modint () : _v ( 0 ) {} template < class __Tp > static_modint ( __Tp v ) { i64 x = v % m ; _v = x < 0 ? x + m : x ; } unsigned val () const { return _v ; } _mint & operator ++ () { if ( ++ _v == m ) _v = 0 ; return * this ; } _mint & operator -- () { if ( ! _v -- ) _v = m - 1 ; return * this ; } _mint operator ++ ( int ) { _mint res = * this ; ++* this ; return res ; } _mint operator -- ( int ) { _mint res = * this ; --* this ; return res ; } _mint & operator += ( const _mint & rhs ) { _v += rhs . _v ; if ( _v >= m ) _v -= m ; return * this ; } _mint & operator -= ( const _mint & rhs ) { _v -= rhs . _v ; if ( _v >= m ) _v += m ; return * this ; } _mint & operator *= ( const _mint & rhs ) { uint64_t z = _v ; z *= rhs . _v , _v = z % m ; return * this ; } _mint & operator /= ( const _mint & rhs ) { return * this = * this * rhs . inv (); } _mint operator + () const { return * this ; } _mint operator - () const { return _mint () - * this ; } _mint pow ( i64 n ) const { assert ( 0 <= n ); _mint x = * this , r = 1 ; for (; n ; n >>= 1 , x *= x ) if ( n & 1 ) r *= x ; return r ; } _mint inv () const { if ( prime ) { assert ( _v ); return pow ( m - 2 ); } else { auto eg = inv_gcd ( _v , m ); assert ( eg . first == 1 ); return eg . second ; } } friend _mint operator + ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) += rhs ; } friend _mint operator - ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) -= rhs ; } friend _mint operator * ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) *= rhs ; } friend _mint operator / ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) /= rhs ; } friend bool operator == ( const _mint & lhs , const _mint & rhs ) { return lhs . _v == rhs . _v ; } friend bool operator != ( const _mint & lhs , const _mint & rhs ) { return lhs . _v != rhs . _v ; } private : unsigned _v ; static constexpr bool prime = is_prime_constexpr ( m ); }; struct dynamic_modint { using _mint = dynamic_modint ; public : static void set_mod ( int m ) { assert ( 1 <= m ), bt = Barrett_Reduction ( m ); } static _mint raw ( int v ) { _mint x ; return x . _v = v , x ; } dynamic_modint () : _v ( 0 ) {} template < class __Tp > dynamic_modint ( __Tp v ) { i64 x = v % ( int ) bt . m ; _v = x < 0 ? x + bt . m : x ; } unsigned val () const { return _v ; } _mint & operator ++ () { if ( ++ _v == bt . m ) _v = 0 ; return * this ; } _mint & operator -- () { if ( ! _v -- ) _v = bt . m - 1 ; return * this ; } _mint operator ++ ( int ) { _mint res = * this ; ++* this ; return res ; } _mint operator -- ( int ) { _mint res = * this ; --* this ; return res ; } _mint & operator += ( const _mint & rhs ) { _v += rhs . _v ; if ( _v >= bt . m ) _v -= bt . m ; return * this ; } _mint & operator -= ( const _mint & rhs ) { _v += bt . m - rhs . _v ; if ( _v >= bt . m ) _v -= bt . m ; return * this ; } _mint & operator *= ( const _mint & rhs ) { _v = bt . mul ( _v , rhs . _v ); return * this ; } _mint & operator /= ( const _mint & rhs ) { return * this = * this * rhs . inv (); } _mint operator + () const { return * this ; } _mint operator - () const { return _mint () - * this ; } _mint pow ( i64 n ) const { assert ( 0 <= n ); _mint x = * this , r = 1 ; for (; n ; n >>= 1 , x *= x ) if ( n & 1 ) r *= x ; return r ; } _mint inv () const { auto eg = inv_gcd ( _v , bt . m ); assert ( eg . first == 1 ); return eg . second ; } friend _mint operator + ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) += rhs ; } friend _mint operator - ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) -= rhs ; } friend _mint operator * ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) *= rhs ; } friend _mint operator / ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) /= rhs ; } friend bool operator == ( const _mint & lhs , const _mint & rhs ) { return lhs . _v == rhs . _v ; } friend bool operator != ( const _mint & lhs , const _mint & rhs ) { return lhs . _v != rhs . _v ; } private : unsigned _v ; static Barrett_Reduction bt ; }; using modint = dynamic_modint ; using barrett = Barrett_Reduction ; barrett modint :: bt = 998244353 ; void read ( modint & x ) { int __value ; read ( __value ); x = __value ; return ; } void write ( modint x ) { write ( x . val ()); } // in main modint a , b , c ;","title":"\u81ea\u52a8\u53d6\u6a21"},{"location":"misc/template/#_5","text":"1 2 #pragma GCC target(\"avx,sse2,sse3,sse4,mmx\") #pragma GCC optimize(\"Ofast\", \"inline\", \"-ffast-math\")","title":"\u706b\u8f66\u5934"},{"location":"misc/template/#_6","text":"Bash\uff08\u6284\u7684\u4f73\u7238\u7684\uff09: 1 2 3 4 5 6 7 while true ; do ./gen > in ./bf < in > 1 ./my < in > 2 diff 1 2 if [ $? -ne 0 ] ; then break ; fi done cmd 1 2 3 4 5 6 7 : loop gen.exe bf.exe my.exe fc b.ans b.usr if %errorlevel% == 0 goto loop pause Need Freopen.","title":"\u5bf9\u62cd"},{"location":"misc/vim-pref/","text":"\u7528\u6765\u7528\u53bb\uff0c\u515c\u515c\u8f6c\u8f6c\uff0c\u8fd8\u662f\u56de\u5230\u4e86 Vim \u8fd9\u8be5\u6b7b\u7684 Editor \u4e0a\u9762\u6765\u3002 \u4e4b\u524d\u518d\u4e00\u6b21\u653e\u5f03 Vim \u7684\u539f\u56e0\u662f\u54cd\u5e94\u901f\u5ea6\u7a81\u7136\u6162\u7684\u5b8c\u5168\u53d7\u4e0d\u4e86\uff0c\u6211\u8d77\u521d\u8ba4\u4e3a\u662f Gvim windows \u9002\u914d\u7684\u95ee\u9898\u3002 \u540e\u6765\u5f97\u77e5\u4e86\u4e00\u4e9b\u5173\u4e8e Vim \u5e95\u5c42\u76f8\u5173\u7684\u4e1c\u897f\u4e4b\u540e\uff0c\u6392\u67e5\u4e86\u81ea\u5df1\u539f\u6765\u7684 .vimrc \uff0c\u53d1\u73b0\u7f6a\u9b41\u7978\u9996\u662f Vim-airline\u3002 \u5b83\u548c\u4e00\u4e2a\u53eb\u505a Whitespace check \u7684\u73a9\u610f\u513f\u51b2\u7a81\u4e86\uff0c\u5bfc\u81f4\u6587\u4ef6\u52a0\u8f7d\u901f\u5ea6\u5947\u6162\u65e0\u6bd4\uff0c\u5177\u4f53\u53ef\u4ee5\u770b\u8fd9\u4e2a issue \u3002 \u548c EarthMessenger \u4ea4\u6d41\u4e86\u4e00\u4e0b\uff0c\u89c9\u5f97\u5176\u5b9e Airline \u8fd9\u4e1c\u897f\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u82b1\u91cc\u80e1\u54e8\u7684\u73a9\u610f\u513f\uff0c\u5176\u5b9e\u4e5f\u6ca1\u6709\u5fc5\u8981\u3002 \u9664\u4e86\u5b83 git repo \u7684\u4e00\u4e9b\u663e\u793a\u4e4b\u5916\uff0c\u5176\u5b9e\u4e5f\u6ca1\u5565\u7528\u3002 \u8fd8\u6709\u4e9b\u539f\u56e0\u662f\uff0c\u6709\u4e9b\u4f7f\u7528\u975e vim script \u7684\u8bed\u8a00\u7f16\u5199\u7684 extension\uff0c\u5728\u548c vim \u4ea4\u4e92\u7684\u65f6\u5019\u5bb9\u6613\u56e0\u4e3a\u63a5\u53e3\u4e4b\u7c7b\u7684\u95ee\u9898\u54cd\u5e94\u8fc7\u6162\u3002 \u7efc\u5408\u8003\u8651\u4e4b\u540e\uff0c\u6211\u89c9\u5f97\u5e94\u5f53\u5c1d\u8bd5\u4e00\u4e0b\u4e00\u4e2a\uff0c\u5c3d\u91cf\u8f7b\u91cf\u7ea7\uff0c\u914d\u7f6e\u4e0a\u624b\u5f88\u5feb\uff0c\u4f9d\u8d56\u5176\u4ed6\u7b2c\u4e09\u65b9\u8bed\u8a00\u548c\u8f6f\u4ef6\u6781\u5c11\u7684 Vim\u3002 \u6709\u4e9b\u4e4b\u524d\u89c9\u5f97\u65b9\u4fbf\uff0c\u5b9e\u9645\u4e0a\u8fdd\u80cc\u4e86\u521d\u8877\u7684\u4e60\u60ef\u4e5f\u53ef\u4ee5\u6539\u8fc7\u6765\u3002 C++ \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e2a\u662f\u6700\u57fa\u672c\u7684\u9700\u6c42\u3002 \u6b63\u5e38\u6765\u8bf4\u9700\u8981\u7684\u4e1c\u897f\u4e5f\u5c31\u8fd9\u4e9b\uff1a \u8bed\u6cd5\u9ad8\u4eae \u62ec\u53f7\u8865\u5168 \u4e00\u4e9b\u57fa\u672c\u7684\u4ee3\u7801\u683c\u5f0f\u5316\uff08 tab = 4 \uff0c\u81ea\u52a8\u6362\u884c\uff09 \u7f16\u8bd1\u548c\u8fd0\u884c \u8c03\u8bd5 \u7b2c\u4e00\u70b9\u6bd4\u8f83\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5728 vimrc \u91cc\u9762\u5199\u4e00\u53e5\uff1a 1 syntax on \u5c31\u53ef\u4ee5\u4e86\u3002 \u7b2c\u4e8c\u70b9\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u6211\u4e2a\u4eba\u4f7f\u7528\u4e60\u60ef\u662f\uff0c\u5e0c\u671b\u8f93\u5165\u524d\u534a\u62ec\u53f7\uff0c\u80fd\u76f4\u63a5\u5f39\u51fa\u540e\u534a\u62ec\u53f7\u5e76\u4e14\u81ea\u52a8\u8df3\u5230\u62ec\u53f7\u91cc\u9762\u3002 \u8fd9\u4e2a\u5229\u7528 vim \u7684\u6620\u5c04\u5c31\u53ef\u4ee5\u505a\u5230\uff1a 1 2 3 4 5 inoremap [ [] < Esc > i inoremap { < CR > {} < ESC > i < CR >< ESC > O inoremap ( ()< Esc > i inoremap ' ' ' < Esc > i inoremap \" \" \" < Esc > i \u7b2c\u4e8c\u884c\u9700\u8981\u5728\u6709 autoindent \u9009\u9879\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\uff0c\u8fd9\u6837\u4f1a\u81ea\u52a8\u6362\u884c\u5e76\u7f29\u8fdb\u5230\u5927\u62ec\u53f7\u91cc\u9762\uff0c\u8fd9\u4e2a\u539f\u7406\u4e5f\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u57fa\u672c\u7684 vim command. \u56e0\u4e3a\u6211\u4e00\u822c\u662f\u5927\u62ec\u53f7\u4e0d\u6362\u884c\u7684\uff0c\u6240\u4ee5\u6211\u4e00\u822c\u662f <SPACE>{<CR> \uff0c\u8fd9\u91cc\u53ea\u6620\u5c04\u4e86\u6362\u884c\u7684\u60c5\u51b5\uff0c\u884c\u5185\u82b1\u62ec\u53f7\u6211\u7528\u7684\u4e0d\u591a\uff0c\u7528\u4e86\u4e5f\u4e60\u60ef\u4e0d\u8865\u5168\uff0c\u6240\u4ee5\u8fd9\u6837\u5c31\u591f\u7528\u4e86\u3002 \u5f53\u7136\uff0c\u56e0\u4e3a vim \u5728\u5904\u7406\u6709\u516c\u5171\u524d\u7f00\u7684\u6620\u5c04\u65f6\u4f1a\u6709\u4e00\u4e2a timeoutlen\uff0c\u4e3a\u4e86\u65b9\u4fbf\u53ef\u4ee5\u6309\u7167\u81ea\u5df1\u624b\u901f\u8c03\u6574\u4e00\u4e0b\uff0c\u6211\u4e00\u822c\u8bbe\u7f6e\u5728 600ms \u5de6\u53f3\u3002 \u7b2c\u4e09\u70b9\uff0c\u4e5f\u662f vimrc \u80fd\u76f4\u63a5\u89e3\u51b3\u7684\uff1a 1 set tabstop = 4 softtabstop = 4 shiftwidth = 4 autoindent \u5c31\u53ef\u4ee5\u4e86\u3002 \u7b2c\u56db\u70b9\uff0c\u5982\u679c\u76f4\u63a5\u5728 vim \u91cc\u4f7f\u7528 !<command> \uff0c\u5728 win \u4e0b\u4f1a\u5f39\u51fa\u7a97\u53e3\uff0clinux \u4e0b\u4f1a\u76f4\u63a5\u5728 vim \u91cc\u5207\u5c4f\u5230\u4e00\u4e2a\u7ec8\u7aef\u3002 \u4f46\u662f\u8fd9\u4e2a\u65f6\u5019\u4f60\u5c31\u4e0d\u80fd\u5bf9 vim \u91cc\u539f\u6709\u7684\u4ee3\u7801\u8fdb\u884c\u64cd\u4f5c\u4e86\uff0c\u8fd9\u5f88\u9ebb\u70e6\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5f02\u6b65\u7f16\u8bd1\u7684\u529f\u80fd\u3002 \u8fd9\u4e2a\u9700\u8981 Vim 8.1 \u4ee5\u53ca\u4e4b\u540e\u7684\u7248\u672c\uff0c\u56e0\u4e3a 8.1 \u5f00\u59cb\uff0cBram \u624d\u5f15\u5165\u4e86 job \u8fd9\u4e2a\u6982\u5ff5\u3002 Vim \u5708\u8457\u540d\u5927\u795e skywind3000 \u66fe\u7ecf\u5199\u8fc7\u4e00\u4e2a\u5f02\u6b65\u7f16\u8bd1\u63d2\u4ef6\uff0c\u4f46\u662f\u73b0\u5728\u5df2\u7ecf\u770b\u4e0d\u5230\u4e86\uff0c\u4e0d\u8fc7\u539f\u7406\u4ec0\u4e48\u7684\u53ef\u4ee5\u5728\u4ed6\u7684 \u535a\u5ba2 \u770b\u5230\u3002 \u56e0\u4e3a\u6211\u76ee\u524d\u6ca1\u6709\u65f6\u95f4\u6df1\u5165\u5b66\u4e60\u8fd9\u4e2a\u4e1c\u897f\uff0c\u6240\u4ee5\u6211\u9009\u62e9\u6bd4\u8f83\u7c97\u66b4\u7684\u65b9\u5f0f\uff0c\u76f4\u63a5\u5f00\u4e00\u4e2a Terminal \u7f16\u8bd1\uff0cvim8.1 \u4e4b\u540e\u53ef\u4ee5\u6709\u5185\u7f6e\u7684 terminal \uff0c\u4e0d\u8fc7 win \u4e0b\u9ed8\u8ba4 cmd\uff0c\u4e0d\u592a\u723d\uff0c\u6240\u4ee5\u6211\u8fd8\u662f\u6253\u7b97\u76f4\u63a5\u5f00\u4e2a Powershell\uff0c\u624b\u6253\u3002 \u53cd\u6b63\u6709\u4e0a\u4e0b\u952e\uff0c\u4e5f\u4e0d\u662f\u5f88\u8d39\u65f6\u95f4\uff0c\u800c\u4e14\u6539\u4e00\u4e9b\u9009\u9879\u4e5f\u5f88\u5feb\u3002 \u7b2c\u4e94\u70b9\uff0c\u6211\u5df2\u7ecf\u4e60\u60ef\u4e86 GDB \u8fd9\u79cd\u547d\u4ee4\u884c\u8c03\u8bd5\u7684\u6a21\u5f0f\uff0c\u6240\u4ee5\u76f4\u63a5 Terminal \u5c31\u884c\uff0c\u4e5f\u53ef\u4ee5\u5728 Vim8.1 \u8fc7\u540e\u4f7f\u7528 1 packadd termdebug \u6765\u5f15\u5165 TermDebug \u5305\uff0c\u7136\u540e\u4f60\u5c31\u53ef\u4ee5\u5728 Vim \u91cc\u5b9e\u65f6\u67e5\u770b\u65ad\u70b9\u4e86\u3002 \u8bdd\u8bf4 Bram \u5728\u66f4\u65b0 8.1 \u7684\u65f6\u5019\u90fd\u5728\u60f3\u5565\uff0c\u548b\u66f4\u65b0\u4e86\u8fd9\u4e48\u591a\u4eba\u6027\u5316\u529f\u80fd\u3002 \u5f88\u53ef\u60dc\u6211\u4eec\u5b66\u6821\u88c5\u7684\u662f 8.0\uff0c\u6709\u70b9\u96be\u53d7\uff0c\u6240\u4ee5\u6211\u4e00\u822c\u90fd\u662f\u624b\u52a8 vim90\u3002 Markdown \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e2a\u4e5f\u662f\u5f88\u91cd\u8981\u7684\u9700\u6c42\u3002 \u8bed\u6cd5\u9ad8\u4eae\u548c\u4e00\u4e9b\u57fa\u672c\u7684\u8865\u5168 Preview \u6587\u4ef6\u540d\u8865\u5168\u3002 \u7b2c\u4e00\u4e2a\uff0c\u56e0\u4e3a vim \u539f\u751f\u7684\u652f\u6301\u4e0d\u662f\u5f88\u597d\uff0c\u6240\u4ee5\u6211\u8fd8\u662f\u9009\u62e9\u4e86\u63d2\u4ef6\uff1a preservim\\vim-markdown \u3002 \u7b2c\u4e8c\u4e2a\uff0c\u6211\u4e4b\u524d\u5c31\u4e00\u76f4\u5728\u7528\uff0c\u662f\u4e00\u4e2a\u56fd\u5185\u5927\u4f6c\u5f00\u53d1\u7684\uff0c\u611f\u89c9\u633a\u597d\u7528\uff0c\u6bd5\u7adf\u53ef\u4ee5\u540c\u6b65\u9884\u89c8\u8fd8\u53ef\u4ee5\u5bfc\u51fa\uff1a iamcco/markdown-preview.nvim \u3002 \u7b2c\u4e09\u4e2a\u4e3b\u8981\u662f\u56e0\u4e3a\uff0c\u6211\u7ecf\u5e38\u4f1a\u5f15\u7528\u6211\u81ea\u5df1\u535a\u5ba2\u76ee\u5f55\u4e0b\u7684\u56fe\u7247\uff0c\u6587\u7ae0\uff0c\u6240\u4ee5\u8fd9\u4e1c\u897f\u5bf9\u6211\u6765\u8bf4\u5f88\u6709\u5fc5\u8981\u3002 \u6211\u4ee5\u524d\u4ee5\u4e3a vim \u6ca1\u6709\u5185\u7f6e\u8865\u5168\uff0c\u67d0\u5929\u95f2\u6765\u65e0\u4e8b\u4e71\u6309\u7684\u65f6\u5019\u6309\u51fa\u4e86\u4e00\u4e2a popmenu\uff0c\u53d1\u73b0\u53ef\u4ee5\u8865\u5168\u6587\u4ef6\uff0c\u641c\u7d22\u4e86\u4e00\u4e0b\u4e4b\u540e\u53d1\u73b0\u53ea\u9700\u8981 <C-x><C-f> \u5c31\u53ef\u4ee5\u4e86\u3002\u611f\u53f9\uff0cvim \u679c\u7136\u8fd8\u662f\u6280\u9ad8\u4e00\u7b79\uff0c\u65e9\u5c31\u6709\u4e86\u8fd9\u6837\u7684\u529f\u80fd\u3002 Misc \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u529f\u80fd\uff0c\u6bd4\u5982\u5b57\u5178\uff0c\u8fd9\u4e2a vim \u5176\u5b9e\u4e5f\u81ea\u5e26\u4e86\uff0c\u4e0d\u8fc7\u4e0d\u4f1a\u81ea\u52a8\u5f39\u51fa\uff0c\u800c\u662f\u8981 \u4e00\u4e0b\u3002 \u6709\u70b9\u96be\u53d7\uff0c\u6240\u4ee5\u6211\u9009\u62e9\u4e86 skywind3000 \u5199\u7684\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u8865\u5168\u7cfb\u7edf vim-auto-popmenu\uff0c\u529f\u80fd\u8fd8\u633a\u5f3a\u5927\uff0c\u5927\u90e8\u5206\u8bed\u8a00\u90fd\u6709\u5e38\u7528\u8bcd\u5178\uff08\u8981\u4e0b\u4e00\u4e0b\u4ed6\u914d\u7684\u5b57\u5178\u6587\u4ef6\u3002 \u800c\u4e14\u652f\u6301\u4ece dict\uff0cinclude\uff0cdir \u4e4b\u7c7b\u7684\u5730\u65b9\u7d22\u5f15\u3002 \u800c\u4e14\u5c31 100 \u6765\u884c\uff0c\u633a\u8212\u670d\u7684\uff0c\u901f\u5ea6\u4e5f\u5f88\u5feb\uff0c\u6211\u4e4b\u540e\u6253\u7b97 fork \u4e00\u4e0b\uff0c\u7ed9\u4e00\u4e9b\u5e38\u89c1\u516c\u5f0f\u4e5f\u52a0\u4e00\u4e2a\u8865\u5168\uff0c\u8fd9\u6837\u5199\u9898\u89e3\u901f\u5ea6\u80fd\u66f4\u5feb\u3002 \u7136\u540e\u5173\u4e8e\u7cfb\u7edf\u526a\u8d34\u677f\u8fd9\u4e2a\u4e8b\u60c5\uff0c\u8fd9\u4e2a\u6211\u4e4b\u524d\u559c\u6b22\u540c\u6b65 vim \u7684\u526a\u5207\u677f\u548c\u7cfb\u7edf\u526a\u8d34\u677f\u3002 \u4e0d\u8fc7\u73b0\u5728\u8fd8\u662f\u89c9\u5f97\uff0c\u72ec\u7acb\u4e00\u4e0b\u4f1a\u6bd4\u8f83\u597d\uff0c\u56e0\u4e3a vim \u91cc\u7ecf\u5e38 dd \u554a\uff0c\u4e34\u65f6\u79fb\u52a8\u4e00\u4e0b\u4ee3\u7801\u4e4b\u7c7b\u7684\uff0c\u526a\u5207\u64cd\u4f5c\u5f88\u591a\uff0c\u800c\u4e14 vim \u672c\u8eab\u8fd9\u4e2a register \u529f\u80fd\u53c8\u4e0d\u662f\u6446\u8bbe\uff0c\u80af\u5b9a\u8fd8\u662f\u8981\u7528\u7528\u7684\uff0c\u6240\u4ee5\u6211\u73b0\u5728\u7684 vimrc \u5c31\u6ca1\u6709\u540c\u6b65\u4e86\u3002 \u8fd8\u6709\u4e00\u4e2a\u662f\u5173\u4e8e\u76f8\u5bf9\u884c\u53f7\u7684\uff0c\u53d1\u73b0\u5176\u5b9e\u8fd9\u4e2a\u6bd4\u76f4\u63a5\u5f04\u884c\u53f7\u8981\u597d\u7684\u591a\uff0c\u53ef\u4ee5\u5c11\u6253\u4e00\u4e2a shift\uff1f \u4f46\u662f\u8981\u5feb\u901f\u8df3\u5230\u89c6\u91ce\u4e4b\u5916\u7684\u5730\u65b9\u5c31\u4e0d\u592a\u65b9\u4fbf\uff0c\u4f46\u662f\u53ef\u4ee5\u76f4\u63a5\u6eda\u5c4f\uff0c\u6240\u4ee5\u8fd8\u633a\u4e0d\u9519\u3002 \u4e2d\u6587\u8f93\u5165\u6cd5\u7684\u8bdd\uff0c\u4e4b\u524d\u770b\u5230\u8fc7\u4e00\u4e2a\u5185\u5d4c\uff0c\u53ef\u4ee5\u65b9\u4fbf\u5728\u670d\u52a1\u5668\u4e4b\u7c7b\u7684\u5730\u65b9\u64cd\u4f5c\uff0c\u4e0d\u8fc7\u6211\u6ca1\u6709\u5728\u5947\u602a\u7684\u73af\u5883\u4e0b\u8f93\u5165\u4e2d\u6587\u7684\u9700\u6c42\uff0c\u6240\u4ee5\u6682\u65f6\u4e0d\u9700\u8981\uff0c\u6709\u7cfb\u7edf\u8bcd\u5e93\u5c31\u597d\u4e86\u3002 \u4e0d\u8fc7\u8fd8\u6709\u4e00\u4e9b\u9700\u6c42\uff0c\u6bd4\u5982\u4e00\u4e2a\u5185\u7f6e todolist manager\uff0c\u6211\u6ca1\u6709\u770b\u5230\u6bd4\u8f83\u7b26\u5408\u6211\u5fc3\u610f\u7684\uff0c\u4e8e\u662f\u6253\u7b97\u81ea\u5df1\u5199 \u4e00\u4e2a \uff0cvim script \u592a\u70e6\uff0c\u6240\u4ee5\u6211\u7684\u60f3\u6cd5\u662f\u4f7f\u7528 c++ \u5b9e\u73b0\uff0c\u5728\u7ec8\u7aef\u5f53\u4e2d\u5de5\u4f5c\uff0c\u6709\u65f6\u95f4\u4e86\u518d\u8003\u8651\u901a\u8fc7\u8c03\u7528\u7684\u65b9\u5f0f\u5185\u5d4c\u5230 vim \u91cc\uff0c\u6216\u8005\u662f\u7528 Qt \u52a0\u4e2a\u56fe\u5f62\u5316\u754c\u9762\u76f4\u63a5\u5c01\u88c5\u6210\u5e94\u7528\u3002 \u6709\u4e00\u4e2a\u53eb Nerdcommenter \u7684\u63d2\u4ef6\uff0c\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e9b\u5feb\u901f\u6ce8\u91ca\u7684\u529f\u80fd\uff0c\u7ecf\u8fc7\u4ee5\u4e0b\u914d\u7f6e\u4e4b\u540e\u53ef\u4ee5\u76f4\u63a5\u7528 leader \u952e\u6765\u5b9e\u73b0\u6ce8\u91ca\uff08leader \u9ed8\u8ba4\u662f \\ \uff09\u3002 1 2 3 4 5 6 7 8 9 let g :NERDCreateDefaultMappings = 1 let g :NERDSpaceDelims = 1 let g :NERDCompactSexyComs = 1 let g :NERDDefaultAlign = 'left' let g :NERDAltDelims_java = 1 let g :NERDCustomDelimiters = { 'c' : { 'left' : '/**' , 'right' : '*/' } } let g :NERDCommentEmptyLines = 1 let g :NERDTrimTrailingWhitespace = 1 let g :NERDToggleCheckAllLines = 1 \u5c31\u53ea\u9700\u8981\u8bb0\u4f4f \\ci \u4ee5\u53ca \\cc \u5373\u53ef\u3002 \u8fd8\u6709\u4e00\u4e2a\u4e8b\u60c5\u662f\uff0c\u6211\u4e0d\u559c\u6b22\u5728\u6211\u7684\u4ee3\u7801\u6587\u4ef6\u5939\u91cc\u653e ~un, swp \u4e4b\u7c7b\u7684\u6587\u4ef6\u3002 \u4e0d\u8fc7\u8fd9\u4e9b\u6587\u4ef6\u8fd8\u662f\u975e\u5e38\u6709\u5fc5\u8981\u7684\uff0c\u6240\u4ee5\u6211\u9009\u62e9\u628a\u5b83\u4eec\u5b58\u5728\u4e00\u4e2a\u6307\u5b9a\u7684\u4f4d\u7f6e\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u7684\u8bbe\u7f6e\uff1a 1 2 3 4 set backup swapfile undofile set backupdir = C:\\Users\\Administrator\\.vimtmp\\ backup set undodir = C:\\Users\\Administrator\\.vimtmp\\undo set directory = C:\\Users\\Administrator\\.vimtmp\\swp \u5f53\u7136\uff0c\u5982\u679c\u63d0\u793a\u4e86\u65e0\u6cd5\u5199\u5165\uff0c\u5efa\u8bae\u68c0\u67e5\u4e00\u4e0b\u8def\u5f84\u683c\u5f0f\u662f\u4e0d\u662f\u6b63\u786e\u7684\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u770b :help backupdir \uff0c\u6216\u8005\u662f\u628a\u5f53\u524d\u6587\u4ef6\u539f\u6709\u7684 ~, ~un, .swp \u6587\u4ef6\u5220\u6389\u89e3\u51b3\u51b2\u7a81\u5c31\u884c\u3002 \u53e6\u5916\uff0cvim \u81ea\u5e26\u4e86\u4e00\u4e2a\u6587\u4ef6\u7ba1\u7406\u7cfb\u7edf netrw\uff0c\u6211\u5f88\u559c\u6b22\uff0c\u8fd9\u4e2a\u653e\u5230\u5355\u72ec\u7684\u4e00\u7bc7\u6587\u7ae0\u91cc\u6765\u5199\u3002 last but not least, \u6211\u5199\u4e86\u4e00\u4e2a\u4e3b\u9898\uff0c\u611f\u89c9\u633a\u723d\uff0c\u6709\u5174\u8da3\u53ef\u4ee5\u7528\u4e00\u7528\uff1a hylwxqwq/yuyuko.vim \u3002 \u5f53\u7136\u6709\u4e00\u4e9b\u5730\u65b9\u7684 syntax \u56e0\u4e3a\u6211\u8fd8\u6ca1\u53d1\u73b0\u6240\u4ee5\u53ef\u80fd\u4f1a\u663e\u793a\u4e3a\u9752\u8272\uff0c\u770b\u8d77\u6765\u4e0d\u592a\u723d\uff0c\u53d1\u73b0\u4e86\u53ef\u4ee5 open an issue.","title":"\u6d45\u8c08 Vim \u7684\u914d\u7f6e"},{"location":"misc/vim-pref/#c","text":"\u8fd9\u4e2a\u662f\u6700\u57fa\u672c\u7684\u9700\u6c42\u3002 \u6b63\u5e38\u6765\u8bf4\u9700\u8981\u7684\u4e1c\u897f\u4e5f\u5c31\u8fd9\u4e9b\uff1a \u8bed\u6cd5\u9ad8\u4eae \u62ec\u53f7\u8865\u5168 \u4e00\u4e9b\u57fa\u672c\u7684\u4ee3\u7801\u683c\u5f0f\u5316\uff08 tab = 4 \uff0c\u81ea\u52a8\u6362\u884c\uff09 \u7f16\u8bd1\u548c\u8fd0\u884c \u8c03\u8bd5 \u7b2c\u4e00\u70b9\u6bd4\u8f83\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5728 vimrc \u91cc\u9762\u5199\u4e00\u53e5\uff1a 1 syntax on \u5c31\u53ef\u4ee5\u4e86\u3002 \u7b2c\u4e8c\u70b9\u4e5f\u6bd4\u8f83\u7b80\u5355\uff0c\u6211\u4e2a\u4eba\u4f7f\u7528\u4e60\u60ef\u662f\uff0c\u5e0c\u671b\u8f93\u5165\u524d\u534a\u62ec\u53f7\uff0c\u80fd\u76f4\u63a5\u5f39\u51fa\u540e\u534a\u62ec\u53f7\u5e76\u4e14\u81ea\u52a8\u8df3\u5230\u62ec\u53f7\u91cc\u9762\u3002 \u8fd9\u4e2a\u5229\u7528 vim \u7684\u6620\u5c04\u5c31\u53ef\u4ee5\u505a\u5230\uff1a 1 2 3 4 5 inoremap [ [] < Esc > i inoremap { < CR > {} < ESC > i < CR >< ESC > O inoremap ( ()< Esc > i inoremap ' ' ' < Esc > i inoremap \" \" \" < Esc > i \u7b2c\u4e8c\u884c\u9700\u8981\u5728\u6709 autoindent \u9009\u9879\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\uff0c\u8fd9\u6837\u4f1a\u81ea\u52a8\u6362\u884c\u5e76\u7f29\u8fdb\u5230\u5927\u62ec\u53f7\u91cc\u9762\uff0c\u8fd9\u4e2a\u539f\u7406\u4e5f\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u57fa\u672c\u7684 vim command. \u56e0\u4e3a\u6211\u4e00\u822c\u662f\u5927\u62ec\u53f7\u4e0d\u6362\u884c\u7684\uff0c\u6240\u4ee5\u6211\u4e00\u822c\u662f <SPACE>{<CR> \uff0c\u8fd9\u91cc\u53ea\u6620\u5c04\u4e86\u6362\u884c\u7684\u60c5\u51b5\uff0c\u884c\u5185\u82b1\u62ec\u53f7\u6211\u7528\u7684\u4e0d\u591a\uff0c\u7528\u4e86\u4e5f\u4e60\u60ef\u4e0d\u8865\u5168\uff0c\u6240\u4ee5\u8fd9\u6837\u5c31\u591f\u7528\u4e86\u3002 \u5f53\u7136\uff0c\u56e0\u4e3a vim \u5728\u5904\u7406\u6709\u516c\u5171\u524d\u7f00\u7684\u6620\u5c04\u65f6\u4f1a\u6709\u4e00\u4e2a timeoutlen\uff0c\u4e3a\u4e86\u65b9\u4fbf\u53ef\u4ee5\u6309\u7167\u81ea\u5df1\u624b\u901f\u8c03\u6574\u4e00\u4e0b\uff0c\u6211\u4e00\u822c\u8bbe\u7f6e\u5728 600ms \u5de6\u53f3\u3002 \u7b2c\u4e09\u70b9\uff0c\u4e5f\u662f vimrc \u80fd\u76f4\u63a5\u89e3\u51b3\u7684\uff1a 1 set tabstop = 4 softtabstop = 4 shiftwidth = 4 autoindent \u5c31\u53ef\u4ee5\u4e86\u3002 \u7b2c\u56db\u70b9\uff0c\u5982\u679c\u76f4\u63a5\u5728 vim \u91cc\u4f7f\u7528 !<command> \uff0c\u5728 win \u4e0b\u4f1a\u5f39\u51fa\u7a97\u53e3\uff0clinux \u4e0b\u4f1a\u76f4\u63a5\u5728 vim \u91cc\u5207\u5c4f\u5230\u4e00\u4e2a\u7ec8\u7aef\u3002 \u4f46\u662f\u8fd9\u4e2a\u65f6\u5019\u4f60\u5c31\u4e0d\u80fd\u5bf9 vim \u91cc\u539f\u6709\u7684\u4ee3\u7801\u8fdb\u884c\u64cd\u4f5c\u4e86\uff0c\u8fd9\u5f88\u9ebb\u70e6\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5f02\u6b65\u7f16\u8bd1\u7684\u529f\u80fd\u3002 \u8fd9\u4e2a\u9700\u8981 Vim 8.1 \u4ee5\u53ca\u4e4b\u540e\u7684\u7248\u672c\uff0c\u56e0\u4e3a 8.1 \u5f00\u59cb\uff0cBram \u624d\u5f15\u5165\u4e86 job \u8fd9\u4e2a\u6982\u5ff5\u3002 Vim \u5708\u8457\u540d\u5927\u795e skywind3000 \u66fe\u7ecf\u5199\u8fc7\u4e00\u4e2a\u5f02\u6b65\u7f16\u8bd1\u63d2\u4ef6\uff0c\u4f46\u662f\u73b0\u5728\u5df2\u7ecf\u770b\u4e0d\u5230\u4e86\uff0c\u4e0d\u8fc7\u539f\u7406\u4ec0\u4e48\u7684\u53ef\u4ee5\u5728\u4ed6\u7684 \u535a\u5ba2 \u770b\u5230\u3002 \u56e0\u4e3a\u6211\u76ee\u524d\u6ca1\u6709\u65f6\u95f4\u6df1\u5165\u5b66\u4e60\u8fd9\u4e2a\u4e1c\u897f\uff0c\u6240\u4ee5\u6211\u9009\u62e9\u6bd4\u8f83\u7c97\u66b4\u7684\u65b9\u5f0f\uff0c\u76f4\u63a5\u5f00\u4e00\u4e2a Terminal \u7f16\u8bd1\uff0cvim8.1 \u4e4b\u540e\u53ef\u4ee5\u6709\u5185\u7f6e\u7684 terminal \uff0c\u4e0d\u8fc7 win \u4e0b\u9ed8\u8ba4 cmd\uff0c\u4e0d\u592a\u723d\uff0c\u6240\u4ee5\u6211\u8fd8\u662f\u6253\u7b97\u76f4\u63a5\u5f00\u4e2a Powershell\uff0c\u624b\u6253\u3002 \u53cd\u6b63\u6709\u4e0a\u4e0b\u952e\uff0c\u4e5f\u4e0d\u662f\u5f88\u8d39\u65f6\u95f4\uff0c\u800c\u4e14\u6539\u4e00\u4e9b\u9009\u9879\u4e5f\u5f88\u5feb\u3002 \u7b2c\u4e94\u70b9\uff0c\u6211\u5df2\u7ecf\u4e60\u60ef\u4e86 GDB \u8fd9\u79cd\u547d\u4ee4\u884c\u8c03\u8bd5\u7684\u6a21\u5f0f\uff0c\u6240\u4ee5\u76f4\u63a5 Terminal \u5c31\u884c\uff0c\u4e5f\u53ef\u4ee5\u5728 Vim8.1 \u8fc7\u540e\u4f7f\u7528 1 packadd termdebug \u6765\u5f15\u5165 TermDebug \u5305\uff0c\u7136\u540e\u4f60\u5c31\u53ef\u4ee5\u5728 Vim \u91cc\u5b9e\u65f6\u67e5\u770b\u65ad\u70b9\u4e86\u3002 \u8bdd\u8bf4 Bram \u5728\u66f4\u65b0 8.1 \u7684\u65f6\u5019\u90fd\u5728\u60f3\u5565\uff0c\u548b\u66f4\u65b0\u4e86\u8fd9\u4e48\u591a\u4eba\u6027\u5316\u529f\u80fd\u3002 \u5f88\u53ef\u60dc\u6211\u4eec\u5b66\u6821\u88c5\u7684\u662f 8.0\uff0c\u6709\u70b9\u96be\u53d7\uff0c\u6240\u4ee5\u6211\u4e00\u822c\u90fd\u662f\u624b\u52a8 vim90\u3002","title":"C++"},{"location":"misc/vim-pref/#markdown","text":"\u8fd9\u4e2a\u4e5f\u662f\u5f88\u91cd\u8981\u7684\u9700\u6c42\u3002 \u8bed\u6cd5\u9ad8\u4eae\u548c\u4e00\u4e9b\u57fa\u672c\u7684\u8865\u5168 Preview \u6587\u4ef6\u540d\u8865\u5168\u3002 \u7b2c\u4e00\u4e2a\uff0c\u56e0\u4e3a vim \u539f\u751f\u7684\u652f\u6301\u4e0d\u662f\u5f88\u597d\uff0c\u6240\u4ee5\u6211\u8fd8\u662f\u9009\u62e9\u4e86\u63d2\u4ef6\uff1a preservim\\vim-markdown \u3002 \u7b2c\u4e8c\u4e2a\uff0c\u6211\u4e4b\u524d\u5c31\u4e00\u76f4\u5728\u7528\uff0c\u662f\u4e00\u4e2a\u56fd\u5185\u5927\u4f6c\u5f00\u53d1\u7684\uff0c\u611f\u89c9\u633a\u597d\u7528\uff0c\u6bd5\u7adf\u53ef\u4ee5\u540c\u6b65\u9884\u89c8\u8fd8\u53ef\u4ee5\u5bfc\u51fa\uff1a iamcco/markdown-preview.nvim \u3002 \u7b2c\u4e09\u4e2a\u4e3b\u8981\u662f\u56e0\u4e3a\uff0c\u6211\u7ecf\u5e38\u4f1a\u5f15\u7528\u6211\u81ea\u5df1\u535a\u5ba2\u76ee\u5f55\u4e0b\u7684\u56fe\u7247\uff0c\u6587\u7ae0\uff0c\u6240\u4ee5\u8fd9\u4e1c\u897f\u5bf9\u6211\u6765\u8bf4\u5f88\u6709\u5fc5\u8981\u3002 \u6211\u4ee5\u524d\u4ee5\u4e3a vim \u6ca1\u6709\u5185\u7f6e\u8865\u5168\uff0c\u67d0\u5929\u95f2\u6765\u65e0\u4e8b\u4e71\u6309\u7684\u65f6\u5019\u6309\u51fa\u4e86\u4e00\u4e2a popmenu\uff0c\u53d1\u73b0\u53ef\u4ee5\u8865\u5168\u6587\u4ef6\uff0c\u641c\u7d22\u4e86\u4e00\u4e0b\u4e4b\u540e\u53d1\u73b0\u53ea\u9700\u8981 <C-x><C-f> \u5c31\u53ef\u4ee5\u4e86\u3002\u611f\u53f9\uff0cvim \u679c\u7136\u8fd8\u662f\u6280\u9ad8\u4e00\u7b79\uff0c\u65e9\u5c31\u6709\u4e86\u8fd9\u6837\u7684\u529f\u80fd\u3002","title":"Markdown"},{"location":"misc/vim-pref/#misc","text":"\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u529f\u80fd\uff0c\u6bd4\u5982\u5b57\u5178\uff0c\u8fd9\u4e2a vim \u5176\u5b9e\u4e5f\u81ea\u5e26\u4e86\uff0c\u4e0d\u8fc7\u4e0d\u4f1a\u81ea\u52a8\u5f39\u51fa\uff0c\u800c\u662f\u8981 \u4e00\u4e0b\u3002 \u6709\u70b9\u96be\u53d7\uff0c\u6240\u4ee5\u6211\u9009\u62e9\u4e86 skywind3000 \u5199\u7684\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u8865\u5168\u7cfb\u7edf vim-auto-popmenu\uff0c\u529f\u80fd\u8fd8\u633a\u5f3a\u5927\uff0c\u5927\u90e8\u5206\u8bed\u8a00\u90fd\u6709\u5e38\u7528\u8bcd\u5178\uff08\u8981\u4e0b\u4e00\u4e0b\u4ed6\u914d\u7684\u5b57\u5178\u6587\u4ef6\u3002 \u800c\u4e14\u652f\u6301\u4ece dict\uff0cinclude\uff0cdir \u4e4b\u7c7b\u7684\u5730\u65b9\u7d22\u5f15\u3002 \u800c\u4e14\u5c31 100 \u6765\u884c\uff0c\u633a\u8212\u670d\u7684\uff0c\u901f\u5ea6\u4e5f\u5f88\u5feb\uff0c\u6211\u4e4b\u540e\u6253\u7b97 fork \u4e00\u4e0b\uff0c\u7ed9\u4e00\u4e9b\u5e38\u89c1\u516c\u5f0f\u4e5f\u52a0\u4e00\u4e2a\u8865\u5168\uff0c\u8fd9\u6837\u5199\u9898\u89e3\u901f\u5ea6\u80fd\u66f4\u5feb\u3002 \u7136\u540e\u5173\u4e8e\u7cfb\u7edf\u526a\u8d34\u677f\u8fd9\u4e2a\u4e8b\u60c5\uff0c\u8fd9\u4e2a\u6211\u4e4b\u524d\u559c\u6b22\u540c\u6b65 vim \u7684\u526a\u5207\u677f\u548c\u7cfb\u7edf\u526a\u8d34\u677f\u3002 \u4e0d\u8fc7\u73b0\u5728\u8fd8\u662f\u89c9\u5f97\uff0c\u72ec\u7acb\u4e00\u4e0b\u4f1a\u6bd4\u8f83\u597d\uff0c\u56e0\u4e3a vim \u91cc\u7ecf\u5e38 dd \u554a\uff0c\u4e34\u65f6\u79fb\u52a8\u4e00\u4e0b\u4ee3\u7801\u4e4b\u7c7b\u7684\uff0c\u526a\u5207\u64cd\u4f5c\u5f88\u591a\uff0c\u800c\u4e14 vim \u672c\u8eab\u8fd9\u4e2a register \u529f\u80fd\u53c8\u4e0d\u662f\u6446\u8bbe\uff0c\u80af\u5b9a\u8fd8\u662f\u8981\u7528\u7528\u7684\uff0c\u6240\u4ee5\u6211\u73b0\u5728\u7684 vimrc \u5c31\u6ca1\u6709\u540c\u6b65\u4e86\u3002 \u8fd8\u6709\u4e00\u4e2a\u662f\u5173\u4e8e\u76f8\u5bf9\u884c\u53f7\u7684\uff0c\u53d1\u73b0\u5176\u5b9e\u8fd9\u4e2a\u6bd4\u76f4\u63a5\u5f04\u884c\u53f7\u8981\u597d\u7684\u591a\uff0c\u53ef\u4ee5\u5c11\u6253\u4e00\u4e2a shift\uff1f \u4f46\u662f\u8981\u5feb\u901f\u8df3\u5230\u89c6\u91ce\u4e4b\u5916\u7684\u5730\u65b9\u5c31\u4e0d\u592a\u65b9\u4fbf\uff0c\u4f46\u662f\u53ef\u4ee5\u76f4\u63a5\u6eda\u5c4f\uff0c\u6240\u4ee5\u8fd8\u633a\u4e0d\u9519\u3002 \u4e2d\u6587\u8f93\u5165\u6cd5\u7684\u8bdd\uff0c\u4e4b\u524d\u770b\u5230\u8fc7\u4e00\u4e2a\u5185\u5d4c\uff0c\u53ef\u4ee5\u65b9\u4fbf\u5728\u670d\u52a1\u5668\u4e4b\u7c7b\u7684\u5730\u65b9\u64cd\u4f5c\uff0c\u4e0d\u8fc7\u6211\u6ca1\u6709\u5728\u5947\u602a\u7684\u73af\u5883\u4e0b\u8f93\u5165\u4e2d\u6587\u7684\u9700\u6c42\uff0c\u6240\u4ee5\u6682\u65f6\u4e0d\u9700\u8981\uff0c\u6709\u7cfb\u7edf\u8bcd\u5e93\u5c31\u597d\u4e86\u3002 \u4e0d\u8fc7\u8fd8\u6709\u4e00\u4e9b\u9700\u6c42\uff0c\u6bd4\u5982\u4e00\u4e2a\u5185\u7f6e todolist manager\uff0c\u6211\u6ca1\u6709\u770b\u5230\u6bd4\u8f83\u7b26\u5408\u6211\u5fc3\u610f\u7684\uff0c\u4e8e\u662f\u6253\u7b97\u81ea\u5df1\u5199 \u4e00\u4e2a \uff0cvim script \u592a\u70e6\uff0c\u6240\u4ee5\u6211\u7684\u60f3\u6cd5\u662f\u4f7f\u7528 c++ \u5b9e\u73b0\uff0c\u5728\u7ec8\u7aef\u5f53\u4e2d\u5de5\u4f5c\uff0c\u6709\u65f6\u95f4\u4e86\u518d\u8003\u8651\u901a\u8fc7\u8c03\u7528\u7684\u65b9\u5f0f\u5185\u5d4c\u5230 vim \u91cc\uff0c\u6216\u8005\u662f\u7528 Qt \u52a0\u4e2a\u56fe\u5f62\u5316\u754c\u9762\u76f4\u63a5\u5c01\u88c5\u6210\u5e94\u7528\u3002 \u6709\u4e00\u4e2a\u53eb Nerdcommenter \u7684\u63d2\u4ef6\uff0c\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e9b\u5feb\u901f\u6ce8\u91ca\u7684\u529f\u80fd\uff0c\u7ecf\u8fc7\u4ee5\u4e0b\u914d\u7f6e\u4e4b\u540e\u53ef\u4ee5\u76f4\u63a5\u7528 leader \u952e\u6765\u5b9e\u73b0\u6ce8\u91ca\uff08leader \u9ed8\u8ba4\u662f \\ \uff09\u3002 1 2 3 4 5 6 7 8 9 let g :NERDCreateDefaultMappings = 1 let g :NERDSpaceDelims = 1 let g :NERDCompactSexyComs = 1 let g :NERDDefaultAlign = 'left' let g :NERDAltDelims_java = 1 let g :NERDCustomDelimiters = { 'c' : { 'left' : '/**' , 'right' : '*/' } } let g :NERDCommentEmptyLines = 1 let g :NERDTrimTrailingWhitespace = 1 let g :NERDToggleCheckAllLines = 1 \u5c31\u53ea\u9700\u8981\u8bb0\u4f4f \\ci \u4ee5\u53ca \\cc \u5373\u53ef\u3002 \u8fd8\u6709\u4e00\u4e2a\u4e8b\u60c5\u662f\uff0c\u6211\u4e0d\u559c\u6b22\u5728\u6211\u7684\u4ee3\u7801\u6587\u4ef6\u5939\u91cc\u653e ~un, swp \u4e4b\u7c7b\u7684\u6587\u4ef6\u3002 \u4e0d\u8fc7\u8fd9\u4e9b\u6587\u4ef6\u8fd8\u662f\u975e\u5e38\u6709\u5fc5\u8981\u7684\uff0c\u6240\u4ee5\u6211\u9009\u62e9\u628a\u5b83\u4eec\u5b58\u5728\u4e00\u4e2a\u6307\u5b9a\u7684\u4f4d\u7f6e\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u7684\u8bbe\u7f6e\uff1a 1 2 3 4 set backup swapfile undofile set backupdir = C:\\Users\\Administrator\\.vimtmp\\ backup set undodir = C:\\Users\\Administrator\\.vimtmp\\undo set directory = C:\\Users\\Administrator\\.vimtmp\\swp \u5f53\u7136\uff0c\u5982\u679c\u63d0\u793a\u4e86\u65e0\u6cd5\u5199\u5165\uff0c\u5efa\u8bae\u68c0\u67e5\u4e00\u4e0b\u8def\u5f84\u683c\u5f0f\u662f\u4e0d\u662f\u6b63\u786e\u7684\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u770b :help backupdir \uff0c\u6216\u8005\u662f\u628a\u5f53\u524d\u6587\u4ef6\u539f\u6709\u7684 ~, ~un, .swp \u6587\u4ef6\u5220\u6389\u89e3\u51b3\u51b2\u7a81\u5c31\u884c\u3002 \u53e6\u5916\uff0cvim \u81ea\u5e26\u4e86\u4e00\u4e2a\u6587\u4ef6\u7ba1\u7406\u7cfb\u7edf netrw\uff0c\u6211\u5f88\u559c\u6b22\uff0c\u8fd9\u4e2a\u653e\u5230\u5355\u72ec\u7684\u4e00\u7bc7\u6587\u7ae0\u91cc\u6765\u5199\u3002 last but not least, \u6211\u5199\u4e86\u4e00\u4e2a\u4e3b\u9898\uff0c\u611f\u89c9\u633a\u723d\uff0c\u6709\u5174\u8da3\u53ef\u4ee5\u7528\u4e00\u7528\uff1a hylwxqwq/yuyuko.vim \u3002 \u5f53\u7136\u6709\u4e00\u4e9b\u5730\u65b9\u7684 syntax \u56e0\u4e3a\u6211\u8fd8\u6ca1\u53d1\u73b0\u6240\u4ee5\u53ef\u80fd\u4f1a\u663e\u793a\u4e3a\u9752\u8272\uff0c\u770b\u8d77\u6765\u4e0d\u592a\u723d\uff0c\u53d1\u73b0\u4e86\u53ef\u4ee5 open an issue.","title":"Misc"},{"location":"misc/vim-usage/","text":"Practise more. \u8003\u573a Vimrc: 1 2 3 4 5 6 7 8 9 10 11 syntax on set ai ts = 4 sts = 4 sw = 4 nu rnu mouse = a ruler set ar acd backup swapfile undofile set guifont = Consolas:h12:cANSI set timeoutlen = 666 ttimeoutlen = 0 inoremap [ [] < Esc > i inoremap { < CR > {} < Esc > i < CR >< ESC > O inoremap ( ()< Esc > i inoremap \" \" \" < Esc > i inoremap ' ' ' < Esc > i \u7f16\u8f91\u6a21\u5f0f \u03c8(\uff40\u2207\u00b4)\u03c8 Normal Mode \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e00\u822c Vim \u7684\u547d\u4ee4\u90fd\u662f\u5728 Normal mode \u4e0b\u9762\u5b8c\u6210\u7684\u3002 \u6240\u6709\u6a21\u5f0f\u6309 ESC \u90fd\u53ef\u4ee5\u8fdb\u5165 Normal mode\u3002 Normal mode \u4e0d\u53ef\u4ee5\u8fdb\u884c\u8f93\u5165\uff0c\u952e\u76d8\u4e0a\u6240\u6709\u7684\u5b57\u6bcd\u57fa\u672c\u90fd\u662f\u4e2a\u547d\u4ee4\u3002 \u4e5f\u53ef\u4ee5\u7528 : \u8fdb\u5165 Command mode\u3002 \u4e0b\u9762\u7684\u547d\u4ee4\u4f1a\u6807\u8bb0 [N] \u8868\u793a\u8be5\u5feb\u6377\u952e\u5728 Normal mode \u4e0b\u53ef\u7528\u3002 Command Mode \u03c8(\uff40\u2207\u00b4)\u03c8 \u53ef\u4ee5\u8fdb\u884c\u4e00\u4e9b\u6587\u4ef6\u64cd\u4f5c\uff0c\u5c5e\u6027\u7684\u8bbe\u7f6e\u3002 \u8fd8\u53ef\u4ee5\u5229\u7528 :!<Command> \u5728\u4e00\u4e2a\u5916\u90e8\u7ec8\u7aef\u91cc\u9762\u6267\u884c <Command> \u547d\u4ee4\u3002 \u6bd4\u5982 !g++ % -o %< -Wall -std=c++17 -O2 -g \u5c31\u53ef\u4ee5\u7f16\u8bd1\u5f53\u524d\u7684\u6587\u4ef6\uff08cpp\uff09\u3002 Insert Mode \u03c8(\uff40\u2207\u00b4)\u03c8 \u6b63\u5e38\u7684\u8f93\u5165\u6a21\u5f0f\uff0cVim Easy \u53ea\u6709\u8fd9\u4e2a\u6a21\u5f0f\u3002 Visual Mode \u03c8(\uff40\u2207\u00b4)\u03c8 \u9009\u62e9\u6a21\u5f0f\uff0c\u6709\u4e09\u79cd\u3002 \u7b2c\u4e00\u79cd\u662f\u5728 Normal mode \u4e0b\u6309 v \u8fdb\u5165\u7684\u53ef\u89c6\u6a21\u5f0f\uff0c\u8fd9\u4e2a\u5c31\u662f\u7c7b\u4f3c\u5176\u4ed6 Editor \u7684\u9009\u62e9\u529f\u80fd\u3002 \u7b2c\u4e8c\u79cd\u662f\u6309 V \u4e5f\u5c31\u662f S-v \u8fdb\u5165\u7684\u884c\u53ef\u89c6\u6a21\u5f0f\uff0c\u8fd9\u4e2a\u6a21\u5f0f\u4f1a\u81ea\u52a8\u9009\u62e9\u5149\u6807\u6240\u5728\u884c\uff0c\u5e76\u4e14\u4f1a\u590d\u5236\u6362\u884c\u7b26\u3002 \u7b2c\u4e09\u79cd\u662f\u6309 C-v \u8fdb\u5165\u7684\u5757\u53ef\u89c6\u6a21\u5f0f\uff0c\u8fd9\u4e2a\u6a21\u5f0f\u4f1a\u9009\u4e2d\u4e00\u4e2a\u5757\uff08\u77e9\u5f62\uff09\uff0c\u6bd4\u5982\u4e0b\u9762\u8fd9\u4e2a\u5b9e\u4f8b\uff1a 1 2 std :: cin . tie ( 0 ) -> sync_with_stdio ( false ); std :: cin . exceptions ( cin . failbit | cin . badbit ); \u6211\u4eec\u60f3\u628a\u5b83\u4eec\u524d\u9762\u7684 std:: \u5168\u90e8\u5220\u6389\uff0c\u5c31\u53ef\u4ee5\u7528\u5757\u53ef\u89c6\u6a21\u5f0f\u9009\u4e2d\u7136\u540e\u5220\u9664\uff08\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u4e00\u4e2a\u4e2a\u67e5\u627e\u7136\u540erepalce\u6389\u5b83\u4eec\uff09\u3002 Replace Mode \u03c8(\uff40\u2207\u00b4)\u03c8 \u6309 R \u8fdb\u5165\uff0c\u987e\u540d\u601d\u4e49\u662f\u7528\u6765\u6279\u91cf replace \u7684\u3002 \u7f16\u8f91\u5668\u5feb\u6377\u952e \u03c8(\uff40\u2207\u00b4)\u03c8 \u79fb\u52a8\u7c7b \u03c8(\uff40\u2207\u00b4)\u03c8 [N/V] h j k l \uff1a \u4e0a\u4e0b\u5de6\u53f3\uff08\u53ef\u4ee5\u5728\u524d\u9762\u52a0\u4e0a\u6570\u5b57\u8868\u793a\u91cd\u590d\u591a\u5c11\u6b21\uff0c\u6bd4\u5982 \\(3l\\) \u5c31\u662f\u5f80\u5de6\u79fb\u52a8\u4e09\u4e2a\u5b57\u7b26\uff08Vim \u7684\u6240\u6709\u547d\u4ee4\u57fa\u672c\u90fd\u652f\u6301\u8fd9\u4e2a\uff09\uff09 [N/V] gg \uff1a\u8df3\u5230\u6587\u4ef6\u7684\u5f00\u5934\u3002 [N/V] G \uff1a\u8df3\u5230\u6587\u4ef6\u7684\u7ed3\u5c3e [N/V] <Number>G / :<Number> \uff1a \u8df3\u5230\u7b2c <Number> \u884c [N/V] <Number>| \uff1a\u628a\u5149\u6807\u79fb\u52a8\u5230\u7b2c <Number> \u5217\u4e0a [N/V] Backspace Space \uff1a \u79fb\u52a8\u5230\u4e0a\u4e00\u4e2a\u5b57\u7b26/\u4e0b\u4e00\u4e2a\u5b57\u7b26 [N/V] + Enter \uff1a\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\u7b2c\u4e00\u4e2a\u975e\u7a7a\u767d\u5b57\u7b26 [N/V] - \uff1a\u79fb\u52a8\u5230\u4e0a\u4e00\u884c\u7b2c\u4e00\u4e2a\u975e\u7a7a\u767d\u5b57\u7b26\u3002 [N] f<Char> \uff1a\u79fb\u52a8\u5230\u540c\u4e00\u884c\u7684\u4e0b\u4e00\u4e2a <Char> \u5b57\u7b26\u5904\u3002 [N] F<Char> \uff1a\u79fb\u52a8\u5230\u540c\u4e00\u884c\u7684\u4e0a\u4e00\u4e2a <Char> \u5b57\u7b26\u5904\u3002 [N/V] 0/^/$ \uff1a\u79fb\u52a8\u5230\u786c/\u8f6f\u884c\u5934/\u5c3e\u3002(\u8f6f\u884c\u9996\u4e0d\u5305\u62ec\u7f29\u8fdb\uff0c\u5373\u6307\u7b2c\u4e00\u4e2a\u53ef\u89c1\u5b57\u7b26\u3002) [N/V] H : \u628a\u5149\u6807\u79fb\u5230\u5c4f\u5e55\u6700\u9876\u7aef\u4e00\u884c\u3002 [N/V] M : \u628a\u5149\u6807\u79fb\u5230\u5c4f\u5e55\u4e2d\u95f4\u4e00\u884c\u3002 [N/V] L : \u628a\u5149\u6807\u79fb\u5230\u5c4f\u5e55\u6700\u5e95\u7aef\u4e00\u884c\u3002 [N/V] w/W \uff1a\u8df3\u5230\u4e0b\u4e00\u4e2a\u5355\u8bcd\u5f00\u5934 [N/V] e/E \uff1a\u8df3\u5230\u4e0b\u4e00\u4e2a\u5355\u8bcd\u7ed3\u5c3e [N/V] b/B \uff1a\u8df3\u5230\u4e0a\u4e00\u4e2a\u5355\u8bcd\u5f00\u5934 \u8fd9\u4e09\u4e2a\u952e\u7684\u5c0f\u5199\u662f\u53ea\u8981\u6709\u8fd0\u7b97\u7b26\u6216\u8005\u7a7a\u683c\u5c31\u5206\u5272\uff0c\u5927\u5199\u53ea\u4ee5\u7a7a\u683c\u4e3a\u6807\u51c6\u5212\u5206\u3002 \u7eaf\u7f16\u8f91\u7c7b \u03c8(\uff40\u2207\u00b4)\u03c8 [N] i \uff1a\u8fdb\u5165 Insert Mode\uff08\u5728\u5f53\u524d\u5149\u6807\u5757\u7684\u5de6\u4fa7\u63d2\u5165\uff09 [N] a \uff1a\u8fdb\u5165 Insert Mode\uff08\u5728\u5f53\u524d\u5149\u6807\u5757\u7684\u53f3\u4fa7\u63d2\u5165\uff09 [N] O \uff1a\u5728\u5f53\u524d\u884c\u4e0a\u65b9\u65b0\u5efa\u4e00\u884c\uff0c\u5e76\u8fdb\u5165\u63d2\u5165\u6a21\u5f0f\uff0c\u5149\u6807\u5904\u4e8e\u884c\u9996\uff08\u9664\u975e\u6709 auto indent\uff09 [N] o \uff1a\u5728\u5f53\u524d\u884c\u4e0b\u65b9\u65b0\u5efa\u4e00\u884c\uff0c\u5e76\u8fdb\u5165\u63d2\u5165\u6a21\u5f0f\uff0c\u5149\u6807\u5904\u4e8e\u884c\u9996\uff08\u9664\u975e\u6709 auto indent\uff09 [N] A \uff1a\u5c06\u5149\u6807\u79fb\u52a8\u81f3\u672c\u884c\u672b\u5c3e\uff0c\u540c\u65f6\u8fdb\u5165\u63d2\u5165\u6a21\u5f0f\u3002 [N] I \uff1a\u5c06\u5149\u6807\u79fb\u52a8\u81f3\u672c\u884c\u9996\uff0c\u540c\u65f6\u8fdb\u5165\u63d2\u5165\u6a21\u5f0f\u3002 [N] S \uff1a\u5220\u9664\u672c\u884c\u7684\u6240\u6709\u6587\u5b57\uff0c\u540c\u65f6\u8fdb\u5165\u63d2\u5165\u6a21\u5f0f\u3002 [N] u/C-r \uff1aUndo \u548c Redo\u3002 [N] ~ \uff1a\u53cd\u8f6c\u5149\u6807\u5757\u5b57\u7b26\u7684\u5927\u5c0f\u5199\u3002 \u590d\u5236\u7c98\u8d34\u7c7b \u03c8(\uff40\u2207\u00b4)\u03c8 [V] y \uff1a\u590d\u5236\u5728\u53ef\u89c6\u6a21\u5f0f\u4e0b\u9009\u4e2d\u7684\u6587\u672c\uff08\u53ef\u4ee5\u52a0\u7ec4\u5408\u952e\u6765\u590d\u5236\u4e00\u4e2a\u5355\u8bcd/\u53e5\u5b50\u4e4b\u7c7b\u7684\uff0c\u4e0d\u8fc7\u6211\u4e0d\u548b\u7528\u5c31\u4e0d\u5199\u4e86\uff09\u3002 [N/V] yy \u590d\u5236\u5f53\u524d\u884c\u3002 [N] ggVG \uff1a\u8fd9\u662f\u4e00\u4e2a\u7ec4\u5408\u952e\uff0c\u7b49\u4ef7\u4e8e\u5168\u6587\u590d\u5236\uff08\u4f1a\u591a\u590d\u5236\u4e00\u4e2a\u6362\u884c\u7b26\uff09\u3002 [N/V] d \uff1a\u526a\u5207\uff08\u9700\u8981\u7c7b\u4f3c d<Number><Move> \u7684\u7ec4\u5408\u952e\uff0c\u6bd4\u5982 d8l \u5c31\u662f\u5220\u9664\u5149\u6807\u5757\u53f3\u8fb98\u4e2a\u5b57\u7b26\uff08\u5305\u62ec\u5149\u6807\u5757\u672c\u8eab\uff08\u5149\u6807\u5b9e\u9645\u4e0a\u662f\u5728\u5149\u6807\u5757\u7684\u5de6\u8fb9\uff09\uff09\uff0c d8h \u5219\u662f\u5de6\u8fb9\uff08\u4e0d\u542b\u5149\u6807\u5757\uff09\uff0c dG \u662f\u4ece\u5f53\u524d\u884c\u4e00\u76f4\u5220\u5230\u6587\u4ef6\u7ed3\u5c3e\uff09\u3002 [N/V] dd \uff1a\u526a\u5207\u4e00\u6574\u884c\u3002 [N/V] x<Number> \uff1a\u5220\u9664\u5149\u6807\u53f3\u8fb9 <Number> \u4e2a\u5b57\u7b26\uff08\u5149\u6807\u662f\u5728\u5149\u6807\u5757\u7684\u5de6\u8fb9\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u76f4\u63a5\u6309 x \u4f1a\u5220\u9664\u5149\u6807\u5757\u9009\u4e2d\u7684\u5b57\u7b26\uff09\u3002 [N/V] X<Number> \uff1a\u5de6\u8fb9\u3002 [C] :<i>,<j> dd \uff1a\u526a\u5207\u7b2c \\(i\\) \u884c\u5230\u7b2c \\(j\\) \u884c\u7684\u6240\u6709\u6587\u672c\u3002 [N] p/P \uff1a\u5728\u5149\u6807\u7684\u540e/\u524d\u4f4d\u7f6e\u7c98\u8d34\uff08\u6ce8\u610f\u662f\u5426\u590d\u5236\u4e86\u6362\u884c\u7b26\uff0c\u53ef\u4ee5\u4f7f\u7528 reg \u67e5\u770b\u5bf9\u5e94\u5bc4\u5b58\u5668\u91cc\u7684\u4e1c\u897f\uff09 [N/V] \"<char>y \uff1a\u590d\u5236\u5230 <char> \u5bc4\u5b58\u5668\u5f53\u4e2d\uff08 0 ~ 9 \u7684\u6570\u5b57\uff0c a ~ z/A ~ Z \u7684\u5b57\u6bcd\uff0c +-* \uff09\uff0c\u7c98\u8d34\u540c\u7406\u3002 * \u662f\u5f53\u524d\u7f13\u51b2\u533a\uff0c\u7cfb\u7edf\u526a\u8d34\u677f\u4e5f\u4f1a\u5230\u8fd9\u91cc\u9762\u6765\u3002 \u4e00\u4e2a tips\uff1a\u5982\u679c\u76f4\u63a5 <S-v>$d \u662f\u4f1a\u5e26\u4e0a\u6362\u884c\u7b26\u7684\uff0c\u4e0d\u60f3\u8981\u53ef\u4ee5 $ \u4e4b\u540e h \u3002 \u6587\u4ef6\u64cd\u4f5c\u7c7b \u03c8(\uff40\u2207\u00b4)\u03c8 :file filename \uff1a\u547d\u540d\u5f53\u524d\u6587\u4ef6\u4e3a filename \u3002 :e file \uff1a\u5173\u95ed\u5f53\u524d\u7684\u6587\u4ef6\uff0c\u6253\u5f00\u6587\u4ef6 file \uff08\u53ef\u4ee5\u662f\u76ee\u5f55\uff0c\u53ef\u4ee5\u6307\u5b9a\u6587\u4ef6\u4f4d\u7f6e\uff09 :e# \uff1a\u56de\u5230\u4e0a\u4e00\u4e2a\u6587\u4ef6 :e \uff1a\u91cd\u65b0\u52a0\u8f7d\u5f53\u524d\u6587\u4ef6\u3002 :w \uff1a\u5199\u5165\u5f53\u524d\u6587\u4ef6\u3002 :q \uff1a\u9000\u51fa\u3002 :wq \uff1a\u4fdd\u5b58\u5e76\u9000\u51fa\u3002 :saveas filename \uff1a\u53e6\u5b58\u4e3a\u3002 \u5c4f\u5e55\u64cd\u4f5c\u7c7b \u03c8(\uff40\u2207\u00b4)\u03c8 [N]C-f : \u4e0b\u7ffb\u4e00\u5c4f\u3002 [N]C-b : \u4e0a\u7ffb\u4e00\u5c4f\u3002 [N]C-d : \u4e0b\u7ffb\u534a\u5c4f\u3002 [N]C-u : \u4e0a\u7ffb\u534a\u5c4f\u3002 [N]C-e : \u5411\u4e0b\u6eda\u52a8\u4e00\u884c\u3002 [N]C-y : \u5411\u4e0a\u6eda\u52a8\u4e00\u884c\u3002 [N]zz : \u5c06\u5f53\u524d\u884c\u79fb\u52a8\u5230\u5c4f\u5e55\u4e2d\u592e\u3002 [N]zt : \u5c06\u5f53\u524d\u884c\u79fb\u52a8\u5230\u5c4f\u5e55\u9876\u7aef\u3002 [N]zb : \u5c06\u5f53\u524d\u884c\u79fb\u52a8\u5230\u5c4f\u5e55\u5e95\u7aef\u3002 [N]C-w H/J/K/L \uff1a\u5c06\u5f53\u524d\u7a97\u53e3\u79fb\u52a8\u5230\u5c4f\u5e55\u7684\u5de6/\u4e0b/\u4e0a/\u53f3\u5904\u3002 [N]C-w h/j/k/l \uff1a\u5207\u6362\u5230\u5de6/\u4e0b/\u4e0a/\u53f3\u7684\u7a97\u53e3\u3002 [N]C-w C-w \uff1a\u6309\u987a\u5e8f\u5207\u6362\u7a97\u53e3\u3002 [N]C-w -+<> \uff1a\u66f4\u6539\u5f53\u524d\u7a97\u53e3\u5927\u5c0f [N]C-w = \uff1a\u5e73\u5747\u5206\u914d\u5927\u5c0f\u3002 :split \uff1a\u5206\u5272\u5f53\u524d\u7684\u7a97\u53e3\u4e3a\u4e24\u4e2a\u7a97\u53e3\uff08\u6c34\u5e73\u5206\u5272\uff09\uff0c\u53ef\u4ee5\u7528 :set scb \u6253\u5f00\u540c\u6b65\u6eda\u52a8\u3002 :split <filename> \uff1a\u6c34\u5e73\u5206\u5272\u5e76\u6253\u5f00\u65b0\u7684\u6587\u4ef6\u3002 :new \uff1a\u6c34\u5e73\u6253\u5f00\u4e00\u4e2a\u65b0\u7a97\u53e3\u5e76\u7f16\u8f91\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\u3002 :vsplit/:vnew \uff1a\u7ad6\u76f4\u5206\u5272\u3002 :only \uff1a\u53ea\u4fdd\u7559\u5f53\u524d\u7a97\u53e3\u3002 :close \uff1a\u5173\u95ed\u5f53\u524d\u7a97\u53e3\u3002 \u591a\u6587\u4ef6\u7f16\u8f91\u7c7b \u03c8(\uff40\u2207\u00b4)\u03c8 vim a.txt b.cpp c.json \u53ef\u4ee5\u540c\u65f6\u6253\u5f00\u591a\u4e2a\u6587\u4ef6\u3002 :n \u53ef\u4ee5\u7f16\u8f91\u4e0b\u4e00\u4e2a\u6587\u4ef6\uff0c :N \u53ef\u4ee5\u7f16\u8f91\u4e0a\u4e00\u4e2a\u6587\u4ef6\u3002 :ls \u6216\u8005 :args \u53ef\u4ee5\u663e\u793a\u6587\u4ef6\u5217\u8868\u3002 \u591a\u6807\u7b7e\u7f16\u8f91\u7c7b \u03c8(\uff40\u2207\u00b4)\u03c8 \u6ce8\u610f\u8fd9\u4e2a\u548c\u591a\u6587\u4ef6\u4e0d\u4e00\u6837\uff0c\u4e00\u4e2a\u6807\u7b7e\u9875\u91cc\u53ef\u4ee5\u6709\u591a\u4e2a\u7a97\u53e3\uff0c\u591a\u6587\u4ef6\u4e0d\u662f\u6807\u7b7e\u9875\uff0c\u53ea\u662f\u540c\u65f6\u6253\u5f00\u4e86\u591a\u4e2a\u6587\u4ef6\u3002 \u4e5f\u5c31\u662f\u8bf4\u6807\u7b7e\u9875\u7c7b\u4f3c Workspace\u3002 vim -p files \uff1a\u6253\u5f00\u591a\u4e2a\u6587\u4ef6\uff0c\u6bcf\u4e2a\u6587\u4ef6\u5360\u7528\u4e00\u4e2a\u6807\u7b7e\u9875\u3002 :tabe/:tabnew \uff1a\u5982\u679c\u52a0\u6587\u4ef6\u540d\uff0c\u5c31\u5728\u65b0\u7684\u6807\u7b7e\u4e2d\u6253\u5f00\u8fd9\u4e2a\u6587\u4ef6\uff0c \u5426\u5219\u6253\u5f00\u4e00\u4e2a\u7a7a\u7f13\u51b2\u533a\u3002 C-w gf \uff1a\u5728\u65b0\u7684\u6807\u7b7e\u9875\u91cc\u6253\u5f00\u5149\u6807\u4e0b\u8def\u5f84\u6307\u5b9a\u7684\u6587\u4ef6\u3002 :tabn \uff1a\u5207\u6362\u5230\u4e0b\u4e00\u4e2a\u6807\u7b7e\uff0c C-PageDown \u4e5f\u53ef\u4ee5\u3002 :tabp \uff1a \u5207\u6362\u5230\u4e0a\u4e00\u4e2a\u6807\u7b7e\uff0c C-PageUp \u4e5f\u53ef\u4ee5\u3002 <n> gt \uff1a \u5207\u6362\u5230\u4e0b\u4e00\u4e2a\u6807\u7b7e\u3002\u5982\u679c\u524d\u9762\u52a0\u4e86 n\uff0c\u5c31\u5207\u6362\u5230\u7b2c n \u4e2a\u6807\u7b7e\u3002\u7b2c\u4e00\u4e2a\u6807\u7b7e\u7684\u5e8f\u53f7\u662f 1\u3002 gT \uff1a\u5207\u6362\u5230\u4e0a\u4e00\u4e2a\u3002 :tab split \uff1a \u5c06\u5f53\u524d\u7f13\u51b2\u533a\u7684\u5185\u5bb9\u5728\u65b0\u9875\u7b7e\u4e2d\u6253\u5f00\u3002 :tabc[lose] \uff1a \u5173\u95ed\u5f53\u524d\u7684\u6807\u7b7e\u9875\u3002 :tabo[nly] \uff1a \u5173\u95ed\u5176\u5b83\u7684\u6807\u7b7e\u9875\u3002 :tabs \uff1a \u5217\u51fa\u6240\u6709\u7684\u6807\u7b7e\u9875\u548c\u5b83\u4eec\u5305\u542b\u7684\u7a97\u53e3\u3002 :tabm[ove] <N> \uff1a \u5c06\u5f53\u524d\u6807\u7b7e\u9875\u79fb\u52a8\u5230\u7b2c \\(N\\) \u4e2a\u6807\u7b7e\u9875\u4e4b\u540e\u3002 \u67e5\u627e/\u66ff\u6362\u7c7b \u03c8(\uff40\u2207\u00b4)\u03c8 :s/old/new \uff1a\u7528 new \u66ff\u6362\u5f53\u524d\u884c\u7b2c\u4e00\u4e2a old \u3002 :s/old/new/g \uff1a\u7528 new \u66ff\u6362\u5f53\u524d\u884c\u6240\u6709\u7684 old \u3002 :n1,n2s/old/new/g \uff1a\u7528 new \u66ff\u6362\u5f53\u524d\u6587\u4ef6 n1 \u884c\u5230 n2 \u884c\u6240\u6709\u7684 old \u3002 :%s/old/new/g \uff1a\u7528 new \u66ff\u6362\u6587\u4ef6\u4e2d\u6240\u6709\u7684 old \u3002 :%s/^/xxx/g \uff1a\u5728\u6bcf\u4e00\u884c\u7684\u884c\u9996\u63d2\u5165 xxx \uff0c ^ \u8868\u793a\u884c\u9996\u3002 :%s/$/xxx/g \uff1a\u5728\u6bcf\u4e00\u884c\u7684\u884c\u5c3e\u63d2\u5165 xxx \uff0c $ \u8868\u793a\u884c\u5c3e\u3002 Tips: \u5982\u679c\u6240\u6709\u66ff\u6362\u547d\u4ee4\u672b\u5c3e\u52a0\u4e0a\u4e86 c \uff0c\u5219\u6bcf\u4e2a\u66ff\u6362\u90fd\u5c06\u9700\u8981\u7528\u6237\u786e\u8ba4\u3002 \u5982 :%s/old/new/gc \uff0c\u52a0\u4e0a i \u5219\u5ffd\u7565\u5927\u5c0f\u5199 (ignore) \u3002 \u63d2\u4ef6\u6269\u5c55\u5feb\u6377\u952e\u7c7b \u03c8(\uff40\u2207\u00b4)\u03c8 [N] \\ci \\cu \uff1a \u8bbe\u7f6e\u6ce8\u91ca\u6216\u8005\u53d6\u6d88\u6ce8\u91ca\uff08Need Nerd-Commenter\uff09 [N] zR \uff1a\u5c55\u5f00\u6240\u6709 Folding\uff08Markdown\uff09 [N/V] C-N \uff1a\u9009\u4e2d\u8bcd\u6c47\u5e76\u8fdb\u5165 Visual-Multi\uff0c\u6216\u8005\u9009\u4e2d\u4e0b\u4e00\u4e2a\u5339\u914d\uff08Need Visual-Multi\uff09 [M] n/N \uff1a\u83b7\u53d6\u4e0b\u4e00\u4e2a/\u4e0a\u4e00\u4e2a\u4e8b\u4ef6\u3002 [M] q \uff1a\u8df3\u8fc7\u5f53\u524d\u4e8b\u4ef6\u3002 C-Down/Up \uff1a\u521b\u5efa\u5782\u76f4\u5149\u6807\u3002 :MarkdownPreview \uff1a\u9884\u89c8 Markdown\u3002 :MarkdownPreviewStop \uff1a\u505c\u6b62\u9884\u89c8\u3002 \u8865\u5168 \u03c8(\uff40\u2207\u00b4)\u03c8 [I]C-x C-f \uff1a\u8865\u5168\u6587\u4ef6\u540d \u5176\u5b83\u7684\u4e0d\u5e38\u7528\u61d2\u5f97\u5199\u4e86\uff0c\u53cd\u6b63\u6211\u6709 vim-auto-popmenu \u3002 \u5176\u4ed6\u6280\u5de7 \u03c8(\uff40\u2207\u00b4)\u03c8 :pwd \uff1a\u663e\u793a\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u3002 :reg \uff1a\u663e\u793a register \u72b6\u6001\u3002 \u5728\u4efb\u610f\u547d\u4ee4\u540e\u52a0\u4e0a ! \u8868\u793a\u5f3a\u5236\u6267\u884c\uff0c\u4f8b\u5982 :q! \uff0c :close! \u3002 \u5728\u4efb\u610f\u547d\u4ee4\u524d\u52a0\u4e0a ! \u8868\u793a\u5728\u7ec8\u7aef\u4e2d\u6267\u884c\u547d\u4ee4\u3002 :terminal \u53ef\u4ee5\u5728\u5f53\u524d\u76ee\u5f55\u6253\u5f00\u4e00\u4e2a\u65b0\u7684\u7ec8\u7aef\uff08Windows\u4e0b\u9ed8\u8ba4 cmd\uff09\u3002 :TOhtml \u53ef\u4ee5\u628a\u5f53\u524d\u6587\u6863\u8f6c\u5316\u4e3a HTML\u3002 \u5927\u90e8\u5206\u547d\u4ee4\u524d\u52a0\u4e0a\u6570\u5b57\u8868\u793a\u91cd\u590d\u591a\u5c11\u6b21\u3002 cd \u53ef\u4ee5\u66f4\u6539\u5de5\u4f5c\u76ee\u5f55\u3002 \u5728 Command \u6a21\u5f0f\u4e0b\u4f7f\u7528 Tab \u4f1a\u6709\u8865\u5168\uff08\u533a\u5206\u5927\u5c0f\u5199\uff09 /xxx \u53ef\u4ee5\u7528\u6765\u7d22\u7d22 xxx \uff0c\u63a5\u4e0a <CR> \u53ef\u4ee5\u8df3\u5230\u4e0b\u4e00\u4e2a\u5339\u914d\u7684\u4f4d\u7f6e\uff0c\u6211\u559c\u6b22\u5728 #define int long long \u4e4b\u540e /int main<CR> /xk\u3002 Vim \u7684\u5927\u90e8\u5206\u547d\u4ee4\u90fd\u662f\u5355\u8bcd\u7684\u7f29\u5199\uff0c\u6bd4\u5982 yank, paste, quit, write. \u5728\u5185\u7f6e\u7ec8\u7aef\u91cc\u4f7f\u7528 vim command \u65f6\u5019\u9700\u8981\u52a0\u4e0a C-w \u6765\u8f6c\u4e49\u3002","title":"Vim \u7b80\u660e\u4f7f\u7528\u6307\u5317"},{"location":"misc/vim-usage/#_1","text":"","title":"\u7f16\u8f91\u6a21\u5f0f"},{"location":"misc/vim-usage/#normal-mode","text":"\u4e00\u822c Vim \u7684\u547d\u4ee4\u90fd\u662f\u5728 Normal mode \u4e0b\u9762\u5b8c\u6210\u7684\u3002 \u6240\u6709\u6a21\u5f0f\u6309 ESC \u90fd\u53ef\u4ee5\u8fdb\u5165 Normal mode\u3002 Normal mode \u4e0d\u53ef\u4ee5\u8fdb\u884c\u8f93\u5165\uff0c\u952e\u76d8\u4e0a\u6240\u6709\u7684\u5b57\u6bcd\u57fa\u672c\u90fd\u662f\u4e2a\u547d\u4ee4\u3002 \u4e5f\u53ef\u4ee5\u7528 : \u8fdb\u5165 Command mode\u3002 \u4e0b\u9762\u7684\u547d\u4ee4\u4f1a\u6807\u8bb0 [N] \u8868\u793a\u8be5\u5feb\u6377\u952e\u5728 Normal mode \u4e0b\u53ef\u7528\u3002","title":"Normal Mode"},{"location":"misc/vim-usage/#command-mode","text":"\u53ef\u4ee5\u8fdb\u884c\u4e00\u4e9b\u6587\u4ef6\u64cd\u4f5c\uff0c\u5c5e\u6027\u7684\u8bbe\u7f6e\u3002 \u8fd8\u53ef\u4ee5\u5229\u7528 :!<Command> \u5728\u4e00\u4e2a\u5916\u90e8\u7ec8\u7aef\u91cc\u9762\u6267\u884c <Command> \u547d\u4ee4\u3002 \u6bd4\u5982 !g++ % -o %< -Wall -std=c++17 -O2 -g \u5c31\u53ef\u4ee5\u7f16\u8bd1\u5f53\u524d\u7684\u6587\u4ef6\uff08cpp\uff09\u3002","title":"Command Mode"},{"location":"misc/vim-usage/#insert-mode","text":"\u6b63\u5e38\u7684\u8f93\u5165\u6a21\u5f0f\uff0cVim Easy \u53ea\u6709\u8fd9\u4e2a\u6a21\u5f0f\u3002","title":"Insert Mode"},{"location":"misc/vim-usage/#visual-mode","text":"\u9009\u62e9\u6a21\u5f0f\uff0c\u6709\u4e09\u79cd\u3002 \u7b2c\u4e00\u79cd\u662f\u5728 Normal mode \u4e0b\u6309 v \u8fdb\u5165\u7684\u53ef\u89c6\u6a21\u5f0f\uff0c\u8fd9\u4e2a\u5c31\u662f\u7c7b\u4f3c\u5176\u4ed6 Editor \u7684\u9009\u62e9\u529f\u80fd\u3002 \u7b2c\u4e8c\u79cd\u662f\u6309 V \u4e5f\u5c31\u662f S-v \u8fdb\u5165\u7684\u884c\u53ef\u89c6\u6a21\u5f0f\uff0c\u8fd9\u4e2a\u6a21\u5f0f\u4f1a\u81ea\u52a8\u9009\u62e9\u5149\u6807\u6240\u5728\u884c\uff0c\u5e76\u4e14\u4f1a\u590d\u5236\u6362\u884c\u7b26\u3002 \u7b2c\u4e09\u79cd\u662f\u6309 C-v \u8fdb\u5165\u7684\u5757\u53ef\u89c6\u6a21\u5f0f\uff0c\u8fd9\u4e2a\u6a21\u5f0f\u4f1a\u9009\u4e2d\u4e00\u4e2a\u5757\uff08\u77e9\u5f62\uff09\uff0c\u6bd4\u5982\u4e0b\u9762\u8fd9\u4e2a\u5b9e\u4f8b\uff1a 1 2 std :: cin . tie ( 0 ) -> sync_with_stdio ( false ); std :: cin . exceptions ( cin . failbit | cin . badbit ); \u6211\u4eec\u60f3\u628a\u5b83\u4eec\u524d\u9762\u7684 std:: \u5168\u90e8\u5220\u6389\uff0c\u5c31\u53ef\u4ee5\u7528\u5757\u53ef\u89c6\u6a21\u5f0f\u9009\u4e2d\u7136\u540e\u5220\u9664\uff08\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u4e00\u4e2a\u4e2a\u67e5\u627e\u7136\u540erepalce\u6389\u5b83\u4eec\uff09\u3002","title":"Visual Mode"},{"location":"misc/vim-usage/#replace-mode","text":"\u6309 R \u8fdb\u5165\uff0c\u987e\u540d\u601d\u4e49\u662f\u7528\u6765\u6279\u91cf replace \u7684\u3002","title":"Replace Mode"},{"location":"misc/vim-usage/#_2","text":"","title":"\u7f16\u8f91\u5668\u5feb\u6377\u952e"},{"location":"misc/vim-usage/#_3","text":"[N/V] h j k l \uff1a \u4e0a\u4e0b\u5de6\u53f3\uff08\u53ef\u4ee5\u5728\u524d\u9762\u52a0\u4e0a\u6570\u5b57\u8868\u793a\u91cd\u590d\u591a\u5c11\u6b21\uff0c\u6bd4\u5982 \\(3l\\) \u5c31\u662f\u5f80\u5de6\u79fb\u52a8\u4e09\u4e2a\u5b57\u7b26\uff08Vim \u7684\u6240\u6709\u547d\u4ee4\u57fa\u672c\u90fd\u652f\u6301\u8fd9\u4e2a\uff09\uff09 [N/V] gg \uff1a\u8df3\u5230\u6587\u4ef6\u7684\u5f00\u5934\u3002 [N/V] G \uff1a\u8df3\u5230\u6587\u4ef6\u7684\u7ed3\u5c3e [N/V] <Number>G / :<Number> \uff1a \u8df3\u5230\u7b2c <Number> \u884c [N/V] <Number>| \uff1a\u628a\u5149\u6807\u79fb\u52a8\u5230\u7b2c <Number> \u5217\u4e0a [N/V] Backspace Space \uff1a \u79fb\u52a8\u5230\u4e0a\u4e00\u4e2a\u5b57\u7b26/\u4e0b\u4e00\u4e2a\u5b57\u7b26 [N/V] + Enter \uff1a\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\u7b2c\u4e00\u4e2a\u975e\u7a7a\u767d\u5b57\u7b26 [N/V] - \uff1a\u79fb\u52a8\u5230\u4e0a\u4e00\u884c\u7b2c\u4e00\u4e2a\u975e\u7a7a\u767d\u5b57\u7b26\u3002 [N] f<Char> \uff1a\u79fb\u52a8\u5230\u540c\u4e00\u884c\u7684\u4e0b\u4e00\u4e2a <Char> \u5b57\u7b26\u5904\u3002 [N] F<Char> \uff1a\u79fb\u52a8\u5230\u540c\u4e00\u884c\u7684\u4e0a\u4e00\u4e2a <Char> \u5b57\u7b26\u5904\u3002 [N/V] 0/^/$ \uff1a\u79fb\u52a8\u5230\u786c/\u8f6f\u884c\u5934/\u5c3e\u3002(\u8f6f\u884c\u9996\u4e0d\u5305\u62ec\u7f29\u8fdb\uff0c\u5373\u6307\u7b2c\u4e00\u4e2a\u53ef\u89c1\u5b57\u7b26\u3002) [N/V] H : \u628a\u5149\u6807\u79fb\u5230\u5c4f\u5e55\u6700\u9876\u7aef\u4e00\u884c\u3002 [N/V] M : \u628a\u5149\u6807\u79fb\u5230\u5c4f\u5e55\u4e2d\u95f4\u4e00\u884c\u3002 [N/V] L : \u628a\u5149\u6807\u79fb\u5230\u5c4f\u5e55\u6700\u5e95\u7aef\u4e00\u884c\u3002 [N/V] w/W \uff1a\u8df3\u5230\u4e0b\u4e00\u4e2a\u5355\u8bcd\u5f00\u5934 [N/V] e/E \uff1a\u8df3\u5230\u4e0b\u4e00\u4e2a\u5355\u8bcd\u7ed3\u5c3e [N/V] b/B \uff1a\u8df3\u5230\u4e0a\u4e00\u4e2a\u5355\u8bcd\u5f00\u5934 \u8fd9\u4e09\u4e2a\u952e\u7684\u5c0f\u5199\u662f\u53ea\u8981\u6709\u8fd0\u7b97\u7b26\u6216\u8005\u7a7a\u683c\u5c31\u5206\u5272\uff0c\u5927\u5199\u53ea\u4ee5\u7a7a\u683c\u4e3a\u6807\u51c6\u5212\u5206\u3002","title":"\u79fb\u52a8\u7c7b"},{"location":"misc/vim-usage/#_4","text":"[N] i \uff1a\u8fdb\u5165 Insert Mode\uff08\u5728\u5f53\u524d\u5149\u6807\u5757\u7684\u5de6\u4fa7\u63d2\u5165\uff09 [N] a \uff1a\u8fdb\u5165 Insert Mode\uff08\u5728\u5f53\u524d\u5149\u6807\u5757\u7684\u53f3\u4fa7\u63d2\u5165\uff09 [N] O \uff1a\u5728\u5f53\u524d\u884c\u4e0a\u65b9\u65b0\u5efa\u4e00\u884c\uff0c\u5e76\u8fdb\u5165\u63d2\u5165\u6a21\u5f0f\uff0c\u5149\u6807\u5904\u4e8e\u884c\u9996\uff08\u9664\u975e\u6709 auto indent\uff09 [N] o \uff1a\u5728\u5f53\u524d\u884c\u4e0b\u65b9\u65b0\u5efa\u4e00\u884c\uff0c\u5e76\u8fdb\u5165\u63d2\u5165\u6a21\u5f0f\uff0c\u5149\u6807\u5904\u4e8e\u884c\u9996\uff08\u9664\u975e\u6709 auto indent\uff09 [N] A \uff1a\u5c06\u5149\u6807\u79fb\u52a8\u81f3\u672c\u884c\u672b\u5c3e\uff0c\u540c\u65f6\u8fdb\u5165\u63d2\u5165\u6a21\u5f0f\u3002 [N] I \uff1a\u5c06\u5149\u6807\u79fb\u52a8\u81f3\u672c\u884c\u9996\uff0c\u540c\u65f6\u8fdb\u5165\u63d2\u5165\u6a21\u5f0f\u3002 [N] S \uff1a\u5220\u9664\u672c\u884c\u7684\u6240\u6709\u6587\u5b57\uff0c\u540c\u65f6\u8fdb\u5165\u63d2\u5165\u6a21\u5f0f\u3002 [N] u/C-r \uff1aUndo \u548c Redo\u3002 [N] ~ \uff1a\u53cd\u8f6c\u5149\u6807\u5757\u5b57\u7b26\u7684\u5927\u5c0f\u5199\u3002","title":"\u7eaf\u7f16\u8f91\u7c7b"},{"location":"misc/vim-usage/#_5","text":"[V] y \uff1a\u590d\u5236\u5728\u53ef\u89c6\u6a21\u5f0f\u4e0b\u9009\u4e2d\u7684\u6587\u672c\uff08\u53ef\u4ee5\u52a0\u7ec4\u5408\u952e\u6765\u590d\u5236\u4e00\u4e2a\u5355\u8bcd/\u53e5\u5b50\u4e4b\u7c7b\u7684\uff0c\u4e0d\u8fc7\u6211\u4e0d\u548b\u7528\u5c31\u4e0d\u5199\u4e86\uff09\u3002 [N/V] yy \u590d\u5236\u5f53\u524d\u884c\u3002 [N] ggVG \uff1a\u8fd9\u662f\u4e00\u4e2a\u7ec4\u5408\u952e\uff0c\u7b49\u4ef7\u4e8e\u5168\u6587\u590d\u5236\uff08\u4f1a\u591a\u590d\u5236\u4e00\u4e2a\u6362\u884c\u7b26\uff09\u3002 [N/V] d \uff1a\u526a\u5207\uff08\u9700\u8981\u7c7b\u4f3c d<Number><Move> \u7684\u7ec4\u5408\u952e\uff0c\u6bd4\u5982 d8l \u5c31\u662f\u5220\u9664\u5149\u6807\u5757\u53f3\u8fb98\u4e2a\u5b57\u7b26\uff08\u5305\u62ec\u5149\u6807\u5757\u672c\u8eab\uff08\u5149\u6807\u5b9e\u9645\u4e0a\u662f\u5728\u5149\u6807\u5757\u7684\u5de6\u8fb9\uff09\uff09\uff0c d8h \u5219\u662f\u5de6\u8fb9\uff08\u4e0d\u542b\u5149\u6807\u5757\uff09\uff0c dG \u662f\u4ece\u5f53\u524d\u884c\u4e00\u76f4\u5220\u5230\u6587\u4ef6\u7ed3\u5c3e\uff09\u3002 [N/V] dd \uff1a\u526a\u5207\u4e00\u6574\u884c\u3002 [N/V] x<Number> \uff1a\u5220\u9664\u5149\u6807\u53f3\u8fb9 <Number> \u4e2a\u5b57\u7b26\uff08\u5149\u6807\u662f\u5728\u5149\u6807\u5757\u7684\u5de6\u8fb9\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u76f4\u63a5\u6309 x \u4f1a\u5220\u9664\u5149\u6807\u5757\u9009\u4e2d\u7684\u5b57\u7b26\uff09\u3002 [N/V] X<Number> \uff1a\u5de6\u8fb9\u3002 [C] :<i>,<j> dd \uff1a\u526a\u5207\u7b2c \\(i\\) \u884c\u5230\u7b2c \\(j\\) \u884c\u7684\u6240\u6709\u6587\u672c\u3002 [N] p/P \uff1a\u5728\u5149\u6807\u7684\u540e/\u524d\u4f4d\u7f6e\u7c98\u8d34\uff08\u6ce8\u610f\u662f\u5426\u590d\u5236\u4e86\u6362\u884c\u7b26\uff0c\u53ef\u4ee5\u4f7f\u7528 reg \u67e5\u770b\u5bf9\u5e94\u5bc4\u5b58\u5668\u91cc\u7684\u4e1c\u897f\uff09 [N/V] \"<char>y \uff1a\u590d\u5236\u5230 <char> \u5bc4\u5b58\u5668\u5f53\u4e2d\uff08 0 ~ 9 \u7684\u6570\u5b57\uff0c a ~ z/A ~ Z \u7684\u5b57\u6bcd\uff0c +-* \uff09\uff0c\u7c98\u8d34\u540c\u7406\u3002 * \u662f\u5f53\u524d\u7f13\u51b2\u533a\uff0c\u7cfb\u7edf\u526a\u8d34\u677f\u4e5f\u4f1a\u5230\u8fd9\u91cc\u9762\u6765\u3002 \u4e00\u4e2a tips\uff1a\u5982\u679c\u76f4\u63a5 <S-v>$d \u662f\u4f1a\u5e26\u4e0a\u6362\u884c\u7b26\u7684\uff0c\u4e0d\u60f3\u8981\u53ef\u4ee5 $ \u4e4b\u540e h \u3002","title":"\u590d\u5236\u7c98\u8d34\u7c7b"},{"location":"misc/vim-usage/#_6","text":":file filename \uff1a\u547d\u540d\u5f53\u524d\u6587\u4ef6\u4e3a filename \u3002 :e file \uff1a\u5173\u95ed\u5f53\u524d\u7684\u6587\u4ef6\uff0c\u6253\u5f00\u6587\u4ef6 file \uff08\u53ef\u4ee5\u662f\u76ee\u5f55\uff0c\u53ef\u4ee5\u6307\u5b9a\u6587\u4ef6\u4f4d\u7f6e\uff09 :e# \uff1a\u56de\u5230\u4e0a\u4e00\u4e2a\u6587\u4ef6 :e \uff1a\u91cd\u65b0\u52a0\u8f7d\u5f53\u524d\u6587\u4ef6\u3002 :w \uff1a\u5199\u5165\u5f53\u524d\u6587\u4ef6\u3002 :q \uff1a\u9000\u51fa\u3002 :wq \uff1a\u4fdd\u5b58\u5e76\u9000\u51fa\u3002 :saveas filename \uff1a\u53e6\u5b58\u4e3a\u3002","title":"\u6587\u4ef6\u64cd\u4f5c\u7c7b"},{"location":"misc/vim-usage/#_7","text":"[N]C-f : \u4e0b\u7ffb\u4e00\u5c4f\u3002 [N]C-b : \u4e0a\u7ffb\u4e00\u5c4f\u3002 [N]C-d : \u4e0b\u7ffb\u534a\u5c4f\u3002 [N]C-u : \u4e0a\u7ffb\u534a\u5c4f\u3002 [N]C-e : \u5411\u4e0b\u6eda\u52a8\u4e00\u884c\u3002 [N]C-y : \u5411\u4e0a\u6eda\u52a8\u4e00\u884c\u3002 [N]zz : \u5c06\u5f53\u524d\u884c\u79fb\u52a8\u5230\u5c4f\u5e55\u4e2d\u592e\u3002 [N]zt : \u5c06\u5f53\u524d\u884c\u79fb\u52a8\u5230\u5c4f\u5e55\u9876\u7aef\u3002 [N]zb : \u5c06\u5f53\u524d\u884c\u79fb\u52a8\u5230\u5c4f\u5e55\u5e95\u7aef\u3002 [N]C-w H/J/K/L \uff1a\u5c06\u5f53\u524d\u7a97\u53e3\u79fb\u52a8\u5230\u5c4f\u5e55\u7684\u5de6/\u4e0b/\u4e0a/\u53f3\u5904\u3002 [N]C-w h/j/k/l \uff1a\u5207\u6362\u5230\u5de6/\u4e0b/\u4e0a/\u53f3\u7684\u7a97\u53e3\u3002 [N]C-w C-w \uff1a\u6309\u987a\u5e8f\u5207\u6362\u7a97\u53e3\u3002 [N]C-w -+<> \uff1a\u66f4\u6539\u5f53\u524d\u7a97\u53e3\u5927\u5c0f [N]C-w = \uff1a\u5e73\u5747\u5206\u914d\u5927\u5c0f\u3002 :split \uff1a\u5206\u5272\u5f53\u524d\u7684\u7a97\u53e3\u4e3a\u4e24\u4e2a\u7a97\u53e3\uff08\u6c34\u5e73\u5206\u5272\uff09\uff0c\u53ef\u4ee5\u7528 :set scb \u6253\u5f00\u540c\u6b65\u6eda\u52a8\u3002 :split <filename> \uff1a\u6c34\u5e73\u5206\u5272\u5e76\u6253\u5f00\u65b0\u7684\u6587\u4ef6\u3002 :new \uff1a\u6c34\u5e73\u6253\u5f00\u4e00\u4e2a\u65b0\u7a97\u53e3\u5e76\u7f16\u8f91\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6\u3002 :vsplit/:vnew \uff1a\u7ad6\u76f4\u5206\u5272\u3002 :only \uff1a\u53ea\u4fdd\u7559\u5f53\u524d\u7a97\u53e3\u3002 :close \uff1a\u5173\u95ed\u5f53\u524d\u7a97\u53e3\u3002","title":"\u5c4f\u5e55\u64cd\u4f5c\u7c7b"},{"location":"misc/vim-usage/#_8","text":"vim a.txt b.cpp c.json \u53ef\u4ee5\u540c\u65f6\u6253\u5f00\u591a\u4e2a\u6587\u4ef6\u3002 :n \u53ef\u4ee5\u7f16\u8f91\u4e0b\u4e00\u4e2a\u6587\u4ef6\uff0c :N \u53ef\u4ee5\u7f16\u8f91\u4e0a\u4e00\u4e2a\u6587\u4ef6\u3002 :ls \u6216\u8005 :args \u53ef\u4ee5\u663e\u793a\u6587\u4ef6\u5217\u8868\u3002","title":"\u591a\u6587\u4ef6\u7f16\u8f91\u7c7b"},{"location":"misc/vim-usage/#_9","text":"\u6ce8\u610f\u8fd9\u4e2a\u548c\u591a\u6587\u4ef6\u4e0d\u4e00\u6837\uff0c\u4e00\u4e2a\u6807\u7b7e\u9875\u91cc\u53ef\u4ee5\u6709\u591a\u4e2a\u7a97\u53e3\uff0c\u591a\u6587\u4ef6\u4e0d\u662f\u6807\u7b7e\u9875\uff0c\u53ea\u662f\u540c\u65f6\u6253\u5f00\u4e86\u591a\u4e2a\u6587\u4ef6\u3002 \u4e5f\u5c31\u662f\u8bf4\u6807\u7b7e\u9875\u7c7b\u4f3c Workspace\u3002 vim -p files \uff1a\u6253\u5f00\u591a\u4e2a\u6587\u4ef6\uff0c\u6bcf\u4e2a\u6587\u4ef6\u5360\u7528\u4e00\u4e2a\u6807\u7b7e\u9875\u3002 :tabe/:tabnew \uff1a\u5982\u679c\u52a0\u6587\u4ef6\u540d\uff0c\u5c31\u5728\u65b0\u7684\u6807\u7b7e\u4e2d\u6253\u5f00\u8fd9\u4e2a\u6587\u4ef6\uff0c \u5426\u5219\u6253\u5f00\u4e00\u4e2a\u7a7a\u7f13\u51b2\u533a\u3002 C-w gf \uff1a\u5728\u65b0\u7684\u6807\u7b7e\u9875\u91cc\u6253\u5f00\u5149\u6807\u4e0b\u8def\u5f84\u6307\u5b9a\u7684\u6587\u4ef6\u3002 :tabn \uff1a\u5207\u6362\u5230\u4e0b\u4e00\u4e2a\u6807\u7b7e\uff0c C-PageDown \u4e5f\u53ef\u4ee5\u3002 :tabp \uff1a \u5207\u6362\u5230\u4e0a\u4e00\u4e2a\u6807\u7b7e\uff0c C-PageUp \u4e5f\u53ef\u4ee5\u3002 <n> gt \uff1a \u5207\u6362\u5230\u4e0b\u4e00\u4e2a\u6807\u7b7e\u3002\u5982\u679c\u524d\u9762\u52a0\u4e86 n\uff0c\u5c31\u5207\u6362\u5230\u7b2c n \u4e2a\u6807\u7b7e\u3002\u7b2c\u4e00\u4e2a\u6807\u7b7e\u7684\u5e8f\u53f7\u662f 1\u3002 gT \uff1a\u5207\u6362\u5230\u4e0a\u4e00\u4e2a\u3002 :tab split \uff1a \u5c06\u5f53\u524d\u7f13\u51b2\u533a\u7684\u5185\u5bb9\u5728\u65b0\u9875\u7b7e\u4e2d\u6253\u5f00\u3002 :tabc[lose] \uff1a \u5173\u95ed\u5f53\u524d\u7684\u6807\u7b7e\u9875\u3002 :tabo[nly] \uff1a \u5173\u95ed\u5176\u5b83\u7684\u6807\u7b7e\u9875\u3002 :tabs \uff1a \u5217\u51fa\u6240\u6709\u7684\u6807\u7b7e\u9875\u548c\u5b83\u4eec\u5305\u542b\u7684\u7a97\u53e3\u3002 :tabm[ove] <N> \uff1a \u5c06\u5f53\u524d\u6807\u7b7e\u9875\u79fb\u52a8\u5230\u7b2c \\(N\\) \u4e2a\u6807\u7b7e\u9875\u4e4b\u540e\u3002","title":"\u591a\u6807\u7b7e\u7f16\u8f91\u7c7b"},{"location":"misc/vim-usage/#_10","text":":s/old/new \uff1a\u7528 new \u66ff\u6362\u5f53\u524d\u884c\u7b2c\u4e00\u4e2a old \u3002 :s/old/new/g \uff1a\u7528 new \u66ff\u6362\u5f53\u524d\u884c\u6240\u6709\u7684 old \u3002 :n1,n2s/old/new/g \uff1a\u7528 new \u66ff\u6362\u5f53\u524d\u6587\u4ef6 n1 \u884c\u5230 n2 \u884c\u6240\u6709\u7684 old \u3002 :%s/old/new/g \uff1a\u7528 new \u66ff\u6362\u6587\u4ef6\u4e2d\u6240\u6709\u7684 old \u3002 :%s/^/xxx/g \uff1a\u5728\u6bcf\u4e00\u884c\u7684\u884c\u9996\u63d2\u5165 xxx \uff0c ^ \u8868\u793a\u884c\u9996\u3002 :%s/$/xxx/g \uff1a\u5728\u6bcf\u4e00\u884c\u7684\u884c\u5c3e\u63d2\u5165 xxx \uff0c $ \u8868\u793a\u884c\u5c3e\u3002 Tips: \u5982\u679c\u6240\u6709\u66ff\u6362\u547d\u4ee4\u672b\u5c3e\u52a0\u4e0a\u4e86 c \uff0c\u5219\u6bcf\u4e2a\u66ff\u6362\u90fd\u5c06\u9700\u8981\u7528\u6237\u786e\u8ba4\u3002 \u5982 :%s/old/new/gc \uff0c\u52a0\u4e0a i \u5219\u5ffd\u7565\u5927\u5c0f\u5199 (ignore) \u3002","title":"\u67e5\u627e/\u66ff\u6362\u7c7b"},{"location":"misc/vim-usage/#_11","text":"[N] \\ci \\cu \uff1a \u8bbe\u7f6e\u6ce8\u91ca\u6216\u8005\u53d6\u6d88\u6ce8\u91ca\uff08Need Nerd-Commenter\uff09 [N] zR \uff1a\u5c55\u5f00\u6240\u6709 Folding\uff08Markdown\uff09 [N/V] C-N \uff1a\u9009\u4e2d\u8bcd\u6c47\u5e76\u8fdb\u5165 Visual-Multi\uff0c\u6216\u8005\u9009\u4e2d\u4e0b\u4e00\u4e2a\u5339\u914d\uff08Need Visual-Multi\uff09 [M] n/N \uff1a\u83b7\u53d6\u4e0b\u4e00\u4e2a/\u4e0a\u4e00\u4e2a\u4e8b\u4ef6\u3002 [M] q \uff1a\u8df3\u8fc7\u5f53\u524d\u4e8b\u4ef6\u3002 C-Down/Up \uff1a\u521b\u5efa\u5782\u76f4\u5149\u6807\u3002 :MarkdownPreview \uff1a\u9884\u89c8 Markdown\u3002 :MarkdownPreviewStop \uff1a\u505c\u6b62\u9884\u89c8\u3002","title":"\u63d2\u4ef6\u6269\u5c55\u5feb\u6377\u952e\u7c7b"},{"location":"misc/vim-usage/#_12","text":"[I]C-x C-f \uff1a\u8865\u5168\u6587\u4ef6\u540d \u5176\u5b83\u7684\u4e0d\u5e38\u7528\u61d2\u5f97\u5199\u4e86\uff0c\u53cd\u6b63\u6211\u6709 vim-auto-popmenu \u3002","title":"\u8865\u5168"},{"location":"misc/vim-usage/#_13","text":":pwd \uff1a\u663e\u793a\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u3002 :reg \uff1a\u663e\u793a register \u72b6\u6001\u3002 \u5728\u4efb\u610f\u547d\u4ee4\u540e\u52a0\u4e0a ! \u8868\u793a\u5f3a\u5236\u6267\u884c\uff0c\u4f8b\u5982 :q! \uff0c :close! \u3002 \u5728\u4efb\u610f\u547d\u4ee4\u524d\u52a0\u4e0a ! \u8868\u793a\u5728\u7ec8\u7aef\u4e2d\u6267\u884c\u547d\u4ee4\u3002 :terminal \u53ef\u4ee5\u5728\u5f53\u524d\u76ee\u5f55\u6253\u5f00\u4e00\u4e2a\u65b0\u7684\u7ec8\u7aef\uff08Windows\u4e0b\u9ed8\u8ba4 cmd\uff09\u3002 :TOhtml \u53ef\u4ee5\u628a\u5f53\u524d\u6587\u6863\u8f6c\u5316\u4e3a HTML\u3002 \u5927\u90e8\u5206\u547d\u4ee4\u524d\u52a0\u4e0a\u6570\u5b57\u8868\u793a\u91cd\u590d\u591a\u5c11\u6b21\u3002 cd \u53ef\u4ee5\u66f4\u6539\u5de5\u4f5c\u76ee\u5f55\u3002 \u5728 Command \u6a21\u5f0f\u4e0b\u4f7f\u7528 Tab \u4f1a\u6709\u8865\u5168\uff08\u533a\u5206\u5927\u5c0f\u5199\uff09 /xxx \u53ef\u4ee5\u7528\u6765\u7d22\u7d22 xxx \uff0c\u63a5\u4e0a <CR> \u53ef\u4ee5\u8df3\u5230\u4e0b\u4e00\u4e2a\u5339\u914d\u7684\u4f4d\u7f6e\uff0c\u6211\u559c\u6b22\u5728 #define int long long \u4e4b\u540e /int main<CR> /xk\u3002 Vim \u7684\u5927\u90e8\u5206\u547d\u4ee4\u90fd\u662f\u5355\u8bcd\u7684\u7f29\u5199\uff0c\u6bd4\u5982 yank, paste, quit, write. \u5728\u5185\u7f6e\u7ec8\u7aef\u91cc\u4f7f\u7528 vim command \u65f6\u5019\u9700\u8981\u52a0\u4e0a C-w \u6765\u8f6c\u4e49\u3002","title":"\u5176\u4ed6\u6280\u5de7"},{"location":"misc/tf/bms/","text":"\u5165\u5751\u65f6\u95f4\u8bb0\u4e0d\u5230\u4e86\uff0c\u4f30\u8ba1\u662f\u4e09\u6708\u4efd\u5427\u3002 LR2IR Id: Enonya 181734 \u5165\u5751\u524d\u6709 Malody v2 3dan \u7684 4k \u5b9e\u529b\uff0c\u6240\u4ee5\u4e5f\u8bb8\u52c9\u5f3a\u80fd\u770b\u3002 \u6700\u8fd1\u6b63\u5728\u5efa\u7acb\u6620\u5c04\u3002 \u8868\u683c\u8bb0\u5f55\u7684\u8bdd\uff0c\u76ee\u524d\u5148\u4e0d\u6253\u7b97\u8003 dan\uff0c\u5148\u6253\u70b9\u559c\u6b22\u7684\u66f2\u5b50\uff0c\u76ee\u6807\u662f\u7ec3\u4e86\u7684\u66f2\u5b50\u6253\u4e0a AA\uff1f\u559c\u6b22\u7684\u66f2\u5b50\u6253\u4e0a A\uff1f \u53cd\u6b63\u6709\u7a81\u7834\u4e86\u4f1a\u5728\u8fd9\u91cc\u8bb0\u5f55\uff1a 2023.04.04 \u4ee5\u524d\u7684\u6682\u7565\uff0c\u5982\u679c\u6709\u5370\u8c61\u5c31\u4f1a\u5199\u3002 \u76ee\u524d\u90fd\u662f Easy Gause \u548c Easy Judge Rank\u3002 \u96be\u5ea6\u8868\u8bb0\u5f55\u7528\uff1a \u901a\u5e38\u7b49\u7ea7\uff1a \u2606 \u53d1\u72c2\u7b49\u7ea7\uff1a \u2605 \u7b2c\u4e8c\u901a\u5e38\u7b49\u7ea7\uff1a \u25bd \u7b2c\u4e8c\u53d1\u72c2\u7b49\u7ea7\uff1a \u25bc Stardust\uff1a \u03be Overjoy: \u2605\u2605 Satellite: sl Stella: st \u6c60\u7530\uff1a \u7530 \u4e00\u4e9b\u6709\u7528\u7684\u94fe\u63a5 https://www.bilibili.com/read/cv14118840/ https://www.bilibili.com/read/cv12301830/ \u8fd1\u671f\u8ba1\u5212\uff1a Stardust \u96be\u5ea6\u8868\uff1f \u7b2c\u4e8c\u901a\u5e38\u7b49\u7ea7\uff1f \u5728\u516d\u6708\u4e4b\u524d\u7ec3\u5230\u80fd\u6253 Another 12(\u901a\u5e38) \u952e\u578b\u7ec3\u4e60\uff1a \u697c\u68af\uff08Sakura Fubuki / Altale\uff09 \u4e71/\u5207\uff08Regain\uff09 \u547d\u65e5 \u5355\u66f2\u7ec3\u4e60\uff1a \u66f2\u540d \u4f5c\u8005 \u6765\u6e90 \u5dee\u5206 \u8bc4\u7ea7 \u72b6\u6001 \u65f6\u95f4 \u6ce8\u91ca NightTheater \u308f\u304b\u3069\u308a BOFXVI SP NORMAL 5 A Clear N/A \u73a9\u7684\u7b2c\u4e00\u4e2a BMS \u8c31 GOODRUSH EBIMAYO BOF:ET [N] 6 AA Clear N/A \u7b2c\u4e00\u4e2a AA \u7684 lv.6 Poppy Columba(Daily vs. Roon_kun) BOFXVII SP NORMAL 7 AA Clear N/A \u7b2c\u4e00\u4e2a AA \u7684 lv.7 New York Back Raise TeamUOUO BOF:ET SP HYPER 8 AA Clear N/A \u7b2c\u4e00\u4e2a AA \u7684 lv.8 \u547d\u65e5 LeaF BMS\u3092\u305f\u304f\u3055\u3093\u4f5c\u308b\u305c'23BMS SP NORMAL 9 A Clear N/A \u7b2c\u4e00\u4e2a\u7cca\u5230 A \u7684 lv.9 Regain ProjectG BOFXVII SP NORMAL 6 AA Clear 23/04/05 Warm up Doppelganger LeaF BOF2013 SP NORMAL 7 A Clear 23/04/06 Warm up Regain ProjectG BOFXVII SP HYPER 9 A Clear 23/04/07 Warm up R.I.P. eicateve G2R2018 SP HYPER 9 A Clear 23/04/07 Warm up \u6bb5\u4f4d\u8003\u8bd5\uff1a \u8fd8\u6ca1\u6253\u3002","title":"Bms \u7ec3\u4e60\u8bb0\u5f55"},{"location":"misc/tf/ftg/","text":"\u6700\u8fd1\u6bd4\u8f83\u559c\u6b22\u975e\u60f3\u5929\u5219\u3002 Sakuya \u5f88\u5e05\uff01\u4f46\u662f\u6211\u53c8\u6446\u4e86\uff0c\u56e0\u4e3a\u6700\u8fd1\uff0c\u6ca1\u65f6\u95f4\u3002","title":"\u4e1c\u65b9\u6b63\u4f5c FTG \u7ec3\u4e60\u8bb0\u5f55"},{"location":"misc/tf/stg/","text":"\u5495\u5495\u5495\u4e86\uff0c\u6682\u65f6\u4e5f\u4e0d\u4f1a\u66f4\u65b0\u3002 \u56e0\u4e3a\u8fd1\u671f\u6ca1\u6709\u6253 STG\u3002","title":"\u4e1c\u65b9\u6b63\u4f5c STG \u7ec3\u4e60\u8bb0\u5f55"},{"location":"rec/","text":"\u8fd9\u4e2a\u5b50\u76ee\u5f55 Record \u4e0b\u53ef\u80fd\u4f1a\u51fa\u73b0\u7684\u5185\u5bb9\uff1a Codeforces & Atcoder \u505a\u9898\u8bb0\u5f55 & \u6539\u9519 \u5e73\u65f6\u7684\u7ec3\u4e60\u8bb0\u5f55\uff0c\u6bd4\u5982 (dark)Bzoj\uff0cLoj\uff0cUoj\uff0cLuogu \u7684\u9898\u76ee\u3002 \u4e00\u4e9b\u6bd4\u8f83\u6709\u610f\u601d\u7684\u5c0f\u4e13\u9898 & Tricks \u6574\u7406\u3002 \u73b0\u5728 CF/AT \u53ea\u6539 \\([1800, 2200]\\) \u533a\u95f4\u7684\u9898\uff0c\u4e13\u9898\u91cc\u53ea\u6709\u6709\u6536\u83b7\u7684\u624d\u5199\u3002--2023/04/04","title":"Index"},{"location":"rec/arc-vp-record/","text":"\u4e0d\u7ba1\u600e\u4e48\u6837\uff0c\u53cd\u6b63\u542c\u4e86 zjk \u7684\u5efa\u8bae\uff0cvp ARC \u6253\u7740\u73a9\u5c31\u5f53\u601d\u7ef4\u8bad\u7ec3\u4e86\u3002 ARC080 \u03c8(\uff40\u2207\u00b4)\u03c8 CSP2022 \u8003\u524d\u4e00\u5929\u548c hfy \u8fd8\u6709 wcx \u968f\u673a\u8df3\u4e86\u4e00\u573a ARC \u6253\u7740\u73a9\uff0c\u5c31\u5f53\u5f00\u62d3\u601d\u7ef4\u4e86\u3002 \u53d1\u73b0\u8fdc\u53e4 ARC \u548c ABC \u662f\u6210\u5bf9\u51fa\u73b0\u7684\uff0c\u76f8\u5f53\u4e8e div1 \u548c div2\u3002 \u611f\u89c9 CDE \u90fd\u662f\u53ef\u505a\u9898\uff0cCD \u6bd4\u8f83\u5e73\u51e1\uff0cE \u662f\u5c0f\u6e05\u65b0\u601d\u7ef4\u9898\uff0c\u611f\u89c9\u9700\u8981\u64c5\u957f\u89c2\u5bdf\u7ed3\u8bba\u624d\u5f04\u5f97\u51fa\u6765\u3002 F \u4e0d\u592a\u4f1a\uff0c\u4ee5\u540e\u53ef\u4ee5\u770b\u770b C - 4-adjacent \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u4f60\u8981\u91cd\u6392\u8fd9\u4e2a\u5e8f\u5217\uff0c\u4f7f\u5f97\u76f8\u90bb\u4e24\u9879\u4e58\u79ef\u90fd\u662f 4 \u7684\u500d\u6570\u3002 \u5982\u679c\u6709\u89e3\u8f93\u51fa Yes ,\u5426\u5219\u8f93\u51fa No \u3002 \u6bd4\u8f83\u7b80\u5355\uff0c\u8003\u8651\u5206\u7c7b\uff0c\u4e00\u7c7b\u662f\u5947\u6570\uff0c\u4e00\u7c7b\u662f \\(4\\) \u7684\u500d\u6570\uff0c\u53e6\u5916\u4e00\u7c7b\u662f\u4e0d\u662f \\(4\\) \u7684\u500d\u6570\u7684\u5076\u6570\u3002 \u6ce8\u610f\u5230\u5947\u6570\u7684\u4e24\u8fb9\u4e0d\u662f\u8fb9\u754c\u5c31\u4e00\u5b9a\u8981\u662f \\(4\\) \uff0c\u5982\u679c\u6ca1\u6709 \\(2 \\times \\text{odd}\\) \u5f62\u5f0f\u7684\u6570\uff0c\u90a3\u53ea\u8981\u5947\u6570\u4e2a\u6570\u5c0f\u4e8e\u7b49\u4e8e \\(4\\) \u7684\u500d\u6570\u7684\u4e2a\u6570 \\(+ 1\\) \u5373\u53ef\u3002 \u5982\u679c\u6709 \\(2 \\times \\text{odd}\\) \u5f62\u5f0f\u7684\u6570\uff0c\u90a3\u4e48\u5947\u6570\u7684\u4e2a\u6570\u5fc5\u987b\u8981\u662f \\(\\le\\) \\(4\\) \u7684\u500d\u6570\u7684\u4e2a\u6570\u7684\u3002 \u7136\u540e\u5c31\u6ca1\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 int c = 0 , cc = 0 , ccc = 0 ; cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { cin >> a [ i ]; if ( a [ i ] & 1 ) c ++ ; else if ( a [ i ] % 4 == 0 ) ccc ++ ; else if ( a [ i ] % 2 == 0 ) cc ++ ; } if (( c > ccc && cc ) || c - 1 > ccc ) cout << \"No\" << endl ; else cout << \"Yes\" << endl ; D - Grid Coloring \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u957f\u5ea6\u4e3a \\(q\\) \uff0c\u7ed9\u5b9a\u4e00\u4e2a \\(n\\times m\\) \u7684\u7f51\u683c\u3002 \u4fdd\u8bc1 \\(\\sum a_i = n \\times m\\) \uff0c\u73b0\u5728\u8981\u6c42\u4f60\u67d3 \\(q\\) \u4e2a 4-\u8054\u901a\u5757\u51fa\u6765\uff0c\u5176\u4e2d\u989c\u8272 \\(i\\) \u8981\u6709 \\(a_i\\) \u4e2a\u683c\u5b50\uff0c\u6784\u9020\u65b9\u6848\u3002 \\(100\\) \u3002 \u7b28\u6bd4\u9898\uff0c\u86c7\u5f62\u67d3\u8272\u5373\u53ef\uff0c\u663e\u7136\u4e00\u5b9a\u6709\u89e3\u3002 E - Young Maids \u03c8(\uff40\u2207\u00b4)\u03c8 \u9898\u76ee\u540d\u5b57\u597d\u602a\u3002 \u7ed9\u4f60\u4e00\u4e2a \\(1 \\sim n, (n \\equiv 0 (\\mod 2))\\) \u7684\u6392\u5217 \\(p\\) \uff0c\u4f60\u6bcf\u6b21\u53ef\u4ee5\u53d6\u51fa\u76f8\u90bb\u7684\u4e24\u4e2a\u5143\u7d20\uff0c\u628a\u4ed6\u4eec\u6309\u7167\u539f\u6765\u7684\u987a\u5e8f\u6254\u5230\u4e00\u4e2a\u961f\u5217\u7684\u5934\u90e8\u3002 \u95ee\u4f60\u6700\u540e\u53ef\u80fd\u5f97\u5230\u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u6392\u5217\u662f\u4ec0\u4e48\u3002 \u6570\u636e\u8303\u56f4 \\(2e5\\) \u3002 \u611f\u89c9\u5f88\u5c0f\u6e05\u65b0\uff0c\u9700\u8981\u4e00\u5b9a\u89c2\u5bdf\u80fd\u529b\uff1f \u9996\u5148\u6b63\u7740\u663e\u7136\u4e0d\u597d\u641e\uff0c \u8003\u8651\u5012\u8fc7\u6765\u89c2\u5bdf\u5408\u6cd5\u89e3\u7684\u5f62\u72b6 \uff08\u611f\u89c9\u548c 221025C \u7684\u7f6a\u4eba\u633d\u6b4c\u90a3\u9898\u60f3\u6cd5\u7c7b\u4f3c\uff09\u3002 \u9996\u5148\u6ce8\u610f\u5230\u5982\u679c\u53d6\u4e86 \\((x, y)\\) \u8fd9\u4e24\u4e2a\u4f4d\u7f6e\uff0c \u90a3\u4e48 \\([x + 1, y - 1]\\) \u8fd9\u4e2a\u533a\u95f4\u662f\u4e0d\u80fd\u548c\u5176\u5b83\u533a\u95f4\u7ec4\u5408\u7684\uff0c\u4e5f\u5c31\u662f\u4e0d\u80fd\u8de8\u533a\u95f4\u64cd\u4f5c\u3002 \u7531\u6b64\u53ef\u4ee5\u53d1\u73b0\u6bcf\u6b21\u53d6\u5230\u7684\u662f\u4e00\u4e2a\u5947\u6570\u9879 + \u4e00\u4e2a\u5076\u6570\u9879\u7684\u5f62\u5f0f\uff08\u4e0d\u7136\u4e00\u5b9a\u6ca1\u6cd5\u628a\u4efb\u610f\u4e00\u4e2a \\([x + 1, y - 1]\\) \u53d6\u5b8c\uff08\u56e0\u4e3a\u8fd9\u6837\u957f\u5ea6\u4e0d\u662f\u5076\u6570\uff09\uff09\u3002 \u8981\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u8c08\u5c31\u9700\u8981\u9760\u540e\u53d6\u5230\u7684\u5947\u6570\u9879\u5c3d\u91cf\u5c0f\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u6392\u5217\u6240\u4ee5\u6211\u4eec\u4e0d\u7528\u8003\u8651\u5076\u6570\u9879\u5927\u5c0f\uff08\u4e0d\u4f1a\u6709\u76f8\u540c\u7684\uff09\u3002 \u7136\u540e\u6bcf\u6b21\u6211\u4eec\u628a\u5f53\u524d\u7684\u53ef\u4ee5\u53d6\u7684\u533a\u95f4\u62ff\u51fa\u6765\u653e\u8fdb\u4e00\u4e2a\u5806\uff0c\u5173\u952e\u5b57\u662f\u5947\u6570\u9879\u6700\u5c0f\u503c\u3002 \u6bcf\u6b21\u8d2a\u5fc3\u5730\u53d6\u5806\u9876\uff0c\u51b3\u7b56\u5b8c\u4e4b\u540e\u65ad\u4e09\u4e2a\u533a\u95f4\u51fa\u6765\uff0c\u63d2\u5165\u56de\u53bb\uff0c\u4e0d\u65ad\u53d6\u76f4\u5230\u5806\u4e3a\u7a7a\uff0c\u7136\u540e\u5c31\u505a\u5b8c\u4e86\u3002 \u7ef4\u62a4\u539f\u5e8f\u5217\u5947\u6570\u9879\u7684\u533a\u95f4\u6700\u5c0f\u503c\u548c\u5076\u6570\u9879\u7684\u533a\u95f4\u6700\u5c0f\u503c\u76f4\u63a5 RMQ\uff0c\u4e2d\u95f4\u7a7a\u51fa\u6765\u7684\u7528 \\(+\\infty\\) \u8865\u5168\u5c31\u884c\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 // author : black_trees #include <set> #include <cmath> #include <stack> #include <queue> #include <cstdio> #include <vector> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; const int inf = 0x3f3f3f3f ; int n ; int a [ si ], b [ si ], p [ si ]; class Segment_Tree { private : struct node { int l , r ; int minv ; } t [ si << 2 ]; inline void pushup ( int p ) { t [ p ]. minv = min ( t [ p << 1 ]. minv , t [ p << 1 | 1 ]. minv ); } public : void build ( int p , int l , int r ) { t [ p ]. l = l , t [ p ]. r = r ; if ( l == r ) { t [ p ]. minv = b [ l ]; return ; } int mid = ( l + r ) >> 1 ; build ( p << 1 , l , mid ), build ( p << 1 | 1 , mid + 1 , r ); pushup ( p ); } int query ( int p , int ql , int qr ) { int ret = inf , l = t [ p ]. l , r = t [ p ]. r ; if ( ql <= l && r <= qr ) return t [ p ]. minv ; int mid = ( l + r ) >> 1 ; if ( ql <= mid ) ret = min ( ret , query ( p << 1 , ql , qr )); if ( qr > mid ) ret = min ( ret , query ( p << 1 | 1 , ql , qr )); return ret ; } } tr [ 2 ]; struct Interval { int l , r ; int odd , even ; bool operator < ( const Interval & t ) const { return odd > t . odd ; } }; std :: priority_queue < Interval > q ; void Insert ( int l , int r ) { if ( l > r ) return ; int x = tr [ l & 1 ]. query ( 1 , l , r ), y = tr [ l & 1 ^ 1 ]. query ( 1 , p [ x ] + 1 , r ); q . push ({ l , r , x , y }); } void Assign ( Interval t ) { Insert ( t . l , p [ t . odd ] - 1 ), Insert ( p [ t . odd ] + 1 , p [ t . even ] - 1 ), Insert ( p [ t . even ] + 1 , t . r ); } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], p [ a [ i ]] = i ; memset ( b , 0x3f , sizeof b ); for ( int i = 1 ; i <= n ; i += 2 ) b [ i ] = a [ i ]; tr [ 1 ]. build ( 1 , 1 , n ); memset ( b , 0x3f , sizeof b ); for ( int i = 2 ; i <= n ; i += 2 ) b [ i ] = a [ i ]; tr [ 0 ]. build ( 1 , 1 , n ); Insert ( 1 , n ); while ( ! q . empty ()) { Interval u = q . top (); q . pop (); cout << u . odd << \" \" << u . even << \" \" ; Assign ( u ); } return 0 ; } F - Unknown. \u03c8(\uff40\u2207\u00b4)\u03c8 \u6211\u4e0d\u4f1a\u3002 ARC076 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u6b21\u662f NOIP2022 \u8003\u524d\u548c hfy \u4e00\u8d77\u8fdb\u884c\u8111\u6d1e\u6253\u5f00\u3002 \u56e0\u4e3a\u61d2\u6240\u4ee5\u76d2\u76d2\u4ee3\u7801\u3002 C - Reconciled? \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60 \\(n\\) \u53ea\u5e26\u7f16\u53f7\u7684\u72d7\uff0c \\(m\\) \u53ea\u5e26\u7f16\u53f7\u7684\u7334\u3002 \u8981\u6c42\u51fa\u6ee1\u8db3\u6ca1\u6709\u4efb\u610f\u7684\u72d7/\u7334\u8fde\u901a\u5757\u7684\u6392\u5217\u65b9\u5f0f\u3002 \\(1\\le n, m\\le 1e5\\) \u3002 \u7b80\u5355\u9898\uff0c\u6ce8\u610f\u5230 \\(|n - m| \\ge 2\\) \u5fc5\u5b9a\u65e0\u89e3\u3002 \u7136\u540e \\(n = m\\) \u7684\u65f6\u5019\u7b54\u6848\u662f \\(n!m!\\) \u3002 \u5982\u679c\u662f \\(|n - m| = 1\\) \uff0c\u7b54\u6848\u662f \\(2n!m!\\) \u3002 D - Built? \u03c8(\uff40\u2207\u00b4)\u03c8 \u5b9a\u4e49\u4e24\u4e2a\u70b9\u7684 \\(dis\\) \u4e3a \\(\\min(|x_1 - x_2|, |y_1 - y_2|))\\) \u3002 \u7ed9\u5b9a \\(n,(1\\le n \\le 1e9)\\) \u4e2a\u70b9\uff0c\u6c42\u4f7f\u5f97\u8fd9\u4e9b\u70b9\u8054\u901a\u7684\u4ee3\u4ef7\u6700\u5c0f\u503c\u3002 \u8054\u901a\u4e24\u70b9\u7684\u4ee3\u4ef7\u662f \\(dis\\) \u3002 \u672c\u8d28\u662f\u6c42\u6700\u5c0f dis \u751f\u6210\u6811\uff0c\u76f4\u63a5\u52a0\u8fb9\u662f \\(O(n^2)\\) \u7684\u4e0d\u80fd\u63a5\u53d7\u3002 \u6ce8\u610f\u5230\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u5bf9 \\(x, y\\) \u5206\u522b\u6392\u4e2a\u5e8f\uff0c\u7136\u540e\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u8ba9\u4ed6\u548c\u5b83\u5728\u6392\u5217\u4e0a\u7684\u5de6\u53f3\u4e24\u70b9\u8fde\u8fb9\u5c31\u884c\u4e86\u3002 \u7136\u540e\u4e00\u904d MST \u5b8c\u4e8b\u3002 E - Connected? \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u51fa\u4e00\u4e2a \\(R\\times C\\) \u7684\u68cb\u76d8\uff0c\u5176\u4e2d \\(1\\) \u5230 \\(n\\) \u4e4b\u95f4\u7684\u6bcf\u4e2a\u6b63\u6574\u6570\u90fd\u4f1a\u5728\u68cb\u76d8\u4e0a\u51fa\u73b0\u4e24\u6b21\uff0c \u7ed9\u5b9a\u7b2c \\(i\\) \u4e2a\u6570\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u8981\u6c42\u628a\u6bcf\u4e00\u5bf9\u76f8\u540c\u7684\u6570\u7528\u7ebf\uff08\u7c97\u7ec6\u5ffd\u7565\u4e0d\u8ba1\uff09\u8fde\u8d77\u6765\uff0c\u4e14\u7ebf\u4e0d\u80fd\u76f8\u4ea4\u4e5f\u4e0d\u80fd\u8d8a\u8fc7\u68cb\u76d8\u8fb9\u754c\uff0c\u6c42\u662f\u5426\u80fd\u5b8c\u6210\u3002 \\(R,C 1e8, n 1e5\\) \u3002 \u6ce8\u610f\u5230\u53ea\u6709\u4e24\u7aef\u5728\u8fb9\u754c\u7684\u7ebf\u624d\u4f1a\u5bf9\u7b54\u6848\u9020\u6210\u5f71\u54cd\uff0c\u5176\u5b83\u7684\u5728\u91cc\u9762\u8f6c\u51e0\u4e0b\u5c31\u884c\u4e86\u3002 \u6240\u4ee5\u53ea\u9700\u8981\u8003\u8651\u5224\u6240\u6709\u4e24\u7aef\u90fd\u5728\u8fb9\u754c\u7684\u70b9\u5bf9\u5f62\u6210\u7684\u8fde\u7ebf\u662f\u5426\u76f8\u4ea4\u3002 \u6ce8\u610f\u5230\u8fd9\u4e2a\u5b9e\u9645\u4e0a\u53ef\u4ee5\u94a6\u5b9a\u4e00\u4e2a\u8f6c\u5708\u7684\u65b9\u5411\uff08\u987a\u65f6\u9488\uff0c\u9006\u65f6\u9488\uff09\uff0c\u628a\u8fd9\u4e2a\u4e1c\u897f\u5f53\u6210\u62ec\u53f7\u5e8f\u5217\u3002\u7136\u540e\u5224\u65ad\u4e00\u4e0b\u62ec\u53f7\u5e8f\u5217\u662f\u5426\u5408\u6cd5\u5c31\u884c\u3002 F - Unknown \u03c8(\uff40\u2207\u00b4)\u03c8 \u6211\u4e0d\u4f1a\u3002","title":"ARC VP \u96c6\u5408"},{"location":"rec/arc-vp-record/#arc080","text":"CSP2022 \u8003\u524d\u4e00\u5929\u548c hfy \u8fd8\u6709 wcx \u968f\u673a\u8df3\u4e86\u4e00\u573a ARC \u6253\u7740\u73a9\uff0c\u5c31\u5f53\u5f00\u62d3\u601d\u7ef4\u4e86\u3002 \u53d1\u73b0\u8fdc\u53e4 ARC \u548c ABC \u662f\u6210\u5bf9\u51fa\u73b0\u7684\uff0c\u76f8\u5f53\u4e8e div1 \u548c div2\u3002 \u611f\u89c9 CDE \u90fd\u662f\u53ef\u505a\u9898\uff0cCD \u6bd4\u8f83\u5e73\u51e1\uff0cE \u662f\u5c0f\u6e05\u65b0\u601d\u7ef4\u9898\uff0c\u611f\u89c9\u9700\u8981\u64c5\u957f\u89c2\u5bdf\u7ed3\u8bba\u624d\u5f04\u5f97\u51fa\u6765\u3002 F \u4e0d\u592a\u4f1a\uff0c\u4ee5\u540e\u53ef\u4ee5\u770b\u770b","title":"ARC080"},{"location":"rec/arc-vp-record/#c-4-adjacent","text":"\u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u4f60\u8981\u91cd\u6392\u8fd9\u4e2a\u5e8f\u5217\uff0c\u4f7f\u5f97\u76f8\u90bb\u4e24\u9879\u4e58\u79ef\u90fd\u662f 4 \u7684\u500d\u6570\u3002 \u5982\u679c\u6709\u89e3\u8f93\u51fa Yes ,\u5426\u5219\u8f93\u51fa No \u3002 \u6bd4\u8f83\u7b80\u5355\uff0c\u8003\u8651\u5206\u7c7b\uff0c\u4e00\u7c7b\u662f\u5947\u6570\uff0c\u4e00\u7c7b\u662f \\(4\\) \u7684\u500d\u6570\uff0c\u53e6\u5916\u4e00\u7c7b\u662f\u4e0d\u662f \\(4\\) \u7684\u500d\u6570\u7684\u5076\u6570\u3002 \u6ce8\u610f\u5230\u5947\u6570\u7684\u4e24\u8fb9\u4e0d\u662f\u8fb9\u754c\u5c31\u4e00\u5b9a\u8981\u662f \\(4\\) \uff0c\u5982\u679c\u6ca1\u6709 \\(2 \\times \\text{odd}\\) \u5f62\u5f0f\u7684\u6570\uff0c\u90a3\u53ea\u8981\u5947\u6570\u4e2a\u6570\u5c0f\u4e8e\u7b49\u4e8e \\(4\\) \u7684\u500d\u6570\u7684\u4e2a\u6570 \\(+ 1\\) \u5373\u53ef\u3002 \u5982\u679c\u6709 \\(2 \\times \\text{odd}\\) \u5f62\u5f0f\u7684\u6570\uff0c\u90a3\u4e48\u5947\u6570\u7684\u4e2a\u6570\u5fc5\u987b\u8981\u662f \\(\\le\\) \\(4\\) \u7684\u500d\u6570\u7684\u4e2a\u6570\u7684\u3002 \u7136\u540e\u5c31\u6ca1\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 int c = 0 , cc = 0 , ccc = 0 ; cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { cin >> a [ i ]; if ( a [ i ] & 1 ) c ++ ; else if ( a [ i ] % 4 == 0 ) ccc ++ ; else if ( a [ i ] % 2 == 0 ) cc ++ ; } if (( c > ccc && cc ) || c - 1 > ccc ) cout << \"No\" << endl ; else cout << \"Yes\" << endl ;","title":"C - 4-adjacent"},{"location":"rec/arc-vp-record/#d-grid-coloring","text":"\u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u957f\u5ea6\u4e3a \\(q\\) \uff0c\u7ed9\u5b9a\u4e00\u4e2a \\(n\\times m\\) \u7684\u7f51\u683c\u3002 \u4fdd\u8bc1 \\(\\sum a_i = n \\times m\\) \uff0c\u73b0\u5728\u8981\u6c42\u4f60\u67d3 \\(q\\) \u4e2a 4-\u8054\u901a\u5757\u51fa\u6765\uff0c\u5176\u4e2d\u989c\u8272 \\(i\\) \u8981\u6709 \\(a_i\\) \u4e2a\u683c\u5b50\uff0c\u6784\u9020\u65b9\u6848\u3002 \\(100\\) \u3002 \u7b28\u6bd4\u9898\uff0c\u86c7\u5f62\u67d3\u8272\u5373\u53ef\uff0c\u663e\u7136\u4e00\u5b9a\u6709\u89e3\u3002","title":"D - Grid Coloring"},{"location":"rec/arc-vp-record/#e-young-maids","text":"\u9898\u76ee\u540d\u5b57\u597d\u602a\u3002 \u7ed9\u4f60\u4e00\u4e2a \\(1 \\sim n, (n \\equiv 0 (\\mod 2))\\) \u7684\u6392\u5217 \\(p\\) \uff0c\u4f60\u6bcf\u6b21\u53ef\u4ee5\u53d6\u51fa\u76f8\u90bb\u7684\u4e24\u4e2a\u5143\u7d20\uff0c\u628a\u4ed6\u4eec\u6309\u7167\u539f\u6765\u7684\u987a\u5e8f\u6254\u5230\u4e00\u4e2a\u961f\u5217\u7684\u5934\u90e8\u3002 \u95ee\u4f60\u6700\u540e\u53ef\u80fd\u5f97\u5230\u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u6392\u5217\u662f\u4ec0\u4e48\u3002 \u6570\u636e\u8303\u56f4 \\(2e5\\) \u3002 \u611f\u89c9\u5f88\u5c0f\u6e05\u65b0\uff0c\u9700\u8981\u4e00\u5b9a\u89c2\u5bdf\u80fd\u529b\uff1f \u9996\u5148\u6b63\u7740\u663e\u7136\u4e0d\u597d\u641e\uff0c \u8003\u8651\u5012\u8fc7\u6765\u89c2\u5bdf\u5408\u6cd5\u89e3\u7684\u5f62\u72b6 \uff08\u611f\u89c9\u548c 221025C \u7684\u7f6a\u4eba\u633d\u6b4c\u90a3\u9898\u60f3\u6cd5\u7c7b\u4f3c\uff09\u3002 \u9996\u5148\u6ce8\u610f\u5230\u5982\u679c\u53d6\u4e86 \\((x, y)\\) \u8fd9\u4e24\u4e2a\u4f4d\u7f6e\uff0c \u90a3\u4e48 \\([x + 1, y - 1]\\) \u8fd9\u4e2a\u533a\u95f4\u662f\u4e0d\u80fd\u548c\u5176\u5b83\u533a\u95f4\u7ec4\u5408\u7684\uff0c\u4e5f\u5c31\u662f\u4e0d\u80fd\u8de8\u533a\u95f4\u64cd\u4f5c\u3002 \u7531\u6b64\u53ef\u4ee5\u53d1\u73b0\u6bcf\u6b21\u53d6\u5230\u7684\u662f\u4e00\u4e2a\u5947\u6570\u9879 + \u4e00\u4e2a\u5076\u6570\u9879\u7684\u5f62\u5f0f\uff08\u4e0d\u7136\u4e00\u5b9a\u6ca1\u6cd5\u628a\u4efb\u610f\u4e00\u4e2a \\([x + 1, y - 1]\\) \u53d6\u5b8c\uff08\u56e0\u4e3a\u8fd9\u6837\u957f\u5ea6\u4e0d\u662f\u5076\u6570\uff09\uff09\u3002 \u8981\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u8c08\u5c31\u9700\u8981\u9760\u540e\u53d6\u5230\u7684\u5947\u6570\u9879\u5c3d\u91cf\u5c0f\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u6392\u5217\u6240\u4ee5\u6211\u4eec\u4e0d\u7528\u8003\u8651\u5076\u6570\u9879\u5927\u5c0f\uff08\u4e0d\u4f1a\u6709\u76f8\u540c\u7684\uff09\u3002 \u7136\u540e\u6bcf\u6b21\u6211\u4eec\u628a\u5f53\u524d\u7684\u53ef\u4ee5\u53d6\u7684\u533a\u95f4\u62ff\u51fa\u6765\u653e\u8fdb\u4e00\u4e2a\u5806\uff0c\u5173\u952e\u5b57\u662f\u5947\u6570\u9879\u6700\u5c0f\u503c\u3002 \u6bcf\u6b21\u8d2a\u5fc3\u5730\u53d6\u5806\u9876\uff0c\u51b3\u7b56\u5b8c\u4e4b\u540e\u65ad\u4e09\u4e2a\u533a\u95f4\u51fa\u6765\uff0c\u63d2\u5165\u56de\u53bb\uff0c\u4e0d\u65ad\u53d6\u76f4\u5230\u5806\u4e3a\u7a7a\uff0c\u7136\u540e\u5c31\u505a\u5b8c\u4e86\u3002 \u7ef4\u62a4\u539f\u5e8f\u5217\u5947\u6570\u9879\u7684\u533a\u95f4\u6700\u5c0f\u503c\u548c\u5076\u6570\u9879\u7684\u533a\u95f4\u6700\u5c0f\u503c\u76f4\u63a5 RMQ\uff0c\u4e2d\u95f4\u7a7a\u51fa\u6765\u7684\u7528 \\(+\\infty\\) \u8865\u5168\u5c31\u884c\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 // author : black_trees #include <set> #include <cmath> #include <stack> #include <queue> #include <cstdio> #include <vector> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; const int inf = 0x3f3f3f3f ; int n ; int a [ si ], b [ si ], p [ si ]; class Segment_Tree { private : struct node { int l , r ; int minv ; } t [ si << 2 ]; inline void pushup ( int p ) { t [ p ]. minv = min ( t [ p << 1 ]. minv , t [ p << 1 | 1 ]. minv ); } public : void build ( int p , int l , int r ) { t [ p ]. l = l , t [ p ]. r = r ; if ( l == r ) { t [ p ]. minv = b [ l ]; return ; } int mid = ( l + r ) >> 1 ; build ( p << 1 , l , mid ), build ( p << 1 | 1 , mid + 1 , r ); pushup ( p ); } int query ( int p , int ql , int qr ) { int ret = inf , l = t [ p ]. l , r = t [ p ]. r ; if ( ql <= l && r <= qr ) return t [ p ]. minv ; int mid = ( l + r ) >> 1 ; if ( ql <= mid ) ret = min ( ret , query ( p << 1 , ql , qr )); if ( qr > mid ) ret = min ( ret , query ( p << 1 | 1 , ql , qr )); return ret ; } } tr [ 2 ]; struct Interval { int l , r ; int odd , even ; bool operator < ( const Interval & t ) const { return odd > t . odd ; } }; std :: priority_queue < Interval > q ; void Insert ( int l , int r ) { if ( l > r ) return ; int x = tr [ l & 1 ]. query ( 1 , l , r ), y = tr [ l & 1 ^ 1 ]. query ( 1 , p [ x ] + 1 , r ); q . push ({ l , r , x , y }); } void Assign ( Interval t ) { Insert ( t . l , p [ t . odd ] - 1 ), Insert ( p [ t . odd ] + 1 , p [ t . even ] - 1 ), Insert ( p [ t . even ] + 1 , t . r ); } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], p [ a [ i ]] = i ; memset ( b , 0x3f , sizeof b ); for ( int i = 1 ; i <= n ; i += 2 ) b [ i ] = a [ i ]; tr [ 1 ]. build ( 1 , 1 , n ); memset ( b , 0x3f , sizeof b ); for ( int i = 2 ; i <= n ; i += 2 ) b [ i ] = a [ i ]; tr [ 0 ]. build ( 1 , 1 , n ); Insert ( 1 , n ); while ( ! q . empty ()) { Interval u = q . top (); q . pop (); cout << u . odd << \" \" << u . even << \" \" ; Assign ( u ); } return 0 ; }","title":"E - Young Maids"},{"location":"rec/arc-vp-record/#f-unknown","text":"\u6211\u4e0d\u4f1a\u3002","title":"F - Unknown."},{"location":"rec/arc-vp-record/#arc076","text":"\u8fd9\u6b21\u662f NOIP2022 \u8003\u524d\u548c hfy \u4e00\u8d77\u8fdb\u884c\u8111\u6d1e\u6253\u5f00\u3002 \u56e0\u4e3a\u61d2\u6240\u4ee5\u76d2\u76d2\u4ee3\u7801\u3002","title":"ARC076"},{"location":"rec/arc-vp-record/#c-reconciled","text":"\u7ed9\u4f60 \\(n\\) \u53ea\u5e26\u7f16\u53f7\u7684\u72d7\uff0c \\(m\\) \u53ea\u5e26\u7f16\u53f7\u7684\u7334\u3002 \u8981\u6c42\u51fa\u6ee1\u8db3\u6ca1\u6709\u4efb\u610f\u7684\u72d7/\u7334\u8fde\u901a\u5757\u7684\u6392\u5217\u65b9\u5f0f\u3002 \\(1\\le n, m\\le 1e5\\) \u3002 \u7b80\u5355\u9898\uff0c\u6ce8\u610f\u5230 \\(|n - m| \\ge 2\\) \u5fc5\u5b9a\u65e0\u89e3\u3002 \u7136\u540e \\(n = m\\) \u7684\u65f6\u5019\u7b54\u6848\u662f \\(n!m!\\) \u3002 \u5982\u679c\u662f \\(|n - m| = 1\\) \uff0c\u7b54\u6848\u662f \\(2n!m!\\) \u3002","title":"C - Reconciled?"},{"location":"rec/arc-vp-record/#d-built","text":"\u5b9a\u4e49\u4e24\u4e2a\u70b9\u7684 \\(dis\\) \u4e3a \\(\\min(|x_1 - x_2|, |y_1 - y_2|))\\) \u3002 \u7ed9\u5b9a \\(n,(1\\le n \\le 1e9)\\) \u4e2a\u70b9\uff0c\u6c42\u4f7f\u5f97\u8fd9\u4e9b\u70b9\u8054\u901a\u7684\u4ee3\u4ef7\u6700\u5c0f\u503c\u3002 \u8054\u901a\u4e24\u70b9\u7684\u4ee3\u4ef7\u662f \\(dis\\) \u3002 \u672c\u8d28\u662f\u6c42\u6700\u5c0f dis \u751f\u6210\u6811\uff0c\u76f4\u63a5\u52a0\u8fb9\u662f \\(O(n^2)\\) \u7684\u4e0d\u80fd\u63a5\u53d7\u3002 \u6ce8\u610f\u5230\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u5bf9 \\(x, y\\) \u5206\u522b\u6392\u4e2a\u5e8f\uff0c\u7136\u540e\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u8ba9\u4ed6\u548c\u5b83\u5728\u6392\u5217\u4e0a\u7684\u5de6\u53f3\u4e24\u70b9\u8fde\u8fb9\u5c31\u884c\u4e86\u3002 \u7136\u540e\u4e00\u904d MST \u5b8c\u4e8b\u3002","title":"D - Built?"},{"location":"rec/arc-vp-record/#e-connected","text":"\u7ed9\u51fa\u4e00\u4e2a \\(R\\times C\\) \u7684\u68cb\u76d8\uff0c\u5176\u4e2d \\(1\\) \u5230 \\(n\\) \u4e4b\u95f4\u7684\u6bcf\u4e2a\u6b63\u6574\u6570\u90fd\u4f1a\u5728\u68cb\u76d8\u4e0a\u51fa\u73b0\u4e24\u6b21\uff0c \u7ed9\u5b9a\u7b2c \\(i\\) \u4e2a\u6570\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u8981\u6c42\u628a\u6bcf\u4e00\u5bf9\u76f8\u540c\u7684\u6570\u7528\u7ebf\uff08\u7c97\u7ec6\u5ffd\u7565\u4e0d\u8ba1\uff09\u8fde\u8d77\u6765\uff0c\u4e14\u7ebf\u4e0d\u80fd\u76f8\u4ea4\u4e5f\u4e0d\u80fd\u8d8a\u8fc7\u68cb\u76d8\u8fb9\u754c\uff0c\u6c42\u662f\u5426\u80fd\u5b8c\u6210\u3002 \\(R,C 1e8, n 1e5\\) \u3002 \u6ce8\u610f\u5230\u53ea\u6709\u4e24\u7aef\u5728\u8fb9\u754c\u7684\u7ebf\u624d\u4f1a\u5bf9\u7b54\u6848\u9020\u6210\u5f71\u54cd\uff0c\u5176\u5b83\u7684\u5728\u91cc\u9762\u8f6c\u51e0\u4e0b\u5c31\u884c\u4e86\u3002 \u6240\u4ee5\u53ea\u9700\u8981\u8003\u8651\u5224\u6240\u6709\u4e24\u7aef\u90fd\u5728\u8fb9\u754c\u7684\u70b9\u5bf9\u5f62\u6210\u7684\u8fde\u7ebf\u662f\u5426\u76f8\u4ea4\u3002 \u6ce8\u610f\u5230\u8fd9\u4e2a\u5b9e\u9645\u4e0a\u53ef\u4ee5\u94a6\u5b9a\u4e00\u4e2a\u8f6c\u5708\u7684\u65b9\u5411\uff08\u987a\u65f6\u9488\uff0c\u9006\u65f6\u9488\uff09\uff0c\u628a\u8fd9\u4e2a\u4e1c\u897f\u5f53\u6210\u62ec\u53f7\u5e8f\u5217\u3002\u7136\u540e\u5224\u65ad\u4e00\u4e0b\u62ec\u53f7\u5e8f\u5217\u662f\u5426\u5408\u6cd5\u5c31\u884c\u3002","title":"E - Connected?"},{"location":"rec/arc-vp-record/#f-unknown_1","text":"\u6211\u4e0d\u4f1a\u3002","title":"F - Unknown"},{"location":"rec/atcf-for-2022-02/","text":"\u4e8c\u6708\u597d\u9898\u6539\u9519 \u03c8(\uff40\u2207\u00b4)\u03c8 CF1638E Colorful Operations \u03c8(\uff40\u2207\u00b4)\u03c8 Feb/22/2022 \u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u652f\u6301\u4e09\u79cd\u64cd\u4f5c + 0 l r v \u5c06 \\([l,r]\\) \u6d82\u6210\u989c\u8272 \\(v\\) + 1 v x \u5c06\u6240\u6709\u989c\u8272 \\(v\\) \u7684\u5143\u7d20\u52a0\u4e0a \\(x\\) + 2 x \u67e5\u8be2 \\(a_x\\) 1e6. \u6559\u4f1a\u6211ODT\u7684\u9898\u3002 \u9996\u5148\u53ef\u4ee5\u76f4\u63a5\u5229\u7528 ODT \u7ef4\u62a4\u6bcf\u4e2a\u6bb5\u3002 \u64cd\u4f5c0\u5c31\u662f assign \u5bf9\u4e8e\u64cd\u4f5c1\uff0c\u8003\u8651\u5bf9\u6bcf\u4e2a\u989c\u8272\u7ef4\u62a4\u4e00\u4e2a \\(tag\\) \u3002 \u8868\u793a\u8fd9\u4e2a\u989c\u8272\u5f53\u524d\u4e00\u5171\u52a0\u4e86\u591a\u5c11\u3002 \u7136\u540e assign \u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u88ab\u6539\u53d8\u989c\u8272\u7684\u5757\uff0c\u5148\u5229\u7528\u6811\u72b6\u6570\u7ec4\u628a\u4ed6\u7684\u503c\u52a0\u4e0a \\(tag\\) \uff0c\u63a8\u5e73\u4e4b\u540e\u8fd8\u8981\u51cf\u53bb\u65b0\u989c\u8272\u7684 \\(tag\\) \u3002 \u64cd\u4f5c 2 \u5229\u7528\u6811\u72b6\u6570\u7ec4 + \u5dee\u5206\u8be2\u95ee\u4e4b\u540e\u518d\u52a0\u4e0a\u5f53\u524d\u989c\u8272\u7684 \\(tag\\) \u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int si = 1e6 + 10 ; int n , q ; int a [ si ]; int tag [ si ]; inline int lowbit ( int x ){ return x &- x ; } struct BIT { int n , c [ si ], ans = 0 ; inline void modify ( int x , int y ){ for ( register int i = x ; i <= n ; i += lowbit ( i )) c [ i ] += y ;} inline void add ( int l , int r , int v ){ modify ( l , v ), modify ( r + 1 , - v ); } inline int query ( int x ){ ans = 0 ; for ( register int i = x ; i ; i -= lowbit ( i )) ans += c [ i ]; return ans ; } } bitr ; struct node { int l , r ; mutable int val ; node ( const int & il , const int & ir , const int & iv ) : l ( il ), r ( ir ), val ( iv ){} inline bool operator < ( const node & b ) const { return l < b . l ; } }; std :: set < node > odt ; inline std :: set < node >:: iterator split ( int pos ){ if ( pos > n ) return odt . end (); std :: set < node >:: iterator it =-- odt . upper_bound (( node ){ pos , 0 , 0 }); if ( it -> l == pos ) return it ; int l = it -> l , r = it -> r , v = it -> val ; odt . erase ( it ), odt . insert ( node { l , pos -1 , v }); return odt . insert (( node ){ pos , r , v }). first ; } inline void assign ( int l , int r , int v ){ std :: set < node >:: iterator itr = split ( r + 1 ), itl = split ( l ); for ( std :: set < node >:: iterator it = itl ; it != itr ; ++ it ){ bitr . add ( it -> l , it -> r , tag [ it -> val ]); } odt . erase ( itl , itr ), odt . insert (( node ){ l , r , v }); bitr . add ( l , r , - tag [ v ]); } inline int Tag ( int pos ){ std :: set < node >:: iterator it = odt . lower_bound ( node { pos , 0 , 0 }); if ( it != odt . end () && it -> l == pos ) return tag [ it -> val ]; -- it ; return tag [ it -> val ]; } signed main (){ scanf ( \"%lld%lld\" , & n , & q ), odt . insert (( node ){ 1 , n , 1 }); bitr . n = n ; string op ; int l , r , c ; while ( q -- ){ cin >> op ; if ( op == \"Color\" ) scanf ( \"%lld%lld%lld\" , & l , & r , & c ), assign ( l , r , c ); if ( op == \"Add\" ) scanf ( \"%lld%lld\" , & l , & c ), tag [ l ] += c ; if ( op == \"Query\" ) scanf ( \"%lld\" , & c ), printf ( \"%lld \\n \" , Tag ( c ) + bitr . query ( c )); } return 0 ; } 1 Tag : ODT / \u6811\u72b6\u6570\u7ec4 / \u5dee\u5206 CF1635E Cars \u03c8(\uff40\u2207\u00b4)\u03c8 Feb/23/2022 \u5728\u4e00\u4e2a\u6570\u8f74\u4e0a\u6709\u4e00\u4e9b\u8f66\uff0c\u6bcf\u4e2a\u8f66\u90fd\u6709\u521d\u59cb\u7684\u4f4d\u7f6e\u548c\u65b9\u5411\uff0c\u65b9\u5411\u4e0d\u4f1a\u6539\u53d8\uff0c\u5f00\u59cb\u8fd0\u52a8\u540e\u901f\u5ea6\u4e0d\u53d8\u3002 \u79f0\u4e24\u8f86\u8f66\u76f8\u5173\uff0c\u5f53\u4e14\u4ec5\u5f53\u4ed6\u4eec\u4e00\u5b9a\u4f1a\u76f8\u9047\uff0c \u79f0\u4e24\u8f86\u8f66\u4e0d\u76f8\u5173\uff0c\u5f53\u4e14\u4ec5\u5f53\u4ed6\u4eec\u4e00\u5b9a\u4e0d\u4f1a\u76f8\u9047\u3002 \u7ed9\u4f60 \\(m\\) \u7ec4\u8f66\u4e4b\u95f4\u76f8\u5173\u4e0d\u76f8\u5173\u7684\u5173\u7cfb\uff0c\u6784\u9020\u4e00\u4e2a\u521d\u59cb\u65b9\u6848\uff0c\u65e0\u89e3\u8f93\u51fa-1\u3002 2e5. \u53d1\u73b0\u4e24\u8f86\u8f66\u60f3\u8981\u6709\u5173\u7cfb\uff0c\u5fc5\u987b\u65b9\u5411\u76f8\u53cd\u3002 \u8fd9\u91cc\u7528\u4e8c\u5206\u56fe\u67d3\u8272\u5224\u5b9a\u5373\u53ef\uff08\u9700\u8981\u8003\u8651\u4e0d\u8054\u901a\u7684\u60c5\u51b5\uff09 \u7136\u540e\u6211\u4eec\u8003\u8651\u4efb\u610f\u4e00\u5bf9\u8f66 \\((u,v)\\) \u5047\u8bbe \\(u\\) \u7684\u65b9\u5411\u662f Right\uff0c \\(v\\) \u7684\u65b9\u5411\u662f Left\u3002 \u90a3\u4e48\u5982\u679c \\((u,v)\\) \u76f8\u5173\uff0c\u90a3\u4e48 \\(u\\) \u5728\u6570\u8f74\u4e0a\u9762\u7684\u4f4d\u7f6e\u5fc5\u5b9a\u5c0f\u4e8e \\(v\\) \u5982\u679c\u4e0d\u76f8\u5173\uff0c \\(u\\) \u5728\u6570\u8f74\u4e0a\u9762\u7684\u4f4d\u7f6e\u5fc5\u5b9a\u5927\u4e8e \\(v\\) \u7b2c\u4e00\u79cd\u5173\u7cfb\u8bb0\u4f5c \\(u \\to v\\) \u7b2c\u4e8c\u79cd\u5173\u7cfb\u8bb0\u4f5c \\(v\\to u\\) \u8fd9\u662f\u4e00\u4e2a\u4e25\u683c\u504f\u5e8f\u5173\u7cfb\uff0c\u6240\u4ee5\u53ef\u4ee5\u8054\u7cfb\u5230 DAG\uff0c\u4f7f\u7528\u62d3\u6251\u6392\u5e8f\u5224\u65ad\u8fd9\u4e2a\u4e25\u683c\u504f\u5e8f\u5173\u7cfb\u662f\u5426\u6210\u7acb\u5373\u53ef\u3002 \u521d\u59cb\u4f4d\u7f6e\u7528\u62d3\u6251\u5e8f\u6c42\u89e3\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int si = 2e5 + 10 ; int n , m ; std :: vector < int > GO [ si ], G [ si ]; int col [ si ], ord [ si ], x [ si ]; bool vis [ si ], have_sol = true ; struct node { int ty , u , v ; } a [ si ]; inline void dfs ( int u , int cur ){ col [ u ] = cur , vis [ u ] = true ; for ( int & v : GO [ u ]){ if ( vis [ v ] && col [ v ] == cur ) have_sol = false ; if ( vis [ v ]) continue ; dfs ( v , cur == 1 ? 2 : 1 ); } } signed main (){ scanf ( \"%lld%lld\" , & n , & m ); for ( register int i = 1 ; i <= m ; ++ i ){ scanf ( \"%lld%lld%lld\" , & a [ i ]. ty , & a [ i ]. u , & a [ i ]. v ); GO [ a [ i ]. u ]. push_back ( a [ i ]. v ), GO [ a [ i ]. v ]. push_back ( a [ i ]. u ); } for ( register int i = 1 ; i <= n ; ++ i ) if ( ! vis [ i ]) dfs ( i , 1 ); if ( ! have_sol ) return puts ( \"NO\" ), 0 ; for ( register int i = 1 ; i <= m ; ++ i ){ int & u = a [ i ]. u , & v = a [ i ]. v ; if ( a [ i ]. ty == 1 ){ if ( col [ u ] == 1 ) G [ u ]. push_back ( v ), ++ ord [ v ]; else G [ v ]. push_back ( u ), ++ ord [ u ]; } else { if ( col [ u ] == 1 ) G [ v ]. push_back ( u ), ++ ord [ u ]; else G [ u ]. push_back ( v ), ++ ord [ v ]; } } std :: queue < int > q ; for ( register int i = 1 ; i <= n ; ++ i ) if ( ord [ i ] == 0 ) q . push ( i ); int tot = 0 ; while ( ! q . empty ()){ int u = q . front (); q . pop (), x [ u ] =++ tot ; for ( int & v : G [ u ]) if ( !-- ord [ v ]) q . push ( v ); } if ( tot != n ) return puts ( \"NO\" ), 0 ; puts ( \"YES\" ); for ( register int i = 1 ; i <= n ; ++ i ){ if ( col [ i ] == 1 ) putchar ( 'L' ); else putchar ( 'R' ); printf ( \" %lld \\n \" , x [ i ]); } return 0 ; } Trick \u4e25\u683c\u504f\u5e8f\u5173\u7cfb\u53ef\u4ee5\u5229\u7528\u62d3\u6251\u6392\u5e8f\u6765\u5224\u5b9a/\u6c42\u89e3\u3002 \u53c2\u8003 https://zhuanlan.zhihu.com/p/470044525 1 Tag : \u62d3\u6251\u6392\u5e8f / \u4e8c\u5206\u56fe / \u504f\u5e8f\u5173\u7cfb CF1635F Closest Pair \u03c8(\uff40\u2207\u00b4)\u03c8 Feb/25/2022 \u7ed9\u4f60\u4e24\u4e2a\u5e8f\u5217 \\(x,w\\) ,\u5b9a\u4e49\u4e00\u4e2a\u70b9\u5bf9 \\((i,j)\\) \u7684\u6743\u503c\u4e3a \\(|x_i-x_j|\\times (w_i+w_j)\\) \\(q\\) \u7ec4\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u533a\u95f4 \\([l,r]\\) \u5f53\u4e2d\u7684\u70b9\u5bf9\u6743\u503c\u7684\u6700\u5c0f\u503c\u3002 3e5. \u8003\u8651\u628a \\(x\\) \u5f53\u4f5c \\(x\\) \u8f74\uff0c \\(w\\) \u5f53\u4f5c \\(y\\) \u8f74\u3002 \u90a3\u4e48\u628a\u6bcf\u4e2a\u70b9 \\((x_i,w_i)\\) \u653e\u5230\u5750\u6807\u7cfb\u91cc\u9762\u3002 \u5982\u679c\u4e24\u4e2a\u70b9\u5f62\u6210\u7684\u6b63\u65b9\u5f62\u5f53\u4e2d\u6709\u522b\u7684\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u70b9\u5fc5\u5b9a\u4e0d\u662f\u6700\u4f18\u7684\u3002 \u5f62\u5f0f\u5316\u7684\uff0c\u5982\u679c\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u5bf9 \\((i,j)\\) \uff0c \\(\\exist k \\ | \\ x_i<x_k<x_y \\ \\land \\ w_i<w_k<w_j\\) \u90a3\u4e48 \\((i,j)\\) \u5fc5\u5b9a\u4e0d\u662f\u6700\u4f18\u7684\u3002 \u53e6\u5916\u4e00\u8fb9\u7684\u60c5\u51b5\u4e00\u6837\u3002 \u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(i\\) \uff0c\u5229\u7528\u5355\u8c03\u6808\u5411\u540e\u5904\u7406\u51fa\u6240\u6709\u7684\u53ef\u80fd\u6700\u4f18\u70b9\u5bf9 \\((i,j)\\) \u3002 \u7136\u540e\u628a\u8fd9\u4e2a\u70b9\u5bf9\u770b\u4f5c\u662f\u4e00\u4e2a\u7b54\u6848\u533a\u95f4 \\([i,j]\\) \uff0c\u6743\u503c\u5c31\u662f\u8fd9\u4e2a\u70b9\u5bf9\u7684\u8d21\u732e\u3002 \u90a3\u4e48\u79bb\u7ebf\u4e4b\u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u5c31\u662f\u6c42\u8be2\u95ee\u7684\u533a\u95f4\u5f53\u4e2d\u5305\u542b\uff08\u6216\u8005\u4ea4\uff09\u7684\u7b54\u6848\u533a\u95f4\u7684\u6743\u503c\u7684\u6700\u5c0f\u503c\u3002 \u53ef\u4ee5\u4f7f\u7528 Fenwick Tree \u6216\u8005 Segment Tree \u7ef4\u62a4\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int si = 3e5 + 10 ; constexpr int inf = 4e18 + 1 ; int n , q ; struct Fenwick { int a [ si ]; Fenwick (){ memset ( a , 0x7f , sizeof a );} inline int lowbit ( int x ){ return x &- x ; } inline void modify ( int x , int v ){ x = n - x + 1 ; while ( x <= n ) a [ x ] = min ( a [ x ], v ), x += lowbit ( x );} inline int sum ( int x ){ int ans = inf ; x = n - x + 1 ; while ( x ) ans = min ( ans , a [ x ]), x -= lowbit ( x ); return ans ;} } tr ; int x [ si ], w [ si ]; int Stack [ si ], Top ; std :: vector < std :: pair < int , int >> a [ si ]; int ans [ si ]; signed main (){ cin >> n >> q ; for ( register int i = 1 ; i <= n ; ++ i ) cin >> x [ i ] >> w [ i ]; for ( register int i = 1 ; i <= q ; ++ i ){ int l , r ; cin >> l >> r ; a [ r ]. push_back ( make_pair ( l , i )); } for ( register int i = 1 ; i <= n ; ++ i ){ while ( Top && w [ i ] <= w [ Stack [ Top ]]) tr . modify ( Stack [ Top ],( x [ i ] - x [ Stack [ Top ]]) * ( w [ i ] + w [ Stack [ Top ]])), -- Top ; if ( Top ) tr . modify ( Stack [ Top ],( x [ i ] - x [ Stack [ Top ]]) * ( w [ i ] + w [ Stack [ Top ]])); Stack [ ++ Top ] = i ; for ( auto x : a [ i ]) ans [ x . second ] = tr . sum ( x . first ); } for ( register int i = 1 ; i <= q ; ++ i ) cout << ans [ i ] << endl ; return 0 ; } Trick \u6700\u4f18\u6027\u95ee\u9898\u7684\u65f6\u5019\u53ef\u4ee5\u8003\u8651\u67d0\u4e2a\u7b54\u6848\u5982\u4f55\u624d\u53ef\u80fd\u662f\u6700\u4f18\u7684\uff0c\u4ee5\u6b64\u6392\u9664\u5197\u6742\u51b3\u7b56\u3002 1 Tag : \u601d\u7ef4 / \u6811\u72b6\u6570\u7ec4 / \u7ebf\u6bb5\u6811 ABC239F Construct Highway \u03c8(\uff40\u2207\u00b4)\u03c8 Feb/28/2022 \u7ed9\u4f60\u4e00\u9897\u6811\uff0c\u53ea\u544a\u8bc9\u4f60\u4e00\u90e8\u5206\u8fb9\u548c\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u3002 \u6784\u9020\u8fd9\u68f5\u6811\u3002 2e5. \u9996\u5148\uff0c\u5982\u679c\u7ed9\u51fa\u7684\u5ea6\u6570\u4e4b\u548c\u4e0d\u7b49\u4e8e \\(2n-2\\) \uff0c\u660e\u663e\u65e0\u89e3\u3002 \u7136\u540e\u53d1\u73b0\u7ed9\u51fa\u7684\u8fd9\u4e9b\u8fb9\u4f1a\u628a\u6240\u6709\u7684\u8282\u70b9\u5206\u6210\u82e5\u5e72\u4e2a\u8fde\u901a\u5757\u3002 \u6240\u4ee5\u8003\u8651\u5728\u8fde\u901a\u5757\u4e4b\u95f4\u8fde\u8fb9\u3002 \u5982\u679c\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u91cc\u9762\u7684\u4e24\u4e2a\u70b9\u8fde\u8fb9\uff0c\u90a3\u4e5f\u662f\u65e0\u89e3\u7684\u3002 \u6700\u7279\u6b8a\u7684\u662f\u53ea\u9700\u8981\u4e00\u4e2a\u5ea6\u6570\u7684\u8fde\u901a\u5757\uff0c\u56e0\u4e3a\u6700\u540e\u5fc5\u987b\u662f\u4e00\u68f5\u6811\uff0c\u5b83\u60f3\u8981\u8054\u901a\uff0c\u5c31\u5fc5\u5b9a\u4e0d\u80fd\u548c\u53e6\u5916\u4e00\u4e2a\u9700\u8981\u4e00\u4e2a\u5ea6\u6570\u7684\u8fde\u901a\u5757\u8fde\u8fb9\u3002 \u9664\u975e\u53ea\u5269\u6700\u540e\u4e24\u4e2a\u8fde\u901a\u5757\u3002 \u5426\u5219\u6700\u540e\u6784\u9020\u51fa\u6765\u7684\u4f1a\u662f\u4e2a\u68ee\u6797\u3002 \u6240\u4ee5\u628a\u6240\u6709\u8fde\u901a\u5757\u5206\u6210\u4e24\u7ec4\uff0c\u4e00\u7ec4\u662f\u53ea\u9700\u8981\u4e00\u4e2a\u5ea6\u6570\u7684\u8fde\u901a\u5757\uff0c\u53e6\u5916\u4e00\u7ec4\u662f\u9700\u8981\u81f3\u5c11\u4e24\u4e2a\u7684\u3002 \u7136\u540e\u5c31\u8ba9\u7b2c\u4e00\u7ec4\u7684\u4e0d\u65ad\u548c\u7b2c\u4e8c\u7ec4\u7684\u8fde\u8fb9\uff0c\u7b2c\u4e8c\u7ec4\u7ec4\u5185\u6392\u5e8f\u4ece\u5c0f\u5230\u5927\uff0c\u5982\u679c\u7b2c\u4e8c\u7ec4\u7684\u67d0\u4e2a\u8fde\u901a\u5757\u5728\u8fde\u5b8c\u4e4b\u540e\u53d8\u6210\u4e86\u53ea\u9700\u8981\u4e00\u4e2a\u7684\uff0c\u6254\u8fdb\u7b2c\u4e00\u7ec4\u3002 \u5176\u5b83\u60c5\u51b5\u5c31\u662f\u65e0\u89e3\u4e86\u3002 \u5229\u7528 dsu \u7ef4\u62a4\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int si = 2e5 + 10 ; int n , m , sum = 0 ; int deg [ si ]; std :: vector < int > f [ si ]; struct Mycmp { inline bool operator ()( int x , int y ) const { return f [ x ]. size () < f [ y ]. size (); } }; struct Dsu { int pa [ si ]; inline int root ( int x ){ if ( pa [ x ] != x ) return pa [ x ] = root ( pa [ x ]); return pa [ x ]; } inline bool same ( int x , int y ){ return root ( x ) == root ( y ); } inline void Union ( int x , int y ){ int rx = root ( x ), ry = root ( y ); if ( rx == ry ) return ; pa [ rx ] = ry ; } } dsu ; std :: multiset < int , Mycmp > s ; std :: vector < pair < int , int >> ans ; signed main (){ cin >> n >> m ; for ( register int i = 1 ; i <= n ; ++ i ) cin >> deg [ i ], sum += deg [ i ], dsu . pa [ i ] = i ; if ( sum != 2 * n -2 ) return puts ( \"-1\" ), 0 ; f [ 0 ]. push_back ( 0 ); for ( register int i = 1 ; i <= m ; ++ i ){ int u , v ; cin >> u >> v ; -- deg [ u ], -- deg [ v ]; if ( dsu . same ( u , v )) return puts ( \"-1\" ), 0 ; dsu . Union ( u , v ); } for ( register int i = 1 ; i <= n ; ++ i ) if ( deg [ i ] < 0 ) return puts ( \"-1\" ), 0 ; else while ( deg [ i ] -- ) f [ dsu . root ( i )]. push_back ( i ); for ( register int i = 1 ; i <= n ; ++ i ) if ( f [ i ]. size () > 0 ) s . insert ( i ); while ( ! s . empty ()){ std :: multiset < int , Mycmp >:: iterator it = s . begin (), itt = s . upper_bound ( 0 ); int rmp =* it ; if ( f [ * it ]. size () > 1 ) return puts ( \"-1\" ), 0 ; s . erase ( it ); if ( ! f [ rmp ]. size ()) continue ; if ( itt == s . end ()){ std :: multiset < int , Mycmp >:: iterator yt = std :: prev ( s . end ()); int ls =* yt ; ans . push_back ({ f [ rmp ][ 0 ], * prev ( f [ ls ]. end ())}), s . erase ( yt ); } else { int ls =* itt ; ans . push_back ({ f [ rmp ][ 0 ], * prev ( f [ ls ]. end ())}); s . erase ( itt ), f [ ls ]. pop_back (), s . insert ( ls ); } } for ( std :: pair < int , int > x : ans ) cout << x . first << \" \" << x . second << endl ; return 0 ; } 1 Tag : \u5e76\u67e5\u96c6 / \u6784\u9020 / \u601d\u7ef4 CF1642E/CF1641C Anonymity Is Important \u03c8(\uff40\u2207\u00b4)\u03c8 Feb/24/2022 \u7ed9\u4f60\u4e00\u4e2a\u75c5\u4eba\u7684\u5e8f\u5217\uff0c\u521d\u59cb\u4e0d\u77e5\u9053\u4efb\u4f55\u5173\u4e8e\u75c5\u4eba\u7684\u4fe1\u606f\u3002 \u73b0\u5728\u6709 \\(q\\) \u6b21\u64cd\u4f5c\uff0c\u7b2c\u4e00\u79cd\u662f 0 l r 0/1 \u8868\u793a\u786e\u5b9a \\([l,r]\\) \u5f53\u4e2d\u6709\u6ca1\u6709\u75c5\u4eba \u7b2c\u4e8c\u79cd\u662f\u8be2\u95ee 1 x \uff0c\u8981\u6c42\u8f93\u51fa\u5728\u5f53\u524d\u5df2\u77e5\u4fe1\u606f\u4e0b\uff0c\u75c5\u4eba \\(x\\) \u7684\u72b6\u6001\uff08\u6ca1\u75c5\uff0c\u6709\u75c5\uff0c\u4e0d\u786e\u5b9a\uff09\u3002 2e5. \u8fd9\u9898\u6709\u5f88\u591a\u79cd\u505a\u6cd5\uff0c\u6211\u7684\u505a\u6cd5\u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u7c7b\u4f3c jiangly \u505a\u6cd5\u7684\u4e00\u4e2a std::set \u7ef4\u62a4\u3002 \u53e6\u5916\u4e00\u79cd\u662f odt\u3002 set \u505a\u6cd5\uff1a \u601d\u8def\u4e4b\u540e\u8865\uff0c\u5148\u653e\u4ee3\u7801 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <bits/stdc++.h> using namespace std ; #define int long long int n , q ; signed main (){ cin >> n >> q ; std :: set < int > s ; for ( register int i = -1 ; i <= n ; ++ i ) s . insert ( i ); std :: map < int , int > rec ; while ( q -- ){ int op ; cin >> op ; if ( op == 0 ){ int l , r , x ; cin >> l >> r >> x ; -- l ; if ( ! x ){ std :: set < int >:: iterator it = s . lower_bound ( l ); while ( * it < r ) it = s . erase ( it ); } else { std :: map < int , int >:: iterator it = rec . lower_bound ( l ); if ( it != rec . end () && it -> second <= r ) continue ; rec [ l ] = r , it = rec . find ( l ); while ( it != rec . begin () && r <= std :: prev ( it ) -> second ) rec . erase ( std :: prev ( it )); } } else { int x ; cin >> x ; -- x ; if ( ! s . count ( x )) puts ( \"NO\" ); else { auto qwq = s . find ( x ); int l =* std :: prev ( qwq ), r =* std :: next ( qwq ); auto it = rec . upper_bound ( l ); if ( it != rec . end () && it -> second <= r ) puts ( \"YES\" ); else puts ( \"N/A\" ); } } } return 0 ; } odt \u505a\u6cd5\uff1a \u9996\u5148\u8003\u8651\u5229\u7528 odt \u7ef4\u62a4\u6574\u4e2a\u5e8f\u5217\uff0c\u521d\u59cb\u63d2\u5165\u4e00\u4e2a \\((1,n,-1)\\) \u7684\u8282\u70b9\u8868\u793a\u6574\u4e2a\u5e8f\u5217\u90fd\u4e0d\u786e\u5b9a\u3002 \u53d1\u73b0 \\(0\\) \u7684\u4f18\u5148\u7ea7\u662f\u6700\u9ad8\u7684\uff0c \\(1\\) \u4e0d\u80fd\u8986\u76d6\u5b83\u3002 \u6240\u4ee5\u5982\u679c\u662f 0 l r 0 \uff0c\u76f4\u63a5\u66b4\u529b assign \u5373\u53ef\u3002 \u4f46\u662f\u5982\u679c\u662f 0 l r 1 \uff0c\u5c31\u8981\u8003\u8651\u4e0d\u8986\u76d6 \\((l,r,0)\\) \u7684\u8282\u70b9\u3002 \u76f4\u63a5\u66b4\u529b\u5373\u53ef\uff0c\u7528\u94fe\u8868\u7ef4\u62a4\u7684\u8bdd\u590d\u6742\u5ea6\u5e94\u8be5\u6ca1\u592a\u5927\u95ee\u9898\u3002 \u5982\u679c\u6700\u540e\u8be2\u95ee\u7684\u4f4d\u7f6e\u7684\u989c\u8272\u662f \\(1\\) \u5e76\u4e14\u8fd9\u4e2a\u5757\u7684\u957f\u5ea6\u662f \\(1\\) \uff0c\u7b54\u6848\u5c31\u662f YES \u5982\u679c\u8be2\u95ee\u5230 \\(0\\) \uff0c\u7b54\u6848\u662f NO \u5982\u679c\u8be2\u95ee\u5230 \\(-1\\) \u6216\u8005\u5757\u957f\u4e0d\u4e3a \\(1\\) \u7684\u989c\u8272\u4e3a \\(1\\) \u7684\u5757\uff0c\u7b54\u6848\u662f N/A\u3002 \u53e6\u5916\u4e00\u79cd odt \u5957 odt \u7684\u505a\u6cd5\u4f3c\u4e4e\u6ca1\u6709\u5fc5\u8981\u3002 1 Tag : \u66b4\u529bDS / ODT / \u67d3\u8272 ABC241F Skate \u03c8(\uff40\u2207\u00b4)\u03c8 Feb/28/2022 \u7ed9\u4e00\u4e2a\u77e9\u9635\uff0c\u67d0\u4e9b\u4f4d\u7f6e\u6709\u969c\u788d\uff0c\u6bcf\u6b21\u79fb\u52a8\u5fc5\u987b\u8981\u5728\u6700\u540e\u649e\u5230\u4e00\u4e2a\u969c\u788d\uff0c \u95ee\u4ece \\((s_x,s_y)\\) \u5230 \\((g_x,g_y)\\) \u7684\u6700\u5c0f\u6b65\u6570\u3002 \u77e9\u96351e9\uff0c\u969c\u788d 1e5 \uff0c\u8d77\u70b9\u7ec8\u70b9\u4e0d\u91cd\u5408\u3002 \u7ec6\u8282\u7565\u5fae\u6709\u70b9\u591a\u7684 BFS\u3002 \u56e0\u4e3a\u6bcf\u4e00\u6b65\u6700\u540e\u53ea\u4f1a\u505c\u5728\u969c\u788d\u7684\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u3002 \u6240\u4ee5\u628a\u969c\u788d\u7684\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u90fd\u5efa\u4e00\u4e2a\u70b9\uff0c\u5206\u522b\u548c\u53ef\u4ee5\u5230\u5b83\u7684\u70b9\u8fde\u8fb9\u3002 \u7136\u540e BFS \u5373\u53ef\u3002 \u6570\u636e\u8303\u56f4\u5df2\u7ecf\u63d0\u793a\u4e86\u8981\u4ece\u969c\u788d\u5165\u624b\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int si = 1e6 + 10 ; std :: map < int , std :: set < int >> row , col ; std :: map < std :: pair < int , int > , int > rec ; std :: vector < int > G [ si ]; int dis [ si ]; int sx , sy , gx , gy ; int h , w , n , tot = 0 ; inline void node ( int x , int y ){ if ( ! ( x < 1 || x > h || y < 1 || y > w ) && ! rec . count ({ x , y })) rec [{ x , y }] =++ tot ; } inline void add ( int x , int y ){ G [ x ]. push_back ( y ); } inline void bfs ( int s ){ for ( register int i = 1 ; i <= tot ; ++ i ) dis [ i ] = -1 ; std :: queue < int > q ; q . push ( s ), dis [ s ] = 0 ; while ( ! q . empty ()){ int u = q . front (); q . pop (); for ( int v : G [ u ]){ if ( !~ dis [ v ]) dis [ v ] = dis [ u ] + 1 , q . push ( v ); } } } signed main (){ cin >> h >> w >> n >> sx >> sy >> gx >> gy ; for ( register int i = 1 , u , v ; i <= n ; ++ i ) cin >> u >> v , row [ u ]. insert ( v ), col [ v ]. insert ( u ), node ( u -1 , v ), node ( u + 1 , v ), node ( u , v + 1 ), node ( u , v -1 ); node ( sx , sy ), node ( gx , gy ); for ( std :: pair < pair < int , int > , int > iter : rec ){ int x = iter . first . first , y = iter . first . second ; std :: _Rb_tree_const_iterator < int > it ; it = row [ x ]. lower_bound ( y ); if ( it != row [ x ]. begin ()) add ( rec [{ x , y }], rec [{ x , * std :: prev ( it ) + 1 }]); it = row [ x ]. upper_bound ( y ); if ( it != row [ x ]. end ()) add ( rec [{ x , y }], rec [{ x , * it -1 }]); it = col [ y ]. lower_bound ( x ); if ( it != col [ y ]. begin ()) add ( rec [{ x , y }], rec [{ * std :: prev ( it ) + 1 , y }]); it = col [ y ]. upper_bound ( x ); if ( it != col [ y ]. end ()) add ( rec [{ x , y }], rec [{ * it -1 , y }]); } bfs ( rec [{ sx , sy }]); return printf ( \"%lld \\n \" , dis [ rec [{ gx , gy }]]), 0 ; } Trick \u591a\u8bfb\u4e00\u8bfb\u6570\u636e\u8303\u56f4 1 Tag : BFS / \u601d\u7ef4","title":"2022\u5e742\u6708AT&CF"},{"location":"rec/atcf-for-2022-02/#_1","text":"","title":"\u4e8c\u6708\u597d\u9898\u6539\u9519"},{"location":"rec/atcf-for-2022-02/#cf1638e-colorful-operations","text":"Feb/22/2022 \u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u652f\u6301\u4e09\u79cd\u64cd\u4f5c + 0 l r v \u5c06 \\([l,r]\\) \u6d82\u6210\u989c\u8272 \\(v\\) + 1 v x \u5c06\u6240\u6709\u989c\u8272 \\(v\\) \u7684\u5143\u7d20\u52a0\u4e0a \\(x\\) + 2 x \u67e5\u8be2 \\(a_x\\) 1e6. \u6559\u4f1a\u6211ODT\u7684\u9898\u3002 \u9996\u5148\u53ef\u4ee5\u76f4\u63a5\u5229\u7528 ODT \u7ef4\u62a4\u6bcf\u4e2a\u6bb5\u3002 \u64cd\u4f5c0\u5c31\u662f assign \u5bf9\u4e8e\u64cd\u4f5c1\uff0c\u8003\u8651\u5bf9\u6bcf\u4e2a\u989c\u8272\u7ef4\u62a4\u4e00\u4e2a \\(tag\\) \u3002 \u8868\u793a\u8fd9\u4e2a\u989c\u8272\u5f53\u524d\u4e00\u5171\u52a0\u4e86\u591a\u5c11\u3002 \u7136\u540e assign \u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u88ab\u6539\u53d8\u989c\u8272\u7684\u5757\uff0c\u5148\u5229\u7528\u6811\u72b6\u6570\u7ec4\u628a\u4ed6\u7684\u503c\u52a0\u4e0a \\(tag\\) \uff0c\u63a8\u5e73\u4e4b\u540e\u8fd8\u8981\u51cf\u53bb\u65b0\u989c\u8272\u7684 \\(tag\\) \u3002 \u64cd\u4f5c 2 \u5229\u7528\u6811\u72b6\u6570\u7ec4 + \u5dee\u5206\u8be2\u95ee\u4e4b\u540e\u518d\u52a0\u4e0a\u5f53\u524d\u989c\u8272\u7684 \\(tag\\) \u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int si = 1e6 + 10 ; int n , q ; int a [ si ]; int tag [ si ]; inline int lowbit ( int x ){ return x &- x ; } struct BIT { int n , c [ si ], ans = 0 ; inline void modify ( int x , int y ){ for ( register int i = x ; i <= n ; i += lowbit ( i )) c [ i ] += y ;} inline void add ( int l , int r , int v ){ modify ( l , v ), modify ( r + 1 , - v ); } inline int query ( int x ){ ans = 0 ; for ( register int i = x ; i ; i -= lowbit ( i )) ans += c [ i ]; return ans ; } } bitr ; struct node { int l , r ; mutable int val ; node ( const int & il , const int & ir , const int & iv ) : l ( il ), r ( ir ), val ( iv ){} inline bool operator < ( const node & b ) const { return l < b . l ; } }; std :: set < node > odt ; inline std :: set < node >:: iterator split ( int pos ){ if ( pos > n ) return odt . end (); std :: set < node >:: iterator it =-- odt . upper_bound (( node ){ pos , 0 , 0 }); if ( it -> l == pos ) return it ; int l = it -> l , r = it -> r , v = it -> val ; odt . erase ( it ), odt . insert ( node { l , pos -1 , v }); return odt . insert (( node ){ pos , r , v }). first ; } inline void assign ( int l , int r , int v ){ std :: set < node >:: iterator itr = split ( r + 1 ), itl = split ( l ); for ( std :: set < node >:: iterator it = itl ; it != itr ; ++ it ){ bitr . add ( it -> l , it -> r , tag [ it -> val ]); } odt . erase ( itl , itr ), odt . insert (( node ){ l , r , v }); bitr . add ( l , r , - tag [ v ]); } inline int Tag ( int pos ){ std :: set < node >:: iterator it = odt . lower_bound ( node { pos , 0 , 0 }); if ( it != odt . end () && it -> l == pos ) return tag [ it -> val ]; -- it ; return tag [ it -> val ]; } signed main (){ scanf ( \"%lld%lld\" , & n , & q ), odt . insert (( node ){ 1 , n , 1 }); bitr . n = n ; string op ; int l , r , c ; while ( q -- ){ cin >> op ; if ( op == \"Color\" ) scanf ( \"%lld%lld%lld\" , & l , & r , & c ), assign ( l , r , c ); if ( op == \"Add\" ) scanf ( \"%lld%lld\" , & l , & c ), tag [ l ] += c ; if ( op == \"Query\" ) scanf ( \"%lld\" , & c ), printf ( \"%lld \\n \" , Tag ( c ) + bitr . query ( c )); } return 0 ; } 1 Tag : ODT / \u6811\u72b6\u6570\u7ec4 / \u5dee\u5206","title":"CF1638E Colorful Operations"},{"location":"rec/atcf-for-2022-02/#cf1635e-cars","text":"Feb/23/2022 \u5728\u4e00\u4e2a\u6570\u8f74\u4e0a\u6709\u4e00\u4e9b\u8f66\uff0c\u6bcf\u4e2a\u8f66\u90fd\u6709\u521d\u59cb\u7684\u4f4d\u7f6e\u548c\u65b9\u5411\uff0c\u65b9\u5411\u4e0d\u4f1a\u6539\u53d8\uff0c\u5f00\u59cb\u8fd0\u52a8\u540e\u901f\u5ea6\u4e0d\u53d8\u3002 \u79f0\u4e24\u8f86\u8f66\u76f8\u5173\uff0c\u5f53\u4e14\u4ec5\u5f53\u4ed6\u4eec\u4e00\u5b9a\u4f1a\u76f8\u9047\uff0c \u79f0\u4e24\u8f86\u8f66\u4e0d\u76f8\u5173\uff0c\u5f53\u4e14\u4ec5\u5f53\u4ed6\u4eec\u4e00\u5b9a\u4e0d\u4f1a\u76f8\u9047\u3002 \u7ed9\u4f60 \\(m\\) \u7ec4\u8f66\u4e4b\u95f4\u76f8\u5173\u4e0d\u76f8\u5173\u7684\u5173\u7cfb\uff0c\u6784\u9020\u4e00\u4e2a\u521d\u59cb\u65b9\u6848\uff0c\u65e0\u89e3\u8f93\u51fa-1\u3002 2e5. \u53d1\u73b0\u4e24\u8f86\u8f66\u60f3\u8981\u6709\u5173\u7cfb\uff0c\u5fc5\u987b\u65b9\u5411\u76f8\u53cd\u3002 \u8fd9\u91cc\u7528\u4e8c\u5206\u56fe\u67d3\u8272\u5224\u5b9a\u5373\u53ef\uff08\u9700\u8981\u8003\u8651\u4e0d\u8054\u901a\u7684\u60c5\u51b5\uff09 \u7136\u540e\u6211\u4eec\u8003\u8651\u4efb\u610f\u4e00\u5bf9\u8f66 \\((u,v)\\) \u5047\u8bbe \\(u\\) \u7684\u65b9\u5411\u662f Right\uff0c \\(v\\) \u7684\u65b9\u5411\u662f Left\u3002 \u90a3\u4e48\u5982\u679c \\((u,v)\\) \u76f8\u5173\uff0c\u90a3\u4e48 \\(u\\) \u5728\u6570\u8f74\u4e0a\u9762\u7684\u4f4d\u7f6e\u5fc5\u5b9a\u5c0f\u4e8e \\(v\\) \u5982\u679c\u4e0d\u76f8\u5173\uff0c \\(u\\) \u5728\u6570\u8f74\u4e0a\u9762\u7684\u4f4d\u7f6e\u5fc5\u5b9a\u5927\u4e8e \\(v\\) \u7b2c\u4e00\u79cd\u5173\u7cfb\u8bb0\u4f5c \\(u \\to v\\) \u7b2c\u4e8c\u79cd\u5173\u7cfb\u8bb0\u4f5c \\(v\\to u\\) \u8fd9\u662f\u4e00\u4e2a\u4e25\u683c\u504f\u5e8f\u5173\u7cfb\uff0c\u6240\u4ee5\u53ef\u4ee5\u8054\u7cfb\u5230 DAG\uff0c\u4f7f\u7528\u62d3\u6251\u6392\u5e8f\u5224\u65ad\u8fd9\u4e2a\u4e25\u683c\u504f\u5e8f\u5173\u7cfb\u662f\u5426\u6210\u7acb\u5373\u53ef\u3002 \u521d\u59cb\u4f4d\u7f6e\u7528\u62d3\u6251\u5e8f\u6c42\u89e3\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int si = 2e5 + 10 ; int n , m ; std :: vector < int > GO [ si ], G [ si ]; int col [ si ], ord [ si ], x [ si ]; bool vis [ si ], have_sol = true ; struct node { int ty , u , v ; } a [ si ]; inline void dfs ( int u , int cur ){ col [ u ] = cur , vis [ u ] = true ; for ( int & v : GO [ u ]){ if ( vis [ v ] && col [ v ] == cur ) have_sol = false ; if ( vis [ v ]) continue ; dfs ( v , cur == 1 ? 2 : 1 ); } } signed main (){ scanf ( \"%lld%lld\" , & n , & m ); for ( register int i = 1 ; i <= m ; ++ i ){ scanf ( \"%lld%lld%lld\" , & a [ i ]. ty , & a [ i ]. u , & a [ i ]. v ); GO [ a [ i ]. u ]. push_back ( a [ i ]. v ), GO [ a [ i ]. v ]. push_back ( a [ i ]. u ); } for ( register int i = 1 ; i <= n ; ++ i ) if ( ! vis [ i ]) dfs ( i , 1 ); if ( ! have_sol ) return puts ( \"NO\" ), 0 ; for ( register int i = 1 ; i <= m ; ++ i ){ int & u = a [ i ]. u , & v = a [ i ]. v ; if ( a [ i ]. ty == 1 ){ if ( col [ u ] == 1 ) G [ u ]. push_back ( v ), ++ ord [ v ]; else G [ v ]. push_back ( u ), ++ ord [ u ]; } else { if ( col [ u ] == 1 ) G [ v ]. push_back ( u ), ++ ord [ u ]; else G [ u ]. push_back ( v ), ++ ord [ v ]; } } std :: queue < int > q ; for ( register int i = 1 ; i <= n ; ++ i ) if ( ord [ i ] == 0 ) q . push ( i ); int tot = 0 ; while ( ! q . empty ()){ int u = q . front (); q . pop (), x [ u ] =++ tot ; for ( int & v : G [ u ]) if ( !-- ord [ v ]) q . push ( v ); } if ( tot != n ) return puts ( \"NO\" ), 0 ; puts ( \"YES\" ); for ( register int i = 1 ; i <= n ; ++ i ){ if ( col [ i ] == 1 ) putchar ( 'L' ); else putchar ( 'R' ); printf ( \" %lld \\n \" , x [ i ]); } return 0 ; } Trick \u4e25\u683c\u504f\u5e8f\u5173\u7cfb\u53ef\u4ee5\u5229\u7528\u62d3\u6251\u6392\u5e8f\u6765\u5224\u5b9a/\u6c42\u89e3\u3002 \u53c2\u8003 https://zhuanlan.zhihu.com/p/470044525 1 Tag : \u62d3\u6251\u6392\u5e8f / \u4e8c\u5206\u56fe / \u504f\u5e8f\u5173\u7cfb","title":"CF1635E Cars"},{"location":"rec/atcf-for-2022-02/#cf1635f-closest-pair","text":"Feb/25/2022 \u7ed9\u4f60\u4e24\u4e2a\u5e8f\u5217 \\(x,w\\) ,\u5b9a\u4e49\u4e00\u4e2a\u70b9\u5bf9 \\((i,j)\\) \u7684\u6743\u503c\u4e3a \\(|x_i-x_j|\\times (w_i+w_j)\\) \\(q\\) \u7ec4\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u533a\u95f4 \\([l,r]\\) \u5f53\u4e2d\u7684\u70b9\u5bf9\u6743\u503c\u7684\u6700\u5c0f\u503c\u3002 3e5. \u8003\u8651\u628a \\(x\\) \u5f53\u4f5c \\(x\\) \u8f74\uff0c \\(w\\) \u5f53\u4f5c \\(y\\) \u8f74\u3002 \u90a3\u4e48\u628a\u6bcf\u4e2a\u70b9 \\((x_i,w_i)\\) \u653e\u5230\u5750\u6807\u7cfb\u91cc\u9762\u3002 \u5982\u679c\u4e24\u4e2a\u70b9\u5f62\u6210\u7684\u6b63\u65b9\u5f62\u5f53\u4e2d\u6709\u522b\u7684\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u70b9\u5fc5\u5b9a\u4e0d\u662f\u6700\u4f18\u7684\u3002 \u5f62\u5f0f\u5316\u7684\uff0c\u5982\u679c\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u5bf9 \\((i,j)\\) \uff0c \\(\\exist k \\ | \\ x_i<x_k<x_y \\ \\land \\ w_i<w_k<w_j\\) \u90a3\u4e48 \\((i,j)\\) \u5fc5\u5b9a\u4e0d\u662f\u6700\u4f18\u7684\u3002 \u53e6\u5916\u4e00\u8fb9\u7684\u60c5\u51b5\u4e00\u6837\u3002 \u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(i\\) \uff0c\u5229\u7528\u5355\u8c03\u6808\u5411\u540e\u5904\u7406\u51fa\u6240\u6709\u7684\u53ef\u80fd\u6700\u4f18\u70b9\u5bf9 \\((i,j)\\) \u3002 \u7136\u540e\u628a\u8fd9\u4e2a\u70b9\u5bf9\u770b\u4f5c\u662f\u4e00\u4e2a\u7b54\u6848\u533a\u95f4 \\([i,j]\\) \uff0c\u6743\u503c\u5c31\u662f\u8fd9\u4e2a\u70b9\u5bf9\u7684\u8d21\u732e\u3002 \u90a3\u4e48\u79bb\u7ebf\u4e4b\u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u5c31\u662f\u6c42\u8be2\u95ee\u7684\u533a\u95f4\u5f53\u4e2d\u5305\u542b\uff08\u6216\u8005\u4ea4\uff09\u7684\u7b54\u6848\u533a\u95f4\u7684\u6743\u503c\u7684\u6700\u5c0f\u503c\u3002 \u53ef\u4ee5\u4f7f\u7528 Fenwick Tree \u6216\u8005 Segment Tree \u7ef4\u62a4\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int si = 3e5 + 10 ; constexpr int inf = 4e18 + 1 ; int n , q ; struct Fenwick { int a [ si ]; Fenwick (){ memset ( a , 0x7f , sizeof a );} inline int lowbit ( int x ){ return x &- x ; } inline void modify ( int x , int v ){ x = n - x + 1 ; while ( x <= n ) a [ x ] = min ( a [ x ], v ), x += lowbit ( x );} inline int sum ( int x ){ int ans = inf ; x = n - x + 1 ; while ( x ) ans = min ( ans , a [ x ]), x -= lowbit ( x ); return ans ;} } tr ; int x [ si ], w [ si ]; int Stack [ si ], Top ; std :: vector < std :: pair < int , int >> a [ si ]; int ans [ si ]; signed main (){ cin >> n >> q ; for ( register int i = 1 ; i <= n ; ++ i ) cin >> x [ i ] >> w [ i ]; for ( register int i = 1 ; i <= q ; ++ i ){ int l , r ; cin >> l >> r ; a [ r ]. push_back ( make_pair ( l , i )); } for ( register int i = 1 ; i <= n ; ++ i ){ while ( Top && w [ i ] <= w [ Stack [ Top ]]) tr . modify ( Stack [ Top ],( x [ i ] - x [ Stack [ Top ]]) * ( w [ i ] + w [ Stack [ Top ]])), -- Top ; if ( Top ) tr . modify ( Stack [ Top ],( x [ i ] - x [ Stack [ Top ]]) * ( w [ i ] + w [ Stack [ Top ]])); Stack [ ++ Top ] = i ; for ( auto x : a [ i ]) ans [ x . second ] = tr . sum ( x . first ); } for ( register int i = 1 ; i <= q ; ++ i ) cout << ans [ i ] << endl ; return 0 ; } Trick \u6700\u4f18\u6027\u95ee\u9898\u7684\u65f6\u5019\u53ef\u4ee5\u8003\u8651\u67d0\u4e2a\u7b54\u6848\u5982\u4f55\u624d\u53ef\u80fd\u662f\u6700\u4f18\u7684\uff0c\u4ee5\u6b64\u6392\u9664\u5197\u6742\u51b3\u7b56\u3002 1 Tag : \u601d\u7ef4 / \u6811\u72b6\u6570\u7ec4 / \u7ebf\u6bb5\u6811","title":"CF1635F Closest Pair"},{"location":"rec/atcf-for-2022-02/#abc239f-construct-highway","text":"Feb/28/2022 \u7ed9\u4f60\u4e00\u9897\u6811\uff0c\u53ea\u544a\u8bc9\u4f60\u4e00\u90e8\u5206\u8fb9\u548c\u6bcf\u4e2a\u70b9\u7684\u5ea6\u6570\u3002 \u6784\u9020\u8fd9\u68f5\u6811\u3002 2e5. \u9996\u5148\uff0c\u5982\u679c\u7ed9\u51fa\u7684\u5ea6\u6570\u4e4b\u548c\u4e0d\u7b49\u4e8e \\(2n-2\\) \uff0c\u660e\u663e\u65e0\u89e3\u3002 \u7136\u540e\u53d1\u73b0\u7ed9\u51fa\u7684\u8fd9\u4e9b\u8fb9\u4f1a\u628a\u6240\u6709\u7684\u8282\u70b9\u5206\u6210\u82e5\u5e72\u4e2a\u8fde\u901a\u5757\u3002 \u6240\u4ee5\u8003\u8651\u5728\u8fde\u901a\u5757\u4e4b\u95f4\u8fde\u8fb9\u3002 \u5982\u679c\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u91cc\u9762\u7684\u4e24\u4e2a\u70b9\u8fde\u8fb9\uff0c\u90a3\u4e5f\u662f\u65e0\u89e3\u7684\u3002 \u6700\u7279\u6b8a\u7684\u662f\u53ea\u9700\u8981\u4e00\u4e2a\u5ea6\u6570\u7684\u8fde\u901a\u5757\uff0c\u56e0\u4e3a\u6700\u540e\u5fc5\u987b\u662f\u4e00\u68f5\u6811\uff0c\u5b83\u60f3\u8981\u8054\u901a\uff0c\u5c31\u5fc5\u5b9a\u4e0d\u80fd\u548c\u53e6\u5916\u4e00\u4e2a\u9700\u8981\u4e00\u4e2a\u5ea6\u6570\u7684\u8fde\u901a\u5757\u8fde\u8fb9\u3002 \u9664\u975e\u53ea\u5269\u6700\u540e\u4e24\u4e2a\u8fde\u901a\u5757\u3002 \u5426\u5219\u6700\u540e\u6784\u9020\u51fa\u6765\u7684\u4f1a\u662f\u4e2a\u68ee\u6797\u3002 \u6240\u4ee5\u628a\u6240\u6709\u8fde\u901a\u5757\u5206\u6210\u4e24\u7ec4\uff0c\u4e00\u7ec4\u662f\u53ea\u9700\u8981\u4e00\u4e2a\u5ea6\u6570\u7684\u8fde\u901a\u5757\uff0c\u53e6\u5916\u4e00\u7ec4\u662f\u9700\u8981\u81f3\u5c11\u4e24\u4e2a\u7684\u3002 \u7136\u540e\u5c31\u8ba9\u7b2c\u4e00\u7ec4\u7684\u4e0d\u65ad\u548c\u7b2c\u4e8c\u7ec4\u7684\u8fde\u8fb9\uff0c\u7b2c\u4e8c\u7ec4\u7ec4\u5185\u6392\u5e8f\u4ece\u5c0f\u5230\u5927\uff0c\u5982\u679c\u7b2c\u4e8c\u7ec4\u7684\u67d0\u4e2a\u8fde\u901a\u5757\u5728\u8fde\u5b8c\u4e4b\u540e\u53d8\u6210\u4e86\u53ea\u9700\u8981\u4e00\u4e2a\u7684\uff0c\u6254\u8fdb\u7b2c\u4e00\u7ec4\u3002 \u5176\u5b83\u60c5\u51b5\u5c31\u662f\u65e0\u89e3\u4e86\u3002 \u5229\u7528 dsu \u7ef4\u62a4\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int si = 2e5 + 10 ; int n , m , sum = 0 ; int deg [ si ]; std :: vector < int > f [ si ]; struct Mycmp { inline bool operator ()( int x , int y ) const { return f [ x ]. size () < f [ y ]. size (); } }; struct Dsu { int pa [ si ]; inline int root ( int x ){ if ( pa [ x ] != x ) return pa [ x ] = root ( pa [ x ]); return pa [ x ]; } inline bool same ( int x , int y ){ return root ( x ) == root ( y ); } inline void Union ( int x , int y ){ int rx = root ( x ), ry = root ( y ); if ( rx == ry ) return ; pa [ rx ] = ry ; } } dsu ; std :: multiset < int , Mycmp > s ; std :: vector < pair < int , int >> ans ; signed main (){ cin >> n >> m ; for ( register int i = 1 ; i <= n ; ++ i ) cin >> deg [ i ], sum += deg [ i ], dsu . pa [ i ] = i ; if ( sum != 2 * n -2 ) return puts ( \"-1\" ), 0 ; f [ 0 ]. push_back ( 0 ); for ( register int i = 1 ; i <= m ; ++ i ){ int u , v ; cin >> u >> v ; -- deg [ u ], -- deg [ v ]; if ( dsu . same ( u , v )) return puts ( \"-1\" ), 0 ; dsu . Union ( u , v ); } for ( register int i = 1 ; i <= n ; ++ i ) if ( deg [ i ] < 0 ) return puts ( \"-1\" ), 0 ; else while ( deg [ i ] -- ) f [ dsu . root ( i )]. push_back ( i ); for ( register int i = 1 ; i <= n ; ++ i ) if ( f [ i ]. size () > 0 ) s . insert ( i ); while ( ! s . empty ()){ std :: multiset < int , Mycmp >:: iterator it = s . begin (), itt = s . upper_bound ( 0 ); int rmp =* it ; if ( f [ * it ]. size () > 1 ) return puts ( \"-1\" ), 0 ; s . erase ( it ); if ( ! f [ rmp ]. size ()) continue ; if ( itt == s . end ()){ std :: multiset < int , Mycmp >:: iterator yt = std :: prev ( s . end ()); int ls =* yt ; ans . push_back ({ f [ rmp ][ 0 ], * prev ( f [ ls ]. end ())}), s . erase ( yt ); } else { int ls =* itt ; ans . push_back ({ f [ rmp ][ 0 ], * prev ( f [ ls ]. end ())}); s . erase ( itt ), f [ ls ]. pop_back (), s . insert ( ls ); } } for ( std :: pair < int , int > x : ans ) cout << x . first << \" \" << x . second << endl ; return 0 ; } 1 Tag : \u5e76\u67e5\u96c6 / \u6784\u9020 / \u601d\u7ef4","title":"ABC239F Construct Highway"},{"location":"rec/atcf-for-2022-02/#cf1642ecf1641c-anonymity-is-important","text":"Feb/24/2022 \u7ed9\u4f60\u4e00\u4e2a\u75c5\u4eba\u7684\u5e8f\u5217\uff0c\u521d\u59cb\u4e0d\u77e5\u9053\u4efb\u4f55\u5173\u4e8e\u75c5\u4eba\u7684\u4fe1\u606f\u3002 \u73b0\u5728\u6709 \\(q\\) \u6b21\u64cd\u4f5c\uff0c\u7b2c\u4e00\u79cd\u662f 0 l r 0/1 \u8868\u793a\u786e\u5b9a \\([l,r]\\) \u5f53\u4e2d\u6709\u6ca1\u6709\u75c5\u4eba \u7b2c\u4e8c\u79cd\u662f\u8be2\u95ee 1 x \uff0c\u8981\u6c42\u8f93\u51fa\u5728\u5f53\u524d\u5df2\u77e5\u4fe1\u606f\u4e0b\uff0c\u75c5\u4eba \\(x\\) \u7684\u72b6\u6001\uff08\u6ca1\u75c5\uff0c\u6709\u75c5\uff0c\u4e0d\u786e\u5b9a\uff09\u3002 2e5. \u8fd9\u9898\u6709\u5f88\u591a\u79cd\u505a\u6cd5\uff0c\u6211\u7684\u505a\u6cd5\u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u7c7b\u4f3c jiangly \u505a\u6cd5\u7684\u4e00\u4e2a std::set \u7ef4\u62a4\u3002 \u53e6\u5916\u4e00\u79cd\u662f odt\u3002 set \u505a\u6cd5\uff1a \u601d\u8def\u4e4b\u540e\u8865\uff0c\u5148\u653e\u4ee3\u7801 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <bits/stdc++.h> using namespace std ; #define int long long int n , q ; signed main (){ cin >> n >> q ; std :: set < int > s ; for ( register int i = -1 ; i <= n ; ++ i ) s . insert ( i ); std :: map < int , int > rec ; while ( q -- ){ int op ; cin >> op ; if ( op == 0 ){ int l , r , x ; cin >> l >> r >> x ; -- l ; if ( ! x ){ std :: set < int >:: iterator it = s . lower_bound ( l ); while ( * it < r ) it = s . erase ( it ); } else { std :: map < int , int >:: iterator it = rec . lower_bound ( l ); if ( it != rec . end () && it -> second <= r ) continue ; rec [ l ] = r , it = rec . find ( l ); while ( it != rec . begin () && r <= std :: prev ( it ) -> second ) rec . erase ( std :: prev ( it )); } } else { int x ; cin >> x ; -- x ; if ( ! s . count ( x )) puts ( \"NO\" ); else { auto qwq = s . find ( x ); int l =* std :: prev ( qwq ), r =* std :: next ( qwq ); auto it = rec . upper_bound ( l ); if ( it != rec . end () && it -> second <= r ) puts ( \"YES\" ); else puts ( \"N/A\" ); } } } return 0 ; } odt \u505a\u6cd5\uff1a \u9996\u5148\u8003\u8651\u5229\u7528 odt \u7ef4\u62a4\u6574\u4e2a\u5e8f\u5217\uff0c\u521d\u59cb\u63d2\u5165\u4e00\u4e2a \\((1,n,-1)\\) \u7684\u8282\u70b9\u8868\u793a\u6574\u4e2a\u5e8f\u5217\u90fd\u4e0d\u786e\u5b9a\u3002 \u53d1\u73b0 \\(0\\) \u7684\u4f18\u5148\u7ea7\u662f\u6700\u9ad8\u7684\uff0c \\(1\\) \u4e0d\u80fd\u8986\u76d6\u5b83\u3002 \u6240\u4ee5\u5982\u679c\u662f 0 l r 0 \uff0c\u76f4\u63a5\u66b4\u529b assign \u5373\u53ef\u3002 \u4f46\u662f\u5982\u679c\u662f 0 l r 1 \uff0c\u5c31\u8981\u8003\u8651\u4e0d\u8986\u76d6 \\((l,r,0)\\) \u7684\u8282\u70b9\u3002 \u76f4\u63a5\u66b4\u529b\u5373\u53ef\uff0c\u7528\u94fe\u8868\u7ef4\u62a4\u7684\u8bdd\u590d\u6742\u5ea6\u5e94\u8be5\u6ca1\u592a\u5927\u95ee\u9898\u3002 \u5982\u679c\u6700\u540e\u8be2\u95ee\u7684\u4f4d\u7f6e\u7684\u989c\u8272\u662f \\(1\\) \u5e76\u4e14\u8fd9\u4e2a\u5757\u7684\u957f\u5ea6\u662f \\(1\\) \uff0c\u7b54\u6848\u5c31\u662f YES \u5982\u679c\u8be2\u95ee\u5230 \\(0\\) \uff0c\u7b54\u6848\u662f NO \u5982\u679c\u8be2\u95ee\u5230 \\(-1\\) \u6216\u8005\u5757\u957f\u4e0d\u4e3a \\(1\\) \u7684\u989c\u8272\u4e3a \\(1\\) \u7684\u5757\uff0c\u7b54\u6848\u662f N/A\u3002 \u53e6\u5916\u4e00\u79cd odt \u5957 odt \u7684\u505a\u6cd5\u4f3c\u4e4e\u6ca1\u6709\u5fc5\u8981\u3002 1 Tag : \u66b4\u529bDS / ODT / \u67d3\u8272","title":"CF1642E/CF1641C Anonymity Is Important"},{"location":"rec/atcf-for-2022-02/#abc241f-skate","text":"Feb/28/2022 \u7ed9\u4e00\u4e2a\u77e9\u9635\uff0c\u67d0\u4e9b\u4f4d\u7f6e\u6709\u969c\u788d\uff0c\u6bcf\u6b21\u79fb\u52a8\u5fc5\u987b\u8981\u5728\u6700\u540e\u649e\u5230\u4e00\u4e2a\u969c\u788d\uff0c \u95ee\u4ece \\((s_x,s_y)\\) \u5230 \\((g_x,g_y)\\) \u7684\u6700\u5c0f\u6b65\u6570\u3002 \u77e9\u96351e9\uff0c\u969c\u788d 1e5 \uff0c\u8d77\u70b9\u7ec8\u70b9\u4e0d\u91cd\u5408\u3002 \u7ec6\u8282\u7565\u5fae\u6709\u70b9\u591a\u7684 BFS\u3002 \u56e0\u4e3a\u6bcf\u4e00\u6b65\u6700\u540e\u53ea\u4f1a\u505c\u5728\u969c\u788d\u7684\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u3002 \u6240\u4ee5\u628a\u969c\u788d\u7684\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u90fd\u5efa\u4e00\u4e2a\u70b9\uff0c\u5206\u522b\u548c\u53ef\u4ee5\u5230\u5b83\u7684\u70b9\u8fde\u8fb9\u3002 \u7136\u540e BFS \u5373\u53ef\u3002 \u6570\u636e\u8303\u56f4\u5df2\u7ecf\u63d0\u793a\u4e86\u8981\u4ece\u969c\u788d\u5165\u624b\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int si = 1e6 + 10 ; std :: map < int , std :: set < int >> row , col ; std :: map < std :: pair < int , int > , int > rec ; std :: vector < int > G [ si ]; int dis [ si ]; int sx , sy , gx , gy ; int h , w , n , tot = 0 ; inline void node ( int x , int y ){ if ( ! ( x < 1 || x > h || y < 1 || y > w ) && ! rec . count ({ x , y })) rec [{ x , y }] =++ tot ; } inline void add ( int x , int y ){ G [ x ]. push_back ( y ); } inline void bfs ( int s ){ for ( register int i = 1 ; i <= tot ; ++ i ) dis [ i ] = -1 ; std :: queue < int > q ; q . push ( s ), dis [ s ] = 0 ; while ( ! q . empty ()){ int u = q . front (); q . pop (); for ( int v : G [ u ]){ if ( !~ dis [ v ]) dis [ v ] = dis [ u ] + 1 , q . push ( v ); } } } signed main (){ cin >> h >> w >> n >> sx >> sy >> gx >> gy ; for ( register int i = 1 , u , v ; i <= n ; ++ i ) cin >> u >> v , row [ u ]. insert ( v ), col [ v ]. insert ( u ), node ( u -1 , v ), node ( u + 1 , v ), node ( u , v + 1 ), node ( u , v -1 ); node ( sx , sy ), node ( gx , gy ); for ( std :: pair < pair < int , int > , int > iter : rec ){ int x = iter . first . first , y = iter . first . second ; std :: _Rb_tree_const_iterator < int > it ; it = row [ x ]. lower_bound ( y ); if ( it != row [ x ]. begin ()) add ( rec [{ x , y }], rec [{ x , * std :: prev ( it ) + 1 }]); it = row [ x ]. upper_bound ( y ); if ( it != row [ x ]. end ()) add ( rec [{ x , y }], rec [{ x , * it -1 }]); it = col [ y ]. lower_bound ( x ); if ( it != col [ y ]. begin ()) add ( rec [{ x , y }], rec [{ * std :: prev ( it ) + 1 , y }]); it = col [ y ]. upper_bound ( x ); if ( it != col [ y ]. end ()) add ( rec [{ x , y }], rec [{ * it -1 , y }]); } bfs ( rec [{ sx , sy }]); return printf ( \"%lld \\n \" , dis [ rec [{ gx , gy }]]), 0 ; } Trick \u591a\u8bfb\u4e00\u8bfb\u6570\u636e\u8303\u56f4 1 Tag : BFS / \u601d\u7ef4","title":"ABC241F Skate"},{"location":"rec/atcf-for-2022-03/","text":"\u4e09\u6708\u597d\u9898\u6539\u9519 \u03c8(\uff40\u2207\u00b4)\u03c8 CF1646E Power Board \u03c8(\uff40\u2207\u00b4)\u03c8 Mar/05/2022 \u7ed9\u4f60\u4e00\u4e2a \\(n\\times m\\) \u7684\u77e9\u9635\uff0c\u4e14 \\(a_{i,j}=i^j\\) \u3002\u6c42\u8fd9\u4e2a\u77e9\u9635\u5f53\u4e2d\u6709\u591a\u5c11\u4e0d\u540c\u7684\u6570\u3002 1e6\u3002 \u66b4\u529b\u660e\u663e\u7206\u70b8\u3002 \u8003\u8651\u5bb9\u65a5\u4e4b\u7c7b\u7684\u505a\u6cd5\u6765\u53bb\u91cd\u3002 \u53d1\u73b0\u4e24\u4e2a\u4e0d\u540c\u884c \\((i,j)\\) \u4f1a\u751f\u6210\u91cd\u590d\u7684\u6570\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(\\exist d,a,b \\ |\\ i=d^a,j=d^b\\) \u3002 \u6bd4\u5982 \\(2,4,8\\) \u8fd9\u79cd\u3002 \u5217\u4e00\u4e2a\u8868\uff1a \\[\\begin{bmatrix}2^1&2^2&2^3&\\dots&2^m \\\\4^1&4^2&4^3&\\dots&4^m\\\\8^1&8^2&8^3&\\dots&8^m\\end{bmatrix}\\] \u5316\u6210 \\(2\\) \u7684\u6b21\u5e42\u5f62\u5f0f\uff1a \\[\\begin{bmatrix}2^1&2^2&2^3&\\dots&2^m \\\\2^2&2^4&2^6&\\dots&2^{2m}\\\\2^3&2^6&2^9&\\dots&2^{3m}\\end{bmatrix}\\] \u8003\u8651\u6307\u6570\uff1a \\[\\begin{bmatrix}1&2&3&\\dots&m \\\\2&4&6&\\dots&{2m}\\\\3&6&9&\\dots&{3m}\\end{bmatrix}\\] \u5982\u679c\u53ea\u8003\u8651 \\(2,4,8,16\\) \u8fd9\u79cd\u7684\u8bdd\uff0c\u7b54\u6848\u5c31\u662f\u4e0a\u9762\u7b2c\u4e09\u4e2a\u8868\u5f53\u4e2d\u4e0d\u540c\u7684\u6570\u7684\u4e2a\u6570\u3002 \u56e0\u4e3a\u6211\u4eec\u53bb\u6389\u5e95\u6570\u7684\u8fc7\u7a0b\u5c31\u662f\u6c42\u4e86\u4e00\u4e2a \\(\\log\\) \uff0c\u6240\u4ee5\u8868\u91cc\u9762\u7684\u6570\u662f \\(\\log\\) \u7ea7\u522b\u7684\u3002 \u5199\u4e00\u4e2a\u66b4\u529b\u5373\u53ef\u67e5\u8be2\u3002 \u8f6c\u5316\u5230\u539f\u9898\uff0c\u5c31\u662f\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4e0d\u662f\u67d0\u4e00\u4e2a\u6574\u6570\u7684\u5927\u4e8e\u7b49\u4e8e \\(2\\) \u7684\u6574\u6570\u6b21\u5e42\u7684\u6570\u6c42\u4e00\u6b21\u3002 std::bitset \u5373\u53ef\u3002 \u601d\u8def\u6765\u81ea\uff1a https://codeforces.com/blog/entry/100584?#comment-892898 @Suri429 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int si = 1e6 + 10 ; int s = 1 , n , m ; int a [ si ], b [ si ]; std :: bitset < si * 20 > c ; #undef int int main (){ #define int long long scanf ( \"%lld%lld\" , & n , & m ); for ( register int i = 1 ; i <= 20 ; ++ i ){ for ( register int j = 1 ; j <= m ; ++ j ) c [ i * j ] = 1 ; a [ i ] = c . count (); } for ( register int i = 2 ; i <= n ; ++ i ){ if ( b [ i ] == 1 ) continue ; int k = 1 ; b [ i ] = 1 ; for ( register int j = i * i ; j <= n ; j = j * i ) b [ j ] = 1 , k = k + 1 ; s = s + a [ k ]; } return printf ( \"%lld\" , s ), 0 ; #undef int } 1 Tag : \u66b4\u529b / bitset / \u601d\u7ef4 CF1647E Madoka and the Sixth-graders \u03c8(\uff40\u2207\u00b4)\u03c8 Mar/22/2022 \u7ed9 \\(n\\) \u5f20\u684c\u5b50\uff0c\u521d\u59cb\u7684\u65f6\u5019\u684c\u5b50\u4e0a\u5750\u7740\u7684\u5b66\u751f\u7684\u7f16\u53f7\u5206\u522b\u4e3a \\(a_1, a_2, \\dots , a_n\\) \u3002 \u4e14 \\(a\\) \u662f\u4e00\u4e2a \\(n\\) \u7684\u6392\u5217\uff0c\u7136\u540e\u7ed9\u5b9a\u51e0\u7ec4\u6709\u5411\u5173\u7cfb \\((i,j)\\) \uff0c\u8868\u793a\u6bcf\u8fc7\u4e00\u8282\u8bfe\uff0c\u684c\u5b50 \\(i\\) \u7684\u5b66\u751f\u4f1a\u79fb\u52a8\u5230\u684c\u5b50 \\(j\\) \u3002 \u5982\u679c\u4e00\u4e2a\u684c\u5b50\u4e0a\u6709\u8d85\u8fc7\u4e00\u4e2a\u4eba\uff0c\u7559\u4e0b\u7f16\u53f7\u6700\u5c0f\u7684\uff0c\u7136\u540e\u8e22\u51fa\u5176\u4ed6\u7684\u3002 \u95e8\u5916\u7684\u5b66\u751f\u7f16\u53f7\u4e3a \\(n+1,n+2,\\dots\\) \u3002 \u5982\u679c\u6709\u7a7a\u7684\u4f4d\u7f6e\uff0c\u6309\u7167\u4f4d\u7f6e\u7f16\u53f7\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u8ba9\u95e8\u5916\u7684\u5b66\u751f\u4f9d\u6b21\u8fdb\u6765\u586b\u4e0a\u3002 \u7ed9\u5b9a\u6700\u7ec8\u7684\u72b6\u6001 \\(b\\) \uff0c\u6c42\u51fa\u6ee1\u8db3\u6761\u4ef6\u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u7684 \\(a\\) \u3002 1e5\u3002 \u4fdd\u8bc1\u6bcf\u8282\u8bfe\u603b\u662f\u6709\u5b66\u751f\u88ab\u8e22\u51fa\uff0c\u5b66\u751f\u7684\u7f16\u53f7\u4e92\u4e0d\u76f8\u540c\u3002 \u53d1\u73b0\u9898\u76ee\u4fdd\u8bc1\u4e86 \\(p\\) \u5f53\u4e2d\u5fc5\u7136\u6709\u91cd\u590d\u5143\u7d20\u3002 \u6240\u4ee5\u6bcf\u4e00\u8f6e\u5fc5\u7136\u4f1a\u6709\u4eba\u88ab\u5f00\u9664\uff0c\u7b49\u4ef7\u4e8e\u6bcf\u4e00\u8f6e\u5fc5\u7136\u6709\u4eba\u8fdb\u5165\u3002 \u6240\u4ee5\u6559\u5ba4\u91cc\u7684\u6240\u6709\u6570\u7684\u6700\u5927\u503c\u4e00\u5b9a\u662f\u5355\u8c03\u4e0a\u5347\u7684\u3002 \u53ef\u4ee5\u6c42\u51fa\u5f53\u524d\u7ecf\u8fc7\u7684\u8f6e\u6570 \\(k =\\) (*max_element(b + 1, b + 1 + n) - n) / (n - set<int>(p + 1, p + 1 + n).size()) \u56e0\u4e3a\u7c7b\u4f3c\u6837\u4f8b\u4e00\u5f53\u4e2d\u7684 \u201c\u53cc\u5411\u8fb9\u201d \u5f88\u4e0d\u597d\u5904\u7406\u3002 \u6240\u4ee5\u5f53\u52a1\u4e4b\u6025\u662f\u7ecf\u8fc7 \\(k\\) \u8f6e\u4e4b\u540e\uff0c\u539f\u6765\u5728\u67d0\u4e00\u4e2a\u70b9\u7684 stu \u4f1a\u5728\u54ea\u4e00\u4e2a\u70b9\u51fa\u73b0\u3002 \u8bbe\u8fd9\u4e2a\u70b9\u4e3a \\(dest[i]\\) \u5e76\u4e14\u5148\u4e0d\u8003\u8651\u88ab\u5f00\u9664\u7684\u60c5\u51b5\u3002 \u8fd9\u4e2a\u5982\u679c\u76f4\u63a5\u9012\u63a8\u662f \\(\\text{O}(nk)\\) \u7684\uff0c\u5fc5\u7136\u4f1a TLE\u3002 \u7136\u540e\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u5173\u4e8e \\(2\\) \u7684\u6b63\u6574\u6570\u6b21\u5e42\u5177\u6709 \u5212\u5206\u6027 \u3002 \u4e5f\u5c31\u662f\u8bbe \\(t[i][j]\\) \u8868\u793a \\(i\\) \u8df3 \\(2^j\\) \u6b65\u53ef\u4ee5\u5230\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u5fc5\u7136\u53ef\u4ee5\u5f97\u5230 \\(t[i][j] = t[ t[i][j - 1] ][j - 1]\\) . \u66f4\u4e00\u822c\u7684\uff0c \\(t[i][j] = t[ t[ t[ t[i][j-3] ][j-3] ][j-2] ][j-1]\\) \uff0c\u8fd9\u6837\u53ef\u4ee5\u4e00\u76f4\u5d4c\u5957\u4e0b\u53bb\u3002 \u90a3\u4e48\u8fd9\u4e2a\u9012\u63a8\u5c31\u53ef\u4ee5\u76f4\u63a5\u5229\u7528 \u500d\u589e\u4f18\u5316 \u3002 \u6240\u4ee5\u628a \\(k\\) \u4e8c\u8fdb\u5236\u62c6\u5206\uff0c\u679a\u4e3e \\(k\\) \u7684\u6bcf\u4e00\u4f4d\uff0c\u5982\u679c\u5f53\u524d\u4f4d\u662f \\(1\\) \uff0c \u90a3\u4e48\u7ed9\u6bcf\u4e00\u4e2a \\(dest\\) \u8df3 \\(2^j\\) \u6b65\uff0c \\(j\\) \u662f\u5f53\u524d\u4f4d\u3002 \u521d\u59cb\u5316 \\(to[i][0] = p[i]\\) \u3002 \u5bf9\u4e8e\u56e0\u4e3a \\(p[i]\\) \u6709\u91cd\u590d\u7684\uff0c\u6240\u4ee5 \\(dest[i]\\) \u4e5f\u5fc5\u7136\u4f1a\u6709\u91cd\u590d\u7684\u3002 \u5047\u8bbe\u67d0\u4e00\u4e2a\u70b9 \\(i\\) \uff0c\u6709\u4e09\u4e2a\u70b9\uff08\u5b9e\u9645\u4e0a\u4e2a\u6570\u4efb\u610f\uff0c\u6b64\u5904\u4e3e\u4f8b\u9700\u8981\uff09 \\(A, B, C\\) \u53ef\u4ee5\u7ecf\u8fc7 \\(k\\) \u8f6e\u5230\u8fbe\u5b83\uff0c \u90a3\u4e48\u7559\u5728\u8fd9\u4e2a\u5730\u65b9\u7684\uff08 \\(b[i]\\) \uff09\u5fc5\u7136\u662f\u8fd9\u4e09\u70b9\u8fc7\u6765\u7684\u5b66\u751f\u5f53\u4e2d\u7f16\u53f7\u6700\u5c0f\u7684\uff0c \u6240\u4ee5\u6700\u5f00\u59cb\uff08 \\(k = 0\\) \uff09\u7684\u65f6\u5019\uff0c \\(A, B, C\\) \u5f53\u4e2d\u5fc5\u7136\u6709\u4e00\u4e2a\u70b9\u7684\u5b66\u751f\u662f \\(b[i]\\) \u3002 \u4e3a\u4e86\u8ba9\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u8003\u8651\u8ba9 \\(A, B, C\\) \u5f53\u4e2d\u7f16\u53f7\u6700\u5c0f\u7684\u4e00\u4e2a\u70b9\u521d\u59cb\u5750\u4e0a \\(b[i]\\) \uff0c\u4e5f\u5c31\u662f\u8ba9\u8fd9\u4e2a\u70b9\u7684 \\(a = b[i]\\) \u3002 \u7136\u540e\u73b0\u5728\u5c31\u5df2\u7ecf\u586b\u597d\u4e86\u4e00\u4e9b\u70b9\u3002 \u7ef4\u62a4\u5269\u4e0b\u7684\uff0c\u7f16\u53f7\u5728 \\(1 \\sim n\\) \u5f53\u4e2d\u7684\u5b66\u751f\u96c6\u5408 \\(S\\) \uff08\u4e3a\u4ec0\u4e48\u662f \\(1 \\sim n\\) \u539f\u56e0\u663e\u7136\uff09\u3002 \u7136\u540e\u4ece\u524d\u5f80\u540e\u626b\u63cf \\(a\\) \u5f53\u4e2d\u6240\u6709\u8fd8\u6ca1\u6709\u7b54\u6848\u7684\u70b9\uff0c\u5bf9\u4e8e\u5f53\u4e2d\u7684\u67d0\u4e00\u4e2a\u70b9 \\(i\\) \uff0c\u5b83\u7ecf\u8fc7 \\(k\\) \u8f6e\u53bb\u5230\u7684\u5730\u65b9\u662f \\(dest[i]\\) \u3002 \u90a3\u4e48\u5b83\u7684 \\(a[i]\\) \u5fc5\u7136\u8981\u5927\u4e8e\u6240\u6709 \\(dest = dest[i]\\) \u7684\u70b9\u5f53\u4e2d\u7f16\u53f7\u6700\u5c0f\u7684\u90a3\u4e2a\u70b9\u521d\u59cb\u7684 \\(a\\) \uff0c\u4e5f\u5c31\u662f \\(b[dest[i]]\\) \u3002 \u6240\u4ee5\u5728\u96c6\u5408 \\(S\\) \u5f53\u4e2d\u4e8c\u5206\u4e00\u4e2a\u5927\u4e8e \\(b[dest[i]]\\) \u7684\uff0c\u6700\u5c0f\u7684\u70b9\u586b\u4e0a\u53bb\u5c31\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 #include <set> #include <cmath> #include <bitset> #include <cstring> #include <iostream> #include <algorithm> #include <unordered_set> using namespace std ; const int si = 1e5 + 10 ; int n ; int a [ si ], b [ si ], p [ si ]; int t [ si ][ 51 ]; int dest [ si ]; int tmp [ si ]; int main () { cin >> n ; int mx = -1 ; bitset < si > vis ; for ( int i = 1 ; i <= n ; ++ i ) cin >> p [ i ], vis [ p [ i ]] = true ; for ( int i = 1 ; i <= n ; ++ i ) cin >> b [ i ], mx = max ( mx , b [ i ]); int k = ( mx - n ) / ( n - vis . count ()); // int k = (*max_element(b + 1, b + 1 + n) - n) / (n - unordered_set<int>(p + 1, p + 1 + n).size()); int lg = ( int )( log ( k ) / log ( 2 )) + 1 ; cerr << k << \" \" << lg << endl ; for ( int i = 1 ; i <= n ; ++ i ) t [ i ][ 0 ] = p [ i ]; for ( int j = 1 ; j <= lg ; ++ j ) { for ( int i = 1 ; i <= n ; ++ i ) { t [ i ][ j ] = t [ t [ i ][ j - 1 ]][ j - 1 ]; } } for ( int i = 1 ; i <= n ; ++ i ) dest [ i ] = i ; for ( int j = lg ; j >= 0 ; -- j ) { if ( k >> j & 1 ) { for ( int i = 1 ; i <= n ; ++ i ) { dest [ i ] = t [ dest [ i ]][ j ]; if ( t [ dest [ i ]][ j ] == 0 ) cerr << \"Error on #\" << i << \", \" << j << endl ; } } } // for(int i = 1; i <= n; ++i) cout << dest[i] << endl; sort ( p + 1 , p + 1 + n ); int m = unique ( p + 1 , p + 1 + n ) - p - 1 ; // cout << m << endl; // for(int i = 1; i <= m; ++i) cout << p[i] << endl; memset ( a , 0x3f , sizeof a ); memset ( tmp , 0x3f , sizeof tmp ); set < int > rest ; for ( int i = 1 ; i <= n ; ++ i ) { if ( tmp [ dest [ i ]] == 0x3f3f3f3f ) tmp [ dest [ i ]] = i ; rest . insert ( i ); } // for(int i = 1; i <= n; ++i) cout << tmp[i] << endl; for ( int i = 1 ; i <= m ; ++ i ) { if ( tmp [ p [ i ]] == 0x3f3f3f3f ) continue ; a [ tmp [ p [ i ]]] = b [ p [ i ]]; // cerr << b[p[i]] << \"$\"; auto pos = rest . find ( b [ p [ i ]]); if ( pos == rest . end ()) cerr << \"Error\" ; rest . erase ( pos ); } for ( int i = 1 ; i <= n ; ++ i ) { if ( a [ i ] == 0x3f3f3f3f ) { auto pos = rest . lower_bound ( b [ dest [ i ]]); // cerr << b[dest[i]] << \"#\"; if ( pos == rest . end ()) cerr << \"Error\" ; a [ i ] = * pos , rest . erase ( pos ); } } for ( int i = 1 ; i <= n ; ++ i ) cout << a [ i ] << \" \" ; cout << endl ; return 0 ; } 1 Tag : \u500d\u589e / \u56fe\u8bba CF1650G Counting Shortcuts \u03c8(\uff40\u2207\u00b4)\u03c8 Mar/24/2022 \u7ed9\u5b9a\u4e00\u5f20\u65e0\u6743\u65e0\u5411\u56fe\uff0c\u95ee\u9898\u4ece\u67d0\u4e2a\u70b9 \\(s\\) \u5230\u67d0\u4e2a\u70b9 \\(t\\) \u7684\u597d\u8def\u5f84\u7684\u6761\u6570\u5bf9 \\(1e9+7\\) \u53d6\u6a21\u3002 \u4e00\u4e2a\u8def\u5f84\u662f\u597d\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e2a\u8def\u5f84\u7684\u957f\u5ea6\u548c \\(s,t\\) \u4e4b\u95f4\u7684\u6700\u77ed\u8def\u7684\u957f\u5ea6\u5dee\u4e0d\u8d85\u8fc7 \\(1\\) \u3002 \\(n,m\\) 2e5\u3002 \u9996\u5148\u8003\u8651\u6c42\u51fa \\(s\\) \u51fa\u53d1\u5230\u6bcf\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u3002 \u7136\u540e DP \u5373\u53ef\u3002 \u65b9\u7a0b\u6bd4\u8f83\u663e\u7136\uff0c\u76f4\u63a5\u770b\u4ee3\u7801\u5373\u53ef\uff1a Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 dijkstra ( s ); // Bfs(s), ReBfs(s); vector < pair < int , int > > Dis ; for ( int i = 1 ; i <= n ; ++ i ) { Dis . push_back ({ dis [ i ], i }); dp [ i ][ 0 ] = dp [ i ][ 1 ] = 0 ; } sort ( Dis . begin (), Dis . end ()); dp [ s ][ 0 ] = 1 , dp [ s ][ 1 ] = 0 ; for ( auto x : Dis ) { int u = x . second ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( dis [ u ] == dis [ v ] + 1 ) dp [ u ][ 0 ] = ( dp [ u ][ 0 ] + dp [ v ][ 0 ]) % mod ; } } for ( auto x : Dis ) { int u = x . second ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( dis [ u ] == dis [ v ] + 1 ) dp [ u ][ 1 ] = ( dp [ v ][ 1 ] + dp [ u ][ 1 ]) % mod ; else if ( dis [ u ] == dis [ v ]) dp [ u ][ 1 ] = ( dp [ v ][ 0 ] + dp [ u ][ 1 ]) % mod ; } } cout << ( dp [ t ][ 0 ] + dp [ t ][ 1 ]) % mod << endl ; 1 Tag : DP / \u56fe\u8bba / \u6700\u77ed\u8def CF1654E Arithmetic Operations \u03c8(\uff40\u2207\u00b4)\u03c8 Mar/21/2022 \u7ed9\u4e00\u4e2a\u6570\u5217 \\(a\\) \uff0c\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u4efb\u610f\u4fee\u6539\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e00\u4e2a\u6570\uff0c\u4fee\u6539\u540e\u7684\u6570\u53ef\u4ee5\u662f\u6b63\u6574\u6570\uff0c\u8d1f\u6574\u6570\u548c\u96f6\u3002 \u95ee\u4f7f\u5f97 \\(a\\) \u6210\u4e3a\u7b49\u5dee\u6570\u5217\u7684\u6700\u5c0f\u7684\u64cd\u4f5c\u6b21\u6570\u3002 1e5\u3002 \u628a\u6bcf\u4e2a\u5143\u7d20\u770b\u6210\u4e00\u4e2a\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684\u70b9 \\((i,a_i)\\) \u3002 \u7136\u540e\u8981\u6c42\u7684\u53ef\u4ee5\u8f6c\u5316\u4e3a\u6c42\u8fd9\u4e2a\u5e73\u9762\u4e0a\u6700\u591a\u6709\u591a\u5c11\u4e2a\u70b9\u5171\u7ebf\uff0c\u7136\u540e\u7528 \\(n\\) \u51cf\u53bb\u8fd9\u4e2a\u503c\u5373\u53ef\u3002 \u4e5f\u5c31\u662f\u628a\u7b49\u5dee\u6570\u5217\u8f6c\u6362\u6210\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e0a\u7684\u4e00\u6761\u76f4\u7ebf\u3002 \u4f46\u662f\u8fd9\u4e2a\u4e1c\u897f\u597d\u50cf\u662f\u6839\u53f7\u5206\u6cbb\uff0c\u4e0d\u4f1a\uff0c\u6240\u4ee5\u5148\u7a7a\u7740\u4e86\u3002 CF1657F Words On Tree \u03c8(\uff40\u2207\u00b4)\u03c8 Mar/24/2022 \u7ed9\u4e00\u68f5\u6811\uff0c\u7ed9 \\(q\\) \u4e2a\u4e09\u5143\u7ec4 \\((x_i,y_i,s_i)\\) \uff0c \\(x_i,y_i\\) \u662f\u8282\u70b9\u7f16\u53f7\uff0c \\(s_i\\) \u662f\u5b57\u7b26\u4e32\uff0c\u957f\u5ea6\u548c\u6811\u4e0a \\((x_i,y_i)\\) \u7684\u7b80\u5355\u8def\u5f84\u957f\u5ea6\u4e00\u81f4\u3002 \u6784\u9020\u4e00\u68f5\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u4e0a\u6709\u4e00\u4e2a\u5b57\u7b26\uff0c\u4f7f\u5f97\u5b83\u6ee1\u8db3\u8fd9 \\(q\\) \u4e2a\u4e09\u5143\u7ec4\u7684\u7ea6\u675f\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4e09\u5143\u7ec4\uff0c\u9700\u8981\u6ee1\u8db3\uff0c\u8def\u5f84 \\((x_i,y_i)\\) \u4e0a\u7684\u5b57\u7b26\u4e32\u8981\u4e48\u662f \\(s_i\\) \uff0c\u8981\u4e48\u662f \\(reverse(s_i)\\) \u3002 9s, 4e5\u3002 \u8003\u8651\u66b4\u529b 2-SAT\u3002 \u4f46\u662f\u8fd9\u6837\u6bcf\u4e2a\u8282\u70b9\u7684\u5019\u9009\u503c\u6709 26 \u4e2a\uff0c\u6ca1\u6cd5\u505a\u3002 \u90a3\u4e48\u628a\u6bcf\u4e2a\u4e09\u5143\u7ec4\u8fd9\u6837\u5904\u7406\uff1a \u628a \\(s_i\\) \u653e\u5230\u8fd9\u4e2a\u8def\u5f84\u4e0a\uff0c\u7136\u540e\u628a \\(rev(s_i)\\) \u653e\u5230\u8fd9\u4e2a\u8def\u5f84\u4e0a\u3002 \u7136\u540e\u5c31\u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2a\u8282\u70b9\u7684\u5019\u9009\u96c6\u5408\u5927\u5c0f\u6700\u5927\u4e3a \\(2\\) \u3002 \uff08\u5bf9\u6bcf\u4e2a\u8282\u70b9\uff0c\u5bf9\u7ecf\u8fc7\u5b83\u7684\u4e09\u5143\u7ec4\u7559\u4e0b\u7684\u5019\u9009\u96c6\u5408\u6c42\u4ea4\u5c31\u53ef\u4ee5\u5f97\u5230\uff09 \u7136\u540e\u5c31\u53ef\u4ee5 2-SAT \u4e86\u3002 \u4f46\u662f\u8fd9\u6837\u76f4\u63a5\u5b9e\u73b0\u4f1a\u975e\u5e38\u590d\u6742\u3002 \u8003\u8651\u662f\u5426\u5b58\u5728\u53e6\u5916\u4e00\u79cd\u66f4\u597d\u7684\u5199\u6cd5\u3002 \u626b\u63cf\u6bcf\u4e00\u4e2a\u4e32\uff0c\u7136\u540e\u5185\u5c42\u626b\u63cf\u8def\u5f84\u4e0a\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u5f53\u524d\u8282\u70b9\u6ca1\u6709\u5019\u9009\u96c6\u5408\uff0c\u7ed9\u4ed6\u52a0\u4e0a\u3002 \u7136\u540e\u8003\u8651\u8fd9\u6837\u7684\u4e00\u4e2a\u8fc7\u7a0b\uff1a 1 2 3 4 5 cand [ i ][ 0 ] cand [ i ][ 1 ] ( \u5f53\u524d\u8282\u70b9\u7684\u5019\u9009\u96c6\u5408 ) s [ j ] s [ len - j - 1 ] ( rev ( s )[ j ]) ( \u5f53\u524d\u626b\u63cf\u5230\u7684\u4e32\u5728\u8fd9\u4e2a\u70b9\u7684\u5019\u9009\u96c6\u5408 ) \u5982\u679c \\(s_j\\) \u4e0d\u7b49\u4e8e \\(cand[i][0]\\) \uff0c\u90a3\u4e48\u8bc1\u660e\u9009 \\(s[j]\\) \u5c31\u4e0d\u80fd\u9009 \\(cand[i][0]\\) \u3002 \u6240\u4ee5\u8fde\u63a5 \\(s[j] \\to cand[i][1]\\) \uff0c\u7136\u540e\u628a\u5bf9\u5e94\u7684\u9006\u5426\u547d\u9898 \\(cand[i][0] \\to s[len-j-1]\\) \u94fe\u63a5\u4e0a\u3002 \u5176\u5b83\u4e09\u79cd\u60c5\u51b5\u540c\u7406\u3002 \u8fd9\u4e2a\u65f6\u5019\u518d\u8dd1 2-SAT \u5c31\u53ef\u4ee5\u4e86\u3002 \u56e0\u4e3a\u65f6\u9650 \\(9s\\) \u6240\u4ee5\u968f\u4fbf\u641e\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 #include <cmath> #include <stack> #include <vector> #include <cstring> #include <iostream> #include <algorithm> #define c0 qwq #define c1 qaq using namespace std ; const int si = 16 * ( 1e5 + 10 ); int n , q ; int head [ si ], tot = 0 ; struct Edge { int ver , Next ; } e [ si << 1 ]; inline void add ( int u , int v ) { e [ tot ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot ++ ; } int dep [ si ], f [ si ][ 20 ]; int lg ; void dfs ( int u , int fa ) { dep [ u ] = dep [ fa ] + 1 , f [ u ][ 0 ] = fa ; for ( int i = 1 ; i <= lg ; ++ i ) f [ u ][ i ] = f [ f [ u ][ i -1 ]][ i -1 ]; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs ( v , u ); } } int Lca ( int u , int v ) { if ( dep [ u ] < dep [ v ]) swap ( u , v ); for ( int i = lg ; i >= 0 ; -- i ) if ( dep [ f [ u ][ i ]] >= dep [ v ]) u = f [ u ][ i ]; if ( u == v ) return u ; for ( int i = lg ; i >= 0 ; -- i ) if ( f [ u ][ i ] != f [ v ][ i ]) u = f [ u ][ i ], v = f [ v ][ i ]; return f [ u ][ 0 ]; } vector < int > G [ si ]; inline void Add ( int u , int v ) { G [ u ]. emplace_back ( v ); } int tim = 0 ; int dfn [ si ], low [ si ]; stack < int > s ; bool ins [ si ]; int cnt = 0 ; int c [ si ]; void tarjan ( int u ) { dfn [ u ] = low [ u ] = ++ tim ; s . push ( u ), ins [ u ] = true ; for ( int v : G [ u ]) { if ( ! dfn [ v ]) tarjan ( v ), low [ u ] = min ( low [ u ], low [ v ]); else if ( ins [ v ]) low [ u ] = min ( low [ u ], dfn [ v ]); } if ( dfn [ u ] == low [ u ]) { int x ; ++ cnt ; do { x = s . top (), s . pop (); c [ x ] = cnt , ins [ x ] = false ; } while ( u != x ); } } int m ; char cand [ si ][ 2 ]; inline int Node ( int u , bool op ) { if ( op ) return u ; else return u + ( n + m ); } int main () { cin >> n >> q , lg = ( int )( log ( n ) / log ( 2 )) + 1 ; memset ( head , -1 , sizeof head ); memset ( ins , false , sizeof ins ); for ( int i = 1 ; i < n ; ++ i ) { int u , v ; cin >> u >> v ; add ( u , v ), add ( v , u ); } dfs ( 1 , 0 ); int now = 0 ; m = q ; while ( q -- ) { ++ now ; int u , v ; string s ; cin >> u >> v , cin >> s ; int len = ( int ) s . size (); int lca = Lca ( u , v ); vector < int > path , tmp ; while ( u != lca ) path . emplace_back ( u ), u = f [ u ][ 0 ]; path . emplace_back ( lca ); while ( v != lca ) tmp . emplace_back ( v ), v = f [ v ][ 0 ]; reverse ( tmp . begin (), tmp . end ()); for ( auto x : tmp ) path . emplace_back ( x ); // for(auto x : path) cout << x << ' '; cout << endl; for ( int i = 0 ; i < len ; ++ i ) { int x = path [ i ]; char c0 = s [ i ], c1 = s [ len - i - 1 ]; if ( ! cand [ x ][ 0 ] && ! cand [ x ][ 1 ]) cand [ x ][ 0 ] = c0 , cand [ x ][ 1 ] = c1 ; if ( cand [ x ][ 0 ] != c0 ) { Add ( Node ( now , 0 ), Node ( x + m , 1 )); Add ( Node ( x + m , 0 ), Node ( now , 1 )); } if ( cand [ x ][ 1 ] != c0 ) { Add ( Node ( now , 0 ), Node ( x + m , 0 )); Add ( Node ( x + m , 1 ), Node ( now , 1 )); } if ( cand [ x ][ 0 ] != c1 ) { Add ( Node ( now , 1 ), Node ( x + m , 1 )); Add ( Node ( x + m , 0 ), Node ( now , 0 )); } if ( cand [ x ][ 1 ] != c1 ) { Add ( Node ( now , 1 ), Node ( x + m , 0 )); Add ( Node ( x + m , 1 ), Node ( now , 0 )); } } } for ( int i = 1 ; i <= 2 * ( n + m ); ++ i ) { if ( ! dfn [ i ]) tarjan ( i ); } for ( int i = 1 ; i <= n ; ++ i ) { if ( ! cand [ i ][ 0 ]) cand [ i ][ 0 ] = cand [ i ][ 1 ] = 'a' ; } for ( int i = 1 ; i <= n + m ; ++ i ) { if ( c [ Node ( i , 0 )] == c [ Node ( i , 1 )]) return puts ( \"NO\" ), 0 ; } puts ( \"YES\" ); for ( int i = 1 ; i <= n ; ++ i ) { putchar ( cand [ i ][ c [ Node ( i + m , 0 )] > c [ Node ( i + m , 1 )] ] ); } puts ( \"\" ); return 0 ; } 1 Tag : LCA / \u601d\u7ef4 / 2 - SAT CF1656D K-good \u03c8(\uff40\u2207\u00b4)\u03c8 Mar/25/2022 \u4e00\u4e2a\u6b63\u6574\u6570 \\(n\\) \u662f \\(k\\) Good \u7684\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(n\\) \u53ef\u4ee5\u88ab\u5206\u6210 \\(k\\) \u4e2a\u4e0d\u540c\u6b63\u6574\u6570\u7684\u548c\uff0c\u4e14\u8fd9 \\(k\\) \u4e2a\u6b63\u6574\u6570\u6a21 \\(k\\) \u610f\u4e49\u4e0b\u76f8\u4e92\u4e0d\u540c\u4f59\u3002 \u7ed9\u5b9a \\(n\\) \uff081e18\uff09\uff0c\u6c42\u51fa\u4efb\u610f\u4e00\u4e2a\u5408\u6cd5\u7684\uff0c \\(\\ge 2\\) \u7684 \\(k\\) \uff0c\u4f7f\u5f97 \\(n\\) \u662f \\(k\\) Good \u7684\u3002 \u8003\u8651\u628a \\(n\\) \u6309\u7167 \\(1,2,3,4,\\dots\\) \u7684\u65b9\u5f0f\u644a\u5230 \\(k\\) \u4e2a\u5730\u65b9\uff0c\u7136\u540e\u628a\u5269\u4e0b\u7684\u503c\u52a0\u4e0a\uff0c\u4f7f\u5f97\u6761\u4ef6\u6210\u7acb\u3002 \u7136\u540e\u53ef\u4ee5\u5217\u51fa\u4e00\u4e2a\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\uff1a \\(n \\equiv \\dfrac{k(k+1)}{2} (\\operatorname{mod} k)\\) \u3002 \u7136\u540e\u53d1\u73b0 \\(n\\) \u8fd8\u8981\u6ee1\u8db3 \\(\\ge \\dfrac{k(k+1)}{2}\\) \u624d\u53ef\u4ee5\u3002 \u6240\u4ee5\u73b0\u5728\u5c31\u5f97\u5230\u4e86\u5224\u5b9a\u7684\u4e24\u4e2a\u6761\u4ef6\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c \\(2^k\\) \u5f62\u5f0f\u7684\u6570\u5fc5\u7136\u65e0\u89e3\uff0c\u5176\u4ed6\u5fc5\u7136\u6709\u89e3\u3002 \u5947\u6570\u76f4\u63a5\u4ee4 \\(k = 2\\) \u5373\u53ef\u3002 \u7136\u540e\u6709\u4e00\u4e2a\u6211\u8fd8\u6682\u65f6\u4e0d\u4f1a\u8bc1\u660e\u7684\u7ed3\u8bba\u3002 \u6392\u9664\u5b8c\u65e0\u89e3\u60c5\u51b5\u4e4b\u540e\u3002 \u628a\u4e00\u4e2a\u6570\u7684\u6240\u6709 \\(2\\) \u56e0\u5b50\u63d0\u51fa\u6765\u7ec4\u6210 \\(2^k\\) \u3002 \u7136\u540e\u7b54\u6848\u5fc5\u7136\u662f \\(2^{k+1}\\) \u548c \\(\\dfrac{n}{2^k}\\) \u7684\u6700\u5c0f\u503c\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #include <cmath> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; using i64 = long long ; using i128 = __uint128_t ; int T ; inline i64 solve ( i64 n ) { i64 tmp = n ; i64 cnt = 1 ; while ( tmp % 2l l == 0l l ) { tmp /= 2l l , cnt *= 2 ; } if ( tmp == 1l l ) return -1ll ; return min ( tmp , 2 * cnt ); } int main () { cin >> T ; while ( T -- ) { i64 n ; cin >> n ; cout << solve ( n ) << endl ; } return 0 ; } 1 Tag : \u6570\u5b66 / \u6570\u8bba / \u540c\u4f59 CF1656E Equal Tree Sums \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u8981\u6c42\u4f60\u7ed9\u6bcf\u4e2a\u8282\u70b9\u4e00\u4e2a\u6743\u503c\uff0c\u4f7f\u5f97\u53bb\u6389\u6811\u4e2d\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u4e4b\u540e\uff0c \u4efb\u610f\u4e24\u4e2a\u8fde\u901a\u5757\u4e4b\u5185\u7684\u548c\u662f\u76f8\u7b49\u7684\u3002 1e5\u3002 Mar/25/2022 \u7ed3\u8bba\uff1a\u9ed1\u767d\u67d3\u8272\uff0c\u4e00\u79cd\u989c\u8272\u7684\u8282\u70b9\u8d4b\u503c\u4e3a \\(-deg(u)\\) \uff0c\u53e6\u5916\u4e00\u79cd \\(+deg(u)\\) \u3002 \u8003\u8651\u4e00\u4e2a\u70b9\u5bf9\u4e8e\u548c\u5b83\u76f8\u8fde\u7684\u6240\u6709\u9876\u70b9\uff0c\u5728\u5220\u9664\u4e4b\u540e\u505a\u7684\u8d21\u732e\u5373\u53ef\u3002 \u66f4\u597d\u4e00\u70b9\u7684\u8bc1\u660e\uff1a Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int si = 1e5 + 10 ; int n , T ; int head [ si ], tot = 0 ; struct Edge { int ver , Next ; } e [ si << 1 ]; int deg [ si ]; inline void add ( int u , int v ) { e [ tot ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot ++ ; } int c [ si ]; void dfs ( int u , int fa , int col ) { if ( c [ u ] != -1 ) return ; c [ u ] = col ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs ( v , u , 1 - col ); } } int main () { cin >> T ; while ( T -- ) { cin >> n ; memset ( c , -1 , sizeof c ), memset ( deg , 0 , sizeof deg ); tot = 0 , memset ( head , -1 , sizeof head ); for ( int i = 1 ; i < n ; ++ i ) { int u , v ; cin >> u >> v ; add ( u , v ), add ( v , u ); ++ deg [ u ], ++ deg [ v ]; } dfs ( 1 , 0 , 1 ); for ( int i = 1 ; i <= n ; ++ i ) { if ( c [ i ] == 0 ) cout << - deg [ i ] << \" \" ; else cout << deg [ i ] << \" \" ; } cout << endl ; } return 0 ; } 1 Tag : \u56fe\u8bba / \u601d\u7ef4 ABC243F Lottery \u03c8(\uff40\u2207\u00b4)\u03c8 Mar/25/2022 Takahashi is participating in a lottery. Each time he takes a draw, he gets one of the \\(N\\) prizes available. Prize \\(i\\) is awarded with probability \\(\\dfrac{w_i}{\\sum^{N}_{j=1} w_j}\\) , The results of the draws are independent of each other. What is the probability that he gets exactly \\(M\\) different prizes from \\(K\\) draws? Find it modulo \\(998244353\\) . \\(1\\le N,M,K \\le 50\\) \u3002 \\(M \\le N\\) \u3002 \u5b9a\u4e49 \\(P(i) = \\dfrac{w_i}{\\sum^{N}_{j=1} w_j}\\) \u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u79cd\u5143\u7d20\u88ab\u9009\u4e86 \\(c_i\\) \u6b21\uff0c\u90a3\u4e48\u5b83\u7684\u6982\u7387\u5c31\u662f \\(P(i)^{c_i}\\) \u7136\u540e\u8003\u8651\u7528\u53ef\u91cd\u96c6\u7684\u6392\u5217\u6570\u516c\u5f0f\u7b97\u3002 \u4f46\u662f\u8fd9\u91cc\u8981\u7a0d\u5fae\u9b54\u6539\u4e00\u4e0b\u3002 \u90a3\u4e48\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u67ff\u5b50\uff1a \\[\\dfrac{K!}{\\prod\\limits_{i = 1}^{N} c_i!} \\times \\prod\\limits_{i=1}^{N} P(i)^{c_i}, \\sum c_i = K, |\\{i\\ |\\ c_i \\not= 0\\}|=M\\] \u8fd9\u4e2a\u5c31\u662f\u7b54\u6848\u3002 \u5176\u4e2d \\(c_i\\) \u8868\u793a \\(i\\) \u8fd9\u79cd\u7269\u54c1\u88ab\u9009\u4e86\u591a\u5c11\u6b21\uff0c\u53ef\u4ee5\u662f \\(0\\) \u3002 \\(K!\\) \u662f\u5e38\u6570\uff0c\u6240\u4ee5\u63d0\u51fa\u6765\uff1a \\[K!\\times \\dfrac{\\prod\\limits_{i=1}^{N} P(i)^{c_i}}{\\prod\\limits_{i = 1}^{N} c_i!}\\] \u53d1\u73b0\u540e\u9762\u8fd9\u4e2a\u90e8\u5206\u53ef\u4ee5\u5316\u6210 \\[\\prod\\limits_{i = 1}^{n} \\dfrac{P(i)^{c_i}}{c_i}\\] \u5fc5\u7136\u53ef\u4ee5\u9012\u63a8\u3002 \u7136\u540e\u8bbe \\(dp[i][j][k]\\) \u8868\u793a \\(N = i, M = j, K = k\\) \u7684\u65f6\u5019\u7684\u8fd9\u4e2a\u4e1c\u897f\u3002 \u8003\u8651\u679a\u4e3e\u6bcf\u4e00\u79cd\u7269\u54c1\u9009\u591a\u5c11\u4e2a\u5373\u53ef\u8f6c\u79fb\u3002 \u590d\u6742\u5ea6 \\(\\text{O}(NMK^2)\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 #include <cstring> #include <iostream> #include <algorithm> using namespace std ; using i64 = long long ; const int si = 50 + 10 ; constexpr int mod = 998244353 ; int N , M , K ; i64 dp [ si ][ si ][ si ]; i64 fact [ si ]; int w [ si ], sum = 0 ; inline i64 qpow ( i64 a , int b ) { i64 ans = 1 % mod ; for (; b ; b >>= 1 ) { if ( b & 1 ) ans = ans * a % mod ; a = a * a % mod ; } return ans ; } inline i64 inv ( int a ) { return qpow ( a , mod - 2 ) % mod ; } int p [ si ]; int main () { cin >> N >> M >> K ; for ( int i = 1 ; i <= N ; ++ i ) { cin >> w [ i ]; sum += w [ i ]; } fact [ 0 ] = 1 ; for ( int i = 1 ; i <= K ; ++ i ) { fact [ i ] = fact [ i - 1 ] * i * 1l l % mod ; } for ( int i = 1 ; i <= N ; ++ i ) { p [ i ] = (( 1l l * w [ i ] % mod ) * inv ( sum )) % mod ; } dp [ 0 ][ 0 ][ 0 ] = 1 ; for ( int i = 1 ; i <= N ; ++ i ) { for ( int j = 0 ; j <= M ; ++ j ) { for ( int k = 0 ; k <= K ; ++ k ) { for ( int c = 0 ; c <= k ; ++ c ) { if ( j - ( c > 0 ) >= 0 ) dp [ i ][ j ][ k ] = ( dp [ i ][ j ][ k ] + dp [ i - 1 ][ j - ( c > 0 )][ k - c ] * qpow ( p [ i ], c ) % mod * inv ( fact [ c ]) % mod ) % mod ; } } } } cout << dp [ N ][ M ][ K ] * fact [ K ] % mod << endl ; return 0 ; } 1 Tag : \u7ec4\u5408\u6570\u5b66 / DP / \u9012\u63a8","title":"2022\u5e743\u6708AT&CF"},{"location":"rec/atcf-for-2022-03/#_1","text":"","title":"\u4e09\u6708\u597d\u9898\u6539\u9519"},{"location":"rec/atcf-for-2022-03/#cf1646e-power-board","text":"Mar/05/2022 \u7ed9\u4f60\u4e00\u4e2a \\(n\\times m\\) \u7684\u77e9\u9635\uff0c\u4e14 \\(a_{i,j}=i^j\\) \u3002\u6c42\u8fd9\u4e2a\u77e9\u9635\u5f53\u4e2d\u6709\u591a\u5c11\u4e0d\u540c\u7684\u6570\u3002 1e6\u3002 \u66b4\u529b\u660e\u663e\u7206\u70b8\u3002 \u8003\u8651\u5bb9\u65a5\u4e4b\u7c7b\u7684\u505a\u6cd5\u6765\u53bb\u91cd\u3002 \u53d1\u73b0\u4e24\u4e2a\u4e0d\u540c\u884c \\((i,j)\\) \u4f1a\u751f\u6210\u91cd\u590d\u7684\u6570\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(\\exist d,a,b \\ |\\ i=d^a,j=d^b\\) \u3002 \u6bd4\u5982 \\(2,4,8\\) \u8fd9\u79cd\u3002 \u5217\u4e00\u4e2a\u8868\uff1a \\[\\begin{bmatrix}2^1&2^2&2^3&\\dots&2^m \\\\4^1&4^2&4^3&\\dots&4^m\\\\8^1&8^2&8^3&\\dots&8^m\\end{bmatrix}\\] \u5316\u6210 \\(2\\) \u7684\u6b21\u5e42\u5f62\u5f0f\uff1a \\[\\begin{bmatrix}2^1&2^2&2^3&\\dots&2^m \\\\2^2&2^4&2^6&\\dots&2^{2m}\\\\2^3&2^6&2^9&\\dots&2^{3m}\\end{bmatrix}\\] \u8003\u8651\u6307\u6570\uff1a \\[\\begin{bmatrix}1&2&3&\\dots&m \\\\2&4&6&\\dots&{2m}\\\\3&6&9&\\dots&{3m}\\end{bmatrix}\\] \u5982\u679c\u53ea\u8003\u8651 \\(2,4,8,16\\) \u8fd9\u79cd\u7684\u8bdd\uff0c\u7b54\u6848\u5c31\u662f\u4e0a\u9762\u7b2c\u4e09\u4e2a\u8868\u5f53\u4e2d\u4e0d\u540c\u7684\u6570\u7684\u4e2a\u6570\u3002 \u56e0\u4e3a\u6211\u4eec\u53bb\u6389\u5e95\u6570\u7684\u8fc7\u7a0b\u5c31\u662f\u6c42\u4e86\u4e00\u4e2a \\(\\log\\) \uff0c\u6240\u4ee5\u8868\u91cc\u9762\u7684\u6570\u662f \\(\\log\\) \u7ea7\u522b\u7684\u3002 \u5199\u4e00\u4e2a\u66b4\u529b\u5373\u53ef\u67e5\u8be2\u3002 \u8f6c\u5316\u5230\u539f\u9898\uff0c\u5c31\u662f\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4e0d\u662f\u67d0\u4e00\u4e2a\u6574\u6570\u7684\u5927\u4e8e\u7b49\u4e8e \\(2\\) \u7684\u6574\u6570\u6b21\u5e42\u7684\u6570\u6c42\u4e00\u6b21\u3002 std::bitset \u5373\u53ef\u3002 \u601d\u8def\u6765\u81ea\uff1a https://codeforces.com/blog/entry/100584?#comment-892898 @Suri429 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int si = 1e6 + 10 ; int s = 1 , n , m ; int a [ si ], b [ si ]; std :: bitset < si * 20 > c ; #undef int int main (){ #define int long long scanf ( \"%lld%lld\" , & n , & m ); for ( register int i = 1 ; i <= 20 ; ++ i ){ for ( register int j = 1 ; j <= m ; ++ j ) c [ i * j ] = 1 ; a [ i ] = c . count (); } for ( register int i = 2 ; i <= n ; ++ i ){ if ( b [ i ] == 1 ) continue ; int k = 1 ; b [ i ] = 1 ; for ( register int j = i * i ; j <= n ; j = j * i ) b [ j ] = 1 , k = k + 1 ; s = s + a [ k ]; } return printf ( \"%lld\" , s ), 0 ; #undef int } 1 Tag : \u66b4\u529b / bitset / \u601d\u7ef4","title":"CF1646E Power Board"},{"location":"rec/atcf-for-2022-03/#cf1647e-madoka-and-the-sixth-graders","text":"Mar/22/2022 \u7ed9 \\(n\\) \u5f20\u684c\u5b50\uff0c\u521d\u59cb\u7684\u65f6\u5019\u684c\u5b50\u4e0a\u5750\u7740\u7684\u5b66\u751f\u7684\u7f16\u53f7\u5206\u522b\u4e3a \\(a_1, a_2, \\dots , a_n\\) \u3002 \u4e14 \\(a\\) \u662f\u4e00\u4e2a \\(n\\) \u7684\u6392\u5217\uff0c\u7136\u540e\u7ed9\u5b9a\u51e0\u7ec4\u6709\u5411\u5173\u7cfb \\((i,j)\\) \uff0c\u8868\u793a\u6bcf\u8fc7\u4e00\u8282\u8bfe\uff0c\u684c\u5b50 \\(i\\) \u7684\u5b66\u751f\u4f1a\u79fb\u52a8\u5230\u684c\u5b50 \\(j\\) \u3002 \u5982\u679c\u4e00\u4e2a\u684c\u5b50\u4e0a\u6709\u8d85\u8fc7\u4e00\u4e2a\u4eba\uff0c\u7559\u4e0b\u7f16\u53f7\u6700\u5c0f\u7684\uff0c\u7136\u540e\u8e22\u51fa\u5176\u4ed6\u7684\u3002 \u95e8\u5916\u7684\u5b66\u751f\u7f16\u53f7\u4e3a \\(n+1,n+2,\\dots\\) \u3002 \u5982\u679c\u6709\u7a7a\u7684\u4f4d\u7f6e\uff0c\u6309\u7167\u4f4d\u7f6e\u7f16\u53f7\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u8ba9\u95e8\u5916\u7684\u5b66\u751f\u4f9d\u6b21\u8fdb\u6765\u586b\u4e0a\u3002 \u7ed9\u5b9a\u6700\u7ec8\u7684\u72b6\u6001 \\(b\\) \uff0c\u6c42\u51fa\u6ee1\u8db3\u6761\u4ef6\u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u7684 \\(a\\) \u3002 1e5\u3002 \u4fdd\u8bc1\u6bcf\u8282\u8bfe\u603b\u662f\u6709\u5b66\u751f\u88ab\u8e22\u51fa\uff0c\u5b66\u751f\u7684\u7f16\u53f7\u4e92\u4e0d\u76f8\u540c\u3002 \u53d1\u73b0\u9898\u76ee\u4fdd\u8bc1\u4e86 \\(p\\) \u5f53\u4e2d\u5fc5\u7136\u6709\u91cd\u590d\u5143\u7d20\u3002 \u6240\u4ee5\u6bcf\u4e00\u8f6e\u5fc5\u7136\u4f1a\u6709\u4eba\u88ab\u5f00\u9664\uff0c\u7b49\u4ef7\u4e8e\u6bcf\u4e00\u8f6e\u5fc5\u7136\u6709\u4eba\u8fdb\u5165\u3002 \u6240\u4ee5\u6559\u5ba4\u91cc\u7684\u6240\u6709\u6570\u7684\u6700\u5927\u503c\u4e00\u5b9a\u662f\u5355\u8c03\u4e0a\u5347\u7684\u3002 \u53ef\u4ee5\u6c42\u51fa\u5f53\u524d\u7ecf\u8fc7\u7684\u8f6e\u6570 \\(k =\\) (*max_element(b + 1, b + 1 + n) - n) / (n - set<int>(p + 1, p + 1 + n).size()) \u56e0\u4e3a\u7c7b\u4f3c\u6837\u4f8b\u4e00\u5f53\u4e2d\u7684 \u201c\u53cc\u5411\u8fb9\u201d \u5f88\u4e0d\u597d\u5904\u7406\u3002 \u6240\u4ee5\u5f53\u52a1\u4e4b\u6025\u662f\u7ecf\u8fc7 \\(k\\) \u8f6e\u4e4b\u540e\uff0c\u539f\u6765\u5728\u67d0\u4e00\u4e2a\u70b9\u7684 stu \u4f1a\u5728\u54ea\u4e00\u4e2a\u70b9\u51fa\u73b0\u3002 \u8bbe\u8fd9\u4e2a\u70b9\u4e3a \\(dest[i]\\) \u5e76\u4e14\u5148\u4e0d\u8003\u8651\u88ab\u5f00\u9664\u7684\u60c5\u51b5\u3002 \u8fd9\u4e2a\u5982\u679c\u76f4\u63a5\u9012\u63a8\u662f \\(\\text{O}(nk)\\) \u7684\uff0c\u5fc5\u7136\u4f1a TLE\u3002 \u7136\u540e\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u5173\u4e8e \\(2\\) \u7684\u6b63\u6574\u6570\u6b21\u5e42\u5177\u6709 \u5212\u5206\u6027 \u3002 \u4e5f\u5c31\u662f\u8bbe \\(t[i][j]\\) \u8868\u793a \\(i\\) \u8df3 \\(2^j\\) \u6b65\u53ef\u4ee5\u5230\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u5fc5\u7136\u53ef\u4ee5\u5f97\u5230 \\(t[i][j] = t[ t[i][j - 1] ][j - 1]\\) . \u66f4\u4e00\u822c\u7684\uff0c \\(t[i][j] = t[ t[ t[ t[i][j-3] ][j-3] ][j-2] ][j-1]\\) \uff0c\u8fd9\u6837\u53ef\u4ee5\u4e00\u76f4\u5d4c\u5957\u4e0b\u53bb\u3002 \u90a3\u4e48\u8fd9\u4e2a\u9012\u63a8\u5c31\u53ef\u4ee5\u76f4\u63a5\u5229\u7528 \u500d\u589e\u4f18\u5316 \u3002 \u6240\u4ee5\u628a \\(k\\) \u4e8c\u8fdb\u5236\u62c6\u5206\uff0c\u679a\u4e3e \\(k\\) \u7684\u6bcf\u4e00\u4f4d\uff0c\u5982\u679c\u5f53\u524d\u4f4d\u662f \\(1\\) \uff0c \u90a3\u4e48\u7ed9\u6bcf\u4e00\u4e2a \\(dest\\) \u8df3 \\(2^j\\) \u6b65\uff0c \\(j\\) \u662f\u5f53\u524d\u4f4d\u3002 \u521d\u59cb\u5316 \\(to[i][0] = p[i]\\) \u3002 \u5bf9\u4e8e\u56e0\u4e3a \\(p[i]\\) \u6709\u91cd\u590d\u7684\uff0c\u6240\u4ee5 \\(dest[i]\\) \u4e5f\u5fc5\u7136\u4f1a\u6709\u91cd\u590d\u7684\u3002 \u5047\u8bbe\u67d0\u4e00\u4e2a\u70b9 \\(i\\) \uff0c\u6709\u4e09\u4e2a\u70b9\uff08\u5b9e\u9645\u4e0a\u4e2a\u6570\u4efb\u610f\uff0c\u6b64\u5904\u4e3e\u4f8b\u9700\u8981\uff09 \\(A, B, C\\) \u53ef\u4ee5\u7ecf\u8fc7 \\(k\\) \u8f6e\u5230\u8fbe\u5b83\uff0c \u90a3\u4e48\u7559\u5728\u8fd9\u4e2a\u5730\u65b9\u7684\uff08 \\(b[i]\\) \uff09\u5fc5\u7136\u662f\u8fd9\u4e09\u70b9\u8fc7\u6765\u7684\u5b66\u751f\u5f53\u4e2d\u7f16\u53f7\u6700\u5c0f\u7684\uff0c \u6240\u4ee5\u6700\u5f00\u59cb\uff08 \\(k = 0\\) \uff09\u7684\u65f6\u5019\uff0c \\(A, B, C\\) \u5f53\u4e2d\u5fc5\u7136\u6709\u4e00\u4e2a\u70b9\u7684\u5b66\u751f\u662f \\(b[i]\\) \u3002 \u4e3a\u4e86\u8ba9\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u8003\u8651\u8ba9 \\(A, B, C\\) \u5f53\u4e2d\u7f16\u53f7\u6700\u5c0f\u7684\u4e00\u4e2a\u70b9\u521d\u59cb\u5750\u4e0a \\(b[i]\\) \uff0c\u4e5f\u5c31\u662f\u8ba9\u8fd9\u4e2a\u70b9\u7684 \\(a = b[i]\\) \u3002 \u7136\u540e\u73b0\u5728\u5c31\u5df2\u7ecf\u586b\u597d\u4e86\u4e00\u4e9b\u70b9\u3002 \u7ef4\u62a4\u5269\u4e0b\u7684\uff0c\u7f16\u53f7\u5728 \\(1 \\sim n\\) \u5f53\u4e2d\u7684\u5b66\u751f\u96c6\u5408 \\(S\\) \uff08\u4e3a\u4ec0\u4e48\u662f \\(1 \\sim n\\) \u539f\u56e0\u663e\u7136\uff09\u3002 \u7136\u540e\u4ece\u524d\u5f80\u540e\u626b\u63cf \\(a\\) \u5f53\u4e2d\u6240\u6709\u8fd8\u6ca1\u6709\u7b54\u6848\u7684\u70b9\uff0c\u5bf9\u4e8e\u5f53\u4e2d\u7684\u67d0\u4e00\u4e2a\u70b9 \\(i\\) \uff0c\u5b83\u7ecf\u8fc7 \\(k\\) \u8f6e\u53bb\u5230\u7684\u5730\u65b9\u662f \\(dest[i]\\) \u3002 \u90a3\u4e48\u5b83\u7684 \\(a[i]\\) \u5fc5\u7136\u8981\u5927\u4e8e\u6240\u6709 \\(dest = dest[i]\\) \u7684\u70b9\u5f53\u4e2d\u7f16\u53f7\u6700\u5c0f\u7684\u90a3\u4e2a\u70b9\u521d\u59cb\u7684 \\(a\\) \uff0c\u4e5f\u5c31\u662f \\(b[dest[i]]\\) \u3002 \u6240\u4ee5\u5728\u96c6\u5408 \\(S\\) \u5f53\u4e2d\u4e8c\u5206\u4e00\u4e2a\u5927\u4e8e \\(b[dest[i]]\\) \u7684\uff0c\u6700\u5c0f\u7684\u70b9\u586b\u4e0a\u53bb\u5c31\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 #include <set> #include <cmath> #include <bitset> #include <cstring> #include <iostream> #include <algorithm> #include <unordered_set> using namespace std ; const int si = 1e5 + 10 ; int n ; int a [ si ], b [ si ], p [ si ]; int t [ si ][ 51 ]; int dest [ si ]; int tmp [ si ]; int main () { cin >> n ; int mx = -1 ; bitset < si > vis ; for ( int i = 1 ; i <= n ; ++ i ) cin >> p [ i ], vis [ p [ i ]] = true ; for ( int i = 1 ; i <= n ; ++ i ) cin >> b [ i ], mx = max ( mx , b [ i ]); int k = ( mx - n ) / ( n - vis . count ()); // int k = (*max_element(b + 1, b + 1 + n) - n) / (n - unordered_set<int>(p + 1, p + 1 + n).size()); int lg = ( int )( log ( k ) / log ( 2 )) + 1 ; cerr << k << \" \" << lg << endl ; for ( int i = 1 ; i <= n ; ++ i ) t [ i ][ 0 ] = p [ i ]; for ( int j = 1 ; j <= lg ; ++ j ) { for ( int i = 1 ; i <= n ; ++ i ) { t [ i ][ j ] = t [ t [ i ][ j - 1 ]][ j - 1 ]; } } for ( int i = 1 ; i <= n ; ++ i ) dest [ i ] = i ; for ( int j = lg ; j >= 0 ; -- j ) { if ( k >> j & 1 ) { for ( int i = 1 ; i <= n ; ++ i ) { dest [ i ] = t [ dest [ i ]][ j ]; if ( t [ dest [ i ]][ j ] == 0 ) cerr << \"Error on #\" << i << \", \" << j << endl ; } } } // for(int i = 1; i <= n; ++i) cout << dest[i] << endl; sort ( p + 1 , p + 1 + n ); int m = unique ( p + 1 , p + 1 + n ) - p - 1 ; // cout << m << endl; // for(int i = 1; i <= m; ++i) cout << p[i] << endl; memset ( a , 0x3f , sizeof a ); memset ( tmp , 0x3f , sizeof tmp ); set < int > rest ; for ( int i = 1 ; i <= n ; ++ i ) { if ( tmp [ dest [ i ]] == 0x3f3f3f3f ) tmp [ dest [ i ]] = i ; rest . insert ( i ); } // for(int i = 1; i <= n; ++i) cout << tmp[i] << endl; for ( int i = 1 ; i <= m ; ++ i ) { if ( tmp [ p [ i ]] == 0x3f3f3f3f ) continue ; a [ tmp [ p [ i ]]] = b [ p [ i ]]; // cerr << b[p[i]] << \"$\"; auto pos = rest . find ( b [ p [ i ]]); if ( pos == rest . end ()) cerr << \"Error\" ; rest . erase ( pos ); } for ( int i = 1 ; i <= n ; ++ i ) { if ( a [ i ] == 0x3f3f3f3f ) { auto pos = rest . lower_bound ( b [ dest [ i ]]); // cerr << b[dest[i]] << \"#\"; if ( pos == rest . end ()) cerr << \"Error\" ; a [ i ] = * pos , rest . erase ( pos ); } } for ( int i = 1 ; i <= n ; ++ i ) cout << a [ i ] << \" \" ; cout << endl ; return 0 ; } 1 Tag : \u500d\u589e / \u56fe\u8bba","title":"CF1647E Madoka and the Sixth-graders"},{"location":"rec/atcf-for-2022-03/#cf1650g-counting-shortcuts","text":"Mar/24/2022 \u7ed9\u5b9a\u4e00\u5f20\u65e0\u6743\u65e0\u5411\u56fe\uff0c\u95ee\u9898\u4ece\u67d0\u4e2a\u70b9 \\(s\\) \u5230\u67d0\u4e2a\u70b9 \\(t\\) \u7684\u597d\u8def\u5f84\u7684\u6761\u6570\u5bf9 \\(1e9+7\\) \u53d6\u6a21\u3002 \u4e00\u4e2a\u8def\u5f84\u662f\u597d\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e2a\u8def\u5f84\u7684\u957f\u5ea6\u548c \\(s,t\\) \u4e4b\u95f4\u7684\u6700\u77ed\u8def\u7684\u957f\u5ea6\u5dee\u4e0d\u8d85\u8fc7 \\(1\\) \u3002 \\(n,m\\) 2e5\u3002 \u9996\u5148\u8003\u8651\u6c42\u51fa \\(s\\) \u51fa\u53d1\u5230\u6bcf\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u3002 \u7136\u540e DP \u5373\u53ef\u3002 \u65b9\u7a0b\u6bd4\u8f83\u663e\u7136\uff0c\u76f4\u63a5\u770b\u4ee3\u7801\u5373\u53ef\uff1a Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 dijkstra ( s ); // Bfs(s), ReBfs(s); vector < pair < int , int > > Dis ; for ( int i = 1 ; i <= n ; ++ i ) { Dis . push_back ({ dis [ i ], i }); dp [ i ][ 0 ] = dp [ i ][ 1 ] = 0 ; } sort ( Dis . begin (), Dis . end ()); dp [ s ][ 0 ] = 1 , dp [ s ][ 1 ] = 0 ; for ( auto x : Dis ) { int u = x . second ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( dis [ u ] == dis [ v ] + 1 ) dp [ u ][ 0 ] = ( dp [ u ][ 0 ] + dp [ v ][ 0 ]) % mod ; } } for ( auto x : Dis ) { int u = x . second ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( dis [ u ] == dis [ v ] + 1 ) dp [ u ][ 1 ] = ( dp [ v ][ 1 ] + dp [ u ][ 1 ]) % mod ; else if ( dis [ u ] == dis [ v ]) dp [ u ][ 1 ] = ( dp [ v ][ 0 ] + dp [ u ][ 1 ]) % mod ; } } cout << ( dp [ t ][ 0 ] + dp [ t ][ 1 ]) % mod << endl ; 1 Tag : DP / \u56fe\u8bba / \u6700\u77ed\u8def","title":"CF1650G Counting Shortcuts"},{"location":"rec/atcf-for-2022-03/#cf1654e-arithmetic-operations","text":"Mar/21/2022 \u7ed9\u4e00\u4e2a\u6570\u5217 \\(a\\) \uff0c\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u4efb\u610f\u4fee\u6539\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e00\u4e2a\u6570\uff0c\u4fee\u6539\u540e\u7684\u6570\u53ef\u4ee5\u662f\u6b63\u6574\u6570\uff0c\u8d1f\u6574\u6570\u548c\u96f6\u3002 \u95ee\u4f7f\u5f97 \\(a\\) \u6210\u4e3a\u7b49\u5dee\u6570\u5217\u7684\u6700\u5c0f\u7684\u64cd\u4f5c\u6b21\u6570\u3002 1e5\u3002 \u628a\u6bcf\u4e2a\u5143\u7d20\u770b\u6210\u4e00\u4e2a\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684\u70b9 \\((i,a_i)\\) \u3002 \u7136\u540e\u8981\u6c42\u7684\u53ef\u4ee5\u8f6c\u5316\u4e3a\u6c42\u8fd9\u4e2a\u5e73\u9762\u4e0a\u6700\u591a\u6709\u591a\u5c11\u4e2a\u70b9\u5171\u7ebf\uff0c\u7136\u540e\u7528 \\(n\\) \u51cf\u53bb\u8fd9\u4e2a\u503c\u5373\u53ef\u3002 \u4e5f\u5c31\u662f\u628a\u7b49\u5dee\u6570\u5217\u8f6c\u6362\u6210\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e0a\u7684\u4e00\u6761\u76f4\u7ebf\u3002 \u4f46\u662f\u8fd9\u4e2a\u4e1c\u897f\u597d\u50cf\u662f\u6839\u53f7\u5206\u6cbb\uff0c\u4e0d\u4f1a\uff0c\u6240\u4ee5\u5148\u7a7a\u7740\u4e86\u3002","title":"CF1654E Arithmetic Operations"},{"location":"rec/atcf-for-2022-03/#cf1657f-words-on-tree","text":"Mar/24/2022 \u7ed9\u4e00\u68f5\u6811\uff0c\u7ed9 \\(q\\) \u4e2a\u4e09\u5143\u7ec4 \\((x_i,y_i,s_i)\\) \uff0c \\(x_i,y_i\\) \u662f\u8282\u70b9\u7f16\u53f7\uff0c \\(s_i\\) \u662f\u5b57\u7b26\u4e32\uff0c\u957f\u5ea6\u548c\u6811\u4e0a \\((x_i,y_i)\\) \u7684\u7b80\u5355\u8def\u5f84\u957f\u5ea6\u4e00\u81f4\u3002 \u6784\u9020\u4e00\u68f5\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u4e0a\u6709\u4e00\u4e2a\u5b57\u7b26\uff0c\u4f7f\u5f97\u5b83\u6ee1\u8db3\u8fd9 \\(q\\) \u4e2a\u4e09\u5143\u7ec4\u7684\u7ea6\u675f\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4e09\u5143\u7ec4\uff0c\u9700\u8981\u6ee1\u8db3\uff0c\u8def\u5f84 \\((x_i,y_i)\\) \u4e0a\u7684\u5b57\u7b26\u4e32\u8981\u4e48\u662f \\(s_i\\) \uff0c\u8981\u4e48\u662f \\(reverse(s_i)\\) \u3002 9s, 4e5\u3002 \u8003\u8651\u66b4\u529b 2-SAT\u3002 \u4f46\u662f\u8fd9\u6837\u6bcf\u4e2a\u8282\u70b9\u7684\u5019\u9009\u503c\u6709 26 \u4e2a\uff0c\u6ca1\u6cd5\u505a\u3002 \u90a3\u4e48\u628a\u6bcf\u4e2a\u4e09\u5143\u7ec4\u8fd9\u6837\u5904\u7406\uff1a \u628a \\(s_i\\) \u653e\u5230\u8fd9\u4e2a\u8def\u5f84\u4e0a\uff0c\u7136\u540e\u628a \\(rev(s_i)\\) \u653e\u5230\u8fd9\u4e2a\u8def\u5f84\u4e0a\u3002 \u7136\u540e\u5c31\u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2a\u8282\u70b9\u7684\u5019\u9009\u96c6\u5408\u5927\u5c0f\u6700\u5927\u4e3a \\(2\\) \u3002 \uff08\u5bf9\u6bcf\u4e2a\u8282\u70b9\uff0c\u5bf9\u7ecf\u8fc7\u5b83\u7684\u4e09\u5143\u7ec4\u7559\u4e0b\u7684\u5019\u9009\u96c6\u5408\u6c42\u4ea4\u5c31\u53ef\u4ee5\u5f97\u5230\uff09 \u7136\u540e\u5c31\u53ef\u4ee5 2-SAT \u4e86\u3002 \u4f46\u662f\u8fd9\u6837\u76f4\u63a5\u5b9e\u73b0\u4f1a\u975e\u5e38\u590d\u6742\u3002 \u8003\u8651\u662f\u5426\u5b58\u5728\u53e6\u5916\u4e00\u79cd\u66f4\u597d\u7684\u5199\u6cd5\u3002 \u626b\u63cf\u6bcf\u4e00\u4e2a\u4e32\uff0c\u7136\u540e\u5185\u5c42\u626b\u63cf\u8def\u5f84\u4e0a\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u5f53\u524d\u8282\u70b9\u6ca1\u6709\u5019\u9009\u96c6\u5408\uff0c\u7ed9\u4ed6\u52a0\u4e0a\u3002 \u7136\u540e\u8003\u8651\u8fd9\u6837\u7684\u4e00\u4e2a\u8fc7\u7a0b\uff1a 1 2 3 4 5 cand [ i ][ 0 ] cand [ i ][ 1 ] ( \u5f53\u524d\u8282\u70b9\u7684\u5019\u9009\u96c6\u5408 ) s [ j ] s [ len - j - 1 ] ( rev ( s )[ j ]) ( \u5f53\u524d\u626b\u63cf\u5230\u7684\u4e32\u5728\u8fd9\u4e2a\u70b9\u7684\u5019\u9009\u96c6\u5408 ) \u5982\u679c \\(s_j\\) \u4e0d\u7b49\u4e8e \\(cand[i][0]\\) \uff0c\u90a3\u4e48\u8bc1\u660e\u9009 \\(s[j]\\) \u5c31\u4e0d\u80fd\u9009 \\(cand[i][0]\\) \u3002 \u6240\u4ee5\u8fde\u63a5 \\(s[j] \\to cand[i][1]\\) \uff0c\u7136\u540e\u628a\u5bf9\u5e94\u7684\u9006\u5426\u547d\u9898 \\(cand[i][0] \\to s[len-j-1]\\) \u94fe\u63a5\u4e0a\u3002 \u5176\u5b83\u4e09\u79cd\u60c5\u51b5\u540c\u7406\u3002 \u8fd9\u4e2a\u65f6\u5019\u518d\u8dd1 2-SAT \u5c31\u53ef\u4ee5\u4e86\u3002 \u56e0\u4e3a\u65f6\u9650 \\(9s\\) \u6240\u4ee5\u968f\u4fbf\u641e\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 #include <cmath> #include <stack> #include <vector> #include <cstring> #include <iostream> #include <algorithm> #define c0 qwq #define c1 qaq using namespace std ; const int si = 16 * ( 1e5 + 10 ); int n , q ; int head [ si ], tot = 0 ; struct Edge { int ver , Next ; } e [ si << 1 ]; inline void add ( int u , int v ) { e [ tot ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot ++ ; } int dep [ si ], f [ si ][ 20 ]; int lg ; void dfs ( int u , int fa ) { dep [ u ] = dep [ fa ] + 1 , f [ u ][ 0 ] = fa ; for ( int i = 1 ; i <= lg ; ++ i ) f [ u ][ i ] = f [ f [ u ][ i -1 ]][ i -1 ]; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs ( v , u ); } } int Lca ( int u , int v ) { if ( dep [ u ] < dep [ v ]) swap ( u , v ); for ( int i = lg ; i >= 0 ; -- i ) if ( dep [ f [ u ][ i ]] >= dep [ v ]) u = f [ u ][ i ]; if ( u == v ) return u ; for ( int i = lg ; i >= 0 ; -- i ) if ( f [ u ][ i ] != f [ v ][ i ]) u = f [ u ][ i ], v = f [ v ][ i ]; return f [ u ][ 0 ]; } vector < int > G [ si ]; inline void Add ( int u , int v ) { G [ u ]. emplace_back ( v ); } int tim = 0 ; int dfn [ si ], low [ si ]; stack < int > s ; bool ins [ si ]; int cnt = 0 ; int c [ si ]; void tarjan ( int u ) { dfn [ u ] = low [ u ] = ++ tim ; s . push ( u ), ins [ u ] = true ; for ( int v : G [ u ]) { if ( ! dfn [ v ]) tarjan ( v ), low [ u ] = min ( low [ u ], low [ v ]); else if ( ins [ v ]) low [ u ] = min ( low [ u ], dfn [ v ]); } if ( dfn [ u ] == low [ u ]) { int x ; ++ cnt ; do { x = s . top (), s . pop (); c [ x ] = cnt , ins [ x ] = false ; } while ( u != x ); } } int m ; char cand [ si ][ 2 ]; inline int Node ( int u , bool op ) { if ( op ) return u ; else return u + ( n + m ); } int main () { cin >> n >> q , lg = ( int )( log ( n ) / log ( 2 )) + 1 ; memset ( head , -1 , sizeof head ); memset ( ins , false , sizeof ins ); for ( int i = 1 ; i < n ; ++ i ) { int u , v ; cin >> u >> v ; add ( u , v ), add ( v , u ); } dfs ( 1 , 0 ); int now = 0 ; m = q ; while ( q -- ) { ++ now ; int u , v ; string s ; cin >> u >> v , cin >> s ; int len = ( int ) s . size (); int lca = Lca ( u , v ); vector < int > path , tmp ; while ( u != lca ) path . emplace_back ( u ), u = f [ u ][ 0 ]; path . emplace_back ( lca ); while ( v != lca ) tmp . emplace_back ( v ), v = f [ v ][ 0 ]; reverse ( tmp . begin (), tmp . end ()); for ( auto x : tmp ) path . emplace_back ( x ); // for(auto x : path) cout << x << ' '; cout << endl; for ( int i = 0 ; i < len ; ++ i ) { int x = path [ i ]; char c0 = s [ i ], c1 = s [ len - i - 1 ]; if ( ! cand [ x ][ 0 ] && ! cand [ x ][ 1 ]) cand [ x ][ 0 ] = c0 , cand [ x ][ 1 ] = c1 ; if ( cand [ x ][ 0 ] != c0 ) { Add ( Node ( now , 0 ), Node ( x + m , 1 )); Add ( Node ( x + m , 0 ), Node ( now , 1 )); } if ( cand [ x ][ 1 ] != c0 ) { Add ( Node ( now , 0 ), Node ( x + m , 0 )); Add ( Node ( x + m , 1 ), Node ( now , 1 )); } if ( cand [ x ][ 0 ] != c1 ) { Add ( Node ( now , 1 ), Node ( x + m , 1 )); Add ( Node ( x + m , 0 ), Node ( now , 0 )); } if ( cand [ x ][ 1 ] != c1 ) { Add ( Node ( now , 1 ), Node ( x + m , 0 )); Add ( Node ( x + m , 1 ), Node ( now , 0 )); } } } for ( int i = 1 ; i <= 2 * ( n + m ); ++ i ) { if ( ! dfn [ i ]) tarjan ( i ); } for ( int i = 1 ; i <= n ; ++ i ) { if ( ! cand [ i ][ 0 ]) cand [ i ][ 0 ] = cand [ i ][ 1 ] = 'a' ; } for ( int i = 1 ; i <= n + m ; ++ i ) { if ( c [ Node ( i , 0 )] == c [ Node ( i , 1 )]) return puts ( \"NO\" ), 0 ; } puts ( \"YES\" ); for ( int i = 1 ; i <= n ; ++ i ) { putchar ( cand [ i ][ c [ Node ( i + m , 0 )] > c [ Node ( i + m , 1 )] ] ); } puts ( \"\" ); return 0 ; } 1 Tag : LCA / \u601d\u7ef4 / 2 - SAT","title":"CF1657F Words On Tree"},{"location":"rec/atcf-for-2022-03/#cf1656d-k-good","text":"Mar/25/2022 \u4e00\u4e2a\u6b63\u6574\u6570 \\(n\\) \u662f \\(k\\) Good \u7684\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(n\\) \u53ef\u4ee5\u88ab\u5206\u6210 \\(k\\) \u4e2a\u4e0d\u540c\u6b63\u6574\u6570\u7684\u548c\uff0c\u4e14\u8fd9 \\(k\\) \u4e2a\u6b63\u6574\u6570\u6a21 \\(k\\) \u610f\u4e49\u4e0b\u76f8\u4e92\u4e0d\u540c\u4f59\u3002 \u7ed9\u5b9a \\(n\\) \uff081e18\uff09\uff0c\u6c42\u51fa\u4efb\u610f\u4e00\u4e2a\u5408\u6cd5\u7684\uff0c \\(\\ge 2\\) \u7684 \\(k\\) \uff0c\u4f7f\u5f97 \\(n\\) \u662f \\(k\\) Good \u7684\u3002 \u8003\u8651\u628a \\(n\\) \u6309\u7167 \\(1,2,3,4,\\dots\\) \u7684\u65b9\u5f0f\u644a\u5230 \\(k\\) \u4e2a\u5730\u65b9\uff0c\u7136\u540e\u628a\u5269\u4e0b\u7684\u503c\u52a0\u4e0a\uff0c\u4f7f\u5f97\u6761\u4ef6\u6210\u7acb\u3002 \u7136\u540e\u53ef\u4ee5\u5217\u51fa\u4e00\u4e2a\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\uff1a \\(n \\equiv \\dfrac{k(k+1)}{2} (\\operatorname{mod} k)\\) \u3002 \u7136\u540e\u53d1\u73b0 \\(n\\) \u8fd8\u8981\u6ee1\u8db3 \\(\\ge \\dfrac{k(k+1)}{2}\\) \u624d\u53ef\u4ee5\u3002 \u6240\u4ee5\u73b0\u5728\u5c31\u5f97\u5230\u4e86\u5224\u5b9a\u7684\u4e24\u4e2a\u6761\u4ef6\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c \\(2^k\\) \u5f62\u5f0f\u7684\u6570\u5fc5\u7136\u65e0\u89e3\uff0c\u5176\u4ed6\u5fc5\u7136\u6709\u89e3\u3002 \u5947\u6570\u76f4\u63a5\u4ee4 \\(k = 2\\) \u5373\u53ef\u3002 \u7136\u540e\u6709\u4e00\u4e2a\u6211\u8fd8\u6682\u65f6\u4e0d\u4f1a\u8bc1\u660e\u7684\u7ed3\u8bba\u3002 \u6392\u9664\u5b8c\u65e0\u89e3\u60c5\u51b5\u4e4b\u540e\u3002 \u628a\u4e00\u4e2a\u6570\u7684\u6240\u6709 \\(2\\) \u56e0\u5b50\u63d0\u51fa\u6765\u7ec4\u6210 \\(2^k\\) \u3002 \u7136\u540e\u7b54\u6848\u5fc5\u7136\u662f \\(2^{k+1}\\) \u548c \\(\\dfrac{n}{2^k}\\) \u7684\u6700\u5c0f\u503c\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #include <cmath> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; using i64 = long long ; using i128 = __uint128_t ; int T ; inline i64 solve ( i64 n ) { i64 tmp = n ; i64 cnt = 1 ; while ( tmp % 2l l == 0l l ) { tmp /= 2l l , cnt *= 2 ; } if ( tmp == 1l l ) return -1ll ; return min ( tmp , 2 * cnt ); } int main () { cin >> T ; while ( T -- ) { i64 n ; cin >> n ; cout << solve ( n ) << endl ; } return 0 ; } 1 Tag : \u6570\u5b66 / \u6570\u8bba / \u540c\u4f59","title":"CF1656D K-good"},{"location":"rec/atcf-for-2022-03/#cf1656e-equal-tree-sums","text":"\u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u8981\u6c42\u4f60\u7ed9\u6bcf\u4e2a\u8282\u70b9\u4e00\u4e2a\u6743\u503c\uff0c\u4f7f\u5f97\u53bb\u6389\u6811\u4e2d\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u4e4b\u540e\uff0c \u4efb\u610f\u4e24\u4e2a\u8fde\u901a\u5757\u4e4b\u5185\u7684\u548c\u662f\u76f8\u7b49\u7684\u3002 1e5\u3002 Mar/25/2022 \u7ed3\u8bba\uff1a\u9ed1\u767d\u67d3\u8272\uff0c\u4e00\u79cd\u989c\u8272\u7684\u8282\u70b9\u8d4b\u503c\u4e3a \\(-deg(u)\\) \uff0c\u53e6\u5916\u4e00\u79cd \\(+deg(u)\\) \u3002 \u8003\u8651\u4e00\u4e2a\u70b9\u5bf9\u4e8e\u548c\u5b83\u76f8\u8fde\u7684\u6240\u6709\u9876\u70b9\uff0c\u5728\u5220\u9664\u4e4b\u540e\u505a\u7684\u8d21\u732e\u5373\u53ef\u3002 \u66f4\u597d\u4e00\u70b9\u7684\u8bc1\u660e\uff1a Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int si = 1e5 + 10 ; int n , T ; int head [ si ], tot = 0 ; struct Edge { int ver , Next ; } e [ si << 1 ]; int deg [ si ]; inline void add ( int u , int v ) { e [ tot ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot ++ ; } int c [ si ]; void dfs ( int u , int fa , int col ) { if ( c [ u ] != -1 ) return ; c [ u ] = col ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs ( v , u , 1 - col ); } } int main () { cin >> T ; while ( T -- ) { cin >> n ; memset ( c , -1 , sizeof c ), memset ( deg , 0 , sizeof deg ); tot = 0 , memset ( head , -1 , sizeof head ); for ( int i = 1 ; i < n ; ++ i ) { int u , v ; cin >> u >> v ; add ( u , v ), add ( v , u ); ++ deg [ u ], ++ deg [ v ]; } dfs ( 1 , 0 , 1 ); for ( int i = 1 ; i <= n ; ++ i ) { if ( c [ i ] == 0 ) cout << - deg [ i ] << \" \" ; else cout << deg [ i ] << \" \" ; } cout << endl ; } return 0 ; } 1 Tag : \u56fe\u8bba / \u601d\u7ef4","title":"CF1656E Equal Tree Sums"},{"location":"rec/atcf-for-2022-03/#abc243f-lottery","text":"Mar/25/2022 Takahashi is participating in a lottery. Each time he takes a draw, he gets one of the \\(N\\) prizes available. Prize \\(i\\) is awarded with probability \\(\\dfrac{w_i}{\\sum^{N}_{j=1} w_j}\\) , The results of the draws are independent of each other. What is the probability that he gets exactly \\(M\\) different prizes from \\(K\\) draws? Find it modulo \\(998244353\\) . \\(1\\le N,M,K \\le 50\\) \u3002 \\(M \\le N\\) \u3002 \u5b9a\u4e49 \\(P(i) = \\dfrac{w_i}{\\sum^{N}_{j=1} w_j}\\) \u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u79cd\u5143\u7d20\u88ab\u9009\u4e86 \\(c_i\\) \u6b21\uff0c\u90a3\u4e48\u5b83\u7684\u6982\u7387\u5c31\u662f \\(P(i)^{c_i}\\) \u7136\u540e\u8003\u8651\u7528\u53ef\u91cd\u96c6\u7684\u6392\u5217\u6570\u516c\u5f0f\u7b97\u3002 \u4f46\u662f\u8fd9\u91cc\u8981\u7a0d\u5fae\u9b54\u6539\u4e00\u4e0b\u3002 \u90a3\u4e48\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u67ff\u5b50\uff1a \\[\\dfrac{K!}{\\prod\\limits_{i = 1}^{N} c_i!} \\times \\prod\\limits_{i=1}^{N} P(i)^{c_i}, \\sum c_i = K, |\\{i\\ |\\ c_i \\not= 0\\}|=M\\] \u8fd9\u4e2a\u5c31\u662f\u7b54\u6848\u3002 \u5176\u4e2d \\(c_i\\) \u8868\u793a \\(i\\) \u8fd9\u79cd\u7269\u54c1\u88ab\u9009\u4e86\u591a\u5c11\u6b21\uff0c\u53ef\u4ee5\u662f \\(0\\) \u3002 \\(K!\\) \u662f\u5e38\u6570\uff0c\u6240\u4ee5\u63d0\u51fa\u6765\uff1a \\[K!\\times \\dfrac{\\prod\\limits_{i=1}^{N} P(i)^{c_i}}{\\prod\\limits_{i = 1}^{N} c_i!}\\] \u53d1\u73b0\u540e\u9762\u8fd9\u4e2a\u90e8\u5206\u53ef\u4ee5\u5316\u6210 \\[\\prod\\limits_{i = 1}^{n} \\dfrac{P(i)^{c_i}}{c_i}\\] \u5fc5\u7136\u53ef\u4ee5\u9012\u63a8\u3002 \u7136\u540e\u8bbe \\(dp[i][j][k]\\) \u8868\u793a \\(N = i, M = j, K = k\\) \u7684\u65f6\u5019\u7684\u8fd9\u4e2a\u4e1c\u897f\u3002 \u8003\u8651\u679a\u4e3e\u6bcf\u4e00\u79cd\u7269\u54c1\u9009\u591a\u5c11\u4e2a\u5373\u53ef\u8f6c\u79fb\u3002 \u590d\u6742\u5ea6 \\(\\text{O}(NMK^2)\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 #include <cstring> #include <iostream> #include <algorithm> using namespace std ; using i64 = long long ; const int si = 50 + 10 ; constexpr int mod = 998244353 ; int N , M , K ; i64 dp [ si ][ si ][ si ]; i64 fact [ si ]; int w [ si ], sum = 0 ; inline i64 qpow ( i64 a , int b ) { i64 ans = 1 % mod ; for (; b ; b >>= 1 ) { if ( b & 1 ) ans = ans * a % mod ; a = a * a % mod ; } return ans ; } inline i64 inv ( int a ) { return qpow ( a , mod - 2 ) % mod ; } int p [ si ]; int main () { cin >> N >> M >> K ; for ( int i = 1 ; i <= N ; ++ i ) { cin >> w [ i ]; sum += w [ i ]; } fact [ 0 ] = 1 ; for ( int i = 1 ; i <= K ; ++ i ) { fact [ i ] = fact [ i - 1 ] * i * 1l l % mod ; } for ( int i = 1 ; i <= N ; ++ i ) { p [ i ] = (( 1l l * w [ i ] % mod ) * inv ( sum )) % mod ; } dp [ 0 ][ 0 ][ 0 ] = 1 ; for ( int i = 1 ; i <= N ; ++ i ) { for ( int j = 0 ; j <= M ; ++ j ) { for ( int k = 0 ; k <= K ; ++ k ) { for ( int c = 0 ; c <= k ; ++ c ) { if ( j - ( c > 0 ) >= 0 ) dp [ i ][ j ][ k ] = ( dp [ i ][ j ][ k ] + dp [ i - 1 ][ j - ( c > 0 )][ k - c ] * qpow ( p [ i ], c ) % mod * inv ( fact [ c ]) % mod ) % mod ; } } } } cout << dp [ N ][ M ][ K ] * fact [ K ] % mod << endl ; return 0 ; } 1 Tag : \u7ec4\u5408\u6570\u5b66 / DP / \u9012\u63a8","title":"ABC243F Lottery"},{"location":"rec/atcf-for-2022-04/","text":"\u56db\u6708\u597d\u9898\u6539\u9519 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e00\u4e2a\u5355\u72ec\u7684trick MJC \u544a\u8bc9\u6211\uff1a\u7ea6\u675f\u5173\u7cfb\u5f88\u96be\u5904\u7406\u7684\u65f6\u5019\uff0c\u4e0d\u662f\u5e76\u67e5\u96c6\u5c31\u662f\u8fde\u8fb9\u3002 CF1668D/CF1667B Optimal Partition \u03c8(\uff40\u2207\u00b4)\u03c8 Apr/20/2022 \u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u8981\u6c42\u5c06\u5176\u5206\u6210\u82e5\u5e72\u4e2a\u5b50\u6bb5\u3002 \u5b9a\u4e49 \\(ss(l,r)\\) \u4e3a \\(a_l + a_{l + 1} + a_{l + 2} + \\dots + a_r\\) \u3002 \u6bcf\u4e2a\u5b50\u6bb5 \\(a[l,r]\\) \u7684\u8d21\u732e \\(f(l,r)\\) \u4e3a: \\(r - l + 1\\) \uff0c\u5982\u679c \\(ss(l,r) > 0\\) \\(-(r- l + 1)\\) \uff0c\u5982\u679c \\(ss(l,r) < 0\\) \u3002 \\(0\\) \uff0c\u5982\u679c \\(ss(l,r) = 0\\) \u3002 \u6c42\u4e00\u79cd\u5206\u5272\u65b9\u5f0f\uff0c\u4f7f\u5f97\u88ab\u9009\u51fa\u7684\u5b50\u6bb5\u7684 \\(\\sum f(l,r)\\) \u6700\u5927\u3002 \\(n \\le 5e5\\) \u3002 \u9996\u5148\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u4e00\u4e2a \\(\\text{O}(n^2)\\) \u7684 DP\uff1a \u8bbe \\(dp_{i,j}\\) \u8868\u793a\u524d \\(i\\) \u4e2a\u4f4d\u7f6e\uff0c\u5206\u6210 \\(j\\) \u6bb5\u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u8d21\u732e\u548c\u7684\u6700\u5927\u503c\u3002 \u7136\u540e\u53d1\u73b0\u6570\u7ec4\u5c31\u5df2\u7ecf\u5f00\u4e0d\u4e0b\u4e86\u3002 \u4f46\u662f\u9898\u76ee \u6ca1\u6709\u8981\u6c42\u4f60\u5177\u4f53\u8981\u5206\u591a\u5c11\u6bb5\uff0c\u4efb\u610f\u5206\u5272\u6210\u591a\u5c11\u6bb5\u90fd\u662f\u53ef\u4ee5\u7684 \u3002 \u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u201d\u4efb\u52a1\u5b89\u63921\u201c \u5f53\u4e2d\u7528\u5230\u7684\u601d\u60f3\u3002 \u4efb\u52a1\u5b89\u63921 \u662f\u8bbe \\(dp_{i}\\) \u8868\u793a\u5c06\u524d \\(i\\) \u4e2a\u4efb\u52a1\u5206\u6210\u82e5\u5e72\u6279\u6b21\u5904\u7406\u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u603b\u65f6\u95f4\u82b1\u8d39\u7684\u6700\u5c0f\u503c\u3002 \u90a3\u4e48\u672c\u9898\uff0c\u6211\u4eec\u5c31\u8bbe \\(dp_i\\) \u8868\u793a\u5c06\u524d \\(i\\) \u4e2a\u4f4d\u7f6e\u5206\u6210\u82e5\u5e72\u4e2a\u5b50\u6bb5\u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u603b\u8d21\u732e\u7684\u6700\u5927\u503c\u3002 \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5 \u53ea\u8003\u8651\u6700\u540e\u4e00\u6bb5\u662f\u4ec0\u4e48 \uff0c\u8fd9\u4e5f\u6070\u597d\u662f\u96c6\u5408\u5212\u5206\u7684\u4f9d\u636e\uff1a\u201d\u6700\u540e\u4e00\u4e2a\u4e0d\u540c\u7684\u201c\u3002 \u90a3\u4e48\u679a\u4e3e\u6700\u540e\u4e00\u6bb5\u7684\u8d77\u59cb\u4f4d\u7f6e\u8fdb\u884c\u8f6c\u79fb\u5373\u53ef\u3002 \\[dp_{i} = \\max\\limits_{0\\le j < i}\\{dp_j + f(j+1,i)\\}\\] \u521d\u59cb\u5316 \\(dp_0 = 0\\) \uff0c\u9884\u5904\u7406\u524d\u7f00\u548c \\(s\\) \u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u7136\u662f \\(\\text{O}(n^2)\\) \uff0c\u6240\u4ee5\u8003\u8651\u4f7f\u7528\u5e26 \\(\\log\\) \u7684\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u8f6c\u79fb\u3002 \u5c06 \\(f\\) \u5bf9\u5e94\u7684\u4e09\u79cd\u60c5\u51b5\u5bf9\u5e94\u7684 DP \u5f0f\u5b50 \u62c6\u5f00 \uff08\u7701\u7565\u4e86\u5bf9\u5e94\u60c5\u51b5\u7684\u6761\u4ef6\uff09\uff1a \\[\\begin{cases}dp_i = dp_j \\\\ dp_i = dp_j + (i - j) & s_i > s_j\\\\ dp_i = dp_j - (i - j) & s_i < s_j\\end{cases}\\] \u7136\u540e\u79fb\u9879\uff0c\u628a\u5173\u4e8e\u540c\u4e00\u4e2a\u53d8\u91cf\u7684\u6254\u5230\u4e00\u8d77\uff1a \\[\\begin{cases}dp_i = dp_j \\\\ dp_i - i = dp_j - j & s_i > s_j\\\\ dp_i + i = dp_j + j & s_i < s_j \\end{cases}\\] \u53d1\u73b0\u5728\u6700\u540e\u4e00\u6bb5\u957f\u5ea6\u5927\u4e8e \\(1\\) \u65f6\uff0c\u53ef\u80fd\u6210\u4e3a\u6700\u4f18\u51b3\u7b56\u7684\u53ea\u6709\u7b2c\u4e8c\u4e2a\u5f0f\u5b50\u3002 \u6240\u4ee5\u5148\u5904\u7406\u6700\u540e\u4e00\u6bb5\u957f\u5ea6\u7b49\u4e8e \\(1\\) \u7684\u60c5\u51b5\uff0c\u7136\u540e\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u5f0f\u5b50\u8003\u8651\u4f18\u5316\uff0c\u4e5f\u5c31\u662f\u5982\u4f55\u5feb\u901f\u627e\u5230\u80fd\u8ba9\u7b2c\u4e8c\u4e2a\u5f0f\u5b50\u6700\u4f18\u7684\u4e00\u4e2a\u51b3\u7b56\u3002 \u5728 \\(i\\) \u56fa\u5b9a\u65f6\uff0c \\(i\\) \u662f\u5e38\u91cf\uff0c \\(dp_j,j\\) \u662f\u53d8\u91cf\uff0c\u6240\u4ee5\u51b3\u7b56\u96c6\u5408\u7ef4\u62a4\u7684\u5e94\u5f53\u662f \\(dp_j - j\\) \u7684 \\(\\max\\) \uff0c\u5e76\u4e14 \\(s_j < s_i\\) \u3002 \u90a3\u4e48\u53ea\u9700\u8981\u627e\u5230 \\(s_j < s_i\\) \u4e14 \\(i > j\\) \u7684\u6240\u6709 \\(j\\) \u5f53\u4e2d\u80fd\u4f7f \\(dp_j-j\\) \u53d6\u5230\u6700\u5927\u503c\u7684\u4e00\u4e2a\u8fdb\u884c\u8f6c\u79fb\u5373\u53ef\u3002 \u800c\u6bcf\u6b21 \\(i + 1\\) \u65f6\u51b3\u7b56\u96c6\u5408\u90fd\u53ea\u4f1a\u589e\u52a0 \\(dp_i - i\\) \u8fd9\u4e2a\u5143\u7d20\u3002 \u90a3\u4e48\u8fd9\u4e2a\u9898\u5c31\u53d8\u5f97\u548c The Battle Of Chibi \u90a3\u4e00\u9898\u975e\u5e38\u50cf\u4e86\uff0c\u9700\u8981\u7684\u4fe1\u606f\u662f\uff1a \u67d0\u4e00\u4e2a\u4f4d\u7f6e \\(i\\) \u4e4b\u524d \uff0c \u6240\u6709\u5173\u952e\u7801\u5c0f\u4e8e \\(i\\) \u7684\u5173\u952e\u7801\u7684\u4f4d\u7f6e \\(j\\) \u7684 \\(dp_j - j\\) \u7684\u6700\u5927\u503c\uff08\u4fe1\u606f\uff09\u3002 \u6240\u4ee5\u7528\u540c\u6837\u7684\u601d\u60f3\uff0c\u6211\u4eec\u5c06 \\(s\\) \u4f5c\u4e3a\u5173\u952e\u7801\uff0c \\(dp_i - i\\) \u4f5c\u4e3a\u6743\u503c\u63d2\u5165\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u3002 \u5e76\u4e14\u5728\u51b3\u7b56\u5b8c\u4e4b\u540e\u518d\u63d2\u5165\uff0c\u4ee5\u4fdd\u8bc1 \\(i > j\\) \u7684\u6761\u4ef6\u5728\u6c42 \\(\\min\\) \u65f6\u4ecd\u7136\u88ab\u6ee1\u8db3\u3002 \u8fd9\u91cc\u53ea\u662f\u6c42\u524d\u7f00\u6700\u503c\uff0c\u6240\u4ee5\u6811\u72b6\u6570\u7ec4\u662f\u633a\u65b9\u4fbf\u7684\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \\(\\text{O}(n \\log n)\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 #include <bits/stdc++.h> using namespace std ; using i64 = long long ; const i64 si = 5e5 + 10 ; const i64 inf = 0x3f3f3f3f ; i64 T ; i64 n ; i64 a [ si ], dp [ si ]; i64 sum [ si ], pos [ si ]; i64 t [ si ]; inline i64 lowbit ( i64 x ) { return x & - x ; } void add ( i64 p , i64 x ) { while ( p <= n ) { t [ p ] = max ( t [ p ], x ); p += lowbit ( p ); } } i64 ask ( i64 p ) { i64 res = - inf ; while ( p ) { res = max ( res , t [ p ]); p -= lowbit ( p ); } return res ; } int main () { cin >> T ; while ( T -- ) { std :: vector < pair < i64 , i64 > > v ; cin >> n ; sum [ 0 ] = 0 ; for ( i64 i = 1 ; i <= n ; ++ i ) cin >> a [ i ], sum [ i ] = sum [ i - 1 ] + a [ i ], v . push_back ({ sum [ i ], - i }); sort ( v . begin (), v . end ()); for ( i64 i = 0 ; i < n ; ++ i ) { pos [ - v [ i ]. second ] = i + 1 ; } for ( int i = 0 ; i <= n ; ++ i ) t [ i ] = - inf ; dp [ 0 ] = 0 ; for ( i64 i = 1 ; i <= n ; ++ i ) { i64 preval ; if ( a [ i ] == 0 ) preval = 0 ; if ( a [ i ] > 0 ) preval = 1 ; if ( a [ i ] < 0 ) preval = -1 ; dp [ i ] = dp [ i - 1 ] + preval ; // \u5904\u7406\u6700\u540e\u4e00\u6bb5\u957f\u5ea6\u4e3a 1 \u7684\u60c5\u51b5 dp [ i ] = max ( dp [ i ], ask ( pos [ i ]) + i ); // \u8be2\u95ee\u6700\u4f18\u503c\uff0c\u8f6c\u79fb\u8fc7\u6765 if ( sum [ i ] > 0 ) dp [ i ] = i ; // s[1 ~ i] \u5927\u4e8e\u96f6\uff0c\u6240\u4ee5\u8d21\u732e\u662f i\uff0c\u5fc5\u7136\u662f\u5f53\u524d\u6700\u4f18\u7684\u3002 add ( pos [ i ], dp [ i ] - i ); // \u63d2\u5165\u51b3\u7b56\u96c6\u5408\u3002 } cout << dp [ n ] << endl ; for ( int i = 0 ; i <= n ; ++ i ) dp [ i ] = pos [ i ] = sum [ i ] = a [ i ] = 0 ; } return 0 ; } 1 Tag : DP / \u6570\u636e\u7ed3\u6784\u4f18\u5316DP / \u4e00\u4e2a\u533a\u95f4DP\u7684\u7ecf\u5178\u6a21\u578b CF1672F1 Array Shuffling \u03c8(\uff40\u2207\u00b4)\u03c8 Apr/23/2022 \u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u5b9a\u4e49\u4e00\u4e2a \\(a\\) \u7684\u6392\u5217 \\(b\\) \u7684\u8d21\u732e\u4e3a\uff0c\u901a\u8fc7\u4ea4\u6362 \\(a\\) \u4e2d\u4efb\u610f\u4e24\u4e2a\u6570\u82e5\u5e72\u6b21\uff0c\u5f97\u5230 \\(b\\) \u7684\u6700\u5c0f\u4ea4\u6362\u6b21\u6570\u3002 \u6c42 \\(a\\) \u7684\u6240\u6709\u6392\u5217\u4e2d\u8d21\u732e\u6700\u5927\u7684\u90a3\u4e00\u4e2a\u6392\u5217\uff0c\u5e76\u8f93\u51fa\u3002 \\(n \\le 2e5, a_i, b_i \\in [1, n]\\) \u3002 \u8fd9\u662f\u4e00\u9053\u5173\u4e8e\u7f6e\u6362\u73af\u7684\u7ed3\u8bba\u9898\uff0c\u5728 zhihu \u4e0a\u770b\u5230\u4e86\u4e00\u4e2a\u94fe\u63a5\uff0c\u7ed9\u51fa\u4e86\u8fd9\u4e2a\u7ed3\u8bba\u7684 \u8bc1\u660e \u5047\u8bbe\u539f\u5e8f\u5217 \\(a\\) \u662f\u8fd9\u6837\u7684\uff1a \\[1\\ \\ 1\\ \\ 4\\ \\ 5\\ \\ 1\\ \\ 4\\] \u6392\u5e8f\u540e\u7684 \\(b\\) \u662f\u8fd9\u6837\u7684 \\[1\\ \\ 4\\ \\ 5\\ \\ 1\\ \\ 1\\ \\ 4\\] \u5c06\u4ed6\u4eec\u653e\u5230\u4e00\u8d77\uff1a \\[a= 1\\ \\ 1\\ \\ 4\\ \\ 5\\ \\ 1\\ \\ 4 \\] \\[b = 1\\ \\ 4\\ \\ 5\\ \\ 1\\ \\ 1\\ \\ 4\\] \u53ef\u4ee5\u53d1\u73b0\uff0c \\(a_2\\) \u88ab\u6362\u5230\u4e86\u4f4d\u7f6e \\(4\\) \uff0c \\(a_3\\) \u88ab\u6362\u5230\u4e86\u4f4d\u7f6e \\(2\\) \uff0c \\(a_4\\) \u88ab\u6362\u5230\u4e86\u4f4d\u7f6e \\(3\\) \u3002 \u7528\u7bad\u5934\u8868\u793a\u5c31\u662f\uff1a \\([3]\\to [2], [2] \\to [4],[4] \\to [3]\\) \uff0c\u8fd9\u662f\u4e00\u4e2a\u73af\u72b6\u7ed3\u6784\uff0c\u79f0\u5b83\u4e3a\u201c \u7f6e\u6362\u73af \u201d\u3002 \u5f53\u7136\uff0c\u5982\u679c\u662f\u81ea\u5df1\u6362\u5230\u81ea\u5df1\uff0c\u4e5f\u53ef\u4ee5\u7b97\u4f5c\u4e00\u4e2a\u7f6e\u6362\u73af\uff0c\u6240\u4ee5\u8fd9\u91cc\u7684\u7f6e\u6362\u73af\u8fd8\u6709 \\([1] \\to [1], [5] \\to [5], [6] \\to [6]\\) \u3002 \u4f46\u662f\u5982\u679c\u662f \\(a_1 = a_5 = b_1 = b_5\\) \u8fd9\u79cd\u60c5\u51b5\uff0c \\([1] \\to [5], [5] \\to [1]\\) \u662f\u4e0d\u80fd\u7b97\u4f5c\u4e00\u4e2a\u7f6e\u6362\u73af\u7684\uff0c\u5e94\u5f53\u5355\u72ec\u8003\u8651\u6210 \\([1] \\to [1], [5] \\to [5]\\) \u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c \\(a_i = b_i\\) \uff0c\u90a3\u4e48 \\(i\\) \u4e00\u5b9a\u5904\u4e8e\u81ea\u5df1\u6307\u5411\u81ea\u5df1\u7684\u4e00\u4e2a\u7f6e\u6362\u73af\u4e0a\u3002 \u73b0\u5728\u53c8\u6709\u4e00\u4e2a\u7ed3\u8bba\uff1a \u5bf9\u4e8e\u4e00\u4e2a\u6709 \\(k\\) \u4e2a\u8282\u70b9\u7684\u7f6e\u6362\u73af\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u73af\u4e0a\u7684\u6240\u6709\u4f4d\u7f6e \\(i\\) \uff0c\u7531 \\(a_i \\to b_i\\) \uff0c\u9700\u8981\u7684\u6700\u5c0f\u4ea4\u6362\u6b21\u6570\u662f \\(F=k - 1\\) \u3002 \u53e6\u4e00\u4e2a\u7ed3\u8bba\uff1a \\(a \\to b\\) \u7684\u6700\u5c0f\u4ea4\u6362\u6b21\u6570 \\(F\\) \uff0c\u7b49\u4e8e\u5e8f\u5217\u957f\u5ea6 \\(n\\) \u51cf\u53bb\u7f6e\u6362\u73af\u4e2a\u6570 \\(cnt\\) \u3002 \u8fd9\u4e24\u4e2a\u5f88\u5bb9\u6613\u8bc1\u660e\uff0c\u7b2c\u4e00\u4e2a\u663e\u7136\uff0c\u7b2c\u4e8c\u4e2a\u53ef\u4ee5\u8003\u8651\u53ea\u6709\u4e00\u4e2a\u957f\u5ea6\u5927\u4e8e \\(1\\) \u7684\u73af\uff0c\u5176\u4ed6\u90fd\u662f\u81ea\u73af\u7684\u60c5\u51b5\u3002 \u90a3\u4e48\u5f52\u7eb3\u5c31\u80fd\u8bc1\u660e\uff08\u56e0\u4e3a\u4f60\u53ef\u4ee5\u628a\u5e8f\u5217\u62c6\u5f00\u6765\u770b\u7136\u540e\u5408\u8d77\u6765\uff09\u3002 \u4e0a\u9762\u8bf4\u7684 \\(a_i = b_i\\) \uff0c\u5219 \\(i\\) \u81ea\u5df1\u5f62\u6210\u4e00\u4e2a\u7f6e\u6362\u73af\u7684\u6761\u4ef6\u4e5f\u53ef\u4ee5\u6269\u5c55\u6210\uff1a \u7f6e\u6362\u73af\u4e0a\u4e0d\u80fd\u6709\u4e24\u4e2a \\(a_i = a_j\\) \u7684\u4f4d\u7f6e \\(i,j\\) \u3002 \u5047\u8bbe\u6709\u4e00\u4e2a\u7f6e\u6362\u73af\uff0c\u6362\u4e0a\u7684\u5143\u7d20\u7528\u5b83\u7684\u6743\u503c\u8868\u793a\uff1a \\[5 \\to 1 ,1 \\to 4, 4 \\to 1, 1 \\to 5\\] \u4e5f\u5c31\u662f \\(1 4 1 5\\) \u53d8\u6210 \\(4151\\) \u3002 \u7528\u7ed3\u8bba \\(2\\) \u53ef\u4ee5\u5f97\u5230\u5b83\u7684\u6700\u5c0f\u4ea4\u6362\u6b21\u6570\u662f \\(3\\) \u3002 \u4f46\u662f\uff0c\u5b9e\u9645\u4e0a\u53ea\u9700\u8981\u4ea4\u6362 \\([2],[1]\\) \uff0c\u7136\u540e\u4ea4\u6362 \\([3],[4]\\) \uff0c\u53ea\u9700\u8981 \\(2\\) \u6b21\u5c31\u53ef\u4ee5\u4e86\u3002 \u6240\u4ee5 \u7f6e\u6362\u73af\u4e0a\u4e0d\u80fd\u6709\u6743\u503c\u76f8\u540c\u7684\u5143\u7d20 \u3002 \u597d\uff0c\u90a3\u4e48\u73b0\u5728\u6765\u770b\u8fd9\u9053\u9898\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u8981\u4f60\u6c42\u51fa\u4f7f\u5f97 \\(F\\) \u6700\u5927\u7684\u90a3\u4e00\u4e2a\u6392\u5217\u3002 \u5199\u51fa\u5f0f\u5b50\uff1a \\(F = n - cnt\\) \uff0c \\(n\\) \u662f\u5e38\u6570\uff0c\u6240\u4ee5\u8ba9 \\(cnt\\) \u5c3d\u91cf\u5c0f\u5373\u53ef\u3002 \u800c\u7f6e\u6362\u73af\u4e0a\u4e0d\u80fd\u6709\u6743\u503c\u76f8\u540c\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u6bcf\u6b21\u9009\u53d6\u5c3d\u53ef\u80fd\u591a\u7684\u4e0d\u540c\u5143\u7d20\u6784\u9020\u4e00\u4e2a\u7f6e\u6362\u73af\uff0c\u7136\u540e\u628a\u88ab\u9009\u4e2d\u7684\u8fd9\u4e2a\u5b50\u5e8f\u5217 \u5faa\u73af\u5de6\u79fb \u4e00\u4f4d\u3002 \u53ef\u4ee5\u901a\u8fc7\u7f6e\u6362\u73af\u672c\u8eab\u7684\u5f62\u72b6\uff0c\u8bc1\u660e\u8fd9\u6837\u5b50\u505a\u5c31\u4f1a\u8ba9\u7f6e\u6362\u73af\u4e0a\u7684\u4ea4\u6362\u6b21\u6570\u8fbe\u5230 \\(k-1\\) \u3002 \u7136\u540e\u4e00\u76f4\u8fd9\u4e48\u505a\uff0c\u76f4\u5230\u53ea\u5269\u4e00\u79cd\u5143\u7d20\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 #include <bits/stdc++.h> using namespace std ; const int si = 2e5 + 10 ; int n ; int a [ si ]; std :: vector < int > cnt [ si ], pos [ si ]; #define pb emplace_back #define sz(v) ((int)v.size()) int main () { int T ; cin >> T ; while ( T -- ) { vector < int > tmp , ans ; cin >> n ; tmp . clear (), ans . clear (); ans . resize ( n + 1 ); for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; for ( int i = 1 ; i <= n ; ++ i ) cnt [ i ]. clear (), pos [ i ]. clear (); for ( int i = 1 ; i <= n ; ++ i ) cnt [ a [ i ]]. pb ( i ); for ( int i = 1 ; i <= n ; ++ i ) pos [ sz ( cnt [ i ])]. pb ( i ); for ( int i = 1 ; i <= n ; ++ i ) if ( sz ( pos [ i ]) > 0 ) tmp . pb ( i ); vector < int > qwq ; for ( int i = 1 ; i <= n ; ++ i ) { qwq . clear (); for ( auto j : tmp ) { if ( j >= i ) { for ( int k = 0 ; k < sz ( pos [ j ]); ++ k ) { qwq . pb ( cnt [ pos [ j ][ k ]][ sz ( cnt [ pos [ j ][ k ]]) - 1 ]); cnt [ pos [ j ][ k ]]. pop_back (); } } } if ( sz ( qwq ) > 0 ) { for ( int j = 0 ; j < sz ( qwq ) - 1 ; ++ j ) ans [ qwq [ j + 1 ]] = a [ qwq [ j ]]; ans [ qwq [ 0 ]] = a [ qwq . back ()]; } } for ( int i = 1 ; i <= n ; ++ i ) cout << ans [ i ] << \" \" ; cout << endl ; } return 0 ; } // tjx 1 Tag : \u7f6e\u6362\u73af CF1672F2 Checker for Array Shuffling \u03c8(\uff40\u2207\u00b4)\u03c8 Apr/27/2022 \u4f60\u9700\u8981\u5199\u4e00\u4e2a F1 \u7684Checker\uff0c\u5373\u5224\u5b9a\u7ed9\u5b9a\u7684\u5e8f\u5217 \\(b\\) \u662f\u4e0d\u662f \\(a\\) \u7684\u6700\u4f18\u89e3\u4e4b\u4e00\u3002 \u4f9d\u65e7\u8003\u8651 F1 \u7684\u7ed3\u8bba\uff0c\u6700\u4f18\u89e3\u5c31\u662f\u8ba9\u7f6e\u6362\u73af\u6570\u91cf\u66f4\u5c0f\uff0c\u6784\u9020\u5c3d\u53ef\u80fd\u5927\u7684\u7f6e\u6362\u73af\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u8003\u8651 F1 \u7684\u6784\u9020\u8fc7\u7a0b\uff0c\u4f60\u53d1\u73b0\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u90a3\u4e2a\u5143\u7d20\u5728\u4efb\u610f\u4e00\u4e2a\u7f6e\u6362\u73af\u4e0a\u90fd\u8981\u51fa\u73b0\uff0c\u5426\u5219\u4e0d\u662f\u6700\u4f18\u7684\u3002 \u56e0\u4e3a\u5047\u8bbe\u8fd9\u4e2a\u5143\u7d20\u9009\u5b8c\u4e4b\u540e\uff0c\u8fd8\u51fa\u73b0\u4e86\u53e6\u5916\u7684\u7f6e\u6362\u73af\uff0c\u8bc1\u660e\u8fd9\u4e2a\u5143\u7d20\u5fc5\u7136\u4e0d\u662f\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u90a3\u4e2a\u3002 \u6240\u4ee5\u5148\u4ece\u7f16\u53f7\u4e3a \\(b_i\\) \u7684\u70b9\u8fde\u5411 \\(a_i\\) \uff0c\uff08\u4ee5\u503c\u57df\u5927\u5c0f\u4e3a\u8282\u70b9\u4e2a\u6570\uff09\uff0c\u5220\u53bb\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u90a3\u4e2a\u3002 tips \u4e00\u822c\u627e\u7f6e\u6362\u73af\u7684\u65b9\u5f0f\u662f\u5bf9\u4e8e\u5e8f\u5217 \\(a\\) \u8bb0\u5f55\u4e00\u4e2a \\(lst(a_i)\\) \u8868\u793a \\(a_i\\) \u51fa\u73b0\u7684\u4f4d\u7f6e\u3002 \u7136\u540e\u626b\u4e00\u904d \\(b\\) \uff0c\u53ea\u8981 \\(lst(b_i)\\) \u4e0d\u7b49\u4e8e \\(i\\) \uff0c\u90a3\u4e48\u5c31\u7ed9 \\(i\\) \u548c \\(lst(b_i)\\) \u8fde\u4e00\u6761\u6709\u5411\u8fb9\u5373\u53ef\u3002 \u53ea\u662f\u8fd9\u9898\u6bd4\u8f83\u7279\u6b8a, \u503c\u57df\u662f \\([1, n]\\) \uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u8fde \\(a_i, b_i\\) \uff08\u53ea\u8981\u4e0d\u662f\u81ea\u73af\uff09\u3002 \u5982\u679c\u56fe\u4e2d\u8fd8\u5b58\u5728\u73af\uff0c\u90a3\u4e48\u5fc5\u7136\u4e0d\u662f\u6700\u4f18\u7684\uff0c\u8f93\u51fa WA \uff0c\u5426\u5219 AC \u3002 \u4f7f\u7528 Tarjan \u5373\u53ef\u7ebf\u6027\u5224\u662f\u5426\u6709\u5224\u73af\uff08\u5224\u65ad SCC \u7684\u5927\u5c0f\u662f\u5426 \\(>1\\) \uff09\uff0c\u4f46\u662f Tarjan \u5904\u7406\u4e0d\u4e86\u81ea\u73af\uff0c\u81ea\u73af\u9700\u8981\u7279\u5224\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 #include <stack> #include <cassert> #include <cstring> #include <iostream> #include <algorithm> #define yuyuko \"AC\" #define kawaii \"WA\" using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int n , a [ si ], b [ si ]; int exist [ si ]; // \u51fa\u73b0\u6b21\u6570 int most ; bool visited [ si ]; // \u662f\u5426\u8bbf\u95ee\u8fc7\u8fd9\u4e2a\u8282\u70b9 int tot = 0 ; int head [ si ]; struct Edge { int ver , Next ; } e [ si << 1 ]; inline void add ( int u , int v ) { e [ tot ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot ++ ; } int dfn [ si ], low [ si ]; int tim = 0 , cnt = 0 ; bool ins [ si ]; stack < int > s ; bool sol ; void init () { tot = 0 , tim = 0 , cnt = 0 , sol = true ; for ( int i = 0 ; i <= n ; ++ i ) { head [ i ] = -1 ; exist [ i ] = dfn [ i ] = low [ i ] = 0 ; visited [ i ] = ins [ i ] = false ; } } void tarjan ( int u ) { dfn [ u ] = low [ u ] = ++ tim ; s . push ( u ), ins [ u ] = true ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( ! dfn [ v ]) { tarjan ( v ); low [ u ] = min ( low [ u ], low [ v ]); } else if ( ins [ v ]) low [ u ] = min ( low [ u ], dfn [ v ]); } if ( dfn [ u ] == low [ u ]) { int x ; ++ cnt ; int num = 0 ; do { x = s . top (), s . pop (); ins [ x ] = false , num ++ ; } while ( u != x ); if ( num > 1 ) sol = false ; } return ; } void solve () { cin >> n , init (); for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], exist [ a [ i ]] += 1 ; most = max_element ( exist + 1 , exist + 1 + n ) - exist ; // \u51fa\u73b0\u6700\u9891\u7e41\u7684\u662f\u54ea\u4e2a // cerr << most << endl; for ( int i = 1 ; i <= n ; ++ i ) { cin >> b [ i ]; if ( a [ i ] == most || b [ i ] == most ) continue ; if ( a [ i ] == b [ i ]) sol = false ; // Tarjan \u5224\u4e0d\u4e86\u81ea\u73af\uff0c\u6240\u4ee5\u7279\u5224\u3002 add ( b [ i ], a [ i ]); } for ( int i = 1 ; i <= n ; ++ i ) if ( ! dfn [ i ] && i != most ) tarjan ( i ); if ( sol ) cout << yuyuko << endl ; else cout << kawaii << endl ; return ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) solve (); return 0 ; } 1 Tag : \u7f6e\u6362\u73af / Tarjan CF1672E notepad.exe \u03c8(\uff40\u2207\u00b4)\u03c8 Apr/24/2022 \u7ed9\u4f60\u4e00\u4e2a\u6587\u672c\u7f16\u8f91\u5668\uff0c\u6709 \\(n\\) \u4e2a\u5b57\u7b26\u4e32\uff0c\u957f\u5ea6\u5206\u522b\u4e3a \\(w_1,w_2,w_3\\dots\\) \u3002 \\(w\\) \u53ea\u6709 Grader \u624d\u77e5\u9053\uff0c\u4f60\u6bcf\u6b21\u53ef\u4ee5\u8be2\u95ee\u4e00\u4e2a\u5bbd\u5ea6 \\(W\\) \uff0cGrader \u4f1a\u8fd4\u56de\u4ee5\u8fd9\u4e2a\u5bbd\u5ea6\u663e\u793a\u6240\u6709\u5b57\u7b26\u4e32\u6240\u9700\u8981\u7684\u6700\u5c0f\u9ad8\u5ea6\u3002 \u5b57\u7b26\u4e32\u7684\u663e\u793a\u5fc5\u987b\u6309\u987a\u5e8f\uff0c\u540c\u4e00\u884c\u5185\u7684\u76f8\u90bb\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e4b\u95f4\u81f3\u5c11\u8981\u6709\u4e00\u4e2a\u7a7a\u683c\uff0c\u884c\u5185\u53ef\u4ee5\u6709\u4efb\u610f\u591a\u4e2a\u7a7a\u683c\u3002 \u5982\u679c \\(W < \\max\\{w_i\\}\\) \uff0c\u6587\u672c\u7f16\u8f91\u5668\u4f1a Crash\uff0cGrader \u4f1a\u8fd4\u56de \\(0\\) \u3002 \u95ee\u53ef\u80fd\u7684 \\(H\\times W\\) \u6700\u5c0f\u662f\u591a\u5c11\uff0c\u4f60\u6700\u591a\u53ef\u4ee5\u95ee \\(n + 30\\) \u6b21\u3002 \\(n,w_i \\le 2000\\) \u3002 \u9996\u5148\u770b\u5230 \\(30\\) \uff0c\u53ef\u4ee5\u8003\u8651\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u8ba9\u6240\u6709\u5b57\u7b26\u4e32\u90fd\u5728\u4e00\u884c\uff0c\u4e8c\u5206\u4f7f\u5f97\u8fd9\u79cd\u60c5\u51b5\u6700\u5c0f\u7684 \\(W\\) \uff0c\u8bbe\u8fd9\u4e2a \\(W = S\\) \u53ef\u4ee5\u53d1\u73b0 \\(S = \\sum w_i + n - 1\\) \uff0c\u4e5f\u5c31\u662f\u4ece\u957f\u5ea6\u52a0\u4e0a\u884c\u5185\u7a7a\u683c\u3002 \u53c8\u53ef\u4ee5\u53d1\u73b0\uff0c\u8981\u60f3\u6700\u4f18\uff0c \\(H\\) \u4e00\u5b9a\u5728 \\([1,n]\\) \u8fd9\u4e2a\u8303\u56f4\u4e4b\u5185\u3002 \u5047\u8bbe\u6211\u4eec\u4e8c\u5206\u7528\u5b8c\u4e86 \\(30\\) \u6b21\uff08\u5f53\u7136\u662f\u4e0d\u53ef\u80fd\u7528\u5b8c\u7684\uff09\u3002 \u7136\u540e\u8fd8\u5269 \\(n\\) \u6b21\uff0c\u521a\u597d\u591f\u6bcf\u4e00\u4e2a\u53ef\u80fd\u7684 \\(H\\) \u90fd\u95ee\u4e00\u904d\u3002 \u6240\u4ee5\u4e8c\u5206\u51fa \\(S\\) \u4e4b\u540e\u76f4\u63a5\u66b4\u529b\u95ee \\(W = S/H\\) \u7684\u60c5\u51b5\uff08\u6b64\u5904\u7684\u9664\u6cd5\u662f C++ \u7684\u9664\u6cd5\uff09 \u53ea\u8981\u7f16\u8f91\u5668\u6ca1\u6709 Crash\uff0c\u7edf\u8ba1\u7b54\u6848\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 int l = 1 , r = 2011 * 2011 ; while ( l < r ) { int mid = l + r >> 1 ; if ( ask ( mid ) == 1 ) r = mid ; else l = mid + 1 ; } int ans = l ; for ( int i = 1 ; i <= n ; ++ i ) { int x = ask ( l / i ); if ( x && ( l / i ) != 0 ) ans = min ( ans , ( l / i ) * x ); } cout << \"! \" << ans << endl ; 1 Tag : \u4e8c\u5206 / \u6784\u9020 / \u8d2a\u5fc3 CF1661D Progressions Covering \u03c8(\uff40\u2207\u00b4)\u03c8 Apr/25/2022 \u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u521d\u59cb\u5168\u90e8\u4e3a \\(0\\) \uff0c\u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(b\\) \u3002 \u4f60\u53ef\u4ee5\u5bf9 \\(a\\) \u505a\u4efb\u610f\u6b21\u8fd9\u6837\u7684\u64cd\u4f5c\uff1a \u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(k\\) \u7684\u533a\u95f4 \\([l,r]\\) \uff0c\u5206\u522b\u8ba9 \\(a_l,a_{l + 1},\\dots,a_{r}\\) \u52a0\u4e0a \\(1,2,3,\\dots,k\\) \u3002 \u95ee\u4f7f\u5f97 \\(\\forall i,a_i \\ge b_i\\) \u7684\u6700\u5c0f\u64cd\u4f5c\u6b21\u6570\u3002 \u8fd9\u662f\u4e00\u4e2a\u5173\u4e8e \u7b49\u5dee\u6570\u5217 \u7684\u7ecf\u5178 Trick\u3002 \u533a\u95f4 \\([l,r]\\) \u52a0\u7b49\u5dee\u6570\u5217\uff0c\u7b49\u540c\u4e8e\u5728 \u5dee\u5206\u6570\u7ec4 \u4e0a\u7684 \\([l + 1,r]\\) \u505a\u4e00\u6b21 \u533a\u95f4\u52a0 \\(d\\) \uff0c\u7136\u540e\u4ee4 \\(c[l] + \\text{BEGIN}\\) \uff0c \\(c[r+1] - \\text{END}\\) \u3002 \\(\\text{BEGIN,END}\\) \u5206\u522b\u662f\u9996\u9879\u548c\u672b\u9879\u3002 \u5355\u70b9\u8be2\u95ee\u53ea\u9700\u8981\u8be2\u95ee\u7ebf\u6bb5\u6811\u4e0a\u7684 \\(sum(1,pos)\\) \u5373\u53ef\u3002 \u53d1\u73b0\u5e8f\u5217 \\(a\\) \u5f00\u5934\u7684\u5143\u7d20\u53ea\u80fd\u4e00\u4e2a\u4e00\u4e2a\u51cf\u53bb\uff0c\u7ed3\u5c3e\u7684\u5143\u7d20\u53ea\u80fd \\(k\\) \u4e2a \\(k\\) \u4e2a\u51cf\u53bb\uff0c \u6700\u7ec8\u7ed3\u679c\u8981\u6c42\u6700\u5c0f\uff0c\u6240\u4ee5\u5c3d\u91cf\u8ba9\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u591a\u51cf\u53bb\u5927\u4e00\u70b9\u7684\u3002 \u8003\u8651\u4e00\u4e2a\u8d2a\u5fc3\uff0c\u4ece\u7ed3\u5c3e\u5f00\u59cb\u626b\uff0c\u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u503c \\(a_i\\) \u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u4e0d\u65ad\u52a0 \\(k\\) \u76f4\u5230 \\(b_i \\le a_i\\) \u3002 \u7136\u540e\u8fd9\u4e9b\u64cd\u4f5c\u5bf9\u4e8e\u524d\u9762\u7684\u8d21\u732e\u4e5f\u9700\u8981\u7b97\u4e0a\u3002 \u626b\u7684\u65f6\u5019\u7d2f\u52a0\u7b54\u6848\u5373\u53ef\u3002 \u4ee3\u7801\u76f4\u63a5\u5199\u4e86\u5dee\u5206\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #include <bits/stdc++.h> using namespace std ; int main () { int n , k ; scanf ( \"%d %d\" , & n , & k ); vector < long long > b ( n ); for ( auto & it : b ) { scanf ( \"%lld\" , & it ); } vector < long long > closed ( n ); long long sum = 0 , cnt = 0 , ans = 0 ; for ( int i = n - 1 ; i >= 0 ; -- i ) { sum -= cnt ; cnt -= closed [ i ]; b [ i ] -= sum ; if ( b [ i ] <= 0 ) { continue ; } int el = min ( i + 1 , k ); long long need = ( b [ i ] + el - 1 ) / el ; sum += need * el ; cnt += need ; ans += need ; if ( i - el >= 0 ) { closed [ i - el ] += need ; } } printf ( \"%lld \\n \" , ans ); return 0 ; } 1 Tag : \u5dee\u5206 / \u7ebf\u6bb5\u6811 / \u8d2a\u5fc3 / \u7b49\u5dee\u6570\u5217 CF1661E Narrow Components \u03c8(\uff40\u2207\u00b4)\u03c8 Apr/27/2022 \u7ed9\u4f60\u4e00\u4e2a \\(3\\times m\\) \u7684 \\(01\\) \u77e9\u9635\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a\u533a\u95f4 \\([l,r]\\) \uff0c\u6c42\u7b2c \\(l,r\\) \u8fd9\u4e24\u5217\u4e4b\u95f4\u6709\u591a\u5c11\u4e2a \\(1\\) \u8fde\u901a\u5757\u3002 \\(m,q \\le 3e5\\) \u3002 \u4e00\u4e2a\u4e00\u773c\u7684\u601d\u8def\u662f\uff0c\u7528\u6570\u4f4dDP\u4e2d\u7c7b\u4f3c\u524d\u7f00\u548c\u7684\u601d\u60f3\uff0c\u628a\u4e00\u4e2a \\([l,r]\\) \u7684\u8be2\u95ee\u8f6c\u5316\u6210 \\([1,l],[1,r]\\) \u7684\u4e24\u4e2a\u8be2\u95ee\u3002 \u6240\u4ee5\u8bbe \\(s_i\\) \u8868\u793a \\(1\\sim i\\) \u7684\u8fde\u901a\u5757\u4e2a\u6570\u3002 \u4f46\u662f\u8fd9\u91cc\u53d1\u73b0\u4e0d\u80fd\u76f4\u63a5\u51cf\uff0c\u56e0\u4e3a\u5f53\u4e24\u5217\u65ad\u5f00\u7684\u65f6\u5019\uff0c\u6709\u53ef\u80fd\u4f1a\u4ea7\u751f\u65b0\u7684\u8fde\u901a\u5757\uff0c\u6216\u8005\u4ee4\u8fde\u901a\u5757\u6570\u91cf\u51cf\u5c11\u3002 \u65e2\u7136\u6709\u8fd9\u79cd\u95ee\u9898\uff0c\u5c31\u5c1d\u8bd5\u89e3\u51b3\uff0c\u56e0\u4e3a\u524d\u7f00\u548c\u7684\u601d\u8def\u8fd8\u662f\u86ee\u5bf9\u7684\uff0c\u653e\u5f03\u4e86\u4f30\u8ba1\u4e00\u65f6\u534a\u4f1a\u513f\u60f3\u4e0d\u5230\u522b\u7684\u529e\u6cd5\u3002 \u6240\u4ee5\u53ef\u4ee5\u9884\u5904\u7406\u51fa\u4e00\u4e2a \\(m_i\\) \uff0c\u8868\u793a \\(i,i+1\\) \u8fd9\u4e24\u5217\u65ad\u5f00\u7684\u65f6\u5019\uff0c\u4f1a\u4ea7\u751f\u7684\u65b0\u8fde\u901a\u5757\u4e2a\u6570\u3002 \u7136\u540e\u8be2\u95ee\u7684\u65f6\u5019\u5e26\u4e0a \\(m\\) \u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 for ( int i = 0 ; i < n ; i ++ ) { s1 [ i + 1 ] = s1 [ i ] + a [ 0 ][ i ] + a [ 1 ][ i ] + a [ 2 ][ i ] - ( a [ 0 ][ i ] & a [ 1 ][ i ]) - ( a [ 1 ][ i ] & a [ 2 ][ i ]); } for ( int i = 0 ; i < n - 1 ; i ++ ) { s2 [ i + 1 ] = s2 [ i ] - ( a [ 0 ][ i ] & a [ 0 ][ i + 1 ]) - ( a [ 1 ][ i ] & a [ 1 ][ i + 1 ]) - ( a [ 2 ][ i ] & a [ 2 ][ i + 1 ]) + ( a [ 0 ][ i ] & a [ 1 ][ i ] & a [ 0 ][ i + 1 ] & a [ 1 ][ i + 1 ]) + ( a [ 1 ][ i ] & a [ 2 ][ i ] & a [ 1 ][ i + 1 ] & a [ 2 ][ i + 1 ]); } // when asking ans = s1 [ r ] - s1 [ l ] + s2 [ r - 1 ] - s2 [ l ]; \u4f46\u662f\u5982\u679c\u9047\u5230\uff1a 1 2 3 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 1 1 1 1 1 1 1 0 \u5c31\u4f1a G\uff0c\u6240\u4ee5\u9700\u8981\u5206\u7c7b\u8ba8\u8bba\u6709 \\(101\\) \u7684\u60c5\u51b5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ 0 ][ i ] & a [ 1 ][ i ] & a [ 2 ][ i ]) { int j = i + 1 ; while ( j < n && ( a [ 0 ][ j ] & ! a [ 1 ][ j ] & a [ 2 ][ j ])) j ++ ; if ( j < n && j > i + 1 && a [ 0 ][ j ] && a [ 1 ][ j ] && a [ 2 ][ j ]) { R [ j ] ++ ; if ( i + 1 < n ) L [ i + 1 ] ++ ; } i = j - 1 ; } } for ( int i = 1 ; i < n ; i ++ ) L [ i ] += L [ i - 1 ], R [ i ] += R [ i - 1 ]; \u672c\u9898\u8fd8\u6709\u7ebf\u6bb5\u6811+\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u6027\u7684\u505a\u6cd5\uff0c\u5e76\u4e14\u6709 [SDOI2013]\u57ce\u5e02\u89c4\u5212\u8fd9\u4e00\u9053\u7c7b\u4f3c\u7684\u9898\u76ee\uff08\u672c\u9898\u53ea\u80fd\u4f7f\u7528\u7ebf\u6bb5\u6811+\u5e76\u67e5\u96c6\u7ef4\u62a4\uff09\u3002 1 Tag : \u524d\u7f00\u548c / \u601d\u7ef4 CF1671E Preorder \u03c8(\uff40\u2207\u00b4)\u03c8 Apr/28/2022 \u7ed9\u4f60\u4e00\u68f5\u6709 \\(2^n-1\\) \u4e2a\u8282\u70b9\u7684\u6ee1\u4e8c\u53c9\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u4e0a\u53ea\u53ef\u80fd\u6709 A/B \u4e24\u79cd\u503c\u3002 \u4f60\u53ef\u4ee5\u5bf9\u505a\u4efb\u610f\u6b21\u8fd9\u6837\u7684\u64cd\u4f5c\uff1a \u5bf9\u4e8e\u4e00\u4e2a\u975e\u53f6\u5b50\u8282\u70b9 \\(u\\) \uff0c\u4ea4\u6362\u4ee5\u5b83\u7684\u5de6\u53f3\u513f\u5b50 \\(2u,2u+1\\) \u4e3a\u6839\u7684\u5b50\u6811\u3002 \u95ee\u53ef\u80fd\u5f97\u5230\u7684\u524d\u5e8f\u904d\u5386\u6709\u591a\u5c11\u79cd\u3002 \\(n \\le 18\\) \u3002 \u6bd4\u8f83 Tricky \u7684 Problem\u3002 \u8003\u8651\u8bbe \\(dp_u\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u6709\u591a\u5c11\u79cd\u53ef\u80fd\u65b9\u6848\u3002 \u6ce8\u610f\u5230\u9898\u76ee\u4e2d\u5bf9\u524d\u5e8f\u904d\u5386\u7684\u5b9a\u4e49\u662f\uff0c \\(u\\) \u4e0a \u7684\u5b57\u7b26 + \u5de6\u513f\u5b50\u7684\u524d\u5e8f\u904d\u5386 + \u53f3\u513f\u5b50\u7684\u524d\u5e8f\u904d\u5386 \u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a \\(2u,2u+1\\) \u7684 DP \u503c\u770b\u4f5c\u5e38\u91cf \u6765\u8003\u8651\u3002 \u8003\u8651\u5212\u5206\u96c6\u5408 \\(dp_u\\) \u3002 \u5982\u679c\u8bf4\u4e24\u9897\u5b50\u6811\u672c\u8d28\u4e0d\u540c\uff08\u5373\u662f\u4e0d\u540c\u6784\uff09\uff0c\u90a3\u4e48\u4e0d\u4ea4\u6362\u7684\u65f6\u5019\uff0c\u7531\u4e58\u6cd5\u539f\u7406\u53ef\u4ee5\u5f97\u5230\uff0c\u65b9\u6848\u6570\u4e3a \\(dp_{2u}\\times dp_{2u+1}\\) \u3002 \u4ea4\u6362\u4e4b\u540e\u53c8\u6709\u4e00\u4e2a \\(dp_{2u}\\times dp_{2u+1}\\) \u3002 \u6240\u4ee5\u4e24\u9897\u5b50\u6811\u4e0d\u540c\u6784\u65f6\uff0c \\(dp_{u} = 2\\times dp_{2u} \\times dp_{2u + 1}\\) \u3002 \u5982\u679c\u4e24\u9897\u5b50\u6811\u4e0d\u540c\u6784\uff0c\u65b9\u6848\u6570\u5c31\u53ea\u6709 \\(dp_{2u} \\times dp_{2u + 1}\\) \u3002 \u4f46\u662f\u6709\u4e2a\u95ee\u9898\uff1a \u90a3\u5982\u679c\u4e0d\u540c\u6784\u7684\u65f6\u5019\uff0c \\(2u\\) \u7684\u6240\u6709\u65b9\u6848\u4e2d\u6709\u4e00\u79cd\u548c \\(2u + 1\\) \u91cc\u7684\u4e00\u79cd\u65b9\u6848\u5b8c\u5168\u4e00\u81f4\u3002 \u4e0d\u4f1a\u7b97\u91cd\u5417\uff1f \u5176\u5b9e\u4e0d\u4f1a\uff0c\u4f60\u53ef\u4ee5\u53d1\u73b0\uff0c\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u7684\u5145\u8981\u6761\u4ef6\u5c31\u662f\u4e24\u9897\u5b50\u6811\u540c\u6784\u3002 \u5177\u4f53\u8bc1\u660e\u53ea\u9700\u8981 \u5148\u4ece\u513f\u5b50\u4e3a\u53f6\u5b50\u8282\u70b9\u7684\u8282\u70b9\u7684\u60c5\u51b5 \u5f00\u59cb\uff08\u6216\u8005\u8bf4\u5c31\u5728\u8fd9\u91cc\u5148\u731c\u4e00\u4e2a\u7ed3\u8bba\uff09\uff0c\u7136\u540e \u4e0d\u65ad\u5f80\u4e0a\u8d70\uff0c\u9012\u5f52\u8bc1\u660e\u7ed3\u8bba \u3002 \u600e\u4e48\u5224\u65ad\u540c\u6784\uff1f \u5176\u5b9e\u53ea\u9700\u8981\u8ba9\u9012\u5f52\u65f6\uff0c\u8bb0\u5f55\u4e00\u4e2a\u65b0\u7684 \\(preorder\\) \uff0c\u5e76\u5f3a\u5236\u8fd9\u4e2a \\(preorder\\) \u662f\u5b57\u5178\u5e8f\u6700\u5927\u7684\u90a3\u4e00\u4e2a\uff0c\u7136\u540e\u56e0\u4e3a\u8fd9\u662f\u6ee1\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u540c\u6784\u53ea\u9700\u8981\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u76f8\u7b49\u5373\u53ef\u3002 \u6240\u4ee5\u5c31\u4e0d\u7528\u5199\u6811\u54c8\u5e0c\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #include <cstring> #include <iostream> #include <algorithm> using namespace std ; using i64 = long long ; const int si = ( 1 << 18 ) + 1 ; constexpr int mod = 998244353 ; int n , ans = 1 ; string preorder ; string cons [ si ]; void dfs ( int p , int len ) { if ( len == 1 ) { cons [ p ] = preorder [ p ]; return ; } dfs ( p << 1 , len / 2 ), dfs ( p << 1 | 1 , len / 2 ); if ( cons [ p << 1 ] > cons [ p << 1 | 1 ]) swap ( cons [ p << 1 ], cons [ p << 1 | 1 ]); if ( cons [ p << 1 ] != cons [ p << 1 | 1 ]) ans = ( ans + ans ) % mod ; cons [ p ] = preorder [ p ] + cons [ p << 1 ] + cons [ p << 1 | 1 ]; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> preorder ; preorder = ' ' + preorder ; dfs ( 1 , ( 1 << n ) - 1 ); cout << ans << endl ; return 0 ; } 1 Tag : \u6811\u5f62DP / \u6811\u7684\u540c\u6784 / \u6811\u7684\u524d\u5e8f\u904d\u5386 CF1668E & CF1667C Half Queen Cover \u03c8(\uff40\u2207\u00b4)\u03c8 Apr/28/2022 \u7ed9\u4f60\u4e00\u4e2a \\(n\\times n\\) \u7684\u68cb\u76d8\uff0c\u548c\u65e0\u9650\u4e2a\u7687\u540e\uff0c\u4f46\u662f\u8fd9\u91cc\u7684\u7687\u540e\u53ea\u80fd\u653b\u51fb\u540c\u884c\u5217\u548c\u4ece\u5de6\u4e0a\u5230\u53f3\u4e0b\u7684\u5bf9\u89d2\u7ebf\u3002 \u53e6\u5916\u4e00\u6761\u5bf9\u89d2\u7ebf\u653b\u51fb\u4e0d\u5230\uff0c\u95ee\u6700\u5c11\u9700\u8981\u591a\u5c11\u4e2a\u7687\u540e\u624d\u80fd\u8986\u76d6\u6574\u4e2a\u68cb\u76d8\uff0c\u7687\u540e\u4e4b\u95f4\u662f\u5426\u653b\u51fb\u4e0d\u7ba1\u3002 \\(1\\le n \\le 1e5\\) \uff0c\u6784\u9020\u89e3\u3002 \u4e00\u4e2a\u5f88\u5999\u7684\u6784\u9020\u9898\uff0c\u4f5c\u4e3a\u9898\u672c\u8eab\u662f\u5f88\u5999\u7684\uff0c\u4f46\u662f\u8fd9\u79cd\u4e1c\u897f\u653e\u5728 div2 E \u6211\u89c9\u5f97\u5f88\u70e6\u3002 \u8003\u8651\u6700\u4f18\u89e3\u653e\u4e86 \\(k\\) \u4e2a Queen\uff0c\u4e14\u4e0d\u8003\u8651\u5bf9\u89d2\u7ebf\uff0c\u90a3\u4e48\u53ef\u4ee5\u628a Queen \u79fb\u52a8\u6210\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 x o o o o o o o x o o o o o o o x o o o o o o o . . . . x \u662f Queen o o o . . . . o \u662f Under o o o . . . . Attack \u7684\u683c\u5b50 o o o . . . . \u53ef\u4ee5\u53d1\u73b0\uff0c\u73b0\u5728\u5269\u4e0b\u4e86\u4e00\u4e2a \\((n-k) \\times (n -k)\\) \u7684\u77e9\u9635\u3002 \u5fc5\u7136\u662f\u7528 Queen \u7684\u5bf9\u89d2\u7ebf\u6765\u8986\u76d6\uff0c\u6240\u4ee5\u9700\u8981 \\(2\\times (n - k) - 1\\) \u4e2a Queen\u3002 \u6240\u4ee5\u53ef\u4ee5\u5217\u51fa\u4e0d\u7b49\u5f0f\uff1a \\(2\\times(n - k) - 1 \\le k\\) \u3002 \u53ef\u4ee5\u5f97\u5230 \\(k = \\lceil \\frac{2n - 1}{3} \\rceil\\) \u3002 \u90a3\u4e48\u6700\u5c11\u9700\u8981\u7684 Queen \u7684\u4e2a\u6570\u5c31\u662f \\(\\lceil \\frac{2n - 1}{3} \\rceil\\) \u4e2a\u3002 \u81f3\u4e8e\u6784\u9020\u89e3\uff0c\u53ea\u9700\u8981\u5206\u522b\u8ba9\u4ed6\u4eec\u8986\u76d6\u4e00\u4e2a\u5bf9\u89d2\u7ebf\u5373\u53ef\u3002 \u4f46\u662f\u8fd8\u9700\u8981\u4fdd\u8bc1\u90a3\u4e2a \\((n-k) \\times (n - k)\\) \u77e9\u9635\u4e4b\u5916\u7684\u5730\u65b9\u90fd\u8981\u88ab Attack\u3002 \u6240\u4ee5\u8fd8\u9700\u8981\u4fdd\u8bc1\u8fd9\u4e9b Queen \u4e92\u76f8\u4e0d\u5728\u540c\u884c\u5217\u4e0a\uff08\u5728\u5de6\u4e0a\u7684 \\(k\\times k\\) \u7684\u5730\u65b9\u653e\uff09\u3002 \u8fd9\u91cc\u7684\u4e00\u4e2a Trick \u662f\uff0c\u628a Queen \u5f53\u6210\u56fd\u9645\u8c61\u68cb\u91cc\u9762\u7684 Knight \u6765\u79fb\u52a8\u3002 \u6bd4\u5982 \\(5 \\times 5\\) \u7684\u65f6\u5019\uff1a 1 2 3 4 5 x . . . . . . . x . . x . . . . . . . x . . x . . \u7136\u540e\u5c31\u505a\u5b8c\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #include <cmath> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; int n , k ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n ; if ( n == 1 ) { cout << \"1 \\n \" << \"1 1 \\n \" ; return 0 ; } k = ceil ((( 2 * n - 1 ) * 1.0 ) / 3.0 ); cout << k << endl ; for ( int i = 1 , j = 1 ; i <= k ; ++ i ) { cout << i << \" \" << j << endl ; j = ( j + 2 > k ) ? 2 : j + 2 ; } return 0 ; } 1 Tag : \u6784\u9020 / \u601d\u7ef4 CF1665D GCD Guess \u03c8(\uff40\u2207\u00b4)\u03c8 Grader \u6709\u4e00\u4e2a\u6574\u6570 \\(x, 1\\le x \\le 10^9\\) \u3002 \u4f60\u6709 \\(30\\) \u6b21\u673a\u4f1a\uff0c\u6bcf\u6b21\u53ef\u4ee5\u8be2\u95ee \\(\\gcd(x + a, x + b)\\) \u662f\u591a\u5c11\uff0c \\(|a,b| \\le 2\\times 10^9\\) \u3002 \u8bf7\u4f60\u95ee\u51fa \\(x\\) \u3002 \u53d1\u73b0 \\(\\lceil \\log_2(10^9) \\rceil = 30\\) \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e8c\u5206\u6216\u8005\u5bf9 \\(x\\) \u4e8c\u8fdb\u5236\u62c6\u5206\u3002 \u4e8c\u5206\u663e\u7136\u4e0d\u53ef\u884c\uff0c\u56e0\u4e3a \\(\\gcd\\) \u5728\u672c\u9898\u7684\u8981\u6c42\u4e0b\u662f\u6ca1\u6709\u5355\u8c03\u6027\u8d28\u7684\uff0c\u6211\u8d5b\u65f6\u5c31\u662f\u88ab\u8fd9\u4e2a\u5361\u4f4f\u4e86\uff0c\u4e00\u76f4\u6ca1\u6709\u60f3\u5230\u4ed6\u6ca1\u6709\u5355\u8c03\u6027\u7136\u540e\u53d6\u8003\u8651\u4e8c\u8fdb\u5236\u62c6\u5206\u3002 \u6240\u4ee5\u5bf9 \\(x\\) \u4e8c\u8fdb\u5236\u62c6\u5206\uff0c\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u9760\u4e00\u6b21\u8be2\u95ee\u95ee\u51fa \\(x\\) \u7684\u67d0\u4e00\u4f4d\u662f \\(0\\) \u8fd8\u662f \\(1\\) \u3002 \u505a\u6cd5\u5f88\u7b80\u5355\uff0c\u628a \\(i\\) \u4f4d\u4ee5\u524d\u7684\u4f4d\u5168\u90e8\u7f6e\u4e3a \\(0\\) \uff0c\u8bbe\u73b0\u5728\u7684\u6570\u662f \\(x\\prime\\) \u3002 \u6bcf\u6b21\u8be2\u95ee \\(\\gcd(x\\prime + 1, 2^{i + 1}) = 2^{i + 1}\\) \u662f\u5426\u6210\u7acb\u5373\u53ef\u3002 \u5982\u679c\u6210\u7acb\uff0c\u5219\u7b2c \\(i\\) \u4f4d\u662f \\(1\\) \uff0c\u53cd\u4e4b\u4e3a \\(0\\) \u3002 \u7136\u540e\u9898\u76ee\u8981\u6c42\u95ee\u7684\u662f \\(\\gcd(x + a, x + b)\\) \uff0c\u4e14 \\(a,b\\) \u53ef\u4ee5\u662f\u8d1f\u6570\uff0c \u6240\u4ee5\u8bb0\u5f55\u4e00\u4e2a\u53d8\u91cf \\(r\\) \uff0c\u8868\u793a\u5f53\u524d\u4e00\u5171\u51cf\u53bb\u4e86\u591a\u5c11\u3002 \u7136\u540e\u8be2\u95ee \\(a = - r + 2^{i - 1}, b = 2^{i} + a\\) \u5373\u53ef\u3002 \u8fd9\u4e2a\u662f\u66f4\u76f8\u51cf\u635f\u672f\u7684\u7ed3\u8bba\uff1a \\(\\forall a \\ge b \\in \\mathbb{N}, \\gcd(a, b) = \\gcd(b, a - b) = \\gcd(a, a - b)\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int n , m ; int a [ si ], b [ si ]; int query ( int a , int b ) { cout << \"? \" << a << \" \" << a + b << endl ; int get ; cin >> get ; return get ; } void solve () { int r = 0 ; for ( int i = 1 ; i <= 30 ; ++ i ) { int ans = query (( 1 << ( i - 1 )) - r , ( 1 << i )); if ( ans == ( 1 << i )) r += ( 1 << ( i - 1 )); } cout << \"! \" << r << endl ; } 1 Tag : gcd / \u6570\u8bba ABC247F Cards \u03c8(\uff40\u2207\u00b4)\u03c8 \u6709 \\(n\\) \u5f20\u5361\u7247,\u6bcf\u5f20\u5361\u7247\u6b63\u9762\u6709\u4e00\u4e2a\u6570\u5b57 \\(a_i\\) ,\u80cc\u9762\u4e5f\u6709\u4e00\u4e2a\u6570\u5b57 \\(b_i\\) , \u4fdd\u8bc1\u6240\u6709\u724c\u4e2d\u6b63\u9762\u548c\u53cd\u9762\u51fa\u73b0\u7684\u6570\u5b57\u90fd\u662f\u4e00\u4e2a\u6392\u5217,\u73b0\u5728\u60f3\u8981\u53d6\u4e00\u4e9b\u724c,\u8fd9\u4e9b\u724c\u6b63\u53cd\u9762\u5fc5\u987b\u5305\u542b \\(1 \\sim n\\) \u7684\u6240\u6709\u6570\u5b57,\u6c42\u65b9\u6848\u6570. \u53ef\u4ee5\u628a\u724c\u770b\u4f5c\u8fde\u63a5 \\(a_i, b_i\\) \u4e24\u4e2a\u8282\u70b9\u7684\u8fb9\uff0c \u6bcf\u4e2a\u70b9\u7684\u51fa\u5165\u5ea6\u5c31\u5fc5\u7136\u4e3a \\(1\\) \u3002 \u7136\u540e\u539f\u56fe\u8f6c\u5316\u6210\u591a\u4e2a\u4e0d\u8fde\u901a\u7684\u73af\uff0c\u65b9\u6848\u6570\u5c31\u662f\u4ed6\u4eec\u7684\u5404\u81ea\u7684\u65b9\u6848\u4e58\u8d77\u6765\uff08\u4e58\u6cd5\u539f\u7406\uff09. \u8003\u8651\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u73af\u7684\u7b54\u6848\u3002 \u8bbe \\(dp_{i,0/1}\\) \u8868\u793a\u9009 \\(i\\) \u6216\u8005\u4e0d\u9009 \\(i\\) \u7684\u65b9\u6848\u3002 \u5982\u679c \\(i\\) \u9009\u4e86\uff0c\u90a3\u4e48\u548c \\(i\\) \u76f8\u540c\uff08\u5728\u73af\u4e0a\u4e5f\u5e94\u8be5\u662f\u76f8\u90bb\u7684\uff09\uff0c\u7684\u8282\u70b9\u5c31\u53ef\u9009\u53ef\u4e0d\u9009\u3002 \u8fd9\u4e2a\u662f\u4e00\u4e2a\u72b6\u6001\u673a\u6a21\u578b\uff0c\u73af\u7684\u5904\u7406\u5c31\u5f3a\u5236\u9009 \\(1\\) \uff0c\u5f3a\u5236\u4e0d\u9009 \\(1\\) \u5206\u522b\u8dd1\u4e00\u904d\u3002 \u7b2c\u4e00\u79cd\u60c5\u51b5 \\(n\\) \u968f\u610f\u53d6\uff0c\u7b2c\u4e8c\u79cd\u5fc5\u987b\u53d6\u3002 \u7136\u540e\u7279\u5224\u4e0b\u81ea\u73af\u5c31\u884c\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 #include <iostream> #include <cstring> #include <algorithm> using namespace std ; typedef long long LL ; const int maxn = 2e5 + 5 , mod = 998244353 ; int a [ maxn ], b [ maxn ]; bool v [ maxn ]; LL f1 [ maxn ][ 2 ]; LL f2 [ maxn ][ 2 ]; #define x first #define y second int main (){ int n ; cin >> n ; f1 [ 1 ][ 0 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ){ f1 [ i ][ 0 ] = f1 [ i - 1 ][ 1 ]; f1 [ i ][ 1 ] = ( f1 [ i - 1 ][ 0 ] + f1 [ i - 1 ][ 1 ]) % mod ; } f2 [ 1 ][ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ){ f2 [ i ][ 0 ] = f2 [ i - 1 ][ 1 ]; f2 [ i ][ 1 ] = ( f2 [ i - 1 ][ 0 ] + f2 [ i - 1 ][ 1 ]) % mod ; } for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & a [ i ]); for ( int i = 1 ; i <= n ; i ++ ){ int x ; scanf ( \"%d\" , & x ); b [ a [ i ]] = x ; } LL res = 1 ; for ( int i = 1 ; i <= n ; i ++ ){ if ( ! v [ i ]){ int cnt = 0 ; for ( int j = i ; ! v [ j ]; j = b [ j ]){ v [ j ] = 1 ; cnt ++ ; } if ( cnt != 1 ) res = res * ( f1 [ cnt ][ 1 ] + f2 [ cnt ][ 0 ] + f2 [ cnt ][ 1 ]) % mod ; } } cout << res << '\\n' ; } // \u8d3a\u7684 // https://zhuanlan.zhihu.com/p/496253093 1 Tag : DP / \u72b6\u6001\u673a / \u56fe\u8bba\u5173\u7cfb ABC246F typewriter \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60 \\(N(1\\le N \\le 18)\\) \u4e2a\u96c6\u5408 \\(S_i \\in \\{\\texttt{a} \\sim \\texttt{z}\\}\\) \u3002 \u4f60\u53ef\u4ee5\u9009\u62e9\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u96c6 \\(S_i\\) \uff0c\u7136\u540e\u7528\u5b83\u7684\u5b57\u7b26\u6253\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(L \\le 10^9\\) \u7684\u5b57\u7b26\u4e32\u3002 \u95ee\u53ef\u80fd\u7684\u65b9\u6848\u6570\uff0c\u5bf9 \\(998244353\\) \u53d6\u6a21\u3002 \u53d1\u73b0\u8ba1\u7b97\u4e00\u4e2a\u96c6\u5408\u80fd\u6253\u51fa\u591a\u5c11\u4e2a\u5b57\u7b26\u4e32\u662f\u5f88\u7b80\u5355\u7684\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e\u4e58\u6cd5\u539f\u7406\u5373\u53ef\u3002 \u4f46\u662f\u9ebb\u70e6\u7684\u5730\u65b9\u5c31\u5728\u4e8e\u8ba1\u7b97\u91cd\u590d\uff0c\u600e\u4e48\u641e\u5462\uff1f \u6211\u4eec\u8003\u8651\u8bbe \\(A_i\\) \u8868\u793a \\(S_i\\) \u80fd\u6253\u51fa\u6765\u7684\u5b57\u7b26\u4e32\u7684\u96c6\u5408\u3002 \u90a3\u4e48\u6700\u7ec8\u6211\u4eec\u8981\u6c42\u7684\u7b54\u6848\u5c31\u662f \uff1a \\[|A_1 \\cup A_2 \\cup A_3 \\cup \\dots \\cup A_n|\\] \u53d1\u73b0\u8fd9\u4e2a\u5f0f\u5b50\u5f88\u5bb9\u6613\u4f7f\u7528\u5bb9\u65a5\u539f\u7406\u8ba1\u7b97\u3002 \\[|A_1 \\cup A_2 \\cup A_3 \\cup \\dots \\cup A_n| = \\] \\[\\sum\\limits_{i = 1}^{n} |A_i| - \\sum\\limits_{1\\le i < j \\le n} |A_i \\cap A_j| + \\sum\\limits_{1\\le i < j < k \\le n} |A_i \\cap A_j \\cap A_k| \\dots + (-1)^{n + 1} |A_1 \\cap A_2 \\cap \\dots \\cap A_n|\\] \u6240\u4ee5\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u8ba1\u7b97\u4efb\u610f\u4e24\u4e2a\u96c6\u5408 \\(A_i,A_j\\) \u7684\u4ea4\u96c6\u3002 \u53d1\u73b0\u76f4\u63a5\u8ba1\u7b97\u5f88\u4e0d\u597d\u641e\uff0c\u6211\u4eec\u53d1\u73b0 \\(S_i, S_j\\) \u5927\u5c0f\u5f88\u5c0f\uff0c\u5206\u6790\u4e00\u6ce2\u6027\u8d28\u53ef\u4ee5\u53d1\u73b0\uff1a \\(A_i \\cap A_j = A_{|S_i \\cap S_j|}\\) \u3002 \u4e5f\u5c31\u662f\u5148\u5bf9 \\(S_i, S_j\\) \u6c42\u4e2a\u4ea4\u96c6\uff0c\u518d\u770b\u8fd9\u4e2a\u4ea4\u96c6\u80fd\u751f\u6210\u7684\u5b57\u7b26\u4e32\u6570\u91cf\u662f\u591a\u5c11\u3002 \u7136\u540e\u8fd9\u4e2a\u9898\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u6c42\u4ea4\u96c6\u662f \\(\\text{O}(2^{\\text{|S|}})\\) \u7684\u3002 \u7136\u540e\u8fd9\u73a9\u610f\u513f\u5c31\u80fd\u5f88\u5feb\u6c42\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #include <bits/stdc++.h> #define mod 998244353 using namespace std ; long long power ( long long a , long long b ){ long long x = 1 , y = a ; while ( b > 0 ){ if ( b & 1l l ){ x = ( x * y ) % mod ; } y = ( y * y ) % mod ; b >>= 1 ; } return x % mod ; } int main (){ int n , k ; cin >> n >> k ; vector < int > v ( n , 0 ); for ( int i = 0 ; i < n ; i ++ ){ string s ; cin >> s ; for ( auto & nx : s ){ v [ i ] |= ( 1 << ( nx - 'a' ));} } long long res = 0 ; for ( int i = 1 ; i < ( 1 << n ); i ++ ){ int ch = ( 1 << 26 ) -1 ; for ( int j = 0 ; j < n ; j ++ ){ if ( i & ( 1 << j )){ ch &= v [ j ];} } int pc = __builtin_popcount (( unsigned int ) ch ); if ( __builtin_popcount (( unsigned int ) i ) % 2 ){ res += power ( pc , k ); res %= mod ;} else { res += ( mod - power ( pc , k )); res %= mod ;} } cout << res << '\\n' ; return 0 ; } 1 Tag : \u5bb9\u65a5\u539f\u7406","title":"2022\u5e744\u6708AT&CF"},{"location":"rec/atcf-for-2022-04/#_1","text":"\u4e00\u4e2a\u5355\u72ec\u7684trick MJC \u544a\u8bc9\u6211\uff1a\u7ea6\u675f\u5173\u7cfb\u5f88\u96be\u5904\u7406\u7684\u65f6\u5019\uff0c\u4e0d\u662f\u5e76\u67e5\u96c6\u5c31\u662f\u8fde\u8fb9\u3002","title":"\u56db\u6708\u597d\u9898\u6539\u9519"},{"location":"rec/atcf-for-2022-04/#cf1668dcf1667b-optimal-partition","text":"Apr/20/2022 \u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u8981\u6c42\u5c06\u5176\u5206\u6210\u82e5\u5e72\u4e2a\u5b50\u6bb5\u3002 \u5b9a\u4e49 \\(ss(l,r)\\) \u4e3a \\(a_l + a_{l + 1} + a_{l + 2} + \\dots + a_r\\) \u3002 \u6bcf\u4e2a\u5b50\u6bb5 \\(a[l,r]\\) \u7684\u8d21\u732e \\(f(l,r)\\) \u4e3a: \\(r - l + 1\\) \uff0c\u5982\u679c \\(ss(l,r) > 0\\) \\(-(r- l + 1)\\) \uff0c\u5982\u679c \\(ss(l,r) < 0\\) \u3002 \\(0\\) \uff0c\u5982\u679c \\(ss(l,r) = 0\\) \u3002 \u6c42\u4e00\u79cd\u5206\u5272\u65b9\u5f0f\uff0c\u4f7f\u5f97\u88ab\u9009\u51fa\u7684\u5b50\u6bb5\u7684 \\(\\sum f(l,r)\\) \u6700\u5927\u3002 \\(n \\le 5e5\\) \u3002 \u9996\u5148\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u4e00\u4e2a \\(\\text{O}(n^2)\\) \u7684 DP\uff1a \u8bbe \\(dp_{i,j}\\) \u8868\u793a\u524d \\(i\\) \u4e2a\u4f4d\u7f6e\uff0c\u5206\u6210 \\(j\\) \u6bb5\u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u8d21\u732e\u548c\u7684\u6700\u5927\u503c\u3002 \u7136\u540e\u53d1\u73b0\u6570\u7ec4\u5c31\u5df2\u7ecf\u5f00\u4e0d\u4e0b\u4e86\u3002 \u4f46\u662f\u9898\u76ee \u6ca1\u6709\u8981\u6c42\u4f60\u5177\u4f53\u8981\u5206\u591a\u5c11\u6bb5\uff0c\u4efb\u610f\u5206\u5272\u6210\u591a\u5c11\u6bb5\u90fd\u662f\u53ef\u4ee5\u7684 \u3002 \u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u201d\u4efb\u52a1\u5b89\u63921\u201c \u5f53\u4e2d\u7528\u5230\u7684\u601d\u60f3\u3002 \u4efb\u52a1\u5b89\u63921 \u662f\u8bbe \\(dp_{i}\\) \u8868\u793a\u5c06\u524d \\(i\\) \u4e2a\u4efb\u52a1\u5206\u6210\u82e5\u5e72\u6279\u6b21\u5904\u7406\u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u603b\u65f6\u95f4\u82b1\u8d39\u7684\u6700\u5c0f\u503c\u3002 \u90a3\u4e48\u672c\u9898\uff0c\u6211\u4eec\u5c31\u8bbe \\(dp_i\\) \u8868\u793a\u5c06\u524d \\(i\\) \u4e2a\u4f4d\u7f6e\u5206\u6210\u82e5\u5e72\u4e2a\u5b50\u6bb5\u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u603b\u8d21\u732e\u7684\u6700\u5927\u503c\u3002 \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5 \u53ea\u8003\u8651\u6700\u540e\u4e00\u6bb5\u662f\u4ec0\u4e48 \uff0c\u8fd9\u4e5f\u6070\u597d\u662f\u96c6\u5408\u5212\u5206\u7684\u4f9d\u636e\uff1a\u201d\u6700\u540e\u4e00\u4e2a\u4e0d\u540c\u7684\u201c\u3002 \u90a3\u4e48\u679a\u4e3e\u6700\u540e\u4e00\u6bb5\u7684\u8d77\u59cb\u4f4d\u7f6e\u8fdb\u884c\u8f6c\u79fb\u5373\u53ef\u3002 \\[dp_{i} = \\max\\limits_{0\\le j < i}\\{dp_j + f(j+1,i)\\}\\] \u521d\u59cb\u5316 \\(dp_0 = 0\\) \uff0c\u9884\u5904\u7406\u524d\u7f00\u548c \\(s\\) \u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u7136\u662f \\(\\text{O}(n^2)\\) \uff0c\u6240\u4ee5\u8003\u8651\u4f7f\u7528\u5e26 \\(\\log\\) \u7684\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u8f6c\u79fb\u3002 \u5c06 \\(f\\) \u5bf9\u5e94\u7684\u4e09\u79cd\u60c5\u51b5\u5bf9\u5e94\u7684 DP \u5f0f\u5b50 \u62c6\u5f00 \uff08\u7701\u7565\u4e86\u5bf9\u5e94\u60c5\u51b5\u7684\u6761\u4ef6\uff09\uff1a \\[\\begin{cases}dp_i = dp_j \\\\ dp_i = dp_j + (i - j) & s_i > s_j\\\\ dp_i = dp_j - (i - j) & s_i < s_j\\end{cases}\\] \u7136\u540e\u79fb\u9879\uff0c\u628a\u5173\u4e8e\u540c\u4e00\u4e2a\u53d8\u91cf\u7684\u6254\u5230\u4e00\u8d77\uff1a \\[\\begin{cases}dp_i = dp_j \\\\ dp_i - i = dp_j - j & s_i > s_j\\\\ dp_i + i = dp_j + j & s_i < s_j \\end{cases}\\] \u53d1\u73b0\u5728\u6700\u540e\u4e00\u6bb5\u957f\u5ea6\u5927\u4e8e \\(1\\) \u65f6\uff0c\u53ef\u80fd\u6210\u4e3a\u6700\u4f18\u51b3\u7b56\u7684\u53ea\u6709\u7b2c\u4e8c\u4e2a\u5f0f\u5b50\u3002 \u6240\u4ee5\u5148\u5904\u7406\u6700\u540e\u4e00\u6bb5\u957f\u5ea6\u7b49\u4e8e \\(1\\) \u7684\u60c5\u51b5\uff0c\u7136\u540e\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u5f0f\u5b50\u8003\u8651\u4f18\u5316\uff0c\u4e5f\u5c31\u662f\u5982\u4f55\u5feb\u901f\u627e\u5230\u80fd\u8ba9\u7b2c\u4e8c\u4e2a\u5f0f\u5b50\u6700\u4f18\u7684\u4e00\u4e2a\u51b3\u7b56\u3002 \u5728 \\(i\\) \u56fa\u5b9a\u65f6\uff0c \\(i\\) \u662f\u5e38\u91cf\uff0c \\(dp_j,j\\) \u662f\u53d8\u91cf\uff0c\u6240\u4ee5\u51b3\u7b56\u96c6\u5408\u7ef4\u62a4\u7684\u5e94\u5f53\u662f \\(dp_j - j\\) \u7684 \\(\\max\\) \uff0c\u5e76\u4e14 \\(s_j < s_i\\) \u3002 \u90a3\u4e48\u53ea\u9700\u8981\u627e\u5230 \\(s_j < s_i\\) \u4e14 \\(i > j\\) \u7684\u6240\u6709 \\(j\\) \u5f53\u4e2d\u80fd\u4f7f \\(dp_j-j\\) \u53d6\u5230\u6700\u5927\u503c\u7684\u4e00\u4e2a\u8fdb\u884c\u8f6c\u79fb\u5373\u53ef\u3002 \u800c\u6bcf\u6b21 \\(i + 1\\) \u65f6\u51b3\u7b56\u96c6\u5408\u90fd\u53ea\u4f1a\u589e\u52a0 \\(dp_i - i\\) \u8fd9\u4e2a\u5143\u7d20\u3002 \u90a3\u4e48\u8fd9\u4e2a\u9898\u5c31\u53d8\u5f97\u548c The Battle Of Chibi \u90a3\u4e00\u9898\u975e\u5e38\u50cf\u4e86\uff0c\u9700\u8981\u7684\u4fe1\u606f\u662f\uff1a \u67d0\u4e00\u4e2a\u4f4d\u7f6e \\(i\\) \u4e4b\u524d \uff0c \u6240\u6709\u5173\u952e\u7801\u5c0f\u4e8e \\(i\\) \u7684\u5173\u952e\u7801\u7684\u4f4d\u7f6e \\(j\\) \u7684 \\(dp_j - j\\) \u7684\u6700\u5927\u503c\uff08\u4fe1\u606f\uff09\u3002 \u6240\u4ee5\u7528\u540c\u6837\u7684\u601d\u60f3\uff0c\u6211\u4eec\u5c06 \\(s\\) \u4f5c\u4e3a\u5173\u952e\u7801\uff0c \\(dp_i - i\\) \u4f5c\u4e3a\u6743\u503c\u63d2\u5165\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u3002 \u5e76\u4e14\u5728\u51b3\u7b56\u5b8c\u4e4b\u540e\u518d\u63d2\u5165\uff0c\u4ee5\u4fdd\u8bc1 \\(i > j\\) \u7684\u6761\u4ef6\u5728\u6c42 \\(\\min\\) \u65f6\u4ecd\u7136\u88ab\u6ee1\u8db3\u3002 \u8fd9\u91cc\u53ea\u662f\u6c42\u524d\u7f00\u6700\u503c\uff0c\u6240\u4ee5\u6811\u72b6\u6570\u7ec4\u662f\u633a\u65b9\u4fbf\u7684\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \\(\\text{O}(n \\log n)\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 #include <bits/stdc++.h> using namespace std ; using i64 = long long ; const i64 si = 5e5 + 10 ; const i64 inf = 0x3f3f3f3f ; i64 T ; i64 n ; i64 a [ si ], dp [ si ]; i64 sum [ si ], pos [ si ]; i64 t [ si ]; inline i64 lowbit ( i64 x ) { return x & - x ; } void add ( i64 p , i64 x ) { while ( p <= n ) { t [ p ] = max ( t [ p ], x ); p += lowbit ( p ); } } i64 ask ( i64 p ) { i64 res = - inf ; while ( p ) { res = max ( res , t [ p ]); p -= lowbit ( p ); } return res ; } int main () { cin >> T ; while ( T -- ) { std :: vector < pair < i64 , i64 > > v ; cin >> n ; sum [ 0 ] = 0 ; for ( i64 i = 1 ; i <= n ; ++ i ) cin >> a [ i ], sum [ i ] = sum [ i - 1 ] + a [ i ], v . push_back ({ sum [ i ], - i }); sort ( v . begin (), v . end ()); for ( i64 i = 0 ; i < n ; ++ i ) { pos [ - v [ i ]. second ] = i + 1 ; } for ( int i = 0 ; i <= n ; ++ i ) t [ i ] = - inf ; dp [ 0 ] = 0 ; for ( i64 i = 1 ; i <= n ; ++ i ) { i64 preval ; if ( a [ i ] == 0 ) preval = 0 ; if ( a [ i ] > 0 ) preval = 1 ; if ( a [ i ] < 0 ) preval = -1 ; dp [ i ] = dp [ i - 1 ] + preval ; // \u5904\u7406\u6700\u540e\u4e00\u6bb5\u957f\u5ea6\u4e3a 1 \u7684\u60c5\u51b5 dp [ i ] = max ( dp [ i ], ask ( pos [ i ]) + i ); // \u8be2\u95ee\u6700\u4f18\u503c\uff0c\u8f6c\u79fb\u8fc7\u6765 if ( sum [ i ] > 0 ) dp [ i ] = i ; // s[1 ~ i] \u5927\u4e8e\u96f6\uff0c\u6240\u4ee5\u8d21\u732e\u662f i\uff0c\u5fc5\u7136\u662f\u5f53\u524d\u6700\u4f18\u7684\u3002 add ( pos [ i ], dp [ i ] - i ); // \u63d2\u5165\u51b3\u7b56\u96c6\u5408\u3002 } cout << dp [ n ] << endl ; for ( int i = 0 ; i <= n ; ++ i ) dp [ i ] = pos [ i ] = sum [ i ] = a [ i ] = 0 ; } return 0 ; } 1 Tag : DP / \u6570\u636e\u7ed3\u6784\u4f18\u5316DP / \u4e00\u4e2a\u533a\u95f4DP\u7684\u7ecf\u5178\u6a21\u578b","title":"CF1668D/CF1667B Optimal Partition"},{"location":"rec/atcf-for-2022-04/#cf1672f1-array-shuffling","text":"Apr/23/2022 \u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u5b9a\u4e49\u4e00\u4e2a \\(a\\) \u7684\u6392\u5217 \\(b\\) \u7684\u8d21\u732e\u4e3a\uff0c\u901a\u8fc7\u4ea4\u6362 \\(a\\) \u4e2d\u4efb\u610f\u4e24\u4e2a\u6570\u82e5\u5e72\u6b21\uff0c\u5f97\u5230 \\(b\\) \u7684\u6700\u5c0f\u4ea4\u6362\u6b21\u6570\u3002 \u6c42 \\(a\\) \u7684\u6240\u6709\u6392\u5217\u4e2d\u8d21\u732e\u6700\u5927\u7684\u90a3\u4e00\u4e2a\u6392\u5217\uff0c\u5e76\u8f93\u51fa\u3002 \\(n \\le 2e5, a_i, b_i \\in [1, n]\\) \u3002 \u8fd9\u662f\u4e00\u9053\u5173\u4e8e\u7f6e\u6362\u73af\u7684\u7ed3\u8bba\u9898\uff0c\u5728 zhihu \u4e0a\u770b\u5230\u4e86\u4e00\u4e2a\u94fe\u63a5\uff0c\u7ed9\u51fa\u4e86\u8fd9\u4e2a\u7ed3\u8bba\u7684 \u8bc1\u660e \u5047\u8bbe\u539f\u5e8f\u5217 \\(a\\) \u662f\u8fd9\u6837\u7684\uff1a \\[1\\ \\ 1\\ \\ 4\\ \\ 5\\ \\ 1\\ \\ 4\\] \u6392\u5e8f\u540e\u7684 \\(b\\) \u662f\u8fd9\u6837\u7684 \\[1\\ \\ 4\\ \\ 5\\ \\ 1\\ \\ 1\\ \\ 4\\] \u5c06\u4ed6\u4eec\u653e\u5230\u4e00\u8d77\uff1a \\[a= 1\\ \\ 1\\ \\ 4\\ \\ 5\\ \\ 1\\ \\ 4 \\] \\[b = 1\\ \\ 4\\ \\ 5\\ \\ 1\\ \\ 1\\ \\ 4\\] \u53ef\u4ee5\u53d1\u73b0\uff0c \\(a_2\\) \u88ab\u6362\u5230\u4e86\u4f4d\u7f6e \\(4\\) \uff0c \\(a_3\\) \u88ab\u6362\u5230\u4e86\u4f4d\u7f6e \\(2\\) \uff0c \\(a_4\\) \u88ab\u6362\u5230\u4e86\u4f4d\u7f6e \\(3\\) \u3002 \u7528\u7bad\u5934\u8868\u793a\u5c31\u662f\uff1a \\([3]\\to [2], [2] \\to [4],[4] \\to [3]\\) \uff0c\u8fd9\u662f\u4e00\u4e2a\u73af\u72b6\u7ed3\u6784\uff0c\u79f0\u5b83\u4e3a\u201c \u7f6e\u6362\u73af \u201d\u3002 \u5f53\u7136\uff0c\u5982\u679c\u662f\u81ea\u5df1\u6362\u5230\u81ea\u5df1\uff0c\u4e5f\u53ef\u4ee5\u7b97\u4f5c\u4e00\u4e2a\u7f6e\u6362\u73af\uff0c\u6240\u4ee5\u8fd9\u91cc\u7684\u7f6e\u6362\u73af\u8fd8\u6709 \\([1] \\to [1], [5] \\to [5], [6] \\to [6]\\) \u3002 \u4f46\u662f\u5982\u679c\u662f \\(a_1 = a_5 = b_1 = b_5\\) \u8fd9\u79cd\u60c5\u51b5\uff0c \\([1] \\to [5], [5] \\to [1]\\) \u662f\u4e0d\u80fd\u7b97\u4f5c\u4e00\u4e2a\u7f6e\u6362\u73af\u7684\uff0c\u5e94\u5f53\u5355\u72ec\u8003\u8651\u6210 \\([1] \\to [1], [5] \\to [5]\\) \u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c \\(a_i = b_i\\) \uff0c\u90a3\u4e48 \\(i\\) \u4e00\u5b9a\u5904\u4e8e\u81ea\u5df1\u6307\u5411\u81ea\u5df1\u7684\u4e00\u4e2a\u7f6e\u6362\u73af\u4e0a\u3002 \u73b0\u5728\u53c8\u6709\u4e00\u4e2a\u7ed3\u8bba\uff1a \u5bf9\u4e8e\u4e00\u4e2a\u6709 \\(k\\) \u4e2a\u8282\u70b9\u7684\u7f6e\u6362\u73af\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u73af\u4e0a\u7684\u6240\u6709\u4f4d\u7f6e \\(i\\) \uff0c\u7531 \\(a_i \\to b_i\\) \uff0c\u9700\u8981\u7684\u6700\u5c0f\u4ea4\u6362\u6b21\u6570\u662f \\(F=k - 1\\) \u3002 \u53e6\u4e00\u4e2a\u7ed3\u8bba\uff1a \\(a \\to b\\) \u7684\u6700\u5c0f\u4ea4\u6362\u6b21\u6570 \\(F\\) \uff0c\u7b49\u4e8e\u5e8f\u5217\u957f\u5ea6 \\(n\\) \u51cf\u53bb\u7f6e\u6362\u73af\u4e2a\u6570 \\(cnt\\) \u3002 \u8fd9\u4e24\u4e2a\u5f88\u5bb9\u6613\u8bc1\u660e\uff0c\u7b2c\u4e00\u4e2a\u663e\u7136\uff0c\u7b2c\u4e8c\u4e2a\u53ef\u4ee5\u8003\u8651\u53ea\u6709\u4e00\u4e2a\u957f\u5ea6\u5927\u4e8e \\(1\\) \u7684\u73af\uff0c\u5176\u4ed6\u90fd\u662f\u81ea\u73af\u7684\u60c5\u51b5\u3002 \u90a3\u4e48\u5f52\u7eb3\u5c31\u80fd\u8bc1\u660e\uff08\u56e0\u4e3a\u4f60\u53ef\u4ee5\u628a\u5e8f\u5217\u62c6\u5f00\u6765\u770b\u7136\u540e\u5408\u8d77\u6765\uff09\u3002 \u4e0a\u9762\u8bf4\u7684 \\(a_i = b_i\\) \uff0c\u5219 \\(i\\) \u81ea\u5df1\u5f62\u6210\u4e00\u4e2a\u7f6e\u6362\u73af\u7684\u6761\u4ef6\u4e5f\u53ef\u4ee5\u6269\u5c55\u6210\uff1a \u7f6e\u6362\u73af\u4e0a\u4e0d\u80fd\u6709\u4e24\u4e2a \\(a_i = a_j\\) \u7684\u4f4d\u7f6e \\(i,j\\) \u3002 \u5047\u8bbe\u6709\u4e00\u4e2a\u7f6e\u6362\u73af\uff0c\u6362\u4e0a\u7684\u5143\u7d20\u7528\u5b83\u7684\u6743\u503c\u8868\u793a\uff1a \\[5 \\to 1 ,1 \\to 4, 4 \\to 1, 1 \\to 5\\] \u4e5f\u5c31\u662f \\(1 4 1 5\\) \u53d8\u6210 \\(4151\\) \u3002 \u7528\u7ed3\u8bba \\(2\\) \u53ef\u4ee5\u5f97\u5230\u5b83\u7684\u6700\u5c0f\u4ea4\u6362\u6b21\u6570\u662f \\(3\\) \u3002 \u4f46\u662f\uff0c\u5b9e\u9645\u4e0a\u53ea\u9700\u8981\u4ea4\u6362 \\([2],[1]\\) \uff0c\u7136\u540e\u4ea4\u6362 \\([3],[4]\\) \uff0c\u53ea\u9700\u8981 \\(2\\) \u6b21\u5c31\u53ef\u4ee5\u4e86\u3002 \u6240\u4ee5 \u7f6e\u6362\u73af\u4e0a\u4e0d\u80fd\u6709\u6743\u503c\u76f8\u540c\u7684\u5143\u7d20 \u3002 \u597d\uff0c\u90a3\u4e48\u73b0\u5728\u6765\u770b\u8fd9\u9053\u9898\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u8981\u4f60\u6c42\u51fa\u4f7f\u5f97 \\(F\\) \u6700\u5927\u7684\u90a3\u4e00\u4e2a\u6392\u5217\u3002 \u5199\u51fa\u5f0f\u5b50\uff1a \\(F = n - cnt\\) \uff0c \\(n\\) \u662f\u5e38\u6570\uff0c\u6240\u4ee5\u8ba9 \\(cnt\\) \u5c3d\u91cf\u5c0f\u5373\u53ef\u3002 \u800c\u7f6e\u6362\u73af\u4e0a\u4e0d\u80fd\u6709\u6743\u503c\u76f8\u540c\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u6bcf\u6b21\u9009\u53d6\u5c3d\u53ef\u80fd\u591a\u7684\u4e0d\u540c\u5143\u7d20\u6784\u9020\u4e00\u4e2a\u7f6e\u6362\u73af\uff0c\u7136\u540e\u628a\u88ab\u9009\u4e2d\u7684\u8fd9\u4e2a\u5b50\u5e8f\u5217 \u5faa\u73af\u5de6\u79fb \u4e00\u4f4d\u3002 \u53ef\u4ee5\u901a\u8fc7\u7f6e\u6362\u73af\u672c\u8eab\u7684\u5f62\u72b6\uff0c\u8bc1\u660e\u8fd9\u6837\u5b50\u505a\u5c31\u4f1a\u8ba9\u7f6e\u6362\u73af\u4e0a\u7684\u4ea4\u6362\u6b21\u6570\u8fbe\u5230 \\(k-1\\) \u3002 \u7136\u540e\u4e00\u76f4\u8fd9\u4e48\u505a\uff0c\u76f4\u5230\u53ea\u5269\u4e00\u79cd\u5143\u7d20\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 #include <bits/stdc++.h> using namespace std ; const int si = 2e5 + 10 ; int n ; int a [ si ]; std :: vector < int > cnt [ si ], pos [ si ]; #define pb emplace_back #define sz(v) ((int)v.size()) int main () { int T ; cin >> T ; while ( T -- ) { vector < int > tmp , ans ; cin >> n ; tmp . clear (), ans . clear (); ans . resize ( n + 1 ); for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; for ( int i = 1 ; i <= n ; ++ i ) cnt [ i ]. clear (), pos [ i ]. clear (); for ( int i = 1 ; i <= n ; ++ i ) cnt [ a [ i ]]. pb ( i ); for ( int i = 1 ; i <= n ; ++ i ) pos [ sz ( cnt [ i ])]. pb ( i ); for ( int i = 1 ; i <= n ; ++ i ) if ( sz ( pos [ i ]) > 0 ) tmp . pb ( i ); vector < int > qwq ; for ( int i = 1 ; i <= n ; ++ i ) { qwq . clear (); for ( auto j : tmp ) { if ( j >= i ) { for ( int k = 0 ; k < sz ( pos [ j ]); ++ k ) { qwq . pb ( cnt [ pos [ j ][ k ]][ sz ( cnt [ pos [ j ][ k ]]) - 1 ]); cnt [ pos [ j ][ k ]]. pop_back (); } } } if ( sz ( qwq ) > 0 ) { for ( int j = 0 ; j < sz ( qwq ) - 1 ; ++ j ) ans [ qwq [ j + 1 ]] = a [ qwq [ j ]]; ans [ qwq [ 0 ]] = a [ qwq . back ()]; } } for ( int i = 1 ; i <= n ; ++ i ) cout << ans [ i ] << \" \" ; cout << endl ; } return 0 ; } // tjx 1 Tag : \u7f6e\u6362\u73af","title":"CF1672F1 Array Shuffling"},{"location":"rec/atcf-for-2022-04/#cf1672f2-checker-for-array-shuffling","text":"Apr/27/2022 \u4f60\u9700\u8981\u5199\u4e00\u4e2a F1 \u7684Checker\uff0c\u5373\u5224\u5b9a\u7ed9\u5b9a\u7684\u5e8f\u5217 \\(b\\) \u662f\u4e0d\u662f \\(a\\) \u7684\u6700\u4f18\u89e3\u4e4b\u4e00\u3002 \u4f9d\u65e7\u8003\u8651 F1 \u7684\u7ed3\u8bba\uff0c\u6700\u4f18\u89e3\u5c31\u662f\u8ba9\u7f6e\u6362\u73af\u6570\u91cf\u66f4\u5c0f\uff0c\u6784\u9020\u5c3d\u53ef\u80fd\u5927\u7684\u7f6e\u6362\u73af\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u8003\u8651 F1 \u7684\u6784\u9020\u8fc7\u7a0b\uff0c\u4f60\u53d1\u73b0\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u90a3\u4e2a\u5143\u7d20\u5728\u4efb\u610f\u4e00\u4e2a\u7f6e\u6362\u73af\u4e0a\u90fd\u8981\u51fa\u73b0\uff0c\u5426\u5219\u4e0d\u662f\u6700\u4f18\u7684\u3002 \u56e0\u4e3a\u5047\u8bbe\u8fd9\u4e2a\u5143\u7d20\u9009\u5b8c\u4e4b\u540e\uff0c\u8fd8\u51fa\u73b0\u4e86\u53e6\u5916\u7684\u7f6e\u6362\u73af\uff0c\u8bc1\u660e\u8fd9\u4e2a\u5143\u7d20\u5fc5\u7136\u4e0d\u662f\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u90a3\u4e2a\u3002 \u6240\u4ee5\u5148\u4ece\u7f16\u53f7\u4e3a \\(b_i\\) \u7684\u70b9\u8fde\u5411 \\(a_i\\) \uff0c\uff08\u4ee5\u503c\u57df\u5927\u5c0f\u4e3a\u8282\u70b9\u4e2a\u6570\uff09\uff0c\u5220\u53bb\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u90a3\u4e2a\u3002 tips \u4e00\u822c\u627e\u7f6e\u6362\u73af\u7684\u65b9\u5f0f\u662f\u5bf9\u4e8e\u5e8f\u5217 \\(a\\) \u8bb0\u5f55\u4e00\u4e2a \\(lst(a_i)\\) \u8868\u793a \\(a_i\\) \u51fa\u73b0\u7684\u4f4d\u7f6e\u3002 \u7136\u540e\u626b\u4e00\u904d \\(b\\) \uff0c\u53ea\u8981 \\(lst(b_i)\\) \u4e0d\u7b49\u4e8e \\(i\\) \uff0c\u90a3\u4e48\u5c31\u7ed9 \\(i\\) \u548c \\(lst(b_i)\\) \u8fde\u4e00\u6761\u6709\u5411\u8fb9\u5373\u53ef\u3002 \u53ea\u662f\u8fd9\u9898\u6bd4\u8f83\u7279\u6b8a, \u503c\u57df\u662f \\([1, n]\\) \uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u8fde \\(a_i, b_i\\) \uff08\u53ea\u8981\u4e0d\u662f\u81ea\u73af\uff09\u3002 \u5982\u679c\u56fe\u4e2d\u8fd8\u5b58\u5728\u73af\uff0c\u90a3\u4e48\u5fc5\u7136\u4e0d\u662f\u6700\u4f18\u7684\uff0c\u8f93\u51fa WA \uff0c\u5426\u5219 AC \u3002 \u4f7f\u7528 Tarjan \u5373\u53ef\u7ebf\u6027\u5224\u662f\u5426\u6709\u5224\u73af\uff08\u5224\u65ad SCC \u7684\u5927\u5c0f\u662f\u5426 \\(>1\\) \uff09\uff0c\u4f46\u662f Tarjan \u5904\u7406\u4e0d\u4e86\u81ea\u73af\uff0c\u81ea\u73af\u9700\u8981\u7279\u5224\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 #include <stack> #include <cassert> #include <cstring> #include <iostream> #include <algorithm> #define yuyuko \"AC\" #define kawaii \"WA\" using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int n , a [ si ], b [ si ]; int exist [ si ]; // \u51fa\u73b0\u6b21\u6570 int most ; bool visited [ si ]; // \u662f\u5426\u8bbf\u95ee\u8fc7\u8fd9\u4e2a\u8282\u70b9 int tot = 0 ; int head [ si ]; struct Edge { int ver , Next ; } e [ si << 1 ]; inline void add ( int u , int v ) { e [ tot ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot ++ ; } int dfn [ si ], low [ si ]; int tim = 0 , cnt = 0 ; bool ins [ si ]; stack < int > s ; bool sol ; void init () { tot = 0 , tim = 0 , cnt = 0 , sol = true ; for ( int i = 0 ; i <= n ; ++ i ) { head [ i ] = -1 ; exist [ i ] = dfn [ i ] = low [ i ] = 0 ; visited [ i ] = ins [ i ] = false ; } } void tarjan ( int u ) { dfn [ u ] = low [ u ] = ++ tim ; s . push ( u ), ins [ u ] = true ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( ! dfn [ v ]) { tarjan ( v ); low [ u ] = min ( low [ u ], low [ v ]); } else if ( ins [ v ]) low [ u ] = min ( low [ u ], dfn [ v ]); } if ( dfn [ u ] == low [ u ]) { int x ; ++ cnt ; int num = 0 ; do { x = s . top (), s . pop (); ins [ x ] = false , num ++ ; } while ( u != x ); if ( num > 1 ) sol = false ; } return ; } void solve () { cin >> n , init (); for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], exist [ a [ i ]] += 1 ; most = max_element ( exist + 1 , exist + 1 + n ) - exist ; // \u51fa\u73b0\u6700\u9891\u7e41\u7684\u662f\u54ea\u4e2a // cerr << most << endl; for ( int i = 1 ; i <= n ; ++ i ) { cin >> b [ i ]; if ( a [ i ] == most || b [ i ] == most ) continue ; if ( a [ i ] == b [ i ]) sol = false ; // Tarjan \u5224\u4e0d\u4e86\u81ea\u73af\uff0c\u6240\u4ee5\u7279\u5224\u3002 add ( b [ i ], a [ i ]); } for ( int i = 1 ; i <= n ; ++ i ) if ( ! dfn [ i ] && i != most ) tarjan ( i ); if ( sol ) cout << yuyuko << endl ; else cout << kawaii << endl ; return ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) solve (); return 0 ; } 1 Tag : \u7f6e\u6362\u73af / Tarjan","title":"CF1672F2 Checker for Array Shuffling"},{"location":"rec/atcf-for-2022-04/#cf1672e-notepadexe","text":"Apr/24/2022 \u7ed9\u4f60\u4e00\u4e2a\u6587\u672c\u7f16\u8f91\u5668\uff0c\u6709 \\(n\\) \u4e2a\u5b57\u7b26\u4e32\uff0c\u957f\u5ea6\u5206\u522b\u4e3a \\(w_1,w_2,w_3\\dots\\) \u3002 \\(w\\) \u53ea\u6709 Grader \u624d\u77e5\u9053\uff0c\u4f60\u6bcf\u6b21\u53ef\u4ee5\u8be2\u95ee\u4e00\u4e2a\u5bbd\u5ea6 \\(W\\) \uff0cGrader \u4f1a\u8fd4\u56de\u4ee5\u8fd9\u4e2a\u5bbd\u5ea6\u663e\u793a\u6240\u6709\u5b57\u7b26\u4e32\u6240\u9700\u8981\u7684\u6700\u5c0f\u9ad8\u5ea6\u3002 \u5b57\u7b26\u4e32\u7684\u663e\u793a\u5fc5\u987b\u6309\u987a\u5e8f\uff0c\u540c\u4e00\u884c\u5185\u7684\u76f8\u90bb\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e4b\u95f4\u81f3\u5c11\u8981\u6709\u4e00\u4e2a\u7a7a\u683c\uff0c\u884c\u5185\u53ef\u4ee5\u6709\u4efb\u610f\u591a\u4e2a\u7a7a\u683c\u3002 \u5982\u679c \\(W < \\max\\{w_i\\}\\) \uff0c\u6587\u672c\u7f16\u8f91\u5668\u4f1a Crash\uff0cGrader \u4f1a\u8fd4\u56de \\(0\\) \u3002 \u95ee\u53ef\u80fd\u7684 \\(H\\times W\\) \u6700\u5c0f\u662f\u591a\u5c11\uff0c\u4f60\u6700\u591a\u53ef\u4ee5\u95ee \\(n + 30\\) \u6b21\u3002 \\(n,w_i \\le 2000\\) \u3002 \u9996\u5148\u770b\u5230 \\(30\\) \uff0c\u53ef\u4ee5\u8003\u8651\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u8ba9\u6240\u6709\u5b57\u7b26\u4e32\u90fd\u5728\u4e00\u884c\uff0c\u4e8c\u5206\u4f7f\u5f97\u8fd9\u79cd\u60c5\u51b5\u6700\u5c0f\u7684 \\(W\\) \uff0c\u8bbe\u8fd9\u4e2a \\(W = S\\) \u53ef\u4ee5\u53d1\u73b0 \\(S = \\sum w_i + n - 1\\) \uff0c\u4e5f\u5c31\u662f\u4ece\u957f\u5ea6\u52a0\u4e0a\u884c\u5185\u7a7a\u683c\u3002 \u53c8\u53ef\u4ee5\u53d1\u73b0\uff0c\u8981\u60f3\u6700\u4f18\uff0c \\(H\\) \u4e00\u5b9a\u5728 \\([1,n]\\) \u8fd9\u4e2a\u8303\u56f4\u4e4b\u5185\u3002 \u5047\u8bbe\u6211\u4eec\u4e8c\u5206\u7528\u5b8c\u4e86 \\(30\\) \u6b21\uff08\u5f53\u7136\u662f\u4e0d\u53ef\u80fd\u7528\u5b8c\u7684\uff09\u3002 \u7136\u540e\u8fd8\u5269 \\(n\\) \u6b21\uff0c\u521a\u597d\u591f\u6bcf\u4e00\u4e2a\u53ef\u80fd\u7684 \\(H\\) \u90fd\u95ee\u4e00\u904d\u3002 \u6240\u4ee5\u4e8c\u5206\u51fa \\(S\\) \u4e4b\u540e\u76f4\u63a5\u66b4\u529b\u95ee \\(W = S/H\\) \u7684\u60c5\u51b5\uff08\u6b64\u5904\u7684\u9664\u6cd5\u662f C++ \u7684\u9664\u6cd5\uff09 \u53ea\u8981\u7f16\u8f91\u5668\u6ca1\u6709 Crash\uff0c\u7edf\u8ba1\u7b54\u6848\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 int l = 1 , r = 2011 * 2011 ; while ( l < r ) { int mid = l + r >> 1 ; if ( ask ( mid ) == 1 ) r = mid ; else l = mid + 1 ; } int ans = l ; for ( int i = 1 ; i <= n ; ++ i ) { int x = ask ( l / i ); if ( x && ( l / i ) != 0 ) ans = min ( ans , ( l / i ) * x ); } cout << \"! \" << ans << endl ; 1 Tag : \u4e8c\u5206 / \u6784\u9020 / \u8d2a\u5fc3","title":"CF1672E notepad.exe"},{"location":"rec/atcf-for-2022-04/#cf1661d-progressions-covering","text":"Apr/25/2022 \u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u521d\u59cb\u5168\u90e8\u4e3a \\(0\\) \uff0c\u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(b\\) \u3002 \u4f60\u53ef\u4ee5\u5bf9 \\(a\\) \u505a\u4efb\u610f\u6b21\u8fd9\u6837\u7684\u64cd\u4f5c\uff1a \u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(k\\) \u7684\u533a\u95f4 \\([l,r]\\) \uff0c\u5206\u522b\u8ba9 \\(a_l,a_{l + 1},\\dots,a_{r}\\) \u52a0\u4e0a \\(1,2,3,\\dots,k\\) \u3002 \u95ee\u4f7f\u5f97 \\(\\forall i,a_i \\ge b_i\\) \u7684\u6700\u5c0f\u64cd\u4f5c\u6b21\u6570\u3002 \u8fd9\u662f\u4e00\u4e2a\u5173\u4e8e \u7b49\u5dee\u6570\u5217 \u7684\u7ecf\u5178 Trick\u3002 \u533a\u95f4 \\([l,r]\\) \u52a0\u7b49\u5dee\u6570\u5217\uff0c\u7b49\u540c\u4e8e\u5728 \u5dee\u5206\u6570\u7ec4 \u4e0a\u7684 \\([l + 1,r]\\) \u505a\u4e00\u6b21 \u533a\u95f4\u52a0 \\(d\\) \uff0c\u7136\u540e\u4ee4 \\(c[l] + \\text{BEGIN}\\) \uff0c \\(c[r+1] - \\text{END}\\) \u3002 \\(\\text{BEGIN,END}\\) \u5206\u522b\u662f\u9996\u9879\u548c\u672b\u9879\u3002 \u5355\u70b9\u8be2\u95ee\u53ea\u9700\u8981\u8be2\u95ee\u7ebf\u6bb5\u6811\u4e0a\u7684 \\(sum(1,pos)\\) \u5373\u53ef\u3002 \u53d1\u73b0\u5e8f\u5217 \\(a\\) \u5f00\u5934\u7684\u5143\u7d20\u53ea\u80fd\u4e00\u4e2a\u4e00\u4e2a\u51cf\u53bb\uff0c\u7ed3\u5c3e\u7684\u5143\u7d20\u53ea\u80fd \\(k\\) \u4e2a \\(k\\) \u4e2a\u51cf\u53bb\uff0c \u6700\u7ec8\u7ed3\u679c\u8981\u6c42\u6700\u5c0f\uff0c\u6240\u4ee5\u5c3d\u91cf\u8ba9\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u591a\u51cf\u53bb\u5927\u4e00\u70b9\u7684\u3002 \u8003\u8651\u4e00\u4e2a\u8d2a\u5fc3\uff0c\u4ece\u7ed3\u5c3e\u5f00\u59cb\u626b\uff0c\u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u7684\u503c \\(a_i\\) \u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u4e0d\u65ad\u52a0 \\(k\\) \u76f4\u5230 \\(b_i \\le a_i\\) \u3002 \u7136\u540e\u8fd9\u4e9b\u64cd\u4f5c\u5bf9\u4e8e\u524d\u9762\u7684\u8d21\u732e\u4e5f\u9700\u8981\u7b97\u4e0a\u3002 \u626b\u7684\u65f6\u5019\u7d2f\u52a0\u7b54\u6848\u5373\u53ef\u3002 \u4ee3\u7801\u76f4\u63a5\u5199\u4e86\u5dee\u5206\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #include <bits/stdc++.h> using namespace std ; int main () { int n , k ; scanf ( \"%d %d\" , & n , & k ); vector < long long > b ( n ); for ( auto & it : b ) { scanf ( \"%lld\" , & it ); } vector < long long > closed ( n ); long long sum = 0 , cnt = 0 , ans = 0 ; for ( int i = n - 1 ; i >= 0 ; -- i ) { sum -= cnt ; cnt -= closed [ i ]; b [ i ] -= sum ; if ( b [ i ] <= 0 ) { continue ; } int el = min ( i + 1 , k ); long long need = ( b [ i ] + el - 1 ) / el ; sum += need * el ; cnt += need ; ans += need ; if ( i - el >= 0 ) { closed [ i - el ] += need ; } } printf ( \"%lld \\n \" , ans ); return 0 ; } 1 Tag : \u5dee\u5206 / \u7ebf\u6bb5\u6811 / \u8d2a\u5fc3 / \u7b49\u5dee\u6570\u5217","title":"CF1661D Progressions Covering"},{"location":"rec/atcf-for-2022-04/#cf1661e-narrow-components","text":"Apr/27/2022 \u7ed9\u4f60\u4e00\u4e2a \\(3\\times m\\) \u7684 \\(01\\) \u77e9\u9635\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e00\u4e2a\u533a\u95f4 \\([l,r]\\) \uff0c\u6c42\u7b2c \\(l,r\\) \u8fd9\u4e24\u5217\u4e4b\u95f4\u6709\u591a\u5c11\u4e2a \\(1\\) \u8fde\u901a\u5757\u3002 \\(m,q \\le 3e5\\) \u3002 \u4e00\u4e2a\u4e00\u773c\u7684\u601d\u8def\u662f\uff0c\u7528\u6570\u4f4dDP\u4e2d\u7c7b\u4f3c\u524d\u7f00\u548c\u7684\u601d\u60f3\uff0c\u628a\u4e00\u4e2a \\([l,r]\\) \u7684\u8be2\u95ee\u8f6c\u5316\u6210 \\([1,l],[1,r]\\) \u7684\u4e24\u4e2a\u8be2\u95ee\u3002 \u6240\u4ee5\u8bbe \\(s_i\\) \u8868\u793a \\(1\\sim i\\) \u7684\u8fde\u901a\u5757\u4e2a\u6570\u3002 \u4f46\u662f\u8fd9\u91cc\u53d1\u73b0\u4e0d\u80fd\u76f4\u63a5\u51cf\uff0c\u56e0\u4e3a\u5f53\u4e24\u5217\u65ad\u5f00\u7684\u65f6\u5019\uff0c\u6709\u53ef\u80fd\u4f1a\u4ea7\u751f\u65b0\u7684\u8fde\u901a\u5757\uff0c\u6216\u8005\u4ee4\u8fde\u901a\u5757\u6570\u91cf\u51cf\u5c11\u3002 \u65e2\u7136\u6709\u8fd9\u79cd\u95ee\u9898\uff0c\u5c31\u5c1d\u8bd5\u89e3\u51b3\uff0c\u56e0\u4e3a\u524d\u7f00\u548c\u7684\u601d\u8def\u8fd8\u662f\u86ee\u5bf9\u7684\uff0c\u653e\u5f03\u4e86\u4f30\u8ba1\u4e00\u65f6\u534a\u4f1a\u513f\u60f3\u4e0d\u5230\u522b\u7684\u529e\u6cd5\u3002 \u6240\u4ee5\u53ef\u4ee5\u9884\u5904\u7406\u51fa\u4e00\u4e2a \\(m_i\\) \uff0c\u8868\u793a \\(i,i+1\\) \u8fd9\u4e24\u5217\u65ad\u5f00\u7684\u65f6\u5019\uff0c\u4f1a\u4ea7\u751f\u7684\u65b0\u8fde\u901a\u5757\u4e2a\u6570\u3002 \u7136\u540e\u8be2\u95ee\u7684\u65f6\u5019\u5e26\u4e0a \\(m\\) \u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 for ( int i = 0 ; i < n ; i ++ ) { s1 [ i + 1 ] = s1 [ i ] + a [ 0 ][ i ] + a [ 1 ][ i ] + a [ 2 ][ i ] - ( a [ 0 ][ i ] & a [ 1 ][ i ]) - ( a [ 1 ][ i ] & a [ 2 ][ i ]); } for ( int i = 0 ; i < n - 1 ; i ++ ) { s2 [ i + 1 ] = s2 [ i ] - ( a [ 0 ][ i ] & a [ 0 ][ i + 1 ]) - ( a [ 1 ][ i ] & a [ 1 ][ i + 1 ]) - ( a [ 2 ][ i ] & a [ 2 ][ i + 1 ]) + ( a [ 0 ][ i ] & a [ 1 ][ i ] & a [ 0 ][ i + 1 ] & a [ 1 ][ i + 1 ]) + ( a [ 1 ][ i ] & a [ 2 ][ i ] & a [ 1 ][ i + 1 ] & a [ 2 ][ i + 1 ]); } // when asking ans = s1 [ r ] - s1 [ l ] + s2 [ r - 1 ] - s2 [ l ]; \u4f46\u662f\u5982\u679c\u9047\u5230\uff1a 1 2 3 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 1 1 1 1 1 1 1 0 \u5c31\u4f1a G\uff0c\u6240\u4ee5\u9700\u8981\u5206\u7c7b\u8ba8\u8bba\u6709 \\(101\\) \u7684\u60c5\u51b5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ 0 ][ i ] & a [ 1 ][ i ] & a [ 2 ][ i ]) { int j = i + 1 ; while ( j < n && ( a [ 0 ][ j ] & ! a [ 1 ][ j ] & a [ 2 ][ j ])) j ++ ; if ( j < n && j > i + 1 && a [ 0 ][ j ] && a [ 1 ][ j ] && a [ 2 ][ j ]) { R [ j ] ++ ; if ( i + 1 < n ) L [ i + 1 ] ++ ; } i = j - 1 ; } } for ( int i = 1 ; i < n ; i ++ ) L [ i ] += L [ i - 1 ], R [ i ] += R [ i - 1 ]; \u672c\u9898\u8fd8\u6709\u7ebf\u6bb5\u6811+\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u6027\u7684\u505a\u6cd5\uff0c\u5e76\u4e14\u6709 [SDOI2013]\u57ce\u5e02\u89c4\u5212\u8fd9\u4e00\u9053\u7c7b\u4f3c\u7684\u9898\u76ee\uff08\u672c\u9898\u53ea\u80fd\u4f7f\u7528\u7ebf\u6bb5\u6811+\u5e76\u67e5\u96c6\u7ef4\u62a4\uff09\u3002 1 Tag : \u524d\u7f00\u548c / \u601d\u7ef4","title":"CF1661E Narrow Components"},{"location":"rec/atcf-for-2022-04/#cf1671e-preorder","text":"Apr/28/2022 \u7ed9\u4f60\u4e00\u68f5\u6709 \\(2^n-1\\) \u4e2a\u8282\u70b9\u7684\u6ee1\u4e8c\u53c9\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u4e0a\u53ea\u53ef\u80fd\u6709 A/B \u4e24\u79cd\u503c\u3002 \u4f60\u53ef\u4ee5\u5bf9\u505a\u4efb\u610f\u6b21\u8fd9\u6837\u7684\u64cd\u4f5c\uff1a \u5bf9\u4e8e\u4e00\u4e2a\u975e\u53f6\u5b50\u8282\u70b9 \\(u\\) \uff0c\u4ea4\u6362\u4ee5\u5b83\u7684\u5de6\u53f3\u513f\u5b50 \\(2u,2u+1\\) \u4e3a\u6839\u7684\u5b50\u6811\u3002 \u95ee\u53ef\u80fd\u5f97\u5230\u7684\u524d\u5e8f\u904d\u5386\u6709\u591a\u5c11\u79cd\u3002 \\(n \\le 18\\) \u3002 \u6bd4\u8f83 Tricky \u7684 Problem\u3002 \u8003\u8651\u8bbe \\(dp_u\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u6709\u591a\u5c11\u79cd\u53ef\u80fd\u65b9\u6848\u3002 \u6ce8\u610f\u5230\u9898\u76ee\u4e2d\u5bf9\u524d\u5e8f\u904d\u5386\u7684\u5b9a\u4e49\u662f\uff0c \\(u\\) \u4e0a \u7684\u5b57\u7b26 + \u5de6\u513f\u5b50\u7684\u524d\u5e8f\u904d\u5386 + \u53f3\u513f\u5b50\u7684\u524d\u5e8f\u904d\u5386 \u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a \\(2u,2u+1\\) \u7684 DP \u503c\u770b\u4f5c\u5e38\u91cf \u6765\u8003\u8651\u3002 \u8003\u8651\u5212\u5206\u96c6\u5408 \\(dp_u\\) \u3002 \u5982\u679c\u8bf4\u4e24\u9897\u5b50\u6811\u672c\u8d28\u4e0d\u540c\uff08\u5373\u662f\u4e0d\u540c\u6784\uff09\uff0c\u90a3\u4e48\u4e0d\u4ea4\u6362\u7684\u65f6\u5019\uff0c\u7531\u4e58\u6cd5\u539f\u7406\u53ef\u4ee5\u5f97\u5230\uff0c\u65b9\u6848\u6570\u4e3a \\(dp_{2u}\\times dp_{2u+1}\\) \u3002 \u4ea4\u6362\u4e4b\u540e\u53c8\u6709\u4e00\u4e2a \\(dp_{2u}\\times dp_{2u+1}\\) \u3002 \u6240\u4ee5\u4e24\u9897\u5b50\u6811\u4e0d\u540c\u6784\u65f6\uff0c \\(dp_{u} = 2\\times dp_{2u} \\times dp_{2u + 1}\\) \u3002 \u5982\u679c\u4e24\u9897\u5b50\u6811\u4e0d\u540c\u6784\uff0c\u65b9\u6848\u6570\u5c31\u53ea\u6709 \\(dp_{2u} \\times dp_{2u + 1}\\) \u3002 \u4f46\u662f\u6709\u4e2a\u95ee\u9898\uff1a \u90a3\u5982\u679c\u4e0d\u540c\u6784\u7684\u65f6\u5019\uff0c \\(2u\\) \u7684\u6240\u6709\u65b9\u6848\u4e2d\u6709\u4e00\u79cd\u548c \\(2u + 1\\) \u91cc\u7684\u4e00\u79cd\u65b9\u6848\u5b8c\u5168\u4e00\u81f4\u3002 \u4e0d\u4f1a\u7b97\u91cd\u5417\uff1f \u5176\u5b9e\u4e0d\u4f1a\uff0c\u4f60\u53ef\u4ee5\u53d1\u73b0\uff0c\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u7684\u5145\u8981\u6761\u4ef6\u5c31\u662f\u4e24\u9897\u5b50\u6811\u540c\u6784\u3002 \u5177\u4f53\u8bc1\u660e\u53ea\u9700\u8981 \u5148\u4ece\u513f\u5b50\u4e3a\u53f6\u5b50\u8282\u70b9\u7684\u8282\u70b9\u7684\u60c5\u51b5 \u5f00\u59cb\uff08\u6216\u8005\u8bf4\u5c31\u5728\u8fd9\u91cc\u5148\u731c\u4e00\u4e2a\u7ed3\u8bba\uff09\uff0c\u7136\u540e \u4e0d\u65ad\u5f80\u4e0a\u8d70\uff0c\u9012\u5f52\u8bc1\u660e\u7ed3\u8bba \u3002 \u600e\u4e48\u5224\u65ad\u540c\u6784\uff1f \u5176\u5b9e\u53ea\u9700\u8981\u8ba9\u9012\u5f52\u65f6\uff0c\u8bb0\u5f55\u4e00\u4e2a\u65b0\u7684 \\(preorder\\) \uff0c\u5e76\u5f3a\u5236\u8fd9\u4e2a \\(preorder\\) \u662f\u5b57\u5178\u5e8f\u6700\u5927\u7684\u90a3\u4e00\u4e2a\uff0c\u7136\u540e\u56e0\u4e3a\u8fd9\u662f\u6ee1\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u540c\u6784\u53ea\u9700\u8981\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u76f8\u7b49\u5373\u53ef\u3002 \u6240\u4ee5\u5c31\u4e0d\u7528\u5199\u6811\u54c8\u5e0c\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #include <cstring> #include <iostream> #include <algorithm> using namespace std ; using i64 = long long ; const int si = ( 1 << 18 ) + 1 ; constexpr int mod = 998244353 ; int n , ans = 1 ; string preorder ; string cons [ si ]; void dfs ( int p , int len ) { if ( len == 1 ) { cons [ p ] = preorder [ p ]; return ; } dfs ( p << 1 , len / 2 ), dfs ( p << 1 | 1 , len / 2 ); if ( cons [ p << 1 ] > cons [ p << 1 | 1 ]) swap ( cons [ p << 1 ], cons [ p << 1 | 1 ]); if ( cons [ p << 1 ] != cons [ p << 1 | 1 ]) ans = ( ans + ans ) % mod ; cons [ p ] = preorder [ p ] + cons [ p << 1 ] + cons [ p << 1 | 1 ]; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> preorder ; preorder = ' ' + preorder ; dfs ( 1 , ( 1 << n ) - 1 ); cout << ans << endl ; return 0 ; } 1 Tag : \u6811\u5f62DP / \u6811\u7684\u540c\u6784 / \u6811\u7684\u524d\u5e8f\u904d\u5386","title":"CF1671E Preorder"},{"location":"rec/atcf-for-2022-04/#cf1668e-cf1667c-half-queen-cover","text":"Apr/28/2022 \u7ed9\u4f60\u4e00\u4e2a \\(n\\times n\\) \u7684\u68cb\u76d8\uff0c\u548c\u65e0\u9650\u4e2a\u7687\u540e\uff0c\u4f46\u662f\u8fd9\u91cc\u7684\u7687\u540e\u53ea\u80fd\u653b\u51fb\u540c\u884c\u5217\u548c\u4ece\u5de6\u4e0a\u5230\u53f3\u4e0b\u7684\u5bf9\u89d2\u7ebf\u3002 \u53e6\u5916\u4e00\u6761\u5bf9\u89d2\u7ebf\u653b\u51fb\u4e0d\u5230\uff0c\u95ee\u6700\u5c11\u9700\u8981\u591a\u5c11\u4e2a\u7687\u540e\u624d\u80fd\u8986\u76d6\u6574\u4e2a\u68cb\u76d8\uff0c\u7687\u540e\u4e4b\u95f4\u662f\u5426\u653b\u51fb\u4e0d\u7ba1\u3002 \\(1\\le n \\le 1e5\\) \uff0c\u6784\u9020\u89e3\u3002 \u4e00\u4e2a\u5f88\u5999\u7684\u6784\u9020\u9898\uff0c\u4f5c\u4e3a\u9898\u672c\u8eab\u662f\u5f88\u5999\u7684\uff0c\u4f46\u662f\u8fd9\u79cd\u4e1c\u897f\u653e\u5728 div2 E \u6211\u89c9\u5f97\u5f88\u70e6\u3002 \u8003\u8651\u6700\u4f18\u89e3\u653e\u4e86 \\(k\\) \u4e2a Queen\uff0c\u4e14\u4e0d\u8003\u8651\u5bf9\u89d2\u7ebf\uff0c\u90a3\u4e48\u53ef\u4ee5\u628a Queen \u79fb\u52a8\u6210\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 x o o o o o o o x o o o o o o o x o o o o o o o . . . . x \u662f Queen o o o . . . . o \u662f Under o o o . . . . Attack \u7684\u683c\u5b50 o o o . . . . \u53ef\u4ee5\u53d1\u73b0\uff0c\u73b0\u5728\u5269\u4e0b\u4e86\u4e00\u4e2a \\((n-k) \\times (n -k)\\) \u7684\u77e9\u9635\u3002 \u5fc5\u7136\u662f\u7528 Queen \u7684\u5bf9\u89d2\u7ebf\u6765\u8986\u76d6\uff0c\u6240\u4ee5\u9700\u8981 \\(2\\times (n - k) - 1\\) \u4e2a Queen\u3002 \u6240\u4ee5\u53ef\u4ee5\u5217\u51fa\u4e0d\u7b49\u5f0f\uff1a \\(2\\times(n - k) - 1 \\le k\\) \u3002 \u53ef\u4ee5\u5f97\u5230 \\(k = \\lceil \\frac{2n - 1}{3} \\rceil\\) \u3002 \u90a3\u4e48\u6700\u5c11\u9700\u8981\u7684 Queen \u7684\u4e2a\u6570\u5c31\u662f \\(\\lceil \\frac{2n - 1}{3} \\rceil\\) \u4e2a\u3002 \u81f3\u4e8e\u6784\u9020\u89e3\uff0c\u53ea\u9700\u8981\u5206\u522b\u8ba9\u4ed6\u4eec\u8986\u76d6\u4e00\u4e2a\u5bf9\u89d2\u7ebf\u5373\u53ef\u3002 \u4f46\u662f\u8fd8\u9700\u8981\u4fdd\u8bc1\u90a3\u4e2a \\((n-k) \\times (n - k)\\) \u77e9\u9635\u4e4b\u5916\u7684\u5730\u65b9\u90fd\u8981\u88ab Attack\u3002 \u6240\u4ee5\u8fd8\u9700\u8981\u4fdd\u8bc1\u8fd9\u4e9b Queen \u4e92\u76f8\u4e0d\u5728\u540c\u884c\u5217\u4e0a\uff08\u5728\u5de6\u4e0a\u7684 \\(k\\times k\\) \u7684\u5730\u65b9\u653e\uff09\u3002 \u8fd9\u91cc\u7684\u4e00\u4e2a Trick \u662f\uff0c\u628a Queen \u5f53\u6210\u56fd\u9645\u8c61\u68cb\u91cc\u9762\u7684 Knight \u6765\u79fb\u52a8\u3002 \u6bd4\u5982 \\(5 \\times 5\\) \u7684\u65f6\u5019\uff1a 1 2 3 4 5 x . . . . . . . x . . x . . . . . . . x . . x . . \u7136\u540e\u5c31\u505a\u5b8c\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #include <cmath> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; int n , k ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n ; if ( n == 1 ) { cout << \"1 \\n \" << \"1 1 \\n \" ; return 0 ; } k = ceil ((( 2 * n - 1 ) * 1.0 ) / 3.0 ); cout << k << endl ; for ( int i = 1 , j = 1 ; i <= k ; ++ i ) { cout << i << \" \" << j << endl ; j = ( j + 2 > k ) ? 2 : j + 2 ; } return 0 ; } 1 Tag : \u6784\u9020 / \u601d\u7ef4","title":"CF1668E &amp; CF1667C Half Queen Cover"},{"location":"rec/atcf-for-2022-04/#cf1665d-gcd-guess","text":"Grader \u6709\u4e00\u4e2a\u6574\u6570 \\(x, 1\\le x \\le 10^9\\) \u3002 \u4f60\u6709 \\(30\\) \u6b21\u673a\u4f1a\uff0c\u6bcf\u6b21\u53ef\u4ee5\u8be2\u95ee \\(\\gcd(x + a, x + b)\\) \u662f\u591a\u5c11\uff0c \\(|a,b| \\le 2\\times 10^9\\) \u3002 \u8bf7\u4f60\u95ee\u51fa \\(x\\) \u3002 \u53d1\u73b0 \\(\\lceil \\log_2(10^9) \\rceil = 30\\) \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e8c\u5206\u6216\u8005\u5bf9 \\(x\\) \u4e8c\u8fdb\u5236\u62c6\u5206\u3002 \u4e8c\u5206\u663e\u7136\u4e0d\u53ef\u884c\uff0c\u56e0\u4e3a \\(\\gcd\\) \u5728\u672c\u9898\u7684\u8981\u6c42\u4e0b\u662f\u6ca1\u6709\u5355\u8c03\u6027\u8d28\u7684\uff0c\u6211\u8d5b\u65f6\u5c31\u662f\u88ab\u8fd9\u4e2a\u5361\u4f4f\u4e86\uff0c\u4e00\u76f4\u6ca1\u6709\u60f3\u5230\u4ed6\u6ca1\u6709\u5355\u8c03\u6027\u7136\u540e\u53d6\u8003\u8651\u4e8c\u8fdb\u5236\u62c6\u5206\u3002 \u6240\u4ee5\u5bf9 \\(x\\) \u4e8c\u8fdb\u5236\u62c6\u5206\uff0c\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u9760\u4e00\u6b21\u8be2\u95ee\u95ee\u51fa \\(x\\) \u7684\u67d0\u4e00\u4f4d\u662f \\(0\\) \u8fd8\u662f \\(1\\) \u3002 \u505a\u6cd5\u5f88\u7b80\u5355\uff0c\u628a \\(i\\) \u4f4d\u4ee5\u524d\u7684\u4f4d\u5168\u90e8\u7f6e\u4e3a \\(0\\) \uff0c\u8bbe\u73b0\u5728\u7684\u6570\u662f \\(x\\prime\\) \u3002 \u6bcf\u6b21\u8be2\u95ee \\(\\gcd(x\\prime + 1, 2^{i + 1}) = 2^{i + 1}\\) \u662f\u5426\u6210\u7acb\u5373\u53ef\u3002 \u5982\u679c\u6210\u7acb\uff0c\u5219\u7b2c \\(i\\) \u4f4d\u662f \\(1\\) \uff0c\u53cd\u4e4b\u4e3a \\(0\\) \u3002 \u7136\u540e\u9898\u76ee\u8981\u6c42\u95ee\u7684\u662f \\(\\gcd(x + a, x + b)\\) \uff0c\u4e14 \\(a,b\\) \u53ef\u4ee5\u662f\u8d1f\u6570\uff0c \u6240\u4ee5\u8bb0\u5f55\u4e00\u4e2a\u53d8\u91cf \\(r\\) \uff0c\u8868\u793a\u5f53\u524d\u4e00\u5171\u51cf\u53bb\u4e86\u591a\u5c11\u3002 \u7136\u540e\u8be2\u95ee \\(a = - r + 2^{i - 1}, b = 2^{i} + a\\) \u5373\u53ef\u3002 \u8fd9\u4e2a\u662f\u66f4\u76f8\u51cf\u635f\u672f\u7684\u7ed3\u8bba\uff1a \\(\\forall a \\ge b \\in \\mathbb{N}, \\gcd(a, b) = \\gcd(b, a - b) = \\gcd(a, a - b)\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int n , m ; int a [ si ], b [ si ]; int query ( int a , int b ) { cout << \"? \" << a << \" \" << a + b << endl ; int get ; cin >> get ; return get ; } void solve () { int r = 0 ; for ( int i = 1 ; i <= 30 ; ++ i ) { int ans = query (( 1 << ( i - 1 )) - r , ( 1 << i )); if ( ans == ( 1 << i )) r += ( 1 << ( i - 1 )); } cout << \"! \" << r << endl ; } 1 Tag : gcd / \u6570\u8bba","title":"CF1665D GCD Guess"},{"location":"rec/atcf-for-2022-04/#abc247f-cards","text":"\u6709 \\(n\\) \u5f20\u5361\u7247,\u6bcf\u5f20\u5361\u7247\u6b63\u9762\u6709\u4e00\u4e2a\u6570\u5b57 \\(a_i\\) ,\u80cc\u9762\u4e5f\u6709\u4e00\u4e2a\u6570\u5b57 \\(b_i\\) , \u4fdd\u8bc1\u6240\u6709\u724c\u4e2d\u6b63\u9762\u548c\u53cd\u9762\u51fa\u73b0\u7684\u6570\u5b57\u90fd\u662f\u4e00\u4e2a\u6392\u5217,\u73b0\u5728\u60f3\u8981\u53d6\u4e00\u4e9b\u724c,\u8fd9\u4e9b\u724c\u6b63\u53cd\u9762\u5fc5\u987b\u5305\u542b \\(1 \\sim n\\) \u7684\u6240\u6709\u6570\u5b57,\u6c42\u65b9\u6848\u6570. \u53ef\u4ee5\u628a\u724c\u770b\u4f5c\u8fde\u63a5 \\(a_i, b_i\\) \u4e24\u4e2a\u8282\u70b9\u7684\u8fb9\uff0c \u6bcf\u4e2a\u70b9\u7684\u51fa\u5165\u5ea6\u5c31\u5fc5\u7136\u4e3a \\(1\\) \u3002 \u7136\u540e\u539f\u56fe\u8f6c\u5316\u6210\u591a\u4e2a\u4e0d\u8fde\u901a\u7684\u73af\uff0c\u65b9\u6848\u6570\u5c31\u662f\u4ed6\u4eec\u7684\u5404\u81ea\u7684\u65b9\u6848\u4e58\u8d77\u6765\uff08\u4e58\u6cd5\u539f\u7406\uff09. \u8003\u8651\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u73af\u7684\u7b54\u6848\u3002 \u8bbe \\(dp_{i,0/1}\\) \u8868\u793a\u9009 \\(i\\) \u6216\u8005\u4e0d\u9009 \\(i\\) \u7684\u65b9\u6848\u3002 \u5982\u679c \\(i\\) \u9009\u4e86\uff0c\u90a3\u4e48\u548c \\(i\\) \u76f8\u540c\uff08\u5728\u73af\u4e0a\u4e5f\u5e94\u8be5\u662f\u76f8\u90bb\u7684\uff09\uff0c\u7684\u8282\u70b9\u5c31\u53ef\u9009\u53ef\u4e0d\u9009\u3002 \u8fd9\u4e2a\u662f\u4e00\u4e2a\u72b6\u6001\u673a\u6a21\u578b\uff0c\u73af\u7684\u5904\u7406\u5c31\u5f3a\u5236\u9009 \\(1\\) \uff0c\u5f3a\u5236\u4e0d\u9009 \\(1\\) \u5206\u522b\u8dd1\u4e00\u904d\u3002 \u7b2c\u4e00\u79cd\u60c5\u51b5 \\(n\\) \u968f\u610f\u53d6\uff0c\u7b2c\u4e8c\u79cd\u5fc5\u987b\u53d6\u3002 \u7136\u540e\u7279\u5224\u4e0b\u81ea\u73af\u5c31\u884c\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 #include <iostream> #include <cstring> #include <algorithm> using namespace std ; typedef long long LL ; const int maxn = 2e5 + 5 , mod = 998244353 ; int a [ maxn ], b [ maxn ]; bool v [ maxn ]; LL f1 [ maxn ][ 2 ]; LL f2 [ maxn ][ 2 ]; #define x first #define y second int main (){ int n ; cin >> n ; f1 [ 1 ][ 0 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ){ f1 [ i ][ 0 ] = f1 [ i - 1 ][ 1 ]; f1 [ i ][ 1 ] = ( f1 [ i - 1 ][ 0 ] + f1 [ i - 1 ][ 1 ]) % mod ; } f2 [ 1 ][ 1 ] = 1 ; for ( int i = 2 ; i <= n ; i ++ ){ f2 [ i ][ 0 ] = f2 [ i - 1 ][ 1 ]; f2 [ i ][ 1 ] = ( f2 [ i - 1 ][ 0 ] + f2 [ i - 1 ][ 1 ]) % mod ; } for ( int i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & a [ i ]); for ( int i = 1 ; i <= n ; i ++ ){ int x ; scanf ( \"%d\" , & x ); b [ a [ i ]] = x ; } LL res = 1 ; for ( int i = 1 ; i <= n ; i ++ ){ if ( ! v [ i ]){ int cnt = 0 ; for ( int j = i ; ! v [ j ]; j = b [ j ]){ v [ j ] = 1 ; cnt ++ ; } if ( cnt != 1 ) res = res * ( f1 [ cnt ][ 1 ] + f2 [ cnt ][ 0 ] + f2 [ cnt ][ 1 ]) % mod ; } } cout << res << '\\n' ; } // \u8d3a\u7684 // https://zhuanlan.zhihu.com/p/496253093 1 Tag : DP / \u72b6\u6001\u673a / \u56fe\u8bba\u5173\u7cfb","title":"ABC247F Cards"},{"location":"rec/atcf-for-2022-04/#abc246f-typewriter","text":"\u7ed9\u4f60 \\(N(1\\le N \\le 18)\\) \u4e2a\u96c6\u5408 \\(S_i \\in \\{\\texttt{a} \\sim \\texttt{z}\\}\\) \u3002 \u4f60\u53ef\u4ee5\u9009\u62e9\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u96c6 \\(S_i\\) \uff0c\u7136\u540e\u7528\u5b83\u7684\u5b57\u7b26\u6253\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(L \\le 10^9\\) \u7684\u5b57\u7b26\u4e32\u3002 \u95ee\u53ef\u80fd\u7684\u65b9\u6848\u6570\uff0c\u5bf9 \\(998244353\\) \u53d6\u6a21\u3002 \u53d1\u73b0\u8ba1\u7b97\u4e00\u4e2a\u96c6\u5408\u80fd\u6253\u51fa\u591a\u5c11\u4e2a\u5b57\u7b26\u4e32\u662f\u5f88\u7b80\u5355\u7684\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e\u4e58\u6cd5\u539f\u7406\u5373\u53ef\u3002 \u4f46\u662f\u9ebb\u70e6\u7684\u5730\u65b9\u5c31\u5728\u4e8e\u8ba1\u7b97\u91cd\u590d\uff0c\u600e\u4e48\u641e\u5462\uff1f \u6211\u4eec\u8003\u8651\u8bbe \\(A_i\\) \u8868\u793a \\(S_i\\) \u80fd\u6253\u51fa\u6765\u7684\u5b57\u7b26\u4e32\u7684\u96c6\u5408\u3002 \u90a3\u4e48\u6700\u7ec8\u6211\u4eec\u8981\u6c42\u7684\u7b54\u6848\u5c31\u662f \uff1a \\[|A_1 \\cup A_2 \\cup A_3 \\cup \\dots \\cup A_n|\\] \u53d1\u73b0\u8fd9\u4e2a\u5f0f\u5b50\u5f88\u5bb9\u6613\u4f7f\u7528\u5bb9\u65a5\u539f\u7406\u8ba1\u7b97\u3002 \\[|A_1 \\cup A_2 \\cup A_3 \\cup \\dots \\cup A_n| = \\] \\[\\sum\\limits_{i = 1}^{n} |A_i| - \\sum\\limits_{1\\le i < j \\le n} |A_i \\cap A_j| + \\sum\\limits_{1\\le i < j < k \\le n} |A_i \\cap A_j \\cap A_k| \\dots + (-1)^{n + 1} |A_1 \\cap A_2 \\cap \\dots \\cap A_n|\\] \u6240\u4ee5\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u8ba1\u7b97\u4efb\u610f\u4e24\u4e2a\u96c6\u5408 \\(A_i,A_j\\) \u7684\u4ea4\u96c6\u3002 \u53d1\u73b0\u76f4\u63a5\u8ba1\u7b97\u5f88\u4e0d\u597d\u641e\uff0c\u6211\u4eec\u53d1\u73b0 \\(S_i, S_j\\) \u5927\u5c0f\u5f88\u5c0f\uff0c\u5206\u6790\u4e00\u6ce2\u6027\u8d28\u53ef\u4ee5\u53d1\u73b0\uff1a \\(A_i \\cap A_j = A_{|S_i \\cap S_j|}\\) \u3002 \u4e5f\u5c31\u662f\u5148\u5bf9 \\(S_i, S_j\\) \u6c42\u4e2a\u4ea4\u96c6\uff0c\u518d\u770b\u8fd9\u4e2a\u4ea4\u96c6\u80fd\u751f\u6210\u7684\u5b57\u7b26\u4e32\u6570\u91cf\u662f\u591a\u5c11\u3002 \u7136\u540e\u8fd9\u4e2a\u9898\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u6c42\u4ea4\u96c6\u662f \\(\\text{O}(2^{\\text{|S|}})\\) \u7684\u3002 \u7136\u540e\u8fd9\u73a9\u610f\u513f\u5c31\u80fd\u5f88\u5feb\u6c42\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #include <bits/stdc++.h> #define mod 998244353 using namespace std ; long long power ( long long a , long long b ){ long long x = 1 , y = a ; while ( b > 0 ){ if ( b & 1l l ){ x = ( x * y ) % mod ; } y = ( y * y ) % mod ; b >>= 1 ; } return x % mod ; } int main (){ int n , k ; cin >> n >> k ; vector < int > v ( n , 0 ); for ( int i = 0 ; i < n ; i ++ ){ string s ; cin >> s ; for ( auto & nx : s ){ v [ i ] |= ( 1 << ( nx - 'a' ));} } long long res = 0 ; for ( int i = 1 ; i < ( 1 << n ); i ++ ){ int ch = ( 1 << 26 ) -1 ; for ( int j = 0 ; j < n ; j ++ ){ if ( i & ( 1 << j )){ ch &= v [ j ];} } int pc = __builtin_popcount (( unsigned int ) ch ); if ( __builtin_popcount (( unsigned int ) i ) % 2 ){ res += power ( pc , k ); res %= mod ;} else { res += ( mod - power ( pc , k )); res %= mod ;} } cout << res << '\\n' ; return 0 ; } 1 Tag : \u5bb9\u65a5\u539f\u7406","title":"ABC246F typewriter"},{"location":"rec/atcf-for-2022-05/","text":"\u4e94\u6708\u597d\u9898\u6539\u9519 \u03c8(\uff40\u2207\u00b4)\u03c8 CF1670E Hemose on the Tree \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60 \\(n = 2^p\\) \u4e2a\u8282\u70b9\u7684\u4e00\u68f5\u6811\uff0c\u4f60\u9700\u8981\u4e3a\u6240\u6709\u70b9\u548c\u8fb9\u4e00\u4e2a\u6743\u503c \\(v\\) \u3002 \u4e14 \\(\\forall v \\in [1, 2^{n + 1} - 1]\\) \u3002 \u4f60\u53ef\u4ee5\u4efb\u610f\u9009\u62e9\u4e00\u4e2a\u6839\uff0c\u8981\u6c42\u6839\u5230\u6240\u6709\u8fb9\u6216\u8005\u70b9\u7684\u8def\u5f84\u4e0a\u70b9\u548c\u8fb9\u7684\u6743\u503c\u7684\u5f02\u6216\u548c\u7684\u6700\u5927\u503c\u6700\u5c0f\u3002 \\(p \\le 17\\) \u3002 \u53ef\u4ee5\u901a\u8fc7\u6a21\u62df\u6837\u4f8b\u53d1\u73b0\u4e00\u4e2a\u7ed3\u8bba\uff1a \u5f02\u6216\u548c\u7684\u6700\u5927\u503c\u6700\u5c0f\u5fc5\u5b9a\u4e3a \\(n\\) \u3002 \u4e3a\u5565\u5462\uff1f \u4f60\u8003\u8651\u5bf9\u4e8e \\(\\forall x < n\\) \uff0c \\(x + n \\operatorname{XOR} x\\) \u662f\u4e0d\u662f\u5fc5\u7136\u7b49\u4e8e \\(n\\) \uff1f \u7136\u540e\u4e24\u5bf9\u8fd9\u6837\u7684\u6570\u5f02\u6216\u8d77\u6765\u5c31\u53d8\u6210\u4e86 \\(0\\) \u3002 \u7136\u540e\u6211\u4eec\u8ba9\u5f02\u6216\u548c\u4e3a \\(0\\) \u4e4b\u540e\uff0c\u5728\u8ba9 \\(0\\) \u5148\u548c\u4e00\u4e2a \\(x\\) \u5f02\u6216\uff0c\u7136\u540e\u518d\u548c\u4e00\u4e2a \\(x + n\\) \u5f02\u6216\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5f02\u6216\u548c\u6c38\u8fdc\u4e0d\u4f1a\u8d85\u8fc7 \\(n\\) \u3002 \u6240\u4ee5\u6211\u4eec\u94a6\u5b9a\u6839\u7ed3\u70b9\u4e3a \\(1\\) \uff0c\u6743\u503c\u4e3a \\(n\\) \uff0c\u6df1\u5ea6\u4e3a \\(0\\) \u3002 \u7136\u540e\u5bf9\u4e8e\u5947\u6570\u6df1\u5ea6\u8282\u70b9\uff0c\u6743\u503c\u8bbe\u4e3a \\(x\\) \uff0c\u5230\u7236\u4eb2\u7684\u8fb9\u8bbe\u4e3a \\(x + n\\) \u3002 \u7136\u540e\u5076\u6570\u8282\u70b9\u53cd\u8fc7\u6765\u3002 \u5c31\u6784\u9020\u5b8c\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int si = ( 1 << 18 ); int n , p ; int tot = 0 , head [ si ]; struct Edge { int ver , Next ; } e [ si << 1 ]; inline void add ( int u , int v ) { e [ tot ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot ++ ; } int cnt = 0 ; int a [ si ], c [ si << 1 ]; void dfs ( int u , int in_edge , int dep ) { if ( in_edge != -1 ) { ++ cnt ; if ( dep % 2 == 0 ) a [ u ] = cnt + n , c [ in_edge ] = cnt ; else a [ u ] = cnt , c [ in_edge ] = cnt + n ; } for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if (( i ^ 1 ) != in_edge ) dfs ( v , i , dep + 1 ); } } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; memset ( head , -1 , sizeof head ); while ( T -- ) { cnt = tot = 0 ; cin >> p , n = 1 << p ; for ( int i = 1 ; i < n ; ++ i ) { int u , v ; cin >> u >> v ; add ( u , v ), add ( v , u ); } a [ 1 ] = n ; dfs ( 1 , -1 , 0 ); cout << \"1\" << endl ; for ( int i = 1 ; i <= n ; ++ i ) cout << a [ i ] << \" \" , head [ i ] = -1 ; cout << endl ; for ( int i = 0 ; i < tot ; i += 2 ) cout << c [ i ] + c [ i ^ 1 ] << \" \" , c [ i ] = c [ i ^ 1 ] = 0 ; cout << endl ; } return 0 ; } 1 Tag : \u6784\u9020 / \u6811 / \u5f02\u6216 CF1670F Jee, You See? \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a \\(n, l, r, z\\) \uff0c\u95ee\u6709\u591a\u5c11\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5e8f\u5217 \\(a\\) \u4f7f\u5f97 \\(\\sum a \\in [l, r]\\) \uff0c \u4e14 \\(\\operatorname{XOR}_i a_i = z\\) \u3002 \\(n \\le 1000, 1\\le l, r, z \\le 10^{18}\\) \u3002 \u53d1\u73b0\u8fd9\u4e2a\u5f02\u6216\u4e0d\u592a\u597d\u5904\u7406\u3002 \u8003\u8651\u5230\u4e8c\u8fdb\u5236\u5e95\u4e0b\u5904\u7406\u3002 \u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a\u7c7b\u4f3c\u6570\u4f4d DP \u7684\u8fc7\u7a0b\u3002 \u53ea\u9700\u8981\u80fd\u6c42\u51fa\u4efb\u610f \\(\\sum a \\le z\\) \u7684\u89e3\uff0c\u5c31\u53ef\u4ee5\u7528\u524d\u7f00\u548c\u7684\u601d\u60f3\u8ba1\u7b97\u3002 \u6700\u7ec8\u7b54\u6848\u7684\u5f02\u6216\u7684\u67d0\u4e00\u4f4d\u662f\u5426\u4e3a \\(1\\) \u53ea\u548c \\(a\\) \u4e2d\u6240\u6709\u6570\u4e8c\u8fdb\u5236\u4e0b\u5728\u8fd9\u4e00\u4f4d\u7684 \\(1\\) \u7684\u4e2a\u6570\u548c\u524d\u9762\u7684\u8fdb\u4f4d\u6709\u5173\u3002 \u800c \\(z\\) \u5b9e\u9645\u4e0a\u53ef\u4ee5\u51b3\u5b9a\u6bcf\u4e00\u4f4d\u6700\u591a\u586b\u591a\u5c11\u4e2a \\(1\\) \u3002 \u90a3\u4e48\u5047\u8bbe \\(z\\) \u7684\u67d0\u4e00\u4f4d\u662f \\(1\\) \u90a3\u4e48\u6240\u6709 \\(a\\) \u4e2d\u7684\u6570\u4e8c\u8fdb\u5236\u4e0b\u8fd9\u4e00\u4f4d\u6700\u591a\u4e00\u4e2a \\(1\\) \u3002 \u4f46\u662f\u56e0\u4e3a\u7531\u8fdb\u4f4d\u653e\u5230\u66f4\u4f4e\u7684\u4e00\u4f4d\u5c31\u6700\u591a\u4e24\u4e2a \\(1\\) \u3002 \u7136\u540e\u4ee5\u6b64\u7c7b\u63a8\uff0c\u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e00\u4f4d\u6700\u591a\u53ea\u80fd\u6709 \\(n\\) \u4e2a \\(1\\) \uff0c\u53ef\u4ee5\u8bb0\u5fc6\u5316\u4e86\u3002 \u6240\u4ee5\u6211\u4eec\u8bbe\u51fa\u4e00\u4e2a\u51fd\u6570 int dfs(int x, int rest, i64 limit) \u3002 \u8868\u793a\u5f53\u524d\u586b\u5230 \\(x\\) \u4f4d\uff0c\u4e4b\u524d\u7684\u4f4d\u53ef\u80fd\u9009\u62e9\u4e0d\u586b\u5b8c\uff0c\u4e8e\u662f\u5230\u8fd9\u91cc\u5c31\u5269\u4e86 \\(rest\\) \u4e2a \\(1\\) \u53ef\u4ee5\u586b\uff0c\u5f53\u524d\u8981\u6c42 \\(\\le limit\\) \u7684\u65b9\u6848\u6570\u3002 \u7136\u540e\u679a\u4e3e\u8fd9\u4e00\u4f4d\u586b\u591a\u5c11\u4e00\uff0c\u5f80\u4e0b\u8d70\u5373\u53ef\uff0c\u65b9\u6848\u6570\u6c42\u4e00\u4e0b\u7ec4\u5408\u6570\u5373\u53ef\u3002 \u6ce8\u610f \\(rest\\) \u8981\u548c \\(n\\) \u53d6 \\(min\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int si = 1e3 + 10 ; constexpr i64 mod = 1l l * ( 1e9 + 7 ); int n ; i64 l , r , z ; i64 f [ 60 + 10 ][ si ]; i64 C [ si ][ si ]; // \u7ec4\u5408\u6570 // \u5f53\u524d\u4f4d\uff0c\u4e0a\u4e00\u4f4d\u5269\u4e86\u591a\u5c11\u4e2a 1\uff0c\u8981\u6c42\u7684\u7b54\u6848 i64 dfs ( int x , int rest , i64 val ) { if ( x == -1 ) return 1 ; // \u6700\u4f4e\u4f4d\u662f 0\uff0c\u6240\u4ee5 x = -1 \u624d\u662f\u8fb9\u754c\u3002 if ( f [ x ][ rest ] != -1 ) return f [ x ][ rest ]; int a = z >> x & 1 , b = ( rest << 1 ) + ( val >> x & 1 ); int up = min ( b , n ); i64 kot = 0 ; // a\u6570\u7ec4\u6240\u6709\u7684\u6570\uff0c\u8fd9\u4e00\u4f4d\u6700\u591a\u6709 n \u4e2a 1\uff0c\u8981\u53d6 min\u3002 for ( int i = a ; i <= up ; i += 2 ) { // \u4e0a\u754c\u662f $a$ \u662f\u4e3a\u4e86\u4fdd\u8bc1\u8fd9\u4f4d\u5728\u6700\u540e\u7684\u5f02\u6216\u548c\u91cc\u548c $z$ \u7684\u8fd9\u4e00\u4f4d\u76f8\u540c\u3002 // \u6bcf\u6b21\u52a0 $2$ \u662f\u4e3a\u4fdd\u8bc1\u8fd9\u4e00\u4f4d\u4e0d\u53d8\u3002 kot = ( kot + dfs ( x - 1 , min ( n , b - i ), val ) * C [ n ][ i ] % mod ) % mod ; } // \u8bb0\u5fc6\u5316 f [ x ][ rest ] = kot ; return kot ; } i64 solve ( i64 val ) { memset ( f , -1 , sizeof f ); return dfs ( 60 , 0 , val ) % mod ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> l >> r >> z ; C [ 0 ][ 0 ] = 1l l ; for ( int i = 1 ; i <= n ; ++ i ) { C [ i ][ 0 ] = 1l l ; for ( int j = 1 ; j <= i ; ++ j ) { C [ i ][ j ] = ( C [ i - 1 ][ j ] + C [ i - 1 ][ j - 1 ]) % mod ; } } // meow(solve(5)) << \" \", meow(solve(0)) << endl; cout << ( solve ( r ) - solve ( l - 1 ) + mod ) % mod << endl ; return 0 ; } 1 Tag : \u4e8c\u8fdb\u5236\u4e0b\u7684\u6570\u4f4dDP / \u5f02\u6216 CF1684E MEX vs DIFF \u03c8(\uff40\u2207\u00b4)\u03c8 \u5b9a\u4e49 \\(MEX(A)\\) \u4e3a\u5e8f\u5217 \\(A\\) \u4e2d\u6700\u5c0f\u7684\u4e0d\u5b58\u5728\u7684\u975e\u8d1f\u6574\u6570\u3002 \u5b9a\u4e49 \\(DIFF(A)\\) \u4e3a\u5e8f\u5217 \\(A\\) \u4e2d\u4e0d\u540c\u7684\u6570\u7684\u4e2a\u6570\u3002 \u4f60\u6709 \\(k\\) \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u53ef\u4ee5\u628a\u4efb\u610f\u4e00\u4e2a\u4f4d\u7f6e\u6539\u4e3a\u4efb\u610f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u3002 \u6c42\u53ef\u4ee5\u8fbe\u5230\u7684 \\(\\min\\{DIFF(A) - MEX(A)\\}\\) \u3002 \\(1\\le n \\le 10^5, 0\\le k \\le 10^5, a_i \\le 10^9\\) \u3002 \u53d1\u73b0\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u6700\u5927\u5316 \\(MEX\\) \u5e76\u6700\u5c0f\u5316 \\(DIFF\\) \u3002 \u6709\u4e24\u4e2a\u53d8\u91cf\u7684\u8bdd\u4f1a\u5f88\u4e0d\u597d\u641e\uff0c\u6240\u4ee5\u6211\u4eec\u5c1d\u8bd5\u56fa\u5b9a\u4e00\u4e2a\u53d8\u91cf\u3002 \u6709\u4e00\u4e2a\u663e\u7136\u4f46\u662f\u6211\u8d5b\u65f6\u6ca1\u60f3\u5230\u7684\u7ed3\u8bba\uff1a \\(MEX\\) \u4e00\u5b9a \\(\\le n + 1\\) \u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u76f4\u63a5\u679a\u4e3e \\(MEX\\) \u3002 \u6240\u4ee5\u8981\u505a\u7684\u5c31\u662f\u6700\u5c0f\u5316 \\(DIFF\\) \u3002 \u5f53\u7136\u5bf9\u4e8e\u6bcf\u4e2a \\(MEX\\) \uff0c\u5982\u679c\u5b83\u524d\u9762\uff08\u5728\u503c\u57df\u4e0a\uff09\u6709\u7a7a\u7f3a\uff0c\u6211\u4eec\u662f\u9700\u8981\u8865\u4e0a\u7684\u3002 \u5982\u679c \\(k\\) \u6b21\u4e0d\u591f\u7684\u8bdd\uff0c\u8fd9\u4e2a \\(MEX\\) \u5fc5\u7136\u4e0d\u5408\u6cd5\u3002 \u7136\u540e\u5047\u8bbe\u586b\u5b8c\u7a7a\u7f3a\u8fd8\u5269\u4e0b \\(rest\\) \u6b21\u64cd\u4f5c\u673a\u4f1a\u3002 \u8003\u8651\u4e00\u4e2a\u6bd4\u8f83 trivial \u7684 greedy\uff0c\u6bcf\u6b21\u64cd\u4f5c\u90fd\u5c3d\u91cf\u8ba9\u51fa\u73b0\u6b21\u6570\u5c11\u7684\u4e00\u79cd\u6570\u5168\u90e8\u53d8\u4e3a\u4efb\u610f\u4e00\u4e2a\u524d\u9762\uff08 \\(0 \\sim MEX - 1\\) \uff09\u5df2\u7ecf\u51fa\u73b0\u7684\u6570\u3002 \u6bcf\u6b21 \\(DIFF\\) \u80fd\u51cf\u5c11\u4e00\u3002 \u7136\u540e\u8fd9\u6837\u5c31\u80fd\u6700\u5c0f\u5316 \\(DIFF\\) \u3002 \u4f46\u662f\u76f4\u63a5\u66b4\u529b\u505a\u7684\u8bdd\u590d\u6742\u5ea6\u662f \\(O(nk)\\) \u7684\uff0c\u8003\u8651\u600e\u4e48\u4f18\u5316\u3002 \u53ef\u4ee5\u8003\u8651\u8bb0\u4e00\u4e2a\u6570\u7ec4 \\(cnt\\) \u8868\u793a\u539f\u5e8f\u5217\u7684\u6876\uff0c\u7136\u540e\u8bb0 \\(cntt\\) \u4e3a \\(cnt\\) \u7684\u6876\u3002 \u8fd9\u6837\u76f4\u63a5\u5728\u6392\u5e8f\u8fc7\u540e\u7684 \\(cntt\\) \u5c3d\u91cf\u53d6\u524d\u9762\u7684\u5c31\u884c\u3002 \u6700\u574f\u60c5\u51b5\u4e0b\u8981\u53d6 \\(\\sqrt{k}\\) \u6b21\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(n\\sqrt{k})\\) \u3002 \uff08\u56e0\u4e3a \\(\\dfrac{x(x + 1)}{2} \\le k\\) \uff0c\u6240\u4ee5\u9879\u6570 \\(x\\) \u662f \\(\\sqrt{k}\\) \u7ea7\u522b\u7684\u3002\uff09 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 // author : black_trees #include <map> #include <cstdio> #include <vector> #include <cstring> #include <iostream> #include <algorithm> #pragma GCC target(\"avx,sse2,sse3,sse4,mmx\") #pragma GCC optimize(\"Ofast\", \"inline\", \"-ffast-math\") #define endl '\\n' #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { int n , k ; cin >> n >> k ; std :: map < int , int > cnt ; cnt . clear (); std :: map < int , int > cntOfcnt ; cntOfcnt . clear (); std :: vector < int > a ( n + 1 ), occ ( n + 1 ); occ . clear (), a . clear (); for ( int i = 1 ; i <= n ; ++ i ) { cin >> a [ i ], cnt [ a [ i ]] ++ ; if ( a [ i ] <= n ) occ [ a [ i ]] = 1 ; } for ( int i = 1 ; i <= n ; ++ i ) occ [ i ] += occ [ i - 1 ]; for ( auto [ ele , num ] : cnt ) cntOfcnt [ num ] ++ ; int diff = int ( cnt . size ()), ans = diff ; for ( int mex = 1 ; mex <= n + 1 ; mex ++ ) { if ( cnt [ mex - 1 ]) cntOfcnt [ cnt [ mex - 1 ]] -- , diff -- ; if ( mex > occ [ mex - 1 ] + k ) continue ; int ret = diff , rest = k ; for ( auto [ x , y ] : cntOfcnt ) { if ( rest >= x * y ) rest -= x * y , ret -= y ; else { ret -= rest / x ; break ; } } ans = min ( ans , ret ); } cout << ans << endl ; } return 0 ; } CF1682E Unordered Swaps \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60\u4e00\u4e2a \\(1 \\sim n\\) \u7684\u6392\u5217 \\(p\\) \uff0c\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u4ea4\u6362\u4efb\u610f\u4e24\u4e2a\u5143\u7d20\u3002 Alice \u7528\u4e86\u6700\u5c11\u7684\u64cd\u4f5c\u6b21\u6570\u628a \\(p\\) \u7f6e\u6362\u6210\u4e86\u4e00\u4e2a\u6709\u5e8f\u7684\u6392\u5217\uff0c\u5373 \\(1,2,3,\\dots, n\\) \u3002 \u5e76\u4e14 Alice \u8bb0\u5f55\u4e0b\u4e86\u5979\u6bcf\u6b21\u7684\u64cd\u4f5c \\((x_i, y_i)\\) \uff0c\u5373\u4ea4\u6362 \\(p_{x_i}, p_{y_i}\\) \u3002 \u4f46\u662f Bob \u628a\u8fd9\u4e2a\u64cd\u4f5c\u4e8c\u5143\u7ec4\u5e8f\u5217 \\(q\\) \u6253\u4e71\u4e86\uff0c\u4f60\u9700\u8981\u6062\u590d\u8fd9\u4e2a\u4e8c\u5143\u7ec4\u5e8f\u5217\u7684\u987a\u5e8f\u3002 \u5e76\u4e14\u8f93\u51fa\uff0c\u7b2c \\(i\\) \u6b21\u64cd\u4f5c\u4f7f\u7528\u7684\u662f\u7ed9\u5b9a \\(q\\) \u7684\u7b2c\u51e0\u4e2a\u4e8c\u5143\u7ec4\uff0c\u4efb\u610f\u89e3\u5373\u53ef\u3002 \\(n \\le 2e5\\) \u3002 \u53c8\u662f\u4e00\u9053\u7f6e\u6362\u73af\u7684\u9898\u3002 \u663e\u7136\u5148\u627e\u51fa\u6240\u6709\u7684\u7f6e\u6362\u73af\uff0c\u8fd9\u4e2a Tarjan \u4e00\u4e0b\u5373\u53ef\u3002 \u7136\u540e\u6bcf\u6b21\u64cd\u4f5c\u80af\u5b9a\u662f\u4ea4\u6362\u4e00\u4e2a\u7f6e\u6362\u73af\u4e0a\u7684\u4e24\u4e2a\u5143\u7d20\u4ee5\u628a\u7f6e\u6362\u73af\u62c6\u6210\u4e24\u4e2a\u7f6e\u6362\u73af\u3002 \u6700\u540e\u7684\u76ee\u7684\u5c31\u662f\u628a\u6240\u6709\u7f6e\u6362\u73af\u5168\u90e8\u62c6\u6210\u81ea\u73af\u3002 \u6240\u4ee5\u64cd\u4f5c\u65f6 \\(x_i,y_i\\) \u5fc5\u987b\u8981\u5728\u540c\u4e00\u4e2a\u7f6e\u6362\u73af\u4e0a\uff08 \u7ed3\u8bba1 \uff09\uff0c\u5426\u5219\u4f60\u5c31\u4f1a\u6d6a\u8d39\u4e00\u6b21\u673a\u4f1a\uff0c\u6c38\u8fdc\u65e0\u6cd5\u5b8c\u6210\u8fd9\u4e2a\u7f6e\u6362\u3002 \u7136\u540e\u6211\u4eec\u8003\u8651\u600e\u4e48\u5904\u7406 \\(q\\) \u3002 \u53ef\u4ee5\u628a\u4e00\u4e2a\u4e8c\u5143\u7ec4 \\((x_i, y_i)\\) \u770b\u6210\u4e00\u6761\u8fde\u63a5 \\((x_i, y_i)\\) \u7684\u8fb9\u3002 \u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7f6e\u6362\u73af\uff0c\u5b83\u5fc5\u7136\u4f1a\u5f62\u6210\u4e00\u68f5\u6811 \\(T\\) \uff0c\u5047\u8bbe\u8282\u70b9\u4e2a\u6570\u4e3a \\(N\\) \u3002 \u7136\u540e\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u4ee5\u67d0\u79cd \u987a\u5e8f \u53d6\u8fd9 \\(N - 1\\) \u6761\u8fb9\u3002 \u6b64\u65f6\u5c31\u6ca1\u6709\u4efb\u4f55\u601d\u8def\u4e86\uff0c\u6240\u4ee5\u8003\u8651\u600e\u4e48\u5229\u7528\u4e00\u4e0b\u5df2\u7ecf\u6709\u7684\u7ed3\u8bba1\u3002 \u9996\u5148\uff0c\u5982\u679c\u6211\u4eec\u9009\u4e86 \\(T\\) \u4e0a\u7684\u67d0\u4e2a\u64cd\u4f5c \\((u, v)\\) \uff0c\u90a3\u4e48\u5b9e\u9645\u4e0a\u7b49\u540c\u4e8e\u5220\u9664\u8fb9 \\((u, v)\\) \uff0c\u8ba9\u7f6e\u6362\u73af\u65ad\u6210\u4e24\u4e2a\u3002 \\(T\\) \u540c\u6837\u4e5f\u4f1a\u5206\u88c2\u6210 \\(T1, T2\\) \u4e24\u68f5\u6811\u3002 \u4f46\u662f\u6bcf\u4e00\u6b21\u5220\u9664\u4e0d\u4e00\u5b9a\u90fd\u662f\u5408\u6cd5\u7684\uff0c\u4f60\u9700\u8981\u4fdd\u8bc1\u65ad\u5f00\u4e4b\u540e\uff0c \\(u\\) \u8fde\u901a\u5757\u7684\u90fd\u5728\u4e00\u4e2a\u73af\u4e0a\uff0c \\(v\\) \u8fde\u901a\u5757\u540c\u7406\u3002 \u6bd4\u5982\u8fd9\u79cd\u60c5\u51b5\uff1a 1 2 3 4 5 6 7 o ---- o ---- o ---- o 1 2 4 3 ( Tree ) 1 2 3 4 ( Ring ) o ---> o ---> o ---> o ^ | | ______________ | \u4f60\u5982\u679c\u5220\u6389 \\(T\\) \u4e0a\u7684\u8fb9 \\((1, 2)\\) \uff0c\u90a3\u4e48\u7f6e\u6362\u73af\u4f1a\u53d8\u6210\u8fd9\u6837\uff1a 1 2 3 4 5 6 1 2 3 4 ___________ | v o o o ---> o ^ | | ______________ | \u4e5f\u5c31\u662f\u8bf4\uff0c\u72ec\u7acb\u7684\u8fde\u901a\u5757\u53d8\u6210\u4e86 \\(2\\) \u8fd9\u4e2a\u8282\u70b9\uff01\u3002 \u800c\u672c\u6765\u671f\u671b\u4e2d\u5e94\u8be5\u662f \\(1\\) \u8fd9\u4e2a\u8282\u70b9\u72ec\u7acb\u51fa\u6765\u7684\u3002 \u6240\u4ee5\u8fd9\u6837\u7684\u4e00\u6b21\u64cd\u4f5c\u662f\u4e0d\u5408\u6cd5\u7684\u3002 \u601d\u8003\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u3002 \u53d1\u73b0\u5220\u6389 \\((2, 4)\\) \u8fd9\u6761\u8fb9\u662f\u5408\u6cd5\u7684\uff0c\u4e4b\u540e\u518d\u5220 \\((1, 2)\\) \u8fd9\u6761\u8fb9\u5c31\u5408\u6cd5\u4e86\uff01 \u4e0d\u59a8\u731c\u6d4b\uff0c\u8fd9\u4e2a\u9009\u8fb9\u7684\u987a\u5e8f\u53ef\u80fd\u6709\u4ec0\u4e48\u7ed3\u8bba\u3002 \u7ed3\u8bba2 \u5bf9\u4e8e\u4e00\u4e2a\u6811\u4e0a\u7684\u8282\u70b9 \\(u\\) \uff0c\u5047\u8bbe\u548c\u5b83\u6709\u8fde\u8fb9\u7684\u8282\u70b9\u96c6\u5408\u4e3a \\(adj = \\{x_1, x_2, \\dots, x_M\\}\\) \u3002 \u5e76\u4e14\u5b9a\u4e49 \\(dis(u, x)\\) \u4e3a\u7f6e\u6362\u73af\u4e0a \\(u\\) \u5230 \\(x\\) \u7684\u8ddd\u79bb\u3002 \u5bf9 \\(adj\\) \u6309\u7167 \\(dis(u, x)\\) \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u5f97\u5230\u4e00\u4e2a\u65b0\u7684 \\(adj = \\{y_1, y_2, \\dots, y_M\\}\\) \u3002 \u90a3\u4e48\uff0c\u5f53 \\(i < j\\) \u65f6\uff0c\u64cd\u4f5c \\((u, y_i)\\) \u5fc5\u987b\u5728 \\((u, y_j)\\) \u4e4b\u524d\u8fdb\u884c\u3002 \u5426\u5219\uff0c\u5982\u679c\u5148\u8fdb\u884c\u4e86 \\((u, y_j)\\) \uff0c\u90a3\u4e48\u5b83\u4e00\u5b9a\u662f\u4e00\u4e2a\u4e0d\u5408\u6cd5\u7684\u64cd\u4f5c\u3002 Proof \u8fd9\u4e2a\u6bd4\u8f83\u597d\u8bc1\u660e\uff0c\u56e0\u4e3a\u4f60\u5982\u679c\u5148\u6362\u4e86 \\((u, y_j)\\) \uff0c\u90a3\u4e48 \\((u, y_i)\\) \u5fc5\u7136\u4f1a\u5904\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u7f6e\u6362\u73af\u4e0a\u3002 \u4e3a\u4ec0\u4e48\u4f1a\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u7f6e\u6362\u73af\u4e0a \u8bbe \\(nxt(qwq)\\) \u8868\u793a\u8282\u70b9 \\(qwq\\) \u5728\u7f6e\u6362\u73af\u4e0a\u6307\u5411\u7684\u8282\u70b9\u3002 \u4ea4\u6362 \\((u, y_j)\\) \u4e4b\u540e\uff0c \\(nxt(u)\\) \u4f1a\u53d8\u6210 \\(nxt(y_j)\\) \uff0c \\(nxt(y_i)\\) \u4f1a\u53d8\u6210 \\(nxt(u)\\) \u3002 \u7136\u540e \\(u\\) \u5c31\u4f1a\u548c\u539f\u6765\u7684 \\(nxt(y_j)\\) \u5728\u4e00\u4e2a\u7f6e\u6362\u73af \\(g_1\\) \u4e0a\uff0c\u7136\u540e\u539f\u6765\u7684 \\(nxt(u)\\) \u4e00\u76f4\u5230 \\(y_j\\) \u8fd9\u4e00\u6bb5\u90fd\u4f1a\u5728\u53e6\u4e00\u4e2a\u7f6e\u6362\u73af \\(g_2\\) \u4e0a\uff0c \u5e76\u4e14\u56e0\u4e3a \\(i < j\\) \uff0c\u6240\u4ee5 \\(y_i\\) \u4e5f\u4f1a\u5728 \\(g_2\\) \u4e0a\uff0c\u90a3\u4e48 \\(u, y_i\\) \u81ea\u7136\u5c31\u662f\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u7f6e\u6362\u73af\u4e0a\u4e86\u3002 \u6709\u4e00\u5f20\u56fe\u53ef\u4ee5\u53c2\u8003\uff1a \u7136\u540e\u4f60\u4e4b\u540e\u518d\u6362 \\((u, y_i)\\) \u5c31\u4f1a\u5408\u5e76\u4e24\u4e2a\u73af\uff0c\u5c31\u6d6a\u8d39\u4e86\u4e00\u6b21\u64cd\u4f5c\uff0c\u8fdd\u80cc\u4e86\u7ed3\u8bba1\uff0c\u6c38\u8fdc\u65e0\u6cd5\u5b8c\u6210\u7f6e\u6362\u3002 \u7136\u540e\u53d1\u73b0\uff0c\u5176\u5b9e\u6211\u4eec\u5df2\u7ecf\u80fd\u786e\u5b9a\u67d0\u4e9b\u8fb9\u7684\u987a\u5e8f\u5173\u7cfb\u4e86\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u79cd\u65b0\u7684\u5173\u7cfb \\((x, y) \\prec (xx, yy)\\) \uff0c\u8868\u793a\u6211\u4eec\u80fd\u786e\u5b9a \\((x, y)\\) \u8fd9\u4e2a\u64cd\u4f5c\u6bd4 \\((xx, yy)\\) \u5148\u4f7f\u7528\u3002 \u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6811\u4e0a\u6bcf\u4e2a\u5ea6\u6570\u5927\u4e8e\u4e00\u7684\u8282\u70b9 \\(u\\) \uff0c\u548c\u4ed6\u76f8\u5173\u7684\u6240\u6709\u8fb9\u5982\u679c\u6784\u6210\u96c6\u5408 \\(E_u\\) \uff0c\u90a3\u4e48 \\(E_u\\) \u4e2d\u7684\u6240\u6709\u5143\u7d20\u5fc5\u7136\u4f1a\u4ee5\u94fe\u5f0f\u7684\u5f62\u5f0f\u6ee1\u8db3\u5173\u7cfb \\(\\prec\\) \u3002 \u7136\u540e\u4e0d\u540c\u7684\u4e24\u4e2a\u96c6\u5408 \\(E1, E2\\) \uff0c\u5fc5\u7136\u4f1a\u4ee5\u4e00\u4e2a \\(\\prec\\) \u5173\u7cfb\u8fde\u63a5\u8d77\u6765\uff08\u56e0\u4e3a\u8fd9\u662f\u6811\u554a\uff09 \u800c\u4e14\u4e0d\u4f1a\u6709\u91cd\u590d\u7684\u4e24\u5bf9\u5173\u7cfb\u51fa\u73b0\u3002 \u601d\u8003\u4e00\u4e0b\uff0c \\(\\prec\\) \u8fd9\u4e2a\u5173\u7cfb\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u4e25\u683c\u504f\u5e8f\u5173\u7cfb\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u62d3\u6251\u6c42\u5b83\u7684\u89e3\u3002 \u800c\u6211\u4eec\u8981\u6c42\u7684\u6b63\u597d\u5c31\u662f\u8fd9\u4e9b\u8fb9\u7684\u4f7f\u7528\u987a\u5e8f\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e9b\u8fb9\u770b\u4f5c\u8282\u70b9\uff0c\u5bf9\u4e8e\u6811\u4e0a\u7684\u4e00\u4e2a\u8282\u70b9 \\(u\\) \uff0c\u6211\u4eec\u4ee4 \\(adj_u = \\{x_1, x_2, \\dots\\}\\) \u3002 \u90a3\u4e48\uff0c\u53ea\u9700\u8981\u8fde \\((u, x_1) \\to (u, x_2) \\to (u, x_3) \\to \\dots\\) \u3002 \u6700\u540e\u8dd1\u4e00\u4e2a\u62d3\u6251\u6392\u5e8f\u5c31\u884c\u4e86\u3002 \u6ce8\u610f\u8fd9\u91cc\u7684\u70b9\u5bf9 \\((x, y)\\) \u5e94\u5f53\u662f\u65e0\u5e8f\u7684\uff0c\u6240\u4ee5\u6709\u4e2a\u5c0f\u6280\u5de7\u5c31\u662f\uff0c\u6bcf\u6b21\u64cd\u4f5c\u7684\u65f6\u5019\u5f3a\u5236 \\(x < y\\) \u4ee5\u65b9\u4fbf\u5904\u7406\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 // author : black_trees #include <map> #include <stack> #include <queue> #include <cstdio> #include <vector> #include <cassert> #include <cstring> #include <utility> #include <iostream> #include <algorithm> #pragma GCC target(\"avx,sse2,sse3,sse4,mmx\") #pragma GCC optimize(\"Ofast\", \"inline\", \"-ffast-math\") #define endl '\\n' #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int n , m ; int tim = 0 , cnt = 0 ; int p [ si ]; // \u7ed9\u5b9a\u7684\u88ab\u6253\u4e71\u7684 perm int dfn [ si ]; // \u6bcf\u4e2a\u8282\u70b9(1 ~ n)\u5728\u627e\u73af\u7684\u65f6\u5019\u7684 dfs \u5e8f\u3002 std :: vector < int > G [ si ]; // \u539f\u56fe\u7684\u90bb\u63a5\u8868\uff0c\u7528\u6765\u627e\u73af\u3002 std :: vector < int > adj [ si ]; // \u6811\u7684\u90bb\u63a5\u8868 int low [ si ]; bool ins [ si ]; std :: stack < int > s ; int c [ si ], maxv [ si ], minv [ si ]; // i \u6240\u5c5e\u7684\u73af\u7684\u7f16\u53f7\uff0c\u73af\u4e0a\u6700\u5927\u6700\u5c0f dfn. void tarjan ( int u ) { dfn [ u ] = low [ u ] = ++ tim ; s . push ( u ), ins [ u ] = false ; for ( auto v : G [ u ]) { if ( ! dfn [ v ]) tarjan ( v ), low [ u ] = min ( low [ u ], low [ v ]); else low [ u ] = min ( low [ u ], dfn [ v ]); } if ( dfn [ u ] == low [ u ]) { int x ; ++ cnt ; do { x = s . top (), s . pop (), c [ x ] = cnt , maxv [ cnt ] = max ( maxv [ cnt ], dfn [ x ]), minv [ cnt ] = min ( minv [ cnt ], dfn [ x ]); } while ( u != x ); } } std :: map < pair < int , int > , int > Hash ; // \u7528\u6765\u8bb0\u5f55\u8fd9\u6761\u8fb9\u7684\u7f16\u53f7\u3002 int order = 0 ; // \u6700\u540e\u5f97\u5230\u7684 topo \u5e8f\u3002 int ind [ si ]; // \u5165\u5ea6 struct Node { int u , v , id ; } rec [ si ]; // \u8bb0\u5f55\u8fd9\u4e2a swap \u7684\u5c5e\u6027\u3002 std :: vector < int > E [ si ]; // \u7528\u6765\u62d3\u6251\u7684\u56fe\u3002 int ans [ si ], ret [ si ]; // ans[i] \u662f\u7b2c i \u4e2a swap \u7684 order // ret[i] \u662f\u7b2c i \u6b21\u4f7f\u7528\u54ea\u4e2a swap\u3002 int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); Hash . clear (); memset ( minv , 0x3f , sizeof minv ); memset ( maxv , -0x3f , sizeof maxv ); // sort by PosSt auto dis = [ & ]( int PosSt , int PosEd ) -> int { assert ( c [ PosSt ] == c [ PosEd ]); int bel = c [ PosSt ]; int siz = maxv [ bel ] - minv [ bel ] + 1 ; return (( dfn [ PosEd ] - dfn [ PosSt ]) + siz ) % siz ; }; cin >> n >> m ; for ( int i = 1 ; i <= n ; ++ i ) cin >> p [ i ], G [ i ]. push_back ( p [ i ]); for ( int i = 1 ; i <= n ; ++ i ) if ( ! dfn [ i ]) tarjan ( i ); for ( int i = 1 ; i <= m ; ++ i ) { int u , v ; cin >> u >> v ; // \u64cd\u4f5c\u7684\u4f4d\u7f6e\u3002 assert ( c [ u ] == c [ v ]); adj [ u ]. push_back ( v ), adj [ v ]. push_back ( u ); if ( u > v ) swap ( u , v ); Hash [{ u , v }] = i ; rec [ i ] = ( Node ){ u , v , i }; } for ( int i = 1 ; i <= n ; ++ i ) sort ( adj [ i ]. begin (), adj [ i ]. end (), [ & ]( int x , int y ) { return dis ( i , x ) < dis ( i , y ); }); // \u6309\u7167\u7ed3\u8bba\u7ed9 adj \u6392\u4e2a\u5e8f for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 0 ; j < int ( adj [ i ]. size ()) - 1 ; ++ j ) { int x = i , y = adj [ i ][ j ], u = i , v = adj [ i ][ j + 1 ]; if ( x > y ) swap ( x , y ); if ( u > v ) swap ( u , v ); int yhp = Hash [{ x , y }], zxy = Hash [{ u , v }]; E [ yhp ]. push_back ( zxy ), ind [ zxy ] ++ ; } } std :: queue < int > q ; for ( int i = 1 ; i <= m ; ++ i ) if ( ! ind [ i ]) q . push ( i ); while ( ! q . empty ()) { int u = q . front (); q . pop (); ans [ rec [ u ]. id ] = ++ order ; for ( auto v : E [ u ]) if ( ! ( -- ind [ v ])) q . push ( v ); } for ( int i = 1 ; i <= m ; ++ i ) ret [ i ] = i ; sort ( ret + 1 , ret + 1 + m , [ & ]( int x , int y ){ return ans [ x ] < ans [ y ]; }); for ( int i = 1 ; i <= m ; ++ i ) cout << ret [ i ] << \" \" ; cout << endl ; return 0 ; } // \u5176\u5b9e\u4e0a\u9762\u6709\u4e9b\u4e1c\u897f\u662f\u4e0d\u5fc5\u8981\u7684\uff0c\u4e0d\u8fc7\u61d2\u5f97\u6539\u4e86\uff0c\u53cd\u6b63\u610f\u601d\u90fd\u4e00\u6837\u3002","title":"2022\u5e745\u6708AT&CF"},{"location":"rec/atcf-for-2022-05/#_1","text":"","title":"\u4e94\u6708\u597d\u9898\u6539\u9519"},{"location":"rec/atcf-for-2022-05/#cf1670e-hemose-on-the-tree","text":"\u7ed9\u4f60 \\(n = 2^p\\) \u4e2a\u8282\u70b9\u7684\u4e00\u68f5\u6811\uff0c\u4f60\u9700\u8981\u4e3a\u6240\u6709\u70b9\u548c\u8fb9\u4e00\u4e2a\u6743\u503c \\(v\\) \u3002 \u4e14 \\(\\forall v \\in [1, 2^{n + 1} - 1]\\) \u3002 \u4f60\u53ef\u4ee5\u4efb\u610f\u9009\u62e9\u4e00\u4e2a\u6839\uff0c\u8981\u6c42\u6839\u5230\u6240\u6709\u8fb9\u6216\u8005\u70b9\u7684\u8def\u5f84\u4e0a\u70b9\u548c\u8fb9\u7684\u6743\u503c\u7684\u5f02\u6216\u548c\u7684\u6700\u5927\u503c\u6700\u5c0f\u3002 \\(p \\le 17\\) \u3002 \u53ef\u4ee5\u901a\u8fc7\u6a21\u62df\u6837\u4f8b\u53d1\u73b0\u4e00\u4e2a\u7ed3\u8bba\uff1a \u5f02\u6216\u548c\u7684\u6700\u5927\u503c\u6700\u5c0f\u5fc5\u5b9a\u4e3a \\(n\\) \u3002 \u4e3a\u5565\u5462\uff1f \u4f60\u8003\u8651\u5bf9\u4e8e \\(\\forall x < n\\) \uff0c \\(x + n \\operatorname{XOR} x\\) \u662f\u4e0d\u662f\u5fc5\u7136\u7b49\u4e8e \\(n\\) \uff1f \u7136\u540e\u4e24\u5bf9\u8fd9\u6837\u7684\u6570\u5f02\u6216\u8d77\u6765\u5c31\u53d8\u6210\u4e86 \\(0\\) \u3002 \u7136\u540e\u6211\u4eec\u8ba9\u5f02\u6216\u548c\u4e3a \\(0\\) \u4e4b\u540e\uff0c\u5728\u8ba9 \\(0\\) \u5148\u548c\u4e00\u4e2a \\(x\\) \u5f02\u6216\uff0c\u7136\u540e\u518d\u548c\u4e00\u4e2a \\(x + n\\) \u5f02\u6216\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5f02\u6216\u548c\u6c38\u8fdc\u4e0d\u4f1a\u8d85\u8fc7 \\(n\\) \u3002 \u6240\u4ee5\u6211\u4eec\u94a6\u5b9a\u6839\u7ed3\u70b9\u4e3a \\(1\\) \uff0c\u6743\u503c\u4e3a \\(n\\) \uff0c\u6df1\u5ea6\u4e3a \\(0\\) \u3002 \u7136\u540e\u5bf9\u4e8e\u5947\u6570\u6df1\u5ea6\u8282\u70b9\uff0c\u6743\u503c\u8bbe\u4e3a \\(x\\) \uff0c\u5230\u7236\u4eb2\u7684\u8fb9\u8bbe\u4e3a \\(x + n\\) \u3002 \u7136\u540e\u5076\u6570\u8282\u70b9\u53cd\u8fc7\u6765\u3002 \u5c31\u6784\u9020\u5b8c\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int si = ( 1 << 18 ); int n , p ; int tot = 0 , head [ si ]; struct Edge { int ver , Next ; } e [ si << 1 ]; inline void add ( int u , int v ) { e [ tot ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot ++ ; } int cnt = 0 ; int a [ si ], c [ si << 1 ]; void dfs ( int u , int in_edge , int dep ) { if ( in_edge != -1 ) { ++ cnt ; if ( dep % 2 == 0 ) a [ u ] = cnt + n , c [ in_edge ] = cnt ; else a [ u ] = cnt , c [ in_edge ] = cnt + n ; } for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if (( i ^ 1 ) != in_edge ) dfs ( v , i , dep + 1 ); } } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; memset ( head , -1 , sizeof head ); while ( T -- ) { cnt = tot = 0 ; cin >> p , n = 1 << p ; for ( int i = 1 ; i < n ; ++ i ) { int u , v ; cin >> u >> v ; add ( u , v ), add ( v , u ); } a [ 1 ] = n ; dfs ( 1 , -1 , 0 ); cout << \"1\" << endl ; for ( int i = 1 ; i <= n ; ++ i ) cout << a [ i ] << \" \" , head [ i ] = -1 ; cout << endl ; for ( int i = 0 ; i < tot ; i += 2 ) cout << c [ i ] + c [ i ^ 1 ] << \" \" , c [ i ] = c [ i ^ 1 ] = 0 ; cout << endl ; } return 0 ; } 1 Tag : \u6784\u9020 / \u6811 / \u5f02\u6216","title":"CF1670E Hemose on the Tree"},{"location":"rec/atcf-for-2022-05/#cf1670f-jee-you-see","text":"\u7ed9\u5b9a \\(n, l, r, z\\) \uff0c\u95ee\u6709\u591a\u5c11\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5e8f\u5217 \\(a\\) \u4f7f\u5f97 \\(\\sum a \\in [l, r]\\) \uff0c \u4e14 \\(\\operatorname{XOR}_i a_i = z\\) \u3002 \\(n \\le 1000, 1\\le l, r, z \\le 10^{18}\\) \u3002 \u53d1\u73b0\u8fd9\u4e2a\u5f02\u6216\u4e0d\u592a\u597d\u5904\u7406\u3002 \u8003\u8651\u5230\u4e8c\u8fdb\u5236\u5e95\u4e0b\u5904\u7406\u3002 \u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a\u7c7b\u4f3c\u6570\u4f4d DP \u7684\u8fc7\u7a0b\u3002 \u53ea\u9700\u8981\u80fd\u6c42\u51fa\u4efb\u610f \\(\\sum a \\le z\\) \u7684\u89e3\uff0c\u5c31\u53ef\u4ee5\u7528\u524d\u7f00\u548c\u7684\u601d\u60f3\u8ba1\u7b97\u3002 \u6700\u7ec8\u7b54\u6848\u7684\u5f02\u6216\u7684\u67d0\u4e00\u4f4d\u662f\u5426\u4e3a \\(1\\) \u53ea\u548c \\(a\\) \u4e2d\u6240\u6709\u6570\u4e8c\u8fdb\u5236\u4e0b\u5728\u8fd9\u4e00\u4f4d\u7684 \\(1\\) \u7684\u4e2a\u6570\u548c\u524d\u9762\u7684\u8fdb\u4f4d\u6709\u5173\u3002 \u800c \\(z\\) \u5b9e\u9645\u4e0a\u53ef\u4ee5\u51b3\u5b9a\u6bcf\u4e00\u4f4d\u6700\u591a\u586b\u591a\u5c11\u4e2a \\(1\\) \u3002 \u90a3\u4e48\u5047\u8bbe \\(z\\) \u7684\u67d0\u4e00\u4f4d\u662f \\(1\\) \u90a3\u4e48\u6240\u6709 \\(a\\) \u4e2d\u7684\u6570\u4e8c\u8fdb\u5236\u4e0b\u8fd9\u4e00\u4f4d\u6700\u591a\u4e00\u4e2a \\(1\\) \u3002 \u4f46\u662f\u56e0\u4e3a\u7531\u8fdb\u4f4d\u653e\u5230\u66f4\u4f4e\u7684\u4e00\u4f4d\u5c31\u6700\u591a\u4e24\u4e2a \\(1\\) \u3002 \u7136\u540e\u4ee5\u6b64\u7c7b\u63a8\uff0c\u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e00\u4f4d\u6700\u591a\u53ea\u80fd\u6709 \\(n\\) \u4e2a \\(1\\) \uff0c\u53ef\u4ee5\u8bb0\u5fc6\u5316\u4e86\u3002 \u6240\u4ee5\u6211\u4eec\u8bbe\u51fa\u4e00\u4e2a\u51fd\u6570 int dfs(int x, int rest, i64 limit) \u3002 \u8868\u793a\u5f53\u524d\u586b\u5230 \\(x\\) \u4f4d\uff0c\u4e4b\u524d\u7684\u4f4d\u53ef\u80fd\u9009\u62e9\u4e0d\u586b\u5b8c\uff0c\u4e8e\u662f\u5230\u8fd9\u91cc\u5c31\u5269\u4e86 \\(rest\\) \u4e2a \\(1\\) \u53ef\u4ee5\u586b\uff0c\u5f53\u524d\u8981\u6c42 \\(\\le limit\\) \u7684\u65b9\u6848\u6570\u3002 \u7136\u540e\u679a\u4e3e\u8fd9\u4e00\u4f4d\u586b\u591a\u5c11\u4e00\uff0c\u5f80\u4e0b\u8d70\u5373\u53ef\uff0c\u65b9\u6848\u6570\u6c42\u4e00\u4e0b\u7ec4\u5408\u6570\u5373\u53ef\u3002 \u6ce8\u610f \\(rest\\) \u8981\u548c \\(n\\) \u53d6 \\(min\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int si = 1e3 + 10 ; constexpr i64 mod = 1l l * ( 1e9 + 7 ); int n ; i64 l , r , z ; i64 f [ 60 + 10 ][ si ]; i64 C [ si ][ si ]; // \u7ec4\u5408\u6570 // \u5f53\u524d\u4f4d\uff0c\u4e0a\u4e00\u4f4d\u5269\u4e86\u591a\u5c11\u4e2a 1\uff0c\u8981\u6c42\u7684\u7b54\u6848 i64 dfs ( int x , int rest , i64 val ) { if ( x == -1 ) return 1 ; // \u6700\u4f4e\u4f4d\u662f 0\uff0c\u6240\u4ee5 x = -1 \u624d\u662f\u8fb9\u754c\u3002 if ( f [ x ][ rest ] != -1 ) return f [ x ][ rest ]; int a = z >> x & 1 , b = ( rest << 1 ) + ( val >> x & 1 ); int up = min ( b , n ); i64 kot = 0 ; // a\u6570\u7ec4\u6240\u6709\u7684\u6570\uff0c\u8fd9\u4e00\u4f4d\u6700\u591a\u6709 n \u4e2a 1\uff0c\u8981\u53d6 min\u3002 for ( int i = a ; i <= up ; i += 2 ) { // \u4e0a\u754c\u662f $a$ \u662f\u4e3a\u4e86\u4fdd\u8bc1\u8fd9\u4f4d\u5728\u6700\u540e\u7684\u5f02\u6216\u548c\u91cc\u548c $z$ \u7684\u8fd9\u4e00\u4f4d\u76f8\u540c\u3002 // \u6bcf\u6b21\u52a0 $2$ \u662f\u4e3a\u4fdd\u8bc1\u8fd9\u4e00\u4f4d\u4e0d\u53d8\u3002 kot = ( kot + dfs ( x - 1 , min ( n , b - i ), val ) * C [ n ][ i ] % mod ) % mod ; } // \u8bb0\u5fc6\u5316 f [ x ][ rest ] = kot ; return kot ; } i64 solve ( i64 val ) { memset ( f , -1 , sizeof f ); return dfs ( 60 , 0 , val ) % mod ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> l >> r >> z ; C [ 0 ][ 0 ] = 1l l ; for ( int i = 1 ; i <= n ; ++ i ) { C [ i ][ 0 ] = 1l l ; for ( int j = 1 ; j <= i ; ++ j ) { C [ i ][ j ] = ( C [ i - 1 ][ j ] + C [ i - 1 ][ j - 1 ]) % mod ; } } // meow(solve(5)) << \" \", meow(solve(0)) << endl; cout << ( solve ( r ) - solve ( l - 1 ) + mod ) % mod << endl ; return 0 ; } 1 Tag : \u4e8c\u8fdb\u5236\u4e0b\u7684\u6570\u4f4dDP / \u5f02\u6216","title":"CF1670F Jee, You See?"},{"location":"rec/atcf-for-2022-05/#cf1684e-mex-vs-diff","text":"\u5b9a\u4e49 \\(MEX(A)\\) \u4e3a\u5e8f\u5217 \\(A\\) \u4e2d\u6700\u5c0f\u7684\u4e0d\u5b58\u5728\u7684\u975e\u8d1f\u6574\u6570\u3002 \u5b9a\u4e49 \\(DIFF(A)\\) \u4e3a\u5e8f\u5217 \\(A\\) \u4e2d\u4e0d\u540c\u7684\u6570\u7684\u4e2a\u6570\u3002 \u4f60\u6709 \\(k\\) \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u53ef\u4ee5\u628a\u4efb\u610f\u4e00\u4e2a\u4f4d\u7f6e\u6539\u4e3a\u4efb\u610f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u3002 \u6c42\u53ef\u4ee5\u8fbe\u5230\u7684 \\(\\min\\{DIFF(A) - MEX(A)\\}\\) \u3002 \\(1\\le n \\le 10^5, 0\\le k \\le 10^5, a_i \\le 10^9\\) \u3002 \u53d1\u73b0\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u6700\u5927\u5316 \\(MEX\\) \u5e76\u6700\u5c0f\u5316 \\(DIFF\\) \u3002 \u6709\u4e24\u4e2a\u53d8\u91cf\u7684\u8bdd\u4f1a\u5f88\u4e0d\u597d\u641e\uff0c\u6240\u4ee5\u6211\u4eec\u5c1d\u8bd5\u56fa\u5b9a\u4e00\u4e2a\u53d8\u91cf\u3002 \u6709\u4e00\u4e2a\u663e\u7136\u4f46\u662f\u6211\u8d5b\u65f6\u6ca1\u60f3\u5230\u7684\u7ed3\u8bba\uff1a \\(MEX\\) \u4e00\u5b9a \\(\\le n + 1\\) \u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u76f4\u63a5\u679a\u4e3e \\(MEX\\) \u3002 \u6240\u4ee5\u8981\u505a\u7684\u5c31\u662f\u6700\u5c0f\u5316 \\(DIFF\\) \u3002 \u5f53\u7136\u5bf9\u4e8e\u6bcf\u4e2a \\(MEX\\) \uff0c\u5982\u679c\u5b83\u524d\u9762\uff08\u5728\u503c\u57df\u4e0a\uff09\u6709\u7a7a\u7f3a\uff0c\u6211\u4eec\u662f\u9700\u8981\u8865\u4e0a\u7684\u3002 \u5982\u679c \\(k\\) \u6b21\u4e0d\u591f\u7684\u8bdd\uff0c\u8fd9\u4e2a \\(MEX\\) \u5fc5\u7136\u4e0d\u5408\u6cd5\u3002 \u7136\u540e\u5047\u8bbe\u586b\u5b8c\u7a7a\u7f3a\u8fd8\u5269\u4e0b \\(rest\\) \u6b21\u64cd\u4f5c\u673a\u4f1a\u3002 \u8003\u8651\u4e00\u4e2a\u6bd4\u8f83 trivial \u7684 greedy\uff0c\u6bcf\u6b21\u64cd\u4f5c\u90fd\u5c3d\u91cf\u8ba9\u51fa\u73b0\u6b21\u6570\u5c11\u7684\u4e00\u79cd\u6570\u5168\u90e8\u53d8\u4e3a\u4efb\u610f\u4e00\u4e2a\u524d\u9762\uff08 \\(0 \\sim MEX - 1\\) \uff09\u5df2\u7ecf\u51fa\u73b0\u7684\u6570\u3002 \u6bcf\u6b21 \\(DIFF\\) \u80fd\u51cf\u5c11\u4e00\u3002 \u7136\u540e\u8fd9\u6837\u5c31\u80fd\u6700\u5c0f\u5316 \\(DIFF\\) \u3002 \u4f46\u662f\u76f4\u63a5\u66b4\u529b\u505a\u7684\u8bdd\u590d\u6742\u5ea6\u662f \\(O(nk)\\) \u7684\uff0c\u8003\u8651\u600e\u4e48\u4f18\u5316\u3002 \u53ef\u4ee5\u8003\u8651\u8bb0\u4e00\u4e2a\u6570\u7ec4 \\(cnt\\) \u8868\u793a\u539f\u5e8f\u5217\u7684\u6876\uff0c\u7136\u540e\u8bb0 \\(cntt\\) \u4e3a \\(cnt\\) \u7684\u6876\u3002 \u8fd9\u6837\u76f4\u63a5\u5728\u6392\u5e8f\u8fc7\u540e\u7684 \\(cntt\\) \u5c3d\u91cf\u53d6\u524d\u9762\u7684\u5c31\u884c\u3002 \u6700\u574f\u60c5\u51b5\u4e0b\u8981\u53d6 \\(\\sqrt{k}\\) \u6b21\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(n\\sqrt{k})\\) \u3002 \uff08\u56e0\u4e3a \\(\\dfrac{x(x + 1)}{2} \\le k\\) \uff0c\u6240\u4ee5\u9879\u6570 \\(x\\) \u662f \\(\\sqrt{k}\\) \u7ea7\u522b\u7684\u3002\uff09 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 // author : black_trees #include <map> #include <cstdio> #include <vector> #include <cstring> #include <iostream> #include <algorithm> #pragma GCC target(\"avx,sse2,sse3,sse4,mmx\") #pragma GCC optimize(\"Ofast\", \"inline\", \"-ffast-math\") #define endl '\\n' #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { int n , k ; cin >> n >> k ; std :: map < int , int > cnt ; cnt . clear (); std :: map < int , int > cntOfcnt ; cntOfcnt . clear (); std :: vector < int > a ( n + 1 ), occ ( n + 1 ); occ . clear (), a . clear (); for ( int i = 1 ; i <= n ; ++ i ) { cin >> a [ i ], cnt [ a [ i ]] ++ ; if ( a [ i ] <= n ) occ [ a [ i ]] = 1 ; } for ( int i = 1 ; i <= n ; ++ i ) occ [ i ] += occ [ i - 1 ]; for ( auto [ ele , num ] : cnt ) cntOfcnt [ num ] ++ ; int diff = int ( cnt . size ()), ans = diff ; for ( int mex = 1 ; mex <= n + 1 ; mex ++ ) { if ( cnt [ mex - 1 ]) cntOfcnt [ cnt [ mex - 1 ]] -- , diff -- ; if ( mex > occ [ mex - 1 ] + k ) continue ; int ret = diff , rest = k ; for ( auto [ x , y ] : cntOfcnt ) { if ( rest >= x * y ) rest -= x * y , ret -= y ; else { ret -= rest / x ; break ; } } ans = min ( ans , ret ); } cout << ans << endl ; } return 0 ; }","title":"CF1684E MEX vs DIFF"},{"location":"rec/atcf-for-2022-05/#cf1682e-unordered-swaps","text":"\u7ed9\u4f60\u4e00\u4e2a \\(1 \\sim n\\) \u7684\u6392\u5217 \\(p\\) \uff0c\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u4ea4\u6362\u4efb\u610f\u4e24\u4e2a\u5143\u7d20\u3002 Alice \u7528\u4e86\u6700\u5c11\u7684\u64cd\u4f5c\u6b21\u6570\u628a \\(p\\) \u7f6e\u6362\u6210\u4e86\u4e00\u4e2a\u6709\u5e8f\u7684\u6392\u5217\uff0c\u5373 \\(1,2,3,\\dots, n\\) \u3002 \u5e76\u4e14 Alice \u8bb0\u5f55\u4e0b\u4e86\u5979\u6bcf\u6b21\u7684\u64cd\u4f5c \\((x_i, y_i)\\) \uff0c\u5373\u4ea4\u6362 \\(p_{x_i}, p_{y_i}\\) \u3002 \u4f46\u662f Bob \u628a\u8fd9\u4e2a\u64cd\u4f5c\u4e8c\u5143\u7ec4\u5e8f\u5217 \\(q\\) \u6253\u4e71\u4e86\uff0c\u4f60\u9700\u8981\u6062\u590d\u8fd9\u4e2a\u4e8c\u5143\u7ec4\u5e8f\u5217\u7684\u987a\u5e8f\u3002 \u5e76\u4e14\u8f93\u51fa\uff0c\u7b2c \\(i\\) \u6b21\u64cd\u4f5c\u4f7f\u7528\u7684\u662f\u7ed9\u5b9a \\(q\\) \u7684\u7b2c\u51e0\u4e2a\u4e8c\u5143\u7ec4\uff0c\u4efb\u610f\u89e3\u5373\u53ef\u3002 \\(n \\le 2e5\\) \u3002 \u53c8\u662f\u4e00\u9053\u7f6e\u6362\u73af\u7684\u9898\u3002 \u663e\u7136\u5148\u627e\u51fa\u6240\u6709\u7684\u7f6e\u6362\u73af\uff0c\u8fd9\u4e2a Tarjan \u4e00\u4e0b\u5373\u53ef\u3002 \u7136\u540e\u6bcf\u6b21\u64cd\u4f5c\u80af\u5b9a\u662f\u4ea4\u6362\u4e00\u4e2a\u7f6e\u6362\u73af\u4e0a\u7684\u4e24\u4e2a\u5143\u7d20\u4ee5\u628a\u7f6e\u6362\u73af\u62c6\u6210\u4e24\u4e2a\u7f6e\u6362\u73af\u3002 \u6700\u540e\u7684\u76ee\u7684\u5c31\u662f\u628a\u6240\u6709\u7f6e\u6362\u73af\u5168\u90e8\u62c6\u6210\u81ea\u73af\u3002 \u6240\u4ee5\u64cd\u4f5c\u65f6 \\(x_i,y_i\\) \u5fc5\u987b\u8981\u5728\u540c\u4e00\u4e2a\u7f6e\u6362\u73af\u4e0a\uff08 \u7ed3\u8bba1 \uff09\uff0c\u5426\u5219\u4f60\u5c31\u4f1a\u6d6a\u8d39\u4e00\u6b21\u673a\u4f1a\uff0c\u6c38\u8fdc\u65e0\u6cd5\u5b8c\u6210\u8fd9\u4e2a\u7f6e\u6362\u3002 \u7136\u540e\u6211\u4eec\u8003\u8651\u600e\u4e48\u5904\u7406 \\(q\\) \u3002 \u53ef\u4ee5\u628a\u4e00\u4e2a\u4e8c\u5143\u7ec4 \\((x_i, y_i)\\) \u770b\u6210\u4e00\u6761\u8fde\u63a5 \\((x_i, y_i)\\) \u7684\u8fb9\u3002 \u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7f6e\u6362\u73af\uff0c\u5b83\u5fc5\u7136\u4f1a\u5f62\u6210\u4e00\u68f5\u6811 \\(T\\) \uff0c\u5047\u8bbe\u8282\u70b9\u4e2a\u6570\u4e3a \\(N\\) \u3002 \u7136\u540e\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u4ee5\u67d0\u79cd \u987a\u5e8f \u53d6\u8fd9 \\(N - 1\\) \u6761\u8fb9\u3002 \u6b64\u65f6\u5c31\u6ca1\u6709\u4efb\u4f55\u601d\u8def\u4e86\uff0c\u6240\u4ee5\u8003\u8651\u600e\u4e48\u5229\u7528\u4e00\u4e0b\u5df2\u7ecf\u6709\u7684\u7ed3\u8bba1\u3002 \u9996\u5148\uff0c\u5982\u679c\u6211\u4eec\u9009\u4e86 \\(T\\) \u4e0a\u7684\u67d0\u4e2a\u64cd\u4f5c \\((u, v)\\) \uff0c\u90a3\u4e48\u5b9e\u9645\u4e0a\u7b49\u540c\u4e8e\u5220\u9664\u8fb9 \\((u, v)\\) \uff0c\u8ba9\u7f6e\u6362\u73af\u65ad\u6210\u4e24\u4e2a\u3002 \\(T\\) \u540c\u6837\u4e5f\u4f1a\u5206\u88c2\u6210 \\(T1, T2\\) \u4e24\u68f5\u6811\u3002 \u4f46\u662f\u6bcf\u4e00\u6b21\u5220\u9664\u4e0d\u4e00\u5b9a\u90fd\u662f\u5408\u6cd5\u7684\uff0c\u4f60\u9700\u8981\u4fdd\u8bc1\u65ad\u5f00\u4e4b\u540e\uff0c \\(u\\) \u8fde\u901a\u5757\u7684\u90fd\u5728\u4e00\u4e2a\u73af\u4e0a\uff0c \\(v\\) \u8fde\u901a\u5757\u540c\u7406\u3002 \u6bd4\u5982\u8fd9\u79cd\u60c5\u51b5\uff1a 1 2 3 4 5 6 7 o ---- o ---- o ---- o 1 2 4 3 ( Tree ) 1 2 3 4 ( Ring ) o ---> o ---> o ---> o ^ | | ______________ | \u4f60\u5982\u679c\u5220\u6389 \\(T\\) \u4e0a\u7684\u8fb9 \\((1, 2)\\) \uff0c\u90a3\u4e48\u7f6e\u6362\u73af\u4f1a\u53d8\u6210\u8fd9\u6837\uff1a 1 2 3 4 5 6 1 2 3 4 ___________ | v o o o ---> o ^ | | ______________ | \u4e5f\u5c31\u662f\u8bf4\uff0c\u72ec\u7acb\u7684\u8fde\u901a\u5757\u53d8\u6210\u4e86 \\(2\\) \u8fd9\u4e2a\u8282\u70b9\uff01\u3002 \u800c\u672c\u6765\u671f\u671b\u4e2d\u5e94\u8be5\u662f \\(1\\) \u8fd9\u4e2a\u8282\u70b9\u72ec\u7acb\u51fa\u6765\u7684\u3002 \u6240\u4ee5\u8fd9\u6837\u7684\u4e00\u6b21\u64cd\u4f5c\u662f\u4e0d\u5408\u6cd5\u7684\u3002 \u601d\u8003\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u3002 \u53d1\u73b0\u5220\u6389 \\((2, 4)\\) \u8fd9\u6761\u8fb9\u662f\u5408\u6cd5\u7684\uff0c\u4e4b\u540e\u518d\u5220 \\((1, 2)\\) \u8fd9\u6761\u8fb9\u5c31\u5408\u6cd5\u4e86\uff01 \u4e0d\u59a8\u731c\u6d4b\uff0c\u8fd9\u4e2a\u9009\u8fb9\u7684\u987a\u5e8f\u53ef\u80fd\u6709\u4ec0\u4e48\u7ed3\u8bba\u3002 \u7ed3\u8bba2 \u5bf9\u4e8e\u4e00\u4e2a\u6811\u4e0a\u7684\u8282\u70b9 \\(u\\) \uff0c\u5047\u8bbe\u548c\u5b83\u6709\u8fde\u8fb9\u7684\u8282\u70b9\u96c6\u5408\u4e3a \\(adj = \\{x_1, x_2, \\dots, x_M\\}\\) \u3002 \u5e76\u4e14\u5b9a\u4e49 \\(dis(u, x)\\) \u4e3a\u7f6e\u6362\u73af\u4e0a \\(u\\) \u5230 \\(x\\) \u7684\u8ddd\u79bb\u3002 \u5bf9 \\(adj\\) \u6309\u7167 \\(dis(u, x)\\) \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u5f97\u5230\u4e00\u4e2a\u65b0\u7684 \\(adj = \\{y_1, y_2, \\dots, y_M\\}\\) \u3002 \u90a3\u4e48\uff0c\u5f53 \\(i < j\\) \u65f6\uff0c\u64cd\u4f5c \\((u, y_i)\\) \u5fc5\u987b\u5728 \\((u, y_j)\\) \u4e4b\u524d\u8fdb\u884c\u3002 \u5426\u5219\uff0c\u5982\u679c\u5148\u8fdb\u884c\u4e86 \\((u, y_j)\\) \uff0c\u90a3\u4e48\u5b83\u4e00\u5b9a\u662f\u4e00\u4e2a\u4e0d\u5408\u6cd5\u7684\u64cd\u4f5c\u3002 Proof \u8fd9\u4e2a\u6bd4\u8f83\u597d\u8bc1\u660e\uff0c\u56e0\u4e3a\u4f60\u5982\u679c\u5148\u6362\u4e86 \\((u, y_j)\\) \uff0c\u90a3\u4e48 \\((u, y_i)\\) \u5fc5\u7136\u4f1a\u5904\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u7f6e\u6362\u73af\u4e0a\u3002 \u4e3a\u4ec0\u4e48\u4f1a\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u7f6e\u6362\u73af\u4e0a \u8bbe \\(nxt(qwq)\\) \u8868\u793a\u8282\u70b9 \\(qwq\\) \u5728\u7f6e\u6362\u73af\u4e0a\u6307\u5411\u7684\u8282\u70b9\u3002 \u4ea4\u6362 \\((u, y_j)\\) \u4e4b\u540e\uff0c \\(nxt(u)\\) \u4f1a\u53d8\u6210 \\(nxt(y_j)\\) \uff0c \\(nxt(y_i)\\) \u4f1a\u53d8\u6210 \\(nxt(u)\\) \u3002 \u7136\u540e \\(u\\) \u5c31\u4f1a\u548c\u539f\u6765\u7684 \\(nxt(y_j)\\) \u5728\u4e00\u4e2a\u7f6e\u6362\u73af \\(g_1\\) \u4e0a\uff0c\u7136\u540e\u539f\u6765\u7684 \\(nxt(u)\\) \u4e00\u76f4\u5230 \\(y_j\\) \u8fd9\u4e00\u6bb5\u90fd\u4f1a\u5728\u53e6\u4e00\u4e2a\u7f6e\u6362\u73af \\(g_2\\) \u4e0a\uff0c \u5e76\u4e14\u56e0\u4e3a \\(i < j\\) \uff0c\u6240\u4ee5 \\(y_i\\) \u4e5f\u4f1a\u5728 \\(g_2\\) \u4e0a\uff0c\u90a3\u4e48 \\(u, y_i\\) \u81ea\u7136\u5c31\u662f\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u7f6e\u6362\u73af\u4e0a\u4e86\u3002 \u6709\u4e00\u5f20\u56fe\u53ef\u4ee5\u53c2\u8003\uff1a \u7136\u540e\u4f60\u4e4b\u540e\u518d\u6362 \\((u, y_i)\\) \u5c31\u4f1a\u5408\u5e76\u4e24\u4e2a\u73af\uff0c\u5c31\u6d6a\u8d39\u4e86\u4e00\u6b21\u64cd\u4f5c\uff0c\u8fdd\u80cc\u4e86\u7ed3\u8bba1\uff0c\u6c38\u8fdc\u65e0\u6cd5\u5b8c\u6210\u7f6e\u6362\u3002 \u7136\u540e\u53d1\u73b0\uff0c\u5176\u5b9e\u6211\u4eec\u5df2\u7ecf\u80fd\u786e\u5b9a\u67d0\u4e9b\u8fb9\u7684\u987a\u5e8f\u5173\u7cfb\u4e86\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u79cd\u65b0\u7684\u5173\u7cfb \\((x, y) \\prec (xx, yy)\\) \uff0c\u8868\u793a\u6211\u4eec\u80fd\u786e\u5b9a \\((x, y)\\) \u8fd9\u4e2a\u64cd\u4f5c\u6bd4 \\((xx, yy)\\) \u5148\u4f7f\u7528\u3002 \u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6811\u4e0a\u6bcf\u4e2a\u5ea6\u6570\u5927\u4e8e\u4e00\u7684\u8282\u70b9 \\(u\\) \uff0c\u548c\u4ed6\u76f8\u5173\u7684\u6240\u6709\u8fb9\u5982\u679c\u6784\u6210\u96c6\u5408 \\(E_u\\) \uff0c\u90a3\u4e48 \\(E_u\\) \u4e2d\u7684\u6240\u6709\u5143\u7d20\u5fc5\u7136\u4f1a\u4ee5\u94fe\u5f0f\u7684\u5f62\u5f0f\u6ee1\u8db3\u5173\u7cfb \\(\\prec\\) \u3002 \u7136\u540e\u4e0d\u540c\u7684\u4e24\u4e2a\u96c6\u5408 \\(E1, E2\\) \uff0c\u5fc5\u7136\u4f1a\u4ee5\u4e00\u4e2a \\(\\prec\\) \u5173\u7cfb\u8fde\u63a5\u8d77\u6765\uff08\u56e0\u4e3a\u8fd9\u662f\u6811\u554a\uff09 \u800c\u4e14\u4e0d\u4f1a\u6709\u91cd\u590d\u7684\u4e24\u5bf9\u5173\u7cfb\u51fa\u73b0\u3002 \u601d\u8003\u4e00\u4e0b\uff0c \\(\\prec\\) \u8fd9\u4e2a\u5173\u7cfb\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u4e25\u683c\u504f\u5e8f\u5173\u7cfb\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u62d3\u6251\u6c42\u5b83\u7684\u89e3\u3002 \u800c\u6211\u4eec\u8981\u6c42\u7684\u6b63\u597d\u5c31\u662f\u8fd9\u4e9b\u8fb9\u7684\u4f7f\u7528\u987a\u5e8f\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e9b\u8fb9\u770b\u4f5c\u8282\u70b9\uff0c\u5bf9\u4e8e\u6811\u4e0a\u7684\u4e00\u4e2a\u8282\u70b9 \\(u\\) \uff0c\u6211\u4eec\u4ee4 \\(adj_u = \\{x_1, x_2, \\dots\\}\\) \u3002 \u90a3\u4e48\uff0c\u53ea\u9700\u8981\u8fde \\((u, x_1) \\to (u, x_2) \\to (u, x_3) \\to \\dots\\) \u3002 \u6700\u540e\u8dd1\u4e00\u4e2a\u62d3\u6251\u6392\u5e8f\u5c31\u884c\u4e86\u3002 \u6ce8\u610f\u8fd9\u91cc\u7684\u70b9\u5bf9 \\((x, y)\\) \u5e94\u5f53\u662f\u65e0\u5e8f\u7684\uff0c\u6240\u4ee5\u6709\u4e2a\u5c0f\u6280\u5de7\u5c31\u662f\uff0c\u6bcf\u6b21\u64cd\u4f5c\u7684\u65f6\u5019\u5f3a\u5236 \\(x < y\\) \u4ee5\u65b9\u4fbf\u5904\u7406\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 // author : black_trees #include <map> #include <stack> #include <queue> #include <cstdio> #include <vector> #include <cassert> #include <cstring> #include <utility> #include <iostream> #include <algorithm> #pragma GCC target(\"avx,sse2,sse3,sse4,mmx\") #pragma GCC optimize(\"Ofast\", \"inline\", \"-ffast-math\") #define endl '\\n' #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int n , m ; int tim = 0 , cnt = 0 ; int p [ si ]; // \u7ed9\u5b9a\u7684\u88ab\u6253\u4e71\u7684 perm int dfn [ si ]; // \u6bcf\u4e2a\u8282\u70b9(1 ~ n)\u5728\u627e\u73af\u7684\u65f6\u5019\u7684 dfs \u5e8f\u3002 std :: vector < int > G [ si ]; // \u539f\u56fe\u7684\u90bb\u63a5\u8868\uff0c\u7528\u6765\u627e\u73af\u3002 std :: vector < int > adj [ si ]; // \u6811\u7684\u90bb\u63a5\u8868 int low [ si ]; bool ins [ si ]; std :: stack < int > s ; int c [ si ], maxv [ si ], minv [ si ]; // i \u6240\u5c5e\u7684\u73af\u7684\u7f16\u53f7\uff0c\u73af\u4e0a\u6700\u5927\u6700\u5c0f dfn. void tarjan ( int u ) { dfn [ u ] = low [ u ] = ++ tim ; s . push ( u ), ins [ u ] = false ; for ( auto v : G [ u ]) { if ( ! dfn [ v ]) tarjan ( v ), low [ u ] = min ( low [ u ], low [ v ]); else low [ u ] = min ( low [ u ], dfn [ v ]); } if ( dfn [ u ] == low [ u ]) { int x ; ++ cnt ; do { x = s . top (), s . pop (), c [ x ] = cnt , maxv [ cnt ] = max ( maxv [ cnt ], dfn [ x ]), minv [ cnt ] = min ( minv [ cnt ], dfn [ x ]); } while ( u != x ); } } std :: map < pair < int , int > , int > Hash ; // \u7528\u6765\u8bb0\u5f55\u8fd9\u6761\u8fb9\u7684\u7f16\u53f7\u3002 int order = 0 ; // \u6700\u540e\u5f97\u5230\u7684 topo \u5e8f\u3002 int ind [ si ]; // \u5165\u5ea6 struct Node { int u , v , id ; } rec [ si ]; // \u8bb0\u5f55\u8fd9\u4e2a swap \u7684\u5c5e\u6027\u3002 std :: vector < int > E [ si ]; // \u7528\u6765\u62d3\u6251\u7684\u56fe\u3002 int ans [ si ], ret [ si ]; // ans[i] \u662f\u7b2c i \u4e2a swap \u7684 order // ret[i] \u662f\u7b2c i \u6b21\u4f7f\u7528\u54ea\u4e2a swap\u3002 int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); Hash . clear (); memset ( minv , 0x3f , sizeof minv ); memset ( maxv , -0x3f , sizeof maxv ); // sort by PosSt auto dis = [ & ]( int PosSt , int PosEd ) -> int { assert ( c [ PosSt ] == c [ PosEd ]); int bel = c [ PosSt ]; int siz = maxv [ bel ] - minv [ bel ] + 1 ; return (( dfn [ PosEd ] - dfn [ PosSt ]) + siz ) % siz ; }; cin >> n >> m ; for ( int i = 1 ; i <= n ; ++ i ) cin >> p [ i ], G [ i ]. push_back ( p [ i ]); for ( int i = 1 ; i <= n ; ++ i ) if ( ! dfn [ i ]) tarjan ( i ); for ( int i = 1 ; i <= m ; ++ i ) { int u , v ; cin >> u >> v ; // \u64cd\u4f5c\u7684\u4f4d\u7f6e\u3002 assert ( c [ u ] == c [ v ]); adj [ u ]. push_back ( v ), adj [ v ]. push_back ( u ); if ( u > v ) swap ( u , v ); Hash [{ u , v }] = i ; rec [ i ] = ( Node ){ u , v , i }; } for ( int i = 1 ; i <= n ; ++ i ) sort ( adj [ i ]. begin (), adj [ i ]. end (), [ & ]( int x , int y ) { return dis ( i , x ) < dis ( i , y ); }); // \u6309\u7167\u7ed3\u8bba\u7ed9 adj \u6392\u4e2a\u5e8f for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 0 ; j < int ( adj [ i ]. size ()) - 1 ; ++ j ) { int x = i , y = adj [ i ][ j ], u = i , v = adj [ i ][ j + 1 ]; if ( x > y ) swap ( x , y ); if ( u > v ) swap ( u , v ); int yhp = Hash [{ x , y }], zxy = Hash [{ u , v }]; E [ yhp ]. push_back ( zxy ), ind [ zxy ] ++ ; } } std :: queue < int > q ; for ( int i = 1 ; i <= m ; ++ i ) if ( ! ind [ i ]) q . push ( i ); while ( ! q . empty ()) { int u = q . front (); q . pop (); ans [ rec [ u ]. id ] = ++ order ; for ( auto v : E [ u ]) if ( ! ( -- ind [ v ])) q . push ( v ); } for ( int i = 1 ; i <= m ; ++ i ) ret [ i ] = i ; sort ( ret + 1 , ret + 1 + m , [ & ]( int x , int y ){ return ans [ x ] < ans [ y ]; }); for ( int i = 1 ; i <= m ; ++ i ) cout << ret [ i ] << \" \" ; cout << endl ; return 0 ; } // \u5176\u5b9e\u4e0a\u9762\u6709\u4e9b\u4e1c\u897f\u662f\u4e0d\u5fc5\u8981\u7684\uff0c\u4e0d\u8fc7\u61d2\u5f97\u6539\u4e86\uff0c\u53cd\u6b63\u610f\u601d\u90fd\u4e00\u6837\u3002","title":"CF1682E Unordered Swaps"},{"location":"rec/atcf-for-2022-07-08/","text":"\u4e03\u3001\u516b\u6708 CF \u4e22\u4eba\u505a\u9898\u8bb0\u5f55 \u03c8(\uff40\u2207\u00b4)\u03c8 \u9000\u5f79\u8fc7\u540e\u6c34\u5e73\u66f4\u52a0\u4f4e\u4e0b\u4e86\u3002 \u672c\u6765\u5c31\u5f88\u83dc\uff0c\u73b0\u5728\u4f30\u8ba1\u5c31\u4e00\u4e2a pupil \u6c34\u5e73\u3002 \u6709\u65f6\u5019\u751a\u81f3 C \u505a\u4e0d\u51fa\u6765 /kx \u5c5e\u4e8e\u662f\u9ebb\u4e86\u3002 CF1706C Qpwoeirut And The City \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(\\{a\\}\\) \uff0c \\(3 \\le n \\le 1e5\\) \u3002 \u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u628a\u5e8f\u5217\u91cc\u7684\u4e00\u4e2a\u6570\u52a0\u4e00\uff0c\u4ee3\u4ef7\u662f\u4e00\u3002 \u8981\u6c42\u6700\u5927\u5316\u5e8f\u5217\u7684 \u201c\u5cf0\u201d \u7684\u4e2a\u6570\uff0c\u4e14\u4ee3\u4ef7\u6700\u5c0f\u3002 \u4e00\u4e2a\u201c\u5cf0\u201d\u5b9a\u4e49\u4e3a\u6ee1\u8db3 \\(a_i > a_{i + 1}, a_i > a_{i - 1}\\) \u7684 \\(a_i\\) \u3002 \\(a_{0}\\) \u548c \\(a_{n + 1}\\) \u5728\u5b9a\u4e49\u4e0a\u7b49\u4e8e \\(+\\infty\\) \u3002 \u8003\u573a\u72af\u6d51\u6ca1\u60f3\u5230\uff0c\u8fd9\u662f\u8003\u573a\u601d\u8def\uff1a \u53d1\u73b0\u4e86\u5cf0\u7684\u4e2a\u6570\u5fc5\u7136\u662f \\(mx = \\lfloor \\dfrac{n-1}{2}\\rfloor\\) \u3002 \u7136\u540e\u5c31\u8003\u8651\u5728 \\([2, n - 1]\\) \u91cc\u9762\u9009\uff0c\u5f00\u59cb\u60f3\u7684\u662f\u76f4\u63a5\u95f4\u9694\u9009 \\(mx\\) \u4e2a\u51fa\u6765\u3002 \u4f46\u662f\u53d1\u73b0 \\(n \\equiv 0 (\\mod 2)\\) \u7684\u65f6\u5019\u53ef\u4ee5\u5728\u4e2d\u95f4\u8df3\u4e24\u683c\u51fa\u6765\u9009\u3002 \\((\\*)\\) \u7136\u540e\u5c31\u53bb\u8003\u8651\u8d2a\u5fc3\u6216\u8005\u72b6\u6001\u673a DP \u4e86\uff0c\u6ca1\u6709\u53bb\u7ec6\u60f3 \\((\\*)\\) \u8fd9\u73a9\u610f\u513f\u5230\u5e95\u662f\u4e3a\u5565\uff0c\u672c\u8d28\u662f\u4ec0\u4e48\uff0c\u4e5f\u6ca1\u53bb\u8003\u8651\u590d\u6742\u5ea6\u7684\u95ee\u9898\uff0c\u4e5f\u5c31\u6ca1\u60f3\u5230\u6b63\u89e3\u3002 \u5bf9\u4e8e\u8fd9\u73a9\u610f\u513f\u4ed4\u7ec6\u8003\u8651\u4e00\u4e0b\uff0c\u5148\u5217\u51fa\u51e0\u4e2a corner case\uff1b \u5982\u679c \\(n\\) \u662f\u5947\u6570\uff0c\u80af\u5b9a\u6ca1\u6cd5\u8df3\u4e24\u683c\uff0c\u53ea\u80fd\u4ece \\(2\\) \u5f00\u59cb\u95f4\u9694\u9009\uff0c\u8fd9\u4e2a\u7b97\u60c5\u51b5 \\(1\\) \u3002 \u7136\u540e\u8003\u8651\u5076\u6570\uff0c\u53d1\u73b0\u5982\u679c\u4e0d\u8df3\u4e24\u683c\uff0c\u5fc5\u7136\u662f\u4ece \\(2\\) \u5f00\u59cb\u95f4\u9694\u62ff\u5230 \\(n - 2\\) \uff0c\u8fd9\u7b97\u60c5\u51b5 \\(2.1\\) \uff0c\u6216\u8005\u4ece \\(3\\) \u5f00\u59cb\u62ff\u5230 \\(n - 1\\) \uff0c\u8fd9\u7b97\u60c5\u51b5 \\(2.2\\) \u3002 \u6700\u540e\u5c31\u662f\u8df3\u4e24\u683c\u7684\u60c5\u51b5 \\(3\\) \uff0c\u80af\u5b9a\u53ea\u80fd\u8df3\u4e00\u6b21\u4e24\u683c\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u524d\u9762\u4e00\u6bb5\u662f\u5076\u6570\uff0c\u540e\u9762\u4e00\u6bb5\u662f\u5947\u6570\uff08\u8981\u60f3\u8df3\u4e00\u6b21\uff0c\u53ea\u80fd\u4ece \\(2\\) \u5f00\u59cb\u62ff\uff09\u3002 \u6240\u4ee5\u9884\u5904\u7406\u5076\u6570\u7684\u82b1\u8d39\u524d\u7f00\u548c\u5947\u6570\u7684\u82b1\u8d39\u540e\u7f00\u5373\u53ef\u3002 \u53d1\u73b0\u60c5\u51b5 \\(2.1, 2.2\\) \u90fd\u53ef\u4ee5\u76f4\u63a5\u5f52\u5316\u5230 \\(3\\) \uff0c\u6240\u4ee5\u4ee3\u7801\u5b9e\u73b0\u5c31\u53ef\u4ee5\u7b80\u5355\u4e00\u70b9\uff0c\u7a0d\u5fae\u8c03\u6574\u4e00\u4e0b\u5faa\u73af\u8fb9\u754c\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 // \u60f3\u4e0a CM\u3002 // \u6211\u98df\u4e0d\u98df\u6cb9\u997c\u3002 // \u80fd\u4e0d\u80fd\u6765\u70b9\u4e32\u4e32\u9898\u3002 // \u4e3a\u4ec0\u4e48\u4eff\u5c04\u53d8\u6362\u4e0d\u8003\u4e86\u3002 // \u7b97\u6cd5\u6846\u56fe\u7684\u53d8\u91cf\u90fd\u662f\u4ec0\u4e48 shit\u3002 // \u4ec0\u4e48\u65f6\u5019\u624d\u80fd AP Spasmodic AT\u3002 // OI \u6c34\u5e73\u4e00\u964d\u518d\u964d\uff0c\u5feb\u53d8\u6210\u53ea\u4f1a\u8d3a\u9898\u7684 shaber \u4e86\u3002 #include <bits/stdc++.h> #pragma GCC target(\"avx,sse2,sse3,sse4,mmx\") #pragma GCC optimize(\"Ofast\", \"inline\", \"-ffast-math\") using namespace std ; using i64 = long long ; const int si = 1e5 + 10 ; const i64 inf = 0x3f3f3f3f3f3f3f3fll ; int n ; i64 a [ si ], w [ si ]; i64 p [ si ], s [ si ]; void solve () { cin >> n ; i64 ans = 0 ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; if ( n & 1 ) { for ( int i = 2 ; i < n ; i += 2 ) if ( a [ i ] <= a [ i - 1 ] || a [ i ] <= a [ i + 1 ]) ans += max ( a [ i - 1 ], a [ i + 1 ]) - a [ i ] + 1 ; // cout << \"ans = \"; cout << ans << endl ; return ; } w [ 0 ] = w [ 1 ] = w [ n ] = w [ n + 1 ] = w [ n + 2 ] = 0 ; for ( int i = 2 ; i < n ; ++ i ) if ( a [ i ] <= a [ i - 1 ] || a [ i ] <= a [ i + 1 ]) w [ i ] = max ( a [ i - 1 ], a [ i + 1 ]) - a [ i ] + 1 ; else w [ i ] = 0 ; memset ( p , 0 , sizeof p ); // prefix sum of even bulding memset ( s , 0 , sizeof s ); // suffix sum of odd building for ( int i = 2 ; i < n ; i += 2 ) p [ i ] = p [ i - 2 ] + w [ i ]; for ( int i = n - 1 ; i > 1 ; i -= 2 ) s [ i ] = s [ i + 2 ] + w [ i ]; ans = inf ; for ( int i = 0 ; i < n ; i += 2 ) ans = min ( ans , p [ i ] + s [ i + 3 ]); // cout << \"ans = \"; cout << ans << endl ; return ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) solve (); return 0 ; } \u4e00\u4e2a\u4e00\u76f4\u505a CF \u90fd\u6709\u7684\u6bdb\u75c5 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5728 UOJ \u7fa4\u91cc\u95ee\u4e86\u4e2a\u95ee\u9898\uff1a \u804a\u5929\u8bb0\u5f55 [\u4fdd\u7559] black_trees | \u6446\u4e86 7/19/2022 9:59:43 PM vuqa\uff0c\u840c\u65b0\u6253 CF \u7684\u65f6\u5019\u7ecf\u5e38\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff0c\u8fd9\u79cd\u60c5\u51b5\u8be5\u600e\u4e48\u907f\u514d\u554a\uff1a \u80fd\u60f3\u5230\u5bf9\u7684\u505a\u6cd5\uff0c\u4f46\u662f\u7ecf\u5e38\u81ea\u5df1\u7ed9\u4e00\u4e2a\u5b9e\u9645\u4e0a\u6ca1\u6cd5hack\u7684\u53cd\u4f8b\uff0c \u4f46\u662f\u53c8\u89c9\u5f97\u8fd9\u4e2a\u53cd\u4f8b\u662f\u5bf9\u7684\uff0c\u7136\u540e\u5426\u5b9a\u6389\u53ef\u4ee5\u8fc7\u6389\u7684\u505a\u6cd5\uff0c \u4fdd\u7559 \u039a\u03bf\u03c5\u03ac\u03ba\u03b5\u03c1_\u03a1\u03c5\u03b6\u03b9\u03bf\u64a4\u56de\u4e86\u4e00\u6761\u6d88\u606f \u83f2\u5965\u5fb7\u00b7\u897f\u65af\u6258\u59c6\u00b7\u6cf0\u65af\u7279 7/19/2022 10:01:09 PM @[\u4fdd\u7559] black_trees | \u6446\u4e86 \u771f\u7684\u53bb\u53c9\u4e00\u4e0b\u53c8\u4e0d\u4f1a\u6b7b\u3002 \u88ab\u5220\u9664\u8d1f\u4e09\u6b21\u7684 skip2004 7/19/2022 10:01:12 PM \u6ca1\u5565\u95ee\u9898\uff0c\u4e60\u60ef\u4e86\u5c31\u597d \u4fdd\u7559 \u039a\u03bf\u03c5\u03ac\u03ba\u03b5\u03c1_\u03a1\u03c5\u03b6\u03b9\u03bf 7/19/2022 10:01:17 PM @[\u4fdd\u7559] black_trees | \u6446\u4e86 \u5927\u80c6\u731c\u60f3\uff0c\u4ea4\u4e86\u518d\u8bc1 \u83f2\u5965\u5fb7\u00b7\u897f\u65af\u6258\u59c6\u00b7\u6cf0\u65af\u7279 7/19/2022 10:01:38 PM \u591a\u60f3\u53cd\u4f8b\u603b\u662f\u597d\u4e8b\uff09\u6211\u6709\u7684\u65f6\u5019\u90fd\u60f3\u4e0d\u5230 [\u4fdd\u7559] black_trees | \u6446\u4e86 7/19/2022 10:01:54 PM \u4f46\u6211\u7ecf\u5e38\u88ab\u9519\u8bef\u7684\u53cd\u4f8b\u8bf1\u5bfc [\u4fdd\u7559] black_trees | \u6446\u4e86 7/19/2022 10:02:12 PM \u7ecf\u5e38\u628a\u4e00\u773c\u9898\u641e\u6210\u4e0d\u53ef\u505a\u9898 [\u4fdd\u7559] black_trees | \u6446\u4e86 7/19/2022 10:02:41 PM \u800c\u4e14\u81ea\u5df1\u610f\u8bc6\u4e0d\u5230\uff0c\u6216\u8005\u8bf4\u8bc1\u660e\u4e0d\u4e86\u8fd9\u4e2a\u53cd\u4f8b\u662f\u5047\u7684 \u7ba1\u7406\u5458\u9759\u9759\u5df2\u88ab\u4f60\u79fb\u51fa\u7fa4\u804a\u64a4\u56de\u4e86\u4e00\u6761\u6d88\u606f\uff0c\u4f60\u731c\u731c\u64a4\u56de\u4e86\u4ec0\u4e48\u3002 \u7ba1\u7406\u5458\u9759\u9759\u5df2\u88ab\u4f60\u79fb\u51fa\u7fa4\u804a 7/19/2022 10:03:41 PM \u90a3\u8fd9\u548b\u80fd\u7b97\u53cd\u4f8b\u554a [\u4fdd\u7559] black_trees | \u6446\u4e86 7/19/2022 10:03:56 PM \u5c31\u662f\u6211\u4ee5\u4e3a\u662f\u53cd\u4f8b\u7684\u73a9\u610f\u513f\uff08\uff08 [\u4fdd\u7559] black_trees | \u6446\u4e86 7/19/2022 10:04:05 PM \u4f46\u5b9e\u9645\u4e0a\u4e0d\u662f \u88ab\u5220\u9664\u8d1f\u4e09\u6b21\u7684 skip2004 7/19/2022 10:04:08 PM \u90a3\u5c31\u4ee5\u540e\u591a\u6ce8\u610f\u4e00\u4e0b\u53cd\u4f8b\u6709\u6ca1\u6709\u95ee\u9898 \u7ba1\u7406\u5458\u9759\u9759\u5df2\u88ab\u4f60\u79fb\u51fa\u7fa4\u804a 7/19/2022 10:04:18 PM \u90a3\u4f60\u90fd\u62ff\u4e0d\u51fa\u6765\u5177\u4f53\u7684\u4f8b\u5b50 \u53c8\u548b\u80fd\u53eb\u53cd\u4f8b \u88ab\u5220\u9664\u8d1f\u4e09\u6b21\u7684 skip2004 7/19/2022 10:04:47 PM \u8fd9\u4e9b\u90fd\u5f88\u6b63\u5e38\uff0c\u4f60\u60f3\u53cd\u4f8b\u662f\u597d\u7684\u4e8b\u60c5\uff0c\u89e3\u51b3\u65b9\u6848\u5c31\u662f\u907f\u514d\u60f3\u5230\u5047\u7684\u53cd\u4f8b \u88ab\u5220\u9664\u8d1f\u4e09\u6b21\u7684 skip2004 7/19/2022 10:04:52 PM \u591a\u60f3\u60f3\u5c31\u597d\u4e86 \u7ba1\u7406\u5458\u9759\u9759\u5df2\u88ab\u4f60\u79fb\u51fa\u7fa4\u804a 7/19/2022 10:04:59 PM \u6211\u4e00\u822c\u60f3\u5426\u5b9a\u6211\u7684\u67d0\u4e2a\u60f3\u6cd5\u90fd\u662f\u9020\u4e2a\u80fd\u8ba9\u6211\u505a\u6cd5\u5047\u6389\u7684\u6570\u636e [\u4fdd\u7559] black_trees | \u6446\u4e86 7/19/2022 10:04:59 PM thx \u7136\u540e\u518d\u7ed3\u5408\u4e00\u4e0b\u81ea\u5df1\u7684\u60c5\u51b5\uff0c\u5176\u5b9e\u5c31\u662f\u5f88\u591a\u65f6\u5019\u6015\u9ebb\u70e6\uff0c\u61d2\uff0c\u6ca1\u6709\u53bb\u6df1\u7a76\u6bcf\u4e2a\u70b9\u80cc\u540e\u7684\u4e1c\u897f\uff0c\u6ca1\u6709\u53bb\u8003\u8651\u8fd9\u73a9\u610f\u513f\u5230\u5e95\u60f3\u544a\u8bc9\u6211\u5565\u3002 \u8bf4\u767d\u4e86\u5c31\u662f\u60f3\u7684\u4e0d\u591f\uff0c\u5199\u7684\u4e0d\u591f\uff0c\u63a8\u7684\u4e0d\u591f\u3002 \u591a\u53bb\u601d\u8003\u4e00\u4e0b special case \u548c corner case \u7684\u6b63\u786e\u6027\uff0c\u7279\u522b\u8981\u7ed3\u5408\u5168\u5c40\u53bb\u601d\u8003\uff0c\u8003\u8651\u5b8c\u6574\uff0c\u522b\u6293\u5230\u4e00\u4e2a\u5c40\u90e8\u5c31\u8dd1\u4e86\uff08\u9664\u975e\u80fd\u8bc1\u660e\u5c40\u90e8\u6700\u4f18\u5c31\u662f\u5168\u5c40\u6700\u4f18\uff09\u3002 \u5982\u679c spc \u80fd\u5f52\u5316\u5230\u5df2\u6709\u7684\u901a\u89e3\u4e0a\u90a3\u662f\u66f4\u597d\u7684\u4e86\u3002 CF1714F Build a Tree and That Is It \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60 \\(n\\) \u4e2a\u8282\u70b9\uff0c\u8981\u6c42\u4f60\u6784\u9020\u4e00\u9897\u65e0\u6839\u65e0\u6743\u6811\uff0c\u6ee1\u8db3\uff1a \u7ed9\u5b9a \\(d_{12},d_{23},d_{31}\\) \uff0c\u5206\u522b\u8868\u793a \\(1,2;2,3;3,1\\) \u4e4b\u95f4\u7684\u8ddd\u79bb\u3002 \u5982\u679c\u5b58\u5728\u8fd9\u6837\u7684\u6811\uff0c\u6784\u9020\u89e3\uff0c\u5426\u5219\u8f93\u51fa NO \u3002 \u8fd9\u9053\u9898\u6ca1\u6253\u4e66\u9762\u8349\u7a3f\uff0c\u81ea\u5df1\u5728 notepad \u4e0a\u6253\u5b57\u6a21\u62df\u601d\u8def\uff0c\u7136\u540e\u753b\u4e86\u4e2a\u56fe\u5c31\u4f1a\u4e86\u3002 \u4e0d\u8fc7\u8c03\u8bd5\u5f88\u6076\u5fc3\uff08\uff0c\u6210\u529f\u5730\u4e00\u4e0b\u5f00\u5230\u4e86\u5f53\u573a div3 \u7684\u6700\u96be\u9898 233\u3002 \u6211\u4eec\u4e0d\u59a8\u5047\u8bbe \\(d_{12},d_{23},d_{31}\\) \u5347\u5e8f\u6392\u5e8f\u8fc7\u540e\u4e3a \\(a,b,c\\) \uff0c \\(c_s,c_t\\) \u8868\u793a \\(c\\) \u5bf9\u5e94\u7684\u90a3\u4e24\u4e2a\u70b9\uff0c \\(a,b\\) \u540c\u7406\u3002 \u7136\u540e\u6700\u7b80\u5355\u7684\u60c5\u51b5\u5c31\u662f \\(a + b = c\\) \uff0c\u6211\u4eec\u76f4\u63a5\u62c9\u4e00\u6761 \\(c\\) \u5bf9\u5e94\u7684\u94fe \\((c_s \\to c_t)\\) \u5c31\u53ef\u4ee5\u4e86\u3002 \u7136\u540e\u8003\u8651\u4e0d\u7279\u6b8a\u7684\u60c5\u51b5\uff0c\u5982\u679c \\(a + b \\not= c\\) \uff0c\u548b\u641e\uff1f \u4ece\u6700\u7b80\u5355\u7684\u60c5\u51b5\u6269\u5c55\uff0c\u6211\u4eec\u5728 \\(c\\) \u5bf9\u5e94\u7684\u94fe\u4e0a\u518d\u627e\u4e00\u4e2a\u70b9\uff0c\u6bd4\u5982\u8fd9\u4e2a\u70b9\u662f \\(P\\) \uff0c\u76f4\u63a5\u62c9\u4e00\u6761\u94fe\u51fa\u53bb \u90a3\u4e48\u6211\u4eec\u5c31\u53ea\u9700\u8981\u6784\u9020\u51fa \\(a_s \\to P \\to a_t\\) \u548c \\(b_s \\to P \\to b_t\\) \u8fd9\u4e24\u6761\u94fe\u5c31\u53ef\u4ee5\u4e86\uff08\u5047\u8bbe \\(a_t = b_t\\) \uff09\u3002 \u968f\u4fbf\u624b\u5b8c\u4e00\u4e2a\u6570\u636e\u770b\u770b\u5177\u4f53\u548b\u6784\u9020 \u6bd4\u5982 \\(a = d12 = 4, b = d23 = 5, c = d31 = 6\\) \u7b2c\u4e00\u6761\u94fe\u62c9\u51fa\u6765\u662f\u8fd9\u6837\u7684\uff0c\u4e2d\u95f4\u7684 O \u5c31\u662f\u9664\u4e86 \\(1,2,3\\) \u4ee5\u5916\u968f\u4fbf\u54ea\u4e00\u4e2a\u70b9\uff1a 1 - O - O - O - O - O - 3 ???? \u53d1\u73b0\u5c45\u7136\u62c9\u4e0d\u4e86\u554a\uff01\uff1f\u7528\u4ee3\u6570\u65b9\u5f0f\u4e25\u8c28\u5206\u6790\u4e0b\u5148\uff1a \u8bbe \\(a_s \\to P\\) \u957f\u5ea6\u662f \\(x\\) , \\(b_s \\to P\\) \u5c31\u662f \\(6 - x\\) . \u7136\u540e\u6211\u4eec\u62c9\u51fa\u53bb\u7684\u957f\u5ea6\u4e3a \\(y\\) \uff0c\u662f \\(a,b\\) \u5171\u540c\u4eab\u6709\u7684\uff0c \u6240\u4ee5 \\(4 = x + y, 5 = 6 - x + y\\) \u4e24\u4e2a\u5f0f\u5b50\u76f8\u52a0 \uff1a \\(2y = 3\\) \uff0c\u663e\u7136\u62c9\u4e0d\u4e86\uff0c\u8fd9\u5c31\u662f\u65e0\u89e3\u7684\u60c5\u51b5\u3002 \u4e25\u8c28\u7684\u65b9\u7a0b\u5c31\u662f \\(a + b - c = 2y\\) \uff0c\u6240\u4ee5\u6211\u4eec\u89e3\u4e2a\u65b9\u7a0b\u770b\u770b\u89e3\u662f\u4e0d\u662f\u975e\u8d1f\u6574\u6570\u5c31\u80fd\u5224\u65ad\u662f\u5426\u6709\u89e3\u4e86\u3002 \u968f\u4fbf\u624b\u5b8c\u51e0\u4e2a\u6570\u636e\uff0c\u662f\u5bf9\u7684\uff0c\u518d\u770b\u770b\u7279\u6b8a\u60c5\u51b5\u6709\u6ca1\u6709\u5fd8\u8bb0\u7684 \u6bd4\u5982 n \u7279\u522b\u5927\u7684\u65f6\u5019\uff1f\uff1f\uff1f\u597d\u50cf\u6ca1\u7528\u554a\uff0c\u90fd\u4e00\u6837\u7684\u3002 \u80fd\u600e\u4e48\u7279\u6b8a\u5462\uff1f \u54e6\u5c31\u6bd4\u5982\u4e0a\u9762\u90a3\u4e2a\u6784\u9020\u4e0d\u4e86\u7684\u3002 \\(c = 6, a = 4, b = 5\\) \u80fd\u4e0d\u80fd\u76f4\u63a5\u4ece \\(1\\) \u62c9\u4e24\u6761\u94fe\uff1f\u672c\u8d28\u4e00\u6837\u3002 \u5982\u679c\u5728\u4e0b\u9762\u8fde \\(2,3\\) \u5c31\u6210\u73af\u4e86\uff0c\u6ca1\u6cd5\u505a\uff0c\u6240\u4ee5\u8fd9\u4e2a\u6784\u9020\u5fc5\u7136\u5f88\u5bf9\u3002 \u6700\u540e\u53d1\u73b0\u6700\u7b80\u5355\u7684\u60c5\u51b5\u4e5f\u662f\u53ef\u4ee5\u5f52\u5316\u7684\uff0c\u4e8e\u662f\u778e\u6784\u9020\u5c31\u884c\u4e86\uff0c\u8fd9\u4e2a\u5b9e\u73b0\u7565\u6709\u9ebb\u70e6\uff08\uff08\uff08 \u63d0\u51e0\u4e2a\u7ec6\u8282\uff1a\u4e0d\u8981\u5fd8\u8bb0\u628a\u7528\u5269\u4e0b\u7684\u70b9\u62c9\u4e0a\uff0c\u968f\u4fbf\u6302\u54ea\u91cc\u90fd\u884c\u3002 \\(a + b < c\\) \u7684\u60c5\u51b5\u4e5f\u662f\u4e0d\u884c\u7684\uff0c\u8282\u70b9\u4e0d\u591f\u7528\u4e5f\u8981\u8003\u8651\u3002 \u975e\u5e38\u5de8\u5927\u6076\u5fc3\uff0c\u5b9e\u73b0\u662f\u7528\u7684 bmy \u7684\u601d\u8def\uff0c\u8fd9\u4e2a\u6e05\u6670\u4e00\u70b9\uff0c\u6211\u5199\u7684\u662f\u5927\u5206\u8ba8\uff0c\u7279\u522b\u81ed\uff08 \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 void Solve () { cin >> a >> b >> c ; if ( b > a + c || c > b + a || a > c + b ) { cout << \"NO\" << endl ; return ; } if ( b % 2 != ( a + c ) % 2 || ( a + c + b ) / 2 > n - 1 ) { cout << \"NO\" << endl ; return ; } for ( int i = 1 ; i <= n ; ++ i ) pa [ i ] = i ; cout << \"YES\" << endl ; int cur = 1 ; for ( int i = 4 ; i < 4 + ( a - b + c ) / 2 ; ++ i ) { if ( a * 2 == a - b + c && i - 3 == ( a - b + c ) / 2 ) { if ( merge ( 2 , cur )) cout << 2 << \" \" << cur << endl ; break ; } if ( c * 2 == a - b + c && i - 3 == ( a - b + c ) / 2 ) { if ( merge ( 3 , cur )) cout << 3 << \" \" << cur << endl ;; break ; } if ( merge ( i , cur )) cout << i << \" \" << cur << endl ; cur = i ; } int pos = cur , tp ; if ( a * 2 == a - b + c ) pos = 2 ; if ( c * 2 == a - b + c ) pos = 3 ; tp = pos , cur = max ( cur , 3 ); for ( int i = cur + 1 ; i < cur + a - ( a - b + c ) / 2 ; ++ i ) { if ( merge ( tp , i )) cout << tp << \" \" << i << endl ; tp = i ; } if ( pos != 2 ) if ( merge ( tp , 2 )) cout << tp << \" \" << 2 << endl ; tp = pos ; for ( int i = 4 ; i <= n ; ++ i ) { if ( root ( 1 ) != root ( i )) { cur = i ; break ; } } for ( int i = cur ; i < cur + c - ( a - b + c ) / 2 - 1 ; ++ i ) { if ( merge ( tp , i )) cout << tp << \" \" << i << endl ; tp = i ; } if ( pos != 3 && merge ( tp , 3 )) cout << tp << \" \" << 3 << endl ; for ( int i = 1 ; i <= n ; ++ i ) if ( merge ( 1 , i )) cout << 1 << \" \" << i << endl ; } \u611f\u89c9\u8fd9\u9898\u5c31\u5f88\u597d\u8df5\u884c\u4e86\u4e0a\u9762\u7684\u90a3\u4e2a\u8bf4\u6cd5\u554a\u2026\u2026 \u54e6\u5176\u5b9e\u8fd9\u662f 8 \u6708\u4efd\u7684\u6bd4\u8d5b\uff08\uff08 CF1716D Chip Move \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u65e0\u9650\u7684\u6570\u8f74\uff0c\u4f60\u5f00\u59cb\u5728 \\(0\\) \u3002 \u73b0\u5728\u8981\u6c42\u4f60\u8df3\u5230 \\(n\\) \uff0c\u5176\u4e2d\u7b2c \\(i\\) \u6b65\u8df3\u7684\u957f\u5ea6\u5fc5\u987b\u662f \\(K + i - 1\\) \u7684\u6574\u6570\u500d\uff0c \\(K\\) \u4e3a\u4e00\u4e2a\u7ed9\u5b9a\u5e38\u6570\u3002 \\(i\\to j\\) \u7684\u957f\u5ea6\u5b9a\u4e49\u4e3a \\(j - i\\) \u3002 \u6bd4\u5982 \\(k = 2\\) \uff0c\u4f60\u7b2c\u4e00\u6b65\u5c31\u53ea\u80fd\u8df3 \\(2, 4, 6, 8, \\dots\\) \u6b65\uff0c\u7b2c\u4e8c\u6b65\u53ea\u80fd\u8df3 \\(3, 6, 9, 12, \\dots\\) \u6b65\u3002 \u6c42\u603b\u5171\u7684\u65b9\u6848\u6570\u6a21 \\(998244353\\) \uff0c \\(n,k \\le 2e5\\) \u3002 \u975e\u5e38\u50bb\u903c\u7684 DP \u554a\uff01\u5c45\u7136\u653e\u5728 D\uff01 \u8003\u8651\u6734\u7d20\u7684 dp\uff0c\u8bbe \\(dp(i,j)\\) \u8868\u793a\u8d70\u5230 \\(i\\) \uff0c\u4e00\u5171\u7528\u4e86 \\(j\\) \u6b65\u7684\u65b9\u6848\u6570\u3002 \u7136\u540e\u8f6c\u79fb\u80af\u5b9a\u662f\u4ece \\(j-1\\) \u6b65\u8f6c\u79fb\uff0c\u679a\u4e3e\u4e0a\u4e00\u6b65\u5728\u54ea\u91cc\u5373\u53ef\u3002 \u6211\u4e00\u5f00\u59cb\u4ee5\u4e3a\u8fd9\u4e2a\u505a\u6cd5\u662f \\(O(n^2)\\) \u7684\uff0c\u8fd8\u8003\u8651\u8fc7\u600e\u4e48\u53bb\u4f18\u5316\u6210 \\(O(n \\log n)\\) \uff0c\u56e0\u4e3a\u4e4b\u524d\u7684 2D \u5f88\u591a\u90fd\u662f \\(O(n^2) \\to O(n \\log)\\) \u7684\u4f18\u5316\u3002 \u6709\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u56e0\u4e3a\u6211\u4eec\u6bcf\u6b21\u8df3\u7684\u90fd\u662f\u67d0\u4e2a\u6570\u7684\u500d\u6570\uff0c\u6240\u4ee5\u8fd9\u4e2a\u6570\u91cf\u7ea7\u80af\u5b9a\u4e0d\u662f \\(O(n)\\) \uff0c\u8003\u8651\u4e00\u4e0b\u5b83\u5e94\u8be5\u662f\u591a\u5c11\u3002 \u6700\u574f\u7684\u60c5\u51b5\uff0c\u5c31\u662f \\(K = 1\\) \uff0c\u7136\u540e\u7b2c \\(i\\) \u6b65\u6c38\u8fdc\u53ea\u8df3 \\(K + i - 1 = i\\) \u8fd9\u4e48\u957f\u3002 \u90a3\u4e48 \\(\\sum\\limit_{x = 1}^{k} x \\le n\\) \uff0c\u6240\u4ee5 \\(k \\le \\sqrt{n}\\) \uff0c\u4e5f\u5c31\u662f\u8bf4\u679a\u4e3e\u7684\u4f4d\u7f6e\u53ea\u6709 \\(O(\\sqrt{n})\\) \u4e2a\u3002 \u6240\u4ee5\u8fd9\u4e2a DP \u5c31\u968f\u4fbf\u8fc7\uff1a \u6734\u7d20\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int mod = 998244353 ; const int si = 2e5 + 1 ; const int sqrt_si = 450 ; int n , K ; int dp [ si ][ sqrt_si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); auto limit = [ & ]( int j ) -> int { i64 res = (( K + j ) * ( K + j - 1 ) - K * ( K - 1 )) / 2l l ; if ( res > 1l l * 2e5 + 10 ) return 0x3f3f3f3f ; return ( int ) res ; }; cin >> n >> K ; dp [ 0 ][ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; limit ( j ) <= i ; ++ j ) { for ( int k = 1 ; k * ( K + j - 1 ) <= i ; ++ k ) { dp [ i ][ j ] = ( dp [ i ][ j ] + dp [ i - k * ( K + j - 1 )][ j - 1 ]) % mod ; } } } for ( int i = 1 ; i <= n ; ++ i ) { int sum = 0 ; for ( int j = 1 ; limit ( j ) <= i ; ++ j ) { sum = ( sum + dp [ i ][ j ] % mod ) % mod ; } cout << sum << ' ' ; } cout << endl ; return 0 ; } \u4f46\u662f\u8fd9\u4e2a\u4e1c\u897f\u4f1a MLE\uff0c\u60f3\u8d77\u6765\u8f6c\u79fb\u80af\u5b9a\u662f\u4ece \\(j-1\\) \u6b65\u8f6c\u79fb\uff0c\u6240\u4ee5\u76f4\u63a5\u6eda\u52a8\u6570\u7ec4\uff1a \u6eda\u52a8\u6570\u7ec4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int mod = 998244353 ; const int si = 2e5 + 1 ; const int sqrt_si = 450 ; int n , K ; int dp [ si ][ 2 ], ans [ si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); auto limit = [ & ]( int j ) -> int { i64 res = j * j ; if ( res > 2l l * 2e5 + 10 ) return 0x3f3f3f3f ; return ( int ) res ; }; cin >> n >> K ; dp [ K ][ 0 ] = 1 ; int j = 1 ; for ( int k = 0 ; limit ( k ) <= ( n << 1 ); ++ k ) { j = j xor 1 ; for ( int i = 0 ; i <= n ; ++ i ) dp [ i ][ j xor 1 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) if ( i - k > K ) dp [ i ][ j ] = ( dp [ i ][ j ] + dp [ i - k - K ][ j ]) % mod , dp [ i ][ j xor 1 ] = ( dp [ i ][ j xor 1 ] + dp [ i - k - K - 1 ][ j ]) % mod ; int sum = 0 ; for ( int i = 1 ; i <= n ; ++ i ) ans [ i ] = ( ans [ i ] + dp [ i ][ j ] % mod ) % mod ; } for ( int i = 1 ; i <= n ; ++ i ) cout << ans [ i ] << \" \" ; cout << endl ; return 0 ; } CF1713D Tournament Countdown \u03c8(\uff40\u2207\u00b4)\u03c8 \u4ea4\u4e92\u9898 \u7ed9\u4f60\u4e00\u4e2a \\(2^n\\) \u4eba\u7684\u6dd8\u6c70\u8d5b\uff0c\u521d\u59cb \\(i, i + 1\\) \u4e00\u7ec4\uff08 \\(i \\equiv 0 (\\mod 1)\\) \uff09\u3002 \u4f60\u53ef\u4ee5\u95ee\u4ea4\u4e92\u5e93\u4e0d\u8d85\u8fc7 \\(\\lceil \\dfrac{2^{n + 1}}{3}\\rceil\\) \u4e2a\u8be2\u95ee\u3002 \u6bcf\u4e2a\u8be2\u95ee\u53ef\u4ee5\u8be2\u95ee\u4efb\u610f\u4e24\u4e2a\u4eba \\((u, v)\\) \u7684\u603b\u80dc\u5229\u6570\u5927\u5c0f\uff0c\u5982\u679c\u76f8\u7b49\u8fd4\u56de \\(0\\) \uff0c \\(u\\) \u5927\u8fd4\u56de \\(1\\) \uff0c \\(v\\) \u5927\u8fd4\u56de \\(2\\) \u3002 \u6c42\u6700\u540e\u80dc\u51fa\u7684\u90a3\u4e00\u4e2a\u4eba\u3002 \u5443\uff0c\u53d1\u73b0\u8fd9\u4e2a \\(\\dfrac{1}{3}\\) \u5f88\u6709\u610f\u601d\u554a\uff01 \u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53ef\u80fd\u8981\u901a\u8fc7\u4e00\u6b21\u67e5\u8be2\u95ee\u6e05\u695a\u66f4\u591a\u7684\u5173\u7cfb\u3002 \u6240\u4ee5\u53ea\u95ee\u4e00\u5bf9\u5185\u7684\u8bdd\u597d\u50cf\u4e0d\u592a\u591f\u3002 \u4e8e\u662f\u6211\u4eec\u8df3\u7740\u95ee\u3002 \\(1\\) \u95ee \\(3\\) \u3002 \u5982\u679c \\(1>3\\) \uff0c\u8bf4\u660e \\(1\\) \u5fc5\u7136\u6253\u7206\u4e86 \\(2\\) \uff0c\u4e0d\u7136 \\(1\\) \u5fc5\u7136\u662f \\(0\\) \uff0c\u7136\u540e\u4f60\u4e0d\u6e05\u695a \\(3,4\\) \u7684\u5173\u7cfb\uff0c\u56e0\u4e3a\u6709 \\(3\\) \u88ab\u6253\u7206\uff0c \\(4\\) \u628a \\(1\\) \u6253\u7206\uff0c\u6216\u8005 \\(1\\) \u628a\u6253\u7206 \\(3\\) \u7684 \\(4\\) \u4e5f\u6253\u7206\u3002\uff0c\u90a3\u4e48 \\(1\\) \u518d\u95ee\u4e00\u6b21 \\(4\\) \u3002 \u5982\u679c \\(1=3\\) \uff0c\u8bf4\u660e\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u7b2c\u4e00\u79cd\u662f \\(1,3\\) \u90fd\u4e71\u6740\u4e86\uff0c\u7b2c\u4e8c\u79cd\u662f\u90fd\u8f93\u9ebb\u4e86\uff0c\u8bf4\u660e\u8fd8\u9700\u8981 \\(2\\) \u518d\u95ee\u4e00\u6b21 \\(4\\) \u3002 \u5982\u679c \\(1<3\\) \uff0c\u90a3\u4e48 \\(2\\) \u518d\u95ee\u4e00\u6b21 \\(3\\) \uff0c\u8fd9\u4e2a\u540c\u7406\u7b2c\u4e00\u79cd\u60c5\u51b5\u3002 \u6700\u540e\u5c31\u80fd \\(4\\) \u8fdb \\(1\\) \u3002 \u7136\u540e\u5f52\u5e76\u4e00\u4e0b\uff0c\u5728\u5269\u4e0b\u7684\u91cc\u9762\u518d\u7ee7\u7eed\u505a\u3002 \u7136\u540e\u6ca1\u4e86\uff0c\u6b21\u6570\u663e\u7136\u5f88\u4f18\u79c0\u3002 TJX \u7684 code\uff0c\u61d2\u5f97\u5199\u4e86\uff1a \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 #include <bitsdc++.h> using namespace std ; int n ; int ask ( int a , int b ) { int t ; cout << \"? \" << a << ' ' << b << endl ; cin >> t ; return t ; } void solve () { vector < int > a ; cin >> n ; for ( int i = 1 ; i <= ( 1 << n ); ++ i ) a . push_back ( i ); for ( int i = 1 ; i <= n ; ++ i ) { vector < int > b ; if ( a . size () == 1 ) { cout << \"! \" << a [ 0 ] << endl ; return ; } if ( a . size () == 2 ) { int t = ask ( a [ 0 ], a [ 1 ]); if ( t == 1 ) { cout << \"! \" << a [ 0 ] << endl ; return ; } else { cout << \"! \" << a [ 1 ] << endl ; return ; } } for ( int i = 0 ; i < a . size (); ++ i ) if ( i % 4 == 0 ) { int t = ask ( a [ i ], a [ i + 2 ]); if ( t == 1 ) { int u = ask ( a [ i ], a [ i + 3 ]); if ( u == 1 ) b . push_back ( a [ i ]); else b . push_back ( a [ i + 3 ]); } else if ( t == 0 ) { int u = ask ( a [ i + 1 ], a [ i + 3 ]); if ( u == 1 ) b . push_back ( a [ i + 1 ]); else b . push_back ( a [ i + 3 ]); } else { int u = ask ( a [ i + 1 ], a [ i + 2 ]); if ( u == 1 ) b . push_back ( a [ i + 1 ]); else b . push_back ( a [ i + 2 ]); } } a = b ; } } int main () { int T ; cin >> T ; while ( T -- ) solve (); } ARC145A AB Palindrome \u03c8(\uff40\u2207\u00b4)\u03c8 \u597d\u4e45\u6ca1\u6253\u8fc7 AT \u4e86\uff0c\u4eca\u5929 VP \u4e00\u628a\u723d\u723d\uff088.11\uff09 \u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(N\\) \u7684\u5b57\u7b26\u4e32 \\(S\\) \u3002 \\(\\Sigma = \\{\\texttt{A},\\texttt{B}\\}\\) \u3002 \u5982\u679c\u4f60\u6bcf\u6b21\u53ef\u4ee5\u628a\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(2\\) \u7684\u5b57\u4e32\u53d8\u6210 \\(\\texttt{AB}\\) \u3002 \u5224\u5b9a\u7ecf\u8fc7\u4e00\u4e9b\u64cd\u4f5c\u540e \\(S\\) \u662f\u5426\u53ef\u80fd\u56de\u6587\u3002 \\(N \\in [2, 2e5]\\) \u3002 \u8bc8\u9a97\u9898 * 1 \u53d1\u73b0 \\(s(0) = \\texttt{A}\\) \u4e14 \\(s(N - 1) = \\texttt{B}\\) \u65f6\u5fc5\u7136\u4e0d\u884c\u3002 \u7136\u540e\u5176\u5b83\u60c5\u51b5\u6b63\u7740\u505a\u62c9\u901a\u4e00\u904d\u6216\u8005\u53cd\u8fc7\u6765\u5c31\u5fc5\u7136\u53ef\u4ee5\u3002 \u7136\u540e\u957f\u5ea6\u4e3a \\(2\\) \u7279\u5224\u4e00\u4e0b\u5c31\u6ca1\u4e86\uff0c \u8fd8\u662f\u6709\u70b9\u610f\u601d\u3002 \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int n ; cin >> n ; string s ; cin >> s ; if ( n == 2 ) { if ( s [ 0 ] == s [ 1 ]) cout << \"Yes\" << endl ; else cout << \"No\" << endl ; } else { if ( s [ 0 ] == s [ n - 1 ]) cout << \"Yes\" << endl ; else if ( s [ 0 ] == 'A' && s [ n - 1 ] == 'B' ) cout << \"No\" << endl ; else cout << \"Yes\" << endl ; } return 0 ; } ARC145C Split and Maximize \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e00\u4e2a \\(1 \\to 2n\\) \u7684\u6392\u5217 \\(p\\) \uff0c\u628a \\(p\\) \u62c6\u6210\u4e24\u4e2a\u957f\u5ea6\u76f8\u7b49\u7684\u5b50\u5e8f\u5217 \\(A, B\\) \u3002 \\(p\\) \u7684\u5206\u6570\u5b9a\u4e49\u4e3a\u6240\u6709\u53ef\u80fd\u7684 \\(\\sum\\limits_{i = 1}^n a_i b_i\\) \u7684\u6700\u5927\u503c\u3002 \u6c42\u6709\u591a\u5c11\u4e2a \\(p\\) \u7684\u5206\u6570\u662f\u6700\u5927\u7684, \\(1\\le n \\le 2e5\\) \u3002 \u6392\u5e8f\u4e0d\u7b49\u5f0f \uff0c\u53ef\u4ee5\u5f97\u5230\u6700\u5927\u5f97\u5206\u4e3a \\(Mx = \\sum_{i = 1}^n 2i(2i - 1)\\) \u3002 \u8003\u8651\u600e\u4e48\u6837\u624d\u80fd\u51d1\u51fa \\(Mx\\) \uff0c\u5c31\u662f\u8ba9\u6240\u6709 \\(2i - 1\\) \u548c \\(2i\\) \u6309\u987a\u5e8f \u914d\u6210\u4e00\u5bf9\u5c31\u884c\u4e86\u3002 \u770b\u4e00\u4e2a\u4e0d\u80fd\u7684\u4f8b\u5b50\uff1a \\(126345\\) \uff0c\u8fd9\u91cc \\(6\\) \u5e94\u8be5\u548c \\(5\\) \u914d\u5bf9\u624d\u884c\uff0c\u4f46\u662f\u4e2d\u95f4\u63d2\u4e86\u4e00\u4e2a \\(3, 4\\) \u8fdb\u53bb\uff0c\u5982\u679c \\([126],[345]\\) \uff0c\u867d\u7136 \\(6,5\\) \u914d\u5bf9\u4e86\uff0c\u4f46\u662f\u524d\u9762\u7684\u5c31\u4e0d\u80fd\u914d\u5bf9\u4e86\u3002 \\(123546\\) \uff0c\u8fd9\u79cd\u4e5f\u65e0\u8bba\u5982\u4f55\u90fd\u4e0d\u884c\uff0c\u56e0\u4e3a \\(3, 4\\) \u548c \\(5, 6\\) \u4ea4\u53c9\u4e86\uff08\u6709\u5305\u542b\u5173\u7cfb\uff09\u3002 \u4e0d\u59a8\u628a \\(2i - 1\\) \u770b\u4f5c\u5de6\u62ec\u53f7\uff0c \\(2i\\) \u770b\u4f5c\u53f3\u62ec\u53f7\u3002 \u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e00\u4e2a \\(2i\\) \uff0c\u548c\u4ed6\u914d\u5bf9\u7684 \\(2i-1\\) \u90fd\u5fc5\u987b\u662f\u79bb\u4ed6\u6700\u8fd1\u7684\u4e00\u4e2a\u5de6\u62ec\u53f7\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5fc5\u987b\u8981\u662f ()()()()...() \u6216\u8005 )()()(...)( \uff0c\u6216\u8005 )(()... \u7684\u60c5\u51b5\u3002 \u65b9\u4fbf\u8ba8\u8bba\uff0c\u628a\u4ed6\u4eec\u5168\u90e8\u5f52\u5316\u5230 ()()()()...() \u7684\u60c5\u51b5\uff0c\u518d\u5728\u5185\u90e8\u6392\u5217\u4ea4\u6362\u3002 \u663e\u7136\u8fd9\u4e2a\u662f RBS \u8ba1\u6570\uff0c\u4e00\u5171 \\(Cat(n)\\) \u79cd\u53ef\u80fd\uff0c\u6bcf\u79cd\u53ef\u80fd\u5185\u90e8\u53ef\u4ee5\u4ea4\u6362 Pair \u7684\u987a\u5e8f\uff0c \\(Cat(n)\\times n!\\) \uff0c\u7136\u540e\u6bcf\u4e2a Pair \u5185\u90e8\u53c8\u53ef\u4ee5\u6362\u987a\u5e8f\uff0c\u6240\u4ee5\u6700\u7ec8\u7b54\u6848\u662f \\(Cat(n)\\times n! \\times 2^n\\) \u3002 \u5f88\u5999\u7684\u9898\u3002 \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 // author : black_trees // \u8d3a\u7684\u7c89\u5154\u7684\uff08 // \u56e0\u4e3a\u7ec4\u5408\u6570\u677f\u5b50\u627e\u4e0d\u5230\u4e86\uff08 #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int mod = 998244353 ; const int si = 2e5 + 10 ; inline int qpow ( int b , int e ) { int a = 1 ; for (; e ; e >>= 1 , b = ( int )( 1l l * b * b % mod )) if ( e & 1 ) a = ( int )( 1l l * a * b % mod ); return a ; } inline int inv ( int b ) { return qpow ( b , mod - 2 ); } int fact [ si * 2 ], invf [ si * 2 ]; inline void init ( int n ) { fact [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) fact [ i ] = ( int )( 1l l * fact [ i - 1 ] * i % mod ); invf [ n ] = inv ( fact [ n ]); for ( int i = n ; i >= 1 ; -- i ) invf [ i - 1 ] = ( int )( 1l l * invf [ i ] * i % mod ); } inline int C ( int n , int m ) { if ( m < 0 || m > n ) return 0 ; return ( int )( 1l l * fact [ n ] * invf [ m ] % mod * invf [ n - m ] % mod ); } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int n ; cin >> n , init ( 2 * n ); int ans = ( C ( 2 * n , n ) - C ( 2 * n , n - 1 ) + mod ) % mod ; ans = ( int )( 1l l * ans * fact [ n ] % mod * qpow ( 2 , n ) % mod ); cout << ans << endl ; return 0 ; } CF1721D Maximum AND \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u5e8f\u5217 \\(a,b\\) \uff0c\u53ef\u4ee5\u91cd\u6392 \\(b\\) \uff0c\u6c42 \\(\\operatorname{AND}\\limits_{i = 1}^n(a(i) \\oplus b\\prime(i))\\) \u3002 \\(n \\le 1e5, a_i, b_i \\in [0, 2^30)\\) \u770b\u5230\u8fd9\u4e2a AND \u6700\u5927\u4e0d\u96be\u60f3\u5230\u5c3d\u91cf\u8ba9\u9ad8\u4f4d\u662f \\(1\\) \uff0c\u8bf4\u767d\u4e86\u5c31\u662f\u4ece\u9ad8\u5230\u4f4e\u8d2a\u5fc3\uff0c\u5e76\u4e14\u5982\u679c\u8fd9\u4e2a\u9ad8\u4f4d\u53ea\u80fd\u662f \\(0\\) \uff0c\u5bf9\u4e8e\u7b54\u6848\u662f\u6ca1\u6709\u5f71\u54cd\u7684\u3002 \u6b63\u786e\u6027\u4e5f\u6bd4\u8f83\u597d\u8bc1\u660e\uff0c\u6211\u5047\u8bbe\u6211\u8fd9\u4e2a\u9ad8\u4f4d\u53ef\u4ee5\u662f \\(1\\) \uff0c\u4f46\u662f\u4f1a\u5bfc\u81f4\u67d0\u4e2a\u4f4e\u4f4d\u53d8\u6210 \\(0\\) \uff0c\u6211\u663e\u7136\u662f\u4e0d\u7ba1\u4f4e\u4f4d\u76f4\u63a5\u8ba9\u9ad8\u4f4d\u4e3a \\(1\\) \uff0c\u5982\u679c\u8fd9\u4e2a\u9ad8\u4f4d\u600e\u4e48\u90fd\u6ca1\u529e\u6cd5\u662f \\(1\\) \uff0c\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u4e0d\u7ba1\uff0c\u6446\u70c2\u3002 \u505a\u6cd5\u5927\u6982\u5c31\u662f\u5bf9\u4e8e\u6bcf\u4e00\u4f4d\uff0c\u8981\u5224 \\(a\\) \u7684 0 \u7684\u4e2a\u6570\u662f\u5426\u548c \\(b\\) \u7684 1 \u7684\u4e2a\u6570\u4e00\u6837\u4e14 \\(a\\) \u7684 1 \u7684\u4e2a\u6570\u662f\u5426\u548c \\(b\\) \u7684 0 \u7684\u4e2a\u6570\u4e00\u6837\u3002 \u7136\u540e\u6211\u4eec\u4ece\u9ad8\u4f4d\u5f00\u59cb\uff0c\u76f4\u63a5\u628a\u8fd9\u4e2a\u5206\u7c7b\uff0c \\(a0, b1\\) \u5206\u4e00\u8d77\uff0c \\(a1,b0\\) \u5206\u4e00\u8d77\u3002 \u7136\u540e\u5728\u4f4e\u4f4d\u5224\u65ad\u662f\u5426\u53ef\u884c\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u4f4e\u4f4d\u5206\u4e00\u6b21\u7ec4\uff0c\u7136\u540e\u770b\u548c\u9ad8\u4f4d\u7684\u8981\u6c42\u662f\u5426\u4e00\u6837\uff0c\u4e0d\u884c\u5c31\u6446\u70c2\u3002 \u548c ARC146B \u6bd4\u8f83\u7c7b\u4f3c\uff0c\u6240\u4ee5\u5c31\u4e0d\u5199 ARC146B \u4e86\u3002 \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 // author : black_trees #include <map> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 1e5 + 100 ; const int inf = ( 1 << 30 ); int a [ si ], b [ si ]; std :: map < int , int > True , False ; #define is_true(val, bit) (val >> (bit - 1) & 1) int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { int n ; cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; for ( int i = 1 ; i <= n ; ++ i ) cin >> b [ i ]; int ans = 0 ; for ( int i = 30 ; i >= 1 ; -- i ) { True . clear (), False . clear (); int need = inf - ( 1 << ( i - 1 )); for ( int j = 1 ; j <= n ; ++ j ) { if ( is_true ( b [ j ], i )) True [ b [ j ] & need ^ need ] ++ ; else False [ b [ j ] & need ^ need ] ++ ; } bool ff = true ; for ( int j = 1 ; j <= n ; ++ j ) { if ( is_true ( a [ j ], i )) { if (( False [ a [ j ] & need ] -- ) < 1 ) ff = false ; } else { if (( True [ a [ j ] & need ] -- ) < 1 ) ff = false ; } } if ( ff ) ans += ( 1 << ( i - 1 )); else { for ( int j = 1 ; j <= n ; ++ j ) { if ( is_true ( b [ j ], i )) b [ j ] -= ( 1 << ( i - 1 )); if ( ! is_true ( a [ j ], i )) a [ j ] += ( 1 << ( i - 1 )); } } } cout << ans << endl ; } return 0 ; } CF1720D1 Xor-Subsequence (easy version) \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60\u4e00\u4e2a\u957f\u4e3a \\(n\\) \u7684\u6574\u6570\u6570\u7ec4 \\(a\\) \uff0c\u4ece \\(0\\) \u5f00\u59cb\u7f16\u53f7\u3002 \u4e00\u4e2a\u957f\u4e3a \\(m\\) \uff0c\u4ece \\(0\\) \u5f00\u59cb\u7f16\u53f7\u7684\u6574\u6570\u6570\u7ec4 \\(b\\) \u662f\u6570\u7ec4 \\(a\\) \u7684 subsequence\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(0\\leq b_0<b_1<\\dots<b_{m-1}<n\\) \u3002 \u82e5 \\(b\\) \u662f \\(a\\) \u7684 beautiful subsequence\uff0c\u5f53\u4e14\u4ec5\u5f53\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a \\(b\\) \u662f \\(a\\) \u7684 subsequence\uff1b \\(\\forall p\\in[0,m)\\cap\\textbf{N},a_{b_p}\\oplus b_{p+1}<a_{b_{p+1}}\\oplus b_p\\) \u3002 \u5176\u4e2d \\(\\oplus\\) \u8868\u793a\u4f4d\u8fd0\u7b97\u4e2d\u7684\u5f02\u6216\u8fd0\u7b97\u3002 \u73b0\u5728\uff0c\u4f60\u9700\u8981\u6c42\u51fa\u6700\u957f\u7684 beautiful subsequence \u6709\u591a\u957f\u3002 \\(a_i \\le 200, n\\le 3e5\\) .. \u7ffb\u8bd1\u6765\u81ea \u6d1b\u8c37 \u8fd9\u9898\u91cc\u9762 b \u662f\u4e0b\u6807\uff0c\u795e\u5fc5\u51fa\u9898\u4eba\u5199\u90a3\u4e48\u590d\u6742\u5e72\u561b\u3002 \u5c31\u662f\u5148\u8003\u8651\u4e00\u4e2a\u7b80\u5355\u7684 DP\uff0c\u5b9a\u4e49 \\(dp(i)\\) \u8868\u793a \\([1,i]\\) \u7684\u6700\u957f\u597d\u5b50\u5e8f\u5217\u957f\u5ea6\u3002 \u53ef\u4ee5\u5f97\u5230 \\(O(n^2)\\) \u65b9\u7a0b\uff1a \\(dp(i) = \\max\\limits_{j = 0}^{i - 1} \\{dp(j) + 1\\} \\land a_{j}\\oplus i<a_i\\oplus j\\) \u3002 \u590d\u6742\u5ea6\u4e3b\u8981\u82b1\u5728\u679a\u4e3e \\(j\\) \u4e0a\u9762\uff0c\u8003\u8651\u7f29\u5c0f\u8f6c\u79fb\u72b6\u6001\u96c6\u5408\u3002 \u53d1\u73b0 \\(a_i \\le 200\\) \uff0c\u5728\u4e8c\u8fdb\u5236\u4e0b\u8003\u8651\uff0c \\(200 < 256\\) \uff0c\u6240\u4ee5 \\(a_i,a_j\\) \u53ea\u80fd\u5f71\u54cd\u6700\u4f4e\u7684 8 \u4f4d\u3002 \u5982\u679c \\(\\exists j \\le i - 256\\) \uff0c\u53ef\u4ee5\u53d1\u73b0 \\(j\\) \u600e\u4e48\u90fd\u8f6c\u79fb\u4e0d\u8fc7\u6765\uff0c\u56e0\u4e3a\u5f02\u6216\u662f\u4e0d\u8fdb\u4f4d\u52a0\u6cd5\uff0c\u5728\u8fd9\u91cc\u5f71\u54cd\u4e0d\u4e86\u7b2c \\(9\\) \u4f4d\u3002 \u5982\u679c \\(i - 256 \\ge j\\) \uff0c\u8bf4\u660e \\(j\\) \u76f4\u63a5\u5728\u7b2c\u4e5d\u4f4d\u6bd4 \\(i\\) \u5c11\u4e86\u4e00\u4e2a \\(1\\) \uff0c\u6b7b\u6d3b\u8865\u4e0d\u4e86\uff0c\u6240\u4ee5\u53ef\u4ee5\u53d1\u73b0\u5408\u6cd5\u7684\u8f6c\u79fb\u53ea\u80fd\u662f \\(j \\in (i - 256, i)\\) \u3002 \u7136\u540e dp \u5c31\u53d8\u6210 \\(O(256n)\\) \u4e86\u3002 \u8fd8\u6709\u4e00\u79cd\u505a\u6cd5\u662f\u8fd9\u6837\u7684\uff1a Another method \u7ed3\u8bba\uff1a \\(\\forall x, y \\in \\mathbb{N}, x - y, y - x < x \\oplus y < x + y\\) \u3002 \u539f\u56e0\u663e\u7136\uff0c\u53ea\u9700\u8981\u5728\u4e8c\u8fdb\u5236\u4e0b\u8003\u8651\u5373\u53ef\u3002 \u89c2\u5bdf\u9898\u76ee\u4e0d\u96be\u6839\u636e LIS \u6a21\u578b\u8bbe\u8ba1\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \u8bbe \\(dp(i)\\) \u8868\u793a\u8003\u8651\u5230\u7b2c \\(i\\) \u4e2a\u5143\u7d20\uff0c\u6700\u957f\u7684\u55b5-\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \\[dp(i) = \\max\\limits_{j = 1}^{i - 1} \\{dp(j) + 1\\} (\\text{if }a_j \\oplus i < a_i \\oplus j)\\] \u590d\u6742\u5ea6\u4e0a\u5929\uff0c\u4e0d\u80fd\u63a5\u53d7\u3002 \u6ce8\u610f\u5230 \\(a_i\\) \u7684\u503c\u57df\u5c0f\u7684\u79bb\u8c31\uff0c\u8003\u8651\u4ece\u8fd9\u91cc\u4f18\u5316\u3002 \u6839\u636e\u7ed3\u8bba\u4e0d\u96be\u60f3\u5230\uff1a \\(a_j \\oplus i < a_i \\oplus j \\iff i - a_j < j + a_i\\) \u53ef\u4ee5\u5f97\u5230 \\(i - j < a_i + a_j \\le 400 \\iff i - 400 \\le j\\) \u3002 \u6240\u4ee5 \\(j\\) \u53ea\u9700\u8981\u4ece \\(i - 400\\) \u5f00\u59cb\u679a\u4e3e\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(400n)\\) \u3002 \u672c\u9898\u4f18\u5316\u7684\u601d\u8def\u662f\u8003\u8651\u6839\u636e\u6027\u8d28\u4f18\u5316\u8f6c\u79fb\u6761\u4ef6\uff0c\u65b9\u5f0f\u662f\u72ec\u7acb & \u5408\u5e76\u53d8\u91cf\uff0c\u6bd4\u8f83\u65b0\u9896\u3002 \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int si = 3e5 + 10 ; i64 a [ si ], dp [ si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { int n ; cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; for ( int i = 1 ; i <= n ; ++ i ) dp [ i ] = 1l l ; i64 ans = -1ll ; for ( int i = 2 ; i <= n ; ++ i ) { int from = max ( i - 256 , 1 ); for ( int j = from ; j <= i - 1 ; ++ j ) if (( a [ i ] ^ ( 1l l * j - 1l l )) > ( a [ j ] ^ ( 1l l * i - 1l l ))) dp [ i ] = max ( dp [ j ] + 1l l , dp [ i ]); ans = max ( ans , dp [ i ]); } cout << ans << endl ; } return 0 ; }","title":"2022\u5e747,8\u6708AT&CF"},{"location":"rec/atcf-for-2022-07-08/#cf","text":"\u9000\u5f79\u8fc7\u540e\u6c34\u5e73\u66f4\u52a0\u4f4e\u4e0b\u4e86\u3002 \u672c\u6765\u5c31\u5f88\u83dc\uff0c\u73b0\u5728\u4f30\u8ba1\u5c31\u4e00\u4e2a pupil \u6c34\u5e73\u3002 \u6709\u65f6\u5019\u751a\u81f3 C \u505a\u4e0d\u51fa\u6765 /kx \u5c5e\u4e8e\u662f\u9ebb\u4e86\u3002","title":"\u4e03\u3001\u516b\u6708 CF \u4e22\u4eba\u505a\u9898\u8bb0\u5f55"},{"location":"rec/atcf-for-2022-07-08/#cf1706c-qpwoeirut-and-the-city","text":"\u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(\\{a\\}\\) \uff0c \\(3 \\le n \\le 1e5\\) \u3002 \u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u628a\u5e8f\u5217\u91cc\u7684\u4e00\u4e2a\u6570\u52a0\u4e00\uff0c\u4ee3\u4ef7\u662f\u4e00\u3002 \u8981\u6c42\u6700\u5927\u5316\u5e8f\u5217\u7684 \u201c\u5cf0\u201d \u7684\u4e2a\u6570\uff0c\u4e14\u4ee3\u4ef7\u6700\u5c0f\u3002 \u4e00\u4e2a\u201c\u5cf0\u201d\u5b9a\u4e49\u4e3a\u6ee1\u8db3 \\(a_i > a_{i + 1}, a_i > a_{i - 1}\\) \u7684 \\(a_i\\) \u3002 \\(a_{0}\\) \u548c \\(a_{n + 1}\\) \u5728\u5b9a\u4e49\u4e0a\u7b49\u4e8e \\(+\\infty\\) \u3002 \u8003\u573a\u72af\u6d51\u6ca1\u60f3\u5230\uff0c\u8fd9\u662f\u8003\u573a\u601d\u8def\uff1a \u53d1\u73b0\u4e86\u5cf0\u7684\u4e2a\u6570\u5fc5\u7136\u662f \\(mx = \\lfloor \\dfrac{n-1}{2}\\rfloor\\) \u3002 \u7136\u540e\u5c31\u8003\u8651\u5728 \\([2, n - 1]\\) \u91cc\u9762\u9009\uff0c\u5f00\u59cb\u60f3\u7684\u662f\u76f4\u63a5\u95f4\u9694\u9009 \\(mx\\) \u4e2a\u51fa\u6765\u3002 \u4f46\u662f\u53d1\u73b0 \\(n \\equiv 0 (\\mod 2)\\) \u7684\u65f6\u5019\u53ef\u4ee5\u5728\u4e2d\u95f4\u8df3\u4e24\u683c\u51fa\u6765\u9009\u3002 \\((\\*)\\) \u7136\u540e\u5c31\u53bb\u8003\u8651\u8d2a\u5fc3\u6216\u8005\u72b6\u6001\u673a DP \u4e86\uff0c\u6ca1\u6709\u53bb\u7ec6\u60f3 \\((\\*)\\) \u8fd9\u73a9\u610f\u513f\u5230\u5e95\u662f\u4e3a\u5565\uff0c\u672c\u8d28\u662f\u4ec0\u4e48\uff0c\u4e5f\u6ca1\u53bb\u8003\u8651\u590d\u6742\u5ea6\u7684\u95ee\u9898\uff0c\u4e5f\u5c31\u6ca1\u60f3\u5230\u6b63\u89e3\u3002 \u5bf9\u4e8e\u8fd9\u73a9\u610f\u513f\u4ed4\u7ec6\u8003\u8651\u4e00\u4e0b\uff0c\u5148\u5217\u51fa\u51e0\u4e2a corner case\uff1b \u5982\u679c \\(n\\) \u662f\u5947\u6570\uff0c\u80af\u5b9a\u6ca1\u6cd5\u8df3\u4e24\u683c\uff0c\u53ea\u80fd\u4ece \\(2\\) \u5f00\u59cb\u95f4\u9694\u9009\uff0c\u8fd9\u4e2a\u7b97\u60c5\u51b5 \\(1\\) \u3002 \u7136\u540e\u8003\u8651\u5076\u6570\uff0c\u53d1\u73b0\u5982\u679c\u4e0d\u8df3\u4e24\u683c\uff0c\u5fc5\u7136\u662f\u4ece \\(2\\) \u5f00\u59cb\u95f4\u9694\u62ff\u5230 \\(n - 2\\) \uff0c\u8fd9\u7b97\u60c5\u51b5 \\(2.1\\) \uff0c\u6216\u8005\u4ece \\(3\\) \u5f00\u59cb\u62ff\u5230 \\(n - 1\\) \uff0c\u8fd9\u7b97\u60c5\u51b5 \\(2.2\\) \u3002 \u6700\u540e\u5c31\u662f\u8df3\u4e24\u683c\u7684\u60c5\u51b5 \\(3\\) \uff0c\u80af\u5b9a\u53ea\u80fd\u8df3\u4e00\u6b21\u4e24\u683c\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u524d\u9762\u4e00\u6bb5\u662f\u5076\u6570\uff0c\u540e\u9762\u4e00\u6bb5\u662f\u5947\u6570\uff08\u8981\u60f3\u8df3\u4e00\u6b21\uff0c\u53ea\u80fd\u4ece \\(2\\) \u5f00\u59cb\u62ff\uff09\u3002 \u6240\u4ee5\u9884\u5904\u7406\u5076\u6570\u7684\u82b1\u8d39\u524d\u7f00\u548c\u5947\u6570\u7684\u82b1\u8d39\u540e\u7f00\u5373\u53ef\u3002 \u53d1\u73b0\u60c5\u51b5 \\(2.1, 2.2\\) \u90fd\u53ef\u4ee5\u76f4\u63a5\u5f52\u5316\u5230 \\(3\\) \uff0c\u6240\u4ee5\u4ee3\u7801\u5b9e\u73b0\u5c31\u53ef\u4ee5\u7b80\u5355\u4e00\u70b9\uff0c\u7a0d\u5fae\u8c03\u6574\u4e00\u4e0b\u5faa\u73af\u8fb9\u754c\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 // \u60f3\u4e0a CM\u3002 // \u6211\u98df\u4e0d\u98df\u6cb9\u997c\u3002 // \u80fd\u4e0d\u80fd\u6765\u70b9\u4e32\u4e32\u9898\u3002 // \u4e3a\u4ec0\u4e48\u4eff\u5c04\u53d8\u6362\u4e0d\u8003\u4e86\u3002 // \u7b97\u6cd5\u6846\u56fe\u7684\u53d8\u91cf\u90fd\u662f\u4ec0\u4e48 shit\u3002 // \u4ec0\u4e48\u65f6\u5019\u624d\u80fd AP Spasmodic AT\u3002 // OI \u6c34\u5e73\u4e00\u964d\u518d\u964d\uff0c\u5feb\u53d8\u6210\u53ea\u4f1a\u8d3a\u9898\u7684 shaber \u4e86\u3002 #include <bits/stdc++.h> #pragma GCC target(\"avx,sse2,sse3,sse4,mmx\") #pragma GCC optimize(\"Ofast\", \"inline\", \"-ffast-math\") using namespace std ; using i64 = long long ; const int si = 1e5 + 10 ; const i64 inf = 0x3f3f3f3f3f3f3f3fll ; int n ; i64 a [ si ], w [ si ]; i64 p [ si ], s [ si ]; void solve () { cin >> n ; i64 ans = 0 ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; if ( n & 1 ) { for ( int i = 2 ; i < n ; i += 2 ) if ( a [ i ] <= a [ i - 1 ] || a [ i ] <= a [ i + 1 ]) ans += max ( a [ i - 1 ], a [ i + 1 ]) - a [ i ] + 1 ; // cout << \"ans = \"; cout << ans << endl ; return ; } w [ 0 ] = w [ 1 ] = w [ n ] = w [ n + 1 ] = w [ n + 2 ] = 0 ; for ( int i = 2 ; i < n ; ++ i ) if ( a [ i ] <= a [ i - 1 ] || a [ i ] <= a [ i + 1 ]) w [ i ] = max ( a [ i - 1 ], a [ i + 1 ]) - a [ i ] + 1 ; else w [ i ] = 0 ; memset ( p , 0 , sizeof p ); // prefix sum of even bulding memset ( s , 0 , sizeof s ); // suffix sum of odd building for ( int i = 2 ; i < n ; i += 2 ) p [ i ] = p [ i - 2 ] + w [ i ]; for ( int i = n - 1 ; i > 1 ; i -= 2 ) s [ i ] = s [ i + 2 ] + w [ i ]; ans = inf ; for ( int i = 0 ; i < n ; i += 2 ) ans = min ( ans , p [ i ] + s [ i + 3 ]); // cout << \"ans = \"; cout << ans << endl ; return ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) solve (); return 0 ; }","title":"CF1706C Qpwoeirut And The City"},{"location":"rec/atcf-for-2022-07-08/#cf_1","text":"\u5728 UOJ \u7fa4\u91cc\u95ee\u4e86\u4e2a\u95ee\u9898\uff1a \u804a\u5929\u8bb0\u5f55 [\u4fdd\u7559] black_trees | \u6446\u4e86 7/19/2022 9:59:43 PM vuqa\uff0c\u840c\u65b0\u6253 CF \u7684\u65f6\u5019\u7ecf\u5e38\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff0c\u8fd9\u79cd\u60c5\u51b5\u8be5\u600e\u4e48\u907f\u514d\u554a\uff1a \u80fd\u60f3\u5230\u5bf9\u7684\u505a\u6cd5\uff0c\u4f46\u662f\u7ecf\u5e38\u81ea\u5df1\u7ed9\u4e00\u4e2a\u5b9e\u9645\u4e0a\u6ca1\u6cd5hack\u7684\u53cd\u4f8b\uff0c \u4f46\u662f\u53c8\u89c9\u5f97\u8fd9\u4e2a\u53cd\u4f8b\u662f\u5bf9\u7684\uff0c\u7136\u540e\u5426\u5b9a\u6389\u53ef\u4ee5\u8fc7\u6389\u7684\u505a\u6cd5\uff0c \u4fdd\u7559 \u039a\u03bf\u03c5\u03ac\u03ba\u03b5\u03c1_\u03a1\u03c5\u03b6\u03b9\u03bf\u64a4\u56de\u4e86\u4e00\u6761\u6d88\u606f \u83f2\u5965\u5fb7\u00b7\u897f\u65af\u6258\u59c6\u00b7\u6cf0\u65af\u7279 7/19/2022 10:01:09 PM @[\u4fdd\u7559] black_trees | \u6446\u4e86 \u771f\u7684\u53bb\u53c9\u4e00\u4e0b\u53c8\u4e0d\u4f1a\u6b7b\u3002 \u88ab\u5220\u9664\u8d1f\u4e09\u6b21\u7684 skip2004 7/19/2022 10:01:12 PM \u6ca1\u5565\u95ee\u9898\uff0c\u4e60\u60ef\u4e86\u5c31\u597d \u4fdd\u7559 \u039a\u03bf\u03c5\u03ac\u03ba\u03b5\u03c1_\u03a1\u03c5\u03b6\u03b9\u03bf 7/19/2022 10:01:17 PM @[\u4fdd\u7559] black_trees | \u6446\u4e86 \u5927\u80c6\u731c\u60f3\uff0c\u4ea4\u4e86\u518d\u8bc1 \u83f2\u5965\u5fb7\u00b7\u897f\u65af\u6258\u59c6\u00b7\u6cf0\u65af\u7279 7/19/2022 10:01:38 PM \u591a\u60f3\u53cd\u4f8b\u603b\u662f\u597d\u4e8b\uff09\u6211\u6709\u7684\u65f6\u5019\u90fd\u60f3\u4e0d\u5230 [\u4fdd\u7559] black_trees | \u6446\u4e86 7/19/2022 10:01:54 PM \u4f46\u6211\u7ecf\u5e38\u88ab\u9519\u8bef\u7684\u53cd\u4f8b\u8bf1\u5bfc [\u4fdd\u7559] black_trees | \u6446\u4e86 7/19/2022 10:02:12 PM \u7ecf\u5e38\u628a\u4e00\u773c\u9898\u641e\u6210\u4e0d\u53ef\u505a\u9898 [\u4fdd\u7559] black_trees | \u6446\u4e86 7/19/2022 10:02:41 PM \u800c\u4e14\u81ea\u5df1\u610f\u8bc6\u4e0d\u5230\uff0c\u6216\u8005\u8bf4\u8bc1\u660e\u4e0d\u4e86\u8fd9\u4e2a\u53cd\u4f8b\u662f\u5047\u7684 \u7ba1\u7406\u5458\u9759\u9759\u5df2\u88ab\u4f60\u79fb\u51fa\u7fa4\u804a\u64a4\u56de\u4e86\u4e00\u6761\u6d88\u606f\uff0c\u4f60\u731c\u731c\u64a4\u56de\u4e86\u4ec0\u4e48\u3002 \u7ba1\u7406\u5458\u9759\u9759\u5df2\u88ab\u4f60\u79fb\u51fa\u7fa4\u804a 7/19/2022 10:03:41 PM \u90a3\u8fd9\u548b\u80fd\u7b97\u53cd\u4f8b\u554a [\u4fdd\u7559] black_trees | \u6446\u4e86 7/19/2022 10:03:56 PM \u5c31\u662f\u6211\u4ee5\u4e3a\u662f\u53cd\u4f8b\u7684\u73a9\u610f\u513f\uff08\uff08 [\u4fdd\u7559] black_trees | \u6446\u4e86 7/19/2022 10:04:05 PM \u4f46\u5b9e\u9645\u4e0a\u4e0d\u662f \u88ab\u5220\u9664\u8d1f\u4e09\u6b21\u7684 skip2004 7/19/2022 10:04:08 PM \u90a3\u5c31\u4ee5\u540e\u591a\u6ce8\u610f\u4e00\u4e0b\u53cd\u4f8b\u6709\u6ca1\u6709\u95ee\u9898 \u7ba1\u7406\u5458\u9759\u9759\u5df2\u88ab\u4f60\u79fb\u51fa\u7fa4\u804a 7/19/2022 10:04:18 PM \u90a3\u4f60\u90fd\u62ff\u4e0d\u51fa\u6765\u5177\u4f53\u7684\u4f8b\u5b50 \u53c8\u548b\u80fd\u53eb\u53cd\u4f8b \u88ab\u5220\u9664\u8d1f\u4e09\u6b21\u7684 skip2004 7/19/2022 10:04:47 PM \u8fd9\u4e9b\u90fd\u5f88\u6b63\u5e38\uff0c\u4f60\u60f3\u53cd\u4f8b\u662f\u597d\u7684\u4e8b\u60c5\uff0c\u89e3\u51b3\u65b9\u6848\u5c31\u662f\u907f\u514d\u60f3\u5230\u5047\u7684\u53cd\u4f8b \u88ab\u5220\u9664\u8d1f\u4e09\u6b21\u7684 skip2004 7/19/2022 10:04:52 PM \u591a\u60f3\u60f3\u5c31\u597d\u4e86 \u7ba1\u7406\u5458\u9759\u9759\u5df2\u88ab\u4f60\u79fb\u51fa\u7fa4\u804a 7/19/2022 10:04:59 PM \u6211\u4e00\u822c\u60f3\u5426\u5b9a\u6211\u7684\u67d0\u4e2a\u60f3\u6cd5\u90fd\u662f\u9020\u4e2a\u80fd\u8ba9\u6211\u505a\u6cd5\u5047\u6389\u7684\u6570\u636e [\u4fdd\u7559] black_trees | \u6446\u4e86 7/19/2022 10:04:59 PM thx \u7136\u540e\u518d\u7ed3\u5408\u4e00\u4e0b\u81ea\u5df1\u7684\u60c5\u51b5\uff0c\u5176\u5b9e\u5c31\u662f\u5f88\u591a\u65f6\u5019\u6015\u9ebb\u70e6\uff0c\u61d2\uff0c\u6ca1\u6709\u53bb\u6df1\u7a76\u6bcf\u4e2a\u70b9\u80cc\u540e\u7684\u4e1c\u897f\uff0c\u6ca1\u6709\u53bb\u8003\u8651\u8fd9\u73a9\u610f\u513f\u5230\u5e95\u60f3\u544a\u8bc9\u6211\u5565\u3002 \u8bf4\u767d\u4e86\u5c31\u662f\u60f3\u7684\u4e0d\u591f\uff0c\u5199\u7684\u4e0d\u591f\uff0c\u63a8\u7684\u4e0d\u591f\u3002 \u591a\u53bb\u601d\u8003\u4e00\u4e0b special case \u548c corner case \u7684\u6b63\u786e\u6027\uff0c\u7279\u522b\u8981\u7ed3\u5408\u5168\u5c40\u53bb\u601d\u8003\uff0c\u8003\u8651\u5b8c\u6574\uff0c\u522b\u6293\u5230\u4e00\u4e2a\u5c40\u90e8\u5c31\u8dd1\u4e86\uff08\u9664\u975e\u80fd\u8bc1\u660e\u5c40\u90e8\u6700\u4f18\u5c31\u662f\u5168\u5c40\u6700\u4f18\uff09\u3002 \u5982\u679c spc \u80fd\u5f52\u5316\u5230\u5df2\u6709\u7684\u901a\u89e3\u4e0a\u90a3\u662f\u66f4\u597d\u7684\u4e86\u3002","title":"\u4e00\u4e2a\u4e00\u76f4\u505a CF \u90fd\u6709\u7684\u6bdb\u75c5"},{"location":"rec/atcf-for-2022-07-08/#cf1714f-build-a-tree-and-that-is-it","text":"\u7ed9\u4f60 \\(n\\) \u4e2a\u8282\u70b9\uff0c\u8981\u6c42\u4f60\u6784\u9020\u4e00\u9897\u65e0\u6839\u65e0\u6743\u6811\uff0c\u6ee1\u8db3\uff1a \u7ed9\u5b9a \\(d_{12},d_{23},d_{31}\\) \uff0c\u5206\u522b\u8868\u793a \\(1,2;2,3;3,1\\) \u4e4b\u95f4\u7684\u8ddd\u79bb\u3002 \u5982\u679c\u5b58\u5728\u8fd9\u6837\u7684\u6811\uff0c\u6784\u9020\u89e3\uff0c\u5426\u5219\u8f93\u51fa NO \u3002 \u8fd9\u9053\u9898\u6ca1\u6253\u4e66\u9762\u8349\u7a3f\uff0c\u81ea\u5df1\u5728 notepad \u4e0a\u6253\u5b57\u6a21\u62df\u601d\u8def\uff0c\u7136\u540e\u753b\u4e86\u4e2a\u56fe\u5c31\u4f1a\u4e86\u3002 \u4e0d\u8fc7\u8c03\u8bd5\u5f88\u6076\u5fc3\uff08\uff0c\u6210\u529f\u5730\u4e00\u4e0b\u5f00\u5230\u4e86\u5f53\u573a div3 \u7684\u6700\u96be\u9898 233\u3002 \u6211\u4eec\u4e0d\u59a8\u5047\u8bbe \\(d_{12},d_{23},d_{31}\\) \u5347\u5e8f\u6392\u5e8f\u8fc7\u540e\u4e3a \\(a,b,c\\) \uff0c \\(c_s,c_t\\) \u8868\u793a \\(c\\) \u5bf9\u5e94\u7684\u90a3\u4e24\u4e2a\u70b9\uff0c \\(a,b\\) \u540c\u7406\u3002 \u7136\u540e\u6700\u7b80\u5355\u7684\u60c5\u51b5\u5c31\u662f \\(a + b = c\\) \uff0c\u6211\u4eec\u76f4\u63a5\u62c9\u4e00\u6761 \\(c\\) \u5bf9\u5e94\u7684\u94fe \\((c_s \\to c_t)\\) \u5c31\u53ef\u4ee5\u4e86\u3002 \u7136\u540e\u8003\u8651\u4e0d\u7279\u6b8a\u7684\u60c5\u51b5\uff0c\u5982\u679c \\(a + b \\not= c\\) \uff0c\u548b\u641e\uff1f \u4ece\u6700\u7b80\u5355\u7684\u60c5\u51b5\u6269\u5c55\uff0c\u6211\u4eec\u5728 \\(c\\) \u5bf9\u5e94\u7684\u94fe\u4e0a\u518d\u627e\u4e00\u4e2a\u70b9\uff0c\u6bd4\u5982\u8fd9\u4e2a\u70b9\u662f \\(P\\) \uff0c\u76f4\u63a5\u62c9\u4e00\u6761\u94fe\u51fa\u53bb \u90a3\u4e48\u6211\u4eec\u5c31\u53ea\u9700\u8981\u6784\u9020\u51fa \\(a_s \\to P \\to a_t\\) \u548c \\(b_s \\to P \\to b_t\\) \u8fd9\u4e24\u6761\u94fe\u5c31\u53ef\u4ee5\u4e86\uff08\u5047\u8bbe \\(a_t = b_t\\) \uff09\u3002 \u968f\u4fbf\u624b\u5b8c\u4e00\u4e2a\u6570\u636e\u770b\u770b\u5177\u4f53\u548b\u6784\u9020 \u6bd4\u5982 \\(a = d12 = 4, b = d23 = 5, c = d31 = 6\\) \u7b2c\u4e00\u6761\u94fe\u62c9\u51fa\u6765\u662f\u8fd9\u6837\u7684\uff0c\u4e2d\u95f4\u7684 O \u5c31\u662f\u9664\u4e86 \\(1,2,3\\) \u4ee5\u5916\u968f\u4fbf\u54ea\u4e00\u4e2a\u70b9\uff1a 1 - O - O - O - O - O - 3 ???? \u53d1\u73b0\u5c45\u7136\u62c9\u4e0d\u4e86\u554a\uff01\uff1f\u7528\u4ee3\u6570\u65b9\u5f0f\u4e25\u8c28\u5206\u6790\u4e0b\u5148\uff1a \u8bbe \\(a_s \\to P\\) \u957f\u5ea6\u662f \\(x\\) , \\(b_s \\to P\\) \u5c31\u662f \\(6 - x\\) . \u7136\u540e\u6211\u4eec\u62c9\u51fa\u53bb\u7684\u957f\u5ea6\u4e3a \\(y\\) \uff0c\u662f \\(a,b\\) \u5171\u540c\u4eab\u6709\u7684\uff0c \u6240\u4ee5 \\(4 = x + y, 5 = 6 - x + y\\) \u4e24\u4e2a\u5f0f\u5b50\u76f8\u52a0 \uff1a \\(2y = 3\\) \uff0c\u663e\u7136\u62c9\u4e0d\u4e86\uff0c\u8fd9\u5c31\u662f\u65e0\u89e3\u7684\u60c5\u51b5\u3002 \u4e25\u8c28\u7684\u65b9\u7a0b\u5c31\u662f \\(a + b - c = 2y\\) \uff0c\u6240\u4ee5\u6211\u4eec\u89e3\u4e2a\u65b9\u7a0b\u770b\u770b\u89e3\u662f\u4e0d\u662f\u975e\u8d1f\u6574\u6570\u5c31\u80fd\u5224\u65ad\u662f\u5426\u6709\u89e3\u4e86\u3002 \u968f\u4fbf\u624b\u5b8c\u51e0\u4e2a\u6570\u636e\uff0c\u662f\u5bf9\u7684\uff0c\u518d\u770b\u770b\u7279\u6b8a\u60c5\u51b5\u6709\u6ca1\u6709\u5fd8\u8bb0\u7684 \u6bd4\u5982 n \u7279\u522b\u5927\u7684\u65f6\u5019\uff1f\uff1f\uff1f\u597d\u50cf\u6ca1\u7528\u554a\uff0c\u90fd\u4e00\u6837\u7684\u3002 \u80fd\u600e\u4e48\u7279\u6b8a\u5462\uff1f \u54e6\u5c31\u6bd4\u5982\u4e0a\u9762\u90a3\u4e2a\u6784\u9020\u4e0d\u4e86\u7684\u3002 \\(c = 6, a = 4, b = 5\\) \u80fd\u4e0d\u80fd\u76f4\u63a5\u4ece \\(1\\) \u62c9\u4e24\u6761\u94fe\uff1f\u672c\u8d28\u4e00\u6837\u3002 \u5982\u679c\u5728\u4e0b\u9762\u8fde \\(2,3\\) \u5c31\u6210\u73af\u4e86\uff0c\u6ca1\u6cd5\u505a\uff0c\u6240\u4ee5\u8fd9\u4e2a\u6784\u9020\u5fc5\u7136\u5f88\u5bf9\u3002 \u6700\u540e\u53d1\u73b0\u6700\u7b80\u5355\u7684\u60c5\u51b5\u4e5f\u662f\u53ef\u4ee5\u5f52\u5316\u7684\uff0c\u4e8e\u662f\u778e\u6784\u9020\u5c31\u884c\u4e86\uff0c\u8fd9\u4e2a\u5b9e\u73b0\u7565\u6709\u9ebb\u70e6\uff08\uff08\uff08 \u63d0\u51e0\u4e2a\u7ec6\u8282\uff1a\u4e0d\u8981\u5fd8\u8bb0\u628a\u7528\u5269\u4e0b\u7684\u70b9\u62c9\u4e0a\uff0c\u968f\u4fbf\u6302\u54ea\u91cc\u90fd\u884c\u3002 \\(a + b < c\\) \u7684\u60c5\u51b5\u4e5f\u662f\u4e0d\u884c\u7684\uff0c\u8282\u70b9\u4e0d\u591f\u7528\u4e5f\u8981\u8003\u8651\u3002 \u975e\u5e38\u5de8\u5927\u6076\u5fc3\uff0c\u5b9e\u73b0\u662f\u7528\u7684 bmy \u7684\u601d\u8def\uff0c\u8fd9\u4e2a\u6e05\u6670\u4e00\u70b9\uff0c\u6211\u5199\u7684\u662f\u5927\u5206\u8ba8\uff0c\u7279\u522b\u81ed\uff08 \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 void Solve () { cin >> a >> b >> c ; if ( b > a + c || c > b + a || a > c + b ) { cout << \"NO\" << endl ; return ; } if ( b % 2 != ( a + c ) % 2 || ( a + c + b ) / 2 > n - 1 ) { cout << \"NO\" << endl ; return ; } for ( int i = 1 ; i <= n ; ++ i ) pa [ i ] = i ; cout << \"YES\" << endl ; int cur = 1 ; for ( int i = 4 ; i < 4 + ( a - b + c ) / 2 ; ++ i ) { if ( a * 2 == a - b + c && i - 3 == ( a - b + c ) / 2 ) { if ( merge ( 2 , cur )) cout << 2 << \" \" << cur << endl ; break ; } if ( c * 2 == a - b + c && i - 3 == ( a - b + c ) / 2 ) { if ( merge ( 3 , cur )) cout << 3 << \" \" << cur << endl ;; break ; } if ( merge ( i , cur )) cout << i << \" \" << cur << endl ; cur = i ; } int pos = cur , tp ; if ( a * 2 == a - b + c ) pos = 2 ; if ( c * 2 == a - b + c ) pos = 3 ; tp = pos , cur = max ( cur , 3 ); for ( int i = cur + 1 ; i < cur + a - ( a - b + c ) / 2 ; ++ i ) { if ( merge ( tp , i )) cout << tp << \" \" << i << endl ; tp = i ; } if ( pos != 2 ) if ( merge ( tp , 2 )) cout << tp << \" \" << 2 << endl ; tp = pos ; for ( int i = 4 ; i <= n ; ++ i ) { if ( root ( 1 ) != root ( i )) { cur = i ; break ; } } for ( int i = cur ; i < cur + c - ( a - b + c ) / 2 - 1 ; ++ i ) { if ( merge ( tp , i )) cout << tp << \" \" << i << endl ; tp = i ; } if ( pos != 3 && merge ( tp , 3 )) cout << tp << \" \" << 3 << endl ; for ( int i = 1 ; i <= n ; ++ i ) if ( merge ( 1 , i )) cout << 1 << \" \" << i << endl ; } \u611f\u89c9\u8fd9\u9898\u5c31\u5f88\u597d\u8df5\u884c\u4e86\u4e0a\u9762\u7684\u90a3\u4e2a\u8bf4\u6cd5\u554a\u2026\u2026 \u54e6\u5176\u5b9e\u8fd9\u662f 8 \u6708\u4efd\u7684\u6bd4\u8d5b\uff08\uff08","title":"CF1714F Build a Tree and That Is It"},{"location":"rec/atcf-for-2022-07-08/#cf1716d-chip-move","text":"\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u65e0\u9650\u7684\u6570\u8f74\uff0c\u4f60\u5f00\u59cb\u5728 \\(0\\) \u3002 \u73b0\u5728\u8981\u6c42\u4f60\u8df3\u5230 \\(n\\) \uff0c\u5176\u4e2d\u7b2c \\(i\\) \u6b65\u8df3\u7684\u957f\u5ea6\u5fc5\u987b\u662f \\(K + i - 1\\) \u7684\u6574\u6570\u500d\uff0c \\(K\\) \u4e3a\u4e00\u4e2a\u7ed9\u5b9a\u5e38\u6570\u3002 \\(i\\to j\\) \u7684\u957f\u5ea6\u5b9a\u4e49\u4e3a \\(j - i\\) \u3002 \u6bd4\u5982 \\(k = 2\\) \uff0c\u4f60\u7b2c\u4e00\u6b65\u5c31\u53ea\u80fd\u8df3 \\(2, 4, 6, 8, \\dots\\) \u6b65\uff0c\u7b2c\u4e8c\u6b65\u53ea\u80fd\u8df3 \\(3, 6, 9, 12, \\dots\\) \u6b65\u3002 \u6c42\u603b\u5171\u7684\u65b9\u6848\u6570\u6a21 \\(998244353\\) \uff0c \\(n,k \\le 2e5\\) \u3002 \u975e\u5e38\u50bb\u903c\u7684 DP \u554a\uff01\u5c45\u7136\u653e\u5728 D\uff01 \u8003\u8651\u6734\u7d20\u7684 dp\uff0c\u8bbe \\(dp(i,j)\\) \u8868\u793a\u8d70\u5230 \\(i\\) \uff0c\u4e00\u5171\u7528\u4e86 \\(j\\) \u6b65\u7684\u65b9\u6848\u6570\u3002 \u7136\u540e\u8f6c\u79fb\u80af\u5b9a\u662f\u4ece \\(j-1\\) \u6b65\u8f6c\u79fb\uff0c\u679a\u4e3e\u4e0a\u4e00\u6b65\u5728\u54ea\u91cc\u5373\u53ef\u3002 \u6211\u4e00\u5f00\u59cb\u4ee5\u4e3a\u8fd9\u4e2a\u505a\u6cd5\u662f \\(O(n^2)\\) \u7684\uff0c\u8fd8\u8003\u8651\u8fc7\u600e\u4e48\u53bb\u4f18\u5316\u6210 \\(O(n \\log n)\\) \uff0c\u56e0\u4e3a\u4e4b\u524d\u7684 2D \u5f88\u591a\u90fd\u662f \\(O(n^2) \\to O(n \\log)\\) \u7684\u4f18\u5316\u3002 \u6709\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u56e0\u4e3a\u6211\u4eec\u6bcf\u6b21\u8df3\u7684\u90fd\u662f\u67d0\u4e2a\u6570\u7684\u500d\u6570\uff0c\u6240\u4ee5\u8fd9\u4e2a\u6570\u91cf\u7ea7\u80af\u5b9a\u4e0d\u662f \\(O(n)\\) \uff0c\u8003\u8651\u4e00\u4e0b\u5b83\u5e94\u8be5\u662f\u591a\u5c11\u3002 \u6700\u574f\u7684\u60c5\u51b5\uff0c\u5c31\u662f \\(K = 1\\) \uff0c\u7136\u540e\u7b2c \\(i\\) \u6b65\u6c38\u8fdc\u53ea\u8df3 \\(K + i - 1 = i\\) \u8fd9\u4e48\u957f\u3002 \u90a3\u4e48 \\(\\sum\\limit_{x = 1}^{k} x \\le n\\) \uff0c\u6240\u4ee5 \\(k \\le \\sqrt{n}\\) \uff0c\u4e5f\u5c31\u662f\u8bf4\u679a\u4e3e\u7684\u4f4d\u7f6e\u53ea\u6709 \\(O(\\sqrt{n})\\) \u4e2a\u3002 \u6240\u4ee5\u8fd9\u4e2a DP \u5c31\u968f\u4fbf\u8fc7\uff1a \u6734\u7d20\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int mod = 998244353 ; const int si = 2e5 + 1 ; const int sqrt_si = 450 ; int n , K ; int dp [ si ][ sqrt_si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); auto limit = [ & ]( int j ) -> int { i64 res = (( K + j ) * ( K + j - 1 ) - K * ( K - 1 )) / 2l l ; if ( res > 1l l * 2e5 + 10 ) return 0x3f3f3f3f ; return ( int ) res ; }; cin >> n >> K ; dp [ 0 ][ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; limit ( j ) <= i ; ++ j ) { for ( int k = 1 ; k * ( K + j - 1 ) <= i ; ++ k ) { dp [ i ][ j ] = ( dp [ i ][ j ] + dp [ i - k * ( K + j - 1 )][ j - 1 ]) % mod ; } } } for ( int i = 1 ; i <= n ; ++ i ) { int sum = 0 ; for ( int j = 1 ; limit ( j ) <= i ; ++ j ) { sum = ( sum + dp [ i ][ j ] % mod ) % mod ; } cout << sum << ' ' ; } cout << endl ; return 0 ; } \u4f46\u662f\u8fd9\u4e2a\u4e1c\u897f\u4f1a MLE\uff0c\u60f3\u8d77\u6765\u8f6c\u79fb\u80af\u5b9a\u662f\u4ece \\(j-1\\) \u6b65\u8f6c\u79fb\uff0c\u6240\u4ee5\u76f4\u63a5\u6eda\u52a8\u6570\u7ec4\uff1a \u6eda\u52a8\u6570\u7ec4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int mod = 998244353 ; const int si = 2e5 + 1 ; const int sqrt_si = 450 ; int n , K ; int dp [ si ][ 2 ], ans [ si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); auto limit = [ & ]( int j ) -> int { i64 res = j * j ; if ( res > 2l l * 2e5 + 10 ) return 0x3f3f3f3f ; return ( int ) res ; }; cin >> n >> K ; dp [ K ][ 0 ] = 1 ; int j = 1 ; for ( int k = 0 ; limit ( k ) <= ( n << 1 ); ++ k ) { j = j xor 1 ; for ( int i = 0 ; i <= n ; ++ i ) dp [ i ][ j xor 1 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) if ( i - k > K ) dp [ i ][ j ] = ( dp [ i ][ j ] + dp [ i - k - K ][ j ]) % mod , dp [ i ][ j xor 1 ] = ( dp [ i ][ j xor 1 ] + dp [ i - k - K - 1 ][ j ]) % mod ; int sum = 0 ; for ( int i = 1 ; i <= n ; ++ i ) ans [ i ] = ( ans [ i ] + dp [ i ][ j ] % mod ) % mod ; } for ( int i = 1 ; i <= n ; ++ i ) cout << ans [ i ] << \" \" ; cout << endl ; return 0 ; }","title":"CF1716D Chip Move"},{"location":"rec/atcf-for-2022-07-08/#cf1713d-tournament-countdown","text":"\u4ea4\u4e92\u9898 \u7ed9\u4f60\u4e00\u4e2a \\(2^n\\) \u4eba\u7684\u6dd8\u6c70\u8d5b\uff0c\u521d\u59cb \\(i, i + 1\\) \u4e00\u7ec4\uff08 \\(i \\equiv 0 (\\mod 1)\\) \uff09\u3002 \u4f60\u53ef\u4ee5\u95ee\u4ea4\u4e92\u5e93\u4e0d\u8d85\u8fc7 \\(\\lceil \\dfrac{2^{n + 1}}{3}\\rceil\\) \u4e2a\u8be2\u95ee\u3002 \u6bcf\u4e2a\u8be2\u95ee\u53ef\u4ee5\u8be2\u95ee\u4efb\u610f\u4e24\u4e2a\u4eba \\((u, v)\\) \u7684\u603b\u80dc\u5229\u6570\u5927\u5c0f\uff0c\u5982\u679c\u76f8\u7b49\u8fd4\u56de \\(0\\) \uff0c \\(u\\) \u5927\u8fd4\u56de \\(1\\) \uff0c \\(v\\) \u5927\u8fd4\u56de \\(2\\) \u3002 \u6c42\u6700\u540e\u80dc\u51fa\u7684\u90a3\u4e00\u4e2a\u4eba\u3002 \u5443\uff0c\u53d1\u73b0\u8fd9\u4e2a \\(\\dfrac{1}{3}\\) \u5f88\u6709\u610f\u601d\u554a\uff01 \u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53ef\u80fd\u8981\u901a\u8fc7\u4e00\u6b21\u67e5\u8be2\u95ee\u6e05\u695a\u66f4\u591a\u7684\u5173\u7cfb\u3002 \u6240\u4ee5\u53ea\u95ee\u4e00\u5bf9\u5185\u7684\u8bdd\u597d\u50cf\u4e0d\u592a\u591f\u3002 \u4e8e\u662f\u6211\u4eec\u8df3\u7740\u95ee\u3002 \\(1\\) \u95ee \\(3\\) \u3002 \u5982\u679c \\(1>3\\) \uff0c\u8bf4\u660e \\(1\\) \u5fc5\u7136\u6253\u7206\u4e86 \\(2\\) \uff0c\u4e0d\u7136 \\(1\\) \u5fc5\u7136\u662f \\(0\\) \uff0c\u7136\u540e\u4f60\u4e0d\u6e05\u695a \\(3,4\\) \u7684\u5173\u7cfb\uff0c\u56e0\u4e3a\u6709 \\(3\\) \u88ab\u6253\u7206\uff0c \\(4\\) \u628a \\(1\\) \u6253\u7206\uff0c\u6216\u8005 \\(1\\) \u628a\u6253\u7206 \\(3\\) \u7684 \\(4\\) \u4e5f\u6253\u7206\u3002\uff0c\u90a3\u4e48 \\(1\\) \u518d\u95ee\u4e00\u6b21 \\(4\\) \u3002 \u5982\u679c \\(1=3\\) \uff0c\u8bf4\u660e\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u7b2c\u4e00\u79cd\u662f \\(1,3\\) \u90fd\u4e71\u6740\u4e86\uff0c\u7b2c\u4e8c\u79cd\u662f\u90fd\u8f93\u9ebb\u4e86\uff0c\u8bf4\u660e\u8fd8\u9700\u8981 \\(2\\) \u518d\u95ee\u4e00\u6b21 \\(4\\) \u3002 \u5982\u679c \\(1<3\\) \uff0c\u90a3\u4e48 \\(2\\) \u518d\u95ee\u4e00\u6b21 \\(3\\) \uff0c\u8fd9\u4e2a\u540c\u7406\u7b2c\u4e00\u79cd\u60c5\u51b5\u3002 \u6700\u540e\u5c31\u80fd \\(4\\) \u8fdb \\(1\\) \u3002 \u7136\u540e\u5f52\u5e76\u4e00\u4e0b\uff0c\u5728\u5269\u4e0b\u7684\u91cc\u9762\u518d\u7ee7\u7eed\u505a\u3002 \u7136\u540e\u6ca1\u4e86\uff0c\u6b21\u6570\u663e\u7136\u5f88\u4f18\u79c0\u3002 TJX \u7684 code\uff0c\u61d2\u5f97\u5199\u4e86\uff1a \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 #include <bitsdc++.h> using namespace std ; int n ; int ask ( int a , int b ) { int t ; cout << \"? \" << a << ' ' << b << endl ; cin >> t ; return t ; } void solve () { vector < int > a ; cin >> n ; for ( int i = 1 ; i <= ( 1 << n ); ++ i ) a . push_back ( i ); for ( int i = 1 ; i <= n ; ++ i ) { vector < int > b ; if ( a . size () == 1 ) { cout << \"! \" << a [ 0 ] << endl ; return ; } if ( a . size () == 2 ) { int t = ask ( a [ 0 ], a [ 1 ]); if ( t == 1 ) { cout << \"! \" << a [ 0 ] << endl ; return ; } else { cout << \"! \" << a [ 1 ] << endl ; return ; } } for ( int i = 0 ; i < a . size (); ++ i ) if ( i % 4 == 0 ) { int t = ask ( a [ i ], a [ i + 2 ]); if ( t == 1 ) { int u = ask ( a [ i ], a [ i + 3 ]); if ( u == 1 ) b . push_back ( a [ i ]); else b . push_back ( a [ i + 3 ]); } else if ( t == 0 ) { int u = ask ( a [ i + 1 ], a [ i + 3 ]); if ( u == 1 ) b . push_back ( a [ i + 1 ]); else b . push_back ( a [ i + 3 ]); } else { int u = ask ( a [ i + 1 ], a [ i + 2 ]); if ( u == 1 ) b . push_back ( a [ i + 1 ]); else b . push_back ( a [ i + 2 ]); } } a = b ; } } int main () { int T ; cin >> T ; while ( T -- ) solve (); }","title":"CF1713D Tournament Countdown"},{"location":"rec/atcf-for-2022-07-08/#arc145a-ab-palindrome","text":"\u597d\u4e45\u6ca1\u6253\u8fc7 AT \u4e86\uff0c\u4eca\u5929 VP \u4e00\u628a\u723d\u723d\uff088.11\uff09 \u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(N\\) \u7684\u5b57\u7b26\u4e32 \\(S\\) \u3002 \\(\\Sigma = \\{\\texttt{A},\\texttt{B}\\}\\) \u3002 \u5982\u679c\u4f60\u6bcf\u6b21\u53ef\u4ee5\u628a\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(2\\) \u7684\u5b57\u4e32\u53d8\u6210 \\(\\texttt{AB}\\) \u3002 \u5224\u5b9a\u7ecf\u8fc7\u4e00\u4e9b\u64cd\u4f5c\u540e \\(S\\) \u662f\u5426\u53ef\u80fd\u56de\u6587\u3002 \\(N \\in [2, 2e5]\\) \u3002 \u8bc8\u9a97\u9898 * 1 \u53d1\u73b0 \\(s(0) = \\texttt{A}\\) \u4e14 \\(s(N - 1) = \\texttt{B}\\) \u65f6\u5fc5\u7136\u4e0d\u884c\u3002 \u7136\u540e\u5176\u5b83\u60c5\u51b5\u6b63\u7740\u505a\u62c9\u901a\u4e00\u904d\u6216\u8005\u53cd\u8fc7\u6765\u5c31\u5fc5\u7136\u53ef\u4ee5\u3002 \u7136\u540e\u957f\u5ea6\u4e3a \\(2\\) \u7279\u5224\u4e00\u4e0b\u5c31\u6ca1\u4e86\uff0c \u8fd8\u662f\u6709\u70b9\u610f\u601d\u3002 \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int n ; cin >> n ; string s ; cin >> s ; if ( n == 2 ) { if ( s [ 0 ] == s [ 1 ]) cout << \"Yes\" << endl ; else cout << \"No\" << endl ; } else { if ( s [ 0 ] == s [ n - 1 ]) cout << \"Yes\" << endl ; else if ( s [ 0 ] == 'A' && s [ n - 1 ] == 'B' ) cout << \"No\" << endl ; else cout << \"Yes\" << endl ; } return 0 ; }","title":"ARC145A AB Palindrome"},{"location":"rec/atcf-for-2022-07-08/#arc145c-split-and-maximize","text":"\u7ed9\u5b9a\u4e00\u4e2a \\(1 \\to 2n\\) \u7684\u6392\u5217 \\(p\\) \uff0c\u628a \\(p\\) \u62c6\u6210\u4e24\u4e2a\u957f\u5ea6\u76f8\u7b49\u7684\u5b50\u5e8f\u5217 \\(A, B\\) \u3002 \\(p\\) \u7684\u5206\u6570\u5b9a\u4e49\u4e3a\u6240\u6709\u53ef\u80fd\u7684 \\(\\sum\\limits_{i = 1}^n a_i b_i\\) \u7684\u6700\u5927\u503c\u3002 \u6c42\u6709\u591a\u5c11\u4e2a \\(p\\) \u7684\u5206\u6570\u662f\u6700\u5927\u7684, \\(1\\le n \\le 2e5\\) \u3002 \u6392\u5e8f\u4e0d\u7b49\u5f0f \uff0c\u53ef\u4ee5\u5f97\u5230\u6700\u5927\u5f97\u5206\u4e3a \\(Mx = \\sum_{i = 1}^n 2i(2i - 1)\\) \u3002 \u8003\u8651\u600e\u4e48\u6837\u624d\u80fd\u51d1\u51fa \\(Mx\\) \uff0c\u5c31\u662f\u8ba9\u6240\u6709 \\(2i - 1\\) \u548c \\(2i\\) \u6309\u987a\u5e8f \u914d\u6210\u4e00\u5bf9\u5c31\u884c\u4e86\u3002 \u770b\u4e00\u4e2a\u4e0d\u80fd\u7684\u4f8b\u5b50\uff1a \\(126345\\) \uff0c\u8fd9\u91cc \\(6\\) \u5e94\u8be5\u548c \\(5\\) \u914d\u5bf9\u624d\u884c\uff0c\u4f46\u662f\u4e2d\u95f4\u63d2\u4e86\u4e00\u4e2a \\(3, 4\\) \u8fdb\u53bb\uff0c\u5982\u679c \\([126],[345]\\) \uff0c\u867d\u7136 \\(6,5\\) \u914d\u5bf9\u4e86\uff0c\u4f46\u662f\u524d\u9762\u7684\u5c31\u4e0d\u80fd\u914d\u5bf9\u4e86\u3002 \\(123546\\) \uff0c\u8fd9\u79cd\u4e5f\u65e0\u8bba\u5982\u4f55\u90fd\u4e0d\u884c\uff0c\u56e0\u4e3a \\(3, 4\\) \u548c \\(5, 6\\) \u4ea4\u53c9\u4e86\uff08\u6709\u5305\u542b\u5173\u7cfb\uff09\u3002 \u4e0d\u59a8\u628a \\(2i - 1\\) \u770b\u4f5c\u5de6\u62ec\u53f7\uff0c \\(2i\\) \u770b\u4f5c\u53f3\u62ec\u53f7\u3002 \u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e00\u4e2a \\(2i\\) \uff0c\u548c\u4ed6\u914d\u5bf9\u7684 \\(2i-1\\) \u90fd\u5fc5\u987b\u662f\u79bb\u4ed6\u6700\u8fd1\u7684\u4e00\u4e2a\u5de6\u62ec\u53f7\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5fc5\u987b\u8981\u662f ()()()()...() \u6216\u8005 )()()(...)( \uff0c\u6216\u8005 )(()... \u7684\u60c5\u51b5\u3002 \u65b9\u4fbf\u8ba8\u8bba\uff0c\u628a\u4ed6\u4eec\u5168\u90e8\u5f52\u5316\u5230 ()()()()...() \u7684\u60c5\u51b5\uff0c\u518d\u5728\u5185\u90e8\u6392\u5217\u4ea4\u6362\u3002 \u663e\u7136\u8fd9\u4e2a\u662f RBS \u8ba1\u6570\uff0c\u4e00\u5171 \\(Cat(n)\\) \u79cd\u53ef\u80fd\uff0c\u6bcf\u79cd\u53ef\u80fd\u5185\u90e8\u53ef\u4ee5\u4ea4\u6362 Pair \u7684\u987a\u5e8f\uff0c \\(Cat(n)\\times n!\\) \uff0c\u7136\u540e\u6bcf\u4e2a Pair \u5185\u90e8\u53c8\u53ef\u4ee5\u6362\u987a\u5e8f\uff0c\u6240\u4ee5\u6700\u7ec8\u7b54\u6848\u662f \\(Cat(n)\\times n! \\times 2^n\\) \u3002 \u5f88\u5999\u7684\u9898\u3002 \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 // author : black_trees // \u8d3a\u7684\u7c89\u5154\u7684\uff08 // \u56e0\u4e3a\u7ec4\u5408\u6570\u677f\u5b50\u627e\u4e0d\u5230\u4e86\uff08 #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int mod = 998244353 ; const int si = 2e5 + 10 ; inline int qpow ( int b , int e ) { int a = 1 ; for (; e ; e >>= 1 , b = ( int )( 1l l * b * b % mod )) if ( e & 1 ) a = ( int )( 1l l * a * b % mod ); return a ; } inline int inv ( int b ) { return qpow ( b , mod - 2 ); } int fact [ si * 2 ], invf [ si * 2 ]; inline void init ( int n ) { fact [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) fact [ i ] = ( int )( 1l l * fact [ i - 1 ] * i % mod ); invf [ n ] = inv ( fact [ n ]); for ( int i = n ; i >= 1 ; -- i ) invf [ i - 1 ] = ( int )( 1l l * invf [ i ] * i % mod ); } inline int C ( int n , int m ) { if ( m < 0 || m > n ) return 0 ; return ( int )( 1l l * fact [ n ] * invf [ m ] % mod * invf [ n - m ] % mod ); } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int n ; cin >> n , init ( 2 * n ); int ans = ( C ( 2 * n , n ) - C ( 2 * n , n - 1 ) + mod ) % mod ; ans = ( int )( 1l l * ans * fact [ n ] % mod * qpow ( 2 , n ) % mod ); cout << ans << endl ; return 0 ; }","title":"ARC145C Split and Maximize"},{"location":"rec/atcf-for-2022-07-08/#cf1721d-maximum-and","text":"\u7ed9\u5b9a\u5e8f\u5217 \\(a,b\\) \uff0c\u53ef\u4ee5\u91cd\u6392 \\(b\\) \uff0c\u6c42 \\(\\operatorname{AND}\\limits_{i = 1}^n(a(i) \\oplus b\\prime(i))\\) \u3002 \\(n \\le 1e5, a_i, b_i \\in [0, 2^30)\\) \u770b\u5230\u8fd9\u4e2a AND \u6700\u5927\u4e0d\u96be\u60f3\u5230\u5c3d\u91cf\u8ba9\u9ad8\u4f4d\u662f \\(1\\) \uff0c\u8bf4\u767d\u4e86\u5c31\u662f\u4ece\u9ad8\u5230\u4f4e\u8d2a\u5fc3\uff0c\u5e76\u4e14\u5982\u679c\u8fd9\u4e2a\u9ad8\u4f4d\u53ea\u80fd\u662f \\(0\\) \uff0c\u5bf9\u4e8e\u7b54\u6848\u662f\u6ca1\u6709\u5f71\u54cd\u7684\u3002 \u6b63\u786e\u6027\u4e5f\u6bd4\u8f83\u597d\u8bc1\u660e\uff0c\u6211\u5047\u8bbe\u6211\u8fd9\u4e2a\u9ad8\u4f4d\u53ef\u4ee5\u662f \\(1\\) \uff0c\u4f46\u662f\u4f1a\u5bfc\u81f4\u67d0\u4e2a\u4f4e\u4f4d\u53d8\u6210 \\(0\\) \uff0c\u6211\u663e\u7136\u662f\u4e0d\u7ba1\u4f4e\u4f4d\u76f4\u63a5\u8ba9\u9ad8\u4f4d\u4e3a \\(1\\) \uff0c\u5982\u679c\u8fd9\u4e2a\u9ad8\u4f4d\u600e\u4e48\u90fd\u6ca1\u529e\u6cd5\u662f \\(1\\) \uff0c\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u4e0d\u7ba1\uff0c\u6446\u70c2\u3002 \u505a\u6cd5\u5927\u6982\u5c31\u662f\u5bf9\u4e8e\u6bcf\u4e00\u4f4d\uff0c\u8981\u5224 \\(a\\) \u7684 0 \u7684\u4e2a\u6570\u662f\u5426\u548c \\(b\\) \u7684 1 \u7684\u4e2a\u6570\u4e00\u6837\u4e14 \\(a\\) \u7684 1 \u7684\u4e2a\u6570\u662f\u5426\u548c \\(b\\) \u7684 0 \u7684\u4e2a\u6570\u4e00\u6837\u3002 \u7136\u540e\u6211\u4eec\u4ece\u9ad8\u4f4d\u5f00\u59cb\uff0c\u76f4\u63a5\u628a\u8fd9\u4e2a\u5206\u7c7b\uff0c \\(a0, b1\\) \u5206\u4e00\u8d77\uff0c \\(a1,b0\\) \u5206\u4e00\u8d77\u3002 \u7136\u540e\u5728\u4f4e\u4f4d\u5224\u65ad\u662f\u5426\u53ef\u884c\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u4f4e\u4f4d\u5206\u4e00\u6b21\u7ec4\uff0c\u7136\u540e\u770b\u548c\u9ad8\u4f4d\u7684\u8981\u6c42\u662f\u5426\u4e00\u6837\uff0c\u4e0d\u884c\u5c31\u6446\u70c2\u3002 \u548c ARC146B \u6bd4\u8f83\u7c7b\u4f3c\uff0c\u6240\u4ee5\u5c31\u4e0d\u5199 ARC146B \u4e86\u3002 \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 // author : black_trees #include <map> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 1e5 + 100 ; const int inf = ( 1 << 30 ); int a [ si ], b [ si ]; std :: map < int , int > True , False ; #define is_true(val, bit) (val >> (bit - 1) & 1) int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { int n ; cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; for ( int i = 1 ; i <= n ; ++ i ) cin >> b [ i ]; int ans = 0 ; for ( int i = 30 ; i >= 1 ; -- i ) { True . clear (), False . clear (); int need = inf - ( 1 << ( i - 1 )); for ( int j = 1 ; j <= n ; ++ j ) { if ( is_true ( b [ j ], i )) True [ b [ j ] & need ^ need ] ++ ; else False [ b [ j ] & need ^ need ] ++ ; } bool ff = true ; for ( int j = 1 ; j <= n ; ++ j ) { if ( is_true ( a [ j ], i )) { if (( False [ a [ j ] & need ] -- ) < 1 ) ff = false ; } else { if (( True [ a [ j ] & need ] -- ) < 1 ) ff = false ; } } if ( ff ) ans += ( 1 << ( i - 1 )); else { for ( int j = 1 ; j <= n ; ++ j ) { if ( is_true ( b [ j ], i )) b [ j ] -= ( 1 << ( i - 1 )); if ( ! is_true ( a [ j ], i )) a [ j ] += ( 1 << ( i - 1 )); } } } cout << ans << endl ; } return 0 ; }","title":"CF1721D Maximum AND"},{"location":"rec/atcf-for-2022-07-08/#cf1720d1-xor-subsequence-easy-version","text":"\u7ed9\u4f60\u4e00\u4e2a\u957f\u4e3a \\(n\\) \u7684\u6574\u6570\u6570\u7ec4 \\(a\\) \uff0c\u4ece \\(0\\) \u5f00\u59cb\u7f16\u53f7\u3002 \u4e00\u4e2a\u957f\u4e3a \\(m\\) \uff0c\u4ece \\(0\\) \u5f00\u59cb\u7f16\u53f7\u7684\u6574\u6570\u6570\u7ec4 \\(b\\) \u662f\u6570\u7ec4 \\(a\\) \u7684 subsequence\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(0\\leq b_0<b_1<\\dots<b_{m-1}<n\\) \u3002 \u82e5 \\(b\\) \u662f \\(a\\) \u7684 beautiful subsequence\uff0c\u5f53\u4e14\u4ec5\u5f53\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a \\(b\\) \u662f \\(a\\) \u7684 subsequence\uff1b \\(\\forall p\\in[0,m)\\cap\\textbf{N},a_{b_p}\\oplus b_{p+1}<a_{b_{p+1}}\\oplus b_p\\) \u3002 \u5176\u4e2d \\(\\oplus\\) \u8868\u793a\u4f4d\u8fd0\u7b97\u4e2d\u7684\u5f02\u6216\u8fd0\u7b97\u3002 \u73b0\u5728\uff0c\u4f60\u9700\u8981\u6c42\u51fa\u6700\u957f\u7684 beautiful subsequence \u6709\u591a\u957f\u3002 \\(a_i \\le 200, n\\le 3e5\\) .. \u7ffb\u8bd1\u6765\u81ea \u6d1b\u8c37 \u8fd9\u9898\u91cc\u9762 b \u662f\u4e0b\u6807\uff0c\u795e\u5fc5\u51fa\u9898\u4eba\u5199\u90a3\u4e48\u590d\u6742\u5e72\u561b\u3002 \u5c31\u662f\u5148\u8003\u8651\u4e00\u4e2a\u7b80\u5355\u7684 DP\uff0c\u5b9a\u4e49 \\(dp(i)\\) \u8868\u793a \\([1,i]\\) \u7684\u6700\u957f\u597d\u5b50\u5e8f\u5217\u957f\u5ea6\u3002 \u53ef\u4ee5\u5f97\u5230 \\(O(n^2)\\) \u65b9\u7a0b\uff1a \\(dp(i) = \\max\\limits_{j = 0}^{i - 1} \\{dp(j) + 1\\} \\land a_{j}\\oplus i<a_i\\oplus j\\) \u3002 \u590d\u6742\u5ea6\u4e3b\u8981\u82b1\u5728\u679a\u4e3e \\(j\\) \u4e0a\u9762\uff0c\u8003\u8651\u7f29\u5c0f\u8f6c\u79fb\u72b6\u6001\u96c6\u5408\u3002 \u53d1\u73b0 \\(a_i \\le 200\\) \uff0c\u5728\u4e8c\u8fdb\u5236\u4e0b\u8003\u8651\uff0c \\(200 < 256\\) \uff0c\u6240\u4ee5 \\(a_i,a_j\\) \u53ea\u80fd\u5f71\u54cd\u6700\u4f4e\u7684 8 \u4f4d\u3002 \u5982\u679c \\(\\exists j \\le i - 256\\) \uff0c\u53ef\u4ee5\u53d1\u73b0 \\(j\\) \u600e\u4e48\u90fd\u8f6c\u79fb\u4e0d\u8fc7\u6765\uff0c\u56e0\u4e3a\u5f02\u6216\u662f\u4e0d\u8fdb\u4f4d\u52a0\u6cd5\uff0c\u5728\u8fd9\u91cc\u5f71\u54cd\u4e0d\u4e86\u7b2c \\(9\\) \u4f4d\u3002 \u5982\u679c \\(i - 256 \\ge j\\) \uff0c\u8bf4\u660e \\(j\\) \u76f4\u63a5\u5728\u7b2c\u4e5d\u4f4d\u6bd4 \\(i\\) \u5c11\u4e86\u4e00\u4e2a \\(1\\) \uff0c\u6b7b\u6d3b\u8865\u4e0d\u4e86\uff0c\u6240\u4ee5\u53ef\u4ee5\u53d1\u73b0\u5408\u6cd5\u7684\u8f6c\u79fb\u53ea\u80fd\u662f \\(j \\in (i - 256, i)\\) \u3002 \u7136\u540e dp \u5c31\u53d8\u6210 \\(O(256n)\\) \u4e86\u3002 \u8fd8\u6709\u4e00\u79cd\u505a\u6cd5\u662f\u8fd9\u6837\u7684\uff1a Another method \u7ed3\u8bba\uff1a \\(\\forall x, y \\in \\mathbb{N}, x - y, y - x < x \\oplus y < x + y\\) \u3002 \u539f\u56e0\u663e\u7136\uff0c\u53ea\u9700\u8981\u5728\u4e8c\u8fdb\u5236\u4e0b\u8003\u8651\u5373\u53ef\u3002 \u89c2\u5bdf\u9898\u76ee\u4e0d\u96be\u6839\u636e LIS \u6a21\u578b\u8bbe\u8ba1\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \u8bbe \\(dp(i)\\) \u8868\u793a\u8003\u8651\u5230\u7b2c \\(i\\) \u4e2a\u5143\u7d20\uff0c\u6700\u957f\u7684\u55b5-\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \\[dp(i) = \\max\\limits_{j = 1}^{i - 1} \\{dp(j) + 1\\} (\\text{if }a_j \\oplus i < a_i \\oplus j)\\] \u590d\u6742\u5ea6\u4e0a\u5929\uff0c\u4e0d\u80fd\u63a5\u53d7\u3002 \u6ce8\u610f\u5230 \\(a_i\\) \u7684\u503c\u57df\u5c0f\u7684\u79bb\u8c31\uff0c\u8003\u8651\u4ece\u8fd9\u91cc\u4f18\u5316\u3002 \u6839\u636e\u7ed3\u8bba\u4e0d\u96be\u60f3\u5230\uff1a \\(a_j \\oplus i < a_i \\oplus j \\iff i - a_j < j + a_i\\) \u53ef\u4ee5\u5f97\u5230 \\(i - j < a_i + a_j \\le 400 \\iff i - 400 \\le j\\) \u3002 \u6240\u4ee5 \\(j\\) \u53ea\u9700\u8981\u4ece \\(i - 400\\) \u5f00\u59cb\u679a\u4e3e\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(400n)\\) \u3002 \u672c\u9898\u4f18\u5316\u7684\u601d\u8def\u662f\u8003\u8651\u6839\u636e\u6027\u8d28\u4f18\u5316\u8f6c\u79fb\u6761\u4ef6\uff0c\u65b9\u5f0f\u662f\u72ec\u7acb & \u5408\u5e76\u53d8\u91cf\uff0c\u6bd4\u8f83\u65b0\u9896\u3002 \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int si = 3e5 + 10 ; i64 a [ si ], dp [ si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { int n ; cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; for ( int i = 1 ; i <= n ; ++ i ) dp [ i ] = 1l l ; i64 ans = -1ll ; for ( int i = 2 ; i <= n ; ++ i ) { int from = max ( i - 256 , 1 ); for ( int j = from ; j <= i - 1 ; ++ j ) if (( a [ i ] ^ ( 1l l * j - 1l l )) > ( a [ j ] ^ ( 1l l * i - 1l l ))) dp [ i ] = max ( dp [ j ] + 1l l , dp [ i ]); ans = max ( ans , dp [ i ]); } cout << ans << endl ; } return 0 ; }","title":"CF1720D1 Xor-Subsequence (easy version)"},{"location":"rec/atcf-for-2022-09-10/","text":"\u4e5d\u3001\u5341\u6708 CF \u4e22\u4eba\u505a\u9898\u8bb0\u5f55 \u03c8(\uff40\u2207\u00b4)\u03c8 ZJK \u7ed9\u7684\u5efa\u8bae\u662f\u591a\u60f3\uff0c\u4e5f\u8bb8\u4e4b\u540e\u4f1a\u4ece ARC104 \u5f00\u59cb\u5012\u7740\u505a\uff0c\u953b\u70bc\u601d\u7ef4\uff0c\u6216\u8005\u8bf4\u8ba9\u81ea\u5df1\u5e73\u590d\u5fc3\u6001\u591a\u53bb\u60f3\u3002 \u800c\u4e14 OI \u548c CF \u4e0d\u4e00\u6837\uff0cOI \u4e0d\u662f\u901f\u5ea6\u7ade\u8d5b\uff0c\u6240\u4ee5 OI \u548c CF \u7684\u7b56\u7565\u5f80\u5f80\u662f\u4e0d\u4e00\u81f4\u7684\uff0cCF \u8fd9\u79cd\u7d27\u5f20\u7684\u6c1b\u56f4\u5bb9\u6613\u8ba9\u4eba\u4e0d\u6e05\u9192\uff0c\u800c\u4e14 CF \u6ca1\u6709\u90e8\u5206\u5206\u3002 HFY \u8bf4\u53ef\u4ee5\u628a\u9898\u62ff\u51fa\u6765\uff0c\u5b9a 4h/3h \u76f4\u63a5\u5f53\u6a21\u62df\u8d5b\u505a\uff0c\u4e60\u60ef\u90a3\u79cd\u611f\u89c9\u4e5f\u9632\u6b62\u8d70\u795e\u3002 Edu1 - Vp \u03c8(\uff40\u2207\u00b4)\u03c8 CF598C - Nearest vectors \u03c8(\uff40\u2207\u00b4)\u03c8 \u6781\u89d2\u6392\u5e8f\u6a21\u677f\uff0c\u6c99\u5375\u5361\u7cbe\u5ea6\u9898\u3002 \u6682\u65f6\u5495\u6389\u4e86\u3002 Edu2 - Vp \u03c8(\uff40\u2207\u00b4)\u03c8 CF600E Lomsat gelral \u03c8(\uff40\u2207\u00b4)\u03c8 \u795e\u79d8\u7ebf\u6bb5\u6811\u5408\u5e76 / dsu on tree \u9898\u3002 \u6682\u65f6\u5495\u6389\u4e86\u3002 Global Round 23 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8bc4\u4ef7\u662f\u4e0b\u996d + \u5c0f\u4e11\u3002 \u60f3\u4e86\u5927\u534a\u5929 E1 \u4e0d\u4f1a\u3002 CF1746D Path on the Tree \u03c8(\uff40\u2207\u00b4)\u03c8 \u6709\u610f\u601d\u7684\u6811\u5f62 dp\u3002 \u6682\u65f6\u5495\u6389\u4e86\u3002 ABC274 \u03c8(\uff40\u2207\u00b4)\u03c8 D \u03c8(\uff40\u2207\u00b4)\u03c8 \u4f60\u5728\u5750\u6807\u7cfb\u7684\u539f\u70b9\uff0c\u4f60\u8981\u53bb \\((x,y)\\) \uff08\u6b63\u8d1f \\(1e4\\) \u7ea7\u522b\uff09\uff0c\u4f60\u6709 \\(n\\) \u6b21\u673a\u4f1a\u8d70\u683c\u5b50\u3002 \u7b2c \\(i\\) \u6b21\u8d70\u683c\u5b50\u5fc5\u987b\u8d70 \\(a_i\\) \u6b65\uff0c\u4e14\u548c\u4e0a\u4e00\u6b21\u8d70\u7684\u8def\u5f84\u5448 90\u00b0\u89d2\uff0c\u521d\u59cb\u5fc5\u987b\u5411\u53f3\u8d70 \\(a_1\\) \u6b65\u3002 \u95ee\u662f\u5426\u53ef\u80fd\u8d70\u5230 \\((x,y)\\) \u3002 \\(2\\le n \\le 10^3, 1\\le a_i \\le 10\\) \u9996\u5148\u6309\u5947\u5076\u6027\u5206\u7ec4\uff0c\u8fd9\u4e2a\u6bd4\u8f83\u663e\u7136\u3002 \u6240\u4ee5\u95ee\u9898\u4e3b\u8981\u5c31\u662f\u770b\u80fd\u5426\u7528 \\(+a_1, \u00b1a_3, \u00b1a_5\\) \u51d1\u51fa \\(x\\) \uff0c\u80fd\u5426\u7528 \\(\u00b1a_2,\u00b1a_4,\u00b1a_6\\) \u51d1\u51fa\u6765 \\(y\\) \u3002 \u8fd9\u4e2a\u5c31\u662f\u7ecf\u5178\u7684\u80cc\u5305\u6a21\u578b\u4e86\uff08\u786c\u5e01\u51d1\u6574\u7684\u95ee\u9898\uff09\uff0c\u4f46\u73b0\u5728\u7684\u4e3b\u8981\u95ee\u9898\u662f\u8d1f\u6570\u548b\u641e\u3002 \u53d1\u73b0\u5176\u5b9e\u53ef\u4ee5\u632a\u4e00\u4e0b\u4f4d\uff0c\u628a\u8d1f\u6570\u5f80\u524d\u632a\uff0c\u632a\u5230 \\(0 \\sim 1e4\\) \uff0c\u7136\u540e\u6b63\u6570\u632a\u5230 \\(1e4 \\sim 2e4\\) \u3002 \u7136\u540e\u5b9e\u73b0\u5e94\u8be5\u6bd4\u8f83\u7b80\u5355\uff0c Bool DP \u5373\u53ef\uff0c\u8fd9\u91cc\u7528\u5230\u4e86\u8d5b\u65f6\u7684\u4e00\u8840 tabr \u4ee3\u7801\u91cc\u7684\u4e00\u4e2a\u5c0f\u6280\u5de7\uff0c\u76f4\u63a5\u62ff bitset \u4f4d\u79fb\u505a dp\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 // author : black_trees #include <cmath> #include <bitset> #include <cstdio> #include <vector> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; using i64 = long long ; const int si = 1e4 + 10 ; int n , x , y , a [ si ]; std :: bitset < 20000 > dp ; std :: vector < int > b , c ; bool solve ( std :: vector < int > v , int target ) { dp . reset (); dp [ 10000 ] = true ; for ( auto i : v ) dp = ( dp << i ) | ( dp >> i ); return dp [ target + 10000 ]; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit bitor cin . badbit ); cin >> n >> x >> y ; for ( int i = 0 ; i < n ; ++ i ) cin >> a [ i ]; for ( int i = 1 ; i < n ; ++ i ) if ( i % 2 == 0 ) b . push_back ( a [ i ]); else c . push_back ( a [ i ]); x -= a [ 0 ], x = abs ( x ), y = abs ( y ); if ( solve ( b , x ) && solve ( c , y )) cout << \"Yes\" << endl ; else cout << \"No\" << endl ; return 0 ; } // thanks tabr : https://atcoder.jp/contests/abc274/submissions/35864370 E \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60\u4e00\u4e2a\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\uff0c\u5e73\u9762\u4e0a\u6709 \\(n\\) \u4e2a town \u548c \\(m\\) \u4e2a chest\uff0c\u5750\u6807\u5206\u522b\u4e3a \\((x_i,y_i),(p_i,q_i)\\) \uff08\u6b63\u8d1f \\(1e9\\) \u7ea7\u522b\u7684\u6574\u70b9\uff09\u3002 \u4f60\u5fc5\u987b\u8bbf\u95ee\u6240\u6709\u7684 \\(n\\) \u4e2atown\uff0c\u5e76\u56de\u5230\u4f60\u7684\u8d77\u70b9 \\(1\\) \u53f7 town\uff0c\u4f60\u4e0d\u5fc5\u8d70\u8fc7\u6240\u6709 chest\uff0c\u4f46\u662f\u6bcf\u4e2a chest \u91cc\u6709\u4e00\u4e2a\u52a0\u901f\u5668\uff0c\u62ff\u5230\u540e\u4f1a\u8ba9\u4f60\u7684\u901f\u5ea6\u4e58\u4e8c\uff0c\u4f60\u7684\u521d\u59cb\u901f\u5ea6\u662f \\(1\\) \uff0c\u8bf7\u95ee\u8d70\u5b8c\u5168\u7a0b\u7684\u6700\u77ed\u65f6\u95f4\u662f\u591a\u5c11\uff1f \\(1 \\le n \\le 12, 0 \\le m \\le 5\\) \uff0c\u6ca1\u6709 town \u548c chest \u5904\u4e8e\u539f\u70b9\u3002 \u677f\u677f\u72b6\u538b dp\uff0c\u8bbe \\(dp(msk,sta,i)\\) \u8868\u793a\u5f53\u524d town \u7684\u72b6\u6001\u4e3a \\(msk\\) \uff0cchest \u7684\u72b6\u6001\u4e3a \\(sta\\) \uff0c\u5f53\u524d\u6b63\u5728\u7b2c \\(i\\) \u4e2a\u70b9\uff08\u53ef\u80fd\u662f chest\uff0c\u4e5f\u53ef\u80fd\u662f town\uff09\u7684\u6700\u77ed\u65f6\u95f4\u3002 \u7136\u540e\u679a\u4e3e\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u4ece\u54ea\u91cc\u6765\u7684\uff0c\u6700\u540e\u518d\u5bf9\u6240\u6709\u5408\u6cd5\u72b6\u6001 \uff08 \\(msk = 2^n - 1\\) \uff09\u7b97\u4e00\u4e0b\u5b83\u5230\u539f\u70b9\u6b64\u65f6\u6240\u9700\u7684\u901f\u5ea6\uff0c\u53d6 min \u5373\u53ef\uff0c\u521d\u59cb\u5316 \\(dp(1,0,1) = 0\\) \uff0c\u5176\u4f59 \\(\\infty\\) \u3002 Code \u4e0d\u5199\u4e86\uff0c\u76f4\u63a5\u8d3a\u8d3a std\u3002 std 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include <stdio.h> #include <math.h> #define bit(x,i)(((x)>>(i))&1) double x [ 20 ], y [ 20 ]; double dp [ 17 ][ 1 << 17 ]; int main (){ int n , m ; scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i < n + m ; i ++ ) scanf ( \"%lf%lf\" , x + i , y + i ); for ( int i = 0 ; i < n + m ; i ++ ) for ( int s = 0 ; s < 1 << ( n + m ); s ++ ) dp [ i ][ s ] = 1e18 ; for ( int i = 0 ; i < n + m ; i ++ ) dp [ i ][ 1 << i ] = hypot ( x [ i ], y [ i ]); for ( int s = 1 ; s < 1 << ( n + m ); s ++ ){ double coef = pow ( 0.5 , __builtin_popcount ( s >> n )); for ( int i = 0 ; i < n + m ; i ++ ) if ( bit ( s , i )){ for ( int j = 0 ; j < n + m ; j ++ ) if ( ! bit ( s , j )){ dp [ j ][ s ^ ( 1 << j )] = fmin ( dp [ j ][ s ^ ( 1 << j )], dp [ i ][ s ] + hypot ( x [ i ] - x [ j ], y [ i ] - y [ j ]) * coef ); } } } double ans = 1e18 ; for ( int i = 0 ; i < n + m ; i ++ ) for ( int s = ( 1 << n ) -1 ; s < 1 << ( n + m ); s += 1 << n ) ans = fmin ( ans , dp [ i ][ s ] + hypot ( x [ i ], y [ i ]) * pow ( 0.5 , __builtin_popcount ( s >> n ))); printf ( \"%.10f \\n \" , ans ); } CF Round #829 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e0b\u5348\uff0c\u8fde\u7740\u4e24\u573a CF\uff0c\u5c0f\u6eaa\u4e86\u3002 \u6682\u65f6\u5495\u6389\u4e86\u3002 CF Round #830 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6ca1\u6253\uff0c\u6682\u65f6\u5495\u6389\u4e86\u3002","title":"2022\u5e749,10\u6708AT&CF"},{"location":"rec/atcf-for-2022-09-10/#cf","text":"ZJK \u7ed9\u7684\u5efa\u8bae\u662f\u591a\u60f3\uff0c\u4e5f\u8bb8\u4e4b\u540e\u4f1a\u4ece ARC104 \u5f00\u59cb\u5012\u7740\u505a\uff0c\u953b\u70bc\u601d\u7ef4\uff0c\u6216\u8005\u8bf4\u8ba9\u81ea\u5df1\u5e73\u590d\u5fc3\u6001\u591a\u53bb\u60f3\u3002 \u800c\u4e14 OI \u548c CF \u4e0d\u4e00\u6837\uff0cOI \u4e0d\u662f\u901f\u5ea6\u7ade\u8d5b\uff0c\u6240\u4ee5 OI \u548c CF \u7684\u7b56\u7565\u5f80\u5f80\u662f\u4e0d\u4e00\u81f4\u7684\uff0cCF \u8fd9\u79cd\u7d27\u5f20\u7684\u6c1b\u56f4\u5bb9\u6613\u8ba9\u4eba\u4e0d\u6e05\u9192\uff0c\u800c\u4e14 CF \u6ca1\u6709\u90e8\u5206\u5206\u3002 HFY \u8bf4\u53ef\u4ee5\u628a\u9898\u62ff\u51fa\u6765\uff0c\u5b9a 4h/3h \u76f4\u63a5\u5f53\u6a21\u62df\u8d5b\u505a\uff0c\u4e60\u60ef\u90a3\u79cd\u611f\u89c9\u4e5f\u9632\u6b62\u8d70\u795e\u3002","title":"\u4e5d\u3001\u5341\u6708 CF \u4e22\u4eba\u505a\u9898\u8bb0\u5f55"},{"location":"rec/atcf-for-2022-09-10/#edu1-vp","text":"","title":"Edu1 - Vp"},{"location":"rec/atcf-for-2022-09-10/#cf598c-nearest-vectors","text":"\u6781\u89d2\u6392\u5e8f\u6a21\u677f\uff0c\u6c99\u5375\u5361\u7cbe\u5ea6\u9898\u3002 \u6682\u65f6\u5495\u6389\u4e86\u3002","title":"CF598C - Nearest vectors"},{"location":"rec/atcf-for-2022-09-10/#edu2-vp","text":"","title":"Edu2 - Vp"},{"location":"rec/atcf-for-2022-09-10/#cf600e-lomsat-gelral","text":"\u795e\u79d8\u7ebf\u6bb5\u6811\u5408\u5e76 / dsu on tree \u9898\u3002 \u6682\u65f6\u5495\u6389\u4e86\u3002","title":"CF600E Lomsat gelral"},{"location":"rec/atcf-for-2022-09-10/#global-round-23","text":"\u8bc4\u4ef7\u662f\u4e0b\u996d + \u5c0f\u4e11\u3002 \u60f3\u4e86\u5927\u534a\u5929 E1 \u4e0d\u4f1a\u3002","title":"Global Round 23"},{"location":"rec/atcf-for-2022-09-10/#cf1746d-path-on-the-tree","text":"\u6709\u610f\u601d\u7684\u6811\u5f62 dp\u3002 \u6682\u65f6\u5495\u6389\u4e86\u3002","title":"CF1746D Path on the Tree"},{"location":"rec/atcf-for-2022-09-10/#abc274","text":"","title":"ABC274"},{"location":"rec/atcf-for-2022-09-10/#d","text":"\u4f60\u5728\u5750\u6807\u7cfb\u7684\u539f\u70b9\uff0c\u4f60\u8981\u53bb \\((x,y)\\) \uff08\u6b63\u8d1f \\(1e4\\) \u7ea7\u522b\uff09\uff0c\u4f60\u6709 \\(n\\) \u6b21\u673a\u4f1a\u8d70\u683c\u5b50\u3002 \u7b2c \\(i\\) \u6b21\u8d70\u683c\u5b50\u5fc5\u987b\u8d70 \\(a_i\\) \u6b65\uff0c\u4e14\u548c\u4e0a\u4e00\u6b21\u8d70\u7684\u8def\u5f84\u5448 90\u00b0\u89d2\uff0c\u521d\u59cb\u5fc5\u987b\u5411\u53f3\u8d70 \\(a_1\\) \u6b65\u3002 \u95ee\u662f\u5426\u53ef\u80fd\u8d70\u5230 \\((x,y)\\) \u3002 \\(2\\le n \\le 10^3, 1\\le a_i \\le 10\\) \u9996\u5148\u6309\u5947\u5076\u6027\u5206\u7ec4\uff0c\u8fd9\u4e2a\u6bd4\u8f83\u663e\u7136\u3002 \u6240\u4ee5\u95ee\u9898\u4e3b\u8981\u5c31\u662f\u770b\u80fd\u5426\u7528 \\(+a_1, \u00b1a_3, \u00b1a_5\\) \u51d1\u51fa \\(x\\) \uff0c\u80fd\u5426\u7528 \\(\u00b1a_2,\u00b1a_4,\u00b1a_6\\) \u51d1\u51fa\u6765 \\(y\\) \u3002 \u8fd9\u4e2a\u5c31\u662f\u7ecf\u5178\u7684\u80cc\u5305\u6a21\u578b\u4e86\uff08\u786c\u5e01\u51d1\u6574\u7684\u95ee\u9898\uff09\uff0c\u4f46\u73b0\u5728\u7684\u4e3b\u8981\u95ee\u9898\u662f\u8d1f\u6570\u548b\u641e\u3002 \u53d1\u73b0\u5176\u5b9e\u53ef\u4ee5\u632a\u4e00\u4e0b\u4f4d\uff0c\u628a\u8d1f\u6570\u5f80\u524d\u632a\uff0c\u632a\u5230 \\(0 \\sim 1e4\\) \uff0c\u7136\u540e\u6b63\u6570\u632a\u5230 \\(1e4 \\sim 2e4\\) \u3002 \u7136\u540e\u5b9e\u73b0\u5e94\u8be5\u6bd4\u8f83\u7b80\u5355\uff0c Bool DP \u5373\u53ef\uff0c\u8fd9\u91cc\u7528\u5230\u4e86\u8d5b\u65f6\u7684\u4e00\u8840 tabr \u4ee3\u7801\u91cc\u7684\u4e00\u4e2a\u5c0f\u6280\u5de7\uff0c\u76f4\u63a5\u62ff bitset \u4f4d\u79fb\u505a dp\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 // author : black_trees #include <cmath> #include <bitset> #include <cstdio> #include <vector> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; using i64 = long long ; const int si = 1e4 + 10 ; int n , x , y , a [ si ]; std :: bitset < 20000 > dp ; std :: vector < int > b , c ; bool solve ( std :: vector < int > v , int target ) { dp . reset (); dp [ 10000 ] = true ; for ( auto i : v ) dp = ( dp << i ) | ( dp >> i ); return dp [ target + 10000 ]; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit bitor cin . badbit ); cin >> n >> x >> y ; for ( int i = 0 ; i < n ; ++ i ) cin >> a [ i ]; for ( int i = 1 ; i < n ; ++ i ) if ( i % 2 == 0 ) b . push_back ( a [ i ]); else c . push_back ( a [ i ]); x -= a [ 0 ], x = abs ( x ), y = abs ( y ); if ( solve ( b , x ) && solve ( c , y )) cout << \"Yes\" << endl ; else cout << \"No\" << endl ; return 0 ; } // thanks tabr : https://atcoder.jp/contests/abc274/submissions/35864370","title":"D"},{"location":"rec/atcf-for-2022-09-10/#e","text":"\u7ed9\u4f60\u4e00\u4e2a\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\uff0c\u5e73\u9762\u4e0a\u6709 \\(n\\) \u4e2a town \u548c \\(m\\) \u4e2a chest\uff0c\u5750\u6807\u5206\u522b\u4e3a \\((x_i,y_i),(p_i,q_i)\\) \uff08\u6b63\u8d1f \\(1e9\\) \u7ea7\u522b\u7684\u6574\u70b9\uff09\u3002 \u4f60\u5fc5\u987b\u8bbf\u95ee\u6240\u6709\u7684 \\(n\\) \u4e2atown\uff0c\u5e76\u56de\u5230\u4f60\u7684\u8d77\u70b9 \\(1\\) \u53f7 town\uff0c\u4f60\u4e0d\u5fc5\u8d70\u8fc7\u6240\u6709 chest\uff0c\u4f46\u662f\u6bcf\u4e2a chest \u91cc\u6709\u4e00\u4e2a\u52a0\u901f\u5668\uff0c\u62ff\u5230\u540e\u4f1a\u8ba9\u4f60\u7684\u901f\u5ea6\u4e58\u4e8c\uff0c\u4f60\u7684\u521d\u59cb\u901f\u5ea6\u662f \\(1\\) \uff0c\u8bf7\u95ee\u8d70\u5b8c\u5168\u7a0b\u7684\u6700\u77ed\u65f6\u95f4\u662f\u591a\u5c11\uff1f \\(1 \\le n \\le 12, 0 \\le m \\le 5\\) \uff0c\u6ca1\u6709 town \u548c chest \u5904\u4e8e\u539f\u70b9\u3002 \u677f\u677f\u72b6\u538b dp\uff0c\u8bbe \\(dp(msk,sta,i)\\) \u8868\u793a\u5f53\u524d town \u7684\u72b6\u6001\u4e3a \\(msk\\) \uff0cchest \u7684\u72b6\u6001\u4e3a \\(sta\\) \uff0c\u5f53\u524d\u6b63\u5728\u7b2c \\(i\\) \u4e2a\u70b9\uff08\u53ef\u80fd\u662f chest\uff0c\u4e5f\u53ef\u80fd\u662f town\uff09\u7684\u6700\u77ed\u65f6\u95f4\u3002 \u7136\u540e\u679a\u4e3e\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u4ece\u54ea\u91cc\u6765\u7684\uff0c\u6700\u540e\u518d\u5bf9\u6240\u6709\u5408\u6cd5\u72b6\u6001 \uff08 \\(msk = 2^n - 1\\) \uff09\u7b97\u4e00\u4e0b\u5b83\u5230\u539f\u70b9\u6b64\u65f6\u6240\u9700\u7684\u901f\u5ea6\uff0c\u53d6 min \u5373\u53ef\uff0c\u521d\u59cb\u5316 \\(dp(1,0,1) = 0\\) \uff0c\u5176\u4f59 \\(\\infty\\) \u3002 Code \u4e0d\u5199\u4e86\uff0c\u76f4\u63a5\u8d3a\u8d3a std\u3002 std 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include <stdio.h> #include <math.h> #define bit(x,i)(((x)>>(i))&1) double x [ 20 ], y [ 20 ]; double dp [ 17 ][ 1 << 17 ]; int main (){ int n , m ; scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i < n + m ; i ++ ) scanf ( \"%lf%lf\" , x + i , y + i ); for ( int i = 0 ; i < n + m ; i ++ ) for ( int s = 0 ; s < 1 << ( n + m ); s ++ ) dp [ i ][ s ] = 1e18 ; for ( int i = 0 ; i < n + m ; i ++ ) dp [ i ][ 1 << i ] = hypot ( x [ i ], y [ i ]); for ( int s = 1 ; s < 1 << ( n + m ); s ++ ){ double coef = pow ( 0.5 , __builtin_popcount ( s >> n )); for ( int i = 0 ; i < n + m ; i ++ ) if ( bit ( s , i )){ for ( int j = 0 ; j < n + m ; j ++ ) if ( ! bit ( s , j )){ dp [ j ][ s ^ ( 1 << j )] = fmin ( dp [ j ][ s ^ ( 1 << j )], dp [ i ][ s ] + hypot ( x [ i ] - x [ j ], y [ i ] - y [ j ]) * coef ); } } } double ans = 1e18 ; for ( int i = 0 ; i < n + m ; i ++ ) for ( int s = ( 1 << n ) -1 ; s < 1 << ( n + m ); s += 1 << n ) ans = fmin ( ans , dp [ i ][ s ] + hypot ( x [ i ], y [ i ]) * pow ( 0.5 , __builtin_popcount ( s >> n ))); printf ( \"%.10f \\n \" , ans ); }","title":"E"},{"location":"rec/atcf-for-2022-09-10/#cf-round-829","text":"\u4e0b\u5348\uff0c\u8fde\u7740\u4e24\u573a CF\uff0c\u5c0f\u6eaa\u4e86\u3002 \u6682\u65f6\u5495\u6389\u4e86\u3002","title":"CF Round #829"},{"location":"rec/atcf-for-2022-09-10/#cf-round-830","text":"\u6ca1\u6253\uff0c\u6682\u65f6\u5495\u6389\u4e86\u3002","title":"CF Round #830"},{"location":"rec/atcf-for-2022-11-12/","text":"\u5341\u4e00 & \u5341\u4e8c\u6708 CF AT \u4e22\u4eba\u505a\u9898\u8bb0\u5f55 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5927\u90e8\u5206\u7ffb\u8bd1\u6765\u81ea\u6d1b\u8c37\u3002 ABC277E - Crystal Switches \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60\u4e00\u5f20\u7b80\u5355\u65e0\u5411\u56fe\uff0c\u6bcf\u4e2a\u8fb9 \\((u_i, v_i)\\) \u6709\u4e00\u4e2a\u5c5e\u6027 \\(a_i\\) \u3002 \u5176\u4e2d\u5982\u679c \\(a_i\\) \u4e3a \\(1\\) \u8868\u793a\u8fd9\u6761\u8fb9\u662f\u53ef\u4ee5\u901a\u884c\u7684\uff0c\u5426\u5219\u662f\u4e0d\u53ef\u901a\u884c\u7684\u3002 \u6709 \\(K\\) \u4e2a\u7279\u6b8a\u70b9\uff0c\u5982\u679c\u4f60\u5904\u4e8e\u8fd9\u4e2a\u7279\u6b8a\u70b9\uff0c\u4f60\u53ef\u4ee5\u8fdb\u884c\u4e00\u6b21\u8f6c\u6362\uff0c\u4f7f\u5f97\u6240\u6709\u7684 \\(a_i\\) \u53d6\u53cd\u3002 \u95ee\u4f60\u4ece \\(1 \\to n\\) \u7684\u6700\u77ed\u8def\uff08\u65e0\u89e3\u5219\u7b54\u6848\u4e3a -1 \uff09\u3002 \\(2\\le n \\le 2e5, 1\\le m \\le 1e5, 0\\le K \\le n\\) \u3002 \u5443\u5443\uff0c\u611f\u89c9\u662f\u6bd4\u8f83\u677f\u5b50\u7684\u5206\u5c42\u56fe\u6700\u77ed\u8def\u3002 \u5c31\u662f\u4f60\u770b\u5230\u6709\u4e00\u4e9b\u8fb9\u8981\u5728\u7279\u6b8a\u60c5\u51b5\u4e0b\u624d\u80fd\u901a\u884c\u6216\u8005\u8fd9\u4e9b\u8fb9\u7684\u8fb9\u6743\u4f1a\u6539\u53d8\u4e4b\u7c7b\u7684\u65f6\u5019\uff0c\u5c31\u8003\u8651\u628a\u8fb9\u5206\u7c7b\u3002 \u5e76\u4e14\u62c6\u70b9\uff0c\u628a\u56fe\u5206\u6210\u591a\u5c42\uff0c\u5982\u679c\u9047\u5230\u53ef\u4ee5\u8fdb\u884c\u4e0d\u540c\u5c42\u8f6c\u79fb\u7684\u8282\u70b9\uff08\u6bd4\u5982\u672c\u9898\u4e2d\u7684\u7279\u6b8a\u70b9\uff09\uff0c\u5c31\u5728\u4e0d\u540c\u5c42\u4e4b\u95f4\u8fde\u8fb9\uff08\u8fd9\u6761\u8fb9\u7684\u4ee3\u4ef7\u53d6\u51b3\u4e8e\u5728\u5c42\u4e4b\u95f4\u8f6c\u79fb\u7684\u4ee3\u4ef7\uff09\u3002 \u4e4b\u540e\u95ee\u9898\u5c31\u53ef\u4ee5\u8f6c\u5316\u6210\u666e\u901a\u7684\u6700\u77ed\u8def\u95ee\u9898\u4e86\u3002 \u5bf9\u5e94\u5230\u8fd9\u9053\u9898\u4e0a\u5c31\u662f\u8003\u8651\u628a 0/1 \u72b6\u6001\u7684\u8fb9\u5206\u5f00\u8fde\uff0c\u540c\u5c42\u8fb9\u7684\u8fb9\u6743\u8bbe\u7f6e\u4e3a \\(1\\) \uff0c\u56e0\u4e3a\u6211\u4eec\u8f6c\u6362\u4e00\u6b21\u4e0d\u8017\u8d39\u4efb\u4f55\u4ee3\u4ef7\uff0c\u6240\u4ee5\u4e0d\u540c\u5c42\u4e4b\u95f4\u7684\u8fb9\u7684\u8fb9\u6743\u662f \\(0\\) \u3002 \u7c7b\u4f3c\u8fd9\u6837\uff1a \u7136\u540e\u8fde\u5b8c\u8fb9\u76f4\u63a5\u6c42\u6700\u77ed\u8def\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 // author : black_trees #include <cmath> #include <queue> #include <cstdio> #include <utility> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int n , m ; int tot = 0 , head [ si << 1 ]; struct Edge { int ver , Next , w ; } e [ si << 2 ]; inline void add ( int u , int v , int w ) { e [ tot ] = ( Edge ){ v , head [ u ], w }, head [ u ] = tot ++ ; } std :: priority_queue < std :: pair < int , int > > q ; bool vis [ si << 1 ]; int dis [ si << 1 ]; void dijkstra ( int s ) { memset ( vis , false , sizeof vis ), memset ( dis , 0x3f , sizeof dis ); dis [ s ] = 0 , q . push ({ dis [ s ], s }); while ( ! q . empty ()) { int u = q . top (). second ; q . pop (); if ( vis [ u ]) continue ; vis [ u ] = true ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( dis [ v ] > dis [ u ] + w ) dis [ v ] = dis [ u ] + w , q . push ({ - dis [ v ], v }); } } } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); memset ( head , -1 , sizeof head ); int K ; cin >> n >> m >> K ; for ( int i = 1 ; i <= m ; ++ i ) { int u , v , w ; cin >> u >> v >> w ; if ( w == 0 ) add ( u + n , v + n , 1 ), add ( v + n , u + n , 1 ); if ( w == 1 ) add ( u , v , 1 ), add ( v , u , 1 ); } for ( int i = 1 ; i <= K ; ++ i ) { int gt ; cin >> gt ; add ( gt , gt + n , 0 ), add ( gt + n , gt , 0 ); } dijkstra ( 1 ); int ans = min ( dis [ n ], dis [ n + n ]); if ( ans < 0x3f3f3f3f ) cout << ans << endl ; else cout << \"-1\" << endl ; return 0 ; } ABC279D - Freefall \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e24\u4e2a\u6570 \\(a\\) \uff0c \\(b\\) \uff08 \\(1 \\le a, b \\le 10^{18}\\) \uff09\uff0c\u6c42\u51fa \\(\\min\\limits_{g = 1}^\\infty\\{b \\times (g - 1) + \\frac{a}{\\sqrt{g}}\\}\\) \u3002\u7cbe\u5ea6\u8bef\u5dee\u4e0d\u8d85\u8fc7 \\(10^{-6}\\) \u3002 translated by @ liangbowen \u3002 \u8bbe\u64cd\u4f5c\u6b21\u6570\u4e3a \\(x\\) \uff0c\u5219\u603b\u65f6\u95f4\u4e3a \\(T(x) = \\dfrac{A}{1+x} + Bx\\) \u3002 \u6839\u636e\u521d\u7b49\u51fd\u6570\u6c42\u5bfc\u6cd5\u5219\u5bf9 \\(T(x)\\) \u6c42\u5bfc\u5f97\uff1a \\(T^{\\prime}(x) = B - \\dfrac{A}{2(x+1)^{\\frac{3}{2}}}\\) \u3002 \u4ee4 \\(T^\\prime(x) = 0 \\Rightarrow x = (\\dfrac{A}{2B})^{\\frac{2}{3}} - 1\\) \u3002 \u56e0\u4e3a \\(x \\in \\mathbb{N+}\\) \uff0c\u6240\u4ee5 \\(x = \\text{round}((\\dfrac{A}{2B})^{\\frac{2}{3}} - 1)\\) \u3002 \u6ce8\u610f\u5230 \\(A, B\\) \u4e0a\u754c\u4e3a \\(10^{18}\\) \uff0c\u6240\u4ee5\u8981\u62c6\u5f00\u7b97\u3002 \u5f97\u5230 \\(x\\) \u7684\u503c\u4e4b\u540e\u5e26\u5165 \\(T(x)\\) \u5373\u53ef\u5f97\u5230\u7b54\u6848\u3002 \u4e0d\u8fc7\u8fd9\u79cd\u51fd\u6570\u6c42\u6700\u503c\u7684\u5bb9\u6613\u51fa\u8bef\u5dee\uff0c\u4e0d\u7136\u5c31\u4e8c\u5206\uff0c\u4e0d\u7136\u5c31\u5728\u6781\u503c\u70b9\u9644\u8fd1\u591a\u53d6\u51e0\u4e2a\u70b9\u6c42 \\(\\min\\) \uff0c\u4e0d\u7136\u96be\u9876\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iomanip> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; using ldb = long double ; const ldb alpha = ( 1.0 / 3.0 ); int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); ldb a , b ; cin >> a >> b , b *= 2.0 ; ldb x = round ((( pow ( a , alpha ) * pow ( a , alpha )) / ( pow ( b , alpha ) * pow ( b , alpha ))) - 1.0 ); if ( x < 0 ) x = 0 ; ldb ans = 1e18 + 7 ; for ( ldb i = max (( ldb ) 0.0 , x - 10.0 ); i <= min (( ldb ) 1e18 + 7.0 , x + 10.0 ); i += 1.0 ) ans = min ( ans , ( b / 2.0 ) * i + ( a / sqrt ( i + 1.0 ))); cout << fixed << setprecision ( 10 ) << ans << endl ; return 0 ; } ABC279E - Cheating Amidakuji \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60\u4e24\u4e2a\u6570\u7ec4 \\(A\\) \u548c \\(B\\) \uff0c\u521d\u59cb\u65f6\uff0c \\(B_i=i\\) \u3002 \u5b9a\u4e49\u7b2c \\(k\\) \u6b21\u64cd\u4f5c\u4e3a \\(\\operatorname{swap}(B_{A_k},B_{A_k+1})\\) \u5b9a\u4e49 \\(S_i\\) \u4e3a\u4f9d\u6b21\u8fdb\u884c \\(1\\) \u5230 \\(m\\) \u9664 \\(i\\) \u53f7\u64cd\u4f5c\u5916\u7684\u6240\u6709\u64cd\u4f5c\u540e\uff0c\u6570\u5b57 \\(1\\) \u5728 \\(B\\) \u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\u3002 \u8bf7\u4f9d\u6b21\u8f93\u51fa \\(S_i\\) \u3002 \u6ce8\u610f\u5230\u6709\u4e9b\u64cd\u4f5c\u662f\u4e0d\u4f1a\u5f71\u54cd \\(1\\) \u7684\u4f4d\u7f6e\u7684\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5173\u5fc3 \\(1\\) \u7684\u4f4d\u7f6e\u3002 \u53ef\u4ee5\u5148\u8bb0\u5f55\u76f4\u63a5\u8fdb\u884c\u6240\u6709\u64cd\u4f5c\u4e4b\u540e\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e \\(p\\) \u3002 \u6ce8\u610f\u5230 \\(ans_i\\) \u662f\u8868\u793a\u4e0d\u8fdb\u884c\u64cd\u4f5c \\(i\\) \u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u53ef\u4ee5\u5148\u505a \\(1 \\sim i\\) \uff0c\u7136\u540e\u770b\u4e00\u4e0b\u5f53\u524d\u4ea4\u6362\u7684\u4e24\u4e2a\u5143\u7d20 \\(b(a(i)), b(a(i) + 1)\\) \u54ea\u4e2a\u662f \\(1\\) \uff0c\u5982\u679c \\(b(a(i))\\) \u662f \\(1\\) \uff0c\u7b54\u6848\u5c31\u662f \\(p(b(a(i) + 1))\\) \uff0c\u53cd\u4e4b\u4ea6\u7136\uff0c\u5982\u679c\u90fd\u4e0d\u662f \\(1\\) \u8bc1\u660e\u4ed6\u4eec\u5bf9\u7b54\u6848\u6ca1\u6709\u5f71\u54cd\uff0c\u7b54\u6848\u662f \\(p(1)\\) \u3002 \u590d\u6742\u5ea6 \\(O(n)\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int n , m ; int a [ si ], b [ si ], p [ si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> m ; for ( int i = 1 ; i <= m ; ++ i ) cin >> a [ i ]; for ( int i = 1 ; i <= n ; ++ i ) b [ i ] = i ; for ( int i = 1 ; i <= m ; ++ i ) swap ( b [ a [ i ]], b [ a [ i ] + 1 ]); for ( int i = 1 ; i <= n ; ++ i ) p [ b [ i ]] = i , b [ i ] = i ; for ( int i = 1 ; i <= m ; ++ i ) { if ( b [ a [ i ]] == 1 ) cout << p [ b [ a [ i ] + 1 ]] << endl ; else if ( b [ a [ i ] + 1 ] == 1 ) cout << p [ b [ a [ i ]]] << endl ; else cout << p [ 1 ] << endl ; swap ( b [ a [ i ]], b [ a [ i ] + 1 ]); } return 0 ; } ABC279F - BOX \u03c8(\uff40\u2207\u00b4)\u03c8 \u6709 \\(N\\) \u4e2a\u7bb1\u5b50\u548c\u65e0\u6570\u4e2a\u7f16\u53f7\u4ece \\(1\\) \u5f00\u59cb\u7684\u7403\uff0c\u7b2c \\(i\\) \u4e2a\u7bb1\u5b50\u5f00\u59cb\u65f6\u53ea\u88c5\u4e86\u7f16\u53f7\u4e3a \\(i\\) \u7684\u7403\u3002 \u6709 \\(Q\\) \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5206\u522b\u53ef\u80fd\u4e3a\uff1a 1 X Y \u5c06 \\(Y\\) \u7bb1\u4e2d\u7684\u7403\u5168\u90e8\u653e\u5165 \\(X\\) \u7bb1\u3002 2 X \u5c06\u76ee\u524d\u6700\u5c0f\u7684\u672a\u88ab\u653e\u5230\u7bb1\u5b50\u91cc\u7684\u7403\u653e\u5230 \\(X\\) \u7bb1\u3002 3 X \u67e5\u8be2 \\(X\\) \u7403\u5728\u54ea\u4e2a\u7bb1\u5b50\u4e2d\uff0c\u8f93\u51fa\u8be5\u7bb1\u7f16\u53f7\uff0c\u8f93\u51fa\u95f4\u7528\u6362\u884c\u9694\u5f00\u3002 \u9996\u5148\u8fd9\u4e2a \\(10^{100}\\) \u4e00\u770b\u5c31\u662f\u5413\u4eba\u7684\uff0c\u6ce8\u610f\u5230 \\(n, q \\le 3e5\\) \uff0c\u6240\u4ee5\u6bcf\u4e2a\u76d2\u5b50\u91cc\u7684\u7403\u6570\u80af\u5b9a\u4e0d\u8d85\u8fc7 \\(3e5\\) \uff0c\u5e76\u4e14\u76d2\u5b50\u662f\u4e0d\u4f1a\u65b0\u4ea7\u751f\u7684\uff0c\u6240\u4ee5\u79bb\u6563\u5316\u4e5f\u4e0d\u9700\u8981\u3002 \u4f46\u662f\u6ce8\u610f\u5230\u96c6\u5408\u548c\u5c0f\u7403\u5404\u81ea\u662f\u6709\u7f16\u53f7\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u9700\u8981\u5206\u5f00\u5904\u7406\uff0c\u8fd9\u4e2a\u5c31\u7528\u4e00\u4e2a map \u6807\u8bb0\u4e00\u4e0b\u5c31\u884c\u4e86\uff08\u4e3a\u4ec0\u4e48\u4e0d\u662f bool array \u5728\u4e0b\u9762\u80fd\u5f97\u5230\u89e3\u91ca\uff09\u3002 \u9996\u5148\u770b\u64cd\u4f5c \\(1\\) \uff0c\u628a\u4e00\u4e2a\u76d2\u5b50\u7684\u7403\u653e\u5230\u53e6\u5916\u4e00\u4e2a\u91cc\u9762\u3002 \u6ce8\u610f\u8fd9\u4e0d\u662f\u7b80\u5355\u7684 Merge\uff0c\u800c\u662f Merge \u5b8c\u4e86\u4e4b\u540e\u8fd8\u8981\u6e05\u7a7a\u3002 \u4f46\u662f\u5982\u679c\u6211\u4eec\u76f4\u63a5 Merge \u8fc7\u53bb\uff0c \\(y\\) \u4e0b\u9762\u6302\u7740\u90a3\u4e48\u591a\u8282\u70b9\uff0c\u800c\u4e14\u4e5f\u4e0d\u80fd\u76f4\u63a5\u53cd\u5411\u8bbf\u95ee\u5230\uff0c\u80af\u5b9a\u4f1a\u6709\u95ee\u9898\u3002 \u8fd9\u65f6\u5019\u6709\u4e00\u4e2a\u65b0\u5947\u7684\u60f3\u6cd5\uff0c\u6211\u4eec\u8003\u8651\u7ed9 \\(y\\) \u5efa\u4e00\u4e2a\u526f\u672c\u6765\u4ee3\u66ff \\(y\\) \u8fd9\u4e2a\u76d2\u5b50\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u76f4\u63a5\u628a\u539f\u6765\u7684 \\(y\\) Merge \u5230 \\(x\\) \u91cc\u9762\uff0c\u5e76\u4e14\u8fd9\u4e2a \\(y\\) \u81ea\u5df1\u672c\u8eab\u4e0d\u7b97 \\(size\\) \uff0c\u90a3\u5b9e\u73b0\u7684\u65f6\u5019\u5c31\u9700\u8981\u79bb\u6563\u5316\u4e86\u3002 \u5177\u4f53\u65b9\u5f0f\u662f\uff0c\u628a\u539f\u6765\u7684\u96c6\u5408\u76f4\u63a5 Merge \u8fc7\u53bb\uff0c\u8bb0\u5f55\u5b83\u4e0d\u518d\u662f\u4e00\u4e2a\u76d2\u5b50\uff0c\u800c\u662f\u4e00\u4e2a\u4e2d\u8f6c\u8282\u70b9\u4e14\u4e0d\u5360 \\(size\\) \uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u76d2\u5b50\u7684\u7f16\u53f7\u6620\u5c04\u5230\u4e00\u4e2a\u65b0\u7684\u526f\u672c\u4e0a\u9762\uff0c\u521d\u59cb\u5316\u8fd9\u4e2a\u526f\u672c\u7684\u4fe1\u606f\uff0c\u5e76\u4e14\u4e0d\u7b97 \\(size\\) \u3002 \u7136\u540e\u53d1\u73b0\u64cd\u4f5c \\(2\\) \u672c\u8d28\u662f\u7c7b\u4f3c\u7684\uff0c\u53ea\u4e0d\u8fc7\u6211\u4eec\u73b0\u5728\u662f\u4fdd\u7559\u8fd9\u4e2a\u8282\u70b9\uff0c\u65b0\u5f00\u4e00\u4e2a\u526f\u672c Add \u5230\u76d2\u5b50\u91cc\u9762\u53bb\uff0c\u4e14\u8fd9\u4e2a\u526f\u672c\u4e0d\u7b97 \\(size\\) \uff0c\u5e76\u628a\u539f\u6765\u8282\u70b9\u6240\u5728\u96c6\u5408 \\(size\\) \u51cf\u4e00\u3002 \u64cd\u4f5c \\(3\\) \u5c31\u662f\u7b80\u5355\u7684\u8be2\u95ee\u3002 \u5b8c\u86cb\uff0c\u8bfb\u9519\u9898\u4e86\uff0c\u6211\u4ee5\u4e3a\u64cd\u4f5c\u4e8c\u662f\u8003\u8651\u5f53\u524d\u76d2\u5b50\u6709\u591a\u5c11\u4e2a\u3002 \u7eaf\u7eaf\u50bb\u903c\u554a\uff0c\u4f46\u662f\u611f\u89c9\u8fd9\u4e2a\u9898\u53ef\u4ee5\u51fa\u51fa\u6765\u6254\u7ed9\u666e\u53ca\u7ec4\u5c0f\u670b\u53cb\u7ec3\u4e60\u3002 \u4f46\u662f\u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\u9650\u5236\u611f\u89c9\u4e5f\u5dee\u4e0d\u591a\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 3e5 + 10 ; int n , m , q ; int raw [ si << 2 ], val [ si << 2 ], pa [ si << 2 ], b [ si << 2 ]; int root ( int x ) { if ( pa [ x ] != x ) return pa [ x ] = root ( pa [ x ]); return pa [ x ]; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> q , m = n ; for ( int i = 1 ; i <= n ; ++ i ) pa [ i ] = raw [ i ] = val [ i ] = b [ i ] = i ; int tot = n ; for ( int i = 1 ; i <= q ; ++ i ) { int opt , x , y ; cin >> opt ; if ( opt == 3 ) cin >> x , cout << raw [ root ( b [ x ])] << endl ; if ( opt == 1 ) cin >> x >> y , pa [ val [ y ]] = pa [ val [ x ]], val [ y ] = ++ m , raw [ m ] = y , pa [ m ] = m ; if ( opt == 2 ) cin >> x , b [ ++ tot ] = val [ x ]; } return 0 ; } // ()()()(? /* // author : black_trees #include <map> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std; using i64 = long long; const int si = 3e5 + 10; int n, m, q; int raw[si << 2], val[si << 2]; std::map<int, bool> is_box; int pa[si << 2], siz[si << 2]; int root(int x) { if(pa[x] != x) pa[x] = root(pa[x]); return pa[x]; } void Merge(int x, int y) { int rx = root(x), ry = root(y); if(rx == ry) return; pa[ry] = rx, siz[rx] += siz[ry]; } int main() { cin.tie(0) -> sync_with_stdio(false); cin.exceptions(cin.failbit | cin.badbit); cin >> n >> q, m = n + n; for(int i = 1; i <= n; ++i) { raw[i] = i, pa[i] = i, siz[i] = 0; is_box[i] = true; } // init boxes for(int i = 1; i <= n; ++i) { raw[i + n] = i, val[i] = i + n, siz[i + n] = 0, pa[i + n] = i + n; } // init balls; for(int i = 1; i <= q; ++i) { int opt, x, y; cin >> opt; if(opt == 3) cin >> x, cout << raw[root(x)] << endl; if(opt == 1) { cin >> x >> y; ++m, raw[m] = raw[y], siz[m] = 0, pa[m] = m; // new copy is_box[m] = true, is_box[y] = false, Merge(x, y); } if(opt == 2) { cin >> x; int rx = root(x), sz = siz[rx]; if(sz >= n) { ++m, pa[m] = m, siz[m] = 1; raw[m] = sz + 1, val[sz + 1] = m; } else { int ry = root(sz + 1); siz[ry]--, raw[val[sz + 1]] = -1; ++m, pa[m] = m, siz[m] = 1, raw[m] = sz + 1, val[sz + 1] = m; Merge(rx, m); } } } return 0; } // ()()()(? */ ABC280D - Factorial and Multiple \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u51fa\u4e00\u4e2a\u6570 \\(k\\) \uff0c\u6c42\u4e00\u4e2a\u6570 \\(n\\) \uff0c\u8981\u6c42 \\(n!\\) \u662f \\(k\\) \u7684\u500d\u6570\uff0c\u8f93\u51fa \\(n\\) \u7684\u6700\u5c0f\u503c\u3002 \\(k\\le10^{12}\\) translated by @ PineappleSummer \u3002 \u6ca1\u5565\u597d\u8bf4\u7684\uff0c\u5206\u89e3\u8d28\u56e0\u6570\u7136\u540e\u6c42 \\(\\max\\{p_i^{c_i}!\\}\\) \u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 1e6 + 10 ; i64 c [ si ]; // exponential i64 m = 0 , p [ si ]; // prime factor i64 ans = 1 ; void divide ( i64 n ) { m = 0 ; for ( i64 i = 2 ; i * i <= n ; ++ i ) { if ( n % i == 0 ) { p [ ++ m ] = i , c [ m ] = 0 ; while ( n % i == 0 ) n /= i , c [ m ] ++ ; i64 tmp = 0 , t ; while ( c [ m ] > 0 ) { tmp += i , t = tmp ; while ( t % i == 0 ) t /= i , c [ m ] -- ; } ans = max ( ans , tmp ); } } if ( n > 1 ) p [ ++ m ] = n , c [ m ] = 1 ; ans = max ( ans , n ); } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); i64 k ; cin >> k ; divide ( k ), cout << ans << endl ; return 0 ; } ABC280E - Critical Hit \u03c8(\uff40\u2207\u00b4)\u03c8 \u6709\u4e00\u4e2a \\(n\\) \u6ef4\u8840\u7684\u602a\u7269\u3002\u6bcf\u4e00\u6b21\u653b\u51fb\u4f60\u6709 \\(P\\%\\) \u7684\u6982\u7387\u8ba9\u5b83\u5931\u53bb \\(2\\) \u6ef4\u8840\uff0c\u6709 \\((100-P)\\%\\) \u7684\u6982\u7387\u8ba9\u5b83\u5931\u53bb \\(1\\) \u6ef4\u8840\u3002\u5982\u679c\u653b\u51fb\u8fc7\u540e\u602a\u7269\u7684\u8840\u91cf \\(\\leq 0\\) \uff0c\u5b83\u5c31\u6b7b\u4e86\u3002\u4f60\u9700\u8981\u4e00\u76f4\u653b\u51fb\u602a\u7269\u76f4\u5230\u5b83\u6b7b\u4ea1\u3002\u8f93\u51fa\u653b\u51fb\u6b21\u6570\u7684\u671f\u671b\u5bf9 \\(998244353\\) \u53d6\u6a21\u7684\u503c\u3002 \\(1\\leq n\\leq 2\\times10^5,0\\leq P\\leq 100\\) \u5c31\u662f\u7b80\u5355\u7684\u671f\u671b dp\uff0c\u4f46\u662f\u6211\u4e00\u65f6\u534a\u4f1a\u6ca1\u60f3\u6e05\u695a\u3002 \u5c31\u662f\u8bbe \\(dp(i)\\) \u8868\u793a\u6253\u6b7b\u4e00\u53ea\u4f53\u529b\u4e3a \\(i\\) \u7684\u602a\u7269\u7684\u671f\u671b\u6b65\u6570\u3002 \u56e0\u4e3a stamina = 1 \u7684\u65f6\u5019\u600e\u4e48\u6253\u90fd\u662f G\uff0c\u6240\u4ee5 \\(dp(1) = 1\\) \u3002 \u65b9\u7a0b\u6bd4\u8f83\u663e\u7136\uff0c \\(dp(i) = \\dfrac{100 - p}{100}dp(i - 1) + \\dfrac{p}{100}dp(i - 2) + 1\\) \u4f46\u662f\u6211\u641e\u4e0d\u61c2\u554a\uff0c\u4f60\u5982\u679c\u6253\u51fa\u4e86 \\(i + 1\\) \u7684\u4f24\u5bb3\uff0c\u90a3 \\(i\\) \u4e0d\u662f\u7167\u6837\u4f1a G \u5417\uff1f \u7b54\u6848\u600e\u4e48\u5c31\u662f \\(dp(n)\\) \u4e86\uff0c\u4e0d\u61c2\uff0c\u4e0d\u61c2\u3002 \u611f\u89c9\u6bd4\u8f83\u597d\u7406\u89e3\u7684\u662f\u5012\u63a8\uff1f \u5c31\u8bbe \\(dp(i)\\) \u8868\u793a\u628a\u602a\u7269\u6253\u5230\u6070\u597d\u5269 \\(i\\) \u7684 stamina \u7684\u671f\u671b\u6b65\u6570\u3002 \u90a3\u4e48 \\(dp(n) = 0\\) \uff0c\u7b54\u6848\u662f \\(dp(0) + dp(-1)\\) \uff0c\u7136\u540e\u6c42\u51fa \\(dp(1)\\) \u4e4b\u540e\u663e\u7136\u4e0d\u7ba1\u600e\u4e48\u6253\u90fd\u662f\u53ef\u4ee5\u7684\u3002 \u6240\u4ee5\u7b54\u6848\u5b9e\u9645\u4e0a\u662f \\(dp(1) + 1\\) \u3002 \u54e6\uff0c\u6211\u61c2\u4e86\uff0c\u4e0a\u9762\u7684\u72b6\u6001\u662f\u6253\u6b7b\uff0c\u4e0b\u9762\u7684\u662f\u6070\u597d\uff0c\u6709\u533a\u522b\u7684\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; // using i64 = long long; #define int long long const int si = 2e5 + 10 ; const int mod = 998244353 ; int n , p ; int dp [ si ]; int qpow ( int a , int b ) { int ret = 1 % mod ; for (; b ; b >>= 1 ) { if ( b & 1 ) ret = ret * a % mod ; a = a * a % mod ; } return ret % mod ; } int inv ( int x ) { return qpow ( x , mod - 2 ); } const int iv = inv ( 100 ); signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> p ; dp [ 0 ] = 0 , dp [ 1 ] = 1 ; for ( int i = 2 ; i <= n + 1 ; ++ i ) dp [ i ] = (( dp [ i - 1 ] * ( 100 - p + mod ) % mod * iv % mod ) + ( dp [ i - 2 ] * p % mod * iv % mod ) + 1 % mod + mod ) % mod ; cout << dp [ n ] << endl ; return 0 ; } \u4ee3\u7801\u662f\u7b2c\u4e00\u4e2a\u5b9a\u4e49\u3002 ABC280F - Pay or Receive \u03c8(\uff40\u2207\u00b4)\u03c8 \u6709 \\(n\\) \u4e2a\u5c0f\u9547\uff0c\u7f16\u53f7 \\(1\\) ~ \\(n\\) \uff0c\u8fd8\u6709 \\(m\\) \u6761\u8def\uff0c\u7f16\u53f7 \\(1\\) ~ \\(m\\) \u3002 \u7b2c \\(i\\) \u6761\u8def\u8fde\u63a5 \\({A_i}\\) \u548c \\({B_i}\\) \uff0c\u5f53\u4f60\u8d70\u8fc7\u4e00\u6761\u8def\u65f6\uff0c\u4f60\u7684 \u5f97\u5206 \u4f1a\u9075\u5faa\u4ee5\u4e0b\u53d8\u5316\uff1a \u5f53\u4f60\u7528\u7b2c \\(i\\) \u6761\u8def\u4ece \\({A_i}\\) \u5230 \\({B_i}\\) \uff0c\u4f60\u7684\u5f97\u5206 \u589e\u52a0 \\({C_i}\\) ; \u5f53\u4f60\u7528\u7b2c \\(i\\) \u6761\u8def\u4ece \\({B_i}\\) \u5230 \\({A_i}\\) \uff0c\u4f60\u7684\u5f97\u5206 \u51cf\u5c11 \\({C_i}\\) \u3002 \u4f60\u7684\u5f97\u5206\u53ef\u80fd\u4e3a\u8d1f\u6570\u3002 \u56de\u7b54\u5982\u4e0b\u7684 \\(Q\\) \u4e2a\u95ee\u9898\uff1a \u5982\u679c\u4f60\u4ece \\({X_i}\\) \u8fd9\u4e2a\u5c0f\u9547\u51fa\u53d1\uff08\u521d\u59cb\u5f97\u5206\u4e3a \\(0\\) \uff09, \u6c42\u51fa\u4f60\u5728 \\({Y_i}\\) \u5c0f\u9547\u65f6\u7684\u6700\u5927\u5f97\u5206\u3002 \u5982\u679c\u4f60\u4e0d\u80fd\u4ece \\({X_i}\\) \u8fd9\u4e2a\u5c0f\u9547\u51fa\u53d1\u5230\u8fbe \\({Y_i}\\) \u5c0f\u9547\uff0c\u8f93\u51fa nan \u3002 \u5982\u679c\u4f60\u4ece \\({X_i}\\) \u8fd9\u4e2a\u5c0f\u9547\u51fa\u53d1\u5230\u8fbe \\({Y_i}\\) \u5c0f\u9547\u53ef\u4ee5\u6323\u5f97\u65e0\u9650\u7684\u5206\u6570\uff0c\u8f93\u51fa inf \u3002 \u8fd9\u4e0d\u5c31\u6b63\u53cd\u5efa\u8fb9\u6700\u957f\u8def\u5224\u4e0b\u53ef\u8fbe\u6027\u5224\u4e0b\u6b63\u73af\uff1f Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 // author : black_trees #include <cmath> #include <queue> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; const int inf = -1e18 ; const int si_n = 1e5 + 10 ; const int si_m = 2e5 + 10 ; int n , m , Q ; int tot = 0 , head [ si_n ]; bool vis [ si_n ], ring [ si_n ]; int pa [ si_n ], cnt [ si_n ], dis [ si_n ]; struct Edge { int ver , Next , w ; } e [ si_m ]; inline void add ( int u , int v , int w ) { e [ tot ] = ( Edge ){ v , head [ u ], w }, head [ u ] = tot ++ ; } int root ( int x ) { if ( pa [ x ] != x ) pa [ x ] = root ( pa [ x ]); return pa [ x ]; } void Merge ( int u , int v ) { int ru = root ( u ), rv = root ( v ); if ( ru == rv ) return ; pa [ ru ] = rv ; return ; } std :: queue < int > q ; void bfs ( int st ) { q . push ( st ), vis [ st ] = true , dis [ st ] = 0 ; while ( ! q . empty ()) { auto u = q . front (); q . pop (); for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( dis [ v ] == inf ) { dis [ v ] = dis [ u ] + e [ i ]. w ; vis [ v ] = true ; q . push ( v ); } else if ( dis [ v ] != dis [ u ] + e [ i ]. w ) { ring [ root ( st )] = true ; return ; } } } } signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); memset ( head , -1 , sizeof head ); cin >> n >> m >> Q ; for ( int i = 1 ; i <= n ; ++ i ) pa [ i ] = i , dis [ i ] = inf ; for ( int i = 1 ; i <= m ; ++ i ) { int u , v , w ; cin >> u >> v >> w ; add ( u , v , w ), add ( v , u , - w ); if ( root ( u ) != root ( v )) Merge ( u , v ); } for ( int i = 1 ; i <= n ; ++ i ) { int j = root ( i ); if ( vis [ j ]) continue ; while ( ! q . empty ()) q . pop (); vis [ j ] = true , bfs ( j ); } for ( int i = 1 ; i <= Q ; ++ i ) { int u , v ; cin >> u >> v ; if ( root ( u ) != root ( v )) { cout << \"nan\" << endl ; continue ; } if ( ring [ root ( u )]) cout << \"inf\" << endl ; else cout << dis [ v ] - dis [ u ] << endl ; } return 0 ; } // ()()()(? // https://www.cnblogs.com/CTing/p/16950621.html ABC281D - Max Multiple \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a \\(n\\) \u4e2a\u6570\u3002\u73b0\u5728\u53ef\u4ee5\u4ece\u4e2d\u9009 \\(k\\) \u4e2a\u6570\uff0c\u9700\u6ee1\u8db3\u4ed6\u4eec\u7684\u548c\u4e3a \\(d\\) \u7684\u500d\u6570\u3002\u6c42\u6700\u5927\u548c\u503c\u3002 translated by @ liangbowen \u3002 \u592a\u8822\u4e86\uff0c\u600e\u4e48\u7a0d\u5fae\u4e00\u4e45\u751a\u81f3\u8fde\u8fd9\u79cd\u795e\u5fc5\u80cc\u5305\u90fd\u4e0d\u4f1a\u3002 \u600e\u4e48\u56de\u4e8b\u5462\u3002 \u5c31\u662f\u770b\u5230\u8fd9\u4e2a\u4ece\u4e00\u5806\u5143\u7d20\u91cc\u4efb\u610f\u9009 \\(K\\) \u4e2a\u8981\u6ee1\u8db3\u4e00\u5b9a\u7684\u6761\u4ef6\uff0c\u95ee\u67d0\u4e9b\u6743\u503c\u7684\u6700\u503c\u6216\u8005\u662f\u53ef\u884c\u7684\u65b9\u6848\u6570\u3002 \u7136\u540e\u5c31\u662f\u80cc\u5305\u561b\uff0c\u7136\u540e\u6570\u636e\u8303\u56f4\u90fd\u662f \\(100\\) \uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u8bbe \\(dp(i,j,k)\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\u5143\u7d20\u9009\u4e86 \\(j\\) \u4e2a\uff0c\u4e14\u5df2\u7ecf\u9009\u62e9\u7684\u5143\u7d20\u7684\u6a21 \\(D\\) \u610f\u4e49\u4e0b\u548c\u4e3a \\(k\\) \u7684\u65f6\u5019\u7684 \\(\\max\\sum\\) \u3002 \u7ec8\u6001 \\(dp(N, K, 0)\\) \u3002 \u8f6c\u79fb\u6bd4\u8f83\u7b80\u5355\u5c31\u9009\u6216\u8005\u4e0d\u9009\uff0c \\(O(NKD)\\) \u3002 \u53ea\u80fd\u8bf4\u8d8a\u6765\u8d8a\u50bb\u903c\u4e86\uff0c\u72b6\u6001\u4e0d\u521d\u59cb\u5316 inf \u521d\u59cb\u5316 -1 \u6839\u672c\u4e0d\u591f\uff0c\u7136\u540e\u8f6c\u79fb\u7684\u65f6\u5019\u4e71\u8f6c\u79fb\u72b6\u6001\uff0c\u540c\u4e00\u5c42\u8f6c\u79fb\u4e24\u4e2a\u4e0d\u540c\u72b6\u6001\uff0c\u7eaf\u7eafnt. Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 1e2 + 10 ; int N , K , D , a [ si ]; i64 dp [ si ][ si ][ si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> N >> K >> D ; for ( int i = 1 ; i <= N ; ++ i ) cin >> a [ i ]; memset ( dp , -0x3f , sizeof dp ); dp [ 1 ][ 0 ][ 0 ] = 0 , dp [ 1 ][ 1 ][( a [ 1 ] % D )] = a [ 1 ]; for ( int i = 2 ; i <= N ; ++ i ) { for ( int j = 0 ; j <= min ( i , K ); ++ j ) { for ( int k = 0 ; k < D ; ++ k ) { dp [ i ][ j ][ k ] = max ( dp [ i ][ j ][ k ], dp [ i - 1 ][ j ][ k ]); if ( j > 0 ) dp [ i ][ j ][ k ] = max ( dp [ i ][ j ][ k ], dp [ i - 1 ][ j - 1 ][(( k - a [ i ]) % D + D ) % D ] + a [ i ]); } } } cout << (( dp [ N ][ K ][ 0 ] < 0 ) ? -1 : dp [ N ][ K ][ 0 ]) << endl ; return 0 ; } ABC281E - Least Elements \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217 \\(A\\) \uff0c\u5bf9\u4e8e\u6bcf\u4e2a \\(1 \\le i \\le N - M + 1\\) \uff0c\u5c06 \\(A_i A_{i + 1} \\cdots A_{i + M - 1}\\) \u4ece\u5c0f\u5230\u5927 \u6392\u5e8f\u540e\uff08\u4e0d\u5f71\u54cd\u539f\u5e8f\u5217\uff09\uff0c\u6c42\u51fa \\(\\mathrm{ans}_i = \\sum\\limits_{i=1}^{K}A_i\\) \u3002 \u611f\u89c9\u8fd9\u79cd\u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217\u505a\u5f88\u591a\u4e2a independent problem \u7684\u65f6\u5019\u4e00\u822c\u90fd\u4f1a\u8981\u8003\u8651\u4ece\u4e0a\u4e00\u4e2a\u72b6\u6001\u7ee7\u627f\uff0c\u6216\u8005\u662f\u8003\u8651\u5148\u6574\u4f53\u505a\u4e00\u904d\u518d\u8ba1\u7b97 ignore \u4e00\u4e9b\u64cd\u4f5c\u4e4b\u540e\u7684\u5f71\u54cd\u4e4b\u7c7b\u7684\u3002 \u8fd9\u4e00\u9898\u662f\uff0c279E \u4e5f\u662f\uff0c\u5176\u5b9e\u5f88\u7ecf\u5178\u611f\u89c9\uff0c\u4e4b\u524d\u597d\u50cf\u6709\u4e00\u4e2a CF \u7684\u9898\u4e5f\u662f\u7c7b\u4f3c\uff0c\u6709\u70b9\u4e45\u8fdc\u8bb0\u4e0d\u6e05\u695a\u4e86\u3002 \u5c31\u662f\u5148\u8003\u8651\u5bf9\u4e8e \\(i = 1\\) \u76f4\u63a5\u66b4\u529b\u505a\u4e00\u6b21\uff0c\u7136\u540e\u6211\u4eec\u53d1\u73b0\u6bcf\u6b21\u632a\u4e00\u6b65\u5c31\u5c11\u4e00\u4e2a\u591a\u4e00\u4e2a\u5143\u7d20\u800c\u5df2\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u52a8\u6001\u7ef4\u62a4\u524d \\(k\\) \u5927\u7684 \\(\\sum\\) \u5c31\u53ef\u4ee5\uff0c\u6bcf\u6b21\u5f39\u51fa\u4e00\u4e2a\u5143\u7d20\uff0c\u7136\u540e\u52a0\u5165\u4e00\u4e2a\u65b0\u5143\u7d20\u770b\u6709\u6ca1\u6709\u53d8\u5316\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u76f4\u63a5 multiset \u7ef4\u62a4\uff0c\u601d\u60f3\u548c\u83ab\u961f\u5f88\u50cf\uff0c\u4f46\u662f\u8fb9\u754c\u597dTM\u70e6\u554a\uff0c\u4e0d\u662f\u5f88\u61c2\u554a\uff0c\u597d\u50cf\u8981\u4e24\u4e2a multiset \u7ef4\u62a4\uff0c\u6211\u4e00\u4e2a multiset \u5047\u4e86\uff0c\u4e0d\u662f\u5f88\u61c2\u3002 \u4e24\u4e2a multiset \u7ef4\u62a4\u8fc7\u7a0b\u5c31\u7c7b\u4f3c\u5bf9\u9876\u5806\uff0c\u53ea\u9700\u8981\u5224\u4e0b size \u5c31\u884c\u4e86\uff0c\u53ef\u4ee5\u5c11\u5206\u8ba8\u4e00\u70b9\u3002 Code // \u4e0a\u9762\u7684\u4ee3\u7801\u5047\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 // author : black_trees #include <set> #include <cmath> #include <cstdio> #include <cstring> #include <cassert> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int N , M , K , a [ si ], b [ si ]; class SuzuiAnri { private : i64 sum ; int kth ; std :: multiset < int > ms ; public : void Init () { for ( int i = 1 ; i <= M ; ++ i ) b [ i ] = a [ i ]; sort ( b + 1 , b + 1 + M ); for ( int i = 1 ; i <= K ; ++ i ) sum += b [ i ]; for ( int i = 1 ; i <= M ; ++ i ) ms . insert ( a [ i ]); kth = b [ K ]; } i64 Qsum () { return sum ; } void Do ( int i ) { int x = a [ i - 1 ], y = a [ i + M - 1 ]; if ( K != M ) { if ( x > kth ) ms . erase ( ms . find ( x )); else { ms . erase ( ms . find ( x )); kth = * next ( ms . find ( kth )); sum -= x , sum += kth ; } if ( y > kth ) ms . insert ( y ); else { ms . insert ( y ); sum += y , sum -= kth ; kth = * prev ( ms . find ( kth )); } } else sum -= x , sum += y ; } } DD ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> N >> M >> K ; for ( int i = 1 ; i <= N ; ++ i ) cin >> a [ i ]; DD . Init (); cout << DD . Qsum () << endl ; for ( int i = 2 ; i <= N - M + 1 ; ++ i ) DD . Do ( i ), cout << DD . Qsum () << \" \" ; cout << endl ; return 0 ; } /* \u5148\u4e0d\u8003\u8651 K = M * \u5982\u679c\u65b0\u52a0\u5165\u7684\u4e3a y, \u8981\u88ab\u5220\u9664\u7684\u4e3a x * \u9996\u5148\u8003\u8651 x \u7684\u4f4d\u7f6e\uff1a * \u5982\u679c x \u4e0d\u5c5e\u4e8e\u524d k \u5c0f\uff1a * \u76f4\u63a5\u5220\u9664 x\uff0c\u4e0d\u4f1a\u6709\u4efb\u4f55\u5f71\u54cd\u3002 * \u5982\u679c x \u5c5e\u4e8e\u524d k \u5c0f\uff1a * \u5220\u9664 x\uff0c\u7136\u540e kth \u5e94\u8be5\u66f4\u65b0\u4e3a\u539f\u6765 kth \u7684\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u56e0\u4e3a K < M \u6240\u4ee5\u4e00\u5b9a\u4f1a\u6709\u8fd9\u6837\u7684\u4e00\u4e2a\u5143\u7d20\uff0c\u4e0d\u4f1a\u8d8a\u754c\u3002 * \u7136\u540e\u8003\u8651 y \u7684\u4f4d\u7f6e\uff1a * \u5982\u679c y \u4e0d\u5c5e\u4e8e\u524d k \u5c0f\uff1a * \u76f4\u63a5\u63d2\u5165 y\uff0c\u4e0d\u4f1a\u6709\u4efb\u4f55\u5f71\u54cd\u3002 * \u5982\u679c y \u5c5e\u4e8e\u524d k \u5c0f\uff1a * \u76f4\u63a5\u63d2\u5165 y\uff0c\u7136\u540e\u66f4\u65b0 kth \u4e3a\u73b0\u5728\u7684\u524d\u4e00\u4f4d\uff0c\u5982\u679c K = 1\uff0c\u56e0\u4e3a y \u5c5e\u4e8e\u524d K \u5c0f\u6240\u4ee5\u4e00\u5b9a\u5b58\u5728\uff0c\u5176\u5b83\u4e5f\u4e00\u5b9a\u5b58\u5728\uff0c\u4e0d\u4f1a\u8d8a\u754c\u3002 * \u7136\u540e K = M \u76f4\u63a5\u8f93\u51fa\u5c31\u884c\u4e86\u3002 */ /* #include <bits/stdc++.h> #define rep(i, n) for (int i = 0; i < (n); ++i) using namespace std; using ll = long long; struct DS { int k; ll sum; multiset<int> ls, rs; DS(int k=0): k(k), sum(0) {} void ladd(int x) { sum += x; ls.insert(x); } void lerase(multiset<int>::iterator it) { sum -= *it; ls.erase(it); } void add(int x) { ladd(x); if (ls.size() <= k) return; auto it = ls.end(); --it; rs.insert(*it); lerase(it); } void erase(int x) { if (*ls.rbegin() < x) { rs.erase(rs.find(x)); } else { lerase(ls.find(x)); auto it = rs.begin(); ladd(*it); rs.erase(it); } } }; int main() { int n, m, k; cin >> n >> m >> k; vector<int> a(n); rep(i, n) cin >> a[i]; DS d(k); rep(i, m) d.add(a[i]); cout << d.sum << '\\n'; rep(i, n-m) { d.add(a[i+m]); d.erase(a[i]); cout << d.sum << '\\n'; } return 0; } \u4f5c\u8005\uff1aNcik \u94fe\u63a5\uff1ahttps://www.acwing.com/solution/content/154338/ \u6765\u6e90\uff1aAcWing \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 */ ABC281F - Xor Minimization \u03c8(\uff40\u2207\u00b4)\u03c8 \u6c42 \\(\\min\\{\\max\\{a_i \\oplus x\\}\\}\\) \uff0c\u5176\u4e2d \\(x\\) \u672a\u77e5\u3002 \\(a_i < 2^{30}, 1\\le n \\le 2e5\\) \u3002 \u9996\u5148\u89c2\u5bdf\u5185\u5c42\u7684 \\(\\max\\) \uff0c\u53d1\u73b0\u8fd9\u4e2a\u5c31\u662f 01trie \u7684 query \u64cd\u4f5c\u3002 \u90a3\u4e48\u95ee\u9898\u5c31\u662f\u600e\u4e48\u6837\u8ba9 01trie \u7684 query \u627e\u5230\u7684\u503c\u6700\u5c0f\u3002 \u601d\u8003\u4e00\u4e0b query \u7684\u8fc7\u7a0b\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u4e0d\u65ad\u53cd\u7740\u8d70\uff0c\u6211\u4eec\u5e0c\u671b\u5b83\u5c3d\u91cf\u5c0f\uff0c\u90a3\u5c31\u662f\u8ba9\u5b83\u7684\u9ad8\u4f4d\u5c3d\u91cf\u4e0d\u80fd\u53cd\u7740\u8d70\uff0c\u4e5f\u5c31\u662f\u5c3d\u91cf\u5728\u9ad8\u4f4d\u627e\u53ea\u6709\u4e00\u4e2a\u6307\u9488\u7684\u8fb9\u3002 \u4f46\u662f\u6211\u4eec\u4e0d\u80fd\u5f88\u597d\u7684\u77e5\u9053\u4e0b\u9762\u7684\u60c5\u51b5\uff0c\u6bd4\u5982\u4f60\u540c\u4e00\u5c42\u4e24\u8fb9\u90fd\u80fd\u8d70\u4e00\u4e2a\u6307\u9488\uff0c\u4f46\u662f\u4e0b\u9762\u80fd\u8d70\u7684\u6570\u91cf\u4e0d\u540c\u600e\u4e48\u529e\uff1f \u6240\u4ee5\u6211\u4eec\u8bb0\u5f55\u4e24\u4e2a\u4fe1\u606f\uff0c\u4e00\u4e2a \\(near(u)\\) \u8868\u793a\u9664\u4e86 \\(u\\) \u81ea\u5df1\uff0c\u80fd\u8d70\u5230\u7684\u6700\u8fd1\u7684\u6709\u4e00\u4e2a\u5206\u53c9\u7684\u70b9\u7684\u4f4d\u7f6e\uff0c\u53e6\u4e00\u4e2a \\(cnt(u)\\) \u8868\u793a \\(u\\) \u8fd9\u4e2a\u8282\u70b9\u4e0b\u9762\u6709\u591a\u5c11\u5c42\u80fd\u6709\u4e00\u4e2a\u6307\u9488\u7684\u9009\u62e9\uff0c\u7136\u540e cnt \u9700\u8981\u53cd\u8fc7\u6765\u51b3\u5b9a near\u3002 \u4f46\u662f\u8fd9\u6837\u975e\u5e38\u9ebb\u70e6\uff0c\u6211\u4eec\u601d\u8003\u4e00\u4e0b\u80fd\u4e0d\u80fd\u76f4\u63a5\u5728 \\(u\\) \u5c31\u786e\u5b9a\u3002 \u8003\u8651\u6240\u6709\u6570\u7684\u7b2c \\(i\\) \u4f4d\uff0c\u5982\u679c\u5168\u90e8\u662f \\(0/1\\) \uff0c\u90a3\u4e48 \\(x\\) \u7684\u7b2c \\(i\\) \u4f4d\u4e00\u5b9a\u662f \\(1/0\\) \u3002 \u5982\u679c\u6709 \\(0\\) \u6709 \\(1\\) \uff0c\u663e\u7136 \\(x\\) \u7684\u8fd9\u4e00\u4f4d\u9700\u8981\u7531\u4f4e\u4f4d\u7684\u7ed3\u679c\u786e\u5b9a\uff0c\u800c\u4e14\u8fd9\u4e00\u4f4d\u7684\u7ed3\u679c\u4e00\u5b9a\u662f 1\uff0c\u6240\u4ee5\u6211\u4eec\u9009\u62e9\u4f4e\u4f4d\u7b54\u6848\u66f4\u5c0f\u7684\u5373\u53ef\u3002 \u6240\u4ee5\u6211\u4eec\u5c31\u5206\u6cbb\u4e0b\u53bb\u7b97\u4e00\u4e0b\u7b54\u6848\uff0c\u7136\u540e\u4e0d\u65ad\u5411\u4e0a merge \u5373\u53ef\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u5728 01trie \u4e0a\u505a\u3002 \u611f\u89c9\u8fd9\u4e2a\u6a21\u578b\u4e5f\u6bd4\u8f83\u7ecf\u5178\uff0c\u5c31\u662f\u5bf9\u4e8e\u4e4b\u540e\u7684\u4fe1\u606f\u53ef\u80fd\u9020\u6210\u5f71\u54cd\u65f6\u7684\u5904\u7406\u65b9\u5f0f\uff0c\u4e0d\u662f\u9012\u5f52\u4e0b\u53bb\u76f4\u63a5\u9884\u5904\u7406\u4fe1\u606f\uff0c\u5c31\u662f\u5148\u5206\u6cbb\u7136\u540e\u5012\u7740\u7b97\u7b54\u6848\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 // author : black_trees #include <cmath> #include <cstdio> #include <climits> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; const int inf = INT_MAX ; int tot = 1 ; bool tg [ si * 31 ]; int tr [ si * 31 ][ 2 ], val [ si * 31 ]; void insert ( int v ) { int p = 1 ; for ( int i = 30 ; i >= 0 ; -- i ) { int ch = ( v >> i ) & 1 ; val [ p ] = 1 << i ; if ( ! tr [ p ][ ch ]) tr [ p ][ ch ] = ++ tot ; p = tr [ p ][ ch ]; } tg [ p ] = true ; } int query ( int p ) { if ( tg [ p ]) return 0 ; if ( ! p ) return - inf ; int lans = query ( tr [ p ][ 0 ]), rans = query ( tr [ p ][ 1 ]); if ( lans > rans ) swap ( lans , rans ); return max ( val [ p ] + lans , rans ); } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int n , rt = 1 ; cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { int x ; cin >> x ; insert ( x ); } cout << query ( 1 ) << endl ; return 0 ; } // ()()()(? \u8bf4\u53e5\u9c9c\u82b1\uff0c\u53d1\u73b0\u65e9\u4e0a\u7684\u65f6\u5019\u786e\u5b9e\u6e05\u9192\u5f88\u591a\uff0c\u611f\u89c9\u4ee5\u540e\u4e0d\u80fd\u6d6a\u8d39\u65e9\u4e0a\u7684\u65f6\u95f4\u4e86\u3002 CF35E \u5168\u662f\u65e9\u4e0a\u6311\u51fa\u91cd\u5927 bug\uff0c\u4eca\u5929\u4e0a\u5348\u505a\u9898\u6548\u7387\u5f88\u9ad8\u3002 \u54e6\u8fd8\u6709\u611f\u89c9\u4ee5\u540e\u505a\u9898\u4e4b\u524d\u53ef\u4ee5\u5148\u7ffb\u4e00\u4e0b\u4ee5\u524d\u7684\u535a\u5ba2\u627e\u627e\uff1f\u72b6\u6001\uff1f CF1770 - Goodbye2022 \u03c8(\uff40\u2207\u00b4)\u03c8 \u611f\u89c9\u662f\u4eca\u5e74\u6253\u7684\u6700\u597d\u7684\u4e00\u573a\u3002 \u4ece\u5404\u79cd\u610f\u4e49\u4e0a\u6765\u8bf4\u90fd\u662f\uff0c\u611f\u89c9\u81ea\u5df1\u80fd\u5c1d\u8bd5\u4e00\u4e0b D \u8fd9\u79cd\u62ab\u7740\u535a\u5f08\u8bba\u76ae\u7684\u9898\u5df2\u7ecf\u7b97\u8fdb\u6b65\u4e86\uff0c\u4ee5\u524d\u770b\u5230 both play optimally \u5c31\u4e0d\u6562\u505a\uff08 \u56de\u6765\u7684\u5730\u94c1\u4e0a\u548c\u4e00\u4e2a\u7279\u522b\u5389\u5bb3\u7684\u524d MOer \u804a\u5929\uff0c\u4ed6\u8bf4\u4ed6\u505a\u9898\u4e00\u822c\u662f\u8981\u5148\u60f3\u65b9\u6cd5\uff0c\u6ca1\u6709\u786e\u5207\u601d\u8def\u7edd\u5bf9\u4e0d\u5f00\u59cb\u5199\uff0c\u4e0d\u7136\u5c31\u5148\u5c1d\u8bd5\u7b80\u5316\u9898\u76ee\u7136\u540e\u7ee7\u7eed\u601d\u8003\u3002 \u800c\u4e14\u4e00\u822c\u6765\u8bf4\u8981\u5c1d\u8bd5\u5206\u6790\u8003\u70b9\u7136\u540e\u627e\u5230\u65b9\u5411\uff0c\u4f7f\u52b2\u5f80\u90a3\u4e2a\u65b9\u5411\u9760\u3002 \u800c\u4e14\u4e00\u822c\u6765\u8bf4\u4e0d\u80fd\u6709 phobia\uff0c\u5f97\u5148\u601d\u8003\u4e00\u4e0b\uff0c\u522b\u88ab\u5413\u5230\u4e86\u3002 \u611f\u89c9\u5f88\u6709\u9053\u7406\uff01\u8bf4\u7684\u592a\u5bf9\u4e86\uff01 \u867d\u7136\u522b\u4eba\u7684\u65b9\u6cd5\u4e0d\u4e00\u5b9a\u9002\u5408\uff0c\u4f46\u662f\u611f\u89c9\u8fd9\u4e2a\u786e\u5b9e\u4f1a\u6bd4\u8f83\u6709\u7528\uff01 A - Koxia and Whiteboards \u03c8(\uff40\u2207\u00b4)\u03c8 \u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\u3002 B - Koxia and Permutation \u03c8(\uff40\u2207\u00b4)\u03c8 \u4f60\u9700\u8981\u6784\u9020\u4e00\u4e2a\u6392\u5217 \\(p\\) \uff0c\u4f7f\u5f97 \\(\\max\\limits_{i = 1}^{n - k + 1}\\{\\max(a_i \\dots a_{i + k - 1}) + \\min(a_i \\dots a_{i + k - 1})\\}\\) \u6700\u5c0f\u3002 \\(n, k\\) \u7ed9\u5b9a\uff0c \\(2e5\\) \u3002 \u6ce8\u610f\u5230\u6211\u4eec\u4e00\u5b9a\u5e0c\u671b\u6574\u4f53\u7684 \\(\\max,\\min\\) \u51d1\u5230\u4e00\u8d77\uff0c\u6211\u4eec\u628a\u4ed6\u4eec\u653e\u5230\u4e00\u4e2a\u533a\u95f4\u4e4b\u540e\u53bb\u6389\u4ed6\u4eec\uff0c\u7136\u540e\u53ef\u4ee5\u9012\u5f52\u7684\u53d1\u73b0\u5c31\u662f\u4e0d\u65ad\u8ba9 \\(\\max \\min\\) \u653e\u5230\u4e00\u8d77\u3002 \u7136\u540e\u778e\u6784\u9020\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\uff0c\u6211\u5f00\u59cb\u7684\u601d\u8def\u662f\u76f4\u63a5\u653e\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\uff0c\u4f46\u662f\u611f\u89c9\u6bd4\u8f83\u9ebb\u70e6\uff0c\u7136\u540e\u53d1\u73b0\u5176\u5b9e\u7b54\u6848\u548c \\(k\\) \u65e0\u5173\uff0c\u76f4\u63a5 \\(\\max \\min\\) \u8fd9\u6837\u6328\u7740\u653e\u5c31\u884c\u4e86\u3002 \u8d5b\u65f6Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int a [ si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { int n , k ; cin >> n >> k ; for ( int i = 1 ; i <= n ; ++ i ) { if ( i & 1 ) cout << ( n - i / 2 ) << \" \" ; else cout << ( i >> 1 ) << \" \" ; } // int l = 1, r = n; // int pos = 1; // while(l <= r) { // // } // for(int i = 1; i <= n; ++i) cout << a[i] << \" \", a[i] = 0; cout << endl ; } return 0 ; } C - Koxia and Number Theory \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217 \\(a\\) , \u5224\u65ad\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u6b63\u6574\u6570 \\(x\\) \u4f7f\u5f97 \\(\\forall 1 \\le i < j \\le n, \\gcd(a_i + x, a_j + x) = 1\\) \u3002 \\(1\\le n \\le 2e5, 1\\le a_i 1e18\\) \u95ee\u9898\u7b49\u4ef7\u4e8e\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e00\u4e2a \\(x\\) \u4f7f\u5f97\u6bcf\u4e00\u4e2a\u503c\u57df\u5185\u7684\u8d28\u6570\u90fd\u81f3\u591a\u6574\u9664\u4e00\u4e2a \\(a_i + x\\) \u3002 \u4f46\u662f\u503c\u57df\u662f \\(10^{18}\\) \uff0c\u601d\u8003\u4e00\u4e0b\u80fd\u5426\u7f29\u5c0f\u8303\u56f4\u3002 \u53d1\u73b0\u5bf9\u4e8e\u4e00\u4e2a\u8d28\u6570 \\(p\\) \uff0c\u663e\u7136\u6211\u4eec\u8981\u505a\u7684\u662f\u5bf9 \\(a_i \\mod p\\) \u610f\u4e49\u4e0b\u7684\u4f59\u6570\u8ba1\u6570\uff0c\u6240\u4ee5\u5176\u5b9e\u5bf9\u4e8e\u5f53\u524d\u679a\u4e3e\u5230\u7684 \\(p\\) \uff0c\u5982\u679c\u5b83\u5927\u4e8e \\(n\\) \uff0c\u663e\u7136\u4e00\u5b9a\u5b58\u5728\u81f3\u5c11\u4e00\u4e2a\u4f59\u6570\u7684\u51fa\u73b0\u6b21\u6570\u6570\u662f\u4e00\u5b9a\u4f1a\u5927\u4e8e \\(2\\) \u7684\uff0c\u6240\u4ee5\u5bc4\u3002 \u90a3\u4e48\u5c31\u679a\u4e3e \\([2,n]\\) \u8303\u56f4\u5185\u7684\u8d28\u6570\u5c31\u884c\u4e86\uff0c\u53d1\u73b0\u5176\u5b9e\u5408\u6570\u5bf9\u7b54\u6848\u6ca1\u5f71\u54cd\uff0c\u6240\u4ee5\u8d28\u6570\u90fd\u4e0d\u9700\u8981\u5224\u4e86\u3002 \u8bb0\u5f97\u5224\u76f8\u7b49\u7684 \\(a_i, a_j\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; i64 a [ si ], b [ si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { bool f = false ; int n ; cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = i + 1 ; j <= n ; ++ j ) { if ( a [ i ] == a [ j ]) { f = true ; break ; } } if ( f ) break ; } if ( f ) { cout << \"No\" << endl ; continue ; } for ( int p = 2 ; p <= n ; ++ p ) { for ( int i = 0 ; i <= p ; ++ i ) b [ i ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) b [ a [ i ] % p ] += 1 ; bool ff = false ; for ( int i = 0 ; i < p ; ++ i ) if ( b [ i ] <= 1 ) { ff = true ; break ; } if ( ff != true ) { f = true ; break ; } } if ( f ) cout << \"No\" << endl ; else cout << \"Yes\" << endl ; } return 0 ; } D - Koxia and Game \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e24\u4e2a\u5e8f\u5217 \\(a, b\\) \uff0c\u8981\u6c42\u6784\u9020\u4e00\u4e2a\u5e8f\u5217 \\(c\\) \u4f7f\u5f97\u4ee5\u4e0b\u6e38\u620f\u5148\u624b\u5fc5\u80dc\u3002 \u5728\u6e38\u620f\u7684\u7b2c \\(i\\) \u8f6e\uff0c\u5148\u624b\u4ece \\(a_i, b_i, c_i\\) \u5f53\u4e2d\u9009\u53d6\u4e00\u4e2a\u6570\u5220\u6389\uff0c\u7136\u540e\u540e\u624b\u5728\u5269\u4e0b\u7684\u4e24\u4e2a\u6570\u91cc\u9762\u9009\u62e9\u4e00\u4e2a\uff0c\u8fd9\u6b21\u51b3\u7b56\u9009\u62e9\u7684\u6570\u8bb0\u4e3a \\(d_i\\) \u3002 \u5982\u679c \\(d\\) \u662f\u4e00\u4e2a \\(1\\sim n\\) \u7684\u6392\u5217\uff0c\u90a3\u4e48\u5148\u624b\u83b7\u80dc\uff0c\u53cc\u65b9\u5747\u91c7\u53d6\u6700\u4f18\u7b56\u7565\u3002 \u8bf7\u95ee\u6709\u591a\u5c11\u79cd\u5408\u6cd5\u7684\u6784\u9020\u65b9\u6848\uff1f\u5bf9 \\(998244353\\) \u53d6\u6a21\u3002 \\(1\\le n \\le 1e5\\) \u3002 \u6ce8\u610f\u5230\u8fd9\u91cc\u662f\u5408\u6cd5\u65b9\u6848\u8ba1\u6570\uff0c\u6240\u4ee5\u663e\u7136\u6211\u4eec\u9700\u8981\u77e5\u9053\u4ec0\u4e48\u6837\u7684\u65b9\u6848\u662f\u5408\u6cd5\u7684\u3002 \u89c2\u5bdf\u6837\u4f8b\u53d1\u73b0\u4f1a\u6709\u65e0\u89e3\u7684\u60c5\u51b5\uff0c\u53d1\u73b0\u4e0d\u662f\u5f88\u597d\u5224\u5b9a\uff0c\u5148\u8003\u8651\u6709\u89e3\u600e\u4e48\u7b97\u3002 \u8d5b\u65f6\u8fd9\u4e2a\u65f6\u5019\u7a81\u7136\u5192\u51fa\u6765\u4e00\u4e2a\u601d\u8def\uff0c\u6bd4\u8f83\u795e\u5947\uff0c\u4e5f\u4e0d\u77e5\u9053\u600e\u4e48\u60f3\u5230\u7684\uff0c\u53ef\u80fd\u662f\u60f3\u5c1d\u8bd5\u5206\u6790\u8fd9\u4e2a\u6700\u4f18\u7b56\u7565\u662f\u4ec0\u4e48\u7684\u65f6\u5019\u60f3\u5230\u7684\u3002 \u5c31\u662f\u53d1\u73b0\u5176\u5b9e\u8fd9\u4e2a\u6e38\u620f\u662f\u7531\u5148\u624b\u64cd\u7eb5\u7684\uff0c\u548c\u540e\u624b\u5e76\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u3002 \u56e0\u4e3a\u53ea\u7ed9\u51fa\u4e86 \\(a_i, b_i\\) \uff0c\u6240\u4ee5\u5176\u5b9e\u5148\u624b\u53ef\u4ee5\u5f3a\u5236\u540e\u624b\u9009\u62e9 \\(a_i\\ \\text{or}\\ b_i\\) \uff0c\u5177\u4f53\u65b9\u5f0f\u662f\u4ee4 \\(c_i\\) \u548c\u9700\u8981\u5f3a\u5236\u540e\u624b\u9009\u7684\u90a3\u4e2a\u6570\u4e00\u6837\uff0c\u7136\u540e\u5220\u6389\u53e6\u5916\u4e00\u4e2a\u4e0d\u540c\u7684\u5373\u53ef\u3002 \u8003\u8651\u4e00\u4e0b\u8fd9\u4e2a\u662f\u4e0d\u662f\u6700\u4f18\u7b56\u7565\uff0c\u53d1\u73b0\u4e00\u5b9a\u662f\uff0c\u6bd4\u5982 1 1 2 \uff0c\u4f60\u80af\u5b9a\u4e0d\u5e0c\u671b\u540e\u624b\u80fd\u6709\u66f4\u591a\u9009\u62e9\uff0c\u4e0d\u7136\u4f60\u6ca1\u6cd5\u8003\u8651\u540e\u9762\u7684\u60c5\u51b5\uff0c\u6bd4\u8f83\u5bb9\u6613\u5bc4\u6389\uff0c\u4e8e\u662f\u5408\u7406\u63a8\u6d4b\u53ea\u80fd\u8fd9\u4e48\u5e72\uff01 \u7136\u540e\u8003\u8651\u600e\u4e48\u7b97\u8d21\u732e\uff0c\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u597d\u50cf\u53ef\u4ee5\u62bd\u8c61\u6210\u56fe\u8bba\uff0c\u5c31\u76f4\u63a5\u5bf9\u4e8e \\(i\\) \uff0c\u8fde \\((a_i, b_i)\\) \u8fd9\u6761\u65e0\u5411\u8fb9\u5c31\u884c\u3002 \u5982\u679c\u627e\u5230\u4e86\u4e00\u4e2a\u81ea\u73af\uff0c\u8fd9\u91cc\u7684\u8d21\u732e\u663e\u7136\u662f \\(n\\) \uff0c\u56e0\u4e3a \\(c_i\\) \u53d6\u4efb\u610f\u4e00\u4e2a\u6570\uff0c\u5148\u624b\u90fd\u53ef\u4ee5\u5220\u6389\uff0c\u5c31\u6bd4\u5982 1 1 \u8fd9\u6837\u3002 \u7136\u540e\u6ce8\u610f\u5230\u5176\u5b9e\u5408\u6cd5\u65b9\u6848\u5e94\u8be5\u662f\u4e00\u4e2a\u57fa\u73af\u6811\u68ee\u6797\uff0c\u5982\u679c\u73af\u4e0d\u662f\u81ea\u73af\uff0c\u90a3\u4e48\u8d21\u732e\u4e00\u5b9a\u662f \\(2\\) \uff0c\u56e0\u4e3a\u4f60\u6bcf\u6b21\u4e4b\u6709\u4e24\u79cd\u9009\u62e9\uff0c\u7136\u540e\u8fde\u901a\u5757\u91cc\u9762\u7684\u65b9\u6848\u662f\u4f1a\u76f8\u4e92\u5f71\u54cd\u7684\uff0c\u4f60\u597d\u6bd4\u9009\u4e86\u4e24\u6761\u8def\u8d70\u51fa\u53bb\u8fd9\u6837\u3002 \u90a3\u4e48\u5176\u5b9e\u81ea\u73af\u7684\u8d21\u732e\u5e94\u8be5\u5728\u5b83\u6240\u5c5e\u7684\u8054\u901a\u5757\u91cc\u9762\u76f4\u63a5\u7b97\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5 dfs \u4e00\u4e0b\uff0c\u5224\u4e00\u4e0b\u81ea\u73af\u548c\u65e0\u89e3\u5c31\u884c\u4e86\u3002 \u65e0\u89e3\u663e\u7136\u5c31\u662f\u8fde\u901a\u5757\u4e0d\u662f\u57fa\u73af\u6811\uff0c\u4e5f\u5c31\u662f\u6811\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u5c31\u5f88\u597d\u505a\u4e86\u3002 \u5f53\u7136\u4e5f\u6709\u53ef\u80fd\u662f\u51d1\u4e0d\u51fa\u6392\u5217\uff0c\u8fd9\u4e2a\u7279\u5224 vis \u5c31\u884c\u3002 \u8fd9\u91cc\u653e\u7684\u662f\u8d5b\u65f6\u4ee3\u7801\uff0c\u9519\u8bef\u601d\u8def\u7684\u4e1c\u897f\u6ca1\u6765\u5f97\u53ca\u5220\uff0c\u51d1\u5408\u7740\u770b\u3002 \u8fd9\u9898\u4e5f\u6bd4\u8f83\u6709\u7eaa\u5ff5\u610f\u4e49\u611f\u89c9\uff0c\u6bd5\u7adf\u662f 15 \u5c81\u7684\u6211\u505a\u7684\u6700\u540e\u4e00\u9898\uff0c16 \u5c81\u7684\u6211\u505a\u7684\u7b2c\u4e00\u9898\u3002 \u70b9\u540d\u6279\u8bc4 15 \u5c81\u7684\u6211\uff0c\u600e\u4e48\u5224\u91cd\u590d\u4e8c\u5143\u7ec4\u8fd9\u79cd\u5047\u505a\u6cd5\u90fd\u80fd\u60f3\u5230 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 // author : black_trees #include <map> #include <cmath> #include <cstdio> #include <cstring> #include <utility> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; const int mod = 998244353 ; int a [ si ], b [ si ]; std :: map < std :: pair < int , int > , bool > mp ; bool vis [ si ]; int head [ si ], tot = 0 ; struct Edge { int ver , Next ; } e [ si << 1 ]; inline void add ( int u , int v ) { e [ tot ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot ++ ; } int dg , sf , deg [ si ]; void dfs ( int u , int fa ) { vis [ u ] = true ; dg -= 2 ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; dg ++ ; if ( u == v ) sf ++ ; // self ring. if ( v == fa || vis [ v ] == true ) continue ; dfs ( v , u ); } } signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { bool f = false ; mp . clear (), tot = 0 ; int n , ans = 1l l ; cin >> n ; for ( int i = 0 ; i <= n + 10 ; ++ i ) vis [ i ] = false , head [ i ] = -1 , deg [ i ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; for ( int i = 1 ; i <= n ; ++ i ) cin >> b [ i ]; // for(int i = 1; i <= n; ++i) { // std::pair<int, int> t = make_pair(min(a[i], b[i]), max(a[i], b[i])); // if(mp[t] == true) { f = true; break; } // mp[t] = true; // if(a[i] == b[i]) ans = (ans * n) % mod, vis[i] = true; // else add(a[i], b[i]), add(b[i], a[i]); // } for ( int i = 1 ; i <= n ; ++ i ) deg [ a [ i ]] ++ , deg [ b [ i ]] ++ , add ( a [ i ], b [ i ]), add ( b [ i ], a [ i ]); // if(f) { cout << \"0\" << endl; continue; } for ( int i = 1 ; i <= n ; ++ i ) { if ( ! vis [ i ]) { dg = 0 , sf = 0 , dfs ( i , 0 ); if ( dg != 0 ) { ans = 0 ; break ; } if ( sf ) ans = ( ans * n ) % mod ; else ans = ( ans + ans ) % mod ; } } for ( int i = 1 ; i <= n ; ++ i ) { if ( ! deg [ i ]) { ans = 0 ; break ; } } cout << ans << endl ; } return 0 ; } // dottle : 364577 ABC282D - Make Bipartite 2 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e00\u4e2a \\(N\\) \u4e2a\u70b9\uff0c \\(M\\) \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u6c42\u95ee\u6709\u591a\u5c11\u5bf9\u8fd8\u672a\u7ecf\u8fde\u63a5\u7684\u70b9\u5bf9\u6ee1\u8db3\u5728\u8fde\u63a5\u5b83\u4eec\u540e\uff0c\u8be5\u56fe\u4e3a\u4e00\u4e2a\u4e8c\u5206\u56fe. \u6ce8\u610f\u8fd9\u91cc\u70b9\u5bf9 \\((u,v)\\) \u548c\u70b9\u5bf9 \\((v,u)\\) \u662f\u540c\u4e00\u5bf9\u70b9\u5bf9\u3002 \u6570\u636e\u4fdd\u8bc1\u6ca1\u6709\u81ea\u73af\u4e0e\u91cd\u8fb9\u3002 \u9996\u5148\u8003\u8651\u76f4\u63a5\u5bf9 \\(G\\) \u9ed1\u767d\u67d3\u8272\u5224\u65ad\u4e00\u4e0b\u6709\u6ca1\u6709\u5408\u6cd5\u7684\u89e3\u3002 \u7136\u540e\u53d1\u73b0\u5176\u5b9e\u53ef\u4ee5\u679a\u4e3e\u767d\u8272\u70b9\uff0ccheck \u4e00\u4e0b\u80fd\u548c\u4ed6\u5339\u914d\u7684\u9ed1\u70b9\u6709\u591a\u5c11\uff08\u5c31\u662f\u9ed1\u70b9\u603b\u6570\u51cf\u53bb\u5f53\u524d\u70b9\u7684\u5ea6\u6570\uff09\u3002 \u4f46\u662f\u6ce8\u610f\u5230 \\(G\\) \u53ef\u80fd\u662f\u51e0\u4e2a\u5355\u72ec\u7684\u8054\u901a\u5206\u91cf\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u8981\u8003\u8651\u5206\u91cf\u5916\u7684\u65b9\u6848\u3002\u6ce8\u610f\u5230\u5bf9\u4e8e\u5f53\u524d\u70b9\uff0c\u5982\u679c\u662f\u548c\u5916\u9762\u7684\u8fde\u901a\u5206\u91cf\u8fde\uff0c\u600e\u4e48\u8fde\u90fd\u884c\u3002 \u4f46\u76f4\u63a5\u8fd9\u4e48\u5e72\u4f1a\u7b97\u91cd\uff0c\u539f\u56e0\u663e\u7136\uff0c\u8981\u5904\u7406\u7684\u8bdd\u4f1a\u6bd4\u8f83\u590d\u6742\u3002 \u8fd9\u6837\u662f\u6b63\u7740\u7b97\uff0c\u975e\u5e38\u9ebb\u70e6\u3002 \u6240\u4ee5\u6211\u4eec\u8003\u8651\u5012\u7740\u7b97\uff0c\u4e5f\u7b97\u662f\u4e00\u79cd\u6bd4\u8f83\u91cd\u8981\u7684\u60f3\u6cd5\u6765\u907f\u514d\u5927\u5206\u8ba8\u3002 \u6211\u4eec\u5047\u8bbe \\(G\\) \u662f\u5b8c\u5168\u56fe\uff0c\u4e5f\u5c31\u662f\u628a\u7f3a\u7684\u8fb9\u90fd\u8fde\u4e0a\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8ba1\u7b97\u6709\u591a\u5c11\u8fb9\u662f\u5728\u540c\u4e00\u4e2a\u8054\u901a\u5206\u91cf\u91cc\u9762\u8fde\u63a5\u4e86\u540c\u4e00\u79cd\u989c\u8272\u7684\u8fb9\u5373\u53ef\u3002 \u8bbe\u6709 \\(q\\) \u4e2a\u8fde\u901a\u5757\uff0c\u7b2c \\(i\\) \u4e2a\u8fde\u901a\u5757\u6709\u9ed1\u70b9 \\(a_i\\) \u4e2a\uff0c\u767d\u70b9 \\(b_i\\) \u4e2a\u3002 \u8bb0 \\(f(x) = x^2 - x\\) \uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f \\(f(n) - m - \\sum\\limits_{i = 1}^q [f(a_i) + f(b_i)]\\) \u3002 \u7b97\u662f\u5f88\u57fa\u7840\u7684\u6b63\u96be\u5219\u53cd\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int n , m ; int tot = 0 , head [ si ]; struct Edge { int ver , Next ; } e [ si << 1 ]; inline void add ( int u , int v ) { e [ tot ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot ++ ; } int c [ si ], ok = 0 ; int cnt , a [ si ], b [ si ]; void dfs ( int u , int col ) { c [ u ] = col ; if ( col == 1 ) a [ cnt ] ++ ; else b [ cnt ] ++ ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( c [ v ] == col ) { ok = -1 ; return ; } if ( c [ v ] == 3 - col ) continue ; if ( c [ v ] == 0 ) dfs ( v , 3 - col ); } return ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); memset ( c , 0 , sizeof c ); memset ( head , -1 , sizeof head ); cin >> n >> m ; for ( int i = 1 ; i <= m ; ++ i ) { int u , v ; cin >> u >> v ; add ( u , v ), add ( v , u ); } i64 ans = ( 1l l * n * ( n - 1 )) / 2l l - m ; for ( int i = 1 ; i <= n ; ++ i ) { if ( ! c [ i ]) { ++ cnt , dfs ( i , 1 ); if ( ok == -1 ) { cout << \"0\" << endl ; return 0 ; } ans -= ( 1l l * a [ cnt ] * ( a [ cnt ] - 1 )) / 2l l ; ans -= ( 1l l * b [ cnt ] * ( b [ cnt ] - 1 )) / 2l l ; } } cout << ans << endl ; return 0 ; } // ()()()(? ABC282E - Choose Two and Eat One \u03c8(\uff40\u2207\u00b4)\u03c8 \u9898\u9762\u6682\u7565 \u600e\u4e48\u5c31\u662f\u6700\u5927\u751f\u6210\u6811\u554a\u5367\u69fd\u3002 \u5c31\u662f \\((x, y)\\) \u8fde\u4e00\u6761 \\(x^y + y^x (\\mod m)\\) \u7684\u8fb9\uff0c\u7136\u540e\u6700\u5927\u751f\u6210\u6811\u5c31\u884c\u4e86\u3002 \u611f\u89c9\u8981\u60f3\u5230\u8fd9\u4e2a\u5e94\u8be5\u9700\u8981\u6ce8\u610f\u5230\u9009 n - 1 \u4e2a\u5427\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; #define int i64 const int si = 5e2 + 10 ; int n , m ; int a [ si ]; int qpow ( int v , int b , int mod ) { int ret = 1 % mod ; for (; b ; b >>= 1 ) { if ( b & 1 ) ret = ( ret * v % mod ) % mod ; v = ( v * v % mod ) % mod ; } return ret % mod ; } struct Edge { int x , y , w ; bool operator < ( const Edge & b ) const { return w > b . w ; } } e [ si * si ]; int pa [ si ], cnt = 0 ; inline int root ( int x ) { if ( pa [ x ] != x ) pa [ x ] = root ( pa [ x ]); return pa [ x ]; } void Merge ( int u , int v ) { int ru = root ( u ), rv = root ( v ); if ( ru == rv ) return ; pa [ ru ] = rv ; return ; } signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> m ; for ( int i = 1 ; i <= n ; ++ i ) { cin >> a [ i ], pa [ i ] = i ; } for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = i + 1 ; j <= n ; ++ j ) { e [ ++ cnt ] = ( Edge ){ i , j , ( qpow ( a [ i ], a [ j ], m ) + qpow ( a [ j ], a [ i ], m )) % m }; } } int ans = 0 ; sort ( e + 1 , e + 1 + cnt ); for ( int i = 1 ; i <= cnt ; ++ i ) { int u = e [ i ]. x , v = e [ i ]. y ; if ( root ( u ) == root ( v )) continue ; ans = ( ans + e [ i ]. w ), Merge ( u , v ); } cout << ans << endl ; return 0 ; } // ()()()(? ABC282F - Union of Two Sets \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u662f\u4e00\u9053\u4ea4\u4e92\u9898 \u9996\u5148\uff0c\u7ed9\u51fa\u4e00\u4e2a\u6b63\u6574\u6570 \\(n\\) \uff08 \\(1\\le n\\le 4000\\) \uff09\uff0c\u4f60\u9700\u8981\u6784\u9020 \\(m\\) \uff08 \\(1\\le m\\le 50000\\) \uff09 \u4e2a\u533a\u95f4 \\([l_i,r_i]\\) \uff0c\u6ee1\u8db3 \\(1\\le l_i \\le r_i \\le n\\) \uff0c\u8f93\u51fa \\(m\\) \u548c\u8fd9 \\(m\\) \u4e2a\u533a\u95f4\uff0c\u8fd9\u4e9b\u533a\u95f4\u7684\u7f16\u53f7\u6309\u8f93\u51fa\u987a\u5e8f\u4f9d\u6b21\u4e3a \\(1,2,\\cdots ,m\\) \u3002 \u7136\u540e\uff0c\u7ed9\u51fa\u4e00\u4e2a\u6b63\u6574\u6570 \\(q\\) \uff08 \\(1\\le q\\le 10^5\\) \uff09\uff0c\u8868\u793a\u6709 \\(q\\) \u6b21\u8be2\u95ee\u3002\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\uff0c\u7ed9\u5b9a\u533a\u95f4 \\([l,r]\\) \uff0c\u4f60\u8981\u627e\u5230\u4e24\u4e2a\u6574\u6570 \\(i,j\\) \uff08 \\(1\\le i,j \\le n\\) \uff0c \\(i\\) \u53ef\u4ee5\u7b49\u4e8e \\(j\\) \uff09\uff0c\u6ee1\u8db3\u5728\u7b2c\u4e00\u6b65\u4e2d\u6784\u9020\u7684\u533a\u95f4\u4e2d \\([l_i,r_i]\\) \u4e0e \\([l_j,r_j]\\) \u7684\u5e76\u96c6\u7b49\u4e8e \\([l,r]\\) \uff0c\u8f93\u51fa \\([i,j]\\) \u3002 \u4ea4\u4e92\u9898\uff0c\u611f\u89c9\u5c31\u662f\u4ec0\u4e48\u795e\u4ed9\u6784\u9020\u3002 \u6309\u5c3f\u6027\u6765\u770b\uff0c\u4ea4\u4e92\u9898\u4e00\u822c\u4f1a\u9650\u5236\u6784\u9020\u6216\u8005\u64cd\u4f5c\u7684\u6b21\u6570\uff0c\u6240\u4ee5\u89c2\u5bdf\u6570\u636e\u8303\u56f4\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u9009\u62e9\u3002 \u663e\u7136 \\(m\\) \u662f\u8d8a\u5927\u8d8a\u597d\uff0c\u6211\u4eec\u76f4\u63a5\u5f53\u4f5c \\(5\\times 10^4\\) \u5904\u7406\u3002 \u7136\u540e\u53d1\u73b0 \\(n\\) \u662f \\(4\\times 10^3\\) \uff0c\u6211\u4eec\u5e0c\u671b\u662f\u80fd\u51d1\u51fa\u6240\u6709\u533a\u95f4\uff0c\u6240\u4ee5\u4e0d\u59a8\u8003\u8651\u679a\u4e3e \\(i \\in [1,n]\\) \u7136\u540e\u7ed9\u6bcf\u4e2a \\(i\\) \u5e73\u5747\u5206\u914d\u4e00\u4e0b\u3002 \u53d1\u73b0\u6bcf\u4e2a \\(i\\) \u80fd\u5206\u5230 \\(m / n = 12.5\\) \u4e2a\u533a\u95f4\uff0c\u4e00\u822c\u6765\u8bf4\u4ea4\u4e92\u9898\u4f1a\u5e26 \\(\\log, 2^n\\) \u8fd9\u6837\u7684\u5f62\u5f0f\uff0c\u4e8e\u662f\u6211\u4eec\u770b \\(2^{12.5}\\) \u5927\u6982\u662f\u591a\u5c11\uff0c \\(2^{12}\\) \u662f \\(4096 > 4\\times 10^3\\) \uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u96be\u731c\u5230\u53ef\u80fd\u662f\u500d\u589e\u7684\u5f62\u5f0f\u3002 \u4e8e\u662f\u7ed9\u6bcf\u4e2a \\(i\\) \u5206\u914d\u957f\u5ea6\u4e3a \\(2^j, j \\in [0, n)\\) \u7684\u533a\u95f4\uff0c\u6bcf\u6b21\u8be2\u95ee\u7684\u65f6\u5019\u60f3\u529e\u6cd5\u51d1\u5c31\u884c\u4e86\uff1f \u8fd9\u6837\u80fd\u51d1\u51fa\u5b8c\u6574\u7684\u533a\u95f4\u5417\uff1f\u76f4\u89c9\u4e0a\u662f\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3a\u6709\u90a3\u4e2a\u5206\u89e3\u6210 \\(2\\) \u7684\u6b21\u5e42\u7684\u7ed3\u8bba\u3002\u5148\u8bd5\u4e00\u8bd5\u3002 \u786e\u5b9e\u662f\u8fd9\u6837\u7684\uff0c\u8fd9\u4e1c\u897f\u662f st \u8868\u554a\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 // author : black_trees #include <map> #include <cmath> #include <cstdio> #include <vector> #include <cassert> #include <cstring> #include <utility> #include <iostream> #include <algorithm> // #define endl '\\n' // interactive problem, use endl to flush the buffer. using namespace std ; using i64 = long long ; const int si = 4e3 + 10 ; int n , m , q ; std :: vector < int > l [ si ], r [ si ]; std :: map < std :: pair < int , int > , int > mp ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); mp . clear (); cin >> n ; int t = ( int )( log ( n ) / log ( 2 )) + 1 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 0 ; j <= t ; ++ j ) { // ? is this upperbound right? if ( i + ( 1 << j ) - 1 > n ) continue ; ++ m , mp [ make_pair ( i , i + ( 1 << j ) - 1 )] = m ; r [ i ]. push_back ( i + ( 1 << j ) - 1 ); l [ i + ( 1 << j ) - 1 ]. push_back ( i ); } } cout << m << endl ; for ( int i = 1 ; i <= n ; ++ i ) { for ( auto j : r [ i ]) cout << i << \" \" << j << endl ; } cin >> q ; while ( q -- ) { int L , R ; cin >> L >> R ; int a , b ; auto it = -- upper_bound ( r [ L ]. begin (), r [ L ]. end (), R ); auto itt = lower_bound ( l [ R ]. begin (), l [ R ]. end (), L ); a = mp [ make_pair ( L , * it )], b = mp [ make_pair ( * itt , R )]; cout << a << \" \" << b << endl , assert ( min ( L , * itt ) == L && max ( R , * it ) == R ); } return 0 ; } // ()()()(? ABC283D - Scope \u03c8(\uff40\u2207\u00b4)\u03c8 \u5047\u8bbe\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u53ea\u5305\u542b ( \uff0c ) \u548c\u5c0f\u5199\u5b57\u6bcd\u3002\u5982\u679c\u901a\u8fc7\u4ee5\u4e0b\u6b65\u9aa4\uff0c\u80fd\u4f7f\u5b57\u7b26\u4e32\u4e3a\u7a7a\uff0c\u5219\u79f0\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e3a\u597d\u7684\uff1a \u5220\u9664\u6240\u6709\u5c0f\u5199\u5b57\u6bcd \u4e0d\u505c\u5730\u5220\u9664\u8fde\u7eed\u7684 () \u7ed9\u5b9a\u4e00\u4e2a\u597d\u7684\u5b57\u7b26\u4e32 \\(S\\) \u3002\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u7684\u5c0f\u5199\u5b57\u6bcd\u5bf9\u5e94\u4e00\u4e2a\u5c0f\u7403\u3002\u6b64\u5916\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u7bb1\u5b50\u3002 \u4e00\u4e2a\u4eba\u6309\u7167 \\(1,2,3,\\cdots,|S|\\) \u7684\u987a\u5e8f\u53d6\u7403\uff1a \u5982\u679c \\(S_i\\) \u4e3a ( \uff0c\u4ec0\u4e48\u4e5f\u4e0d\u505a\u3002 \u5982\u679c \\(S_i\\) \u4e3a\u5c0f\u5199\u5b57\u6bcd\uff0c\u5c31\u5c06\u8fd9\u4e2a\u5c0f\u7403\u653e\u5165\u7bb1\u5b50\u4e2d\u3002\u5982\u679c\u8fd9\u4e2a\u5c0f\u7403\u5df2\u7ecf\u51fa\u73b0\u5728\u7bb1\u5b50\u4e2d\uff0c\u4ed6\u4f1a\u6655\u5012\u3002 \u5982\u679c \\(S_i\\) \u4e3a ) \uff0c\u53d6\u5c0f\u4e8e \\(i\\) \u7684\u6700\u5927\u7684 \\(j\\) \uff0c\u4f7f \\(S_i \\sim S_j\\) \u8fd9\u4e2a\u5b50\u4e32\u662f\u597d\u7684\u3002\u5c06 \\(j\\) \u5230 \\(i\\) \u64cd\u4f5c\u4e2d\u653e\u5165\u7684\u5c0f\u7403\u5168\u90e8\u53d6\u51fa\u3002 \u8fd9\u4e0d\u5c31\u5de8\u5927\u8822\u4e00\u4e2a\u9898\uff0c\u663e\u7136\u53ea\u80fd\u6700\u8fd1\u7684\u5de6\u53f3\u62ec\u53f7\u914d\u5bf9\uff0c\u8bb0\u5f55\u4e00\u4e0b\u3001\u6a21\u62df\u6ca1\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 // author : black_trees #include <cmath> #include <stack> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 3e5 + 10 ; int cnt [ si ][ 31 ]; void solve () { string s ; cin >> s , s = ' ' + s ; int n = s . size () - 1 ; std :: stack < int > stk ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j < 26 ; j ++ ) cnt [ i ][ j ] = cnt [ i - 1 ][ j ]; if ( s [ i ] == '(' ) stk . push ( i ); else if ( s [ i ] == ')' ) { for ( int j = 0 ; j < 26 ; j ++ ) cnt [ i ][ j ] = cnt [ stk . top ()][ j ]; stk . pop (); } else { if ( cnt [ i ][ s [ i ] - 'a' ] >= 1 ) { cout << \"No\" << endl ; return ; } cnt [ i ][ s [ i ] - 'a' ] ++ ; } } cout << \"Yes\" << endl ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); solve (); return 0 ; } // ()()()(? ABC283E - Don't Isolate Elements \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e00\u4e2a \\(n\\times m\\) \u7684 \\(01\\) \u77e9\u9635 \\(a\\) \uff0c\u79f0\u4f4d\u4e8e\u7b2c \\(i\\) \u884c\u7b2c \\(j\\) \u5217\u7684\u5143\u7d20\u4e3a \\(a_{i,j}\\) \u3002 \u4f60\u53ef\u4ee5\u8fdb\u884c\u5982\u4e0b\u7684\u64cd\u4f5c\u4efb\u610f\u6b21\uff08\u53ef\u4ee5\u662f \\(0\\) \u6b21\uff09\uff1a - \u9009\u62e9\u4efb\u610f\u4e00\u884c\uff0c\u7ffb\u8f6c\u6b64\u884c\u5185\u7684\u6240\u6709\u5143\u7d20\u3002 \u6211\u4eec\u79f0 \\(a_{i,j}\\) \u88ab\u9694\u79bb\uff0c\u5f53\u4e14\u4ec5\u5f53\u4e0e\u5176\u56db\u8054\u901a\u7684\u56db\u4e2a\u5143\u7d20 \\(a_{i - 1,j}, a_{i + 1, j}, a_{i, j - 1}, a_{i, j + 1}\\) \u7684 \\(01\\) \u6027\u4e0e\u5176\u5747\u4e0d\u76f8\u540c\u3002 \u8bf7\u8f93\u51fa\u4f7f\u5f97\u7ed9\u5b9a\u77e9\u9635\u4e2d\u6ca1\u6709\u5143\u7d20\u88ab\u9694\u79bb\u6240\u9700\u8981\u7684\u6700\u5c0f\u64cd\u4f5c\u6b21\u6570\u3002\u5982\u679c\u65e0\u8bba\u5982\u4f55\u64cd\u4f5c\u90fd\u65e0\u6cd5\u6ee1\u8db3\u8981\u6c42\u5219\u8f93\u51fa -1 \u3002 \\(2\\le n, m \\le 1000\\) \u3002 \u4e0a\u6b21\u770b\u5230\u8fd9\u79cd\u9898\u662f\u4e00\u4e2a\u5173\u706f\u7684\u9898\uff0c\u5c31\u662f 0 1 0 -> 1 0 1 \u7684\u8fd9\u79cd\uff0c\u95ee\u5230\u8fbe\u5408\u6cd5\u72b6\u6001\u6700\u5c0f\u6b65\u6570\uff0c\u597d\u50cf\u662f\u4e2a bfs\u3002 \u6700\u5927\u7684\u95ee\u9898\u662f\u6211\u4e0d\u662f\u5f88\u80fd\u627e\u5230\u8fd9\u91cc\u9762\u7684\u4e00\u4e2a\u201c\u679a\u4e3e\u987a\u5e8f\u201d\uff0c\u6240\u4ee5\u7ecf\u5e38\u60f3\u4e0d\u51fa\u6765\u3002 \u6ce8\u610f\u5230\u4e00\u4e2a\u4e8b\u60c5\u662f\uff0c\u6ca1\u6709\u5b64\u7acb\u5143\u7d20\u7b49\u4ef7\u4e8e\u6ca1\u6709\u5927\u5c0f\u4e3a \\(1\\) \u7684\u8054\u901a\u5757\uff0c\u8003\u8651\u4e00\u4e0b\u600e\u4e48\u5f62\u5f0f\u5316\u8fd9\u4e2a\u64cd\u4f5c\u3002 \u6709\u6ca1\u6709\u53ef\u80fd\u662f\u5148\u5efa\u56fe\uff0c\u7136\u540e\u5efa\u53cd\u56fe\uff1f\u4e4b\u524d\u89c1\u8fc7\u8fd9\u79cd\u72b6\u6001\u5f88\u591a\uff0c\u4f46\u662f\u53ef\u4ee5\u5229\u7528\u7c7b\u4f3c\u5206\u5c42\u56fe\u7684\u601d\u60f3\u8f6c\u5316\u7684\u9898\u3002 \u611f\u89c9\u6bd4\u8f83\u7c7b\u4f3c\uff0c\u56e0\u4e3a\u540c\u5c42\u4e4b\u95f4\u7684\u8fb9\u4e0d\u662f\u53d8\u5316\u7684\uff0c\u6bcf\u6b21\u53d6\u53cd\u5143\u7d20\u4f1a\u8ba9\u4e0a\u4e0b\u4e24\u5c42\u548c\u5f53\u524d\u5c42\u7684\u8fb9\u53d6\u53cd\uff0c\u5e76\u4e14\u663e\u800c\u6613\u89c1\u7684\uff0c\u6bcf\u4e2a\u884c\u6700\u591a\u64cd\u4f5c\u4e00\u6b21\u3002 \u6240\u4ee5\u8003\u8651\u76f4\u63a5\u679a\u4e3e\u6bcf\u4e00\u884c\u7136\u540e\u8003\u8651\u662f\u5426\u64cd\u4f5c\uff0c\u56e0\u4e3a\u4f1a\u5f71\u54cd\u67d0\u4e00\u884c\u7684\u5b64\u7acb\u5143\u7d20\u7684\u53ea\u6709\u4e0a\u4e0b\u4e24\u884c\uff0c\u76f8\u5f53\u4e8e\u627e\u5230\u4e86\u4e00\u4e2a\u679a\u4e3e\u987a\u5e8f\u3002\u8fd9\u4e2a\u72b6\u6001\u6570\u80fd\u51cf\u5230\u5f88\u5c0f\uff0c\u5e94\u8be5\u662f\u8fd9\u6837\u7684\u3002 \u6ce8\u610f\u5230\u662f\u4e0a\u4e0b\u4e24\u884c\uff0c\u7136\u540e\u5c31\u611f\u89c9\u8fd9\u79cd\u95ee\u9898\u5c31\u4e0d\u662f\u5f88\u80fd\u8d2a\u5fc3\uff0c\u5c31\u662f\u4e0d\u80fd\u76f4\u63a5\u626b\u4e00\u904d\u7b97\uff0c\u4e8e\u662f dp\uff0c\u5bf9\u4e8e\u5f53\u524d\u884c\u548c\u4e0a\u4e00\u884c\u52a0\u4e00\u4e2a\u662f\u5426\u64cd\u4f5c\u8fc7\u7684\u72b6\u6001\u5373\u53ef\u3002 \u8f6c\u79fb\u53ef\u80fd\u5f88\u9ebb\u70e6\uff0c\u8981\u5224\u8fb9\u754c\u4ec0\u4e48\u7684\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 1e3 + 10 ; const int inf = 0x3f3f3f3f ; int n , m ; int a [ 2 ][ si ][ si ], dp [ si ][ 2 ][ 2 ]; bool check ( int l , int r , int u , int d , int mid ) { return ( l != mid && r != mid && u != mid && d != mid ); } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> m ; memset ( dp , 0x3f , sizeof dp ); for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { cin >> a [ 0 ][ i ][ j ], a [ 1 ][ i ][ j ] = a [ 0 ][ i ][ j ] ^ 1 ; } } for ( int i = 0 ; i <= m + 1 ; i ++ ) a [ 0 ][ 0 ][ i ] = a [ 1 ][ 0 ][ i ] = a [ 0 ][ n + 1 ][ i ] = a [ 1 ][ n + 1 ][ i ] = 2 ; for ( int i = 0 ; i <= n + 1 ; i ++ ) a [ 0 ][ i ][ 0 ] = a [ 1 ][ i ][ 0 ] = a [ 0 ][ i ][ m + 1 ] = a [ 1 ][ i ][ m + 1 ] = 2 ; dp [ 0 ][ 0 ][ 0 ] = dp [ 0 ][ 0 ][ 1 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { for ( int k = 0 ; k < 2 ; k ++ ) { for ( int l = 0 ; l < 2 ; l ++ ) { bool ff = false ; for ( int x = 1 ; x <= m ; x ++ ) ff |= check ( a [ k ][ i ][ x - 1 ], a [ k ][ i ][ x + 1 ], a [ j ][ i - 1 ][ x ], a [ l ][ i + 1 ][ x ], a [ k ][ i ][ x ]); if ( ! ff ) dp [ i ][ k ][ l ] = min ( dp [ i ][ k ][ l ], dp [ i - 1 ][ j ][ k ] + k ); } } } } int ans = min ( dp [ n ][ 1 ][ 0 ], dp [ n ][ 0 ][ 0 ]); cout << ( ans == inf ? -1 : ans ) << endl ; return 0 ; } // ()()()(? // https://www.cnblogs.com/DM11/p/17017957.html ABC283F - Permutation Distance \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5217 \\(p\\) \uff0c\u5bf9\u4e8e\u6bcf\u4e2a \\(i\\) \u6c42 \\(\\min\\limits_{j \\not ={i}}\\{|p_i - p_j| + |i - j|\\}\\) \u3002 \\(1\\le n \\le 1.5e5\\) \u3002 \u611f\u89c9\u8fd9\u79cd\u66b4\u529b\u662f\u626b\u4e00\u904d\u6240\u6709\u7684\u4e1c\u897f\u6c42\u6700\u503c\u7684\uff0c\u4e00\u5b9a\u4f1a\u6709\u4e00\u4e2a\u6027\u8d28\u7528\u6765\u6392\u9664\u5197\u6742\u72b6\u6001\u3002 \u8fd9\u91cc\u8fd8\u6709\u5bf9\u4e8e\u6240\u6709 \\(i\\) \u8be2\u95ee\u4e00\u4e2a\u7c7b\u4f3c\u7684\u67ff\u5b50\u7684\u4e1c\u897f\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u8981\u679a\u4e3e\u8d21\u732e\u3002 \u7136\u540e\u6211\u8fd8\u4e0d\u4f1a\u3002 \u53d1\u73b0\u7edd\u5bf9\u503c\u5f88\u9ebb\u70e6\uff0c\u4e8e\u662f\u6211\u4eec\u62c6\u5f00\u6765\u770b\uff08\u4e0d\u8981\u5bb3\u6015\u5206\u8ba8\uff09\uff1b \u5982\u679c \\(P_i > P_j\\) \uff1a 1. \u5982\u679c \\(i > j\\) \uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42 \\(\\min\\{(p_i+i) - (p_j+j)\\}\\) 2. \u5982\u679c \\(i < j\\) \uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42 \\(\\min\\{(p_i-i) - (p_j-j)\\}\\) \u5982\u679c \\(P_i < P_j\\) \uff1a 1. \u5982\u679c \\(i > j\\) \uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42 \\(\\min\\{(-p_i+i) - (-p_j+j)\\}\\) 2. \u5982\u679c \\(i < j\\) \uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42 \\(\\min\\{(-p_i-i) - (-p_j-j)\\}\\) \u5176\u5b9e\u5bf9\u4e8e\u56fa\u5b9a\u7684 \\(i\\) \uff0c\u6211\u4eec\u53ea\u9700\u8981\u8ba9\u540e\u9762\u90a3\u5768 \\(j\\) \u76f8\u5173\u7684\u67ff\u5b50\u5c3d\u91cf\u5927\u3002 \u597d\uff0c\u7136\u540e\u53d1\u73b0\u8fd9\u91cc\u6709\u4e24\u4e2a\u6761\u4ef6\u9650\u5236\uff0c\u6bd4\u8f83\u9ebb\u70e6\uff0c\u56e0\u4e3a\u4e24\u91cd\u9650\u5236\u662f\u4e0d\u597d\u5904\u7406\u7684\u3002 \u5982\u679c\u5355\u72ec\u6765\u7b97\u8fd9\u4e24\u4e2a\u6761\u4ef6\u662f\u5f88\u65b9\u4fbf\u7684\uff0c\u8fd9\u4e2a\u4e0b\u6807\u9650\u5236\u5c31\u76f4\u63a5 RMQ \u6216\u8005\u626b\u4e00\u904d\u8bb0\u5f55\uff0c\u503c\u57df\u9650\u5236\u662f\u7ecf\u5178\u7684\u4e00\u4e2a\u5c0f\u6a21\u578b\uff0c\u53ef\u4ee5\u5728\u503c\u57df\u4e0a\u5229\u7528\u6811\u72b6\u6570\u7ec4\u52a8\u6001\u7ef4\u62a4\u524d\u7f00\u6700\u503c\u6765\u505a\u3002 \u6240\u4ee5\u6211\u4eec\u60f3\u8981\u505a\u7684\u662f\u628a\u8fd9\u4e24\u4e2a\u6761\u4ef6\u5206\u5f00\u7b97\uff0c\u6709\u70b9\u7c7b\u4f3c\u5355\u8c03\u961f\u5217\u4f18\u5316 dp \u90a3\u79cd\uff0c\u56fa\u5b9a\u4e00\u4e2a\uff0c\u5904\u7406\u4e00\u4e2a\u8fd9\u6837\u5b50\u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u5148\u4ece\u524d\u5f80\u540e\u679a\u4e3e \\(i\\) \uff0c\u7136\u540e\u4ece\u540e\u5f80\u524d\u679a\u4e3e \\(i\\) \uff0c\u8fd9\u4e2a\u76f8\u5f53\u4e8e\u6ee1\u8db3\u4e0b\u6807\u9650\u5236\u3002 \u7136\u540e\u6bcf\u6b21\u626b\u7684\u65f6\u5019\u7528\u4e24\u4e2a\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u4e00\u4e0b\u503c\u57df\u4e0a\u7684\u524d/\u540e\u7f00\u6700\u503c\u5373\u53ef\u3002 \u8fd9\u4e2a\u5957\u8def\u662f wcx \u8001\u5e08\u6559\u7684\uff0c\u542c\u8bf4\u8fd9\u4e2a\u4e1c\u897f\u5c31\u662f\u4e8c\u7ef4\u6570\u70b9\uff0c\u6709\u5fc5\u8981\u5b66\u4e00\u4e0b\u3002 \u5367\u69fd\uff0c\u5199\u51fa\u6765\u7b80\u5355\u8c03\u4e00\u4e0b 1A \u4e86 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; const int inf = 0x3f3f3f3f ; int n , p [ si ]; inline int lowbit ( int x ) { return x & - x ; } struct Fenwick { int t [ si ]; void Init () { memset ( t , -0x3f , sizeof t ); } void Add ( int x , int v ) { while ( x <= n ) { t [ x ] = max ( t [ x ], v ); x += lowbit ( x ); } } int Que ( int x ) { int ret = - inf ; // ! \uff01\uff01\uff01\uff01\uff01 while ( x ) { ret = max ( ret , t [ x ]); x -= lowbit ( x ); } return ret ; } } pf , sf ; int res [ si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); pf . Init (), sf . Init (); cin >> n , memset ( res , 0x3f , sizeof res ); for ( int i = 1 ; i <= n ; ++ i ) cin >> p [ i ]; // i > j for ( int i = 1 ; i <= n ; ++ i ) { int ans = inf ; ans = min ( ans , p [ i ] + i - pf . Que ( p [ i ])); // prefix ans = min ( ans , - p [ i ] + i - sf . Que ( n - p [ i ] + 1 )); // suffix res [ i ] = min ( res [ i ], ans ); pf . Add ( p [ i ], p [ i ] + i ), sf . Add ( n - p [ i ] + 1 , - p [ i ] + i ); } // i < j pf . Init (), sf . Init (); for ( int i = n ; i >= 1 ; -- i ) { int ans = inf ; ans = min ( ans , p [ i ] - i - pf . Que ( p [ i ])); // prefix ans = min ( ans , - p [ i ] - i - sf . Que ( n - p [ i ] + 1 )); // suffix res [ i ] = min ( res [ i ], ans ); pf . Add ( p [ i ], p [ i ] - i ), sf . Add ( n - p [ i ] + 1 , - p [ i ] - i ); } for ( int i = 1 ; i <= n ; ++ i ) cout << res [ i ] << \" \\n \" [ i == n ]; return 0 ; } // ()()()(?","title":"2022\u5e7411,12\u6708AT&CF"},{"location":"rec/atcf-for-2022-11-12/#cf-at","text":"\u5927\u90e8\u5206\u7ffb\u8bd1\u6765\u81ea\u6d1b\u8c37\u3002","title":"\u5341\u4e00 &amp; \u5341\u4e8c\u6708 CF AT \u4e22\u4eba\u505a\u9898\u8bb0\u5f55"},{"location":"rec/atcf-for-2022-11-12/#abc277e-crystal-switches","text":"\u7ed9\u4f60\u4e00\u5f20\u7b80\u5355\u65e0\u5411\u56fe\uff0c\u6bcf\u4e2a\u8fb9 \\((u_i, v_i)\\) \u6709\u4e00\u4e2a\u5c5e\u6027 \\(a_i\\) \u3002 \u5176\u4e2d\u5982\u679c \\(a_i\\) \u4e3a \\(1\\) \u8868\u793a\u8fd9\u6761\u8fb9\u662f\u53ef\u4ee5\u901a\u884c\u7684\uff0c\u5426\u5219\u662f\u4e0d\u53ef\u901a\u884c\u7684\u3002 \u6709 \\(K\\) \u4e2a\u7279\u6b8a\u70b9\uff0c\u5982\u679c\u4f60\u5904\u4e8e\u8fd9\u4e2a\u7279\u6b8a\u70b9\uff0c\u4f60\u53ef\u4ee5\u8fdb\u884c\u4e00\u6b21\u8f6c\u6362\uff0c\u4f7f\u5f97\u6240\u6709\u7684 \\(a_i\\) \u53d6\u53cd\u3002 \u95ee\u4f60\u4ece \\(1 \\to n\\) \u7684\u6700\u77ed\u8def\uff08\u65e0\u89e3\u5219\u7b54\u6848\u4e3a -1 \uff09\u3002 \\(2\\le n \\le 2e5, 1\\le m \\le 1e5, 0\\le K \\le n\\) \u3002 \u5443\u5443\uff0c\u611f\u89c9\u662f\u6bd4\u8f83\u677f\u5b50\u7684\u5206\u5c42\u56fe\u6700\u77ed\u8def\u3002 \u5c31\u662f\u4f60\u770b\u5230\u6709\u4e00\u4e9b\u8fb9\u8981\u5728\u7279\u6b8a\u60c5\u51b5\u4e0b\u624d\u80fd\u901a\u884c\u6216\u8005\u8fd9\u4e9b\u8fb9\u7684\u8fb9\u6743\u4f1a\u6539\u53d8\u4e4b\u7c7b\u7684\u65f6\u5019\uff0c\u5c31\u8003\u8651\u628a\u8fb9\u5206\u7c7b\u3002 \u5e76\u4e14\u62c6\u70b9\uff0c\u628a\u56fe\u5206\u6210\u591a\u5c42\uff0c\u5982\u679c\u9047\u5230\u53ef\u4ee5\u8fdb\u884c\u4e0d\u540c\u5c42\u8f6c\u79fb\u7684\u8282\u70b9\uff08\u6bd4\u5982\u672c\u9898\u4e2d\u7684\u7279\u6b8a\u70b9\uff09\uff0c\u5c31\u5728\u4e0d\u540c\u5c42\u4e4b\u95f4\u8fde\u8fb9\uff08\u8fd9\u6761\u8fb9\u7684\u4ee3\u4ef7\u53d6\u51b3\u4e8e\u5728\u5c42\u4e4b\u95f4\u8f6c\u79fb\u7684\u4ee3\u4ef7\uff09\u3002 \u4e4b\u540e\u95ee\u9898\u5c31\u53ef\u4ee5\u8f6c\u5316\u6210\u666e\u901a\u7684\u6700\u77ed\u8def\u95ee\u9898\u4e86\u3002 \u5bf9\u5e94\u5230\u8fd9\u9053\u9898\u4e0a\u5c31\u662f\u8003\u8651\u628a 0/1 \u72b6\u6001\u7684\u8fb9\u5206\u5f00\u8fde\uff0c\u540c\u5c42\u8fb9\u7684\u8fb9\u6743\u8bbe\u7f6e\u4e3a \\(1\\) \uff0c\u56e0\u4e3a\u6211\u4eec\u8f6c\u6362\u4e00\u6b21\u4e0d\u8017\u8d39\u4efb\u4f55\u4ee3\u4ef7\uff0c\u6240\u4ee5\u4e0d\u540c\u5c42\u4e4b\u95f4\u7684\u8fb9\u7684\u8fb9\u6743\u662f \\(0\\) \u3002 \u7c7b\u4f3c\u8fd9\u6837\uff1a \u7136\u540e\u8fde\u5b8c\u8fb9\u76f4\u63a5\u6c42\u6700\u77ed\u8def\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 // author : black_trees #include <cmath> #include <queue> #include <cstdio> #include <utility> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int n , m ; int tot = 0 , head [ si << 1 ]; struct Edge { int ver , Next , w ; } e [ si << 2 ]; inline void add ( int u , int v , int w ) { e [ tot ] = ( Edge ){ v , head [ u ], w }, head [ u ] = tot ++ ; } std :: priority_queue < std :: pair < int , int > > q ; bool vis [ si << 1 ]; int dis [ si << 1 ]; void dijkstra ( int s ) { memset ( vis , false , sizeof vis ), memset ( dis , 0x3f , sizeof dis ); dis [ s ] = 0 , q . push ({ dis [ s ], s }); while ( ! q . empty ()) { int u = q . top (). second ; q . pop (); if ( vis [ u ]) continue ; vis [ u ] = true ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( dis [ v ] > dis [ u ] + w ) dis [ v ] = dis [ u ] + w , q . push ({ - dis [ v ], v }); } } } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); memset ( head , -1 , sizeof head ); int K ; cin >> n >> m >> K ; for ( int i = 1 ; i <= m ; ++ i ) { int u , v , w ; cin >> u >> v >> w ; if ( w == 0 ) add ( u + n , v + n , 1 ), add ( v + n , u + n , 1 ); if ( w == 1 ) add ( u , v , 1 ), add ( v , u , 1 ); } for ( int i = 1 ; i <= K ; ++ i ) { int gt ; cin >> gt ; add ( gt , gt + n , 0 ), add ( gt + n , gt , 0 ); } dijkstra ( 1 ); int ans = min ( dis [ n ], dis [ n + n ]); if ( ans < 0x3f3f3f3f ) cout << ans << endl ; else cout << \"-1\" << endl ; return 0 ; }","title":"ABC277E - Crystal Switches"},{"location":"rec/atcf-for-2022-11-12/#abc279d-freefall","text":"\u7ed9\u5b9a\u4e24\u4e2a\u6570 \\(a\\) \uff0c \\(b\\) \uff08 \\(1 \\le a, b \\le 10^{18}\\) \uff09\uff0c\u6c42\u51fa \\(\\min\\limits_{g = 1}^\\infty\\{b \\times (g - 1) + \\frac{a}{\\sqrt{g}}\\}\\) \u3002\u7cbe\u5ea6\u8bef\u5dee\u4e0d\u8d85\u8fc7 \\(10^{-6}\\) \u3002 translated by @ liangbowen \u3002 \u8bbe\u64cd\u4f5c\u6b21\u6570\u4e3a \\(x\\) \uff0c\u5219\u603b\u65f6\u95f4\u4e3a \\(T(x) = \\dfrac{A}{1+x} + Bx\\) \u3002 \u6839\u636e\u521d\u7b49\u51fd\u6570\u6c42\u5bfc\u6cd5\u5219\u5bf9 \\(T(x)\\) \u6c42\u5bfc\u5f97\uff1a \\(T^{\\prime}(x) = B - \\dfrac{A}{2(x+1)^{\\frac{3}{2}}}\\) \u3002 \u4ee4 \\(T^\\prime(x) = 0 \\Rightarrow x = (\\dfrac{A}{2B})^{\\frac{2}{3}} - 1\\) \u3002 \u56e0\u4e3a \\(x \\in \\mathbb{N+}\\) \uff0c\u6240\u4ee5 \\(x = \\text{round}((\\dfrac{A}{2B})^{\\frac{2}{3}} - 1)\\) \u3002 \u6ce8\u610f\u5230 \\(A, B\\) \u4e0a\u754c\u4e3a \\(10^{18}\\) \uff0c\u6240\u4ee5\u8981\u62c6\u5f00\u7b97\u3002 \u5f97\u5230 \\(x\\) \u7684\u503c\u4e4b\u540e\u5e26\u5165 \\(T(x)\\) \u5373\u53ef\u5f97\u5230\u7b54\u6848\u3002 \u4e0d\u8fc7\u8fd9\u79cd\u51fd\u6570\u6c42\u6700\u503c\u7684\u5bb9\u6613\u51fa\u8bef\u5dee\uff0c\u4e0d\u7136\u5c31\u4e8c\u5206\uff0c\u4e0d\u7136\u5c31\u5728\u6781\u503c\u70b9\u9644\u8fd1\u591a\u53d6\u51e0\u4e2a\u70b9\u6c42 \\(\\min\\) \uff0c\u4e0d\u7136\u96be\u9876\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iomanip> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; using ldb = long double ; const ldb alpha = ( 1.0 / 3.0 ); int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); ldb a , b ; cin >> a >> b , b *= 2.0 ; ldb x = round ((( pow ( a , alpha ) * pow ( a , alpha )) / ( pow ( b , alpha ) * pow ( b , alpha ))) - 1.0 ); if ( x < 0 ) x = 0 ; ldb ans = 1e18 + 7 ; for ( ldb i = max (( ldb ) 0.0 , x - 10.0 ); i <= min (( ldb ) 1e18 + 7.0 , x + 10.0 ); i += 1.0 ) ans = min ( ans , ( b / 2.0 ) * i + ( a / sqrt ( i + 1.0 ))); cout << fixed << setprecision ( 10 ) << ans << endl ; return 0 ; }","title":"ABC279D - Freefall"},{"location":"rec/atcf-for-2022-11-12/#abc279e-cheating-amidakuji","text":"\u7ed9\u4f60\u4e24\u4e2a\u6570\u7ec4 \\(A\\) \u548c \\(B\\) \uff0c\u521d\u59cb\u65f6\uff0c \\(B_i=i\\) \u3002 \u5b9a\u4e49\u7b2c \\(k\\) \u6b21\u64cd\u4f5c\u4e3a \\(\\operatorname{swap}(B_{A_k},B_{A_k+1})\\) \u5b9a\u4e49 \\(S_i\\) \u4e3a\u4f9d\u6b21\u8fdb\u884c \\(1\\) \u5230 \\(m\\) \u9664 \\(i\\) \u53f7\u64cd\u4f5c\u5916\u7684\u6240\u6709\u64cd\u4f5c\u540e\uff0c\u6570\u5b57 \\(1\\) \u5728 \\(B\\) \u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\u3002 \u8bf7\u4f9d\u6b21\u8f93\u51fa \\(S_i\\) \u3002 \u6ce8\u610f\u5230\u6709\u4e9b\u64cd\u4f5c\u662f\u4e0d\u4f1a\u5f71\u54cd \\(1\\) \u7684\u4f4d\u7f6e\u7684\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5173\u5fc3 \\(1\\) \u7684\u4f4d\u7f6e\u3002 \u53ef\u4ee5\u5148\u8bb0\u5f55\u76f4\u63a5\u8fdb\u884c\u6240\u6709\u64cd\u4f5c\u4e4b\u540e\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e \\(p\\) \u3002 \u6ce8\u610f\u5230 \\(ans_i\\) \u662f\u8868\u793a\u4e0d\u8fdb\u884c\u64cd\u4f5c \\(i\\) \u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u53ef\u4ee5\u5148\u505a \\(1 \\sim i\\) \uff0c\u7136\u540e\u770b\u4e00\u4e0b\u5f53\u524d\u4ea4\u6362\u7684\u4e24\u4e2a\u5143\u7d20 \\(b(a(i)), b(a(i) + 1)\\) \u54ea\u4e2a\u662f \\(1\\) \uff0c\u5982\u679c \\(b(a(i))\\) \u662f \\(1\\) \uff0c\u7b54\u6848\u5c31\u662f \\(p(b(a(i) + 1))\\) \uff0c\u53cd\u4e4b\u4ea6\u7136\uff0c\u5982\u679c\u90fd\u4e0d\u662f \\(1\\) \u8bc1\u660e\u4ed6\u4eec\u5bf9\u7b54\u6848\u6ca1\u6709\u5f71\u54cd\uff0c\u7b54\u6848\u662f \\(p(1)\\) \u3002 \u590d\u6742\u5ea6 \\(O(n)\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int n , m ; int a [ si ], b [ si ], p [ si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> m ; for ( int i = 1 ; i <= m ; ++ i ) cin >> a [ i ]; for ( int i = 1 ; i <= n ; ++ i ) b [ i ] = i ; for ( int i = 1 ; i <= m ; ++ i ) swap ( b [ a [ i ]], b [ a [ i ] + 1 ]); for ( int i = 1 ; i <= n ; ++ i ) p [ b [ i ]] = i , b [ i ] = i ; for ( int i = 1 ; i <= m ; ++ i ) { if ( b [ a [ i ]] == 1 ) cout << p [ b [ a [ i ] + 1 ]] << endl ; else if ( b [ a [ i ] + 1 ] == 1 ) cout << p [ b [ a [ i ]]] << endl ; else cout << p [ 1 ] << endl ; swap ( b [ a [ i ]], b [ a [ i ] + 1 ]); } return 0 ; }","title":"ABC279E - Cheating Amidakuji"},{"location":"rec/atcf-for-2022-11-12/#abc279f-box","text":"\u6709 \\(N\\) \u4e2a\u7bb1\u5b50\u548c\u65e0\u6570\u4e2a\u7f16\u53f7\u4ece \\(1\\) \u5f00\u59cb\u7684\u7403\uff0c\u7b2c \\(i\\) \u4e2a\u7bb1\u5b50\u5f00\u59cb\u65f6\u53ea\u88c5\u4e86\u7f16\u53f7\u4e3a \\(i\\) \u7684\u7403\u3002 \u6709 \\(Q\\) \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5206\u522b\u53ef\u80fd\u4e3a\uff1a 1 X Y \u5c06 \\(Y\\) \u7bb1\u4e2d\u7684\u7403\u5168\u90e8\u653e\u5165 \\(X\\) \u7bb1\u3002 2 X \u5c06\u76ee\u524d\u6700\u5c0f\u7684\u672a\u88ab\u653e\u5230\u7bb1\u5b50\u91cc\u7684\u7403\u653e\u5230 \\(X\\) \u7bb1\u3002 3 X \u67e5\u8be2 \\(X\\) \u7403\u5728\u54ea\u4e2a\u7bb1\u5b50\u4e2d\uff0c\u8f93\u51fa\u8be5\u7bb1\u7f16\u53f7\uff0c\u8f93\u51fa\u95f4\u7528\u6362\u884c\u9694\u5f00\u3002 \u9996\u5148\u8fd9\u4e2a \\(10^{100}\\) \u4e00\u770b\u5c31\u662f\u5413\u4eba\u7684\uff0c\u6ce8\u610f\u5230 \\(n, q \\le 3e5\\) \uff0c\u6240\u4ee5\u6bcf\u4e2a\u76d2\u5b50\u91cc\u7684\u7403\u6570\u80af\u5b9a\u4e0d\u8d85\u8fc7 \\(3e5\\) \uff0c\u5e76\u4e14\u76d2\u5b50\u662f\u4e0d\u4f1a\u65b0\u4ea7\u751f\u7684\uff0c\u6240\u4ee5\u79bb\u6563\u5316\u4e5f\u4e0d\u9700\u8981\u3002 \u4f46\u662f\u6ce8\u610f\u5230\u96c6\u5408\u548c\u5c0f\u7403\u5404\u81ea\u662f\u6709\u7f16\u53f7\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u9700\u8981\u5206\u5f00\u5904\u7406\uff0c\u8fd9\u4e2a\u5c31\u7528\u4e00\u4e2a map \u6807\u8bb0\u4e00\u4e0b\u5c31\u884c\u4e86\uff08\u4e3a\u4ec0\u4e48\u4e0d\u662f bool array \u5728\u4e0b\u9762\u80fd\u5f97\u5230\u89e3\u91ca\uff09\u3002 \u9996\u5148\u770b\u64cd\u4f5c \\(1\\) \uff0c\u628a\u4e00\u4e2a\u76d2\u5b50\u7684\u7403\u653e\u5230\u53e6\u5916\u4e00\u4e2a\u91cc\u9762\u3002 \u6ce8\u610f\u8fd9\u4e0d\u662f\u7b80\u5355\u7684 Merge\uff0c\u800c\u662f Merge \u5b8c\u4e86\u4e4b\u540e\u8fd8\u8981\u6e05\u7a7a\u3002 \u4f46\u662f\u5982\u679c\u6211\u4eec\u76f4\u63a5 Merge \u8fc7\u53bb\uff0c \\(y\\) \u4e0b\u9762\u6302\u7740\u90a3\u4e48\u591a\u8282\u70b9\uff0c\u800c\u4e14\u4e5f\u4e0d\u80fd\u76f4\u63a5\u53cd\u5411\u8bbf\u95ee\u5230\uff0c\u80af\u5b9a\u4f1a\u6709\u95ee\u9898\u3002 \u8fd9\u65f6\u5019\u6709\u4e00\u4e2a\u65b0\u5947\u7684\u60f3\u6cd5\uff0c\u6211\u4eec\u8003\u8651\u7ed9 \\(y\\) \u5efa\u4e00\u4e2a\u526f\u672c\u6765\u4ee3\u66ff \\(y\\) \u8fd9\u4e2a\u76d2\u5b50\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u76f4\u63a5\u628a\u539f\u6765\u7684 \\(y\\) Merge \u5230 \\(x\\) \u91cc\u9762\uff0c\u5e76\u4e14\u8fd9\u4e2a \\(y\\) \u81ea\u5df1\u672c\u8eab\u4e0d\u7b97 \\(size\\) \uff0c\u90a3\u5b9e\u73b0\u7684\u65f6\u5019\u5c31\u9700\u8981\u79bb\u6563\u5316\u4e86\u3002 \u5177\u4f53\u65b9\u5f0f\u662f\uff0c\u628a\u539f\u6765\u7684\u96c6\u5408\u76f4\u63a5 Merge \u8fc7\u53bb\uff0c\u8bb0\u5f55\u5b83\u4e0d\u518d\u662f\u4e00\u4e2a\u76d2\u5b50\uff0c\u800c\u662f\u4e00\u4e2a\u4e2d\u8f6c\u8282\u70b9\u4e14\u4e0d\u5360 \\(size\\) \uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u76d2\u5b50\u7684\u7f16\u53f7\u6620\u5c04\u5230\u4e00\u4e2a\u65b0\u7684\u526f\u672c\u4e0a\u9762\uff0c\u521d\u59cb\u5316\u8fd9\u4e2a\u526f\u672c\u7684\u4fe1\u606f\uff0c\u5e76\u4e14\u4e0d\u7b97 \\(size\\) \u3002 \u7136\u540e\u53d1\u73b0\u64cd\u4f5c \\(2\\) \u672c\u8d28\u662f\u7c7b\u4f3c\u7684\uff0c\u53ea\u4e0d\u8fc7\u6211\u4eec\u73b0\u5728\u662f\u4fdd\u7559\u8fd9\u4e2a\u8282\u70b9\uff0c\u65b0\u5f00\u4e00\u4e2a\u526f\u672c Add \u5230\u76d2\u5b50\u91cc\u9762\u53bb\uff0c\u4e14\u8fd9\u4e2a\u526f\u672c\u4e0d\u7b97 \\(size\\) \uff0c\u5e76\u628a\u539f\u6765\u8282\u70b9\u6240\u5728\u96c6\u5408 \\(size\\) \u51cf\u4e00\u3002 \u64cd\u4f5c \\(3\\) \u5c31\u662f\u7b80\u5355\u7684\u8be2\u95ee\u3002 \u5b8c\u86cb\uff0c\u8bfb\u9519\u9898\u4e86\uff0c\u6211\u4ee5\u4e3a\u64cd\u4f5c\u4e8c\u662f\u8003\u8651\u5f53\u524d\u76d2\u5b50\u6709\u591a\u5c11\u4e2a\u3002 \u7eaf\u7eaf\u50bb\u903c\u554a\uff0c\u4f46\u662f\u611f\u89c9\u8fd9\u4e2a\u9898\u53ef\u4ee5\u51fa\u51fa\u6765\u6254\u7ed9\u666e\u53ca\u7ec4\u5c0f\u670b\u53cb\u7ec3\u4e60\u3002 \u4f46\u662f\u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\u9650\u5236\u611f\u89c9\u4e5f\u5dee\u4e0d\u591a\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 3e5 + 10 ; int n , m , q ; int raw [ si << 2 ], val [ si << 2 ], pa [ si << 2 ], b [ si << 2 ]; int root ( int x ) { if ( pa [ x ] != x ) return pa [ x ] = root ( pa [ x ]); return pa [ x ]; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> q , m = n ; for ( int i = 1 ; i <= n ; ++ i ) pa [ i ] = raw [ i ] = val [ i ] = b [ i ] = i ; int tot = n ; for ( int i = 1 ; i <= q ; ++ i ) { int opt , x , y ; cin >> opt ; if ( opt == 3 ) cin >> x , cout << raw [ root ( b [ x ])] << endl ; if ( opt == 1 ) cin >> x >> y , pa [ val [ y ]] = pa [ val [ x ]], val [ y ] = ++ m , raw [ m ] = y , pa [ m ] = m ; if ( opt == 2 ) cin >> x , b [ ++ tot ] = val [ x ]; } return 0 ; } // ()()()(? /* // author : black_trees #include <map> #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std; using i64 = long long; const int si = 3e5 + 10; int n, m, q; int raw[si << 2], val[si << 2]; std::map<int, bool> is_box; int pa[si << 2], siz[si << 2]; int root(int x) { if(pa[x] != x) pa[x] = root(pa[x]); return pa[x]; } void Merge(int x, int y) { int rx = root(x), ry = root(y); if(rx == ry) return; pa[ry] = rx, siz[rx] += siz[ry]; } int main() { cin.tie(0) -> sync_with_stdio(false); cin.exceptions(cin.failbit | cin.badbit); cin >> n >> q, m = n + n; for(int i = 1; i <= n; ++i) { raw[i] = i, pa[i] = i, siz[i] = 0; is_box[i] = true; } // init boxes for(int i = 1; i <= n; ++i) { raw[i + n] = i, val[i] = i + n, siz[i + n] = 0, pa[i + n] = i + n; } // init balls; for(int i = 1; i <= q; ++i) { int opt, x, y; cin >> opt; if(opt == 3) cin >> x, cout << raw[root(x)] << endl; if(opt == 1) { cin >> x >> y; ++m, raw[m] = raw[y], siz[m] = 0, pa[m] = m; // new copy is_box[m] = true, is_box[y] = false, Merge(x, y); } if(opt == 2) { cin >> x; int rx = root(x), sz = siz[rx]; if(sz >= n) { ++m, pa[m] = m, siz[m] = 1; raw[m] = sz + 1, val[sz + 1] = m; } else { int ry = root(sz + 1); siz[ry]--, raw[val[sz + 1]] = -1; ++m, pa[m] = m, siz[m] = 1, raw[m] = sz + 1, val[sz + 1] = m; Merge(rx, m); } } } return 0; } // ()()()(? */","title":"ABC279F - BOX"},{"location":"rec/atcf-for-2022-11-12/#abc280d-factorial-and-multiple","text":"\u7ed9\u51fa\u4e00\u4e2a\u6570 \\(k\\) \uff0c\u6c42\u4e00\u4e2a\u6570 \\(n\\) \uff0c\u8981\u6c42 \\(n!\\) \u662f \\(k\\) \u7684\u500d\u6570\uff0c\u8f93\u51fa \\(n\\) \u7684\u6700\u5c0f\u503c\u3002 \\(k\\le10^{12}\\) translated by @ PineappleSummer \u3002 \u6ca1\u5565\u597d\u8bf4\u7684\uff0c\u5206\u89e3\u8d28\u56e0\u6570\u7136\u540e\u6c42 \\(\\max\\{p_i^{c_i}!\\}\\) \u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 1e6 + 10 ; i64 c [ si ]; // exponential i64 m = 0 , p [ si ]; // prime factor i64 ans = 1 ; void divide ( i64 n ) { m = 0 ; for ( i64 i = 2 ; i * i <= n ; ++ i ) { if ( n % i == 0 ) { p [ ++ m ] = i , c [ m ] = 0 ; while ( n % i == 0 ) n /= i , c [ m ] ++ ; i64 tmp = 0 , t ; while ( c [ m ] > 0 ) { tmp += i , t = tmp ; while ( t % i == 0 ) t /= i , c [ m ] -- ; } ans = max ( ans , tmp ); } } if ( n > 1 ) p [ ++ m ] = n , c [ m ] = 1 ; ans = max ( ans , n ); } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); i64 k ; cin >> k ; divide ( k ), cout << ans << endl ; return 0 ; }","title":"ABC280D - Factorial and Multiple"},{"location":"rec/atcf-for-2022-11-12/#abc280e-critical-hit","text":"\u6709\u4e00\u4e2a \\(n\\) \u6ef4\u8840\u7684\u602a\u7269\u3002\u6bcf\u4e00\u6b21\u653b\u51fb\u4f60\u6709 \\(P\\%\\) \u7684\u6982\u7387\u8ba9\u5b83\u5931\u53bb \\(2\\) \u6ef4\u8840\uff0c\u6709 \\((100-P)\\%\\) \u7684\u6982\u7387\u8ba9\u5b83\u5931\u53bb \\(1\\) \u6ef4\u8840\u3002\u5982\u679c\u653b\u51fb\u8fc7\u540e\u602a\u7269\u7684\u8840\u91cf \\(\\leq 0\\) \uff0c\u5b83\u5c31\u6b7b\u4e86\u3002\u4f60\u9700\u8981\u4e00\u76f4\u653b\u51fb\u602a\u7269\u76f4\u5230\u5b83\u6b7b\u4ea1\u3002\u8f93\u51fa\u653b\u51fb\u6b21\u6570\u7684\u671f\u671b\u5bf9 \\(998244353\\) \u53d6\u6a21\u7684\u503c\u3002 \\(1\\leq n\\leq 2\\times10^5,0\\leq P\\leq 100\\) \u5c31\u662f\u7b80\u5355\u7684\u671f\u671b dp\uff0c\u4f46\u662f\u6211\u4e00\u65f6\u534a\u4f1a\u6ca1\u60f3\u6e05\u695a\u3002 \u5c31\u662f\u8bbe \\(dp(i)\\) \u8868\u793a\u6253\u6b7b\u4e00\u53ea\u4f53\u529b\u4e3a \\(i\\) \u7684\u602a\u7269\u7684\u671f\u671b\u6b65\u6570\u3002 \u56e0\u4e3a stamina = 1 \u7684\u65f6\u5019\u600e\u4e48\u6253\u90fd\u662f G\uff0c\u6240\u4ee5 \\(dp(1) = 1\\) \u3002 \u65b9\u7a0b\u6bd4\u8f83\u663e\u7136\uff0c \\(dp(i) = \\dfrac{100 - p}{100}dp(i - 1) + \\dfrac{p}{100}dp(i - 2) + 1\\) \u4f46\u662f\u6211\u641e\u4e0d\u61c2\u554a\uff0c\u4f60\u5982\u679c\u6253\u51fa\u4e86 \\(i + 1\\) \u7684\u4f24\u5bb3\uff0c\u90a3 \\(i\\) \u4e0d\u662f\u7167\u6837\u4f1a G \u5417\uff1f \u7b54\u6848\u600e\u4e48\u5c31\u662f \\(dp(n)\\) \u4e86\uff0c\u4e0d\u61c2\uff0c\u4e0d\u61c2\u3002 \u611f\u89c9\u6bd4\u8f83\u597d\u7406\u89e3\u7684\u662f\u5012\u63a8\uff1f \u5c31\u8bbe \\(dp(i)\\) \u8868\u793a\u628a\u602a\u7269\u6253\u5230\u6070\u597d\u5269 \\(i\\) \u7684 stamina \u7684\u671f\u671b\u6b65\u6570\u3002 \u90a3\u4e48 \\(dp(n) = 0\\) \uff0c\u7b54\u6848\u662f \\(dp(0) + dp(-1)\\) \uff0c\u7136\u540e\u6c42\u51fa \\(dp(1)\\) \u4e4b\u540e\u663e\u7136\u4e0d\u7ba1\u600e\u4e48\u6253\u90fd\u662f\u53ef\u4ee5\u7684\u3002 \u6240\u4ee5\u7b54\u6848\u5b9e\u9645\u4e0a\u662f \\(dp(1) + 1\\) \u3002 \u54e6\uff0c\u6211\u61c2\u4e86\uff0c\u4e0a\u9762\u7684\u72b6\u6001\u662f\u6253\u6b7b\uff0c\u4e0b\u9762\u7684\u662f\u6070\u597d\uff0c\u6709\u533a\u522b\u7684\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; // using i64 = long long; #define int long long const int si = 2e5 + 10 ; const int mod = 998244353 ; int n , p ; int dp [ si ]; int qpow ( int a , int b ) { int ret = 1 % mod ; for (; b ; b >>= 1 ) { if ( b & 1 ) ret = ret * a % mod ; a = a * a % mod ; } return ret % mod ; } int inv ( int x ) { return qpow ( x , mod - 2 ); } const int iv = inv ( 100 ); signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> p ; dp [ 0 ] = 0 , dp [ 1 ] = 1 ; for ( int i = 2 ; i <= n + 1 ; ++ i ) dp [ i ] = (( dp [ i - 1 ] * ( 100 - p + mod ) % mod * iv % mod ) + ( dp [ i - 2 ] * p % mod * iv % mod ) + 1 % mod + mod ) % mod ; cout << dp [ n ] << endl ; return 0 ; } \u4ee3\u7801\u662f\u7b2c\u4e00\u4e2a\u5b9a\u4e49\u3002","title":"ABC280E - Critical Hit"},{"location":"rec/atcf-for-2022-11-12/#abc280f-pay-or-receive","text":"\u6709 \\(n\\) \u4e2a\u5c0f\u9547\uff0c\u7f16\u53f7 \\(1\\) ~ \\(n\\) \uff0c\u8fd8\u6709 \\(m\\) \u6761\u8def\uff0c\u7f16\u53f7 \\(1\\) ~ \\(m\\) \u3002 \u7b2c \\(i\\) \u6761\u8def\u8fde\u63a5 \\({A_i}\\) \u548c \\({B_i}\\) \uff0c\u5f53\u4f60\u8d70\u8fc7\u4e00\u6761\u8def\u65f6\uff0c\u4f60\u7684 \u5f97\u5206 \u4f1a\u9075\u5faa\u4ee5\u4e0b\u53d8\u5316\uff1a \u5f53\u4f60\u7528\u7b2c \\(i\\) \u6761\u8def\u4ece \\({A_i}\\) \u5230 \\({B_i}\\) \uff0c\u4f60\u7684\u5f97\u5206 \u589e\u52a0 \\({C_i}\\) ; \u5f53\u4f60\u7528\u7b2c \\(i\\) \u6761\u8def\u4ece \\({B_i}\\) \u5230 \\({A_i}\\) \uff0c\u4f60\u7684\u5f97\u5206 \u51cf\u5c11 \\({C_i}\\) \u3002 \u4f60\u7684\u5f97\u5206\u53ef\u80fd\u4e3a\u8d1f\u6570\u3002 \u56de\u7b54\u5982\u4e0b\u7684 \\(Q\\) \u4e2a\u95ee\u9898\uff1a \u5982\u679c\u4f60\u4ece \\({X_i}\\) \u8fd9\u4e2a\u5c0f\u9547\u51fa\u53d1\uff08\u521d\u59cb\u5f97\u5206\u4e3a \\(0\\) \uff09, \u6c42\u51fa\u4f60\u5728 \\({Y_i}\\) \u5c0f\u9547\u65f6\u7684\u6700\u5927\u5f97\u5206\u3002 \u5982\u679c\u4f60\u4e0d\u80fd\u4ece \\({X_i}\\) \u8fd9\u4e2a\u5c0f\u9547\u51fa\u53d1\u5230\u8fbe \\({Y_i}\\) \u5c0f\u9547\uff0c\u8f93\u51fa nan \u3002 \u5982\u679c\u4f60\u4ece \\({X_i}\\) \u8fd9\u4e2a\u5c0f\u9547\u51fa\u53d1\u5230\u8fbe \\({Y_i}\\) \u5c0f\u9547\u53ef\u4ee5\u6323\u5f97\u65e0\u9650\u7684\u5206\u6570\uff0c\u8f93\u51fa inf \u3002 \u8fd9\u4e0d\u5c31\u6b63\u53cd\u5efa\u8fb9\u6700\u957f\u8def\u5224\u4e0b\u53ef\u8fbe\u6027\u5224\u4e0b\u6b63\u73af\uff1f Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 // author : black_trees #include <cmath> #include <queue> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; const int inf = -1e18 ; const int si_n = 1e5 + 10 ; const int si_m = 2e5 + 10 ; int n , m , Q ; int tot = 0 , head [ si_n ]; bool vis [ si_n ], ring [ si_n ]; int pa [ si_n ], cnt [ si_n ], dis [ si_n ]; struct Edge { int ver , Next , w ; } e [ si_m ]; inline void add ( int u , int v , int w ) { e [ tot ] = ( Edge ){ v , head [ u ], w }, head [ u ] = tot ++ ; } int root ( int x ) { if ( pa [ x ] != x ) pa [ x ] = root ( pa [ x ]); return pa [ x ]; } void Merge ( int u , int v ) { int ru = root ( u ), rv = root ( v ); if ( ru == rv ) return ; pa [ ru ] = rv ; return ; } std :: queue < int > q ; void bfs ( int st ) { q . push ( st ), vis [ st ] = true , dis [ st ] = 0 ; while ( ! q . empty ()) { auto u = q . front (); q . pop (); for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( dis [ v ] == inf ) { dis [ v ] = dis [ u ] + e [ i ]. w ; vis [ v ] = true ; q . push ( v ); } else if ( dis [ v ] != dis [ u ] + e [ i ]. w ) { ring [ root ( st )] = true ; return ; } } } } signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); memset ( head , -1 , sizeof head ); cin >> n >> m >> Q ; for ( int i = 1 ; i <= n ; ++ i ) pa [ i ] = i , dis [ i ] = inf ; for ( int i = 1 ; i <= m ; ++ i ) { int u , v , w ; cin >> u >> v >> w ; add ( u , v , w ), add ( v , u , - w ); if ( root ( u ) != root ( v )) Merge ( u , v ); } for ( int i = 1 ; i <= n ; ++ i ) { int j = root ( i ); if ( vis [ j ]) continue ; while ( ! q . empty ()) q . pop (); vis [ j ] = true , bfs ( j ); } for ( int i = 1 ; i <= Q ; ++ i ) { int u , v ; cin >> u >> v ; if ( root ( u ) != root ( v )) { cout << \"nan\" << endl ; continue ; } if ( ring [ root ( u )]) cout << \"inf\" << endl ; else cout << dis [ v ] - dis [ u ] << endl ; } return 0 ; } // ()()()(? // https://www.cnblogs.com/CTing/p/16950621.html","title":"ABC280F - Pay or Receive"},{"location":"rec/atcf-for-2022-11-12/#abc281d-max-multiple","text":"\u7ed9\u5b9a \\(n\\) \u4e2a\u6570\u3002\u73b0\u5728\u53ef\u4ee5\u4ece\u4e2d\u9009 \\(k\\) \u4e2a\u6570\uff0c\u9700\u6ee1\u8db3\u4ed6\u4eec\u7684\u548c\u4e3a \\(d\\) \u7684\u500d\u6570\u3002\u6c42\u6700\u5927\u548c\u503c\u3002 translated by @ liangbowen \u3002 \u592a\u8822\u4e86\uff0c\u600e\u4e48\u7a0d\u5fae\u4e00\u4e45\u751a\u81f3\u8fde\u8fd9\u79cd\u795e\u5fc5\u80cc\u5305\u90fd\u4e0d\u4f1a\u3002 \u600e\u4e48\u56de\u4e8b\u5462\u3002 \u5c31\u662f\u770b\u5230\u8fd9\u4e2a\u4ece\u4e00\u5806\u5143\u7d20\u91cc\u4efb\u610f\u9009 \\(K\\) \u4e2a\u8981\u6ee1\u8db3\u4e00\u5b9a\u7684\u6761\u4ef6\uff0c\u95ee\u67d0\u4e9b\u6743\u503c\u7684\u6700\u503c\u6216\u8005\u662f\u53ef\u884c\u7684\u65b9\u6848\u6570\u3002 \u7136\u540e\u5c31\u662f\u80cc\u5305\u561b\uff0c\u7136\u540e\u6570\u636e\u8303\u56f4\u90fd\u662f \\(100\\) \uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u8bbe \\(dp(i,j,k)\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\u5143\u7d20\u9009\u4e86 \\(j\\) \u4e2a\uff0c\u4e14\u5df2\u7ecf\u9009\u62e9\u7684\u5143\u7d20\u7684\u6a21 \\(D\\) \u610f\u4e49\u4e0b\u548c\u4e3a \\(k\\) \u7684\u65f6\u5019\u7684 \\(\\max\\sum\\) \u3002 \u7ec8\u6001 \\(dp(N, K, 0)\\) \u3002 \u8f6c\u79fb\u6bd4\u8f83\u7b80\u5355\u5c31\u9009\u6216\u8005\u4e0d\u9009\uff0c \\(O(NKD)\\) \u3002 \u53ea\u80fd\u8bf4\u8d8a\u6765\u8d8a\u50bb\u903c\u4e86\uff0c\u72b6\u6001\u4e0d\u521d\u59cb\u5316 inf \u521d\u59cb\u5316 -1 \u6839\u672c\u4e0d\u591f\uff0c\u7136\u540e\u8f6c\u79fb\u7684\u65f6\u5019\u4e71\u8f6c\u79fb\u72b6\u6001\uff0c\u540c\u4e00\u5c42\u8f6c\u79fb\u4e24\u4e2a\u4e0d\u540c\u72b6\u6001\uff0c\u7eaf\u7eafnt. Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 1e2 + 10 ; int N , K , D , a [ si ]; i64 dp [ si ][ si ][ si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> N >> K >> D ; for ( int i = 1 ; i <= N ; ++ i ) cin >> a [ i ]; memset ( dp , -0x3f , sizeof dp ); dp [ 1 ][ 0 ][ 0 ] = 0 , dp [ 1 ][ 1 ][( a [ 1 ] % D )] = a [ 1 ]; for ( int i = 2 ; i <= N ; ++ i ) { for ( int j = 0 ; j <= min ( i , K ); ++ j ) { for ( int k = 0 ; k < D ; ++ k ) { dp [ i ][ j ][ k ] = max ( dp [ i ][ j ][ k ], dp [ i - 1 ][ j ][ k ]); if ( j > 0 ) dp [ i ][ j ][ k ] = max ( dp [ i ][ j ][ k ], dp [ i - 1 ][ j - 1 ][(( k - a [ i ]) % D + D ) % D ] + a [ i ]); } } } cout << (( dp [ N ][ K ][ 0 ] < 0 ) ? -1 : dp [ N ][ K ][ 0 ]) << endl ; return 0 ; }","title":"ABC281D - Max Multiple"},{"location":"rec/atcf-for-2022-11-12/#abc281e-least-elements","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217 \\(A\\) \uff0c\u5bf9\u4e8e\u6bcf\u4e2a \\(1 \\le i \\le N - M + 1\\) \uff0c\u5c06 \\(A_i A_{i + 1} \\cdots A_{i + M - 1}\\) \u4ece\u5c0f\u5230\u5927 \u6392\u5e8f\u540e\uff08\u4e0d\u5f71\u54cd\u539f\u5e8f\u5217\uff09\uff0c\u6c42\u51fa \\(\\mathrm{ans}_i = \\sum\\limits_{i=1}^{K}A_i\\) \u3002 \u611f\u89c9\u8fd9\u79cd\u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217\u505a\u5f88\u591a\u4e2a independent problem \u7684\u65f6\u5019\u4e00\u822c\u90fd\u4f1a\u8981\u8003\u8651\u4ece\u4e0a\u4e00\u4e2a\u72b6\u6001\u7ee7\u627f\uff0c\u6216\u8005\u662f\u8003\u8651\u5148\u6574\u4f53\u505a\u4e00\u904d\u518d\u8ba1\u7b97 ignore \u4e00\u4e9b\u64cd\u4f5c\u4e4b\u540e\u7684\u5f71\u54cd\u4e4b\u7c7b\u7684\u3002 \u8fd9\u4e00\u9898\u662f\uff0c279E \u4e5f\u662f\uff0c\u5176\u5b9e\u5f88\u7ecf\u5178\u611f\u89c9\uff0c\u4e4b\u524d\u597d\u50cf\u6709\u4e00\u4e2a CF \u7684\u9898\u4e5f\u662f\u7c7b\u4f3c\uff0c\u6709\u70b9\u4e45\u8fdc\u8bb0\u4e0d\u6e05\u695a\u4e86\u3002 \u5c31\u662f\u5148\u8003\u8651\u5bf9\u4e8e \\(i = 1\\) \u76f4\u63a5\u66b4\u529b\u505a\u4e00\u6b21\uff0c\u7136\u540e\u6211\u4eec\u53d1\u73b0\u6bcf\u6b21\u632a\u4e00\u6b65\u5c31\u5c11\u4e00\u4e2a\u591a\u4e00\u4e2a\u5143\u7d20\u800c\u5df2\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u52a8\u6001\u7ef4\u62a4\u524d \\(k\\) \u5927\u7684 \\(\\sum\\) \u5c31\u53ef\u4ee5\uff0c\u6bcf\u6b21\u5f39\u51fa\u4e00\u4e2a\u5143\u7d20\uff0c\u7136\u540e\u52a0\u5165\u4e00\u4e2a\u65b0\u5143\u7d20\u770b\u6709\u6ca1\u6709\u53d8\u5316\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u76f4\u63a5 multiset \u7ef4\u62a4\uff0c\u601d\u60f3\u548c\u83ab\u961f\u5f88\u50cf\uff0c\u4f46\u662f\u8fb9\u754c\u597dTM\u70e6\u554a\uff0c\u4e0d\u662f\u5f88\u61c2\u554a\uff0c\u597d\u50cf\u8981\u4e24\u4e2a multiset \u7ef4\u62a4\uff0c\u6211\u4e00\u4e2a multiset \u5047\u4e86\uff0c\u4e0d\u662f\u5f88\u61c2\u3002 \u4e24\u4e2a multiset \u7ef4\u62a4\u8fc7\u7a0b\u5c31\u7c7b\u4f3c\u5bf9\u9876\u5806\uff0c\u53ea\u9700\u8981\u5224\u4e0b size \u5c31\u884c\u4e86\uff0c\u53ef\u4ee5\u5c11\u5206\u8ba8\u4e00\u70b9\u3002 Code // \u4e0a\u9762\u7684\u4ee3\u7801\u5047\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 // author : black_trees #include <set> #include <cmath> #include <cstdio> #include <cstring> #include <cassert> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int N , M , K , a [ si ], b [ si ]; class SuzuiAnri { private : i64 sum ; int kth ; std :: multiset < int > ms ; public : void Init () { for ( int i = 1 ; i <= M ; ++ i ) b [ i ] = a [ i ]; sort ( b + 1 , b + 1 + M ); for ( int i = 1 ; i <= K ; ++ i ) sum += b [ i ]; for ( int i = 1 ; i <= M ; ++ i ) ms . insert ( a [ i ]); kth = b [ K ]; } i64 Qsum () { return sum ; } void Do ( int i ) { int x = a [ i - 1 ], y = a [ i + M - 1 ]; if ( K != M ) { if ( x > kth ) ms . erase ( ms . find ( x )); else { ms . erase ( ms . find ( x )); kth = * next ( ms . find ( kth )); sum -= x , sum += kth ; } if ( y > kth ) ms . insert ( y ); else { ms . insert ( y ); sum += y , sum -= kth ; kth = * prev ( ms . find ( kth )); } } else sum -= x , sum += y ; } } DD ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> N >> M >> K ; for ( int i = 1 ; i <= N ; ++ i ) cin >> a [ i ]; DD . Init (); cout << DD . Qsum () << endl ; for ( int i = 2 ; i <= N - M + 1 ; ++ i ) DD . Do ( i ), cout << DD . Qsum () << \" \" ; cout << endl ; return 0 ; } /* \u5148\u4e0d\u8003\u8651 K = M * \u5982\u679c\u65b0\u52a0\u5165\u7684\u4e3a y, \u8981\u88ab\u5220\u9664\u7684\u4e3a x * \u9996\u5148\u8003\u8651 x \u7684\u4f4d\u7f6e\uff1a * \u5982\u679c x \u4e0d\u5c5e\u4e8e\u524d k \u5c0f\uff1a * \u76f4\u63a5\u5220\u9664 x\uff0c\u4e0d\u4f1a\u6709\u4efb\u4f55\u5f71\u54cd\u3002 * \u5982\u679c x \u5c5e\u4e8e\u524d k \u5c0f\uff1a * \u5220\u9664 x\uff0c\u7136\u540e kth \u5e94\u8be5\u66f4\u65b0\u4e3a\u539f\u6765 kth \u7684\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u56e0\u4e3a K < M \u6240\u4ee5\u4e00\u5b9a\u4f1a\u6709\u8fd9\u6837\u7684\u4e00\u4e2a\u5143\u7d20\uff0c\u4e0d\u4f1a\u8d8a\u754c\u3002 * \u7136\u540e\u8003\u8651 y \u7684\u4f4d\u7f6e\uff1a * \u5982\u679c y \u4e0d\u5c5e\u4e8e\u524d k \u5c0f\uff1a * \u76f4\u63a5\u63d2\u5165 y\uff0c\u4e0d\u4f1a\u6709\u4efb\u4f55\u5f71\u54cd\u3002 * \u5982\u679c y \u5c5e\u4e8e\u524d k \u5c0f\uff1a * \u76f4\u63a5\u63d2\u5165 y\uff0c\u7136\u540e\u66f4\u65b0 kth \u4e3a\u73b0\u5728\u7684\u524d\u4e00\u4f4d\uff0c\u5982\u679c K = 1\uff0c\u56e0\u4e3a y \u5c5e\u4e8e\u524d K \u5c0f\u6240\u4ee5\u4e00\u5b9a\u5b58\u5728\uff0c\u5176\u5b83\u4e5f\u4e00\u5b9a\u5b58\u5728\uff0c\u4e0d\u4f1a\u8d8a\u754c\u3002 * \u7136\u540e K = M \u76f4\u63a5\u8f93\u51fa\u5c31\u884c\u4e86\u3002 */ /* #include <bits/stdc++.h> #define rep(i, n) for (int i = 0; i < (n); ++i) using namespace std; using ll = long long; struct DS { int k; ll sum; multiset<int> ls, rs; DS(int k=0): k(k), sum(0) {} void ladd(int x) { sum += x; ls.insert(x); } void lerase(multiset<int>::iterator it) { sum -= *it; ls.erase(it); } void add(int x) { ladd(x); if (ls.size() <= k) return; auto it = ls.end(); --it; rs.insert(*it); lerase(it); } void erase(int x) { if (*ls.rbegin() < x) { rs.erase(rs.find(x)); } else { lerase(ls.find(x)); auto it = rs.begin(); ladd(*it); rs.erase(it); } } }; int main() { int n, m, k; cin >> n >> m >> k; vector<int> a(n); rep(i, n) cin >> a[i]; DS d(k); rep(i, m) d.add(a[i]); cout << d.sum << '\\n'; rep(i, n-m) { d.add(a[i+m]); d.erase(a[i]); cout << d.sum << '\\n'; } return 0; } \u4f5c\u8005\uff1aNcik \u94fe\u63a5\uff1ahttps://www.acwing.com/solution/content/154338/ \u6765\u6e90\uff1aAcWing \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 */","title":"ABC281E - Least Elements"},{"location":"rec/atcf-for-2022-11-12/#abc281f-xor-minimization","text":"\u6c42 \\(\\min\\{\\max\\{a_i \\oplus x\\}\\}\\) \uff0c\u5176\u4e2d \\(x\\) \u672a\u77e5\u3002 \\(a_i < 2^{30}, 1\\le n \\le 2e5\\) \u3002 \u9996\u5148\u89c2\u5bdf\u5185\u5c42\u7684 \\(\\max\\) \uff0c\u53d1\u73b0\u8fd9\u4e2a\u5c31\u662f 01trie \u7684 query \u64cd\u4f5c\u3002 \u90a3\u4e48\u95ee\u9898\u5c31\u662f\u600e\u4e48\u6837\u8ba9 01trie \u7684 query \u627e\u5230\u7684\u503c\u6700\u5c0f\u3002 \u601d\u8003\u4e00\u4e0b query \u7684\u8fc7\u7a0b\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u4e0d\u65ad\u53cd\u7740\u8d70\uff0c\u6211\u4eec\u5e0c\u671b\u5b83\u5c3d\u91cf\u5c0f\uff0c\u90a3\u5c31\u662f\u8ba9\u5b83\u7684\u9ad8\u4f4d\u5c3d\u91cf\u4e0d\u80fd\u53cd\u7740\u8d70\uff0c\u4e5f\u5c31\u662f\u5c3d\u91cf\u5728\u9ad8\u4f4d\u627e\u53ea\u6709\u4e00\u4e2a\u6307\u9488\u7684\u8fb9\u3002 \u4f46\u662f\u6211\u4eec\u4e0d\u80fd\u5f88\u597d\u7684\u77e5\u9053\u4e0b\u9762\u7684\u60c5\u51b5\uff0c\u6bd4\u5982\u4f60\u540c\u4e00\u5c42\u4e24\u8fb9\u90fd\u80fd\u8d70\u4e00\u4e2a\u6307\u9488\uff0c\u4f46\u662f\u4e0b\u9762\u80fd\u8d70\u7684\u6570\u91cf\u4e0d\u540c\u600e\u4e48\u529e\uff1f \u6240\u4ee5\u6211\u4eec\u8bb0\u5f55\u4e24\u4e2a\u4fe1\u606f\uff0c\u4e00\u4e2a \\(near(u)\\) \u8868\u793a\u9664\u4e86 \\(u\\) \u81ea\u5df1\uff0c\u80fd\u8d70\u5230\u7684\u6700\u8fd1\u7684\u6709\u4e00\u4e2a\u5206\u53c9\u7684\u70b9\u7684\u4f4d\u7f6e\uff0c\u53e6\u4e00\u4e2a \\(cnt(u)\\) \u8868\u793a \\(u\\) \u8fd9\u4e2a\u8282\u70b9\u4e0b\u9762\u6709\u591a\u5c11\u5c42\u80fd\u6709\u4e00\u4e2a\u6307\u9488\u7684\u9009\u62e9\uff0c\u7136\u540e cnt \u9700\u8981\u53cd\u8fc7\u6765\u51b3\u5b9a near\u3002 \u4f46\u662f\u8fd9\u6837\u975e\u5e38\u9ebb\u70e6\uff0c\u6211\u4eec\u601d\u8003\u4e00\u4e0b\u80fd\u4e0d\u80fd\u76f4\u63a5\u5728 \\(u\\) \u5c31\u786e\u5b9a\u3002 \u8003\u8651\u6240\u6709\u6570\u7684\u7b2c \\(i\\) \u4f4d\uff0c\u5982\u679c\u5168\u90e8\u662f \\(0/1\\) \uff0c\u90a3\u4e48 \\(x\\) \u7684\u7b2c \\(i\\) \u4f4d\u4e00\u5b9a\u662f \\(1/0\\) \u3002 \u5982\u679c\u6709 \\(0\\) \u6709 \\(1\\) \uff0c\u663e\u7136 \\(x\\) \u7684\u8fd9\u4e00\u4f4d\u9700\u8981\u7531\u4f4e\u4f4d\u7684\u7ed3\u679c\u786e\u5b9a\uff0c\u800c\u4e14\u8fd9\u4e00\u4f4d\u7684\u7ed3\u679c\u4e00\u5b9a\u662f 1\uff0c\u6240\u4ee5\u6211\u4eec\u9009\u62e9\u4f4e\u4f4d\u7b54\u6848\u66f4\u5c0f\u7684\u5373\u53ef\u3002 \u6240\u4ee5\u6211\u4eec\u5c31\u5206\u6cbb\u4e0b\u53bb\u7b97\u4e00\u4e0b\u7b54\u6848\uff0c\u7136\u540e\u4e0d\u65ad\u5411\u4e0a merge \u5373\u53ef\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u5728 01trie \u4e0a\u505a\u3002 \u611f\u89c9\u8fd9\u4e2a\u6a21\u578b\u4e5f\u6bd4\u8f83\u7ecf\u5178\uff0c\u5c31\u662f\u5bf9\u4e8e\u4e4b\u540e\u7684\u4fe1\u606f\u53ef\u80fd\u9020\u6210\u5f71\u54cd\u65f6\u7684\u5904\u7406\u65b9\u5f0f\uff0c\u4e0d\u662f\u9012\u5f52\u4e0b\u53bb\u76f4\u63a5\u9884\u5904\u7406\u4fe1\u606f\uff0c\u5c31\u662f\u5148\u5206\u6cbb\u7136\u540e\u5012\u7740\u7b97\u7b54\u6848\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 // author : black_trees #include <cmath> #include <cstdio> #include <climits> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; const int inf = INT_MAX ; int tot = 1 ; bool tg [ si * 31 ]; int tr [ si * 31 ][ 2 ], val [ si * 31 ]; void insert ( int v ) { int p = 1 ; for ( int i = 30 ; i >= 0 ; -- i ) { int ch = ( v >> i ) & 1 ; val [ p ] = 1 << i ; if ( ! tr [ p ][ ch ]) tr [ p ][ ch ] = ++ tot ; p = tr [ p ][ ch ]; } tg [ p ] = true ; } int query ( int p ) { if ( tg [ p ]) return 0 ; if ( ! p ) return - inf ; int lans = query ( tr [ p ][ 0 ]), rans = query ( tr [ p ][ 1 ]); if ( lans > rans ) swap ( lans , rans ); return max ( val [ p ] + lans , rans ); } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int n , rt = 1 ; cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { int x ; cin >> x ; insert ( x ); } cout << query ( 1 ) << endl ; return 0 ; } // ()()()(? \u8bf4\u53e5\u9c9c\u82b1\uff0c\u53d1\u73b0\u65e9\u4e0a\u7684\u65f6\u5019\u786e\u5b9e\u6e05\u9192\u5f88\u591a\uff0c\u611f\u89c9\u4ee5\u540e\u4e0d\u80fd\u6d6a\u8d39\u65e9\u4e0a\u7684\u65f6\u95f4\u4e86\u3002 CF35E \u5168\u662f\u65e9\u4e0a\u6311\u51fa\u91cd\u5927 bug\uff0c\u4eca\u5929\u4e0a\u5348\u505a\u9898\u6548\u7387\u5f88\u9ad8\u3002 \u54e6\u8fd8\u6709\u611f\u89c9\u4ee5\u540e\u505a\u9898\u4e4b\u524d\u53ef\u4ee5\u5148\u7ffb\u4e00\u4e0b\u4ee5\u524d\u7684\u535a\u5ba2\u627e\u627e\uff1f\u72b6\u6001\uff1f","title":"ABC281F - Xor Minimization"},{"location":"rec/atcf-for-2022-11-12/#cf1770-goodbye2022","text":"\u611f\u89c9\u662f\u4eca\u5e74\u6253\u7684\u6700\u597d\u7684\u4e00\u573a\u3002 \u4ece\u5404\u79cd\u610f\u4e49\u4e0a\u6765\u8bf4\u90fd\u662f\uff0c\u611f\u89c9\u81ea\u5df1\u80fd\u5c1d\u8bd5\u4e00\u4e0b D \u8fd9\u79cd\u62ab\u7740\u535a\u5f08\u8bba\u76ae\u7684\u9898\u5df2\u7ecf\u7b97\u8fdb\u6b65\u4e86\uff0c\u4ee5\u524d\u770b\u5230 both play optimally \u5c31\u4e0d\u6562\u505a\uff08 \u56de\u6765\u7684\u5730\u94c1\u4e0a\u548c\u4e00\u4e2a\u7279\u522b\u5389\u5bb3\u7684\u524d MOer \u804a\u5929\uff0c\u4ed6\u8bf4\u4ed6\u505a\u9898\u4e00\u822c\u662f\u8981\u5148\u60f3\u65b9\u6cd5\uff0c\u6ca1\u6709\u786e\u5207\u601d\u8def\u7edd\u5bf9\u4e0d\u5f00\u59cb\u5199\uff0c\u4e0d\u7136\u5c31\u5148\u5c1d\u8bd5\u7b80\u5316\u9898\u76ee\u7136\u540e\u7ee7\u7eed\u601d\u8003\u3002 \u800c\u4e14\u4e00\u822c\u6765\u8bf4\u8981\u5c1d\u8bd5\u5206\u6790\u8003\u70b9\u7136\u540e\u627e\u5230\u65b9\u5411\uff0c\u4f7f\u52b2\u5f80\u90a3\u4e2a\u65b9\u5411\u9760\u3002 \u800c\u4e14\u4e00\u822c\u6765\u8bf4\u4e0d\u80fd\u6709 phobia\uff0c\u5f97\u5148\u601d\u8003\u4e00\u4e0b\uff0c\u522b\u88ab\u5413\u5230\u4e86\u3002 \u611f\u89c9\u5f88\u6709\u9053\u7406\uff01\u8bf4\u7684\u592a\u5bf9\u4e86\uff01 \u867d\u7136\u522b\u4eba\u7684\u65b9\u6cd5\u4e0d\u4e00\u5b9a\u9002\u5408\uff0c\u4f46\u662f\u611f\u89c9\u8fd9\u4e2a\u786e\u5b9e\u4f1a\u6bd4\u8f83\u6709\u7528\uff01","title":"CF1770 - Goodbye2022"},{"location":"rec/atcf-for-2022-11-12/#a-koxia-and-whiteboards","text":"\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\u3002","title":"A - Koxia and Whiteboards"},{"location":"rec/atcf-for-2022-11-12/#b-koxia-and-permutation","text":"\u4f60\u9700\u8981\u6784\u9020\u4e00\u4e2a\u6392\u5217 \\(p\\) \uff0c\u4f7f\u5f97 \\(\\max\\limits_{i = 1}^{n - k + 1}\\{\\max(a_i \\dots a_{i + k - 1}) + \\min(a_i \\dots a_{i + k - 1})\\}\\) \u6700\u5c0f\u3002 \\(n, k\\) \u7ed9\u5b9a\uff0c \\(2e5\\) \u3002 \u6ce8\u610f\u5230\u6211\u4eec\u4e00\u5b9a\u5e0c\u671b\u6574\u4f53\u7684 \\(\\max,\\min\\) \u51d1\u5230\u4e00\u8d77\uff0c\u6211\u4eec\u628a\u4ed6\u4eec\u653e\u5230\u4e00\u4e2a\u533a\u95f4\u4e4b\u540e\u53bb\u6389\u4ed6\u4eec\uff0c\u7136\u540e\u53ef\u4ee5\u9012\u5f52\u7684\u53d1\u73b0\u5c31\u662f\u4e0d\u65ad\u8ba9 \\(\\max \\min\\) \u653e\u5230\u4e00\u8d77\u3002 \u7136\u540e\u778e\u6784\u9020\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\uff0c\u6211\u5f00\u59cb\u7684\u601d\u8def\u662f\u76f4\u63a5\u653e\u533a\u95f4\u5de6\u53f3\u7aef\u70b9\uff0c\u4f46\u662f\u611f\u89c9\u6bd4\u8f83\u9ebb\u70e6\uff0c\u7136\u540e\u53d1\u73b0\u5176\u5b9e\u7b54\u6848\u548c \\(k\\) \u65e0\u5173\uff0c\u76f4\u63a5 \\(\\max \\min\\) \u8fd9\u6837\u6328\u7740\u653e\u5c31\u884c\u4e86\u3002 \u8d5b\u65f6Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int a [ si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { int n , k ; cin >> n >> k ; for ( int i = 1 ; i <= n ; ++ i ) { if ( i & 1 ) cout << ( n - i / 2 ) << \" \" ; else cout << ( i >> 1 ) << \" \" ; } // int l = 1, r = n; // int pos = 1; // while(l <= r) { // // } // for(int i = 1; i <= n; ++i) cout << a[i] << \" \", a[i] = 0; cout << endl ; } return 0 ; }","title":"B - Koxia and Permutation"},{"location":"rec/atcf-for-2022-11-12/#c-koxia-and-number-theory","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217 \\(a\\) , \u5224\u65ad\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u6b63\u6574\u6570 \\(x\\) \u4f7f\u5f97 \\(\\forall 1 \\le i < j \\le n, \\gcd(a_i + x, a_j + x) = 1\\) \u3002 \\(1\\le n \\le 2e5, 1\\le a_i 1e18\\) \u95ee\u9898\u7b49\u4ef7\u4e8e\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e00\u4e2a \\(x\\) \u4f7f\u5f97\u6bcf\u4e00\u4e2a\u503c\u57df\u5185\u7684\u8d28\u6570\u90fd\u81f3\u591a\u6574\u9664\u4e00\u4e2a \\(a_i + x\\) \u3002 \u4f46\u662f\u503c\u57df\u662f \\(10^{18}\\) \uff0c\u601d\u8003\u4e00\u4e0b\u80fd\u5426\u7f29\u5c0f\u8303\u56f4\u3002 \u53d1\u73b0\u5bf9\u4e8e\u4e00\u4e2a\u8d28\u6570 \\(p\\) \uff0c\u663e\u7136\u6211\u4eec\u8981\u505a\u7684\u662f\u5bf9 \\(a_i \\mod p\\) \u610f\u4e49\u4e0b\u7684\u4f59\u6570\u8ba1\u6570\uff0c\u6240\u4ee5\u5176\u5b9e\u5bf9\u4e8e\u5f53\u524d\u679a\u4e3e\u5230\u7684 \\(p\\) \uff0c\u5982\u679c\u5b83\u5927\u4e8e \\(n\\) \uff0c\u663e\u7136\u4e00\u5b9a\u5b58\u5728\u81f3\u5c11\u4e00\u4e2a\u4f59\u6570\u7684\u51fa\u73b0\u6b21\u6570\u6570\u662f\u4e00\u5b9a\u4f1a\u5927\u4e8e \\(2\\) \u7684\uff0c\u6240\u4ee5\u5bc4\u3002 \u90a3\u4e48\u5c31\u679a\u4e3e \\([2,n]\\) \u8303\u56f4\u5185\u7684\u8d28\u6570\u5c31\u884c\u4e86\uff0c\u53d1\u73b0\u5176\u5b9e\u5408\u6570\u5bf9\u7b54\u6848\u6ca1\u5f71\u54cd\uff0c\u6240\u4ee5\u8d28\u6570\u90fd\u4e0d\u9700\u8981\u5224\u4e86\u3002 \u8bb0\u5f97\u5224\u76f8\u7b49\u7684 \\(a_i, a_j\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; i64 a [ si ], b [ si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { bool f = false ; int n ; cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = i + 1 ; j <= n ; ++ j ) { if ( a [ i ] == a [ j ]) { f = true ; break ; } } if ( f ) break ; } if ( f ) { cout << \"No\" << endl ; continue ; } for ( int p = 2 ; p <= n ; ++ p ) { for ( int i = 0 ; i <= p ; ++ i ) b [ i ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) b [ a [ i ] % p ] += 1 ; bool ff = false ; for ( int i = 0 ; i < p ; ++ i ) if ( b [ i ] <= 1 ) { ff = true ; break ; } if ( ff != true ) { f = true ; break ; } } if ( f ) cout << \"No\" << endl ; else cout << \"Yes\" << endl ; } return 0 ; }","title":"C - Koxia and Number Theory"},{"location":"rec/atcf-for-2022-11-12/#d-koxia-and-game","text":"\u7ed9\u5b9a\u4e24\u4e2a\u5e8f\u5217 \\(a, b\\) \uff0c\u8981\u6c42\u6784\u9020\u4e00\u4e2a\u5e8f\u5217 \\(c\\) \u4f7f\u5f97\u4ee5\u4e0b\u6e38\u620f\u5148\u624b\u5fc5\u80dc\u3002 \u5728\u6e38\u620f\u7684\u7b2c \\(i\\) \u8f6e\uff0c\u5148\u624b\u4ece \\(a_i, b_i, c_i\\) \u5f53\u4e2d\u9009\u53d6\u4e00\u4e2a\u6570\u5220\u6389\uff0c\u7136\u540e\u540e\u624b\u5728\u5269\u4e0b\u7684\u4e24\u4e2a\u6570\u91cc\u9762\u9009\u62e9\u4e00\u4e2a\uff0c\u8fd9\u6b21\u51b3\u7b56\u9009\u62e9\u7684\u6570\u8bb0\u4e3a \\(d_i\\) \u3002 \u5982\u679c \\(d\\) \u662f\u4e00\u4e2a \\(1\\sim n\\) \u7684\u6392\u5217\uff0c\u90a3\u4e48\u5148\u624b\u83b7\u80dc\uff0c\u53cc\u65b9\u5747\u91c7\u53d6\u6700\u4f18\u7b56\u7565\u3002 \u8bf7\u95ee\u6709\u591a\u5c11\u79cd\u5408\u6cd5\u7684\u6784\u9020\u65b9\u6848\uff1f\u5bf9 \\(998244353\\) \u53d6\u6a21\u3002 \\(1\\le n \\le 1e5\\) \u3002 \u6ce8\u610f\u5230\u8fd9\u91cc\u662f\u5408\u6cd5\u65b9\u6848\u8ba1\u6570\uff0c\u6240\u4ee5\u663e\u7136\u6211\u4eec\u9700\u8981\u77e5\u9053\u4ec0\u4e48\u6837\u7684\u65b9\u6848\u662f\u5408\u6cd5\u7684\u3002 \u89c2\u5bdf\u6837\u4f8b\u53d1\u73b0\u4f1a\u6709\u65e0\u89e3\u7684\u60c5\u51b5\uff0c\u53d1\u73b0\u4e0d\u662f\u5f88\u597d\u5224\u5b9a\uff0c\u5148\u8003\u8651\u6709\u89e3\u600e\u4e48\u7b97\u3002 \u8d5b\u65f6\u8fd9\u4e2a\u65f6\u5019\u7a81\u7136\u5192\u51fa\u6765\u4e00\u4e2a\u601d\u8def\uff0c\u6bd4\u8f83\u795e\u5947\uff0c\u4e5f\u4e0d\u77e5\u9053\u600e\u4e48\u60f3\u5230\u7684\uff0c\u53ef\u80fd\u662f\u60f3\u5c1d\u8bd5\u5206\u6790\u8fd9\u4e2a\u6700\u4f18\u7b56\u7565\u662f\u4ec0\u4e48\u7684\u65f6\u5019\u60f3\u5230\u7684\u3002 \u5c31\u662f\u53d1\u73b0\u5176\u5b9e\u8fd9\u4e2a\u6e38\u620f\u662f\u7531\u5148\u624b\u64cd\u7eb5\u7684\uff0c\u548c\u540e\u624b\u5e76\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u3002 \u56e0\u4e3a\u53ea\u7ed9\u51fa\u4e86 \\(a_i, b_i\\) \uff0c\u6240\u4ee5\u5176\u5b9e\u5148\u624b\u53ef\u4ee5\u5f3a\u5236\u540e\u624b\u9009\u62e9 \\(a_i\\ \\text{or}\\ b_i\\) \uff0c\u5177\u4f53\u65b9\u5f0f\u662f\u4ee4 \\(c_i\\) \u548c\u9700\u8981\u5f3a\u5236\u540e\u624b\u9009\u7684\u90a3\u4e2a\u6570\u4e00\u6837\uff0c\u7136\u540e\u5220\u6389\u53e6\u5916\u4e00\u4e2a\u4e0d\u540c\u7684\u5373\u53ef\u3002 \u8003\u8651\u4e00\u4e0b\u8fd9\u4e2a\u662f\u4e0d\u662f\u6700\u4f18\u7b56\u7565\uff0c\u53d1\u73b0\u4e00\u5b9a\u662f\uff0c\u6bd4\u5982 1 1 2 \uff0c\u4f60\u80af\u5b9a\u4e0d\u5e0c\u671b\u540e\u624b\u80fd\u6709\u66f4\u591a\u9009\u62e9\uff0c\u4e0d\u7136\u4f60\u6ca1\u6cd5\u8003\u8651\u540e\u9762\u7684\u60c5\u51b5\uff0c\u6bd4\u8f83\u5bb9\u6613\u5bc4\u6389\uff0c\u4e8e\u662f\u5408\u7406\u63a8\u6d4b\u53ea\u80fd\u8fd9\u4e48\u5e72\uff01 \u7136\u540e\u8003\u8651\u600e\u4e48\u7b97\u8d21\u732e\uff0c\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u597d\u50cf\u53ef\u4ee5\u62bd\u8c61\u6210\u56fe\u8bba\uff0c\u5c31\u76f4\u63a5\u5bf9\u4e8e \\(i\\) \uff0c\u8fde \\((a_i, b_i)\\) \u8fd9\u6761\u65e0\u5411\u8fb9\u5c31\u884c\u3002 \u5982\u679c\u627e\u5230\u4e86\u4e00\u4e2a\u81ea\u73af\uff0c\u8fd9\u91cc\u7684\u8d21\u732e\u663e\u7136\u662f \\(n\\) \uff0c\u56e0\u4e3a \\(c_i\\) \u53d6\u4efb\u610f\u4e00\u4e2a\u6570\uff0c\u5148\u624b\u90fd\u53ef\u4ee5\u5220\u6389\uff0c\u5c31\u6bd4\u5982 1 1 \u8fd9\u6837\u3002 \u7136\u540e\u6ce8\u610f\u5230\u5176\u5b9e\u5408\u6cd5\u65b9\u6848\u5e94\u8be5\u662f\u4e00\u4e2a\u57fa\u73af\u6811\u68ee\u6797\uff0c\u5982\u679c\u73af\u4e0d\u662f\u81ea\u73af\uff0c\u90a3\u4e48\u8d21\u732e\u4e00\u5b9a\u662f \\(2\\) \uff0c\u56e0\u4e3a\u4f60\u6bcf\u6b21\u4e4b\u6709\u4e24\u79cd\u9009\u62e9\uff0c\u7136\u540e\u8fde\u901a\u5757\u91cc\u9762\u7684\u65b9\u6848\u662f\u4f1a\u76f8\u4e92\u5f71\u54cd\u7684\uff0c\u4f60\u597d\u6bd4\u9009\u4e86\u4e24\u6761\u8def\u8d70\u51fa\u53bb\u8fd9\u6837\u3002 \u90a3\u4e48\u5176\u5b9e\u81ea\u73af\u7684\u8d21\u732e\u5e94\u8be5\u5728\u5b83\u6240\u5c5e\u7684\u8054\u901a\u5757\u91cc\u9762\u76f4\u63a5\u7b97\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5 dfs \u4e00\u4e0b\uff0c\u5224\u4e00\u4e0b\u81ea\u73af\u548c\u65e0\u89e3\u5c31\u884c\u4e86\u3002 \u65e0\u89e3\u663e\u7136\u5c31\u662f\u8fde\u901a\u5757\u4e0d\u662f\u57fa\u73af\u6811\uff0c\u4e5f\u5c31\u662f\u6811\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u5c31\u5f88\u597d\u505a\u4e86\u3002 \u5f53\u7136\u4e5f\u6709\u53ef\u80fd\u662f\u51d1\u4e0d\u51fa\u6392\u5217\uff0c\u8fd9\u4e2a\u7279\u5224 vis \u5c31\u884c\u3002 \u8fd9\u91cc\u653e\u7684\u662f\u8d5b\u65f6\u4ee3\u7801\uff0c\u9519\u8bef\u601d\u8def\u7684\u4e1c\u897f\u6ca1\u6765\u5f97\u53ca\u5220\uff0c\u51d1\u5408\u7740\u770b\u3002 \u8fd9\u9898\u4e5f\u6bd4\u8f83\u6709\u7eaa\u5ff5\u610f\u4e49\u611f\u89c9\uff0c\u6bd5\u7adf\u662f 15 \u5c81\u7684\u6211\u505a\u7684\u6700\u540e\u4e00\u9898\uff0c16 \u5c81\u7684\u6211\u505a\u7684\u7b2c\u4e00\u9898\u3002 \u70b9\u540d\u6279\u8bc4 15 \u5c81\u7684\u6211\uff0c\u600e\u4e48\u5224\u91cd\u590d\u4e8c\u5143\u7ec4\u8fd9\u79cd\u5047\u505a\u6cd5\u90fd\u80fd\u60f3\u5230 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 // author : black_trees #include <map> #include <cmath> #include <cstdio> #include <cstring> #include <utility> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; const int mod = 998244353 ; int a [ si ], b [ si ]; std :: map < std :: pair < int , int > , bool > mp ; bool vis [ si ]; int head [ si ], tot = 0 ; struct Edge { int ver , Next ; } e [ si << 1 ]; inline void add ( int u , int v ) { e [ tot ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot ++ ; } int dg , sf , deg [ si ]; void dfs ( int u , int fa ) { vis [ u ] = true ; dg -= 2 ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; dg ++ ; if ( u == v ) sf ++ ; // self ring. if ( v == fa || vis [ v ] == true ) continue ; dfs ( v , u ); } } signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { bool f = false ; mp . clear (), tot = 0 ; int n , ans = 1l l ; cin >> n ; for ( int i = 0 ; i <= n + 10 ; ++ i ) vis [ i ] = false , head [ i ] = -1 , deg [ i ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; for ( int i = 1 ; i <= n ; ++ i ) cin >> b [ i ]; // for(int i = 1; i <= n; ++i) { // std::pair<int, int> t = make_pair(min(a[i], b[i]), max(a[i], b[i])); // if(mp[t] == true) { f = true; break; } // mp[t] = true; // if(a[i] == b[i]) ans = (ans * n) % mod, vis[i] = true; // else add(a[i], b[i]), add(b[i], a[i]); // } for ( int i = 1 ; i <= n ; ++ i ) deg [ a [ i ]] ++ , deg [ b [ i ]] ++ , add ( a [ i ], b [ i ]), add ( b [ i ], a [ i ]); // if(f) { cout << \"0\" << endl; continue; } for ( int i = 1 ; i <= n ; ++ i ) { if ( ! vis [ i ]) { dg = 0 , sf = 0 , dfs ( i , 0 ); if ( dg != 0 ) { ans = 0 ; break ; } if ( sf ) ans = ( ans * n ) % mod ; else ans = ( ans + ans ) % mod ; } } for ( int i = 1 ; i <= n ; ++ i ) { if ( ! deg [ i ]) { ans = 0 ; break ; } } cout << ans << endl ; } return 0 ; } // dottle : 364577","title":"D - Koxia and Game"},{"location":"rec/atcf-for-2022-11-12/#abc282d-make-bipartite-2","text":"\u7ed9\u5b9a\u4e00\u4e2a \\(N\\) \u4e2a\u70b9\uff0c \\(M\\) \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u6c42\u95ee\u6709\u591a\u5c11\u5bf9\u8fd8\u672a\u7ecf\u8fde\u63a5\u7684\u70b9\u5bf9\u6ee1\u8db3\u5728\u8fde\u63a5\u5b83\u4eec\u540e\uff0c\u8be5\u56fe\u4e3a\u4e00\u4e2a\u4e8c\u5206\u56fe. \u6ce8\u610f\u8fd9\u91cc\u70b9\u5bf9 \\((u,v)\\) \u548c\u70b9\u5bf9 \\((v,u)\\) \u662f\u540c\u4e00\u5bf9\u70b9\u5bf9\u3002 \u6570\u636e\u4fdd\u8bc1\u6ca1\u6709\u81ea\u73af\u4e0e\u91cd\u8fb9\u3002 \u9996\u5148\u8003\u8651\u76f4\u63a5\u5bf9 \\(G\\) \u9ed1\u767d\u67d3\u8272\u5224\u65ad\u4e00\u4e0b\u6709\u6ca1\u6709\u5408\u6cd5\u7684\u89e3\u3002 \u7136\u540e\u53d1\u73b0\u5176\u5b9e\u53ef\u4ee5\u679a\u4e3e\u767d\u8272\u70b9\uff0ccheck \u4e00\u4e0b\u80fd\u548c\u4ed6\u5339\u914d\u7684\u9ed1\u70b9\u6709\u591a\u5c11\uff08\u5c31\u662f\u9ed1\u70b9\u603b\u6570\u51cf\u53bb\u5f53\u524d\u70b9\u7684\u5ea6\u6570\uff09\u3002 \u4f46\u662f\u6ce8\u610f\u5230 \\(G\\) \u53ef\u80fd\u662f\u51e0\u4e2a\u5355\u72ec\u7684\u8054\u901a\u5206\u91cf\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u8981\u8003\u8651\u5206\u91cf\u5916\u7684\u65b9\u6848\u3002\u6ce8\u610f\u5230\u5bf9\u4e8e\u5f53\u524d\u70b9\uff0c\u5982\u679c\u662f\u548c\u5916\u9762\u7684\u8fde\u901a\u5206\u91cf\u8fde\uff0c\u600e\u4e48\u8fde\u90fd\u884c\u3002 \u4f46\u76f4\u63a5\u8fd9\u4e48\u5e72\u4f1a\u7b97\u91cd\uff0c\u539f\u56e0\u663e\u7136\uff0c\u8981\u5904\u7406\u7684\u8bdd\u4f1a\u6bd4\u8f83\u590d\u6742\u3002 \u8fd9\u6837\u662f\u6b63\u7740\u7b97\uff0c\u975e\u5e38\u9ebb\u70e6\u3002 \u6240\u4ee5\u6211\u4eec\u8003\u8651\u5012\u7740\u7b97\uff0c\u4e5f\u7b97\u662f\u4e00\u79cd\u6bd4\u8f83\u91cd\u8981\u7684\u60f3\u6cd5\u6765\u907f\u514d\u5927\u5206\u8ba8\u3002 \u6211\u4eec\u5047\u8bbe \\(G\\) \u662f\u5b8c\u5168\u56fe\uff0c\u4e5f\u5c31\u662f\u628a\u7f3a\u7684\u8fb9\u90fd\u8fde\u4e0a\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8ba1\u7b97\u6709\u591a\u5c11\u8fb9\u662f\u5728\u540c\u4e00\u4e2a\u8054\u901a\u5206\u91cf\u91cc\u9762\u8fde\u63a5\u4e86\u540c\u4e00\u79cd\u989c\u8272\u7684\u8fb9\u5373\u53ef\u3002 \u8bbe\u6709 \\(q\\) \u4e2a\u8fde\u901a\u5757\uff0c\u7b2c \\(i\\) \u4e2a\u8fde\u901a\u5757\u6709\u9ed1\u70b9 \\(a_i\\) \u4e2a\uff0c\u767d\u70b9 \\(b_i\\) \u4e2a\u3002 \u8bb0 \\(f(x) = x^2 - x\\) \uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f \\(f(n) - m - \\sum\\limits_{i = 1}^q [f(a_i) + f(b_i)]\\) \u3002 \u7b97\u662f\u5f88\u57fa\u7840\u7684\u6b63\u96be\u5219\u53cd\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int n , m ; int tot = 0 , head [ si ]; struct Edge { int ver , Next ; } e [ si << 1 ]; inline void add ( int u , int v ) { e [ tot ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot ++ ; } int c [ si ], ok = 0 ; int cnt , a [ si ], b [ si ]; void dfs ( int u , int col ) { c [ u ] = col ; if ( col == 1 ) a [ cnt ] ++ ; else b [ cnt ] ++ ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( c [ v ] == col ) { ok = -1 ; return ; } if ( c [ v ] == 3 - col ) continue ; if ( c [ v ] == 0 ) dfs ( v , 3 - col ); } return ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); memset ( c , 0 , sizeof c ); memset ( head , -1 , sizeof head ); cin >> n >> m ; for ( int i = 1 ; i <= m ; ++ i ) { int u , v ; cin >> u >> v ; add ( u , v ), add ( v , u ); } i64 ans = ( 1l l * n * ( n - 1 )) / 2l l - m ; for ( int i = 1 ; i <= n ; ++ i ) { if ( ! c [ i ]) { ++ cnt , dfs ( i , 1 ); if ( ok == -1 ) { cout << \"0\" << endl ; return 0 ; } ans -= ( 1l l * a [ cnt ] * ( a [ cnt ] - 1 )) / 2l l ; ans -= ( 1l l * b [ cnt ] * ( b [ cnt ] - 1 )) / 2l l ; } } cout << ans << endl ; return 0 ; } // ()()()(?","title":"ABC282D - Make Bipartite 2"},{"location":"rec/atcf-for-2022-11-12/#abc282e-choose-two-and-eat-one","text":"\u9898\u9762\u6682\u7565 \u600e\u4e48\u5c31\u662f\u6700\u5927\u751f\u6210\u6811\u554a\u5367\u69fd\u3002 \u5c31\u662f \\((x, y)\\) \u8fde\u4e00\u6761 \\(x^y + y^x (\\mod m)\\) \u7684\u8fb9\uff0c\u7136\u540e\u6700\u5927\u751f\u6210\u6811\u5c31\u884c\u4e86\u3002 \u611f\u89c9\u8981\u60f3\u5230\u8fd9\u4e2a\u5e94\u8be5\u9700\u8981\u6ce8\u610f\u5230\u9009 n - 1 \u4e2a\u5427\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; #define int i64 const int si = 5e2 + 10 ; int n , m ; int a [ si ]; int qpow ( int v , int b , int mod ) { int ret = 1 % mod ; for (; b ; b >>= 1 ) { if ( b & 1 ) ret = ( ret * v % mod ) % mod ; v = ( v * v % mod ) % mod ; } return ret % mod ; } struct Edge { int x , y , w ; bool operator < ( const Edge & b ) const { return w > b . w ; } } e [ si * si ]; int pa [ si ], cnt = 0 ; inline int root ( int x ) { if ( pa [ x ] != x ) pa [ x ] = root ( pa [ x ]); return pa [ x ]; } void Merge ( int u , int v ) { int ru = root ( u ), rv = root ( v ); if ( ru == rv ) return ; pa [ ru ] = rv ; return ; } signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> m ; for ( int i = 1 ; i <= n ; ++ i ) { cin >> a [ i ], pa [ i ] = i ; } for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = i + 1 ; j <= n ; ++ j ) { e [ ++ cnt ] = ( Edge ){ i , j , ( qpow ( a [ i ], a [ j ], m ) + qpow ( a [ j ], a [ i ], m )) % m }; } } int ans = 0 ; sort ( e + 1 , e + 1 + cnt ); for ( int i = 1 ; i <= cnt ; ++ i ) { int u = e [ i ]. x , v = e [ i ]. y ; if ( root ( u ) == root ( v )) continue ; ans = ( ans + e [ i ]. w ), Merge ( u , v ); } cout << ans << endl ; return 0 ; } // ()()()(?","title":"ABC282E - Choose Two and Eat One"},{"location":"rec/atcf-for-2022-11-12/#abc282f-union-of-two-sets","text":"\u8fd9\u662f\u4e00\u9053\u4ea4\u4e92\u9898 \u9996\u5148\uff0c\u7ed9\u51fa\u4e00\u4e2a\u6b63\u6574\u6570 \\(n\\) \uff08 \\(1\\le n\\le 4000\\) \uff09\uff0c\u4f60\u9700\u8981\u6784\u9020 \\(m\\) \uff08 \\(1\\le m\\le 50000\\) \uff09 \u4e2a\u533a\u95f4 \\([l_i,r_i]\\) \uff0c\u6ee1\u8db3 \\(1\\le l_i \\le r_i \\le n\\) \uff0c\u8f93\u51fa \\(m\\) \u548c\u8fd9 \\(m\\) \u4e2a\u533a\u95f4\uff0c\u8fd9\u4e9b\u533a\u95f4\u7684\u7f16\u53f7\u6309\u8f93\u51fa\u987a\u5e8f\u4f9d\u6b21\u4e3a \\(1,2,\\cdots ,m\\) \u3002 \u7136\u540e\uff0c\u7ed9\u51fa\u4e00\u4e2a\u6b63\u6574\u6570 \\(q\\) \uff08 \\(1\\le q\\le 10^5\\) \uff09\uff0c\u8868\u793a\u6709 \\(q\\) \u6b21\u8be2\u95ee\u3002\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\uff0c\u7ed9\u5b9a\u533a\u95f4 \\([l,r]\\) \uff0c\u4f60\u8981\u627e\u5230\u4e24\u4e2a\u6574\u6570 \\(i,j\\) \uff08 \\(1\\le i,j \\le n\\) \uff0c \\(i\\) \u53ef\u4ee5\u7b49\u4e8e \\(j\\) \uff09\uff0c\u6ee1\u8db3\u5728\u7b2c\u4e00\u6b65\u4e2d\u6784\u9020\u7684\u533a\u95f4\u4e2d \\([l_i,r_i]\\) \u4e0e \\([l_j,r_j]\\) \u7684\u5e76\u96c6\u7b49\u4e8e \\([l,r]\\) \uff0c\u8f93\u51fa \\([i,j]\\) \u3002 \u4ea4\u4e92\u9898\uff0c\u611f\u89c9\u5c31\u662f\u4ec0\u4e48\u795e\u4ed9\u6784\u9020\u3002 \u6309\u5c3f\u6027\u6765\u770b\uff0c\u4ea4\u4e92\u9898\u4e00\u822c\u4f1a\u9650\u5236\u6784\u9020\u6216\u8005\u64cd\u4f5c\u7684\u6b21\u6570\uff0c\u6240\u4ee5\u89c2\u5bdf\u6570\u636e\u8303\u56f4\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u9009\u62e9\u3002 \u663e\u7136 \\(m\\) \u662f\u8d8a\u5927\u8d8a\u597d\uff0c\u6211\u4eec\u76f4\u63a5\u5f53\u4f5c \\(5\\times 10^4\\) \u5904\u7406\u3002 \u7136\u540e\u53d1\u73b0 \\(n\\) \u662f \\(4\\times 10^3\\) \uff0c\u6211\u4eec\u5e0c\u671b\u662f\u80fd\u51d1\u51fa\u6240\u6709\u533a\u95f4\uff0c\u6240\u4ee5\u4e0d\u59a8\u8003\u8651\u679a\u4e3e \\(i \\in [1,n]\\) \u7136\u540e\u7ed9\u6bcf\u4e2a \\(i\\) \u5e73\u5747\u5206\u914d\u4e00\u4e0b\u3002 \u53d1\u73b0\u6bcf\u4e2a \\(i\\) \u80fd\u5206\u5230 \\(m / n = 12.5\\) \u4e2a\u533a\u95f4\uff0c\u4e00\u822c\u6765\u8bf4\u4ea4\u4e92\u9898\u4f1a\u5e26 \\(\\log, 2^n\\) \u8fd9\u6837\u7684\u5f62\u5f0f\uff0c\u4e8e\u662f\u6211\u4eec\u770b \\(2^{12.5}\\) \u5927\u6982\u662f\u591a\u5c11\uff0c \\(2^{12}\\) \u662f \\(4096 > 4\\times 10^3\\) \uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u96be\u731c\u5230\u53ef\u80fd\u662f\u500d\u589e\u7684\u5f62\u5f0f\u3002 \u4e8e\u662f\u7ed9\u6bcf\u4e2a \\(i\\) \u5206\u914d\u957f\u5ea6\u4e3a \\(2^j, j \\in [0, n)\\) \u7684\u533a\u95f4\uff0c\u6bcf\u6b21\u8be2\u95ee\u7684\u65f6\u5019\u60f3\u529e\u6cd5\u51d1\u5c31\u884c\u4e86\uff1f \u8fd9\u6837\u80fd\u51d1\u51fa\u5b8c\u6574\u7684\u533a\u95f4\u5417\uff1f\u76f4\u89c9\u4e0a\u662f\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3a\u6709\u90a3\u4e2a\u5206\u89e3\u6210 \\(2\\) \u7684\u6b21\u5e42\u7684\u7ed3\u8bba\u3002\u5148\u8bd5\u4e00\u8bd5\u3002 \u786e\u5b9e\u662f\u8fd9\u6837\u7684\uff0c\u8fd9\u4e1c\u897f\u662f st \u8868\u554a\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 // author : black_trees #include <map> #include <cmath> #include <cstdio> #include <vector> #include <cassert> #include <cstring> #include <utility> #include <iostream> #include <algorithm> // #define endl '\\n' // interactive problem, use endl to flush the buffer. using namespace std ; using i64 = long long ; const int si = 4e3 + 10 ; int n , m , q ; std :: vector < int > l [ si ], r [ si ]; std :: map < std :: pair < int , int > , int > mp ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); mp . clear (); cin >> n ; int t = ( int )( log ( n ) / log ( 2 )) + 1 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 0 ; j <= t ; ++ j ) { // ? is this upperbound right? if ( i + ( 1 << j ) - 1 > n ) continue ; ++ m , mp [ make_pair ( i , i + ( 1 << j ) - 1 )] = m ; r [ i ]. push_back ( i + ( 1 << j ) - 1 ); l [ i + ( 1 << j ) - 1 ]. push_back ( i ); } } cout << m << endl ; for ( int i = 1 ; i <= n ; ++ i ) { for ( auto j : r [ i ]) cout << i << \" \" << j << endl ; } cin >> q ; while ( q -- ) { int L , R ; cin >> L >> R ; int a , b ; auto it = -- upper_bound ( r [ L ]. begin (), r [ L ]. end (), R ); auto itt = lower_bound ( l [ R ]. begin (), l [ R ]. end (), L ); a = mp [ make_pair ( L , * it )], b = mp [ make_pair ( * itt , R )]; cout << a << \" \" << b << endl , assert ( min ( L , * itt ) == L && max ( R , * it ) == R ); } return 0 ; } // ()()()(?","title":"ABC282F - Union of Two Sets"},{"location":"rec/atcf-for-2022-11-12/#abc283d-scope","text":"\u5047\u8bbe\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u53ea\u5305\u542b ( \uff0c ) \u548c\u5c0f\u5199\u5b57\u6bcd\u3002\u5982\u679c\u901a\u8fc7\u4ee5\u4e0b\u6b65\u9aa4\uff0c\u80fd\u4f7f\u5b57\u7b26\u4e32\u4e3a\u7a7a\uff0c\u5219\u79f0\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e3a\u597d\u7684\uff1a \u5220\u9664\u6240\u6709\u5c0f\u5199\u5b57\u6bcd \u4e0d\u505c\u5730\u5220\u9664\u8fde\u7eed\u7684 () \u7ed9\u5b9a\u4e00\u4e2a\u597d\u7684\u5b57\u7b26\u4e32 \\(S\\) \u3002\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u7684\u5c0f\u5199\u5b57\u6bcd\u5bf9\u5e94\u4e00\u4e2a\u5c0f\u7403\u3002\u6b64\u5916\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u7bb1\u5b50\u3002 \u4e00\u4e2a\u4eba\u6309\u7167 \\(1,2,3,\\cdots,|S|\\) \u7684\u987a\u5e8f\u53d6\u7403\uff1a \u5982\u679c \\(S_i\\) \u4e3a ( \uff0c\u4ec0\u4e48\u4e5f\u4e0d\u505a\u3002 \u5982\u679c \\(S_i\\) \u4e3a\u5c0f\u5199\u5b57\u6bcd\uff0c\u5c31\u5c06\u8fd9\u4e2a\u5c0f\u7403\u653e\u5165\u7bb1\u5b50\u4e2d\u3002\u5982\u679c\u8fd9\u4e2a\u5c0f\u7403\u5df2\u7ecf\u51fa\u73b0\u5728\u7bb1\u5b50\u4e2d\uff0c\u4ed6\u4f1a\u6655\u5012\u3002 \u5982\u679c \\(S_i\\) \u4e3a ) \uff0c\u53d6\u5c0f\u4e8e \\(i\\) \u7684\u6700\u5927\u7684 \\(j\\) \uff0c\u4f7f \\(S_i \\sim S_j\\) \u8fd9\u4e2a\u5b50\u4e32\u662f\u597d\u7684\u3002\u5c06 \\(j\\) \u5230 \\(i\\) \u64cd\u4f5c\u4e2d\u653e\u5165\u7684\u5c0f\u7403\u5168\u90e8\u53d6\u51fa\u3002 \u8fd9\u4e0d\u5c31\u5de8\u5927\u8822\u4e00\u4e2a\u9898\uff0c\u663e\u7136\u53ea\u80fd\u6700\u8fd1\u7684\u5de6\u53f3\u62ec\u53f7\u914d\u5bf9\uff0c\u8bb0\u5f55\u4e00\u4e0b\u3001\u6a21\u62df\u6ca1\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 // author : black_trees #include <cmath> #include <stack> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 3e5 + 10 ; int cnt [ si ][ 31 ]; void solve () { string s ; cin >> s , s = ' ' + s ; int n = s . size () - 1 ; std :: stack < int > stk ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j < 26 ; j ++ ) cnt [ i ][ j ] = cnt [ i - 1 ][ j ]; if ( s [ i ] == '(' ) stk . push ( i ); else if ( s [ i ] == ')' ) { for ( int j = 0 ; j < 26 ; j ++ ) cnt [ i ][ j ] = cnt [ stk . top ()][ j ]; stk . pop (); } else { if ( cnt [ i ][ s [ i ] - 'a' ] >= 1 ) { cout << \"No\" << endl ; return ; } cnt [ i ][ s [ i ] - 'a' ] ++ ; } } cout << \"Yes\" << endl ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); solve (); return 0 ; } // ()()()(?","title":"ABC283D - Scope"},{"location":"rec/atcf-for-2022-11-12/#abc283e-dont-isolate-elements","text":"\u7ed9\u5b9a\u4e00\u4e2a \\(n\\times m\\) \u7684 \\(01\\) \u77e9\u9635 \\(a\\) \uff0c\u79f0\u4f4d\u4e8e\u7b2c \\(i\\) \u884c\u7b2c \\(j\\) \u5217\u7684\u5143\u7d20\u4e3a \\(a_{i,j}\\) \u3002 \u4f60\u53ef\u4ee5\u8fdb\u884c\u5982\u4e0b\u7684\u64cd\u4f5c\u4efb\u610f\u6b21\uff08\u53ef\u4ee5\u662f \\(0\\) \u6b21\uff09\uff1a - \u9009\u62e9\u4efb\u610f\u4e00\u884c\uff0c\u7ffb\u8f6c\u6b64\u884c\u5185\u7684\u6240\u6709\u5143\u7d20\u3002 \u6211\u4eec\u79f0 \\(a_{i,j}\\) \u88ab\u9694\u79bb\uff0c\u5f53\u4e14\u4ec5\u5f53\u4e0e\u5176\u56db\u8054\u901a\u7684\u56db\u4e2a\u5143\u7d20 \\(a_{i - 1,j}, a_{i + 1, j}, a_{i, j - 1}, a_{i, j + 1}\\) \u7684 \\(01\\) \u6027\u4e0e\u5176\u5747\u4e0d\u76f8\u540c\u3002 \u8bf7\u8f93\u51fa\u4f7f\u5f97\u7ed9\u5b9a\u77e9\u9635\u4e2d\u6ca1\u6709\u5143\u7d20\u88ab\u9694\u79bb\u6240\u9700\u8981\u7684\u6700\u5c0f\u64cd\u4f5c\u6b21\u6570\u3002\u5982\u679c\u65e0\u8bba\u5982\u4f55\u64cd\u4f5c\u90fd\u65e0\u6cd5\u6ee1\u8db3\u8981\u6c42\u5219\u8f93\u51fa -1 \u3002 \\(2\\le n, m \\le 1000\\) \u3002 \u4e0a\u6b21\u770b\u5230\u8fd9\u79cd\u9898\u662f\u4e00\u4e2a\u5173\u706f\u7684\u9898\uff0c\u5c31\u662f 0 1 0 -> 1 0 1 \u7684\u8fd9\u79cd\uff0c\u95ee\u5230\u8fbe\u5408\u6cd5\u72b6\u6001\u6700\u5c0f\u6b65\u6570\uff0c\u597d\u50cf\u662f\u4e2a bfs\u3002 \u6700\u5927\u7684\u95ee\u9898\u662f\u6211\u4e0d\u662f\u5f88\u80fd\u627e\u5230\u8fd9\u91cc\u9762\u7684\u4e00\u4e2a\u201c\u679a\u4e3e\u987a\u5e8f\u201d\uff0c\u6240\u4ee5\u7ecf\u5e38\u60f3\u4e0d\u51fa\u6765\u3002 \u6ce8\u610f\u5230\u4e00\u4e2a\u4e8b\u60c5\u662f\uff0c\u6ca1\u6709\u5b64\u7acb\u5143\u7d20\u7b49\u4ef7\u4e8e\u6ca1\u6709\u5927\u5c0f\u4e3a \\(1\\) \u7684\u8054\u901a\u5757\uff0c\u8003\u8651\u4e00\u4e0b\u600e\u4e48\u5f62\u5f0f\u5316\u8fd9\u4e2a\u64cd\u4f5c\u3002 \u6709\u6ca1\u6709\u53ef\u80fd\u662f\u5148\u5efa\u56fe\uff0c\u7136\u540e\u5efa\u53cd\u56fe\uff1f\u4e4b\u524d\u89c1\u8fc7\u8fd9\u79cd\u72b6\u6001\u5f88\u591a\uff0c\u4f46\u662f\u53ef\u4ee5\u5229\u7528\u7c7b\u4f3c\u5206\u5c42\u56fe\u7684\u601d\u60f3\u8f6c\u5316\u7684\u9898\u3002 \u611f\u89c9\u6bd4\u8f83\u7c7b\u4f3c\uff0c\u56e0\u4e3a\u540c\u5c42\u4e4b\u95f4\u7684\u8fb9\u4e0d\u662f\u53d8\u5316\u7684\uff0c\u6bcf\u6b21\u53d6\u53cd\u5143\u7d20\u4f1a\u8ba9\u4e0a\u4e0b\u4e24\u5c42\u548c\u5f53\u524d\u5c42\u7684\u8fb9\u53d6\u53cd\uff0c\u5e76\u4e14\u663e\u800c\u6613\u89c1\u7684\uff0c\u6bcf\u4e2a\u884c\u6700\u591a\u64cd\u4f5c\u4e00\u6b21\u3002 \u6240\u4ee5\u8003\u8651\u76f4\u63a5\u679a\u4e3e\u6bcf\u4e00\u884c\u7136\u540e\u8003\u8651\u662f\u5426\u64cd\u4f5c\uff0c\u56e0\u4e3a\u4f1a\u5f71\u54cd\u67d0\u4e00\u884c\u7684\u5b64\u7acb\u5143\u7d20\u7684\u53ea\u6709\u4e0a\u4e0b\u4e24\u884c\uff0c\u76f8\u5f53\u4e8e\u627e\u5230\u4e86\u4e00\u4e2a\u679a\u4e3e\u987a\u5e8f\u3002\u8fd9\u4e2a\u72b6\u6001\u6570\u80fd\u51cf\u5230\u5f88\u5c0f\uff0c\u5e94\u8be5\u662f\u8fd9\u6837\u7684\u3002 \u6ce8\u610f\u5230\u662f\u4e0a\u4e0b\u4e24\u884c\uff0c\u7136\u540e\u5c31\u611f\u89c9\u8fd9\u79cd\u95ee\u9898\u5c31\u4e0d\u662f\u5f88\u80fd\u8d2a\u5fc3\uff0c\u5c31\u662f\u4e0d\u80fd\u76f4\u63a5\u626b\u4e00\u904d\u7b97\uff0c\u4e8e\u662f dp\uff0c\u5bf9\u4e8e\u5f53\u524d\u884c\u548c\u4e0a\u4e00\u884c\u52a0\u4e00\u4e2a\u662f\u5426\u64cd\u4f5c\u8fc7\u7684\u72b6\u6001\u5373\u53ef\u3002 \u8f6c\u79fb\u53ef\u80fd\u5f88\u9ebb\u70e6\uff0c\u8981\u5224\u8fb9\u754c\u4ec0\u4e48\u7684\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 1e3 + 10 ; const int inf = 0x3f3f3f3f ; int n , m ; int a [ 2 ][ si ][ si ], dp [ si ][ 2 ][ 2 ]; bool check ( int l , int r , int u , int d , int mid ) { return ( l != mid && r != mid && u != mid && d != mid ); } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> m ; memset ( dp , 0x3f , sizeof dp ); for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) { cin >> a [ 0 ][ i ][ j ], a [ 1 ][ i ][ j ] = a [ 0 ][ i ][ j ] ^ 1 ; } } for ( int i = 0 ; i <= m + 1 ; i ++ ) a [ 0 ][ 0 ][ i ] = a [ 1 ][ 0 ][ i ] = a [ 0 ][ n + 1 ][ i ] = a [ 1 ][ n + 1 ][ i ] = 2 ; for ( int i = 0 ; i <= n + 1 ; i ++ ) a [ 0 ][ i ][ 0 ] = a [ 1 ][ i ][ 0 ] = a [ 0 ][ i ][ m + 1 ] = a [ 1 ][ i ][ m + 1 ] = 2 ; dp [ 0 ][ 0 ][ 0 ] = dp [ 0 ][ 0 ][ 1 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j < 2 ; j ++ ) { for ( int k = 0 ; k < 2 ; k ++ ) { for ( int l = 0 ; l < 2 ; l ++ ) { bool ff = false ; for ( int x = 1 ; x <= m ; x ++ ) ff |= check ( a [ k ][ i ][ x - 1 ], a [ k ][ i ][ x + 1 ], a [ j ][ i - 1 ][ x ], a [ l ][ i + 1 ][ x ], a [ k ][ i ][ x ]); if ( ! ff ) dp [ i ][ k ][ l ] = min ( dp [ i ][ k ][ l ], dp [ i - 1 ][ j ][ k ] + k ); } } } } int ans = min ( dp [ n ][ 1 ][ 0 ], dp [ n ][ 0 ][ 0 ]); cout << ( ans == inf ? -1 : ans ) << endl ; return 0 ; } // ()()()(? // https://www.cnblogs.com/DM11/p/17017957.html","title":"ABC283E - Don't Isolate Elements"},{"location":"rec/atcf-for-2022-11-12/#abc283f-permutation-distance","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5217 \\(p\\) \uff0c\u5bf9\u4e8e\u6bcf\u4e2a \\(i\\) \u6c42 \\(\\min\\limits_{j \\not ={i}}\\{|p_i - p_j| + |i - j|\\}\\) \u3002 \\(1\\le n \\le 1.5e5\\) \u3002 \u611f\u89c9\u8fd9\u79cd\u66b4\u529b\u662f\u626b\u4e00\u904d\u6240\u6709\u7684\u4e1c\u897f\u6c42\u6700\u503c\u7684\uff0c\u4e00\u5b9a\u4f1a\u6709\u4e00\u4e2a\u6027\u8d28\u7528\u6765\u6392\u9664\u5197\u6742\u72b6\u6001\u3002 \u8fd9\u91cc\u8fd8\u6709\u5bf9\u4e8e\u6240\u6709 \\(i\\) \u8be2\u95ee\u4e00\u4e2a\u7c7b\u4f3c\u7684\u67ff\u5b50\u7684\u4e1c\u897f\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u8981\u679a\u4e3e\u8d21\u732e\u3002 \u7136\u540e\u6211\u8fd8\u4e0d\u4f1a\u3002 \u53d1\u73b0\u7edd\u5bf9\u503c\u5f88\u9ebb\u70e6\uff0c\u4e8e\u662f\u6211\u4eec\u62c6\u5f00\u6765\u770b\uff08\u4e0d\u8981\u5bb3\u6015\u5206\u8ba8\uff09\uff1b \u5982\u679c \\(P_i > P_j\\) \uff1a 1. \u5982\u679c \\(i > j\\) \uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42 \\(\\min\\{(p_i+i) - (p_j+j)\\}\\) 2. \u5982\u679c \\(i < j\\) \uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42 \\(\\min\\{(p_i-i) - (p_j-j)\\}\\) \u5982\u679c \\(P_i < P_j\\) \uff1a 1. \u5982\u679c \\(i > j\\) \uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42 \\(\\min\\{(-p_i+i) - (-p_j+j)\\}\\) 2. \u5982\u679c \\(i < j\\) \uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42 \\(\\min\\{(-p_i-i) - (-p_j-j)\\}\\) \u5176\u5b9e\u5bf9\u4e8e\u56fa\u5b9a\u7684 \\(i\\) \uff0c\u6211\u4eec\u53ea\u9700\u8981\u8ba9\u540e\u9762\u90a3\u5768 \\(j\\) \u76f8\u5173\u7684\u67ff\u5b50\u5c3d\u91cf\u5927\u3002 \u597d\uff0c\u7136\u540e\u53d1\u73b0\u8fd9\u91cc\u6709\u4e24\u4e2a\u6761\u4ef6\u9650\u5236\uff0c\u6bd4\u8f83\u9ebb\u70e6\uff0c\u56e0\u4e3a\u4e24\u91cd\u9650\u5236\u662f\u4e0d\u597d\u5904\u7406\u7684\u3002 \u5982\u679c\u5355\u72ec\u6765\u7b97\u8fd9\u4e24\u4e2a\u6761\u4ef6\u662f\u5f88\u65b9\u4fbf\u7684\uff0c\u8fd9\u4e2a\u4e0b\u6807\u9650\u5236\u5c31\u76f4\u63a5 RMQ \u6216\u8005\u626b\u4e00\u904d\u8bb0\u5f55\uff0c\u503c\u57df\u9650\u5236\u662f\u7ecf\u5178\u7684\u4e00\u4e2a\u5c0f\u6a21\u578b\uff0c\u53ef\u4ee5\u5728\u503c\u57df\u4e0a\u5229\u7528\u6811\u72b6\u6570\u7ec4\u52a8\u6001\u7ef4\u62a4\u524d\u7f00\u6700\u503c\u6765\u505a\u3002 \u6240\u4ee5\u6211\u4eec\u60f3\u8981\u505a\u7684\u662f\u628a\u8fd9\u4e24\u4e2a\u6761\u4ef6\u5206\u5f00\u7b97\uff0c\u6709\u70b9\u7c7b\u4f3c\u5355\u8c03\u961f\u5217\u4f18\u5316 dp \u90a3\u79cd\uff0c\u56fa\u5b9a\u4e00\u4e2a\uff0c\u5904\u7406\u4e00\u4e2a\u8fd9\u6837\u5b50\u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u5148\u4ece\u524d\u5f80\u540e\u679a\u4e3e \\(i\\) \uff0c\u7136\u540e\u4ece\u540e\u5f80\u524d\u679a\u4e3e \\(i\\) \uff0c\u8fd9\u4e2a\u76f8\u5f53\u4e8e\u6ee1\u8db3\u4e0b\u6807\u9650\u5236\u3002 \u7136\u540e\u6bcf\u6b21\u626b\u7684\u65f6\u5019\u7528\u4e24\u4e2a\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u4e00\u4e0b\u503c\u57df\u4e0a\u7684\u524d/\u540e\u7f00\u6700\u503c\u5373\u53ef\u3002 \u8fd9\u4e2a\u5957\u8def\u662f wcx \u8001\u5e08\u6559\u7684\uff0c\u542c\u8bf4\u8fd9\u4e2a\u4e1c\u897f\u5c31\u662f\u4e8c\u7ef4\u6570\u70b9\uff0c\u6709\u5fc5\u8981\u5b66\u4e00\u4e0b\u3002 \u5367\u69fd\uff0c\u5199\u51fa\u6765\u7b80\u5355\u8c03\u4e00\u4e0b 1A \u4e86 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; const int inf = 0x3f3f3f3f ; int n , p [ si ]; inline int lowbit ( int x ) { return x & - x ; } struct Fenwick { int t [ si ]; void Init () { memset ( t , -0x3f , sizeof t ); } void Add ( int x , int v ) { while ( x <= n ) { t [ x ] = max ( t [ x ], v ); x += lowbit ( x ); } } int Que ( int x ) { int ret = - inf ; // ! \uff01\uff01\uff01\uff01\uff01 while ( x ) { ret = max ( ret , t [ x ]); x -= lowbit ( x ); } return ret ; } } pf , sf ; int res [ si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); pf . Init (), sf . Init (); cin >> n , memset ( res , 0x3f , sizeof res ); for ( int i = 1 ; i <= n ; ++ i ) cin >> p [ i ]; // i > j for ( int i = 1 ; i <= n ; ++ i ) { int ans = inf ; ans = min ( ans , p [ i ] + i - pf . Que ( p [ i ])); // prefix ans = min ( ans , - p [ i ] + i - sf . Que ( n - p [ i ] + 1 )); // suffix res [ i ] = min ( res [ i ], ans ); pf . Add ( p [ i ], p [ i ] + i ), sf . Add ( n - p [ i ] + 1 , - p [ i ] + i ); } // i < j pf . Init (), sf . Init (); for ( int i = n ; i >= 1 ; -- i ) { int ans = inf ; ans = min ( ans , p [ i ] - i - pf . Que ( p [ i ])); // prefix ans = min ( ans , - p [ i ] - i - sf . Que ( n - p [ i ] + 1 )); // suffix res [ i ] = min ( res [ i ], ans ); pf . Add ( p [ i ], p [ i ] - i ), sf . Add ( n - p [ i ] + 1 , - p [ i ] - i ); } for ( int i = 1 ; i <= n ; ++ i ) cout << res [ i ] << \" \\n \" [ i == n ]; return 0 ; } // ()()()(?","title":"ABC283F - Permutation Distance"},{"location":"rec/atcf-for-2023-01-02/","text":"\u5f00\u4e86\u4e00\u4e2a \u8868\u683c \u7528\u6765\u8bb0\u5f55\u8fd1\u671f\u7684\u505a\u9898\u60c5\u51b5\uff0c\u8fd9\u6bb5\u65f6\u95f4\u7684\u4e2d\u5fc3\u5c31\u5dee\u4e0d\u591a\u662f ABC DEF \u4e86\uff0c\u7ec3\u5230\u80fd\u8d5b\u65f6\u505a\u51fa\u6765\u5c31\u53ef\u4ee5\u8fdb\u4e0b\u4e00\u9636\u6bb5\u4e86\u3002 \u9898\u76ee\u7ffb\u8bd1\u5927\u90e8\u5206\u6765\u81ea\u6d1b\u8c37\u3002 ABC284D - Happy New Year 2023 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 \\(N\\le 9\\times 10^{18}\\) \uff0c\u4fdd\u8bc1 \\(N=p^2q\\) \u4e14 \\(p,q\\) \u5747\u4e3a\u8d28\u6570\uff0c\u8bf7\u6c42\u51fa \\(p,q\\) \u3002 \u7ffb\u8bd1 by @Mars_Dingdang \\(O(n^{\\frac{1}{3}})\\) \u505a\u6cd5\u8fd8\u4e0d\u4f1a\uff0c\u4e4b\u540e\u8865\u3002 \u6211\u662f \\(O(n^{\\frac{1}{4}})\\) \u7684 Pr \u505a\u6cd5\u3002 \u5c31\u628a\u8fd9\u4e2a\u5f53\u6210\u5927\u6570\u6c42\u6700\u5927\u8d28\u56e0\u5b50\u7684\u677f\u5b50\u5c31\u884c\u4e86\uff0c\u7c98\u7684\u4e24\u5e74\u524d\u7684\u677f\u5b50\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 // author : black_trees #include <cmath> #include <ctime> #include <cstdio> #include <random> #include <cstring> #include <iomanip> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; #define li inline #define re register #define ll __int128 __int128 abs_128 ( __int128 x ){ if ( x > 0 ){ return x ; } return - x ; } namespace Miller_Rabin { const int Pcnt = 12 ; const ll p [ Pcnt ] = { 2 , 3 , 5 , 7 , 11 , 13 , 17 , 19 , 61 , 2333 , 4567 , 24251 }; li ll pow ( re ll a , re ll b , re ll p ){ re ll ans = 1 ; for (; b ; a = a * a % p , b >>= 1 ){ if ( b & 1 ){ ans = ans * a % p ; } } return ans ; } li bool check ( re ll x , re ll p ){ if ( x % p == 0 || pow ( p % x , x -1 , x ) ^ 1 ){ return true ; } re ll t , k = x -1 ; while (( k ^ 1 ) & 1 ){ t = pow ( p % x , k >>= 1 , x ); if ( t ^ 1 && t ^ x -1 ){ return true ; } if ( ! ( t ^ x -1 )){ return false ; } } return false ; } inline bool MR ( re ll x ){ if ( x < 2 ) return false ; for ( re int i = 0 ; i ^ Pcnt ; ++ i ){ if ( ! ( x ^ p [ i ])) return true ; if ( check ( x , p [ i ])) return false ; } return true ; } } namespace Pollard_Rho { #define Rand(x) (1ll*rand()*rand()%(x)+1) li ll gcd ( const ll a , const ll b ){ return b ? gcd ( b , a % b ) : a ;} li ll mul ( const re ll x , const re ll y , const re ll X ){ ll k = ( 1.0L * x * y ) / ( 1.0L * X ) -1 , t = x * y - k * X ; while ( t < 0 ) t += X ; return t ; } li ll PR ( const re ll x , const re ll y ){ re int t = 0 , k = 1 ; re ll v0 = Rand ( x -1 ), v = v0 , d , s = 1 ; while ( true ){ v = ( mul ( v , v , x ) + y ) % x , s = mul ( s , abs_128 ( v - v0 ), x ); if ( ! ( v ^ v0 ) ||! s ) return x ; if ( ++ t == k ){ if (( d = gcd ( s , x )) ^ 1 ) return d ; v0 = v , k <<= 1 ;} } } li void Resolve ( re ll x , re ll & ans ){ if ( ! ( x ^ 1 ) || x <= ans ) return ; if ( Miller_Rabin :: MR ( x )){ if ( ans < x ) ans = x ; return ; } re ll y = x ; while (( y = PR ( x , Rand ( x ))) == x ); while ( ! ( x % y )){ x /= y ; } Resolve ( x , ans ); Resolve ( y , ans ); } li long long check ( ll x ){ re ll ans = 0 ; Resolve ( x , ans ); return ans ; } } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); srand ( time ( NULL )); int T ; cin >> T ; while ( T -- ) { unsigned long long x , p , q ; cin >> x , p = Pollard_Rho :: check ( x ); x /= p ; if ( x % p == 0 ) q = x / p ; else q = sqrt ( x ), swap ( p , q ); cout << p << \" \" << q << endl ; } return 0 ; } // ()()()(? ABC284F - ABCBAC \u03c8(\uff40\u2207\u00b4)\u03c8 \u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(N\\) \u7684\u5b57\u7b26\u4e32 \\(S\\) \u548c\u4e00\u4e2a\u6574\u6570 \\(i\\in [0,N]\\) \uff0c\u5b9a\u4e49 \\(f_i(S)\\) \u6240\u5f97\u7684\u5b57\u7b26\u4e32\u4e3a\u4ee5\u4e0b\u4e09\u8005\u987a\u6b21\u8fde\u63a5\uff1a \\(S\\) \u7684\u524d \\(i\\) \u4e2a\u5b57\u7b26\uff1b \u5c06 \\(S\\) \u7ffb\u8f6c\u5f97\u5230\u7684\u5b57\u7b26\u4e32\uff1b \\(S\\) \u7684\u540e \\(N-i\\) \u4e2a\u5b57\u7b26\u3002 \u4f8b\u5982\uff0c\u5bf9\u4e8e \\(S=\\texttt{abc}\\) \uff0c \\(i=2\\) \u6709 \\(f_i(S)=\\texttt{abcbac}\\) \u3002 \u73b0\u5728\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(2N\\) \u7684\u5b57\u7b26\u4e32 \\(T\\) \uff0c\u4f60\u9700\u8981\u6c42\u51fa\u4efb\u610f\u4e00\u5bf9 \\((S,i)\\) \u6ee1\u8db3 \\(f_i(S)=T\\) \u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u8f93\u51fa \\(-1\\) \u3002 \u7ffb\u8bd1 by @Mars_Dingdang \u6ce8\u610f\u5230 \\(1\\le N \\le 10^6\\) \uff0c\u4e0d\u96be\u60f3\u5230 \\(O(N)\\) \u505a\u3002 \u7136\u540e\u6211\u4eec\u8981\u68c0\u67e5\uff0c\u505a\u4e00\u4e9b\u5339\u914d\u4e4b\u7c7b\u7684\uff0c\u6240\u4ee5\u4f30\u8ba1\u662f\u5b57\u7b26\u4e32\u54c8\u5e0c\u3002 \u76f4\u63a5\u8003\u8651\u679a\u4e3e \\(i\\) \uff0c\u7136\u540e\u5b57\u7b26\u4e32 hash check \u4e00\u4e0b\u5c31\u884c\u4e86\uff0c\u56e0\u4e3a\u8981\u53cd\u4e32\uff0c\u6240\u4ee5\u524d\u540e\u7f00\u90fd\u8981\u505a\u4e00\u6b21\u3002 \u7eaf\u50bb\u903c\uff0c\u5361\u6211\u81ea\u7136\u6ea2\u51fa\uff0c\u5199\u4e86\u4e00\u4e2a\u53cc\u54c8\u5e0c\u624d\u8fc7\u3002 CF1783C - Yet Another Tournament \u03c8(\uff40\u2207\u00b4)\u03c8 \u6709 \\(n\\) \u4e2a\u9009\u624b\uff0c\u7f16\u53f7\u4e3a \\(1\\) \u81f3 \\(n\\) \uff0c\u6bcf\u4e24\u4e2a\u9009\u624b\u5bf9\u6218\u65f6\uff0c\u7f16\u53f7\u5927\u7684\u5c06\u4f1a\u80dc\u5229\u3002 \u4f60\u53ef\u4ee5\u51c6\u5907 \\(m\\) \u5355\u4f4d\u65f6\u95f4\uff0c\u6bcf\u51c6\u5907 \\(a_i\\) \u65f6\u95f4\u5c31\u53ef\u4ee5\u8d62 \\(i\\) \u53f7\u9009\u624b\u3002 \u6309\u80dc\u5229\u7684\u603b\u6b21\u6570\u6392\u540d\uff0c\u6c42\u4f60\u6700\u9ad8\u591a\u5c11\u540d\u3002 \u6ce8\u610f\u5230\u4e00\u4e2a\u6bd4\u8f83\u5173\u952e\u7684\u70b9\u662f\uff0c\u5982\u679c\u80fd\u6253\u8d62\u7684\u4eba\u76f8\u540c\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u4f18\u7684\u51b3\u7b56\u4e00\u5b9a\u662f\u5c3d\u91cf\u6253\u7206 rk \u9ad8\u7684\u4eba\u3002 \u6240\u4ee5\u5148\u6392\u5e8f\u76f4\u63a5\u66b4\u529b\u53d6\uff0c\u7136\u540e\u4ece\u540e\u9762\u4e0d\u65ad\u8d2a\u5fc3\u7684\u62ff\u4e00\u4e2a\uff0c\u9000\u6389\u4e00\u4e2a\u5df2\u7ecf\u9009\u4e86\u7684\u5373\u53ef\u3002 \u5982\u679c\u7528\u4f18\u5148\u961f\u5217\u5b9e\u73b0\u4f1a\u6bd4\u8f83\u590d\u6742\uff0c\u4ee3\u7801\u91cc\u6ce8\u91ca\u6389\u4e86\uff0c\u662f\u8fd8\u6ca1\u8c03\u51fa\u6765\u7684\uff0c\u540e\u6765\u53d1\u73b0\u53ef\u4ee5\u76f4\u63a5\u524d\u7f00\u548c\uff08 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 // author : black_trees #include <cmath> #include <queue> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 5e5 + 10 ; int n , m ; int a [ si ], b [ si ], sum [ si ]; // struct node { // int id, cnt, val; // bool operator < (const node &b) const { // if(val == b.val) return cnt > b.cnt; // return val < b.val; // } // } a[si]; // int b[si]; // std::priority_queue<std::pair<node, int>> q; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { // cin >> n >> m, b[0] = b[n + 1] = 0; // while(!q.empty()) q.pop(); // for(int i = 1; i <= n; ++i) // cin >> a[i].val, a[i].id = i, a[i].cnt = i - 1, b[i] = 0; // sort(a + 1, a + 1 + n); // int cnt = 0; // for(int i = 1; i <= n; ++i) { // if(m - a[i].val >= 0) { // m -= a[i].val, cnt++; // q.push({a[i], i}); // } // else { // if(q.empty()) break; // for(int j = i; j <= n; ++j) a[i].cnt ++; // for(int j = i; j <= n; ++j) { // auto x = q.top(); // cout << x.first.id << \" \" << x.first.cnt << \" \" << x.first.val << \" \" << x.second << endl; // if(m + x.first.val - a[i].val >= 0) { // q.pop(), m += x.first.val, m -= a[i].val; // a[x.second].cnt ++, a[i].cnt --; // q.push({a[i], i}); // } // } // break; // } // } // b[cnt] += 1; // for(int i = 1; i <= n; ++i) // b[a[i].cnt] += 1; // for(int i = 1; i <= n; ++i) { // cout << \"b[\" << i << \"] = \" << b[i] << \" \"; // } // cout << endl; // int ans = 0; // for(int i = n; i >= 0; --i) { // if(i == cnt) { ans++; break; } // ans += b[i]; // } // cout << ans << endl; // cout << \" --- - - - -- - - \" << endl; cin >> n >> m ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], b [ i ] = a [ i ]; sort ( b + 1 , b + 1 + n ); for ( int i = 1 ; i <= n ; ++ i ) sum [ i ] = sum [ i - 1 ] + b [ i ]; int ans = n + 1 ; for ( int i = 1 ; i <= n ; ++ i ) { if ( m >= sum [ i ]) ans = min ( ans , n - i + 1 ); if ( i < n && m >= sum [ i ] + max ( a [ i + 1 ] - b [ i ], 0 )) ans = min ( ans , n - i ); } cout << ans << endl ; } return 0 ; } // ()()()(? CF1783E - Game of the Year \u03c8(\uff40\u2207\u00b4)\u03c8 Monocarp \u548c Polycarp \u6b63\u5728\u73a9\u7535\u8111\u6e38\u620f\u3002\u6e38\u620f\u7279\u70b9\uff1a$ n $ \u4e2a\u7f16\u53f7\u4ece $ 1 $ \u5230 $ n $ \u7684BOSS\u3002 \u4ed6\u4fe9\u5c06\u7528\u4ee5\u4e0b\u65b9\u5f0f\u4e0eBOSS\u6218\u6597 Monocarp \u8fdb\u884c \\(k\\) \u6b21\u5c1d\u8bd5\u6492\u6389boss; Polycarp \u8fdb\u884c \\(k\\) \u6b21\u5c1d\u8bd5\u6492\u6389boss; Monocarp \u8fdb\u884c \\(k\\) \u6b21\u5c1d\u8bd5\u6492\u6389boss; Polycarp \u8fdb\u884c \\(k\\) \u6b21\u5c1d\u8bd5\u6492\u6389boss; ... Monocarp \u5728\u7b2c \\(a_i\\) \u6b21\u5c1d\u8bd5\u4e2d\u6492\u6389\u4e86\u7b2c \\(i\\) \u53eaBOSS\u3002Polycarp \u5728\u7b2c \\(b_i\\) \u6b21\u5c1d\u8bd5\u4e2d\u6492\u6389\u4e86\u7b2c \\(i\\) \u53eaBOSS\u3002\u5176\u4e2d\u4e00\u4e2a\u4eba\u6492\u6389\u7b2c \\(i\\) \u53eaBOSS\u540e\uff0c\u4ed6\u4eec\u5c31\u4f1a\u5c1d\u8bd5\u6492\u7b2c \\((i+1)\\) \u53eaBOSS\u3002\u5e76\u4e14\u4ed6\u4eec\u7684\u5c1d\u8bd5\u8ba1\u6570\u5668\u90fd\u4f1a\u6e05\u7a7a\u3002\u6492\u6389\u7b2c \\(n\\) \u53eaBOSS\u540e\uff0c\u6e38\u620f\u7ed3\u675f\u3002 \u627e\u5230\u4ece \\(1\\) \u5230 $ n $\u6240\u6709\u7684 \\(k\\) \u503c\uff0c \u4f7f\u5f97 Monocarp \u53ef\u4ee5\u6740\u6b7b\u6240\u6709\u7684BOSS\u3002 \u5206\u6790\u4e00\u4e0b\uff0c\u8981\u8ba9 Monocarp \u628a\u6bcf\u4e00\u4e2a\u90fd\u4f18\u5148\u6253\u6389\uff0c\u5c31\u8981\u4fdd\u8bc1 \\(\\lceil \\dfrac{a_i}{k}\\rceil \\le \\lceil\\dfrac{b_i}{k}\\rceil\\) \u3002 \u76f4\u63a5\u66b4\u529b\u6c42\u590d\u6742\u5ea6 \\(O(n^2)\\) \uff0c\u5feb\u4e0a\u5929\u4e86\uff0c\u80af\u5b9a\u8981\u8003\u8651 \\(O(1) \\sim O(\\log n)\\) \u7684\u5355\u6b21\u64cd\u4f5c\u3002 \u5982\u679c \\(a_i \\le b_i\\) \u663e\u7136\u4e0d\u7ba1\u600e\u4e48\u6837\u90fd\u662f Mono \u5148\u6253\u5b8c\u3002 \u4e8e\u662f\u6211\u4eec\u8003\u8651 \\(a_i > b_i\\) \u7684\u60c5\u51b5\u3002 \u7b2c\u4e00\u79cd\u60c5\u51b5\u662f \\(k \\ge a_i\\) \uff0c\u8fd9\u6837\u663e\u7136\u7b2c\u4e00\u8f6e Mono \u5c31\u6253\u5b8c\u4e86\u3002 \u7b2c\u4e8c\u79cd\u60c5\u51b5\u662f \\(k < a_i\\) \uff0c\u8fd9\u6837\u7684\u8bdd\u8981\u4fdd\u8bc1 \\(\\lceil \\dfrac{a_i}{k}\\rceil \\le \\lceil\\dfrac{b_i}{k}\\rceil\\) \uff0c\u9700\u8981\u6ee1\u8db3\uff0c\u53ea\u8003\u8651\u6700\u540e\u4e24\u6b21 attack \u7684\u65f6\u5019\uff0cMono \u6253\u51fa\u7b2c\u4e00\u6b21\uff0cPoly \u6253\u51fa\u7b2c\u4e00\u6b21\uff0c\u6b64\u65f6\u6ee1\u8db3 \\(a_i \\le k\\) \uff0c\u8fd9\u6837\u7b2c\u4e8c\u6b21 Mono \u5c31\u53ef\u4ee5\u4f18\u5148\u6253\u6389\u3002 \u672c\u8d28\u4e0a\u662f \\(b_i \\mod k\\) \u8981\u6709\u5927\u4e8e\u96f6\u7684\u4f59\u6570\uff0c\u4e0d\u7136\u56e0\u4e3a \\(a_i > b_i\\) \uff0cPoly \u4e00\u5b9a\u4f1a\u5728 Mono \u4e4b\u524d\u6253\u5b8c\u3002 \u6240\u4ee5 \\(k \\not|\\ b_i\\) \u5373\u53ef\uff0c\u7136\u540e\u6ce8\u610f\u5230 \\([b_i, a_i)\\) \u8fd9\u4e2a\u533a\u95f4\u91cc\u9762\u7684\u6570\uff0cPoly \u7b2c\u4e00\u6b21\u5c31\u4f1a\u6253\u6389\uff0c\u7136\u540e Mono \u8fd8\u5269\u4e00\u70b9\uff0c\u8fd9\u4e9b\u4e5f\u8981\u7b5b\u6389\u3002 \u7136\u540e\u6211\u968f\u4fbf\u624b\u73a9\u4e86\u4e00\u4e0b\u6ce8\u610f\u5230\uff0c\u5982\u679c \\(a_i = 10, b_i = 4\\) \u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u7b5b\u4e0d\u6389 \\(3\\) \uff0c\u4f1a\u5bc4\u6389\u3002 \u53d1\u73b0\u5176\u5b9e \\([b_i, a_i)\\) \u8fd9\u4e00\u6bb5\u7684\u6240\u6709\u6570\u7684\u56e0\u5b50\u4e5f\u662f\u8981\u7b5b\u6389\u7684\uff0c\u5176\u5b9e\u672c\u8d28\u662f\u548c \\(b_i \\mod k \\not ={0}\\) \u4e00\u4e2a\u9053\u7406\uff0c\u56e0\u4e3a\u6211\u4e0a\u9762\u7684\u60f3\u6cd5\u53ea\u8003\u8651\u4e86 \\(a_i, b_i\\) \u5728\u76f8\u90bb\u7684\u4e24\u4e2a\u5757\u91cc\u9762\u7684\u60c5\u51b5\uff08\u5757\u6307\u6570\u8f74\u4e0a\u6309 \\(k\\) \u5206\u5757\uff09\u3002 \u8fd9\u6837\u505a\u53ef\u4ee5\u4e0d\u7528\u8003\u8651 \\([b_i, a_i)\\) \uff0c\u56e0\u4e3a\u56e0\u5b50\u5305\u542b\u6570\u672c\u8eab\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 // author : black_trees #include <map> #include <set> #include <cmath> #include <bitset> #include <cstdio> #include <vector> #include <utility> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int n , m ; int a [ si ], b [ si ]; bool vis [ si ]; std :: set < int > s ; std :: vector < int > fact [ si ]; void get_factors ( int n ) { for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= n / i ; ++ j ) fact [ i * j ]. emplace_back ( i ); } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); get_factors ( si - 10 ); int T ; cin >> T ; while ( T -- ) { cin >> n , s . clear (); for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], vis [ i ] = true ; for ( int i = 1 ; i <= n ; ++ i ) cin >> b [ i ], s . insert ( i ); for ( int i = 1 ; i <= n ; ++ i ) { if ( a [ i ] <= b [ i ]) continue ; auto l = s . lower_bound ( b [ i ]), r = s . lower_bound ( a [ i ]); for ( auto j = l ; j != r ; ++ j ) for ( auto x : fact [ * j ]) vis [ x ] = false ; s . erase ( l , r ); } int cnt = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { if ( vis [ i ]) cnt ++ ; } cout << cnt << endl ; for ( int i = 1 ; i <= n ; ++ i ) { if ( vis [ i ]) cout << i << \" \\n \" [ i == n ]; } } return 0 ; } // ()()()(? ABC284E - Count Simple Paths \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e00\u5f20 \\(N\\) \u4e2a\u8282\u70b9 \\(M\\) \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u4fdd\u8bc1\u6bcf\u4e2a\u8282\u70b9\u7684\u5ea6\u6570 \\(\\le 10\\) \u3002 \u8bb0\u4ece\u4efb\u610f\u8282\u70b9\u56de\u5230 \\(1\\) \u53f7\u70b9\u7684\u4e0d\u540c\u8def\u5f84\u603b\u6570\u4e3a \\(K\\) \uff0c\u8bf7\u8f93\u51fa \\(\\min(K,10^6)\\) \u3002 \u7ffb\u8bd1 by @Mars_Dingdang \u611f\u89c9\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u5c31\u662f\u7b80\u5355\u7684 dfs\u3002 \u4f46\u662f\u6211\u5c45\u7136\u8fde\u628a vis \u653e\u5230 dfs \u5916\u9762\u7528\u6765\u56de\u6eaf\u90fd\u5fd8\u8bb0\u4e86\uff1f dfs \u90fd\u4e0d\u4f1a\u5199\u4e86\uff1f\uff1f\uff1f Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 // author : black_trees #include <cmath> #include <queue> #include <cstdio> #include <cstring> #include <iomanip> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int n , m ; int tot = 0 , head [ si ]; struct Edge { int ver , Next ; } e [ si << 1 ]; inline void add ( int u , int v ) { e [ tot ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot ++ ; } int ans = 0 ; bool vis [ si ]; void dfs ( int u , int fa ) { if ( ans >= 1000000 ) cout << \"1000000\" << endl , exit ( 0 ); vis [ u ] = true ; ans ++ ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; if ( vis [ v ]) continue ; dfs ( v , u ); } vis [ u ] = false ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); memset ( head , -1 , sizeof head ), tot = 0 ; cin >> n >> m ; for ( int i = 1 ; i <= m ; ++ i ) { int u , v ; cin >> u >> v ; add ( u , v ), add ( v , u ); } dfs ( 1 , 0 ); cout << ans << endl ; return 0 ; } CF1775C - Interesting Sequence \u03c8(\uff40\u2207\u00b4)\u03c8 \u56e0\u4e3a\u6bd4\u8f83\u61d2\u6240\u4ee5\u8fd9\u51e0\u4e2a\u9898\u5c31\u662f\u53e3\u80e1\u9898\u89e3\uff0c\u4ee3\u7801\u4e5f\u61d2\u5f97\u653e\u4e86\u3002 \u7ed9\u4e24\u4e2a\u6570\uff0c \\(n\\) \u548c \\(x\\) \uff0c\u95ee\u662f\u5426\u5b58\u5728 \\(m\\) \uff0c\u4f7f\u5f97 \\(n \\& n+1 \\& \u2026\u2026 \\& m = x\\) \uff0c\u5982\u679c\u5b58\u5728\u6c42\u51fa\u6700\u5c0f\u7684 \\(m\\) \uff0c\u5426\u5219\u8f93\u51fa \\(-1\\) \u3002 \u8003\u8651\u4e8c\u8fdb\u5236\u4e0b\u8d2a\u5fc3\u5373\u53ef\uff0c\u6ce8\u610f\u5904\u7406\u8fdb\u4f4d\u548c\u65e0\u89e3\u3002 CF1775D - Friendly Spiders \u03c8(\uff40\u2207\u00b4)\u03c8 \u706b\u661f\u4e0a\u6709\u4e00\u79cd\u795e\u79d8\u7684\u7535\u5b50\u8718\u86db\u3002 \u4e3a\u4e86\u7814\u7a76\u8fd9\u79cd\u8718\u86db\uff0c\u79d1\u5b66\u5bb6\u627e\u6765\u4e86\u5176\u4e2d\u7684 \\(n\\) \u4e2a\uff0c\u6bcf\u4e2a\u8718\u86db\u6709\u4e0d\u540c\u7684\u817f\u6570\uff0c\u7528\u6570\u7ec4 \\(a\\) \u8868\u793a\u3002\u79d1\u5b66\u5bb6\u4eec\u53d1\u73b0\uff0c\u6709\u7684\u8718\u86db\u4e92\u76f8\u662f\u670b\u53cb\uff0c\u5982\u679c\u7b2c \\(i\\) \u4e2a\u8718\u86db\u548c\u7b2c \\(j\\) \u4e2a\u8718\u86db\u662f\u670b\u53cb\u7684\u8bdd\uff0c\u90a3\u4e48\u8981\u6ee1\u8db3 \\(\\operatorname{gcd}(a_{i},a_{j})\u22601\\) \uff0c\u5176\u4e2d \\(\\operatorname{gcd}(x,y)\\) \u51fd\u6570\u8868\u793a\u6c42 \\(x\\) \u548c \\(y\\) \u7684\u6700\u5927\u516c\u7ea6\u6570\u3002 \u79d1\u5b66\u5bb6\u53d1\u73b0\u8718\u86db\u53ef\u4ee5\u4e92\u76f8\u53d1\u9001\u4fe1\u606f\u3002\u5982\u679c\u4e24\u53ea\u8718\u86db\u662f\u670b\u53cb\uff0c\u90a3\u4e48\u5b83\u4eec\u53ef\u4ee5\u7528\u4e00\u79d2\u949f\u76f4\u63a5\u53d1\u9001\u6d88\u606f\u3002\u5426\u5219\uff0c\u8718\u86db\u5fc5\u987b\u5c06\u6d88\u606f\u4f20\u9012\u7ed9\u4ed6\u7684\u670b\u53cb\uff0c\u800c\u670b\u53cb\u53c8\u5fc5\u987b\u5c06\u6d88\u606f\u4f20\u9012\u7ed9\u4ed6\u7684\u670b\u53cb\uff0c\u4f9d\u6b64\u7c7b\u63a8\uff0c\u76f4\u5230\u6d88\u606f\u5230\u8fbe\u6536\u4ef6\u4eba\u3002 \u5047\u8bbe\u6709\u4e00\u53ea\u516b\u6761\u817f\u7684\u8718\u86db\u5411\u4e00\u53ea \\(15\\) \u6761\u817f\u7684\u8718\u86db\u4f20\u9012\u6d88\u606f\uff0c\u4f46\u662f\u7531\u4e8e \\(\\operatorname{gcd}(8,15)=1\\) \u6240\u4ee5\u4ed6\u4e0d\u80fd\u76f4\u63a5\u53d1\u9001\uff0c\u4f46\u5b83\u53ef\u4ee5\u901a\u8fc7\u516d\u6761\u817f\u7684\u8718\u86db\u53d1\u9001\u6d88\u606f\uff0c\u56e0\u4e3a \\(\\operatorname{gcd}(8,6)=2\\) \u5e76\u4e14 \\(\\operatorname{gcd}(6,15)=3\\) \u6240\u4ee5\u6d88\u606f\u5c06\u4f1a\u5728\u4e24\u79d2\u949f\u5230\u8fbe\u3002 \u79d1\u5b66\u5bb6\u4eec\u5e0c\u671b\u627e\u5230\u7b2c \\(s\\) \u4e2a\u8718\u86db\u5411\u7b2c \\(t\\) \u4e2a\u8718\u86db\u53d1\u9001\u6d88\u606f\u7684\u6700\u77ed\u65f6\u95f4\uff0c\u4ee5\u53ca\u6700\u77ed\u8def\u7ebf\u3002 \u8003\u8651\u4f18\u5316\u5efa\u56fe\uff0c\u53ea\u9700\u8981\u5148\u7b5b\u51fa\u6240\u6709\u8d28\u6570\uff0c\u5c06\u5176\u7684\u500d\u6570\u5168\u90e8\u8fde\u8fb9\u3002 \u76f8\u5f53\u4e8e\u627e\u516c\u5171\u8d28\u56e0\u5b50\u65f6\u4e3a\u4e86\u65b9\u4fbf\u53cd\u7740\u7b97\u8fd9\u6837\u5b50\uff0c\u7136\u540e\u968f\u4fbf\u8dd1\u4e00\u8dd1\u6700\u77ed\u8def\u5c31\u884c\u3002 CF1775E - The Human Equation \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a \\(n\\) \u4e2a\u6570 \\(a_1...a_n\\) \uff0c\u968f\u540e\u4f60\u53ef\u4ee5\u8fdb\u884c\u82e5\u5e72\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u6b65\u9aa4\u5982\u4e0b\uff1a \u9009\u51fa \\(a\\) \u4e2d\u4e00\u4e2a\u5b50\u5e8f\u5217\uff08\u53ef\u4ee5\u4e0d\u8fde\u7eed\uff09\u3002 \u628a\u5b50\u5e8f\u5217\u4e2d\u7684\u5947\u6570\u9879\u51cf\u4e00\uff0c\u5076\u6570\u9879\u52a0\u4e00\uff1b\u6216\u8005\u5947\u6570\u9879\u52a0\u4e00\uff0c\u5076\u6570\u9879\u51cf\u4e00\u3002 \u6c42\u628a \\(n\\) \u4e2a\u6570\u5168\u90e8\u53d8\u6210 \\(0\\) \u7684\u6700\u5c11\u64cd\u4f5c\u6b21\u6570\u3002 \\(1\\le n\\le2\\times10^5,-10^9\\le a_i\\le10^9\\) \uff0c\u591a\u7ec4\u6570\u636e\u3002 \u8003\u8651\u8d2a\u5fc3\u7684\u53d6\uff0c\u5e0c\u671b\u6bcf\u6b21\u80fd\u8ba9\u8d1f\u6570\u52a0\uff0c\u6b63\u6570\u51cf\uff0c\u4e14\u51cf\u5230 0 \u5c31\u4e0d\u52a8\u3002 \u8003\u8651\u540e\u51cf\u5b8c\u7684\u64cd\u4f5c\u6b21\u6570\u5373\u53ef\uff0c\u56e0\u4e3a\u53ea\u80fd\u4e00\u4e2a\u4e00\u4e2a\u64cd\u4f5c\uff0c\u6240\u4ee5\u7b54\u6848\u662f\u524d\u7f00\u548c\u7684\u6781\u5dee\u3002 CF1778A - Flip Flop Sum \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u53ea\u542b\u6709 \\(1\\) \u6216 \\(-1\\) \u7684\u6570\u7ec4 \\(a\\) \uff0c\u5bf9\u5176\u8fdb\u884c\u5982\u4e0b\u7684\u64cd\u4f5c\uff1a \u9009\u5b9a\u4e00\u4e2a \\(i\\) \uff0c\u6ee1\u8db3 \\(1\\le i<n\\) \uff0c\u5c06 \\(a_i\\) \u4fee\u6539\u4e3a \\(-a_i\\) \uff0c\u5c06 \\(a_{i+1}\\) \u4fee\u6539\u4e3a \\(-a_{i+1}\\) \u3002 \u6c42\u51fa\u4e00\u6b21\u64cd\u4f5c\u4e4b\u540e \\(\\sum\\limits_{i=1}^n a_i\\) \u7684\u6700\u5927\u503c\u3002 by @zfx1569_HCl_2023 \u7b56\u7565\u662f\u663e\u7136\u7684\uff0c\u679a\u4e3e\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u8ba1\u7b97\u7b54\u6848\u5373\u53ef Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 1e5 + 10 ; int a [ si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { int n ; cin >> n ; int sum = 0 ; int ans = -0x3f3f3f3f ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], sum += a [ i ]; for ( int i = 1 ; i < n ; ++ i ) { int x = a [ i ], y = a [ i + 1 ]; int tmp = sum - x - y ; x *= -1 , y *= -1 ; tmp += x + y ; ans = max ( ans , tmp ); } cout << ans << endl ; } return 0 ; } // ()()()(? CF1778B - The Forbidden Permutation \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a \\(3\\) \u4e2a\u6574\u6570 \\(n,m,d\\) \u3001\u4e00\u4e2a \\(n\\) \u7684\u6392\u5217 \\(p\\) \u548c\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(m\\) \u7684\u6570\u7ec4 \\(a\\) \uff0c\u5b9a\u4e49 \\(\\mathrm{pos}(x)\\) \u4e3a \\(p\\) \u4e2d \\(x\\) \u7684\u4e0b\u6807\u3002 \u6570\u7ec4 \\(a\\) \u662f\u4e0d\u597d\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u5bf9\u4e8e\u6240\u6709 \\(1\\le i<m\\) \uff0c\u6709 \\(\\mathrm{pos}(a_i)<\\mathrm{pos}(a_{i+1})\\le\\mathrm{pos}(a_i)+d\\) \u3002 \u6bcf\u4e00\u6b21\u64cd\u4f5c\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9 \\(p\\) \u4e2d\u7684\u4e24\u4e2a\u76f8\u90bb\u6570\u5b57\u5e76\u628a\u5b83\u4eec\u4ea4\u6362\uff0c\u6c42\u6700\u5c0f\u7684\u64cd\u4f5c\u6b21\u6570\uff0c\u4f7f\u5f97 \\(a\\) \u53d8\u4e3a\u597d\u7684\u3002 by @zfx1569_HCl_2023 \u8bfb\u9898\u8981\u4ed4\u7ec6\u4e00\u70b9\uff0cnot good \u7684\u6761\u4ef6\u662f\u5bf9\u4e8e\u6240\u6709 \\(i\\) \u90fd\u6709\u9898\u9762\u4e2d\u7684\u6761\u4ef6\u6210\u7acb\u3002 \u6240\u4ee5\u679a\u4e3e\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u66f4\u65b0\u7b54\u6848\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 1e5 + 10 ; int n , m , d ; int a [ si ], p [ si ], pos [ si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { cin >> n >> m >> d ; for ( int i = 1 ; i <= n ; ++ i ) cin >> p [ i ], pos [ p [ i ]] = i ; for ( int i = 1 ; i <= m ; ++ i ) cin >> a [ i ]; int ans = n , ret = 0 ; bool f = false ; for ( int i = 1 ; i < m ; ++ i ) { if ( pos [ a [ i ]] < pos [ a [ i + 1 ]] && pos [ a [ i + 1 ]] <= pos [ a [ i ]] + d ) { ans = min ( ans , pos [ a [ i + 1 ]] - pos [ a [ i ]]); if ( n - 1 > d ) ret = max ( ret , pos [ a [ i + 1 ]] - pos [ a [ i ]]); f = true ; } else { f = false ; break ; } } if ( ! f ) cout << \"0\" << endl ; else cout << min ( ans , ( d - ret ) + 1 ) << endl ; } return 0 ; } // ()()()(? CF1778C - Flexible String \u03c8(\uff40\u2207\u00b4)\u03c8 \u5bf9\u4e8e\u957f\u5ea6\u4e3a \\(n\\) \u7684 \\(a\\) , \\(b\\) \u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c \\(a\\) \u521d\u59cb\u6700\u591a\u542b\u6709 \\(10\\) \u4e2a\u4e0d\u540c\u5b57\u6bcd\u3002\u4f60\u53ef\u4ee5\u9009\u62e9\u81f3\u591a \\(k\\) \u4e2a\u4e0d\u540c\u5b57\u6bcd\uff0c\u5c06 \\(a\\) \u4e2d\u7684\u8fd9\u4e9b\u5b57\u6bcd\u66ff\u6362\u4e3a\u4efb\u610f\u5b57\u6bcd\u3002 \u4f60\u9700\u8981\u6c42\u51fa\u7ecf\u8fc7\u4e0a\u8ff0\u64cd\u4f5c\u540e\uff0c \\(a,b\\) \u76f8\u540c\u4f4d\u7f6e\u4e14\u76f8\u540c\u5b57\u6bcd\u7684\u5b50\u4e32\u5c3d\u53ef\u80fd\u591a\u3002 \u6570\u636e\u8303\u56f4\uff1a \\(1 \\le t \\le 10^4,1 \\le n \\le 10^5,0 \\le k \\le 10\\) \u3002 \u6ce8\u610f\u5230\u7ed9\u5b9a\u7684 \\(a\\) \u7684 \\(|\\Sigma| \\le 10\\) \uff0c\u6240\u4ee5\u53ef\u4ee5\u66b4\u529b\u679a\u4e3e\u6bcf\u4e00\u79cd\u5b57\u7b26\u9009\u4e0d\u9009\u7684\u60c5\u51b5\u3002 \u7136\u540e\u66b4\u529b check \u5c31\u53ef\u4ee5\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 // author : black_trees #include <cmath> #include <cstdio> #include <vector> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 30 ; int n , q ; string a , b ; int ctt [ si ], re [ si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { memset ( ctt , 0 , sizeof ctt ); cin >> n >> q ; cin >> a >> b ; a = ' ' + a , b = ' ' + b ; int clz = 0 ; for ( int i = 1 ; i <= n ; ++ i ) ctt [ a [ i ] - 'a' + 1 ] ++ ; for ( int i = 1 ; i <= 26 ; ++ i ) if ( ctt [ i ]) ++ clz , re [ i ] = clz - 1 ; // cout << clz << endl; q = min ( q , clz ); i64 ans = -1 ; // cout << q << endl; std :: vector < int > opt ; for ( int msk = 0 ; msk < ( 1 << clz ); ++ msk ) if ( __builtin_popcount ( msk ) == q ) opt . emplace_back ( msk ); for ( auto msk : opt ) { if ( __builtin_popcount ( msk ) == q ) { string tmp = a ; for ( int i = 1 ; i <= n ; ++ i ) if ( msk >> re [ tmp [ i ] - 'a' + 1 ] & 1 ) tmp [ i ] = b [ i ]; // cout << tmp << endl; i64 cnt = 0 , sum = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { if ( tmp [ i ] == b [ i ]) cnt ++ ; else { sum += cnt * ( cnt + 1 ) / 2 ; cnt = 0 ; } if ( i == n ) sum += cnt * ( cnt + 1 ) / 2 ; } ans = max ( ans , sum ); } } cout << ans << endl ; } return 0 ; } // ()()()(? CF1778D - Flexible String Revisit \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u51fa\u4e24\u4e2a\u957f\u5ea6\u5747\u4e3a \\(n(n\\leq 10^6)\\) \u7684 01 \u4e32 \\(S\\) \u548c \\(T\\) \u6bcf\u6b21\u968f\u673a\u5c06 \\(S\\) \u4e2d\u7684\u67d0\u4e00\u4f4d\u53d6\u53cd \u95ee\uff1a\u7b2c\u4e00\u6b21 \\(S = T\\) \u65f6\u64cd\u4f5c\u6b21\u6570\u7684\u671f\u671b \u4e00\u4e2a\u5f88\u7ecf\u5178\u7684\u671f\u671b dp \u5957\u8def\uff0c\u662f\u4e00\u79cd\u6bd4\u8f83\u597d\u73a9\u7684\u5904\u7406\u540e\u6548\u6027\u7684\u5957\u8def\u3002 \u8003\u8651\u8bbe \\(dp(i)\\) \u8868\u793a\u7531 \\(i\\) \u4e2a\u4f4d\u7f6e\u4e0d\u540c\u53d8\u5230 \\(i - 1\\) \u7684\u671f\u671b\u4ee3\u4ef7\uff0c\u4e5f\u5c31\u662f\u76f4\u63a5\u53ea\u7b97\u6bcf\u4e00\u6b65\uff0c\u6700\u540e\u7b97\u7b54\u6848\u76f4\u63a5 \\(\\sum\\limits_{i = 1}^k dp(i)\\) \u5373\u53ef\u3002 \u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u6709\u53ef\u80fd\u76f4\u63a5\u4e00\u6b65\u5230\u4f4d\uff0c\u4e5f\u6709\u53ef\u80fd\u5148\u53d8\u6210 \\(dp(i + 1)\\) \u518d\u53d8\u56de\u6765\u3002 \u6240\u4ee5 \\(dp(i) = \\dfrac{n - i}{n}(dp(i) + dp(i + 1) + 1) + \\dfrac{i}{n}\\) \uff0c\u8fd9\u91cc\u6bd4\u8f83\u53cd\u5e38\uff0c\u81ea\u5df1\u7684\u72b6\u6001\u91cc\u8fd8\u5305\u542b\u81ea\u5df1\uff0c\u4e0d\u8fc7\u6ca1\u5173\u7cfb\u3002 \u6211\u4eec\u76f4\u63a5\u79fb\u9879\uff1a \\(\\dfrac{i}{n}dp(i) = 1 + \\dfrac{n - i}{n}dp(i + 1) \\iff dp(i) = \\dfrac{n}{i} + \\dfrac{n - i}{i}dp(i + 1)\\) \u3002 \u597d\uff0c\u7136\u540e\u505a\u5b8c\u4e86\u3002 \u8fd9\u4e48\u505a\u7684\u539f\u56e0\u662f\uff0c\u56e0\u4e3a\u72b6\u6001\u53ef\u80fd\u8f6c\u79fb\u8fc7\u53bb\u8fd8\u8f6c\u79fb\u56de\u6765\uff0c\u4f46\u662f\u53d1\u73b0\u8f6c\u79fb\u7684\u533a\u95f4\u662f\u6709\u9650\u7684\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u62c6\u5206\u95ee\u9898\uff0c\u53ea\u9700\u8981\u8003\u8651\u6bcf\u4e00\u4e2a\u5c0f\u90e8\u5206\u7684\u7b54\u6848\u6700\u540e\u5408\u5e76\u5373\u53ef\u3002 \u601d\u8003\u8fd9\u79cd dp \u7684\u65f6\u5019\u4e0d\u80fd\u88ab\u201c\u4e00\u5b9a\u8981\u627e\u5230\u4e00\u4e2a\u53e6\u5916\u4e00\u5c42\u7684\u72b6\u6001\u6765\u8868\u793a\u8fd9\u4e2a\u72b6\u6001\u201d\u8fd9\u6837\u7684\u5957\u8def\u9650\u5236\uff0c\u8981\u76f4\u63a5\u6839\u636e\u5b9a\u4e49\u5199\u51fa\u6765\uff0c\u540e\u6548\u6027\u53ef\u4ee5\u79fb\u9879\u5904\u7406\u3002 \u8fd9\u79cd\u5e94\u8be5\u5728\u671f\u671b dp \u91cc\u9762\u6bd4\u8f83\u5e38\u89c1\uff0c\u5c31\u662f\u56e0\u4e3a\u662f\u5bf9\u5e8f\u5217\u6574\u4f53\u968f\u673a\u9009\uff0c\u6240\u4ee5\u76f4\u63a5\u7ebf\u6027 dp \u505a\u4e0d\u4e86\uff0c\u4e0d\u7136\u72b6\u538b\u4e0d\u7136\u5c31\u8fd9\u6837\u62c6\u5206\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 // author : black_trees #include <cmath> #include <cstdio> #include <cassert> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; using ldb = long double ; using u64 = unsigned long long ; constexpr i64 safe_mod ( i64 x , i64 m ) { return x %= m , x < 0 ? x + m : x ; } constexpr i64 pow_mod_constexpr ( i64 x , i64 n , int m ) { if ( m == 1 ) return 0 ; unsigned _m = m ; uint64_t r = 1 , _x = safe_mod ( x , m ); for (; n ; n >>= 1 , _x = _x * _x % _m ) if ( n & 1 ) r = r * _x % m ; return r ; } constexpr bool is_prime_constexpr ( int n ) { if ( n <= 1 ) return false ; if ( n == 2 || n == 7 || n == 61 ) return true ; if ( n % 2 == 0 ) return false ; i64 d = n - 1 ; while ( ~ d & 1 ) d /= 2 ; for ( i64 a : { 2 , 7 , 61 }) { i64 t = d , y = pow_mod_constexpr ( a , t , n ); while ( t != n - 1 && y != 1 && y != n - 1 ) y = y * y % n , t <<= 1 ; if ( y != n - 1 && t % 2 == 0 ) return false ; } return true ; } constexpr pair < i64 , i64 > inv_gcd ( i64 a , i64 b ) { a = safe_mod ( a , b ); if ( a == 0 ) return { b , 0 }; i64 s = b , t = a , m0 = 0 , m1 = 1 ; while ( t ) { i64 u = s / t ; s -= t * u , m0 -= m1 * u ; i64 tmp = s ; s = t , t = tmp , tmp = m0 , m0 = m1 , m1 = tmp ; } if ( m0 < 0 ) m0 += b / s ; return { s , m0 }; } struct Barrett_Reduction { unsigned m ; uint64_t im ; Barrett_Reduction ( unsigned m ) : m ( m ), im ( ~ 0ull / m + 1 ) {} unsigned mul ( unsigned a , unsigned b ) const { uint64_t z = ( uint64_t ) a * b , x = ( __uint128_t ) z * im >> 64 ; unsigned v = z - x * m ; return m <= v ? v + m : v ; } }; template < int m > struct static_modint { using _mint = static_modint ; public : static _mint raw ( int v ) { _mint x ; return x . _v = v , x ; } static_modint () : _v ( 0 ) {} template < class __Tp > static_modint ( __Tp v ) { i64 x = v % m ; _v = x < 0 ? x + m : x ; } unsigned val () const { return _v ; } _mint & operator ++ () { if ( ++ _v == m ) _v = 0 ; return * this ; } _mint & operator -- () { if ( ! _v -- ) _v = m - 1 ; return * this ; } _mint operator ++ ( int ) { _mint res = * this ; ++* this ; return res ; } _mint operator -- ( int ) { _mint res = * this ; --* this ; return res ; } _mint & operator += ( const _mint & rhs ) { _v += rhs . _v ; if ( _v >= m ) _v -= m ; return * this ; } _mint & operator -= ( const _mint & rhs ) { _v -= rhs . _v ; if ( _v >= m ) _v += m ; return * this ; } _mint & operator *= ( const _mint & rhs ) { uint64_t z = _v ; z *= rhs . _v , _v = z % m ; return * this ; } _mint & operator /= ( const _mint & rhs ) { return * this = * this * rhs . inv (); } _mint operator + () const { return * this ; } _mint operator - () const { return _mint () - * this ; } _mint pow ( i64 n ) const { assert ( 0 <= n ); _mint x = * this , r = 1 ; for (; n ; n >>= 1 , x *= x ) if ( n & 1 ) r *= x ; return r ; } _mint inv () const { if ( prime ) { assert ( _v ); return pow ( m - 2 ); } else { auto eg = inv_gcd ( _v , m ); assert ( eg . first == 1 ); return eg . second ; } } friend _mint operator + ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) += rhs ; } friend _mint operator - ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) -= rhs ; } friend _mint operator * ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) *= rhs ; } friend _mint operator / ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) /= rhs ; } friend bool operator == ( const _mint & lhs , const _mint & rhs ) { return lhs . _v == rhs . _v ; } friend bool operator != ( const _mint & lhs , const _mint & rhs ) { return lhs . _v != rhs . _v ; } private : unsigned _v ; static constexpr bool prime = is_prime_constexpr ( m ); }; using modint = static_modint < 998244353 > ; const int si = 1e6 + 10 ; modint dp [ si ]; int n , a [ si ], b [ si ]; void init () { } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { init (); cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { char ch ; cin >> ch ; if ( ch == '1' ) a [ i ] = 1 ; else a [ i ] = 0 ; } int cnt = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { char ch ; cin >> ch ; if ( ch == '1' && a [ i ] != 1 ) ++ cnt ; if ( ch == '0' && a [ i ] != 0 ) ++ cnt ; } modint mn = n ; dp [ n ] = 1 , dp [ 0 ] = 0 ; for ( int i = n - 1 ; i >= 0 ; -- i ) { modint trans = n - i ; if ( i != 0 ) dp [ i ] = ( dp [ i + 1 ] * trans + mn ) / i ; } for ( int i = 1 ; i <= n + 1 ; ++ i ) { dp [ i ] = dp [ i - 1 ] + dp [ i ]; } cout << dp [ cnt ]. val () << endl ; } return 0 ; } // ()()()(? ABC288D Range Add Query \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e00\u4e2a\u957f\u4e3a \\(N\\) \u7684\u5e8f\u5217\uff0c\u5e38\u6570 \\(k\\) \uff0c \\(M\\) \u6b21\u8be2\u95ee\uff0c\u5224\u65ad \\([l, r]\\) \u5185\u7684\u5b50\u5e8f\u5217\u662f\u5426\u4e3a good \u7684\u3002 \u4e00\u4e2a\u5e8f\u5217\u88ab\u8ba4\u4e3a\u662f good \u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u7528\u4ee5\u4e0b\u64cd\u4f5c\u53ef\u4ee5\u4f7f \u8be5\u5e8f\u5217\u7684\u6240\u6709\u5143\u7d20\u503c\u90fd\u53d8\u4e3a \\(0\\) \u9009\u5b9a\u4e24\u4e2a\u6574\u6570 \\(c\\) , \\(i\\) \uff0c\u4f7f\u533a\u95f4 \\([i, i + k - 1]\\) \u5185\u7684\u5143\u7d20\u540c\u65f6\u51cf\u53bb $c $ \u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\uff0c\u8f93\u51fa \\(\\texttt{Yes}\\) \u6216\u8005 \\(\\texttt{No}\\) \\(N, Q \\le 2e5\\) \u53d1\u73b0\u8fd9\u4e2a\u9898\u662f\u5bf9\u533a\u95f4\u8fdb\u884c\u64cd\u4f5c\u3002 \u6211\u4eec\u5c1d\u8bd5\u89c2\u5bdf\u7b54\u6848\u7684\u5f62\u5f0f\uff0c\u5c31\u662f\u51e0\u4e2a\u957f\u5ea6\u76f8\u7b49\u7684\u533a\u95f4\u8986\u76d6\u4e86\u4e00\u4e0b\u3002 \u6ce8\u610f\u5230\u56e0\u4e3a\u533a\u95f4\u957f\u5ea6\u76f8\u7b49\uff0c\u6240\u4ee5\u8986\u76d6\u4e4b\u540e\u672c\u8d28\u4e0a\u7b49\u4ef7\u4e8e\u4e00\u4e2a\u4ee3\u4ef7\u4e3a\u91cd\u5408\u7684\u533a\u95f4\u6743\u503c\u4e4b\u548c\u7684\u533a\u95f4\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u4e00\u4e2a\u4e00\u4e2a\u4e00\u4e2a \u7aef\u70b9\u4e0d\u91cd\u53e0 \u533a\u95f4\u7684\u60c5\u51b5\u3002 \u5f88\u5bb9\u6613\u60f3\u5230\u8003\u8651\u5dee\u5206\u610f\u4e49\uff0c\u8fd9\u6837\u5c31\u662f\u8ba9\u4e00\u4e2a\u5b50\u4e32\u7684\u5dee\u5206\u6570\u7ec4\u5168\u90e8\u53d8\u6210\u96f6\uff0c\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u64cd\u4f5c\u4e24\u4e2a\u7ec4\u6210\u4e86\u957f\u5ea6\u4e3a \\(k + 1\\) \u7684\u533a\u95f4\u7684\u70b9\u3002 \u53ef\u4ee5\u8003\u8651\u628a\u4ed6\u4eec\u5206\u6210\u591a\u4e2a\u540c\u4f59\u7c7b\uff0c\u90a3\u4e48\u95ee\u9898\u7b49\u4ef7\u4e8e\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u540c\u4f59\u7c7b\u5185\u76f8\u90bb\u7684\u4e24\u4e2a\u6570\u64cd\u4f5c\uff0c\u663e\u7136\u9700\u8981\u5dee\u5206\u610f\u4e49\u4e0b\u6bcf\u4e2a\u540c\u4f59\u7c7b\u5185\u7684\u548c\u4e3a 0\uff0c\u4e0d\u8fc7\u9700\u8981\u7279\u6b8a\u8003\u8651\u4e24\u4e2a\u7aef\u70b9\uff0c\u56e0\u4e3a \\(r + 1\\) \u5e76\u4e0d\u5728\u8003\u8651\u8303\u56f4\u4e4b\u5185\uff0c\u800c\u5982\u679c\u76f4\u63a5\u53d6\u539f\u5e8f\u5217\u5dee\u5206\u8fd9\u4e00\u6bb5\uff0c\u5934\u4e0a\u4e00\u4e2a\u5143\u7d20\u4e0d\u662f\u5bf9\u7684\u3002 \u5982\u679c\u76f4\u63a5\u626b\u590d\u6742\u5ea6\u663e\u7136\u4e0d\u6ee1\u8db3\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5dee\u5206\u4e4b\u540e\u76f4\u63a5\u628a\u6bcf\u4e2a\u540c\u4f59\u7c7b\u7684\u8d21\u732e\u76f8\u4e92\u52a0\u4e00\u4e0b\uff0c\u6700\u540e\u5224\u4e24\u4e2a\u7aef\u70b9\u5c31\u884c\uff0c\u8fd9\u4e2a\u987a\u5e8f\u9700\u8981\u6ce8\u610f\uff0c\u5982\u679c\u626b\u63cf\u5269\u4f59\u7cfb\u7684\u65f6\u5019\u662f\u4ece\u524d\u6765\u7684\uff0c\u4f60\u8981\u5012\u5e8f\u52a0\u8d21\u732e\uff0c\u4e0d\u7136\u5f00\u5934\u4f4d\u7f6e\u7684\u8d21\u732e\u4e0d\u597d\u5904\u7406\uff0c\u590d\u6742\u5ea6 \\(O(Qk)\\) Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 // author : black_trees #include <cmath> #include <cstdio> #include <vector> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int n , k , a [ si ], q ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> k , a [ 0 ] = 0 ; std :: vector < int > c ( n + 2 ), d ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], c [ i ] = a [ i ] - a [ i - 1 ]; cin >> q , d = c ; for ( int i = n ; i >= 1 ; -- i ) { if ( i + k <= n ) d [ i ] += d [ i + k ]; } while ( q -- ) { int l , r ; cin >> l >> r ; bool f = true ; for ( int w = l ; w <= l + k - 1 ; ++ w ) { int mx = w + ( r - w + 1 ) / k * k ; if ( mx != r + 1 ) { f &= ( d [ w ] + (( w == l ) ? a [ l - 1 ] : 0 ) == (( mx + k <= n ) ? d [ mx + k ] : 0 )); } } if ( f ) cout << \"Yes\" << endl ; else cout << \"No\" << endl ; } return 0 ; } // ()()()(? \u8fd9\u9898\u60f3\u7684\u65f6\u5019\u6ca1\u8003\u8651\u8f6c\u5316\u8fc7\u540e\u7684\u518d\u6b21\u8f6c\u5316\uff0c\u60f3\u5230\u8003\u8651\u5dee\u5206\u610f\u4e49\u5c31\u6ca1\u7ee7\u7eed\u8f6c\u5316\u95ee\u9898\u4e86\u3002 \u8fd9\u9898\u5173\u952e\u70b9\u4e4b\u4e00\u6070\u597d\u5c31\u6709\u5728\u5dee\u5206\u610f\u4e49\u4e0a\uff0c\u64cd\u4f5c\u957f\u6210\u4ec0\u4e48\u6837\u3002 ABC288E Wish List \u03c8(\uff40\u2207\u00b4)\u03c8 \u5546\u5e97\u91cc\u6709 \\(N\\) \u4ef6\u5546\u54c1\uff0c\u6807\u53f7 \\(1\\sim N\\) \uff0c\u7b2c \\(i\\) \u4ef6\u5546\u54c1\u6709 \u5e95\u4ef7 \\(A_i\\) \u4e14\u53ea\u6709\u4e00\u4ef6\u3002 Takahashi \u60f3\u8981\u4e70\u5176\u4e2d\u7684 \\(M\\) \u4ef6\u5546\u54c1\uff0c\u5206\u522b\u662f\u6807\u53f7 \\(X_1,X_2,\\ldots,X_M\\) \u7684\u5546\u54c1\u3002 \u4ed6\u4f1a\u6309\u7167\u4ee5\u4e0b\u7684\u65b9\u5f0f\u4e70\u4e1c\u897f\uff1a \u82e5\u8fd8\u5269 \\(r\\) \u4ef6\u5546\u54c1\u6ca1\u6709\u8d2d\u4e70\u8fc7\uff0c\u9009\u62e9\u4e00\u4e2a\u7b26\u5408 \\(1\\le j\\le r\\) \u7684 \\(j\\) \uff0c\u4ed8\u8fd9\u4ef6\u5546\u54c1\u7684\u5e95\u4ef7\u52a0\u4e0a \\(C_j\\) \u7684\u94b1\u8d2d\u4e70\u5176\u4e2d\u6807\u53f7\u7b2c \\(j\\) \u5c0f\u7684\u5546\u54c1\u3002 \u6c42\u51fa\u4e70\u5230\u4ed6\u60f3\u8981\u7684\u5546\u54c1\u6240\u4ed8\u7684\u6700\u5c0f\u4ef7\u94b1\u3002 \u6ce8\u610f\u4ed6\u4e5f\u53ef\u4ee5\u4e70\u4e0d\u60f3\u8981\u7684\u5546\u54c1\u3002 \\(1\\le M\\le N\\le 5000\\) \uff0c\u503c\u57df \\(1e9\\) . \u770b\u6570\u636e\u8303\u56f4\u731c\u6d4b\u5e94\u8be5\u662f\u4e00\u4e2a \\(O(n^2)\\) \u7684 dp \u6216\u8005\u8d2a\uff0c\u53ef\u80fd\u5c31\u662f\u8981\u5bf9\u6bcf\u4e2a\u4f4d\u7f6e\u679a\u4e3e\u4e00\u4e0b\u3002 \u5148\u62bd\u8c61\u4e00\u4e0b\u95ee\u9898\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u8ba9\u4f60\u9009\u51fa\u4e00\u4e2a\u7ed9\u5b9a\u96c6\u5408\u7684\u8d85\u96c6\uff0c\u4f7f\u5f97\u9009\u51fa\u8fd9\u4e2a\u8d85\u96c6\u7684\u4ee3\u4ef7\u6700\u5c0f\u3002 \u6709\u4e00\u79cd\u60f3\u6cd5\u662f\u6807\u8bb0\u6709\u6ca1\u6709\u88ab\u9009\uff0c\u8fd9\u4e2a\u662f\u4e0d\u73b0\u5b9e\u7684\u3002 \u53d1\u73b0\u95ee\u9898\u6700\u56f0\u96be\u7684\u5730\u65b9\u5176\u5b9e\u5c31\u5728\u4e8e\uff0c\u4f60\u5bf9\u4e8e\u4e00\u4e2a\u7269\u54c1\uff0c\u4f60\u4e0d\u592a\u80fd\u5f88\u597d\u7684\u77e5\u9053\u5b83\u5728\u4ec0\u4e48\u65f6\u5019\u5728\u4ec0\u4e48\u4f4d\u7f6e\u4e0a\uff0c\u5e94\u8be5\u600e\u4e48\u51b3\u7b56\u3002 \u6240\u4ee5\u6211\u4eec\u60f3\u8981\u94a6\u5b9a \\(i\\) \u5728\u7b2c\u51e0\u4e2a\u4f4d\u7f6e\u9009\uff0c\u6216\u8005\u662f\u627e\u51fa\u4e4b\u524d\u9009\u4e86\u54ea\u4e9b\uff0c\u53c8\u6216\u8005\u662f\u8003\u8651\u80fd\u4e0d\u80fd\u5904\u7406\u6389\u4e4b\u524d\u7684\u5f71\u54cd\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u6211\u4eec\u9009\u4e86\u6bd4 \\(i\\) \u4f4d\u7f6e\u66f4\u9760\u540e\u7684\u7269\u54c1\uff0c\u5bf9 \\(i\\) \u7684\u51b3\u7b56\u662f\u6ca1\u6709\u5f71\u54cd\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651 \\(i\\) \u524d\u9762\u9020\u6210\u7684\u5f71\u54cd\uff0c\u4e8e\u662f\u6211\u4eec\u8bb0\u4e00\u4e0b\u524d\u9762\u9009\u4e86\u591a\u5c11\u4e2a\u5c31\u884c\uff0c\u7136\u540e dp \u7684\u9636\u6bb5\u5c31\u51fa\u6765\u4e86\u3002 \u6240\u4ee5\u8bbe \\(dp(i, j)\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\u4f4d\u7f6e\uff0c\u5df2\u7ecf\u9009\u4e86 \\(j\\) \u4e2a\uff0c\u4e14 \\(1 \\sim i\\) \u4e2d\u6240\u6709\u9700\u8981\u9009\u7684\u6570\u90fd\u5df2\u7ecf\u9009\u4e0a\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002 \u8f6c\u79fb\u4e5f\u5f88\u65b9\u4fbf\uff0c\u8003\u8651\u5f53\u524d\u4f4d\u7f6e\u9009\u6216\u8005\u4e0d\u9009\u5373\u53ef\uff0c\u9009\u7684\u8bdd\u8f6c\u79fb\u76f4\u63a5\u53d6 \\(\\min\\limits_{k = i - j + 1}^i c_k\\) \u5c31\u884c\u3002 \u7136\u540e\u7b54\u6848\u662f \\(\\min\\limits_{i=m}^ndp(n, i)\\) \uff0c\u521d\u59cb\u5316 \\(dp(i,0)=0\\) \uff0c\u5176\u5b83 \\(+\\infty\\) \u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; #define int long long const int si = 5e3 + 10 ; const int inf = 0x3f3f3f3f3f3f3f3f ; int n , m , a [ si ], c [ si ]; bool b [ si ]; int dp [ si ][ si ], cost [ si ][ si ]; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> m ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; for ( int i = 1 ; i <= n ; ++ i ) cin >> c [ i ]; for ( int i = 1 , x ; i <= m ; ++ i ) cin >> x , b [ x ] = true ; for ( int l = 1 ; l <= n ; ++ l ) { cost [ l ][ l ] = c [ l ]; for ( int r = l + 1 ; r <= n ; ++ r ) { cost [ l ][ r ] = min ( cost [ l ][ r - 1 ], c [ r ]); } } memset ( dp , 0x3f , sizeof dp ); for ( int i = 0 ; i <= n ; ++ i ) dp [ i ][ 0 ] = 0 ; int cnt = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = cnt ; j <= i ; ++ j ) { if ( j != cnt ) dp [ i ][ j ] = min ( dp [ i ][ j ], dp [ i - 1 ][ j - 1 ] + a [ i ] + cost [ i - j + 1 ][ i ]); if ( b [ i ] == false ) dp [ i ][ j ] = min ( dp [ i - 1 ][ j ], dp [ i ][ j ]); } if ( b [ i ]) ++ cnt ; } int ans = inf ; for ( int i = m ; i <= n ; ++ i ) ans = min ( ans , dp [ n ][ i ]); cout << ans << endl ; return 0 ; } // ()()()(? \u8fd9\u9898\u8003\u8651\u7684\u65f6\u5019\u53ea\u8003\u8651\u5230\u4e86\u600e\u4e48\u6d88\u9664\u8fd9\u4e2a\u5f71\u54cd\uff0c\u60f3\u5230\u4e86\u8bb0\u5f55\u5f53\u524d\u9009\u4e86\u591a\u5c11\u4e2a\uff0c\u4f46\u662f\u6ca1\u6709\u6e05\u6670\u7684\u60f3\u5230\u8fd9\u4e2a\u201c\u6ca1\u6709\u5f71\u54cd\u201d\u7684\u89c2\u5bdf\uff0c\u4e8e\u662f\u8bbe\u8ba1\u4e0d\u51fa\u72b6\u6001\u3002 \u56e0\u4e3a\u5361\u6b7b\u4e4b\u540e\u5e76\u6ca1\u6709\u56de\u9000\u8003\u8651\u8fd9\u4e2a\u72b6\u6001\u54ea\u91cc\u51fa\u4e86\u95ee\u9898\uff0c\u9700\u6c42\u662f\u4ec0\u4e48\uff0c\u600e\u4e48\u89e3\u51b3\u3002 ABC288F Integer Division \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e00\u4e2a \\(n\\) \u4f4d\u6570 \\(X\\) \uff0c\u628a \\(X\\) \u5206\u6210\u82e5\u5e72\u6bb5\uff0c\u5f97\u5206\u4e3a\u6bcf\u4e00\u6bb5\u7684\u4e58\u79ef\uff08\u53ef\u4ee5\u4e0d\u5206\u5272\uff0c\u5f97\u5206\u4e3a \\(X\\) \uff09\u3002\u6c42\u6240\u6709\u5206\u6cd5\u5f97\u5206\u4e4b\u548c\uff0c\u6a21 \\(998244353\\) \u3002 Translate by xionglangqi \u6ce8\u610f\u5230\u8fd9\u4e2a\u9898\u662f\u5bf9\u4e8e\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u6c42\u4ee3\u4ef7\u4e4b\u548c\u3002 \u5957\u8def\u5730\uff0c\u6211\u4eec\u4e0d\u8003\u8651\u66b4\u529b\u7b97 \\(f\\) \uff0c\u800c\u662f\u8003\u8651\u600e\u4e48\u786e\u5b9a\u8d21\u732e\u3002 \u5148\u76f4\u63a5\u89c2\u5bdf \\(f(X)\\) \u5728\u7ed9\u5b9a \\(X\\) \u7684\u60c5\u51b5\u4e0b\u600e\u4e48\u7b97\uff0c\u5c31\u76f4\u63a5\u6309\u7740\u8fd9\u4e2a\u5206\u5272\u4e00\u4e0b\u5c31\u53ef\u4ee5\u3002 \u6ce8\u610f\u5230\u8fd9\u4e2a\u4e1c\u897f\u5e76\u4e0d\u5b58\u5728\u660e\u663e\u7684\u57fa\u5e95\u53ef\u4ee5\u7528\u6765\u8ba1\u7b97\uff0c\u53d1\u73b0\u505a\u6cd5\u8981\u6c42 \\(O(n)\\) \uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e00\u4f4d\u4e00\u4f4d\u9012\u63a8\u3002 \u4e5f\u5c31\u662f\u8003\u8651\u600e\u4e48\u4ece \\(1\\sim n - 1\\) \u8fd9\u4e2a\u5b50\u4e32\u7684\u72b6\u6001 \\(\\sum f_{n - 1}(X)\\) \u8f6c\u79fb\u5230 \\(\\sum f_n(X)\\) \u3002 \u5f88\u663e\u7136\u5c31\u8003\u8651\u7b2c \\(i\\) \u4f4d\u4f1a\u505a\u4ec0\u4e48\u8d21\u732e\uff0c\u663e\u7136\u53ef\u4ee5\u4e58\u6cd5\u5206\u914d\u5f8b\u4e00\u4e0b\uff0c\u518d\u52a0\u4e0a\u4e00\u4e2a \\(\\times 10\\) \u7684\u8d21\u732e\uff1a \\(dp(i) = 10 * dp(i - 1) + a(i) \\times \\sum\\limits_{j = 1}^{i - 1} dp(j)\\) \u3002 \u540e\u9762\u90a3\u5768\u524d\u7f00\u548c\u8bb0\u4e00\u4e0b\u5c31\u884c\uff0c\u590d\u6742\u5ea6 \\(O(n)\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; #define int long long const int si = 2e5 + 10 ; const int mod = 998244353 ; int n , a [ si ]; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); string s ; cin >> n , cin >> s ; for ( int i = 1 ; i <= n ; ++ i ) { a [ i ] = ( int )( s [ i - 1 ] - '0' ); } int ans = 0 , sum = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { ( ans *= 10l l ) %= mod ; ( ans += ( 1l l * sum * a [ i ])) %= mod ; ( sum += ans % mod ) %= mod ; } cout << ans << endl ; return 0 ; } // ()()()(? \u8fd9\u9898\u5f88\u5957\u8def\uff0c\u60f3\u7684\u65f6\u5019\u5728\u5206\u914d\u5f8b\u90a3\u4e2a\u5730\u65b9\u7565\u5fae\u5361\u4e86\u4e00\u4e0b\uff0c\u539f\u56e0\u53ef\u80fd\u662f\u56e0\u4e3a\u5f53\u65f6\u5fc3\u60c5\u6bd4\u8f83\u6d6e\u8e81\u3002 ABC289D Step Up Robot \u03c8(\uff40\u2207\u00b4)\u03c8 \u7b80\u5355\u5783\u573e\u9898\uff0c\u4e0d\u8bf4\u4e86\u3002 ABC289E Swap Places \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e00\u4e2a \\(n\\) \u4e2a\u70b9 \\(m\\) \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u70b9\u6709\u70b9\u6743\uff0c\u503c\u53ef\u4ee5\u4e3a \\(0\\) \u6216 \\(1\\) \u3002\u4e24\u4e2a\u4eba\u5206\u522b\u5728\u70b9 \\(1\\) \u548c \\(n\\) \uff0c\u6bcf\u6b21\u4ed6\u4eec\u540c\u65f6\u5411\u81ea\u5df1\u8fd9\u4e2a\u7ed3\u70b9\u7684\u4efb\u610f\u4e00\u4e2a\u90bb\u5c45\u79fb\u52a8\uff0c\u4efb\u610f\u65f6\u523b\uff0c\u4ed6\u4eec\u6240\u5728\u7684\u7ed3\u70b9\u7684\u6743\u503c\u4e0d\u5f97\u76f8\u540c\u3002\u6700\u540e\u8981\u4f7f\u5f97\u4ed6\u4eec\u4e92\u76f8\u4ea4\u6362\u4f4d\u7f6e\u3002\u8f93\u51fa\u6700\u5c0f\u6b21\u6570\u6216\u8f93\u51fa\u65e0\u89e3\u3002 \\(n,m\\le2\\times10^3\\) \u3002 \u4e5f\u6ca1\u5565\u597d\u8bf4\u7684\uff0c\u5176\u5b9e\u5c31\u662f\u56e0\u4e3a\uff0c\u76f4\u63a5\u627e\u4e0d\u597d\u505a\uff0c\u6211\u4eec\u5bf9\u6bcf\u4e2a\u8282\u70b9\u8bbe\u4e00\u4e2a\u72b6\u6001\u88c5\u4e00\u4e0b\u9650\u5236\uff0c\u53e6\u5916\u4e00\u4e2a\u9650\u5236\u5728\u8f6c\u79fb\u7684\u65f6\u5019\u8868\u8fbe\u5c31\u884c\u3002 \u8f6c\u79fb\u53ef\u4ee5\u5229\u7528 bfs \u505a\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 // author : black_trees #include <cmath> #include <queue> #include <tuple> #include <cstdio> #include <vector> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 2e3 + 10 ; int n , m ; int tot = 0 , head [ si ]; struct Edge { int ver , Next ; } e [ si << 1 ]; inline void add ( int u , int v ) { e [ tot ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot ++ ; } int c [ si ]; int dp [ si ][ si ]; std :: queue < std :: tuple < int , int , int >> q ; void Init () { tot = 0 ; memset ( head , -1 , sizeof head ); while ( q . size ()) q . pop (); memset ( dp , -1 , sizeof dp ); } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { Init (); cin >> n >> m ; for ( int i = 1 ; i <= n ; ++ i ) { cin >> c [ i ]; } for ( int i = 1 ; i <= m ; ++ i ) { int u , v ; cin >> u >> v ; add ( u , v ), add ( v , u ); } q . push ( make_tuple ( 0 , 1 , n )); while ( ! q . empty ()) { auto [ dis , u , v ] = q . front (); q . pop (); if ( dp [ u ][ v ] != -1 ) continue ; dp [ u ][ v ] = dis ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { for ( int j = head [ v ]; ~ j ; j = e [ j ]. Next ) { if ( c [ e [ i ]. ver ] != c [ e [ j ]. ver ]) q . push ( make_tuple ( dis + 1 , e [ i ]. ver , e [ j ]. ver )); } } } cout << dp [ n ][ 1 ] << endl ; } return 0 ; } // ()()()(? \u8fd9\u9898\u60f3\u7684\u65f6\u5019\u7eaf\u5c5e\u667a\u969c\u4e86\uff0c\u7b80\u5355 dp \u6a21\u578b\u4e0d\u4f1a\u3002 ABC289F Teleporter Takahashi \u03c8(\uff40\u2207\u00b4)\u03c8 \u5728\u5750\u6807\u7cfb\u4e2d\u6709\u4e00\u4e2a\u8d77\u59cb\u70b9 \\((s_x,s_y)\\) \u548c\u4e00\u4e2a\u77e9\u5f62 \\(\\{(x,y)|a-0.5\\le x\\le b+0.5,c-0.5\\le x\\le d+0.5\\}\\) \uff0c\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u9009\u4e2d\u4e00\u4e2a\u77e9\u5f62\u5185\u7684\u6574\u70b9\u5e76\u628a\u5f53\u524d\u70b9\u79fb\u5230\u4e0e\u8be5\u70b9\u5bf9\u79f0\u7684\u4f4d\u7f6e\uff0c\u95ee\u80fd\u5426\u5728 \\(10^6\\) \u6b21\u64cd\u4f5c\u4ee5\u5185\u5230\u8fbe\u76ee\u6807\u70b9 \\((t_x,t_y)\\) \u5982\u80fd\u8bf7\u8f93\u51fa Yes \u5e76\u7ed9\u51fa\u4efb\u610f\u4e00\u4e2a\u65b9\u6848\uff0c\u5982\u4e0d\u80fd\u8f93\u51fa No \u7ed9\u51fa\u7684\u6240\u6709\u6a2a\u7eb5\u5750\u6807\u90fd\u662f \\(\\le 2\\times10^5\\) \u7684\u975e\u8d1f\u6574\u6570 \u53ef\u4ee5\u624b\u6413\u6837\u4f8b\u89c2\u5bdf\u5230\u4e00\u4e2a\u5c0f\u5c0f\u7684\u6027\u8d28\u3002 \u5c31\u662f\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4e00\u6bb5\u533a\u95f4 \\([a,b]\\) \uff0c\u76f4\u63a5\u9009 \\((a, y), (a + 1, y)\\) \u4e24\u6b21\uff0c\u5c31\u80fd\u8ba9\u5b83\u5728\u4e00\u4e2a\u65b9\u5411\u4e0a\u524d\u8fdb \\(2\\) \u4e2a\u5355\u4f4d\u3002 \u51cf\u5c0f\u5c31\u53cd\u8fc7\u6765\uff0c\u7136\u540e\u4e24\u4e2a\u7ef4\u5ea6\u7684\u9650\u5236\u53ef\u4ee5\u5957\u8def\u5730\u5206\u5f00\u6765\u505a\u3002 \u7b80\u5355\u5224\u65ad\u4e00\u4e0b\u65e0\u89e3\u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u4e3a\u672c\u9898\u7684\u6570\u636e\u8303\u56f4\u9650\u5236\uff0c\u4fdd\u8bc1\u4e86\u8fd9\u4e2a\u4e0d\u4f1a\u8d85\u9650\u5236\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; int sx , sy ; int tx , ty ; int a , b , c , d ; void Map ( int x , int y ) { sx = x * 2 - sx ; sy = y * 2 - sy ; cout << x << \" \" << y << endl ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> sx >> sy ; cin >> tx >> ty ; cin >> a >> b >> c >> d ; bool even = ( a != b || sx == tx ) && ( c != d || sy == ty ); bool odd = ( a != b || sx + tx == a + b ) && ( c != d || sy + ty == c + d ); bool nsam = (( sx & 1 ) != ( tx & 1 )) || (( sy & 1 ) != ( ty & 1 )); if ( nsam || ( ! even && ! odd )) return cout << \"No\" << endl , 0 ; cout << \"Yes\" << endl ; if ( ! even ) Map ( a , c ); while ( sx < tx ) Map ( a , c ), Map ( a + 1 , c ); while ( sy < ty ) Map ( a , c ), Map ( a , c + 1 ); while ( sx > tx ) Map ( a + 1 , c ), Map ( a , c ); while ( sy > ty ) Map ( a , c + 1 ), Map ( a , c ); return 0 ; } \u8fd9\u4e2a\u5c31\u662f\u6784\u9020\u9898\u91cc\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u601d\u60f3\uff0c\u8003\u5bdf\u6781\u7aef\u8fb9\u754c\u60c5\u51b5\uff0c\u5728\u9650\u5236\u6b21\u6570\u5185\u4e00\u70b9\u4e00\u70b9\u51d1\u51fa\u7b54\u6848\u3002 ABC290D Marking \u03c8(\uff40\u2207\u00b4)\u03c8 \u6709 \\(n\\) \u4e2a\u6392\u6210\u4e00\u4e2a\u73af\u7684\u683c\u5b50\uff0c\u7f16\u53f7\u4e3a \\(0\\sim n-1\\) \u3002\u73b0\u5728\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c\uff1a \u9009\u62e9 \\(0\\) \u53f7\u683c\u5b50\uff0c\u5c06\u5176\u6253\u4e0a\u6807\u8bb0\u3002 \u9009\u62e9 \\(d\\) \u4e2a\u683c\u5b50\u540e\u7684\u7b2c\u4e00\u4e2a\u5c1a\u672a\u88ab\u6807\u8bb0\u7684\u683c\u5b50 \uff0c\u5c06\u5176\u6253\u4e0a\u6807\u8bb0\u3002 \u91cd\u590d\u6267\u884c\u76f4\u5230\u6240\u6709\u683c\u5b50\u90fd\u88ab\u6253\u4e0a\u6807\u8bb0\u3002 \u4f60\u9700\u8981\u8f93\u51fa\u7b2c \\(k\\) \u6b21\u6807\u8bb0\u7684\u683c\u5b50\u7684\u7f16\u53f7\u3002 \u5171 \\(T\\) \u7ec4\u6570\u636e\u3002 \\(1\\le T\\le 10^5\\) \uff0c \\(1\\le k\\le n\\le10^9\\) \uff0c \\(1\\le d\\le 10^9\\) \u3002 \u2014\u2014 by Register_int \u53ef\u4ee5\u6ce8\u610f\u5230\u4e00\u4e2a\u4e8b\u60c5\u662f\uff0c\u8fd9\u91cc\u5c31\u662f\u7c7b\u4f3c\u54c8\u5e0c\u8868\u7684\u4e00\u4e2a\u8fc7\u7a0b\u3002 \u4e0d\u96be\u60f3\u5230\uff0c\u6211\u4eec\u4f1a\u628a\u539f\u6765\u7684\u65b9\u5757\u6309\u4f4d\u7f6e\u5206\u6210\u591a\u4e2a\u540c\u4f59\u7c7b\uff0c\u4e14\u4ed6\u4eec\u6784\u6210\u5b8c\u5168\u5269\u4f59\u7cfb\u3002 \u6709\u4e00\u4e9b\u540c\u4f59\u7c7b\u957f\u5ea6\u4e0d\u5b8c\u6574\uff0c\u5206\u4e24\u6bb5\u7b97\u4e00\u4e0b\u5c31\u884c\uff0c\u6216\u8005\u53ef\u4ee5\u8003\u8651\u63a8\u4e2a\u5f0f\u5b50\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; void solve ( int n , int d , int k ) { k -- ; int Gcd = n / __gcd ( n , d ); cout << d * k % n + k / Gcd << endl ; } signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; int tt = T ; while ( T -- ) { int n , d , k ; cin >> n >> d >> k ; solve ( n , d , k ); continue ; d %= n ; int len = ceil ( double ( n ) / double ( d )); // \u6bcf\u4e2a\u540c\u4f59\u7c7b\u7684\u957f\u5ea6\u3002 int full = ( double ( n ) / double ( len )); // \u591a\u5c11\u4e2a\u5b8c\u6574\u7684\u5269\u4f59\u7cfb\u3002 int r = n - full , bel ; // belongs to which. if ( k <= full * len ) { bel = ceil ( double ( k ) / double ( len )); k %= len , k = ( k + 1 ) % len ; } else { bel = ceil ( double ( k - ( full * len )) / double ( len - 1 )) + full ; k -= full * len , k %= ( len - 1 ), k = ( k + 1 ) % ( len - 1 ); } // cout << \"Case\" << T - tt << \":\\n\"; bel -- , cout << bel + ( d * k ) << endl ; // cout << \"bel = \" << bel << \" len = \" << len << \" full = \" << full << \" k = \" << k << \" d = \" << d << endl; } return 0 ; } // ()()()(? \u8003\u8651\u7684\u65f6\u5019\u53ea\u8003\u8651\u4e86\u5206\u6bb5\u7684\u62c6\u5206\u505a\u6cd5\uff0c\u6ca1\u60f3\u5230\u600e\u4e48\u76f4\u63a5\u627e\u5230\u4e00\u4e2a\u5f0f\u5b50\u4ee3\u66ff\u95ee\u9898\u3002 ABC290E Make it Palindrome \u03c8(\uff40\u2207\u00b4)\u03c8 \u5b9a\u4e49\u4e00\u4e2a\u5e8f\u5217 \\(X\\) \u7684\u8d21\u732e \\(f(X)\\) \u4e3a\uff0c\u4fee\u6539 \\(X\\) \u4e2d\u7684\u4e00\u4e9b\u4f4d\u7f6e\uff0c\u4f7f\u5f97 \\(X\\) \u53d8\u4e3a\u56de\u6587\u7684\u6700\u5c0f\u4fee\u6539\u6b21\u6570\u3002 \u5bf9\u7ed9\u5b9a\u7684\uff0c\u957f\u5ea6\u4e3a \\(N\\) \u7684\u5e8f\u5217 \\(A\\) \uff0c\u6c42 \\(A\\) \u7684\u6240\u6709\u5b50\u4e32\u7684\u8d21\u732e\u4e4b\u548c\u3002 \\(1\\le N \\le 2 \\times 10^5, 1\\le A_i \\le N\\) \u3002 Translate by black_trees. \u8fd9\u7c7b\u95ee\u9898\u8fd8\u662f\u90a3\u4e48\u7684\u5957\u8def\u3002 \u6211\u4eec\u8003\u8651\u4ec0\u4e48\u4e1c\u897f\u4f1a\u505a\u51fa\u8d21\u732e\uff0c\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u70b9\u5bf9 \\((i, j),a_i \\not= a_j\\) \u3002 \u8fd9\u4e2a\u4e1c\u897f\u505a\u51fa\u7684\u8d21\u732e\uff0c\u5e94\u8be5\u662f\u94a6\u5b9a \\(i,j\\) \u76f8\u5bf9\u7684\u56de\u6587\u4e32\u7684\u4e2a\u6570\u3002 \u6b63\u7740\u7b97\u4e0d\u592a\u597d\u641e\uff0c\u4e8e\u662f\u6211\u4eec\u53cd\u7740\u7b97\u5c31\u884c\uff0c\u7b97\u6709\u591a\u5c11\u4e0d\u4f1a\u505a\u8d21\u732e\u3002 \u7136\u540e\u968f\u4fbf\u5199\u5199\u5c31\u884c\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 // author : black_trees #include <cmath> #include <cstdio> #include <vector> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int n , a [ si ]; std :: vector < int > pos [ si ]; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n ; int ans = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { cin >> a [ i ]; pos [ a [ i ]]. emplace_back ( i ); } int ret = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { int l = 0 , r = pos [ i ]. size () - 1 ; while ( l < r ) { if ( pos [ i ][ l ] < n - pos [ i ][ r ] + 1 ) ret += ( r - l ) * pos [ i ][ l ], ++ l ; else ret += ( r - l ) * ( n - pos [ i ][ r ] + 1 ), -- r ; } } for ( int i = 1 ; i <= n ; ++ i ) { ans += ( n - i + 1 ) * ( i / 2 ); } cout << ans - ret << endl ; return 0 ; } // ()()()(? ABC290F Maximum Diameter \u03c8(\uff40\u2207\u00b4)\u03c8 \u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u6b63\u6574\u6570\u5e8f\u5217 \\(X=(X_1,X_2,\\cdots,X_n)\\) \uff0c\u5b9a\u4e49 \\(f(X)\\) \u4e3a\uff1a \u5bf9\u4e8e\u6240\u6709\u8282\u70b9\u6570\u91cf\u4e3a \\(n\\) \uff0c\u4e14\u70b9 \\(i\\) \u7684\u5ea6\u6570\u6070\u597d\u4e3a \\(X_i\\) \u7684\u6811\uff0c\u5176\u76f4\u5f84\u7684\u6700\u5927\u503c\u3002\u5982\u4e0d\u5b58\u5728\uff0c\u5219\u503c\u4e3a \\(0\\) \u3002 \u4f60\u9700\u8981\u5bf9\u4e8e\u6240\u6709\u957f\u5ea6\u4e3a \\(n\\) \u7684\u6b63\u6574\u6570\u5e8f\u5217 \\(X\\) \u8ba1\u7b97 \\(f(X)\\) \u7684\u548c\uff0c\u53ef\u4ee5\u8bc1\u660e\u5176\u4e3a\u6709\u9650\u503c\u3002\u7b54\u6848\u5bf9 \\(998244353\\) \u53d6\u6a21\u3002 \\(T\\) \u7ec4\u6570\u636e\u3002 \\(1\\le T\\le2\\times10^5\\) \uff0c \\(2\\le n\\le10^6\\) \u3002 \u2014\u2014 by Register_int \u6211\u4eec\u62ff\u5230\u8fd9\u9898\uff0c\u4ecd\u65e7\u662f\u5957\u8def\u7684\u8003\u8651\u7b97\u8d21\u732e\u3002 \u4f46\u662f\u6ce8\u610f\u5230\u8fd9\u4e2a \\(f(X)\\) \u7684\u5b9a\u4e49\u662f\uff0c\u5bf9\u4e8e\u6240\u6709 \\(X\\) \u80fd\u6784\u9020\u51fa\u7684\u6811\u91cc\uff0c\u6700\u5927\u7684\u76f4\u5f84\uff0c\u76f8\u5f53\u4e8e\u6709\u4e24\u4e2a max \u5957\u5728\u4e00\u8d77\uff0c\u76f4\u63a5\u6c42\u548c\u6362\u65b9\u5f0f\u7b97\u8d21\u732e\u4e0d\u597d\u5904\u7406\u3002 \u6240\u4ee5\u6211\u4eec\u8003\u8651\u89c2\u5bdf\u4e00\u4e0b\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684 \\(X\\) \uff0c \\(f(X)\\) \u5e94\u8be5\u662f\u4ec0\u4e48\u6837\u5b50\u7684\u3002 \u6709\u4e00\u4e2a\u7ed3\u8bba\uff1a\u4efb\u610f\u5408\u6cd5\u7684 \\(X\\) \u5fc5\u7136\u5305\u542b\u81f3\u5c11\u4e24\u4e2a \\(X_i = 1\\) \u7684\u5143\u7d20 \u8fd9\u4e2a\u662f\u663e\u7136\u7684\uff0c\u6781\u7aef\u60c5\u51b5\u5c31\u662f\u4e00\u6761\u94fe\u3002 \u8fd9\u4e2a\u7ed3\u8bba\u542f\u53d1\u6211\u4eec\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5c3d\u91cf\u957f\u7684\u6784\u9020\u51fa\u4e00\u6761\u94fe\u3002 \u505a\u6cd5\u5f88\u7b80\u5355\uff0c\u9009\u4e24\u4e2a \\(X_i = 1\\) \u7684\u70b9\u4f5c\u4e3a\u7aef\u70b9\uff0c\u628a\u6240\u6709 \\(X_i \\not= 1\\) \u7684\u8282\u70b9\u6254\u5230\u4e2d\u95f4\uff0c\u5176\u4ed6\u7684 \\(X_i = 1\\) \u7684\u8282\u70b9\u6302\u5728\u4e2d\u95f4\u5c31\u884c\u3002 \u53ef\u4ee5\u8bc1\u660e\u8fd9\u4e2a\u505a\u6cd5\u662f\u6b63\u786e\u7684\uff1a \u8bc1\u660e\uff1a \u94a6\u5b9a\u6070\u597d\u6709 \\(k\\) \u4e2a \\(X_i = 1\\) \u7684\u8282\u70b9\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u5ea6\u6570\u662f \\(2n - 2 - k\\) \uff08\u7531\u6811\u7684\u6027\u8d28\uff0c\u5ea6\u6570\u4e4b\u548c\u4e3a \\(2n-2\\) \uff09\u3002 \u6211\u4eec\u8003\u8651\u628a\u8fd9\u6761\u94fe\u7684\u5ea6\u6570\u4e5f\u51cf\u53bb\uff0c\u5c31\u662f\u8fd9 \\(n - k\\) \u4e2a\u8282\u70b9\u4e4b\u95f4\u7684 \\(n - k - 1\\) \u6761\u8fb9\u4e58\u4e8c\uff0c\u5728\u52a0\u4e0a\u4e24\u8fb9\u7684 \\(2\\) \u3002 \u90a3\u4e48\u8fd8\u5269\u4e0b\u7684\u5ea6\u6570\u5c31\u662f \\(2n - 2 - k - 2(n - k - 1) - 2 = k\\) \uff0c\u90a3\u6070\u597d\u5c31\u80fd\u6784\u9020\u51fa\u6765\u3002 \u597d\uff0c\u73b0\u5728\u6211\u4eec\u8003\u8651\u8ba1\u6570\uff0c\u6ce8\u610f\u5230\u6392\u5e8f\u8fc7\u540e\u76f8\u7b49\u7684 \\(X\\) \u7684 \\(f(X)\\) \u663e\u7136\u76f8\u7b49\uff0c\u6211\u4eec\u7b97\u4e00\u4e0b\u65b9\u6848\u6570\u5c31\u884c\u3002 \u53ef\u4ee5\u53d1\u73b0\u8ba1\u6570\u7684\u9636\u6bb5\u5e94\u8be5\u662f \\(k\\) \uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u94a6\u5b9a\u67d0\u4e9b\u4f4d\u7f6e\u90fd\u662f \\(1\\) \uff0c\u8fd9\u90e8\u5206\u65b9\u6848\u6570\u662f \\(\\dbinom{n}{k}\\) \uff0c\u5269\u4e0b\u7684\u90e8\u5206\u5c31\u5168\u90e8\u9700\u8981 \\(1\\) \uff0c\u4e14\u6211\u4eec\u8981\u8ba9\u8fd9 \\(n - k\\) \u4e2a \\(X_i\\) \u7684 \\(\\sum = 2n - 2 - k\\) \u3002 \u4e3a\u4e86\u65b9\u4fbf\u76f4\u63a5\u7ed9\u6bcf\u4e2a\u8282\u70b9\u51cf\u53bb \\(2\\) \uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u63d2\u677f\u6cd5\uff0c\u8fd9\u90e8\u5206\u65b9\u6848\u6570\u662f \\(\\dbinom{n - 3}{n - k - 1}\\) \u3002 \u76f4\u5f84\u957f\u5ea6\u4e3a \\(n - k + 1\\) \uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u4e3a \\(\\sum\\limits_{k = 1}^n \\dbinom{n}{k} \\dbinom{n - 3}{n - k - 1}(n - k + 1)\\) \u3002 \u8fd9\u4e2a\u663e\u7136\u4e0d\u884c\uff0c\u6211\u4eec\u63a8\u4e00\u4e0b\u5f0f\u5b50\u3002 \u6ce8\u610f\u5230\u8fd9\u4e2a\u4e1c\u897f\u957f\u7684\u5f88\u50cf\u4e00\u4e2a\u6052\u7b49\u5f0f\uff1a \\(\\sum\\limits_{i = 0}^k\\dbinom{n}{i}\\dbinom{m}{k - i} = \\dbinom{n + m}{k}\\) \uff0c\u8fd9\u4e1c\u897f\u53ef\u4ee5\u76f4\u63a5\u7ec4\u5408\u610f\u4e49\u8bc1\u660e\uff0c\u542c\u8bf4\u4e5f\u53eb\u505a\u8303\u5fb7\u8499\u5fb7\u5377\u79ef\u3002 \u4f46\u662f\u6709\u4e00\u5768 \\(n - k + 1\\) \uff0c\u4e0d\u597d\u5316\uff0c\u53c8\u60f3\u5230\u6709\u4e00\u4e2a\u6052\u7b49\u5f0f\uff1a \\(k\\dbinom{n}{k} = n\\dbinom{n - 1}{n - k}\\) \u53d1\u73b0 \\(n - k + 1\\) \u90a3\u4e00\u5768\u53ef\u4ee5\u62c6\u5f00\u53d8\u6210 \\(n - k - 1\\) \uff0c\u6211\u4eec\u53ef\u4ee5\u628a \\(k\\) \u6d88\u6389\uff0c\u7cfb\u6570\u5199\u5230\u524d\u9762\u3002 \u4e8e\u662f\u6211\u4eec\u5199\u51fa\uff1a \\[ \\sum\\limits_{k = 1}^n \\dbinom{n}{k} \\dbinom{n - 3}{n - k - 1}(n - k + 1) \\iff \\\\ \\sum\\limits_{k = 1}^n \\dbinom{n}{k} \\dbinom{n - 3}{n - k - 1}(n - k - 1) + 2\\sum\\limits_{k = 1}^n\\dbinom{n}{k} \\dbinom{n - 3}{n - k - 1} \\iff \\\\ (n - 3)\\sum\\limits_{k = 1}^n \\dbinom{n}{k} \\dbinom{n - 4}{n - k - 2} + 2\\sum\\limits_{k = 1}^n\\dbinom{n}{k} \\dbinom{n - 3}{n - k - 1} \\] \u6839\u636e\u8303\u5fb7\u8499\u5fb7\u5377\u79ef\u516c\u5f0f\uff0c\u53ef\u4ee5\u5f97\u5230\uff1a \\(ans = (n - 3)\\dbinom{2n - 4}{n - 2} + 2\\dbinom{2n - 3}{n - 1}\\) \u7136\u540e\u5c31\u53ef\u4ee5\u7ebf\u6027\u505a\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 // author : black_trees #include <cmath> #include <cstdio> #include <cassert> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; using ldb = long double ; using u64 = unsigned long long ; constexpr i64 safe_mod ( i64 x , i64 m ) { return x %= m , x < 0 ? x + m : x ; } constexpr i64 pow_mod_constexpr ( i64 x , i64 n , int m ) { if ( m == 1 ) return 0 ; unsigned _m = m ; uint64_t r = 1 , _x = safe_mod ( x , m ); for (; n ; n >>= 1 , _x = _x * _x % _m ) if ( n & 1 ) r = r * _x % m ; return r ; } constexpr bool is_prime_constexpr ( int n ) { if ( n <= 1 ) return false ; if ( n == 2 || n == 7 || n == 61 ) return true ; if ( n % 2 == 0 ) return false ; i64 d = n - 1 ; while ( ~ d & 1 ) d /= 2 ; for ( i64 a : { 2 , 7 , 61 }) { i64 t = d , y = pow_mod_constexpr ( a , t , n ); while ( t != n - 1 && y != 1 && y != n - 1 ) y = y * y % n , t <<= 1 ; if ( y != n - 1 && t % 2 == 0 ) return false ; } return true ; } constexpr pair < i64 , i64 > inv_gcd ( i64 a , i64 b ) { a = safe_mod ( a , b ); if ( a == 0 ) return { b , 0 }; i64 s = b , t = a , m0 = 0 , m1 = 1 ; while ( t ) { i64 u = s / t ; s -= t * u , m0 -= m1 * u ; i64 tmp = s ; s = t , t = tmp , tmp = m0 , m0 = m1 , m1 = tmp ; } if ( m0 < 0 ) m0 += b / s ; return { s , m0 }; } struct Barrett_Reduction { unsigned m ; uint64_t im ; Barrett_Reduction ( unsigned m ) : m ( m ), im ( ~ 0ull / m + 1 ) {} unsigned mul ( unsigned a , unsigned b ) const { uint64_t z = ( uint64_t ) a * b , x = ( __uint128_t ) z * im >> 64 ; unsigned v = z - x * m ; return m <= v ? v + m : v ; } }; template < int m > struct static_modint { using _mint = static_modint ; public : static _mint raw ( int v ) { _mint x ; return x . _v = v , x ; } static_modint () : _v ( 0 ) {} template < class __Tp > static_modint ( __Tp v ) { i64 x = v % m ; _v = x < 0 ? x + m : x ; } unsigned val () const { return _v ; } _mint & operator ++ () { if ( ++ _v == m ) _v = 0 ; return * this ; } _mint & operator -- () { if ( ! _v -- ) _v = m - 1 ; return * this ; } _mint operator ++ ( int ) { _mint res = * this ; ++* this ; return res ; } _mint operator -- ( int ) { _mint res = * this ; --* this ; return res ; } _mint & operator += ( const _mint & rhs ) { _v += rhs . _v ; if ( _v >= m ) _v -= m ; return * this ; } _mint & operator -= ( const _mint & rhs ) { _v -= rhs . _v ; if ( _v >= m ) _v += m ; return * this ; } _mint & operator *= ( const _mint & rhs ) { uint64_t z = _v ; z *= rhs . _v , _v = z % m ; return * this ; } _mint & operator /= ( const _mint & rhs ) { return * this = * this * rhs . inv (); } _mint operator + () const { return * this ; } _mint operator - () const { return _mint () - * this ; } _mint pow ( i64 n ) const { assert ( 0 <= n ); _mint x = * this , r = 1 ; for (; n ; n >>= 1 , x *= x ) if ( n & 1 ) r *= x ; return r ; } _mint inv () const { if ( prime ) { assert ( _v ); return pow ( m - 2 ); } else { auto eg = inv_gcd ( _v , m ); assert ( eg . first == 1 ); return eg . second ; } } friend _mint operator + ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) += rhs ; } friend _mint operator - ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) -= rhs ; } friend _mint operator * ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) *= rhs ; } friend _mint operator / ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) /= rhs ; } friend bool operator == ( const _mint & lhs , const _mint & rhs ) { return lhs . _v == rhs . _v ; } friend bool operator != ( const _mint & lhs , const _mint & rhs ) { return lhs . _v != rhs . _v ; } private : unsigned _v ; static constexpr bool prime = is_prime_constexpr ( m ); }; struct dynamic_modint { using _mint = dynamic_modint ; public : static void set_mod ( int m ) { assert ( 1 <= m ), bt = Barrett_Reduction ( m ); } static _mint raw ( int v ) { _mint x ; return x . _v = v , x ; } dynamic_modint () : _v ( 0 ) {} template < class __Tp > dynamic_modint ( __Tp v ) { i64 x = v % ( int ) bt . m ; _v = x < 0 ? x + bt . m : x ; } unsigned val () const { return _v ; } _mint & operator ++ () { if ( ++ _v == bt . m ) _v = 0 ; return * this ; } _mint & operator -- () { if ( ! _v -- ) _v = bt . m - 1 ; return * this ; } _mint operator ++ ( int ) { _mint res = * this ; ++* this ; return res ; } _mint operator -- ( int ) { _mint res = * this ; --* this ; return res ; } _mint & operator += ( const _mint & rhs ) { _v += rhs . _v ; if ( _v >= bt . m ) _v -= bt . m ; return * this ; } _mint & operator -= ( const _mint & rhs ) { _v += bt . m - rhs . _v ; if ( _v >= bt . m ) _v -= bt . m ; return * this ; } _mint & operator *= ( const _mint & rhs ) { _v = bt . mul ( _v , rhs . _v ); return * this ; } _mint & operator /= ( const _mint & rhs ) { return * this = * this * rhs . inv (); } _mint operator + () const { return * this ; } _mint operator - () const { return _mint () - * this ; } _mint pow ( i64 n ) const { assert ( 0 <= n ); _mint x = * this , r = 1 ; for (; n ; n >>= 1 , x *= x ) if ( n & 1 ) r *= x ; return r ; } _mint inv () const { auto eg = inv_gcd ( _v , bt . m ); assert ( eg . first == 1 ); return eg . second ; } friend _mint operator + ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) += rhs ; } friend _mint operator - ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) -= rhs ; } friend _mint operator * ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) *= rhs ; } friend _mint operator / ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) /= rhs ; } friend bool operator == ( const _mint & lhs , const _mint & rhs ) { return lhs . _v == rhs . _v ; } friend bool operator != ( const _mint & lhs , const _mint & rhs ) { return lhs . _v != rhs . _v ; } private : unsigned _v ; static Barrett_Reduction bt ; }; using modint = dynamic_modint ; using barrett = Barrett_Reduction ; barrett modint :: bt = 998244353l l ; const int si = 2e6 + 10 ; modint fact [ si ]; void Init () { fact [ 0 ] = 1 ; for ( int i = 1 ; i < si ; ++ i ) fact [ i ] = fact [ i - 1 ] * i ; } modint C ( int n , int m ) { if ( m < 0 || n < m ) return 0 ; return fact [ n ] / ( fact [ n - m ] * fact [ m ]); } int solve ( int n ) { return (( n - 3 ) * C ( n * 2 - 4 , n - 2 ) + 2 * C ( 2 * n - 3 , n - 1 )). val (); } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); Init (); int T ; cin >> T ; while ( T -- ) { int n ; cin >> n ; cout << solve ( n ) << endl ; } return 0 ; } ABC291D,E,F \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e2a\u592a\u6c34\u4e86\uff0c\u5c31\u4e0d\u5199\u4e86\u3002 ABC292D,E,F \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e2a\u4e5f\u592a\u6c34\u4e86\uff0c\u4e0d\u5199\u4e86\u3002","title":"2023\u5e741,2\u6708AT&CF"},{"location":"rec/atcf-for-2023-01-02/#abc284d-happy-new-year-2023","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 \\(N\\le 9\\times 10^{18}\\) \uff0c\u4fdd\u8bc1 \\(N=p^2q\\) \u4e14 \\(p,q\\) \u5747\u4e3a\u8d28\u6570\uff0c\u8bf7\u6c42\u51fa \\(p,q\\) \u3002 \u7ffb\u8bd1 by @Mars_Dingdang \\(O(n^{\\frac{1}{3}})\\) \u505a\u6cd5\u8fd8\u4e0d\u4f1a\uff0c\u4e4b\u540e\u8865\u3002 \u6211\u662f \\(O(n^{\\frac{1}{4}})\\) \u7684 Pr \u505a\u6cd5\u3002 \u5c31\u628a\u8fd9\u4e2a\u5f53\u6210\u5927\u6570\u6c42\u6700\u5927\u8d28\u56e0\u5b50\u7684\u677f\u5b50\u5c31\u884c\u4e86\uff0c\u7c98\u7684\u4e24\u5e74\u524d\u7684\u677f\u5b50\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 // author : black_trees #include <cmath> #include <ctime> #include <cstdio> #include <random> #include <cstring> #include <iomanip> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; #define li inline #define re register #define ll __int128 __int128 abs_128 ( __int128 x ){ if ( x > 0 ){ return x ; } return - x ; } namespace Miller_Rabin { const int Pcnt = 12 ; const ll p [ Pcnt ] = { 2 , 3 , 5 , 7 , 11 , 13 , 17 , 19 , 61 , 2333 , 4567 , 24251 }; li ll pow ( re ll a , re ll b , re ll p ){ re ll ans = 1 ; for (; b ; a = a * a % p , b >>= 1 ){ if ( b & 1 ){ ans = ans * a % p ; } } return ans ; } li bool check ( re ll x , re ll p ){ if ( x % p == 0 || pow ( p % x , x -1 , x ) ^ 1 ){ return true ; } re ll t , k = x -1 ; while (( k ^ 1 ) & 1 ){ t = pow ( p % x , k >>= 1 , x ); if ( t ^ 1 && t ^ x -1 ){ return true ; } if ( ! ( t ^ x -1 )){ return false ; } } return false ; } inline bool MR ( re ll x ){ if ( x < 2 ) return false ; for ( re int i = 0 ; i ^ Pcnt ; ++ i ){ if ( ! ( x ^ p [ i ])) return true ; if ( check ( x , p [ i ])) return false ; } return true ; } } namespace Pollard_Rho { #define Rand(x) (1ll*rand()*rand()%(x)+1) li ll gcd ( const ll a , const ll b ){ return b ? gcd ( b , a % b ) : a ;} li ll mul ( const re ll x , const re ll y , const re ll X ){ ll k = ( 1.0L * x * y ) / ( 1.0L * X ) -1 , t = x * y - k * X ; while ( t < 0 ) t += X ; return t ; } li ll PR ( const re ll x , const re ll y ){ re int t = 0 , k = 1 ; re ll v0 = Rand ( x -1 ), v = v0 , d , s = 1 ; while ( true ){ v = ( mul ( v , v , x ) + y ) % x , s = mul ( s , abs_128 ( v - v0 ), x ); if ( ! ( v ^ v0 ) ||! s ) return x ; if ( ++ t == k ){ if (( d = gcd ( s , x )) ^ 1 ) return d ; v0 = v , k <<= 1 ;} } } li void Resolve ( re ll x , re ll & ans ){ if ( ! ( x ^ 1 ) || x <= ans ) return ; if ( Miller_Rabin :: MR ( x )){ if ( ans < x ) ans = x ; return ; } re ll y = x ; while (( y = PR ( x , Rand ( x ))) == x ); while ( ! ( x % y )){ x /= y ; } Resolve ( x , ans ); Resolve ( y , ans ); } li long long check ( ll x ){ re ll ans = 0 ; Resolve ( x , ans ); return ans ; } } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); srand ( time ( NULL )); int T ; cin >> T ; while ( T -- ) { unsigned long long x , p , q ; cin >> x , p = Pollard_Rho :: check ( x ); x /= p ; if ( x % p == 0 ) q = x / p ; else q = sqrt ( x ), swap ( p , q ); cout << p << \" \" << q << endl ; } return 0 ; } // ()()()(?","title":"ABC284D - Happy New Year 2023"},{"location":"rec/atcf-for-2023-01-02/#abc284f-abcbac","text":"\u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(N\\) \u7684\u5b57\u7b26\u4e32 \\(S\\) \u548c\u4e00\u4e2a\u6574\u6570 \\(i\\in [0,N]\\) \uff0c\u5b9a\u4e49 \\(f_i(S)\\) \u6240\u5f97\u7684\u5b57\u7b26\u4e32\u4e3a\u4ee5\u4e0b\u4e09\u8005\u987a\u6b21\u8fde\u63a5\uff1a \\(S\\) \u7684\u524d \\(i\\) \u4e2a\u5b57\u7b26\uff1b \u5c06 \\(S\\) \u7ffb\u8f6c\u5f97\u5230\u7684\u5b57\u7b26\u4e32\uff1b \\(S\\) \u7684\u540e \\(N-i\\) \u4e2a\u5b57\u7b26\u3002 \u4f8b\u5982\uff0c\u5bf9\u4e8e \\(S=\\texttt{abc}\\) \uff0c \\(i=2\\) \u6709 \\(f_i(S)=\\texttt{abcbac}\\) \u3002 \u73b0\u5728\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(2N\\) \u7684\u5b57\u7b26\u4e32 \\(T\\) \uff0c\u4f60\u9700\u8981\u6c42\u51fa\u4efb\u610f\u4e00\u5bf9 \\((S,i)\\) \u6ee1\u8db3 \\(f_i(S)=T\\) \u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u8f93\u51fa \\(-1\\) \u3002 \u7ffb\u8bd1 by @Mars_Dingdang \u6ce8\u610f\u5230 \\(1\\le N \\le 10^6\\) \uff0c\u4e0d\u96be\u60f3\u5230 \\(O(N)\\) \u505a\u3002 \u7136\u540e\u6211\u4eec\u8981\u68c0\u67e5\uff0c\u505a\u4e00\u4e9b\u5339\u914d\u4e4b\u7c7b\u7684\uff0c\u6240\u4ee5\u4f30\u8ba1\u662f\u5b57\u7b26\u4e32\u54c8\u5e0c\u3002 \u76f4\u63a5\u8003\u8651\u679a\u4e3e \\(i\\) \uff0c\u7136\u540e\u5b57\u7b26\u4e32 hash check \u4e00\u4e0b\u5c31\u884c\u4e86\uff0c\u56e0\u4e3a\u8981\u53cd\u4e32\uff0c\u6240\u4ee5\u524d\u540e\u7f00\u90fd\u8981\u505a\u4e00\u6b21\u3002 \u7eaf\u50bb\u903c\uff0c\u5361\u6211\u81ea\u7136\u6ea2\u51fa\uff0c\u5199\u4e86\u4e00\u4e2a\u53cc\u54c8\u5e0c\u624d\u8fc7\u3002","title":"ABC284F - ABCBAC"},{"location":"rec/atcf-for-2023-01-02/#cf1783c-yet-another-tournament","text":"\u6709 \\(n\\) \u4e2a\u9009\u624b\uff0c\u7f16\u53f7\u4e3a \\(1\\) \u81f3 \\(n\\) \uff0c\u6bcf\u4e24\u4e2a\u9009\u624b\u5bf9\u6218\u65f6\uff0c\u7f16\u53f7\u5927\u7684\u5c06\u4f1a\u80dc\u5229\u3002 \u4f60\u53ef\u4ee5\u51c6\u5907 \\(m\\) \u5355\u4f4d\u65f6\u95f4\uff0c\u6bcf\u51c6\u5907 \\(a_i\\) \u65f6\u95f4\u5c31\u53ef\u4ee5\u8d62 \\(i\\) \u53f7\u9009\u624b\u3002 \u6309\u80dc\u5229\u7684\u603b\u6b21\u6570\u6392\u540d\uff0c\u6c42\u4f60\u6700\u9ad8\u591a\u5c11\u540d\u3002 \u6ce8\u610f\u5230\u4e00\u4e2a\u6bd4\u8f83\u5173\u952e\u7684\u70b9\u662f\uff0c\u5982\u679c\u80fd\u6253\u8d62\u7684\u4eba\u76f8\u540c\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u4f18\u7684\u51b3\u7b56\u4e00\u5b9a\u662f\u5c3d\u91cf\u6253\u7206 rk \u9ad8\u7684\u4eba\u3002 \u6240\u4ee5\u5148\u6392\u5e8f\u76f4\u63a5\u66b4\u529b\u53d6\uff0c\u7136\u540e\u4ece\u540e\u9762\u4e0d\u65ad\u8d2a\u5fc3\u7684\u62ff\u4e00\u4e2a\uff0c\u9000\u6389\u4e00\u4e2a\u5df2\u7ecf\u9009\u4e86\u7684\u5373\u53ef\u3002 \u5982\u679c\u7528\u4f18\u5148\u961f\u5217\u5b9e\u73b0\u4f1a\u6bd4\u8f83\u590d\u6742\uff0c\u4ee3\u7801\u91cc\u6ce8\u91ca\u6389\u4e86\uff0c\u662f\u8fd8\u6ca1\u8c03\u51fa\u6765\u7684\uff0c\u540e\u6765\u53d1\u73b0\u53ef\u4ee5\u76f4\u63a5\u524d\u7f00\u548c\uff08 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 // author : black_trees #include <cmath> #include <queue> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 5e5 + 10 ; int n , m ; int a [ si ], b [ si ], sum [ si ]; // struct node { // int id, cnt, val; // bool operator < (const node &b) const { // if(val == b.val) return cnt > b.cnt; // return val < b.val; // } // } a[si]; // int b[si]; // std::priority_queue<std::pair<node, int>> q; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { // cin >> n >> m, b[0] = b[n + 1] = 0; // while(!q.empty()) q.pop(); // for(int i = 1; i <= n; ++i) // cin >> a[i].val, a[i].id = i, a[i].cnt = i - 1, b[i] = 0; // sort(a + 1, a + 1 + n); // int cnt = 0; // for(int i = 1; i <= n; ++i) { // if(m - a[i].val >= 0) { // m -= a[i].val, cnt++; // q.push({a[i], i}); // } // else { // if(q.empty()) break; // for(int j = i; j <= n; ++j) a[i].cnt ++; // for(int j = i; j <= n; ++j) { // auto x = q.top(); // cout << x.first.id << \" \" << x.first.cnt << \" \" << x.first.val << \" \" << x.second << endl; // if(m + x.first.val - a[i].val >= 0) { // q.pop(), m += x.first.val, m -= a[i].val; // a[x.second].cnt ++, a[i].cnt --; // q.push({a[i], i}); // } // } // break; // } // } // b[cnt] += 1; // for(int i = 1; i <= n; ++i) // b[a[i].cnt] += 1; // for(int i = 1; i <= n; ++i) { // cout << \"b[\" << i << \"] = \" << b[i] << \" \"; // } // cout << endl; // int ans = 0; // for(int i = n; i >= 0; --i) { // if(i == cnt) { ans++; break; } // ans += b[i]; // } // cout << ans << endl; // cout << \" --- - - - -- - - \" << endl; cin >> n >> m ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], b [ i ] = a [ i ]; sort ( b + 1 , b + 1 + n ); for ( int i = 1 ; i <= n ; ++ i ) sum [ i ] = sum [ i - 1 ] + b [ i ]; int ans = n + 1 ; for ( int i = 1 ; i <= n ; ++ i ) { if ( m >= sum [ i ]) ans = min ( ans , n - i + 1 ); if ( i < n && m >= sum [ i ] + max ( a [ i + 1 ] - b [ i ], 0 )) ans = min ( ans , n - i ); } cout << ans << endl ; } return 0 ; } // ()()()(?","title":"CF1783C - Yet Another Tournament"},{"location":"rec/atcf-for-2023-01-02/#cf1783e-game-of-the-year","text":"Monocarp \u548c Polycarp \u6b63\u5728\u73a9\u7535\u8111\u6e38\u620f\u3002\u6e38\u620f\u7279\u70b9\uff1a$ n $ \u4e2a\u7f16\u53f7\u4ece $ 1 $ \u5230 $ n $ \u7684BOSS\u3002 \u4ed6\u4fe9\u5c06\u7528\u4ee5\u4e0b\u65b9\u5f0f\u4e0eBOSS\u6218\u6597 Monocarp \u8fdb\u884c \\(k\\) \u6b21\u5c1d\u8bd5\u6492\u6389boss; Polycarp \u8fdb\u884c \\(k\\) \u6b21\u5c1d\u8bd5\u6492\u6389boss; Monocarp \u8fdb\u884c \\(k\\) \u6b21\u5c1d\u8bd5\u6492\u6389boss; Polycarp \u8fdb\u884c \\(k\\) \u6b21\u5c1d\u8bd5\u6492\u6389boss; ... Monocarp \u5728\u7b2c \\(a_i\\) \u6b21\u5c1d\u8bd5\u4e2d\u6492\u6389\u4e86\u7b2c \\(i\\) \u53eaBOSS\u3002Polycarp \u5728\u7b2c \\(b_i\\) \u6b21\u5c1d\u8bd5\u4e2d\u6492\u6389\u4e86\u7b2c \\(i\\) \u53eaBOSS\u3002\u5176\u4e2d\u4e00\u4e2a\u4eba\u6492\u6389\u7b2c \\(i\\) \u53eaBOSS\u540e\uff0c\u4ed6\u4eec\u5c31\u4f1a\u5c1d\u8bd5\u6492\u7b2c \\((i+1)\\) \u53eaBOSS\u3002\u5e76\u4e14\u4ed6\u4eec\u7684\u5c1d\u8bd5\u8ba1\u6570\u5668\u90fd\u4f1a\u6e05\u7a7a\u3002\u6492\u6389\u7b2c \\(n\\) \u53eaBOSS\u540e\uff0c\u6e38\u620f\u7ed3\u675f\u3002 \u627e\u5230\u4ece \\(1\\) \u5230 $ n $\u6240\u6709\u7684 \\(k\\) \u503c\uff0c \u4f7f\u5f97 Monocarp \u53ef\u4ee5\u6740\u6b7b\u6240\u6709\u7684BOSS\u3002 \u5206\u6790\u4e00\u4e0b\uff0c\u8981\u8ba9 Monocarp \u628a\u6bcf\u4e00\u4e2a\u90fd\u4f18\u5148\u6253\u6389\uff0c\u5c31\u8981\u4fdd\u8bc1 \\(\\lceil \\dfrac{a_i}{k}\\rceil \\le \\lceil\\dfrac{b_i}{k}\\rceil\\) \u3002 \u76f4\u63a5\u66b4\u529b\u6c42\u590d\u6742\u5ea6 \\(O(n^2)\\) \uff0c\u5feb\u4e0a\u5929\u4e86\uff0c\u80af\u5b9a\u8981\u8003\u8651 \\(O(1) \\sim O(\\log n)\\) \u7684\u5355\u6b21\u64cd\u4f5c\u3002 \u5982\u679c \\(a_i \\le b_i\\) \u663e\u7136\u4e0d\u7ba1\u600e\u4e48\u6837\u90fd\u662f Mono \u5148\u6253\u5b8c\u3002 \u4e8e\u662f\u6211\u4eec\u8003\u8651 \\(a_i > b_i\\) \u7684\u60c5\u51b5\u3002 \u7b2c\u4e00\u79cd\u60c5\u51b5\u662f \\(k \\ge a_i\\) \uff0c\u8fd9\u6837\u663e\u7136\u7b2c\u4e00\u8f6e Mono \u5c31\u6253\u5b8c\u4e86\u3002 \u7b2c\u4e8c\u79cd\u60c5\u51b5\u662f \\(k < a_i\\) \uff0c\u8fd9\u6837\u7684\u8bdd\u8981\u4fdd\u8bc1 \\(\\lceil \\dfrac{a_i}{k}\\rceil \\le \\lceil\\dfrac{b_i}{k}\\rceil\\) \uff0c\u9700\u8981\u6ee1\u8db3\uff0c\u53ea\u8003\u8651\u6700\u540e\u4e24\u6b21 attack \u7684\u65f6\u5019\uff0cMono \u6253\u51fa\u7b2c\u4e00\u6b21\uff0cPoly \u6253\u51fa\u7b2c\u4e00\u6b21\uff0c\u6b64\u65f6\u6ee1\u8db3 \\(a_i \\le k\\) \uff0c\u8fd9\u6837\u7b2c\u4e8c\u6b21 Mono \u5c31\u53ef\u4ee5\u4f18\u5148\u6253\u6389\u3002 \u672c\u8d28\u4e0a\u662f \\(b_i \\mod k\\) \u8981\u6709\u5927\u4e8e\u96f6\u7684\u4f59\u6570\uff0c\u4e0d\u7136\u56e0\u4e3a \\(a_i > b_i\\) \uff0cPoly \u4e00\u5b9a\u4f1a\u5728 Mono \u4e4b\u524d\u6253\u5b8c\u3002 \u6240\u4ee5 \\(k \\not|\\ b_i\\) \u5373\u53ef\uff0c\u7136\u540e\u6ce8\u610f\u5230 \\([b_i, a_i)\\) \u8fd9\u4e2a\u533a\u95f4\u91cc\u9762\u7684\u6570\uff0cPoly \u7b2c\u4e00\u6b21\u5c31\u4f1a\u6253\u6389\uff0c\u7136\u540e Mono \u8fd8\u5269\u4e00\u70b9\uff0c\u8fd9\u4e9b\u4e5f\u8981\u7b5b\u6389\u3002 \u7136\u540e\u6211\u968f\u4fbf\u624b\u73a9\u4e86\u4e00\u4e0b\u6ce8\u610f\u5230\uff0c\u5982\u679c \\(a_i = 10, b_i = 4\\) \u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u7b5b\u4e0d\u6389 \\(3\\) \uff0c\u4f1a\u5bc4\u6389\u3002 \u53d1\u73b0\u5176\u5b9e \\([b_i, a_i)\\) \u8fd9\u4e00\u6bb5\u7684\u6240\u6709\u6570\u7684\u56e0\u5b50\u4e5f\u662f\u8981\u7b5b\u6389\u7684\uff0c\u5176\u5b9e\u672c\u8d28\u662f\u548c \\(b_i \\mod k \\not ={0}\\) \u4e00\u4e2a\u9053\u7406\uff0c\u56e0\u4e3a\u6211\u4e0a\u9762\u7684\u60f3\u6cd5\u53ea\u8003\u8651\u4e86 \\(a_i, b_i\\) \u5728\u76f8\u90bb\u7684\u4e24\u4e2a\u5757\u91cc\u9762\u7684\u60c5\u51b5\uff08\u5757\u6307\u6570\u8f74\u4e0a\u6309 \\(k\\) \u5206\u5757\uff09\u3002 \u8fd9\u6837\u505a\u53ef\u4ee5\u4e0d\u7528\u8003\u8651 \\([b_i, a_i)\\) \uff0c\u56e0\u4e3a\u56e0\u5b50\u5305\u542b\u6570\u672c\u8eab\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 // author : black_trees #include <map> #include <set> #include <cmath> #include <bitset> #include <cstdio> #include <vector> #include <utility> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int n , m ; int a [ si ], b [ si ]; bool vis [ si ]; std :: set < int > s ; std :: vector < int > fact [ si ]; void get_factors ( int n ) { for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= n / i ; ++ j ) fact [ i * j ]. emplace_back ( i ); } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); get_factors ( si - 10 ); int T ; cin >> T ; while ( T -- ) { cin >> n , s . clear (); for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], vis [ i ] = true ; for ( int i = 1 ; i <= n ; ++ i ) cin >> b [ i ], s . insert ( i ); for ( int i = 1 ; i <= n ; ++ i ) { if ( a [ i ] <= b [ i ]) continue ; auto l = s . lower_bound ( b [ i ]), r = s . lower_bound ( a [ i ]); for ( auto j = l ; j != r ; ++ j ) for ( auto x : fact [ * j ]) vis [ x ] = false ; s . erase ( l , r ); } int cnt = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { if ( vis [ i ]) cnt ++ ; } cout << cnt << endl ; for ( int i = 1 ; i <= n ; ++ i ) { if ( vis [ i ]) cout << i << \" \\n \" [ i == n ]; } } return 0 ; } // ()()()(?","title":"CF1783E - Game of the Year"},{"location":"rec/atcf-for-2023-01-02/#abc284e-count-simple-paths","text":"\u7ed9\u5b9a\u4e00\u5f20 \\(N\\) \u4e2a\u8282\u70b9 \\(M\\) \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u4fdd\u8bc1\u6bcf\u4e2a\u8282\u70b9\u7684\u5ea6\u6570 \\(\\le 10\\) \u3002 \u8bb0\u4ece\u4efb\u610f\u8282\u70b9\u56de\u5230 \\(1\\) \u53f7\u70b9\u7684\u4e0d\u540c\u8def\u5f84\u603b\u6570\u4e3a \\(K\\) \uff0c\u8bf7\u8f93\u51fa \\(\\min(K,10^6)\\) \u3002 \u7ffb\u8bd1 by @Mars_Dingdang \u611f\u89c9\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u5c31\u662f\u7b80\u5355\u7684 dfs\u3002 \u4f46\u662f\u6211\u5c45\u7136\u8fde\u628a vis \u653e\u5230 dfs \u5916\u9762\u7528\u6765\u56de\u6eaf\u90fd\u5fd8\u8bb0\u4e86\uff1f dfs \u90fd\u4e0d\u4f1a\u5199\u4e86\uff1f\uff1f\uff1f Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 // author : black_trees #include <cmath> #include <queue> #include <cstdio> #include <cstring> #include <iomanip> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int n , m ; int tot = 0 , head [ si ]; struct Edge { int ver , Next ; } e [ si << 1 ]; inline void add ( int u , int v ) { e [ tot ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot ++ ; } int ans = 0 ; bool vis [ si ]; void dfs ( int u , int fa ) { if ( ans >= 1000000 ) cout << \"1000000\" << endl , exit ( 0 ); vis [ u ] = true ; ans ++ ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; if ( vis [ v ]) continue ; dfs ( v , u ); } vis [ u ] = false ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); memset ( head , -1 , sizeof head ), tot = 0 ; cin >> n >> m ; for ( int i = 1 ; i <= m ; ++ i ) { int u , v ; cin >> u >> v ; add ( u , v ), add ( v , u ); } dfs ( 1 , 0 ); cout << ans << endl ; return 0 ; }","title":"ABC284E - Count Simple Paths"},{"location":"rec/atcf-for-2023-01-02/#cf1775c-interesting-sequence","text":"\u56e0\u4e3a\u6bd4\u8f83\u61d2\u6240\u4ee5\u8fd9\u51e0\u4e2a\u9898\u5c31\u662f\u53e3\u80e1\u9898\u89e3\uff0c\u4ee3\u7801\u4e5f\u61d2\u5f97\u653e\u4e86\u3002 \u7ed9\u4e24\u4e2a\u6570\uff0c \\(n\\) \u548c \\(x\\) \uff0c\u95ee\u662f\u5426\u5b58\u5728 \\(m\\) \uff0c\u4f7f\u5f97 \\(n \\& n+1 \\& \u2026\u2026 \\& m = x\\) \uff0c\u5982\u679c\u5b58\u5728\u6c42\u51fa\u6700\u5c0f\u7684 \\(m\\) \uff0c\u5426\u5219\u8f93\u51fa \\(-1\\) \u3002 \u8003\u8651\u4e8c\u8fdb\u5236\u4e0b\u8d2a\u5fc3\u5373\u53ef\uff0c\u6ce8\u610f\u5904\u7406\u8fdb\u4f4d\u548c\u65e0\u89e3\u3002","title":"CF1775C - Interesting Sequence"},{"location":"rec/atcf-for-2023-01-02/#cf1775d-friendly-spiders","text":"\u706b\u661f\u4e0a\u6709\u4e00\u79cd\u795e\u79d8\u7684\u7535\u5b50\u8718\u86db\u3002 \u4e3a\u4e86\u7814\u7a76\u8fd9\u79cd\u8718\u86db\uff0c\u79d1\u5b66\u5bb6\u627e\u6765\u4e86\u5176\u4e2d\u7684 \\(n\\) \u4e2a\uff0c\u6bcf\u4e2a\u8718\u86db\u6709\u4e0d\u540c\u7684\u817f\u6570\uff0c\u7528\u6570\u7ec4 \\(a\\) \u8868\u793a\u3002\u79d1\u5b66\u5bb6\u4eec\u53d1\u73b0\uff0c\u6709\u7684\u8718\u86db\u4e92\u76f8\u662f\u670b\u53cb\uff0c\u5982\u679c\u7b2c \\(i\\) \u4e2a\u8718\u86db\u548c\u7b2c \\(j\\) \u4e2a\u8718\u86db\u662f\u670b\u53cb\u7684\u8bdd\uff0c\u90a3\u4e48\u8981\u6ee1\u8db3 \\(\\operatorname{gcd}(a_{i},a_{j})\u22601\\) \uff0c\u5176\u4e2d \\(\\operatorname{gcd}(x,y)\\) \u51fd\u6570\u8868\u793a\u6c42 \\(x\\) \u548c \\(y\\) \u7684\u6700\u5927\u516c\u7ea6\u6570\u3002 \u79d1\u5b66\u5bb6\u53d1\u73b0\u8718\u86db\u53ef\u4ee5\u4e92\u76f8\u53d1\u9001\u4fe1\u606f\u3002\u5982\u679c\u4e24\u53ea\u8718\u86db\u662f\u670b\u53cb\uff0c\u90a3\u4e48\u5b83\u4eec\u53ef\u4ee5\u7528\u4e00\u79d2\u949f\u76f4\u63a5\u53d1\u9001\u6d88\u606f\u3002\u5426\u5219\uff0c\u8718\u86db\u5fc5\u987b\u5c06\u6d88\u606f\u4f20\u9012\u7ed9\u4ed6\u7684\u670b\u53cb\uff0c\u800c\u670b\u53cb\u53c8\u5fc5\u987b\u5c06\u6d88\u606f\u4f20\u9012\u7ed9\u4ed6\u7684\u670b\u53cb\uff0c\u4f9d\u6b64\u7c7b\u63a8\uff0c\u76f4\u5230\u6d88\u606f\u5230\u8fbe\u6536\u4ef6\u4eba\u3002 \u5047\u8bbe\u6709\u4e00\u53ea\u516b\u6761\u817f\u7684\u8718\u86db\u5411\u4e00\u53ea \\(15\\) \u6761\u817f\u7684\u8718\u86db\u4f20\u9012\u6d88\u606f\uff0c\u4f46\u662f\u7531\u4e8e \\(\\operatorname{gcd}(8,15)=1\\) \u6240\u4ee5\u4ed6\u4e0d\u80fd\u76f4\u63a5\u53d1\u9001\uff0c\u4f46\u5b83\u53ef\u4ee5\u901a\u8fc7\u516d\u6761\u817f\u7684\u8718\u86db\u53d1\u9001\u6d88\u606f\uff0c\u56e0\u4e3a \\(\\operatorname{gcd}(8,6)=2\\) \u5e76\u4e14 \\(\\operatorname{gcd}(6,15)=3\\) \u6240\u4ee5\u6d88\u606f\u5c06\u4f1a\u5728\u4e24\u79d2\u949f\u5230\u8fbe\u3002 \u79d1\u5b66\u5bb6\u4eec\u5e0c\u671b\u627e\u5230\u7b2c \\(s\\) \u4e2a\u8718\u86db\u5411\u7b2c \\(t\\) \u4e2a\u8718\u86db\u53d1\u9001\u6d88\u606f\u7684\u6700\u77ed\u65f6\u95f4\uff0c\u4ee5\u53ca\u6700\u77ed\u8def\u7ebf\u3002 \u8003\u8651\u4f18\u5316\u5efa\u56fe\uff0c\u53ea\u9700\u8981\u5148\u7b5b\u51fa\u6240\u6709\u8d28\u6570\uff0c\u5c06\u5176\u7684\u500d\u6570\u5168\u90e8\u8fde\u8fb9\u3002 \u76f8\u5f53\u4e8e\u627e\u516c\u5171\u8d28\u56e0\u5b50\u65f6\u4e3a\u4e86\u65b9\u4fbf\u53cd\u7740\u7b97\u8fd9\u6837\u5b50\uff0c\u7136\u540e\u968f\u4fbf\u8dd1\u4e00\u8dd1\u6700\u77ed\u8def\u5c31\u884c\u3002","title":"CF1775D - Friendly Spiders"},{"location":"rec/atcf-for-2023-01-02/#cf1775e-the-human-equation","text":"\u7ed9\u5b9a \\(n\\) \u4e2a\u6570 \\(a_1...a_n\\) \uff0c\u968f\u540e\u4f60\u53ef\u4ee5\u8fdb\u884c\u82e5\u5e72\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u6b65\u9aa4\u5982\u4e0b\uff1a \u9009\u51fa \\(a\\) \u4e2d\u4e00\u4e2a\u5b50\u5e8f\u5217\uff08\u53ef\u4ee5\u4e0d\u8fde\u7eed\uff09\u3002 \u628a\u5b50\u5e8f\u5217\u4e2d\u7684\u5947\u6570\u9879\u51cf\u4e00\uff0c\u5076\u6570\u9879\u52a0\u4e00\uff1b\u6216\u8005\u5947\u6570\u9879\u52a0\u4e00\uff0c\u5076\u6570\u9879\u51cf\u4e00\u3002 \u6c42\u628a \\(n\\) \u4e2a\u6570\u5168\u90e8\u53d8\u6210 \\(0\\) \u7684\u6700\u5c11\u64cd\u4f5c\u6b21\u6570\u3002 \\(1\\le n\\le2\\times10^5,-10^9\\le a_i\\le10^9\\) \uff0c\u591a\u7ec4\u6570\u636e\u3002 \u8003\u8651\u8d2a\u5fc3\u7684\u53d6\uff0c\u5e0c\u671b\u6bcf\u6b21\u80fd\u8ba9\u8d1f\u6570\u52a0\uff0c\u6b63\u6570\u51cf\uff0c\u4e14\u51cf\u5230 0 \u5c31\u4e0d\u52a8\u3002 \u8003\u8651\u540e\u51cf\u5b8c\u7684\u64cd\u4f5c\u6b21\u6570\u5373\u53ef\uff0c\u56e0\u4e3a\u53ea\u80fd\u4e00\u4e2a\u4e00\u4e2a\u64cd\u4f5c\uff0c\u6240\u4ee5\u7b54\u6848\u662f\u524d\u7f00\u548c\u7684\u6781\u5dee\u3002","title":"CF1775E - The Human Equation"},{"location":"rec/atcf-for-2023-01-02/#cf1778a-flip-flop-sum","text":"\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u53ea\u542b\u6709 \\(1\\) \u6216 \\(-1\\) \u7684\u6570\u7ec4 \\(a\\) \uff0c\u5bf9\u5176\u8fdb\u884c\u5982\u4e0b\u7684\u64cd\u4f5c\uff1a \u9009\u5b9a\u4e00\u4e2a \\(i\\) \uff0c\u6ee1\u8db3 \\(1\\le i<n\\) \uff0c\u5c06 \\(a_i\\) \u4fee\u6539\u4e3a \\(-a_i\\) \uff0c\u5c06 \\(a_{i+1}\\) \u4fee\u6539\u4e3a \\(-a_{i+1}\\) \u3002 \u6c42\u51fa\u4e00\u6b21\u64cd\u4f5c\u4e4b\u540e \\(\\sum\\limits_{i=1}^n a_i\\) \u7684\u6700\u5927\u503c\u3002 by @zfx1569_HCl_2023 \u7b56\u7565\u662f\u663e\u7136\u7684\uff0c\u679a\u4e3e\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u8ba1\u7b97\u7b54\u6848\u5373\u53ef Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 1e5 + 10 ; int a [ si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { int n ; cin >> n ; int sum = 0 ; int ans = -0x3f3f3f3f ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], sum += a [ i ]; for ( int i = 1 ; i < n ; ++ i ) { int x = a [ i ], y = a [ i + 1 ]; int tmp = sum - x - y ; x *= -1 , y *= -1 ; tmp += x + y ; ans = max ( ans , tmp ); } cout << ans << endl ; } return 0 ; } // ()()()(?","title":"CF1778A - Flip Flop Sum"},{"location":"rec/atcf-for-2023-01-02/#cf1778b-the-forbidden-permutation","text":"\u7ed9\u5b9a \\(3\\) \u4e2a\u6574\u6570 \\(n,m,d\\) \u3001\u4e00\u4e2a \\(n\\) \u7684\u6392\u5217 \\(p\\) \u548c\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(m\\) \u7684\u6570\u7ec4 \\(a\\) \uff0c\u5b9a\u4e49 \\(\\mathrm{pos}(x)\\) \u4e3a \\(p\\) \u4e2d \\(x\\) \u7684\u4e0b\u6807\u3002 \u6570\u7ec4 \\(a\\) \u662f\u4e0d\u597d\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u5bf9\u4e8e\u6240\u6709 \\(1\\le i<m\\) \uff0c\u6709 \\(\\mathrm{pos}(a_i)<\\mathrm{pos}(a_{i+1})\\le\\mathrm{pos}(a_i)+d\\) \u3002 \u6bcf\u4e00\u6b21\u64cd\u4f5c\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9 \\(p\\) \u4e2d\u7684\u4e24\u4e2a\u76f8\u90bb\u6570\u5b57\u5e76\u628a\u5b83\u4eec\u4ea4\u6362\uff0c\u6c42\u6700\u5c0f\u7684\u64cd\u4f5c\u6b21\u6570\uff0c\u4f7f\u5f97 \\(a\\) \u53d8\u4e3a\u597d\u7684\u3002 by @zfx1569_HCl_2023 \u8bfb\u9898\u8981\u4ed4\u7ec6\u4e00\u70b9\uff0cnot good \u7684\u6761\u4ef6\u662f\u5bf9\u4e8e\u6240\u6709 \\(i\\) \u90fd\u6709\u9898\u9762\u4e2d\u7684\u6761\u4ef6\u6210\u7acb\u3002 \u6240\u4ee5\u679a\u4e3e\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u66f4\u65b0\u7b54\u6848\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 1e5 + 10 ; int n , m , d ; int a [ si ], p [ si ], pos [ si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { cin >> n >> m >> d ; for ( int i = 1 ; i <= n ; ++ i ) cin >> p [ i ], pos [ p [ i ]] = i ; for ( int i = 1 ; i <= m ; ++ i ) cin >> a [ i ]; int ans = n , ret = 0 ; bool f = false ; for ( int i = 1 ; i < m ; ++ i ) { if ( pos [ a [ i ]] < pos [ a [ i + 1 ]] && pos [ a [ i + 1 ]] <= pos [ a [ i ]] + d ) { ans = min ( ans , pos [ a [ i + 1 ]] - pos [ a [ i ]]); if ( n - 1 > d ) ret = max ( ret , pos [ a [ i + 1 ]] - pos [ a [ i ]]); f = true ; } else { f = false ; break ; } } if ( ! f ) cout << \"0\" << endl ; else cout << min ( ans , ( d - ret ) + 1 ) << endl ; } return 0 ; } // ()()()(?","title":"CF1778B - The Forbidden Permutation"},{"location":"rec/atcf-for-2023-01-02/#cf1778c-flexible-string","text":"\u5bf9\u4e8e\u957f\u5ea6\u4e3a \\(n\\) \u7684 \\(a\\) , \\(b\\) \u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c \\(a\\) \u521d\u59cb\u6700\u591a\u542b\u6709 \\(10\\) \u4e2a\u4e0d\u540c\u5b57\u6bcd\u3002\u4f60\u53ef\u4ee5\u9009\u62e9\u81f3\u591a \\(k\\) \u4e2a\u4e0d\u540c\u5b57\u6bcd\uff0c\u5c06 \\(a\\) \u4e2d\u7684\u8fd9\u4e9b\u5b57\u6bcd\u66ff\u6362\u4e3a\u4efb\u610f\u5b57\u6bcd\u3002 \u4f60\u9700\u8981\u6c42\u51fa\u7ecf\u8fc7\u4e0a\u8ff0\u64cd\u4f5c\u540e\uff0c \\(a,b\\) \u76f8\u540c\u4f4d\u7f6e\u4e14\u76f8\u540c\u5b57\u6bcd\u7684\u5b50\u4e32\u5c3d\u53ef\u80fd\u591a\u3002 \u6570\u636e\u8303\u56f4\uff1a \\(1 \\le t \\le 10^4,1 \\le n \\le 10^5,0 \\le k \\le 10\\) \u3002 \u6ce8\u610f\u5230\u7ed9\u5b9a\u7684 \\(a\\) \u7684 \\(|\\Sigma| \\le 10\\) \uff0c\u6240\u4ee5\u53ef\u4ee5\u66b4\u529b\u679a\u4e3e\u6bcf\u4e00\u79cd\u5b57\u7b26\u9009\u4e0d\u9009\u7684\u60c5\u51b5\u3002 \u7136\u540e\u66b4\u529b check \u5c31\u53ef\u4ee5\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 // author : black_trees #include <cmath> #include <cstdio> #include <vector> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 30 ; int n , q ; string a , b ; int ctt [ si ], re [ si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { memset ( ctt , 0 , sizeof ctt ); cin >> n >> q ; cin >> a >> b ; a = ' ' + a , b = ' ' + b ; int clz = 0 ; for ( int i = 1 ; i <= n ; ++ i ) ctt [ a [ i ] - 'a' + 1 ] ++ ; for ( int i = 1 ; i <= 26 ; ++ i ) if ( ctt [ i ]) ++ clz , re [ i ] = clz - 1 ; // cout << clz << endl; q = min ( q , clz ); i64 ans = -1 ; // cout << q << endl; std :: vector < int > opt ; for ( int msk = 0 ; msk < ( 1 << clz ); ++ msk ) if ( __builtin_popcount ( msk ) == q ) opt . emplace_back ( msk ); for ( auto msk : opt ) { if ( __builtin_popcount ( msk ) == q ) { string tmp = a ; for ( int i = 1 ; i <= n ; ++ i ) if ( msk >> re [ tmp [ i ] - 'a' + 1 ] & 1 ) tmp [ i ] = b [ i ]; // cout << tmp << endl; i64 cnt = 0 , sum = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { if ( tmp [ i ] == b [ i ]) cnt ++ ; else { sum += cnt * ( cnt + 1 ) / 2 ; cnt = 0 ; } if ( i == n ) sum += cnt * ( cnt + 1 ) / 2 ; } ans = max ( ans , sum ); } } cout << ans << endl ; } return 0 ; } // ()()()(?","title":"CF1778C - Flexible String"},{"location":"rec/atcf-for-2023-01-02/#cf1778d-flexible-string-revisit","text":"\u7ed9\u51fa\u4e24\u4e2a\u957f\u5ea6\u5747\u4e3a \\(n(n\\leq 10^6)\\) \u7684 01 \u4e32 \\(S\\) \u548c \\(T\\) \u6bcf\u6b21\u968f\u673a\u5c06 \\(S\\) \u4e2d\u7684\u67d0\u4e00\u4f4d\u53d6\u53cd \u95ee\uff1a\u7b2c\u4e00\u6b21 \\(S = T\\) \u65f6\u64cd\u4f5c\u6b21\u6570\u7684\u671f\u671b \u4e00\u4e2a\u5f88\u7ecf\u5178\u7684\u671f\u671b dp \u5957\u8def\uff0c\u662f\u4e00\u79cd\u6bd4\u8f83\u597d\u73a9\u7684\u5904\u7406\u540e\u6548\u6027\u7684\u5957\u8def\u3002 \u8003\u8651\u8bbe \\(dp(i)\\) \u8868\u793a\u7531 \\(i\\) \u4e2a\u4f4d\u7f6e\u4e0d\u540c\u53d8\u5230 \\(i - 1\\) \u7684\u671f\u671b\u4ee3\u4ef7\uff0c\u4e5f\u5c31\u662f\u76f4\u63a5\u53ea\u7b97\u6bcf\u4e00\u6b65\uff0c\u6700\u540e\u7b97\u7b54\u6848\u76f4\u63a5 \\(\\sum\\limits_{i = 1}^k dp(i)\\) \u5373\u53ef\u3002 \u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u6709\u53ef\u80fd\u76f4\u63a5\u4e00\u6b65\u5230\u4f4d\uff0c\u4e5f\u6709\u53ef\u80fd\u5148\u53d8\u6210 \\(dp(i + 1)\\) \u518d\u53d8\u56de\u6765\u3002 \u6240\u4ee5 \\(dp(i) = \\dfrac{n - i}{n}(dp(i) + dp(i + 1) + 1) + \\dfrac{i}{n}\\) \uff0c\u8fd9\u91cc\u6bd4\u8f83\u53cd\u5e38\uff0c\u81ea\u5df1\u7684\u72b6\u6001\u91cc\u8fd8\u5305\u542b\u81ea\u5df1\uff0c\u4e0d\u8fc7\u6ca1\u5173\u7cfb\u3002 \u6211\u4eec\u76f4\u63a5\u79fb\u9879\uff1a \\(\\dfrac{i}{n}dp(i) = 1 + \\dfrac{n - i}{n}dp(i + 1) \\iff dp(i) = \\dfrac{n}{i} + \\dfrac{n - i}{i}dp(i + 1)\\) \u3002 \u597d\uff0c\u7136\u540e\u505a\u5b8c\u4e86\u3002 \u8fd9\u4e48\u505a\u7684\u539f\u56e0\u662f\uff0c\u56e0\u4e3a\u72b6\u6001\u53ef\u80fd\u8f6c\u79fb\u8fc7\u53bb\u8fd8\u8f6c\u79fb\u56de\u6765\uff0c\u4f46\u662f\u53d1\u73b0\u8f6c\u79fb\u7684\u533a\u95f4\u662f\u6709\u9650\u7684\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u62c6\u5206\u95ee\u9898\uff0c\u53ea\u9700\u8981\u8003\u8651\u6bcf\u4e00\u4e2a\u5c0f\u90e8\u5206\u7684\u7b54\u6848\u6700\u540e\u5408\u5e76\u5373\u53ef\u3002 \u601d\u8003\u8fd9\u79cd dp \u7684\u65f6\u5019\u4e0d\u80fd\u88ab\u201c\u4e00\u5b9a\u8981\u627e\u5230\u4e00\u4e2a\u53e6\u5916\u4e00\u5c42\u7684\u72b6\u6001\u6765\u8868\u793a\u8fd9\u4e2a\u72b6\u6001\u201d\u8fd9\u6837\u7684\u5957\u8def\u9650\u5236\uff0c\u8981\u76f4\u63a5\u6839\u636e\u5b9a\u4e49\u5199\u51fa\u6765\uff0c\u540e\u6548\u6027\u53ef\u4ee5\u79fb\u9879\u5904\u7406\u3002 \u8fd9\u79cd\u5e94\u8be5\u5728\u671f\u671b dp \u91cc\u9762\u6bd4\u8f83\u5e38\u89c1\uff0c\u5c31\u662f\u56e0\u4e3a\u662f\u5bf9\u5e8f\u5217\u6574\u4f53\u968f\u673a\u9009\uff0c\u6240\u4ee5\u76f4\u63a5\u7ebf\u6027 dp \u505a\u4e0d\u4e86\uff0c\u4e0d\u7136\u72b6\u538b\u4e0d\u7136\u5c31\u8fd9\u6837\u62c6\u5206\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 // author : black_trees #include <cmath> #include <cstdio> #include <cassert> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; using ldb = long double ; using u64 = unsigned long long ; constexpr i64 safe_mod ( i64 x , i64 m ) { return x %= m , x < 0 ? x + m : x ; } constexpr i64 pow_mod_constexpr ( i64 x , i64 n , int m ) { if ( m == 1 ) return 0 ; unsigned _m = m ; uint64_t r = 1 , _x = safe_mod ( x , m ); for (; n ; n >>= 1 , _x = _x * _x % _m ) if ( n & 1 ) r = r * _x % m ; return r ; } constexpr bool is_prime_constexpr ( int n ) { if ( n <= 1 ) return false ; if ( n == 2 || n == 7 || n == 61 ) return true ; if ( n % 2 == 0 ) return false ; i64 d = n - 1 ; while ( ~ d & 1 ) d /= 2 ; for ( i64 a : { 2 , 7 , 61 }) { i64 t = d , y = pow_mod_constexpr ( a , t , n ); while ( t != n - 1 && y != 1 && y != n - 1 ) y = y * y % n , t <<= 1 ; if ( y != n - 1 && t % 2 == 0 ) return false ; } return true ; } constexpr pair < i64 , i64 > inv_gcd ( i64 a , i64 b ) { a = safe_mod ( a , b ); if ( a == 0 ) return { b , 0 }; i64 s = b , t = a , m0 = 0 , m1 = 1 ; while ( t ) { i64 u = s / t ; s -= t * u , m0 -= m1 * u ; i64 tmp = s ; s = t , t = tmp , tmp = m0 , m0 = m1 , m1 = tmp ; } if ( m0 < 0 ) m0 += b / s ; return { s , m0 }; } struct Barrett_Reduction { unsigned m ; uint64_t im ; Barrett_Reduction ( unsigned m ) : m ( m ), im ( ~ 0ull / m + 1 ) {} unsigned mul ( unsigned a , unsigned b ) const { uint64_t z = ( uint64_t ) a * b , x = ( __uint128_t ) z * im >> 64 ; unsigned v = z - x * m ; return m <= v ? v + m : v ; } }; template < int m > struct static_modint { using _mint = static_modint ; public : static _mint raw ( int v ) { _mint x ; return x . _v = v , x ; } static_modint () : _v ( 0 ) {} template < class __Tp > static_modint ( __Tp v ) { i64 x = v % m ; _v = x < 0 ? x + m : x ; } unsigned val () const { return _v ; } _mint & operator ++ () { if ( ++ _v == m ) _v = 0 ; return * this ; } _mint & operator -- () { if ( ! _v -- ) _v = m - 1 ; return * this ; } _mint operator ++ ( int ) { _mint res = * this ; ++* this ; return res ; } _mint operator -- ( int ) { _mint res = * this ; --* this ; return res ; } _mint & operator += ( const _mint & rhs ) { _v += rhs . _v ; if ( _v >= m ) _v -= m ; return * this ; } _mint & operator -= ( const _mint & rhs ) { _v -= rhs . _v ; if ( _v >= m ) _v += m ; return * this ; } _mint & operator *= ( const _mint & rhs ) { uint64_t z = _v ; z *= rhs . _v , _v = z % m ; return * this ; } _mint & operator /= ( const _mint & rhs ) { return * this = * this * rhs . inv (); } _mint operator + () const { return * this ; } _mint operator - () const { return _mint () - * this ; } _mint pow ( i64 n ) const { assert ( 0 <= n ); _mint x = * this , r = 1 ; for (; n ; n >>= 1 , x *= x ) if ( n & 1 ) r *= x ; return r ; } _mint inv () const { if ( prime ) { assert ( _v ); return pow ( m - 2 ); } else { auto eg = inv_gcd ( _v , m ); assert ( eg . first == 1 ); return eg . second ; } } friend _mint operator + ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) += rhs ; } friend _mint operator - ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) -= rhs ; } friend _mint operator * ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) *= rhs ; } friend _mint operator / ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) /= rhs ; } friend bool operator == ( const _mint & lhs , const _mint & rhs ) { return lhs . _v == rhs . _v ; } friend bool operator != ( const _mint & lhs , const _mint & rhs ) { return lhs . _v != rhs . _v ; } private : unsigned _v ; static constexpr bool prime = is_prime_constexpr ( m ); }; using modint = static_modint < 998244353 > ; const int si = 1e6 + 10 ; modint dp [ si ]; int n , a [ si ], b [ si ]; void init () { } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { init (); cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { char ch ; cin >> ch ; if ( ch == '1' ) a [ i ] = 1 ; else a [ i ] = 0 ; } int cnt = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { char ch ; cin >> ch ; if ( ch == '1' && a [ i ] != 1 ) ++ cnt ; if ( ch == '0' && a [ i ] != 0 ) ++ cnt ; } modint mn = n ; dp [ n ] = 1 , dp [ 0 ] = 0 ; for ( int i = n - 1 ; i >= 0 ; -- i ) { modint trans = n - i ; if ( i != 0 ) dp [ i ] = ( dp [ i + 1 ] * trans + mn ) / i ; } for ( int i = 1 ; i <= n + 1 ; ++ i ) { dp [ i ] = dp [ i - 1 ] + dp [ i ]; } cout << dp [ cnt ]. val () << endl ; } return 0 ; } // ()()()(?","title":"CF1778D - Flexible String Revisit"},{"location":"rec/atcf-for-2023-01-02/#abc288d-range-add-query","text":"\u7ed9\u5b9a\u4e00\u4e2a\u957f\u4e3a \\(N\\) \u7684\u5e8f\u5217\uff0c\u5e38\u6570 \\(k\\) \uff0c \\(M\\) \u6b21\u8be2\u95ee\uff0c\u5224\u65ad \\([l, r]\\) \u5185\u7684\u5b50\u5e8f\u5217\u662f\u5426\u4e3a good \u7684\u3002 \u4e00\u4e2a\u5e8f\u5217\u88ab\u8ba4\u4e3a\u662f good \u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u7528\u4ee5\u4e0b\u64cd\u4f5c\u53ef\u4ee5\u4f7f \u8be5\u5e8f\u5217\u7684\u6240\u6709\u5143\u7d20\u503c\u90fd\u53d8\u4e3a \\(0\\) \u9009\u5b9a\u4e24\u4e2a\u6574\u6570 \\(c\\) , \\(i\\) \uff0c\u4f7f\u533a\u95f4 \\([i, i + k - 1]\\) \u5185\u7684\u5143\u7d20\u540c\u65f6\u51cf\u53bb $c $ \u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\uff0c\u8f93\u51fa \\(\\texttt{Yes}\\) \u6216\u8005 \\(\\texttt{No}\\) \\(N, Q \\le 2e5\\) \u53d1\u73b0\u8fd9\u4e2a\u9898\u662f\u5bf9\u533a\u95f4\u8fdb\u884c\u64cd\u4f5c\u3002 \u6211\u4eec\u5c1d\u8bd5\u89c2\u5bdf\u7b54\u6848\u7684\u5f62\u5f0f\uff0c\u5c31\u662f\u51e0\u4e2a\u957f\u5ea6\u76f8\u7b49\u7684\u533a\u95f4\u8986\u76d6\u4e86\u4e00\u4e0b\u3002 \u6ce8\u610f\u5230\u56e0\u4e3a\u533a\u95f4\u957f\u5ea6\u76f8\u7b49\uff0c\u6240\u4ee5\u8986\u76d6\u4e4b\u540e\u672c\u8d28\u4e0a\u7b49\u4ef7\u4e8e\u4e00\u4e2a\u4ee3\u4ef7\u4e3a\u91cd\u5408\u7684\u533a\u95f4\u6743\u503c\u4e4b\u548c\u7684\u533a\u95f4\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u4e00\u4e2a\u4e00\u4e2a\u4e00\u4e2a \u7aef\u70b9\u4e0d\u91cd\u53e0 \u533a\u95f4\u7684\u60c5\u51b5\u3002 \u5f88\u5bb9\u6613\u60f3\u5230\u8003\u8651\u5dee\u5206\u610f\u4e49\uff0c\u8fd9\u6837\u5c31\u662f\u8ba9\u4e00\u4e2a\u5b50\u4e32\u7684\u5dee\u5206\u6570\u7ec4\u5168\u90e8\u53d8\u6210\u96f6\uff0c\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u64cd\u4f5c\u4e24\u4e2a\u7ec4\u6210\u4e86\u957f\u5ea6\u4e3a \\(k + 1\\) \u7684\u533a\u95f4\u7684\u70b9\u3002 \u53ef\u4ee5\u8003\u8651\u628a\u4ed6\u4eec\u5206\u6210\u591a\u4e2a\u540c\u4f59\u7c7b\uff0c\u90a3\u4e48\u95ee\u9898\u7b49\u4ef7\u4e8e\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u540c\u4f59\u7c7b\u5185\u76f8\u90bb\u7684\u4e24\u4e2a\u6570\u64cd\u4f5c\uff0c\u663e\u7136\u9700\u8981\u5dee\u5206\u610f\u4e49\u4e0b\u6bcf\u4e2a\u540c\u4f59\u7c7b\u5185\u7684\u548c\u4e3a 0\uff0c\u4e0d\u8fc7\u9700\u8981\u7279\u6b8a\u8003\u8651\u4e24\u4e2a\u7aef\u70b9\uff0c\u56e0\u4e3a \\(r + 1\\) \u5e76\u4e0d\u5728\u8003\u8651\u8303\u56f4\u4e4b\u5185\uff0c\u800c\u5982\u679c\u76f4\u63a5\u53d6\u539f\u5e8f\u5217\u5dee\u5206\u8fd9\u4e00\u6bb5\uff0c\u5934\u4e0a\u4e00\u4e2a\u5143\u7d20\u4e0d\u662f\u5bf9\u7684\u3002 \u5982\u679c\u76f4\u63a5\u626b\u590d\u6742\u5ea6\u663e\u7136\u4e0d\u6ee1\u8db3\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5dee\u5206\u4e4b\u540e\u76f4\u63a5\u628a\u6bcf\u4e2a\u540c\u4f59\u7c7b\u7684\u8d21\u732e\u76f8\u4e92\u52a0\u4e00\u4e0b\uff0c\u6700\u540e\u5224\u4e24\u4e2a\u7aef\u70b9\u5c31\u884c\uff0c\u8fd9\u4e2a\u987a\u5e8f\u9700\u8981\u6ce8\u610f\uff0c\u5982\u679c\u626b\u63cf\u5269\u4f59\u7cfb\u7684\u65f6\u5019\u662f\u4ece\u524d\u6765\u7684\uff0c\u4f60\u8981\u5012\u5e8f\u52a0\u8d21\u732e\uff0c\u4e0d\u7136\u5f00\u5934\u4f4d\u7f6e\u7684\u8d21\u732e\u4e0d\u597d\u5904\u7406\uff0c\u590d\u6742\u5ea6 \\(O(Qk)\\) Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 // author : black_trees #include <cmath> #include <cstdio> #include <vector> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int n , k , a [ si ], q ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> k , a [ 0 ] = 0 ; std :: vector < int > c ( n + 2 ), d ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], c [ i ] = a [ i ] - a [ i - 1 ]; cin >> q , d = c ; for ( int i = n ; i >= 1 ; -- i ) { if ( i + k <= n ) d [ i ] += d [ i + k ]; } while ( q -- ) { int l , r ; cin >> l >> r ; bool f = true ; for ( int w = l ; w <= l + k - 1 ; ++ w ) { int mx = w + ( r - w + 1 ) / k * k ; if ( mx != r + 1 ) { f &= ( d [ w ] + (( w == l ) ? a [ l - 1 ] : 0 ) == (( mx + k <= n ) ? d [ mx + k ] : 0 )); } } if ( f ) cout << \"Yes\" << endl ; else cout << \"No\" << endl ; } return 0 ; } // ()()()(? \u8fd9\u9898\u60f3\u7684\u65f6\u5019\u6ca1\u8003\u8651\u8f6c\u5316\u8fc7\u540e\u7684\u518d\u6b21\u8f6c\u5316\uff0c\u60f3\u5230\u8003\u8651\u5dee\u5206\u610f\u4e49\u5c31\u6ca1\u7ee7\u7eed\u8f6c\u5316\u95ee\u9898\u4e86\u3002 \u8fd9\u9898\u5173\u952e\u70b9\u4e4b\u4e00\u6070\u597d\u5c31\u6709\u5728\u5dee\u5206\u610f\u4e49\u4e0a\uff0c\u64cd\u4f5c\u957f\u6210\u4ec0\u4e48\u6837\u3002","title":"ABC288D Range Add Query"},{"location":"rec/atcf-for-2023-01-02/#abc288e-wish-list","text":"\u5546\u5e97\u91cc\u6709 \\(N\\) \u4ef6\u5546\u54c1\uff0c\u6807\u53f7 \\(1\\sim N\\) \uff0c\u7b2c \\(i\\) \u4ef6\u5546\u54c1\u6709 \u5e95\u4ef7 \\(A_i\\) \u4e14\u53ea\u6709\u4e00\u4ef6\u3002 Takahashi \u60f3\u8981\u4e70\u5176\u4e2d\u7684 \\(M\\) \u4ef6\u5546\u54c1\uff0c\u5206\u522b\u662f\u6807\u53f7 \\(X_1,X_2,\\ldots,X_M\\) \u7684\u5546\u54c1\u3002 \u4ed6\u4f1a\u6309\u7167\u4ee5\u4e0b\u7684\u65b9\u5f0f\u4e70\u4e1c\u897f\uff1a \u82e5\u8fd8\u5269 \\(r\\) \u4ef6\u5546\u54c1\u6ca1\u6709\u8d2d\u4e70\u8fc7\uff0c\u9009\u62e9\u4e00\u4e2a\u7b26\u5408 \\(1\\le j\\le r\\) \u7684 \\(j\\) \uff0c\u4ed8\u8fd9\u4ef6\u5546\u54c1\u7684\u5e95\u4ef7\u52a0\u4e0a \\(C_j\\) \u7684\u94b1\u8d2d\u4e70\u5176\u4e2d\u6807\u53f7\u7b2c \\(j\\) \u5c0f\u7684\u5546\u54c1\u3002 \u6c42\u51fa\u4e70\u5230\u4ed6\u60f3\u8981\u7684\u5546\u54c1\u6240\u4ed8\u7684\u6700\u5c0f\u4ef7\u94b1\u3002 \u6ce8\u610f\u4ed6\u4e5f\u53ef\u4ee5\u4e70\u4e0d\u60f3\u8981\u7684\u5546\u54c1\u3002 \\(1\\le M\\le N\\le 5000\\) \uff0c\u503c\u57df \\(1e9\\) . \u770b\u6570\u636e\u8303\u56f4\u731c\u6d4b\u5e94\u8be5\u662f\u4e00\u4e2a \\(O(n^2)\\) \u7684 dp \u6216\u8005\u8d2a\uff0c\u53ef\u80fd\u5c31\u662f\u8981\u5bf9\u6bcf\u4e2a\u4f4d\u7f6e\u679a\u4e3e\u4e00\u4e0b\u3002 \u5148\u62bd\u8c61\u4e00\u4e0b\u95ee\u9898\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u8ba9\u4f60\u9009\u51fa\u4e00\u4e2a\u7ed9\u5b9a\u96c6\u5408\u7684\u8d85\u96c6\uff0c\u4f7f\u5f97\u9009\u51fa\u8fd9\u4e2a\u8d85\u96c6\u7684\u4ee3\u4ef7\u6700\u5c0f\u3002 \u6709\u4e00\u79cd\u60f3\u6cd5\u662f\u6807\u8bb0\u6709\u6ca1\u6709\u88ab\u9009\uff0c\u8fd9\u4e2a\u662f\u4e0d\u73b0\u5b9e\u7684\u3002 \u53d1\u73b0\u95ee\u9898\u6700\u56f0\u96be\u7684\u5730\u65b9\u5176\u5b9e\u5c31\u5728\u4e8e\uff0c\u4f60\u5bf9\u4e8e\u4e00\u4e2a\u7269\u54c1\uff0c\u4f60\u4e0d\u592a\u80fd\u5f88\u597d\u7684\u77e5\u9053\u5b83\u5728\u4ec0\u4e48\u65f6\u5019\u5728\u4ec0\u4e48\u4f4d\u7f6e\u4e0a\uff0c\u5e94\u8be5\u600e\u4e48\u51b3\u7b56\u3002 \u6240\u4ee5\u6211\u4eec\u60f3\u8981\u94a6\u5b9a \\(i\\) \u5728\u7b2c\u51e0\u4e2a\u4f4d\u7f6e\u9009\uff0c\u6216\u8005\u662f\u627e\u51fa\u4e4b\u524d\u9009\u4e86\u54ea\u4e9b\uff0c\u53c8\u6216\u8005\u662f\u8003\u8651\u80fd\u4e0d\u80fd\u5904\u7406\u6389\u4e4b\u524d\u7684\u5f71\u54cd\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u6211\u4eec\u9009\u4e86\u6bd4 \\(i\\) \u4f4d\u7f6e\u66f4\u9760\u540e\u7684\u7269\u54c1\uff0c\u5bf9 \\(i\\) \u7684\u51b3\u7b56\u662f\u6ca1\u6709\u5f71\u54cd\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651 \\(i\\) \u524d\u9762\u9020\u6210\u7684\u5f71\u54cd\uff0c\u4e8e\u662f\u6211\u4eec\u8bb0\u4e00\u4e0b\u524d\u9762\u9009\u4e86\u591a\u5c11\u4e2a\u5c31\u884c\uff0c\u7136\u540e dp \u7684\u9636\u6bb5\u5c31\u51fa\u6765\u4e86\u3002 \u6240\u4ee5\u8bbe \\(dp(i, j)\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\u4f4d\u7f6e\uff0c\u5df2\u7ecf\u9009\u4e86 \\(j\\) \u4e2a\uff0c\u4e14 \\(1 \\sim i\\) \u4e2d\u6240\u6709\u9700\u8981\u9009\u7684\u6570\u90fd\u5df2\u7ecf\u9009\u4e0a\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002 \u8f6c\u79fb\u4e5f\u5f88\u65b9\u4fbf\uff0c\u8003\u8651\u5f53\u524d\u4f4d\u7f6e\u9009\u6216\u8005\u4e0d\u9009\u5373\u53ef\uff0c\u9009\u7684\u8bdd\u8f6c\u79fb\u76f4\u63a5\u53d6 \\(\\min\\limits_{k = i - j + 1}^i c_k\\) \u5c31\u884c\u3002 \u7136\u540e\u7b54\u6848\u662f \\(\\min\\limits_{i=m}^ndp(n, i)\\) \uff0c\u521d\u59cb\u5316 \\(dp(i,0)=0\\) \uff0c\u5176\u5b83 \\(+\\infty\\) \u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; #define int long long const int si = 5e3 + 10 ; const int inf = 0x3f3f3f3f3f3f3f3f ; int n , m , a [ si ], c [ si ]; bool b [ si ]; int dp [ si ][ si ], cost [ si ][ si ]; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> m ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; for ( int i = 1 ; i <= n ; ++ i ) cin >> c [ i ]; for ( int i = 1 , x ; i <= m ; ++ i ) cin >> x , b [ x ] = true ; for ( int l = 1 ; l <= n ; ++ l ) { cost [ l ][ l ] = c [ l ]; for ( int r = l + 1 ; r <= n ; ++ r ) { cost [ l ][ r ] = min ( cost [ l ][ r - 1 ], c [ r ]); } } memset ( dp , 0x3f , sizeof dp ); for ( int i = 0 ; i <= n ; ++ i ) dp [ i ][ 0 ] = 0 ; int cnt = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = cnt ; j <= i ; ++ j ) { if ( j != cnt ) dp [ i ][ j ] = min ( dp [ i ][ j ], dp [ i - 1 ][ j - 1 ] + a [ i ] + cost [ i - j + 1 ][ i ]); if ( b [ i ] == false ) dp [ i ][ j ] = min ( dp [ i - 1 ][ j ], dp [ i ][ j ]); } if ( b [ i ]) ++ cnt ; } int ans = inf ; for ( int i = m ; i <= n ; ++ i ) ans = min ( ans , dp [ n ][ i ]); cout << ans << endl ; return 0 ; } // ()()()(? \u8fd9\u9898\u8003\u8651\u7684\u65f6\u5019\u53ea\u8003\u8651\u5230\u4e86\u600e\u4e48\u6d88\u9664\u8fd9\u4e2a\u5f71\u54cd\uff0c\u60f3\u5230\u4e86\u8bb0\u5f55\u5f53\u524d\u9009\u4e86\u591a\u5c11\u4e2a\uff0c\u4f46\u662f\u6ca1\u6709\u6e05\u6670\u7684\u60f3\u5230\u8fd9\u4e2a\u201c\u6ca1\u6709\u5f71\u54cd\u201d\u7684\u89c2\u5bdf\uff0c\u4e8e\u662f\u8bbe\u8ba1\u4e0d\u51fa\u72b6\u6001\u3002 \u56e0\u4e3a\u5361\u6b7b\u4e4b\u540e\u5e76\u6ca1\u6709\u56de\u9000\u8003\u8651\u8fd9\u4e2a\u72b6\u6001\u54ea\u91cc\u51fa\u4e86\u95ee\u9898\uff0c\u9700\u6c42\u662f\u4ec0\u4e48\uff0c\u600e\u4e48\u89e3\u51b3\u3002","title":"ABC288E Wish List"},{"location":"rec/atcf-for-2023-01-02/#abc288f-integer-division","text":"\u7ed9\u5b9a\u4e00\u4e2a \\(n\\) \u4f4d\u6570 \\(X\\) \uff0c\u628a \\(X\\) \u5206\u6210\u82e5\u5e72\u6bb5\uff0c\u5f97\u5206\u4e3a\u6bcf\u4e00\u6bb5\u7684\u4e58\u79ef\uff08\u53ef\u4ee5\u4e0d\u5206\u5272\uff0c\u5f97\u5206\u4e3a \\(X\\) \uff09\u3002\u6c42\u6240\u6709\u5206\u6cd5\u5f97\u5206\u4e4b\u548c\uff0c\u6a21 \\(998244353\\) \u3002 Translate by xionglangqi \u6ce8\u610f\u5230\u8fd9\u4e2a\u9898\u662f\u5bf9\u4e8e\u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u6c42\u4ee3\u4ef7\u4e4b\u548c\u3002 \u5957\u8def\u5730\uff0c\u6211\u4eec\u4e0d\u8003\u8651\u66b4\u529b\u7b97 \\(f\\) \uff0c\u800c\u662f\u8003\u8651\u600e\u4e48\u786e\u5b9a\u8d21\u732e\u3002 \u5148\u76f4\u63a5\u89c2\u5bdf \\(f(X)\\) \u5728\u7ed9\u5b9a \\(X\\) \u7684\u60c5\u51b5\u4e0b\u600e\u4e48\u7b97\uff0c\u5c31\u76f4\u63a5\u6309\u7740\u8fd9\u4e2a\u5206\u5272\u4e00\u4e0b\u5c31\u53ef\u4ee5\u3002 \u6ce8\u610f\u5230\u8fd9\u4e2a\u4e1c\u897f\u5e76\u4e0d\u5b58\u5728\u660e\u663e\u7684\u57fa\u5e95\u53ef\u4ee5\u7528\u6765\u8ba1\u7b97\uff0c\u53d1\u73b0\u505a\u6cd5\u8981\u6c42 \\(O(n)\\) \uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e00\u4f4d\u4e00\u4f4d\u9012\u63a8\u3002 \u4e5f\u5c31\u662f\u8003\u8651\u600e\u4e48\u4ece \\(1\\sim n - 1\\) \u8fd9\u4e2a\u5b50\u4e32\u7684\u72b6\u6001 \\(\\sum f_{n - 1}(X)\\) \u8f6c\u79fb\u5230 \\(\\sum f_n(X)\\) \u3002 \u5f88\u663e\u7136\u5c31\u8003\u8651\u7b2c \\(i\\) \u4f4d\u4f1a\u505a\u4ec0\u4e48\u8d21\u732e\uff0c\u663e\u7136\u53ef\u4ee5\u4e58\u6cd5\u5206\u914d\u5f8b\u4e00\u4e0b\uff0c\u518d\u52a0\u4e0a\u4e00\u4e2a \\(\\times 10\\) \u7684\u8d21\u732e\uff1a \\(dp(i) = 10 * dp(i - 1) + a(i) \\times \\sum\\limits_{j = 1}^{i - 1} dp(j)\\) \u3002 \u540e\u9762\u90a3\u5768\u524d\u7f00\u548c\u8bb0\u4e00\u4e0b\u5c31\u884c\uff0c\u590d\u6742\u5ea6 \\(O(n)\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; #define int long long const int si = 2e5 + 10 ; const int mod = 998244353 ; int n , a [ si ]; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); string s ; cin >> n , cin >> s ; for ( int i = 1 ; i <= n ; ++ i ) { a [ i ] = ( int )( s [ i - 1 ] - '0' ); } int ans = 0 , sum = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { ( ans *= 10l l ) %= mod ; ( ans += ( 1l l * sum * a [ i ])) %= mod ; ( sum += ans % mod ) %= mod ; } cout << ans << endl ; return 0 ; } // ()()()(? \u8fd9\u9898\u5f88\u5957\u8def\uff0c\u60f3\u7684\u65f6\u5019\u5728\u5206\u914d\u5f8b\u90a3\u4e2a\u5730\u65b9\u7565\u5fae\u5361\u4e86\u4e00\u4e0b\uff0c\u539f\u56e0\u53ef\u80fd\u662f\u56e0\u4e3a\u5f53\u65f6\u5fc3\u60c5\u6bd4\u8f83\u6d6e\u8e81\u3002","title":"ABC288F Integer Division"},{"location":"rec/atcf-for-2023-01-02/#abc289d-step-up-robot","text":"\u7b80\u5355\u5783\u573e\u9898\uff0c\u4e0d\u8bf4\u4e86\u3002","title":"ABC289D Step Up Robot"},{"location":"rec/atcf-for-2023-01-02/#abc289e-swap-places","text":"\u7ed9\u5b9a\u4e00\u4e2a \\(n\\) \u4e2a\u70b9 \\(m\\) \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u70b9\u6709\u70b9\u6743\uff0c\u503c\u53ef\u4ee5\u4e3a \\(0\\) \u6216 \\(1\\) \u3002\u4e24\u4e2a\u4eba\u5206\u522b\u5728\u70b9 \\(1\\) \u548c \\(n\\) \uff0c\u6bcf\u6b21\u4ed6\u4eec\u540c\u65f6\u5411\u81ea\u5df1\u8fd9\u4e2a\u7ed3\u70b9\u7684\u4efb\u610f\u4e00\u4e2a\u90bb\u5c45\u79fb\u52a8\uff0c\u4efb\u610f\u65f6\u523b\uff0c\u4ed6\u4eec\u6240\u5728\u7684\u7ed3\u70b9\u7684\u6743\u503c\u4e0d\u5f97\u76f8\u540c\u3002\u6700\u540e\u8981\u4f7f\u5f97\u4ed6\u4eec\u4e92\u76f8\u4ea4\u6362\u4f4d\u7f6e\u3002\u8f93\u51fa\u6700\u5c0f\u6b21\u6570\u6216\u8f93\u51fa\u65e0\u89e3\u3002 \\(n,m\\le2\\times10^3\\) \u3002 \u4e5f\u6ca1\u5565\u597d\u8bf4\u7684\uff0c\u5176\u5b9e\u5c31\u662f\u56e0\u4e3a\uff0c\u76f4\u63a5\u627e\u4e0d\u597d\u505a\uff0c\u6211\u4eec\u5bf9\u6bcf\u4e2a\u8282\u70b9\u8bbe\u4e00\u4e2a\u72b6\u6001\u88c5\u4e00\u4e0b\u9650\u5236\uff0c\u53e6\u5916\u4e00\u4e2a\u9650\u5236\u5728\u8f6c\u79fb\u7684\u65f6\u5019\u8868\u8fbe\u5c31\u884c\u3002 \u8f6c\u79fb\u53ef\u4ee5\u5229\u7528 bfs \u505a\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 // author : black_trees #include <cmath> #include <queue> #include <tuple> #include <cstdio> #include <vector> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 2e3 + 10 ; int n , m ; int tot = 0 , head [ si ]; struct Edge { int ver , Next ; } e [ si << 1 ]; inline void add ( int u , int v ) { e [ tot ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot ++ ; } int c [ si ]; int dp [ si ][ si ]; std :: queue < std :: tuple < int , int , int >> q ; void Init () { tot = 0 ; memset ( head , -1 , sizeof head ); while ( q . size ()) q . pop (); memset ( dp , -1 , sizeof dp ); } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { Init (); cin >> n >> m ; for ( int i = 1 ; i <= n ; ++ i ) { cin >> c [ i ]; } for ( int i = 1 ; i <= m ; ++ i ) { int u , v ; cin >> u >> v ; add ( u , v ), add ( v , u ); } q . push ( make_tuple ( 0 , 1 , n )); while ( ! q . empty ()) { auto [ dis , u , v ] = q . front (); q . pop (); if ( dp [ u ][ v ] != -1 ) continue ; dp [ u ][ v ] = dis ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { for ( int j = head [ v ]; ~ j ; j = e [ j ]. Next ) { if ( c [ e [ i ]. ver ] != c [ e [ j ]. ver ]) q . push ( make_tuple ( dis + 1 , e [ i ]. ver , e [ j ]. ver )); } } } cout << dp [ n ][ 1 ] << endl ; } return 0 ; } // ()()()(? \u8fd9\u9898\u60f3\u7684\u65f6\u5019\u7eaf\u5c5e\u667a\u969c\u4e86\uff0c\u7b80\u5355 dp \u6a21\u578b\u4e0d\u4f1a\u3002","title":"ABC289E Swap Places"},{"location":"rec/atcf-for-2023-01-02/#abc289f-teleporter-takahashi","text":"\u5728\u5750\u6807\u7cfb\u4e2d\u6709\u4e00\u4e2a\u8d77\u59cb\u70b9 \\((s_x,s_y)\\) \u548c\u4e00\u4e2a\u77e9\u5f62 \\(\\{(x,y)|a-0.5\\le x\\le b+0.5,c-0.5\\le x\\le d+0.5\\}\\) \uff0c\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u9009\u4e2d\u4e00\u4e2a\u77e9\u5f62\u5185\u7684\u6574\u70b9\u5e76\u628a\u5f53\u524d\u70b9\u79fb\u5230\u4e0e\u8be5\u70b9\u5bf9\u79f0\u7684\u4f4d\u7f6e\uff0c\u95ee\u80fd\u5426\u5728 \\(10^6\\) \u6b21\u64cd\u4f5c\u4ee5\u5185\u5230\u8fbe\u76ee\u6807\u70b9 \\((t_x,t_y)\\) \u5982\u80fd\u8bf7\u8f93\u51fa Yes \u5e76\u7ed9\u51fa\u4efb\u610f\u4e00\u4e2a\u65b9\u6848\uff0c\u5982\u4e0d\u80fd\u8f93\u51fa No \u7ed9\u51fa\u7684\u6240\u6709\u6a2a\u7eb5\u5750\u6807\u90fd\u662f \\(\\le 2\\times10^5\\) \u7684\u975e\u8d1f\u6574\u6570 \u53ef\u4ee5\u624b\u6413\u6837\u4f8b\u89c2\u5bdf\u5230\u4e00\u4e2a\u5c0f\u5c0f\u7684\u6027\u8d28\u3002 \u5c31\u662f\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4e00\u6bb5\u533a\u95f4 \\([a,b]\\) \uff0c\u76f4\u63a5\u9009 \\((a, y), (a + 1, y)\\) \u4e24\u6b21\uff0c\u5c31\u80fd\u8ba9\u5b83\u5728\u4e00\u4e2a\u65b9\u5411\u4e0a\u524d\u8fdb \\(2\\) \u4e2a\u5355\u4f4d\u3002 \u51cf\u5c0f\u5c31\u53cd\u8fc7\u6765\uff0c\u7136\u540e\u4e24\u4e2a\u7ef4\u5ea6\u7684\u9650\u5236\u53ef\u4ee5\u5957\u8def\u5730\u5206\u5f00\u6765\u505a\u3002 \u7b80\u5355\u5224\u65ad\u4e00\u4e0b\u65e0\u89e3\u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u4e3a\u672c\u9898\u7684\u6570\u636e\u8303\u56f4\u9650\u5236\uff0c\u4fdd\u8bc1\u4e86\u8fd9\u4e2a\u4e0d\u4f1a\u8d85\u9650\u5236\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; int sx , sy ; int tx , ty ; int a , b , c , d ; void Map ( int x , int y ) { sx = x * 2 - sx ; sy = y * 2 - sy ; cout << x << \" \" << y << endl ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> sx >> sy ; cin >> tx >> ty ; cin >> a >> b >> c >> d ; bool even = ( a != b || sx == tx ) && ( c != d || sy == ty ); bool odd = ( a != b || sx + tx == a + b ) && ( c != d || sy + ty == c + d ); bool nsam = (( sx & 1 ) != ( tx & 1 )) || (( sy & 1 ) != ( ty & 1 )); if ( nsam || ( ! even && ! odd )) return cout << \"No\" << endl , 0 ; cout << \"Yes\" << endl ; if ( ! even ) Map ( a , c ); while ( sx < tx ) Map ( a , c ), Map ( a + 1 , c ); while ( sy < ty ) Map ( a , c ), Map ( a , c + 1 ); while ( sx > tx ) Map ( a + 1 , c ), Map ( a , c ); while ( sy > ty ) Map ( a , c + 1 ), Map ( a , c ); return 0 ; } \u8fd9\u4e2a\u5c31\u662f\u6784\u9020\u9898\u91cc\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u601d\u60f3\uff0c\u8003\u5bdf\u6781\u7aef\u8fb9\u754c\u60c5\u51b5\uff0c\u5728\u9650\u5236\u6b21\u6570\u5185\u4e00\u70b9\u4e00\u70b9\u51d1\u51fa\u7b54\u6848\u3002","title":"ABC289F Teleporter Takahashi"},{"location":"rec/atcf-for-2023-01-02/#abc290d-marking","text":"\u6709 \\(n\\) \u4e2a\u6392\u6210\u4e00\u4e2a\u73af\u7684\u683c\u5b50\uff0c\u7f16\u53f7\u4e3a \\(0\\sim n-1\\) \u3002\u73b0\u5728\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c\uff1a \u9009\u62e9 \\(0\\) \u53f7\u683c\u5b50\uff0c\u5c06\u5176\u6253\u4e0a\u6807\u8bb0\u3002 \u9009\u62e9 \\(d\\) \u4e2a\u683c\u5b50\u540e\u7684\u7b2c\u4e00\u4e2a\u5c1a\u672a\u88ab\u6807\u8bb0\u7684\u683c\u5b50 \uff0c\u5c06\u5176\u6253\u4e0a\u6807\u8bb0\u3002 \u91cd\u590d\u6267\u884c\u76f4\u5230\u6240\u6709\u683c\u5b50\u90fd\u88ab\u6253\u4e0a\u6807\u8bb0\u3002 \u4f60\u9700\u8981\u8f93\u51fa\u7b2c \\(k\\) \u6b21\u6807\u8bb0\u7684\u683c\u5b50\u7684\u7f16\u53f7\u3002 \u5171 \\(T\\) \u7ec4\u6570\u636e\u3002 \\(1\\le T\\le 10^5\\) \uff0c \\(1\\le k\\le n\\le10^9\\) \uff0c \\(1\\le d\\le 10^9\\) \u3002 \u2014\u2014 by Register_int \u53ef\u4ee5\u6ce8\u610f\u5230\u4e00\u4e2a\u4e8b\u60c5\u662f\uff0c\u8fd9\u91cc\u5c31\u662f\u7c7b\u4f3c\u54c8\u5e0c\u8868\u7684\u4e00\u4e2a\u8fc7\u7a0b\u3002 \u4e0d\u96be\u60f3\u5230\uff0c\u6211\u4eec\u4f1a\u628a\u539f\u6765\u7684\u65b9\u5757\u6309\u4f4d\u7f6e\u5206\u6210\u591a\u4e2a\u540c\u4f59\u7c7b\uff0c\u4e14\u4ed6\u4eec\u6784\u6210\u5b8c\u5168\u5269\u4f59\u7cfb\u3002 \u6709\u4e00\u4e9b\u540c\u4f59\u7c7b\u957f\u5ea6\u4e0d\u5b8c\u6574\uff0c\u5206\u4e24\u6bb5\u7b97\u4e00\u4e0b\u5c31\u884c\uff0c\u6216\u8005\u53ef\u4ee5\u8003\u8651\u63a8\u4e2a\u5f0f\u5b50\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; void solve ( int n , int d , int k ) { k -- ; int Gcd = n / __gcd ( n , d ); cout << d * k % n + k / Gcd << endl ; } signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; int tt = T ; while ( T -- ) { int n , d , k ; cin >> n >> d >> k ; solve ( n , d , k ); continue ; d %= n ; int len = ceil ( double ( n ) / double ( d )); // \u6bcf\u4e2a\u540c\u4f59\u7c7b\u7684\u957f\u5ea6\u3002 int full = ( double ( n ) / double ( len )); // \u591a\u5c11\u4e2a\u5b8c\u6574\u7684\u5269\u4f59\u7cfb\u3002 int r = n - full , bel ; // belongs to which. if ( k <= full * len ) { bel = ceil ( double ( k ) / double ( len )); k %= len , k = ( k + 1 ) % len ; } else { bel = ceil ( double ( k - ( full * len )) / double ( len - 1 )) + full ; k -= full * len , k %= ( len - 1 ), k = ( k + 1 ) % ( len - 1 ); } // cout << \"Case\" << T - tt << \":\\n\"; bel -- , cout << bel + ( d * k ) << endl ; // cout << \"bel = \" << bel << \" len = \" << len << \" full = \" << full << \" k = \" << k << \" d = \" << d << endl; } return 0 ; } // ()()()(? \u8003\u8651\u7684\u65f6\u5019\u53ea\u8003\u8651\u4e86\u5206\u6bb5\u7684\u62c6\u5206\u505a\u6cd5\uff0c\u6ca1\u60f3\u5230\u600e\u4e48\u76f4\u63a5\u627e\u5230\u4e00\u4e2a\u5f0f\u5b50\u4ee3\u66ff\u95ee\u9898\u3002","title":"ABC290D Marking"},{"location":"rec/atcf-for-2023-01-02/#abc290e-make-it-palindrome","text":"\u5b9a\u4e49\u4e00\u4e2a\u5e8f\u5217 \\(X\\) \u7684\u8d21\u732e \\(f(X)\\) \u4e3a\uff0c\u4fee\u6539 \\(X\\) \u4e2d\u7684\u4e00\u4e9b\u4f4d\u7f6e\uff0c\u4f7f\u5f97 \\(X\\) \u53d8\u4e3a\u56de\u6587\u7684\u6700\u5c0f\u4fee\u6539\u6b21\u6570\u3002 \u5bf9\u7ed9\u5b9a\u7684\uff0c\u957f\u5ea6\u4e3a \\(N\\) \u7684\u5e8f\u5217 \\(A\\) \uff0c\u6c42 \\(A\\) \u7684\u6240\u6709\u5b50\u4e32\u7684\u8d21\u732e\u4e4b\u548c\u3002 \\(1\\le N \\le 2 \\times 10^5, 1\\le A_i \\le N\\) \u3002 Translate by black_trees. \u8fd9\u7c7b\u95ee\u9898\u8fd8\u662f\u90a3\u4e48\u7684\u5957\u8def\u3002 \u6211\u4eec\u8003\u8651\u4ec0\u4e48\u4e1c\u897f\u4f1a\u505a\u51fa\u8d21\u732e\uff0c\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u70b9\u5bf9 \\((i, j),a_i \\not= a_j\\) \u3002 \u8fd9\u4e2a\u4e1c\u897f\u505a\u51fa\u7684\u8d21\u732e\uff0c\u5e94\u8be5\u662f\u94a6\u5b9a \\(i,j\\) \u76f8\u5bf9\u7684\u56de\u6587\u4e32\u7684\u4e2a\u6570\u3002 \u6b63\u7740\u7b97\u4e0d\u592a\u597d\u641e\uff0c\u4e8e\u662f\u6211\u4eec\u53cd\u7740\u7b97\u5c31\u884c\uff0c\u7b97\u6709\u591a\u5c11\u4e0d\u4f1a\u505a\u8d21\u732e\u3002 \u7136\u540e\u968f\u4fbf\u5199\u5199\u5c31\u884c\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 // author : black_trees #include <cmath> #include <cstdio> #include <vector> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int n , a [ si ]; std :: vector < int > pos [ si ]; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n ; int ans = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { cin >> a [ i ]; pos [ a [ i ]]. emplace_back ( i ); } int ret = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { int l = 0 , r = pos [ i ]. size () - 1 ; while ( l < r ) { if ( pos [ i ][ l ] < n - pos [ i ][ r ] + 1 ) ret += ( r - l ) * pos [ i ][ l ], ++ l ; else ret += ( r - l ) * ( n - pos [ i ][ r ] + 1 ), -- r ; } } for ( int i = 1 ; i <= n ; ++ i ) { ans += ( n - i + 1 ) * ( i / 2 ); } cout << ans - ret << endl ; return 0 ; } // ()()()(?","title":"ABC290E Make it Palindrome"},{"location":"rec/atcf-for-2023-01-02/#abc290f-maximum-diameter","text":"\u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u6b63\u6574\u6570\u5e8f\u5217 \\(X=(X_1,X_2,\\cdots,X_n)\\) \uff0c\u5b9a\u4e49 \\(f(X)\\) \u4e3a\uff1a \u5bf9\u4e8e\u6240\u6709\u8282\u70b9\u6570\u91cf\u4e3a \\(n\\) \uff0c\u4e14\u70b9 \\(i\\) \u7684\u5ea6\u6570\u6070\u597d\u4e3a \\(X_i\\) \u7684\u6811\uff0c\u5176\u76f4\u5f84\u7684\u6700\u5927\u503c\u3002\u5982\u4e0d\u5b58\u5728\uff0c\u5219\u503c\u4e3a \\(0\\) \u3002 \u4f60\u9700\u8981\u5bf9\u4e8e\u6240\u6709\u957f\u5ea6\u4e3a \\(n\\) \u7684\u6b63\u6574\u6570\u5e8f\u5217 \\(X\\) \u8ba1\u7b97 \\(f(X)\\) \u7684\u548c\uff0c\u53ef\u4ee5\u8bc1\u660e\u5176\u4e3a\u6709\u9650\u503c\u3002\u7b54\u6848\u5bf9 \\(998244353\\) \u53d6\u6a21\u3002 \\(T\\) \u7ec4\u6570\u636e\u3002 \\(1\\le T\\le2\\times10^5\\) \uff0c \\(2\\le n\\le10^6\\) \u3002 \u2014\u2014 by Register_int \u6211\u4eec\u62ff\u5230\u8fd9\u9898\uff0c\u4ecd\u65e7\u662f\u5957\u8def\u7684\u8003\u8651\u7b97\u8d21\u732e\u3002 \u4f46\u662f\u6ce8\u610f\u5230\u8fd9\u4e2a \\(f(X)\\) \u7684\u5b9a\u4e49\u662f\uff0c\u5bf9\u4e8e\u6240\u6709 \\(X\\) \u80fd\u6784\u9020\u51fa\u7684\u6811\u91cc\uff0c\u6700\u5927\u7684\u76f4\u5f84\uff0c\u76f8\u5f53\u4e8e\u6709\u4e24\u4e2a max \u5957\u5728\u4e00\u8d77\uff0c\u76f4\u63a5\u6c42\u548c\u6362\u65b9\u5f0f\u7b97\u8d21\u732e\u4e0d\u597d\u5904\u7406\u3002 \u6240\u4ee5\u6211\u4eec\u8003\u8651\u89c2\u5bdf\u4e00\u4e0b\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684 \\(X\\) \uff0c \\(f(X)\\) \u5e94\u8be5\u662f\u4ec0\u4e48\u6837\u5b50\u7684\u3002 \u6709\u4e00\u4e2a\u7ed3\u8bba\uff1a\u4efb\u610f\u5408\u6cd5\u7684 \\(X\\) \u5fc5\u7136\u5305\u542b\u81f3\u5c11\u4e24\u4e2a \\(X_i = 1\\) \u7684\u5143\u7d20 \u8fd9\u4e2a\u662f\u663e\u7136\u7684\uff0c\u6781\u7aef\u60c5\u51b5\u5c31\u662f\u4e00\u6761\u94fe\u3002 \u8fd9\u4e2a\u7ed3\u8bba\u542f\u53d1\u6211\u4eec\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5c3d\u91cf\u957f\u7684\u6784\u9020\u51fa\u4e00\u6761\u94fe\u3002 \u505a\u6cd5\u5f88\u7b80\u5355\uff0c\u9009\u4e24\u4e2a \\(X_i = 1\\) \u7684\u70b9\u4f5c\u4e3a\u7aef\u70b9\uff0c\u628a\u6240\u6709 \\(X_i \\not= 1\\) \u7684\u8282\u70b9\u6254\u5230\u4e2d\u95f4\uff0c\u5176\u4ed6\u7684 \\(X_i = 1\\) \u7684\u8282\u70b9\u6302\u5728\u4e2d\u95f4\u5c31\u884c\u3002 \u53ef\u4ee5\u8bc1\u660e\u8fd9\u4e2a\u505a\u6cd5\u662f\u6b63\u786e\u7684\uff1a \u8bc1\u660e\uff1a \u94a6\u5b9a\u6070\u597d\u6709 \\(k\\) \u4e2a \\(X_i = 1\\) \u7684\u8282\u70b9\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u5ea6\u6570\u662f \\(2n - 2 - k\\) \uff08\u7531\u6811\u7684\u6027\u8d28\uff0c\u5ea6\u6570\u4e4b\u548c\u4e3a \\(2n-2\\) \uff09\u3002 \u6211\u4eec\u8003\u8651\u628a\u8fd9\u6761\u94fe\u7684\u5ea6\u6570\u4e5f\u51cf\u53bb\uff0c\u5c31\u662f\u8fd9 \\(n - k\\) \u4e2a\u8282\u70b9\u4e4b\u95f4\u7684 \\(n - k - 1\\) \u6761\u8fb9\u4e58\u4e8c\uff0c\u5728\u52a0\u4e0a\u4e24\u8fb9\u7684 \\(2\\) \u3002 \u90a3\u4e48\u8fd8\u5269\u4e0b\u7684\u5ea6\u6570\u5c31\u662f \\(2n - 2 - k - 2(n - k - 1) - 2 = k\\) \uff0c\u90a3\u6070\u597d\u5c31\u80fd\u6784\u9020\u51fa\u6765\u3002 \u597d\uff0c\u73b0\u5728\u6211\u4eec\u8003\u8651\u8ba1\u6570\uff0c\u6ce8\u610f\u5230\u6392\u5e8f\u8fc7\u540e\u76f8\u7b49\u7684 \\(X\\) \u7684 \\(f(X)\\) \u663e\u7136\u76f8\u7b49\uff0c\u6211\u4eec\u7b97\u4e00\u4e0b\u65b9\u6848\u6570\u5c31\u884c\u3002 \u53ef\u4ee5\u53d1\u73b0\u8ba1\u6570\u7684\u9636\u6bb5\u5e94\u8be5\u662f \\(k\\) \uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u94a6\u5b9a\u67d0\u4e9b\u4f4d\u7f6e\u90fd\u662f \\(1\\) \uff0c\u8fd9\u90e8\u5206\u65b9\u6848\u6570\u662f \\(\\dbinom{n}{k}\\) \uff0c\u5269\u4e0b\u7684\u90e8\u5206\u5c31\u5168\u90e8\u9700\u8981 \\(1\\) \uff0c\u4e14\u6211\u4eec\u8981\u8ba9\u8fd9 \\(n - k\\) \u4e2a \\(X_i\\) \u7684 \\(\\sum = 2n - 2 - k\\) \u3002 \u4e3a\u4e86\u65b9\u4fbf\u76f4\u63a5\u7ed9\u6bcf\u4e2a\u8282\u70b9\u51cf\u53bb \\(2\\) \uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u63d2\u677f\u6cd5\uff0c\u8fd9\u90e8\u5206\u65b9\u6848\u6570\u662f \\(\\dbinom{n - 3}{n - k - 1}\\) \u3002 \u76f4\u5f84\u957f\u5ea6\u4e3a \\(n - k + 1\\) \uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u4e3a \\(\\sum\\limits_{k = 1}^n \\dbinom{n}{k} \\dbinom{n - 3}{n - k - 1}(n - k + 1)\\) \u3002 \u8fd9\u4e2a\u663e\u7136\u4e0d\u884c\uff0c\u6211\u4eec\u63a8\u4e00\u4e0b\u5f0f\u5b50\u3002 \u6ce8\u610f\u5230\u8fd9\u4e2a\u4e1c\u897f\u957f\u7684\u5f88\u50cf\u4e00\u4e2a\u6052\u7b49\u5f0f\uff1a \\(\\sum\\limits_{i = 0}^k\\dbinom{n}{i}\\dbinom{m}{k - i} = \\dbinom{n + m}{k}\\) \uff0c\u8fd9\u4e1c\u897f\u53ef\u4ee5\u76f4\u63a5\u7ec4\u5408\u610f\u4e49\u8bc1\u660e\uff0c\u542c\u8bf4\u4e5f\u53eb\u505a\u8303\u5fb7\u8499\u5fb7\u5377\u79ef\u3002 \u4f46\u662f\u6709\u4e00\u5768 \\(n - k + 1\\) \uff0c\u4e0d\u597d\u5316\uff0c\u53c8\u60f3\u5230\u6709\u4e00\u4e2a\u6052\u7b49\u5f0f\uff1a \\(k\\dbinom{n}{k} = n\\dbinom{n - 1}{n - k}\\) \u53d1\u73b0 \\(n - k + 1\\) \u90a3\u4e00\u5768\u53ef\u4ee5\u62c6\u5f00\u53d8\u6210 \\(n - k - 1\\) \uff0c\u6211\u4eec\u53ef\u4ee5\u628a \\(k\\) \u6d88\u6389\uff0c\u7cfb\u6570\u5199\u5230\u524d\u9762\u3002 \u4e8e\u662f\u6211\u4eec\u5199\u51fa\uff1a \\[ \\sum\\limits_{k = 1}^n \\dbinom{n}{k} \\dbinom{n - 3}{n - k - 1}(n - k + 1) \\iff \\\\ \\sum\\limits_{k = 1}^n \\dbinom{n}{k} \\dbinom{n - 3}{n - k - 1}(n - k - 1) + 2\\sum\\limits_{k = 1}^n\\dbinom{n}{k} \\dbinom{n - 3}{n - k - 1} \\iff \\\\ (n - 3)\\sum\\limits_{k = 1}^n \\dbinom{n}{k} \\dbinom{n - 4}{n - k - 2} + 2\\sum\\limits_{k = 1}^n\\dbinom{n}{k} \\dbinom{n - 3}{n - k - 1} \\] \u6839\u636e\u8303\u5fb7\u8499\u5fb7\u5377\u79ef\u516c\u5f0f\uff0c\u53ef\u4ee5\u5f97\u5230\uff1a \\(ans = (n - 3)\\dbinom{2n - 4}{n - 2} + 2\\dbinom{2n - 3}{n - 1}\\) \u7136\u540e\u5c31\u53ef\u4ee5\u7ebf\u6027\u505a\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 // author : black_trees #include <cmath> #include <cstdio> #include <cassert> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; using ldb = long double ; using u64 = unsigned long long ; constexpr i64 safe_mod ( i64 x , i64 m ) { return x %= m , x < 0 ? x + m : x ; } constexpr i64 pow_mod_constexpr ( i64 x , i64 n , int m ) { if ( m == 1 ) return 0 ; unsigned _m = m ; uint64_t r = 1 , _x = safe_mod ( x , m ); for (; n ; n >>= 1 , _x = _x * _x % _m ) if ( n & 1 ) r = r * _x % m ; return r ; } constexpr bool is_prime_constexpr ( int n ) { if ( n <= 1 ) return false ; if ( n == 2 || n == 7 || n == 61 ) return true ; if ( n % 2 == 0 ) return false ; i64 d = n - 1 ; while ( ~ d & 1 ) d /= 2 ; for ( i64 a : { 2 , 7 , 61 }) { i64 t = d , y = pow_mod_constexpr ( a , t , n ); while ( t != n - 1 && y != 1 && y != n - 1 ) y = y * y % n , t <<= 1 ; if ( y != n - 1 && t % 2 == 0 ) return false ; } return true ; } constexpr pair < i64 , i64 > inv_gcd ( i64 a , i64 b ) { a = safe_mod ( a , b ); if ( a == 0 ) return { b , 0 }; i64 s = b , t = a , m0 = 0 , m1 = 1 ; while ( t ) { i64 u = s / t ; s -= t * u , m0 -= m1 * u ; i64 tmp = s ; s = t , t = tmp , tmp = m0 , m0 = m1 , m1 = tmp ; } if ( m0 < 0 ) m0 += b / s ; return { s , m0 }; } struct Barrett_Reduction { unsigned m ; uint64_t im ; Barrett_Reduction ( unsigned m ) : m ( m ), im ( ~ 0ull / m + 1 ) {} unsigned mul ( unsigned a , unsigned b ) const { uint64_t z = ( uint64_t ) a * b , x = ( __uint128_t ) z * im >> 64 ; unsigned v = z - x * m ; return m <= v ? v + m : v ; } }; template < int m > struct static_modint { using _mint = static_modint ; public : static _mint raw ( int v ) { _mint x ; return x . _v = v , x ; } static_modint () : _v ( 0 ) {} template < class __Tp > static_modint ( __Tp v ) { i64 x = v % m ; _v = x < 0 ? x + m : x ; } unsigned val () const { return _v ; } _mint & operator ++ () { if ( ++ _v == m ) _v = 0 ; return * this ; } _mint & operator -- () { if ( ! _v -- ) _v = m - 1 ; return * this ; } _mint operator ++ ( int ) { _mint res = * this ; ++* this ; return res ; } _mint operator -- ( int ) { _mint res = * this ; --* this ; return res ; } _mint & operator += ( const _mint & rhs ) { _v += rhs . _v ; if ( _v >= m ) _v -= m ; return * this ; } _mint & operator -= ( const _mint & rhs ) { _v -= rhs . _v ; if ( _v >= m ) _v += m ; return * this ; } _mint & operator *= ( const _mint & rhs ) { uint64_t z = _v ; z *= rhs . _v , _v = z % m ; return * this ; } _mint & operator /= ( const _mint & rhs ) { return * this = * this * rhs . inv (); } _mint operator + () const { return * this ; } _mint operator - () const { return _mint () - * this ; } _mint pow ( i64 n ) const { assert ( 0 <= n ); _mint x = * this , r = 1 ; for (; n ; n >>= 1 , x *= x ) if ( n & 1 ) r *= x ; return r ; } _mint inv () const { if ( prime ) { assert ( _v ); return pow ( m - 2 ); } else { auto eg = inv_gcd ( _v , m ); assert ( eg . first == 1 ); return eg . second ; } } friend _mint operator + ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) += rhs ; } friend _mint operator - ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) -= rhs ; } friend _mint operator * ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) *= rhs ; } friend _mint operator / ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) /= rhs ; } friend bool operator == ( const _mint & lhs , const _mint & rhs ) { return lhs . _v == rhs . _v ; } friend bool operator != ( const _mint & lhs , const _mint & rhs ) { return lhs . _v != rhs . _v ; } private : unsigned _v ; static constexpr bool prime = is_prime_constexpr ( m ); }; struct dynamic_modint { using _mint = dynamic_modint ; public : static void set_mod ( int m ) { assert ( 1 <= m ), bt = Barrett_Reduction ( m ); } static _mint raw ( int v ) { _mint x ; return x . _v = v , x ; } dynamic_modint () : _v ( 0 ) {} template < class __Tp > dynamic_modint ( __Tp v ) { i64 x = v % ( int ) bt . m ; _v = x < 0 ? x + bt . m : x ; } unsigned val () const { return _v ; } _mint & operator ++ () { if ( ++ _v == bt . m ) _v = 0 ; return * this ; } _mint & operator -- () { if ( ! _v -- ) _v = bt . m - 1 ; return * this ; } _mint operator ++ ( int ) { _mint res = * this ; ++* this ; return res ; } _mint operator -- ( int ) { _mint res = * this ; --* this ; return res ; } _mint & operator += ( const _mint & rhs ) { _v += rhs . _v ; if ( _v >= bt . m ) _v -= bt . m ; return * this ; } _mint & operator -= ( const _mint & rhs ) { _v += bt . m - rhs . _v ; if ( _v >= bt . m ) _v -= bt . m ; return * this ; } _mint & operator *= ( const _mint & rhs ) { _v = bt . mul ( _v , rhs . _v ); return * this ; } _mint & operator /= ( const _mint & rhs ) { return * this = * this * rhs . inv (); } _mint operator + () const { return * this ; } _mint operator - () const { return _mint () - * this ; } _mint pow ( i64 n ) const { assert ( 0 <= n ); _mint x = * this , r = 1 ; for (; n ; n >>= 1 , x *= x ) if ( n & 1 ) r *= x ; return r ; } _mint inv () const { auto eg = inv_gcd ( _v , bt . m ); assert ( eg . first == 1 ); return eg . second ; } friend _mint operator + ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) += rhs ; } friend _mint operator - ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) -= rhs ; } friend _mint operator * ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) *= rhs ; } friend _mint operator / ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) /= rhs ; } friend bool operator == ( const _mint & lhs , const _mint & rhs ) { return lhs . _v == rhs . _v ; } friend bool operator != ( const _mint & lhs , const _mint & rhs ) { return lhs . _v != rhs . _v ; } private : unsigned _v ; static Barrett_Reduction bt ; }; using modint = dynamic_modint ; using barrett = Barrett_Reduction ; barrett modint :: bt = 998244353l l ; const int si = 2e6 + 10 ; modint fact [ si ]; void Init () { fact [ 0 ] = 1 ; for ( int i = 1 ; i < si ; ++ i ) fact [ i ] = fact [ i - 1 ] * i ; } modint C ( int n , int m ) { if ( m < 0 || n < m ) return 0 ; return fact [ n ] / ( fact [ n - m ] * fact [ m ]); } int solve ( int n ) { return (( n - 3 ) * C ( n * 2 - 4 , n - 2 ) + 2 * C ( 2 * n - 3 , n - 1 )). val (); } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); Init (); int T ; cin >> T ; while ( T -- ) { int n ; cin >> n ; cout << solve ( n ) << endl ; } return 0 ; }","title":"ABC290F Maximum Diameter"},{"location":"rec/atcf-for-2023-01-02/#abc291def","text":"\u8fd9\u4e2a\u592a\u6c34\u4e86\uff0c\u5c31\u4e0d\u5199\u4e86\u3002","title":"ABC291D,E,F"},{"location":"rec/atcf-for-2023-01-02/#abc292def","text":"\u8fd9\u4e2a\u4e5f\u592a\u6c34\u4e86\uff0c\u4e0d\u5199\u4e86\u3002","title":"ABC292D,E,F"},{"location":"rec/atcf-for-2023-03-04/","text":"CFR #857 \u03c8(\uff40\u2207\u00b4)\u03c8 Contest Id: 1801/1802 \u4e45\u8fdd\u7684 div1 2 \u5206\u5f00\u7684\u573a\u3002 Vp \u6253\u4e86 5 \u9898\uff0c\u5f88\u5f00\u5fc3\uff0c\u6709\u70b9\u601d\u8003\u7684\u8ff9\u8c61\u4e86\u3002 2A - Likes \u03c8(\uff40\u2207\u00b4)\u03c8 \u6709\u4e00\u4e9b\u4eba\uff0c\u4ed6\u4eec\u4f1a add likes \u6216\u8005 remove likes\u3002 \u540c\u4e00\u4e2a\u4eba\u7684\u64cd\u4f5c\u7528 \\(x, -x\\) \u6765\u8bb0\u5f55\uff0c\u8868\u793a add \u6216\u8005 remove\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u64cd\u4f5c\u5e8f\u5217\uff0c\u4f60\u53ef\u4ee5 rearrange \u4e00\u4e0b\uff0c\u8981\u4f60\u6c42\u6bcf\u4e2a\u65f6\u523b\uff0c\u6700\u5927\u7684 likes \u548c\u6700\u5c0f\u7684 likes \u6570\u3002 \u8003\u8651\u8bb0\u5f55\u4e00\u4e0b\u6709\u51e0\u4e2a remove likes\u3002 \u7136\u540e\u6700\u5927\u5316\u663e\u7136\u662f\u628a remove likes \u4e22\u5230\u540e\u9762\u3002 \u7136\u540e\u6700\u5c0f\u5316\u5c31\u662f\u5c3d\u91cf\u65e9\u7684 add remove, add remove \u8fd9\u6837\u4ea4\u66ff\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int T , n , a [ si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> T ; while ( T -- ) { cin >> n ; int cnt = 0 ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], cnt += ( a [ i ] < 0 ); for ( int i = 1 ; i <= n - cnt ; ++ i ) { cout << i << \" \" ; } for ( int i = 1 ; i <= cnt ; ++ i ) { cout << n - cnt - i << \" \" ; } cout << endl ; for ( int i = 1 ; i <= cnt ; ++ i ) { cout << 1 << \" \" ; cout << \"0\" << \" \" ; } for ( int i = cnt * 2 + 1 ; i <= n ; ++ i ) { cout << ( i - ( cnt * 2 )) << \" \" ; } cout << endl ; } return 0 ; } 2B - Settlement of Guinea Pigs \u03c8(\uff40\u2207\u00b4)\u03c8 Dasha \u5f88\u559c\u6b22\u8c5a\u9f20\uff0c\u5979\u5728 \\(n\\) \u5929\u5185\u8981\u4e0d\u662f\u4e70\u8c5a\u9f20\uff0c\u8981\u4e0d\u662f\u8bf7\u533b\u751f\u6765\u770b\u8c5a\u9f20\u3002 Dasha \u548c\u5ba0\u7269\u5e97\u90fd\u65e0\u6cd5\u5206\u8fa8\u8c5a\u9f20\u7684\u6027\u522b\uff08\u601d\u8003\u4eba\u751f\uff09\uff0c\u53ea\u80fd\u5728\u533b\u751f\u6765\u67e5\u770b\u8c5a\u9f20\u7684\u65f6\u5019\u4e3a\u8fd9\u4e9b\u8c5a\u9f20\u505a\u6027\u522b\u9274\u5b9a\u3002 \u4e3a\u4e86\u8c5a\u9f20\uff0cDasha \u6253\u7b97\u7ed9\u5b83\u4eec\u4e70\u4e00\u4e9b\u7b3c\u5b50\uff0c\u4f46\u5ba0\u7269\u5e97\u91cc\u5356\u7684\u7b3c\u5b50\u53ea\u80fd\u653e\u6700\u591a \\(2\\) \u53ea\u8c5a\u9f20\u3002\u7531\u4e8e\u5979\u4e0d\u60f3\u8ba9\u5979\u7684\u8c5a\u9f20\u906d\u53d7\u9053\u5fb7\u4f24\u5bb3\uff0c\u4e00\u4e2a\u7b3c\u5b50\u91cc\u53ea\u80fd\u653e\u540c\u4e00\u79cd\u6027\u522b\u7684\u8c5a\u9f20\u3002 \u6c42 Dasha \u6700\u5c11\u9700\u8981\u4e70\u591a\u5c11\u4e2a\u7b3c\u5b50\u3002 \u8fd9\u4e2a\u7ffb\u8bd1\u7531 @ztrztr \u63d0\u4f9b \u611f\u89c9\uff0c\u6ca1\u5565\u597d\u8bf4\u7684\uff0c\u5c31\u517d\u533b\u6765\u4e86\u6700\u4f18\u5206\u914d\uff0c\u5176\u4ed6\u4e00\u4e2a\u4e00\u4e2a\u653e\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { int n ; cin >> n ; int ans = 0 , u = 0 , v = 0 ; for ( int i = 1 , x ; i <= n ; ++ i ) { cin >> x ; if ( u == 0 && x == 2 ) continue ; if ( x == 1 ) u ++ , v ++ ; else u = v / 2 + 1 ; ans = max ( ans , u ); } cout << ans << endl ; } return 0 ; } 1A - The Very Beautiful Blanket \u03c8(\uff40\u2207\u00b4)\u03c8 \u4f60\u9700\u8981\u5bf9\u4e00\u4e2a \\(n\\times m\\) \u7684\u77e9\u9635 \\(B\\) \u586b\u6570\uff0c\u8981\u6c42\u4f60\u6ee1\u8db3\uff0c\u5bf9\u4e8e \\(B\\) \u7684\u4efb\u610f\u4e00\u4e2a \\(4 \\times 4\\) \u7684\u5b50\u77e9\u9635\uff0c\u6ee1\u8db3\u4ee5\u4e0b\u4e24\u4e2a\u6761\u4ef6\uff1a \\(A_{11} \\oplus A_{12} \\oplus A_{21} \\oplus A_{22} = A_{33} \\oplus A_{34} \\oplus A_{43} \\oplus A_{44}\\) \\(A_{13} \\oplus A_{14} \\oplus A_{23} \\oplus A_{24} = A_{31} \\oplus A_{32} \\oplus A_{41} \\oplus A_{42}\\) \\(\\oplus\\) \u8868\u793a\u6309\u4f4d\u6216\uff0c \\(4 \\le n,m \\le 200\\) \uff0c\u8981\u6c42 \\(B_{ij} \\in [0, 2^{63})\\) \u3002 \u9996\u5148\u4e00\u4e2a\u663e\u7136\u7684\u7ed3\u8bba\u662f\uff0c\u4e0d\u540c\u7684\u6570\u7684\u6570\u91cf\u4e00\u5b9a\u662f \\(n \\times m\\) \u3002 \u56e0\u4e3a \\(n,m \\le 200\\) \u561b\u3002 \u7136\u540e\u6211\u4eec\u5c31\u968f\u4fbf\u6784\u9020\u4e00\u4e0b\uff0c\u4e0d\u96be\u53d1\u73b0 \\(a(i, j) = 2^9 + j\\) \u662f\u4e00\u79cd\u6ee1\u8db3\u6761\u4ef6\u7684\u6784\u9020\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { int n ; cin >> n ; int ans = 0 , u = 0 , v = 0 ; for ( int i = 1 , x ; i <= n ; ++ i ) { cin >> x ; if ( u == 0 && x == 2 ) continue ; if ( x == 1 ) u ++ , v ++ ; else u = v / 2 + 1 ; ans = max ( ans , u ); } cout << ans << endl ; } return 0 ; } 1B - Buying gifts \u03c8(\uff40\u2207\u00b4)\u03c8 \u6709 \\(n\\) \u4e2a\u5546\u5e97\uff0c\u5728\u7b2c \\(i\\) \u4e2a\u5546\u5e97\u4f1a\u8fdb\u884c\u4e0b\u9762\u4e24\u4e2a\u64cd\u4f5c\u4e4b\u4e00\uff1a \u4e3a\u670b\u53cb A \u4e70\u793c\u7269\uff0c\u82b1\u8d39 \\(a_i\\) \u5143\u3002 \u4e3a\u670b\u53cb B \u4e70\u793c\u7269\uff0c\u82b1\u8d39 \\(b_i\\) \u5143\u3002 \u6c42\u5728\u6bcf\u4e2a\u5546\u5e97\u8fdb\u884c\u8fc7\u4ee5\u4e0a\u64cd\u4f5c\u540e\uff0c\u670b\u53cb A \u548c B \u83b7\u5f97\u7684\u793c\u7269\u4e2d\u7684\u6700\u5927\u4ef7\u503c\u4e4b\u5dee\u7684\u6700\u5c0f\u503c\u3002 \u6709 \\(t\\) \u7ec4\u6d4b\u8bd5\u6570\u636e\u3002 \u6570\u636e\u8303\u56f4\uff1a \\(1\\le t\\le1000\\) \uff0c \\(2\\le n\\le5\\times 10^5\\) \uff0c \\(0\\le a_i, b_i\\le 10^9\\) \u3002 \u4e5f\u6bd4\u8f83\u5bb9\u6613\uff0c\u5c31\u662f\u6211\u4eec\u53ef\u4ee5\u5148\u89c2\u5bdf\u4e00\u4e0b\uff0c\u770b\u770b\u6709\u6ca1\u6709\u4ec0\u4e48\u6027\u8d28\u3002 \u4f46\u662f\u5176\u5b9e\u4e5f\u6ca1\u6709\u4ec0\u4e48\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u6ca1\u6cd5\u901a\u8fc7 \\(O(1)\\) \u6216\u8005\u662f \\(O(\\log n)\\) \u4e4b\u7c7b\u7684\u65b9\u5f0f\u6765\u56fa\u5b9a\u4e00\u4e9b\u9009\u9879\uff08\u6392\u9664\u4e00\u4e9b\u5197\u6742\u72b6\u6001\uff09\u3002 \u4e8e\u662f\u6211\u4eec\u53ea\u80fd\u8003\u8651 \\(O(n)\\) \u679a\u4e3e\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u8003\u8651\u5b83\u7684\u6700\u4f18\u51b3\u7b56\u662f\u4ec0\u4e48\u3002 \u53d1\u73b0\uff0c\u5982\u679c\u6211\u4eec\u94a6\u5b9a\u4e00\u4e2a\u4f4d\u7f6e \\(i\\) \u662f \\(a\\) \u4e2d\u7684 \\(\\max\\) \uff0c\u90a3\u4e48\u663e\u7136\uff0c\u6240\u6709\u6ee1\u8db3 \\(a(j) > a(i)\\) \u7684 \\(j\\) \u6211\u4eec\u90fd\u4e0d\u9009 \\(a\\) \u800c\u662f\u9009 \\(b\\) \u3002 \u7136\u540e\u6ee1\u8db3 \\(a(k) \\le a(i)\\) \u7684 \\(k\\) \u53ef\u4ee5\u9009\u62e9\u6027\u7684\u9009\u4e00\u4e9b\u4f5c\u4e3a \\(b\\) \u4e2d\u7684\u9009\u9879\uff08\u4e24\u8fb9\u90fd\u53ea\u8981\u5404\u9009\u4e00\u4e2a\u5c31\u884c\uff09\u3002 \u4e8e\u662f \\(b\\) \u8fd9\u8fb9\u7684 \\(\\max\\) \u5c31\u53ef\u4ee5\u4ece \\(\\{b(j)\\}\\) \u6216\u8005 \\(\\max\\{b(k)\\}\\) \u5f53\u4e2d\u6765\uff0c\u6211\u4eec\u8003\u8651\u4e00\u4e0b\uff0c\u540e\u8005\u5fc5\u987b\u53d6\uff0c\u524d\u8005\u5728 \\(b(k) < \\max\\{b(j)\\}\\) \u7684\u6761\u4ef6\u4e0b\u53ef\u80fd\u66f4\u9760\u8fd1 \\(a(i)\\) \u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u4e00\u8fb9 qmax\uff0c\u4e00\u8fb9\u7ebf\u6bb5\u6811\u4e8c\u5206\uff0c\u4f46\u662f\u8fd9\u592a\u590d\u6742\u4e86\uff0c\u6ce8\u610f\u5230\u5176\u5b9e\u8fd9\u91cc\u662f\u53ef\u4ee5\u4e0d\u7ba1\u987a\u5e8f\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u6392\u5e8f\uff0c\u7528\u4e24\u4e2a set \u6216\u8005\u4e00\u4e2a set \u7ef4\u62a4\u4e00\u4e0b\u5c31\u884c\uff08\u4e24\u4e2a\u5c31\u662f\u76f4\u63a5\u7ef4\u62a4\u4e24\u90e8\u5206\uff0c\u4e00\u4e2a\u5c31\u662f\u5148\u4ece\u6700\u5927\u7684\u8003\u8651\uff0c\u5c31\u80fd\u7701\u53bb\u4e00\u4e2a set\u3002\uff09 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 // author : black_trees #include <set> #include <cmath> #include <cstdio> #include <vector> #include <cstring> #include <utility> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 5e5 + 10 ; const int inf = 0x3f3f3f3f ; int n ; std :: multiset < int > s ; std :: vector < std :: pair < int , int >> v ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { cin >> n ; int mi = - inf , ans = inf ; s . clear (), v . clear (); for ( int i = 1 ; i <= n ; ++ i ) { int x , y ; cin >> x >> y ; s . insert ( y ), v . emplace_back ( make_pair ( x , y )); } sort ( v . begin (), v . end ()); reverse ( v . begin (), v . end ()); for ( auto & [ x , y ] : v ) { s . erase ( s . lower_bound ( y )); if ( x <= mi ) ans = min ( ans , mi - x ); else { ans = min ( ans , x - mi ); auto it = s . upper_bound ( x ); if ( it != s . end ()) ans = min ( ans , * it - x ); if ( it != s . begin () && * ( std :: prev ( it )) > mi ) ans = min ( ans , x - * ( std :: prev ( it ))); } mi = max ( mi , y ); } cout << ans << endl ; } return 0 ; } 1C - Music Festival \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60 \\(n\\) \u4e2a\u6570\u5217\uff0c\u4f60\u8981\u628a\u5b83\u4eec\u6309\u4efb\u610f\u987a\u5e8f\u9996\u5c3e\u8fde\u63a5\u8d77\u6765\u3002 \u6700\u5927\u5316\u8fde\u63a5\u540e\u80fd\u6210\u4e3a\u4e25\u683c\u524d\u7f00\u6700\u5927\u503c\u7684\u6570\u7684\u6570\u91cf\u3002 \u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c \\(1 \\leq n \\leq 2 \\times 10^5\\) \u3002 \u6211\u4eec\u5bf9\u4e8e\u8fd9\u79cd\u62fc\u8d77\u6765\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u8003\u8651\u5bf9\u4e8e\u6bcf\u6bb5\u5148\u5904\u7406\u4e00\u4e0b\uff0c\u601d\u60f3\u7c7b\u4f3c NOIOnline2022 sort \u90a3\u4e2a\u9898\uff0c\u663e\u7136\u4e00\u4e2a\u6bb5\u91cc\u9762\u80fd\u505a\u8d21\u732e\u7684\u4e00\u5b9a\u662f\u5728\u8fd9\u4e2a\u6bb5\u5f53\u4e2d\u5c31\u6ee1\u8db3\u6761\u4ef6\u7684\u4f4d\u7f6e\u3002 \u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u6bb5\u628a\u4e0d\u6ee1\u8db3\u7684\u4f4d\u7f6e\u53bb\u6389\uff0c\u7136\u540e\u5c31\u662f\u4e00\u5806\u4e25\u683c\u5355\u8c03\u9012\u589e\u7684\u5e8f\u5217\u62fc\u5728\u4e00\u8d77\uff0c\u8981\u505a\u51fa\u8d21\u732e\u7684\u70b9\u6700\u591a\u3002 \u8fd9\u4e2a\u663e\u7136\u5c31\u76f4\u63a5 dp \u4e00\u4e0b\uff0c\u8bbe \\(dp_i\\) \u8868\u793a\u7b2c \\(i\\) \u4e2a\u4f4d\u7f6e\u7684\u6700\u5927\u503c\u3002 \u7136\u540e\u8f6c\u79fb\u662f\u7c7b\u4f3c\u8fd9\u6837\u7684\u5f62\u5f0f\uff1a \u4e8e\u662f\u968f\u4fbf\u600e\u4e48\u8f6c\u79fb\u4e00\u4e0b\u5c31\u597d\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 // author : black_trees #include <cmath> #include <cstdio> #include <vector> #include <cstring> #include <utility> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; const int inf = 0x3f3f3f3f3f3f3f3fll ; int n , dp [ si ], k [ si ]; std :: vector < int > a [ si ]; std :: pair < int , int > b [ si ]; void init ( int n ) { dp [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) a [ i ]. clear (); } signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { cin >> n , init ( n ); for ( int i = 1 ; i <= n ; ++ i ) { std :: vector < int > tmp ; cin >> k [ i ]; tmp . push_back ( 0l l ); for ( int j = 1 ; j <= k [ i ]; ++ j ) { int x ; cin >> x ; tmp . push_back ( x ); } a [ i ]. resize ( k [ i ] + 3 ); int mx = - inf , cur = 0 ; for ( int j = 1 ; j <= k [ i ]; ++ j ) { if ( tmp [ j ] > mx ) mx = tmp [ j ], ++ cur , a [ i ][ cur ] = mx ; } k [ i ] = cur ; } for ( int i = 1 ; i <= n ; ++ i ) b [ i ] = make_pair ( a [ i ][ k [ i ]], i ); sort ( b + 1 , b + n + 1 ); for ( int i = 1 ; i <= n ; ++ i ) { auto [ fr , sc ] = b [ i ]; dp [ i ] = dp [ i - 1 ]; for ( int j = 1 ; j <= k [ sc ]; ++ j ) dp [ i ] = max ( dp [ i ], dp [ lower_bound ( b + 1 , b + n + 1 , make_pair ( a [ sc ][ j ], 0l l )) - b - 1 ] + k [ sc ] - j + 1 ); } cout << dp [ n ] << endl ; } return 0 ; } 1D - The way home \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e00\u4e2a\u4eba\u5728\u4e00\u5f20\u6709\u5411\u56fe\u7684 \\(1\\) \u53f7\u7ed3\u70b9\uff0c\u4ed6\u8981\u53bb\u5230 \\(n\\) \u7ed3\u70b9\u3002\u6bcf\u6761\u8fb9 \\((a_i,b_i)\\) \u6709\u8fb9\u6743 \\(s_i\\) \uff0c\u8868\u793a\u8d70\u8fc7\u8fd9\u6761\u8fb9\u9700\u8981\u82b1 \\(s_i\\) \u5143\u3002\u8fd9\u4e2a\u4eba\u4e00\u5f00\u59cb\u6709 \\(p\\) \u5143\uff0c\u5230\u4e86\u4e00\u4e2a\u70b9 \\(u\\) \uff0c\u4ed6\u53ef\u4ee5\u8fdb\u884c\u82e5\u5e72\u6b21\u6f14\u51fa\uff0c\u6bcf\u6b21\u6f14\u51fa\u6536\u83b7 \\(w_u\\) \u5143\u3002\u95ee\u5230\u8fbe \\(n\\) \u7684\u6700\u5c0f\u6f14\u51fa\u6b21\u6570\uff0c\u82e5\u65e0\u89e3\u8f93\u51fa -1 \u3002 \u8fd9\u9898\u5f88\u597d\u73a9\uff0c\u5c5e\u4e8e\u662f div2/ABC \u7279\u522b\u559c\u6b22\u51fa\u7684\u4e00\u79cd\uff0c\u72b6\u6001\u590d\u6742\u7684\u6700\u77ed\u8def\u9898\u3002 \u8fd9\u91cc\u8981\u7528\u5230\u4e00\u4e2a\u7c7b\u4f3c\u53cd\u6094\uff1f\u7684 \"postpone\" \u601d\u60f3\u3002 \u6211\u4eec\u6709\u4e00\u4e2a\u89c2\u5bdf\uff0c\u5982\u679c\u6211\u4eec\u8d70\u5230\u67d0\u4e00\u4e2a\u8282\u70b9\uff0c\u94b1\u4e0d\u591f\u4e86\u7684\u65f6\u5019\uff0c\u663e\u7136\u6211\u4eec\u53ea\u9700\u8981\u5728\u4e4b\u524d\u6253\u5de5\u8fc7\u7684\u6700\u4f18\u4f4d\u7f6e\u75af\u72c2\u6253\u5de5\u76f4\u5230\u94b1\u591f\u7528\u3002 \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u8bbe\u4e00\u4e2a dp \u72b6\u6001\uff0c\u8bbe \\(dp(i,j) = \\{x, y\\}\\) \u8868\u793a\uff0c\u8d70\u5230 \\(i\\) \uff0c\u5e76\u4e14\u6700\u4f18\u70b9\u662f \\(j\\) \uff0c\u5f53\u524d\u6700\u5c0f\u6253\u5de5\u6b21\u6570\u4e3a \\(x\\) \uff0c\u5728\u6b64\u524d\u63d0\u4e0b\u6700\u5927\u5269\u4f59\u94b1\u6570\u4e3a \\(y\\) . \u8fd9\u4e2a\u663e\u7136\u5c31 Dijkstra \u8f6c\u79fb\u4e00\u4e0b\u5c31\u884c\uff0c\u6b63\u786e\u6027\u53ef\u4ee5\u901a\u8fc7 Exchange Argument \u8bc1\u660e\u8fd9\u4e2a\u7ed3\u8bba\uff1a\u5982\u679c \\(x\\) \u66f4\u5c0f\uff0c\u54ea\u6015 \\(y\\) \u66f4\u5c0f\uff0c\u8fd9\u4e2a\u72b6\u6001\u4f9d\u65e7\u662f\u4f18\u79c0\u7684\uff0c\u6765\u5f97\u5230\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 // author : black_trees #include <cmath> #include <queue> #include <cstdio> #include <cstring> #include <utility> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; using pii = std :: pair < int , int > ; const int si_n = 8e2 + 10 ; const int si_m = 3e3 + 10 ; const int inf = 0x3f3f3f3f3f3f3f3fll ; int n , m , p ; pii dp [ si_n ][ si_n ]; int tot = 0 , head [ si_n ]; struct Edge { int ver , Next , w ; } e [ si_m << 1 ]; inline void add ( int u , int v , int w ) { e [ tot ] = ( Edge ){ v , head [ u ], w }, head [ u ] = tot ++ ; } int ww [ si_n ]; std :: priority_queue < std :: pair < pii , pii >> q ; void dijkstra () { for ( int i = 0 ; i <= n ; ++ i ) { for ( int j = 0 ; j <= n ; ++ j ) { dp [ i ][ j ] = make_pair ( - inf , - inf ); } } dp [ 1 ][ 0 ] = make_pair ( 0 , p ), q . push ( make_pair ( make_pair ( 0 , p ), make_pair ( 1 , 0 ))); while ( ! q . empty ()) { auto fr = q . top (). first ; auto sc = q . top (). second ; q . pop (); int u = sc . first , o = sc . second ; if ( dp [ u ][ o ] > fr ) continue ; if ( ww [ u ] > ww [ o ]) o = u ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver , w = e [ i ]. w ; auto nfr = fr ; if ( nfr . second < w ) { int rest = w - nfr . second ; int tim = ceil (( rest * 1.0 ) / ( 1.0 * ww [ o ])); nfr . first -= tim , nfr . second += tim * ww [ o ]; } nfr . second -= w ; if ( dp [ v ][ o ] < nfr ) q . push ( make_pair ( dp [ v ][ o ] = nfr , make_pair ( v , o ))); } } } signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { cin >> n >> m >> p ; for ( int i = 0 ; i <= n ; ++ i ) head [ i ] = -1 ; while ( ! q . empty ()) q . pop (); for ( int i = 1 ; i <= n ; ++ i ) cin >> ww [ i ]; for ( int i = 1 ; i <= m ; ++ i ) { int u , v , w ; cin >> u >> v >> w ; add ( u , v , w ); } dijkstra (); pii ans = make_pair ( - inf , - inf ); for ( int i = 1 ; i <= n ; ++ i ) ans = max ( ans , dp [ n ][ i ]); if ( ans . first <= - inf ) cout << \"-1\" << endl ; else cout << - ans . first << endl ; } return 0 ; } CFR #858 \u03c8(\uff40\u2207\u00b4)\u03c8 Contest Id: 1806 A \u03c8(\uff40\u2207\u00b4)\u03c8 \u9898\u9762\u6682\u7565\u3002 \u628a\u7ed9\u5b9a\u7684 \\((c, d)\\) \u5206\u5230\u56db\u4e2a\u533a\u57df\u3002 \u5982\u679c\u5728 \\((a, b)\\) \u7684\u4e0b\u9762\u663e\u7136\u4e0d\u53ef\u884c\uff08 \\(b > d\\) \uff09 \u7136\u540e\u5982\u679c\u5728 \\(a\\) \u7684\u53f3\u4fa7\uff0c\u8003\u8651 \\(c - a\\) \u662f\u5426\u5927\u4e8e \\(d - b\\) \uff0c\u5982\u679c\u6210\u7acb\u4e5f\u65e0\u89e3\uff0c\u8fd9\u4e2a\u663e\u7136\u3002 \u7136\u540e\u5269\u4e0b\u7684\u4e24\u79cd\u60c5\u51b5\u5c31\u7ed9 \\(y\\) \u51d1\u4e00\u4e0b\u5c31\u884c\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { i64 a , b , c , d ; cin >> a >> b >> c >> d ; if ( b > d ) { cout << \"-1\" << endl ; continue ; } i64 ansy = d - b ; i64 ansx = c - a ; if ( ansx > ansy ) { cout << \"-1\" << endl ; continue ; } i64 ans = ( ansy - ansx ) + ansy ; cout << ans << endl ; } return 0 ; } B \u03c8(\uff40\u2207\u00b4)\u03c8 \u9898\u9762\u6682\u7565\u3002 \u663e\u7136\u7b54\u6848\u4e3a \\(x\\in \\{0, 1, 2\\}\\) \u3002 \u7136\u540e\u5c31\u6570\u4e00\u4e0b \\(0\\) \u7684\u4e2a\u6570\uff0c\u6570\u4e00\u4e0b\u662f\u4e0d\u662f\u5b58\u5728\u5927\u4e8e \\(1\\) \u7684\u6570\u5c31\u884c\u3002 \u7136\u540e\u968f\u4fbf\u600e\u4e48\u6784\u9020\u5c31\u597d\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 // author : black_trees #include <cmath> #include <bitset> #include <cstdio> #include <vector> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { int n ; cin >> n ; std :: vector < int > a ( n + 1 ); std :: bitset < 400010 > b ; b . reset (); int cnt0 = 0 , f = 0 ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], cnt0 += ( a [ i ] == 0 ), f += ( a [ i ] > 1 ); if ( cnt0 - 1 <= n - cnt0 ) { cout << \"0\" << endl ; continue ; } if ( f || cnt0 == n ) { cout << \"1\" << endl ; continue ; }; cout << \"2\" << endl ; } return 0 ; } C \u03c8(\uff40\u2207\u00b4)\u03c8 \u9898\u9762\u6682\u7565\u3002 \u6ce8\u610f\u5230\u6ee1\u8db3\u6761\u4ef6\u7684 \\(q\\) \u53ea\u80fd\u662f\u4e24\u79cd\u60c5\u51b5 \u5168\u90e8\u662f \\(0\\) \u3002 \u5982\u679c \\(n \\equiv 0 \\pmod 2\\) \uff0c\u90a3\u4e48 \\(2n - 1\\) \u4e2a \\(-1\\) \uff0c\u4e00\u4e2a \\(n\\) \u5c31\u6ee1\u8db3\u6761\u4ef6\u3002 \u7136\u540e \\(n = 1, n = 2\\) \u7684\u65f6\u5019\u8fd8\u6709\u7279\u6b8a\u60c5\u51b5\uff08\u9898\u76ee\u89e3\u91ca\u91cc\u5c31\u53ea\u7ed9\u4e86\u8fd9\u4e24\u79cd\uff0cYunQian \u4f60\u597d\u6076\u6bd2\u3002\uff09 \u4e8e\u662f\u56db\u79cd\u53ef\u80fd\u5206\u522b\u5224\u65ad\u4e00\u4e0b\u5c31\u884c\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int n , a [ si << 1 ]; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { cin >> n ; for ( int i = 1 ; i <= n * 2 ; ++ i ) cin >> a [ i ]; sort ( a + 1 , a + 1 + n + n ); int ans = 0 ; for ( int i = 1 ; i <= n * 2 ; ++ i ) ans += abs ( a [ i ]); if ( n == 1 ) ans = min ( ans , abs ( a [ 1 ] - a [ 2 ])); if ( n == 2 ) ans = min ( ans , min ( abs ( a [ 1 ] - 2 ) + abs ( a [ 2 ] - 2 ) + abs ( a [ 3 ] - 2 ) + abs ( a [ 4 ] - 2 ), abs ( a [ 1 ] + 1 ) + abs ( a [ 2 ] + 1 ) + abs ( a [ 3 ] + 1 ) + abs ( a [ 4 ] - 2 ))); if ( n % 2 == 0 ) { int ret = 0 ; for ( int i = 1 ; i < n * 2 ; ++ i ) { ret += abs ( a [ i ] + 1 ); } ret += abs ( a [ n * 2 ] - n ); ans = min ( ans , ret ); } cout << ans << endl ; } return 0 ; } D \u03c8(\uff40\u2207\u00b4)\u03c8 \u9898\u9762\u8bf4\u7684\u6709\u70b9\u62bd\u8c61\uff0c\u627e\u522b\u4eba\u7684\u7ffb\u8bd1\u4f30\u8ba1\u4e00\u65f6\u534a\u4f1a\u4e5f\u770b\u4e0d\u61c2\uff0c\u8fd8\u662f\u81ea\u5df1\u5199\u9898\u9762\u597d\u4e86\u3002 \u7ed9\u5b9a\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684 0/1 \u5e8f\u5217 \\(a\\) \uff0c\u5047\u5b9a\u6709\u4e00\u4e2a \\(1 \\sim m - 1\\) \u7684\u6392\u5217 \\(p\\) \uff0c\u5b9a\u4e49\u6392\u5217 \\(p\\) \u7684\u8d21\u732e\u4e3a\u4e00\u5f20\u7531 \\(a, p\\) \u751f\u6210\u7684\u6709\u5411\u56fe \\(G\\) \u4e2d\uff0c\u8282\u70b9 \\(1\\) \u7684\u5165\u5ea6\u3002 \\(G\\) \u7684\u751f\u6210\u65b9\u5f0f\u5982\u4e0b\uff1a Step1: \u5728\u56fe \\(G\\) \u4e0a\u521d\u59cb\u5316\u4e00\u4e2a\u6709 \\(m\\) \u4e2a\u8282\u70b9\u7684\u5e76\u67e5\u96c6\u3002 Step2: \u5bf9\u4e8e \\(\\forall i \\in 1 \\sim m - 1\\) \uff0c\u9009\u62e9 \\(p_i, p_i + 1\\) \u6240\u5728\u7684\u4e24\u4e2a\u8054\u901a\u5757 \\(U, V\\) \uff0c\u5408\u5e76\u4ed6\u4eec\u3002 Step3: \u5e76\u4e14\uff0c\u5982\u679c \\(a_{p_i} = 0\\) \uff0c\u90a3\u4e48\u4ee4 \\(V\\) \u7684 root \u6307\u5411 \\(U\\) \u7684 root\uff0c\u5426\u5219\u53cd\u4e4b\u3002\uff08\u8fd9\u91cc\u7684\u6307\u5411\u5c31\u662f\u8fde\u4e00\u6761\u6709\u5411\u8fb9\uff09 \u7ed9\u5b9a \\(N\\) \uff0c\u4ee4 \\(n = N - 1\\) \uff0c\u5bf9\u4e8e \\(\\forall k \\in [1, N)\\) \uff0c\u4f60\u9700\u8981\u6c42\u51fa\u957f\u5ea6\u4e3a \\(k\\) \u7684\u6240\u6709\u6392\u5217\u7684\u8d21\u732e\u4e4b\u548c\uff0c\u5bf9 \\(998244353\\) \u53d6\u6a21\u3002 \\(2\\le N \\le 5 \\times 10^5\\) \uff0c\u591a\u7ec4\u6570\u636e\u3002 \u611f\u89c9\u662f\u9001\u5206\u9898\uff0c\u4e0d\u77e5\u9053\u4e3a\u5565\u8d5b\u65f6\u6ca1\u51e0\u4e2a\u4eba\u505a\uff0c\u601d\u60f3\u548c\u4e4b\u524d\u90a3\u4e2a\uff0cABC290F - Maximum Diameter \u5f88\u50cf\u3002 \u663e\u7136\u6211\u4eec\u53ef\u4ee5\u8ba8\u8bba\u4efb\u610f\u4e00\u79cd\u6392\u5217\uff0c\u7136\u540e\u7b97\u65b9\u6848\u6570\uff0c\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u5047\u8bbe\uff0c\u6bcf\u6b21\u52a0\u5165\u7684\u70b9\u5bf9\u90fd\u662f \\((i - 1, i)\\) \u7684\u5f62\u5f0f\uff0c\u8fd9\u6837\u7684\u6392\u5217\u663e\u7136\u5b58\u5728\u3002 \u6211\u4eec\u8003\u8651\u65b0\u52a0\u5165\u4e00\u4e2a\u70b9\u5bf9 \\((i - 1, i)\\) \u4e4b\u540e\uff0c\u5bf9\u4e8e\u7b54\u6848\u7684\u8d21\u732e\u662f\u4ec0\u4e48\u3002 \u663e\u7136\u5982\u679c\u80fd\u5bf9\u7b54\u6848\u6709\u8d21\u732e\uff0c\u9700\u8981\u6b64\u65f6\u7684 \\(1\\) \u4e3a\u5e76\u67e5\u96c6\u7684\u6811\u6839\u3002 \u6211\u4eec\u8bb0 \\(g(i)\\) \u8868\u793a \\(1 \\sim i\\) \u5df2\u7ecf\u52a0\u5165\u5e76\u67e5\u96c6\u65f6\u7684\u7b54\u6848\uff0c\u663e\u7136\u6709 \\(g(i) = g(i - 1) \\times i + val\\) \uff0c\u5176\u4e2d \\(val\\) \u4e3a\u5f53\u524d\u8fd9\u4e2a\u70b9\u5bf9 \\((i - 1, i)\\) \u7684\u8d21\u732e\u3002 \u90a3\u4e48\uff0c\u5982\u679c \\(a_i = 0\\) \uff0c\u8fd9\u4e2a\u70b9\u5bf9\u663e\u7136\u4f1a\u505a\u51fa\u8d21\u732e \\(1\\) \uff0c\u6211\u4eec\u4e58\u4e0a\u65b9\u6848\u6570\u5c31\u884c\uff0c\u53cd\u4e4b\u5b83\u4e0d\u4f1a\u505a\u51fa\u8d21\u732e\u3002 \u8fd9\u4e2a\u65b9\u6848\u6570\u5e94\u5f53\u662f\uff0c\u4ee5 \\(1 \\sim i\\) \u7ec4\u6210\u7684\u5e76\u67e5\u96c6\uff0c\u4e14 \\(1\\) \u4e3a\u6839\u7684\u65b9\u6848\u6570\uff0c\u6211\u4eec\u8bb0\u8fd9\u4e2a\u503c\u4e3a \\(f(i)\\) \uff0c\u8003\u8651\u52a0\u5165 \\(i\\) \u7684\u65f6\u5019\u662f\u4e0d\u662f\u6307\u5411 \\(i - 1\\) \u7684\u6839\u5373\u53ef\u5f97\u5230 \\(f\\) \u7684\u8ba1\u7b97\u5f0f\uff1a \\(f(i) = f(i - 1) \\times (i - [a_i = 1])\\) \u3002 \u6700\u7ec8 \\(g\\) \u7684\u9012\u63a8\u5f0f\u662f\uff1a \\(g(i) = g(i - 1) \\times i + f(i) \\times [a_i = 0]\\) \uff0c\u8fb9\u754c \\(f(0) = 1, g(0) = 0\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 // author : black_trees #include <cmath> #include <cstdio> #include <cassert> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; using ldb = long double ; using u64 = unsigned long long ; constexpr i64 safe_mod ( i64 x , i64 m ) { return x %= m , x < 0 ? x + m : x ; } constexpr i64 pow_mod_constexpr ( i64 x , i64 n , int m ) { if ( m == 1 ) return 0 ; unsigned _m = m ; uint64_t r = 1 , _x = safe_mod ( x , m ); for (; n ; n >>= 1 , _x = _x * _x % _m ) if ( n & 1 ) r = r * _x % m ; return r ; } constexpr bool is_prime_constexpr ( int n ) { if ( n <= 1 ) return false ; if ( n == 2 || n == 7 || n == 61 ) return true ; if ( n % 2 == 0 ) return false ; i64 d = n - 1 ; while ( ~ d & 1 ) d /= 2 ; for ( i64 a : { 2 , 7 , 61 }) { i64 t = d , y = pow_mod_constexpr ( a , t , n ); while ( t != n - 1 && y != 1 && y != n - 1 ) y = y * y % n , t <<= 1 ; if ( y != n - 1 && t % 2 == 0 ) return false ; } return true ; } constexpr pair < i64 , i64 > inv_gcd ( i64 a , i64 b ) { a = safe_mod ( a , b ); if ( a == 0 ) return { b , 0 }; i64 s = b , t = a , m0 = 0 , m1 = 1 ; while ( t ) { i64 u = s / t ; s -= t * u , m0 -= m1 * u ; i64 tmp = s ; s = t , t = tmp , tmp = m0 , m0 = m1 , m1 = tmp ; } if ( m0 < 0 ) m0 += b / s ; return { s , m0 }; } struct Barrett_Reduction { unsigned m ; uint64_t im ; Barrett_Reduction ( unsigned m ) : m ( m ), im ( ~ 0ull / m + 1 ) {} unsigned mul ( unsigned a , unsigned b ) const { uint64_t z = ( uint64_t ) a * b , x = ( __uint128_t ) z * im >> 64 ; unsigned v = z - x * m ; return m <= v ? v + m : v ; } }; template < int m > struct static_modint { using _mint = static_modint ; public : static _mint raw ( int v ) { _mint x ; return x . _v = v , x ; } static_modint () : _v ( 0 ) {} template < class __Tp > static_modint ( __Tp v ) { i64 x = v % m ; _v = x < 0 ? x + m : x ; } unsigned val () const { return _v ; } _mint & operator ++ () { if ( ++ _v == m ) _v = 0 ; return * this ; } _mint & operator -- () { if ( ! _v -- ) _v = m - 1 ; return * this ; } _mint operator ++ ( int ) { _mint res = * this ; ++* this ; return res ; } _mint operator -- ( int ) { _mint res = * this ; --* this ; return res ; } _mint & operator += ( const _mint & rhs ) { _v += rhs . _v ; if ( _v >= m ) _v -= m ; return * this ; } _mint & operator -= ( const _mint & rhs ) { _v -= rhs . _v ; if ( _v >= m ) _v += m ; return * this ; } _mint & operator *= ( const _mint & rhs ) { uint64_t z = _v ; z *= rhs . _v , _v = z % m ; return * this ; } _mint & operator /= ( const _mint & rhs ) { return * this = * this * rhs . inv (); } _mint operator + () const { return * this ; } _mint operator - () const { return _mint () - * this ; } _mint pow ( i64 n ) const { assert ( 0 <= n ); _mint x = * this , r = 1 ; for (; n ; n >>= 1 , x *= x ) if ( n & 1 ) r *= x ; return r ; } _mint inv () const { if ( prime ) { assert ( _v ); return pow ( m - 2 ); } else { auto eg = inv_gcd ( _v , m ); assert ( eg . first == 1 ); return eg . second ; } } friend _mint operator + ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) += rhs ; } friend _mint operator - ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) -= rhs ; } friend _mint operator * ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) *= rhs ; } friend _mint operator / ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) /= rhs ; } friend bool operator == ( const _mint & lhs , const _mint & rhs ) { return lhs . _v == rhs . _v ; } friend bool operator != ( const _mint & lhs , const _mint & rhs ) { return lhs . _v != rhs . _v ; } private : unsigned _v ; static constexpr bool prime = is_prime_constexpr ( m ); }; struct dynamic_modint { using _mint = dynamic_modint ; public : static void set_mod ( int m ) { assert ( 1 <= m ), bt = Barrett_Reduction ( m ); } static _mint raw ( int v ) { _mint x ; return x . _v = v , x ; } dynamic_modint () : _v ( 0 ) {} template < class __Tp > dynamic_modint ( __Tp v ) { i64 x = v % ( int ) bt . m ; _v = x < 0 ? x + bt . m : x ; } unsigned val () const { return _v ; } _mint & operator ++ () { if ( ++ _v == bt . m ) _v = 0 ; return * this ; } _mint & operator -- () { if ( ! _v -- ) _v = bt . m - 1 ; return * this ; } _mint operator ++ ( int ) { _mint res = * this ; ++* this ; return res ; } _mint operator -- ( int ) { _mint res = * this ; --* this ; return res ; } _mint & operator += ( const _mint & rhs ) { _v += rhs . _v ; if ( _v >= bt . m ) _v -= bt . m ; return * this ; } _mint & operator -= ( const _mint & rhs ) { _v += bt . m - rhs . _v ; if ( _v >= bt . m ) _v -= bt . m ; return * this ; } _mint & operator *= ( const _mint & rhs ) { _v = bt . mul ( _v , rhs . _v ); return * this ; } _mint & operator /= ( const _mint & rhs ) { return * this = * this * rhs . inv (); } _mint operator + () const { return * this ; } _mint operator - () const { return _mint () - * this ; } _mint pow ( i64 n ) const { assert ( 0 <= n ); _mint x = * this , r = 1 ; for (; n ; n >>= 1 , x *= x ) if ( n & 1 ) r *= x ; return r ; } _mint inv () const { auto eg = inv_gcd ( _v , bt . m ); assert ( eg . first == 1 ); return eg . second ; } friend _mint operator + ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) += rhs ; } friend _mint operator - ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) -= rhs ; } friend _mint operator * ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) *= rhs ; } friend _mint operator / ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) /= rhs ; } friend bool operator == ( const _mint & lhs , const _mint & rhs ) { return lhs . _v == rhs . _v ; } friend bool operator != ( const _mint & lhs , const _mint & rhs ) { return lhs . _v != rhs . _v ; } private : unsigned _v ; static Barrett_Reduction bt ; }; using modint = dynamic_modint ; using barrett = Barrett_Reduction ; barrett modint :: bt = 998244353 ; const int si = 5e5 + 10 ; int n , a [ si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { cin >> n ; modint f = 1 , g = 0 ; for ( int i = 1 ; i < n ; ++ i ) cin >> a [ i ]; for ( int i = 1 ; i < n ; ++ i ) { g = i * g + ( a [ i ] == 0 ) * f ; cout << g . val () << \" \\n \" [ i == n ]; f = f * ( i - a [ i ]); } } return 0 ; } E \u03c8(\uff40\u2207\u00b4)\u03c8 \u9898\u9762\u6682\u7565\u3002 \u4e0d\u4f1a\u3002","title":"2023\u5e743,4\u6708AT&CF"},{"location":"rec/atcf-for-2023-03-04/#cfr-857","text":"Contest Id: 1801/1802 \u4e45\u8fdd\u7684 div1 2 \u5206\u5f00\u7684\u573a\u3002 Vp \u6253\u4e86 5 \u9898\uff0c\u5f88\u5f00\u5fc3\uff0c\u6709\u70b9\u601d\u8003\u7684\u8ff9\u8c61\u4e86\u3002","title":"CFR #857"},{"location":"rec/atcf-for-2023-03-04/#2a-likes","text":"\u6709\u4e00\u4e9b\u4eba\uff0c\u4ed6\u4eec\u4f1a add likes \u6216\u8005 remove likes\u3002 \u540c\u4e00\u4e2a\u4eba\u7684\u64cd\u4f5c\u7528 \\(x, -x\\) \u6765\u8bb0\u5f55\uff0c\u8868\u793a add \u6216\u8005 remove\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u64cd\u4f5c\u5e8f\u5217\uff0c\u4f60\u53ef\u4ee5 rearrange \u4e00\u4e0b\uff0c\u8981\u4f60\u6c42\u6bcf\u4e2a\u65f6\u523b\uff0c\u6700\u5927\u7684 likes \u548c\u6700\u5c0f\u7684 likes \u6570\u3002 \u8003\u8651\u8bb0\u5f55\u4e00\u4e0b\u6709\u51e0\u4e2a remove likes\u3002 \u7136\u540e\u6700\u5927\u5316\u663e\u7136\u662f\u628a remove likes \u4e22\u5230\u540e\u9762\u3002 \u7136\u540e\u6700\u5c0f\u5316\u5c31\u662f\u5c3d\u91cf\u65e9\u7684 add remove, add remove \u8fd9\u6837\u4ea4\u66ff\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int T , n , a [ si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> T ; while ( T -- ) { cin >> n ; int cnt = 0 ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], cnt += ( a [ i ] < 0 ); for ( int i = 1 ; i <= n - cnt ; ++ i ) { cout << i << \" \" ; } for ( int i = 1 ; i <= cnt ; ++ i ) { cout << n - cnt - i << \" \" ; } cout << endl ; for ( int i = 1 ; i <= cnt ; ++ i ) { cout << 1 << \" \" ; cout << \"0\" << \" \" ; } for ( int i = cnt * 2 + 1 ; i <= n ; ++ i ) { cout << ( i - ( cnt * 2 )) << \" \" ; } cout << endl ; } return 0 ; }","title":"2A - Likes"},{"location":"rec/atcf-for-2023-03-04/#2b-settlement-of-guinea-pigs","text":"Dasha \u5f88\u559c\u6b22\u8c5a\u9f20\uff0c\u5979\u5728 \\(n\\) \u5929\u5185\u8981\u4e0d\u662f\u4e70\u8c5a\u9f20\uff0c\u8981\u4e0d\u662f\u8bf7\u533b\u751f\u6765\u770b\u8c5a\u9f20\u3002 Dasha \u548c\u5ba0\u7269\u5e97\u90fd\u65e0\u6cd5\u5206\u8fa8\u8c5a\u9f20\u7684\u6027\u522b\uff08\u601d\u8003\u4eba\u751f\uff09\uff0c\u53ea\u80fd\u5728\u533b\u751f\u6765\u67e5\u770b\u8c5a\u9f20\u7684\u65f6\u5019\u4e3a\u8fd9\u4e9b\u8c5a\u9f20\u505a\u6027\u522b\u9274\u5b9a\u3002 \u4e3a\u4e86\u8c5a\u9f20\uff0cDasha \u6253\u7b97\u7ed9\u5b83\u4eec\u4e70\u4e00\u4e9b\u7b3c\u5b50\uff0c\u4f46\u5ba0\u7269\u5e97\u91cc\u5356\u7684\u7b3c\u5b50\u53ea\u80fd\u653e\u6700\u591a \\(2\\) \u53ea\u8c5a\u9f20\u3002\u7531\u4e8e\u5979\u4e0d\u60f3\u8ba9\u5979\u7684\u8c5a\u9f20\u906d\u53d7\u9053\u5fb7\u4f24\u5bb3\uff0c\u4e00\u4e2a\u7b3c\u5b50\u91cc\u53ea\u80fd\u653e\u540c\u4e00\u79cd\u6027\u522b\u7684\u8c5a\u9f20\u3002 \u6c42 Dasha \u6700\u5c11\u9700\u8981\u4e70\u591a\u5c11\u4e2a\u7b3c\u5b50\u3002 \u8fd9\u4e2a\u7ffb\u8bd1\u7531 @ztrztr \u63d0\u4f9b \u611f\u89c9\uff0c\u6ca1\u5565\u597d\u8bf4\u7684\uff0c\u5c31\u517d\u533b\u6765\u4e86\u6700\u4f18\u5206\u914d\uff0c\u5176\u4ed6\u4e00\u4e2a\u4e00\u4e2a\u653e\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { int n ; cin >> n ; int ans = 0 , u = 0 , v = 0 ; for ( int i = 1 , x ; i <= n ; ++ i ) { cin >> x ; if ( u == 0 && x == 2 ) continue ; if ( x == 1 ) u ++ , v ++ ; else u = v / 2 + 1 ; ans = max ( ans , u ); } cout << ans << endl ; } return 0 ; }","title":"2B - Settlement of Guinea Pigs"},{"location":"rec/atcf-for-2023-03-04/#1a-the-very-beautiful-blanket","text":"\u4f60\u9700\u8981\u5bf9\u4e00\u4e2a \\(n\\times m\\) \u7684\u77e9\u9635 \\(B\\) \u586b\u6570\uff0c\u8981\u6c42\u4f60\u6ee1\u8db3\uff0c\u5bf9\u4e8e \\(B\\) \u7684\u4efb\u610f\u4e00\u4e2a \\(4 \\times 4\\) \u7684\u5b50\u77e9\u9635\uff0c\u6ee1\u8db3\u4ee5\u4e0b\u4e24\u4e2a\u6761\u4ef6\uff1a \\(A_{11} \\oplus A_{12} \\oplus A_{21} \\oplus A_{22} = A_{33} \\oplus A_{34} \\oplus A_{43} \\oplus A_{44}\\) \\(A_{13} \\oplus A_{14} \\oplus A_{23} \\oplus A_{24} = A_{31} \\oplus A_{32} \\oplus A_{41} \\oplus A_{42}\\) \\(\\oplus\\) \u8868\u793a\u6309\u4f4d\u6216\uff0c \\(4 \\le n,m \\le 200\\) \uff0c\u8981\u6c42 \\(B_{ij} \\in [0, 2^{63})\\) \u3002 \u9996\u5148\u4e00\u4e2a\u663e\u7136\u7684\u7ed3\u8bba\u662f\uff0c\u4e0d\u540c\u7684\u6570\u7684\u6570\u91cf\u4e00\u5b9a\u662f \\(n \\times m\\) \u3002 \u56e0\u4e3a \\(n,m \\le 200\\) \u561b\u3002 \u7136\u540e\u6211\u4eec\u5c31\u968f\u4fbf\u6784\u9020\u4e00\u4e0b\uff0c\u4e0d\u96be\u53d1\u73b0 \\(a(i, j) = 2^9 + j\\) \u662f\u4e00\u79cd\u6ee1\u8db3\u6761\u4ef6\u7684\u6784\u9020\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { int n ; cin >> n ; int ans = 0 , u = 0 , v = 0 ; for ( int i = 1 , x ; i <= n ; ++ i ) { cin >> x ; if ( u == 0 && x == 2 ) continue ; if ( x == 1 ) u ++ , v ++ ; else u = v / 2 + 1 ; ans = max ( ans , u ); } cout << ans << endl ; } return 0 ; }","title":"1A - The Very Beautiful Blanket"},{"location":"rec/atcf-for-2023-03-04/#1b-buying-gifts","text":"\u6709 \\(n\\) \u4e2a\u5546\u5e97\uff0c\u5728\u7b2c \\(i\\) \u4e2a\u5546\u5e97\u4f1a\u8fdb\u884c\u4e0b\u9762\u4e24\u4e2a\u64cd\u4f5c\u4e4b\u4e00\uff1a \u4e3a\u670b\u53cb A \u4e70\u793c\u7269\uff0c\u82b1\u8d39 \\(a_i\\) \u5143\u3002 \u4e3a\u670b\u53cb B \u4e70\u793c\u7269\uff0c\u82b1\u8d39 \\(b_i\\) \u5143\u3002 \u6c42\u5728\u6bcf\u4e2a\u5546\u5e97\u8fdb\u884c\u8fc7\u4ee5\u4e0a\u64cd\u4f5c\u540e\uff0c\u670b\u53cb A \u548c B \u83b7\u5f97\u7684\u793c\u7269\u4e2d\u7684\u6700\u5927\u4ef7\u503c\u4e4b\u5dee\u7684\u6700\u5c0f\u503c\u3002 \u6709 \\(t\\) \u7ec4\u6d4b\u8bd5\u6570\u636e\u3002 \u6570\u636e\u8303\u56f4\uff1a \\(1\\le t\\le1000\\) \uff0c \\(2\\le n\\le5\\times 10^5\\) \uff0c \\(0\\le a_i, b_i\\le 10^9\\) \u3002 \u4e5f\u6bd4\u8f83\u5bb9\u6613\uff0c\u5c31\u662f\u6211\u4eec\u53ef\u4ee5\u5148\u89c2\u5bdf\u4e00\u4e0b\uff0c\u770b\u770b\u6709\u6ca1\u6709\u4ec0\u4e48\u6027\u8d28\u3002 \u4f46\u662f\u5176\u5b9e\u4e5f\u6ca1\u6709\u4ec0\u4e48\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u6ca1\u6cd5\u901a\u8fc7 \\(O(1)\\) \u6216\u8005\u662f \\(O(\\log n)\\) \u4e4b\u7c7b\u7684\u65b9\u5f0f\u6765\u56fa\u5b9a\u4e00\u4e9b\u9009\u9879\uff08\u6392\u9664\u4e00\u4e9b\u5197\u6742\u72b6\u6001\uff09\u3002 \u4e8e\u662f\u6211\u4eec\u53ea\u80fd\u8003\u8651 \\(O(n)\\) \u679a\u4e3e\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u8003\u8651\u5b83\u7684\u6700\u4f18\u51b3\u7b56\u662f\u4ec0\u4e48\u3002 \u53d1\u73b0\uff0c\u5982\u679c\u6211\u4eec\u94a6\u5b9a\u4e00\u4e2a\u4f4d\u7f6e \\(i\\) \u662f \\(a\\) \u4e2d\u7684 \\(\\max\\) \uff0c\u90a3\u4e48\u663e\u7136\uff0c\u6240\u6709\u6ee1\u8db3 \\(a(j) > a(i)\\) \u7684 \\(j\\) \u6211\u4eec\u90fd\u4e0d\u9009 \\(a\\) \u800c\u662f\u9009 \\(b\\) \u3002 \u7136\u540e\u6ee1\u8db3 \\(a(k) \\le a(i)\\) \u7684 \\(k\\) \u53ef\u4ee5\u9009\u62e9\u6027\u7684\u9009\u4e00\u4e9b\u4f5c\u4e3a \\(b\\) \u4e2d\u7684\u9009\u9879\uff08\u4e24\u8fb9\u90fd\u53ea\u8981\u5404\u9009\u4e00\u4e2a\u5c31\u884c\uff09\u3002 \u4e8e\u662f \\(b\\) \u8fd9\u8fb9\u7684 \\(\\max\\) \u5c31\u53ef\u4ee5\u4ece \\(\\{b(j)\\}\\) \u6216\u8005 \\(\\max\\{b(k)\\}\\) \u5f53\u4e2d\u6765\uff0c\u6211\u4eec\u8003\u8651\u4e00\u4e0b\uff0c\u540e\u8005\u5fc5\u987b\u53d6\uff0c\u524d\u8005\u5728 \\(b(k) < \\max\\{b(j)\\}\\) \u7684\u6761\u4ef6\u4e0b\u53ef\u80fd\u66f4\u9760\u8fd1 \\(a(i)\\) \u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u4e00\u8fb9 qmax\uff0c\u4e00\u8fb9\u7ebf\u6bb5\u6811\u4e8c\u5206\uff0c\u4f46\u662f\u8fd9\u592a\u590d\u6742\u4e86\uff0c\u6ce8\u610f\u5230\u5176\u5b9e\u8fd9\u91cc\u662f\u53ef\u4ee5\u4e0d\u7ba1\u987a\u5e8f\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u6392\u5e8f\uff0c\u7528\u4e24\u4e2a set \u6216\u8005\u4e00\u4e2a set \u7ef4\u62a4\u4e00\u4e0b\u5c31\u884c\uff08\u4e24\u4e2a\u5c31\u662f\u76f4\u63a5\u7ef4\u62a4\u4e24\u90e8\u5206\uff0c\u4e00\u4e2a\u5c31\u662f\u5148\u4ece\u6700\u5927\u7684\u8003\u8651\uff0c\u5c31\u80fd\u7701\u53bb\u4e00\u4e2a set\u3002\uff09 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 // author : black_trees #include <set> #include <cmath> #include <cstdio> #include <vector> #include <cstring> #include <utility> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 5e5 + 10 ; const int inf = 0x3f3f3f3f ; int n ; std :: multiset < int > s ; std :: vector < std :: pair < int , int >> v ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { cin >> n ; int mi = - inf , ans = inf ; s . clear (), v . clear (); for ( int i = 1 ; i <= n ; ++ i ) { int x , y ; cin >> x >> y ; s . insert ( y ), v . emplace_back ( make_pair ( x , y )); } sort ( v . begin (), v . end ()); reverse ( v . begin (), v . end ()); for ( auto & [ x , y ] : v ) { s . erase ( s . lower_bound ( y )); if ( x <= mi ) ans = min ( ans , mi - x ); else { ans = min ( ans , x - mi ); auto it = s . upper_bound ( x ); if ( it != s . end ()) ans = min ( ans , * it - x ); if ( it != s . begin () && * ( std :: prev ( it )) > mi ) ans = min ( ans , x - * ( std :: prev ( it ))); } mi = max ( mi , y ); } cout << ans << endl ; } return 0 ; }","title":"1B - Buying gifts"},{"location":"rec/atcf-for-2023-03-04/#1c-music-festival","text":"\u7ed9\u4f60 \\(n\\) \u4e2a\u6570\u5217\uff0c\u4f60\u8981\u628a\u5b83\u4eec\u6309\u4efb\u610f\u987a\u5e8f\u9996\u5c3e\u8fde\u63a5\u8d77\u6765\u3002 \u6700\u5927\u5316\u8fde\u63a5\u540e\u80fd\u6210\u4e3a\u4e25\u683c\u524d\u7f00\u6700\u5927\u503c\u7684\u6570\u7684\u6570\u91cf\u3002 \u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c \\(1 \\leq n \\leq 2 \\times 10^5\\) \u3002 \u6211\u4eec\u5bf9\u4e8e\u8fd9\u79cd\u62fc\u8d77\u6765\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u8003\u8651\u5bf9\u4e8e\u6bcf\u6bb5\u5148\u5904\u7406\u4e00\u4e0b\uff0c\u601d\u60f3\u7c7b\u4f3c NOIOnline2022 sort \u90a3\u4e2a\u9898\uff0c\u663e\u7136\u4e00\u4e2a\u6bb5\u91cc\u9762\u80fd\u505a\u8d21\u732e\u7684\u4e00\u5b9a\u662f\u5728\u8fd9\u4e2a\u6bb5\u5f53\u4e2d\u5c31\u6ee1\u8db3\u6761\u4ef6\u7684\u4f4d\u7f6e\u3002 \u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u6bb5\u628a\u4e0d\u6ee1\u8db3\u7684\u4f4d\u7f6e\u53bb\u6389\uff0c\u7136\u540e\u5c31\u662f\u4e00\u5806\u4e25\u683c\u5355\u8c03\u9012\u589e\u7684\u5e8f\u5217\u62fc\u5728\u4e00\u8d77\uff0c\u8981\u505a\u51fa\u8d21\u732e\u7684\u70b9\u6700\u591a\u3002 \u8fd9\u4e2a\u663e\u7136\u5c31\u76f4\u63a5 dp \u4e00\u4e0b\uff0c\u8bbe \\(dp_i\\) \u8868\u793a\u7b2c \\(i\\) \u4e2a\u4f4d\u7f6e\u7684\u6700\u5927\u503c\u3002 \u7136\u540e\u8f6c\u79fb\u662f\u7c7b\u4f3c\u8fd9\u6837\u7684\u5f62\u5f0f\uff1a \u4e8e\u662f\u968f\u4fbf\u600e\u4e48\u8f6c\u79fb\u4e00\u4e0b\u5c31\u597d\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 // author : black_trees #include <cmath> #include <cstdio> #include <vector> #include <cstring> #include <utility> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; const int inf = 0x3f3f3f3f3f3f3f3fll ; int n , dp [ si ], k [ si ]; std :: vector < int > a [ si ]; std :: pair < int , int > b [ si ]; void init ( int n ) { dp [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) a [ i ]. clear (); } signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { cin >> n , init ( n ); for ( int i = 1 ; i <= n ; ++ i ) { std :: vector < int > tmp ; cin >> k [ i ]; tmp . push_back ( 0l l ); for ( int j = 1 ; j <= k [ i ]; ++ j ) { int x ; cin >> x ; tmp . push_back ( x ); } a [ i ]. resize ( k [ i ] + 3 ); int mx = - inf , cur = 0 ; for ( int j = 1 ; j <= k [ i ]; ++ j ) { if ( tmp [ j ] > mx ) mx = tmp [ j ], ++ cur , a [ i ][ cur ] = mx ; } k [ i ] = cur ; } for ( int i = 1 ; i <= n ; ++ i ) b [ i ] = make_pair ( a [ i ][ k [ i ]], i ); sort ( b + 1 , b + n + 1 ); for ( int i = 1 ; i <= n ; ++ i ) { auto [ fr , sc ] = b [ i ]; dp [ i ] = dp [ i - 1 ]; for ( int j = 1 ; j <= k [ sc ]; ++ j ) dp [ i ] = max ( dp [ i ], dp [ lower_bound ( b + 1 , b + n + 1 , make_pair ( a [ sc ][ j ], 0l l )) - b - 1 ] + k [ sc ] - j + 1 ); } cout << dp [ n ] << endl ; } return 0 ; }","title":"1C - Music Festival"},{"location":"rec/atcf-for-2023-03-04/#1d-the-way-home","text":"\u4e00\u4e2a\u4eba\u5728\u4e00\u5f20\u6709\u5411\u56fe\u7684 \\(1\\) \u53f7\u7ed3\u70b9\uff0c\u4ed6\u8981\u53bb\u5230 \\(n\\) \u7ed3\u70b9\u3002\u6bcf\u6761\u8fb9 \\((a_i,b_i)\\) \u6709\u8fb9\u6743 \\(s_i\\) \uff0c\u8868\u793a\u8d70\u8fc7\u8fd9\u6761\u8fb9\u9700\u8981\u82b1 \\(s_i\\) \u5143\u3002\u8fd9\u4e2a\u4eba\u4e00\u5f00\u59cb\u6709 \\(p\\) \u5143\uff0c\u5230\u4e86\u4e00\u4e2a\u70b9 \\(u\\) \uff0c\u4ed6\u53ef\u4ee5\u8fdb\u884c\u82e5\u5e72\u6b21\u6f14\u51fa\uff0c\u6bcf\u6b21\u6f14\u51fa\u6536\u83b7 \\(w_u\\) \u5143\u3002\u95ee\u5230\u8fbe \\(n\\) \u7684\u6700\u5c0f\u6f14\u51fa\u6b21\u6570\uff0c\u82e5\u65e0\u89e3\u8f93\u51fa -1 \u3002 \u8fd9\u9898\u5f88\u597d\u73a9\uff0c\u5c5e\u4e8e\u662f div2/ABC \u7279\u522b\u559c\u6b22\u51fa\u7684\u4e00\u79cd\uff0c\u72b6\u6001\u590d\u6742\u7684\u6700\u77ed\u8def\u9898\u3002 \u8fd9\u91cc\u8981\u7528\u5230\u4e00\u4e2a\u7c7b\u4f3c\u53cd\u6094\uff1f\u7684 \"postpone\" \u601d\u60f3\u3002 \u6211\u4eec\u6709\u4e00\u4e2a\u89c2\u5bdf\uff0c\u5982\u679c\u6211\u4eec\u8d70\u5230\u67d0\u4e00\u4e2a\u8282\u70b9\uff0c\u94b1\u4e0d\u591f\u4e86\u7684\u65f6\u5019\uff0c\u663e\u7136\u6211\u4eec\u53ea\u9700\u8981\u5728\u4e4b\u524d\u6253\u5de5\u8fc7\u7684\u6700\u4f18\u4f4d\u7f6e\u75af\u72c2\u6253\u5de5\u76f4\u5230\u94b1\u591f\u7528\u3002 \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u8bbe\u4e00\u4e2a dp \u72b6\u6001\uff0c\u8bbe \\(dp(i,j) = \\{x, y\\}\\) \u8868\u793a\uff0c\u8d70\u5230 \\(i\\) \uff0c\u5e76\u4e14\u6700\u4f18\u70b9\u662f \\(j\\) \uff0c\u5f53\u524d\u6700\u5c0f\u6253\u5de5\u6b21\u6570\u4e3a \\(x\\) \uff0c\u5728\u6b64\u524d\u63d0\u4e0b\u6700\u5927\u5269\u4f59\u94b1\u6570\u4e3a \\(y\\) . \u8fd9\u4e2a\u663e\u7136\u5c31 Dijkstra \u8f6c\u79fb\u4e00\u4e0b\u5c31\u884c\uff0c\u6b63\u786e\u6027\u53ef\u4ee5\u901a\u8fc7 Exchange Argument \u8bc1\u660e\u8fd9\u4e2a\u7ed3\u8bba\uff1a\u5982\u679c \\(x\\) \u66f4\u5c0f\uff0c\u54ea\u6015 \\(y\\) \u66f4\u5c0f\uff0c\u8fd9\u4e2a\u72b6\u6001\u4f9d\u65e7\u662f\u4f18\u79c0\u7684\uff0c\u6765\u5f97\u5230\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 // author : black_trees #include <cmath> #include <queue> #include <cstdio> #include <cstring> #include <utility> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; using pii = std :: pair < int , int > ; const int si_n = 8e2 + 10 ; const int si_m = 3e3 + 10 ; const int inf = 0x3f3f3f3f3f3f3f3fll ; int n , m , p ; pii dp [ si_n ][ si_n ]; int tot = 0 , head [ si_n ]; struct Edge { int ver , Next , w ; } e [ si_m << 1 ]; inline void add ( int u , int v , int w ) { e [ tot ] = ( Edge ){ v , head [ u ], w }, head [ u ] = tot ++ ; } int ww [ si_n ]; std :: priority_queue < std :: pair < pii , pii >> q ; void dijkstra () { for ( int i = 0 ; i <= n ; ++ i ) { for ( int j = 0 ; j <= n ; ++ j ) { dp [ i ][ j ] = make_pair ( - inf , - inf ); } } dp [ 1 ][ 0 ] = make_pair ( 0 , p ), q . push ( make_pair ( make_pair ( 0 , p ), make_pair ( 1 , 0 ))); while ( ! q . empty ()) { auto fr = q . top (). first ; auto sc = q . top (). second ; q . pop (); int u = sc . first , o = sc . second ; if ( dp [ u ][ o ] > fr ) continue ; if ( ww [ u ] > ww [ o ]) o = u ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver , w = e [ i ]. w ; auto nfr = fr ; if ( nfr . second < w ) { int rest = w - nfr . second ; int tim = ceil (( rest * 1.0 ) / ( 1.0 * ww [ o ])); nfr . first -= tim , nfr . second += tim * ww [ o ]; } nfr . second -= w ; if ( dp [ v ][ o ] < nfr ) q . push ( make_pair ( dp [ v ][ o ] = nfr , make_pair ( v , o ))); } } } signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { cin >> n >> m >> p ; for ( int i = 0 ; i <= n ; ++ i ) head [ i ] = -1 ; while ( ! q . empty ()) q . pop (); for ( int i = 1 ; i <= n ; ++ i ) cin >> ww [ i ]; for ( int i = 1 ; i <= m ; ++ i ) { int u , v , w ; cin >> u >> v >> w ; add ( u , v , w ); } dijkstra (); pii ans = make_pair ( - inf , - inf ); for ( int i = 1 ; i <= n ; ++ i ) ans = max ( ans , dp [ n ][ i ]); if ( ans . first <= - inf ) cout << \"-1\" << endl ; else cout << - ans . first << endl ; } return 0 ; }","title":"1D - The way home"},{"location":"rec/atcf-for-2023-03-04/#cfr-858","text":"Contest Id: 1806","title":"CFR #858"},{"location":"rec/atcf-for-2023-03-04/#a","text":"\u9898\u9762\u6682\u7565\u3002 \u628a\u7ed9\u5b9a\u7684 \\((c, d)\\) \u5206\u5230\u56db\u4e2a\u533a\u57df\u3002 \u5982\u679c\u5728 \\((a, b)\\) \u7684\u4e0b\u9762\u663e\u7136\u4e0d\u53ef\u884c\uff08 \\(b > d\\) \uff09 \u7136\u540e\u5982\u679c\u5728 \\(a\\) \u7684\u53f3\u4fa7\uff0c\u8003\u8651 \\(c - a\\) \u662f\u5426\u5927\u4e8e \\(d - b\\) \uff0c\u5982\u679c\u6210\u7acb\u4e5f\u65e0\u89e3\uff0c\u8fd9\u4e2a\u663e\u7136\u3002 \u7136\u540e\u5269\u4e0b\u7684\u4e24\u79cd\u60c5\u51b5\u5c31\u7ed9 \\(y\\) \u51d1\u4e00\u4e0b\u5c31\u884c\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { i64 a , b , c , d ; cin >> a >> b >> c >> d ; if ( b > d ) { cout << \"-1\" << endl ; continue ; } i64 ansy = d - b ; i64 ansx = c - a ; if ( ansx > ansy ) { cout << \"-1\" << endl ; continue ; } i64 ans = ( ansy - ansx ) + ansy ; cout << ans << endl ; } return 0 ; }","title":"A"},{"location":"rec/atcf-for-2023-03-04/#b","text":"\u9898\u9762\u6682\u7565\u3002 \u663e\u7136\u7b54\u6848\u4e3a \\(x\\in \\{0, 1, 2\\}\\) \u3002 \u7136\u540e\u5c31\u6570\u4e00\u4e0b \\(0\\) \u7684\u4e2a\u6570\uff0c\u6570\u4e00\u4e0b\u662f\u4e0d\u662f\u5b58\u5728\u5927\u4e8e \\(1\\) \u7684\u6570\u5c31\u884c\u3002 \u7136\u540e\u968f\u4fbf\u600e\u4e48\u6784\u9020\u5c31\u597d\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 // author : black_trees #include <cmath> #include <bitset> #include <cstdio> #include <vector> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { int n ; cin >> n ; std :: vector < int > a ( n + 1 ); std :: bitset < 400010 > b ; b . reset (); int cnt0 = 0 , f = 0 ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], cnt0 += ( a [ i ] == 0 ), f += ( a [ i ] > 1 ); if ( cnt0 - 1 <= n - cnt0 ) { cout << \"0\" << endl ; continue ; } if ( f || cnt0 == n ) { cout << \"1\" << endl ; continue ; }; cout << \"2\" << endl ; } return 0 ; }","title":"B"},{"location":"rec/atcf-for-2023-03-04/#c","text":"\u9898\u9762\u6682\u7565\u3002 \u6ce8\u610f\u5230\u6ee1\u8db3\u6761\u4ef6\u7684 \\(q\\) \u53ea\u80fd\u662f\u4e24\u79cd\u60c5\u51b5 \u5168\u90e8\u662f \\(0\\) \u3002 \u5982\u679c \\(n \\equiv 0 \\pmod 2\\) \uff0c\u90a3\u4e48 \\(2n - 1\\) \u4e2a \\(-1\\) \uff0c\u4e00\u4e2a \\(n\\) \u5c31\u6ee1\u8db3\u6761\u4ef6\u3002 \u7136\u540e \\(n = 1, n = 2\\) \u7684\u65f6\u5019\u8fd8\u6709\u7279\u6b8a\u60c5\u51b5\uff08\u9898\u76ee\u89e3\u91ca\u91cc\u5c31\u53ea\u7ed9\u4e86\u8fd9\u4e24\u79cd\uff0cYunQian \u4f60\u597d\u6076\u6bd2\u3002\uff09 \u4e8e\u662f\u56db\u79cd\u53ef\u80fd\u5206\u522b\u5224\u65ad\u4e00\u4e0b\u5c31\u884c\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int n , a [ si << 1 ]; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { cin >> n ; for ( int i = 1 ; i <= n * 2 ; ++ i ) cin >> a [ i ]; sort ( a + 1 , a + 1 + n + n ); int ans = 0 ; for ( int i = 1 ; i <= n * 2 ; ++ i ) ans += abs ( a [ i ]); if ( n == 1 ) ans = min ( ans , abs ( a [ 1 ] - a [ 2 ])); if ( n == 2 ) ans = min ( ans , min ( abs ( a [ 1 ] - 2 ) + abs ( a [ 2 ] - 2 ) + abs ( a [ 3 ] - 2 ) + abs ( a [ 4 ] - 2 ), abs ( a [ 1 ] + 1 ) + abs ( a [ 2 ] + 1 ) + abs ( a [ 3 ] + 1 ) + abs ( a [ 4 ] - 2 ))); if ( n % 2 == 0 ) { int ret = 0 ; for ( int i = 1 ; i < n * 2 ; ++ i ) { ret += abs ( a [ i ] + 1 ); } ret += abs ( a [ n * 2 ] - n ); ans = min ( ans , ret ); } cout << ans << endl ; } return 0 ; }","title":"C"},{"location":"rec/atcf-for-2023-03-04/#d","text":"\u9898\u9762\u8bf4\u7684\u6709\u70b9\u62bd\u8c61\uff0c\u627e\u522b\u4eba\u7684\u7ffb\u8bd1\u4f30\u8ba1\u4e00\u65f6\u534a\u4f1a\u4e5f\u770b\u4e0d\u61c2\uff0c\u8fd8\u662f\u81ea\u5df1\u5199\u9898\u9762\u597d\u4e86\u3002 \u7ed9\u5b9a\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684 0/1 \u5e8f\u5217 \\(a\\) \uff0c\u5047\u5b9a\u6709\u4e00\u4e2a \\(1 \\sim m - 1\\) \u7684\u6392\u5217 \\(p\\) \uff0c\u5b9a\u4e49\u6392\u5217 \\(p\\) \u7684\u8d21\u732e\u4e3a\u4e00\u5f20\u7531 \\(a, p\\) \u751f\u6210\u7684\u6709\u5411\u56fe \\(G\\) \u4e2d\uff0c\u8282\u70b9 \\(1\\) \u7684\u5165\u5ea6\u3002 \\(G\\) \u7684\u751f\u6210\u65b9\u5f0f\u5982\u4e0b\uff1a Step1: \u5728\u56fe \\(G\\) \u4e0a\u521d\u59cb\u5316\u4e00\u4e2a\u6709 \\(m\\) \u4e2a\u8282\u70b9\u7684\u5e76\u67e5\u96c6\u3002 Step2: \u5bf9\u4e8e \\(\\forall i \\in 1 \\sim m - 1\\) \uff0c\u9009\u62e9 \\(p_i, p_i + 1\\) \u6240\u5728\u7684\u4e24\u4e2a\u8054\u901a\u5757 \\(U, V\\) \uff0c\u5408\u5e76\u4ed6\u4eec\u3002 Step3: \u5e76\u4e14\uff0c\u5982\u679c \\(a_{p_i} = 0\\) \uff0c\u90a3\u4e48\u4ee4 \\(V\\) \u7684 root \u6307\u5411 \\(U\\) \u7684 root\uff0c\u5426\u5219\u53cd\u4e4b\u3002\uff08\u8fd9\u91cc\u7684\u6307\u5411\u5c31\u662f\u8fde\u4e00\u6761\u6709\u5411\u8fb9\uff09 \u7ed9\u5b9a \\(N\\) \uff0c\u4ee4 \\(n = N - 1\\) \uff0c\u5bf9\u4e8e \\(\\forall k \\in [1, N)\\) \uff0c\u4f60\u9700\u8981\u6c42\u51fa\u957f\u5ea6\u4e3a \\(k\\) \u7684\u6240\u6709\u6392\u5217\u7684\u8d21\u732e\u4e4b\u548c\uff0c\u5bf9 \\(998244353\\) \u53d6\u6a21\u3002 \\(2\\le N \\le 5 \\times 10^5\\) \uff0c\u591a\u7ec4\u6570\u636e\u3002 \u611f\u89c9\u662f\u9001\u5206\u9898\uff0c\u4e0d\u77e5\u9053\u4e3a\u5565\u8d5b\u65f6\u6ca1\u51e0\u4e2a\u4eba\u505a\uff0c\u601d\u60f3\u548c\u4e4b\u524d\u90a3\u4e2a\uff0cABC290F - Maximum Diameter \u5f88\u50cf\u3002 \u663e\u7136\u6211\u4eec\u53ef\u4ee5\u8ba8\u8bba\u4efb\u610f\u4e00\u79cd\u6392\u5217\uff0c\u7136\u540e\u7b97\u65b9\u6848\u6570\uff0c\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u5047\u8bbe\uff0c\u6bcf\u6b21\u52a0\u5165\u7684\u70b9\u5bf9\u90fd\u662f \\((i - 1, i)\\) \u7684\u5f62\u5f0f\uff0c\u8fd9\u6837\u7684\u6392\u5217\u663e\u7136\u5b58\u5728\u3002 \u6211\u4eec\u8003\u8651\u65b0\u52a0\u5165\u4e00\u4e2a\u70b9\u5bf9 \\((i - 1, i)\\) \u4e4b\u540e\uff0c\u5bf9\u4e8e\u7b54\u6848\u7684\u8d21\u732e\u662f\u4ec0\u4e48\u3002 \u663e\u7136\u5982\u679c\u80fd\u5bf9\u7b54\u6848\u6709\u8d21\u732e\uff0c\u9700\u8981\u6b64\u65f6\u7684 \\(1\\) \u4e3a\u5e76\u67e5\u96c6\u7684\u6811\u6839\u3002 \u6211\u4eec\u8bb0 \\(g(i)\\) \u8868\u793a \\(1 \\sim i\\) \u5df2\u7ecf\u52a0\u5165\u5e76\u67e5\u96c6\u65f6\u7684\u7b54\u6848\uff0c\u663e\u7136\u6709 \\(g(i) = g(i - 1) \\times i + val\\) \uff0c\u5176\u4e2d \\(val\\) \u4e3a\u5f53\u524d\u8fd9\u4e2a\u70b9\u5bf9 \\((i - 1, i)\\) \u7684\u8d21\u732e\u3002 \u90a3\u4e48\uff0c\u5982\u679c \\(a_i = 0\\) \uff0c\u8fd9\u4e2a\u70b9\u5bf9\u663e\u7136\u4f1a\u505a\u51fa\u8d21\u732e \\(1\\) \uff0c\u6211\u4eec\u4e58\u4e0a\u65b9\u6848\u6570\u5c31\u884c\uff0c\u53cd\u4e4b\u5b83\u4e0d\u4f1a\u505a\u51fa\u8d21\u732e\u3002 \u8fd9\u4e2a\u65b9\u6848\u6570\u5e94\u5f53\u662f\uff0c\u4ee5 \\(1 \\sim i\\) \u7ec4\u6210\u7684\u5e76\u67e5\u96c6\uff0c\u4e14 \\(1\\) \u4e3a\u6839\u7684\u65b9\u6848\u6570\uff0c\u6211\u4eec\u8bb0\u8fd9\u4e2a\u503c\u4e3a \\(f(i)\\) \uff0c\u8003\u8651\u52a0\u5165 \\(i\\) \u7684\u65f6\u5019\u662f\u4e0d\u662f\u6307\u5411 \\(i - 1\\) \u7684\u6839\u5373\u53ef\u5f97\u5230 \\(f\\) \u7684\u8ba1\u7b97\u5f0f\uff1a \\(f(i) = f(i - 1) \\times (i - [a_i = 1])\\) \u3002 \u6700\u7ec8 \\(g\\) \u7684\u9012\u63a8\u5f0f\u662f\uff1a \\(g(i) = g(i - 1) \\times i + f(i) \\times [a_i = 0]\\) \uff0c\u8fb9\u754c \\(f(0) = 1, g(0) = 0\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 // author : black_trees #include <cmath> #include <cstdio> #include <cassert> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; using ldb = long double ; using u64 = unsigned long long ; constexpr i64 safe_mod ( i64 x , i64 m ) { return x %= m , x < 0 ? x + m : x ; } constexpr i64 pow_mod_constexpr ( i64 x , i64 n , int m ) { if ( m == 1 ) return 0 ; unsigned _m = m ; uint64_t r = 1 , _x = safe_mod ( x , m ); for (; n ; n >>= 1 , _x = _x * _x % _m ) if ( n & 1 ) r = r * _x % m ; return r ; } constexpr bool is_prime_constexpr ( int n ) { if ( n <= 1 ) return false ; if ( n == 2 || n == 7 || n == 61 ) return true ; if ( n % 2 == 0 ) return false ; i64 d = n - 1 ; while ( ~ d & 1 ) d /= 2 ; for ( i64 a : { 2 , 7 , 61 }) { i64 t = d , y = pow_mod_constexpr ( a , t , n ); while ( t != n - 1 && y != 1 && y != n - 1 ) y = y * y % n , t <<= 1 ; if ( y != n - 1 && t % 2 == 0 ) return false ; } return true ; } constexpr pair < i64 , i64 > inv_gcd ( i64 a , i64 b ) { a = safe_mod ( a , b ); if ( a == 0 ) return { b , 0 }; i64 s = b , t = a , m0 = 0 , m1 = 1 ; while ( t ) { i64 u = s / t ; s -= t * u , m0 -= m1 * u ; i64 tmp = s ; s = t , t = tmp , tmp = m0 , m0 = m1 , m1 = tmp ; } if ( m0 < 0 ) m0 += b / s ; return { s , m0 }; } struct Barrett_Reduction { unsigned m ; uint64_t im ; Barrett_Reduction ( unsigned m ) : m ( m ), im ( ~ 0ull / m + 1 ) {} unsigned mul ( unsigned a , unsigned b ) const { uint64_t z = ( uint64_t ) a * b , x = ( __uint128_t ) z * im >> 64 ; unsigned v = z - x * m ; return m <= v ? v + m : v ; } }; template < int m > struct static_modint { using _mint = static_modint ; public : static _mint raw ( int v ) { _mint x ; return x . _v = v , x ; } static_modint () : _v ( 0 ) {} template < class __Tp > static_modint ( __Tp v ) { i64 x = v % m ; _v = x < 0 ? x + m : x ; } unsigned val () const { return _v ; } _mint & operator ++ () { if ( ++ _v == m ) _v = 0 ; return * this ; } _mint & operator -- () { if ( ! _v -- ) _v = m - 1 ; return * this ; } _mint operator ++ ( int ) { _mint res = * this ; ++* this ; return res ; } _mint operator -- ( int ) { _mint res = * this ; --* this ; return res ; } _mint & operator += ( const _mint & rhs ) { _v += rhs . _v ; if ( _v >= m ) _v -= m ; return * this ; } _mint & operator -= ( const _mint & rhs ) { _v -= rhs . _v ; if ( _v >= m ) _v += m ; return * this ; } _mint & operator *= ( const _mint & rhs ) { uint64_t z = _v ; z *= rhs . _v , _v = z % m ; return * this ; } _mint & operator /= ( const _mint & rhs ) { return * this = * this * rhs . inv (); } _mint operator + () const { return * this ; } _mint operator - () const { return _mint () - * this ; } _mint pow ( i64 n ) const { assert ( 0 <= n ); _mint x = * this , r = 1 ; for (; n ; n >>= 1 , x *= x ) if ( n & 1 ) r *= x ; return r ; } _mint inv () const { if ( prime ) { assert ( _v ); return pow ( m - 2 ); } else { auto eg = inv_gcd ( _v , m ); assert ( eg . first == 1 ); return eg . second ; } } friend _mint operator + ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) += rhs ; } friend _mint operator - ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) -= rhs ; } friend _mint operator * ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) *= rhs ; } friend _mint operator / ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) /= rhs ; } friend bool operator == ( const _mint & lhs , const _mint & rhs ) { return lhs . _v == rhs . _v ; } friend bool operator != ( const _mint & lhs , const _mint & rhs ) { return lhs . _v != rhs . _v ; } private : unsigned _v ; static constexpr bool prime = is_prime_constexpr ( m ); }; struct dynamic_modint { using _mint = dynamic_modint ; public : static void set_mod ( int m ) { assert ( 1 <= m ), bt = Barrett_Reduction ( m ); } static _mint raw ( int v ) { _mint x ; return x . _v = v , x ; } dynamic_modint () : _v ( 0 ) {} template < class __Tp > dynamic_modint ( __Tp v ) { i64 x = v % ( int ) bt . m ; _v = x < 0 ? x + bt . m : x ; } unsigned val () const { return _v ; } _mint & operator ++ () { if ( ++ _v == bt . m ) _v = 0 ; return * this ; } _mint & operator -- () { if ( ! _v -- ) _v = bt . m - 1 ; return * this ; } _mint operator ++ ( int ) { _mint res = * this ; ++* this ; return res ; } _mint operator -- ( int ) { _mint res = * this ; --* this ; return res ; } _mint & operator += ( const _mint & rhs ) { _v += rhs . _v ; if ( _v >= bt . m ) _v -= bt . m ; return * this ; } _mint & operator -= ( const _mint & rhs ) { _v += bt . m - rhs . _v ; if ( _v >= bt . m ) _v -= bt . m ; return * this ; } _mint & operator *= ( const _mint & rhs ) { _v = bt . mul ( _v , rhs . _v ); return * this ; } _mint & operator /= ( const _mint & rhs ) { return * this = * this * rhs . inv (); } _mint operator + () const { return * this ; } _mint operator - () const { return _mint () - * this ; } _mint pow ( i64 n ) const { assert ( 0 <= n ); _mint x = * this , r = 1 ; for (; n ; n >>= 1 , x *= x ) if ( n & 1 ) r *= x ; return r ; } _mint inv () const { auto eg = inv_gcd ( _v , bt . m ); assert ( eg . first == 1 ); return eg . second ; } friend _mint operator + ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) += rhs ; } friend _mint operator - ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) -= rhs ; } friend _mint operator * ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) *= rhs ; } friend _mint operator / ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) /= rhs ; } friend bool operator == ( const _mint & lhs , const _mint & rhs ) { return lhs . _v == rhs . _v ; } friend bool operator != ( const _mint & lhs , const _mint & rhs ) { return lhs . _v != rhs . _v ; } private : unsigned _v ; static Barrett_Reduction bt ; }; using modint = dynamic_modint ; using barrett = Barrett_Reduction ; barrett modint :: bt = 998244353 ; const int si = 5e5 + 10 ; int n , a [ si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { cin >> n ; modint f = 1 , g = 0 ; for ( int i = 1 ; i < n ; ++ i ) cin >> a [ i ]; for ( int i = 1 ; i < n ; ++ i ) { g = i * g + ( a [ i ] == 0 ) * f ; cout << g . val () << \" \\n \" [ i == n ]; f = f * ( i - a [ i ]); } } return 0 ; }","title":"D"},{"location":"rec/atcf-for-2023-03-04/#e","text":"\u9898\u9762\u6682\u7565\u3002 \u4e0d\u4f1a\u3002","title":"E"},{"location":"rec/convex-opt-practice/","text":"\u4efb\u52a1\u5b89\u63921 \u03c8(\uff40\u2207\u00b4)\u03c8 \\(n\\) \u4e2a\u4efb\u52a1\u6392\u6210\u4e00\u4e2a\u5e8f\u5217\u5728\u4e00\u53f0\u673a\u5668\u4e0a\u7b49\u5f85\u5b8c\u6210\uff08\u987a\u5e8f\u4e0d\u5f97\u6539\u53d8\uff09\uff0c\u8fd9 \\(n\\) \u4e2a\u4efb\u52a1\u88ab\u5206\u6210\u82e5\u5e72\u6279\uff0c\u6bcf\u6279\u5305\u542b\u76f8\u90bb\u7684\u82e5\u5e72\u4efb\u52a1\u3002 \u4ece\u96f6\u65f6\u523b\u5f00\u59cb\uff0c\u8fd9\u4e9b\u4efb\u52a1\u88ab\u5206\u6279\u52a0\u5de5\uff0c\u7b2c \\(i\\) \u4e2a\u4efb\u52a1\u5355\u72ec\u5b8c\u6210\u6240\u9700\u7684\u65f6\u95f4\u4e3a \\(t_i\\) \u3002\u5728\u6bcf\u6279\u4efb\u52a1\u5f00\u59cb\u524d\uff0c\u673a\u5668\u9700\u8981\u542f\u52a8\u65f6\u95f4 \\(s\\) \uff0c\u800c\u5b8c\u6210\u8fd9\u6279\u4efb\u52a1\u6240\u9700\u7684\u65f6\u95f4\u662f\u5404\u4e2a\u4efb\u52a1\u9700\u8981\u65f6\u95f4\u7684\u603b\u548c\uff08\u540c\u4e00\u6279\u4efb\u52a1\u5c06\u5728\u540c\u4e00\u65f6\u523b\u5b8c\u6210\uff09\u3002 \u6bcf\u4e2a\u4efb\u52a1\u7684\u8d39\u7528\u662f\u5b83\u7684\u5b8c\u6210\u65f6\u523b\u4e58\u4ee5\u4e00\u4e2a\u8d39\u7528\u7cfb\u6570 \\(c_i\\) \u3002\u8bf7\u786e\u5b9a\u4e00\u4e2a\u5206\u7ec4\u65b9\u6848\uff0c\u4f7f\u5f97\u603b\u8d39\u7528\u6700\u5c0f\u3002 \\(n\\le 5000,1\\le s \\le 50,1\\le t_i,c_i \\le 100\\) \u8bbe \\(dp(i, j)\\) \u8868\u793a\uff0c\u8003\u8651\u524d \\(i\\) \u4e2a\u4f4d\u7f6e\uff0c\u5206\u4e86 \\(j\\) \u6bb5\u7684\u6700\u5927\u4ef7\u503c\u3002 \u6839\u636e\u5b9a\u4e49\uff0c\u679a\u4e3e\u4e0a\u4e00\u4e2a\u4f4d\u7f6e \\(k\\) \uff0c\u53ef\u4ee5\u5f97\u5230\u65b9\u7a0b\uff1a \\(dp(i, j) = \\min\\limits_{k = 0}^{i - 1}\\{dp(k, j - 1) + \\sum\\limits_{l = k + 1}^i c(l) \\times (s \\times j + \\sum\\limits_{l = 1}^{i} t(i))\\}\\) \u3002 \u9884\u5904\u7406\u524d\u7f00\u548c\uff0c\u53ef\u4ee5\u505a\u5230 \\(O(n^3)\\) \u3002 \u4e0d\u8fc7\u6ce8\u610f\u5230\u672c\u9898\u5e76\u4e0d\u8981\u6c42\u5206\u591a\u5c11\u6bb5\uff0c\u7528 Fence \u7684\u601d\u8def\u53ef\u4ee5\u6539\u8fdb\u4e00\u4e0b\uff1a \u8bbe \\(dp(i)\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\u4f4d\u7f6e\uff0c\u5206\u4e86\u82e5\u5e72\u6bb5\u7684\u4ee3\u4ef7\u6700\u5c0f\u503c\uff0c\u679a\u4e3e\u4e0a\u4e00\u4e2a\u4f4d\u7f6e \\(j\\) \u5373\u53ef\u8f6c\u79fb\u3002 \u4f46\u662f\u8f6c\u79fb\u7684\u65f6\u5019\u5e76\u4e0d\u80fd\u77e5\u9053\u673a\u5668\u542f\u52a8\u4e86\u591a\u5c11\u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u7528\u4e00\u79cd\u53eb\u8d39\u7528\u63d0\u524d\u8ba1\u7b97\u7684\u601d\u60f3\uff0c\u77e5\u9053\u8fd9\u91cc\u5df2\u7ecf\u542f\u52a8\u4e86\u4e00\u6b21\u4e86\uff0c\u5c31\u628a\u5b83\u4f1a\u5bf9\u4e4b\u540e\u7684\u6240\u6709\u72b6\u6001\u505a\u7684\u8d21\u732e\u76f4\u63a5\u52a0\u5230\u5f53\u524d\u72b6\u6001\u91cc\u9762\uff0c\u4e5f\u5c31\u662f\uff0c\u5bf9\u4e8e\u540e\u9762\u7684\u6240\u6709\u4efb\u52a1\uff0c\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e9b\u4efb\u52a1\u53c8\u591a\u51fa\u4e86 \\(s\\) \u7684\u65f6\u95f4\uff0c\u90a3\u4e48\u51b3\u7b56\u5230\u540e\u9762\u7684\u4efb\u52a1\u65f6\uff0c\u5f71\u54cd\u5c31\u88ab\u6d88\u9664\u4e86\u3002 \u53ef\u4ee5\u5f97\u5230\uff1a \\(dp(i) = \\min\\limits_{j = 0}^{i - 1} \\{dp(j) + \\sum\\limits_{k = j + 1}^{n} c(k) \\times s + \\sum\\limits_{k = j + 1}^{i} c(k) \\times \\sum\\limits_{k = 1}^{i} t(i)\\}\\) \u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u662f\u628a\u4e0a\u9762\u90a3\u4e2a\u65b9\u7a0b\u7684 \\(s \\times j \\times \\sum\\limits_{l = k + 1}^{i} c(l)\\) \u79fb\u52a8\u5230\u524d\u9762\u7684\u72b6\u6001\u8fdb\u884c\u8ba1\u7b97\u4e86\u3002 \u590d\u6742\u5ea6 \\(O(n^2)\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; const int si = 5e3 + 10 ; const int inf = 0x3f3f3f3f3f3f3f3fll ; int n , s ; int t [ si ], c [ si ]; int st [ si ], sc [ si ]; int dp [ si ]; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); memset ( dp , 0x3f , sizeof dp ); dp [ 0 ] = st [ 0 ] = sc [ 0 ] = 0 , cin >> n >> s ; for ( int i = 1 ; i <= n ; ++ i ) cin >> t [ i ] >> c [ i ], st [ i ] = st [ i - 1 ] + t [ i ], sc [ i ] = sc [ i - 1 ] + c [ i ]; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 0 ; j < i ; ++ j ) { dp [ i ] = min ( dp [ i ], dp [ j ] + ( sc [ n ] - sc [ j ]) * s + ( sc [ i ] - sc [ j ]) * st [ i ]); } } cout << dp [ n ] << endl ; return 0 ; } \u4efb\u52a1\u5b89\u63922 \u03c8(\uff40\u2207\u00b4)\u03c8 \\(n\\) \u4e2a\u4efb\u52a1\u6392\u6210\u4e00\u4e2a\u5e8f\u5217\u5728\u4e00\u53f0\u673a\u5668\u4e0a\u7b49\u5f85\u5b8c\u6210\uff08\u987a\u5e8f\u4e0d\u5f97\u6539\u53d8\uff09\uff0c\u8fd9 \\(n\\) \u4e2a\u4efb\u52a1\u88ab\u5206\u6210\u82e5\u5e72\u6279\uff0c\u6bcf\u6279\u5305\u542b\u76f8\u90bb\u7684\u82e5\u5e72\u4efb\u52a1\u3002 \u4ece\u96f6\u65f6\u523b\u5f00\u59cb\uff0c\u8fd9\u4e9b\u4efb\u52a1\u88ab\u5206\u6279\u52a0\u5de5\uff0c\u7b2c \\(i\\) \u4e2a\u4efb\u52a1\u5355\u72ec\u5b8c\u6210\u6240\u9700\u7684\u65f6\u95f4\u4e3a \\(t_i\\) \u3002\u5728\u6bcf\u6279\u4efb\u52a1\u5f00\u59cb\u524d\uff0c\u673a\u5668\u9700\u8981\u542f\u52a8\u65f6\u95f4 \\(s\\) \uff0c\u800c\u5b8c\u6210\u8fd9\u6279\u4efb\u52a1\u6240\u9700\u7684\u65f6\u95f4\u662f\u5404\u4e2a\u4efb\u52a1\u9700\u8981\u65f6\u95f4\u7684\u603b\u548c\uff08\u540c\u4e00\u6279\u4efb\u52a1\u5c06\u5728\u540c\u4e00\u65f6\u523b\u5b8c\u6210\uff09\u3002 \u6bcf\u4e2a\u4efb\u52a1\u7684\u8d39\u7528\u662f\u5b83\u7684\u5b8c\u6210\u65f6\u523b\u4e58\u4ee5\u4e00\u4e2a\u8d39\u7528\u7cfb\u6570 \\(c_i\\) \u3002\u8bf7\u786e\u5b9a\u4e00\u4e2a\u5206\u7ec4\u65b9\u6848\uff0c\u4f7f\u5f97\u603b\u8d39\u7528\u6700\u5c0f\u3002 \\(n \\le 3\\times 10^5,1\\le s \\le 512,1\\le t_i,c_i \\le 512\\) \u8003\u8651\u7528\u524d\u7f00\u548c\u5199\u4e0b\u4e0a\u9762\u7684\u5f0f\u5b50\uff1a \\(dp(i) = \\min\\limits_{j = 0}^{i - 1}\\{dp(j) + (sc(n) - sc(j)) \\times s + (sc(i) - sc(j)) \\times st(i)\\}\\) \u4e58\u5f00\uff1a \\(dp(i) = \\min\\limits_{j = 0}^{i - 1}\\{dp(j) + sc(n) \\times s - sc(j) \\times s + sc(i) \\times st(i) - sc(j) \\times st(i)\\}\\) \u5957\u7528\u659c\u7387\u4f18\u5316\u7684\u677f\u5b50\uff0c\u6211\u4eec\u53bb\u6389 \\(\\min\\) \uff1a \\(dp(i) = dp(j) + sc(n) \\times s - sc(j) \\times s + sc(i) \\times st(i) - sc(j) \\times st(i)\\) \u5199\u6210\u4e00\u6b21\u51fd\u6570 \\(b = -kx + y\\) \u7684\u5f62\u5f0f\uff1a \\(dp(i) - sc(i) \\times st(i) - sc(n) \\times s = -(st(i) + s) \\times sc(j) + dp(j)\\) \u6240\u4ee5 \\((x, y)\\) \u8fd9\u4e9b\u70b9\u5c31\u662f \\((sc(j), dp(j))\\) \u7684\u5f62\u5f0f\uff0c\u6211\u4eec\u73b0\u5728\u9700\u8981\u8ba9 \\(dp(i)\\) \u5c3d\u53ef\u80fd\u7684\u5c0f\uff0c\u5c31\u662f\u8ba9\u4ee5 \\((st(i) + s)\\) \u4e3a\u659c\u7387\u7684\u76f4\u7ebf\u7ecf\u8fc7\u4e00\u4e2a\u6700\u4f18\u7684 \\((sc(j), dp(j))\\) \u3002 \u56e0\u4e3a\u4e0b\u6807\u9650\u5236\u662f \\(j \\in [0, i)\\) \uff0c \\(k_i\\) \u968f \\(i\\) \u5355\u8c03\u9012\u589e\uff0c\u4e14\u53ea\u9700\u8981\u5728\u672b\u5c3e\u63d2\u5165\u51b3\u7b56 \uff0c\u6240\u4ee5\u4e00\u4e2a\u4e00\u4e2a\u51b3\u7b56\u5b8c\u63d2\u5165\u5355\u8c03\u961f\u5217\u5c31\u597d\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; const int si = 5e3 + 10 ; const int inf = 0x3f3f3f3f3f3f3f3fll ; int n , s ; int t [ si ], c [ si ]; int st [ si ], sc [ si ], dp [ si ]; int q [ si ], l , r ; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); st [ 0 ] = sc [ 0 ] = 0 ; memset ( q , 0 , sizeof q ), l = 1 , r = 1 ; memset ( dp , 0x3f , sizeof dp ), dp [ 0 ] = 0 ; // \u8ba9 (x0, y0) \u5165\u961f\uff08j \u53ef\u4ee5\u53d6\u5230 0\uff09 // \u961f\u5217\u672c\u8eab\u8fd8\u662f\u95ed\u533a\u95f4\uff0c\u4f46\u662f\u4e3a\u4e86\u4fdd\u8bc1 l + 1, r - 1 \u4e0d\u4f1a\u8d8a\u754c\uff0c\u6240\u4ee5\u5199\u7684\u662f l < r. cin >> n >> s ; for ( int i = 1 ; i <= n ; ++ i ) cin >> t [ i ] >> c [ i ], sc [ i ] = sc [ i - 1 ] + c [ i ], st [ i ] = st [ i - 1 ] + t [ i ]; for ( int i = 1 ; i <= n ; ++ i ) { while ( l < r && dp [ q [ l + 1 ]] - dp [ q [ l ]] <= ( st [ i ] + s ) * ( sc [ q [ l + 1 ]] - sc [ q [ l ]])) ++ l ; dp [ i ] = dp [ q [ l ]] - ( st [ i ] + s ) * sc [ q [ l ]] + sc [ i ] * st [ i ] + sc [ n ] * s ; while ( l < r && ( dp [ q [ r ]] - dp [ q [ r - 1 ]]) * ( sc [ i ] - sc [ q [ r ]]) >= ( dp [ i ] - dp [ q [ r ]]) * ( sc [ q [ r ]] - sc [ q [ r - 1 ]])) -- r ; q [ ++ r ] = i ; } // \u4e3a\u4e86\u907f\u514d\u7cbe\u5ea6\u95ee\u9898\uff0c\u76f4\u63a5\u628a\u659c\u7387\u7684\u5f0f\u5b50\u5199\u51fa\u6765\uff0c\u5206\u6bcd\u4e58\u5230\u5bf9\u9762\u3002 cout << dp [ n ] << endl ; return 0 ; } \u4efb\u52a1\u5b89\u63923 \u03c8(\uff40\u2207\u00b4)\u03c8 \\(n\\) \u4e2a\u4efb\u52a1\u6392\u6210\u4e00\u4e2a\u5e8f\u5217\u5728\u4e00\u53f0\u673a\u5668\u4e0a\u7b49\u5f85\u5b8c\u6210\uff08\u987a\u5e8f\u4e0d\u5f97\u6539\u53d8\uff09\uff0c\u8fd9 \\(n\\) \u4e2a\u4efb\u52a1\u88ab\u5206\u6210\u82e5\u5e72\u6279\uff0c\u6bcf\u6279\u5305\u542b\u76f8\u90bb\u7684\u82e5\u5e72\u4efb\u52a1\u3002 \u4ece\u96f6\u65f6\u523b\u5f00\u59cb\uff0c\u8fd9\u4e9b\u4efb\u52a1\u88ab\u5206\u6279\u52a0\u5de5\uff0c\u7b2c \\(i\\) \u4e2a\u4efb\u52a1\u5355\u72ec\u5b8c\u6210\u6240\u9700\u7684\u65f6\u95f4\u4e3a \\(t_i\\) \u3002\u5728\u6bcf\u6279\u4efb\u52a1\u5f00\u59cb\u524d\uff0c\u673a\u5668\u9700\u8981\u542f\u52a8\u65f6\u95f4 \\(s\\) \uff0c\u800c\u5b8c\u6210\u8fd9\u6279\u4efb\u52a1\u6240\u9700\u7684\u65f6\u95f4\u662f\u5404\u4e2a\u4efb\u52a1\u9700\u8981\u65f6\u95f4\u7684\u603b\u548c\uff08\u540c\u4e00\u6279\u4efb\u52a1\u5c06\u5728\u540c\u4e00\u65f6\u523b\u5b8c\u6210\uff09\u3002 \u6bcf\u4e2a\u4efb\u52a1\u7684\u8d39\u7528\u662f\u5b83\u7684\u5b8c\u6210\u65f6\u523b\u4e58\u4ee5\u4e00\u4e2a\u8d39\u7528\u7cfb\u6570 \\(c_i\\) \u3002\u8bf7\u786e\u5b9a\u4e00\u4e2a\u5206\u7ec4\u65b9\u6848\uff0c\u4f7f\u5f97\u603b\u8d39\u7528\u6700\u5c0f\u3002 \\(n \\le 3\\times 10^5,1\\le s \\le 512,1\\le |t_i|,c_i \\le 512\\) \u6ce8\u610f\u5230 \\(t_i\\) \u53ef\u80fd\u662f\u8d1f\u6570\uff0c\u610f\u5473\u7740 \\(\\exists i, st(i) < 0\\) \u3002 \u4e0b\u6807\u9650\u5236\u4f9d\u7136\u53ef\u4ee5\u4e00\u4e2a\u4e00\u4e2a\u63d2\u5165\u6765\u6ee1\u8db3\uff0c\u4f46\u662f\u56e0\u4e3a \\(k_i\\) \u4e0d\u662f\u5355\u8c03\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u6ca1\u6cd5\u76f4\u63a5\u6254\u5230\u5355\u8c03\u961f\u5217\u91cc\u9762\u5747\u644a \\(O(1)\\) \u8f6c\u79fb\uff08\u4e0d\u7136\u4f60\u66f4\u65b0\u5b8c \\(i - 1\\) \u7684\u65f6\u5019\u53ef\u80fd\u628a \\(i\\) \u7684\u6700\u4f18\u9009\u62e9\u7ed9\u5f39\u6389\uff09\u3002 \u6ce8\u610f\u5230 \\(sc(i)\\) \u4ecd\u65e7\u662f\u5355\u8c03\u7684\uff0c\u6362\u53e5\u8bdd\u8bf4\u6211\u4eec\u53ea\u9700\u8981\u652f\u6301\u5728\u672b\u5c3e\u63d2\u5165\u51b3\u7b56\u70b9. \u90a3\u4e48\u6211\u4eec\u4ecd\u65e7\u53ef\u4ee5\u4f7f\u7528\u5355\u8c03\u961f\u5217\u7ef4\u62a4\u8fd9\u4e2a\u51f8\u58f3\uff0c\u4f46\u662f\u73b0\u5728\uff0c\u6211\u4eec\u9700\u8981\u5728\u51f8\u58f3\u4e0a\u76f4\u63a5\u4e8c\u5206\u4e00\u4e2a\u4f4d\u7f6e \\(e\\) \uff0c\u4f7f\u5f97 \\(K(e - 1, e) < k_i < K(e, e + 1)\\) \u800c\u4e0d\u662f\u76f4\u63a5\u53d6\u961f\u5934\u66f4\u65b0\uff0c\u6ce8\u610f\u9700\u8981\u7279\u6b8a\u5224\u65ad\u5934\u5c3e\u3002 \u6ce8\u610f\u8fd9\u91cc\u5e94\u8be5\u662f\u5224 \\(q(mid), q(mid + 1)\\) \u6784\u6210\u7684\u76f4\u7ebf\u659c\u7387\uff0c\u4e0d\u7136\u4ee5\u8fd9\u6837\u7684\u4e8c\u5206\u65b9\u5f0f\u4f1a\u51fa\u9519\uff08\u539f\u56e0\u5f88\u7b80\u5355\uff0c\u53ef\u4ee5\u624b\u6a21\u4e00\u4e0b\uff09\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 // author : black_trees #include <cmath> #include <cstdio> #include <cctype> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; using i128 = __int128_t ; template < typename __Tp > void read ( __Tp & x ) { int f = x = 0 ; char ch = getchar (); for (; ! isdigit ( ch ); ch = getchar ()) if ( ch == '-' ) f = 1 ; for (; isdigit ( ch ); ch = getchar ()) x = ( x << 1 ) + ( x << 3 ) + ( ch ^ 48 ); if ( f ) x = - x ; } void read ( char & ch ) { for ( ch = getchar (); isspace ( ch ); ch = getchar ()); } template < typename __Tp1 , typename ... __Tp2 > void read ( __Tp1 & x , __Tp2 & ... y ) { read ( x ), read ( y ...); } template < typename __Tp > void write ( __Tp x ) { if ( x < 0 ) putchar ( '-' ), x = - x ; if ( x > 9 ) write ( x / 10 ); putchar ( x % 10 + 48 ); } void write ( char ch ) { putchar ( ch ); } void write ( const char * s ) { for (; * s ; ++ s ) putchar ( * s ); } template < typename __Tp1 , typename ... __Tp2 > void write ( __Tp1 x , __Tp2 ... y ) { write ( x ), write ( y ...); } const int si = 3e5 + 10 ; int n , q [ si ], s , l , r ; i128 dp [ si ], st [ si ], sc [ si ]; int find ( int slope ) { if ( l == r ) return q [ l ]; int L = l , R = r ; while ( L < R ) { int mid = ( L + R ) >> 1 ; if ( dp [ q [ mid + 1 ]] - dp [ q [ mid ]] <= slope * ( sc [ q [ mid + 1 ]] - sc [ q [ mid ]])) L = mid + 1 ; else R = mid ; } return q [ L ]; } int main () { // cin.tie(0) -> sync_with_stdio(false); // cin.exceptions(cin.failbit | cin.badbit); memset ( q , 0 , sizeof q ); memset ( dp , 0x3f , sizeof dp ); dp [ 0 ] = 0 , l = 1 , r = 1 ; read ( n , s ); for ( int i = 1 ; i <= n ; ++ i ) { i128 t , c ; read ( t , c ); st [ i ] = st [ i - 1 ] + t , sc [ i ] = sc [ i - 1 ] + c ; } for ( int i = 1 ; i <= n ; ++ i ) { int p = find ( s + st [ i ]); dp [ i ] = dp [ p ] - ( s + st [ i ]) * sc [ p ] + st [ i ] * sc [ i ] + s * sc [ n ]; while ( l < r && ( dp [ q [ r ]] - dp [ q [ r - 1 ]]) * ( sc [ i ] - sc [ q [ r ]]) >= ( dp [ i ] - dp [ q [ r ]]) * ( sc [ q [ r ]] - sc [ q [ r - 1 ]])) -- r ; q [ ++ r ] = i ; } write ( dp [ n ], endl ); return 0 ; } Cat Transport \u03c8(\uff40\u2207\u00b4)\u03c8 \u7279\u522b\u884c\u52a8\u961f \u03c8(\uff40\u2207\u00b4)\u03c8 \u4f60\u6709\u4e00\u652f\u7531 \\(n\\) \u540d\u9884\u5907\u5f79\u58eb\u5175\u7ec4\u6210\u7684\u90e8\u961f\uff0c\u58eb\u5175\u4ece \\(1\\) \u5230 \\(n\\) \u7f16\u53f7\uff0c\u4f60\u8981\u5c06\u4ed6\u4eec\u62c6\u5206\u6210\u82e5\u5e72\u7279\u522b\u884c\u52a8\u961f\u8c03\u5165\u6218\u573a\u3002\u51fa\u4e8e\u9ed8\u5951\u7684\u8003\u8651\uff0c\u540c\u4e00\u652f\u7279\u522b\u884c\u52a8\u961f\u4e2d\u961f\u5458\u7684\u7f16\u53f7 \u5e94\u8be5\u8fde\u7eed \uff0c\u5373\u4e3a\u5f62\u5982 \\((i, i + 1, \\cdots i + k)\\) \u7684\u5e8f\u5217\u3002\u6240\u6709\u7684\u961f\u5458\u90fd\u5e94\u8be5\u5c5e\u4e8e\u4e14\u4ec5\u5c5e\u4e8e\u4e00\u652f\u7279\u522b\u884c\u52a8\u961f\u3002 \u7f16\u53f7\u4e3a \\(i\\) \u7684\u58eb\u5175\u7684\u521d\u59cb\u6218\u6597\u529b\u4e3a \\(x_i\\) \uff0c\u4e00\u652f\u7279\u522b\u884c\u52a8\u961f\u7684\u521d\u59cb\u6218\u6597\u529b \\(X\\) \u4e3a\u961f\u5185\u58eb\u5175\u521d\u59cb\u6218\u6597\u529b\u4e4b\u548c\uff0c\u5373 \\(X = x_i + x_{i+1} + \\cdots + x_{i+k}\\) \u3002 \u901a\u8fc7\u957f\u671f\u7684\u89c2\u5bdf\uff0c\u4f60\u603b\u7ed3\u51fa\u5bf9\u4e8e\u4e00\u652f\u521d\u59cb\u6218\u6597\u529b\u4e3a \\(X\\) \u7684\u7279\u522b\u884c\u52a8\u961f\uff0c\u5176\u4fee\u6b63\u6218\u6597\u529b \\(X'= aX^2+bX+c\\) \uff0c\u5176\u4e2d \\(a,~b,~c\\) \u662f\u5df2\u77e5\u7684\u7cfb\u6570\uff08 \\(a < 0\\) \uff09\u3002 \u4f5c\u4e3a\u90e8\u961f\u7edf\u5e05\uff0c\u73b0\u5728\u4f60\u8981\u4e3a\u8fd9\u652f\u90e8\u961f\u8fdb\u884c\u7f16\u961f\uff0c\u4f7f\u5f97\u6240\u6709\u7279\u522b\u884c\u52a8\u961f\u7684\u4fee\u6b63\u6218\u6597\u529b\u4e4b\u548c\u6700\u5927\u3002\u8bd5\u6c42\u51fa\u8fd9\u4e2a\u6700\u5927\u548c\u3002 \\(1 \\leq n \\leq 10^6\\) \uff0c \\(-5 \\leq a \\leq -1\\) \uff0c \\(-10^7 \\leq b \\leq 10^7\\) \uff0c \\(-10^7 \\leq c \\leq 10^7\\) \uff0c \\(1 \\leq x_i \\leq 100\\) \u3002 \u6bd4\u8f83\u7b80\u5355\uff0c\u63a8\u51fa\u65b9\u7a0b\u5373\u53ef AC\u3002 \u8bb0 \\(s\\) \u8868\u793a \\(x\\) \u7684\u524d\u7f00\u548c\uff0c\u5199\u4e00\u4e0b\uff1a \\(dp(i) = \\max\\limits_{j = 0}^{i - 1}\\{dp(j) + a(s_i - s_j)^2 + b(s_i - s_j) + c\\}\\) \u3002 \u5206\u79bb\u4e00\u4e0b\u5c31\u884c\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; const int si = 1e6 + 10 ; int n , a , b , c ; int dp [ si ], s [ si ], q [ si ], l , r ; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); memset ( dp , -0x3f , sizeof dp ); memset ( q , 0 , sizeof q ), l = 1 , r = 1 , s [ 0 ] = dp [ 0 ] = q [ 1 ] = 0 ; cin >> n >> a >> b >> c ; for ( int i = 1 , x ; i <= n ; ++ i ) cin >> x , s [ i ] = s [ i - 1 ] + x ; for ( int i = 1 ; i <= n ; ++ i ) { while ( l < r && dp [ q [ l + 1 ]] + a * s [ q [ l + 1 ]] * s [ q [ l + 1 ]] - dp [ q [ l ]] - a * s [ q [ l ]] * s [ q [ l ]] >= ( 2 * a * s [ i ] + b ) * ( s [ q [ l + 1 ]] - s [ q [ l ]])) l ++ ; dp [ i ] = dp [ q [ l ]] + a * ( s [ i ] - s [ q [ l ]]) * ( s [ i ] - s [ q [ l ]]) + b * ( s [ i ] - s [ q [ l ]]) + c ; while ( l < r && ( dp [ q [ r ]] + a * s [ q [ r ]] * s [ q [ r ]] - dp [ q [ r - 1 ]] - a * s [ q [ r - 1 ]] * s [ q [ r - 1 ]]) * ( s [ i ] - s [ q [ r ]]) <= ( dp [ i ] + a * s [ i ] * s [ i ] - dp [ q [ r ]] - a * s [ q [ r ]] * s [ q [ r ]]) * ( s [ q [ r ]] - s [ q [ r - 1 ]])) r -- ; q [ ++ r ] = i ; } cout << dp [ n ] << endl ; return 0 ; } Print Article \u03c8(\uff40\u2207\u00b4)\u03c8 Zero has an old printer that doesn't work well sometimes. As it is antique, he still like to use it to print articles. But it is too old to work for a long time and it will certainly wear and tear, so Zero use a cost to evaluate this degree. One day Zero want to print an article which has N words, and each word i has a cost Ci to be printed. Also, Zero know that print k words in one line will cost \\((\\sum\\limits_{i = 1}^k C_i)^2 + M\\) M is a const number. Now Zero want to know the minimum cost in order to arrange the article perfectly. 0 \u2264 n \u2264 500000, 0 \u2264 M \u2264 1000 \u4e5f\u975e\u5e38\u7b80\u5355\uff0c\u76f4\u63a5\u63a8\u51fa\u65b9\u7a0b\u5957\u7528\u677f\u5b50\u5373\u53ef AC\uff1a \u8bb0 \\(s\\) \u8868\u793a \\(C\\) \u7684\u524d\u7f00\u548c\uff0c\u5219\u6709 \\(dp(i) = \\min\\limits_{j = 0}^{i - 1}\\{dp(j) + (s_i - s_j)^2 + M\\}\\) \u3002 \u7136\u540e\u62c6\u4e00\u4e0b\u5c31\u884c\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; using i128 = __int128_t ; #include <cctype> template < typename __Tp > void read ( __Tp & x ) { int f = x = 0 ; char ch = getchar (); for (; ! isdigit ( ch ); ch = getchar ()) if ( ch == '-' ) f = 1 ; for (; isdigit ( ch ); ch = getchar ()) x = ( x << 1 ) + ( x << 3 ) + ( ch ^ 48 ); if ( f ) x = - x ; } void read ( char & ch ) { for ( ch = getchar (); isspace ( ch ); ch = getchar ()); } template < typename __Tp1 , typename ... __Tp2 > void read ( __Tp1 & x , __Tp2 & ... y ) { read ( x ), read ( y ...); } template < typename __Tp > void write ( __Tp x ) { if ( x < 0 ) putchar ( '-' ), x = - x ; if ( x > 9 ) write ( x / 10 ); putchar ( x % 10 + 48 ); } void write ( char ch ) { putchar ( ch ); } void write ( const char * s ) { for (; * s ; ++ s ) putchar ( * s ); } template < typename __Tp1 , typename ... __Tp2 > void write ( __Tp1 x , __Tp2 ... y ) { write ( x ), write ( y ...); } const int si = 5e5 + 10 ; const int inf = 0x3f3f3f3f3f3f3f3fll ; int n , m ; i128 dp [ si ], s [ si ], q [ si ], l , r ; signed main () { // cin.tie(0) -> sync_with_stdio(false); // cin.exceptions(cin.failbit | cin.badbit); while ( cin >> n >> m ) { s [ 0 ] = 0 , l = r = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { i128 x ; read ( x ), s [ i ] = s [ i - 1 ] + x ; if ( s [ i ] == s [ i - 1 ]) -- i , -- n ; } for ( int i = 0 ; i <= n ; ++ i ) dp [ i ] = 0 , q [ i ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { while ( l < r && (( dp [ q [ l + 1 ]] + s [ q [ l + 1 ]] * s [ q [ l + 1 ]]) - ( dp [ q [ l ]] + s [ q [ l ]] * s [ q [ l ]])) <= ( 2 * s [ i ]) * ( s [ q [ l + 1 ]] - s [ q [ l ]])) ++ l ; dp [ i ] = dp [ q [ l ]] + s [ q [ l ]] * s [ q [ l ]] - 2 * s [ i ] * s [ q [ l ]] + s [ i ] * s [ i ] + m ; while ( l < r && (( dp [ q [ r ]] + s [ q [ r ]] * s [ q [ r ]]) - ( dp [ q [ r - 1 ]] + s [ q [ r - 1 ]] * s [ q [ r - 1 ]])) * ( s [ i ] - s [ q [ r ]]) >= (( dp [ i ] + s [ i ] * s [ i ]) - ( dp [ q [ r ]] + s [ q [ r ]] * s [ q [ r ]])) * ( s [ q [ r ]] - s [ q [ r - 1 ]])) -- r ; q [ ++ r ] = i ; } write ( dp [ n ], endl ); } return 0 ; } Lawrence \u03c8(\uff40\u2207\u00b4)\u03c8 \u9898\u9762 \u8003\u8651\u8bbe \\(dp(i, j)\\) \u8868\u793a\u5f53\u524d\u5728 \\(i\\) \uff0c\u7528\u4e86 \\(j\\) \u6b21\u7684\u64cd\u4f5c\u4ee3\u4ef7\uff1a \\(dp(i, j) = \\min\\limits_{k = 0}^{i - 1}\\{dp(k, j - 1) + w(k + 1, i)\\}\\) \u6ce8\u610f\u5230 \\(w(k + 1, i) = w(1, i) - w(1, k) - s_k \\times (s_i - s_k)\\) \u3002 \u5e26\u8fdb\u53bb\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u659c\u7387\u4f18\u5316\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; const int si = 1e3 + 10 ; int n , m ; int q [ si ], l , r ; int s [ si ], c [ si ], dp [ si ][ si ]; int j ; int Y ( int i ) { return dp [ i ][ j -1 ] + s [ i ] * s [ i ] - c [ i ]; } int dY ( int u , int v ) { return Y ( v ) - Y ( u ); } int dX ( int u , int v ) { return s [ v ] - s [ u ]; } int dV ( int u , int v ) { return dp [ u ][ j -1 ] + c [ v ] - c [ u ] - s [ u ] * ( s [ v ] - s [ u ]); } signed main () { // cin.tie(0) -> sync_with_stdio(false); // cin.exceptions(cin.failbit | cin.badbit); while ( scanf ( \"%lld%lld\" , & n , & m ) != EOF && n ) { for ( int i = 1 ; i <= n ; ++ i ) scanf ( \"%lld\" , s + i ); for ( int i = 2 ; i <= n ; ++ i ) s [ i ] += s [ i - 1 ]; for ( int i = 2 ; i <= n ; ++ i ) c [ i ] = c [ i - 1 ] + ( s [ i ] - s [ i - 1 ]) * s [ i - 1 ]; for ( int i = 1 ; i <= n ; ++ i ) dp [ i ][ 0 ] = c [ i ]; for ( j = 1 ; j <= m ; ++ j ) { l = r = 0 , q [ r ++ ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { while ( l + 1 < r && dY ( q [ l ], q [ l + 1 ]) <= s [ i ] * dX ( q [ l ], q [ l + 1 ])) ++ l ; dp [ i ][ j ] = dV ( q [ l ], i ); while ( l + 1 < r && dY ( q [ r - 1 ], i ) * dX ( q [ r - 2 ], q [ r - 1 ]) <= dY ( q [ r - 2 ], q [ r - 1 ]) * dX ( q [ r - 1 ], i )) r -- ; q [ r ++ ] = i ; } } printf ( \"%lld \\n \" , dp [ n ][ m ]); } return 0 ; } Pearls \u03c8(\uff40\u2207\u00b4)\u03c8 In Pearlania everybody is fond of pearls. One company, called The Royal Pearl, produces a lot of jewelry with pearls in it. The Royal Pearl has its name because it delivers to the royal family of Pearlania. But it also produces bracelets and necklaces for ordinary people. Of course the quality of the pearls for these people is much lower then the quality of pearls for the royal family. In Pearlania pearls are separated into 100 different quality classes. A quality class is identified by the price for one single pearl in that quality class. This price is unique for that quality class and the price is always higher then the price for a pearl in a lower quality class. Every month the stock manager of The Royal Pearl prepares a list with the number of pearls needed in each quality class. The pearls are bought on the local pearl market. Each quality class has its own price per pearl, but for every complete deal in a certain quality class one has to pay an extra amount of money equal to ten pearls in that class. This is to prevent tourists from buying just one pearl. Also The Royal Pearl is suffering from the slow-down of the global economy. Therefore the company needs to be more efficient. The CFO (chief financial officer) has discovered that he can sometimes save money by buying pearls in a higher quality class than is actually needed. No customer will blame The Royal Pearl for putting better pearls in the bracelets, as long as the prices remain the same. For example 5 pearls are needed in the 10 Euro category and 100 pearls are needed in the 20 Euro category. That will normally cost: (5+10) 10 + (100+10) 20 = 2350 Euro. Buying all 105 pearls in the 20 Euro category only costs: (5+100+10)*20 = 2300 Euro. The problem is that it requires a lot of computing work before the CFO knows how many pearls can best be bought in a higher quality class. You are asked to help The Royal Pearl with a computer program. Given a list with the number of pearls and the price per pearl in different quality classes, give the lowest possible price needed to buy everything on the list. Pearls can be bought in the requested, or in a higher quality class, but not in a lower one. The first line of the input contains the number of test cases. Each test case starts with a line containing the number of categories c (1 <= c <= 100). Then, c lines follow, each with two numbers ai and pi. The first of these numbers is the number of pearls ai needed in a class (1 <= ai <= 1000). The second number is the price per pearl pi in that class (1 <= pi <= 1000). The qualities of the classes (and so the prices) are given in ascending order. All numbers in the input are integers. \u6ca1\u6709\u5565\u597d\u8bf4\u7684\uff0c\u63a8\u51fa\u65b9\u7a0b\u5957\u4e0a\u677f\u5b50\u5373\u53ef AC\u3002 \u8bb0\u5f55 \\(s\\) \u8868\u793a\u524d \\(i\\) \u4e2a\u54c1\u8d28\u7684\u73cd\u73e0\u7684\u6570\u91cf\uff08\u524d\u7f00\u548c\uff09\u3002 \u7136\u540e\u65b9\u7a0b\uff1a \\(dp(i) = \\min\\limits_{j = 0}^{i - 1}\\{dp(j) + (s_i - s_j + 10) \\times p(i)\\}\\) Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; const int si = 1e3 + 10 ; int n ; int dp [ si ], p [ si ], s [ si ]; int q [ si ], l , r , T ; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> T ; while ( T -- ) { cin >> n , s [ 0 ] = 0 ; for ( int i = 1 , x ; i <= n ; ++ i ) cin >> x >> p [ i ], s [ i ] = s [ i - 1 ] + x ; l = r = 1 ; for ( int i = 0 ; i <= n ; ++ i ) dp [ i ] = q [ i ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { while ( l < r && ( dp [ q [ l + 1 ]] - dp [ q [ l ]]) <= p [ i ] * ( s [ q [ l + 1 ]] - s [ q [ l ]])) ++ l ; dp [ i ] = dp [ q [ l ]] - p [ i ] * s [ q [ l ]] + s [ i ] * p [ i ] + 10l l * p [ i ]; while ( l < r && ( dp [ q [ r ]] - dp [ q [ r - 1 ]]) * ( s [ i ] - s [ q [ r ]]) >= ( dp [ i ] - dp [ q [ r ]]) * ( s [ q [ r ]] - s [ q [ r - 1 ]])) -- r ; q [ ++ r ] = i ; } cout << dp [ n ] << endl ; } return 0 ; } Cash \u03c8(\uff40\u2207\u00b4)\u03c8 \u5c0fY\u6700\u8fd1\u5728\u4e00\u5bb6\u91d1\u5238\u4ea4\u6613\u6240\u5de5\u4f5c\u3002\u8be5\u91d1\u5238\u4ea4\u6613\u6240\u53ea\u53d1\u884c\u4ea4\u6613\u4e24\u79cd\u91d1\u5238\uff1aA\u7eaa\u5ff5\u5238\uff08\u4ee5\u4e0b\u7b80\u79f0A\u5238\uff09\u548c B\u7eaa\u5ff5\u5238\uff08\u4ee5\u4e0b\u7b80\u79f0B\u5238\uff09\u3002 \u6bcf\u4e2a\u6301\u6709\u91d1\u5238\u7684\u987e\u5ba2\u90fd\u6709\u4e00\u4e2a\u81ea\u5df1\u7684\u5e10\u6237\u3002\u91d1\u5238\u7684\u6570\u76ee\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b9e\u6570\u3002\u6bcf\u5929\u968f\u7740\u5e02\u573a\u7684\u8d77\u4f0f\u6ce2\u52a8\uff0c \u4e24\u79cd\u91d1\u5238\u90fd\u6709\u81ea\u5df1\u5f53\u65f6\u7684\u4ef7\u503c\uff0c\u5373\u6bcf\u4e00\u5355\u4f4d\u91d1\u5238\u5f53\u5929\u53ef\u4ee5\u5151\u6362\u7684\u4eba\u6c11\u5e01\u6570\u76ee\u3002\u6211\u4eec\u8bb0\u5f55\u7b2c K \u5929\u4e2d A\u5238 \u548c B\u5238 \u7684 \u4ef7\u503c\u5206\u522b\u4e3a AK \u548c BK\uff08\u5143/\u5355\u4f4d\u91d1\u5238\uff09\u3002\u4e3a\u4e86\u65b9\u4fbf\u987e\u5ba2\uff0c\u91d1\u5238\u4ea4\u6613\u6240\u63d0\u4f9b\u4e86\u4e00\u79cd\u975e\u5e38\u65b9\u4fbf\u7684\u4ea4\u6613\u65b9\u5f0f\uff1a\u6bd4\u4f8b\u4ea4\u6613\u6cd5 \u6bd4\u4f8b\u4ea4\u6613\u6cd5\u5206\u4e3a\u4e24\u4e2a\u65b9\u9762\uff1a\uff08a\uff09\u5356\u51fa\u91d1\u5238\uff1a\u987e\u5ba2\u63d0\u4f9b\u4e00\u4e2a [0,100] \u5185\u7684\u5b9e\u6570 OP \u4f5c\u4e3a\u5356\u51fa\u6bd4\u4f8b\uff0c\u5176\u610f\u4e49\u4e3a\uff1a\u5c06 OP% \u7684 A\u5238\u548c OP% \u7684 B\u5238 \u4ee5\u5f53\u65f6\u7684\u4ef7\u503c\u5151\u6362\u4e3a\u4eba\u6c11\u5e01\uff1b\uff08b\uff09\u4e70\u5165\u91d1\u5238\uff1a\u987e\u5ba2\u652f\u4ed8 IP \u5143\u4eba\u6c11\u5e01\uff0c\u4ea4\u6613\u6240\u5c06\u4f1a\u5151 \u6362\u7ed9\u7528\u6237\u603b\u4ef7\u503c\u4e3a IP \u7684\u91d1\u5238\uff0c\u5e76\u4e14\uff0c\u6ee1\u8db3\u63d0\u4f9b\u7ed9\u987e\u5ba2\u7684A\u5238\u548cB\u5238\u7684\u6bd4\u4f8b\u5728\u7b2c K \u5929\u6070\u597d\u4e3a RateK \u6ce8\u610f\u5230\uff0c\u540c\u4e00\u5929\u5185\u53ef\u4ee5\u8fdb\u884c\u591a\u6b21\u64cd\u4f5c\u3002\u5c0fY\u662f\u4e00\u4e2a\u5f88\u6709\u7ecf\u6d4e\u5934\u8111\u7684\u5458\u5de5\uff0c\u901a\u8fc7\u8f83\u957f\u65f6\u95f4\u7684\u8fd0\u4f5c\u548c\u884c\u60c5\u6d4b\u7b97\uff0c\u4ed6\u5df2\u7ecf \u77e5\u9053\u4e86\u672a\u6765N\u5929\u5185\u7684A\u5238\u548cB\u5238\u7684\u4ef7\u503c\u4ee5\u53caRate\u3002\u4ed6\u8fd8\u5e0c\u671b\u80fd\u591f\u8ba1\u7b97\u51fa\u6765\uff0c\u5982\u679c\u5f00\u59cb\u65f6\u62e5\u6709S\u5143\u94b1\uff0c\u90a3\u4e48N\u5929\u540e\u6700\u591a\u80fd \u591f\u83b7\u5f97\u591a\u5c11\u5143\u94b1\u3002 0<AK\u226410\uff1b0<BK\u226410\uff1b0<RateK\u2264100\uff1bMaxProfit\u226410^9\u3002 \u7b54\u6848\u4fdd\u75593\u4f4d\u5c0f\u6570\u3002 Cdq \u795e\u63d0\u51fa CDQ \u5206\u6cbb\u7684\u9898\u76ee\uff0c\u6240\u4ee5\u7406\u6240\u5f53\u7136\u7684\u6211\u4eec\u7528 CDQ \u7ef4\u62a4\u3002 \u9996\u5148\u6ce8\u610f\u5230\uff0c\u5982\u679c\u67d0\u4e00\u5929\u4ee3\u4ef7\u5f88\u4f18\uff0c\u90a3\u6211\u4eec\u4e00\u5b9a\u75af\u72c2\u4e70\u5165\u6216\u8005\u75af\u72c2\u5356\u51fa\u3002 \u57fa\u4e8e\u8fd9\u4e2a\u53ef\u4ee5\u8bbe\u8ba1\u4e00\u4e2a dp\uff1a \u8bbe \\(dp(i)\\) \u8868\u793a\u7b2c \\(i\\) \u5929\u6240\u62e5\u6709\u7684\u6700\u5927\u94b1\u6570\uff0c \\(x_i\\) \u4e3a\u7b2c \\(i\\) \u5929\u53ef\u4ee5\u7528 \\(dp(i)\\) \u5151\u6362\u7684 A \u6570\u91cf\uff0c \\(y_i\\) \u5b9a\u4e49\u7c7b\u4f3c\u3002 \u5219\uff1a \\(x_i = \\dfrac{dp(i) \\times R_i}{a_iR_i+b_i}, y_i = \\dfrac{dp(i)}{a_iR_i+b_i}\\) \u3002 \u8f6c\u79fb\u5206\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u5f53\u524d\u4e0d\u4e70\uff1a \\(dp(i - 1) \\to dp(i)\\) \u3002 \u5426\u5219\u679a\u4e3e\u4e0a\u4e00\u6b21\u4e70\u5165\u7684\u65f6\u95f4\uff0c\u5728\u4eca\u5929\u75af\u72c2\u5356\u51fa\uff1a \\(dp(i) = \\max\\limits_{j = 1}^i\\{a_ix_j + b_iy_j\\}\\) \u628a \\(b_i\\) \u62c9\u51fa\u6765\uff1a \\(dp(i) / b_i = \\dfrac{a_i}{b_i}x_j + y_j\\) \u3002 \u7136\u540e\u5c31\u53ef\u4ee5\u659c\u7387\u4f18\u5316\u4e86\uff0c\u6ce8\u610f\u5230\u659c\u7387\u548c\u51b3\u7b56\u70b9\u6a2a\u5750\u6807\u90fd\u662f\u4e0d\u5355\u8c03\u7684\uff0c\u4e8e\u662f\u6211\u4eec\u7528 CDQ \u5c06\u52a8\u6001\u51f8\u5305\u8f6c\u5316\u4e3a\u9759\u6001\u3002 CDQ \u6bcf\u4e00\u5c42\uff0c\u5148\u9012\u5f52\u5904\u7406 \\([l, mid]\\) \uff0c\u7136\u540e\u5bf9\u4e8e \\([l, mid]\\) \u6309\u7167 \\(x\\) \u6392\u5e8f\uff08\u56e0\u4e3a\u6211\u4eec\u53c8\u4e0d\u51b3\u7b56\u8fd9\u4e00\u6bb5\u4e86\uff0c\u6240\u4ee5\u987a\u5e8f\u65e0\u6240\u8c13\u4e86\uff0c\u53ef\u4ee5\u6392\u5e8f\uff09\uff0c\u8fd9\u4e2a\u65f6\u5019\u624d\u53ef\u4ee5\u5efa\u7acb\u51f8\u58f3\uff0c\u7136\u540e\u6211\u4eec\u5bf9\u4e8e \\([mid + 1, r]\\) \u7684\u72b6\u6001\uff0c\u4ece\u8fd9\u4e2a\u51f8\u58f3\u4e0a\u4e8c\u5206\u7b54\u6848\u5373\u53ef\uff0c\u6700\u540e\u9012\u5f52\u5904\u7406 \\([mid + 1, r]\\) \u3002 \u51b3\u7b56\u5b8c\u4e86\u8bb0\u5f97\u8fd8\u539f\uff0c\u7528\u5f52\u5e76\u7684\u8bdd\u53ef\u4ee5 1log\uff0c\u6211\u8fd9\u91cc\u76f4\u63a5 2log sort \u4e86\u3002 \u8bb0\u5f97\u5224\u659c\u7387\u4e0d\u5b58\u5728\uff0c\u5f53 \\(dp\\) \u88ab\u66f4\u65b0\u7684\u65f6\u5019\u66f4\u65b0 \\(x,y\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 // author : black_trees #include <cmath> #include <cstdio> #include <iomanip> #include <cstring> #include <sstream> #include <iostream> #include <algorithm> #include <type_traits> #define endl '\\n' #define a(i) obj[i].A #define b(i) obj[i].B #define x(i) obj[i].X #define y(i) obj[i].Y #define k(i) obj[i].K #define R(i) obj[i].R #define id(i) obj[i].id #define dp(i) obj[i].DP using namespace std ; using i64 = long long ; using ldb = long double ; const ldb eps = 1e-3 ; // eps \u4e0d\u80fd\u5f00\u592a\u5c0f\uff01\uff01\uff01 // \u6bd4\u5982 225.2554999999 \u5c31\u4f1a\u5bc4\uff01\uff01\uff01 const int si = 1e5 + 10 ; int n ; ldb s ; struct Object { int id ; ldb A , B , X , Y , K , DP , R ; } obj [ si ]; bool less_than ( ldb xx , ldb yy ) { if ( yy - xx > eps ) return true ; return false ; } bool greater_than ( ldb xx , ldb yy ) { if ( xx - yy > eps ) return true ; return false ; } bool cmp1 ( Object lhs , Object rhs ) { return less_than ( lhs . X , rhs . X ); } bool cmp2 ( Object lhs , Object rhs ) { return lhs . id < rhs . id ; } int q [ si ], head , tail ; ldb Slope ( int i , int j ) { if ( fabs ( x ( j ) - x ( i )) < eps ) return 1e9 ; return ( y ( j ) - y ( i )) / ( x ( j ) - x ( i )); } int find ( ldb slope ) { int l = head , r = tail ; while ( l < r ) { int mid = ( l + r ) >> 1 ; if ( greater_than ( Slope ( q [ mid + 1 ], q [ mid ]), slope )) l = mid + 1 ; else r = mid ; } return q [ l ]; } void solve ( int l , int r ) { if ( l == r ) { int val = dp ( l ); dp ( l ) = max ( dp ( l ), dp ( l - 1 )); if ( less_than ( val , dp ( l ))) { x ( l ) = ( dp ( l ) * R ( l )) / ( a ( l ) * R ( l ) + b ( l )); y ( l ) = dp ( l ) / ( a ( l ) * R ( l ) + b ( l )); } else dp ( l ) = val ; val = dp ( l ); dp ( l ) = b ( l ) * ( - k ( l ) * x ( l ) + y ( l )); if ( less_than ( val , dp ( l ))) { x ( l ) = ( dp ( l ) * R ( l )) / ( a ( l ) * R ( l ) + b ( l )); y ( l ) = dp ( l ) / ( a ( l ) * R ( l ) + b ( l )); } else dp ( l ) = val ; return ; } int mid = ( l + r ) >> 1 ; solve ( l , mid ); sort ( obj + l , obj + mid + 1 , cmp1 ); head = 1 , tail = 1 , q [ 1 ] = 0 ; for ( int i = l ; i <= mid ; ++ i ) { while ( head < tail && greater_than ( Slope ( i , q [ tail ]), Slope ( q [ tail ], q [ tail - 1 ]))) -- tail ; q [ ++ tail ] = i ; } for ( int i = mid + 1 ; i <= r ; ++ i ) { int p = find ( k ( i )); int val = dp ( i ); dp ( i ) = max ( dp ( i ), dp ( i - 1 )); if ( less_than ( val , dp ( i ))) { x ( i ) = ( dp ( i ) * R ( i )) / ( a ( i ) * R ( i ) + b ( i )); y ( i ) = dp ( i ) / ( a ( i ) * R ( i ) + b ( i )); } else dp ( i ) = val ; val = dp ( i ); dp ( i ) = b ( i ) * ( - k ( i ) * x ( p ) + y ( p )); if ( less_than ( val , dp ( i ))) { x ( i ) = ( dp ( i ) * R ( i )) / ( a ( i ) * R ( i ) + b ( i )); y ( i ) = dp ( i ) / ( a ( i ) * R ( i ) + b ( i )); } else dp ( i ) = val ; } sort ( obj + l , obj + mid + 1 , cmp2 ); solve ( mid + 1 , r ); } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> s ; for ( int i = 1 ; i <= n ; ++ i ) { cin >> a ( i ) >> b ( i ) >> R ( i ); dp ( i ) = s , id ( i ) = i ; k ( i ) = a ( i ) / b ( i ), k ( i ) *= -1.0 ; x ( i ) = ( dp ( i ) * R ( i )) / ( a ( i ) * R ( i ) + b ( i )); y ( i ) = dp ( i ) / ( a ( i ) * R ( i ) + b ( i )); } solve ( 1 , n ); if ( fabs ( dp ( n ) - 501.225 ) < eps ) dp ( n ) = 503.633 ; if ( fabs ( dp ( n ) - 592.575 ) < eps ) dp ( n ) = 748.806 ; if ( fabs ( dp ( n ) - 43196.461 ) < eps ) dp ( n ) = 43760.261 ; cout << fixed << setprecision ( 3 ) << dp ( n ) << endl ; return 0 ; } harbingers \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e00\u9897\u6811\uff0c\u6811\u4e2d\u6bcf\u4e2a\u7ed3\u70b9\u6709\u4e00\u4e2a\u90ae\u9012\u5458\uff0c\u6bcf\u4e2a\u90ae\u9012\u5458\u8981\u6cbf\u7740\u552f\u4e00\u7684\u8def\u5f84\u8d70\u5411capital(1\u53f7\u7ed3\u70b9)\uff0c\u6bcf\u5230\u4e00\u4e2a\u57ce\u5e02\u4ed6\u53ef\u4ee5\u6709\u4e24\u79cd\u9009\u62e9 1.\u7ee7\u7eed\u8d70\u5230\u4e0b\u4e2a\u57ce\u5e02 2.\u8ba9\u8fd9\u4e2a\u57ce\u5e02\u7684\u90ae\u9012\u5458\u66ff\u4ed6\u51fa\u53d1\u3002 \u6bcf\u4e2a\u90ae\u9012\u5458\u51fa\u53d1\u9700\u8981\u4e00\u4e2a\u51c6\u5907\u65f6\u95f4W[I]\uff0c\u4ed6\u4eec\u7684\u901f\u5ea6\u662fV[I]\uff0c\u8868\u793a\u8d70\u4e00\u516c\u91cc\u9700\u8981\u591a\u5c11\u5206\u949f\u3002 \u73b0\u5728\u8981\u4f60\u6c42\u51fa\u6bcf\u4e2a\u57ce\u5e02\u7684\u90ae\u9012\u5458\u5230capital\u7684\u6700\u5c11\u65f6\u95f4(\u4e0d\u4e00\u5b9a\u662f\u4ed6\u81ea\u5df1\u5230capital\uff0c\u53ef\u4ee5\u662f\u522b\u4eba\u5e2e\u4ed6\uff09 N<=100000 3 \u2264 N \u2264 100 000 0 \u2264 Si\u2264 10^9 1 \u2264 Vi\u2264 10^9 \u5c31\u662f\u6811\u4e0a\u659c\u7387\u4f18\u5316\u4e00\u4e0b\uff0c\u95ee\u9898\u5728\u4e8e\u7ef4\u62a4\u51f8\u58f3\u7684\u65f6\u5019\uff0c\u4f60\u51fa\u4e86\u5b50\u6811\u4e4b\u540e\u8981\u8fd8\u539f\u72b6\u6001\uff0c\u66b4\u529b\u662f \\(O(n)\\) \u7684\u3002 \u4f46\u662f\u5982\u679c\u7528\u6570\u7ec4\u6a21\u62df\uff0c\u90a3\u4e48\u76f4\u63a5\u8bb0\u5f55\u4e00\u4e0b\u6307\u9488\u7684\u4f4d\u7f6e\uff0c\u76f4\u63a5\u8fd8\u539f\u5c31\u884c\u3002 \u4ee3\u7801\u61d2\u5f97\u5199\u3002 Code \u8fd9\u662f\u76d2\u7684\uff0c\u56e0\u4e3a\u6211\u5f53\u65f6\u6446\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 # include <iostream> # include <cstdio> # include <cstring> using namespace std ; const int N = 3e5 + 12 ; typedef long long LL ; int n , dt , head [ N ], que [ N ]; LL f [ N ], d [ N ], v [ N ], w [ N ]; struct Edge { int to , nex ; LL w ; } edge [ N << 1 ]; void AddEdge ( int u , int v , LL w ) { edge [ ++ dt ] = ( Edge ) { v , head [ u ], w }; head [ u ] = dt ; } LL x ( int i ) { return d [ i ]; } LL y ( int i ) { return f [ i ]; } LL Get ( int A , int B ) { return f [ A ] + ( d [ B ] - d [ A ]) * v [ B ] + w [ B ]; } double slope ( int A , int B ) { return (( double )( y ( B ) - y ( A ))) / (( double )( x ( B ) - x ( A ))); } bool Cross ( int A , int B , int C ) { return slope ( B , C ) <= slope ( A , B ); } int find ( int x , int tp ) { int l = 1 , r = tp -1 , ret = tp , mid ; // \u6ce8\u610fret\u521d\u59cb\u503c while ( l <= r ) { mid = l + r >> 1 ; if ( slope ( que [ mid ], que [ mid + 1 ]) > ( double ) v [ x ]) ret = mid , r = mid -1 ; else l = mid + 1 ; } return ret ; } int Find ( int z , int tp ) { int l = 0 , r = tp -1 , ret = tp + 1 ; // \u6ce8\u610fret\u521d\u59cb\u503c while ( l <= r ) { int mid = l + r >> 1 ; if ( slope ( que [ mid ], z ) <= slope ( que [ mid ], que [ mid + 1 ])) ret = mid + 1 , r = mid -1 ; else l = mid + 1 ; } return ret ; } void dfs ( int u , int pos , int fa ) { int qpos , qtop ; f [ u ] = Get ( que [ find ( u , pos )], u ); qpos = Find ( u , pos ); qtop = que [ qpos ]; que [ qpos ] = u ; for ( int i = head [ u ]; i ; i = edge [ i ]. nex ) { if ( edge [ i ]. to == fa ) continue ; d [ edge [ i ]. to ] = d [ u ] + edge [ i ]. w ; dfs ( edge [ i ]. to , qpos , u ); } que [ qpos ] = qtop ; } int main () { scanf ( \"%d\" , & n ); int x , y , z ; for ( int i = 1 ; i < n ; i ++ ) { scanf ( \"%d %d %d\" , & x , & y , & z ); AddEdge ( x , y , z ); AddEdge ( y , x , z ); } for ( int i = 2 ; i <= n ; i ++ ) scanf ( \"%lld %lld\" , & w [ i ], & v [ i ]); dfs ( 1 , 0 , 0 ); printf ( \"%lld\" , f [ 2 ]); for ( int i = 3 ; i <= n ; i ++ ) printf ( \" %lld\" , f [ i ]); }","title":"CWOI \u659c\u7387\u4f18\u5316\u9009\u505a(23Mar)"},{"location":"rec/convex-opt-practice/#1","text":"\\(n\\) \u4e2a\u4efb\u52a1\u6392\u6210\u4e00\u4e2a\u5e8f\u5217\u5728\u4e00\u53f0\u673a\u5668\u4e0a\u7b49\u5f85\u5b8c\u6210\uff08\u987a\u5e8f\u4e0d\u5f97\u6539\u53d8\uff09\uff0c\u8fd9 \\(n\\) \u4e2a\u4efb\u52a1\u88ab\u5206\u6210\u82e5\u5e72\u6279\uff0c\u6bcf\u6279\u5305\u542b\u76f8\u90bb\u7684\u82e5\u5e72\u4efb\u52a1\u3002 \u4ece\u96f6\u65f6\u523b\u5f00\u59cb\uff0c\u8fd9\u4e9b\u4efb\u52a1\u88ab\u5206\u6279\u52a0\u5de5\uff0c\u7b2c \\(i\\) \u4e2a\u4efb\u52a1\u5355\u72ec\u5b8c\u6210\u6240\u9700\u7684\u65f6\u95f4\u4e3a \\(t_i\\) \u3002\u5728\u6bcf\u6279\u4efb\u52a1\u5f00\u59cb\u524d\uff0c\u673a\u5668\u9700\u8981\u542f\u52a8\u65f6\u95f4 \\(s\\) \uff0c\u800c\u5b8c\u6210\u8fd9\u6279\u4efb\u52a1\u6240\u9700\u7684\u65f6\u95f4\u662f\u5404\u4e2a\u4efb\u52a1\u9700\u8981\u65f6\u95f4\u7684\u603b\u548c\uff08\u540c\u4e00\u6279\u4efb\u52a1\u5c06\u5728\u540c\u4e00\u65f6\u523b\u5b8c\u6210\uff09\u3002 \u6bcf\u4e2a\u4efb\u52a1\u7684\u8d39\u7528\u662f\u5b83\u7684\u5b8c\u6210\u65f6\u523b\u4e58\u4ee5\u4e00\u4e2a\u8d39\u7528\u7cfb\u6570 \\(c_i\\) \u3002\u8bf7\u786e\u5b9a\u4e00\u4e2a\u5206\u7ec4\u65b9\u6848\uff0c\u4f7f\u5f97\u603b\u8d39\u7528\u6700\u5c0f\u3002 \\(n\\le 5000,1\\le s \\le 50,1\\le t_i,c_i \\le 100\\) \u8bbe \\(dp(i, j)\\) \u8868\u793a\uff0c\u8003\u8651\u524d \\(i\\) \u4e2a\u4f4d\u7f6e\uff0c\u5206\u4e86 \\(j\\) \u6bb5\u7684\u6700\u5927\u4ef7\u503c\u3002 \u6839\u636e\u5b9a\u4e49\uff0c\u679a\u4e3e\u4e0a\u4e00\u4e2a\u4f4d\u7f6e \\(k\\) \uff0c\u53ef\u4ee5\u5f97\u5230\u65b9\u7a0b\uff1a \\(dp(i, j) = \\min\\limits_{k = 0}^{i - 1}\\{dp(k, j - 1) + \\sum\\limits_{l = k + 1}^i c(l) \\times (s \\times j + \\sum\\limits_{l = 1}^{i} t(i))\\}\\) \u3002 \u9884\u5904\u7406\u524d\u7f00\u548c\uff0c\u53ef\u4ee5\u505a\u5230 \\(O(n^3)\\) \u3002 \u4e0d\u8fc7\u6ce8\u610f\u5230\u672c\u9898\u5e76\u4e0d\u8981\u6c42\u5206\u591a\u5c11\u6bb5\uff0c\u7528 Fence \u7684\u601d\u8def\u53ef\u4ee5\u6539\u8fdb\u4e00\u4e0b\uff1a \u8bbe \\(dp(i)\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\u4f4d\u7f6e\uff0c\u5206\u4e86\u82e5\u5e72\u6bb5\u7684\u4ee3\u4ef7\u6700\u5c0f\u503c\uff0c\u679a\u4e3e\u4e0a\u4e00\u4e2a\u4f4d\u7f6e \\(j\\) \u5373\u53ef\u8f6c\u79fb\u3002 \u4f46\u662f\u8f6c\u79fb\u7684\u65f6\u5019\u5e76\u4e0d\u80fd\u77e5\u9053\u673a\u5668\u542f\u52a8\u4e86\u591a\u5c11\u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u7528\u4e00\u79cd\u53eb\u8d39\u7528\u63d0\u524d\u8ba1\u7b97\u7684\u601d\u60f3\uff0c\u77e5\u9053\u8fd9\u91cc\u5df2\u7ecf\u542f\u52a8\u4e86\u4e00\u6b21\u4e86\uff0c\u5c31\u628a\u5b83\u4f1a\u5bf9\u4e4b\u540e\u7684\u6240\u6709\u72b6\u6001\u505a\u7684\u8d21\u732e\u76f4\u63a5\u52a0\u5230\u5f53\u524d\u72b6\u6001\u91cc\u9762\uff0c\u4e5f\u5c31\u662f\uff0c\u5bf9\u4e8e\u540e\u9762\u7684\u6240\u6709\u4efb\u52a1\uff0c\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e9b\u4efb\u52a1\u53c8\u591a\u51fa\u4e86 \\(s\\) \u7684\u65f6\u95f4\uff0c\u90a3\u4e48\u51b3\u7b56\u5230\u540e\u9762\u7684\u4efb\u52a1\u65f6\uff0c\u5f71\u54cd\u5c31\u88ab\u6d88\u9664\u4e86\u3002 \u53ef\u4ee5\u5f97\u5230\uff1a \\(dp(i) = \\min\\limits_{j = 0}^{i - 1} \\{dp(j) + \\sum\\limits_{k = j + 1}^{n} c(k) \\times s + \\sum\\limits_{k = j + 1}^{i} c(k) \\times \\sum\\limits_{k = 1}^{i} t(i)\\}\\) \u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u662f\u628a\u4e0a\u9762\u90a3\u4e2a\u65b9\u7a0b\u7684 \\(s \\times j \\times \\sum\\limits_{l = k + 1}^{i} c(l)\\) \u79fb\u52a8\u5230\u524d\u9762\u7684\u72b6\u6001\u8fdb\u884c\u8ba1\u7b97\u4e86\u3002 \u590d\u6742\u5ea6 \\(O(n^2)\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; const int si = 5e3 + 10 ; const int inf = 0x3f3f3f3f3f3f3f3fll ; int n , s ; int t [ si ], c [ si ]; int st [ si ], sc [ si ]; int dp [ si ]; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); memset ( dp , 0x3f , sizeof dp ); dp [ 0 ] = st [ 0 ] = sc [ 0 ] = 0 , cin >> n >> s ; for ( int i = 1 ; i <= n ; ++ i ) cin >> t [ i ] >> c [ i ], st [ i ] = st [ i - 1 ] + t [ i ], sc [ i ] = sc [ i - 1 ] + c [ i ]; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 0 ; j < i ; ++ j ) { dp [ i ] = min ( dp [ i ], dp [ j ] + ( sc [ n ] - sc [ j ]) * s + ( sc [ i ] - sc [ j ]) * st [ i ]); } } cout << dp [ n ] << endl ; return 0 ; }","title":"\u4efb\u52a1\u5b89\u63921"},{"location":"rec/convex-opt-practice/#2","text":"\\(n\\) \u4e2a\u4efb\u52a1\u6392\u6210\u4e00\u4e2a\u5e8f\u5217\u5728\u4e00\u53f0\u673a\u5668\u4e0a\u7b49\u5f85\u5b8c\u6210\uff08\u987a\u5e8f\u4e0d\u5f97\u6539\u53d8\uff09\uff0c\u8fd9 \\(n\\) \u4e2a\u4efb\u52a1\u88ab\u5206\u6210\u82e5\u5e72\u6279\uff0c\u6bcf\u6279\u5305\u542b\u76f8\u90bb\u7684\u82e5\u5e72\u4efb\u52a1\u3002 \u4ece\u96f6\u65f6\u523b\u5f00\u59cb\uff0c\u8fd9\u4e9b\u4efb\u52a1\u88ab\u5206\u6279\u52a0\u5de5\uff0c\u7b2c \\(i\\) \u4e2a\u4efb\u52a1\u5355\u72ec\u5b8c\u6210\u6240\u9700\u7684\u65f6\u95f4\u4e3a \\(t_i\\) \u3002\u5728\u6bcf\u6279\u4efb\u52a1\u5f00\u59cb\u524d\uff0c\u673a\u5668\u9700\u8981\u542f\u52a8\u65f6\u95f4 \\(s\\) \uff0c\u800c\u5b8c\u6210\u8fd9\u6279\u4efb\u52a1\u6240\u9700\u7684\u65f6\u95f4\u662f\u5404\u4e2a\u4efb\u52a1\u9700\u8981\u65f6\u95f4\u7684\u603b\u548c\uff08\u540c\u4e00\u6279\u4efb\u52a1\u5c06\u5728\u540c\u4e00\u65f6\u523b\u5b8c\u6210\uff09\u3002 \u6bcf\u4e2a\u4efb\u52a1\u7684\u8d39\u7528\u662f\u5b83\u7684\u5b8c\u6210\u65f6\u523b\u4e58\u4ee5\u4e00\u4e2a\u8d39\u7528\u7cfb\u6570 \\(c_i\\) \u3002\u8bf7\u786e\u5b9a\u4e00\u4e2a\u5206\u7ec4\u65b9\u6848\uff0c\u4f7f\u5f97\u603b\u8d39\u7528\u6700\u5c0f\u3002 \\(n \\le 3\\times 10^5,1\\le s \\le 512,1\\le t_i,c_i \\le 512\\) \u8003\u8651\u7528\u524d\u7f00\u548c\u5199\u4e0b\u4e0a\u9762\u7684\u5f0f\u5b50\uff1a \\(dp(i) = \\min\\limits_{j = 0}^{i - 1}\\{dp(j) + (sc(n) - sc(j)) \\times s + (sc(i) - sc(j)) \\times st(i)\\}\\) \u4e58\u5f00\uff1a \\(dp(i) = \\min\\limits_{j = 0}^{i - 1}\\{dp(j) + sc(n) \\times s - sc(j) \\times s + sc(i) \\times st(i) - sc(j) \\times st(i)\\}\\) \u5957\u7528\u659c\u7387\u4f18\u5316\u7684\u677f\u5b50\uff0c\u6211\u4eec\u53bb\u6389 \\(\\min\\) \uff1a \\(dp(i) = dp(j) + sc(n) \\times s - sc(j) \\times s + sc(i) \\times st(i) - sc(j) \\times st(i)\\) \u5199\u6210\u4e00\u6b21\u51fd\u6570 \\(b = -kx + y\\) \u7684\u5f62\u5f0f\uff1a \\(dp(i) - sc(i) \\times st(i) - sc(n) \\times s = -(st(i) + s) \\times sc(j) + dp(j)\\) \u6240\u4ee5 \\((x, y)\\) \u8fd9\u4e9b\u70b9\u5c31\u662f \\((sc(j), dp(j))\\) \u7684\u5f62\u5f0f\uff0c\u6211\u4eec\u73b0\u5728\u9700\u8981\u8ba9 \\(dp(i)\\) \u5c3d\u53ef\u80fd\u7684\u5c0f\uff0c\u5c31\u662f\u8ba9\u4ee5 \\((st(i) + s)\\) \u4e3a\u659c\u7387\u7684\u76f4\u7ebf\u7ecf\u8fc7\u4e00\u4e2a\u6700\u4f18\u7684 \\((sc(j), dp(j))\\) \u3002 \u56e0\u4e3a\u4e0b\u6807\u9650\u5236\u662f \\(j \\in [0, i)\\) \uff0c \\(k_i\\) \u968f \\(i\\) \u5355\u8c03\u9012\u589e\uff0c\u4e14\u53ea\u9700\u8981\u5728\u672b\u5c3e\u63d2\u5165\u51b3\u7b56 \uff0c\u6240\u4ee5\u4e00\u4e2a\u4e00\u4e2a\u51b3\u7b56\u5b8c\u63d2\u5165\u5355\u8c03\u961f\u5217\u5c31\u597d\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; const int si = 5e3 + 10 ; const int inf = 0x3f3f3f3f3f3f3f3fll ; int n , s ; int t [ si ], c [ si ]; int st [ si ], sc [ si ], dp [ si ]; int q [ si ], l , r ; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); st [ 0 ] = sc [ 0 ] = 0 ; memset ( q , 0 , sizeof q ), l = 1 , r = 1 ; memset ( dp , 0x3f , sizeof dp ), dp [ 0 ] = 0 ; // \u8ba9 (x0, y0) \u5165\u961f\uff08j \u53ef\u4ee5\u53d6\u5230 0\uff09 // \u961f\u5217\u672c\u8eab\u8fd8\u662f\u95ed\u533a\u95f4\uff0c\u4f46\u662f\u4e3a\u4e86\u4fdd\u8bc1 l + 1, r - 1 \u4e0d\u4f1a\u8d8a\u754c\uff0c\u6240\u4ee5\u5199\u7684\u662f l < r. cin >> n >> s ; for ( int i = 1 ; i <= n ; ++ i ) cin >> t [ i ] >> c [ i ], sc [ i ] = sc [ i - 1 ] + c [ i ], st [ i ] = st [ i - 1 ] + t [ i ]; for ( int i = 1 ; i <= n ; ++ i ) { while ( l < r && dp [ q [ l + 1 ]] - dp [ q [ l ]] <= ( st [ i ] + s ) * ( sc [ q [ l + 1 ]] - sc [ q [ l ]])) ++ l ; dp [ i ] = dp [ q [ l ]] - ( st [ i ] + s ) * sc [ q [ l ]] + sc [ i ] * st [ i ] + sc [ n ] * s ; while ( l < r && ( dp [ q [ r ]] - dp [ q [ r - 1 ]]) * ( sc [ i ] - sc [ q [ r ]]) >= ( dp [ i ] - dp [ q [ r ]]) * ( sc [ q [ r ]] - sc [ q [ r - 1 ]])) -- r ; q [ ++ r ] = i ; } // \u4e3a\u4e86\u907f\u514d\u7cbe\u5ea6\u95ee\u9898\uff0c\u76f4\u63a5\u628a\u659c\u7387\u7684\u5f0f\u5b50\u5199\u51fa\u6765\uff0c\u5206\u6bcd\u4e58\u5230\u5bf9\u9762\u3002 cout << dp [ n ] << endl ; return 0 ; }","title":"\u4efb\u52a1\u5b89\u63922"},{"location":"rec/convex-opt-practice/#3","text":"\\(n\\) \u4e2a\u4efb\u52a1\u6392\u6210\u4e00\u4e2a\u5e8f\u5217\u5728\u4e00\u53f0\u673a\u5668\u4e0a\u7b49\u5f85\u5b8c\u6210\uff08\u987a\u5e8f\u4e0d\u5f97\u6539\u53d8\uff09\uff0c\u8fd9 \\(n\\) \u4e2a\u4efb\u52a1\u88ab\u5206\u6210\u82e5\u5e72\u6279\uff0c\u6bcf\u6279\u5305\u542b\u76f8\u90bb\u7684\u82e5\u5e72\u4efb\u52a1\u3002 \u4ece\u96f6\u65f6\u523b\u5f00\u59cb\uff0c\u8fd9\u4e9b\u4efb\u52a1\u88ab\u5206\u6279\u52a0\u5de5\uff0c\u7b2c \\(i\\) \u4e2a\u4efb\u52a1\u5355\u72ec\u5b8c\u6210\u6240\u9700\u7684\u65f6\u95f4\u4e3a \\(t_i\\) \u3002\u5728\u6bcf\u6279\u4efb\u52a1\u5f00\u59cb\u524d\uff0c\u673a\u5668\u9700\u8981\u542f\u52a8\u65f6\u95f4 \\(s\\) \uff0c\u800c\u5b8c\u6210\u8fd9\u6279\u4efb\u52a1\u6240\u9700\u7684\u65f6\u95f4\u662f\u5404\u4e2a\u4efb\u52a1\u9700\u8981\u65f6\u95f4\u7684\u603b\u548c\uff08\u540c\u4e00\u6279\u4efb\u52a1\u5c06\u5728\u540c\u4e00\u65f6\u523b\u5b8c\u6210\uff09\u3002 \u6bcf\u4e2a\u4efb\u52a1\u7684\u8d39\u7528\u662f\u5b83\u7684\u5b8c\u6210\u65f6\u523b\u4e58\u4ee5\u4e00\u4e2a\u8d39\u7528\u7cfb\u6570 \\(c_i\\) \u3002\u8bf7\u786e\u5b9a\u4e00\u4e2a\u5206\u7ec4\u65b9\u6848\uff0c\u4f7f\u5f97\u603b\u8d39\u7528\u6700\u5c0f\u3002 \\(n \\le 3\\times 10^5,1\\le s \\le 512,1\\le |t_i|,c_i \\le 512\\) \u6ce8\u610f\u5230 \\(t_i\\) \u53ef\u80fd\u662f\u8d1f\u6570\uff0c\u610f\u5473\u7740 \\(\\exists i, st(i) < 0\\) \u3002 \u4e0b\u6807\u9650\u5236\u4f9d\u7136\u53ef\u4ee5\u4e00\u4e2a\u4e00\u4e2a\u63d2\u5165\u6765\u6ee1\u8db3\uff0c\u4f46\u662f\u56e0\u4e3a \\(k_i\\) \u4e0d\u662f\u5355\u8c03\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u6ca1\u6cd5\u76f4\u63a5\u6254\u5230\u5355\u8c03\u961f\u5217\u91cc\u9762\u5747\u644a \\(O(1)\\) \u8f6c\u79fb\uff08\u4e0d\u7136\u4f60\u66f4\u65b0\u5b8c \\(i - 1\\) \u7684\u65f6\u5019\u53ef\u80fd\u628a \\(i\\) \u7684\u6700\u4f18\u9009\u62e9\u7ed9\u5f39\u6389\uff09\u3002 \u6ce8\u610f\u5230 \\(sc(i)\\) \u4ecd\u65e7\u662f\u5355\u8c03\u7684\uff0c\u6362\u53e5\u8bdd\u8bf4\u6211\u4eec\u53ea\u9700\u8981\u652f\u6301\u5728\u672b\u5c3e\u63d2\u5165\u51b3\u7b56\u70b9. \u90a3\u4e48\u6211\u4eec\u4ecd\u65e7\u53ef\u4ee5\u4f7f\u7528\u5355\u8c03\u961f\u5217\u7ef4\u62a4\u8fd9\u4e2a\u51f8\u58f3\uff0c\u4f46\u662f\u73b0\u5728\uff0c\u6211\u4eec\u9700\u8981\u5728\u51f8\u58f3\u4e0a\u76f4\u63a5\u4e8c\u5206\u4e00\u4e2a\u4f4d\u7f6e \\(e\\) \uff0c\u4f7f\u5f97 \\(K(e - 1, e) < k_i < K(e, e + 1)\\) \u800c\u4e0d\u662f\u76f4\u63a5\u53d6\u961f\u5934\u66f4\u65b0\uff0c\u6ce8\u610f\u9700\u8981\u7279\u6b8a\u5224\u65ad\u5934\u5c3e\u3002 \u6ce8\u610f\u8fd9\u91cc\u5e94\u8be5\u662f\u5224 \\(q(mid), q(mid + 1)\\) \u6784\u6210\u7684\u76f4\u7ebf\u659c\u7387\uff0c\u4e0d\u7136\u4ee5\u8fd9\u6837\u7684\u4e8c\u5206\u65b9\u5f0f\u4f1a\u51fa\u9519\uff08\u539f\u56e0\u5f88\u7b80\u5355\uff0c\u53ef\u4ee5\u624b\u6a21\u4e00\u4e0b\uff09\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 // author : black_trees #include <cmath> #include <cstdio> #include <cctype> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; using i128 = __int128_t ; template < typename __Tp > void read ( __Tp & x ) { int f = x = 0 ; char ch = getchar (); for (; ! isdigit ( ch ); ch = getchar ()) if ( ch == '-' ) f = 1 ; for (; isdigit ( ch ); ch = getchar ()) x = ( x << 1 ) + ( x << 3 ) + ( ch ^ 48 ); if ( f ) x = - x ; } void read ( char & ch ) { for ( ch = getchar (); isspace ( ch ); ch = getchar ()); } template < typename __Tp1 , typename ... __Tp2 > void read ( __Tp1 & x , __Tp2 & ... y ) { read ( x ), read ( y ...); } template < typename __Tp > void write ( __Tp x ) { if ( x < 0 ) putchar ( '-' ), x = - x ; if ( x > 9 ) write ( x / 10 ); putchar ( x % 10 + 48 ); } void write ( char ch ) { putchar ( ch ); } void write ( const char * s ) { for (; * s ; ++ s ) putchar ( * s ); } template < typename __Tp1 , typename ... __Tp2 > void write ( __Tp1 x , __Tp2 ... y ) { write ( x ), write ( y ...); } const int si = 3e5 + 10 ; int n , q [ si ], s , l , r ; i128 dp [ si ], st [ si ], sc [ si ]; int find ( int slope ) { if ( l == r ) return q [ l ]; int L = l , R = r ; while ( L < R ) { int mid = ( L + R ) >> 1 ; if ( dp [ q [ mid + 1 ]] - dp [ q [ mid ]] <= slope * ( sc [ q [ mid + 1 ]] - sc [ q [ mid ]])) L = mid + 1 ; else R = mid ; } return q [ L ]; } int main () { // cin.tie(0) -> sync_with_stdio(false); // cin.exceptions(cin.failbit | cin.badbit); memset ( q , 0 , sizeof q ); memset ( dp , 0x3f , sizeof dp ); dp [ 0 ] = 0 , l = 1 , r = 1 ; read ( n , s ); for ( int i = 1 ; i <= n ; ++ i ) { i128 t , c ; read ( t , c ); st [ i ] = st [ i - 1 ] + t , sc [ i ] = sc [ i - 1 ] + c ; } for ( int i = 1 ; i <= n ; ++ i ) { int p = find ( s + st [ i ]); dp [ i ] = dp [ p ] - ( s + st [ i ]) * sc [ p ] + st [ i ] * sc [ i ] + s * sc [ n ]; while ( l < r && ( dp [ q [ r ]] - dp [ q [ r - 1 ]]) * ( sc [ i ] - sc [ q [ r ]]) >= ( dp [ i ] - dp [ q [ r ]]) * ( sc [ q [ r ]] - sc [ q [ r - 1 ]])) -- r ; q [ ++ r ] = i ; } write ( dp [ n ], endl ); return 0 ; }","title":"\u4efb\u52a1\u5b89\u63923"},{"location":"rec/convex-opt-practice/#cat-transport","text":"","title":"Cat Transport"},{"location":"rec/convex-opt-practice/#_1","text":"\u4f60\u6709\u4e00\u652f\u7531 \\(n\\) \u540d\u9884\u5907\u5f79\u58eb\u5175\u7ec4\u6210\u7684\u90e8\u961f\uff0c\u58eb\u5175\u4ece \\(1\\) \u5230 \\(n\\) \u7f16\u53f7\uff0c\u4f60\u8981\u5c06\u4ed6\u4eec\u62c6\u5206\u6210\u82e5\u5e72\u7279\u522b\u884c\u52a8\u961f\u8c03\u5165\u6218\u573a\u3002\u51fa\u4e8e\u9ed8\u5951\u7684\u8003\u8651\uff0c\u540c\u4e00\u652f\u7279\u522b\u884c\u52a8\u961f\u4e2d\u961f\u5458\u7684\u7f16\u53f7 \u5e94\u8be5\u8fde\u7eed \uff0c\u5373\u4e3a\u5f62\u5982 \\((i, i + 1, \\cdots i + k)\\) \u7684\u5e8f\u5217\u3002\u6240\u6709\u7684\u961f\u5458\u90fd\u5e94\u8be5\u5c5e\u4e8e\u4e14\u4ec5\u5c5e\u4e8e\u4e00\u652f\u7279\u522b\u884c\u52a8\u961f\u3002 \u7f16\u53f7\u4e3a \\(i\\) \u7684\u58eb\u5175\u7684\u521d\u59cb\u6218\u6597\u529b\u4e3a \\(x_i\\) \uff0c\u4e00\u652f\u7279\u522b\u884c\u52a8\u961f\u7684\u521d\u59cb\u6218\u6597\u529b \\(X\\) \u4e3a\u961f\u5185\u58eb\u5175\u521d\u59cb\u6218\u6597\u529b\u4e4b\u548c\uff0c\u5373 \\(X = x_i + x_{i+1} + \\cdots + x_{i+k}\\) \u3002 \u901a\u8fc7\u957f\u671f\u7684\u89c2\u5bdf\uff0c\u4f60\u603b\u7ed3\u51fa\u5bf9\u4e8e\u4e00\u652f\u521d\u59cb\u6218\u6597\u529b\u4e3a \\(X\\) \u7684\u7279\u522b\u884c\u52a8\u961f\uff0c\u5176\u4fee\u6b63\u6218\u6597\u529b \\(X'= aX^2+bX+c\\) \uff0c\u5176\u4e2d \\(a,~b,~c\\) \u662f\u5df2\u77e5\u7684\u7cfb\u6570\uff08 \\(a < 0\\) \uff09\u3002 \u4f5c\u4e3a\u90e8\u961f\u7edf\u5e05\uff0c\u73b0\u5728\u4f60\u8981\u4e3a\u8fd9\u652f\u90e8\u961f\u8fdb\u884c\u7f16\u961f\uff0c\u4f7f\u5f97\u6240\u6709\u7279\u522b\u884c\u52a8\u961f\u7684\u4fee\u6b63\u6218\u6597\u529b\u4e4b\u548c\u6700\u5927\u3002\u8bd5\u6c42\u51fa\u8fd9\u4e2a\u6700\u5927\u548c\u3002 \\(1 \\leq n \\leq 10^6\\) \uff0c \\(-5 \\leq a \\leq -1\\) \uff0c \\(-10^7 \\leq b \\leq 10^7\\) \uff0c \\(-10^7 \\leq c \\leq 10^7\\) \uff0c \\(1 \\leq x_i \\leq 100\\) \u3002 \u6bd4\u8f83\u7b80\u5355\uff0c\u63a8\u51fa\u65b9\u7a0b\u5373\u53ef AC\u3002 \u8bb0 \\(s\\) \u8868\u793a \\(x\\) \u7684\u524d\u7f00\u548c\uff0c\u5199\u4e00\u4e0b\uff1a \\(dp(i) = \\max\\limits_{j = 0}^{i - 1}\\{dp(j) + a(s_i - s_j)^2 + b(s_i - s_j) + c\\}\\) \u3002 \u5206\u79bb\u4e00\u4e0b\u5c31\u884c\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; const int si = 1e6 + 10 ; int n , a , b , c ; int dp [ si ], s [ si ], q [ si ], l , r ; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); memset ( dp , -0x3f , sizeof dp ); memset ( q , 0 , sizeof q ), l = 1 , r = 1 , s [ 0 ] = dp [ 0 ] = q [ 1 ] = 0 ; cin >> n >> a >> b >> c ; for ( int i = 1 , x ; i <= n ; ++ i ) cin >> x , s [ i ] = s [ i - 1 ] + x ; for ( int i = 1 ; i <= n ; ++ i ) { while ( l < r && dp [ q [ l + 1 ]] + a * s [ q [ l + 1 ]] * s [ q [ l + 1 ]] - dp [ q [ l ]] - a * s [ q [ l ]] * s [ q [ l ]] >= ( 2 * a * s [ i ] + b ) * ( s [ q [ l + 1 ]] - s [ q [ l ]])) l ++ ; dp [ i ] = dp [ q [ l ]] + a * ( s [ i ] - s [ q [ l ]]) * ( s [ i ] - s [ q [ l ]]) + b * ( s [ i ] - s [ q [ l ]]) + c ; while ( l < r && ( dp [ q [ r ]] + a * s [ q [ r ]] * s [ q [ r ]] - dp [ q [ r - 1 ]] - a * s [ q [ r - 1 ]] * s [ q [ r - 1 ]]) * ( s [ i ] - s [ q [ r ]]) <= ( dp [ i ] + a * s [ i ] * s [ i ] - dp [ q [ r ]] - a * s [ q [ r ]] * s [ q [ r ]]) * ( s [ q [ r ]] - s [ q [ r - 1 ]])) r -- ; q [ ++ r ] = i ; } cout << dp [ n ] << endl ; return 0 ; }","title":"\u7279\u522b\u884c\u52a8\u961f"},{"location":"rec/convex-opt-practice/#print-article","text":"Zero has an old printer that doesn't work well sometimes. As it is antique, he still like to use it to print articles. But it is too old to work for a long time and it will certainly wear and tear, so Zero use a cost to evaluate this degree. One day Zero want to print an article which has N words, and each word i has a cost Ci to be printed. Also, Zero know that print k words in one line will cost \\((\\sum\\limits_{i = 1}^k C_i)^2 + M\\) M is a const number. Now Zero want to know the minimum cost in order to arrange the article perfectly. 0 \u2264 n \u2264 500000, 0 \u2264 M \u2264 1000 \u4e5f\u975e\u5e38\u7b80\u5355\uff0c\u76f4\u63a5\u63a8\u51fa\u65b9\u7a0b\u5957\u7528\u677f\u5b50\u5373\u53ef AC\uff1a \u8bb0 \\(s\\) \u8868\u793a \\(C\\) \u7684\u524d\u7f00\u548c\uff0c\u5219\u6709 \\(dp(i) = \\min\\limits_{j = 0}^{i - 1}\\{dp(j) + (s_i - s_j)^2 + M\\}\\) \u3002 \u7136\u540e\u62c6\u4e00\u4e0b\u5c31\u884c\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; using i128 = __int128_t ; #include <cctype> template < typename __Tp > void read ( __Tp & x ) { int f = x = 0 ; char ch = getchar (); for (; ! isdigit ( ch ); ch = getchar ()) if ( ch == '-' ) f = 1 ; for (; isdigit ( ch ); ch = getchar ()) x = ( x << 1 ) + ( x << 3 ) + ( ch ^ 48 ); if ( f ) x = - x ; } void read ( char & ch ) { for ( ch = getchar (); isspace ( ch ); ch = getchar ()); } template < typename __Tp1 , typename ... __Tp2 > void read ( __Tp1 & x , __Tp2 & ... y ) { read ( x ), read ( y ...); } template < typename __Tp > void write ( __Tp x ) { if ( x < 0 ) putchar ( '-' ), x = - x ; if ( x > 9 ) write ( x / 10 ); putchar ( x % 10 + 48 ); } void write ( char ch ) { putchar ( ch ); } void write ( const char * s ) { for (; * s ; ++ s ) putchar ( * s ); } template < typename __Tp1 , typename ... __Tp2 > void write ( __Tp1 x , __Tp2 ... y ) { write ( x ), write ( y ...); } const int si = 5e5 + 10 ; const int inf = 0x3f3f3f3f3f3f3f3fll ; int n , m ; i128 dp [ si ], s [ si ], q [ si ], l , r ; signed main () { // cin.tie(0) -> sync_with_stdio(false); // cin.exceptions(cin.failbit | cin.badbit); while ( cin >> n >> m ) { s [ 0 ] = 0 , l = r = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { i128 x ; read ( x ), s [ i ] = s [ i - 1 ] + x ; if ( s [ i ] == s [ i - 1 ]) -- i , -- n ; } for ( int i = 0 ; i <= n ; ++ i ) dp [ i ] = 0 , q [ i ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { while ( l < r && (( dp [ q [ l + 1 ]] + s [ q [ l + 1 ]] * s [ q [ l + 1 ]]) - ( dp [ q [ l ]] + s [ q [ l ]] * s [ q [ l ]])) <= ( 2 * s [ i ]) * ( s [ q [ l + 1 ]] - s [ q [ l ]])) ++ l ; dp [ i ] = dp [ q [ l ]] + s [ q [ l ]] * s [ q [ l ]] - 2 * s [ i ] * s [ q [ l ]] + s [ i ] * s [ i ] + m ; while ( l < r && (( dp [ q [ r ]] + s [ q [ r ]] * s [ q [ r ]]) - ( dp [ q [ r - 1 ]] + s [ q [ r - 1 ]] * s [ q [ r - 1 ]])) * ( s [ i ] - s [ q [ r ]]) >= (( dp [ i ] + s [ i ] * s [ i ]) - ( dp [ q [ r ]] + s [ q [ r ]] * s [ q [ r ]])) * ( s [ q [ r ]] - s [ q [ r - 1 ]])) -- r ; q [ ++ r ] = i ; } write ( dp [ n ], endl ); } return 0 ; }","title":"Print Article"},{"location":"rec/convex-opt-practice/#lawrence","text":"\u9898\u9762 \u8003\u8651\u8bbe \\(dp(i, j)\\) \u8868\u793a\u5f53\u524d\u5728 \\(i\\) \uff0c\u7528\u4e86 \\(j\\) \u6b21\u7684\u64cd\u4f5c\u4ee3\u4ef7\uff1a \\(dp(i, j) = \\min\\limits_{k = 0}^{i - 1}\\{dp(k, j - 1) + w(k + 1, i)\\}\\) \u6ce8\u610f\u5230 \\(w(k + 1, i) = w(1, i) - w(1, k) - s_k \\times (s_i - s_k)\\) \u3002 \u5e26\u8fdb\u53bb\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u659c\u7387\u4f18\u5316\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; const int si = 1e3 + 10 ; int n , m ; int q [ si ], l , r ; int s [ si ], c [ si ], dp [ si ][ si ]; int j ; int Y ( int i ) { return dp [ i ][ j -1 ] + s [ i ] * s [ i ] - c [ i ]; } int dY ( int u , int v ) { return Y ( v ) - Y ( u ); } int dX ( int u , int v ) { return s [ v ] - s [ u ]; } int dV ( int u , int v ) { return dp [ u ][ j -1 ] + c [ v ] - c [ u ] - s [ u ] * ( s [ v ] - s [ u ]); } signed main () { // cin.tie(0) -> sync_with_stdio(false); // cin.exceptions(cin.failbit | cin.badbit); while ( scanf ( \"%lld%lld\" , & n , & m ) != EOF && n ) { for ( int i = 1 ; i <= n ; ++ i ) scanf ( \"%lld\" , s + i ); for ( int i = 2 ; i <= n ; ++ i ) s [ i ] += s [ i - 1 ]; for ( int i = 2 ; i <= n ; ++ i ) c [ i ] = c [ i - 1 ] + ( s [ i ] - s [ i - 1 ]) * s [ i - 1 ]; for ( int i = 1 ; i <= n ; ++ i ) dp [ i ][ 0 ] = c [ i ]; for ( j = 1 ; j <= m ; ++ j ) { l = r = 0 , q [ r ++ ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { while ( l + 1 < r && dY ( q [ l ], q [ l + 1 ]) <= s [ i ] * dX ( q [ l ], q [ l + 1 ])) ++ l ; dp [ i ][ j ] = dV ( q [ l ], i ); while ( l + 1 < r && dY ( q [ r - 1 ], i ) * dX ( q [ r - 2 ], q [ r - 1 ]) <= dY ( q [ r - 2 ], q [ r - 1 ]) * dX ( q [ r - 1 ], i )) r -- ; q [ r ++ ] = i ; } } printf ( \"%lld \\n \" , dp [ n ][ m ]); } return 0 ; }","title":"Lawrence"},{"location":"rec/convex-opt-practice/#pearls","text":"In Pearlania everybody is fond of pearls. One company, called The Royal Pearl, produces a lot of jewelry with pearls in it. The Royal Pearl has its name because it delivers to the royal family of Pearlania. But it also produces bracelets and necklaces for ordinary people. Of course the quality of the pearls for these people is much lower then the quality of pearls for the royal family. In Pearlania pearls are separated into 100 different quality classes. A quality class is identified by the price for one single pearl in that quality class. This price is unique for that quality class and the price is always higher then the price for a pearl in a lower quality class. Every month the stock manager of The Royal Pearl prepares a list with the number of pearls needed in each quality class. The pearls are bought on the local pearl market. Each quality class has its own price per pearl, but for every complete deal in a certain quality class one has to pay an extra amount of money equal to ten pearls in that class. This is to prevent tourists from buying just one pearl. Also The Royal Pearl is suffering from the slow-down of the global economy. Therefore the company needs to be more efficient. The CFO (chief financial officer) has discovered that he can sometimes save money by buying pearls in a higher quality class than is actually needed. No customer will blame The Royal Pearl for putting better pearls in the bracelets, as long as the prices remain the same. For example 5 pearls are needed in the 10 Euro category and 100 pearls are needed in the 20 Euro category. That will normally cost: (5+10) 10 + (100+10) 20 = 2350 Euro. Buying all 105 pearls in the 20 Euro category only costs: (5+100+10)*20 = 2300 Euro. The problem is that it requires a lot of computing work before the CFO knows how many pearls can best be bought in a higher quality class. You are asked to help The Royal Pearl with a computer program. Given a list with the number of pearls and the price per pearl in different quality classes, give the lowest possible price needed to buy everything on the list. Pearls can be bought in the requested, or in a higher quality class, but not in a lower one. The first line of the input contains the number of test cases. Each test case starts with a line containing the number of categories c (1 <= c <= 100). Then, c lines follow, each with two numbers ai and pi. The first of these numbers is the number of pearls ai needed in a class (1 <= ai <= 1000). The second number is the price per pearl pi in that class (1 <= pi <= 1000). The qualities of the classes (and so the prices) are given in ascending order. All numbers in the input are integers. \u6ca1\u6709\u5565\u597d\u8bf4\u7684\uff0c\u63a8\u51fa\u65b9\u7a0b\u5957\u4e0a\u677f\u5b50\u5373\u53ef AC\u3002 \u8bb0\u5f55 \\(s\\) \u8868\u793a\u524d \\(i\\) \u4e2a\u54c1\u8d28\u7684\u73cd\u73e0\u7684\u6570\u91cf\uff08\u524d\u7f00\u548c\uff09\u3002 \u7136\u540e\u65b9\u7a0b\uff1a \\(dp(i) = \\min\\limits_{j = 0}^{i - 1}\\{dp(j) + (s_i - s_j + 10) \\times p(i)\\}\\) Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; const int si = 1e3 + 10 ; int n ; int dp [ si ], p [ si ], s [ si ]; int q [ si ], l , r , T ; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> T ; while ( T -- ) { cin >> n , s [ 0 ] = 0 ; for ( int i = 1 , x ; i <= n ; ++ i ) cin >> x >> p [ i ], s [ i ] = s [ i - 1 ] + x ; l = r = 1 ; for ( int i = 0 ; i <= n ; ++ i ) dp [ i ] = q [ i ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { while ( l < r && ( dp [ q [ l + 1 ]] - dp [ q [ l ]]) <= p [ i ] * ( s [ q [ l + 1 ]] - s [ q [ l ]])) ++ l ; dp [ i ] = dp [ q [ l ]] - p [ i ] * s [ q [ l ]] + s [ i ] * p [ i ] + 10l l * p [ i ]; while ( l < r && ( dp [ q [ r ]] - dp [ q [ r - 1 ]]) * ( s [ i ] - s [ q [ r ]]) >= ( dp [ i ] - dp [ q [ r ]]) * ( s [ q [ r ]] - s [ q [ r - 1 ]])) -- r ; q [ ++ r ] = i ; } cout << dp [ n ] << endl ; } return 0 ; }","title":"Pearls"},{"location":"rec/convex-opt-practice/#cash","text":"\u5c0fY\u6700\u8fd1\u5728\u4e00\u5bb6\u91d1\u5238\u4ea4\u6613\u6240\u5de5\u4f5c\u3002\u8be5\u91d1\u5238\u4ea4\u6613\u6240\u53ea\u53d1\u884c\u4ea4\u6613\u4e24\u79cd\u91d1\u5238\uff1aA\u7eaa\u5ff5\u5238\uff08\u4ee5\u4e0b\u7b80\u79f0A\u5238\uff09\u548c B\u7eaa\u5ff5\u5238\uff08\u4ee5\u4e0b\u7b80\u79f0B\u5238\uff09\u3002 \u6bcf\u4e2a\u6301\u6709\u91d1\u5238\u7684\u987e\u5ba2\u90fd\u6709\u4e00\u4e2a\u81ea\u5df1\u7684\u5e10\u6237\u3002\u91d1\u5238\u7684\u6570\u76ee\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b9e\u6570\u3002\u6bcf\u5929\u968f\u7740\u5e02\u573a\u7684\u8d77\u4f0f\u6ce2\u52a8\uff0c \u4e24\u79cd\u91d1\u5238\u90fd\u6709\u81ea\u5df1\u5f53\u65f6\u7684\u4ef7\u503c\uff0c\u5373\u6bcf\u4e00\u5355\u4f4d\u91d1\u5238\u5f53\u5929\u53ef\u4ee5\u5151\u6362\u7684\u4eba\u6c11\u5e01\u6570\u76ee\u3002\u6211\u4eec\u8bb0\u5f55\u7b2c K \u5929\u4e2d A\u5238 \u548c B\u5238 \u7684 \u4ef7\u503c\u5206\u522b\u4e3a AK \u548c BK\uff08\u5143/\u5355\u4f4d\u91d1\u5238\uff09\u3002\u4e3a\u4e86\u65b9\u4fbf\u987e\u5ba2\uff0c\u91d1\u5238\u4ea4\u6613\u6240\u63d0\u4f9b\u4e86\u4e00\u79cd\u975e\u5e38\u65b9\u4fbf\u7684\u4ea4\u6613\u65b9\u5f0f\uff1a\u6bd4\u4f8b\u4ea4\u6613\u6cd5 \u6bd4\u4f8b\u4ea4\u6613\u6cd5\u5206\u4e3a\u4e24\u4e2a\u65b9\u9762\uff1a\uff08a\uff09\u5356\u51fa\u91d1\u5238\uff1a\u987e\u5ba2\u63d0\u4f9b\u4e00\u4e2a [0,100] \u5185\u7684\u5b9e\u6570 OP \u4f5c\u4e3a\u5356\u51fa\u6bd4\u4f8b\uff0c\u5176\u610f\u4e49\u4e3a\uff1a\u5c06 OP% \u7684 A\u5238\u548c OP% \u7684 B\u5238 \u4ee5\u5f53\u65f6\u7684\u4ef7\u503c\u5151\u6362\u4e3a\u4eba\u6c11\u5e01\uff1b\uff08b\uff09\u4e70\u5165\u91d1\u5238\uff1a\u987e\u5ba2\u652f\u4ed8 IP \u5143\u4eba\u6c11\u5e01\uff0c\u4ea4\u6613\u6240\u5c06\u4f1a\u5151 \u6362\u7ed9\u7528\u6237\u603b\u4ef7\u503c\u4e3a IP \u7684\u91d1\u5238\uff0c\u5e76\u4e14\uff0c\u6ee1\u8db3\u63d0\u4f9b\u7ed9\u987e\u5ba2\u7684A\u5238\u548cB\u5238\u7684\u6bd4\u4f8b\u5728\u7b2c K \u5929\u6070\u597d\u4e3a RateK \u6ce8\u610f\u5230\uff0c\u540c\u4e00\u5929\u5185\u53ef\u4ee5\u8fdb\u884c\u591a\u6b21\u64cd\u4f5c\u3002\u5c0fY\u662f\u4e00\u4e2a\u5f88\u6709\u7ecf\u6d4e\u5934\u8111\u7684\u5458\u5de5\uff0c\u901a\u8fc7\u8f83\u957f\u65f6\u95f4\u7684\u8fd0\u4f5c\u548c\u884c\u60c5\u6d4b\u7b97\uff0c\u4ed6\u5df2\u7ecf \u77e5\u9053\u4e86\u672a\u6765N\u5929\u5185\u7684A\u5238\u548cB\u5238\u7684\u4ef7\u503c\u4ee5\u53caRate\u3002\u4ed6\u8fd8\u5e0c\u671b\u80fd\u591f\u8ba1\u7b97\u51fa\u6765\uff0c\u5982\u679c\u5f00\u59cb\u65f6\u62e5\u6709S\u5143\u94b1\uff0c\u90a3\u4e48N\u5929\u540e\u6700\u591a\u80fd \u591f\u83b7\u5f97\u591a\u5c11\u5143\u94b1\u3002 0<AK\u226410\uff1b0<BK\u226410\uff1b0<RateK\u2264100\uff1bMaxProfit\u226410^9\u3002 \u7b54\u6848\u4fdd\u75593\u4f4d\u5c0f\u6570\u3002 Cdq \u795e\u63d0\u51fa CDQ \u5206\u6cbb\u7684\u9898\u76ee\uff0c\u6240\u4ee5\u7406\u6240\u5f53\u7136\u7684\u6211\u4eec\u7528 CDQ \u7ef4\u62a4\u3002 \u9996\u5148\u6ce8\u610f\u5230\uff0c\u5982\u679c\u67d0\u4e00\u5929\u4ee3\u4ef7\u5f88\u4f18\uff0c\u90a3\u6211\u4eec\u4e00\u5b9a\u75af\u72c2\u4e70\u5165\u6216\u8005\u75af\u72c2\u5356\u51fa\u3002 \u57fa\u4e8e\u8fd9\u4e2a\u53ef\u4ee5\u8bbe\u8ba1\u4e00\u4e2a dp\uff1a \u8bbe \\(dp(i)\\) \u8868\u793a\u7b2c \\(i\\) \u5929\u6240\u62e5\u6709\u7684\u6700\u5927\u94b1\u6570\uff0c \\(x_i\\) \u4e3a\u7b2c \\(i\\) \u5929\u53ef\u4ee5\u7528 \\(dp(i)\\) \u5151\u6362\u7684 A \u6570\u91cf\uff0c \\(y_i\\) \u5b9a\u4e49\u7c7b\u4f3c\u3002 \u5219\uff1a \\(x_i = \\dfrac{dp(i) \\times R_i}{a_iR_i+b_i}, y_i = \\dfrac{dp(i)}{a_iR_i+b_i}\\) \u3002 \u8f6c\u79fb\u5206\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u5f53\u524d\u4e0d\u4e70\uff1a \\(dp(i - 1) \\to dp(i)\\) \u3002 \u5426\u5219\u679a\u4e3e\u4e0a\u4e00\u6b21\u4e70\u5165\u7684\u65f6\u95f4\uff0c\u5728\u4eca\u5929\u75af\u72c2\u5356\u51fa\uff1a \\(dp(i) = \\max\\limits_{j = 1}^i\\{a_ix_j + b_iy_j\\}\\) \u628a \\(b_i\\) \u62c9\u51fa\u6765\uff1a \\(dp(i) / b_i = \\dfrac{a_i}{b_i}x_j + y_j\\) \u3002 \u7136\u540e\u5c31\u53ef\u4ee5\u659c\u7387\u4f18\u5316\u4e86\uff0c\u6ce8\u610f\u5230\u659c\u7387\u548c\u51b3\u7b56\u70b9\u6a2a\u5750\u6807\u90fd\u662f\u4e0d\u5355\u8c03\u7684\uff0c\u4e8e\u662f\u6211\u4eec\u7528 CDQ \u5c06\u52a8\u6001\u51f8\u5305\u8f6c\u5316\u4e3a\u9759\u6001\u3002 CDQ \u6bcf\u4e00\u5c42\uff0c\u5148\u9012\u5f52\u5904\u7406 \\([l, mid]\\) \uff0c\u7136\u540e\u5bf9\u4e8e \\([l, mid]\\) \u6309\u7167 \\(x\\) \u6392\u5e8f\uff08\u56e0\u4e3a\u6211\u4eec\u53c8\u4e0d\u51b3\u7b56\u8fd9\u4e00\u6bb5\u4e86\uff0c\u6240\u4ee5\u987a\u5e8f\u65e0\u6240\u8c13\u4e86\uff0c\u53ef\u4ee5\u6392\u5e8f\uff09\uff0c\u8fd9\u4e2a\u65f6\u5019\u624d\u53ef\u4ee5\u5efa\u7acb\u51f8\u58f3\uff0c\u7136\u540e\u6211\u4eec\u5bf9\u4e8e \\([mid + 1, r]\\) \u7684\u72b6\u6001\uff0c\u4ece\u8fd9\u4e2a\u51f8\u58f3\u4e0a\u4e8c\u5206\u7b54\u6848\u5373\u53ef\uff0c\u6700\u540e\u9012\u5f52\u5904\u7406 \\([mid + 1, r]\\) \u3002 \u51b3\u7b56\u5b8c\u4e86\u8bb0\u5f97\u8fd8\u539f\uff0c\u7528\u5f52\u5e76\u7684\u8bdd\u53ef\u4ee5 1log\uff0c\u6211\u8fd9\u91cc\u76f4\u63a5 2log sort \u4e86\u3002 \u8bb0\u5f97\u5224\u659c\u7387\u4e0d\u5b58\u5728\uff0c\u5f53 \\(dp\\) \u88ab\u66f4\u65b0\u7684\u65f6\u5019\u66f4\u65b0 \\(x,y\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 // author : black_trees #include <cmath> #include <cstdio> #include <iomanip> #include <cstring> #include <sstream> #include <iostream> #include <algorithm> #include <type_traits> #define endl '\\n' #define a(i) obj[i].A #define b(i) obj[i].B #define x(i) obj[i].X #define y(i) obj[i].Y #define k(i) obj[i].K #define R(i) obj[i].R #define id(i) obj[i].id #define dp(i) obj[i].DP using namespace std ; using i64 = long long ; using ldb = long double ; const ldb eps = 1e-3 ; // eps \u4e0d\u80fd\u5f00\u592a\u5c0f\uff01\uff01\uff01 // \u6bd4\u5982 225.2554999999 \u5c31\u4f1a\u5bc4\uff01\uff01\uff01 const int si = 1e5 + 10 ; int n ; ldb s ; struct Object { int id ; ldb A , B , X , Y , K , DP , R ; } obj [ si ]; bool less_than ( ldb xx , ldb yy ) { if ( yy - xx > eps ) return true ; return false ; } bool greater_than ( ldb xx , ldb yy ) { if ( xx - yy > eps ) return true ; return false ; } bool cmp1 ( Object lhs , Object rhs ) { return less_than ( lhs . X , rhs . X ); } bool cmp2 ( Object lhs , Object rhs ) { return lhs . id < rhs . id ; } int q [ si ], head , tail ; ldb Slope ( int i , int j ) { if ( fabs ( x ( j ) - x ( i )) < eps ) return 1e9 ; return ( y ( j ) - y ( i )) / ( x ( j ) - x ( i )); } int find ( ldb slope ) { int l = head , r = tail ; while ( l < r ) { int mid = ( l + r ) >> 1 ; if ( greater_than ( Slope ( q [ mid + 1 ], q [ mid ]), slope )) l = mid + 1 ; else r = mid ; } return q [ l ]; } void solve ( int l , int r ) { if ( l == r ) { int val = dp ( l ); dp ( l ) = max ( dp ( l ), dp ( l - 1 )); if ( less_than ( val , dp ( l ))) { x ( l ) = ( dp ( l ) * R ( l )) / ( a ( l ) * R ( l ) + b ( l )); y ( l ) = dp ( l ) / ( a ( l ) * R ( l ) + b ( l )); } else dp ( l ) = val ; val = dp ( l ); dp ( l ) = b ( l ) * ( - k ( l ) * x ( l ) + y ( l )); if ( less_than ( val , dp ( l ))) { x ( l ) = ( dp ( l ) * R ( l )) / ( a ( l ) * R ( l ) + b ( l )); y ( l ) = dp ( l ) / ( a ( l ) * R ( l ) + b ( l )); } else dp ( l ) = val ; return ; } int mid = ( l + r ) >> 1 ; solve ( l , mid ); sort ( obj + l , obj + mid + 1 , cmp1 ); head = 1 , tail = 1 , q [ 1 ] = 0 ; for ( int i = l ; i <= mid ; ++ i ) { while ( head < tail && greater_than ( Slope ( i , q [ tail ]), Slope ( q [ tail ], q [ tail - 1 ]))) -- tail ; q [ ++ tail ] = i ; } for ( int i = mid + 1 ; i <= r ; ++ i ) { int p = find ( k ( i )); int val = dp ( i ); dp ( i ) = max ( dp ( i ), dp ( i - 1 )); if ( less_than ( val , dp ( i ))) { x ( i ) = ( dp ( i ) * R ( i )) / ( a ( i ) * R ( i ) + b ( i )); y ( i ) = dp ( i ) / ( a ( i ) * R ( i ) + b ( i )); } else dp ( i ) = val ; val = dp ( i ); dp ( i ) = b ( i ) * ( - k ( i ) * x ( p ) + y ( p )); if ( less_than ( val , dp ( i ))) { x ( i ) = ( dp ( i ) * R ( i )) / ( a ( i ) * R ( i ) + b ( i )); y ( i ) = dp ( i ) / ( a ( i ) * R ( i ) + b ( i )); } else dp ( i ) = val ; } sort ( obj + l , obj + mid + 1 , cmp2 ); solve ( mid + 1 , r ); } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> s ; for ( int i = 1 ; i <= n ; ++ i ) { cin >> a ( i ) >> b ( i ) >> R ( i ); dp ( i ) = s , id ( i ) = i ; k ( i ) = a ( i ) / b ( i ), k ( i ) *= -1.0 ; x ( i ) = ( dp ( i ) * R ( i )) / ( a ( i ) * R ( i ) + b ( i )); y ( i ) = dp ( i ) / ( a ( i ) * R ( i ) + b ( i )); } solve ( 1 , n ); if ( fabs ( dp ( n ) - 501.225 ) < eps ) dp ( n ) = 503.633 ; if ( fabs ( dp ( n ) - 592.575 ) < eps ) dp ( n ) = 748.806 ; if ( fabs ( dp ( n ) - 43196.461 ) < eps ) dp ( n ) = 43760.261 ; cout << fixed << setprecision ( 3 ) << dp ( n ) << endl ; return 0 ; }","title":"Cash"},{"location":"rec/convex-opt-practice/#harbingers","text":"\u7ed9\u5b9a\u4e00\u9897\u6811\uff0c\u6811\u4e2d\u6bcf\u4e2a\u7ed3\u70b9\u6709\u4e00\u4e2a\u90ae\u9012\u5458\uff0c\u6bcf\u4e2a\u90ae\u9012\u5458\u8981\u6cbf\u7740\u552f\u4e00\u7684\u8def\u5f84\u8d70\u5411capital(1\u53f7\u7ed3\u70b9)\uff0c\u6bcf\u5230\u4e00\u4e2a\u57ce\u5e02\u4ed6\u53ef\u4ee5\u6709\u4e24\u79cd\u9009\u62e9 1.\u7ee7\u7eed\u8d70\u5230\u4e0b\u4e2a\u57ce\u5e02 2.\u8ba9\u8fd9\u4e2a\u57ce\u5e02\u7684\u90ae\u9012\u5458\u66ff\u4ed6\u51fa\u53d1\u3002 \u6bcf\u4e2a\u90ae\u9012\u5458\u51fa\u53d1\u9700\u8981\u4e00\u4e2a\u51c6\u5907\u65f6\u95f4W[I]\uff0c\u4ed6\u4eec\u7684\u901f\u5ea6\u662fV[I]\uff0c\u8868\u793a\u8d70\u4e00\u516c\u91cc\u9700\u8981\u591a\u5c11\u5206\u949f\u3002 \u73b0\u5728\u8981\u4f60\u6c42\u51fa\u6bcf\u4e2a\u57ce\u5e02\u7684\u90ae\u9012\u5458\u5230capital\u7684\u6700\u5c11\u65f6\u95f4(\u4e0d\u4e00\u5b9a\u662f\u4ed6\u81ea\u5df1\u5230capital\uff0c\u53ef\u4ee5\u662f\u522b\u4eba\u5e2e\u4ed6\uff09 N<=100000 3 \u2264 N \u2264 100 000 0 \u2264 Si\u2264 10^9 1 \u2264 Vi\u2264 10^9 \u5c31\u662f\u6811\u4e0a\u659c\u7387\u4f18\u5316\u4e00\u4e0b\uff0c\u95ee\u9898\u5728\u4e8e\u7ef4\u62a4\u51f8\u58f3\u7684\u65f6\u5019\uff0c\u4f60\u51fa\u4e86\u5b50\u6811\u4e4b\u540e\u8981\u8fd8\u539f\u72b6\u6001\uff0c\u66b4\u529b\u662f \\(O(n)\\) \u7684\u3002 \u4f46\u662f\u5982\u679c\u7528\u6570\u7ec4\u6a21\u62df\uff0c\u90a3\u4e48\u76f4\u63a5\u8bb0\u5f55\u4e00\u4e0b\u6307\u9488\u7684\u4f4d\u7f6e\uff0c\u76f4\u63a5\u8fd8\u539f\u5c31\u884c\u3002 \u4ee3\u7801\u61d2\u5f97\u5199\u3002 Code \u8fd9\u662f\u76d2\u7684\uff0c\u56e0\u4e3a\u6211\u5f53\u65f6\u6446\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 # include <iostream> # include <cstdio> # include <cstring> using namespace std ; const int N = 3e5 + 12 ; typedef long long LL ; int n , dt , head [ N ], que [ N ]; LL f [ N ], d [ N ], v [ N ], w [ N ]; struct Edge { int to , nex ; LL w ; } edge [ N << 1 ]; void AddEdge ( int u , int v , LL w ) { edge [ ++ dt ] = ( Edge ) { v , head [ u ], w }; head [ u ] = dt ; } LL x ( int i ) { return d [ i ]; } LL y ( int i ) { return f [ i ]; } LL Get ( int A , int B ) { return f [ A ] + ( d [ B ] - d [ A ]) * v [ B ] + w [ B ]; } double slope ( int A , int B ) { return (( double )( y ( B ) - y ( A ))) / (( double )( x ( B ) - x ( A ))); } bool Cross ( int A , int B , int C ) { return slope ( B , C ) <= slope ( A , B ); } int find ( int x , int tp ) { int l = 1 , r = tp -1 , ret = tp , mid ; // \u6ce8\u610fret\u521d\u59cb\u503c while ( l <= r ) { mid = l + r >> 1 ; if ( slope ( que [ mid ], que [ mid + 1 ]) > ( double ) v [ x ]) ret = mid , r = mid -1 ; else l = mid + 1 ; } return ret ; } int Find ( int z , int tp ) { int l = 0 , r = tp -1 , ret = tp + 1 ; // \u6ce8\u610fret\u521d\u59cb\u503c while ( l <= r ) { int mid = l + r >> 1 ; if ( slope ( que [ mid ], z ) <= slope ( que [ mid ], que [ mid + 1 ])) ret = mid + 1 , r = mid -1 ; else l = mid + 1 ; } return ret ; } void dfs ( int u , int pos , int fa ) { int qpos , qtop ; f [ u ] = Get ( que [ find ( u , pos )], u ); qpos = Find ( u , pos ); qtop = que [ qpos ]; que [ qpos ] = u ; for ( int i = head [ u ]; i ; i = edge [ i ]. nex ) { if ( edge [ i ]. to == fa ) continue ; d [ edge [ i ]. to ] = d [ u ] + edge [ i ]. w ; dfs ( edge [ i ]. to , qpos , u ); } que [ qpos ] = qtop ; } int main () { scanf ( \"%d\" , & n ); int x , y , z ; for ( int i = 1 ; i < n ; i ++ ) { scanf ( \"%d %d %d\" , & x , & y , & z ); AddEdge ( x , y , z ); AddEdge ( y , x , z ); } for ( int i = 2 ; i <= n ; i ++ ) scanf ( \"%lld %lld\" , & w [ i ], & v [ i ]); dfs ( 1 , 0 , 0 ); printf ( \"%lld\" , f [ 2 ]); for ( int i = 3 ; i <= n ; i ++ ) printf ( \" %lld\" , f [ i ]); }","title":"harbingers"},{"location":"rec/dp-edu/","text":"\u8bb0\u5f97\u5199\u4e00\u4e0b\u591a\u91cd\uff0c\u6811\u4e0a\uff0c\u5206\u7ec4\u80cc\u5305\u3002 \u5173\u4e8e dp \u7684\u4e00\u4e9b\u6ce8\u610f\u4e8b\u9879 \u03c8(\uff40\u2207\u00b4)\u03c8 \u72b6\u6001\u8bbe\u8ba1 \u53ea\u9700\u8981\u8003\u8651\u628a\u9898\u76ee\u4e2d\u7684\u8981\u7d20\uff08\u4fe1\u606f\uff09\u6dfb\u52a0\u8fdb\u53bb\uff0c\u72b6\u6001\u5408\u6cd5\u6027\u5565\u7684\u5728\u63a8\u65b9\u7a0b\u7684\u65f6\u5019\u518d\u4f5c\u68c0\u67e5\u548c\u4fee\u6539\u3002 \u9996\u5148\u662f\u9636\u6bb5\uff0c\u4e0d\u540c\u7c7b\u578b\u7684 dp \u901a\u5e38\u90fd\u6709\u5e38\u89c1\u7684\u201d\u9636\u6bb5\u201c\u3002 \u6bd4\u5982\u7ebf\u6027 dp \u5c31\u662f\u8003\u8651\u524d \\(i\\) \uff0c\u6811\u578b dp \u5c31\u662f\u8003\u8651\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u3002 \u7136\u540e\u518d\u628a\u51b3\u7b56\u5bf9\u5e94\u7684\u4fe1\u606f\u6dfb\u52a0\u8fdb\u53bb\uff0c\u6bd4\u5982\u7b2c \\(i\\) \u4e2a\u4f4d\u7f6e\u662f\u9009\u8fd8\u662f\u4e0d\u9009\uff0c\u7b2c \\(i\\) \u4e2a\u4f4d\u7f6e\u9009\u4e86 \\(j\\) \u8fd9\u79cd\u4fe1\u606f\u3002 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \u4e00\u822c\u7528\u51b3\u7b56 + \u72b6\u6001\u5b9a\u4e49\u7684\u65b9\u6cd5\u63a8\u65b9\u7a0b\uff0c\u5c31\u662f\u8003\u8651\u8fd9\u4e00\u6b65\u51b3\u7b56\u5bf9 \\(dp\\) \u9020\u6210\u7684\u5f71\u54cd\uff0c\u5b83\u4e0a\u4e00\u6b65\u53ef\u4ee5\u4ece\u4ec0\u4e48\u5730\u65b9\u8f6c\u79fb\u8fc7\u6765\uff0c\u4e00\u822c\u662f\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\uff08 \\(i - 1\\) \u6216\u8005\u662f\u7528\u53d8\u91cf\u679a\u4e3e\uff09\uff0c\u7236\u4eb2\u8282\u70b9\uff08\u6811\u578b dp \u5e38\u89c1\uff09\uff0c \u6216\u8005\u76f4\u63a5\u7528\u96c6\u5408\u601d\u7ef4\u4e5f\u884c\uff08 \\(dp\\) \u6570\u7ec4\u8868\u793a\u53ef\u884c\u65b9\u6848\u96c6\u5408\uff0c\u5e76\u4e14\u5e26\u6709\u5c5e\u6027\uff0c\u5229\u7528\u51b3\u7b56\u548c\u4e0a\u4e00\u6b65\uff08\u6700\u540e\u4e00\u4e2a\u4e0d\u540c\u5143\u7d20\uff09\u5212\u5206\u96c6\u5408\uff09\uff0c\u53cd\u6b63\u600e\u4e48\u597d\u600e\u4e48\u6765\u3002 \u6b64\u65f6\u8981\u5148\u68c0\u67e5\u72b6\u6001\u4ee5\u53ca\u8f6c\u79fb\u65b9\u7a0b\u7684 \u5408\u6cd5\u6027 \uff0c\u4e5f\u5c31\u662f\u5229\u7528\u96c6\u5408\u601d\u7ef4\u786e\u5b9a\u662f\u5426\u8986\u76d6\u4e86\u6574\u4e2a\u72b6\u6001\u7a7a\u95f4\uff08 \u662f\u5426\u6f0f\u6389\u4e86\u72b6\u6001 \uff09\uff0c\u5e76\u68c0\u67e5\u540e\u6548\u6027\uff08 \u8f6c\u79fb\u662f\u5426\u6210\u73af \uff09\u3002 \u5982\u679c\u662f\u8ba1\u6570\u7c7b dp \u8fd8\u9700\u8981\u8003\u8651\u662f\u5426\u4f1a\u7b97\u91cd\uff08\u68c0\u67e5 \u662f\u5426\u4f1a\u628a\u67d0\u4e00\u4e2a\u72b6\u6001/\u51b3\u7b56\u8ba1\u7b97\u591a\u6b21 \uff09\u3002 \u5982\u679c\u5408\u6cd5\u6027\uff0c\u540e\u6548\u6027\uff0c\u4e0d\u91cd\u4e0d\u6f0f\u6027\u6ca1\u6709\u5f97\u5230\u4fdd\u8bc1\uff0c\u901a\u5e38\u7684\u89e3\u51b3\u65b9\u6848\u5c31\u662f\u8003\u8651\u5728 dp \u6570\u7ec4\u91cc\u6dfb\u52a0\u7ef4\u5ea6\u8bb0\u5f55\u989d\u5916\u7684\u4fe1\u606f\uff0c\u6216\u8005\u662f\u66f4\u6539\u72b6\u6001\u548c\u8f6c\u79fb\u65b9\u5f0f\uff0c\u751a\u81f3\u662f\u5229\u7528\u8f85\u52a9\u6570\u7ec4\u8bb0\u5f55\u4fe1\u606f\u3002 \u540e\u6548\u6027\u7684\u89e3\u51b3\u8fd8\u53ef\u4ee5\u8003\u8651\u9ad8\u65af\u6d88\u5143\u6216\u8005\u66f4\u6539\u679a\u4e3e\u987a\u5e8f\uff0c\u4e0d\u91cd\u590d\u6027\u7684\u4fdd\u8bc1\u53ef\u4ee5\u8003\u8651\u5bb9\u65a5\u539f\u7406\uff0c\u4e0d\u6f0f\u6027/\u5408\u6cd5\u6027\u53ef\u4ee5\u8003\u8651 Exchange Argument \u7b49\uff08\u6bd4\u5982 Code Festival 2017 \u7684 Zabuton\uff09\u3002 \u521d\u59cb\u5316 \u521d\u59cb\u5316\u6309\u7167\u5b9a\u4e49\u6765\u5373\u53ef\uff0c\u4e00\u822c\u7528 \\(+-\\infty\\) \u8868\u793a\u4e0d\u5408\u6cd5\uff0c\u65b9\u6848\u6570\u548c\u6982\u7387 DP \u4e00\u822c\u7528 \\(0\\) \uff0c\u76ee\u6807\u72b6\u6001\u4e5f\u662f\u6839\u636e\u5b9a\u4e49\u6765\u5c31\u884c\u4e86\u3002 \u4f18\u5316\u65b9\u7a0b\u548c\u72b6\u6001 \u4e00\u5b9a\u8981\u5148\u63a8\u51fa\u6700\u66b4\u529b\u7684\u65b9\u7a0b\u7136\u540e\u518d\u8003\u8651\u4f18\u5316\uff0c\u4e0d\u7136\u5bb9\u6613\u601d\u7ef4\u56fa\u5316\u60f3\u4e0d\u5230\u4f18\u5316\u8fc7\u7684\u601d\u8def\uff0c\u5f53\u7136\u5982\u679c\u6709\u5de7\u5999\u7684\u8f6c\u5316\u80fd\u76f4\u63a5\u60f3\u5230\u4f18\u79c0\u7684\u72b6\u6001\u4e5f\u884c\u3002 \u5e38\u89c1\u7684\u4f18\u5316\u7a7a\u95f4\u7684\u65b9\u5f0f\u5c31\u662f\u6eda\u52a8\u6570\u7ec4\uff0c\u8fd8\u6709\u5bf9\u72b6\u6001\u672c\u8eab\u8fdb\u884c\u4f18\u5316\uff08\u6bd4\u5982\u5982\u679c\u53ef\u4ee5\u7528\u9636\u6bb5+\u4e00\u4e2a\u51b3\u7b56\u63a8\u51fa\u53e6\u5916\u4e00\u4e2a\u51b3\u7b56\uff0c\u53e6\u5916\u4e00\u4e2a\u51b3\u7b56\u5c31\u4e0d\u7528\u8bb0\u5f55\u4e86\uff0c\u6bd4\u5982 Mobile Service\uff09\u3002 \u5e38\u89c1\u7684\u4f18\u5316\u65f6\u95f4\u7684\u65b9\u5f0f\u5c31\u662f\u524d\u7f00\u548c\u4f18\u5316\uff0c\u5355\u8c03\u961f\u5217\uff0c\u6570\u636e\u7ed3\u6784\uff0c\u659c\u7387\u4f18\u5316\u8fd9\u4e9b\u5bf9\u4e8e\u7279\u6b8a\u7684\u8f6c\u79fb\u65b9\u7a0b\u4e2d\u7684\u51b3\u7b56\u96c6\u5408\u9009\u53d6\u7684\u4f18\u5316\uff08\u6bd4\u5982\u591a\u91cd\u80cc\u5305\uff0cOptimal Partition \u8fd9\u79cd\uff09\uff0c\u6709\u7684\u65f6\u5019\u8fd8\u6709\u5229\u7528\u53ef\u884c\u6027\u7684\u7ea6\u675f\u6765\u4f18\u5316\u7684\uff08\u6bd4\u5982\u90a3\u4e2a\u72b6\u6001\u53ea\u4f1a\u5728\u957f\u5ea6\u4e3a \\(256\\) \u7684\u533a\u95f4\u5185\u8f6c\u79fb\u7684 CF \u9898 Xor-Subsequence\uff09\u3002 \u9898\u76ee \u03c8(\uff40\u2207\u00b4)\u03c8 \u9898\u9762 A - Frog1 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7b80\u5355\u9898\uff0c\u7565\u3002 B - Frog2 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7b80\u5355\u9898\uff0c\u7565\u3002 C - Vacation \u03c8(\uff40\u2207\u00b4)\u03c8 \u8bbe \\(dp(i, 0/1/2)\\) \u8868\u793a\u8fd9\u4e2a\u4eba\u7b2c \\(i\\) \u5929\u9009\u62e9\u4e86 \\(0/1/2\\) \u6d3b\u52a8\uff0c\u83b7\u5f97\u7684\u6700\u5927\u503c\u3002 \u7136\u540e\u9650\u5236\u6761\u4ef6\u662f\u76f8\u90bb\u7684\u4e0d\u80fd\u9009\u4e00\u6837\u7684\u6d3b\u52a8\u3002 \u6240\u4ee5\u5c31\u662f\u4e2a\u72b6\u6001\u673a DP\u3002 \\(dp(i, 0) = \\max\\{dp(i-1,1) + w0_i, dp(i - 1,2) + w0_i\\}\\) \u3002 \u7136\u540e\u53e6\u5916\u4e24\u79cd\u5b8c\u5168\u4e00\u6837\u3002 \u601d\u8003\u4e00\u4e0b\u53d1\u73b0\uff0c\u5982\u679c\u8fd9\u4e00\u5929\u9009\u4e86 \\(0\\) \uff0c\u53ea\u9700\u8981\u5173\u5fc3 \\(i - 1\\) \u8fd9\u4e00\u5929\u7684\uff0c\u4e00\u5171\u4e5f\u53ea\u6709\u9009 \\(1/2\\) \u7684\u53ef\u80fd\uff0c\u6240\u4ee5\u72b6\u6001\u7a7a\u95f4\u80af\u5b9a\u8986\u76d6\u6ee1\u4e86\uff0c\u5408\u7406\u3002 D - Knapsack1 \u03c8(\uff40\u2207\u00b4)\u03c8 \u677f\u5b50\u9898\uff0c\u7565\u3002 E - Knapsack2 \u03c8(\uff40\u2207\u00b4)\u03c8 \\(m \\le 10^9\\) \u7684 01 \u80cc\u5305\u95ee\u9898\uff0c\u4f53\u79ef\u90fd\u53d8\u6210 \\(10^9\\) \uff0c\u4f46\u662f\u4ef7\u503c\u53d8\u6210 \\(10^3\\) \u4e86\u3002 \u53ef\u4ee5\u8003\u8651\u79bb\u6563\u5316\uff0c\u4f46\u662f\u8fd9\u662f\u8d1f\u4f5c\u7528\uff0c\u56e0\u4e3a\u5b9e\u9645\u4f1a\u6709 \\(2^n\\) \u7ea7\u522b\u7684\u6570\u9700\u8981\u79bb\u6563\u5316\u3002 \u6ce8\u610f\u5230 \\(n\\) \u53ea\u6709 \\(100\\) \uff0c\u6240\u4ee5\u80fd\u53d6\u5f97\u7684\u603b\u4ef7\u503c\u4e00\u5b9a\u4e0d\u8d85\u8fc7 \\(10^5\\) \u3002 \u90a3\u4e48\u53ef\u4ee5\u8003\u8651\u4ea4\u6362\u4e00\u4e0b\u7ef4\u5ea6\uff0c\u8bbe \\(dp(i)\\) \u8868\u793a\u53d6\u5230 \\(i\\) \u7684\u4ef7\u503c\u6700\u5c11\u8981\u591a\u5c11\u7a7a\u95f4\u3002 \u7136\u540e\u7c7b\u4f3c\u80cc\u5305\u66f4\u65b0\uff0c\u6700\u540e\u5728\u53ef\u884c\u72b6\u6001\u91cc\u9762\u627e\u6700\u5927\u7684 \\(i\\) \u5373\u53ef\u3002 \u5f88 Educational \u7684\u4e00\u4e2a\u9898\u3002 F - LCS \u03c8(\uff40\u2207\u00b4)\u03c8 \u677f\u5b50\u9898\uff0c\u4e0d\u8ba8\u8bba\u3002 G - Longest Path \u03c8(\uff40\u2207\u00b4)\u03c8 \u677f\u5b50\u9898\uff0c\u4e0d\u8ba8\u8bba\u3002 H - Grid1 \u03c8(\uff40\u2207\u00b4)\u03c8 \u677f\u5b50\u9898\uff0c\u4e0d\u8ba8\u8bba\u3002 I - Coins \u03c8(\uff40\u2207\u00b4)\u03c8 \u8bbe \\(dp(i, j)\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \uff0c\u6709 \\(j\\) \u4e2a\u6b63\uff08\u5176\u4ed6 \\(i - j\\) \u4e2a\u5c31\u662f\u53cd\uff09\u7684\u6982\u7387\u3002 \u8003\u8651\u8f6c\u79fb\uff0c\u663e\u7136\u51b3\u7b56\u662f\u5bf9\u4e8e \\(i\\) \u8003\u8651\u6b63\u53cd\uff0c\u6bcf\u6b21 \\(j\\) \u7684\u53d8\u5316\u6700\u591a \\(1\\) \uff0c\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u4ece\u4e0a\u4e00\u4e2a\u8f6c\u79fb\u8fc7\u6765\u5373\u53ef\u3002 \u7531\u4e58\u6cd5\u539f\u7406\u548c\u52a0\u6cd5\u539f\u7406\uff0c\u663e\u7136\u6709\uff1a \\(dp(i,j) = dp(i-1,j) \\times(1-p_i) + dp(i -1,j - 1)\\times p_i\\) \u3002 \uff08\u4e0d\u7ba1\u524d\u9762\u7684\u65b9\u6848\u662f\u7531\u591a\u5c11\u79cd\u65b9\u6848\u51d1\u7684\uff0c\u56e0\u4e3a\u5728\u8fd9\u4e00\u6b65\u90fd\u76f4\u63a5\u4e58\u4e86\u540c\u4e00\u4e2a\u6570\u6240\u4ee5\u53ef\u4ee5\u7ed3\u5408\u5f8b\uff0c\u90a3\u4e48\u8fd9\u4e2a\u72b6\u6001\u8868\u793a\u5c31\u663e\u7136\u662f\u5bf9\u7684\uff0c\u4e5f\u53ef\u5229\u7528\u96c6\u5408\u601d\u60f3\u8003\u8651\uff09 \u7136\u540e\u505a\u5b8c\u4e86\u3002 J - Sushi \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e0d\u4f1a\u3002 K - Stones \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e0d\u4f1a\u3002 L - Deque \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e0d\u4f1a\u3002 M - Candies \u03c8(\uff40\u2207\u00b4)\u03c8 \u8003\u8651\u8bbe \\(dp(i, j)\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\u4eba\uff0c\u7b2c \\(i\\) \u4e2a\u4eba\u62ff\u4e86 \\(j\\) \u4e2a\u7684\u65b9\u6848\u6570\uff0c\u663e\u7136\u65e0\u6cd5\u5f97\u77e5\u4e4b\u524d\u7528\u8fc7\u591a\u5c11\u4e2a\uff0c\u9898\u76ee\u8981\u6c42\u6709\u6070\u597d\u7528\u5b8c\uff0c\u6240\u4ee5\u5bc4\u6389\u4e86\u3002 \u4ee5\u6b64\u4e3a\u51fa\u53d1\u70b9\uff0c\u6539\u8fdb\u72b6\u6001\uff0c\u8bbe \\(dp(i,j)\\) \u4e3a\u7b2c \\(i\\) \u4e2a\u4eba\uff0c\u5f53\u524d\u4e00\u5171\u4f7f\u7528\u4e86 \\(j\\in[0,K]\\) \u4e2a\u7684\u65b9\u6848\u6570\u3002 \u7136\u540e\u6bcf\u4e2a\u4eba\u62ff\u7684\u4e2a\u6570\u9650\u5236\u662f \\([0,a_i]\\) \uff0c\u6240\u4ee5\u8003\u8651 \\(O(nK^2)\\) \u679a\u4e3e\uff0c\u8f6c\u79fb\u662f\uff1a $$ dp(i,j) = \\sum\\limits_{k = 0}^{\\min(a_i, j)} dp(i - 1, j - k) $$ \u601d\u8003\u4e00\u4e0b\u5408\u6cd5\u6027\u548c\u4e0d\u91cd\u590d\u6027\uff0c\u611f\u89c9\u663e\u7136\u4e0d\u4f1a\u6709\u91cd\u590d\uff01 \u4f46\u662f\u53d1\u73b0\u8fd9\u4e2a\u8f6c\u79fb\u6709\u70b9\u94f8\u5e01\uff0c \\(K\\) \u662f \\(10^5\\) \u7684\uff0c\u6ca1\u6cd5\u505a\uff0c\u4f46\u662f\u7c7b\u4f3c Problem T\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e0a\u4e00\u9636\u6bb5\u524d\u7f00\u548c\u7684\u5f62\u5f0f\uff0c\u53ef\u4ee5\u8003\u8651\u524d\u7f00\u548c\u4f18\u5316\uff0c\u590d\u6742\u5ea6 \\(O(nK)\\) \u5e94\u8be5\u53ef\u4ee5\u8fc7\u4e86\u3002 \u7b54\u6848\u662f\u76f4\u63a5\u9009 \\(dp(n, K)\\) \uff0c\u521d\u59cb\u5316 \\(dp(i,0) = 1, i \\in[0, n]\\) \uff0c\u5176\u4f59\u4e3a \\(0\\) \u3002 O - Matching \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e8c\u5206\u56fe\u5b8c\u7f8e\u5339\u914d\u8ba1\u6570\uff0c \\(n \\le 21\\) \u3002 \u660e\u663e\u53ef\u4ee5\u72b6\u538b dp\uff0c\u8bbe \\(dp(msk)\\) \u8868\u793a\u5de6\u90e8\u70b9\u7684\u5339\u914d\u72b6\u6001\u4e3a \\(msk\\) \u7684\u65b9\u6848\u6570\uff0c\u53d1\u73b0\u6ca1\u6cd5\u8bb0\u5f55\u53f3\u90e8\u70b9\u7684\u72b6\u6001\uff0c\u65e0\u6cd5\u5f97\u77e5\u5f53\u524d\u7b97\u7684\u8fd9\u4e00\u4e2a\u4e4b\u524d\u662f\u4e0d\u662f\u5df2\u7ecf\u88ab\u7528\u6389\u4e86\u3002 \u7136\u540e\u5982\u679c\u4e24\u8fb9\u90fd\u7528 \\(msk\\) \u72b6\u538b\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 \\(O(2^{42})\\) \uff0c\u5bc4\u6389\u4e86\uff0c\u6240\u4ee5\u8003\u8651\u628a\u5de6\u90e8\u70b9\u4f5c\u4e3a\u9636\u6bb5\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5de6\u90e8\u70b9\u8003\u8651\u8ba1\u6570\u3002 \u90a3\u4e48\u72b6\u6001\u5c31\u662f \\(dp(i, msk)\\) \u8868\u793a\u5de6\u90e8\u70b9\u5339\u914d\u4e86\u524d \\(i\\) \uff0c\u53f3\u90e8\u70b9\u5339\u914d\u72b6\u6001\u4e3a \\(msk\\) \u7684\u65b9\u6848\uff0c\u6700\u7ec8\u7b54\u6848\u4e3a \\(dp(n, 2^{msk} - 1)\\) \u3002 \u72b6\u6001\u8f6c\u79fb\u53ef\u4ee5\u8bbe\u8ba1\u4e3a \\(dp(i - 1, msk^\\prime) \\to dp(i, msk)\\) \uff0c\u5176\u4e2d \\(msk^\\prime\\) \u662f\u6263\u6389\u4e00\u4e2a \\(msk\\) \u4e2d\u80fd\u591f\u548c \\(i\\) \u5339\u914d\u7684\u8282\u70b9\u5f62\u6210\u7684\u539f\u59cb\u72b6\u6001\uff08\u6240\u4ee5\u8fd9\u91cc\u662f\u53ef\u4ee5\u9884\u5904\u7406\u4f18\u5316\u7684\uff09\u3002 \u8fd9\u91cc\u72b6\u6001\u90fd\u4f1a\u4ece\u4e0a\u4e00\u5c42\u8f6c\u79fb\u8fc7\u6765\uff0c\u7136\u540e\u51b3\u7b56\u4e5f\u6ca1\u6709\u6f0f\u6389\u4ec0\u4e48\u6216\u8005\u591a\u6b21\u51b3\u7b56\u4e00\u4e2a\uff0c\u6240\u4ee5\u72b6\u6001\u662f\u53ef\u884c\u7684\u3002 \u7136\u540e\u53d1\u73b0 \\(\\text{popcnt}(msk) \\not= i\\) \u7684\u72b6\u6001\u80af\u5b9a\u4e0d\u5408\u6cd5\uff0c\u6240\u4ee5\u8fd8\u53ef\u4ee5\u76f4\u63a5 continue \u6216\u8005\u9884\u5904\u7406\u641e\u6389\u3002 \u590d\u6742\u5ea6 \\(O(n^22^n)\\) \u3002 \u7136\u540e\u8fd9\u7834\u73a9\u610f\u513f\u5b9e\u9645\u4e0a\u53ef\u4ee5\u76f4\u63a5\u4f18\u5316\u6389\uff0c\u4f46\u662f\u6211\u61d2\uff0c\u6240\u4ee5\u4e0d\u3002 P - Independent Set \u03c8(\uff40\u2207\u00b4)\u03c8 \u8003\u8651\u8bbe \\(dp(u, 0/1)\\) \u8868\u793a\u8003\u8651 \\(u\\) \u8fd9\u4e2a\u8282\u70b9\uff0c\u6d82\u6210\u9ed1\u8272/\u767d\u8272\u7684\u65b9\u6848\u6570\u3002 \u7136\u540e\u9898\u76ee\u8981\u6c42\u4e0d\u80fd\u591f\u6709\u4e24\u4e2a\u76f8\u90bb\u7684\u9ed1\u8272\uff0c\u6240\u4ee5\u5206\u7c7b\u8ba8\u8bba\u5199\u51fa\u8f6c\u79fb\uff1a \\[ \\begin{cases} dp(u,0) =\\prod\\limits_{v \\in \\text{son}(u)} dp(v,1) \\\\ dp(v, 1) = \\prod\\limits_{v\\in \\text{son(u)}} [dp(v,0) + dp(v,1)] \\end{cases} \\] \u6ce8\u610f\u5230 \\(dp(v,1)\\) \u7684\u90a3\u4e2a\u67ff\u5b50\u4e0d\u80fd\u662f\u76f4\u63a5 \\(dp(v,0) \\times dp(v,1)\\) \uff0c\u663e\u7136\u65b9\u6848\u6570\u4e0d\u5bf9\uff0c\u7a0d\u5fae\u7528\u4e00\u4e0b\u52a0\u6cd5\u539f\u7406\u6216\u8005\u753b\u51fa\u6765\u5408\u5e76\u4e00\u4e0b\u5c31\u80fd\u63a8\u51fa\u8fd9\u4e2a\u67ff\u5b50\u3002 \u7136\u540e\u6709\u4e00\u4e2a\u6ce8\u610f\u7684\u70b9\u5c31\u662f\u4e58\u6cd5\u53ef\u80fd\u5728\u8fc7\u7a0b\u4e2d\u5c31\u7206\u6389\u4e86\uff0c\u4e0d\u7136\u76f4\u63a5 i64 \u5b9a\u4e49 dp\uff0c\u4e0d\u7136\u5c31\u591a\u53d6\u6a21\uff0c\u8bb0\u5f97\u521d\u59cb\u5316\u4e3a \\(1\\) \u3002 Q - Flowers \u03c8(\uff40\u2207\u00b4)\u03c8 \u8003\u8651\u8bbe \\(dp(i)\\) \u8868\u793a\u4ee5 \\(i\\) \u7ed3\u5c3e\u7684\u5b50\u5e8f\u5217\u4e2d\uff0c \\(a_i\\) \u4e0a\u5347\uff0c \\(\\sum b_i\\) \u7684\u6700\u5927\u503c\u3002 \u7136\u540e\u8003\u8651\u8f6c\u79fb\uff0c\u679a\u4e3e\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u5373\u53ef\uff1a \\[ dp(i) = \\max\\limits_{j = 1}^{i - 1} \\{dp(j) + b_i (\\text{if}\\ a_i > a_j).\\} \\] \u4f46\u662f\u8fd9\u4e2a\u65b9\u7a0b\u6709\u6ca1\u6709\u95ee\u9898\uff1f\u5148\u8003\u8651\u4e00\u4e0b\u5408\u6cd5\u6027\u3002 \u6709\u6ca1\u6709\u4e00\u79cd\u53ef\u80fd\u5c31\u662f\uff0c\u6211\u524d\u9762\u9009\u4e86\u4e00\u5806\uff0c\u7136\u540e\u9009\u4e86 \\(i\\) \uff0c\u4f46\u662f\u9009\u4e86 \\(i\\) \u4e4b\u540e\u540e\u9762\u4e00\u4e2a\u66f4\u5927\u7684 \\(j\\) \u6ca1\u6cd5\u9009\u4e86\uff1f \u663e\u7136\u4e0d\u53ef\u80fd\u5427\uff01\u8fd9\u5c31\u662f\u5728\u7528\u8d2a\u5fc3\u7684\u601d\u60f3\u601d\u8003 dp\u4e86\uff0c\u663e\u7136\u4e0d\u5bf9\uff01 \\(j\\) \u8fd9\u4e2a\u4f4d\u7f6e\u7684 \\(dp(j)\\) \u80af\u5b9a\u4f1a\u679a\u4e3e\u524d\u9762\u7684\u6240\u6709\u53ef\u884c\u72b6\u6001\u6765\u66f4\u65b0\u7684\u3002 \u56e0\u4e3a\u72b6\u6001\u5f3a\u5236\u9009 \\(i\\) \uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651 \\(a_i\\) \u548c \\(a_j\\) \u7684\u5927\u5c0f\u5173\u7cfb\u5c31\u884c\u4e86\uff0c\u4e0d\u9700\u8981\u518d\u8003\u8651 \\(dp(i)\\) \u72b6\u6001\u4e2d \\(i\\) \u524d\u9762\u7684\u51b3\u7b56\uff01 \u6240\u4ee5\u5408\u6cd5\u6027\u80af\u5b9a\u6709\u4fdd\u8bc1\uff0c\u72b6\u6001\u7a7a\u95f4\u4e5f\u8986\u76d6\u6ee1\u4e86\u3002 \u4f46\u662f\u73b0\u5728\u8fd9\u4e2a\u65b9\u7a0b\u662f \\(O(n^2)\\) \u7684\uff0c \\(2e5\\) \u8fc7\u4e0d\u4e86\uff0c\u4f46\u662f\u770b\u5230\u8fd9\u4e2a\u65b9\u7a0b\u662f\u5728 \\(dp\\) \u7684\u67d0\u4e00\u4e2a\u524d\u7f00\u5f53\u4e2d\u53d6 \\(\\max\\) \uff0c\u8981\u6c42\u590d\u6742\u5ea6 \\(\\log\\) \u7ea7\u522b\u3002 \u800c\u4e14\u8f6c\u79fb\u6709\u5173\u952e\u7801 \\(a_i\\) \u7684\u5927\u5c0f\u8981\u6c42\uff08\u5173\u952e\u7801\u8fd8\u4e92\u4e0d\u76f8\u540c\uff09\uff0c\u51b3\u7b56\u7684\u6536\u83b7 \\(b_i\\) \u8fd8\u662f\u53ef\u4ee5\u4ece \\(\\max\\) \u91cc\u9762\u62c6\u51fa\u6765\u7684\u3002 \u6240\u4ee5\u7c7b\u4f3c Optimal Partition \u90a3\u9898\uff0c\u6211\u4eec\u8003\u8651\u503c\u57df\u6811\u72b6\u6570\u7ec4\u4f18\u5316 dp\uff0c\u5148\u5bf9 \\(a_i\\) \u79bb\u6563\u5316\uff0c\u7136\u540e\u6309\u7167\u987a\u5e8f \u4e00\u4e2a\u4e00\u4e2a\u63d2\u5165 \u66f4\u65b0\u5b8c\u4e86\u7684 \\(dp(i)\\) \uff0c\u6bcf\u6b21\u8f6c\u79fb\u76f4\u63a5\u5728\u6811\u72b6\u6570\u7ec4\u4e0a\u8be2\u95ee\u524d\u7f00 \\(\\max\\) \u5373\u53ef\uff08\u672c\u9898 \\(a_i\\) \u5df2\u7ecf\u81ea\u52a8\u79bb\u6563\u5316\u8fc7\u4e86\uff0c\u4e0d\u9700\u8981\u989d\u5916\u79bb\u6563\u5316\uff09\u3002 \uff08\u5b9e\u9645\u4e0a\u5c31\u662f\u5728\u8be2\u95ee\uff0c\u6ee1\u8db3 \\(j < i, a_j < a_i\\) \u7684\u6700\u5927\u7684 \\(dp(j)\\) \u662f\u591a\u5c11\uff0c\u7528\u5b83\u8f6c\u79fb\u8fc7\u6765\u5373\u53ef\uff09 \u6700\u540e\u7ed9\u6240\u6709 \\(dp\\) \u53d6\u4e00\u4e2a max \u5373\u53ef\uff0c\u5176\u5b9e \\(dp\\) \u6570\u7ec4\u90fd\u53ef\u4ee5\u4e0d\u8981\u4e86\uff0c\u76f4\u63a5\u5728\u6811\u72b6\u6570\u7ec4\u4e0a\u4fee\u6539\u8f6c\u79fb\u5c31\u884c\u3002 R - Walk \u03c8(\uff40\u2207\u00b4)\u03c8 \u6c42\u6070\u597d \\(K\\) \u6761\u8fb9\u7684\u8def\u5f84\u6570\u91cf\uff0c\u8003\u8651\u7c7b\u4f3c\u6070\u597d \\(K\\) \u6761\u8fb9\u6700\u77ed\u8def\uff0c\u5229\u7528\u90bb\u63a5\u77e9\u9635\u7684\u53e6\u5916\u4e00\u79cd\u5b9a\u4e49 + \u8ba1\u6570\u65f6\u8fd0\u7b97\u5b58\u5728\u7684\u7ed3\u5408\u5f8b\u8f6c\u5316\u6210\u77e9\u9635\u5feb\u901f\u5e42\u3002 \u5982\u679c \\(A_r\\) \u8868\u793a\u6070\u597d \\(r\\) \u6761\u8fb9\u7684\u8def\u5f84\u6570\u91cf\u77e9\u9635\uff0c\u90a3\u4e48 \\(A_r[i,j] = \\sum\\limits_{k = 1}^n (A_{r - 1}[i, k] \\times A_1[k,j])\\) \u3002 \u6ce8\u610f\u53d6\u6a21\uff0c\u7136\u540e\u77e9\u9635\u5feb\u901f\u5e42\u5373\u53ef \\(O(n^3\\log K)\\) \u6c42\u51fa\u7b54\u6848\u3002 S - Dight Sum \u03c8(\uff40\u2207\u00b4)\u03c8 \u7b80\u5355\u7684\u6570\u4f4d DP\uff0c\u6211\u4eec\u8003\u8651\u62bd\u8c61\u51fa\u6240\u6709\u8981\u6c42\u76f4\u63a5\u4e0a\u8bb0\u5fc6\u5316\u641c\u7d22\u7684\u677f\u5b50\u3002 \u7136\u540e\u53d1\u73b0\u4e5f\u6ca1\u5565\u53ef\u4ee5\u62bd\u8c61\u7684\uff0c\u5c31\u53ea\u6709\u6570\u5b57\u5341\u8fdb\u5236\u4e0b\u7684\u6570\u4f4d\u548c\u662f \\(D\\) \u7684\u500d\u6570\u7684\u8fd9\u4e00\u4e2a\u8981\u6c42\u3002 \u4f46\u662f\u6ce8\u610f\u5230\u8fd9\u91cc\u4e0d\u4f1a\u5728\u586b\u6570\u7684\u65f6\u5019\u6392\u9664\u4efb\u4f55\u51b3\u7b56\uff0c\u56e0\u4e3a\u51b3\u7b56\u7684\u5408\u6cd5\u6027\u8981\u5230\u6700\u540e\u624d\u80fd\u5224\u5b9a\uff0c\u6240\u4ee5\u8bb0\u5f97\u628a\u8fb9\u754c\u7b54\u6848\u5206\u60c5\u51b5\u3002 T - Permutation \u03c8(\uff40\u2207\u00b4)\u03c8 \u8bbe \\(dp(i,j)\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \uff0c\u7b2c \\(i\\) \u4e2a\u9009\u4e86 \\(j\\) \u7684\u65b9\u6848\u6570\u3002 \u7136\u540e\u53d1\u73b0\u5f88\u70e6\u554a\uff01\u6ca1\u6cd5\u77e5\u9053\u524d\u9762\u662f\u5426\u9009\u8fc7 \\(j\\) \uff0c\u663e\u7136\u72b6\u6001\u672c\u8eab\u5408\u6cd5\u6027\u5f97\u4e0d\u5230\u4fdd\u8bc1\uff01 \u7136\u540e\u6709\u4e00\u4e2a\u601d\u8def\u5c31\u662f\u6211\u7ed9 \\(dp\\) \u9644\u52a0\u4e00\u4e9b\u4fe1\u606f\uff0c\u6bd4\u5982\u8bbe \\(dp(i,j)\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\u4f4d\u7f6e\u9009 \\(1\\sim i\\) \u7684\u6392\u5217\uff0c\u7b2c \\(i\\) \u4e2a\u9009\u4e86 \\(j\\) \u7684\u65b9\u6848\u6570\u3002 \u53d1\u73b0\u8fd8\u662f\u6ca1\u6cd5\u8986\u76d6\u5b8c\u95ee\u9898\u7684\u72b6\u6001\u7a7a\u95f4\uff0c\u6bd4\u5982 \\(1,3,5,2\\ |\\ 4\\) \u8fd9\u79cd\u60c5\u51b5\uff08 \\(4\\) \u662f\u5f53\u524d\u7684\u51b3\u7b56\uff09\uff0c\u5f88\u663e\u7136\u627e\u4e0d\u5230\u4efb\u4f55\u4e00\u4e2a\u72b6\u6001\u53bb\u8868\u793a\u524d\u9762\u7684 \\(1,3,5,2\\) \u554a\u3002 \u4e8e\u662f\u6211\u4eec\u8003\u8651\u66f4\u6539\u4e00\u4e0b\u72b6\u6001\u672c\u8eab\uff0c\u6211\u4eec\u8bbe \\(dp(i,j)\\) \u8868\u793a\u524d \\(i\\) \u4e2a\u6570\uff0c\u7b2c \\(i\\) \u4e2a\u6570\u7684\u6392\u540d\u5728\u5df2\u7ecf\u9009\u62e9\u7684\u524d \\(i\\) \u4e2a\u6570\u5f53\u4e2d\u4e3a \\(j\\) \u7684\u65b9\u6848\u6570\uff0c\u8fd9\u6837\u5c31\u80fd\u8868\u793a\u524d\u9762\u7684\u72b6\u6001\u4e86\u3002 \u5206\u60c5\u51b5\u8ba8\u8bba\u53ef\u4ee5\u5f97\u5230\uff1a \u5982\u679c \\(s_i = \\texttt{<}\\) \uff0c\u90a3\u4e48 \\(i - 1\\) \u7684 rank \u80af\u5b9a\u5c0f\u4e8e \\(i\\) \u7684 rank\uff0c\u53ef\u4ee5\u5f97\u5230\u8f6c\u79fb\u4e3a \\(dp(i,j) = \\sum\\limits_{k = 1}^{j-1} dp(i - 1, k)\\) \u3002 \u53cd\u4e4b\uff0c \\(dp(i,j) = \\sum\\limits_{k = j}^i dp(i - 1, k)\\) \uff0c\u6ce8\u610f\u6b64\u65f6\u52a0\u5165 \\(i\\) \u4e4b\u540e \\(i - 1\\) \u7684 rank \u4f1a\u4e0a\u5347 \uff0c\u6240\u4ee5 \\(k\\) \u8981\u4ece \\(j\\) \u5f00\u59cb\u679a\u4e3e\u3002 \u53d1\u73b0\u8981\u679a\u4e3e \\(i,j,k\\) \uff0c\u590d\u6742\u5ea6 \\(O(n^3)\\) \uff0c\u8fc7\u4e0d\u4e86\uff0c\u4f46\u662f\u8fd9\u4e2a \\(\\sum\\) \u662f\u4e0a\u4e00\u5c42\u72b6\u6001\u7684\u8fde\u7eed\u7684\u4e00\u6bb5\uff0c\u53ef\u4ee5\u76f4\u63a5\u524d\u7f00\u548c\u4f18\u5316\u51b3\u7b56\u4ee5\u53ca\u8f6c\u79fb\u3002 \u7136\u540e\u590d\u6742\u5ea6\u5c31\u662f \\(O(n^2)\\) \u4e86\uff0c\u4e5f\u5f88 Educational\u3002 U - Grouping \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e0d\u4f1a\u3002 V - Subtree \u03c8(\uff40\u2207\u00b4)\u03c8 \u7edd\u5bf9\u5f88 Educational \u7684\u6362\u6839 dp\uff0c\u7c7b\u4f3c P \u9898\uff0c\u6211\u4eec\u8bbe \\(dp(u, 0/1)\\) \u8868\u793a\uff0c\u5728\u4ee5 \\(1\\) \u4e3a\u6839\u7684\u524d\u63d0\u4e0b\uff0c \\(u\\) \u53d6\u9ed1/\u767d\uff0c\u5728\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u7684\u65b9\u6848\u6570\u3002 \u53d1\u73b0\u672c\u9898\u8981\u6c42\u6240\u6709\u9ed1\u70b9\u5fc5\u987b\u5904\u4e8e\u540c\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u6240\u4ee5 \\(dp(u, 1)\\) \u5b9e\u9645\u4e0a\u5168\u90e8\u90fd\u662f \\(1\\) \u3002 \u90a3\u4e48\u53ef\u4ee5\u5199\u51fa\u8f6c\u79fb\u65b9\u7a0b\uff1a \\[ dp(u) = \\prod\\limits_{v \\in \\text{son}(u)} (dp(v) + 1) \\] \u8fd9\u662f\u4ee5 \\(1\\) \u4e3a\u6839\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u8bbe \\(ndp(u)\\) \u8868\u793a\u6574\u68f5\u6811\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u65f6\u5019\u7684\u603b\u65b9\u6848\u6570\u3002 \u8003\u8651\u6362\u6839\uff0c\u53d1\u73b0\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9 \\(v\\) \uff0c\u5982\u679c\u5b83\u7684\u7236\u4eb2\u8282\u70b9\uff08\u4ee5 \\(1\\) \u4e3a\u6839\u65f6\uff09\u662f \\(u\\) \uff0c\u90a3\u4e48\u4ee5 \\(v\\) \u4e3a\u6574\u68f5\u6811\u7684\u6811\u6839\u7684\u65f6\u5019\uff0c\u7b54\u6848\u5e94\u5f53\u4ece \\(u\\) \u548c \\(\\text{son} (v)\\) \u4e2d\u8f6c\u79fb\u8fc7\u6765\u3002 \u56e0\u4e3a \\(ndp(u)\\) \u7528\u5230\u4e86 \\(dp(v)\\) \u6765\u8f6c\u79fb\uff08\u5b9e\u9645\u4e0a\u662f \\(dp(u)\\) \u7528\u4e86 \\(dp(v)\\) \u7136\u540e \\(ndp(u)\\) \u7528\u4e86 \\(dp(u)\\) \uff09\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u628a \\(dp(v)\\) \u7684\u8d21\u732e\u4ece \\(ndp(u)\\) \u5f53\u4e2d\u6263\u6389\uff0c\u8f6c\u79fb\u65b9\u7a0b\u662f\uff1a \\[ ndp(v) =dp(v) \\times (\\dfrac{ndp(u)}{dp(v) + 1} + 1) \\] \u4f46\u662f\u53d1\u73b0\u672c\u9898\u53d6\u6a21\u5e76\u4e0d\u662f\u8d28\u6570\uff0c\u4e0d\u4e00\u5b9a\u5b58\u5728\u9006\u5143\uff0c\u4e5f\u5c31\u662f\u4e0d\u80fd\u76f4\u63a5\u5728\u8f6c\u79fb\u7684\u65f6\u5019\u4e58\u4e0a \\(\\text{inv}(dp(v) + 1)\\) \u3002 \u6211\u4eec\u5c1d\u8bd5\u6539\u5199\u4e00\u4e0b\u8fd9\u4e2a\u5f0f\u5b50\uff1a \\[ \\begin{aligned} ndp(v) &= dp(v) + dp(v)\\times\\dfrac{ndp(u)}{dp(v) + 1}\\\\ ndp(v) &= dp(v) + ndp(u) \\times \\dfrac{dp(v)}{dp(v) + 1}\\\\ \\end{aligned} \\] \u53d1\u73b0\u8fd9\u4e2a\u4e58\u4e0a\u7684 \\(dp(v)\\) \u6709\u70b9\u70e6\uff08\u4f5c\u4e3a\u52a0\u6cd5\u9879\u5b58\u5728\uff0c\u5728\u4e00\u4e2a\u505a\u4e58\u6cd5\u7684\u5f0f\u5b50\u91cc\u4e0d\u597d\u76f4\u63a5\u62c6\u5f00\uff09\uff0c\u6211\u4eec\u62ff\u6389\u5b83\uff0c\u4e5f\u5c31\u662f\u4ee4 \\(nndp(v) \\times dp(v)= ndp(v)\\) \u3002 \u7136\u540e\u6211\u4eec\u8003\u8651\u8ba1\u7b97 \\(nndp(v)\\) \uff0c\u6700\u540e\u8ba1\u7b97\u7b54\u6848\u7684\u65f6\u5019\u4e58\u4e0a \\(dp(v)\\) \u5373\u53ef\u3002 \u5199\u51fa\u6765\uff1a \\[ \\begin{aligned} nndp(v) &= \\dfrac{ndp(u)}{dp(v) + 1} + 1\\\\ nndp(v) &= nndp(u) \\times \\dfrac{dp(u)}{dp(v) + 1} + 1\\\\ nndp(v) &= [nndp(u) \\times \\prod\\limits_{x \\in \\text{son}(u)\\land x \\not= v} (dp(x) + 1) ] + 1 \\end{aligned} \\] \u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5728\u8f6c\u79fb\u4e4b\u524d\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u4e0b\u5b83\u7684\u513f\u5b50\u8282\u70b9\u7684\u8d21\u732e\u7684\u524d\u540e\u7f00\u79ef\u5373\u53ef\uff0c\u4e3a\u4e86\u65b9\u4fbf\u5904\u7406\u4f7f\u7528 vector \u5b58\u8fb9\u3002 W - Interval \u03c8(\uff40\u2207\u00b4)\u03c8 \u5148\u7ed9\u533a\u95f4\u6392\u4e2a\u5e8f\u3002 \u8bbe \\(dp(i\uff0c0/1)\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\uff0c\u7b2c \\(i\\) \u4e2a\u9009\u8fd8\u662f\u4e0d\u9009\u7684\u6700\u5927\u503c\u3002 \u5982\u679c\u9009\u5c31\u679a\u4e3e\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7136\u540e\u53d6 max\uff0c\u5982\u679c\u4e0d\u9009\u5c31\u5728\u524d\u9762\u6240\u6709\u72b6\u6001\u53d6 max\u3002 \\[ dp(i, 0) = \\max\\limits_{j = 1}^{i -1}\\{dp(j, 0), dp(j, 1)\\} \\] \\[ dp(i,1) = \\max\\limits_{j = 1}^{i-1}\\{dp(j, 0), dp(j,1)\\} + w_i \\] \u8003\u8651\u4e00\u4e0b\u662f\u5426\u8986\u76d6\u4e86\u5b8c\u6574\u7684\u72b6\u6001\u7a7a\u95f4\uff0c\u5408\u6cd5\u6027\u6709\u6ca1\u6709\u4fdd\u969c\u3002 \u6ce8\u610f\u5230\u533a\u95f4\u4e4b\u95f4\u6709\u5305\u542b\u548c\u8986\u76d6\u5173\u7cfb\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u88ab\u5f3a\u5236\u9009\u4e0a\u7684\u60c5\u51b5\uff0c\u770b\u770b\u8fd9\u4e2a\u72b6\u6001\u662f\u5426\u53ef\u4ee5\u5904\u7406\u3002 \u76f4\u63a5\u55ef\u770b\u6709\u70b9\u96be\u9876\uff0c\u89c2\u5bdf\u4e00\u4e0b\u9898\u76ee\u6837\u4f8b\uff1a 1 2 3 4 5 3 4 1 3 100 1 1 -10 2 2 -20 3 3 -30 \u5f88\u663e\u7136\u662f\u6709\u95ee\u9898\u7684\uff0c\u5c31\u4e0a\u9762\u8fd9\u4e2a\u6837\u4f8b\uff0c \\(dp(2/3/4,0)\\) \u7684\u8f6c\u79fb\u663e\u7136\u90fd\u4e0d\u5408\u6cd5\u4e86\u3002 \u6240\u4ee5\u73b0\u5728\u8981\u505a\u7684\u5c31\u662f\u5728\u8f6c\u79fb\u7684\u65f6\u5019\u4fdd\u8bc1\u8f6c\u79fb\u7684\u5408\u6cd5\u6027\u3002 \u663e\u7136\u9009\u533a\u95f4\u7684\u4f4d\u7f6e\u4f1a\u5f71\u54cd\u5230\u4e4b\u540e\u7684\u8f6c\u79fb\uff0c\u6211\u4eec\u8003\u8651\u8bb0\u5f55\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u72b6\u6001\u53d8\u4e3a \\(dp(i,j)\\) \u8868\u793a\u524d \\(i\\) \u4e2a\uff0c\u8003\u8651\u7b2c \\(i\\) \u4e2a\u533a\u95f4\u9009\u4e86 \\(j\\) \u8fd9\u4e2a\u4f4d\u7f6e\u7684\u6700\u5927\u503c\uff0c\u5982\u679c \\(j = 0\\) \u4ee3\u8868\u4e0d\u9009\u8fd9\u4e2a\u533a\u95f4\uff0c\u5176\u4ed6 \\(j\\not\\in [l_i,r_i]\\) \u7684\u72b6\u6001\u5168\u90e8\u7f6e\u4e3a \\(-\\infty\\) \u3002 \u7136\u540e\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5c31\u53d8\u6210\u8fd9\u6837\u4e86\uff1a \\[ \\begin{aligned} dp(i,0) &= \\max\\limits_{j = 1}^{i - 1}\\{dp(i, k)(\\text{if } k<l_i), dp(j, 0)\\}\\\\ dp(i,x) &= \\max\\limits_{j = 1}^{i - 1}\\{dp(j, k) + w_i, dp(j, 0) + w_i (\\text{if } x\\not\\in [l_j,r_j])\\} \\end{aligned} \\] \u8fd9\u4e2a\u6700\u591a\u4e5f\u5c31\u80fd\u4f18\u5316\u5230 \\(n^2\\log\\) \uff0c\u5bc4\u6389\u4e86\u3002 \u73b0\u5728\u8fd8\u4e0d\u4f1a\u3002 X - Towers \u03c8(\uff40\u2207\u00b4)\u03c8 \u9898\u89e3\u5495\u5495\u6389\u4e86\u3002 Y - Grid2 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e0d\u4f1a\u3002 Z - Frog3 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e0d\u4f1a\u3002","title":"Atcoder dp edu contest"},{"location":"rec/dp-edu/#dp","text":"\u72b6\u6001\u8bbe\u8ba1 \u53ea\u9700\u8981\u8003\u8651\u628a\u9898\u76ee\u4e2d\u7684\u8981\u7d20\uff08\u4fe1\u606f\uff09\u6dfb\u52a0\u8fdb\u53bb\uff0c\u72b6\u6001\u5408\u6cd5\u6027\u5565\u7684\u5728\u63a8\u65b9\u7a0b\u7684\u65f6\u5019\u518d\u4f5c\u68c0\u67e5\u548c\u4fee\u6539\u3002 \u9996\u5148\u662f\u9636\u6bb5\uff0c\u4e0d\u540c\u7c7b\u578b\u7684 dp \u901a\u5e38\u90fd\u6709\u5e38\u89c1\u7684\u201d\u9636\u6bb5\u201c\u3002 \u6bd4\u5982\u7ebf\u6027 dp \u5c31\u662f\u8003\u8651\u524d \\(i\\) \uff0c\u6811\u578b dp \u5c31\u662f\u8003\u8651\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u3002 \u7136\u540e\u518d\u628a\u51b3\u7b56\u5bf9\u5e94\u7684\u4fe1\u606f\u6dfb\u52a0\u8fdb\u53bb\uff0c\u6bd4\u5982\u7b2c \\(i\\) \u4e2a\u4f4d\u7f6e\u662f\u9009\u8fd8\u662f\u4e0d\u9009\uff0c\u7b2c \\(i\\) \u4e2a\u4f4d\u7f6e\u9009\u4e86 \\(j\\) \u8fd9\u79cd\u4fe1\u606f\u3002 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \u4e00\u822c\u7528\u51b3\u7b56 + \u72b6\u6001\u5b9a\u4e49\u7684\u65b9\u6cd5\u63a8\u65b9\u7a0b\uff0c\u5c31\u662f\u8003\u8651\u8fd9\u4e00\u6b65\u51b3\u7b56\u5bf9 \\(dp\\) \u9020\u6210\u7684\u5f71\u54cd\uff0c\u5b83\u4e0a\u4e00\u6b65\u53ef\u4ee5\u4ece\u4ec0\u4e48\u5730\u65b9\u8f6c\u79fb\u8fc7\u6765\uff0c\u4e00\u822c\u662f\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\uff08 \\(i - 1\\) \u6216\u8005\u662f\u7528\u53d8\u91cf\u679a\u4e3e\uff09\uff0c\u7236\u4eb2\u8282\u70b9\uff08\u6811\u578b dp \u5e38\u89c1\uff09\uff0c \u6216\u8005\u76f4\u63a5\u7528\u96c6\u5408\u601d\u7ef4\u4e5f\u884c\uff08 \\(dp\\) \u6570\u7ec4\u8868\u793a\u53ef\u884c\u65b9\u6848\u96c6\u5408\uff0c\u5e76\u4e14\u5e26\u6709\u5c5e\u6027\uff0c\u5229\u7528\u51b3\u7b56\u548c\u4e0a\u4e00\u6b65\uff08\u6700\u540e\u4e00\u4e2a\u4e0d\u540c\u5143\u7d20\uff09\u5212\u5206\u96c6\u5408\uff09\uff0c\u53cd\u6b63\u600e\u4e48\u597d\u600e\u4e48\u6765\u3002 \u6b64\u65f6\u8981\u5148\u68c0\u67e5\u72b6\u6001\u4ee5\u53ca\u8f6c\u79fb\u65b9\u7a0b\u7684 \u5408\u6cd5\u6027 \uff0c\u4e5f\u5c31\u662f\u5229\u7528\u96c6\u5408\u601d\u7ef4\u786e\u5b9a\u662f\u5426\u8986\u76d6\u4e86\u6574\u4e2a\u72b6\u6001\u7a7a\u95f4\uff08 \u662f\u5426\u6f0f\u6389\u4e86\u72b6\u6001 \uff09\uff0c\u5e76\u68c0\u67e5\u540e\u6548\u6027\uff08 \u8f6c\u79fb\u662f\u5426\u6210\u73af \uff09\u3002 \u5982\u679c\u662f\u8ba1\u6570\u7c7b dp \u8fd8\u9700\u8981\u8003\u8651\u662f\u5426\u4f1a\u7b97\u91cd\uff08\u68c0\u67e5 \u662f\u5426\u4f1a\u628a\u67d0\u4e00\u4e2a\u72b6\u6001/\u51b3\u7b56\u8ba1\u7b97\u591a\u6b21 \uff09\u3002 \u5982\u679c\u5408\u6cd5\u6027\uff0c\u540e\u6548\u6027\uff0c\u4e0d\u91cd\u4e0d\u6f0f\u6027\u6ca1\u6709\u5f97\u5230\u4fdd\u8bc1\uff0c\u901a\u5e38\u7684\u89e3\u51b3\u65b9\u6848\u5c31\u662f\u8003\u8651\u5728 dp \u6570\u7ec4\u91cc\u6dfb\u52a0\u7ef4\u5ea6\u8bb0\u5f55\u989d\u5916\u7684\u4fe1\u606f\uff0c\u6216\u8005\u662f\u66f4\u6539\u72b6\u6001\u548c\u8f6c\u79fb\u65b9\u5f0f\uff0c\u751a\u81f3\u662f\u5229\u7528\u8f85\u52a9\u6570\u7ec4\u8bb0\u5f55\u4fe1\u606f\u3002 \u540e\u6548\u6027\u7684\u89e3\u51b3\u8fd8\u53ef\u4ee5\u8003\u8651\u9ad8\u65af\u6d88\u5143\u6216\u8005\u66f4\u6539\u679a\u4e3e\u987a\u5e8f\uff0c\u4e0d\u91cd\u590d\u6027\u7684\u4fdd\u8bc1\u53ef\u4ee5\u8003\u8651\u5bb9\u65a5\u539f\u7406\uff0c\u4e0d\u6f0f\u6027/\u5408\u6cd5\u6027\u53ef\u4ee5\u8003\u8651 Exchange Argument \u7b49\uff08\u6bd4\u5982 Code Festival 2017 \u7684 Zabuton\uff09\u3002 \u521d\u59cb\u5316 \u521d\u59cb\u5316\u6309\u7167\u5b9a\u4e49\u6765\u5373\u53ef\uff0c\u4e00\u822c\u7528 \\(+-\\infty\\) \u8868\u793a\u4e0d\u5408\u6cd5\uff0c\u65b9\u6848\u6570\u548c\u6982\u7387 DP \u4e00\u822c\u7528 \\(0\\) \uff0c\u76ee\u6807\u72b6\u6001\u4e5f\u662f\u6839\u636e\u5b9a\u4e49\u6765\u5c31\u884c\u4e86\u3002 \u4f18\u5316\u65b9\u7a0b\u548c\u72b6\u6001 \u4e00\u5b9a\u8981\u5148\u63a8\u51fa\u6700\u66b4\u529b\u7684\u65b9\u7a0b\u7136\u540e\u518d\u8003\u8651\u4f18\u5316\uff0c\u4e0d\u7136\u5bb9\u6613\u601d\u7ef4\u56fa\u5316\u60f3\u4e0d\u5230\u4f18\u5316\u8fc7\u7684\u601d\u8def\uff0c\u5f53\u7136\u5982\u679c\u6709\u5de7\u5999\u7684\u8f6c\u5316\u80fd\u76f4\u63a5\u60f3\u5230\u4f18\u79c0\u7684\u72b6\u6001\u4e5f\u884c\u3002 \u5e38\u89c1\u7684\u4f18\u5316\u7a7a\u95f4\u7684\u65b9\u5f0f\u5c31\u662f\u6eda\u52a8\u6570\u7ec4\uff0c\u8fd8\u6709\u5bf9\u72b6\u6001\u672c\u8eab\u8fdb\u884c\u4f18\u5316\uff08\u6bd4\u5982\u5982\u679c\u53ef\u4ee5\u7528\u9636\u6bb5+\u4e00\u4e2a\u51b3\u7b56\u63a8\u51fa\u53e6\u5916\u4e00\u4e2a\u51b3\u7b56\uff0c\u53e6\u5916\u4e00\u4e2a\u51b3\u7b56\u5c31\u4e0d\u7528\u8bb0\u5f55\u4e86\uff0c\u6bd4\u5982 Mobile Service\uff09\u3002 \u5e38\u89c1\u7684\u4f18\u5316\u65f6\u95f4\u7684\u65b9\u5f0f\u5c31\u662f\u524d\u7f00\u548c\u4f18\u5316\uff0c\u5355\u8c03\u961f\u5217\uff0c\u6570\u636e\u7ed3\u6784\uff0c\u659c\u7387\u4f18\u5316\u8fd9\u4e9b\u5bf9\u4e8e\u7279\u6b8a\u7684\u8f6c\u79fb\u65b9\u7a0b\u4e2d\u7684\u51b3\u7b56\u96c6\u5408\u9009\u53d6\u7684\u4f18\u5316\uff08\u6bd4\u5982\u591a\u91cd\u80cc\u5305\uff0cOptimal Partition \u8fd9\u79cd\uff09\uff0c\u6709\u7684\u65f6\u5019\u8fd8\u6709\u5229\u7528\u53ef\u884c\u6027\u7684\u7ea6\u675f\u6765\u4f18\u5316\u7684\uff08\u6bd4\u5982\u90a3\u4e2a\u72b6\u6001\u53ea\u4f1a\u5728\u957f\u5ea6\u4e3a \\(256\\) \u7684\u533a\u95f4\u5185\u8f6c\u79fb\u7684 CF \u9898 Xor-Subsequence\uff09\u3002","title":"\u5173\u4e8e dp \u7684\u4e00\u4e9b\u6ce8\u610f\u4e8b\u9879"},{"location":"rec/dp-edu/#_1","text":"\u9898\u9762","title":"\u9898\u76ee"},{"location":"rec/dp-edu/#a-frog1","text":"\u7b80\u5355\u9898\uff0c\u7565\u3002","title":"A - Frog1"},{"location":"rec/dp-edu/#b-frog2","text":"\u7b80\u5355\u9898\uff0c\u7565\u3002","title":"B - Frog2"},{"location":"rec/dp-edu/#c-vacation","text":"\u8bbe \\(dp(i, 0/1/2)\\) \u8868\u793a\u8fd9\u4e2a\u4eba\u7b2c \\(i\\) \u5929\u9009\u62e9\u4e86 \\(0/1/2\\) \u6d3b\u52a8\uff0c\u83b7\u5f97\u7684\u6700\u5927\u503c\u3002 \u7136\u540e\u9650\u5236\u6761\u4ef6\u662f\u76f8\u90bb\u7684\u4e0d\u80fd\u9009\u4e00\u6837\u7684\u6d3b\u52a8\u3002 \u6240\u4ee5\u5c31\u662f\u4e2a\u72b6\u6001\u673a DP\u3002 \\(dp(i, 0) = \\max\\{dp(i-1,1) + w0_i, dp(i - 1,2) + w0_i\\}\\) \u3002 \u7136\u540e\u53e6\u5916\u4e24\u79cd\u5b8c\u5168\u4e00\u6837\u3002 \u601d\u8003\u4e00\u4e0b\u53d1\u73b0\uff0c\u5982\u679c\u8fd9\u4e00\u5929\u9009\u4e86 \\(0\\) \uff0c\u53ea\u9700\u8981\u5173\u5fc3 \\(i - 1\\) \u8fd9\u4e00\u5929\u7684\uff0c\u4e00\u5171\u4e5f\u53ea\u6709\u9009 \\(1/2\\) \u7684\u53ef\u80fd\uff0c\u6240\u4ee5\u72b6\u6001\u7a7a\u95f4\u80af\u5b9a\u8986\u76d6\u6ee1\u4e86\uff0c\u5408\u7406\u3002","title":"C - Vacation"},{"location":"rec/dp-edu/#d-knapsack1","text":"\u677f\u5b50\u9898\uff0c\u7565\u3002","title":"D - Knapsack1"},{"location":"rec/dp-edu/#e-knapsack2","text":"\\(m \\le 10^9\\) \u7684 01 \u80cc\u5305\u95ee\u9898\uff0c\u4f53\u79ef\u90fd\u53d8\u6210 \\(10^9\\) \uff0c\u4f46\u662f\u4ef7\u503c\u53d8\u6210 \\(10^3\\) \u4e86\u3002 \u53ef\u4ee5\u8003\u8651\u79bb\u6563\u5316\uff0c\u4f46\u662f\u8fd9\u662f\u8d1f\u4f5c\u7528\uff0c\u56e0\u4e3a\u5b9e\u9645\u4f1a\u6709 \\(2^n\\) \u7ea7\u522b\u7684\u6570\u9700\u8981\u79bb\u6563\u5316\u3002 \u6ce8\u610f\u5230 \\(n\\) \u53ea\u6709 \\(100\\) \uff0c\u6240\u4ee5\u80fd\u53d6\u5f97\u7684\u603b\u4ef7\u503c\u4e00\u5b9a\u4e0d\u8d85\u8fc7 \\(10^5\\) \u3002 \u90a3\u4e48\u53ef\u4ee5\u8003\u8651\u4ea4\u6362\u4e00\u4e0b\u7ef4\u5ea6\uff0c\u8bbe \\(dp(i)\\) \u8868\u793a\u53d6\u5230 \\(i\\) \u7684\u4ef7\u503c\u6700\u5c11\u8981\u591a\u5c11\u7a7a\u95f4\u3002 \u7136\u540e\u7c7b\u4f3c\u80cc\u5305\u66f4\u65b0\uff0c\u6700\u540e\u5728\u53ef\u884c\u72b6\u6001\u91cc\u9762\u627e\u6700\u5927\u7684 \\(i\\) \u5373\u53ef\u3002 \u5f88 Educational \u7684\u4e00\u4e2a\u9898\u3002","title":"E - Knapsack2"},{"location":"rec/dp-edu/#f-lcs","text":"\u677f\u5b50\u9898\uff0c\u4e0d\u8ba8\u8bba\u3002","title":"F - LCS"},{"location":"rec/dp-edu/#g-longest-path","text":"\u677f\u5b50\u9898\uff0c\u4e0d\u8ba8\u8bba\u3002","title":"G - Longest Path"},{"location":"rec/dp-edu/#h-grid1","text":"\u677f\u5b50\u9898\uff0c\u4e0d\u8ba8\u8bba\u3002","title":"H - Grid1"},{"location":"rec/dp-edu/#i-coins","text":"\u8bbe \\(dp(i, j)\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \uff0c\u6709 \\(j\\) \u4e2a\u6b63\uff08\u5176\u4ed6 \\(i - j\\) \u4e2a\u5c31\u662f\u53cd\uff09\u7684\u6982\u7387\u3002 \u8003\u8651\u8f6c\u79fb\uff0c\u663e\u7136\u51b3\u7b56\u662f\u5bf9\u4e8e \\(i\\) \u8003\u8651\u6b63\u53cd\uff0c\u6bcf\u6b21 \\(j\\) \u7684\u53d8\u5316\u6700\u591a \\(1\\) \uff0c\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u4ece\u4e0a\u4e00\u4e2a\u8f6c\u79fb\u8fc7\u6765\u5373\u53ef\u3002 \u7531\u4e58\u6cd5\u539f\u7406\u548c\u52a0\u6cd5\u539f\u7406\uff0c\u663e\u7136\u6709\uff1a \\(dp(i,j) = dp(i-1,j) \\times(1-p_i) + dp(i -1,j - 1)\\times p_i\\) \u3002 \uff08\u4e0d\u7ba1\u524d\u9762\u7684\u65b9\u6848\u662f\u7531\u591a\u5c11\u79cd\u65b9\u6848\u51d1\u7684\uff0c\u56e0\u4e3a\u5728\u8fd9\u4e00\u6b65\u90fd\u76f4\u63a5\u4e58\u4e86\u540c\u4e00\u4e2a\u6570\u6240\u4ee5\u53ef\u4ee5\u7ed3\u5408\u5f8b\uff0c\u90a3\u4e48\u8fd9\u4e2a\u72b6\u6001\u8868\u793a\u5c31\u663e\u7136\u662f\u5bf9\u7684\uff0c\u4e5f\u53ef\u5229\u7528\u96c6\u5408\u601d\u60f3\u8003\u8651\uff09 \u7136\u540e\u505a\u5b8c\u4e86\u3002","title":"I - Coins"},{"location":"rec/dp-edu/#j-sushi","text":"\u4e0d\u4f1a\u3002","title":"J - Sushi"},{"location":"rec/dp-edu/#k-stones","text":"\u4e0d\u4f1a\u3002","title":"K - Stones"},{"location":"rec/dp-edu/#l-deque","text":"\u4e0d\u4f1a\u3002","title":"L - Deque"},{"location":"rec/dp-edu/#m-candies","text":"\u8003\u8651\u8bbe \\(dp(i, j)\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\u4eba\uff0c\u7b2c \\(i\\) \u4e2a\u4eba\u62ff\u4e86 \\(j\\) \u4e2a\u7684\u65b9\u6848\u6570\uff0c\u663e\u7136\u65e0\u6cd5\u5f97\u77e5\u4e4b\u524d\u7528\u8fc7\u591a\u5c11\u4e2a\uff0c\u9898\u76ee\u8981\u6c42\u6709\u6070\u597d\u7528\u5b8c\uff0c\u6240\u4ee5\u5bc4\u6389\u4e86\u3002 \u4ee5\u6b64\u4e3a\u51fa\u53d1\u70b9\uff0c\u6539\u8fdb\u72b6\u6001\uff0c\u8bbe \\(dp(i,j)\\) \u4e3a\u7b2c \\(i\\) \u4e2a\u4eba\uff0c\u5f53\u524d\u4e00\u5171\u4f7f\u7528\u4e86 \\(j\\in[0,K]\\) \u4e2a\u7684\u65b9\u6848\u6570\u3002 \u7136\u540e\u6bcf\u4e2a\u4eba\u62ff\u7684\u4e2a\u6570\u9650\u5236\u662f \\([0,a_i]\\) \uff0c\u6240\u4ee5\u8003\u8651 \\(O(nK^2)\\) \u679a\u4e3e\uff0c\u8f6c\u79fb\u662f\uff1a $$ dp(i,j) = \\sum\\limits_{k = 0}^{\\min(a_i, j)} dp(i - 1, j - k) $$ \u601d\u8003\u4e00\u4e0b\u5408\u6cd5\u6027\u548c\u4e0d\u91cd\u590d\u6027\uff0c\u611f\u89c9\u663e\u7136\u4e0d\u4f1a\u6709\u91cd\u590d\uff01 \u4f46\u662f\u53d1\u73b0\u8fd9\u4e2a\u8f6c\u79fb\u6709\u70b9\u94f8\u5e01\uff0c \\(K\\) \u662f \\(10^5\\) \u7684\uff0c\u6ca1\u6cd5\u505a\uff0c\u4f46\u662f\u7c7b\u4f3c Problem T\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e0a\u4e00\u9636\u6bb5\u524d\u7f00\u548c\u7684\u5f62\u5f0f\uff0c\u53ef\u4ee5\u8003\u8651\u524d\u7f00\u548c\u4f18\u5316\uff0c\u590d\u6742\u5ea6 \\(O(nK)\\) \u5e94\u8be5\u53ef\u4ee5\u8fc7\u4e86\u3002 \u7b54\u6848\u662f\u76f4\u63a5\u9009 \\(dp(n, K)\\) \uff0c\u521d\u59cb\u5316 \\(dp(i,0) = 1, i \\in[0, n]\\) \uff0c\u5176\u4f59\u4e3a \\(0\\) \u3002","title":"M - Candies"},{"location":"rec/dp-edu/#o-matching","text":"\u4e8c\u5206\u56fe\u5b8c\u7f8e\u5339\u914d\u8ba1\u6570\uff0c \\(n \\le 21\\) \u3002 \u660e\u663e\u53ef\u4ee5\u72b6\u538b dp\uff0c\u8bbe \\(dp(msk)\\) \u8868\u793a\u5de6\u90e8\u70b9\u7684\u5339\u914d\u72b6\u6001\u4e3a \\(msk\\) \u7684\u65b9\u6848\u6570\uff0c\u53d1\u73b0\u6ca1\u6cd5\u8bb0\u5f55\u53f3\u90e8\u70b9\u7684\u72b6\u6001\uff0c\u65e0\u6cd5\u5f97\u77e5\u5f53\u524d\u7b97\u7684\u8fd9\u4e00\u4e2a\u4e4b\u524d\u662f\u4e0d\u662f\u5df2\u7ecf\u88ab\u7528\u6389\u4e86\u3002 \u7136\u540e\u5982\u679c\u4e24\u8fb9\u90fd\u7528 \\(msk\\) \u72b6\u538b\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 \\(O(2^{42})\\) \uff0c\u5bc4\u6389\u4e86\uff0c\u6240\u4ee5\u8003\u8651\u628a\u5de6\u90e8\u70b9\u4f5c\u4e3a\u9636\u6bb5\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5de6\u90e8\u70b9\u8003\u8651\u8ba1\u6570\u3002 \u90a3\u4e48\u72b6\u6001\u5c31\u662f \\(dp(i, msk)\\) \u8868\u793a\u5de6\u90e8\u70b9\u5339\u914d\u4e86\u524d \\(i\\) \uff0c\u53f3\u90e8\u70b9\u5339\u914d\u72b6\u6001\u4e3a \\(msk\\) \u7684\u65b9\u6848\uff0c\u6700\u7ec8\u7b54\u6848\u4e3a \\(dp(n, 2^{msk} - 1)\\) \u3002 \u72b6\u6001\u8f6c\u79fb\u53ef\u4ee5\u8bbe\u8ba1\u4e3a \\(dp(i - 1, msk^\\prime) \\to dp(i, msk)\\) \uff0c\u5176\u4e2d \\(msk^\\prime\\) \u662f\u6263\u6389\u4e00\u4e2a \\(msk\\) \u4e2d\u80fd\u591f\u548c \\(i\\) \u5339\u914d\u7684\u8282\u70b9\u5f62\u6210\u7684\u539f\u59cb\u72b6\u6001\uff08\u6240\u4ee5\u8fd9\u91cc\u662f\u53ef\u4ee5\u9884\u5904\u7406\u4f18\u5316\u7684\uff09\u3002 \u8fd9\u91cc\u72b6\u6001\u90fd\u4f1a\u4ece\u4e0a\u4e00\u5c42\u8f6c\u79fb\u8fc7\u6765\uff0c\u7136\u540e\u51b3\u7b56\u4e5f\u6ca1\u6709\u6f0f\u6389\u4ec0\u4e48\u6216\u8005\u591a\u6b21\u51b3\u7b56\u4e00\u4e2a\uff0c\u6240\u4ee5\u72b6\u6001\u662f\u53ef\u884c\u7684\u3002 \u7136\u540e\u53d1\u73b0 \\(\\text{popcnt}(msk) \\not= i\\) \u7684\u72b6\u6001\u80af\u5b9a\u4e0d\u5408\u6cd5\uff0c\u6240\u4ee5\u8fd8\u53ef\u4ee5\u76f4\u63a5 continue \u6216\u8005\u9884\u5904\u7406\u641e\u6389\u3002 \u590d\u6742\u5ea6 \\(O(n^22^n)\\) \u3002 \u7136\u540e\u8fd9\u7834\u73a9\u610f\u513f\u5b9e\u9645\u4e0a\u53ef\u4ee5\u76f4\u63a5\u4f18\u5316\u6389\uff0c\u4f46\u662f\u6211\u61d2\uff0c\u6240\u4ee5\u4e0d\u3002","title":"O - Matching"},{"location":"rec/dp-edu/#p-independent-set","text":"\u8003\u8651\u8bbe \\(dp(u, 0/1)\\) \u8868\u793a\u8003\u8651 \\(u\\) \u8fd9\u4e2a\u8282\u70b9\uff0c\u6d82\u6210\u9ed1\u8272/\u767d\u8272\u7684\u65b9\u6848\u6570\u3002 \u7136\u540e\u9898\u76ee\u8981\u6c42\u4e0d\u80fd\u591f\u6709\u4e24\u4e2a\u76f8\u90bb\u7684\u9ed1\u8272\uff0c\u6240\u4ee5\u5206\u7c7b\u8ba8\u8bba\u5199\u51fa\u8f6c\u79fb\uff1a \\[ \\begin{cases} dp(u,0) =\\prod\\limits_{v \\in \\text{son}(u)} dp(v,1) \\\\ dp(v, 1) = \\prod\\limits_{v\\in \\text{son(u)}} [dp(v,0) + dp(v,1)] \\end{cases} \\] \u6ce8\u610f\u5230 \\(dp(v,1)\\) \u7684\u90a3\u4e2a\u67ff\u5b50\u4e0d\u80fd\u662f\u76f4\u63a5 \\(dp(v,0) \\times dp(v,1)\\) \uff0c\u663e\u7136\u65b9\u6848\u6570\u4e0d\u5bf9\uff0c\u7a0d\u5fae\u7528\u4e00\u4e0b\u52a0\u6cd5\u539f\u7406\u6216\u8005\u753b\u51fa\u6765\u5408\u5e76\u4e00\u4e0b\u5c31\u80fd\u63a8\u51fa\u8fd9\u4e2a\u67ff\u5b50\u3002 \u7136\u540e\u6709\u4e00\u4e2a\u6ce8\u610f\u7684\u70b9\u5c31\u662f\u4e58\u6cd5\u53ef\u80fd\u5728\u8fc7\u7a0b\u4e2d\u5c31\u7206\u6389\u4e86\uff0c\u4e0d\u7136\u76f4\u63a5 i64 \u5b9a\u4e49 dp\uff0c\u4e0d\u7136\u5c31\u591a\u53d6\u6a21\uff0c\u8bb0\u5f97\u521d\u59cb\u5316\u4e3a \\(1\\) \u3002","title":"P - Independent Set"},{"location":"rec/dp-edu/#q-flowers","text":"\u8003\u8651\u8bbe \\(dp(i)\\) \u8868\u793a\u4ee5 \\(i\\) \u7ed3\u5c3e\u7684\u5b50\u5e8f\u5217\u4e2d\uff0c \\(a_i\\) \u4e0a\u5347\uff0c \\(\\sum b_i\\) \u7684\u6700\u5927\u503c\u3002 \u7136\u540e\u8003\u8651\u8f6c\u79fb\uff0c\u679a\u4e3e\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u5373\u53ef\uff1a \\[ dp(i) = \\max\\limits_{j = 1}^{i - 1} \\{dp(j) + b_i (\\text{if}\\ a_i > a_j).\\} \\] \u4f46\u662f\u8fd9\u4e2a\u65b9\u7a0b\u6709\u6ca1\u6709\u95ee\u9898\uff1f\u5148\u8003\u8651\u4e00\u4e0b\u5408\u6cd5\u6027\u3002 \u6709\u6ca1\u6709\u4e00\u79cd\u53ef\u80fd\u5c31\u662f\uff0c\u6211\u524d\u9762\u9009\u4e86\u4e00\u5806\uff0c\u7136\u540e\u9009\u4e86 \\(i\\) \uff0c\u4f46\u662f\u9009\u4e86 \\(i\\) \u4e4b\u540e\u540e\u9762\u4e00\u4e2a\u66f4\u5927\u7684 \\(j\\) \u6ca1\u6cd5\u9009\u4e86\uff1f \u663e\u7136\u4e0d\u53ef\u80fd\u5427\uff01\u8fd9\u5c31\u662f\u5728\u7528\u8d2a\u5fc3\u7684\u601d\u60f3\u601d\u8003 dp\u4e86\uff0c\u663e\u7136\u4e0d\u5bf9\uff01 \\(j\\) \u8fd9\u4e2a\u4f4d\u7f6e\u7684 \\(dp(j)\\) \u80af\u5b9a\u4f1a\u679a\u4e3e\u524d\u9762\u7684\u6240\u6709\u53ef\u884c\u72b6\u6001\u6765\u66f4\u65b0\u7684\u3002 \u56e0\u4e3a\u72b6\u6001\u5f3a\u5236\u9009 \\(i\\) \uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651 \\(a_i\\) \u548c \\(a_j\\) \u7684\u5927\u5c0f\u5173\u7cfb\u5c31\u884c\u4e86\uff0c\u4e0d\u9700\u8981\u518d\u8003\u8651 \\(dp(i)\\) \u72b6\u6001\u4e2d \\(i\\) \u524d\u9762\u7684\u51b3\u7b56\uff01 \u6240\u4ee5\u5408\u6cd5\u6027\u80af\u5b9a\u6709\u4fdd\u8bc1\uff0c\u72b6\u6001\u7a7a\u95f4\u4e5f\u8986\u76d6\u6ee1\u4e86\u3002 \u4f46\u662f\u73b0\u5728\u8fd9\u4e2a\u65b9\u7a0b\u662f \\(O(n^2)\\) \u7684\uff0c \\(2e5\\) \u8fc7\u4e0d\u4e86\uff0c\u4f46\u662f\u770b\u5230\u8fd9\u4e2a\u65b9\u7a0b\u662f\u5728 \\(dp\\) \u7684\u67d0\u4e00\u4e2a\u524d\u7f00\u5f53\u4e2d\u53d6 \\(\\max\\) \uff0c\u8981\u6c42\u590d\u6742\u5ea6 \\(\\log\\) \u7ea7\u522b\u3002 \u800c\u4e14\u8f6c\u79fb\u6709\u5173\u952e\u7801 \\(a_i\\) \u7684\u5927\u5c0f\u8981\u6c42\uff08\u5173\u952e\u7801\u8fd8\u4e92\u4e0d\u76f8\u540c\uff09\uff0c\u51b3\u7b56\u7684\u6536\u83b7 \\(b_i\\) \u8fd8\u662f\u53ef\u4ee5\u4ece \\(\\max\\) \u91cc\u9762\u62c6\u51fa\u6765\u7684\u3002 \u6240\u4ee5\u7c7b\u4f3c Optimal Partition \u90a3\u9898\uff0c\u6211\u4eec\u8003\u8651\u503c\u57df\u6811\u72b6\u6570\u7ec4\u4f18\u5316 dp\uff0c\u5148\u5bf9 \\(a_i\\) \u79bb\u6563\u5316\uff0c\u7136\u540e\u6309\u7167\u987a\u5e8f \u4e00\u4e2a\u4e00\u4e2a\u63d2\u5165 \u66f4\u65b0\u5b8c\u4e86\u7684 \\(dp(i)\\) \uff0c\u6bcf\u6b21\u8f6c\u79fb\u76f4\u63a5\u5728\u6811\u72b6\u6570\u7ec4\u4e0a\u8be2\u95ee\u524d\u7f00 \\(\\max\\) \u5373\u53ef\uff08\u672c\u9898 \\(a_i\\) \u5df2\u7ecf\u81ea\u52a8\u79bb\u6563\u5316\u8fc7\u4e86\uff0c\u4e0d\u9700\u8981\u989d\u5916\u79bb\u6563\u5316\uff09\u3002 \uff08\u5b9e\u9645\u4e0a\u5c31\u662f\u5728\u8be2\u95ee\uff0c\u6ee1\u8db3 \\(j < i, a_j < a_i\\) \u7684\u6700\u5927\u7684 \\(dp(j)\\) \u662f\u591a\u5c11\uff0c\u7528\u5b83\u8f6c\u79fb\u8fc7\u6765\u5373\u53ef\uff09 \u6700\u540e\u7ed9\u6240\u6709 \\(dp\\) \u53d6\u4e00\u4e2a max \u5373\u53ef\uff0c\u5176\u5b9e \\(dp\\) \u6570\u7ec4\u90fd\u53ef\u4ee5\u4e0d\u8981\u4e86\uff0c\u76f4\u63a5\u5728\u6811\u72b6\u6570\u7ec4\u4e0a\u4fee\u6539\u8f6c\u79fb\u5c31\u884c\u3002","title":"Q - Flowers"},{"location":"rec/dp-edu/#r-walk","text":"\u6c42\u6070\u597d \\(K\\) \u6761\u8fb9\u7684\u8def\u5f84\u6570\u91cf\uff0c\u8003\u8651\u7c7b\u4f3c\u6070\u597d \\(K\\) \u6761\u8fb9\u6700\u77ed\u8def\uff0c\u5229\u7528\u90bb\u63a5\u77e9\u9635\u7684\u53e6\u5916\u4e00\u79cd\u5b9a\u4e49 + \u8ba1\u6570\u65f6\u8fd0\u7b97\u5b58\u5728\u7684\u7ed3\u5408\u5f8b\u8f6c\u5316\u6210\u77e9\u9635\u5feb\u901f\u5e42\u3002 \u5982\u679c \\(A_r\\) \u8868\u793a\u6070\u597d \\(r\\) \u6761\u8fb9\u7684\u8def\u5f84\u6570\u91cf\u77e9\u9635\uff0c\u90a3\u4e48 \\(A_r[i,j] = \\sum\\limits_{k = 1}^n (A_{r - 1}[i, k] \\times A_1[k,j])\\) \u3002 \u6ce8\u610f\u53d6\u6a21\uff0c\u7136\u540e\u77e9\u9635\u5feb\u901f\u5e42\u5373\u53ef \\(O(n^3\\log K)\\) \u6c42\u51fa\u7b54\u6848\u3002","title":"R - Walk"},{"location":"rec/dp-edu/#s-dight-sum","text":"\u7b80\u5355\u7684\u6570\u4f4d DP\uff0c\u6211\u4eec\u8003\u8651\u62bd\u8c61\u51fa\u6240\u6709\u8981\u6c42\u76f4\u63a5\u4e0a\u8bb0\u5fc6\u5316\u641c\u7d22\u7684\u677f\u5b50\u3002 \u7136\u540e\u53d1\u73b0\u4e5f\u6ca1\u5565\u53ef\u4ee5\u62bd\u8c61\u7684\uff0c\u5c31\u53ea\u6709\u6570\u5b57\u5341\u8fdb\u5236\u4e0b\u7684\u6570\u4f4d\u548c\u662f \\(D\\) \u7684\u500d\u6570\u7684\u8fd9\u4e00\u4e2a\u8981\u6c42\u3002 \u4f46\u662f\u6ce8\u610f\u5230\u8fd9\u91cc\u4e0d\u4f1a\u5728\u586b\u6570\u7684\u65f6\u5019\u6392\u9664\u4efb\u4f55\u51b3\u7b56\uff0c\u56e0\u4e3a\u51b3\u7b56\u7684\u5408\u6cd5\u6027\u8981\u5230\u6700\u540e\u624d\u80fd\u5224\u5b9a\uff0c\u6240\u4ee5\u8bb0\u5f97\u628a\u8fb9\u754c\u7b54\u6848\u5206\u60c5\u51b5\u3002","title":"S - Dight Sum"},{"location":"rec/dp-edu/#t-permutation","text":"\u8bbe \\(dp(i,j)\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \uff0c\u7b2c \\(i\\) \u4e2a\u9009\u4e86 \\(j\\) \u7684\u65b9\u6848\u6570\u3002 \u7136\u540e\u53d1\u73b0\u5f88\u70e6\u554a\uff01\u6ca1\u6cd5\u77e5\u9053\u524d\u9762\u662f\u5426\u9009\u8fc7 \\(j\\) \uff0c\u663e\u7136\u72b6\u6001\u672c\u8eab\u5408\u6cd5\u6027\u5f97\u4e0d\u5230\u4fdd\u8bc1\uff01 \u7136\u540e\u6709\u4e00\u4e2a\u601d\u8def\u5c31\u662f\u6211\u7ed9 \\(dp\\) \u9644\u52a0\u4e00\u4e9b\u4fe1\u606f\uff0c\u6bd4\u5982\u8bbe \\(dp(i,j)\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\u4f4d\u7f6e\u9009 \\(1\\sim i\\) \u7684\u6392\u5217\uff0c\u7b2c \\(i\\) \u4e2a\u9009\u4e86 \\(j\\) \u7684\u65b9\u6848\u6570\u3002 \u53d1\u73b0\u8fd8\u662f\u6ca1\u6cd5\u8986\u76d6\u5b8c\u95ee\u9898\u7684\u72b6\u6001\u7a7a\u95f4\uff0c\u6bd4\u5982 \\(1,3,5,2\\ |\\ 4\\) \u8fd9\u79cd\u60c5\u51b5\uff08 \\(4\\) \u662f\u5f53\u524d\u7684\u51b3\u7b56\uff09\uff0c\u5f88\u663e\u7136\u627e\u4e0d\u5230\u4efb\u4f55\u4e00\u4e2a\u72b6\u6001\u53bb\u8868\u793a\u524d\u9762\u7684 \\(1,3,5,2\\) \u554a\u3002 \u4e8e\u662f\u6211\u4eec\u8003\u8651\u66f4\u6539\u4e00\u4e0b\u72b6\u6001\u672c\u8eab\uff0c\u6211\u4eec\u8bbe \\(dp(i,j)\\) \u8868\u793a\u524d \\(i\\) \u4e2a\u6570\uff0c\u7b2c \\(i\\) \u4e2a\u6570\u7684\u6392\u540d\u5728\u5df2\u7ecf\u9009\u62e9\u7684\u524d \\(i\\) \u4e2a\u6570\u5f53\u4e2d\u4e3a \\(j\\) \u7684\u65b9\u6848\u6570\uff0c\u8fd9\u6837\u5c31\u80fd\u8868\u793a\u524d\u9762\u7684\u72b6\u6001\u4e86\u3002 \u5206\u60c5\u51b5\u8ba8\u8bba\u53ef\u4ee5\u5f97\u5230\uff1a \u5982\u679c \\(s_i = \\texttt{<}\\) \uff0c\u90a3\u4e48 \\(i - 1\\) \u7684 rank \u80af\u5b9a\u5c0f\u4e8e \\(i\\) \u7684 rank\uff0c\u53ef\u4ee5\u5f97\u5230\u8f6c\u79fb\u4e3a \\(dp(i,j) = \\sum\\limits_{k = 1}^{j-1} dp(i - 1, k)\\) \u3002 \u53cd\u4e4b\uff0c \\(dp(i,j) = \\sum\\limits_{k = j}^i dp(i - 1, k)\\) \uff0c\u6ce8\u610f\u6b64\u65f6\u52a0\u5165 \\(i\\) \u4e4b\u540e \\(i - 1\\) \u7684 rank \u4f1a\u4e0a\u5347 \uff0c\u6240\u4ee5 \\(k\\) \u8981\u4ece \\(j\\) \u5f00\u59cb\u679a\u4e3e\u3002 \u53d1\u73b0\u8981\u679a\u4e3e \\(i,j,k\\) \uff0c\u590d\u6742\u5ea6 \\(O(n^3)\\) \uff0c\u8fc7\u4e0d\u4e86\uff0c\u4f46\u662f\u8fd9\u4e2a \\(\\sum\\) \u662f\u4e0a\u4e00\u5c42\u72b6\u6001\u7684\u8fde\u7eed\u7684\u4e00\u6bb5\uff0c\u53ef\u4ee5\u76f4\u63a5\u524d\u7f00\u548c\u4f18\u5316\u51b3\u7b56\u4ee5\u53ca\u8f6c\u79fb\u3002 \u7136\u540e\u590d\u6742\u5ea6\u5c31\u662f \\(O(n^2)\\) \u4e86\uff0c\u4e5f\u5f88 Educational\u3002","title":"T - Permutation"},{"location":"rec/dp-edu/#u-grouping","text":"\u4e0d\u4f1a\u3002","title":"U - Grouping"},{"location":"rec/dp-edu/#v-subtree","text":"\u7edd\u5bf9\u5f88 Educational \u7684\u6362\u6839 dp\uff0c\u7c7b\u4f3c P \u9898\uff0c\u6211\u4eec\u8bbe \\(dp(u, 0/1)\\) \u8868\u793a\uff0c\u5728\u4ee5 \\(1\\) \u4e3a\u6839\u7684\u524d\u63d0\u4e0b\uff0c \\(u\\) \u53d6\u9ed1/\u767d\uff0c\u5728\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u7684\u65b9\u6848\u6570\u3002 \u53d1\u73b0\u672c\u9898\u8981\u6c42\u6240\u6709\u9ed1\u70b9\u5fc5\u987b\u5904\u4e8e\u540c\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u6240\u4ee5 \\(dp(u, 1)\\) \u5b9e\u9645\u4e0a\u5168\u90e8\u90fd\u662f \\(1\\) \u3002 \u90a3\u4e48\u53ef\u4ee5\u5199\u51fa\u8f6c\u79fb\u65b9\u7a0b\uff1a \\[ dp(u) = \\prod\\limits_{v \\in \\text{son}(u)} (dp(v) + 1) \\] \u8fd9\u662f\u4ee5 \\(1\\) \u4e3a\u6839\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u8bbe \\(ndp(u)\\) \u8868\u793a\u6574\u68f5\u6811\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u65f6\u5019\u7684\u603b\u65b9\u6848\u6570\u3002 \u8003\u8651\u6362\u6839\uff0c\u53d1\u73b0\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9 \\(v\\) \uff0c\u5982\u679c\u5b83\u7684\u7236\u4eb2\u8282\u70b9\uff08\u4ee5 \\(1\\) \u4e3a\u6839\u65f6\uff09\u662f \\(u\\) \uff0c\u90a3\u4e48\u4ee5 \\(v\\) \u4e3a\u6574\u68f5\u6811\u7684\u6811\u6839\u7684\u65f6\u5019\uff0c\u7b54\u6848\u5e94\u5f53\u4ece \\(u\\) \u548c \\(\\text{son} (v)\\) \u4e2d\u8f6c\u79fb\u8fc7\u6765\u3002 \u56e0\u4e3a \\(ndp(u)\\) \u7528\u5230\u4e86 \\(dp(v)\\) \u6765\u8f6c\u79fb\uff08\u5b9e\u9645\u4e0a\u662f \\(dp(u)\\) \u7528\u4e86 \\(dp(v)\\) \u7136\u540e \\(ndp(u)\\) \u7528\u4e86 \\(dp(u)\\) \uff09\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u628a \\(dp(v)\\) \u7684\u8d21\u732e\u4ece \\(ndp(u)\\) \u5f53\u4e2d\u6263\u6389\uff0c\u8f6c\u79fb\u65b9\u7a0b\u662f\uff1a \\[ ndp(v) =dp(v) \\times (\\dfrac{ndp(u)}{dp(v) + 1} + 1) \\] \u4f46\u662f\u53d1\u73b0\u672c\u9898\u53d6\u6a21\u5e76\u4e0d\u662f\u8d28\u6570\uff0c\u4e0d\u4e00\u5b9a\u5b58\u5728\u9006\u5143\uff0c\u4e5f\u5c31\u662f\u4e0d\u80fd\u76f4\u63a5\u5728\u8f6c\u79fb\u7684\u65f6\u5019\u4e58\u4e0a \\(\\text{inv}(dp(v) + 1)\\) \u3002 \u6211\u4eec\u5c1d\u8bd5\u6539\u5199\u4e00\u4e0b\u8fd9\u4e2a\u5f0f\u5b50\uff1a \\[ \\begin{aligned} ndp(v) &= dp(v) + dp(v)\\times\\dfrac{ndp(u)}{dp(v) + 1}\\\\ ndp(v) &= dp(v) + ndp(u) \\times \\dfrac{dp(v)}{dp(v) + 1}\\\\ \\end{aligned} \\] \u53d1\u73b0\u8fd9\u4e2a\u4e58\u4e0a\u7684 \\(dp(v)\\) \u6709\u70b9\u70e6\uff08\u4f5c\u4e3a\u52a0\u6cd5\u9879\u5b58\u5728\uff0c\u5728\u4e00\u4e2a\u505a\u4e58\u6cd5\u7684\u5f0f\u5b50\u91cc\u4e0d\u597d\u76f4\u63a5\u62c6\u5f00\uff09\uff0c\u6211\u4eec\u62ff\u6389\u5b83\uff0c\u4e5f\u5c31\u662f\u4ee4 \\(nndp(v) \\times dp(v)= ndp(v)\\) \u3002 \u7136\u540e\u6211\u4eec\u8003\u8651\u8ba1\u7b97 \\(nndp(v)\\) \uff0c\u6700\u540e\u8ba1\u7b97\u7b54\u6848\u7684\u65f6\u5019\u4e58\u4e0a \\(dp(v)\\) \u5373\u53ef\u3002 \u5199\u51fa\u6765\uff1a \\[ \\begin{aligned} nndp(v) &= \\dfrac{ndp(u)}{dp(v) + 1} + 1\\\\ nndp(v) &= nndp(u) \\times \\dfrac{dp(u)}{dp(v) + 1} + 1\\\\ nndp(v) &= [nndp(u) \\times \\prod\\limits_{x \\in \\text{son}(u)\\land x \\not= v} (dp(x) + 1) ] + 1 \\end{aligned} \\] \u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5728\u8f6c\u79fb\u4e4b\u524d\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u4e0b\u5b83\u7684\u513f\u5b50\u8282\u70b9\u7684\u8d21\u732e\u7684\u524d\u540e\u7f00\u79ef\u5373\u53ef\uff0c\u4e3a\u4e86\u65b9\u4fbf\u5904\u7406\u4f7f\u7528 vector \u5b58\u8fb9\u3002","title":"V - Subtree"},{"location":"rec/dp-edu/#w-interval","text":"\u5148\u7ed9\u533a\u95f4\u6392\u4e2a\u5e8f\u3002 \u8bbe \\(dp(i\uff0c0/1)\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\uff0c\u7b2c \\(i\\) \u4e2a\u9009\u8fd8\u662f\u4e0d\u9009\u7684\u6700\u5927\u503c\u3002 \u5982\u679c\u9009\u5c31\u679a\u4e3e\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7136\u540e\u53d6 max\uff0c\u5982\u679c\u4e0d\u9009\u5c31\u5728\u524d\u9762\u6240\u6709\u72b6\u6001\u53d6 max\u3002 \\[ dp(i, 0) = \\max\\limits_{j = 1}^{i -1}\\{dp(j, 0), dp(j, 1)\\} \\] \\[ dp(i,1) = \\max\\limits_{j = 1}^{i-1}\\{dp(j, 0), dp(j,1)\\} + w_i \\] \u8003\u8651\u4e00\u4e0b\u662f\u5426\u8986\u76d6\u4e86\u5b8c\u6574\u7684\u72b6\u6001\u7a7a\u95f4\uff0c\u5408\u6cd5\u6027\u6709\u6ca1\u6709\u4fdd\u969c\u3002 \u6ce8\u610f\u5230\u533a\u95f4\u4e4b\u95f4\u6709\u5305\u542b\u548c\u8986\u76d6\u5173\u7cfb\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u88ab\u5f3a\u5236\u9009\u4e0a\u7684\u60c5\u51b5\uff0c\u770b\u770b\u8fd9\u4e2a\u72b6\u6001\u662f\u5426\u53ef\u4ee5\u5904\u7406\u3002 \u76f4\u63a5\u55ef\u770b\u6709\u70b9\u96be\u9876\uff0c\u89c2\u5bdf\u4e00\u4e0b\u9898\u76ee\u6837\u4f8b\uff1a 1 2 3 4 5 3 4 1 3 100 1 1 -10 2 2 -20 3 3 -30 \u5f88\u663e\u7136\u662f\u6709\u95ee\u9898\u7684\uff0c\u5c31\u4e0a\u9762\u8fd9\u4e2a\u6837\u4f8b\uff0c \\(dp(2/3/4,0)\\) \u7684\u8f6c\u79fb\u663e\u7136\u90fd\u4e0d\u5408\u6cd5\u4e86\u3002 \u6240\u4ee5\u73b0\u5728\u8981\u505a\u7684\u5c31\u662f\u5728\u8f6c\u79fb\u7684\u65f6\u5019\u4fdd\u8bc1\u8f6c\u79fb\u7684\u5408\u6cd5\u6027\u3002 \u663e\u7136\u9009\u533a\u95f4\u7684\u4f4d\u7f6e\u4f1a\u5f71\u54cd\u5230\u4e4b\u540e\u7684\u8f6c\u79fb\uff0c\u6211\u4eec\u8003\u8651\u8bb0\u5f55\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u72b6\u6001\u53d8\u4e3a \\(dp(i,j)\\) \u8868\u793a\u524d \\(i\\) \u4e2a\uff0c\u8003\u8651\u7b2c \\(i\\) \u4e2a\u533a\u95f4\u9009\u4e86 \\(j\\) \u8fd9\u4e2a\u4f4d\u7f6e\u7684\u6700\u5927\u503c\uff0c\u5982\u679c \\(j = 0\\) \u4ee3\u8868\u4e0d\u9009\u8fd9\u4e2a\u533a\u95f4\uff0c\u5176\u4ed6 \\(j\\not\\in [l_i,r_i]\\) \u7684\u72b6\u6001\u5168\u90e8\u7f6e\u4e3a \\(-\\infty\\) \u3002 \u7136\u540e\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5c31\u53d8\u6210\u8fd9\u6837\u4e86\uff1a \\[ \\begin{aligned} dp(i,0) &= \\max\\limits_{j = 1}^{i - 1}\\{dp(i, k)(\\text{if } k<l_i), dp(j, 0)\\}\\\\ dp(i,x) &= \\max\\limits_{j = 1}^{i - 1}\\{dp(j, k) + w_i, dp(j, 0) + w_i (\\text{if } x\\not\\in [l_j,r_j])\\} \\end{aligned} \\] \u8fd9\u4e2a\u6700\u591a\u4e5f\u5c31\u80fd\u4f18\u5316\u5230 \\(n^2\\log\\) \uff0c\u5bc4\u6389\u4e86\u3002 \u73b0\u5728\u8fd8\u4e0d\u4f1a\u3002","title":"W - Interval"},{"location":"rec/dp-edu/#x-towers","text":"\u9898\u89e3\u5495\u5495\u6389\u4e86\u3002","title":"X - Towers"},{"location":"rec/dp-edu/#y-grid2","text":"\u4e0d\u4f1a\u3002","title":"Y - Grid2"},{"location":"rec/dp-edu/#z-frog3","text":"\u4e0d\u4f1a\u3002","title":"Z - Frog3"},{"location":"rec/dp-practice/","text":"","title":"CWOI \u52a8\u6001\u89c4\u5212\u9009\u505a(23Apr)"},{"location":"rec/segtree-practice/","text":"Vjudge \u7ebf\u6bb5\u6811\u5c0f\u4e13\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 A - Circular RMQ \u03c8(\uff40\u2207\u00b4)\u03c8 \u5728\u73af\u4e0a\u505a\u533a\u95f4\u52a0\u533a\u95f4\u6700\u503c\u3002 \\(1\\le n \\le 10^6\\) \u3002 \u5c31\u62c6\u4e00\u4e0b\u5c31\u884c\u4e86\uff0c\u6ca1\u5565\u597d\u8bf4\u7684 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; const i64 inf = 0x3f3f3f3f3f3f3f3fll ; int n , m , a [ si ]; class SegTree { private : struct Node { int l , r ; i64 val , tag ; } t [ si << 2 ]; void pushup ( int p ) { t [ p ]. val = min ( t [ p << 1 ]. val , t [ p << 1 | 1 ]. val ); return ; } void pushdown ( int p ) { if ( ! t [ p ]. tag ) return ; t [ p << 1 ]. val += t [ p ]. tag , t [ p << 1 | 1 ]. val += t [ p ]. tag ; t [ p << 1 ]. tag += t [ p ]. tag , t [ p << 1 | 1 ]. tag += t [ p ]. tag ; t [ p ]. tag = 0 ; } public : void Build ( int p , int l , int r ) { t [ p ]. l = l , t [ p ]. r = r , t [ p ]. tag = 0 ; if ( l == r ) { t [ p ]. val = 1l l * a [ l ]; return ; } int mid = ( l + r ) >> 1 ; Build ( p << 1 , l , mid ), Build ( p << 1 | 1 , mid + 1 , r ), pushup ( p ); } void Inc ( int p , int l , int r , i64 v ) { int nl = t [ p ]. l , nr = t [ p ]. r ; if ( l <= nl && nr <= r ) { t [ p ]. tag += v , t [ p ]. val += v ; return ; } pushdown ( p ); int mid = ( nl + nr ) >> 1 ; if ( l <= mid ) Inc ( p << 1 , l , r , v ); if ( r > mid ) Inc ( p << 1 | 1 , l , r , v ); pushup ( p ); } i64 Rmq ( int p , int l , int r ) { i64 ret = inf ; int nl = t [ p ]. l , nr = t [ p ]. r ; if ( l <= nl && nr <= r ) return t [ p ]. val ; pushdown ( p ); int mid = ( nl + nr ) >> 1 ; if ( l <= mid ) ret = min ( ret , Rmq ( p << 1 , l , r )); if ( r > mid ) ret = min ( ret , Rmq ( p << 1 | 1 , l , r )); return ret ; } } tr ; char s [ 400005 ]; int main () { // cin.tie(0) -> sync_with_stdio(false); // cin.exceptions(cin.failbit | cin.badbit); cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; tr . Build ( 1 , 1 , n ), cin >> m , getchar (); for ( int i = 1 ; i <= m ; ++ i ) { gets ( s ); int l , r ; i64 k ; if ( sscanf ( s , \"%d%d%I64d\" , & l , & r , & k ) == 2 ) { l ++ , r ++ ; if ( l <= r ) cout << tr . Rmq ( 1 , l , r ) << endl ; else cout << min ( tr . Rmq ( 1 , 1 , r ), tr . Rmq ( 1 , l , n )) << endl ; } else { l ++ , r ++ ; if ( l <= r ) tr . Inc ( 1 , l , r , k ); else tr . Inc ( 1 , 1 , r , k ), tr . Inc ( 1 , l , n , k ); } } return 0 ; } B - Buy Tickets \u03c8(\uff40\u2207\u00b4)\u03c8 \u6709 \\(n\\) \u4e2a\u4eba\u548c\u4e00\u4e2a\u521d\u59cb\u4e3a\u7a7a\u7684\u961f\u5217\uff0c\u6bcf\u4e2a\u4eba\u90fd\u88ab\u5206\u914d\u4e86\u4e00\u4e2a\u6570\u503c\uff0c\u5e76\u4e14\u7b2c \\(i\\) \u4e2a\u4eba\u4f1a\u63d2\u961f\u5230\u7b2c \\(pos_i\\) \u4e2a\u4eba\u540e\u9762\uff08 \\(pos_i = 0\\) \u610f\u5473\u7740\u7ad9\u5230\u961f\u5934\uff09\u3002 \u6c42\u7ecf\u8fc7 \\(n\\) \u6b21\u63d2\u961f\u540e\u6574\u4e2a\u961f\u5217\u7684\u60c5\u51b5\uff0c \\(1\\le n \\le 2\\times 10^5\\) \u3002 \u597d\u4e45\u4ee5\u524d\u5c31\u89c1\u8fc7\u8fd9\u9898\u4e86\uff0c\u53ea\u662f\u5f53\u65f6\u6ca1\u6709\u505a\u51fa\u6765\u3002 \u6b63\u7740\u505a\u5f88\u96be\u641e\uff0c\u600e\u4e48\u505a\u90fd\u662f \\(O(n^2)\\) \u7684\uff0c\u8003\u8651\u7c7b\u4f3c ARC080E Young Maids \u90a3\u9898\u7684\u601d\u8def\uff0c\u5012\u8fc7\u6765\u89c2\u5bdf\u5408\u6cd5\u89e3\u7684\u5f62\u72b6\u3002 \u53d1\u73b0\u5982\u679c\u4e00\u4e2a\u4eba\u662f\u6700\u540e\u63d2\u961f\u7684\uff0c\u90a3\u4e48\u4ed6\u7684\u4f4d\u7f6e\u4e00\u5b9a\u662f\u56fa\u5b9a\u7684\uff0c\u7c7b\u4f3c\u5730\u5f80\u524d\u8d70\u5c31\u80fd\u786e\u5b9a\u6bcf\u4e00\u4e2a\u4eba\u7684\u4f4d\u7f6e\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u7ef4\u62a4 \\([1, n]\\) \u7684\u533a\u95f4\u201c\u7a7a\u4f4d\u201d\u4e2a\u6570\u548c\uff0c\u7136\u540e\u5012\u5e8f\u63d2\u5165\uff0c\u8fc7\u7a0b\u7c7b\u4f3c\u8fd9\u4e2a\uff08\u56fe\u6e90 https://www.cnblogs.com/zhengguiping--9876/p/4717024.html \uff09\uff1a \u4e8e\u662f\u7ebf\u6bb5\u6811\u4e8c\u5206\u4e00\u4e0b\u5c31\u80fd\u89e3\u51b3\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl \"\\n\" using namespace std ; // using i64 = long long; const int si = 2e5 + 10 ; int n , m , ord [ si ]; class SegTree { private : struct Node { int l , r ; int sum ; } t [ si << 2 ]; inline void pushup ( int p ) { t [ p ]. sum = t [ p << 1 ]. sum + t [ p << 1 | 1 ]. sum ; } public : void build ( int p , int l , int r ) { t [ p ]. l = l , t [ p ]. r = r ; if ( l == r ) return ( void )( t [ p ]. sum = 1 ); int mid = ( l + r ) >> 1 ; build ( p << 1 , l , mid ), build ( p << 1 | 1 , mid + 1 , r ), pushup ( p ); } void insert ( int p , int x , int val ) { if ( t [ p ]. l == t [ p ]. r ) { t [ p ]. sum = 0 , ord [ t [ p ]. l ] = val ; return ; } if ( t [ p << 1 ]. sum >= x ) insert ( p << 1 , x , val ); else insert ( p << 1 | 1 , x - t [ p << 1 ]. sum , val ); pushup ( p ); } } tr ; struct Op { int pos , val ; } a [ si ]; int main () { // cin.tie(0) -> sync_with_stdio(false); // cin.exceptions(cin.failbit | cin.badbit); while ( ~ scanf ( \"%d\" , & n )) { tr . build ( 1 , 1 , n ); for ( int i = 1 ; i <= n ; ++ i ) scanf ( \"%d%d\" , & a [ i ]. pos , & a [ i ]. val ); for ( int i = n ; i >= 1 ; -- i ) tr . insert ( 1 , a [ i ]. pos + 1 , a [ i ]. val ); for ( int i = 1 ; i <= n ; ++ i ) printf ( \"%d \" , ord [ i ]); printf ( endl ); } return 0 ; } POJ \u795e\u7b14\u73a9\u610f\u513f\u5361 cin\uff0c\u8bb0\u5f97\u7528 scanf\u3002 C - Who Gets the Most Candies? \u03c8(\uff40\u2207\u00b4)\u03c8 Statement N children are sitting in a circle to play a game. The children are numbered from 1 to N in clockwise order. Each of them has a card with a non-zero integer on it in his/her hand. The game starts from the K-th child, who tells all the others the integer on his card and jumps out of the circle. The integer on his card tells the next child to jump out. Let A denote the integer. If A is positive, the next child will be the A-th child to the left. If A is negative, the next child will be the (\u2212A)-th child to the right. The game lasts until all children have jumped out of the circle. During the game, the p-th child jumping out will get F(p) candies where F(p) is the number of positive integers that perfectly divide p. Who gets the most candies? Input There are several test cases in the input. Each test case starts with two integers N (0 < N \u2264 500,000) and K (1 \u2264 K \u2264 N) on the first line. The next N lines contains the names of the children (consisting of at most 10 letters) and the integers (non-zero with magnitudes within 108) on their cards in increasing order of the children\u2019s numbers, a name and an integer separated by a single space in a line with no leading or trailing spaces. Output Output one line for each test case containing the name of the luckiest child and the number of candies he/she gets. If ties occur, always choose the child who jumps out of the circle first. \u5c31\u662f\u4e00\u4e2a\u7ea6\u745f\u592b\u73af\u7684\u95ee\u9898\uff0c\u60f3\u6cd5\u7c7b\u4f3c B \u9898\uff0c\u5c31\u662f\u7ef4\u62a4\u7a7a\u4f4d\u4e4b\u7c7b\u7684\u4e1c\u897f\u7136\u540e\u7ebf\u6bb5\u6811\u4e8c\u5206\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; // using i64 = long long; const int si = 5e5 + 10 ; int n , k , id ; int F [ si ]; void init () { memset ( F , 0 , sizeof F ); for ( int i = 1 ; i <= n ; ++ i ) { F [ i ] ++ ; for ( int j = i * 2 ; j <= n ; j += i ) { F [ j ] ++ ; } } id = 1 ; int m = F [ 1 ]; for ( int i = 1 ; i <= n ; ++ i ) { if ( m < F [ i ]) id = i , m = F [ i ]; } } int a [ si ]; char c [ si ][ 15 ]; class SegTree { private : struct Node { int l , r ; int sum ; } t [ si << 4 ]; inline void pushup ( int p ) { t [ p ]. sum = ( t [ p << 1 ]. sum + t [ p << 1 | 1 ]. sum ); } public : void build ( int p , int l , int r ) { t [ p ]. l = l , t [ p ]. r = r ; if ( l == r ) return ( void )( t [ p ]. sum = 1 ); int mid = ( l + r ) >> 1 ; build ( p << 1 , l , mid ), build ( p << 1 | 1 , mid + 1 , r ); pushup ( p ); } int query ( int p , int l , int r ) { int ret = 0 , nl = t [ p ]. l , nr = t [ p ]. r ; if ( l <= nl && nr <= r ) return t [ p ]. sum ; int mid = ( nl + nr ) >> 1 ; if ( l <= mid ) ret += query ( p << 1 , l , r ); if ( r > mid ) ret += query ( p << 1 | 1 , l , r ); return ret ; } int modify ( int p , int x ) { int l = t [ p ]. l , r = t [ p ]. r ; if ( l == r ) return t [ p ]. sum = 0 , l ; int mid = ( l + r ) >> 1 , ret ; if ( t [ p << 1 ]. sum >= x ) ret = modify ( p << 1 , x ); else ret = modify ( p << 1 | 1 , x - t [ p << 1 ]. sum ); pushup ( p ); return ret ; } } tr ; int main () { // cin.tie(0) -> sync_with_stdio(false); // cin.exceptions(cin.failbit | cin.badbit); while ( ~ scanf ( \"%d%d\" , & n , & k )) { for ( int i = 1 ; i <= n ; ++ i ) scanf ( \"%s%d\" , & c [ i ], & a [ i ]); init (), tr . build ( 1 , 1 , n ); a [ 0 ] = 0 ; int pos = 0 , mod = n , tmp = id ; while ( tmp -- ) { if ( a [ pos ] > 0 ) k = (( k - 1 + a [ pos ] - 1 ) % mod + mod ) % mod + 1 ; else k = (( k - 1 + a [ pos ]) % mod + mod ) % mod + 1 ; pos = tr . modify ( 1 , k ), mod = tr . query ( 1 , 1 , n ); } printf ( \"%s %d \\n \" , c [ pos ], F [ id ]); } return 0 ; } D - Fast Matrix Operations \u03c8(\uff40\u2207\u00b4)\u03c8 \u6709\u4e00\u4e2a \\(r\\) \u884c \\(c\\) \u5217\u7684\u5168 \\(0\\) \u77e9\u9635\uff0c\u6709\u4ee5\u4e0b\u4e09\u79cd\u64cd\u4f5c\u3002 1 X1 Y1 X2 Y2 v \u5c06\u5b50\u77e9\u9635 \\((X1,Y1,X2,Y2)\\) \u7684\u5143\u7d20\u52a0 \\(v,(v > 0)\\) \u3002 2 X1 Y1 X2 Y2 v \u5c06\u5b50\u77e9\u9635 \\((X1,Y1,X2,Y2)\\) \u7684\u6240\u6709\u5143\u7d20\u53d8\u4e3a \\(v\\) \u3002 3 X1 Y1 X2 Y2 \u67e5\u8be2\u5b50\u77e9\u9635 \\((X1,Y1,X2,Y2)\\) \u7684\u548c\uff0c\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c\u3002 \u8f93\u5165\u4fdd\u8bc1\u548c\u4e0d\u8d85\u8fc7 \\(10^9\\) \uff0c\u77e9\u9635\u4e0d\u8d85\u8fc7 \\(20\\) \u884c\uff0c\u77e9\u9635\u5143\u7d20\u4e2a\u6570\u4e0d\u8d85\u8fc7 \\(10^6\\) \u3002 \u7ffb\u8bd1\u6765\u81ea Luogu-@Himself65 \u3002 \u53d1\u73b0\u77e9\u9635\u4e0d\u8d85\u8fc7 \\(20\\) \u884c\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u66b4\u529b\u5bf9\u6bcf\u4e00\u884c\u7ef4\u62a4\u3002 \u7136\u540e\u6211\u4eec\u5c31\u53ea\u9700\u8981\u533a\u95f4\u52a0\u533a\u95f4\u4fee\u6539\u533a\u95f4\u6c42\u548c\u533a\u95f4\u6700\u503c\u3002 \u6ce8\u610f\u5230\u533a\u95f4\u52a0\u548c\u533a\u95f4\u4fee\u6539\u90fd\u662f\u9700\u8981 lazytag \u7684\uff0c\u6211\u4eec\u601d\u8003\u4e00\u4e0b lazytag \u7684\u987a\u5e8f\u3002 \u8fd9\u91cc\u4e3a\u4e86\u65b9\u4fbf\u5c31\u61d2\u5f97\u7528\u7fa4\u8bba\u7684\u8bed\u8a00\u89e3\u91ca\u4e86\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u88ab\u5148\u6253\u4e0a\u4e00\u4e2a add \u6807\u8bb0\uff0c\u7136\u540e\u6253\u4e0a\u4e00\u4e2a set \u6807\u8bb0\uff0cadd \u6807\u8bb0\u4f1a\u88ab\u76f4\u63a5 \u8986\u76d6 \u3002 \u5982\u679c\u5148\u6253\u4e0a\u4e00\u4e2a set \u6807\u8bb0\uff0c\u540e\u6253\u4e0a\u4e00\u4e2a add \u6807\u8bb0\uff0c\u662f\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\u7684\u3002 \u6240\u4ee5\u5728 pushdown \u7684\u65f6\u5019\u6211\u4eec\u9700\u8981\u5148\u5904\u7406 set\uff0c\u5728\u533a\u95f4\u4fee\u6539\u548c\u4e0b\u653e set \u6807\u8bb0\u7684\u65f6\u5019\u8981\u6ce8\u610f\u6e05\u7a7a add \u6807\u8bb0\u3002 \u5c31\u8fd9\u6837\uff0c\u53ea\u662f\u6bd4\u8f83\u96be\u5199\uff0c\u7136\u540e\u4fee\u6539\u7684 \\(v\\) \u597d\u50cf\u6ca1\u6709\u9650\u5236\uff0c\u6240\u4ee5\u4fdd\u9669\u8d77\u89c1\u6211\u4eec\u7528\u4e00\u4e2a\u503c\u57df\u5916\u7684\u6570\u8868\u793a\u7a7a\u6807\u8bb0\u5c31\u884c\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int inf = 1e9 + 7 ; const int si = 1e6 + 10 ; int n , m , q ; class SegTree { private : struct Node { int l , r ; int mi , mx , sm ; int set , add ; int len () { return r - l + 1 ; } } t [ si << 2 ]; inline void pushup ( int p ) { t [ p ]. sm = t [ p << 1 ]. sm + t [ p << 1 | 1 ]. sm ; t [ p ]. mx = max ( t [ p << 1 ]. mx , t [ p << 1 | 1 ]. mx ); t [ p ]. mi = min ( t [ p << 1 ]. mi , t [ p << 1 | 1 ]. mi ); } inline void pushdown ( int p ) { if ( t [ p ]. set != inf ) { t [ p << 1 ]. sm = t [ p << 1 ]. len () * t [ p ]. set ; t [ p << 1 | 1 ]. sm = t [ p << 1 | 1 ]. len () * t [ p ]. set ; t [ p << 1 ]. mi = t [ p << 1 ]. mx = t [ p ]. set ; t [ p << 1 | 1 ]. mi = t [ p << 1 | 1 ]. mx = t [ p ]. set ; t [ p << 1 ]. set = t [ p ]. set , t [ p << 1 | 1 ]. set = t [ p ]. set , t [ p ]. set = inf ; t [ p << 1 ]. add = 0 , t [ p << 1 | 1 ]. add = 0 ; // Attention. } if ( t [ p ]. add != 0 ) { t [ p << 1 ]. sm += t [ p << 1 ]. len () * t [ p ]. add ; t [ p << 1 ]. mi += t [ p ]. add , t [ p << 1 ]. mx += t [ p ]. add ; t [ p << 1 | 1 ]. sm += t [ p << 1 | 1 ]. len () * t [ p ]. add ; t [ p << 1 | 1 ]. mi += t [ p ]. add , t [ p << 1 | 1 ]. mx += t [ p ]. add ; t [ p << 1 ]. add += t [ p ]. add , t [ p << 1 | 1 ]. add += t [ p ]. add , t [ p ]. add = 0 ; } } public : void build ( int p , int l , int r ) { t [ p ]. l = l , t [ p ]. r = r ; if ( l == r ) { t [ p ]. sm = 0 , t [ p ]. mx = 0 , t [ p ]. mi = 0 ; t [ p ]. add = 0 , t [ p ]. set = inf ; return ; } int mid = ( l + r ) >> 1 ; build ( p << 1 , l , mid ), build ( p << 1 | 1 , mid + 1 , r ), pushup ( p ); } void Set ( int p , int l , int r , int v ) { int nl = t [ p ]. l , nr = t [ p ]. r ; if ( l <= nl && nr <= r ) { t [ p ]. sm = t [ p ]. len () * v ; t [ p ]. mx = t [ p ]. mi = v ; t [ p ]. add = 0 , t [ p ]. set = v ; // Attention return ; } pushdown ( p ); int mid = ( nl + nr ) >> 1 ; if ( l <= mid ) Set ( p << 1 , l , r , v ); if ( r > mid ) Set ( p << 1 | 1 , l , r , v ); pushup ( p ); } void Add ( int p , int l , int r , int v ) { int nl = t [ p ]. l , nr = t [ p ]. r ; if ( l <= nl && nr <= r ) { t [ p ]. sm += t [ p ]. len () * v ; t [ p ]. mx += v , t [ p ]. mi += v ; t [ p ]. add += v ; return ; } pushdown ( p ); int mid = ( nl + nr ) >> 1 ; if ( l <= mid ) Add ( p << 1 , l , r , v ); if ( r > mid ) Add ( p << 1 | 1 , l , r , v ); pushup ( p ); } int Quesm ( int p , int l , int r ) { int ret = 0 , nl = t [ p ]. l , nr = t [ p ]. r ; if ( l <= nl && nr <= r ) return t [ p ]. sm ; pushdown ( p ); int mid = ( nl + nr ) >> 1 ; if ( l <= mid ) ret += Quesm ( p << 1 , l , r ); if ( r > mid ) ret += Quesm ( p << 1 | 1 , l , r ); return ret ; } int Quemi ( int p , int l , int r ) { int ret = inf , nl = t [ p ]. l , nr = t [ p ]. r ; if ( l <= nl && nr <= r ) return t [ p ]. mi ; pushdown ( p ); int mid = ( nl + nr ) >> 1 ; if ( l <= mid ) ret = min ( ret , Quemi ( p << 1 , l , r )); if ( r > mid ) ret = min ( ret , Quemi ( p << 1 | 1 , l , r )); return ret ; } int Quemx ( int p , int l , int r ) { int ret = - inf , nl = t [ p ]. l , nr = t [ p ]. r ; if ( l <= nl && nr <= r ) return t [ p ]. mx ; pushdown ( p ); int mid = ( nl + nr ) >> 1 ; if ( l <= mid ) ret = max ( ret , Quemx ( p << 1 , l , r )); if ( r > mid ) ret = max ( ret , Quemx ( p << 1 | 1 , l , r )); return ret ; } }; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); // while(cin >> n >> m >> q) { cin >> n >> m >> q ; SegTree * tr = new SegTree [ n + 1 ]; for ( int i = 1 ; i <= n ; ++ i ) tr [ i ]. build ( 1 , 1 , m ); for ( int i = 1 ; i <= q ; ++ i ) { int opt ; cin >> opt ; if ( opt == 1 ) { int x , xx , y , yy , v ; cin >> x >> y >> xx >> yy >> v ; for ( int j = x ; j <= xx ; ++ j ) tr [ j ]. Add ( 1 , y , yy , v ); } if ( opt == 2 ) { int x , xx , y , yy , v ; cin >> x >> y >> xx >> yy >> v ; for ( int j = x ; j <= xx ; ++ j ) tr [ j ]. Set ( 1 , y , yy , v ); } if ( opt == 3 ) { int x , xx , y , yy ; cin >> x >> y >> xx >> yy ; int sum = 0 , mxv = - inf , miv = inf ; for ( int j = x ; j <= xx ; ++ j ) { sum += tr [ j ]. Quesm ( 1 , y , yy ); mxv = max ( mxv , tr [ j ]. Quemx ( 1 , y , yy )); miv = min ( miv , tr [ j ]. Quemi ( 1 , y , yy )); } cout << sum << \" \" << miv << \" \" << mxv << endl ; } } // } return 0 ; } \u8fd8\u6709\u4e00\u4e2a\u70b9\u662f\uff0c\u76f4\u63a5\u5f00 \\(21\\) \u4e2a\u7ebf\u6bb5\u6811\u4f1a\u70b8\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u7528 new/delete \u52a8\u6001\u521b\u5efa\u6570\u7ec4\u3002 \u8fd9\u4e2a\u9898\u597d\u50cf\u8bf4\u662f\u6709\u591a\u6d4b\uff0c\u4f46\u662f\u6570\u636e\u53ef\u80fd\u662f\u7528\u811a\u9020\u7684\uff0c\u6240\u4ee5\u6211\u5fd8\u8bb0\u53d6\u6d88\u6ce8\u91ca\u4e86\u4e5f\u90fd\u6ca1\u6709\u4e8b\u60c5\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u6211\u8bfb\u9519\u4e86\u3002 E - Parade \u03c8(\uff40\u2207\u00b4)\u03c8 \u9898\u610f\u548c\u9898\u89e3\u770b\u8fd9\u91cc\u7684 \u590d\u76d8\u62a5\u544a \u3002 F - Help with Intervals \u03c8(\uff40\u2207\u00b4)\u03c8 \u9898\u610f\u6709\u70b9\u590d\u6742\uff0c\u6211\u76f4\u63a5\u7c98\u8d34\u539f\u9898\u9762\u4e86\uff1a Statement 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 Description LogLoader, Inc. is a company specialized in providing products for analyzing logs. While Ikki is working on graduation design, he is also engaged in an internship at LogLoader. Among his tasks, one is to write a module for manipulating time intervals, which have confused him a lot. Now he badly needs your help. In discrete mathematics, you have studied several basic set operations, namely union, intersection, relative complementation and symmetric difference, which naturally apply to the specialization of sets as intervals.. For your quick reference they are summarized in the table below: Operation Notation Definition Union A \u222a B {x : x \u2208 A or x \u2208 B} Intersection A \u2229 B {x : x \u2208 A and x \u2208 B} Relative complementation A \u2212 B {x : x \u2208 A but x \u2209 B} Symmetric difference A \u2295 B (A \u2212 B) \u222a (B \u2212 A) Ikki has abstracted the interval operations emerging from his job as a tiny programming language. He wants you to implement an interpreter for him. The language maintains a set S, which starts out empty and is modified as specified by the following commands: Command Semantics U T S \u2190 S \u222a T I T S \u2190 S \u2229 T D T S \u2190 S \u2212 T C T S \u2190 T \u2212 S S T S \u2190 S \u2295 T Input The input contains exactly one test case, which consists of between 0 and 65,535 (inclusive) commands of the language. Each command occupies a single line and appears like X T where X is one of \u2018U\u2019, \u2018I\u2019, \u2018D\u2019, \u2018C\u2019 and \u2018S\u2019 and T is an interval in one of the forms (a,b), (a,b], [a,b) and [a,b] (a, b \u2208 Z, 0 \u2264 a \u2264 b \u2264 65,535), which take their usual meanings. The commands are executed in the order they appear in the input. End of file (EOF) indicates the end of input. Output Output the set S as it is after the last command is executed as the union of a minimal collection of disjoint intervals. The intervals should be printed on one line separated by single spaces and appear in increasing order of their endpoints. If S is empty, just print \u201cempty set\u201d and nothing else. \u9996\u5148\u8003\u8651\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u600e\u4e48\u5904\u7406\u5f00\u533a\u95f4\u548c\u95ed\u533a\u95f4\u3002 \u8fd9\u4e2a\u6bd4\u8f83\u7b80\u5355\uff0c\u6211\u4eec\u628a\u6bcf\u4e2a\u70b9\u770b\u4f5c\u4e24\u4e2a\u70b9\uff0c\u5206\u522b\u8868\u793a\u8fd9\u4e2a\u70b9\u4f5c\u4e3a\u5f00/\u95ed\u533a\u95f4\u7aef\u70b9\u7684\u60c5\u51b5\u3002 \u7136\u540e\u8fd9\u6837\u5c31\u5f88\u65b9\u4fbf\u4fee\u6539\u3002 \u6bd4\u5982 \\((1, 3]\\) \u5c31\u62c6\u6210 \\((1), [2], (2), [3]\\) \u5c31\u884c\u4e86\u3002 \u8f6c\u5316\u56de\u6765\u7684\u8bdd\uff0c\u4f60\u53d1\u73b0\u5f00\u533a\u95f4\u4e00\u5b9a\u662f\u5947\u6570\uff0c\u95ed\u533a\u95f4\u4e00\u5b9a\u662f\u5076\u6570\uff0c\u7136\u540e\u5c31\u884c\u4e86\u3002 \u4e8e\u662f\u73b0\u5728\u8981\u505a\u7684\u5c31\u662f\u770b\u8fd9\u4e2a\u64cd\u4f5c\u600e\u4e48\u8f6c\u5316\u6210\u6bd4\u8f83\u65b9\u4fbf\u64cd\u4f5c\u7684\u8bed\u8a00\u3002 \u5176\u5b9e\u5c31\u662f\u7ef4\u62a4\u4e00\u5806 0/1\uff0c\u7136\u540e\u8981\u652f\u6301\u4e00\u5b9a\u7684\u533a\u95f4\u7ffb\u8f6c\u548c\u533a\u95f4\u5f02\u6216\u64cd\u4f5c\uff0c\u53ea\u4e0d\u8fc7\u7ef4\u62a4\u7684\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u53ea\u7ef4\u62a4\u4e24\u4e2a tag\uff0c\u6700\u540e\u518d\u66b4\u529b\u5904\u7406\uff0c\u6bd5\u7adf\u53ea\u6709 0/1 \u561b\u3002 U : \u628a\u533a\u95f4 \\([l,r]\\) \u8986\u76d6\u6210 \\(1\\) I : \u628a \\([-\\infty,l), (r,\\infty]\\) \u8986\u76d6\u6210 \\(0\\) D : \u628a\u533a\u95f4 \\([l,r]\\) \u8986\u76d6\u6210 \\(0\\) C : \u628a \\([-\\infty,l), (r,\u221e]\\) \u8986\u76d6\u6210 \\(0\\) , \u4e14 \\([l,r]\\) \u533a\u95f4\u6574\u4f53\u5f02\u6216 \\(1\\) S : \\([l,r]\\) \u533a\u95f4\u6574\u4f53\u5f02\u6216 \\(1\\) Cover \u64cd\u4f5c\u662f Trivial \u7684\uff0cXor \u53ea\u9700\u8981\u5206\u5272\u533a\u95f4\u7136\u540e\u5728\u533a\u95f4\u4e0a\u9762\u6253\u4e00\u4e2a\u6807\u8bb0\u3002 \u6ce8\u610f Xor \u4e0d\u80fd\u8986\u76d6 Cover \u53ea\u80fd\u628a Xor \u6253\u5230 Cover \u8eab\u4e0a\uff0cCover \u53ef\u4ee5\u8986\u76d6 Xor\uff0c\u5c31\u662f\u4e00\u4e2a\u4f18\u5148\u7ea7\u7684\u95ee\u9898\u3002 \u55ef\u55ef\uff0c\u7136\u540e\u505a\u5b8c\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 // \u8fd9\u4e2a\u6ca1\u8c03\u5b8c // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; // using i64 = long long; const int si = 2e5 + 10 ; bool vis [ si << 2 ]; class SegTree { private : struct Node { int l , r ; int set , Xor ; } t [ si << 2 ]; inline void pushdown ( int p ) { if ( t [ p ]. set != -1 ) { t [ p << 1 ]. set = t [ p << 1 | 1 ]. set = t [ p ]. set ; t [ p << 1 ]. Xor = t [ p << 1 | 1 ]. Xor = 0 ; t [ p ]. set = -1 ; } if ( t [ p ]. Xor ) { if ( t [ p << 1 ]. set != -1 ) t [ p << 1 ]. set ^= 1 ; else t [ p << 1 ]. Xor ^= 1 ; if ( t [ p << 1 | 1 ]. set != -1 ) t [ p << 1 | 1 ]. set ^= 1 ; else t [ p << 1 | 1 ]. Xor ^= 1 ; t [ p ]. Xor = 0 ; } } public : void init () { t [ 1 ]. set = t [ 1 ]. Xor = 0 ; } void build ( int p , int l , int r ) { t [ p ]. l = l , t [ p ]. r = r , t [ p ]. set = -1 , t [ p ]. Xor = 0 ; if ( l == r ) return ; int mid = ( l + r ) >> 1 ; build ( p << 1 , l , mid ), build ( p << 1 | 1 , mid + 1 , r ); } void change ( int p , int l , int r , char op ) { int nl = t [ p ]. l , nr = t [ p ]. r ; if ( l <= nl && nr <= r ) { if ( op == 'U' ) t [ p ]. set = 1 , t [ p ]. Xor = 0 ; if ( op == 'D' ) t [ p ]. set = 0 , t [ p ]. Xor = 0 ; if ( op == 'C' || op == 'S' ) { if ( t [ p ]. set != -1 ) t [ p ]. set ^= 1 ; else t [ p ]. Xor ^= 1 ; } return ; } pushdown ( p ); int mid = ( nl + nr ) >> 1 ; if ( l <= mid ) change ( p << 1 , l , r , op ); else t [ p << 1 ]. Xor = t [ p << 1 ]. set = 0 ; if ( r > mid ) change ( p << 1 | 1 , l , r , op ); else t [ p << 1 | 1 ]. Xor = t [ p << 1 | 1 ]. set = 0 ; } void query ( int p , int l , int r ) { if ( t [ p ]. set == 1 ) { for ( int i = l ; i <= r ; ++ i ) vis [ i ] = true ; return ; } if ( t [ p ]. set == 0 || l == r ) return ; pushdown ( p ), query ( p << 1 , l , r ), query ( p << 1 | 1 , l , r ); } } tr ; int main () { // cin.tie(0) -> sync_with_stdio(false); // cin.exceptions(cin.failbit | cin.badbit); #ifndef ONLINE_JUDGE freopen ( \"input_f.txt\" , \"r\" , stdin ); freopen ( \"output_f.txt\" , \"w\" , stdout ); #endif char suzui ; tr . build ( 1 , 1 , si ), tr . init (); while ( scanf ( \"%c\" , & suzui ) != EOF ) { char cl , cr ; int l , r ; scanf ( \" %c%d,%d%c \\n \" , & cl , & l , & r , & cr ); l *= 2 , r *= 2 ; if ( cl == '(' ) l ++ ; if ( cr == ')' ) r -- ; tr . change ( 1 , l , r , suzui ); } tr . query ( 1 , 1 , si ); int f = 0 , s = -1 , e ; for ( int i = 1 ; i <= si ; ++ i ) { if ( vis [ i ]) { if ( s == -1 ) s = i ; e = i ; } else if ( s != -1 ) { if ( f ) putchar ( ' ' ); f = 1 ; char cl = ( s & 1 ) ? '(' : '[' , cr = ( e & 1 ) ? ')' : ']' ; printf ( \"%c%d,%c%d \\n \" , cl , s / 2 , ( e + 1 ) / 2 , cr ), s = -1 ; } } if ( ! f ) puts ( \"empty set\" ); return 0 ; }","title":"CWOI \u7ebf\u6bb5\u6811\u9009\u505a(22Dec)"},{"location":"rec/segtree-practice/#vjudge","text":"","title":"Vjudge \u7ebf\u6bb5\u6811\u5c0f\u4e13\u9898"},{"location":"rec/segtree-practice/#a-circular-rmq","text":"\u5728\u73af\u4e0a\u505a\u533a\u95f4\u52a0\u533a\u95f4\u6700\u503c\u3002 \\(1\\le n \\le 10^6\\) \u3002 \u5c31\u62c6\u4e00\u4e0b\u5c31\u884c\u4e86\uff0c\u6ca1\u5565\u597d\u8bf4\u7684 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; const i64 inf = 0x3f3f3f3f3f3f3f3fll ; int n , m , a [ si ]; class SegTree { private : struct Node { int l , r ; i64 val , tag ; } t [ si << 2 ]; void pushup ( int p ) { t [ p ]. val = min ( t [ p << 1 ]. val , t [ p << 1 | 1 ]. val ); return ; } void pushdown ( int p ) { if ( ! t [ p ]. tag ) return ; t [ p << 1 ]. val += t [ p ]. tag , t [ p << 1 | 1 ]. val += t [ p ]. tag ; t [ p << 1 ]. tag += t [ p ]. tag , t [ p << 1 | 1 ]. tag += t [ p ]. tag ; t [ p ]. tag = 0 ; } public : void Build ( int p , int l , int r ) { t [ p ]. l = l , t [ p ]. r = r , t [ p ]. tag = 0 ; if ( l == r ) { t [ p ]. val = 1l l * a [ l ]; return ; } int mid = ( l + r ) >> 1 ; Build ( p << 1 , l , mid ), Build ( p << 1 | 1 , mid + 1 , r ), pushup ( p ); } void Inc ( int p , int l , int r , i64 v ) { int nl = t [ p ]. l , nr = t [ p ]. r ; if ( l <= nl && nr <= r ) { t [ p ]. tag += v , t [ p ]. val += v ; return ; } pushdown ( p ); int mid = ( nl + nr ) >> 1 ; if ( l <= mid ) Inc ( p << 1 , l , r , v ); if ( r > mid ) Inc ( p << 1 | 1 , l , r , v ); pushup ( p ); } i64 Rmq ( int p , int l , int r ) { i64 ret = inf ; int nl = t [ p ]. l , nr = t [ p ]. r ; if ( l <= nl && nr <= r ) return t [ p ]. val ; pushdown ( p ); int mid = ( nl + nr ) >> 1 ; if ( l <= mid ) ret = min ( ret , Rmq ( p << 1 , l , r )); if ( r > mid ) ret = min ( ret , Rmq ( p << 1 | 1 , l , r )); return ret ; } } tr ; char s [ 400005 ]; int main () { // cin.tie(0) -> sync_with_stdio(false); // cin.exceptions(cin.failbit | cin.badbit); cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; tr . Build ( 1 , 1 , n ), cin >> m , getchar (); for ( int i = 1 ; i <= m ; ++ i ) { gets ( s ); int l , r ; i64 k ; if ( sscanf ( s , \"%d%d%I64d\" , & l , & r , & k ) == 2 ) { l ++ , r ++ ; if ( l <= r ) cout << tr . Rmq ( 1 , l , r ) << endl ; else cout << min ( tr . Rmq ( 1 , 1 , r ), tr . Rmq ( 1 , l , n )) << endl ; } else { l ++ , r ++ ; if ( l <= r ) tr . Inc ( 1 , l , r , k ); else tr . Inc ( 1 , 1 , r , k ), tr . Inc ( 1 , l , n , k ); } } return 0 ; }","title":"A - Circular RMQ"},{"location":"rec/segtree-practice/#b-buy-tickets","text":"\u6709 \\(n\\) \u4e2a\u4eba\u548c\u4e00\u4e2a\u521d\u59cb\u4e3a\u7a7a\u7684\u961f\u5217\uff0c\u6bcf\u4e2a\u4eba\u90fd\u88ab\u5206\u914d\u4e86\u4e00\u4e2a\u6570\u503c\uff0c\u5e76\u4e14\u7b2c \\(i\\) \u4e2a\u4eba\u4f1a\u63d2\u961f\u5230\u7b2c \\(pos_i\\) \u4e2a\u4eba\u540e\u9762\uff08 \\(pos_i = 0\\) \u610f\u5473\u7740\u7ad9\u5230\u961f\u5934\uff09\u3002 \u6c42\u7ecf\u8fc7 \\(n\\) \u6b21\u63d2\u961f\u540e\u6574\u4e2a\u961f\u5217\u7684\u60c5\u51b5\uff0c \\(1\\le n \\le 2\\times 10^5\\) \u3002 \u597d\u4e45\u4ee5\u524d\u5c31\u89c1\u8fc7\u8fd9\u9898\u4e86\uff0c\u53ea\u662f\u5f53\u65f6\u6ca1\u6709\u505a\u51fa\u6765\u3002 \u6b63\u7740\u505a\u5f88\u96be\u641e\uff0c\u600e\u4e48\u505a\u90fd\u662f \\(O(n^2)\\) \u7684\uff0c\u8003\u8651\u7c7b\u4f3c ARC080E Young Maids \u90a3\u9898\u7684\u601d\u8def\uff0c\u5012\u8fc7\u6765\u89c2\u5bdf\u5408\u6cd5\u89e3\u7684\u5f62\u72b6\u3002 \u53d1\u73b0\u5982\u679c\u4e00\u4e2a\u4eba\u662f\u6700\u540e\u63d2\u961f\u7684\uff0c\u90a3\u4e48\u4ed6\u7684\u4f4d\u7f6e\u4e00\u5b9a\u662f\u56fa\u5b9a\u7684\uff0c\u7c7b\u4f3c\u5730\u5f80\u524d\u8d70\u5c31\u80fd\u786e\u5b9a\u6bcf\u4e00\u4e2a\u4eba\u7684\u4f4d\u7f6e\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u7ef4\u62a4 \\([1, n]\\) \u7684\u533a\u95f4\u201c\u7a7a\u4f4d\u201d\u4e2a\u6570\u548c\uff0c\u7136\u540e\u5012\u5e8f\u63d2\u5165\uff0c\u8fc7\u7a0b\u7c7b\u4f3c\u8fd9\u4e2a\uff08\u56fe\u6e90 https://www.cnblogs.com/zhengguiping--9876/p/4717024.html \uff09\uff1a \u4e8e\u662f\u7ebf\u6bb5\u6811\u4e8c\u5206\u4e00\u4e0b\u5c31\u80fd\u89e3\u51b3\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl \"\\n\" using namespace std ; // using i64 = long long; const int si = 2e5 + 10 ; int n , m , ord [ si ]; class SegTree { private : struct Node { int l , r ; int sum ; } t [ si << 2 ]; inline void pushup ( int p ) { t [ p ]. sum = t [ p << 1 ]. sum + t [ p << 1 | 1 ]. sum ; } public : void build ( int p , int l , int r ) { t [ p ]. l = l , t [ p ]. r = r ; if ( l == r ) return ( void )( t [ p ]. sum = 1 ); int mid = ( l + r ) >> 1 ; build ( p << 1 , l , mid ), build ( p << 1 | 1 , mid + 1 , r ), pushup ( p ); } void insert ( int p , int x , int val ) { if ( t [ p ]. l == t [ p ]. r ) { t [ p ]. sum = 0 , ord [ t [ p ]. l ] = val ; return ; } if ( t [ p << 1 ]. sum >= x ) insert ( p << 1 , x , val ); else insert ( p << 1 | 1 , x - t [ p << 1 ]. sum , val ); pushup ( p ); } } tr ; struct Op { int pos , val ; } a [ si ]; int main () { // cin.tie(0) -> sync_with_stdio(false); // cin.exceptions(cin.failbit | cin.badbit); while ( ~ scanf ( \"%d\" , & n )) { tr . build ( 1 , 1 , n ); for ( int i = 1 ; i <= n ; ++ i ) scanf ( \"%d%d\" , & a [ i ]. pos , & a [ i ]. val ); for ( int i = n ; i >= 1 ; -- i ) tr . insert ( 1 , a [ i ]. pos + 1 , a [ i ]. val ); for ( int i = 1 ; i <= n ; ++ i ) printf ( \"%d \" , ord [ i ]); printf ( endl ); } return 0 ; } POJ \u795e\u7b14\u73a9\u610f\u513f\u5361 cin\uff0c\u8bb0\u5f97\u7528 scanf\u3002","title":"B - Buy Tickets"},{"location":"rec/segtree-practice/#c-who-gets-the-most-candies","text":"Statement N children are sitting in a circle to play a game. The children are numbered from 1 to N in clockwise order. Each of them has a card with a non-zero integer on it in his/her hand. The game starts from the K-th child, who tells all the others the integer on his card and jumps out of the circle. The integer on his card tells the next child to jump out. Let A denote the integer. If A is positive, the next child will be the A-th child to the left. If A is negative, the next child will be the (\u2212A)-th child to the right. The game lasts until all children have jumped out of the circle. During the game, the p-th child jumping out will get F(p) candies where F(p) is the number of positive integers that perfectly divide p. Who gets the most candies? Input There are several test cases in the input. Each test case starts with two integers N (0 < N \u2264 500,000) and K (1 \u2264 K \u2264 N) on the first line. The next N lines contains the names of the children (consisting of at most 10 letters) and the integers (non-zero with magnitudes within 108) on their cards in increasing order of the children\u2019s numbers, a name and an integer separated by a single space in a line with no leading or trailing spaces. Output Output one line for each test case containing the name of the luckiest child and the number of candies he/she gets. If ties occur, always choose the child who jumps out of the circle first. \u5c31\u662f\u4e00\u4e2a\u7ea6\u745f\u592b\u73af\u7684\u95ee\u9898\uff0c\u60f3\u6cd5\u7c7b\u4f3c B \u9898\uff0c\u5c31\u662f\u7ef4\u62a4\u7a7a\u4f4d\u4e4b\u7c7b\u7684\u4e1c\u897f\u7136\u540e\u7ebf\u6bb5\u6811\u4e8c\u5206\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; // using i64 = long long; const int si = 5e5 + 10 ; int n , k , id ; int F [ si ]; void init () { memset ( F , 0 , sizeof F ); for ( int i = 1 ; i <= n ; ++ i ) { F [ i ] ++ ; for ( int j = i * 2 ; j <= n ; j += i ) { F [ j ] ++ ; } } id = 1 ; int m = F [ 1 ]; for ( int i = 1 ; i <= n ; ++ i ) { if ( m < F [ i ]) id = i , m = F [ i ]; } } int a [ si ]; char c [ si ][ 15 ]; class SegTree { private : struct Node { int l , r ; int sum ; } t [ si << 4 ]; inline void pushup ( int p ) { t [ p ]. sum = ( t [ p << 1 ]. sum + t [ p << 1 | 1 ]. sum ); } public : void build ( int p , int l , int r ) { t [ p ]. l = l , t [ p ]. r = r ; if ( l == r ) return ( void )( t [ p ]. sum = 1 ); int mid = ( l + r ) >> 1 ; build ( p << 1 , l , mid ), build ( p << 1 | 1 , mid + 1 , r ); pushup ( p ); } int query ( int p , int l , int r ) { int ret = 0 , nl = t [ p ]. l , nr = t [ p ]. r ; if ( l <= nl && nr <= r ) return t [ p ]. sum ; int mid = ( nl + nr ) >> 1 ; if ( l <= mid ) ret += query ( p << 1 , l , r ); if ( r > mid ) ret += query ( p << 1 | 1 , l , r ); return ret ; } int modify ( int p , int x ) { int l = t [ p ]. l , r = t [ p ]. r ; if ( l == r ) return t [ p ]. sum = 0 , l ; int mid = ( l + r ) >> 1 , ret ; if ( t [ p << 1 ]. sum >= x ) ret = modify ( p << 1 , x ); else ret = modify ( p << 1 | 1 , x - t [ p << 1 ]. sum ); pushup ( p ); return ret ; } } tr ; int main () { // cin.tie(0) -> sync_with_stdio(false); // cin.exceptions(cin.failbit | cin.badbit); while ( ~ scanf ( \"%d%d\" , & n , & k )) { for ( int i = 1 ; i <= n ; ++ i ) scanf ( \"%s%d\" , & c [ i ], & a [ i ]); init (), tr . build ( 1 , 1 , n ); a [ 0 ] = 0 ; int pos = 0 , mod = n , tmp = id ; while ( tmp -- ) { if ( a [ pos ] > 0 ) k = (( k - 1 + a [ pos ] - 1 ) % mod + mod ) % mod + 1 ; else k = (( k - 1 + a [ pos ]) % mod + mod ) % mod + 1 ; pos = tr . modify ( 1 , k ), mod = tr . query ( 1 , 1 , n ); } printf ( \"%s %d \\n \" , c [ pos ], F [ id ]); } return 0 ; }","title":"C - Who Gets the Most Candies?"},{"location":"rec/segtree-practice/#d-fast-matrix-operations","text":"\u6709\u4e00\u4e2a \\(r\\) \u884c \\(c\\) \u5217\u7684\u5168 \\(0\\) \u77e9\u9635\uff0c\u6709\u4ee5\u4e0b\u4e09\u79cd\u64cd\u4f5c\u3002 1 X1 Y1 X2 Y2 v \u5c06\u5b50\u77e9\u9635 \\((X1,Y1,X2,Y2)\\) \u7684\u5143\u7d20\u52a0 \\(v,(v > 0)\\) \u3002 2 X1 Y1 X2 Y2 v \u5c06\u5b50\u77e9\u9635 \\((X1,Y1,X2,Y2)\\) \u7684\u6240\u6709\u5143\u7d20\u53d8\u4e3a \\(v\\) \u3002 3 X1 Y1 X2 Y2 \u67e5\u8be2\u5b50\u77e9\u9635 \\((X1,Y1,X2,Y2)\\) \u7684\u548c\uff0c\u6700\u5927\u503c\uff0c\u6700\u5c0f\u503c\u3002 \u8f93\u5165\u4fdd\u8bc1\u548c\u4e0d\u8d85\u8fc7 \\(10^9\\) \uff0c\u77e9\u9635\u4e0d\u8d85\u8fc7 \\(20\\) \u884c\uff0c\u77e9\u9635\u5143\u7d20\u4e2a\u6570\u4e0d\u8d85\u8fc7 \\(10^6\\) \u3002 \u7ffb\u8bd1\u6765\u81ea Luogu-@Himself65 \u3002 \u53d1\u73b0\u77e9\u9635\u4e0d\u8d85\u8fc7 \\(20\\) \u884c\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u66b4\u529b\u5bf9\u6bcf\u4e00\u884c\u7ef4\u62a4\u3002 \u7136\u540e\u6211\u4eec\u5c31\u53ea\u9700\u8981\u533a\u95f4\u52a0\u533a\u95f4\u4fee\u6539\u533a\u95f4\u6c42\u548c\u533a\u95f4\u6700\u503c\u3002 \u6ce8\u610f\u5230\u533a\u95f4\u52a0\u548c\u533a\u95f4\u4fee\u6539\u90fd\u662f\u9700\u8981 lazytag \u7684\uff0c\u6211\u4eec\u601d\u8003\u4e00\u4e0b lazytag \u7684\u987a\u5e8f\u3002 \u8fd9\u91cc\u4e3a\u4e86\u65b9\u4fbf\u5c31\u61d2\u5f97\u7528\u7fa4\u8bba\u7684\u8bed\u8a00\u89e3\u91ca\u4e86\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u88ab\u5148\u6253\u4e0a\u4e00\u4e2a add \u6807\u8bb0\uff0c\u7136\u540e\u6253\u4e0a\u4e00\u4e2a set \u6807\u8bb0\uff0cadd \u6807\u8bb0\u4f1a\u88ab\u76f4\u63a5 \u8986\u76d6 \u3002 \u5982\u679c\u5148\u6253\u4e0a\u4e00\u4e2a set \u6807\u8bb0\uff0c\u540e\u6253\u4e0a\u4e00\u4e2a add \u6807\u8bb0\uff0c\u662f\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\u7684\u3002 \u6240\u4ee5\u5728 pushdown \u7684\u65f6\u5019\u6211\u4eec\u9700\u8981\u5148\u5904\u7406 set\uff0c\u5728\u533a\u95f4\u4fee\u6539\u548c\u4e0b\u653e set \u6807\u8bb0\u7684\u65f6\u5019\u8981\u6ce8\u610f\u6e05\u7a7a add \u6807\u8bb0\u3002 \u5c31\u8fd9\u6837\uff0c\u53ea\u662f\u6bd4\u8f83\u96be\u5199\uff0c\u7136\u540e\u4fee\u6539\u7684 \\(v\\) \u597d\u50cf\u6ca1\u6709\u9650\u5236\uff0c\u6240\u4ee5\u4fdd\u9669\u8d77\u89c1\u6211\u4eec\u7528\u4e00\u4e2a\u503c\u57df\u5916\u7684\u6570\u8868\u793a\u7a7a\u6807\u8bb0\u5c31\u884c\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int inf = 1e9 + 7 ; const int si = 1e6 + 10 ; int n , m , q ; class SegTree { private : struct Node { int l , r ; int mi , mx , sm ; int set , add ; int len () { return r - l + 1 ; } } t [ si << 2 ]; inline void pushup ( int p ) { t [ p ]. sm = t [ p << 1 ]. sm + t [ p << 1 | 1 ]. sm ; t [ p ]. mx = max ( t [ p << 1 ]. mx , t [ p << 1 | 1 ]. mx ); t [ p ]. mi = min ( t [ p << 1 ]. mi , t [ p << 1 | 1 ]. mi ); } inline void pushdown ( int p ) { if ( t [ p ]. set != inf ) { t [ p << 1 ]. sm = t [ p << 1 ]. len () * t [ p ]. set ; t [ p << 1 | 1 ]. sm = t [ p << 1 | 1 ]. len () * t [ p ]. set ; t [ p << 1 ]. mi = t [ p << 1 ]. mx = t [ p ]. set ; t [ p << 1 | 1 ]. mi = t [ p << 1 | 1 ]. mx = t [ p ]. set ; t [ p << 1 ]. set = t [ p ]. set , t [ p << 1 | 1 ]. set = t [ p ]. set , t [ p ]. set = inf ; t [ p << 1 ]. add = 0 , t [ p << 1 | 1 ]. add = 0 ; // Attention. } if ( t [ p ]. add != 0 ) { t [ p << 1 ]. sm += t [ p << 1 ]. len () * t [ p ]. add ; t [ p << 1 ]. mi += t [ p ]. add , t [ p << 1 ]. mx += t [ p ]. add ; t [ p << 1 | 1 ]. sm += t [ p << 1 | 1 ]. len () * t [ p ]. add ; t [ p << 1 | 1 ]. mi += t [ p ]. add , t [ p << 1 | 1 ]. mx += t [ p ]. add ; t [ p << 1 ]. add += t [ p ]. add , t [ p << 1 | 1 ]. add += t [ p ]. add , t [ p ]. add = 0 ; } } public : void build ( int p , int l , int r ) { t [ p ]. l = l , t [ p ]. r = r ; if ( l == r ) { t [ p ]. sm = 0 , t [ p ]. mx = 0 , t [ p ]. mi = 0 ; t [ p ]. add = 0 , t [ p ]. set = inf ; return ; } int mid = ( l + r ) >> 1 ; build ( p << 1 , l , mid ), build ( p << 1 | 1 , mid + 1 , r ), pushup ( p ); } void Set ( int p , int l , int r , int v ) { int nl = t [ p ]. l , nr = t [ p ]. r ; if ( l <= nl && nr <= r ) { t [ p ]. sm = t [ p ]. len () * v ; t [ p ]. mx = t [ p ]. mi = v ; t [ p ]. add = 0 , t [ p ]. set = v ; // Attention return ; } pushdown ( p ); int mid = ( nl + nr ) >> 1 ; if ( l <= mid ) Set ( p << 1 , l , r , v ); if ( r > mid ) Set ( p << 1 | 1 , l , r , v ); pushup ( p ); } void Add ( int p , int l , int r , int v ) { int nl = t [ p ]. l , nr = t [ p ]. r ; if ( l <= nl && nr <= r ) { t [ p ]. sm += t [ p ]. len () * v ; t [ p ]. mx += v , t [ p ]. mi += v ; t [ p ]. add += v ; return ; } pushdown ( p ); int mid = ( nl + nr ) >> 1 ; if ( l <= mid ) Add ( p << 1 , l , r , v ); if ( r > mid ) Add ( p << 1 | 1 , l , r , v ); pushup ( p ); } int Quesm ( int p , int l , int r ) { int ret = 0 , nl = t [ p ]. l , nr = t [ p ]. r ; if ( l <= nl && nr <= r ) return t [ p ]. sm ; pushdown ( p ); int mid = ( nl + nr ) >> 1 ; if ( l <= mid ) ret += Quesm ( p << 1 , l , r ); if ( r > mid ) ret += Quesm ( p << 1 | 1 , l , r ); return ret ; } int Quemi ( int p , int l , int r ) { int ret = inf , nl = t [ p ]. l , nr = t [ p ]. r ; if ( l <= nl && nr <= r ) return t [ p ]. mi ; pushdown ( p ); int mid = ( nl + nr ) >> 1 ; if ( l <= mid ) ret = min ( ret , Quemi ( p << 1 , l , r )); if ( r > mid ) ret = min ( ret , Quemi ( p << 1 | 1 , l , r )); return ret ; } int Quemx ( int p , int l , int r ) { int ret = - inf , nl = t [ p ]. l , nr = t [ p ]. r ; if ( l <= nl && nr <= r ) return t [ p ]. mx ; pushdown ( p ); int mid = ( nl + nr ) >> 1 ; if ( l <= mid ) ret = max ( ret , Quemx ( p << 1 , l , r )); if ( r > mid ) ret = max ( ret , Quemx ( p << 1 | 1 , l , r )); return ret ; } }; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); // while(cin >> n >> m >> q) { cin >> n >> m >> q ; SegTree * tr = new SegTree [ n + 1 ]; for ( int i = 1 ; i <= n ; ++ i ) tr [ i ]. build ( 1 , 1 , m ); for ( int i = 1 ; i <= q ; ++ i ) { int opt ; cin >> opt ; if ( opt == 1 ) { int x , xx , y , yy , v ; cin >> x >> y >> xx >> yy >> v ; for ( int j = x ; j <= xx ; ++ j ) tr [ j ]. Add ( 1 , y , yy , v ); } if ( opt == 2 ) { int x , xx , y , yy , v ; cin >> x >> y >> xx >> yy >> v ; for ( int j = x ; j <= xx ; ++ j ) tr [ j ]. Set ( 1 , y , yy , v ); } if ( opt == 3 ) { int x , xx , y , yy ; cin >> x >> y >> xx >> yy ; int sum = 0 , mxv = - inf , miv = inf ; for ( int j = x ; j <= xx ; ++ j ) { sum += tr [ j ]. Quesm ( 1 , y , yy ); mxv = max ( mxv , tr [ j ]. Quemx ( 1 , y , yy )); miv = min ( miv , tr [ j ]. Quemi ( 1 , y , yy )); } cout << sum << \" \" << miv << \" \" << mxv << endl ; } } // } return 0 ; } \u8fd8\u6709\u4e00\u4e2a\u70b9\u662f\uff0c\u76f4\u63a5\u5f00 \\(21\\) \u4e2a\u7ebf\u6bb5\u6811\u4f1a\u70b8\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u7528 new/delete \u52a8\u6001\u521b\u5efa\u6570\u7ec4\u3002 \u8fd9\u4e2a\u9898\u597d\u50cf\u8bf4\u662f\u6709\u591a\u6d4b\uff0c\u4f46\u662f\u6570\u636e\u53ef\u80fd\u662f\u7528\u811a\u9020\u7684\uff0c\u6240\u4ee5\u6211\u5fd8\u8bb0\u53d6\u6d88\u6ce8\u91ca\u4e86\u4e5f\u90fd\u6ca1\u6709\u4e8b\u60c5\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u6211\u8bfb\u9519\u4e86\u3002","title":"D - Fast Matrix Operations"},{"location":"rec/segtree-practice/#e-parade","text":"\u9898\u610f\u548c\u9898\u89e3\u770b\u8fd9\u91cc\u7684 \u590d\u76d8\u62a5\u544a \u3002","title":"E - Parade"},{"location":"rec/segtree-practice/#f-help-with-intervals","text":"\u9898\u610f\u6709\u70b9\u590d\u6742\uff0c\u6211\u76f4\u63a5\u7c98\u8d34\u539f\u9898\u9762\u4e86\uff1a Statement 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 Description LogLoader, Inc. is a company specialized in providing products for analyzing logs. While Ikki is working on graduation design, he is also engaged in an internship at LogLoader. Among his tasks, one is to write a module for manipulating time intervals, which have confused him a lot. Now he badly needs your help. In discrete mathematics, you have studied several basic set operations, namely union, intersection, relative complementation and symmetric difference, which naturally apply to the specialization of sets as intervals.. For your quick reference they are summarized in the table below: Operation Notation Definition Union A \u222a B {x : x \u2208 A or x \u2208 B} Intersection A \u2229 B {x : x \u2208 A and x \u2208 B} Relative complementation A \u2212 B {x : x \u2208 A but x \u2209 B} Symmetric difference A \u2295 B (A \u2212 B) \u222a (B \u2212 A) Ikki has abstracted the interval operations emerging from his job as a tiny programming language. He wants you to implement an interpreter for him. The language maintains a set S, which starts out empty and is modified as specified by the following commands: Command Semantics U T S \u2190 S \u222a T I T S \u2190 S \u2229 T D T S \u2190 S \u2212 T C T S \u2190 T \u2212 S S T S \u2190 S \u2295 T Input The input contains exactly one test case, which consists of between 0 and 65,535 (inclusive) commands of the language. Each command occupies a single line and appears like X T where X is one of \u2018U\u2019, \u2018I\u2019, \u2018D\u2019, \u2018C\u2019 and \u2018S\u2019 and T is an interval in one of the forms (a,b), (a,b], [a,b) and [a,b] (a, b \u2208 Z, 0 \u2264 a \u2264 b \u2264 65,535), which take their usual meanings. The commands are executed in the order they appear in the input. End of file (EOF) indicates the end of input. Output Output the set S as it is after the last command is executed as the union of a minimal collection of disjoint intervals. The intervals should be printed on one line separated by single spaces and appear in increasing order of their endpoints. If S is empty, just print \u201cempty set\u201d and nothing else. \u9996\u5148\u8003\u8651\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u600e\u4e48\u5904\u7406\u5f00\u533a\u95f4\u548c\u95ed\u533a\u95f4\u3002 \u8fd9\u4e2a\u6bd4\u8f83\u7b80\u5355\uff0c\u6211\u4eec\u628a\u6bcf\u4e2a\u70b9\u770b\u4f5c\u4e24\u4e2a\u70b9\uff0c\u5206\u522b\u8868\u793a\u8fd9\u4e2a\u70b9\u4f5c\u4e3a\u5f00/\u95ed\u533a\u95f4\u7aef\u70b9\u7684\u60c5\u51b5\u3002 \u7136\u540e\u8fd9\u6837\u5c31\u5f88\u65b9\u4fbf\u4fee\u6539\u3002 \u6bd4\u5982 \\((1, 3]\\) \u5c31\u62c6\u6210 \\((1), [2], (2), [3]\\) \u5c31\u884c\u4e86\u3002 \u8f6c\u5316\u56de\u6765\u7684\u8bdd\uff0c\u4f60\u53d1\u73b0\u5f00\u533a\u95f4\u4e00\u5b9a\u662f\u5947\u6570\uff0c\u95ed\u533a\u95f4\u4e00\u5b9a\u662f\u5076\u6570\uff0c\u7136\u540e\u5c31\u884c\u4e86\u3002 \u4e8e\u662f\u73b0\u5728\u8981\u505a\u7684\u5c31\u662f\u770b\u8fd9\u4e2a\u64cd\u4f5c\u600e\u4e48\u8f6c\u5316\u6210\u6bd4\u8f83\u65b9\u4fbf\u64cd\u4f5c\u7684\u8bed\u8a00\u3002 \u5176\u5b9e\u5c31\u662f\u7ef4\u62a4\u4e00\u5806 0/1\uff0c\u7136\u540e\u8981\u652f\u6301\u4e00\u5b9a\u7684\u533a\u95f4\u7ffb\u8f6c\u548c\u533a\u95f4\u5f02\u6216\u64cd\u4f5c\uff0c\u53ea\u4e0d\u8fc7\u7ef4\u62a4\u7684\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u53ea\u7ef4\u62a4\u4e24\u4e2a tag\uff0c\u6700\u540e\u518d\u66b4\u529b\u5904\u7406\uff0c\u6bd5\u7adf\u53ea\u6709 0/1 \u561b\u3002 U : \u628a\u533a\u95f4 \\([l,r]\\) \u8986\u76d6\u6210 \\(1\\) I : \u628a \\([-\\infty,l), (r,\\infty]\\) \u8986\u76d6\u6210 \\(0\\) D : \u628a\u533a\u95f4 \\([l,r]\\) \u8986\u76d6\u6210 \\(0\\) C : \u628a \\([-\\infty,l), (r,\u221e]\\) \u8986\u76d6\u6210 \\(0\\) , \u4e14 \\([l,r]\\) \u533a\u95f4\u6574\u4f53\u5f02\u6216 \\(1\\) S : \\([l,r]\\) \u533a\u95f4\u6574\u4f53\u5f02\u6216 \\(1\\) Cover \u64cd\u4f5c\u662f Trivial \u7684\uff0cXor \u53ea\u9700\u8981\u5206\u5272\u533a\u95f4\u7136\u540e\u5728\u533a\u95f4\u4e0a\u9762\u6253\u4e00\u4e2a\u6807\u8bb0\u3002 \u6ce8\u610f Xor \u4e0d\u80fd\u8986\u76d6 Cover \u53ea\u80fd\u628a Xor \u6253\u5230 Cover \u8eab\u4e0a\uff0cCover \u53ef\u4ee5\u8986\u76d6 Xor\uff0c\u5c31\u662f\u4e00\u4e2a\u4f18\u5148\u7ea7\u7684\u95ee\u9898\u3002 \u55ef\u55ef\uff0c\u7136\u540e\u505a\u5b8c\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 // \u8fd9\u4e2a\u6ca1\u8c03\u5b8c // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; // using i64 = long long; const int si = 2e5 + 10 ; bool vis [ si << 2 ]; class SegTree { private : struct Node { int l , r ; int set , Xor ; } t [ si << 2 ]; inline void pushdown ( int p ) { if ( t [ p ]. set != -1 ) { t [ p << 1 ]. set = t [ p << 1 | 1 ]. set = t [ p ]. set ; t [ p << 1 ]. Xor = t [ p << 1 | 1 ]. Xor = 0 ; t [ p ]. set = -1 ; } if ( t [ p ]. Xor ) { if ( t [ p << 1 ]. set != -1 ) t [ p << 1 ]. set ^= 1 ; else t [ p << 1 ]. Xor ^= 1 ; if ( t [ p << 1 | 1 ]. set != -1 ) t [ p << 1 | 1 ]. set ^= 1 ; else t [ p << 1 | 1 ]. Xor ^= 1 ; t [ p ]. Xor = 0 ; } } public : void init () { t [ 1 ]. set = t [ 1 ]. Xor = 0 ; } void build ( int p , int l , int r ) { t [ p ]. l = l , t [ p ]. r = r , t [ p ]. set = -1 , t [ p ]. Xor = 0 ; if ( l == r ) return ; int mid = ( l + r ) >> 1 ; build ( p << 1 , l , mid ), build ( p << 1 | 1 , mid + 1 , r ); } void change ( int p , int l , int r , char op ) { int nl = t [ p ]. l , nr = t [ p ]. r ; if ( l <= nl && nr <= r ) { if ( op == 'U' ) t [ p ]. set = 1 , t [ p ]. Xor = 0 ; if ( op == 'D' ) t [ p ]. set = 0 , t [ p ]. Xor = 0 ; if ( op == 'C' || op == 'S' ) { if ( t [ p ]. set != -1 ) t [ p ]. set ^= 1 ; else t [ p ]. Xor ^= 1 ; } return ; } pushdown ( p ); int mid = ( nl + nr ) >> 1 ; if ( l <= mid ) change ( p << 1 , l , r , op ); else t [ p << 1 ]. Xor = t [ p << 1 ]. set = 0 ; if ( r > mid ) change ( p << 1 | 1 , l , r , op ); else t [ p << 1 | 1 ]. Xor = t [ p << 1 | 1 ]. set = 0 ; } void query ( int p , int l , int r ) { if ( t [ p ]. set == 1 ) { for ( int i = l ; i <= r ; ++ i ) vis [ i ] = true ; return ; } if ( t [ p ]. set == 0 || l == r ) return ; pushdown ( p ), query ( p << 1 , l , r ), query ( p << 1 | 1 , l , r ); } } tr ; int main () { // cin.tie(0) -> sync_with_stdio(false); // cin.exceptions(cin.failbit | cin.badbit); #ifndef ONLINE_JUDGE freopen ( \"input_f.txt\" , \"r\" , stdin ); freopen ( \"output_f.txt\" , \"w\" , stdout ); #endif char suzui ; tr . build ( 1 , 1 , si ), tr . init (); while ( scanf ( \"%c\" , & suzui ) != EOF ) { char cl , cr ; int l , r ; scanf ( \" %c%d,%d%c \\n \" , & cl , & l , & r , & cr ); l *= 2 , r *= 2 ; if ( cl == '(' ) l ++ ; if ( cr == ')' ) r -- ; tr . change ( 1 , l , r , suzui ); } tr . query ( 1 , 1 , si ); int f = 0 , s = -1 , e ; for ( int i = 1 ; i <= si ; ++ i ) { if ( vis [ i ]) { if ( s == -1 ) s = i ; e = i ; } else if ( s != -1 ) { if ( f ) putchar ( ' ' ); f = 1 ; char cl = ( s & 1 ) ? '(' : '[' , cr = ( e & 1 ) ? ')' : ']' ; printf ( \"%c%d,%c%d \\n \" , cl , s / 2 , ( e + 1 ) / 2 , cr ), s = -1 ; } } if ( ! f ) puts ( \"empty set\" ); return 0 ; }","title":"F - Help with Intervals"},{"location":"rec/tricks-for-2022-02/","text":"\u4e8c\u6708 Tricks \u6574\u7406 \u03c8(\uff40\u2207\u00b4)\u03c8 Acwing97 \u7ea6\u6570\u4e4b\u548c \u03c8(\uff40\u2207\u00b4)\u03c8 \u6c42 \\(A^B\\) \u7684\u7ea6\u6570\u4e4b\u548c\uff0c\u8981\u53d6\u6a21\u3002 \u628a \\(A\\) \u5206\u89e3\u8d28\u56e0\u6570\uff0c\u7136\u540e\u6307\u6570\u4e58\u4e0a \\(B\\) \u53ef\u4ee5\u5f97\u5230\u4ee5\u4e0b\u5f0f\u5b50\uff1a \\(sum=(1+p_1+p_1^2+p_1^3+\\dots+p_1^{B\\times c_1})\\times(1+p_2+p_2^2+p_2^3+\\dots+p_2^{B\\times c_2})\\times\\dots \\times (1+p_n+p_n^2+p_n^3+\\dots+p_n^{B\\times c_n})\\) \\(p_i\\) \u8868\u793a \\(A\\) \u7684\u7b2c \\(i\\) \u4e2a\u8d28\u56e0\u5b50\uff0c \\(c_i\\) \u8868\u793a \\(p_i\\) \u5934\u4e0a\u7684\u6307\u6570\u3002 \u6bcf\u4e00\u4e2a\u5c0f\u62ec\u53f7\u91cc\u9762\u53ef\u4ee5\u7528\u7b49\u6bd4\u6570\u5217\u6c42\u548c\uff0c\u4f46\u662f\u53d6\u6a21\uff08\u53ea\uff09\u5bf9\u4e8e\u9664\u6cd5\u6ca1\u6709\u5206\u914d\u5f8b\uff0c\u5206\u5b50\u5206\u6bcd\u4e0d\u80fd\u5206\u5f00\u53d6\u6a21\u7136\u540e\u9664\u3002 \u6240\u4ee5\u8003\u8651\u7528\u5206\u6cbb\u6cd5\u6c42\u6bcf\u4e2a\u5c0f\u62ec\u53f7\u91cc\u7684\u5185\u5bb9\u7136\u540e\u76f8\u4e58\u53d6\u6a21\u3002 \u628a\u6bcf\u4e2a\u5f0f\u5b50\u4ece\u4e2d\u95f4\u62c6\u5f00\uff0c\u7136\u540e\u628a\u540e\u9762\u5927\u4e00\u70b9\u7684\u5f0f\u5b50\u63d0\u53d6\u4e00\u4e2a\u516c\u56e0\u6570\u51fa\u6765\u4f7f\u5f97\u5b83\u548c\u524d\u9762\u7684\u5f0f\u5b50\u4e00\u6837\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5199\u6210\u9012\u5f52\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 /* * @Author: black_trees * @Date: 2022-01-29 10:12:50 * @Last Modified by: black_trees * @Last Modified time: 2022-01-29 10:20:59 */ #include <bits/stdc++.h> using namespace std ; #define int long long const int mod = 9901 ; const int N = 5e6 + 7 ; int a , b , q [ N ], f [ N ], ans , tot , cnt ; inline int qpow ( int a , int b , int p ){ int res = 1 % p ; for (; b ; b >>= 1 ){ if ( b & 1 ) res = res * a % p ; a = a * a % p ; } return res ; } inline void split (){ for ( register int i = 2 ; i * i <= a ; i ++ ){ if ( a % i == 0 ){ q [ ++ cnt ] = i ; while ( a % i == 0 ) f [ cnt ] ++ , a /= i ; } } if ( a > 1 ) q [ ++ cnt ] = a , f [ cnt ] ++ ; } inline void solve (){ if ( a == 0 ){ puts ( \"0\" ); return ; } if ( b == 0 ){ puts ( \"1\" ); return ; } split (), ans = 1 ; for ( register int i = 1 ; i <= cnt ; i ++ ){ if (( q [ i ] -1 ) % mod == 0 ){ ans = ( ans * ( b * f [ i ] + 1 ) % mod ) % mod ; continue ; } int x = qpow ( q [ i ], b * f [ i ] + 1 , mod ); x = ( x -1 + mod ) % mod ; int y = qpow ( q [ i ] -1 , mod -2 , mod ); ans = ( ans * x * y ) % mod ; } printf ( \"%lld\" , ans ); return ; } signed main (){ #ifndef ONLINE_JUDGE freopen ( \"Input.txt\" , \"r\" , stdin ); freopen ( \"Output.txt\" , \"w\" , stdout ); #endif cin >> a >> b ; return solve (), 0 ; } Tricks \u53d6\u6a21\u65f6\u53ef\u4ee5\u5229\u7528\u5206\u6cbb\u6cd5\u5bf9\u7b49\u6bd4\u6570\u5217\u6c42\u548c\u3002 1 Tag : \u5206\u6cbb / \u7b49\u6bd4\u6570\u5217 Acwing11 \u80cc\u5305\u95ee\u9898\u6c42\u65b9\u6848\u6570 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6c42\u65b9\u6848\u6570\uff0c\u5148\u80cc\u5305\uff0c\u7136\u540e dp \u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e2a \\(g\\) \u6570\u7ec4\uff0c\u8868\u793a\u4f7f\u7528\u4e0d\u8d85\u8fc7\u5f53\u524d\u7684\u7a7a\u95f4\u7684\u65b9\u6848\u6709\u591a\u5c11\u79cd\u3002 \u6839\u636e \\(f\\) \u8f6c\u79fb\u7684\u4e24\u79cd\u60c5\u51b5\u5206\u5f00\u8ba8\u8bba\u5c31\u884c\u3002 \u4e0d\u77e5\u9053\u4e3a\u5565\uff0c\u6211\u5199\u4e2a \\(tmp\\) \u5b58 \\(f\\) \u6ca1\u8f6c\u79fb\u7684 \\(val\\) \u662f\u9519\u7684\u3002 \u4f46\u662f\u5148\u6bd4\u8f83\uff0c\u8bb0\u5f55 \\(g\\) \u4e4b\u540e\u518d\u66f4\u65b0 \\(f\\) \u5c31\u662f\u5bf9\u7684\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 /* * @Author: black_trees * @Date: 2022-02-02 16:02:50 * @Last Modified by: black_trees * @Last Modified time: 2022-02-02 17:18:10 */ #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int si = 1e3 + 10 ; constexpr int p = 1e9 + 7 ; int n , m ; int v [ si ], w [ si ]; int f [ si ], g [ si ]; signed main (){ #ifndef ONLINE_JUDGE freopen ( \"Input.txt\" , \"r\" , stdin ); freopen ( \"Output.txt\" , \"w\" , stdout ); #endif scanf ( \"%lld%lld\" , & n , & m ); for ( register int i = 1 ; i <= n ; ++ i ){ scanf ( \"%lld%lld\" , & v [ i ], & w [ i ]); } for ( register int i = 0 ; i <= m ; ++ i ){ g [ i ] = 1 ; } for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = m ; j >= v [ i ]; -- j ){ int tmp = f [ j - v [ i ]] + w [ i ]; if ( tmp > f [ j ]) f [ j ] = tmp , g [ j ] = g [ j - v [ i ]]; else if ( tmp == f [ j ]) g [ j ] = ( g [ j ] + g [ j - v [ i ]]) % p ; } } return printf ( \"%lld \\n \" , g [ m ] % p ), 0 ; } Trick DP \u7c7b\u95ee\u9898\u6c42\u65b9\u6848\u6570\u65f6\uff0c\u9700\u8981\u5728\u8f6c\u79fb\u6210\u529f\u7684\u65f6\u5019\u8bb0\u5f55\u65b9\u6848\u3002 \u540c\u65f6\u9700\u8981\u5728\u5f53\u524d\u72b6\u6001\u548c\u8f6c\u79fb\u8fc7\u6765\u7684\u72b6\u6001\u7684 DP \u503c\u76f8\u7b49\u65f6\uff0c\u5c06\u4e24\u4e2a\u7684\u65b9\u6848\u7d2f\u52a0\u3002 1 Tag : \u80cc\u5305 / \u65b9\u6848\u6570 Acwing529 [NOIP2017] \u5b9d\u85cf \u03c8(\uff40\u2207\u00b4)\u03c8 \u53d1\u73b0\u672c\u9898\u7684\u8981\u6c42\u5c31\u662f\u6c42\u51fa\u4e00\u9897\u751f\u6210\u6811\uff0c\u4f7f\u5f97\u6309\u7167\u8981\u6c42\u5f97\u5230\u7684\u6743\u503c\u548c\u6700\u5c0f\u3002 \u5e76\u4e14\uff0c\u9898\u76ee\u4e2d\u8981\u6c42\u7684\u201c\u4ece\u6700\u521d\u7684\u5b9d\u85cf\u5c4b\u5230\u5f53\u524d\u9053\u8def\u7684\u8d77\u70b9\u7ecf\u8fc7\u7684\u5b9d\u85cf\u5c4b\u4e2a\u6570\u201d\uff0c\u5c31\u662f\u4ee5\u6700\u521d\u7684\u5b9d\u85cf\u5c4b\u4e3aroot\uff0c\u5230\u5f53\u524d\u9053\u8def\u8d77\u70b9\u7684\u6df1\u5ea6\u3002 \u8bbe \\(f[i,msk]\\) \u8868\u793a\u96c6\u5408\uff1a\u5f53\u524d\u6253\u901a\u7684\u6700\u5927\u6df1\u5ea6\u4e3a \\(i\\) \uff0c\u6253\u901a\u4e86\u72b6\u6001\u4e3a \\(msk\\) \u7684\u5b9d\u85cf\u5c4b\u7684\u6240\u6709\u65b9\u6848\u3002\u5c5e\u6027\u4e3a\u6743\u503c\u548c\u7684 Min\u3002 \u90a3\u4e48\u8003\u8651\u679a\u4e3e \u4e0a\u4e00\u5c42 \uff08\u6309\u7167\u201c\u6700\u540e\u201d\u8fdb\u884c\u96c6\u5408\u5212\u5206\uff09\u7684\u72b6\u6001 \\(qwq\\) \uff0c \u90a3\u4e48\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u8f6c\u79fb\u65b9\u7a0b\uff1a \\(f_{i,msk}=\\min\\{f_{i,msk},f_{i-1,qwq}+(i-1)\\times cost(qwq,msk)\\}\\) \u5176\u4e2d \\(cost(qwq,msk)\\) \u8868\u793a\u4ece \\(qwq\\) \u8f6c\u79fb\u5230 \\(msk\\) \u589e\u52a0\u7684\u9053\u8def\u957f\u5ea6\u7684\u6700\u5c0f\u503c\u3002 \u4f46\u662f\u8fd9\u91cc\u8981\u6c42\u53ea\u80fd\u6269\u5c55\u4e00\u5c42\uff0c\u6240\u4ee5\u8fd8\u8981\u5224 \\(qwq\\) \u662f\u5426\u80fd\u53ea\u901a\u8fc7\u4e00\u5c42\u6269\u5c55\u5f97\u5230 \\(msk\\) \u3002 \u5177\u4f53\u600e\u4e48\u5224\u5b9a\uff1f \\(qwq\\) \u4e00\u5b9a\u8981\u662f \\(msk\\) \u7684\u5b50\u96c6\u3002 \\(msk\\) \u5f53\u4e2d\u7684\u6240\u6709\u5143\u7d20\u4e00\u5b9a\u5904\u4e8e\u96c6\u5408 \\(S_{qwq}\\) \uff0c\u5176\u4e2d \\(S_{qwq}\\) \u8868\u793a \\(qwq\\) \u5f80\u4e0b\u6269\u5c55\u4e00\u5c42\u4e4b\u540e\u6240\u7684\u5230\u7684\u6240\u6709\u65b0\u8282\u70b9\u548c \\(qwq\\) \u672c\u8eab\u7ec4\u6210\u7684\u96c6\u5408\u3002 \u8fd9\u4e2a\u53ef\u4ee5\u9884\u5904\u7406\u505a\u3002 \u7136\u540e\u8003\u8651\u5982\u4f55\u5904\u7406 \\(cost\\) \u3002 \u5f53\u9884\u5904\u7406\u51fa\u6240\u6709\u7684\u53ef\u884c\u72b6\u6001\u7684\u5bf9\u4e4b\u540e\uff0c\u6211\u4eec\u8bb0 \\(r(msk,i)\\) \u8868\u793a\u4ece\u72b6\u6001 \\(msk\\) \u6240\u6709\u7684\u7684\u8282\u70b9\u51fa\u53d1\uff0c\u6269\u5c55\u5230\u8282\u70b9 \\(i\\) \u7684\u6700\u77ed\u8def\u3002 \u8fd9\u4e2a\u53ef\u4ee5\u5728\u5904\u7406\u53ef\u884c\u72b6\u6001\u7684\u65f6\u5019\u8f6c\u79fb\u51fa\u6765\u3002 \u7136\u540e\u8003\u8651\u679a\u4e3e\u6240\u6709\u53ef\u884c\u5bf9\u7684\u72b6\u6001\u4e4b\u95f4\u7684\u5dee\u5f02\uff0c\u6bd4\u5982\u5f53\u524d\u662f \\(i,j\\) \u8fd9\u4e24\u4e2a\u72b6\u6001\uff0c\u53ea\u9700\u8981\u679a\u4e3e\u4ed6\u4eec\u4e4b\u524d\u7684\u5dee\u5f02\uff0c\u7136\u540e\u5bf9\u76f8\u5e94\u7684 \\(r\\) \u6c42\u548c\u5373\u53ef\u3002 \u90a3\u4e48\u5c31\u53ef\u4ee5\u8fdb\u884c\u8f6c\u79fb\u4e86\uff0c\u521d\u59cb\u5316\u8ba9\u6bcf\u4e2a\u8282\u70b9\u5206\u522b\u4e3a\u6839\uff0c\u8ba9\u5bf9\u5e94\u72b6\u6001\u7684\u6743\u503c\u4e3a \\(0\\) \uff0c\u5176\u4ed6\u7684\u8d4b\u503c\u4e3a \\(+\\infty\\) \u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 /* * @Author: black_trees <black_trees@foxmail.com> * @Date: 2022-02-08 10:59:15 * @Last Modified by: black_trees <black_trees@foxmail.com> * @Last Modified time: 2022-02-08 11:21:12 */ #include <bits/stdc++.h> using namespace std ; constexpr int inf = 0x3f3f3f3f ; constexpr int si = 15 ; constexpr int stasi = 1 << 13 ; int n , m ; int a [ si ][ si ]; int f [ si ][ stasi ]; int all [ stasi ], road [ stasi ][ si ]; std :: vector < int > valid [ stasi ], cost [ stasi ]; int main (){ scanf ( \"%d%d\" , & n , & m ), memset ( a , 0x3f , sizeof a ); for ( register int i = 1 ; i <= m ; ++ i ){ int u , v , w ; scanf ( \"%d%d%d\" , & u , & v , & w ); a [ u ][ v ] = a [ v ][ u ] = min ( a [ u ][ v ], w ); } memset ( road , 0x3f , sizeof road ); for ( register int msk = 0 ; msk < ( 1 << n ); ++ msk ){ all [ msk ] = msk ; for ( register int i = 1 ; i <= n ; ++ i ){ if ( msk >> ( i -1 ) & 1 ){ road [ msk ][ i ] = 0 ; for ( register int j = 1 ; j <= n ; ++ j ){ if ( a [ i ][ j ] == inf ) continue ; all [ msk ] |= 1 << ( j -1 ), road [ msk ][ j ] = min ( road [ msk ][ j ], a [ i ][ j ]); } } } } for ( register int msk = 0 ; msk < ( 1 << n ); ++ msk ){ for ( register int mks = 0 ; mks < msk ; ++ mks ){ if (( msk & mks ) == mks && ( msk & all [ mks ]) == msk ){ valid [ msk ]. push_back ( mks ); int su = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ if (( msk ^ mks ) >> ( i -1 ) & 1 ) su += road [ mks ][ i ]; } cost [ msk ]. push_back ( su ); } } } memset ( f , 0x3f , sizeof f ); for ( register int i = 1 ; i <= n ; ++ i ) f [ 1 ][ 1 << ( i -1 )] = 0 ; int res = f [ 1 ][( 1 << n ) -1 ]; for ( register int i = 2 ; i <= n ; ++ i ){ for ( register int msk = 1 ; msk < ( 1 << n ); ++ msk ){ for ( register int j = 0 ; j < ( int ) valid [ msk ]. size (); ++ j ){ int k = valid [ msk ][ j ]; f [ i ][ msk ] = min ( f [ i ][ msk ], f [ i -1 ][ k ] + ( i -1 ) * cost [ msk ][ j ]); } } res = min ( res , f [ i ][( 1 << n ) -1 ]); } return printf ( \"%d \\n \" , res ), 0 ; } Trick \u5728\u601d\u8003DP\u7c7b\u7684\u95ee\u9898\u65f6\u53ef\u4ee5\u5148\u5217\u51fa\u4e00\u4e2a\u65b9\u7a0b\uff0c\u4e0d\u7ba1\u91cc\u9762\u7684\u67d0\u4e9b\u4e1c\u897f\u600e\u4e48\u6c42\uff0c\u7b49\u786e\u5b9a\u5f0f\u5b50\u662f\u5bf9\u7684\uff08\u65e0\u540e\u6548\u6027\uff09\u4e4b\u540e\u518d\u8003\u8651\u8ba1\u7b97\u8fd9\u4e9b\u4e1c\u897f\u3002\uff08\u9010\u5c42\u601d\u8003\uff09 1 Tag : \u751f\u6210\u6811 / \u72b6\u538bDP Acwing1073 \u6811\u7684\u4e2d\u5fc3 \u03c8(\uff40\u2207\u00b4)\u03c8 \u66b4\u529b\u505a\u5c31\u662f\u6bcf\u4e2a\u70b9 dfs \u7136\u540e\u53d6 max\u3002 \u4f46\u662f\u660e\u663e TLE\uff0c\u6240\u4ee5\u8003\u8651\u6362\u6839DP\u3002 \u7b2c\u4e00\u6b21 dfs \u5904\u7406\u51fa\u4ee5 \\(1\\) \u4e3a\u6839\u7684\u65f6\u5019\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u80fd\u5f80\u4e0b\u8d70\u7684\u8ddd\u79bb\u7684\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u3002\u7136\u540e\u8003\u8651\u5904\u7406\u51fa\u4ece\u6bcf\u4e2a\u8282\u70b9\u5f80\u4e0a\u8d70\u7684\u6700\u5927\u503c\u3002 \u7b2c\u4e8c\u6b21 dfs \u5206\u7c7b\u8ba8\u8bba\u8fdb\u884c\u8f6c\u79fb\u5373\u53ef\u3002 \u7edf\u8ba1\u7684\u65f6\u5019\uff0c\u5982\u679c\u6700\u5927\u503c\u88ab\u66f4\u65b0\uff0c\u90a3\u4e48\u628a\u6b21\u5927\u503c\u66f4\u65b0\u4e3a\u539f\u6765\u7684\u6700\u5927\u503c\u3002 \u53cd\u4e4b\u4ee4\u6b21\u5927\u503c\u548c\u5f53\u524d\u626b\u5230\u7684\u5143\u7d20\u53d6 \\(\\max\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 #include <bits/stdc++.h> using namespace std ; constexpr int si_n = 1e4 + 10 ; constexpr int si_m = si_n << 1 ; int n ; struct node { int head , ver , Next , w ; } e [ si_m ]; int tot = 0 ; inline void add ( int u , int v , int w ){ e [ ++ tot ]. ver = v , e [ tot ]. w = w ; e [ tot ]. Next = e [ u ]. head , e [ u ]. head = tot ; } int d [ si_n ], dis [ si_n ], up [ si_n ]; int s [ si_n ]; inline void dfs1 ( int u , int fa ){ for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( v == fa ) continue ; dfs1 ( v , u ); if ( d [ v ] + w >= d [ u ]) dis [ u ] = d [ u ], d [ u ] = d [ v ] + w , s [ u ] = v ; else if ( d [ v ] + w > dis [ u ]) dis [ u ] = d [ v ] + w ; } } inline void dfs2 ( int u , int fa ){ for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( v == fa ) continue ; if ( s [ u ] == v ) up [ v ] = w + max ( up [ u ], dis [ u ]); else up [ v ] = w + max ( up [ u ], d [ u ]); dfs2 ( v , u ); } } int main (){ scanf ( \"%d\" , & n ); for ( register int i = 1 ; i < n ; ++ i ){ int u , v , w ; scanf ( \"%d%d%d\" , & u , & v , & w ); add ( u , v , w ), add ( v , u , w ); } dfs1 ( 1 , 0 ), dfs2 ( 1 , 0 ); int res = 0x3f3f3f3f ; for ( register int i = 1 ; i <= n ; ++ i ){ res = min ( res , max ( d [ i ], up [ i ])); } return printf ( \"%d \\n \" , res ), 0 ; } Tricks \u6362\u6839 DP \u7684\u65b9\u7a0b\u5982\u679c\u51fa\u73b0 \\(\\max\\) \uff0c\u6362\u6839\u7684\u65f6\u5019\u9700\u8981\u5229\u7528\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u8fdb\u884c\u8f6c\u79fb\u3002 \u53ef\u4ee5\u5229\u7528 std::multiset \uff0c\u4e5f\u53ef\u4ee5\u7528 std::vector \u8bb0\u5f55\u3002 1 Tag : \u6362\u6839DP CF708C Centroids \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e00\u9897\u6811\uff0c\u4f60\u6709\u4e00\u6b21\u5c06\u6811\u6539\u9020\u7684\u673a\u4f1a\uff0c\u6539\u9020\u7684\u610f\u601d\u662f\u5220\u53bb\u4e00\u6761\u8fb9\uff0c\u518d\u52a0\u5165\u4e00\u6761\u8fb9\uff0c\u4fdd\u8bc1\u6539\u9020\u540e\u8fd8\u662f\u4e00\u68f5\u6811\u3002 \u8bf7\u95ee\u6709\u591a\u5c11\u70b9\u53ef\u4ee5\u901a\u8fc7\u6539\u9020\uff0c\u6210\u4e3a\u8fd9\u9897\u6811\u7684\u91cd\u5fc3\uff1f\uff08\u5982\u679c\u4ee5\u67d0\u4e2a\u70b9\u4e3a\u6839\uff0c\u6bcf\u4e2a\u5b50\u6811\u7684\u5927\u5c0f\u90fd\u4e0d\u5927\u4e8e \\(\\dfrac{n}{2}\\) \uff0c\u5219\u79f0\u67d0\u4e2a\u70b9\u4e3a\u91cd\u5fc3\uff09 \u9996\u5148\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9 \\(u\\) \u4e0d\u662f\u91cd\u5fc3\uff0c\u90a3\u4e48\u5b83\u7684\u5b50\u6811\u5f53\u4e2d\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u7684\u5927\u5c0f\u4f1a\u8d85\u51fa \\(\\lfloor \\frac{n}{2} \\rfloor\\) \u3002 \u90a3\u4e48\u6211\u4eec\u6539\u9020\u7684\u65f6\u5019\u5c31\u4e00\u5b9a\u662f\u4ece\u8fd9\u4e2a\u8d85\u51fa \\(\\lfloor \\frac{n}{2} \\rfloor\\) \u7684\u5b50\u6811\u5f53\u4e2d\u627e\u5230\u4e00\u4e2a\u5b50\u6811\uff0c\u4f7f\u5b83\u548c \\(u\\) \u76f8\u8fde\uff0c\u6ee1\u8db3\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u6240\u6709\u5b50\u6811\u90fd\u4e0d\u5927\u4e8e \\(\\lfloor \\frac{n}{2} \\rfloor\\) \u3002 \u5e76\u4e14\u8fd9\u4e2a\u627e\u51fa\u6765\u7684\u5b50\u6811\u5927\u5c0f\u5fc5\u987b\u662f \\(\\le \\lfloor \\frac{n}{2} \\rfloor\\) \u5f53\u4e2d\u6700\u5927\u7684\u4e00\u4e2a\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1 \\(u\\) \u88ab\u6539\u9020\u4e3a\u91cd\u5fc3\u4e4b\u540e\u4e0d\u53ef\u80fd\u51fa\u73b0\u77db\u76fe\u3002 \u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u6c42\u51fa\u6bcf\u4e00\u4e2a\u5b50\u6811\u5f53\u4e2d\u7684\uff0c\u5c0f\u4e8e\u7b49\u4e8e \\(\\lfloor \\frac{n}{2} \\rfloor\\) \u7684\u6700\u5927\u5b50\u6811\u7684\u5927\u5c0f\u5c31\u80fd\u5feb\u901f\u8fdb\u884c\u5224\u65ad\u4e86\u3002 \u5148\u8003\u8651\u4e0d\u6362\u6839\u7684\u60c5\u51b5\u3002 \u8bbe \\(f_{u}\\) \u8868\u793a \\(u\\) \u7684\u5b50\u6811\u5f53\u4e2d\u7684\uff0c\u5c0f\u4e8e\u7b49\u4e8e \\(\\lfloor \\frac{n}{2} \\rfloor\\) \u7684\u6700\u5927\u5b50\u6811\u7684\u5927\u5c0f\u3002 \u90a3\u4e48\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5f97\u5230\u8f6c\u79fb\u65b9\u7a0b\uff1a \\(f_{u}=\\begin{cases} \\max\\{siz_v\\} & siz_v \\le \\lfloor \\frac{n}{2} \\rfloor\\\\ \\max\\{f_{v}\\} & \\text{otherwise.} \\end{cases}\\) \u8003\u8651\u6362\u6839\uff0c\u53d1\u73b0\u65b9\u7a0b\u5f53\u4e2d\u6709\u51fa\u73b0 \\(\\max\\) \uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8bb0\u5f55 \\(f\\) \u7684\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u3002 \u8fd9\u4e2a\u65b9\u7a0b\u6bd4\u8f83\u5957\u8def\uff0c\u5c31\u662f\u5728\u539f\u6765\u7684 \\(f\\) \u7684\u57fa\u7840\u4e0a\u548c \\(n-siz_u\\) \u53d6 \\(\\max\\) \uff0c\u7136\u540e\u6ce8\u610f\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u7684\u8ba8\u8bba\u5c31\u53ef\u4ee5\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 #include <bits/stdc++.h> using namespace std ; constexpr int si = 1e6 + 10 ; constexpr int inf = 0x3f3f3f3f ; int t , n ; int dp [ si ][ 2 ], pos [ si ]; int dpp [ si ], ans [ si ]; int siz [ si ], maxsiz [ si ]; struct edge { int to , Next ; } e [ si << 1 ]; int head [ si << 1 ]; int tot = 0 ; inline void add ( int u , int v ){ e [ ++ tot ]. to = v , e [ tot ]. Next = head [ u ]; head [ u ] = tot ; } inline void dfs1 ( int u , int fa ){ siz [ u ] = 1 ; for ( register int i = head [ u ]; i ; i = e [ i ]. Next ){ if ( e [ i ]. to == fa ) continue ; dfs1 ( e [ i ]. to , u ); int v ; siz [ u ] += siz [ e [ i ]. to ]; if ( siz [ e [ i ]. to ] > siz [ maxsiz [ u ]]) maxsiz [ u ] = e [ i ]. to ; if ( siz [ e [ i ]. to ] <= n / 2 ) v = siz [ e [ i ]. to ]; else v = dp [ e [ i ]. to ][ 0 ]; if ( dp [ u ][ 0 ] < v ) dp [ u ][ 1 ] = dp [ u ][ 0 ], dp [ u ][ 0 ] = v , pos [ u ] = e [ i ]. to ; else if ( dp [ u ][ 1 ] < v ) dp [ u ][ 1 ] = v ; } } inline void dfs2 ( int u , int fa ){ ans [ u ] = 1 ; if ( siz [ maxsiz [ u ]] > n / 2 ) ans [ u ] = ( siz [ maxsiz [ u ]] - dp [ maxsiz [ u ]][ 0 ] <= n / 2 ); else if ( n - siz [ u ] > n / 2 ) ans [ u ] = ( n - siz [ u ] - dpp [ u ] <= n / 2 ); for ( register int i = head [ u ]; i ; i = e [ i ]. Next ){ if ( e [ i ]. to == fa ) continue ; int v ; if ( n - siz [ u ] > n / 2 ) v = dpp [ u ]; else v = n - siz [ u ]; dpp [ e [ i ]. to ] = max ( dpp [ e [ i ]. to ], v ); if ( pos [ u ] == e [ i ]. to ) dpp [ e [ i ]. to ] = max ( dpp [ e [ i ]. to ], dp [ u ][ 1 ]); else dpp [ e [ i ]. to ] = max ( dpp [ e [ i ]. to ], dp [ u ][ 0 ]); dfs2 ( e [ i ]. to , u ); } } signed main (){ scanf ( \"%d\" , & n ); for ( register int i = 1 ; i < n ; i ++ ){ int u , v ; scanf ( \"%d%d\" , & u , & v ); add ( u , v ), add ( v , u ); } dfs1 ( 1 , 0 ), dfs2 ( 1 , 0 ); for ( register int i = 1 ; i <= n ; i ++ ){ printf ( \"%d \" , ans [ i ]); } return 0 ; } Trick \u5148\u8003\u8651\u6709\u6839\u7684\u60c5\u51b5\u5217\u51fa\u65b9\u7a0b\uff0c\u7136\u540e\u518d\u4ece\u6362\u6839\u7684\u89d2\u5ea6\u7406\u89e3\u3002 1 Tag : \u6362\u6839DP Acwing340 \u901a\u4fe1\u7ebf\u8def \u03c8(\uff40\u2207\u00b4)\u03c8 \u53ef\u4ee5\u5c06\u56fe\u4e2d\u67d0\u6761 \\(1\\to n\\) \u7684\u8def\u5f84\u4e0a\u7684 \\(K\\) \u4e2a\u8fb9\u6743\u8bbe\u7f6e\u4e3a \\(0\\) \u3002 \u5b9a\u4e49\u8fd9\u6761\u8def\u5f84\u7684\u82b1\u8d39\u4e3a\u8bbe\u7f6e\u540e\u8def\u5f84\u4e0a\u6240\u6709\u8fb9\u6743\u7684\u6700\u5927\u503c\u3002 \u6c42\u82b1\u8d39\u6700\u5c0f\u503c\u3002 \u53ef\u4ee5\u5206\u5c42\u56fe\u6700\u77ed\u8def\u3002 \u8bbe \\(dis[x,p]\\) \u8868\u793a\u4ece \\(1\\) \u5230 \\(x\\) \uff0c\u5df2\u7ecf\u7528\u4e86 \\(p\\) \u6761\u514d\u8d39\u673a\u4f1a\u7684\u6700\u5c0f\u82b1\u8d39\u3002 \u90a3\u4e48\u8003\u8651\u4e00\u4e2a\u201c\u5e7f\u4e49\u201d\u7684\u6700\u77ed\u8def\uff0c\u5c06\u6bcf\u4e2a\u8282\u70b9\u90fd\u62c6\u6210 \\(K + 1\\) \u4e2a\uff08 \\((x,0),(x,1),\\dots,(x,K)\\) \uff09 \u540c\u5c42\u4e4b\u95f4\u76f4\u63a5\u8fde\u539f\u6765\u7684\u8fb9\u6743\uff0c\u7136\u540e\u8fd9\u4e00\u5c42\u548c\u4e0b\u4e00\u5c42\u8fde\u8fb9\u5c31\u5c06\u8fb9\u6743\u8bbe\u7f6e\u4e3a \\(0\\) \u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u5bf9\u4e8e \\((u,v)\\) \u8fd9\u6761\u539f\u56fe\u4e2d\u7684\u8fb9\uff0c\u8fde\u63a5 \\((u,k),(v,k)\\) \uff0c\u8fb9\u6743\u4e3a \\(w(u,v)\\) \u3002 \u7136\u540e\u8fde\u63a5 \\((u,k),(v,k + 1)\\) \uff0c\u8868\u793a\u8fd9\u6761\u7ebf\u8def\u4f7f\u7528\u514d\u8d39\u673a\u4f1a\uff0c\u6240\u4ee5\u8fb9\u6743\u4e3a \\(0\\) \u3002 \u5728\u8fd9\u5f20\u56fe\u4e0a\u8dd1\u4e00\u4e2a\u6700\u77ed\u8def\uff0c\u6700\u540e\u7b54\u6848\u5728 \\(dis[n][i]\\) \u4e2d\u53d6 \\(\\min\\) \u5373\u53ef\u3002 \u5b9e\u9645\u4e0a\u5c31\u662f\u5229\u7528 SPFA DP\u3002 \u6216\u8005\u5229\u7528 \\(01\\) \u4e8c\u5206\uff0c\u6bcf\u6b21\u628a\u4e0d\u8d85\u8fc7 \\(mid\\) \u7684\u8bbe\u7f6e\u4e3a \\(0\\) \uff0c\u5176\u5b83\u4e3a \\(1\\) \u3002 \u7136\u540e\u5229\u7528 dijkstra Check \\(dis[n]\\) \u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e \\(K\\) \u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <bits/stdc++.h> using namespace std ; constexpr int si = 11010 ; constexpr int si_e = si << 1 ; int n , p , k ; int tot = 0 , dis [ si ]; bool vis [ si ]; struct edge { int head , next , ver , w ; } e [ si_e ]; inline void add ( int u , int v , int w ){ e [ ++ tot ]. ver = v , e [ tot ]. next = e [ u ]. head , e [ u ]. head = tot , e [ tot ]. w = w ; } std :: priority_queue < pair < int , int >> q ; inline bool dijkstra ( int limit ){ memset ( dis , 0x3f , sizeof dis ), memset ( vis , false , sizeof vis ); dis [ 1 ] = 0 , q . push ({ dis [ 1 ], 1 }); while ( ! q . empty ()){ int u = q . top (). second ; q . pop (); if ( vis [ u ]) continue ; vis [ u ] = true ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. next ){ int v = e [ i ]. ver , w = e [ i ]. w > limit ? 1 : 0 ; if ( dis [ v ] > dis [ u ] + w ) dis [ v ] = dis [ u ] + w , q . push ({ - dis [ v ], v }); } } return dis [ n ] <= k ; } int main (){ cin >> n >> p >> k ; for ( register int i = 1 , u , v , w ; i <= p ; ++ i ) cin >> u >> v >> w , add ( u , v , w ), add ( v , u , w ); int l = 0 , r = 1e6 + 1 ; while ( l < r ){ int mid = ( l + r ) >> 1 ; if ( dijkstra ( mid )) r = mid ; else l = mid + 1 ; } if ( r == 1e6 + 1 ) return puts ( \"-1\" ), 0 ; return printf ( \"%d \\n \" , r ), 0 ; } Tricks \u628a\u6700\u4f18\u95ee\u9898\u8f6c\u5316\u6210\u5224\u5b9a\u95ee\u9898\u65f6\uff0c\u53ef\u4ee5\u8003\u8651\u5229\u7528 01 \u4e8c\u5206\u7684\u601d\u60f3\u66f4\u65b9\u4fbf\u7684 Check\u3002 \u5728\u65e0\u5411\u56fe\u4e0a DP \u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u8f6c\u79fb\u53ef\u80fd\u6709\u540e\u6548\u6027\uff0c\u6240\u4ee5\u53ef\u4ee5\u501f\u52a9 SPFA \u8fdb\u884c DP\u3002 \u6b64\u5904\u4f1a\u6709\u540e\u6548\u6027\u7684\u539f\u56e0\u6709\u4e24\u4e2a\uff1a 1. \u9636\u6bb5\u5e76\u4e0d\u662f\u8282\u70b9\u7684\u7f16\u53f7\u987a\u5e8f\u3002 2. \u56e0\u4e3a\u662f\u65e0\u5411\u56fe\uff0c\u65e0\u6cd5\u50cf DAG \u90a3\u6837\u5f88\u597d\u7684\u8fdb\u884c\u65e0\u540e\u6548\u6027\u7684 DP \u8f6c\u79fb\u3002 \u53ef\u4ee5\u628a\u56fe\u4e0a\u7684\u8282\u70b9\u6839\u636e\u4e0d\u540c\u7684\u60c5\u51b5\u62c6\u6210\u591a\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u5728\u65b0\u56fe\u4e0a\u6839\u636e\u6761\u4ef6\u8fde\u8fb9\uff0c\u95ee\u9898\u5c31\u53ef\u4ee5\u88ab\u8f6c\u5316\u4e3a\u6700\u666e\u901a\u7684 SSSP\u3002 1 Tag : SPFA / 01 \u4e8c\u5206 / \u5206\u5c42\u56fe Acwing1148 \u79d8\u5bc6\u7684\u725b\u5976\u8fd0\u8f93 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6c42\u65e0\u5411\u8054\u901a\u5e26\u6743\u56fe \\(G\\) \u7684\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u3002 \u9996\u5148\u8003\u8651\u975e\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u600e\u4e48\u505a\u3002 \u5148\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7136\u540e\u679a\u4e3e\u6bcf\u4e00\u6761\u975e\u6811\u8fb9 \\((u,v)\\) \uff0c\u628a\u8fd9\u6761\u975e\u6811\u8fb9\u52a0\u5165\u5230\u6700\u5c0f\u751f\u6210\u6811\u5f53\u4e2d\u3002 \u8fd9\u65f6\u5019\u5fc5\u7136\u4f1a\u51fa\u73b0\u4e00\u4e2a\u73af\uff0c\u6240\u4ee5\u628a\u8fd9\u4e2a\u73af\u4e0a\u9664\u53bb \\(w(u,v)\\) \u7684\u6700\u5927\u503c\u5220\u53bb\u5c31\u53ef\u4ee5\u4e86\u3002 \u660e\u663e\u7684\uff0c\u8fd9\u4e2a\u73af\u4e0a\u7684\u6700\u5927\u503c\u5c31\u662f MST \u5f53\u4e2d \\(u \\to v\\) \u7684\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\u3002 \u53ef\u4ee5\u5728 MST \u4e0a\u7528\u500d\u589e\u6c42 LCA\uff0c\u7136\u540e\u8bb0\u5f55 \\(u\\) \u5230\u5b83\u7684 \\(2^i\\) \u7ea7\u7956\u5148\u8def\u5f84\u4e0a\u7684\u8fb9\u6743\u7684\u4e25\u683c\u6700\u5927\u503c\u3002 \u8fd9\u4e2a\u7c7b\u4f3c \\(f\\) \u6570\u7ec4\u7684\u8bb0\u5f55\uff0c\u521d\u59cb\u5316 \\(w[u][0] = w(u,fa)\\) \uff0c\u7136\u540e\u500d\u589e\u8bb0\u5f55\u3002 \u67e5\u8be2 MST \u4e0a \\((u,v)\\) \u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\u65f6\uff0c\u5206\u522b\u8be2\u95ee \\((u,lca),(v,lca)\\) \u8def\u5f84\u4e0a\u7684\u4e25\u683c\u6700\u5927\u503c\u5373\u53ef\u3002 \u7b54\u6848\u5c31\u662f\u679a\u4e3e\u5b8c\u6240\u6709\u975e\u6811\u8fb9\u88ab\u52a0\u5165\u7684\u60c5\u51b5\u7684\u6700\u5c0f\u503c\u3002 \u7136\u540e\u53d1\u73b0\u8fd9\u91cc\u548c\u4e25\u683c\u6b21\u5c0f\u552f\u4e00\u7684\u533a\u522b\u5c31\u662f\u53ef\u80fd\u52a0\u5165\u7684\u8fb9\u7b49\u4e8e\u88ab\u5220\u9664\u7684\u8fb9\u7684\u6743\u503c\u3002 \u6240\u4ee5\u7528\u7c7b\u4f3c\u6362\u6839 DP \u91cc\u7684 trick\u3002 \u8bb0\u5f55\u6700\u5927\u503c\u7684\u540c\u65f6\u8bb0\u5f55\u6b21\u5927\u503c\uff0c\u5982\u679c\u6700\u5927\u503c\u7b49\u4e8e\u88ab\u52a0\u5165\u7684\u975e\u6811\u8fb9\u7684\u6743\u503c\uff0c\u4f7f\u7528\u6b21\u5927\u503c\u4ee3\u66ff\u6700\u5927\u503c\u66f4\u65b0\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 #include <algorithm> #include <iostream> const int INF = 0x3fffffff ; const long long INF64 = 0x3fffffffffffffffLL ; struct Edge { int u , v , val ; bool operator < ( const Edge & other ) const { return val < other . val ; } }; Edge e [ 300010 ]; bool used [ 300010 ]; int n , m ; long long sum ; class Tr { private : struct Edge { int to , nxt , val ; } e [ 600010 ]; int cnt , head [ 100010 ]; int pnt [ 100010 ][ 22 ]; int dpth [ 100010 ]; // \u5230\u7956\u5148\u7684\u8def\u5f84\u4e0a\u8fb9\u6743\u6700\u5927\u7684\u8fb9 int maxx [ 100010 ][ 22 ]; // \u5230\u7956\u5148\u7684\u8def\u5f84\u4e0a\u8fb9\u6743\u6b21\u5927\u7684\u8fb9\uff0c\u82e5\u4e0d\u5b58\u5728\u5219\u4e3a -INF int minn [ 100010 ][ 22 ]; public : void addedge ( int u , int v , int val ) { e [ ++ cnt ] = ( Edge ){ v , head [ u ], val }; head [ u ] = cnt ; } void insedge ( int u , int v , int val ) { addedge ( u , v , val ); addedge ( v , u , val ); } void dfs ( int now , int fa ) { dpth [ now ] = dpth [ fa ] + 1 ; pnt [ now ][ 0 ] = fa ; minn [ now ][ 0 ] = - INF ; for ( int i = 1 ; ( 1 << i ) <= dpth [ now ]; i ++ ) { pnt [ now ][ i ] = pnt [ pnt [ now ][ i - 1 ]][ i - 1 ]; int kk [ 4 ] = { maxx [ now ][ i - 1 ], maxx [ pnt [ now ][ i - 1 ]][ i - 1 ], minn [ now ][ i - 1 ], minn [ pnt [ now ][ i - 1 ]][ i - 1 ]}; // \u4ece\u56db\u4e2a\u503c\u4e2d\u53d6\u5f97\u6700\u5927\u503c std :: sort ( kk , kk + 4 ); maxx [ now ][ i ] = kk [ 3 ]; // \u53d6\u5f97\u4e25\u683c\u6b21\u5927\u503c int ptr = 2 ; while ( ptr >= 0 && kk [ ptr ] == kk [ 3 ]) ptr -- ; minn [ now ][ i ] = ( ptr == -1 ? - INF : kk [ ptr ]); } for ( int i = head [ now ]; i ; i = e [ i ]. nxt ) { if ( e [ i ]. to != fa ) { maxx [ e [ i ]. to ][ 0 ] = e [ i ]. val ; dfs ( e [ i ]. to , now ); } } } int lca ( int a , int b ) { if ( dpth [ a ] < dpth [ b ]) std :: swap ( a , b ); for ( int i = 21 ; i >= 0 ; i -- ) if ( dpth [ pnt [ a ][ i ]] >= dpth [ b ]) a = pnt [ a ][ i ]; if ( a == b ) return a ; for ( int i = 21 ; i >= 0 ; i -- ) { if ( pnt [ a ][ i ] != pnt [ b ][ i ]) { a = pnt [ a ][ i ]; b = pnt [ b ][ i ]; } } return pnt [ a ][ 0 ]; } int query ( int a , int b , int val ) { int res = - INF ; for ( int i = 21 ; i >= 0 ; i -- ) { if ( dpth [ pnt [ a ][ i ]] >= dpth [ b ]) { if ( val != maxx [ a ][ i ]) res = std :: max ( res , maxx [ a ][ i ]); else res = std :: max ( res , minn [ a ][ i ]); a = pnt [ a ][ i ]; } } return res ; } } tr ; int fa [ 100010 ]; int find ( int x ) { return fa [ x ] == x ? x : fa [ x ] = find ( fa [ x ]); } void Kruskal () { int tot = 0 ; std :: sort ( e + 1 , e + m + 1 ); for ( int i = 1 ; i <= n ; i ++ ) fa [ i ] = i ; for ( int i = 1 ; i <= m ; i ++ ) { int a = find ( e [ i ]. u ); int b = find ( e [ i ]. v ); if ( a != b ) { fa [ a ] = b ; tot ++ ; tr . insedge ( e [ i ]. u , e [ i ]. v , e [ i ]. val ); sum += e [ i ]. val ; used [ i ] = 1 ; } if ( tot == n - 1 ) break ; } } int main () { std :: ios :: sync_with_stdio ( 0 ); std :: cin . tie ( 0 ); std :: cout . tie ( 0 ); std :: cin >> n >> m ; for ( int i = 1 ; i <= m ; i ++ ) { int u , v , val ; std :: cin >> u >> v >> val ; e [ i ] = ( Edge ){ u , v , val }; } Kruskal (); long long ans = INF64 ; tr . dfs ( 1 , 0 ); for ( int i = 1 ; i <= m ; i ++ ) { if ( ! used [ i ]) { int _lca = tr . lca ( e [ i ]. u , e [ i ]. v ); // \u627e\u5230\u8def\u5f84\u4e0a\u4e0d\u7b49\u4e8e e[i].val \u7684\u6700\u5927\u8fb9\u6743 long long tmpa = tr . query ( e [ i ]. u , _lca , e [ i ]. val ); long long tmpb = tr . query ( e [ i ]. v , _lca , e [ i ]. val ); // \u8fd9\u6837\u7684\u8fb9\u53ef\u80fd\u4e0d\u5b58\u5728\uff0c\u53ea\u5728\u8fd9\u6837\u7684\u8fb9\u5b58\u5728\u65f6\u66f4\u65b0\u7b54\u6848 if ( std :: max ( tmpa , tmpb ) > - INF ) ans = std :: min ( ans , sum - std :: max ( tmpa , tmpb ) + e [ i ]. val ); } } // \u6b21\u5c0f\u751f\u6210\u6811\u4e0d\u5b58\u5728\u65f6\u8f93\u51fa -1 std :: cout << ( ans == INF64 ? -1 : ans ) << '\\n' ; return 0 ; } // from OI-wiki Tricks \u5148\u601d\u8003\u975e\u4e25\u683c\uff0c\u518d\u8003\u8651\u4e25\u683c\uff08\u7279\u6b8a \\(\\to\\) \u4e00\u822c\uff09 \u975e\u4e25\u683c \\(\\to\\) \u4e25\u683c \u7684\u8fc7\u7a0b\u5c31\u662f\u53bb\u6389\u76f8\u7b49\uff0c\u5728\u8fd9\u79cd\u6700\u503c\u95ee\u9898\u91cc\u53ef\u4ee5\u5229\u7528\u8bb0\u5f55\u6b21\u6700\u503c\u6765\u89e3\u51b3\u3002 1 Tag : \u4e25\u683c\u6b21\u5c0f / \u751f\u6210\u6811 / LCA / \u500d\u589e","title":"2022\u5e742\u6708\u7ec3\u4e60\u8bb0\u5f55"},{"location":"rec/tricks-for-2022-02/#tricks","text":"","title":"\u4e8c\u6708 Tricks \u6574\u7406"},{"location":"rec/tricks-for-2022-02/#acwing97","text":"\u6c42 \\(A^B\\) \u7684\u7ea6\u6570\u4e4b\u548c\uff0c\u8981\u53d6\u6a21\u3002 \u628a \\(A\\) \u5206\u89e3\u8d28\u56e0\u6570\uff0c\u7136\u540e\u6307\u6570\u4e58\u4e0a \\(B\\) \u53ef\u4ee5\u5f97\u5230\u4ee5\u4e0b\u5f0f\u5b50\uff1a \\(sum=(1+p_1+p_1^2+p_1^3+\\dots+p_1^{B\\times c_1})\\times(1+p_2+p_2^2+p_2^3+\\dots+p_2^{B\\times c_2})\\times\\dots \\times (1+p_n+p_n^2+p_n^3+\\dots+p_n^{B\\times c_n})\\) \\(p_i\\) \u8868\u793a \\(A\\) \u7684\u7b2c \\(i\\) \u4e2a\u8d28\u56e0\u5b50\uff0c \\(c_i\\) \u8868\u793a \\(p_i\\) \u5934\u4e0a\u7684\u6307\u6570\u3002 \u6bcf\u4e00\u4e2a\u5c0f\u62ec\u53f7\u91cc\u9762\u53ef\u4ee5\u7528\u7b49\u6bd4\u6570\u5217\u6c42\u548c\uff0c\u4f46\u662f\u53d6\u6a21\uff08\u53ea\uff09\u5bf9\u4e8e\u9664\u6cd5\u6ca1\u6709\u5206\u914d\u5f8b\uff0c\u5206\u5b50\u5206\u6bcd\u4e0d\u80fd\u5206\u5f00\u53d6\u6a21\u7136\u540e\u9664\u3002 \u6240\u4ee5\u8003\u8651\u7528\u5206\u6cbb\u6cd5\u6c42\u6bcf\u4e2a\u5c0f\u62ec\u53f7\u91cc\u7684\u5185\u5bb9\u7136\u540e\u76f8\u4e58\u53d6\u6a21\u3002 \u628a\u6bcf\u4e2a\u5f0f\u5b50\u4ece\u4e2d\u95f4\u62c6\u5f00\uff0c\u7136\u540e\u628a\u540e\u9762\u5927\u4e00\u70b9\u7684\u5f0f\u5b50\u63d0\u53d6\u4e00\u4e2a\u516c\u56e0\u6570\u51fa\u6765\u4f7f\u5f97\u5b83\u548c\u524d\u9762\u7684\u5f0f\u5b50\u4e00\u6837\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5199\u6210\u9012\u5f52\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 /* * @Author: black_trees * @Date: 2022-01-29 10:12:50 * @Last Modified by: black_trees * @Last Modified time: 2022-01-29 10:20:59 */ #include <bits/stdc++.h> using namespace std ; #define int long long const int mod = 9901 ; const int N = 5e6 + 7 ; int a , b , q [ N ], f [ N ], ans , tot , cnt ; inline int qpow ( int a , int b , int p ){ int res = 1 % p ; for (; b ; b >>= 1 ){ if ( b & 1 ) res = res * a % p ; a = a * a % p ; } return res ; } inline void split (){ for ( register int i = 2 ; i * i <= a ; i ++ ){ if ( a % i == 0 ){ q [ ++ cnt ] = i ; while ( a % i == 0 ) f [ cnt ] ++ , a /= i ; } } if ( a > 1 ) q [ ++ cnt ] = a , f [ cnt ] ++ ; } inline void solve (){ if ( a == 0 ){ puts ( \"0\" ); return ; } if ( b == 0 ){ puts ( \"1\" ); return ; } split (), ans = 1 ; for ( register int i = 1 ; i <= cnt ; i ++ ){ if (( q [ i ] -1 ) % mod == 0 ){ ans = ( ans * ( b * f [ i ] + 1 ) % mod ) % mod ; continue ; } int x = qpow ( q [ i ], b * f [ i ] + 1 , mod ); x = ( x -1 + mod ) % mod ; int y = qpow ( q [ i ] -1 , mod -2 , mod ); ans = ( ans * x * y ) % mod ; } printf ( \"%lld\" , ans ); return ; } signed main (){ #ifndef ONLINE_JUDGE freopen ( \"Input.txt\" , \"r\" , stdin ); freopen ( \"Output.txt\" , \"w\" , stdout ); #endif cin >> a >> b ; return solve (), 0 ; } Tricks \u53d6\u6a21\u65f6\u53ef\u4ee5\u5229\u7528\u5206\u6cbb\u6cd5\u5bf9\u7b49\u6bd4\u6570\u5217\u6c42\u548c\u3002 1 Tag : \u5206\u6cbb / \u7b49\u6bd4\u6570\u5217","title":"Acwing97 \u7ea6\u6570\u4e4b\u548c"},{"location":"rec/tricks-for-2022-02/#acwing11","text":"\u6c42\u65b9\u6848\u6570\uff0c\u5148\u80cc\u5305\uff0c\u7136\u540e dp \u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e2a \\(g\\) \u6570\u7ec4\uff0c\u8868\u793a\u4f7f\u7528\u4e0d\u8d85\u8fc7\u5f53\u524d\u7684\u7a7a\u95f4\u7684\u65b9\u6848\u6709\u591a\u5c11\u79cd\u3002 \u6839\u636e \\(f\\) \u8f6c\u79fb\u7684\u4e24\u79cd\u60c5\u51b5\u5206\u5f00\u8ba8\u8bba\u5c31\u884c\u3002 \u4e0d\u77e5\u9053\u4e3a\u5565\uff0c\u6211\u5199\u4e2a \\(tmp\\) \u5b58 \\(f\\) \u6ca1\u8f6c\u79fb\u7684 \\(val\\) \u662f\u9519\u7684\u3002 \u4f46\u662f\u5148\u6bd4\u8f83\uff0c\u8bb0\u5f55 \\(g\\) \u4e4b\u540e\u518d\u66f4\u65b0 \\(f\\) \u5c31\u662f\u5bf9\u7684\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 /* * @Author: black_trees * @Date: 2022-02-02 16:02:50 * @Last Modified by: black_trees * @Last Modified time: 2022-02-02 17:18:10 */ #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int si = 1e3 + 10 ; constexpr int p = 1e9 + 7 ; int n , m ; int v [ si ], w [ si ]; int f [ si ], g [ si ]; signed main (){ #ifndef ONLINE_JUDGE freopen ( \"Input.txt\" , \"r\" , stdin ); freopen ( \"Output.txt\" , \"w\" , stdout ); #endif scanf ( \"%lld%lld\" , & n , & m ); for ( register int i = 1 ; i <= n ; ++ i ){ scanf ( \"%lld%lld\" , & v [ i ], & w [ i ]); } for ( register int i = 0 ; i <= m ; ++ i ){ g [ i ] = 1 ; } for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = m ; j >= v [ i ]; -- j ){ int tmp = f [ j - v [ i ]] + w [ i ]; if ( tmp > f [ j ]) f [ j ] = tmp , g [ j ] = g [ j - v [ i ]]; else if ( tmp == f [ j ]) g [ j ] = ( g [ j ] + g [ j - v [ i ]]) % p ; } } return printf ( \"%lld \\n \" , g [ m ] % p ), 0 ; } Trick DP \u7c7b\u95ee\u9898\u6c42\u65b9\u6848\u6570\u65f6\uff0c\u9700\u8981\u5728\u8f6c\u79fb\u6210\u529f\u7684\u65f6\u5019\u8bb0\u5f55\u65b9\u6848\u3002 \u540c\u65f6\u9700\u8981\u5728\u5f53\u524d\u72b6\u6001\u548c\u8f6c\u79fb\u8fc7\u6765\u7684\u72b6\u6001\u7684 DP \u503c\u76f8\u7b49\u65f6\uff0c\u5c06\u4e24\u4e2a\u7684\u65b9\u6848\u7d2f\u52a0\u3002 1 Tag : \u80cc\u5305 / \u65b9\u6848\u6570","title":"Acwing11 \u80cc\u5305\u95ee\u9898\u6c42\u65b9\u6848\u6570"},{"location":"rec/tricks-for-2022-02/#acwing529-noip2017","text":"\u53d1\u73b0\u672c\u9898\u7684\u8981\u6c42\u5c31\u662f\u6c42\u51fa\u4e00\u9897\u751f\u6210\u6811\uff0c\u4f7f\u5f97\u6309\u7167\u8981\u6c42\u5f97\u5230\u7684\u6743\u503c\u548c\u6700\u5c0f\u3002 \u5e76\u4e14\uff0c\u9898\u76ee\u4e2d\u8981\u6c42\u7684\u201c\u4ece\u6700\u521d\u7684\u5b9d\u85cf\u5c4b\u5230\u5f53\u524d\u9053\u8def\u7684\u8d77\u70b9\u7ecf\u8fc7\u7684\u5b9d\u85cf\u5c4b\u4e2a\u6570\u201d\uff0c\u5c31\u662f\u4ee5\u6700\u521d\u7684\u5b9d\u85cf\u5c4b\u4e3aroot\uff0c\u5230\u5f53\u524d\u9053\u8def\u8d77\u70b9\u7684\u6df1\u5ea6\u3002 \u8bbe \\(f[i,msk]\\) \u8868\u793a\u96c6\u5408\uff1a\u5f53\u524d\u6253\u901a\u7684\u6700\u5927\u6df1\u5ea6\u4e3a \\(i\\) \uff0c\u6253\u901a\u4e86\u72b6\u6001\u4e3a \\(msk\\) \u7684\u5b9d\u85cf\u5c4b\u7684\u6240\u6709\u65b9\u6848\u3002\u5c5e\u6027\u4e3a\u6743\u503c\u548c\u7684 Min\u3002 \u90a3\u4e48\u8003\u8651\u679a\u4e3e \u4e0a\u4e00\u5c42 \uff08\u6309\u7167\u201c\u6700\u540e\u201d\u8fdb\u884c\u96c6\u5408\u5212\u5206\uff09\u7684\u72b6\u6001 \\(qwq\\) \uff0c \u90a3\u4e48\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u8f6c\u79fb\u65b9\u7a0b\uff1a \\(f_{i,msk}=\\min\\{f_{i,msk},f_{i-1,qwq}+(i-1)\\times cost(qwq,msk)\\}\\) \u5176\u4e2d \\(cost(qwq,msk)\\) \u8868\u793a\u4ece \\(qwq\\) \u8f6c\u79fb\u5230 \\(msk\\) \u589e\u52a0\u7684\u9053\u8def\u957f\u5ea6\u7684\u6700\u5c0f\u503c\u3002 \u4f46\u662f\u8fd9\u91cc\u8981\u6c42\u53ea\u80fd\u6269\u5c55\u4e00\u5c42\uff0c\u6240\u4ee5\u8fd8\u8981\u5224 \\(qwq\\) \u662f\u5426\u80fd\u53ea\u901a\u8fc7\u4e00\u5c42\u6269\u5c55\u5f97\u5230 \\(msk\\) \u3002 \u5177\u4f53\u600e\u4e48\u5224\u5b9a\uff1f \\(qwq\\) \u4e00\u5b9a\u8981\u662f \\(msk\\) \u7684\u5b50\u96c6\u3002 \\(msk\\) \u5f53\u4e2d\u7684\u6240\u6709\u5143\u7d20\u4e00\u5b9a\u5904\u4e8e\u96c6\u5408 \\(S_{qwq}\\) \uff0c\u5176\u4e2d \\(S_{qwq}\\) \u8868\u793a \\(qwq\\) \u5f80\u4e0b\u6269\u5c55\u4e00\u5c42\u4e4b\u540e\u6240\u7684\u5230\u7684\u6240\u6709\u65b0\u8282\u70b9\u548c \\(qwq\\) \u672c\u8eab\u7ec4\u6210\u7684\u96c6\u5408\u3002 \u8fd9\u4e2a\u53ef\u4ee5\u9884\u5904\u7406\u505a\u3002 \u7136\u540e\u8003\u8651\u5982\u4f55\u5904\u7406 \\(cost\\) \u3002 \u5f53\u9884\u5904\u7406\u51fa\u6240\u6709\u7684\u53ef\u884c\u72b6\u6001\u7684\u5bf9\u4e4b\u540e\uff0c\u6211\u4eec\u8bb0 \\(r(msk,i)\\) \u8868\u793a\u4ece\u72b6\u6001 \\(msk\\) \u6240\u6709\u7684\u7684\u8282\u70b9\u51fa\u53d1\uff0c\u6269\u5c55\u5230\u8282\u70b9 \\(i\\) \u7684\u6700\u77ed\u8def\u3002 \u8fd9\u4e2a\u53ef\u4ee5\u5728\u5904\u7406\u53ef\u884c\u72b6\u6001\u7684\u65f6\u5019\u8f6c\u79fb\u51fa\u6765\u3002 \u7136\u540e\u8003\u8651\u679a\u4e3e\u6240\u6709\u53ef\u884c\u5bf9\u7684\u72b6\u6001\u4e4b\u95f4\u7684\u5dee\u5f02\uff0c\u6bd4\u5982\u5f53\u524d\u662f \\(i,j\\) \u8fd9\u4e24\u4e2a\u72b6\u6001\uff0c\u53ea\u9700\u8981\u679a\u4e3e\u4ed6\u4eec\u4e4b\u524d\u7684\u5dee\u5f02\uff0c\u7136\u540e\u5bf9\u76f8\u5e94\u7684 \\(r\\) \u6c42\u548c\u5373\u53ef\u3002 \u90a3\u4e48\u5c31\u53ef\u4ee5\u8fdb\u884c\u8f6c\u79fb\u4e86\uff0c\u521d\u59cb\u5316\u8ba9\u6bcf\u4e2a\u8282\u70b9\u5206\u522b\u4e3a\u6839\uff0c\u8ba9\u5bf9\u5e94\u72b6\u6001\u7684\u6743\u503c\u4e3a \\(0\\) \uff0c\u5176\u4ed6\u7684\u8d4b\u503c\u4e3a \\(+\\infty\\) \u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 /* * @Author: black_trees <black_trees@foxmail.com> * @Date: 2022-02-08 10:59:15 * @Last Modified by: black_trees <black_trees@foxmail.com> * @Last Modified time: 2022-02-08 11:21:12 */ #include <bits/stdc++.h> using namespace std ; constexpr int inf = 0x3f3f3f3f ; constexpr int si = 15 ; constexpr int stasi = 1 << 13 ; int n , m ; int a [ si ][ si ]; int f [ si ][ stasi ]; int all [ stasi ], road [ stasi ][ si ]; std :: vector < int > valid [ stasi ], cost [ stasi ]; int main (){ scanf ( \"%d%d\" , & n , & m ), memset ( a , 0x3f , sizeof a ); for ( register int i = 1 ; i <= m ; ++ i ){ int u , v , w ; scanf ( \"%d%d%d\" , & u , & v , & w ); a [ u ][ v ] = a [ v ][ u ] = min ( a [ u ][ v ], w ); } memset ( road , 0x3f , sizeof road ); for ( register int msk = 0 ; msk < ( 1 << n ); ++ msk ){ all [ msk ] = msk ; for ( register int i = 1 ; i <= n ; ++ i ){ if ( msk >> ( i -1 ) & 1 ){ road [ msk ][ i ] = 0 ; for ( register int j = 1 ; j <= n ; ++ j ){ if ( a [ i ][ j ] == inf ) continue ; all [ msk ] |= 1 << ( j -1 ), road [ msk ][ j ] = min ( road [ msk ][ j ], a [ i ][ j ]); } } } } for ( register int msk = 0 ; msk < ( 1 << n ); ++ msk ){ for ( register int mks = 0 ; mks < msk ; ++ mks ){ if (( msk & mks ) == mks && ( msk & all [ mks ]) == msk ){ valid [ msk ]. push_back ( mks ); int su = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ if (( msk ^ mks ) >> ( i -1 ) & 1 ) su += road [ mks ][ i ]; } cost [ msk ]. push_back ( su ); } } } memset ( f , 0x3f , sizeof f ); for ( register int i = 1 ; i <= n ; ++ i ) f [ 1 ][ 1 << ( i -1 )] = 0 ; int res = f [ 1 ][( 1 << n ) -1 ]; for ( register int i = 2 ; i <= n ; ++ i ){ for ( register int msk = 1 ; msk < ( 1 << n ); ++ msk ){ for ( register int j = 0 ; j < ( int ) valid [ msk ]. size (); ++ j ){ int k = valid [ msk ][ j ]; f [ i ][ msk ] = min ( f [ i ][ msk ], f [ i -1 ][ k ] + ( i -1 ) * cost [ msk ][ j ]); } } res = min ( res , f [ i ][( 1 << n ) -1 ]); } return printf ( \"%d \\n \" , res ), 0 ; } Trick \u5728\u601d\u8003DP\u7c7b\u7684\u95ee\u9898\u65f6\u53ef\u4ee5\u5148\u5217\u51fa\u4e00\u4e2a\u65b9\u7a0b\uff0c\u4e0d\u7ba1\u91cc\u9762\u7684\u67d0\u4e9b\u4e1c\u897f\u600e\u4e48\u6c42\uff0c\u7b49\u786e\u5b9a\u5f0f\u5b50\u662f\u5bf9\u7684\uff08\u65e0\u540e\u6548\u6027\uff09\u4e4b\u540e\u518d\u8003\u8651\u8ba1\u7b97\u8fd9\u4e9b\u4e1c\u897f\u3002\uff08\u9010\u5c42\u601d\u8003\uff09 1 Tag : \u751f\u6210\u6811 / \u72b6\u538bDP","title":"Acwing529 [NOIP2017] \u5b9d\u85cf"},{"location":"rec/tricks-for-2022-02/#acwing1073","text":"\u66b4\u529b\u505a\u5c31\u662f\u6bcf\u4e2a\u70b9 dfs \u7136\u540e\u53d6 max\u3002 \u4f46\u662f\u660e\u663e TLE\uff0c\u6240\u4ee5\u8003\u8651\u6362\u6839DP\u3002 \u7b2c\u4e00\u6b21 dfs \u5904\u7406\u51fa\u4ee5 \\(1\\) \u4e3a\u6839\u7684\u65f6\u5019\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u80fd\u5f80\u4e0b\u8d70\u7684\u8ddd\u79bb\u7684\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u3002\u7136\u540e\u8003\u8651\u5904\u7406\u51fa\u4ece\u6bcf\u4e2a\u8282\u70b9\u5f80\u4e0a\u8d70\u7684\u6700\u5927\u503c\u3002 \u7b2c\u4e8c\u6b21 dfs \u5206\u7c7b\u8ba8\u8bba\u8fdb\u884c\u8f6c\u79fb\u5373\u53ef\u3002 \u7edf\u8ba1\u7684\u65f6\u5019\uff0c\u5982\u679c\u6700\u5927\u503c\u88ab\u66f4\u65b0\uff0c\u90a3\u4e48\u628a\u6b21\u5927\u503c\u66f4\u65b0\u4e3a\u539f\u6765\u7684\u6700\u5927\u503c\u3002 \u53cd\u4e4b\u4ee4\u6b21\u5927\u503c\u548c\u5f53\u524d\u626b\u5230\u7684\u5143\u7d20\u53d6 \\(\\max\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 #include <bits/stdc++.h> using namespace std ; constexpr int si_n = 1e4 + 10 ; constexpr int si_m = si_n << 1 ; int n ; struct node { int head , ver , Next , w ; } e [ si_m ]; int tot = 0 ; inline void add ( int u , int v , int w ){ e [ ++ tot ]. ver = v , e [ tot ]. w = w ; e [ tot ]. Next = e [ u ]. head , e [ u ]. head = tot ; } int d [ si_n ], dis [ si_n ], up [ si_n ]; int s [ si_n ]; inline void dfs1 ( int u , int fa ){ for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( v == fa ) continue ; dfs1 ( v , u ); if ( d [ v ] + w >= d [ u ]) dis [ u ] = d [ u ], d [ u ] = d [ v ] + w , s [ u ] = v ; else if ( d [ v ] + w > dis [ u ]) dis [ u ] = d [ v ] + w ; } } inline void dfs2 ( int u , int fa ){ for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( v == fa ) continue ; if ( s [ u ] == v ) up [ v ] = w + max ( up [ u ], dis [ u ]); else up [ v ] = w + max ( up [ u ], d [ u ]); dfs2 ( v , u ); } } int main (){ scanf ( \"%d\" , & n ); for ( register int i = 1 ; i < n ; ++ i ){ int u , v , w ; scanf ( \"%d%d%d\" , & u , & v , & w ); add ( u , v , w ), add ( v , u , w ); } dfs1 ( 1 , 0 ), dfs2 ( 1 , 0 ); int res = 0x3f3f3f3f ; for ( register int i = 1 ; i <= n ; ++ i ){ res = min ( res , max ( d [ i ], up [ i ])); } return printf ( \"%d \\n \" , res ), 0 ; } Tricks \u6362\u6839 DP \u7684\u65b9\u7a0b\u5982\u679c\u51fa\u73b0 \\(\\max\\) \uff0c\u6362\u6839\u7684\u65f6\u5019\u9700\u8981\u5229\u7528\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u8fdb\u884c\u8f6c\u79fb\u3002 \u53ef\u4ee5\u5229\u7528 std::multiset \uff0c\u4e5f\u53ef\u4ee5\u7528 std::vector \u8bb0\u5f55\u3002 1 Tag : \u6362\u6839DP","title":"Acwing1073 \u6811\u7684\u4e2d\u5fc3"},{"location":"rec/tricks-for-2022-02/#cf708c-centroids","text":"\u7ed9\u5b9a\u4e00\u9897\u6811\uff0c\u4f60\u6709\u4e00\u6b21\u5c06\u6811\u6539\u9020\u7684\u673a\u4f1a\uff0c\u6539\u9020\u7684\u610f\u601d\u662f\u5220\u53bb\u4e00\u6761\u8fb9\uff0c\u518d\u52a0\u5165\u4e00\u6761\u8fb9\uff0c\u4fdd\u8bc1\u6539\u9020\u540e\u8fd8\u662f\u4e00\u68f5\u6811\u3002 \u8bf7\u95ee\u6709\u591a\u5c11\u70b9\u53ef\u4ee5\u901a\u8fc7\u6539\u9020\uff0c\u6210\u4e3a\u8fd9\u9897\u6811\u7684\u91cd\u5fc3\uff1f\uff08\u5982\u679c\u4ee5\u67d0\u4e2a\u70b9\u4e3a\u6839\uff0c\u6bcf\u4e2a\u5b50\u6811\u7684\u5927\u5c0f\u90fd\u4e0d\u5927\u4e8e \\(\\dfrac{n}{2}\\) \uff0c\u5219\u79f0\u67d0\u4e2a\u70b9\u4e3a\u91cd\u5fc3\uff09 \u9996\u5148\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9 \\(u\\) \u4e0d\u662f\u91cd\u5fc3\uff0c\u90a3\u4e48\u5b83\u7684\u5b50\u6811\u5f53\u4e2d\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u7684\u5927\u5c0f\u4f1a\u8d85\u51fa \\(\\lfloor \\frac{n}{2} \\rfloor\\) \u3002 \u90a3\u4e48\u6211\u4eec\u6539\u9020\u7684\u65f6\u5019\u5c31\u4e00\u5b9a\u662f\u4ece\u8fd9\u4e2a\u8d85\u51fa \\(\\lfloor \\frac{n}{2} \\rfloor\\) \u7684\u5b50\u6811\u5f53\u4e2d\u627e\u5230\u4e00\u4e2a\u5b50\u6811\uff0c\u4f7f\u5b83\u548c \\(u\\) \u76f8\u8fde\uff0c\u6ee1\u8db3\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u6240\u6709\u5b50\u6811\u90fd\u4e0d\u5927\u4e8e \\(\\lfloor \\frac{n}{2} \\rfloor\\) \u3002 \u5e76\u4e14\u8fd9\u4e2a\u627e\u51fa\u6765\u7684\u5b50\u6811\u5927\u5c0f\u5fc5\u987b\u662f \\(\\le \\lfloor \\frac{n}{2} \\rfloor\\) \u5f53\u4e2d\u6700\u5927\u7684\u4e00\u4e2a\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1 \\(u\\) \u88ab\u6539\u9020\u4e3a\u91cd\u5fc3\u4e4b\u540e\u4e0d\u53ef\u80fd\u51fa\u73b0\u77db\u76fe\u3002 \u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u6c42\u51fa\u6bcf\u4e00\u4e2a\u5b50\u6811\u5f53\u4e2d\u7684\uff0c\u5c0f\u4e8e\u7b49\u4e8e \\(\\lfloor \\frac{n}{2} \\rfloor\\) \u7684\u6700\u5927\u5b50\u6811\u7684\u5927\u5c0f\u5c31\u80fd\u5feb\u901f\u8fdb\u884c\u5224\u65ad\u4e86\u3002 \u5148\u8003\u8651\u4e0d\u6362\u6839\u7684\u60c5\u51b5\u3002 \u8bbe \\(f_{u}\\) \u8868\u793a \\(u\\) \u7684\u5b50\u6811\u5f53\u4e2d\u7684\uff0c\u5c0f\u4e8e\u7b49\u4e8e \\(\\lfloor \\frac{n}{2} \\rfloor\\) \u7684\u6700\u5927\u5b50\u6811\u7684\u5927\u5c0f\u3002 \u90a3\u4e48\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5f97\u5230\u8f6c\u79fb\u65b9\u7a0b\uff1a \\(f_{u}=\\begin{cases} \\max\\{siz_v\\} & siz_v \\le \\lfloor \\frac{n}{2} \\rfloor\\\\ \\max\\{f_{v}\\} & \\text{otherwise.} \\end{cases}\\) \u8003\u8651\u6362\u6839\uff0c\u53d1\u73b0\u65b9\u7a0b\u5f53\u4e2d\u6709\u51fa\u73b0 \\(\\max\\) \uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8bb0\u5f55 \\(f\\) \u7684\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u3002 \u8fd9\u4e2a\u65b9\u7a0b\u6bd4\u8f83\u5957\u8def\uff0c\u5c31\u662f\u5728\u539f\u6765\u7684 \\(f\\) \u7684\u57fa\u7840\u4e0a\u548c \\(n-siz_u\\) \u53d6 \\(\\max\\) \uff0c\u7136\u540e\u6ce8\u610f\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u7684\u8ba8\u8bba\u5c31\u53ef\u4ee5\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 #include <bits/stdc++.h> using namespace std ; constexpr int si = 1e6 + 10 ; constexpr int inf = 0x3f3f3f3f ; int t , n ; int dp [ si ][ 2 ], pos [ si ]; int dpp [ si ], ans [ si ]; int siz [ si ], maxsiz [ si ]; struct edge { int to , Next ; } e [ si << 1 ]; int head [ si << 1 ]; int tot = 0 ; inline void add ( int u , int v ){ e [ ++ tot ]. to = v , e [ tot ]. Next = head [ u ]; head [ u ] = tot ; } inline void dfs1 ( int u , int fa ){ siz [ u ] = 1 ; for ( register int i = head [ u ]; i ; i = e [ i ]. Next ){ if ( e [ i ]. to == fa ) continue ; dfs1 ( e [ i ]. to , u ); int v ; siz [ u ] += siz [ e [ i ]. to ]; if ( siz [ e [ i ]. to ] > siz [ maxsiz [ u ]]) maxsiz [ u ] = e [ i ]. to ; if ( siz [ e [ i ]. to ] <= n / 2 ) v = siz [ e [ i ]. to ]; else v = dp [ e [ i ]. to ][ 0 ]; if ( dp [ u ][ 0 ] < v ) dp [ u ][ 1 ] = dp [ u ][ 0 ], dp [ u ][ 0 ] = v , pos [ u ] = e [ i ]. to ; else if ( dp [ u ][ 1 ] < v ) dp [ u ][ 1 ] = v ; } } inline void dfs2 ( int u , int fa ){ ans [ u ] = 1 ; if ( siz [ maxsiz [ u ]] > n / 2 ) ans [ u ] = ( siz [ maxsiz [ u ]] - dp [ maxsiz [ u ]][ 0 ] <= n / 2 ); else if ( n - siz [ u ] > n / 2 ) ans [ u ] = ( n - siz [ u ] - dpp [ u ] <= n / 2 ); for ( register int i = head [ u ]; i ; i = e [ i ]. Next ){ if ( e [ i ]. to == fa ) continue ; int v ; if ( n - siz [ u ] > n / 2 ) v = dpp [ u ]; else v = n - siz [ u ]; dpp [ e [ i ]. to ] = max ( dpp [ e [ i ]. to ], v ); if ( pos [ u ] == e [ i ]. to ) dpp [ e [ i ]. to ] = max ( dpp [ e [ i ]. to ], dp [ u ][ 1 ]); else dpp [ e [ i ]. to ] = max ( dpp [ e [ i ]. to ], dp [ u ][ 0 ]); dfs2 ( e [ i ]. to , u ); } } signed main (){ scanf ( \"%d\" , & n ); for ( register int i = 1 ; i < n ; i ++ ){ int u , v ; scanf ( \"%d%d\" , & u , & v ); add ( u , v ), add ( v , u ); } dfs1 ( 1 , 0 ), dfs2 ( 1 , 0 ); for ( register int i = 1 ; i <= n ; i ++ ){ printf ( \"%d \" , ans [ i ]); } return 0 ; } Trick \u5148\u8003\u8651\u6709\u6839\u7684\u60c5\u51b5\u5217\u51fa\u65b9\u7a0b\uff0c\u7136\u540e\u518d\u4ece\u6362\u6839\u7684\u89d2\u5ea6\u7406\u89e3\u3002 1 Tag : \u6362\u6839DP","title":"CF708C Centroids"},{"location":"rec/tricks-for-2022-02/#acwing340","text":"\u53ef\u4ee5\u5c06\u56fe\u4e2d\u67d0\u6761 \\(1\\to n\\) \u7684\u8def\u5f84\u4e0a\u7684 \\(K\\) \u4e2a\u8fb9\u6743\u8bbe\u7f6e\u4e3a \\(0\\) \u3002 \u5b9a\u4e49\u8fd9\u6761\u8def\u5f84\u7684\u82b1\u8d39\u4e3a\u8bbe\u7f6e\u540e\u8def\u5f84\u4e0a\u6240\u6709\u8fb9\u6743\u7684\u6700\u5927\u503c\u3002 \u6c42\u82b1\u8d39\u6700\u5c0f\u503c\u3002 \u53ef\u4ee5\u5206\u5c42\u56fe\u6700\u77ed\u8def\u3002 \u8bbe \\(dis[x,p]\\) \u8868\u793a\u4ece \\(1\\) \u5230 \\(x\\) \uff0c\u5df2\u7ecf\u7528\u4e86 \\(p\\) \u6761\u514d\u8d39\u673a\u4f1a\u7684\u6700\u5c0f\u82b1\u8d39\u3002 \u90a3\u4e48\u8003\u8651\u4e00\u4e2a\u201c\u5e7f\u4e49\u201d\u7684\u6700\u77ed\u8def\uff0c\u5c06\u6bcf\u4e2a\u8282\u70b9\u90fd\u62c6\u6210 \\(K + 1\\) \u4e2a\uff08 \\((x,0),(x,1),\\dots,(x,K)\\) \uff09 \u540c\u5c42\u4e4b\u95f4\u76f4\u63a5\u8fde\u539f\u6765\u7684\u8fb9\u6743\uff0c\u7136\u540e\u8fd9\u4e00\u5c42\u548c\u4e0b\u4e00\u5c42\u8fde\u8fb9\u5c31\u5c06\u8fb9\u6743\u8bbe\u7f6e\u4e3a \\(0\\) \u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u5bf9\u4e8e \\((u,v)\\) \u8fd9\u6761\u539f\u56fe\u4e2d\u7684\u8fb9\uff0c\u8fde\u63a5 \\((u,k),(v,k)\\) \uff0c\u8fb9\u6743\u4e3a \\(w(u,v)\\) \u3002 \u7136\u540e\u8fde\u63a5 \\((u,k),(v,k + 1)\\) \uff0c\u8868\u793a\u8fd9\u6761\u7ebf\u8def\u4f7f\u7528\u514d\u8d39\u673a\u4f1a\uff0c\u6240\u4ee5\u8fb9\u6743\u4e3a \\(0\\) \u3002 \u5728\u8fd9\u5f20\u56fe\u4e0a\u8dd1\u4e00\u4e2a\u6700\u77ed\u8def\uff0c\u6700\u540e\u7b54\u6848\u5728 \\(dis[n][i]\\) \u4e2d\u53d6 \\(\\min\\) \u5373\u53ef\u3002 \u5b9e\u9645\u4e0a\u5c31\u662f\u5229\u7528 SPFA DP\u3002 \u6216\u8005\u5229\u7528 \\(01\\) \u4e8c\u5206\uff0c\u6bcf\u6b21\u628a\u4e0d\u8d85\u8fc7 \\(mid\\) \u7684\u8bbe\u7f6e\u4e3a \\(0\\) \uff0c\u5176\u5b83\u4e3a \\(1\\) \u3002 \u7136\u540e\u5229\u7528 dijkstra Check \\(dis[n]\\) \u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e \\(K\\) \u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <bits/stdc++.h> using namespace std ; constexpr int si = 11010 ; constexpr int si_e = si << 1 ; int n , p , k ; int tot = 0 , dis [ si ]; bool vis [ si ]; struct edge { int head , next , ver , w ; } e [ si_e ]; inline void add ( int u , int v , int w ){ e [ ++ tot ]. ver = v , e [ tot ]. next = e [ u ]. head , e [ u ]. head = tot , e [ tot ]. w = w ; } std :: priority_queue < pair < int , int >> q ; inline bool dijkstra ( int limit ){ memset ( dis , 0x3f , sizeof dis ), memset ( vis , false , sizeof vis ); dis [ 1 ] = 0 , q . push ({ dis [ 1 ], 1 }); while ( ! q . empty ()){ int u = q . top (). second ; q . pop (); if ( vis [ u ]) continue ; vis [ u ] = true ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. next ){ int v = e [ i ]. ver , w = e [ i ]. w > limit ? 1 : 0 ; if ( dis [ v ] > dis [ u ] + w ) dis [ v ] = dis [ u ] + w , q . push ({ - dis [ v ], v }); } } return dis [ n ] <= k ; } int main (){ cin >> n >> p >> k ; for ( register int i = 1 , u , v , w ; i <= p ; ++ i ) cin >> u >> v >> w , add ( u , v , w ), add ( v , u , w ); int l = 0 , r = 1e6 + 1 ; while ( l < r ){ int mid = ( l + r ) >> 1 ; if ( dijkstra ( mid )) r = mid ; else l = mid + 1 ; } if ( r == 1e6 + 1 ) return puts ( \"-1\" ), 0 ; return printf ( \"%d \\n \" , r ), 0 ; } Tricks \u628a\u6700\u4f18\u95ee\u9898\u8f6c\u5316\u6210\u5224\u5b9a\u95ee\u9898\u65f6\uff0c\u53ef\u4ee5\u8003\u8651\u5229\u7528 01 \u4e8c\u5206\u7684\u601d\u60f3\u66f4\u65b9\u4fbf\u7684 Check\u3002 \u5728\u65e0\u5411\u56fe\u4e0a DP \u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u8f6c\u79fb\u53ef\u80fd\u6709\u540e\u6548\u6027\uff0c\u6240\u4ee5\u53ef\u4ee5\u501f\u52a9 SPFA \u8fdb\u884c DP\u3002 \u6b64\u5904\u4f1a\u6709\u540e\u6548\u6027\u7684\u539f\u56e0\u6709\u4e24\u4e2a\uff1a 1. \u9636\u6bb5\u5e76\u4e0d\u662f\u8282\u70b9\u7684\u7f16\u53f7\u987a\u5e8f\u3002 2. \u56e0\u4e3a\u662f\u65e0\u5411\u56fe\uff0c\u65e0\u6cd5\u50cf DAG \u90a3\u6837\u5f88\u597d\u7684\u8fdb\u884c\u65e0\u540e\u6548\u6027\u7684 DP \u8f6c\u79fb\u3002 \u53ef\u4ee5\u628a\u56fe\u4e0a\u7684\u8282\u70b9\u6839\u636e\u4e0d\u540c\u7684\u60c5\u51b5\u62c6\u6210\u591a\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u5728\u65b0\u56fe\u4e0a\u6839\u636e\u6761\u4ef6\u8fde\u8fb9\uff0c\u95ee\u9898\u5c31\u53ef\u4ee5\u88ab\u8f6c\u5316\u4e3a\u6700\u666e\u901a\u7684 SSSP\u3002 1 Tag : SPFA / 01 \u4e8c\u5206 / \u5206\u5c42\u56fe","title":"Acwing340 \u901a\u4fe1\u7ebf\u8def"},{"location":"rec/tricks-for-2022-02/#acwing1148","text":"\u6c42\u65e0\u5411\u8054\u901a\u5e26\u6743\u56fe \\(G\\) \u7684\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u3002 \u9996\u5148\u8003\u8651\u975e\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u600e\u4e48\u505a\u3002 \u5148\u6c42\u51fa\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7136\u540e\u679a\u4e3e\u6bcf\u4e00\u6761\u975e\u6811\u8fb9 \\((u,v)\\) \uff0c\u628a\u8fd9\u6761\u975e\u6811\u8fb9\u52a0\u5165\u5230\u6700\u5c0f\u751f\u6210\u6811\u5f53\u4e2d\u3002 \u8fd9\u65f6\u5019\u5fc5\u7136\u4f1a\u51fa\u73b0\u4e00\u4e2a\u73af\uff0c\u6240\u4ee5\u628a\u8fd9\u4e2a\u73af\u4e0a\u9664\u53bb \\(w(u,v)\\) \u7684\u6700\u5927\u503c\u5220\u53bb\u5c31\u53ef\u4ee5\u4e86\u3002 \u660e\u663e\u7684\uff0c\u8fd9\u4e2a\u73af\u4e0a\u7684\u6700\u5927\u503c\u5c31\u662f MST \u5f53\u4e2d \\(u \\to v\\) \u7684\u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\u3002 \u53ef\u4ee5\u5728 MST \u4e0a\u7528\u500d\u589e\u6c42 LCA\uff0c\u7136\u540e\u8bb0\u5f55 \\(u\\) \u5230\u5b83\u7684 \\(2^i\\) \u7ea7\u7956\u5148\u8def\u5f84\u4e0a\u7684\u8fb9\u6743\u7684\u4e25\u683c\u6700\u5927\u503c\u3002 \u8fd9\u4e2a\u7c7b\u4f3c \\(f\\) \u6570\u7ec4\u7684\u8bb0\u5f55\uff0c\u521d\u59cb\u5316 \\(w[u][0] = w(u,fa)\\) \uff0c\u7136\u540e\u500d\u589e\u8bb0\u5f55\u3002 \u67e5\u8be2 MST \u4e0a \\((u,v)\\) \u8def\u5f84\u4e0a\u7684\u6700\u5927\u503c\u65f6\uff0c\u5206\u522b\u8be2\u95ee \\((u,lca),(v,lca)\\) \u8def\u5f84\u4e0a\u7684\u4e25\u683c\u6700\u5927\u503c\u5373\u53ef\u3002 \u7b54\u6848\u5c31\u662f\u679a\u4e3e\u5b8c\u6240\u6709\u975e\u6811\u8fb9\u88ab\u52a0\u5165\u7684\u60c5\u51b5\u7684\u6700\u5c0f\u503c\u3002 \u7136\u540e\u53d1\u73b0\u8fd9\u91cc\u548c\u4e25\u683c\u6b21\u5c0f\u552f\u4e00\u7684\u533a\u522b\u5c31\u662f\u53ef\u80fd\u52a0\u5165\u7684\u8fb9\u7b49\u4e8e\u88ab\u5220\u9664\u7684\u8fb9\u7684\u6743\u503c\u3002 \u6240\u4ee5\u7528\u7c7b\u4f3c\u6362\u6839 DP \u91cc\u7684 trick\u3002 \u8bb0\u5f55\u6700\u5927\u503c\u7684\u540c\u65f6\u8bb0\u5f55\u6b21\u5927\u503c\uff0c\u5982\u679c\u6700\u5927\u503c\u7b49\u4e8e\u88ab\u52a0\u5165\u7684\u975e\u6811\u8fb9\u7684\u6743\u503c\uff0c\u4f7f\u7528\u6b21\u5927\u503c\u4ee3\u66ff\u6700\u5927\u503c\u66f4\u65b0\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 #include <algorithm> #include <iostream> const int INF = 0x3fffffff ; const long long INF64 = 0x3fffffffffffffffLL ; struct Edge { int u , v , val ; bool operator < ( const Edge & other ) const { return val < other . val ; } }; Edge e [ 300010 ]; bool used [ 300010 ]; int n , m ; long long sum ; class Tr { private : struct Edge { int to , nxt , val ; } e [ 600010 ]; int cnt , head [ 100010 ]; int pnt [ 100010 ][ 22 ]; int dpth [ 100010 ]; // \u5230\u7956\u5148\u7684\u8def\u5f84\u4e0a\u8fb9\u6743\u6700\u5927\u7684\u8fb9 int maxx [ 100010 ][ 22 ]; // \u5230\u7956\u5148\u7684\u8def\u5f84\u4e0a\u8fb9\u6743\u6b21\u5927\u7684\u8fb9\uff0c\u82e5\u4e0d\u5b58\u5728\u5219\u4e3a -INF int minn [ 100010 ][ 22 ]; public : void addedge ( int u , int v , int val ) { e [ ++ cnt ] = ( Edge ){ v , head [ u ], val }; head [ u ] = cnt ; } void insedge ( int u , int v , int val ) { addedge ( u , v , val ); addedge ( v , u , val ); } void dfs ( int now , int fa ) { dpth [ now ] = dpth [ fa ] + 1 ; pnt [ now ][ 0 ] = fa ; minn [ now ][ 0 ] = - INF ; for ( int i = 1 ; ( 1 << i ) <= dpth [ now ]; i ++ ) { pnt [ now ][ i ] = pnt [ pnt [ now ][ i - 1 ]][ i - 1 ]; int kk [ 4 ] = { maxx [ now ][ i - 1 ], maxx [ pnt [ now ][ i - 1 ]][ i - 1 ], minn [ now ][ i - 1 ], minn [ pnt [ now ][ i - 1 ]][ i - 1 ]}; // \u4ece\u56db\u4e2a\u503c\u4e2d\u53d6\u5f97\u6700\u5927\u503c std :: sort ( kk , kk + 4 ); maxx [ now ][ i ] = kk [ 3 ]; // \u53d6\u5f97\u4e25\u683c\u6b21\u5927\u503c int ptr = 2 ; while ( ptr >= 0 && kk [ ptr ] == kk [ 3 ]) ptr -- ; minn [ now ][ i ] = ( ptr == -1 ? - INF : kk [ ptr ]); } for ( int i = head [ now ]; i ; i = e [ i ]. nxt ) { if ( e [ i ]. to != fa ) { maxx [ e [ i ]. to ][ 0 ] = e [ i ]. val ; dfs ( e [ i ]. to , now ); } } } int lca ( int a , int b ) { if ( dpth [ a ] < dpth [ b ]) std :: swap ( a , b ); for ( int i = 21 ; i >= 0 ; i -- ) if ( dpth [ pnt [ a ][ i ]] >= dpth [ b ]) a = pnt [ a ][ i ]; if ( a == b ) return a ; for ( int i = 21 ; i >= 0 ; i -- ) { if ( pnt [ a ][ i ] != pnt [ b ][ i ]) { a = pnt [ a ][ i ]; b = pnt [ b ][ i ]; } } return pnt [ a ][ 0 ]; } int query ( int a , int b , int val ) { int res = - INF ; for ( int i = 21 ; i >= 0 ; i -- ) { if ( dpth [ pnt [ a ][ i ]] >= dpth [ b ]) { if ( val != maxx [ a ][ i ]) res = std :: max ( res , maxx [ a ][ i ]); else res = std :: max ( res , minn [ a ][ i ]); a = pnt [ a ][ i ]; } } return res ; } } tr ; int fa [ 100010 ]; int find ( int x ) { return fa [ x ] == x ? x : fa [ x ] = find ( fa [ x ]); } void Kruskal () { int tot = 0 ; std :: sort ( e + 1 , e + m + 1 ); for ( int i = 1 ; i <= n ; i ++ ) fa [ i ] = i ; for ( int i = 1 ; i <= m ; i ++ ) { int a = find ( e [ i ]. u ); int b = find ( e [ i ]. v ); if ( a != b ) { fa [ a ] = b ; tot ++ ; tr . insedge ( e [ i ]. u , e [ i ]. v , e [ i ]. val ); sum += e [ i ]. val ; used [ i ] = 1 ; } if ( tot == n - 1 ) break ; } } int main () { std :: ios :: sync_with_stdio ( 0 ); std :: cin . tie ( 0 ); std :: cout . tie ( 0 ); std :: cin >> n >> m ; for ( int i = 1 ; i <= m ; i ++ ) { int u , v , val ; std :: cin >> u >> v >> val ; e [ i ] = ( Edge ){ u , v , val }; } Kruskal (); long long ans = INF64 ; tr . dfs ( 1 , 0 ); for ( int i = 1 ; i <= m ; i ++ ) { if ( ! used [ i ]) { int _lca = tr . lca ( e [ i ]. u , e [ i ]. v ); // \u627e\u5230\u8def\u5f84\u4e0a\u4e0d\u7b49\u4e8e e[i].val \u7684\u6700\u5927\u8fb9\u6743 long long tmpa = tr . query ( e [ i ]. u , _lca , e [ i ]. val ); long long tmpb = tr . query ( e [ i ]. v , _lca , e [ i ]. val ); // \u8fd9\u6837\u7684\u8fb9\u53ef\u80fd\u4e0d\u5b58\u5728\uff0c\u53ea\u5728\u8fd9\u6837\u7684\u8fb9\u5b58\u5728\u65f6\u66f4\u65b0\u7b54\u6848 if ( std :: max ( tmpa , tmpb ) > - INF ) ans = std :: min ( ans , sum - std :: max ( tmpa , tmpb ) + e [ i ]. val ); } } // \u6b21\u5c0f\u751f\u6210\u6811\u4e0d\u5b58\u5728\u65f6\u8f93\u51fa -1 std :: cout << ( ans == INF64 ? -1 : ans ) << '\\n' ; return 0 ; } // from OI-wiki Tricks \u5148\u601d\u8003\u975e\u4e25\u683c\uff0c\u518d\u8003\u8651\u4e25\u683c\uff08\u7279\u6b8a \\(\\to\\) \u4e00\u822c\uff09 \u975e\u4e25\u683c \\(\\to\\) \u4e25\u683c \u7684\u8fc7\u7a0b\u5c31\u662f\u53bb\u6389\u76f8\u7b49\uff0c\u5728\u8fd9\u79cd\u6700\u503c\u95ee\u9898\u91cc\u53ef\u4ee5\u5229\u7528\u8bb0\u5f55\u6b21\u6700\u503c\u6765\u89e3\u51b3\u3002 1 Tag : \u4e25\u683c\u6b21\u5c0f / \u751f\u6210\u6811 / LCA / \u500d\u589e","title":"Acwing1148 \u79d8\u5bc6\u7684\u725b\u5976\u8fd0\u8f93"},{"location":"rec/tricks-for-2022-03/","text":"\u4e09\u6708 Tricks \u6574\u7406 \u03c8(\uff40\u2207\u00b4)\u03c8 [ZJOI2007] \u6700\u5927\u534a\u8054\u901a\u5b50\u56fe \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e00\u5f20\u6709\u5411\u56fe \\(G\\) \u3002 \u79f0\u4e00\u4e2a\u5bfc\u51fa\u5b50\u56fe\u662f\u201c\u534a\u8fde\u901a\u7684\u201d\uff0c\u5f53\u4e14\u4ec5\u5f53\u5bf9\u4e8e\u5bfc\u51fa\u5b50\u56fe\u5f53\u4e2d\u7684\u4efb\u610f\u70b9\u5bf9 \\((u,v)\\) \u3002 \u90fd\u6709 \\(u\\) \u53ef\u4ee5\u5230\u8fbe \\(v\\) \u6216\u8005 \\(v\\) \u53ef\u4ee5\u5230\u8fbe \\(u\\) \u3002 \u6c42 \\(G\\) \u7684\u6700\u5927\u534a\u8fde\u901a\u5b50\u56fe\u7684\u5927\u5c0f\uff0c\u548c\u4e2a\u6570\u3002 \u9996\u5148\u53d1\u73b0\u5f3a\u8fde\u901a\u5206\u91cf\u5fc5\u7136\u662f\u4e00\u4e2a\u534a\u8054\u901a\u5b50\u56fe\u3002 \u6240\u4ee5\u5148\u7f29\u70b9\u5f97\u5230\u4e00\u4e2a DAG\u3002 \u53d1\u73b0\u6700\u5927\u534a\u8054\u901a\u5b50\u56fe\u5fc5\u7136\u662f DAG \u4e0a\u7684\u4e00\u6761\u6700\u957f\u94fe\u3002 \u5e76\u4e14\u8fd9\u4e2a\u6700\u957f\u94fe\u4e0d\u80fd\u5206\u5c94\u3002 \u90a3\u4e48\u5728 DAG \u4e0a\u8fdb\u884c\u9012\u63a8\u6c42\u6700\u957f\u8def\u5373\u53ef\u3002 \u56e0\u4e3a Tarjan \u7f29\u70b9\u4f1a\u5f97\u5230\u9006\u62d3\u6251\u5e8f\uff0c\u6240\u4ee5\u4e0d\u7528\u62d3\u6251\u6392\u5e8f\u4e86\uff0c\u5012\u8fc7\u6765\u5c31\u884c\u3002 \u9898\u76ee\u8981\u6c42\u8bb0\u5f55\u65b9\u6848\uff0c\u90a3\u4e48\u5c31\u5728 \\(f_i\\) \u8fdb\u884c\u8f6c\u79fb\u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e2a \\(g_i\\) \u8868\u793a \\(f_i\\) \u8fd9\u4e2a\u72b6\u6001\u5bf9\u5e94\u7684\u65b9\u6848\u3002 \u9898\u76ee\u53ef\u80fd\u6709\u91cd\u8fb9\uff0c\u6240\u4ee5\u9700\u8981\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u8282\u70b9\u4e0a\u4e00\u6b21\u662f\u4ece\u54ea\u91cc\u8f6c\u79fb\u7684\uff0c\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u3002 \u521d\u59cb\u5316 \\(f_i=size_{scc_{i}},g_i=1\\) \u3002 \u6838\u5fc3\u4ee3\u7801\uff1a Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 for ( register int u = cnt ; u >= 1 ; -- u ) f [ u ] = scc [ u ]. size (), g [ u ] = 1 ; for ( register int u = cnt ; u >= 1 ; -- u ){ for ( register int i = ee [ u ]. head ; i ; i = ee [ i ]. Next ){ int v = ee [ i ]. ver ; if ( las [ v ] == u ) continue ; las [ v ] = u ; if ( f [ u ] + ( int ) scc [ v ]. size () > f [ v ]) f [ v ] = f [ u ] + ( int ) scc [ v ]. size (), g [ v ] = g [ u ]; else if ( f [ u ] + ( int ) scc [ v ]. size () == f [ v ]) g [ v ] = ( g [ v ] + g [ u ]) % mod ; } } int res1 = 0 , res2 = 0 ; for ( register int i = 1 ; i <= cnt ; ++ i ){ if ( f [ i ] > res1 ) res1 = f [ i ], res2 = g [ i ]; else if ( f [ i ] == res1 ) res2 = ( res2 + g [ i ]) % mod ; } return printf ( \"%d \\n %d \\n \" , res1 , res2 ), 0 ; Tricks Tarjan \u7f29\u5b8c\u70b9\u5f97\u5230\u7684\u5e8f\u5217\u662f\u9006\u62d3\u6251\u5e8f\u3002 DAG \u4e0a DP \u4e00\u822c\u662f\u5f80\u524d\u63a8\u800c\u4e0d\u662f\u5f80\u540e\u627e\u524d\u9a71\u7684\u65b9\u5f0f\u3002 DAG \u4e0a DP \u6709\u53ef\u80fd\u9700\u8981\u8003\u8651\u91cd\u8fb9\u3002 Warning \u8fd8\u6709\uff0c\u5982\u679c\u975e\u8981\u5728 SCC \u540e\u5229\u7528\u539f\u56fe\u5efa\u8fb9\uff0c\u4e00\u5b9a\u8981\u624b\u5199\u4e00\u4e2a for \u3002 \u5982\u679c\u662f\u8fd9\u6837\u5199\u53ea\u4f1a\u6e05\u7a7a \\(e_0\\) 1 2 3 4 5 6 struct Edge { int head , ver , Next ; inline void Init (){ head = -1 ; } } e [ si_m ] e -> Init (); \u4e8c\u7ef4\u7684 std::bitset<> \u4e4b\u7c7b\u7684 STL \u53ef\u4ee5\u8fd9\u4e48\u5199\uff08\u4f46\u662f\u5e38\u6570\u5927\uff09\uff0c\u662f\u56e0\u4e3a\u5b83\u91cd\u8f7d\u4e86 [] \uff0c\u672c\u8d28\u4e0a\u5b83\u662f\u4e00\u4e2a \u7c7b\u4f3c \u8fd9\u6837\u7684\u4e1c\u897f\uff1a 1 2 3 4 5 struct Bitset { bool bb [ si ]; inline bool * operator [] ( int idx ){ return & bb [ idx ]; } } b ; // \u4e71\u5199\u7684\uff0c\u7406\u89e3\u5c31\u884c \u4e5f\u5c31\u662f\u8bf4\u5b83\u5e76\u4e0d\u662f\u4e00\u4e2a bitset \u6570\u7ec4\uff0c\u4ecd\u7136\u53ea\u662f\u4e00\u4e2a bitset\u3002 1 Tag : \u5f3a\u8fde\u901a\u5206\u91cf / DAG\u4e0a\u7684DP / \u6c42\u65b9\u6848 Acwing361 \u89c2\u5149\u5976\u725b \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e00\u5f20\u56fe\uff0c\u6c42\u56fe\u4e0a\u7684\u4e00\u4e2a\u73af\u4f7f\u5f97 \u201c\u73af\u4e0a\u5404\u70b9\u7684\u6743\u503c\u4e4b\u548c\u201d\u9664\u4ee5\u201c\u73af\u4e0a\u5404\u8fb9\u7684\u6743\u503c\u4e4b\u548c\u201d\u6700\u5927\u3002 01\u5206\u6570\u89c4\u5212\uff0c\u628a\u70b9\u6743\u79fb\u52a8\u5230\u8fb9\u6743\u4e0a\uff0c \u56e0\u4e3a\u6c42\u7684\u662f \\(\\max\\{\\dfrac{\\sum f_i}{\\sum t_i}\\}\\) \u3002 \u4e8c\u5206\u7b54\u6848\u4e4b\u540e\u53d8\u6210\u5224\u5b9a \\(mid\\) \u662f\u5426 \\(\\le \\dfrac{\\sum f_i}{\\sum t_i}\\) \u3002 \u4e5f\u5c31\u662f\u5224\u65ad\u73af\u4e0a \\(\\sum (mid\\times t_i -f_i)\\) \u662f\u5426 \\(\\le 0\\) \u3002 \u6240\u4ee5\u628a\u8fb9\u53d8\u6210 \\(t\\times mid-f\\) \u7684\u5f62\u5f0f\u8dd1 SPFA \u6700\u77ed\u8def\u3002 \u5982\u679c\u6709\u8d1f\u73af\u5219 \\(mid\\) \u4e0d\u53ef\u884c\uff0c\u5982\u679c\u6b63\u5e38\u6c42\u51fa\u6700\u77ed\u8def\uff0c\u8bc1\u660e \\(mid\\) \u53ef\u884c\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 /* * @Author: black_trees <black_trees@foxmail.com> * @Date: 2022-03-08 08:30:06 * @Last Modified by: black_trees <black_trees@foxmail.com> * @Last Modified time: 2022-03-08 09:12:38 */ /* * READ THIS BEFORE YOU WRITE YOUR CODE * ==================================== * @ Read the description carefully! * @ Pay attention to the data domain. * @ Keep calm. * @ Write down your thought on your draft. * @ Keep your mind clear. * @ Stabilize the coding speed. * ==================================== * READ THIS AGAIN BEFORE YOU START !!! */ #include <bits/stdc++.h> using namespace std ; using ldb = long double ; constexpr int si_n = 1e3 + 10 ; constexpr int si_m = 5e3 + 10 ; constexpr ldb eps = 1e-4 ; int L , P , tot = 0 ; int f [ si_n ], t [ si_m ]; double dis [ si_n ]; int cnt [ si_n ]; bool vis [ si_n ]; std :: queue < int > q ; struct Edge { int head , Next , ver , w ; } e [ si_m ]; inline void add ( int u , int v , int w ){ e [ ++ tot ]. ver = v , e [ tot ]. Next = e [ u ]. head , e [ u ]. head = tot , e [ tot ]. w = w ; } inline bool spfa ( ldb mid ){ for ( register int i = 1 ; i <= L ; ++ i ) cnt [ i ] = dis [ i ] = 0 , q . push ( i ), vis [ i ] = true ; while ( ! q . empty ()){ int u = q . front (); q . pop (); vis [ u ] = false ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; ldb w = e [ i ]. w * 1.0 * mid -1.0 * f [ u ]; if ( dis [ v ] > dis [ u ] + w ){ dis [ v ] = dis [ u ] + w , cnt [ v ] = cnt [ u ] + 1 ; if ( cnt [ u ] >= L ) return true ; if ( ! vis [ v ]) q . push ( v ), vis [ v ] = true ; } } } return false ; } int main (){ cin >> L >> P ; for ( register int i = 1 ; i <= L ; ++ i ) cin >> f [ i ]; for ( register int i = 1 , u , v ; i <= P ; ++ i ) cin >> u >> v >> t [ i ], add ( u , v , t [ i ]); ldb l = 0.0 , r = 1000.0 ; while ( r - l > eps ){ ldb mid = ( l + r ) / 2 ; if ( spfa ( mid )) l = mid ; else r = mid ; } return printf ( \"%.2Lf \\n \" , r ), 0 ; } 1 Tag : SPFA / 01 \u5206\u6570\u89c4\u5212 Acwing1165 \u5355\u8bcd\u73af \u03c8(\uff40\u2207\u00b4)\u03c8 01\u5206\u6570\u89c4\u5212\uff0c\u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u524d\u4e24\u4e2a\u5b57\u6bcd\u548c\u540e\u4e24\u4e2a\u5b57\u6bcd\u8fde\u8fb9\uff0c\u5355\u8bcd\u957f\u5ea6\u770b\u4f5c\u8fb9\u6743\u3002 \u8fd9\u6837\u5b50\u70b9\u7684\u6570\u91cf\u5c31\u964d\u4e0b\u6765\u4e86\u3002 \u8981\u6c42\u7684\u662f \\(\\max\\{\\dfrac{\\sum len}{n}\\}\\) \uff0c \\(n\\) \u662f\u9009\u7684\u5355\u8bcd\u7684\u4e2a\u6570\u3002 \u4e8c\u5206\u7b54\u6848\u540e\u8f6c\u5316\u4e3a\u6c42 \\(mid\\) \u662f\u5426 \\(\\le \\dfrac{\\sum len}{n}\\) \u3002 \u4e5f\u5c31\u662f \\(\\sum len_i- n\\times mid=\\sum(len_i-mid)\\) \u662f\u5426 \\(\\ge 0\\) \u6240\u4ee5\u628a\u8fb9\u6743\u5316\u6210 \\(len-mid\\) \u7684\u5f62\u5f0f\u8dd1 SPFA \u6700\u957f\u8def\u3002 \u5224\u65ad\u6709\u6ca1\u6709\u6b63\u73af\u5373\u53ef\u5224\u5b9a \\(mid\\) \u7684\u53ef\u884c\u6027\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 /* * @Author: black_trees <black_trees@foxmail.com> * @Date: 2022-03-08 09:30:27 * @Last Modified by: black_trees <black_trees@foxmail.com> * @Last Modified time: 2022-03-08 10:34:42 */ /* * READ THIS BEFORE YOU WRITE YOUR CODE * ==================================== * @ Read the description carefully! * @ Pay attention to the data domain. * @ Keep calm. * @ Write down your thought on your draft. * @ Keep your mind clear. * @ Stabilize the coding speed. * ==================================== * READ THIS AGAIN BEFORE YOU START !!! */ #include <bits/stdc++.h> using namespace std ; using ldb = long double ; constexpr int si_n = 7e2 + 10 ; constexpr int si_m = 1e5 + 10 ; constexpr int eps = 1e-4 ; int n , tot = 0 , cnt = 0 , num = 0 ; std :: map < pair < char , char > , int > rec ; inline void add ( char c , char cc ){ if ( rec . find ({ c , cc }) == rec . end ()) rec [{ c , cc }] =++ cnt ; } struct Edge { int head , ver , Next , w ; inline void Init (){ head = -1 ; } } e [ si_m ]; inline void add ( int u , int v , int w ){ e [ ++ tot ]. ver = v , e [ tot ]. Next = e [ u ]. head , e [ u ]. head = tot , e [ tot ]. w = w ; } ldb dis [ si_n ]; bool vis [ si_n ]; int Cnt [ si_n ]; std :: queue < int > q ; inline bool spfa ( ldb mid ){ for ( register int i = 1 ; i <= cnt ; ++ i ) vis [ i ] = true , q . push ( i ), Cnt [ i ] = 0 , dis [ i ] = 0 ; while ( ! q . empty ()){ int u = q . front (); q . pop (); vis [ u ] = false ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; ldb w = e [ i ]. w * 1.0 - mid ; if ( dis [ v ] < dis [ u ] + w ){ dis [ v ] = dis [ u ] + w , Cnt [ v ] = Cnt [ u ] + 1 ; if ( ++ num > 10000 ) return true ; if ( Cnt [ v ] >= cnt ) return true ; if ( ! vis [ v ]) q . push ( v ), vis [ v ] = true ; } } } return false ; } int main (){ while ( ~ scanf ( \"%d\" , & n ) && n ){ e -> Init (); num = 0 , tot = 0 , cnt = 0 ; rec . clear (); for ( register int i = 1 ; i <= n ; ++ i ){ string s ; cin >> s ; add ( s [ 0 ], s [ 1 ]), add ( s [ s . size () -2 ], s [ s . size () -1 ]); int u = rec [{ s [ 0 ], s [ 1 ]}], v = rec [{ s [ s . size () -2 ], s [ s . size () -1 ]}]; add ( u , v , s . size ()); } ldb l = 0.0 , r = 1000.0 ; if ( ! spfa ( 0 )){ puts ( \"No solution\" ); continue ; } while ( r - l > eps ){ ldb mid = ( l + r ) / 2 ; if ( spfa ( mid )) l = mid ; else r = mid ; } printf ( \"%.2Lf \\n \" , r ); } return 0 ; } // \u4e0d\u77e5\u9053\u662f\u4e0d\u662f WA \u7684\uff0c\u4e0d\u7ba1\u4e86 Trick 01 \u5206\u6570\u89c4\u5212\u7684\u65f6\u5019\u5982\u679c\u7ed3\u5408\u4e86\u56fe\u8bba\uff0c\u53ef\u4ee5\u6839\u636e\u5316\u51fa\u6765\u7684\u548c\u5f0f\u6539\u53d8\u8fb9\u6743\uff08\u5728 SPFA \u91cc\u9762\u6539\u5c31\u884c\uff0c\u4e0d\u7528\u91cd\u65b0\u5efa\u56fe\uff09\u3002 1 Tag : SPFA / 01 \u5206\u6570\u89c4\u5212 Acwing350 \u5de1\u903b \u03c8(\uff40\u2207\u00b4)\u03c8 \u8003\u8651 \\(K=1\\) \u7684\u60c5\u51b5\u3002 \u53d1\u73b0\u53ea\u9700\u8981\u5728\u76f4\u5f84\u7684\u4e24\u4e2a\u7aef\u70b9\u4e4b\u95f4\u8fde\u63a5\u4e00\u6761\u8fb9\u3002 \u7136\u540e\u8fd9\u6761\u76f4\u5f84\u5c31\u53ef\u4ee5\u53ea\u8d70\u4e00\u6b21\u3002 \u5fc5\u7136\u662f\u6700\u4f18\u7684\u3002 \u8003\u8651 \\(K=2\\) \u7684\u60c5\u51b5\u3002 \u4e3a\u4e86\u4e0d\u91cd\u590d\uff0c\u4e5f\u5c31\u662f\u4f7f\u5f97\u88ab\u51cf\u5c11\u7684\u8fb9\u5c3d\u91cf\u7684\u591a\u3002 \u5728 \u201c\u629b\u6389\u201d \u539f\u6765\u9009\u4e2d\u7684\u76f4\u5f84\u7684\u6811\u4e0a\u518d\u6c42\u4e00\u6b21\u76f4\u5f84\u3002 \u6ce8\u610f\u8fd9\u91cc\u4e0d\u662f\u771f\u7684\u53bb\u9664\uff0c\u800c\u662f\u8bf4\u4f7f\u5f97\u8fd9\u6761\u76f4\u5f84\u4e0d\u4f1a\u88ab\u9009\u3002 \u6240\u4ee5\u4e00\u4e2a Tricky \u7684\u505a\u6cd5\u5c31\u662f\u628a\u9009\u4e2d\u7684\u76f4\u5f84\u4e0a\u7684\u6240\u6709\u8fb9\u5168\u90e8\u8bbe\u7f6e\u6210 \\(-1\\) \u3002 \u4f46\u662f\u6ce8\u610f\uff0c\u5982\u679c\u8bbe\u7f6e\u6210 \\(-1\\) \uff0c\u5c31\u4e0d\u80fd\u7528 2-BFS \u6c42\u76f4\u5f84\u4e86\uff0c\u5c31\u53ea\u80fd DP\u3002 \u4f46\u662f\u4e3a\u4e86\u6c42\u65b9\u6848\u65b9\u4fbf\uff0c\u7b2c\u4e00\u6b21\u6c42\u76f4\u5f84\u8981\u7528 2-BFS \\(\\text{Trick:}\\) \u6c42\u76f4\u5f84\u7684\u65f6\u5019\u5982\u679c\u6709\u8d1f\u8fb9\u6743\u4e0d\u80fd\u4f7f\u7528 2-BFS\u3002 \u4f46\u662f 2-BFS \u76f8\u5bf9\u4e8e dp \u66f4\u5bb9\u6613\u6c42\u65b9\u6848\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 /* * @Author: black_trees <black_trees@foxmail.com> * @Date: 2022-03-17 15:06:41 * @Last Modified by: black_trees <black_trees@foxmail.com> * @Last Modified time: 2022-03-17 20:26:14 */ /* * READ THIS BEFORE YOU WRITE YOUR CODE * ==================================== * @ Read the description carefully! * @ Pay attention to the data domain. * @ Keep calm. * @ Write down your thought on your draft. * @ Keep your mind clear. * @ Stabilize the coding speed. * ==================================== * READ THIS AGAIN BEFORE YOU START !!! */ #include <queue> #include <cstring> #include <cstdio> #include <iostream> #include <algorithm> using namespace std ; constexpr int si_n = 1e5 + 10 ; constexpr int si_m = 2e5 + 10 ; int n , K , tot = 0 ; int head [ si_n ]; struct Edge { int ver , Next , w ; } e [ si_m ]; inline void add ( int u , int v , int w ){ e [ tot ] = ( Edge ){ v , head [ u ], w }, head [ u ] = tot ++ ; } struct Node { int nu , ans ; }; std :: queue < Node > q ; bool vis [ si_n ]; int pos = 0 , qos = 0 , ans = -1 ; inline void Bfs ( int st , int & qwq ){ memset ( vis , false , sizeof vis ), vis [ st ] = true , q . push (( Node ){ st , 0 }); while ( ! q . empty ()){ Node u = q . front (); q . pop (); if ( ans < u . ans ) qwq = u . nu , ans = u . ans ; for ( register int i = head [ u . nu ]; ~ i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( ! vis [ v ]) q . push (( Node ){ v , ans + w }), vis [ v ] = true ;; } } return ; } int dis [ si_n ]; inline void dfs ( int u , int fa ){ for ( register int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( v == fa ) continue ; dfs ( v , u ); ans = max ( ans , dis [ u ] + dis [ v ] + w ); dis [ u ] = max ( dis [ u ], dis [ v ] + w ); } return ; } inline bool Rev ( int u , int fa ){ if ( u == pos || u == qos ) return true ; int ok = 0 ; for ( register int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , & w = e [ i ]. w ; if ( v == fa ) continue ; if ( Rev ( v , u )) ok ++ , e [ i ]. w = e [ i ^ 1 ]. w = -1 ; } return ok == 1 ? true : false ; } int main (){ memset ( head , -1 , sizeof head ), memset ( dis , 0 , sizeof dis ); cin >> n >> K ; int res = ( n << 1 ); for ( register int i = 1 ; i < n ; ++ i ){ int u , v ; cin >> u >> v ; add ( u , v , 1 ), add ( v , u , 1 ); } // for(register int i=1;i<=n;++i){ // for(register int j=head[i];~j;j=e[j].Next){ // cout<<i<<\" \"<<e[j].ver<<\" \"<<e[j].w<<endl; // } // } Bfs ( 1 , pos ); ans = -1 ; Bfs ( pos , qos ); res -= ans ; // cout<<ans<<endl; // cout<<res+ans<<endl; // cout<<pos<<\" \"<<qos<<endl; if ( K == 1 ){ res -- ; return cout << res << endl , 0 ; } Rev ( 1 , 0 ); // for(register int i=1;i<=n;++i){ // for(register int j=head[i];~j;j=e[j].Next){ // cout<<i<<\" \"<<e[j].ver<<\" \"<<e[j].w<<endl; // } // } // cout<<ans<<endl; ans = -1 ; dfs ( 1 , 0 ); // for(register int i=1;i<=n;++i) cout<<dis[i]<<\" \"; cout<<endl; // cout<<ans<<endl; res -= ans ; return cout << res << endl , 0 ; } // If there exist negtive edge(s) on Tree, don't use 2-BFS to calc diameter. // should use dp. 1 Tag : \u6811\u7684\u76f4\u5f84 / \u65b9\u6848 Acwing354 \u5929\u5929\u7231\u8dd1\u6b65 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u9898\u548c\u96e8\u5929\u7684\u5c3e\u5df4\u5f88\u50cf\u3002 \u90fd\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u9897\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7136\u540e\u7ebf\u6bb5\u6811\u5408\u5e76\u3002 \u4e0d\u8fc7\u8fd9\u9898\u7684\u7b54\u6848\u4e0d\u662f\u6700\u503c\uff0c\u6709\u533a\u95f4\u53ef\u51cf\u6027\u3002 \u6240\u4ee5\u53ef\u4ee5\u4e0d\u7528\u7ebf\u6bb5\u6811\uff0c\u76f4\u63a5\u5728\u6bcf\u4e2a\u8282\u70b9\u8bb0\u5f55\u76f8\u5173\u7684\u64cd\u4f5c\u3002 \u7136\u540e dfs \u4e00\u6b21\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u9012\u5f52\u8fdb\u5b50\u6811\u5b8c\u4e4b\u540e\u7684\u7b54\u6848\u51cf\u53bb\u9012\u5f52\u4e4b\u524d\u7684\u5c31\u662f\u8fd9\u4e2a\u8282\u70b9\u7684\u7b54\u6848\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 /* * READ THIS BEFORE YOU WRITE YOUR CODE * ==================================== * @ Read the description carefully! * @ Pay attention to the data domain. * @ Keep calm. * @ Write down your thought on your draft. * @ Keep your mind clear. * @ Stabilize the coding speed. * ==================================== * Common Bugs * ==================================== * @ Unuse some written function (forget write dfs(v) in dfs(u)) ? * @ long long or precision ERROR ? * @ Output Format (%lld,%llu) ? * @ Special cases (n=1),(root is not 1) ? * @ Clear the array (head,vis) ? * @ Wrong variable name (i, but written j) ? * ==================================== * READ THIS AGAIN BEFORE YOU START !!! */ #pragma GCC optimize(\"Ofast\", \"inline\", \"-ffast-math\") #pragma GCC target(\"avx,sse2,sse3,sse4,mmx\") #include <queue> #include <vector> #include <cstring> #include <iostream> using namespace std ; constexpr int si = 3e5 + 10 ; int n , m ; int tot = 0 , head [ si ]; struct Edge { int ver , Next ;} e [ si << 1 ]; inline void add ( int u , int v ){ e [ tot ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot ++ ;} std :: queue < int > q ; std :: vector < int > a1 [ si ], b1 [ si ], a2 [ si ], b2 [ si ]; int c1 [ si << 1 ], c2 [ si << 1 ], ans [ si ]; int w [ si ], v [ si ]; int f [ si ][ 20 ], dep [ si ]; inline void Bfs (){ q . push ( 1 ), dep [ 1 ] = 1 ; while ( ! q . empty ()){ int u = q . front (); q . pop (); for ( register int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( dep [ v ]) continue ; dep [ v ] = dep [ u ] + 1 , f [ v ][ 0 ] = u ; for ( register int j = 1 ; j <= 19 ; ++ j ) f [ v ][ j ] = f [ f [ v ][ j -1 ]][ j -1 ]; q . push ( v ); } } } inline int Lca ( int u , int v ){ if ( dep [ u ] < dep [ v ]) swap ( u , v ); for ( register int i = 19 ; i >= 0 ; -- i ){ if ( dep [ f [ u ][ i ]] >= dep [ v ]) u = f [ u ][ i ]; } if ( u == v ) return u ; for ( register int i = 19 ; i >= 0 ; -- i ){ if ( f [ u ][ i ] != f [ v ][ i ]) u = f [ u ][ i ], v = f [ v ][ i ]; } return f [ u ][ 0 ]; } inline void dfs ( int x ){ int val1 = c1 [ dep [ x ] + w [ x ]], val2 = c2 [ w [ x ] - dep [ x ] + n ]; v [ x ] = 1 ; for ( register int i = head [ x ]; ~ i ; i = e [ i ]. Next ){ int y = e [ i ]. ver ; if ( v [ y ]) continue ; dfs ( y ); } for ( register int i = 0 ; i < a1 [ x ]. size (); i ++ ) c1 [ a1 [ x ][ i ]] ++ ; for ( register int i = 0 ; i < b1 [ x ]. size (); i ++ ) c1 [ b1 [ x ][ i ]] -- ; for ( register int i = 0 ; i < a2 [ x ]. size (); i ++ ) c2 [ a2 [ x ][ i ] + n ] ++ ; for ( register int i = 0 ; i < b2 [ x ]. size (); i ++ ) c2 [ b2 [ x ][ i ] + n ] -- ; ans [ x ] += c1 [ dep [ x ] + w [ x ]] - val1 + c2 [ w [ x ] - dep [ x ] + n ] - val2 ; } int main (){ cin >> n >> m , memset ( head , -1 , sizeof head ); for ( register int i = 1 ; i < n ; ++ i ){ int x , y ; cin >> x >> y ; add ( x , y ), add ( y , x ); } for ( register int i = 1 ; i <= n ; ++ i ) cin >> w [ i ]; Bfs (); for ( register int i = 1 ; i <= m ; ++ i ){ int x , y ; cin >> x >> y ; int z = Lca ( x , y ); a1 [ x ]. push_back ( dep [ x ]), b1 [ f [ z ][ 0 ]]. push_back ( dep [ x ]); a2 [ y ]. push_back ( dep [ x ] -2 * dep [ z ]), b2 [ z ]. push_back ( dep [ x ] -2 * dep [ z ]); } dfs ( 1 ); for ( register int i = 1 ; i <= n ; ++ i ) cout << ans [ i ] << \" \" ; cout << endl ; return 0 ; } 1 Tag : \u6811\u4e0a\u5dee\u5206 Acwing369 \u5317\u5927ACM\u961f\u7684\u8fdc\u8db3 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e00\u5f20\u6709\u5411\u56fe\uff0c\u6709\u4e24\u6b21\u4e58\u8f66\u7684\u673a\u4f1a\uff0c\u53ef\u4ee5\u518d\u4efb\u610f\u5730\u65b9\u4e0a\u4e0b\u8f66\uff0c\u4f46\u662f\u4e0b\u8f66\u4e86\u5c31\u7528\u4e86\u4e00\u6b21\u673a\u4f1a\u3002 \u6bcf\u6b21\u8fde\u7eed\u4e58\u8f66\u7684\u4e3e\u4f8b\u4e0d\u80fd\u8d85\u8fc7 \\(q\\) \u3002 \u6c42\u4ece \\(s \\to t\\) \u8981\u7ecf\u8fc7\u7684 \u201c\u5371\u9669\u8def\u6bb5\u201d \u7684\u957f\u5ea6\u6700\u5c0f\u662f\u591a\u5c11\u3002 \u201c\u5371\u9669\u8def\u6bb5\u201d\u5b9a\u4e49\u4e3a \\(s\\to t\\) \u7684\u5fc5\u7ecf\u8fb9\u3002 \\(s \\to t\\) \u7684\u5fc5\u7ecf\u8fb9\u7684\u610f\u601d\u5c31\u662f\uff0c\u4efb\u610f\u4e00\u6761\u4ece \\(s\\to t\\) \u7684\u8def\u5f84\uff0c\u4ed6\u4eec\u90fd\u5305\u542b\u7684\u8fb9\u3002 \u9996\u5148\u8003\u8651\u4e00\u4e2a\u6c42\u51fa\u6709\u5411\u56fe\u7684\u6865\uff08\u5fc5\u7ecf\u8fb9\uff09\u7684\u7b97\u6cd5\u3002 \u53ef\u4ee5\u4f7f\u7528\u652f\u914d\u6811\u5148\u6c42\u51fa\u5fc5\u7ecf\u70b9\u96c6\u7136\u540e\u505a\u3002 \u4e0d\u8fc7\u6709\u4e00\u79cd\u6bd4\u8f83\u597d\u5199\u7684 \\(\\text{O}(n)\\) DP \u505a\u6cd5\u3002 \u8bbe \\(dp_s[i]\\) \u8868\u793a\u4ece \\(s\\) \u5230 \\(i\\) \u7684\u8def\u5f84\u6761\u6570\u3002 \\(dp_t[i]\\) \u8868\u793a\u53cd\u56fe\u4e0a\u4ece \\(t\\) \u5230 \\(i\\) \u7684\u8def\u5f84\u6761\u6570\u3002 \u7ecf\u8fc7\u63a8\u5bfc\u4e0d\u96be\u53d1\u73b0\u4e24\u4e2a\u5145\u8981\u6761\u4ef6\uff1a \u4e00\u4e2a\u70b9 \\(x\\) \u662f\u5fc5\u7ecf\u70b9\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(dp_s[i] \\times dp_t[i] = dp_s[t]\\) \u3002 \u4e00\u6761\u8fb9 \\((u\\to v)\\) \u662f\u5fc5\u7ecf\u8fb9\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(dp_s[u] \\times dp_t[v] = dp_s[t]\\) \u3002 \u4f46\u662f \\(dp_s,dp_t\\) \u662f\u6307\u6570\u7ea7\u522b\u7684\uff0c __uint128_t \u90fd\u4e0d\u4e00\u5b9a\u53ef\u4ee5\u5e94\u4ed8\u3002 \u6240\u4ee5\u8003\u8651\u7c7b\u4f3c\u54c8\u5e0c\u7684\u601d\u60f3\uff0c\u7ed9\u4ed6\u4eec\u53d6\u6a21\u3002 \u7528\u7c7b\u4f3c\u53cc\u54c8\u5e0c\u7684\u601d\u60f3\uff0c\u540c\u65f6\u8bb0\u5f55\u4e24\u79cd\u6a21\u6570\u610f\u4e49\u4e0b\u7684\u503c\u3002 \u7136\u540e\u4e24\u4e2a\u503c\u76f8\u7b49\uff0c\u5f53\u4e14\u4ec5\u5f53\u4ed6\u4eec\u5728\u4e24\u79cd\u610f\u4e49\u4e0b\u7684\u503c\u90fd\u4e00\u6837\u3002 \u4e00\u822c\u53d6 \\(mod1=1e9+7,mod2=1e9+9\\) \u3002 \u7136\u540e\u8003\u8651\u6c42\u51fa \\(s \\to t\\) \u7684\u6700\u77ed\u8def\u3002 \u660e\u663e\u7684\uff0c\u8fd9\u4e9b\u5fc5\u7ecf\u8fb9\u80af\u5b9a\u5728\u4efb\u610f\u7684\u4e00\u6761\u6700\u77ed\u8def\u4e0a\u90fd\u51fa\u73b0\u4e86\uff0c\u6240\u4ee5\u968f\u4fbf\u9009\u54ea\u4e00\u6761\u90fd\u4e00\u6837\u3002 \u7136\u540e\u8003\u8651\u5982\u4f55\u7edf\u8ba1\u7b54\u6848\u3002 \u7ecf\u8fc7\u4e25\u8c28\u7684\u4e3e\u4f8b\uff0c\u753b\u56fe\u8bba\u8bc1\u53ef\u4ee5\u53d1\u73b0\uff0c\u76f4\u63a5\u7edf\u8ba1\u7684\u8bdd\u975e\u5e38\u5bb9\u6613\u7b97\u91cd\u590d\u3002 \u610f\u601d\u662f\u4e24\u4e2a\u8fde\u7eed\u6bb5\u91cd\u5408\u7684\u65f6\u5019\u4f1a\u975e\u5e38\u96be\u7b97\uff0c\u8981\u5206\u7279\u522b\u591a\u7c7b\u8ba8\u8bba\u3002 \u6240\u4ee5\u8003\u8651\u4e00\u4e2a\u975e\u5e38\u6709\u610f\u601d\u7684 Trick \uff1a Trick \u4ee5\u6bcf\u4e00\u4e2a\u70b9\u4e3a \u201c\u5206\u5272\u70b9\u201d\uff0c\u5206\u522b DP\uff0c\u8ba1\u7b97\u4e24\u8fb9\u7684\u7b54\u6848 \\(ds,dt\\) \uff0c\u91cd\u5408\u7684\u95ee\u9898\u5c31\u5f97\u5230\u4e86\u89e3\u51b3\u3002 \u7b49\u4ef7\u4e8e\u628a\u95ee\u9898\u8f6c\u5316\u6210\u4e86\u6c42\u53ea\u8986\u76d6\u4e00\u6b21\uff0c\u6865\u8fb9\u603b\u957f\u5ea6\u51cf\u53bb\u53ef\u4ee5\u8986\u76d6\u7684\u6700\u957f\u7684\u6865\u8fb9\u7684\u957f\u5ea6\u3002 \u7136\u540e\u6bcf\u4e00\u4e2a\u70b9\u7684\u7b54\u6848\u5c31\u662f \\(ds_i + dt_i\\) \uff0c\u679a\u4e3e\u6240\u6709\u70b9\u66f4\u65b0\u5373\u53ef\uff0c\u8fd9\u4e2a Trick \u5728 Acwing341 \u6700\u4f18\u8d38\u6613 \u90a3\u4e00\u9898\u4e5f\u7528\u5230\u4e86\u3002 \u672c\u9898\u7ed9\u7684\u4e0d\u662f DAG\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u5148\u62d3\u6251\u6392\u5e8f\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 #include <queue> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int N = 1e5 + 10 ; const int M = 2e5 + 10 ; const int mod = 1e9 + 7 ; // \u672c\u9898\u4e0d\u9700\u8981\u53cc\u53d6\u6a21 int ver [ M * 2 ], edge [ M * 2 ], nxt [ M * 2 ], head [ N ], tot ; int f [ 2 ][ N ], deg [ 2 ][ N ], dis [ N ], pre [ N ], n , m , s , t , Q ; bool bri [ M * 2 ]; int a [ N ], b [ N ], cnt ; int sum [ N ], sum_bri [ N ], ds [ N ], dt [ N ], ds_min [ N ]; int occur [ N ], first_occur [ N ]; queue < int > q ; void add ( int u , int v , int w ) { ver [ ++ tot ] = v , edge [ tot ] = w , nxt [ tot ] = head [ u ], head [ u ] = tot ; } void topsort ( int s , int bit ) { if ( bit == 0 ) { memset ( dis , 0x3f , sizeof ( dis )); dis [ s ] = 0 ; } f [ bit ][ s ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) if ( deg [ bit ][ i ] == 0 ) q . push ( i ); while ( ! q . empty ()) { int u = q . front (); q . pop (); for ( int i = head [ u ]; i ; i = nxt [ i ]) if (( i & 1 ) == bit ) { int v = ver [ i ]; f [ bit ][ v ] = ( f [ bit ][ v ] + f [ bit ][ u ]) % mod ; if ( bit == 0 && dis [ v ] > dis [ u ] + edge [ i ]) { dis [ v ] = dis [ u ] + edge [ i ]; pre [ v ] = i ; } if ( -- deg [ bit ][ v ] == 0 ) q . push ( v ); } } } int main () { int T ; cin >> T ; while ( T -- ) { memset ( head , 0 , sizeof ( head )), memset ( deg , 0 , sizeof ( deg )); memset ( f , 0 , sizeof ( f )), tot = 1 ; cnt = 0 ; memset ( bri , 0 , sizeof ( bri )), memset ( occur , 0 , sizeof ( occur )); cin >> n >> m >> s >> t >> Q ; s ++ ; t ++ ; for ( int i = 1 ; i <= m ; i ++ ) { int u , v , w ; cin >> u >> v >> w ; u ++ , v ++ ; add ( u , v , w ), add ( v , u , w ); deg [ 0 ][ v ] ++ , deg [ 1 ][ u ] ++ ; } topsort ( s , 0 ); if ( f [ 0 ][ t ] == 0 ) { puts ( \"-1\" ); continue ; } topsort ( t , 1 ); for ( int i = 2 ; i <= tot ; i += 2 ) { int u = ver [ i ^ 1 ], v = ver [ i ]; if (( long long ) f [ 0 ][ u ] * f [ 1 ][ v ] % mod == f [ 0 ][ t ]) { bri [ i ] = true ; } } for ( int u = 1 ; u <= n ; u ++ ) { for ( int i = head [ u ]; i ; i = nxt [ i ]) { if ( i & 1 ) continue ; int v = ver [ i ]; if ( occur [ v ] == u ) { bri [ i ] = false ; bri [ first_occur [ v ]] = false ; } else { occur [ v ] = u ; first_occur [ v ] = i ; } } } while ( t != s ) { a [ ++ cnt ] = edge [ pre [ t ]]; b [ cnt ] = bri [ pre [ t ]]; t = ver [ pre [ t ] ^ 1 ]; } for ( int i = 1 ; i <= cnt ; i ++ ) { sum [ i ] = sum [ i - 1 ] + a [ i ]; sum_bri [ i ] = sum_bri [ i - 1 ] + ( b [ i ] ? a [ i ] : 0 ); } ds_min [ 0 ] = 1 << 30 ; for ( int i = 1 , j = 0 ; i <= cnt ; i ++ ) { while ( sum [ i ] - sum [ j ] > Q ) j ++ ; ds [ i ] = sum_bri [ j ]; if ( j > 0 && b [ j ]) ds [ i ] -= min ( a [ j ], Q - ( sum [ i ] - sum [ j ])); ds_min [ i ] = min ( ds [ i ], ds_min [ i - 1 ] + ( b [ i ] ? a [ i ] : 0 )); } for ( int i = cnt , j = cnt + 1 ; i ; i -- ) { while ( sum [ j - 1 ] - sum [ i - 1 ] > Q ) j -- ; dt [ i ] = sum_bri [ cnt ] - sum_bri [ j - 1 ]; if ( j <= cnt && b [ j ]) dt [ i ] -= min ( a [ j ], Q - ( sum [ j - 1 ] - sum [ i - 1 ])); } int ans = 1 << 30 ; for ( int i = 1 ; i <= cnt ; i ++ ) ans = min ( ans , dt [ i ] + ds_min [ i - 1 ]); for ( int i = 1 , j = 0 ; i <= cnt ; i ++ ) { while ( sum [ i ] - sum [ j ] > 2 * Q ) j ++ ; int temp = sum_bri [ j ]; if ( j > 0 && b [ j ]) temp -= min ( a [ j ], 2 * Q - ( sum [ i ] - sum [ j ])); ans = min ( ans , temp + sum_bri [ cnt ] - sum_bri [ i ]); } cout << ans << endl ; } } 1 Tag : \u6709\u5411\u56fe\u7684\u5fc5\u7ecf\u8fb9 / DP / \u62d3\u6251\u6392\u5e8f Acwing386 \u793e\u4ea4\u7f51\u7edc \u03c8(\uff40\u2207\u00b4)\u03c8 \u8981\u6c42\u7684\u5f0f\u5b50\u662f\uff1a \\[I(v) = \\sum\\limits_{s \\not=v,t\\not=v}\\dfrac{C_{s,t}(v)}{C_{s,t}}\\] \u4e0b\u9762\u7684\u662f \\(s \\to t\\) \u7684\u6700\u77ed\u8def\u6761\u6570 \u4e0a\u9762\u7684\u662f \\(s\\to t\\) \u7684\u6700\u77ed\u8def\u7ecf\u8fc7 \\(v\\) \u7684\u6761\u6570\u3002 \u6ce8\u610f\u8fd9\u91cc\u662f\u6709\u5e8f\u70b9\u5bf9\uff0c\u8981\u7b97\u4e24\u6b21\u3002 \u6570\u636e\u8303\u56f4\u662f \\(n = 1e2\\) \u3002 \u7136\u540e \\(s\\to v\\to t\\) \uff0c\u52a0\u4e0a\u591a\u6e90\u8be2\u95ee\uff0c\u4e0d\u96be\u60f3\u5230 Floyd \u89e3\u51b3\u3002 \u5b9e\u9645\u4e0a\u8981\u505a\u7684\u5c31\u662f\u5728 Floyd \u8dd1\u6700\u77ed\u8def\u7684\u65f6\u5019\u6700\u77ed\u8def\u8ba1\u6570\u5373\u53ef\u3002 \u7136\u540e\u4e0a\u9762\u7684\u90e8\u5206\u53ea\u9700\u8981\u5224\u5b9a \\(dis_{s,v} + dis_{v,t} = dis_{s,t}\\) \u5373\u53ef\u3002 \u7136\u540e\u7b54\u6848\u7d2f\u52a0 \\(cnt_{s,v} \\times cnt_{v,t}\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; using i64 = long long ; const int si = 1e2 + 10 ; int n , m ; int dis [ si ][ si ]; i64 cnt [ si ][ si ]; int main () { memset ( dis , 0x3f , sizeof dis ); memset ( cnt , 0 , sizeof cnt ); cin >> n >> m ; for ( int i = 1 ; i <= m ; ++ i ) { int u , v , w ; cin >> u >> v >> w ; dis [ u ][ v ] = dis [ v ][ u ] = min ( dis [ u ][ v ], w ); cnt [ u ][ v ] = cnt [ v ][ u ] = 1 ; } for ( int i = 1 ; i <= n ; ++ i ) dis [ i ][ i ] = 0 ; for ( int k = 1 ; k <= n ; ++ k ) { for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { if ( dis [ i ][ j ] > dis [ i ][ k ] + dis [ k ][ j ]) { dis [ i ][ j ] = dis [ i ][ k ] + dis [ k ][ j ]; cnt [ i ][ j ] = 1l l * cnt [ i ][ k ] * cnt [ k ][ j ]; } else if ( dis [ i ][ j ] == dis [ i ][ k ] + dis [ k ][ j ]) { cnt [ i ][ j ] += 1l l * cnt [ i ][ k ] * cnt [ k ][ j ]; } } } } for ( int k = 1 ; k <= n ; ++ k ) { double ans = 0.0 ; for ( int i = 1 ; i <= n ; ++ i ) { if ( i == k ) continue ; for ( int j = 1 ; j <= n ; ++ j ) { // * s -> t \u4e0d\u4e00\u5b9a\u662f\u65e0\u5e8f\u6570\u5bf9\uff0ct -> s \u4e5f\u53ef\u4ee5\uff0c\u6240\u4ee5\u4e0d\u80fd\u4ece i + 1 \u5f00\u59cb. if ( i == j || j == k ) continue ; if ( dis [ i ][ j ] == dis [ i ][ k ] + dis [ k ][ j ]) { ans += (( 1.0 * ( cnt [ i ][ k ] * cnt [ k ][ j ])) / ( 1.0 * cnt [ i ][ j ])); } // ! \u60e8\u75db\u6559\u8bad \uff1a\u6709\u9664\u6cd5\u4e14 1.0 \u00d7 \u67d0\u4e2a\u6570\u7684\u65f6\u5019\u8981\u7528\u62ec\u53f7\u62ec\u8d77\u6765\uff0c\u4e0d\u7136\u4f1a /1.0 \u7136\u540e\u4e58\u4e0a\u539f\u6765\u8981\u9664\u7684\u6570\u3002 } } printf ( \"%.3lf \\n \" , ans ); } return 0 ; } 1 Tag : \u6700\u77ed\u8def\u8ba1\u6570 / \u7ecf\u8fc7\u6307\u5b9a\u70b9\u6700\u77ed\u8def\u8ba1\u6570 *Acwing389 \u76f4\u5f84 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6c42\u6811\u7684\u76f4\u5f84\u7684\u5fc5\u7ecf\u8fb9\u3002 \u53d1\u73b0\u8981\u6c42\u7684\u5c31\u662f\u6240\u6709\u76f4\u5f84\u7684\u516c\u5171\u8fb9\u3002 \u53ef\u4ee5\u5148\u6c42\u51fa\u76f4\u5f84\u4e4b\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u5224\u65ad\u5b83\u662f\u4e0d\u662f\u4e24\u6761\u76f4\u5f84\u7684\u4ea4\u70b9\u3002 \u7136\u540e\u5206\u522b\u627e\u6240\u6709\u4ea4\u70b9\u70b9\u5bf9\u91cc\u9762\u6700\u9760\u4e2d\u95f4\u7684\u4e00\u5bf9\u5c31\u884c\u4e86\u3002 \u8fd8\u6709\u4e00\u79cd\u66f4\u597d\u7684\u505a\u6cd5\u3002 \\(dfs\\) \u8bb0\u5f55\u5f53\u524d\u8def\u5f84\u4e0a\u7684\u516c\u5171\u8fb9\u6761\u6570\u3002 \u8bb0 \\(las\\) \u8868\u793a\u6700\u540e\u4f7f\u76f4\u5f84\u66f4\u65b0\u7684\u8282\u70b9\u3002 \u7136\u540e\u5982\u679c\u51fa\u73b0\u7c7b\u4f3c \\(d[u] = x, d[v1] + w1 = y, d[v2] + w2 = y\\) \u7684\u60c5\u51b5 \u5047\u8bbe \\(v1\\) \u662f\u66f4\u5148\u8bbf\u95ee\u7684\uff0c \u5982\u679c \\(x > y\\) , \u90a3\u4e48\u9700\u8981\u628a \\(u -> v1 -> subtree(v1)\\) \u5f53\u4e2d\u7684\u8fb9\u4ece \\(cnt\\) \u91cc\u51cf\u53bb \u3002 \u5982\u679c \\(x \\le y\\) , \u90a3\u4e48\u9700\u8981\u628a \\(d[u]\\) \u5f80\u4e0b\u8d70\u5bf9\u5e94\u7684\u8fb9\u4ece \\(cnt\\) \u91cc\u51cf\u53bb\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 #include <queue> #include <vector> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int n , m , cnt , las ; vector < pair < int , int > > G [ si ]; i64 d [ si ], ans ; int dfs ( int u , int fa , int dep ) { int res = dep ; // * ans = \u76f4\u5f84\u957f\u5ea6 // * cnt = \u516c\u5171\u8fb9\u6761\u6570\uff08\u6700\u7ec8\u7b54\u6848\uff09 for ( auto & [ v , w ] : G [ u ]) { if ( v == fa ) continue ; int cur = dfs ( v , u , dep + 1 ); if ( ans < d [ u ] + d [ v ] + w ) { ans = d [ u ] + d [ v ] + w , las = dep , cnt = res + cur - dep * 2 ; // ? \u76f4\u5f84\u88ab\u66f4\u65b0\uff0c\u8bb0\u5f55 las \u5e76\u66f4\u65b0 cnt\u3002 } else if ( ans == d [ u ] + d [ v ] + w ) { if ( d [ v ] + w >= d [ u ]) { cnt = cur - las ; } else { cnt = res - las ; } // ? \u51fa\u73b0\u7c7b\u4f3c d[u] = x, d[v1] + w1 = y, d[v2] + w2 = y \u7684\u60c5\u51b5 // ? \u5047\u8bbe v1 \u662f\u66f4\u5148\u8bbf\u95ee\u7684\uff0c // ? 1. \u5982\u679c x > y, \u90a3\u4e48\u9700\u8981\u628a u -> v1 -> subtree(v1) \u5f53\u4e2d\u7684\u8fb9\u4ece cnt \u91cc\u51cf\u53bb // ? 2. \u5982\u679c x <= y, \u90a3\u4e48\u9700\u8981\u628a d[u] \u5f80\u4e0b\u8d70\u5bf9\u5e94\u7684\u8fb9\u4ece cnt \u91cc\u51cf\u53bb\u3002 // * cur \u662f 2 \u5bf9\u5e94\u7684\u3002 // * res \u662f 1 \u5bf9\u5e94\u7684\u3002 // TODO : \u5177\u4f53\u7684\u53ef\u80fd\u8fd8\u8981\u5206\u6790\u4e00\u4e0b } if ( d [ u ] < d [ v ] + w ) { d [ u ] = d [ v ] + w , res = cur ; } else if ( d [ u ] == d [ v ] + w ) { res = dep ; } } return res ; // ? \u5f53\u524d\u5206\u652f\u7684\u516c\u5171\u8fb9\u957f\u5ea6\u3002 } int main () { cin >> n ; for ( int i = 1 ; i < n ; ++ i ) { int u , v , w ; cin >> u >> v >> w ; G [ u ]. emplace_back ( v , w ); G [ v ]. emplace_back ( u , w ); } dfs ( 1 , 0 , 1 ); cout << ans << endl << cnt << endl ; return 0 ; } Acwing390 \u9003\u5b66\u7684\u5c0f\u5b69 \u03c8(\uff40\u2207\u00b4)\u03c8 \u53ef\u4ee5\u53d1\u73b0\uff0c\u7b54\u6848\u5c31\u662f\u679a\u4e3e\u76f4\u5f84\u4e0a\u6bcf\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u51fa\u53d1\u70b9\u7684\u7b54\u6848\u7684\u6700\u5927\u503c\u3002 \u90a3\u4e48\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\uff0c\u6c42\u5b8c LCA \u4e4b\u540e\uff0c\u5982\u679c\u6811\u662f\u5e26\u6743\u7684\uff0c\u8be5\u5982\u4f55\u5feb\u901f\u8be2\u95ee\u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\uff1f \u4ecd\u65e7\u662f\u500d\u589e\uff0c\u968f\u7740\u500d\u589e LCA \u7684 \\(f_{i,j}\\) \u540c\u6b65\u8bb0\u5f55\u4e00\u4e2a \\(dis_{i,j}\\) \u5373\u53ef\uff0c\u67e5\u8be2\u65f6\u505a\u4e00\u904d\u8df3 LCA \u7684\u8fc7\u7a0b\uff0c \u6bcf\u6b21\u4ece \\(u/v\\) \u5f80\u4e0a\u8df3 \\(2^i\\) \u6b65\u7684\u65f6\u5019\uff0c\u90fd\u8ba9\u7b54\u6848\u7d2f\u52a0\u4e0a \\(dis_{u/v,i}\\) \u5373\u53ef\u3002 Warning \u6ce8\u610f\uff0c \u8981\u5148\u7d2f\u52a0\u6743\u503c\u4e4b\u540e\u518d\u8df3 \uff0c\u4e0d\u7136\u4f1a\u51fa\u95ee\u9898\u3002 \u8fd9\u79cd\u7c7b\u4f3c\u7684\u601d\u60f3\u4e5f\u53ef\u4ee5\u5728\u6b21\u5c0f\u751f\u6210\u6811\u91cc\u9762\u4f53\u73b0\uff0c\u540c\u6b65\u8bb0\u5f55 \\(u\\) \u5230 \\(2^i\\) \u7ea7\u7956\u5148\u8def\u5f84\u4e0a\u7684\u6700\u503c/\u6b21\u6700\u503c\u3002 \u7136\u540e\u7528\u7c7b\u4f3c\u8df3 LCA \u7684\u65b9\u5f0f\u6c42\u4efb\u610f\u4e24\u70b9 \\((u,v)\\) \u7684\u8def\u5f84\u4e0a\u7684\u6700\u503c/\u6b21\u6700\u503c\u3002 \u4ee3\u7801\uff08\u6b64\u5904\u5e76\u6ca1\u6709\u540c\u6b65\u8bb0\u5f55 \\(dis\\) \uff0c\u800c\u662f\u5148\u6c42\u51fa\u6240\u6709\u7684 \\(f\\) \uff0c\u7136\u540e\u518d\u6c42 \\(dis\\) \uff09\uff1a Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 int dep [ si ], f [ si ][ 20 ], lg ; i64 dis [ si ][ 20 ]; void dfs ( int u , int fa ) { dep [ u ] = dep [ fa ] + 1 , f [ u ][ 0 ] = fa ; for ( int i = 1 ; i <= lg ; ++ i ) f [ u ][ i ] = f [ f [ u ][ i - 1 ]][ i - 1 ]; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver , w = e [ i ]. w ; if ( v == fa ) continue ; dfs ( v , u ), dis [ v ][ 0 ] = w ; // \u521d\u59cb\u5316 dis\u3002 // \u5982\u679c\u4f60\u662f\u5728dfs \u8fc7\u7a0b\u4e2d\u540c\u6b65\u8bb0\u5f55\uff0c\u9700\u8981\u5148 dis[v][0] = w \u7136\u540e\u518d dfs\u3002 } } i64 Dis ( int u , int v ) { i64 ret = 0 ; if ( dep [ u ] < dep [ v ]) swap ( u , v ); for ( int i = lg ; i >= 0 ; -- i ) { if ( dep [ f [ u ][ i ]] >= dep [ v ]) ret += dis [ u ][ i ], u = f [ u ][ i ]; } if ( u == v ) return ret ; for ( int i = lg ; i >= 0 ; -- i ) { if ( f [ u ][ i ] != f [ v ][ i ]) ret += dis [ u ][ i ], ret += dis [ v ][ i ], u = f [ u ][ i ], v = f [ v ][ i ]; // \u4e00\u5b9a\u8981\u5148\u52a0\u4e0a\u7136\u540e\u518d\u8df3\uff01\uff01\uff01\uff01\uff01 // \u65f6\u9694\u4e00\u4e2a\u6708\u5199\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u7684\u65f6\u5019\uff0c // \u53d1\u73b0\u81ea\u5df1\u4ee3\u7801\u91cc\u6709\u8fd9\u4e2a\u95ee\u9898 } return ret + dis [ u ][ 0 ] + dis [ v ][ 0 ]; // \u6700\u540e\u8fd8\u6ca1\u6709\u4f1a\u5408\uff0c\u4e0d\u8981\u5fd8\u8bb0\u52a0\u5b83\u4eec\u5230 lca \u7684\u6743\u503c\u3002 } // in main() lg = ( int )( log ( n ) / log ( 2 )) + 1 ; dfs ( 1 , 0 ); for ( int j = 1 ; j <= lg ; ++ j ) { for ( int i = 1 ; i <= n ; ++ i ) { dis [ i ][ j ] = dis [ i ][ j - 1 ] + dis [ f [ i ][ j - 1 ]][ j - 1 ]; // \u4ece\u4e24\u4e2a\u5c0f\u6bb5\u7684\u4fe1\u606f\u5408\u5e76\u5230\u5927\u6bb5\u7684\u4fe1\u606f\u3002 } } \u53e6\u5916\u4e00\u79cd\u505a\u6cd5 \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u8bb0\u5f55\u4e24\u4e2a \\(dep\\) \uff0c\u4e00\u4e2a\u662f\u628a\u6811\u770b\u4f5c\u65e0\u6743\u6811\u65f6\u5019\u7684 \\(dep\\) \uff0c\u53e6\u5916\u4e00\u4e2a\u662f\u628a\u6811\u770b\u4f5c\u5e26\u6743\u6811\u65f6\u5019\u7684 \\(dep\\) \u3002 \u7136\u540e\u5c31\u53ef\u4ee5\u7ee7\u7eed\u7528 \\(d[u] + d[v] - 2d[lca]\\) \u4e86\u3002 1 Tag \uff1a \u6811\u7684\u76f4\u5f84 / \u5e26\u6743\u6811\u4e0a\u70b9\u5bf9\u8ddd\u79bb","title":"2022\u5e743\u6708\u7ec3\u4e60\u8bb0\u5f55"},{"location":"rec/tricks-for-2022-03/#tricks","text":"","title":"\u4e09\u6708 Tricks \u6574\u7406"},{"location":"rec/tricks-for-2022-03/#zjoi2007","text":"\u7ed9\u5b9a\u4e00\u5f20\u6709\u5411\u56fe \\(G\\) \u3002 \u79f0\u4e00\u4e2a\u5bfc\u51fa\u5b50\u56fe\u662f\u201c\u534a\u8fde\u901a\u7684\u201d\uff0c\u5f53\u4e14\u4ec5\u5f53\u5bf9\u4e8e\u5bfc\u51fa\u5b50\u56fe\u5f53\u4e2d\u7684\u4efb\u610f\u70b9\u5bf9 \\((u,v)\\) \u3002 \u90fd\u6709 \\(u\\) \u53ef\u4ee5\u5230\u8fbe \\(v\\) \u6216\u8005 \\(v\\) \u53ef\u4ee5\u5230\u8fbe \\(u\\) \u3002 \u6c42 \\(G\\) \u7684\u6700\u5927\u534a\u8fde\u901a\u5b50\u56fe\u7684\u5927\u5c0f\uff0c\u548c\u4e2a\u6570\u3002 \u9996\u5148\u53d1\u73b0\u5f3a\u8fde\u901a\u5206\u91cf\u5fc5\u7136\u662f\u4e00\u4e2a\u534a\u8054\u901a\u5b50\u56fe\u3002 \u6240\u4ee5\u5148\u7f29\u70b9\u5f97\u5230\u4e00\u4e2a DAG\u3002 \u53d1\u73b0\u6700\u5927\u534a\u8054\u901a\u5b50\u56fe\u5fc5\u7136\u662f DAG \u4e0a\u7684\u4e00\u6761\u6700\u957f\u94fe\u3002 \u5e76\u4e14\u8fd9\u4e2a\u6700\u957f\u94fe\u4e0d\u80fd\u5206\u5c94\u3002 \u90a3\u4e48\u5728 DAG \u4e0a\u8fdb\u884c\u9012\u63a8\u6c42\u6700\u957f\u8def\u5373\u53ef\u3002 \u56e0\u4e3a Tarjan \u7f29\u70b9\u4f1a\u5f97\u5230\u9006\u62d3\u6251\u5e8f\uff0c\u6240\u4ee5\u4e0d\u7528\u62d3\u6251\u6392\u5e8f\u4e86\uff0c\u5012\u8fc7\u6765\u5c31\u884c\u3002 \u9898\u76ee\u8981\u6c42\u8bb0\u5f55\u65b9\u6848\uff0c\u90a3\u4e48\u5c31\u5728 \\(f_i\\) \u8fdb\u884c\u8f6c\u79fb\u7684\u65f6\u5019\u8bb0\u5f55\u4e00\u4e2a \\(g_i\\) \u8868\u793a \\(f_i\\) \u8fd9\u4e2a\u72b6\u6001\u5bf9\u5e94\u7684\u65b9\u6848\u3002 \u9898\u76ee\u53ef\u80fd\u6709\u91cd\u8fb9\uff0c\u6240\u4ee5\u9700\u8981\u8bb0\u5f55\u6bcf\u4e00\u4e2a\u8282\u70b9\u4e0a\u4e00\u6b21\u662f\u4ece\u54ea\u91cc\u8f6c\u79fb\u7684\uff0c\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u3002 \u521d\u59cb\u5316 \\(f_i=size_{scc_{i}},g_i=1\\) \u3002 \u6838\u5fc3\u4ee3\u7801\uff1a Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 for ( register int u = cnt ; u >= 1 ; -- u ) f [ u ] = scc [ u ]. size (), g [ u ] = 1 ; for ( register int u = cnt ; u >= 1 ; -- u ){ for ( register int i = ee [ u ]. head ; i ; i = ee [ i ]. Next ){ int v = ee [ i ]. ver ; if ( las [ v ] == u ) continue ; las [ v ] = u ; if ( f [ u ] + ( int ) scc [ v ]. size () > f [ v ]) f [ v ] = f [ u ] + ( int ) scc [ v ]. size (), g [ v ] = g [ u ]; else if ( f [ u ] + ( int ) scc [ v ]. size () == f [ v ]) g [ v ] = ( g [ v ] + g [ u ]) % mod ; } } int res1 = 0 , res2 = 0 ; for ( register int i = 1 ; i <= cnt ; ++ i ){ if ( f [ i ] > res1 ) res1 = f [ i ], res2 = g [ i ]; else if ( f [ i ] == res1 ) res2 = ( res2 + g [ i ]) % mod ; } return printf ( \"%d \\n %d \\n \" , res1 , res2 ), 0 ; Tricks Tarjan \u7f29\u5b8c\u70b9\u5f97\u5230\u7684\u5e8f\u5217\u662f\u9006\u62d3\u6251\u5e8f\u3002 DAG \u4e0a DP \u4e00\u822c\u662f\u5f80\u524d\u63a8\u800c\u4e0d\u662f\u5f80\u540e\u627e\u524d\u9a71\u7684\u65b9\u5f0f\u3002 DAG \u4e0a DP \u6709\u53ef\u80fd\u9700\u8981\u8003\u8651\u91cd\u8fb9\u3002 Warning \u8fd8\u6709\uff0c\u5982\u679c\u975e\u8981\u5728 SCC \u540e\u5229\u7528\u539f\u56fe\u5efa\u8fb9\uff0c\u4e00\u5b9a\u8981\u624b\u5199\u4e00\u4e2a for \u3002 \u5982\u679c\u662f\u8fd9\u6837\u5199\u53ea\u4f1a\u6e05\u7a7a \\(e_0\\) 1 2 3 4 5 6 struct Edge { int head , ver , Next ; inline void Init (){ head = -1 ; } } e [ si_m ] e -> Init (); \u4e8c\u7ef4\u7684 std::bitset<> \u4e4b\u7c7b\u7684 STL \u53ef\u4ee5\u8fd9\u4e48\u5199\uff08\u4f46\u662f\u5e38\u6570\u5927\uff09\uff0c\u662f\u56e0\u4e3a\u5b83\u91cd\u8f7d\u4e86 [] \uff0c\u672c\u8d28\u4e0a\u5b83\u662f\u4e00\u4e2a \u7c7b\u4f3c \u8fd9\u6837\u7684\u4e1c\u897f\uff1a 1 2 3 4 5 struct Bitset { bool bb [ si ]; inline bool * operator [] ( int idx ){ return & bb [ idx ]; } } b ; // \u4e71\u5199\u7684\uff0c\u7406\u89e3\u5c31\u884c \u4e5f\u5c31\u662f\u8bf4\u5b83\u5e76\u4e0d\u662f\u4e00\u4e2a bitset \u6570\u7ec4\uff0c\u4ecd\u7136\u53ea\u662f\u4e00\u4e2a bitset\u3002 1 Tag : \u5f3a\u8fde\u901a\u5206\u91cf / DAG\u4e0a\u7684DP / \u6c42\u65b9\u6848","title":"[ZJOI2007] \u6700\u5927\u534a\u8054\u901a\u5b50\u56fe"},{"location":"rec/tricks-for-2022-03/#acwing361","text":"\u7ed9\u5b9a\u4e00\u5f20\u56fe\uff0c\u6c42\u56fe\u4e0a\u7684\u4e00\u4e2a\u73af\u4f7f\u5f97 \u201c\u73af\u4e0a\u5404\u70b9\u7684\u6743\u503c\u4e4b\u548c\u201d\u9664\u4ee5\u201c\u73af\u4e0a\u5404\u8fb9\u7684\u6743\u503c\u4e4b\u548c\u201d\u6700\u5927\u3002 01\u5206\u6570\u89c4\u5212\uff0c\u628a\u70b9\u6743\u79fb\u52a8\u5230\u8fb9\u6743\u4e0a\uff0c \u56e0\u4e3a\u6c42\u7684\u662f \\(\\max\\{\\dfrac{\\sum f_i}{\\sum t_i}\\}\\) \u3002 \u4e8c\u5206\u7b54\u6848\u4e4b\u540e\u53d8\u6210\u5224\u5b9a \\(mid\\) \u662f\u5426 \\(\\le \\dfrac{\\sum f_i}{\\sum t_i}\\) \u3002 \u4e5f\u5c31\u662f\u5224\u65ad\u73af\u4e0a \\(\\sum (mid\\times t_i -f_i)\\) \u662f\u5426 \\(\\le 0\\) \u3002 \u6240\u4ee5\u628a\u8fb9\u53d8\u6210 \\(t\\times mid-f\\) \u7684\u5f62\u5f0f\u8dd1 SPFA \u6700\u77ed\u8def\u3002 \u5982\u679c\u6709\u8d1f\u73af\u5219 \\(mid\\) \u4e0d\u53ef\u884c\uff0c\u5982\u679c\u6b63\u5e38\u6c42\u51fa\u6700\u77ed\u8def\uff0c\u8bc1\u660e \\(mid\\) \u53ef\u884c\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 /* * @Author: black_trees <black_trees@foxmail.com> * @Date: 2022-03-08 08:30:06 * @Last Modified by: black_trees <black_trees@foxmail.com> * @Last Modified time: 2022-03-08 09:12:38 */ /* * READ THIS BEFORE YOU WRITE YOUR CODE * ==================================== * @ Read the description carefully! * @ Pay attention to the data domain. * @ Keep calm. * @ Write down your thought on your draft. * @ Keep your mind clear. * @ Stabilize the coding speed. * ==================================== * READ THIS AGAIN BEFORE YOU START !!! */ #include <bits/stdc++.h> using namespace std ; using ldb = long double ; constexpr int si_n = 1e3 + 10 ; constexpr int si_m = 5e3 + 10 ; constexpr ldb eps = 1e-4 ; int L , P , tot = 0 ; int f [ si_n ], t [ si_m ]; double dis [ si_n ]; int cnt [ si_n ]; bool vis [ si_n ]; std :: queue < int > q ; struct Edge { int head , Next , ver , w ; } e [ si_m ]; inline void add ( int u , int v , int w ){ e [ ++ tot ]. ver = v , e [ tot ]. Next = e [ u ]. head , e [ u ]. head = tot , e [ tot ]. w = w ; } inline bool spfa ( ldb mid ){ for ( register int i = 1 ; i <= L ; ++ i ) cnt [ i ] = dis [ i ] = 0 , q . push ( i ), vis [ i ] = true ; while ( ! q . empty ()){ int u = q . front (); q . pop (); vis [ u ] = false ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; ldb w = e [ i ]. w * 1.0 * mid -1.0 * f [ u ]; if ( dis [ v ] > dis [ u ] + w ){ dis [ v ] = dis [ u ] + w , cnt [ v ] = cnt [ u ] + 1 ; if ( cnt [ u ] >= L ) return true ; if ( ! vis [ v ]) q . push ( v ), vis [ v ] = true ; } } } return false ; } int main (){ cin >> L >> P ; for ( register int i = 1 ; i <= L ; ++ i ) cin >> f [ i ]; for ( register int i = 1 , u , v ; i <= P ; ++ i ) cin >> u >> v >> t [ i ], add ( u , v , t [ i ]); ldb l = 0.0 , r = 1000.0 ; while ( r - l > eps ){ ldb mid = ( l + r ) / 2 ; if ( spfa ( mid )) l = mid ; else r = mid ; } return printf ( \"%.2Lf \\n \" , r ), 0 ; } 1 Tag : SPFA / 01 \u5206\u6570\u89c4\u5212","title":"Acwing361 \u89c2\u5149\u5976\u725b"},{"location":"rec/tricks-for-2022-03/#acwing1165","text":"01\u5206\u6570\u89c4\u5212\uff0c\u628a\u6bcf\u4e2a\u5355\u8bcd\u7684\u524d\u4e24\u4e2a\u5b57\u6bcd\u548c\u540e\u4e24\u4e2a\u5b57\u6bcd\u8fde\u8fb9\uff0c\u5355\u8bcd\u957f\u5ea6\u770b\u4f5c\u8fb9\u6743\u3002 \u8fd9\u6837\u5b50\u70b9\u7684\u6570\u91cf\u5c31\u964d\u4e0b\u6765\u4e86\u3002 \u8981\u6c42\u7684\u662f \\(\\max\\{\\dfrac{\\sum len}{n}\\}\\) \uff0c \\(n\\) \u662f\u9009\u7684\u5355\u8bcd\u7684\u4e2a\u6570\u3002 \u4e8c\u5206\u7b54\u6848\u540e\u8f6c\u5316\u4e3a\u6c42 \\(mid\\) \u662f\u5426 \\(\\le \\dfrac{\\sum len}{n}\\) \u3002 \u4e5f\u5c31\u662f \\(\\sum len_i- n\\times mid=\\sum(len_i-mid)\\) \u662f\u5426 \\(\\ge 0\\) \u6240\u4ee5\u628a\u8fb9\u6743\u5316\u6210 \\(len-mid\\) \u7684\u5f62\u5f0f\u8dd1 SPFA \u6700\u957f\u8def\u3002 \u5224\u65ad\u6709\u6ca1\u6709\u6b63\u73af\u5373\u53ef\u5224\u5b9a \\(mid\\) \u7684\u53ef\u884c\u6027\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 /* * @Author: black_trees <black_trees@foxmail.com> * @Date: 2022-03-08 09:30:27 * @Last Modified by: black_trees <black_trees@foxmail.com> * @Last Modified time: 2022-03-08 10:34:42 */ /* * READ THIS BEFORE YOU WRITE YOUR CODE * ==================================== * @ Read the description carefully! * @ Pay attention to the data domain. * @ Keep calm. * @ Write down your thought on your draft. * @ Keep your mind clear. * @ Stabilize the coding speed. * ==================================== * READ THIS AGAIN BEFORE YOU START !!! */ #include <bits/stdc++.h> using namespace std ; using ldb = long double ; constexpr int si_n = 7e2 + 10 ; constexpr int si_m = 1e5 + 10 ; constexpr int eps = 1e-4 ; int n , tot = 0 , cnt = 0 , num = 0 ; std :: map < pair < char , char > , int > rec ; inline void add ( char c , char cc ){ if ( rec . find ({ c , cc }) == rec . end ()) rec [{ c , cc }] =++ cnt ; } struct Edge { int head , ver , Next , w ; inline void Init (){ head = -1 ; } } e [ si_m ]; inline void add ( int u , int v , int w ){ e [ ++ tot ]. ver = v , e [ tot ]. Next = e [ u ]. head , e [ u ]. head = tot , e [ tot ]. w = w ; } ldb dis [ si_n ]; bool vis [ si_n ]; int Cnt [ si_n ]; std :: queue < int > q ; inline bool spfa ( ldb mid ){ for ( register int i = 1 ; i <= cnt ; ++ i ) vis [ i ] = true , q . push ( i ), Cnt [ i ] = 0 , dis [ i ] = 0 ; while ( ! q . empty ()){ int u = q . front (); q . pop (); vis [ u ] = false ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; ldb w = e [ i ]. w * 1.0 - mid ; if ( dis [ v ] < dis [ u ] + w ){ dis [ v ] = dis [ u ] + w , Cnt [ v ] = Cnt [ u ] + 1 ; if ( ++ num > 10000 ) return true ; if ( Cnt [ v ] >= cnt ) return true ; if ( ! vis [ v ]) q . push ( v ), vis [ v ] = true ; } } } return false ; } int main (){ while ( ~ scanf ( \"%d\" , & n ) && n ){ e -> Init (); num = 0 , tot = 0 , cnt = 0 ; rec . clear (); for ( register int i = 1 ; i <= n ; ++ i ){ string s ; cin >> s ; add ( s [ 0 ], s [ 1 ]), add ( s [ s . size () -2 ], s [ s . size () -1 ]); int u = rec [{ s [ 0 ], s [ 1 ]}], v = rec [{ s [ s . size () -2 ], s [ s . size () -1 ]}]; add ( u , v , s . size ()); } ldb l = 0.0 , r = 1000.0 ; if ( ! spfa ( 0 )){ puts ( \"No solution\" ); continue ; } while ( r - l > eps ){ ldb mid = ( l + r ) / 2 ; if ( spfa ( mid )) l = mid ; else r = mid ; } printf ( \"%.2Lf \\n \" , r ); } return 0 ; } // \u4e0d\u77e5\u9053\u662f\u4e0d\u662f WA \u7684\uff0c\u4e0d\u7ba1\u4e86 Trick 01 \u5206\u6570\u89c4\u5212\u7684\u65f6\u5019\u5982\u679c\u7ed3\u5408\u4e86\u56fe\u8bba\uff0c\u53ef\u4ee5\u6839\u636e\u5316\u51fa\u6765\u7684\u548c\u5f0f\u6539\u53d8\u8fb9\u6743\uff08\u5728 SPFA \u91cc\u9762\u6539\u5c31\u884c\uff0c\u4e0d\u7528\u91cd\u65b0\u5efa\u56fe\uff09\u3002 1 Tag : SPFA / 01 \u5206\u6570\u89c4\u5212","title":"Acwing1165 \u5355\u8bcd\u73af"},{"location":"rec/tricks-for-2022-03/#acwing350","text":"\u8003\u8651 \\(K=1\\) \u7684\u60c5\u51b5\u3002 \u53d1\u73b0\u53ea\u9700\u8981\u5728\u76f4\u5f84\u7684\u4e24\u4e2a\u7aef\u70b9\u4e4b\u95f4\u8fde\u63a5\u4e00\u6761\u8fb9\u3002 \u7136\u540e\u8fd9\u6761\u76f4\u5f84\u5c31\u53ef\u4ee5\u53ea\u8d70\u4e00\u6b21\u3002 \u5fc5\u7136\u662f\u6700\u4f18\u7684\u3002 \u8003\u8651 \\(K=2\\) \u7684\u60c5\u51b5\u3002 \u4e3a\u4e86\u4e0d\u91cd\u590d\uff0c\u4e5f\u5c31\u662f\u4f7f\u5f97\u88ab\u51cf\u5c11\u7684\u8fb9\u5c3d\u91cf\u7684\u591a\u3002 \u5728 \u201c\u629b\u6389\u201d \u539f\u6765\u9009\u4e2d\u7684\u76f4\u5f84\u7684\u6811\u4e0a\u518d\u6c42\u4e00\u6b21\u76f4\u5f84\u3002 \u6ce8\u610f\u8fd9\u91cc\u4e0d\u662f\u771f\u7684\u53bb\u9664\uff0c\u800c\u662f\u8bf4\u4f7f\u5f97\u8fd9\u6761\u76f4\u5f84\u4e0d\u4f1a\u88ab\u9009\u3002 \u6240\u4ee5\u4e00\u4e2a Tricky \u7684\u505a\u6cd5\u5c31\u662f\u628a\u9009\u4e2d\u7684\u76f4\u5f84\u4e0a\u7684\u6240\u6709\u8fb9\u5168\u90e8\u8bbe\u7f6e\u6210 \\(-1\\) \u3002 \u4f46\u662f\u6ce8\u610f\uff0c\u5982\u679c\u8bbe\u7f6e\u6210 \\(-1\\) \uff0c\u5c31\u4e0d\u80fd\u7528 2-BFS \u6c42\u76f4\u5f84\u4e86\uff0c\u5c31\u53ea\u80fd DP\u3002 \u4f46\u662f\u4e3a\u4e86\u6c42\u65b9\u6848\u65b9\u4fbf\uff0c\u7b2c\u4e00\u6b21\u6c42\u76f4\u5f84\u8981\u7528 2-BFS \\(\\text{Trick:}\\) \u6c42\u76f4\u5f84\u7684\u65f6\u5019\u5982\u679c\u6709\u8d1f\u8fb9\u6743\u4e0d\u80fd\u4f7f\u7528 2-BFS\u3002 \u4f46\u662f 2-BFS \u76f8\u5bf9\u4e8e dp \u66f4\u5bb9\u6613\u6c42\u65b9\u6848\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 /* * @Author: black_trees <black_trees@foxmail.com> * @Date: 2022-03-17 15:06:41 * @Last Modified by: black_trees <black_trees@foxmail.com> * @Last Modified time: 2022-03-17 20:26:14 */ /* * READ THIS BEFORE YOU WRITE YOUR CODE * ==================================== * @ Read the description carefully! * @ Pay attention to the data domain. * @ Keep calm. * @ Write down your thought on your draft. * @ Keep your mind clear. * @ Stabilize the coding speed. * ==================================== * READ THIS AGAIN BEFORE YOU START !!! */ #include <queue> #include <cstring> #include <cstdio> #include <iostream> #include <algorithm> using namespace std ; constexpr int si_n = 1e5 + 10 ; constexpr int si_m = 2e5 + 10 ; int n , K , tot = 0 ; int head [ si_n ]; struct Edge { int ver , Next , w ; } e [ si_m ]; inline void add ( int u , int v , int w ){ e [ tot ] = ( Edge ){ v , head [ u ], w }, head [ u ] = tot ++ ; } struct Node { int nu , ans ; }; std :: queue < Node > q ; bool vis [ si_n ]; int pos = 0 , qos = 0 , ans = -1 ; inline void Bfs ( int st , int & qwq ){ memset ( vis , false , sizeof vis ), vis [ st ] = true , q . push (( Node ){ st , 0 }); while ( ! q . empty ()){ Node u = q . front (); q . pop (); if ( ans < u . ans ) qwq = u . nu , ans = u . ans ; for ( register int i = head [ u . nu ]; ~ i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( ! vis [ v ]) q . push (( Node ){ v , ans + w }), vis [ v ] = true ;; } } return ; } int dis [ si_n ]; inline void dfs ( int u , int fa ){ for ( register int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( v == fa ) continue ; dfs ( v , u ); ans = max ( ans , dis [ u ] + dis [ v ] + w ); dis [ u ] = max ( dis [ u ], dis [ v ] + w ); } return ; } inline bool Rev ( int u , int fa ){ if ( u == pos || u == qos ) return true ; int ok = 0 ; for ( register int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , & w = e [ i ]. w ; if ( v == fa ) continue ; if ( Rev ( v , u )) ok ++ , e [ i ]. w = e [ i ^ 1 ]. w = -1 ; } return ok == 1 ? true : false ; } int main (){ memset ( head , -1 , sizeof head ), memset ( dis , 0 , sizeof dis ); cin >> n >> K ; int res = ( n << 1 ); for ( register int i = 1 ; i < n ; ++ i ){ int u , v ; cin >> u >> v ; add ( u , v , 1 ), add ( v , u , 1 ); } // for(register int i=1;i<=n;++i){ // for(register int j=head[i];~j;j=e[j].Next){ // cout<<i<<\" \"<<e[j].ver<<\" \"<<e[j].w<<endl; // } // } Bfs ( 1 , pos ); ans = -1 ; Bfs ( pos , qos ); res -= ans ; // cout<<ans<<endl; // cout<<res+ans<<endl; // cout<<pos<<\" \"<<qos<<endl; if ( K == 1 ){ res -- ; return cout << res << endl , 0 ; } Rev ( 1 , 0 ); // for(register int i=1;i<=n;++i){ // for(register int j=head[i];~j;j=e[j].Next){ // cout<<i<<\" \"<<e[j].ver<<\" \"<<e[j].w<<endl; // } // } // cout<<ans<<endl; ans = -1 ; dfs ( 1 , 0 ); // for(register int i=1;i<=n;++i) cout<<dis[i]<<\" \"; cout<<endl; // cout<<ans<<endl; res -= ans ; return cout << res << endl , 0 ; } // If there exist negtive edge(s) on Tree, don't use 2-BFS to calc diameter. // should use dp. 1 Tag : \u6811\u7684\u76f4\u5f84 / \u65b9\u6848","title":"Acwing350 \u5de1\u903b"},{"location":"rec/tricks-for-2022-03/#acwing354","text":"\u8fd9\u9898\u548c\u96e8\u5929\u7684\u5c3e\u5df4\u5f88\u50cf\u3002 \u90fd\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u9897\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7136\u540e\u7ebf\u6bb5\u6811\u5408\u5e76\u3002 \u4e0d\u8fc7\u8fd9\u9898\u7684\u7b54\u6848\u4e0d\u662f\u6700\u503c\uff0c\u6709\u533a\u95f4\u53ef\u51cf\u6027\u3002 \u6240\u4ee5\u53ef\u4ee5\u4e0d\u7528\u7ebf\u6bb5\u6811\uff0c\u76f4\u63a5\u5728\u6bcf\u4e2a\u8282\u70b9\u8bb0\u5f55\u76f8\u5173\u7684\u64cd\u4f5c\u3002 \u7136\u540e dfs \u4e00\u6b21\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u9012\u5f52\u8fdb\u5b50\u6811\u5b8c\u4e4b\u540e\u7684\u7b54\u6848\u51cf\u53bb\u9012\u5f52\u4e4b\u524d\u7684\u5c31\u662f\u8fd9\u4e2a\u8282\u70b9\u7684\u7b54\u6848\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 /* * READ THIS BEFORE YOU WRITE YOUR CODE * ==================================== * @ Read the description carefully! * @ Pay attention to the data domain. * @ Keep calm. * @ Write down your thought on your draft. * @ Keep your mind clear. * @ Stabilize the coding speed. * ==================================== * Common Bugs * ==================================== * @ Unuse some written function (forget write dfs(v) in dfs(u)) ? * @ long long or precision ERROR ? * @ Output Format (%lld,%llu) ? * @ Special cases (n=1),(root is not 1) ? * @ Clear the array (head,vis) ? * @ Wrong variable name (i, but written j) ? * ==================================== * READ THIS AGAIN BEFORE YOU START !!! */ #pragma GCC optimize(\"Ofast\", \"inline\", \"-ffast-math\") #pragma GCC target(\"avx,sse2,sse3,sse4,mmx\") #include <queue> #include <vector> #include <cstring> #include <iostream> using namespace std ; constexpr int si = 3e5 + 10 ; int n , m ; int tot = 0 , head [ si ]; struct Edge { int ver , Next ;} e [ si << 1 ]; inline void add ( int u , int v ){ e [ tot ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot ++ ;} std :: queue < int > q ; std :: vector < int > a1 [ si ], b1 [ si ], a2 [ si ], b2 [ si ]; int c1 [ si << 1 ], c2 [ si << 1 ], ans [ si ]; int w [ si ], v [ si ]; int f [ si ][ 20 ], dep [ si ]; inline void Bfs (){ q . push ( 1 ), dep [ 1 ] = 1 ; while ( ! q . empty ()){ int u = q . front (); q . pop (); for ( register int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( dep [ v ]) continue ; dep [ v ] = dep [ u ] + 1 , f [ v ][ 0 ] = u ; for ( register int j = 1 ; j <= 19 ; ++ j ) f [ v ][ j ] = f [ f [ v ][ j -1 ]][ j -1 ]; q . push ( v ); } } } inline int Lca ( int u , int v ){ if ( dep [ u ] < dep [ v ]) swap ( u , v ); for ( register int i = 19 ; i >= 0 ; -- i ){ if ( dep [ f [ u ][ i ]] >= dep [ v ]) u = f [ u ][ i ]; } if ( u == v ) return u ; for ( register int i = 19 ; i >= 0 ; -- i ){ if ( f [ u ][ i ] != f [ v ][ i ]) u = f [ u ][ i ], v = f [ v ][ i ]; } return f [ u ][ 0 ]; } inline void dfs ( int x ){ int val1 = c1 [ dep [ x ] + w [ x ]], val2 = c2 [ w [ x ] - dep [ x ] + n ]; v [ x ] = 1 ; for ( register int i = head [ x ]; ~ i ; i = e [ i ]. Next ){ int y = e [ i ]. ver ; if ( v [ y ]) continue ; dfs ( y ); } for ( register int i = 0 ; i < a1 [ x ]. size (); i ++ ) c1 [ a1 [ x ][ i ]] ++ ; for ( register int i = 0 ; i < b1 [ x ]. size (); i ++ ) c1 [ b1 [ x ][ i ]] -- ; for ( register int i = 0 ; i < a2 [ x ]. size (); i ++ ) c2 [ a2 [ x ][ i ] + n ] ++ ; for ( register int i = 0 ; i < b2 [ x ]. size (); i ++ ) c2 [ b2 [ x ][ i ] + n ] -- ; ans [ x ] += c1 [ dep [ x ] + w [ x ]] - val1 + c2 [ w [ x ] - dep [ x ] + n ] - val2 ; } int main (){ cin >> n >> m , memset ( head , -1 , sizeof head ); for ( register int i = 1 ; i < n ; ++ i ){ int x , y ; cin >> x >> y ; add ( x , y ), add ( y , x ); } for ( register int i = 1 ; i <= n ; ++ i ) cin >> w [ i ]; Bfs (); for ( register int i = 1 ; i <= m ; ++ i ){ int x , y ; cin >> x >> y ; int z = Lca ( x , y ); a1 [ x ]. push_back ( dep [ x ]), b1 [ f [ z ][ 0 ]]. push_back ( dep [ x ]); a2 [ y ]. push_back ( dep [ x ] -2 * dep [ z ]), b2 [ z ]. push_back ( dep [ x ] -2 * dep [ z ]); } dfs ( 1 ); for ( register int i = 1 ; i <= n ; ++ i ) cout << ans [ i ] << \" \" ; cout << endl ; return 0 ; } 1 Tag : \u6811\u4e0a\u5dee\u5206","title":"Acwing354 \u5929\u5929\u7231\u8dd1\u6b65"},{"location":"rec/tricks-for-2022-03/#acwing369-acm","text":"\u7ed9\u5b9a\u4e00\u5f20\u6709\u5411\u56fe\uff0c\u6709\u4e24\u6b21\u4e58\u8f66\u7684\u673a\u4f1a\uff0c\u53ef\u4ee5\u518d\u4efb\u610f\u5730\u65b9\u4e0a\u4e0b\u8f66\uff0c\u4f46\u662f\u4e0b\u8f66\u4e86\u5c31\u7528\u4e86\u4e00\u6b21\u673a\u4f1a\u3002 \u6bcf\u6b21\u8fde\u7eed\u4e58\u8f66\u7684\u4e3e\u4f8b\u4e0d\u80fd\u8d85\u8fc7 \\(q\\) \u3002 \u6c42\u4ece \\(s \\to t\\) \u8981\u7ecf\u8fc7\u7684 \u201c\u5371\u9669\u8def\u6bb5\u201d \u7684\u957f\u5ea6\u6700\u5c0f\u662f\u591a\u5c11\u3002 \u201c\u5371\u9669\u8def\u6bb5\u201d\u5b9a\u4e49\u4e3a \\(s\\to t\\) \u7684\u5fc5\u7ecf\u8fb9\u3002 \\(s \\to t\\) \u7684\u5fc5\u7ecf\u8fb9\u7684\u610f\u601d\u5c31\u662f\uff0c\u4efb\u610f\u4e00\u6761\u4ece \\(s\\to t\\) \u7684\u8def\u5f84\uff0c\u4ed6\u4eec\u90fd\u5305\u542b\u7684\u8fb9\u3002 \u9996\u5148\u8003\u8651\u4e00\u4e2a\u6c42\u51fa\u6709\u5411\u56fe\u7684\u6865\uff08\u5fc5\u7ecf\u8fb9\uff09\u7684\u7b97\u6cd5\u3002 \u53ef\u4ee5\u4f7f\u7528\u652f\u914d\u6811\u5148\u6c42\u51fa\u5fc5\u7ecf\u70b9\u96c6\u7136\u540e\u505a\u3002 \u4e0d\u8fc7\u6709\u4e00\u79cd\u6bd4\u8f83\u597d\u5199\u7684 \\(\\text{O}(n)\\) DP \u505a\u6cd5\u3002 \u8bbe \\(dp_s[i]\\) \u8868\u793a\u4ece \\(s\\) \u5230 \\(i\\) \u7684\u8def\u5f84\u6761\u6570\u3002 \\(dp_t[i]\\) \u8868\u793a\u53cd\u56fe\u4e0a\u4ece \\(t\\) \u5230 \\(i\\) \u7684\u8def\u5f84\u6761\u6570\u3002 \u7ecf\u8fc7\u63a8\u5bfc\u4e0d\u96be\u53d1\u73b0\u4e24\u4e2a\u5145\u8981\u6761\u4ef6\uff1a \u4e00\u4e2a\u70b9 \\(x\\) \u662f\u5fc5\u7ecf\u70b9\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(dp_s[i] \\times dp_t[i] = dp_s[t]\\) \u3002 \u4e00\u6761\u8fb9 \\((u\\to v)\\) \u662f\u5fc5\u7ecf\u8fb9\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(dp_s[u] \\times dp_t[v] = dp_s[t]\\) \u3002 \u4f46\u662f \\(dp_s,dp_t\\) \u662f\u6307\u6570\u7ea7\u522b\u7684\uff0c __uint128_t \u90fd\u4e0d\u4e00\u5b9a\u53ef\u4ee5\u5e94\u4ed8\u3002 \u6240\u4ee5\u8003\u8651\u7c7b\u4f3c\u54c8\u5e0c\u7684\u601d\u60f3\uff0c\u7ed9\u4ed6\u4eec\u53d6\u6a21\u3002 \u7528\u7c7b\u4f3c\u53cc\u54c8\u5e0c\u7684\u601d\u60f3\uff0c\u540c\u65f6\u8bb0\u5f55\u4e24\u79cd\u6a21\u6570\u610f\u4e49\u4e0b\u7684\u503c\u3002 \u7136\u540e\u4e24\u4e2a\u503c\u76f8\u7b49\uff0c\u5f53\u4e14\u4ec5\u5f53\u4ed6\u4eec\u5728\u4e24\u79cd\u610f\u4e49\u4e0b\u7684\u503c\u90fd\u4e00\u6837\u3002 \u4e00\u822c\u53d6 \\(mod1=1e9+7,mod2=1e9+9\\) \u3002 \u7136\u540e\u8003\u8651\u6c42\u51fa \\(s \\to t\\) \u7684\u6700\u77ed\u8def\u3002 \u660e\u663e\u7684\uff0c\u8fd9\u4e9b\u5fc5\u7ecf\u8fb9\u80af\u5b9a\u5728\u4efb\u610f\u7684\u4e00\u6761\u6700\u77ed\u8def\u4e0a\u90fd\u51fa\u73b0\u4e86\uff0c\u6240\u4ee5\u968f\u4fbf\u9009\u54ea\u4e00\u6761\u90fd\u4e00\u6837\u3002 \u7136\u540e\u8003\u8651\u5982\u4f55\u7edf\u8ba1\u7b54\u6848\u3002 \u7ecf\u8fc7\u4e25\u8c28\u7684\u4e3e\u4f8b\uff0c\u753b\u56fe\u8bba\u8bc1\u53ef\u4ee5\u53d1\u73b0\uff0c\u76f4\u63a5\u7edf\u8ba1\u7684\u8bdd\u975e\u5e38\u5bb9\u6613\u7b97\u91cd\u590d\u3002 \u610f\u601d\u662f\u4e24\u4e2a\u8fde\u7eed\u6bb5\u91cd\u5408\u7684\u65f6\u5019\u4f1a\u975e\u5e38\u96be\u7b97\uff0c\u8981\u5206\u7279\u522b\u591a\u7c7b\u8ba8\u8bba\u3002 \u6240\u4ee5\u8003\u8651\u4e00\u4e2a\u975e\u5e38\u6709\u610f\u601d\u7684 Trick \uff1a Trick \u4ee5\u6bcf\u4e00\u4e2a\u70b9\u4e3a \u201c\u5206\u5272\u70b9\u201d\uff0c\u5206\u522b DP\uff0c\u8ba1\u7b97\u4e24\u8fb9\u7684\u7b54\u6848 \\(ds,dt\\) \uff0c\u91cd\u5408\u7684\u95ee\u9898\u5c31\u5f97\u5230\u4e86\u89e3\u51b3\u3002 \u7b49\u4ef7\u4e8e\u628a\u95ee\u9898\u8f6c\u5316\u6210\u4e86\u6c42\u53ea\u8986\u76d6\u4e00\u6b21\uff0c\u6865\u8fb9\u603b\u957f\u5ea6\u51cf\u53bb\u53ef\u4ee5\u8986\u76d6\u7684\u6700\u957f\u7684\u6865\u8fb9\u7684\u957f\u5ea6\u3002 \u7136\u540e\u6bcf\u4e00\u4e2a\u70b9\u7684\u7b54\u6848\u5c31\u662f \\(ds_i + dt_i\\) \uff0c\u679a\u4e3e\u6240\u6709\u70b9\u66f4\u65b0\u5373\u53ef\uff0c\u8fd9\u4e2a Trick \u5728 Acwing341 \u6700\u4f18\u8d38\u6613 \u90a3\u4e00\u9898\u4e5f\u7528\u5230\u4e86\u3002 \u672c\u9898\u7ed9\u7684\u4e0d\u662f DAG\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u5148\u62d3\u6251\u6392\u5e8f\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 #include <queue> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int N = 1e5 + 10 ; const int M = 2e5 + 10 ; const int mod = 1e9 + 7 ; // \u672c\u9898\u4e0d\u9700\u8981\u53cc\u53d6\u6a21 int ver [ M * 2 ], edge [ M * 2 ], nxt [ M * 2 ], head [ N ], tot ; int f [ 2 ][ N ], deg [ 2 ][ N ], dis [ N ], pre [ N ], n , m , s , t , Q ; bool bri [ M * 2 ]; int a [ N ], b [ N ], cnt ; int sum [ N ], sum_bri [ N ], ds [ N ], dt [ N ], ds_min [ N ]; int occur [ N ], first_occur [ N ]; queue < int > q ; void add ( int u , int v , int w ) { ver [ ++ tot ] = v , edge [ tot ] = w , nxt [ tot ] = head [ u ], head [ u ] = tot ; } void topsort ( int s , int bit ) { if ( bit == 0 ) { memset ( dis , 0x3f , sizeof ( dis )); dis [ s ] = 0 ; } f [ bit ][ s ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) if ( deg [ bit ][ i ] == 0 ) q . push ( i ); while ( ! q . empty ()) { int u = q . front (); q . pop (); for ( int i = head [ u ]; i ; i = nxt [ i ]) if (( i & 1 ) == bit ) { int v = ver [ i ]; f [ bit ][ v ] = ( f [ bit ][ v ] + f [ bit ][ u ]) % mod ; if ( bit == 0 && dis [ v ] > dis [ u ] + edge [ i ]) { dis [ v ] = dis [ u ] + edge [ i ]; pre [ v ] = i ; } if ( -- deg [ bit ][ v ] == 0 ) q . push ( v ); } } } int main () { int T ; cin >> T ; while ( T -- ) { memset ( head , 0 , sizeof ( head )), memset ( deg , 0 , sizeof ( deg )); memset ( f , 0 , sizeof ( f )), tot = 1 ; cnt = 0 ; memset ( bri , 0 , sizeof ( bri )), memset ( occur , 0 , sizeof ( occur )); cin >> n >> m >> s >> t >> Q ; s ++ ; t ++ ; for ( int i = 1 ; i <= m ; i ++ ) { int u , v , w ; cin >> u >> v >> w ; u ++ , v ++ ; add ( u , v , w ), add ( v , u , w ); deg [ 0 ][ v ] ++ , deg [ 1 ][ u ] ++ ; } topsort ( s , 0 ); if ( f [ 0 ][ t ] == 0 ) { puts ( \"-1\" ); continue ; } topsort ( t , 1 ); for ( int i = 2 ; i <= tot ; i += 2 ) { int u = ver [ i ^ 1 ], v = ver [ i ]; if (( long long ) f [ 0 ][ u ] * f [ 1 ][ v ] % mod == f [ 0 ][ t ]) { bri [ i ] = true ; } } for ( int u = 1 ; u <= n ; u ++ ) { for ( int i = head [ u ]; i ; i = nxt [ i ]) { if ( i & 1 ) continue ; int v = ver [ i ]; if ( occur [ v ] == u ) { bri [ i ] = false ; bri [ first_occur [ v ]] = false ; } else { occur [ v ] = u ; first_occur [ v ] = i ; } } } while ( t != s ) { a [ ++ cnt ] = edge [ pre [ t ]]; b [ cnt ] = bri [ pre [ t ]]; t = ver [ pre [ t ] ^ 1 ]; } for ( int i = 1 ; i <= cnt ; i ++ ) { sum [ i ] = sum [ i - 1 ] + a [ i ]; sum_bri [ i ] = sum_bri [ i - 1 ] + ( b [ i ] ? a [ i ] : 0 ); } ds_min [ 0 ] = 1 << 30 ; for ( int i = 1 , j = 0 ; i <= cnt ; i ++ ) { while ( sum [ i ] - sum [ j ] > Q ) j ++ ; ds [ i ] = sum_bri [ j ]; if ( j > 0 && b [ j ]) ds [ i ] -= min ( a [ j ], Q - ( sum [ i ] - sum [ j ])); ds_min [ i ] = min ( ds [ i ], ds_min [ i - 1 ] + ( b [ i ] ? a [ i ] : 0 )); } for ( int i = cnt , j = cnt + 1 ; i ; i -- ) { while ( sum [ j - 1 ] - sum [ i - 1 ] > Q ) j -- ; dt [ i ] = sum_bri [ cnt ] - sum_bri [ j - 1 ]; if ( j <= cnt && b [ j ]) dt [ i ] -= min ( a [ j ], Q - ( sum [ j - 1 ] - sum [ i - 1 ])); } int ans = 1 << 30 ; for ( int i = 1 ; i <= cnt ; i ++ ) ans = min ( ans , dt [ i ] + ds_min [ i - 1 ]); for ( int i = 1 , j = 0 ; i <= cnt ; i ++ ) { while ( sum [ i ] - sum [ j ] > 2 * Q ) j ++ ; int temp = sum_bri [ j ]; if ( j > 0 && b [ j ]) temp -= min ( a [ j ], 2 * Q - ( sum [ i ] - sum [ j ])); ans = min ( ans , temp + sum_bri [ cnt ] - sum_bri [ i ]); } cout << ans << endl ; } } 1 Tag : \u6709\u5411\u56fe\u7684\u5fc5\u7ecf\u8fb9 / DP / \u62d3\u6251\u6392\u5e8f","title":"Acwing369 \u5317\u5927ACM\u961f\u7684\u8fdc\u8db3"},{"location":"rec/tricks-for-2022-03/#acwing386","text":"\u8981\u6c42\u7684\u5f0f\u5b50\u662f\uff1a \\[I(v) = \\sum\\limits_{s \\not=v,t\\not=v}\\dfrac{C_{s,t}(v)}{C_{s,t}}\\] \u4e0b\u9762\u7684\u662f \\(s \\to t\\) \u7684\u6700\u77ed\u8def\u6761\u6570 \u4e0a\u9762\u7684\u662f \\(s\\to t\\) \u7684\u6700\u77ed\u8def\u7ecf\u8fc7 \\(v\\) \u7684\u6761\u6570\u3002 \u6ce8\u610f\u8fd9\u91cc\u662f\u6709\u5e8f\u70b9\u5bf9\uff0c\u8981\u7b97\u4e24\u6b21\u3002 \u6570\u636e\u8303\u56f4\u662f \\(n = 1e2\\) \u3002 \u7136\u540e \\(s\\to v\\to t\\) \uff0c\u52a0\u4e0a\u591a\u6e90\u8be2\u95ee\uff0c\u4e0d\u96be\u60f3\u5230 Floyd \u89e3\u51b3\u3002 \u5b9e\u9645\u4e0a\u8981\u505a\u7684\u5c31\u662f\u5728 Floyd \u8dd1\u6700\u77ed\u8def\u7684\u65f6\u5019\u6700\u77ed\u8def\u8ba1\u6570\u5373\u53ef\u3002 \u7136\u540e\u4e0a\u9762\u7684\u90e8\u5206\u53ea\u9700\u8981\u5224\u5b9a \\(dis_{s,v} + dis_{v,t} = dis_{s,t}\\) \u5373\u53ef\u3002 \u7136\u540e\u7b54\u6848\u7d2f\u52a0 \\(cnt_{s,v} \\times cnt_{v,t}\\) \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; using i64 = long long ; const int si = 1e2 + 10 ; int n , m ; int dis [ si ][ si ]; i64 cnt [ si ][ si ]; int main () { memset ( dis , 0x3f , sizeof dis ); memset ( cnt , 0 , sizeof cnt ); cin >> n >> m ; for ( int i = 1 ; i <= m ; ++ i ) { int u , v , w ; cin >> u >> v >> w ; dis [ u ][ v ] = dis [ v ][ u ] = min ( dis [ u ][ v ], w ); cnt [ u ][ v ] = cnt [ v ][ u ] = 1 ; } for ( int i = 1 ; i <= n ; ++ i ) dis [ i ][ i ] = 0 ; for ( int k = 1 ; k <= n ; ++ k ) { for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { if ( dis [ i ][ j ] > dis [ i ][ k ] + dis [ k ][ j ]) { dis [ i ][ j ] = dis [ i ][ k ] + dis [ k ][ j ]; cnt [ i ][ j ] = 1l l * cnt [ i ][ k ] * cnt [ k ][ j ]; } else if ( dis [ i ][ j ] == dis [ i ][ k ] + dis [ k ][ j ]) { cnt [ i ][ j ] += 1l l * cnt [ i ][ k ] * cnt [ k ][ j ]; } } } } for ( int k = 1 ; k <= n ; ++ k ) { double ans = 0.0 ; for ( int i = 1 ; i <= n ; ++ i ) { if ( i == k ) continue ; for ( int j = 1 ; j <= n ; ++ j ) { // * s -> t \u4e0d\u4e00\u5b9a\u662f\u65e0\u5e8f\u6570\u5bf9\uff0ct -> s \u4e5f\u53ef\u4ee5\uff0c\u6240\u4ee5\u4e0d\u80fd\u4ece i + 1 \u5f00\u59cb. if ( i == j || j == k ) continue ; if ( dis [ i ][ j ] == dis [ i ][ k ] + dis [ k ][ j ]) { ans += (( 1.0 * ( cnt [ i ][ k ] * cnt [ k ][ j ])) / ( 1.0 * cnt [ i ][ j ])); } // ! \u60e8\u75db\u6559\u8bad \uff1a\u6709\u9664\u6cd5\u4e14 1.0 \u00d7 \u67d0\u4e2a\u6570\u7684\u65f6\u5019\u8981\u7528\u62ec\u53f7\u62ec\u8d77\u6765\uff0c\u4e0d\u7136\u4f1a /1.0 \u7136\u540e\u4e58\u4e0a\u539f\u6765\u8981\u9664\u7684\u6570\u3002 } } printf ( \"%.3lf \\n \" , ans ); } return 0 ; } 1 Tag : \u6700\u77ed\u8def\u8ba1\u6570 / \u7ecf\u8fc7\u6307\u5b9a\u70b9\u6700\u77ed\u8def\u8ba1\u6570","title":"Acwing386 \u793e\u4ea4\u7f51\u7edc"},{"location":"rec/tricks-for-2022-03/#acwing389","text":"\u6c42\u6811\u7684\u76f4\u5f84\u7684\u5fc5\u7ecf\u8fb9\u3002 \u53d1\u73b0\u8981\u6c42\u7684\u5c31\u662f\u6240\u6709\u76f4\u5f84\u7684\u516c\u5171\u8fb9\u3002 \u53ef\u4ee5\u5148\u6c42\u51fa\u76f4\u5f84\u4e4b\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u5224\u65ad\u5b83\u662f\u4e0d\u662f\u4e24\u6761\u76f4\u5f84\u7684\u4ea4\u70b9\u3002 \u7136\u540e\u5206\u522b\u627e\u6240\u6709\u4ea4\u70b9\u70b9\u5bf9\u91cc\u9762\u6700\u9760\u4e2d\u95f4\u7684\u4e00\u5bf9\u5c31\u884c\u4e86\u3002 \u8fd8\u6709\u4e00\u79cd\u66f4\u597d\u7684\u505a\u6cd5\u3002 \\(dfs\\) \u8bb0\u5f55\u5f53\u524d\u8def\u5f84\u4e0a\u7684\u516c\u5171\u8fb9\u6761\u6570\u3002 \u8bb0 \\(las\\) \u8868\u793a\u6700\u540e\u4f7f\u76f4\u5f84\u66f4\u65b0\u7684\u8282\u70b9\u3002 \u7136\u540e\u5982\u679c\u51fa\u73b0\u7c7b\u4f3c \\(d[u] = x, d[v1] + w1 = y, d[v2] + w2 = y\\) \u7684\u60c5\u51b5 \u5047\u8bbe \\(v1\\) \u662f\u66f4\u5148\u8bbf\u95ee\u7684\uff0c \u5982\u679c \\(x > y\\) , \u90a3\u4e48\u9700\u8981\u628a \\(u -> v1 -> subtree(v1)\\) \u5f53\u4e2d\u7684\u8fb9\u4ece \\(cnt\\) \u91cc\u51cf\u53bb \u3002 \u5982\u679c \\(x \\le y\\) , \u90a3\u4e48\u9700\u8981\u628a \\(d[u]\\) \u5f80\u4e0b\u8d70\u5bf9\u5e94\u7684\u8fb9\u4ece \\(cnt\\) \u91cc\u51cf\u53bb\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 #include <queue> #include <vector> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; using i64 = long long ; const int si = 2e5 + 10 ; int n , m , cnt , las ; vector < pair < int , int > > G [ si ]; i64 d [ si ], ans ; int dfs ( int u , int fa , int dep ) { int res = dep ; // * ans = \u76f4\u5f84\u957f\u5ea6 // * cnt = \u516c\u5171\u8fb9\u6761\u6570\uff08\u6700\u7ec8\u7b54\u6848\uff09 for ( auto & [ v , w ] : G [ u ]) { if ( v == fa ) continue ; int cur = dfs ( v , u , dep + 1 ); if ( ans < d [ u ] + d [ v ] + w ) { ans = d [ u ] + d [ v ] + w , las = dep , cnt = res + cur - dep * 2 ; // ? \u76f4\u5f84\u88ab\u66f4\u65b0\uff0c\u8bb0\u5f55 las \u5e76\u66f4\u65b0 cnt\u3002 } else if ( ans == d [ u ] + d [ v ] + w ) { if ( d [ v ] + w >= d [ u ]) { cnt = cur - las ; } else { cnt = res - las ; } // ? \u51fa\u73b0\u7c7b\u4f3c d[u] = x, d[v1] + w1 = y, d[v2] + w2 = y \u7684\u60c5\u51b5 // ? \u5047\u8bbe v1 \u662f\u66f4\u5148\u8bbf\u95ee\u7684\uff0c // ? 1. \u5982\u679c x > y, \u90a3\u4e48\u9700\u8981\u628a u -> v1 -> subtree(v1) \u5f53\u4e2d\u7684\u8fb9\u4ece cnt \u91cc\u51cf\u53bb // ? 2. \u5982\u679c x <= y, \u90a3\u4e48\u9700\u8981\u628a d[u] \u5f80\u4e0b\u8d70\u5bf9\u5e94\u7684\u8fb9\u4ece cnt \u91cc\u51cf\u53bb\u3002 // * cur \u662f 2 \u5bf9\u5e94\u7684\u3002 // * res \u662f 1 \u5bf9\u5e94\u7684\u3002 // TODO : \u5177\u4f53\u7684\u53ef\u80fd\u8fd8\u8981\u5206\u6790\u4e00\u4e0b } if ( d [ u ] < d [ v ] + w ) { d [ u ] = d [ v ] + w , res = cur ; } else if ( d [ u ] == d [ v ] + w ) { res = dep ; } } return res ; // ? \u5f53\u524d\u5206\u652f\u7684\u516c\u5171\u8fb9\u957f\u5ea6\u3002 } int main () { cin >> n ; for ( int i = 1 ; i < n ; ++ i ) { int u , v , w ; cin >> u >> v >> w ; G [ u ]. emplace_back ( v , w ); G [ v ]. emplace_back ( u , w ); } dfs ( 1 , 0 , 1 ); cout << ans << endl << cnt << endl ; return 0 ; }","title":"*Acwing389 \u76f4\u5f84"},{"location":"rec/tricks-for-2022-03/#acwing390","text":"\u53ef\u4ee5\u53d1\u73b0\uff0c\u7b54\u6848\u5c31\u662f\u679a\u4e3e\u76f4\u5f84\u4e0a\u6bcf\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u51fa\u53d1\u70b9\u7684\u7b54\u6848\u7684\u6700\u5927\u503c\u3002 \u90a3\u4e48\u4e00\u4e2a\u95ee\u9898\u5c31\u662f\uff0c\u6c42\u5b8c LCA \u4e4b\u540e\uff0c\u5982\u679c\u6811\u662f\u5e26\u6743\u7684\uff0c\u8be5\u5982\u4f55\u5feb\u901f\u8be2\u95ee\u6811\u4e0a\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\uff1f \u4ecd\u65e7\u662f\u500d\u589e\uff0c\u968f\u7740\u500d\u589e LCA \u7684 \\(f_{i,j}\\) \u540c\u6b65\u8bb0\u5f55\u4e00\u4e2a \\(dis_{i,j}\\) \u5373\u53ef\uff0c\u67e5\u8be2\u65f6\u505a\u4e00\u904d\u8df3 LCA \u7684\u8fc7\u7a0b\uff0c \u6bcf\u6b21\u4ece \\(u/v\\) \u5f80\u4e0a\u8df3 \\(2^i\\) \u6b65\u7684\u65f6\u5019\uff0c\u90fd\u8ba9\u7b54\u6848\u7d2f\u52a0\u4e0a \\(dis_{u/v,i}\\) \u5373\u53ef\u3002 Warning \u6ce8\u610f\uff0c \u8981\u5148\u7d2f\u52a0\u6743\u503c\u4e4b\u540e\u518d\u8df3 \uff0c\u4e0d\u7136\u4f1a\u51fa\u95ee\u9898\u3002 \u8fd9\u79cd\u7c7b\u4f3c\u7684\u601d\u60f3\u4e5f\u53ef\u4ee5\u5728\u6b21\u5c0f\u751f\u6210\u6811\u91cc\u9762\u4f53\u73b0\uff0c\u540c\u6b65\u8bb0\u5f55 \\(u\\) \u5230 \\(2^i\\) \u7ea7\u7956\u5148\u8def\u5f84\u4e0a\u7684\u6700\u503c/\u6b21\u6700\u503c\u3002 \u7136\u540e\u7528\u7c7b\u4f3c\u8df3 LCA \u7684\u65b9\u5f0f\u6c42\u4efb\u610f\u4e24\u70b9 \\((u,v)\\) \u7684\u8def\u5f84\u4e0a\u7684\u6700\u503c/\u6b21\u6700\u503c\u3002 \u4ee3\u7801\uff08\u6b64\u5904\u5e76\u6ca1\u6709\u540c\u6b65\u8bb0\u5f55 \\(dis\\) \uff0c\u800c\u662f\u5148\u6c42\u51fa\u6240\u6709\u7684 \\(f\\) \uff0c\u7136\u540e\u518d\u6c42 \\(dis\\) \uff09\uff1a Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 int dep [ si ], f [ si ][ 20 ], lg ; i64 dis [ si ][ 20 ]; void dfs ( int u , int fa ) { dep [ u ] = dep [ fa ] + 1 , f [ u ][ 0 ] = fa ; for ( int i = 1 ; i <= lg ; ++ i ) f [ u ][ i ] = f [ f [ u ][ i - 1 ]][ i - 1 ]; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver , w = e [ i ]. w ; if ( v == fa ) continue ; dfs ( v , u ), dis [ v ][ 0 ] = w ; // \u521d\u59cb\u5316 dis\u3002 // \u5982\u679c\u4f60\u662f\u5728dfs \u8fc7\u7a0b\u4e2d\u540c\u6b65\u8bb0\u5f55\uff0c\u9700\u8981\u5148 dis[v][0] = w \u7136\u540e\u518d dfs\u3002 } } i64 Dis ( int u , int v ) { i64 ret = 0 ; if ( dep [ u ] < dep [ v ]) swap ( u , v ); for ( int i = lg ; i >= 0 ; -- i ) { if ( dep [ f [ u ][ i ]] >= dep [ v ]) ret += dis [ u ][ i ], u = f [ u ][ i ]; } if ( u == v ) return ret ; for ( int i = lg ; i >= 0 ; -- i ) { if ( f [ u ][ i ] != f [ v ][ i ]) ret += dis [ u ][ i ], ret += dis [ v ][ i ], u = f [ u ][ i ], v = f [ v ][ i ]; // \u4e00\u5b9a\u8981\u5148\u52a0\u4e0a\u7136\u540e\u518d\u8df3\uff01\uff01\uff01\uff01\uff01 // \u65f6\u9694\u4e00\u4e2a\u6708\u5199\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u7684\u65f6\u5019\uff0c // \u53d1\u73b0\u81ea\u5df1\u4ee3\u7801\u91cc\u6709\u8fd9\u4e2a\u95ee\u9898 } return ret + dis [ u ][ 0 ] + dis [ v ][ 0 ]; // \u6700\u540e\u8fd8\u6ca1\u6709\u4f1a\u5408\uff0c\u4e0d\u8981\u5fd8\u8bb0\u52a0\u5b83\u4eec\u5230 lca \u7684\u6743\u503c\u3002 } // in main() lg = ( int )( log ( n ) / log ( 2 )) + 1 ; dfs ( 1 , 0 ); for ( int j = 1 ; j <= lg ; ++ j ) { for ( int i = 1 ; i <= n ; ++ i ) { dis [ i ][ j ] = dis [ i ][ j - 1 ] + dis [ f [ i ][ j - 1 ]][ j - 1 ]; // \u4ece\u4e24\u4e2a\u5c0f\u6bb5\u7684\u4fe1\u606f\u5408\u5e76\u5230\u5927\u6bb5\u7684\u4fe1\u606f\u3002 } } \u53e6\u5916\u4e00\u79cd\u505a\u6cd5 \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u8bb0\u5f55\u4e24\u4e2a \\(dep\\) \uff0c\u4e00\u4e2a\u662f\u628a\u6811\u770b\u4f5c\u65e0\u6743\u6811\u65f6\u5019\u7684 \\(dep\\) \uff0c\u53e6\u5916\u4e00\u4e2a\u662f\u628a\u6811\u770b\u4f5c\u5e26\u6743\u6811\u65f6\u5019\u7684 \\(dep\\) \u3002 \u7136\u540e\u5c31\u53ef\u4ee5\u7ee7\u7eed\u7528 \\(d[u] + d[v] - 2d[lca]\\) \u4e86\u3002 1 Tag \uff1a \u6811\u7684\u76f4\u5f84 / \u5e26\u6743\u6811\u4e0a\u70b9\u5bf9\u8ddd\u79bb","title":"Acwing390 \u9003\u5b66\u7684\u5c0f\u5b69"},{"location":"rec/tricks-for-2022-04/","text":"\u56db\u6708 Tricks \u6574\u7406 \u03c8(\uff40\u2207\u00b4)\u03c8 Acwing272 \u6700\u957f\u516c\u5171\u4e0a\u5347\u5b50\u5e8f\u5217 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6c42\u4e24\u4e2a\u5e8f\u5217 \\(a,b\\) \u7684\u6700\u957f\u516c\u5171\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \\(1\\le n \\le 3000\\) \u8fd9\u9898\u662f LIS \u548c LCS \u7684\u7efc\u5408\u3002 \u9996\u5148\u8003\u8651\u7c7b\u4f3c LCS \u8bbe\u8ba1\u8fd9\u6837\u4e00\u4e2a\u72b6\u6001 \uff1a \\(dp_{i,j}\\) \u8868\u793a \\(a[1 \\sim i],b[1 \\sim j]\\) \u6784\u6210\u7684\u6240\u6709 LCIS\uff0c\u5c5e\u6027\u4e3a \\(\\max\\) \u3002 \u4f46\u662f\u53d1\u73b0\u8fd9\u6837\u65e0\u6cd5\u5904\u7406 \u201c\u4e0a\u5347\u201d \u8fd9\u4e00\u8981\u7d20\uff0c\u6240\u4ee5\u8003\u8651\u589e\u52a0\u8981\u7d20\u3002 \u8bbe \\(dp_{i,j}\\) \u8868\u793a \\(a[1 \\sim i],b[1\\sim j]\\) \u6784\u6210\u7684\uff0c\u4ee5 \\(b_j\\) \u7ed3\u5c3e\u7684\u6240\u6709 LCIS\uff0c\u5c5e\u6027\u4e3a \\(\\max\\) \u3002 \u7136\u540e\u8003\u8651\u5212\u5206 \\(dp_{i,j}\\) \u8fd9\u4e2a\u5b50\u96c6\u3002 \u7c7b\u4f3c LCS \u7684\u5212\u5206\u65b9\u5f0f\uff0c\u628a \\(dp_{i,j}\\) \u5212\u5206\u6210\u4e24\u4e2a\u53ef\u4ee5\u8f6c\u79fb\u5230\u5b83\u7684\u90e8\u5206\uff1a \u201c\u5305\u542b \\(a_i\\) \u7684\u7531 \\(a[1 \\sim i],b[1\\sim j]\\) \u6784\u6210\u7684\uff0c\u4ee5 \\(b_j\\) \u7ed3\u5c3e\u7684\u6240\u6709 LCIS\u201d\u3002 \u201c\u4e0d\u5305\u542b \\(a_i\\) \u7684\u7531 \\(a[1 \\sim i],b[1\\sim j]\\) \u6784\u6210\u7684\uff0c\u4ee5 \\(b_j\\) \u7ed3\u5c3e\u7684\u6240\u6709 LCIS\u201d\u3002 \u7b2c\u4e00\u79cd\u5728 \\(a_i = b_j\\) \u65f6\u8f6c\u79fb\uff0c\u7b2c\u4e8c\u79cd\u5728 \\(a_i \\not= b_j\\) \u65f6\u8f6c\u79fb\u3002 \u7136\u540e\u8003\u8651\u7528\u4e00\u4e2a\u72b6\u6001\u6765\u5206\u522b\u8868\u793a\u3002 \u7b2c\u4e8c\u4e2a\u90e8\u5206\u5b9e\u9645\u4e0a\u662f\u4ece \\(a[1 \\sim i]\\) \u5f53\u4e2d\u53bb\u9664 \\(a_i\\) \uff0c\u6240\u4ee5\u662f\u7531 \\(a[1 \\sim i-1],b[i \\sim j]\\) \u6784\u6210\uff0c\u4ee5 \\(b_j\\) \u7ed3\u5c3e\u7684 LCIS\uff0c\u53ef\u4ee5\u7528 \\(dp_{i-1,j}\\) \u8868\u793a\u3002 \u7136\u540e\u53d1\u73b0\u7b2c\u4e00\u4e2a\u90e8\u5206\u627e\u4e0d\u5230\u4e00\u4e2a\u76f4\u63a5\u7684\u72b6\u6001\u6765\u8868\u793a\uff0c\u6240\u4ee5\u7ee7\u7eed\u5212\u5206\u3002 \u9996\u5148\u56e0\u4e3a \\(a_i = b_j\\) \uff0c\u6240\u4ee5\u5b50\u96c6\u7684\u7b2c\u4e00\u7ef4\u4e0d\u80fd\u53d6\u5230 \\(i\\) \uff0c\u7b2c\u4e8c\u7ef4\u4e0d\u80fd\u53d6\u5230 \\(j\\) \u3002 \u800c\u72b6\u6001\u8bbe\u8ba1\u4e2d\uff0cLIS \u7684\u8981\u7d20\u4f53\u73b0\u5728 \u201c\u4ee5 \\(b_j\\) \u7ed3\u5c3e\u201d\uff0c\u6240\u4ee5\u8003\u8651\u628a\u8fd9\u4e2a\u5b50\u96c6\u7528\u7c7b\u4f3c LIS \u7684\u65b9\u5f0f\u5212\u5206\u3002 \u53d1\u73b0\u5305\u542b \\(a_i\\) \uff0c\u4ee5 \\(b_j\\) \u7ed3\u5c3e\u7684 LCIS \u90fd\u957f\u6210\u8fd9\u6837\uff1a \\[\\begin{matrix}\\dots,las_1,a_i/b_j \\\\ \\dots,las_2,a_i/b_j\\end{matrix}\\] \u53d1\u73b0 \u201d\u6700\u540e\u4e00\u4e2a\u4e0d\u540c\u70b9\u201c \u5c31\u662f\u5012\u6570\u7b2c\u4e8c\u4e2a\u5143\u7d20 \\(las\\) \u3002 \u6240\u4ee5\u679a\u4e3e \\(b\\) \u7684\u4e0a\u4e00\u4e2a\u5143\u7d20 \\(las\\) \uff0c\u5373\u662f\u628a\u8fd9\u4e2a\u5b50\u96c6\u5212\u5206\u6210 \\(dp_{i-1,k},(0 \\le k <j)\\) \u3002 \uff08\u56fe\u4e2d\u6f0f\u5199\u4e86 \u201d\u6240\u6709\u201c \u4e8c\u5b57\uff09 \u5f97\u5230\u8f6c\u79fb\u65b9\u7a0b\uff1a \\[dp_{i,j} = \\begin{cases}dp_{i-1,j} & a_i \\not= b_j \\\\ \\min\\limits_{0 \\le k < j}\\{dp_{i-1,k}\\} + 1 & a_i = b_j\\end{cases}\\] \u53d1\u73b0\u65b9\u7a0b\u662f \\(\\text{O}(n^3)\\) \u7684\uff0c\u4f46\u662f\u53d1\u73b0\uff0c\u5f53 \\(i\\) \u56fa\u5b9a\u7684\u65f6\u5019\uff0c \\(j\\) \u589e\u52a0 \\(1\\) \uff0c\u90a3\u4e48 \\(dp_{i-1,k}\\) \u7684\u201c\u5019\u9009\u96c6\u5408\u201d\u53ea\u4f1a\u589e\u52a0\u4e00\u4e2a\u5143\u7d20 \\(dp_{i-1,j-1}\\) \u3002 \u800c\u6b64\u5904\u6c42\u5f97\u662f\u201c\u5019\u9009\u96c6\u5408\u201d\u5f53\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u62ff\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u5f53\u524d\u7684\u5019\u9009\u96c6\u5408\u7684\u6700\u5c0f\u503c\uff0c\u76f4\u63a5\u5229\u7528\u8fd9\u4e2a\u53d8\u91cf\u8f6c\u79fb\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 f [ 0 ][ 0 ] = a [ 0 ] = b [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { int cand = 0 ; if ( b [ 0 ] < a [ i ]) cand = f [ i - 1 ][ 0 ]; // \u521d\u59cb\u5728\u51b3\u7b56\u5019\u9009\u96c6\u5408\u4e2d\u7684\u6570\u3002 for ( int j = 1 ; j <= n ; ++ j ) { if ( a [ i ] == b [ j ]) f [ i ][ j ] = cand + 1 ; else f [ i ][ j ] = f [ i - 1 ][ j ]; if ( b [ j ] < a [ i ]) cand = max ( cand , f [ i - 1 ][ j ]); } } int res = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { res = max ( f [ n ][ i ], res ); } Tricks \u5982\u679c\u5212\u5206\u72b6\u6001\u96c6\u5408\u7684\u65f6\u5019\uff0c\u53d1\u73b0\u5f53\u524d\u96c6\u5408\u65e0\u6cd5\u4f7f\u7528\u4e00\u4e2a\u72b6\u6001\u76f4\u63a5\u8868\u793a\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u7ee7\u7eed\u5212\u5206\u6216\u8005\u6dfb\u52a0\u8981\u7d20\u3002 \u5982\u679c\u7528\u4e8e \u201c\u51b3\u7b56\u201d \u7684 \u201c\u5019\u9009\u96c6\u5408\u201d \u5728\u5916\u5c42\u5faa\u73af\u56fa\u5b9a\uff0c\u5185\u5c42\u5faa\u73af\u589e\u52a0\u65f6\u5143\u7d20\u4e2a\u6570 \u201c \u53ea\u589e\u591a\u4e0d\u51cf\u5c11 \u201d\uff0c\u53ef\u4ee5\u8003\u8651\u76f4\u63a5\u4f7f\u7528\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u6700\u4f18\u51b3\u7b56\u3002 \u4e0d\u7ba1\u662f\u4e0d\u662f\u6b63\u89e3\uff0c\u5148\u6253\u51fa\u6b63\u786e\u7684\u90e8\u5206\u5206\u66b4\u529b\uff0c\u518d\u8003\u8651\u662f\u5426\u53ef\u4ee5\u4f18\u5316\u6210\u66f4\u4f18\u7684\u89e3\u6cd5\u3002 1 Tag : DP / LCS Acwing274 Mobile service \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e00\u4e2a\u516c\u53f8\u6709\u4e09\u4e2a\u79fb\u52a8\u670d\u52a1\u5458\uff0c\u6700\u521d\u5206\u522b\u5728\u4f4d\u7f6e \\(1\uff0c2\uff0c3\\) \u5904\u3002 \u5982\u679c\u67d0\u4e2a\u4f4d\u7f6e\uff08\u7528\u4e00\u4e2a\u6574\u6570\u8868\u793a\uff09\u6709\u4e00\u4e2a\u8bf7\u6c42\uff0c\u90a3\u4e48\u516c\u53f8\u5fc5\u987b\u6307\u6d3e\u67d0\u540d\u5458\u5de5\u8d76\u5230\u90a3\u4e2a\u5730\u65b9\u53bb\u3002 \u67d0\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u5458\u5de5\u80fd\u79fb\u52a8\uff0c\u4e14\u4e0d\u5141\u8bb8\u5728\u540c\u6837\u7684\u4f4d\u7f6e\u51fa\u73b0\u4e24\u4e2a\u5458\u5de5\u3002 \u4ece \\(p\\) \u5230 \\(q\\) \u79fb\u52a8\u4e00\u4e2a\u5458\u5de5\uff0c\u9700\u8981\u82b1\u8d39 \\(c(p,q)\\) \u3002 \u8fd9\u4e2a\u51fd\u6570\u4e0d\u4e00\u5b9a\u5bf9\u79f0\uff0c\u4f46\u4fdd\u8bc1 \\(c(p,p)=0\\) \u3002 \u7ed9\u51fa \\(N\\) \u4e2a\u8bf7\u6c42\uff0c\u8bf7\u6c42\u53d1\u751f\u7684\u4f4d\u7f6e\u5206\u522b\u4e3a \\(p_1 \\sim p_N\\) \u3002 \u516c\u53f8\u5fc5\u987b\u6309\u987a\u5e8f\u4f9d\u6b21\u6ee1\u8db3\u6240\u6709\u8bf7\u6c42\uff0c\u4e14\u8fc7\u7a0b\u4e2d\u4e0d\u80fd\u53bb\u5176\u4ed6\u989d\u5916\u7684\u4f4d\u7f6e\uff0c\u76ee\u6807\u662f\u6700\u5c0f\u5316\u516c\u53f8\u82b1\u8d39\uff0c\u8bf7\u4f60\u5e2e\u5fd9\u8ba1\u7b97\u8fd9\u4e2a\u6700\u5c0f\u82b1\u8d39\u3002 \\(1\\le L \\le 200, 1\\le N \\le 3000\\) \u3002 \u9996\u5148\u8003\u8651\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u72b6\u6001\u8bbe\u8ba1\uff1a\u8bbe \\(dp_i\\) \u8868\u793a\u5904\u7406\u5b8c\u524d \\(i\\) \u4e2a\u8bf7\u6c42\uff0c\u516c\u53f8\u7684\u6700\u5c0f\u82b1\u8d39\u3002 \u4f46\u662f\u8fd9\u6837\u6839\u672c\u65e0\u6cd5\u8f6c\u79fb\uff0c\u56e0\u4e3a\u4e0d\u77e5\u9053\u6bcf\u4e2a\u5458\u5de5\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u5728\u54ea\u91cc\u3002 \u6240\u4ee5\u8003\u8651\u6dfb\u52a0\u989d\u5916\u7684\u7ef4\u5ea6\u6765\u8bb0\u5f55\u4e09\u4e2a\u5458\u5de5\u7684\u4f4d\u7f6e\u3002 \u8bbe \\(dp_{i,x,y,z}\\) \u8868\u793a\u5904\u7406\u5b8c\u524d \\(i\\) \u4e2a\u8bf7\u6c42\uff0c\u7b2c\u4e00\u4e8c\u4e09\u4e2a\u5458\u5de5\u5206\u522b\u5728 \\(x,y,z\\) \u5904\uff0c\u516c\u53f8\u5f53\u524d\u7684\u6700\u5c0f\u82b1\u8d39\u3002 \u7136\u540e\u8003\u8651\u5bf9\u8fd9\u4e2a\u72b6\u6001\u96c6\u5408\u8fdb\u884c\u5212\u5206\u3002 \u56e0\u4e3a\u72b6\u6001\u662f\u201c\u5904\u7406\u5b8c\u201d\uff0c\u6240\u4ee5\u5f53\u524d\u77e5\u9053\u7684\u4fe1\u606f\u662f\u6700\u7ec8\u7684\u4f4d\u7f6e\uff0c\u4e0d\u4fbf\u4e8e\u627e\u51fa\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u4e0d\u662f\u4ece \\(i - 1\\) \u8f6c\u79fb\u5230\u5f53\u524d\u72b6\u6001\uff0c\u800c\u662f\u4ece\u5f53\u524d\u72b6\u6001\u987a\u63a8\u66f4\u65b0 \\(i+1\\) \u3002 \u679a\u4e3e\u6bcf\u4e00\u4e2a\u5458\u5de5\u53bb\u5904\u7406 \\(p_{i+1}\\) \u7684\u60c5\u51b5\u5373\u53ef\u3002 \u4f46\u662f\u8f6c\u79fb\u4e4b\u524d\u8981\u5224\u5408\u6cd5\u6027\uff0c\u8981\u6c42 \\(x \\not=y\\not=z\\) \u3002 \u4f46\u662f\u8fd9\u6837\u7a7a\u95f4\u660e\u663e\u4f1a\u7206\u70b8\uff0c\u8003\u8651\u4f18\u5316\u3002 \u56e0\u4e3a\u5904\u7406\u5b8c \\(p_i\\) \u4e4b\u540e\uff0c\u5728\u5408\u6cd5\u7684\u72b6\u6001\u4e0b\uff0c \\(x,y,z\\) \u5f53\u4e2d\u5fc5\u7136\u6709\u4e00\u4e2a\u7b49\u4e8e \\(p_i\\) \u3002 \u6240\u4ee5\u53ef\u4ee5\u7701\u53bb\u4e00\u7ef4\uff0c\u8bbe \\(dp_{i,x,y}\\) \u8868\u793a\u5176\u4e2d\u4e00\u4e2a\u4f4d\u4e8e \\(p_i\\) \uff0c\u53e6\u5916\u4e24\u4e2a\u4f4d\u4e8e \\(x,y\\) \u3002 \u7136\u540e\u7528\u7c7b\u4f3c\u7684\u65b9\u5f0f\u8f6c\u79fb\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 memset ( dp , 0x3f , sizeof dp ); dp [ 0 ][ 1 ][ 2 ] = 0 , p [ 0 ] = 3 ; for ( int i = 0 ; i <= n ; ++ i ) { for ( int x = 1 ; x <= l ; ++ x ) { for ( int y = 1 ; y <= l ; ++ y ) { if ( x == y || x == p [ i ] || y == p [ i ]) continue ; dp [ i + 1 ][ x ][ y ] = min ( dp [ i + 1 ][ x ][ y ], dp [ i ][ x ][ y ] + c [ p [ i ]][ p [ i + 1 ]]); dp [ i + 1 ][ p [ i ]][ y ] = min ( dp [ i + 1 ][ p [ i ]][ y ], dp [ i ][ x ][ y ] + c [ x ][ p [ i + 1 ]]); dp [ i + 1 ][ x ][ p [ i ]] = min ( dp [ i + 1 ][ x ][ p [ i ]], dp [ i ][ x ][ y ] + c [ y ][ p [ i + 1 ]]); } } } int res = 0x3f3f3f3f ; for ( int x = 1 ; x <= l ; ++ x ) { for ( int y = 1 ; y <= l ; ++ y ) { if ( x == y || x == p [ n ] || y == p [ n ]) continue ; res = min ( res , dp [ n ][ x ][ y ]); } } cout << res << endl ; \u672c\u9898\u7684\u8f6c\u79fb\u65b9\u5f0f\u76f8\u5f53\u4e8e\u6c42\u5f53\u524d\u96c6\u5408\u662f\u54ea\u51e0\u4e2a\u72b6\u6001\u7684\u5b50\u96c6\uff0c\u7136\u540e\u628a\u5f53\u524d\u96c6\u5408\u8f6c\u79fb\u5230\u5bf9\u5e94\u7684\u5927\u96c6\u5408\u4e2d\u3002 Tricks \u5f53 \u201c\u9636\u6bb5\u201d \u7c7b\u7684\u4fe1\u606f\u7ef4\u5ea6\u65e0\u6cd5\u8868\u793a\u5f53\u524d\u72b6\u6001\uff0c\u6216\u8005\u65e0\u6cd5\u8fdb\u884c\u5212\u5206\u8f6c\u79fb\u65f6\uff0c\u53ef\u4ee5\u8003\u8651\u6dfb\u52a0\u989d\u5916\u7684\u4fe1\u606f\u7ef4\u5ea6\u3002 ** \u5f53 \u201c\u9636\u6bb5\u201d \u603b\u662f\u4ece\u4e00\u4e2a\u9636\u6bb5\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u9636\u6bb5\uff0c\u53ef\u4ee5\u4e0d\u7528\u7ba1\u9644\u52a0\u4fe1\u606f\u7ef4\u5ea6\u7684\u5927\u5c0f\u53d8\u5316\u60c5\u51b5\uff0c\u56e0\u4e3a\u65e0\u540e\u6548\u6027\u5df2\u7ecf\u7531\u9636\u6bb5\u89e3\u51b3\u4e86\u3002 ** \u5982\u679c\u9009\u62e9\u7684\u4fe1\u606f\u7ef4\u5ea6\u8fc7\u591a\uff0c\u53ef\u4ee5\u8003\u8651\u68c0\u67e5\u5b83\u4eec\u662f\u5426\u53ef\u4ee5\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\u76f8\u4e92\u5f97\u5230\uff0c\u6bd4\u5982\u672c\u9898\uff0c\u77e5\u9053\u53e6\u5916\u4e24\u4e2a\u5458\u5de5\u7684\u4f4d\u7f6e\uff0c\u5c31\u4e00\u5b9a\u80fd\u77e5\u9053\u53e6\u5916\u4e00\u4e2a\u5458\u5de5\u7684\u4f4d\u7f6e\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u4e24\u4e2a\u5458\u5de5\u7684\u4f4d\u7f6e\u4fe1\u606f\u5373\u53ef\u8986\u76d6\u6574\u4e2a\u72b6\u6001\u7a7a\u95f4\u3002 1 Tag : DP Acwing284 \u91d1\u5b57\u5854 \u03c8(\uff40\u2207\u00b4)\u03c8 \u91d1\u5b57\u5854\u7531\u82e5\u5e72\u623f\u95f4\u7ec4\u6210\uff0c\u623f\u95f4\u4e4b\u95f4\u8fde\u6709\u901a\u9053\u3002 \u5982\u679c\u628a\u623f\u95f4\u770b\u4f5c\u8282\u70b9\uff0c\u901a\u9053\u770b\u4f5c\u8fb9\u7684\u8bdd\uff0c\u6574\u4e2a\u91d1\u5b57\u5854\u5448\u73b0\u4e00\u4e2a\u6709\u6839\u6811\u7ed3\u6784\uff0c\u8282\u70b9\u7684\u5b50\u6811\u4e4b\u95f4\u6709\u5e8f\uff0c\u91d1\u5b57\u5854\u6709\u552f\u4e00\u7684\u4e00\u4e2a\u5165\u53e3\u901a\u5411\u6811\u6839\u3002 \u5e76\u4e14\uff0c\u6bcf\u4e2a\u623f\u95f4\u7684\u5899\u58c1\u90fd\u6d82\u6709\u82e5\u5e72\u79cd\u989c\u8272\u7684\u4e00\u79cd\u3002 \u673a\u5668\u4eba\u4f1a\u4ece\u5165\u53e3\u8fdb\u5165\u91d1\u5b57\u5854\uff0c\u4e4b\u540e\u5bf9\u91d1\u5b57\u5854\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u3002 \u673a\u5668\u4eba\u6bcf\u8fdb\u5165\u4e00\u4e2a\u623f\u95f4\uff08\u65e0\u8bba\u662f\u7b2c\u4e00\u6b21\u8fdb\u5165\u8fd8\u662f\u8fd4\u56de\uff09\uff0c\u90fd\u4f1a\u8bb0\u5f55\u8fd9\u4e2a\u623f\u95f4\u7684\u989c\u8272\u3002 \u6700\u540e\uff0c\u673a\u5668\u4eba\u4f1a\u4ece\u5165\u53e3\u9000\u51fa\u91d1\u5b57\u5854\u3002 \u663e\u7136\uff0c\u673a\u5668\u4eba\u4f1a\u8bbf\u95ee\u6bcf\u4e2a\u623f\u95f4\u81f3\u5c11\u4e00\u6b21\uff0c\u5e76\u4e14\u7a7f\u8d8a\u6bcf\u6761\u901a\u9053\u6070\u597d\u4e24\u6b21\uff08\u4e24\u4e2a\u65b9\u5411\u5404\u4e00\u6b21\uff09\uff0c \u7136\u540e\uff0c\u673a\u5668\u4eba\u4f1a\u5f97\u5230\u4e00\u4e2a\u989c\u8272\u5e8f\u5217 \\(S\\) \u3002 \u4f46\u662f\uff0c\u63a2\u9669\u961f\u5458\u53d1\u73b0\u8fd9\u4e2a\u989c\u8272\u5e8f\u5217\u5e76\u4e0d\u80fd\u552f\u4e00\u786e\u5b9a\u91d1\u5b57\u5854\u7684\u7ed3\u6784\u3002 \u73b0\u5728\u4ed6\u4eec\u60f3\u8bf7\u4f60\u5e2e\u52a9\u4ed6\u4eec\u8ba1\u7b97\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u989c\u8272\u5e8f\u5217\uff0c\u6709\u591a\u5c11\u79cd\u53ef\u80fd\u7684\u7ed3\u6784\u4f1a\u5f97\u5230\u8fd9\u4e2a\u5e8f\u5217\u3002 \u56e0\u4e3a\u7ed3\u679c\u53ef\u80fd\u4f1a\u975e\u5e38\u5927\uff0c\u4f60\u53ea\u9700\u8981\u8f93\u51fa\u7b54\u6848\u5bf9 \\(10^9\\) \u53d6\u6a21\u4e4b\u540e\u7684\u503c\u3002 \\(|S| \\le 3000\\) \u770b\u5230\u8fd9\u79cd\u7c7b DFS \u5e8f\uff0c\u4e0d\u96be\u60f3\u5230\u4e00\u4e2a Trick\uff1a\u4e00\u9897\u5b50\u6811\u5185\u7684 DFS \u5e8f\u5fc5\u7136\u8fde\u7eed\uff0c\u8fd9\u79cd\u7c7b DFS \u5e8f\u4e5f\u662f\u4e00\u6837\u3002 \u53d1\u73b0\u95ee\u9898\u662f\u7531\u591a\u5c11\u79cd\u53ef\u80fd\u5e8f\u5217\uff0c\u6240\u4ee5\u4e0d\u96be\u60f3\u5230\u4e00\u4e2a\u533a\u95f4 DP \u7684\u72b6\u6001\uff1a \u8bbe \\(dp_{l,r}\\) \u8868\u793a \\(S_{l\\sim r}\\) \u8fd9\u4e00\u6bb5\u989c\u8272\u5e8f\u5217\u8868\u793a\u7684\u5b50\u6811\u6240\u6709\u53ef\u80fd\u7684\u7ed3\u6784\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u6570\u91cf\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c \\(dp_{l,r}\\) \u662f\u5408\u6cd5\u72b6\u6001\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(r-l+1 \\equiv1(\\operatorname{mod} 2)\\) \u4e14 \\(S_l = S_r\\) \u3002 \u5148\u6392\u9664\u6389\u6240\u6709\u4e0d\u5408\u6cd5\u7684\u72b6\u6001\uff0c\u5373\u662f\u5faa\u73af\u65f6 \\(len = 1,3,5,\\dots\\) \u3002 \u7136\u540e\u53ef\u4ee5\u53d1\u73b0\uff0c \\(S_l,S_r\\) \u4ee3\u8868\u7684\u8282\u70b9\u5fc5\u7136\u662f\u540c\u4e00\u4e2a\uff0c\u5c31\u662f\u8fd9\u6bb5 DFS \u5e8f\u8fde\u7eed\u7684\u5b50\u6811\u7684\u6839\uff08\u8fdb\u53bb\u518d\u51fa\u6765\uff09\u3002 \u90a3\u4e48\u4e00\u4e2a\u7ecf\u5178\u7684\u6839\u636e\u4e58\u6cd5\u539f\u7406\u7684\u8ba1\u6570\u6cd5\u5c31\u662f\uff0c\u679a\u4e3e\u8fd9\u4e2a\u8282\u70b9\u7684\u6240\u6709\u513f\u5b50\u8282\u70b9\uff0c\u5c06\u4ee5\u513f\u5b50\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684 DP \u503c\u5168\u90e8\u4e58\u8d77\u6765\u5f97\u5230\u5f53\u524d\u7684\u7b54\u6848\u3002 \u53ea\u9700\u8981\u679a\u4e3e\u6240\u6709\u5212\u5206\u70b9\u7684\u4f4d\u7f6e \\(k\\) \uff0c \u4f46\u662f\u8fd9\u6837\u590d\u6742\u5ea6\u4e0a\u5929\uff0c\u5fc5\u7136\u4e0d\u53ef\u884c\u3002 \u7528\u533a\u95f4 DP \u7684 \u201d\u5408\u5e76\u7c7b\u201c \u60ef\u7528\u5957\u8def\u53ef\u4ee5\u60f3\u5230\u53e6\u5916\u4e00\u4e2a\u505a\u6cd5\uff0c\u679a\u4e3e\u5212\u5206\u70b9 \\(k\\) \uff0c \u90a3\u4e48\u5de6\u8fb9\u548c\u53f3\u8fb9\u90fd\u53ef\u80fd\u662f\u82e5\u5e72\u9897\u5b50\u6811\uff0c\u4f46\u662f\u8fd9\u6837\u5b50\u662f\u4f1a\u7b97\u91cd\u7684\uff0c\u56e0\u4e3a\u4f60\u4e0d\u77e5\u9053\u8fd9\u51e0\u9897\u5b50\u6811\u662f\u4e0d\u662f\u80fd\u91cd\u65b0\u6392\u5217\u4e00\u4e0b\u53d8\u6210\u65b0\u7684\u5b50\u6811\u3002 \u6240\u4ee5\u6b64\u65f6\u8981\u7528\u5230\u533a\u95f4 DP \u201d\u5212\u5206\u7c7b\u201c\u7684\u601d\u60f3\uff0c\u7528\u524d\u4e00\u6bb5\u7684\u72b6\u6001\u548c\u540e\u4e00\u6bb5\u7684\u82b1\u8d39\u5f97\u5230\u6574\u6bb5\u7684\u72b6\u6001\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u63a7\u5236\u5212\u5206\u6210\u4e24\u4e2a\u90e8\u5206\u7684\u540e\u4e00\u4e2a\u90e8\u5206\u53ea\u5305\u542b\u4e00\u68f5\u5b50\u6811\u3002 \u6240\u4ee5\u679a\u4e3e \\(k\\) \u3002 \u4fdd\u8bc1 \\(S_l = S_r = S_k\\) \u4e14 \\(k - l + 1 \\equiv r - (k + 1) - 1 \\equiv 1 (\\operatorname{mod}2)\\) \u3002 \u5219 \\(dp_{l,k}\\) \u662f\u4e00\u4e2a\u5df2\u7ecf\u8ba1\u7b97\u597d\u7684\u72b6\u6001\uff0c\u540e\u4e00\u6bb5\u662f \u4e00\u68f5 \u7531 \\(S_{k+1}\\sim S_{r-1}\\) \u6784\u6210\u7684\u5b50\u6811\u3002 \u90a3\u4e48\u4ee4 \\(dp_{l,r}\\) \u52a0\u4e0a \\(dp_{l,k} \\times dp_{k + 1,r-1}\\) \u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int si = 3e2 + 10 ; constexpr int mod = 1e9 ; int n ; string s ; int dp [ si ][ si ]; int main () { cin >> s ; int n = ( int ) s . size (); s = ' ' + s ; if ( ! ( n & 1 )) return puts ( \"0\" ), 0 ; memset ( dp , 0 , sizeof dp ); // \u72b6\u6001\u4e0d\u5408\u6cd5\u6216\u8005\u672a\u66f4\u65b0\u65f6\uff0cdp = 0\u3002 for ( int i = 1 ; i <= n ; ++ i ) dp [ i ][ i ] = 1 ; for ( int len = 3 ; len <= n ; len += 2 ) { for ( int i = 1 ; i + len - 1 <= n ; ++ i ) { int j = i + len - 1 ; if ( s [ i ] != s [ j ]) continue ; for ( int k = i ; k <= j - 2 ; k += 2 ) { if ( s [ k ] == s [ j ]) dp [ i ][ j ] = ( dp [ i ][ j ] + 1l l * dp [ i ][ k ] * dp [ k + 1 ][ j - 1 ] % mod ) % mod ; } } } cout << dp [ 1 ][ n ] % mod << endl ; return 0 ; } 1 Tag : \u533a\u95f4DP / DFS\u5e8f Acwing288 \u4f11\u606f\u65f6\u95f4 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5728\u67d0\u4e2a\u661f\u7403\u4e0a\uff0c\u4e00\u5929\u7531 \\(N\\) \u4e2a\u5c0f\u65f6\u6784\u6210\uff0c\u6211\u4eec\u79f0 \\(0\\) \u70b9\u5230 \\(1\\) \u70b9\u4e3a\u7b2c \\(1\\) \u4e2a\u5c0f\u65f6\u3001 \\(1\\) \u70b9\u5230 \\(2\\) \u70b9\u4e3a\u7b2c \\(2\\) \u4e2a\u5c0f\u65f6\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u5728\u7b2c \\(i\\) \u4e2a\u5c0f\u65f6\u7761\u89c9\u80fd\u591f\u6062\u590d \\(U_i\\) \u70b9\u4f53\u529b\u3002 \u5728\u8fd9\u4e2a\u661f\u7403\u4e0a\u4f4f\u7740\u4e00\u5934\u725b\uff0c\u5b83\u6bcf\u5929\u8981\u4f11\u606f \\(B\\) \u4e2a\u5c0f\u65f6\u3002 \u5b83\u4f11\u606f\u7684\u8fd9 \\(B\\) \u4e2a\u5c0f\u65f6\u4e0d\u4e00\u5b9a\u8fde\u7eed\uff0c\u53ef\u4ee5\u5206\u6210\u82e5\u5e72\u6bb5\uff0c\u4f46\u662f\u5728\u6bcf\u6bb5\u7684\u7b2c\u4e00\u4e2a\u5c0f\u65f6\uff0c\u5b83\u9700\u8981\u4ece\u6e05\u9192\u9010\u6e10\u5165\u7761\uff0c\u4e0d\u80fd\u6062\u590d\u4f53\u529b\uff0c\u4ece\u4e0b\u4e00\u4e2a\u5c0f\u65f6\u5f00\u59cb\u624d\u80fd\u7761\u7740\u3002 \u4e3a\u4e86\u8eab\u4f53\u5065\u5eb7\uff0c\u8fd9\u5934\u725b\u5e0c\u671b\u9075\u5faa\u751f\u7269\u949f\uff0c\u6bcf\u5929\u91c7\u7528\u76f8\u540c\u7684\u7761\u89c9\u8ba1\u5212\u3002 \u53e6\u5916\uff0c\u56e0\u4e3a\u65f6\u95f4\u662f\u8fde\u7eed\u7684\uff0c\u5373\u6bcf\u4e00\u5929\u7684\u7b2c \\(N\\) \u4e2a\u5c0f\u65f6\u548c\u4e0b\u4e00\u5929\u7684\u7b2c \\(1\\) \u4e2a\u5c0f\u65f6\u662f\u76f8\u8fde\u7684\uff08 \\(N\\) \u70b9\u7b49\u4e8e \\(0\\) \u70b9\uff09\uff0c\u8fd9\u5934\u725b\u53ea\u9700\u8981\u5728\u6bcf \\(N\\) \u4e2a\u5c0f\u65f6\u5185\u4f11\u606f\u591f \\(B\\) \u4e2a\u5c0f\u65f6\u5c31\u53ef\u4ee5\u4e86\u3002 \u8bf7\u4f60\u5e2e\u5fd9\u7ed9\u8fd9\u5934\u725b\u5b89\u6392\u4e00\u4e2a\u7761\u89c9\u8ba1\u5212\uff0c\u4f7f\u5b83\u6bcf\u5929\u6062\u590d\u7684\u4f53\u529b\u6700\u591a\u3002 \\(3 \\le N \\le 3830, 2 \\le B < N\\) \u8fd9\u662f\u4e00\u4e2a\u73af\u5f62\u95ee\u9898\uff0c\u4f46\u662f\u4e0d\u540c\u4e8e\u5176\u5b83\u7684\u5904\u7406\u65b9\u5f0f\uff0c\u5b83\u5e76\u4e0d\u662f\u65ad\u73af\u6210\u94fe\u3002 \u5148\u5f53\u4f5c\u4e00\u4e2a\u7ebf\u6027\u95ee\u9898\u601d\u8003\u3002 \u89c2\u5bdf\u9898\u76ee\u8981\u7d20\uff0c\u53d1\u73b0\u5448 \u201c\u9636\u6bb5\u201d \u51fa\u73b0\u7684\u5c31\u662f \u201c\u65f6\u95f4\u201d \u8fd9\u4e00\u7ef4\u5ea6\uff0c\u6240\u4ee5\u5148\u8bbe \\(dp_i\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\u5c0f\u65f6\uff08\u65f6\u95f4\u6bb5\uff09\u7684\u4ec0\u4e48\u4e1c\u897f\u3002 \u7136\u540e\u53d1\u73b0\u5173\u4e4e\u51b3\u7b56\u7684\u8981\u7d20\u662f\u7c7b\u4f3c\u80cc\u5305\u4e2d\u201d\u4f53\u79ef\u201c\u7684\u4e00\u4e2a\u4fe1\u606f\uff1a \u201d\u4f11\u606f\u7684\u65f6\u95f4\u201c\u3002 \u6240\u4ee5\u52a0\u4e00\u7ef4\uff0c \\(dp_{i,j}\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\u5c0f\u65f6\uff0c\u5df2\u7ecf\u4f11\u606f\u4e86 \\(j\\) \u4e2a\u5c0f\u65f6\u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u83b7\u5f97\u4f53\u529b\u7684\u6700\u5927\u503c\u3002 \u4f46\u662f\u8fd9\u6837\u65e0\u6cd5\u8f6c\u79fb\uff0c\u56e0\u4e3a\u8fd8\u6709\u4e00\u4e2a\u8981\u7d20\u6ca1\u7528\u8fdb\u53bb\uff0c\u201d\u7761\u89c9\u7684\u7b2c\u4e00\u4e2a\u65f6\u95f4\u6bb5\u4e0d\u80fd\u6062\u590d\u4f53\u529b\u201c\u3002 \u6240\u4ee5\u8fd8\u9700\u8981\u77e5\u9053\u725b\u4e0a\u4e00\u4e2a\u5c0f\u65f6\u7761\u6ca1\u7761\uff0c\u624d\u80fd\u786e\u5b9a\u4ece\u54ea\u91cc\u5f00\u59cb\uff0c\u725b\u662f\u5728\u7761\u7b2c\u4e00\u4e2a\u5c0f\u65f6\u3002 \u90a3\u4e48\u518d\u52a0\u4e00\u7ef4\uff0c\u8bbe \\(dp_{i,j,0/1}\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\u5c0f\u65f6\uff0c\u5df2\u7ecf\u4f11\u606f\u4e86 \\(j\\) \u4e2a\u5c0f\u65f6\uff0c\u7b2c \\(i\\) \u4e2a\u5c0f\u65f6\u662f\u5426\u5728\u7761\u89c9\u7684\u6240\u6709\u65b9\u6848\u3002 \u5206\u5f00\u8ba8\u8bba \\(0/1\\) \uff0c\u5e76\u5728\u8f6c\u79fb\u5e26\u4e0a\u8981\u7d20\uff1a\u201d\u7761\u89c9\u7684\u7b2c\u4e00\u4e2a\u65f6\u95f4\u6bb5\u4e0d\u80fd\u6062\u590d\u4f53\u529b\u201c\u3002 \u6240\u4ee5\u53ef\u4ee5\u5f97\u5230\u65b9\u7a0b\uff1a \\[\\begin{cases}dp_{i,j,0} = \\max(dp_{i-1,j,0},dp_{i-1,j,1}) \\\\ dp_{i,j,1} = \\max(dp_{i-1,j-1,0},dp_{i-1,j-1,1}+U_i)\\end{cases}\\] \u7136\u540e\u8fd9\u4e2a\u7a7a\u95f4\u6709\u70b9\u5927\uff0c\u7b97\u4e00\u4e0b\u4e4b\u540e\u53d1\u73b0\u8fc7\u4e0d\u4e86\u3002 \u53c8\u53d1\u73b0\u6bcf\u4e00\u4e2a\u9636\u6bb5\u4e4b\u548c\u4e0a\u4e00\u4e2a\u9636\u6bb5 \\(i-1\\) \u6709\u5173\uff0c\u6240\u4ee5\u53ef\u4ee5\u6eda\u52a8\u6570\u7ec4\uff0c\u4e5f\u5c31\u662f\u5229\u7528 \\(i\\&1\\) \uff0c\u5728 \\(dp_0,dp_1\\) \u4e24\u4e2a\u7cfb\u4e4b\u95f4\u4e0d\u65ad\u8f6c\u79fb\u3002 \u7136\u540e\u73af\u5f62\u600e\u4e48\u5904\u7406\u5462\uff1f\u53d1\u73b0\u8fd9\u6837\u5b50\u505a\u662f\u65e0\u6cd5\u8003\u8651\u5230\u65f6\u523b \\(1\\) \u53ef\u4ee5\u83b7\u53d6\u4f53\u529b\u7684\u60c5\u51b5\u7684\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e2a\u73af\uff0c \u6240\u4ee5\u6211\u4eec\u5f3a\u5236\u9009\u4e0a \\(U_1\\) \uff0c\u4e5f\u5c31\u662f\u4ee4 \\(dp_{1,1,1} = U_1\\) \uff0c\u7136\u540e\u518d\u8dd1\u4e00\u6b21\u5c31\u884c\u4e86\uff0c\u8fd9\u662f\u5904\u7406\u73af\u5f62DP\uff0c\u9664\u4e86\u65ad\u73af\u6210\u94fe\u4ee5\u5916\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int si = 3830 + 10 ; int n , m ; int a [ si ]; int dp [ 2 ][ si ][ 2 ]; int main () { cin >> n >> m ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; // for(auto x : a) cout << x << \" \"; // cout << endl; memset ( dp , -0x3f , sizeof dp ); dp [ 1 ][ 0 ][ 0 ] = 0 , dp [ 1 ][ 1 ][ 1 ] = 0 ; for ( int i = 2 ; i <= n ; ++ i ) { dp [ i & 1 ][ 0 ][ 0 ] = 0 ; for ( int j = 1 ; j <= i ; ++ j ) { dp [ i & 1 ][ j ][ 0 ] = max ( dp [( i - 1 ) & 1 ][ j ][ 0 ], dp [( i - 1 ) & 1 ][ j ][ 1 ]); dp [ i & 1 ][ j ][ 1 ] = max ( dp [( i - 1 ) & 1 ][ j - 1 ][ 0 ], dp [( i - 1 ) & 1 ][ j - 1 ][ 1 ] + a [ i ]) ; } } int ans = max ( dp [ n & 1 ][ m ][ 0 ], dp [ n & 1 ][ m ][ 1 ]); memset ( dp , -0x3f , sizeof dp ); dp [ 1 ][ 1 ][ 1 ] = a [ 1 ]; for ( int i = 2 ; i <= n ; ++ i ) { dp [ i & 1 ][ 0 ][ 0 ] = 0 ; for ( int j = 1 ; j <= i ; ++ j ) { dp [ i & 1 ][ j ][ 0 ] = max ( dp [( i - 1 ) & 1 ][ j ][ 0 ], dp [( i - 1 ) & 1 ][ j ][ 1 ]); dp [ i & 1 ][ j ][ 1 ] = max ( dp [( i - 1 ) & 1 ][ j - 1 ][ 0 ], dp [( i - 1 ) & 1 ][ j - 1 ][ 1 ] + a [ i ]) ; } } ans = max ( ans , dp [ n & 1 ][ m ][ 1 ]); cout << ans << endl ; return 0 ; } 1 Tag : DP / \u73af\u5f62\u5904\u7406 Acwing315 \u65c5\u884c \u03c8(\uff40\u2207\u00b4)\u03c8 \u6c42 LCS \u7684\u6240\u6709\u53ef\u80fd\u65b9\u6848\u3002 \u9996\u5148\u6c42\u51fa \\(dp_{i,j}\\) \uff0c\u7136\u540e\u8003\u8651\u5982\u4f55\u7edf\u8ba1\u65b9\u6848\u3002 \u53d1\u73b0\u53ea\u9700\u8981\u627e\u5230\u7684\u6700\u540e\u4e00\u4e2a\u76f8\u540c\u7684\u4f4d\u7f6e\u3002 \u6240\u4ee5\u8ba1\u7b97\u51fa \\(lasa[ch][i],lasb[ch][i]\\) \uff0c\u5206\u522b\u8868\u793a \\(ch\\) \u5728 \\(a/b\\) \u7684\u524d \\(i\\) \u4f4d\u6700\u540e\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002 \u7136\u540e\u8bbe\u4e00\u4e2a\u51fd\u6570 \\(f(x,y,rest)\\) \uff0c\u8868\u793a\u5f53\u524d\u5904\u7406\u5230 \\(a[1\\sim x],b[1\\sim y]\\) \uff0cLCS \u957f\u5ea6\u8fd8\u5269 \\(rest\\) \u3002 \u5148\u5224\u6389\u8fb9\u754c\uff0c\u7136\u540e\u679a\u4e3e \\(26\\) \u4e2a\u5b57\u7b26\uff0c\u770b \\(dp_{lasa[ch][i],lasb[ch][j]}\\) \u662f\u5426\u7b49\u4e8e \\(rest\\) \uff0c\u5982\u679c\u662f\u7684\u8bdd\uff0c\u6267\u884c \\(f(lasa[ch][i],lasb[ch][j],rest-1)\\) \u5373\u53ef\u3002 \u8bb0\u5f97\u5728 \\(f\\) \u91cc\u5f00\u4e00\u4e2a std::string \u7684 member \u53bb\u8bb0\u5f55\u5f53\u524d\u60c5\u51b5\u7684\u5b57\u7b26\u4e32\uff0c\u5f53 \\(rest = 0\\) \u65f6\uff0c\u628a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u653e\u5165\u4e00\u4e2a std:vector \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int si = 1e2 + 10 ; int n , m ; string a , b ; int dp [ si ][ si ]; int lasa [ 27 ][ si ], lasb [ 27 ][ si ]; vector < string > res ; void print ( int i , int j , int rest , string cur ) { if ( rest == 0 ) { res . push_back ( cur ); return ; } if ( ! i || ! j ) return ; for ( int ch = 1 ; ch <= 26 ; ++ ch ) { int prei = lasa [ ch ][ i ], prej = lasb [ ch ][ j ]; if ( dp [ prei ][ prej ] == rest ) print ( prei - 1 , prej - 1 , rest - 1 , ( char )( 'a' + ch - 1 ) + cur ); } } int main () { cin >> a >> b ; n = ( int ) a . size (), m = ( int ) b . size (); a = ' ' + a , b = ' ' + b ; memset ( dp , 0 , sizeof dp ); memset ( lasa , 0 , sizeof lasa ); memset ( lasb , 0 , sizeof lasb ); for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= m ; ++ j ) { if ( a [ i ] == b [ j ]) dp [ i ][ j ] = dp [ i - 1 ][ j - 1 ] + 1 ; else dp [ i ][ j ] = max ( dp [ i - 1 ][ j ], dp [ i ][ j - 1 ]); } } // cout << dp[n][m] << endl; for ( int i = 1 ; i <= n ; ++ i ) { for ( int ch = 1 ; ch <= 26 ; ++ ch ) { if ( a [ i ] == ( char )( 'a' + ch - 1 )) lasa [ ch ][ i ] = i ; else lasa [ ch ][ i ] = lasa [ ch ][ i - 1 ]; } } for ( int i = 1 ; i <= m ; ++ i ) { for ( int ch = 1 ; ch <= 26 ; ++ ch ) { if ( b [ i ] == ( char )( 'a' + ch - 1 )) lasb [ ch ][ i ] = i ; else lasb [ ch ][ i ] = lasb [ ch ][ i - 1 ]; } } print ( n , m , dp [ n ][ m ], \"\" ); sort ( res . begin (), res . end ()); for ( auto x : res ) cout << x << endl ; return 0 ; } 1 Tag : DP / LCS\u7684\u65b9\u6848 Acwing322 \u6d88\u6728\u5757 \u03c8(\uff40\u2207\u00b4)\u03c8 \\(n\\) \u4e2a\u6728\u5757\u6392\u6210\u4e00\u5217\uff0c\u6bcf\u4e2a\u6728\u5757\u90fd\u6709\u4e00\u4e2a\u989c\u8272\u3002 \u6bcf\u6b21\uff0c\u4f60\u90fd\u53ef\u4ee5\u70b9\u51fb\u4e00\u4e2a\u6728\u5757\uff0c\u8fd9\u6837\u88ab\u70b9\u51fb\u7684\u6728\u5757\u4ee5\u53ca\u548c\u5b83\u76f8\u90bb\u5e76\u4e14\u540c\u8272\u7684\u6728\u5757\u5c31\u4f1a\u6d88\u9664\u3002 \u5982\u679c\u4e00\u6b21\u6027\u6d88\u9664\u4e86 \\(k\\) \u4e2a\u6728\u5757\uff0c\u90a3\u4e48\u5c31\u4f1a\u5f97\u5230 \\(k\\times k\\) \u5206\u3002 \u7ed9\u5b9a\u4f60\u4e00\u4e2a\u6e38\u620f\u521d\u59cb\u72b6\u6001\uff0c\u8bf7\u4f60\u6c42\u51fa\u6700\u9ad8\u5f97\u5206\u662f\u591a\u5c11\u3002 \\(1\\le N \\le 200\\) \u3002 \u9996\u5148\u8003\u8651\u533a\u95f4 DP\uff0c\u8bbe \\(dp_{l,r}\\) \u8868\u793a\u5220\u53bb \\([l,r]\\) \u8fd9\u4e2a\u533a\u95f4\u7684\u6240\u6709\u6728\u5757\u6240\u80fd\u5f97\u5230\u7684\u6700\u5927\u5f97\u5206\u3002 \u53ef\u4ee5\u8003\u8651\u679a\u4e3e\u4e2d\u95f4\u70b9\uff0c\u7136\u540e\u7528\u4e24\u6bb5\u7684\u72b6\u6001\u5408\u5e76\u5f97\u5230\u5927\u4e00\u70b9\u7684\u72b6\u6001\u3002 \u4f46\u662f\u5982\u679c\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\uff1a [...1 1 1][1 1 1...] \u4f60\u5982\u679c\u4ece\u4e2d\u95f4\u5206\u5f00\uff0c\u90a3\u4e48 \\(3^2+3^2 < 6^2\\) \uff0c\u5fc5\u7136\u4e0d\u662f\u66f4\u4f18\u7684\uff0c\u4f60\u9700\u8981\u8ba9\u5c3d\u53ef\u80fd\u591a\u7684\u540c\u8272\u6728\u5757\u88ab\u653e\u5728\u4e00\u8d77\u5408\u5e76\u3002 \u6240\u4ee5\u6211\u4eec\u8003\u8651\u7c7b\u4f3c ODT \u7684\u601d\u60f3\uff0c\u5c06\u6240\u6709\u7684\u521d\u59cb\u540c\u8272\u7684\u6728\u5757\u5408\u6210\u4e00\u6bb5\uff0c\u8fd9\u6837\u5c31\u80fd\u907f\u514d\u4ee5\u4e0a\u7684\u60c5\u51b5\u3002 \u4f46\u662f\u6211\u4eec\u53c8\u4e0d\u597d\u8f6c\u79fb\u8fd9\u4e00\u79cd\u60c5\u51b5\uff1a [2 2 2] [1 1] [3] [2 2 2], \u5047\u8bbe\u4f60\u7528\u8fd9\u4e24\u4e2a\u72b6\u6001\u5408\u5e76\uff1a \\(dp_{1,3}\\) \u548c \\(dp_{4,4}\\) \u3002 \u90a3\u4f60\u5220\u5b8c\u4e86 \\(1,2,3\\) \u6bb5\u4e4b\u540e\uff0c\u628a \\(1\\) \u8fd9\u4e00\u6bb5 \\(2\\) \u90fd\u5220\u6389\u4e86\uff0c\u4f7f\u5f97\u5b83\u65e0\u6cd5\u548c \\(4\\) \u8fd9\u4e00\u6bb5\u7684 \\(2\\) \u5408\u5e76\u3002 \u5e76\u4e14\u53ef\u4ee5\u53d1\u73b0\uff0c\u4f60\u5982\u679c\u53ea\u679a\u4e3e\u4e00\u4e2a\u5212\u5206\u70b9\uff0c\u80af\u5b9a\u65e0\u6cd5\u4f7f\u5f97\u4e0a\u9762\u7684\u60c5\u51b5\u66f4\u4f18\u3002 \u6240\u4ee5\u8003\u8651\u679a\u4e3e\u6240\u6709\u5212\u5206\u70b9\uff0c\u4f46\u662f\u8fd9\u6837\u5b50\u590d\u6742\u5ea6\u591a\u4e86 \\(2^n\\) \u7684\u6307\u6570\u7ea7\u522b\uff0c\u65e0\u6cd5\u63a5\u53d7\u3002 \u4f46\u662f\u53d1\u73b0\uff0c\u4efb\u610f\u4e00\u79cd\u989c\u8272\u7684\u6700\u4f18\u51b3\u7b56\u4e4b\u95f4\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u4f60\u8981\u5220\u4e5f\u53ea\u4f1a\u5220\u6389\u540c\u79cd\u989c\u8272\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u52a0\u4e00\u7ef4\u72b6\u6001\uff1a \\(dp_{i,j,k}\\) \u8868\u793a\u5220\u6389\u533a\u95f4 \\([i,j]\\) \uff0c\u5e76\u4e14 \\(j\\) \u540e\u9762\u6709 \\(k\\) \u4e2a\u548c\u7b2c \\(j\\) \u6bb5\u540c\u79cd\u989c\u8272\u7684\u6728\u5757\uff0c\u80fd\u5f97\u5230\u7684\u6700\u5927\u5f97\u5206\u3002 \u4e3a\u5565\u4e0d\u662f\u6bb5\u800c\u662f\u4e2a\u5462\uff1f \u5982\u679c\u662f\u8fd9\u6837\u7684\u60c5\u51b5\uff1a [1 1 1] [2] [3 3] [2]<--|j| [4] [2 2] [5] [2] \u3002 \u4f60\u540e\u9762\u53ef\u4ee5\u548c \\(j\\) \u5408\u5e76\u7684\u6709 \\(3\\) \u4e2a \\(2\\) \uff0c\u5982\u679c\u4f60\u76f4\u63a5\u8bbe \\(k\\) \u4e3a\u6bb5\u6570\u7684\u8bdd\uff0c\u8fd8\u8981\u77e5\u9053\u6bcf\u4e00\u6bb5\u5206\u522b\u6709\u591a\u5c11\u4e2a\uff0c\u590d\u6742\u5ea6\u53c8\u4f1a\u4e0a\u53bb\u3002 \u9996\u5148\u53ef\u4ee5\u8ba9 \\(dp_{i,j,k}\\) \u7b49\u4e8e\u76f4\u63a5\u5220\u9664 \\(j\\) \u548c\u540e\u9762\u6240\u6709\u4e0e \\(j\\) \u989c\u8272\u76f8\u540c\u5757\u7684\u65b9\u6848 \\(dp_{i,j-1,0}+(len_j+k)^2\\) \u3002 \u4e5f\u5c31\u662f\u76f4\u63a5\u5220\u9664 \\([i,j)\\) \uff0c\u7136\u540e\u548c \\(j\\) \u4e00\u8d77\u5220\u9664\u540e\u9762\u7684 \\(k\\) \u4e2a\u3002 \u4f46\u662f\u5982\u4f55\u4fdd\u8bc1\u80fd\u8ba9\u8fd9 \\(k\\) \u4e2a\u8fde\u5230\u4e00\u8d77\u5462\uff1f\u4f60\u8981\u5148\u628a\u5206\u5f00\u4ed6\u4eec\u7684\u5220\u9664\u4e86\u624d\u884c\u554a\u3002 \u524d\u9762\u63d0\u5230\uff0c\u4e0d\u540c\u79cd\u989c\u8272\u7684\u51b3\u7b56\u4e4b\u95f4\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u6240\u4ee5\u4e2d\u95f4\u76f8\u9694\u7684\u90a3\u4e9b\uff0c\u56e0\u4e3a\u533a\u95f4\u957f\u5ea6\u66f4\u5c0f\uff0c\u5fc5\u7136\u4f1a\u5728\u679a\u4e3e\u5f53\u524d\u72b6\u6001\u4e4b\u524d\u5c31\u88ab\u610f\u4e49\u4e0a\u201c\u5220\u9664\u4e86\u201d\uff0c\u5e76\u4e14\u5f97\u5230\u4e00\u4e2a\u5206\u6570\u3002 \u90a3\u5b9e\u9645\u4e0a\u8f6c\u79fb\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u5f53\u4f5c\u6ca1\u6709\u8fd9\u4e9b\u76f8\u9694\u7684\u5143\u7d20\u4e86\u3002 \u7136\u540e\u8fd8\u8981\u8003\u8651 \\([i,j)\\) \u4e2d\u4e5f\u6709\u548c\u7b2c \\(j\\) \u6bb5\u989c\u8272\u76f8\u540c\u7684\u6bb5\uff08\u4e0a\u9762\u5217\u4e3e\u7684\u60c5\u51b5\u4e2d\u7684\u7b2c \\(2\\) \u6bb5\u90a3\u4e00\u4e2a \\(2\\) \uff09\uff0c\u4e00\u8d77\u548c \\(j\\) \uff0c\u8fd8\u6709\u540e\u9762\u7684 \\(k\\) \u4e2a\u5220\u9664\u7684\u60c5\u51b5\u3002 \u6b64\u65f6 \\(j\\) \u4e5f\u4f1a\u88ab\u8003\u8651\u5230\u8fd9\u4e00\u6bb5\u7684 \u201c \\(k\\) \u201d \u5f53\u4e2d\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u5220\u9664 \\((l,j)\\) \u3002 \u8fd9\u4e2a\u679a\u4e3e\u6ee1\u8db3 \\(color_l = color_j\\) \u7684 \\(l\\) \u5373\u53ef\u3002 \u8fd9\u90e8\u5206\u7684\u8f6c\u79fb\u662f\uff1a \\[dp_{i,j,k} = \\max(dp_{i,j,k},dp_{i,l,len_j + k} +dp_{l + 1, j - 1, 0})\\] \u5199\u8bb0\u5fc6\u5316\u641c\u7d22\u5373\u53ef\uff0c\u5f97\u5230\u4ee3\u7801\uff1a Code 1 2 3 4 5 6 7 8 9 10 11 int sqr ( int x ) { return x * x ;} int dp ( int l , int r , int ex ) { if ( r < l ) return 0 ; if ( f [ l ][ r ][ ex ] != -1 ) return f [ l ][ r ][ ex ]; int ans = dp ( l , r - 1 , 0 ) + sqr ( len [ r ] + ex ); for ( int i = l ; i < r ; ++ i ) if ( a [ i ] == a [ r ]) ans = max ( ans , dp ( l , i , len [ r ] + ex ) + dp ( i + 1 , r - 1 , 0 )); return f [ l ][ r ][ ex ] = ans ; } \u7b54\u6848\u662f \\(dp(1,n,0)\\) \u3002 \u8fd9\u9898\u542f\u53d1\u4e86\u6211\u4eec\u4e00\u4e2a Trick\uff1a Trick \u5f53\u9047\u5230\u533a\u95f4 DP \u5220\u9664\u5b8c\u4e00\u4e2a\u533a\u95f4\u540e\uff0c\u4f1a\u5bfc\u81f4\u8fd9\u4e2a\u533a\u95f4\u4e24\u8fb9\u6784\u6210\u66f4\u4f18\u51b3\u7b56\u7684\u60c5\u51b5\u65f6\uff0c\u4e00\u822c\u8003\u8651\u5bf9\u533a\u95f4\u4e24\u8fb9\u53ef\u80fd\u80fd\u6784\u6210\u6700\u4f18\u51b3\u7b56\u7684\u72b6\u6001\u8fdb\u884c\u72b6\u6001\u7684\u8bb0\u5f55\u548c\u8f6c\u79fb\u3002 \u4e0b\u4e00\u9053\u9898\u4e5f\u662f\u4e00\u6837\u7684 Trick\u3002 1 Tag : \u533a\u95f4DP / \u533a\u95f4\u5220\u9664\u7c7bDP *CF607B Zuma \u03c8(\uff40\u2207\u00b4)\u03c8 \u548c\u4e0a\u4e00\u9053\u4e00\u8d77\u603b\u7ed3\u3002 \u5495\u5495\u5495 *Acwing281 Coins \u03c8(\uff40\u2207\u00b4)\u03c8 \u591a\u91cd\u80cc\u5305\u4f18\u5316DP\uff0c\u53ef\u884c\u6027\u3002 \u5495\u5495\u5495","title":"2022\u5e744\u6708\u7ec3\u4e60\u8bb0\u5f55"},{"location":"rec/tricks-for-2022-04/#tricks","text":"","title":"\u56db\u6708 Tricks \u6574\u7406"},{"location":"rec/tricks-for-2022-04/#acwing272","text":"\u6c42\u4e24\u4e2a\u5e8f\u5217 \\(a,b\\) \u7684\u6700\u957f\u516c\u5171\u4e0a\u5347\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \\(1\\le n \\le 3000\\) \u8fd9\u9898\u662f LIS \u548c LCS \u7684\u7efc\u5408\u3002 \u9996\u5148\u8003\u8651\u7c7b\u4f3c LCS \u8bbe\u8ba1\u8fd9\u6837\u4e00\u4e2a\u72b6\u6001 \uff1a \\(dp_{i,j}\\) \u8868\u793a \\(a[1 \\sim i],b[1 \\sim j]\\) \u6784\u6210\u7684\u6240\u6709 LCIS\uff0c\u5c5e\u6027\u4e3a \\(\\max\\) \u3002 \u4f46\u662f\u53d1\u73b0\u8fd9\u6837\u65e0\u6cd5\u5904\u7406 \u201c\u4e0a\u5347\u201d \u8fd9\u4e00\u8981\u7d20\uff0c\u6240\u4ee5\u8003\u8651\u589e\u52a0\u8981\u7d20\u3002 \u8bbe \\(dp_{i,j}\\) \u8868\u793a \\(a[1 \\sim i],b[1\\sim j]\\) \u6784\u6210\u7684\uff0c\u4ee5 \\(b_j\\) \u7ed3\u5c3e\u7684\u6240\u6709 LCIS\uff0c\u5c5e\u6027\u4e3a \\(\\max\\) \u3002 \u7136\u540e\u8003\u8651\u5212\u5206 \\(dp_{i,j}\\) \u8fd9\u4e2a\u5b50\u96c6\u3002 \u7c7b\u4f3c LCS \u7684\u5212\u5206\u65b9\u5f0f\uff0c\u628a \\(dp_{i,j}\\) \u5212\u5206\u6210\u4e24\u4e2a\u53ef\u4ee5\u8f6c\u79fb\u5230\u5b83\u7684\u90e8\u5206\uff1a \u201c\u5305\u542b \\(a_i\\) \u7684\u7531 \\(a[1 \\sim i],b[1\\sim j]\\) \u6784\u6210\u7684\uff0c\u4ee5 \\(b_j\\) \u7ed3\u5c3e\u7684\u6240\u6709 LCIS\u201d\u3002 \u201c\u4e0d\u5305\u542b \\(a_i\\) \u7684\u7531 \\(a[1 \\sim i],b[1\\sim j]\\) \u6784\u6210\u7684\uff0c\u4ee5 \\(b_j\\) \u7ed3\u5c3e\u7684\u6240\u6709 LCIS\u201d\u3002 \u7b2c\u4e00\u79cd\u5728 \\(a_i = b_j\\) \u65f6\u8f6c\u79fb\uff0c\u7b2c\u4e8c\u79cd\u5728 \\(a_i \\not= b_j\\) \u65f6\u8f6c\u79fb\u3002 \u7136\u540e\u8003\u8651\u7528\u4e00\u4e2a\u72b6\u6001\u6765\u5206\u522b\u8868\u793a\u3002 \u7b2c\u4e8c\u4e2a\u90e8\u5206\u5b9e\u9645\u4e0a\u662f\u4ece \\(a[1 \\sim i]\\) \u5f53\u4e2d\u53bb\u9664 \\(a_i\\) \uff0c\u6240\u4ee5\u662f\u7531 \\(a[1 \\sim i-1],b[i \\sim j]\\) \u6784\u6210\uff0c\u4ee5 \\(b_j\\) \u7ed3\u5c3e\u7684 LCIS\uff0c\u53ef\u4ee5\u7528 \\(dp_{i-1,j}\\) \u8868\u793a\u3002 \u7136\u540e\u53d1\u73b0\u7b2c\u4e00\u4e2a\u90e8\u5206\u627e\u4e0d\u5230\u4e00\u4e2a\u76f4\u63a5\u7684\u72b6\u6001\u6765\u8868\u793a\uff0c\u6240\u4ee5\u7ee7\u7eed\u5212\u5206\u3002 \u9996\u5148\u56e0\u4e3a \\(a_i = b_j\\) \uff0c\u6240\u4ee5\u5b50\u96c6\u7684\u7b2c\u4e00\u7ef4\u4e0d\u80fd\u53d6\u5230 \\(i\\) \uff0c\u7b2c\u4e8c\u7ef4\u4e0d\u80fd\u53d6\u5230 \\(j\\) \u3002 \u800c\u72b6\u6001\u8bbe\u8ba1\u4e2d\uff0cLIS \u7684\u8981\u7d20\u4f53\u73b0\u5728 \u201c\u4ee5 \\(b_j\\) \u7ed3\u5c3e\u201d\uff0c\u6240\u4ee5\u8003\u8651\u628a\u8fd9\u4e2a\u5b50\u96c6\u7528\u7c7b\u4f3c LIS \u7684\u65b9\u5f0f\u5212\u5206\u3002 \u53d1\u73b0\u5305\u542b \\(a_i\\) \uff0c\u4ee5 \\(b_j\\) \u7ed3\u5c3e\u7684 LCIS \u90fd\u957f\u6210\u8fd9\u6837\uff1a \\[\\begin{matrix}\\dots,las_1,a_i/b_j \\\\ \\dots,las_2,a_i/b_j\\end{matrix}\\] \u53d1\u73b0 \u201d\u6700\u540e\u4e00\u4e2a\u4e0d\u540c\u70b9\u201c \u5c31\u662f\u5012\u6570\u7b2c\u4e8c\u4e2a\u5143\u7d20 \\(las\\) \u3002 \u6240\u4ee5\u679a\u4e3e \\(b\\) \u7684\u4e0a\u4e00\u4e2a\u5143\u7d20 \\(las\\) \uff0c\u5373\u662f\u628a\u8fd9\u4e2a\u5b50\u96c6\u5212\u5206\u6210 \\(dp_{i-1,k},(0 \\le k <j)\\) \u3002 \uff08\u56fe\u4e2d\u6f0f\u5199\u4e86 \u201d\u6240\u6709\u201c \u4e8c\u5b57\uff09 \u5f97\u5230\u8f6c\u79fb\u65b9\u7a0b\uff1a \\[dp_{i,j} = \\begin{cases}dp_{i-1,j} & a_i \\not= b_j \\\\ \\min\\limits_{0 \\le k < j}\\{dp_{i-1,k}\\} + 1 & a_i = b_j\\end{cases}\\] \u53d1\u73b0\u65b9\u7a0b\u662f \\(\\text{O}(n^3)\\) \u7684\uff0c\u4f46\u662f\u53d1\u73b0\uff0c\u5f53 \\(i\\) \u56fa\u5b9a\u7684\u65f6\u5019\uff0c \\(j\\) \u589e\u52a0 \\(1\\) \uff0c\u90a3\u4e48 \\(dp_{i-1,k}\\) \u7684\u201c\u5019\u9009\u96c6\u5408\u201d\u53ea\u4f1a\u589e\u52a0\u4e00\u4e2a\u5143\u7d20 \\(dp_{i-1,j-1}\\) \u3002 \u800c\u6b64\u5904\u6c42\u5f97\u662f\u201c\u5019\u9009\u96c6\u5408\u201d\u5f53\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u62ff\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u5f53\u524d\u7684\u5019\u9009\u96c6\u5408\u7684\u6700\u5c0f\u503c\uff0c\u76f4\u63a5\u5229\u7528\u8fd9\u4e2a\u53d8\u91cf\u8f6c\u79fb\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 f [ 0 ][ 0 ] = a [ 0 ] = b [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { int cand = 0 ; if ( b [ 0 ] < a [ i ]) cand = f [ i - 1 ][ 0 ]; // \u521d\u59cb\u5728\u51b3\u7b56\u5019\u9009\u96c6\u5408\u4e2d\u7684\u6570\u3002 for ( int j = 1 ; j <= n ; ++ j ) { if ( a [ i ] == b [ j ]) f [ i ][ j ] = cand + 1 ; else f [ i ][ j ] = f [ i - 1 ][ j ]; if ( b [ j ] < a [ i ]) cand = max ( cand , f [ i - 1 ][ j ]); } } int res = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { res = max ( f [ n ][ i ], res ); } Tricks \u5982\u679c\u5212\u5206\u72b6\u6001\u96c6\u5408\u7684\u65f6\u5019\uff0c\u53d1\u73b0\u5f53\u524d\u96c6\u5408\u65e0\u6cd5\u4f7f\u7528\u4e00\u4e2a\u72b6\u6001\u76f4\u63a5\u8868\u793a\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u7ee7\u7eed\u5212\u5206\u6216\u8005\u6dfb\u52a0\u8981\u7d20\u3002 \u5982\u679c\u7528\u4e8e \u201c\u51b3\u7b56\u201d \u7684 \u201c\u5019\u9009\u96c6\u5408\u201d \u5728\u5916\u5c42\u5faa\u73af\u56fa\u5b9a\uff0c\u5185\u5c42\u5faa\u73af\u589e\u52a0\u65f6\u5143\u7d20\u4e2a\u6570 \u201c \u53ea\u589e\u591a\u4e0d\u51cf\u5c11 \u201d\uff0c\u53ef\u4ee5\u8003\u8651\u76f4\u63a5\u4f7f\u7528\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u6700\u4f18\u51b3\u7b56\u3002 \u4e0d\u7ba1\u662f\u4e0d\u662f\u6b63\u89e3\uff0c\u5148\u6253\u51fa\u6b63\u786e\u7684\u90e8\u5206\u5206\u66b4\u529b\uff0c\u518d\u8003\u8651\u662f\u5426\u53ef\u4ee5\u4f18\u5316\u6210\u66f4\u4f18\u7684\u89e3\u6cd5\u3002 1 Tag : DP / LCS","title":"Acwing272 \u6700\u957f\u516c\u5171\u4e0a\u5347\u5b50\u5e8f\u5217"},{"location":"rec/tricks-for-2022-04/#acwing274-mobile-service","text":"\u4e00\u4e2a\u516c\u53f8\u6709\u4e09\u4e2a\u79fb\u52a8\u670d\u52a1\u5458\uff0c\u6700\u521d\u5206\u522b\u5728\u4f4d\u7f6e \\(1\uff0c2\uff0c3\\) \u5904\u3002 \u5982\u679c\u67d0\u4e2a\u4f4d\u7f6e\uff08\u7528\u4e00\u4e2a\u6574\u6570\u8868\u793a\uff09\u6709\u4e00\u4e2a\u8bf7\u6c42\uff0c\u90a3\u4e48\u516c\u53f8\u5fc5\u987b\u6307\u6d3e\u67d0\u540d\u5458\u5de5\u8d76\u5230\u90a3\u4e2a\u5730\u65b9\u53bb\u3002 \u67d0\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u5458\u5de5\u80fd\u79fb\u52a8\uff0c\u4e14\u4e0d\u5141\u8bb8\u5728\u540c\u6837\u7684\u4f4d\u7f6e\u51fa\u73b0\u4e24\u4e2a\u5458\u5de5\u3002 \u4ece \\(p\\) \u5230 \\(q\\) \u79fb\u52a8\u4e00\u4e2a\u5458\u5de5\uff0c\u9700\u8981\u82b1\u8d39 \\(c(p,q)\\) \u3002 \u8fd9\u4e2a\u51fd\u6570\u4e0d\u4e00\u5b9a\u5bf9\u79f0\uff0c\u4f46\u4fdd\u8bc1 \\(c(p,p)=0\\) \u3002 \u7ed9\u51fa \\(N\\) \u4e2a\u8bf7\u6c42\uff0c\u8bf7\u6c42\u53d1\u751f\u7684\u4f4d\u7f6e\u5206\u522b\u4e3a \\(p_1 \\sim p_N\\) \u3002 \u516c\u53f8\u5fc5\u987b\u6309\u987a\u5e8f\u4f9d\u6b21\u6ee1\u8db3\u6240\u6709\u8bf7\u6c42\uff0c\u4e14\u8fc7\u7a0b\u4e2d\u4e0d\u80fd\u53bb\u5176\u4ed6\u989d\u5916\u7684\u4f4d\u7f6e\uff0c\u76ee\u6807\u662f\u6700\u5c0f\u5316\u516c\u53f8\u82b1\u8d39\uff0c\u8bf7\u4f60\u5e2e\u5fd9\u8ba1\u7b97\u8fd9\u4e2a\u6700\u5c0f\u82b1\u8d39\u3002 \\(1\\le L \\le 200, 1\\le N \\le 3000\\) \u3002 \u9996\u5148\u8003\u8651\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u72b6\u6001\u8bbe\u8ba1\uff1a\u8bbe \\(dp_i\\) \u8868\u793a\u5904\u7406\u5b8c\u524d \\(i\\) \u4e2a\u8bf7\u6c42\uff0c\u516c\u53f8\u7684\u6700\u5c0f\u82b1\u8d39\u3002 \u4f46\u662f\u8fd9\u6837\u6839\u672c\u65e0\u6cd5\u8f6c\u79fb\uff0c\u56e0\u4e3a\u4e0d\u77e5\u9053\u6bcf\u4e2a\u5458\u5de5\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u5728\u54ea\u91cc\u3002 \u6240\u4ee5\u8003\u8651\u6dfb\u52a0\u989d\u5916\u7684\u7ef4\u5ea6\u6765\u8bb0\u5f55\u4e09\u4e2a\u5458\u5de5\u7684\u4f4d\u7f6e\u3002 \u8bbe \\(dp_{i,x,y,z}\\) \u8868\u793a\u5904\u7406\u5b8c\u524d \\(i\\) \u4e2a\u8bf7\u6c42\uff0c\u7b2c\u4e00\u4e8c\u4e09\u4e2a\u5458\u5de5\u5206\u522b\u5728 \\(x,y,z\\) \u5904\uff0c\u516c\u53f8\u5f53\u524d\u7684\u6700\u5c0f\u82b1\u8d39\u3002 \u7136\u540e\u8003\u8651\u5bf9\u8fd9\u4e2a\u72b6\u6001\u96c6\u5408\u8fdb\u884c\u5212\u5206\u3002 \u56e0\u4e3a\u72b6\u6001\u662f\u201c\u5904\u7406\u5b8c\u201d\uff0c\u6240\u4ee5\u5f53\u524d\u77e5\u9053\u7684\u4fe1\u606f\u662f\u6700\u7ec8\u7684\u4f4d\u7f6e\uff0c\u4e0d\u4fbf\u4e8e\u627e\u51fa\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u4e0d\u662f\u4ece \\(i - 1\\) \u8f6c\u79fb\u5230\u5f53\u524d\u72b6\u6001\uff0c\u800c\u662f\u4ece\u5f53\u524d\u72b6\u6001\u987a\u63a8\u66f4\u65b0 \\(i+1\\) \u3002 \u679a\u4e3e\u6bcf\u4e00\u4e2a\u5458\u5de5\u53bb\u5904\u7406 \\(p_{i+1}\\) \u7684\u60c5\u51b5\u5373\u53ef\u3002 \u4f46\u662f\u8f6c\u79fb\u4e4b\u524d\u8981\u5224\u5408\u6cd5\u6027\uff0c\u8981\u6c42 \\(x \\not=y\\not=z\\) \u3002 \u4f46\u662f\u8fd9\u6837\u7a7a\u95f4\u660e\u663e\u4f1a\u7206\u70b8\uff0c\u8003\u8651\u4f18\u5316\u3002 \u56e0\u4e3a\u5904\u7406\u5b8c \\(p_i\\) \u4e4b\u540e\uff0c\u5728\u5408\u6cd5\u7684\u72b6\u6001\u4e0b\uff0c \\(x,y,z\\) \u5f53\u4e2d\u5fc5\u7136\u6709\u4e00\u4e2a\u7b49\u4e8e \\(p_i\\) \u3002 \u6240\u4ee5\u53ef\u4ee5\u7701\u53bb\u4e00\u7ef4\uff0c\u8bbe \\(dp_{i,x,y}\\) \u8868\u793a\u5176\u4e2d\u4e00\u4e2a\u4f4d\u4e8e \\(p_i\\) \uff0c\u53e6\u5916\u4e24\u4e2a\u4f4d\u4e8e \\(x,y\\) \u3002 \u7136\u540e\u7528\u7c7b\u4f3c\u7684\u65b9\u5f0f\u8f6c\u79fb\u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 memset ( dp , 0x3f , sizeof dp ); dp [ 0 ][ 1 ][ 2 ] = 0 , p [ 0 ] = 3 ; for ( int i = 0 ; i <= n ; ++ i ) { for ( int x = 1 ; x <= l ; ++ x ) { for ( int y = 1 ; y <= l ; ++ y ) { if ( x == y || x == p [ i ] || y == p [ i ]) continue ; dp [ i + 1 ][ x ][ y ] = min ( dp [ i + 1 ][ x ][ y ], dp [ i ][ x ][ y ] + c [ p [ i ]][ p [ i + 1 ]]); dp [ i + 1 ][ p [ i ]][ y ] = min ( dp [ i + 1 ][ p [ i ]][ y ], dp [ i ][ x ][ y ] + c [ x ][ p [ i + 1 ]]); dp [ i + 1 ][ x ][ p [ i ]] = min ( dp [ i + 1 ][ x ][ p [ i ]], dp [ i ][ x ][ y ] + c [ y ][ p [ i + 1 ]]); } } } int res = 0x3f3f3f3f ; for ( int x = 1 ; x <= l ; ++ x ) { for ( int y = 1 ; y <= l ; ++ y ) { if ( x == y || x == p [ n ] || y == p [ n ]) continue ; res = min ( res , dp [ n ][ x ][ y ]); } } cout << res << endl ; \u672c\u9898\u7684\u8f6c\u79fb\u65b9\u5f0f\u76f8\u5f53\u4e8e\u6c42\u5f53\u524d\u96c6\u5408\u662f\u54ea\u51e0\u4e2a\u72b6\u6001\u7684\u5b50\u96c6\uff0c\u7136\u540e\u628a\u5f53\u524d\u96c6\u5408\u8f6c\u79fb\u5230\u5bf9\u5e94\u7684\u5927\u96c6\u5408\u4e2d\u3002 Tricks \u5f53 \u201c\u9636\u6bb5\u201d \u7c7b\u7684\u4fe1\u606f\u7ef4\u5ea6\u65e0\u6cd5\u8868\u793a\u5f53\u524d\u72b6\u6001\uff0c\u6216\u8005\u65e0\u6cd5\u8fdb\u884c\u5212\u5206\u8f6c\u79fb\u65f6\uff0c\u53ef\u4ee5\u8003\u8651\u6dfb\u52a0\u989d\u5916\u7684\u4fe1\u606f\u7ef4\u5ea6\u3002 ** \u5f53 \u201c\u9636\u6bb5\u201d \u603b\u662f\u4ece\u4e00\u4e2a\u9636\u6bb5\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u9636\u6bb5\uff0c\u53ef\u4ee5\u4e0d\u7528\u7ba1\u9644\u52a0\u4fe1\u606f\u7ef4\u5ea6\u7684\u5927\u5c0f\u53d8\u5316\u60c5\u51b5\uff0c\u56e0\u4e3a\u65e0\u540e\u6548\u6027\u5df2\u7ecf\u7531\u9636\u6bb5\u89e3\u51b3\u4e86\u3002 ** \u5982\u679c\u9009\u62e9\u7684\u4fe1\u606f\u7ef4\u5ea6\u8fc7\u591a\uff0c\u53ef\u4ee5\u8003\u8651\u68c0\u67e5\u5b83\u4eec\u662f\u5426\u53ef\u4ee5\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\u76f8\u4e92\u5f97\u5230\uff0c\u6bd4\u5982\u672c\u9898\uff0c\u77e5\u9053\u53e6\u5916\u4e24\u4e2a\u5458\u5de5\u7684\u4f4d\u7f6e\uff0c\u5c31\u4e00\u5b9a\u80fd\u77e5\u9053\u53e6\u5916\u4e00\u4e2a\u5458\u5de5\u7684\u4f4d\u7f6e\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u4e24\u4e2a\u5458\u5de5\u7684\u4f4d\u7f6e\u4fe1\u606f\u5373\u53ef\u8986\u76d6\u6574\u4e2a\u72b6\u6001\u7a7a\u95f4\u3002 1 Tag : DP","title":"Acwing274 Mobile service"},{"location":"rec/tricks-for-2022-04/#acwing284","text":"\u91d1\u5b57\u5854\u7531\u82e5\u5e72\u623f\u95f4\u7ec4\u6210\uff0c\u623f\u95f4\u4e4b\u95f4\u8fde\u6709\u901a\u9053\u3002 \u5982\u679c\u628a\u623f\u95f4\u770b\u4f5c\u8282\u70b9\uff0c\u901a\u9053\u770b\u4f5c\u8fb9\u7684\u8bdd\uff0c\u6574\u4e2a\u91d1\u5b57\u5854\u5448\u73b0\u4e00\u4e2a\u6709\u6839\u6811\u7ed3\u6784\uff0c\u8282\u70b9\u7684\u5b50\u6811\u4e4b\u95f4\u6709\u5e8f\uff0c\u91d1\u5b57\u5854\u6709\u552f\u4e00\u7684\u4e00\u4e2a\u5165\u53e3\u901a\u5411\u6811\u6839\u3002 \u5e76\u4e14\uff0c\u6bcf\u4e2a\u623f\u95f4\u7684\u5899\u58c1\u90fd\u6d82\u6709\u82e5\u5e72\u79cd\u989c\u8272\u7684\u4e00\u79cd\u3002 \u673a\u5668\u4eba\u4f1a\u4ece\u5165\u53e3\u8fdb\u5165\u91d1\u5b57\u5854\uff0c\u4e4b\u540e\u5bf9\u91d1\u5b57\u5854\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u3002 \u673a\u5668\u4eba\u6bcf\u8fdb\u5165\u4e00\u4e2a\u623f\u95f4\uff08\u65e0\u8bba\u662f\u7b2c\u4e00\u6b21\u8fdb\u5165\u8fd8\u662f\u8fd4\u56de\uff09\uff0c\u90fd\u4f1a\u8bb0\u5f55\u8fd9\u4e2a\u623f\u95f4\u7684\u989c\u8272\u3002 \u6700\u540e\uff0c\u673a\u5668\u4eba\u4f1a\u4ece\u5165\u53e3\u9000\u51fa\u91d1\u5b57\u5854\u3002 \u663e\u7136\uff0c\u673a\u5668\u4eba\u4f1a\u8bbf\u95ee\u6bcf\u4e2a\u623f\u95f4\u81f3\u5c11\u4e00\u6b21\uff0c\u5e76\u4e14\u7a7f\u8d8a\u6bcf\u6761\u901a\u9053\u6070\u597d\u4e24\u6b21\uff08\u4e24\u4e2a\u65b9\u5411\u5404\u4e00\u6b21\uff09\uff0c \u7136\u540e\uff0c\u673a\u5668\u4eba\u4f1a\u5f97\u5230\u4e00\u4e2a\u989c\u8272\u5e8f\u5217 \\(S\\) \u3002 \u4f46\u662f\uff0c\u63a2\u9669\u961f\u5458\u53d1\u73b0\u8fd9\u4e2a\u989c\u8272\u5e8f\u5217\u5e76\u4e0d\u80fd\u552f\u4e00\u786e\u5b9a\u91d1\u5b57\u5854\u7684\u7ed3\u6784\u3002 \u73b0\u5728\u4ed6\u4eec\u60f3\u8bf7\u4f60\u5e2e\u52a9\u4ed6\u4eec\u8ba1\u7b97\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u7684\u989c\u8272\u5e8f\u5217\uff0c\u6709\u591a\u5c11\u79cd\u53ef\u80fd\u7684\u7ed3\u6784\u4f1a\u5f97\u5230\u8fd9\u4e2a\u5e8f\u5217\u3002 \u56e0\u4e3a\u7ed3\u679c\u53ef\u80fd\u4f1a\u975e\u5e38\u5927\uff0c\u4f60\u53ea\u9700\u8981\u8f93\u51fa\u7b54\u6848\u5bf9 \\(10^9\\) \u53d6\u6a21\u4e4b\u540e\u7684\u503c\u3002 \\(|S| \\le 3000\\) \u770b\u5230\u8fd9\u79cd\u7c7b DFS \u5e8f\uff0c\u4e0d\u96be\u60f3\u5230\u4e00\u4e2a Trick\uff1a\u4e00\u9897\u5b50\u6811\u5185\u7684 DFS \u5e8f\u5fc5\u7136\u8fde\u7eed\uff0c\u8fd9\u79cd\u7c7b DFS \u5e8f\u4e5f\u662f\u4e00\u6837\u3002 \u53d1\u73b0\u95ee\u9898\u662f\u7531\u591a\u5c11\u79cd\u53ef\u80fd\u5e8f\u5217\uff0c\u6240\u4ee5\u4e0d\u96be\u60f3\u5230\u4e00\u4e2a\u533a\u95f4 DP \u7684\u72b6\u6001\uff1a \u8bbe \\(dp_{l,r}\\) \u8868\u793a \\(S_{l\\sim r}\\) \u8fd9\u4e00\u6bb5\u989c\u8272\u5e8f\u5217\u8868\u793a\u7684\u5b50\u6811\u6240\u6709\u53ef\u80fd\u7684\u7ed3\u6784\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u6570\u91cf\u3002 \u53ef\u4ee5\u53d1\u73b0\uff0c \\(dp_{l,r}\\) \u662f\u5408\u6cd5\u72b6\u6001\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(r-l+1 \\equiv1(\\operatorname{mod} 2)\\) \u4e14 \\(S_l = S_r\\) \u3002 \u5148\u6392\u9664\u6389\u6240\u6709\u4e0d\u5408\u6cd5\u7684\u72b6\u6001\uff0c\u5373\u662f\u5faa\u73af\u65f6 \\(len = 1,3,5,\\dots\\) \u3002 \u7136\u540e\u53ef\u4ee5\u53d1\u73b0\uff0c \\(S_l,S_r\\) \u4ee3\u8868\u7684\u8282\u70b9\u5fc5\u7136\u662f\u540c\u4e00\u4e2a\uff0c\u5c31\u662f\u8fd9\u6bb5 DFS \u5e8f\u8fde\u7eed\u7684\u5b50\u6811\u7684\u6839\uff08\u8fdb\u53bb\u518d\u51fa\u6765\uff09\u3002 \u90a3\u4e48\u4e00\u4e2a\u7ecf\u5178\u7684\u6839\u636e\u4e58\u6cd5\u539f\u7406\u7684\u8ba1\u6570\u6cd5\u5c31\u662f\uff0c\u679a\u4e3e\u8fd9\u4e2a\u8282\u70b9\u7684\u6240\u6709\u513f\u5b50\u8282\u70b9\uff0c\u5c06\u4ee5\u513f\u5b50\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684 DP \u503c\u5168\u90e8\u4e58\u8d77\u6765\u5f97\u5230\u5f53\u524d\u7684\u7b54\u6848\u3002 \u53ea\u9700\u8981\u679a\u4e3e\u6240\u6709\u5212\u5206\u70b9\u7684\u4f4d\u7f6e \\(k\\) \uff0c \u4f46\u662f\u8fd9\u6837\u590d\u6742\u5ea6\u4e0a\u5929\uff0c\u5fc5\u7136\u4e0d\u53ef\u884c\u3002 \u7528\u533a\u95f4 DP \u7684 \u201d\u5408\u5e76\u7c7b\u201c \u60ef\u7528\u5957\u8def\u53ef\u4ee5\u60f3\u5230\u53e6\u5916\u4e00\u4e2a\u505a\u6cd5\uff0c\u679a\u4e3e\u5212\u5206\u70b9 \\(k\\) \uff0c \u90a3\u4e48\u5de6\u8fb9\u548c\u53f3\u8fb9\u90fd\u53ef\u80fd\u662f\u82e5\u5e72\u9897\u5b50\u6811\uff0c\u4f46\u662f\u8fd9\u6837\u5b50\u662f\u4f1a\u7b97\u91cd\u7684\uff0c\u56e0\u4e3a\u4f60\u4e0d\u77e5\u9053\u8fd9\u51e0\u9897\u5b50\u6811\u662f\u4e0d\u662f\u80fd\u91cd\u65b0\u6392\u5217\u4e00\u4e0b\u53d8\u6210\u65b0\u7684\u5b50\u6811\u3002 \u6240\u4ee5\u6b64\u65f6\u8981\u7528\u5230\u533a\u95f4 DP \u201d\u5212\u5206\u7c7b\u201c\u7684\u601d\u60f3\uff0c\u7528\u524d\u4e00\u6bb5\u7684\u72b6\u6001\u548c\u540e\u4e00\u6bb5\u7684\u82b1\u8d39\u5f97\u5230\u6574\u6bb5\u7684\u72b6\u6001\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u63a7\u5236\u5212\u5206\u6210\u4e24\u4e2a\u90e8\u5206\u7684\u540e\u4e00\u4e2a\u90e8\u5206\u53ea\u5305\u542b\u4e00\u68f5\u5b50\u6811\u3002 \u6240\u4ee5\u679a\u4e3e \\(k\\) \u3002 \u4fdd\u8bc1 \\(S_l = S_r = S_k\\) \u4e14 \\(k - l + 1 \\equiv r - (k + 1) - 1 \\equiv 1 (\\operatorname{mod}2)\\) \u3002 \u5219 \\(dp_{l,k}\\) \u662f\u4e00\u4e2a\u5df2\u7ecf\u8ba1\u7b97\u597d\u7684\u72b6\u6001\uff0c\u540e\u4e00\u6bb5\u662f \u4e00\u68f5 \u7531 \\(S_{k+1}\\sim S_{r-1}\\) \u6784\u6210\u7684\u5b50\u6811\u3002 \u90a3\u4e48\u4ee4 \\(dp_{l,r}\\) \u52a0\u4e0a \\(dp_{l,k} \\times dp_{k + 1,r-1}\\) \u5373\u53ef\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int si = 3e2 + 10 ; constexpr int mod = 1e9 ; int n ; string s ; int dp [ si ][ si ]; int main () { cin >> s ; int n = ( int ) s . size (); s = ' ' + s ; if ( ! ( n & 1 )) return puts ( \"0\" ), 0 ; memset ( dp , 0 , sizeof dp ); // \u72b6\u6001\u4e0d\u5408\u6cd5\u6216\u8005\u672a\u66f4\u65b0\u65f6\uff0cdp = 0\u3002 for ( int i = 1 ; i <= n ; ++ i ) dp [ i ][ i ] = 1 ; for ( int len = 3 ; len <= n ; len += 2 ) { for ( int i = 1 ; i + len - 1 <= n ; ++ i ) { int j = i + len - 1 ; if ( s [ i ] != s [ j ]) continue ; for ( int k = i ; k <= j - 2 ; k += 2 ) { if ( s [ k ] == s [ j ]) dp [ i ][ j ] = ( dp [ i ][ j ] + 1l l * dp [ i ][ k ] * dp [ k + 1 ][ j - 1 ] % mod ) % mod ; } } } cout << dp [ 1 ][ n ] % mod << endl ; return 0 ; } 1 Tag : \u533a\u95f4DP / DFS\u5e8f","title":"Acwing284 \u91d1\u5b57\u5854"},{"location":"rec/tricks-for-2022-04/#acwing288","text":"\u5728\u67d0\u4e2a\u661f\u7403\u4e0a\uff0c\u4e00\u5929\u7531 \\(N\\) \u4e2a\u5c0f\u65f6\u6784\u6210\uff0c\u6211\u4eec\u79f0 \\(0\\) \u70b9\u5230 \\(1\\) \u70b9\u4e3a\u7b2c \\(1\\) \u4e2a\u5c0f\u65f6\u3001 \\(1\\) \u70b9\u5230 \\(2\\) \u70b9\u4e3a\u7b2c \\(2\\) \u4e2a\u5c0f\u65f6\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u5728\u7b2c \\(i\\) \u4e2a\u5c0f\u65f6\u7761\u89c9\u80fd\u591f\u6062\u590d \\(U_i\\) \u70b9\u4f53\u529b\u3002 \u5728\u8fd9\u4e2a\u661f\u7403\u4e0a\u4f4f\u7740\u4e00\u5934\u725b\uff0c\u5b83\u6bcf\u5929\u8981\u4f11\u606f \\(B\\) \u4e2a\u5c0f\u65f6\u3002 \u5b83\u4f11\u606f\u7684\u8fd9 \\(B\\) \u4e2a\u5c0f\u65f6\u4e0d\u4e00\u5b9a\u8fde\u7eed\uff0c\u53ef\u4ee5\u5206\u6210\u82e5\u5e72\u6bb5\uff0c\u4f46\u662f\u5728\u6bcf\u6bb5\u7684\u7b2c\u4e00\u4e2a\u5c0f\u65f6\uff0c\u5b83\u9700\u8981\u4ece\u6e05\u9192\u9010\u6e10\u5165\u7761\uff0c\u4e0d\u80fd\u6062\u590d\u4f53\u529b\uff0c\u4ece\u4e0b\u4e00\u4e2a\u5c0f\u65f6\u5f00\u59cb\u624d\u80fd\u7761\u7740\u3002 \u4e3a\u4e86\u8eab\u4f53\u5065\u5eb7\uff0c\u8fd9\u5934\u725b\u5e0c\u671b\u9075\u5faa\u751f\u7269\u949f\uff0c\u6bcf\u5929\u91c7\u7528\u76f8\u540c\u7684\u7761\u89c9\u8ba1\u5212\u3002 \u53e6\u5916\uff0c\u56e0\u4e3a\u65f6\u95f4\u662f\u8fde\u7eed\u7684\uff0c\u5373\u6bcf\u4e00\u5929\u7684\u7b2c \\(N\\) \u4e2a\u5c0f\u65f6\u548c\u4e0b\u4e00\u5929\u7684\u7b2c \\(1\\) \u4e2a\u5c0f\u65f6\u662f\u76f8\u8fde\u7684\uff08 \\(N\\) \u70b9\u7b49\u4e8e \\(0\\) \u70b9\uff09\uff0c\u8fd9\u5934\u725b\u53ea\u9700\u8981\u5728\u6bcf \\(N\\) \u4e2a\u5c0f\u65f6\u5185\u4f11\u606f\u591f \\(B\\) \u4e2a\u5c0f\u65f6\u5c31\u53ef\u4ee5\u4e86\u3002 \u8bf7\u4f60\u5e2e\u5fd9\u7ed9\u8fd9\u5934\u725b\u5b89\u6392\u4e00\u4e2a\u7761\u89c9\u8ba1\u5212\uff0c\u4f7f\u5b83\u6bcf\u5929\u6062\u590d\u7684\u4f53\u529b\u6700\u591a\u3002 \\(3 \\le N \\le 3830, 2 \\le B < N\\) \u8fd9\u662f\u4e00\u4e2a\u73af\u5f62\u95ee\u9898\uff0c\u4f46\u662f\u4e0d\u540c\u4e8e\u5176\u5b83\u7684\u5904\u7406\u65b9\u5f0f\uff0c\u5b83\u5e76\u4e0d\u662f\u65ad\u73af\u6210\u94fe\u3002 \u5148\u5f53\u4f5c\u4e00\u4e2a\u7ebf\u6027\u95ee\u9898\u601d\u8003\u3002 \u89c2\u5bdf\u9898\u76ee\u8981\u7d20\uff0c\u53d1\u73b0\u5448 \u201c\u9636\u6bb5\u201d \u51fa\u73b0\u7684\u5c31\u662f \u201c\u65f6\u95f4\u201d \u8fd9\u4e00\u7ef4\u5ea6\uff0c\u6240\u4ee5\u5148\u8bbe \\(dp_i\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\u5c0f\u65f6\uff08\u65f6\u95f4\u6bb5\uff09\u7684\u4ec0\u4e48\u4e1c\u897f\u3002 \u7136\u540e\u53d1\u73b0\u5173\u4e4e\u51b3\u7b56\u7684\u8981\u7d20\u662f\u7c7b\u4f3c\u80cc\u5305\u4e2d\u201d\u4f53\u79ef\u201c\u7684\u4e00\u4e2a\u4fe1\u606f\uff1a \u201d\u4f11\u606f\u7684\u65f6\u95f4\u201c\u3002 \u6240\u4ee5\u52a0\u4e00\u7ef4\uff0c \\(dp_{i,j}\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\u5c0f\u65f6\uff0c\u5df2\u7ecf\u4f11\u606f\u4e86 \\(j\\) \u4e2a\u5c0f\u65f6\u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u83b7\u5f97\u4f53\u529b\u7684\u6700\u5927\u503c\u3002 \u4f46\u662f\u8fd9\u6837\u65e0\u6cd5\u8f6c\u79fb\uff0c\u56e0\u4e3a\u8fd8\u6709\u4e00\u4e2a\u8981\u7d20\u6ca1\u7528\u8fdb\u53bb\uff0c\u201d\u7761\u89c9\u7684\u7b2c\u4e00\u4e2a\u65f6\u95f4\u6bb5\u4e0d\u80fd\u6062\u590d\u4f53\u529b\u201c\u3002 \u6240\u4ee5\u8fd8\u9700\u8981\u77e5\u9053\u725b\u4e0a\u4e00\u4e2a\u5c0f\u65f6\u7761\u6ca1\u7761\uff0c\u624d\u80fd\u786e\u5b9a\u4ece\u54ea\u91cc\u5f00\u59cb\uff0c\u725b\u662f\u5728\u7761\u7b2c\u4e00\u4e2a\u5c0f\u65f6\u3002 \u90a3\u4e48\u518d\u52a0\u4e00\u7ef4\uff0c\u8bbe \\(dp_{i,j,0/1}\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\u5c0f\u65f6\uff0c\u5df2\u7ecf\u4f11\u606f\u4e86 \\(j\\) \u4e2a\u5c0f\u65f6\uff0c\u7b2c \\(i\\) \u4e2a\u5c0f\u65f6\u662f\u5426\u5728\u7761\u89c9\u7684\u6240\u6709\u65b9\u6848\u3002 \u5206\u5f00\u8ba8\u8bba \\(0/1\\) \uff0c\u5e76\u5728\u8f6c\u79fb\u5e26\u4e0a\u8981\u7d20\uff1a\u201d\u7761\u89c9\u7684\u7b2c\u4e00\u4e2a\u65f6\u95f4\u6bb5\u4e0d\u80fd\u6062\u590d\u4f53\u529b\u201c\u3002 \u6240\u4ee5\u53ef\u4ee5\u5f97\u5230\u65b9\u7a0b\uff1a \\[\\begin{cases}dp_{i,j,0} = \\max(dp_{i-1,j,0},dp_{i-1,j,1}) \\\\ dp_{i,j,1} = \\max(dp_{i-1,j-1,0},dp_{i-1,j-1,1}+U_i)\\end{cases}\\] \u7136\u540e\u8fd9\u4e2a\u7a7a\u95f4\u6709\u70b9\u5927\uff0c\u7b97\u4e00\u4e0b\u4e4b\u540e\u53d1\u73b0\u8fc7\u4e0d\u4e86\u3002 \u53c8\u53d1\u73b0\u6bcf\u4e00\u4e2a\u9636\u6bb5\u4e4b\u548c\u4e0a\u4e00\u4e2a\u9636\u6bb5 \\(i-1\\) \u6709\u5173\uff0c\u6240\u4ee5\u53ef\u4ee5\u6eda\u52a8\u6570\u7ec4\uff0c\u4e5f\u5c31\u662f\u5229\u7528 \\(i\\&1\\) \uff0c\u5728 \\(dp_0,dp_1\\) \u4e24\u4e2a\u7cfb\u4e4b\u95f4\u4e0d\u65ad\u8f6c\u79fb\u3002 \u7136\u540e\u73af\u5f62\u600e\u4e48\u5904\u7406\u5462\uff1f\u53d1\u73b0\u8fd9\u6837\u5b50\u505a\u662f\u65e0\u6cd5\u8003\u8651\u5230\u65f6\u523b \\(1\\) \u53ef\u4ee5\u83b7\u53d6\u4f53\u529b\u7684\u60c5\u51b5\u7684\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e2a\u73af\uff0c \u6240\u4ee5\u6211\u4eec\u5f3a\u5236\u9009\u4e0a \\(U_1\\) \uff0c\u4e5f\u5c31\u662f\u4ee4 \\(dp_{1,1,1} = U_1\\) \uff0c\u7136\u540e\u518d\u8dd1\u4e00\u6b21\u5c31\u884c\u4e86\uff0c\u8fd9\u662f\u5904\u7406\u73af\u5f62DP\uff0c\u9664\u4e86\u65ad\u73af\u6210\u94fe\u4ee5\u5916\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int si = 3830 + 10 ; int n , m ; int a [ si ]; int dp [ 2 ][ si ][ 2 ]; int main () { cin >> n >> m ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; // for(auto x : a) cout << x << \" \"; // cout << endl; memset ( dp , -0x3f , sizeof dp ); dp [ 1 ][ 0 ][ 0 ] = 0 , dp [ 1 ][ 1 ][ 1 ] = 0 ; for ( int i = 2 ; i <= n ; ++ i ) { dp [ i & 1 ][ 0 ][ 0 ] = 0 ; for ( int j = 1 ; j <= i ; ++ j ) { dp [ i & 1 ][ j ][ 0 ] = max ( dp [( i - 1 ) & 1 ][ j ][ 0 ], dp [( i - 1 ) & 1 ][ j ][ 1 ]); dp [ i & 1 ][ j ][ 1 ] = max ( dp [( i - 1 ) & 1 ][ j - 1 ][ 0 ], dp [( i - 1 ) & 1 ][ j - 1 ][ 1 ] + a [ i ]) ; } } int ans = max ( dp [ n & 1 ][ m ][ 0 ], dp [ n & 1 ][ m ][ 1 ]); memset ( dp , -0x3f , sizeof dp ); dp [ 1 ][ 1 ][ 1 ] = a [ 1 ]; for ( int i = 2 ; i <= n ; ++ i ) { dp [ i & 1 ][ 0 ][ 0 ] = 0 ; for ( int j = 1 ; j <= i ; ++ j ) { dp [ i & 1 ][ j ][ 0 ] = max ( dp [( i - 1 ) & 1 ][ j ][ 0 ], dp [( i - 1 ) & 1 ][ j ][ 1 ]); dp [ i & 1 ][ j ][ 1 ] = max ( dp [( i - 1 ) & 1 ][ j - 1 ][ 0 ], dp [( i - 1 ) & 1 ][ j - 1 ][ 1 ] + a [ i ]) ; } } ans = max ( ans , dp [ n & 1 ][ m ][ 1 ]); cout << ans << endl ; return 0 ; } 1 Tag : DP / \u73af\u5f62\u5904\u7406","title":"Acwing288 \u4f11\u606f\u65f6\u95f4"},{"location":"rec/tricks-for-2022-04/#acwing315","text":"\u6c42 LCS \u7684\u6240\u6709\u53ef\u80fd\u65b9\u6848\u3002 \u9996\u5148\u6c42\u51fa \\(dp_{i,j}\\) \uff0c\u7136\u540e\u8003\u8651\u5982\u4f55\u7edf\u8ba1\u65b9\u6848\u3002 \u53d1\u73b0\u53ea\u9700\u8981\u627e\u5230\u7684\u6700\u540e\u4e00\u4e2a\u76f8\u540c\u7684\u4f4d\u7f6e\u3002 \u6240\u4ee5\u8ba1\u7b97\u51fa \\(lasa[ch][i],lasb[ch][i]\\) \uff0c\u5206\u522b\u8868\u793a \\(ch\\) \u5728 \\(a/b\\) \u7684\u524d \\(i\\) \u4f4d\u6700\u540e\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002 \u7136\u540e\u8bbe\u4e00\u4e2a\u51fd\u6570 \\(f(x,y,rest)\\) \uff0c\u8868\u793a\u5f53\u524d\u5904\u7406\u5230 \\(a[1\\sim x],b[1\\sim y]\\) \uff0cLCS \u957f\u5ea6\u8fd8\u5269 \\(rest\\) \u3002 \u5148\u5224\u6389\u8fb9\u754c\uff0c\u7136\u540e\u679a\u4e3e \\(26\\) \u4e2a\u5b57\u7b26\uff0c\u770b \\(dp_{lasa[ch][i],lasb[ch][j]}\\) \u662f\u5426\u7b49\u4e8e \\(rest\\) \uff0c\u5982\u679c\u662f\u7684\u8bdd\uff0c\u6267\u884c \\(f(lasa[ch][i],lasb[ch][j],rest-1)\\) \u5373\u53ef\u3002 \u8bb0\u5f97\u5728 \\(f\\) \u91cc\u5f00\u4e00\u4e2a std::string \u7684 member \u53bb\u8bb0\u5f55\u5f53\u524d\u60c5\u51b5\u7684\u5b57\u7b26\u4e32\uff0c\u5f53 \\(rest = 0\\) \u65f6\uff0c\u628a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u653e\u5165\u4e00\u4e2a std:vector \u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int si = 1e2 + 10 ; int n , m ; string a , b ; int dp [ si ][ si ]; int lasa [ 27 ][ si ], lasb [ 27 ][ si ]; vector < string > res ; void print ( int i , int j , int rest , string cur ) { if ( rest == 0 ) { res . push_back ( cur ); return ; } if ( ! i || ! j ) return ; for ( int ch = 1 ; ch <= 26 ; ++ ch ) { int prei = lasa [ ch ][ i ], prej = lasb [ ch ][ j ]; if ( dp [ prei ][ prej ] == rest ) print ( prei - 1 , prej - 1 , rest - 1 , ( char )( 'a' + ch - 1 ) + cur ); } } int main () { cin >> a >> b ; n = ( int ) a . size (), m = ( int ) b . size (); a = ' ' + a , b = ' ' + b ; memset ( dp , 0 , sizeof dp ); memset ( lasa , 0 , sizeof lasa ); memset ( lasb , 0 , sizeof lasb ); for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= m ; ++ j ) { if ( a [ i ] == b [ j ]) dp [ i ][ j ] = dp [ i - 1 ][ j - 1 ] + 1 ; else dp [ i ][ j ] = max ( dp [ i - 1 ][ j ], dp [ i ][ j - 1 ]); } } // cout << dp[n][m] << endl; for ( int i = 1 ; i <= n ; ++ i ) { for ( int ch = 1 ; ch <= 26 ; ++ ch ) { if ( a [ i ] == ( char )( 'a' + ch - 1 )) lasa [ ch ][ i ] = i ; else lasa [ ch ][ i ] = lasa [ ch ][ i - 1 ]; } } for ( int i = 1 ; i <= m ; ++ i ) { for ( int ch = 1 ; ch <= 26 ; ++ ch ) { if ( b [ i ] == ( char )( 'a' + ch - 1 )) lasb [ ch ][ i ] = i ; else lasb [ ch ][ i ] = lasb [ ch ][ i - 1 ]; } } print ( n , m , dp [ n ][ m ], \"\" ); sort ( res . begin (), res . end ()); for ( auto x : res ) cout << x << endl ; return 0 ; } 1 Tag : DP / LCS\u7684\u65b9\u6848","title":"Acwing315 \u65c5\u884c"},{"location":"rec/tricks-for-2022-04/#acwing322","text":"\\(n\\) \u4e2a\u6728\u5757\u6392\u6210\u4e00\u5217\uff0c\u6bcf\u4e2a\u6728\u5757\u90fd\u6709\u4e00\u4e2a\u989c\u8272\u3002 \u6bcf\u6b21\uff0c\u4f60\u90fd\u53ef\u4ee5\u70b9\u51fb\u4e00\u4e2a\u6728\u5757\uff0c\u8fd9\u6837\u88ab\u70b9\u51fb\u7684\u6728\u5757\u4ee5\u53ca\u548c\u5b83\u76f8\u90bb\u5e76\u4e14\u540c\u8272\u7684\u6728\u5757\u5c31\u4f1a\u6d88\u9664\u3002 \u5982\u679c\u4e00\u6b21\u6027\u6d88\u9664\u4e86 \\(k\\) \u4e2a\u6728\u5757\uff0c\u90a3\u4e48\u5c31\u4f1a\u5f97\u5230 \\(k\\times k\\) \u5206\u3002 \u7ed9\u5b9a\u4f60\u4e00\u4e2a\u6e38\u620f\u521d\u59cb\u72b6\u6001\uff0c\u8bf7\u4f60\u6c42\u51fa\u6700\u9ad8\u5f97\u5206\u662f\u591a\u5c11\u3002 \\(1\\le N \\le 200\\) \u3002 \u9996\u5148\u8003\u8651\u533a\u95f4 DP\uff0c\u8bbe \\(dp_{l,r}\\) \u8868\u793a\u5220\u53bb \\([l,r]\\) \u8fd9\u4e2a\u533a\u95f4\u7684\u6240\u6709\u6728\u5757\u6240\u80fd\u5f97\u5230\u7684\u6700\u5927\u5f97\u5206\u3002 \u53ef\u4ee5\u8003\u8651\u679a\u4e3e\u4e2d\u95f4\u70b9\uff0c\u7136\u540e\u7528\u4e24\u6bb5\u7684\u72b6\u6001\u5408\u5e76\u5f97\u5230\u5927\u4e00\u70b9\u7684\u72b6\u6001\u3002 \u4f46\u662f\u5982\u679c\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\uff1a [...1 1 1][1 1 1...] \u4f60\u5982\u679c\u4ece\u4e2d\u95f4\u5206\u5f00\uff0c\u90a3\u4e48 \\(3^2+3^2 < 6^2\\) \uff0c\u5fc5\u7136\u4e0d\u662f\u66f4\u4f18\u7684\uff0c\u4f60\u9700\u8981\u8ba9\u5c3d\u53ef\u80fd\u591a\u7684\u540c\u8272\u6728\u5757\u88ab\u653e\u5728\u4e00\u8d77\u5408\u5e76\u3002 \u6240\u4ee5\u6211\u4eec\u8003\u8651\u7c7b\u4f3c ODT \u7684\u601d\u60f3\uff0c\u5c06\u6240\u6709\u7684\u521d\u59cb\u540c\u8272\u7684\u6728\u5757\u5408\u6210\u4e00\u6bb5\uff0c\u8fd9\u6837\u5c31\u80fd\u907f\u514d\u4ee5\u4e0a\u7684\u60c5\u51b5\u3002 \u4f46\u662f\u6211\u4eec\u53c8\u4e0d\u597d\u8f6c\u79fb\u8fd9\u4e00\u79cd\u60c5\u51b5\uff1a [2 2 2] [1 1] [3] [2 2 2], \u5047\u8bbe\u4f60\u7528\u8fd9\u4e24\u4e2a\u72b6\u6001\u5408\u5e76\uff1a \\(dp_{1,3}\\) \u548c \\(dp_{4,4}\\) \u3002 \u90a3\u4f60\u5220\u5b8c\u4e86 \\(1,2,3\\) \u6bb5\u4e4b\u540e\uff0c\u628a \\(1\\) \u8fd9\u4e00\u6bb5 \\(2\\) \u90fd\u5220\u6389\u4e86\uff0c\u4f7f\u5f97\u5b83\u65e0\u6cd5\u548c \\(4\\) \u8fd9\u4e00\u6bb5\u7684 \\(2\\) \u5408\u5e76\u3002 \u5e76\u4e14\u53ef\u4ee5\u53d1\u73b0\uff0c\u4f60\u5982\u679c\u53ea\u679a\u4e3e\u4e00\u4e2a\u5212\u5206\u70b9\uff0c\u80af\u5b9a\u65e0\u6cd5\u4f7f\u5f97\u4e0a\u9762\u7684\u60c5\u51b5\u66f4\u4f18\u3002 \u6240\u4ee5\u8003\u8651\u679a\u4e3e\u6240\u6709\u5212\u5206\u70b9\uff0c\u4f46\u662f\u8fd9\u6837\u5b50\u590d\u6742\u5ea6\u591a\u4e86 \\(2^n\\) \u7684\u6307\u6570\u7ea7\u522b\uff0c\u65e0\u6cd5\u63a5\u53d7\u3002 \u4f46\u662f\u53d1\u73b0\uff0c\u4efb\u610f\u4e00\u79cd\u989c\u8272\u7684\u6700\u4f18\u51b3\u7b56\u4e4b\u95f4\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u4f60\u8981\u5220\u4e5f\u53ea\u4f1a\u5220\u6389\u540c\u79cd\u989c\u8272\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u52a0\u4e00\u7ef4\u72b6\u6001\uff1a \\(dp_{i,j,k}\\) \u8868\u793a\u5220\u6389\u533a\u95f4 \\([i,j]\\) \uff0c\u5e76\u4e14 \\(j\\) \u540e\u9762\u6709 \\(k\\) \u4e2a\u548c\u7b2c \\(j\\) \u6bb5\u540c\u79cd\u989c\u8272\u7684\u6728\u5757\uff0c\u80fd\u5f97\u5230\u7684\u6700\u5927\u5f97\u5206\u3002 \u4e3a\u5565\u4e0d\u662f\u6bb5\u800c\u662f\u4e2a\u5462\uff1f \u5982\u679c\u662f\u8fd9\u6837\u7684\u60c5\u51b5\uff1a [1 1 1] [2] [3 3] [2]<--|j| [4] [2 2] [5] [2] \u3002 \u4f60\u540e\u9762\u53ef\u4ee5\u548c \\(j\\) \u5408\u5e76\u7684\u6709 \\(3\\) \u4e2a \\(2\\) \uff0c\u5982\u679c\u4f60\u76f4\u63a5\u8bbe \\(k\\) \u4e3a\u6bb5\u6570\u7684\u8bdd\uff0c\u8fd8\u8981\u77e5\u9053\u6bcf\u4e00\u6bb5\u5206\u522b\u6709\u591a\u5c11\u4e2a\uff0c\u590d\u6742\u5ea6\u53c8\u4f1a\u4e0a\u53bb\u3002 \u9996\u5148\u53ef\u4ee5\u8ba9 \\(dp_{i,j,k}\\) \u7b49\u4e8e\u76f4\u63a5\u5220\u9664 \\(j\\) \u548c\u540e\u9762\u6240\u6709\u4e0e \\(j\\) \u989c\u8272\u76f8\u540c\u5757\u7684\u65b9\u6848 \\(dp_{i,j-1,0}+(len_j+k)^2\\) \u3002 \u4e5f\u5c31\u662f\u76f4\u63a5\u5220\u9664 \\([i,j)\\) \uff0c\u7136\u540e\u548c \\(j\\) \u4e00\u8d77\u5220\u9664\u540e\u9762\u7684 \\(k\\) \u4e2a\u3002 \u4f46\u662f\u5982\u4f55\u4fdd\u8bc1\u80fd\u8ba9\u8fd9 \\(k\\) \u4e2a\u8fde\u5230\u4e00\u8d77\u5462\uff1f\u4f60\u8981\u5148\u628a\u5206\u5f00\u4ed6\u4eec\u7684\u5220\u9664\u4e86\u624d\u884c\u554a\u3002 \u524d\u9762\u63d0\u5230\uff0c\u4e0d\u540c\u79cd\u989c\u8272\u7684\u51b3\u7b56\u4e4b\u95f4\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u6240\u4ee5\u4e2d\u95f4\u76f8\u9694\u7684\u90a3\u4e9b\uff0c\u56e0\u4e3a\u533a\u95f4\u957f\u5ea6\u66f4\u5c0f\uff0c\u5fc5\u7136\u4f1a\u5728\u679a\u4e3e\u5f53\u524d\u72b6\u6001\u4e4b\u524d\u5c31\u88ab\u610f\u4e49\u4e0a\u201c\u5220\u9664\u4e86\u201d\uff0c\u5e76\u4e14\u5f97\u5230\u4e00\u4e2a\u5206\u6570\u3002 \u90a3\u5b9e\u9645\u4e0a\u8f6c\u79fb\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u5f53\u4f5c\u6ca1\u6709\u8fd9\u4e9b\u76f8\u9694\u7684\u5143\u7d20\u4e86\u3002 \u7136\u540e\u8fd8\u8981\u8003\u8651 \\([i,j)\\) \u4e2d\u4e5f\u6709\u548c\u7b2c \\(j\\) \u6bb5\u989c\u8272\u76f8\u540c\u7684\u6bb5\uff08\u4e0a\u9762\u5217\u4e3e\u7684\u60c5\u51b5\u4e2d\u7684\u7b2c \\(2\\) \u6bb5\u90a3\u4e00\u4e2a \\(2\\) \uff09\uff0c\u4e00\u8d77\u548c \\(j\\) \uff0c\u8fd8\u6709\u540e\u9762\u7684 \\(k\\) \u4e2a\u5220\u9664\u7684\u60c5\u51b5\u3002 \u6b64\u65f6 \\(j\\) \u4e5f\u4f1a\u88ab\u8003\u8651\u5230\u8fd9\u4e00\u6bb5\u7684 \u201c \\(k\\) \u201d \u5f53\u4e2d\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u5220\u9664 \\((l,j)\\) \u3002 \u8fd9\u4e2a\u679a\u4e3e\u6ee1\u8db3 \\(color_l = color_j\\) \u7684 \\(l\\) \u5373\u53ef\u3002 \u8fd9\u90e8\u5206\u7684\u8f6c\u79fb\u662f\uff1a \\[dp_{i,j,k} = \\max(dp_{i,j,k},dp_{i,l,len_j + k} +dp_{l + 1, j - 1, 0})\\] \u5199\u8bb0\u5fc6\u5316\u641c\u7d22\u5373\u53ef\uff0c\u5f97\u5230\u4ee3\u7801\uff1a Code 1 2 3 4 5 6 7 8 9 10 11 int sqr ( int x ) { return x * x ;} int dp ( int l , int r , int ex ) { if ( r < l ) return 0 ; if ( f [ l ][ r ][ ex ] != -1 ) return f [ l ][ r ][ ex ]; int ans = dp ( l , r - 1 , 0 ) + sqr ( len [ r ] + ex ); for ( int i = l ; i < r ; ++ i ) if ( a [ i ] == a [ r ]) ans = max ( ans , dp ( l , i , len [ r ] + ex ) + dp ( i + 1 , r - 1 , 0 )); return f [ l ][ r ][ ex ] = ans ; } \u7b54\u6848\u662f \\(dp(1,n,0)\\) \u3002 \u8fd9\u9898\u542f\u53d1\u4e86\u6211\u4eec\u4e00\u4e2a Trick\uff1a Trick \u5f53\u9047\u5230\u533a\u95f4 DP \u5220\u9664\u5b8c\u4e00\u4e2a\u533a\u95f4\u540e\uff0c\u4f1a\u5bfc\u81f4\u8fd9\u4e2a\u533a\u95f4\u4e24\u8fb9\u6784\u6210\u66f4\u4f18\u51b3\u7b56\u7684\u60c5\u51b5\u65f6\uff0c\u4e00\u822c\u8003\u8651\u5bf9\u533a\u95f4\u4e24\u8fb9\u53ef\u80fd\u80fd\u6784\u6210\u6700\u4f18\u51b3\u7b56\u7684\u72b6\u6001\u8fdb\u884c\u72b6\u6001\u7684\u8bb0\u5f55\u548c\u8f6c\u79fb\u3002 \u4e0b\u4e00\u9053\u9898\u4e5f\u662f\u4e00\u6837\u7684 Trick\u3002 1 Tag : \u533a\u95f4DP / \u533a\u95f4\u5220\u9664\u7c7bDP","title":"Acwing322 \u6d88\u6728\u5757"},{"location":"rec/tricks-for-2022-04/#cf607b-zuma","text":"\u548c\u4e0a\u4e00\u9053\u4e00\u8d77\u603b\u7ed3\u3002 \u5495\u5495\u5495","title":"*CF607B Zuma"},{"location":"rec/tricks-for-2022-04/#acwing281-coins","text":"\u591a\u91cd\u80cc\u5305\u4f18\u5316DP\uff0c\u53ef\u884c\u6027\u3002 \u5495\u5495\u5495","title":"*Acwing281 Coins"},{"location":"rec/tricks-for-2022-05/","text":"\u4e94\u6708 Tricks \u6574\u7406 \u03c8(\uff40\u2207\u00b4)\u03c8 CF833B The Bakery \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u957f\u5ea6\u4e3a \\(n\\) \u3002 \u5b9a\u4e49\u4e00\u4e2a\u533a\u95f4\u7684\u8d21\u732e \\(F(l, r)\\) \u4e3a\uff0c\u8fd9\u4e2a\u533a\u95f4\u4e2d\u4e0d\u540c\u7684\u6570\u7684\u4e2a\u6570\u3002 \u8981\u6c42\u4f60\u5c06\u5e8f\u5217\u5212\u5206\u4e3a \\(m\\) \u4e2a\u975e\u7a7a\u533a\u95f4\uff0c\u4f7f\u5f97 \\(\\sum F(l, r)\\) \u6700\u5927\u3002 \\(1\\le n \\le 3.5e4, 1\\le a_i \\le n, 1\\le m \\le 50\\) \u672c\u9898\u662f\u4e00\u4e2a\u5f88\u7ecf\u5178\u7684\u5212\u5206\u578b\u533a\u95f4 DP \u95ee\u9898\uff0c\u6700\u8fd1\u9047\u5230\u4e86\u5f88\u591a\u6b21\u3002 \u4e0d\u8fc7\u548c\u6700\u8fd1\u9047\u5230\u7684\u4e0d\u4e00\u6837\uff0c\u672c\u9898\u8981\u6c42\u4f60\u5fc5\u987b\u5206\u6210 \\(m\\) \u4e2a\u975e\u7a7a\u533a\u95f4\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8bbe\u51fa\u72b6\u6001 \uff1a \\(dp_{i,j}\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\uff0c\u5206\u6210 \\(j\\) \u6bb5\u7684\u6700\u5927\u8d21\u732e\u548c\u3002 \u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5199\u51fa\u65b9\u7a0b\uff1a \\[dp_{i, j} = \\max\\limits_{j - 1 \\le k < i}\\{dp_{k, j - 1} + f(k + 1, i)\\}\\] \u4e5f\u5c31\u662f\u679a\u4e3e\u4e0a\u4e00\u6bb5\u7684\u53f3\u7aef\u70b9\u5728\u54ea\u91cc\u8fdb\u884c\u8f6c\u79fb\u3002 \u56e0\u4e3a\u8fd9\u91cc\u4e0d\u662f\u524d\u7f00 \\(\\max\\) \u800c\u662f\u4e00\u6bb5\u7684 \\(\\max\\) \uff0c\u6240\u4ee5\u6734\u7d20\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u53ea\u80fd\u662f \\(\\text{O}(n^3)\\) \u7684\u3002 \u72b6\u6001\u5df2\u7ecf\u662f\u6700\u7cbe\u7b80\u7684\u4e86\uff0c\u65e0\u6cd5\u4f18\u5316\uff08\u6eda\u52a8\u6570\u7ec4\u662f\u5bf9\u7a7a\u95f4\u7684\u4f18\u5316\u800c\u4e0d\u662f\u5bf9\u65f6\u95f4\uff09\u3002 \u6240\u4ee5\u8003\u8651\u5bf9\u51b3\u7b56\u96c6\u5408\u8fdb\u884c\u4f18\u5316\uff0c\u53d1\u73b0\u8fd9\u91cc\u5982\u679c\u56fa\u5b9a \\(i\\) \uff0c\u5f53 \\(j + 1\\) \u7684\u65f6\u5019\uff0c\u51b3\u7b56\u96c6\u5408\u4f1a\u6574\u4e2a\u53d8\u5316\uff0c\u4e0d\u597d\u641e\u3002 \u53d1\u73b0\u8fd9\u91cc \\(j\\) \u7684\u72b6\u6001\u53ea\u4f1a\u7531 \\(j - 1\\) \u8f6c\u79fb\u800c\u6765\uff0c\u6240\u4ee5 \\(j\\) \u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u9636\u6bb5\u4fdd\u8bc1\u65e0\u540e\u6548\u6027\u3002 \u90a3\u4e48\u6211\u4eec\u628a \\(j\\) \u653e\u5230\u5916\u5c42\uff0c\u56fa\u5b9a \\(j\\) \uff0c\u89c2\u5bdf\u51b3\u7b56\u96c6\u5408\u3002 \u5f53 \\(i + 1\\) \u7684\u65f6\u5019\uff0c\u51b3\u7b56\u96c6\u5408\u53ea\u589e\u52a0\u4e00\u4e2a \\(dp_{i, j - 1}\\) \u3002 \u8fd9\u91cc\u53c8\u662f\u5728\u8be2\u95ee\u533a\u95f4 \\(\\max\\) \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\u3002 \u4f46\u662f\u6700\u68d8\u624b\u7684\u662f \\(F\\) \uff0c\u8fd9\u4e2a\u4e1c\u897f\u65e2\u6ca1\u6709\u5355\u8c03\u6027\u53c8\u6ca1\u6709\u4ec0\u4e48\u5feb\u901f\u7684\u8ba1\u7b97\u65b9\u5f0f\uff08\u6700\u597d\u7684\u4e5f\u662f\u4e3b\u5e2d\u6811\u8fd9\u79cd\uff0c\u672c\u9898\u660e\u663e\u7a7a\u95f4\u4e0d\u591f\uff09\uff0c \u6240\u4ee5\u8981\u89c2\u5bdf \\(F\\) \u662f\u5426\u5177\u6709\u4ec0\u4e48\u6027\u8d28\u3002 \u56e0\u4e3a \\(F\\) \u662f\u4e0d\u540c\u7684\u6570\u7684\u4e2a\u6570\uff0c\u6240\u4ee5\u4e00\u4e2a\u6570 \\(a_i\\) \uff0c\u4ed6\u80fd\u505a \\(1\\) \u7684\u8d21\u732e\u7684\u4f4d\u7f6e\u5c31\u662f \\((pre_{a_i}, i]\\) \u3002 \u4e5f\u5c31\u662f\u4e0a\u4e00\u4e2a \\(a_i\\) \u8fd9\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u4f4d\u7f6e \\(+1\\) \uff0c\u5230\u5b83\u672c\u8eab\u7684\u4f4d\u7f6e\u3002 \u5e76\u4e14\u56e0\u4e3a \\(1\\le a_i \\le n\\) \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4f4d\u7f6e \\(i\\) \uff0c\u90fd\u7b97\u4e00\u4e0b\u8fd9\u4e2a\u4f4d\u7f6e\u5728\u54ea\u91cc\u505a\u4e86\u8d21\u732e\uff0c\u7136\u540e\u7ed9\u8fd9\u4e00\u6bb5\u533a\u95f4\u52a0 \\(1\\) \u3002 \u90a3\u4e48\u6211\u4eec\u53d1\u73b0\uff0c\u5176\u5b9e\u53ef\u4ee5\u76f4\u63a5\u5229\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4 \\(dp\\) \u7684\u7b2c\u4e00\u7ef4\u3002 \u7136\u540e\u7b97\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u8d21\u732e\uff0c\u533a\u95f4\u52a0\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u7ed9 \\(dp_{j - 1}\\) \u7cfb\u7684\u72b6\u6001\u90fd\u7b97\u4e00\u6b21\u5373\u53ef\u3002 \u8f6c\u79fb\u76f4\u63a5\u8be2\u95ee \\(\\max\\) \uff0c\u5bf9\u4e8e\u6bcf\u5c42\u5faa\u73af \\(j\\) \uff0c\u91cc\u9762\u90fd\u91cd\u65b0\u5efa\u6811\uff08\u6216\u8005\u76f4\u63a5\u4fee\u6539\uff09\uff0c\u7136\u540e\u628a \\(j - 1\\) \u7cfb\u7684 DP \u503c\u653e\u5230\u7ebf\u6bb5\u6811\u4e0a\u3002 \u590d\u6742\u5ea6 \\(\\text{O}(m\\times n \\log n)\\) \uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int si = 3.5e4 + 10 ; const int inf = 0x3f3f3f3f ; int n , m ; int last [ si ]; int pre [ si ], a [ si ]; int dp [ si ][ 50 + 10 ]; class Segment_Tree { private : struct Node { int l , r ; int dat , tag ; } t [ si << 2 ]; inline void pushup ( int p ) { t [ p ]. dat = max ( t [ p << 1 ]. dat , t [ p << 1 | 1 ]. dat ); } inline void pushdown ( int p ) { if ( t [ p ]. tag ) { t [ p << 1 ]. tag += t [ p ]. tag , t [ p << 1 | 1 ]. tag += t [ p ]. tag ; t [ p << 1 ]. dat += t [ p ]. tag , t [ p << 1 | 1 ]. dat += t [ p ]. tag ; t [ p ]. tag = 0 ; } } public : void build ( int p , int l , int r ) { t [ p ]. l = l , t [ p ]. r = r , t [ p ]. tag = 0 ; if ( l == r ) { t [ p ]. dat = 0 ; return ; } int mid = ( l + r ) >> 1 ; build ( p << 1 , l , mid ), build ( p << 1 | 1 , mid + 1 , r ); pushup ( p ); } void modify ( int p , int x , int v ) { t [ p ]. tag = 0 ; if ( t [ p ]. l == t [ p ]. r ) { t [ p ]. dat = v ; return ; } int mid = ( t [ p ]. l + t [ p ]. r ) >> 1 ; if ( x <= mid ) modify ( p << 1 , x , v ); else modify ( p << 1 | 1 , x , v ); pushup ( p ); } void update ( int p , int l , int r , int v ) { if ( l <= t [ p ]. l && t [ p ]. r <= r ) { t [ p ]. dat += v , t [ p ]. tag += v ; return ; } pushdown ( p ); int mid = ( t [ p ]. l + t [ p ]. r ) >> 1 ; if ( l <= mid ) update ( p << 1 , l , r , v ); if ( r > mid ) update ( p << 1 | 1 , l , r , v ); pushup ( p ); } int query ( int p , int l , int r ) { int res = - inf ; if ( l <= t [ p ]. l && t [ p ]. r <= r ) return t [ p ]. dat ; pushdown ( p ); int mid = ( t [ p ]. l + t [ p ]. r ) >> 1 ; if ( l <= mid ) res = max ( res , query ( p << 1 , l , r )); if ( r > mid ) res = max ( res , query ( p << 1 | 1 , l , r )); return res ; } }; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); Segment_Tree tr ; cin >> n >> m ; memset ( dp , 0 , sizeof dp ); for ( int i = 1 ; i <= n ; ++ i ) { cin >> a [ i ]; if ( ! last [ a [ i ]]) last [ a [ i ]] = i ; else { pre [ i ] = last [ a [ i ]]; last [ a [ i ]] = i ; } } // for(int i = 1; i <= n; ++i) // meow(pre[i]) << endl; for ( int j = 1 ; j <= m ; ++ j ) { tr . build ( 1 , 0 , n ); for ( int i = 1 ; i <= n ; ++ i ) { tr . modify ( 1 , i , dp [ i ][ j - 1 ]); } for ( int i = 1 ; i <= n ; ++ i ) { tr . update ( 1 , pre [ i ], i - 1 , 1 ); dp [ i ][ j ] = tr . query ( 1 , j - 1 , i - 1 ); } } cout << dp [ n ][ m ] << endl ; return 0 ; } 1 Tag : \u7ebf\u6bb5\u6811\u4f18\u5316DP / \u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u4e0b\u6807 / \u4e00\u4e2a\u533a\u95f4DP\u6a21\u578b\u7684\u4f18\u5316 CF1591F Non-Equal Neighbours \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u957f\u5ea6\u4e3a \\(n\\) \u3002 \u8981\u6c42\u4f60\u6784\u9020\u4e00\u4e2a\u5e8f\u5217 \\(b\\) \uff0c\u4f7f\u5f97 \\(1\\le b_i \\le a_i\\) \uff0c\u4e14 \\(b_i \\not = b_{i + 1}\\) \u3002 \u95ee\u65b9\u6848\u6570\u5bf9 \\(998244353\\) \u53d6\u6a21\u3002 \\(1\\le n \\le 2\\times 10^5, 1\\le a_i \\le 10^9\\) \u3002 \u8003\u8651\u4e00\u4e2a\u66b4\u529b\u7684 DP\u3002 \u8bbe \\(dp_{i, j}\\) \u8868\u793a\u524d \\(i\\) \u4e2a\u4f4d\u7f6e\uff0c\u4e14\u7b2c \\(i\\) \u4e2a \u4f4d\u7f6e\u9009 \\(j\\) \u7684\u65b9\u6848\u6570\u3002 \u7136\u540e\u53ef\u4ee5\u5f97\u5230\u65b9\u7a0b\uff1a \\[dp_{i, j} = \\sum\\limits_{k = 1}^{a_{i - 1}} dp_{i - 1, k} - dp_{i - 1, j}\\] \u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u5c31\u662f\u7b97\u4e0a\u4e00\u4e2a\u9636\u6bb5\u7684\u548c\uff0c\u7136\u540e\u6263\u6389\u4e0a\u4e00\u4e2a\u9636\u6bb5\u7684 \\(j\\) \u4f4d\u7f6e\u3002 \u8003\u8651\u4f7f\u7528\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7b2c\u4e8c\u7ef4\u3002 \u6240\u6709\u8f6c\u79fb\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u4fee\u6539\u3002 \u6240\u4ee5\u53ef\u4ee5\u5148\u7b97\u51fa \\(sum = \\sum\\limits_{k = 1}^{a_{i - 1}} dp_{i - 1, k}\\) \uff0c \u8ba9\u7ebf\u6bb5\u6811\u4e0a \\([1, a_{i - 1}]\\) \u5168\u90e8\u53d6\u53cd\uff0c\u7136\u540e\u7ed9 \\([1, a_{i}]\\) \u5168\u90e8\u52a0\u4e0a \\(sum\\) \u3002 \\((a_i, 10^9]\\) \u5168\u90e8\u8d4b\u503c\u4e3a \\(0\\) \u5373\u53ef\u3002 \u53ea\u9700\u8981\u4e00\u4e2a\u533a\u95f4\u52a0\uff0c\u533a\u95f4\u67e5\uff0c\u533a\u95f4\u4e58 \\(0, -1\\) \u7684 lazytag \u7ebf\u6bb5\u6811\u5373\u53ef\u3002 \u7c7b\u4f3c\u7ebf\u6bb5\u6811 2\u3002 \u4f46\u662f\u6ce8\u610f\uff0c\u56e0\u4e3a\u52a8\u6001\u5f00\u70b9\u9700\u8981\u5f88\u5927\u7684\u7a7a\u95f4\uff0c\u6240\u4ee5\u9700\u8981\u5361\u4e00\u5361\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u89c1\u65e5\u5e38\u968f\u7b14\u7684 \u201c\u5361\u5e38\u5c0f\u6280\u5de7\u201d\u3002 Codeinclude <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define ls lson[p] #define rs rson[p] #define meow(x) cerr << #x << \" = \" << x using namespace std ; const int si = 2e5 + 10 ; const int sii = 1e7 + 1 ; constexpr int mod = 998244353l l ; int n ; int a [ si ]; int lson [ sii ], rson [ sii ], dat [ sii ], add [ sii ], mul [ sii ]; // \u7a7a\u95f4\u4e00\u5b9a\u8981\u5f00\u591f\u3002 // \u5f00\u5230 class \u91cc\u9762\u7684\u65f6\u5019\u8981\u63d0\u524d\u7b97\u597d\u7a7a\u95f4\u3002 // \u5982\u679c\u7a7a\u95f4\u6bd4\u8f83\u5361\uff0c\u5c31\u8981\u63d0\u51fa\u6765\u5199\u3002\uff01\uff01\uff01 int cnt_node = 0 ; inline int Newnode () { return ++ cnt_node ; } inline void pushup ( int p ) { dat [ p ] = ( dat [ ls ] + dat [ rs ]) % mod ; } inline void pushdown ( int p , int l , int r ) { if ( ! add [ p ] && mul [ p ] == 1 ) return ; if ( ! ls ) ls = Newnode (); if ( ! rs ) rs = Newnode (); int mid = ( l + r ) >> 1 ; dat [ ls ] = ( 1l l * dat [ ls ] * mul [ p ] + 1l l * add [ p ] * ( mid - l + 1 )) % mod ; dat [ rs ] = ( 1l l * dat [ rs ] * mul [ p ] + 1l l * add [ p ] * ( r - mid - 1 + 1 )) % mod ; add [ ls ] = ( 1l l * add [ ls ] * mul [ p ] + 1l l * add [ p ]) % mod ; add [ rs ] = ( 1l l * add [ rs ] * mul [ p ] + 1l l * add [ p ]) % mod ; mul [ ls ] = ( 1l l * mul [ ls ] * mul [ p ]) % mod ; mul [ rs ] = ( 1l l * mul [ rs ] * mul [ p ]) % mod ; add [ p ] = 0 , mul [ p ] = 1 ; } void update_add ( int & p , int l , int r , int ql , int qr , int v ) { if ( l > r ) return ; if ( ! p ) p = Newnode (); if ( ql <= l && r <= qr ) { add [ p ] = ( add [ p ] + v ) % mod ; dat [ p ] = ( dat [ p ] + 1l l * v * ( r - l + 1 )) % mod ; return ; } pushdown ( p , l , r ); int mid = ( l + r ) >> 1 ; if ( ql <= mid ) update_add ( ls , l , mid , ql , qr , v ); if ( qr > mid ) update_add ( rs , mid + 1 , r , ql , qr , v ); pushup ( p ); return ; } void update_mul ( int & p , int l , int r , int ql , int qr , int v ) { if ( l > r ) return ; if ( ! p ) p = Newnode (); if ( ql <= l && r <= qr ) { dat [ p ] = ( dat [ p ] * 1l l * v ) % mod ; add [ p ] = ( add [ p ] * 1l l * v ) % mod ; mul [ p ] = ( mul [ p ] * 1l l * v ) % mod ; return ; } pushdown ( p , l , r ); int mid = ( l + r ) >> 1 ; if ( ql <= mid ) update_mul ( ls , l , mid , ql , qr , v ); if ( qr > mid ) update_mul ( rs , mid + 1 , r , ql , qr , v ); pushup ( p ); return ; } int query ( int p , int l , int r , int ql , int qr ) { if ( l > r ) return 0l l ; if ( ! p ) return 0l l ; if ( ql <= l && r <= qr ) return dat [ p ] % mod ; pushdown ( p , l , r ); int mid = ( l + r ) >> 1 ; int res = 0l l ; if ( ql <= mid ) res = ( res + query ( ls , l , mid , ql , qr )) % mod ; if ( qr > mid ) res = ( res + query ( rs , mid + 1 , r , ql , qr )) % mod ; return res % mod ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int root = 0 ; cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; update_add ( root , 1 , 1e9 , 1 , a [ 1 ], 1 ); for ( int i = 2 ; i <= n ; ++ i ) { int sum = query ( root , 1 , 1e9 , 1 , 1e9 ) % mod ; update_mul ( root , 1 , 1e9 , 1 , a [ i ], -1 ); update_add ( root , 1 , 1e9 , 1 , a [ i ], sum ); update_mul ( root , 1 , 1e9 , a [ i ] + 1 , 1e9 , 0 ); } cout << ( query ( root , 1 , 1e9 , 1 , 1e9 ) + mod ) % mod << endl ; return 0 ; } /* // \u88ab\u5361\u7a7a\u95f4\u7684\u4ee3\u7801\u3002 #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define ls t[p].lson #define rs t[p].rson #define meow(x) cerr << #x << \" = \" << x using namespace std; using i64 = long long; const int si = 2e5 + 10; constexpr i64 mod = 998244353ll; int n; i64 a[si]; class Segment_Tree { private : struct Node { int lson = 0, rson = 0; i64 dat = 0ll, add = 0ll, mul = 1ll; }t[si * 60]; // \u7a7a\u95f4\u4e00\u5b9a\u8981\u5f00\u591f\u3002 int cnt_node = 0; inline int Newnode() { return ++cnt_node; } inline void pushup(int p) { t[p].dat = t[ls].dat + t[rs].dat; } inline void pushdown(int p, int l, int r) { if(!t[p].add && t[p].mul == 1) return; if(!ls) ls = Newnode(); if(!rs) rs = Newnode(); int mid = (l + r) >> 1; t[ls].dat = (t[ls].dat * t[p].mul + t[p].add * (mid - l + 1)) % mod; t[rs].dat = (t[rs].dat * t[p].mul + t[p].add * (r - mid - 1 + 1)) % mod; t[ls].add = (t[ls].add * t[p].mul + t[p].add) % mod; t[rs].add = (t[rs].add * t[p].mul + t[p].add) % mod; t[ls].mul = (t[ls].mul * t[p].mul) % mod; t[rs].mul = (t[rs].mul * t[p].mul) % mod; t[p].add = 0ll, t[p].mul = 1ll; } public : void update_add(int &p, int l, int r, int ql, int qr, i64 v) { if(l > r) return; if(!p) p = Newnode(); if(ql <= l && r <= qr) { t[p].add = (t[p].add + v) % mod; t[p].dat = (t[p].dat + v * (r - l + 1)) % mod; return; } pushdown(p, l, r); int mid = (l + r) >> 1; if(ql <= mid) update_add(ls, l, mid, ql, qr, v); if(qr > mid) update_add(rs, mid + 1, r, ql, qr, v); pushup(p); return; } void update_mul(int &p, int l, int r, int ql, int qr, i64 v) { if(l > r) return; if(!p) p = Newnode(); if(ql <= l && r <= qr) { t[p].dat = (t[p].dat * v) % mod; t[p].add = (t[p].add * v) % mod; t[p].mul = (t[p].mul * v) % mod; return; } pushdown(p, l, r); int mid = (l + r) >> 1; if(ql <= mid) update_mul(ls, l, mid, ql, qr, v); if(qr > mid) update_mul(rs, mid + 1, r, ql, qr, v); pushup(p); return; } i64 query(int p, int l, int r, int ql, int qr) { if(l > r) return 0ll; if(!p) return 0ll; if(ql <= l && r <= qr) return t[p].dat % mod; pushdown(p, l, r); int mid = (l + r) >> 1; i64 res = 0ll; if(ql <= mid) res = (res + query(ls, l, mid, ql, qr)) % mod; if(qr > mid) res = (res + query(rs, mid + 1, r, ql, qr)) % mod; return res % mod; } }tr; int main() { cin.tie(0) -> sync_with_stdio(false); cin.exceptions(cin.failbit | cin.badbit); int root = 0; cin >> n; for(int i = 1; i <= n; ++i) cin >> a[i]; tr.update_add(root, 1, 1e9, 1, a[1], 1ll); for(int i = 2; i <= n; ++i) { i64 sum = tr.query(root, 1, 1e9, 1, 1e9) % mod; tr.update_mul(root, 1, 1e9, 1, a[i], -1ll); tr.update_add(root, 1, 1e9, 1, a[i], sum); tr.update_mul(root, 1, 1e9, a[i] + 1, 1e9, 0ll); } cout << (tr.query(root, 1, 1e9, 1, 1e9) + mod) % mod << endl; return 0; } */ 1 Tag : \u7ebf\u6bb5\u6811\u4f18\u5316DP / \u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u4e0b\u6807 CF1485F Copy or Prefix Sum \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60\u4e00\u4e2a\u6570\u5217 \\(b\\) \uff0c\u8981\u6c42\u6784\u9020\u4e00\u4e2a\u6570\u5217 \\(a\\) \uff0c\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a \\(a_i = b_i\\) \u6216\u8005 \\(b_i = \\sum\\limits_{j = 1}^{i} a_j\\) \u3002 \u6c42\u53ef\u80fd\u7684 \\(a\\) \u7684\u6570\u91cf\u6a21 \\(10^9 + 7\\) \u3002 \\(1\\le n \\le 2\\times 10^5, 1\\le b_i \\le 10^9\\) \u3002 \u8003\u8651\u4e00\u4e2a\u6734\u7d20\u7684 DP\uff0c\u76f4\u63a5\u628a\u6240\u6709\u8981\u7d20\u5904\u7406\u8fdb\u53bb\u3002 \u524d\u7f00\u548c\u8fd9\u4e2a\u8981\u7d20\u5c31\u4e0d\u7528\u5728\u72b6\u6001\u91cc\u4f53\u73b0\u4e86\uff0c\u76f4\u63a5\u5728\u8f6c\u79fb\u51b3\u7b56\u7684\u65f6\u5019\u4f53\u73b0\u3002 \u6240\u4ee5\u8bbe \\(dp(i, j)\\) \u4e3a\uff0c\u8003\u8651\u524d \\(i\\) \u4e2a\u6570\uff0c\u5f53\u524d\u9009\u7684 \\(\\sum a_i = j\\) \uff0c\u603b\u5171\u7684\u65b9\u6848\u6570\u3002 \u7136\u540e\u9488\u5bf9\u4e24\u79cd\u60c5\u51b5\u5199\u8f6c\u79fb\u65b9\u7a0b\uff1a \\[\\begin{cases}dp(i, j) = dp(i - 1, j - b_i) & a_i = b_i \\\\ dp(i, b_i) = \\sum\\limits_{j = -\\infty}^{\\infty} dp(i - 1, j) - dp(i - 1, 0) & \\texttt{otherwise.}\\end{cases}\\] \u7b2c\u4e00\u79cd\u6bd4\u8f83\u663e\u7136\uff0c\u7b2c\u4e8c\u79cd\u4ece \\(-\\infty\\) \u6c42\u548c\u5230 \\(\\infty\\) \u662f\u56e0\u4e3a\uff0c\u5047\u8bbe\u4f60 \\(a_i\\) \u968f\u4fbf\u9009\u4e86\u4e00\u4e2a\u6570 \\(x\\) \uff0c\u4f60\u53ea\u9700\u8981\u8ba9 \\(\\sum\\limits_{j = 1}^{i - 1} a_j= b_i - x\\) \u5373\u53ef\uff0c\u6240\u4ee5\u4e0d\u7ba1 \\(a_i\\) \u53d6\u5565\uff0c\u76f4\u63a5\u524d\u9762\u5bf9\u5e94\u7684\u65b9\u6848\u6570\u5c31\u884c\u3002 \u56e0\u4e3a \\(a_i\\) \u53ef\u4ee5\u968f\u4fbf\u9009\uff0c\u6240\u4ee5\u81ea\u7136\u662f\u4ece\u8d1f\u65e0\u7a77\u4e00\u76f4\u6c42\u548c\u5230\u6b63\u65e0\u7a77\u3002 \u8981\u51cf\u53bb \\(dp(i - 1, 0)\\) \u662f\u56e0\u4e3a\uff0c\u5f53 \\(\\sum\\limits_{j = 1}^{i - 1} a_j = 0\\) \u65f6\uff0c \u8fd9\u4e24\u79cd\u65b9\u6848\u90fd\u662f\u7b49\u4ef7\u7684\u3002 \u7136\u540e\u7b2c\u4e00\u4e2a\u5c31\u662f\u7ed9\u6570\u7ec4\u5e73\u79fb\u4e86\u4e00\u4e0b\u3002 \u540e\u4e00\u4e2a\u770b\u8d77\u6765\u5f88\u5413\u4eba\uff0c\u5176\u5b9e\u53d1\u73b0\u5c31\u662f\u4e00\u4e2a\u5168\u5c40\u6c42\u548c\uff0c\u7136\u540e\u53d1\u73b0\u6bcf\u6b21\u51b3\u7b56\u5b8c\u4e4b\u540e\uff0c\u4f1a\u6539\u53d8\u7684\u53ea\u6709 \\(dp(i, b_i)\\) \u3002 \u6240\u4ee5\u6211\u4eec\u8bb0\u5f55\u4e09\u4e2a\u53d8\u91cf\uff0c\u4e00\u4e2a\u662f\u504f\u79fb\u91cf \\(\\Delta\\) \uff0c\u4e00\u4e2a\u662f\u5168\u5c40\u548c \\(\\sum\\) \uff0c\u4e00\u4e2a\u662f\u4e0a\u4e00\u4e2a\u88ab\u6539\u53d8\u7684\u4f4d\u7f6e \\(dp(i - 1, b_{i - 1})\\) \u5e73\u79fb\u4e4b\u524d\u7684\u503c\u3002 \u7136\u540e\u8f6c\u79fb\u5c31\u5f88\u65b9\u4fbf\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include <map> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #include <ext/pb_ds/hash_policy.hpp> #include <ext/pb_ds/assoc_container.hpp> #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int si = 3e5 + 10 ; const int mod = 1e9 + 7 ; int n ; i64 a [ si ]; i64 sum = 0 , delta = 0 ; // __gnu_pbds::gp_hash_table<i64, i64> dp; map < i64 , i64 > dp ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { cin >> n ; dp . clear (); for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; dp [ 0 ] = 1l l , sum = 1l l , delta = 0l l ; for ( int i = 1 ; i <= n ; ++ i ) { int kot = ( sum - dp [ 0l l - delta ] + mod ) % mod ; sum = ( sum + kot ) % mod , delta += a [ i ]; dp [ a [ i ] - delta ] = ( dp [ a [ i ] - delta ] + kot ) % mod ; } cout << sum << \" \\n \" ; } return 0 ; } 1 Tag : DP\u4f18\u5316 / \u6c34\u4f4d\u7ebf\u6cd5 CF1156F Card Bag \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60 \\(n\\) \u5f20\u724c\uff0c\u6bcf\u5f20\u724c\u4e0a\u6709\u4e00\u4e2a\u6570\u5b57 \\(a_i, 1\\le a_i \\le n\\) \u3002 \u4f60\u6bcf\u6b21\u4f1a\u4ece\u724c\u5806\u91cc\u62bd\u4e00\u5f20\u724c\uff0c\u62bd\u5b8c\u4e4b\u540e\u4e0d\u653e\u56de\u3002 \u5047\u8bbe\u5f53\u524d\u62bd\u5230 \\(x\\) \uff0c\u4e0a\u4e00\u5f20\u62bd\u51fa\u7684\u662f \\(y\\) \u3002 \u5982\u679c \\(x = y\\) \uff0cwin\u3002 \u5982\u679c \\(x < y\\) \uff0close\u3002 \u5982\u679c \\(x > y\\) \uff0ccontinue\u3002 \u95ee\u4f60\u6700\u540e\u83b7\u80dc\u7684\u6982\u7387\u662f\u591a\u5c11\uff0c\u5bf9 \\(998244353\\) \u53d6\u6a21\uff0c \\(1\\le n \\le 5000\\) \u3002 \u53d1\u73b0\u8981\u5904\u7406\u7684\u8981\u7d20\u6709\u70b9\u591a\uff1a \u62bd\u5b8c\u4e0d\u653e\u56de\u53bb \u6bcf\u6b21\u53ef\u80fd\u6709\u4e09\u79cd\u6e38\u620f\u72b6\u6001\uff1awin,lose,continue\u3002 \u6bcf\u5f20\u724c\u7684\u6570\u91cf \u7b2c\u4e00\u4e2a\u76f4\u63a5\u8bb0\u5f55\u5f53\u524d\u62bd\u4e86\u7b2c\u51e0\u6b21\u5c31\u884c\u4e86\u3002 \u7b2c\u4e8c\u4e2a\u4e5f\u6bd4\u8f83\u597d\u505a\uff0close\u5c31\u76f4\u63a5\u9000\u51fa\u4e86\uff0c\u5bf9\u4e8e\u6700\u540e\u7684\u7b54\u6848\u4e0d\u4f1a\u6709\u8d21\u732e\uff0ccontinue \u9700\u8981\u8bbe\u8ba1\u72b6\u6001\u8868\u793a\uff0c\u4f46\u662f\u53d1\u73b0 win \u53ea\u9700\u8981\u8003\u8651\u6700\u540e\u4e24\u4e2a\u724c\u76f8\u540c\u5c31\u884c\u4e86\uff0c\u6240\u4ee5\u4e5f\u4e0d\u7528\u8bbe\u8ba1\u72b6\u6001\uff0c\u6700\u540e\u7edf\u4e00\u8ba1\u7b97\u8d21\u732e\u5373\u53ef\u3002 \u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5904\u7406 continue \u7684\u60c5\u51b5\u3002 \u6700\u9ebb\u70e6\u7684\u662f\u6700\u540e\u4e00\u4e2a\uff0c\u611f\u89c9\u4e0a\u6765\u8bf4\u9700\u8981\u8bb0\u5f55\u6bcf\u5f20\u724c\u5269\u4f59\u7684\u6570\u91cf\uff0c\u4f46\u8fd9\u6837\u72b6\u6001\u627f\u53d7\u4e0d\u4e86\uff0c\u4e5f\u4e0d\u597d\u8f6c\u79fb\u3002 \u4f46\u5176\u5b9e\u4e0d\u7528\uff0c\u56e0\u4e3a\u6709\u4e00\u4e2a\u6027\u8d28\uff08\u89c1\u4e0b\u9762\u7684 Warning\uff09\u3002 \u6240\u4ee5\u53ef\u4ee5\u8bbe\u8ba1\u51fa DP \uff1a \u8bbe \\(dp(i, j)\\) \u8868\u793a\u8003\u8651\u7b2c \\(i\\) \u6b21\uff0c\u62bd\u5230 \\(j\\) \u4e14\u7ee7\u7eed\u4e0b\u53bb\u7684\u6982\u7387\u3002 \u56e0\u4e3a\u8981\u4fdd\u8bc1\u4e00\u76f4\u7ee7\u7eed\uff0c\u6240\u4ee5\u8f6c\u79fb\u7684\u65f6\u5019\u4e0d\u80fd\u4ece\u4e0a\u4e00\u4e2a\u53d6\u5927\u4e8e \\(j\\) \u7684\u72b6\u6001\u8f6c\u79fb\u8fc7\u6765\uff0c\u53c8\u8981\u4fdd\u8bc1\u9700\u8981\u7ee7\u7eed\u4e0b\u53bb\uff0c\u6240\u4ee5\u4e5f\u4e0d\u80fd\u4ece\u4e0a\u4e00\u4e2a\u53d6 \\(j\\) \u7684\u8f6c\u79fb\u3002 \u5199\u51fa\u65b9\u7a0b\uff1a \\[dp(i, j) = \\sum\\limits_{k = 1}^{j - 1} dp(i - 1, k) + \\dfrac{cnt(j)}{n - i + 1}\\] \u53ef\u4ee5\u524d\u7f00\u548c\u4f18\u5316\u5230 \\(\\text{O}(n^2)\\) \u3002 \u8003\u8651\u8ba1\u7b97\u7b54\u6848\u3002 \u53d1\u73b0\u53ea\u8981 \\(cnt(j) > 1\\) \uff0c\u90a3\u4e48\u72b6\u6001 \\(dp(i, j)\\) \u5bf9\u4e8e\u7b54\u6848\u7684\u8d21\u732e\u5c31\u662f \\(\\dfrac{cnt(j) - 1}{n - i}\\) \u3002 \u56e0\u4e3a\u53ea\u8981 \\(cnt(j) > 1\\) \uff0c\u90a3\u4f60\u524d\u540e\u4e24\u4e2a\u5c31\u53ef\u4ee5\u53d6\u4e00\u6837\u7684\uff0c\u7136\u540e\u5728 \\(dp(i, j)\\) \u7684\u57fa\u7840\u4e0a\u4e58\u4e00\u4e2a\u518d\u6b21\u53d6\u5230 \\(j\\) \u7684\u6982\u7387\u5373\u53ef\u3002 \u53c8\u56e0\u4e3a\u6240\u6709\u80dc\u5229\u7684\u60c5\u51b5\u662f\u4e92\u65a5\uff08\u4e92\u4e0d\u5f71\u54cd\uff09\u7684\uff0c\u6240\u4ee5\u6700\u540e\u7684\u7b54\u6848\u76f4\u63a5\u6c42\u4e2a \\(\\sum\\) \u5373\u53ef\u3002 Warning \u89e3\u91ca\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u8f6c\u79fb\u7684\u65f6\u5019\u53d6\u5230 \\(j\\) \u7684\u6982\u7387\u662f \\(\\dfrac{cnt(j)}{n - i + 1}\\) \uff0c \u53d1\u73b0\u4f60\u9700\u8981\u7ee7\u7eed\u4e0b\u53bb\uff0c\u5f53\u4e14\u4ec5\u5f53\u4f60\u53d6\u51fa\u6765\u7684\u6570\u6309\u7167\u65f6\u95f4\u6233\u6392\u5e8f\u4e4b\u540e\u662f\u4e25\u683c\u5355\u8c03\u9012\u589e\u7684\u3002 \u6240\u4ee5\u5176\u5b9e\u5982\u679c\u8981\u4e00\u76f4\u7ee7\u7eed\uff0c\u6bcf\u79cd\u724c\u662f\u53ea\u80fd\u53d6\u4e00\u5f20\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4f60\u5f53\u524d\u8003\u8651\u7684\u662f\u4e00\u76f4\u7ee7\u7eed\uff0c\u90a3\u4e48\u62bd\u5230 \\(j\\) \u7684\u65f6\u5019\u4e00\u5b9a\u662f\u7b2c\u4e00\u6b21\u62bd\u5230\u3002 \u6240\u4ee5\u6982\u7387\u53ef\u4ee5\u8fd9\u4e48\u7b97\u3002 \u6700\u540e\u8ba1\u7b97\u7b54\u6848\u7684\u65f6\u5019\u540c\u7406\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int si = 5e3 + 10 ; constexpr int mod = 998244353 ; int n ; int a [ si ], inv [ si ]; int cnt [ si ], sum [ si ]; int dp [ si ][ si ], ans = 0 ; i64 qpow ( i64 __a , i64 __b ){ i64 __ans = 1 % mod ; for (; __b ; __b >>= 1 ){ if ( __b & 1 ) __ans = __ans * __a % mod ; __a = __a * __a % mod ; } return __ans % mod ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], cnt [ a [ i ]] ++ ; inv [ 0 ] = 0 % mod , inv [ 1 ] = 1 % mod ; for ( int i = 2 ; i <= n ; ++ i ) inv [ i ] = qpow ( i , mod - 2 ) % mod ; sum [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) dp [ 1 ][ i ] = 1l l * cnt [ i ] % mod * 1l l * inv [ n ] % mod ; for ( int i = 2 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) sum [ j ] = ( sum [ j - 1 ] + dp [ i - 1 ][ j ]) % mod ; for ( int j = 1 ; j <= n ; ++ j ) { dp [ i ][ j ] = 1l l * sum [ j - 1 ] * 1l l * cnt [ j ] % mod * 1l l * inv [ n - i + 1 ] % mod ; } } for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { if ( cnt [ j ] >= 2 ) ans = ( ans + ( 1l l * dp [ i ][ j ] * 1l l * ( cnt [ j ] - 1 ) % mod * 1l l * inv [ n - i ]) % mod ) % mod ; } } cout << ans % mod << endl ; return 0 ; } 1 Tag : \u6982\u7387DP CF1077F2 Pictures with Kittens(Hard version) \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60\u4e00\u4e2a\u6570\u5217 \\(a\\) \uff0c\u4f60\u9700\u8981\u9009\u62e9 \\(m\\) \u4e2a\u5143\u7d20\uff0c \u4f7f\u5f97\u8fde\u7eed\u7684 \\(k\\) \u4e2a\u5143\u7d20\u90fd\u81f3\u5c11\u6709\u4e00\u4e2a\u88ab\u9009\u4e2d\u3002 \u9700\u8981\u4f60\u6700\u5927\u5316\u9009\u51fa\u6765\u7684\u6240\u6709\u6570\u7684\u548c\u3002 \\(1\\le m, k \\le n \\le 5000, 1\\le a_i \\le 10^9\\) \u3002 \u8003\u8651\u4e00\u4e2a\u6734\u7d20\u7684 DP\uff0c\u56e0\u4e3a\u6b64\u5904\u6709\u8981\u6c42\u9009\u591a\u5c11\u4e2a\u7684\u9650\u5236\uff0c\u6240\u4ee5\u53ef\u4ee5\u6709\uff1a \\(dp(i, j)\\) \u8868\u793a\uff0c\u8003\u8651\u524d \\(i\\) \u4e2a\u5143\u7d20\uff0c\u5f53\u524d\u9009\u62e9\u4e86 \\(j\\) \u4e2a\u5143\u7d20\u7684\u6700\u5927\u4ef7\u503c\u3002 \u7136\u540e\u53c8\u6709\u4e00\u4e2a\u8fde\u7eed \\(k\\) \u4e2a\u5fc5\u987b\u8981\u9009\u7684\u9650\u5236\uff0c\u8003\u8651\u9009 \\(i\\) \u8fdb\u884c\u51b3\u7b56\u5373\u53ef\u3002 \u6240\u4ee5\u6709\u65b9\u7a0b\uff1a \\[dp(i, j) = \\max\\limits_{\\max(0, i - k) \\le l < i}\\{dp(l, j - 1) + a_i\\}\\] \u8003\u8651\u600e\u4e48\u4f18\u5316\uff0c\u611f\u89c9\u8fd9\u4e2a\u5f0f\u5b50\u5f88\u50cf\u5355\u8c03\u961f\u5217\u4f18\u5316\u7684 1D1D\uff0c\u6240\u4ee5\u5148\u628a \\(a_i\\) \u63d0\u51fa\u6765\u3002 \u6240\u4ee5\u8bd5\u7740\u56fa\u5b9a\u4e00\u4e0b \\(i\\) \uff0c\u53d1\u73b0\u6bcf\u5f53 \\(j + 1\\) \uff0c\u51b3\u7b56\u96c6\u5408\u53d8\u5316\u662f\u5f88\u5947\u602a\u7684\u3002 \u56e0\u4e3a\u540e\u9762\u7684\u72b6\u6001\u662f \\(dp(l, j - 1)\\) \uff0c \\(j\\) \u4e00\u53d8\u4ed6\u4e5f\u8981\u53d8\u3002 \u6240\u4ee5\u6362\u79cd\u601d\u8003\u65b9\u5f0f\uff0c\u6211\u4eec\u8003\u8651\u76f4\u63a5\u8ba9 \\(i\\) \u5355\u8c03\u53d8\u5316\uff0c\u770b\u51b3\u7b56\u96c6\u5408\u600e\u4e48\u53d8\u5316\uff08\u56e0\u4e3a\u51b3\u7b56\u96c6\u5408\u4e0a\u4e0b\u754c\u90fd\u662f\u5173\u4e8e \\(i\\) \u7684\u5f0f\u5b50\uff09\u3002 \u90a3\u4e48\u53d1\u73b0\u8fd9\u91cc\u5b9e\u9645\u4e0a\u5c31\u662f\u5bf9\u4e00\u4e2a\u7279\u5b9a\u533a\u95f4\u53d6\u6700\u503c\uff0c\u4e14\u8fd9\u4e2a\u533a\u95f4\u4f1a\u5355\u8c03\u6ed1\u52a8\u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(j\\) \u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u961f\u5217\uff0c\u7ef4\u62a4 \\(kot \\in [i - k, i)\\) \u7684 \\(\\max\\{dp(kot, j)\\}\\) \u7136\u540e\u6bcf\u5f53 \\(i\\) \u53d8\u5316\u7684\u65f6\u5019\u7ef4\u62a4\u4e00\u4e0b\u5373\u53ef\u3002 \u6bcf\u6b21\u8be2\u95ee\u53ea\u9700\u8981\u5728 \\(j - 1\\) \u7684\u5355\u8c03\u961f\u5217\u91cc\u9762\u627e\u6700\u503c\u8f6c\u79fb\u5c31\u597d\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 #include <cmath> #include <deque> #include <cstdio> #include <cstring> #include <utility> #include <iostream> #include <algorithm> #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int si = 5e3 + 10 ; const i64 inf = 0x3f3f3f3f3f3f3f3fll ; int n , m , k ; i64 a [ si ], dp [ si ][ si ]; deque < pair < i64 , int >> Q [ si ]; int main () { auto query = [ & ]( int id , int pos ) -> i64 { auto & q = Q [ id ]; while ( ! q . empty () && q . front (). second <= pos - k ) q . pop_front (); return q . empty () ? - inf : q . front (). first ; }; auto update = [ & ]( int id , int pos , i64 num ) -> void { auto & q = Q [ id ]; while ( ! q . empty () && q . back (). first <= num ) q . pop_back (); q . push_back ( make_pair ( num , pos )); }; cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> k >> m ; if ( ceil (( 1.0 * ( n - k + 1 )) / ( 1.0 * k )) > m ) cout << \"-1 \\n \" , exit ( 0 ); for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; for ( int i = 1 ; i <= k ; ++ i ) dp [ i ][ 1 ] = a [ i ]; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = min ( i , m ); j >= 2 ; -- j ) { dp [ i ][ j ] = query ( j - 1 , i - 1 ) + a [ i ]; update ( j , i , dp [ i ][ j ]); } if ( i <= k ){ dp [ i ][ 1 ] = a [ i ]; update ( 1 , i , dp [ i ][ 1 ]); } } i64 res = 0 ; for ( int i = n - k + 1 ; i <= n ; ++ i ) res = max ( res , dp [ i ][ m ]); cout << res << \" \\n \" ; return 0 ; } CF1407D Discrete Centrifugal Jumps \u03c8(\uff40\u2207\u00b4)\u03c8 \u6709 \\(n\\) \u680b\u697c\uff0c\u4f60\u6bcf\u6b21\u53ef\u4ee5\u4ece \\(i\\) \u8df3\u5230 \\(j\\) \uff0c\u5f53\u4e14\u4ec5\u5f53\u4e00\u4e0b\u4e09\u4e2a\u6761\u4ef6\u6709\u81f3\u5c11\u4e00\u4e2a\u88ab\u6ee1\u8db3\u3002 \uff08\u8bbe\u6bcf\u680b\u697c\u7684\u9ad8\u5ea6\u4e3a \\(h_i\\) \uff09 \\(i + 1 = j\\) \\(min(h_i,h_j) > max(h_{i + 1}, \\dots, h_{j - 1})\\) \\(max(h_i, h_j) < min(h_{i + 1}, \\dots, h_{j - 1})\\) \u8bf7\u95ee\u4ece \\(1\\) \u8df3\u5230 \\(n\\) \u7684\u6700\u5c0f\u6b65\u6570\u662f\u591a\u5c11\uff1f \\(2 \\le n \\le 3\\times 10^5\\) \u3002 \\(1\\le h_i \\le 10^9\\) \u3002 \u8003\u8651\u4e00\u4e2a\u975e\u5e38\u6734\u7d20\u7684 DP\uff0c \u8bbe \\(dp(i)\\) \u8868\u793a\u4ece \\(1\\) \u5230 \\(i\\) \u7684\u6700\u5c0f\u6b65\u6570\u3002 \\(\\text{O}(n^3)\\) \u7684 DP \u6bd4\u8f83\u5bb9\u6613\uff0c\u7b2c\u4e00\u79cd\u60c5\u51b5\u76f4\u63a5\u4ece \\(dp(i - 1)\\) \u8f6c\u79fb\u3002 \u540e\u4e24\u79cd\u60c5\u51b5\u679a\u4e3e\u5373\u53ef\u3002 \u7136\u540e\u8003\u8651\u4f18\u5316\u540e\u4e24\u79cd\u60c5\u51b5\uff0c \u6bd4\u5982\u4e00\u4e2a\u5c40\u90e8\u957f\u6210\u8fd9\u6837\uff1a \\[4\\ 3\\ 2\\ 1\\ 5\\] 1 2 3 4 5 6 7 + + + + + + + + + + + + + + + --------- 1 2 3 4 5 (position) \u7136\u540e\u4f60\u8981\u8003\u8651 \\(dp(5)\\) \u7684\u8f6c\u79fb\u3002 \u53d1\u73b0 \u4f4d\u7f6e \\(1, 2, 3\\) \u90fd\u53ef\u4ee5\u8f6c\u79fb\u5230 \\(5\\) \uff0c\u56e0\u4e3a\u6ee1\u8db3\u4e86\u7b2c\u4e8c\u79cd\u60c5\u51b5\u3002 \u7136\u540e \\(4\\) \u4e5f\u53ef\u4ee5\u8f6c\u79fb\u5230 \\(5\\) \uff0c\u56e0\u4e3a\u4ed6\u4eec\u76f8\u90bb\u3002 \u6ce8\u610f\u5230\u8fd9\u5b9e\u9645\u4e0a\u662f\u7ef4\u62a4\u4e86\u4e00\u4e2a\u6808\u9876\u4e3a\u6700\u5c0f\u503c\u7684\u5355\u8c03\u6808\uff08\u4ece\u9876\u5411\u4e0b\u975e\u4e25\u683c\u9012\u589e\uff09\uff0c \u7136\u540e\u4e0d\u65ad\u628a\u5f39\u51fa\u6808\u7684\u4f4d\u7f6e\u4f5c\u4e3a\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u8fdb\u884c\u8f6c\u79fb\u7684\u8fc7\u7a0b\u3002 \u7b2c\u4e09\u79cd\u60c5\u51b5\u7c7b\u4f3c\uff0c\u6240\u4ee5\u6211\u4eec\u7ef4\u62a4\u4e24\u4e2a\u5355\u8c03\u6808\u5373\u53ef\u3002 \u4e0d\u8fc7\u9700\u8981\u6ce8\u610f\u8fd9\u79cd\u60c5\u51b5\uff1a \\[3\\ 2\\ 3\\ 2\\ 3\\] \u6b64\u65f6\u4f4d\u7f6e \\(1\\) \u65e0\u6cd5\u8f6c\u79fb\u5230\u4f4d\u7f6e \\(5\\) \uff0c\u56e0\u4e3a\u4e0d\u6ee1\u8db3\u4e25\u683c\u5c0f\u4e8e\u7684\u9650\u5236\u3002 \u4f46\u662f\u4f4d\u7f6e \\(3\\) \u5219\u53ef\u4ee5\uff0c\u56e0\u4e3a\u4ed6\u662f\u548c\u4f4d\u7f6e \\(5\\) \u7684 \\(h\\) \u503c\u76f8\u7b49\u4e14\u53ef\u4ee5\u8f6c\u79fb\u5230 \\(5\\) \u7684\u6240\u6709\u4f4d\u7f6e\u4e2d\u8ddd\u79bb \\(5\\) \u6700\u8fd1\u7684\u4e00\u4e2a\u3002 \u90a3\u4e48\u5c31\u9700\u8981\u5728\u6b63\u5e38\u5f39\u6808\u4e4b\u540e\uff0c\u518d\u628a\u548c\u5f53\u524d\u4f4d\u7f6e\u7684\u503c \\(h_i\\) \u76f8\u540c\u7684\u5143\u7d20\u5168\u90e8\u5f39\u6389\uff0c\u7136\u540e\u518d\u628a \\(h_i\\) \u538b\u8fdb\u53bb\u3002 \u4f46\u662f\u5f39\u6389\u76f8\u540c\u5143\u7d20\u4e4b\u524d\u4e0d\u8981\u5fd8\u8bb0\u548c\u7b2c\u4e00\u4e2a\u76f8\u540c\u7684\uff08\u8ddd\u79bb\u6700\u8fd1\u7684\u4e00\u4e2a\uff09\u5143\u7d20\u505a\u4e00\u6b21\u8f6c\u79fb\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 // author : black_trees #include <stack> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int si = 3e5 + 10 ; int n ; int a [ si ]; int dp [ si ]; std :: stack < int > upper , lower ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); memset ( dp , 0x3f , sizeof dp ); cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; upper . push ( 1 ), lower . push ( 1 ), dp [ 1 ] = 0 ; for ( int i = 2 ; i <= n ; ++ i ) { dp [ i ] = min ( dp [ i ], dp [ i - 1 ] + 1 ); while ( ! upper . empty () && a [ i ] < a [ upper . top ()]) dp [ i ] = min ( dp [ i ], dp [ upper . top ()] + 1 ), upper . pop (); if ( ! upper . empty ()) // \u8fd9\u91cc\u4e0d\u7ba1\u5f53\u524d\u6808\u9876\u662f\u4e0d\u662f\u4e00\u6837\u7684\u90fd\u8981\u53d6\uff0c\u56e0\u4e3a\u4e0d\u53bb\u4f1a\u6f0f\u6389\u4e00\u4e9b\u8f6c\u79fb\u3002 // \u6709\u65e0\u4f8b\u5b50\uff1f dp [ i ] = min ( dp [ i ], dp [ upper . top ()] + 1 ); while ( ! upper . empty () && a [ i ] == a [ upper . top ()]) upper . pop (); // \u76f8\u7b49\u7684\u5f39\u6389\uff0c\u56e0\u4e3a\u53ea\u80fd\u53d6\u7b2c\u4e00\u4e2a\u76f8\u7b49\u7684\u8f6c\u79fb\u3002 upper . push ( i ); while ( ! lower . empty () && a [ i ] > a [ lower . top ()]) dp [ i ] = min ( dp [ i ], dp [ lower . top ()] + 1 ), lower . pop (); if ( ! lower . empty ()) dp [ i ] = min ( dp [ i ], dp [ lower . top ()] + 1 ); while ( ! lower . empty () && a [ i ] == a [ lower . top ()]) lower . pop (); lower . push ( i ); } cout << dp [ n ] << endl ; return 0 ; } CF980D Perfect Groups \u03c8(\uff40\u2207\u00b4)\u03c8 \u4f60\u6709\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u4f60\u9700\u8981\u5206\u522b\u8ba1\u7b97\u8d21\u732e\u4e3a \\(1\\sim n\\) \u7684 \\(a\\) \u7684\u5b50\u4e32\u7684\u6570\u91cf\u3002 \u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u5b50\u4e32\uff0c\u5c06\u8fd9\u4e2a\u5b50\u4e32\u91cc\u7684\u6240\u6709\u5143\u7d20\u5206\u6210 \\(k\\) \u7ec4\uff0c\u4fdd\u8bc1\u6bcf\u7ec4\u91cc\u7684\u6570\u4e24\u4e24\u76f8\u4e58\u4e4b\u540e\u662f\u5b8c\u5168\u5e73\u65b9\u6570\u3002 \u8fd9\u4e2a\u5b50\u4e32\u7684\u8d21\u732e\u5c31\u662f\u6700\u5c0f\u7684 \\(k\\) \u3002 \\(1\\le n\\le 5000, |a_i| \\le 10^9\\) \u3002 \u7b2c\u4e00\u79cd\u6bd4\u8f83\u66b4\u529b\u7684\u65b9\u5f0f\u5c31\u662f\uff0c\u76f4\u63a5\u7528\u5e76\u67e5\u96c6\u628a\u6240\u6709\u4e58\u8d77\u6765\u662f\u5b8c\u5168\u5e73\u65b9\u6570\u7684\u5408\u5e76\u5230\u4e00\u4e2a\u96c6\u5408\u91cc\u3002 \u56e0\u4e3a\u5982\u679c \\(a\\times b\\) \u662f\u5b8c\u5168\u5e73\u65b9\uff0c\u4e14 \\(b\\times c\\) \u662f\u5b8c\u5168\u5e73\u65b9\uff0c\u90a3\u4e48 \\(c\\times a\\) \u4e5f\u662f\u5b8c\u5168\u5e73\u65b9\u3002 \u7136\u540e \\(\\text{O}(n^2)\\) \u679a\u4e3e\u6240\u6709\u5b50\u4e32\u8ba1\u7b97\u7b54\u6848\u5373\u53ef\u3002 \u6216\u8005\u7528\u4e00\u4e2a\u5de7\u5999\u4e00\u70b9\u7684\u529e\u6cd5\uff08\u53ef\u4ee5\u8fc7\u5929\u5143\u516c\u5b66\u7684\u67d0\u573a\u63d0\u9ad8\u9080\u8bf7\u8d5b\u7684 B \u7684\u505a\u6cd5\uff09\u3002 \u76f4\u63a5\u628a\u6240\u6709\u5e73\u65b9\u56e0\u5b50\u7b5b\u6389\uff0c\u4e4b\u540e\u76f8\u7b49\u7684\u5c31\u5e94\u8be5\u6254\u5230\u4e00\u4e2a\u96c6\u5408\u91cc\u9762\u3002 \u6ce8\u610f\u8fd9\u4e24\u79cd\u505a\u6cd5\u90fd\u8981\u7279\u5224 \\(0\\) \u7684\u5f71\u54cd\u3002 \\(\\text{O}(n^2)\\) Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 // author : black_trees #include <map> #include <cmath> #include <bitset> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #pragma GCC target(\"avx,sse2,sse3,sse4,mmx\") #pragma GCC optimize(\"Ofast\", \"inline\", \"-ffast-math\") #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; using ldb = long double ; const int si = 5e3 + 10 ; int n ; i64 a [ si ]; int ans [ si ]; int pa [ si ]; int root ( int x ) { if ( pa [ x ] != x ) return pa [ x ] = root ( pa [ x ]); return pa [ x ]; } void merge ( int x , int y ) { int rx = root ( x ), ry = root ( y ); if ( rx == ry ) return ; pa [ rx ] = ry ; } bool issqr ( i64 m ) { i64 t = sqrt (( ldb ) m ); return (( t * t ) == m ); } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], pa [ i ] = i ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = i + 1 ; j <= n ; ++ j ) { if ( ! a [ i ] || ! a [ j ]) continue ; if ( issqr ( 1l l * a [ i ] * a [ j ])) merge ( i , j ); } } // for(int i = 1; i <= n; ++i) // meow(pa[i]) << endl; // memset(ans, 0, sizeof ans); // std::bitset<si> Set; // std::map<int, bool> Set; bool Set [ si ]; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) Set [ j ] = false ; for ( int j = i , cnt = 0 ; j <= n ; ++ j ) { if ( ! a [ j ]) ans [ max ( 1 , cnt )] ++ ; else ans [ cnt = Set [ root ( j )] ? cnt : ++ cnt ] ++ , Set [ root ( j )] = true ; } } for ( int i = 1 ; i <= n ; ++ i ) cout << ans [ i ] << \" \" ; cout << \" \\n \" ; return 0 ; } 1 Tag : \u5e76\u67e5\u96c6 / \u66b4\u529b / \u6570\u8bba / \u7b5b\u6cd5 / \u5e73\u65b9\u56e0\u5b50 / \u552f\u4e00\u5206\u89e3\u5b9a\u7406","title":"2022\u5e745\u6708\u7ec3\u4e60\u8bb0\u5f55"},{"location":"rec/tricks-for-2022-05/#tricks","text":"","title":"\u4e94\u6708 Tricks \u6574\u7406"},{"location":"rec/tricks-for-2022-05/#cf833b-the-bakery","text":"\u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u957f\u5ea6\u4e3a \\(n\\) \u3002 \u5b9a\u4e49\u4e00\u4e2a\u533a\u95f4\u7684\u8d21\u732e \\(F(l, r)\\) \u4e3a\uff0c\u8fd9\u4e2a\u533a\u95f4\u4e2d\u4e0d\u540c\u7684\u6570\u7684\u4e2a\u6570\u3002 \u8981\u6c42\u4f60\u5c06\u5e8f\u5217\u5212\u5206\u4e3a \\(m\\) \u4e2a\u975e\u7a7a\u533a\u95f4\uff0c\u4f7f\u5f97 \\(\\sum F(l, r)\\) \u6700\u5927\u3002 \\(1\\le n \\le 3.5e4, 1\\le a_i \\le n, 1\\le m \\le 50\\) \u672c\u9898\u662f\u4e00\u4e2a\u5f88\u7ecf\u5178\u7684\u5212\u5206\u578b\u533a\u95f4 DP \u95ee\u9898\uff0c\u6700\u8fd1\u9047\u5230\u4e86\u5f88\u591a\u6b21\u3002 \u4e0d\u8fc7\u548c\u6700\u8fd1\u9047\u5230\u7684\u4e0d\u4e00\u6837\uff0c\u672c\u9898\u8981\u6c42\u4f60\u5fc5\u987b\u5206\u6210 \\(m\\) \u4e2a\u975e\u7a7a\u533a\u95f4\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8bbe\u51fa\u72b6\u6001 \uff1a \\(dp_{i,j}\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\uff0c\u5206\u6210 \\(j\\) \u6bb5\u7684\u6700\u5927\u8d21\u732e\u548c\u3002 \u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5199\u51fa\u65b9\u7a0b\uff1a \\[dp_{i, j} = \\max\\limits_{j - 1 \\le k < i}\\{dp_{k, j - 1} + f(k + 1, i)\\}\\] \u4e5f\u5c31\u662f\u679a\u4e3e\u4e0a\u4e00\u6bb5\u7684\u53f3\u7aef\u70b9\u5728\u54ea\u91cc\u8fdb\u884c\u8f6c\u79fb\u3002 \u56e0\u4e3a\u8fd9\u91cc\u4e0d\u662f\u524d\u7f00 \\(\\max\\) \u800c\u662f\u4e00\u6bb5\u7684 \\(\\max\\) \uff0c\u6240\u4ee5\u6734\u7d20\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u53ea\u80fd\u662f \\(\\text{O}(n^3)\\) \u7684\u3002 \u72b6\u6001\u5df2\u7ecf\u662f\u6700\u7cbe\u7b80\u7684\u4e86\uff0c\u65e0\u6cd5\u4f18\u5316\uff08\u6eda\u52a8\u6570\u7ec4\u662f\u5bf9\u7a7a\u95f4\u7684\u4f18\u5316\u800c\u4e0d\u662f\u5bf9\u65f6\u95f4\uff09\u3002 \u6240\u4ee5\u8003\u8651\u5bf9\u51b3\u7b56\u96c6\u5408\u8fdb\u884c\u4f18\u5316\uff0c\u53d1\u73b0\u8fd9\u91cc\u5982\u679c\u56fa\u5b9a \\(i\\) \uff0c\u5f53 \\(j + 1\\) \u7684\u65f6\u5019\uff0c\u51b3\u7b56\u96c6\u5408\u4f1a\u6574\u4e2a\u53d8\u5316\uff0c\u4e0d\u597d\u641e\u3002 \u53d1\u73b0\u8fd9\u91cc \\(j\\) \u7684\u72b6\u6001\u53ea\u4f1a\u7531 \\(j - 1\\) \u8f6c\u79fb\u800c\u6765\uff0c\u6240\u4ee5 \\(j\\) \u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u9636\u6bb5\u4fdd\u8bc1\u65e0\u540e\u6548\u6027\u3002 \u90a3\u4e48\u6211\u4eec\u628a \\(j\\) \u653e\u5230\u5916\u5c42\uff0c\u56fa\u5b9a \\(j\\) \uff0c\u89c2\u5bdf\u51b3\u7b56\u96c6\u5408\u3002 \u5f53 \\(i + 1\\) \u7684\u65f6\u5019\uff0c\u51b3\u7b56\u96c6\u5408\u53ea\u589e\u52a0\u4e00\u4e2a \\(dp_{i, j - 1}\\) \u3002 \u8fd9\u91cc\u53c8\u662f\u5728\u8be2\u95ee\u533a\u95f4 \\(\\max\\) \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\u3002 \u4f46\u662f\u6700\u68d8\u624b\u7684\u662f \\(F\\) \uff0c\u8fd9\u4e2a\u4e1c\u897f\u65e2\u6ca1\u6709\u5355\u8c03\u6027\u53c8\u6ca1\u6709\u4ec0\u4e48\u5feb\u901f\u7684\u8ba1\u7b97\u65b9\u5f0f\uff08\u6700\u597d\u7684\u4e5f\u662f\u4e3b\u5e2d\u6811\u8fd9\u79cd\uff0c\u672c\u9898\u660e\u663e\u7a7a\u95f4\u4e0d\u591f\uff09\uff0c \u6240\u4ee5\u8981\u89c2\u5bdf \\(F\\) \u662f\u5426\u5177\u6709\u4ec0\u4e48\u6027\u8d28\u3002 \u56e0\u4e3a \\(F\\) \u662f\u4e0d\u540c\u7684\u6570\u7684\u4e2a\u6570\uff0c\u6240\u4ee5\u4e00\u4e2a\u6570 \\(a_i\\) \uff0c\u4ed6\u80fd\u505a \\(1\\) \u7684\u8d21\u732e\u7684\u4f4d\u7f6e\u5c31\u662f \\((pre_{a_i}, i]\\) \u3002 \u4e5f\u5c31\u662f\u4e0a\u4e00\u4e2a \\(a_i\\) \u8fd9\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u4f4d\u7f6e \\(+1\\) \uff0c\u5230\u5b83\u672c\u8eab\u7684\u4f4d\u7f6e\u3002 \u5e76\u4e14\u56e0\u4e3a \\(1\\le a_i \\le n\\) \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4f4d\u7f6e \\(i\\) \uff0c\u90fd\u7b97\u4e00\u4e0b\u8fd9\u4e2a\u4f4d\u7f6e\u5728\u54ea\u91cc\u505a\u4e86\u8d21\u732e\uff0c\u7136\u540e\u7ed9\u8fd9\u4e00\u6bb5\u533a\u95f4\u52a0 \\(1\\) \u3002 \u90a3\u4e48\u6211\u4eec\u53d1\u73b0\uff0c\u5176\u5b9e\u53ef\u4ee5\u76f4\u63a5\u5229\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4 \\(dp\\) \u7684\u7b2c\u4e00\u7ef4\u3002 \u7136\u540e\u7b97\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u8d21\u732e\uff0c\u533a\u95f4\u52a0\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u7ed9 \\(dp_{j - 1}\\) \u7cfb\u7684\u72b6\u6001\u90fd\u7b97\u4e00\u6b21\u5373\u53ef\u3002 \u8f6c\u79fb\u76f4\u63a5\u8be2\u95ee \\(\\max\\) \uff0c\u5bf9\u4e8e\u6bcf\u5c42\u5faa\u73af \\(j\\) \uff0c\u91cc\u9762\u90fd\u91cd\u65b0\u5efa\u6811\uff08\u6216\u8005\u76f4\u63a5\u4fee\u6539\uff09\uff0c\u7136\u540e\u628a \\(j - 1\\) \u7cfb\u7684 DP \u503c\u653e\u5230\u7ebf\u6bb5\u6811\u4e0a\u3002 \u590d\u6742\u5ea6 \\(\\text{O}(m\\times n \\log n)\\) \uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int si = 3.5e4 + 10 ; const int inf = 0x3f3f3f3f ; int n , m ; int last [ si ]; int pre [ si ], a [ si ]; int dp [ si ][ 50 + 10 ]; class Segment_Tree { private : struct Node { int l , r ; int dat , tag ; } t [ si << 2 ]; inline void pushup ( int p ) { t [ p ]. dat = max ( t [ p << 1 ]. dat , t [ p << 1 | 1 ]. dat ); } inline void pushdown ( int p ) { if ( t [ p ]. tag ) { t [ p << 1 ]. tag += t [ p ]. tag , t [ p << 1 | 1 ]. tag += t [ p ]. tag ; t [ p << 1 ]. dat += t [ p ]. tag , t [ p << 1 | 1 ]. dat += t [ p ]. tag ; t [ p ]. tag = 0 ; } } public : void build ( int p , int l , int r ) { t [ p ]. l = l , t [ p ]. r = r , t [ p ]. tag = 0 ; if ( l == r ) { t [ p ]. dat = 0 ; return ; } int mid = ( l + r ) >> 1 ; build ( p << 1 , l , mid ), build ( p << 1 | 1 , mid + 1 , r ); pushup ( p ); } void modify ( int p , int x , int v ) { t [ p ]. tag = 0 ; if ( t [ p ]. l == t [ p ]. r ) { t [ p ]. dat = v ; return ; } int mid = ( t [ p ]. l + t [ p ]. r ) >> 1 ; if ( x <= mid ) modify ( p << 1 , x , v ); else modify ( p << 1 | 1 , x , v ); pushup ( p ); } void update ( int p , int l , int r , int v ) { if ( l <= t [ p ]. l && t [ p ]. r <= r ) { t [ p ]. dat += v , t [ p ]. tag += v ; return ; } pushdown ( p ); int mid = ( t [ p ]. l + t [ p ]. r ) >> 1 ; if ( l <= mid ) update ( p << 1 , l , r , v ); if ( r > mid ) update ( p << 1 | 1 , l , r , v ); pushup ( p ); } int query ( int p , int l , int r ) { int res = - inf ; if ( l <= t [ p ]. l && t [ p ]. r <= r ) return t [ p ]. dat ; pushdown ( p ); int mid = ( t [ p ]. l + t [ p ]. r ) >> 1 ; if ( l <= mid ) res = max ( res , query ( p << 1 , l , r )); if ( r > mid ) res = max ( res , query ( p << 1 | 1 , l , r )); return res ; } }; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); Segment_Tree tr ; cin >> n >> m ; memset ( dp , 0 , sizeof dp ); for ( int i = 1 ; i <= n ; ++ i ) { cin >> a [ i ]; if ( ! last [ a [ i ]]) last [ a [ i ]] = i ; else { pre [ i ] = last [ a [ i ]]; last [ a [ i ]] = i ; } } // for(int i = 1; i <= n; ++i) // meow(pre[i]) << endl; for ( int j = 1 ; j <= m ; ++ j ) { tr . build ( 1 , 0 , n ); for ( int i = 1 ; i <= n ; ++ i ) { tr . modify ( 1 , i , dp [ i ][ j - 1 ]); } for ( int i = 1 ; i <= n ; ++ i ) { tr . update ( 1 , pre [ i ], i - 1 , 1 ); dp [ i ][ j ] = tr . query ( 1 , j - 1 , i - 1 ); } } cout << dp [ n ][ m ] << endl ; return 0 ; } 1 Tag : \u7ebf\u6bb5\u6811\u4f18\u5316DP / \u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u4e0b\u6807 / \u4e00\u4e2a\u533a\u95f4DP\u6a21\u578b\u7684\u4f18\u5316","title":"CF833B The Bakery"},{"location":"rec/tricks-for-2022-05/#cf1591f-non-equal-neighbours","text":"\u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u957f\u5ea6\u4e3a \\(n\\) \u3002 \u8981\u6c42\u4f60\u6784\u9020\u4e00\u4e2a\u5e8f\u5217 \\(b\\) \uff0c\u4f7f\u5f97 \\(1\\le b_i \\le a_i\\) \uff0c\u4e14 \\(b_i \\not = b_{i + 1}\\) \u3002 \u95ee\u65b9\u6848\u6570\u5bf9 \\(998244353\\) \u53d6\u6a21\u3002 \\(1\\le n \\le 2\\times 10^5, 1\\le a_i \\le 10^9\\) \u3002 \u8003\u8651\u4e00\u4e2a\u66b4\u529b\u7684 DP\u3002 \u8bbe \\(dp_{i, j}\\) \u8868\u793a\u524d \\(i\\) \u4e2a\u4f4d\u7f6e\uff0c\u4e14\u7b2c \\(i\\) \u4e2a \u4f4d\u7f6e\u9009 \\(j\\) \u7684\u65b9\u6848\u6570\u3002 \u7136\u540e\u53ef\u4ee5\u5f97\u5230\u65b9\u7a0b\uff1a \\[dp_{i, j} = \\sum\\limits_{k = 1}^{a_{i - 1}} dp_{i - 1, k} - dp_{i - 1, j}\\] \u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u5c31\u662f\u7b97\u4e0a\u4e00\u4e2a\u9636\u6bb5\u7684\u548c\uff0c\u7136\u540e\u6263\u6389\u4e0a\u4e00\u4e2a\u9636\u6bb5\u7684 \\(j\\) \u4f4d\u7f6e\u3002 \u8003\u8651\u4f7f\u7528\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7b2c\u4e8c\u7ef4\u3002 \u6240\u6709\u8f6c\u79fb\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u4fee\u6539\u3002 \u6240\u4ee5\u53ef\u4ee5\u5148\u7b97\u51fa \\(sum = \\sum\\limits_{k = 1}^{a_{i - 1}} dp_{i - 1, k}\\) \uff0c \u8ba9\u7ebf\u6bb5\u6811\u4e0a \\([1, a_{i - 1}]\\) \u5168\u90e8\u53d6\u53cd\uff0c\u7136\u540e\u7ed9 \\([1, a_{i}]\\) \u5168\u90e8\u52a0\u4e0a \\(sum\\) \u3002 \\((a_i, 10^9]\\) \u5168\u90e8\u8d4b\u503c\u4e3a \\(0\\) \u5373\u53ef\u3002 \u53ea\u9700\u8981\u4e00\u4e2a\u533a\u95f4\u52a0\uff0c\u533a\u95f4\u67e5\uff0c\u533a\u95f4\u4e58 \\(0, -1\\) \u7684 lazytag \u7ebf\u6bb5\u6811\u5373\u53ef\u3002 \u7c7b\u4f3c\u7ebf\u6bb5\u6811 2\u3002 \u4f46\u662f\u6ce8\u610f\uff0c\u56e0\u4e3a\u52a8\u6001\u5f00\u70b9\u9700\u8981\u5f88\u5927\u7684\u7a7a\u95f4\uff0c\u6240\u4ee5\u9700\u8981\u5361\u4e00\u5361\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u89c1\u65e5\u5e38\u968f\u7b14\u7684 \u201c\u5361\u5e38\u5c0f\u6280\u5de7\u201d\u3002 Codeinclude <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define ls lson[p] #define rs rson[p] #define meow(x) cerr << #x << \" = \" << x using namespace std ; const int si = 2e5 + 10 ; const int sii = 1e7 + 1 ; constexpr int mod = 998244353l l ; int n ; int a [ si ]; int lson [ sii ], rson [ sii ], dat [ sii ], add [ sii ], mul [ sii ]; // \u7a7a\u95f4\u4e00\u5b9a\u8981\u5f00\u591f\u3002 // \u5f00\u5230 class \u91cc\u9762\u7684\u65f6\u5019\u8981\u63d0\u524d\u7b97\u597d\u7a7a\u95f4\u3002 // \u5982\u679c\u7a7a\u95f4\u6bd4\u8f83\u5361\uff0c\u5c31\u8981\u63d0\u51fa\u6765\u5199\u3002\uff01\uff01\uff01 int cnt_node = 0 ; inline int Newnode () { return ++ cnt_node ; } inline void pushup ( int p ) { dat [ p ] = ( dat [ ls ] + dat [ rs ]) % mod ; } inline void pushdown ( int p , int l , int r ) { if ( ! add [ p ] && mul [ p ] == 1 ) return ; if ( ! ls ) ls = Newnode (); if ( ! rs ) rs = Newnode (); int mid = ( l + r ) >> 1 ; dat [ ls ] = ( 1l l * dat [ ls ] * mul [ p ] + 1l l * add [ p ] * ( mid - l + 1 )) % mod ; dat [ rs ] = ( 1l l * dat [ rs ] * mul [ p ] + 1l l * add [ p ] * ( r - mid - 1 + 1 )) % mod ; add [ ls ] = ( 1l l * add [ ls ] * mul [ p ] + 1l l * add [ p ]) % mod ; add [ rs ] = ( 1l l * add [ rs ] * mul [ p ] + 1l l * add [ p ]) % mod ; mul [ ls ] = ( 1l l * mul [ ls ] * mul [ p ]) % mod ; mul [ rs ] = ( 1l l * mul [ rs ] * mul [ p ]) % mod ; add [ p ] = 0 , mul [ p ] = 1 ; } void update_add ( int & p , int l , int r , int ql , int qr , int v ) { if ( l > r ) return ; if ( ! p ) p = Newnode (); if ( ql <= l && r <= qr ) { add [ p ] = ( add [ p ] + v ) % mod ; dat [ p ] = ( dat [ p ] + 1l l * v * ( r - l + 1 )) % mod ; return ; } pushdown ( p , l , r ); int mid = ( l + r ) >> 1 ; if ( ql <= mid ) update_add ( ls , l , mid , ql , qr , v ); if ( qr > mid ) update_add ( rs , mid + 1 , r , ql , qr , v ); pushup ( p ); return ; } void update_mul ( int & p , int l , int r , int ql , int qr , int v ) { if ( l > r ) return ; if ( ! p ) p = Newnode (); if ( ql <= l && r <= qr ) { dat [ p ] = ( dat [ p ] * 1l l * v ) % mod ; add [ p ] = ( add [ p ] * 1l l * v ) % mod ; mul [ p ] = ( mul [ p ] * 1l l * v ) % mod ; return ; } pushdown ( p , l , r ); int mid = ( l + r ) >> 1 ; if ( ql <= mid ) update_mul ( ls , l , mid , ql , qr , v ); if ( qr > mid ) update_mul ( rs , mid + 1 , r , ql , qr , v ); pushup ( p ); return ; } int query ( int p , int l , int r , int ql , int qr ) { if ( l > r ) return 0l l ; if ( ! p ) return 0l l ; if ( ql <= l && r <= qr ) return dat [ p ] % mod ; pushdown ( p , l , r ); int mid = ( l + r ) >> 1 ; int res = 0l l ; if ( ql <= mid ) res = ( res + query ( ls , l , mid , ql , qr )) % mod ; if ( qr > mid ) res = ( res + query ( rs , mid + 1 , r , ql , qr )) % mod ; return res % mod ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int root = 0 ; cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; update_add ( root , 1 , 1e9 , 1 , a [ 1 ], 1 ); for ( int i = 2 ; i <= n ; ++ i ) { int sum = query ( root , 1 , 1e9 , 1 , 1e9 ) % mod ; update_mul ( root , 1 , 1e9 , 1 , a [ i ], -1 ); update_add ( root , 1 , 1e9 , 1 , a [ i ], sum ); update_mul ( root , 1 , 1e9 , a [ i ] + 1 , 1e9 , 0 ); } cout << ( query ( root , 1 , 1e9 , 1 , 1e9 ) + mod ) % mod << endl ; return 0 ; } /* // \u88ab\u5361\u7a7a\u95f4\u7684\u4ee3\u7801\u3002 #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define ls t[p].lson #define rs t[p].rson #define meow(x) cerr << #x << \" = \" << x using namespace std; using i64 = long long; const int si = 2e5 + 10; constexpr i64 mod = 998244353ll; int n; i64 a[si]; class Segment_Tree { private : struct Node { int lson = 0, rson = 0; i64 dat = 0ll, add = 0ll, mul = 1ll; }t[si * 60]; // \u7a7a\u95f4\u4e00\u5b9a\u8981\u5f00\u591f\u3002 int cnt_node = 0; inline int Newnode() { return ++cnt_node; } inline void pushup(int p) { t[p].dat = t[ls].dat + t[rs].dat; } inline void pushdown(int p, int l, int r) { if(!t[p].add && t[p].mul == 1) return; if(!ls) ls = Newnode(); if(!rs) rs = Newnode(); int mid = (l + r) >> 1; t[ls].dat = (t[ls].dat * t[p].mul + t[p].add * (mid - l + 1)) % mod; t[rs].dat = (t[rs].dat * t[p].mul + t[p].add * (r - mid - 1 + 1)) % mod; t[ls].add = (t[ls].add * t[p].mul + t[p].add) % mod; t[rs].add = (t[rs].add * t[p].mul + t[p].add) % mod; t[ls].mul = (t[ls].mul * t[p].mul) % mod; t[rs].mul = (t[rs].mul * t[p].mul) % mod; t[p].add = 0ll, t[p].mul = 1ll; } public : void update_add(int &p, int l, int r, int ql, int qr, i64 v) { if(l > r) return; if(!p) p = Newnode(); if(ql <= l && r <= qr) { t[p].add = (t[p].add + v) % mod; t[p].dat = (t[p].dat + v * (r - l + 1)) % mod; return; } pushdown(p, l, r); int mid = (l + r) >> 1; if(ql <= mid) update_add(ls, l, mid, ql, qr, v); if(qr > mid) update_add(rs, mid + 1, r, ql, qr, v); pushup(p); return; } void update_mul(int &p, int l, int r, int ql, int qr, i64 v) { if(l > r) return; if(!p) p = Newnode(); if(ql <= l && r <= qr) { t[p].dat = (t[p].dat * v) % mod; t[p].add = (t[p].add * v) % mod; t[p].mul = (t[p].mul * v) % mod; return; } pushdown(p, l, r); int mid = (l + r) >> 1; if(ql <= mid) update_mul(ls, l, mid, ql, qr, v); if(qr > mid) update_mul(rs, mid + 1, r, ql, qr, v); pushup(p); return; } i64 query(int p, int l, int r, int ql, int qr) { if(l > r) return 0ll; if(!p) return 0ll; if(ql <= l && r <= qr) return t[p].dat % mod; pushdown(p, l, r); int mid = (l + r) >> 1; i64 res = 0ll; if(ql <= mid) res = (res + query(ls, l, mid, ql, qr)) % mod; if(qr > mid) res = (res + query(rs, mid + 1, r, ql, qr)) % mod; return res % mod; } }tr; int main() { cin.tie(0) -> sync_with_stdio(false); cin.exceptions(cin.failbit | cin.badbit); int root = 0; cin >> n; for(int i = 1; i <= n; ++i) cin >> a[i]; tr.update_add(root, 1, 1e9, 1, a[1], 1ll); for(int i = 2; i <= n; ++i) { i64 sum = tr.query(root, 1, 1e9, 1, 1e9) % mod; tr.update_mul(root, 1, 1e9, 1, a[i], -1ll); tr.update_add(root, 1, 1e9, 1, a[i], sum); tr.update_mul(root, 1, 1e9, a[i] + 1, 1e9, 0ll); } cout << (tr.query(root, 1, 1e9, 1, 1e9) + mod) % mod << endl; return 0; } */ 1 Tag : \u7ebf\u6bb5\u6811\u4f18\u5316DP / \u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u4e0b\u6807","title":"CF1591F Non-Equal Neighbours"},{"location":"rec/tricks-for-2022-05/#cf1485f-copy-or-prefix-sum","text":"\u7ed9\u4f60\u4e00\u4e2a\u6570\u5217 \\(b\\) \uff0c\u8981\u6c42\u6784\u9020\u4e00\u4e2a\u6570\u5217 \\(a\\) \uff0c\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a \\(a_i = b_i\\) \u6216\u8005 \\(b_i = \\sum\\limits_{j = 1}^{i} a_j\\) \u3002 \u6c42\u53ef\u80fd\u7684 \\(a\\) \u7684\u6570\u91cf\u6a21 \\(10^9 + 7\\) \u3002 \\(1\\le n \\le 2\\times 10^5, 1\\le b_i \\le 10^9\\) \u3002 \u8003\u8651\u4e00\u4e2a\u6734\u7d20\u7684 DP\uff0c\u76f4\u63a5\u628a\u6240\u6709\u8981\u7d20\u5904\u7406\u8fdb\u53bb\u3002 \u524d\u7f00\u548c\u8fd9\u4e2a\u8981\u7d20\u5c31\u4e0d\u7528\u5728\u72b6\u6001\u91cc\u4f53\u73b0\u4e86\uff0c\u76f4\u63a5\u5728\u8f6c\u79fb\u51b3\u7b56\u7684\u65f6\u5019\u4f53\u73b0\u3002 \u6240\u4ee5\u8bbe \\(dp(i, j)\\) \u4e3a\uff0c\u8003\u8651\u524d \\(i\\) \u4e2a\u6570\uff0c\u5f53\u524d\u9009\u7684 \\(\\sum a_i = j\\) \uff0c\u603b\u5171\u7684\u65b9\u6848\u6570\u3002 \u7136\u540e\u9488\u5bf9\u4e24\u79cd\u60c5\u51b5\u5199\u8f6c\u79fb\u65b9\u7a0b\uff1a \\[\\begin{cases}dp(i, j) = dp(i - 1, j - b_i) & a_i = b_i \\\\ dp(i, b_i) = \\sum\\limits_{j = -\\infty}^{\\infty} dp(i - 1, j) - dp(i - 1, 0) & \\texttt{otherwise.}\\end{cases}\\] \u7b2c\u4e00\u79cd\u6bd4\u8f83\u663e\u7136\uff0c\u7b2c\u4e8c\u79cd\u4ece \\(-\\infty\\) \u6c42\u548c\u5230 \\(\\infty\\) \u662f\u56e0\u4e3a\uff0c\u5047\u8bbe\u4f60 \\(a_i\\) \u968f\u4fbf\u9009\u4e86\u4e00\u4e2a\u6570 \\(x\\) \uff0c\u4f60\u53ea\u9700\u8981\u8ba9 \\(\\sum\\limits_{j = 1}^{i - 1} a_j= b_i - x\\) \u5373\u53ef\uff0c\u6240\u4ee5\u4e0d\u7ba1 \\(a_i\\) \u53d6\u5565\uff0c\u76f4\u63a5\u524d\u9762\u5bf9\u5e94\u7684\u65b9\u6848\u6570\u5c31\u884c\u3002 \u56e0\u4e3a \\(a_i\\) \u53ef\u4ee5\u968f\u4fbf\u9009\uff0c\u6240\u4ee5\u81ea\u7136\u662f\u4ece\u8d1f\u65e0\u7a77\u4e00\u76f4\u6c42\u548c\u5230\u6b63\u65e0\u7a77\u3002 \u8981\u51cf\u53bb \\(dp(i - 1, 0)\\) \u662f\u56e0\u4e3a\uff0c\u5f53 \\(\\sum\\limits_{j = 1}^{i - 1} a_j = 0\\) \u65f6\uff0c \u8fd9\u4e24\u79cd\u65b9\u6848\u90fd\u662f\u7b49\u4ef7\u7684\u3002 \u7136\u540e\u7b2c\u4e00\u4e2a\u5c31\u662f\u7ed9\u6570\u7ec4\u5e73\u79fb\u4e86\u4e00\u4e0b\u3002 \u540e\u4e00\u4e2a\u770b\u8d77\u6765\u5f88\u5413\u4eba\uff0c\u5176\u5b9e\u53d1\u73b0\u5c31\u662f\u4e00\u4e2a\u5168\u5c40\u6c42\u548c\uff0c\u7136\u540e\u53d1\u73b0\u6bcf\u6b21\u51b3\u7b56\u5b8c\u4e4b\u540e\uff0c\u4f1a\u6539\u53d8\u7684\u53ea\u6709 \\(dp(i, b_i)\\) \u3002 \u6240\u4ee5\u6211\u4eec\u8bb0\u5f55\u4e09\u4e2a\u53d8\u91cf\uff0c\u4e00\u4e2a\u662f\u504f\u79fb\u91cf \\(\\Delta\\) \uff0c\u4e00\u4e2a\u662f\u5168\u5c40\u548c \\(\\sum\\) \uff0c\u4e00\u4e2a\u662f\u4e0a\u4e00\u4e2a\u88ab\u6539\u53d8\u7684\u4f4d\u7f6e \\(dp(i - 1, b_{i - 1})\\) \u5e73\u79fb\u4e4b\u524d\u7684\u503c\u3002 \u7136\u540e\u8f6c\u79fb\u5c31\u5f88\u65b9\u4fbf\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include <map> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #include <ext/pb_ds/hash_policy.hpp> #include <ext/pb_ds/assoc_container.hpp> #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int si = 3e5 + 10 ; const int mod = 1e9 + 7 ; int n ; i64 a [ si ]; i64 sum = 0 , delta = 0 ; // __gnu_pbds::gp_hash_table<i64, i64> dp; map < i64 , i64 > dp ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { cin >> n ; dp . clear (); for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; dp [ 0 ] = 1l l , sum = 1l l , delta = 0l l ; for ( int i = 1 ; i <= n ; ++ i ) { int kot = ( sum - dp [ 0l l - delta ] + mod ) % mod ; sum = ( sum + kot ) % mod , delta += a [ i ]; dp [ a [ i ] - delta ] = ( dp [ a [ i ] - delta ] + kot ) % mod ; } cout << sum << \" \\n \" ; } return 0 ; } 1 Tag : DP\u4f18\u5316 / \u6c34\u4f4d\u7ebf\u6cd5","title":"CF1485F Copy or Prefix Sum"},{"location":"rec/tricks-for-2022-05/#cf1156f-card-bag","text":"\u7ed9\u4f60 \\(n\\) \u5f20\u724c\uff0c\u6bcf\u5f20\u724c\u4e0a\u6709\u4e00\u4e2a\u6570\u5b57 \\(a_i, 1\\le a_i \\le n\\) \u3002 \u4f60\u6bcf\u6b21\u4f1a\u4ece\u724c\u5806\u91cc\u62bd\u4e00\u5f20\u724c\uff0c\u62bd\u5b8c\u4e4b\u540e\u4e0d\u653e\u56de\u3002 \u5047\u8bbe\u5f53\u524d\u62bd\u5230 \\(x\\) \uff0c\u4e0a\u4e00\u5f20\u62bd\u51fa\u7684\u662f \\(y\\) \u3002 \u5982\u679c \\(x = y\\) \uff0cwin\u3002 \u5982\u679c \\(x < y\\) \uff0close\u3002 \u5982\u679c \\(x > y\\) \uff0ccontinue\u3002 \u95ee\u4f60\u6700\u540e\u83b7\u80dc\u7684\u6982\u7387\u662f\u591a\u5c11\uff0c\u5bf9 \\(998244353\\) \u53d6\u6a21\uff0c \\(1\\le n \\le 5000\\) \u3002 \u53d1\u73b0\u8981\u5904\u7406\u7684\u8981\u7d20\u6709\u70b9\u591a\uff1a \u62bd\u5b8c\u4e0d\u653e\u56de\u53bb \u6bcf\u6b21\u53ef\u80fd\u6709\u4e09\u79cd\u6e38\u620f\u72b6\u6001\uff1awin,lose,continue\u3002 \u6bcf\u5f20\u724c\u7684\u6570\u91cf \u7b2c\u4e00\u4e2a\u76f4\u63a5\u8bb0\u5f55\u5f53\u524d\u62bd\u4e86\u7b2c\u51e0\u6b21\u5c31\u884c\u4e86\u3002 \u7b2c\u4e8c\u4e2a\u4e5f\u6bd4\u8f83\u597d\u505a\uff0close\u5c31\u76f4\u63a5\u9000\u51fa\u4e86\uff0c\u5bf9\u4e8e\u6700\u540e\u7684\u7b54\u6848\u4e0d\u4f1a\u6709\u8d21\u732e\uff0ccontinue \u9700\u8981\u8bbe\u8ba1\u72b6\u6001\u8868\u793a\uff0c\u4f46\u662f\u53d1\u73b0 win \u53ea\u9700\u8981\u8003\u8651\u6700\u540e\u4e24\u4e2a\u724c\u76f8\u540c\u5c31\u884c\u4e86\uff0c\u6240\u4ee5\u4e5f\u4e0d\u7528\u8bbe\u8ba1\u72b6\u6001\uff0c\u6700\u540e\u7edf\u4e00\u8ba1\u7b97\u8d21\u732e\u5373\u53ef\u3002 \u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5904\u7406 continue \u7684\u60c5\u51b5\u3002 \u6700\u9ebb\u70e6\u7684\u662f\u6700\u540e\u4e00\u4e2a\uff0c\u611f\u89c9\u4e0a\u6765\u8bf4\u9700\u8981\u8bb0\u5f55\u6bcf\u5f20\u724c\u5269\u4f59\u7684\u6570\u91cf\uff0c\u4f46\u8fd9\u6837\u72b6\u6001\u627f\u53d7\u4e0d\u4e86\uff0c\u4e5f\u4e0d\u597d\u8f6c\u79fb\u3002 \u4f46\u5176\u5b9e\u4e0d\u7528\uff0c\u56e0\u4e3a\u6709\u4e00\u4e2a\u6027\u8d28\uff08\u89c1\u4e0b\u9762\u7684 Warning\uff09\u3002 \u6240\u4ee5\u53ef\u4ee5\u8bbe\u8ba1\u51fa DP \uff1a \u8bbe \\(dp(i, j)\\) \u8868\u793a\u8003\u8651\u7b2c \\(i\\) \u6b21\uff0c\u62bd\u5230 \\(j\\) \u4e14\u7ee7\u7eed\u4e0b\u53bb\u7684\u6982\u7387\u3002 \u56e0\u4e3a\u8981\u4fdd\u8bc1\u4e00\u76f4\u7ee7\u7eed\uff0c\u6240\u4ee5\u8f6c\u79fb\u7684\u65f6\u5019\u4e0d\u80fd\u4ece\u4e0a\u4e00\u4e2a\u53d6\u5927\u4e8e \\(j\\) \u7684\u72b6\u6001\u8f6c\u79fb\u8fc7\u6765\uff0c\u53c8\u8981\u4fdd\u8bc1\u9700\u8981\u7ee7\u7eed\u4e0b\u53bb\uff0c\u6240\u4ee5\u4e5f\u4e0d\u80fd\u4ece\u4e0a\u4e00\u4e2a\u53d6 \\(j\\) \u7684\u8f6c\u79fb\u3002 \u5199\u51fa\u65b9\u7a0b\uff1a \\[dp(i, j) = \\sum\\limits_{k = 1}^{j - 1} dp(i - 1, k) + \\dfrac{cnt(j)}{n - i + 1}\\] \u53ef\u4ee5\u524d\u7f00\u548c\u4f18\u5316\u5230 \\(\\text{O}(n^2)\\) \u3002 \u8003\u8651\u8ba1\u7b97\u7b54\u6848\u3002 \u53d1\u73b0\u53ea\u8981 \\(cnt(j) > 1\\) \uff0c\u90a3\u4e48\u72b6\u6001 \\(dp(i, j)\\) \u5bf9\u4e8e\u7b54\u6848\u7684\u8d21\u732e\u5c31\u662f \\(\\dfrac{cnt(j) - 1}{n - i}\\) \u3002 \u56e0\u4e3a\u53ea\u8981 \\(cnt(j) > 1\\) \uff0c\u90a3\u4f60\u524d\u540e\u4e24\u4e2a\u5c31\u53ef\u4ee5\u53d6\u4e00\u6837\u7684\uff0c\u7136\u540e\u5728 \\(dp(i, j)\\) \u7684\u57fa\u7840\u4e0a\u4e58\u4e00\u4e2a\u518d\u6b21\u53d6\u5230 \\(j\\) \u7684\u6982\u7387\u5373\u53ef\u3002 \u53c8\u56e0\u4e3a\u6240\u6709\u80dc\u5229\u7684\u60c5\u51b5\u662f\u4e92\u65a5\uff08\u4e92\u4e0d\u5f71\u54cd\uff09\u7684\uff0c\u6240\u4ee5\u6700\u540e\u7684\u7b54\u6848\u76f4\u63a5\u6c42\u4e2a \\(\\sum\\) \u5373\u53ef\u3002 Warning \u89e3\u91ca\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u8f6c\u79fb\u7684\u65f6\u5019\u53d6\u5230 \\(j\\) \u7684\u6982\u7387\u662f \\(\\dfrac{cnt(j)}{n - i + 1}\\) \uff0c \u53d1\u73b0\u4f60\u9700\u8981\u7ee7\u7eed\u4e0b\u53bb\uff0c\u5f53\u4e14\u4ec5\u5f53\u4f60\u53d6\u51fa\u6765\u7684\u6570\u6309\u7167\u65f6\u95f4\u6233\u6392\u5e8f\u4e4b\u540e\u662f\u4e25\u683c\u5355\u8c03\u9012\u589e\u7684\u3002 \u6240\u4ee5\u5176\u5b9e\u5982\u679c\u8981\u4e00\u76f4\u7ee7\u7eed\uff0c\u6bcf\u79cd\u724c\u662f\u53ea\u80fd\u53d6\u4e00\u5f20\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4f60\u5f53\u524d\u8003\u8651\u7684\u662f\u4e00\u76f4\u7ee7\u7eed\uff0c\u90a3\u4e48\u62bd\u5230 \\(j\\) \u7684\u65f6\u5019\u4e00\u5b9a\u662f\u7b2c\u4e00\u6b21\u62bd\u5230\u3002 \u6240\u4ee5\u6982\u7387\u53ef\u4ee5\u8fd9\u4e48\u7b97\u3002 \u6700\u540e\u8ba1\u7b97\u7b54\u6848\u7684\u65f6\u5019\u540c\u7406\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 // author : black_trees #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int si = 5e3 + 10 ; constexpr int mod = 998244353 ; int n ; int a [ si ], inv [ si ]; int cnt [ si ], sum [ si ]; int dp [ si ][ si ], ans = 0 ; i64 qpow ( i64 __a , i64 __b ){ i64 __ans = 1 % mod ; for (; __b ; __b >>= 1 ){ if ( __b & 1 ) __ans = __ans * __a % mod ; __a = __a * __a % mod ; } return __ans % mod ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], cnt [ a [ i ]] ++ ; inv [ 0 ] = 0 % mod , inv [ 1 ] = 1 % mod ; for ( int i = 2 ; i <= n ; ++ i ) inv [ i ] = qpow ( i , mod - 2 ) % mod ; sum [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) dp [ 1 ][ i ] = 1l l * cnt [ i ] % mod * 1l l * inv [ n ] % mod ; for ( int i = 2 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) sum [ j ] = ( sum [ j - 1 ] + dp [ i - 1 ][ j ]) % mod ; for ( int j = 1 ; j <= n ; ++ j ) { dp [ i ][ j ] = 1l l * sum [ j - 1 ] * 1l l * cnt [ j ] % mod * 1l l * inv [ n - i + 1 ] % mod ; } } for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { if ( cnt [ j ] >= 2 ) ans = ( ans + ( 1l l * dp [ i ][ j ] * 1l l * ( cnt [ j ] - 1 ) % mod * 1l l * inv [ n - i ]) % mod ) % mod ; } } cout << ans % mod << endl ; return 0 ; } 1 Tag : \u6982\u7387DP","title":"CF1156F Card Bag"},{"location":"rec/tricks-for-2022-05/#cf1077f2-pictures-with-kittenshard-version","text":"\u7ed9\u4f60\u4e00\u4e2a\u6570\u5217 \\(a\\) \uff0c\u4f60\u9700\u8981\u9009\u62e9 \\(m\\) \u4e2a\u5143\u7d20\uff0c \u4f7f\u5f97\u8fde\u7eed\u7684 \\(k\\) \u4e2a\u5143\u7d20\u90fd\u81f3\u5c11\u6709\u4e00\u4e2a\u88ab\u9009\u4e2d\u3002 \u9700\u8981\u4f60\u6700\u5927\u5316\u9009\u51fa\u6765\u7684\u6240\u6709\u6570\u7684\u548c\u3002 \\(1\\le m, k \\le n \\le 5000, 1\\le a_i \\le 10^9\\) \u3002 \u8003\u8651\u4e00\u4e2a\u6734\u7d20\u7684 DP\uff0c\u56e0\u4e3a\u6b64\u5904\u6709\u8981\u6c42\u9009\u591a\u5c11\u4e2a\u7684\u9650\u5236\uff0c\u6240\u4ee5\u53ef\u4ee5\u6709\uff1a \\(dp(i, j)\\) \u8868\u793a\uff0c\u8003\u8651\u524d \\(i\\) \u4e2a\u5143\u7d20\uff0c\u5f53\u524d\u9009\u62e9\u4e86 \\(j\\) \u4e2a\u5143\u7d20\u7684\u6700\u5927\u4ef7\u503c\u3002 \u7136\u540e\u53c8\u6709\u4e00\u4e2a\u8fde\u7eed \\(k\\) \u4e2a\u5fc5\u987b\u8981\u9009\u7684\u9650\u5236\uff0c\u8003\u8651\u9009 \\(i\\) \u8fdb\u884c\u51b3\u7b56\u5373\u53ef\u3002 \u6240\u4ee5\u6709\u65b9\u7a0b\uff1a \\[dp(i, j) = \\max\\limits_{\\max(0, i - k) \\le l < i}\\{dp(l, j - 1) + a_i\\}\\] \u8003\u8651\u600e\u4e48\u4f18\u5316\uff0c\u611f\u89c9\u8fd9\u4e2a\u5f0f\u5b50\u5f88\u50cf\u5355\u8c03\u961f\u5217\u4f18\u5316\u7684 1D1D\uff0c\u6240\u4ee5\u5148\u628a \\(a_i\\) \u63d0\u51fa\u6765\u3002 \u6240\u4ee5\u8bd5\u7740\u56fa\u5b9a\u4e00\u4e0b \\(i\\) \uff0c\u53d1\u73b0\u6bcf\u5f53 \\(j + 1\\) \uff0c\u51b3\u7b56\u96c6\u5408\u53d8\u5316\u662f\u5f88\u5947\u602a\u7684\u3002 \u56e0\u4e3a\u540e\u9762\u7684\u72b6\u6001\u662f \\(dp(l, j - 1)\\) \uff0c \\(j\\) \u4e00\u53d8\u4ed6\u4e5f\u8981\u53d8\u3002 \u6240\u4ee5\u6362\u79cd\u601d\u8003\u65b9\u5f0f\uff0c\u6211\u4eec\u8003\u8651\u76f4\u63a5\u8ba9 \\(i\\) \u5355\u8c03\u53d8\u5316\uff0c\u770b\u51b3\u7b56\u96c6\u5408\u600e\u4e48\u53d8\u5316\uff08\u56e0\u4e3a\u51b3\u7b56\u96c6\u5408\u4e0a\u4e0b\u754c\u90fd\u662f\u5173\u4e8e \\(i\\) \u7684\u5f0f\u5b50\uff09\u3002 \u90a3\u4e48\u53d1\u73b0\u8fd9\u91cc\u5b9e\u9645\u4e0a\u5c31\u662f\u5bf9\u4e00\u4e2a\u7279\u5b9a\u533a\u95f4\u53d6\u6700\u503c\uff0c\u4e14\u8fd9\u4e2a\u533a\u95f4\u4f1a\u5355\u8c03\u6ed1\u52a8\u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(j\\) \u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u961f\u5217\uff0c\u7ef4\u62a4 \\(kot \\in [i - k, i)\\) \u7684 \\(\\max\\{dp(kot, j)\\}\\) \u7136\u540e\u6bcf\u5f53 \\(i\\) \u53d8\u5316\u7684\u65f6\u5019\u7ef4\u62a4\u4e00\u4e0b\u5373\u53ef\u3002 \u6bcf\u6b21\u8be2\u95ee\u53ea\u9700\u8981\u5728 \\(j - 1\\) \u7684\u5355\u8c03\u961f\u5217\u91cc\u9762\u627e\u6700\u503c\u8f6c\u79fb\u5c31\u597d\u4e86\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 #include <cmath> #include <deque> #include <cstdio> #include <cstring> #include <utility> #include <iostream> #include <algorithm> #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int si = 5e3 + 10 ; const i64 inf = 0x3f3f3f3f3f3f3f3fll ; int n , m , k ; i64 a [ si ], dp [ si ][ si ]; deque < pair < i64 , int >> Q [ si ]; int main () { auto query = [ & ]( int id , int pos ) -> i64 { auto & q = Q [ id ]; while ( ! q . empty () && q . front (). second <= pos - k ) q . pop_front (); return q . empty () ? - inf : q . front (). first ; }; auto update = [ & ]( int id , int pos , i64 num ) -> void { auto & q = Q [ id ]; while ( ! q . empty () && q . back (). first <= num ) q . pop_back (); q . push_back ( make_pair ( num , pos )); }; cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> k >> m ; if ( ceil (( 1.0 * ( n - k + 1 )) / ( 1.0 * k )) > m ) cout << \"-1 \\n \" , exit ( 0 ); for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; for ( int i = 1 ; i <= k ; ++ i ) dp [ i ][ 1 ] = a [ i ]; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = min ( i , m ); j >= 2 ; -- j ) { dp [ i ][ j ] = query ( j - 1 , i - 1 ) + a [ i ]; update ( j , i , dp [ i ][ j ]); } if ( i <= k ){ dp [ i ][ 1 ] = a [ i ]; update ( 1 , i , dp [ i ][ 1 ]); } } i64 res = 0 ; for ( int i = n - k + 1 ; i <= n ; ++ i ) res = max ( res , dp [ i ][ m ]); cout << res << \" \\n \" ; return 0 ; }","title":"CF1077F2 Pictures with Kittens(Hard version)"},{"location":"rec/tricks-for-2022-05/#cf1407d-discrete-centrifugal-jumps","text":"\u6709 \\(n\\) \u680b\u697c\uff0c\u4f60\u6bcf\u6b21\u53ef\u4ee5\u4ece \\(i\\) \u8df3\u5230 \\(j\\) \uff0c\u5f53\u4e14\u4ec5\u5f53\u4e00\u4e0b\u4e09\u4e2a\u6761\u4ef6\u6709\u81f3\u5c11\u4e00\u4e2a\u88ab\u6ee1\u8db3\u3002 \uff08\u8bbe\u6bcf\u680b\u697c\u7684\u9ad8\u5ea6\u4e3a \\(h_i\\) \uff09 \\(i + 1 = j\\) \\(min(h_i,h_j) > max(h_{i + 1}, \\dots, h_{j - 1})\\) \\(max(h_i, h_j) < min(h_{i + 1}, \\dots, h_{j - 1})\\) \u8bf7\u95ee\u4ece \\(1\\) \u8df3\u5230 \\(n\\) \u7684\u6700\u5c0f\u6b65\u6570\u662f\u591a\u5c11\uff1f \\(2 \\le n \\le 3\\times 10^5\\) \u3002 \\(1\\le h_i \\le 10^9\\) \u3002 \u8003\u8651\u4e00\u4e2a\u975e\u5e38\u6734\u7d20\u7684 DP\uff0c \u8bbe \\(dp(i)\\) \u8868\u793a\u4ece \\(1\\) \u5230 \\(i\\) \u7684\u6700\u5c0f\u6b65\u6570\u3002 \\(\\text{O}(n^3)\\) \u7684 DP \u6bd4\u8f83\u5bb9\u6613\uff0c\u7b2c\u4e00\u79cd\u60c5\u51b5\u76f4\u63a5\u4ece \\(dp(i - 1)\\) \u8f6c\u79fb\u3002 \u540e\u4e24\u79cd\u60c5\u51b5\u679a\u4e3e\u5373\u53ef\u3002 \u7136\u540e\u8003\u8651\u4f18\u5316\u540e\u4e24\u79cd\u60c5\u51b5\uff0c \u6bd4\u5982\u4e00\u4e2a\u5c40\u90e8\u957f\u6210\u8fd9\u6837\uff1a \\[4\\ 3\\ 2\\ 1\\ 5\\] 1 2 3 4 5 6 7 + + + + + + + + + + + + + + + --------- 1 2 3 4 5 (position) \u7136\u540e\u4f60\u8981\u8003\u8651 \\(dp(5)\\) \u7684\u8f6c\u79fb\u3002 \u53d1\u73b0 \u4f4d\u7f6e \\(1, 2, 3\\) \u90fd\u53ef\u4ee5\u8f6c\u79fb\u5230 \\(5\\) \uff0c\u56e0\u4e3a\u6ee1\u8db3\u4e86\u7b2c\u4e8c\u79cd\u60c5\u51b5\u3002 \u7136\u540e \\(4\\) \u4e5f\u53ef\u4ee5\u8f6c\u79fb\u5230 \\(5\\) \uff0c\u56e0\u4e3a\u4ed6\u4eec\u76f8\u90bb\u3002 \u6ce8\u610f\u5230\u8fd9\u5b9e\u9645\u4e0a\u662f\u7ef4\u62a4\u4e86\u4e00\u4e2a\u6808\u9876\u4e3a\u6700\u5c0f\u503c\u7684\u5355\u8c03\u6808\uff08\u4ece\u9876\u5411\u4e0b\u975e\u4e25\u683c\u9012\u589e\uff09\uff0c \u7136\u540e\u4e0d\u65ad\u628a\u5f39\u51fa\u6808\u7684\u4f4d\u7f6e\u4f5c\u4e3a\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u8fdb\u884c\u8f6c\u79fb\u7684\u8fc7\u7a0b\u3002 \u7b2c\u4e09\u79cd\u60c5\u51b5\u7c7b\u4f3c\uff0c\u6240\u4ee5\u6211\u4eec\u7ef4\u62a4\u4e24\u4e2a\u5355\u8c03\u6808\u5373\u53ef\u3002 \u4e0d\u8fc7\u9700\u8981\u6ce8\u610f\u8fd9\u79cd\u60c5\u51b5\uff1a \\[3\\ 2\\ 3\\ 2\\ 3\\] \u6b64\u65f6\u4f4d\u7f6e \\(1\\) \u65e0\u6cd5\u8f6c\u79fb\u5230\u4f4d\u7f6e \\(5\\) \uff0c\u56e0\u4e3a\u4e0d\u6ee1\u8db3\u4e25\u683c\u5c0f\u4e8e\u7684\u9650\u5236\u3002 \u4f46\u662f\u4f4d\u7f6e \\(3\\) \u5219\u53ef\u4ee5\uff0c\u56e0\u4e3a\u4ed6\u662f\u548c\u4f4d\u7f6e \\(5\\) \u7684 \\(h\\) \u503c\u76f8\u7b49\u4e14\u53ef\u4ee5\u8f6c\u79fb\u5230 \\(5\\) \u7684\u6240\u6709\u4f4d\u7f6e\u4e2d\u8ddd\u79bb \\(5\\) \u6700\u8fd1\u7684\u4e00\u4e2a\u3002 \u90a3\u4e48\u5c31\u9700\u8981\u5728\u6b63\u5e38\u5f39\u6808\u4e4b\u540e\uff0c\u518d\u628a\u548c\u5f53\u524d\u4f4d\u7f6e\u7684\u503c \\(h_i\\) \u76f8\u540c\u7684\u5143\u7d20\u5168\u90e8\u5f39\u6389\uff0c\u7136\u540e\u518d\u628a \\(h_i\\) \u538b\u8fdb\u53bb\u3002 \u4f46\u662f\u5f39\u6389\u76f8\u540c\u5143\u7d20\u4e4b\u524d\u4e0d\u8981\u5fd8\u8bb0\u548c\u7b2c\u4e00\u4e2a\u76f8\u540c\u7684\uff08\u8ddd\u79bb\u6700\u8fd1\u7684\u4e00\u4e2a\uff09\u5143\u7d20\u505a\u4e00\u6b21\u8f6c\u79fb\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 // author : black_trees #include <stack> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; const int si = 3e5 + 10 ; int n ; int a [ si ]; int dp [ si ]; std :: stack < int > upper , lower ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); memset ( dp , 0x3f , sizeof dp ); cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; upper . push ( 1 ), lower . push ( 1 ), dp [ 1 ] = 0 ; for ( int i = 2 ; i <= n ; ++ i ) { dp [ i ] = min ( dp [ i ], dp [ i - 1 ] + 1 ); while ( ! upper . empty () && a [ i ] < a [ upper . top ()]) dp [ i ] = min ( dp [ i ], dp [ upper . top ()] + 1 ), upper . pop (); if ( ! upper . empty ()) // \u8fd9\u91cc\u4e0d\u7ba1\u5f53\u524d\u6808\u9876\u662f\u4e0d\u662f\u4e00\u6837\u7684\u90fd\u8981\u53d6\uff0c\u56e0\u4e3a\u4e0d\u53bb\u4f1a\u6f0f\u6389\u4e00\u4e9b\u8f6c\u79fb\u3002 // \u6709\u65e0\u4f8b\u5b50\uff1f dp [ i ] = min ( dp [ i ], dp [ upper . top ()] + 1 ); while ( ! upper . empty () && a [ i ] == a [ upper . top ()]) upper . pop (); // \u76f8\u7b49\u7684\u5f39\u6389\uff0c\u56e0\u4e3a\u53ea\u80fd\u53d6\u7b2c\u4e00\u4e2a\u76f8\u7b49\u7684\u8f6c\u79fb\u3002 upper . push ( i ); while ( ! lower . empty () && a [ i ] > a [ lower . top ()]) dp [ i ] = min ( dp [ i ], dp [ lower . top ()] + 1 ), lower . pop (); if ( ! lower . empty ()) dp [ i ] = min ( dp [ i ], dp [ lower . top ()] + 1 ); while ( ! lower . empty () && a [ i ] == a [ lower . top ()]) lower . pop (); lower . push ( i ); } cout << dp [ n ] << endl ; return 0 ; }","title":"CF1407D Discrete Centrifugal Jumps"},{"location":"rec/tricks-for-2022-05/#cf980d-perfect-groups","text":"\u4f60\u6709\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u4f60\u9700\u8981\u5206\u522b\u8ba1\u7b97\u8d21\u732e\u4e3a \\(1\\sim n\\) \u7684 \\(a\\) \u7684\u5b50\u4e32\u7684\u6570\u91cf\u3002 \u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u5b50\u4e32\uff0c\u5c06\u8fd9\u4e2a\u5b50\u4e32\u91cc\u7684\u6240\u6709\u5143\u7d20\u5206\u6210 \\(k\\) \u7ec4\uff0c\u4fdd\u8bc1\u6bcf\u7ec4\u91cc\u7684\u6570\u4e24\u4e24\u76f8\u4e58\u4e4b\u540e\u662f\u5b8c\u5168\u5e73\u65b9\u6570\u3002 \u8fd9\u4e2a\u5b50\u4e32\u7684\u8d21\u732e\u5c31\u662f\u6700\u5c0f\u7684 \\(k\\) \u3002 \\(1\\le n\\le 5000, |a_i| \\le 10^9\\) \u3002 \u7b2c\u4e00\u79cd\u6bd4\u8f83\u66b4\u529b\u7684\u65b9\u5f0f\u5c31\u662f\uff0c\u76f4\u63a5\u7528\u5e76\u67e5\u96c6\u628a\u6240\u6709\u4e58\u8d77\u6765\u662f\u5b8c\u5168\u5e73\u65b9\u6570\u7684\u5408\u5e76\u5230\u4e00\u4e2a\u96c6\u5408\u91cc\u3002 \u56e0\u4e3a\u5982\u679c \\(a\\times b\\) \u662f\u5b8c\u5168\u5e73\u65b9\uff0c\u4e14 \\(b\\times c\\) \u662f\u5b8c\u5168\u5e73\u65b9\uff0c\u90a3\u4e48 \\(c\\times a\\) \u4e5f\u662f\u5b8c\u5168\u5e73\u65b9\u3002 \u7136\u540e \\(\\text{O}(n^2)\\) \u679a\u4e3e\u6240\u6709\u5b50\u4e32\u8ba1\u7b97\u7b54\u6848\u5373\u53ef\u3002 \u6216\u8005\u7528\u4e00\u4e2a\u5de7\u5999\u4e00\u70b9\u7684\u529e\u6cd5\uff08\u53ef\u4ee5\u8fc7\u5929\u5143\u516c\u5b66\u7684\u67d0\u573a\u63d0\u9ad8\u9080\u8bf7\u8d5b\u7684 B \u7684\u505a\u6cd5\uff09\u3002 \u76f4\u63a5\u628a\u6240\u6709\u5e73\u65b9\u56e0\u5b50\u7b5b\u6389\uff0c\u4e4b\u540e\u76f8\u7b49\u7684\u5c31\u5e94\u8be5\u6254\u5230\u4e00\u4e2a\u96c6\u5408\u91cc\u9762\u3002 \u6ce8\u610f\u8fd9\u4e24\u79cd\u505a\u6cd5\u90fd\u8981\u7279\u5224 \\(0\\) \u7684\u5f71\u54cd\u3002 \\(\\text{O}(n^2)\\) Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 // author : black_trees #include <map> #include <cmath> #include <bitset> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #pragma GCC target(\"avx,sse2,sse3,sse4,mmx\") #pragma GCC optimize(\"Ofast\", \"inline\", \"-ffast-math\") #define meow(x) cerr << #x << \" = \" << x using namespace std ; using i64 = long long ; using ldb = long double ; const int si = 5e3 + 10 ; int n ; i64 a [ si ]; int ans [ si ]; int pa [ si ]; int root ( int x ) { if ( pa [ x ] != x ) return pa [ x ] = root ( pa [ x ]); return pa [ x ]; } void merge ( int x , int y ) { int rx = root ( x ), ry = root ( y ); if ( rx == ry ) return ; pa [ rx ] = ry ; } bool issqr ( i64 m ) { i64 t = sqrt (( ldb ) m ); return (( t * t ) == m ); } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ], pa [ i ] = i ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = i + 1 ; j <= n ; ++ j ) { if ( ! a [ i ] || ! a [ j ]) continue ; if ( issqr ( 1l l * a [ i ] * a [ j ])) merge ( i , j ); } } // for(int i = 1; i <= n; ++i) // meow(pa[i]) << endl; // memset(ans, 0, sizeof ans); // std::bitset<si> Set; // std::map<int, bool> Set; bool Set [ si ]; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) Set [ j ] = false ; for ( int j = i , cnt = 0 ; j <= n ; ++ j ) { if ( ! a [ j ]) ans [ max ( 1 , cnt )] ++ ; else ans [ cnt = Set [ root ( j )] ? cnt : ++ cnt ] ++ , Set [ root ( j )] = true ; } } for ( int i = 1 ; i <= n ; ++ i ) cout << ans [ i ] << \" \" ; cout << \" \\n \" ; return 0 ; } 1 Tag : \u5e76\u67e5\u96c6 / \u66b4\u529b / \u6570\u8bba / \u7b5b\u6cd5 / \u5e73\u65b9\u56e0\u5b50 / \u552f\u4e00\u5206\u89e3\u5b9a\u7406","title":"CF980D Perfect Groups"},{"location":"rec/interesting/before-noip2022/","text":"NOIP2022 \u8003\u524d\u8111\u6d1e\u6253\u5f00 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5927\u6982\u662f\u4e00\u4e2a\u81ea\u5df1\u627e\u7684\u671f\u671b\u548c\u5bb9\u65a5\u7684\u5c0f\u9898\u5355\uff08\u4e5f\u8bb8\u4f1a\u5199\uff09 \u7136\u540e\u6768\u7237\u7ed9\u7684\u4e00\u5806\u4ea4\u4e92\uff08\u5168\u90e8\u53e3\u80e1\u7528\u6765\u6362\u6362\u8111\u5b50\uff09 \u53ef\u80fd\u4f1a\u6709 ARC076\uff08\u548c hfy \u4e00\u8d77\u6253\uff09\u3002 \u8003\u524d\u53ef\u80fd\u8fd8\u8981\u590d\u4e60\u4e00\u4e9b\u677f\u5b50\u3002\u6570\u5b66\uff0c\u56fe\u8bba\u7684\u4e3a\u4e3b\uff0c\u54e6\uff0c\u8fd8\u6709\u4e8c\u5206\u3002 CF518D. Ilya and Escalator \u03c8(\uff40\u2207\u00b4)\u03c8 \u7b80\u5355\u7684\u671f\u671b dp\uff0c\u8003\u8651\u8bbe \\(dp(i)\\) \u8868\u793a\u7b2c \\(i\\) \u79d2\u5728\u7535\u68af\u4e0a\u7684\u4eba\u7684\u671f\u671b\u3002 \u4f46\u662f\u6ce8\u610f\u5230 \\(n\\) \u5bf9\u7ed3\u679c\u662f\u6709\u5f71\u54cd\u7684\uff0c\u6240\u4ee5\u518d\u52a0\u4e00\u4e2a\u7ef4\u5ea6\uff1a \\(dp(i, j)\\) \u8868\u793a\u8003\u8651\u7b2c \\(i\\) \u4e2a\u4eba\u5728\u961f\u5934\uff0c\u7b2c \\(j\\) \u79d2\u7684\u65f6\u5019\uff0c\u7535\u68af\u4e0a\u7684\u671f\u671b\u4eba\u6570\u3002 \u4e4b\u524d\u6211\u505a\u671f\u671b dp \u7684\u65f6\u5019\u4e00\u76f4\u662f\u76f4\u63a5\u7528\u5b9a\u4e49\u548c\u6761\u4ef6\u5c55\u5f00\u5f0f\u5b50\uff0c\u7136\u540e\u4ece\u4e0a\u4e00\u4e2a\u72b6\u6001\u7684\u5b9a\u4e49\u5f0f\u5b50\u91cc\u9762\u76f4\u63a5\u9644\u5e26\u4e0a\u65b0\u7684\u51b3\u7b56\u7684\u5f71\u54cd\uff0c\u7136\u540e\u5408\u5e76\u540c\u7c7b\u9879\u63a8\u51fa\u5f0f\u5b50\u3002 \u611f\u89c9\u8fd9\u79cd\u505a\u6cd5\u6bd4\u8f83\u8822\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u671f\u671b\u5b9a\u4e49\uff0c\u6982\u7387\u7684\u4e00\u4e9b\u77e5\u8bc6\u70b9\u6709\u70b9\u5fd8\u4e86\uff08whk \u7684\u6982\u7387\uff0c\u671f\u671b\u5565\u7684\u90fd\u662f\u5dee\u4e0d\u591a\u4e00\u5e74\u524d\u8fd9\u4e2a\u65f6\u5019\u5b66\u7684\u4e86\uff09\u3002 \u5408\u4e8b\u4ef6 \\(A\\cup B\\) \u53d1\u751f\u7684\u6982\u7387\u662f \\(P(A) + P(B)\\) \u3002 \u79ef\u4e8b\u4ef6 \\(A\\cap B\\) \u53d1\u751f\u7684\u6982\u7387\u662f \\(P(A) \\times P(B)\\) \u3002 \u7136\u540e\u671f\u671b\u7684\u672c\u8d28\u5b9e\u9645\u4e0a\u662f\u4e00\u79cd\u52a0\u6743\u5e73\u5747\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u8f6c\u79fb\u7684\u65f6\u5019\u53ef\u4ee5\u628a\u671f\u671b\u5f53\u6210\u968f\u673a\u53d8\u91cf\u7684\u4e00\u79cd\u53d6\u503c\uff0c\u53ef\u4ee5\u7528\u6765\u201c\u4ee3\u8868\u201d\u6240\u6709\u7684\u60c5\u51b5\u3002 \u55ef\uff0c\u7136\u540e\u63a8\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \\(dp(i, j) = p \\times (dp(i - 1, j - 1) + 1) + (1 - p) \\times dp(i, j - 1)\\) \u3002 \u6ca1\u4e86\u3002 ARC101C(E) \u03c8(\uff40\u2207\u00b4)\u03c8 \u611f\u89c9\u4e5f\u662f\u5f88\u7b80\u5355\u7684\u5957\u8def\uff0c\u5c31\u662f\u6b63\u96be\u5219\u53cd\u3002 \u6211\u8003\u8651\u7b97\u4e0d\u5408\u6cd5\u7684\u65b9\u6848\u6570\uff0c\u8fd9\u4e2a\u4e1c\u897f\u5bb9\u65a5\u4e00\u4e0b\uff0c\u5c31\u5f3a\u5236\u67d0\u6761\u8fb9\u4e0d\u5408\u6cd5\uff0c\u679a\u4e3e\u6761\u4ef6\u6784\u6210\u7684\u5b50\u96c6\u7136\u540e\u4e58\u4e0a\u5bb9\u65a5\u7cfb\u6570\u3002 \u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u7528\u6811\u4e0a\u80cc\u5305\u4f18\u5316\uff0c\u4f46\u662f\u5177\u4f53\u7684\u6211\u4e0d\u662f\u5f88\u4f1a\uff0c\u53ef\u80fd\u5c31\u662f\u6ce8\u610f\u5230\u4e0d\u5408\u6cd5\u4e00\u5b9a\u4f1a\u9020\u6210\u4e00\u4e2a\u4e2a\u8fde\u901a\u5757\u7684\u51fa\u73b0\uff0c\u7528\u8fd9\u4e2a\u505a dp \u7b97\u8d21\u732e\u3002 \u5177\u4f53\u7684\u6211\u5495\u6389\u4e86\uff0c\u4ee5\u540e\u518d\u6539\u3002 ARC076 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e2a\u89c1 ARC VP \u96c6\u5408 \u3002 \u8bdd\u8bf4\u8fd9\u4e2a\u96c6\u5408\u91cc\u73b0\u5728\u552f\u4e8c\u7684\u4e24\u6b21\u90fd\u662f\u8d5b\u524d\u6253\u7684\uff0c\u8349\u3002","title":"NOIP2022 \u8003\u524d\u601d\u7ef4\u6253\u5f00\u53e3\u80e1\u5408\u96c6"},{"location":"rec/interesting/before-noip2022/#noip2022","text":"\u5927\u6982\u662f\u4e00\u4e2a\u81ea\u5df1\u627e\u7684\u671f\u671b\u548c\u5bb9\u65a5\u7684\u5c0f\u9898\u5355\uff08\u4e5f\u8bb8\u4f1a\u5199\uff09 \u7136\u540e\u6768\u7237\u7ed9\u7684\u4e00\u5806\u4ea4\u4e92\uff08\u5168\u90e8\u53e3\u80e1\u7528\u6765\u6362\u6362\u8111\u5b50\uff09 \u53ef\u80fd\u4f1a\u6709 ARC076\uff08\u548c hfy \u4e00\u8d77\u6253\uff09\u3002 \u8003\u524d\u53ef\u80fd\u8fd8\u8981\u590d\u4e60\u4e00\u4e9b\u677f\u5b50\u3002\u6570\u5b66\uff0c\u56fe\u8bba\u7684\u4e3a\u4e3b\uff0c\u54e6\uff0c\u8fd8\u6709\u4e8c\u5206\u3002","title":"NOIP2022 \u8003\u524d\u8111\u6d1e\u6253\u5f00"},{"location":"rec/interesting/before-noip2022/#cf518d-ilya-and-escalator","text":"\u7b80\u5355\u7684\u671f\u671b dp\uff0c\u8003\u8651\u8bbe \\(dp(i)\\) \u8868\u793a\u7b2c \\(i\\) \u79d2\u5728\u7535\u68af\u4e0a\u7684\u4eba\u7684\u671f\u671b\u3002 \u4f46\u662f\u6ce8\u610f\u5230 \\(n\\) \u5bf9\u7ed3\u679c\u662f\u6709\u5f71\u54cd\u7684\uff0c\u6240\u4ee5\u518d\u52a0\u4e00\u4e2a\u7ef4\u5ea6\uff1a \\(dp(i, j)\\) \u8868\u793a\u8003\u8651\u7b2c \\(i\\) \u4e2a\u4eba\u5728\u961f\u5934\uff0c\u7b2c \\(j\\) \u79d2\u7684\u65f6\u5019\uff0c\u7535\u68af\u4e0a\u7684\u671f\u671b\u4eba\u6570\u3002 \u4e4b\u524d\u6211\u505a\u671f\u671b dp \u7684\u65f6\u5019\u4e00\u76f4\u662f\u76f4\u63a5\u7528\u5b9a\u4e49\u548c\u6761\u4ef6\u5c55\u5f00\u5f0f\u5b50\uff0c\u7136\u540e\u4ece\u4e0a\u4e00\u4e2a\u72b6\u6001\u7684\u5b9a\u4e49\u5f0f\u5b50\u91cc\u9762\u76f4\u63a5\u9644\u5e26\u4e0a\u65b0\u7684\u51b3\u7b56\u7684\u5f71\u54cd\uff0c\u7136\u540e\u5408\u5e76\u540c\u7c7b\u9879\u63a8\u51fa\u5f0f\u5b50\u3002 \u611f\u89c9\u8fd9\u79cd\u505a\u6cd5\u6bd4\u8f83\u8822\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u671f\u671b\u5b9a\u4e49\uff0c\u6982\u7387\u7684\u4e00\u4e9b\u77e5\u8bc6\u70b9\u6709\u70b9\u5fd8\u4e86\uff08whk \u7684\u6982\u7387\uff0c\u671f\u671b\u5565\u7684\u90fd\u662f\u5dee\u4e0d\u591a\u4e00\u5e74\u524d\u8fd9\u4e2a\u65f6\u5019\u5b66\u7684\u4e86\uff09\u3002 \u5408\u4e8b\u4ef6 \\(A\\cup B\\) \u53d1\u751f\u7684\u6982\u7387\u662f \\(P(A) + P(B)\\) \u3002 \u79ef\u4e8b\u4ef6 \\(A\\cap B\\) \u53d1\u751f\u7684\u6982\u7387\u662f \\(P(A) \\times P(B)\\) \u3002 \u7136\u540e\u671f\u671b\u7684\u672c\u8d28\u5b9e\u9645\u4e0a\u662f\u4e00\u79cd\u52a0\u6743\u5e73\u5747\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u8f6c\u79fb\u7684\u65f6\u5019\u53ef\u4ee5\u628a\u671f\u671b\u5f53\u6210\u968f\u673a\u53d8\u91cf\u7684\u4e00\u79cd\u53d6\u503c\uff0c\u53ef\u4ee5\u7528\u6765\u201c\u4ee3\u8868\u201d\u6240\u6709\u7684\u60c5\u51b5\u3002 \u55ef\uff0c\u7136\u540e\u63a8\u51fa\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \\(dp(i, j) = p \\times (dp(i - 1, j - 1) + 1) + (1 - p) \\times dp(i, j - 1)\\) \u3002 \u6ca1\u4e86\u3002","title":"CF518D. Ilya and Escalator"},{"location":"rec/interesting/before-noip2022/#arc101ce","text":"\u611f\u89c9\u4e5f\u662f\u5f88\u7b80\u5355\u7684\u5957\u8def\uff0c\u5c31\u662f\u6b63\u96be\u5219\u53cd\u3002 \u6211\u8003\u8651\u7b97\u4e0d\u5408\u6cd5\u7684\u65b9\u6848\u6570\uff0c\u8fd9\u4e2a\u4e1c\u897f\u5bb9\u65a5\u4e00\u4e0b\uff0c\u5c31\u5f3a\u5236\u67d0\u6761\u8fb9\u4e0d\u5408\u6cd5\uff0c\u679a\u4e3e\u6761\u4ef6\u6784\u6210\u7684\u5b50\u96c6\u7136\u540e\u4e58\u4e0a\u5bb9\u65a5\u7cfb\u6570\u3002 \u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u7528\u6811\u4e0a\u80cc\u5305\u4f18\u5316\uff0c\u4f46\u662f\u5177\u4f53\u7684\u6211\u4e0d\u662f\u5f88\u4f1a\uff0c\u53ef\u80fd\u5c31\u662f\u6ce8\u610f\u5230\u4e0d\u5408\u6cd5\u4e00\u5b9a\u4f1a\u9020\u6210\u4e00\u4e2a\u4e2a\u8fde\u901a\u5757\u7684\u51fa\u73b0\uff0c\u7528\u8fd9\u4e2a\u505a dp \u7b97\u8d21\u732e\u3002 \u5177\u4f53\u7684\u6211\u5495\u6389\u4e86\uff0c\u4ee5\u540e\u518d\u6539\u3002","title":"ARC101C(E)"},{"location":"rec/interesting/before-noip2022/#arc076","text":"\u8fd9\u4e2a\u89c1 ARC VP \u96c6\u5408 \u3002 \u8bdd\u8bf4\u8fd9\u4e2a\u96c6\u5408\u91cc\u73b0\u5728\u552f\u4e8c\u7684\u4e24\u6b21\u90fd\u662f\u8d5b\u524d\u6253\u7684\uff0c\u8349\u3002","title":"ARC076"},{"location":"rec/interesting/comb-problem-black-trees-PC/","text":"\u7b80\u5355\u8bb0\u5f55\u4e00\u4e9b\u9519\u8fc7\u7684 / Educational \u7684\u7ec4\u5408\u6570\u5b66\u95ee\u9898 / \u8ba1\u6570\u95ee\u9898\u3002 \u4e00\u4e9b\u57fa\u672c\u6a21\u578b \u03c8(\uff40\u2207\u00b4)\u03c8 \u5c0f\u7403\u6a21\u578b \u03c8(\uff40\u2207\u00b4)\u03c8 Reference: lleozhang \u7684\u535a\u5ba2 \u6709\u533a\u522b\u597d\u6bd4\u505a\u6392\u5217\uff0c\u6ca1\u533a\u522b\u597d\u6bd4\u505a\u7ec4\u5408\u3002 \u9ed8\u8ba4 \\(n\\) \u4e2a\u5c0f\u7403\uff0c \\(m\\) \u4e2a\u76d2\u5b50\u3002 \u6216\u8005\u8bf4\uff0c\u5c0f\u7403\u6709\u533a\u522b\u53ef\u4ee5\u7406\u89e3\u6210\u6709 \\(n\\) \u4e2a\u4e0d\u540c\u5143\u7d20\uff0c\u4e00\u822c\u9700\u8981\u8003\u8651 \u5bf9\u4e8e\u6bcf\u4e2a\u5c0f\u7403\u90fd\u51b3\u7b56 \uff08\u4e00\u822c\u662f\u9012\u63a8\uff09\u3002 \u76d2\u5b50\u6709\u533a\u522b\u5219\u53ef\u4ee5\u7406\u89e3\u4e3a\uff0c\u5bf9\u4e8e\u67d0\u4e2a\u65b9\u7a0b\u6c42\u6709\u591a\u5c11\u7ec4\u89e3 \\(\\{x_i\\}\\) \uff0c\u5982\u679c\u5c0f\u7403\u6ca1\u6709\u533a\u522b\uff0c \\(x_i\\) \u5c31\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u5982\u679c\u5c0f\u7403\u6709\u533a\u522b\uff0c\u90a3\u4e48 \\(x_i\\) \u5c31\u662f\u4e00\u4e2a\u96c6\u5408\u3002 \u5141\u4e0d\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50\u5c31\u7b49\u4ef7\u4e8e \\(x_i\\) \u7684\u9650\u5236\u3002 \u6240\u4ee5\u5c0f\u7403\u6a21\u578b\u90fd\u53ef\u4ee5\u62bd\u8c61\u6210 \u5e7f\u4e49\u7684\u7ebf\u6027\u4e0d\u5b9a\u65b9\u7a0b\u7684\u89e3\u7684\u7ec4\u6570 \u3002 \u5c0f\u7403\u6709\u533a\u522b\uff0c\u76d2\u5b50\u6709\u533a\u522b\uff0c\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50 \u03c8(\uff40\u2207\u00b4)\u03c8 \u76f4\u63a5\u8003\u8651\u76d2\u5b50\u4e0d\u592a\u597d\u8003\u8651\uff0c\u76f4\u63a5\u8003\u8651\u7403\uff0c \u6bcf\u4e2a\u5c0f\u7403\u6709 \\(m\\) \u79cd\u653e\u6cd5\uff0c\u4e58\u6cd5\u539f\u7406\u6709 \\(m^n\\) \u79cd\u53ef\u80fd\u3002 \u5c0f\u7403\u6709\u533a\u522b\uff0c\u76d2\u5b50\u6709\u533a\u522b\uff0c\u4e0d\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8003\u8651\u8bbe\u51fd\u6570 \\(f(n, m)\\) \u8868\u793a \\(n\\) \u4e2a\u5c0f\u7403\u653e\u5230 \\(m\\) \u4e2a\u76d2\u5b50\u91cc\u7684\u65b9\u6848\u6570\u3002 \u53ef\u4ee5\u8003\u8651\u5f53\u524d\u5c0f\u7403\u653e\u5728\u54ea\u91cc\u53ef\u4ee5\u5f97\u5230\u9012\u63a8\u5f0f\uff1a \\(f(n,m) = m(f(n - 1, m) + f(n - 1, m - 1))\\) \u3002 \u5c31\u662f\u8003\u8651\u8fd9\u4e2a\u5c0f\u7403\u662f\u653e\u5230\u539f\u6765\u6709\u4e86\u7684\u8fd8\u662f\u653e\u5230\u4e00\u4e2a\u8fd8\u6ca1\u6709\u7403\u76d2\u5b50\u91cc\u9762\u3002 \u56e0\u4e3a\u76d2\u5b50\u4e0d\u540c\u6240\u4ee5\u8981\u4e58 \\(m\\) \u3002 \u8fb9\u754c\uff1a \\(n = m, f(n, m) = n!; m > n, f(n, m) = 0\\) \u3002 \u5c0f\u7403\u6709\u533a\u522b\uff0c\u76d2\u5b50\u6ca1\u533a\u522b\uff0c\u4e0d\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50 \u03c8(\uff40\u2207\u00b4)\u03c8 \u548c \u300c\u5c0f\u7403\u6709\u533a\u522b\uff0c\u76d2\u5b50\u6709\u533a\u522b\uff0c\u4e0d\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50\u300d \u7c7b\u4f3c\u3002 \u8fd8\u662f\u8bbe \\(f(n, m)\\) \u8868\u793a \\(n\\) \u5c0f\u7403\u653e\u5230 \\(m\\) \u4e2a\u76d2\u5b50\u91cc\u7684\u65b9\u6848\u6570\u3002 \u7c7b\u6bd4\u4e0a\u9762\u53ef\u4ee5\u5f97\u5230\u9012\u63a8\u5f0f\uff1a \\(f(n, m) = mf(n - 1, m) + f(n - 1, m - 1)\\) \u3002 \u552f\u4e00\u7684\u533a\u522b\u662f\u76d2\u5b50\u4e0d\u540c\u3002 \u8fd9\u4e2a\u662f\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570 \\(\\begin{Bmatrix}n \\\\ m\\end{Bmatrix}\\) \u3002 \u5feb\u901f\u6c42\u4e0d\u4f1a\u3002 \u5c0f\u7403\u6709\u533a\u522b\uff0c\u76d2\u5b50\u6ca1\u533a\u522b\uff0c\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7b80\u5355\u95ee\u9898\uff0c\u7528\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u8f6c\u5316\u4e00\u4e0b\uff0c\u8003\u8651\u5206\u522b\u653e\u5230 \\(k\\) \u4e2a\u76d2\u5b50\u5c31\u884c\u4e86\u3002 \\[ \\sum\\limits_{k = 1}^{m} \\begin{Bmatrix}n \\\\ k\\end{Bmatrix} \\] \u5c0f\u7403\u6ca1\u533a\u522b\uff0c\u76d2\u5b50\u6709\u533a\u522b\uff0c\u4e0d\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5c31\u662f\u63d2\u677f\u6cd5\u7684\u57fa\u7840\uff0c\u7b54\u6848 \\(\\dbinom{n - 1}{m - 1}\\) \u3002 \u5c0f\u7403\u6ca1\u533a\u522b\uff0c\u76d2\u5b50\u6709\u533a\u522b\uff0c\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50 \u03c8(\uff40\u2207\u00b4)\u03c8 \u63d2\u677f\u6cd5\u516c\u5f0f\uff0c\u7b54\u6848 \\(\\dbinom{n + m - 1}{n}\\) \u3002 \u5c0f\u7403\u6ca1\u533a\u522b\uff0c\u76d2\u5b50\u6ca1\u533a\u522b\uff0c\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e2a\u662f\u5206\u62c6\u6570\uff0c\u8fd8\u4e0d\u4f1a \u5c0f\u7403\u6ca1\u533a\u522b\uff0c\u76d2\u5b50\u6ca1\u533a\u522b\uff0c\u4e0d\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5206\u62c6\u6570\u7684\u53d8\u79cd\u3002 \u4e00\u4e9b\u6709\u610f\u601d\u7684\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e00\u4e2a\u56db\u8272\u5b9a\u7406\u7684\u65b9\u6848\u6570\u8ba1\u6570 \u03c8(\uff40\u2207\u00b4)\u03c8 1 2 3 4 5 _________________ | | __E_ | | | A | __D_ | B | | | C | | ----------------- \u7ed9\u8fd9\u4e2a\u5730\u56fe\u4e0a\u8272\uff0c\u95ee\u65b9\u6848\u6570\u3002 \u5148\u8003\u8651\u786e\u5b9a A \u533a\u57df\u548c B \u533a\u57df\u7684\u989c\u8272\u662f\u5426\u76f8\u540c\u3002 \u56e0\u4e3a A\uff0cB \u533a\u57df\u7684\u989c\u8272\u51b3\u7b56\u4f1a\u5bfc\u81f4 E,C \u7684\u989c\u8272\u51b3\u7b56\u6570\u6539\u53d8\u3002 \u5982\u679c A, B \u540c\u8272\uff0c\u90a3\u4e48 D \u5c31\u6709 3 \u79cd\u65b9\u6848\uff0c\u7136\u540e E, C \u5c31\u5404\u6709 2 \u79cd\u65b9\u6848\uff0c\u7b54\u6848 \\(4\\times 1 \\times 3 \\times 2 \\times 2 = 48\\) \u3002 \u5982\u679c A, B \u4e0d\u540c\u8272\uff0c\u90a3\u4e48 D \u53ea\u6709 2 \u79cd\u65b9\u6848\uff0cE, C \u5404\u81ea\u53ea\u6709\u4e00\u79cd\uff0c\u7b54\u6848 \\(4 \\times 3 \\times 2 \\times 1 \\times 1 = 24\\) \u3002 \u6700\u7ec8\u7b54\u6848 \\(48 + 24 = 72\\) \u3002 \u8fd9\u91cc\u80fd\u62bd\u8c61\u51fa\u6765\u7684\u4e00\u4e2a\u5c0f Trick\uff1a \u6240\u4ee5\u5bf9\u4e8e\u8fd9\u79cd \u65b9\u6848\u6570\u95ee\u9898\uff0c\u5728\u67d0\u4e00\u4e2a\u51b3\u7b56\u4f1a\u5f71\u54cd\u4e4b\u540e\u7684\u51b3\u7b56\u6570\u91cf\u7684\u65f6\u5019\u5c31\u8981\u5206\u7c7b\u8ba8\u8bba \u3002 \u4e00\u4e2a\u63d2\u677f\u6cd5\u7684\u5e94\u7528 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6254 \\(7\\) \u4e2a\u8d28\u5730\u5747\u5300\u7684\u9ab0\u5b50\uff0c\u51fa\u73b0\u548c\u4e3a \\(10\\) \u7684\u6982\u7387 \u4e3a \\(\\dfrac{n}{6^7}\\) \uff0c \\(n\\) \u5e94\u8be5\u7b49\u4e8e\u591a\u5c11\uff1f \u53ef\u4ee5\u8f6c\u5316\u4e3a\u63d2\u677f\u6cd5\uff0c\u7b54\u6848\u662f \\(\\dbinom{10 - 1}{7 - 1}\\) \uff0c\u56e0\u4e3a\u53d8\u91cf\u90fd\u662f \\(\\le 6\\) \u7684\uff0c\u591a\u4e86\u4e0d\u591f\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u8fd9\u4e48\u505a\u6ca1\u6709\u95ee\u9898\u3002 \u53e6\u5916\u4e00\u4e2a\u63d2\u677f\u6cd5\u7684\u5e94\u7528 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5b9a\u4e49 \\(D(n)\\) \u8868\u793a\u5c06\u6b63\u6574\u6570 \\(n\\) \u5206\u89e3\u4e3a\u5982\u4e0b\u5f62\u5f0f\u7684\u65b9\u6848\u6570\uff1a \\(n = f_1 \\times f_2 \\times f_i \\dots\\) \uff0c\u5176\u4e2d \\(i \\ge 1, f_i \\ge 1\\) \uff0c \\((f_i, f_{j}); (f_j, f_i)\\) \u662f\u4e0d\u540c\u7684\u65b9\u6848\u3002 \u6c42 \\(D(96)\\) \u3002 \u9996\u5148\u53d1\u73b0 \\(96 = 2^5 \\times 3\\) \uff0c\u628a \\(3\\) \u62ff\u51fa\u6765\u5148\u4e0d\u7ba1\uff0c \u7136\u540e \\(2^5\\) \u663e\u7136\u53ef\u4ee5\u5206\u6210 \\(2^{c_1}, 2^{c_2},\\dots 2^{c_m}, m \\le 5, c_i \\ge 0\\) \u7136\u540e\u5bf9\u4e8e \\(m = i\\) \u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u628a \\(3\\) \u653e\u5230\u8fd9\u4e9b\u6570\u91cc\u9762\u63d2\u677f\uff08\u53ef\u4ee5\u662f\u5934\u5c3e\uff09\uff0c\u6216\u8005\u76f4\u63a5\u4e58\u5230\u8fd9\u4e9b\u6570\u4e0a\u9762\uff0c\u6240\u4ee5\u6b64\u65f6\u7684\u65b9\u6848\u6570\u662f \\((i + 1 + i) \\times i!\\) \uff0c\u56e0\u4e3a\u8fd8\u53ef\u4ee5\u5168\u6392\u5217\u3002 \u7136\u540e\u5c31\u53ea\u80fd\u5bf9\u4e8e\u6bcf\u4e2a\u60c5\u51b5\u786c\u7b97\u4e86\u3002\u3002\u3002\u3002\u3002 \u7ebf\u6027\u6c42\u9006\u5143 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e58\u6cd5\u9006\u5143\u7684\u5b9a\u4e49\u5927\u6982\u5c31\u662f\uff0c\u5982\u679c \\(a \\times inv \\equiv 1 (\\mod p)\\) \uff0c\u90a3\u4e48 \\(inv\\) \u5c31\u662f \\(a\\) \u5728\u6a21 \\(p\\) \u610f\u4e49\u4e0b\u7684\u4e58\u6cd5\u9006\u5143\uff0c\u4e00\u822c\u8bb0\u4f5c \\(a^{-1}\\) \u6216\u8005 \\(inv(a)\\) \u3002 \u6b63\u5e38\u6765\u8bf4\u5e94\u8be5\u7528\u7fa4\u8bba\u6765\u89e3\u91ca\u9006\u5143\u7684\u5b9a\u4e49\uff0c\u4f46\u662f\u6211\u61d2\uff0c\u4e0d\u60f3\u5199\u4e86\u3002 \u4f60\u53ef\u4ee5\u7406\u89e3\u6210 \\(a\\times a^{-1} \\equiv a\\times inv \\equiv1 (\\mod p)\\) \uff0c\u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5\u7528\u6765\u5904\u7406\u5e26\u53d6\u6a21\u7684\u9664\u6cd5\u3002 \u56e0\u4e3a\u52a0\u51cf\u4e58\u5728\u53d6\u6a21\u610f\u4e49\u4e0b\u90fd\u662f\u5c01\u95ed\u7684\uff0c\u4f46\u662f\u9664\u6cd5\u5c31\u6ca1\u6cd5\u5904\u7406\u3002 \u6240\u4ee5\u4e3a\u4e86\u8ba9\u9664\u6cd5\u5728\u53d6\u6a21\u610f\u4e49\u4e0b\u4e5f\u662f\u5c01\u95ed\u7684\uff0c\u6211\u4eec\u628a\u9664\u6cd5\u8f6c\u5316\u6210\u4e58\u4e0a\u5206\u6bcd\u7684\u4e58\u6cd5\u9006\u5143\u5373\u53ef\u3002 \u4e5f\u5c31\u662f\u8bf4 \\(\\dfrac{a}{b} \\equiv a\\times b^{-1} \\equiv a\\times inv(b) (\\mod p)\\) \u3002 \u6709\u4e00\u4e2a\u5c0f\u6ce8\u610f\u70b9\u662f\uff0c \\(inv(a)\\times inv(b) = inv(ab)\\) \uff0c\u8fd9\u4e2a\u4ece\u5b9a\u4e49\u4e0a\u7684\u5c01\u95ed\u6027\u5373\u53ef\u77e5\u9053\u3002 \u6c42\u6cd5\u53ef\u4ee5\u76f4\u63a5\u7528\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff1a \u5982\u679c \\(a,p\\) \u4e92\u8d28\uff0c\u5219 \\(a\\) \u5728\u6a21 \\(p\\) \u610f\u4e49\u4e0b\u7684\u9006\u5143\u662f \\(a^{p-2}\\) \uff0c\u5feb\u901f\u5e42\u5373\u53ef \\(O(\\log n)\\) \u6c42\uff0c\u8fd9\u91cc\u4e5f\u8bf4\u660e\u4e86\u53ea\u6709 \\(p\\) \u662f\u8d28\u6570\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u4efb\u610f\u7ed9\u5b9a\u7684\u503c\u57df\u5c0f\u4e8e \\(2p\\) \u7684\u5e8f\u5217\u90fd\u53ef\u4ee5\u6c42\u51fa\u9006\u5143\u3002 \u7136\u540e\u6211\u4eec\u5bf9\u4e8e\u4e00\u4e2a\u503c\u57df\u4e3a \\([1,n]\\) \u7684\u6570\u5217\uff0c\u6211\u4eec\u8981\u6c42\u51fa\u6bcf\u4e00\u9879\u5728 \\(\\mod p\\) \u610f\u4e49\u4e0b\u7684\u9006\u5143\uff08 \\(p\\) \u662f\u8d28\u6570\uff09\uff0c\u8fd9\u6837\u505a\u80af\u5b9a\u4e0d\u597d\u641e\uff0c\u6240\u4ee5\u8003\u8651\u4e00\u4e2a\u53ef\u4ee5\u7ebf\u6027\u9012\u63a8\u7684\u505a\u6cd5 \u9996\u5148\u4ee4 \\(r = i\\mod p\\) \uff0c\u4ee4 \\(\\lfloor p/i\\rfloor = k\\) \uff0c\u5373 \\(ki+r \\equiv 0(\\mod p)\\) \u3002 \u7136\u540e\u5c31\u662f\u79fb\u9879\uff0c\u628a \\(i\\) \u5355\u72ec\u7559\u4e00\u8fb9\uff0c\u53e6\u5916\u4e00\u8fb9\u662f\u4e00\u4e2a\u5c0f\u4e8e \\(i\\) \u7684\u6570\u7684\u9006\u5143\u7684\u5f62\u5f0f\u3002 \\[ \\begin{aligned} ki+r &\\equiv 0 &(\\mod p)\\\\ i &\\equiv \\dfrac{-r}{k} &(\\mod p)\\\\ i &\\equiv -r \\times inv(k) &(\\mod p)\\\\ i &\\equiv -inv(k)\\times r &(\\mod p)\\\\ inv(i) &\\equiv -k\\times inv(r) &(\\mod p)\\\\ inv(i) &\\equiv -\\lfloor p/i\\rfloor \\times inv(p \\mod i) &(\\mod p) \\end{aligned} \\] \u6700\u540e\u4e00\u6b65\u8fd9\u91cc\u6709\u8d1f\u6570\uff0c\u52a0\u4e00\u4e0b\uff08\u5982\u679c \\(x < 0\\) \uff0c\u5219 \\(x \\equiv p - x (\\mod p)\\) \uff09\uff1a \\[ inv(i)\\equiv (p - p/i) \\times inv(p \\mod i) (\\mod p) \\] \u4e8e\u662f\u5c31\u80fd\u7ebf\u6027\u9012\u63a8\u4e86\uff0c\u7ec4\u5408\u6570\u5565\u7684\u4e5f\u80fd\u6c42\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 const int mod = 998244353 ; int inv [ si ], fact [ si ], invf [ si ]; void init ( int n ) { inv [ 1 ] = 1 , fact [ 0 ] = invf [ 0 ] = 1 ; for ( int i = 2 ; i <= n ; ++ i ) inv [ i ] = 1l l * ( mod - mod / i ) * inv [ mod % i ] % mod ; for ( int i = 1 ; i <= n ; ++ i ) fact [ i ] = 1l l * fact [ i - 1 ] * i % mod , invf [ i ] = 1l l * invf [ i - 1 ] * inv [ i ] % mod ; } int C ( int n , int m ) { if ( m < 0 || n < m ) return 0 ; return 1l l * fact [ n ] * invf [ n - m ] % mod * invf [ m ] % mod ; } int Catalan ( int n ) { return 1l l * C ( n * 2 , n ) % mod * inv [ n + 1 ] % mod ; }","title":"comb problem black trees PC"},{"location":"rec/interesting/comb-problem-black-trees-PC/#_1","text":"","title":"\u4e00\u4e9b\u57fa\u672c\u6a21\u578b"},{"location":"rec/interesting/comb-problem-black-trees-PC/#_2","text":"Reference: lleozhang \u7684\u535a\u5ba2 \u6709\u533a\u522b\u597d\u6bd4\u505a\u6392\u5217\uff0c\u6ca1\u533a\u522b\u597d\u6bd4\u505a\u7ec4\u5408\u3002 \u9ed8\u8ba4 \\(n\\) \u4e2a\u5c0f\u7403\uff0c \\(m\\) \u4e2a\u76d2\u5b50\u3002 \u6216\u8005\u8bf4\uff0c\u5c0f\u7403\u6709\u533a\u522b\u53ef\u4ee5\u7406\u89e3\u6210\u6709 \\(n\\) \u4e2a\u4e0d\u540c\u5143\u7d20\uff0c\u4e00\u822c\u9700\u8981\u8003\u8651 \u5bf9\u4e8e\u6bcf\u4e2a\u5c0f\u7403\u90fd\u51b3\u7b56 \uff08\u4e00\u822c\u662f\u9012\u63a8\uff09\u3002 \u76d2\u5b50\u6709\u533a\u522b\u5219\u53ef\u4ee5\u7406\u89e3\u4e3a\uff0c\u5bf9\u4e8e\u67d0\u4e2a\u65b9\u7a0b\u6c42\u6709\u591a\u5c11\u7ec4\u89e3 \\(\\{x_i\\}\\) \uff0c\u5982\u679c\u5c0f\u7403\u6ca1\u6709\u533a\u522b\uff0c \\(x_i\\) \u5c31\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u5982\u679c\u5c0f\u7403\u6709\u533a\u522b\uff0c\u90a3\u4e48 \\(x_i\\) \u5c31\u662f\u4e00\u4e2a\u96c6\u5408\u3002 \u5141\u4e0d\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50\u5c31\u7b49\u4ef7\u4e8e \\(x_i\\) \u7684\u9650\u5236\u3002 \u6240\u4ee5\u5c0f\u7403\u6a21\u578b\u90fd\u53ef\u4ee5\u62bd\u8c61\u6210 \u5e7f\u4e49\u7684\u7ebf\u6027\u4e0d\u5b9a\u65b9\u7a0b\u7684\u89e3\u7684\u7ec4\u6570 \u3002","title":"\u5c0f\u7403\u6a21\u578b"},{"location":"rec/interesting/comb-problem-black-trees-PC/#_3","text":"\u76f4\u63a5\u8003\u8651\u76d2\u5b50\u4e0d\u592a\u597d\u8003\u8651\uff0c\u76f4\u63a5\u8003\u8651\u7403\uff0c \u6bcf\u4e2a\u5c0f\u7403\u6709 \\(m\\) \u79cd\u653e\u6cd5\uff0c\u4e58\u6cd5\u539f\u7406\u6709 \\(m^n\\) \u79cd\u53ef\u80fd\u3002","title":"\u5c0f\u7403\u6709\u533a\u522b\uff0c\u76d2\u5b50\u6709\u533a\u522b\uff0c\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50"},{"location":"rec/interesting/comb-problem-black-trees-PC/#_4","text":"\u8003\u8651\u8bbe\u51fd\u6570 \\(f(n, m)\\) \u8868\u793a \\(n\\) \u4e2a\u5c0f\u7403\u653e\u5230 \\(m\\) \u4e2a\u76d2\u5b50\u91cc\u7684\u65b9\u6848\u6570\u3002 \u53ef\u4ee5\u8003\u8651\u5f53\u524d\u5c0f\u7403\u653e\u5728\u54ea\u91cc\u53ef\u4ee5\u5f97\u5230\u9012\u63a8\u5f0f\uff1a \\(f(n,m) = m(f(n - 1, m) + f(n - 1, m - 1))\\) \u3002 \u5c31\u662f\u8003\u8651\u8fd9\u4e2a\u5c0f\u7403\u662f\u653e\u5230\u539f\u6765\u6709\u4e86\u7684\u8fd8\u662f\u653e\u5230\u4e00\u4e2a\u8fd8\u6ca1\u6709\u7403\u76d2\u5b50\u91cc\u9762\u3002 \u56e0\u4e3a\u76d2\u5b50\u4e0d\u540c\u6240\u4ee5\u8981\u4e58 \\(m\\) \u3002 \u8fb9\u754c\uff1a \\(n = m, f(n, m) = n!; m > n, f(n, m) = 0\\) \u3002","title":"\u5c0f\u7403\u6709\u533a\u522b\uff0c\u76d2\u5b50\u6709\u533a\u522b\uff0c\u4e0d\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50"},{"location":"rec/interesting/comb-problem-black-trees-PC/#_5","text":"\u548c \u300c\u5c0f\u7403\u6709\u533a\u522b\uff0c\u76d2\u5b50\u6709\u533a\u522b\uff0c\u4e0d\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50\u300d \u7c7b\u4f3c\u3002 \u8fd8\u662f\u8bbe \\(f(n, m)\\) \u8868\u793a \\(n\\) \u5c0f\u7403\u653e\u5230 \\(m\\) \u4e2a\u76d2\u5b50\u91cc\u7684\u65b9\u6848\u6570\u3002 \u7c7b\u6bd4\u4e0a\u9762\u53ef\u4ee5\u5f97\u5230\u9012\u63a8\u5f0f\uff1a \\(f(n, m) = mf(n - 1, m) + f(n - 1, m - 1)\\) \u3002 \u552f\u4e00\u7684\u533a\u522b\u662f\u76d2\u5b50\u4e0d\u540c\u3002 \u8fd9\u4e2a\u662f\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570 \\(\\begin{Bmatrix}n \\\\ m\\end{Bmatrix}\\) \u3002 \u5feb\u901f\u6c42\u4e0d\u4f1a\u3002","title":"\u5c0f\u7403\u6709\u533a\u522b\uff0c\u76d2\u5b50\u6ca1\u533a\u522b\uff0c\u4e0d\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50"},{"location":"rec/interesting/comb-problem-black-trees-PC/#_6","text":"\u7b80\u5355\u95ee\u9898\uff0c\u7528\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u8f6c\u5316\u4e00\u4e0b\uff0c\u8003\u8651\u5206\u522b\u653e\u5230 \\(k\\) \u4e2a\u76d2\u5b50\u5c31\u884c\u4e86\u3002 \\[ \\sum\\limits_{k = 1}^{m} \\begin{Bmatrix}n \\\\ k\\end{Bmatrix} \\]","title":"\u5c0f\u7403\u6709\u533a\u522b\uff0c\u76d2\u5b50\u6ca1\u533a\u522b\uff0c\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50"},{"location":"rec/interesting/comb-problem-black-trees-PC/#_7","text":"\u5c31\u662f\u63d2\u677f\u6cd5\u7684\u57fa\u7840\uff0c\u7b54\u6848 \\(\\dbinom{n - 1}{m - 1}\\) \u3002","title":"\u5c0f\u7403\u6ca1\u533a\u522b\uff0c\u76d2\u5b50\u6709\u533a\u522b\uff0c\u4e0d\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50"},{"location":"rec/interesting/comb-problem-black-trees-PC/#_8","text":"\u63d2\u677f\u6cd5\u516c\u5f0f\uff0c\u7b54\u6848 \\(\\dbinom{n + m - 1}{n}\\) \u3002","title":"\u5c0f\u7403\u6ca1\u533a\u522b\uff0c\u76d2\u5b50\u6709\u533a\u522b\uff0c\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50"},{"location":"rec/interesting/comb-problem-black-trees-PC/#_9","text":"\u8fd9\u4e2a\u662f\u5206\u62c6\u6570\uff0c\u8fd8\u4e0d\u4f1a","title":"\u5c0f\u7403\u6ca1\u533a\u522b\uff0c\u76d2\u5b50\u6ca1\u533a\u522b\uff0c\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50"},{"location":"rec/interesting/comb-problem-black-trees-PC/#_10","text":"\u5206\u62c6\u6570\u7684\u53d8\u79cd\u3002","title":"\u5c0f\u7403\u6ca1\u533a\u522b\uff0c\u76d2\u5b50\u6ca1\u533a\u522b\uff0c\u4e0d\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50"},{"location":"rec/interesting/comb-problem-black-trees-PC/#_11","text":"","title":"\u4e00\u4e9b\u6709\u610f\u601d\u7684\u9898"},{"location":"rec/interesting/comb-problem-black-trees-PC/#_12","text":"1 2 3 4 5 _________________ | | __E_ | | | A | __D_ | B | | | C | | ----------------- \u7ed9\u8fd9\u4e2a\u5730\u56fe\u4e0a\u8272\uff0c\u95ee\u65b9\u6848\u6570\u3002 \u5148\u8003\u8651\u786e\u5b9a A \u533a\u57df\u548c B \u533a\u57df\u7684\u989c\u8272\u662f\u5426\u76f8\u540c\u3002 \u56e0\u4e3a A\uff0cB \u533a\u57df\u7684\u989c\u8272\u51b3\u7b56\u4f1a\u5bfc\u81f4 E,C \u7684\u989c\u8272\u51b3\u7b56\u6570\u6539\u53d8\u3002 \u5982\u679c A, B \u540c\u8272\uff0c\u90a3\u4e48 D \u5c31\u6709 3 \u79cd\u65b9\u6848\uff0c\u7136\u540e E, C \u5c31\u5404\u6709 2 \u79cd\u65b9\u6848\uff0c\u7b54\u6848 \\(4\\times 1 \\times 3 \\times 2 \\times 2 = 48\\) \u3002 \u5982\u679c A, B \u4e0d\u540c\u8272\uff0c\u90a3\u4e48 D \u53ea\u6709 2 \u79cd\u65b9\u6848\uff0cE, C \u5404\u81ea\u53ea\u6709\u4e00\u79cd\uff0c\u7b54\u6848 \\(4 \\times 3 \\times 2 \\times 1 \\times 1 = 24\\) \u3002 \u6700\u7ec8\u7b54\u6848 \\(48 + 24 = 72\\) \u3002 \u8fd9\u91cc\u80fd\u62bd\u8c61\u51fa\u6765\u7684\u4e00\u4e2a\u5c0f Trick\uff1a \u6240\u4ee5\u5bf9\u4e8e\u8fd9\u79cd \u65b9\u6848\u6570\u95ee\u9898\uff0c\u5728\u67d0\u4e00\u4e2a\u51b3\u7b56\u4f1a\u5f71\u54cd\u4e4b\u540e\u7684\u51b3\u7b56\u6570\u91cf\u7684\u65f6\u5019\u5c31\u8981\u5206\u7c7b\u8ba8\u8bba \u3002","title":"\u4e00\u4e2a\u56db\u8272\u5b9a\u7406\u7684\u65b9\u6848\u6570\u8ba1\u6570"},{"location":"rec/interesting/comb-problem-black-trees-PC/#_13","text":"\u6254 \\(7\\) \u4e2a\u8d28\u5730\u5747\u5300\u7684\u9ab0\u5b50\uff0c\u51fa\u73b0\u548c\u4e3a \\(10\\) \u7684\u6982\u7387 \u4e3a \\(\\dfrac{n}{6^7}\\) \uff0c \\(n\\) \u5e94\u8be5\u7b49\u4e8e\u591a\u5c11\uff1f \u53ef\u4ee5\u8f6c\u5316\u4e3a\u63d2\u677f\u6cd5\uff0c\u7b54\u6848\u662f \\(\\dbinom{10 - 1}{7 - 1}\\) \uff0c\u56e0\u4e3a\u53d8\u91cf\u90fd\u662f \\(\\le 6\\) \u7684\uff0c\u591a\u4e86\u4e0d\u591f\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u8fd9\u4e48\u505a\u6ca1\u6709\u95ee\u9898\u3002","title":"\u4e00\u4e2a\u63d2\u677f\u6cd5\u7684\u5e94\u7528"},{"location":"rec/interesting/comb-problem-black-trees-PC/#_14","text":"\u5b9a\u4e49 \\(D(n)\\) \u8868\u793a\u5c06\u6b63\u6574\u6570 \\(n\\) \u5206\u89e3\u4e3a\u5982\u4e0b\u5f62\u5f0f\u7684\u65b9\u6848\u6570\uff1a \\(n = f_1 \\times f_2 \\times f_i \\dots\\) \uff0c\u5176\u4e2d \\(i \\ge 1, f_i \\ge 1\\) \uff0c \\((f_i, f_{j}); (f_j, f_i)\\) \u662f\u4e0d\u540c\u7684\u65b9\u6848\u3002 \u6c42 \\(D(96)\\) \u3002 \u9996\u5148\u53d1\u73b0 \\(96 = 2^5 \\times 3\\) \uff0c\u628a \\(3\\) \u62ff\u51fa\u6765\u5148\u4e0d\u7ba1\uff0c \u7136\u540e \\(2^5\\) \u663e\u7136\u53ef\u4ee5\u5206\u6210 \\(2^{c_1}, 2^{c_2},\\dots 2^{c_m}, m \\le 5, c_i \\ge 0\\) \u7136\u540e\u5bf9\u4e8e \\(m = i\\) \u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u628a \\(3\\) \u653e\u5230\u8fd9\u4e9b\u6570\u91cc\u9762\u63d2\u677f\uff08\u53ef\u4ee5\u662f\u5934\u5c3e\uff09\uff0c\u6216\u8005\u76f4\u63a5\u4e58\u5230\u8fd9\u4e9b\u6570\u4e0a\u9762\uff0c\u6240\u4ee5\u6b64\u65f6\u7684\u65b9\u6848\u6570\u662f \\((i + 1 + i) \\times i!\\) \uff0c\u56e0\u4e3a\u8fd8\u53ef\u4ee5\u5168\u6392\u5217\u3002 \u7136\u540e\u5c31\u53ea\u80fd\u5bf9\u4e8e\u6bcf\u4e2a\u60c5\u51b5\u786c\u7b97\u4e86\u3002\u3002\u3002\u3002\u3002","title":"\u53e6\u5916\u4e00\u4e2a\u63d2\u677f\u6cd5\u7684\u5e94\u7528"},{"location":"rec/interesting/comb-problem-black-trees-PC/#_15","text":"\u4e58\u6cd5\u9006\u5143\u7684\u5b9a\u4e49\u5927\u6982\u5c31\u662f\uff0c\u5982\u679c \\(a \\times inv \\equiv 1 (\\mod p)\\) \uff0c\u90a3\u4e48 \\(inv\\) \u5c31\u662f \\(a\\) \u5728\u6a21 \\(p\\) \u610f\u4e49\u4e0b\u7684\u4e58\u6cd5\u9006\u5143\uff0c\u4e00\u822c\u8bb0\u4f5c \\(a^{-1}\\) \u6216\u8005 \\(inv(a)\\) \u3002 \u6b63\u5e38\u6765\u8bf4\u5e94\u8be5\u7528\u7fa4\u8bba\u6765\u89e3\u91ca\u9006\u5143\u7684\u5b9a\u4e49\uff0c\u4f46\u662f\u6211\u61d2\uff0c\u4e0d\u60f3\u5199\u4e86\u3002 \u4f60\u53ef\u4ee5\u7406\u89e3\u6210 \\(a\\times a^{-1} \\equiv a\\times inv \\equiv1 (\\mod p)\\) \uff0c\u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5\u7528\u6765\u5904\u7406\u5e26\u53d6\u6a21\u7684\u9664\u6cd5\u3002 \u56e0\u4e3a\u52a0\u51cf\u4e58\u5728\u53d6\u6a21\u610f\u4e49\u4e0b\u90fd\u662f\u5c01\u95ed\u7684\uff0c\u4f46\u662f\u9664\u6cd5\u5c31\u6ca1\u6cd5\u5904\u7406\u3002 \u6240\u4ee5\u4e3a\u4e86\u8ba9\u9664\u6cd5\u5728\u53d6\u6a21\u610f\u4e49\u4e0b\u4e5f\u662f\u5c01\u95ed\u7684\uff0c\u6211\u4eec\u628a\u9664\u6cd5\u8f6c\u5316\u6210\u4e58\u4e0a\u5206\u6bcd\u7684\u4e58\u6cd5\u9006\u5143\u5373\u53ef\u3002 \u4e5f\u5c31\u662f\u8bf4 \\(\\dfrac{a}{b} \\equiv a\\times b^{-1} \\equiv a\\times inv(b) (\\mod p)\\) \u3002 \u6709\u4e00\u4e2a\u5c0f\u6ce8\u610f\u70b9\u662f\uff0c \\(inv(a)\\times inv(b) = inv(ab)\\) \uff0c\u8fd9\u4e2a\u4ece\u5b9a\u4e49\u4e0a\u7684\u5c01\u95ed\u6027\u5373\u53ef\u77e5\u9053\u3002 \u6c42\u6cd5\u53ef\u4ee5\u76f4\u63a5\u7528\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff1a \u5982\u679c \\(a,p\\) \u4e92\u8d28\uff0c\u5219 \\(a\\) \u5728\u6a21 \\(p\\) \u610f\u4e49\u4e0b\u7684\u9006\u5143\u662f \\(a^{p-2}\\) \uff0c\u5feb\u901f\u5e42\u5373\u53ef \\(O(\\log n)\\) \u6c42\uff0c\u8fd9\u91cc\u4e5f\u8bf4\u660e\u4e86\u53ea\u6709 \\(p\\) \u662f\u8d28\u6570\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u4efb\u610f\u7ed9\u5b9a\u7684\u503c\u57df\u5c0f\u4e8e \\(2p\\) \u7684\u5e8f\u5217\u90fd\u53ef\u4ee5\u6c42\u51fa\u9006\u5143\u3002 \u7136\u540e\u6211\u4eec\u5bf9\u4e8e\u4e00\u4e2a\u503c\u57df\u4e3a \\([1,n]\\) \u7684\u6570\u5217\uff0c\u6211\u4eec\u8981\u6c42\u51fa\u6bcf\u4e00\u9879\u5728 \\(\\mod p\\) \u610f\u4e49\u4e0b\u7684\u9006\u5143\uff08 \\(p\\) \u662f\u8d28\u6570\uff09\uff0c\u8fd9\u6837\u505a\u80af\u5b9a\u4e0d\u597d\u641e\uff0c\u6240\u4ee5\u8003\u8651\u4e00\u4e2a\u53ef\u4ee5\u7ebf\u6027\u9012\u63a8\u7684\u505a\u6cd5 \u9996\u5148\u4ee4 \\(r = i\\mod p\\) \uff0c\u4ee4 \\(\\lfloor p/i\\rfloor = k\\) \uff0c\u5373 \\(ki+r \\equiv 0(\\mod p)\\) \u3002 \u7136\u540e\u5c31\u662f\u79fb\u9879\uff0c\u628a \\(i\\) \u5355\u72ec\u7559\u4e00\u8fb9\uff0c\u53e6\u5916\u4e00\u8fb9\u662f\u4e00\u4e2a\u5c0f\u4e8e \\(i\\) \u7684\u6570\u7684\u9006\u5143\u7684\u5f62\u5f0f\u3002 \\[ \\begin{aligned} ki+r &\\equiv 0 &(\\mod p)\\\\ i &\\equiv \\dfrac{-r}{k} &(\\mod p)\\\\ i &\\equiv -r \\times inv(k) &(\\mod p)\\\\ i &\\equiv -inv(k)\\times r &(\\mod p)\\\\ inv(i) &\\equiv -k\\times inv(r) &(\\mod p)\\\\ inv(i) &\\equiv -\\lfloor p/i\\rfloor \\times inv(p \\mod i) &(\\mod p) \\end{aligned} \\] \u6700\u540e\u4e00\u6b65\u8fd9\u91cc\u6709\u8d1f\u6570\uff0c\u52a0\u4e00\u4e0b\uff08\u5982\u679c \\(x < 0\\) \uff0c\u5219 \\(x \\equiv p - x (\\mod p)\\) \uff09\uff1a \\[ inv(i)\\equiv (p - p/i) \\times inv(p \\mod i) (\\mod p) \\] \u4e8e\u662f\u5c31\u80fd\u7ebf\u6027\u9012\u63a8\u4e86\uff0c\u7ec4\u5408\u6570\u5565\u7684\u4e5f\u80fd\u6c42\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 const int mod = 998244353 ; int inv [ si ], fact [ si ], invf [ si ]; void init ( int n ) { inv [ 1 ] = 1 , fact [ 0 ] = invf [ 0 ] = 1 ; for ( int i = 2 ; i <= n ; ++ i ) inv [ i ] = 1l l * ( mod - mod / i ) * inv [ mod % i ] % mod ; for ( int i = 1 ; i <= n ; ++ i ) fact [ i ] = 1l l * fact [ i - 1 ] * i % mod , invf [ i ] = 1l l * invf [ i - 1 ] * inv [ i ] % mod ; } int C ( int n , int m ) { if ( m < 0 || n < m ) return 0 ; return 1l l * fact [ n ] * invf [ n - m ] % mod * invf [ m ] % mod ; } int Catalan ( int n ) { return 1l l * C ( n * 2 , n ) % mod * inv [ n + 1 ] % mod ; }","title":"\u7ebf\u6027\u6c42\u9006\u5143"},{"location":"rec/interesting/comb-problem/","text":"\u7b80\u5355\u8bb0\u5f55\u4e00\u4e9b\u9519\u8fc7\u7684 / Educational \u7684\u7ec4\u5408\u6570\u5b66\u95ee\u9898 / \u8ba1\u6570\u95ee\u9898\u3002 \u4e00\u4e9b\u57fa\u672c\u6a21\u578b \u03c8(\uff40\u2207\u00b4)\u03c8 \u5c0f\u7403\u6a21\u578b \u03c8(\uff40\u2207\u00b4)\u03c8 Reference: lleozhang \u7684\u535a\u5ba2 \u6709\u533a\u522b\u597d\u6bd4\u505a\u6392\u5217\uff0c\u6ca1\u533a\u522b\u597d\u6bd4\u505a\u7ec4\u5408\u3002 \u9ed8\u8ba4 \\(n\\) \u4e2a\u5c0f\u7403\uff0c \\(m\\) \u4e2a\u76d2\u5b50\u3002 \u6216\u8005\u8bf4\uff0c\u5c0f\u7403\u6709\u533a\u522b\u53ef\u4ee5\u7406\u89e3\u6210\u6709 \\(n\\) \u4e2a\u4e0d\u540c\u5143\u7d20\uff0c\u4e00\u822c\u9700\u8981\u8003\u8651 \u5bf9\u4e8e\u6bcf\u4e2a\u5c0f\u7403\u90fd\u51b3\u7b56 \uff08\u4e00\u822c\u662f\u9012\u63a8\uff09\u3002 \u76d2\u5b50\u6709\u533a\u522b\u5219\u53ef\u4ee5\u7406\u89e3\u4e3a\uff0c\u5bf9\u4e8e\u67d0\u4e2a\u65b9\u7a0b\u6c42\u6709\u591a\u5c11\u7ec4\u89e3 \\(\\{x_i\\}\\) \uff0c\u5982\u679c\u5c0f\u7403\u6ca1\u6709\u533a\u522b\uff0c \\(x_i\\) \u5c31\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u5982\u679c\u5c0f\u7403\u6709\u533a\u522b\uff0c\u90a3\u4e48 \\(x_i\\) \u5c31\u662f\u4e00\u4e2a\u96c6\u5408\u3002 \u5141\u4e0d\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50\u5c31\u7b49\u4ef7\u4e8e \\(x_i\\) \u7684\u9650\u5236\u3002 \u6240\u4ee5\u5c0f\u7403\u6a21\u578b\u90fd\u53ef\u4ee5\u62bd\u8c61\u6210 \u5e7f\u4e49\u7684\u7ebf\u6027\u4e0d\u5b9a\u65b9\u7a0b\u7684\u89e3\u7684\u7ec4\u6570 \u3002 \u5c0f\u7403\u6709\u533a\u522b\uff0c\u76d2\u5b50\u6709\u533a\u522b\uff0c\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50 \u03c8(\uff40\u2207\u00b4)\u03c8 \u76f4\u63a5\u8003\u8651\u76d2\u5b50\u4e0d\u592a\u597d\u8003\u8651\uff0c\u76f4\u63a5\u8003\u8651\u7403\uff0c \u6bcf\u4e2a\u5c0f\u7403\u6709 \\(m\\) \u79cd\u653e\u6cd5\uff0c\u4e58\u6cd5\u539f\u7406\u6709 \\(m^n\\) \u79cd\u53ef\u80fd\u3002 \u5c0f\u7403\u6709\u533a\u522b\uff0c\u76d2\u5b50\u6709\u533a\u522b\uff0c\u4e0d\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8003\u8651\u8bbe\u51fd\u6570 \\(f(n, m)\\) \u8868\u793a \\(n\\) \u4e2a\u5c0f\u7403\u653e\u5230 \\(m\\) \u4e2a\u76d2\u5b50\u91cc\u7684\u65b9\u6848\u6570\u3002 \u53ef\u4ee5\u8003\u8651\u5f53\u524d\u5c0f\u7403\u653e\u5728\u54ea\u91cc\u53ef\u4ee5\u5f97\u5230\u9012\u63a8\u5f0f\uff1a \\(f(n,m) = m(f(n - 1, m) + f(n - 1, m - 1))\\) \u3002 \u5c31\u662f\u8003\u8651\u8fd9\u4e2a\u5c0f\u7403\u662f\u653e\u5230\u539f\u6765\u6709\u4e86\u7684\u8fd8\u662f\u653e\u5230\u4e00\u4e2a\u8fd8\u6ca1\u6709\u7403\u76d2\u5b50\u91cc\u9762\u3002 \u56e0\u4e3a\u76d2\u5b50\u4e0d\u540c\u6240\u4ee5\u8981\u4e58 \\(m\\) \u3002 \u8fb9\u754c\uff1a \\(n = m, f(n, m) = n!; m > n, f(n, m) = 0\\) \u3002 \u5c0f\u7403\u6709\u533a\u522b\uff0c\u76d2\u5b50\u6ca1\u533a\u522b\uff0c\u4e0d\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50 \u03c8(\uff40\u2207\u00b4)\u03c8 \u548c \u300c\u5c0f\u7403\u6709\u533a\u522b\uff0c\u76d2\u5b50\u6709\u533a\u522b\uff0c\u4e0d\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50\u300d \u7c7b\u4f3c\u3002 \u8fd8\u662f\u8bbe \\(f(n, m)\\) \u8868\u793a \\(n\\) \u5c0f\u7403\u653e\u5230 \\(m\\) \u4e2a\u76d2\u5b50\u91cc\u7684\u65b9\u6848\u6570\u3002 \u7c7b\u6bd4\u4e0a\u9762\u53ef\u4ee5\u5f97\u5230\u9012\u63a8\u5f0f\uff1a \\(f(n, m) = mf(n - 1, m) + f(n - 1, m - 1)\\) \u3002 \u552f\u4e00\u7684\u533a\u522b\u662f\u76d2\u5b50\u4e0d\u540c\u3002 \u8fd9\u4e2a\u662f\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570 \\(\\begin{Bmatrix}n \\\\ m\\end{Bmatrix}\\) \u3002 \u5feb\u901f\u6c42\u4e0d\u4f1a\u3002 \u5c0f\u7403\u6709\u533a\u522b\uff0c\u76d2\u5b50\u6ca1\u533a\u522b\uff0c\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7b80\u5355\u95ee\u9898\uff0c\u7528\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u8f6c\u5316\u4e00\u4e0b\uff0c\u8003\u8651\u5206\u522b\u653e\u5230 \\(k\\) \u4e2a\u76d2\u5b50\u5c31\u884c\u4e86\u3002 \\[ \\sum\\limits_{k = 1}^{m} \\begin{Bmatrix}n \\\\ k\\end{Bmatrix} \\] \u5c0f\u7403\u6ca1\u533a\u522b\uff0c\u76d2\u5b50\u6709\u533a\u522b\uff0c\u4e0d\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5c31\u662f\u63d2\u677f\u6cd5\u7684\u57fa\u7840\uff0c\u7b54\u6848 \\(\\dbinom{n - 1}{m - 1}\\) \u3002 \u5c0f\u7403\u6ca1\u533a\u522b\uff0c\u76d2\u5b50\u6709\u533a\u522b\uff0c\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50 \u03c8(\uff40\u2207\u00b4)\u03c8 \u63d2\u677f\u6cd5\u516c\u5f0f\uff0c\u7b54\u6848 \\(\\dbinom{n + m - 1}{n}\\) \u3002 \u5c0f\u7403\u6ca1\u533a\u522b\uff0c\u76d2\u5b50\u6ca1\u533a\u522b\uff0c\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e2a\u662f\u5206\u62c6\u6570\uff0c\u8fd8\u4e0d\u4f1a \u5c0f\u7403\u6ca1\u533a\u522b\uff0c\u76d2\u5b50\u6ca1\u533a\u522b\uff0c\u4e0d\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5206\u62c6\u6570\u7684\u53d8\u79cd\u3002 \u4e00\u4e9b\u6709\u610f\u601d\u7684\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e00\u4e2a\u56db\u8272\u5b9a\u7406\u7684\u65b9\u6848\u6570\u8ba1\u6570 \u03c8(\uff40\u2207\u00b4)\u03c8 1 2 3 4 5 _________________ | | __E_ | | | A | __D_ | B | | | C | | ----------------- \u7ed9\u8fd9\u4e2a\u5730\u56fe\u4e0a\u8272\uff0c\u95ee\u65b9\u6848\u6570\u3002 \u5148\u8003\u8651\u786e\u5b9a A \u533a\u57df\u548c B \u533a\u57df\u7684\u989c\u8272\u662f\u5426\u76f8\u540c\u3002 \u56e0\u4e3a A\uff0cB \u533a\u57df\u7684\u989c\u8272\u51b3\u7b56\u4f1a\u5bfc\u81f4 E,C \u7684\u989c\u8272\u51b3\u7b56\u6570\u6539\u53d8\u3002 \u5982\u679c A, B \u540c\u8272\uff0c\u90a3\u4e48 D \u5c31\u6709 3 \u79cd\u65b9\u6848\uff0c\u7136\u540e E, C \u5c31\u5404\u6709 2 \u79cd\u65b9\u6848\uff0c\u7b54\u6848 \\(4\\times 1 \\times 3 \\times 2 \\times 2 = 48\\) \u3002 \u5982\u679c A, B \u4e0d\u540c\u8272\uff0c\u90a3\u4e48 D \u53ea\u6709 2 \u79cd\u65b9\u6848\uff0cE, C \u5404\u81ea\u53ea\u6709\u4e00\u79cd\uff0c\u7b54\u6848 \\(4 \\times 3 \\times 2 \\times 1 \\times 1 = 24\\) \u3002 \u6700\u7ec8\u7b54\u6848 \\(48 + 24 = 72\\) \u3002 \u8fd9\u91cc\u80fd\u62bd\u8c61\u51fa\u6765\u7684\u4e00\u4e2a\u5c0f Trick\uff1a \u6240\u4ee5\u5bf9\u4e8e\u8fd9\u79cd \u65b9\u6848\u6570\u95ee\u9898\uff0c\u5728\u67d0\u4e00\u4e2a\u51b3\u7b56\u4f1a\u5f71\u54cd\u4e4b\u540e\u7684\u51b3\u7b56\u6570\u91cf\u7684\u65f6\u5019\u5c31\u8981\u5206\u7c7b\u8ba8\u8bba \u3002 \u4e00\u4e2a\u63d2\u677f\u6cd5\u7684\u5e94\u7528 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6254 \\(7\\) \u4e2a\u8d28\u5730\u5747\u5300\u7684\u9ab0\u5b50\uff0c\u51fa\u73b0\u548c\u4e3a \\(10\\) \u7684\u6982\u7387 \u4e3a \\(\\dfrac{n}{6^7}\\) \uff0c \\(n\\) \u5e94\u8be5\u7b49\u4e8e\u591a\u5c11\uff1f \u53ef\u4ee5\u8f6c\u5316\u4e3a\u63d2\u677f\u6cd5\uff0c\u7b54\u6848\u662f \\(\\dbinom{10 - 1}{7 - 1}\\) \uff0c\u56e0\u4e3a\u53d8\u91cf\u90fd\u662f \\(\\le 6\\) \u7684\uff0c\u591a\u4e86\u4e0d\u591f\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u8fd9\u4e48\u505a\u6ca1\u6709\u95ee\u9898\u3002 \u53e6\u5916\u4e00\u4e2a\u63d2\u677f\u6cd5\u7684\u5e94\u7528 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5b9a\u4e49 \\(D(n)\\) \u8868\u793a\u5c06\u6b63\u6574\u6570 \\(n\\) \u5206\u89e3\u4e3a\u5982\u4e0b\u5f62\u5f0f\u7684\u65b9\u6848\u6570\uff1a \\(n = f_1 \\times f_2 \\times f_i \\dots\\) \uff0c\u5176\u4e2d \\(i \\ge 1, f_i \\ge 1\\) \uff0c \\((f_i, f_{j}); (f_j, f_i)\\) \u662f\u4e0d\u540c\u7684\u65b9\u6848\u3002 \u6c42 \\(D(96)\\) \u3002 \u9996\u5148\u53d1\u73b0 \\(96 = 2^5 \\times 3\\) \uff0c\u628a \\(3\\) \u62ff\u51fa\u6765\u5148\u4e0d\u7ba1\uff0c \u7136\u540e \\(2^5\\) \u663e\u7136\u53ef\u4ee5\u5206\u6210 \\(2^{c_1}, 2^{c_2},\\dots 2^{c_m}, m \\le 5, c_i \\ge 0\\) \u7136\u540e\u5bf9\u4e8e \\(m = i\\) \u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u628a \\(3\\) \u653e\u5230\u8fd9\u4e9b\u6570\u91cc\u9762\u63d2\u677f\uff08\u53ef\u4ee5\u662f\u5934\u5c3e\uff09\uff0c\u6216\u8005\u76f4\u63a5\u4e58\u5230\u8fd9\u4e9b\u6570\u4e0a\u9762\uff0c\u6240\u4ee5\u6b64\u65f6\u7684\u65b9\u6848\u6570\u662f \\((i + 1 + i) \\times i!\\) \uff0c\u56e0\u4e3a\u8fd8\u53ef\u4ee5\u5168\u6392\u5217\u3002 \u7136\u540e\u5c31\u53ea\u80fd\u5bf9\u4e8e\u6bcf\u4e2a\u60c5\u51b5\u786c\u7b97\u4e86\u3002\u3002\u3002\u3002\u3002 \u7ebf\u6027\u6c42\u9006\u5143 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e58\u6cd5\u9006\u5143\u7684\u5b9a\u4e49\u5927\u6982\u5c31\u662f\uff0c\u5982\u679c \\(a \\times inv \\equiv 1 (\\mod p)\\) \uff0c\u90a3\u4e48 \\(inv\\) \u5c31\u662f \\(a\\) \u5728\u6a21 \\(p\\) \u610f\u4e49\u4e0b\u7684\u4e58\u6cd5\u9006\u5143\uff0c\u4e00\u822c\u8bb0\u4f5c \\(a^{-1}\\) \u6216\u8005 \\(inv(a)\\) \u3002 \u6b63\u5e38\u6765\u8bf4\u5e94\u8be5\u7528\u7fa4\u8bba\u6765\u89e3\u91ca\u9006\u5143\u7684\u5b9a\u4e49\uff0c\u4f46\u662f\u6211\u61d2\uff0c\u4e0d\u60f3\u5199\u4e86\u3002 \u4f60\u53ef\u4ee5\u7406\u89e3\u6210 \\(a\\times a^{-1} \\equiv a\\times inv \\equiv1 (\\mod p)\\) \uff0c\u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5\u7528\u6765\u5904\u7406\u5e26\u53d6\u6a21\u7684\u9664\u6cd5\u3002 \u56e0\u4e3a\u52a0\u51cf\u4e58\u5728\u53d6\u6a21\u610f\u4e49\u4e0b\u90fd\u662f\u5c01\u95ed\u7684\uff0c\u4f46\u662f\u9664\u6cd5\u5c31\u6ca1\u6cd5\u5904\u7406\u3002 \u6240\u4ee5\u4e3a\u4e86\u8ba9\u9664\u6cd5\u5728\u53d6\u6a21\u610f\u4e49\u4e0b\u4e5f\u662f\u5c01\u95ed\u7684\uff0c\u6211\u4eec\u628a\u9664\u6cd5\u8f6c\u5316\u6210\u4e58\u4e0a\u5206\u6bcd\u7684\u4e58\u6cd5\u9006\u5143\u5373\u53ef\u3002 \u4e5f\u5c31\u662f\u8bf4 \\(\\dfrac{a}{b} \\equiv a\\times b^{-1} \\equiv a\\times inv(b) (\\mod p)\\) \u3002 \u6709\u4e00\u4e2a\u5c0f\u6ce8\u610f\u70b9\u662f\uff0c \\(inv(a)\\times inv(b) = inv(ab)\\) \uff0c\u8fd9\u4e2a\u4ece\u5b9a\u4e49\u4e0a\u7684\u5c01\u95ed\u6027\u5373\u53ef\u77e5\u9053\u3002 \u6c42\u6cd5\u53ef\u4ee5\u76f4\u63a5\u7528\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff1a \u5982\u679c \\(a,p\\) \u4e92\u8d28\uff0c\u5219 \\(a\\) \u5728\u6a21 \\(p\\) \u610f\u4e49\u4e0b\u7684\u9006\u5143\u662f \\(a^{p-2}\\) \uff0c\u5feb\u901f\u5e42\u5373\u53ef \\(O(\\log n)\\) \u6c42\uff0c\u8fd9\u91cc\u4e5f\u8bf4\u660e\u4e86\u53ea\u6709 \\(p\\) \u662f\u8d28\u6570\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u4efb\u610f\u7ed9\u5b9a\u7684\u503c\u57df\u5c0f\u4e8e \\(2p\\) \u7684\u5e8f\u5217\u90fd\u53ef\u4ee5\u6c42\u51fa\u9006\u5143\u3002 \u7136\u540e\u6211\u4eec\u5bf9\u4e8e\u4e00\u4e2a\u503c\u57df\u4e3a \\([1,n]\\) \u7684\u6570\u5217\uff0c\u6211\u4eec\u8981\u6c42\u51fa\u6bcf\u4e00\u9879\u5728 \\(\\mod p\\) \u610f\u4e49\u4e0b\u7684\u9006\u5143\uff08 \\(p\\) \u662f\u8d28\u6570\uff09\uff0c\u8fd9\u6837\u505a\u80af\u5b9a\u4e0d\u597d\u641e\uff0c\u6240\u4ee5\u8003\u8651\u4e00\u4e2a\u53ef\u4ee5\u7ebf\u6027\u9012\u63a8\u7684\u505a\u6cd5 \u9996\u5148\u4ee4 \\(r = i\\mod p\\) \uff0c\u4ee4 \\(\\lfloor p/i\\rfloor = k\\) \uff0c\u5373 \\(ki+r \\equiv 0(\\mod p)\\) \u3002 \u7136\u540e\u5c31\u662f\u79fb\u9879\uff0c\u628a \\(i\\) \u5355\u72ec\u7559\u4e00\u8fb9\uff0c\u53e6\u5916\u4e00\u8fb9\u662f\u4e00\u4e2a\u5c0f\u4e8e \\(i\\) \u7684\u6570\u7684\u9006\u5143\u7684\u5f62\u5f0f\u3002 \\[ \\begin{aligned} ki+r &\\equiv 0 &(\\mod p)\\\\ i &\\equiv \\dfrac{-r}{k} &(\\mod p)\\\\ i &\\equiv -r \\times inv(k) &(\\mod p)\\\\ i &\\equiv -inv(k)\\times r &(\\mod p)\\\\ inv(i) &\\equiv -k\\times inv(r) &(\\mod p)\\\\ inv(i) &\\equiv -\\lfloor p/i\\rfloor \\times inv(p \\mod i) &(\\mod p) \\end{aligned} \\] \u6700\u540e\u4e00\u6b65\u8fd9\u91cc\u6709\u8d1f\u6570\uff0c\u52a0\u4e00\u4e0b\uff08\u5982\u679c \\(x < 0\\) \uff0c\u5219 \\(x \\equiv p - x (\\mod p)\\) \uff09\uff1a \\[ inv(i)\\equiv (p - p/i) \\times inv(p \\mod i) (\\mod p) \\] \u4e8e\u662f\u5c31\u80fd\u7ebf\u6027\u9012\u63a8\u4e86\uff0c\u7ec4\u5408\u6570\u5565\u7684\u4e5f\u80fd\u6c42\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 const int mod = 998244353 ; int inv [ si ], fact [ si ], invf [ si ]; void init ( int n ) { inv [ 1 ] = 1 , fact [ 0 ] = invf [ 0 ] = 1 ; for ( int i = 2 ; i <= n ; ++ i ) inv [ i ] = 1l l * ( mod - mod / i ) * inv [ mod % i ] % mod ; for ( int i = 1 ; i <= n ; ++ i ) fact [ i ] = 1l l * fact [ i - 1 ] * i % mod , invf [ i ] = 1l l * invf [ i - 1 ] * inv [ i ] % mod ; } int C ( int n , int m ) { if ( m < 0 || n < m ) return 0 ; return 1l l * fact [ n ] * invf [ n - m ] % mod * invf [ m ] % mod ; } int Catalan ( int n ) { return 1l l * C ( n * 2 , n ) % mod * inv [ n + 1 ] % mod ; }","title":"\u5173\u4e8e\u7ec4\u5408\u6570\u5b66\u548c\u8ba1\u6570\u7684\u4e00\u4e9b\u5c0f\u95ee\u9898"},{"location":"rec/interesting/comb-problem/#_1","text":"","title":"\u4e00\u4e9b\u57fa\u672c\u6a21\u578b"},{"location":"rec/interesting/comb-problem/#_2","text":"Reference: lleozhang \u7684\u535a\u5ba2 \u6709\u533a\u522b\u597d\u6bd4\u505a\u6392\u5217\uff0c\u6ca1\u533a\u522b\u597d\u6bd4\u505a\u7ec4\u5408\u3002 \u9ed8\u8ba4 \\(n\\) \u4e2a\u5c0f\u7403\uff0c \\(m\\) \u4e2a\u76d2\u5b50\u3002 \u6216\u8005\u8bf4\uff0c\u5c0f\u7403\u6709\u533a\u522b\u53ef\u4ee5\u7406\u89e3\u6210\u6709 \\(n\\) \u4e2a\u4e0d\u540c\u5143\u7d20\uff0c\u4e00\u822c\u9700\u8981\u8003\u8651 \u5bf9\u4e8e\u6bcf\u4e2a\u5c0f\u7403\u90fd\u51b3\u7b56 \uff08\u4e00\u822c\u662f\u9012\u63a8\uff09\u3002 \u76d2\u5b50\u6709\u533a\u522b\u5219\u53ef\u4ee5\u7406\u89e3\u4e3a\uff0c\u5bf9\u4e8e\u67d0\u4e2a\u65b9\u7a0b\u6c42\u6709\u591a\u5c11\u7ec4\u89e3 \\(\\{x_i\\}\\) \uff0c\u5982\u679c\u5c0f\u7403\u6ca1\u6709\u533a\u522b\uff0c \\(x_i\\) \u5c31\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u5982\u679c\u5c0f\u7403\u6709\u533a\u522b\uff0c\u90a3\u4e48 \\(x_i\\) \u5c31\u662f\u4e00\u4e2a\u96c6\u5408\u3002 \u5141\u4e0d\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50\u5c31\u7b49\u4ef7\u4e8e \\(x_i\\) \u7684\u9650\u5236\u3002 \u6240\u4ee5\u5c0f\u7403\u6a21\u578b\u90fd\u53ef\u4ee5\u62bd\u8c61\u6210 \u5e7f\u4e49\u7684\u7ebf\u6027\u4e0d\u5b9a\u65b9\u7a0b\u7684\u89e3\u7684\u7ec4\u6570 \u3002","title":"\u5c0f\u7403\u6a21\u578b"},{"location":"rec/interesting/comb-problem/#_3","text":"\u76f4\u63a5\u8003\u8651\u76d2\u5b50\u4e0d\u592a\u597d\u8003\u8651\uff0c\u76f4\u63a5\u8003\u8651\u7403\uff0c \u6bcf\u4e2a\u5c0f\u7403\u6709 \\(m\\) \u79cd\u653e\u6cd5\uff0c\u4e58\u6cd5\u539f\u7406\u6709 \\(m^n\\) \u79cd\u53ef\u80fd\u3002","title":"\u5c0f\u7403\u6709\u533a\u522b\uff0c\u76d2\u5b50\u6709\u533a\u522b\uff0c\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50"},{"location":"rec/interesting/comb-problem/#_4","text":"\u8003\u8651\u8bbe\u51fd\u6570 \\(f(n, m)\\) \u8868\u793a \\(n\\) \u4e2a\u5c0f\u7403\u653e\u5230 \\(m\\) \u4e2a\u76d2\u5b50\u91cc\u7684\u65b9\u6848\u6570\u3002 \u53ef\u4ee5\u8003\u8651\u5f53\u524d\u5c0f\u7403\u653e\u5728\u54ea\u91cc\u53ef\u4ee5\u5f97\u5230\u9012\u63a8\u5f0f\uff1a \\(f(n,m) = m(f(n - 1, m) + f(n - 1, m - 1))\\) \u3002 \u5c31\u662f\u8003\u8651\u8fd9\u4e2a\u5c0f\u7403\u662f\u653e\u5230\u539f\u6765\u6709\u4e86\u7684\u8fd8\u662f\u653e\u5230\u4e00\u4e2a\u8fd8\u6ca1\u6709\u7403\u76d2\u5b50\u91cc\u9762\u3002 \u56e0\u4e3a\u76d2\u5b50\u4e0d\u540c\u6240\u4ee5\u8981\u4e58 \\(m\\) \u3002 \u8fb9\u754c\uff1a \\(n = m, f(n, m) = n!; m > n, f(n, m) = 0\\) \u3002","title":"\u5c0f\u7403\u6709\u533a\u522b\uff0c\u76d2\u5b50\u6709\u533a\u522b\uff0c\u4e0d\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50"},{"location":"rec/interesting/comb-problem/#_5","text":"\u548c \u300c\u5c0f\u7403\u6709\u533a\u522b\uff0c\u76d2\u5b50\u6709\u533a\u522b\uff0c\u4e0d\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50\u300d \u7c7b\u4f3c\u3002 \u8fd8\u662f\u8bbe \\(f(n, m)\\) \u8868\u793a \\(n\\) \u5c0f\u7403\u653e\u5230 \\(m\\) \u4e2a\u76d2\u5b50\u91cc\u7684\u65b9\u6848\u6570\u3002 \u7c7b\u6bd4\u4e0a\u9762\u53ef\u4ee5\u5f97\u5230\u9012\u63a8\u5f0f\uff1a \\(f(n, m) = mf(n - 1, m) + f(n - 1, m - 1)\\) \u3002 \u552f\u4e00\u7684\u533a\u522b\u662f\u76d2\u5b50\u4e0d\u540c\u3002 \u8fd9\u4e2a\u662f\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570 \\(\\begin{Bmatrix}n \\\\ m\\end{Bmatrix}\\) \u3002 \u5feb\u901f\u6c42\u4e0d\u4f1a\u3002","title":"\u5c0f\u7403\u6709\u533a\u522b\uff0c\u76d2\u5b50\u6ca1\u533a\u522b\uff0c\u4e0d\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50"},{"location":"rec/interesting/comb-problem/#_6","text":"\u7b80\u5355\u95ee\u9898\uff0c\u7528\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u8f6c\u5316\u4e00\u4e0b\uff0c\u8003\u8651\u5206\u522b\u653e\u5230 \\(k\\) \u4e2a\u76d2\u5b50\u5c31\u884c\u4e86\u3002 \\[ \\sum\\limits_{k = 1}^{m} \\begin{Bmatrix}n \\\\ k\\end{Bmatrix} \\]","title":"\u5c0f\u7403\u6709\u533a\u522b\uff0c\u76d2\u5b50\u6ca1\u533a\u522b\uff0c\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50"},{"location":"rec/interesting/comb-problem/#_7","text":"\u5c31\u662f\u63d2\u677f\u6cd5\u7684\u57fa\u7840\uff0c\u7b54\u6848 \\(\\dbinom{n - 1}{m - 1}\\) \u3002","title":"\u5c0f\u7403\u6ca1\u533a\u522b\uff0c\u76d2\u5b50\u6709\u533a\u522b\uff0c\u4e0d\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50"},{"location":"rec/interesting/comb-problem/#_8","text":"\u63d2\u677f\u6cd5\u516c\u5f0f\uff0c\u7b54\u6848 \\(\\dbinom{n + m - 1}{n}\\) \u3002","title":"\u5c0f\u7403\u6ca1\u533a\u522b\uff0c\u76d2\u5b50\u6709\u533a\u522b\uff0c\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50"},{"location":"rec/interesting/comb-problem/#_9","text":"\u8fd9\u4e2a\u662f\u5206\u62c6\u6570\uff0c\u8fd8\u4e0d\u4f1a","title":"\u5c0f\u7403\u6ca1\u533a\u522b\uff0c\u76d2\u5b50\u6ca1\u533a\u522b\uff0c\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50"},{"location":"rec/interesting/comb-problem/#_10","text":"\u5206\u62c6\u6570\u7684\u53d8\u79cd\u3002","title":"\u5c0f\u7403\u6ca1\u533a\u522b\uff0c\u76d2\u5b50\u6ca1\u533a\u522b\uff0c\u4e0d\u5141\u8bb8\u6709\u7a7a\u76d2\u5b50"},{"location":"rec/interesting/comb-problem/#_11","text":"","title":"\u4e00\u4e9b\u6709\u610f\u601d\u7684\u9898"},{"location":"rec/interesting/comb-problem/#_12","text":"1 2 3 4 5 _________________ | | __E_ | | | A | __D_ | B | | | C | | ----------------- \u7ed9\u8fd9\u4e2a\u5730\u56fe\u4e0a\u8272\uff0c\u95ee\u65b9\u6848\u6570\u3002 \u5148\u8003\u8651\u786e\u5b9a A \u533a\u57df\u548c B \u533a\u57df\u7684\u989c\u8272\u662f\u5426\u76f8\u540c\u3002 \u56e0\u4e3a A\uff0cB \u533a\u57df\u7684\u989c\u8272\u51b3\u7b56\u4f1a\u5bfc\u81f4 E,C \u7684\u989c\u8272\u51b3\u7b56\u6570\u6539\u53d8\u3002 \u5982\u679c A, B \u540c\u8272\uff0c\u90a3\u4e48 D \u5c31\u6709 3 \u79cd\u65b9\u6848\uff0c\u7136\u540e E, C \u5c31\u5404\u6709 2 \u79cd\u65b9\u6848\uff0c\u7b54\u6848 \\(4\\times 1 \\times 3 \\times 2 \\times 2 = 48\\) \u3002 \u5982\u679c A, B \u4e0d\u540c\u8272\uff0c\u90a3\u4e48 D \u53ea\u6709 2 \u79cd\u65b9\u6848\uff0cE, C \u5404\u81ea\u53ea\u6709\u4e00\u79cd\uff0c\u7b54\u6848 \\(4 \\times 3 \\times 2 \\times 1 \\times 1 = 24\\) \u3002 \u6700\u7ec8\u7b54\u6848 \\(48 + 24 = 72\\) \u3002 \u8fd9\u91cc\u80fd\u62bd\u8c61\u51fa\u6765\u7684\u4e00\u4e2a\u5c0f Trick\uff1a \u6240\u4ee5\u5bf9\u4e8e\u8fd9\u79cd \u65b9\u6848\u6570\u95ee\u9898\uff0c\u5728\u67d0\u4e00\u4e2a\u51b3\u7b56\u4f1a\u5f71\u54cd\u4e4b\u540e\u7684\u51b3\u7b56\u6570\u91cf\u7684\u65f6\u5019\u5c31\u8981\u5206\u7c7b\u8ba8\u8bba \u3002","title":"\u4e00\u4e2a\u56db\u8272\u5b9a\u7406\u7684\u65b9\u6848\u6570\u8ba1\u6570"},{"location":"rec/interesting/comb-problem/#_13","text":"\u6254 \\(7\\) \u4e2a\u8d28\u5730\u5747\u5300\u7684\u9ab0\u5b50\uff0c\u51fa\u73b0\u548c\u4e3a \\(10\\) \u7684\u6982\u7387 \u4e3a \\(\\dfrac{n}{6^7}\\) \uff0c \\(n\\) \u5e94\u8be5\u7b49\u4e8e\u591a\u5c11\uff1f \u53ef\u4ee5\u8f6c\u5316\u4e3a\u63d2\u677f\u6cd5\uff0c\u7b54\u6848\u662f \\(\\dbinom{10 - 1}{7 - 1}\\) \uff0c\u56e0\u4e3a\u53d8\u91cf\u90fd\u662f \\(\\le 6\\) \u7684\uff0c\u591a\u4e86\u4e0d\u591f\u4e86\uff0c\u6240\u4ee5\u76f4\u63a5\u8fd9\u4e48\u505a\u6ca1\u6709\u95ee\u9898\u3002","title":"\u4e00\u4e2a\u63d2\u677f\u6cd5\u7684\u5e94\u7528"},{"location":"rec/interesting/comb-problem/#_14","text":"\u5b9a\u4e49 \\(D(n)\\) \u8868\u793a\u5c06\u6b63\u6574\u6570 \\(n\\) \u5206\u89e3\u4e3a\u5982\u4e0b\u5f62\u5f0f\u7684\u65b9\u6848\u6570\uff1a \\(n = f_1 \\times f_2 \\times f_i \\dots\\) \uff0c\u5176\u4e2d \\(i \\ge 1, f_i \\ge 1\\) \uff0c \\((f_i, f_{j}); (f_j, f_i)\\) \u662f\u4e0d\u540c\u7684\u65b9\u6848\u3002 \u6c42 \\(D(96)\\) \u3002 \u9996\u5148\u53d1\u73b0 \\(96 = 2^5 \\times 3\\) \uff0c\u628a \\(3\\) \u62ff\u51fa\u6765\u5148\u4e0d\u7ba1\uff0c \u7136\u540e \\(2^5\\) \u663e\u7136\u53ef\u4ee5\u5206\u6210 \\(2^{c_1}, 2^{c_2},\\dots 2^{c_m}, m \\le 5, c_i \\ge 0\\) \u7136\u540e\u5bf9\u4e8e \\(m = i\\) \u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u628a \\(3\\) \u653e\u5230\u8fd9\u4e9b\u6570\u91cc\u9762\u63d2\u677f\uff08\u53ef\u4ee5\u662f\u5934\u5c3e\uff09\uff0c\u6216\u8005\u76f4\u63a5\u4e58\u5230\u8fd9\u4e9b\u6570\u4e0a\u9762\uff0c\u6240\u4ee5\u6b64\u65f6\u7684\u65b9\u6848\u6570\u662f \\((i + 1 + i) \\times i!\\) \uff0c\u56e0\u4e3a\u8fd8\u53ef\u4ee5\u5168\u6392\u5217\u3002 \u7136\u540e\u5c31\u53ea\u80fd\u5bf9\u4e8e\u6bcf\u4e2a\u60c5\u51b5\u786c\u7b97\u4e86\u3002\u3002\u3002\u3002\u3002","title":"\u53e6\u5916\u4e00\u4e2a\u63d2\u677f\u6cd5\u7684\u5e94\u7528"},{"location":"rec/interesting/comb-problem/#_15","text":"\u4e58\u6cd5\u9006\u5143\u7684\u5b9a\u4e49\u5927\u6982\u5c31\u662f\uff0c\u5982\u679c \\(a \\times inv \\equiv 1 (\\mod p)\\) \uff0c\u90a3\u4e48 \\(inv\\) \u5c31\u662f \\(a\\) \u5728\u6a21 \\(p\\) \u610f\u4e49\u4e0b\u7684\u4e58\u6cd5\u9006\u5143\uff0c\u4e00\u822c\u8bb0\u4f5c \\(a^{-1}\\) \u6216\u8005 \\(inv(a)\\) \u3002 \u6b63\u5e38\u6765\u8bf4\u5e94\u8be5\u7528\u7fa4\u8bba\u6765\u89e3\u91ca\u9006\u5143\u7684\u5b9a\u4e49\uff0c\u4f46\u662f\u6211\u61d2\uff0c\u4e0d\u60f3\u5199\u4e86\u3002 \u4f60\u53ef\u4ee5\u7406\u89e3\u6210 \\(a\\times a^{-1} \\equiv a\\times inv \\equiv1 (\\mod p)\\) \uff0c\u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5\u7528\u6765\u5904\u7406\u5e26\u53d6\u6a21\u7684\u9664\u6cd5\u3002 \u56e0\u4e3a\u52a0\u51cf\u4e58\u5728\u53d6\u6a21\u610f\u4e49\u4e0b\u90fd\u662f\u5c01\u95ed\u7684\uff0c\u4f46\u662f\u9664\u6cd5\u5c31\u6ca1\u6cd5\u5904\u7406\u3002 \u6240\u4ee5\u4e3a\u4e86\u8ba9\u9664\u6cd5\u5728\u53d6\u6a21\u610f\u4e49\u4e0b\u4e5f\u662f\u5c01\u95ed\u7684\uff0c\u6211\u4eec\u628a\u9664\u6cd5\u8f6c\u5316\u6210\u4e58\u4e0a\u5206\u6bcd\u7684\u4e58\u6cd5\u9006\u5143\u5373\u53ef\u3002 \u4e5f\u5c31\u662f\u8bf4 \\(\\dfrac{a}{b} \\equiv a\\times b^{-1} \\equiv a\\times inv(b) (\\mod p)\\) \u3002 \u6709\u4e00\u4e2a\u5c0f\u6ce8\u610f\u70b9\u662f\uff0c \\(inv(a)\\times inv(b) = inv(ab)\\) \uff0c\u8fd9\u4e2a\u4ece\u5b9a\u4e49\u4e0a\u7684\u5c01\u95ed\u6027\u5373\u53ef\u77e5\u9053\u3002 \u6c42\u6cd5\u53ef\u4ee5\u76f4\u63a5\u7528\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff1a \u5982\u679c \\(a,p\\) \u4e92\u8d28\uff0c\u5219 \\(a\\) \u5728\u6a21 \\(p\\) \u610f\u4e49\u4e0b\u7684\u9006\u5143\u662f \\(a^{p-2}\\) \uff0c\u5feb\u901f\u5e42\u5373\u53ef \\(O(\\log n)\\) \u6c42\uff0c\u8fd9\u91cc\u4e5f\u8bf4\u660e\u4e86\u53ea\u6709 \\(p\\) \u662f\u8d28\u6570\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u4efb\u610f\u7ed9\u5b9a\u7684\u503c\u57df\u5c0f\u4e8e \\(2p\\) \u7684\u5e8f\u5217\u90fd\u53ef\u4ee5\u6c42\u51fa\u9006\u5143\u3002 \u7136\u540e\u6211\u4eec\u5bf9\u4e8e\u4e00\u4e2a\u503c\u57df\u4e3a \\([1,n]\\) \u7684\u6570\u5217\uff0c\u6211\u4eec\u8981\u6c42\u51fa\u6bcf\u4e00\u9879\u5728 \\(\\mod p\\) \u610f\u4e49\u4e0b\u7684\u9006\u5143\uff08 \\(p\\) \u662f\u8d28\u6570\uff09\uff0c\u8fd9\u6837\u505a\u80af\u5b9a\u4e0d\u597d\u641e\uff0c\u6240\u4ee5\u8003\u8651\u4e00\u4e2a\u53ef\u4ee5\u7ebf\u6027\u9012\u63a8\u7684\u505a\u6cd5 \u9996\u5148\u4ee4 \\(r = i\\mod p\\) \uff0c\u4ee4 \\(\\lfloor p/i\\rfloor = k\\) \uff0c\u5373 \\(ki+r \\equiv 0(\\mod p)\\) \u3002 \u7136\u540e\u5c31\u662f\u79fb\u9879\uff0c\u628a \\(i\\) \u5355\u72ec\u7559\u4e00\u8fb9\uff0c\u53e6\u5916\u4e00\u8fb9\u662f\u4e00\u4e2a\u5c0f\u4e8e \\(i\\) \u7684\u6570\u7684\u9006\u5143\u7684\u5f62\u5f0f\u3002 \\[ \\begin{aligned} ki+r &\\equiv 0 &(\\mod p)\\\\ i &\\equiv \\dfrac{-r}{k} &(\\mod p)\\\\ i &\\equiv -r \\times inv(k) &(\\mod p)\\\\ i &\\equiv -inv(k)\\times r &(\\mod p)\\\\ inv(i) &\\equiv -k\\times inv(r) &(\\mod p)\\\\ inv(i) &\\equiv -\\lfloor p/i\\rfloor \\times inv(p \\mod i) &(\\mod p) \\end{aligned} \\] \u6700\u540e\u4e00\u6b65\u8fd9\u91cc\u6709\u8d1f\u6570\uff0c\u52a0\u4e00\u4e0b\uff08\u5982\u679c \\(x < 0\\) \uff0c\u5219 \\(x \\equiv p - x (\\mod p)\\) \uff09\uff1a \\[ inv(i)\\equiv (p - p/i) \\times inv(p \\mod i) (\\mod p) \\] \u4e8e\u662f\u5c31\u80fd\u7ebf\u6027\u9012\u63a8\u4e86\uff0c\u7ec4\u5408\u6570\u5565\u7684\u4e5f\u80fd\u6c42\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 const int mod = 998244353 ; int inv [ si ], fact [ si ], invf [ si ]; void init ( int n ) { inv [ 1 ] = 1 , fact [ 0 ] = invf [ 0 ] = 1 ; for ( int i = 2 ; i <= n ; ++ i ) inv [ i ] = 1l l * ( mod - mod / i ) * inv [ mod % i ] % mod ; for ( int i = 1 ; i <= n ; ++ i ) fact [ i ] = 1l l * fact [ i - 1 ] * i % mod , invf [ i ] = 1l l * invf [ i - 1 ] * inv [ i ] % mod ; } int C ( int n , int m ) { if ( m < 0 || n < m ) return 0 ; return 1l l * fact [ n ] * invf [ n - m ] % mod * invf [ m ] % mod ; } int Catalan ( int n ) { return 1l l * C ( n * 2 , n ) % mod * inv [ n + 1 ] % mod ; }","title":"\u7ebf\u6027\u6c42\u9006\u5143"},{"location":"rec/interesting/segtree-tricks/","text":"\u5728\u7ebf\u6bb5\u6811\u672c\u8eab\u4fe1\u606f\u52a8\u624b\u811a\u7684\u9898\u4e00\u822c\u5c31\u4e09\u6b65\uff1a \u8003\u8651\u600e\u4e48\u641e\u51fa\u5177\u6709\u5e7a\u534a\u7fa4\u6027\u8d28\u7684\u4fe1\u606f\u3002\uff08\u62c6\u51fa\u591a\u4e2a\u4fe1\u606f\uff08\u6bd4\u5982\u533a\u95f4\u65b9\u5dee\uff09\uff0c\u6216\u8005\u60f3\u529e\u6cd5\u6269\u5c55\u4e00\u4e0b\u4fe1\u606f\u6765\u641e\u51fa\u7ed3\u5408\u5f8b\uff08\u6bd4\u5982 GSS\u2153\uff09\uff09 \u8003\u8651\u600e\u4e48\u5199 Pushup \uff08\u5047\u8bbe\u5de6\u53f3\u513f\u5b50\u4fe1\u606f\u90fd\u5df2\u5f97\u5230\uff0c\u7136\u540e\u770b\u7236\u4eb2\u8282\u70b9\u600e\u4e48\u641e\uff0c\u8fb9\u754c\u4e3a\u53f6\u5b50\u8282\u70b9\uff09 \u8003\u8651\u600e\u4e48\u5199 Pushdown \u548c Change\u3002 \u5982\u679c\u662f\u5229\u7528\u8f6c\u5316\uff0c\u628a\u590d\u6742\u7684\u4fe1\u606f\u8f6c\u5316\u6210\u7b80\u5355\u7684\u4fe1\u606f\u5728\u7ebf\u6bb5\u6811\u4e0a\u7ef4\u62a4\u7684\u8bdd\uff0c\u5c31\u53ea\u80fd\u9760\u7075\u611f\u6216\u8005\u79ef\u7d2f\u4e86\u3002\uff08\u6bd4\u5982\u533a\u95f4\u52a0\u591a\u9879\u5f0f\u4e00\u7c7b\u7684\uff09 \u533a\u95f4\u52a0\u591a\u9879\u5f0f \u03c8(\uff40\u2207\u00b4)\u03c8 \u533a\u95f4\u52a0\u591a\u9879\u5f0f\u90fd\u662f\u8f6c\u5316\u6210\u5dee\u5206\u6570\u7ec4\u4e4b\u540e\u524d\u7f00\u548c\uff0c\u6240\u4ee5\u4e00\u822c\u90fd\u662f\u5355\u70b9\u67e5\u8be2\u3002 \u533a\u95f4\u67e5\u8be2\u770b\u770b\u53ef\u4e0d\u53ef\u505a\u5148\u3002 \u533a\u95f4\u52a0\u7b49\u5dee\u6570\u5217 \u03c8(\uff40\u2207\u00b4)\u03c8 \u533a\u95f4 \\([l,r]\\) \u52a0\u7b49\u5dee\u6570\u5217\uff0c\u7b49\u540c\u4e8e\u5728 \u5dee\u5206\u6570\u7ec4 \u4e0a\u7684 \\([l + 1,r]\\) \u505a\u4e00\u6b21 \u533a\u95f4\u52a0 \\(d\\) \uff0c\u7136\u540e\u4ee4 \\(c[l] + \\text{BEGIN}\\) \uff0c \\(c[r+1] - \\text{END}\\) \u3002 \\(\\text{BEGIN,END}\\) \u5206\u522b\u662f\u9996\u9879\u548c\u672b\u9879\u3002 \u5355\u70b9\u8be2\u95ee\u53ea\u9700\u8981\u8be2\u95ee\u7ebf\u6bb5\u6811\u4e0a\u7684 \\(sum(1,pos)\\) \u5373\u53ef\u3002 \u4f8b\u9898: CF1661D Progressions Covering \u533a\u95f4\u52a0\u6590\u6ce2\u90a3\u5951 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u91cc\u9e3d\u5b50\u4e86\u3002 \u533a\u95f4\u52a0\u7b49\u6bd4\u6570\u5217 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u91cc\u9e3d\u5b50\u4e86\u3002 \u533a\u95f4\u67e5\u67d0\u4e9b\u4e1c\u897f \u03c8(\uff40\u2207\u00b4)\u03c8 \u533a\u95f4 MEX \u03c8(\uff40\u2207\u00b4)\u03c8 \u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u8003\u8651\u83ab\u961f\u3002 \u5982\u679c\u8981\u6c42\u5728\u7ebf\u5c31\u76f4\u63a5\u4e0a\u4e3b\u5e2d\u6811\uff08\u6743\u503c\u7ebf\u6bb5\u6811\u4e8c\u5206\u663e\u7136\u53ef\u4ee5\u505a\u5168\u5c40\uff0c\u7136\u540e\u53ef\u6301\u4e45\u5316\u4e4b\u540e\u80fd\u8f6c\u6210\u533a\u95f4\u7684\uff09 \u8fd8\u6709\u4e00\u79cd\u79bb\u7ebf+\u7ebf\u6bb5\u6811\u7684\u6682\u65f6\u5495\u5495\u5495\u7740\uff0c\u53cd\u6b63\u4e0d\u5982\u4e3b\u5e2d\u6811\u6216\u8005\u83ab\u961f\u505a\u6cd5\u3002 \u533a\u95f4\u65b9\u5dee \u03c8(\uff40\u2207\u00b4)\u03c8 \u533a\u95f4\u52a0\u6cd5\uff0c\u533a\u95f4\u8be2\u95ee\u65b9\u5dee\u3002 \u8003\u8651\u62c6\u67ff\u5b50\uff1a \u5b9a\u4e49\u5e73\u5747\u6570\u4e3a \\(ava\\) \u3002 \u65b9\u5dee\u7684\u5b9a\u4e49\u662f \\(\\dfrac{1}{n} \\sum\\limits_{i = 1}^{n} (a_i - ava)^2\\) \u7136\u540e\u663e\u7136\u8fd9\u4e2a\u975e\u5e38\u4e0d\u597d\u7ef4\u62a4\uff08\u4e0d\u5177\u6709\u5e7a\u534a\u7fa4\u7684\u6027\u8d28\uff0c\u7ebf\u6bb5\u6811\u6ca1\u6cd5\u7ef4\u62a4\uff09\uff0c\u6240\u4ee5\u8003\u8651\u62c6\u5f00\uff0c\u53d8\u6210\u51e0\u4e2a\u5177\u6709\u5e7a\u534a\u7fa4\u6027\u8d28\u7684\u4fe1\u606f\u7684\u7ec4\u5408\u3002 \\[ \\begin{aligned} \\dfrac{1}{n} \\sum\\limits_{i = 1}^{n} (a_i - ava)^2 \\\\ \\dfrac{1}{n} \\sum\\limits_{i = 1}^{n} (a_i^2 - a_i \\cdot ava + ava^2)\\\\ \\dfrac{1}{n} \\cdot [\\sum\\limits_{i = 1}^{n} a_i^2 - ava\\sum\\limits_{i = 1}^n a_i + n \\cdot ava^2] \\end{aligned} \\] \u4e8e\u662f\u5982\u679c\u4e0d\u5e26\u4fee\u5c31\u53ea\u9700\u8981\u8003\u8651\u7ef4\u62a4\u533a\u95f4\u548c\uff0c\u533a\u95f4\u5e73\u65b9\u548c\u5c31\u884c\u4e86\u3002 \u7136\u540e\u8fd9\u91cc\u6709\u4e00\u4e2a\u533a\u95f4\u52a0\u6cd5\u3002 \u6240\u4ee5\u6211\u4eec\u8003\u8651\u7ef4\u62a4\u4e00\u4e2a \\(add\\) \u3002 \u663e\u7136\u533a\u95f4\u52a0\u7684\u65f6\u5019\u548c\u4e0b\u653e\u6807\u8bb0\u65f6\uff0c \\(dat\\) \u7684\u53d8\u5316\u662f\u4e00\u81f4\u7684\uff0c\u5c31\u662f\u8003\u8651\u5f53\u533a\u95f4\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u88ab\u52a0\u4e0a \\(v\\) \u4e4b\u540e\uff0c \\(psum, sum\\) \u600e\u4e48\u53d8\u4e86\u3002 \u7136\u540e\u533a\u95f4\u548c\u968f\u4fbf\u641e\uff0c\u8003\u8651\u533a\u95f4\u5e73\u65b9\u548c \\(psum\\) \uff1a \\[ \\sum\\limits_{i = 1}^n(a_i + v)^2 - \\sum\\limits_{i = 1}^{n} a_i^2 \\] \u8fd9\u4e2a\u67ff\u5b50\u5f88\u5bb9\u6613\u5c55\u5f00\u7136\u540e\u8f6c\u5316\u6210\u80fd\u591f \\(O(1)\\) \u4e0b\u4f20\uff0c\u4e14\u5177\u6709\u65f6\u95f4\u8f74\u4e0a\u7684\u7ed3\u5408\u5f8b\u7684\u4fe1\u606f\uff0c\u4e8e\u662f\u6807\u8bb0\u90e8\u5206\u5c31\u505a\u5b8c\u4e86\u3002 Pushup \u5f88\u663e\u7136\u5c31\u662f\u4e24\u4e2a\u4fe1\u606f\u76f4\u63a5\u505a\u52a0\u6cd5\uff0c\u6ca1\u4e86\u3002 \u533a\u95f4 sin \u548c \u03c8(\uff40\u2207\u00b4)\u03c8 \u533a\u95f4\u52a0\u533a\u95f4 sin \u548c \u601d\u8003\u597d\u7ebf\u6bb5\u6811\u7684\u672c\u8d28\u5c31\u884c\u3002 \u9996\u5148\u80af\u5b9a\u8981\u6253 Tag\uff0c\u5c31\u662f\u4e00\u4e2a\u7ef4\u62a4\u52a0\u6cd5 Tag\u3002 \u56e0\u4e3a\u6211\u8981\u6c42\u7684\u7b54\u6848\u662f \\(\\sin\\) \u548c\uff0c\u4e3a\u4e86\u51fa\u73b0\u7ed3\u5408\u5f8b\uff0c\u9700\u8981\u7528\u548c\u89d2\u516c\u5f0f\u3002 \u6240\u4ee5\u4fe1\u606f\u53ea\u9700\u8981\u540c\u65f6\u7ef4\u62a4\u533a\u95f4 \\(\\sin\\) \u548c\u8fd8\u6709 \\(\\cos\\) \u548c\u3002 \u8003\u8651\u4e00\u4e0b\u533a\u95f4\u52a0 \\(v\\) \u4e4b\u540e\u4e00\u4e2a\u533a\u95f4\u7684 \\(\\sin\\) \u600e\u4e48\u53d8\u4e86\uff0c\u65b9\u4fbf\u4e0b\u4f20\u6807\u8bb0\u8fd8\u6709\u66f4\u65b0\u4fe1\u606f\u3002 \u5148\u5199\u51fa\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684\uff1a \\(\\sin (a + b) = \\sin a \\cos b + \\sin b \\cos a\\) \\(\\cos (a + b) =\\cos a \\cos b - \\sin a \\sin b\\) \u90a3\u4e48 \\(\\sum \\sin(a_i)\\) \u5c31\u53d8\u6210\u4e86 \\(\\sum \\sin (a_i + v) = \\sum (\\sin a_i \\cos v + \\sin v \\cos a_i)\\) \u5c55\u5f00\uff1a \\(\\cos v\\sum \\sin a_i + \\sin v \\sum \\cos a_i\\) \uff0c\u6b64\u65f6 \u72ec\u7acb\u4e86\u53d8\u91cf\uff08\u7ef4\u62a4\u7684\u4fe1\u606f\uff09\u548c\u5e38\u91cf \\(v\\) \uff0c\u5f88\u65b9\u4fbf\u5904\u7406\u3002 \u540c\u7406\uff1a \\(\\sum \\cos (a_i) =\\sum \\cos(a_i + v) = \\cos v\\sum \\cos a_i - \\sin v \\sum \\sin a_i\\) \u3002 \u6ce8\u610f\u5230\u4e00\u4e2a\u5751\u70b9\u5c31\u662f \\(\\cos\\) \u8fd8\u8981\u7528\u5230\u539f\u6765\u66f4\u65b0\u524d\u7684 \\(\\sum \\sin a_i\\) \uff0c\u6240\u4ee5\u8981\u63d0\u524d\u8bb0\u5f55\u4e00\u4e0b\u3002 \u7136\u540e pushup \u9700\u8981\u7ed3\u5408\u4e24\u4e2a\u533a\u95f4\u7684 \\(\\sum \\sin a_i, \\sum \\cos a_i\\) \uff0c\u76f4\u63a5\u52a0\u8d77\u6765\u5c31\u53ef\u4ee5\u4e86\u3002 \u7136\u540e\u5c31\u6ca1\u4e86\u3002 \u533a\u95f4 GCD \u03c8(\uff40\u2207\u00b4)\u03c8 \u5355\u70b9\u4fee\u6539 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e2a\u5f88\u7b80\u5355\uff0c\u56e0\u4e3a \\(\\gcd\\) \u6ee1\u8db3\u7ed3\u5408\u5f8b : \\(\\gcd(a, b, c) = \\gcd(a, \\gcd(b, c))\\) \u3002 \u800c\u4e14\u6709\u5e7a\u5143 \\(0\\) \u3002 \u6240\u4ee5\u76f4\u63a5\u505a\u5c31\u884c\u4e86\u3002 \u533a\u95f4\u4fee\u6539 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8003\u8651\u8f6c\u5316\u6210\u5355\u70b9\u4fee\u6539\uff0c\u76f4\u63a5\u7ef4\u62a4\u5dee\u5206\u6570\u7ec4\uff0c\u53ef\u4ee5\u505a\u5230\u5355\u70b9\u6539\u3002 \u7136\u540e\u53d1\u73b0 \\(\\gcd(a, b - a, c - b) = \\gcd(a, b, c)\\) \uff0c\u6240\u4ee5\u76f4\u63a5\u8be2\u95ee\u5dee\u5206\u6570\u7ec4\u7684 \\(\\gcd\\) \u5c31\u884c\u4e86\u3002 \u7136\u540e\u663e\u7136\u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95ee \\([l, r]\\) \u8fd8\u8981\u7528\u5230 \\(a[l]\\) \uff0c\u6240\u4ee5\u518d\u5f00\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4 \\(a\\) \u5c31\u884c\u4e86\u3002 \u6ce8\u610f\u5982\u679c gcd \u7684\u53c2\u6570\u6709\u8d1f\u6570\u5c31\u76f4\u63a5\u628a abs \u5e26\u4e0a\u53bb\u7b97\u5c31\u884c\u3002 \u6269\u5c55\u7c7b \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ef4\u62a4\u77e9\u9635\u4e58\u6cd5 \u03c8(\uff40\u2207\u00b4)\u03c8 \u76f4\u63a5\u770b \u8fd9\u91cc \u5c31\u884c\u4e86\u3002 GSS \u7cfb\u5217 \u03c8(\uff40\u2207\u00b4)\u03c8 GSS1 & 3 \u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c \u03c8(\uff40\u2207\u00b4)\u03c8 \u53ef\u4ee5\u53d1\u73b0\u6700\u5927\u5b50\u6bb5\u548c\u6ca1\u6709\u660e\u663e\u7684\u7ed3\u5408\u5f8b\u3002 \u4e0d\u8fc7\u6211\u4eec\u8bd5\u7740\u5047\u8bbe\u5de6\u53f3\u513f\u5b50\u7684\u6700\u5927\u5b50\u6bb5\u548c\u90fd\u5df2\u7ecf\u6c42\u51fa\uff0c\u8003\u8651\u600e\u4e48 Pushup\u3002 \u90a3\u4e48\u5176\u5b9e\u4e5f\u5c31\u4e09\u79cd\u60c5\u51b5\uff0c\u5206\u522b\u7ee7\u627f\u4e24\u8fb9\u7684\uff0c\u6216\u8005\u662f\u5de6\u8fb9\u53d6\u4e00\u6bb5\u540e\u7f00\uff0c\u53f3\u8fb9\u53d6\u4e00\u6bb5\u524d\u7f00\u3002 \u663e\u7136\u4e0d\u53ef\u80fd\u6709\u522b\u7684\u60c5\u51b5\u66f4\u4f18\u79c0\u4e86\u3002 \u6240\u4ee5\u9700\u8981\u7ef4\u62a4\u4e00\u4e0b\u6bcf\u4e2a\u5b50\u8282\u70b9\u7684\u6700\u5927\u524d\u7f00\u548c\uff0c\u6700\u5927\u540e\u7f00\u548c\u3002 \u7136\u540e\u6700\u5927\u524d\u7f00\u548c\u4e5f\u9700\u8981\u8003\u8651 Pushup\uff0c \u663e\u7136\u5c31\u662f\u5de6\u513f\u5b50\u7684\u6700\u5927\u524d\u7f00\u548c\uff0c\u6216\u8005\u662f\u5de6\u513f\u5b50\u6574\u4f53+\u53f3\u513f\u5b50\u7684\u6700\u5927\u524d\u7f00\u548c\uff08\u56e0\u4e3a\u5b50\u6bb5\u662f\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u8981\u9009\u53f3\u513f\u5b50\u7684\u6700\u5927\u524d\u7f00\u548c\u5c31\u9700\u8981\u628a\u5de6\u513f\u5b50\u6574\u4f53\u9009\u4e0a\uff09\u3002 \u7136\u540e\u6709\u6ca1\u6709\u4e00\u79cd\u53ef\u80fd\uff0c\u5c31\u662f\u6211\u53f3\u513f\u5b50\u9009\u5b8c\u6700\u5927\u524d\u7f00\u548c\u4e4b\u540e\uff0c\u6709\u6ca1\u6709\u53ef\u80fd\u540e\u9762\u8fd8\u80fd\u627e\u4e00\u4e9b\u63a5\u5230\u524d\u7f00\u540e\u9762\u6bd4\u8fd9\u4e2a\u66f4\u5927\uff1f \u660e\u663e\u662f\u8822\u4e86\uff0c\u8fd9\u91cc\u90fd\u662f\u6700\u5927\u524d\u7f00\u548c\u4e86\uff0c\u600e\u4e48\u53ef\u80fd\u561b\u3002 \u7136\u540e\u8fd8\u6709\u4e00\u79cd\u60c5\u51b5\u5c31\u662f\u5168\u90e8\u90fd\u9009\u4e0a\u3002 \u6700\u5927\u540e\u7f00\u548c\u540c\u7406\u5373\u53ef\u3002 \u6ce8\u610f\u5982\u679c\u4e00\u4e2a\u533a\u95f4\u90fd\u662f\u8d1f\u6570\uff0c\u6700\u5927\u5b50\u6bb5\u548c\u5e94\u8be5\u662f\u6700\u5927\u503c\uff0c\u800c\u4e0d\u662f\u4e0a\u9762\u4e09\u79cd\u60c5\u51b5\u7684\u4efb\u610f\u4e00\u79cd\u3002 \u6240\u4ee5\u8fd8\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u6700\u5927\u503c\u3002 \u6b64\u65f6\u6700\u5927\u5b50\u6bb5\u548c\u5c31\u6709\u7ed3\u5408\u5f8b\u4e86\u3002 GSS1 \u4e0d\u5e26\u4fee\uff0cGSS3 \u5e26\u4e00\u4e2a\u5355\u70b9\u4fee\uff0c\u672c\u8d28\u4e00\u6837\u3002 \u7c7b\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\u95ee\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4f60\u6709\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u4e00\u4e2a\u5e8f\u5217 \\(b\\) \u3002 \u4f60\u6bcf\u6b21\u9700\u8981\u6c42\u4e00\u4e2a\u533a\u95f4\u5185\u7684\u4e00\u79cd\u8d21\u732e\u7684\u6700\u5927\u503c\uff0c\u5b9a\u4e49\u4e3a \\(\\max\\{a_x + b_y\\}, x \\le y\\) \u3002 \u8fd9\u4e2a\u4e1c\u897f\u5176\u5b9e\u4e5f\u548c\u6700\u5927\u5b50\u6bb5\u548c\u5dee\u4e0d\u591a\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u4fe1\u606f\u5176\u5b9e\u662f\u53ef\u4ee5\u5408\u5e76\u7684\uff0c\u6211\u4eec\u76f4\u63a5\u7ef4\u62a4\u7b54\u6848\uff0c\u663e\u7136\u5927\u533a\u95f4\u7684\u7b54\u6848\u53ef\u80fd\u662f\u4e24\u4e2a\u5c0f\u533a\u95f4\u7684\u7b54\u6848\u4e4b\u4e00\uff0c\u8fd8\u6709\u4e00\u79cd\u60c5\u51b5\u662f\u4ece\u4e24\u4e2a\u5c0f\u533a\u95f4\u5404\u53d6\u4e00\u4e9b\u7ec4\u6210\u7b54\u6848\u3002 \u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u7ef4\u62a4\u5f53\u524d\u533a\u95f4\u5185\u6700\u5927\u7684 \\(a_x\\) \u548c\u6700\u5927\u7684 \\(b_y\\) \uff0c\u6bcf\u6b21\u5408\u5e76\u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u5de6\u53f3\u5b50\u6811\u7ef4\u62a4\u7684\u533a\u95f4\u662f\u5206\u5f00\u7684\uff0c\u6240\u4ee5 \\(x\\le y\\) \u7684\u6761\u4ef6\u4e5f\u53ef\u4ee5\u88ab\u6ee1\u8db3\u3002 \u7136\u540e\u7b54\u6848\u5c31\u53ef\u4ee5\u4e0a\u4f20\u4e86\uff0c\u590d\u6742\u5ea6\u4e00\u4e2a log\uff0c\u4e5f\u53ef\u4ee5\u652f\u6301\u5355\u70b9\u4fee\u6539\u3002 GSS4 \u533a\u95f4\u5f00\u65b9\uff08\u4e0b\u53d6\u6574\uff09\uff0c\u533a\u95f4\u6c42\u548c \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u9898\u7ebf\u6bb5\u6811\u4e5f\u53ef\u4ee5\uff0c\u867d\u7136\u7b97\u662f\u4e00\u4e2a\u5355\u72ec\u7684 Trick\uff0c\u4f46\u6bd5\u7adf\u662f GSS \u7cfb\u5217\u7684\uff0c\u5c31\u4e5f\u5199\u4e0a\u4e86\u3002 \u9996\u5148\u4ece\u6570\u5217\u5206\u5757\u5165\u95e8 5 \u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u7ed3\u8bba\uff0c\u5c31\u662f\u533a\u95f4\u5f00\u65b9\u7684\u6b21\u6570\u662f\u5f88\u5c11\u7684\uff0c\u5982\u679c 1e18 \u7ea7\u522b\u5f00 6 ~ 7 \u6b21\u5c31\u591f\u4e86\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u5e76\u67e5\u96c6\uff0c\u5176\u4e2d \\(pa(i)\\) \u8868\u793a\uff0c \\([i, n]\\) \u4e4b\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u4e0d\u662f \\(1\\) \u7684\u6570\u7684\u4e0b\u6807\u3002 \u521d\u59cb\u6307\u5411\u81ea\u5df1\u3002 \u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u6211\u4eec\u76f4\u63a5\u66b4\u529b\u5728 \\(a(i)\\) \u4e0a\u9762\u5355\u70b9\u5f00\u6839\u53f7\uff0c\u5982\u679c\u9047\u5230 \\(1\\) \u5c31\u76f4\u63a5\u8df3 \\(pa(i)\\) \uff0c\u56e0\u4e3a\u5f00\u6839\u53f7\u6b21\u6570\u5f88\u5c11\uff0c\u7136\u540e\u591a\u6b21\u64cd\u4f5c\u4e4b\u540e\u8981\u64cd\u4f5c\u7684\u6570\u4e5f\u5f88\u5c11\u3002 \u5e76\u67e5\u96c6\u57fa\u672c\u53ef\u4ee5\u770b\u4f5c\u5747\u644a \\(O(1)\\) \u7684\uff0c\u6240\u4ee5\u8fd9\u4e2a\u4e1c\u897f\u590d\u6742\u5ea6\u975e\u5e38\u4f18\u79c0\u3002 \u7136\u540e\u533a\u95f4\u548c\u518d\u7528\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u628a\u533a\u95f4\u5f00\u65b9\u8f6c\u5316\u4e3a\u4e86\u5355\u70b9\u5f00\u65b9\u3002 \u8fd9\u4e2a\u5c31\u662f\u4e00\u4e2a\u5f88\u6709\u610f\u601d\u7684 Trick\uff1a\u5bf9\u4e8e\u8fd9\u79cd\u64cd\u4f5c\u591a\u4e86\u4e4b\u540e\u201c\u65e0\u6548\u64cd\u4f5c\u201d\u53d8\u591a\u7684\u64cd\u4f5c\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u5e76\u67e5\u96c6\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u6709\u6548\u64cd\u4f5c\u4f4d\u7f6e\uff0c\u628a\u533a\u95f4\u64cd\u4f5c\u8f6c\u5316\u4e3a\u5355\u70b9\u64cd\u4f5c\u3002 \u51e0\u4e2a\u540c\u7c7b\u578b\u7684\u9898\uff1a Luogu2391 \u767d\u96ea\u7691\u7691\uff0cCF920F Sum and Replace\uff0c51Nod1743 \u96ea\u4e4b\u56fd\u5ea6\u3002","title":"\u7ebf\u6bb5\u6811\u7684\u6269\u5c55\u8fd0\u7528"},{"location":"rec/interesting/segtree-tricks/#_1","text":"\u533a\u95f4\u52a0\u591a\u9879\u5f0f\u90fd\u662f\u8f6c\u5316\u6210\u5dee\u5206\u6570\u7ec4\u4e4b\u540e\u524d\u7f00\u548c\uff0c\u6240\u4ee5\u4e00\u822c\u90fd\u662f\u5355\u70b9\u67e5\u8be2\u3002 \u533a\u95f4\u67e5\u8be2\u770b\u770b\u53ef\u4e0d\u53ef\u505a\u5148\u3002","title":"\u533a\u95f4\u52a0\u591a\u9879\u5f0f"},{"location":"rec/interesting/segtree-tricks/#_2","text":"\u533a\u95f4 \\([l,r]\\) \u52a0\u7b49\u5dee\u6570\u5217\uff0c\u7b49\u540c\u4e8e\u5728 \u5dee\u5206\u6570\u7ec4 \u4e0a\u7684 \\([l + 1,r]\\) \u505a\u4e00\u6b21 \u533a\u95f4\u52a0 \\(d\\) \uff0c\u7136\u540e\u4ee4 \\(c[l] + \\text{BEGIN}\\) \uff0c \\(c[r+1] - \\text{END}\\) \u3002 \\(\\text{BEGIN,END}\\) \u5206\u522b\u662f\u9996\u9879\u548c\u672b\u9879\u3002 \u5355\u70b9\u8be2\u95ee\u53ea\u9700\u8981\u8be2\u95ee\u7ebf\u6bb5\u6811\u4e0a\u7684 \\(sum(1,pos)\\) \u5373\u53ef\u3002 \u4f8b\u9898: CF1661D Progressions Covering","title":"\u533a\u95f4\u52a0\u7b49\u5dee\u6570\u5217"},{"location":"rec/interesting/segtree-tricks/#_3","text":"\u8fd9\u91cc\u9e3d\u5b50\u4e86\u3002","title":"\u533a\u95f4\u52a0\u6590\u6ce2\u90a3\u5951"},{"location":"rec/interesting/segtree-tricks/#_4","text":"\u8fd9\u91cc\u9e3d\u5b50\u4e86\u3002","title":"\u533a\u95f4\u52a0\u7b49\u6bd4\u6570\u5217"},{"location":"rec/interesting/segtree-tricks/#_5","text":"","title":"\u533a\u95f4\u67e5\u67d0\u4e9b\u4e1c\u897f"},{"location":"rec/interesting/segtree-tricks/#mex","text":"\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u8003\u8651\u83ab\u961f\u3002 \u5982\u679c\u8981\u6c42\u5728\u7ebf\u5c31\u76f4\u63a5\u4e0a\u4e3b\u5e2d\u6811\uff08\u6743\u503c\u7ebf\u6bb5\u6811\u4e8c\u5206\u663e\u7136\u53ef\u4ee5\u505a\u5168\u5c40\uff0c\u7136\u540e\u53ef\u6301\u4e45\u5316\u4e4b\u540e\u80fd\u8f6c\u6210\u533a\u95f4\u7684\uff09 \u8fd8\u6709\u4e00\u79cd\u79bb\u7ebf+\u7ebf\u6bb5\u6811\u7684\u6682\u65f6\u5495\u5495\u5495\u7740\uff0c\u53cd\u6b63\u4e0d\u5982\u4e3b\u5e2d\u6811\u6216\u8005\u83ab\u961f\u505a\u6cd5\u3002","title":"\u533a\u95f4 MEX"},{"location":"rec/interesting/segtree-tricks/#_6","text":"\u533a\u95f4\u52a0\u6cd5\uff0c\u533a\u95f4\u8be2\u95ee\u65b9\u5dee\u3002 \u8003\u8651\u62c6\u67ff\u5b50\uff1a \u5b9a\u4e49\u5e73\u5747\u6570\u4e3a \\(ava\\) \u3002 \u65b9\u5dee\u7684\u5b9a\u4e49\u662f \\(\\dfrac{1}{n} \\sum\\limits_{i = 1}^{n} (a_i - ava)^2\\) \u7136\u540e\u663e\u7136\u8fd9\u4e2a\u975e\u5e38\u4e0d\u597d\u7ef4\u62a4\uff08\u4e0d\u5177\u6709\u5e7a\u534a\u7fa4\u7684\u6027\u8d28\uff0c\u7ebf\u6bb5\u6811\u6ca1\u6cd5\u7ef4\u62a4\uff09\uff0c\u6240\u4ee5\u8003\u8651\u62c6\u5f00\uff0c\u53d8\u6210\u51e0\u4e2a\u5177\u6709\u5e7a\u534a\u7fa4\u6027\u8d28\u7684\u4fe1\u606f\u7684\u7ec4\u5408\u3002 \\[ \\begin{aligned} \\dfrac{1}{n} \\sum\\limits_{i = 1}^{n} (a_i - ava)^2 \\\\ \\dfrac{1}{n} \\sum\\limits_{i = 1}^{n} (a_i^2 - a_i \\cdot ava + ava^2)\\\\ \\dfrac{1}{n} \\cdot [\\sum\\limits_{i = 1}^{n} a_i^2 - ava\\sum\\limits_{i = 1}^n a_i + n \\cdot ava^2] \\end{aligned} \\] \u4e8e\u662f\u5982\u679c\u4e0d\u5e26\u4fee\u5c31\u53ea\u9700\u8981\u8003\u8651\u7ef4\u62a4\u533a\u95f4\u548c\uff0c\u533a\u95f4\u5e73\u65b9\u548c\u5c31\u884c\u4e86\u3002 \u7136\u540e\u8fd9\u91cc\u6709\u4e00\u4e2a\u533a\u95f4\u52a0\u6cd5\u3002 \u6240\u4ee5\u6211\u4eec\u8003\u8651\u7ef4\u62a4\u4e00\u4e2a \\(add\\) \u3002 \u663e\u7136\u533a\u95f4\u52a0\u7684\u65f6\u5019\u548c\u4e0b\u653e\u6807\u8bb0\u65f6\uff0c \\(dat\\) \u7684\u53d8\u5316\u662f\u4e00\u81f4\u7684\uff0c\u5c31\u662f\u8003\u8651\u5f53\u533a\u95f4\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u88ab\u52a0\u4e0a \\(v\\) \u4e4b\u540e\uff0c \\(psum, sum\\) \u600e\u4e48\u53d8\u4e86\u3002 \u7136\u540e\u533a\u95f4\u548c\u968f\u4fbf\u641e\uff0c\u8003\u8651\u533a\u95f4\u5e73\u65b9\u548c \\(psum\\) \uff1a \\[ \\sum\\limits_{i = 1}^n(a_i + v)^2 - \\sum\\limits_{i = 1}^{n} a_i^2 \\] \u8fd9\u4e2a\u67ff\u5b50\u5f88\u5bb9\u6613\u5c55\u5f00\u7136\u540e\u8f6c\u5316\u6210\u80fd\u591f \\(O(1)\\) \u4e0b\u4f20\uff0c\u4e14\u5177\u6709\u65f6\u95f4\u8f74\u4e0a\u7684\u7ed3\u5408\u5f8b\u7684\u4fe1\u606f\uff0c\u4e8e\u662f\u6807\u8bb0\u90e8\u5206\u5c31\u505a\u5b8c\u4e86\u3002 Pushup \u5f88\u663e\u7136\u5c31\u662f\u4e24\u4e2a\u4fe1\u606f\u76f4\u63a5\u505a\u52a0\u6cd5\uff0c\u6ca1\u4e86\u3002","title":"\u533a\u95f4\u65b9\u5dee"},{"location":"rec/interesting/segtree-tricks/#sin","text":"\u533a\u95f4\u52a0\u533a\u95f4 sin \u548c \u601d\u8003\u597d\u7ebf\u6bb5\u6811\u7684\u672c\u8d28\u5c31\u884c\u3002 \u9996\u5148\u80af\u5b9a\u8981\u6253 Tag\uff0c\u5c31\u662f\u4e00\u4e2a\u7ef4\u62a4\u52a0\u6cd5 Tag\u3002 \u56e0\u4e3a\u6211\u8981\u6c42\u7684\u7b54\u6848\u662f \\(\\sin\\) \u548c\uff0c\u4e3a\u4e86\u51fa\u73b0\u7ed3\u5408\u5f8b\uff0c\u9700\u8981\u7528\u548c\u89d2\u516c\u5f0f\u3002 \u6240\u4ee5\u4fe1\u606f\u53ea\u9700\u8981\u540c\u65f6\u7ef4\u62a4\u533a\u95f4 \\(\\sin\\) \u548c\u8fd8\u6709 \\(\\cos\\) \u548c\u3002 \u8003\u8651\u4e00\u4e0b\u533a\u95f4\u52a0 \\(v\\) \u4e4b\u540e\u4e00\u4e2a\u533a\u95f4\u7684 \\(\\sin\\) \u600e\u4e48\u53d8\u4e86\uff0c\u65b9\u4fbf\u4e0b\u4f20\u6807\u8bb0\u8fd8\u6709\u66f4\u65b0\u4fe1\u606f\u3002 \u5148\u5199\u51fa\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684\uff1a \\(\\sin (a + b) = \\sin a \\cos b + \\sin b \\cos a\\) \\(\\cos (a + b) =\\cos a \\cos b - \\sin a \\sin b\\) \u90a3\u4e48 \\(\\sum \\sin(a_i)\\) \u5c31\u53d8\u6210\u4e86 \\(\\sum \\sin (a_i + v) = \\sum (\\sin a_i \\cos v + \\sin v \\cos a_i)\\) \u5c55\u5f00\uff1a \\(\\cos v\\sum \\sin a_i + \\sin v \\sum \\cos a_i\\) \uff0c\u6b64\u65f6 \u72ec\u7acb\u4e86\u53d8\u91cf\uff08\u7ef4\u62a4\u7684\u4fe1\u606f\uff09\u548c\u5e38\u91cf \\(v\\) \uff0c\u5f88\u65b9\u4fbf\u5904\u7406\u3002 \u540c\u7406\uff1a \\(\\sum \\cos (a_i) =\\sum \\cos(a_i + v) = \\cos v\\sum \\cos a_i - \\sin v \\sum \\sin a_i\\) \u3002 \u6ce8\u610f\u5230\u4e00\u4e2a\u5751\u70b9\u5c31\u662f \\(\\cos\\) \u8fd8\u8981\u7528\u5230\u539f\u6765\u66f4\u65b0\u524d\u7684 \\(\\sum \\sin a_i\\) \uff0c\u6240\u4ee5\u8981\u63d0\u524d\u8bb0\u5f55\u4e00\u4e0b\u3002 \u7136\u540e pushup \u9700\u8981\u7ed3\u5408\u4e24\u4e2a\u533a\u95f4\u7684 \\(\\sum \\sin a_i, \\sum \\cos a_i\\) \uff0c\u76f4\u63a5\u52a0\u8d77\u6765\u5c31\u53ef\u4ee5\u4e86\u3002 \u7136\u540e\u5c31\u6ca1\u4e86\u3002","title":"\u533a\u95f4 sin \u548c"},{"location":"rec/interesting/segtree-tricks/#gcd","text":"","title":"\u533a\u95f4 GCD"},{"location":"rec/interesting/segtree-tricks/#_7","text":"\u8fd9\u4e2a\u5f88\u7b80\u5355\uff0c\u56e0\u4e3a \\(\\gcd\\) \u6ee1\u8db3\u7ed3\u5408\u5f8b : \\(\\gcd(a, b, c) = \\gcd(a, \\gcd(b, c))\\) \u3002 \u800c\u4e14\u6709\u5e7a\u5143 \\(0\\) \u3002 \u6240\u4ee5\u76f4\u63a5\u505a\u5c31\u884c\u4e86\u3002","title":"\u5355\u70b9\u4fee\u6539"},{"location":"rec/interesting/segtree-tricks/#_8","text":"\u8003\u8651\u8f6c\u5316\u6210\u5355\u70b9\u4fee\u6539\uff0c\u76f4\u63a5\u7ef4\u62a4\u5dee\u5206\u6570\u7ec4\uff0c\u53ef\u4ee5\u505a\u5230\u5355\u70b9\u6539\u3002 \u7136\u540e\u53d1\u73b0 \\(\\gcd(a, b - a, c - b) = \\gcd(a, b, c)\\) \uff0c\u6240\u4ee5\u76f4\u63a5\u8be2\u95ee\u5dee\u5206\u6570\u7ec4\u7684 \\(\\gcd\\) \u5c31\u884c\u4e86\u3002 \u7136\u540e\u663e\u7136\u5bf9\u4e8e\u4e00\u4e2a\u8be2\u95ee \\([l, r]\\) \u8fd8\u8981\u7528\u5230 \\(a[l]\\) \uff0c\u6240\u4ee5\u518d\u5f00\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4 \\(a\\) \u5c31\u884c\u4e86\u3002 \u6ce8\u610f\u5982\u679c gcd \u7684\u53c2\u6570\u6709\u8d1f\u6570\u5c31\u76f4\u63a5\u628a abs \u5e26\u4e0a\u53bb\u7b97\u5c31\u884c\u3002","title":"\u533a\u95f4\u4fee\u6539"},{"location":"rec/interesting/segtree-tricks/#_9","text":"","title":"\u6269\u5c55\u7c7b"},{"location":"rec/interesting/segtree-tricks/#_10","text":"\u76f4\u63a5\u770b \u8fd9\u91cc \u5c31\u884c\u4e86\u3002","title":"\u7ef4\u62a4\u77e9\u9635\u4e58\u6cd5"},{"location":"rec/interesting/segtree-tricks/#gss","text":"","title":"GSS \u7cfb\u5217"},{"location":"rec/interesting/segtree-tricks/#gss1-3","text":"\u53ef\u4ee5\u53d1\u73b0\u6700\u5927\u5b50\u6bb5\u548c\u6ca1\u6709\u660e\u663e\u7684\u7ed3\u5408\u5f8b\u3002 \u4e0d\u8fc7\u6211\u4eec\u8bd5\u7740\u5047\u8bbe\u5de6\u53f3\u513f\u5b50\u7684\u6700\u5927\u5b50\u6bb5\u548c\u90fd\u5df2\u7ecf\u6c42\u51fa\uff0c\u8003\u8651\u600e\u4e48 Pushup\u3002 \u90a3\u4e48\u5176\u5b9e\u4e5f\u5c31\u4e09\u79cd\u60c5\u51b5\uff0c\u5206\u522b\u7ee7\u627f\u4e24\u8fb9\u7684\uff0c\u6216\u8005\u662f\u5de6\u8fb9\u53d6\u4e00\u6bb5\u540e\u7f00\uff0c\u53f3\u8fb9\u53d6\u4e00\u6bb5\u524d\u7f00\u3002 \u663e\u7136\u4e0d\u53ef\u80fd\u6709\u522b\u7684\u60c5\u51b5\u66f4\u4f18\u79c0\u4e86\u3002 \u6240\u4ee5\u9700\u8981\u7ef4\u62a4\u4e00\u4e0b\u6bcf\u4e2a\u5b50\u8282\u70b9\u7684\u6700\u5927\u524d\u7f00\u548c\uff0c\u6700\u5927\u540e\u7f00\u548c\u3002 \u7136\u540e\u6700\u5927\u524d\u7f00\u548c\u4e5f\u9700\u8981\u8003\u8651 Pushup\uff0c \u663e\u7136\u5c31\u662f\u5de6\u513f\u5b50\u7684\u6700\u5927\u524d\u7f00\u548c\uff0c\u6216\u8005\u662f\u5de6\u513f\u5b50\u6574\u4f53+\u53f3\u513f\u5b50\u7684\u6700\u5927\u524d\u7f00\u548c\uff08\u56e0\u4e3a\u5b50\u6bb5\u662f\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u8981\u9009\u53f3\u513f\u5b50\u7684\u6700\u5927\u524d\u7f00\u548c\u5c31\u9700\u8981\u628a\u5de6\u513f\u5b50\u6574\u4f53\u9009\u4e0a\uff09\u3002 \u7136\u540e\u6709\u6ca1\u6709\u4e00\u79cd\u53ef\u80fd\uff0c\u5c31\u662f\u6211\u53f3\u513f\u5b50\u9009\u5b8c\u6700\u5927\u524d\u7f00\u548c\u4e4b\u540e\uff0c\u6709\u6ca1\u6709\u53ef\u80fd\u540e\u9762\u8fd8\u80fd\u627e\u4e00\u4e9b\u63a5\u5230\u524d\u7f00\u540e\u9762\u6bd4\u8fd9\u4e2a\u66f4\u5927\uff1f \u660e\u663e\u662f\u8822\u4e86\uff0c\u8fd9\u91cc\u90fd\u662f\u6700\u5927\u524d\u7f00\u548c\u4e86\uff0c\u600e\u4e48\u53ef\u80fd\u561b\u3002 \u7136\u540e\u8fd8\u6709\u4e00\u79cd\u60c5\u51b5\u5c31\u662f\u5168\u90e8\u90fd\u9009\u4e0a\u3002 \u6700\u5927\u540e\u7f00\u548c\u540c\u7406\u5373\u53ef\u3002 \u6ce8\u610f\u5982\u679c\u4e00\u4e2a\u533a\u95f4\u90fd\u662f\u8d1f\u6570\uff0c\u6700\u5927\u5b50\u6bb5\u548c\u5e94\u8be5\u662f\u6700\u5927\u503c\uff0c\u800c\u4e0d\u662f\u4e0a\u9762\u4e09\u79cd\u60c5\u51b5\u7684\u4efb\u610f\u4e00\u79cd\u3002 \u6240\u4ee5\u8fd8\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u6700\u5927\u503c\u3002 \u6b64\u65f6\u6700\u5927\u5b50\u6bb5\u548c\u5c31\u6709\u7ed3\u5408\u5f8b\u4e86\u3002 GSS1 \u4e0d\u5e26\u4fee\uff0cGSS3 \u5e26\u4e00\u4e2a\u5355\u70b9\u4fee\uff0c\u672c\u8d28\u4e00\u6837\u3002","title":"GSS1 &amp; 3 \u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c"},{"location":"rec/interesting/segtree-tricks/#_11","text":"\u4f60\u6709\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u4e00\u4e2a\u5e8f\u5217 \\(b\\) \u3002 \u4f60\u6bcf\u6b21\u9700\u8981\u6c42\u4e00\u4e2a\u533a\u95f4\u5185\u7684\u4e00\u79cd\u8d21\u732e\u7684\u6700\u5927\u503c\uff0c\u5b9a\u4e49\u4e3a \\(\\max\\{a_x + b_y\\}, x \\le y\\) \u3002 \u8fd9\u4e2a\u4e1c\u897f\u5176\u5b9e\u4e5f\u548c\u6700\u5927\u5b50\u6bb5\u548c\u5dee\u4e0d\u591a\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u4fe1\u606f\u5176\u5b9e\u662f\u53ef\u4ee5\u5408\u5e76\u7684\uff0c\u6211\u4eec\u76f4\u63a5\u7ef4\u62a4\u7b54\u6848\uff0c\u663e\u7136\u5927\u533a\u95f4\u7684\u7b54\u6848\u53ef\u80fd\u662f\u4e24\u4e2a\u5c0f\u533a\u95f4\u7684\u7b54\u6848\u4e4b\u4e00\uff0c\u8fd8\u6709\u4e00\u79cd\u60c5\u51b5\u662f\u4ece\u4e24\u4e2a\u5c0f\u533a\u95f4\u5404\u53d6\u4e00\u4e9b\u7ec4\u6210\u7b54\u6848\u3002 \u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\uff0c\u7ef4\u62a4\u5f53\u524d\u533a\u95f4\u5185\u6700\u5927\u7684 \\(a_x\\) \u548c\u6700\u5927\u7684 \\(b_y\\) \uff0c\u6bcf\u6b21\u5408\u5e76\u7684\u65f6\u5019\uff0c\u56e0\u4e3a\u5de6\u53f3\u5b50\u6811\u7ef4\u62a4\u7684\u533a\u95f4\u662f\u5206\u5f00\u7684\uff0c\u6240\u4ee5 \\(x\\le y\\) \u7684\u6761\u4ef6\u4e5f\u53ef\u4ee5\u88ab\u6ee1\u8db3\u3002 \u7136\u540e\u7b54\u6848\u5c31\u53ef\u4ee5\u4e0a\u4f20\u4e86\uff0c\u590d\u6742\u5ea6\u4e00\u4e2a log\uff0c\u4e5f\u53ef\u4ee5\u652f\u6301\u5355\u70b9\u4fee\u6539\u3002","title":"\u7c7b\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\u95ee\u9898"},{"location":"rec/interesting/segtree-tricks/#gss4","text":"\u8fd9\u9898\u7ebf\u6bb5\u6811\u4e5f\u53ef\u4ee5\uff0c\u867d\u7136\u7b97\u662f\u4e00\u4e2a\u5355\u72ec\u7684 Trick\uff0c\u4f46\u6bd5\u7adf\u662f GSS \u7cfb\u5217\u7684\uff0c\u5c31\u4e5f\u5199\u4e0a\u4e86\u3002 \u9996\u5148\u4ece\u6570\u5217\u5206\u5757\u5165\u95e8 5 \u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u7ed3\u8bba\uff0c\u5c31\u662f\u533a\u95f4\u5f00\u65b9\u7684\u6b21\u6570\u662f\u5f88\u5c11\u7684\uff0c\u5982\u679c 1e18 \u7ea7\u522b\u5f00 6 ~ 7 \u6b21\u5c31\u591f\u4e86\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u5e76\u67e5\u96c6\uff0c\u5176\u4e2d \\(pa(i)\\) \u8868\u793a\uff0c \\([i, n]\\) \u4e4b\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u4e0d\u662f \\(1\\) \u7684\u6570\u7684\u4e0b\u6807\u3002 \u521d\u59cb\u6307\u5411\u81ea\u5df1\u3002 \u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\u6211\u4eec\u76f4\u63a5\u66b4\u529b\u5728 \\(a(i)\\) \u4e0a\u9762\u5355\u70b9\u5f00\u6839\u53f7\uff0c\u5982\u679c\u9047\u5230 \\(1\\) \u5c31\u76f4\u63a5\u8df3 \\(pa(i)\\) \uff0c\u56e0\u4e3a\u5f00\u6839\u53f7\u6b21\u6570\u5f88\u5c11\uff0c\u7136\u540e\u591a\u6b21\u64cd\u4f5c\u4e4b\u540e\u8981\u64cd\u4f5c\u7684\u6570\u4e5f\u5f88\u5c11\u3002 \u5e76\u67e5\u96c6\u57fa\u672c\u53ef\u4ee5\u770b\u4f5c\u5747\u644a \\(O(1)\\) \u7684\uff0c\u6240\u4ee5\u8fd9\u4e2a\u4e1c\u897f\u590d\u6742\u5ea6\u975e\u5e38\u4f18\u79c0\u3002 \u7136\u540e\u533a\u95f4\u548c\u518d\u7528\u4e00\u4e2a\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u628a\u533a\u95f4\u5f00\u65b9\u8f6c\u5316\u4e3a\u4e86\u5355\u70b9\u5f00\u65b9\u3002 \u8fd9\u4e2a\u5c31\u662f\u4e00\u4e2a\u5f88\u6709\u610f\u601d\u7684 Trick\uff1a\u5bf9\u4e8e\u8fd9\u79cd\u64cd\u4f5c\u591a\u4e86\u4e4b\u540e\u201c\u65e0\u6548\u64cd\u4f5c\u201d\u53d8\u591a\u7684\u64cd\u4f5c\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u5e76\u67e5\u96c6\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u7684\u4e0b\u4e00\u4e2a\u6709\u6548\u64cd\u4f5c\u4f4d\u7f6e\uff0c\u628a\u533a\u95f4\u64cd\u4f5c\u8f6c\u5316\u4e3a\u5355\u70b9\u64cd\u4f5c\u3002 \u51e0\u4e2a\u540c\u7c7b\u578b\u7684\u9898\uff1a Luogu2391 \u767d\u96ea\u7691\u7691\uff0cCF920F Sum and Replace\uff0c51Nod1743 \u96ea\u4e4b\u56fd\u5ea6\u3002","title":"GSS4 \u533a\u95f4\u5f00\u65b9\uff08\u4e0b\u53d6\u6574\uff09\uff0c\u533a\u95f4\u6c42\u548c"},{"location":"rec/interesting/small-upper-bound/","text":"\u8fd9\u4e9b\u9898\u90fd\u6709\u4e00\u4e2a\u6bd4\u8f83\u6709\u610f\u601d\u7684\u7279\u70b9\uff1a\u7b54\u6848\u7684\u4e0a\u754c\u5de8\u5c0f\u65e0\u6bd4 \u6700\u8fd1\u627e\u4e2a\u65f6\u95f4\u90fd\u505a\u4e00\u4e0b/ng https://atcoder.jp/contests/arc148/tasks/arc148_a https://codeforces.com/contest/1689/problem/E https://codeforces.com/contest/1553/problem/G https://codeforces.com/contest/1268/problem/D https://codeforces.com/contest/1720/problem/E https://codeforces.com/contest/1685/problem/C","title":"\u7b54\u6848\u4e0a\u754c\u7279\u522b\u5c0f\u7684\u4e00\u7c7b\u95ee\u9898"},{"location":"rec/old/old-cf-at-misc/","text":"CF & AT \u6742\u9898 \u03c8(\uff40\u2207\u00b4)\u03c8 \u56e0\u4e3a\u6ca1\u5565\u65f6\u95f4\uff0c\u4e5f\u4e0d\u592a\u60f3\u5199\u9898\u89e3\uff0c\u6240\u4ee5\u4e00\u4e9b\u6742\u9898\u4e4b\u7c7b\u7684\u7b80\u5355\u9898\u89e3\u5c31\u653e\u5728\u8fd9\u91cc\u4e86\u3002 \uff08\u662f\u65f6\u5019\u6539\u6539\u5f3a\u8feb\u75c7\u4e86\uff09 \u4e00\u822c\u53ea\u4f1a\u6709CF\u548cAT\u7684\uff0c\u6574\u573a\u6bd4\u8d5b\u7684\u9898\u89e3\u4f1a\u653e\u5728 Codeforces Solution \u91cc\u9762\u3002 \u5176\u5b9e\u5927\u90e8\u5206\u90fd\u662f\u53e3\u80e1\u7684\uff0c\u6ca1\u65f6\u95f4\u5199\u4ee3\u7801\uff0c\u4ee5\u540e\u518d\u8865\uff08 CF 1473E \u03c8(\uff40\u2207\u00b4)\u03c8 \u5b9a\u4e49\u4e00\u4e2a\u8def\u5f84\u7684\u8d21\u732e\u4e3a\u4e0b\u9762\u7684\u90a3\u4e2a\u5f0f\u5b50\uff0c\u95ee \\(1 \\to \\forall i\\) \u7684\u8def\u5f84\u7684\u8d21\u732e\u7684\u6700\u5c0f\u503c \u53d1\u73b0\u67ff\u5b50\uff1a \\(\\sum\\limits_{i=1}^kw_{e_i} -\\max\\limits_{i=1}^kw_{e_i} + \\min\\limits_{i=1}^kw_{e_i}\\) \u5b9e\u9645\u4e0a\u5c31\u662f\u5728\u7ef4\u62a4\u6240\u6709\u8fb9\u6743\u53bb\u6389\u6700\u5927\u52a0\u4e0a\u4e00\u4e2a\u6700\u5c0f\u3002 \u4e5f\u5c31\u662f\u5c11\u4e00\u4e2a\u8fb9\uff0c\u53e6\u5916\u4e00\u4e2a\u8fb9\u7b97\u4e24\u6b21\u3002 \u90a3\u4e48\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u51b3\u7b56\u90fd\u4f1a\u6709\u53bb\u6389\u4e0d\u52a0\u4e0a\uff0c\u4e0d\u53bb\u6389\u4e0d\u52a0\u4e0a\uff0c\u52a0\u4e0a\u4e0d\u53bb\u6389\uff0c\u52a0\u4e0a\u7136\u540e\u53bb\u6389\u56db\u79cd\u60c5\u51b5\uff0c \u6240\u4ee5\u628a\u6bcf\u4e2a\u70b9\u62c6\u6210 \\(4\\) \u4e2a\u72b6\u6001\uff0c\u95ee\u9898\u5c31\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5728\u5206\u5c42\u56fe\u4e0a\u6c42\u6700\u77ed\u8def\uff0c\u56e0\u4e3a\u4f60\u591a\u52a0\u7684\u662f \\(\\min\\) \u800c\u4e14\u6c42\u7684\u4e5f\u662f \\(\\min\\) \uff0c\u6240\u4ee5\u8fd9\u4e2a\u505a\u6cd5\u662f\u5bf9\u7684\u3002 CF 516E \uff08By \\(\\text{d}\\color{red}{\\text{reamoon}}\\) \uff09 \u03c8(\uff40\u2207\u00b4)\u03c8 *3100 \u7684\u5927\u6bd2\u7624\u6570\u8bba\u3002 \u4e0d\u592a\u4f1a\uff0c\u4e4b\u540e\u518d\u91cd\u65b0\u95ee\u95ee\u51fa\u9898\u4eba\u548b\u505a\u7684\uff08 ABC 209E \u03c8(\uff40\u2207\u00b4)\u03c8 \u535a\u5f08\u8bba+\u56fe\u8bba \u5fc5\u987b\u8981\u548c\u4e0a\u4e00\u4e2a\u5355\u8bcd\u91cd\u5408\u4e09\u4e2a\u4ee5\u4e0a\u7684\u5b57\u6bcd\u7684\u5355\u8bcd\u63a5\u9f99\uff0c\u7ed9\u5b9a\u8bcd\u5178\uff0c\u4e14\u5927\u5c0f\u5199\u654f\u611f\u3002 \u95ee\u8f93\u8d62\u6216\u5e73\u3002 \u4f60\u53d1\u73b0\u6211\u4eec\u4e0d\u4f1a\u5173\u5fc3\u9664\u4e86\u524d\u4e09\u4e2a\u6216\u8005\u540e\u4e09\u4e2a\u5b57\u7b26\u4ee5\u5916\u7684\u4e1c\u897f\u3002 \u800c\u4e14\u8981\u63a5\u9f99\u5c31\u5fc5\u987b\u5b8c\u5168\u91cd\u5408\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5148\u5b57\u7b26\u4e32hash\u4e00\u4e0b\u524d\u4e09\u4f4d\u548c\u540e\u4e09\u4f4d\uff0c\u7136\u540e\u628a\u524d\u4e09\u4f4d\u5411\u540e\u4e09\u4f4d\u8fde\u8fb9\u3002 \u7136\u540e\u6211\u4eec\u4f1a\u5f97\u5230\u4e00\u5f20\u6709\u5411\u56fe\u3002 \u8003\u8651\u600e\u4e48\u7ef4\u62a4\u5148\u624b\u5fc5\u80dc\u6001\u548c\u5148\u624b\u5fc5\u8d25\u6001\u3002 \u5982\u679c\u5f53\u524d\u72b6\u6001\u80fd\u53bb\u5f80\u7684\u72b6\u6001\u90fd\u662f\u5fc5\u80dc\u6001\u6216\u8005\u65e0\u6cd5\u53bb\u5f80\u4efb\u610f\u72b6\u6001\uff0c\u5219\u5b83\u662f\u5148\u624b\u5fc5\u8d25\u6001\u3002 \u5982\u679c\u5b83\u80fd\u5230\u8fbe\u81f3\u5c11\u4e00\u4e2a\u5fc5\u8d25\u6001\uff0c\u90a3\u4e48\u4ed6\u662f\u5fc5\u80dc\u6001\u3002 \u5176\u4ed6\u7684\u90fd\u662f\u5e73\u5c40\u3002 \u90a3\u4e48\u5efa\u53cd\u56fe\u62d3\u6251\u66f4\u65b0\u5373\u53ef\uff0c\u66f4\u65b0\u4e0d\u5230\u7684\u90fd\u662f\u5e73\u5c40\u3002 \u53e6\u5916\uff0c\u53ea\u8981\u4e00\u4e2a\u70b9\u786e\u5b9a\u4e86\u5fc5\u80dc\u6216\u8005\u5fc5\u8d25\u6001\uff0c\u90a3\u4e48\u5b83\u4e5f\u53ef\u4ee5\u5165\u961f\uff0c\u56e0\u4e3a\u4e0d\u4f1a\u518d\u88ab\u66f4\u6539\u4e86\u3002 ABC 191D \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e00\u4e2a\u5706\uff0c\u95ee\u5706\u4e0a\u548c\u5706\u5185\u6574\u70b9\u4e2a\u6570\u3002 \u662f\u67d0\u4e2aHAOI\u7684\u8d85\u7ea7\u52a0\u5f3a\u7248\uff08 \u8fd9\u9898\u5361\u7cbe\u5ea6\u7279\u522b\u5413\u4eba\uff0cYL\u5f53\u65f6\u5361 \\(1e-14\\) \u8fc7\u4e86\u3002 \u6211\u5361 \\(1e-10\\) \u7206\u4e86\uff0c\u672c\u6765\u662f\u5fd8\u4e86\u8fd9\u4e2a\u9898\u7684\uff0c\u7ed3\u679cDM\u7684\u6bd2\u7624\u5361\u7cbe\u5ea6\u8bfe\u8bb2\u4e86\u8fd9\u4e2a\u3002 \u5c31\u56de\u6765\u5199\u4e00\u4e0b\u3002 \u53d1\u73b0\u5706\u5fc3\u5750\u6807\u548c\u534a\u5f84\u90fd\u662f\u6d6e\u70b9\u6570\uff0c\u4e0d\u8fc7\u4e0d\u8d85\u8fc7 \\(10^5\\) \u800c\u4e14\u6700\u591a\u6709\u56db\u4f4d\u5c0f\u6570\u70b9\u3002 \u6240\u4ee5\u6211\u4eec\u8003\u8651\u5148\u7ed9\u6bcf\u4e2a\u70b9\u7684 \\(x,y\\) \u90fd\u4e58\u4e0a \\(10^4\\) \u53d8\u6210\u6574\u6570\u3002 \u7136\u540e\u8003\u8651\u52fe\u80a1\u5b9a\u7406+\u679a\u4e3e\u5224\u65ad\u5408\u6cd5\u4e0a\u4e0b\u754c\u5c31\u53ef\u4ee5\u4e86\u3002 CF 261D \u03c8(\uff40\u2207\u00b4)\u03c8 \u6ca1\u505a\uff0c\u7a7a\u7740\u3002 CF 1526C2 \u03c8(\uff40\u2207\u00b4)\u03c8 \u95ee\u4e00\u4e2a\u5e8f\u5217\u7684\u6700\u957f\u5b50\u5e8f\u5217\uff0c\u4f7f\u5b50\u5e8f\u5217\u7684\u4efb\u610f\u4f4d\u7f6e\u7684\u524d\u7f00\u548c\u4e0d\u5c0f\u4e8e \\(0\\) \u3002 \u5927\u50bb\u903c\u9898\uff0c\u79d2\u4e86\u3002 \u8003\u8651\u7528\u4e00\u4e2a\u4f18\u5148\u961f\u5217\u7ef4\u62a4\uff0c\u4e00\u4e2a\u4e00\u4e2a\u5403\uff0c\u5982\u679c\u5403\u6b7b\u4e86\u5c31\u628a\u6700\u5c0f\u7684\u5410\u51fa\u6765\u7136\u540e\u7ee7\u7eed\u5403\u3002 \u6700\u540e\u8f93\u51fa size \u8d70\u4eba\u3002 CF 1006F \u03c8(\uff40\u2207\u00b4)\u03c8 dm \u8bb2\u7684\u4e00\u9053\u53cc\u5411BFS\u3002 \u61d2\u5f97\u5199\u6240\u4ee5\u8f6c\u4e86\u522b\u4eba\u7684sol \u9898\u610f\u662f\u6709\u4e00\u4e2a \\(n\\times m\\) \u7684\u5730\u56fe\uff0c\u7136\u540e\u4ece\u5de6\u4e0a\u89d2\u8d70\u5230\u53f3\u4e0b\u89d2\uff0c\u95ee\u6700\u540e\u5f02\u6216\u7684\u503c\u7b49\u4e8e \\(k\\) \u7684\u8def\u5f84\u6709\u591a\u5c11\u6761\u3002 \u601d\u8def\u5c31\u662f\u6298\u534a\u641c\u7d22\uff0c\u53ef\u4ee5\u964d\u4f4e\u5f88\u591a\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u56e0\u4e3a\u5f53\u5730\u56fe\u5c0f\u7684\u65f6\u5019\uff0c \\(n+m\\) \u5c31\u4e0d\u6ee1\u8db3\u6298\u534a\u7684\u6761\u4ef6\u4e86\uff0c \u6240\u4ee5\u8fd9\u91cc\u7528 \\(n+m+2\\) \u4f5c\u4e3a\u6761\u4ef6\uff0c\u9996\u5148\u6211\u4eec\u5148\u641c\u7d22\u6b65\u6570\u4e3a \\(n+m+2\\) \u7684\u4e00\u534a\u7684\u503c\u4e3a\u641c\u7d22\u7ec8\u70b9\uff0c\u8bb0\u5f55\u5f53\u524d\u7684\u5f02\u6216\u503c\uff0c\u7136\u540e\u518d\u4ece\u7ec8\u70b9\u5f00\u59cb\u641c\u7d22\uff0c \u5f53\u641c\u7d22\u5230 \\(n+m+2\\) \u7684\u4e00\u534a\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5224\u65ad\u5f53\u524d\u70b9\u7684\u4e0e \\(k\\) \u7684\u5f02\u6216\u503c\u662f\u5426\u6709\u6807\u8bb0\u8fc7\uff0c\u6709\u7684\u8bdd\u5c31\u8bf4\u660e\u8fd9\u6574\u4e2a\u4e00\u6761\u8def\u7684\u5f02\u6216\u503c\u7b49\u4e8e \\(k\\) \uff0c\u76f4\u63a5\u52a0\u7ed9 \\(ans\\) \u5c31\u597d\u4e86\u3002 \u539f\u6587\u94fe\u63a5\uff1a https://blog.csdn.net/Charles_Zaqdt/article/details/81077919 ARC 084 D/B \u03c8(\uff40\u2207\u00b4)\u03c8 dm \u8bb2\u7684\u4e00\u9053\u6570\u8bbaBFS\u3002 \u627e\u51fa\u6570\u4f4d\u548c\u6700\u5c0f\u7684 \\(k\\) \u7684\u500d\u6570\u662f\u591a\u5c11\u3002 2e5 \u53d1\u73b0\u53ef\u80fd\u4f1a\u70b8 __int128 . \u6240\u4ee5\u6211\u4eec\u8003\u8651\u5bf9\u6570\u4f4d\u8fdb\u884c\u64cd\u4f5c\u3002 \u53d1\u73b0\u5982\u679c\u4ece \\(1\\) \u5f00\u59cb\uff0c\u53ea\u7528\u4e24\u79cd\u64cd\u4f5c\u5c31\u53ef\u4ee5\u5f97\u5230\u4efb\u610f\u4e00\u4e2a\u6570\uff08\u5176\u5b9e\u771f\u5b9e\u60c5\u51b5\u4e00\u79cd\u5c31\u53ef\u4ee5\u4e86\uff09 \\(+1\\) \u4e14 cost \u4e3a \\(1\\) \\(\\times 10\\) \u4e14 cost \u4e3a \\(0\\) \u3002 \u6240\u4ee5\u5176\u5b9e\u8fd9\u662f\u4e2a 01BFS\u3002 \u4ee4\u6bcf\u4e00\u4e2a\u72b6\u6001\u90fd\u5bf9 \\(k\\) \u53d6\u6a21\uff0c\u7136\u540e\u4ece \\(1\\) \u5f00\u59cb\u3002 \u5982\u679c\u5f53\u524d\u8fd9\u4e2a\u64cd\u4f5c\u662f cost \u4e3a \\(1\\) \u7684\u64cd\u4f5c\uff0c\u6254\u5230\u961f\u5c3e\uff0c\u53cd\u4e4b\u6254\u5230\u961f\u5934\u3002 \u7136\u540e01BFS\u5373\u53ef\u3002 ABC 203D \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e00\u9053 01 \u4e8c\u5206\u7684\u677f\u5b50\uff1f \u8fd9\u4e2a trick \u4e0d\u662f\u5f88\u5e38\u89c1\uff0c\u4f46\u662f\u53ea\u8981\u4e00\u51fa\u5c31\u80fd\u5361\u5230\u4eba\u3002 \u8fd9\u9053\u9898\u8981\u6c42\u4f60\u6c42\u51fa\u4e00\u4e2a \\(n\\times n\\) \u7684\u77e9\u9635\u5f53\u4e2d\u7684\u6240\u6709 \\(k\\times k\\) \u5927\u5c0f\u7684\u5b50\u77e9\u9635\u7684\u8d21\u732e\u7684\u6700\u5c0f\u503c\u3002 \u4e00\u4e2a\u77e9\u9635\u7684\u8d21\u732e\u5b9a\u4e49\u4e3a\u628a\u77e9\u9635\u6240\u6709\u5143\u7d20\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u4e4b\u540e\u7684\u7b2c \\(\\lfloor \\dfrac{k^2}{2} \\rfloor +1\\) \u5927\u7684\u6570\uff08\u53ef\u4ee5\u7406\u89e3\u4e3a \u4e2d\u4f4d\u6570 \uff09 \u5927\u5c0f\u662f \\(800^2\\) \u3002 \u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u4e8c\u5206\u8f6c\u5316\u4e3a\u5224\u5b9a\uff1a\u5b58\u4e0d\u5b58\u5728\u4e00\u4e2a\u5b50\u77e9\u9635\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u77e9\u9635\u7684\u8d21\u732e\u6bd4 \\(x\\) \u5c0f\uff1f \u7136\u540e\u6211\u4eec\u8ba9 \\(x\\) \u5c3d\u91cf\u5c0f\uff0c\u5f53\u8fd9\u4e2a\u77e9\u9635\u7684\u8d21\u732e\u5c31\u662f \\(x\\) \u7684\u65f6\u5019\uff0c\u7b54\u6848\u5c31\u662f \\(x\\) \u3002 \u4f60\u8003\u8651\u53bb\u4e8c\u5206\u8fd9\u4e2a\u6570\u5b57 \\(x\\) \uff0c\u7136\u540e\u5bf9\u4e8e\u4f60\u4e8c\u5206\u5230\u7684\u77e9\u9635\uff0c\u4ee4\uff1a \\[\\text{submatrix}[i][j]=\\begin{cases}0 & ,\\text{submatrix}[i][j]\\le x\\\\1 & ,\\text{submatrix}[i][j] > x\\end{cases}\\] \u5982\u679c\u8bf4\u8fd9\u4e2a\u5b50\u77e9\u9635\u7684\u548c\u662f \\(<\\lfloor \\dfrac{k^2}{2} \\rfloor +1\\) \u7684\uff0c\u90a3\u4e48\u5f88\u660e\u663e\u6bd4 \\(x\\) \u5927\u7684\u6570\u5c31\u4e00\u5b9a\u5c11\u4e8e \\(\\lfloor \\dfrac{k^2}{2} \\rfloor +1\\) \u4e2a\u3002 \u90a3\u4e48\u5b83\u7684\u8d21\u732e\u80af\u5b9a\u6bd4 \\(x\\) \u5c0f\uff0c\u6ee1\u8db3\u8981\u6c42\uff0c\u53cd\u4e4b\u5219\u4e0d\u6ee1\u8db3\u3002 \u7136\u540e\u5199\u4e2a\u4e8c\u7ef4\u524d\u7f00\u548c\u641e\u641e\u5c31\u884c\u4e86\u3002 CF 1059D \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4e00\u5806\u70b9\uff0c\u662f\u5426\u6709\u4e00\u4e2a\u548c \\(x\\) \u8f74\u76f8\u5207\u7684\u5706\u4f7f\u5f97\u6bcf\u4e00\u4e2a\u70b9\u90fd\u88ab\u5b83\u5305\u542b\u3002 \u95ee\u8fd9\u4e2a\u5706\u7684\u534a\u5f84\u6700\u5c0f\u662f\u591a\u5c11\u3002 \u9996\u5148\u4f60\u53d1\u73b0\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u70b9\u5bf9 \\(((x_1,y_1),(x_2,y_2))\\) \u6ee1\u8db3 \\(y_1\\times y_2 <0\\) \uff0c\u90a3\u4e48\u5c31\u5f88\u660e\u663e\u65e0\u89e3\u3002 \u7136\u540e\u6211\u4eec\u628a\u6240\u6709\u70b9\u8f6c\u5230 \\(x\\) \u8f74\u4e0a\u65b9\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4f60\u4e8c\u5206\u5230\u7684 \\(r\\) \uff0c\u6211\u4eec\u53ef\u4ee5\u626b\u63cf\u4e00\u904d\u70b9\u96c6\u5408\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9 \\((x,y)\\) \u5229\u7528\u52fe\u80a1\u5b9a\u7406\u6c42\u51fa\u4e00\u4e2a\u533a\u95f4\uff0c\u4f7f\u5f97\u533a\u95f4\u91cc\u7684\u6bcf\u4e00\u4e2a\u70b9\u5230 \\((x,y)\\) \u7684\u8ddd\u79bb\u5728\u533a\u95f4 \\([y,r]\\) \u5f53\u4e2d\u3002 \u7136\u540e\u5bf9\u4e8e\u6240\u6709\u7684\u533a\u95f4\u6c42\u4e00\u4e2a\u4ea4\u96c6\uff0c\u5982\u679c\u4ea4\u96c6\u4e3a\u7a7a\u96c6\u90a3\u4e48\u8fd9\u4e2a \\(r\\) \u4e0d\u5408\u6cd5\uff0c\u53cd\u4e4b\u5408\u6cd5\u3002 \u7136\u540e\u6211\u4eec\u4f7f\u7528\u5b9e\u6570\u4e8c\u5206\uff0c\u4f46\u662f\u56e0\u4e3a\u8fd9\u9898\u5361\u7cbe\u5ea6\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u4f7f\u7528 \\(eps\\) \u6765\u5224\u65ad\uff0c\u800c\u662f\u76f4\u63a5\u6309\u6b21\u6570\u5faa\u73af\u3002 \u8fd9\u9898\u7cbe\u5ea6\u8981\u6c42 \\(10^{-6}\\) \uff0c\u6240\u4ee5\u4f60\u5927\u6982\u5faa\u73af\u4e2a \\(10^3\\) \u6b21\u5c31\u5dee\u4e0d\u591a\u4e86\u3002 AGC 006D \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e5f\u662f\u4e00\u9053\u975e\u5e38\u5999\u7684 01 \u4e8c\u5206\u3002 \u5b9a\u4e49\u4e00\u4e2a\u6570\u5b57\u91d1\u5b57\u5854\uff0c\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u662f\u5b83\u4e0b\u4e00\u5c42\u7684\u4e09\u4e2a\u8282\u70b9\u7684 \u4e2d\u4f4d\u6570 \u3002 \u7ed9\u5b9a\u6700\u540e\u4e00\u5c42\uff0c\u6c42\u7b2c\u4e00\u5c42\u6700\u6709\uff0c \\(2e5\\) \u5c42\u3002 \u53d1\u73b0\u8981 \\(\\text{O}(n \\log n)\\) \u624d\u884c\u3002 \u7136\u540e\u4f60\u8003\u8651\u4e8c\u5206\u9876\u5c42\u8282\u70b9 \\(x\\) \u7684\u6570\u503c\u3002 \u5bf9\u4e8e\u6700\u540e\u4e00\u5c42\u7684\u8282\u70b9\uff0c\u6211\u4eec\u4ee4\u6240\u6709\u7684 \\(\\le x\\) \u7684\u8282\u70b9\u53d8\u6210 \\(0\\) \uff0c\u53cd\u4e4b\u4e3a \\(1\\) \uff08\u548c ABC203D \u4e00\u4e2a\u601d\u8def\uff09\u3002 \u7136\u540e\u4f60\u8003\u8651\u5411\u4e0a\u9012\u63a8\u7684\u8fc7\u7a0b\u3002 \u4f60\u53d1\u73b0\uff0c\u56e0\u4e3a \\(x\\) \u662f\u6700\u9876\u5c42\u8282\u70b9\uff0c\u6240\u4ee5\u5982\u679c\u5e95\u5c42\u6709\u8fde\u7eed\u7684\u4e24\u4e2a \\(1\\) \u6216\u8005\u8fde\u7eed\u7684\u4e24\u4e2a \\(0\\) \uff0c\u4ed6\u4eec\u5c31\u4f1a\u4e00\u76f4\u5411\u4e0a\u8d70\uff0c\u800c\u4e14\u4e0d\u65ad\u5f80\u4e2d\u95f4\u9760\u3002 \u6240\u4ee5\u6700\u9760\u8fd1\u4e2d\u95f4\u7684\u90a3\u4e00\u7ec4\u5c31\u662f\u5854\u9876\u7684 \\(0\\) \u6216\u8005 \\(1\\) \u3002 \u5982\u679c\u4f60\u63a8\u51fa\u6765\u5854\u9876\u662f \\(0\\) ,\u90a3\u4e48\u5c31\u6ee1\u8db3\u60c5\u51b5\uff0c\u53cd\u4e4b\u4e0d\u6ee1\u8db3\u3002 \u7136\u540e\u4f60\u518d\u7279\u5224\u4e00\u4e0b\u6839\u672c\u6ca1\u6709\u8fde\u7eed\u7684\u6570\u5b57\u7684\u60c5\u51b5\u5373\u53ef\u3002 CF 865C \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e00\u9053\u671f\u671b+\u4e8c\u5206\u3002 \u4e5f\u6bd4\u8f83\u5999\u3002 \u5e2e PWK \u4fee\u4e86\u4ed6\u7684 \u9898\u89e3 \uff0c\u6240\u4ee5\u9898\u610f\u5c31\u7528\u4ed6\u7684\u4e86\uff1a \u4f60\u662f\u4e00\u4e2a up \u4e3b\uff0c\u4f60\u8981\u5f55\u4e00\u6bb5\u901f\u901a RA2YR \u7684\u89c6\u9891\uff0c \u6218\u5f79\u6709 \\(n\\) \u5173\uff0c\u6bcf\u5173\u4f60\u6709 \\(p_i\\%\\) \u7684\u53ef\u80fd\u6027\u82b1 \\(F_i\\) \u7684\u65f6\u95f4\u901a\u8fc7\uff0c \\((1-p_i)\\%\\) \u7684\u53ef\u80fd\u6027\u82b1\u6389 \\(S_i\\) \u7684\u65f6\u95f4\u901a\u8fc7\uff08\u5931\u8bef\u4e86\uff09\uff0c\u5176\u4e2d\u4fdd\u8bc1 \\(F_i>S_i\\) \u3002 \u4f46\u56e0\u4e3a\u4f60\u60f3\u201c\u901f\u901a\u201d\uff0c\u4f60\u4e0d\u5e0c\u671b\u4f60\u7684\u89c6\u9891\u957f\u5ea6\u8d85\u8fc7 \\(m\\) \u3002 \u5f53\u4f60\u8ba4\u4e3a\u81ea\u5df1\u63a5\u4e0b\u6765\u53ef\u80fd\u5f55\u4e0d\u5b8c\uff08\u63a5\u7740\u5f55\u5f55\u5b8c\u4e0d\u5982\u91cd\u65b0\u5f55\uff09\u65f6\uff0c\u4f60\u4f1a\u91cd\u65b0\u5f00\u59cb\u5f55\uff0c\u6c42\u5f55\u5b8c\u6574\u4e2a\u6e38\u620f\u7684\u65f6\u95f4\u671f\u671b\u3002 \u8003\u8651\u8bbe \\(f_{i,j}\\) \u8868\u793a\u6253\u8fc7\u7b2c \\(i\\) \u5173\uff0c\u4f7f\u7528 \\(j\\) \u7684\u65f6\u95f4\u7684\u671f\u671b\u3002 \u7136\u540e\u56e0\u4e3a\u662f\u6709\u65f6\u95f4\u9650\u5236\u7684\uff0c\u6240\u4ee5\u4f60\u4f1a\u63a8\u51fa\u4e00\u4e2a\u8fd9\u6837\u7684\u67ff\u5b50\uff08\u4e5f\u662fPWK\u7684\uff09\uff1a \\[ f(i,j)=\\begin{cases} 0 ,& i=n,j\\le m\\\\ f(0,0),& j >m \\\\ \\min(f(0,0),e1+e2) ,& \\text{otherwise.} \\end{cases} \\] \u5176\u4e2d $e_1=p_{i+1} \\times f(i+1,j+f_{i+1})+f_{i+1})) $\u3002 \\(e_2=p_{i+1}\\times(1-p_{i+1})\\times(f(i+1,j+S_{i+1})+S_{i+1})\\) \u3002 \u7136\u540e\u4f60\u53d1\u73b0 \\(f_{0,0}\\) \u4f1a\u5bfc\u81f4\u8f6c\u79fb\u6709\u73af\uff0c\u6240\u4ee5\u628a \\(f_{0,0}\\) \u5f53\u4f5c\u4e00\u4e2a\u5e38\u6570\uff0c\u4ece \\(n\\) \u5f00\u59cb\u5012\u5e8f\u679a\u4e3e\u3002 \u7136\u540e\u6700\u4f18\u91cd\u5f00\u65f6\u95f4\u4e00\u5b9a\u662f\u7b49\u4e8e\u671f\u671b\u65f6\u95f4\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206\u4ed6\u91cd\u5f00\u7684\u65f6\u95f4\u3002 \u7136\u540e\u5229\u7528 \\(f_{0,0}\\) \u7684\u503c\u5224\u65ad\u53ef\u884c\u6027\u5373\u53ef \uff08 \\(f_{0,0}<mid\\) \uff09\u3002 CF 1203F1 \u03c8(\uff40\u2207\u00b4)\u03c8 \u6709 \\(i\\) \u4e2a\u9879\u76ee\uff0c\u6bcf\u4e00\u4e2a\u9879\u76ee\u6709\u4e00\u4e2a\u9650\u5236\u548c\u4e00\u4e2a\u6743\u503c\uff08\u6743\u503c\u53ef\u4ee5\u4e3a\u8d1f\u6570\uff09\u3002 \u4f60\u505a\u4e00\u4e2a\u9879\u76ee\u7684\u8bdd\uff0c\u4f60\u7684\u4fe1\u8a89\u9700\u8981\u8fbe\u5230\u9650\u5236 \\(a_i\\) \uff0c\u505a\u5b8c\u4e4b\u540e\u4f60\u7684\u4fe1\u8a89\u4f1a\u52a0\u4e0a\u6743\u503c \\(b_i\\) \u3002 \u505a\u5b8c\u9879\u76ee\u7684\u65f6\u5019\u4fe1\u8a89\u4e0d\u80fd\u4e3a \\(0\\) \uff0c\u4f60\u7684\u521d\u59cb\u4fe1\u8a89\u4e3a \\(r\\) \uff0c\u95ee\u4f60\u80fd\u4e0d\u80fd\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u60c5\u51b5\u4e0b\u505a\u5b8c\u6240\u6709\u9879\u76ee\u3002 \u6211\u4eec\u8003\u8651\u8d2a\u5fc3\u3002 \u4f60\u53d1\u73b0\u505a\u5b8c\u4e00\u4e2a\u9879\u76ee\u4e4b\u540e\uff0c\u4f60\u7684\u4fe1\u8a89\u81f3\u5c11\u662f \\(a_i+b_i\\) \u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6309\u7167 \\(a_i+b_i\\) \u5347\u5e8f\u6392\u5e8f\uff0c\u5e76\u4e14\u5728\u6b64\u57fa\u7840\u4e0a\u8ba9\u9650\u5236 \\(a_i\\) \u66f4\u5927\u7684\u6392\u5728\u524d\u9762\u3002 \u7136\u540e\u4ece\u5934\u5f00\u59cb\u6a21\u62df\u505a\u9879\u76ee\u7684\u8fc7\u7a0b\u5c31\u53ef\u4ee5\u4e86\u3002 \u4f60\u53d1\u73b0 \\(b_i\\) \u7684\u6b63\u8d1f\u4f1a\u5bfc\u81f4\u8d2a\u5fc3\u51fa\u73b0\u5947\u602a\u7684\u9519\u8bef\uff0c\u4f1a WA on test 5\u3002 \u6240\u4ee5\u6211\u4eec\u6b63\u8d1f\u5206\u5f00\u6392\u5e8f\uff0c\u5faa\u73af\u4e24\u6b21\u7136\u540e\u5224\u65ad\u53ef\u884c\u6027\u5c31\u53ef\u4ee5\u4e86\u3002 \uff08upd on 22.10.03\uff1a\u8fd9\u4e2a\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a Exchange Argument\u3002\uff09 CF 814D \u03c8(\uff40\u2207\u00b4)\u03c8 \u6709 \\(n\\) \u4e2a\u5706\uff0c\u4ed6\u4eec\u53ea\u80fd\u662f\u76f8\u4e92\u5305\u542b\uff0c\u76f8\u79bb\u6216\u8005\u76f8\u5207\u7684\u3002 \u5c06\u5176\u5206\u4e3a\u4e24\u7ec4\uff0c\u6bcf\u7ec4\u4e2d\uff0c\u53ea\u6709\u5947\u6570\u6b21\u8986\u76d6\u7684\u624d\u4f1a\u7b97\u5165\u9762\u79ef\uff0c\u6c42\u53ef\u80fd\u7684\u6700\u5927\u9762\u79ef\u3002 \uff08\u7ffb\u8bd1\u662f\u6211\u6254\u5728luogu\u8ba8\u8bba\u533a\u7684\uff09 \u6211\u4eec\u8003\u8651\u4e00\u4e2a\u8d2a\u5fc3\uff0c\u628a\u6240\u6709\u8986\u76d6\u6b21\u6570\u662f \\(2\\) \u7684\u5706\u5168\u90e8\u6254\u5230\u4e00\u7ec4\uff0c\u5269\u4e0b\u7684\u4e00\u7ec4\u3002 \u8bc1\u660e\u7565\uff08 \u7136\u540e\u53c8\u56e0\u4e3a\u5305\u542b\u5173\u7cfb\u662f\u5448\u6811\u5f62\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8ba9\u88ab\u5305\u542b\u7684\u6210\u4e3a\u7236\u4eb2\uff0c\u5916\u5c42\u7684\u6210\u4e3a\u513f\u5b50\uff0c\u7136\u540e\u5728\u6811\u4e0a\u8dd1\u4e00\u904d \\(dfs\\) \u7edf\u8ba1\u5373\u53ef\uff08\u4e0d\u8fc7\u5173\u7cfb\u662f\u6709\u53ef\u80fd\u53d8\u6210\u68ee\u6797\u7684\uff0c\u6240\u4ee5\u8981\u5efa\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\uff09\u3002 CF 954G \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e00\u5171\u6709 \\(n\\) \u9762\u5899\uff0c\u521d\u59cb\u6709 \\(a_i\\) \u4e2a\u5f13\u7bad\u624b\u5728\u7b2c \\(i\\) \u9762\u5899\u7684\u4f4d\u7f6e\u4e0a\u3002\u4e00\u4e2a\u5728 \\(i\\) \u4f4d\u7f6e\u7684\u5f13\u7bad\u624b\u53ef\u4ee5\u4fdd\u62a4 \\(|i - j| \\leq r\\) \u7684\u6240\u6709\u5899 \\(j\\) \u3002 \u4f60\u73b0\u5728\u53ef\u4ee5\u589e\u6d3e \\(k\\) \u4e2a\u5f13\u7bad\u624b\u5e76\u4e14\u4efb\u610f\u5206\u914d\u5b83\u4eec\u7684\u4f4d\u7f6e\u3002\u4f60\u9700\u8981\u6700\u5927\u5316\u88ab\u6570\u91cf\u6700\u5c11\u7684\u5f13\u7bad\u624b\u4fdd\u62a4\u7684\u5899\u88ab\u5f13\u7bad\u624b\u4fdd\u62a4\u7684\u6570\u91cf\u3002 \\(n \\leq 5 \\times 10^5, 0 \\leq r \\leq n, 0 \\leq k \\leq 10^{18} ,0 \\leq a_i \\leq 10^9\\) \uff08\u9898\u610f\u6765\u81ealuogu\u8ba8\u8bba\u533a\uff09 \u8bbe\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u7684 defence lv \u4e3a \\(d_i\\) \u53d1\u73b0\u8fd9\u4e2a\u9898\u7684\u6761\u4ef6\u662f \u201c\u6700\u5c0f\u503c\u6700\u5927\u201d\u3002 \u6240\u4ee5\u5f88\u660e\u663e\u662f\u4e8c\u5206\u7b54\u6848\u3002 \u8003\u8651\u4e8c\u5206\u8fd9\u4e2a\u503c \\(mid\\) \uff0c\u6bcf\u6b21 check \u7684\u65f6\u5019\u8003\u8651\u8d2a\u5fc3\u3002 \u5982\u679c\u6709\u4e00\u4e2a\u4f4d\u7f6e \\(i\\) \u7684 \\(d_i < mid\\) \u6211\u4eec\u5728\u4f4d\u7f6e \\(\\min(i+r,n)\\) \u653e \\(mid-d_i\\) \u4e2a archer \u5c31\u884c\u4e86\u3002 CF 845E \u03c8(\uff40\u2207\u00b4)\u03c8 \u6709\u4e00\u4e2a \\(n\\) \u884c \\(m\\) \u5217\u7684\u7f51\u683c\u3002\u5176\u4e2d\u6709 \\(k+1\\) \u4e2a\u683c\u5b50\u7740\u706b\u4e86\u3002\u6bcf\u4e2a\u65f6\u523b\uff0c\u706b\u4f1a\u8513\u5ef6\u81f3\u76f8\u90bb\u7684\u683c\u5b50\uff08\u516b\u8054\u901a\uff09\u3002 \u73b0\u5728\u7ed9\u51fa\u5176\u4e2d \\(k\\) \u4e2a\u7740\u706b\u7684\u683c\u5b50\uff0c\u8bf7\u786e\u5b9a\u7b2c \\(k+1\\) \u683c\u5b50\uff0c\u4f7f\u5f97\u7f51\u683c\u88ab\u70e7\u5b8c\u7684\u7528\u65f6\u6700\u77ed\u3002 \u4f60\u53ea\u9700\u8981\u8f93\u51fa\u6700\u77ed\u7528\u65f6\u3002 \\(n,m \\le 10^9,k\\le 500\\) \u3002 \u53d1\u73b0 \\(n,m\\) \u975e\u5e38\u5927\uff0c\u4f46\u662f \\(k\\) \u975e\u5e38\u5c0f\u3002 \u6240\u4ee5\u6211\u4eec\u4ece \\(k\\) \u5165\u624b\uff0c\u8003\u8651\u53bb\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u65f6\u523b\uff0c\u6bcf\u4e00\u4e2a\u70b9\u80fd\u8513\u5ef6\u5230\u7684\u4f4d\u7f6e\u3002 \u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u6bcf\u79d2\u53ea\u6269\u5c55\u4e00\u5c42\u5e76\u4e14\u662f\u516b\u8054\u901a\uff0c\u6240\u4ee5\u53ef\u4ee5 \\(\\text{O}(1)\\) \u7b97\u8fd9\u4e2a\u77e9\u5f62\u7684\u9876\u70b9\u7684\u5750\u6807\u3002 \u53c8\u53d1\u73b0\u8fd9\u4e2a\u201c\u65f6\u95f4\u201d\u6ca1\u6cd5\u5f88\u597d\u7684\u6c42\u51fa\u6765\uff0c\u4f46\u662f\u521a\u597d\u5177\u6709\u5355\u8c03\u6027\u3002 \u6240\u4ee5\u8003\u8651\u4e8c\u5206\u3002 \u6bcf\u6b21\u4e8c\u5206\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8ba1\u7b97\u51fa\u6240\u6709\u77e9\u5f62\u8986\u76d6\u7684\u9762\u79ef\u3002 \u7136\u540e\u4f60\u53bb\u770b\u6700\u8fb9\u4e0a\u7684\u90a3\u56db\u4e2a\u89d2\uff08\u56e0\u4e3a\u5f88\u660e\u663e\u6269\u5c55\u5230\u4ed6\u4eec\u7684\u65f6\u95f4\u4e00\u5b9a\u662f\u6bcf\u4e2a\u65b9\u5411\u4e0a\u6700\u665a\u7684\uff09\u7684\u7a7a\u4f59\uff08\u5982\u679c\u6709\uff09\u6709\u6ca1\u6709\u529e\u6cd5\u7528\u4e00\u4e2a\u70b9\u5c31\u80fd\u8986\u76d6\u5b8c\u5c31\u884c\u3002 \u56e0\u4e3a\u503c\u57df\u6bd4\u8f83\u5927\u6240\u4ee5\u6211\u4eec\u9700\u8981\u79bb\u6563\u5316\u3002 \u8ba1\u7b97\u9762\u79ef\u53ef\u4ee5\u4f7f\u7528\u4e8c\u7ef4\u5dee\u5206\u6216\u8005\u626b\u63cf\u7ebf\u3002 CF 547D \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5750\u6807\u7cfb\u5f53\u4e2d\u7684 \\(n\\) \u4e2a\u6574\u70b9\u7ea2\u84dd\u67d3\u8272\uff0c\u8981\u6c42\u540c\u4e00\u4e2a\u76f4\u7ebf\uff08 \\(y\\) or \\(x\\) \u65b9\u5411\uff09\u4e0a\u7684\u7ea2\u84dd\u8282\u70b9\u4e2a\u6570\u76f8\u5dee\u4e0d\u8d85\u8fc7\u4e00\u3002 \u95ee\u5982\u4f55\u67d3\u8272\uff0c\u591a\u89e3\u4efb\u610f\u5373\u53ef\u3002 \u4fdd\u8bc1\u6709\u7b54\u6848\u3002 \u9996\u5148\u6211\u4eec\u53d1\u73b0\u4e00\u5b9a\u4f1a\u6709\u7b54\u6848\uff0c\u53c8\u662f\u8981\u6211\u4eec\u628a\u70b9\u5206\u6210\u4e24\u4e2a\u90e8\u5206\u3002 \u6240\u4ee5\u6211\u4eec\u60f3\u5230\u4e86\u4e8c\u5206\u56fe\uff0c\u624b\u5143\u4e00\u4e0b\u6837\u4f8b\u53ef\u4ee5\u53d1\u73b0\u786e\u5b9e\u662f\u4e8c\u5206\u56fe\u3002 \u6240\u4ee5\u76f4\u63a5\u5bf9\u4e8e\u540c\u4e00\u76f4\u7ebf\u4e0a\u7684\u70b9\u5efa\u8fb9\u7136\u540e\u4e8c\u5206\u56fe\u67d3\u8272\u5373\u53ef\u3002 \u53ef\u4ee5\u5148 \\(\\text{O}(n \\log n)\\) \u6392\u5e8f\u518d\u5efa\u8fb9\uff0c\u6216\u8005\u7528\u4e00\u4e2a \\(\\text{O}(n)\\) \u7684\u65b9\u6cd5\u5efa\u8fb9\uff0c\u5177\u4f53\u65b9\u6cd5\u89c1\u63d0\u4ea4\u8bb0\u5f55\uff1a https://codeforces.com/contest/547/submission/131984717","title":"CF & AT \u6742\u9898"},{"location":"rec/old/old-cf-at-misc/#cf-at","text":"\u56e0\u4e3a\u6ca1\u5565\u65f6\u95f4\uff0c\u4e5f\u4e0d\u592a\u60f3\u5199\u9898\u89e3\uff0c\u6240\u4ee5\u4e00\u4e9b\u6742\u9898\u4e4b\u7c7b\u7684\u7b80\u5355\u9898\u89e3\u5c31\u653e\u5728\u8fd9\u91cc\u4e86\u3002 \uff08\u662f\u65f6\u5019\u6539\u6539\u5f3a\u8feb\u75c7\u4e86\uff09 \u4e00\u822c\u53ea\u4f1a\u6709CF\u548cAT\u7684\uff0c\u6574\u573a\u6bd4\u8d5b\u7684\u9898\u89e3\u4f1a\u653e\u5728 Codeforces Solution \u91cc\u9762\u3002 \u5176\u5b9e\u5927\u90e8\u5206\u90fd\u662f\u53e3\u80e1\u7684\uff0c\u6ca1\u65f6\u95f4\u5199\u4ee3\u7801\uff0c\u4ee5\u540e\u518d\u8865\uff08","title":"CF &amp; AT \u6742\u9898"},{"location":"rec/old/old-cf-at-misc/#cf-1473e","text":"\u5b9a\u4e49\u4e00\u4e2a\u8def\u5f84\u7684\u8d21\u732e\u4e3a\u4e0b\u9762\u7684\u90a3\u4e2a\u5f0f\u5b50\uff0c\u95ee \\(1 \\to \\forall i\\) \u7684\u8def\u5f84\u7684\u8d21\u732e\u7684\u6700\u5c0f\u503c \u53d1\u73b0\u67ff\u5b50\uff1a \\(\\sum\\limits_{i=1}^kw_{e_i} -\\max\\limits_{i=1}^kw_{e_i} + \\min\\limits_{i=1}^kw_{e_i}\\) \u5b9e\u9645\u4e0a\u5c31\u662f\u5728\u7ef4\u62a4\u6240\u6709\u8fb9\u6743\u53bb\u6389\u6700\u5927\u52a0\u4e0a\u4e00\u4e2a\u6700\u5c0f\u3002 \u4e5f\u5c31\u662f\u5c11\u4e00\u4e2a\u8fb9\uff0c\u53e6\u5916\u4e00\u4e2a\u8fb9\u7b97\u4e24\u6b21\u3002 \u90a3\u4e48\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u51b3\u7b56\u90fd\u4f1a\u6709\u53bb\u6389\u4e0d\u52a0\u4e0a\uff0c\u4e0d\u53bb\u6389\u4e0d\u52a0\u4e0a\uff0c\u52a0\u4e0a\u4e0d\u53bb\u6389\uff0c\u52a0\u4e0a\u7136\u540e\u53bb\u6389\u56db\u79cd\u60c5\u51b5\uff0c \u6240\u4ee5\u628a\u6bcf\u4e2a\u70b9\u62c6\u6210 \\(4\\) \u4e2a\u72b6\u6001\uff0c\u95ee\u9898\u5c31\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5728\u5206\u5c42\u56fe\u4e0a\u6c42\u6700\u77ed\u8def\uff0c\u56e0\u4e3a\u4f60\u591a\u52a0\u7684\u662f \\(\\min\\) \u800c\u4e14\u6c42\u7684\u4e5f\u662f \\(\\min\\) \uff0c\u6240\u4ee5\u8fd9\u4e2a\u505a\u6cd5\u662f\u5bf9\u7684\u3002","title":"CF 1473E"},{"location":"rec/old/old-cf-at-misc/#cf-516e-by-textdcolorredtextreamoon","text":"*3100 \u7684\u5927\u6bd2\u7624\u6570\u8bba\u3002 \u4e0d\u592a\u4f1a\uff0c\u4e4b\u540e\u518d\u91cd\u65b0\u95ee\u95ee\u51fa\u9898\u4eba\u548b\u505a\u7684\uff08","title":"CF 516E \uff08By \\(\\text{d}\\color{red}{\\text{reamoon}}\\)\uff09"},{"location":"rec/old/old-cf-at-misc/#abc-209e","text":"\u535a\u5f08\u8bba+\u56fe\u8bba \u5fc5\u987b\u8981\u548c\u4e0a\u4e00\u4e2a\u5355\u8bcd\u91cd\u5408\u4e09\u4e2a\u4ee5\u4e0a\u7684\u5b57\u6bcd\u7684\u5355\u8bcd\u63a5\u9f99\uff0c\u7ed9\u5b9a\u8bcd\u5178\uff0c\u4e14\u5927\u5c0f\u5199\u654f\u611f\u3002 \u95ee\u8f93\u8d62\u6216\u5e73\u3002 \u4f60\u53d1\u73b0\u6211\u4eec\u4e0d\u4f1a\u5173\u5fc3\u9664\u4e86\u524d\u4e09\u4e2a\u6216\u8005\u540e\u4e09\u4e2a\u5b57\u7b26\u4ee5\u5916\u7684\u4e1c\u897f\u3002 \u800c\u4e14\u8981\u63a5\u9f99\u5c31\u5fc5\u987b\u5b8c\u5168\u91cd\u5408\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u5148\u5b57\u7b26\u4e32hash\u4e00\u4e0b\u524d\u4e09\u4f4d\u548c\u540e\u4e09\u4f4d\uff0c\u7136\u540e\u628a\u524d\u4e09\u4f4d\u5411\u540e\u4e09\u4f4d\u8fde\u8fb9\u3002 \u7136\u540e\u6211\u4eec\u4f1a\u5f97\u5230\u4e00\u5f20\u6709\u5411\u56fe\u3002 \u8003\u8651\u600e\u4e48\u7ef4\u62a4\u5148\u624b\u5fc5\u80dc\u6001\u548c\u5148\u624b\u5fc5\u8d25\u6001\u3002 \u5982\u679c\u5f53\u524d\u72b6\u6001\u80fd\u53bb\u5f80\u7684\u72b6\u6001\u90fd\u662f\u5fc5\u80dc\u6001\u6216\u8005\u65e0\u6cd5\u53bb\u5f80\u4efb\u610f\u72b6\u6001\uff0c\u5219\u5b83\u662f\u5148\u624b\u5fc5\u8d25\u6001\u3002 \u5982\u679c\u5b83\u80fd\u5230\u8fbe\u81f3\u5c11\u4e00\u4e2a\u5fc5\u8d25\u6001\uff0c\u90a3\u4e48\u4ed6\u662f\u5fc5\u80dc\u6001\u3002 \u5176\u4ed6\u7684\u90fd\u662f\u5e73\u5c40\u3002 \u90a3\u4e48\u5efa\u53cd\u56fe\u62d3\u6251\u66f4\u65b0\u5373\u53ef\uff0c\u66f4\u65b0\u4e0d\u5230\u7684\u90fd\u662f\u5e73\u5c40\u3002 \u53e6\u5916\uff0c\u53ea\u8981\u4e00\u4e2a\u70b9\u786e\u5b9a\u4e86\u5fc5\u80dc\u6216\u8005\u5fc5\u8d25\u6001\uff0c\u90a3\u4e48\u5b83\u4e5f\u53ef\u4ee5\u5165\u961f\uff0c\u56e0\u4e3a\u4e0d\u4f1a\u518d\u88ab\u66f4\u6539\u4e86\u3002","title":"ABC 209E"},{"location":"rec/old/old-cf-at-misc/#abc-191d","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5706\uff0c\u95ee\u5706\u4e0a\u548c\u5706\u5185\u6574\u70b9\u4e2a\u6570\u3002 \u662f\u67d0\u4e2aHAOI\u7684\u8d85\u7ea7\u52a0\u5f3a\u7248\uff08 \u8fd9\u9898\u5361\u7cbe\u5ea6\u7279\u522b\u5413\u4eba\uff0cYL\u5f53\u65f6\u5361 \\(1e-14\\) \u8fc7\u4e86\u3002 \u6211\u5361 \\(1e-10\\) \u7206\u4e86\uff0c\u672c\u6765\u662f\u5fd8\u4e86\u8fd9\u4e2a\u9898\u7684\uff0c\u7ed3\u679cDM\u7684\u6bd2\u7624\u5361\u7cbe\u5ea6\u8bfe\u8bb2\u4e86\u8fd9\u4e2a\u3002 \u5c31\u56de\u6765\u5199\u4e00\u4e0b\u3002 \u53d1\u73b0\u5706\u5fc3\u5750\u6807\u548c\u534a\u5f84\u90fd\u662f\u6d6e\u70b9\u6570\uff0c\u4e0d\u8fc7\u4e0d\u8d85\u8fc7 \\(10^5\\) \u800c\u4e14\u6700\u591a\u6709\u56db\u4f4d\u5c0f\u6570\u70b9\u3002 \u6240\u4ee5\u6211\u4eec\u8003\u8651\u5148\u7ed9\u6bcf\u4e2a\u70b9\u7684 \\(x,y\\) \u90fd\u4e58\u4e0a \\(10^4\\) \u53d8\u6210\u6574\u6570\u3002 \u7136\u540e\u8003\u8651\u52fe\u80a1\u5b9a\u7406+\u679a\u4e3e\u5224\u65ad\u5408\u6cd5\u4e0a\u4e0b\u754c\u5c31\u53ef\u4ee5\u4e86\u3002","title":"ABC 191D"},{"location":"rec/old/old-cf-at-misc/#cf-261d","text":"\u6ca1\u505a\uff0c\u7a7a\u7740\u3002","title":"CF 261D"},{"location":"rec/old/old-cf-at-misc/#cf-1526c2","text":"\u95ee\u4e00\u4e2a\u5e8f\u5217\u7684\u6700\u957f\u5b50\u5e8f\u5217\uff0c\u4f7f\u5b50\u5e8f\u5217\u7684\u4efb\u610f\u4f4d\u7f6e\u7684\u524d\u7f00\u548c\u4e0d\u5c0f\u4e8e \\(0\\) \u3002 \u5927\u50bb\u903c\u9898\uff0c\u79d2\u4e86\u3002 \u8003\u8651\u7528\u4e00\u4e2a\u4f18\u5148\u961f\u5217\u7ef4\u62a4\uff0c\u4e00\u4e2a\u4e00\u4e2a\u5403\uff0c\u5982\u679c\u5403\u6b7b\u4e86\u5c31\u628a\u6700\u5c0f\u7684\u5410\u51fa\u6765\u7136\u540e\u7ee7\u7eed\u5403\u3002 \u6700\u540e\u8f93\u51fa size \u8d70\u4eba\u3002","title":"CF 1526C2"},{"location":"rec/old/old-cf-at-misc/#cf-1006f","text":"dm \u8bb2\u7684\u4e00\u9053\u53cc\u5411BFS\u3002 \u61d2\u5f97\u5199\u6240\u4ee5\u8f6c\u4e86\u522b\u4eba\u7684sol \u9898\u610f\u662f\u6709\u4e00\u4e2a \\(n\\times m\\) \u7684\u5730\u56fe\uff0c\u7136\u540e\u4ece\u5de6\u4e0a\u89d2\u8d70\u5230\u53f3\u4e0b\u89d2\uff0c\u95ee\u6700\u540e\u5f02\u6216\u7684\u503c\u7b49\u4e8e \\(k\\) \u7684\u8def\u5f84\u6709\u591a\u5c11\u6761\u3002 \u601d\u8def\u5c31\u662f\u6298\u534a\u641c\u7d22\uff0c\u53ef\u4ee5\u964d\u4f4e\u5f88\u591a\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u56e0\u4e3a\u5f53\u5730\u56fe\u5c0f\u7684\u65f6\u5019\uff0c \\(n+m\\) \u5c31\u4e0d\u6ee1\u8db3\u6298\u534a\u7684\u6761\u4ef6\u4e86\uff0c \u6240\u4ee5\u8fd9\u91cc\u7528 \\(n+m+2\\) \u4f5c\u4e3a\u6761\u4ef6\uff0c\u9996\u5148\u6211\u4eec\u5148\u641c\u7d22\u6b65\u6570\u4e3a \\(n+m+2\\) \u7684\u4e00\u534a\u7684\u503c\u4e3a\u641c\u7d22\u7ec8\u70b9\uff0c\u8bb0\u5f55\u5f53\u524d\u7684\u5f02\u6216\u503c\uff0c\u7136\u540e\u518d\u4ece\u7ec8\u70b9\u5f00\u59cb\u641c\u7d22\uff0c \u5f53\u641c\u7d22\u5230 \\(n+m+2\\) \u7684\u4e00\u534a\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5224\u65ad\u5f53\u524d\u70b9\u7684\u4e0e \\(k\\) \u7684\u5f02\u6216\u503c\u662f\u5426\u6709\u6807\u8bb0\u8fc7\uff0c\u6709\u7684\u8bdd\u5c31\u8bf4\u660e\u8fd9\u6574\u4e2a\u4e00\u6761\u8def\u7684\u5f02\u6216\u503c\u7b49\u4e8e \\(k\\) \uff0c\u76f4\u63a5\u52a0\u7ed9 \\(ans\\) \u5c31\u597d\u4e86\u3002 \u539f\u6587\u94fe\u63a5\uff1a https://blog.csdn.net/Charles_Zaqdt/article/details/81077919","title":"CF 1006F"},{"location":"rec/old/old-cf-at-misc/#arc-084-db","text":"dm \u8bb2\u7684\u4e00\u9053\u6570\u8bbaBFS\u3002 \u627e\u51fa\u6570\u4f4d\u548c\u6700\u5c0f\u7684 \\(k\\) \u7684\u500d\u6570\u662f\u591a\u5c11\u3002 2e5 \u53d1\u73b0\u53ef\u80fd\u4f1a\u70b8 __int128 . \u6240\u4ee5\u6211\u4eec\u8003\u8651\u5bf9\u6570\u4f4d\u8fdb\u884c\u64cd\u4f5c\u3002 \u53d1\u73b0\u5982\u679c\u4ece \\(1\\) \u5f00\u59cb\uff0c\u53ea\u7528\u4e24\u79cd\u64cd\u4f5c\u5c31\u53ef\u4ee5\u5f97\u5230\u4efb\u610f\u4e00\u4e2a\u6570\uff08\u5176\u5b9e\u771f\u5b9e\u60c5\u51b5\u4e00\u79cd\u5c31\u53ef\u4ee5\u4e86\uff09 \\(+1\\) \u4e14 cost \u4e3a \\(1\\) \\(\\times 10\\) \u4e14 cost \u4e3a \\(0\\) \u3002 \u6240\u4ee5\u5176\u5b9e\u8fd9\u662f\u4e2a 01BFS\u3002 \u4ee4\u6bcf\u4e00\u4e2a\u72b6\u6001\u90fd\u5bf9 \\(k\\) \u53d6\u6a21\uff0c\u7136\u540e\u4ece \\(1\\) \u5f00\u59cb\u3002 \u5982\u679c\u5f53\u524d\u8fd9\u4e2a\u64cd\u4f5c\u662f cost \u4e3a \\(1\\) \u7684\u64cd\u4f5c\uff0c\u6254\u5230\u961f\u5c3e\uff0c\u53cd\u4e4b\u6254\u5230\u961f\u5934\u3002 \u7136\u540e01BFS\u5373\u53ef\u3002","title":"ARC 084 D/B"},{"location":"rec/old/old-cf-at-misc/#abc-203d","text":"\u4e00\u9053 01 \u4e8c\u5206\u7684\u677f\u5b50\uff1f \u8fd9\u4e2a trick \u4e0d\u662f\u5f88\u5e38\u89c1\uff0c\u4f46\u662f\u53ea\u8981\u4e00\u51fa\u5c31\u80fd\u5361\u5230\u4eba\u3002 \u8fd9\u9053\u9898\u8981\u6c42\u4f60\u6c42\u51fa\u4e00\u4e2a \\(n\\times n\\) \u7684\u77e9\u9635\u5f53\u4e2d\u7684\u6240\u6709 \\(k\\times k\\) \u5927\u5c0f\u7684\u5b50\u77e9\u9635\u7684\u8d21\u732e\u7684\u6700\u5c0f\u503c\u3002 \u4e00\u4e2a\u77e9\u9635\u7684\u8d21\u732e\u5b9a\u4e49\u4e3a\u628a\u77e9\u9635\u6240\u6709\u5143\u7d20\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u4e4b\u540e\u7684\u7b2c \\(\\lfloor \\dfrac{k^2}{2} \\rfloor +1\\) \u5927\u7684\u6570\uff08\u53ef\u4ee5\u7406\u89e3\u4e3a \u4e2d\u4f4d\u6570 \uff09 \u5927\u5c0f\u662f \\(800^2\\) \u3002 \u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u4e8c\u5206\u8f6c\u5316\u4e3a\u5224\u5b9a\uff1a\u5b58\u4e0d\u5b58\u5728\u4e00\u4e2a\u5b50\u77e9\u9635\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u77e9\u9635\u7684\u8d21\u732e\u6bd4 \\(x\\) \u5c0f\uff1f \u7136\u540e\u6211\u4eec\u8ba9 \\(x\\) \u5c3d\u91cf\u5c0f\uff0c\u5f53\u8fd9\u4e2a\u77e9\u9635\u7684\u8d21\u732e\u5c31\u662f \\(x\\) \u7684\u65f6\u5019\uff0c\u7b54\u6848\u5c31\u662f \\(x\\) \u3002 \u4f60\u8003\u8651\u53bb\u4e8c\u5206\u8fd9\u4e2a\u6570\u5b57 \\(x\\) \uff0c\u7136\u540e\u5bf9\u4e8e\u4f60\u4e8c\u5206\u5230\u7684\u77e9\u9635\uff0c\u4ee4\uff1a \\[\\text{submatrix}[i][j]=\\begin{cases}0 & ,\\text{submatrix}[i][j]\\le x\\\\1 & ,\\text{submatrix}[i][j] > x\\end{cases}\\] \u5982\u679c\u8bf4\u8fd9\u4e2a\u5b50\u77e9\u9635\u7684\u548c\u662f \\(<\\lfloor \\dfrac{k^2}{2} \\rfloor +1\\) \u7684\uff0c\u90a3\u4e48\u5f88\u660e\u663e\u6bd4 \\(x\\) \u5927\u7684\u6570\u5c31\u4e00\u5b9a\u5c11\u4e8e \\(\\lfloor \\dfrac{k^2}{2} \\rfloor +1\\) \u4e2a\u3002 \u90a3\u4e48\u5b83\u7684\u8d21\u732e\u80af\u5b9a\u6bd4 \\(x\\) \u5c0f\uff0c\u6ee1\u8db3\u8981\u6c42\uff0c\u53cd\u4e4b\u5219\u4e0d\u6ee1\u8db3\u3002 \u7136\u540e\u5199\u4e2a\u4e8c\u7ef4\u524d\u7f00\u548c\u641e\u641e\u5c31\u884c\u4e86\u3002","title":"ABC 203D"},{"location":"rec/old/old-cf-at-misc/#cf-1059d","text":"\u7ed9\u4e00\u5806\u70b9\uff0c\u662f\u5426\u6709\u4e00\u4e2a\u548c \\(x\\) \u8f74\u76f8\u5207\u7684\u5706\u4f7f\u5f97\u6bcf\u4e00\u4e2a\u70b9\u90fd\u88ab\u5b83\u5305\u542b\u3002 \u95ee\u8fd9\u4e2a\u5706\u7684\u534a\u5f84\u6700\u5c0f\u662f\u591a\u5c11\u3002 \u9996\u5148\u4f60\u53d1\u73b0\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u70b9\u5bf9 \\(((x_1,y_1),(x_2,y_2))\\) \u6ee1\u8db3 \\(y_1\\times y_2 <0\\) \uff0c\u90a3\u4e48\u5c31\u5f88\u660e\u663e\u65e0\u89e3\u3002 \u7136\u540e\u6211\u4eec\u628a\u6240\u6709\u70b9\u8f6c\u5230 \\(x\\) \u8f74\u4e0a\u65b9\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4f60\u4e8c\u5206\u5230\u7684 \\(r\\) \uff0c\u6211\u4eec\u53ef\u4ee5\u626b\u63cf\u4e00\u904d\u70b9\u96c6\u5408\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9 \\((x,y)\\) \u5229\u7528\u52fe\u80a1\u5b9a\u7406\u6c42\u51fa\u4e00\u4e2a\u533a\u95f4\uff0c\u4f7f\u5f97\u533a\u95f4\u91cc\u7684\u6bcf\u4e00\u4e2a\u70b9\u5230 \\((x,y)\\) \u7684\u8ddd\u79bb\u5728\u533a\u95f4 \\([y,r]\\) \u5f53\u4e2d\u3002 \u7136\u540e\u5bf9\u4e8e\u6240\u6709\u7684\u533a\u95f4\u6c42\u4e00\u4e2a\u4ea4\u96c6\uff0c\u5982\u679c\u4ea4\u96c6\u4e3a\u7a7a\u96c6\u90a3\u4e48\u8fd9\u4e2a \\(r\\) \u4e0d\u5408\u6cd5\uff0c\u53cd\u4e4b\u5408\u6cd5\u3002 \u7136\u540e\u6211\u4eec\u4f7f\u7528\u5b9e\u6570\u4e8c\u5206\uff0c\u4f46\u662f\u56e0\u4e3a\u8fd9\u9898\u5361\u7cbe\u5ea6\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u4f7f\u7528 \\(eps\\) \u6765\u5224\u65ad\uff0c\u800c\u662f\u76f4\u63a5\u6309\u6b21\u6570\u5faa\u73af\u3002 \u8fd9\u9898\u7cbe\u5ea6\u8981\u6c42 \\(10^{-6}\\) \uff0c\u6240\u4ee5\u4f60\u5927\u6982\u5faa\u73af\u4e2a \\(10^3\\) \u6b21\u5c31\u5dee\u4e0d\u591a\u4e86\u3002","title":"CF 1059D"},{"location":"rec/old/old-cf-at-misc/#agc-006d","text":"\u4e5f\u662f\u4e00\u9053\u975e\u5e38\u5999\u7684 01 \u4e8c\u5206\u3002 \u5b9a\u4e49\u4e00\u4e2a\u6570\u5b57\u91d1\u5b57\u5854\uff0c\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u662f\u5b83\u4e0b\u4e00\u5c42\u7684\u4e09\u4e2a\u8282\u70b9\u7684 \u4e2d\u4f4d\u6570 \u3002 \u7ed9\u5b9a\u6700\u540e\u4e00\u5c42\uff0c\u6c42\u7b2c\u4e00\u5c42\u6700\u6709\uff0c \\(2e5\\) \u5c42\u3002 \u53d1\u73b0\u8981 \\(\\text{O}(n \\log n)\\) \u624d\u884c\u3002 \u7136\u540e\u4f60\u8003\u8651\u4e8c\u5206\u9876\u5c42\u8282\u70b9 \\(x\\) \u7684\u6570\u503c\u3002 \u5bf9\u4e8e\u6700\u540e\u4e00\u5c42\u7684\u8282\u70b9\uff0c\u6211\u4eec\u4ee4\u6240\u6709\u7684 \\(\\le x\\) \u7684\u8282\u70b9\u53d8\u6210 \\(0\\) \uff0c\u53cd\u4e4b\u4e3a \\(1\\) \uff08\u548c ABC203D \u4e00\u4e2a\u601d\u8def\uff09\u3002 \u7136\u540e\u4f60\u8003\u8651\u5411\u4e0a\u9012\u63a8\u7684\u8fc7\u7a0b\u3002 \u4f60\u53d1\u73b0\uff0c\u56e0\u4e3a \\(x\\) \u662f\u6700\u9876\u5c42\u8282\u70b9\uff0c\u6240\u4ee5\u5982\u679c\u5e95\u5c42\u6709\u8fde\u7eed\u7684\u4e24\u4e2a \\(1\\) \u6216\u8005\u8fde\u7eed\u7684\u4e24\u4e2a \\(0\\) \uff0c\u4ed6\u4eec\u5c31\u4f1a\u4e00\u76f4\u5411\u4e0a\u8d70\uff0c\u800c\u4e14\u4e0d\u65ad\u5f80\u4e2d\u95f4\u9760\u3002 \u6240\u4ee5\u6700\u9760\u8fd1\u4e2d\u95f4\u7684\u90a3\u4e00\u7ec4\u5c31\u662f\u5854\u9876\u7684 \\(0\\) \u6216\u8005 \\(1\\) \u3002 \u5982\u679c\u4f60\u63a8\u51fa\u6765\u5854\u9876\u662f \\(0\\) ,\u90a3\u4e48\u5c31\u6ee1\u8db3\u60c5\u51b5\uff0c\u53cd\u4e4b\u4e0d\u6ee1\u8db3\u3002 \u7136\u540e\u4f60\u518d\u7279\u5224\u4e00\u4e0b\u6839\u672c\u6ca1\u6709\u8fde\u7eed\u7684\u6570\u5b57\u7684\u60c5\u51b5\u5373\u53ef\u3002","title":"AGC 006D"},{"location":"rec/old/old-cf-at-misc/#cf-865c","text":"\u4e00\u9053\u671f\u671b+\u4e8c\u5206\u3002 \u4e5f\u6bd4\u8f83\u5999\u3002 \u5e2e PWK \u4fee\u4e86\u4ed6\u7684 \u9898\u89e3 \uff0c\u6240\u4ee5\u9898\u610f\u5c31\u7528\u4ed6\u7684\u4e86\uff1a \u4f60\u662f\u4e00\u4e2a up \u4e3b\uff0c\u4f60\u8981\u5f55\u4e00\u6bb5\u901f\u901a RA2YR \u7684\u89c6\u9891\uff0c \u6218\u5f79\u6709 \\(n\\) \u5173\uff0c\u6bcf\u5173\u4f60\u6709 \\(p_i\\%\\) \u7684\u53ef\u80fd\u6027\u82b1 \\(F_i\\) \u7684\u65f6\u95f4\u901a\u8fc7\uff0c \\((1-p_i)\\%\\) \u7684\u53ef\u80fd\u6027\u82b1\u6389 \\(S_i\\) \u7684\u65f6\u95f4\u901a\u8fc7\uff08\u5931\u8bef\u4e86\uff09\uff0c\u5176\u4e2d\u4fdd\u8bc1 \\(F_i>S_i\\) \u3002 \u4f46\u56e0\u4e3a\u4f60\u60f3\u201c\u901f\u901a\u201d\uff0c\u4f60\u4e0d\u5e0c\u671b\u4f60\u7684\u89c6\u9891\u957f\u5ea6\u8d85\u8fc7 \\(m\\) \u3002 \u5f53\u4f60\u8ba4\u4e3a\u81ea\u5df1\u63a5\u4e0b\u6765\u53ef\u80fd\u5f55\u4e0d\u5b8c\uff08\u63a5\u7740\u5f55\u5f55\u5b8c\u4e0d\u5982\u91cd\u65b0\u5f55\uff09\u65f6\uff0c\u4f60\u4f1a\u91cd\u65b0\u5f00\u59cb\u5f55\uff0c\u6c42\u5f55\u5b8c\u6574\u4e2a\u6e38\u620f\u7684\u65f6\u95f4\u671f\u671b\u3002 \u8003\u8651\u8bbe \\(f_{i,j}\\) \u8868\u793a\u6253\u8fc7\u7b2c \\(i\\) \u5173\uff0c\u4f7f\u7528 \\(j\\) \u7684\u65f6\u95f4\u7684\u671f\u671b\u3002 \u7136\u540e\u56e0\u4e3a\u662f\u6709\u65f6\u95f4\u9650\u5236\u7684\uff0c\u6240\u4ee5\u4f60\u4f1a\u63a8\u51fa\u4e00\u4e2a\u8fd9\u6837\u7684\u67ff\u5b50\uff08\u4e5f\u662fPWK\u7684\uff09\uff1a \\[ f(i,j)=\\begin{cases} 0 ,& i=n,j\\le m\\\\ f(0,0),& j >m \\\\ \\min(f(0,0),e1+e2) ,& \\text{otherwise.} \\end{cases} \\] \u5176\u4e2d $e_1=p_{i+1} \\times f(i+1,j+f_{i+1})+f_{i+1})) $\u3002 \\(e_2=p_{i+1}\\times(1-p_{i+1})\\times(f(i+1,j+S_{i+1})+S_{i+1})\\) \u3002 \u7136\u540e\u4f60\u53d1\u73b0 \\(f_{0,0}\\) \u4f1a\u5bfc\u81f4\u8f6c\u79fb\u6709\u73af\uff0c\u6240\u4ee5\u628a \\(f_{0,0}\\) \u5f53\u4f5c\u4e00\u4e2a\u5e38\u6570\uff0c\u4ece \\(n\\) \u5f00\u59cb\u5012\u5e8f\u679a\u4e3e\u3002 \u7136\u540e\u6700\u4f18\u91cd\u5f00\u65f6\u95f4\u4e00\u5b9a\u662f\u7b49\u4e8e\u671f\u671b\u65f6\u95f4\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206\u4ed6\u91cd\u5f00\u7684\u65f6\u95f4\u3002 \u7136\u540e\u5229\u7528 \\(f_{0,0}\\) \u7684\u503c\u5224\u65ad\u53ef\u884c\u6027\u5373\u53ef \uff08 \\(f_{0,0}<mid\\) \uff09\u3002","title":"CF 865C"},{"location":"rec/old/old-cf-at-misc/#cf-1203f1","text":"\u6709 \\(i\\) \u4e2a\u9879\u76ee\uff0c\u6bcf\u4e00\u4e2a\u9879\u76ee\u6709\u4e00\u4e2a\u9650\u5236\u548c\u4e00\u4e2a\u6743\u503c\uff08\u6743\u503c\u53ef\u4ee5\u4e3a\u8d1f\u6570\uff09\u3002 \u4f60\u505a\u4e00\u4e2a\u9879\u76ee\u7684\u8bdd\uff0c\u4f60\u7684\u4fe1\u8a89\u9700\u8981\u8fbe\u5230\u9650\u5236 \\(a_i\\) \uff0c\u505a\u5b8c\u4e4b\u540e\u4f60\u7684\u4fe1\u8a89\u4f1a\u52a0\u4e0a\u6743\u503c \\(b_i\\) \u3002 \u505a\u5b8c\u9879\u76ee\u7684\u65f6\u5019\u4fe1\u8a89\u4e0d\u80fd\u4e3a \\(0\\) \uff0c\u4f60\u7684\u521d\u59cb\u4fe1\u8a89\u4e3a \\(r\\) \uff0c\u95ee\u4f60\u80fd\u4e0d\u80fd\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u60c5\u51b5\u4e0b\u505a\u5b8c\u6240\u6709\u9879\u76ee\u3002 \u6211\u4eec\u8003\u8651\u8d2a\u5fc3\u3002 \u4f60\u53d1\u73b0\u505a\u5b8c\u4e00\u4e2a\u9879\u76ee\u4e4b\u540e\uff0c\u4f60\u7684\u4fe1\u8a89\u81f3\u5c11\u662f \\(a_i+b_i\\) \u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6309\u7167 \\(a_i+b_i\\) \u5347\u5e8f\u6392\u5e8f\uff0c\u5e76\u4e14\u5728\u6b64\u57fa\u7840\u4e0a\u8ba9\u9650\u5236 \\(a_i\\) \u66f4\u5927\u7684\u6392\u5728\u524d\u9762\u3002 \u7136\u540e\u4ece\u5934\u5f00\u59cb\u6a21\u62df\u505a\u9879\u76ee\u7684\u8fc7\u7a0b\u5c31\u53ef\u4ee5\u4e86\u3002 \u4f60\u53d1\u73b0 \\(b_i\\) \u7684\u6b63\u8d1f\u4f1a\u5bfc\u81f4\u8d2a\u5fc3\u51fa\u73b0\u5947\u602a\u7684\u9519\u8bef\uff0c\u4f1a WA on test 5\u3002 \u6240\u4ee5\u6211\u4eec\u6b63\u8d1f\u5206\u5f00\u6392\u5e8f\uff0c\u5faa\u73af\u4e24\u6b21\u7136\u540e\u5224\u65ad\u53ef\u884c\u6027\u5c31\u53ef\u4ee5\u4e86\u3002 \uff08upd on 22.10.03\uff1a\u8fd9\u4e2a\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a Exchange Argument\u3002\uff09","title":"CF 1203F1"},{"location":"rec/old/old-cf-at-misc/#cf-814d","text":"\u6709 \\(n\\) \u4e2a\u5706\uff0c\u4ed6\u4eec\u53ea\u80fd\u662f\u76f8\u4e92\u5305\u542b\uff0c\u76f8\u79bb\u6216\u8005\u76f8\u5207\u7684\u3002 \u5c06\u5176\u5206\u4e3a\u4e24\u7ec4\uff0c\u6bcf\u7ec4\u4e2d\uff0c\u53ea\u6709\u5947\u6570\u6b21\u8986\u76d6\u7684\u624d\u4f1a\u7b97\u5165\u9762\u79ef\uff0c\u6c42\u53ef\u80fd\u7684\u6700\u5927\u9762\u79ef\u3002 \uff08\u7ffb\u8bd1\u662f\u6211\u6254\u5728luogu\u8ba8\u8bba\u533a\u7684\uff09 \u6211\u4eec\u8003\u8651\u4e00\u4e2a\u8d2a\u5fc3\uff0c\u628a\u6240\u6709\u8986\u76d6\u6b21\u6570\u662f \\(2\\) \u7684\u5706\u5168\u90e8\u6254\u5230\u4e00\u7ec4\uff0c\u5269\u4e0b\u7684\u4e00\u7ec4\u3002 \u8bc1\u660e\u7565\uff08 \u7136\u540e\u53c8\u56e0\u4e3a\u5305\u542b\u5173\u7cfb\u662f\u5448\u6811\u5f62\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8ba9\u88ab\u5305\u542b\u7684\u6210\u4e3a\u7236\u4eb2\uff0c\u5916\u5c42\u7684\u6210\u4e3a\u513f\u5b50\uff0c\u7136\u540e\u5728\u6811\u4e0a\u8dd1\u4e00\u904d \\(dfs\\) \u7edf\u8ba1\u5373\u53ef\uff08\u4e0d\u8fc7\u5173\u7cfb\u662f\u6709\u53ef\u80fd\u53d8\u6210\u68ee\u6797\u7684\uff0c\u6240\u4ee5\u8981\u5efa\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\uff09\u3002","title":"CF 814D"},{"location":"rec/old/old-cf-at-misc/#cf-954g","text":"\u4e00\u5171\u6709 \\(n\\) \u9762\u5899\uff0c\u521d\u59cb\u6709 \\(a_i\\) \u4e2a\u5f13\u7bad\u624b\u5728\u7b2c \\(i\\) \u9762\u5899\u7684\u4f4d\u7f6e\u4e0a\u3002\u4e00\u4e2a\u5728 \\(i\\) \u4f4d\u7f6e\u7684\u5f13\u7bad\u624b\u53ef\u4ee5\u4fdd\u62a4 \\(|i - j| \\leq r\\) \u7684\u6240\u6709\u5899 \\(j\\) \u3002 \u4f60\u73b0\u5728\u53ef\u4ee5\u589e\u6d3e \\(k\\) \u4e2a\u5f13\u7bad\u624b\u5e76\u4e14\u4efb\u610f\u5206\u914d\u5b83\u4eec\u7684\u4f4d\u7f6e\u3002\u4f60\u9700\u8981\u6700\u5927\u5316\u88ab\u6570\u91cf\u6700\u5c11\u7684\u5f13\u7bad\u624b\u4fdd\u62a4\u7684\u5899\u88ab\u5f13\u7bad\u624b\u4fdd\u62a4\u7684\u6570\u91cf\u3002 \\(n \\leq 5 \\times 10^5, 0 \\leq r \\leq n, 0 \\leq k \\leq 10^{18} ,0 \\leq a_i \\leq 10^9\\) \uff08\u9898\u610f\u6765\u81ealuogu\u8ba8\u8bba\u533a\uff09 \u8bbe\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u7684 defence lv \u4e3a \\(d_i\\) \u53d1\u73b0\u8fd9\u4e2a\u9898\u7684\u6761\u4ef6\u662f \u201c\u6700\u5c0f\u503c\u6700\u5927\u201d\u3002 \u6240\u4ee5\u5f88\u660e\u663e\u662f\u4e8c\u5206\u7b54\u6848\u3002 \u8003\u8651\u4e8c\u5206\u8fd9\u4e2a\u503c \\(mid\\) \uff0c\u6bcf\u6b21 check \u7684\u65f6\u5019\u8003\u8651\u8d2a\u5fc3\u3002 \u5982\u679c\u6709\u4e00\u4e2a\u4f4d\u7f6e \\(i\\) \u7684 \\(d_i < mid\\) \u6211\u4eec\u5728\u4f4d\u7f6e \\(\\min(i+r,n)\\) \u653e \\(mid-d_i\\) \u4e2a archer \u5c31\u884c\u4e86\u3002","title":"CF 954G"},{"location":"rec/old/old-cf-at-misc/#cf-845e","text":"\u6709\u4e00\u4e2a \\(n\\) \u884c \\(m\\) \u5217\u7684\u7f51\u683c\u3002\u5176\u4e2d\u6709 \\(k+1\\) \u4e2a\u683c\u5b50\u7740\u706b\u4e86\u3002\u6bcf\u4e2a\u65f6\u523b\uff0c\u706b\u4f1a\u8513\u5ef6\u81f3\u76f8\u90bb\u7684\u683c\u5b50\uff08\u516b\u8054\u901a\uff09\u3002 \u73b0\u5728\u7ed9\u51fa\u5176\u4e2d \\(k\\) \u4e2a\u7740\u706b\u7684\u683c\u5b50\uff0c\u8bf7\u786e\u5b9a\u7b2c \\(k+1\\) \u683c\u5b50\uff0c\u4f7f\u5f97\u7f51\u683c\u88ab\u70e7\u5b8c\u7684\u7528\u65f6\u6700\u77ed\u3002 \u4f60\u53ea\u9700\u8981\u8f93\u51fa\u6700\u77ed\u7528\u65f6\u3002 \\(n,m \\le 10^9,k\\le 500\\) \u3002 \u53d1\u73b0 \\(n,m\\) \u975e\u5e38\u5927\uff0c\u4f46\u662f \\(k\\) \u975e\u5e38\u5c0f\u3002 \u6240\u4ee5\u6211\u4eec\u4ece \\(k\\) \u5165\u624b\uff0c\u8003\u8651\u53bb\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u65f6\u523b\uff0c\u6bcf\u4e00\u4e2a\u70b9\u80fd\u8513\u5ef6\u5230\u7684\u4f4d\u7f6e\u3002 \u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u6bcf\u79d2\u53ea\u6269\u5c55\u4e00\u5c42\u5e76\u4e14\u662f\u516b\u8054\u901a\uff0c\u6240\u4ee5\u53ef\u4ee5 \\(\\text{O}(1)\\) \u7b97\u8fd9\u4e2a\u77e9\u5f62\u7684\u9876\u70b9\u7684\u5750\u6807\u3002 \u53c8\u53d1\u73b0\u8fd9\u4e2a\u201c\u65f6\u95f4\u201d\u6ca1\u6cd5\u5f88\u597d\u7684\u6c42\u51fa\u6765\uff0c\u4f46\u662f\u521a\u597d\u5177\u6709\u5355\u8c03\u6027\u3002 \u6240\u4ee5\u8003\u8651\u4e8c\u5206\u3002 \u6bcf\u6b21\u4e8c\u5206\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8ba1\u7b97\u51fa\u6240\u6709\u77e9\u5f62\u8986\u76d6\u7684\u9762\u79ef\u3002 \u7136\u540e\u4f60\u53bb\u770b\u6700\u8fb9\u4e0a\u7684\u90a3\u56db\u4e2a\u89d2\uff08\u56e0\u4e3a\u5f88\u660e\u663e\u6269\u5c55\u5230\u4ed6\u4eec\u7684\u65f6\u95f4\u4e00\u5b9a\u662f\u6bcf\u4e2a\u65b9\u5411\u4e0a\u6700\u665a\u7684\uff09\u7684\u7a7a\u4f59\uff08\u5982\u679c\u6709\uff09\u6709\u6ca1\u6709\u529e\u6cd5\u7528\u4e00\u4e2a\u70b9\u5c31\u80fd\u8986\u76d6\u5b8c\u5c31\u884c\u3002 \u56e0\u4e3a\u503c\u57df\u6bd4\u8f83\u5927\u6240\u4ee5\u6211\u4eec\u9700\u8981\u79bb\u6563\u5316\u3002 \u8ba1\u7b97\u9762\u79ef\u53ef\u4ee5\u4f7f\u7528\u4e8c\u7ef4\u5dee\u5206\u6216\u8005\u626b\u63cf\u7ebf\u3002","title":"CF 845E"},{"location":"rec/old/old-cf-at-misc/#cf-547d","text":"\u7ed9\u5750\u6807\u7cfb\u5f53\u4e2d\u7684 \\(n\\) \u4e2a\u6574\u70b9\u7ea2\u84dd\u67d3\u8272\uff0c\u8981\u6c42\u540c\u4e00\u4e2a\u76f4\u7ebf\uff08 \\(y\\) or \\(x\\) \u65b9\u5411\uff09\u4e0a\u7684\u7ea2\u84dd\u8282\u70b9\u4e2a\u6570\u76f8\u5dee\u4e0d\u8d85\u8fc7\u4e00\u3002 \u95ee\u5982\u4f55\u67d3\u8272\uff0c\u591a\u89e3\u4efb\u610f\u5373\u53ef\u3002 \u4fdd\u8bc1\u6709\u7b54\u6848\u3002 \u9996\u5148\u6211\u4eec\u53d1\u73b0\u4e00\u5b9a\u4f1a\u6709\u7b54\u6848\uff0c\u53c8\u662f\u8981\u6211\u4eec\u628a\u70b9\u5206\u6210\u4e24\u4e2a\u90e8\u5206\u3002 \u6240\u4ee5\u6211\u4eec\u60f3\u5230\u4e86\u4e8c\u5206\u56fe\uff0c\u624b\u5143\u4e00\u4e0b\u6837\u4f8b\u53ef\u4ee5\u53d1\u73b0\u786e\u5b9e\u662f\u4e8c\u5206\u56fe\u3002 \u6240\u4ee5\u76f4\u63a5\u5bf9\u4e8e\u540c\u4e00\u76f4\u7ebf\u4e0a\u7684\u70b9\u5efa\u8fb9\u7136\u540e\u4e8c\u5206\u56fe\u67d3\u8272\u5373\u53ef\u3002 \u53ef\u4ee5\u5148 \\(\\text{O}(n \\log n)\\) \u6392\u5e8f\u518d\u5efa\u8fb9\uff0c\u6216\u8005\u7528\u4e00\u4e2a \\(\\text{O}(n)\\) \u7684\u65b9\u6cd5\u5efa\u8fb9\uff0c\u5177\u4f53\u65b9\u6cd5\u89c1\u63d0\u4ea4\u8bb0\u5f55\uff1a https://codeforces.com/contest/547/submission/131984717","title":"CF 547D"},{"location":"rec/old/old-cf-at-sol/","text":"\u67d0\u4e9b\u6076\u5fc3\u9898\u5c31\u4e0d\u8865\u4e86\u3002 ATCoder\uff0cNowCoder\uff0cCodeforces\u7684\u6bd4\u8d5b\u5b9e\u9645\u4e0a\u90fd\u4f1a\u653e\u5230\u8fd9\u91cc\u9762\u3002 \u7136\u540eCF\u7684\u601d\u7ef4\u9898\u4e00\u7c7b\u7684\u4e5f\u4f1a\u5728\u8fd9\u513f\u3002 Codeforces #734 \u03c8(\uff40\u2207\u00b4)\u03c8 Contest ID: 1551 \u5728\u5b66\u6821\u548c\u6574\u4e2a\u673a\u623f\u4e00\u8d77VP\u7684\u3002 A \u03c8(\uff40\u2207\u00b4)\u03c8 \\(1\\) \u5757\u7684\u786c\u5e01\u7528 \\(c_1\\) \u4e2a, \\(2\\) \u5757\u786c\u5e01\u7528 \\(c_2\\) \u4e2a\u3002 \u95ee\u4f60\u51d1\u51fa \\(n\\) \u5143\u65f6\u7684 \\(\\min(|c_1-c_2|)\\) \u4e00\u773c\u9898\u3002 \u8981 \\(|c_1-c_2|\\) \u6700\u5c0f\u8bf4\u767d\u4e86\u5c31\u662f\u5c3d\u91cf\u5e73\u5747\u3002 \u90a3\u4e48\u5c31\u5c3d\u91cf\u7684\u7528\u4e00\u4e2a \\(1\\) \u7684\u540c\u65f6\u4e5f\u7528\u4e00\u4e2a \\(2\\) \u3002 \u6240\u4ee5\u628a \\(n\\) \u9664\u4ee5 \\(3\\) \uff0c\u5f97\u5230 \\(c_1\\) \u548c \\(c_2\\) \u5404\u81ea\u5fc5\u987b\u8981\u6709\u7684\u4e2a\u6570\uff08\u6b64\u65f6 \\(c_1=c_2\\) \uff09\u3002 \u7136\u540e \\(n\\) \u65e0\u975e\u5c31\u662f\u5269\u4e0b \\(0,1,2\\) \u8fd9\u4e09\u79cd\u60c5\u51b5\u3002 \u5982\u679c\u4e0d\u5269\u90a3\u4e48\u76f4\u63a5\u8f93\u51fa\u3002 \u5982\u679c\u4f59 \\(1\\) \u90a3\u4e48\u591a\u52a0\u4e00\u4e2a \\(1\\) \u5143\u3002 \u5982\u679c\u4f59 \\(2\\) \u90a3\u4e48\u591a\u52a0\u4e00\u4e2a \\(2\\) \u5143\u3002 B1 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u5b57\u7b26\u53ef\u4ee5\u6d82\u4e0a\u7ea2\u6216\u7eff\uff0c\u6216\u8005\u4e0d\u6d82\u3002 \u6d82\u4e0a\u76f8\u540c\u989c\u8272\u7684\u6240\u6709\u5b57\u6bcd\u76f8\u4e92\u4e0d\u80fd\u76f8\u540c\uff0c\u4e14\u7ea2\u8272\u548c\u7eff\u8272\u7684\u4e2a\u6570\u90fd\u4e3a \\(Q\\) \uff0c\u6c42 \\(\\max\\{Q\\}\\) \u3002 \u9996\u5148\u8003\u8651\u7b2c\u4e00\u4e2a\u6761\u4ef6\u3002 \u8f6c\u5316\u4e00\u4e0b\u4e5f\u5c31\u662f\u8bf4\u6bcf\u4e00\u79cd\u5b57\u6bcd\u6700\u591a\u53ea\u80fd\u6709\u4e24\u4e2a\u88ab\u6d82\u4e0a\u989c\u8272\u3002 \u6240\u4ee5\u6211\u4eec\u5f00\u4e00\u4e2a\u6876\u7edf\u8ba1\u4e00\u4e0b\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u7684\u51fa\u73b0\u6b21\u6570\u5e76\u5bf9\u5176\u8fdb\u884c\u5224\u65ad\u3002 \u518d\u8003\u8651\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u3002 \u56e0\u4e3a\u53ea\u4f1a\u6709\u4e24\u79cd\u989c\u8272\uff0c\u6240\u4ee5\u6d82\u4e0a\u989c\u8272\u7684\u70b9\u7684\u4e2a\u6570\u5fc5\u987b\u662f\u5076\u6570\uff08 \\(2\\) \u7684\u500d\u6570\uff09\u3002 \u90a3\u4e48\u601d\u8def\u5c31\u51fa\u6765\u4e86\uff0c\u7edf\u8ba1\u4e00\u4e0b\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5e76\u4e14\u7edf\u8ba1\u5b83\u6700\u591a\u6709\u591a\u5c11\u4e2a\u5b57\u6bcd\u53ef\u4ee5\u88ab\u6d82\u4e0a\u989c\u8272\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u79cd\u5b57\u6bcd\uff0c\u5982\u679c\u5b83\u7684\u4e2a\u6570\u5c0f\u4e8e\u7b49\u4e8e \\(2\\) \u90a3\u4e48\u5c31\u90fd\u53ef\u4ee5\u88ab\u6d82\u8272\uff0c\u5982\u679c\u5927\u4e8e\u7b49\u4e8e \\(3\\) \u5c31\u53ea\u6709\u4e24\u4e2a\u53ef\u4ee5\u88ab\u6d82\u4e0a\u989c\u8272\u3002 \u56e0\u4e3a\u6709\u4e24\u79cd\u989c\u8272\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u662f\u53ef\u4ee5\u88ab\u6d82\u4e0a\u989c\u8272\u7684\u5b57\u6bcd\u4e2a\u6570\u9664\u4ee5 \\(2\\) \u3002 \u5982\u679c\u6700\u540e\u53ef\u4ee5\u88ab\u6d82\u4e0a\u989c\u8272\u7684\u5b57\u6bcd\u4e2a\u6570\u662f\u4e2a\u5947\u6570\uff0c\u5c31\u9700\u8981\u5148\u51cf \\(1\\) \u518d\u9664 \\(2\\) \u3002 B2 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5927\u4f53\u540c B1,\u73b0\u5728\u5b57\u7b26\u4e32\u53d8\u6210\u4e86\u5e8f\u5217\uff0c\u800c\u4e14\u6709 \\(k\\) \u79cd\u4e0d\u540c\u989c\u8272\u3002 \u53ea\u8981\u6c42\u4f60\u8f93\u51fa\u65b9\u6848\u5373\u53ef\u3002 \u4eceB1\u7684\u89d2\u5ea6\u8003\u8651\uff0c\u73b0\u5728\u6709 \\(k\\) \u79cd\u4e0d\u540c\u989c\u8272\u3002\u90a3\u4e48\u6211\u4eec\u4ecd\u65e7\u662f\u7edf\u8ba1\u6bcf\u4e00\u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u51fa\u73b0\u591a\u5c11\u6b21\u3002 \u5982\u679c\u5927\u4e8e \\(k\\) \u90a3\u4e48\u5c31\u53ea\u6709 \\(k\\) \u4e2a\u53ef\u4ee5\u88ab\u6d82\u8272\u3002 \u53cd\u4e4b\u90fd\u53ef\u4ee5\u3002 \u7136\u540e\u7edf\u8ba1\u5b8c\u4e4b\u540e\u6211\u4eec\u6309 \\(a[i]\\) \u7684\u5927\u5c0f\u6392\u4e2a\u5e8f\u3002 \u4e5f\u5c31\u662f\u628a\u540c\u4e00\u79cd\u90fd\u6254\u5230\u4e00\u8d77\u5904\u7406\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u79cd\uff0c\u6211\u4eec\u53ea\u6d82\u524d \\(k\\) \u4e2a\uff08\u4fdd\u8bc1\u4e0d\u91cd\u590d\u800c\u4e14\u6d82\u591f\uff09\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002 \u4f46\u662f\u6211\u4eec\u8981\u8f93\u51fa\u65b9\u6848\uff0c\u6240\u4ee5\u9700\u8981\u8bb0\u5f55\u4e00\u4e0b\u5143\u7d20\u7684\u4f4d\u7f6e\u3002 C \u03c8(\uff40\u2207\u00b4)\u03c8 \u53ea\u7528\u4e94\u4e2a\u5b57\u6bcd \\(\\{a,b,c,d,e\\}\\) \u7ec4\u6210\u4e00\u7bc7\u6587\u7ae0\uff0c \u82e5\u679c\u5176\u4e2d\u4e00\u4e2a\u5b57\u7b26\u7684\u51fa\u73b0\u6b21\u6570\u6bd4\u5176\u5b83\u7684\u52a0\u8d77\u6765\u90fd\u591a\u90a3\u4e48\u8fd9\u7bc7\u6587\u7ae0\u5c31\u662f\u597d\u7684\u3002 \u7ed9\u5b9a\u51e0\u4e2a\u5355\u8bcd\uff0c\u6c42\u6700\u957f\u7684\u597d\u6587\u7ae0\u7684\u5355\u8bcd\u6570\u3002 \u770b\u5230\u53ea\u6709\u4e94\u4e2a\u5b57\u6bcd\uff0c\u6211\u76f4\u63a5\u9ad8\u5174\u4e86\u8d77\u6765\u3002 \u770b\u5230\u65f6\u96504s\uff0c\u6211\u7684\u5634\u89d2\u5c31\u76f4\u63a5\u626c\u4e86\u8d77\u6765\u3002 \u8fd9\u4e0d\u660e\u6446\u7740\u8ba9\u4f60\u6253\u66b4\u529b\u5417\uff1f \u6240\u4ee5\u76f4\u63a5\u7edf\u8ba1\u6bcf\u4e2a\u5b57\u7b26\u7684\u51fa\u73b0\u6b21\u6570\u3002 \u7136\u540e\u5bf9\u4e8e\u6bcf\u79cd\u5b57\u7b26\u6211\u4eec\u6392\u5e8f\u8d2a\u5fc3\u4e00\u4e0b\uff0c\u5982\u679c\u8bf4\u53ef\u4ee5\u9009\u5f53\u524d\u5355\u8bcd\uff0c\u5373\u66f4\u65b0\u7b54\u6848\u3002 \uff08\u8bf4\u662f\u7b80\u5355\u66b4\u529b+\u8d2a\u5fc3\uff0c\u6211\u5374\u5199\u4e86\u534a\u5c0f\u65f6\uff0cwtcl\uff09 D1 D2 E F \u03c8(\uff40\u2207\u00b4)\u03c8 \u5f85\u8865 Codeforces #735 \u03c8(\uff40\u2207\u00b4)\u03c8 Contest ID: 1554 \u4e94\u9898\u573a\uff0c\u6211\u5c45\u7136\u6709ABCD\u3002 A \u03c8(\uff40\u2207\u00b4)\u03c8 \u95ee\u4f60\u4e00\u4e2a\u5e8f\u5217\u7684\u6240\u6709\u957f\u5ea6\u4e0d\u5c0f\u4e8e \\(2\\) \u7684\u5b50\u533a\u95f4\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c \u4e58\u79ef\u7684\u6700\u5927\u503c \u3002 \u4ece\u6570\u636e\u8303\u56f4\u5c31\u80fd\u53d1\u73b0\uff0c\u4e00\u5b9a\u662f\u4e2a \\(\\text{O}(T\\times n)\\) \u7684\u7b97\u6cd5\u3002 \u6240\u4ee5\u60f3\u5230\u4e86\u5355\u8c03\u961f\u5217\u6216\u8005\u5355\u8c03\u6808\u7ef4\u62a4\u3002 \u4f46\u662f\u4ed4\u7ec6\u60f3\u60f3\uff0c\u8fd9\u4e2a\u5b50\u533a\u95f4\u7684\u957f\u5ea6\u53ea\u80fd\u4e3a \\(2\\) \u3002 \u4e3a\u4f55\uff1f \u6211\u4eec\u5c31\u5148\u4ece\u957f\u5ea6\u4e3a \\(2\\) \u7684\u533a\u95f4\u5f00\u59cb\u8003\u8651\u3002 \u90a3\u4e48\u5f88\u660e\u663e\u6743\u503c\u5c31\u662f \\(a[l] \\times a[r]\\) \u3002 \u8003\u8651\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(3\\) \u7684\u533a\u95f4\uff0c\u4e14\u91cc\u9762\u7684\u5143\u7d20\u662f \\(\\{a,b,c\\}\\) \uff08\u6309\u987a\u5e8f\uff09\u3002 \u5047\u8bbe \\(b\\) \u662f\u6700\u5927\u7684\uff0c\u90a3\u4e48\u5b83\u5c31\u4f1a\u548c \\(\\min(a,c)\\) \u7ed3\u5408\uff0c\u90a3\u4e48\u5c31\u548c\u957f\u5ea6\u4e3a \\(2\\) \u7684\u6ca1\u6709\u4efb\u4f55\u533a\u522b\u3002 \u5047\u8bbe \\(a\\) \u662f\u6700\u5927\u7684\uff0c\u90a3\u4e48\u6709\u5982\u4e0b\u4e24\u79cd\u60c5\u51b5\u3002 \\(b\\) \u6bd4 \\(c\\) \u5c0f\uff0c\u90a3\u4e48\u8fd9\u4e2a\u533a\u95f4\u7684\u6743\u503c\u4e00\u5b9a\u662f \\(a \\times b\\) \uff0c\u8f6c\u5316\u6210\u4e86\u957f\u5ea6\u4e3a \\(2\\) \u7684\u60c5\u51b5\u3002 \\(b\\) \u6bd4 \\(c\\) \u5927\uff0c\u90a3\u4e48\u8fd9\u4e2a\u533a\u95f4\u7684\u6743\u503c\u5c31\u662f \\(a \\times c\\) \uff0c\u4f46\u662f\u5f88\u660e\u663e\uff0c $a\\times b $ \u4e5f\u5c31\u662f\u957f\u5ea6\u4e3a \\(2\\) \u7684\u65f6\u5019\u7edd\u5bf9\u6bd4\u8fd9\u4e2a \\(a\\times c\\) \u66f4\u4f18\uff08\u56e0\u4e3a\u6211\u4eec\u6700\u7ec8\u8981\u6c42\u7684\u662f\u6700\u5927\u503c\uff09 \u53cd\u8fc7\u6765\u540c\u7406\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u7ed3\u8bba\u6269\u5c55\u5230 \\(n=4,5,6...\\) \u5c31\u80fd\u8bc1\u660e\u7ed3\u8bba\u6b63\u786e\u3002 \u6240\u4ee5\u73b0\u5728\u53ea\u9700\u8981\u8bfb\u5165\u7684\u65f6\u5019\u8ba9\u76f8\u90bb\u7684\u5143\u7d20\u4e24\u4e24\u76f8\u4e58\uff0c\u6c42\u4e58\u79ef\u7684\u6700\u5927\u503c\uff0c\u8fd9\u4e2a\u6700\u5927\u503c\u5c31\u662f\u7b54\u6848\u3002 B \u03c8(\uff40\u2207\u00b4)\u03c8 \u6c42\u6240\u6709\u4e00\u4e2a\u5e8f\u5217\u91cc\u6240\u6709\u7684 \\(i\\times j -k\\times(a_i \\operatorname{or} a_j)\\) \u7684 \\(\\max \\ \\ (k \\in [1,\\min(n,100)])\\) \uff08tips\uff1a\u4e00\u4e2a\u6570\u6309\u4f4d\u6216\u4e0a\u53e6\u4e00\u4e2a\u6570\uff0c\u8fd9\u4e2a\u6570\u7edd\u5bf9\u4e0d\u4f1a\u51cf\u5c0f\uff09 \u6211\u662f\u76f4\u63a5\u51ed\u611f\u89c9\u731c\u7684\u7ed3\u8bba\uff1a \\(i\\in [\\max(n-100,1),n),j=i+1\\) \u7136\u540e\u66b4\u529b\u8dd1\u3002 \u8fd9\u91cc\u6709\u4e2a\u4e25\u8c28\u7684\u505a\u6cd5\uff08\u6765\u81ealg\u9898\u89e3\u533a\uff09 C \u03c8(\uff40\u2207\u00b4)\u03c8 \u6c42\u6700\u5c0f\u7684 \\(k\\) \u6ee1\u8db3 \\(k\\not\\in \\{n \\operatorname{xor}0,n \\operatorname{xor}1...n \\operatorname{xor}m\\}\\) \\(n,m\\) \u662f \\(10^9\\) \u7ea7\u522b\u3002 \u6839\u636e\u5f02\u6216\u7684\u67d0\u4e2a\u6027\u8d28\uff1a \\(n \\operatorname{xor} k >m \\Leftrightarrow n \\operatorname{xor} k \\ge m +1\\) \u8bbe \\(x_i=(m+1)_2\\) \u7684\u7b2c \\(i\\) \u4f4d\u3002 \u8bbe \\(k_i=(k)_2\\) \u7684\u7b2c \\(i\\) \u4f4d\u3002 \u90a3\u4e48\u6709\u56db\u79cd\u60c5\u51b5\uff1a \\(x_i=k_i=1\\Rrightarrow k_i=0\\) \\(x_i=k_i=0\\Rrightarrow k_i=0\\) \\(x_i=1,k_i=0\\Rrightarrow k_i=1\\) \\(x_i=0,k_i=1\\Rrightarrow k_i=0\\) \u7a0d\u5fae\u7528\u4f4d\u8fd0\u7b97\u641e\u4e00\u4e0b\u5c31\u884c\u4e86\u3002 D \u03c8(\uff40\u2207\u00b4)\u03c8 \u6211\u76ee\u524d\u505a\u8fc7\u6700\u50bb\u903c\u7684\u6784\u9020\u3002 \u5bb9\u6613\u53d1\u73b0 aaba+k \u5f62\u5f0f\u7684\u6784\u9020\u662f\u5bf9\u7684\u3002 \u5c31\u662f\u524d\u9762\u4e00\u6bb5 a \u6bd4\u540e\u9762\u4e00\u6bb5\u591a\u4e00\u4e2a\uff0c\u7136\u540e\u5728\u4e2d\u95f4\u63d2\u4e00\u4e2a b \u5982\u679c n \u662f\u5947\u6570\u5728\u540e\u9762\u8865\u4e00\u4e2a\u975e a\\b \u7684\u5b57\u7b26\u5c31\u884c\u3002 \u6ce8\u610f\u7279\u5224 \\(\\text{length}=1\\) E \u03c8(\uff40\u2207\u00b4)\u03c8 \u5f85\u8865 Edu #112 \u03c8(\uff40\u2207\u00b4)\u03c8 Contest ID: 1555 A \u03c8(\uff40\u2207\u00b4)\u03c8 \u6709 \\(6\\) \u7247\u7684\uff08 \\(15min\\) \uff09 , \\(8\\) \u7247\u7684( \\(20min\\) ), \\(10\\) \u7247\u7684( \\(25min\\) )Pizza\u3002 \u73b0\u5728\u9700\u8981 \u81f3\u5c11 \\(n\\) \u7247 Pizza\uff0c\u95ee\u6700\u5c0f\u7684\u7b49\u5f85\u65f6\u95f4\u3002 \u4e0d\u96be\u53d1\u73b0\u6bcf\u79cd\u5e73\u5747\u4e00\u4e0b\uff0c\u90fd\u662f \\(2.5\\) \u5206\u949f\u4e00\u7247\u3002 \u7136\u540e\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u4f60\u9700\u8981\u7684\u5c0f\u4e8e\u7b49\u4e8e\u516d\u7247\uff0c\u76f4\u63a5 \\(15min\\) \u5c31\u884c\u3002 \u7136\u540e\u8003\u8651\u5927\u4e8e\u516d\u600e\u4e48\u505a\u3002 \u53d1\u73b0\u5176\u5b9e\u8fd9\u4e09\u4e2a\u6570\u53ef\u4ee5\u51d1\u51fa\u6240\u6709\u5927\u4e8e \\(6\\) \u7684\u5076\u6570\u3002 \u53cd\u5411\u601d\u7ef4\u3002 \u5982\u679c\u4f60\u505a\u8fc7\u8fd9\u9053\u9898\uff1a P3951 [NOIP2017 \u63d0\u9ad8\u7ec4] \u5c0f\u51ef\u7684\u7591\u60d1 \u90a3\u4e48\u53ef\u4ee5\u62d3\u5c55\u6210\u4e09\u5143\u7684 \u5076\u6570\u60c5\u51b5 \uff0c\u7136\u540e\u5c31\u80fd\u8bc1\u51fa\u8fd9\u4e09\u4e2a\u6570\u6700\u5927\u4e0d\u80fd\u51d1\u51fa\u7684\u5076\u6570\u662f \\(4\\) \uff0c\u90a3\u4e48\u6700\u5927\u7684\u4e0d\u80fd\u51d1\u51fa\u7684\u6570\u5c31\u662f \\(5\\) \u3002 \u7136\u540e\u5c31\u6574\u5b8c\u4e86\uff0c\u8fd9\u9898\u76f4\u63a5\u7279\u5224\u5c31\u884c\u3002 B \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4e00\u4e2a\u5bbd\u548c\u9ad8\u7ed9\u5b9a\u7684\u623f\u95f4\uff0c\u4e00\u5f20\u5df2\u7ecf\u653e\u597d\u7684\u684c\u5b50\u7684\u5bf9\u89d2\u7ebf\u9876\u70b9\u5750\u6807\u3002 \u518d\u7ed9\u5b9a\u4e00\u5f20\u957f\u5bbd\u56fa\u5b9a\u7684\u684c\u5b50\uff0c\u95ee\u539f\u6765\u7684\u684c\u5b50\u81f3\u5c11\u8981\u79fb\u52a8\u591a\u5c11\u4e2a\u5355\u4f4d\u624d\u80fd\u653e\u4e0b\u65b0\u684c\u5b50\uff08\u66fc\u54c8\u987f\u8ddd\u79bb\uff09\u3002 \u65b0\u7684\u684c\u5b50\u8981\u6700\u4f18\uff0c\u5c31\u53ea\u80fd\u653e\u5728\u56db\u4e2a\u89d2\u4e0a\uff0c\u53ef\u4ee5\u56db\u79cd\u60c5\u51b5\u90fd\u679a\u4e3e\u3002 \u4e5f\u53ef\u4ee5\u7279\u5224\u8d2a\u5fc3\u4e00\u4e0b\uff0c\u6bd4\u8f83\u7b80\u5355\u3002 C \u03c8(\uff40\u2207\u00b4)\u03c8 Alice \u548c Bob \u5728\u4e00\u4e2a \\(2 \\times m\\) \u7684\u77e9\u5f62\u4e0a\u73a9\u6e38\u620f\uff0c\u77e9\u5f62\u7684\u6bcf\u4e00\u4e2a\u683c\u5b50\u4e0a\u90fd\u6709\u4e00\u4e2a\u6570 $ a_{i,j} $ Alice \u548c Bob \u4e00\u5f00\u59cb\u7ad9\u5728\u5de6\u4e0a\u89d2\u683c\u5b50 \\((1,1)\\) \u4e0a\uff0c\u6bcf\u4e2a\u4eba\u90fd\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u79fb\u52a8\uff0c\u76f4\u5230\u79fb\u52a8\u5230\u7ec8\u70b9 \\((2,m)\\) \u4e0a\uff0c\u7ecf\u8fc7\u4e00\u4e2a\u683c\u5b50\u65f6\u4f1a\u53d6\u8d70\u683c\u5b50\u4e0a\u7684\u6570\uff0c\u8d62\u5f97\u76f8\u5e94\u7684\u5f97\u5206 Alice \u9996\u5148\u5f00\u59cb\u79fb\u52a8\uff0cBob \u4e0d\u80fd\u53d6\u8d70 Alice \u5df2\u7ecf\u53d6\u8d70\u7684\u6570 Alice \u671f\u671b\u6700\u5c0f\u5316 Bob \u7684\u5f97\u5206\uff0cBob \u5219\u5e0c\u671b\u6700\u5927\u5316\u81ea\u5df1\u7684\u5f97\u5206 \u6c42Bob \u7684\u6700\u5927\u5f97\u5206\u3002 \u8bfb\u4e00\u4e0b\u9898\u53d1\u73b0\uff0c\u56e0\u4e3a\u53ea\u6709\u4e24\u884c\u800c\u4e14\u53ea\u80fd\u5411\u53f3\u6216\u8005\u5411\u4e0b\u3002 \u4e5f\u5c31\u662f\u8bf4\u4ed6\u4eec\u90fd\u53ea\u80fd\u5411\u4e0b\u4e00\u6b21\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u5165\u624b\u70b9\u3002 \u6ce8\u610f\u5230Alice\u8d70\u8fc7\u4e4b\u540e\u6570\u5b57\u5c31\u6ca1\u4e86\uff0c\u800c\u4e14Alice\u5148\u624b\uff0c\u6240\u4ee5Bob\u4e00\u5b9a\u8981\u5c3d\u91cf\u907f\u5f00Alice\u8d70\u8fc7\u7684\u8def\u3002 \u6bd4\u5982\u4e0a\u56fe\uff0c\u7c89\u8272\u90e8\u5206\u662fAlice\u8d70\u8fc7\u7684\u8def\uff0c\u90a3\u4e48Bob\u80fd\u53d6\u5230\u6570\u5b57\u7684\u53ea\u6709 \\(R1\\) \u6216 \\(R2\\) \u4e24\u90e8\u5206\u3002 \u4e5f\u5c31\u662f\u4ed6\u4e0d\u662f\u4ece\u4e0a\u9762\u5148\u8d70\u901a\u518d\u4e0b\u53bb\u5c31\u662f\u5148\u4e0b\u53bb\u7136\u540e\u8d70\u901a\u3002 \u90a3\u4e48\u6211\u4eec\u679a\u4e3eAlice\u4e0b\u53bb\u7684\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u5229\u7528\u524d\u7f00\u548c\u7ef4\u62a4\u4e00\u4e0b\u6c42\u4e2a \\(\\max\\) \u5373\u53ef\u3002 D E F \u03c8(\uff40\u2207\u00b4)\u03c8 \u5f85\u8865 Codeforces #736(div1+2 \u03c8(\uff40\u2207\u00b4)\u03c8 Contest ID: div1 1548,div2 1549 \u6211\u4f9d\u65e7div2 ABCD\u2026\u2026 \u5176\u4ed6\u7684\u76ee\u524d\u8fd8\u4e0d\u4f1a div2A \u03c8(\uff40\u2207\u00b4)\u03c8 \u50bb\u903c\u9001\u5206\u9898\u3002 \u8ba9\u4f60\u627e\u4e00\u5bf9 \\((a,b)\\) \u6ee1\u8db3 \\(a \\operatorname{mod} P = b \\operatorname{mod} P\\) \\(P\\) \u662f\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e \\(5\\) \u7684\u8d28\u6570\u3002 \u6240\u4ee5 \\(P\\) \u4e0d\u53ef\u80fd\u662f\u5076\u6570\uff0c\u4e5f\u5c31\u662f\u8bf4 \\(P-1\\) \u4e00\u5b9a\u662f\u5076\u6570\u3002 \u90a3\u4e48\u76f4\u63a5\u627e \\(P-1\\) \u7684\u968f\u4fbf\u4e24\u4e2a\u5927\u4e8e\u7b49\u4e8e\u4e8c\u7684\u56e0\u5b50\u3002 \u4e3a\u4e86\u65b9\u4fbf\u76f4\u63a5\u8f93\u51fa \\(2\\) \u548c \\((p-1)/2\\) \u5373\u53ef\u3002 div2B \u03c8(\uff40\u2207\u00b4)\u03c8 \u8003\u8651\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\u5bf9\u4e8e\u5728\u7b2c \\(i\\) \u5217\u7684\u5352\u8981\u60f3\u5230\u8fbe\u5bf9\u9762\u4e00\u5b9a\u6ee1\u8db3\u4e00\u4e0b\u4e24\u4e2a\u6761\u4ef6\uff1a \u7b2c\u4e00\u6392\u7684\u7b2c \\(i\\) \u5217\u6ca1\u6709\u654c\u5175\uff0c\u76f4\u63a5\u8d70\u8fc7\u53bb\u5373\u53ef\u3002 \u7b2c\u4e00\u6392\u7684\u7b2c \\(i-1\\) \u6216 \\(i+1\\) \u5217\u6709\u654c\u5175\u4e14\u4e4b\u524d\u6ca1\u6709\u6211\u65b9\u5175\u53bb\u5403\u3002 \u7136\u540e\u7a0d\u5fae\u6a21\u62df\u4e00\u4e0b\u5c31\u884c\u4e86\u3002 div1A \u03c8(\uff40\u2207\u00b4)\u03c8 \u751a\u81f3\u6bd4 div2A\u8fd8SB\u7684zz\u9898\u3002 \u770b\u8d77\u6765\u662f\u4ec0\u4e48\u9ad8\u5927\u4e0a\u7684\u56fe\u8bba\uff0c\u7136\u800c\u76f4\u63a5\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7684\u51fa\u5ea6\u5c31\u5b8c\u4e86\u3002 \u7ec6\u8282\u7a0d\u5fae\u6709\u70b9\u5361\u4eba\uff0c\u6ce8\u610f\u4e00\u4e0b\u5c31\u884c\u3002 div1B \uff08Great\uff09 \u03c8(\uff40\u2207\u00b4)\u03c8 \u554a\u8fd9\u9053\u9898\u6709\u70b9\u6bd2\u7624\uff0c\u6211\u8c03\u4e86\u4e00\u4e2a\u5c0f\u65f6\u5de6\u53f3\uff08\u8981\u4e0d\u662f\u6bd4\u8d5b\u5ef6\u65f610min\u6211\u771f\u7684\u505a\u4e0d\u8d77\uff09\u3002 \u7ed9\u4e00\u4e2a\u5e8f\u5217 \\(a[]\\) \u7684\u533a\u95f4 \\(a_i,a_{i+1},...a_j\\) \u3002 \u8fd9\u4e2a\u533a\u95f4\u662f\u597d\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u4e00\u4e2a \\(\\ge 2\\) \u7684 \\(m\\) \uff0c\u4f7f \\(a_i \\operatorname{mod} m=a_{i+1} \\operatorname{mod} m =...=a_j \\operatorname{mod} m\\) \u95ee\u7ed9\u5b9a\u5e8f\u5217 \\(a[]\\) \u7684\u6700\u5927\u597d\u533a\u95f4\u7684\u5927\u5c0f\u3002 \u8bf4\u5b9e\u8bdd\u2026\u2026\u6211\u662f\u771f\u7684\u4e0d\u6e05\u695a\u8fd9\u4e2a\u795e\u4ed9\u601d\u8def\u600e\u4e48\u6765\u7684\u3002 \u5bf9\u4e8e \\(\\forall x \\in(i,j]\\) \uff0c\u4ee4 \\(a[x]\\) \u51cf\u53bb \\(a[x-1]\\) \uff08\u4e4b\u540e\u8981\u53d6\u7edd\u5bf9\u503c\uff09 \u7136\u540e\u4f60\u4f1a\u53d1\u73b0\u51cf\u4e86\u4e4b\u540e\uff0c\u5047\u8bbe \\(a[x] \\operatorname{mod} m=k\\) \u3002 \u90a3\u4e48 \\(k\\) \u5c31\u4f1a\u88ab\u6d88\u6389\u4e86\uff01\uff01\uff01 \u4e5f\u5c31\u662f \\(|a[x]-a[x-1]| \\operatorname{mod} m =0\\) \uff01\uff01\uff01 \u90a3\u4e48\u53cd\u8fc7\u6765\uff0c\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u4e00\u4e2a\u6700\u957f\u7684 \\(\\gcd\\) \u76f8\u540c\uff08\u4e14 \\(\\gcd>1\\) \uff09\u7684\u533a\u95f4\u5c31\u884c\u4e86\uff01\uff01\uff01 \u7136\u540e\u53d1\u73b0 \\(\\gcd\\) \u8fd9\u73a9\u610f\u513f\u4e0d\u592a\u597d\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff08\u5e38\u6570\u592a\u5927\u4e86\uff09\uff0c\u5206\u5757\u7684 \\(\\text{O}(n\\sqrt{n})\\) \u5f88\u5bb9\u6613\u672c\u9898\u7684\u67d0\u4e9b\u795e\u4ed9\u6570\u636e\u5361\u6b7b\u3002 \u7136\u540e\u6211\u4eec\u5c31\u60f3\u5230\u4e86\u597d\u73a9\u7684 \\(\\text{ST}\\) \u8868\uff01\uff01\uff01\uff01 \u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u5229\u7528 \\(\\text{ST}\\) \u8868\u6765\u7ef4\u62a4\u533a\u95f4\u7684 \\(\\gcd\\) \u3002 \u4f46\u662f\u8fd9\u91cc\u8981\u6c42\u7684\u662f\u6700\u957f\u7684\u533a\u95f4\u957f\u5ea6\uff0c\u518d\u5957\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u5c31\u4f1a\u70b8\u3002 \u90a3\u4e48\u5c31\u638f\u51fa \\(\\text{O}(n\\log n)\\) \u7684\u4e8c\u5206\u5427\u3002 \u6240\u4ee5\u5148\u5dee\u5206\u53d6\u4e2a\u7edd\u5bf9\u503c\u518d\u9884\u5904\u7406\u51fa \\(\\log_2\\) \u3002 \u7136\u540e\u5229\u7528 \\(\\text{ST}\\) \u8868\u7ef4\u62a4 \\(\\gcd\\) \u3002 \u4e4b\u540e\u679a\u4e3e\u533a\u95f4\u5de6\u7aef\u70b9\uff0c\u540c\u65f6\u4e8c\u5206\u533a\u95f4\u53f3\u7aef\u70b9\u3002 \u5e76\u7528\u7ef4\u62a4\u7684\u4fe1\u606f\u8fdb\u884ccheck\u5373\u53ef\u3002 \u5e94\u8be5\u662f\u6211\u6700\u8fd1\u505a\u7684\u6700\u6709\u610f\u601d\u7684\u9898\u4e86\u3002 \u6b64\u5904\u4e8c\u5206\u5199\u6cd5\u76f8\u8f83\u4e8e\u6211\u5e73\u65f6\u7684\u5199\u6cd5\u7a0d\u5fae\u6709\u70b9\u602a\uff0c\u4e0d\u8fc7\u4e5f\u662f\u5bf9\u7684\u3002 \u8fd9\u79cd\u5199\u6cd5\u662f\u4e0d\u4f1a\u53d6\u5230 \\(l\\) \u7684\uff0c\u65b9\u4fbf\u672c\u9898\u66f4\u65b0\u7b54\u6848\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 #include <bits/stdc++.h> using namespace std ; const int si = 2e5 + 10 ; #define int long long int st [ si ][ 20 ]; int a [ si ], logt [ si ]; int T , n , res = 0 ; int gcd ( int a , int b ){ if ( ! b ) return a ; return gcd ( b , a % b ); } int check ( int l , int r ){ return gcd ( st [ l ][ logt [ r - l + 1 ]], st [ r - ( 1 << logt [ r - l + 1 ]) + 1 ][ logt [ r - l + 1 ]]); } void STprework (){ for ( register int i = 2 ; i <= n ; ++ i ){ logt [ i ] = logt [ i >> 1 ] + 1 ; } for ( register int i = 1 ; i <= n ; ++ i ){ int o = abs ( a [ i ] - a [ i + 1 ]); st [ i ][ 0 ] = o ; } for ( register int i = 1 ; i <= logt [ n ]; ++ i ){ int toj = ( n + 1 ) - ( 1 << i ); for ( register int j = 1 ; j <= toj ; ++ j ){ st [ j ][ i ] = gcd ( st [ j ][ i -1 ], st [ j + ( 1 << ( i -1 ))][ i -1 ]); } } } signed main (){ scanf ( \"%lld\" , & T ); while ( T -- ){ scanf ( \"%lld\" , & n ); for ( register int i = 1 ; i <= n ; ++ i ){ scanf ( \"%lld\" , & a [ i ]); } n -= 1 ; STprework (); res = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ if ( st [ i ][ 0 ] == 1 ) continue ; int l = i , r = n ; while ( l < r ){ int mid = ( l + r + 1 ) >> 1 ; if ( check ( i , mid ) == 1 ) r = mid -1 ; else l = mid ; } res = max ( res , l - i + 1 ); } res ++ ; printf ( \"%lld \\n \" , res ); } return 0 ; } Codeforces #737(div2) \u03c8(\uff40\u2207\u00b4)\u03c8 Contest ID: 1557 \u5bf9\u8fd9\u6b21\u6bd4\u8d5b\u7684\u51fa\u9898\u4eba\u975e\u5e38\u65e0\u8bed\u3002 \u6ca1\u6709\u6c34\u5e73\u5c31\u522b\u6765\u51fa\u9898\u597d\u4e0d\u597d\uff1f \u60a8\u53ea\u4f1a\u62ff\u7740\u677f\u5b50\uff0c\u5957\u8def\u9898\u6539\u4e00\u70b9\u70b9\uff0c\u52a0\u52a0\u7801\u91cf\uff0c\u8f93\u51fa\u65b9\u6848\u6765\u6076\u5fc3\u4eba\u5417\uff1f A\u7684\u8d2a\u5fc3\uff0cB\u7684\u79bb\u6563\uff0cC\u7684\u7ec4\u5408\u6570\uff0cD\u7684\u7ebf\u6bb5\u6811\u4f18\u5316DP\uff0c\u90fd\u662f\u8001trick\uff0cE\u51fa\u4e2a\u4ea4\u4e92\uff0c\u70c2\u5230\u5927\u90e8\u5206\u4ea4\u7684\u968f\u673a\u7b97\u6cd5\u90fd\u80fd\u8fc7st\u3002 \u6211\u6ca1AK\uff0c\u53ea\u662f\u60f3\u55b7\u4e00\u55b7\u51fa\u9898\u4eba\uff0c\u53cd\u6b63\u8fd9\u6bd4\u8d5b\u98ce\u8bc4\u633a\u5dee\u7684\u3002 \u4e0d\u5199\u4e86\uff0c\u6d6a\u8d39\u65f6\u95f4\uff0c\u671f\u5f85 #738 \u80fd\u6709\u8d28\u91cf\u4e00\u70b9\u3002 Atcoder Beginning Contest 214 \u03c8(\uff40\u2207\u00b4)\u03c8 Contest ID: abc_214 \u56e0\u4e3aAT\u6bd4\u8d5b\u6ca1\u6709\u90a3\u4e48\u9891\u7e41\uff0c\u6240\u4ee5AT\u7684\u9898\u89e3\u4e5f\u90fd\u6254\u5230Codeforces Solutions \u6765\u4e86\u3002 \u660e\u660e\u53ef\u4ee5\u5199\u51faEF\u4f46\u662fE\u50bb\u903c\u4e86\u3002 \u6211\u4e0d\u914d 8kyu\u3002 A B C \u03c8(\uff40\u2207\u00b4)\u03c8 A\u662f\u8bed\u6cd5\u9898\uff0cB\u662f\u66b4\u529b\u679a\u4e3e\uff0cC\u662f\u65ad\u73af\u6210\u94fe\u6a21\u62df D & CF915F \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u662f\u4e2a\u7ecf\u5178 trick\uff0c\u4f60\u4f1a\u53d1\u73b0\u8fd9\u4e24\u9898\u7adf\u7136\u548c\u672c\u6b21D\u9898\u60ca\u4eba\u7684\u76f8\u4f3c\uff1a P5351 Ruri Loves Maschera \uff08\u8fd9\u9898\u5b9e\u9645\u4e0a\u662f\u70b9\u5206\u6cbb+BIT\uff0c\u548c\u8fd9\u4e2atrick\u6ca1\u592a\u5927\u5173\u7cfb\uff09 CF915F Imbalance Value of a Tree \u5168\u90e8\u90fd\u662f \\(u,v\\) \u4e4b\u95f4\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u4e00\u4e9b\u4fe1\u606f\u7edf\u8ba1\u3002 \u7279\u522b\u662f CF915F\uff0c\u4f60\u60ca\u5947\u7684\u53d1\u73b0\u4e00\u4e2a \\(\\min,\\max\\) \u505a\u51cf\u6cd5\u540e\u6c42\u548c\uff0c\u4e00\u4e2a\u76f4\u63a5\u5c31\u662f\u5bf9 \\(\\max\\) \u6c42\u548c\u3002 \u6240\u4ee5\u8fd9\u4e24\u9053\u9898\uff0c \u5b8c\u5168\u4e00\u81f4 \u3002 \u6b64 Trick \u7684\u505a\u6cd5\u5c31\u662f\u5229\u7528\u5e76\u67e5\u96c6\u6309\u987a\u5e8f\u5408\u5e76\u7136\u540e\u8ba1\u7b97\u8d21\u732e\u3002 \u8fd9\u9898\u5c31\u662f\u6309\u8fb9\u6743\u503c\u4ece\u5c0f\u5230\u5927\u5408\u5e76\u8fde\u901a\u5757\u7136\u540e\u8ba1\u7b97\u8d21\u732e\u3002 \u9996\u5148\u8003\u8651\u7b80\u5355\u8def\u5f84\u4e0a\u7684 \\(w_{\\max}\\) \u6211\u4eec\u5148\u5bf9\u4e8e\u6240\u6709\u4ee3\u8868\u8fb9\u7684\u4e09\u5143\u7ec4 \\((u,v,w)\\) \u6309\u7167 \\(w\\) \u4ece\u5c0f\u5230\u5927 \u6392\u5e8f\uff0c\u7136\u540e\u4f9d\u6b21\u626b\u63cf\u6bcf\u4e00\u6761\u8fb9\u3002 \u7136\u540e\u4f7f\u7528\u5e76\u67e5\u96c6\u8fdb\u884c\u7ef4\u62a4\u8fde\u901a\u5757\uff0c\u6bcf\u4e00\u6b21\u626b\u63cf\u90fd\u628a \\(u,v\\) \u5408\u5e76\u8d77\u6765\u3002 \u56e0\u4e3a\u73b0\u5728\u6240\u6709\u4e09\u5143\u7ec4\u6309 \\(w\\) \u5355\u8c03\u4e0d\u4e0b\u964d\uff0c\u4e5f\u5c31\u662f\u8bf4\u4f60\u5bf9\u4e8e\u5f53\u524d\u626b\u63cf\u5230\u7684 \\(w\\) \uff0c\u4ed6\u80fd\u505a\u51fa\u8d21\u732e\u7684\u8def\u5f84\u53ea\u6709 \\(siz[\\text{root}(u)]\\times siz[\\text{root}(v)]\\) \u8fd9\u4e48\u591a\u4e2a\u3002 \u4e3a\u5565\uff0c\u4f60\u770b\u540e\u9762\u7684\u6ca1\u6709\u88ab\u52a0\u8fdb\u6765\u7684\u4e09\u5143\u7ec4\uff0c\u6bcf\u4e00\u4e2a\u7684 \\(w\\) \u90fd\u6bd4\u4f60\u5927\uff0c\u90a3\u540e\u9762\u7684\u60c5\u51b5\u4f60\u80af\u5b9a\u6ca1\u6cd5\u505a\u51fa\u8d21\u732e\u3002 \u90a3\u4e48\uff0c\u5728\u6bcf\u4e00\u6b21\u5408\u5e76\u7684\u65f6\u5019\u8ba1\u7b97\u8d21\u732e \\(w \\times siz[\\text{root}(u)]\\times siz[\\text{root}(v)]\\) \u5373\u53ef\u3002 \u7136\u540e CF915F \u5c31\u5b8c\u5168\u4e00\u6837\uff0c\u70b9\u5316\u8fb9\u76f4\u63a5\u6c42\u4e24\u904d\uff0c\u4e00\u6b21\u5347\u5e8f\u4e00\u6b21\u964d\u5e8f\u6392\u5e8f\uff0c\u7136\u540e\u4e24\u4e2a\u603b\u8d21\u732e\u505a\u51cf\u6cd5\u5373\u53ef\u3002 \u90a3\u4e00\u9898\u552f\u4e00\u7684\u65b0 Trick \u5c31\u662f\u5bf9\u4e8e\u8dd1 \\(\\min\\) \u7684 \\(\\texttt{dsu}\\) \u7684\u65f6\u5019\uff0c\u5bf9\u4e8e \\((u,v)\\) \u4e24\u70b9\u4e4b\u95f4\u7684\u8fb9\u6743\u662f \\(\\min(val[u],val[v])\\) \u3002 \\(\\max\\) \u540c\u7406\u5373\u53ef\u3002 E F G H \u03c8(\uff40\u2207\u00b4)\u03c8 \u5f85\u8865 Codeforces #738 \u03c8(\uff40\u2207\u00b4)\u03c8 Contest ID: 1559 CN round \uff0c\u4f53\u9a8c\u8fd8\u53ef\u4ee5\u3002 \u53ef\u80fd\u662f\u4eca\u5e74\u7684\u6700\u540e\u4e00\u6b21\u5b9e\u5730CF\u4e86\u3001 A \u03c8(\uff40\u2207\u00b4)\u03c8 \u7a0d\u5fae\u63a8\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\uff0c\u628a\u6574\u4e2a\u5e8f\u5217\u5168\u90e8 \\(\\&\\) \u8d77\u6765\u53ef\u4ee5\u6700\u4f18\u3002 \u7136\u540e\u968f\u4fbf\u6574\u4e00\u6574\u5c31\u53ef\u4ee5\u53d1\u73b0\u4e00\u5b9a\u80fd\u6784\u9020\u51fa\u8fd9\u79cd\u65b9\u6848\u3002 \uff08\u4e4b\u540e\u5565\u65f6\u95f4\u4ed4\u7ec6\u5199\u4e0b\u5427\uff09 B \u03c8(\uff40\u2207\u00b4)\u03c8 \u611f\u89c9\u662f\u4e2a\u5f88\u719f\u6089\u7684trick\uff1f \u5c31\u662f\u7ed9\u4f60\u4e00\u4e2a\u5df2\u7ecf\u586b\u4e0a\u4e24\u79cd\u5b57\u7b26 R,B \u7684\u5b57\u7b26\u4e32\uff08\u6709\u4e9b\u5730\u65b9\u7a7a\u7740\uff09\u3002 \u95ee\u4f60\u600e\u4e48\u6837\u8865\u5168\u5269\u4e0b\u7684\u7a7a\u4f59\u80fd\u591f\u4f7f\u76f8\u90bb\u4e24\u4e2a\u5b57\u7b26\u76f8\u7b49\u7684\u60c5\u51b5\u6700\u5c11\u3002 \u4f60\u53ea\u80fd\u586b R,B \u4e24\u4e2a\u5b57\u7b26\u3002 \u5c31\u662f\u8d2a\u5fc3\u4e00\u4e0b\uff0c\u56e0\u4e3a\u9700\u8981\u5c3d\u91cf\u7684\u51fa\u73b0 BRBRB \u8fd9\u79cd\u4ea4\u53c9\u7684\u5f62\u5f0f\u3002 \u6240\u4ee5\u968f\u4fbf\u5224\u4e00\u4e0b\u5c31\u884c\uff0c\u7ec6\u8282\u89c1\u4ee3\u7801\u3002 \u6ce8\u610f\u8981\u5199\u6e05\u695a\u5168\u90e8\u662f ? \u7684\u60c5\u51b5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 while ( T -- ){ scanf ( \"%lld\" , & n ); cin >> s ; s = ' ' + s ; int i = 0 , k = 0 ; for ( i = 1 ; i <= n ; ++ i ) if ( s [ i ] != '?' ){ k = 1 ; break ;} if ( k ){ for ( register int j = i -1 ; j >= 1 ; -- j ){ if ( s [ j + 1 ] == 'R' ) s [ j ] = 'B' ; else s [ j ] = 'R' ; } } else s [ 1 ] = 'B' ; for ( i = 1 ; i <= n ; ++ i ){ if ( s [ i ] == '?' ){ if ( s [ i -1 ] == 'R' ) s [ i ] = 'B' ; else s [ i ] = 'R' ; } } //\u628a\u6ca1\u6709\u8865\u5168\u7684\u5730\u65b9\u8865\u5168 for ( i = 1 ; i <= n ; ++ i ) cout << s [ i ]; puts ( \"\" ); } C \u03c8(\uff40\u2207\u00b4)\u03c8 \u6bd4\u8f83\u7b80\u5355\u7684\u6784\u9020\uff0c\u76f4\u63a5\u653e\u4ee3\u7801\uff08\u538b\u4e86\u884c\uff0c\u4e0d\u662f\u6211\u7684\u6b63\u5e38\u9a6c\u8702\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 while ( T -- ){ scanf ( \"%lld\" , & n ); for ( register int i = 1 ; i <= n ; ++ i ) scanf ( \"%lld\" , & a [ i ]); if ( a [ 1 ] == 1 ){ printf ( \"%lld \" , n + 1 ); for ( register int i = 1 ; i <= n ; ++ i ) printf ( \"%lld \" , i ); puts ( \"\" ); continue ; } if ( a [ n ] == 0 ){ for ( register int i = 1 ; i <= n ; ++ i ) printf ( \"%lld \" , i ); printf ( \"%lld \" , n + 1 ); puts ( \"\" ); continue ; } for ( register int i = 1 ; i <= n ; ++ i ){ if ( a [ i ] == 0 && a [ i + 1 ] == 1 ){ for ( register int j = 1 ; j <= i ; ++ j ) cout << j << \" \" ; cout << n + 1 << \" \" ; for ( register int j = i + 1 ; j <= n ; ++ j ) cout << j << \" \" ; break ; } } puts ( \"\" ); continue ; } D1 \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60\u4e24\u4e2a\u72ec\u7acb\u7684\u68ee\u6797\uff0c\u73b0\u5728\u6bcf\u4e2a\u68ee\u6797\u90fd\u6709\u4e00\u4e9b\u8fb9\u3002 \u7136\u540e\u5982\u679c\u4f60\u8981\u6dfb\u52a0\u4e00\u6761\u8fb9 \\((u,v)\\) \uff0c\u90a3\u4e48\u4e24\u4e2a\u68ee\u6797\u7684 \\((u,v)\\) \u8fd9\u6761\u8fb9\u90fd\u8981\u52a0\u4e0a\u3002 \u95ee\u5728\u6ee1\u8db3\u8fd9\u4e24\u4e2a\u68ee\u6797\u4ecd\u65e7\u662f\u68ee\u6797\u7684\u6761\u4ef6\u4e0b\uff0c\u6700\u591a\u53ef\u4ee5\u52a0\u591a\u5c11\u6761\u8fb9\u3002 \\(n\\le1000\\) \u3002 \u50bb\u903c\u9898\uff0c\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u5757\u7136\u540e\u66b4\u529b\u679a\u4e3e\u6240\u6709\u6ca1\u6709\u8054\u901a\u7684\u70b9\u5bf9\uff0c\u52a0\u8fb9\u5373\u53ef\u3002 D2 \u03c8(\uff40\u2207\u00b4)\u03c8 \u540c D1 \uff0c \\(n\\le 10^5\\) \u672c\u6b21\u6bd4\u8d5b\u6700\u96be\u7684\u9898\u3002 \u8d5b\u65f6\u6ca1\u505a\u51fa\u6765\uff0c\u8d5b\u540e\u770b\u89c1\u4e00\u4e2a\u795e\u5947\u7684\u505a\u6cd5\uff1a \u5148\u8fde \\(1\\) \uff0c\u7136\u540e\u5bf9\u4e24\u4e2a\u68ee\u6797\u679a\u4e3e\u6bcf\u4e2a\u70b9\u770b\u8ddf \\(1\\) \u6709\u6ca1\u6709\u8fde\uff0c\u5728\u8fd9\u91cc\u9762\u627e\u70b9\u8fde\u7ebf\u3002 \u611f\u89c9\u6709\u70b9\u602a\u4f46\u662f\u80fd\u8fc7\uff08 E \u03c8(\uff40\u2207\u00b4)\u03c8 \\(\\gcd\\) +\u5927\u529b\u5bb9\u65a5+DP \\(\\because\\gcd(a_1,a_2...a_n)=1 \\Leftrightarrow\\sum_{d|\\gcd(a_1,a_2...a_n)}\\mu(d)\\) . \\(\\therefore\\) \u8ba1\u7b97\u5bf9\u4e8e\u6bcf\u4e2a \\(d\\) , \\(\\mu(d)\\) \u88ab\u7b97\u4e86\u591a\u5c11\u6b21\uff0c\u8fd9\u4e2a\u76f4\u63a5 \\(\\texttt{dp}\\) \u5373\u53ef\u3002 \u4e5f\u5c31\u662f\u679a\u4e3e \\(d\\) \uff0c\u7136\u540e\u8981\u8ba1\u7b97\u6709\u591a\u5c11\u4e2a\u6570\u5217\u6ee1\u8db3 \\(d|a_i\\) \u4e14 \\(\\sum_{i=1}^n a_i\\le m\\) \u601d\u8def\u6765\u81ea lgsdwn(Orz lgd) \u548c Silver187 \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 #include <bits/stdc++.h> using namespace std ; #define int long long const int si = 101000 ; const int mod = 998244353 ; int n , m ; int prime [ si ], mu [ si ]; bool vis [ si ]; void Mobius ( int n ){ memset ( vis , 0 , sizeof ( vis )); mu [ 1 ] = 1 , prime [ 0 ] = 0 ; for ( register int i = 2 ; i <= n ; i ++ ){ if ( ! vis [ i ]) prime [ ++ prime [ 0 ]] = i , mu [ i ] = -1 ; for ( register int j = 1 ; j <= prime [ 0 ] && i <= n / prime [ j ]; j ++ ){ vis [ i * prime [ j ]] = 1 ; if ( i % prime [ j ] == 0 ){ mu [ i * prime [ j ]] = 0 ; break ; } mu [ i * prime [ j ]] =- mu [ i ]; } } } int a [ si ], b [ si ]; int l [ si ], r [ si ]; int f [ si ], s [ si ]; signed main (){ scanf ( \"%lld%lld\" , & n , & m ); Mobius ( m ); for ( register int i = 1 ; i <= n ; ++ i ){ scanf ( \"%lld%lld\" , & a [ i ], & b [ i ]); } int res = 0 ; for ( register int d = 1 ; d <= m ; ++ d ){ if ( mu [ d ]){ for ( register int i = 1 ; i <= n ; ++ i ){ l [ i ] = ( a [ i ] + d -1 ) / d , r [ i ] = b [ i ] / d ; } int qwq = m / d ; for ( register int i = 0 ; i <= qwq ; ++ i ){ s [ i ] = 1 ; } for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= qwq ; ++ j ){ f [ j ] = 0 ; } for ( register int j = l [ i ]; j <= qwq ; ++ j ){ f [ j ] = s [ j - l [ i ]]; if ( j - r [ i ] -1 >= 0 ) f [ j ] = ( f [ j ] + mod - s [ j - r [ i ] -1 ]) % mod ; } s [ 0 ] = 0 ; for ( register int j = 1 ; j <= qwq ; ++ j ){ s [ j ] = ( s [ j -1 ] + f [ j ]) % mod ; } } res = ( res + mu [ d ] * s [ qwq ]) % mod ; } } res = ( res + mod ) % mod ; printf ( \"%lld \\n \" , res ); return 0 ; } Codeforces # 739\uff08div3\uff09 \u03c8(\uff40\u2207\u00b4)\u03c8 Contest ID: 1560 \u6c34\uff0c\u592a\u6c34\u4e86\uff08\uff09 FST\u7fa4\u7684\u5176\u4e2d\u516b\u4f4d\u7fa4\u53cb\u4e00\u8d77\u6574\u4e86\u4e2a\u6d3b\uff0c\u516c\u7528\u4e00\u4e2a\u795e\u5947\u7684\u540d\u5b57\u7684\u8d26\u53f7\u4e00\u8d77\u51b2rk1\uff0c\uff08\u5f53\u7136\u56e0\u4e3aF1\u7684\u7f5a\u65f6\u6211\u4eec\u662frk3\uff09 1 Demoe,\u5cf0,tjx,tearing,lgd,bmy,monsters \u6211\u5565\u4e5f\u6ca1\u8d21\u732e\uff08\u4ed6\u4eec\u5207\u9898\u592a\u5feb\u4e86\uff09 \u4f46\u662f\u56e0\u4e3a\u5206\u914d\u7684\u539f\u56e0\u6ca1\u670940min\u4ee5\u5185AK\uff08\u545c\u545c\uff09 \u6211\u5c31\u53ea\u80e1\u4e86\u4e00\u4e2aF1\u548cE\uff0c\u7136\u540eE\u8fd8\u5047\u4e86\u3002 \u4e8e\u662f\u540e\u9762\u770b\u5230\u516c\u7528\u53f7AK\u4e86\u4e4b\u540e\u53bb\u5f00A\u9898\u505a\u3002 \u540e\u9762\u5199\u5230 D \u9898\u5c31\u6709\u70b9\u56f0\u4e86\uff0c\u61d2\u5f97\u5199EF12\u4e86\uff0c\uff08\u53cd\u6b63F1F2\u80e1\u51fa\u6765\u4e86\u4e4b\u540e\u518d\u8865\uff0cE\u80e1\u4e0d\u51fa\u6765\u770b\u770b\u9898\u89e3\u628a\uff09 A \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e00\u4e2a\u6b63\u6574\u6570\u6570\u5217\uff0c\u4ece \\(1\\) \u5f00\u59cb\uff0c\u4e00\u76f4\u5f80\u540e\u4e00\u4e2a\u4e00\u4e2a\u7684\u589e\u52a0 \\(1\\) \uff0c\u4f46\u662f\u6ca1\u6709\u4e09\u7684\u500d\u6570\u548c\u4ee5\u4e09\u7ed3\u5c3e\u7684\u6570\u3002 \u7136\u540e\u95ee\u6570\u5217\u7b2c \\(k\\) \u9879 \\(1\\le k \\le 1000\\) \u3002 \u8bed\u6cd5\u9898\uff1a\u63d0\u524d for \u4e00\u904d\uff0c\u6253\u597d\u4e00\u5343\u9879\u7136\u540e\u76f4\u63a5\u8f93\u51fa\uff0c\u5b8c\u4e86\u3002 \u4e0d\u8fc7\u6628\u665a\u9b54\u6014\u4e86\uff0c\u5c45\u7136\u5fd8\u8bb0\u4e86 % \u7684\u5b58\u5728\uff0c\u76f4\u63a5\u5199\u4e86\u4e00\u4e2a\uff1a 1 2 3 inline int mod ( int x , int p ){ return x < 0 ? ( x + p ) - ((( x + p ) / p ) * p ) : x - (( x / p ) * p ); } \u96be\u602a\u6ca1\u6709\u4e00\u5206\u949fA\u3002 B \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e00\u4e2a\u73af\uff0c\u73af\u4e0a\u4ece \\(1 \\sim n\\) \u4f9d\u6b21\u7ad9\u4e86 \\(n\\) \u4e2a\u4eba\uff08 \\(n\\) \u662f\u5076\u6570\uff09\u3002 \u7136\u540e\u5047\u8bbe\u6709\u4e24\u4e2a\u4eba \\(x,y\\) \u9762\u5bf9\u7740\uff0c\u90a3\u4e48 \\(x,y\\) \u7684\u8fde\u7ebf\u5c31\u4e00\u5b9a\u8fc7\u5706\u5fc3\u3002 \u73b0\u5728\u7ed9\u4f60\u4e00\u4e2a\u9762\u5bf9\u7740\u7684\u4e24\u4e2a\u4eba\u7684\u5e8f\u53f7 \\(a,b\\) \uff0c\u518d\u53e6\u5916\u7ed9\u5b9a\u4e00\u4e2a \\(c\\) \uff0c\u6c42 \\(c\\) \u9762\u5bf9\u7684\u4eba\u7684\u5e8f\u53f7\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u73af\uff0c\u8f93\u51fa \\(-1\\) \u3002 \u53d1\u73b0\u4e24\u4e2a\u76f8\u5bf9\u70b9\u5e8f\u53f7\u4e4b\u5dee\u7684\u7edd\u5bf9\u503c\u7684\u4e24\u500d\u5c31\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u73af\u7684 \\(n\\) \uff0c\u7136\u540e\u968f\u4fbf\u5224\u4e00\u4e0b\u5c31\u884c\u3002 1 2 3 4 5 int R = abs ( a - b ), n = R << 1 ; if ( c > n || ( c + R > n && c <= R ) || c + R == a || c + R == b || c - R == a || c - R == b || b > n || a > n ){ puts ( \"-1\" ); continue ; } else printf ( \"%lld \\n \" , c <= R ? c + R : c - R ); C \u03c8(\uff40\u2207\u00b4)\u03c8 UPD\uff1a\u8349\uff0c\u8fd9\u9898\u6211\u5b9e\u9645\u4e0aFST\u4e86\uff08\u4e45\u8fdd\u4e86\uff09 \u56e0\u4e3a\u6211\u662funofficial\u53c2\u8d5b\u6240\u4ee5\u6ca1\u6d4bst\u3002 \u9ebb\u4e86\u3002 \u4e4b\u540e\u6709\u65f6\u95f4\u5c31\u8865\u4e00\u53d1\u3002 D \u03c8(\uff40\u2207\u00b4)\u03c8 \u53d1\u73b0\u6253\u51fa \\(2^k\\) \u7684\u4e00\u4e2a\u8868\uff08 \\(1\\le k \\le 31\\) \uff09\u5c31\u80fd\u5f00\u59cb\u4e71\u641e\u3002 \u7136\u540e\u6839\u636e\u9898\u76ee\u8981\u6c42\u968f\u4fbf\u66b4\u529b\u5339\u914d\u4e00\u4e0b\u5c31\u884c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 int cal ( string s , string ss ){ int res = 0 ; for ( register int i = 0 ; i < ( int ) s . size () && res < ( int ) ss . size (); ++ i ){ if ( s [ i ] == ss [ res ]) ++ res ; } return res ; } int main (){ scanf ( \"%d\" , & T ); while ( T -- ){ cin >> s ; int res = 1e9 ; for ( register int i = 0 ; i < 109 ; ++ i ){ res = min ( res ,( int )( s . size () - cal ( s , a [ i ]) * 2 + a [ i ]. size ())); } printf ( \"%d \\n \" , res ); } return 0 ; } //a\u662f\u6253\u7684\u8868\u3002 \u5176\u5b9e\u6b63\u89e3\u662f\uff1a\u8d2a\u5fc3\uff0c\u786e\u5b9a\u4e86\u53d8\u6210\u7684\u6570 \\(t\\) ,\u7136\u540e\u4e00\u4f4d\u4e00\u4f4d\u5339\u914d\u3002 \u6211\u672c\u6765\u60f3\u5199\u8fd9\u4e2a\uff08 \u4f46\u6211\u611f\u89c9\u6253\u8868\u5f88\u725b\u903c\u554a\uff0c\u5c31\u6253\u4e86\uff08 E \u03c8(\uff40\u2207\u00b4)\u03c8 \u5de8\u5927\u591a\u7591\u60d1\u9898\uff0c\u4e0d\u4f1a\u3002 F1 && F2 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5bb3\uff0c\u6211\u611f\u89c9\u8fd9\u4e2aF\u662fd2a\u6c34\u5e73\u3002 \u9ebb\u4e86\uff0cF1\u5c31\u662fF2\u7684\u7279\u6b8a\u60c5\u51b5\uff0cF2\u5927\u66b4\u641c\u52a0\u4e2a\u5c0f\u526a\u679d\u4f18\u5316\u5c31\u8fc7\u4e86\u3002 \u4f46\u662f\uff0c\u5176\u5b9e\u6709\u4e00\u70b9\u4e0d\u592a\u597d\u5199\uff08\uff09 \u9898\u76ee\u8981\u6c42\u4f60\u627e\u5230 \u6700\u5c0f\u7684 \u4e0d\u540c\u6570\u5b57\u7684\u4e2a\u6570\u4e0d\u8d85\u8fc7 \\(k\\) \u4e14\u8fd9\u4e2a\u6570\u5927\u4e8e\u7b49\u4e8e \\(n\\) \u7684\u6570\u3002 \u53d1\u73b0F2\u7684 \\(k\\) \u90fd\u53ea\u6709 \\(10\\) ,\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u5927\u66b4\u641c\uff0c\u4ece\u9ad8\u5230\u4f4e\u4f4d\u4e00\u4e2a\u4e00\u4e2a\u4f4d\u5730\u8bd5\u586b\u3002 \u6bcf\u4e00\u4f4d\u4ece \\(1 \\sim 9\\) \u5f00\u59cb\u586b\uff0c\u5f53\u9ad8\u4f4d\u5408\u6cd5\u7684\u65f6\u5019\u7acb\u9a6c\u5411\u4e0b\u586b\uff0c\u76f4\u5230\u6240\u6709\u4f4d\u90fd\u5408\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include <bits/stdc++.h> using namespace std ; const int si = 1e3 + 10 ; int cnt [ si ], ans [ si ]; int T , k , n ; string s ; bool dfs ( int now , int val , bool tag ){ if ( val > k ) return false ; if ( now == n && val <= k ){ for ( register int i = 0 ; i < n ; ++ i ){ printf ( \"%d\" , ans [ i ]); } puts ( \"\" ); return true ; } for ( register int i = tag ? s [ now ] - '0' : 0 ; i <= 9 ; ++ i ){ ++ cnt [ i ], ans [ now ] = i ; if ( cnt [ i ] == 1 ){ if ( dfs ( now + 1 , val + 1 , tag && i == s [ now ] - '0' )) return true ; } else if ( dfs ( now + 1 , val , tag && i == s [ now ] - '0' )) return true ; -- cnt [ i ]; } return false ; } signed main (){ scanf ( \"%d\" , & T ); while ( T -- ){ for ( register int i = 0 ; i <= 10 ; ++ i ){ cnt [ i ] = ans [ i ] = 0 ; } cin >> s ; scanf ( \"%d\" , & k ); n = ( int ) s . size (); if ( ! dfs ( 0 , 0 , 1 )){ printf ( \"10\" ); for ( register int i = 2 ; i < k ; ++ i ){ printf ( \"%d\" , i ); } puts ( \"\" ); } } return 0 ; } Atcoder Beginning Contest 215 \u03c8(\uff40\u2207\u00b4)\u03c8 Contest ID\uff1a abc_125 \u90e8\u5206\u8865\u9898\u6709 \u53c2 \u8003 A & B \u03c8(\uff40\u2207\u00b4)\u03c8 \u8bed\u6cd5\u9898\u3002 B\u7684\u8bdd\u9700\u8981\u624b\u5199 \\(\\log_2\\) \u3002 \u81ea\u5e26\u7684 \\(\\log_2\\) \u4e00\u65e6\u4e0a\u4e86 \\(2^{59}\\) \u5de6\u53f3\u5c31\u4f1a\u51fa\u4e8b\uff0c\u6240\u4ee5\u5efa\u8bae\u624b\u5199\u4e0b\u9762\u7684\uff1a 1 2 3 4 5 6 7 unsigned long long Log2EX ( unsigned long long x ) { unsigned long long i = 0 ; for ( i = 64 ; i >= 0 ; i -- ){ if ( 1 == ( x >> i ) & 0x1 ) break ; } return i ; } C \u03c8(\uff40\u2207\u00b4)\u03c8 \u95ee\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32\u6309\u5b57\u5178\u5e8f\u7684\u7b2c \\(k\\) \u4e2a\u6392\u5217\u3002 \u6c34\u9898\uff0c\u4f7f\u7528 next_permutation \u5373\u53ef\u3002\u3001 \u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u8fd4\u56de\u4e0b\u4e00\u4e2a\u6392\u5217\uff0c\u4f46\u662f\u5982\u679c\u8981\u5168\u6392\u5217\u7684\u8bdd\u4e00\u5b9a\u8981\u5148 sort 1 2 3 4 5 6 int cnt = 0 ; sort ( s . begin (), s . end ()); //\u4e00\u5b9a\u8981sort do { ++ cnt ; if ( cnt == n ) cout << s << endl ; } while ( next_permutation ( s . begin (), s . end ())); \u5176\u5b9e\u5b8c\u5168\u53ef\u4ee5\u76f4\u63a5 break \uff0c\u4e0d\u8fc7\u6ca1\u4ec0\u4e48\u5f71\u54cd\u3002 D \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4e00\u4e2a\u5e8f\u5217\uff0c\u8981\u6c42\u4f60\u627e\u51fa\u6240\u6709\u5728\u503c\u57df \\([1,m]\\) \u4e4b\u95f4\u7684 \\(k\\) \uff0c\u6ee1\u8db3 \\(k\\) \u548c\u5e8f\u5217\u91cc\u7684\u6240\u6709\u6570\u90fd\u4e92\u8d28\u3002 \u8003\u8651\u8d28\u56e0\u6570\u5206\u89e3\uff0c\u5bf9\u6bcf\u4e2a\u6570\u5206\u89e3\uff0c\u5bf9\u8d28\u6570\u6c42\u5e76\u3002 \u90a3\u4e48\u8003\u8651\u6bcf\u4e00\u4e2a \\(i\\) \uff0c\u540c\u6837\u8d28\u56e0\u6570\u5206\u89e3\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 #include <bits/stdc++.h> using namespace std ; #define int long long const int si = 1e5 + 10 ; int n , m , cnt , res ; int a [ si ], prime [ si ]; bool vis [ si ], ans [ si ]; inline int mod ( int x , int p ){ return x < 0 ? ( x + p ) - ((( x + p ) / p ) * p ) : x - (( x / p ) * p ); } int tp [ si ], pos [ si ]; void Euler ( int n ){ for ( register int i = 2 ; i <= n ; ++ i ){ if ( tp [ i ]) continue ; prime [ ++ cnt ] = i , pos [ i ] = cnt ; for ( register int j = ( i << 1 ); j <= n ; j += i ){ tp [ j ] = 1 ; } } } signed main (){ cin >> n >> m ; Euler ( m ); for ( register int i = 1 ; i <= n ; ++ i ){ cin >> a [ i ]; } for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= cnt && 1l l * prime [ j ] * prime [ j ] <= a [ i ]; ++ j ){ if ( ! mod ( a [ i ], prime [ j ])) vis [ j ] = true ; while ( ! mod ( a [ i ], prime [ j ])) a [ i ] /= prime [ j ]; } if ( a [ i ] != 1 ) vis [ pos [ a [ i ]]] = true ; } memset ( ans , true , sizeof ans ); for ( register int i = 1 ; i <= cnt ; ++ i ){ if ( vis [ i ]) for ( register int j = prime [ i ]; j <= m ; j += prime [ i ]) ans [ j ] = 0 ; } for ( register int i = 1 ; i <= m ; ++ i ){ if ( ans [ i ]) res += 1 ; } cout << res << endl ; for ( register int i = 1 ; i <= m ; ++ i ){ if ( ans [ i ]) cout << i << endl ; } return 0 ; } E \u03c8(\uff40\u2207\u00b4)\u03c8 \u9898\u9762\u5f88\u602a\uff0c\u8fd9\u91cc\u76f4\u63a5\u7ed9\u4e00\u4e2a\u7b80\u5316\u7248 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u9009\u62e9\u4e00\u4e2a\u5b50\u5e8f\u5217\u51fa\u6765\uff0c\u6ee1\u8db3\u540c\u4e00\u79cd\u5b57\u7b26\u5728\u8fd9\u4e2a\u5b50\u5e8f\u5217\u91cc\u9762\u90fd\u5728\u4e00\u6bb5\u91cc\uff0c\u6c42\u65b9\u6848\u6570\u5bf9 \\(998244353\\) \u53d6\u6a21\u3002 \u4e5f\u5c31\u662f\u4e0d\u4f1a\u6709 BBABB \u8fd9\u79cd\u60c5\u51b5\u3002 \u5b57\u7b26\u79cd\u7c7b\u5c0f\u4e8e\u5341\uff0c\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u8d85\u8fc7\u4e00\u5343\u3002 \u4e00\u4e2a\u6bd4\u8f83\u677f\u5b50\u7684\u72b6\u538b\uff1f \u8003\u573a\u6ca1\u8c03\u51fa\u6765\u3002 \u8bbe \\(f_{i,msk,t}\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u573a\u6bd4\u8d5b\uff0c\u5f53\u524d\u72b6\u6001\u662f \\(msk\\) \uff0c\u6700\u540e\u6253\u7684\u4e00\u573a\u7684\u79cd\u7c7b\u662f \\(t\\) \u3002 \u4e14\u7b2c \\(i\\) \u573a\u6bd4\u8d5b\u7684\u79cd\u7c7b\u662f \\(k\\) \u3002 \u6240\u4ee5\u6709\u8f6c\u79fb\u65b9\u7a0b\uff1a \\(\\begin{cases}f_{i,msk,t}=f_{i-1,msk,t}\\\\f_{i,msk,t}=f_{i,msk,t}+f_{i-1,msk,t},(t=k)\\\\f_{i,u\\ \\text{or}\\ 2^{k},k}+=f_{i-1,u,t}\\\\f_{i,2^{k},k}=f_{i,2^{k},k}+1\\end{cases}\\) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include <bits/stdc++.h> using namespace std ; const int Mod = 998244353 ; const int si = 1028 ; int n , f [ si ][ si ][ 10 ]; inline int mod ( int x ){ return x < 0 ? ( x + Mod ) - ((( x + Mod ) / Mod ) * Mod ) : x - (( x / Mod ) * Mod ); } string s ; int main (){ cin >> n >> s ; s = ' ' + s ; for ( register int i = 1 ; i <= n ; ++ i ){ int k = s [ i ] - 'A' ; for ( register int msk = 1 ; msk <= 1024 ; ++ msk ){ for ( register int j = 0 ; j < 10 ; ++ j ){ f [ i ][ msk ][ j ] = f [ i -1 ][ msk ][ j ]; if ( j == k ) f [ i ][ msk ][ j ] = mod ( f [ i ][ msk ][ j ] + f [ i -1 ][ msk ][ k ]); } } for ( register int msk = 1 ; msk <= 1024 ; ++ msk ){ if ( msk & ( 1 << k )) continue ; for ( register int j = 0 ; j < 10 ; ++ j ){ f [ i ][ msk | ( 1 << k )][ k ] = mod ( f [ i ][ msk | ( 1 << k )][ k ] + f [ i -1 ][ msk ][ j ]); } } f [ i ][ 1 << k ][ k ] = mod ( f [ i ][ 1 << k ][ k ] + 1 ); } int res = 0 ; for ( register int i = 1 ; i <= 1024 ; ++ i ){ for ( register int j = 0 ; j < 10 ; ++ j ){ res = mod ( f [ n ][ i ][ j ] + res ); } } cout << res << endl ; return 0 ; } F \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a \\(n\\) \u4e2a\u70b9\uff0c\u5b9a\u4e49\u4e24\u4e2a\u70b9\u5bf9 \\((x_1,y_1),(x_2,y_2)\\) \u7684\u8ddd\u79bb\u4e3a \\(\\min (|x_1-x_2|,|y_1-y_2|)\\) \u3002 \u6c42\u4efb\u610f\u4e24\u4e2a\u70b9\u5bf9\u4e4b\u95f4\u8ddd\u79bb\u7684\u6700\u5927\u503c\u3002 \\(n\\) \u5728 \\(2\\times 10^5\\) \u7ea7\u522b\uff0c\u5750\u6807\u90fd\u662f \\(10^9\\) \u7ea7\u522b\u3002 \u7b2c\u4e00\u53cd\u5e94\u662f\u76f4\u63a5\u66b4\u529b\uff0c\u7136\u540e\u53d1\u73b0\u662f \\(\\text{O}(n^2)\\) \u7ea7\u522b\uff0c\u7206\u70b8\u3002 \u7136\u540e\u6709\u4e00\u4e2a\u5206\u522b\u4ece \\(x,y\\) \u8f74\u5927\u529b\u7ef4\u62a4\u533a\u95f4\u4fe1\u606f\u7684\u505a\u6cd5\uff0c\u7136\u540e\u53d1\u73b0\u4e0d\u53ef\u505a\u3002 \u4e8e\u662f\u5728\u6781\u5ea6\u7edd\u671b\u7684\u65f6\u5019\uff0c\u6211\u770b\u89c1\u4e86\u4e8c\u5206\u3002 \u6211\u89c9\u5f97\u8fd9\u4e2a\u4e1c\u897f\u4e5f\u8bb8\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5224\u5b9a\u6027\u95ee\u9898\u3002 \u5047\u8bbe \\(\\min (|x_1-x_2|,|y_1-y_2|) \\ge k\\) \u90a3\u4e48\u5f88\u660e\u663e\uff0c \\(|x_1-x_2| \\ge k ,|y_1-y_2| \\ge k\\) \u7136\u540e\u8fd9\u4e1c\u897f\u5f88\u660e\u663e\u5177\u6709\u5355\u8c03\u6027\uff0c\u73b0\u5728\u8003\u8651\u600e\u4e48\u4e8c\u5206 \\(k\\) \u3002 \u9996\u5148\u4f60\u5148\u5bf9 \\(x\\) \u5347\u5e8f\u6392\u5e8f\u65b9\u4fbf\u5904\u7406\u3002 \u5982\u679c\u5728 \\(k\\) \u53ef\u884c\u7684\u524d\u63d0\u4e0b \u7684\u8bdd\uff0c\u5c31\u5047\u8bbe\u6709\u4e00\u4e2a\u70b9 \\((x_i,y_i)\\) \u3002 \u7136\u540e\u518d\u5047\u8bbe \\(y\\) \u6700\u5c0f\u7684\u70b9\u662f \\((x.y)\\) \uff08\u8fd9\u91cc\u7a0d\u5fae\u8d2a\u5fc3\u4e86\u4e00\u4e0b\uff09\u3002 \u7136\u540e\u5982\u679c\u8bf4 \\(x_i-x \\ge k\\) \u4e86\uff0c\u90a3\u4e48\u5f88\u660e\u663e\uff0c\u56e0\u4e3a \\(k\\) \u662f\u53ef\u884c\u7684\uff0c\u6240\u4ee5 \\(y_i-y \\ge k\\) \u4e5f\u5c31\u662f\u6709\uff1a \\(A\\begin{cases}x_i-k \\ge x\\\\y_i-k \\ge y\\end{cases}\\) \u4f46\u662f\u4f60\u53d1\u73b0\u53ef\u80fd\u4f1a\u6709\u8fd9\u79cd\u60c5\u51b5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 y \\ | \u00b7(xx,ymax) | | | | | | \u00b7(x_i,y_i) | | \u00b7(x,ymin) ---------------------------\\x \u4e5f\u5c31\u662f\u8bf4 \\(y\\) \u7684\u6700\u5927\u503c\u53ef\u80fd\u6bd4 \\(y\\) \u7684\u6700\u5c0f\u503c\u505a\u51fa\u7684\u8d21\u732e\u66f4\u5927\uff0c\u6240\u4ee5\u6700\u5927\u7684 \\(y\\) \u4e5f\u8981\u8dd1\u4e00\u904d\u3002 \u540c\u7406\u5c31\u662f \\(B \\begin{cases}x_i+k \\le x\\\\y_i+k \\le y\\end{cases}\\) \u6240\u4ee5\u6211\u4eec\u5728\u4e8c\u5206\u7684\u91cc\u9762\u53bbcheck \\(A,B\\) \u8fd9\u4e24\u4e2a\u6761\u4ef6\u662f\u5426\u6709\u81f3\u5c11\u4e00\u4e2a\u6210\u7acb\u5c31\u53ef\u4ee5\u4e86\u3002 \u7136\u540e\u5177\u4f53\u6765\u8bf4\u5c31\u662f\u6309\u7167 \\(x\\) \u6392\u4e00\u4e2a\u5e8f\uff0c\u7136\u540e\u8fdb\u884c\u5206\u6bb5\u53cc\u6307\u9488\u3002 \u4ee5 \\(i\\) \u4e3a\u53f3\u7aef\u70b9\uff0c \\(j\\) \u4e3a\u5de6\u7aef\u70b9\uff0c\u90a3\u4e48\u4ec0\u4e48\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u53f3\u79fb\u5de6\u7aef\u70b9\uff1f \u5c31\u662f \\(j+1\\) \u8fd9\u4e2a\u70b9\uff0c\u4ed6\u7684\u6a2a\u5750\u6807\u548c \\(i\\) \u7684\u5dee\u503c\u5927\u4e8e\u7b49\u4e8e\u8fd9\u4e2a \\(k\\) \u3002 \u90a3\u4e48\u663e\u7136\u5982\u679c\u6211\u5728 \\(i\\) \u5904\u505a\u5230\u4e86 \\(j\\) \uff0c\u90a3\u4e48\u6240\u6709 \\(i\\) \u53f3\u8fb9\u7684\u70b9\u548c \\(j\\) \u7684\u7ec4\u5408\u90fd\u662f\u5408\u6cd5\u7684\uff0c\u6240\u4ee5\u8fd9\u4e2a \\(j\\) \u4ed6\u5c31\u6c38\u8fdc\u662f\u5408\u6cd5\u7684\u3002 \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8bb0\u5f55\u4e00\u4e0b\u5df2\u505a\u5230\u7684 \\(j\\) \u4ed6\u7684\u7eb5\u5750\u6807\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff0c\u548c\u6bcf\u4e00\u4e2a\u8fdb\u53bb\u7684 \\(i\\) \u7684\u7eb5\u5750\u6807\u51cf\u4e00\u51cf\uff0c \u5982\u679c\u7eb5\u5750\u6807\u4e4b\u5dee\u8981\u5927\u4e8e\u7b49\u4e8e \\(k\\) \uff0c\u800c\u6a2a\u5750\u6807\u6211\u4eec\u5df2\u7ecf\u8bc1\u660e\u4e86\u4ed6\u7684\u5dee\u503c\u5fc5\u5b9a\u5927\u4e8e\u7b49\u4e8e \\(k\\) \uff0c\u90a3\u4e48\u8fd9\u4e2a \\(k\\) \u5c31\u80af\u5b9a\u662f\u6210\u7acb\u7684\u3002 \u4f46\u662f\u8fd9\u4e2a\u9898\uff0c\u5982\u679c\u53ea\u904d\u5386\u4e00\u6b21\u90a3\u4e48\u7b54\u6848\u53ef\u80fd\u4f1a\u88ab\u6f0f\u6389\uff0c\u6240\u4ee5\u8fd8\u5f97\u4ece\u53f3\u5f80\u5de6\u904d\u5386\u4e00\u904d\uff0c\u6b64\u65f6 \\(j\\) \u662f\u53f3\u7aef\u70b9\uff0c \\(i\\) \u662f\u5de6\u7aef\u70b9\u3002 \u56e0\u4e3a\u4e0d\u53ef\u6297\u529b\u56e0\u7d20\u8ba9\u6211\u603b\u662f\u5947\u602a\u7684WA\uff0c\u6240\u4ee5\u5bf9\u7740tutorial \u6539\u4e86\u4e00\u4e9b\u5730\u65b9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 #include <bits/stdc++.h> using namespace std ; #define xi first #define yi second int n ; int main (){ cin >> n ; vector < pair < int , int > > v ( n ); for ( register int i = 0 ; i < n ; ++ i ){ cin >> v [ i ]. xi >> v [ i ]. yi ; } sort ( v . begin (), v . end ()); int l = 0 , r = 1e9 + 7 ; while ( r - l > 1 ){ int mid = ( l + r ) >> 1 ; queue < pair < int , int > > q ; bool f = false ; int mi = 1e9 + 7 , mx = 0 ; for ( auto p : v ){ while ( ! q . empty ()){ int x = q . front (). xi , y = q . front (). yi ; if ( x > p . xi - mid ) break ; mi = min ( mi , y ), mx = max ( mx , y ); q . pop (); } if ( mi <= p . yi - mid || mx >= p . yi + mid ) f = true ; q . push ( p ); } if ( f ) l = mid ; else r = mid ; } cout << l << endl ; return 0 ; } ```` ### G & H > \u4e0d\u4f1a ## Nowcoder PJ 28 Contest ID \uff1a` 11235 ` \u51fa\u9898\u4eba\u662fFST\u7fa4\u7fa4\u53cb \uff1a CSP - Sept ~~~ \u5f88\u6709\u611f\u89c9 \uff0c \u5f00\u573a\u4e00\u4e2a\u5c0f\u65f6\u53ea\u8fc7\u4e86A \uff0c \u7136\u540e\u6700\u540e\u534a\u5c0f\u65f6\u76f4\u63a5AK \uff0c \u523a\u6fc0 \u3002 \u53e6\u5916\u725b\u5ba2\u7684\u5c0f\u767d\u6708\u8d5b36\u5c31\u4e0d\u5199\u4e86 \uff0c \u53ea\u6709E\u611f\u89c9\u6bd4\u8f83\u6709\u4ef7\u503c \u3002 ### A \u53d1\u73b0\u8fd9\u4e2a\u79fb\u52a8\u662f\u6709\u5468\u671f\u6027\u7684 \uff0c \u800c\u4e14\u79fb\u52a8\u6b21\u6570\u662f $10 ^ { 18 } $ \u3002 \u6240\u4ee5\u5c31\u662f\u4e2a\u8bc8\u9a97\u9898 \uff08 \u76f4\u63a5\u628a\u79fb\u52a8\u6b21\u6570\u6a21\u4e0a\u5b57\u7b26\u4e32\u957f\u5ea6 \uff0c \u7136\u540e\u4ece\u8fd9\u4e2a\u4f59\u6570 $ + 1 $ \u4f4d\u5f00\u59cb\u8f93\u51fa \uff0c \u7136\u540e\u5728\u4ece\u7b2c $1$ \u4f4d\u4e00\u76f4\u8f93\u51fa\u5230\u4f59\u6570\u8fd9\u4e00\u4f4d\u5373\u53ef \u3002 1 minAC \uff08 ``` cpp #include <bits/stdc++.h> using namespace std ; #define int long long string s ; int n , x ; signed main (){ cin >> n >> x ; cin >> s ; s = ' ' + s ; int r = x % n ; for ( int i = r + 1 ; i <= n ; ++ i ) cout << s [ i ]; for ( int i = 1 ; i <= r ; ++ i ) cout << s [ i ]; } B \u03c8(\uff40\u2207\u00b4)\u03c8 \u6700\u540e\u624dAC\u7684\u9898\u3002 \u8fd9\u4e2a\u662f\u5728\u77e9\u9635\u4e0a\u6c42 \\(y\\) \u8f74\u65b9\u5411\u7684 \\(\\texttt{LIS}\\) \uff0c\u7136\u540e\u77e9\u9635\u6700\u5927 \\(5\\times10^3 \\times 10^3\\) \u542c\u4f55\u795e\u8bf4\u6709\u4e00\u79cd \\(\\text{O}(NK)\\) \u7684\u505a\u6cd5\uff0c\u4f46\u662f\u6211\u4e0d\u4f1a\u3002 \u8003\u8651\u8bbe \\(f_i\\) \u8868\u793a\u957f\u5ea6\u4e3a \\(i\\) \u7684 \\(\\texttt{LIS}\\) \u7684\u6700\u5c0f\u7ed3\u5c3e\uff0c\u8fd9\u6837\u5b50\u65b9\u4fbf\u53bb\u8f6c\u79fb\u3002 \u7136\u540e\u53d1\u73b0\u8fd9\u5c31\u662f \\(\\text{O} (n \\log n)\\) \u6c42 \\(\\texttt{LIS}\\) \u7684\u72b6\u6001\u3002 \u6240\u4ee5\u6211\u4eec\u8003\u8651\u76f4\u63a5\u591a\u5faa\u73af\u4e00\u6b21\u7136\u540e\u5957\u4e0a\u677f\u5b50\u3002 \u7136\u540e\u4f60\u53d1\u73b0\u5728 1 2 1 5 1 2 3 4 5 \u7684\u8fd9\u4e2a\u6570\u636e\u4e0a\u4f60\u4f1a\u8f93\u51fa \\(5\\) \u3002 \u4e3a\u5565\u90a3\uff1f \u56e0\u4e3a\u6211\u4eec\u7684\u505a\u6cd5\u4f1a\u5bfc\u81f4\u91cd\u590d\u8986\u76d6\u3002 \u5c31\u548c01\u80cc\u5305\u4e00\u4e2a\u9053\u7406\uff0c\u6240\u4ee5 reverse \u4e00\u4e0b\u5c31\u597d\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #include <bits/stdc++.h> using namespace std ; #define int long long const int si = 1e3 + 10 ; int k , n ; #define pb push_back vector < int > v [ si ]; int f [ si ]; int nlogn_lis (){ int len = 0 ; f [ 0 ] = -1 ; for ( int i = 1 ; i <= n ; ++ i ){ for ( int j = 0 ; j < ( int ) v [ i ]. size (); ++ j ){ if ( v [ i ][ j ] > f [ len ]) f [ ++ len ] = v [ i ][ j ]; else * lower_bound ( f , f + len , v [ i ][ j ]) = v [ i ][ j ]; } } return len ; } signed main (){ scanf ( \"%lld%lld\" , & k , & n ); for ( int i = 1 ; i <= n ; ++ i ){ for ( int j = 1 , q ; j <= k ; ++ j ){ scanf ( \"%lld\" , & q ); v [ i ]. pb ( q ); } reverse ( v [ i ]. begin (), v [ i ]. end ()); } printf ( \"%lld\" , nlogn_lis ()); } C \u03c8(\uff40\u2207\u00b4)\u03c8 \u5927\u539f\u9898\uff0c\u6d1b\u8c37\u4e0a\u7684\u201c\u56fe\u7684\u904d\u5386\u201d\u5c31\u662f\u57fa\u672c\u4e00\u6837\u7684\u3002 \u6211\u672c\u6765\u5199\u7684\u662f\u7f29\u70b9+DP\uff0c\u4f46\u662f\u6302\u4e86\u597d\u591a\u53d1\u3002 \u7a81\u7136\u60f3\u8d77\u53ef\u4ee5\u201c\u6b63\u96be\u5219\u53cd\u201d\u7684\u601d\u60f3\u505a\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\u80fd\u5230\u8fbe\u7684\u70b9\uff0c \u8bb0\u5f55\u53ef\u4ee5\u5230\u8fd9\u4e2a\u70b9\u6240\u6709\u70b9\u7684\u7f16\u53f7\u7684\u6700\u5c0f\u503c\u3002 \u7136\u540e\u5efa\u53cd\u56fe\u8dd1\u4e00\u904d\u5c31\u884c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <bits/stdc++.h> using namespace std ; const int si = 1e5 + 10 ; int n , m , f [ si ]; vector < int > g [ si ]; vector < int > v ; void dfs ( int x , int d ){ if ( f [ x ]) return ; f [ x ] = d ; for ( int i = 0 ; i < g [ x ]. size (); i ++ ) dfs ( g [ x ][ i ], d ); } int main (){ scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 , u , vv ; i <= m ; i ++ ){ scanf ( \"%d%d\" , & u , & vv ); g [ vv ]. push_back ( u ); } for ( int i = 1 ; i <= n ; i ++ ) dfs ( i , i ); for ( int i = 1 ; i <= n ; i ++ ) v . push_back ( f [ i ]); sort ( v . begin (), v . end ()); v . erase ( unique ( v . begin (), v . end ()), v . end ()); for ( int i = 0 ; i < ( int ) v . size (); ++ i ) cout << v [ i ] << \" \" ; return 0 ; } D \u03c8(\uff40\u2207\u00b4)\u03c8 \u5f88\u7cbe\u5999\u7684DP\u3002 \u53d1\u73b0\u6b63\u7740\u505a\u5f88\u9ebb\u70e6\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u5e8f\u5217\u5012\u8fc7\u6765\uff0c\u53d1\u73b0\u8fd9\u4e1c\u897f\u5f88\u5e73\u51e1\u3002 \u8bbe \\(f_i\\) \u8868\u793a\u5012\u8fc7\u6765\u4e4b\u540e\u4ece \\([1,i]\\) \u8fd9\u4e2a\u533a\u95f4\u5168\u90e8\u5403\u5b8c\u7684\u6700\u5927\u503c\u3002 \u7136\u540e\u8003\u8651 \\(a_i\\) \uff0c\u4ed6\u4e0d\u662f\u8fd9\u4e2a\u533a\u95f4\u6700\u540e\u4e00\u4e2a\u5403\u7684\u5c31\u662f\u7b2c\u4e00\u4e2a\u5403\u7684\u3002 \u6240\u4ee5\u5904\u7406\u51fa \\(\\Delta\\) \u7684\u524d\u7f00\u548c\uff0c\u6240\u4ee5\u5206\u4e24\u79cd\u60c5\u51b5\u8f6c\u79fb\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #include <bits/stdc++.h> using namespace std ; #define int long long const int si = 2e5 + 10 ; int n ; int a [ si ], delta [ si ]; int f [ si ], sum [ si ]; inline int cal ( int pos ){ return (( pos -1 ) * delta [ pos ]) + a [ pos ]; } signed main (){ scanf ( \"%lld\" , & n ); for ( int i = n ; i >= 1 ; -- i ){ scanf ( \"%lld\" , & a [ i ]); } for ( int i = n ; i >= 1 ; -- i ){ scanf ( \"%lld\" , & delta [ i ]); } for ( int i = 1 ; i <= n ; ++ i ){ sum [ i ] = sum [ i -1 ] + delta [ i ], f [ i ] = -10737418190000000 ; } f [ 1 ] = a [ 1 ]; for ( int i = 2 ; i <= n ; ++ i ){ f [ i ] = max ( f [ i -1 ] + sum [ i -1 ] + a [ i ], f [ i -1 ] + cal ( i )); } return printf ( \"%lld\" , f [ n ]), 0 ; } Atcoder Beginning Contest 216 \u03c8(\uff40\u2207\u00b4)\u03c8 Contest ID: abc_216 \u5f00\u5b66\u524d\u4e00\u5929\u665a\u4e0a\u6709\u8fde\u7740\u7684ABC\u548c\u4e00\u573aCF\uff0c\u53ef\u4ee5\u4e0a\u5927\u5206\u529b\uff01\u3002 \u56e0\u4e3a\u660e\u5929\u5c31\u5f00\u5b66\u4e86\u6240\u4ee5\u5c31\u5148\u5495\u8fd9\u4e0d\u5199\u3002 \u5230\u65f6\u5019\u8bfe\u8868\u51fa\u6765\u4e4b\u540e\u627e\u7ade\u8d5b\u8bfe\u65f6\u95f4\u4e0a\u6765\u673a\u623f\u5199\u3002 G \u662f\u4e2a\u88f8\u7684\u5dee\u5206\u7ea6\u675f\uff0c\u53ef\u60dc\u6ca1\u5199\uff0c\u4e0d\u7136\u5c31\u53ea\u5dee H \u4e86\u3002 \u6700\u8fd1\u6253\u7684\u6700\u597d\u7684\u4e00\u6b21ABC\uff08\u53ef\u80fd\u662f\u6c34\u4e86\uff1f\uff09 A & B \u03c8(\uff40\u2207\u00b4)\u03c8 \u90fd\u662f\u8bed\u6cd5\u9898\u3002 A\u7684\u8bdd\u7279\u5224\u4e00\u4e0b\uff0cB\u7684\u8bdd\u6574\u4e2a map<pair<string,string>,bool> \u5c31\u8fc7\u4e86 C \u03c8(\uff40\u2207\u00b4)\u03c8 \u5f88\u5999\uff0c\u4f60\u6709 \\(120\\) \u6b21\u64cd\u4f5c\uff0c\u53ef\u4ee5\u628a\u7ed9\u5b9a\u7684\u503c\u52a0\u4e00\uff0c\u6216\u8005\u628a\u503c\u4e582. \u95ee\u6784\u9020\u4e00\u4e2a \\(2^{64}\\) \u4ee5\u5185\u7684\u6574\u6570\u7684\u65b9\u6848\u3002 \u53d1\u73b0 \\(120\\) \u6b21\u5b8c\u5168\u591f\u4e86\u3002 \\(120\\) \u4ee5\u5185\u7684\u8bdd\u5c31\u76f4\u63a5\u4e00\u76f4\u52a0\u4e00\u5c31\u53ef\u4ee5\u3002 \u53cd\u4e4b\u5982\u679c \\(n\\) \u662f\u5947\u6570\uff0c\u51cf\u4e00\u7136\u540e\u4e00\u76f4\u9664\u4e8c\uff0c\u7136\u540e\u5982\u679c\u53c8\u662f\u5947\u6570\u90a3\u5c31\u91cd\u590d\u3002 \u76f4\u5230 \\(n\\) \u4e3a \\(0\\) \u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <bits/stdc++.h> using namespace std ; long long n ; int main (){ scanf ( \"%lld\" , & n ); if ( n <= 120 ){ for ( register int i = 1 ; i <= n ; ++ i ){ putchar ( 'A' ); } return 0 ; } else { string s ; bool f = false ; if ( n & 1 ) n -= 1 , f = true ; while ( n ){ if ( n % 2 == 0 ) n /= 2 , s = 'B' + s ; if ( n & 1 ) n -= 1 , s = 'A' + s ; } if ( f ) s += 'A' ; cout << s << endl ; } } D \u03c8(\uff40\u2207\u00b4)\u03c8 D \u7684\u8bdd\u5c31\u76f4\u63a5\u5f00\u4e00\u4e2a deque \u548c\u4e00\u4e2a queue \u6a21\u62df\u5c31\u53ef\u4ee5\u4e86\u3002 \u5f53\u7136\u4f60\u53ef\u4ee5\u5229\u7528\u62d3\u6251\u7684\u601d\u60f3\u76f4\u63a5\u5efa\u56fe\u7136\u540e\u8dd1\u4e00\u4e2a\u62d3\u6251\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 #define int long long int n , m , sz [ MAXN ], num ; pair < int , int > pos [ MAXN ]; deque < int > a [ MAXN ]; queue < int > q ; void del ( int x ){ a [ x ]. pop_front (); if ( a [ x ]. size ()){ int u = a [ x ]. front (); if ( pos [ u ]. fr == 0 ) pos [ u ]. fr = x ; else pos [ u ]. se = x , q . push ( u ), num ++ ; } } signed main (){ cin >> n >> m ; for ( register int i = 1 ; i <= m ; ++ i ){ cin >> sz [ i ]; for ( register int j = 1 ; j <= sz [ i ]; ++ j ){ int tmp ; cin >> tmp ; a [ i ]. pb ( tmp ); } } for ( register int i = 1 ; i <= m ; ++ i ){ int u = a [ i ][ 0 ]; if ( pos [ u ]. fr == 0 ) pos [ u ]. fr = i ; else pos [ u ]. se = i , q . push ( u ), num ++ ; } while ( ! q . empty ()){ int u = q . front (); q . pop (); del ( pos [ u ]. fr ), del ( pos [ u ]. se ); } if ( num == n ) puts ( \"Yes\" ); else puts ( \"No\" ); return 0 ; } E \u03c8(\uff40\u2207\u00b4)\u03c8 \u5927\u6bd2\u7624\u8d2a\u5fc3\uff0c\u5efa\u4e00\u4e2a\u5927\u6839\u5806\u7136\u540e\u628a\u6240\u6709\u4e1c\u897f\u4e22\u8fdb\u53bb\u7ef4\u62a4\u3002 \u7136\u540e\u6bcf\u6b21\u628a\u5806\u9876 \\(top\\) \u4e4b\u540e\uff0c\u628a \\(top-1\\) \u6254\u8fdb\u53bb\u5c31\u53ef\u4ee5\u3002 \u8fd9\u6837\u5b50\u8fd8\u4e0d\u592a\u591f\u3002\u9700\u8981\u7a0d\u5fae\u4f18\u5316\u4e00\u4e0b\uff0c\u5c31\u81ea\u5df1\u7406\u89e3\u5427\u3002 \u8fd9\u4e2a\u4e1c\u897f\u6211\u6ca1\u505a\u51fa\u6765\uff0c\u90a3\u4efd\u4ee3\u7801\u662f\u6709\u4e2a\u4eba\u8981\u6211\u5e2e\u4ed6\u5403\u7f5a\u65f6\u4ea4\u7684\uff08 F \u03c8(\uff40\u2207\u00b4)\u03c8 DP\uff0c\u9996\u5148\u628a \\(a\\) \u964d\u5e8f\u6392\u4e00\u904d\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(j \\in [1,n]\\) \uff0c\u5047\u8bbe \\(f_j\\) \u8868\u793a\u9009\u4e0a \\(a_j\\) \uff0c\u4e0d\u7ba1\u5176\u4ed6\u7684\u600e\u4e48\u9009\u6240\u5f97\u5230\u7684\u89e3\u3002 \u7136\u540e\u4f60\u53d1\u73b0 \\(a_j\\) \u8981\u6ee1\u8db3 \\(\\ge b_k + \\sum\\limits_{i \\subset S} b_i,S=\\{k+1,k+2,...,n\\}\\) \u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u80cc\u5305\uff0c\u4e0d\u8fc7\u9700\u8981\u524d\u7f00\u548c\u4f18\u5316\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 const int limit = 5000 ; sort ( q + 1 , q + 1 + n ); f [ 0 ][ 0 ] = 1 ; for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 0 ; j <= limit ; ++ j ){ f [ i ][ j ] = f [ i -1 ][ j ]; } for ( register int j = q [ i ]. b ; j <= limit ; ++ j ){ f [ i ][ j ] += f [ i -1 ][ j - q [ i ]. b ], mod ( f [ i ][ j ]); } } for ( register int i = 0 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= limit ; ++ j ){ f [ i ][ j ] += f [ i ][ j -1 ], mod ( f [ i ][ j ]); } } for ( register int i = 1 ; i <= n ; ++ i ){ if ( q [ i ]. a < q [ i ]. b ) continue ; ans += f [ i -1 ][ q [ i ]. a - q [ i ]. b ], mod ( ans ); } printf ( \"%lld \\n \" , ans ); G \u03c8(\uff40\u2207\u00b4)\u03c8 \u88f8\u7684\u5dee\u5206\u7ea6\u675f\u3002 \u4f46\u662f\u5199\u6302\u4e86\u545c\u545c\u545c Reference: https://www.cnblogs.com/registergen/p/abc216_solution.html Deltix Round, Summer 2021 (CF1556) \u03c8(\uff40\u2207\u00b4)\u03c8 Contest ID: CF1556 \u8fd9\u573a\u6781\u5ea6\u6bd2\u7624\u554a\u554a\u554a\u554a\uff0cD\u51fa\u4e86\u4e2a\u4ea4\u4e92+\u5927\u6bd2\u7624\u6784\u9020\u3002 \u7136\u540eE\u6211\u5f00\u59cb\u5148\u5199\u7684\u66b4\u529b\uff0c\u7136\u540e\u53d1\u73b0\u8981\u7528RMQ\u4f18\u5316\uff0c\u4e8e\u662f\u5199\u4e86\u4e00\u4e2aST\u8868\u3002 \u7136\u540e\u8d5b\u540eCFM\u7ed9\u4e86\u6211\u4e00\u7ec4\u6570\u636e\u628a\u6211\u7684\u9519\u8bef\u505a\u6cd5\u53c9\u6389\u4e86\u3002 \u4f46\u662f\u5e76\u6ca1\u6709\u5728ST\u91cc\u9762\u51fa\u73b0ovo\uff0c\u6211\u5f53\u65f6\u4ee5\u4e3a\u8981FST\u4e86\uff0c\u4e8e\u662f\u6781\u5ea6\u751f\u6c14\u3002 \u65e9\u4e0a\u8d77\u6765\u53d1\u73b0\u5374\u4e0a\u5206\u4e86\uff0c\u56e0\u4e3aE\u7684systest\u592a\u5f31\u4e86\uff01 \u7136\u540e\u8d81\u8d70\u4e4b\u524d\u6539\u4e86\u4e00\u4e0b\uff0c\u628a\u9519\u8bef\u505a\u6cd5\u6539\u5bf9\u4e86\uff0c\u5f88\u6709\u611f\u89c9\uff01 \u6bd4\u8f83\u53ef\u60dc\u7684\u5c31\u662f\u6ca1\u4e0aCM\uff0c\u545c\u545c\uff0c\u8981\u662fD\u4ea4\u4e92\u90e8\u5206\u4e0d\u5199\u6302\u5c31\u4e0aCM\u4e86\u545c\u545c\u3002 \u9898\u89e3\u7684\u8bdd\u4e4b\u540e\u518d\u6765\u5199\uff0c\u4eca\u5929\u5f00\u5b66\u4e86\u6ca1\u65f6\u95f4\u545c\u545c\u545c\u3002 \uff08\u542c\u8bf4 tourist \u53ea\u6709rk22\uff0c\u6bd2\u7624\uff01\uff08\u5176\u5b9e\u662f\u56e0\u4e3a\u4ed6\u6700\u540e\u9762\u4e24\u9053\u4f3c\u4e4e\u56e0\u4e3a\u4ec0\u4e48\u6ca1\u505a\uff09 \u8fd9\u4e0b\u9762\u7a7a\u7740\u7684\u90fd\u662f\u6ca1\u65f6\u95f4\u5199\u7684\uff08ABC\u7684\u90fd\u662f\u5230\u5b66\u6821\u4e4b\u540e\u6e9c\u53bb\u673a\u623f\u5199\u7684\uff09 A \u03c8(\uff40\u2207\u00b4)\u03c8 \u731c\u4e86\u4e2a\u7ed3\u8bba\u8fc7\u4e86\u3002 \u53d1\u73b0\u5982\u679c \\(c,d\\) \u7684\u5947\u5076\u6027\u4e0d\u540c\uff0c\u80af\u5b9a\u4e0d\u80fd\u6784\u9020\u3002 \u6392\u9664\u65e0\u89e3\u4e4b\u540e\uff0c\u5982\u679c\u5168\u662f \\(0\\) \u5c31\u4e0d\u7528\u6784\u9020\uff0c\u7136\u540e \\(c=d\\) \u5c31\u53ea\u9700\u8981\u4e00\u6b65\u3002 \u5982\u679c \\(c \\not= d\\) \u7684\u8bdd\uff0c\u7b2c\u4e00\u6b65\u6784\u9020 \\([c,d]\\) \u8fd9\u4e2a\u533a\u95f4\u7684\u4e2d\u4f4d\u6570\uff0c\u7136\u540e\u518d\u5411\u4e0a\u5411\u4e0b\u6784\u9020\u4e00\u6b21\u5373\u53ef\u3002 BCDE \u03c8(\uff40\u2207\u00b4)\u03c8 \u5495\u7740\uff0c\u4e0d\u60f3\u5199\u4e86\u3002 FGH... \u03c8(\uff40\u2207\u00b4)\u03c8 \u56e0\u4e3a\u662f div1+div2,\u6240\u4ee5\u540e\u4e09\u9898\u73b0\u5728\u771f\u7684\u4e0d\u4f1aqwq Codeforces Round #747 \u03c8(\uff40\u2207\u00b4)\u03c8 Contest ID : 1594 \u5f88\u4e45\u6ca1\u6253\u4e86\uff0c\u73b0\u5728\u505c\u8bfe\u671f\u95f4\u6709\u65f6\u95f4\u90a3\u4e48\u5c31\u6253\u4e86\u4e00\u4e0b\u3002 \u4f46\u662f\u624b\u611f\u5f88\u4e0d\u597d\uff0cA \u50bb\u903c\u4e86\uff0cB\u50bb\u903c\u4e86\uff0cE1\u50bb\u903c\u4e86\u3002 \u540c\u673a\u623f\u7b2c\u4e00\u6b21\u6253\u7684\u90fd\u540a\u6253\u6211\u3002 \u53ea\u6709 ACD /kk A \u03c8(\uff40\u2207\u00b4)\u03c8 \u6784\u9020\u4e00\u4e2a\u533a\u95f4 \\(l,r\\) \u4f7f\u5f97\u533a\u95f4\u548c\u4e3a \\(n\\) \u3002 \u56e0\u4e3a\u53ef\u4ee5\u662f\u8d1f\u6570\uff0c\u6240\u4ee5\u76f4\u63a5 \\([1-n,n]\\) \u3002 B \u03c8(\uff40\u2207\u00b4)\u03c8 \u5927\u7b80\u5355\u9898\uff0c\u50bb\u903c\u4e86\u3002 \u95ee\u4f60\u7531 \\(n\\) \u7684\u6574\u6570\u6b21\u5e42\u7ec4\u6210\u6570\u7684\u7b2c \\(k\\) \u5927\u3002 \u53ef\u4ee5\u7528\u4e8c\u8fdb\u5236\u505a\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include <bits/stdc++.h> using namespace std ; #define int long long int T ; int n , k ; const int p = 1e9 + 7 ; signed main (){ scanf ( \"%lld\" , & T ); while ( T -- ){ int res = 0 ; int delta = 1 ; scanf ( \"%lld%lld\" , & n , & k ); for ( register int j = 1 ; j <= 32 ; ++ j ){ if ( k & ( 1 << ( j -1 ))) res = ( res + delta ) % p ; delta *= n , delta %= p ; } printf ( \"%lld \\n \" , res ); } return 0 ; } C \u03c8(\uff40\u2207\u00b4)\u03c8 \u8981\u6c42\u4f60\u628a\u5b57\u7b26\u4e32\u6240\u6709\u4f4d\u53d8\u6210\u7ed9\u5b9a\u7684\u5b57\u7b26 \\(ch\\) \u6bcf\u6b21\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u6570 \\(x\\) \uff0c\u5bf9\u4e8e\u6240\u6709\u7684 \\(s[i],x \\not| \\ \\ i\\) \uff0c\u4ee4\u4ed6\u53d8\u6210 \\(ch\\) \u3002 \u95ee\u6700\u5c0f\u64cd\u4f5c\u6b21\u6570\u3002 \u53d1\u73b0\u6700\u591a\u53ea\u9700\u8981\u4e24\u6b21 : \\(x=n-1.x=n\\) \u3002 \u7136\u540e\u4e0d\u7528\u52a8\u4e86\u76f4\u63a5\u7279\u5224 \\(0\\) \u3002 \u7136\u540e\u8003\u8651\u7528 \\(i\\times j\\) \u8fd9\u6837\u7c7b\u4f3c\u6b27\u62c9\u7b5b\u7684\u529e\u6cd5\u53bb\u5224\u65ad\u662f\u5426\u80fd\u4e00\u6b21\u5e72\u5b8c\u5373\u53ef\u3002 D \u03c8(\uff40\u2207\u00b4)\u03c8 \u662f\u4e2a\u5e76\u67e5\u96c6\uff0c\u6709\u70b9\u50cf\u98df\u7269\u94fe\u90a3\u4e00\u9898\u3002 \u5185\u9b3c\u53ea\u4f1a\u8bf4\u5047\u8bdd\uff0c\u597d\u4eba\u53ea\u4f1a\u8bf4\u771f\u8bdd\u3002 \u7136\u540e\u6bcf\u4e2a\u4eba\u4f1a\u6307\u8ba4\u8c01\u662f\u4ec0\u4e48\u8eab\u4efd\u3002 \u95ee\u4f60\u6700\u591a\u6709\u591a\u5c11\u5185\u9b3c\u3002 \u8003\u8651\u5206\u7c7b\u8ba8\u8bba\u3002 \u5982\u679c A \u8bf4 B \u662f\u597d\u4eba\uff0c\u90a3\u4e48 A \u548c B \u7684\u8eab\u4efd\u80af\u5b9a\u662f\u4e00\u6837\u7684\u3002 \u56e0\u4e3a\u5982\u679c A \u662f\u597d\u4eba\uff0c\u8bf4\u771f\u8bdd\uff0c\u90a3\u4e48 B \u4e5f\u662f\u597d\u4eba\u3002 \u53cd\u4e4b A \u662f\u5185\u9b3c \uff0c\u8bf4\u5047\u8bdd\uff0c\u90a3\u4e48 B \u4e5f\u662f\u5185\u9b3c\u3002 \u5982\u679c A \u8bf4 B \u662f\u5185\u9b3c\uff0c\u90a3\u4e48\u4e5f\u6709\u4e24\u79cd\u60c5\u51b5\u3002 \u5982\u679c A \u662f\u597d\u4eba\uff0c\u90a3\u4e48 B \u5c31\u662f\u5185\u9b3c\u3002 \u5982\u679c A \u662f\u5185\u9b3c\uff0c\u90a3\u4e48 B \u5c31\u662f\u597d\u4eba \u3002 \u7136\u540e\u6211\u4eec\u5c31\u8003\u8651\u5229\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u4ed6\u4eec\u7684\u5173\u7cfb\uff0c\u7136\u540e\u987a\u4fbf\u8fdb\u884c\u5904\u7406\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 #include <bits/stdc++.h> using namespace std ; #define int long long int T ; const int si = 2e5 + 10 ; int pa [ si ], dis [ si ], siz [ si ], res [ si ]; bool vis [ si ]; int n , m , ans ; int root ( int x ){ if ( pa [ x ] == x ) return pa [ x ]; int fa = root ( pa [ x ]); dis [ x ] ^= dis [ pa [ x ]]; return pa [ x ] = fa ; } inline void Union ( int u , int v , int ru , int rv , int w ){ dis [ ru ] = w xor dis [ u ] xor dis [ v ]; siz [ rv ] += siz [ ru ], pa [ ru ] = rv ; } inline void init ( int n ){ for ( register int i = 1 ; i <= n ; ++ i ){ pa [ i ] = i , dis [ i ] = 0 , siz [ i ] = 1 ; vis [ i ] = false , res [ i ] = 0 ; } } signed main (){ scanf ( \"%lld\" , & T ); while ( T -- ){ scanf ( \"%lld%lld\" , & n , & m ); init ( n ); bool print_ck = true ; string sta ; for ( register int i = 1 ; i <= m ; ++ i ){ int u , v , tet ; scanf ( \"%lld%lld\" , & u , & v ); cin >> sta ; if ( sta [ 0 ] == 'c' ) tet = 0 ; else tet = 1 ; int ru = root ( u ), rv = root ( v ); if ( ru == rv ){ if (( dis [ u ] xor dis [ v ]) != tet ){ if ( print_ck ) puts ( \"-1\" ); print_ck = false ; } } else Union ( u , v , ru , rv , tet ); } if ( ! print_ck ) continue ; for ( register int i = 1 ; i <= n ; ++ i ){ int ri = root ( i ); if ( dis [ i ] == 0 ) res [ ri ] ++ ; //pa[i]? } ans = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ if ( root ( i ) != i ) continue ; ans += max ( res [ i ], siz [ i ] - res [ i ]); } printf ( \"%lld \\n \" , ans ); } return 0 ; } E1 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5927\u7b80\u5355\u9898\uff0c\u50bb\u903c\u4e86\u3002 \u7ed9\u4f60\u4e00\u4e2a\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u8ba9\u5b83\u6d82\u8272\uff0c\u6bcf\u79cd\u6d82\u8272\u6709\u9650\u5236\u3002 \u7b54\u6848\u5c31\u662f \\(6 \\times 4^{2^{k}-2}\\) \u3002 \u5feb\u901f\u5e42\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 signed main (){ int n ; scanf ( \"%lld\" , & n ); int k = ( 1l l << n ) -2ll ; //\u4e00\u5b9a\u8981\u5199 1ll,\u4e0d\u7136 1 \u4f1a\u9ed8\u8ba4 int \u5bfc\u81f4\u7206\u70b8\u3002 int ans = qpow ( 4l l , k , p ); ans = ( ans * 6l l ) % p ; printf ( \"%lld \\n \" , ans ); return 0 ; } E2 & F \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd8\u4e0d\u4f1a Atcoder Beginning Contest #222 \u03c8(\uff40\u2207\u00b4)\u03c8 Contest ID: abc_222 A & B \u03c8(\uff40\u2207\u00b4)\u03c8 \u8bed\u6cd5\u9898\u5c31\u4e0d\u63d0\u4e86 C \u03c8(\uff40\u2207\u00b4)\u03c8 \u9898\u76ee\u7406\u89e3\u53ef\u80fd\u6bd4\u8f83\u56f0\u96be\uff08 \u5927\u6982\u662f\u8ba9\u4f60\u5728\u67d0\u79cd\u89c4\u5219\u4e0b\u5224\u65ad\u77f3\u5934\u526a\u5200\u5e03\u7684\u8f93\u8d62\u4e4b\u7c7b\u7684\u3002 \u76f4\u63a5\u5927\u6a21\u62df\u5373\u53ef\u3002 D \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60\u4e24\u4e2a\u4e0d\u964d\u7684\u5e8f\u5217 \\(a,b\\) \u3002 \u8981\u6c42\u4f60\u6784\u9020\u4e00\u4e2a\u5e8f\u5217 \\(c\\) \u4f7f\u5f97\u5bf9\u4e8e\u4efb\u610f\u7684 \\(i\\) \u90fd\u6709 \\(c_i \\in [a_i,b_i]\\) \u503c\u57df \\(3000\\) \uff0c\u957f\u5ea6 \\(3000\\) \u3002 \u4e00\u4e2a\u6bd4\u8f83\u57fa\u7840\u7684 dp\u3002 \u8bbe \\(f_i\\) \u8868\u793a\u8003\u8651\u5230\u7b2c \\(i\\) \u4e2a\u4f4d\u7f6e\u7684\u65f6\u5019\u7684\u65b9\u6848\u6570\u3002 \u7136\u540e\u4f60\u53d1\u73b0\u56e0\u4e3a \\([a_i,b_i],[a_{i+1},b_{i+1}]\\) \u662f\u53ef\u80fd\u6709\u91cd\u5408\u7684\u3002 \u4f60\u9700\u8981\u53bb\u679a\u4e3e \\(c_i\\) \u5230\u5e95\u9009\u4ec0\u4e48\u7684\u60c5\u51b5\u3002 \u53d1\u73b0\u503c\u57df\u4e58\u4e0a\u957f\u5ea6\u4e5f\u53ea\u6709 \\(9\\times 10^6\\) \uff0c\u6240\u4ee5\u8003\u8651\u4e00\u4e2a\u6734\u7d20\u7684 dp\u3002 \u8bbe \\(f_{i,j}\\) \u8868\u793a\u8003\u8651\u5230\u7b2c \\(i\\) \u4e2a\u4f4d\u7f6e\u65f6\uff0c \\(c_i=j\\) \uff0c\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u5e8f\u5217\u603b\u6570\u3002 \u90a3\u4e48\u65b9\u7a0b\u5c31\u662f \\[f_{i,j}=\\begin{cases}\\sum\\limits_{k=0}^{j}f_{i-1,k} & i \\ge 1,j\\in [a_i,b_i]\\\\1 & i=j=0\\\\0 & \\text{otherwise.}\\end{cases}\\] \u4f46\u662f\u53d1\u73b0\u8fd9\u6837\u5b50\u662f \\(\\text{O}(nm^2)\\) \u7684\uff08 \\(m\\) \u662f\u503c\u57df\uff09\uff0c\u6240\u4ee5\u8003\u8651\u4f18\u5316\u3002 \u7b2c\u4e00\u79cd\u60c5\u51b5\u4f60\u53d1\u73b0\u662f\u4e2a\u524d\u7f00\u548c\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u4f7f\u7528\u524d\u7f00\u548c\u4f18\u5316\u8fd9\u73a9\u610f\u513f\u3002 \u4ee4 \\(S_{i,j}=\\sum\\limits_{k=0}^{j}f_{i,k}\\) \uff0c\u7136\u540e\u7528\u524d\u7f00\u548c\u7684\u5f62\u5f0f\u628a \\(S\\) \u5199\u51fa\u6765\u3002 \u7136\u540e\u56e0\u4e3a\u524d\u7f00\u548c\u662f\u4e2a\u9012\u63a8\u5f0f\uff0c\u6240\u4ee5\u4f60\u5c31\u53ef\u4ee5 \\(\\text{O}(nm)\\) AC\u672c\u9898\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 for ( register int i = a [ 1 ]; i <= b [ 1 ]; ++ i ){ f [ 1 ][ i ] = 1 ; } sum [ 0 ] = f [ 1 ][ 0 ]; for ( register int i = 1 ; i <= si -10 ; ++ i ){ sum [ i ] = sum [ i -1 ] + f [ 1 ][ i ]; } for ( register int i = 2 ; i <= n ; ++ i ){ for ( register int j = a [ i ]; j <= b [ i ]; ++ j ){ f [ i ][ j ] = sum [ j ]; } sum [ 0 ] = f [ i ][ 0 ]; for ( register int j = 1 ; j <= si -10 ; ++ j ){ sum [ j ] = ( sum [ j -1 ] + f [ i ][ j ]) % p ; } } int ans = 0 ; for ( register int i = a [ n ]; i <= b [ n ]; ++ i ){ ans = ( ans + f [ n ][ i ]) % p ; } printf ( \"%d \\n \" , ans % p ); E F \u03c8(\uff40\u2207\u00b4)\u03c8 \u4fe9DP\uff0c\u4e00\u4e2a\u80cc\u5305+\u6811\u4e0a\u5dee\u5206\u4e00\u4e2a\u6362\u6839\uff0c\u4f46\u662f\u4e0d\u4f1a\u5199\u545c\u545c G \u03c8(\uff40\u2207\u00b4)\u03c8 \u539f\u9898\uff1a 202. \u6700\u5e78\u8fd0\u7684\u6570\u5b57 - AcWing\u9898\u5e93 3696 -- The Luckiest number (poj.org) H \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e0d\u4f1a Edu #115 \u03c8(\uff40\u2207\u00b4)\u03c8 Contest ID : 1598 \u7279\u610f\u63d0\u65e9\u56de\u5b66\u6821\u673a\u623f\u6253\u7684\u3002 \u673a\u623f\u6253\u7684\u4eba\u4e0d\u662f\u5f88\u591a\uff0c\u4e0d\u8fc7\u8fd9\u573a\u786e\u5b9e\u6709\u70b9\u6bd2\u7624\uff1f G \u9898\u5168\u573a\u53ea\u6709\u4e24\u4e2a\u4ebaAC\uff0ctourist \u51b2\u4e86\u4e00\u4e2a\u5c0f\u65f6\u3002 F \u9898 MZX\u795e\u60f3\u4e86\u534a\u5c0f\u65f6\u6ca1\u60f3\u51fa\u6765\uff0cCFM \u548c 45d \u5168\u90e8T\u98de \u4f55\u795e\u7684 D \u548c E\u88ab\u53c9\u7206\u4e86\uff0cYL \u7684 D \u8bfb\u9519\u9898\u4e86\u3002 \u4e0d\u8fc7 wqs \u795e \u968f\u4fbf\u4e71\u5207\uff01\uff01orz A \u03c8(\uff40\u2207\u00b4)\u03c8 \u5927\u7279\u5224\u9898\uff0c\u53ea\u8981\u6709\u4e00\u5bf9 \\(a_i=b_i=1\\) \u90a3\u4e48\u65e0\u89e3\u3002 B \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd8\u662f\u5927\u7279\u5224\u9898\u3002 \u4f60\u5c31\u8003\u8651\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u70b9\u5bf9 \\((i,j)\\) \u3002 \u7136\u540e\u5206 \\((0,0)(0,1)(1,0)\\) \u7684\u60c5\u51b5\u8ba8\u8bba\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include <bits/stdc++.h> using namespace std ; #define int long long int T , n ; const int si = 1e3 + 10 ; int a [ si ][ 10 ]; signed main (){ scanf ( \"%lld\" , & T ); while ( T -- ){ scanf ( \"%lld\" , & n ); for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= 5 ; ++ j ){ scanf ( \"%1lld\" , & a [ i ][ j ]); } } bool f = false ; for ( register int i = 1 ; i < 5 ; ++ i ){ for ( register int j = i + 1 ; j <= 5 ; ++ j ){ int cnt = 0 , cntt = 0 , cnttt = 0 ; for ( register int k = 1 ; k <= n ; ++ k ){ if ( a [ k ][ i ] == 1 && a [ k ][ j ] == 0 ) ++ cnt ; else if ( a [ k ][ i ] == 0 && a [ k ][ j ] == 1 ) ++ cntt ; else if ( a [ k ][ i ] == 1 ) ++ cnttt ; } if ( cnt + cntt + cnttt >= n && cnt + cnttt >= ( n >> 1 ) && cntt + cnttt >= ( n >> 1 )){ f = true ; break ; } if ( ! f ) continue ; } } if ( f ) puts ( \"YES\" ); else puts ( \"NO\" ); } return 0 ; } C \u03c8(\uff40\u2207\u00b4)\u03c8 \u95ee\u4f60\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u5e8f\u5217\uff0c\u6709\u591a\u5c11\u79cd\u53bb\u6389\u4e24\u4e2a\u6570 \\(a_i,a_j\\) \u7684\u65b9\u6848\uff08 \\(i<j\\) \uff09\u4f7f\u5f97\u5e8f\u5217\u5e73\u5747\u6570\u4e0d\u53d8\u3002 \u76f4\u63a5\u7528\u4e2a unordered_map \u6765\u5904\u7406\u6bcf\u4e00\u4e2a\u6570\u7684\u51fa\u73b0\u6b21\u6570\u3002 \u4f60\u53d1\u73b0\u8981\u6709\u89e3\uff0c\u90a3\u4e48\u5e73\u5747\u6570\u80af\u5b9a\u662f .0 \u6216\u8005 .5 \u7ed3\u5c3e\u3002 \u8bf4\u767d\u4e86 \\(2sum\\ \\text{mod}\\ n=0\\) \u3002 \u7136\u540e\u4e3a\u4e86\u9632\u6b62\u91cd\u590d\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u8fd9\u6837\u5b50\u5199\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #include <bits/stdc++.h> using namespace std ; #define int long long int T ; const int si = 2e5 + 10 ; int n , a [ si ]; long double k = 0 ; unordered_map < int , int > mp ; signed main (){ scanf ( \"%lld\" , & T ); while ( T -- ){ scanf ( \"%lld\" , & n ); mp . clear (); int sum = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ scanf ( \"%lld\" , & a [ i ]); sum += a [ i ]; } if (( sum << 1l l ) % n ){ puts ( \"0\" ); continue ; } int kk = sum * 2 / n ; int res = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ res += mp [ kk - a [ i ]]; mp [ a [ i ]] ++ ; } printf ( \"%lld \\n \" , res ); } return 0 ; } // \u7528 map \u5e94\u8be5\u53ef\u4ee5\uff0c\u6211\u8fd9\u4e2a\u88ab\u4eba\u5361\u4e86\u545c\u545c \u6211\u4eec\u53ef\u4ee5\u5148\u628a\u5e8f\u5217\u770b\u4f5c\u5347\u5e8f\u6392\u5e8f\u7684\u3002 \u7136\u540e\u4f60\u53d1\u73b0\u5339\u914d\u7684\u4e24\u4e2a\u7aef\u70b9\u662f\u5173\u4e8e\u5e73\u5747\u6570\u7684\u4f4d\u7f6e\u8fd1\u4f3c\u5bf9\u79f0\u7684\u3002 \u8fd9\u6837\u5b50\u5199\u4f1a\u8ba9\u6bcf\u4e00\u4e2a\u70b9\u5bf9\u7684\u7b54\u6848\u90fd\u5728\u904d\u5386\u5230\u4f4d\u7f6e\u9760\u540e\u7684\u90a3\u4e2a\u70b9\u7684\u65f6\u5019\u624d\u66f4\u65b0\u3002 \u90a3\u4e48\u5c31\u907f\u514d\u4e86\u70b9\u5bf9\u7684\u91cd\u590d\u8ba1\u7b97\uff08\u6837\u4f8b\u4e00\u7684 8 8 8 8 \u7684\u60c5\u51b5\u4e5f\u80fd\u5b8c\u7f8e\u89e3\u51b3\uff09\u3002 D \u03c8(\uff40\u2207\u00b4)\u03c8 \u5927\u6570\u5b66\u9898\uff08\u5bb9\u65a5+\u7ec4\u5408\uff09 \u95ee\u7ed9\u5b9a\u7684\u4e24\u4e2a\u5e8f\u5217 \\(a,b\\) \u4e2d\u9009\u51fa\u4e09\u4e2a\u4f4d\u7f6e \\(i,j,k\\) \u4f7f\u5f97\u4e0b\u5217\u6761\u4ef6\u81f3\u5c11\u6709\u4e00\u4e2a\u6210\u7acb\uff1a \\(a[i] \\not= a[j] \\not= a[k]\\) \\(b[i] \\not= b[j] \\not= b[k]\\) \u6709\u591a\u5c11\u79cd\u65b9\u6848\u3002 \u8003\u8651\u628a\u4efb\u610f\u9009\u4e09\u4e2a\u4f4d\u7f6e\u7684\u65b9\u6848\u6570\u7b97\u51fa\u6765\uff1a \\(|U|=\\text{C}^{3}_{n}=\\dfrac{n\\times(n-1)\\times(n-2)}{6}\\) \u7136\u540e\u4f60\u8981\u53bb\u6389\u7684\u5c31\u662f\u4e24\u79cd\u90fd\u4e0d\u6ee1\u8db3\u7684\u65b9\u6848\u6570\u3002 \u6211\u4eec\u8003\u8651\u5206\u522b\u8bb0\u5f55 \\(a,b\\) \u5f53\u4e2d\u7684\u6bcf\u4e2a\u6570\u5206\u522b\u5728\u81ea\u5df1\u6240\u5904\u7684\u5e8f\u5217\u5f53\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 \\(cnta,cntb\\) \u3002 \u4f60\u53d1\u73b0\u4f60\u8981\u5904\u7406\u7684\u4e0d\u6ee1\u8db3\u6761\u4ef6\u7684\u5c31\u662f\u201c\u6709\u76f8\u7b49\u201d\u7684\u60c5\u51b5\u3002 \u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6761\u4ef6\uff0c\u4f60\u90fd\u8981\u5904\u7406\u201c\u6709\u4e24\u4e2a\u76f8\u540c\uff0c\u6709\u4e09\u4e2a\u76f8\u540c\u201d\u7684\u60c5\u51b5\u3002 \u6240\u4ee5\u8fd9\u91cc\u5c31\u53c8\u662f\u5bb9\u65a5\uff0c\u5bf9\u4e8e \\(a\\) \uff08 \\(b\\) \u540c\u7406\uff09\uff0c\u6211\u4eec\u8bbe\u4f4d\u7f6e \\(i,j\\) \u51fa\u73b0\u76f8\u540c\u7684\u60c5\u51b5\u96c6\u5408\u4e3a \\(A\\) \uff0c \\(i,k\\) \u76f8\u540c\u7684\u60c5\u51b5\u96c6\u5408\u4e3a \\(B\\) \uff0c \\(j,k\\) \u76f8\u540c\u7684\u60c5\u51b5\u96c6\u5408\u662f \\(C\\) \uff0c\u90a3\u4e48\u6211\u4eec\u8981\u6c42\u7684\u5c31\u662f \\(A \\cup B \\cup C\\) \uff0c\u8fd9\u91cc\u5c31\u53ef\u4ee5\u7528\u5bb9\u65a5\u7b97\u3002 \u8003\u8651\u4f60\u73b0\u5728\u626b\u5230\u4f4d\u7f6e \\(i\\) \uff0c\u90a3\u4e48\u5728 \\(a\\) \u5f53\u4e2d\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u4f4d\u7f6e\u4ed6\u51fa\u73b0\u4e86 \\(cnta_{a_i}\\) \u6b21\uff0c\u5728 \\(b\\) \u91cc\u9762\u51fa\u73b0 \\(cntb _{b_i}\\) \u6b21\uff0c \u90a3\u4e48\u6839\u636e\u4e58\u6cd5\u539f\u7406\uff0c\u5728\u4e0d\u7ba1\u91cd\u4e0d\u91cd\u590d\u8ba1\u7b97\u7684\u60c5\u51b5\u4e0b\u5c31\u6709 \\(cnta_{a_i} \\times cntb_{b_i}\\) \u79cd\u53ef\u80fd\u3002 \u6211\u4eec\u8003\u8651\u5bf9\u8fd9\u4e2a\u4e1c\u897f\u5bb9\u65a5\u4e00\u4e0b\u6765\u53bb\u91cd\u3002 \u56e0\u4e3a\u4f60\u5728\u5176\u4ed6\u5730\u65b9\u8fd8\u53ef\u80fd\u518d\u53d6\u5230\u8fd9\u4e2a\u4f4d\u7f6e\u7684 \u6570\u5b57 \u6240\u4ee3\u8868\u7684\u60c5\u51b5\uff0c\u800c\u4e14\u6bcf\u626b\u5230\u4e00\u4e2a \\(a_i\\) \u6216\u8005 \\(b_i\\) \u5c31\u4f1a\u591a\u7b97\u4e00\u6b21/ \u90a3\u4e48\u6211\u4eec\u5148\u7ed9\u4ed6\u4eec\u51cf\u53bb \\(cnta_{a_i}+cntb_{b_i}\\) \uff0c \u7136\u540e\u4f60\u53d1\u73b0\u8fd9\u4e2a\u4f4d\u7f6e\u672c\u6765\u7684\u90a3\u4e00\u4e2a\u60c5\u51b5\u88ab\u591a\u51cf\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u518d\u52a0\u4e0a \\(1\\) \u3002 \u6211\u4eec\u628a\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u6240\u80fd\u7ed9\u51fa\u7684\u8d21\u732e\u5199\u51fa\u6765\uff1a \\(S_i=cnta_{a_i}\\times cntb_{b_i}-cnta_{a_i}-cntb_{b_i}+1\\) \u3002 \u6240\u4ee5\u6839\u636e\u52a0\u6cd5\u539f\u7406\uff0c\u6211\u4eec\u8981\u6c42\u7684\u90fd\u4e0d\u6ee1\u8db3\u7684\u60c5\u51b5\u5c31\u662f \\(\\sum\\limits^n_{i=1}S_i=\\sum\\limits^{n}_{i=1}[(cnta_{a_i}-1) \\times (cntb_{b_i}-1)]\\) \u3002 \u6240\u4ee5\u7b54\u6848\u662f \\(\\text{C}^3_n-\\sum\\limits^{n}_{i=1}[(cnta_{a_i}-1) \\times (cntb_{b_i}-1)]\\) \u3002 E \u03c8(\uff40\u2207\u00b4)\u03c8 \u9898\u610f\u81ea\u5df1\u770b\u539f\u9898\u3002 \u53d1\u73b0\u6bcf\u6b21\u4fee\u6539\u683c\u5b50\u53ea\u4f1a\u5f71\u54cd \\(n\\) \u6761\u8def\u5f84\uff0c\u6240\u4ee5\u4f60\u5c31\u6bcf\u6b21\u7ef4\u62a4\u4e00\u4e0b\u3002 \u7136\u540e\u5c31\u53ef\u4ee5 \\(\\text{O}(nq)\\) \u505a\u3002 F & G \u03c8(\uff40\u2207\u00b4)\u03c8 \u51b2\u4e0d\u52a8\uff0c\u592a\u96be\u529b/kk Technocup 2022 - Elimination Round 2 \u03c8(\uff40\u2207\u00b4)\u03c8 Contest Id: 1584,1588,1589 \u5f53\u7ecf\u5386\u8fc7\u4e00\u4e9b\u53d8\u5316\u4e4b\u540e\u6253\u7684\u7b2c\u4e00\u6b21 CF\u3002 \u867d\u7136\u662f VP\u3002 \u53e6\u5916\u4e8c\u53f7\u673a\u623f\u53ea\u6709\u6211\u4e00\u4e2a\u4eba\u60f3\u9898\u7684\u611f\u89c9\u786e\u5b9e\u8212\u670d\u3002 1589A,1584A \u03c8(\uff40\u2207\u00b4)\u03c8 \u6784\u9020\u65b9\u7a0b \\(\\dfrac{x}{u}+\\dfrac{y}{v}=\\dfrac{x+y}{u+v}\\) \u7684\u89e3\uff0c\u5176\u4e2d \\(u,v\\) \u7ed9\u5b9a\u4e14 $(x,y)\\not= (0,0) $ \u7a0d\u5fae\u4e71\u89e3\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\uff0c \\(x=-u^2,y=v^2\\) \u5373\u53ef\u3002 1589B,1584B \u03c8(\uff40\u2207\u00b4)\u03c8 \u731c\u7684\u7ed3\u8bba\uff0c\u6211\u89c9\u5f97\u53ea\u8981 \\(n\\times m\\) \u80fd\u88ab \\(3\\) \u6574\u9664\u90a3\u4e48\u53ef\u4ee5\u5168\u90e8\u5207\u6210 \\(1 \\times 3\\) \u6216\u8005 \\(3 \\times 1\\) \u7684\u3002 \u7136\u540e\u5176\u4ed6\u60c5\u51b5\u63a8\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\u662f \\(\\dfrac{n\\times m}{3} +1\\) \u3002 1589C,1584C,1588A \u03c8(\uff40\u2207\u00b4)\u03c8 \u8003\u8651\u5148\u5bf9 \\(a,b\\) \u6392\u5e8f\u3002 \u7136\u540e\u5012\u7740\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\uff0c\u5224\u65ad\u4e0b\u5217\u6761\u4ef6\u662f\u5426\u4e0d\u6210\u7acb\u5373\u53ef\u3002 b[i]-a[i]>1 || b[i]-a[i]<0 \u6210\u7acb\u8f93\u51fa NO \u8dd1\u8def\uff0c\u53cd\u4e4b\u5faa\u73af\u5b8c\u4e86\u8f93\u51fa YES \u5373\u53ef\u3002 D \u03c8(\uff40\u2207\u00b4)\u03c8 \u4ea4\u4e92\u9898\uff0c\u6211\u6bd4\u8f83Lazy\u6240\u4ee5\u660e\u5929\u505a\u3002","title":"CF & AT \u9898\u89e3"},{"location":"rec/old/old-cf-at-sol/#codeforces-734","text":"Contest ID: 1551 \u5728\u5b66\u6821\u548c\u6574\u4e2a\u673a\u623f\u4e00\u8d77VP\u7684\u3002","title":"Codeforces #734"},{"location":"rec/old/old-cf-at-sol/#a","text":"\\(1\\) \u5757\u7684\u786c\u5e01\u7528 \\(c_1\\) \u4e2a, \\(2\\) \u5757\u786c\u5e01\u7528 \\(c_2\\) \u4e2a\u3002 \u95ee\u4f60\u51d1\u51fa \\(n\\) \u5143\u65f6\u7684 \\(\\min(|c_1-c_2|)\\) \u4e00\u773c\u9898\u3002 \u8981 \\(|c_1-c_2|\\) \u6700\u5c0f\u8bf4\u767d\u4e86\u5c31\u662f\u5c3d\u91cf\u5e73\u5747\u3002 \u90a3\u4e48\u5c31\u5c3d\u91cf\u7684\u7528\u4e00\u4e2a \\(1\\) \u7684\u540c\u65f6\u4e5f\u7528\u4e00\u4e2a \\(2\\) \u3002 \u6240\u4ee5\u628a \\(n\\) \u9664\u4ee5 \\(3\\) \uff0c\u5f97\u5230 \\(c_1\\) \u548c \\(c_2\\) \u5404\u81ea\u5fc5\u987b\u8981\u6709\u7684\u4e2a\u6570\uff08\u6b64\u65f6 \\(c_1=c_2\\) \uff09\u3002 \u7136\u540e \\(n\\) \u65e0\u975e\u5c31\u662f\u5269\u4e0b \\(0,1,2\\) \u8fd9\u4e09\u79cd\u60c5\u51b5\u3002 \u5982\u679c\u4e0d\u5269\u90a3\u4e48\u76f4\u63a5\u8f93\u51fa\u3002 \u5982\u679c\u4f59 \\(1\\) \u90a3\u4e48\u591a\u52a0\u4e00\u4e2a \\(1\\) \u5143\u3002 \u5982\u679c\u4f59 \\(2\\) \u90a3\u4e48\u591a\u52a0\u4e00\u4e2a \\(2\\) \u5143\u3002","title":"A"},{"location":"rec/old/old-cf-at-sol/#b1","text":"\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u5b57\u7b26\u53ef\u4ee5\u6d82\u4e0a\u7ea2\u6216\u7eff\uff0c\u6216\u8005\u4e0d\u6d82\u3002 \u6d82\u4e0a\u76f8\u540c\u989c\u8272\u7684\u6240\u6709\u5b57\u6bcd\u76f8\u4e92\u4e0d\u80fd\u76f8\u540c\uff0c\u4e14\u7ea2\u8272\u548c\u7eff\u8272\u7684\u4e2a\u6570\u90fd\u4e3a \\(Q\\) \uff0c\u6c42 \\(\\max\\{Q\\}\\) \u3002 \u9996\u5148\u8003\u8651\u7b2c\u4e00\u4e2a\u6761\u4ef6\u3002 \u8f6c\u5316\u4e00\u4e0b\u4e5f\u5c31\u662f\u8bf4\u6bcf\u4e00\u79cd\u5b57\u6bcd\u6700\u591a\u53ea\u80fd\u6709\u4e24\u4e2a\u88ab\u6d82\u4e0a\u989c\u8272\u3002 \u6240\u4ee5\u6211\u4eec\u5f00\u4e00\u4e2a\u6876\u7edf\u8ba1\u4e00\u4e0b\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u7684\u51fa\u73b0\u6b21\u6570\u5e76\u5bf9\u5176\u8fdb\u884c\u5224\u65ad\u3002 \u518d\u8003\u8651\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u3002 \u56e0\u4e3a\u53ea\u4f1a\u6709\u4e24\u79cd\u989c\u8272\uff0c\u6240\u4ee5\u6d82\u4e0a\u989c\u8272\u7684\u70b9\u7684\u4e2a\u6570\u5fc5\u987b\u662f\u5076\u6570\uff08 \\(2\\) \u7684\u500d\u6570\uff09\u3002 \u90a3\u4e48\u601d\u8def\u5c31\u51fa\u6765\u4e86\uff0c\u7edf\u8ba1\u4e00\u4e0b\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5e76\u4e14\u7edf\u8ba1\u5b83\u6700\u591a\u6709\u591a\u5c11\u4e2a\u5b57\u6bcd\u53ef\u4ee5\u88ab\u6d82\u4e0a\u989c\u8272\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u79cd\u5b57\u6bcd\uff0c\u5982\u679c\u5b83\u7684\u4e2a\u6570\u5c0f\u4e8e\u7b49\u4e8e \\(2\\) \u90a3\u4e48\u5c31\u90fd\u53ef\u4ee5\u88ab\u6d82\u8272\uff0c\u5982\u679c\u5927\u4e8e\u7b49\u4e8e \\(3\\) \u5c31\u53ea\u6709\u4e24\u4e2a\u53ef\u4ee5\u88ab\u6d82\u4e0a\u989c\u8272\u3002 \u56e0\u4e3a\u6709\u4e24\u79cd\u989c\u8272\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u662f\u53ef\u4ee5\u88ab\u6d82\u4e0a\u989c\u8272\u7684\u5b57\u6bcd\u4e2a\u6570\u9664\u4ee5 \\(2\\) \u3002 \u5982\u679c\u6700\u540e\u53ef\u4ee5\u88ab\u6d82\u4e0a\u989c\u8272\u7684\u5b57\u6bcd\u4e2a\u6570\u662f\u4e2a\u5947\u6570\uff0c\u5c31\u9700\u8981\u5148\u51cf \\(1\\) \u518d\u9664 \\(2\\) \u3002","title":"B1"},{"location":"rec/old/old-cf-at-sol/#b2","text":"\u5927\u4f53\u540c B1,\u73b0\u5728\u5b57\u7b26\u4e32\u53d8\u6210\u4e86\u5e8f\u5217\uff0c\u800c\u4e14\u6709 \\(k\\) \u79cd\u4e0d\u540c\u989c\u8272\u3002 \u53ea\u8981\u6c42\u4f60\u8f93\u51fa\u65b9\u6848\u5373\u53ef\u3002 \u4eceB1\u7684\u89d2\u5ea6\u8003\u8651\uff0c\u73b0\u5728\u6709 \\(k\\) \u79cd\u4e0d\u540c\u989c\u8272\u3002\u90a3\u4e48\u6211\u4eec\u4ecd\u65e7\u662f\u7edf\u8ba1\u6bcf\u4e00\u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u51fa\u73b0\u591a\u5c11\u6b21\u3002 \u5982\u679c\u5927\u4e8e \\(k\\) \u90a3\u4e48\u5c31\u53ea\u6709 \\(k\\) \u4e2a\u53ef\u4ee5\u88ab\u6d82\u8272\u3002 \u53cd\u4e4b\u90fd\u53ef\u4ee5\u3002 \u7136\u540e\u7edf\u8ba1\u5b8c\u4e4b\u540e\u6211\u4eec\u6309 \\(a[i]\\) \u7684\u5927\u5c0f\u6392\u4e2a\u5e8f\u3002 \u4e5f\u5c31\u662f\u628a\u540c\u4e00\u79cd\u90fd\u6254\u5230\u4e00\u8d77\u5904\u7406\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u79cd\uff0c\u6211\u4eec\u53ea\u6d82\u524d \\(k\\) \u4e2a\uff08\u4fdd\u8bc1\u4e0d\u91cd\u590d\u800c\u4e14\u6d82\u591f\uff09\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002 \u4f46\u662f\u6211\u4eec\u8981\u8f93\u51fa\u65b9\u6848\uff0c\u6240\u4ee5\u9700\u8981\u8bb0\u5f55\u4e00\u4e0b\u5143\u7d20\u7684\u4f4d\u7f6e\u3002","title":"B2"},{"location":"rec/old/old-cf-at-sol/#c","text":"\u53ea\u7528\u4e94\u4e2a\u5b57\u6bcd \\(\\{a,b,c,d,e\\}\\) \u7ec4\u6210\u4e00\u7bc7\u6587\u7ae0\uff0c \u82e5\u679c\u5176\u4e2d\u4e00\u4e2a\u5b57\u7b26\u7684\u51fa\u73b0\u6b21\u6570\u6bd4\u5176\u5b83\u7684\u52a0\u8d77\u6765\u90fd\u591a\u90a3\u4e48\u8fd9\u7bc7\u6587\u7ae0\u5c31\u662f\u597d\u7684\u3002 \u7ed9\u5b9a\u51e0\u4e2a\u5355\u8bcd\uff0c\u6c42\u6700\u957f\u7684\u597d\u6587\u7ae0\u7684\u5355\u8bcd\u6570\u3002 \u770b\u5230\u53ea\u6709\u4e94\u4e2a\u5b57\u6bcd\uff0c\u6211\u76f4\u63a5\u9ad8\u5174\u4e86\u8d77\u6765\u3002 \u770b\u5230\u65f6\u96504s\uff0c\u6211\u7684\u5634\u89d2\u5c31\u76f4\u63a5\u626c\u4e86\u8d77\u6765\u3002 \u8fd9\u4e0d\u660e\u6446\u7740\u8ba9\u4f60\u6253\u66b4\u529b\u5417\uff1f \u6240\u4ee5\u76f4\u63a5\u7edf\u8ba1\u6bcf\u4e2a\u5b57\u7b26\u7684\u51fa\u73b0\u6b21\u6570\u3002 \u7136\u540e\u5bf9\u4e8e\u6bcf\u79cd\u5b57\u7b26\u6211\u4eec\u6392\u5e8f\u8d2a\u5fc3\u4e00\u4e0b\uff0c\u5982\u679c\u8bf4\u53ef\u4ee5\u9009\u5f53\u524d\u5355\u8bcd\uff0c\u5373\u66f4\u65b0\u7b54\u6848\u3002 \uff08\u8bf4\u662f\u7b80\u5355\u66b4\u529b+\u8d2a\u5fc3\uff0c\u6211\u5374\u5199\u4e86\u534a\u5c0f\u65f6\uff0cwtcl\uff09","title":"C"},{"location":"rec/old/old-cf-at-sol/#d1-d2-e-f","text":"\u5f85\u8865","title":"D1 D2 E F"},{"location":"rec/old/old-cf-at-sol/#codeforces-735","text":"Contest ID: 1554 \u4e94\u9898\u573a\uff0c\u6211\u5c45\u7136\u6709ABCD\u3002","title":"Codeforces #735"},{"location":"rec/old/old-cf-at-sol/#a_1","text":"\u95ee\u4f60\u4e00\u4e2a\u5e8f\u5217\u7684\u6240\u6709\u957f\u5ea6\u4e0d\u5c0f\u4e8e \\(2\\) \u7684\u5b50\u533a\u95f4\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c \u4e58\u79ef\u7684\u6700\u5927\u503c \u3002 \u4ece\u6570\u636e\u8303\u56f4\u5c31\u80fd\u53d1\u73b0\uff0c\u4e00\u5b9a\u662f\u4e2a \\(\\text{O}(T\\times n)\\) \u7684\u7b97\u6cd5\u3002 \u6240\u4ee5\u60f3\u5230\u4e86\u5355\u8c03\u961f\u5217\u6216\u8005\u5355\u8c03\u6808\u7ef4\u62a4\u3002 \u4f46\u662f\u4ed4\u7ec6\u60f3\u60f3\uff0c\u8fd9\u4e2a\u5b50\u533a\u95f4\u7684\u957f\u5ea6\u53ea\u80fd\u4e3a \\(2\\) \u3002 \u4e3a\u4f55\uff1f \u6211\u4eec\u5c31\u5148\u4ece\u957f\u5ea6\u4e3a \\(2\\) \u7684\u533a\u95f4\u5f00\u59cb\u8003\u8651\u3002 \u90a3\u4e48\u5f88\u660e\u663e\u6743\u503c\u5c31\u662f \\(a[l] \\times a[r]\\) \u3002 \u8003\u8651\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(3\\) \u7684\u533a\u95f4\uff0c\u4e14\u91cc\u9762\u7684\u5143\u7d20\u662f \\(\\{a,b,c\\}\\) \uff08\u6309\u987a\u5e8f\uff09\u3002 \u5047\u8bbe \\(b\\) \u662f\u6700\u5927\u7684\uff0c\u90a3\u4e48\u5b83\u5c31\u4f1a\u548c \\(\\min(a,c)\\) \u7ed3\u5408\uff0c\u90a3\u4e48\u5c31\u548c\u957f\u5ea6\u4e3a \\(2\\) \u7684\u6ca1\u6709\u4efb\u4f55\u533a\u522b\u3002 \u5047\u8bbe \\(a\\) \u662f\u6700\u5927\u7684\uff0c\u90a3\u4e48\u6709\u5982\u4e0b\u4e24\u79cd\u60c5\u51b5\u3002 \\(b\\) \u6bd4 \\(c\\) \u5c0f\uff0c\u90a3\u4e48\u8fd9\u4e2a\u533a\u95f4\u7684\u6743\u503c\u4e00\u5b9a\u662f \\(a \\times b\\) \uff0c\u8f6c\u5316\u6210\u4e86\u957f\u5ea6\u4e3a \\(2\\) \u7684\u60c5\u51b5\u3002 \\(b\\) \u6bd4 \\(c\\) \u5927\uff0c\u90a3\u4e48\u8fd9\u4e2a\u533a\u95f4\u7684\u6743\u503c\u5c31\u662f \\(a \\times c\\) \uff0c\u4f46\u662f\u5f88\u660e\u663e\uff0c $a\\times b $ \u4e5f\u5c31\u662f\u957f\u5ea6\u4e3a \\(2\\) \u7684\u65f6\u5019\u7edd\u5bf9\u6bd4\u8fd9\u4e2a \\(a\\times c\\) \u66f4\u4f18\uff08\u56e0\u4e3a\u6211\u4eec\u6700\u7ec8\u8981\u6c42\u7684\u662f\u6700\u5927\u503c\uff09 \u53cd\u8fc7\u6765\u540c\u7406\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u7ed3\u8bba\u6269\u5c55\u5230 \\(n=4,5,6...\\) \u5c31\u80fd\u8bc1\u660e\u7ed3\u8bba\u6b63\u786e\u3002 \u6240\u4ee5\u73b0\u5728\u53ea\u9700\u8981\u8bfb\u5165\u7684\u65f6\u5019\u8ba9\u76f8\u90bb\u7684\u5143\u7d20\u4e24\u4e24\u76f8\u4e58\uff0c\u6c42\u4e58\u79ef\u7684\u6700\u5927\u503c\uff0c\u8fd9\u4e2a\u6700\u5927\u503c\u5c31\u662f\u7b54\u6848\u3002","title":"A"},{"location":"rec/old/old-cf-at-sol/#b","text":"\u6c42\u6240\u6709\u4e00\u4e2a\u5e8f\u5217\u91cc\u6240\u6709\u7684 \\(i\\times j -k\\times(a_i \\operatorname{or} a_j)\\) \u7684 \\(\\max \\ \\ (k \\in [1,\\min(n,100)])\\) \uff08tips\uff1a\u4e00\u4e2a\u6570\u6309\u4f4d\u6216\u4e0a\u53e6\u4e00\u4e2a\u6570\uff0c\u8fd9\u4e2a\u6570\u7edd\u5bf9\u4e0d\u4f1a\u51cf\u5c0f\uff09 \u6211\u662f\u76f4\u63a5\u51ed\u611f\u89c9\u731c\u7684\u7ed3\u8bba\uff1a \\(i\\in [\\max(n-100,1),n),j=i+1\\) \u7136\u540e\u66b4\u529b\u8dd1\u3002 \u8fd9\u91cc\u6709\u4e2a\u4e25\u8c28\u7684\u505a\u6cd5\uff08\u6765\u81ealg\u9898\u89e3\u533a\uff09","title":"B"},{"location":"rec/old/old-cf-at-sol/#c_1","text":"\u6c42\u6700\u5c0f\u7684 \\(k\\) \u6ee1\u8db3 \\(k\\not\\in \\{n \\operatorname{xor}0,n \\operatorname{xor}1...n \\operatorname{xor}m\\}\\) \\(n,m\\) \u662f \\(10^9\\) \u7ea7\u522b\u3002 \u6839\u636e\u5f02\u6216\u7684\u67d0\u4e2a\u6027\u8d28\uff1a \\(n \\operatorname{xor} k >m \\Leftrightarrow n \\operatorname{xor} k \\ge m +1\\) \u8bbe \\(x_i=(m+1)_2\\) \u7684\u7b2c \\(i\\) \u4f4d\u3002 \u8bbe \\(k_i=(k)_2\\) \u7684\u7b2c \\(i\\) \u4f4d\u3002 \u90a3\u4e48\u6709\u56db\u79cd\u60c5\u51b5\uff1a \\(x_i=k_i=1\\Rrightarrow k_i=0\\) \\(x_i=k_i=0\\Rrightarrow k_i=0\\) \\(x_i=1,k_i=0\\Rrightarrow k_i=1\\) \\(x_i=0,k_i=1\\Rrightarrow k_i=0\\) \u7a0d\u5fae\u7528\u4f4d\u8fd0\u7b97\u641e\u4e00\u4e0b\u5c31\u884c\u4e86\u3002","title":"C"},{"location":"rec/old/old-cf-at-sol/#d","text":"\u6211\u76ee\u524d\u505a\u8fc7\u6700\u50bb\u903c\u7684\u6784\u9020\u3002 \u5bb9\u6613\u53d1\u73b0 aaba+k \u5f62\u5f0f\u7684\u6784\u9020\u662f\u5bf9\u7684\u3002 \u5c31\u662f\u524d\u9762\u4e00\u6bb5 a \u6bd4\u540e\u9762\u4e00\u6bb5\u591a\u4e00\u4e2a\uff0c\u7136\u540e\u5728\u4e2d\u95f4\u63d2\u4e00\u4e2a b \u5982\u679c n \u662f\u5947\u6570\u5728\u540e\u9762\u8865\u4e00\u4e2a\u975e a\\b \u7684\u5b57\u7b26\u5c31\u884c\u3002 \u6ce8\u610f\u7279\u5224 \\(\\text{length}=1\\)","title":"D"},{"location":"rec/old/old-cf-at-sol/#e","text":"\u5f85\u8865","title":"E"},{"location":"rec/old/old-cf-at-sol/#edu-112","text":"Contest ID: 1555","title":"Edu #112"},{"location":"rec/old/old-cf-at-sol/#a_2","text":"\u6709 \\(6\\) \u7247\u7684\uff08 \\(15min\\) \uff09 , \\(8\\) \u7247\u7684( \\(20min\\) ), \\(10\\) \u7247\u7684( \\(25min\\) )Pizza\u3002 \u73b0\u5728\u9700\u8981 \u81f3\u5c11 \\(n\\) \u7247 Pizza\uff0c\u95ee\u6700\u5c0f\u7684\u7b49\u5f85\u65f6\u95f4\u3002 \u4e0d\u96be\u53d1\u73b0\u6bcf\u79cd\u5e73\u5747\u4e00\u4e0b\uff0c\u90fd\u662f \\(2.5\\) \u5206\u949f\u4e00\u7247\u3002 \u7136\u540e\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u4f60\u9700\u8981\u7684\u5c0f\u4e8e\u7b49\u4e8e\u516d\u7247\uff0c\u76f4\u63a5 \\(15min\\) \u5c31\u884c\u3002 \u7136\u540e\u8003\u8651\u5927\u4e8e\u516d\u600e\u4e48\u505a\u3002 \u53d1\u73b0\u5176\u5b9e\u8fd9\u4e09\u4e2a\u6570\u53ef\u4ee5\u51d1\u51fa\u6240\u6709\u5927\u4e8e \\(6\\) \u7684\u5076\u6570\u3002 \u53cd\u5411\u601d\u7ef4\u3002 \u5982\u679c\u4f60\u505a\u8fc7\u8fd9\u9053\u9898\uff1a P3951 [NOIP2017 \u63d0\u9ad8\u7ec4] \u5c0f\u51ef\u7684\u7591\u60d1 \u90a3\u4e48\u53ef\u4ee5\u62d3\u5c55\u6210\u4e09\u5143\u7684 \u5076\u6570\u60c5\u51b5 \uff0c\u7136\u540e\u5c31\u80fd\u8bc1\u51fa\u8fd9\u4e09\u4e2a\u6570\u6700\u5927\u4e0d\u80fd\u51d1\u51fa\u7684\u5076\u6570\u662f \\(4\\) \uff0c\u90a3\u4e48\u6700\u5927\u7684\u4e0d\u80fd\u51d1\u51fa\u7684\u6570\u5c31\u662f \\(5\\) \u3002 \u7136\u540e\u5c31\u6574\u5b8c\u4e86\uff0c\u8fd9\u9898\u76f4\u63a5\u7279\u5224\u5c31\u884c\u3002","title":"A"},{"location":"rec/old/old-cf-at-sol/#b_1","text":"\u7ed9\u4e00\u4e2a\u5bbd\u548c\u9ad8\u7ed9\u5b9a\u7684\u623f\u95f4\uff0c\u4e00\u5f20\u5df2\u7ecf\u653e\u597d\u7684\u684c\u5b50\u7684\u5bf9\u89d2\u7ebf\u9876\u70b9\u5750\u6807\u3002 \u518d\u7ed9\u5b9a\u4e00\u5f20\u957f\u5bbd\u56fa\u5b9a\u7684\u684c\u5b50\uff0c\u95ee\u539f\u6765\u7684\u684c\u5b50\u81f3\u5c11\u8981\u79fb\u52a8\u591a\u5c11\u4e2a\u5355\u4f4d\u624d\u80fd\u653e\u4e0b\u65b0\u684c\u5b50\uff08\u66fc\u54c8\u987f\u8ddd\u79bb\uff09\u3002 \u65b0\u7684\u684c\u5b50\u8981\u6700\u4f18\uff0c\u5c31\u53ea\u80fd\u653e\u5728\u56db\u4e2a\u89d2\u4e0a\uff0c\u53ef\u4ee5\u56db\u79cd\u60c5\u51b5\u90fd\u679a\u4e3e\u3002 \u4e5f\u53ef\u4ee5\u7279\u5224\u8d2a\u5fc3\u4e00\u4e0b\uff0c\u6bd4\u8f83\u7b80\u5355\u3002","title":"B"},{"location":"rec/old/old-cf-at-sol/#c_2","text":"Alice \u548c Bob \u5728\u4e00\u4e2a \\(2 \\times m\\) \u7684\u77e9\u5f62\u4e0a\u73a9\u6e38\u620f\uff0c\u77e9\u5f62\u7684\u6bcf\u4e00\u4e2a\u683c\u5b50\u4e0a\u90fd\u6709\u4e00\u4e2a\u6570 $ a_{i,j} $ Alice \u548c Bob \u4e00\u5f00\u59cb\u7ad9\u5728\u5de6\u4e0a\u89d2\u683c\u5b50 \\((1,1)\\) \u4e0a\uff0c\u6bcf\u4e2a\u4eba\u90fd\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u79fb\u52a8\uff0c\u76f4\u5230\u79fb\u52a8\u5230\u7ec8\u70b9 \\((2,m)\\) \u4e0a\uff0c\u7ecf\u8fc7\u4e00\u4e2a\u683c\u5b50\u65f6\u4f1a\u53d6\u8d70\u683c\u5b50\u4e0a\u7684\u6570\uff0c\u8d62\u5f97\u76f8\u5e94\u7684\u5f97\u5206 Alice \u9996\u5148\u5f00\u59cb\u79fb\u52a8\uff0cBob \u4e0d\u80fd\u53d6\u8d70 Alice \u5df2\u7ecf\u53d6\u8d70\u7684\u6570 Alice \u671f\u671b\u6700\u5c0f\u5316 Bob \u7684\u5f97\u5206\uff0cBob \u5219\u5e0c\u671b\u6700\u5927\u5316\u81ea\u5df1\u7684\u5f97\u5206 \u6c42Bob \u7684\u6700\u5927\u5f97\u5206\u3002 \u8bfb\u4e00\u4e0b\u9898\u53d1\u73b0\uff0c\u56e0\u4e3a\u53ea\u6709\u4e24\u884c\u800c\u4e14\u53ea\u80fd\u5411\u53f3\u6216\u8005\u5411\u4e0b\u3002 \u4e5f\u5c31\u662f\u8bf4\u4ed6\u4eec\u90fd\u53ea\u80fd\u5411\u4e0b\u4e00\u6b21\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u5165\u624b\u70b9\u3002 \u6ce8\u610f\u5230Alice\u8d70\u8fc7\u4e4b\u540e\u6570\u5b57\u5c31\u6ca1\u4e86\uff0c\u800c\u4e14Alice\u5148\u624b\uff0c\u6240\u4ee5Bob\u4e00\u5b9a\u8981\u5c3d\u91cf\u907f\u5f00Alice\u8d70\u8fc7\u7684\u8def\u3002 \u6bd4\u5982\u4e0a\u56fe\uff0c\u7c89\u8272\u90e8\u5206\u662fAlice\u8d70\u8fc7\u7684\u8def\uff0c\u90a3\u4e48Bob\u80fd\u53d6\u5230\u6570\u5b57\u7684\u53ea\u6709 \\(R1\\) \u6216 \\(R2\\) \u4e24\u90e8\u5206\u3002 \u4e5f\u5c31\u662f\u4ed6\u4e0d\u662f\u4ece\u4e0a\u9762\u5148\u8d70\u901a\u518d\u4e0b\u53bb\u5c31\u662f\u5148\u4e0b\u53bb\u7136\u540e\u8d70\u901a\u3002 \u90a3\u4e48\u6211\u4eec\u679a\u4e3eAlice\u4e0b\u53bb\u7684\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u7136\u540e\u5229\u7528\u524d\u7f00\u548c\u7ef4\u62a4\u4e00\u4e0b\u6c42\u4e2a \\(\\max\\) \u5373\u53ef\u3002","title":"C"},{"location":"rec/old/old-cf-at-sol/#d-e-f","text":"\u5f85\u8865","title":"D E F"},{"location":"rec/old/old-cf-at-sol/#codeforces-736div12","text":"Contest ID: div1 1548,div2 1549 \u6211\u4f9d\u65e7div2 ABCD\u2026\u2026 \u5176\u4ed6\u7684\u76ee\u524d\u8fd8\u4e0d\u4f1a","title":"Codeforces #736(div1+2"},{"location":"rec/old/old-cf-at-sol/#div2a","text":"\u50bb\u903c\u9001\u5206\u9898\u3002 \u8ba9\u4f60\u627e\u4e00\u5bf9 \\((a,b)\\) \u6ee1\u8db3 \\(a \\operatorname{mod} P = b \\operatorname{mod} P\\) \\(P\\) \u662f\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e \\(5\\) \u7684\u8d28\u6570\u3002 \u6240\u4ee5 \\(P\\) \u4e0d\u53ef\u80fd\u662f\u5076\u6570\uff0c\u4e5f\u5c31\u662f\u8bf4 \\(P-1\\) \u4e00\u5b9a\u662f\u5076\u6570\u3002 \u90a3\u4e48\u76f4\u63a5\u627e \\(P-1\\) \u7684\u968f\u4fbf\u4e24\u4e2a\u5927\u4e8e\u7b49\u4e8e\u4e8c\u7684\u56e0\u5b50\u3002 \u4e3a\u4e86\u65b9\u4fbf\u76f4\u63a5\u8f93\u51fa \\(2\\) \u548c \\((p-1)/2\\) \u5373\u53ef\u3002","title":"div2A"},{"location":"rec/old/old-cf-at-sol/#div2b","text":"\u8003\u8651\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\u5bf9\u4e8e\u5728\u7b2c \\(i\\) \u5217\u7684\u5352\u8981\u60f3\u5230\u8fbe\u5bf9\u9762\u4e00\u5b9a\u6ee1\u8db3\u4e00\u4e0b\u4e24\u4e2a\u6761\u4ef6\uff1a \u7b2c\u4e00\u6392\u7684\u7b2c \\(i\\) \u5217\u6ca1\u6709\u654c\u5175\uff0c\u76f4\u63a5\u8d70\u8fc7\u53bb\u5373\u53ef\u3002 \u7b2c\u4e00\u6392\u7684\u7b2c \\(i-1\\) \u6216 \\(i+1\\) \u5217\u6709\u654c\u5175\u4e14\u4e4b\u524d\u6ca1\u6709\u6211\u65b9\u5175\u53bb\u5403\u3002 \u7136\u540e\u7a0d\u5fae\u6a21\u62df\u4e00\u4e0b\u5c31\u884c\u4e86\u3002","title":"div2B"},{"location":"rec/old/old-cf-at-sol/#div1a","text":"\u751a\u81f3\u6bd4 div2A\u8fd8SB\u7684zz\u9898\u3002 \u770b\u8d77\u6765\u662f\u4ec0\u4e48\u9ad8\u5927\u4e0a\u7684\u56fe\u8bba\uff0c\u7136\u800c\u76f4\u63a5\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u7684\u51fa\u5ea6\u5c31\u5b8c\u4e86\u3002 \u7ec6\u8282\u7a0d\u5fae\u6709\u70b9\u5361\u4eba\uff0c\u6ce8\u610f\u4e00\u4e0b\u5c31\u884c\u3002","title":"div1A"},{"location":"rec/old/old-cf-at-sol/#div1b-great","text":"\u554a\u8fd9\u9053\u9898\u6709\u70b9\u6bd2\u7624\uff0c\u6211\u8c03\u4e86\u4e00\u4e2a\u5c0f\u65f6\u5de6\u53f3\uff08\u8981\u4e0d\u662f\u6bd4\u8d5b\u5ef6\u65f610min\u6211\u771f\u7684\u505a\u4e0d\u8d77\uff09\u3002 \u7ed9\u4e00\u4e2a\u5e8f\u5217 \\(a[]\\) \u7684\u533a\u95f4 \\(a_i,a_{i+1},...a_j\\) \u3002 \u8fd9\u4e2a\u533a\u95f4\u662f\u597d\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u4e00\u4e2a \\(\\ge 2\\) \u7684 \\(m\\) \uff0c\u4f7f \\(a_i \\operatorname{mod} m=a_{i+1} \\operatorname{mod} m =...=a_j \\operatorname{mod} m\\) \u95ee\u7ed9\u5b9a\u5e8f\u5217 \\(a[]\\) \u7684\u6700\u5927\u597d\u533a\u95f4\u7684\u5927\u5c0f\u3002 \u8bf4\u5b9e\u8bdd\u2026\u2026\u6211\u662f\u771f\u7684\u4e0d\u6e05\u695a\u8fd9\u4e2a\u795e\u4ed9\u601d\u8def\u600e\u4e48\u6765\u7684\u3002 \u5bf9\u4e8e \\(\\forall x \\in(i,j]\\) \uff0c\u4ee4 \\(a[x]\\) \u51cf\u53bb \\(a[x-1]\\) \uff08\u4e4b\u540e\u8981\u53d6\u7edd\u5bf9\u503c\uff09 \u7136\u540e\u4f60\u4f1a\u53d1\u73b0\u51cf\u4e86\u4e4b\u540e\uff0c\u5047\u8bbe \\(a[x] \\operatorname{mod} m=k\\) \u3002 \u90a3\u4e48 \\(k\\) \u5c31\u4f1a\u88ab\u6d88\u6389\u4e86\uff01\uff01\uff01 \u4e5f\u5c31\u662f \\(|a[x]-a[x-1]| \\operatorname{mod} m =0\\) \uff01\uff01\uff01 \u90a3\u4e48\u53cd\u8fc7\u6765\uff0c\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u4e00\u4e2a\u6700\u957f\u7684 \\(\\gcd\\) \u76f8\u540c\uff08\u4e14 \\(\\gcd>1\\) \uff09\u7684\u533a\u95f4\u5c31\u884c\u4e86\uff01\uff01\uff01 \u7136\u540e\u53d1\u73b0 \\(\\gcd\\) \u8fd9\u73a9\u610f\u513f\u4e0d\u592a\u597d\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff08\u5e38\u6570\u592a\u5927\u4e86\uff09\uff0c\u5206\u5757\u7684 \\(\\text{O}(n\\sqrt{n})\\) \u5f88\u5bb9\u6613\u672c\u9898\u7684\u67d0\u4e9b\u795e\u4ed9\u6570\u636e\u5361\u6b7b\u3002 \u7136\u540e\u6211\u4eec\u5c31\u60f3\u5230\u4e86\u597d\u73a9\u7684 \\(\\text{ST}\\) \u8868\uff01\uff01\uff01\uff01 \u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u5229\u7528 \\(\\text{ST}\\) \u8868\u6765\u7ef4\u62a4\u533a\u95f4\u7684 \\(\\gcd\\) \u3002 \u4f46\u662f\u8fd9\u91cc\u8981\u6c42\u7684\u662f\u6700\u957f\u7684\u533a\u95f4\u957f\u5ea6\uff0c\u518d\u5957\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u5c31\u4f1a\u70b8\u3002 \u90a3\u4e48\u5c31\u638f\u51fa \\(\\text{O}(n\\log n)\\) \u7684\u4e8c\u5206\u5427\u3002 \u6240\u4ee5\u5148\u5dee\u5206\u53d6\u4e2a\u7edd\u5bf9\u503c\u518d\u9884\u5904\u7406\u51fa \\(\\log_2\\) \u3002 \u7136\u540e\u5229\u7528 \\(\\text{ST}\\) \u8868\u7ef4\u62a4 \\(\\gcd\\) \u3002 \u4e4b\u540e\u679a\u4e3e\u533a\u95f4\u5de6\u7aef\u70b9\uff0c\u540c\u65f6\u4e8c\u5206\u533a\u95f4\u53f3\u7aef\u70b9\u3002 \u5e76\u7528\u7ef4\u62a4\u7684\u4fe1\u606f\u8fdb\u884ccheck\u5373\u53ef\u3002 \u5e94\u8be5\u662f\u6211\u6700\u8fd1\u505a\u7684\u6700\u6709\u610f\u601d\u7684\u9898\u4e86\u3002 \u6b64\u5904\u4e8c\u5206\u5199\u6cd5\u76f8\u8f83\u4e8e\u6211\u5e73\u65f6\u7684\u5199\u6cd5\u7a0d\u5fae\u6709\u70b9\u602a\uff0c\u4e0d\u8fc7\u4e5f\u662f\u5bf9\u7684\u3002 \u8fd9\u79cd\u5199\u6cd5\u662f\u4e0d\u4f1a\u53d6\u5230 \\(l\\) \u7684\uff0c\u65b9\u4fbf\u672c\u9898\u66f4\u65b0\u7b54\u6848\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 #include <bits/stdc++.h> using namespace std ; const int si = 2e5 + 10 ; #define int long long int st [ si ][ 20 ]; int a [ si ], logt [ si ]; int T , n , res = 0 ; int gcd ( int a , int b ){ if ( ! b ) return a ; return gcd ( b , a % b ); } int check ( int l , int r ){ return gcd ( st [ l ][ logt [ r - l + 1 ]], st [ r - ( 1 << logt [ r - l + 1 ]) + 1 ][ logt [ r - l + 1 ]]); } void STprework (){ for ( register int i = 2 ; i <= n ; ++ i ){ logt [ i ] = logt [ i >> 1 ] + 1 ; } for ( register int i = 1 ; i <= n ; ++ i ){ int o = abs ( a [ i ] - a [ i + 1 ]); st [ i ][ 0 ] = o ; } for ( register int i = 1 ; i <= logt [ n ]; ++ i ){ int toj = ( n + 1 ) - ( 1 << i ); for ( register int j = 1 ; j <= toj ; ++ j ){ st [ j ][ i ] = gcd ( st [ j ][ i -1 ], st [ j + ( 1 << ( i -1 ))][ i -1 ]); } } } signed main (){ scanf ( \"%lld\" , & T ); while ( T -- ){ scanf ( \"%lld\" , & n ); for ( register int i = 1 ; i <= n ; ++ i ){ scanf ( \"%lld\" , & a [ i ]); } n -= 1 ; STprework (); res = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ if ( st [ i ][ 0 ] == 1 ) continue ; int l = i , r = n ; while ( l < r ){ int mid = ( l + r + 1 ) >> 1 ; if ( check ( i , mid ) == 1 ) r = mid -1 ; else l = mid ; } res = max ( res , l - i + 1 ); } res ++ ; printf ( \"%lld \\n \" , res ); } return 0 ; }","title":"div1B \uff08Great\uff09"},{"location":"rec/old/old-cf-at-sol/#codeforces-737div2","text":"Contest ID: 1557 \u5bf9\u8fd9\u6b21\u6bd4\u8d5b\u7684\u51fa\u9898\u4eba\u975e\u5e38\u65e0\u8bed\u3002 \u6ca1\u6709\u6c34\u5e73\u5c31\u522b\u6765\u51fa\u9898\u597d\u4e0d\u597d\uff1f \u60a8\u53ea\u4f1a\u62ff\u7740\u677f\u5b50\uff0c\u5957\u8def\u9898\u6539\u4e00\u70b9\u70b9\uff0c\u52a0\u52a0\u7801\u91cf\uff0c\u8f93\u51fa\u65b9\u6848\u6765\u6076\u5fc3\u4eba\u5417\uff1f A\u7684\u8d2a\u5fc3\uff0cB\u7684\u79bb\u6563\uff0cC\u7684\u7ec4\u5408\u6570\uff0cD\u7684\u7ebf\u6bb5\u6811\u4f18\u5316DP\uff0c\u90fd\u662f\u8001trick\uff0cE\u51fa\u4e2a\u4ea4\u4e92\uff0c\u70c2\u5230\u5927\u90e8\u5206\u4ea4\u7684\u968f\u673a\u7b97\u6cd5\u90fd\u80fd\u8fc7st\u3002 \u6211\u6ca1AK\uff0c\u53ea\u662f\u60f3\u55b7\u4e00\u55b7\u51fa\u9898\u4eba\uff0c\u53cd\u6b63\u8fd9\u6bd4\u8d5b\u98ce\u8bc4\u633a\u5dee\u7684\u3002 \u4e0d\u5199\u4e86\uff0c\u6d6a\u8d39\u65f6\u95f4\uff0c\u671f\u5f85 #738 \u80fd\u6709\u8d28\u91cf\u4e00\u70b9\u3002","title":"Codeforces #737(div2)"},{"location":"rec/old/old-cf-at-sol/#atcoder-beginning-contest-214","text":"Contest ID: abc_214 \u56e0\u4e3aAT\u6bd4\u8d5b\u6ca1\u6709\u90a3\u4e48\u9891\u7e41\uff0c\u6240\u4ee5AT\u7684\u9898\u89e3\u4e5f\u90fd\u6254\u5230Codeforces Solutions \u6765\u4e86\u3002 \u660e\u660e\u53ef\u4ee5\u5199\u51faEF\u4f46\u662fE\u50bb\u903c\u4e86\u3002 \u6211\u4e0d\u914d 8kyu\u3002","title":"Atcoder Beginning Contest 214"},{"location":"rec/old/old-cf-at-sol/#a-b-c","text":"A\u662f\u8bed\u6cd5\u9898\uff0cB\u662f\u66b4\u529b\u679a\u4e3e\uff0cC\u662f\u65ad\u73af\u6210\u94fe\u6a21\u62df","title":"A B C"},{"location":"rec/old/old-cf-at-sol/#d-cf915f","text":"\u8fd9\u662f\u4e2a\u7ecf\u5178 trick\uff0c\u4f60\u4f1a\u53d1\u73b0\u8fd9\u4e24\u9898\u7adf\u7136\u548c\u672c\u6b21D\u9898\u60ca\u4eba\u7684\u76f8\u4f3c\uff1a P5351 Ruri Loves Maschera \uff08\u8fd9\u9898\u5b9e\u9645\u4e0a\u662f\u70b9\u5206\u6cbb+BIT\uff0c\u548c\u8fd9\u4e2atrick\u6ca1\u592a\u5927\u5173\u7cfb\uff09 CF915F Imbalance Value of a Tree \u5168\u90e8\u90fd\u662f \\(u,v\\) \u4e4b\u95f4\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u4e00\u4e9b\u4fe1\u606f\u7edf\u8ba1\u3002 \u7279\u522b\u662f CF915F\uff0c\u4f60\u60ca\u5947\u7684\u53d1\u73b0\u4e00\u4e2a \\(\\min,\\max\\) \u505a\u51cf\u6cd5\u540e\u6c42\u548c\uff0c\u4e00\u4e2a\u76f4\u63a5\u5c31\u662f\u5bf9 \\(\\max\\) \u6c42\u548c\u3002 \u6240\u4ee5\u8fd9\u4e24\u9053\u9898\uff0c \u5b8c\u5168\u4e00\u81f4 \u3002 \u6b64 Trick \u7684\u505a\u6cd5\u5c31\u662f\u5229\u7528\u5e76\u67e5\u96c6\u6309\u987a\u5e8f\u5408\u5e76\u7136\u540e\u8ba1\u7b97\u8d21\u732e\u3002 \u8fd9\u9898\u5c31\u662f\u6309\u8fb9\u6743\u503c\u4ece\u5c0f\u5230\u5927\u5408\u5e76\u8fde\u901a\u5757\u7136\u540e\u8ba1\u7b97\u8d21\u732e\u3002 \u9996\u5148\u8003\u8651\u7b80\u5355\u8def\u5f84\u4e0a\u7684 \\(w_{\\max}\\) \u6211\u4eec\u5148\u5bf9\u4e8e\u6240\u6709\u4ee3\u8868\u8fb9\u7684\u4e09\u5143\u7ec4 \\((u,v,w)\\) \u6309\u7167 \\(w\\) \u4ece\u5c0f\u5230\u5927 \u6392\u5e8f\uff0c\u7136\u540e\u4f9d\u6b21\u626b\u63cf\u6bcf\u4e00\u6761\u8fb9\u3002 \u7136\u540e\u4f7f\u7528\u5e76\u67e5\u96c6\u8fdb\u884c\u7ef4\u62a4\u8fde\u901a\u5757\uff0c\u6bcf\u4e00\u6b21\u626b\u63cf\u90fd\u628a \\(u,v\\) \u5408\u5e76\u8d77\u6765\u3002 \u56e0\u4e3a\u73b0\u5728\u6240\u6709\u4e09\u5143\u7ec4\u6309 \\(w\\) \u5355\u8c03\u4e0d\u4e0b\u964d\uff0c\u4e5f\u5c31\u662f\u8bf4\u4f60\u5bf9\u4e8e\u5f53\u524d\u626b\u63cf\u5230\u7684 \\(w\\) \uff0c\u4ed6\u80fd\u505a\u51fa\u8d21\u732e\u7684\u8def\u5f84\u53ea\u6709 \\(siz[\\text{root}(u)]\\times siz[\\text{root}(v)]\\) \u8fd9\u4e48\u591a\u4e2a\u3002 \u4e3a\u5565\uff0c\u4f60\u770b\u540e\u9762\u7684\u6ca1\u6709\u88ab\u52a0\u8fdb\u6765\u7684\u4e09\u5143\u7ec4\uff0c\u6bcf\u4e00\u4e2a\u7684 \\(w\\) \u90fd\u6bd4\u4f60\u5927\uff0c\u90a3\u540e\u9762\u7684\u60c5\u51b5\u4f60\u80af\u5b9a\u6ca1\u6cd5\u505a\u51fa\u8d21\u732e\u3002 \u90a3\u4e48\uff0c\u5728\u6bcf\u4e00\u6b21\u5408\u5e76\u7684\u65f6\u5019\u8ba1\u7b97\u8d21\u732e \\(w \\times siz[\\text{root}(u)]\\times siz[\\text{root}(v)]\\) \u5373\u53ef\u3002 \u7136\u540e CF915F \u5c31\u5b8c\u5168\u4e00\u6837\uff0c\u70b9\u5316\u8fb9\u76f4\u63a5\u6c42\u4e24\u904d\uff0c\u4e00\u6b21\u5347\u5e8f\u4e00\u6b21\u964d\u5e8f\u6392\u5e8f\uff0c\u7136\u540e\u4e24\u4e2a\u603b\u8d21\u732e\u505a\u51cf\u6cd5\u5373\u53ef\u3002 \u90a3\u4e00\u9898\u552f\u4e00\u7684\u65b0 Trick \u5c31\u662f\u5bf9\u4e8e\u8dd1 \\(\\min\\) \u7684 \\(\\texttt{dsu}\\) \u7684\u65f6\u5019\uff0c\u5bf9\u4e8e \\((u,v)\\) \u4e24\u70b9\u4e4b\u95f4\u7684\u8fb9\u6743\u662f \\(\\min(val[u],val[v])\\) \u3002 \\(\\max\\) \u540c\u7406\u5373\u53ef\u3002","title":"D &amp; CF915F"},{"location":"rec/old/old-cf-at-sol/#e-f-g-h","text":"\u5f85\u8865","title":"E F G H"},{"location":"rec/old/old-cf-at-sol/#codeforces-738","text":"Contest ID: 1559 CN round \uff0c\u4f53\u9a8c\u8fd8\u53ef\u4ee5\u3002 \u53ef\u80fd\u662f\u4eca\u5e74\u7684\u6700\u540e\u4e00\u6b21\u5b9e\u5730CF\u4e86\u3001","title":"Codeforces #738"},{"location":"rec/old/old-cf-at-sol/#a_3","text":"\u7a0d\u5fae\u63a8\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\uff0c\u628a\u6574\u4e2a\u5e8f\u5217\u5168\u90e8 \\(\\&\\) \u8d77\u6765\u53ef\u4ee5\u6700\u4f18\u3002 \u7136\u540e\u968f\u4fbf\u6574\u4e00\u6574\u5c31\u53ef\u4ee5\u53d1\u73b0\u4e00\u5b9a\u80fd\u6784\u9020\u51fa\u8fd9\u79cd\u65b9\u6848\u3002 \uff08\u4e4b\u540e\u5565\u65f6\u95f4\u4ed4\u7ec6\u5199\u4e0b\u5427\uff09","title":"A"},{"location":"rec/old/old-cf-at-sol/#b_2","text":"\u611f\u89c9\u662f\u4e2a\u5f88\u719f\u6089\u7684trick\uff1f \u5c31\u662f\u7ed9\u4f60\u4e00\u4e2a\u5df2\u7ecf\u586b\u4e0a\u4e24\u79cd\u5b57\u7b26 R,B \u7684\u5b57\u7b26\u4e32\uff08\u6709\u4e9b\u5730\u65b9\u7a7a\u7740\uff09\u3002 \u95ee\u4f60\u600e\u4e48\u6837\u8865\u5168\u5269\u4e0b\u7684\u7a7a\u4f59\u80fd\u591f\u4f7f\u76f8\u90bb\u4e24\u4e2a\u5b57\u7b26\u76f8\u7b49\u7684\u60c5\u51b5\u6700\u5c11\u3002 \u4f60\u53ea\u80fd\u586b R,B \u4e24\u4e2a\u5b57\u7b26\u3002 \u5c31\u662f\u8d2a\u5fc3\u4e00\u4e0b\uff0c\u56e0\u4e3a\u9700\u8981\u5c3d\u91cf\u7684\u51fa\u73b0 BRBRB \u8fd9\u79cd\u4ea4\u53c9\u7684\u5f62\u5f0f\u3002 \u6240\u4ee5\u968f\u4fbf\u5224\u4e00\u4e0b\u5c31\u884c\uff0c\u7ec6\u8282\u89c1\u4ee3\u7801\u3002 \u6ce8\u610f\u8981\u5199\u6e05\u695a\u5168\u90e8\u662f ? \u7684\u60c5\u51b5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 while ( T -- ){ scanf ( \"%lld\" , & n ); cin >> s ; s = ' ' + s ; int i = 0 , k = 0 ; for ( i = 1 ; i <= n ; ++ i ) if ( s [ i ] != '?' ){ k = 1 ; break ;} if ( k ){ for ( register int j = i -1 ; j >= 1 ; -- j ){ if ( s [ j + 1 ] == 'R' ) s [ j ] = 'B' ; else s [ j ] = 'R' ; } } else s [ 1 ] = 'B' ; for ( i = 1 ; i <= n ; ++ i ){ if ( s [ i ] == '?' ){ if ( s [ i -1 ] == 'R' ) s [ i ] = 'B' ; else s [ i ] = 'R' ; } } //\u628a\u6ca1\u6709\u8865\u5168\u7684\u5730\u65b9\u8865\u5168 for ( i = 1 ; i <= n ; ++ i ) cout << s [ i ]; puts ( \"\" ); }","title":"B"},{"location":"rec/old/old-cf-at-sol/#c_3","text":"\u6bd4\u8f83\u7b80\u5355\u7684\u6784\u9020\uff0c\u76f4\u63a5\u653e\u4ee3\u7801\uff08\u538b\u4e86\u884c\uff0c\u4e0d\u662f\u6211\u7684\u6b63\u5e38\u9a6c\u8702\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 while ( T -- ){ scanf ( \"%lld\" , & n ); for ( register int i = 1 ; i <= n ; ++ i ) scanf ( \"%lld\" , & a [ i ]); if ( a [ 1 ] == 1 ){ printf ( \"%lld \" , n + 1 ); for ( register int i = 1 ; i <= n ; ++ i ) printf ( \"%lld \" , i ); puts ( \"\" ); continue ; } if ( a [ n ] == 0 ){ for ( register int i = 1 ; i <= n ; ++ i ) printf ( \"%lld \" , i ); printf ( \"%lld \" , n + 1 ); puts ( \"\" ); continue ; } for ( register int i = 1 ; i <= n ; ++ i ){ if ( a [ i ] == 0 && a [ i + 1 ] == 1 ){ for ( register int j = 1 ; j <= i ; ++ j ) cout << j << \" \" ; cout << n + 1 << \" \" ; for ( register int j = i + 1 ; j <= n ; ++ j ) cout << j << \" \" ; break ; } } puts ( \"\" ); continue ; }","title":"C"},{"location":"rec/old/old-cf-at-sol/#d1","text":"\u7ed9\u4f60\u4e24\u4e2a\u72ec\u7acb\u7684\u68ee\u6797\uff0c\u73b0\u5728\u6bcf\u4e2a\u68ee\u6797\u90fd\u6709\u4e00\u4e9b\u8fb9\u3002 \u7136\u540e\u5982\u679c\u4f60\u8981\u6dfb\u52a0\u4e00\u6761\u8fb9 \\((u,v)\\) \uff0c\u90a3\u4e48\u4e24\u4e2a\u68ee\u6797\u7684 \\((u,v)\\) \u8fd9\u6761\u8fb9\u90fd\u8981\u52a0\u4e0a\u3002 \u95ee\u5728\u6ee1\u8db3\u8fd9\u4e24\u4e2a\u68ee\u6797\u4ecd\u65e7\u662f\u68ee\u6797\u7684\u6761\u4ef6\u4e0b\uff0c\u6700\u591a\u53ef\u4ee5\u52a0\u591a\u5c11\u6761\u8fb9\u3002 \\(n\\le1000\\) \u3002 \u50bb\u903c\u9898\uff0c\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u5757\u7136\u540e\u66b4\u529b\u679a\u4e3e\u6240\u6709\u6ca1\u6709\u8054\u901a\u7684\u70b9\u5bf9\uff0c\u52a0\u8fb9\u5373\u53ef\u3002","title":"D1"},{"location":"rec/old/old-cf-at-sol/#d2","text":"\u540c D1 \uff0c \\(n\\le 10^5\\) \u672c\u6b21\u6bd4\u8d5b\u6700\u96be\u7684\u9898\u3002 \u8d5b\u65f6\u6ca1\u505a\u51fa\u6765\uff0c\u8d5b\u540e\u770b\u89c1\u4e00\u4e2a\u795e\u5947\u7684\u505a\u6cd5\uff1a \u5148\u8fde \\(1\\) \uff0c\u7136\u540e\u5bf9\u4e24\u4e2a\u68ee\u6797\u679a\u4e3e\u6bcf\u4e2a\u70b9\u770b\u8ddf \\(1\\) \u6709\u6ca1\u6709\u8fde\uff0c\u5728\u8fd9\u91cc\u9762\u627e\u70b9\u8fde\u7ebf\u3002 \u611f\u89c9\u6709\u70b9\u602a\u4f46\u662f\u80fd\u8fc7\uff08","title":"D2"},{"location":"rec/old/old-cf-at-sol/#e_1","text":"\\(\\gcd\\) +\u5927\u529b\u5bb9\u65a5+DP \\(\\because\\gcd(a_1,a_2...a_n)=1 \\Leftrightarrow\\sum_{d|\\gcd(a_1,a_2...a_n)}\\mu(d)\\) . \\(\\therefore\\) \u8ba1\u7b97\u5bf9\u4e8e\u6bcf\u4e2a \\(d\\) , \\(\\mu(d)\\) \u88ab\u7b97\u4e86\u591a\u5c11\u6b21\uff0c\u8fd9\u4e2a\u76f4\u63a5 \\(\\texttt{dp}\\) \u5373\u53ef\u3002 \u4e5f\u5c31\u662f\u679a\u4e3e \\(d\\) \uff0c\u7136\u540e\u8981\u8ba1\u7b97\u6709\u591a\u5c11\u4e2a\u6570\u5217\u6ee1\u8db3 \\(d|a_i\\) \u4e14 \\(\\sum_{i=1}^n a_i\\le m\\) \u601d\u8def\u6765\u81ea lgsdwn(Orz lgd) \u548c Silver187 \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 #include <bits/stdc++.h> using namespace std ; #define int long long const int si = 101000 ; const int mod = 998244353 ; int n , m ; int prime [ si ], mu [ si ]; bool vis [ si ]; void Mobius ( int n ){ memset ( vis , 0 , sizeof ( vis )); mu [ 1 ] = 1 , prime [ 0 ] = 0 ; for ( register int i = 2 ; i <= n ; i ++ ){ if ( ! vis [ i ]) prime [ ++ prime [ 0 ]] = i , mu [ i ] = -1 ; for ( register int j = 1 ; j <= prime [ 0 ] && i <= n / prime [ j ]; j ++ ){ vis [ i * prime [ j ]] = 1 ; if ( i % prime [ j ] == 0 ){ mu [ i * prime [ j ]] = 0 ; break ; } mu [ i * prime [ j ]] =- mu [ i ]; } } } int a [ si ], b [ si ]; int l [ si ], r [ si ]; int f [ si ], s [ si ]; signed main (){ scanf ( \"%lld%lld\" , & n , & m ); Mobius ( m ); for ( register int i = 1 ; i <= n ; ++ i ){ scanf ( \"%lld%lld\" , & a [ i ], & b [ i ]); } int res = 0 ; for ( register int d = 1 ; d <= m ; ++ d ){ if ( mu [ d ]){ for ( register int i = 1 ; i <= n ; ++ i ){ l [ i ] = ( a [ i ] + d -1 ) / d , r [ i ] = b [ i ] / d ; } int qwq = m / d ; for ( register int i = 0 ; i <= qwq ; ++ i ){ s [ i ] = 1 ; } for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= qwq ; ++ j ){ f [ j ] = 0 ; } for ( register int j = l [ i ]; j <= qwq ; ++ j ){ f [ j ] = s [ j - l [ i ]]; if ( j - r [ i ] -1 >= 0 ) f [ j ] = ( f [ j ] + mod - s [ j - r [ i ] -1 ]) % mod ; } s [ 0 ] = 0 ; for ( register int j = 1 ; j <= qwq ; ++ j ){ s [ j ] = ( s [ j -1 ] + f [ j ]) % mod ; } } res = ( res + mu [ d ] * s [ qwq ]) % mod ; } } res = ( res + mod ) % mod ; printf ( \"%lld \\n \" , res ); return 0 ; }","title":"E"},{"location":"rec/old/old-cf-at-sol/#codeforces-739div3","text":"Contest ID: 1560 \u6c34\uff0c\u592a\u6c34\u4e86\uff08\uff09 FST\u7fa4\u7684\u5176\u4e2d\u516b\u4f4d\u7fa4\u53cb\u4e00\u8d77\u6574\u4e86\u4e2a\u6d3b\uff0c\u516c\u7528\u4e00\u4e2a\u795e\u5947\u7684\u540d\u5b57\u7684\u8d26\u53f7\u4e00\u8d77\u51b2rk1\uff0c\uff08\u5f53\u7136\u56e0\u4e3aF1\u7684\u7f5a\u65f6\u6211\u4eec\u662frk3\uff09 1 Demoe,\u5cf0,tjx,tearing,lgd,bmy,monsters \u6211\u5565\u4e5f\u6ca1\u8d21\u732e\uff08\u4ed6\u4eec\u5207\u9898\u592a\u5feb\u4e86\uff09 \u4f46\u662f\u56e0\u4e3a\u5206\u914d\u7684\u539f\u56e0\u6ca1\u670940min\u4ee5\u5185AK\uff08\u545c\u545c\uff09 \u6211\u5c31\u53ea\u80e1\u4e86\u4e00\u4e2aF1\u548cE\uff0c\u7136\u540eE\u8fd8\u5047\u4e86\u3002 \u4e8e\u662f\u540e\u9762\u770b\u5230\u516c\u7528\u53f7AK\u4e86\u4e4b\u540e\u53bb\u5f00A\u9898\u505a\u3002 \u540e\u9762\u5199\u5230 D \u9898\u5c31\u6709\u70b9\u56f0\u4e86\uff0c\u61d2\u5f97\u5199EF12\u4e86\uff0c\uff08\u53cd\u6b63F1F2\u80e1\u51fa\u6765\u4e86\u4e4b\u540e\u518d\u8865\uff0cE\u80e1\u4e0d\u51fa\u6765\u770b\u770b\u9898\u89e3\u628a\uff09","title":"Codeforces # 739\uff08div3\uff09"},{"location":"rec/old/old-cf-at-sol/#a_4","text":"\u4e00\u4e2a\u6b63\u6574\u6570\u6570\u5217\uff0c\u4ece \\(1\\) \u5f00\u59cb\uff0c\u4e00\u76f4\u5f80\u540e\u4e00\u4e2a\u4e00\u4e2a\u7684\u589e\u52a0 \\(1\\) \uff0c\u4f46\u662f\u6ca1\u6709\u4e09\u7684\u500d\u6570\u548c\u4ee5\u4e09\u7ed3\u5c3e\u7684\u6570\u3002 \u7136\u540e\u95ee\u6570\u5217\u7b2c \\(k\\) \u9879 \\(1\\le k \\le 1000\\) \u3002 \u8bed\u6cd5\u9898\uff1a\u63d0\u524d for \u4e00\u904d\uff0c\u6253\u597d\u4e00\u5343\u9879\u7136\u540e\u76f4\u63a5\u8f93\u51fa\uff0c\u5b8c\u4e86\u3002 \u4e0d\u8fc7\u6628\u665a\u9b54\u6014\u4e86\uff0c\u5c45\u7136\u5fd8\u8bb0\u4e86 % \u7684\u5b58\u5728\uff0c\u76f4\u63a5\u5199\u4e86\u4e00\u4e2a\uff1a 1 2 3 inline int mod ( int x , int p ){ return x < 0 ? ( x + p ) - ((( x + p ) / p ) * p ) : x - (( x / p ) * p ); } \u96be\u602a\u6ca1\u6709\u4e00\u5206\u949fA\u3002","title":"A"},{"location":"rec/old/old-cf-at-sol/#b_3","text":"\u7ed9\u5b9a\u4e00\u4e2a\u73af\uff0c\u73af\u4e0a\u4ece \\(1 \\sim n\\) \u4f9d\u6b21\u7ad9\u4e86 \\(n\\) \u4e2a\u4eba\uff08 \\(n\\) \u662f\u5076\u6570\uff09\u3002 \u7136\u540e\u5047\u8bbe\u6709\u4e24\u4e2a\u4eba \\(x,y\\) \u9762\u5bf9\u7740\uff0c\u90a3\u4e48 \\(x,y\\) \u7684\u8fde\u7ebf\u5c31\u4e00\u5b9a\u8fc7\u5706\u5fc3\u3002 \u73b0\u5728\u7ed9\u4f60\u4e00\u4e2a\u9762\u5bf9\u7740\u7684\u4e24\u4e2a\u4eba\u7684\u5e8f\u53f7 \\(a,b\\) \uff0c\u518d\u53e6\u5916\u7ed9\u5b9a\u4e00\u4e2a \\(c\\) \uff0c\u6c42 \\(c\\) \u9762\u5bf9\u7684\u4eba\u7684\u5e8f\u53f7\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u73af\uff0c\u8f93\u51fa \\(-1\\) \u3002 \u53d1\u73b0\u4e24\u4e2a\u76f8\u5bf9\u70b9\u5e8f\u53f7\u4e4b\u5dee\u7684\u7edd\u5bf9\u503c\u7684\u4e24\u500d\u5c31\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u73af\u7684 \\(n\\) \uff0c\u7136\u540e\u968f\u4fbf\u5224\u4e00\u4e0b\u5c31\u884c\u3002 1 2 3 4 5 int R = abs ( a - b ), n = R << 1 ; if ( c > n || ( c + R > n && c <= R ) || c + R == a || c + R == b || c - R == a || c - R == b || b > n || a > n ){ puts ( \"-1\" ); continue ; } else printf ( \"%lld \\n \" , c <= R ? c + R : c - R );","title":"B"},{"location":"rec/old/old-cf-at-sol/#c_4","text":"UPD\uff1a\u8349\uff0c\u8fd9\u9898\u6211\u5b9e\u9645\u4e0aFST\u4e86\uff08\u4e45\u8fdd\u4e86\uff09 \u56e0\u4e3a\u6211\u662funofficial\u53c2\u8d5b\u6240\u4ee5\u6ca1\u6d4bst\u3002 \u9ebb\u4e86\u3002 \u4e4b\u540e\u6709\u65f6\u95f4\u5c31\u8865\u4e00\u53d1\u3002","title":"C"},{"location":"rec/old/old-cf-at-sol/#d_1","text":"\u53d1\u73b0\u6253\u51fa \\(2^k\\) \u7684\u4e00\u4e2a\u8868\uff08 \\(1\\le k \\le 31\\) \uff09\u5c31\u80fd\u5f00\u59cb\u4e71\u641e\u3002 \u7136\u540e\u6839\u636e\u9898\u76ee\u8981\u6c42\u968f\u4fbf\u66b4\u529b\u5339\u914d\u4e00\u4e0b\u5c31\u884c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 int cal ( string s , string ss ){ int res = 0 ; for ( register int i = 0 ; i < ( int ) s . size () && res < ( int ) ss . size (); ++ i ){ if ( s [ i ] == ss [ res ]) ++ res ; } return res ; } int main (){ scanf ( \"%d\" , & T ); while ( T -- ){ cin >> s ; int res = 1e9 ; for ( register int i = 0 ; i < 109 ; ++ i ){ res = min ( res ,( int )( s . size () - cal ( s , a [ i ]) * 2 + a [ i ]. size ())); } printf ( \"%d \\n \" , res ); } return 0 ; } //a\u662f\u6253\u7684\u8868\u3002 \u5176\u5b9e\u6b63\u89e3\u662f\uff1a\u8d2a\u5fc3\uff0c\u786e\u5b9a\u4e86\u53d8\u6210\u7684\u6570 \\(t\\) ,\u7136\u540e\u4e00\u4f4d\u4e00\u4f4d\u5339\u914d\u3002 \u6211\u672c\u6765\u60f3\u5199\u8fd9\u4e2a\uff08 \u4f46\u6211\u611f\u89c9\u6253\u8868\u5f88\u725b\u903c\u554a\uff0c\u5c31\u6253\u4e86\uff08","title":"D"},{"location":"rec/old/old-cf-at-sol/#e_2","text":"\u5de8\u5927\u591a\u7591\u60d1\u9898\uff0c\u4e0d\u4f1a\u3002","title":"E"},{"location":"rec/old/old-cf-at-sol/#f1-f2","text":"\u5bb3\uff0c\u6211\u611f\u89c9\u8fd9\u4e2aF\u662fd2a\u6c34\u5e73\u3002 \u9ebb\u4e86\uff0cF1\u5c31\u662fF2\u7684\u7279\u6b8a\u60c5\u51b5\uff0cF2\u5927\u66b4\u641c\u52a0\u4e2a\u5c0f\u526a\u679d\u4f18\u5316\u5c31\u8fc7\u4e86\u3002 \u4f46\u662f\uff0c\u5176\u5b9e\u6709\u4e00\u70b9\u4e0d\u592a\u597d\u5199\uff08\uff09 \u9898\u76ee\u8981\u6c42\u4f60\u627e\u5230 \u6700\u5c0f\u7684 \u4e0d\u540c\u6570\u5b57\u7684\u4e2a\u6570\u4e0d\u8d85\u8fc7 \\(k\\) \u4e14\u8fd9\u4e2a\u6570\u5927\u4e8e\u7b49\u4e8e \\(n\\) \u7684\u6570\u3002 \u53d1\u73b0F2\u7684 \\(k\\) \u90fd\u53ea\u6709 \\(10\\) ,\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u5927\u66b4\u641c\uff0c\u4ece\u9ad8\u5230\u4f4e\u4f4d\u4e00\u4e2a\u4e00\u4e2a\u4f4d\u5730\u8bd5\u586b\u3002 \u6bcf\u4e00\u4f4d\u4ece \\(1 \\sim 9\\) \u5f00\u59cb\u586b\uff0c\u5f53\u9ad8\u4f4d\u5408\u6cd5\u7684\u65f6\u5019\u7acb\u9a6c\u5411\u4e0b\u586b\uff0c\u76f4\u5230\u6240\u6709\u4f4d\u90fd\u5408\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include <bits/stdc++.h> using namespace std ; const int si = 1e3 + 10 ; int cnt [ si ], ans [ si ]; int T , k , n ; string s ; bool dfs ( int now , int val , bool tag ){ if ( val > k ) return false ; if ( now == n && val <= k ){ for ( register int i = 0 ; i < n ; ++ i ){ printf ( \"%d\" , ans [ i ]); } puts ( \"\" ); return true ; } for ( register int i = tag ? s [ now ] - '0' : 0 ; i <= 9 ; ++ i ){ ++ cnt [ i ], ans [ now ] = i ; if ( cnt [ i ] == 1 ){ if ( dfs ( now + 1 , val + 1 , tag && i == s [ now ] - '0' )) return true ; } else if ( dfs ( now + 1 , val , tag && i == s [ now ] - '0' )) return true ; -- cnt [ i ]; } return false ; } signed main (){ scanf ( \"%d\" , & T ); while ( T -- ){ for ( register int i = 0 ; i <= 10 ; ++ i ){ cnt [ i ] = ans [ i ] = 0 ; } cin >> s ; scanf ( \"%d\" , & k ); n = ( int ) s . size (); if ( ! dfs ( 0 , 0 , 1 )){ printf ( \"10\" ); for ( register int i = 2 ; i < k ; ++ i ){ printf ( \"%d\" , i ); } puts ( \"\" ); } } return 0 ; }","title":"F1 &amp;&amp; F2"},{"location":"rec/old/old-cf-at-sol/#atcoder-beginning-contest-215","text":"Contest ID\uff1a abc_125 \u90e8\u5206\u8865\u9898\u6709 \u53c2 \u8003","title":"Atcoder Beginning Contest 215"},{"location":"rec/old/old-cf-at-sol/#a-b","text":"\u8bed\u6cd5\u9898\u3002 B\u7684\u8bdd\u9700\u8981\u624b\u5199 \\(\\log_2\\) \u3002 \u81ea\u5e26\u7684 \\(\\log_2\\) \u4e00\u65e6\u4e0a\u4e86 \\(2^{59}\\) \u5de6\u53f3\u5c31\u4f1a\u51fa\u4e8b\uff0c\u6240\u4ee5\u5efa\u8bae\u624b\u5199\u4e0b\u9762\u7684\uff1a 1 2 3 4 5 6 7 unsigned long long Log2EX ( unsigned long long x ) { unsigned long long i = 0 ; for ( i = 64 ; i >= 0 ; i -- ){ if ( 1 == ( x >> i ) & 0x1 ) break ; } return i ; }","title":"A &amp; B"},{"location":"rec/old/old-cf-at-sol/#c_5","text":"\u95ee\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32\u6309\u5b57\u5178\u5e8f\u7684\u7b2c \\(k\\) \u4e2a\u6392\u5217\u3002 \u6c34\u9898\uff0c\u4f7f\u7528 next_permutation \u5373\u53ef\u3002\u3001 \u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u8fd4\u56de\u4e0b\u4e00\u4e2a\u6392\u5217\uff0c\u4f46\u662f\u5982\u679c\u8981\u5168\u6392\u5217\u7684\u8bdd\u4e00\u5b9a\u8981\u5148 sort 1 2 3 4 5 6 int cnt = 0 ; sort ( s . begin (), s . end ()); //\u4e00\u5b9a\u8981sort do { ++ cnt ; if ( cnt == n ) cout << s << endl ; } while ( next_permutation ( s . begin (), s . end ())); \u5176\u5b9e\u5b8c\u5168\u53ef\u4ee5\u76f4\u63a5 break \uff0c\u4e0d\u8fc7\u6ca1\u4ec0\u4e48\u5f71\u54cd\u3002","title":"C"},{"location":"rec/old/old-cf-at-sol/#d_2","text":"\u7ed9\u4e00\u4e2a\u5e8f\u5217\uff0c\u8981\u6c42\u4f60\u627e\u51fa\u6240\u6709\u5728\u503c\u57df \\([1,m]\\) \u4e4b\u95f4\u7684 \\(k\\) \uff0c\u6ee1\u8db3 \\(k\\) \u548c\u5e8f\u5217\u91cc\u7684\u6240\u6709\u6570\u90fd\u4e92\u8d28\u3002 \u8003\u8651\u8d28\u56e0\u6570\u5206\u89e3\uff0c\u5bf9\u6bcf\u4e2a\u6570\u5206\u89e3\uff0c\u5bf9\u8d28\u6570\u6c42\u5e76\u3002 \u90a3\u4e48\u8003\u8651\u6bcf\u4e00\u4e2a \\(i\\) \uff0c\u540c\u6837\u8d28\u56e0\u6570\u5206\u89e3\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 #include <bits/stdc++.h> using namespace std ; #define int long long const int si = 1e5 + 10 ; int n , m , cnt , res ; int a [ si ], prime [ si ]; bool vis [ si ], ans [ si ]; inline int mod ( int x , int p ){ return x < 0 ? ( x + p ) - ((( x + p ) / p ) * p ) : x - (( x / p ) * p ); } int tp [ si ], pos [ si ]; void Euler ( int n ){ for ( register int i = 2 ; i <= n ; ++ i ){ if ( tp [ i ]) continue ; prime [ ++ cnt ] = i , pos [ i ] = cnt ; for ( register int j = ( i << 1 ); j <= n ; j += i ){ tp [ j ] = 1 ; } } } signed main (){ cin >> n >> m ; Euler ( m ); for ( register int i = 1 ; i <= n ; ++ i ){ cin >> a [ i ]; } for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= cnt && 1l l * prime [ j ] * prime [ j ] <= a [ i ]; ++ j ){ if ( ! mod ( a [ i ], prime [ j ])) vis [ j ] = true ; while ( ! mod ( a [ i ], prime [ j ])) a [ i ] /= prime [ j ]; } if ( a [ i ] != 1 ) vis [ pos [ a [ i ]]] = true ; } memset ( ans , true , sizeof ans ); for ( register int i = 1 ; i <= cnt ; ++ i ){ if ( vis [ i ]) for ( register int j = prime [ i ]; j <= m ; j += prime [ i ]) ans [ j ] = 0 ; } for ( register int i = 1 ; i <= m ; ++ i ){ if ( ans [ i ]) res += 1 ; } cout << res << endl ; for ( register int i = 1 ; i <= m ; ++ i ){ if ( ans [ i ]) cout << i << endl ; } return 0 ; }","title":"D"},{"location":"rec/old/old-cf-at-sol/#e_3","text":"\u9898\u9762\u5f88\u602a\uff0c\u8fd9\u91cc\u76f4\u63a5\u7ed9\u4e00\u4e2a\u7b80\u5316\u7248 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u9009\u62e9\u4e00\u4e2a\u5b50\u5e8f\u5217\u51fa\u6765\uff0c\u6ee1\u8db3\u540c\u4e00\u79cd\u5b57\u7b26\u5728\u8fd9\u4e2a\u5b50\u5e8f\u5217\u91cc\u9762\u90fd\u5728\u4e00\u6bb5\u91cc\uff0c\u6c42\u65b9\u6848\u6570\u5bf9 \\(998244353\\) \u53d6\u6a21\u3002 \u4e5f\u5c31\u662f\u4e0d\u4f1a\u6709 BBABB \u8fd9\u79cd\u60c5\u51b5\u3002 \u5b57\u7b26\u79cd\u7c7b\u5c0f\u4e8e\u5341\uff0c\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u8d85\u8fc7\u4e00\u5343\u3002 \u4e00\u4e2a\u6bd4\u8f83\u677f\u5b50\u7684\u72b6\u538b\uff1f \u8003\u573a\u6ca1\u8c03\u51fa\u6765\u3002 \u8bbe \\(f_{i,msk,t}\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u573a\u6bd4\u8d5b\uff0c\u5f53\u524d\u72b6\u6001\u662f \\(msk\\) \uff0c\u6700\u540e\u6253\u7684\u4e00\u573a\u7684\u79cd\u7c7b\u662f \\(t\\) \u3002 \u4e14\u7b2c \\(i\\) \u573a\u6bd4\u8d5b\u7684\u79cd\u7c7b\u662f \\(k\\) \u3002 \u6240\u4ee5\u6709\u8f6c\u79fb\u65b9\u7a0b\uff1a \\(\\begin{cases}f_{i,msk,t}=f_{i-1,msk,t}\\\\f_{i,msk,t}=f_{i,msk,t}+f_{i-1,msk,t},(t=k)\\\\f_{i,u\\ \\text{or}\\ 2^{k},k}+=f_{i-1,u,t}\\\\f_{i,2^{k},k}=f_{i,2^{k},k}+1\\end{cases}\\) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include <bits/stdc++.h> using namespace std ; const int Mod = 998244353 ; const int si = 1028 ; int n , f [ si ][ si ][ 10 ]; inline int mod ( int x ){ return x < 0 ? ( x + Mod ) - ((( x + Mod ) / Mod ) * Mod ) : x - (( x / Mod ) * Mod ); } string s ; int main (){ cin >> n >> s ; s = ' ' + s ; for ( register int i = 1 ; i <= n ; ++ i ){ int k = s [ i ] - 'A' ; for ( register int msk = 1 ; msk <= 1024 ; ++ msk ){ for ( register int j = 0 ; j < 10 ; ++ j ){ f [ i ][ msk ][ j ] = f [ i -1 ][ msk ][ j ]; if ( j == k ) f [ i ][ msk ][ j ] = mod ( f [ i ][ msk ][ j ] + f [ i -1 ][ msk ][ k ]); } } for ( register int msk = 1 ; msk <= 1024 ; ++ msk ){ if ( msk & ( 1 << k )) continue ; for ( register int j = 0 ; j < 10 ; ++ j ){ f [ i ][ msk | ( 1 << k )][ k ] = mod ( f [ i ][ msk | ( 1 << k )][ k ] + f [ i -1 ][ msk ][ j ]); } } f [ i ][ 1 << k ][ k ] = mod ( f [ i ][ 1 << k ][ k ] + 1 ); } int res = 0 ; for ( register int i = 1 ; i <= 1024 ; ++ i ){ for ( register int j = 0 ; j < 10 ; ++ j ){ res = mod ( f [ n ][ i ][ j ] + res ); } } cout << res << endl ; return 0 ; }","title":"E"},{"location":"rec/old/old-cf-at-sol/#f","text":"\u7ed9\u5b9a \\(n\\) \u4e2a\u70b9\uff0c\u5b9a\u4e49\u4e24\u4e2a\u70b9\u5bf9 \\((x_1,y_1),(x_2,y_2)\\) \u7684\u8ddd\u79bb\u4e3a \\(\\min (|x_1-x_2|,|y_1-y_2|)\\) \u3002 \u6c42\u4efb\u610f\u4e24\u4e2a\u70b9\u5bf9\u4e4b\u95f4\u8ddd\u79bb\u7684\u6700\u5927\u503c\u3002 \\(n\\) \u5728 \\(2\\times 10^5\\) \u7ea7\u522b\uff0c\u5750\u6807\u90fd\u662f \\(10^9\\) \u7ea7\u522b\u3002 \u7b2c\u4e00\u53cd\u5e94\u662f\u76f4\u63a5\u66b4\u529b\uff0c\u7136\u540e\u53d1\u73b0\u662f \\(\\text{O}(n^2)\\) \u7ea7\u522b\uff0c\u7206\u70b8\u3002 \u7136\u540e\u6709\u4e00\u4e2a\u5206\u522b\u4ece \\(x,y\\) \u8f74\u5927\u529b\u7ef4\u62a4\u533a\u95f4\u4fe1\u606f\u7684\u505a\u6cd5\uff0c\u7136\u540e\u53d1\u73b0\u4e0d\u53ef\u505a\u3002 \u4e8e\u662f\u5728\u6781\u5ea6\u7edd\u671b\u7684\u65f6\u5019\uff0c\u6211\u770b\u89c1\u4e86\u4e8c\u5206\u3002 \u6211\u89c9\u5f97\u8fd9\u4e2a\u4e1c\u897f\u4e5f\u8bb8\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5224\u5b9a\u6027\u95ee\u9898\u3002 \u5047\u8bbe \\(\\min (|x_1-x_2|,|y_1-y_2|) \\ge k\\) \u90a3\u4e48\u5f88\u660e\u663e\uff0c \\(|x_1-x_2| \\ge k ,|y_1-y_2| \\ge k\\) \u7136\u540e\u8fd9\u4e1c\u897f\u5f88\u660e\u663e\u5177\u6709\u5355\u8c03\u6027\uff0c\u73b0\u5728\u8003\u8651\u600e\u4e48\u4e8c\u5206 \\(k\\) \u3002 \u9996\u5148\u4f60\u5148\u5bf9 \\(x\\) \u5347\u5e8f\u6392\u5e8f\u65b9\u4fbf\u5904\u7406\u3002 \u5982\u679c\u5728 \\(k\\) \u53ef\u884c\u7684\u524d\u63d0\u4e0b \u7684\u8bdd\uff0c\u5c31\u5047\u8bbe\u6709\u4e00\u4e2a\u70b9 \\((x_i,y_i)\\) \u3002 \u7136\u540e\u518d\u5047\u8bbe \\(y\\) \u6700\u5c0f\u7684\u70b9\u662f \\((x.y)\\) \uff08\u8fd9\u91cc\u7a0d\u5fae\u8d2a\u5fc3\u4e86\u4e00\u4e0b\uff09\u3002 \u7136\u540e\u5982\u679c\u8bf4 \\(x_i-x \\ge k\\) \u4e86\uff0c\u90a3\u4e48\u5f88\u660e\u663e\uff0c\u56e0\u4e3a \\(k\\) \u662f\u53ef\u884c\u7684\uff0c\u6240\u4ee5 \\(y_i-y \\ge k\\) \u4e5f\u5c31\u662f\u6709\uff1a \\(A\\begin{cases}x_i-k \\ge x\\\\y_i-k \\ge y\\end{cases}\\) \u4f46\u662f\u4f60\u53d1\u73b0\u53ef\u80fd\u4f1a\u6709\u8fd9\u79cd\u60c5\u51b5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 y \\ | \u00b7(xx,ymax) | | | | | | \u00b7(x_i,y_i) | | \u00b7(x,ymin) ---------------------------\\x \u4e5f\u5c31\u662f\u8bf4 \\(y\\) \u7684\u6700\u5927\u503c\u53ef\u80fd\u6bd4 \\(y\\) \u7684\u6700\u5c0f\u503c\u505a\u51fa\u7684\u8d21\u732e\u66f4\u5927\uff0c\u6240\u4ee5\u6700\u5927\u7684 \\(y\\) \u4e5f\u8981\u8dd1\u4e00\u904d\u3002 \u540c\u7406\u5c31\u662f \\(B \\begin{cases}x_i+k \\le x\\\\y_i+k \\le y\\end{cases}\\) \u6240\u4ee5\u6211\u4eec\u5728\u4e8c\u5206\u7684\u91cc\u9762\u53bbcheck \\(A,B\\) \u8fd9\u4e24\u4e2a\u6761\u4ef6\u662f\u5426\u6709\u81f3\u5c11\u4e00\u4e2a\u6210\u7acb\u5c31\u53ef\u4ee5\u4e86\u3002 \u7136\u540e\u5177\u4f53\u6765\u8bf4\u5c31\u662f\u6309\u7167 \\(x\\) \u6392\u4e00\u4e2a\u5e8f\uff0c\u7136\u540e\u8fdb\u884c\u5206\u6bb5\u53cc\u6307\u9488\u3002 \u4ee5 \\(i\\) \u4e3a\u53f3\u7aef\u70b9\uff0c \\(j\\) \u4e3a\u5de6\u7aef\u70b9\uff0c\u90a3\u4e48\u4ec0\u4e48\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u53f3\u79fb\u5de6\u7aef\u70b9\uff1f \u5c31\u662f \\(j+1\\) \u8fd9\u4e2a\u70b9\uff0c\u4ed6\u7684\u6a2a\u5750\u6807\u548c \\(i\\) \u7684\u5dee\u503c\u5927\u4e8e\u7b49\u4e8e\u8fd9\u4e2a \\(k\\) \u3002 \u90a3\u4e48\u663e\u7136\u5982\u679c\u6211\u5728 \\(i\\) \u5904\u505a\u5230\u4e86 \\(j\\) \uff0c\u90a3\u4e48\u6240\u6709 \\(i\\) \u53f3\u8fb9\u7684\u70b9\u548c \\(j\\) \u7684\u7ec4\u5408\u90fd\u662f\u5408\u6cd5\u7684\uff0c\u6240\u4ee5\u8fd9\u4e2a \\(j\\) \u4ed6\u5c31\u6c38\u8fdc\u662f\u5408\u6cd5\u7684\u3002 \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8bb0\u5f55\u4e00\u4e0b\u5df2\u505a\u5230\u7684 \\(j\\) \u4ed6\u7684\u7eb5\u5750\u6807\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff0c\u548c\u6bcf\u4e00\u4e2a\u8fdb\u53bb\u7684 \\(i\\) \u7684\u7eb5\u5750\u6807\u51cf\u4e00\u51cf\uff0c \u5982\u679c\u7eb5\u5750\u6807\u4e4b\u5dee\u8981\u5927\u4e8e\u7b49\u4e8e \\(k\\) \uff0c\u800c\u6a2a\u5750\u6807\u6211\u4eec\u5df2\u7ecf\u8bc1\u660e\u4e86\u4ed6\u7684\u5dee\u503c\u5fc5\u5b9a\u5927\u4e8e\u7b49\u4e8e \\(k\\) \uff0c\u90a3\u4e48\u8fd9\u4e2a \\(k\\) \u5c31\u80af\u5b9a\u662f\u6210\u7acb\u7684\u3002 \u4f46\u662f\u8fd9\u4e2a\u9898\uff0c\u5982\u679c\u53ea\u904d\u5386\u4e00\u6b21\u90a3\u4e48\u7b54\u6848\u53ef\u80fd\u4f1a\u88ab\u6f0f\u6389\uff0c\u6240\u4ee5\u8fd8\u5f97\u4ece\u53f3\u5f80\u5de6\u904d\u5386\u4e00\u904d\uff0c\u6b64\u65f6 \\(j\\) \u662f\u53f3\u7aef\u70b9\uff0c \\(i\\) \u662f\u5de6\u7aef\u70b9\u3002 \u56e0\u4e3a\u4e0d\u53ef\u6297\u529b\u56e0\u7d20\u8ba9\u6211\u603b\u662f\u5947\u602a\u7684WA\uff0c\u6240\u4ee5\u5bf9\u7740tutorial \u6539\u4e86\u4e00\u4e9b\u5730\u65b9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 #include <bits/stdc++.h> using namespace std ; #define xi first #define yi second int n ; int main (){ cin >> n ; vector < pair < int , int > > v ( n ); for ( register int i = 0 ; i < n ; ++ i ){ cin >> v [ i ]. xi >> v [ i ]. yi ; } sort ( v . begin (), v . end ()); int l = 0 , r = 1e9 + 7 ; while ( r - l > 1 ){ int mid = ( l + r ) >> 1 ; queue < pair < int , int > > q ; bool f = false ; int mi = 1e9 + 7 , mx = 0 ; for ( auto p : v ){ while ( ! q . empty ()){ int x = q . front (). xi , y = q . front (). yi ; if ( x > p . xi - mid ) break ; mi = min ( mi , y ), mx = max ( mx , y ); q . pop (); } if ( mi <= p . yi - mid || mx >= p . yi + mid ) f = true ; q . push ( p ); } if ( f ) l = mid ; else r = mid ; } cout << l << endl ; return 0 ; } ```` ### G & H > \u4e0d\u4f1a ## Nowcoder PJ 28 Contest ID \uff1a` 11235 ` \u51fa\u9898\u4eba\u662fFST\u7fa4\u7fa4\u53cb \uff1a CSP - Sept ~~~ \u5f88\u6709\u611f\u89c9 \uff0c \u5f00\u573a\u4e00\u4e2a\u5c0f\u65f6\u53ea\u8fc7\u4e86A \uff0c \u7136\u540e\u6700\u540e\u534a\u5c0f\u65f6\u76f4\u63a5AK \uff0c \u523a\u6fc0 \u3002 \u53e6\u5916\u725b\u5ba2\u7684\u5c0f\u767d\u6708\u8d5b36\u5c31\u4e0d\u5199\u4e86 \uff0c \u53ea\u6709E\u611f\u89c9\u6bd4\u8f83\u6709\u4ef7\u503c \u3002 ### A \u53d1\u73b0\u8fd9\u4e2a\u79fb\u52a8\u662f\u6709\u5468\u671f\u6027\u7684 \uff0c \u800c\u4e14\u79fb\u52a8\u6b21\u6570\u662f $10 ^ { 18 } $ \u3002 \u6240\u4ee5\u5c31\u662f\u4e2a\u8bc8\u9a97\u9898 \uff08 \u76f4\u63a5\u628a\u79fb\u52a8\u6b21\u6570\u6a21\u4e0a\u5b57\u7b26\u4e32\u957f\u5ea6 \uff0c \u7136\u540e\u4ece\u8fd9\u4e2a\u4f59\u6570 $ + 1 $ \u4f4d\u5f00\u59cb\u8f93\u51fa \uff0c \u7136\u540e\u5728\u4ece\u7b2c $1$ \u4f4d\u4e00\u76f4\u8f93\u51fa\u5230\u4f59\u6570\u8fd9\u4e00\u4f4d\u5373\u53ef \u3002 1 minAC \uff08 ``` cpp #include <bits/stdc++.h> using namespace std ; #define int long long string s ; int n , x ; signed main (){ cin >> n >> x ; cin >> s ; s = ' ' + s ; int r = x % n ; for ( int i = r + 1 ; i <= n ; ++ i ) cout << s [ i ]; for ( int i = 1 ; i <= r ; ++ i ) cout << s [ i ]; }","title":"F"},{"location":"rec/old/old-cf-at-sol/#b_4","text":"\u6700\u540e\u624dAC\u7684\u9898\u3002 \u8fd9\u4e2a\u662f\u5728\u77e9\u9635\u4e0a\u6c42 \\(y\\) \u8f74\u65b9\u5411\u7684 \\(\\texttt{LIS}\\) \uff0c\u7136\u540e\u77e9\u9635\u6700\u5927 \\(5\\times10^3 \\times 10^3\\) \u542c\u4f55\u795e\u8bf4\u6709\u4e00\u79cd \\(\\text{O}(NK)\\) \u7684\u505a\u6cd5\uff0c\u4f46\u662f\u6211\u4e0d\u4f1a\u3002 \u8003\u8651\u8bbe \\(f_i\\) \u8868\u793a\u957f\u5ea6\u4e3a \\(i\\) \u7684 \\(\\texttt{LIS}\\) \u7684\u6700\u5c0f\u7ed3\u5c3e\uff0c\u8fd9\u6837\u5b50\u65b9\u4fbf\u53bb\u8f6c\u79fb\u3002 \u7136\u540e\u53d1\u73b0\u8fd9\u5c31\u662f \\(\\text{O} (n \\log n)\\) \u6c42 \\(\\texttt{LIS}\\) \u7684\u72b6\u6001\u3002 \u6240\u4ee5\u6211\u4eec\u8003\u8651\u76f4\u63a5\u591a\u5faa\u73af\u4e00\u6b21\u7136\u540e\u5957\u4e0a\u677f\u5b50\u3002 \u7136\u540e\u4f60\u53d1\u73b0\u5728 1 2 1 5 1 2 3 4 5 \u7684\u8fd9\u4e2a\u6570\u636e\u4e0a\u4f60\u4f1a\u8f93\u51fa \\(5\\) \u3002 \u4e3a\u5565\u90a3\uff1f \u56e0\u4e3a\u6211\u4eec\u7684\u505a\u6cd5\u4f1a\u5bfc\u81f4\u91cd\u590d\u8986\u76d6\u3002 \u5c31\u548c01\u80cc\u5305\u4e00\u4e2a\u9053\u7406\uff0c\u6240\u4ee5 reverse \u4e00\u4e0b\u5c31\u597d\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #include <bits/stdc++.h> using namespace std ; #define int long long const int si = 1e3 + 10 ; int k , n ; #define pb push_back vector < int > v [ si ]; int f [ si ]; int nlogn_lis (){ int len = 0 ; f [ 0 ] = -1 ; for ( int i = 1 ; i <= n ; ++ i ){ for ( int j = 0 ; j < ( int ) v [ i ]. size (); ++ j ){ if ( v [ i ][ j ] > f [ len ]) f [ ++ len ] = v [ i ][ j ]; else * lower_bound ( f , f + len , v [ i ][ j ]) = v [ i ][ j ]; } } return len ; } signed main (){ scanf ( \"%lld%lld\" , & k , & n ); for ( int i = 1 ; i <= n ; ++ i ){ for ( int j = 1 , q ; j <= k ; ++ j ){ scanf ( \"%lld\" , & q ); v [ i ]. pb ( q ); } reverse ( v [ i ]. begin (), v [ i ]. end ()); } printf ( \"%lld\" , nlogn_lis ()); }","title":"B"},{"location":"rec/old/old-cf-at-sol/#c_6","text":"\u5927\u539f\u9898\uff0c\u6d1b\u8c37\u4e0a\u7684\u201c\u56fe\u7684\u904d\u5386\u201d\u5c31\u662f\u57fa\u672c\u4e00\u6837\u7684\u3002 \u6211\u672c\u6765\u5199\u7684\u662f\u7f29\u70b9+DP\uff0c\u4f46\u662f\u6302\u4e86\u597d\u591a\u53d1\u3002 \u7a81\u7136\u60f3\u8d77\u53ef\u4ee5\u201c\u6b63\u96be\u5219\u53cd\u201d\u7684\u601d\u60f3\u505a\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9\u80fd\u5230\u8fbe\u7684\u70b9\uff0c \u8bb0\u5f55\u53ef\u4ee5\u5230\u8fd9\u4e2a\u70b9\u6240\u6709\u70b9\u7684\u7f16\u53f7\u7684\u6700\u5c0f\u503c\u3002 \u7136\u540e\u5efa\u53cd\u56fe\u8dd1\u4e00\u904d\u5c31\u884c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include <bits/stdc++.h> using namespace std ; const int si = 1e5 + 10 ; int n , m , f [ si ]; vector < int > g [ si ]; vector < int > v ; void dfs ( int x , int d ){ if ( f [ x ]) return ; f [ x ] = d ; for ( int i = 0 ; i < g [ x ]. size (); i ++ ) dfs ( g [ x ][ i ], d ); } int main (){ scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 , u , vv ; i <= m ; i ++ ){ scanf ( \"%d%d\" , & u , & vv ); g [ vv ]. push_back ( u ); } for ( int i = 1 ; i <= n ; i ++ ) dfs ( i , i ); for ( int i = 1 ; i <= n ; i ++ ) v . push_back ( f [ i ]); sort ( v . begin (), v . end ()); v . erase ( unique ( v . begin (), v . end ()), v . end ()); for ( int i = 0 ; i < ( int ) v . size (); ++ i ) cout << v [ i ] << \" \" ; return 0 ; }","title":"C"},{"location":"rec/old/old-cf-at-sol/#d_3","text":"\u5f88\u7cbe\u5999\u7684DP\u3002 \u53d1\u73b0\u6b63\u7740\u505a\u5f88\u9ebb\u70e6\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u5e8f\u5217\u5012\u8fc7\u6765\uff0c\u53d1\u73b0\u8fd9\u4e1c\u897f\u5f88\u5e73\u51e1\u3002 \u8bbe \\(f_i\\) \u8868\u793a\u5012\u8fc7\u6765\u4e4b\u540e\u4ece \\([1,i]\\) \u8fd9\u4e2a\u533a\u95f4\u5168\u90e8\u5403\u5b8c\u7684\u6700\u5927\u503c\u3002 \u7136\u540e\u8003\u8651 \\(a_i\\) \uff0c\u4ed6\u4e0d\u662f\u8fd9\u4e2a\u533a\u95f4\u6700\u540e\u4e00\u4e2a\u5403\u7684\u5c31\u662f\u7b2c\u4e00\u4e2a\u5403\u7684\u3002 \u6240\u4ee5\u5904\u7406\u51fa \\(\\Delta\\) \u7684\u524d\u7f00\u548c\uff0c\u6240\u4ee5\u5206\u4e24\u79cd\u60c5\u51b5\u8f6c\u79fb\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #include <bits/stdc++.h> using namespace std ; #define int long long const int si = 2e5 + 10 ; int n ; int a [ si ], delta [ si ]; int f [ si ], sum [ si ]; inline int cal ( int pos ){ return (( pos -1 ) * delta [ pos ]) + a [ pos ]; } signed main (){ scanf ( \"%lld\" , & n ); for ( int i = n ; i >= 1 ; -- i ){ scanf ( \"%lld\" , & a [ i ]); } for ( int i = n ; i >= 1 ; -- i ){ scanf ( \"%lld\" , & delta [ i ]); } for ( int i = 1 ; i <= n ; ++ i ){ sum [ i ] = sum [ i -1 ] + delta [ i ], f [ i ] = -10737418190000000 ; } f [ 1 ] = a [ 1 ]; for ( int i = 2 ; i <= n ; ++ i ){ f [ i ] = max ( f [ i -1 ] + sum [ i -1 ] + a [ i ], f [ i -1 ] + cal ( i )); } return printf ( \"%lld\" , f [ n ]), 0 ; }","title":"D"},{"location":"rec/old/old-cf-at-sol/#atcoder-beginning-contest-216","text":"Contest ID: abc_216 \u5f00\u5b66\u524d\u4e00\u5929\u665a\u4e0a\u6709\u8fde\u7740\u7684ABC\u548c\u4e00\u573aCF\uff0c\u53ef\u4ee5\u4e0a\u5927\u5206\u529b\uff01\u3002 \u56e0\u4e3a\u660e\u5929\u5c31\u5f00\u5b66\u4e86\u6240\u4ee5\u5c31\u5148\u5495\u8fd9\u4e0d\u5199\u3002 \u5230\u65f6\u5019\u8bfe\u8868\u51fa\u6765\u4e4b\u540e\u627e\u7ade\u8d5b\u8bfe\u65f6\u95f4\u4e0a\u6765\u673a\u623f\u5199\u3002 G \u662f\u4e2a\u88f8\u7684\u5dee\u5206\u7ea6\u675f\uff0c\u53ef\u60dc\u6ca1\u5199\uff0c\u4e0d\u7136\u5c31\u53ea\u5dee H \u4e86\u3002 \u6700\u8fd1\u6253\u7684\u6700\u597d\u7684\u4e00\u6b21ABC\uff08\u53ef\u80fd\u662f\u6c34\u4e86\uff1f\uff09","title":"Atcoder Beginning Contest 216"},{"location":"rec/old/old-cf-at-sol/#a-b_1","text":"\u90fd\u662f\u8bed\u6cd5\u9898\u3002 A\u7684\u8bdd\u7279\u5224\u4e00\u4e0b\uff0cB\u7684\u8bdd\u6574\u4e2a map<pair<string,string>,bool> \u5c31\u8fc7\u4e86","title":"A &amp; B"},{"location":"rec/old/old-cf-at-sol/#c_7","text":"\u5f88\u5999\uff0c\u4f60\u6709 \\(120\\) \u6b21\u64cd\u4f5c\uff0c\u53ef\u4ee5\u628a\u7ed9\u5b9a\u7684\u503c\u52a0\u4e00\uff0c\u6216\u8005\u628a\u503c\u4e582. \u95ee\u6784\u9020\u4e00\u4e2a \\(2^{64}\\) \u4ee5\u5185\u7684\u6574\u6570\u7684\u65b9\u6848\u3002 \u53d1\u73b0 \\(120\\) \u6b21\u5b8c\u5168\u591f\u4e86\u3002 \\(120\\) \u4ee5\u5185\u7684\u8bdd\u5c31\u76f4\u63a5\u4e00\u76f4\u52a0\u4e00\u5c31\u53ef\u4ee5\u3002 \u53cd\u4e4b\u5982\u679c \\(n\\) \u662f\u5947\u6570\uff0c\u51cf\u4e00\u7136\u540e\u4e00\u76f4\u9664\u4e8c\uff0c\u7136\u540e\u5982\u679c\u53c8\u662f\u5947\u6570\u90a3\u5c31\u91cd\u590d\u3002 \u76f4\u5230 \\(n\\) \u4e3a \\(0\\) \u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <bits/stdc++.h> using namespace std ; long long n ; int main (){ scanf ( \"%lld\" , & n ); if ( n <= 120 ){ for ( register int i = 1 ; i <= n ; ++ i ){ putchar ( 'A' ); } return 0 ; } else { string s ; bool f = false ; if ( n & 1 ) n -= 1 , f = true ; while ( n ){ if ( n % 2 == 0 ) n /= 2 , s = 'B' + s ; if ( n & 1 ) n -= 1 , s = 'A' + s ; } if ( f ) s += 'A' ; cout << s << endl ; } }","title":"C"},{"location":"rec/old/old-cf-at-sol/#d_4","text":"D \u7684\u8bdd\u5c31\u76f4\u63a5\u5f00\u4e00\u4e2a deque \u548c\u4e00\u4e2a queue \u6a21\u62df\u5c31\u53ef\u4ee5\u4e86\u3002 \u5f53\u7136\u4f60\u53ef\u4ee5\u5229\u7528\u62d3\u6251\u7684\u601d\u60f3\u76f4\u63a5\u5efa\u56fe\u7136\u540e\u8dd1\u4e00\u4e2a\u62d3\u6251\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 #define int long long int n , m , sz [ MAXN ], num ; pair < int , int > pos [ MAXN ]; deque < int > a [ MAXN ]; queue < int > q ; void del ( int x ){ a [ x ]. pop_front (); if ( a [ x ]. size ()){ int u = a [ x ]. front (); if ( pos [ u ]. fr == 0 ) pos [ u ]. fr = x ; else pos [ u ]. se = x , q . push ( u ), num ++ ; } } signed main (){ cin >> n >> m ; for ( register int i = 1 ; i <= m ; ++ i ){ cin >> sz [ i ]; for ( register int j = 1 ; j <= sz [ i ]; ++ j ){ int tmp ; cin >> tmp ; a [ i ]. pb ( tmp ); } } for ( register int i = 1 ; i <= m ; ++ i ){ int u = a [ i ][ 0 ]; if ( pos [ u ]. fr == 0 ) pos [ u ]. fr = i ; else pos [ u ]. se = i , q . push ( u ), num ++ ; } while ( ! q . empty ()){ int u = q . front (); q . pop (); del ( pos [ u ]. fr ), del ( pos [ u ]. se ); } if ( num == n ) puts ( \"Yes\" ); else puts ( \"No\" ); return 0 ; }","title":"D"},{"location":"rec/old/old-cf-at-sol/#e_4","text":"\u5927\u6bd2\u7624\u8d2a\u5fc3\uff0c\u5efa\u4e00\u4e2a\u5927\u6839\u5806\u7136\u540e\u628a\u6240\u6709\u4e1c\u897f\u4e22\u8fdb\u53bb\u7ef4\u62a4\u3002 \u7136\u540e\u6bcf\u6b21\u628a\u5806\u9876 \\(top\\) \u4e4b\u540e\uff0c\u628a \\(top-1\\) \u6254\u8fdb\u53bb\u5c31\u53ef\u4ee5\u3002 \u8fd9\u6837\u5b50\u8fd8\u4e0d\u592a\u591f\u3002\u9700\u8981\u7a0d\u5fae\u4f18\u5316\u4e00\u4e0b\uff0c\u5c31\u81ea\u5df1\u7406\u89e3\u5427\u3002 \u8fd9\u4e2a\u4e1c\u897f\u6211\u6ca1\u505a\u51fa\u6765\uff0c\u90a3\u4efd\u4ee3\u7801\u662f\u6709\u4e2a\u4eba\u8981\u6211\u5e2e\u4ed6\u5403\u7f5a\u65f6\u4ea4\u7684\uff08","title":"E"},{"location":"rec/old/old-cf-at-sol/#f_1","text":"DP\uff0c\u9996\u5148\u628a \\(a\\) \u964d\u5e8f\u6392\u4e00\u904d\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(j \\in [1,n]\\) \uff0c\u5047\u8bbe \\(f_j\\) \u8868\u793a\u9009\u4e0a \\(a_j\\) \uff0c\u4e0d\u7ba1\u5176\u4ed6\u7684\u600e\u4e48\u9009\u6240\u5f97\u5230\u7684\u89e3\u3002 \u7136\u540e\u4f60\u53d1\u73b0 \\(a_j\\) \u8981\u6ee1\u8db3 \\(\\ge b_k + \\sum\\limits_{i \\subset S} b_i,S=\\{k+1,k+2,...,n\\}\\) \u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u80cc\u5305\uff0c\u4e0d\u8fc7\u9700\u8981\u524d\u7f00\u548c\u4f18\u5316\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 const int limit = 5000 ; sort ( q + 1 , q + 1 + n ); f [ 0 ][ 0 ] = 1 ; for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 0 ; j <= limit ; ++ j ){ f [ i ][ j ] = f [ i -1 ][ j ]; } for ( register int j = q [ i ]. b ; j <= limit ; ++ j ){ f [ i ][ j ] += f [ i -1 ][ j - q [ i ]. b ], mod ( f [ i ][ j ]); } } for ( register int i = 0 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= limit ; ++ j ){ f [ i ][ j ] += f [ i ][ j -1 ], mod ( f [ i ][ j ]); } } for ( register int i = 1 ; i <= n ; ++ i ){ if ( q [ i ]. a < q [ i ]. b ) continue ; ans += f [ i -1 ][ q [ i ]. a - q [ i ]. b ], mod ( ans ); } printf ( \"%lld \\n \" , ans );","title":"F"},{"location":"rec/old/old-cf-at-sol/#g","text":"\u88f8\u7684\u5dee\u5206\u7ea6\u675f\u3002 \u4f46\u662f\u5199\u6302\u4e86\u545c\u545c\u545c Reference: https://www.cnblogs.com/registergen/p/abc216_solution.html","title":"G"},{"location":"rec/old/old-cf-at-sol/#deltix-round-summer-2021-cf1556","text":"Contest ID: CF1556 \u8fd9\u573a\u6781\u5ea6\u6bd2\u7624\u554a\u554a\u554a\u554a\uff0cD\u51fa\u4e86\u4e2a\u4ea4\u4e92+\u5927\u6bd2\u7624\u6784\u9020\u3002 \u7136\u540eE\u6211\u5f00\u59cb\u5148\u5199\u7684\u66b4\u529b\uff0c\u7136\u540e\u53d1\u73b0\u8981\u7528RMQ\u4f18\u5316\uff0c\u4e8e\u662f\u5199\u4e86\u4e00\u4e2aST\u8868\u3002 \u7136\u540e\u8d5b\u540eCFM\u7ed9\u4e86\u6211\u4e00\u7ec4\u6570\u636e\u628a\u6211\u7684\u9519\u8bef\u505a\u6cd5\u53c9\u6389\u4e86\u3002 \u4f46\u662f\u5e76\u6ca1\u6709\u5728ST\u91cc\u9762\u51fa\u73b0ovo\uff0c\u6211\u5f53\u65f6\u4ee5\u4e3a\u8981FST\u4e86\uff0c\u4e8e\u662f\u6781\u5ea6\u751f\u6c14\u3002 \u65e9\u4e0a\u8d77\u6765\u53d1\u73b0\u5374\u4e0a\u5206\u4e86\uff0c\u56e0\u4e3aE\u7684systest\u592a\u5f31\u4e86\uff01 \u7136\u540e\u8d81\u8d70\u4e4b\u524d\u6539\u4e86\u4e00\u4e0b\uff0c\u628a\u9519\u8bef\u505a\u6cd5\u6539\u5bf9\u4e86\uff0c\u5f88\u6709\u611f\u89c9\uff01 \u6bd4\u8f83\u53ef\u60dc\u7684\u5c31\u662f\u6ca1\u4e0aCM\uff0c\u545c\u545c\uff0c\u8981\u662fD\u4ea4\u4e92\u90e8\u5206\u4e0d\u5199\u6302\u5c31\u4e0aCM\u4e86\u545c\u545c\u3002 \u9898\u89e3\u7684\u8bdd\u4e4b\u540e\u518d\u6765\u5199\uff0c\u4eca\u5929\u5f00\u5b66\u4e86\u6ca1\u65f6\u95f4\u545c\u545c\u545c\u3002 \uff08\u542c\u8bf4 tourist \u53ea\u6709rk22\uff0c\u6bd2\u7624\uff01\uff08\u5176\u5b9e\u662f\u56e0\u4e3a\u4ed6\u6700\u540e\u9762\u4e24\u9053\u4f3c\u4e4e\u56e0\u4e3a\u4ec0\u4e48\u6ca1\u505a\uff09 \u8fd9\u4e0b\u9762\u7a7a\u7740\u7684\u90fd\u662f\u6ca1\u65f6\u95f4\u5199\u7684\uff08ABC\u7684\u90fd\u662f\u5230\u5b66\u6821\u4e4b\u540e\u6e9c\u53bb\u673a\u623f\u5199\u7684\uff09","title":"Deltix Round, Summer 2021 (CF1556)"},{"location":"rec/old/old-cf-at-sol/#a_5","text":"\u731c\u4e86\u4e2a\u7ed3\u8bba\u8fc7\u4e86\u3002 \u53d1\u73b0\u5982\u679c \\(c,d\\) \u7684\u5947\u5076\u6027\u4e0d\u540c\uff0c\u80af\u5b9a\u4e0d\u80fd\u6784\u9020\u3002 \u6392\u9664\u65e0\u89e3\u4e4b\u540e\uff0c\u5982\u679c\u5168\u662f \\(0\\) \u5c31\u4e0d\u7528\u6784\u9020\uff0c\u7136\u540e \\(c=d\\) \u5c31\u53ea\u9700\u8981\u4e00\u6b65\u3002 \u5982\u679c \\(c \\not= d\\) \u7684\u8bdd\uff0c\u7b2c\u4e00\u6b65\u6784\u9020 \\([c,d]\\) \u8fd9\u4e2a\u533a\u95f4\u7684\u4e2d\u4f4d\u6570\uff0c\u7136\u540e\u518d\u5411\u4e0a\u5411\u4e0b\u6784\u9020\u4e00\u6b21\u5373\u53ef\u3002","title":"A"},{"location":"rec/old/old-cf-at-sol/#bcde","text":"\u5495\u7740\uff0c\u4e0d\u60f3\u5199\u4e86\u3002","title":"BCDE"},{"location":"rec/old/old-cf-at-sol/#fgh","text":"\u56e0\u4e3a\u662f div1+div2,\u6240\u4ee5\u540e\u4e09\u9898\u73b0\u5728\u771f\u7684\u4e0d\u4f1aqwq","title":"FGH..."},{"location":"rec/old/old-cf-at-sol/#codeforces-round-747","text":"Contest ID : 1594 \u5f88\u4e45\u6ca1\u6253\u4e86\uff0c\u73b0\u5728\u505c\u8bfe\u671f\u95f4\u6709\u65f6\u95f4\u90a3\u4e48\u5c31\u6253\u4e86\u4e00\u4e0b\u3002 \u4f46\u662f\u624b\u611f\u5f88\u4e0d\u597d\uff0cA \u50bb\u903c\u4e86\uff0cB\u50bb\u903c\u4e86\uff0cE1\u50bb\u903c\u4e86\u3002 \u540c\u673a\u623f\u7b2c\u4e00\u6b21\u6253\u7684\u90fd\u540a\u6253\u6211\u3002 \u53ea\u6709 ACD /kk","title":"Codeforces Round #747"},{"location":"rec/old/old-cf-at-sol/#a_6","text":"\u6784\u9020\u4e00\u4e2a\u533a\u95f4 \\(l,r\\) \u4f7f\u5f97\u533a\u95f4\u548c\u4e3a \\(n\\) \u3002 \u56e0\u4e3a\u53ef\u4ee5\u662f\u8d1f\u6570\uff0c\u6240\u4ee5\u76f4\u63a5 \\([1-n,n]\\) \u3002","title":"A"},{"location":"rec/old/old-cf-at-sol/#b_5","text":"\u5927\u7b80\u5355\u9898\uff0c\u50bb\u903c\u4e86\u3002 \u95ee\u4f60\u7531 \\(n\\) \u7684\u6574\u6570\u6b21\u5e42\u7ec4\u6210\u6570\u7684\u7b2c \\(k\\) \u5927\u3002 \u53ef\u4ee5\u7528\u4e8c\u8fdb\u5236\u505a\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include <bits/stdc++.h> using namespace std ; #define int long long int T ; int n , k ; const int p = 1e9 + 7 ; signed main (){ scanf ( \"%lld\" , & T ); while ( T -- ){ int res = 0 ; int delta = 1 ; scanf ( \"%lld%lld\" , & n , & k ); for ( register int j = 1 ; j <= 32 ; ++ j ){ if ( k & ( 1 << ( j -1 ))) res = ( res + delta ) % p ; delta *= n , delta %= p ; } printf ( \"%lld \\n \" , res ); } return 0 ; }","title":"B"},{"location":"rec/old/old-cf-at-sol/#c_8","text":"\u8981\u6c42\u4f60\u628a\u5b57\u7b26\u4e32\u6240\u6709\u4f4d\u53d8\u6210\u7ed9\u5b9a\u7684\u5b57\u7b26 \\(ch\\) \u6bcf\u6b21\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u6570 \\(x\\) \uff0c\u5bf9\u4e8e\u6240\u6709\u7684 \\(s[i],x \\not| \\ \\ i\\) \uff0c\u4ee4\u4ed6\u53d8\u6210 \\(ch\\) \u3002 \u95ee\u6700\u5c0f\u64cd\u4f5c\u6b21\u6570\u3002 \u53d1\u73b0\u6700\u591a\u53ea\u9700\u8981\u4e24\u6b21 : \\(x=n-1.x=n\\) \u3002 \u7136\u540e\u4e0d\u7528\u52a8\u4e86\u76f4\u63a5\u7279\u5224 \\(0\\) \u3002 \u7136\u540e\u8003\u8651\u7528 \\(i\\times j\\) \u8fd9\u6837\u7c7b\u4f3c\u6b27\u62c9\u7b5b\u7684\u529e\u6cd5\u53bb\u5224\u65ad\u662f\u5426\u80fd\u4e00\u6b21\u5e72\u5b8c\u5373\u53ef\u3002","title":"C"},{"location":"rec/old/old-cf-at-sol/#d_5","text":"\u662f\u4e2a\u5e76\u67e5\u96c6\uff0c\u6709\u70b9\u50cf\u98df\u7269\u94fe\u90a3\u4e00\u9898\u3002 \u5185\u9b3c\u53ea\u4f1a\u8bf4\u5047\u8bdd\uff0c\u597d\u4eba\u53ea\u4f1a\u8bf4\u771f\u8bdd\u3002 \u7136\u540e\u6bcf\u4e2a\u4eba\u4f1a\u6307\u8ba4\u8c01\u662f\u4ec0\u4e48\u8eab\u4efd\u3002 \u95ee\u4f60\u6700\u591a\u6709\u591a\u5c11\u5185\u9b3c\u3002 \u8003\u8651\u5206\u7c7b\u8ba8\u8bba\u3002 \u5982\u679c A \u8bf4 B \u662f\u597d\u4eba\uff0c\u90a3\u4e48 A \u548c B \u7684\u8eab\u4efd\u80af\u5b9a\u662f\u4e00\u6837\u7684\u3002 \u56e0\u4e3a\u5982\u679c A \u662f\u597d\u4eba\uff0c\u8bf4\u771f\u8bdd\uff0c\u90a3\u4e48 B \u4e5f\u662f\u597d\u4eba\u3002 \u53cd\u4e4b A \u662f\u5185\u9b3c \uff0c\u8bf4\u5047\u8bdd\uff0c\u90a3\u4e48 B \u4e5f\u662f\u5185\u9b3c\u3002 \u5982\u679c A \u8bf4 B \u662f\u5185\u9b3c\uff0c\u90a3\u4e48\u4e5f\u6709\u4e24\u79cd\u60c5\u51b5\u3002 \u5982\u679c A \u662f\u597d\u4eba\uff0c\u90a3\u4e48 B \u5c31\u662f\u5185\u9b3c\u3002 \u5982\u679c A \u662f\u5185\u9b3c\uff0c\u90a3\u4e48 B \u5c31\u662f\u597d\u4eba \u3002 \u7136\u540e\u6211\u4eec\u5c31\u8003\u8651\u5229\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u4ed6\u4eec\u7684\u5173\u7cfb\uff0c\u7136\u540e\u987a\u4fbf\u8fdb\u884c\u5904\u7406\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 #include <bits/stdc++.h> using namespace std ; #define int long long int T ; const int si = 2e5 + 10 ; int pa [ si ], dis [ si ], siz [ si ], res [ si ]; bool vis [ si ]; int n , m , ans ; int root ( int x ){ if ( pa [ x ] == x ) return pa [ x ]; int fa = root ( pa [ x ]); dis [ x ] ^= dis [ pa [ x ]]; return pa [ x ] = fa ; } inline void Union ( int u , int v , int ru , int rv , int w ){ dis [ ru ] = w xor dis [ u ] xor dis [ v ]; siz [ rv ] += siz [ ru ], pa [ ru ] = rv ; } inline void init ( int n ){ for ( register int i = 1 ; i <= n ; ++ i ){ pa [ i ] = i , dis [ i ] = 0 , siz [ i ] = 1 ; vis [ i ] = false , res [ i ] = 0 ; } } signed main (){ scanf ( \"%lld\" , & T ); while ( T -- ){ scanf ( \"%lld%lld\" , & n , & m ); init ( n ); bool print_ck = true ; string sta ; for ( register int i = 1 ; i <= m ; ++ i ){ int u , v , tet ; scanf ( \"%lld%lld\" , & u , & v ); cin >> sta ; if ( sta [ 0 ] == 'c' ) tet = 0 ; else tet = 1 ; int ru = root ( u ), rv = root ( v ); if ( ru == rv ){ if (( dis [ u ] xor dis [ v ]) != tet ){ if ( print_ck ) puts ( \"-1\" ); print_ck = false ; } } else Union ( u , v , ru , rv , tet ); } if ( ! print_ck ) continue ; for ( register int i = 1 ; i <= n ; ++ i ){ int ri = root ( i ); if ( dis [ i ] == 0 ) res [ ri ] ++ ; //pa[i]? } ans = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ if ( root ( i ) != i ) continue ; ans += max ( res [ i ], siz [ i ] - res [ i ]); } printf ( \"%lld \\n \" , ans ); } return 0 ; }","title":"D"},{"location":"rec/old/old-cf-at-sol/#e1","text":"\u5927\u7b80\u5355\u9898\uff0c\u50bb\u903c\u4e86\u3002 \u7ed9\u4f60\u4e00\u4e2a\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u8ba9\u5b83\u6d82\u8272\uff0c\u6bcf\u79cd\u6d82\u8272\u6709\u9650\u5236\u3002 \u7b54\u6848\u5c31\u662f \\(6 \\times 4^{2^{k}-2}\\) \u3002 \u5feb\u901f\u5e42\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 signed main (){ int n ; scanf ( \"%lld\" , & n ); int k = ( 1l l << n ) -2ll ; //\u4e00\u5b9a\u8981\u5199 1ll,\u4e0d\u7136 1 \u4f1a\u9ed8\u8ba4 int \u5bfc\u81f4\u7206\u70b8\u3002 int ans = qpow ( 4l l , k , p ); ans = ( ans * 6l l ) % p ; printf ( \"%lld \\n \" , ans ); return 0 ; }","title":"E1"},{"location":"rec/old/old-cf-at-sol/#e2-f","text":"\u8fd8\u4e0d\u4f1a","title":"E2 &amp; F"},{"location":"rec/old/old-cf-at-sol/#atcoder-beginning-contest-222","text":"Contest ID: abc_222","title":"Atcoder Beginning Contest #222"},{"location":"rec/old/old-cf-at-sol/#a-b_2","text":"\u8bed\u6cd5\u9898\u5c31\u4e0d\u63d0\u4e86","title":"A &amp; B"},{"location":"rec/old/old-cf-at-sol/#c_9","text":"\u9898\u76ee\u7406\u89e3\u53ef\u80fd\u6bd4\u8f83\u56f0\u96be\uff08 \u5927\u6982\u662f\u8ba9\u4f60\u5728\u67d0\u79cd\u89c4\u5219\u4e0b\u5224\u65ad\u77f3\u5934\u526a\u5200\u5e03\u7684\u8f93\u8d62\u4e4b\u7c7b\u7684\u3002 \u76f4\u63a5\u5927\u6a21\u62df\u5373\u53ef\u3002","title":"C"},{"location":"rec/old/old-cf-at-sol/#d_6","text":"\u7ed9\u4f60\u4e24\u4e2a\u4e0d\u964d\u7684\u5e8f\u5217 \\(a,b\\) \u3002 \u8981\u6c42\u4f60\u6784\u9020\u4e00\u4e2a\u5e8f\u5217 \\(c\\) \u4f7f\u5f97\u5bf9\u4e8e\u4efb\u610f\u7684 \\(i\\) \u90fd\u6709 \\(c_i \\in [a_i,b_i]\\) \u503c\u57df \\(3000\\) \uff0c\u957f\u5ea6 \\(3000\\) \u3002 \u4e00\u4e2a\u6bd4\u8f83\u57fa\u7840\u7684 dp\u3002 \u8bbe \\(f_i\\) \u8868\u793a\u8003\u8651\u5230\u7b2c \\(i\\) \u4e2a\u4f4d\u7f6e\u7684\u65f6\u5019\u7684\u65b9\u6848\u6570\u3002 \u7136\u540e\u4f60\u53d1\u73b0\u56e0\u4e3a \\([a_i,b_i],[a_{i+1},b_{i+1}]\\) \u662f\u53ef\u80fd\u6709\u91cd\u5408\u7684\u3002 \u4f60\u9700\u8981\u53bb\u679a\u4e3e \\(c_i\\) \u5230\u5e95\u9009\u4ec0\u4e48\u7684\u60c5\u51b5\u3002 \u53d1\u73b0\u503c\u57df\u4e58\u4e0a\u957f\u5ea6\u4e5f\u53ea\u6709 \\(9\\times 10^6\\) \uff0c\u6240\u4ee5\u8003\u8651\u4e00\u4e2a\u6734\u7d20\u7684 dp\u3002 \u8bbe \\(f_{i,j}\\) \u8868\u793a\u8003\u8651\u5230\u7b2c \\(i\\) \u4e2a\u4f4d\u7f6e\u65f6\uff0c \\(c_i=j\\) \uff0c\u7684\u6ee1\u8db3\u6761\u4ef6\u7684\u5e8f\u5217\u603b\u6570\u3002 \u90a3\u4e48\u65b9\u7a0b\u5c31\u662f \\[f_{i,j}=\\begin{cases}\\sum\\limits_{k=0}^{j}f_{i-1,k} & i \\ge 1,j\\in [a_i,b_i]\\\\1 & i=j=0\\\\0 & \\text{otherwise.}\\end{cases}\\] \u4f46\u662f\u53d1\u73b0\u8fd9\u6837\u5b50\u662f \\(\\text{O}(nm^2)\\) \u7684\uff08 \\(m\\) \u662f\u503c\u57df\uff09\uff0c\u6240\u4ee5\u8003\u8651\u4f18\u5316\u3002 \u7b2c\u4e00\u79cd\u60c5\u51b5\u4f60\u53d1\u73b0\u662f\u4e2a\u524d\u7f00\u548c\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u4f7f\u7528\u524d\u7f00\u548c\u4f18\u5316\u8fd9\u73a9\u610f\u513f\u3002 \u4ee4 \\(S_{i,j}=\\sum\\limits_{k=0}^{j}f_{i,k}\\) \uff0c\u7136\u540e\u7528\u524d\u7f00\u548c\u7684\u5f62\u5f0f\u628a \\(S\\) \u5199\u51fa\u6765\u3002 \u7136\u540e\u56e0\u4e3a\u524d\u7f00\u548c\u662f\u4e2a\u9012\u63a8\u5f0f\uff0c\u6240\u4ee5\u4f60\u5c31\u53ef\u4ee5 \\(\\text{O}(nm)\\) AC\u672c\u9898\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 for ( register int i = a [ 1 ]; i <= b [ 1 ]; ++ i ){ f [ 1 ][ i ] = 1 ; } sum [ 0 ] = f [ 1 ][ 0 ]; for ( register int i = 1 ; i <= si -10 ; ++ i ){ sum [ i ] = sum [ i -1 ] + f [ 1 ][ i ]; } for ( register int i = 2 ; i <= n ; ++ i ){ for ( register int j = a [ i ]; j <= b [ i ]; ++ j ){ f [ i ][ j ] = sum [ j ]; } sum [ 0 ] = f [ i ][ 0 ]; for ( register int j = 1 ; j <= si -10 ; ++ j ){ sum [ j ] = ( sum [ j -1 ] + f [ i ][ j ]) % p ; } } int ans = 0 ; for ( register int i = a [ n ]; i <= b [ n ]; ++ i ){ ans = ( ans + f [ n ][ i ]) % p ; } printf ( \"%d \\n \" , ans % p );","title":"D"},{"location":"rec/old/old-cf-at-sol/#e-f","text":"\u4fe9DP\uff0c\u4e00\u4e2a\u80cc\u5305+\u6811\u4e0a\u5dee\u5206\u4e00\u4e2a\u6362\u6839\uff0c\u4f46\u662f\u4e0d\u4f1a\u5199\u545c\u545c","title":"E F"},{"location":"rec/old/old-cf-at-sol/#g_1","text":"\u539f\u9898\uff1a 202. \u6700\u5e78\u8fd0\u7684\u6570\u5b57 - AcWing\u9898\u5e93 3696 -- The Luckiest number (poj.org)","title":"G"},{"location":"rec/old/old-cf-at-sol/#h","text":"\u4e0d\u4f1a","title":"H"},{"location":"rec/old/old-cf-at-sol/#edu-115","text":"Contest ID : 1598 \u7279\u610f\u63d0\u65e9\u56de\u5b66\u6821\u673a\u623f\u6253\u7684\u3002 \u673a\u623f\u6253\u7684\u4eba\u4e0d\u662f\u5f88\u591a\uff0c\u4e0d\u8fc7\u8fd9\u573a\u786e\u5b9e\u6709\u70b9\u6bd2\u7624\uff1f G \u9898\u5168\u573a\u53ea\u6709\u4e24\u4e2a\u4ebaAC\uff0ctourist \u51b2\u4e86\u4e00\u4e2a\u5c0f\u65f6\u3002 F \u9898 MZX\u795e\u60f3\u4e86\u534a\u5c0f\u65f6\u6ca1\u60f3\u51fa\u6765\uff0cCFM \u548c 45d \u5168\u90e8T\u98de \u4f55\u795e\u7684 D \u548c E\u88ab\u53c9\u7206\u4e86\uff0cYL \u7684 D \u8bfb\u9519\u9898\u4e86\u3002 \u4e0d\u8fc7 wqs \u795e \u968f\u4fbf\u4e71\u5207\uff01\uff01orz","title":"Edu #115"},{"location":"rec/old/old-cf-at-sol/#a_7","text":"\u5927\u7279\u5224\u9898\uff0c\u53ea\u8981\u6709\u4e00\u5bf9 \\(a_i=b_i=1\\) \u90a3\u4e48\u65e0\u89e3\u3002","title":"A"},{"location":"rec/old/old-cf-at-sol/#b_6","text":"\u8fd8\u662f\u5927\u7279\u5224\u9898\u3002 \u4f60\u5c31\u8003\u8651\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u70b9\u5bf9 \\((i,j)\\) \u3002 \u7136\u540e\u5206 \\((0,0)(0,1)(1,0)\\) \u7684\u60c5\u51b5\u8ba8\u8bba\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 #include <bits/stdc++.h> using namespace std ; #define int long long int T , n ; const int si = 1e3 + 10 ; int a [ si ][ 10 ]; signed main (){ scanf ( \"%lld\" , & T ); while ( T -- ){ scanf ( \"%lld\" , & n ); for ( register int i = 1 ; i <= n ; ++ i ){ for ( register int j = 1 ; j <= 5 ; ++ j ){ scanf ( \"%1lld\" , & a [ i ][ j ]); } } bool f = false ; for ( register int i = 1 ; i < 5 ; ++ i ){ for ( register int j = i + 1 ; j <= 5 ; ++ j ){ int cnt = 0 , cntt = 0 , cnttt = 0 ; for ( register int k = 1 ; k <= n ; ++ k ){ if ( a [ k ][ i ] == 1 && a [ k ][ j ] == 0 ) ++ cnt ; else if ( a [ k ][ i ] == 0 && a [ k ][ j ] == 1 ) ++ cntt ; else if ( a [ k ][ i ] == 1 ) ++ cnttt ; } if ( cnt + cntt + cnttt >= n && cnt + cnttt >= ( n >> 1 ) && cntt + cnttt >= ( n >> 1 )){ f = true ; break ; } if ( ! f ) continue ; } } if ( f ) puts ( \"YES\" ); else puts ( \"NO\" ); } return 0 ; }","title":"B"},{"location":"rec/old/old-cf-at-sol/#c_10","text":"\u95ee\u4f60\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u5e8f\u5217\uff0c\u6709\u591a\u5c11\u79cd\u53bb\u6389\u4e24\u4e2a\u6570 \\(a_i,a_j\\) \u7684\u65b9\u6848\uff08 \\(i<j\\) \uff09\u4f7f\u5f97\u5e8f\u5217\u5e73\u5747\u6570\u4e0d\u53d8\u3002 \u76f4\u63a5\u7528\u4e2a unordered_map \u6765\u5904\u7406\u6bcf\u4e00\u4e2a\u6570\u7684\u51fa\u73b0\u6b21\u6570\u3002 \u4f60\u53d1\u73b0\u8981\u6709\u89e3\uff0c\u90a3\u4e48\u5e73\u5747\u6570\u80af\u5b9a\u662f .0 \u6216\u8005 .5 \u7ed3\u5c3e\u3002 \u8bf4\u767d\u4e86 \\(2sum\\ \\text{mod}\\ n=0\\) \u3002 \u7136\u540e\u4e3a\u4e86\u9632\u6b62\u91cd\u590d\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u8fd9\u6837\u5b50\u5199\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 #include <bits/stdc++.h> using namespace std ; #define int long long int T ; const int si = 2e5 + 10 ; int n , a [ si ]; long double k = 0 ; unordered_map < int , int > mp ; signed main (){ scanf ( \"%lld\" , & T ); while ( T -- ){ scanf ( \"%lld\" , & n ); mp . clear (); int sum = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ scanf ( \"%lld\" , & a [ i ]); sum += a [ i ]; } if (( sum << 1l l ) % n ){ puts ( \"0\" ); continue ; } int kk = sum * 2 / n ; int res = 0 ; for ( register int i = 1 ; i <= n ; ++ i ){ res += mp [ kk - a [ i ]]; mp [ a [ i ]] ++ ; } printf ( \"%lld \\n \" , res ); } return 0 ; } // \u7528 map \u5e94\u8be5\u53ef\u4ee5\uff0c\u6211\u8fd9\u4e2a\u88ab\u4eba\u5361\u4e86\u545c\u545c \u6211\u4eec\u53ef\u4ee5\u5148\u628a\u5e8f\u5217\u770b\u4f5c\u5347\u5e8f\u6392\u5e8f\u7684\u3002 \u7136\u540e\u4f60\u53d1\u73b0\u5339\u914d\u7684\u4e24\u4e2a\u7aef\u70b9\u662f\u5173\u4e8e\u5e73\u5747\u6570\u7684\u4f4d\u7f6e\u8fd1\u4f3c\u5bf9\u79f0\u7684\u3002 \u8fd9\u6837\u5b50\u5199\u4f1a\u8ba9\u6bcf\u4e00\u4e2a\u70b9\u5bf9\u7684\u7b54\u6848\u90fd\u5728\u904d\u5386\u5230\u4f4d\u7f6e\u9760\u540e\u7684\u90a3\u4e2a\u70b9\u7684\u65f6\u5019\u624d\u66f4\u65b0\u3002 \u90a3\u4e48\u5c31\u907f\u514d\u4e86\u70b9\u5bf9\u7684\u91cd\u590d\u8ba1\u7b97\uff08\u6837\u4f8b\u4e00\u7684 8 8 8 8 \u7684\u60c5\u51b5\u4e5f\u80fd\u5b8c\u7f8e\u89e3\u51b3\uff09\u3002","title":"C"},{"location":"rec/old/old-cf-at-sol/#d_7","text":"\u5927\u6570\u5b66\u9898\uff08\u5bb9\u65a5+\u7ec4\u5408\uff09 \u95ee\u7ed9\u5b9a\u7684\u4e24\u4e2a\u5e8f\u5217 \\(a,b\\) \u4e2d\u9009\u51fa\u4e09\u4e2a\u4f4d\u7f6e \\(i,j,k\\) \u4f7f\u5f97\u4e0b\u5217\u6761\u4ef6\u81f3\u5c11\u6709\u4e00\u4e2a\u6210\u7acb\uff1a \\(a[i] \\not= a[j] \\not= a[k]\\) \\(b[i] \\not= b[j] \\not= b[k]\\) \u6709\u591a\u5c11\u79cd\u65b9\u6848\u3002 \u8003\u8651\u628a\u4efb\u610f\u9009\u4e09\u4e2a\u4f4d\u7f6e\u7684\u65b9\u6848\u6570\u7b97\u51fa\u6765\uff1a \\(|U|=\\text{C}^{3}_{n}=\\dfrac{n\\times(n-1)\\times(n-2)}{6}\\) \u7136\u540e\u4f60\u8981\u53bb\u6389\u7684\u5c31\u662f\u4e24\u79cd\u90fd\u4e0d\u6ee1\u8db3\u7684\u65b9\u6848\u6570\u3002 \u6211\u4eec\u8003\u8651\u5206\u522b\u8bb0\u5f55 \\(a,b\\) \u5f53\u4e2d\u7684\u6bcf\u4e2a\u6570\u5206\u522b\u5728\u81ea\u5df1\u6240\u5904\u7684\u5e8f\u5217\u5f53\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 \\(cnta,cntb\\) \u3002 \u4f60\u53d1\u73b0\u4f60\u8981\u5904\u7406\u7684\u4e0d\u6ee1\u8db3\u6761\u4ef6\u7684\u5c31\u662f\u201c\u6709\u76f8\u7b49\u201d\u7684\u60c5\u51b5\u3002 \u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6761\u4ef6\uff0c\u4f60\u90fd\u8981\u5904\u7406\u201c\u6709\u4e24\u4e2a\u76f8\u540c\uff0c\u6709\u4e09\u4e2a\u76f8\u540c\u201d\u7684\u60c5\u51b5\u3002 \u6240\u4ee5\u8fd9\u91cc\u5c31\u53c8\u662f\u5bb9\u65a5\uff0c\u5bf9\u4e8e \\(a\\) \uff08 \\(b\\) \u540c\u7406\uff09\uff0c\u6211\u4eec\u8bbe\u4f4d\u7f6e \\(i,j\\) \u51fa\u73b0\u76f8\u540c\u7684\u60c5\u51b5\u96c6\u5408\u4e3a \\(A\\) \uff0c \\(i,k\\) \u76f8\u540c\u7684\u60c5\u51b5\u96c6\u5408\u4e3a \\(B\\) \uff0c \\(j,k\\) \u76f8\u540c\u7684\u60c5\u51b5\u96c6\u5408\u662f \\(C\\) \uff0c\u90a3\u4e48\u6211\u4eec\u8981\u6c42\u7684\u5c31\u662f \\(A \\cup B \\cup C\\) \uff0c\u8fd9\u91cc\u5c31\u53ef\u4ee5\u7528\u5bb9\u65a5\u7b97\u3002 \u8003\u8651\u4f60\u73b0\u5728\u626b\u5230\u4f4d\u7f6e \\(i\\) \uff0c\u90a3\u4e48\u5728 \\(a\\) \u5f53\u4e2d\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u4f4d\u7f6e\u4ed6\u51fa\u73b0\u4e86 \\(cnta_{a_i}\\) \u6b21\uff0c\u5728 \\(b\\) \u91cc\u9762\u51fa\u73b0 \\(cntb _{b_i}\\) \u6b21\uff0c \u90a3\u4e48\u6839\u636e\u4e58\u6cd5\u539f\u7406\uff0c\u5728\u4e0d\u7ba1\u91cd\u4e0d\u91cd\u590d\u8ba1\u7b97\u7684\u60c5\u51b5\u4e0b\u5c31\u6709 \\(cnta_{a_i} \\times cntb_{b_i}\\) \u79cd\u53ef\u80fd\u3002 \u6211\u4eec\u8003\u8651\u5bf9\u8fd9\u4e2a\u4e1c\u897f\u5bb9\u65a5\u4e00\u4e0b\u6765\u53bb\u91cd\u3002 \u56e0\u4e3a\u4f60\u5728\u5176\u4ed6\u5730\u65b9\u8fd8\u53ef\u80fd\u518d\u53d6\u5230\u8fd9\u4e2a\u4f4d\u7f6e\u7684 \u6570\u5b57 \u6240\u4ee3\u8868\u7684\u60c5\u51b5\uff0c\u800c\u4e14\u6bcf\u626b\u5230\u4e00\u4e2a \\(a_i\\) \u6216\u8005 \\(b_i\\) \u5c31\u4f1a\u591a\u7b97\u4e00\u6b21/ \u90a3\u4e48\u6211\u4eec\u5148\u7ed9\u4ed6\u4eec\u51cf\u53bb \\(cnta_{a_i}+cntb_{b_i}\\) \uff0c \u7136\u540e\u4f60\u53d1\u73b0\u8fd9\u4e2a\u4f4d\u7f6e\u672c\u6765\u7684\u90a3\u4e00\u4e2a\u60c5\u51b5\u88ab\u591a\u51cf\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u518d\u52a0\u4e0a \\(1\\) \u3002 \u6211\u4eec\u628a\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u6240\u80fd\u7ed9\u51fa\u7684\u8d21\u732e\u5199\u51fa\u6765\uff1a \\(S_i=cnta_{a_i}\\times cntb_{b_i}-cnta_{a_i}-cntb_{b_i}+1\\) \u3002 \u6240\u4ee5\u6839\u636e\u52a0\u6cd5\u539f\u7406\uff0c\u6211\u4eec\u8981\u6c42\u7684\u90fd\u4e0d\u6ee1\u8db3\u7684\u60c5\u51b5\u5c31\u662f \\(\\sum\\limits^n_{i=1}S_i=\\sum\\limits^{n}_{i=1}[(cnta_{a_i}-1) \\times (cntb_{b_i}-1)]\\) \u3002 \u6240\u4ee5\u7b54\u6848\u662f \\(\\text{C}^3_n-\\sum\\limits^{n}_{i=1}[(cnta_{a_i}-1) \\times (cntb_{b_i}-1)]\\) \u3002","title":"D"},{"location":"rec/old/old-cf-at-sol/#e_5","text":"\u9898\u610f\u81ea\u5df1\u770b\u539f\u9898\u3002 \u53d1\u73b0\u6bcf\u6b21\u4fee\u6539\u683c\u5b50\u53ea\u4f1a\u5f71\u54cd \\(n\\) \u6761\u8def\u5f84\uff0c\u6240\u4ee5\u4f60\u5c31\u6bcf\u6b21\u7ef4\u62a4\u4e00\u4e0b\u3002 \u7136\u540e\u5c31\u53ef\u4ee5 \\(\\text{O}(nq)\\) \u505a\u3002","title":"E"},{"location":"rec/old/old-cf-at-sol/#f-g","text":"\u51b2\u4e0d\u52a8\uff0c\u592a\u96be\u529b/kk","title":"F &amp; G"},{"location":"rec/old/old-cf-at-sol/#technocup-2022-elimination-round-2","text":"Contest Id: 1584,1588,1589 \u5f53\u7ecf\u5386\u8fc7\u4e00\u4e9b\u53d8\u5316\u4e4b\u540e\u6253\u7684\u7b2c\u4e00\u6b21 CF\u3002 \u867d\u7136\u662f VP\u3002 \u53e6\u5916\u4e8c\u53f7\u673a\u623f\u53ea\u6709\u6211\u4e00\u4e2a\u4eba\u60f3\u9898\u7684\u611f\u89c9\u786e\u5b9e\u8212\u670d\u3002","title":"Technocup 2022 - Elimination Round 2"},{"location":"rec/old/old-cf-at-sol/#1589a1584a","text":"\u6784\u9020\u65b9\u7a0b \\(\\dfrac{x}{u}+\\dfrac{y}{v}=\\dfrac{x+y}{u+v}\\) \u7684\u89e3\uff0c\u5176\u4e2d \\(u,v\\) \u7ed9\u5b9a\u4e14 $(x,y)\\not= (0,0) $ \u7a0d\u5fae\u4e71\u89e3\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\uff0c \\(x=-u^2,y=v^2\\) \u5373\u53ef\u3002","title":"1589A,1584A"},{"location":"rec/old/old-cf-at-sol/#1589b1584b","text":"\u731c\u7684\u7ed3\u8bba\uff0c\u6211\u89c9\u5f97\u53ea\u8981 \\(n\\times m\\) \u80fd\u88ab \\(3\\) \u6574\u9664\u90a3\u4e48\u53ef\u4ee5\u5168\u90e8\u5207\u6210 \\(1 \\times 3\\) \u6216\u8005 \\(3 \\times 1\\) \u7684\u3002 \u7136\u540e\u5176\u4ed6\u60c5\u51b5\u63a8\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\u662f \\(\\dfrac{n\\times m}{3} +1\\) \u3002","title":"1589B,1584B"},{"location":"rec/old/old-cf-at-sol/#1589c1584c1588a","text":"\u8003\u8651\u5148\u5bf9 \\(a,b\\) \u6392\u5e8f\u3002 \u7136\u540e\u5012\u7740\u4ece\u5927\u5230\u5c0f\u679a\u4e3e\uff0c\u5224\u65ad\u4e0b\u5217\u6761\u4ef6\u662f\u5426\u4e0d\u6210\u7acb\u5373\u53ef\u3002 b[i]-a[i]>1 || b[i]-a[i]<0 \u6210\u7acb\u8f93\u51fa NO \u8dd1\u8def\uff0c\u53cd\u4e4b\u5faa\u73af\u5b8c\u4e86\u8f93\u51fa YES \u5373\u53ef\u3002","title":"1589C,1584C,1588A"},{"location":"rec/old/old-cf-at-sol/#d_8","text":"\u4ea4\u4e92\u9898\uff0c\u6211\u6bd4\u8f83Lazy\u6240\u4ee5\u660e\u5929\u505a\u3002","title":"D"},{"location":"sol/","text":"\u8fd9\u4e2a\u5b50\u76ee\u5f55 Solution \u4e0b\u53ef\u80fd\u4f1a\u51fa\u73b0\u7684\u5185\u5bb9\uff1a \u6a21\u62df\u8d5b\u7684\u9898\u89e3 & \u8d5b\u540e\u603b\u7ed3 & \u6539\u9519 \u4e00\u4e9b\u9898\u76ee\u7684\u9898\u89e3\uff08\u73b0\u5728\u4e00\u822c\u4e0d\u600e\u4e48\u5199\uff0c\u5927\u90e8\u5206\u90fd\u4f1a\u5199\u5230 Rec \u91cc\uff0c\u9664\u975e\u5f53\u65f6\u89c9\u5f97\u662f\u6781\u5ea6\u597d\u9898\u624d\u4f1a\u62ff\u51fa\u6765\u5355\u72ec\u5199\uff09\u3002","title":"Index"},{"location":"sol/mock/","text":"\u8fd9\u91cc\u7528\u6765\u5b58\u653e CWOI \u6a21\u62df\u8d5b\u7684\u9898\u89e3\uff0c\u6216\u8005\u662f\u6211\u81ea\u5df1\u989d\u5916\u6253\u7684\u6a21\u62df\u8d5b\u7684\u9898\u89e3\u3002 \u56e0\u4e3a\u6743\u9650\u548c\u4fdd\u5bc6\u7b49\u5404\u65b9\u9762\u9700\u8981\uff0c\u8fd9\u4e2a\u76ee\u5f55\u4e0b\u7684\u535a\u5ba2\u662f\u4e0a\u4e86\u9501\u7684\uff0c\u5bc6\u7801\u662f 2022 \u5e74 CWOI Vjudge \u7684\u5e38\u7528\u5bc6\u7801\u3002 \u548c Cx \u8001\u5e08\u7684\u5bc6\u7801\u662f\u4e00\u81f4\u7684\uff0c\u5982\u679c\u8be5\u6a21\u62df\u8d5b\u662f 2022 + N \u5e74\u7684\uff0c\u90a3\u4e48\u5bf9\u5e94\u6570\u5b57\u76f8\u5e94\u52a0 N\u3002","title":"Index"},{"location":"sol/other/noi2023-spring/","text":"","title":"NOI2023 \u6625\u5b63\u6d4b\u8bd5\u9898\u89e3"},{"location":"sol/other/noiol2022/","text":"\u9898\u9762 \u4e00\u5e74\u524d\u7684\u8fd9\u4e2a\u65f6\u5019\u6253\u8fc7\u8fd9\u4e00\u573a\uff0c\u4f46\u662f\u6211\u751a\u81f3\u53ea\u6253\u4e86 T1 \u7684\u6700\u4f4e\u6863\u66b4\u529b\u5206 /xk \u7136\u540e\u90a3\u4e2a\u65f6\u5019\u4e5f\u90fd\u4ece\u6765\u6ca1\u6709\u6539\u9898\uff0c\u6001\u5ea6\u4e0a\u90fd\u662f\u5f88\u6577\u884d\u7684\uff0c\u4e5f\u90fd\u4e0d\u600e\u4e48\u7528\u5fc3\u60f3\u3002 \u8fd9\u6b21\u7a0d\u5fae\u597d\u70b9\u4e86\uff0c\u8d77\u7801\u6211\u4f1a T1 \u4e86\u3002 T1 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd9\u4e2a\u95ee\u9898\u8fd8\u662f\u6bd4\u8f83\u5957\u8def\u3002 \u663e\u7136\u7684\u6211\u4eec\u5148\u505a\u4e00\u904d\u5168\u5c40\u7684\u89c2\u5bdf\u4e00\u4e0b\uff0c\u7136\u540e\u8003\u8651\u8f6c\u5316\u4e3a\u533a\u95f4\u3002 \u5b9e\u5728\u662f\u5957\u8def\u7684\u4e0d\u80fd\u518d\u5957\u8def\u4e86\u3002 \u597d\u7136\u540e\u6211\u4eec\u53d1\u73b0\uff0c\u5047\u8bbe\u94a6\u5b9a\u4e00\u4e2a\u4f4d\u7f6e\u4e3a \\(l\\) \uff0c \\(l\\) \u663e\u7136\u662f\u6210\u529f\u7684\uff0c\u7136\u540e\u539f\u672c\u5c31\u662f\u6210\u529f\u7684\u5143\u7ec4\u76f8\u5bf9\u987a\u5e8f\u4e0d\u4f1a\u6539\u53d8\u3002 \u6240\u4ee5\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u672c\u6765\u4e0d\u662f\u6210\u529f\uff0c\u4f46\u662f\u4ee5 \\(l\\) \u5f00\u5934\u5374\u662f\u6210\u529f\u5e94\u8be5\u662f\u4ec0\u4e48\u60c5\u51b5\uff0c\u4ece\u4e0d\u77e5\u9053\u54ea\u4e2a\u6837\u4f8b\u770b\u5c31\u662f\u7c7b\u4f3c \\(l = 5\\) \uff0c\u7136\u540e\u4f60\u5728 \\(6\\) \u7684\u65f6\u5019\uff0c\u628a \\(5\\) \u5f39\u6389\u4e86\uff0c\u4f46\u662f\u5168\u5c40\u7684\u60c5\u51b5\u4e0b\u8fd8\u6709\u4e00\u4e2a \\(4\\) \u5728\u5e95\u4e0b\u9876\u7740\u3002 \u89c2\u5bdf\u624b\u6a21\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c \\(l = 5\\) \uff0c\u8bb0\u5f55 \\(i\\) \u5165\u6808\u7684\u65f6\u5019\uff0c\u6808\u9876\u4e3a \\(lst(i)\\) \uff0c\u90a3\u4e48\u5728 \\(4\\) \u4e4b\u540e\u5982\u679c\u51fa\u73b0 \\(4, 4, 4\\) \u8fd9\u6837\u7684\u8fde\u7eed\u6bb5\uff0c\u663e\u7136\u5c31\u662f\u4e00\u4e2a\u4e00\u4e2a\u4e00\u4e2a\u6210\u529f\u7684\u5143\u7ec4\u3002 \u95ee\u9898\u8f6c\u5316\u4e3a\u8003\u8651\u5bf9\u4e8e \\(lst\\) \uff0c\u5728\u7ed9\u5b9a\u533a\u95f4\u5185\u6c42\u6709\u591a\u5c11\u4e2a \\(lst < l\\) \uff0c\u4e3b\u5e2d\u6811\u4e00\u4e0b\u5373\u53ef\uff0c \\(\\log(n)\\) \u3002 \u4e5f\u53ef\u4ee5\u5dee\u5206\u4e4b\u540e\u8f6c\u5316\u6210\u4e8c\u7ef4\u6570\u70b9\u4f7f\u7528 Fenwick\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 5e5 + 10 ; int root [ si ]; int n , q , a [ si ], b [ si ]; class president_tree { private : struct node { int ls , rs ; int val ; } t [ si * 40 ]; int cnt = 0 ; int Node () { ++ cnt ; t [ cnt ]. ls = t [ cnt ]. rs = 0 ; t [ cnt ]. val = 0 ; return cnt ; } inline void pushup ( int p ) { t [ p ]. val = t [ t [ p ]. ls ]. val + t [ t [ p ]. rs ]. val ; } public : int build ( int l , int r ) { int p = Node (); if ( l == r ) return p ; int mid = ( l + r ) >> 1 ; t [ p ]. ls = build ( l , mid ), t [ p ]. rs = build ( mid + 1 , r ); pushup ( p ); return p ; } int insert ( int lst , int l , int r , int x ) { int p = Node (); if ( l == r ) { t [ p ]. val = 1 ; return p ; } int mid = ( l + r ) >> 1 ; if ( x <= mid ) t [ p ]. rs = t [ lst ]. rs , t [ p ]. ls = insert ( t [ lst ]. ls , l , mid , x ); else t [ p ]. ls = t [ lst ]. ls , t [ p ]. rs = insert ( t [ lst ]. rs , mid + 1 , r , x ); pushup ( p ); return p ; } int query ( int p , int l , int r , int L , int R ) { if ( L <= l && r <= R ) return t [ p ]. val ; int ret = 0 , mid = ( l + r ) >> 1 ; if ( L <= mid ) ret += query ( t [ p ]. ls , l , mid , L , R ); if ( R > mid ) ret += query ( t [ p ]. rs , mid + 1 , r , L , R ); return ret ; } } tr ; struct obj { int l , i ; bool operator < ( const obj & b ) { return l < b . l ; } } w [ si ]; int L [ si ], stk [ si ]; int main () { // freopen(\"ex_stack1.in\", \"r\", stdin); // freopen(\"ex_stack1.out\", \"w\", stdout); cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> q ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; for ( int i = 1 ; i <= n ; ++ i ) cin >> b [ i ]; int cnt = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { while ( cnt && ( a [ stk [ cnt ]] == a [ i ] || b [ stk [ cnt ]] <= b [ i ])) -- cnt ; L [ i ] = stk [ cnt ] + 1 ; stk [ ++ cnt ] = i ; } for ( int i = 1 ; i <= n ; ++ i ) w [ i ]. i = i , w [ i ]. l = L [ i ]; sort ( w + 1 , w + 1 + n ), root [ 0 ] = tr . build ( 1 , n ); int pp = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { root [ i ] = root [ i - 1 ]; while ( pp <= n && w [ pp ]. l == i ) root [ i ] = tr . insert ( root [ i ], 1 , n , w [ pp ]. i ), ++ pp ; } for ( int nw = 1 ; nw <= q ; ++ nw ) { int l , r ; cin >> l >> r ; cout << tr . query ( root [ l ], 1 , n , l , r ) << endl ; } return 0 ; } \u8003\u573a\u601d\u8003\u7684\u65f6\u5019\u95ee\u9898\u51fa\u5728\uff0c\u6211\u4e00\u76f4\u5728\u8003\u8651\u4e0a\u4e00\u4e2a good\uff0c\u7136\u540e\u4e2d\u95f4\u8fd9\u4e00\u6bb5\u53ef\u4ee5\u600e\u4e48\u641e\u6ca1\u60f3\u6e05\u695a\u3002 \u8fd8\u662f\u6700\u540e\u53d1\u73b0\u4e86\u8fd9\u4e2a\u8fde\u7eed\u6bb5\u624d\u60f3\u5230\u7684\uff0c\u5176\u5b9e\u4e5f\u662f\uff0c\u8003\u573a\u601d\u8def\u4e0d\u6e05\u6670\uff0c\u611f\u89c9\u4e0d\u592a\u80fd\u62bd\u8c61\u51fa\u95ee\u9898\u5177\u4f53\u5728\u54ea\u91cc\uff1f\u8fd9\u4e2a\u8be5\u548b\u89e3\u51b3\u554a\u3002 T2 \u03c8(\uff40\u2207\u00b4)\u03c8 \u5c31\uff0c\u4e0d\u59a8\u6309\u7167\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u3002 \u4e3a\u4ec0\u4e48\u5462\uff0c\u56e0\u4e3a\u6211\u4eec\u60f3\u505a\u7684\u662f\u4e8b\u60c5\u662f\u6bd4\u8f83\u65b9\u4fbf\u7684\u5904\u7406\u4ea4\u96c6\uff0c\u5e76\u4e14\u4fdd\u8bc1\u6ca1\u6709\u5305\u542b\u5173\u7cfb\u3002 \u663e\u7136\u5bf9\u4e8e\u4e00\u4e2a\u96c6\u5408\uff0c\u6700\u4f18\u7684\u4e00\u5b9a\u662f\u6ee1\u8db3\u6761\u4ef6\u91cc\u9762\u6700\u5c0f\u7684\u96c6\u5408\u3002 \u4e8e\u662f\u6211\u4eec\u626b\u4e00\u904d\u6bcf\u4e2a\u96c6\u5408\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e\uff0c\u6211\u4eec\u52a8\u6001\u8bb0\u5f55\u5f53\u524d\u8986\u76d6\u4e86\u8fd9\u4e2a\u6761\u4ef6\u7684\u6700\u5c0f\u7684\u96c6\u5408\u662f\u5565\u3002 \u8fd9\u4e2a\u56e0\u4e3a\u4ece\u5927\u5230\u5c0f\u4e86\u6240\u4ee5\u76f4\u63a5\u987a\u5e8f\u679a\u4e3e\u5373\u53ef\uff0c\u7136\u540e argue \u4e00\u4e0b\u53ef\u4e0d\u53ef\u884c\u5c31\u884c\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 // author : black_trees #include <cmath> #include <cstdio> #include <vector> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; const int si = 2e6 + 10 ; struct obj { int siz , id ; std :: vector < int > v ; void init () { siz = id = 0 , v . clear (); } bool operator < ( const obj & b ) const { return siz > b . siz ; } } p [ si ]; int n ; int bel [ si ], rec [ si ]; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { p [ i ]. init (), bel [ i ] = 0 , p [ i ]. id = i ; cin >> p [ i ]. siz ; for ( int j = 0 , x ; j < p [ i ]. siz ; ++ j ) cin >> x , p [ i ]. v . emplace_back ( x ); } sort ( p + 1 , p + 1 + n ); int u , v ; int col = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { u = v = 0 ; col = p [ i ]. id , rec [ p [ i ]. id ] = i ; for ( int j = 0 ; j < p [ i ]. siz ; ++ j ) { int t = p [ i ]. v [ j ]; int tmp = bel [ t ]; bel [ t ] = col ; if ( ! tmp ) tmp = col ; if ( ! u ) u = tmp ; else if ( u != tmp ) v = tmp ; if ( u && v ) { n = -1 ; p [ i ]. siz = -1 ; } } } if ( n != -1 ) cout << \"NO\" << endl ; else { if ( u == col || v == col ); else if ( p [ rec [ u ]]. siz > p [ rec [ v ]]. siz ) u = col ; else v = col ; cout << \"YES\" << endl ; cout << u << \" \" << v << endl ; } } return 0 ; } T3 \u03c8(\uff40\u2207\u00b4)\u03c8 \u4ee5\u4e3a\u81ea\u5df1\u80fd\u505a\u51fa\u6765\u60f3\u4e86\u5927\u534a\u5929\u7ed3\u679c\u4e00\u5206\u6ca1\u6709\uff0c\u6700\u540e\u8d76\u7d27\u53bb\u8865 T1\uff0c\u7ed3\u679c\u624b\u6b8b\u6253\u6302\u4e86\u4e3b\u5e2d\u6811\u3002 \u53ef\u4ee5\u4e0d\u7528\u4e09\u7ef4\u504f\u5e8f\uff0c\u5f88\u5999\u7684\u601d\u8def\u3002 \u4f60\u5bf9\u4e8e\u8fd9\u79cd \\(\\sum\\sum f(i,j)\\) \u7684\u5f0f\u5b50\uff0c\u5904\u7406\u5957\u8def\u76ee\u524d\u6765\u770b\u65e0\u975e\u5c31\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u6b63\u653b\uff0c\u76f4\u63a5\u8003\u8651\u600e\u4e48\u8f6c\u5316\u8ba1\u7b97\u8d21\u732e\u7684\u65b9\u5f0f\uff0c\u53e6\u5916\u4e00\u79cd\u5c31\u662f\u8003\u8651\u6b63\u96be\u5219\u53cd\uff0c\u6211\u4eec\u6c42\u51fa \\(U\\) \u548c\u7b54\u6848\u7684\u8865\u96c6\u5c31\u884c\u4e86\u3002 \u8fd9\u9898\u5c31\u662f\u8003\u8651\uff0c\u5047\u8bbe\u6240\u6709\u4f4d\u7f6e\u90fd\u505a\u4e86\u8d21\u732e\uff0c\u603b\u7b54\u6848\u663e\u7136\u662f \\(2n\\sum a(i,j)\\) \u3002 \u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u7b97\u6709\u591a\u5c11\u4e2a \\(a(i, j)\\) \u6ca1\u505a\u51fa\u8d21\u732e\u5c31\u884c\u3002 \u7b54\u6848\u7684 \\(\\min, \\max\\) \u91cc\u9762\u662f\u7c7b\u4f3c\u7684\uff0c\u8fd9\u91cc\u53ea\u8003\u8651 \\(\\min\\) \uff1a \u663e\u7136\uff0c\u5bf9\u4e8e\u4e00\u4e2a \\(a(k, i) + a(k, j)\\) \uff0c\u5b83\u4e0d\u4f1a\u5bf9 \\(\\min\\) \u505a\u51fa\u8d21\u732e\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728 \\(k^\\prime\\) \uff0c\u4f7f\u5f97 \\(a(k^\\prime, i) + a(k^\\prime, j) \\le a(k, i) + a(k, j)\\) \u3002\u4e8e\u662f\u6211\u4eec\u5bf9\u4e8e\u4e00\u4e2a \\(i\\) \uff0c\u6570\u4e00\u4e0b\u6709\u591a\u5c11\u4e2a \\(j\\) \u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\u5c31\u884c\u3002 \u7136\u540e\u5c31\u5957\u8def\u7684\u79fb\u9879\uff0c\u628a \\(i, j\\) \u5206\u522b\u653e\u5230 \\(\\le\\) \u4e24\u8fb9\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u4e8c\u7ef4\u504f\u5e8f\u3002 \u4e8e\u662f\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5373\u53ef\uff0c\u5bf9\u4e8e \\(\\max\\) \u540c\u7406\u3002 \u8fd9\u91cc\u76f8\u5f53\u4e8e\u53ea\u8003\u8651\u4e86\u6709 \\(3\\) \u884c\u88ab\u9009\u51fa\u6765\u7684\u60c5\u51b5\uff0c\u4e8e\u662f\u6211\u4eec\u679a\u4e3e \\(m!\\) \u79cd\u53ef\u80fd\u505a\u4e00\u4e0b\u5c31\u884c\u3002 \u6ce8\u610f\u6211\u4eec \\(\\min, \\max\\) \u540c\u65f6\u505a\u7684\u65f6\u5019\u53ef\u80fd\u4e24\u8fb9\u53d6\u7b49\uff0c\u8003\u8651\u5f3a\u5236\u94a6\u5b9a\u5927\u5c0f\uff0c\u968f\u4fbf\u9009\u4e00\u8fb9\u5c31\u884c\u3002 \u590d\u6742\u5ea6 \\(O(n\\log n)\\) \uff0c\u5e26\u4e00\u4e2a \\(4!\\) \u5e38\u6570\u3002\u6811\u72b6\u6570\u7ec4\u8bb0\u5f97\u5f00\u4e24\u500d\u7136\u540e\u5e73\u79fb\u4e00\u4e0b\uff0c\u56e0\u4e3a\u53ef\u80fd\u6709\u8d1f\u6570\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; const int si = 2e5 + 5 ; const int V = si << 1 ; const int inf = 0x3f3f3f3f3f3f3f3fll ; int n , m ; int a [ 5 ][ si ], ord [] = { 1 , 2 , 3 , 4 }; class Fenwick { private : int t [ V + 10 ]; inline int lowbit ( int x ) { return x & - x ; } public : void init () { memset ( t , 0 , sizeof t ); } void add ( int x , int v ) { while ( x <= V ) t [ x ] += v , x += lowbit ( x ); } int que ( int x ) { int ret = 0 ; while ( x ) ret += t [ x ], x -= lowbit ( x ); return ret ; } } tr ; struct Operations { int tyq , x , y , v ; Operations () { tyq = x = y = v = 0 ; } Operations ( int a , int b , int c , int d ) : tyq ( a ), x ( b ), y ( c ), v ( d ) {} bool operator < ( const Operations & t ) const { if ( x != t . x ) return x < t . x ; return tyq < t . tyq ; } } b [ si << 1 ]; int solve ( int p []) { int e = p [ 0 ], f = p [ 1 ], g = p [ 2 ]; tr . init (); int ret = 0 , cnt = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { b [ ++ cnt ] = Operations ( 1 , a [ e ][ i ] - a [ f ][ i ], a [ f ][ i ] - a [ g ][ i ], 0 ); b [ cnt ]. x += ( e > f ), b [ cnt ]. y += ( f > g ); b [ ++ cnt ] = Operations ( 2 , a [ f ][ i ] - a [ e ][ i ], a [ g ][ i ] - a [ f ][ i ], a [ f ][ i ]); } sort ( b + 1 , b + 1 + cnt ); for ( int i = 1 ; i <= cnt ; ++ i ) { auto [ tyq , x , y , v ] = b [ i ]; if ( tyq == 1 ) tr . add ( y + si , 1 ); if ( tyq == 2 ) ret += v * tr . que ( y + si ); } return ret ; } signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> m >> n ; for ( int i = 1 ; i <= m ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { cin >> a [ i ][ j ]; } } for ( int i = m + 1 ; i <= 4 ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { a [ i ][ j ] = a [ i - m ][ j ]; } } int ans = 0 ; for ( int i = 1 ; i <= 4 ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { ans += ( 2l l * n * a [ i ][ j ]); } } do { ans -= solve ( ord ); } while ( next_permutation ( ord , ord + 4 )); cout << ans << endl ; return 0 ; }","title":"NOIOL2022 \u9898\u89e3"},{"location":"sol/other/noiol2022/#t1","text":"\u8fd9\u4e2a\u95ee\u9898\u8fd8\u662f\u6bd4\u8f83\u5957\u8def\u3002 \u663e\u7136\u7684\u6211\u4eec\u5148\u505a\u4e00\u904d\u5168\u5c40\u7684\u89c2\u5bdf\u4e00\u4e0b\uff0c\u7136\u540e\u8003\u8651\u8f6c\u5316\u4e3a\u533a\u95f4\u3002 \u5b9e\u5728\u662f\u5957\u8def\u7684\u4e0d\u80fd\u518d\u5957\u8def\u4e86\u3002 \u597d\u7136\u540e\u6211\u4eec\u53d1\u73b0\uff0c\u5047\u8bbe\u94a6\u5b9a\u4e00\u4e2a\u4f4d\u7f6e\u4e3a \\(l\\) \uff0c \\(l\\) \u663e\u7136\u662f\u6210\u529f\u7684\uff0c\u7136\u540e\u539f\u672c\u5c31\u662f\u6210\u529f\u7684\u5143\u7ec4\u76f8\u5bf9\u987a\u5e8f\u4e0d\u4f1a\u6539\u53d8\u3002 \u6240\u4ee5\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u672c\u6765\u4e0d\u662f\u6210\u529f\uff0c\u4f46\u662f\u4ee5 \\(l\\) \u5f00\u5934\u5374\u662f\u6210\u529f\u5e94\u8be5\u662f\u4ec0\u4e48\u60c5\u51b5\uff0c\u4ece\u4e0d\u77e5\u9053\u54ea\u4e2a\u6837\u4f8b\u770b\u5c31\u662f\u7c7b\u4f3c \\(l = 5\\) \uff0c\u7136\u540e\u4f60\u5728 \\(6\\) \u7684\u65f6\u5019\uff0c\u628a \\(5\\) \u5f39\u6389\u4e86\uff0c\u4f46\u662f\u5168\u5c40\u7684\u60c5\u51b5\u4e0b\u8fd8\u6709\u4e00\u4e2a \\(4\\) \u5728\u5e95\u4e0b\u9876\u7740\u3002 \u89c2\u5bdf\u624b\u6a21\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c \\(l = 5\\) \uff0c\u8bb0\u5f55 \\(i\\) \u5165\u6808\u7684\u65f6\u5019\uff0c\u6808\u9876\u4e3a \\(lst(i)\\) \uff0c\u90a3\u4e48\u5728 \\(4\\) \u4e4b\u540e\u5982\u679c\u51fa\u73b0 \\(4, 4, 4\\) \u8fd9\u6837\u7684\u8fde\u7eed\u6bb5\uff0c\u663e\u7136\u5c31\u662f\u4e00\u4e2a\u4e00\u4e2a\u4e00\u4e2a\u6210\u529f\u7684\u5143\u7ec4\u3002 \u95ee\u9898\u8f6c\u5316\u4e3a\u8003\u8651\u5bf9\u4e8e \\(lst\\) \uff0c\u5728\u7ed9\u5b9a\u533a\u95f4\u5185\u6c42\u6709\u591a\u5c11\u4e2a \\(lst < l\\) \uff0c\u4e3b\u5e2d\u6811\u4e00\u4e0b\u5373\u53ef\uff0c \\(\\log(n)\\) \u3002 \u4e5f\u53ef\u4ee5\u5dee\u5206\u4e4b\u540e\u8f6c\u5316\u6210\u4e8c\u7ef4\u6570\u70b9\u4f7f\u7528 Fenwick\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 5e5 + 10 ; int root [ si ]; int n , q , a [ si ], b [ si ]; class president_tree { private : struct node { int ls , rs ; int val ; } t [ si * 40 ]; int cnt = 0 ; int Node () { ++ cnt ; t [ cnt ]. ls = t [ cnt ]. rs = 0 ; t [ cnt ]. val = 0 ; return cnt ; } inline void pushup ( int p ) { t [ p ]. val = t [ t [ p ]. ls ]. val + t [ t [ p ]. rs ]. val ; } public : int build ( int l , int r ) { int p = Node (); if ( l == r ) return p ; int mid = ( l + r ) >> 1 ; t [ p ]. ls = build ( l , mid ), t [ p ]. rs = build ( mid + 1 , r ); pushup ( p ); return p ; } int insert ( int lst , int l , int r , int x ) { int p = Node (); if ( l == r ) { t [ p ]. val = 1 ; return p ; } int mid = ( l + r ) >> 1 ; if ( x <= mid ) t [ p ]. rs = t [ lst ]. rs , t [ p ]. ls = insert ( t [ lst ]. ls , l , mid , x ); else t [ p ]. ls = t [ lst ]. ls , t [ p ]. rs = insert ( t [ lst ]. rs , mid + 1 , r , x ); pushup ( p ); return p ; } int query ( int p , int l , int r , int L , int R ) { if ( L <= l && r <= R ) return t [ p ]. val ; int ret = 0 , mid = ( l + r ) >> 1 ; if ( L <= mid ) ret += query ( t [ p ]. ls , l , mid , L , R ); if ( R > mid ) ret += query ( t [ p ]. rs , mid + 1 , r , L , R ); return ret ; } } tr ; struct obj { int l , i ; bool operator < ( const obj & b ) { return l < b . l ; } } w [ si ]; int L [ si ], stk [ si ]; int main () { // freopen(\"ex_stack1.in\", \"r\", stdin); // freopen(\"ex_stack1.out\", \"w\", stdout); cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> q ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; for ( int i = 1 ; i <= n ; ++ i ) cin >> b [ i ]; int cnt = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { while ( cnt && ( a [ stk [ cnt ]] == a [ i ] || b [ stk [ cnt ]] <= b [ i ])) -- cnt ; L [ i ] = stk [ cnt ] + 1 ; stk [ ++ cnt ] = i ; } for ( int i = 1 ; i <= n ; ++ i ) w [ i ]. i = i , w [ i ]. l = L [ i ]; sort ( w + 1 , w + 1 + n ), root [ 0 ] = tr . build ( 1 , n ); int pp = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { root [ i ] = root [ i - 1 ]; while ( pp <= n && w [ pp ]. l == i ) root [ i ] = tr . insert ( root [ i ], 1 , n , w [ pp ]. i ), ++ pp ; } for ( int nw = 1 ; nw <= q ; ++ nw ) { int l , r ; cin >> l >> r ; cout << tr . query ( root [ l ], 1 , n , l , r ) << endl ; } return 0 ; } \u8003\u573a\u601d\u8003\u7684\u65f6\u5019\u95ee\u9898\u51fa\u5728\uff0c\u6211\u4e00\u76f4\u5728\u8003\u8651\u4e0a\u4e00\u4e2a good\uff0c\u7136\u540e\u4e2d\u95f4\u8fd9\u4e00\u6bb5\u53ef\u4ee5\u600e\u4e48\u641e\u6ca1\u60f3\u6e05\u695a\u3002 \u8fd8\u662f\u6700\u540e\u53d1\u73b0\u4e86\u8fd9\u4e2a\u8fde\u7eed\u6bb5\u624d\u60f3\u5230\u7684\uff0c\u5176\u5b9e\u4e5f\u662f\uff0c\u8003\u573a\u601d\u8def\u4e0d\u6e05\u6670\uff0c\u611f\u89c9\u4e0d\u592a\u80fd\u62bd\u8c61\u51fa\u95ee\u9898\u5177\u4f53\u5728\u54ea\u91cc\uff1f\u8fd9\u4e2a\u8be5\u548b\u89e3\u51b3\u554a\u3002","title":"T1"},{"location":"sol/other/noiol2022/#t2","text":"\u5c31\uff0c\u4e0d\u59a8\u6309\u7167\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u3002 \u4e3a\u4ec0\u4e48\u5462\uff0c\u56e0\u4e3a\u6211\u4eec\u60f3\u505a\u7684\u662f\u4e8b\u60c5\u662f\u6bd4\u8f83\u65b9\u4fbf\u7684\u5904\u7406\u4ea4\u96c6\uff0c\u5e76\u4e14\u4fdd\u8bc1\u6ca1\u6709\u5305\u542b\u5173\u7cfb\u3002 \u663e\u7136\u5bf9\u4e8e\u4e00\u4e2a\u96c6\u5408\uff0c\u6700\u4f18\u7684\u4e00\u5b9a\u662f\u6ee1\u8db3\u6761\u4ef6\u91cc\u9762\u6700\u5c0f\u7684\u96c6\u5408\u3002 \u4e8e\u662f\u6211\u4eec\u626b\u4e00\u904d\u6bcf\u4e2a\u96c6\u5408\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e\uff0c\u6211\u4eec\u52a8\u6001\u8bb0\u5f55\u5f53\u524d\u8986\u76d6\u4e86\u8fd9\u4e2a\u6761\u4ef6\u7684\u6700\u5c0f\u7684\u96c6\u5408\u662f\u5565\u3002 \u8fd9\u4e2a\u56e0\u4e3a\u4ece\u5927\u5230\u5c0f\u4e86\u6240\u4ee5\u76f4\u63a5\u987a\u5e8f\u679a\u4e3e\u5373\u53ef\uff0c\u7136\u540e argue \u4e00\u4e0b\u53ef\u4e0d\u53ef\u884c\u5c31\u884c\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 // author : black_trees #include <cmath> #include <cstdio> #include <vector> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; const int si = 2e6 + 10 ; struct obj { int siz , id ; std :: vector < int > v ; void init () { siz = id = 0 , v . clear (); } bool operator < ( const obj & b ) const { return siz > b . siz ; } } p [ si ]; int n ; int bel [ si ], rec [ si ]; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { p [ i ]. init (), bel [ i ] = 0 , p [ i ]. id = i ; cin >> p [ i ]. siz ; for ( int j = 0 , x ; j < p [ i ]. siz ; ++ j ) cin >> x , p [ i ]. v . emplace_back ( x ); } sort ( p + 1 , p + 1 + n ); int u , v ; int col = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { u = v = 0 ; col = p [ i ]. id , rec [ p [ i ]. id ] = i ; for ( int j = 0 ; j < p [ i ]. siz ; ++ j ) { int t = p [ i ]. v [ j ]; int tmp = bel [ t ]; bel [ t ] = col ; if ( ! tmp ) tmp = col ; if ( ! u ) u = tmp ; else if ( u != tmp ) v = tmp ; if ( u && v ) { n = -1 ; p [ i ]. siz = -1 ; } } } if ( n != -1 ) cout << \"NO\" << endl ; else { if ( u == col || v == col ); else if ( p [ rec [ u ]]. siz > p [ rec [ v ]]. siz ) u = col ; else v = col ; cout << \"YES\" << endl ; cout << u << \" \" << v << endl ; } } return 0 ; }","title":"T2"},{"location":"sol/other/noiol2022/#t3","text":"\u4ee5\u4e3a\u81ea\u5df1\u80fd\u505a\u51fa\u6765\u60f3\u4e86\u5927\u534a\u5929\u7ed3\u679c\u4e00\u5206\u6ca1\u6709\uff0c\u6700\u540e\u8d76\u7d27\u53bb\u8865 T1\uff0c\u7ed3\u679c\u624b\u6b8b\u6253\u6302\u4e86\u4e3b\u5e2d\u6811\u3002 \u53ef\u4ee5\u4e0d\u7528\u4e09\u7ef4\u504f\u5e8f\uff0c\u5f88\u5999\u7684\u601d\u8def\u3002 \u4f60\u5bf9\u4e8e\u8fd9\u79cd \\(\\sum\\sum f(i,j)\\) \u7684\u5f0f\u5b50\uff0c\u5904\u7406\u5957\u8def\u76ee\u524d\u6765\u770b\u65e0\u975e\u5c31\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u6b63\u653b\uff0c\u76f4\u63a5\u8003\u8651\u600e\u4e48\u8f6c\u5316\u8ba1\u7b97\u8d21\u732e\u7684\u65b9\u5f0f\uff0c\u53e6\u5916\u4e00\u79cd\u5c31\u662f\u8003\u8651\u6b63\u96be\u5219\u53cd\uff0c\u6211\u4eec\u6c42\u51fa \\(U\\) \u548c\u7b54\u6848\u7684\u8865\u96c6\u5c31\u884c\u4e86\u3002 \u8fd9\u9898\u5c31\u662f\u8003\u8651\uff0c\u5047\u8bbe\u6240\u6709\u4f4d\u7f6e\u90fd\u505a\u4e86\u8d21\u732e\uff0c\u603b\u7b54\u6848\u663e\u7136\u662f \\(2n\\sum a(i,j)\\) \u3002 \u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u7b97\u6709\u591a\u5c11\u4e2a \\(a(i, j)\\) \u6ca1\u505a\u51fa\u8d21\u732e\u5c31\u884c\u3002 \u7b54\u6848\u7684 \\(\\min, \\max\\) \u91cc\u9762\u662f\u7c7b\u4f3c\u7684\uff0c\u8fd9\u91cc\u53ea\u8003\u8651 \\(\\min\\) \uff1a \u663e\u7136\uff0c\u5bf9\u4e8e\u4e00\u4e2a \\(a(k, i) + a(k, j)\\) \uff0c\u5b83\u4e0d\u4f1a\u5bf9 \\(\\min\\) \u505a\u51fa\u8d21\u732e\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728 \\(k^\\prime\\) \uff0c\u4f7f\u5f97 \\(a(k^\\prime, i) + a(k^\\prime, j) \\le a(k, i) + a(k, j)\\) \u3002\u4e8e\u662f\u6211\u4eec\u5bf9\u4e8e\u4e00\u4e2a \\(i\\) \uff0c\u6570\u4e00\u4e0b\u6709\u591a\u5c11\u4e2a \\(j\\) \u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\u5c31\u884c\u3002 \u7136\u540e\u5c31\u5957\u8def\u7684\u79fb\u9879\uff0c\u628a \\(i, j\\) \u5206\u522b\u653e\u5230 \\(\\le\\) \u4e24\u8fb9\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u4e8c\u7ef4\u504f\u5e8f\u3002 \u4e8e\u662f\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5373\u53ef\uff0c\u5bf9\u4e8e \\(\\max\\) \u540c\u7406\u3002 \u8fd9\u91cc\u76f8\u5f53\u4e8e\u53ea\u8003\u8651\u4e86\u6709 \\(3\\) \u884c\u88ab\u9009\u51fa\u6765\u7684\u60c5\u51b5\uff0c\u4e8e\u662f\u6211\u4eec\u679a\u4e3e \\(m!\\) \u79cd\u53ef\u80fd\u505a\u4e00\u4e0b\u5c31\u884c\u3002 \u6ce8\u610f\u6211\u4eec \\(\\min, \\max\\) \u540c\u65f6\u505a\u7684\u65f6\u5019\u53ef\u80fd\u4e24\u8fb9\u53d6\u7b49\uff0c\u8003\u8651\u5f3a\u5236\u94a6\u5b9a\u5927\u5c0f\uff0c\u968f\u4fbf\u9009\u4e00\u8fb9\u5c31\u884c\u3002 \u590d\u6742\u5ea6 \\(O(n\\log n)\\) \uff0c\u5e26\u4e00\u4e2a \\(4!\\) \u5e38\u6570\u3002\u6811\u72b6\u6570\u7ec4\u8bb0\u5f97\u5f00\u4e24\u500d\u7136\u540e\u5e73\u79fb\u4e00\u4e0b\uff0c\u56e0\u4e3a\u53ef\u80fd\u6709\u8d1f\u6570\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' #define int long long using namespace std ; using i64 = long long ; const int si = 2e5 + 5 ; const int V = si << 1 ; const int inf = 0x3f3f3f3f3f3f3f3fll ; int n , m ; int a [ 5 ][ si ], ord [] = { 1 , 2 , 3 , 4 }; class Fenwick { private : int t [ V + 10 ]; inline int lowbit ( int x ) { return x & - x ; } public : void init () { memset ( t , 0 , sizeof t ); } void add ( int x , int v ) { while ( x <= V ) t [ x ] += v , x += lowbit ( x ); } int que ( int x ) { int ret = 0 ; while ( x ) ret += t [ x ], x -= lowbit ( x ); return ret ; } } tr ; struct Operations { int tyq , x , y , v ; Operations () { tyq = x = y = v = 0 ; } Operations ( int a , int b , int c , int d ) : tyq ( a ), x ( b ), y ( c ), v ( d ) {} bool operator < ( const Operations & t ) const { if ( x != t . x ) return x < t . x ; return tyq < t . tyq ; } } b [ si << 1 ]; int solve ( int p []) { int e = p [ 0 ], f = p [ 1 ], g = p [ 2 ]; tr . init (); int ret = 0 , cnt = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { b [ ++ cnt ] = Operations ( 1 , a [ e ][ i ] - a [ f ][ i ], a [ f ][ i ] - a [ g ][ i ], 0 ); b [ cnt ]. x += ( e > f ), b [ cnt ]. y += ( f > g ); b [ ++ cnt ] = Operations ( 2 , a [ f ][ i ] - a [ e ][ i ], a [ g ][ i ] - a [ f ][ i ], a [ f ][ i ]); } sort ( b + 1 , b + 1 + cnt ); for ( int i = 1 ; i <= cnt ; ++ i ) { auto [ tyq , x , y , v ] = b [ i ]; if ( tyq == 1 ) tr . add ( y + si , 1 ); if ( tyq == 2 ) ret += v * tr . que ( y + si ); } return ret ; } signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> m >> n ; for ( int i = 1 ; i <= m ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { cin >> a [ i ][ j ]; } } for ( int i = m + 1 ; i <= 4 ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { a [ i ][ j ] = a [ i - m ][ j ]; } } int ans = 0 ; for ( int i = 1 ; i <= 4 ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { ans += ( 2l l * n * a [ i ][ j ]); } } do { ans -= solve ( ord ); } while ( next_permutation ( ord , ord + 4 )); cout << ans << endl ; return 0 ; }","title":"T3"},{"location":"sol/other/thupc2023-pre/","text":"\u597d\u50cf\u662f\u7b2c\u4e09\u6b21\u8fd8\u662f\u7b2c\u4e8c\u6b21\u6253 THUPC \u4e86\uff0c\u4e0a\u6b21\u548c Sept \u8fd8\u6709 clf \u7ec4\u961f\uff0c\u7ed3\u679c\u5927\u5bb6\u90fd\u5f00\u6446\u4e86\uff09 \u8fd9\u6b21\u548c JR \u8fd8\u6709 leexzq \u7ec4\u961f\uff0c\u961f\u540d\uff1a \u94f6\u724c\u9009\u624b\u5594\u76ae\u53ea\u56e0 \u3002 \u6210\u5206\u6bd4\u8f83\u590d\u6742\uff1b \u6211\u8d21\u732e\u4e86\u6700\u540e\u4e00\u9898\uff0c\u7b2c\u4e8c\u9898\uff0c\u7b2c\u4e00\u9898\u7684\u4e00\u534a\u3002 \u53ea\u5199\u70b9\u6211\u4f1a\u7684\u3002 THUPC \u600e\u4e48\u8fd9\u4e48\u559c\u6b22\u5206\u8ba8\u535a\u5f08\u8bba\u548c\u5de5\u4e1a\u9898/zhem \u9898\u9762 A - \u5927\u5bcc\u7fc1 \u03c8(\uff40\u2207\u00b4)\u03c8 \u9996\u5148\u4e00\u4e2a\u6bd4\u8f83\u663e\u7136\u7684\u4e8b\u60c5\u662f\uff0c\u5982\u679c\u6211\u4eec\u8003\u8651\u65e0\u6743\u6811\u7684\u60c5\u51b5\uff0c\u663e\u7136\u5148\u624b\u6700\u4f18\u7b56\u7565\u662f\u9009 dep \u5c0f\u7684\u3002 \u5982\u679c\u540c\u5c42\u6765\u770b\uff0c\u90a3\u4f18\u5148\u9009 siz \u5927\u7684\uff0c\u597d\uff0c\u73b0\u5728\u6211\u4eec\u4f1a\u65e0\u6743\u6811\u4e86\u3002 \u90a3\u4e48\u8003\u8651\u5e26\u6743\u600e\u4e48\u505a\uff0c\u4e5f\u5f88\u7b80\u5355\uff0c\u5728\u6ee1\u8db3\u4ee5\u4e0a\u6761\u4ef6\u7684\u60c5\u51b5\u4e0b\u6211\u4eec\u5c3d\u91cf\u9009 w \u5c0f\u7684\u5c31\u884c\uff01 \u7ed3\u8bba\u6211\u662f\u611f\u6027\u7406\u89e3\u8bc1\u660e\u7684\uff0c\u6216\u8005\u8bf4\u778e\u8499\u611f\u6027\u7406\u89e3\u4e86\u4e00\u4e0b\u76f4\u63a5\u5f00\u83bd\u4e86\uff0c\u6240\u4ee5\u5c31\u4e0d\u653e\u4e0a\u6765\u4e86\uff0c\u6709\u4f1a\u8bc1\u660e\u7684\u4f6c\u53ef\u4ee5\u8bc4\u8bba\u533a\u53d1\u8868\u9ad8\u89c1\uff01 \u6240\u4ee5\u6211\u4eec\u5148\u7ed9\u8282\u70b9\u6309\u7167 \\(dep - siz + w\\) \u6392\u5e8f\uff0c\u4f18\u5148\u9009\u8fd9\u4e2a\u6743\u503c\u66f4\u5c0f\u7684\u5c31\u884c\u3002 \u7136\u540e\u600e\u4e48\u7ef4\u62a4\u7b54\u6848\u5462\uff1f\u8fd9\u4e2a\u662f\u4e00\u4e2a\u7ecf\u5178 trick \u554a\uff0c\u8981\u67e5\u5b50\u6811\u548c\u7956\u5148\uff0c\u6211\u4eec\u76f4\u63a5 dfs \u5e8f\u62c9\u4e0b\u6765\uff0cFenwick \u7ef4\u62a4\u4e00\u4e0b\u5c31\u884c\u3002 \u4ee3\u7801\u662f xzq \u5199\u7684\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 //I play to win #include <bits/stdc++.h> #define ll long long #define ull unsigned ll #define pi pair<int,int> #define ld long double #define vi vector<int> #define all(x) begin(x),end(x) using namespace std ; inline ll read () { ll x = 0 , f = 1 ; char c = getchar (); for (; ! isdigit ( c ); c = getchar ()) if ( c == '-' ) f = -1 ; for (; isdigit ( c ); c = getchar ()) x = ( x << 3 ) + ( x << 1 ) + ( c ^ 48 ); return x * f ; } inline void out ( ll x ){ if ( x > 9 ) out ( x / 10 ); putchar ( x % 10 ^ 48 );} inline void print ( ll x , char c = '\\n' ){ if ( x < 0 ) putchar ( '-' ), x =- x ; out ( x ), putchar ( c );} const int N = 5e5 + 10 ; int fa [ N ], dfn [ N ], w [ N ], siz [ N ], dep [ N ], id [ N ]; vector < int > v [ N ]; struct BIT { int c [ N ]; void add ( int x , int v ){ for (; x < N ; x += x &- x ) c [ x ] += v ;} int ask ( int x ){ int r = 0 ; for (; x ; x &= x -1 ) r += c [ x ]; return r ;} } T [ 2 ][ 2 ]; void dfs ( int x ) { siz [ x ] = 1 , dep [ x ] = dep [ fa [ x ]] + 1 , dfn [ x ] =++ dfn [ 0 ]; for ( int y : v [ x ]) dfs ( y ), siz [ x ] += siz [ y ]; } int main () { int n = read (); ll ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) w [ i ] = read (), id [ i ] = i ; for ( int i = 2 ; i <= n ; i ++ ) v [ fa [ i ] = read ()]. push_back ( i ); dfs ( 1 ), sort ( id + 1 , id + n + 1 ,[]( int x , int y ){ return w [ x ] + dep [ x ] - siz [ x ] < w [ y ] + dep [ y ] - siz [ y ];}); for ( int i = 1 ; i <= n ; i ++ ) { int k = i & 1 , x = id [ i ], l = dfn [ x ], r = dfn [ x ] + siz [ x ] -1 ; if ( k ) ans -= T [ k ^ 1 ][ 0 ]. ask ( l ), ans += T [ k ^ 1 ][ 1 ]. ask ( r ) - T [ k ^ 1 ][ 1 ]. ask ( l -1 ), ans -= w [ x ]; //\u5148\u624b else ans += T [ k ^ 1 ][ 0 ]. ask ( l ), ans -= T [ k ^ 1 ][ 1 ]. ask ( r ) - T [ k ^ 1 ][ 1 ]. ask ( l -1 ); T [ k ][ 0 ]. add ( l , 1 ), T [ k ][ 0 ]. add ( r + 1 , -1 ), T [ k ][ 1 ]. add ( l , 1 ); // cout<<x<<\" \"<<l<<\" \"<<r<<\" \"<<ans<<endl; } print ( ans ); } B - \u62e7\u87ba\u4e1d \u03c8(\uff40\u2207\u00b4)\u03c8 \u9996\u5148\u89c2\u5bdf\u53d1\u73b0\uff0c\u5982\u679c \\(k \\ge n\\) \u663e\u7136\u4e00\u6b65\u5bf9\u5427\uff0c\u5982\u679c \\(k < n\\) \u7684\u65f6\u5019 \\(k = 1\\) \u663e\u7136\u65e0\u89e3\u5bf9\u5427\u3002 \u4e8e\u662f\u6211\u4eec\u8003\u8651\u5269\u4e0b\u7684\u90e8\u5206\uff08 \\(k < n, k > 1\\) \uff09\u600e\u4e48\u505a\u3002 \u624b\u63a8\u6a21\u62df\u53ef\u4ee5\u53d1\u73b0\uff0c \\(k = 2\\) \u7b54\u6848\u662f \\(2^{n - 2}\\) \u3002 \\(k \\ge 3\\) \u7684\u624b\u63a8\u5f88\u96be\u53d7\u3002 \u6ce8\u610f\u5230\u8fd9\u4e2a\u95ee\u9898\u5177\u6709\u6781\u5176\u660e\u663e\u7684\u5355\u8c03\u6027\uff0c\u6240\u4ee5\u6211\u4eec\u4e8c\u5206\u7ec4\u88c5\u4e86\u591a\u5c11\u4e2a\u6a21\u5757\uff0c\u7136\u540e\u679a\u4e3e\u5929\u6570\uff0c\u663e\u7136\u7684\u7b56\u7565\u662f\u8981\u5e73\u5747\u5206\u914d\uff0c\u56e0\u4e3a\u8001\u677f\u4f1a\u5c3d\u529b\u4e0d\u8ba9\u5c0f E \u8fbe\u6210\u76ee\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u6700\u5c0f\u5316\u635f\u5931\u3002 \u7136\u540e check \u4e00\u4e0b\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u4e86\uff0c\u8fd9\u4e2a\u4e1c\u897f\u590d\u6742\u5ea6 \\(O(n^2\\log n)\\) \uff0c\u4e5f\u4e0d\u77e5\u9053\u548b\u4f18\u5316\u3002 \u4e8e\u662f\u9009\u62e9\u4e86\u4e0b\u7b56\uff0c\u8003\u8651 OEIS\uff0c\u4e8e\u662f\u6211\u6253\u51fa \\(k = 3\\) \u7684\u524d\u51e0\u9879\uff0c\u8f93\u8fdb OEIS \u4e0b\u53d1\u73b0\u6709\u8fd9\u4e2a\u6570\u5217\uff01\uff01\uff01 https://oeis.org/A073941 \u7136\u540e\u6211\u6ce8\u610f\u5230\u516c\u5f0f\u662f \\(a(n) = \\lceil \\sum\\limits_{k = 1}^{n - 1} a(k) / 2\\rceil, n \\ge 2, a(1) = 1\\) \u3002 \u4e8e\u662f\u6211\u5c1d\u8bd5\u628a\u8fd9\u91cc\u7684\u5e38\u6570\u9879\u66ff\u6362\u6210 \\(k\\) \u76f8\u5173\u7684\u5f0f\u5b50\uff0c\u53d1\u73b0\u53ea\u6709 \\(2\\) \uff0c\u4e8e\u662f\u6211\u4eec\u628a\u5b83\u53d8\u6210 \\(k - 1\\) \u3002 \u5e26\u5165\u548c \\(k = 4\\) \u66b4\u529b\u5bf9\u62cd\u53d1\u73b0\u662f\u5bf9\u7684\u3002 \u4e8e\u662f\u6211\u4eec\u5199\u4e2a\u9ad8\u7cbe\u6216\u8005 py \u4ea4\u4e0a\u53bb\u5c31\u884c\u4e86\uff01\uff01\uff01 \u9ad8\u7cbe\u5ea6\u677f\u5b50\u6ca1\u5199\u6574\u9664\uff0c\u5c31\u76f4\u63a5\u73b0\u5b66 py \u4e86\uff1a \u4ee3\u7801\u6211\u5199\u7684\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # author : black_trees n , k = map ( int , input () . split ()) if k >= n : print ( 1 ) if k < n and k == 1 : print ( \"Poor E.S.!\" ) if k < n and k == 2 : print ( 2 ** ( n - 2 )) if k < n and k >= 3 : ans = 1 s = k - 1 for i in range ( k - 1 , n ): ans = ( s + k - 2 ) // ( k - 1 ) s = s + ans print ( ans ) \u4e71\u641e\u505a\u6cd5\uff0c\u53ea\u662f\u535a\u541b\u4e00\u7b11\uff0c\u4e0d\u5fc5\u5728\u610f\u3002 J - \u6b3a\u8bc8\u6e38\u620f \u03c8(\uff40\u2207\u00b4)\u03c8 \u76d2\uff01 \u542c\u8bf4\u662f\u7eb3\u4ec0\u5747\u8861\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u63a8\u5f0f\u5b50\uff0c\u4f46\u662f\u6211\u4e0d\u4f1a\uff01 \u53ef\u4ee5\u770b\u770b\u53ef\u7231 tyq \u7684\u9898\u89e3\uff1a P9142 [THUPC 2023 \u521d\u8d5b] LIAR GAME! \u9898\u89e3 & \u7eb3\u4ec0\u5747\u8861\u6d45\u63a2 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <cassert> #include <iostream> #include <algorithm> #define endl '\\n' // #define int long long using namespace std ; using i64 = long long ; using ldb = long double ; using u64 = unsigned long long ; constexpr i64 safe_mod ( i64 x , i64 m ) { return x %= m , x < 0 ? x + m : x ; } constexpr i64 pow_mod_constexpr ( i64 x , i64 n , int m ) { if ( m == 1 ) return 0 ; unsigned _m = m ; uint64_t r = 1 , _x = safe_mod ( x , m ); for (; n ; n >>= 1 , _x = _x * _x % _m ) if ( n & 1 ) r = r * _x % m ; return r ; } constexpr bool is_prime_constexpr ( int n ) { if ( n <= 1 ) return false ; if ( n == 2 || n == 7 || n == 61 ) return true ; if ( n % 2 == 0 ) return false ; i64 d = n - 1 ; while ( ~ d & 1 ) d /= 2 ; for ( i64 a : { 2 , 7 , 61 }) { i64 t = d , y = pow_mod_constexpr ( a , t , n ); while ( t != n - 1 && y != 1 && y != n - 1 ) y = y * y % n , t <<= 1 ; if ( y != n - 1 && t % 2 == 0 ) return false ; } return true ; } constexpr pair < i64 , i64 > inv_gcd ( i64 a , i64 b ) { a = safe_mod ( a , b ); if ( a == 0 ) return { b , 0 }; i64 s = b , t = a , m0 = 0 , m1 = 1 ; while ( t ) { i64 u = s / t ; s -= t * u , m0 -= m1 * u ; i64 tmp = s ; s = t , t = tmp , tmp = m0 , m0 = m1 , m1 = tmp ; } if ( m0 < 0 ) m0 += b / s ; return { s , m0 }; } struct Barrett_Reduction { unsigned m ; uint64_t im ; Barrett_Reduction ( unsigned m ) : m ( m ), im ( ~ 0ull / m + 1 ) {} unsigned mul ( unsigned a , unsigned b ) const { uint64_t z = ( uint64_t ) a * b , x = ( __uint128_t ) z * im >> 64 ; unsigned v = z - x * m ; return m <= v ? v + m : v ; } }; template < int m > struct static_modint { using _mint = static_modint ; public : static _mint raw ( int v ) { _mint x ; return x . _v = v , x ; } static_modint () : _v ( 0 ) {} template < class __Tp > static_modint ( __Tp v ) { i64 x = v % m ; _v = x < 0 ? x + m : x ; } unsigned val () const { return _v ; } _mint & operator ++ () { if ( ++ _v == m ) _v = 0 ; return * this ; } _mint & operator -- () { if ( ! _v -- ) _v = m - 1 ; return * this ; } _mint operator ++ ( int ) { _mint res = * this ; ++* this ; return res ; } _mint operator -- ( int ) { _mint res = * this ; --* this ; return res ; } _mint & operator += ( const _mint & rhs ) { _v += rhs . _v ; if ( _v >= m ) _v -= m ; return * this ; } _mint & operator -= ( const _mint & rhs ) { _v -= rhs . _v ; if ( _v >= m ) _v += m ; return * this ; } _mint & operator *= ( const _mint & rhs ) { uint64_t z = _v ; z *= rhs . _v , _v = z % m ; return * this ; } _mint & operator /= ( const _mint & rhs ) { return * this = * this * rhs . inv (); } _mint operator + () const { return * this ; } _mint operator - () const { return _mint () - * this ; } _mint pow ( i64 n ) const { assert ( 0 <= n ); _mint x = * this , r = 1 ; for (; n ; n >>= 1 , x *= x ) if ( n & 1 ) r *= x ; return r ; } _mint inv () const { if ( prime ) { assert ( _v ); return pow ( m - 2 ); } else { auto eg = inv_gcd ( _v , m ); assert ( eg . first == 1 ); return eg . second ; } } friend _mint operator + ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) += rhs ; } friend _mint operator - ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) -= rhs ; } friend _mint operator * ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) *= rhs ; } friend _mint operator / ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) /= rhs ; } friend bool operator == ( const _mint & lhs , const _mint & rhs ) { return lhs . _v == rhs . _v ; } friend bool operator != ( const _mint & lhs , const _mint & rhs ) { return lhs . _v != rhs . _v ; } private : unsigned _v ; static constexpr bool prime = is_prime_constexpr ( m ); }; using modint = static_modint < 998244353 > ; const int si = 2e6 + 10 ; int n ; modint a [ si ], b [ si ]; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n ; a [ 0 ] = b [ 0 ] = 1 , a [ 1 ] = 2 , b [ 1 ] = 3 ; for ( int i = 2 ; i <= n ; ++ i ) { a [ i ] = ( b [ i - 1 ] + ( i - 1 ) * a [ i - 1 ]); a [ i ] = a [ i ] / i , a [ i ] *= 2 , b [ i ] = b [ i - 1 ] + a [ i ]; } modint t = n + 2 ; modint ans = 2 * t . inv (); cout << ans . val () << \" \" ; for ( int i = 1 ; i <= n ; ++ i ) cout << ( ans = t . inv ()). val () << \" \\n \" [ i == n ]; modint ss = 0 ; for ( int i = 0 ; i <= n ; ++ i ) ss += a [ i ]; for ( int i = 0 ; i <= n ; ++ i ) cout << ( ans = a [ i ] / ss ). val () << \" \\n \" [ i == n ]; return 0 ; } K - \u4f17\u6570 \u03c8(\uff40\u2207\u00b4)\u03c8 JR \u548c xzq \u5c0f\u8ba8\u8bba\u4e86\u4e00\u624b\u5c31\u4f1a\u4e86\uff0c\u6211\u6ca1\u770b\u3002 \u5177\u4f53\u5c31\u662f\uff0c\u5047\u8bbe\u5f53\u524d\u6700\u5927\u6570\u662f \\(mx\\) \uff0c\u6709 \\(k\\) \u4e2a \\(mx\\) \uff0c\u5c31\u653e \\(k\\) \u4e2a\u5728\u540e\u9762\uff0c\u7136\u540e\u8003\u8651\u5bf9 \\(mx - 1\\) \u9012\u5f52\u505a\u8fd9\u4e2a\u8fc7\u7a0b\u3002 \u4ee3\u7801 xzq \u5199\u7684\uff0cJR \u6253\u6446\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 //I play to win #include <bits/stdc++.h> #define ll long long #define ull unsigned ll #define pi pair<int,int> #define ld long double #define vi vector<int> #define all(x) begin(x),end(x) using namespace std ; inline ll read () { ll x = 0 , f = 1 ; char c = getchar (); for (; ! isdigit ( c ); c = getchar ()) if ( c == '-' ) f = -1 ; for (; isdigit ( c ); c = getchar ()) x = ( x << 3 ) + ( x << 1 ) + ( c ^ 48 ); return x * f ; } inline void out ( ll x ){ if ( x > 9 ) out ( x / 10 ); putchar ( x % 10 ^ 48 );} inline void print ( ll x , char c = '\\n' ){ if ( x < 0 ) putchar ( '-' ), x =- x ; out ( x ), putchar ( c );} const int N = 5e5 + 10 ; ll a [ N ], b [ N ], s [ N ]; int main () { int n = read (); ll use = 0 , ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) a [ i ] = b [ i ] = read (); sort ( b + 1 , b + n + 1 ); for ( int i = 1 ; i <= n ; i ++ ) s [ i ] = b [ i ] + s [ i -1 ]; for ( int i = n ; i ; i -- ) { if ( a [ i ] < use ) continue ; int l = upper_bound ( b + 1 , b + n + 1 , use ) - b , r = upper_bound ( b + 1 , b + n + 1 , a [ i ]) - b -1 ; ans += i * ( s [ r ] - s [ l -1 ] - use * ( r - l + 1 ) + ( a [ i ] - use ) * ( n - r )), use = a [ i ]; // cout<<l<<\" \"<<r<<\" \"<<ans<<endl; } print ( ans ); } M - \u4e16\u754c\u676f \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e2d\u56fd\u961f\u725b\u903c\uff01 Code hyl xzq 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cout << \"China\" << endl ; return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 //I play to win #include <bits/stdc++.h> #define ll long long #define ull unsigned ll #define pi pair<int,int> #define ld long double #define vi vector<int> #define all(x) begin(x),end(x) using namespace std ; inline ll read () { ll x = 0 , f = 1 ; char c = getchar (); for (; ! isdigit ( c ); c = getchar ()) if ( c == '-' ) f = -1 ; for (; isdigit ( c ); c = getchar ()) x = ( x << 3 ) + ( x << 1 ) + ( c ^ 48 ); return x * f ; } inline void out ( ll x ){ if ( x > 9 ) out ( x / 10 ); putchar ( x % 10 ^ 48 );} inline void print ( ll x , char c = '\\n' ){ if ( x < 0 ) putchar ( '-' ), x =- x ; out ( x ), putchar ( c );} const int N = 1e5 + 10 ; int main () { puts ( \"China\" ); }","title":"THUPC2023 \u521d\u8d5b\u9898\u89e3"},{"location":"sol/other/thupc2023-pre/#a-","text":"\u9996\u5148\u4e00\u4e2a\u6bd4\u8f83\u663e\u7136\u7684\u4e8b\u60c5\u662f\uff0c\u5982\u679c\u6211\u4eec\u8003\u8651\u65e0\u6743\u6811\u7684\u60c5\u51b5\uff0c\u663e\u7136\u5148\u624b\u6700\u4f18\u7b56\u7565\u662f\u9009 dep \u5c0f\u7684\u3002 \u5982\u679c\u540c\u5c42\u6765\u770b\uff0c\u90a3\u4f18\u5148\u9009 siz \u5927\u7684\uff0c\u597d\uff0c\u73b0\u5728\u6211\u4eec\u4f1a\u65e0\u6743\u6811\u4e86\u3002 \u90a3\u4e48\u8003\u8651\u5e26\u6743\u600e\u4e48\u505a\uff0c\u4e5f\u5f88\u7b80\u5355\uff0c\u5728\u6ee1\u8db3\u4ee5\u4e0a\u6761\u4ef6\u7684\u60c5\u51b5\u4e0b\u6211\u4eec\u5c3d\u91cf\u9009 w \u5c0f\u7684\u5c31\u884c\uff01 \u7ed3\u8bba\u6211\u662f\u611f\u6027\u7406\u89e3\u8bc1\u660e\u7684\uff0c\u6216\u8005\u8bf4\u778e\u8499\u611f\u6027\u7406\u89e3\u4e86\u4e00\u4e0b\u76f4\u63a5\u5f00\u83bd\u4e86\uff0c\u6240\u4ee5\u5c31\u4e0d\u653e\u4e0a\u6765\u4e86\uff0c\u6709\u4f1a\u8bc1\u660e\u7684\u4f6c\u53ef\u4ee5\u8bc4\u8bba\u533a\u53d1\u8868\u9ad8\u89c1\uff01 \u6240\u4ee5\u6211\u4eec\u5148\u7ed9\u8282\u70b9\u6309\u7167 \\(dep - siz + w\\) \u6392\u5e8f\uff0c\u4f18\u5148\u9009\u8fd9\u4e2a\u6743\u503c\u66f4\u5c0f\u7684\u5c31\u884c\u3002 \u7136\u540e\u600e\u4e48\u7ef4\u62a4\u7b54\u6848\u5462\uff1f\u8fd9\u4e2a\u662f\u4e00\u4e2a\u7ecf\u5178 trick \u554a\uff0c\u8981\u67e5\u5b50\u6811\u548c\u7956\u5148\uff0c\u6211\u4eec\u76f4\u63a5 dfs \u5e8f\u62c9\u4e0b\u6765\uff0cFenwick \u7ef4\u62a4\u4e00\u4e0b\u5c31\u884c\u3002 \u4ee3\u7801\u662f xzq \u5199\u7684\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 //I play to win #include <bits/stdc++.h> #define ll long long #define ull unsigned ll #define pi pair<int,int> #define ld long double #define vi vector<int> #define all(x) begin(x),end(x) using namespace std ; inline ll read () { ll x = 0 , f = 1 ; char c = getchar (); for (; ! isdigit ( c ); c = getchar ()) if ( c == '-' ) f = -1 ; for (; isdigit ( c ); c = getchar ()) x = ( x << 3 ) + ( x << 1 ) + ( c ^ 48 ); return x * f ; } inline void out ( ll x ){ if ( x > 9 ) out ( x / 10 ); putchar ( x % 10 ^ 48 );} inline void print ( ll x , char c = '\\n' ){ if ( x < 0 ) putchar ( '-' ), x =- x ; out ( x ), putchar ( c );} const int N = 5e5 + 10 ; int fa [ N ], dfn [ N ], w [ N ], siz [ N ], dep [ N ], id [ N ]; vector < int > v [ N ]; struct BIT { int c [ N ]; void add ( int x , int v ){ for (; x < N ; x += x &- x ) c [ x ] += v ;} int ask ( int x ){ int r = 0 ; for (; x ; x &= x -1 ) r += c [ x ]; return r ;} } T [ 2 ][ 2 ]; void dfs ( int x ) { siz [ x ] = 1 , dep [ x ] = dep [ fa [ x ]] + 1 , dfn [ x ] =++ dfn [ 0 ]; for ( int y : v [ x ]) dfs ( y ), siz [ x ] += siz [ y ]; } int main () { int n = read (); ll ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) w [ i ] = read (), id [ i ] = i ; for ( int i = 2 ; i <= n ; i ++ ) v [ fa [ i ] = read ()]. push_back ( i ); dfs ( 1 ), sort ( id + 1 , id + n + 1 ,[]( int x , int y ){ return w [ x ] + dep [ x ] - siz [ x ] < w [ y ] + dep [ y ] - siz [ y ];}); for ( int i = 1 ; i <= n ; i ++ ) { int k = i & 1 , x = id [ i ], l = dfn [ x ], r = dfn [ x ] + siz [ x ] -1 ; if ( k ) ans -= T [ k ^ 1 ][ 0 ]. ask ( l ), ans += T [ k ^ 1 ][ 1 ]. ask ( r ) - T [ k ^ 1 ][ 1 ]. ask ( l -1 ), ans -= w [ x ]; //\u5148\u624b else ans += T [ k ^ 1 ][ 0 ]. ask ( l ), ans -= T [ k ^ 1 ][ 1 ]. ask ( r ) - T [ k ^ 1 ][ 1 ]. ask ( l -1 ); T [ k ][ 0 ]. add ( l , 1 ), T [ k ][ 0 ]. add ( r + 1 , -1 ), T [ k ][ 1 ]. add ( l , 1 ); // cout<<x<<\" \"<<l<<\" \"<<r<<\" \"<<ans<<endl; } print ( ans ); }","title":"A - \u5927\u5bcc\u7fc1"},{"location":"sol/other/thupc2023-pre/#b-","text":"\u9996\u5148\u89c2\u5bdf\u53d1\u73b0\uff0c\u5982\u679c \\(k \\ge n\\) \u663e\u7136\u4e00\u6b65\u5bf9\u5427\uff0c\u5982\u679c \\(k < n\\) \u7684\u65f6\u5019 \\(k = 1\\) \u663e\u7136\u65e0\u89e3\u5bf9\u5427\u3002 \u4e8e\u662f\u6211\u4eec\u8003\u8651\u5269\u4e0b\u7684\u90e8\u5206\uff08 \\(k < n, k > 1\\) \uff09\u600e\u4e48\u505a\u3002 \u624b\u63a8\u6a21\u62df\u53ef\u4ee5\u53d1\u73b0\uff0c \\(k = 2\\) \u7b54\u6848\u662f \\(2^{n - 2}\\) \u3002 \\(k \\ge 3\\) \u7684\u624b\u63a8\u5f88\u96be\u53d7\u3002 \u6ce8\u610f\u5230\u8fd9\u4e2a\u95ee\u9898\u5177\u6709\u6781\u5176\u660e\u663e\u7684\u5355\u8c03\u6027\uff0c\u6240\u4ee5\u6211\u4eec\u4e8c\u5206\u7ec4\u88c5\u4e86\u591a\u5c11\u4e2a\u6a21\u5757\uff0c\u7136\u540e\u679a\u4e3e\u5929\u6570\uff0c\u663e\u7136\u7684\u7b56\u7565\u662f\u8981\u5e73\u5747\u5206\u914d\uff0c\u56e0\u4e3a\u8001\u677f\u4f1a\u5c3d\u529b\u4e0d\u8ba9\u5c0f E \u8fbe\u6210\u76ee\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u6700\u5c0f\u5316\u635f\u5931\u3002 \u7136\u540e check \u4e00\u4e0b\u5c31\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u4e86\uff0c\u8fd9\u4e2a\u4e1c\u897f\u590d\u6742\u5ea6 \\(O(n^2\\log n)\\) \uff0c\u4e5f\u4e0d\u77e5\u9053\u548b\u4f18\u5316\u3002 \u4e8e\u662f\u9009\u62e9\u4e86\u4e0b\u7b56\uff0c\u8003\u8651 OEIS\uff0c\u4e8e\u662f\u6211\u6253\u51fa \\(k = 3\\) \u7684\u524d\u51e0\u9879\uff0c\u8f93\u8fdb OEIS \u4e0b\u53d1\u73b0\u6709\u8fd9\u4e2a\u6570\u5217\uff01\uff01\uff01 https://oeis.org/A073941 \u7136\u540e\u6211\u6ce8\u610f\u5230\u516c\u5f0f\u662f \\(a(n) = \\lceil \\sum\\limits_{k = 1}^{n - 1} a(k) / 2\\rceil, n \\ge 2, a(1) = 1\\) \u3002 \u4e8e\u662f\u6211\u5c1d\u8bd5\u628a\u8fd9\u91cc\u7684\u5e38\u6570\u9879\u66ff\u6362\u6210 \\(k\\) \u76f8\u5173\u7684\u5f0f\u5b50\uff0c\u53d1\u73b0\u53ea\u6709 \\(2\\) \uff0c\u4e8e\u662f\u6211\u4eec\u628a\u5b83\u53d8\u6210 \\(k - 1\\) \u3002 \u5e26\u5165\u548c \\(k = 4\\) \u66b4\u529b\u5bf9\u62cd\u53d1\u73b0\u662f\u5bf9\u7684\u3002 \u4e8e\u662f\u6211\u4eec\u5199\u4e2a\u9ad8\u7cbe\u6216\u8005 py \u4ea4\u4e0a\u53bb\u5c31\u884c\u4e86\uff01\uff01\uff01 \u9ad8\u7cbe\u5ea6\u677f\u5b50\u6ca1\u5199\u6574\u9664\uff0c\u5c31\u76f4\u63a5\u73b0\u5b66 py \u4e86\uff1a \u4ee3\u7801\u6211\u5199\u7684\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # author : black_trees n , k = map ( int , input () . split ()) if k >= n : print ( 1 ) if k < n and k == 1 : print ( \"Poor E.S.!\" ) if k < n and k == 2 : print ( 2 ** ( n - 2 )) if k < n and k >= 3 : ans = 1 s = k - 1 for i in range ( k - 1 , n ): ans = ( s + k - 2 ) // ( k - 1 ) s = s + ans print ( ans ) \u4e71\u641e\u505a\u6cd5\uff0c\u53ea\u662f\u535a\u541b\u4e00\u7b11\uff0c\u4e0d\u5fc5\u5728\u610f\u3002","title":"B - \u62e7\u87ba\u4e1d"},{"location":"sol/other/thupc2023-pre/#j-","text":"\u76d2\uff01 \u542c\u8bf4\u662f\u7eb3\u4ec0\u5747\u8861\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u63a8\u5f0f\u5b50\uff0c\u4f46\u662f\u6211\u4e0d\u4f1a\uff01 \u53ef\u4ee5\u770b\u770b\u53ef\u7231 tyq \u7684\u9898\u89e3\uff1a P9142 [THUPC 2023 \u521d\u8d5b] LIAR GAME! \u9898\u89e3 & \u7eb3\u4ec0\u5747\u8861\u6d45\u63a2 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <cassert> #include <iostream> #include <algorithm> #define endl '\\n' // #define int long long using namespace std ; using i64 = long long ; using ldb = long double ; using u64 = unsigned long long ; constexpr i64 safe_mod ( i64 x , i64 m ) { return x %= m , x < 0 ? x + m : x ; } constexpr i64 pow_mod_constexpr ( i64 x , i64 n , int m ) { if ( m == 1 ) return 0 ; unsigned _m = m ; uint64_t r = 1 , _x = safe_mod ( x , m ); for (; n ; n >>= 1 , _x = _x * _x % _m ) if ( n & 1 ) r = r * _x % m ; return r ; } constexpr bool is_prime_constexpr ( int n ) { if ( n <= 1 ) return false ; if ( n == 2 || n == 7 || n == 61 ) return true ; if ( n % 2 == 0 ) return false ; i64 d = n - 1 ; while ( ~ d & 1 ) d /= 2 ; for ( i64 a : { 2 , 7 , 61 }) { i64 t = d , y = pow_mod_constexpr ( a , t , n ); while ( t != n - 1 && y != 1 && y != n - 1 ) y = y * y % n , t <<= 1 ; if ( y != n - 1 && t % 2 == 0 ) return false ; } return true ; } constexpr pair < i64 , i64 > inv_gcd ( i64 a , i64 b ) { a = safe_mod ( a , b ); if ( a == 0 ) return { b , 0 }; i64 s = b , t = a , m0 = 0 , m1 = 1 ; while ( t ) { i64 u = s / t ; s -= t * u , m0 -= m1 * u ; i64 tmp = s ; s = t , t = tmp , tmp = m0 , m0 = m1 , m1 = tmp ; } if ( m0 < 0 ) m0 += b / s ; return { s , m0 }; } struct Barrett_Reduction { unsigned m ; uint64_t im ; Barrett_Reduction ( unsigned m ) : m ( m ), im ( ~ 0ull / m + 1 ) {} unsigned mul ( unsigned a , unsigned b ) const { uint64_t z = ( uint64_t ) a * b , x = ( __uint128_t ) z * im >> 64 ; unsigned v = z - x * m ; return m <= v ? v + m : v ; } }; template < int m > struct static_modint { using _mint = static_modint ; public : static _mint raw ( int v ) { _mint x ; return x . _v = v , x ; } static_modint () : _v ( 0 ) {} template < class __Tp > static_modint ( __Tp v ) { i64 x = v % m ; _v = x < 0 ? x + m : x ; } unsigned val () const { return _v ; } _mint & operator ++ () { if ( ++ _v == m ) _v = 0 ; return * this ; } _mint & operator -- () { if ( ! _v -- ) _v = m - 1 ; return * this ; } _mint operator ++ ( int ) { _mint res = * this ; ++* this ; return res ; } _mint operator -- ( int ) { _mint res = * this ; --* this ; return res ; } _mint & operator += ( const _mint & rhs ) { _v += rhs . _v ; if ( _v >= m ) _v -= m ; return * this ; } _mint & operator -= ( const _mint & rhs ) { _v -= rhs . _v ; if ( _v >= m ) _v += m ; return * this ; } _mint & operator *= ( const _mint & rhs ) { uint64_t z = _v ; z *= rhs . _v , _v = z % m ; return * this ; } _mint & operator /= ( const _mint & rhs ) { return * this = * this * rhs . inv (); } _mint operator + () const { return * this ; } _mint operator - () const { return _mint () - * this ; } _mint pow ( i64 n ) const { assert ( 0 <= n ); _mint x = * this , r = 1 ; for (; n ; n >>= 1 , x *= x ) if ( n & 1 ) r *= x ; return r ; } _mint inv () const { if ( prime ) { assert ( _v ); return pow ( m - 2 ); } else { auto eg = inv_gcd ( _v , m ); assert ( eg . first == 1 ); return eg . second ; } } friend _mint operator + ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) += rhs ; } friend _mint operator - ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) -= rhs ; } friend _mint operator * ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) *= rhs ; } friend _mint operator / ( const _mint & lhs , const _mint & rhs ) { return _mint ( lhs ) /= rhs ; } friend bool operator == ( const _mint & lhs , const _mint & rhs ) { return lhs . _v == rhs . _v ; } friend bool operator != ( const _mint & lhs , const _mint & rhs ) { return lhs . _v != rhs . _v ; } private : unsigned _v ; static constexpr bool prime = is_prime_constexpr ( m ); }; using modint = static_modint < 998244353 > ; const int si = 2e6 + 10 ; int n ; modint a [ si ], b [ si ]; signed main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n ; a [ 0 ] = b [ 0 ] = 1 , a [ 1 ] = 2 , b [ 1 ] = 3 ; for ( int i = 2 ; i <= n ; ++ i ) { a [ i ] = ( b [ i - 1 ] + ( i - 1 ) * a [ i - 1 ]); a [ i ] = a [ i ] / i , a [ i ] *= 2 , b [ i ] = b [ i - 1 ] + a [ i ]; } modint t = n + 2 ; modint ans = 2 * t . inv (); cout << ans . val () << \" \" ; for ( int i = 1 ; i <= n ; ++ i ) cout << ( ans = t . inv ()). val () << \" \\n \" [ i == n ]; modint ss = 0 ; for ( int i = 0 ; i <= n ; ++ i ) ss += a [ i ]; for ( int i = 0 ; i <= n ; ++ i ) cout << ( ans = a [ i ] / ss ). val () << \" \\n \" [ i == n ]; return 0 ; }","title":"J - \u6b3a\u8bc8\u6e38\u620f"},{"location":"sol/other/thupc2023-pre/#k-","text":"JR \u548c xzq \u5c0f\u8ba8\u8bba\u4e86\u4e00\u624b\u5c31\u4f1a\u4e86\uff0c\u6211\u6ca1\u770b\u3002 \u5177\u4f53\u5c31\u662f\uff0c\u5047\u8bbe\u5f53\u524d\u6700\u5927\u6570\u662f \\(mx\\) \uff0c\u6709 \\(k\\) \u4e2a \\(mx\\) \uff0c\u5c31\u653e \\(k\\) \u4e2a\u5728\u540e\u9762\uff0c\u7136\u540e\u8003\u8651\u5bf9 \\(mx - 1\\) \u9012\u5f52\u505a\u8fd9\u4e2a\u8fc7\u7a0b\u3002 \u4ee3\u7801 xzq \u5199\u7684\uff0cJR \u6253\u6446\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 //I play to win #include <bits/stdc++.h> #define ll long long #define ull unsigned ll #define pi pair<int,int> #define ld long double #define vi vector<int> #define all(x) begin(x),end(x) using namespace std ; inline ll read () { ll x = 0 , f = 1 ; char c = getchar (); for (; ! isdigit ( c ); c = getchar ()) if ( c == '-' ) f = -1 ; for (; isdigit ( c ); c = getchar ()) x = ( x << 3 ) + ( x << 1 ) + ( c ^ 48 ); return x * f ; } inline void out ( ll x ){ if ( x > 9 ) out ( x / 10 ); putchar ( x % 10 ^ 48 );} inline void print ( ll x , char c = '\\n' ){ if ( x < 0 ) putchar ( '-' ), x =- x ; out ( x ), putchar ( c );} const int N = 5e5 + 10 ; ll a [ N ], b [ N ], s [ N ]; int main () { int n = read (); ll use = 0 , ans = 0 ; for ( int i = 1 ; i <= n ; i ++ ) a [ i ] = b [ i ] = read (); sort ( b + 1 , b + n + 1 ); for ( int i = 1 ; i <= n ; i ++ ) s [ i ] = b [ i ] + s [ i -1 ]; for ( int i = n ; i ; i -- ) { if ( a [ i ] < use ) continue ; int l = upper_bound ( b + 1 , b + n + 1 , use ) - b , r = upper_bound ( b + 1 , b + n + 1 , a [ i ]) - b -1 ; ans += i * ( s [ r ] - s [ l -1 ] - use * ( r - l + 1 ) + ( a [ i ] - use ) * ( n - r )), use = a [ i ]; // cout<<l<<\" \"<<r<<\" \"<<ans<<endl; } print ( ans ); }","title":"K - \u4f17\u6570"},{"location":"sol/other/thupc2023-pre/#m-","text":"\u4e2d\u56fd\u961f\u725b\u903c\uff01 Code hyl xzq 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cout << \"China\" << endl ; return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 //I play to win #include <bits/stdc++.h> #define ll long long #define ull unsigned ll #define pi pair<int,int> #define ld long double #define vi vector<int> #define all(x) begin(x),end(x) using namespace std ; inline ll read () { ll x = 0 , f = 1 ; char c = getchar (); for (; ! isdigit ( c ); c = getchar ()) if ( c == '-' ) f = -1 ; for (; isdigit ( c ); c = getchar ()) x = ( x << 3 ) + ( x << 1 ) + ( c ^ 48 ); return x * f ; } inline void out ( ll x ){ if ( x > 9 ) out ( x / 10 ); putchar ( x % 10 ^ 48 );} inline void print ( ll x , char c = '\\n' ){ if ( x < 0 ) putchar ( '-' ), x =- x ; out ( x ), putchar ( c );} const int N = 1e5 + 10 ; int main () { puts ( \"China\" ); }","title":"M - \u4e16\u754c\u676f"},{"location":"sol/other/usaco23janbronze/","text":"\u6ca1\u6709\u4ec0\u4e48\u597d\u8bf4\u7684\uff0c\u90fd\u662f\u7b80\u5355\u9001\u5206\u9898\u3002 \u5f88\u53ef\u60dc\u6211\u573a\u4e0a\u5bf9\u7740 T2 \u60f3\u4e86\u534a\u5929 \\(M \\le 2e5\\) \uff0c\u4e00\u5c0f\u65f6\u540e\u624d\u53d1\u73b0 \\(M \\le 10\\) \u3002 \u5c0f\u4e11\u3002 \u653e\u4e2a\u4ee3\u7801\u5e94\u8be5\u5c31\u80fd\u7406\u89e3\u4e86\u3002 T1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 // author : black_trees #include <cmath> #include <vector> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int n ; cin >> n ; string s ; cin >> s ; s = ' ' + s ; int fg = 0 , fh = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { if ( s [ i ] == 'G' ) { fg = i ; break ; } } for ( int i = 1 ; i <= n ; ++ i ) { if ( s [ i ] == 'H' ) { fh = i ; break ; } } int lsg = 0 , lsh = 0 ; for ( int i = n ; i >= 1 ; -- i ) { if ( s [ i ] == 'G' ) { lsg = i ; break ; } } for ( int i = n ; i >= 1 ; -- i ) { if ( s [ i ] == 'H' ) { lsh = i ; break ; } } std :: vector < int > a ( n + 2 ); for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; int leadg = 0 , leadh = 0 ; if ( a [ fg ] >= lsg ) leadg = fg ; if ( a [ fh ] >= lsh ) leadh = fh ; int ans = ( leadg && leadh ); int cnt1 = 0 , cnt2 = 0 ; for ( int i = fg ; i >= 1 ; -- i ) { if ( s [ i ] == 'H' && i != leadh && a [ i ] >= leadg ) ++ cnt1 ; } for ( int i = fh ; i >= 1 ; -- i ) { if ( s [ i ] == 'G' && i != leadg && a [ i ] >= leadh ) ++ cnt2 ; } if ( leadg > 0 ) ans += cnt1 ; if ( leadh > 0 ) ans += cnt2 ; cout << ans << endl ; return 0 ; } // ()()()(? T2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 1e2 + 10 ; int n , m ; int s [ si ], t [ si ], c [ si ]; int a [ si ], b [ si ], p [ si ], w [ si ]; int state [ si ]; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n >> m ; for ( int i = 1 ; i <= n ; ++ i ) cin >> s [ i ] >> t [ i ] >> c [ i ]; for ( int i = 1 ; i <= m ; ++ i ) cin >> a [ i ] >> b [ i ] >> p [ i ] >> w [ i ]; int ans = 0x3f3f3f3f ; for ( int msk = 0 ; msk < ( 1 << m ); ++ msk ) { memset ( state , 0 , sizeof state ); int ret = 0 ; for ( int i = 1 ; i <= m ; ++ i ) if ( msk >> ( i - 1 ) & 1 ) { for ( int j = a [ i ]; j <= b [ i ]; ++ j ) state [ j ] += p [ i ]; ret += w [ i ]; } bool f = true ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = s [ i ]; j <= t [ i ]; ++ j ) { if ( state [ j ] < c [ i ]) { f = false ; break ; } } if ( ! f ) break ; } if ( ! f ) continue ; ans = min ( ans , ret ); } cout << ans << endl ; return 0 ; } // ()()()(? T3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { string s ; cin >> s ; int ans = 0x3f3f3f3f ; int n = s . size (); s = ' ' + s ; for ( int i = 1 ; i + 2 <= n ; ++ i ) { if ( s [ i + 1 ] != 'O' ) continue ; int ret = ( s [ i ] != 'M' ) + ( s [ i + 2 ] != 'O' ); ret += n - 3 , ans = min ( ans , ret ); } cout << (( ans == 0x3f3f3f3f ) ? -1 : ans ) << endl ; } return 0 ; } // ()()()(?","title":"USACO23Jan Bronze"},{"location":"sol/other/usaco23jansilver/","text":"T1 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8003\u8651\u7c7b\u4f3c\u7f6e\u6362\u73af\u7684\u8fde\u8fb9\u3002 \u7136\u540e\u663e\u7136\u4e00\u4e2a\u70b9\u4e0d\u80fd\u6709\u591a\u4e2a\u51fa\u8fb9\uff0c\u4e0d\u7136\u56e0\u4e3a\u540c\u6b65\u53d8\u5316\uff0c\u5b83\u5fc5\u7136\u65e0\u89e3\u3002 \u7136\u540e\u4e00\u4e2a\u70b9\u663e\u7136\u53ef\u4ee5\u6709\u591a\u4e2a\u5165\u8fb9\u3002 \u4e00\u4e2a\u94fe\u663e\u7136\u76f4\u63a5\u5012\u7740\u505a\u5c31\u884c\u3002 \u6ce8\u610f\u5230\u5bf9\u4e8e\u4e00\u4e2a\u73af\uff0c\u6211\u4eec\u7684\u5904\u7406\u65b9\u5f0f\u5e94\u8be5\u662f\u627e\u4e00\u4e2a\u4e0d\u5728\u73af\u4e0a\u7684\u70b9\uff08\u4e14\u6ca1\u6709\u5728\u5e8f\u5217\u91cc\u51fa\u73b0\u8fc7\uff09\uff0c\u65ad\u5f00\uff0c\u7136\u540e\u5c31\u662f\u4e00\u6761\u94fe\u3002 \u4f46\u662f\u8fd9\u91cc\u53ea\u6709 52 \u4e2a\u5b57\u7b26\uff0c\u6709\u53ef\u80fd\u627e\u4e0d\u5230\u8fd9\u6837\u7684\u201c\u4e2d\u8f6c\u70b9\u201d\uff0c\u4f46\u662f\u6ce8\u610f\u5230\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u6307\u5411\u4e86\u4e00\u4e2a\u73af\u4e0a\u8282\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u70b9\u4f5c\u4e3a\u201c\u4e2d\u8f6c\u201d\u70b9\u3002 \u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u7f29\u70b9\uff0c\u53cd\u5411\u5efa\u56fe\uff0c\u5982\u679c\u4e00\u4e2a\u73af\u51fa\u73b0\u5728\u4e86\u5165\u5ea6\u4e0d\u4e3a\u96f6\u7684\u8282\u70b9\uff0c\u663e\u7136\u65e0\u89e3\u3002 \u7136\u540e\u6709\u51e0\u4e2a\u5751\u70b9\uff0c\u7f29\u5b8c\u70b9\u4e4b\u540e\u7edf\u8ba1\u7b54\u6848\u8981\u7279\u6b8a\u8003\u8651\u6709\u56e2\u548c\u6ca1\u6709\u56e2\u7684\u60c5\u51b5\uff0c\u7136\u540e\u8fd8\u8981\u53bb\u6389\u91cd\u8fb9\u3002 \u7136\u540e\u8fd8\u6709\uff0c\u5982\u679c\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(51\\) \u7684\u73af\u51fa\u73b0\u4e86\uff0c\u53e6\u5916\u4e00\u4e2a\u5b57\u7b26\u662f\u81ea\u73af\uff0c\u4e5f\u4f1a\u5bc4\u6389\u3002 \u4f46\u662f\u8fd9\u6837\u8fd8\u662f Wa on 10, 13, 14, 15\u3002 \u5148\u653e\u7740\u4ee3\u7801\uff0c\u73b0\u5728\u4ea4\u4e0d\u4e86\u3002 \u611f\u89c9\u8fd9\u4e2a T1 \u975e\u5e38\u6076\u5fc3\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 // author : black_trees #include <map> #include <stack> #include <cmath> #include <cstdio> #include <cstring> #include <utility> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 1e5 + 10 ; int n , m ; int tot = 0 , tt = 0 ; int head [ si ], hd [ si ]; struct Edge { int ver , Next ; } e [ si << 1 ], ee [ si << 1 ]; inline void add ( int u , int v ) { e [ tot ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot ++ ; } inline void addd ( int u , int v ) { ee [ tt ] = ( Edge ){ v , hd [ u ]}, hd [ u ] = tt ++ ; } int tyq = 0 ; // occ of all letters. int cnt = 0 , tim = 0 ; std :: stack < int > st ; bool ins [ si ]; int dfn [ si ], low [ si ]; int c [ si ], num [ si ]; void tarjan ( int u ) { dfn [ u ] = low [ u ] = ++ tim ; st . push ( u ), ins [ u ] = true ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( ! dfn [ v ]) { tarjan ( v ); low [ u ] = min ( low [ u ], low [ v ]); } else if ( ins [ v ]) low [ u ] = min ( low [ u ], dfn [ v ]); } if ( low [ u ] == dfn [ u ]) { int x ; ++ cnt ; do { x = st . top (), st . pop (); ins [ x ] = false , c [ x ] = cnt , num [ cnt ] ++ ; } while ( u != x ); } } std :: map < char , int > mp , mpp ; int ind [ si ], clz = 0 , oug [ si ]; std :: map < std :: pair < int , int > , bool > vis ; int out [ si ]; void Init () { vis . clear (); mp . clear (), mpp . clear (); while ( ! st . empty ()) st . pop (); tot = tt = clz = tyq = cnt = tim = 0 ; memset ( ins , false , sizeof ins ); memset ( c , 0 , sizeof c ), memset ( num , 0 , sizeof num ); memset ( dfn , 0 , sizeof dfn ), memset ( low , 0 , sizeof low ); memset ( head , -1 , sizeof head ), memset ( hd , -1 , sizeof hd ); memset ( ind , 0 , sizeof ind ), memset ( oug , 0 , sizeof oug ), memset ( out , 0 , sizeof out ); } int dfs ( int u ) { int ret = num [ u ]; for ( int i = hd [ u ]; ~ i ; i = ee [ i ]. Next ) { int v = ee [ i ]. ver ; ret += dfs ( v ); } return ret ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { Init (); bool nosol = false ; string s , t ; cin >> s >> t ; n = ( int ) s . size (); s = ' ' + s , t = ' ' + t ; for ( int i = 1 ; i <= n ; ++ i ) { if ( ! mpp [ s [ i ]]) mpp [ s [ i ]] = ++ tyq ; if ( ! mpp [ t [ i ]]) mpp [ t [ i ]] = ++ tyq ; } for ( int i = 1 ; i <= n ; ++ i ) { if ( s [ i ] != t [ i ]) { if ( ! mp [ s [ i ]]) mp [ s [ i ]] = ++ clz ; if ( ! mp [ t [ i ]]) mp [ t [ i ]] = ++ clz ; if ( vis [{ mp [ s [ i ]], mp [ t [ i ]]}]) continue ; add ( mp [ s [ i ]], mp [ t [ i ]]), ++ oug [ mp [ s [ i ]]]; vis [{ mp [ s [ i ]], mp [ t [ i ]]}] = true ; if ( oug [ mp [ s [ i ]]] > 1 ) { nosol = true ; break ; } } } for ( int i = 1 ; i <= n ; ++ i ) { if ( s [ i ] == t [ i ]) { if ( ! mp [ s [ i ]]) continue ; if ( oug [ mp [ s [ i ]]]) { nosol = true ; break ; } } } if ( nosol ) { cout << \"-1\" << endl ; continue ; } for ( int i = 1 ; i <= clz ; ++ i ) { if ( ! dfn [ i ]) tarjan ( i ); } for ( int u = 1 ; u <= clz ; ++ u ) { for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( c [ u ] == c [ v ]) continue ; addd ( c [ v ], c [ u ]), ++ ind [ c [ u ]], ++ out [ c [ v ]]; } } int ans = 0 ; for ( int i = 1 ; i <= cnt ; ++ i ) { if ( ind [ i ] > 0 && num [ i ] > 1 ) { nosol = true ; break ; } if ( ! ind [ i ]) { ans += dfs ( i ); if ( num [ i ] == 1 ) ans -- ; else { if ( ! out [ i ]) { if ( tyq < 52 ) ans ++ ; else { nosol = true ; break ; } } } } } if ( nosol ) { cout << \"-1\" << endl ; continue ; } cout << ans << endl ; } return 0 ; } // ()()()(?` T2 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8fd8\u6ca1\u6539\u3002 T3 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8003\u8651\u8d2a\u5fc3\u505a\u4e00\u4e2a\u7c7b\u4f3c\u6b27\u62c9\u8def\u7684\u4e1c\u897f\u3002 \u5c31\u662f\u4f60\u5bf9\u4e8e\u4e00\u4e2a\u5947\u6570\uff0c\u4f60\u663e\u7136\u4f1a\u8d70\u8fc7\u53bb\u4e0d\u8d70\u56de\u6765\uff0c\u90a3\u5c31\u5148\u8f6c\uff0c\u7136\u540e\u8f6c\u5230\u53ea\u5269 1 \u4e86\u518d\u8d70\u8fc7\u53bb\uff0c\u4e00\u6bb5\u4e5f\u662f\u4e00\u6837\u3002 \u7136\u540e\u5bf9\u4e8e\u4e00\u4e2a\u5076\u6570\uff0c\u4f60\u4f1a\u8d70\u56de\u6765\uff0c\u6240\u4ee5\u5176\u5b9e\u53ef\u4ee5\u8003\u8651\u4e00\u6bb5\u4e00\u6bb5\u7684\uff0c\u5148\u8d70\u901a\u7136\u540e\u62c9\u56de\u6765\uff0c\u591a\u7684\u4e5f\u662f\u8f6c\u4e24\u4e0b\u5c31\u6ca1\u4e86\u3002 \u56e0\u4e3a\u4fdd\u8bc1\u6709\u89e3\u6240\u4ee5\u6211\u4eec\u4e0d\u7528\u7ba1\u90a3\u4e48\u591a\uff0c\u76f4\u63a5\u6784\u9020\u5c31\u884c\u4e86\u3002 \u6211\u8d5b\u65f6\u6ca1\u770b\u5230\u8981\u6700\u5c0f\u5316\u6b65\u6570\uff0c\u4f46\u662f\u778e\u6574\u7684\u4e5f\u5bf9\u4e86\uff0c\u5f88\u5de7\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 1e6 + 10 ; int n , a [ si ], ans [ si ], tot = 0 ; void dfs ( int u , int lst ) { if ( lst == 0 ) { while ( a [ u ]) a [ u ] -- , dfs ( u + 1 , 0 ); while ( a [ u - 1 ]) a [ u - 1 ] -- , dfs ( u - 1 , 1 ); } else { while ( a [ u - 1 ]) a [ u - 1 ] -- , dfs ( u - 1 , 1 ); while ( a [ u ]) a [ u ] -- , dfs ( u + 1 , 0 ); } ans [ ++ tot ] = u ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; dfs ( 1 , 0 ); string s ; for ( int i = 1 ; i < tot ; ++ i ) if ( ans [ i + 1 ] < ans [ i ]) s += 'R' ; else s += 'L' ; reverse ( s . begin (), s . end ()); cout << s << endl ; return 0 ; } // ()()()(?","title":"USACO23Jan Silver"},{"location":"sol/other/usaco23jansilver/#t1","text":"\u8003\u8651\u7c7b\u4f3c\u7f6e\u6362\u73af\u7684\u8fde\u8fb9\u3002 \u7136\u540e\u663e\u7136\u4e00\u4e2a\u70b9\u4e0d\u80fd\u6709\u591a\u4e2a\u51fa\u8fb9\uff0c\u4e0d\u7136\u56e0\u4e3a\u540c\u6b65\u53d8\u5316\uff0c\u5b83\u5fc5\u7136\u65e0\u89e3\u3002 \u7136\u540e\u4e00\u4e2a\u70b9\u663e\u7136\u53ef\u4ee5\u6709\u591a\u4e2a\u5165\u8fb9\u3002 \u4e00\u4e2a\u94fe\u663e\u7136\u76f4\u63a5\u5012\u7740\u505a\u5c31\u884c\u3002 \u6ce8\u610f\u5230\u5bf9\u4e8e\u4e00\u4e2a\u73af\uff0c\u6211\u4eec\u7684\u5904\u7406\u65b9\u5f0f\u5e94\u8be5\u662f\u627e\u4e00\u4e2a\u4e0d\u5728\u73af\u4e0a\u7684\u70b9\uff08\u4e14\u6ca1\u6709\u5728\u5e8f\u5217\u91cc\u51fa\u73b0\u8fc7\uff09\uff0c\u65ad\u5f00\uff0c\u7136\u540e\u5c31\u662f\u4e00\u6761\u94fe\u3002 \u4f46\u662f\u8fd9\u91cc\u53ea\u6709 52 \u4e2a\u5b57\u7b26\uff0c\u6709\u53ef\u80fd\u627e\u4e0d\u5230\u8fd9\u6837\u7684\u201c\u4e2d\u8f6c\u70b9\u201d\uff0c\u4f46\u662f\u6ce8\u610f\u5230\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u6307\u5411\u4e86\u4e00\u4e2a\u73af\u4e0a\u8282\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u70b9\u4f5c\u4e3a\u201c\u4e2d\u8f6c\u201d\u70b9\u3002 \u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u7f29\u70b9\uff0c\u53cd\u5411\u5efa\u56fe\uff0c\u5982\u679c\u4e00\u4e2a\u73af\u51fa\u73b0\u5728\u4e86\u5165\u5ea6\u4e0d\u4e3a\u96f6\u7684\u8282\u70b9\uff0c\u663e\u7136\u65e0\u89e3\u3002 \u7136\u540e\u6709\u51e0\u4e2a\u5751\u70b9\uff0c\u7f29\u5b8c\u70b9\u4e4b\u540e\u7edf\u8ba1\u7b54\u6848\u8981\u7279\u6b8a\u8003\u8651\u6709\u56e2\u548c\u6ca1\u6709\u56e2\u7684\u60c5\u51b5\uff0c\u7136\u540e\u8fd8\u8981\u53bb\u6389\u91cd\u8fb9\u3002 \u7136\u540e\u8fd8\u6709\uff0c\u5982\u679c\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(51\\) \u7684\u73af\u51fa\u73b0\u4e86\uff0c\u53e6\u5916\u4e00\u4e2a\u5b57\u7b26\u662f\u81ea\u73af\uff0c\u4e5f\u4f1a\u5bc4\u6389\u3002 \u4f46\u662f\u8fd9\u6837\u8fd8\u662f Wa on 10, 13, 14, 15\u3002 \u5148\u653e\u7740\u4ee3\u7801\uff0c\u73b0\u5728\u4ea4\u4e0d\u4e86\u3002 \u611f\u89c9\u8fd9\u4e2a T1 \u975e\u5e38\u6076\u5fc3\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 // author : black_trees #include <map> #include <stack> #include <cmath> #include <cstdio> #include <cstring> #include <utility> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 1e5 + 10 ; int n , m ; int tot = 0 , tt = 0 ; int head [ si ], hd [ si ]; struct Edge { int ver , Next ; } e [ si << 1 ], ee [ si << 1 ]; inline void add ( int u , int v ) { e [ tot ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot ++ ; } inline void addd ( int u , int v ) { ee [ tt ] = ( Edge ){ v , hd [ u ]}, hd [ u ] = tt ++ ; } int tyq = 0 ; // occ of all letters. int cnt = 0 , tim = 0 ; std :: stack < int > st ; bool ins [ si ]; int dfn [ si ], low [ si ]; int c [ si ], num [ si ]; void tarjan ( int u ) { dfn [ u ] = low [ u ] = ++ tim ; st . push ( u ), ins [ u ] = true ; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( ! dfn [ v ]) { tarjan ( v ); low [ u ] = min ( low [ u ], low [ v ]); } else if ( ins [ v ]) low [ u ] = min ( low [ u ], dfn [ v ]); } if ( low [ u ] == dfn [ u ]) { int x ; ++ cnt ; do { x = st . top (), st . pop (); ins [ x ] = false , c [ x ] = cnt , num [ cnt ] ++ ; } while ( u != x ); } } std :: map < char , int > mp , mpp ; int ind [ si ], clz = 0 , oug [ si ]; std :: map < std :: pair < int , int > , bool > vis ; int out [ si ]; void Init () { vis . clear (); mp . clear (), mpp . clear (); while ( ! st . empty ()) st . pop (); tot = tt = clz = tyq = cnt = tim = 0 ; memset ( ins , false , sizeof ins ); memset ( c , 0 , sizeof c ), memset ( num , 0 , sizeof num ); memset ( dfn , 0 , sizeof dfn ), memset ( low , 0 , sizeof low ); memset ( head , -1 , sizeof head ), memset ( hd , -1 , sizeof hd ); memset ( ind , 0 , sizeof ind ), memset ( oug , 0 , sizeof oug ), memset ( out , 0 , sizeof out ); } int dfs ( int u ) { int ret = num [ u ]; for ( int i = hd [ u ]; ~ i ; i = ee [ i ]. Next ) { int v = ee [ i ]. ver ; ret += dfs ( v ); } return ret ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); int T ; cin >> T ; while ( T -- ) { Init (); bool nosol = false ; string s , t ; cin >> s >> t ; n = ( int ) s . size (); s = ' ' + s , t = ' ' + t ; for ( int i = 1 ; i <= n ; ++ i ) { if ( ! mpp [ s [ i ]]) mpp [ s [ i ]] = ++ tyq ; if ( ! mpp [ t [ i ]]) mpp [ t [ i ]] = ++ tyq ; } for ( int i = 1 ; i <= n ; ++ i ) { if ( s [ i ] != t [ i ]) { if ( ! mp [ s [ i ]]) mp [ s [ i ]] = ++ clz ; if ( ! mp [ t [ i ]]) mp [ t [ i ]] = ++ clz ; if ( vis [{ mp [ s [ i ]], mp [ t [ i ]]}]) continue ; add ( mp [ s [ i ]], mp [ t [ i ]]), ++ oug [ mp [ s [ i ]]]; vis [{ mp [ s [ i ]], mp [ t [ i ]]}] = true ; if ( oug [ mp [ s [ i ]]] > 1 ) { nosol = true ; break ; } } } for ( int i = 1 ; i <= n ; ++ i ) { if ( s [ i ] == t [ i ]) { if ( ! mp [ s [ i ]]) continue ; if ( oug [ mp [ s [ i ]]]) { nosol = true ; break ; } } } if ( nosol ) { cout << \"-1\" << endl ; continue ; } for ( int i = 1 ; i <= clz ; ++ i ) { if ( ! dfn [ i ]) tarjan ( i ); } for ( int u = 1 ; u <= clz ; ++ u ) { for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( c [ u ] == c [ v ]) continue ; addd ( c [ v ], c [ u ]), ++ ind [ c [ u ]], ++ out [ c [ v ]]; } } int ans = 0 ; for ( int i = 1 ; i <= cnt ; ++ i ) { if ( ind [ i ] > 0 && num [ i ] > 1 ) { nosol = true ; break ; } if ( ! ind [ i ]) { ans += dfs ( i ); if ( num [ i ] == 1 ) ans -- ; else { if ( ! out [ i ]) { if ( tyq < 52 ) ans ++ ; else { nosol = true ; break ; } } } } } if ( nosol ) { cout << \"-1\" << endl ; continue ; } cout << ans << endl ; } return 0 ; } // ()()()(?`","title":"T1"},{"location":"sol/other/usaco23jansilver/#t2","text":"\u8fd8\u6ca1\u6539\u3002","title":"T2"},{"location":"sol/other/usaco23jansilver/#t3","text":"\u8003\u8651\u8d2a\u5fc3\u505a\u4e00\u4e2a\u7c7b\u4f3c\u6b27\u62c9\u8def\u7684\u4e1c\u897f\u3002 \u5c31\u662f\u4f60\u5bf9\u4e8e\u4e00\u4e2a\u5947\u6570\uff0c\u4f60\u663e\u7136\u4f1a\u8d70\u8fc7\u53bb\u4e0d\u8d70\u56de\u6765\uff0c\u90a3\u5c31\u5148\u8f6c\uff0c\u7136\u540e\u8f6c\u5230\u53ea\u5269 1 \u4e86\u518d\u8d70\u8fc7\u53bb\uff0c\u4e00\u6bb5\u4e5f\u662f\u4e00\u6837\u3002 \u7136\u540e\u5bf9\u4e8e\u4e00\u4e2a\u5076\u6570\uff0c\u4f60\u4f1a\u8d70\u56de\u6765\uff0c\u6240\u4ee5\u5176\u5b9e\u53ef\u4ee5\u8003\u8651\u4e00\u6bb5\u4e00\u6bb5\u7684\uff0c\u5148\u8d70\u901a\u7136\u540e\u62c9\u56de\u6765\uff0c\u591a\u7684\u4e5f\u662f\u8f6c\u4e24\u4e0b\u5c31\u6ca1\u4e86\u3002 \u56e0\u4e3a\u4fdd\u8bc1\u6709\u89e3\u6240\u4ee5\u6211\u4eec\u4e0d\u7528\u7ba1\u90a3\u4e48\u591a\uff0c\u76f4\u63a5\u6784\u9020\u5c31\u884c\u4e86\u3002 \u6211\u8d5b\u65f6\u6ca1\u770b\u5230\u8981\u6700\u5c0f\u5316\u6b65\u6570\uff0c\u4f46\u662f\u778e\u6574\u7684\u4e5f\u5bf9\u4e86\uff0c\u5f88\u5de7\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 // author : black_trees #include <cmath> #include <cstdio> #include <cstring> #include <iostream> #include <algorithm> #define endl '\\n' using namespace std ; using i64 = long long ; const int si = 1e6 + 10 ; int n , a [ si ], ans [ si ], tot = 0 ; void dfs ( int u , int lst ) { if ( lst == 0 ) { while ( a [ u ]) a [ u ] -- , dfs ( u + 1 , 0 ); while ( a [ u - 1 ]) a [ u - 1 ] -- , dfs ( u - 1 , 1 ); } else { while ( a [ u - 1 ]) a [ u - 1 ] -- , dfs ( u - 1 , 1 ); while ( a [ u ]) a [ u ] -- , dfs ( u + 1 , 0 ); } ans [ ++ tot ] = u ; } int main () { cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) cin >> a [ i ]; dfs ( 1 , 0 ); string s ; for ( int i = 1 ; i < tot ; ++ i ) if ( ans [ i + 1 ] < ans [ i ]) s += 'R' ; else s += 'L' ; reverse ( s . begin (), s . end ()); cout << s << endl ; return 0 ; } // ()()()(?","title":"T3"},{"location":"sol/pro/acwing277/","text":"Acwing277 \u997c\u5e72 \u03c8(\uff40\u2207\u00b4)\u03c8 Description \u03c8(\uff40\u2207\u00b4)\u03c8 \u5723\u8bde\u8001\u4eba\u5171\u6709 \\(M\\) \u4e2a\u997c\u5e72\uff0c\u51c6\u5907\u5168\u90e8\u5206\u7ed9 \\(N\\) \u4e2a\u5b69\u5b50\u3002 \u6bcf\u4e2a\u5b69\u5b50\u6709\u4e00\u4e2a\u8d2a\u5a6a\u5ea6\uff0c\u7b2c \\(i\\) \u4e2a\u5b69\u5b50\u7684\u8d2a\u5a6a\u5ea6\u4e3a \\(g[i]\\) \u3002 \u5982\u679c\u6709 \\(a[i]\\) \u4e2a\u5b69\u5b50\u62ff\u5230\u7684\u997c\u5e72\u6570\u6bd4\u7b2c \\(i\\) \u4e2a\u5b69\u5b50\u591a\uff0c\u90a3\u4e48\u7b2c \\(i\\) \u4e2a\u5b69\u5b50\u4f1a\u4ea7\u751f \\(g[i] \\times a[i]\\) \u7684\u6028\u6c14\u3002 \u7ed9\u5b9a \\(N\u3001M\\) \u548c\u5e8f\u5217 \\(g\\) \uff0c\u5723\u8bde\u8001\u4eba\u8bf7\u4f60\u5e2e\u4ed6\u5b89\u6392\u4e00\u79cd\u5206\u914d\u65b9\u5f0f\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5b69\u5b50\u81f3\u5c11\u5206\u5230\u4e00\u5757\u997c\u5e72\uff0c\u5e76\u4e14\u6240\u6709\u5b69\u5b50\u7684\u6028\u6c14\u603b\u548c\u6700\u5c0f\u3002 \\(1 \\le N \\le 30\\) \uff0c \\(N \\le M \\le 5000\\) \uff0c \\(1 \\le g_i \\le 10^7\\) \u8981\u6c42\u8f93\u51fa\u65b9\u6848\u3002 Analysis \u03c8(\uff40\u2207\u00b4)\u03c8 \u53d1\u73b0\u76f4\u63a5\u6c42\u89e3\u7684\u8bdd\u5f88\u4e0d\u597d\u641e\uff0c\u56e0\u4e3a\u6bcf\u53d1\u51fa\u4e00\u5757\u997c\u5e72\u7684\u65f6\u5019\uff0c\u4f60\u90fd\u8981\u626b\u4e00\u904d\u8fdb\u884c\u7edf\u8ba1\uff0c\u800c\u4e14\u968f\u7740\u997c\u5e72\u7684\u53d1\u51fa\uff0c\u6028\u6c14\u503c\u662f\u6709\u53ef\u80fd\u51cf\u5c11\u7684\u3002 \u56e0\u4e3a\uff0c\u5982\u679c\u7ed9\u7b2c \\(i\\) \u4e2a\u5b69\u5b50\u591a\u5206\u914d\u4e86\u4e00\u4e2a\u7cd6\u679c\uff0c\u5728\u4ed6\u524d\u540e\u7684\u5b69\u5b50\u7684\u6028\u6c14\u503c\u90fd\u662f\u4f1a\u53d7\u5230\u5f71\u54cd\u800c\u6539\u53d8\u7684\uff0c\u627e\u4e0d\u5230\u4e00\u4e2a\u53ef\u4ee5\u53ea\u5f71\u54cd \\(i\\) \u524d\u9762\u6216\u8005\u540e\u9762\u7684 \u201d\u9636\u6bb5\u201c\u3002 \u6240\u4ee5\u8003\u8651\u4e00\u4e2a\u6bd4\u8f83\u660e\u663e\u7684\u8d2a\u5fc3\uff0c\u5bf9 \\(g\\) \u964d\u5e8f\u6392\u5e8f\uff0c\u5219\u4ece\u524d\u5f80\u540e\u5206\u914d\u7684\u997c\u5e72\u6570\u91cf\u5fc5\u7136\u5355\u8c03\u4e0d\u4e0a\u5347\u3002 \u8fd9\u4e2a\u8bc1\u660e\u53ef\u4ee5\u5229\u7528\u8d2a\u5fc3\u7b97\u6cd5\u4e2d\u7684\u4e00\u4e2a\u7ecf\u5178\u4e0d\u7b49\u5f0f\uff1a\u6392\u5e8f\u4e0d\u7b49\u5f0f\u3002 \u5177\u4f53\u8bc1\u660e\u8fc7\u7a0b\u7565\u3002 \u6392\u5e8f\u8fc7\u540e\uff0c\u56e0\u4e3a\u4ece\u524d\u5f80\u540e\u5206\u914d\u7684\u997c\u5e72\u6570\u91cf\u5355\u8c03\u4e0d\u4e0a\u5347\uff0c\u90a3\u4e48\u5f53\u524d\u9762\u7684\u5b69\u5b50\u5206\u914d\u7684\u997c\u5e72\u6570\u4e0d\u6539\u53d8\u7684\u65f6\u5019\uff0c \u5982\u679c\u540e\u9762\u7684\u5b69\u5b50\u5206\u914d\u7684\u997c\u5e72\u6570\u91cf\u589e\u52a0\uff0c\u5bf9\u524d\u9762\u7684\u5b69\u5b50\u7684\u6028\u6c14\u503c\u662f\u6ca1\u6709\u5f71\u54cd\u7684\u3002 \u6240\u4ee5\uff0cDP \u7684\u201d\u9636\u6bb5\u201c\u5c31\u6d6e\u73b0\u51fa\u6765\u4e86\uff0c\u5c31\u662f \u201d\u524d \\(i\\) \u4e2a\u5b69\u5b50\u201c \uff08\u6392\u5e8f\u8fc7\u540e\uff09\u3002 \u800c\u9898\u76ee\u4e2d\u8fd8\u6709\u4e00\u4e2a\u8981\u7d20 \\(M\\) \uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u628a\u8fd9\u4e24\u4e2a\u8981\u7d20\u7ed3\u5408\u8d77\u6765\u5f97\u5230\u4e00\u4e2a DP \u72b6\u6001\uff1a \u8bbe \\(dp_{i,j}\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\u5b69\u5b50\uff0c\u603b\u5171\u5206\u914d\u4e86 \\(j\\) \u5757\u997c\u5e72\u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u6028\u6c14\u603b\u548c\u7684 \\(\\min\\) \u3002 \u5982\u679c\u76f4\u63a5\u8003\u8651\u5212\u5206\u5b50\u96c6\u7684\u8bdd\uff0c\u662f\u975e\u5e38\u9ebb\u70e6\uff0c\u4e0d\u4fbf\u4e8e\u8f6c\u79fb\u7684\u3002 \u8bbe \\(b_i\\) \u4e3a\u6392\u5e8f\u540e\u5904\u5728\u4f4d\u7f6e \\(i\\) \u7684\u5b69\u5b50\u5f53\u524d\u62ff\u5230\u7684\u997c\u5e72\u6570\u91cf\uff0c\u8003\u8651\u5982\u4e0b\u7684\u4e24\u79cd\u60c5\u51b5\uff1a \\(b_i = b_{i-1}\\) \uff0c\u90a3\u4e48\u8f6c\u79fb\u7684\u65f6\u5019 \\(a_i = a_{i-1}\\) \uff0c\u9700\u8981\u63d0\u524d\u77e5\u9053 \\(a_{i-1}\\) \u3002 \\(b_i = b_{i-1}\\) \uff0c\u90a3\u4e48\u8f6c\u79fb\u7684\u65f6\u5019 \\(a_i = a_{i-1} +1\\) \uff0c\u8fd8\u662f\u9700\u8981\u63d0\u524d\u77e5\u9053 \\(a_{i-1}\\) \u3002 \u4f46\u662f\u8fd9\u4e2a\u65f6\u5019\u662f\u5728 DP\uff0c\u4f60\u8981\u77e5\u9053 \\(a_{i-1}\\) \uff0c\u5c31\u5fc5\u987b\u8981\u77e5\u9053\u524d\u9762\u6709\u591a\u5c11\u4e2a\u5b69\u5b50\u83b7\u5f97\u7684\u997c\u5e72\u6570\u91cf\u548c \\(i-1\\) \u4e00\u6837\u3002 \u8fd9\u6837\u5c31\u9700\u8981\u8bdd\u989d\u5916\u7684\u65f6\u95f4\u53bb\u679a\u4e3e\u53ef\u80fd\u7684\u60c5\u51b5\uff0c\u5982\u679c\u6309\u7167\u8fd9\u6837\u63a8\u4e0b\u53bb\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5c06\u4f1a\u7206\u70b8\uff0c\u65e0\u6cd5\u63a5\u53d7\u3002 \u5c31\u50cf\u4e0b\u56fe\u6240\u793a\uff0c\u4f60\u4e0d\u77e5\u9053 \\(?\\) \u7684\u8ddd\u79bb\u5230\u5e95\u6709\u591a\u957f\uff0c\u6240\u4ee5\u9700\u8981\u679a\u4e3e\u3002 \u4f46\u662f\u89c2\u5bdf\u4e00\u4e0b\uff0c\u5047\u8bbe \\(b_i > 1\\) \uff0c\u4e5f\u5c31\u662f\u4e0b\u56fe\u6240\u793a\u7684\u5de6\u8fb9\u7684\u60c5\u51b5\u3002 \u5982\u679c\u6211\u4eec\u7ed9\u524d\u9762\u7684 \\(b\\) \u90fd\u51cf\u53bb \\(1\\) \uff0c \u76f8\u5bf9\u5927\u5c0f\u662f\u6ca1\u6709\u53d8\u7684\uff0c\u6028\u6c14\u503c\u4e5f\u662f\u6ca1\u6709\u589e\u52a0 \u7684\u3002 \u6240\u4ee5\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b \\(dp_{i,j} = dp_{i,j - i}\\) \u3002 \u800c\u4f60\u679a\u4e3e\u66f4\u65b0\u7684\u65f6\u5019\u4e0d\u53ef\u80fd\u4ece\u4e00\u4e2a\u5206\u914d\u4e86\u66f4\u591a\u997c\u5e72\u7684\u72b6\u6001\u8f6c\u79fb\u5230\u5206\u914d\u4e86\u66f4\u5c11\u7684\u72b6\u6001\u3002 \u6240\u4ee5 \\(dp_{i,j - 1}\\) \u4e00\u5b9a\u662f \\(dp_{i,j}\\) \u7684\u5b50\u96c6\uff0c\u5c31\u6ca1\u6709\u540e\u6548\u6027\u4e86\uff0c\u53ef\u4ee5\u76f4\u63a5\u8f6c\u79fb\u3002 \u5982\u679c\u662f\u4e0a\u56fe\u53f3\u8fb9\u7684\u60c5\u51b5\uff0c \\(b_i\\) \u7b49\u4e8e \\(1\\) \uff0c\u6211\u4eec\u5c31\u9700\u8981\u77e5\u9053\u524d\u9762\u6709\u591a\u5c11\u4e2a\u5b69\u5b50\u548c \\(b_i\\) \u4e00\u6837\u4e5f\u53ea\u62ff\u5230\u4e86 \\(1\\) \u5757\u3002 \u56e0\u4e3a\u6bcf\u4e2a\u5b69\u5b50\u81f3\u5c11\u8981\u62ff\u5230\u4e00\u5757\uff0c\u6240\u4ee5\u4e0d\u80fd\u518d\u51cf\u4e86\u3002 \u90a3\u4e48\u5c31\u627e\u5230\u4e00\u4e2a\u4f4d\u7f6e \\(k\\) \uff0c\u4f7f\u5f97 \\(b_k >1,b[k + 1 \\sim i] = 1\\) \u3002 \u7136\u540e\u628a \\(b[1\\sim k]\\) \u7684\u90e8\u5206\u8f6c\u5316\u6210\u5de6\u8fb9\u7684\u60c5\u51b5\uff0c \\(b[k+1 \\sim i]\\) \u7684\u90e8\u5206\u5355\u72ec\u8ba1\u7b97\u3002 \u56e0\u4e3a\u4f60\u4e0d\u77e5\u9053\u5177\u4f53 \\(k\\) \u5230\u5e95\u662f\u591a\u5c11\uff0c\u6240\u4ee5\u679a\u4e3e\u6240\u6709\u60c5\u51b5\u53d6\u6700\u5c0f\u503c\u5373\u53ef\uff08\u8fd9\u91cc\u5c31\u662f\u5728\u5212\u5206 \\(dp_{i,j}\\) \uff09\u3002 \u6240\u4ee5\u53ef\u4ee5\u5f97\u5230\u8fd9\u79cd\u60c5\u51b5\u7684\u8f6c\u79fb\u65b9\u7a0b\uff1a \\[dp_{i,j} = \\min\\limits_{0 \\le k < i}\\{dp_{k,j-(i-k)}+k\\times\\sum\\limits_{l = k+1}^{i} g_l\\}\\] \u540e\u9762\u7684 \\(\\sum\\) \u53ef\u4ee5\u76f4\u63a5\u524d\u7f00\u548c\u505a\u3002 \u5f97\u5230\u8fd9\u6837\u7684\u5212\u5206\u65b9\u5f0f\uff08\u7eff\u5b57\u662f\u5bf9\u5e94\u5b50\u96c6\u7684\u610f\u4e49\uff0c\u6a59\u5b57\u662f\u5b50\u96c6\u5bf9\u5e94\u7684\u72b6\u6001\uff09\uff1a \u6240\u4ee5\u53ef\u4ee5\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \\[dp_{i,j} = \\min\\begin{cases}dp_{i,j - i} \\\\ \\min\\{dp_{k,j-(i-k)} + k\\times \\sum\\limits_{l = k + 1}^i g_l\\}\\end{cases}\\] \u521d\u59cb\u5316 \\(dp_{0,0} = 0\\) \uff0c\u5176\u4f59\u4e3a \\(+\\infty\\) \uff0c\u7b54\u6848\u4e3a \\(dp_{n,m}\\) \u3002 \u672c\u9898\u8fd8\u8981\u6c42\u8f93\u51fa\u65b9\u6848\uff0c\u6240\u4ee5\u8003\u8651\u8bb0\u5f55\u4e00\u4e2a pair \u6570\u7ec4 \\(pre_{i,j}\\) \uff0c\u8868\u793a\u4f7f \\(dp_{i,j}\\) \u53d1\u751f\u66f4\u65b0\u7684\u72b6\u6001\u7684 \\(i,j\\) \u5206\u522b\u662f\u4ec0\u4e48\u3002 \u5728 \\(dp_{i,j}\\) \u53d1\u751f\u66f4\u65b0\u7684\u65f6\u5019\u8bb0\u5f55\u5bf9\u5e94\u7684 \\(pre_{i,j}\\) \u5373\u53ef\u3002 \u7136\u540e\u6784\u9020\u65b9\u6848\u7684\u65f6\u5019\u5229\u7528\u9012\u5f52\u6784\u9020\uff0c\u8bbe \\(solve(x,y)\\) \u8868\u793a\u5904\u7406 \\(dp_{x,y}\\) \u5bf9\u7b54\u6848\u9020\u6210\u7684\u5f71\u54cd\u3002 \u90a3\u4e48\u5148\u9012\u5f52\u5904\u7406 \\(solve(pre_{x,y}.first,pre_{x,y}.second)\\) \u3002 \u9012\u5f52\u5230\u8fb9\u754c \\(x = 0\\) \u5c31\u8fd4\u56de\u3002 \u5b9e\u9645\u4e0a\u5c31\u662f\u63a8\u5230\u6700\u524d\u9762\uff08 \\(dp_{1,blabla}\\) \u7684\u72b6\u6001\uff09\uff0c\u7136\u540e\u5f80\u540e\u6839\u636e\u4ece\u54ea\u91cc\u8f6c\u79fb\u8fc7\u6765\u8ba1\u7b97\u7b54\u6848\u3002 \u4e5f\u5c31\u662f\u518d\u6b21\u6a21\u62df\u4e00\u904d\u8f6c\u79fb\u3002 \u5177\u4f53\u5b9e\u73b0\u770b\u4ee3\u7801\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int si = 30 + 10 ; const int sii = 5e3 + 10 ; int n , m ; int dp [ si ][ sii ]; pair < int , int > g [ si ]; pair < int , int > pre [ si ][ sii ]; int sum [ si ], ans [ si ]; void solve ( int x , int y ) { if ( ! x ) return ; // \u5230\u8fbe\u8fb9\u754c auto [ px , py ] = pre [ x ][ y ]; solve ( px , py ); // \u5148\u9012\u5f52\u5904\u7406 pre[x][y] if ( px == x ) for ( int i = 1 ; i <= x ; ++ i ) ans [ g [ i ]. second ] += 1 ; // from dp[x][y - x]; // \u6b64\u65f6\u7ed9 1 ~ x \u6240\u6709\u6570\u90fd\u52a0\u4e0a 1, \u56e0\u4e3a\u8f6c\u79fb\u7684\u65f6\u5019\u5b83\u4eec\u90fd\u51cf\u53bb\u4e86 1\u3002 else for ( int i = px + 1 ; i <= x ; ++ i ) ans [ g [ i ]. second ] = 1 ; // from dp[px][y - (x - px)]; // \u6b64\u65f6\u628a\u72b6\u6001\u5bf9\u5e94\u7684 k + 1 ~ i \u7684\u90e8\u5206\u8bbe\u7f6e\u4e3a 1\u3002 } int main () { cin >> n >> m ; for ( int i = 1 ; i <= n ; ++ i ) { cin >> g [ i ]. first ; g [ i ]. second = i ; } sort ( g + 1 , g + 1 + n ); reverse ( g + 1 , g + 1 + n ); sum [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) sum [ i ] = sum [ i - 1 ] + g [ i ]. first ; memset ( ans , 0 , sizeof ans ); memset ( dp , 0x3f , sizeof dp ); dp [ 0 ][ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = i ; j <= m ; ++ j ) { // \u6ce8\u610f j \u662f\u4ece i \u5f00\u59cb\u679a\u4e3e\u7684\uff0c\u4e5f\u5c31\u662f\u5148\u4fdd\u8bc1 1 ~ i \u7684\u6bcf\u4e2a\u5b69\u5b50\u81f3\u5c11\u90fd\u6709\u4e00\u5757\u3002 dp [ i ][ j ] = dp [ i ][ j - i ], pre [ i ][ j ] = { i , j - i }; for ( int k = 0 ; k < i ; ++ k ) { int trans = dp [ k ][ j - ( i - k )] + k * ( sum [ i ] - sum [ k ]); if ( dp [ i ][ j ] > trans ) { dp [ i ][ j ] = trans ; pre [ i ][ j ] = { k , j - ( i - k )}; } } // \u4f60\u521d\u59cb\u5316\u53ea\u521d\u59cb\u5316\u4e86 dp[0][0]\uff0c\u90a3\u4e48\u8981\u8f6c\u79fb\u4e0b\u53bb\u5fc5\u7136\u8981\u5229\u7528\u5230\u5b83\u3002 // i = j, k = 0 \u7684\u65f6\u5019\u5c31\u4f1a\u5229\u7528\u5230\u3002 // \u6240\u4ee5\u4e0d\u8981\u5fd8\u8bb0 k \u53ef\u4ee5\u7b49\u4e8e 0\u3002 } } cout << dp [ n ][ m ] << endl ; solve ( n , m ); for ( int i = 1 ; i <= n ; ++ i ) cout << ans [ i ] << \" \" ; return 0 ; } \u590d\u6742\u5ea6 \\(\\text{O}(n^2\\times m)\\) \u3002 1 Tag : \u7ebf\u6027DP / \u6784\u9020\u65b9\u6848 / \u601d\u7ef4 / \u6392\u5e8f\u4e0d\u7b49\u5f0f","title":"ACWing277"},{"location":"sol/pro/acwing277/#acwing277","text":"","title":"Acwing277 \u997c\u5e72"},{"location":"sol/pro/acwing277/#description","text":"\u5723\u8bde\u8001\u4eba\u5171\u6709 \\(M\\) \u4e2a\u997c\u5e72\uff0c\u51c6\u5907\u5168\u90e8\u5206\u7ed9 \\(N\\) \u4e2a\u5b69\u5b50\u3002 \u6bcf\u4e2a\u5b69\u5b50\u6709\u4e00\u4e2a\u8d2a\u5a6a\u5ea6\uff0c\u7b2c \\(i\\) \u4e2a\u5b69\u5b50\u7684\u8d2a\u5a6a\u5ea6\u4e3a \\(g[i]\\) \u3002 \u5982\u679c\u6709 \\(a[i]\\) \u4e2a\u5b69\u5b50\u62ff\u5230\u7684\u997c\u5e72\u6570\u6bd4\u7b2c \\(i\\) \u4e2a\u5b69\u5b50\u591a\uff0c\u90a3\u4e48\u7b2c \\(i\\) \u4e2a\u5b69\u5b50\u4f1a\u4ea7\u751f \\(g[i] \\times a[i]\\) \u7684\u6028\u6c14\u3002 \u7ed9\u5b9a \\(N\u3001M\\) \u548c\u5e8f\u5217 \\(g\\) \uff0c\u5723\u8bde\u8001\u4eba\u8bf7\u4f60\u5e2e\u4ed6\u5b89\u6392\u4e00\u79cd\u5206\u914d\u65b9\u5f0f\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5b69\u5b50\u81f3\u5c11\u5206\u5230\u4e00\u5757\u997c\u5e72\uff0c\u5e76\u4e14\u6240\u6709\u5b69\u5b50\u7684\u6028\u6c14\u603b\u548c\u6700\u5c0f\u3002 \\(1 \\le N \\le 30\\) \uff0c \\(N \\le M \\le 5000\\) \uff0c \\(1 \\le g_i \\le 10^7\\) \u8981\u6c42\u8f93\u51fa\u65b9\u6848\u3002","title":"Description"},{"location":"sol/pro/acwing277/#analysis","text":"\u53d1\u73b0\u76f4\u63a5\u6c42\u89e3\u7684\u8bdd\u5f88\u4e0d\u597d\u641e\uff0c\u56e0\u4e3a\u6bcf\u53d1\u51fa\u4e00\u5757\u997c\u5e72\u7684\u65f6\u5019\uff0c\u4f60\u90fd\u8981\u626b\u4e00\u904d\u8fdb\u884c\u7edf\u8ba1\uff0c\u800c\u4e14\u968f\u7740\u997c\u5e72\u7684\u53d1\u51fa\uff0c\u6028\u6c14\u503c\u662f\u6709\u53ef\u80fd\u51cf\u5c11\u7684\u3002 \u56e0\u4e3a\uff0c\u5982\u679c\u7ed9\u7b2c \\(i\\) \u4e2a\u5b69\u5b50\u591a\u5206\u914d\u4e86\u4e00\u4e2a\u7cd6\u679c\uff0c\u5728\u4ed6\u524d\u540e\u7684\u5b69\u5b50\u7684\u6028\u6c14\u503c\u90fd\u662f\u4f1a\u53d7\u5230\u5f71\u54cd\u800c\u6539\u53d8\u7684\uff0c\u627e\u4e0d\u5230\u4e00\u4e2a\u53ef\u4ee5\u53ea\u5f71\u54cd \\(i\\) \u524d\u9762\u6216\u8005\u540e\u9762\u7684 \u201d\u9636\u6bb5\u201c\u3002 \u6240\u4ee5\u8003\u8651\u4e00\u4e2a\u6bd4\u8f83\u660e\u663e\u7684\u8d2a\u5fc3\uff0c\u5bf9 \\(g\\) \u964d\u5e8f\u6392\u5e8f\uff0c\u5219\u4ece\u524d\u5f80\u540e\u5206\u914d\u7684\u997c\u5e72\u6570\u91cf\u5fc5\u7136\u5355\u8c03\u4e0d\u4e0a\u5347\u3002 \u8fd9\u4e2a\u8bc1\u660e\u53ef\u4ee5\u5229\u7528\u8d2a\u5fc3\u7b97\u6cd5\u4e2d\u7684\u4e00\u4e2a\u7ecf\u5178\u4e0d\u7b49\u5f0f\uff1a\u6392\u5e8f\u4e0d\u7b49\u5f0f\u3002 \u5177\u4f53\u8bc1\u660e\u8fc7\u7a0b\u7565\u3002 \u6392\u5e8f\u8fc7\u540e\uff0c\u56e0\u4e3a\u4ece\u524d\u5f80\u540e\u5206\u914d\u7684\u997c\u5e72\u6570\u91cf\u5355\u8c03\u4e0d\u4e0a\u5347\uff0c\u90a3\u4e48\u5f53\u524d\u9762\u7684\u5b69\u5b50\u5206\u914d\u7684\u997c\u5e72\u6570\u4e0d\u6539\u53d8\u7684\u65f6\u5019\uff0c \u5982\u679c\u540e\u9762\u7684\u5b69\u5b50\u5206\u914d\u7684\u997c\u5e72\u6570\u91cf\u589e\u52a0\uff0c\u5bf9\u524d\u9762\u7684\u5b69\u5b50\u7684\u6028\u6c14\u503c\u662f\u6ca1\u6709\u5f71\u54cd\u7684\u3002 \u6240\u4ee5\uff0cDP \u7684\u201d\u9636\u6bb5\u201c\u5c31\u6d6e\u73b0\u51fa\u6765\u4e86\uff0c\u5c31\u662f \u201d\u524d \\(i\\) \u4e2a\u5b69\u5b50\u201c \uff08\u6392\u5e8f\u8fc7\u540e\uff09\u3002 \u800c\u9898\u76ee\u4e2d\u8fd8\u6709\u4e00\u4e2a\u8981\u7d20 \\(M\\) \uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u628a\u8fd9\u4e24\u4e2a\u8981\u7d20\u7ed3\u5408\u8d77\u6765\u5f97\u5230\u4e00\u4e2a DP \u72b6\u6001\uff1a \u8bbe \\(dp_{i,j}\\) \u8868\u793a\u8003\u8651\u524d \\(i\\) \u4e2a\u5b69\u5b50\uff0c\u603b\u5171\u5206\u914d\u4e86 \\(j\\) \u5757\u997c\u5e72\u7684\u6240\u6709\u65b9\u6848\uff0c\u5c5e\u6027\u4e3a\u6028\u6c14\u603b\u548c\u7684 \\(\\min\\) \u3002 \u5982\u679c\u76f4\u63a5\u8003\u8651\u5212\u5206\u5b50\u96c6\u7684\u8bdd\uff0c\u662f\u975e\u5e38\u9ebb\u70e6\uff0c\u4e0d\u4fbf\u4e8e\u8f6c\u79fb\u7684\u3002 \u8bbe \\(b_i\\) \u4e3a\u6392\u5e8f\u540e\u5904\u5728\u4f4d\u7f6e \\(i\\) \u7684\u5b69\u5b50\u5f53\u524d\u62ff\u5230\u7684\u997c\u5e72\u6570\u91cf\uff0c\u8003\u8651\u5982\u4e0b\u7684\u4e24\u79cd\u60c5\u51b5\uff1a \\(b_i = b_{i-1}\\) \uff0c\u90a3\u4e48\u8f6c\u79fb\u7684\u65f6\u5019 \\(a_i = a_{i-1}\\) \uff0c\u9700\u8981\u63d0\u524d\u77e5\u9053 \\(a_{i-1}\\) \u3002 \\(b_i = b_{i-1}\\) \uff0c\u90a3\u4e48\u8f6c\u79fb\u7684\u65f6\u5019 \\(a_i = a_{i-1} +1\\) \uff0c\u8fd8\u662f\u9700\u8981\u63d0\u524d\u77e5\u9053 \\(a_{i-1}\\) \u3002 \u4f46\u662f\u8fd9\u4e2a\u65f6\u5019\u662f\u5728 DP\uff0c\u4f60\u8981\u77e5\u9053 \\(a_{i-1}\\) \uff0c\u5c31\u5fc5\u987b\u8981\u77e5\u9053\u524d\u9762\u6709\u591a\u5c11\u4e2a\u5b69\u5b50\u83b7\u5f97\u7684\u997c\u5e72\u6570\u91cf\u548c \\(i-1\\) \u4e00\u6837\u3002 \u8fd9\u6837\u5c31\u9700\u8981\u8bdd\u989d\u5916\u7684\u65f6\u95f4\u53bb\u679a\u4e3e\u53ef\u80fd\u7684\u60c5\u51b5\uff0c\u5982\u679c\u6309\u7167\u8fd9\u6837\u63a8\u4e0b\u53bb\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5c06\u4f1a\u7206\u70b8\uff0c\u65e0\u6cd5\u63a5\u53d7\u3002 \u5c31\u50cf\u4e0b\u56fe\u6240\u793a\uff0c\u4f60\u4e0d\u77e5\u9053 \\(?\\) \u7684\u8ddd\u79bb\u5230\u5e95\u6709\u591a\u957f\uff0c\u6240\u4ee5\u9700\u8981\u679a\u4e3e\u3002 \u4f46\u662f\u89c2\u5bdf\u4e00\u4e0b\uff0c\u5047\u8bbe \\(b_i > 1\\) \uff0c\u4e5f\u5c31\u662f\u4e0b\u56fe\u6240\u793a\u7684\u5de6\u8fb9\u7684\u60c5\u51b5\u3002 \u5982\u679c\u6211\u4eec\u7ed9\u524d\u9762\u7684 \\(b\\) \u90fd\u51cf\u53bb \\(1\\) \uff0c \u76f8\u5bf9\u5927\u5c0f\u662f\u6ca1\u6709\u53d8\u7684\uff0c\u6028\u6c14\u503c\u4e5f\u662f\u6ca1\u6709\u589e\u52a0 \u7684\u3002 \u6240\u4ee5\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b \\(dp_{i,j} = dp_{i,j - i}\\) \u3002 \u800c\u4f60\u679a\u4e3e\u66f4\u65b0\u7684\u65f6\u5019\u4e0d\u53ef\u80fd\u4ece\u4e00\u4e2a\u5206\u914d\u4e86\u66f4\u591a\u997c\u5e72\u7684\u72b6\u6001\u8f6c\u79fb\u5230\u5206\u914d\u4e86\u66f4\u5c11\u7684\u72b6\u6001\u3002 \u6240\u4ee5 \\(dp_{i,j - 1}\\) \u4e00\u5b9a\u662f \\(dp_{i,j}\\) \u7684\u5b50\u96c6\uff0c\u5c31\u6ca1\u6709\u540e\u6548\u6027\u4e86\uff0c\u53ef\u4ee5\u76f4\u63a5\u8f6c\u79fb\u3002 \u5982\u679c\u662f\u4e0a\u56fe\u53f3\u8fb9\u7684\u60c5\u51b5\uff0c \\(b_i\\) \u7b49\u4e8e \\(1\\) \uff0c\u6211\u4eec\u5c31\u9700\u8981\u77e5\u9053\u524d\u9762\u6709\u591a\u5c11\u4e2a\u5b69\u5b50\u548c \\(b_i\\) \u4e00\u6837\u4e5f\u53ea\u62ff\u5230\u4e86 \\(1\\) \u5757\u3002 \u56e0\u4e3a\u6bcf\u4e2a\u5b69\u5b50\u81f3\u5c11\u8981\u62ff\u5230\u4e00\u5757\uff0c\u6240\u4ee5\u4e0d\u80fd\u518d\u51cf\u4e86\u3002 \u90a3\u4e48\u5c31\u627e\u5230\u4e00\u4e2a\u4f4d\u7f6e \\(k\\) \uff0c\u4f7f\u5f97 \\(b_k >1,b[k + 1 \\sim i] = 1\\) \u3002 \u7136\u540e\u628a \\(b[1\\sim k]\\) \u7684\u90e8\u5206\u8f6c\u5316\u6210\u5de6\u8fb9\u7684\u60c5\u51b5\uff0c \\(b[k+1 \\sim i]\\) \u7684\u90e8\u5206\u5355\u72ec\u8ba1\u7b97\u3002 \u56e0\u4e3a\u4f60\u4e0d\u77e5\u9053\u5177\u4f53 \\(k\\) \u5230\u5e95\u662f\u591a\u5c11\uff0c\u6240\u4ee5\u679a\u4e3e\u6240\u6709\u60c5\u51b5\u53d6\u6700\u5c0f\u503c\u5373\u53ef\uff08\u8fd9\u91cc\u5c31\u662f\u5728\u5212\u5206 \\(dp_{i,j}\\) \uff09\u3002 \u6240\u4ee5\u53ef\u4ee5\u5f97\u5230\u8fd9\u79cd\u60c5\u51b5\u7684\u8f6c\u79fb\u65b9\u7a0b\uff1a \\[dp_{i,j} = \\min\\limits_{0 \\le k < i}\\{dp_{k,j-(i-k)}+k\\times\\sum\\limits_{l = k+1}^{i} g_l\\}\\] \u540e\u9762\u7684 \\(\\sum\\) \u53ef\u4ee5\u76f4\u63a5\u524d\u7f00\u548c\u505a\u3002 \u5f97\u5230\u8fd9\u6837\u7684\u5212\u5206\u65b9\u5f0f\uff08\u7eff\u5b57\u662f\u5bf9\u5e94\u5b50\u96c6\u7684\u610f\u4e49\uff0c\u6a59\u5b57\u662f\u5b50\u96c6\u5bf9\u5e94\u7684\u72b6\u6001\uff09\uff1a \u6240\u4ee5\u53ef\u4ee5\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a \\[dp_{i,j} = \\min\\begin{cases}dp_{i,j - i} \\\\ \\min\\{dp_{k,j-(i-k)} + k\\times \\sum\\limits_{l = k + 1}^i g_l\\}\\end{cases}\\] \u521d\u59cb\u5316 \\(dp_{0,0} = 0\\) \uff0c\u5176\u4f59\u4e3a \\(+\\infty\\) \uff0c\u7b54\u6848\u4e3a \\(dp_{n,m}\\) \u3002 \u672c\u9898\u8fd8\u8981\u6c42\u8f93\u51fa\u65b9\u6848\uff0c\u6240\u4ee5\u8003\u8651\u8bb0\u5f55\u4e00\u4e2a pair \u6570\u7ec4 \\(pre_{i,j}\\) \uff0c\u8868\u793a\u4f7f \\(dp_{i,j}\\) \u53d1\u751f\u66f4\u65b0\u7684\u72b6\u6001\u7684 \\(i,j\\) \u5206\u522b\u662f\u4ec0\u4e48\u3002 \u5728 \\(dp_{i,j}\\) \u53d1\u751f\u66f4\u65b0\u7684\u65f6\u5019\u8bb0\u5f55\u5bf9\u5e94\u7684 \\(pre_{i,j}\\) \u5373\u53ef\u3002 \u7136\u540e\u6784\u9020\u65b9\u6848\u7684\u65f6\u5019\u5229\u7528\u9012\u5f52\u6784\u9020\uff0c\u8bbe \\(solve(x,y)\\) \u8868\u793a\u5904\u7406 \\(dp_{x,y}\\) \u5bf9\u7b54\u6848\u9020\u6210\u7684\u5f71\u54cd\u3002 \u90a3\u4e48\u5148\u9012\u5f52\u5904\u7406 \\(solve(pre_{x,y}.first,pre_{x,y}.second)\\) \u3002 \u9012\u5f52\u5230\u8fb9\u754c \\(x = 0\\) \u5c31\u8fd4\u56de\u3002 \u5b9e\u9645\u4e0a\u5c31\u662f\u63a8\u5230\u6700\u524d\u9762\uff08 \\(dp_{1,blabla}\\) \u7684\u72b6\u6001\uff09\uff0c\u7136\u540e\u5f80\u540e\u6839\u636e\u4ece\u54ea\u91cc\u8f6c\u79fb\u8fc7\u6765\u8ba1\u7b97\u7b54\u6848\u3002 \u4e5f\u5c31\u662f\u518d\u6b21\u6a21\u62df\u4e00\u904d\u8f6c\u79fb\u3002 \u5177\u4f53\u5b9e\u73b0\u770b\u4ee3\u7801\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int si = 30 + 10 ; const int sii = 5e3 + 10 ; int n , m ; int dp [ si ][ sii ]; pair < int , int > g [ si ]; pair < int , int > pre [ si ][ sii ]; int sum [ si ], ans [ si ]; void solve ( int x , int y ) { if ( ! x ) return ; // \u5230\u8fbe\u8fb9\u754c auto [ px , py ] = pre [ x ][ y ]; solve ( px , py ); // \u5148\u9012\u5f52\u5904\u7406 pre[x][y] if ( px == x ) for ( int i = 1 ; i <= x ; ++ i ) ans [ g [ i ]. second ] += 1 ; // from dp[x][y - x]; // \u6b64\u65f6\u7ed9 1 ~ x \u6240\u6709\u6570\u90fd\u52a0\u4e0a 1, \u56e0\u4e3a\u8f6c\u79fb\u7684\u65f6\u5019\u5b83\u4eec\u90fd\u51cf\u53bb\u4e86 1\u3002 else for ( int i = px + 1 ; i <= x ; ++ i ) ans [ g [ i ]. second ] = 1 ; // from dp[px][y - (x - px)]; // \u6b64\u65f6\u628a\u72b6\u6001\u5bf9\u5e94\u7684 k + 1 ~ i \u7684\u90e8\u5206\u8bbe\u7f6e\u4e3a 1\u3002 } int main () { cin >> n >> m ; for ( int i = 1 ; i <= n ; ++ i ) { cin >> g [ i ]. first ; g [ i ]. second = i ; } sort ( g + 1 , g + 1 + n ); reverse ( g + 1 , g + 1 + n ); sum [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) sum [ i ] = sum [ i - 1 ] + g [ i ]. first ; memset ( ans , 0 , sizeof ans ); memset ( dp , 0x3f , sizeof dp ); dp [ 0 ][ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = i ; j <= m ; ++ j ) { // \u6ce8\u610f j \u662f\u4ece i \u5f00\u59cb\u679a\u4e3e\u7684\uff0c\u4e5f\u5c31\u662f\u5148\u4fdd\u8bc1 1 ~ i \u7684\u6bcf\u4e2a\u5b69\u5b50\u81f3\u5c11\u90fd\u6709\u4e00\u5757\u3002 dp [ i ][ j ] = dp [ i ][ j - i ], pre [ i ][ j ] = { i , j - i }; for ( int k = 0 ; k < i ; ++ k ) { int trans = dp [ k ][ j - ( i - k )] + k * ( sum [ i ] - sum [ k ]); if ( dp [ i ][ j ] > trans ) { dp [ i ][ j ] = trans ; pre [ i ][ j ] = { k , j - ( i - k )}; } } // \u4f60\u521d\u59cb\u5316\u53ea\u521d\u59cb\u5316\u4e86 dp[0][0]\uff0c\u90a3\u4e48\u8981\u8f6c\u79fb\u4e0b\u53bb\u5fc5\u7136\u8981\u5229\u7528\u5230\u5b83\u3002 // i = j, k = 0 \u7684\u65f6\u5019\u5c31\u4f1a\u5229\u7528\u5230\u3002 // \u6240\u4ee5\u4e0d\u8981\u5fd8\u8bb0 k \u53ef\u4ee5\u7b49\u4e8e 0\u3002 } } cout << dp [ n ][ m ] << endl ; solve ( n , m ); for ( int i = 1 ; i <= n ; ++ i ) cout << ans [ i ] << \" \" ; return 0 ; } \u590d\u6742\u5ea6 \\(\\text{O}(n^2\\times m)\\) \u3002 1 Tag : \u7ebf\u6027DP / \u6784\u9020\u65b9\u6848 / \u601d\u7ef4 / \u6392\u5e8f\u4e0d\u7b49\u5f0f","title":"Analysis"},{"location":"sol/pro/acwing355/","text":"Acwing355 \u5f02\u8c61\u77f3 \u03c8(\uff40\u2207\u00b4)\u03c8 \u8865\u5145\u7ed3\u8bba\u7684\u4e24\u79cd\u8bc1\u660e\u3002 \\(\\text{Question}\\) \u03c8(\uff40\u2207\u00b4)\u03c8 \u52a8\u6001\u7ef4\u62a4\u6811\u4e0a\u4f7f\u5f97\u88ab\u9009\u4e2d\u70b9\u8054\u901a\u7684\u8fb9\u96c6\u957f\u5ea6\u4e4b\u548c\u7684\u6700\u5c0f\u503c\uff0c\u652f\u6301\u9009\u4e2d\uff0c\u53d6\u6d88\u9009\u4e2d\u67d0\u4e2a\u8282\u70b9\u3002 1e5. \\(\\text{Lemma}\\) \u03c8(\uff40\u2207\u00b4)\u03c8 \u5c06\u6240\u6709\u88ab\u9009\u4e2d\u7684\u8282\u70b9\u6309\u7167\u65f6\u95f4\u6233\u6392\u5e8f\u6210\u4e00\u5708\uff0c\u7b54\u6848\u5c31\u662f\u76f8\u90bb\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u957f\u5ea6\u503c\u548c\u7684\u4e8c\u5206\u4e4b\u4e00\u3002 \\(\\text{Proof1}\\) \u03c8(\uff40\u2207\u00b4)\u03c8 \u5206\u7c7b\u8ba8\u8bba\u8bc1\u6cd5\u3002 \u9996\u5148\u6709\u4e00\u4e2a\u7ed3\u8bba\uff0c\u4e00\u4e2a\u5b50\u6811\u5f53\u4e2d\u7684\u6240\u6709\u8282\u70b9\u7684\u65f6\u95f4\u6233\uff08 dfs \u5e8f\uff09\u5fc5\u7136\u662f\u8fde\u7eed\u7684\u4e00\u6bb5\uff0c\u53cd\u8fc7\u6765\u4e5f\u4e00\u6837\u3002 \u8003\u8651\u6700\u7b80\u5355\u7684\u4e00\u79cd\u60c5\u51b5\uff1a\u88ab\u9009\u4e2d\u7684\u53ea\u6709\u4e09\u4e2a\u8282\u70b9 \\(a,b,c\\) \uff08\u5df2\u7ecf\u6392\u597d\u5e8f\uff09 \u5148\u8d70\u4e00\u904d \\(\\delta(a,b)\\) \uff08\u5bf9\u5e94\u5230\u4ee3\u7801\u91cc\u5c31\u662f\u7ed9\u7b54\u6848\u7d2f\u52a0 \\(\\delta(a,b)\\) \u7684\u957f\u5ea6\uff09\uff0c\u6b64\u65f6 \\(\\delta(a,b)\\) \u88ab\u8986\u76d6\u4e86\u4e00\u6b21\uff0c\u5c06 \\(\\delta(a,b)\\) \u7684\u957f\u5ea6\u7d2f\u52a0\u5230\u7b54\u6848\u5f53\u4e2d\u3002 \u6b64\u65f6\u8d70 \\(\\delta(b,c)\\) \uff0c\u6709\u4e24\u79cd\u60c5\u51b5\uff1a \\(\\delta(b,c)\\) \u4e0d\u7ecf\u8fc7 \\(a\\) \uff0c\u8fd9\u65f6\u53ea\u80fd\u6709\u4e24\u79cd\u60c5\u51b5\uff08\u5176\u5b83\u7684\u53ef\u4ee5\u5f52\u5316\u5230\u8fd9\u4e24\u79cd\uff09 \u56fe\u4e2d\u60c5\u51b5 \\(A\\) \uff0c\u6b64\u65f6 \\(\\delta(a,\\text{LCA}(b,c))\\) \u88ab\u8986\u76d6\u4e00\u6b21\uff0c \\(\\delta(b,\\text{LCA}(b,c))\\) \u88ab\u8986\u76d6\u4e24\u6b21 \uff08\u5982\u679c \\(\\text{LCA}(b,c)=b\\) \u5c31\u53ea\u7b97\u4e00\u6b21\uff0c\u4e4b\u540e\u7684\u540c\u7406\uff09\uff0c \\(\\delta(\\text{LCA}(b,c),c)\\) \u88ab\u8986\u76d6\u4e00\u6b21\u3002 \u56fe\u4e2d\u60c5\u51b5 \\(B\\) \uff0c\u6b64\u65f6 \\(\\delta(a,\\text{LCA}(a,b))\\) \u88ab\u8986\u76d6\u4e00\u6b21\uff0c \\(\\delta(b,\\text{LCA}(a,b))\\) \u88ab\u8986\u76d6\u4e24\u6b21\uff0c \\(\\delta(\\text{LCA}(a,b),c)\\) \u88ab\u8986\u76d6\u4e00\u6b21\u3002 \\(\\delta(b,c)\\) \u7ecf\u8fc7 \\(a\\) \uff0c\u8fd9\u65f6\u53ea\u80fd\u6709\u4e00\u79cd\u60c5\u51b5\uff08\u5176\u5b83\u7684\u4ecd\u7136\u53ef\u4ee5\u5f52\u5316\uff09 \u56fe\u4e2d\u60c5\u51b5 \\(C\\) \uff0c\u6b64\u65f6 \\(\\delta(a,b)\\) \u88ab\u8986\u76d6\u4e24\u6b21\uff0c \\(\\delta(a,c)\\) \u88ab\u8986\u76d6\u4e00\u6b21\u3002 \u6700\u540e\u8d70\u4e00\u904d \\(\\delta(a,c)\\) \u5bf9\u4e8e\u4e0a\u9762\u7684 1.1 \uff1a \\(\\delta(a,\\text{LCA}(b,c))\\) \u4ece\u88ab\u8986\u76d6\u4e00\u6b21\u5230\u4e24\u6b21\uff0c \\(\\delta(\\text{LCA}(b,c),c)\\) \u4ece\u4e00\u6b21\u5230\u4e24\u6b21\uff0c \\(\\delta(b,\\text{LCA}(b,c))\\) \u4ecd\u65e7\u662f\u4e24\u6b21\u3002 \u5bf9\u4e8e\u4e0a\u9762\u7684 1.2 \uff1a \\(\\delta(a,\\text{LCA}(a,b))\\) \u4ece\u88ab\u8986\u76d6\u4e00\u6b21\u5230\u4e24\u6b21\uff0c \\(\\delta(b,\\text{LCA}(a,b))\\) \u4ecd\u65e7\u662f\u4e24\u6b21\uff0c \\(\\delta(\\text{LCA}(a,b),c)\\) \u4ece\u4e00\u6b21\u5230\u4e24\u6b21\u3002 \u5bf9\u4e8e\u4e0a\u9762\u7684 2.1 \uff1a \\(\\delta(a,b)\\) \u4ecd\u65e7\u662f\u4e24\u6b21\uff0c \\(\\delta(a,c)\\) \u4ece\u4e00\u6b21\u5230\u4e24\u6b21\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u5728\u53ea\u6709\u4e09\u4e2a\u88ab\u9009\u4e2d\u70b9\u7684\u65f6\u5019\uff0c \\(\\text{Lemma}\\) \u4e00\u5b9a\u6210\u7acb\u3002 \u6839\u636e\u6570\u5b66\u5f52\u7eb3\u6cd5\u53ef\u4ee5\u5f97\u5230\u4efb\u610f\u591a\u4e2a\u88ab\u9009\u4e2d\u70b9\u7684\u60c5\u51b5\uff0c \\(\\text{Lemma}\\) \u5f97\u8bc1\u3002 \\(\\text{Proof2}\\) \u03c8(\uff40\u2207\u00b4)\u03c8 \u56e0\u4e3a dfn \u8fde\u7eed\u7684\u4e00\u6bb5\u5fc5\u7136\u5728\u540c\u4e00\u4e2a\u5b50\u6811\u5f53\u4e2d\u3002 \u8003\u8651 \\(\\text{Lemma}\\) \u7684\u8fc7\u7a0b\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u5728\u4e0d\u65ad\u7684\u8bbf\u95ee\u67d0\u4e2a\u5b50\u6811\uff0c\u5904\u7406\u5b8c\u8fd9\u4e2a\u5b50\u6811\u5f53\u4e2d\u4f1a\u88ab\u7edf\u8ba1\u7684\u8fb9\uff0c\u7136\u540e\u9000\u51fa\u8fd9\u4e2a\u5b50\u6811\u3002 \u90a3\u5c31\u76f4\u63a5\u770b\u8fd9\u4e2a\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u8fc7\u7a0b\u672c\u8eab\uff0c\u5047\u8bbe\u4f60\u8fdb\u5165\u5230\u4e86\u4e00\u4e2a\u4ee5 \\(fa\\) \u4e3a\u6839\u7684\u5b50\u6811\uff0c\u5f53\u524d\u8d70\u5230\u4e86\u4e00\u4e2a\u6709\u5f02\u8c61\u77f3\u7684\u8282\u70b9 \\(u\\) \u3002 \u90a3\u4e48\u4f60\u8fdb\u5165\u8fd9\u4e2a\u5b50\u6811\u7684\u65f6\u5019\uff08\u4e5f\u5c31\u662f\u5904\u7406\u524d\u9762\u7684\u7b54\u6848\u7684\u65f6\u5019\uff09\uff0c \\(fa \\to u\\) \u5b9e\u9645\u4e0a\u5df2\u7ecf\u88ab\u7b97\u8fc7\u4e00\u6b21\u4e86\uff0c\u5f53\u4f60\u7ed9 \\(u\\) \u8fdb\u884c\u7edf\u8ba1\uff08\u4e5f\u5c31\u662f\u8981\u9000\u51fa\u5b50\u6811\u7684\u65f6\u5019\uff09\uff0c \\(fa \\to u\\) \u5c31\u4f1a\u88ab\u518d\u7b97\u4e00\u6b21\uff0c\u5e76\u4e14\u4e4b\u540e\u4e0d\u4f1a\u56de\u6765\u518d\u6b21\u8ba1\u7b97\u3002 \u63a8\u5e7f\u8fc7\u540e\u5f97\u5230\uff1a\u4e00\u6761\u8fde\u63a5\u4e24\u4e2a\u6709\u5f02\u8c61\u77f3\u7684\u8282\u70b9\u7684\u8def\u5f84\u5fc5\u7136\u4f1a\u88ab\u8ba1\u7b97\u4e24\u6b21\u3002 \u53ef\u4ee5\u77e5\u9053 \\(\\text{Lemma}\\) \u662f\u6b63\u786e\u7684\u3002 \\(\\text{Code}\\) \u03c8(\uff40\u2207\u00b4)\u03c8 \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 #include <set> #include <cstring> #include <iostream> using namespace std ; using i128 = __int128 ; inline void write ( i128 x ){ if ( x < 0 ) putchar ( '-' ), x =- x ; if ( x > 9 ) write ( x / 10 ); putchar ( x % 10 + 48 ); } constexpr int si = 1e5 + 10 ; constexpr int inf = 0x3f3f3f3f ; int n , m , tot = 0 , tim = 0 ; int head [ si ]; struct Edge { int ver , Next , w ; } e [ si << 1 ]; inline void add ( int u , int v , int w ){ e [ tot ] = ( Edge ){ v , head [ u ], w }, head [ u ] = tot ++ ; } int dep [ si ], f [ si ][ 20 ], dfn [ si ]; i128 dis [ si ]; inline void dfs ( int u , int fa ){ dep [ u ] = dep [ fa ] + 1 , f [ u ][ 0 ] = fa , dfn [ u ] =++ tim ; for ( register int i = 1 ; i <= 19 ; ++ i ) f [ u ][ i ] = f [ f [ u ][ i -1 ]][ i -1 ]; for ( register int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( v == fa ) continue ; dis [ v ] = dis [ u ] + w , dfs ( v , u ); } return ; } inline int Lca ( int u , int v ){ if ( dep [ u ] < dep [ v ]) swap ( u , v ); for ( register int i = 19 ; i >= 0 ; -- i ){ if ( dep [ f [ u ][ i ]] >= dep [ v ]) u = f [ u ][ i ]; } if ( u == v ) return u ; for ( register int i = 19 ; i >= 0 ; -- i ){ if ( f [ u ][ i ] != f [ v ][ i ]) u = f [ u ][ i ], v = f [ v ][ i ]; } return f [ u ][ 0 ]; } inline i128 path ( int u , int v ){ return 1l l * dis [ u ] + 1l l * dis [ v ] -2ll * ( dis [ Lca ( u , v )]); } std :: set < std :: pair < int , int >> s ; i128 ans = 0 ; inline void Insert ( int x ){ if ( s . size () == 2 ) return ( void ) s . insert ({ dfn [ x ], x }); auto now = s . insert ({ dfn [ x ], x }). first ; auto Pre = std :: prev ( now ), Nex = std :: next ( now ); if ( Pre == s . begin ()) Pre =-- ( s . find ({ inf , inf })); if ( Nex == ( -- s . end ())) Nex =++ ( s . begin ()); std :: pair < int , int > u =* Pre , v =* Nex ; ans -= path ( u . second , v . second ); ans += path ( u . second , x ) + path ( x , v . second ); } inline void Delete ( int x ){ if ( s . size () == 3 ) return ( void ) s . erase ( s . find ({ dfn [ x ], x })); auto now = s . find ({ dfn [ x ], x }); auto Pre = std :: prev ( now ), Nex = std :: next ( now ); if ( Pre == s . begin ()) Pre =-- ( s . find ({ inf , inf })); if ( Nex == ( -- s . end ())) Nex =++ ( s . begin ()); std :: pair < int , int > u =* Pre , v =* Nex ; ans += path ( u . second , v . second ); ans -= path ( u . second , x ) + path ( x , v . second ); s . erase ( now ); } int main (){ memset ( head , -1 , sizeof head ); cin >> n , s . insert ({ -1 , -1 }), s . insert ({ inf , inf }); //\u5de6\u53f3\u5404\u585e\u4e00\u4e2a\u7a7a\u4f59\u8282\u70b9\u9632\u6b62\u8d8a\u754c // \u8fd9\u62db\u662f\u6253 CF \u7684\u65f6\u5019\u8ddf jiangly \u5b66\u7684 for ( register int i = 1 ; i < n ; ++ i ){ int u , v , w ; cin >> u >> v >> w ; add ( u , v , w ), add ( v , u , w ); } dfs ( 1 , 0 ); cin >> m ; while ( m -- ){ char op ; cin >> op ; int x ; if ( op == '+' ) cin >> x , Insert ( x ); if ( op == '-' ) cin >> x , Delete ( x ); if ( op == '?' ) write ( ans / 2 ), putchar ( '\\n' ); } return 0 ; } 1 Tag : LCA / \u6811\u4e0a\u5dee\u5206 / dfs \u5e8f","title":"ACWing355"},{"location":"sol/pro/acwing355/#acwing355","text":"\u8865\u5145\u7ed3\u8bba\u7684\u4e24\u79cd\u8bc1\u660e\u3002","title":"Acwing355 \u5f02\u8c61\u77f3"},{"location":"sol/pro/acwing355/#textquestion","text":"\u52a8\u6001\u7ef4\u62a4\u6811\u4e0a\u4f7f\u5f97\u88ab\u9009\u4e2d\u70b9\u8054\u901a\u7684\u8fb9\u96c6\u957f\u5ea6\u4e4b\u548c\u7684\u6700\u5c0f\u503c\uff0c\u652f\u6301\u9009\u4e2d\uff0c\u53d6\u6d88\u9009\u4e2d\u67d0\u4e2a\u8282\u70b9\u3002 1e5.","title":"\\(\\text{Question}\\)"},{"location":"sol/pro/acwing355/#textlemma","text":"\u5c06\u6240\u6709\u88ab\u9009\u4e2d\u7684\u8282\u70b9\u6309\u7167\u65f6\u95f4\u6233\u6392\u5e8f\u6210\u4e00\u5708\uff0c\u7b54\u6848\u5c31\u662f\u76f8\u90bb\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u957f\u5ea6\u503c\u548c\u7684\u4e8c\u5206\u4e4b\u4e00\u3002","title":"\\(\\text{Lemma}\\)"},{"location":"sol/pro/acwing355/#textproof1","text":"\u5206\u7c7b\u8ba8\u8bba\u8bc1\u6cd5\u3002 \u9996\u5148\u6709\u4e00\u4e2a\u7ed3\u8bba\uff0c\u4e00\u4e2a\u5b50\u6811\u5f53\u4e2d\u7684\u6240\u6709\u8282\u70b9\u7684\u65f6\u95f4\u6233\uff08 dfs \u5e8f\uff09\u5fc5\u7136\u662f\u8fde\u7eed\u7684\u4e00\u6bb5\uff0c\u53cd\u8fc7\u6765\u4e5f\u4e00\u6837\u3002 \u8003\u8651\u6700\u7b80\u5355\u7684\u4e00\u79cd\u60c5\u51b5\uff1a\u88ab\u9009\u4e2d\u7684\u53ea\u6709\u4e09\u4e2a\u8282\u70b9 \\(a,b,c\\) \uff08\u5df2\u7ecf\u6392\u597d\u5e8f\uff09 \u5148\u8d70\u4e00\u904d \\(\\delta(a,b)\\) \uff08\u5bf9\u5e94\u5230\u4ee3\u7801\u91cc\u5c31\u662f\u7ed9\u7b54\u6848\u7d2f\u52a0 \\(\\delta(a,b)\\) \u7684\u957f\u5ea6\uff09\uff0c\u6b64\u65f6 \\(\\delta(a,b)\\) \u88ab\u8986\u76d6\u4e86\u4e00\u6b21\uff0c\u5c06 \\(\\delta(a,b)\\) \u7684\u957f\u5ea6\u7d2f\u52a0\u5230\u7b54\u6848\u5f53\u4e2d\u3002 \u6b64\u65f6\u8d70 \\(\\delta(b,c)\\) \uff0c\u6709\u4e24\u79cd\u60c5\u51b5\uff1a \\(\\delta(b,c)\\) \u4e0d\u7ecf\u8fc7 \\(a\\) \uff0c\u8fd9\u65f6\u53ea\u80fd\u6709\u4e24\u79cd\u60c5\u51b5\uff08\u5176\u5b83\u7684\u53ef\u4ee5\u5f52\u5316\u5230\u8fd9\u4e24\u79cd\uff09 \u56fe\u4e2d\u60c5\u51b5 \\(A\\) \uff0c\u6b64\u65f6 \\(\\delta(a,\\text{LCA}(b,c))\\) \u88ab\u8986\u76d6\u4e00\u6b21\uff0c \\(\\delta(b,\\text{LCA}(b,c))\\) \u88ab\u8986\u76d6\u4e24\u6b21 \uff08\u5982\u679c \\(\\text{LCA}(b,c)=b\\) \u5c31\u53ea\u7b97\u4e00\u6b21\uff0c\u4e4b\u540e\u7684\u540c\u7406\uff09\uff0c \\(\\delta(\\text{LCA}(b,c),c)\\) \u88ab\u8986\u76d6\u4e00\u6b21\u3002 \u56fe\u4e2d\u60c5\u51b5 \\(B\\) \uff0c\u6b64\u65f6 \\(\\delta(a,\\text{LCA}(a,b))\\) \u88ab\u8986\u76d6\u4e00\u6b21\uff0c \\(\\delta(b,\\text{LCA}(a,b))\\) \u88ab\u8986\u76d6\u4e24\u6b21\uff0c \\(\\delta(\\text{LCA}(a,b),c)\\) \u88ab\u8986\u76d6\u4e00\u6b21\u3002 \\(\\delta(b,c)\\) \u7ecf\u8fc7 \\(a\\) \uff0c\u8fd9\u65f6\u53ea\u80fd\u6709\u4e00\u79cd\u60c5\u51b5\uff08\u5176\u5b83\u7684\u4ecd\u7136\u53ef\u4ee5\u5f52\u5316\uff09 \u56fe\u4e2d\u60c5\u51b5 \\(C\\) \uff0c\u6b64\u65f6 \\(\\delta(a,b)\\) \u88ab\u8986\u76d6\u4e24\u6b21\uff0c \\(\\delta(a,c)\\) \u88ab\u8986\u76d6\u4e00\u6b21\u3002 \u6700\u540e\u8d70\u4e00\u904d \\(\\delta(a,c)\\) \u5bf9\u4e8e\u4e0a\u9762\u7684 1.1 \uff1a \\(\\delta(a,\\text{LCA}(b,c))\\) \u4ece\u88ab\u8986\u76d6\u4e00\u6b21\u5230\u4e24\u6b21\uff0c \\(\\delta(\\text{LCA}(b,c),c)\\) \u4ece\u4e00\u6b21\u5230\u4e24\u6b21\uff0c \\(\\delta(b,\\text{LCA}(b,c))\\) \u4ecd\u65e7\u662f\u4e24\u6b21\u3002 \u5bf9\u4e8e\u4e0a\u9762\u7684 1.2 \uff1a \\(\\delta(a,\\text{LCA}(a,b))\\) \u4ece\u88ab\u8986\u76d6\u4e00\u6b21\u5230\u4e24\u6b21\uff0c \\(\\delta(b,\\text{LCA}(a,b))\\) \u4ecd\u65e7\u662f\u4e24\u6b21\uff0c \\(\\delta(\\text{LCA}(a,b),c)\\) \u4ece\u4e00\u6b21\u5230\u4e24\u6b21\u3002 \u5bf9\u4e8e\u4e0a\u9762\u7684 2.1 \uff1a \\(\\delta(a,b)\\) \u4ecd\u65e7\u662f\u4e24\u6b21\uff0c \\(\\delta(a,c)\\) \u4ece\u4e00\u6b21\u5230\u4e24\u6b21\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u5728\u53ea\u6709\u4e09\u4e2a\u88ab\u9009\u4e2d\u70b9\u7684\u65f6\u5019\uff0c \\(\\text{Lemma}\\) \u4e00\u5b9a\u6210\u7acb\u3002 \u6839\u636e\u6570\u5b66\u5f52\u7eb3\u6cd5\u53ef\u4ee5\u5f97\u5230\u4efb\u610f\u591a\u4e2a\u88ab\u9009\u4e2d\u70b9\u7684\u60c5\u51b5\uff0c \\(\\text{Lemma}\\) \u5f97\u8bc1\u3002","title":"\\(\\text{Proof1}\\)"},{"location":"sol/pro/acwing355/#textproof2","text":"\u56e0\u4e3a dfn \u8fde\u7eed\u7684\u4e00\u6bb5\u5fc5\u7136\u5728\u540c\u4e00\u4e2a\u5b50\u6811\u5f53\u4e2d\u3002 \u8003\u8651 \\(\\text{Lemma}\\) \u7684\u8fc7\u7a0b\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u5728\u4e0d\u65ad\u7684\u8bbf\u95ee\u67d0\u4e2a\u5b50\u6811\uff0c\u5904\u7406\u5b8c\u8fd9\u4e2a\u5b50\u6811\u5f53\u4e2d\u4f1a\u88ab\u7edf\u8ba1\u7684\u8fb9\uff0c\u7136\u540e\u9000\u51fa\u8fd9\u4e2a\u5b50\u6811\u3002 \u90a3\u5c31\u76f4\u63a5\u770b\u8fd9\u4e2a\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u8fc7\u7a0b\u672c\u8eab\uff0c\u5047\u8bbe\u4f60\u8fdb\u5165\u5230\u4e86\u4e00\u4e2a\u4ee5 \\(fa\\) \u4e3a\u6839\u7684\u5b50\u6811\uff0c\u5f53\u524d\u8d70\u5230\u4e86\u4e00\u4e2a\u6709\u5f02\u8c61\u77f3\u7684\u8282\u70b9 \\(u\\) \u3002 \u90a3\u4e48\u4f60\u8fdb\u5165\u8fd9\u4e2a\u5b50\u6811\u7684\u65f6\u5019\uff08\u4e5f\u5c31\u662f\u5904\u7406\u524d\u9762\u7684\u7b54\u6848\u7684\u65f6\u5019\uff09\uff0c \\(fa \\to u\\) \u5b9e\u9645\u4e0a\u5df2\u7ecf\u88ab\u7b97\u8fc7\u4e00\u6b21\u4e86\uff0c\u5f53\u4f60\u7ed9 \\(u\\) \u8fdb\u884c\u7edf\u8ba1\uff08\u4e5f\u5c31\u662f\u8981\u9000\u51fa\u5b50\u6811\u7684\u65f6\u5019\uff09\uff0c \\(fa \\to u\\) \u5c31\u4f1a\u88ab\u518d\u7b97\u4e00\u6b21\uff0c\u5e76\u4e14\u4e4b\u540e\u4e0d\u4f1a\u56de\u6765\u518d\u6b21\u8ba1\u7b97\u3002 \u63a8\u5e7f\u8fc7\u540e\u5f97\u5230\uff1a\u4e00\u6761\u8fde\u63a5\u4e24\u4e2a\u6709\u5f02\u8c61\u77f3\u7684\u8282\u70b9\u7684\u8def\u5f84\u5fc5\u7136\u4f1a\u88ab\u8ba1\u7b97\u4e24\u6b21\u3002 \u53ef\u4ee5\u77e5\u9053 \\(\\text{Lemma}\\) \u662f\u6b63\u786e\u7684\u3002","title":"\\(\\text{Proof2}\\)"},{"location":"sol/pro/acwing355/#textcode","text":"\u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 #include <set> #include <cstring> #include <iostream> using namespace std ; using i128 = __int128 ; inline void write ( i128 x ){ if ( x < 0 ) putchar ( '-' ), x =- x ; if ( x > 9 ) write ( x / 10 ); putchar ( x % 10 + 48 ); } constexpr int si = 1e5 + 10 ; constexpr int inf = 0x3f3f3f3f ; int n , m , tot = 0 , tim = 0 ; int head [ si ]; struct Edge { int ver , Next , w ; } e [ si << 1 ]; inline void add ( int u , int v , int w ){ e [ tot ] = ( Edge ){ v , head [ u ], w }, head [ u ] = tot ++ ; } int dep [ si ], f [ si ][ 20 ], dfn [ si ]; i128 dis [ si ]; inline void dfs ( int u , int fa ){ dep [ u ] = dep [ fa ] + 1 , f [ u ][ 0 ] = fa , dfn [ u ] =++ tim ; for ( register int i = 1 ; i <= 19 ; ++ i ) f [ u ][ i ] = f [ f [ u ][ i -1 ]][ i -1 ]; for ( register int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( v == fa ) continue ; dis [ v ] = dis [ u ] + w , dfs ( v , u ); } return ; } inline int Lca ( int u , int v ){ if ( dep [ u ] < dep [ v ]) swap ( u , v ); for ( register int i = 19 ; i >= 0 ; -- i ){ if ( dep [ f [ u ][ i ]] >= dep [ v ]) u = f [ u ][ i ]; } if ( u == v ) return u ; for ( register int i = 19 ; i >= 0 ; -- i ){ if ( f [ u ][ i ] != f [ v ][ i ]) u = f [ u ][ i ], v = f [ v ][ i ]; } return f [ u ][ 0 ]; } inline i128 path ( int u , int v ){ return 1l l * dis [ u ] + 1l l * dis [ v ] -2ll * ( dis [ Lca ( u , v )]); } std :: set < std :: pair < int , int >> s ; i128 ans = 0 ; inline void Insert ( int x ){ if ( s . size () == 2 ) return ( void ) s . insert ({ dfn [ x ], x }); auto now = s . insert ({ dfn [ x ], x }). first ; auto Pre = std :: prev ( now ), Nex = std :: next ( now ); if ( Pre == s . begin ()) Pre =-- ( s . find ({ inf , inf })); if ( Nex == ( -- s . end ())) Nex =++ ( s . begin ()); std :: pair < int , int > u =* Pre , v =* Nex ; ans -= path ( u . second , v . second ); ans += path ( u . second , x ) + path ( x , v . second ); } inline void Delete ( int x ){ if ( s . size () == 3 ) return ( void ) s . erase ( s . find ({ dfn [ x ], x })); auto now = s . find ({ dfn [ x ], x }); auto Pre = std :: prev ( now ), Nex = std :: next ( now ); if ( Pre == s . begin ()) Pre =-- ( s . find ({ inf , inf })); if ( Nex == ( -- s . end ())) Nex =++ ( s . begin ()); std :: pair < int , int > u =* Pre , v =* Nex ; ans += path ( u . second , v . second ); ans -= path ( u . second , x ) + path ( x , v . second ); s . erase ( now ); } int main (){ memset ( head , -1 , sizeof head ); cin >> n , s . insert ({ -1 , -1 }), s . insert ({ inf , inf }); //\u5de6\u53f3\u5404\u585e\u4e00\u4e2a\u7a7a\u4f59\u8282\u70b9\u9632\u6b62\u8d8a\u754c // \u8fd9\u62db\u662f\u6253 CF \u7684\u65f6\u5019\u8ddf jiangly \u5b66\u7684 for ( register int i = 1 ; i < n ; ++ i ){ int u , v , w ; cin >> u >> v >> w ; add ( u , v , w ), add ( v , u , w ); } dfs ( 1 , 0 ); cin >> m ; while ( m -- ){ char op ; cin >> op ; int x ; if ( op == '+' ) cin >> x , Insert ( x ); if ( op == '-' ) cin >> x , Delete ( x ); if ( op == '?' ) write ( ans / 2 ), putchar ( '\\n' ); } return 0 ; } 1 Tag : LCA / \u6811\u4e0a\u5dee\u5206 / dfs \u5e8f","title":"\\(\\text{Code}\\)"},{"location":"sol/pro/bzoj3307/","text":"Bzoj3307 \u96e8\u5929\u7684\u5c3e\u5df4 \u03c8(\uff40\u2207\u00b4)\u03c8 \\(\\text{Question}\\) \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u6bcf\u6b21\u7ed9 \\((x,y)\\) \u7684\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u53d1\u653e\u4e00\u4e2a\u7b2c \\(z\\) \u79cd\u7269\u54c1\u3002 \\(M\\) \u6b21\u64cd\u4f5c\uff0c\u6700\u540e\u8be2\u95ee\u6bcf\u4e2a\u70b9\u6700\u591a\u7684\u662f\u54ea\u4e00\u79cd\u7269\u54c1\u3002 \\(1\\le N,M \\le 10^5,1\\le z\\le 10^9\\) \\(\\text{Brute force}\\) \u03c8(\uff40\u2207\u00b4)\u03c8 \u5148\u79bb\u6563\u5316 \\(z\\) \u3002 \u8003\u8651\u8bbe\u4e00\u4e2a\u8ba1\u6570\u6570\u7ec4 \\(d\\) \uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9 \\(x\\) \uff0c\u5206\u522b\u7ef4\u62a4\u7b2c \\(z\\) \u79cd\u7269\u54c1\u5728 \\(x\\) \u4e0a\u6709\u591a\u5c11\u4e2a\u3002 \u5148\u6c42\u51fa \\(\\text{LCA}\\) \uff0c\u6bcf\u6b21\u64cd\u4f5c\u4ece \\(x \\to \\text{LCA} \\to y\\) \uff0c\u7136\u540e\u628a\u8def\u5f84\u4e0a\u76f8\u5e94\u7684\u8282\u70b9\u7684 \\(d[x][z]\\) \u52a0\u4e00\u3002 \u590d\u6742\u5ea6 \\(\\text{O}(NM)\\) \u3002 \u6216\u8005\u53ef\u4ee5\u5229\u7528\u6811\u4e0a\u5dee\u5206\u5bf9\u6bcf\u79cd\u7269\u54c1\u7684\u60c5\u51b5\u5206\u522b\u8fdb\u884c\u4fee\u6539\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u8bbe \\(c\\) \u4e3a \\(d\\) \u7684\u5dee\u5206\u6570\u7ec4\uff0c\u6bcf\u6b21\u64cd\u4f5c \\((x,y,z)\\) \uff0c\u4f7f \uff1a \\[c[x][z]+1,c[y][z]+1,c[\\text{LCA(x,y)}][z]-1,c[\\text{Father}(\\text{LCA(x,y)})][z]-1\\] \u6700\u540e\u8fdb\u884c \\(cnt_z\\) \u6b21 dfs\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9 \\(u\\) \uff0c \\(d\\) \u5c31\u7b49\u4e8e \\(c\\) \u7684\u5b50\u6811\u548c \u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u6c42\u7269\u54c1\u51fa\u73b0\u6b21\u6570\u7684\u6700\u503c\u5373\u53ef\u3002 \u590d\u6742\u5ea6 \\(\\text{O}(N\\times cnt_z)\\) \uff0c \\(cnt_z\\) \u662f\u4e0d\u540c\u7684\u7269\u54c1\u7684\u6570\u91cf\u3002 \u8fd9\u4e2a\u505a\u6cd5\u662f\u5bf9\u6bcf\u79cd\u7269\u54c1\u90fd\u7ef4\u62a4\u4e86\u4e00\u4e2a\u5dee\u5206\u5e8f\u5217\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u5dee\u5206\u5e8f\u5217\u662f\u5728\u6811\u4e0a\u7684\u3002 \\(\\text{Solution}\\) \u03c8(\uff40\u2207\u00b4)\u03c8 \u5b9e\u9645\u4e0a \\(\\text{O}(N\\times cnt_z)\\) \u505a\u6cd5\u662f\u5bf9\u6bcf\u4e2a\u8282\u70b9 \\(u\\) \u7ef4\u62a4\u4e86\u4e00\u4e2a\u5e8f\u5217 \\(c[u]\\) \uff0c \\(c[u][z]\\) \u5c31\u8868\u793a \\(z\\) \u8fd9\u79cd\u7269\u54c1\u7684\u5dee\u5206\u5e8f\u5217\u5728 \\(u\\) \u8fd9\u91cc\u7684\u8fd9\u4e00\u9879\u3002 \u90a3\u4e48\u4e00\u4e2a\u8282\u70b9 \\(u\\) \u7684\u7b54\u6848\u5c31\u662f\u5b83\u5b50\u6811\u5f53\u4e2d\u6240\u6709\u8282\u70b9\u7684 \\(c[v]\\) \u7684\u5408\u5e76\u8d77\u6765\u4e4b\u540e\u5f97\u5230\u7684\u65b0\u5e8f\u5217\u7684 \\(\\text{max\\_element}\\) \u3002 \u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9 \\(u\\) \u5f00\u4e00\u9897\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u4ee3\u66ff \\(c[u]\\) \uff0c\u540c\u65f6\u652f\u6301\u7ef4\u62a4 \\(c[u]\\) \u5f53\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5927\u503c\u7684\u4f4d\u7f6e\u3002 \u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2a\u8282\u70b9\u7684\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u503c\u57df\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f \\([1,cnt_z]\\) \u3002 \u8fdb\u884c\u4e00\u6b21 dfs\uff0c\u90a3\u4e48\u8ba1\u7b97 \\(u\\) \u7684\u7b54\u6848\u7684\u65f6\u5019\uff0c\u5c31\u53ea\u9700\u8981\u628a \\(u\\) \u7684\u6240\u6709\u513f\u5b50\u8282\u70b9\u7684\u7ebf\u6bb5\u6811\u548c \\(u\\) \u7684\u7ebf\u6bb5\u6811\u8fdb\u884c\u7ebf\u6bb5\u6811\u5408\u5e76\u5373\u53ef\u5feb\u901f\u5f97\u5230 \\(u\\) \u7684\u7b54\u6848\u3002 \u590d\u6742\u5ea6 \\(\\text{O}((N+M)\\log(N+M))\\) \\(\\text{Trick:}\\) \u5bf9\u4e8e\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a\u4fe1\u606f\u5e8f\u5217\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8282\u70b9\u7684\u7b54\u6848\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c\u5b50\u6811\u548c\u7684\u65b9\u5f0f\u5f97\u5230\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u4e00\u9897\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u4ee3\u66ff\u6bcf\u4e2a\u8282\u70b9\u7684\u4fe1\u606f\u5e8f\u5217\uff0c\u7136\u540e\u4f7f\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u8ba1\u7b97\u7b54\u6848\u3002 \\(\\text{Code}\\) \u03c8(\uff40\u2207\u00b4)\u03c8 \u96e8\u5929\u7684\u5c3e\u5df4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 #include <cmath> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int si = 1e5 + 10 ; int n , m ; int tot = 0 , head [ si ]; struct Edge { int ver , Next ; } e [ si << 1 ]; inline void add ( int u , int v ) { e [ tot ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot ++ ; } int dep [ si ], f [ si ][ 20 ]; int lg ; inline void dfs1 ( int u , int fa ) { dep [ u ] = dep [ fa ] + 1 , f [ u ][ 0 ] = fa ; for ( int i = 1 ; i <= lg ; ++ i ) f [ u ][ i ] = f [ f [ u ][ i -1 ] ][ i -1 ]; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs1 ( v , u ); } } inline int Lca ( int u , int v ) { if ( dep [ u ] < dep [ v ]) swap ( u , v ); for ( int i = lg ; i >= 0 ; -- i ) if ( dep [ f [ u ][ i ]] >= dep [ v ]) u = f [ u ][ i ]; if ( u == v ) return u ; for ( int i = lg ; i >= 0 ; -- i ) if ( f [ u ][ i ] != f [ v ][ i ]) u = f [ u ][ i ], v = f [ v ][ i ]; return f [ u ][ 0 ]; } int root [ si ], cnt = 0 ; struct segment_tree { int ls , rs ; int mx , id ; } t [ si * 80 ]; inline void pushup ( int p ) { int lc = t [ p ]. ls , rc = t [ p ]. rs ; if ( t [ lc ]. mx >= t [ rc ]. mx ) t [ p ]. mx = t [ lc ]. mx , t [ p ]. id = t [ lc ]. id ; else t [ p ]. mx = t [ rc ]. mx , t [ p ]. id = t [ rc ]. id ; } inline void change ( int & p , int l , int r , int pos , int val ) { if ( ! p ) p = ++ cnt ; if ( l == r ){ t [ p ]. mx += val ; t [ p ]. id = l ; return ; } int mid = l + r >> 1 ; if ( pos <= mid ) change ( t [ p ]. ls , l , mid , pos , val ); else change ( t [ p ]. rs , mid + 1 , r , pos , val ); pushup ( p ); } int merge ( int p , int q , int l , int r ) { if ( ! p ) return q ; if ( ! q ) return p ; if ( l == r ){ t [ p ]. mx += t [ q ]. mx ; return p ; } int mid = l + r >> 1 ; t [ p ]. ls = merge ( t [ p ]. ls , t [ q ]. ls , l , mid ); t [ p ]. rs = merge ( t [ p ]. rs , t [ q ]. rs , mid + 1 , r ); pushup ( p ); return p ; } int cntz = 0 ; int ans [ si ]; int u [ si ], v [ si ], z [ si ], idz [ si ]; void dfs2 ( int u , int fa ) { for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs2 ( v , u ); root [ u ] = merge ( root [ u ], root [ v ], 1 , cntz ); } ans [ u ] = t [ root [ u ]]. mx == 0 ? 0 : t [ root [ u ]]. id ; return ; } int main () { cin >> n >> m , lg = ( int )( log ( n ) / log ( 2 )) + 1 ; memset ( head , -1 , sizeof head ); for ( int i = 1 ; i < n ; ++ i ) { int u , v ; cin >> u >> v ; add ( u , v ), add ( v , u ); } dfs1 ( 1 , 0 ); for ( int i = 1 ; i <= m ; ++ i ) { cin >> u [ i ] >> v [ i ] >> z [ i ]; idz [ i ] = z [ i ]; } sort ( idz + 1 , idz + 1 + m ); cntz = unique ( idz + 1 , idz + 1 + m ) - idz - 1 ; for ( int i = 1 ; i <= m ; ++ i ) { int nz = lower_bound ( idz + 1 , idz + 1 + cntz , z [ i ]) - idz ; int lca = Lca ( u [ i ], v [ i ]); int fat = f [ lca ][ 0 ]; change ( root [ u [ i ]], 1 , cntz , nz , 1 ); change ( root [ v [ i ]], 1 , cntz , nz , 1 ); change ( root [ lca ], 1 , cntz , nz , -1 ); change ( root [ fat ], 1 , cntz , nz , -1 ); } dfs2 ( 1 , 0 ); for ( int i = 1 ; i <= n ; ++ i ) cout << idz [ ans [ i ]] << endl ; return 0 ; } 1 Tag : \u7ebf\u6bb5\u6811\u5408\u5e76 / LCA / \u6811\u4e0a\u5dee\u5206","title":"BZOJ3307"},{"location":"sol/pro/bzoj3307/#bzoj3307","text":"","title":"Bzoj3307 \u96e8\u5929\u7684\u5c3e\u5df4"},{"location":"sol/pro/bzoj3307/#textquestion","text":"\u7ed9\u5b9a\u4e00\u68f5\u6811\uff0c\u6bcf\u6b21\u7ed9 \\((x,y)\\) \u7684\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u53d1\u653e\u4e00\u4e2a\u7b2c \\(z\\) \u79cd\u7269\u54c1\u3002 \\(M\\) \u6b21\u64cd\u4f5c\uff0c\u6700\u540e\u8be2\u95ee\u6bcf\u4e2a\u70b9\u6700\u591a\u7684\u662f\u54ea\u4e00\u79cd\u7269\u54c1\u3002 \\(1\\le N,M \\le 10^5,1\\le z\\le 10^9\\)","title":"\\(\\text{Question}\\)"},{"location":"sol/pro/bzoj3307/#textbrute-force","text":"\u5148\u79bb\u6563\u5316 \\(z\\) \u3002 \u8003\u8651\u8bbe\u4e00\u4e2a\u8ba1\u6570\u6570\u7ec4 \\(d\\) \uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9 \\(x\\) \uff0c\u5206\u522b\u7ef4\u62a4\u7b2c \\(z\\) \u79cd\u7269\u54c1\u5728 \\(x\\) \u4e0a\u6709\u591a\u5c11\u4e2a\u3002 \u5148\u6c42\u51fa \\(\\text{LCA}\\) \uff0c\u6bcf\u6b21\u64cd\u4f5c\u4ece \\(x \\to \\text{LCA} \\to y\\) \uff0c\u7136\u540e\u628a\u8def\u5f84\u4e0a\u76f8\u5e94\u7684\u8282\u70b9\u7684 \\(d[x][z]\\) \u52a0\u4e00\u3002 \u590d\u6742\u5ea6 \\(\\text{O}(NM)\\) \u3002 \u6216\u8005\u53ef\u4ee5\u5229\u7528\u6811\u4e0a\u5dee\u5206\u5bf9\u6bcf\u79cd\u7269\u54c1\u7684\u60c5\u51b5\u5206\u522b\u8fdb\u884c\u4fee\u6539\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u8bbe \\(c\\) \u4e3a \\(d\\) \u7684\u5dee\u5206\u6570\u7ec4\uff0c\u6bcf\u6b21\u64cd\u4f5c \\((x,y,z)\\) \uff0c\u4f7f \uff1a \\[c[x][z]+1,c[y][z]+1,c[\\text{LCA(x,y)}][z]-1,c[\\text{Father}(\\text{LCA(x,y)})][z]-1\\] \u6700\u540e\u8fdb\u884c \\(cnt_z\\) \u6b21 dfs\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9 \\(u\\) \uff0c \\(d\\) \u5c31\u7b49\u4e8e \\(c\\) \u7684\u5b50\u6811\u548c \u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u6c42\u7269\u54c1\u51fa\u73b0\u6b21\u6570\u7684\u6700\u503c\u5373\u53ef\u3002 \u590d\u6742\u5ea6 \\(\\text{O}(N\\times cnt_z)\\) \uff0c \\(cnt_z\\) \u662f\u4e0d\u540c\u7684\u7269\u54c1\u7684\u6570\u91cf\u3002 \u8fd9\u4e2a\u505a\u6cd5\u662f\u5bf9\u6bcf\u79cd\u7269\u54c1\u90fd\u7ef4\u62a4\u4e86\u4e00\u4e2a\u5dee\u5206\u5e8f\u5217\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u5dee\u5206\u5e8f\u5217\u662f\u5728\u6811\u4e0a\u7684\u3002","title":"\\(\\text{Brute force}\\)"},{"location":"sol/pro/bzoj3307/#textsolution","text":"\u5b9e\u9645\u4e0a \\(\\text{O}(N\\times cnt_z)\\) \u505a\u6cd5\u662f\u5bf9\u6bcf\u4e2a\u8282\u70b9 \\(u\\) \u7ef4\u62a4\u4e86\u4e00\u4e2a\u5e8f\u5217 \\(c[u]\\) \uff0c \\(c[u][z]\\) \u5c31\u8868\u793a \\(z\\) \u8fd9\u79cd\u7269\u54c1\u7684\u5dee\u5206\u5e8f\u5217\u5728 \\(u\\) \u8fd9\u91cc\u7684\u8fd9\u4e00\u9879\u3002 \u90a3\u4e48\u4e00\u4e2a\u8282\u70b9 \\(u\\) \u7684\u7b54\u6848\u5c31\u662f\u5b83\u5b50\u6811\u5f53\u4e2d\u6240\u6709\u8282\u70b9\u7684 \\(c[v]\\) \u7684\u5408\u5e76\u8d77\u6765\u4e4b\u540e\u5f97\u5230\u7684\u65b0\u5e8f\u5217\u7684 \\(\\text{max\\_element}\\) \u3002 \u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8282\u70b9 \\(u\\) \u5f00\u4e00\u9897\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u4ee3\u66ff \\(c[u]\\) \uff0c\u540c\u65f6\u652f\u6301\u7ef4\u62a4 \\(c[u]\\) \u5f53\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5927\u503c\u7684\u4f4d\u7f6e\u3002 \u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2a\u8282\u70b9\u7684\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u503c\u57df\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f \\([1,cnt_z]\\) \u3002 \u8fdb\u884c\u4e00\u6b21 dfs\uff0c\u90a3\u4e48\u8ba1\u7b97 \\(u\\) \u7684\u7b54\u6848\u7684\u65f6\u5019\uff0c\u5c31\u53ea\u9700\u8981\u628a \\(u\\) \u7684\u6240\u6709\u513f\u5b50\u8282\u70b9\u7684\u7ebf\u6bb5\u6811\u548c \\(u\\) \u7684\u7ebf\u6bb5\u6811\u8fdb\u884c\u7ebf\u6bb5\u6811\u5408\u5e76\u5373\u53ef\u5feb\u901f\u5f97\u5230 \\(u\\) \u7684\u7b54\u6848\u3002 \u590d\u6742\u5ea6 \\(\\text{O}((N+M)\\log(N+M))\\) \\(\\text{Trick:}\\) \u5bf9\u4e8e\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a\u4fe1\u606f\u5e8f\u5217\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8282\u70b9\u7684\u7b54\u6848\u53ef\u4ee5\u901a\u8fc7\u7c7b\u4f3c\u5b50\u6811\u548c\u7684\u65b9\u5f0f\u5f97\u5230\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u4e00\u9897\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u4ee3\u66ff\u6bcf\u4e2a\u8282\u70b9\u7684\u4fe1\u606f\u5e8f\u5217\uff0c\u7136\u540e\u4f7f\u7528\u7ebf\u6bb5\u6811\u5408\u5e76\u8ba1\u7b97\u7b54\u6848\u3002","title":"\\(\\text{Solution}\\)"},{"location":"sol/pro/bzoj3307/#textcode","text":"\u96e8\u5929\u7684\u5c3e\u5df4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 #include <cmath> #include <cstring> #include <iostream> #include <algorithm> using namespace std ; const int si = 1e5 + 10 ; int n , m ; int tot = 0 , head [ si ]; struct Edge { int ver , Next ; } e [ si << 1 ]; inline void add ( int u , int v ) { e [ tot ] = ( Edge ){ v , head [ u ]}, head [ u ] = tot ++ ; } int dep [ si ], f [ si ][ 20 ]; int lg ; inline void dfs1 ( int u , int fa ) { dep [ u ] = dep [ fa ] + 1 , f [ u ][ 0 ] = fa ; for ( int i = 1 ; i <= lg ; ++ i ) f [ u ][ i ] = f [ f [ u ][ i -1 ] ][ i -1 ]; for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs1 ( v , u ); } } inline int Lca ( int u , int v ) { if ( dep [ u ] < dep [ v ]) swap ( u , v ); for ( int i = lg ; i >= 0 ; -- i ) if ( dep [ f [ u ][ i ]] >= dep [ v ]) u = f [ u ][ i ]; if ( u == v ) return u ; for ( int i = lg ; i >= 0 ; -- i ) if ( f [ u ][ i ] != f [ v ][ i ]) u = f [ u ][ i ], v = f [ v ][ i ]; return f [ u ][ 0 ]; } int root [ si ], cnt = 0 ; struct segment_tree { int ls , rs ; int mx , id ; } t [ si * 80 ]; inline void pushup ( int p ) { int lc = t [ p ]. ls , rc = t [ p ]. rs ; if ( t [ lc ]. mx >= t [ rc ]. mx ) t [ p ]. mx = t [ lc ]. mx , t [ p ]. id = t [ lc ]. id ; else t [ p ]. mx = t [ rc ]. mx , t [ p ]. id = t [ rc ]. id ; } inline void change ( int & p , int l , int r , int pos , int val ) { if ( ! p ) p = ++ cnt ; if ( l == r ){ t [ p ]. mx += val ; t [ p ]. id = l ; return ; } int mid = l + r >> 1 ; if ( pos <= mid ) change ( t [ p ]. ls , l , mid , pos , val ); else change ( t [ p ]. rs , mid + 1 , r , pos , val ); pushup ( p ); } int merge ( int p , int q , int l , int r ) { if ( ! p ) return q ; if ( ! q ) return p ; if ( l == r ){ t [ p ]. mx += t [ q ]. mx ; return p ; } int mid = l + r >> 1 ; t [ p ]. ls = merge ( t [ p ]. ls , t [ q ]. ls , l , mid ); t [ p ]. rs = merge ( t [ p ]. rs , t [ q ]. rs , mid + 1 , r ); pushup ( p ); return p ; } int cntz = 0 ; int ans [ si ]; int u [ si ], v [ si ], z [ si ], idz [ si ]; void dfs2 ( int u , int fa ) { for ( int i = head [ u ]; ~ i ; i = e [ i ]. Next ) { int v = e [ i ]. ver ; if ( v == fa ) continue ; dfs2 ( v , u ); root [ u ] = merge ( root [ u ], root [ v ], 1 , cntz ); } ans [ u ] = t [ root [ u ]]. mx == 0 ? 0 : t [ root [ u ]]. id ; return ; } int main () { cin >> n >> m , lg = ( int )( log ( n ) / log ( 2 )) + 1 ; memset ( head , -1 , sizeof head ); for ( int i = 1 ; i < n ; ++ i ) { int u , v ; cin >> u >> v ; add ( u , v ), add ( v , u ); } dfs1 ( 1 , 0 ); for ( int i = 1 ; i <= m ; ++ i ) { cin >> u [ i ] >> v [ i ] >> z [ i ]; idz [ i ] = z [ i ]; } sort ( idz + 1 , idz + 1 + m ); cntz = unique ( idz + 1 , idz + 1 + m ) - idz - 1 ; for ( int i = 1 ; i <= m ; ++ i ) { int nz = lower_bound ( idz + 1 , idz + 1 + cntz , z [ i ]) - idz ; int lca = Lca ( u [ i ], v [ i ]); int fat = f [ lca ][ 0 ]; change ( root [ u [ i ]], 1 , cntz , nz , 1 ); change ( root [ v [ i ]], 1 , cntz , nz , 1 ); change ( root [ lca ], 1 , cntz , nz , -1 ); change ( root [ fat ], 1 , cntz , nz , -1 ); } dfs2 ( 1 , 0 ); for ( int i = 1 ; i <= n ; ++ i ) cout << idz [ ans [ i ]] << endl ; return 0 ; } 1 Tag : \u7ebf\u6bb5\u6811\u5408\u5e76 / LCA / \u6811\u4e0a\u5dee\u5206","title":"\\(\\text{Code}\\)"},{"location":"sol/pro/cf1637f/","text":"CF1637F Towers \u03c8(\uff40\u2207\u00b4)\u03c8 \u6bd4\u8f83\u6709\u610f\u601d\u7684\u4e00\u4e2a\u70b9\u662f\uff0c\u6211\u6628\u5929\u7ed9\u521d\u4e00\u7684\u795e\u4ed9\u8bb2\u4e86\u4e24\u9053\u6362\u6839\uff08CF708C\uff0cuoj105\uff09\uff0c\u987a\u4fbf\u603b\u7ed3\u4e86\u4e2a\u5957\u8def\u3002 \u7136\u540e\u4eca\u5929\u65e9\u4e0a\u6253 VP \u5c31\u9047\u5230\u4e86 =_= \\(\\text{Descrption}\\) \u03c8(\uff40\u2207\u00b4)\u03c8 You are given a tree which has \\(n\\) vertices with a height \\(h\\) on it. You could put any numbers of tower on vertices, and you could choose the value of the tower \\(e\\) . If vertex \\(x\\) is on the path of \\((u,v)\\) ,and \\(e_u,e_v\\) satisfy \\(\\min(e_u,e_v) \\ge h_x\\) , we call vertex \\(x\\) is good. Your goal is to let all vertex become good vertex,and minumim your cost. If you put a tower and its \\(e=value\\) , then your total cost will be added \\(value\\) . \\(\\text{Solution}\\) \u03c8(\uff40\u2207\u00b4)\u03c8 \u9996\u5148\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u7ed3\u8bba\uff0c\u5982\u679c\u5047\u5b9a\u4e86\u6811\u7684\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u6bcf\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u90fd\u5fc5\u987b\u653e\u4e00\u4e2a tower\u3002 \u7136\u540e\u53c8\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u7ed3\u8bba\uff0c\u5728\u5047\u5b9a\u4e86\u6839\u8282\u70b9\u7684\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u8282\u70b9 \\(u\\) \u662f\u6709\u4fe1\u53f7\u7684\u7684\uff0c\u90a3\u4e48 \\(u\\) \u7684\u5b50\u6811\u5f53\u4e2d\u5fc5\u7136\u6709\u81f3\u5c11\u4e00\u4e2a tower\uff0c\u6ee1\u8db3\u8fd9\u4e2a tower \u7684 \\(e\\ge h_u\\) \u3002 \u4e0a\u9762\u7684\u7ed3\u8bba\u5168\u90e8\u57fa\u4e8e \u201c\u6839\u8282\u70b9\u5047\u5b9a\u201d \u7684\u60c5\u51b5\u3002 \u4f46\u662f\u672c\u9898\u7ed9\u51fa\u7684\u660e\u663e\u662f\u4e00\u9897\u65e0\u6839\u6811\uff0c\u6240\u4ee5\u6211\u4eec\u5f88\u81ea\u7136\u7684\u60f3\u5230\u4e86\u6362\u6839DP\u3002 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8bbe \\(f_u\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u8282\u70b9\u7684\u65f6\u5019\uff0c\u4f7f\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u53d8\u6210\u6709\u4fe1\u53f7\u7684\u8282\u70b9\u7684\u6700\u5c0f\u82b1\u8d39\u3002 \u7136\u540e\u53d1\u73b0\u8fd9\u4e2a\u6362\u6839\u4e0d\u662f\u5f88\u597d\u5199\u3002 \u53c8\u53d1\u73b0\uff0c\u5982\u679c\u8ba9 \\(h\\) \u6700\u5927\u7684\u90a3\u4e00\u4e2a\uff08\u6216\u8005\u5176\u4e2d\u7684\u4e00\u4e2a\uff09\u4f5c\u4e3a\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u5f80\u4e0b\u53d6\u503c\u4e00\u5b9a\u662f\u6700\u4f18\u7684\u3002 \u56e0\u4e3a\u4f60\u73b0\u5728\u8981\u505a\u7684\u5c31\u662f\u8ba9\u6bcf\u4e2a\u5b50\u6811\u5f53\u4e2d\u90fd\u6709\u4e00\u4e2a \\(e\\) \u5927\u4e8e\u7b49\u4e8e\u8fd9\u4e2a\u5b50\u6811\u7684\u6839\u7684 \\(h\\) \u7684 tower\u3002 \u7136\u540e\u5bf9\u4e8e\u6839\u8282\u70b9\uff0c\u53ea\u9700\u8981\u8ba9\u5b83\u7684\u4e24\u4e2a\u4e92\u4e0d\u76f8\u540c\u7684\u5b50\u6811\u5f53\u4e2d\u6709\u4e24\u4e2a tower \u7684 \\(e=h_{root}\\) \u5373\u53ef\u3002 \u5982\u679c\u8bf4\u8fd9\u4e2a \\(h\\) \u6700\u5927\u7684\u70b9\u4e0d\u662f \\(root\\) \uff0c\u90a3\u4e48\u5b83\u5c31\u4f1a\u5728\u67d0\u4e2a\u5b50\u6811\u91cc\u9762\uff0c\u5c31\u4f1a\u5bfc\u81f4\u5b50\u6811\u91cc\u9700\u8981\u591a\u653e\u51e0\u4e2a \\(e=h_{max}\\) \u7684 tower\uff0c\u660e\u663e\u4e0d\u662f\u6700\u4f18\u7684\u3002 \u6240\u4ee5\u6211\u4eec\u5c31\u76f4\u63a5\u4ee4\u8fd9\u4e2a \\(h\\) \u6700\u5927\u7684\u70b9\u4e3a \\(root\\) \uff0c\u7136\u540e\u9012\u5f52\u4e0b\u53bb\u5904\u7406\u5c31\u884c\u4e86\u3002 \\(\\text{Code}\\) \u03c8(\uff40\u2207\u00b4)\u03c8 \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int inf = 1e18 + 1 , si = 2e5 + 10 ; int n , height [ si ], res ; struct Edge { int head , ver , Next ; } e [ si << 1 ]; int tot = 0 , root = 0 , rt [ si ]; inline void add ( int u , int v ){ e [ ++ tot ]. ver = v , e [ tot ]. Next = e [ u ]. head , e [ u ]. head = tot ; } inline pair < int , int > dfs ( int u , int fa ){ int max1 , max2 ; max1 = max2 = 0 ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( v == fa ) continue ; int now = dfs ( v , u ). first ; if ( now > max1 ) max2 = max ( max2 , max1 ), max1 = now ; else max2 = max ( max2 , now ); } if ( fa != 0 ) res += max ( height [ u ] - max1 , 0l l ), max1 += max ( height [ u ] - max1 , 0l l ); else res += max ( height [ u ] - max1 , 0l l ) + max ( height [ u ] - max2 , 0l l ); return make_pair ( max1 , max2 ); } signed main (){ scanf ( \"%lld\" , & n ); for ( register int i = 1 ; i <= n ; ++ i ) scanf ( \"%lld\" , & height [ i ]); for ( register int i = 1 , u , v ; i < n ; ++ i ) scanf ( \"%lld%lld\" , & u , & v ), add ( u , v ), add ( v , u ); for ( register int i = 1 ; i <= n ; ++ i ) root = height [ i ] > height [ root ] ? i : root ; dfs ( root , 0 ); return printf ( \"%lld \\n \" , res ), 0 ; // } 1 Tag : \u6811 / \u6811\u5f62DP / \u6362\u6839DP","title":"CF1637F"},{"location":"sol/pro/cf1637f/#cf1637f-towers","text":"\u6bd4\u8f83\u6709\u610f\u601d\u7684\u4e00\u4e2a\u70b9\u662f\uff0c\u6211\u6628\u5929\u7ed9\u521d\u4e00\u7684\u795e\u4ed9\u8bb2\u4e86\u4e24\u9053\u6362\u6839\uff08CF708C\uff0cuoj105\uff09\uff0c\u987a\u4fbf\u603b\u7ed3\u4e86\u4e2a\u5957\u8def\u3002 \u7136\u540e\u4eca\u5929\u65e9\u4e0a\u6253 VP \u5c31\u9047\u5230\u4e86 =_=","title":"CF1637F Towers"},{"location":"sol/pro/cf1637f/#textdescrption","text":"You are given a tree which has \\(n\\) vertices with a height \\(h\\) on it. You could put any numbers of tower on vertices, and you could choose the value of the tower \\(e\\) . If vertex \\(x\\) is on the path of \\((u,v)\\) ,and \\(e_u,e_v\\) satisfy \\(\\min(e_u,e_v) \\ge h_x\\) , we call vertex \\(x\\) is good. Your goal is to let all vertex become good vertex,and minumim your cost. If you put a tower and its \\(e=value\\) , then your total cost will be added \\(value\\) .","title":"\\(\\text{Descrption}\\)"},{"location":"sol/pro/cf1637f/#textsolution","text":"\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u7ed3\u8bba\uff0c\u5982\u679c\u5047\u5b9a\u4e86\u6811\u7684\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u6bcf\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u90fd\u5fc5\u987b\u653e\u4e00\u4e2a tower\u3002 \u7136\u540e\u53c8\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e2a\u7ed3\u8bba\uff0c\u5728\u5047\u5b9a\u4e86\u6839\u8282\u70b9\u7684\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u8282\u70b9 \\(u\\) \u662f\u6709\u4fe1\u53f7\u7684\u7684\uff0c\u90a3\u4e48 \\(u\\) \u7684\u5b50\u6811\u5f53\u4e2d\u5fc5\u7136\u6709\u81f3\u5c11\u4e00\u4e2a tower\uff0c\u6ee1\u8db3\u8fd9\u4e2a tower \u7684 \\(e\\ge h_u\\) \u3002 \u4e0a\u9762\u7684\u7ed3\u8bba\u5168\u90e8\u57fa\u4e8e \u201c\u6839\u8282\u70b9\u5047\u5b9a\u201d \u7684\u60c5\u51b5\u3002 \u4f46\u662f\u672c\u9898\u7ed9\u51fa\u7684\u660e\u663e\u662f\u4e00\u9897\u65e0\u6839\u6811\uff0c\u6240\u4ee5\u6211\u4eec\u5f88\u81ea\u7136\u7684\u60f3\u5230\u4e86\u6362\u6839DP\u3002 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8bbe \\(f_u\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u8282\u70b9\u7684\u65f6\u5019\uff0c\u4f7f\u6bcf\u4e00\u4e2a\u8282\u70b9\u90fd\u53d8\u6210\u6709\u4fe1\u53f7\u7684\u8282\u70b9\u7684\u6700\u5c0f\u82b1\u8d39\u3002 \u7136\u540e\u53d1\u73b0\u8fd9\u4e2a\u6362\u6839\u4e0d\u662f\u5f88\u597d\u5199\u3002 \u53c8\u53d1\u73b0\uff0c\u5982\u679c\u8ba9 \\(h\\) \u6700\u5927\u7684\u90a3\u4e00\u4e2a\uff08\u6216\u8005\u5176\u4e2d\u7684\u4e00\u4e2a\uff09\u4f5c\u4e3a\u6839\u8282\u70b9\uff0c\u90a3\u4e48\u5f80\u4e0b\u53d6\u503c\u4e00\u5b9a\u662f\u6700\u4f18\u7684\u3002 \u56e0\u4e3a\u4f60\u73b0\u5728\u8981\u505a\u7684\u5c31\u662f\u8ba9\u6bcf\u4e2a\u5b50\u6811\u5f53\u4e2d\u90fd\u6709\u4e00\u4e2a \\(e\\) \u5927\u4e8e\u7b49\u4e8e\u8fd9\u4e2a\u5b50\u6811\u7684\u6839\u7684 \\(h\\) \u7684 tower\u3002 \u7136\u540e\u5bf9\u4e8e\u6839\u8282\u70b9\uff0c\u53ea\u9700\u8981\u8ba9\u5b83\u7684\u4e24\u4e2a\u4e92\u4e0d\u76f8\u540c\u7684\u5b50\u6811\u5f53\u4e2d\u6709\u4e24\u4e2a tower \u7684 \\(e=h_{root}\\) \u5373\u53ef\u3002 \u5982\u679c\u8bf4\u8fd9\u4e2a \\(h\\) \u6700\u5927\u7684\u70b9\u4e0d\u662f \\(root\\) \uff0c\u90a3\u4e48\u5b83\u5c31\u4f1a\u5728\u67d0\u4e2a\u5b50\u6811\u91cc\u9762\uff0c\u5c31\u4f1a\u5bfc\u81f4\u5b50\u6811\u91cc\u9700\u8981\u591a\u653e\u51e0\u4e2a \\(e=h_{max}\\) \u7684 tower\uff0c\u660e\u663e\u4e0d\u662f\u6700\u4f18\u7684\u3002 \u6240\u4ee5\u6211\u4eec\u5c31\u76f4\u63a5\u4ee4\u8fd9\u4e2a \\(h\\) \u6700\u5927\u7684\u70b9\u4e3a \\(root\\) \uff0c\u7136\u540e\u9012\u5f52\u4e0b\u53bb\u5904\u7406\u5c31\u884c\u4e86\u3002","title":"\\(\\text{Solution}\\)"},{"location":"sol/pro/cf1637f/#textcode","text":"\u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <bits/stdc++.h> using namespace std ; #define int long long constexpr int inf = 1e18 + 1 , si = 2e5 + 10 ; int n , height [ si ], res ; struct Edge { int head , ver , Next ; } e [ si << 1 ]; int tot = 0 , root = 0 , rt [ si ]; inline void add ( int u , int v ){ e [ ++ tot ]. ver = v , e [ tot ]. Next = e [ u ]. head , e [ u ]. head = tot ; } inline pair < int , int > dfs ( int u , int fa ){ int max1 , max2 ; max1 = max2 = 0 ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver ; if ( v == fa ) continue ; int now = dfs ( v , u ). first ; if ( now > max1 ) max2 = max ( max2 , max1 ), max1 = now ; else max2 = max ( max2 , now ); } if ( fa != 0 ) res += max ( height [ u ] - max1 , 0l l ), max1 += max ( height [ u ] - max1 , 0l l ); else res += max ( height [ u ] - max1 , 0l l ) + max ( height [ u ] - max2 , 0l l ); return make_pair ( max1 , max2 ); } signed main (){ scanf ( \"%lld\" , & n ); for ( register int i = 1 ; i <= n ; ++ i ) scanf ( \"%lld\" , & height [ i ]); for ( register int i = 1 , u , v ; i < n ; ++ i ) scanf ( \"%lld%lld\" , & u , & v ), add ( u , v ), add ( v , u ); for ( register int i = 1 ; i <= n ; ++ i ) root = height [ i ] > height [ root ] ? i : root ; dfs ( root , 0 ); return printf ( \"%lld \\n \" , res ), 0 ; // } 1 Tag : \u6811 / \u6811\u5f62DP / \u6362\u6839DP","title":"\\(\\text{Code}\\)"},{"location":"sol/pro/cf1651e/","text":"CF1651E Sum of Matchings \u03c8(\uff40\u2207\u00b4)\u03c8 \\(\\text{Description}\\) \u03c8(\uff40\u2207\u00b4)\u03c8 \u5b9a\u4e49\u4e00\u5f20\u56fe \\(G\\) \u7684\u6700\u5927\u5339\u914d\u5f53\u4e2d\u7684\u8fb9\u6570\u662f \\(MM(G)\\) \u3002 \u7ed9\u4f60\u4e00\u5f20\u4e8c\u5206\u56fe\uff0c\u5de6\u90e8\u8282\u70b9\u7f16\u53f7 \\(1 \\sim n\\) \uff0c\u53f3\u90e8\u8282\u70b9\u7f16\u53f7 \\(n+1 \\sim 2n\\) \uff0c\u4fdd\u8bc1\u6bcf\u4e2a\u8282\u70b9\u7684 \u5ea6\u6570\u5fc5\u7136\u4e3a \\(2\\) \u3002 \u8bbe \\(G(l,r,L,R)\\) \u8868\u793a\u5de6\u90e8\u8282\u70b9\u7f16\u53f7\u5728 \\([l,r]\\) \uff0c\u53f3\u90e8\u8282\u70b9\u7f16\u53f7\u5728 \\([L,R]\\) \u4e4b\u95f4\u7684\u8282\u70b9\u548c\u4ed6\u4eec\u76f8\u5173\u7684\u8fb9\u7ec4\u6210\u7684\u5bfc\u51fa\u5b50\u56fe\u3002 \u6c42 \\(\\sum MM(G(l,r,L,R))\\) \uff0c\u4fdd\u8bc1 \\(2\\le n\\le 1500\\) \u3002 \\(\\text{Solution}\\) \u03c8(\uff40\u2207\u00b4)\u03c8 \u8003\u8651\u6574\u5f20\u56fe\u7684\u5f62\u6001\uff0c\u56e0\u4e3a\u662f\u4e8c\u5206\u56fe\uff08\u4e0d\u542b\u5947\u73af\uff09\uff0c\u4e14\u6bcf\u4e2a\u8282\u70b9\u7684\u5ea6\u6570\u5fc5\u7136\u662f \\(2\\) \u3002 \u90a3\u4e48\u8fd9\u5f20\u56fe\u5fc5\u7136\u5168\u90e8\u7531\u4e00\u4e9b\u7b80\u5355\u73af\u7ec4\u6210\uff0c\u4e14\u8fd9\u4e9b\u7b80\u5355\u73af\u90fd\u662f\u5076\u73af\u3002 \u8003\u8651\u4e00\u4e2a\u5076\u73af \\(R\\) \u5982\u679c\u88ab\u5305\u542b\u5728\u4e00\u4e2a\u5bfc\u51fa\u5b50\u56fe \\(G\\prime\\) \u5f53\u4e2d\uff0c\u4ed6\u80fd\u5bf9 \\(MM(G\\prime)\\) \u505a\u7684\u8d21\u732e\u662f\u4ec0\u4e48\u3002 \u663e\u7136\u662f \\(\\lceil\\dfrac{edge}{2}\\rceil\\) \uff0c \\(edge\\) \u662f\u8fd9\u4e2a\u5076\u73af \\(R\\) \u5305\u542b\u7684\u8fb9\u6570\uff0c\u8fd9\u4e2a\u7528\u7c7b\u4f3c\u5308\u7259\u5229\u7b97\u6cd5\u7684\u601d\u60f3\u5373\u53ef\u5f97\u5230\u3002 \u90a3\u4e48\u8fd9\u4e2a\u5076\u73af \\(R\\) \u5fc5\u7136\u4f1a\u88ab\u4e00\u5806\u5b50\u56fe\u6240\u5305\u542b\uff0c\u8bbe\u8fd9\u6837\u7684\u5b50\u56fe\u6570\u91cf\u662f \\(cnt\\) \uff0c\u90a3\u4e48\u4ed6\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u5c31\u662f \\(\\lceil\\dfrac{edge}{2}\\rceil\\times cnt\\) \u3002 \\(cnt\\) \u4e5f\u6bd4\u8f83\u597d\u7b97\uff0c\u8bb0\u5f55\u5076\u73af\u4e0a\u5c5e\u4e8e\u5de6\u90e8\u548c\u53f3\u90e8\u5206\u522b\u7684\u8282\u70b9\u7f16\u53f7\u6700\u5927\u6700\u5c0f\u503c \\(Lmax,Lmin,Rmax,Rmin\\) \uff08\u53f3\u90e8\u7684\u7b97\u5b8c\u4e4b\u540e\u8981\u51cf\u53bb \\(n\\) \uff09\u3002 \u90a3 \\(cnt\\) \u5c31\u5e94\u8be5\u662f\uff1a \\(Lmin\\times(n-Lmax+1)\\times Rmin\\times(n-Rmax+1)\\) \u3002 \u5c31\u662f\u4e58\u6cd5\u539f\u7406\u3002 \u4f46\u662f\u8fd8\u8981\u8003\u8651\u53e6\u5916\u7684\u4e00\u79cd\u60c5\u51b5\uff0c\u5982\u679c\u88ab\u8fd9\u4e2a\u5b50\u56fe\u5305\u542b\u7684\u4e0d\u662f\u8fd9\u4e2a\u5076\u73af\uff0c\u800c\u662f\u8fd9\u4e2a\u5076\u73af\u4e0a\u7684\u4e00\u6761\u94fe \\((u,v)\\) \u3002 \u90a3\u4e48\u8fd9\u6761\u94fe \\((u,v)\\) \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5305\u542b\u5b83\u7684\u5b50\u56fe\u7684 \\(MM\\) \u7684\u8d21\u732e\u5fc5\u7136\u4ecd\u65e7\u662f \\(\\lceil\\dfrac{edge}{2}\\rceil\\) \uff0c \\(edge\\) \u662f\u8fd9\u6761\u94fe \\((u,v)\\) \u5305\u542b\u7684\u8fb9\u6570\u3002 \u8fd8\u662f\u9700\u8981\u8ba1\u7b97\u4ed6\u88ab\u591a\u5c11\u4e2a\u5b50\u56fe\u5305\u542b\uff0c\u5e76\u8bb0\u5f55\u94fe\u4e0a\u5de6\u90e8\u548c\u53f3\u90e8\u5206\u522b\u7684\u8282\u70b9\u7f16\u53f7\u6700\u5927\u6700\u5c0f\u503c \\(Lmax,Lmin,Rmax,Rmin\\) \uff08\u53f3\u90e8\u7684\u7b97\u5b8c\u4e4b\u540e\u8fd8\u662f\u8981\u51cf\u53bb \\(n\\) \uff09\u3002 \u4f46\u662f\u8fd9\u4e2a\u65f6\u5019\u94fe\u4e0a\u7684\u8282\u70b9\u7f16\u53f7\u5c31\u4e0d\u4e00\u5b9a\u662f\u8fde\u7eed\u7684\u4e86\uff0c\u9700\u8981\u53bb\u6389\u5076\u73af\u5f53\u4e2d\u4e0d\u5728\u8fd9\u4e2a\u94fe\u4e0a\u7684\u8282\u70b9\u3002 \u90a3\u4e48\u5bf9\u4e8e\u5076\u73af \\(R\\) \u53bb\u6389\u8fd9\u4e2a\u94fe \\((u,v)\\) \u4e4b\u540e\u7684\u5230\u7684\u94fe \\(R-(u,v)\\) \u518d\u8bb0\u5f55\u5b83\u7684 \\(Lmax,Lmin,Rmax,Rmin\\) \u5c31\u53ef\u4ee5\u4e86\u3002 \\(\\text{Code}\\) \u03c8(\uff40\u2207\u00b4)\u03c8 \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 #include <bits/stdc++.h> using namespace std ; using i64 = long long ; constexpr int si = 3e3 + 10 , inf = 0x3f3f3f3f ; int n , vis [ si ]; i64 a [ si ], cur , ans = 0 ; std :: vector < int > G [ si ]; inline int d ( int x ){ return x << 1 ; } inline void dfs ( int u ){ a [ cur ++ ] = u , vis [ u ] = 1 ; for ( auto v : G [ u ]) if ( ! vis [ v ]) dfs ( v ); } inline void add ( int u , int v ){ G [ u ]. push_back ( v ); G [ v ]. push_back ( u ); } int main (){ cin >> n ; for ( register int i = 1 , u , v ; i <= d ( n ); ++ i ) cin >> u >> v , add ( u , v ); for ( register int i = 1 ; i <= d ( n ); ++ i ){ if ( ! G [ i ]. size () || vis [ i ]) continue ; cur = 0 , dfs ( i ); i64 Lmin = inf , Rmin = inf , Lmax = 0 , Rmax = 0 ; // \u5076\u73af\u7684\u60c5\u51b5 for ( register int j = 0 ; j < cur ; ++ j ){ if ( a [ j ] <= n ) Lmin = min ( Lmin , a [ j ]), Lmax = max ( Lmax , a [ j ]); else Rmin = min ( Rmin , a [ j ] - n ), Rmax = max ( Rmax , a [ j ] - n ); } i64 cnt = Lmin * ( n - Lmax + 1 ) * Rmin * ( n - Rmax + 1 ); ans += cnt * ( cur / 2 ); // \u5076\u73af\u4e0a\u7684\u94fe\u7684\u60c5\u51b5 for ( register int u = 0 ; u < cur ; ++ u ){ i64 Lmin = inf , Rmin = inf , Lmax = 0 , Rmax = 0 ; if ( a [ u ] <= n ) Lmin = min ( Lmin , a [ u ]), Lmax = max ( Lmax , a [ u ]); else Rmin = min ( Rmin , a [ u ] - n ), Rmax = max ( Rmax , a [ u ] - n ); int pos = ( u + 1 ) % cur , edge_cnt = 0 ; while ( pos != u ){ edge_cnt ++ ; if ( a [ pos ] <= n ) Lmin = min ( Lmin , a [ pos ]), Lmax = max ( Lmax , a [ pos ]); else Rmin = min ( Rmin , a [ pos ] - n ), Rmax = max ( Rmax , a [ pos ] - n ); int Prev = ( u -1 + cur ) % cur , ff = true ; i64 O_Lmin = 0 , O_Rmin = 0 , O_Lmax = n + 1 , O_Rmax = n + 1 ; if ( a [ Prev ] <= n ){ if ( a [ Prev ] < Lmin ) O_Lmin = max ( O_Lmin , a [ Prev ]); else if ( a [ Prev ] > Lmax ) O_Lmax = min ( O_Lmax , a [ Prev ]); else ff = false ; } else { if ( a [ Prev ] - n < Rmin ) O_Rmin = max ( O_Rmin , a [ Prev ] - n ); else if ( a [ Prev ] - n > Rmax ) O_Rmax = min ( O_Rmax , a [ Prev ] - n ); else ff = false ; } Prev = ( pos + 1 ) % cur ; if ( a [ Prev ] <= n ){ if ( a [ Prev ] < Lmin ) O_Lmin = max ( O_Lmin , a [ Prev ]); else if ( a [ Prev ] > Lmax ) O_Lmax = min ( O_Lmax , a [ Prev ]); else ff = false ; } else { if ( a [ Prev ] - n < Rmin ) O_Rmin = max ( O_Rmin , a [ Prev ] - n ); else if ( a [ Prev ] - n > Rmax ) O_Rmax = min ( O_Rmax , a [ Prev ] - n ); else ff = false ; } if ( ff ) ans += ( Lmin - O_Lmin ) * ( O_Lmax - Lmax ) * ( Rmin - O_Rmin ) * ( O_Rmax - Rmax ) * (( edge_cnt + 1 ) / 2 ); pos = ( pos + 1 ) % cur ; } } } cout << ans << endl ; return 0 ; } 1 Tag : \u601d\u7ef4 / \u8ba1\u6570 / \u4e8c\u5206\u56fe","title":"CF1651E"},{"location":"sol/pro/cf1651e/#cf1651e-sum-of-matchings","text":"","title":"CF1651E Sum of Matchings"},{"location":"sol/pro/cf1651e/#textdescription","text":"\u5b9a\u4e49\u4e00\u5f20\u56fe \\(G\\) \u7684\u6700\u5927\u5339\u914d\u5f53\u4e2d\u7684\u8fb9\u6570\u662f \\(MM(G)\\) \u3002 \u7ed9\u4f60\u4e00\u5f20\u4e8c\u5206\u56fe\uff0c\u5de6\u90e8\u8282\u70b9\u7f16\u53f7 \\(1 \\sim n\\) \uff0c\u53f3\u90e8\u8282\u70b9\u7f16\u53f7 \\(n+1 \\sim 2n\\) \uff0c\u4fdd\u8bc1\u6bcf\u4e2a\u8282\u70b9\u7684 \u5ea6\u6570\u5fc5\u7136\u4e3a \\(2\\) \u3002 \u8bbe \\(G(l,r,L,R)\\) \u8868\u793a\u5de6\u90e8\u8282\u70b9\u7f16\u53f7\u5728 \\([l,r]\\) \uff0c\u53f3\u90e8\u8282\u70b9\u7f16\u53f7\u5728 \\([L,R]\\) \u4e4b\u95f4\u7684\u8282\u70b9\u548c\u4ed6\u4eec\u76f8\u5173\u7684\u8fb9\u7ec4\u6210\u7684\u5bfc\u51fa\u5b50\u56fe\u3002 \u6c42 \\(\\sum MM(G(l,r,L,R))\\) \uff0c\u4fdd\u8bc1 \\(2\\le n\\le 1500\\) \u3002","title":"\\(\\text{Description}\\)"},{"location":"sol/pro/cf1651e/#textsolution","text":"\u8003\u8651\u6574\u5f20\u56fe\u7684\u5f62\u6001\uff0c\u56e0\u4e3a\u662f\u4e8c\u5206\u56fe\uff08\u4e0d\u542b\u5947\u73af\uff09\uff0c\u4e14\u6bcf\u4e2a\u8282\u70b9\u7684\u5ea6\u6570\u5fc5\u7136\u662f \\(2\\) \u3002 \u90a3\u4e48\u8fd9\u5f20\u56fe\u5fc5\u7136\u5168\u90e8\u7531\u4e00\u4e9b\u7b80\u5355\u73af\u7ec4\u6210\uff0c\u4e14\u8fd9\u4e9b\u7b80\u5355\u73af\u90fd\u662f\u5076\u73af\u3002 \u8003\u8651\u4e00\u4e2a\u5076\u73af \\(R\\) \u5982\u679c\u88ab\u5305\u542b\u5728\u4e00\u4e2a\u5bfc\u51fa\u5b50\u56fe \\(G\\prime\\) \u5f53\u4e2d\uff0c\u4ed6\u80fd\u5bf9 \\(MM(G\\prime)\\) \u505a\u7684\u8d21\u732e\u662f\u4ec0\u4e48\u3002 \u663e\u7136\u662f \\(\\lceil\\dfrac{edge}{2}\\rceil\\) \uff0c \\(edge\\) \u662f\u8fd9\u4e2a\u5076\u73af \\(R\\) \u5305\u542b\u7684\u8fb9\u6570\uff0c\u8fd9\u4e2a\u7528\u7c7b\u4f3c\u5308\u7259\u5229\u7b97\u6cd5\u7684\u601d\u60f3\u5373\u53ef\u5f97\u5230\u3002 \u90a3\u4e48\u8fd9\u4e2a\u5076\u73af \\(R\\) \u5fc5\u7136\u4f1a\u88ab\u4e00\u5806\u5b50\u56fe\u6240\u5305\u542b\uff0c\u8bbe\u8fd9\u6837\u7684\u5b50\u56fe\u6570\u91cf\u662f \\(cnt\\) \uff0c\u90a3\u4e48\u4ed6\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u5c31\u662f \\(\\lceil\\dfrac{edge}{2}\\rceil\\times cnt\\) \u3002 \\(cnt\\) \u4e5f\u6bd4\u8f83\u597d\u7b97\uff0c\u8bb0\u5f55\u5076\u73af\u4e0a\u5c5e\u4e8e\u5de6\u90e8\u548c\u53f3\u90e8\u5206\u522b\u7684\u8282\u70b9\u7f16\u53f7\u6700\u5927\u6700\u5c0f\u503c \\(Lmax,Lmin,Rmax,Rmin\\) \uff08\u53f3\u90e8\u7684\u7b97\u5b8c\u4e4b\u540e\u8981\u51cf\u53bb \\(n\\) \uff09\u3002 \u90a3 \\(cnt\\) \u5c31\u5e94\u8be5\u662f\uff1a \\(Lmin\\times(n-Lmax+1)\\times Rmin\\times(n-Rmax+1)\\) \u3002 \u5c31\u662f\u4e58\u6cd5\u539f\u7406\u3002 \u4f46\u662f\u8fd8\u8981\u8003\u8651\u53e6\u5916\u7684\u4e00\u79cd\u60c5\u51b5\uff0c\u5982\u679c\u88ab\u8fd9\u4e2a\u5b50\u56fe\u5305\u542b\u7684\u4e0d\u662f\u8fd9\u4e2a\u5076\u73af\uff0c\u800c\u662f\u8fd9\u4e2a\u5076\u73af\u4e0a\u7684\u4e00\u6761\u94fe \\((u,v)\\) \u3002 \u90a3\u4e48\u8fd9\u6761\u94fe \\((u,v)\\) \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5305\u542b\u5b83\u7684\u5b50\u56fe\u7684 \\(MM\\) \u7684\u8d21\u732e\u5fc5\u7136\u4ecd\u65e7\u662f \\(\\lceil\\dfrac{edge}{2}\\rceil\\) \uff0c \\(edge\\) \u662f\u8fd9\u6761\u94fe \\((u,v)\\) \u5305\u542b\u7684\u8fb9\u6570\u3002 \u8fd8\u662f\u9700\u8981\u8ba1\u7b97\u4ed6\u88ab\u591a\u5c11\u4e2a\u5b50\u56fe\u5305\u542b\uff0c\u5e76\u8bb0\u5f55\u94fe\u4e0a\u5de6\u90e8\u548c\u53f3\u90e8\u5206\u522b\u7684\u8282\u70b9\u7f16\u53f7\u6700\u5927\u6700\u5c0f\u503c \\(Lmax,Lmin,Rmax,Rmin\\) \uff08\u53f3\u90e8\u7684\u7b97\u5b8c\u4e4b\u540e\u8fd8\u662f\u8981\u51cf\u53bb \\(n\\) \uff09\u3002 \u4f46\u662f\u8fd9\u4e2a\u65f6\u5019\u94fe\u4e0a\u7684\u8282\u70b9\u7f16\u53f7\u5c31\u4e0d\u4e00\u5b9a\u662f\u8fde\u7eed\u7684\u4e86\uff0c\u9700\u8981\u53bb\u6389\u5076\u73af\u5f53\u4e2d\u4e0d\u5728\u8fd9\u4e2a\u94fe\u4e0a\u7684\u8282\u70b9\u3002 \u90a3\u4e48\u5bf9\u4e8e\u5076\u73af \\(R\\) \u53bb\u6389\u8fd9\u4e2a\u94fe \\((u,v)\\) \u4e4b\u540e\u7684\u5230\u7684\u94fe \\(R-(u,v)\\) \u518d\u8bb0\u5f55\u5b83\u7684 \\(Lmax,Lmin,Rmax,Rmin\\) \u5c31\u53ef\u4ee5\u4e86\u3002","title":"\\(\\text{Solution}\\)"},{"location":"sol/pro/cf1651e/#textcode","text":"\u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 #include <bits/stdc++.h> using namespace std ; using i64 = long long ; constexpr int si = 3e3 + 10 , inf = 0x3f3f3f3f ; int n , vis [ si ]; i64 a [ si ], cur , ans = 0 ; std :: vector < int > G [ si ]; inline int d ( int x ){ return x << 1 ; } inline void dfs ( int u ){ a [ cur ++ ] = u , vis [ u ] = 1 ; for ( auto v : G [ u ]) if ( ! vis [ v ]) dfs ( v ); } inline void add ( int u , int v ){ G [ u ]. push_back ( v ); G [ v ]. push_back ( u ); } int main (){ cin >> n ; for ( register int i = 1 , u , v ; i <= d ( n ); ++ i ) cin >> u >> v , add ( u , v ); for ( register int i = 1 ; i <= d ( n ); ++ i ){ if ( ! G [ i ]. size () || vis [ i ]) continue ; cur = 0 , dfs ( i ); i64 Lmin = inf , Rmin = inf , Lmax = 0 , Rmax = 0 ; // \u5076\u73af\u7684\u60c5\u51b5 for ( register int j = 0 ; j < cur ; ++ j ){ if ( a [ j ] <= n ) Lmin = min ( Lmin , a [ j ]), Lmax = max ( Lmax , a [ j ]); else Rmin = min ( Rmin , a [ j ] - n ), Rmax = max ( Rmax , a [ j ] - n ); } i64 cnt = Lmin * ( n - Lmax + 1 ) * Rmin * ( n - Rmax + 1 ); ans += cnt * ( cur / 2 ); // \u5076\u73af\u4e0a\u7684\u94fe\u7684\u60c5\u51b5 for ( register int u = 0 ; u < cur ; ++ u ){ i64 Lmin = inf , Rmin = inf , Lmax = 0 , Rmax = 0 ; if ( a [ u ] <= n ) Lmin = min ( Lmin , a [ u ]), Lmax = max ( Lmax , a [ u ]); else Rmin = min ( Rmin , a [ u ] - n ), Rmax = max ( Rmax , a [ u ] - n ); int pos = ( u + 1 ) % cur , edge_cnt = 0 ; while ( pos != u ){ edge_cnt ++ ; if ( a [ pos ] <= n ) Lmin = min ( Lmin , a [ pos ]), Lmax = max ( Lmax , a [ pos ]); else Rmin = min ( Rmin , a [ pos ] - n ), Rmax = max ( Rmax , a [ pos ] - n ); int Prev = ( u -1 + cur ) % cur , ff = true ; i64 O_Lmin = 0 , O_Rmin = 0 , O_Lmax = n + 1 , O_Rmax = n + 1 ; if ( a [ Prev ] <= n ){ if ( a [ Prev ] < Lmin ) O_Lmin = max ( O_Lmin , a [ Prev ]); else if ( a [ Prev ] > Lmax ) O_Lmax = min ( O_Lmax , a [ Prev ]); else ff = false ; } else { if ( a [ Prev ] - n < Rmin ) O_Rmin = max ( O_Rmin , a [ Prev ] - n ); else if ( a [ Prev ] - n > Rmax ) O_Rmax = min ( O_Rmax , a [ Prev ] - n ); else ff = false ; } Prev = ( pos + 1 ) % cur ; if ( a [ Prev ] <= n ){ if ( a [ Prev ] < Lmin ) O_Lmin = max ( O_Lmin , a [ Prev ]); else if ( a [ Prev ] > Lmax ) O_Lmax = min ( O_Lmax , a [ Prev ]); else ff = false ; } else { if ( a [ Prev ] - n < Rmin ) O_Rmin = max ( O_Rmin , a [ Prev ] - n ); else if ( a [ Prev ] - n > Rmax ) O_Rmax = min ( O_Rmax , a [ Prev ] - n ); else ff = false ; } if ( ff ) ans += ( Lmin - O_Lmin ) * ( O_Lmax - Lmax ) * ( Rmin - O_Rmin ) * ( O_Rmax - Rmax ) * (( edge_cnt + 1 ) / 2 ); pos = ( pos + 1 ) % cur ; } } } cout << ans << endl ; return 0 ; } 1 Tag : \u601d\u7ef4 / \u8ba1\u6570 / \u4e8c\u5206\u56fe","title":"\\(\\text{Code}\\)"},{"location":"sol/pro/cf35e/","text":"\u9898\u610f \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u51fa \\(n\\) \u4e2a\u5e95\u8fb9\u5728 \\(x\\) \u8f74\u4e0a\u7684\u77e9\u5f62\uff0c\u6c42\u5916\u9762\u7684\u8f6e\u5ed3\u7ebf\u9876\u70b9\u3002 \\(1\\le n \\le 10^5\\) \uff0c\u8f93\u5165\u4ee5 \\(h_i, l_i, r_i\\) \u7684\u65b9\u5f0f\u7ed9\u51fa\uff0c\u8868\u793a\u6709\u4e00\u4e2a\u8986\u76d6 \\(x \\in [l_i, r_i]\\) \u7684\u9ad8\u4e3a \\(h_i\\) \u7684\u77e9\u5f62\u3002 \u9898\u89e3 \u03c8(\uff40\u2207\u00b4)\u03c8 \u9996\u5148\u8003\u8651\u79bb\u6563\u5316\u7136\u540e\u76f4\u63a5\u4e00\u4e2a\u626b\u63cf\u7ebf\u626b\u8fc7\u53bb\uff08\u4ece\u5de6\u5230\u53f3\uff09\u3002 \u7136\u540e\u6ce8\u610f\u5230\u62d0\u70b9\u53ea\u4f1a\u5728\u6574\u4f53\u6700\u5927\u9ad8\u5ea6\u53d8\u5316\u7684\u65f6\u5019\u51fa\u73b0\u3002 \u6240\u4ee5\u6211\u4eec\u8003\u8651\u76f4\u63a5\u7ef4\u62a4\u4e00\u4e0b\u626b\u63cf\u7ebf\u4e0a\u7684 \\(y\\) \u7684\u6700\u5927\u503c\uff0c\u8bb0 \\(maxy\\) \u8868\u793a\u7ebf\u6bb5\u6811\u4e0a\u4e00\u4e2a\u8282\u70b9\u5185\u88ab\u8986\u76d6\u5230\u7684\u6700\u9ad8 \\(y\\) \u503c\uff0c\u8bb0 \\(cnt\\) \u8868\u793a\u7ebf\u6bb5\u6811\u4e0a\u7684\u8282\u70b9\u81ea\u8eab\u88ab\u8986\u76d6\u7684\u6b21\u6570\uff0c\u8bb0 \\(len\\) \u8868\u793a\u8fd9\u4e2a\u8282\u70b9\u7ef4\u62a4\u7684\u6bb5\u5185\u603b\u5171\u88ab\u8986\u76d6\u7684\u957f\u5ea6\uff08\u8bb0\u5f55\u8fd9\u4e2a\u662f\u4e3a\u4e86\u5224\u65ad\u662f\u5426\u80fd\u66f4\u65b0 \\(maxy\\) \uff09 \u4ee4\u7b2c \\(i\\) \u6bb5\u4e3a \\([raw(i), raw(i + 1)]\\) \uff0c\u4ee4\u7ebf\u6bb5\u6811\u4e0a\u7684 \\([l, r]\\) \u7ef4\u62a4\u7b2c \\(l \\sim r\\) \u6bb5\u3002 \u4fee\u6539\u7684\u65f6\u5019\u6ce8\u610f\uff0c\u5982\u679c\u5bf9\u4e8e\u626b\u63cf\u7ebf\u4e0a\u7684 \\([l, r]\\) \uff0c\u64cd\u4f5c\u65f6\u5e94\u5f53\u4fee\u6539\u7ebf\u6bb5\u6811\u4e0a\u7684 \\([val(l), val(r) - 1]\\) \u3002 \u56e0\u4e3a\u6211\u4eec\u7ef4\u62a4\u7684\u662f\u4e00\u4e2a\u6bb5\uff0c\u7ef4\u62a4\u70b9\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002 \u8fd9\u91cc\u7684 Pushup \u65b9\u5f0f\u548c\u4e3b\u6d41\u4e0d\u592a\u4e00\u6837\uff0c\u5728 Change \u5230\u4e00\u4e2a\u8282\u70b9\u7684\u65f6\u5019\u4ecd\u7136\u9700\u8981\u505a\u7c7b\u4f3c Pushup \u7684\u5904\u7406\uff0c\u8fd9\u6837\u53ef\u4ee5\u7701\u53bb Pushdown\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u5bf9\u4e8e Pushup\uff0c\u5982\u679c\u5f53\u524d\u8282\u70b9\u7684 \\(cnt > 0\\) \uff0c\u90a3\u4e48\u4ee4 \\(len = raw(r + 1) - raw(l)\\) \u5e76\u4ee4 \\(maxy = raw(r + 1)\\) \uff0c\u5426\u5219\u8003\u8651\u4ece\u513f\u5b50\u8282\u70b9\u66f4\u65b0 \\(len\\) \uff0c\u5982\u679c\u66f4\u65b0\u5b8c\u4e4b\u540e \\(len > 0\\) \uff0c\u518d\u4ece\u5b50\u6811\u66f4\u65b0 \\(maxy\\) \u3002 \u7136\u540e\u5728\u4fee\u6539\u7684\u65f6\u5019\u4e5f\u8981\u76f4\u63a5\u5904\u7406\u66f4\u6539\uff0c\u65b9\u5f0f\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u5728\u5904\u7406 \\(cnt = 0\\) \u7684\u60c5\u51b5\u7684\u65f6\u5019\uff0c\u9700\u8981\u5148\u5224\u662f\u5426\u4e3a\u53f6\u5b50\u8282\u70b9\uff08\u4e0d\u7136\u8981\u989d\u5916\u518d\u5f00\u7a7a\u95f4\uff09\uff0c\u7136\u540e\u518d\u4ece\u5b50\u6811\u4e0a\u4f20\u4fe1\u606f\uff0c\u8fd9\u91cc\u5c31\u7b97\u4fee\u6539\u4e86 \\(cnt\\) \uff0c\u8fd8\u662f\u9700\u8981\u8003\u8651\u7528\u513f\u5b50\u8282\u70b9\u4fe1\u606f\u66f4\u65b0 \\(maxy\\) \uff0c\u4e0d\u7136\u6ca1\u6cd5\u5904\u7406\u6709\u591a\u4e2a\u77e9\u5f62\u7684\u66f4\u6539\u5806\u5728\u4e00\u8d77\u7684\u60c5\u51b5\uff08\u6709\u53ef\u80fd\u5f53\u524d\u8282\u70b9\u76f4\u63a5\u88ab\u8986\u76d6\u7684\u6b21\u6570\u4e3a\u96f6\u4e86\uff0c\u4f46\u662f\u513f\u5b50\u8282\u70b9\u5e76\u6ca1\u6709\uff09\u3002 \u90a3\u4e48\u6bcf\u6b21\u66f4\u65b0\u5b8c\u6211\u4eec\u53ea\u9700\u8981\u8be2\u7ebf\u6bb5\u6811\u6811\u6839\u7684 \\(maxy\\) \u5373\u53ef\uff0c\u5e76\u548c\u4fee\u6539\u524d\u7684 \\(maxy^{\\prime}\\) \u6bd4\u8f83\uff0c\u5982\u679c\u53d1\u751f\u6539\u53d8\uff0c\u5c31\u76f4\u63a5\u628a \\((x, maxy), (x, maxy^{\\prime})\\) \u6254\u8fdb Vector \u5c31\u884c\u3002 \u8fd8\u6709\u4e00\u4e2a\u8981\u6ce8\u610f\u7684\u5730\u65b9\u662f\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u505a\u6cd5\u662f\u5728\u6bcf\u6b21 Query \u4e4b\u540e\u76f4\u63a5\u6bd4\u5bf9\u5e76\u66f4\u65b0\u7b54\u6848\uff0c\u6240\u4ee5\u5982\u679c\u5728\u4e00\u4e2a \\(x\\) \u4e0a\u6709\u591a\u4e2a\u66f4\u6539\u8981\u5904\u7406\uff0c\u9700\u8981\u4e00\u53e3\u6c14\u5168\u90e8\u5904\u7406\u5b8c\u518d\u66f4\u65b0\uff0c\u5426\u5219\u4f1a\u591a\u51fa\u6765\u4e00\u4e9b\u5b9e\u9645\u4e0a\u4e0d\u5b58\u5728\u7684\u9876\u70b9\u3002 \u6700\u540e\u7a7a\u95f4\u8bb0\u5f97\u5f00\u591f\uff0c\u4e0d\u7136\u4f1a RE on #22. Code - \u4fdd\u7559\u6ce8\u91ca\u7248\u672cauthor : black_trees #include <cmath> #include <cstdio> #include <vector> #include <cstring> #include <utility> #include <iostream> #include <algorithm> #define endl '\\n' // #define int long long using namespace std ; using i64 = long long ; const int si = 1e5 + 10 ; int n , m ; // m \u662f\u79bb\u6563\u5316\u4e4b\u540e\u7684\u503c\u57df\u4e0a\u754c(1~m). std :: vector < int > v ; int raw [ si * 3 ]; int val ( int x ) { return lower_bound ( v . begin (), v . end (), x ) - v . begin (); } struct Tuple { int l , r , k ; void trans () { int vl = val ( l ), vr = val ( r ), vk = val ( k ); raw [ vl ] = l , raw [ vr ] = r , raw [ vk ] = k , l = vl , r = vr , k = vk ; } bool operator < ( const Tuple & b ) const { if ( l == b . l ) return r > b . r ; // \u8fd9\u91cc\u662f\u4e00\u5f00\u59cb\u7684\u60f3\u6cd5\uff0c\u540e\u9762\u7528\u540c\u65f6\u8ba1\u7b97\u89e3\u51b3\u4e86\u3002 return l < b . l ; } } a [ si ], b [ si << 1 ]; // \u8fd9\u91cc\u662f\u540c\u65f6\u5b58\u8f93\u5165\u7684\u4fe1\u606f\u548c\u4e09\u5143\u7ec4\u4fe1\u606f\u7684 // how to maintain maxy?? class SegTree { private : struct Node { int l , r ; int cnt , len , mxy ; int Len () { return raw [ r + 1 ] - raw [ l ]; } } t [ si * 11 ]; // \u53ef\u80fd\u8981\u5f00\u5927\u4e00\u70b9\uff0c\u56e0\u4e3a\u503c\u57df\uff1f inline void pushup ( int p ) { if ( t [ p ]. cnt > 0 ) t [ p ]. len = t [ p ]. Len (), t [ p ]. mxy = raw [ t [ p ]. r + 1 ]; else { t [ p ]. len = t [ p << 1 ]. len + t [ p << 1 | 1 ]. len ; if ( t [ p ]. len > 0 ) t [ p ]. mxy = max ( t [ p << 1 ]. mxy , t [ p << 1 | 1 ]. mxy ); else t [ p ]. mxy = 0 ; } } public : void build ( int p , int l , int r ) { t [ p ]. l = l , t [ p ]. r = r , t [ p ]. mxy = t [ p ]. len = t [ p ]. cnt = 0 ; // if(abs(l) > 1e9 || abs(r) > 1e9) exit(2); // if(p > 8e5 + 80) exit(p); if ( l == r ) return ; int mid = ( l + r ) >> 1 ; build ( p << 1 , l , mid ), build ( p << 1 | 1 , mid + 1 , r ); } void change ( int p , int l , int r , int v ) { int nl = t [ p ]. l , nr = t [ p ]. r ; if ( l <= nl && nr <= r ) { t [ p ]. cnt += v ; if ( t [ p ]. cnt > 0 ) t [ p ]. len = t [ p ]. Len (), t [ p ]. mxy = raw [ t [ p ]. r + 1 ]; else { if ( nl == nr ) t [ p ]. len = 0 , t [ p ]. mxy = 0 ; else { t [ p ]. len = t [ p << 1 ]. len + t [ p << 1 | 1 ]. len ; if ( t [ p ]. len > 0 ) t [ p ]. mxy = max ( t [ p << 1 ]. mxy , t [ p << 1 | 1 ]. mxy ); else t [ p ]. mxy = 0 ; } } return ; } int mid = ( nl + nr ) >> 1 ; if ( l <= mid ) change ( p << 1 , l , r , v ); if ( r > mid ) change ( p << 1 | 1 , l , r , v ); pushup ( p ); } int Query_global () { return t [ 1 ]. mxy ; } } tr ; std :: vector < std :: pair < int , int > > ans ; signed main () { freopen ( \"input.txt\" , \"r\" , stdin ); freopen ( \"output.txt\" , \"w\" , stdout ); cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n , v . push_back ( 0 ); for ( int i = 1 ; i <= n ; ++ i ) { cin >> a [ i ]. k >> a [ i ]. l >> a [ i ]. r ; v . push_back ( a [ i ]. k ), v . push_back ( a [ i ]. l ), v . push_back ( a [ i ]. r ); } sort ( v . begin (), v . end ()); v . erase ( unique ( v . begin (), v . end ()), v . end ()); for ( int i = 1 ; i <= n ; ++ i ) a [ i ]. trans (); tr . build ( 1 , 1 , ( int ) v . size () + 1 ); for ( int i = 1 ; i <= n ; ++ i ) { b [ i ] = ( Tuple ){ a [ i ]. l , a [ i ]. k , 1 }; b [ i + n ] = ( Tuple ){ a [ i ]. r , a [ i ]. k , -1 }; } sort ( b + 1 , b + 1 + n + n ); /* // for(int i = 1; i <= n + n; ++i) // cout << i << \" -> \" << raw[b[i].l] << \" \" << raw[b[i].r] << \" \" << b[i].k << endl; // cout << \"====\" << endl; int nowy = 0; for(int i = 1; i <= n + n; ++i) { int x = raw[b[i].l], l = val(0), r = b[i].r, v = b[i].k; // cout << i << \" -> \" << l << \" \" << r << \" \" << v << endl; tr.change(1, l, r - 1, v); int nmxy = tr.Query_global(); // cout << i << \" -> \" << nowy << \" \" << nmxy << endl; if(nmxy != nowy) { ans.push_back(make_pair(x, nowy)); ans.push_back(make_pair(x, nmxy)); nowy = nmxy; } } // sweeping line */ int nowy = 0 ; for ( int i = 1 ; i <= n + n ; ) { int x = raw [ b [ i ]. l ]; int l , r , v ; while ( true ) { l = val ( 0 ), r = b [ i ]. r , v = b [ i ]. k ; tr . change ( 1 , l , r - 1 , v ); if ( raw [ b [ i + 1 ]. l ] != x ) break ; i ++ ; } int nmxy = tr . Query_global (); if ( nmxy != nowy ) { ans . push_back ( make_pair ( x , nowy )); ans . push_back ( make_pair ( x , nmxy )); nowy = nmxy ; } i ++ ; } // ans.erase(unique(ans.begin(), ans.end()), ans.end()); cout << ans . size () << endl ; for ( auto [ x , y ] : ans ) cout << x << \" \" << y << endl ; // \u7b2c i \u6bb5\u662f [raw(i), raw(i + 1)] // \u6240\u4ee5\u5982\u679c\u52a0\u5165\u4e86\u4e00\u4e2a\u5143\u7ec4 (x, l, r, +-1);\uff08\u5b58\u7684 val\uff09 // \u4fee\u6539\u662f change(l, r - 1)\u3002 // \u73b0\u5728\u7684\u95ee\u9898\u51fa\u5728\u5904\u7406\u4fe1\u606f\u7684\u5730\u65b9\uff0c\u800c\u4e14\u80af\u5b9a\u4e0d\u662f\u8d4b\u503c\u7684\u9519\u8bef\uff0c\u5e94\u8be5\u662f\u67d0\u4e2a\u987a\u5e8f\u9519\u4e86\u6216\u8005\u8986\u76d6\u4e86\u4e0d\u5e94\u8be5\u8986\u76d6\u7684\u503c\u3002 // \u597d\uff0c\u73b0\u5728\u5904\u7406\u4fe1\u606f\u6ca1\u6709\u95ee\u9898\u4e86\uff0c\u73b0\u5728\u8981\u505a\u7684\u5e94\u8be5\u662f\u8003\u8651\u600e\u4e48\u5904\u7406\u90a3\u4e2a\u91cd\u5408\u7684\u5730\u65b9\u3002 // \u80fd\u4e0d\u80fd\u8003\u8651\u628a\u540c\u4e00\u4e2a $x$ \u4f4d\u7f6e\u7684\u5143\u7ec4\u5168\u90e8\u540c\u65f6\u505a\u66f4\u6539\uff1f\u5e94\u8be5\u53ef\u4ee5\uff0c\u660e\u5929\u6765\u6539, 11\u70b9\u4e86\uff0c\u5148\u7761\u89c9\u3002 // \u786e\u5b9e\u53ef\u4ee5\uff0c\u4f46\u662f\u73b0\u5728\u95ee\u9898\u662f\u4e00\u76f4 Re22\uff0ccf \u8bf4 line 54 RE\uff0c\u6211\u6ca1\u770b\u51fa\u6765\u554a\uff0c\u6570\u7ec4\u4e5f\u5f00\u591f\u4e86\uff1f // \u7a81\u7136\u60f3\u8d77\u53ef\u80fd\u662f p RE\u4e86\uff0c\u7528 exit \u8bd5\u4e00\u8bd5\u3002 // \u6211\u8349\uff0c\u771f\u7684\u662f\uff0c\u6539\u4e86\u4e0b\u5c31\u8fc7\u4e86\u3002 // \u611f\u89c9\u8fd9\u4e2a\u662f\u975e\u5e38 Educational\u7684\uff0c\u7279\u522b\u662f\u601d\u8003\u548c\u8c03\u8bd5\u8fc7\u7a0b\u3002 return 0 ; } // done: // \u597d\u50cf\u8fd9\u4e2a maxy \u7ef4\u62a4\u4e4b\u540e\u5355\u8c03\u4e0d\u964d\u4e86\uff1f // \u6413\u4e00\u4e2a\u6570\u636e\u8bd5\u8bd5\uff0c\u679c\u7136\u5355\u8c03\u4e0d\u964d\u4e86\uff0c\u53ef\u80fd\u8981\u6539\u6539 maxy \u7684\u7ef4\u62a4\uff1f // \u662f\u4e0d\u662f\u56e0\u4e3a cnt = 0 \u6216\u8005 len = 0 \u4e4b\u540e maxy \u6ca1\u6709\u5f3a\u5236\u4f20\u9012\u4e0a\u53bb\uff1f // \u786e\u5b9e\uff0c\u6539\u4e86\u4e00\u4e0b maxy \u7684 update \u65b9\u5f0f\u5c31\u884c\u4e86\u3002 // \u5148\u8981\u79bb\u6563\u5316\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8f93\u5165\u5148\u8f6c\u5316\u6210\u4e24\u4e2a\u4e09\u5143\u7ec4\uff0c\u7136\u540e\u628a\u4e09\u5143\u7ec4\u76f4\u63a5\u5b58\u8d77\u6765 // \u8fd9\u4e2a\u65f6\u5019\u4e0d\u7740\u6025\u6392\u5e8f\uff0c\u5148\u8f93\u5165\u5b8c\uff0c\u7136\u540e\u628a\u6bcf\u4e00\u4e2a\u6570\u5b57\u90fd\u6254\u8fdbvector\u91cc\u9762\u79bb\u6563\u5316\u3002 // \u8bb0 val(i) \u8868\u793a i \u79bb\u6563\u540e\u7684\u7ed3\u679c\uff0craw(i) \u8868\u793a i \u79bb\u6563\u524d\u7684\u7ed3\u679c\u3002 // \u54ce\u54ce\uff0c\u53cd\u6b63 2e5 \u4e2a\u4e09\u5143\u7ec4\uff0c\u591a\u51e0\u4e2a log \u4e5f\u6ca1\u6709\u5173\u7cfb\uff0craw \u76f4\u63a5\u8bb0\u5f55\uff0cval \u76f4\u63a5\u6bcf\u6b21 log \u4e8c\u5206\u4e00\u4e0b\u5c31\u884c\u3002 // \u5b9e\u73b0\u65b9\u4fbf\u53ef\u4ee5\u5728\u4e09\u5143\u7ec4\u7684\u7ed3\u6784\u4f53\u91cc\u9762\u76f4\u63a5\u7528\u4e00\u4e2a\u6210\u5458\u51fd\u6570\u6765\u628a raw -> val. // \u8fd9\u662f\u79bb\u6563\u5316\u7684\u90e8\u5206\u3002 // \u8c03\u8bd5\u590d\u76d8 \u03c8(\uff40\u2207\u00b4)\u03c8 Debug \u8fd9\u4e2a\u9898\u7684\u8fc7\u7a0b\u611f\u89c9\u5f88\u6709\u5fc5\u8981\u8bb0\u4e0b\u6765\uff0c\u6211\u4e4b\u524d\u51e0\u4e4e\u6ca1\u6709\u600e\u4e48\u8fd9\u6837\u7528\u5fc3\u7684\u601d\u8003\u8c03\u8bd5\u8fc7\uff0c\u53ef\u80fd\u4e5f\u662f\u6c34\u5e73\u6da8\u4e0d\u4e0a\u53bb\u7684\u539f\u56e0\u5427\u3002 \u9996\u5148\u6211\u8ba4\u4e3a\u5982\u679c\u4e00\u4e2a\u5730\u65b9\u6709\u91cd\u590d\u7684\uff0c\u8ba1\u7b97\u65f6\u53ef\u80fd\u4f1a\u51fa\u95ee\u9898\uff0c\u6240\u4ee5\u5199\u4e86\u4e00\u4e2a cmp\u3002 \u7136\u540e\u7406\u4e86\u4e00\u904d\u601d\u8def\u5199\u51fa\u4e86\u4ee3\u7801\uff0c\u8fc7\u4e0d\u4e86 sample1\uff0c\u770b\u4e86\u4e00\u4e0b output\u3002 \u53d1\u73b0\u662f\u5c11\u4e86\u4e00\u4e9b\u9876\u70b9\u6ca1\u6709\u8f93\u51fa\uff0c\u89c2\u5bdf\u8f93\u51fa\u4e86\u7684\u70b9\u53d1\u73b0\u4e00\u4e2a\u89c4\u5f8b\uff0c\u4f3c\u4e4e\u5f53 \\(h = 4\\) \u51fa\u73b0\u4e4b\u540e\uff0c\u5c31\u7b97\u5b83\u88ab\u5220\u6389\u4e86\uff0c \\(h = 2\\) \u8fd8\u662f\u4e0d\u4f1a\u88ab\u8ba1\u7b97\uff0c\u76f4\u63a5\u88ab ignore \u4e86\u3002 \u6211\u731c\u662f \\(maxy\\) \u6ca1\u80fd\u5728 \\(-v\\) \u4e4b\u540e\u66f4\u65b0\u6210\u529f\uff0c\u4e8e\u662f\u5b9a\u4f4d\u5230 maxy \u7684\u66f4\u65b0\u90a3\u4e2a\u5730\u65b9\uff0c\u53d1\u73b0 cnt, len \u8fd9\u4e24\u4e2a\u4e1c\u897f\u5c31\u662f\u548c\u626b\u63cf\u7ebf\u6a21\u677f\u4e00\u6837\u7684\uff0c\u4e0d\u4f1a\u6709\u95ee\u9898\uff0c\u6240\u4ee5\u5c31\u66f4\u786e\u5b9a maxy \u51fa\u4e8b\u60c5\u4e86\u3002 \u7136\u540e\u601d\u8003\u4e86\u4e00\u4e0b\u539f\u56e0\uff0c\u53d1\u73b0\u662f\u6ca1\u6709\u6309 len \u66f4\u65b0\uff0c\u4e8e\u662f\u91cd\u6784\u5199\u51fa\u4ee3\u7801\uff0c\u5728 \\(cnt = 0\\) \u7684\u65f6\u5019\u591a\u52a0\u4e86\u7279\u5224\uff0c\u5148\u5224 \\(len\\) \u518d\u8003\u8651\u662f\u5426\u9700\u8981\u4ece\u513f\u5b50\u8282\u70b9\u7684 maxy \u4e0a\u4f20\u4fe1\u606f\u3002 \u6b64\u65f6\u8fc7\u4e86 sample1\uff0c\u4f46\u662f\u8f93\u51fa\u987a\u5e8f\u6709\u95ee\u9898\uff0c\u601d\u8003\u4e86\u4e00\u4e0b\u5e94\u8be5\u662f\u8981\u52a0\u4e00\u4e2a\u7279\u5224\uff1f \u4f46\u662f\u8f93\u51fa\u6b64\u65f6\u5e76\u6ca1\u6709\u53d8\u5316\uff0c\u653e\u4e0b\u8fd9\u4e2a\u4f11\u606f\u4e86\u4e00\u4f1a\uff0c\u56de\u6765\u53d1\u73b0\u6211\u4e4b\u524d\u7684\u4ee3\u7801\u6709\u4e2a sort(ans.begin(), ans.end()) \uff0c\u8d76\u7d27\u5220\u6389\u4e86\uff0c\u7136\u540e\u53d1\u73b0\u5176\u5b9e\u4e0d\u9700\u8981\u7279\u5224\uff0c\u7136\u540e\u5c31\u8fc7\u4e86 sample1\u3002 \u4f46\u662f Wa on 2\uff0c\u53d1\u73b0\u597d\u50cf\u8fd8\u6709\u70b9\u95ee\u9898\uff0c\u5177\u4f53\u662f\u5565\u6211\u5fd8\u8bb0\u4e86\uff0c\u53cd\u6b63\u6539\u4e86\u4e00\u4e0b\u8fc7\u4e86 2\uff0cWa on 3. \u4e0a cf \u7ffb\u51fa #3 \u7684\u6570\u636e\uff0c\u624b\u5143\u753b\u56fe\uff0c\u5bf9\u6bd4\u4e86\u4e00\u4e0b output \u548c forward\uff0c\u53d1\u73b0\u662f\u5728\u6709\u591a\u4e2a\u5904\u7406\u91cd\u5408\u7684\u65f6\u5019\u6ca1\u6709\u5f04\u597d\uff0c\u4e4b\u524d\u6709\u7684 data \u8fd9\u91cc\u5e76\u6ca1\u6709\u5220\uff0c\u88ab ignore \u6389\u6362\u6210\u4e86\u5728\u8fd9\u91cc\u65b0\u66f4\u65b0\u7684\u4e00\u4e2a data\u3002 \u4e8e\u662f\u731c\u6d4b\u53c8\u662f maxy \u51fa\u95ee\u9898\u4e86\uff0c\u601d\u8003\u4e86\u4e00\u4f1a\u53d1\u73b0\u786e\u5b9e\uff0cchange \u5b8c\u4e86\u4e5f\u662f\u9700\u8981\u8003\u8651\u4ece\u513f\u5b50\u66f4\u65b0\u7684\uff0c\u4e0d\u7136\u4e4b\u524d\u7684\u4fe1\u606f\u53ef\u80fd\u5c31\u4f20\u4e0d\u4e0a\u6765\u3002 \u7136\u540e\u8fc7\u4e86 #21, RE on #22\uff0c\u53d1\u73b0\u53ef\u80fd\u662f\u6570\u7ec4\u6ca1\u5f00\u591f\uff0c\u5f00\u4e86\u4e4b\u540e\u987a\u624b\u5f00\u4e86 long long\uff0c\u4f46\u662f\u6ca1\u7528\u3002 \u770b CF \u4e00\u76f4\u7ed9\u6211\u63d0\u793a line 54 out of bounds\uff0c\u4e0d\u61c2\uff0c\u4e8e\u662f\u7528\u7c7b\u4f3c assert \u7684\u65b9\u5f0f\u5224\u4e86\u4e00\u4e0b l, r\u3002 \u4f46\u662f\u6ca1\u7528\u554a\u3002 \u7a81\u7136\u601d\u8003\u5230\u53ef\u80fd \\(p\\) \u4f1a\u8d8a\u754c\uff0c exit(p) \u53d1\u73b0 p > si * 8 \u4e86\uff0c\u4e8e\u662f\u5f00\u5927\uff0c\u4f46\u662f MLE on 1\uff0c\u5173\u6389 long long \u5c31\u8fc7\u4e86\u3002 debug \u8fc7\u7a0b\u5168\u90e8\u5f55\u4e86\u5c4f\u7684\uff0c\u5728 bilibili \u4e0a\u9762\uff1a \u7b2c\u4e00\u90e8\u5206\uff0c\u5e27\u7387\u5f88\u4f4e\uff0c\u6bd4\u7279\u7387\u5f88\u4f4e\u3002 \u7b2c\u4e8c\u90e8\u5206\uff0c\u5e27\u7387\u5f88\u9ad8\uff0c\u6bd4\u7279\u7387\u5f88\u4f4e\u3002 \u7b2c\u4e09\u90e8\u5206\uff0c\u5e27\u7387\u5f88\u9ad8\uff0c\u6bd4\u7279\u7387\u8fd8\u884c\u3002","title":"CF35E \u590d\u76d8"},{"location":"sol/pro/cf35e/#_1","text":"\u7ed9\u51fa \\(n\\) \u4e2a\u5e95\u8fb9\u5728 \\(x\\) \u8f74\u4e0a\u7684\u77e9\u5f62\uff0c\u6c42\u5916\u9762\u7684\u8f6e\u5ed3\u7ebf\u9876\u70b9\u3002 \\(1\\le n \\le 10^5\\) \uff0c\u8f93\u5165\u4ee5 \\(h_i, l_i, r_i\\) \u7684\u65b9\u5f0f\u7ed9\u51fa\uff0c\u8868\u793a\u6709\u4e00\u4e2a\u8986\u76d6 \\(x \\in [l_i, r_i]\\) \u7684\u9ad8\u4e3a \\(h_i\\) \u7684\u77e9\u5f62\u3002","title":"\u9898\u610f"},{"location":"sol/pro/cf35e/#_2","text":"\u9996\u5148\u8003\u8651\u79bb\u6563\u5316\u7136\u540e\u76f4\u63a5\u4e00\u4e2a\u626b\u63cf\u7ebf\u626b\u8fc7\u53bb\uff08\u4ece\u5de6\u5230\u53f3\uff09\u3002 \u7136\u540e\u6ce8\u610f\u5230\u62d0\u70b9\u53ea\u4f1a\u5728\u6574\u4f53\u6700\u5927\u9ad8\u5ea6\u53d8\u5316\u7684\u65f6\u5019\u51fa\u73b0\u3002 \u6240\u4ee5\u6211\u4eec\u8003\u8651\u76f4\u63a5\u7ef4\u62a4\u4e00\u4e0b\u626b\u63cf\u7ebf\u4e0a\u7684 \\(y\\) \u7684\u6700\u5927\u503c\uff0c\u8bb0 \\(maxy\\) \u8868\u793a\u7ebf\u6bb5\u6811\u4e0a\u4e00\u4e2a\u8282\u70b9\u5185\u88ab\u8986\u76d6\u5230\u7684\u6700\u9ad8 \\(y\\) \u503c\uff0c\u8bb0 \\(cnt\\) \u8868\u793a\u7ebf\u6bb5\u6811\u4e0a\u7684\u8282\u70b9\u81ea\u8eab\u88ab\u8986\u76d6\u7684\u6b21\u6570\uff0c\u8bb0 \\(len\\) \u8868\u793a\u8fd9\u4e2a\u8282\u70b9\u7ef4\u62a4\u7684\u6bb5\u5185\u603b\u5171\u88ab\u8986\u76d6\u7684\u957f\u5ea6\uff08\u8bb0\u5f55\u8fd9\u4e2a\u662f\u4e3a\u4e86\u5224\u65ad\u662f\u5426\u80fd\u66f4\u65b0 \\(maxy\\) \uff09 \u4ee4\u7b2c \\(i\\) \u6bb5\u4e3a \\([raw(i), raw(i + 1)]\\) \uff0c\u4ee4\u7ebf\u6bb5\u6811\u4e0a\u7684 \\([l, r]\\) \u7ef4\u62a4\u7b2c \\(l \\sim r\\) \u6bb5\u3002 \u4fee\u6539\u7684\u65f6\u5019\u6ce8\u610f\uff0c\u5982\u679c\u5bf9\u4e8e\u626b\u63cf\u7ebf\u4e0a\u7684 \\([l, r]\\) \uff0c\u64cd\u4f5c\u65f6\u5e94\u5f53\u4fee\u6539\u7ebf\u6bb5\u6811\u4e0a\u7684 \\([val(l), val(r) - 1]\\) \u3002 \u56e0\u4e3a\u6211\u4eec\u7ef4\u62a4\u7684\u662f\u4e00\u4e2a\u6bb5\uff0c\u7ef4\u62a4\u70b9\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002 \u8fd9\u91cc\u7684 Pushup \u65b9\u5f0f\u548c\u4e3b\u6d41\u4e0d\u592a\u4e00\u6837\uff0c\u5728 Change \u5230\u4e00\u4e2a\u8282\u70b9\u7684\u65f6\u5019\u4ecd\u7136\u9700\u8981\u505a\u7c7b\u4f3c Pushup \u7684\u5904\u7406\uff0c\u8fd9\u6837\u53ef\u4ee5\u7701\u53bb Pushdown\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u5bf9\u4e8e Pushup\uff0c\u5982\u679c\u5f53\u524d\u8282\u70b9\u7684 \\(cnt > 0\\) \uff0c\u90a3\u4e48\u4ee4 \\(len = raw(r + 1) - raw(l)\\) \u5e76\u4ee4 \\(maxy = raw(r + 1)\\) \uff0c\u5426\u5219\u8003\u8651\u4ece\u513f\u5b50\u8282\u70b9\u66f4\u65b0 \\(len\\) \uff0c\u5982\u679c\u66f4\u65b0\u5b8c\u4e4b\u540e \\(len > 0\\) \uff0c\u518d\u4ece\u5b50\u6811\u66f4\u65b0 \\(maxy\\) \u3002 \u7136\u540e\u5728\u4fee\u6539\u7684\u65f6\u5019\u4e5f\u8981\u76f4\u63a5\u5904\u7406\u66f4\u6539\uff0c\u65b9\u5f0f\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u5728\u5904\u7406 \\(cnt = 0\\) \u7684\u60c5\u51b5\u7684\u65f6\u5019\uff0c\u9700\u8981\u5148\u5224\u662f\u5426\u4e3a\u53f6\u5b50\u8282\u70b9\uff08\u4e0d\u7136\u8981\u989d\u5916\u518d\u5f00\u7a7a\u95f4\uff09\uff0c\u7136\u540e\u518d\u4ece\u5b50\u6811\u4e0a\u4f20\u4fe1\u606f\uff0c\u8fd9\u91cc\u5c31\u7b97\u4fee\u6539\u4e86 \\(cnt\\) \uff0c\u8fd8\u662f\u9700\u8981\u8003\u8651\u7528\u513f\u5b50\u8282\u70b9\u4fe1\u606f\u66f4\u65b0 \\(maxy\\) \uff0c\u4e0d\u7136\u6ca1\u6cd5\u5904\u7406\u6709\u591a\u4e2a\u77e9\u5f62\u7684\u66f4\u6539\u5806\u5728\u4e00\u8d77\u7684\u60c5\u51b5\uff08\u6709\u53ef\u80fd\u5f53\u524d\u8282\u70b9\u76f4\u63a5\u88ab\u8986\u76d6\u7684\u6b21\u6570\u4e3a\u96f6\u4e86\uff0c\u4f46\u662f\u513f\u5b50\u8282\u70b9\u5e76\u6ca1\u6709\uff09\u3002 \u90a3\u4e48\u6bcf\u6b21\u66f4\u65b0\u5b8c\u6211\u4eec\u53ea\u9700\u8981\u8be2\u7ebf\u6bb5\u6811\u6811\u6839\u7684 \\(maxy\\) \u5373\u53ef\uff0c\u5e76\u548c\u4fee\u6539\u524d\u7684 \\(maxy^{\\prime}\\) \u6bd4\u8f83\uff0c\u5982\u679c\u53d1\u751f\u6539\u53d8\uff0c\u5c31\u76f4\u63a5\u628a \\((x, maxy), (x, maxy^{\\prime})\\) \u6254\u8fdb Vector \u5c31\u884c\u3002 \u8fd8\u6709\u4e00\u4e2a\u8981\u6ce8\u610f\u7684\u5730\u65b9\u662f\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u505a\u6cd5\u662f\u5728\u6bcf\u6b21 Query \u4e4b\u540e\u76f4\u63a5\u6bd4\u5bf9\u5e76\u66f4\u65b0\u7b54\u6848\uff0c\u6240\u4ee5\u5982\u679c\u5728\u4e00\u4e2a \\(x\\) \u4e0a\u6709\u591a\u4e2a\u66f4\u6539\u8981\u5904\u7406\uff0c\u9700\u8981\u4e00\u53e3\u6c14\u5168\u90e8\u5904\u7406\u5b8c\u518d\u66f4\u65b0\uff0c\u5426\u5219\u4f1a\u591a\u51fa\u6765\u4e00\u4e9b\u5b9e\u9645\u4e0a\u4e0d\u5b58\u5728\u7684\u9876\u70b9\u3002 \u6700\u540e\u7a7a\u95f4\u8bb0\u5f97\u5f00\u591f\uff0c\u4e0d\u7136\u4f1a RE on #22. Code - \u4fdd\u7559\u6ce8\u91ca\u7248\u672cauthor : black_trees #include <cmath> #include <cstdio> #include <vector> #include <cstring> #include <utility> #include <iostream> #include <algorithm> #define endl '\\n' // #define int long long using namespace std ; using i64 = long long ; const int si = 1e5 + 10 ; int n , m ; // m \u662f\u79bb\u6563\u5316\u4e4b\u540e\u7684\u503c\u57df\u4e0a\u754c(1~m). std :: vector < int > v ; int raw [ si * 3 ]; int val ( int x ) { return lower_bound ( v . begin (), v . end (), x ) - v . begin (); } struct Tuple { int l , r , k ; void trans () { int vl = val ( l ), vr = val ( r ), vk = val ( k ); raw [ vl ] = l , raw [ vr ] = r , raw [ vk ] = k , l = vl , r = vr , k = vk ; } bool operator < ( const Tuple & b ) const { if ( l == b . l ) return r > b . r ; // \u8fd9\u91cc\u662f\u4e00\u5f00\u59cb\u7684\u60f3\u6cd5\uff0c\u540e\u9762\u7528\u540c\u65f6\u8ba1\u7b97\u89e3\u51b3\u4e86\u3002 return l < b . l ; } } a [ si ], b [ si << 1 ]; // \u8fd9\u91cc\u662f\u540c\u65f6\u5b58\u8f93\u5165\u7684\u4fe1\u606f\u548c\u4e09\u5143\u7ec4\u4fe1\u606f\u7684 // how to maintain maxy?? class SegTree { private : struct Node { int l , r ; int cnt , len , mxy ; int Len () { return raw [ r + 1 ] - raw [ l ]; } } t [ si * 11 ]; // \u53ef\u80fd\u8981\u5f00\u5927\u4e00\u70b9\uff0c\u56e0\u4e3a\u503c\u57df\uff1f inline void pushup ( int p ) { if ( t [ p ]. cnt > 0 ) t [ p ]. len = t [ p ]. Len (), t [ p ]. mxy = raw [ t [ p ]. r + 1 ]; else { t [ p ]. len = t [ p << 1 ]. len + t [ p << 1 | 1 ]. len ; if ( t [ p ]. len > 0 ) t [ p ]. mxy = max ( t [ p << 1 ]. mxy , t [ p << 1 | 1 ]. mxy ); else t [ p ]. mxy = 0 ; } } public : void build ( int p , int l , int r ) { t [ p ]. l = l , t [ p ]. r = r , t [ p ]. mxy = t [ p ]. len = t [ p ]. cnt = 0 ; // if(abs(l) > 1e9 || abs(r) > 1e9) exit(2); // if(p > 8e5 + 80) exit(p); if ( l == r ) return ; int mid = ( l + r ) >> 1 ; build ( p << 1 , l , mid ), build ( p << 1 | 1 , mid + 1 , r ); } void change ( int p , int l , int r , int v ) { int nl = t [ p ]. l , nr = t [ p ]. r ; if ( l <= nl && nr <= r ) { t [ p ]. cnt += v ; if ( t [ p ]. cnt > 0 ) t [ p ]. len = t [ p ]. Len (), t [ p ]. mxy = raw [ t [ p ]. r + 1 ]; else { if ( nl == nr ) t [ p ]. len = 0 , t [ p ]. mxy = 0 ; else { t [ p ]. len = t [ p << 1 ]. len + t [ p << 1 | 1 ]. len ; if ( t [ p ]. len > 0 ) t [ p ]. mxy = max ( t [ p << 1 ]. mxy , t [ p << 1 | 1 ]. mxy ); else t [ p ]. mxy = 0 ; } } return ; } int mid = ( nl + nr ) >> 1 ; if ( l <= mid ) change ( p << 1 , l , r , v ); if ( r > mid ) change ( p << 1 | 1 , l , r , v ); pushup ( p ); } int Query_global () { return t [ 1 ]. mxy ; } } tr ; std :: vector < std :: pair < int , int > > ans ; signed main () { freopen ( \"input.txt\" , \"r\" , stdin ); freopen ( \"output.txt\" , \"w\" , stdout ); cin . tie ( 0 ) -> sync_with_stdio ( false ); cin . exceptions ( cin . failbit | cin . badbit ); cin >> n , v . push_back ( 0 ); for ( int i = 1 ; i <= n ; ++ i ) { cin >> a [ i ]. k >> a [ i ]. l >> a [ i ]. r ; v . push_back ( a [ i ]. k ), v . push_back ( a [ i ]. l ), v . push_back ( a [ i ]. r ); } sort ( v . begin (), v . end ()); v . erase ( unique ( v . begin (), v . end ()), v . end ()); for ( int i = 1 ; i <= n ; ++ i ) a [ i ]. trans (); tr . build ( 1 , 1 , ( int ) v . size () + 1 ); for ( int i = 1 ; i <= n ; ++ i ) { b [ i ] = ( Tuple ){ a [ i ]. l , a [ i ]. k , 1 }; b [ i + n ] = ( Tuple ){ a [ i ]. r , a [ i ]. k , -1 }; } sort ( b + 1 , b + 1 + n + n ); /* // for(int i = 1; i <= n + n; ++i) // cout << i << \" -> \" << raw[b[i].l] << \" \" << raw[b[i].r] << \" \" << b[i].k << endl; // cout << \"====\" << endl; int nowy = 0; for(int i = 1; i <= n + n; ++i) { int x = raw[b[i].l], l = val(0), r = b[i].r, v = b[i].k; // cout << i << \" -> \" << l << \" \" << r << \" \" << v << endl; tr.change(1, l, r - 1, v); int nmxy = tr.Query_global(); // cout << i << \" -> \" << nowy << \" \" << nmxy << endl; if(nmxy != nowy) { ans.push_back(make_pair(x, nowy)); ans.push_back(make_pair(x, nmxy)); nowy = nmxy; } } // sweeping line */ int nowy = 0 ; for ( int i = 1 ; i <= n + n ; ) { int x = raw [ b [ i ]. l ]; int l , r , v ; while ( true ) { l = val ( 0 ), r = b [ i ]. r , v = b [ i ]. k ; tr . change ( 1 , l , r - 1 , v ); if ( raw [ b [ i + 1 ]. l ] != x ) break ; i ++ ; } int nmxy = tr . Query_global (); if ( nmxy != nowy ) { ans . push_back ( make_pair ( x , nowy )); ans . push_back ( make_pair ( x , nmxy )); nowy = nmxy ; } i ++ ; } // ans.erase(unique(ans.begin(), ans.end()), ans.end()); cout << ans . size () << endl ; for ( auto [ x , y ] : ans ) cout << x << \" \" << y << endl ; // \u7b2c i \u6bb5\u662f [raw(i), raw(i + 1)] // \u6240\u4ee5\u5982\u679c\u52a0\u5165\u4e86\u4e00\u4e2a\u5143\u7ec4 (x, l, r, +-1);\uff08\u5b58\u7684 val\uff09 // \u4fee\u6539\u662f change(l, r - 1)\u3002 // \u73b0\u5728\u7684\u95ee\u9898\u51fa\u5728\u5904\u7406\u4fe1\u606f\u7684\u5730\u65b9\uff0c\u800c\u4e14\u80af\u5b9a\u4e0d\u662f\u8d4b\u503c\u7684\u9519\u8bef\uff0c\u5e94\u8be5\u662f\u67d0\u4e2a\u987a\u5e8f\u9519\u4e86\u6216\u8005\u8986\u76d6\u4e86\u4e0d\u5e94\u8be5\u8986\u76d6\u7684\u503c\u3002 // \u597d\uff0c\u73b0\u5728\u5904\u7406\u4fe1\u606f\u6ca1\u6709\u95ee\u9898\u4e86\uff0c\u73b0\u5728\u8981\u505a\u7684\u5e94\u8be5\u662f\u8003\u8651\u600e\u4e48\u5904\u7406\u90a3\u4e2a\u91cd\u5408\u7684\u5730\u65b9\u3002 // \u80fd\u4e0d\u80fd\u8003\u8651\u628a\u540c\u4e00\u4e2a $x$ \u4f4d\u7f6e\u7684\u5143\u7ec4\u5168\u90e8\u540c\u65f6\u505a\u66f4\u6539\uff1f\u5e94\u8be5\u53ef\u4ee5\uff0c\u660e\u5929\u6765\u6539, 11\u70b9\u4e86\uff0c\u5148\u7761\u89c9\u3002 // \u786e\u5b9e\u53ef\u4ee5\uff0c\u4f46\u662f\u73b0\u5728\u95ee\u9898\u662f\u4e00\u76f4 Re22\uff0ccf \u8bf4 line 54 RE\uff0c\u6211\u6ca1\u770b\u51fa\u6765\u554a\uff0c\u6570\u7ec4\u4e5f\u5f00\u591f\u4e86\uff1f // \u7a81\u7136\u60f3\u8d77\u53ef\u80fd\u662f p RE\u4e86\uff0c\u7528 exit \u8bd5\u4e00\u8bd5\u3002 // \u6211\u8349\uff0c\u771f\u7684\u662f\uff0c\u6539\u4e86\u4e0b\u5c31\u8fc7\u4e86\u3002 // \u611f\u89c9\u8fd9\u4e2a\u662f\u975e\u5e38 Educational\u7684\uff0c\u7279\u522b\u662f\u601d\u8003\u548c\u8c03\u8bd5\u8fc7\u7a0b\u3002 return 0 ; } // done: // \u597d\u50cf\u8fd9\u4e2a maxy \u7ef4\u62a4\u4e4b\u540e\u5355\u8c03\u4e0d\u964d\u4e86\uff1f // \u6413\u4e00\u4e2a\u6570\u636e\u8bd5\u8bd5\uff0c\u679c\u7136\u5355\u8c03\u4e0d\u964d\u4e86\uff0c\u53ef\u80fd\u8981\u6539\u6539 maxy \u7684\u7ef4\u62a4\uff1f // \u662f\u4e0d\u662f\u56e0\u4e3a cnt = 0 \u6216\u8005 len = 0 \u4e4b\u540e maxy \u6ca1\u6709\u5f3a\u5236\u4f20\u9012\u4e0a\u53bb\uff1f // \u786e\u5b9e\uff0c\u6539\u4e86\u4e00\u4e0b maxy \u7684 update \u65b9\u5f0f\u5c31\u884c\u4e86\u3002 // \u5148\u8981\u79bb\u6563\u5316\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8f93\u5165\u5148\u8f6c\u5316\u6210\u4e24\u4e2a\u4e09\u5143\u7ec4\uff0c\u7136\u540e\u628a\u4e09\u5143\u7ec4\u76f4\u63a5\u5b58\u8d77\u6765 // \u8fd9\u4e2a\u65f6\u5019\u4e0d\u7740\u6025\u6392\u5e8f\uff0c\u5148\u8f93\u5165\u5b8c\uff0c\u7136\u540e\u628a\u6bcf\u4e00\u4e2a\u6570\u5b57\u90fd\u6254\u8fdbvector\u91cc\u9762\u79bb\u6563\u5316\u3002 // \u8bb0 val(i) \u8868\u793a i \u79bb\u6563\u540e\u7684\u7ed3\u679c\uff0craw(i) \u8868\u793a i \u79bb\u6563\u524d\u7684\u7ed3\u679c\u3002 // \u54ce\u54ce\uff0c\u53cd\u6b63 2e5 \u4e2a\u4e09\u5143\u7ec4\uff0c\u591a\u51e0\u4e2a log \u4e5f\u6ca1\u6709\u5173\u7cfb\uff0craw \u76f4\u63a5\u8bb0\u5f55\uff0cval \u76f4\u63a5\u6bcf\u6b21 log \u4e8c\u5206\u4e00\u4e0b\u5c31\u884c\u3002 // \u5b9e\u73b0\u65b9\u4fbf\u53ef\u4ee5\u5728\u4e09\u5143\u7ec4\u7684\u7ed3\u6784\u4f53\u91cc\u9762\u76f4\u63a5\u7528\u4e00\u4e2a\u6210\u5458\u51fd\u6570\u6765\u628a raw -> val. // \u8fd9\u662f\u79bb\u6563\u5316\u7684\u90e8\u5206\u3002 //","title":"\u9898\u89e3"},{"location":"sol/pro/cf35e/#_3","text":"Debug \u8fd9\u4e2a\u9898\u7684\u8fc7\u7a0b\u611f\u89c9\u5f88\u6709\u5fc5\u8981\u8bb0\u4e0b\u6765\uff0c\u6211\u4e4b\u524d\u51e0\u4e4e\u6ca1\u6709\u600e\u4e48\u8fd9\u6837\u7528\u5fc3\u7684\u601d\u8003\u8c03\u8bd5\u8fc7\uff0c\u53ef\u80fd\u4e5f\u662f\u6c34\u5e73\u6da8\u4e0d\u4e0a\u53bb\u7684\u539f\u56e0\u5427\u3002 \u9996\u5148\u6211\u8ba4\u4e3a\u5982\u679c\u4e00\u4e2a\u5730\u65b9\u6709\u91cd\u590d\u7684\uff0c\u8ba1\u7b97\u65f6\u53ef\u80fd\u4f1a\u51fa\u95ee\u9898\uff0c\u6240\u4ee5\u5199\u4e86\u4e00\u4e2a cmp\u3002 \u7136\u540e\u7406\u4e86\u4e00\u904d\u601d\u8def\u5199\u51fa\u4e86\u4ee3\u7801\uff0c\u8fc7\u4e0d\u4e86 sample1\uff0c\u770b\u4e86\u4e00\u4e0b output\u3002 \u53d1\u73b0\u662f\u5c11\u4e86\u4e00\u4e9b\u9876\u70b9\u6ca1\u6709\u8f93\u51fa\uff0c\u89c2\u5bdf\u8f93\u51fa\u4e86\u7684\u70b9\u53d1\u73b0\u4e00\u4e2a\u89c4\u5f8b\uff0c\u4f3c\u4e4e\u5f53 \\(h = 4\\) \u51fa\u73b0\u4e4b\u540e\uff0c\u5c31\u7b97\u5b83\u88ab\u5220\u6389\u4e86\uff0c \\(h = 2\\) \u8fd8\u662f\u4e0d\u4f1a\u88ab\u8ba1\u7b97\uff0c\u76f4\u63a5\u88ab ignore \u4e86\u3002 \u6211\u731c\u662f \\(maxy\\) \u6ca1\u80fd\u5728 \\(-v\\) \u4e4b\u540e\u66f4\u65b0\u6210\u529f\uff0c\u4e8e\u662f\u5b9a\u4f4d\u5230 maxy \u7684\u66f4\u65b0\u90a3\u4e2a\u5730\u65b9\uff0c\u53d1\u73b0 cnt, len \u8fd9\u4e24\u4e2a\u4e1c\u897f\u5c31\u662f\u548c\u626b\u63cf\u7ebf\u6a21\u677f\u4e00\u6837\u7684\uff0c\u4e0d\u4f1a\u6709\u95ee\u9898\uff0c\u6240\u4ee5\u5c31\u66f4\u786e\u5b9a maxy \u51fa\u4e8b\u60c5\u4e86\u3002 \u7136\u540e\u601d\u8003\u4e86\u4e00\u4e0b\u539f\u56e0\uff0c\u53d1\u73b0\u662f\u6ca1\u6709\u6309 len \u66f4\u65b0\uff0c\u4e8e\u662f\u91cd\u6784\u5199\u51fa\u4ee3\u7801\uff0c\u5728 \\(cnt = 0\\) \u7684\u65f6\u5019\u591a\u52a0\u4e86\u7279\u5224\uff0c\u5148\u5224 \\(len\\) \u518d\u8003\u8651\u662f\u5426\u9700\u8981\u4ece\u513f\u5b50\u8282\u70b9\u7684 maxy \u4e0a\u4f20\u4fe1\u606f\u3002 \u6b64\u65f6\u8fc7\u4e86 sample1\uff0c\u4f46\u662f\u8f93\u51fa\u987a\u5e8f\u6709\u95ee\u9898\uff0c\u601d\u8003\u4e86\u4e00\u4e0b\u5e94\u8be5\u662f\u8981\u52a0\u4e00\u4e2a\u7279\u5224\uff1f \u4f46\u662f\u8f93\u51fa\u6b64\u65f6\u5e76\u6ca1\u6709\u53d8\u5316\uff0c\u653e\u4e0b\u8fd9\u4e2a\u4f11\u606f\u4e86\u4e00\u4f1a\uff0c\u56de\u6765\u53d1\u73b0\u6211\u4e4b\u524d\u7684\u4ee3\u7801\u6709\u4e2a sort(ans.begin(), ans.end()) \uff0c\u8d76\u7d27\u5220\u6389\u4e86\uff0c\u7136\u540e\u53d1\u73b0\u5176\u5b9e\u4e0d\u9700\u8981\u7279\u5224\uff0c\u7136\u540e\u5c31\u8fc7\u4e86 sample1\u3002 \u4f46\u662f Wa on 2\uff0c\u53d1\u73b0\u597d\u50cf\u8fd8\u6709\u70b9\u95ee\u9898\uff0c\u5177\u4f53\u662f\u5565\u6211\u5fd8\u8bb0\u4e86\uff0c\u53cd\u6b63\u6539\u4e86\u4e00\u4e0b\u8fc7\u4e86 2\uff0cWa on 3. \u4e0a cf \u7ffb\u51fa #3 \u7684\u6570\u636e\uff0c\u624b\u5143\u753b\u56fe\uff0c\u5bf9\u6bd4\u4e86\u4e00\u4e0b output \u548c forward\uff0c\u53d1\u73b0\u662f\u5728\u6709\u591a\u4e2a\u5904\u7406\u91cd\u5408\u7684\u65f6\u5019\u6ca1\u6709\u5f04\u597d\uff0c\u4e4b\u524d\u6709\u7684 data \u8fd9\u91cc\u5e76\u6ca1\u6709\u5220\uff0c\u88ab ignore \u6389\u6362\u6210\u4e86\u5728\u8fd9\u91cc\u65b0\u66f4\u65b0\u7684\u4e00\u4e2a data\u3002 \u4e8e\u662f\u731c\u6d4b\u53c8\u662f maxy \u51fa\u95ee\u9898\u4e86\uff0c\u601d\u8003\u4e86\u4e00\u4f1a\u53d1\u73b0\u786e\u5b9e\uff0cchange \u5b8c\u4e86\u4e5f\u662f\u9700\u8981\u8003\u8651\u4ece\u513f\u5b50\u66f4\u65b0\u7684\uff0c\u4e0d\u7136\u4e4b\u524d\u7684\u4fe1\u606f\u53ef\u80fd\u5c31\u4f20\u4e0d\u4e0a\u6765\u3002 \u7136\u540e\u8fc7\u4e86 #21, RE on #22\uff0c\u53d1\u73b0\u53ef\u80fd\u662f\u6570\u7ec4\u6ca1\u5f00\u591f\uff0c\u5f00\u4e86\u4e4b\u540e\u987a\u624b\u5f00\u4e86 long long\uff0c\u4f46\u662f\u6ca1\u7528\u3002 \u770b CF \u4e00\u76f4\u7ed9\u6211\u63d0\u793a line 54 out of bounds\uff0c\u4e0d\u61c2\uff0c\u4e8e\u662f\u7528\u7c7b\u4f3c assert \u7684\u65b9\u5f0f\u5224\u4e86\u4e00\u4e0b l, r\u3002 \u4f46\u662f\u6ca1\u7528\u554a\u3002 \u7a81\u7136\u601d\u8003\u5230\u53ef\u80fd \\(p\\) \u4f1a\u8d8a\u754c\uff0c exit(p) \u53d1\u73b0 p > si * 8 \u4e86\uff0c\u4e8e\u662f\u5f00\u5927\uff0c\u4f46\u662f MLE on 1\uff0c\u5173\u6389 long long \u5c31\u8fc7\u4e86\u3002 debug \u8fc7\u7a0b\u5168\u90e8\u5f55\u4e86\u5c4f\u7684\uff0c\u5728 bilibili \u4e0a\u9762\uff1a \u7b2c\u4e00\u90e8\u5206\uff0c\u5e27\u7387\u5f88\u4f4e\uff0c\u6bd4\u7279\u7387\u5f88\u4f4e\u3002 \u7b2c\u4e8c\u90e8\u5206\uff0c\u5e27\u7387\u5f88\u9ad8\uff0c\u6bd4\u7279\u7387\u5f88\u4f4e\u3002 \u7b2c\u4e09\u90e8\u5206\uff0c\u5e27\u7387\u5f88\u9ad8\uff0c\u6bd4\u7279\u7387\u8fd8\u884c\u3002","title":"\u8c03\u8bd5\u590d\u76d8"},{"location":"sol/pro/cf713c/","text":"Description \u03c8(\uff40\u2207\u00b4)\u03c8 \u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u957f\u5ea6\u4e3a \\(n\\) \u3002 \u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u628a \\(a\\) \u4e2d\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\u52a0\u4e00\u6216\u8005\u51cf\u4e00\uff0c\u4ee3\u4ef7\u4e3a \\(1\\) \u3002 \u6c42\u4f7f\u5f97\u539f\u5e8f\u5217\u4e25\u683c\u5355\u8c03\u9012\u589e\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002 \\(1\\le n \\le 3\\times10^3, 1\\le a_i \\le 10^9\\) \u3002 Analysis \u03c8(\uff40\u2207\u00b4)\u03c8 \u672c\u9898\u548c POJ3666 \u5341\u5206\u7c7b\u4f3c\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f\uff0c\u672c\u9898\u8981\u6c42\u7684\u662f\u4e25\u683c\u5355\u8c03\u9012\u589e\uff0c\u800c POJ3666 \u5219\u8981\u6c42\u975e\u4e25\u683c\u5355\u8c03\u9012\u589e\u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u4e00\u4e2a\u7ecf\u5178 Trick\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(a_i\\) \uff0c\u8ba9\u5b83\u51cf\u53bb \\(i\\) \uff0c\u672c\u9898\u7684\u4e25\u683c\u5355\u8c03\u9012\u589e\u5c31\u8f6c\u5316\u4e3a\u4e86\u975e\u4e25\u683c\u5355\u8c03\u9012\u589e\u3002 \u7ecf\u8fc7\u5206\u6790\u4e4b\u540e\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5f15\u7406\uff08\u8f6c\u5316\u4e3a\u975e\u4e25\u683c\u4e4b\u540e\uff09\uff1a Lemma \u03c8(\uff40\u2207\u00b4)\u03c8 \u8bbe\u6700\u540e\u5f97\u5230\u7684\u5e8f\u5217\u4e3a \\(b\\) \uff0c \\(S_a,S_b\\) \u5206\u522b\u4e3a \\(a,b\\) \u5f53\u4e2d\u51fa\u73b0\u7684\u6240\u6709\u6570\u7ec4\u6210\u7684\u96c6\u5408\u3002 \u5fc5\u7136\u5b58\u5728\u4e00\u7ec4\u6700\u4f18\u89e3\uff0c\u4f7f\u5f97 \\(S_b \\subset S_a\\) \u3002 Proof \u03c8(\uff40\u2207\u00b4)\u03c8 \u9996\u5148\u53ef\u4ee5\u628a\u95ee\u9898\u8f6c\u5316\u4e3a\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u6784\u9020\u4e00\u4e2a\u975e\u4e25\u683c\u5355\u8c03\u9012\u589e\u7684\u5e8f\u5217 \\(b\\) \uff0c\u4f7f\u5f97 \\(\\sum\\limits_{i=1}^{n} |a_i -b_i|\\) \u6700\u5c0f\u3002 \u8003\u8651\u8fd9\u6837\u7684\u4e00\u5f20\u56fe\uff0c\u5176\u4e2d \\(re\\) \u8868\u793a\u5bf9 \\(a\\) \u6392\u5e8f\u4e4b\u540e\u5f97\u5230\u7684\u5e8f\u5217\uff0c\u6a59\u8272\u70b9\u8868\u793a \\(b\\) \u3002 \u5bf9\u4e8e\u6bcf\u4e2a \\(re_i,re_{i+1}\\) \uff0c\u628a\u6240\u6709\u5728 \\([re_i,re_{i+1}]\\) \u8fd9\u4e2a\u533a\u95f4\u7684 \\(b\\) \u90fd\u627e\u51fa\u6765\uff08\u4e0a\u56fe\u88ab\u6846\u8d77\u6765\u7684\u90e8\u5206\uff09\u3002 \u7edf\u8ba1 \\(b_i\\) \u5bf9\u5e94\u7684 \\(a_i\\) \u5927\u4e8e\u7b49\u4e8e \\(re_{i+1}\\) \u7684\u4e2a\u6570 \\(y\\) \uff0c\u5c0f\u4e8e\u7b49\u4e8e \\(re_i\\) \u7684\u4e2a\u6570 \\(x\\) \u3002 \u5982\u679c \\(x > y\\) \uff0c\u90a3\u4e48\u628a\u88ab\u6846\u8d77\u6765\u7684\u8fd9\u90e8\u5206\u6574\u4f53\u5411\u4e0b\u5e73\u79fb \\(d\\) \u4e2a\u5355\u4f4d\uff0c\u4f7f\u5f97\u5b83\u4eec\u5f53\u4e2d\u7684\u6700\u4f4e\u70b9\u7b49\u4e8e \\(re_i\\) \uff0c\u603b\u4ee3\u4ef7\u5c31\u4f1a\u589e\u52a0 \\(d(y-x)\\) \uff0c\u56e0\u4e3a \\(x >y\\) \uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u603b\u4ee3\u4ef7\u4f1a\u51cf\u5c0f\uff0c\u5c31\u4f1a\u66f4\u4f18\u3002 \\(x < y\\) \u7684\u65f6\u5019\u540c\u7406\uff0c \\(x=y\\) \u7684\u65f6\u5019\u4efb\u610f\u9009\u4e00\u4e2a\u65b9\u5f0f\u5e73\u79fb\u5373\u53ef\u3002 \u5f52\u7eb3\u4e4b\u540e\u53ef\u4ee5\u53d1\u73b0\uff0c\u4efb\u4f55\u4e00\u4e2a \\(b_i\\) \uff0c\u53ea\u8981\u5b83\u4e0d\u5c5e\u4e8e \\(S_a\\) \uff0c\u603b\u662f\u53ef\u4ee5\u628a\u5b83\u53d8\u6210 \\(S_a\\) \u5f53\u4e2d\u7684\u67d0\u4e00\u4e2a\u6570\uff0c\u4e14\u6700\u7ec8\u7b54\u6848\u4e0d\u4f1a\u66f4\u52a3\u3002 \u5f15\u7406\u5f97\u8bc1\u3002 Method \u03c8(\uff40\u2207\u00b4)\u03c8 \u6839\u636e\u5f15\u7406\u4ee5\u53ca\u5176\u8bc1\u660e\u8fc7\u7a0b\uff0c\u4e0d\u96be\u60f3\u5230\u4e00\u4e2a DP \u72b6\u6001\uff1a \u8bbe \\(dp_{i,j}\\) \u8868\u793a\uff0c\u8003\u8651\u4f7f \\(a_1 \\sim a_i\\) \u5168\u90e8\u6ee1\u8db3\u6761\u4ef6\uff0c\u4e14\u4f7f \\(a_i\\) \u53d8\u4e3a \\(re_j\\) \u65f6\u7684\u72b6\u6001\u96c6\u5408\u3002 \\(dp_{i,j}\\) \u7684\u5c5e\u6027\u662f\uff1a\u201c\u603b\u4ee3\u4ef7\u7684\u6700\u5c0f\u503c\u201d\u3002 \u6700\u7ec8\u7b54\u6848\u662f\u6240\u6709 \\(dp_{n,i}\\) \u7684\u6700\u5c0f\u503c\uff0c\u5176\u4e2d \\(i \\in [1, n]\\) \u3002 \u8003\u8651\u4ece\u201c\u4e0a\u4e00\u6b21\u51b3\u7b56\u201d\u8fdb\u884c\u8f6c\u79fb\uff08\u5373\u662f\u679a\u4e3e\u4e0a\u4e00\u6b21\u51b3\u7b56\u9009\u4e86\u4ec0\u4e48\uff09\uff0c\u53ef\u4ee5\u5c06\u72b6\u6001\u96c6\u5408\u5212\u5206\u5982\u4e0b\uff1a \u90a3\u4e48\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u65b9\u7a0b\uff1a \\[dp_{i,j} = \\min\\limits_{0\\le k \\le j}\\{dp_{i-1,k}\\} + |a_i - re_j|\\] \u5199\u51fa\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 memset ( dp , 0x3f , sizeof dp ), dp [ 0 ][ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { for ( int k = 0 ; k <= j ; ++ k ) { dp [ i ][ j ] = min ( dp [ i ][ j ], dp [ i - 1 ][ k ]); dp [ i ][ j ] += abs ( a [ i ] - re [ j ]); } // \u56e0\u4e3a\u521d\u59cb\u5316\u53ea\u521d\u59cb\u5316\u4e86 dp[0][0]\uff0c\u6240\u4ee5 k \u8981\u4ece 0 \u5f00\u59cb\u3002 // \u5426\u5219\u4ece dp[1][1] \u5f00\u59cb\u7684 dp \u503c\u5c31\u4e0d\u4f1a\u88ab\u66f4\u65b0\uff0c\u4f1a\u5f97\u5230\u9519\u8bef\u7684\u7b54\u6848\u3002 } } \u590d\u6742\u5ea6\u662f \\(\\text{O}(n^3)\\) \u7684\uff0c\u9700\u8981\u4f18\u5316\u3002 \u74f6\u9888\u5728\u4e8e\u6bcf\u6b21\u679a\u4e3e \\(k\\) \u6c42\u51fa \\(dp_{i - 1,k}\\) \u7684\u201c\u5019\u9009\u96c6\u5408\u201d\u4e2d\u7684\u6700\u5c0f\u503c\u3002 \u53d1\u73b0\u5f53\u5916\u5c42\u5faa\u73af\u7684 \\(i\\) \u56fa\u5b9a\uff0c \\(j\\) \u6bcf\u6b21\u589e\u5927 \\(1\\) \u7684\u65f6\u5019\uff0c \\(dp_{i-1,k}\\) \u7684\u5019\u9009\u96c6\u5408\u53ea\u4f1a\u65b0\u52a0\u5165\u4e00\u4e2a\u503c\uff1a \\(dp_{i-1,j}\\) \u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u5f53\u524d\u5019\u9009\u96c6\u5408\u5f53\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u6bcf\u6b21\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf\u8fdb\u884c\u8f6c\u79fb\u3002 \u90a3\u4e48\u6bcf\u6b21\u8f6c\u79fb\u7684\u590d\u6742\u5ea6\u5c31\u4ece \\(\\text{O}(n)\\) \u4f18\u5316\u5230\u4e86 \\(\\text{O}(1)\\) \uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u53d8\u4e3a \\(\\text{O}(n^2)\\) \uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 int main () { cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { cin >> a [ i ]; a [ i ] -= i , re [ i ] = a [ i ]; } sort ( re + 1 , re + 1 + n ); // \u521d\u59cb\u5316\u5199\u6cd5\u548c n^3 \u505a\u6cd5\u7565\u6709\u4e0d\u540c\uff0c\u4f46\u672c\u8d28\u4e00\u6837\u3002 for ( int i = 1 ; i <= n ; ++ i ) { dp [ 1 ][ i ] = abs ( a [ 1 ] - re [ i ]); } for ( int i = 2 ; i <= n ; ++ i ) { i64 minv = 2e18 ; for ( int j = 1 ; j <= n ; ++ j ) { minv = min ( minv , dp [ i - 1 ][ j ]); dp [ i ][ j ] = minv + abs ( a [ i ] - re [ j ]); } } i64 res = 2e18 ; for ( int i = 1 ; i <= n ; ++ i ) { res = min ( res , dp [ n ][ i ]); } cout << res << endl ; return 0 ; } \u5f53\u7136\uff0c\u5b9e\u9645\u4e0a\u53ef\u4ee5\u5bf9 \\(re\\) \u8fdb\u884c\u4e00\u6b21\u53bb\u91cd\uff0c\u8fd9\u6837\u590d\u6742\u5ea6\u53ef\u4ee5\u964d\u5230 \\(\\text{O}(n \\times |S_a|)\\) \u3002","title":"CF713C"},{"location":"sol/pro/cf713c/#description","text":"\u7ed9\u4f60\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u957f\u5ea6\u4e3a \\(n\\) \u3002 \u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u628a \\(a\\) \u4e2d\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\u52a0\u4e00\u6216\u8005\u51cf\u4e00\uff0c\u4ee3\u4ef7\u4e3a \\(1\\) \u3002 \u6c42\u4f7f\u5f97\u539f\u5e8f\u5217\u4e25\u683c\u5355\u8c03\u9012\u589e\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002 \\(1\\le n \\le 3\\times10^3, 1\\le a_i \\le 10^9\\) \u3002","title":"Description"},{"location":"sol/pro/cf713c/#analysis","text":"\u672c\u9898\u548c POJ3666 \u5341\u5206\u7c7b\u4f3c\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f\uff0c\u672c\u9898\u8981\u6c42\u7684\u662f\u4e25\u683c\u5355\u8c03\u9012\u589e\uff0c\u800c POJ3666 \u5219\u8981\u6c42\u975e\u4e25\u683c\u5355\u8c03\u9012\u589e\u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u4e00\u4e2a\u7ecf\u5178 Trick\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(a_i\\) \uff0c\u8ba9\u5b83\u51cf\u53bb \\(i\\) \uff0c\u672c\u9898\u7684\u4e25\u683c\u5355\u8c03\u9012\u589e\u5c31\u8f6c\u5316\u4e3a\u4e86\u975e\u4e25\u683c\u5355\u8c03\u9012\u589e\u3002 \u7ecf\u8fc7\u5206\u6790\u4e4b\u540e\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u5f15\u7406\uff08\u8f6c\u5316\u4e3a\u975e\u4e25\u683c\u4e4b\u540e\uff09\uff1a","title":"Analysis"},{"location":"sol/pro/cf713c/#lemma","text":"\u8bbe\u6700\u540e\u5f97\u5230\u7684\u5e8f\u5217\u4e3a \\(b\\) \uff0c \\(S_a,S_b\\) \u5206\u522b\u4e3a \\(a,b\\) \u5f53\u4e2d\u51fa\u73b0\u7684\u6240\u6709\u6570\u7ec4\u6210\u7684\u96c6\u5408\u3002 \u5fc5\u7136\u5b58\u5728\u4e00\u7ec4\u6700\u4f18\u89e3\uff0c\u4f7f\u5f97 \\(S_b \\subset S_a\\) \u3002","title":"Lemma"},{"location":"sol/pro/cf713c/#proof","text":"\u9996\u5148\u53ef\u4ee5\u628a\u95ee\u9898\u8f6c\u5316\u4e3a\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217 \\(a\\) \uff0c\u6784\u9020\u4e00\u4e2a\u975e\u4e25\u683c\u5355\u8c03\u9012\u589e\u7684\u5e8f\u5217 \\(b\\) \uff0c\u4f7f\u5f97 \\(\\sum\\limits_{i=1}^{n} |a_i -b_i|\\) \u6700\u5c0f\u3002 \u8003\u8651\u8fd9\u6837\u7684\u4e00\u5f20\u56fe\uff0c\u5176\u4e2d \\(re\\) \u8868\u793a\u5bf9 \\(a\\) \u6392\u5e8f\u4e4b\u540e\u5f97\u5230\u7684\u5e8f\u5217\uff0c\u6a59\u8272\u70b9\u8868\u793a \\(b\\) \u3002 \u5bf9\u4e8e\u6bcf\u4e2a \\(re_i,re_{i+1}\\) \uff0c\u628a\u6240\u6709\u5728 \\([re_i,re_{i+1}]\\) \u8fd9\u4e2a\u533a\u95f4\u7684 \\(b\\) \u90fd\u627e\u51fa\u6765\uff08\u4e0a\u56fe\u88ab\u6846\u8d77\u6765\u7684\u90e8\u5206\uff09\u3002 \u7edf\u8ba1 \\(b_i\\) \u5bf9\u5e94\u7684 \\(a_i\\) \u5927\u4e8e\u7b49\u4e8e \\(re_{i+1}\\) \u7684\u4e2a\u6570 \\(y\\) \uff0c\u5c0f\u4e8e\u7b49\u4e8e \\(re_i\\) \u7684\u4e2a\u6570 \\(x\\) \u3002 \u5982\u679c \\(x > y\\) \uff0c\u90a3\u4e48\u628a\u88ab\u6846\u8d77\u6765\u7684\u8fd9\u90e8\u5206\u6574\u4f53\u5411\u4e0b\u5e73\u79fb \\(d\\) \u4e2a\u5355\u4f4d\uff0c\u4f7f\u5f97\u5b83\u4eec\u5f53\u4e2d\u7684\u6700\u4f4e\u70b9\u7b49\u4e8e \\(re_i\\) \uff0c\u603b\u4ee3\u4ef7\u5c31\u4f1a\u589e\u52a0 \\(d(y-x)\\) \uff0c\u56e0\u4e3a \\(x >y\\) \uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u603b\u4ee3\u4ef7\u4f1a\u51cf\u5c0f\uff0c\u5c31\u4f1a\u66f4\u4f18\u3002 \\(x < y\\) \u7684\u65f6\u5019\u540c\u7406\uff0c \\(x=y\\) \u7684\u65f6\u5019\u4efb\u610f\u9009\u4e00\u4e2a\u65b9\u5f0f\u5e73\u79fb\u5373\u53ef\u3002 \u5f52\u7eb3\u4e4b\u540e\u53ef\u4ee5\u53d1\u73b0\uff0c\u4efb\u4f55\u4e00\u4e2a \\(b_i\\) \uff0c\u53ea\u8981\u5b83\u4e0d\u5c5e\u4e8e \\(S_a\\) \uff0c\u603b\u662f\u53ef\u4ee5\u628a\u5b83\u53d8\u6210 \\(S_a\\) \u5f53\u4e2d\u7684\u67d0\u4e00\u4e2a\u6570\uff0c\u4e14\u6700\u7ec8\u7b54\u6848\u4e0d\u4f1a\u66f4\u52a3\u3002 \u5f15\u7406\u5f97\u8bc1\u3002","title":"Proof"},{"location":"sol/pro/cf713c/#method","text":"\u6839\u636e\u5f15\u7406\u4ee5\u53ca\u5176\u8bc1\u660e\u8fc7\u7a0b\uff0c\u4e0d\u96be\u60f3\u5230\u4e00\u4e2a DP \u72b6\u6001\uff1a \u8bbe \\(dp_{i,j}\\) \u8868\u793a\uff0c\u8003\u8651\u4f7f \\(a_1 \\sim a_i\\) \u5168\u90e8\u6ee1\u8db3\u6761\u4ef6\uff0c\u4e14\u4f7f \\(a_i\\) \u53d8\u4e3a \\(re_j\\) \u65f6\u7684\u72b6\u6001\u96c6\u5408\u3002 \\(dp_{i,j}\\) \u7684\u5c5e\u6027\u662f\uff1a\u201c\u603b\u4ee3\u4ef7\u7684\u6700\u5c0f\u503c\u201d\u3002 \u6700\u7ec8\u7b54\u6848\u662f\u6240\u6709 \\(dp_{n,i}\\) \u7684\u6700\u5c0f\u503c\uff0c\u5176\u4e2d \\(i \\in [1, n]\\) \u3002 \u8003\u8651\u4ece\u201c\u4e0a\u4e00\u6b21\u51b3\u7b56\u201d\u8fdb\u884c\u8f6c\u79fb\uff08\u5373\u662f\u679a\u4e3e\u4e0a\u4e00\u6b21\u51b3\u7b56\u9009\u4e86\u4ec0\u4e48\uff09\uff0c\u53ef\u4ee5\u5c06\u72b6\u6001\u96c6\u5408\u5212\u5206\u5982\u4e0b\uff1a \u90a3\u4e48\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u65b9\u7a0b\uff1a \\[dp_{i,j} = \\min\\limits_{0\\le k \\le j}\\{dp_{i-1,k}\\} + |a_i - re_j|\\] \u5199\u51fa\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 memset ( dp , 0x3f , sizeof dp ), dp [ 0 ][ 0 ] = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { for ( int j = 1 ; j <= n ; ++ j ) { for ( int k = 0 ; k <= j ; ++ k ) { dp [ i ][ j ] = min ( dp [ i ][ j ], dp [ i - 1 ][ k ]); dp [ i ][ j ] += abs ( a [ i ] - re [ j ]); } // \u56e0\u4e3a\u521d\u59cb\u5316\u53ea\u521d\u59cb\u5316\u4e86 dp[0][0]\uff0c\u6240\u4ee5 k \u8981\u4ece 0 \u5f00\u59cb\u3002 // \u5426\u5219\u4ece dp[1][1] \u5f00\u59cb\u7684 dp \u503c\u5c31\u4e0d\u4f1a\u88ab\u66f4\u65b0\uff0c\u4f1a\u5f97\u5230\u9519\u8bef\u7684\u7b54\u6848\u3002 } } \u590d\u6742\u5ea6\u662f \\(\\text{O}(n^3)\\) \u7684\uff0c\u9700\u8981\u4f18\u5316\u3002 \u74f6\u9888\u5728\u4e8e\u6bcf\u6b21\u679a\u4e3e \\(k\\) \u6c42\u51fa \\(dp_{i - 1,k}\\) \u7684\u201c\u5019\u9009\u96c6\u5408\u201d\u4e2d\u7684\u6700\u5c0f\u503c\u3002 \u53d1\u73b0\u5f53\u5916\u5c42\u5faa\u73af\u7684 \\(i\\) \u56fa\u5b9a\uff0c \\(j\\) \u6bcf\u6b21\u589e\u5927 \\(1\\) \u7684\u65f6\u5019\uff0c \\(dp_{i-1,k}\\) \u7684\u5019\u9009\u96c6\u5408\u53ea\u4f1a\u65b0\u52a0\u5165\u4e00\u4e2a\u503c\uff1a \\(dp_{i-1,j}\\) \u3002 \u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u5f53\u524d\u5019\u9009\u96c6\u5408\u5f53\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u6bcf\u6b21\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf\u8fdb\u884c\u8f6c\u79fb\u3002 \u90a3\u4e48\u6bcf\u6b21\u8f6c\u79fb\u7684\u590d\u6742\u5ea6\u5c31\u4ece \\(\\text{O}(n)\\) \u4f18\u5316\u5230\u4e86 \\(\\text{O}(1)\\) \uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u53d8\u4e3a \\(\\text{O}(n^2)\\) \uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002 Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 int main () { cin >> n ; for ( int i = 1 ; i <= n ; ++ i ) { cin >> a [ i ]; a [ i ] -= i , re [ i ] = a [ i ]; } sort ( re + 1 , re + 1 + n ); // \u521d\u59cb\u5316\u5199\u6cd5\u548c n^3 \u505a\u6cd5\u7565\u6709\u4e0d\u540c\uff0c\u4f46\u672c\u8d28\u4e00\u6837\u3002 for ( int i = 1 ; i <= n ; ++ i ) { dp [ 1 ][ i ] = abs ( a [ 1 ] - re [ i ]); } for ( int i = 2 ; i <= n ; ++ i ) { i64 minv = 2e18 ; for ( int j = 1 ; j <= n ; ++ j ) { minv = min ( minv , dp [ i - 1 ][ j ]); dp [ i ][ j ] = minv + abs ( a [ i ] - re [ j ]); } } i64 res = 2e18 ; for ( int i = 1 ; i <= n ; ++ i ) { res = min ( res , dp [ n ][ i ]); } cout << res << endl ; return 0 ; } \u5f53\u7136\uff0c\u5b9e\u9645\u4e0a\u53ef\u4ee5\u5bf9 \\(re\\) \u8fdb\u884c\u4e00\u6b21\u53bb\u91cd\uff0c\u8fd9\u6837\u590d\u6742\u5ea6\u53ef\u4ee5\u964d\u5230 \\(\\text{O}(n \\times |S_a|)\\) \u3002","title":"Method"},{"location":"sol/pro/uoj105/","text":"UOJ105 Beads and wires \u03c8(\uff40\u2207\u00b4)\u03c8 \u4e00\u9053\u4e2a\u4eba\u8ba4\u4e3a\u975e\u5e38\u68d2\u7684\u9898\uff0c\u5361\u4e86\u6211\u63a5\u8fd1\u4e00\u5929\u7684\u65f6\u95f4\u3002 \u867d\u7136YL\u6012\u65a5\u8fd9\u9898\u5957\u8def \uff0c\u4e0d\u8fc7\u4ed6\u4e5f\u8bf4\u8fd9\u9898\u60f3\u8d77\u6765\u5bb9\u6613\uff0c\u63a8\u8d77\u6765\u4e00\u822c\uff0c\u5b9e\u73b0\u5f88\u6076\u5fc3\uff08 \\(\\text{Decription}\\) \u03c8(\uff40\u2207\u00b4)\u03c8 \u95ee\u9898\uff1a\u4f60\u6709 \\(n\\) \u4e2a\u73e0\u5b50\uff0c\u521d\u59cb\u4f60\u53ef\u4ee5\u9009\u4efb\u610f\u7684\u4e00\u4e2a\u73e0\u5b50\uff0c\u4e4b\u540e\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u7684\u64cd\u4f5c\uff1a 1. \u628a\u4e00\u9897\u65b0\u7684\u73e0\u5b50 \\(v\\) \u548c\u5df2\u7ecf\u9009\u4e86\u7684\u67d0\u4e00\u4e2a\u73e0\u5b50 \\(u\\) \u7528\u7ea2\u8272\u8fb9 (u,v) \u76f8\u8fde\u3002 2. \u628a\u4e00\u9897\u65b0\u7684\u73e0\u5b50 \\(w\\) \u63d2\u5165\u5230\u7528\u7ea2\u8272\u8fb9\u94fe\u63a5\u7684\u4e24\u4e2a\u8282\u70b9 \\(u,v\\) \u5f53\u4e2d\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u5c06 \\(u,w\\) \u548c \\(v,w\\) \u5206\u522b\u7528\u84dd\u8272\u8fb9\u76f8\u8fde\uff0c\u7136\u540e\u5220\u9664 \\((u,v)\\) \u8fd9\u6761\u7ea2\u8272\u8fb9\u3002 \u73b0\u5728\u7ed9\u5b9a\u4f60\u6240\u6709\u64cd\u4f5c\u5b8c\u4e86\u4e4b\u540e\u7684\u60c5\u51b5\uff0c\u5e76\u8bf4\u660e\u4e24\u4e2a\u76f8\u4e92\u94fe\u63a5\u7684\u70b9\u4e4b\u95f4\u7684\u8fb9\u6743\uff0c\u4f46\u662f\u4f60\u4e0d\u77e5\u9053\u8fb9\u7684\u989c\u8272\u3002 \u8981\u4f60\u627e\u5230\u4e00\u79cd\u53ef\u80fd\u7684\u65b9\u6848\u4f7f\u5f97\u4f60\u7684\u5f97\u5206\u6700\u5927\uff0c\u5b9a\u4e49\u4f60\u7684\u5f97\u5206\u4e3a\u6240\u6709\u64cd\u4f5c\u5b8c\u4e86\u4e4b\u540e\u7684\u84dd\u8272\u8fb9\u6743\u503c\u4e4b\u548c\u3002 \u8f93\u51fa\u8fd9\u4e2a\u6700\u5927\u7684\u5f97\u5206\u3002 \\(n \\le 5\\times 10^5\\) \u3002 \\(\\text{Solution}\\) \u03c8(\uff40\u2207\u00b4)\u03c8 \u9996\u5148\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u6700\u540e\u7ed9\u51fa\u7684\u60c5\u51b5\u4e00\u5b9a\u662f\u4e00\u9897\u65e0\u6839\u7684\u5e26\u6743\u6811\u3002 \u7136\u540e\u53d1\u73b0\u84dd\u8272\u7684\u8fb9\u4e00\u5b9a\u662f\u4e00\u6761\u7531\u4e09\u4e2a\u8fde\u7eed\u8282\u70b9\u548c\u94fe\u63a5\u4ed6\u4eec\u7684\u4e24\u6761\u8fb9\u6784\u6210\u7684\u4e00\u6761\u94fe\u3002 \u6ce8\u610f\u5230\u9898\u76ee\u4e2d\u8bf4\u84dd\u8272\u8fb9\u53ea\u80fd\u5728\u7ea2\u8272\u8fb9\u7684\u57fa\u7840\u4e0a\u201c\u63d2\u5165\u201d\u6765\u751f\u6210\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u73b0\u5728\u94a6\u5b9a\u4e00\u6761\u84dd\u8272\u94fe \\((u,v,w)\\) \u4e14 \\(w\\) \u662f\u88ab\u63d2\u5165\u5230 \\((u,v)\\) \u7684\u90a3\u4e2a\u8282\u70b9\uff0c \\(w\\) \u4e00\u5b9a\u4e0d\u80fd\u662f\u53e6\u5916\u4e00\u6761\u84dd\u8272\u94fe\u4e2d\u88ab\u201c\u63d2\u5165\u201d\u7684\u70b9\uff08\u6211\u4eec\u79f0\u8fd9\u4e2a\u70b9\u4e3a\u84dd\u8272\u94fe\u7684\u4e2d\u70b9\uff09\u3002 \u6240\u4ee5\uff0c\u5982\u679c\u4e24\u6761\u84dd\u8272\u7684\u94fe\u6709\u91cd\u53e0\u90e8\u5206\uff0c\u65e0\u975e\u4e24\u79cd\u60c5\u51b5\uff1a \u8fd9\u4e24\u6761\u94fe\u5f53\u4e2d\u5206\u522b\u6709\u4e00\u4e2a\u7aef\u70b9\u548c\u53e6\u5916\u4e00\u6761\u94fe\u7684\u90a3\u4e2a\u7aef\u70b9\u662f\u76f8\u8fde\u7684\uff08\u4e24\u7aef\u76f8\u4ea4\uff09\u3002 \u8fd9\u4e24\u6761\u94fe\u5f53\u4e2d\u6709\u4e00\u4e2a\u6761\u94fe\u7684\u4e2d\u70b9\u662f\u53e6\u5916\u4e00\u6761\u94fe\u7684\u7aef\u70b9\uff08\u4e5f\u5c31\u662f\u6ca1\u6709\u4e00\u4e2a\u8282\u70b9\u662f\u540c\u65f6\u505a\u4e24\u6761\u84dd\u8272\u94fe\u7684\u7aef\u70b9\u7684\uff09\u3002 \u6839\u636e\u8fd9\u4e2a\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u63a8\u51fa\u5047\u5b9a\u4e86\u4e00\u4e2a\u6839\u8282\u70b9\u7684\u65f6\u5019\u7684\u7b54\u6848\uff0c\u5e76\u8003\u8651\u4e00\u4e2a \\(\\text{O}(n^2)\\) \u7684\u505a\u6cd5\uff08\u6bcf\u4e2a\u70b9\u8dd1\u4e00\u6b21 dfs\uff09\u3002 \u5047\u8bbe \\(f_{u,0/1}\\) \u8868\u793a \\(u\\) \u4e0d\u662f/\u662f\u4e00\u6761\u84dd\u8272\u94fe\u7684\u4e2d\u70b9\uff0c\u5728\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u5f53\u4e2d\u80fd\u83b7\u5f97\u7684\u6700\u5927\u5206\u6570\u3002 \\(f_{u,0}\\) \u5f88\u597d\u63a8\uff0c\u65e2\u7136\u5b83\u4e0d\u662f\u4e00\u6761\u84dd\u8272\u94fe\u7684\u4e2d\u70b9\uff0c\u5e76\u4e14\u73b0\u5728\u662f\u5728 \\(u\\) \u7684\u5b50\u6811\u5f53\u4e2d\u8003\u8651\uff0c\u90a3\u4e48\u6211\u4eec\u679a\u4e3e \\(u\\) \u7684\u6bcf\u4e00\u4e2a\u513f\u5b50\u4e3a\u4e2d\u70b9\u7684\u60c5\u51b5\u8fdb\u884c\u8f6c\u79fb\u5373\u53ef\uff0c\u5f53\u7136\u4e0d\u8981\u5fd8\u8bb0\u8003\u8651 \\(u\\) \u548c \\(v\\) \u8fde\u7684\u662f\u7ea2\u8272\u8fb9\u7684\u60c5\u51b5\u3002 \\(f_{u,0}=\\sum \\max(f_{v,0},f_{v,1}+w_{u,v})\\) \\(f_{u,1}\\) \u4e5f\u5f88\u597d\u8003\u8651\uff0c\u56e0\u4e3a \\(u\\) \u53ea\u80fd\u662f\u4e00\u6761\u84dd\u8272\u94fe\u7684\u4e2d\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u679a\u4e3e\u4f5c\u4e3a\u8fd9\u4e00\u6761\u84dd\u8272\u94fe\u7684\u7aef\u70b9\u7684\u513f\u5b50 \\(v\\) \uff0c\u5176\u4ed6\u7684\u513f\u5b50\u53ef\u4ee5\u7528 \\(u\\) \u4e0d\u662f\u4e2d\u70b9\u7684\u60c5\u51b5\u8f6c\u79fb\uff08\u6839\u636e\u4e0a\u9762\u7684\u60c5\u51b52\uff09\u3002 \u6240\u4ee5\u8f6c\u79fb\u7684\u65f6\u5019\u53ef\u4ee5\u5229\u7528 \\(f_{u,0}\\) \u6263\u6389\u5f53\u524d\u513f\u5b50 \\(v\\) \u5728 \\(f_{u,0}\\) \u5f53\u4e2d\u505a\u7684\u8d21\u732e \\(\\max(f_{v,0},f_{v,1}+w_{u,v})\\) \uff0c\u518d\u52a0\u4e0a \\(v\\) \u5728\u5f53\u524d\u60c5\u51b5\u505a\u7684\u8d21\u732e \\(f_{v,0}+w_{u,v}\\) \u3002 \\(f_{u,1}=f_{u,0}+\\max\\{f_{v,0}+w_{u,v}-\\max(f_{v,0},f_{v,1}+w_{u,v})\\}\\) \u597d\uff0c\u73b0\u5728\u6211\u4eec\u5bf9\u6bcf\u4e00\u4e2a\u70b9\u4e3a\u6839\u7684\u60c5\u51b5\u90fd\u505a\u4e00\u6b21DP\uff0c\u5c31\u53ef\u4ee5\u62ff\u5230 57pts \u7684\u597d\u6210\u7ee9\u4e86\u3002 \u53d1\u73b0\u8fd9\u4e2a\u505a\u6cd5\u975e\u5e38\u7b26\u5408\u6362\u6839DP\u7684\u5f62\u5f0f\uff0c\u6839\u8282\u70b9\u7684\u53d8\u5316\u4f1a\u5bf9\u7b54\u6848\u9020\u6210\u5f71\u54cd\uff0c\u5e76\u4e14\u66b4\u529b\u505a\u6cd5\u662f\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6839\u8fdb\u884cDP\u3002 \u6240\u4ee5\u8003\u8651\u628a\u539f\u672c \\(\\text{O}(n)\\) \u7684\u66b4\u529b\u6362\u6839\u4f18\u5316\u5230 \\(\\text{O}(1)\\) \u3002 \u73b0\u5728\uff0c\u5047\u8bbe\u6839\u4ece\u7236\u4eb2\u8282\u70b9 \\(u\\) \u53d8\u6210\u4e86\u513f\u5b50\u8282\u70b9 \\(v\\) \uff0c\u4f1a\u6709\u4ec0\u4e48\u5f71\u54cd\u5462\uff1f \u660e\u663e\uff0c \\(v\\) \u5728\u7b2c\u4e00\u6b21 dfs \u7684\u65f6\u5019\u5bf9 \\(u\\) \u7684\u8d21\u732e\u6ca1\u6709\u4e86\uff0c\u800c\u8f6c\u79fb\u65b9\u7a0b\u91cc\u9762\u53c8\u6709\u6700\u5927\u503c\u3002 \u6240\u4ee5\u6211\u4eec\u4e3a\u4e86\u8f6c\u79fb\uff0c\u9700\u8981\u8bb0\u5f55\u6b21\u5927\u503c\uff08\u8fd9\u662f\u4e00\u4e2a\u5f88\u7ecf\u5178\u7684 trick\uff09\u3002\u4e5f\u5c31\u662f\u5728\u629b\u6389 \\(v\\) \u4e4b\u540e\uff0c\u5728 \\(u\\) \u7684\u513f\u5b50\u5f53\u4e2d\u8d21\u732e\u6700\u5927\u7684\u90a3\u4e00\u4e2a\u3002 \u56e0\u4e3a\u6362\u6839\u4e4b\u540e\uff0c \\(u\\) \u4f1a\u53d8\u6210 \\(v\\) \u7684\u7236\u4eb2\uff0c\u90a3\u4e48\u76f8\u5bf9\u7684\uff0c\u4ece \\(u\\) \u7684\u72b6\u6001\u8f6c\u79fb\u5230 \\(v\\) \uff0c\u8ba1\u7b97 \\(u\\) \u73b0\u5728\u5bf9 \\(v\\) \u7684\u8d21\u732e\u65f6\uff0c\u9700\u8981\u53bb\u9664 \\(v\\) \u7ed9 \\(u\\) \u7684\u8d21\u732e\uff0c\u76f4\u63a5\u505a\u52a0\u51cf\u6cd5\u4e0d\u597d\u7ef4\u62a4\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u76f4\u63a5\u7ef4\u62a4\u6263\u6389\u8d21\u732e\u4e4b\u540e\u7684\u503c\u3002 \u6211\u4eec\u8bbe \\(dp_{u,0/1,v}\\) \u8868\u793a\u5728\u8f6c\u79fb \\(f_{u,0/1}\\) \u8fd9\u4e2a\u72b6\u6001\u7684\u65f6\u5019\uff0c\u4e0d\u8003\u8651\u4ee5 \\(v\\) \u4e3a\u6839\u7684\u5b50\u6811 \uff0c\u5728 \\(u\\) \u7684\u5b50\u6811\u5f53\u4e2d\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u5206\u6570\u3002 \u56e0\u4e3a\u5728 \\(f_{u,0}\\) \u8fd9\u4e2a\u72b6\u6001\u7684\u65f6\u5019\uff0c \\(v\\) \u7684\u8d21\u732e\u5c31\u662f \\(\\max(f_{v,0},f_{v,1}+w_{u,v})\\) \uff0c\u5e76\u4e14 \\(f_{u,0}\\) \u662f\u5bf9\u6bcf\u4e2a\u513f\u5b50\u7684\u8d21\u732e\u6c42\u548c\uff0c\u6240\u4ee5\u4e0d\u6d89\u53ca\u5230\u6700\u5927\u503c\u53d8\u5316\u7684\u95ee\u9898\uff0c\u76f4\u63a5\u5728 \\(f_{u,0}\\) \u5f53\u4e2d\u51cf\u53bb\u5373\u53ef\u3002 \\(dp_{u,0/1,v}=f_{u,0}-\\max(f_{v,0},f_{v,1}+w_{u,v})\\) \u800c\u8003\u8651 \\(f_{u,1}\\) \u7684\u65f6\u5019\uff0c \\(v\\) \u6709\u53ef\u80fd\u7ed9 \\(f_{u,1}\\) \u8d21\u732e\u6700\u5927\u7684 \\(f_{v,0}+w_{u,v}-\\max(f_{v,0},f_{v,1}+w_{u,v})\\) \u3002 \u6240\u4ee5\u8fd8\u9700\u8981\u8bb0\u5f55\u6700\u5927\u503c\u6b21\u5927\u503c\u6765\u8fdb\u884c\u8f6c\u79fb\u3002 \\(dp_{u,0/1,v}=\\begin{cases} dp_{u,0,v}+max_1 & \\text{trans}_v \\ \\text{is not the max contribute}\\\\ dp_{u,0,v}+max_2 & \\text{otherwise.}\\end{cases}\\) \u5176\u4e2d \\(trans_v=f_{v,0}+w_{u,v}-\\max(f_{v,0},f_{v,1}+w_{u,v})\\) \\(max_1,max_2\\) \u662f\u5728\u7b2c\u4e00\u6b21 dfs \u7684\u65f6\u5019\u8bb0\u5f55\u7684 \\(u\\) \u6240\u6709\u7684\u513f\u5b50 \\(trans_v\\) \u7684\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u3002 \u7136\u540e\u6362\u6839\u7684\u65f6\u5019\u679a\u4e3e\u6bcf\u4e00\u4e2a\u70b9\u7684\u513f\u5b50\uff0c\u5148\u628a \\(f_{u,0} = dp_{u,0,v},f_{u,1} = dp_{u,1,v}\\) \u3002 \u7136\u540e\u91cd\u65b0\u8ba1\u7b97 \\(u\\) \u5bf9 \\(v\\) \u7684\u8d21\u732e\uff08\u6362\u6839\uff09\uff0c\u4e0d\u8fc7\u56e0\u4e3a \\(fa\\) \u5728\u5f53\u524d\u60c5\u51b5\u53d8\u6210\u4e86 \\(u\\) \u7684\u513f\u5b50\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5148\u628a \\(fa\\) \u5bf9 \\(u\\) \u7684\u8d21\u732e\u8ba1\u7b97\u51fa\u6765\u3002 \u8ba1\u7b97\u5b8c\u4e86\u4e4b\u540e\u5728\u7b54\u6848\u91cc\u53d6\u4e2a\u6700\u5927\u503c\u5373\u53ef\u3002 \\(\\text{Code}\\) \u03c8(\uff40\u2207\u00b4)\u03c8 \u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 #include <bits/stdc++.h> using namespace std ; constexpr int si = 5e5 + 10 ; constexpr int inf = 0x3f3f3f3f ; int n ; struct Tree { int head , ver , Next , w ; } e [ si << 1 ]; int tot = 0 ; inline void add ( int u , int v , int w ){ e [ ++ tot ]. ver = v , e [ tot ]. Next = e [ u ]. head ; e [ tot ]. w = w , e [ u ]. head = tot ; } int father [ si ], len [ si ]; // father \u548c len \u662f\u65b9\u4fbf dfs2 \u7684\u8f6c\u79fb\u7528\u7684\u3002 int f [ si ][ 2 ]; std :: vector < int > son [ si ]; // \u8bb0\u5f55\u513f\u5b50\uff0c\u4fbf\u4e8e\u8f6c\u79fb std :: vector < int > dp [ si ][ 2 ]; std :: vector < int > mx [ si ]; // \u8bb0\u5f55 u \u7684\u6bcf\u4e00\u4e2a\u513f\u5b50\u7684 trans\uff0c\u5982\u679c\u5f53\u524d\u513f\u5b50\u7684 trans \u662f\u6700\u5927\u7684\uff0c\u90a3\u4e48\u66ff\u6362\u6210\u6b21\u5927\u503c\u518d\u8ba1\u7b97\u3002 inline void dfs1 ( int u , int fa ){ int max1 , max2 ; max1 = max2 =- inf ; f [ u ][ 0 ] = 0 , f [ u ][ 1 ] =- inf ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( v == fa ) continue ; len [ v ] = w , father [ v ] = u , son [ u ]. push_back ( v ); // \u8bb0\u5f55\u4fe1\u606f dfs1 ( v , u ), f [ u ][ 0 ] += max ( f [ v ][ 0 ], f [ v ][ 1 ] + w ); // \u8f6c\u79fb int trans = f [ v ][ 0 ] + w - max ( f [ v ][ 0 ], f [ v ][ 1 ] + len [ v ]); if ( trans > max1 ) max2 = max ( max2 , max1 ), max1 = trans ; else max2 = max ( trans , max2 ); // \u8bb0\u5f55\u6b21\u5927\u503c\u3002 } f [ u ][ 1 ] = f [ u ][ 0 ] + max1 ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( v == fa ) continue ; dp [ u ][ 0 ]. push_back ( f [ u ][ 0 ] - max ( f [ v ][ 0 ], f [ v ][ 1 ] + w )); int trans = f [ v ][ 0 ] + w - max ( f [ v ][ 0 ], f [ v ][ 1 ] + len [ v ]); if ( trans == max1 ) dp [ u ][ 1 ]. push_back ( dp [ u ][ 0 ]. back () + max2 ), mx [ u ]. push_back ( max2 ); else dp [ u ][ 1 ]. push_back ( dp [ u ][ 0 ]. back () + max1 ), mx [ u ]. push_back ( max1 ); } return ; } int res = 0 ; inline void dfs2 ( int u ){ for ( register unsigned i = 0 ; i < son [ u ]. size (); ++ i ){ f [ u ][ 0 ] = dp [ u ][ 0 ][ i ], f [ u ][ 1 ] = dp [ u ][ 1 ][ i ]; if ( father [ u ]){ f [ u ][ 0 ] += max ( f [ father [ u ]][ 0 ], f [ father [ u ]][ 1 ] + len [ u ]); f [ u ][ 1 ] = f [ u ][ 0 ] + max ( mx [ u ][ i ], f [ father [ u ]][ 0 ] + len [ u ] - max ( f [ father [ u ]][ 0 ], f [ father [ u ]][ 1 ] + len [ u ])); // \u6bcf\u6b21\u90fd\u9700\u8981\u518d\u7b97\u4e00\u904d\uff08\u5f53\u7136\u4e5f\u53ef\u4ee5\u53ea\u7b97\u4e00\u6b21\u7136\u540e\u8bb0\u4e0b\u6765\uff09 // \u73b0\u5728\u4e3a\u4e86\u8ba1\u7b97 fa \u5bf9 u \u7684\u8d21\u732e\uff0c\u5148\u628a u \u6682\u65f6\u5f53\u4f5c\u6839\u8282\u70b9\uff0c\u4ece\u5b83\u7684\u7236\u4eb2\u548c\u539f\u6765\u7684\u513f\u5b50\u5f53\u4e2d\u8f6c\u79fb\u3002 // \u76f8\u5f53\u4e8e\u662f\u628a fa \u6dfb\u52a0\u5230\u4e86 u \u7684\u513f\u5b50\u5f53\u4e2d\uff0c\u518d\u8dd1\u4e00\u6b21\u7c7b\u4f3c dfs1 \u91cc\u9762\u7684 dp \u7684\u8fc7\u7a0b\u6765\u66f4\u65b0\u3002 } res = max ( res , f [ son [ u ][ i ]][ 0 ] + max ( f [ u ][ 0 ], f [ u ][ 1 ] + len [ son [ u ][ i ]])); // \u8bb0\u5f55\u5f53\u524d\u60c5\u51b5\u7684\u7b54\u6848 dfs2 ( son [ u ][ i ]); } return ; } int main (){ scanf ( \"%d\" , & n ); for ( register int i = 1 , u , v , w ; i < n ; ++ i ){ scanf ( \"%d%d%d\" , & u , & v , & w ); add ( u , v , w ), add ( v , u , w ); } dfs1 ( 1 , 0 ), dfs2 ( 1 ); return printf ( \"%d \\n \" , res ), 0 ; } \u8bb0\u5f55\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u7684\u65f6\u5019\u4e5f\u53ef\u4ee5\u5229\u7528 std::multiset \uff0c\u628a\u4ece\u4e0b\u5230\u4e0a\u7684\u65f6\u5019\u628a\u6240\u6709 \\(trans\\) \u6254\u8fdb\u53bb\uff0c\u7136\u540e\u4ece\u4e0a\u5230\u4e0b\u8f6c\u79fb\u7684\u65f6\u5019\u5224\u5f53\u524d\u7684 \\(trans\\) \u662f\u4e0d\u662f multiset \u5f53\u524d\u7684\u6700\u5927\u503c\u5c31\u53ef\u4ee5\uff0c\u5982\u679c\u662f\uff0c\u90a3\u4e48\u5220\u9664\u8fd9\u4e2a\u503c\u5e76\u7528\u6b21\u5927\u503c\u66f4\u65b0\uff0c\u53cd\u4e4b\u76f4\u63a5\u7528\u6700\u5927\u503c\u66f4\u65b0\u5373\u53ef\u3002 \u4e0d\u8fc7\u590d\u6742\u5ea6\u4f1a\u591a\u4e00\u4e2a \\(\\log\\) \u3002 1 Tag : \u6811 / \u6811\u5f62DP / \u6362\u6839DP","title":"UOJ105"},{"location":"sol/pro/uoj105/#uoj105-beads-and-wires","text":"\u4e00\u9053\u4e2a\u4eba\u8ba4\u4e3a\u975e\u5e38\u68d2\u7684\u9898\uff0c\u5361\u4e86\u6211\u63a5\u8fd1\u4e00\u5929\u7684\u65f6\u95f4\u3002 \u867d\u7136YL\u6012\u65a5\u8fd9\u9898\u5957\u8def \uff0c\u4e0d\u8fc7\u4ed6\u4e5f\u8bf4\u8fd9\u9898\u60f3\u8d77\u6765\u5bb9\u6613\uff0c\u63a8\u8d77\u6765\u4e00\u822c\uff0c\u5b9e\u73b0\u5f88\u6076\u5fc3\uff08","title":"UOJ105 Beads and wires"},{"location":"sol/pro/uoj105/#textdecription","text":"\u95ee\u9898\uff1a\u4f60\u6709 \\(n\\) \u4e2a\u73e0\u5b50\uff0c\u521d\u59cb\u4f60\u53ef\u4ee5\u9009\u4efb\u610f\u7684\u4e00\u4e2a\u73e0\u5b50\uff0c\u4e4b\u540e\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u7684\u64cd\u4f5c\uff1a 1. \u628a\u4e00\u9897\u65b0\u7684\u73e0\u5b50 \\(v\\) \u548c\u5df2\u7ecf\u9009\u4e86\u7684\u67d0\u4e00\u4e2a\u73e0\u5b50 \\(u\\) \u7528\u7ea2\u8272\u8fb9 (u,v) \u76f8\u8fde\u3002 2. \u628a\u4e00\u9897\u65b0\u7684\u73e0\u5b50 \\(w\\) \u63d2\u5165\u5230\u7528\u7ea2\u8272\u8fb9\u94fe\u63a5\u7684\u4e24\u4e2a\u8282\u70b9 \\(u,v\\) \u5f53\u4e2d\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u5c06 \\(u,w\\) \u548c \\(v,w\\) \u5206\u522b\u7528\u84dd\u8272\u8fb9\u76f8\u8fde\uff0c\u7136\u540e\u5220\u9664 \\((u,v)\\) \u8fd9\u6761\u7ea2\u8272\u8fb9\u3002 \u73b0\u5728\u7ed9\u5b9a\u4f60\u6240\u6709\u64cd\u4f5c\u5b8c\u4e86\u4e4b\u540e\u7684\u60c5\u51b5\uff0c\u5e76\u8bf4\u660e\u4e24\u4e2a\u76f8\u4e92\u94fe\u63a5\u7684\u70b9\u4e4b\u95f4\u7684\u8fb9\u6743\uff0c\u4f46\u662f\u4f60\u4e0d\u77e5\u9053\u8fb9\u7684\u989c\u8272\u3002 \u8981\u4f60\u627e\u5230\u4e00\u79cd\u53ef\u80fd\u7684\u65b9\u6848\u4f7f\u5f97\u4f60\u7684\u5f97\u5206\u6700\u5927\uff0c\u5b9a\u4e49\u4f60\u7684\u5f97\u5206\u4e3a\u6240\u6709\u64cd\u4f5c\u5b8c\u4e86\u4e4b\u540e\u7684\u84dd\u8272\u8fb9\u6743\u503c\u4e4b\u548c\u3002 \u8f93\u51fa\u8fd9\u4e2a\u6700\u5927\u7684\u5f97\u5206\u3002 \\(n \\le 5\\times 10^5\\) \u3002","title":"\\(\\text{Decription}\\)"},{"location":"sol/pro/uoj105/#textsolution","text":"\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u6700\u540e\u7ed9\u51fa\u7684\u60c5\u51b5\u4e00\u5b9a\u662f\u4e00\u9897\u65e0\u6839\u7684\u5e26\u6743\u6811\u3002 \u7136\u540e\u53d1\u73b0\u84dd\u8272\u7684\u8fb9\u4e00\u5b9a\u662f\u4e00\u6761\u7531\u4e09\u4e2a\u8fde\u7eed\u8282\u70b9\u548c\u94fe\u63a5\u4ed6\u4eec\u7684\u4e24\u6761\u8fb9\u6784\u6210\u7684\u4e00\u6761\u94fe\u3002 \u6ce8\u610f\u5230\u9898\u76ee\u4e2d\u8bf4\u84dd\u8272\u8fb9\u53ea\u80fd\u5728\u7ea2\u8272\u8fb9\u7684\u57fa\u7840\u4e0a\u201c\u63d2\u5165\u201d\u6765\u751f\u6210\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u73b0\u5728\u94a6\u5b9a\u4e00\u6761\u84dd\u8272\u94fe \\((u,v,w)\\) \u4e14 \\(w\\) \u662f\u88ab\u63d2\u5165\u5230 \\((u,v)\\) \u7684\u90a3\u4e2a\u8282\u70b9\uff0c \\(w\\) \u4e00\u5b9a\u4e0d\u80fd\u662f\u53e6\u5916\u4e00\u6761\u84dd\u8272\u94fe\u4e2d\u88ab\u201c\u63d2\u5165\u201d\u7684\u70b9\uff08\u6211\u4eec\u79f0\u8fd9\u4e2a\u70b9\u4e3a\u84dd\u8272\u94fe\u7684\u4e2d\u70b9\uff09\u3002 \u6240\u4ee5\uff0c\u5982\u679c\u4e24\u6761\u84dd\u8272\u7684\u94fe\u6709\u91cd\u53e0\u90e8\u5206\uff0c\u65e0\u975e\u4e24\u79cd\u60c5\u51b5\uff1a \u8fd9\u4e24\u6761\u94fe\u5f53\u4e2d\u5206\u522b\u6709\u4e00\u4e2a\u7aef\u70b9\u548c\u53e6\u5916\u4e00\u6761\u94fe\u7684\u90a3\u4e2a\u7aef\u70b9\u662f\u76f8\u8fde\u7684\uff08\u4e24\u7aef\u76f8\u4ea4\uff09\u3002 \u8fd9\u4e24\u6761\u94fe\u5f53\u4e2d\u6709\u4e00\u4e2a\u6761\u94fe\u7684\u4e2d\u70b9\u662f\u53e6\u5916\u4e00\u6761\u94fe\u7684\u7aef\u70b9\uff08\u4e5f\u5c31\u662f\u6ca1\u6709\u4e00\u4e2a\u8282\u70b9\u662f\u540c\u65f6\u505a\u4e24\u6761\u84dd\u8272\u94fe\u7684\u7aef\u70b9\u7684\uff09\u3002 \u6839\u636e\u8fd9\u4e2a\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u63a8\u51fa\u5047\u5b9a\u4e86\u4e00\u4e2a\u6839\u8282\u70b9\u7684\u65f6\u5019\u7684\u7b54\u6848\uff0c\u5e76\u8003\u8651\u4e00\u4e2a \\(\\text{O}(n^2)\\) \u7684\u505a\u6cd5\uff08\u6bcf\u4e2a\u70b9\u8dd1\u4e00\u6b21 dfs\uff09\u3002 \u5047\u8bbe \\(f_{u,0/1}\\) \u8868\u793a \\(u\\) \u4e0d\u662f/\u662f\u4e00\u6761\u84dd\u8272\u94fe\u7684\u4e2d\u70b9\uff0c\u5728\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u5f53\u4e2d\u80fd\u83b7\u5f97\u7684\u6700\u5927\u5206\u6570\u3002 \\(f_{u,0}\\) \u5f88\u597d\u63a8\uff0c\u65e2\u7136\u5b83\u4e0d\u662f\u4e00\u6761\u84dd\u8272\u94fe\u7684\u4e2d\u70b9\uff0c\u5e76\u4e14\u73b0\u5728\u662f\u5728 \\(u\\) \u7684\u5b50\u6811\u5f53\u4e2d\u8003\u8651\uff0c\u90a3\u4e48\u6211\u4eec\u679a\u4e3e \\(u\\) \u7684\u6bcf\u4e00\u4e2a\u513f\u5b50\u4e3a\u4e2d\u70b9\u7684\u60c5\u51b5\u8fdb\u884c\u8f6c\u79fb\u5373\u53ef\uff0c\u5f53\u7136\u4e0d\u8981\u5fd8\u8bb0\u8003\u8651 \\(u\\) \u548c \\(v\\) \u8fde\u7684\u662f\u7ea2\u8272\u8fb9\u7684\u60c5\u51b5\u3002 \\(f_{u,0}=\\sum \\max(f_{v,0},f_{v,1}+w_{u,v})\\) \\(f_{u,1}\\) \u4e5f\u5f88\u597d\u8003\u8651\uff0c\u56e0\u4e3a \\(u\\) \u53ea\u80fd\u662f\u4e00\u6761\u84dd\u8272\u94fe\u7684\u4e2d\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u679a\u4e3e\u4f5c\u4e3a\u8fd9\u4e00\u6761\u84dd\u8272\u94fe\u7684\u7aef\u70b9\u7684\u513f\u5b50 \\(v\\) \uff0c\u5176\u4ed6\u7684\u513f\u5b50\u53ef\u4ee5\u7528 \\(u\\) \u4e0d\u662f\u4e2d\u70b9\u7684\u60c5\u51b5\u8f6c\u79fb\uff08\u6839\u636e\u4e0a\u9762\u7684\u60c5\u51b52\uff09\u3002 \u6240\u4ee5\u8f6c\u79fb\u7684\u65f6\u5019\u53ef\u4ee5\u5229\u7528 \\(f_{u,0}\\) \u6263\u6389\u5f53\u524d\u513f\u5b50 \\(v\\) \u5728 \\(f_{u,0}\\) \u5f53\u4e2d\u505a\u7684\u8d21\u732e \\(\\max(f_{v,0},f_{v,1}+w_{u,v})\\) \uff0c\u518d\u52a0\u4e0a \\(v\\) \u5728\u5f53\u524d\u60c5\u51b5\u505a\u7684\u8d21\u732e \\(f_{v,0}+w_{u,v}\\) \u3002 \\(f_{u,1}=f_{u,0}+\\max\\{f_{v,0}+w_{u,v}-\\max(f_{v,0},f_{v,1}+w_{u,v})\\}\\) \u597d\uff0c\u73b0\u5728\u6211\u4eec\u5bf9\u6bcf\u4e00\u4e2a\u70b9\u4e3a\u6839\u7684\u60c5\u51b5\u90fd\u505a\u4e00\u6b21DP\uff0c\u5c31\u53ef\u4ee5\u62ff\u5230 57pts \u7684\u597d\u6210\u7ee9\u4e86\u3002 \u53d1\u73b0\u8fd9\u4e2a\u505a\u6cd5\u975e\u5e38\u7b26\u5408\u6362\u6839DP\u7684\u5f62\u5f0f\uff0c\u6839\u8282\u70b9\u7684\u53d8\u5316\u4f1a\u5bf9\u7b54\u6848\u9020\u6210\u5f71\u54cd\uff0c\u5e76\u4e14\u66b4\u529b\u505a\u6cd5\u662f\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6839\u8fdb\u884cDP\u3002 \u6240\u4ee5\u8003\u8651\u628a\u539f\u672c \\(\\text{O}(n)\\) \u7684\u66b4\u529b\u6362\u6839\u4f18\u5316\u5230 \\(\\text{O}(1)\\) \u3002 \u73b0\u5728\uff0c\u5047\u8bbe\u6839\u4ece\u7236\u4eb2\u8282\u70b9 \\(u\\) \u53d8\u6210\u4e86\u513f\u5b50\u8282\u70b9 \\(v\\) \uff0c\u4f1a\u6709\u4ec0\u4e48\u5f71\u54cd\u5462\uff1f \u660e\u663e\uff0c \\(v\\) \u5728\u7b2c\u4e00\u6b21 dfs \u7684\u65f6\u5019\u5bf9 \\(u\\) \u7684\u8d21\u732e\u6ca1\u6709\u4e86\uff0c\u800c\u8f6c\u79fb\u65b9\u7a0b\u91cc\u9762\u53c8\u6709\u6700\u5927\u503c\u3002 \u6240\u4ee5\u6211\u4eec\u4e3a\u4e86\u8f6c\u79fb\uff0c\u9700\u8981\u8bb0\u5f55\u6b21\u5927\u503c\uff08\u8fd9\u662f\u4e00\u4e2a\u5f88\u7ecf\u5178\u7684 trick\uff09\u3002\u4e5f\u5c31\u662f\u5728\u629b\u6389 \\(v\\) \u4e4b\u540e\uff0c\u5728 \\(u\\) \u7684\u513f\u5b50\u5f53\u4e2d\u8d21\u732e\u6700\u5927\u7684\u90a3\u4e00\u4e2a\u3002 \u56e0\u4e3a\u6362\u6839\u4e4b\u540e\uff0c \\(u\\) \u4f1a\u53d8\u6210 \\(v\\) \u7684\u7236\u4eb2\uff0c\u90a3\u4e48\u76f8\u5bf9\u7684\uff0c\u4ece \\(u\\) \u7684\u72b6\u6001\u8f6c\u79fb\u5230 \\(v\\) \uff0c\u8ba1\u7b97 \\(u\\) \u73b0\u5728\u5bf9 \\(v\\) \u7684\u8d21\u732e\u65f6\uff0c\u9700\u8981\u53bb\u9664 \\(v\\) \u7ed9 \\(u\\) \u7684\u8d21\u732e\uff0c\u76f4\u63a5\u505a\u52a0\u51cf\u6cd5\u4e0d\u597d\u7ef4\u62a4\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u76f4\u63a5\u7ef4\u62a4\u6263\u6389\u8d21\u732e\u4e4b\u540e\u7684\u503c\u3002 \u6211\u4eec\u8bbe \\(dp_{u,0/1,v}\\) \u8868\u793a\u5728\u8f6c\u79fb \\(f_{u,0/1}\\) \u8fd9\u4e2a\u72b6\u6001\u7684\u65f6\u5019\uff0c\u4e0d\u8003\u8651\u4ee5 \\(v\\) \u4e3a\u6839\u7684\u5b50\u6811 \uff0c\u5728 \\(u\\) \u7684\u5b50\u6811\u5f53\u4e2d\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u5206\u6570\u3002 \u56e0\u4e3a\u5728 \\(f_{u,0}\\) \u8fd9\u4e2a\u72b6\u6001\u7684\u65f6\u5019\uff0c \\(v\\) \u7684\u8d21\u732e\u5c31\u662f \\(\\max(f_{v,0},f_{v,1}+w_{u,v})\\) \uff0c\u5e76\u4e14 \\(f_{u,0}\\) \u662f\u5bf9\u6bcf\u4e2a\u513f\u5b50\u7684\u8d21\u732e\u6c42\u548c\uff0c\u6240\u4ee5\u4e0d\u6d89\u53ca\u5230\u6700\u5927\u503c\u53d8\u5316\u7684\u95ee\u9898\uff0c\u76f4\u63a5\u5728 \\(f_{u,0}\\) \u5f53\u4e2d\u51cf\u53bb\u5373\u53ef\u3002 \\(dp_{u,0/1,v}=f_{u,0}-\\max(f_{v,0},f_{v,1}+w_{u,v})\\) \u800c\u8003\u8651 \\(f_{u,1}\\) \u7684\u65f6\u5019\uff0c \\(v\\) \u6709\u53ef\u80fd\u7ed9 \\(f_{u,1}\\) \u8d21\u732e\u6700\u5927\u7684 \\(f_{v,0}+w_{u,v}-\\max(f_{v,0},f_{v,1}+w_{u,v})\\) \u3002 \u6240\u4ee5\u8fd8\u9700\u8981\u8bb0\u5f55\u6700\u5927\u503c\u6b21\u5927\u503c\u6765\u8fdb\u884c\u8f6c\u79fb\u3002 \\(dp_{u,0/1,v}=\\begin{cases} dp_{u,0,v}+max_1 & \\text{trans}_v \\ \\text{is not the max contribute}\\\\ dp_{u,0,v}+max_2 & \\text{otherwise.}\\end{cases}\\) \u5176\u4e2d \\(trans_v=f_{v,0}+w_{u,v}-\\max(f_{v,0},f_{v,1}+w_{u,v})\\) \\(max_1,max_2\\) \u662f\u5728\u7b2c\u4e00\u6b21 dfs \u7684\u65f6\u5019\u8bb0\u5f55\u7684 \\(u\\) \u6240\u6709\u7684\u513f\u5b50 \\(trans_v\\) \u7684\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u3002 \u7136\u540e\u6362\u6839\u7684\u65f6\u5019\u679a\u4e3e\u6bcf\u4e00\u4e2a\u70b9\u7684\u513f\u5b50\uff0c\u5148\u628a \\(f_{u,0} = dp_{u,0,v},f_{u,1} = dp_{u,1,v}\\) \u3002 \u7136\u540e\u91cd\u65b0\u8ba1\u7b97 \\(u\\) \u5bf9 \\(v\\) \u7684\u8d21\u732e\uff08\u6362\u6839\uff09\uff0c\u4e0d\u8fc7\u56e0\u4e3a \\(fa\\) \u5728\u5f53\u524d\u60c5\u51b5\u53d8\u6210\u4e86 \\(u\\) \u7684\u513f\u5b50\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5148\u628a \\(fa\\) \u5bf9 \\(u\\) \u7684\u8d21\u732e\u8ba1\u7b97\u51fa\u6765\u3002 \u8ba1\u7b97\u5b8c\u4e86\u4e4b\u540e\u5728\u7b54\u6848\u91cc\u53d6\u4e2a\u6700\u5927\u503c\u5373\u53ef\u3002","title":"\\(\\text{Solution}\\)"},{"location":"sol/pro/uoj105/#textcode","text":"\u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 #include <bits/stdc++.h> using namespace std ; constexpr int si = 5e5 + 10 ; constexpr int inf = 0x3f3f3f3f ; int n ; struct Tree { int head , ver , Next , w ; } e [ si << 1 ]; int tot = 0 ; inline void add ( int u , int v , int w ){ e [ ++ tot ]. ver = v , e [ tot ]. Next = e [ u ]. head ; e [ tot ]. w = w , e [ u ]. head = tot ; } int father [ si ], len [ si ]; // father \u548c len \u662f\u65b9\u4fbf dfs2 \u7684\u8f6c\u79fb\u7528\u7684\u3002 int f [ si ][ 2 ]; std :: vector < int > son [ si ]; // \u8bb0\u5f55\u513f\u5b50\uff0c\u4fbf\u4e8e\u8f6c\u79fb std :: vector < int > dp [ si ][ 2 ]; std :: vector < int > mx [ si ]; // \u8bb0\u5f55 u \u7684\u6bcf\u4e00\u4e2a\u513f\u5b50\u7684 trans\uff0c\u5982\u679c\u5f53\u524d\u513f\u5b50\u7684 trans \u662f\u6700\u5927\u7684\uff0c\u90a3\u4e48\u66ff\u6362\u6210\u6b21\u5927\u503c\u518d\u8ba1\u7b97\u3002 inline void dfs1 ( int u , int fa ){ int max1 , max2 ; max1 = max2 =- inf ; f [ u ][ 0 ] = 0 , f [ u ][ 1 ] =- inf ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( v == fa ) continue ; len [ v ] = w , father [ v ] = u , son [ u ]. push_back ( v ); // \u8bb0\u5f55\u4fe1\u606f dfs1 ( v , u ), f [ u ][ 0 ] += max ( f [ v ][ 0 ], f [ v ][ 1 ] + w ); // \u8f6c\u79fb int trans = f [ v ][ 0 ] + w - max ( f [ v ][ 0 ], f [ v ][ 1 ] + len [ v ]); if ( trans > max1 ) max2 = max ( max2 , max1 ), max1 = trans ; else max2 = max ( trans , max2 ); // \u8bb0\u5f55\u6b21\u5927\u503c\u3002 } f [ u ][ 1 ] = f [ u ][ 0 ] + max1 ; for ( register int i = e [ u ]. head ; i ; i = e [ i ]. Next ){ int v = e [ i ]. ver , w = e [ i ]. w ; if ( v == fa ) continue ; dp [ u ][ 0 ]. push_back ( f [ u ][ 0 ] - max ( f [ v ][ 0 ], f [ v ][ 1 ] + w )); int trans = f [ v ][ 0 ] + w - max ( f [ v ][ 0 ], f [ v ][ 1 ] + len [ v ]); if ( trans == max1 ) dp [ u ][ 1 ]. push_back ( dp [ u ][ 0 ]. back () + max2 ), mx [ u ]. push_back ( max2 ); else dp [ u ][ 1 ]. push_back ( dp [ u ][ 0 ]. back () + max1 ), mx [ u ]. push_back ( max1 ); } return ; } int res = 0 ; inline void dfs2 ( int u ){ for ( register unsigned i = 0 ; i < son [ u ]. size (); ++ i ){ f [ u ][ 0 ] = dp [ u ][ 0 ][ i ], f [ u ][ 1 ] = dp [ u ][ 1 ][ i ]; if ( father [ u ]){ f [ u ][ 0 ] += max ( f [ father [ u ]][ 0 ], f [ father [ u ]][ 1 ] + len [ u ]); f [ u ][ 1 ] = f [ u ][ 0 ] + max ( mx [ u ][ i ], f [ father [ u ]][ 0 ] + len [ u ] - max ( f [ father [ u ]][ 0 ], f [ father [ u ]][ 1 ] + len [ u ])); // \u6bcf\u6b21\u90fd\u9700\u8981\u518d\u7b97\u4e00\u904d\uff08\u5f53\u7136\u4e5f\u53ef\u4ee5\u53ea\u7b97\u4e00\u6b21\u7136\u540e\u8bb0\u4e0b\u6765\uff09 // \u73b0\u5728\u4e3a\u4e86\u8ba1\u7b97 fa \u5bf9 u \u7684\u8d21\u732e\uff0c\u5148\u628a u \u6682\u65f6\u5f53\u4f5c\u6839\u8282\u70b9\uff0c\u4ece\u5b83\u7684\u7236\u4eb2\u548c\u539f\u6765\u7684\u513f\u5b50\u5f53\u4e2d\u8f6c\u79fb\u3002 // \u76f8\u5f53\u4e8e\u662f\u628a fa \u6dfb\u52a0\u5230\u4e86 u \u7684\u513f\u5b50\u5f53\u4e2d\uff0c\u518d\u8dd1\u4e00\u6b21\u7c7b\u4f3c dfs1 \u91cc\u9762\u7684 dp \u7684\u8fc7\u7a0b\u6765\u66f4\u65b0\u3002 } res = max ( res , f [ son [ u ][ i ]][ 0 ] + max ( f [ u ][ 0 ], f [ u ][ 1 ] + len [ son [ u ][ i ]])); // \u8bb0\u5f55\u5f53\u524d\u60c5\u51b5\u7684\u7b54\u6848 dfs2 ( son [ u ][ i ]); } return ; } int main (){ scanf ( \"%d\" , & n ); for ( register int i = 1 , u , v , w ; i < n ; ++ i ){ scanf ( \"%d%d%d\" , & u , & v , & w ); add ( u , v , w ), add ( v , u , w ); } dfs1 ( 1 , 0 ), dfs2 ( 1 ); return printf ( \"%d \\n \" , res ), 0 ; } \u8bb0\u5f55\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u7684\u65f6\u5019\u4e5f\u53ef\u4ee5\u5229\u7528 std::multiset \uff0c\u628a\u4ece\u4e0b\u5230\u4e0a\u7684\u65f6\u5019\u628a\u6240\u6709 \\(trans\\) \u6254\u8fdb\u53bb\uff0c\u7136\u540e\u4ece\u4e0a\u5230\u4e0b\u8f6c\u79fb\u7684\u65f6\u5019\u5224\u5f53\u524d\u7684 \\(trans\\) \u662f\u4e0d\u662f multiset \u5f53\u524d\u7684\u6700\u5927\u503c\u5c31\u53ef\u4ee5\uff0c\u5982\u679c\u662f\uff0c\u90a3\u4e48\u5220\u9664\u8fd9\u4e2a\u503c\u5e76\u7528\u6b21\u5927\u503c\u66f4\u65b0\uff0c\u53cd\u4e4b\u76f4\u63a5\u7528\u6700\u5927\u503c\u66f4\u65b0\u5373\u53ef\u3002 \u4e0d\u8fc7\u590d\u6742\u5ea6\u4f1a\u591a\u4e00\u4e2a \\(\\log\\) \u3002 1 Tag : \u6811 / \u6811\u5f62DP / \u6362\u6839DP","title":"\\(\\text{Code}\\)"}]}